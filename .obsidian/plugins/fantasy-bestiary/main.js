/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => FantasyBestiary
});
module.exports = __toCommonJS(main_exports);
var import_obsidian3 = require("obsidian");

// src/settings/settings.ts
var import_obsidian2 = require("obsidian");

// node_modules/fast-copy/dist/esm/index.mjs
var toStringFunction = Function.prototype.toString;
var create = Object.create;
var toStringObject = Object.prototype.toString;
var LegacyCache = function() {
  function LegacyCache2() {
    this._keys = [];
    this._values = [];
  }
  LegacyCache2.prototype.has = function(key) {
    return !!~this._keys.indexOf(key);
  };
  LegacyCache2.prototype.get = function(key) {
    return this._values[this._keys.indexOf(key)];
  };
  LegacyCache2.prototype.set = function(key, value) {
    this._keys.push(key);
    this._values.push(value);
  };
  return LegacyCache2;
}();
function createCacheLegacy() {
  return new LegacyCache();
}
function createCacheModern() {
  return /* @__PURE__ */ new WeakMap();
}
var createCache = typeof WeakMap !== "undefined" ? createCacheModern : createCacheLegacy;
function getCleanClone(prototype) {
  if (!prototype) {
    return create(null);
  }
  var Constructor = prototype.constructor;
  if (Constructor === Object) {
    return prototype === Object.prototype ? {} : create(prototype);
  }
  if (~toStringFunction.call(Constructor).indexOf("[native code]")) {
    try {
      return new Constructor();
    } catch (_a2) {
    }
  }
  return create(prototype);
}
function getRegExpFlagsLegacy(regExp) {
  var flags = "";
  if (regExp.global) {
    flags += "g";
  }
  if (regExp.ignoreCase) {
    flags += "i";
  }
  if (regExp.multiline) {
    flags += "m";
  }
  if (regExp.unicode) {
    flags += "u";
  }
  if (regExp.sticky) {
    flags += "y";
  }
  return flags;
}
function getRegExpFlagsModern(regExp) {
  return regExp.flags;
}
var getRegExpFlags = /test/g.flags === "g" ? getRegExpFlagsModern : getRegExpFlagsLegacy;
function getTagLegacy(value) {
  var type = toStringObject.call(value);
  return type.substring(8, type.length - 1);
}
function getTagModern(value) {
  return value[Symbol.toStringTag] || getTagLegacy(value);
}
var getTag = typeof Symbol !== "undefined" ? getTagModern : getTagLegacy;
var defineProperty = Object.defineProperty;
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
var getOwnPropertyNames = Object.getOwnPropertyNames;
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var _a = Object.prototype;
var hasOwnProperty = _a.hasOwnProperty;
var propertyIsEnumerable = _a.propertyIsEnumerable;
var SUPPORTS_SYMBOL = typeof getOwnPropertySymbols === "function";
function getStrictPropertiesModern(object) {
  return getOwnPropertyNames(object).concat(getOwnPropertySymbols(object));
}
var getStrictProperties = SUPPORTS_SYMBOL ? getStrictPropertiesModern : getOwnPropertyNames;
function copyOwnPropertiesStrict(value, clone, state) {
  var properties = getStrictProperties(value);
  for (var index2 = 0, length_1 = properties.length, property = void 0, descriptor = void 0; index2 < length_1; ++index2) {
    property = properties[index2];
    if (property === "callee" || property === "caller") {
      continue;
    }
    descriptor = getOwnPropertyDescriptor(value, property);
    if (!descriptor) {
      clone[property] = state.copier(value[property], state);
      continue;
    }
    if (!descriptor.get && !descriptor.set) {
      descriptor.value = state.copier(descriptor.value, state);
    }
    try {
      defineProperty(clone, property, descriptor);
    } catch (error) {
      clone[property] = descriptor.value;
    }
  }
  return clone;
}
function copyArrayLoose(array, state) {
  var clone = new state.Constructor();
  state.cache.set(array, clone);
  for (var index2 = 0, length_2 = array.length; index2 < length_2; ++index2) {
    clone[index2] = state.copier(array[index2], state);
  }
  return clone;
}
function copyArrayStrict(array, state) {
  var clone = new state.Constructor();
  state.cache.set(array, clone);
  return copyOwnPropertiesStrict(array, clone, state);
}
function copyArrayBuffer(arrayBuffer, _state) {
  return arrayBuffer.slice(0);
}
function copyBlob(blob, _state) {
  return blob.slice(0, blob.size, blob.type);
}
function copyDataView(dataView, state) {
  return new state.Constructor(copyArrayBuffer(dataView.buffer));
}
function copyDate(date, state) {
  return new state.Constructor(date.getTime());
}
function copyMapLoose(map, state) {
  var clone = new state.Constructor();
  state.cache.set(map, clone);
  map.forEach(function(value, key) {
    clone.set(key, state.copier(value, state));
  });
  return clone;
}
function copyMapStrict(map, state) {
  return copyOwnPropertiesStrict(map, copyMapLoose(map, state), state);
}
function copyObjectLooseLegacy(object, state) {
  var clone = getCleanClone(state.prototype);
  state.cache.set(object, clone);
  for (var key in object) {
    if (hasOwnProperty.call(object, key)) {
      clone[key] = state.copier(object[key], state);
    }
  }
  return clone;
}
function copyObjectLooseModern(object, state) {
  var clone = getCleanClone(state.prototype);
  state.cache.set(object, clone);
  for (var key in object) {
    if (hasOwnProperty.call(object, key)) {
      clone[key] = state.copier(object[key], state);
    }
  }
  var symbols = getOwnPropertySymbols(object);
  for (var index2 = 0, length_3 = symbols.length, symbol = void 0; index2 < length_3; ++index2) {
    symbol = symbols[index2];
    if (propertyIsEnumerable.call(object, symbol)) {
      clone[symbol] = state.copier(object[symbol], state);
    }
  }
  return clone;
}
var copyObjectLoose = SUPPORTS_SYMBOL ? copyObjectLooseModern : copyObjectLooseLegacy;
function copyObjectStrict(object, state) {
  var clone = getCleanClone(state.prototype);
  state.cache.set(object, clone);
  return copyOwnPropertiesStrict(object, clone, state);
}
function copyPrimitiveWrapper(primitiveObject, state) {
  return new state.Constructor(primitiveObject.valueOf());
}
function copyRegExp(regExp, state) {
  var clone = new state.Constructor(regExp.source, getRegExpFlags(regExp));
  clone.lastIndex = regExp.lastIndex;
  return clone;
}
function copySelf(value, _state) {
  return value;
}
function copySetLoose(set, state) {
  var clone = new state.Constructor();
  state.cache.set(set, clone);
  set.forEach(function(value) {
    clone.add(state.copier(value, state));
  });
  return clone;
}
function copySetStrict(set, state) {
  return copyOwnPropertiesStrict(set, copySetLoose(set, state), state);
}
var isArray = Array.isArray;
var assign = Object.assign;
var getPrototypeOf = Object.getPrototypeOf;
var DEFAULT_LOOSE_OPTIONS = {
  array: copyArrayLoose,
  arrayBuffer: copyArrayBuffer,
  blob: copyBlob,
  dataView: copyDataView,
  date: copyDate,
  error: copySelf,
  map: copyMapLoose,
  object: copyObjectLoose,
  regExp: copyRegExp,
  set: copySetLoose
};
var DEFAULT_STRICT_OPTIONS = assign({}, DEFAULT_LOOSE_OPTIONS, {
  array: copyArrayStrict,
  map: copyMapStrict,
  object: copyObjectStrict,
  set: copySetStrict
});
function getTagSpecificCopiers(options) {
  return {
    Arguments: options.object,
    Array: options.array,
    ArrayBuffer: options.arrayBuffer,
    Blob: options.blob,
    Boolean: copyPrimitiveWrapper,
    DataView: options.dataView,
    Date: options.date,
    Error: options.error,
    Float32Array: options.arrayBuffer,
    Float64Array: options.arrayBuffer,
    Int8Array: options.arrayBuffer,
    Int16Array: options.arrayBuffer,
    Int32Array: options.arrayBuffer,
    Map: options.map,
    Number: copyPrimitiveWrapper,
    Object: options.object,
    Promise: copySelf,
    RegExp: options.regExp,
    Set: options.set,
    String: copyPrimitiveWrapper,
    WeakMap: copySelf,
    WeakSet: copySelf,
    Uint8Array: options.arrayBuffer,
    Uint8ClampedArray: options.arrayBuffer,
    Uint16Array: options.arrayBuffer,
    Uint32Array: options.arrayBuffer,
    Uint64Array: options.arrayBuffer
  };
}
function createCopier(options) {
  var normalizedOptions = assign({}, DEFAULT_LOOSE_OPTIONS, options);
  var tagSpecificCopiers = getTagSpecificCopiers(normalizedOptions);
  var array = tagSpecificCopiers.Array, object = tagSpecificCopiers.Object;
  function copier(value, state) {
    state.prototype = state.Constructor = void 0;
    if (!value || typeof value !== "object") {
      return value;
    }
    if (state.cache.has(value)) {
      return state.cache.get(value);
    }
    state.prototype = value.__proto__ || getPrototypeOf(value);
    state.Constructor = state.prototype && state.prototype.constructor;
    if (!state.Constructor || state.Constructor === Object) {
      return object(value, state);
    }
    if (isArray(value)) {
      return array(value, state);
    }
    var tagSpecificCopier = tagSpecificCopiers[getTag(value)];
    if (tagSpecificCopier) {
      return tagSpecificCopier(value, state);
    }
    return typeof value.then === "function" ? value : object(value, state);
  }
  return function copy(value) {
    return copier(value, {
      Constructor: void 0,
      cache: createCache(),
      copier,
      prototype: void 0
    });
  };
}
function createStrictCopier(options) {
  return createCopier(assign({}, DEFAULT_STRICT_OPTIONS, options));
}
var copyStrict = createStrictCopier({});
var index = createCopier({});

// inline-worker:__inline-worker
function inlineWorker(scriptText) {
  let blob = new Blob([scriptText], { type: "text/javascript" });
  let url = URL.createObjectURL(blob);
  let worker = new Worker(url);
  URL.revokeObjectURL(url);
  return worker;
}

// src/importers/importer.worker.ts
function Worker2() {
  return inlineWorker('var yn=Object.create;var At=Object.defineProperty;var Rn=Object.getOwnPropertyDescriptor;var Cn=Object.getOwnPropertyNames;var En=Object.getPrototypeOf,_n=Object.prototype.hasOwnProperty;var be=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports);var An=(t,e,n,r)=>{if(e&&typeof e=="object"||typeof e=="function")for(let i of Cn(e))!_n.call(t,i)&&i!==n&&At(t,i,{get:()=>e[i],enumerable:!(r=Rn(e,i))||r.enumerable});return t};var Tn=(t,e,n)=>(n=t!=null?yn(En(t)):{},An(e||!t||!t.__esModule?At(n,"default",{value:t,enumerable:!0}):n,t));var Nt=be(Tt=>{Tt.entityMap={lt:"<",gt:">",amp:"&",quot:\'"\',apos:"\'",Agrave:"\\xC0",Aacute:"\\xC1",Acirc:"\\xC2",Atilde:"\\xC3",Auml:"\\xC4",Aring:"\\xC5",AElig:"\\xC6",Ccedil:"\\xC7",Egrave:"\\xC8",Eacute:"\\xC9",Ecirc:"\\xCA",Euml:"\\xCB",Igrave:"\\xCC",Iacute:"\\xCD",Icirc:"\\xCE",Iuml:"\\xCF",ETH:"\\xD0",Ntilde:"\\xD1",Ograve:"\\xD2",Oacute:"\\xD3",Ocirc:"\\xD4",Otilde:"\\xD5",Ouml:"\\xD6",Oslash:"\\xD8",Ugrave:"\\xD9",Uacute:"\\xDA",Ucirc:"\\xDB",Uuml:"\\xDC",Yacute:"\\xDD",THORN:"\\xDE",szlig:"\\xDF",agrave:"\\xE0",aacute:"\\xE1",acirc:"\\xE2",atilde:"\\xE3",auml:"\\xE4",aring:"\\xE5",aelig:"\\xE6",ccedil:"\\xE7",egrave:"\\xE8",eacute:"\\xE9",ecirc:"\\xEA",euml:"\\xEB",igrave:"\\xEC",iacute:"\\xED",icirc:"\\xEE",iuml:"\\xEF",eth:"\\xF0",ntilde:"\\xF1",ograve:"\\xF2",oacute:"\\xF3",ocirc:"\\xF4",otilde:"\\xF5",ouml:"\\xF6",oslash:"\\xF8",ugrave:"\\xF9",uacute:"\\xFA",ucirc:"\\xFB",uuml:"\\xFC",yacute:"\\xFD",thorn:"\\xFE",yuml:"\\xFF",nbsp:"\\xA0",iexcl:"\\xA1",cent:"\\xA2",pound:"\\xA3",curren:"\\xA4",yen:"\\xA5",brvbar:"\\xA6",sect:"\\xA7",uml:"\\xA8",copy:"\\xA9",ordf:"\\xAA",laquo:"\\xAB",not:"\\xAC",shy:"\\xAD\\xAD",reg:"\\xAE",macr:"\\xAF",deg:"\\xB0",plusmn:"\\xB1",sup2:"\\xB2",sup3:"\\xB3",acute:"\\xB4",micro:"\\xB5",para:"\\xB6",middot:"\\xB7",cedil:"\\xB8",sup1:"\\xB9",ordm:"\\xBA",raquo:"\\xBB",frac14:"\\xBC",frac12:"\\xBD",frac34:"\\xBE",iquest:"\\xBF",times:"\\xD7",divide:"\\xF7",forall:"\\u2200",part:"\\u2202",exist:"\\u2203",empty:"\\u2205",nabla:"\\u2207",isin:"\\u2208",notin:"\\u2209",ni:"\\u220B",prod:"\\u220F",sum:"\\u2211",minus:"\\u2212",lowast:"\\u2217",radic:"\\u221A",prop:"\\u221D",infin:"\\u221E",ang:"\\u2220",and:"\\u2227",or:"\\u2228",cap:"\\u2229",cup:"\\u222A",int:"\\u222B",there4:"\\u2234",sim:"\\u223C",cong:"\\u2245",asymp:"\\u2248",ne:"\\u2260",equiv:"\\u2261",le:"\\u2264",ge:"\\u2265",sub:"\\u2282",sup:"\\u2283",nsub:"\\u2284",sube:"\\u2286",supe:"\\u2287",oplus:"\\u2295",otimes:"\\u2297",perp:"\\u22A5",sdot:"\\u22C5",Alpha:"\\u0391",Beta:"\\u0392",Gamma:"\\u0393",Delta:"\\u0394",Epsilon:"\\u0395",Zeta:"\\u0396",Eta:"\\u0397",Theta:"\\u0398",Iota:"\\u0399",Kappa:"\\u039A",Lambda:"\\u039B",Mu:"\\u039C",Nu:"\\u039D",Xi:"\\u039E",Omicron:"\\u039F",Pi:"\\u03A0",Rho:"\\u03A1",Sigma:"\\u03A3",Tau:"\\u03A4",Upsilon:"\\u03A5",Phi:"\\u03A6",Chi:"\\u03A7",Psi:"\\u03A8",Omega:"\\u03A9",alpha:"\\u03B1",beta:"\\u03B2",gamma:"\\u03B3",delta:"\\u03B4",epsilon:"\\u03B5",zeta:"\\u03B6",eta:"\\u03B7",theta:"\\u03B8",iota:"\\u03B9",kappa:"\\u03BA",lambda:"\\u03BB",mu:"\\u03BC",nu:"\\u03BD",xi:"\\u03BE",omicron:"\\u03BF",pi:"\\u03C0",rho:"\\u03C1",sigmaf:"\\u03C2",sigma:"\\u03C3",tau:"\\u03C4",upsilon:"\\u03C5",phi:"\\u03C6",chi:"\\u03C7",psi:"\\u03C8",omega:"\\u03C9",thetasym:"\\u03D1",upsih:"\\u03D2",piv:"\\u03D6",OElig:"\\u0152",oelig:"\\u0153",Scaron:"\\u0160",scaron:"\\u0161",Yuml:"\\u0178",fnof:"\\u0192",circ:"\\u02C6",tilde:"\\u02DC",ensp:"\\u2002",emsp:"\\u2003",thinsp:"\\u2009",zwnj:"\\u200C",zwj:"\\u200D",lrm:"\\u200E",rlm:"\\u200F",ndash:"\\u2013",mdash:"\\u2014",lsquo:"\\u2018",rsquo:"\\u2019",sbquo:"\\u201A",ldquo:"\\u201C",rdquo:"\\u201D",bdquo:"\\u201E",dagger:"\\u2020",Dagger:"\\u2021",bull:"\\u2022",hellip:"\\u2026",permil:"\\u2030",prime:"\\u2032",Prime:"\\u2033",lsaquo:"\\u2039",rsaquo:"\\u203A",oline:"\\u203E",euro:"\\u20AC",trade:"\\u2122",larr:"\\u2190",uarr:"\\u2191",rarr:"\\u2192",darr:"\\u2193",harr:"\\u2194",crarr:"\\u21B5",lceil:"\\u2308",rceil:"\\u2309",lfloor:"\\u230A",rfloor:"\\u230B",loz:"\\u25CA",spades:"\\u2660",clubs:"\\u2663",hearts:"\\u2665",diams:"\\u2666"}});var It=be(Le=>{var Ue=/[A-Z_a-z\\xC0-\\xD6\\xD8-\\xF6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/,bt=new RegExp("[\\\\-\\\\.0-9"+Ue.source.slice(1,-1)+"\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040]"),wt=new RegExp("^"+Ue.source+bt.source+"*(?::"+Ue.source+bt.source+"*)?$"),he=0,q=1,ne=2,ge=3,re=4,ie=5,de=6,we=7;function se(t,e){this.message=t,this.locator=e,Error.captureStackTrace&&Error.captureStackTrace(this,se)}se.prototype=new Error;se.prototype.name=se.name;function xt(){}xt.prototype={parse:function(t,e,n){var r=this.domBuilder;r.startDocument(),Mt(e,e={}),Nn(t,e,n,r,this.errorHandler),r.endDocument()}};function Nn(t,e,n,r,i){function s(_){if(_>65535){_-=65536;var g=55296+(_>>10),ee=56320+(_&1023);return String.fromCharCode(g,ee)}else return String.fromCharCode(_)}function o(_){var g=_.slice(1,-1);return g in n?n[g]:g.charAt(0)==="#"?s(parseInt(g.substr(1).replace("x","0x"))):(i.error("entity not found:"+_),_)}function l(_){if(_>R){var g=t.substring(R,_).replace(/&#?\\w+;/g,o);S&&u(R),r.characters(g,0,_-R),R=_}}function u(_,g){for(;_>=f&&(g=h.exec(t));)a=g.index,f=a+g[0].length,S.lineNumber++;S.columnNumber=_-a+1}for(var a=0,f=0,h=/.*(?:\\r\\n?|\\n)|.*$/g,S=r.locator,E=[{currentNSMap:e}],y={},R=0;;){try{var v=t.indexOf("<",R);if(v<0){if(!t.substr(R).match(/^\\s*$/)){var M=r.doc,P=M.createTextNode(t.substr(R));M.appendChild(P),r.currentElement=P}return}switch(v>R&&l(v),t.charAt(v+1)){case"/":var w=t.indexOf(">",v+3),b=t.substring(v+2,w),T=E.pop();w<0?(b=t.substring(v+2).replace(/[\\s<].*/,""),i.error("end tag name: "+b+" is not complete:"+T.tagName),w=v+1+b.length):b.match(/\\s</)&&(b=b.replace(/[\\s<].*/,""),i.error("end tag name: "+b+" maybe not complete"),w=v+1+b.length);var U=T.localNSMap,W=T.tagName==b,d=W||T.tagName&&T.tagName.toLowerCase()==b.toLowerCase();if(d){if(r.endElement(T.uri,T.localName,b),U)for(var G in U)r.endPrefixMapping(G);W||i.fatalError("end tag name: "+b+" is not match the current start tagName:"+T.tagName)}else E.push(T);w++;break;case"?":S&&u(v),w=xn(t,v,r);break;case"!":S&&u(v),w=$n(t,v,r,i);break;default:S&&u(v);var A=new Ot,L=E[E.length-1].currentNSMap,w=bn(t,v,A,L,o,i),j=A.length;if(!A.closed&&Dn(t,w,A.tagName,y)&&(A.closed=!0,n.nbsp||i.warning("unclosed xml attribute")),S&&j){for(var J=Dt(S,{}),z=0;z<j;z++){var V=A[z];u(V.offset),V.locator=Dt(S,{})}r.locator=J,$t(A,r,L)&&E.push(A),r.locator=S}else $t(A,r,L)&&E.push(A);A.uri==="http://www.w3.org/1999/xhtml"&&!A.closed?w=wn(t,w,A.tagName,o,r):w++}}catch(_){if(_ instanceof se)throw _;i.error("element parse error: "+_),w=-1}w>R?R=w:l(Math.max(v,R)+1)}}function Dt(t,e){return e.lineNumber=t.lineNumber,e.columnNumber=t.columnNumber,e}function bn(t,e,n,r,i,s){function o(E,y,R){E in n.attributeNames&&s.fatalError("Attribute "+E+" redefined"),n.addValue(E,y,R)}for(var l,u,a=++e,f=he;;){var h=t.charAt(a);switch(h){case"=":if(f===q)l=t.slice(e,a),f=ge;else if(f===ne)f=ge;else throw new Error("attribute equal must after attrName");break;case"\'":case\'"\':if(f===ge||f===q)if(f===q&&(s.warning(\'attribute value must after "="\'),l=t.slice(e,a)),e=a+1,a=t.indexOf(h,e),a>0)u=t.slice(e,a).replace(/&#?\\w+;/g,i),o(l,u,e-1),f=ie;else throw new Error("attribute value no end \'"+h+"\' match");else if(f==re)u=t.slice(e,a).replace(/&#?\\w+;/g,i),o(l,u,e),s.warning(\'attribute "\'+l+\'" missed start quot(\'+h+")!!"),e=a+1,f=ie;else throw new Error(\'attribute value must after "="\');break;case"/":switch(f){case he:n.setTagName(t.slice(e,a));case ie:case de:case we:f=we,n.closed=!0;case re:case q:case ne:break;default:throw new Error("attribute invalid close char(\'/\')")}break;case"":return s.error("unexpected end of input"),f==he&&n.setTagName(t.slice(e,a)),a;case">":switch(f){case he:n.setTagName(t.slice(e,a));case ie:case de:case we:break;case re:case q:u=t.slice(e,a),u.slice(-1)==="/"&&(n.closed=!0,u=u.slice(0,-1));case ne:f===ne&&(u=l),f==re?(s.warning(\'attribute "\'+u+\'" missed quot(")!\'),o(l,u.replace(/&#?\\w+;/g,i),e)):((r[""]!=="http://www.w3.org/1999/xhtml"||!u.match(/^(?:disabled|checked|selected)$/i))&&s.warning(\'attribute "\'+u+\'" missed value!! "\'+u+\'" instead!!\'),o(u,u,e));break;case ge:throw new Error("attribute value missed!!")}return a;case"\\x80":h=" ";default:if(h<=" ")switch(f){case he:n.setTagName(t.slice(e,a)),f=de;break;case q:l=t.slice(e,a),f=ne;break;case re:var u=t.slice(e,a).replace(/&#?\\w+;/g,i);s.warning(\'attribute "\'+u+\'" missed quot(")!!\'),o(l,u,e);case ie:f=de;break}else switch(f){case ne:var S=n.tagName;(r[""]!=="http://www.w3.org/1999/xhtml"||!l.match(/^(?:disabled|checked|selected)$/i))&&s.warning(\'attribute "\'+l+\'" missed value!! "\'+l+\'" instead2!!\'),o(l,l,e),e=a,f=q;break;case ie:s.warning(\'attribute space is required"\'+l+\'"!!\');case de:f=q,e=a;break;case ge:f=re,e=a;break;case we:throw new Error("elements closed character \'/\' and \'>\' must be connected to")}}a++}}function $t(t,e,n){for(var r=t.tagName,i=null,h=t.length;h--;){var s=t[h],o=s.qName,l=s.value,S=o.indexOf(":");if(S>0)var u=s.prefix=o.slice(0,S),a=o.slice(S+1),f=u==="xmlns"&&a;else a=o,u=null,f=o==="xmlns"&&"";s.localName=a,f!==!1&&(i==null&&(i={},Mt(n,n={})),n[f]=i[f]=l,s.uri="http://www.w3.org/2000/xmlns/",e.startPrefixMapping(f,l))}for(var h=t.length;h--;){s=t[h];var u=s.prefix;u&&(u==="xml"&&(s.uri="http://www.w3.org/XML/1998/namespace"),u!=="xmlns"&&(s.uri=n[u||""]))}var S=r.indexOf(":");S>0?(u=t.prefix=r.slice(0,S),a=t.localName=r.slice(S+1)):(u=null,a=t.localName=r);var E=t.uri=n[u||""];if(e.startElement(E,a,r,t),t.closed){if(e.endElement(E,a,r),i)for(u in i)e.endPrefixMapping(u)}else return t.currentNSMap=n,t.localNSMap=i,!0}function wn(t,e,n,r,i){if(/^(?:script|textarea)$/i.test(n)){var s=t.indexOf("</"+n+">",e),o=t.substring(e+1,s);if(/[&<]/.test(o))return/^script$/i.test(n)?(i.characters(o,0,o.length),s):(o=o.replace(/&#?\\w+;/g,r),i.characters(o,0,o.length),s)}return e+1}function Dn(t,e,n,r){var i=r[n];return i==null&&(i=t.lastIndexOf("</"+n+">"),i<e&&(i=t.lastIndexOf("</"+n)),r[n]=i),i<e}function Mt(t,e){for(var n in t)e[n]=t[n]}function $n(t,e,n,r){var i=t.charAt(e+2);switch(i){case"-":if(t.charAt(e+3)==="-"){var s=t.indexOf("-->",e+4);return s>e?(n.comment(t,e+4,s-e-4),s+3):(r.error("Unclosed comment"),-1)}else return-1;default:if(t.substr(e+3,6)=="CDATA["){var s=t.indexOf("]]>",e+9);return n.startCDATA(),n.characters(t,e+9,s-e-9),n.endCDATA(),s+3}var o=Mn(t,e),l=o.length;if(l>1&&/!doctype/i.test(o[0][0])){var u=o[1][0],a=!1,f=!1;l>3&&(/^public$/i.test(o[2][0])?(a=o[3][0],f=l>4&&o[4][0]):/^system$/i.test(o[2][0])&&(f=o[3][0]));var h=o[l-1];return n.startDTD(u,a,f),n.endDTD(),h.index+h[0].length}}return-1}function xn(t,e,n){var r=t.indexOf("?>",e);if(r){var i=t.substring(e,r).match(/^<\\?(\\S*)\\s*([\\s\\S]*?)\\s*$/);if(i){var s=i[0].length;return n.processingInstruction(i[1],i[2]),r+2}else return-1}return-1}function Ot(){this.attributeNames={}}Ot.prototype={setTagName:function(t){if(!wt.test(t))throw new Error("invalid tagName:"+t);this.tagName=t},addValue:function(t,e,n){if(!wt.test(t))throw new Error("invalid attribute:"+t);this.attributeNames[t]=this.length,this[this.length++]={qName:t,value:e,offset:n}},length:0,getLocalName:function(t){return this[t].localName},getLocator:function(t){return this[t].locator},getQName:function(t){return this[t].qName},getURI:function(t){return this[t].uri},getValue:function(t){return this[t].value}};function Mn(t,e){var n,r=[],i=/\'[^\']+\'|"[^"]+"|[^\\s<>\\/=]+=?|(\\/?\\s*>|<)/g;for(i.lastIndex=e,i.exec(t);n=i.exec(t);)if(r.push(n),n[1])return r}Le.XMLReader=xt;Le.ParseError=se});var Xe=be(Ce=>{function ve(t,e){for(var n in t)e[n]=t[n]}function k(t,e){var n=t.prototype;if(!(n instanceof e)){let i=function(){};var r=i;i.prototype=e.prototype,i=new i,ve(n,i),t.prototype=n=i}n.constructor!=t&&(typeof t!="function"&&console.error("unknow Class:"+t),n.constructor=t)}var On="http://www.w3.org/1999/xhtml",F={},B=F.ELEMENT_NODE=1,oe=F.ATTRIBUTE_NODE=2,De=F.TEXT_NODE=3,Wt=F.CDATA_SECTION_NODE=4,Gt=F.ENTITY_REFERENCE_NODE=5,In=F.ENTITY_NODE=6,jt=F.PROCESSING_INSTRUCTION_NODE=7,Bt=F.COMMENT_NODE=8,Vt=F.DOCUMENT_NODE=9,zt=F.DOCUMENT_TYPE_NODE=10,H=F.DOCUMENT_FRAGMENT_NODE=11,Pn=F.NOTATION_NODE=12,O={},$={},Sa=O.INDEX_SIZE_ERR=($[1]="Index size error",1),va=O.DOMSTRING_SIZE_ERR=($[2]="DOMString size error",2),kn=O.HIERARCHY_REQUEST_ERR=($[3]="Hierarchy request error",3),ya=O.WRONG_DOCUMENT_ERR=($[4]="Wrong document",4),Ra=O.INVALID_CHARACTER_ERR=($[5]="Invalid character",5),Ca=O.NO_DATA_ALLOWED_ERR=($[6]="No data allowed",6),Ea=O.NO_MODIFICATION_ALLOWED_ERR=($[7]="No modification allowed",7),Fn=O.NOT_FOUND_ERR=($[8]="Not found",8),_a=O.NOT_SUPPORTED_ERR=($[9]="Not supported",9),Pt=O.INUSE_ATTRIBUTE_ERR=($[10]="Attribute in use",10),Aa=O.INVALID_STATE_ERR=($[11]="Invalid state",11),Ta=O.SYNTAX_ERR=($[12]="Syntax error",12),Na=O.INVALID_MODIFICATION_ERR=($[13]="Invalid modification",13),ba=O.NAMESPACE_ERR=($[14]="Invalid namespace",14),wa=O.INVALID_ACCESS_ERR=($[15]="Invalid access",15);function te(t,e){if(e instanceof Error)var n=e;else n=this,Error.call(this,$[t]),this.message=$[t],Error.captureStackTrace&&Error.captureStackTrace(this,te);return n.code=t,e&&(this.message=this.message+": "+e),n}te.prototype=Error.prototype;ve(O,te);function Z(){}Z.prototype={length:0,item:function(t){return this[t]||null},toString:function(t,e){for(var n=[],r=0;r<this.length;r++)ae(this[r],n,t,e);return n.join("")}};function ce(t,e){this._node=t,this._refresh=e,Ge(this)}function Ge(t){var e=t._node._inc||t._node.ownerDocument._inc;if(t._inc!=e){var n=t._refresh(t._node);nn(t,"length",n.length),ve(n,t),t._inc=e}}ce.prototype.item=function(t){return Ge(this),this[t]};k(ce,Z);function $e(){}function Ht(t,e){for(var n=t.length;n--;)if(t[n]===e)return n}function kt(t,e,n,r){if(r?e[Ht(e,r)]=n:e[e.length++]=n,t){n.ownerElement=t;var i=t.ownerDocument;i&&(r&&Yt(i,t,r),Un(i,t,n))}}function Ft(t,e,n){var r=Ht(e,n);if(r>=0){for(var i=e.length-1;r<i;)e[r]=e[++r];if(e.length=i,t){var s=t.ownerDocument;s&&(Yt(s,t,n),n.ownerElement=null)}}else throw te(Fn,new Error(t.tagName+"@"+n))}$e.prototype={length:0,item:Z.prototype.item,getNamedItem:function(t){for(var e=this.length;e--;){var n=this[e];if(n.nodeName==t)return n}},setNamedItem:function(t){var e=t.ownerElement;if(e&&e!=this._ownerElement)throw new te(Pt);var n=this.getNamedItem(t.nodeName);return kt(this._ownerElement,this,t,n),n},setNamedItemNS:function(t){var e=t.ownerElement,n;if(e&&e!=this._ownerElement)throw new te(Pt);return n=this.getNamedItemNS(t.namespaceURI,t.localName),kt(this._ownerElement,this,t,n),n},removeNamedItem:function(t){var e=this.getNamedItem(t);return Ft(this._ownerElement,this,e),e},removeNamedItemNS:function(t,e){var n=this.getNamedItemNS(t,e);return Ft(this._ownerElement,this,n),n},getNamedItemNS:function(t,e){for(var n=this.length;n--;){var r=this[n];if(r.localName==e&&r.namespaceURI==t)return r}return null}};function Kt(t){if(this._features={},t)for(var e in t)this._features=t[e]}Kt.prototype={hasFeature:function(t,e){var n=this._features[t.toLowerCase()];return!!(n&&(!e||e in n))},createDocument:function(t,e,n){var r=new ye;if(r.implementation=this,r.childNodes=new Z,r.doctype=n,n&&r.appendChild(n),e){var i=r.createElementNS(t,e);r.appendChild(i)}return r},createDocumentType:function(t,e,n){var r=new He;return r.name=t,r.nodeName=t,r.publicId=e,r.systemId=n,r}};function I(){}I.prototype={firstChild:null,lastChild:null,previousSibling:null,nextSibling:null,attributes:null,parentNode:null,childNodes:null,ownerDocument:null,nodeValue:null,namespaceURI:null,prefix:null,localName:null,insertBefore:function(t,e){return qt(this,t,e)},replaceChild:function(t,e){this.insertBefore(t,e),e&&this.removeChild(e)},removeChild:function(t){return Xt(this,t)},appendChild:function(t){return this.insertBefore(t,null)},hasChildNodes:function(){return this.firstChild!=null},cloneNode:function(t){return We(this.ownerDocument||this,this,t)},normalize:function(){for(var t=this.firstChild;t;){var e=t.nextSibling;e&&e.nodeType==De&&t.nodeType==De?(this.removeChild(e),t.appendData(e.data)):(t.normalize(),t=e)}},isSupported:function(t,e){return this.ownerDocument.implementation.hasFeature(t,e)},hasAttributes:function(){return this.attributes.length>0},lookupPrefix:function(t){for(var e=this;e;){var n=e._nsMap;if(n){for(var r in n)if(n[r]==t)return r}e=e.nodeType==oe?e.ownerDocument:e.parentNode}return null},lookupNamespaceURI:function(t){for(var e=this;e;){var n=e._nsMap;if(n&&t in n)return n[t];e=e.nodeType==oe?e.ownerDocument:e.parentNode}return null},isDefaultNamespace:function(t){var e=this.lookupPrefix(t);return e==null}};function Ut(t){return t=="<"&&"&lt;"||t==">"&&"&gt;"||t=="&"&&"&amp;"||t==\'"\'&&"&quot;"||"&#"+t.charCodeAt()+";"}ve(F,I);ve(F,I.prototype);function Se(t,e){if(e(t))return!0;if(t=t.firstChild)do if(Se(t,e))return!0;while(t=t.nextSibling)}function ye(){}function Un(t,e,n){t&&t._inc++;var r=n.namespaceURI;r=="http://www.w3.org/2000/xmlns/"&&(e._nsMap[n.prefix?n.localName:""]=n.value)}function Yt(t,e,n,r){t&&t._inc++;var i=n.namespaceURI;i=="http://www.w3.org/2000/xmlns/"&&delete e._nsMap[n.prefix?n.localName:""]}function je(t,e,n){if(t&&t._inc){t._inc++;var r=e.childNodes;if(n)r[r.length++]=n;else{for(var i=e.firstChild,s=0;i;)r[s++]=i,i=i.nextSibling;r.length=s}}}function Xt(t,e){var n=e.previousSibling,r=e.nextSibling;return n?n.nextSibling=r:t.firstChild=r,r?r.previousSibling=n:t.lastChild=n,je(t.ownerDocument,t),e}function qt(t,e,n){var r=e.parentNode;if(r&&r.removeChild(e),e.nodeType===H){var i=e.firstChild;if(i==null)return e;var s=e.lastChild}else i=s=e;var o=n?n.previousSibling:t.lastChild;i.previousSibling=o,s.nextSibling=n,o?o.nextSibling=i:t.firstChild=i,n==null?t.lastChild=s:n.previousSibling=s;do i.parentNode=t;while(i!==s&&(i=i.nextSibling));return je(t.ownerDocument||t,t),e.nodeType==H&&(e.firstChild=e.lastChild=null),e}function Ln(t,e){var n=e.parentNode;if(n){var r=t.lastChild;n.removeChild(e);var r=t.lastChild}var r=t.lastChild;return e.parentNode=t,e.previousSibling=r,e.nextSibling=null,r?r.nextSibling=e:t.firstChild=e,t.lastChild=e,je(t.ownerDocument,t,e),e}ye.prototype={nodeName:"#document",nodeType:Vt,doctype:null,documentElement:null,_inc:1,insertBefore:function(t,e){if(t.nodeType==H){for(var n=t.firstChild;n;){var r=n.nextSibling;this.insertBefore(n,e),n=r}return t}return this.documentElement==null&&t.nodeType==B&&(this.documentElement=t),qt(this,t,e),t.ownerDocument=this,t},removeChild:function(t){return this.documentElement==t&&(this.documentElement=null),Xt(this,t)},importNode:function(t,e){return tn(this,t,e)},getElementById:function(t){var e=null;return Se(this.documentElement,function(n){if(n.nodeType==B&&n.getAttribute("id")==t)return e=n,!0}),e},getElementsByClassName:function(t){var e=new RegExp("(^|\\\\s)"+t+"(\\\\s|$)");return new ce(this,function(n){var r=[];return Se(n.documentElement,function(i){i!==n&&i.nodeType==B&&e.test(i.getAttribute("class"))&&r.push(i)}),r})},createElement:function(t){var e=new le;e.ownerDocument=this,e.nodeName=t,e.tagName=t,e.childNodes=new Z;var n=e.attributes=new $e;return n._ownerElement=e,e},createDocumentFragment:function(){var t=new Me;return t.ownerDocument=this,t.childNodes=new Z,t},createTextNode:function(t){var e=new Be;return e.ownerDocument=this,e.appendData(t),e},createComment:function(t){var e=new Ve;return e.ownerDocument=this,e.appendData(t),e},createCDATASection:function(t){var e=new ze;return e.ownerDocument=this,e.appendData(t),e},createProcessingInstruction:function(t,e){var n=new Ye;return n.ownerDocument=this,n.tagName=n.target=t,n.nodeValue=n.data=e,n},createAttribute:function(t){var e=new xe;return e.ownerDocument=this,e.name=t,e.nodeName=t,e.localName=t,e.specified=!0,e},createEntityReference:function(t){var e=new Ke;return e.ownerDocument=this,e.nodeName=t,e},createElementNS:function(t,e){var n=new le,r=e.split(":"),i=n.attributes=new $e;return n.childNodes=new Z,n.ownerDocument=this,n.nodeName=e,n.tagName=e,n.namespaceURI=t,r.length==2?(n.prefix=r[0],n.localName=r[1]):n.localName=e,i._ownerElement=n,n},createAttributeNS:function(t,e){var n=new xe,r=e.split(":");return n.ownerDocument=this,n.nodeName=e,n.name=e,n.namespaceURI=t,n.specified=!0,r.length==2?(n.prefix=r[0],n.localName=r[1]):n.localName=e,n}};k(ye,I);function le(){this._nsMap={}}le.prototype={nodeType:B,hasAttribute:function(t){return this.getAttributeNode(t)!=null},getAttribute:function(t){var e=this.getAttributeNode(t);return e&&e.value||""},getAttributeNode:function(t){return this.attributes.getNamedItem(t)},setAttribute:function(t,e){var n=this.ownerDocument.createAttribute(t);n.value=n.nodeValue=""+e,this.setAttributeNode(n)},removeAttribute:function(t){var e=this.getAttributeNode(t);e&&this.removeAttributeNode(e)},appendChild:function(t){return t.nodeType===H?this.insertBefore(t,null):Ln(this,t)},setAttributeNode:function(t){return this.attributes.setNamedItem(t)},setAttributeNodeNS:function(t){return this.attributes.setNamedItemNS(t)},removeAttributeNode:function(t){return this.attributes.removeNamedItem(t.nodeName)},removeAttributeNS:function(t,e){var n=this.getAttributeNodeNS(t,e);n&&this.removeAttributeNode(n)},hasAttributeNS:function(t,e){return this.getAttributeNodeNS(t,e)!=null},getAttributeNS:function(t,e){var n=this.getAttributeNodeNS(t,e);return n&&n.value||""},setAttributeNS:function(t,e,n){var r=this.ownerDocument.createAttributeNS(t,e);r.value=r.nodeValue=""+n,this.setAttributeNode(r)},getAttributeNodeNS:function(t,e){return this.attributes.getNamedItemNS(t,e)},getElementsByTagName:function(t){return new ce(this,function(e){var n=[];return Se(e,function(r){r!==e&&r.nodeType==B&&(t==="*"||r.tagName==t)&&n.push(r)}),n})},getElementsByTagNameNS:function(t,e){return new ce(this,function(n){var r=[];return Se(n,function(i){i!==n&&i.nodeType===B&&(t==="*"||i.namespaceURI===t)&&(e==="*"||i.localName==e)&&r.push(i)}),r})}};ye.prototype.getElementsByTagName=le.prototype.getElementsByTagName;ye.prototype.getElementsByTagNameNS=le.prototype.getElementsByTagNameNS;k(le,I);function xe(){}xe.prototype.nodeType=oe;k(xe,I);function Re(){}Re.prototype={data:"",substringData:function(t,e){return this.data.substring(t,t+e)},appendData:function(t){t=this.data+t,this.nodeValue=this.data=t,this.length=t.length},insertData:function(t,e){this.replaceData(t,0,e)},appendChild:function(t){throw new Error($[kn])},deleteData:function(t,e){this.replaceData(t,e,"")},replaceData:function(t,e,n){var r=this.data.substring(0,t),i=this.data.substring(t+e);n=r+n+i,this.nodeValue=this.data=n,this.length=n.length}};k(Re,I);function Be(){}Be.prototype={nodeName:"#text",nodeType:De,splitText:function(t){var e=this.data,n=e.substring(t);e=e.substring(0,t),this.data=this.nodeValue=e,this.length=e.length;var r=this.ownerDocument.createTextNode(n);return this.parentNode&&this.parentNode.insertBefore(r,this.nextSibling),r}};k(Be,Re);function Ve(){}Ve.prototype={nodeName:"#comment",nodeType:Bt};k(Ve,Re);function ze(){}ze.prototype={nodeName:"#cdata-section",nodeType:Wt};k(ze,Re);function He(){}He.prototype.nodeType=zt;k(He,I);function Zt(){}Zt.prototype.nodeType=Pn;k(Zt,I);function Qt(){}Qt.prototype.nodeType=In;k(Qt,I);function Ke(){}Ke.prototype.nodeType=Gt;k(Ke,I);function Me(){}Me.prototype.nodeName="#document-fragment";Me.prototype.nodeType=H;k(Me,I);function Ye(){}Ye.prototype.nodeType=jt;k(Ye,I);function Jt(){}Jt.prototype.serializeToString=function(t,e,n){return en.call(t,e,n)};I.prototype.toString=en;function en(t,e){var n=[],r=this.nodeType==9&&this.documentElement||this,i=r.prefix,s=r.namespaceURI;if(s&&i==null){var i=r.lookupPrefix(s);if(i==null)var o=[{namespace:s,prefix:null}]}return ae(this,n,t,e,o),n.join("")}function Lt(t,e,n){var r=t.prefix||"",i=t.namespaceURI;if(!r&&!i||r==="xml"&&i==="http://www.w3.org/XML/1998/namespace"||i=="http://www.w3.org/2000/xmlns/")return!1;for(var s=n.length;s--;){var o=n[s];if(o.prefix==r)return o.namespace!=i}return!0}function ae(t,e,n,r,i){if(r)if(t=r(t),t){if(typeof t=="string"){e.push(t);return}}else return;switch(t.nodeType){case B:i||(i=[]);var s=i.length,o=t.attributes,l=o.length,y=t.firstChild,u=t.tagName;n=On===t.namespaceURI||n,e.push("<",u);for(var a=0;a<l;a++){var f=o.item(a);f.prefix=="xmlns"?i.push({prefix:f.localName,namespace:f.value}):f.nodeName=="xmlns"&&i.push({prefix:"",namespace:f.value})}for(var a=0;a<l;a++){var f=o.item(a);if(Lt(f,n,i)){var h=f.prefix||"",S=f.namespaceURI,E=h?" xmlns:"+h:" xmlns";e.push(E,\'="\',S,\'"\'),i.push({prefix:h,namespace:S})}ae(f,e,n,r,i)}if(Lt(t,n,i)){var h=t.prefix||"",S=t.namespaceURI;if(S){var E=h?" xmlns:"+h:" xmlns";e.push(E,\'="\',S,\'"\'),i.push({prefix:h,namespace:S})}}if(y||n&&!/^(?:meta|link|img|br|hr|input)$/i.test(u)){if(e.push(">"),n&&/^script$/i.test(u))for(;y;)y.data?e.push(y.data):ae(y,e,n,r,i),y=y.nextSibling;else for(;y;)ae(y,e,n,r,i),y=y.nextSibling;e.push("</",u,">")}else e.push("/>");return;case Vt:case H:for(var y=t.firstChild;y;)ae(y,e,n,r,i),y=y.nextSibling;return;case oe:return e.push(" ",t.name,\'="\',t.value.replace(/[<&"]/g,Ut),\'"\');case De:return e.push(t.data.replace(/[<&]/g,Ut).replace(/]]>/g,"]]&gt;"));case Wt:return e.push("<![CDATA[",t.data,"]]>");case Bt:return e.push("<!--",t.data,"-->");case zt:var R=t.publicId,v=t.systemId;if(e.push("<!DOCTYPE ",t.name),R)e.push(" PUBLIC ",R),v&&v!="."&&e.push(" ",v),e.push(">");else if(v&&v!=".")e.push(" SYSTEM ",v,">");else{var M=t.internalSubset;M&&e.push(" [",M,"]"),e.push(">")}return;case jt:return e.push("<?",t.target," ",t.data,"?>");case Gt:return e.push("&",t.nodeName,";");default:e.push("??",t.nodeName)}}function tn(t,e,n){var r;switch(e.nodeType){case B:r=e.cloneNode(!1),r.ownerDocument=t;case H:break;case oe:n=!0;break}if(r||(r=e.cloneNode(!1)),r.ownerDocument=t,r.parentNode=null,n)for(var i=e.firstChild;i;)r.appendChild(tn(t,i,n)),i=i.nextSibling;return r}function We(t,e,n){var r=new e.constructor;for(var i in e){var s=e[i];typeof s!="object"&&s!=r[i]&&(r[i]=s)}switch(e.childNodes&&(r.childNodes=new Z),r.ownerDocument=t,r.nodeType){case B:var o=e.attributes,l=r.attributes=new $e,u=o.length;l._ownerElement=r;for(var a=0;a<u;a++)r.setAttributeNode(We(t,o.item(a),!0));break;case oe:n=!0}if(n)for(var f=e.firstChild;f;)r.appendChild(We(t,f,n)),f=f.nextSibling;return r}function nn(t,e,n){t[e]=n}try{if(Object.defineProperty){let t=function(e){switch(e.nodeType){case B:case H:var n=[];for(e=e.firstChild;e;)e.nodeType!==7&&e.nodeType!==8&&n.push(t(e)),e=e.nextSibling;return n.join("");default:return e.nodeValue}};Da=t,Object.defineProperty(ce.prototype,"length",{get:function(){return Ge(this),this.$$length}}),Object.defineProperty(I.prototype,"textContent",{get:function(){return t(this)},set:function(e){switch(this.nodeType){case B:case H:for(;this.firstChild;)this.removeChild(this.firstChild);(e||String(e))&&this.appendChild(this.ownerDocument.createTextNode(e));break;default:this.data=e,this.value=e,this.nodeValue=e}}}),nn=function(e,n,r){e["$$"+n]=r}}}catch(t){}var Da;Ce.Node=I;Ce.DOMException=te;Ce.DOMImplementation=Kt;Ce.XMLSerializer=Jt});var on=be(_e=>{function sn(t){this.options=t||{locator:{}}}sn.prototype.parseFromString=function(t,e){var n=this.options,r=new jn,i=n.domBuilder||new Ee,s=n.errorHandler,o=n.locator,l=n.xmlns||{},u=/\\/x?html?$/.test(e),a=u?Gn.entityMap:{lt:"<",gt:">",amp:"&",quot:\'"\',apos:"\'"};return o&&i.setDocumentLocator(o),r.errorHandler=Wn(s,i,o),r.domBuilder=n.domBuilder||i,u&&(l[""]="http://www.w3.org/1999/xhtml"),l.xml=l.xml||"http://www.w3.org/XML/1998/namespace",t&&typeof t=="string"?r.parse(t,l,a):r.errorHandler.error("invalid doc source"),i.doc};function Wn(t,e,n){if(!t){if(e instanceof Ee)return e;t=e}var r={},i=t instanceof Function;n=n||{};function s(o){var l=t[o];!l&&i&&(l=t.length==2?function(u){t(o,u)}:t),r[o]=l&&function(u){l("[xmldom "+o+"]	"+u+qe(n))}||function(){}}return s("warning"),s("error"),s("fatalError"),r}function Ee(){this.cdata=!1}function ue(t,e){e.lineNumber=t.lineNumber,e.columnNumber=t.columnNumber}Ee.prototype={startDocument:function(){this.doc=new Vn().createDocument(null,null,null),this.locator&&(this.doc.documentURI=this.locator.systemId)},startElement:function(t,e,n,r){var i=this.doc,s=i.createElementNS(t,n||e),o=r.length;Oe(this,s),this.currentElement=s,this.locator&&ue(this.locator,s);for(var l=0;l<o;l++){var t=r.getURI(l),u=r.getValue(l),n=r.getQName(l),a=i.createAttributeNS(t,n);this.locator&&ue(r.getLocator(l),a),a.value=a.nodeValue=u,s.setAttributeNode(a)}},endElement:function(t,e,n){var r=this.currentElement,i=r.tagName;this.currentElement=r.parentNode},startPrefixMapping:function(t,e){},endPrefixMapping:function(t){},processingInstruction:function(t,e){var n=this.doc.createProcessingInstruction(t,e);this.locator&&ue(this.locator,n),Oe(this,n)},ignorableWhitespace:function(t,e,n){},characters:function(t,e,n){if(t=rn.apply(this,arguments),t){if(this.cdata)var r=this.doc.createCDATASection(t);else var r=this.doc.createTextNode(t);this.currentElement?this.currentElement.appendChild(r):/^\\s*$/.test(t)&&this.doc.appendChild(r),this.locator&&ue(this.locator,r)}},skippedEntity:function(t){},endDocument:function(){this.doc.normalize()},setDocumentLocator:function(t){(this.locator=t)&&(t.lineNumber=0)},comment:function(t,e,n){t=rn.apply(this,arguments);var r=this.doc.createComment(t);this.locator&&ue(this.locator,r),Oe(this,r)},startCDATA:function(){this.cdata=!0},endCDATA:function(){this.cdata=!1},startDTD:function(t,e,n){var r=this.doc.implementation;if(r&&r.createDocumentType){var i=r.createDocumentType(t,e,n);this.locator&&ue(this.locator,i),Oe(this,i)}},warning:function(t){console.warn("[xmldom warning]	"+t,qe(this.locator))},error:function(t){console.error("[xmldom error]	"+t,qe(this.locator))},fatalError:function(t){throw new Bn(t,this.locator)}};function qe(t){if(t)return`\n@`+(t.systemId||"")+"#[line:"+t.lineNumber+",col:"+t.columnNumber+"]"}function rn(t,e,n){return typeof t=="string"?t.substr(e,n):t.length>=e+n||e?new java.lang.String(t,e,n)+"":t}"endDTD,startEntity,endEntity,attributeDecl,elementDecl,externalEntityDecl,internalEntityDecl,resolveEntity,getExternalSubset,notationDecl,unparsedEntityDecl".replace(/\\w+/g,function(t){Ee.prototype[t]=function(){return null}});function Oe(t,e){t.currentElement?t.currentElement.appendChild(e):t.doc.appendChild(e)}var Gn=Nt(),an=It(),jn=an.XMLReader,Bn=an.ParseError,Vn=_e.DOMImplementation=Xe().DOMImplementation;_e.XMLSerializer=Xe().XMLSerializer;_e.DOMParser=sn;_e.__DOMHandler=Ee});var ln=Tn(on());async function un(t){return new Promise((e,n)=>{let r=new FileReader;r.onload=async i=>{let s=i.target.result,l=new ln.DOMParser().parseFromString(s,"application/xml").getElementsByTagName("monster"),u=[];if(!!l.length){for(let a of Array.from(l))try{let f={image:null,name:x(a,"name"),size:qn(a),type:x(a,"type"),subtype:x(a,"subtype"),alignment:x(a,"alignment"),ac:Zn(a),hp:Number(cn(a,"hp")),hit_dice:cn(a,"hit_dice"),speed:x(a,"speed"),stats:[Number(x(a,"str")),Number(x(a,"dex")),Number(x(a,"con")),Number(x(a,"int")),Number(x(a,"wis")),Number(x(a,"cha"))],saves:Yn(a),skillsaves:Hn(a),damage_vulnerabilities:x(a,"vulnerable"),damage_resistances:x(a,"resist"),damage_immunities:x(a,"immune"),condition_immunities:x(a,"conditionImmune"),senses:x(a,"senses"),languages:x(a,"languages"),cr:x(a,"cr"),traits:Ie(a,"trait"),spells:zn(a),actions:Ie(a,"action"),legendary_actions:Ie(a,"legendary"),reactions:Ie(a,"reaction"),source:Qn(a)};u.push(f)}catch(f){console.error(f);continue}e(u)}},r.readAsText(t)})}function x(t,e){let n=t.getElementsByTagName(e);if(n&&n.length)return n[0].textContent}function Ie(t,e){var i;if(!((i=t.getElementsByTagName(e))!=null&&i.length))return[];let n=t.getElementsByTagName(e),r=[];for(let s of Array.from(n)){let o=s.getElementsByTagName("name");if(!o||!o.length||!o[0].textContent||o[0].textContent.includes("Spellcasting"))continue;let l=[],u=s.getElementsByTagName("text");for(let a of Array.from(u))l.push(a.textContent);r.push({name:o[0].textContent,desc:l.join(" ")})}return r}function zn(t){var r;if(!((r=t.getElementsByTagName("trait"))!=null&&r.length))return[];let n=Array.from(t.getElementsByTagName("trait")).find(i=>{var s;return(s=i.getElementsByTagName("name")[0])==null?void 0:s.textContent.includes("Spellcasting")});return n?Array.from(n.getElementsByTagName("text")).map(i=>i.textContent.replace(/(&#8226;|\u2022)/u,"").trim()).filter(i=>i.length):[]}function Hn(t){var r;if(!((r=t.getElementsByTagName("skill"))!=null&&r.length))return[];let e=t.getElementsByTagName("skill")[0].textContent.split(", "),n=[];return e.forEach(i=>{let s=i.split(/\\s[\\+\\-]/);n.push({[s[0]]:Number(s[1])})}),n}var Kn={Str:"strength",Dex:"dexterity",Con:"constitution",Int:"intelligence",Wis:"wisdom",Cha:"charisma"};function Yn(t){var r;if(!((r=t.getElementsByTagName("save"))!=null&&r.length))return[];let e=t.getElementsByTagName("save")[0].textContent.split(", "),n=[];return e.forEach(i=>{let s=i.split(/\\s[\\+\\-]/);n.push({[Kn[s[0]]]:Number(s[1])})}),n}function cn(t,e){var s,o;if(!((s=t.getElementsByTagName("hp"))!=null&&s.length))return"";let n=t.getElementsByTagName("hp")[0].textContent,[,r,i]=(o=n.match(/(\\d+) \\(([\\s\\S]+)\\)/))!=null?o:[,"",""];return{hp:r,hit_dice:i}[e]}var Xn={T:"tiny",S:"small",M:"medium",L:"large",H:"huge",G:"gargantuan"};function qn(t){var e;return t.getElementsByTagName("size")&&(e=Xn[t.getElementsByTagName("size")[0].textContent])!=null?e:""}function Zn(t){var e;if(t.getElementsByTagName("ac")){let[,n]=(e=t.getElementsByTagName("ac")[0])==null?void 0:e.textContent.match(/(\\d+)/);return Number(n)}return 0}function Qn(t){var n,r,i,s,o,l;let e="Unknown";if((n=t.getElementsByTagName("source"))!=null&&n.length)e=t.getElementsByTagName("source")[0].textContent;else if(((r=t.getElementsByTagName("trait"))==null?void 0:r.length)&&Array.from(t.getElementsByTagName("trait")).find(u=>{var a;return((a=u.getElementsByTagName("name"))==null?void 0:a[0].textContent)=="Source"})){let u=Array.from(t.getElementsByTagName("trait")).find(a=>{var f,h;return((h=(f=a.getElementsByTagName("name"))==null?void 0:f[0])==null?void 0:h.textContent)=="Source"});e=(o=(s=(i=u==null?void 0:u.getElementsByTagName("text"))==null?void 0:i[0])==null?void 0:s.textContent)==null?void 0:o.replace(/p. \\d+/,"").trim()}else if((l=t.getElementsByTagName("description"))!=null&&l.length){let u=t.getElementsByTagName("description"),a="Source: ";if(u[0].textContent.includes(a)){let f=u[0].textContent.lastIndexOf(a);e=u[0].textContent.slice(f+a.length).split(/, ?/)[0]}}return e}var Jn={STR:"strength",DEX:"dexterity",CON:"constitution",INT:"intelligence",WIS:"wisdom",CHA:"charisma"};async function fn(t){return new Promise((e,n)=>{let r=new FileReader,i=[];r.onload=async s=>{var o,l,u,a,f,h,S,E,y,R,v,M,P,b,T,U,W,d,G,A,L,w,j,J,z,V,_,g,ee,C,X,nt,rt,it,st,at,ot,ct,lt,ut,ft,mt,pt,ht,gt,dt,St,vt,yt,Rt,Ct,Et,_t;try{let Pe=JSON.parse(s.target.result),Sn=Object.keys(Pe).filter(ke=>/^Creatures\\./.test(ke));for(let ke of Sn)try{let N=Pe[ke],vn={name:N.Name,source:(o=N.Source)!=null&&o.trim().length?(l=N.Source)==null?void 0:l.trim():"Unknown",type:(f=(a=(u=N.Type)==null?void 0:u.split(/,\\s?/))==null?void 0:a[0])==null?void 0:f.trim(),subtype:"",size:"",alignment:(E=(S=(h=N.Type)==null?void 0:h.split(/,\\s?/))==null?void 0:S[1])==null?void 0:E.trim(),hp:(y=N.HP)==null?void 0:y.Value,hit_dice:(M=(v=(R=N.HP)==null?void 0:R.Notes)==null?void 0:v.replace(/([()])/g,""))==null?void 0:M.trim(),ac:N.AC.Value,speed:(b=(P=N.Speed)==null?void 0:P.join(", "))==null?void 0:b.trim(),stats:Object.values((T=N.Abilities)!=null?T:{}),damage_immunities:(G=(d=(W=(U=N.DamageImmunities)==null?void 0:U.join("; "))==null?void 0:W.toLowerCase())==null?void 0:d.trim())!=null?G:"",damage_resistances:(j=(w=(L=(A=N.DamageResistances)==null?void 0:A.join(", "))==null?void 0:L.toLowerCase())==null?void 0:w.trim())!=null?j:"",damage_vulnerabilities:(_=(V=(z=(J=N.DamageVulnerabilities)==null?void 0:J.join(", "))==null?void 0:z.toLowerCase())==null?void 0:V.trim())!=null?_:"",condition_immunities:(X=(C=(ee=(g=N.ConditionImmunities)==null?void 0:g.join(", "))==null?void 0:ee.toLowerCase())==null?void 0:C.trim())!=null?X:"",saves:(rt=(nt=N.Saves)==null?void 0:nt.map(({Name:D,Modifier:Fe})=>({[Jn[D]]:Fe})))!=null?rt:[],skillsaves:(st=(it=N.Skills)==null?void 0:it.map(({Name:D,Modifier:Fe})=>({[D]:Fe})))!=null?st:[],senses:(ct=(ot=(at=N.Senses)==null?void 0:at.join(", "))==null?void 0:ot.trim())!=null?ct:"",languages:(ft=(ut=(lt=N.Languages)==null?void 0:lt.join(", "))==null?void 0:ut.trim())!=null?ft:"",cr:(pt=(mt=N.Challenge)==null?void 0:mt.trim())!=null?pt:"",traits:(gt=(ht=N.Traits)==null?void 0:ht.map(D=>({name:D.Name,desc:D.Content})))!=null?gt:[],actions:(St=(dt=N.Actions)==null?void 0:dt.map(D=>({name:D.Name,desc:D.Content})))!=null?St:[],bonus_actions:(yt=(vt=N.BonusActions)==null?void 0:vt.map(D=>({name:D.Name,desc:D.Content})))!=null?yt:[],reactions:(Ct=(Rt=N.Reactions)==null?void 0:Rt.map(D=>({name:D.Name,desc:D.Content})))!=null?Ct:[],legendary_actions:(_t=(Et=N.LegendaryActions)==null?void 0:Et.map(D=>({name:D.Name,desc:D.Content})))!=null?_t:[],image:null};i.push(vn)}catch(N){continue}e(i)}catch(Pe){n()}},r.readAsText(t)})}async function mn(t){return new Promise((e,n)=>{let r=new FileReader;r.onload=async i=>{var o,l,u,a,f,h,S,E,y,R,v,M,P,b,T,U,W,d,G,A,L,w,j,J,z;let s=[];try{let V=JSON.parse(i.target.result),_=[];V.creatures?_=V.creatures:_=[V];for(let g of _)try{let ee={image:null,name:g.name,source:"CritterDB",type:g.stats.race,subtype:"",size:g.stats.size,alignment:g.stats.alignment,hp:g.stats.hitPoints,hit_dice:`${Math.floor(g.stats.extraHealthFromConstitution/g.stats.abilityScoreModifiers.constitution)}d${g.stats.hitDieSize} + ${g.stats.extraHealthFromConstitution}`,ac:g.stats.armorClass,speed:g.stats.speed,stats:[g.stats.abilityScores.strength,g.stats.abilityScores.dexterity,g.stats.abilityScores.constitution,g.stats.abilityScores.intelligence,g.stats.abilityScores.wisdom,g.stats.abilityScores.charisma],damage_immunities:(l=(o=g.stats.damageImmunities)==null?void 0:o.join("; ").toLowerCase().trim())!=null?l:"",damage_resistances:(a=(u=g.stats.damageResistances)==null?void 0:u.join(", ").toLowerCase().trim())!=null?a:"",damage_vulnerabilities:(h=(f=g.stats.damageVulnerabilities)==null?void 0:f.join(", ").toLowerCase().trim())!=null?h:"",condition_immunities:(E=(S=g.stats.conditionImmunities)==null?void 0:S.join(", ").toLowerCase().trim())!=null?E:"",saves:(R=(y=g.stats.savingThrows)==null?void 0:y.map(C=>{var X;if(!(!("value"in C)&&!("modifier"in C)))return{[C.ability]:(X=C.value)!=null?X:C.modifier}}).filter(C=>C))!=null?R:[],skillsaves:(M=(v=g.stats.skills)==null?void 0:v.map(C=>{var X;if(!(!("value"in C)&&!("modifier"in C)))return{[C.name]:(X=C.value)!=null?X:C.modifier}}).filter(C=>C))!=null?M:[],senses:(b=(P=g.stats.senses)==null?void 0:P.join(", ").trim())!=null?b:"",languages:(U=(T=g.stats.languages)==null?void 0:T.join(", ").trim())!=null?U:"",cr:(W=g.stats.challengeRating)!=null?W:"",traits:(G=(d=g.stats.additionalAbilities)==null?void 0:d.map(C=>({name:C.name,desc:C.description.replace(/<[^>]*>/g,"")})))!=null?G:[],actions:(L=(A=g.stats.actions)==null?void 0:A.map(C=>({name:C.name,desc:C.description.replace(/<[^>]*>/g,"")})))!=null?L:[],reactions:(j=(w=g.stats.reactions)==null?void 0:w.map(C=>({name:C.name,desc:C.description.replace(/<[^>]*>/g,"")})))!=null?j:[],legendary_actions:(z=(J=g.stats.legendaryActions)==null?void 0:J.map(C=>({name:C.name,desc:C.description.replace(/<[^>]*>/g,"")})))!=null?z:[]};s.push(ee)}catch(ee){continue}e(s)}catch(V){n()}},r.readAsText(t)})}function Ae(t,e=0,n=" ",r=!0){let i=[];if(e==5||t==null)return"";if(typeof t=="string")return t;if(typeof t=="number")return`${t}`;if(Array.isArray(t))i.push(`${r?"(":""}${t.map(s=>Ae(s,e++)).join(n)}${r?")":""}`);else if(typeof t=="object")for(let s of Object.values(t))i.push(Ae(s,e++));return i.join(" ")}var er={str:"strength",dex:"dexterity",con:"constitution",wis:"wisdom",int:"intelligence",cha:"charisma"};function K(t){return t?t.replace(/{@condition (.+?)}/g,"$1").replace(/{@item (.+?)}/g,"$1").replace(/{@spell ([\\s\\S]+?)}/g,"$1").replace(/{@recharge (.+?)}/g,"(Recharge $1-6)").replace(/{@recharge}/g,"(Recharge 6)").replace(/{@h}/g,"").replace(/{@damage (.+?)}/g,"$1").replace(/{@atk ms}/g,"Melee Spell Attack").replace(/{@atk rs}/g,"Ranged Spell Attack").replace(/{@atk mw}/g,"Melee Weapon Attack").replace(/{@atk rw}/g,"Ranged Weapon Attack").replace(/{@atk mw,rw}/g,"Melee / Ranged Weapon Attack").replace(/{@creature (.+?)}/g,"$1").replace(/{@skill (.+?)}/g,"$1").replace(/{@dice (.+?)}/g,"$1").replace(/{@hit (\\d+?)}/g,"+$1").replace(/{@dc (\\d+?)}/g,"$1").replace(/{@quickref (.+?)\\|\\|.+?}/,"$1"):""}async function pn(t){return new Promise((e,n)=>{let r=new FileReader;r.onload=async i=>{var s,o,l,u,a,f,h,S,E,y,R,v,M,P,b;try{let T=JSON.parse(i.target.result),U=[];"monster"in T?U=T.monster:Array.isArray(T)?U=T:typeof T=="object"?U=[T]:n("Invalid monster JSON provided.");let W=[];for(let d of U)try{if(!d.name)continue;let G={image:null,name:d.name,source:mr(d),type:tr(d.type),subtype:"",size:(s=d.size)!=null&&s.length?_r[(o=d.size)==null?void 0:o[0]]:null,alignment:lr(d),hp:d.hp&&"average"in d.hp?(l=d.hp)==null?void 0:l.average:null,hit_dice:d.hp&&"formula"in d.hp?(u=d.hp)==null?void 0:u.formula:"",ac:ir(d.ac),speed:ur(d),stats:[d.str,d.dex,d.con,d.int,d.wis,d.cha],damage_immunities:K(fe(d.immune)),damage_resistances:K(fe(d.resist)),damage_vulnerabilities:K(fe(d.vulnerable)),condition_immunities:K(fe(d.conditionImmune)),saves:Object.entries((a=d.save)!=null?a:{}).map(A=>{var w,j;if(!A||!A[1])return;let[,L]=(j=(w=A[1])==null?void 0:w.match(/.*?(\\d+)/))!=null?j:[];if(!!L)return{[er[A[0]]]:L}}).filter(A=>A),skillsaves:ma(d),senses:fr(d),languages:Ae(d.languages,0,", ",!1),cr:nr(d.cr),traits:(h=(f=d.trait)==null?void 0:f.flatMap(Te))!=null?h:[],actions:(E=(S=d.action)==null?void 0:S.flatMap(Te))!=null?E:[],bonus_actions:(R=(y=d.bonus)==null?void 0:y.flatMap(Te))!=null?R:[],reactions:(M=(v=d.reaction)==null?void 0:v.flatMap(Te))!=null?M:[],legendary_actions:(b=(P=d.legendary)==null?void 0:P.flatMap(Te))!=null?b:[],spells:cr(d),spellsNotes:rr(d).join(" ")};W.push(G)}catch(G){console.error(G);continue}e(W)}catch(T){console.error("reject!!!",T),n(T)}},r.readAsText(t)})}function tr(t){if(!!t)return typeof t=="string"?t:t.type}function nr(t){if(!!t)return typeof t=="string"?t:t.cr}function rr(t){let e=[];for(let n in t.spellcasting)e.push(Ae(t.spellcasting[n].footerEntries,0,", ",!1));return e}function fe(t){if(!t)return"";let e=[];for(let n of t){if(typeof n=="string"){e.push(n);continue}if("special"in n){e.push(n.special);continue}if("immune"in n){e.push(`${fe(n.immune)}${n.note?" ":""}${n.note?n.note:""}`);continue}if("resist"in n){e.push(`${fe(n.resist)}${n.note?" ":""}${n.note?n.note:""}`);continue}}return e.join(", ")}function ir(t=[]){var n;let[e]=t;if(!!e){if(typeof e=="number")return e;if(typeof e=="string"){let[r,i]=(n=e.match(/(\\d+)/))!=null?n:[];return i?Number(i):null}if(typeof e=="object")return"special"in e?null:e.ac}}var sr={0:"Cantrips (at will)",1:"1st level",2:"2nd level",3:"3rd level",4:"4th level",5:"5th level",6:"6th level",7:"7th level",8:"8th level",9:"9th level"};function Ze(t){let e=[];for(let n of t){if(typeof n=="string"){e.push(n);continue}!n.hidden&&n.entry&&n.entry.length&&e.push(n.entry)}return K(e.join(", "))}function ar(t){let e=[];for(let n of Object.keys(t)){let r=t[n],i=Number(n.replace(/[^0-9]/,""));e.push([i,Ze(r)])}return e}function or(t){var i,s;let e=[K(((i=t.headerEntries)!=null?i:[]).join(`\n`))];if("spells"in t)try{for(let o in(s=t.spells)!=null?s:{}){let l=t.spells[o],{spells:u}=l,a=`${sr[o]}`;a+="slots"in l?` (${l.slots} slots)`:"";let f=K(u.join(", "));e.push({[a]:f})}}catch(o){throw new Error("There was an error parsing the spells.")}if("will"in t&&t.will.length>0)try{e.push({"At will":Ze(t.will)})}catch(o){throw new Error("There was an error parsing the at-will spells.")}if("ritual"in t&&t.ritual.length>0)try{e.push({Rituals:Ze(t.ritual)})}catch(o){throw new Error("There was an error parsing the ritual spells.")}let n=["rest","daily","weekly","yearly","charges"],r={rest:"/rest each",daily:"/day each",weekly:"/week each",yearly:"/year each",charges:" charges"};for(let o of n)if(o in t){let l=ar(t[o]);for(let u of l.sort((a,f)=>f[0]-a[0]))e.push({[`${u[0]}${r[o]}`]:u[1]})}return e}function cr(t){return!t.spellcasting||!t.spellcasting.length?[]:t.spellcasting.flatMap(or)}function lr(t){return t.alignment?Qe(t.alignment):null}function Qe(t){var n;if(!t)return null;let e=[];if(Array.isArray(t))for(let r of t)e.push(Qe(r));else if(typeof t=="object"){if("special"in t&&t.special!=null)return t.special;if("alignment"in t)return`${((n=t.alignment)!=null?n:[]).map(r=>Qe(r)).join(" ")}${t.chance?` (${t.chance}%)`:""}${t.note?` (${t.note})`:""}`}else{switch(t.toUpperCase()){case"L":return"lawful";case"N":return"neutral";case"NX":return"neutral (law/chaos axis)";case"NY":return"neutral (good/evil axis)";case"C":return"chaotic";case"G":return"good";case"E":return"evil";case"U":return"unaligned";case"A":return"any alignment"}return t}return e.join(" or ")}function ur(t){var l,u;let e=t.speed;if(!e)return"\\u2014";if(typeof e=="number")return`${e}`;function n(a){return typeof a=="number"?a:a.number!=null?a.number:a}function r(a){var f;return typeof a=="number"?"":(f=a==null?void 0:a.condition)!=null?f:""}let i=[],s=["walk","burrow","climb","fly","swim"];for(let a of s){if(a!="walk"&&!(a in e)&&!(a in((l=e.alternate)!=null?l:{})))continue;let f=[];i.push(`${a==="walk"?"":`${a} `}${n((u=e[a])!=null?u:0)} ft. ${r(e[a])}`.trim()),e.alternate&&e.alternate[a]&&e.alternate[a].forEach(h=>{i.push(`${a==="walk"?"":`${a} `}${n(h!=null?h:0)} ft. ${r(h)}`.trim())})}let o=", ";if(e.choose){o="; ";let a=e.choose.from.sort();a.length>1?(`${a.slice(0,a.length-1).join(", ")}${a[a.length-1]}${e.choose.amount}`,e.choose.note&&`${e.choose.note}`):i.push(`${a} ${e.choose.amount} ft.${e.choose.note?` ${e.choose.note}`:""}`)}return i.join(o)}function fr(t){var n,r;if(typeof t.senses=="string")return t.senses;let e=[(r=(n=t.senses)==null?void 0:n.join(", ").trim())!=null?r:""];return t.passive&&e.push(`passive Perception ${t.passive}`),e.join(", ")}function mr(t){var n,r,i;let e=[];return(n=t.source)!=null&&n.length&&e.push((r=c[t.source])!=null?r:t.source),(i=t.otherSources)!=null&&i.length&&e.push(...t.otherSources.map(s=>{var o;return(o=c[s.source])!=null?o:s.source})),e}function Te(t){return t.entries.reduce((n,r)=>{var s;if(typeof r!="string"){let o=(s=r.items)==null?void 0:s.map(l=>typeof l=="string"?{name:l,entries:[]}:"entry"in l?{name:l.name,entries:[l.entry]}:{name:l.name,entries:l.entries});return n.concat(o!=null?o:[])}return n.length>1||n[0].entries.push(r),n},[{name:t.name,entries:[]}]).map(({name:n,entries:r})=>({name:K(n),desc:K(r.join(`\n`))}))}var pr="F",hr="D",gr="T",dr="S",Sr="M",vr="L",yr="H",Rr="G",Cr="C",Er="V",_r={[pr]:"Fine",[hr]:"Diminutive",[gr]:"Tiny",[dr]:"Small",[Sr]:"Medium",[vr]:"Large",[yr]:"Huge",[Rr]:"Gargantuan",[Cr]:"Colossal",[Er]:"Varies"},Ar="CoS",Tr="DMG",Nr="EEPC",br="EET",wr="HotDQ",Dr="LMoP",$r="Mag",xr="MM",Mr="OotA",Or="PHB",Ir="PotA",Pr="RoT",kr="RoTOS",Fr="SCAG",Ur="SKT",Lr="ToA",Wr="ToD",Gr="TTP",jr="TftYP",Br="TftYP-AtG",Vr="TftYP-DiT",zr="TftYP-TFoF",Hr="TftYP-THSoT",Kr="TftYP-TSC",Yr="TftYP-ToH",Xr="TftYP-WPM",qr="VGM",Zr="XGE",Qr="OGA",Jr="MTF",ei="WDH",ti="WDMM",ni="GGR",ri="KKW",ii="LLK",si="GoS",ai="AI",oi="OoW",ci="ESK",li="DIP",ui="HftT",fi="DC",mi="SLW",pi="SDW",hi="BGDIA",gi="LR",di="AL",Si="SAC",vi="ERLW",yi="EFR",Ri="RMBRE",Ci="RMR",Ei="MFF",_i="AWM",Ai="IMR",Ti="SADS",Ni="EGW",bi="ToR",wi="DD",Di="FS",$i="US",xi="MOT",Mi="IDRotF",Oi="TCE",Ii="VRGR",Pi="HoL",ki="Screen",Fi="ScreenWildernessKit",Ui="HF",Li="CM",Wi="WBtW",Gi="CRCotN",Je="AL",ji=`${Je}CurseOfStrahd`,Bi=`${Je}ElementalEvil`,Vi=`${Je}RageOfDemons`,me="PS",zi=`${me}A`,Hi=`${me}I`,Ki=`${me}K`,Yi=`${me}Z`,Xi=`${me}X`,qi=`${me}D`,m="UA",Zi=`${m}Artificer`,Qi=`${m}EladrinAndGith`,Ji=`${m}Eberron`,es=`${m}FeatsForRaces`,ts=`${m}FeatsForSkills`,ns=`${m}FiendishOptions`,rs=`${m}Feats`,is=`${m}GothicHeroes`,ss=`${m}ModernMagic`,as=`${m}StarterSpells`,os=`${m}TheMysticClass`,cs=`${m}ThatOldBlackMagic`,ls=`${m}TheRangerRevised`,us=`${m}WaterborneAdventures`,fs=`${m}VariantRules`,ms=`${m}LightDarkUnderdark`,ps=`${m}RangerAndRogue`,hs=`${m}ATrioOfSubclasses`,gs=`${m}BarbarianPrimalPaths`,ds=`${m}RevisedSubclasses`,Ss=`${m}KitsOfOld`,vs=`${m}BardBardColleges`,ys=`${m}ClericDivineDomains`,Rs=`${m}Druid`,Cs=`${m}RevisedClassOptions`,Es=`${m}Fighter`,_s=`${m}Monk`,As=`${m}Paladin`,Ts=`${m}ModifyingClasses`,Ns=`${m}Sorcerer`,bs=`${m}WarlockAndWizard`,ws=`${m}TheFaithful`,Ds=`${m}WizardRevisited`,$s=`${m}ElfSubraces`,xs=`${m}MassCombat`,Ms=`${m}ThreePillarExperience`,Os=`${m}GreyhawkInitiative`,Is=`${m}ThreeSubclasses`,Ps=`${m}OrderDomain`,ks=`${m}CentaursMinotaurs`,Fs=`${m}GiantSoulSorcerer`,Us=`${m}RacesOfEberron`,Ls=`${m}RacesOfRavnica`,Ws=`${m}WGE`,Gs=`${m}OfShipsAndSea`,js=`${m}Sidekicks`,Bs=`${m}ArtificerRevisited`,Vs=`${m}BarbarianAndMonk`,zs=`${m}SorcererAndWarlock`,Hs=`${m}BardAndPaladin`,Ks=`${m}ClericDruidWizard`,Ys=`${m}FighterRangerRogue`,Xs=`${m}ClassFeatureVariants`,qs=`${m}FighterRogueWizard`,Zs=`${m}PrestigeClassesRunMagic`,Qs=`${m}Ranger`,Js=`${m}2020SubclassesPt1`,ea=`${m}2020SubclassesPt2`,ta=`${m}2020SubclassesPt3`,na=`${m}2020SubclassesPt4`,ra=`${m}2020SubclassesPt5`,ia=`${m}2020SpellsAndMagicTattoos`,sa=`${m}2020PsionicOptionsRevisited`,aa=`${m}2020SubclassesRevisited`,oa=`${m}2020Feats`,ca=`${m}2021GothicLineages`,la=`${m}2021FolkOfTheFeywild`,ua=`${m}2021DraconicOptions`,fa=`${m}2021MagesOfStrixhaven`,et="Adventurers League: ",pe="Plane Shift: ",p="Unearthed Arcana: ",Q="Tales from the Yawning Portal",c={};c[Ar]="Curse of Strahd";c[Tr]="Dungeon Master\'s Guide";c[Nr]="Elemental Evil Player\'s Companion";c[br]="Elemental Evil: Trinkets";c[wr]="Hoard of the Dragon Queen";c[Dr]="Lost Mine of Phandelver";c[$r]="Dragon Magazine";c[xr]="Monster Manual";c[Mr]="Out of the Abyss";c[Or]="Player\'s Handbook";c[Ir]="Princes of the Apocalypse";c[Pr]="The Rise of Tiamat";c[kr]="The Rise of Tiamat Online Supplement";c[Fr]="Sword Coast Adventurer\'s Guide";c[Ur]="Storm King\'s Thunder";c[Lr]="Tomb of Annihilation";c[Wr]="Tyranny of Dragons";c[Gr]="The Tortle Package";c[jr]=Q;c[Br]=`${Q}: Against the Giants`;c[Vr]=`${Q}: Dead in Thay`;c[zr]=`${Q}: The Forge of Fury`;c[Hr]=`${Q}: The Hidden Shrine of Tamoachan`;c[Kr]=`${Q}: The Sunless Citadel`;c[Yr]=`${Q}: Tomb of Horrors`;c[Xr]=`${Q}: White Plume Mountain`;c[qr]="Volo\'s Guide to Monsters";c[Zr]="Xanathar\'s Guide to Everything";c[Qr]="One Grung Above";c[Jr]="Mordenkainen\'s Tome of Foes";c[ei]="Waterdeep: Dragon Heist";c[ti]="Waterdeep: Dungeon of the Mad Mage";c[ni]="Guildmasters\' Guide to Ravnica";c[ri]="Krenko\'s Way";c[ii]="Lost Laboratory of Kwalish";c[si]="Ghosts of Saltmarsh";c[ai]="Acquisitions Incorporated";c[oi]="The Orrery of the Wanderer";c[ci]="Essentials Kit";c[li]="Dragon of Icespire Peak";c[ui]="Hunt for the Thessalhydra";c[fi]="Divine Contention";c[mi]="Storm Lord\'s Wrath";c[pi]="Sleeping Dragon\'s Wake";c[hi]="Baldur\'s Gate: Descent Into Avernus";c[gi]="Locathah Rising";c[di]="Adventurers\' League";c[Si]="Sage Advice Compendium";c[vi]="Eberron: Rising from the Last War";c[yi]="Eberron: Forgotten Relics";c[Ri]="The Lost Dungeon of Rickedness: Big Rick Energy";c[Ci]="Dungeons & Dragons vs. Rick and Morty: Basic Rules";c[Ei]="Mordenkainen\'s Fiendish Folio";c[_i]="Adventure with Muk";c[Ai]="Infernal Machine Rebuild";c[Ti]="Sapphire Anniversary Dice Set";c[Ni]="Explorer\'s Guide to Wildemount";c[bi]="Tide of Retribution";c[wi]="Dangerous Designs";c[Di]="Frozen Sick";c[$i]="Unwelcome Spirits";c[xi]="Mythic Odysseys of Theros";c[Mi]="Icewind Dale: Rime of the Frostmaiden";c[Oi]="Tasha\'s Cauldron of Everything";c[Ii]="Van Richten\'s Guide to Ravenloft";c[Pi]="The House of Lament";c[ki]="Dungeon Master\'s Screen";c[Fi]="Dungeon Master\'s Screen: Wilderness Kit";c[Ui]="Heroes\' Feast";c[Li]="Candlekeep Mysteries";c[ji]=`${et}Curse of Strahd`;c[Bi]=`${et}Elemental Evil`;c[Vi]=`${et}Rage of Demons`;c[zi]=`${pe}Amonkhet`;c[Hi]=`${pe}Innistrad`;c[Ki]=`${pe}Kaladesh`;c[Yi]=`${pe}Zendikar`;c[Xi]=`${pe}Ixalan`;c[qi]=`${pe}Dominaria`;c[Zi]=`${p}Artificer`;c[Qi]=`${p}Eladrin and Gith`;c[Ji]=`${p}Eberron`;c[es]=`${p}Feats for Races`;c[ts]=`${p}Feats for Skills`;c[ns]=`${p}Fiendish Options`;c[rs]=`${p}Feats`;c[is]=`${p}Gothic Heroes`;c[ss]=`${p}Modern Magic`;c[as]=`${p}Starter Spells`;c[os]=`${p}The Mystic Class`;c[cs]=`${p}That Old Black Magic`;c[ls]=`${p}The Ranger, Revised`;c[us]=`${p}Waterborne Adventures`;c[fs]=`${p}Variant Rules`;c[ms]=`${p}Light, Dark, Underdark!`;c[ps]=`${p}Ranger and Rogue`;c[hs]=`${p}A Trio of Subclasses`;c[gs]=`${p}Barbarian Primal Paths`;c[ds]=`${p}Revised Subclasses`;c[Ss]=`${p}Kits of Old`;c[vs]=`${p}Bard: Bard Colleges`;c[ys]=`${p}Cleric: Divine Domains`;c[Rs]=`${p}Druid`;c[Cs]=`${p}Revised Class Options`;c[Es]=`${p}Fighter`;c[_s]=`${p}Monk`;c[As]=`${p}Paladin`;c[Ts]=`${p}Modifying Classes`;c[Ns]=`${p}Sorcerer`;c[bs]=`${p}Warlock and Wizard`;c[ws]=`${p}The Faithful`;c[Ds]=`${p}Wizard Revisited`;c[$s]=`${p}Elf Subraces`;c[xs]=`${p}Mass Combat`;c[Ms]=`${p}Three-Pillar Experience`;c[Os]=`${p}Greyhawk Initiative`;c[Is]=`${p}Three Subclasses`;c[Ps]=`${p}Order Domain`;c[ks]=`${p}Centaurs and Minotaurs`;c[Fs]=`${p}Giant Soul Sorcerer`;c[Us]=`${p}Races of Eberron`;c[Ls]=`${p}Races of Ravnica`;c[Ws]="Wayfinder\'s Guide to Eberron";c[Gs]=`${p}Of Ships and the Sea`;c[js]=`${p}Sidekicks`;c[Bs]=`${p}Artificer Revisited`;c[Vs]=`${p}Barbarian and Monk`;c[zs]=`${p}Sorcerer and Warlock`;c[Hs]=`${p}Bard and Paladin`;c[Ks]=`${p}Cleric, Druid, and Wizard`;c[Ys]=`${p}Fighter, Ranger, and Rogue`;c[Xs]=`${p}Class Feature Variants`;c[qs]=`${p}Fighter, Rogue, and Wizard`;c[Zs]=`${p}Prestige Classes and Rune Magic`;c[Qs]=`${p}Ranger`;c[Js]=`${p}2020 Subclasses, Part 1`;c[ea]=`${p}2020 Subclasses, Part 2`;c[ta]=`${p}2020 Subclasses, Part 3`;c[na]=`${p}2020 Subclasses, Part 4`;c[ra]=`${p}2020 Subclasses, Part 5`;c[ia]=`${p}2020 Spells and Magic Tattoos`;c[sa]=`${p}2020 Psionic Options Revisited`;c[aa]=`${p}2020 Subclasses Revisited`;c[oa]=`${p}2020 Feats`;c[ca]=`${p}2021 Gothic Lineages`;c[la]=`${p}2021 Folk of the Feywild`;c[ua]=`${p}2021 Draconic Options`;c[fa]=`${p}2021 Mages of Strixhaven`;c[Wi]="The Wild Beyond the Witchlight";c[Gi]="Critical Role: Call of the Netherdeep";function ma(t){var i,s,o;let e=t.skill;if(!e)return[];let n=[],r=[];for(let l of Object.keys(e)){if(l=="other"){let f=e[l];for(let h of f){let S=h.oneOf;if(!S)continue;let E=Object.keys(S).sort(),y=E.shift(),R=S[y],[,v]=(i=R==null?void 0:R.match(/.*?(\\d+)/))!=null?i:[];r.push({[`plus one of the following: ${y.charAt(0).toUpperCase()+y.slice(1)}`]:v});for(let M of E.slice(1)){let P=S[M],[,b]=(s=P==null?void 0:P.match(/.*?(\\d+)/))!=null?s:[];!b||r.push({[M]:b})}}continue}let u=e[l],[,a]=(o=u==null?void 0:u.match(/.*?(\\d+)/))!=null?o:[];!a||n.push({[l]:a})}return[...n.filter(l=>l),...r.filter(l=>l)]}var hn={0:{cr:"0",value:0,xp:0},"1/8":{cr:"1/8",value:.125,xp:25},"1/4":{cr:"1/4",value:.25,xp:50},"1/2":{cr:"1/2",value:.5,xp:100},"0.125":{cr:"1/8",value:.125,xp:25},"0.25":{cr:"1/4",value:.25,xp:50},"0.5":{cr:"1/2",value:.5,xp:100},1:{cr:"1",value:1,xp:200},2:{cr:"2",value:2,xp:450},3:{cr:"3",value:3,xp:700},4:{cr:"4",value:4,xp:1100},5:{cr:"5",value:5,xp:1800},6:{cr:"6",value:6,xp:2300},7:{cr:"7",value:7,xp:2900},8:{cr:"8",value:8,xp:3900},9:{cr:"9",value:9,xp:5e3},10:{cr:"10",value:10,xp:5900},11:{cr:"11",value:11,xp:7200},12:{cr:"12",value:12,xp:8400},13:{cr:"13",value:13,xp:1e4},14:{cr:"14",value:14,xp:11500},15:{cr:"15",value:15,xp:13e3},16:{cr:"16",value:16,xp:15e3},17:{cr:"17",value:17,xp:18e3},18:{cr:"18",value:18,xp:2e4},19:{cr:"19",value:19,xp:22e3},20:{cr:"20",value:20,xp:25e3},21:{cr:"21",value:21,xp:33e3},22:{cr:"22",value:22,xp:41e3},23:{cr:"23",value:23,xp:5e4},24:{cr:"24",value:24,xp:62e3},25:{cr:"25",value:25,xp:75e3},26:{cr:"26",value:26,xp:9e4},27:{cr:"27",value:27,xp:105e3},28:{cr:"28",value:28,xp:12e4},29:{cr:"29",value:29,xp:135e3},30:{cr:"30",value:30,xp:155e3}};function Y(t){return Math.floor(((t!=null?t:10)-10)/2)}var gn={tiny:4,small:6,medium:8,large:10,huge:12,gargantuan:20},pa={str:"strength",dex:"dexterity",con:"constitution",int:"intelligence",wis:"wisdom",cha:"charisma"},Ne=class{constructor(e){this.monster=e;this.proficiency=this.getProf(this.monster);this.stats={str:this.monster.strPoints,dex:this.monster.dexPoints,con:this.monster.conPoints,int:this.monster.intPoints,wis:this.monster.wisPoints,cha:this.monster.chaPoints};this.modifiers={str:Y(this.stats.str),dex:Y(this.stats.dex),con:Y(this.stats.con),int:Y(this.stats.int),wis:Y(this.stats.wis),cha:Y(this.stats.cha)}}static parse(e){var i,s,o,l,u,a;let n=new Ne(e);return{image:null,name:e.name,source:"TetraCube",type:e.type,subtype:"",size:e.size,alignment:e.alignment,hp:(i=n.getHP(e))==null?void 0:i.hp,hit_dice:(s=n.getHP(e))==null?void 0:s.dice,ac:(u=(l=((o=e.ac)!=null?o:[])[0])==null?void 0:l.ac)!=null?u:"",speed:n.getSpeedString(e),stats:[e.strPoints,e.dexPoints,e.conPoints,e.intPoints,e.wisPoints,e.chaPoints],damage_immunities:n.parseImmune(e,"i"),damage_resistances:n.parseImmune(e,"r"),damage_vulnerabilities:n.parseImmune(e,"v"),condition_immunities:n.parseConditions(e),saves:n.getSaves(e),skillsaves:n.getSkills(e),senses:n.getSenses(e),languages:n.getLanguages(e),cr:(a=e.cr)!=null?a:"",traits:n.getTraits(e.abilities),actions:n.getTraits(e.actions),reactions:n.getTraits(e.reactions),legendary_actions:n.getTraits(e.legendaries),spells:n.getSpells(e.abilities)}}getHP(e){var n,r;if(e.customHP||e.hitDice&&/(\\d+) \\((.+)\\)/.test(e.hpText)){let[i,s,o]=(n=e.hpText.match(/(\\d+) \\((.+)\\)/))!=null?n:[];return{hp:s,dice:o}}if(e.hitDice){let i=Number(e.hitDice),s=(r=gn[e.size])!=null?r:gn.medium,o=this.modifiers.con,l=i*s/(2+.5)+o*i,u=o>0?"+":"-",a=o==0?"":` ${u} ${o*i}`;return{hp:l,dice:`${i}d${s}${a}`}}}getSpeedString(e){if(e.customSpeed)return e.speedDesc;let n=[e.speed+" ft."];return e.burrowSpeed>0&&n.push("burrow "+e.burrowSpeed+" ft."),e.climbSpeed>0&&n.push("climb "+e.climbSpeed+" ft."),e.flySpeed>0&&n.push("fly "+e.flySpeed+" ft."+(e.hover?" (hover)":"")),e.swimSpeed>0&&n.push("swim "+e.swimSpeed+" ft."),n.join(", ")}parseImmune(e,n){let r=[];"damagetypes"in e&&Array.isArray(e.damagetypes)&&r.push(...e.damagetypes.filter(s=>s.type==n).map(s=>s.name));let i=[];return"specialdamage"in e&&Array.isArray(e.specialdamage)&&i.push(...e.specialdamage.filter(s=>s.type==n).map(s=>s.name)),[r.join(", "),i.join(", ")].filter(s=>s&&s.length).join("; ")}getLanguages(e){let n=[],r=[],i=[];for(let s=0;s<e.languages.length;s++){let o=e.languages[s];o.speaks||o.speaks==null?r.push(o):i.push(o)}return r.length>0&&n.push([r.slice(0,r.length-2).map(s=>s.name).join(", "),r.slice(-1).map(s=>s.name)].filter(s=>s).join(" and ")),i.length>0&&n.push([i.slice(0,i.length-2).map(s=>s.name).join(", "),i.slice(-1).map(s=>s.name)].filter(s=>s).join(" and ")),e.telepathy>0&&n.push("telepathy "+e.telepathy+" ft."),n.length==0&&n.push("&mdash;"),n.join("; ")}getSenses(e){let n=[];e.blindsight>0&&n.push("blindsight "+e.blindsight+" ft."+(e.blind?" (blind beyond this radius)":"")),e.darkvision>0&&n.push("darkvision "+e.darkvision+" ft."),e.tremorsense>0&&n.push("tremorsense "+e.tremorsense+" ft."),e.truesight>0&&n.push("truesight "+e.truesight+" ft.");let r=e.skills.find(s=>s.name=="perception"),i=10+Y(e.wisPoints);return r!=null&&(i+=this.proficiency*("note"in r?2:1)),n.push("passive Perception "+i),n.join(", ")}transformString(e){return e.replace(/(_|\\*|\\s*>\\s*)/g,"").replace(/\\[MON(S)?\\]/g,`${this.monster.shortName&&this.monster.shortName.length?this.monster.shortName:this.monster.name}$1`).replace(/\\[(\\w+)\\]/g,(n,r)=>{if(r=r.toLowerCase(),!(r in this.modifiers))return n;let i=this.modifiers[r];return`${i>=0?"+":""}${i}`}).replace(/\\[(\\w+) (ATK|SAVE)\\s?(?:([+-])\\s?(\\d+))?\\]/g,(n,r,i="ATK",s="+",o=0)=>{if(r=r.toLowerCase(),!(r in this.modifiers))return n;o=s=="+"?Number(o):-Number(o);let l=(i=="ATK"?0:8)+this.modifiers[r]+this.proficiency+o;return`${l>=0?"+":""}${l}`}).replace(/\\[(\\w+)?\\s?(\\d*[dD]\\d+)\\s?(?:([+-])\\s?(\\d+))?\\]/g,(n,r,i,s="+",o=0)=>{var h;r=r.toLowerCase();let[,l=1,u]=(h=i.match(/(\\d*)[dD](\\d+)/))!=null?h:[];if(l||(l=1),!u)return n;o=s=="+"?Number(o):-Number(o),r in this.modifiers&&(o+=this.modifiers[r]);let a=Math.floor((u/2+.5)*l)+o,f=[`${l}d${u}`];return o&&o!=0&&(f.push(o>=0?"+":"-"),f.push(o)),`${a} (${f.join(" ")})`})}getTraits(e){return!e||!e.length?void 0:e.filter(r=>r.name!="Spellcasting").map(r=>({name:r.name,desc:this.transformString(r.desc)}))}getSpells(e){var i;if(!e.abilities||!e.abilities.length)return;let{desc:n}=(i=e.abilities.find(s=>s.name=="Spellcasting"))!=null?i:{};return n?this.transformString(n).trim().split(`\n`).filter(s=>s.length):void 0}getSaves(e){if(!("sthrows"in e)||!Array.isArray(e.sthrows)||!e.sthrows.length)return[];let n=this.proficiency,r=[];for(let i of e.sthrows){let s=i.name,o=Y(Number(e[`${s}Points`]));isNaN(o)||r.push({[pa[s]]:o+n})}return r}getSkills(e){if(!("skills"in e)||!Array.isArray(e.skills)||!e.skills.length)return[];let n=[],r=this.proficiency;for(let i of e.skills){let s=i.stat,o=Y(Number(e[`${s}Points`]));if(isNaN(o))continue;let l="note"in i;n.push({[i.name]:r+o+o*Number(l)})}return n}getProf(e){var r,i;let n=0;return e.cr=="*"&&(n=e.customProf),"cr"in e&&e.cr in hn&&(n=Math.max(Math.floor(2+(((i=(r=hn[e.cr])==null?void 0:r.value)!=null?i:0)-1)/4),2)),isNaN(Number(n))?0:Number(n)}parseConditions(e){if("conditions"in e&&Array.isArray(e.conditions))return e.conditions.map(n=>n.name).join(", ")}};async function dn(t){return new Promise((e,n)=>{let r=new FileReader,i=[];r.onload=async s=>{try{let o=JSON.parse(s.target.result),l;"monster"in o?l=o.monster:Array.isArray(o)?l=o:typeof o=="object"?l=[o]:n("Invalid monster JSON provided.");let u=[];for(let a of l)try{let f=Ne.parse(a);u.push(f)}catch(f){console.error(f);continue}e(u)}catch(o){console.error("reject!!!",o),n(o)}},r.readAsText(t)})}var tt=self;tt.onmessage=async t=>{if(!t.data)return;let{files:e,source:n}=t.data,r=[];for(let i of e)switch(n){case"5e":{let s=await pn(i);r.push(...s!=null?s:[]);break}case"critter":{let s=await mn(i);r.push(...s!=null?s:[]);break}case"improved":{let s=await fn(i);r.push(...s!=null?s:[]);break}case"appfile":{let s=await un(i);r.push(...s!=null?s:[]);break}case"tetra":{let s=await dn(i);r.push(...s!=null?s:[]);break}}tt.postMessage({monsters:r})};tt.addEventListener("unhandledrejection",function(t){throw t.reason});\n');
}

// src/importers/importer.ts
var import_obsidian = require("obsidian");

// src/utils/index.ts
function stringify(property, depth = 0, joiner = " ", parens = true) {
  const ret = [];
  if (depth == 5) {
    return "";
  }
  if (property == null)
    return ``;
  if (typeof property == "string")
    return property;
  if (typeof property == "number")
    return `${property}`;
  if (Array.isArray(property)) {
    ret.push(`${parens ? "(" : ""}${property.map((p) => stringify(p, depth++)).join(joiner)}${parens ? ")" : ""}`);
  } else if (typeof property == "object") {
    for (const value of Object.values(property)) {
      ret.push(stringify(value, depth++));
    }
  }
  return ret.join(" ");
}
function nanoid() {
  return "xyxyxyxyxyxy".replace(/[xy]/g, function(c) {
    var r = Math.random() * 16 | 0, v = c == "x" ? r : r & 3 | 8;
    return v.toString(16);
  });
}

// src/importers/importer.ts
var SourcePromptModal = class extends import_obsidian.Modal {
  constructor() {
    super(...arguments);
    this.saved = false;
  }
  display() {
    this.titleEl.createSpan({ text: "Set Sources" });
    new import_obsidian.Setting(this.contentEl).setName("A source could not be found for some imported monsters. Do you wish to manually add one?").addText((t) => {
      t.setPlaceholder("Unknown").onChange((v) => {
        this.source = v;
      });
    });
    this.buildButtons(this.contentEl);
  }
  buildButtons(el) {
    new import_obsidian.Setting(el).addButton((b) => b.setCta().setIcon("checkmark").setTooltip("Save").onClick(() => {
      this.saved = true;
      this.close();
    })).addExtraButton((b) => b.setIcon("cross").setTooltip("Cancel").onClick(() => {
      this.close();
    }));
  }
  onOpen() {
    this.display();
  }
};
var getSourceFromPrompt = async (app2) => {
  return new Promise((resolve) => {
    const modal = new SourcePromptModal(app2);
    modal.onClose = () => {
      if (!modal.saved)
        resolve(null);
      resolve(modal.source);
    };
    modal.open();
  });
};
var Importer = class {
  constructor(plugin) {
    this.plugin = plugin;
    this.workers = /* @__PURE__ */ new Map();
  }
  async import(files, source) {
    return new Promise((resolve) => {
      const worker = new Worker2();
      const id = nanoid();
      this.workers.set(id, worker);
      worker.onmessage = async (event) => {
        const { monsters } = event.data ?? {
          monsters: []
        };
        if (monsters) {
          new import_obsidian.Notice(`Successfully imported ${monsters.length} Monsters`);
          const sourceless = monsters.filter((monster) => monster.source == "Unknown" || !monster.source);
          let source2;
          if (sourceless.length && (source2 = await getSourceFromPrompt(this.plugin.app))) {
            sourceless.forEach((monster) => monster.source = source2);
          }
        }
        worker.terminate();
        this.workers.delete(id);
        resolve(monsters);
      };
      worker.onerror = (e) => {
        new import_obsidian.Notice(`There was an error importing the file.

${e.message}`);
        worker.terminate();
        this.workers.delete(id);
        resolve([]);
      };
      worker.postMessage({ files, source });
    });
  }
};

// src/settings/settings.ts
var FantasyBestiarySettingTab = class extends import_obsidian2.PluginSettingTab {
  constructor(app2, plugin) {
    super(app2, plugin);
    this.plugin = plugin;
    this.results = [];
    this.displayed = new Set(this.plugin.sources);
    this.importer = new Importer(this.plugin);
  }
  async display() {
    try {
      let { containerEl } = this;
      containerEl.empty();
      containerEl.addClass("fantasy-bestiary-settings");
      containerEl.createEl("h2", { text: "Fantasy Bestiary Settings" });
      this.integrationEl = containerEl.createDiv();
      this.systemsEl = containerEl.createDiv();
      this.downloadEl = containerEl.createDiv();
      this.importsEl = containerEl.createDiv();
      this.creatureEl = containerEl.createDiv();
      if (this.plugin.app.plugins.getPlugin("obsidian-5e-statblocks") && !this.plugin.settings.integratedStatblocks) {
        this.generateIntegration();
      }
      this.generateSystems();
      this.generateImports();
      this.generateDownloads();
      this.generateCreatures();
      const div = containerEl.createDiv("coffee");
      div.createEl("a", {
        href: "https://www.buymeacoffee.com/valentine195"
      }).createEl("img", {
        attr: {
          src: "https://img.buymeacoffee.com/button-api/?text=Buy me a coffee&emoji=\u2615&slug=valentine195&button_colour=e3e7ef&font_colour=262626&font_family=Inter&outline_colour=262626&coffee_colour=ff0000"
        }
      });
    } catch (e) {
      console.error(e);
      new import_obsidian2.Notice("There was an error displaying the settings tab for Fantasy Bestiary.");
    }
  }
  generateIntegration() {
    this.integrationEl.empty();
    new import_obsidian2.Setting(this.integrationEl).setHeading().setName("Import Creatures from TTRPG Statblocks");
    const integrationContainer = this.integrationEl.createDiv("bestiary-additional-container");
    integrationContainer.createDiv().createEl("p", {
      text: "It looks like you were using TTRPG Statblocks to manage your bestiary. Would you like to import these creatures?"
    });
    integrationContainer.createDiv().createEl("p", {
      text: "This will remove the creatures from TTRPG Statblocks, but as long as you have updated that plugin, it will pull creatures from here."
    });
    const setting = new import_obsidian2.Setting(integrationContainer).setName("Import").addButton((b) => b.setButtonText("Import").onClick(async () => {
      setting.clear();
      setting.setName("Importing...").addExtraButton((b2) => b2.setIcon("refresh-cw").extraSettingsEl.addClass("bestiary-downloading"));
      const creatures = [
        ...app.plugins.getPlugin("obsidian-5e-statblocks").data.values()
      ].map((v) => index(v));
      this.plugin.settings.creatures.push(...creatures);
      setting.clear();
      setting.setName("Imported").setDesc(`${creatures.length} creatures imported`).addExtraButton((b2) => b2.setIcon("check"));
      this.plugin.settings.integratedStatblocks = true;
      await this.plugin.saveSettings();
      this.generateCreatures();
    })).addExtraButton((b) => b.setIcon("cross").setTooltip("No").onClick(() => {
      setting.clear();
      setting.setName("Are you sure?").setDesc("I will not ask again.").addButton((b2) => b2.setButtonText("Yes, I'm sure")).addExtraButton((b2) => b2.setIcon("cross").setTooltip("Cancel").onClick(() => this.generateIntegration()));
    }));
  }
  generateSystems() {
    this.systemsEl.empty();
    new import_obsidian2.Setting(this.systemsEl).setHeading().setName("Manage Game Systems");
    const systemsContainer = this.systemsEl.createDiv("bestiary-additional-container");
    new import_obsidian2.Setting(systemsContainer).setDesc("Game systems allow you to switch between different groups of creatures as you're playing different games - if you're running a DnD 5e game and a PF2 game simultaneously, you won't need to have both sets of creatures available at all times.");
    if (this.plugin.settings.systems.length) {
      new import_obsidian2.Setting(systemsContainer).setName("Current Active System").setDesc("Choose the active system here, which will filter monsters accordingly. Choosing 'None' enables all creatures.").addDropdown((d) => {
        d.addOption("none", "None");
        for (const system of this.plugin.settings.systems) {
          d.addOption(system.id, system.name);
        }
        d.setValue(this.plugin.settings.activeSystem);
        d.onChange(async (v) => {
          this.plugin.setActiveSystem(v);
          await this.plugin.saveSettings();
        });
      });
    }
    let tempSys;
    let textSys;
    let butSys;
    new import_obsidian2.Setting(systemsContainer).setName("Add System").setDesc("Add a new game system.").addText((t) => {
      textSys = t;
      t.onChange((v) => {
        tempSys = v;
        if (!butSys)
          return;
        if (tempSys.length && !this.plugin.settings.systems.find((s) => s.name == tempSys)) {
          butSys.setDisabled(false);
        } else {
          butSys.setDisabled(true);
        }
      });
    }).addButton((b) => {
      butSys = b;
      b.setIcon("plus").onClick(async () => {
        if (tempSys?.length) {
          this.plugin.settings.systems.push({
            name: tempSys,
            id: nanoid()
          });
          await this.plugin.saveSettings();
          this.generateSystems();
        }
      });
    });
    new import_obsidian2.Setting(systemsContainer).setName("Manage Systems");
    const additional = systemsContainer.createDiv("additional");
    if (this.plugin.settings.systems.length) {
      const systems = this.plugin.settings.systems;
      for (let i = 0; i < systems.length; i++) {
        const system = systems[i];
        const setting = new import_obsidian2.Setting(additional).setName(system.name).addExtraButton((b) => b.setIcon("pencil").onClick(() => {
          setting.controlEl.empty();
          let tempSys2;
          let butSys2;
          setting.addText((t) => {
            t.setValue(system.name).onChange((v) => {
              tempSys2 = v;
              if (!butSys2)
                return;
              if (tempSys2.length && (tempSys2 == system.name || !this.plugin.settings.systems.find((s) => s.name == tempSys2))) {
                butSys2.setDisabled(false);
              } else {
                butSys2.setDisabled(true);
              }
            });
          }).addExtraButton((b2) => {
            butSys2 = b2;
            b2.setIcon("check").onClick(() => {
              system.name = tempSys2;
              this.generateSystems();
            });
          }).addExtraButton((b2) => {
            b2.setIcon("cross").onClick(() => {
              this.generateSystems();
            });
          });
        })).addExtraButton((b) => b.setIcon("cross").onClick(async () => {
          this.plugin.settings.systems.splice(i, 1);
          if (this.plugin.settings.activeSystem == system.id) {
            this.plugin.settings.activeSystem = "none";
          }
          await this.plugin.saveSettings();
          this.generateSystems();
        }));
      }
    } else {
      additional.createSpan({ text: "Create a system to see it here." }).addClasses(["create-new", "setting-item"]);
    }
  }
  async consumeImport(element, source) {
    const { files } = element;
    if (!files?.length)
      return;
    try {
      const monsters = await this.importer.import(files, source);
      if (monsters && monsters.length) {
      }
      this.display();
    } catch (e) {
    }
  }
  async generateDownloads() {
    this.downloadEl.empty();
    new import_obsidian2.Setting(this.downloadEl).setHeading().setName("Download Creature Sets");
    const downloadContainer = this.downloadEl.createDiv("bestiary-additional-container");
    new import_obsidian2.Setting(downloadContainer).setDesc("Some basic creature sets, such as the 5e SRD, are stored online and downloadable here.");
    const sets = await (0, import_obsidian2.requestUrl)("https://raw.githubusercontent.com/valentine195/fantasy-bestiary/master/sets/sets.json").json;
    const add = new import_obsidian2.Setting(downloadContainer).setName("Available Sets");
    let additional;
    let atLeastOne = false;
    const need = [];
    for (const set of sets) {
      if (!this.plugin.settings.downloaded.includes(set.id)) {
        need.push(set);
      } else {
        if (!atLeastOne) {
          atLeastOne = true;
          new import_obsidian2.Setting(downloadContainer).setName("Downloaded Sets");
          additional = downloadContainer.createDiv("additional");
        }
        new import_obsidian2.Setting(additional).setName(set.name).addExtraButton((b) => b.setIcon("cross").onClick(async () => {
          this.plugin.settings.creatures = this.plugin.settings.creatures.filter((c) => {
            c.sets?.length == 1 && c.sets?.includes(set.id);
          });
          this.plugin.settings.downloaded = this.plugin.settings.downloaded.filter((d) => d != set.id);
          await this.plugin.saveSettings();
          this.generateCreatures();
          this.generateDownloads();
        }));
      }
    }
    if (need.length) {
      let chosen;
      add.addDropdown((d) => {
        d.onChange((v) => {
          chosen = v;
        });
        for (const set of need) {
          if (!chosen)
            chosen = set.id;
          d.addOption(set.id, set.name);
        }
      }).addExtraButton((b) => b.setIcon("download").setTooltip("Download Set").onClick(async () => {
        if (!chosen)
          return;
        b.setIcon("refresh-cw").setTooltip("downloading").extraSettingsEl.addClass("bestiary-downloading");
        try {
          const downloaded = await (0, import_obsidian2.requestUrl)(`https://raw.githubusercontent.com/valentine195/fantasy-bestiary/master/sets/${chosen}.json`).json;
          if (downloaded.system) {
            let conflict = this.plugin.hasSystemByName(downloaded.name);
            if (!conflict) {
              this.plugin.settings.systems.push({
                id: nanoid(),
                name: downloaded.name
              });
            }
            if (!conflict || await shouldAdd(this.plugin.getSystemByName(downloaded.name))) {
              const existing = this.plugin.getSystemByName(downloaded.name);
              downloaded.creatures = downloaded.creatures.map((c) => {
                c.systems = [existing.id];
                return c;
              });
            }
            this.plugin.settings.downloaded.push(chosen);
            this.plugin.settings.creatures.push(...downloaded.creatures);
          }
          await this.plugin.saveSettings();
          this.generateSystems();
          this.generateCreatures();
        } catch (e) {
          const set = sets.find((s) => s.id == chosen);
          new import_obsidian2.Notice("There was an issue downloading " + set?.name);
          console.error(e);
        } finally {
          this.generateDownloads();
        }
      })).setDesc("Download additional sets here!");
    } else {
      add.setDesc("No additional sets available for download at this time.");
    }
    add.addExtraButton((b) => b.setIcon("refresh-cw").setTooltip("Check for New Sets").onClick(() => this.generateDownloads()));
  }
  generateImports() {
    this.importsEl.empty();
    new import_obsidian2.Setting(this.importsEl).setHeading().setName("Import Homebrew Creatures");
    const importSettingsContainer = this.importsEl.createDiv("bestiary-additional-container");
    new import_obsidian2.Setting(importSettingsContainer).setDesc("Import creatures from creature files. Monsters are stored by name, so only the last creature by that name will be saved. This is destructive - any saved creature will be overwritten.");
    const importAdditional = importSettingsContainer.createDiv("additional");
    const importAppFile = new import_obsidian2.Setting(importAdditional).setName("Import DnDAppFile").setDesc("Only import content that you own.");
    const inputAppFile = createEl("input", {
      attr: {
        type: "file",
        name: "dndappfile",
        accept: ".xml",
        multiple: true
      }
    });
    inputAppFile.onchange = async () => this.consumeImport(inputAppFile, "appfile");
    importAppFile.addButton((b) => {
      b.setButtonText("Choose File(s)").setTooltip("Import DnDAppFile Data");
      b.buttonEl.addClass("bestiary-file-upload");
      b.buttonEl.appendChild(inputAppFile);
      b.onClick(() => inputAppFile.click());
    });
    const importImprovedInitiative = new import_obsidian2.Setting(importAdditional).setName("Import Improved Initiative Data").setDesc("Only import content that you own.");
    const inputImprovedInitiative = createEl("input", {
      attr: {
        type: "file",
        name: "improvedinitiative",
        accept: ".json",
        multiple: true
      }
    });
    inputImprovedInitiative.onchange = async () => this.consumeImport(inputImprovedInitiative, "improved");
    importImprovedInitiative.addButton((b) => {
      b.setButtonText("Choose File(s)").setTooltip("Import Improved Initiative Data");
      b.buttonEl.addClass("bestiary-file-upload");
      b.buttonEl.appendChild(inputImprovedInitiative);
      b.onClick(() => inputImprovedInitiative.click());
    });
    const importCritterDB = new import_obsidian2.Setting(importAdditional).setName("Import CritterDB Data").setDesc("Only import content that you own.");
    const inputCritterDB = createEl("input", {
      attr: {
        type: "file",
        name: "critterdb",
        accept: ".json",
        multiple: true
      }
    });
    inputCritterDB.onchange = async () => this.consumeImport(inputCritterDB, "critter");
    importCritterDB.addButton((b) => {
      b.setButtonText("Choose File(s)").setTooltip("Import CritterDB Data");
      b.buttonEl.addClass("bestiary-file-upload");
      b.buttonEl.appendChild(inputCritterDB);
      b.onClick(() => inputCritterDB.click());
    });
    const import5eTools = new import_obsidian2.Setting(importAdditional).setName("Import 5e.tools Data").setDesc("Only import content that you own.");
    const input5eTools = createEl("input", {
      attr: {
        type: "file",
        name: "fivetools",
        accept: ".json",
        multiple: true
      }
    });
    input5eTools.onchange = async () => this.consumeImport(input5eTools, "5e");
    import5eTools.addButton((b) => {
      b.setButtonText("Choose File(s)").setTooltip("Import 5e.tools Data");
      b.buttonEl.addClass("bestiary-file-upload");
      b.buttonEl.appendChild(input5eTools);
      b.onClick(() => input5eTools.click());
    });
    const importTetra = new import_obsidian2.Setting(importAdditional).setName("Import TetraCube Data").setDesc("Only import content that you own.");
    const inputTetra = createEl("input", {
      attr: {
        type: "file",
        name: "tetra",
        accept: ".json, .monster",
        multiple: true
      }
    });
    inputTetra.onchange = async () => this.consumeImport(inputTetra, "tetra");
    importTetra.addButton((b) => {
      b.setButtonText("Choose File(s)").setTooltip("Import TetraCube Data");
      b.buttonEl.addClass("bestiary-file-upload");
      b.buttonEl.appendChild(inputTetra);
      b.onClick(() => inputTetra.click());
    });
  }
  generateCreatures() {
    this.creatureEl.empty();
    new import_obsidian2.Setting(this.creatureEl).setHeading().setName("Homebrew Creatures");
    const additionalContainer = this.creatureEl.createDiv("bestiary-additional-container bestiary-monsters");
    new import_obsidian2.Setting(additionalContainer).setName("Add Creature").addButton((b) => {
      b.setIcon("plus-with-circle").onClick(() => {
      });
    });
    const ancestor = this.containerEl.closest(".fantasy-bestiary-settings");
    const { backgroundColor, paddingTop } = getComputedStyle(ancestor);
    const filters = additionalContainer.createDiv({
      cls: "bestiary-monster-filter",
      attr: {
        style: `--bestiary-filter-offset: ${paddingTop}; --bestiary-filter-bg: ${backgroundColor}`
      }
    });
    this.filter = new import_obsidian2.Setting(filters).setClass("bestiary-filter-container").addSearch((t) => {
      t.setPlaceholder("Search Creatures").onChange((0, import_obsidian2.debounce)((v) => {
        this.showSearchResults(additional, v);
      }, 100));
    }).addExtraButton((b) => {
      b.setIcon("trash").setTooltip("Delete All Filtered Creatures").onClick(() => {
        const modal = new ConfirmModal(this.results.length, this.plugin.app);
        modal.onClose = async () => {
          if (modal.saved) {
            await this.plugin.deleteMonsters(...this.results?.map((m) => m.name) ?? []);
            this.generateCreatures();
          }
        };
        modal.open();
      });
    });
    this.setFilterDesc();
    const additional = additionalContainer.createDiv("additional");
    if (!this.plugin.creatures?.length) {
      additional.createDiv({
        attr: {
          style: "display: flex; justify-content: center; padding-bottom: 18px;"
        }
      }).createSpan({
        text: "No saved creatures! Create one to see it here."
      });
      return;
    }
    setTimeout(() => this.showSearchResults(additional, ""));
  }
  setFilterDesc() {
    this.filter.setDesc(createFragment((e) => {
      e.createSpan({
        text: `Managing ${this.plugin.settings.creatures.length} homebrew creature${this.plugin.settings.creatures.length == 1 ? "" : "s"}.`
      });
      e.createEl("p", {
        attr: {
          style: "margin: 0;"
        }
      }).createEl("small", {
        text: `Displaying: ${this.results.length} homebrew creatures.`
      });
    }));
  }
  showSearchResults(additional, search) {
    additional.empty();
    for (const item of this.performFuzzySearch(search)) {
      const content = new import_obsidian2.Setting(additional).setName(item.name);
      let desc = null, needTooltip = false;
      if (Array.isArray(item.source)) {
        let source = item.source.slice(0, 4);
        if (item.source.length > 4) {
          source.push(`and ${item.source.length - 4} more`);
          needTooltip = true;
        }
        desc = stringify(source, 0, ", ", false);
      } else if (item.source) {
        desc = item.source;
      }
      content.setDesc(desc ?? "");
      if (needTooltip) {
        content.descEl.setAttr("aria-label", stringify(item.source ?? "", 0, ", ", false));
      }
      content.addExtraButton((b) => {
        b.setIcon("info").setTooltip("View").onClick(() => {
        });
      }).addExtraButton((b) => {
        b.setIcon("pencil").setTooltip("Edit").onClick(() => {
        });
      }).addExtraButton((b) => {
        b.setIcon("trash").setTooltip("Delete").onClick(async () => {
          await this.plugin.deleteMonsters(item.name);
          this.showSearchResults(additional, search);
        });
      });
    }
    this.setFilterDesc();
  }
  performFuzzySearch(input) {
    const results = [];
    for (const resource of this.plugin.sorted) {
      if (!resource.name && !resource.source)
        continue;
      if (typeof resource.source == "string" && !this.displayed.has(resource.source))
        continue;
      if (Array.isArray(resource.source) && !resource.source.find((s) => this.displayed.has(s)))
        continue;
      const search = (0, import_obsidian2.prepareSimpleSearch)(input);
      let result = search(resource.name);
      if (!result && resource.source != null) {
        result = search(stringify(resource.source));
      }
      if (result) {
        results.push(resource);
      }
    }
    this.results = results.slice(0, 100);
    return this.results;
  }
};
var ConfirmModal = class extends import_obsidian2.Modal {
  constructor(filtered, app2) {
    super(app2);
    this.filtered = filtered;
    this.saved = false;
  }
  onOpen() {
    this.titleEl.setText("Are you sure?");
    this.contentEl.createEl("p", {
      text: `This will delete ${this.filtered} creatures. This cannot be undone.`
    });
    new import_obsidian2.Setting(this.contentEl).setClass("no-border-top").addButton((b) => {
      b.setIcon("checkmark").setCta().onClick(() => {
        this.saved = true;
        this.close();
      });
    }).addExtraButton((b) => b.setIcon("cross").onClick(() => {
      this.saved = true;
      this.close();
    }));
  }
};
async function shouldAdd(system) {
  return new Promise((resolve, reject) => {
    let result = false;
    const modal = new import_obsidian2.Modal(app);
    modal.onOpen = () => {
      modal.titleEl.setText("Game System Conflict");
      modal.contentEl.createEl("p", {
        text: "This creature set is tied to a game system that you already have defined."
      });
      modal.contentEl.createEl("p", {
        text: `Should these creatures be added to the ${system.name} system?`
      });
      new import_obsidian2.Setting(modal.contentEl).addButton((b) => b.setButtonText("Yes").setCta().onClick(() => {
        result = true;
        modal.close();
      })).addButton((b) => b.setButtonText("No").onClick(() => {
        modal.close();
      }));
    };
    modal.onClose = () => resolve(result);
    modal.open();
  });
}

// node_modules/fast-sort/dist/sort.es.js
var castComparer = function(comparer) {
  return function(a, b, order) {
    return comparer(a, b, order) * order;
  };
};
var throwInvalidConfigErrorIfTrue = function(condition, context) {
  if (condition)
    throw Error("Invalid sort config: " + context);
};
var unpackObjectSorter = function(sortByObj) {
  var _a2 = sortByObj || {}, asc = _a2.asc, desc = _a2.desc;
  var order = asc ? 1 : -1;
  var sortBy = asc || desc;
  throwInvalidConfigErrorIfTrue(!sortBy, "Expected `asc` or `desc` property");
  throwInvalidConfigErrorIfTrue(asc && desc, "Ambiguous object with `asc` and `desc` config properties");
  var comparer = sortByObj.comparer && castComparer(sortByObj.comparer);
  return { order, sortBy, comparer };
};
var multiPropertySorterProvider = function(defaultComparer2) {
  return function multiPropertySorter(sortBy, sortByArr, depth, order, comparer, a, b) {
    var valA;
    var valB;
    if (typeof sortBy === "string") {
      valA = a[sortBy];
      valB = b[sortBy];
    } else if (typeof sortBy === "function") {
      valA = sortBy(a);
      valB = sortBy(b);
    } else {
      var objectSorterConfig = unpackObjectSorter(sortBy);
      return multiPropertySorter(objectSorterConfig.sortBy, sortByArr, depth, objectSorterConfig.order, objectSorterConfig.comparer || defaultComparer2, a, b);
    }
    var equality = comparer(valA, valB, order);
    if ((equality === 0 || valA == null && valB == null) && sortByArr.length > depth) {
      return multiPropertySorter(sortByArr[depth], sortByArr, depth + 1, order, comparer, a, b);
    }
    return equality;
  };
};
function getSortStrategy(sortBy, comparer, order) {
  if (sortBy === void 0 || sortBy === true) {
    return function(a, b) {
      return comparer(a, b, order);
    };
  }
  if (typeof sortBy === "string") {
    throwInvalidConfigErrorIfTrue(sortBy.includes("."), "String syntax not allowed for nested properties.");
    return function(a, b) {
      return comparer(a[sortBy], b[sortBy], order);
    };
  }
  if (typeof sortBy === "function") {
    return function(a, b) {
      return comparer(sortBy(a), sortBy(b), order);
    };
  }
  if (Array.isArray(sortBy)) {
    var multiPropSorter_1 = multiPropertySorterProvider(comparer);
    return function(a, b) {
      return multiPropSorter_1(sortBy[0], sortBy, 1, order, comparer, a, b);
    };
  }
  var objectSorterConfig = unpackObjectSorter(sortBy);
  return getSortStrategy(objectSorterConfig.sortBy, objectSorterConfig.comparer || comparer, objectSorterConfig.order);
}
var sortArray = function(order, ctx, sortBy, comparer) {
  var _a2;
  if (!Array.isArray(ctx)) {
    return ctx;
  }
  if (Array.isArray(sortBy) && sortBy.length < 2) {
    _a2 = sortBy, sortBy = _a2[0];
  }
  return ctx.sort(getSortStrategy(sortBy, comparer, order));
};
function createNewSortInstance(opts) {
  var comparer = castComparer(opts.comparer);
  return function(_ctx) {
    var ctx = Array.isArray(_ctx) && !opts.inPlaceSorting ? _ctx.slice() : _ctx;
    return {
      asc: function(sortBy) {
        return sortArray(1, ctx, sortBy, comparer);
      },
      desc: function(sortBy) {
        return sortArray(-1, ctx, sortBy, comparer);
      },
      by: function(sortBy) {
        return sortArray(1, ctx, sortBy, comparer);
      }
    };
  };
}
var defaultComparer = function(a, b, order) {
  if (a == null)
    return order;
  if (b == null)
    return -order;
  if (a < b)
    return -1;
  if (a > b)
    return 1;
  return 0;
};
var sort = createNewSortInstance({
  comparer: defaultComparer
});
var inPlaceSort = createNewSortInstance({
  comparer: defaultComparer,
  inPlaceSorting: true
});

// src/main.ts
var DEFAULT_SETTINGS = {
  downloaded: [],
  systems: [],
  activeSystem: "none",
  creatures: [],
  integratedStatblocks: false
};
var FantasyBestiary = class extends import_obsidian3.Plugin {
  get creatures() {
    return this.settings.creatures;
  }
  get sorted() {
    return sort(this.creatures).asc((m) => m.name);
  }
  get sources() {
    const sources = /* @__PURE__ */ new Set();
    for (const creature of this.creatures) {
      if (!creature.source)
        continue;
      if (Array.isArray(creature.source)) {
        for (const source of creature.source) {
          sources.add(source);
        }
      }
      if (typeof creature.source == "string") {
        sources.add(creature.source);
      }
    }
    return sources;
  }
  deleteMonsters(...monsters) {
    throw new Error("Method not implemented.");
  }
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new FantasyBestiarySettingTab(app, this));
    (0, import_obsidian3.addIcon)("bestiary-game-system", `<svg xmlns="http://www.w3.org/2000/svg" fill=currentColor viewBox="0 0 448 512"><!--! Font Awesome Pro 6.2.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2022 Fonticons, Inc. --><path d="M0 96C0 43 43 0 96 0H384h32c17.7 0 32 14.3 32 32V352c0 17.7-14.3 32-32 32v64c17.7 0 32 14.3 32 32s-14.3 32-32 32H384 96c-53 0-96-43-96-96V96zM64 416c0 17.7 14.3 32 32 32H352V384H96c-17.7 0-32 14.3-32 32zM320 112c0-35.3-35.8-64-80-64s-80 28.7-80 64c0 20.9 12.6 39.5 32 51.2V176c0 8.8 7.2 16 16 16h64c8.8 0 16-7.2 16-16V163.2c19.4-11.7 32-30.3 32-51.2zM208 128c-8.8 0-16-7.2-16-16s7.2-16 16-16s16 7.2 16 16s-7.2 16-16 16zm80-16c0 8.8-7.2 16-16 16s-16-7.2-16-16s7.2-16 16-16s16 7.2 16 16zM134.3 209.3c-8.1-3.5-17.5 .3-21 8.4s.3 17.5 8.4 21L199.4 272l-77.7 33.3c-8.1 3.5-11.9 12.9-8.4 21s12.9 11.9 21 8.4L240 289.4l105.7 45.3c8.1 3.5 17.5-.3 21-8.4s-.3-17.5-8.4-21L280.6 272l77.7-33.3c8.1-3.5 11.9-12.9 8.4-21s-12.9-11.9-21-8.4L240 254.6 134.3 209.3z"/></svg>`);
    this.app.workspace.onLayoutReady(() => {
      this.statusBar = this.addStatusBarItem();
      this.statusBar.addClass("fantasy-bestiary-status-bar");
      this.buildStatusBar();
      this.addCommand({
        name: "Change Game System",
        id: "change-game-system",
        checkCallback: (checking) => {
          if (this.settings.systems.length) {
            if (!checking) {
            }
            return true;
          }
        }
      });
    });
  }
  buildStatusBar() {
    (0, import_obsidian3.setIcon)(this.statusBar.createDiv(), "bestiary-game-system");
    this.statusBarSystem = this.statusBar.createDiv({
      text: this.getSystemById(this.settings.activeSystem)?.name ?? "None"
    });
    this.statusBar.onClickEvent((evt) => {
      const menu = this.getStatusBarMenu();
      menu.showAtMouseEvent(evt);
    });
  }
  getStatusBarMenu() {
    const menu = new import_obsidian3.Menu();
    menu.addItem((item) => {
      item.setTitle("None");
      if (this.settings.activeSystem == "none") {
        item.setChecked(true);
      }
      item.onClick(() => {
        this.setActiveSystem("none");
      });
    });
    for (const system of this.settings.systems) {
      menu.addItem((item) => {
        item.setTitle(system.name);
        if (this.settings.activeSystem == system.id) {
          item.setChecked(true);
        }
        item.onClick(() => {
          this.setActiveSystem(system.id);
        });
      });
    }
    return menu;
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  hasSystemById(id) {
    return this.settings.systems.find((sys) => sys.id == id) != null;
  }
  hasSystemByName(name) {
    return this.settings.systems.find((sys) => sys.name == name) != null;
  }
  getSystemById(id) {
    return this.settings.systems.find((sys) => sys.id == id);
  }
  getSystemByName(name) {
    return this.settings.systems.find((sys) => sys.name == name);
  }
  async setActiveSystem(id) {
    this.settings.activeSystem = id;
    const system = this.getSystemById(id);
    this.statusBarSystem.setText(system?.name ?? "None");
    await this.saveSettings();
  }
};
//# sourceMappingURL=data:application/json;base64,
