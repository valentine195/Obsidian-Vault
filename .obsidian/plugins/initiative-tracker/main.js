/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name2 in all)
    __defProp(target, name2, { get: all[name2], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => InitiativeTracker
});
module.exports = __toCommonJS(main_exports);
var import_obsidian40 = require("obsidian");

// src/utils/constants.ts
var import_obsidian = require("obsidian");

// src/utils/conditions.ts
var Conditions = [
  {
    name: "Blinded",
    description: "A blinded creature can\u2019t see and automatically fails any ability check that requires sight.\nAttack rolls against the creature have advantage, and the creature\u2019s Attack rolls have disadvantage."
  },
  {
    name: "Charmed",
    description: "A charmed creature can\u2019t Attack the charmer or target the charmer with harmful Abilities or magical Effects.\nThe charmer has advantage on any ability check to interact socially with the creature."
  },
  {
    name: "Concentrating",
    description: "Some spells require you to maintain concentration in order to keep their magic active. If you lose concentration, such a spell ends.\nA creature loses concentration when: it casts another spell that requires concentration, is incapacitated, or dies.\nWhen a creature takes damage, it must make a constitution saving throw with a DC of 10 or half the damage it took, whichever is higher. On a failure, concentration is lost."
  },
  {
    name: "Deafened",
    description: "A deafened creature can\u2019t hear and automatically fails any ability check that requires hearing."
  },
  {
    name: "Frightened",
    description: "A frightened creature has disadvantage on Ability Checks and Attack rolls while the source of its fear is within Line of Sight.\nThe creature can\u2019t willingly move closer to the source of its fear."
  },
  {
    name: "Grappled",
    description: "A grappled creature\u2019s speed becomes 0, and it can\u2019t benefit from any bonus to its speed.\nThe condition ends if the Grappler is incapacitated.\nThe condition also ends if an Effect removes the grappled creature from the reach of the Grappler or Grappling Effect, such as when a creature is hurled away by the Thunderwave spell."
  },
  {
    name: "Incapacitated",
    description: "An incapacitated creature can\u2019t take Actions or Reactions."
  },
  {
    name: "Invisible",
    description: "An invisible creature is impossible to see without the aid of magic or a Special sense. For the Purpose of Hiding, the creature is heavily obscured. The creature\u2019s Location can be detected by any noise it makes or any tracks it leaves.\nAttack rolls against the creature have disadvantage, and the creature\u2019s Attack rolls have advantage."
  },
  {
    name: "Paralyzed",
    description: "A paralyzed creature is incapacitated and can\u2019t move or speak.\nThe creature automatically fails Strength and Dexterity Saving Throws.\nAttack rolls against the creature have advantage.\nAny Attack that hits the creature is a critical hit if the attacker is within 5 feet of the creature."
  },
  {
    name: "Petrified",
    description: "A petrified creature is transformed, along with any nonmagical object it is wearing or carrying, into a solid inanimate substance (usually stone). Its weight increases by a factor of ten, and it ceases aging.\nThe creature is incapacitated, can\u2019t move or speak, and is unaware of its surroundings.\nAttack rolls against the creature have advantage.\nThe creature automatically fails Strength and Dexterity Saving Throws.\nThe creature has Resistance to all damage.\nThe creature is immune to poison and disease, although a poison or disease already in its system is suspended, not neutralized."
  },
  {
    name: "Poisoned",
    description: "A poisoned creature has disadvantage on Attack rolls and Ability Checks."
  },
  {
    name: "Prone",
    description: "A prone creature\u2019s only Movement option is to crawl, unless it stands up and thereby ends the condition.\nThe creature has disadvantage on Attack rolls.\nAn Attack roll against the creature has advantage if the attacker is within 5 feet of the creature. Otherwise, the Attack roll has disadvantage."
  },
  {
    name: "Reacted",
    description: "A creature, unless otherwise specified, gets one reaction per round of combat.\nA reaction is an instant response to a trigger of some kind, which can occur on your turn or on someone else\u2019s.\nA reaction can be spent to make an opportunity attack, do a readied action, or use an ability that requires a reaction.\nA creature that has already reacted cannot use a reaction until the start of its turn."
  },
  {
    name: "Restrained",
    description: "A restrained creature\u2019s speed becomes 0, and it can\u2019t benefit from any bonus to its speed.\nAttack rolls against the creature have advantage, and the creature\u2019s Attack rolls have disadvantage.\nThe creature has disadvantage on Dexterity Saving Throws."
  },
  {
    name: "Stunned",
    description: "A stunned creature is incapacitated, can\u2019t move, and can speak only falteringly.\nThe creature automatically fails Strength and Dexterity Saving Throws.\nAttack rolls against the creature have advantage."
  },
  {
    name: "Unconscious",
    description: "An unconscious creature is incapacitated, can\u2019t move or speak, and is unaware of its surroundings.\nThe creature drops whatever it\u2019s holding and falls prone.\nThe creature automatically fails Strength and Dexterity Saving Throws.\nAttack rolls against the creature have advantage.\nAny Attack that hits the creature is a critical hit if the attacker is within 5 feet of the creature."
  }
];

// src/utils/constants.ts
var INTIATIVE_TRACKER_VIEW = "initiative-tracker-view";
var PLAYER_VIEW_VIEW = "initiative-tracker-player-view";
var CREATURE_TRACKER_VIEW = "initiative-tracker-creature-view";
var DEFAULT_UNDEFINED = "\u2013";
var META_MODIFIER = import_obsidian.Platform.isMacOS ? "Meta" : "Control";
var DEFAULT_SETTINGS = {
  players: [],
  parties: [],
  defaultParty: null,
  homebrew: [],
  statuses: [...Conditions],
  version: null,
  canUseDiceRoll: false,
  initiative: "1d20 + %mod%",
  modifier: null,
  sync: false,
  leafletIntegration: false,
  playerMarker: "default",
  monsterMarker: "default",
  state: {
    creatures: [],
    state: false,
    name: null,
    round: null,
    logFile: null
  },
  condense: false,
  clamp: true,
  autoStatus: true,
  beginnerTips: true,
  displayDifficulty: true,
  encounters: {},
  warnedAboutImports: false,
  openState: {
    battle: true,
    party: true,
    status: true,
    plugin: true,
    player: true
  },
  hpOverflow: "ignore",
  additiveTemp: false,
  logging: false,
  logFolder: "/",
  useLegacy: false
};
var XP_PER_CR = {
  "0": 0,
  "1/8": 25,
  "1/4": 50,
  "1/2": 100,
  "1": 200,
  "2": 450,
  "3": 700,
  "4": 1100,
  "5": 1800,
  "6": 2300,
  "7": 2900,
  "8": 3900,
  "9": 5e3,
  "10": 5900,
  "11": 7200,
  "12": 8400,
  "13": 1e4,
  "14": 11500,
  "15": 13e3,
  "16": 15e3,
  "17": 18e3,
  "18": 2e4,
  "19": 22e3,
  "20": 25e3,
  "21": 33e3,
  "22": 41e3,
  "23": 5e4,
  "24": 62e3,
  "25": 75e3,
  "26": 9e4,
  "27": 105e3,
  "28": 12e4,
  "29": 135e3,
  "30": 155e3
};
var OVERFLOW_TYPE = {
  ignore: "ignore",
  current: "current",
  temp: "temp"
};

// src/utils/icons.ts
var import_obsidian2 = require("obsidian");
function registerIcons() {
  (0, import_obsidian2.addIcon)(BASE, ICON);
  (0, import_obsidian2.addIcon)(SAVE, SAVE_ICON);
  (0, import_obsidian2.addIcon)(ADD, ADD_ICON);
  (0, import_obsidian2.addIcon)(RESTART, RESTART_ICON);
  (0, import_obsidian2.addIcon)(PLAY, PLAY_ICON);
  (0, import_obsidian2.addIcon)(FORWARD, FORWARD_ICON);
  (0, import_obsidian2.addIcon)(BACKWARD, BACKWARD_ICON);
  (0, import_obsidian2.addIcon)(STOP, STOP_ICON);
  (0, import_obsidian2.addIcon)(GRIP, GRIP_ICON);
  (0, import_obsidian2.addIcon)(HP, HP_ICON);
  (0, import_obsidian2.addIcon)(AC, AC_ICON);
  (0, import_obsidian2.addIcon)(HAMBURGER, HAMBURGER_ICON);
  (0, import_obsidian2.addIcon)(ENABLE, ENABLE_ICON);
  (0, import_obsidian2.addIcon)(DISABLE, DISABLE_ICON);
  (0, import_obsidian2.addIcon)(TAG, TAG_ICON);
  (0, import_obsidian2.addIcon)(EDIT, EDIT_ICON);
  (0, import_obsidian2.addIcon)(INITIATIVE, INITIATIVE_ICON);
  (0, import_obsidian2.addIcon)(REDO, REDO_ICON);
  (0, import_obsidian2.addIcon)(NEW, NEW_ICON);
  (0, import_obsidian2.addIcon)(DICE, DICE_ICON);
  (0, import_obsidian2.addIcon)(START_ENCOUNTER, START_ENCOUNTER_ICON);
  (0, import_obsidian2.addIcon)(MAP, MAP_ICON);
  (0, import_obsidian2.addIcon)(COPY, COPY_ICON);
  (0, import_obsidian2.addIcon)(
    GROUP,
    `<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="users" class="svg-inline--fa fa-users fa-w-20" role="img" viewBox="0 0 640 512"><path fill="currentColor" d="M96 224c35.3 0 64-28.7 64-64s-28.7-64-64-64-64 28.7-64 64 28.7 64 64 64zm448 0c35.3 0 64-28.7 64-64s-28.7-64-64-64-64 28.7-64 64 28.7 64 64 64zm32 32h-64c-17.6 0-33.5 7.1-45.1 18.6 40.3 22.1 68.9 62 75.1 109.4h66c17.7 0 32-14.3 32-32v-32c0-35.3-28.7-64-64-64zm-256 0c61.9 0 112-50.1 112-112S381.9 32 320 32 208 82.1 208 144s50.1 112 112 112zm76.8 32h-8.3c-20.8 10-43.9 16-68.5 16s-47.6-6-68.5-16h-8.3C179.6 288 128 339.6 128 403.2V432c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48v-28.8c0-63.6-51.6-115.2-115.2-115.2zm-223.7-13.4C161.5 263.1 145.6 256 128 256H64c-35.3 0-64 28.7-64 64v32c0 17.7 14.3 32 32 32h65.9c6.3-47.4 34.9-87.3 75.2-109.4z"/></svg>`
  );
  (0, import_obsidian2.addIcon)(
    EXPAND,
    `<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="users-slash" class="svg-inline--fa fa-users-slash fa-w-20" role="img" viewBox="0 0 640 512"><path fill="currentColor" d="M132.65,212.32,36.21,137.78A63.4,63.4,0,0,0,32,160a63.84,63.84,0,0,0,100.65,52.32Zm40.44,62.28A63.79,63.79,0,0,0,128,256H64A64.06,64.06,0,0,0,0,320v32a32,32,0,0,0,32,32H97.91A146.62,146.62,0,0,1,173.09,274.6ZM544,224a64,64,0,1,0-64-64A64.06,64.06,0,0,0,544,224ZM500.56,355.11a114.24,114.24,0,0,0-84.47-65.28L361,247.23c41.46-16.3,71-55.92,71-103.23A111.93,111.93,0,0,0,320,32c-57.14,0-103.69,42.83-110.6,98.08L45.46,3.38A16,16,0,0,0,23,6.19L3.37,31.46A16,16,0,0,0,6.18,53.91L594.53,508.63A16,16,0,0,0,617,505.82l19.64-25.27a16,16,0,0,0-2.81-22.45ZM128,403.21V432a48,48,0,0,0,48,48H464a47.45,47.45,0,0,0,12.57-1.87L232,289.13C173.74,294.83,128,343.42,128,403.21ZM576,256H512a63.79,63.79,0,0,0-45.09,18.6A146.29,146.29,0,0,1,542,384h66a32,32,0,0,0,32-32V320A64.06,64.06,0,0,0,576,256Z"/></svg>`
  );
  (0, import_obsidian2.addIcon)(
    ACTIVE,
    `<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="angle-right" class="svg-inline--fa fa-angle-right fa-w-8" role="img" viewBox="0 0 256 512"><path fill="currentColor" d="M224.3 273l-136 136c-9.4 9.4-24.6 9.4-33.9 0l-22.6-22.6c-9.4-9.4-9.4-24.6 0-33.9l96.4-96.4-96.4-96.4c-9.4-9.4-9.4-24.6 0-33.9L54.3 103c9.4-9.4 24.6-9.4 33.9 0l136 136c9.5 9.4 9.5 24.6.1 34z"/></svg>`
  );
  (0, import_obsidian2.addIcon)(
    MAPMARKER,
    `<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="map-marker-alt" class="svg-inline--fa fa-map-marker-alt fa-w-12" role="img" viewBox="0 0 384 512"><path fill="currentColor" d="M172.268 501.67C26.97 291.031 0 269.413 0 192 0 85.961 85.961 0 192 0s192 85.961 192 192c0 77.413-26.97 99.031-172.268 309.67-9.535 13.774-29.93 13.773-39.464 0zM192 272c44.183 0 80-35.817 80-80s-35.817-80-80-80-80 35.817-80 80 35.817 80 80 80z"/></svg>`
  );
  (0, import_obsidian2.addIcon)(
    CREATURE,
    `<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="dragon" class="svg-inline--fa fa-dragon fa-w-20" role="img" viewBox="0 0 640 512"><path fill="currentColor" d="M18.32 255.78L192 223.96l-91.28 68.69c-10.08 10.08-2.94 27.31 11.31 27.31h222.7c-9.44-26.4-14.73-54.47-14.73-83.38v-42.27l-119.73-87.6c-23.82-15.88-55.29-14.01-77.06 4.59L5.81 227.64c-12.38 10.33-3.45 30.42 12.51 28.14zm556.87 34.1l-100.66-50.31A47.992 47.992 0 0 1 448 196.65v-36.69h64l28.09 22.63c6 6 14.14 9.37 22.63 9.37h30.97a32 32 0 0 0 28.62-17.69l14.31-28.62a32.005 32.005 0 0 0-3.02-33.51l-74.53-99.38C553.02 4.7 543.54 0 533.47 0H296.02c-7.13 0-10.7 8.57-5.66 13.61L352 63.96 292.42 88.8c-5.9 2.95-5.9 11.36 0 14.31L352 127.96v108.62c0 72.08 36.03 139.39 96 179.38-195.59 6.81-344.56 41.01-434.1 60.91C5.78 478.67 0 485.88 0 494.2 0 504 7.95 512 17.76 512h499.08c63.29.01 119.61-47.56 122.99-110.76 2.52-47.28-22.73-90.4-64.64-111.36zM489.18 66.25l45.65 11.41c-2.75 10.91-12.47 18.89-24.13 18.26-12.96-.71-25.85-12.53-21.52-29.67z"/></svg>`
  );
  (0, import_obsidian2.addIcon)(PLAYER_VIEW, PLAYER_VIEW_ICON);
  (0, import_obsidian2.addIcon)(BUILDER_VIEW, BUILDER_ICON);
}
var MAPMARKER = "tracker-map-marker";
var EXPAND = "expand-creatures";
var GROUP = "group-creatures";
var ACTIVE = "initiative-tracker-active";
var CREATURE = "initiative-tracker-creature-view";
var HIDDEN = "eye-off";
var BASE = "initiative-tracker";
var ICON = `<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="dice-d20" class="svg-inline--fa fa-dice-d20 fa-w-15" role="img" viewBox="0 0 480 512"><path fill="currentColor" d="M106.75 215.06L1.2 370.95c-3.08 5 .1 11.5 5.93 12.14l208.26 22.07-108.64-190.1zM7.41 315.43L82.7 193.08 6.06 147.1c-2.67-1.6-6.06.32-6.06 3.43v162.81c0 4.03 5.29 5.53 7.41 2.09zM18.25 423.6l194.4 87.66c5.3 2.45 11.35-1.43 11.35-7.26v-65.67l-203.55-22.3c-4.45-.5-6.23 5.59-2.2 7.57zm81.22-257.78L179.4 22.88c4.34-7.06-3.59-15.25-10.78-11.14L17.81 110.35c-2.47 1.62-2.39 5.26.13 6.78l81.53 48.69zM240 176h109.21L253.63 7.62C250.5 2.54 245.25 0 240 0s-10.5 2.54-13.63 7.62L130.79 176H240zm233.94-28.9l-76.64 45.99 75.29 122.35c2.11 3.44 7.41 1.94 7.41-2.1V150.53c0-3.11-3.39-5.03-6.06-3.43zm-93.41 18.72l81.53-48.7c2.53-1.52 2.6-5.16.13-6.78l-150.81-98.6c-7.19-4.11-15.12 4.08-10.78 11.14l79.93 142.94zm79.02 250.21L256 438.32v65.67c0 5.84 6.05 9.71 11.35 7.26l194.4-87.66c4.03-1.97 2.25-8.06-2.2-7.56zm-86.3-200.97l-108.63 190.1 208.26-22.07c5.83-.65 9.01-7.14 5.93-12.14L373.25 215.06zM240 208H139.57L240 383.75 340.43 208H240z"/></svg>`;
var MAP = "initiative-tracker-map";
var MAP_ICON = `<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="map-marked-alt" class="svg-inline--fa fa-map-marked-alt fa-w-18" role="img" viewBox="0 0 576 512"><path fill="currentColor" d="M288 0c-69.59 0-126 56.41-126 126 0 56.26 82.35 158.8 113.9 196.02 6.39 7.54 17.82 7.54 24.2 0C331.65 284.8 414 182.26 414 126 414 56.41 357.59 0 288 0zm0 168c-23.2 0-42-18.8-42-42s18.8-42 42-42 42 18.8 42 42-18.8 42-42 42zM20.12 215.95A32.006 32.006 0 0 0 0 245.66v250.32c0 11.32 11.43 19.06 21.94 14.86L160 448V214.92c-8.84-15.98-16.07-31.54-21.25-46.42L20.12 215.95zM288 359.67c-14.07 0-27.38-6.18-36.51-16.96-19.66-23.2-40.57-49.62-59.49-76.72v182l192 64V266c-18.92 27.09-39.82 53.52-59.49 76.72-9.13 10.77-22.44 16.95-36.51 16.95zm266.06-198.51L416 224v288l139.88-55.95A31.996 31.996 0 0 0 576 426.34V176.02c0-11.32-11.43-19.06-21.94-14.86z"/></svg>`;
var START_ENCOUNTER = "crossed-swords";
var START_ENCOUNTER_ICON = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1024 1024"><path fill="currentColor" d="M27.43 918.8l30.374-30.374 80.793 80.793-30.374 30.374L27.43 918.8zm422.393-253.815c0-48.521-39.36-87.882-87.882-87.882s-87.88 39.36-87.88 87.88c0 48.521 39.338 87.859 87.882 87.882s87.902-39.338 87.88-87.88zm-175.351 8.401l-.807-.807-166.337 166.336 80.794 80.794 166.337-166.337-.92-.92c-41.832-3.986-75.099-37.253-79.067-79.065zm-.411-8.402c0-45.507 34.621-82.952 78.95-87.431-46.731-53.121-88.214-110.883-123.852-172.613L117.593 516.506 274.47 673.383a88.927 88.927 0 0 1-.409-8.399zm175.315 8.962c-4.472 44.334-41.914 78.942-87.433 78.92a89.137 89.137 0 0 1-8.406-.413l157.058 157.058 111.566-111.566c-62.063-35.842-119.841-77.405-172.785-123.999zM815.497 74.632L392.493 497.636c6.535 9.622 10.729 21.41 10.729 33.817 0 19.234-9.188 36.441-23.375 47.483 34.711 7.191 61.918 34.869 68.453 69.814 11.013-14.625 28.5-24.14 48.078-24.14 12.407 0 23.51 3.51 32.978 9.891l423.002-423.002 29.691-166.555-166.553 29.688zM41.964 872.58l112.539 112.539 49.514-49.514L91.478 823.066 41.964 872.58z"/></svg>';
var SAVE = "initiative-tracker-save";
var SAVE_ICON = `<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="save" class="svg-inline--fa fa-save fa-w-14" role="img" viewBox="0 0 448 512"><path fill="currentColor" d="M433.941 129.941l-83.882-83.882A48 48 0 0 0 316.118 32H48C21.49 32 0 53.49 0 80v352c0 26.51 21.49 48 48 48h352c26.51 0 48-21.49 48-48V163.882a48 48 0 0 0-14.059-33.941zM224 416c-35.346 0-64-28.654-64-64 0-35.346 28.654-64 64-64s64 28.654 64 64c0 35.346-28.654 64-64 64zm96-304.52V212c0 6.627-5.373 12-12 12H76c-6.627 0-12-5.373-12-12V108c0-6.627 5.373-12 12-12h228.52c3.183 0 6.235 1.264 8.485 3.515l3.48 3.48A11.996 11.996 0 0 1 320 111.48z"/></svg>`;
var ADD = "initiative-tracker-add";
var ADD_ICON = `<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="user-plus" class="svg-inline--fa fa-user-plus fa-w-20" role="img" viewBox="0 0 640 512"><path fill="currentColor" d="M624 208h-64v-64c0-8.8-7.2-16-16-16h-32c-8.8 0-16 7.2-16 16v64h-64c-8.8 0-16 7.2-16 16v32c0 8.8 7.2 16 16 16h64v64c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16v-64h64c8.8 0 16-7.2 16-16v-32c0-8.8-7.2-16-16-16zm-400 48c70.7 0 128-57.3 128-128S294.7 0 224 0 96 57.3 96 128s57.3 128 128 128zm89.6 32h-16.7c-22.2 10.2-46.9 16-72.9 16s-50.6-5.8-72.9-16h-16.7C60.2 288 0 348.2 0 422.4V464c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48v-41.6c0-74.2-60.2-134.4-134.4-134.4z"/></svg>`;
var REMOVE = "trash";
var RESTART = "initiative-tracker-restart";
var RESTART_ICON = `<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="redo" class="svg-inline--fa fa-redo fa-w-16" role="img" viewBox="0 0 512 512"><path fill="currentColor" d="M500.33 0h-47.41a12 12 0 0 0-12 12.57l4 82.76A247.42 247.42 0 0 0 256 8C119.34 8 7.9 119.53 8 256.19 8.1 393.07 119.1 504 256 504a247.1 247.1 0 0 0 166.18-63.91 12 12 0 0 0 .48-17.43l-34-34a12 12 0 0 0-16.38-.55A176 176 0 1 1 402.1 157.8l-101.53-4.87a12 12 0 0 0-12.57 12v47.41a12 12 0 0 0 12 12h200.33a12 12 0 0 0 12-12V12a12 12 0 0 0-12-12z"/></svg>`;
var PLAY = "initiative-tracker-play";
var PLAY_ICON = `<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="play" class="svg-inline--fa fa-play fa-w-14" role="img" viewBox="0 0 448 512"><path fill="currentColor" d="M424.4 214.7L72.4 6.6C43.8-10.3 0 6.1 0 47.9V464c0 37.5 40.7 60.1 72.4 41.3l352-208c31.4-18.5 31.5-64.1 0-82.6z"/></svg>`;
var FORWARD = "initiative-tracker-forward";
var FORWARD_ICON = `<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="step-forward" class="svg-inline--fa fa-step-forward fa-w-14" role="img" viewBox="0 0 448 512"><path fill="currentColor" d="M384 44v424c0 6.6-5.4 12-12 12h-48c-6.6 0-12-5.4-12-12V291.6l-195.5 181C95.9 489.7 64 475.4 64 448V64c0-27.4 31.9-41.7 52.5-24.6L312 219.3V44c0-6.6 5.4-12 12-12h48c6.6 0 12 5.4 12 12z"/></svg>`;
var BACKWARD = "initiative-tracker-backward";
var BACKWARD_ICON = `<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="step-backward" class="svg-inline--fa fa-step-backward fa-w-14" role="img" viewBox="0 0 448 512"><path fill="currentColor" d="M64 468V44c0-6.6 5.4-12 12-12h48c6.6 0 12 5.4 12 12v176.4l195.5-181C352.1 22.3 384 36.6 384 64v384c0 27.4-31.9 41.7-52.5 24.6L136 292.7V468c0 6.6-5.4 12-12 12H76c-6.6 0-12-5.4-12-12z"/></svg>`;
var STOP = "initiative-tracker-stop";
var STOP_ICON = `<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="stop" class="svg-inline--fa fa-stop fa-w-14" role="img" viewBox="0 0 448 512"><path fill="currentColor" d="M400 32H48C21.5 32 0 53.5 0 80v352c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48V80c0-26.5-21.5-48-48-48z"/></svg>`;
var GRIP = "initiative-tracker-grip";
var GRIP_ICON = `<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="grip-vertical" class="svg-inline--fa fa-grip-vertical fa-w-10" role="img" viewBox="0 0 320 512"><path fill="currentColor" d="M96 32H32C14.33 32 0 46.33 0 64v64c0 17.67 14.33 32 32 32h64c17.67 0 32-14.33 32-32V64c0-17.67-14.33-32-32-32zm0 160H32c-17.67 0-32 14.33-32 32v64c0 17.67 14.33 32 32 32h64c17.67 0 32-14.33 32-32v-64c0-17.67-14.33-32-32-32zm0 160H32c-17.67 0-32 14.33-32 32v64c0 17.67 14.33 32 32 32h64c17.67 0 32-14.33 32-32v-64c0-17.67-14.33-32-32-32zM288 32h-64c-17.67 0-32 14.33-32 32v64c0 17.67 14.33 32 32 32h64c17.67 0 32-14.33 32-32V64c0-17.67-14.33-32-32-32zm0 160h-64c-17.67 0-32 14.33-32 32v64c0 17.67 14.33 32 32 32h64c17.67 0 32-14.33 32-32v-64c0-17.67-14.33-32-32-32zm0 160h-64c-17.67 0-32 14.33-32 32v64c0 17.67 14.33 32 32 32h64c17.67 0 32-14.33 32-32v-64c0-17.67-14.33-32-32-32z"/></svg>`;
var HP = "initiative-tracker-hp";
var HP_ICON = `<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="far" data-icon="heart" class="svg-inline--fa fa-heart fa-w-16" role="img" viewBox="0 0 512 512"><path fill="currentColor" d="M458.4 64.3C400.6 15.7 311.3 23 256 79.3 200.7 23 111.4 15.6 53.6 64.3-21.6 127.6-10.6 230.8 43 285.5l175.4 178.7c10 10.2 23.4 15.9 37.6 15.9 14.3 0 27.6-5.6 37.6-15.8L469 285.6c53.5-54.7 64.7-157.9-10.6-221.3zm-23.6 187.5L259.4 430.5c-2.4 2.4-4.4 2.4-6.8 0L77.2 251.8c-36.5-37.2-43.9-107.6 7.3-150.7 38.9-32.7 98.9-27.8 136.5 10.5l35 35.7 35-35.7c37.8-38.5 97.8-43.2 136.5-10.6 51.1 43.1 43.5 113.9 7.3 150.8z"/></svg>`;
var AC = "initiative-tracker-ac";
var AC_ICON = `<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="shield-alt" class="svg-inline--fa fa-shield-alt fa-w-16" role="img" viewBox="0 0 512 512"><path fill="currentColor" d="M466.5 83.7l-192-80a48.15 48.15 0 0 0-36.9 0l-192 80C27.7 91.1 16 108.6 16 128c0 198.5 114.5 335.7 221.5 380.3 11.8 4.9 25.1 4.9 36.9 0C360.1 472.6 496 349.3 496 128c0-19.4-11.7-36.9-29.5-44.3zM256.1 446.3l-.1-381 175.9 73.3c-3.3 151.4-82.1 261.1-175.8 307.7z"/></svg>`;
var HAMBURGER = "initiative-tracker-hamburger";
var HAMBURGER_ICON = `<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="bars" class="svg-inline--fa fa-bars fa-w-14" role="img" viewBox="0 0 448 512"><path fill="currentColor" d="M16 132h416c8.837 0 16-7.163 16-16V76c0-8.837-7.163-16-16-16H16C7.163 60 0 67.163 0 76v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16zm0 160h416c8.837 0 16-7.163 16-16v-40c0-8.837-7.163-16-16-16H16c-8.837 0-16 7.163-16 16v40c0 8.837 7.163 16 16 16z"/></svg>`;
var DISABLE = "initiative-tracker-disable";
var DISABLE_ICON = `<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="user-slash" class="svg-inline--fa fa-user-slash fa-w-20" role="img" viewBox="0 0 640 512"><path fill="currentColor" d="M633.8 458.1L362.3 248.3C412.1 230.7 448 183.8 448 128 448 57.3 390.7 0 320 0c-67.1 0-121.5 51.8-126.9 117.4L45.5 3.4C38.5-2 28.5-.8 23 6.2L3.4 31.4c-5.4 7-4.2 17 2.8 22.4l588.4 454.7c7 5.4 17 4.2 22.5-2.8l19.6-25.3c5.4-6.8 4.1-16.9-2.9-22.3zM96 422.4V464c0 26.5 21.5 48 48 48h350.2L207.4 290.3C144.2 301.3 96 356 96 422.4z"/></svg>`;
var ENABLE = "initiative-tracker-enable";
var ENABLE_ICON = `<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="user-check" class="svg-inline--fa fa-user-check fa-w-20" role="img" viewBox="0 0 640 512"><path fill="currentColor" d="M224 256c70.7 0 128-57.3 128-128S294.7 0 224 0 96 57.3 96 128s57.3 128 128 128zm89.6 32h-16.7c-22.2 10.2-46.9 16-72.9 16s-50.6-5.8-72.9-16h-16.7C60.2 288 0 348.2 0 422.4V464c0 26.5 21.5 48 48 48h352c26.5 0 48-21.5 48-48v-41.6c0-74.2-60.2-134.4-134.4-134.4zm323-128.4l-27.8-28.1c-4.6-4.7-12.1-4.7-16.8-.1l-104.8 104-45.5-45.8c-4.6-4.7-12.1-4.7-16.8-.1l-28.1 27.9c-4.7 4.6-4.7 12.1-.1 16.8l81.7 82.3c4.6 4.7 12.1 4.7 16.8.1l141.3-140.2c4.6-4.7 4.7-12.2.1-16.8z"/></svg>`;
var EDIT = "initiative-tracker-edit";
var EDIT_ICON = `<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="far" data-icon="edit" class="svg-inline--fa fa-edit fa-w-18" role="img" viewBox="0 0 576 512"><path fill="currentColor" d="M402.3 344.9l32-32c5-5 13.7-1.5 13.7 5.7V464c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V112c0-26.5 21.5-48 48-48h273.5c7.1 0 10.7 8.6 5.7 13.7l-32 32c-1.5 1.5-3.5 2.3-5.7 2.3H48v352h352V350.5c0-2.1.8-4.1 2.3-5.6zm156.6-201.8L296.3 405.7l-90.4 10c-26.2 2.9-48.5-19.2-45.6-45.6l10-90.4L432.9 17.1c22.9-22.9 59.9-22.9 82.7 0l43.2 43.2c22.9 22.9 22.9 60 .1 82.8zM460.1 174L402 115.9 216.2 301.8l-7.3 65.3 65.3-7.3L460.1 174zm64.8-79.7l-43.2-43.2c-4.1-4.1-10.8-4.1-14.8 0L436 82l58.1 58.1 30.9-30.9c4-4.2 4-10.8-.1-14.9z"/></svg>`;
var TAG = "initiative-tracker-tags";
var TAG_ICON = `<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="tag" class="svg-inline--fa fa-tag fa-w-16" role="img" viewBox="0 0 512 512"><path fill="currentColor" d="M0 252.118V48C0 21.49 21.49 0 48 0h204.118a48 48 0 0 1 33.941 14.059l211.882 211.882c18.745 18.745 18.745 49.137 0 67.882L293.823 497.941c-18.745 18.745-49.137 18.745-67.882 0L14.059 286.059A48 48 0 0 1 0 252.118zM112 64c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48-21.49-48-48-48z"/></svg>`;
var INITIATIVE = "initiative-tracker-initiative";
var INITIATIVE_ICON = `<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="running" class="svg-inline--fa fa-running fa-w-13" role="img" viewBox="0 0 416 512"><path fill="currentColor" d="M272 96c26.51 0 48-21.49 48-48S298.51 0 272 0s-48 21.49-48 48 21.49 48 48 48zM113.69 317.47l-14.8 34.52H32c-17.67 0-32 14.33-32 32s14.33 32 32 32h77.45c19.25 0 36.58-11.44 44.11-29.09l8.79-20.52-10.67-6.3c-17.32-10.23-30.06-25.37-37.99-42.61zM384 223.99h-44.03l-26.06-53.25c-12.5-25.55-35.45-44.23-61.78-50.94l-71.08-21.14c-28.3-6.8-57.77-.55-80.84 17.14l-39.67 30.41c-14.03 10.75-16.69 30.83-5.92 44.86s30.84 16.66 44.86 5.92l39.69-30.41c7.67-5.89 17.44-8 25.27-6.14l14.7 4.37-37.46 87.39c-12.62 29.48-1.31 64.01 26.3 80.31l84.98 50.17-27.47 87.73c-5.28 16.86 4.11 34.81 20.97 40.09 3.19 1 6.41 1.48 9.58 1.48 13.61 0 26.23-8.77 30.52-22.45l31.64-101.06c5.91-20.77-2.89-43.08-21.64-54.39l-61.24-36.14 31.31-78.28 20.27 41.43c8 16.34 24.92 26.89 43.11 26.89H384c17.67 0 32-14.33 32-32s-14.33-31.99-32-31.99z"/></svg>`;
var REDO = "initiative-tracker-redo";
var REDO_ICON = `<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="redo" class="svg-inline--fa fa-redo fa-w-16" role="img" viewBox="0 0 512 512"><path fill="currentColor" d="M500.33 0h-47.41a12 12 0 0 0-12 12.57l4 82.76A247.42 247.42 0 0 0 256 8C119.34 8 7.9 119.53 8 256.19 8.1 393.07 119.1 504 256 504a247.1 247.1 0 0 0 166.18-63.91 12 12 0 0 0 .48-17.43l-34-34a12 12 0 0 0-16.38-.55A176 176 0 1 1 402.1 157.8l-101.53-4.87a12 12 0 0 0-12.57 12v47.41a12 12 0 0 0 12 12h200.33a12 12 0 0 0 12-12V12a12 12 0 0 0-12-12z"/></svg>`;
var NEW = "initiative-tracker-new";
var NEW_ICON = `<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="far" data-icon="plus-square" class="svg-inline--fa fa-plus-square fa-w-14" role="img" viewBox="0 0 448 512"><path fill="currentColor" d="M352 240v32c0 6.6-5.4 12-12 12h-88v88c0 6.6-5.4 12-12 12h-32c-6.6 0-12-5.4-12-12v-88h-88c-6.6 0-12-5.4-12-12v-32c0-6.6 5.4-12 12-12h88v-88c0-6.6 5.4-12 12-12h32c6.6 0 12 5.4 12 12v88h88c6.6 0 12 5.4 12 12zm96-160v352c0 26.5-21.5 48-48 48H48c-26.5 0-48-21.5-48-48V80c0-26.5 21.5-48 48-48h352c26.5 0 48 21.5 48 48zm-48 346V86c0-3.3-2.7-6-6-6H54c-3.3 0-6 2.7-6 6v340c0 3.3 2.7 6 6 6h340c3.3 0 6-2.7 6-6z"/></svg>`;
var DICE = "initiative-tracker-dice";
var DICE_ICON = `<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="dice" class="svg-inline--fa fa-dice fa-w-20" role="img" viewBox="0 0 640 512"><path fill="currentColor" d="M592 192H473.26c12.69 29.59 7.12 65.2-17 89.32L320 417.58V464c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48V240c0-26.51-21.49-48-48-48zM480 376c-13.25 0-24-10.75-24-24 0-13.26 10.75-24 24-24s24 10.74 24 24c0 13.25-10.75 24-24 24zm-46.37-186.7L258.7 14.37c-19.16-19.16-50.23-19.16-69.39 0L14.37 189.3c-19.16 19.16-19.16 50.23 0 69.39L189.3 433.63c19.16 19.16 50.23 19.16 69.39 0L433.63 258.7c19.16-19.17 19.16-50.24 0-69.4zM96 248c-13.25 0-24-10.75-24-24 0-13.26 10.75-24 24-24s24 10.74 24 24c0 13.25-10.75 24-24 24zm128 128c-13.25 0-24-10.75-24-24 0-13.26 10.75-24 24-24s24 10.74 24 24c0 13.25-10.75 24-24 24zm0-128c-13.25 0-24-10.75-24-24 0-13.26 10.75-24 24-24s24 10.74 24 24c0 13.25-10.75 24-24 24zm0-128c-13.25 0-24-10.75-24-24 0-13.26 10.75-24 24-24s24 10.74 24 24c0 13.25-10.75 24-24 24zm128 128c-13.25 0-24-10.75-24-24 0-13.26 10.75-24 24-24s24 10.74 24 24c0 13.25-10.75 24-24 24z"/></svg>`;
var COPY = "initiative-tracker-copy";
var COPY_ICON = `<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="far" data-icon="copy" class="svg-inline--fa fa-copy fa-w-14" role="img" viewBox="0 0 448 512"><path fill="currentColor" d="M433.941 65.941l-51.882-51.882A48 48 0 0 0 348.118 0H176c-26.51 0-48 21.49-48 48v48H48c-26.51 0-48 21.49-48 48v320c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48v-48h80c26.51 0 48-21.49 48-48V99.882a48 48 0 0 0-14.059-33.941zM266 464H54a6 6 0 0 1-6-6V150a6 6 0 0 1 6-6h74v224c0 26.51 21.49 48 48 48h96v42a6 6 0 0 1-6 6zm128-96H182a6 6 0 0 1-6-6V54a6 6 0 0 1 6-6h106v88c0 13.255 10.745 24 24 24h88v202a6 6 0 0 1-6 6zm6-256h-64V48h9.632c1.591 0 3.117.632 4.243 1.757l48.368 48.368a6 6 0 0 1 1.757 4.243V112z"/></svg>`;
var PLAYER_VIEW = "initiative-tracker-player-view";
var PLAYER_VIEW_ICON = `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><!-- Font Awesome Pro 5.15.4 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) --><path d="M416 48c0-8.84-7.16-16-16-16h-64c-8.84 0-16 7.16-16 16v48h96V48zM63.91 159.99C61.4 253.84 3.46 274.22 0 404v44c0 17.67 14.33 32 32 32h96c17.67 0 32-14.33 32-32V288h32V128H95.84c-17.63 0-31.45 14.37-31.93 31.99zm384.18 0c-.48-17.62-14.3-31.99-31.93-31.99H320v160h32v160c0 17.67 14.33 32 32 32h96c17.67 0 32-14.33 32-32v-44c-3.46-129.78-61.4-150.16-63.91-244.01zM176 32h-64c-8.84 0-16 7.16-16 16v48h96V48c0-8.84-7.16-16-16-16zm48 256h64V128h-64v160z"/></svg>`;
var BUILDER_VIEW = "intiative-tracker-encounter-builder";
var BUILDER_ICON = `<svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 576 512"><!--! Font Awesome Pro 6.2.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2022 Fonticons, Inc. --><path d="M413.5 237.5c-28.2 4.8-58.2-3.6-80-25.4l-38.1-38.1C280.4 159 272 138.8 272 117.6V105.5L192.3 62c-5.3-2.9-8.6-8.6-8.3-14.7s3.9-11.5 9.5-14l47.2-21C259.1 4.2 279 0 299.2 0h18.1c36.7 0 72 14 98.7 39.1l44.6 42c24.2 22.8 33.2 55.7 26.6 86L503 183l8-8c9.4-9.4 24.6-9.4 33.9 0l24 24c9.4 9.4 9.4 24.6 0 33.9l-88 88c-9.4 9.4-24.6 9.4-33.9 0l-24-24c-9.4-9.4-9.4-24.6 0-33.9l8-8-17.5-17.5zM27.4 377.1L260.9 182.6c3.5 4.9 7.5 9.6 11.8 14l38.1 38.1c6 6 12.4 11.2 19.2 15.7L134.9 484.6c-14.5 17.4-36 27.4-58.6 27.4C34.1 512 0 477.8 0 435.7c0-22.6 10.1-44.1 27.4-58.6z"/></svg>`;

// src/utils/index.ts
var convertFraction = (s) => {
  if (typeof s == "number")
    return s;
  if (!s || s == "undefined" || !s.length)
    return 0;
  let split = s.split("/");
  if (split.length == 1) {
    if (isNaN(Number(s))) {
      return 0;
    }
    return Number(s);
  }
  return Number(split[0]) / Number(split[1]);
};

// src/settings/settings.ts
var import_obsidian8 = require("obsidian");

// src/utils/suggester.ts
var import_obsidian3 = require("obsidian");

// node_modules/@popperjs/core/lib/enums.js
var top = "top";
var bottom = "bottom";
var right = "right";
var left = "left";
var auto = "auto";
var basePlacements = [top, bottom, right, left];
var start = "start";
var end = "end";
var clippingParents = "clippingParents";
var viewport = "viewport";
var popper = "popper";
var reference = "reference";
var variationPlacements = /* @__PURE__ */ basePlacements.reduce(function(acc, placement) {
  return acc.concat([placement + "-" + start, placement + "-" + end]);
}, []);
var placements = /* @__PURE__ */ [].concat(basePlacements, [auto]).reduce(function(acc, placement) {
  return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
}, []);
var beforeRead = "beforeRead";
var read = "read";
var afterRead = "afterRead";
var beforeMain = "beforeMain";
var main = "main";
var afterMain = "afterMain";
var beforeWrite = "beforeWrite";
var write = "write";
var afterWrite = "afterWrite";
var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

// node_modules/@popperjs/core/lib/dom-utils/getNodeName.js
function getNodeName(element2) {
  return element2 ? (element2.nodeName || "").toLowerCase() : null;
}

// node_modules/@popperjs/core/lib/dom-utils/getWindow.js
function getWindow(node) {
  if (node == null) {
    return window;
  }
  if (node.toString() !== "[object Window]") {
    var ownerDocument = node.ownerDocument;
    return ownerDocument ? ownerDocument.defaultView || window : window;
  }
  return node;
}

// node_modules/@popperjs/core/lib/dom-utils/instanceOf.js
function isElement(node) {
  var OwnElement = getWindow(node).Element;
  return node instanceof OwnElement || node instanceof Element;
}
function isHTMLElement(node) {
  var OwnElement = getWindow(node).HTMLElement;
  return node instanceof OwnElement || node instanceof HTMLElement;
}
function isShadowRoot(node) {
  if (typeof ShadowRoot === "undefined") {
    return false;
  }
  var OwnElement = getWindow(node).ShadowRoot;
  return node instanceof OwnElement || node instanceof ShadowRoot;
}

// node_modules/@popperjs/core/lib/modifiers/applyStyles.js
function applyStyles(_ref) {
  var state = _ref.state;
  Object.keys(state.elements).forEach(function(name2) {
    var style = state.styles[name2] || {};
    var attributes = state.attributes[name2] || {};
    var element2 = state.elements[name2];
    if (!isHTMLElement(element2) || !getNodeName(element2)) {
      return;
    }
    Object.assign(element2.style, style);
    Object.keys(attributes).forEach(function(name3) {
      var value = attributes[name3];
      if (value === false) {
        element2.removeAttribute(name3);
      } else {
        element2.setAttribute(name3, value === true ? "" : value);
      }
    });
  });
}
function effect(_ref2) {
  var state = _ref2.state;
  var initialStyles = {
    popper: {
      position: state.options.strategy,
      left: "0",
      top: "0",
      margin: "0"
    },
    arrow: {
      position: "absolute"
    },
    reference: {}
  };
  Object.assign(state.elements.popper.style, initialStyles.popper);
  state.styles = initialStyles;
  if (state.elements.arrow) {
    Object.assign(state.elements.arrow.style, initialStyles.arrow);
  }
  return function() {
    Object.keys(state.elements).forEach(function(name2) {
      var element2 = state.elements[name2];
      var attributes = state.attributes[name2] || {};
      var styleProperties = Object.keys(state.styles.hasOwnProperty(name2) ? state.styles[name2] : initialStyles[name2]);
      var style = styleProperties.reduce(function(style2, property) {
        style2[property] = "";
        return style2;
      }, {});
      if (!isHTMLElement(element2) || !getNodeName(element2)) {
        return;
      }
      Object.assign(element2.style, style);
      Object.keys(attributes).forEach(function(attribute) {
        element2.removeAttribute(attribute);
      });
    });
  };
}
var applyStyles_default = {
  name: "applyStyles",
  enabled: true,
  phase: "write",
  fn: applyStyles,
  effect,
  requires: ["computeStyles"]
};

// node_modules/@popperjs/core/lib/utils/getBasePlacement.js
function getBasePlacement(placement) {
  return placement.split("-")[0];
}

// node_modules/@popperjs/core/lib/utils/math.js
var max = Math.max;
var min = Math.min;
var round = Math.round;

// node_modules/@popperjs/core/lib/utils/userAgent.js
function getUAString() {
  var uaData = navigator.userAgentData;
  if (uaData != null && uaData.brands) {
    return uaData.brands.map(function(item) {
      return item.brand + "/" + item.version;
    }).join(" ");
  }
  return navigator.userAgent;
}

// node_modules/@popperjs/core/lib/dom-utils/isLayoutViewport.js
function isLayoutViewport() {
  return !/^((?!chrome|android).)*safari/i.test(getUAString());
}

// node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js
function getBoundingClientRect(element2, includeScale, isFixedStrategy) {
  if (includeScale === void 0) {
    includeScale = false;
  }
  if (isFixedStrategy === void 0) {
    isFixedStrategy = false;
  }
  var clientRect = element2.getBoundingClientRect();
  var scaleX = 1;
  var scaleY = 1;
  if (includeScale && isHTMLElement(element2)) {
    scaleX = element2.offsetWidth > 0 ? round(clientRect.width) / element2.offsetWidth || 1 : 1;
    scaleY = element2.offsetHeight > 0 ? round(clientRect.height) / element2.offsetHeight || 1 : 1;
  }
  var _ref = isElement(element2) ? getWindow(element2) : window, visualViewport = _ref.visualViewport;
  var addVisualOffsets = !isLayoutViewport() && isFixedStrategy;
  var x = (clientRect.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX;
  var y = (clientRect.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY;
  var width = clientRect.width / scaleX;
  var height = clientRect.height / scaleY;
  return {
    width,
    height,
    top: y,
    right: x + width,
    bottom: y + height,
    left: x,
    x,
    y
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js
function getLayoutRect(element2) {
  var clientRect = getBoundingClientRect(element2);
  var width = element2.offsetWidth;
  var height = element2.offsetHeight;
  if (Math.abs(clientRect.width - width) <= 1) {
    width = clientRect.width;
  }
  if (Math.abs(clientRect.height - height) <= 1) {
    height = clientRect.height;
  }
  return {
    x: element2.offsetLeft,
    y: element2.offsetTop,
    width,
    height
  };
}

// node_modules/@popperjs/core/lib/dom-utils/contains.js
function contains(parent, child) {
  var rootNode = child.getRootNode && child.getRootNode();
  if (parent.contains(child)) {
    return true;
  } else if (rootNode && isShadowRoot(rootNode)) {
    var next2 = child;
    do {
      if (next2 && parent.isSameNode(next2)) {
        return true;
      }
      next2 = next2.parentNode || next2.host;
    } while (next2);
  }
  return false;
}

// node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js
function getComputedStyle2(element2) {
  return getWindow(element2).getComputedStyle(element2);
}

// node_modules/@popperjs/core/lib/dom-utils/isTableElement.js
function isTableElement(element2) {
  return ["table", "td", "th"].indexOf(getNodeName(element2)) >= 0;
}

// node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js
function getDocumentElement(element2) {
  return ((isElement(element2) ? element2.ownerDocument : element2.document) || window.document).documentElement;
}

// node_modules/@popperjs/core/lib/dom-utils/getParentNode.js
function getParentNode(element2) {
  if (getNodeName(element2) === "html") {
    return element2;
  }
  return element2.assignedSlot || element2.parentNode || (isShadowRoot(element2) ? element2.host : null) || getDocumentElement(element2);
}

// node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js
function getTrueOffsetParent(element2) {
  if (!isHTMLElement(element2) || getComputedStyle2(element2).position === "fixed") {
    return null;
  }
  return element2.offsetParent;
}
function getContainingBlock(element2) {
  var isFirefox = /firefox/i.test(getUAString());
  var isIE = /Trident/i.test(getUAString());
  if (isIE && isHTMLElement(element2)) {
    var elementCss = getComputedStyle2(element2);
    if (elementCss.position === "fixed") {
      return null;
    }
  }
  var currentNode = getParentNode(element2);
  if (isShadowRoot(currentNode)) {
    currentNode = currentNode.host;
  }
  while (isHTMLElement(currentNode) && ["html", "body"].indexOf(getNodeName(currentNode)) < 0) {
    var css = getComputedStyle2(currentNode);
    if (css.transform !== "none" || css.perspective !== "none" || css.contain === "paint" || ["transform", "perspective"].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === "filter" || isFirefox && css.filter && css.filter !== "none") {
      return currentNode;
    } else {
      currentNode = currentNode.parentNode;
    }
  }
  return null;
}
function getOffsetParent(element2) {
  var window2 = getWindow(element2);
  var offsetParent = getTrueOffsetParent(element2);
  while (offsetParent && isTableElement(offsetParent) && getComputedStyle2(offsetParent).position === "static") {
    offsetParent = getTrueOffsetParent(offsetParent);
  }
  if (offsetParent && (getNodeName(offsetParent) === "html" || getNodeName(offsetParent) === "body" && getComputedStyle2(offsetParent).position === "static")) {
    return window2;
  }
  return offsetParent || getContainingBlock(element2) || window2;
}

// node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js
function getMainAxisFromPlacement(placement) {
  return ["top", "bottom"].indexOf(placement) >= 0 ? "x" : "y";
}

// node_modules/@popperjs/core/lib/utils/within.js
function within(min2, value, max2) {
  return max(min2, min(value, max2));
}
function withinMaxClamp(min2, value, max2) {
  var v = within(min2, value, max2);
  return v > max2 ? max2 : v;
}

// node_modules/@popperjs/core/lib/utils/getFreshSideObject.js
function getFreshSideObject() {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  };
}

// node_modules/@popperjs/core/lib/utils/mergePaddingObject.js
function mergePaddingObject(paddingObject) {
  return Object.assign({}, getFreshSideObject(), paddingObject);
}

// node_modules/@popperjs/core/lib/utils/expandToHashMap.js
function expandToHashMap(value, keys) {
  return keys.reduce(function(hashMap, key) {
    hashMap[key] = value;
    return hashMap;
  }, {});
}

// node_modules/@popperjs/core/lib/modifiers/arrow.js
var toPaddingObject = function toPaddingObject2(padding, state) {
  padding = typeof padding === "function" ? padding(Object.assign({}, state.rects, {
    placement: state.placement
  })) : padding;
  return mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
};
function arrow(_ref) {
  var _state$modifiersData$;
  var state = _ref.state, name2 = _ref.name, options = _ref.options;
  var arrowElement = state.elements.arrow;
  var popperOffsets2 = state.modifiersData.popperOffsets;
  var basePlacement = getBasePlacement(state.placement);
  var axis = getMainAxisFromPlacement(basePlacement);
  var isVertical = [left, right].indexOf(basePlacement) >= 0;
  var len = isVertical ? "height" : "width";
  if (!arrowElement || !popperOffsets2) {
    return;
  }
  var paddingObject = toPaddingObject(options.padding, state);
  var arrowRect = getLayoutRect(arrowElement);
  var minProp = axis === "y" ? top : left;
  var maxProp = axis === "y" ? bottom : right;
  var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets2[axis] - state.rects.popper[len];
  var startDiff = popperOffsets2[axis] - state.rects.reference[axis];
  var arrowOffsetParent = getOffsetParent(arrowElement);
  var clientSize = arrowOffsetParent ? axis === "y" ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
  var centerToReference = endDiff / 2 - startDiff / 2;
  var min2 = paddingObject[minProp];
  var max2 = clientSize - arrowRect[len] - paddingObject[maxProp];
  var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
  var offset2 = within(min2, center, max2);
  var axisProp = axis;
  state.modifiersData[name2] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset2, _state$modifiersData$.centerOffset = offset2 - center, _state$modifiersData$);
}
function effect2(_ref2) {
  var state = _ref2.state, options = _ref2.options;
  var _options$element = options.element, arrowElement = _options$element === void 0 ? "[data-popper-arrow]" : _options$element;
  if (arrowElement == null) {
    return;
  }
  if (typeof arrowElement === "string") {
    arrowElement = state.elements.popper.querySelector(arrowElement);
    if (!arrowElement) {
      return;
    }
  }
  if (true) {
    if (!isHTMLElement(arrowElement)) {
      console.error(['Popper: "arrow" element must be an HTMLElement (not an SVGElement).', "To use an SVG arrow, wrap it in an HTMLElement that will be used as", "the arrow."].join(" "));
    }
  }
  if (!contains(state.elements.popper, arrowElement)) {
    if (true) {
      console.error(['Popper: "arrow" modifier\'s `element` must be a child of the popper', "element."].join(" "));
    }
    return;
  }
  state.elements.arrow = arrowElement;
}
var arrow_default = {
  name: "arrow",
  enabled: true,
  phase: "main",
  fn: arrow,
  effect: effect2,
  requires: ["popperOffsets"],
  requiresIfExists: ["preventOverflow"]
};

// node_modules/@popperjs/core/lib/utils/getVariation.js
function getVariation(placement) {
  return placement.split("-")[1];
}

// node_modules/@popperjs/core/lib/modifiers/computeStyles.js
var unsetSides = {
  top: "auto",
  right: "auto",
  bottom: "auto",
  left: "auto"
};
function roundOffsetsByDPR(_ref) {
  var x = _ref.x, y = _ref.y;
  var win = window;
  var dpr = win.devicePixelRatio || 1;
  return {
    x: round(x * dpr) / dpr || 0,
    y: round(y * dpr) / dpr || 0
  };
}
function mapToStyles(_ref2) {
  var _Object$assign2;
  var popper2 = _ref2.popper, popperRect = _ref2.popperRect, placement = _ref2.placement, variation = _ref2.variation, offsets = _ref2.offsets, position = _ref2.position, gpuAcceleration = _ref2.gpuAcceleration, adaptive = _ref2.adaptive, roundOffsets = _ref2.roundOffsets, isFixed = _ref2.isFixed;
  var _offsets$x = offsets.x, x = _offsets$x === void 0 ? 0 : _offsets$x, _offsets$y = offsets.y, y = _offsets$y === void 0 ? 0 : _offsets$y;
  var _ref3 = typeof roundOffsets === "function" ? roundOffsets({
    x,
    y
  }) : {
    x,
    y
  };
  x = _ref3.x;
  y = _ref3.y;
  var hasX = offsets.hasOwnProperty("x");
  var hasY = offsets.hasOwnProperty("y");
  var sideX = left;
  var sideY = top;
  var win = window;
  if (adaptive) {
    var offsetParent = getOffsetParent(popper2);
    var heightProp = "clientHeight";
    var widthProp = "clientWidth";
    if (offsetParent === getWindow(popper2)) {
      offsetParent = getDocumentElement(popper2);
      if (getComputedStyle2(offsetParent).position !== "static" && position === "absolute") {
        heightProp = "scrollHeight";
        widthProp = "scrollWidth";
      }
    }
    offsetParent = offsetParent;
    if (placement === top || (placement === left || placement === right) && variation === end) {
      sideY = bottom;
      var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : offsetParent[heightProp];
      y -= offsetY - popperRect.height;
      y *= gpuAcceleration ? 1 : -1;
    }
    if (placement === left || (placement === top || placement === bottom) && variation === end) {
      sideX = right;
      var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : offsetParent[widthProp];
      x -= offsetX - popperRect.width;
      x *= gpuAcceleration ? 1 : -1;
    }
  }
  var commonStyles = Object.assign({
    position
  }, adaptive && unsetSides);
  var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
    x,
    y
  }) : {
    x,
    y
  };
  x = _ref4.x;
  y = _ref4.y;
  if (gpuAcceleration) {
    var _Object$assign;
    return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? "0" : "", _Object$assign[sideX] = hasX ? "0" : "", _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
  }
  return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : "", _Object$assign2[sideX] = hasX ? x + "px" : "", _Object$assign2.transform = "", _Object$assign2));
}
function computeStyles(_ref5) {
  var state = _ref5.state, options = _ref5.options;
  var _options$gpuAccelerat = options.gpuAcceleration, gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat, _options$adaptive = options.adaptive, adaptive = _options$adaptive === void 0 ? true : _options$adaptive, _options$roundOffsets = options.roundOffsets, roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
  if (true) {
    var transitionProperty = getComputedStyle2(state.elements.popper).transitionProperty || "";
    if (adaptive && ["transform", "top", "right", "bottom", "left"].some(function(property) {
      return transitionProperty.indexOf(property) >= 0;
    })) {
      console.warn(["Popper: Detected CSS transitions on at least one of the following", 'CSS properties: "transform", "top", "right", "bottom", "left".', "\n\n", 'Disable the "computeStyles" modifier\'s `adaptive` option to allow', "for smooth transitions, or remove these properties from the CSS", "transition declaration on the popper element if only transitioning", "opacity or background-color for example.", "\n\n", "We recommend using the popper element as a wrapper around an inner", "element that can have any CSS property transitioned for animations."].join(" "));
    }
  }
  var commonStyles = {
    placement: getBasePlacement(state.placement),
    variation: getVariation(state.placement),
    popper: state.elements.popper,
    popperRect: state.rects.popper,
    gpuAcceleration,
    isFixed: state.options.strategy === "fixed"
  };
  if (state.modifiersData.popperOffsets != null) {
    state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.popperOffsets,
      position: state.options.strategy,
      adaptive,
      roundOffsets
    })));
  }
  if (state.modifiersData.arrow != null) {
    state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.arrow,
      position: "absolute",
      adaptive: false,
      roundOffsets
    })));
  }
  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    "data-popper-placement": state.placement
  });
}
var computeStyles_default = {
  name: "computeStyles",
  enabled: true,
  phase: "beforeWrite",
  fn: computeStyles,
  data: {}
};

// node_modules/@popperjs/core/lib/modifiers/eventListeners.js
var passive = {
  passive: true
};
function effect3(_ref) {
  var state = _ref.state, instance40 = _ref.instance, options = _ref.options;
  var _options$scroll = options.scroll, scroll = _options$scroll === void 0 ? true : _options$scroll, _options$resize = options.resize, resize = _options$resize === void 0 ? true : _options$resize;
  var window2 = getWindow(state.elements.popper);
  var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);
  if (scroll) {
    scrollParents.forEach(function(scrollParent) {
      scrollParent.addEventListener("scroll", instance40.update, passive);
    });
  }
  if (resize) {
    window2.addEventListener("resize", instance40.update, passive);
  }
  return function() {
    if (scroll) {
      scrollParents.forEach(function(scrollParent) {
        scrollParent.removeEventListener("scroll", instance40.update, passive);
      });
    }
    if (resize) {
      window2.removeEventListener("resize", instance40.update, passive);
    }
  };
}
var eventListeners_default = {
  name: "eventListeners",
  enabled: true,
  phase: "write",
  fn: function fn() {
  },
  effect: effect3,
  data: {}
};

// node_modules/@popperjs/core/lib/utils/getOppositePlacement.js
var hash = {
  left: "right",
  right: "left",
  bottom: "top",
  top: "bottom"
};
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, function(matched) {
    return hash[matched];
  });
}

// node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js
var hash2 = {
  start: "end",
  end: "start"
};
function getOppositeVariationPlacement(placement) {
  return placement.replace(/start|end/g, function(matched) {
    return hash2[matched];
  });
}

// node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js
function getWindowScroll(node) {
  var win = getWindow(node);
  var scrollLeft = win.pageXOffset;
  var scrollTop = win.pageYOffset;
  return {
    scrollLeft,
    scrollTop
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js
function getWindowScrollBarX(element2) {
  return getBoundingClientRect(getDocumentElement(element2)).left + getWindowScroll(element2).scrollLeft;
}

// node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js
function getViewportRect(element2, strategy) {
  var win = getWindow(element2);
  var html = getDocumentElement(element2);
  var visualViewport = win.visualViewport;
  var width = html.clientWidth;
  var height = html.clientHeight;
  var x = 0;
  var y = 0;
  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height;
    var layoutViewport = isLayoutViewport();
    if (layoutViewport || !layoutViewport && strategy === "fixed") {
      x = visualViewport.offsetLeft;
      y = visualViewport.offsetTop;
    }
  }
  return {
    width,
    height,
    x: x + getWindowScrollBarX(element2),
    y
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js
function getDocumentRect(element2) {
  var _element$ownerDocumen;
  var html = getDocumentElement(element2);
  var winScroll = getWindowScroll(element2);
  var body = (_element$ownerDocumen = element2.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
  var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
  var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
  var x = -winScroll.scrollLeft + getWindowScrollBarX(element2);
  var y = -winScroll.scrollTop;
  if (getComputedStyle2(body || html).direction === "rtl") {
    x += max(html.clientWidth, body ? body.clientWidth : 0) - width;
  }
  return {
    width,
    height,
    x,
    y
  };
}

// node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js
function isScrollParent(element2) {
  var _getComputedStyle = getComputedStyle2(element2), overflow = _getComputedStyle.overflow, overflowX = _getComputedStyle.overflowX, overflowY = _getComputedStyle.overflowY;
  return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
}

// node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js
function getScrollParent(node) {
  if (["html", "body", "#document"].indexOf(getNodeName(node)) >= 0) {
    return node.ownerDocument.body;
  }
  if (isHTMLElement(node) && isScrollParent(node)) {
    return node;
  }
  return getScrollParent(getParentNode(node));
}

// node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js
function listScrollParents(element2, list) {
  var _element$ownerDocumen;
  if (list === void 0) {
    list = [];
  }
  var scrollParent = getScrollParent(element2);
  var isBody = scrollParent === ((_element$ownerDocumen = element2.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
  var win = getWindow(scrollParent);
  var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
  var updatedList = list.concat(target);
  return isBody ? updatedList : updatedList.concat(listScrollParents(getParentNode(target)));
}

// node_modules/@popperjs/core/lib/utils/rectToClientRect.js
function rectToClientRect(rect) {
  return Object.assign({}, rect, {
    left: rect.x,
    top: rect.y,
    right: rect.x + rect.width,
    bottom: rect.y + rect.height
  });
}

// node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js
function getInnerBoundingClientRect(element2, strategy) {
  var rect = getBoundingClientRect(element2, false, strategy === "fixed");
  rect.top = rect.top + element2.clientTop;
  rect.left = rect.left + element2.clientLeft;
  rect.bottom = rect.top + element2.clientHeight;
  rect.right = rect.left + element2.clientWidth;
  rect.width = element2.clientWidth;
  rect.height = element2.clientHeight;
  rect.x = rect.left;
  rect.y = rect.top;
  return rect;
}
function getClientRectFromMixedType(element2, clippingParent, strategy) {
  return clippingParent === viewport ? rectToClientRect(getViewportRect(element2, strategy)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent, strategy) : rectToClientRect(getDocumentRect(getDocumentElement(element2)));
}
function getClippingParents(element2) {
  var clippingParents2 = listScrollParents(getParentNode(element2));
  var canEscapeClipping = ["absolute", "fixed"].indexOf(getComputedStyle2(element2).position) >= 0;
  var clipperElement = canEscapeClipping && isHTMLElement(element2) ? getOffsetParent(element2) : element2;
  if (!isElement(clipperElement)) {
    return [];
  }
  return clippingParents2.filter(function(clippingParent) {
    return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== "body";
  });
}
function getClippingRect(element2, boundary, rootBoundary, strategy) {
  var mainClippingParents = boundary === "clippingParents" ? getClippingParents(element2) : [].concat(boundary);
  var clippingParents2 = [].concat(mainClippingParents, [rootBoundary]);
  var firstClippingParent = clippingParents2[0];
  var clippingRect = clippingParents2.reduce(function(accRect, clippingParent) {
    var rect = getClientRectFromMixedType(element2, clippingParent, strategy);
    accRect.top = max(rect.top, accRect.top);
    accRect.right = min(rect.right, accRect.right);
    accRect.bottom = min(rect.bottom, accRect.bottom);
    accRect.left = max(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromMixedType(element2, firstClippingParent, strategy));
  clippingRect.width = clippingRect.right - clippingRect.left;
  clippingRect.height = clippingRect.bottom - clippingRect.top;
  clippingRect.x = clippingRect.left;
  clippingRect.y = clippingRect.top;
  return clippingRect;
}

// node_modules/@popperjs/core/lib/utils/computeOffsets.js
function computeOffsets(_ref) {
  var reference2 = _ref.reference, element2 = _ref.element, placement = _ref.placement;
  var basePlacement = placement ? getBasePlacement(placement) : null;
  var variation = placement ? getVariation(placement) : null;
  var commonX = reference2.x + reference2.width / 2 - element2.width / 2;
  var commonY = reference2.y + reference2.height / 2 - element2.height / 2;
  var offsets;
  switch (basePlacement) {
    case top:
      offsets = {
        x: commonX,
        y: reference2.y - element2.height
      };
      break;
    case bottom:
      offsets = {
        x: commonX,
        y: reference2.y + reference2.height
      };
      break;
    case right:
      offsets = {
        x: reference2.x + reference2.width,
        y: commonY
      };
      break;
    case left:
      offsets = {
        x: reference2.x - element2.width,
        y: commonY
      };
      break;
    default:
      offsets = {
        x: reference2.x,
        y: reference2.y
      };
  }
  var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;
  if (mainAxis != null) {
    var len = mainAxis === "y" ? "height" : "width";
    switch (variation) {
      case start:
        offsets[mainAxis] = offsets[mainAxis] - (reference2[len] / 2 - element2[len] / 2);
        break;
      case end:
        offsets[mainAxis] = offsets[mainAxis] + (reference2[len] / 2 - element2[len] / 2);
        break;
      default:
    }
  }
  return offsets;
}

// node_modules/@popperjs/core/lib/utils/detectOverflow.js
function detectOverflow(state, options) {
  if (options === void 0) {
    options = {};
  }
  var _options = options, _options$placement = _options.placement, placement = _options$placement === void 0 ? state.placement : _options$placement, _options$strategy = _options.strategy, strategy = _options$strategy === void 0 ? state.strategy : _options$strategy, _options$boundary = _options.boundary, boundary = _options$boundary === void 0 ? clippingParents : _options$boundary, _options$rootBoundary = _options.rootBoundary, rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary, _options$elementConte = _options.elementContext, elementContext = _options$elementConte === void 0 ? popper : _options$elementConte, _options$altBoundary = _options.altBoundary, altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary, _options$padding = _options.padding, padding = _options$padding === void 0 ? 0 : _options$padding;
  var paddingObject = mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
  var altContext = elementContext === popper ? reference : popper;
  var popperRect = state.rects.popper;
  var element2 = state.elements[altBoundary ? altContext : elementContext];
  var clippingClientRect = getClippingRect(isElement(element2) ? element2 : element2.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary, strategy);
  var referenceClientRect = getBoundingClientRect(state.elements.reference);
  var popperOffsets2 = computeOffsets({
    reference: referenceClientRect,
    element: popperRect,
    strategy: "absolute",
    placement
  });
  var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets2));
  var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect;
  var overflowOffsets = {
    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
    right: elementClientRect.right - clippingClientRect.right + paddingObject.right
  };
  var offsetData = state.modifiersData.offset;
  if (elementContext === popper && offsetData) {
    var offset2 = offsetData[placement];
    Object.keys(overflowOffsets).forEach(function(key) {
      var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
      var axis = [top, bottom].indexOf(key) >= 0 ? "y" : "x";
      overflowOffsets[key] += offset2[axis] * multiply;
    });
  }
  return overflowOffsets;
}

// node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js
function computeAutoPlacement(state, options) {
  if (options === void 0) {
    options = {};
  }
  var _options = options, placement = _options.placement, boundary = _options.boundary, rootBoundary = _options.rootBoundary, padding = _options.padding, flipVariations = _options.flipVariations, _options$allowedAutoP = _options.allowedAutoPlacements, allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
  var variation = getVariation(placement);
  var placements2 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function(placement2) {
    return getVariation(placement2) === variation;
  }) : basePlacements;
  var allowedPlacements = placements2.filter(function(placement2) {
    return allowedAutoPlacements.indexOf(placement2) >= 0;
  });
  if (allowedPlacements.length === 0) {
    allowedPlacements = placements2;
    if (true) {
      console.error(["Popper: The `allowedAutoPlacements` option did not allow any", "placements. Ensure the `placement` option matches the variation", "of the allowed placements.", 'For example, "auto" cannot be used to allow "bottom-start".', 'Use "auto-start" instead.'].join(" "));
    }
  }
  var overflows = allowedPlacements.reduce(function(acc, placement2) {
    acc[placement2] = detectOverflow(state, {
      placement: placement2,
      boundary,
      rootBoundary,
      padding
    })[getBasePlacement(placement2)];
    return acc;
  }, {});
  return Object.keys(overflows).sort(function(a, b) {
    return overflows[a] - overflows[b];
  });
}

// node_modules/@popperjs/core/lib/modifiers/flip.js
function getExpandedFallbackPlacements(placement) {
  if (getBasePlacement(placement) === auto) {
    return [];
  }
  var oppositePlacement = getOppositePlacement(placement);
  return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
}
function flip(_ref) {
  var state = _ref.state, options = _ref.options, name2 = _ref.name;
  if (state.modifiersData[name2]._skip) {
    return;
  }
  var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis, specifiedFallbackPlacements = options.fallbackPlacements, padding = options.padding, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, _options$flipVariatio = options.flipVariations, flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio, allowedAutoPlacements = options.allowedAutoPlacements;
  var preferredPlacement = state.options.placement;
  var basePlacement = getBasePlacement(preferredPlacement);
  var isBasePlacement = basePlacement === preferredPlacement;
  var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
  var placements2 = [preferredPlacement].concat(fallbackPlacements).reduce(function(acc, placement2) {
    return acc.concat(getBasePlacement(placement2) === auto ? computeAutoPlacement(state, {
      placement: placement2,
      boundary,
      rootBoundary,
      padding,
      flipVariations,
      allowedAutoPlacements
    }) : placement2);
  }, []);
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var checksMap = /* @__PURE__ */ new Map();
  var makeFallbackChecks = true;
  var firstFittingPlacement = placements2[0];
  for (var i = 0; i < placements2.length; i++) {
    var placement = placements2[i];
    var _basePlacement = getBasePlacement(placement);
    var isStartVariation = getVariation(placement) === start;
    var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
    var len = isVertical ? "width" : "height";
    var overflow = detectOverflow(state, {
      placement,
      boundary,
      rootBoundary,
      altBoundary,
      padding
    });
    var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;
    if (referenceRect[len] > popperRect[len]) {
      mainVariationSide = getOppositePlacement(mainVariationSide);
    }
    var altVariationSide = getOppositePlacement(mainVariationSide);
    var checks = [];
    if (checkMainAxis) {
      checks.push(overflow[_basePlacement] <= 0);
    }
    if (checkAltAxis) {
      checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
    }
    if (checks.every(function(check) {
      return check;
    })) {
      firstFittingPlacement = placement;
      makeFallbackChecks = false;
      break;
    }
    checksMap.set(placement, checks);
  }
  if (makeFallbackChecks) {
    var numberOfChecks = flipVariations ? 3 : 1;
    var _loop = function _loop2(_i2) {
      var fittingPlacement = placements2.find(function(placement2) {
        var checks2 = checksMap.get(placement2);
        if (checks2) {
          return checks2.slice(0, _i2).every(function(check) {
            return check;
          });
        }
      });
      if (fittingPlacement) {
        firstFittingPlacement = fittingPlacement;
        return "break";
      }
    };
    for (var _i = numberOfChecks; _i > 0; _i--) {
      var _ret = _loop(_i);
      if (_ret === "break")
        break;
    }
  }
  if (state.placement !== firstFittingPlacement) {
    state.modifiersData[name2]._skip = true;
    state.placement = firstFittingPlacement;
    state.reset = true;
  }
}
var flip_default = {
  name: "flip",
  enabled: true,
  phase: "main",
  fn: flip,
  requiresIfExists: ["offset"],
  data: {
    _skip: false
  }
};

// node_modules/@popperjs/core/lib/modifiers/hide.js
function getSideOffsets(overflow, rect, preventedOffsets) {
  if (preventedOffsets === void 0) {
    preventedOffsets = {
      x: 0,
      y: 0
    };
  }
  return {
    top: overflow.top - rect.height - preventedOffsets.y,
    right: overflow.right - rect.width + preventedOffsets.x,
    bottom: overflow.bottom - rect.height + preventedOffsets.y,
    left: overflow.left - rect.width - preventedOffsets.x
  };
}
function isAnySideFullyClipped(overflow) {
  return [top, right, bottom, left].some(function(side) {
    return overflow[side] >= 0;
  });
}
function hide(_ref) {
  var state = _ref.state, name2 = _ref.name;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var preventedOffsets = state.modifiersData.preventOverflow;
  var referenceOverflow = detectOverflow(state, {
    elementContext: "reference"
  });
  var popperAltOverflow = detectOverflow(state, {
    altBoundary: true
  });
  var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
  var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
  var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
  var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
  state.modifiersData[name2] = {
    referenceClippingOffsets,
    popperEscapeOffsets,
    isReferenceHidden,
    hasPopperEscaped
  };
  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    "data-popper-reference-hidden": isReferenceHidden,
    "data-popper-escaped": hasPopperEscaped
  });
}
var hide_default = {
  name: "hide",
  enabled: true,
  phase: "main",
  requiresIfExists: ["preventOverflow"],
  fn: hide
};

// node_modules/@popperjs/core/lib/modifiers/offset.js
function distanceAndSkiddingToXY(placement, rects, offset2) {
  var basePlacement = getBasePlacement(placement);
  var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;
  var _ref = typeof offset2 === "function" ? offset2(Object.assign({}, rects, {
    placement
  })) : offset2, skidding = _ref[0], distance = _ref[1];
  skidding = skidding || 0;
  distance = (distance || 0) * invertDistance;
  return [left, right].indexOf(basePlacement) >= 0 ? {
    x: distance,
    y: skidding
  } : {
    x: skidding,
    y: distance
  };
}
function offset(_ref2) {
  var state = _ref2.state, options = _ref2.options, name2 = _ref2.name;
  var _options$offset = options.offset, offset2 = _options$offset === void 0 ? [0, 0] : _options$offset;
  var data = placements.reduce(function(acc, placement) {
    acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset2);
    return acc;
  }, {});
  var _data$state$placement = data[state.placement], x = _data$state$placement.x, y = _data$state$placement.y;
  if (state.modifiersData.popperOffsets != null) {
    state.modifiersData.popperOffsets.x += x;
    state.modifiersData.popperOffsets.y += y;
  }
  state.modifiersData[name2] = data;
}
var offset_default = {
  name: "offset",
  enabled: true,
  phase: "main",
  requires: ["popperOffsets"],
  fn: offset
};

// node_modules/@popperjs/core/lib/modifiers/popperOffsets.js
function popperOffsets(_ref) {
  var state = _ref.state, name2 = _ref.name;
  state.modifiersData[name2] = computeOffsets({
    reference: state.rects.reference,
    element: state.rects.popper,
    strategy: "absolute",
    placement: state.placement
  });
}
var popperOffsets_default = {
  name: "popperOffsets",
  enabled: true,
  phase: "read",
  fn: popperOffsets,
  data: {}
};

// node_modules/@popperjs/core/lib/utils/getAltAxis.js
function getAltAxis(axis) {
  return axis === "x" ? "y" : "x";
}

// node_modules/@popperjs/core/lib/modifiers/preventOverflow.js
function preventOverflow(_ref) {
  var state = _ref.state, options = _ref.options, name2 = _ref.name;
  var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, padding = options.padding, _options$tether = options.tether, tether = _options$tether === void 0 ? true : _options$tether, _options$tetherOffset = options.tetherOffset, tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
  var overflow = detectOverflow(state, {
    boundary,
    rootBoundary,
    padding,
    altBoundary
  });
  var basePlacement = getBasePlacement(state.placement);
  var variation = getVariation(state.placement);
  var isBasePlacement = !variation;
  var mainAxis = getMainAxisFromPlacement(basePlacement);
  var altAxis = getAltAxis(mainAxis);
  var popperOffsets2 = state.modifiersData.popperOffsets;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var tetherOffsetValue = typeof tetherOffset === "function" ? tetherOffset(Object.assign({}, state.rects, {
    placement: state.placement
  })) : tetherOffset;
  var normalizedTetherOffsetValue = typeof tetherOffsetValue === "number" ? {
    mainAxis: tetherOffsetValue,
    altAxis: tetherOffsetValue
  } : Object.assign({
    mainAxis: 0,
    altAxis: 0
  }, tetherOffsetValue);
  var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
  var data = {
    x: 0,
    y: 0
  };
  if (!popperOffsets2) {
    return;
  }
  if (checkMainAxis) {
    var _offsetModifierState$;
    var mainSide = mainAxis === "y" ? top : left;
    var altSide = mainAxis === "y" ? bottom : right;
    var len = mainAxis === "y" ? "height" : "width";
    var offset2 = popperOffsets2[mainAxis];
    var min2 = offset2 + overflow[mainSide];
    var max2 = offset2 - overflow[altSide];
    var additive = tether ? -popperRect[len] / 2 : 0;
    var minLen = variation === start ? referenceRect[len] : popperRect[len];
    var maxLen = variation === start ? -popperRect[len] : -referenceRect[len];
    var arrowElement = state.elements.arrow;
    var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
      width: 0,
      height: 0
    };
    var arrowPaddingObject = state.modifiersData["arrow#persistent"] ? state.modifiersData["arrow#persistent"].padding : getFreshSideObject();
    var arrowPaddingMin = arrowPaddingObject[mainSide];
    var arrowPaddingMax = arrowPaddingObject[altSide];
    var arrowLen = within(0, referenceRect[len], arrowRect[len]);
    var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
    var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
    var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
    var clientOffset = arrowOffsetParent ? mainAxis === "y" ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
    var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
    var tetherMin = offset2 + minOffset - offsetModifierValue - clientOffset;
    var tetherMax = offset2 + maxOffset - offsetModifierValue;
    var preventedOffset = within(tether ? min(min2, tetherMin) : min2, offset2, tether ? max(max2, tetherMax) : max2);
    popperOffsets2[mainAxis] = preventedOffset;
    data[mainAxis] = preventedOffset - offset2;
  }
  if (checkAltAxis) {
    var _offsetModifierState$2;
    var _mainSide = mainAxis === "x" ? top : left;
    var _altSide = mainAxis === "x" ? bottom : right;
    var _offset = popperOffsets2[altAxis];
    var _len = altAxis === "y" ? "height" : "width";
    var _min = _offset + overflow[_mainSide];
    var _max = _offset - overflow[_altSide];
    var isOriginSide = [top, left].indexOf(basePlacement) !== -1;
    var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;
    var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;
    var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;
    var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);
    popperOffsets2[altAxis] = _preventedOffset;
    data[altAxis] = _preventedOffset - _offset;
  }
  state.modifiersData[name2] = data;
}
var preventOverflow_default = {
  name: "preventOverflow",
  enabled: true,
  phase: "main",
  fn: preventOverflow,
  requiresIfExists: ["offset"]
};

// node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js
function getHTMLElementScroll(element2) {
  return {
    scrollLeft: element2.scrollLeft,
    scrollTop: element2.scrollTop
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js
function getNodeScroll(node) {
  if (node === getWindow(node) || !isHTMLElement(node)) {
    return getWindowScroll(node);
  } else {
    return getHTMLElementScroll(node);
  }
}

// node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js
function isElementScaled(element2) {
  var rect = element2.getBoundingClientRect();
  var scaleX = round(rect.width) / element2.offsetWidth || 1;
  var scaleY = round(rect.height) / element2.offsetHeight || 1;
  return scaleX !== 1 || scaleY !== 1;
}
function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
  if (isFixed === void 0) {
    isFixed = false;
  }
  var isOffsetParentAnElement = isHTMLElement(offsetParent);
  var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);
  var documentElement = getDocumentElement(offsetParent);
  var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled, isFixed);
  var scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  var offsets = {
    x: 0,
    y: 0
  };
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== "body" || isScrollParent(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isHTMLElement(offsetParent)) {
      offsets = getBoundingClientRect(offsetParent, true);
      offsets.x += offsetParent.clientLeft;
      offsets.y += offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = getWindowScrollBarX(documentElement);
    }
  }
  return {
    x: rect.left + scroll.scrollLeft - offsets.x,
    y: rect.top + scroll.scrollTop - offsets.y,
    width: rect.width,
    height: rect.height
  };
}

// node_modules/@popperjs/core/lib/utils/orderModifiers.js
function order(modifiers) {
  var map = /* @__PURE__ */ new Map();
  var visited = /* @__PURE__ */ new Set();
  var result = [];
  modifiers.forEach(function(modifier2) {
    map.set(modifier2.name, modifier2);
  });
  function sort(modifier2) {
    visited.add(modifier2.name);
    var requires = [].concat(modifier2.requires || [], modifier2.requiresIfExists || []);
    requires.forEach(function(dep) {
      if (!visited.has(dep)) {
        var depModifier = map.get(dep);
        if (depModifier) {
          sort(depModifier);
        }
      }
    });
    result.push(modifier2);
  }
  modifiers.forEach(function(modifier2) {
    if (!visited.has(modifier2.name)) {
      sort(modifier2);
    }
  });
  return result;
}
function orderModifiers(modifiers) {
  var orderedModifiers = order(modifiers);
  return modifierPhases.reduce(function(acc, phase) {
    return acc.concat(orderedModifiers.filter(function(modifier2) {
      return modifier2.phase === phase;
    }));
  }, []);
}

// node_modules/@popperjs/core/lib/utils/debounce.js
function debounce(fn2) {
  var pending;
  return function() {
    if (!pending) {
      pending = new Promise(function(resolve) {
        Promise.resolve().then(function() {
          pending = void 0;
          resolve(fn2());
        });
      });
    }
    return pending;
  };
}

// node_modules/@popperjs/core/lib/utils/format.js
function format(str) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }
  return [].concat(args).reduce(function(p, c) {
    return p.replace(/%s/, c);
  }, str);
}

// node_modules/@popperjs/core/lib/utils/validateModifiers.js
var INVALID_MODIFIER_ERROR = 'Popper: modifier "%s" provided an invalid %s property, expected %s but got %s';
var MISSING_DEPENDENCY_ERROR = 'Popper: modifier "%s" requires "%s", but "%s" modifier is not available';
var VALID_PROPERTIES = ["name", "enabled", "phase", "fn", "effect", "requires", "options"];
function validateModifiers(modifiers) {
  modifiers.forEach(function(modifier2) {
    [].concat(Object.keys(modifier2), VALID_PROPERTIES).filter(function(value, index, self2) {
      return self2.indexOf(value) === index;
    }).forEach(function(key) {
      switch (key) {
        case "name":
          if (typeof modifier2.name !== "string") {
            console.error(format(INVALID_MODIFIER_ERROR, String(modifier2.name), '"name"', '"string"', '"' + String(modifier2.name) + '"'));
          }
          break;
        case "enabled":
          if (typeof modifier2.enabled !== "boolean") {
            console.error(format(INVALID_MODIFIER_ERROR, modifier2.name, '"enabled"', '"boolean"', '"' + String(modifier2.enabled) + '"'));
          }
          break;
        case "phase":
          if (modifierPhases.indexOf(modifier2.phase) < 0) {
            console.error(format(INVALID_MODIFIER_ERROR, modifier2.name, '"phase"', "either " + modifierPhases.join(", "), '"' + String(modifier2.phase) + '"'));
          }
          break;
        case "fn":
          if (typeof modifier2.fn !== "function") {
            console.error(format(INVALID_MODIFIER_ERROR, modifier2.name, '"fn"', '"function"', '"' + String(modifier2.fn) + '"'));
          }
          break;
        case "effect":
          if (modifier2.effect != null && typeof modifier2.effect !== "function") {
            console.error(format(INVALID_MODIFIER_ERROR, modifier2.name, '"effect"', '"function"', '"' + String(modifier2.fn) + '"'));
          }
          break;
        case "requires":
          if (modifier2.requires != null && !Array.isArray(modifier2.requires)) {
            console.error(format(INVALID_MODIFIER_ERROR, modifier2.name, '"requires"', '"array"', '"' + String(modifier2.requires) + '"'));
          }
          break;
        case "requiresIfExists":
          if (!Array.isArray(modifier2.requiresIfExists)) {
            console.error(format(INVALID_MODIFIER_ERROR, modifier2.name, '"requiresIfExists"', '"array"', '"' + String(modifier2.requiresIfExists) + '"'));
          }
          break;
        case "options":
        case "data":
          break;
        default:
          console.error('PopperJS: an invalid property has been provided to the "' + modifier2.name + '" modifier, valid properties are ' + VALID_PROPERTIES.map(function(s) {
            return '"' + s + '"';
          }).join(", ") + '; but "' + key + '" was provided.');
      }
      modifier2.requires && modifier2.requires.forEach(function(requirement) {
        if (modifiers.find(function(mod) {
          return mod.name === requirement;
        }) == null) {
          console.error(format(MISSING_DEPENDENCY_ERROR, String(modifier2.name), requirement, requirement));
        }
      });
    });
  });
}

// node_modules/@popperjs/core/lib/utils/uniqueBy.js
function uniqueBy(arr, fn2) {
  var identifiers = /* @__PURE__ */ new Set();
  return arr.filter(function(item) {
    var identifier = fn2(item);
    if (!identifiers.has(identifier)) {
      identifiers.add(identifier);
      return true;
    }
  });
}

// node_modules/@popperjs/core/lib/utils/mergeByName.js
function mergeByName(modifiers) {
  var merged = modifiers.reduce(function(merged2, current) {
    var existing = merged2[current.name];
    merged2[current.name] = existing ? Object.assign({}, existing, current, {
      options: Object.assign({}, existing.options, current.options),
      data: Object.assign({}, existing.data, current.data)
    }) : current;
    return merged2;
  }, {});
  return Object.keys(merged).map(function(key) {
    return merged[key];
  });
}

// node_modules/@popperjs/core/lib/createPopper.js
var INVALID_ELEMENT_ERROR = "Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.";
var INFINITE_LOOP_ERROR = "Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.";
var DEFAULT_OPTIONS = {
  placement: "bottom",
  modifiers: [],
  strategy: "absolute"
};
function areValidElements() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  return !args.some(function(element2) {
    return !(element2 && typeof element2.getBoundingClientRect === "function");
  });
}
function popperGenerator(generatorOptions) {
  if (generatorOptions === void 0) {
    generatorOptions = {};
  }
  var _generatorOptions = generatorOptions, _generatorOptions$def = _generatorOptions.defaultModifiers, defaultModifiers2 = _generatorOptions$def === void 0 ? [] : _generatorOptions$def, _generatorOptions$def2 = _generatorOptions.defaultOptions, defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
  return function createPopper2(reference2, popper2, options) {
    if (options === void 0) {
      options = defaultOptions;
    }
    var state = {
      placement: "bottom",
      orderedModifiers: [],
      options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
      modifiersData: {},
      elements: {
        reference: reference2,
        popper: popper2
      },
      attributes: {},
      styles: {}
    };
    var effectCleanupFns = [];
    var isDestroyed = false;
    var instance40 = {
      state,
      setOptions: function setOptions(setOptionsAction) {
        var options2 = typeof setOptionsAction === "function" ? setOptionsAction(state.options) : setOptionsAction;
        cleanupModifierEffects();
        state.options = Object.assign({}, defaultOptions, state.options, options2);
        state.scrollParents = {
          reference: isElement(reference2) ? listScrollParents(reference2) : reference2.contextElement ? listScrollParents(reference2.contextElement) : [],
          popper: listScrollParents(popper2)
        };
        var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers2, state.options.modifiers)));
        state.orderedModifiers = orderedModifiers.filter(function(m) {
          return m.enabled;
        });
        if (true) {
          var modifiers = uniqueBy([].concat(orderedModifiers, state.options.modifiers), function(_ref) {
            var name2 = _ref.name;
            return name2;
          });
          validateModifiers(modifiers);
          if (getBasePlacement(state.options.placement) === auto) {
            var flipModifier = state.orderedModifiers.find(function(_ref2) {
              var name2 = _ref2.name;
              return name2 === "flip";
            });
            if (!flipModifier) {
              console.error(['Popper: "auto" placements require the "flip" modifier be', "present and enabled to work."].join(" "));
            }
          }
          var _getComputedStyle = getComputedStyle2(popper2), marginTop = _getComputedStyle.marginTop, marginRight = _getComputedStyle.marginRight, marginBottom = _getComputedStyle.marginBottom, marginLeft = _getComputedStyle.marginLeft;
          if ([marginTop, marginRight, marginBottom, marginLeft].some(function(margin) {
            return parseFloat(margin);
          })) {
            console.warn(['Popper: CSS "margin" styles cannot be used to apply padding', "between the popper and its reference element or boundary.", "To replicate margin, use the `offset` modifier, as well as", "the `padding` option in the `preventOverflow` and `flip`", "modifiers."].join(" "));
          }
        }
        runModifierEffects();
        return instance40.update();
      },
      forceUpdate: function forceUpdate() {
        if (isDestroyed) {
          return;
        }
        var _state$elements = state.elements, reference3 = _state$elements.reference, popper3 = _state$elements.popper;
        if (!areValidElements(reference3, popper3)) {
          if (true) {
            console.error(INVALID_ELEMENT_ERROR);
          }
          return;
        }
        state.rects = {
          reference: getCompositeRect(reference3, getOffsetParent(popper3), state.options.strategy === "fixed"),
          popper: getLayoutRect(popper3)
        };
        state.reset = false;
        state.placement = state.options.placement;
        state.orderedModifiers.forEach(function(modifier2) {
          return state.modifiersData[modifier2.name] = Object.assign({}, modifier2.data);
        });
        var __debug_loops__ = 0;
        for (var index = 0; index < state.orderedModifiers.length; index++) {
          if (true) {
            __debug_loops__ += 1;
            if (__debug_loops__ > 100) {
              console.error(INFINITE_LOOP_ERROR);
              break;
            }
          }
          if (state.reset === true) {
            state.reset = false;
            index = -1;
            continue;
          }
          var _state$orderedModifie = state.orderedModifiers[index], fn2 = _state$orderedModifie.fn, _state$orderedModifie2 = _state$orderedModifie.options, _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2, name2 = _state$orderedModifie.name;
          if (typeof fn2 === "function") {
            state = fn2({
              state,
              options: _options,
              name: name2,
              instance: instance40
            }) || state;
          }
        }
      },
      update: debounce(function() {
        return new Promise(function(resolve) {
          instance40.forceUpdate();
          resolve(state);
        });
      }),
      destroy: function destroy() {
        cleanupModifierEffects();
        isDestroyed = true;
      }
    };
    if (!areValidElements(reference2, popper2)) {
      if (true) {
        console.error(INVALID_ELEMENT_ERROR);
      }
      return instance40;
    }
    instance40.setOptions(options).then(function(state2) {
      if (!isDestroyed && options.onFirstUpdate) {
        options.onFirstUpdate(state2);
      }
    });
    function runModifierEffects() {
      state.orderedModifiers.forEach(function(_ref3) {
        var name2 = _ref3.name, _ref3$options = _ref3.options, options2 = _ref3$options === void 0 ? {} : _ref3$options, effect4 = _ref3.effect;
        if (typeof effect4 === "function") {
          var cleanupFn = effect4({
            state,
            name: name2,
            instance: instance40,
            options: options2
          });
          var noopFn = function noopFn2() {
          };
          effectCleanupFns.push(cleanupFn || noopFn);
        }
      });
    }
    function cleanupModifierEffects() {
      effectCleanupFns.forEach(function(fn2) {
        return fn2();
      });
      effectCleanupFns = [];
    }
    return instance40;
  };
}

// node_modules/@popperjs/core/lib/popper.js
var defaultModifiers = [eventListeners_default, popperOffsets_default, computeStyles_default, applyStyles_default, offset_default, flip_default, preventOverflow_default, arrow_default, hide_default];
var createPopper = /* @__PURE__ */ popperGenerator({
  defaultModifiers
});

// src/utils/suggester.ts
var Suggester = class {
  constructor(owner, containerEl, scope) {
    this.containerEl = containerEl;
    this.owner = owner;
    containerEl.on(
      "click",
      ".suggestion-item",
      this.onSuggestionClick.bind(this)
    );
    containerEl.on(
      "mousemove",
      ".suggestion-item",
      this.onSuggestionMouseover.bind(this)
    );
    scope.register([], "ArrowUp", () => {
      this.setSelectedItem(this.selectedItem - 1, true);
      return false;
    });
    scope.register([], "ArrowDown", () => {
      this.setSelectedItem(this.selectedItem + 1, true);
      return false;
    });
    scope.register([], "Enter", (evt) => {
      this.useSelectedItem(evt);
      return false;
    });
    scope.register([], "Tab", (evt) => {
      this.useSelectedItem(evt);
      return false;
    });
  }
  chooseSuggestion(evt) {
    if (!this.items || !this.items.length)
      return;
    const currentValue = this.items[this.selectedItem];
    if (currentValue) {
      this.owner.selectSuggestion(currentValue, evt);
    }
  }
  onSuggestionClick(event, el) {
    event.preventDefault();
    if (!this.suggestions || !this.suggestions.length)
      return;
    const item = this.suggestions.indexOf(el);
    this.setSelectedItem(item, false);
    this.useSelectedItem(event);
  }
  onSuggestionMouseover(event, el) {
    if (!this.suggestions || !this.suggestions.length)
      return;
    const item = this.suggestions.indexOf(el);
    this.setSelectedItem(item, false);
  }
  empty() {
    this.containerEl.empty();
  }
  setSuggestions(items) {
    this.containerEl.empty();
    const els = [];
    items.forEach((item) => {
      const suggestionEl = this.containerEl.createDiv("suggestion-item");
      this.owner.renderSuggestion(item, suggestionEl);
      els.push(suggestionEl);
    });
    this.items = items;
    this.suggestions = els;
    this.setSelectedItem(0, false);
  }
  useSelectedItem(event) {
    if (!this.items || !this.items.length)
      return;
    const currentValue = this.items[this.selectedItem];
    if (currentValue) {
      this.owner.selectSuggestion(currentValue, event);
    }
  }
  wrap(value, size2) {
    return (value % size2 + size2) % size2;
  }
  setSelectedItem(index, scroll) {
    const nIndex = this.wrap(index, this.suggestions.length);
    const prev = this.suggestions[this.selectedItem];
    const next2 = this.suggestions[nIndex];
    if (prev)
      prev.removeClass("is-selected");
    if (next2)
      next2.addClass("is-selected");
    this.selectedItem = nIndex;
    if (scroll) {
      next2.scrollIntoView(false);
    }
  }
};
var SuggestionModal = class extends import_obsidian3.FuzzySuggestModal {
  constructor(app2, inputEl) {
    super(app2);
    this.items = [];
    this.scope = new import_obsidian3.Scope();
    this.emptyStateText = "No match found";
    this.limit = 25;
    this.inputEl = inputEl;
    this.suggestEl = createDiv({
      attr: { style: "min-width: 475px;" },
      cls: "suggestion-container"
    });
    this.contentEl = this.suggestEl.createDiv("suggestion");
    this.suggester = new Suggester(this, this.contentEl, this.scope);
    this.scope.register([], "Escape", this.close.bind(this));
    this.inputEl.addEventListener("input", this.onInputChanged.bind(this));
    this.inputEl.addEventListener("focus", this.onInputChanged.bind(this));
    this.inputEl.addEventListener("blur", this.close.bind(this));
    this.suggestEl.on(
      "mousedown",
      ".suggestion-container",
      (event) => {
        event.preventDefault();
      }
    );
  }
  empty() {
    this.suggester.empty();
  }
  onInputChanged() {
    const inputStr = this.modifyInput(this.inputEl.value);
    const suggestions = this.getSuggestions(inputStr);
    if (suggestions.length > 0) {
      this.suggester.setSuggestions(suggestions.slice(0, this.limit));
    } else {
      this.onNoSuggestion();
    }
    this.open();
  }
  modifyInput(input) {
    return input;
  }
  onNoSuggestion() {
    this.empty();
    this.renderSuggestion(
      null,
      this.contentEl.createDiv("suggestion-item")
    );
  }
  open() {
    this.app.keymap.pushScope(this.scope);
    document.body.appendChild(this.suggestEl);
    this.popper = createPopper(this.inputEl, this.suggestEl, {
      placement: "auto-start",
      modifiers: [
        {
          name: "offset",
          options: {
            offset: [0, 10]
          }
        },
        {
          name: "flip",
          options: {
            allowedAutoPlacements: ["top-start", "bottom-start"]
          }
        }
      ]
    });
  }
  close() {
    this.app.keymap.popScope(this.scope);
    this.suggester.setSuggestions([]);
    if (this.popper) {
      this.popper.destroy();
    }
    this.suggestEl.detach();
  }
  createPrompt(prompts) {
    if (!this.promptEl)
      this.promptEl = this.suggestEl.createDiv("prompt-instructions");
    let prompt = this.promptEl.createDiv("prompt-instruction");
    for (let p of prompts) {
      prompt.appendChild(p);
    }
  }
};
var FileSuggestionModal = class extends SuggestionModal {
  constructor(app2, input) {
    super(app2, input.inputEl);
    this.files = this.app.vault.getMarkdownFiles();
    this.text = input;
    this.createPrompts();
    this.inputEl.addEventListener("input", this.getItem.bind(this));
  }
  createPrompts() {
  }
  getItem() {
    const v = this.inputEl.value, file = this.items.find((file2) => file2.name === v.trim());
    if (file == this.file)
      return;
    this.file = file;
    if (this.items)
      this.onInputChanged();
  }
  getItemText(item) {
    return item.name;
  }
  onChooseItem(item) {
    this.text.setValue(item.name);
    this.file = item;
  }
  selectSuggestion({ item }) {
    this.text.setValue(item.basename);
    this.file = item;
    this.onClose();
    this.close();
  }
  renderSuggestion(result, el) {
    let { item, match: matches } = result || {};
    let content = el.createDiv({
      cls: "suggestion-content icon"
    });
    if (!item) {
      this.suggester.selectedItem = null;
      content.setText(this.emptyStateText);
      content.parentElement.addClass("is-selected");
      return;
    }
    const matchElements = matches.matches.map((m) => {
      return createSpan("suggestion-highlight");
    });
    for (let i = 0; i < item.basename.length; i++) {
      let match = matches.matches.find((m) => m[0] === i);
      if (match) {
        let element2 = matchElements[matches.matches.indexOf(match)];
        content.appendChild(element2);
        element2.appendText(item.basename.substring(match[0], match[1]));
        i += match[1] - match[0] - 1;
        continue;
      }
      content.appendText(item.basename[i]);
    }
    let path = item.path.split("/").slice(0, -1).join("/");
    if (path.length) {
      path += "/";
    }
    el.createDiv({
      cls: "suggestion-note",
      text: path
    });
  }
  getItems() {
    return this.files;
  }
};
var SRDMonsterSuggestionModal = class extends SuggestionModal {
  constructor(plugin, inputEl) {
    super(plugin.app, inputEl);
    this.plugin = plugin;
    this.creatures = [...this.plugin.data.players, ...this.plugin.bestiary];
  }
  getItems() {
    return this.creatures;
  }
  getItemText(item) {
    return item.name;
  }
  onChooseItem(item) {
    this.inputEl.value = item.name;
    this.creature = item;
    this.onClose();
    this.close();
  }
  selectSuggestion({ item }) {
    this.inputEl.value = item.name;
    this.creature = item;
    this.onClose();
    this.close();
  }
  renderSuggestion(result, el) {
    let { item, match: matches } = result || {};
    let content = el.createDiv({
      cls: "suggestion-content icon"
    });
    if (!item) {
      this.suggester.selectedItem = null;
      content.setText(this.emptyStateText);
      content.parentElement.addClass("is-selected");
      return;
    }
    const matchElements = matches.matches.map((m) => {
      return createSpan("suggestion-highlight");
    });
    for (let i = 0; i < item.name.length; i++) {
      let match = matches.matches.find((m) => m[0] === i);
      if (match) {
        let element2 = matchElements[matches.matches.indexOf(match)];
        content.appendChild(element2);
        element2.appendText(item.name.substring(match[0], match[1]));
        i += match[1] - match[0] - 1;
        continue;
      }
      content.appendText(item.name[i]);
    }
    el.createDiv({
      cls: "suggestion-note",
      text: [item.source].flat().join(", ")
    });
  }
};
var ConditionSuggestionModal = class extends SuggestionModal {
  constructor(plugin, inputEl) {
    super(plugin.app, inputEl);
    this.plugin = plugin;
    this.items = [];
    this.items = this.plugin.data.statuses;
    this.suggestEl.style.removeProperty("min-width");
    this.onInputChanged();
  }
  getItemText(item) {
    return item.name;
  }
  getItems() {
    return this.items;
  }
  onChooseItem(item) {
    this.inputEl.value = item.name;
    this.condition = item;
  }
  onNoSuggestion() {
    this.empty();
    this.renderSuggestion(
      null,
      this.contentEl.createDiv("suggestion-item")
    );
    this.condition = null;
  }
  selectSuggestion({ item }) {
    if (this.condition !== null) {
      this.inputEl.value = item.name;
      this.condition = item;
    } else {
      this.condition = {
        name: this.inputEl.value,
        description: ""
      };
    }
    this.onClose();
    this.close();
  }
  renderSuggestion(result, el) {
    let { item, match: matches } = result || {};
    let content = new import_obsidian3.Setting(el);
    if (!item) {
      content.nameEl.setText(this.emptyStateText);
      this.condition = null;
      return;
    }
    const matchElements = matches.matches.map((m) => {
      return createSpan("suggestion-highlight");
    });
    for (let i = 0; i < item.name.length; i++) {
      let match = matches.matches.find((m) => m[0] === i);
      if (match) {
        let element2 = matchElements[matches.matches.indexOf(match)];
        content.nameEl.appendChild(element2);
        element2.appendText(item.name.substring(match[0], match[1]));
        i += match[1] - match[0] - 1;
        continue;
      }
      content.nameEl.appendText(item.name[i]);
    }
  }
};
var PlayerSuggestionModal = class extends SuggestionModal {
  constructor(plugin, input, party) {
    super(plugin.app, input.inputEl);
    this.plugin = plugin;
    this.party = party;
    this.items = this.plugin.data.players;
    this.text = input;
    this.createPrompts();
    this.inputEl.addEventListener("input", this.getItem.bind(this));
    this.inputEl.addEventListener("focus", this.onInputChanged.bind(this));
  }
  createPrompts() {
  }
  getItem() {
    const v = this.inputEl.value, file = this.items.find((file2) => file2.name === v.trim());
    if (file == this.player)
      return;
    this.player = file;
    if (this.items)
      this.onInputChanged();
  }
  getItemText(item) {
    return item.name;
  }
  onChooseItem(item) {
    this.text.setValue(item.name);
    this.player = item;
  }
  selectSuggestion({ item }) {
    this.text.setValue(item.name);
    this.player = item;
    this.onClose();
    this.close();
  }
  renderSuggestion(result, el) {
    let { item, match: matches } = result || {};
    let content = el.createDiv({
      cls: "suggestion-content icon"
    });
    if (!item) {
      this.suggester.selectedItem = null;
      content.setText(this.emptyStateText);
      content.parentElement.addClass("is-selected");
      return;
    }
    const matchElements = matches.matches.map((m) => {
      return createSpan("suggestion-highlight");
    });
    for (let i = 0; i < item.name.length; i++) {
      let match = matches.matches.find((m) => m[0] === i);
      if (match) {
        let element2 = matchElements[matches.matches.indexOf(match)];
        content.appendChild(element2);
        element2.appendText(item.name.substring(match[0], match[1]));
        i += match[1] - match[0] - 1;
        continue;
      }
      content.appendText(item.name[i]);
    }
  }
  getItems() {
    return this.items.filter((p) => !this.party.players.includes(p.name));
  }
};
var FolderSuggestionModal = class extends SuggestionModal {
  constructor(app2, input, items) {
    super(app2, input.inputEl);
    this.folders = [...items];
    this.text = input;
    this.inputEl.addEventListener("input", () => this.getFolder());
  }
  getFolder() {
    const v = this.inputEl.value, folder = this.app.vault.getAbstractFileByPath(v);
    if (folder == this.folder)
      return;
    if (!(folder instanceof import_obsidian3.TFolder))
      return;
    this.folder = folder;
    this.onInputChanged();
  }
  getItemText(item) {
    return item.path;
  }
  onChooseItem(item) {
    this.text.setValue(item.path);
    this.folder = item;
  }
  selectSuggestion({ item }) {
    let link = item.path;
    this.text.setValue(link);
    this.onClose();
    this.close();
  }
  renderSuggestion(result, el) {
    let { item, match: matches } = result || {};
    let content = el.createDiv({
      cls: "suggestion-content"
    });
    if (!item) {
      content.setText(this.emptyStateText);
      content.parentElement.addClass("is-selected");
      return;
    }
    let pathLength = item.path.length - item.name.length;
    const matchElements = matches.matches.map((m) => {
      return createSpan("suggestion-highlight");
    });
    for (let i = pathLength; i < item.path.length; i++) {
      let match = matches.matches.find((m) => m[0] === i);
      if (match) {
        let element2 = matchElements[matches.matches.indexOf(match)];
        content.appendChild(element2);
        element2.appendText(item.path.substring(match[0], match[1]));
        i += match[1] - match[0] - 1;
        continue;
      }
      content.appendText(item.path[i]);
    }
    el.createDiv({
      cls: "suggestion-note",
      text: item.path
    });
  }
  getItems() {
    return this.folders;
  }
};

// src/settings/settings.ts
var import_obsidian9 = require("obsidian");

// src/utils/creature.ts
function getId() {
  return "ID_xyxyxyxyxyxy".replace(/[xy]/g, function(c) {
    var r = Math.random() * 16 | 0, v = c == "x" ? r : r & 3 | 8;
    return v.toString(16);
  });
}
var Creature = class {
  constructor(creature, initiative = 0) {
    this.creature = creature;
    this.enabled = true;
    this.hidden = false;
    this.status = /* @__PURE__ */ new Set();
    this.viewing = false;
    this.number = 0;
    this.friendly = false;
    this.name = creature.name;
    this.display = creature.display;
    this._initiative = "initiative" in creature ? creature.initiative : Number(initiative ?? 0);
    this.modifier = Number(creature.modifier ?? 0);
    this.max = creature.hp ? Number(creature.hp) : void 0;
    this.ac = creature.ac ? Number(creature.ac) : void 0;
    this.note = creature.note;
    this.level = creature.level;
    this.player = creature.player;
    this.marker = creature.marker;
    this.hp = this.max;
    this.temp = 0;
    this.source = creature.source;
    this.friendly = creature.friendly ?? this.friendly;
    this.active = creature.active;
    this.hidden = creature.hidden ?? false;
    if ("xp" in creature) {
      this.xp = creature.xp;
    } else if ("cr" in creature) {
      this.xp = XP_PER_CR[`${creature.cr}`];
    }
    this.id = creature.id ?? getId();
    if ("statblock-link" in creature) {
      this["statblock-link"] = creature["statblock-link"];
    }
  }
  get hpDisplay() {
    if (this.max) {
      const tempMods = this.temp > 0 ? `aria-label="Temp HP: ${this.temp}" style="font-weight:bold"` : "";
      return `
                <span ${tempMods}>${this.hp + this.temp}</span><span>/${this.max}</span>
            `;
    }
    return DEFAULT_UNDEFINED;
  }
  get initiative() {
    return this._initiative + this.modifier;
  }
  set initiative(x) {
    this._initiative = Number(x) - this.modifier;
  }
  getName() {
    let name2 = [this.display ?? this.name];
    if (this.number > 0) {
      name2.push(`${this.number}`);
    }
    return name2.join(" ");
  }
  *[Symbol.iterator]() {
    yield this.name;
    yield this.initiative;
    yield this.modifier;
    yield this.max;
    yield this.ac;
    yield this.note;
    yield this.id;
    yield this.marker;
    yield this.xp;
    yield this.hidden;
  }
  static new(creature) {
    return new Creature(
      {
        ...creature,
        id: getId()
      },
      creature._initiative
    );
  }
  static from(creature) {
    const modifier2 = "modifier" in creature ? creature.modifier : Math.floor(
      (("stats" in creature && creature.stats.length > 1 ? creature.stats[1] : 10) - 10) / 2
    );
    return new Creature({
      ...creature,
      modifier: modifier2
    });
  }
  update(creature) {
    this.name = creature.name;
    this.modifier = Number(creature.modifier ?? 0);
    this.max = creature.hp ? Number(creature.hp) : void 0;
    if (this.hp > this.max)
      this.hp = this.max;
    this.ac = creature.ac ? Number(creature.ac) : void 0;
    this.note = creature.note;
    this.level = creature.level;
    this.player = creature.player;
    this.marker = creature.marker;
    this.source = creature.source;
  }
  toProperties() {
    return { ...this };
  }
  toJSON() {
    return {
      name: this.name,
      initiative: this.initiative - this.modifier,
      modifier: this.modifier,
      hp: this.max,
      ac: this.ac,
      note: this.note,
      id: this.id,
      marker: this.marker,
      currentHP: this.hp,
      tempHP: this.temp,
      status: Array.from(this.status).map((c) => c.name),
      enabled: this.enabled,
      level: this.level,
      player: this.player,
      xp: this.xp,
      active: this.active,
      hidden: this.hidden,
      friendly: this.friendly,
      "statblock-link": this["statblock-link"]
    };
  }
  static fromJSON(state) {
    const creature = new Creature(state, state.initiative);
    creature.enabled = state.enabled;
    creature.temp = state.tempHP ? state.tempHP : 0;
    creature.hp = state.currentHP;
    let statuses = [];
    for (const status of state.status) {
      const existing = Conditions.find(({ name: name2 }) => status == name2);
      if (existing) {
        statuses.push(existing);
      } else {
        statuses.push({
          name: status,
          description: null
        });
      }
    }
    creature.status = new Set(statuses);
    creature.active = state.active;
    return creature;
  }
};

// node_modules/svelte/internal/index.mjs
function noop() {
}
var identity = (x) => x;
function assign(tar, src) {
  for (const k in src)
    tar[k] = src[k];
  return tar;
}
function run(fn2) {
  return fn2();
}
function blank_object() {
  return /* @__PURE__ */ Object.create(null);
}
function run_all(fns) {
  fns.forEach(run);
}
function is_function(thing) {
  return typeof thing === "function";
}
function safe_not_equal(a, b) {
  return a != a ? b == b : a !== b || (a && typeof a === "object" || typeof a === "function");
}
function is_empty(obj) {
  return Object.keys(obj).length === 0;
}
function subscribe(store, ...callbacks) {
  if (store == null) {
    return noop;
  }
  const unsub = store.subscribe(...callbacks);
  return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
}
function get_store_value(store) {
  let value;
  subscribe(store, (_) => value = _)();
  return value;
}
function component_subscribe(component, store, callback) {
  component.$$.on_destroy.push(subscribe(store, callback));
}
function create_slot(definition, ctx, $$scope, fn2) {
  if (definition) {
    const slot_ctx = get_slot_context(definition, ctx, $$scope, fn2);
    return definition[0](slot_ctx);
  }
}
function get_slot_context(definition, ctx, $$scope, fn2) {
  return definition[1] && fn2 ? assign($$scope.ctx.slice(), definition[1](fn2(ctx))) : $$scope.ctx;
}
function get_slot_changes(definition, $$scope, dirty, fn2) {
  if (definition[2] && fn2) {
    const lets = definition[2](fn2(dirty));
    if ($$scope.dirty === void 0) {
      return lets;
    }
    if (typeof lets === "object") {
      const merged = [];
      const len = Math.max($$scope.dirty.length, lets.length);
      for (let i = 0; i < len; i += 1) {
        merged[i] = $$scope.dirty[i] | lets[i];
      }
      return merged;
    }
    return $$scope.dirty | lets;
  }
  return $$scope.dirty;
}
function update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {
  if (slot_changes) {
    const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);
    slot.p(slot_context, slot_changes);
  }
}
function get_all_dirty_from_scope($$scope) {
  if ($$scope.ctx.length > 32) {
    const dirty = [];
    const length = $$scope.ctx.length / 32;
    for (let i = 0; i < length; i++) {
      dirty[i] = -1;
    }
    return dirty;
  }
  return -1;
}
function exclude_internal_props(props) {
  const result = {};
  for (const k in props)
    if (k[0] !== "$")
      result[k] = props[k];
  return result;
}
function null_to_empty(value) {
  return value == null ? "" : value;
}
function set_store_value(store, ret, value) {
  store.set(value);
  return ret;
}
function action_destroyer(action_result) {
  return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;
}
var is_client = typeof window !== "undefined";
var now = is_client ? () => window.performance.now() : () => Date.now();
var raf = is_client ? (cb) => requestAnimationFrame(cb) : noop;
var tasks = /* @__PURE__ */ new Set();
function run_tasks(now2) {
  tasks.forEach((task) => {
    if (!task.c(now2)) {
      tasks.delete(task);
      task.f();
    }
  });
  if (tasks.size !== 0)
    raf(run_tasks);
}
function loop(callback) {
  let task;
  if (tasks.size === 0)
    raf(run_tasks);
  return {
    promise: new Promise((fulfill) => {
      tasks.add(task = { c: callback, f: fulfill });
    }),
    abort() {
      tasks.delete(task);
    }
  };
}
var is_hydrating = false;
function start_hydrating() {
  is_hydrating = true;
}
function end_hydrating() {
  is_hydrating = false;
}
function append(target, node) {
  target.appendChild(node);
}
function append_styles(target, style_sheet_id, styles) {
  const append_styles_to = get_root_for_style(target);
  if (!append_styles_to.getElementById(style_sheet_id)) {
    const style = element("style");
    style.id = style_sheet_id;
    style.textContent = styles;
    append_stylesheet(append_styles_to, style);
  }
}
function get_root_for_style(node) {
  if (!node)
    return document;
  const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;
  if (root && root.host) {
    return root;
  }
  return node.ownerDocument;
}
function append_empty_stylesheet(node) {
  const style_element = element("style");
  append_stylesheet(get_root_for_style(node), style_element);
  return style_element.sheet;
}
function append_stylesheet(node, style) {
  append(node.head || node, style);
  return style.sheet;
}
function insert(target, node, anchor) {
  target.insertBefore(node, anchor || null);
}
function detach(node) {
  if (node.parentNode) {
    node.parentNode.removeChild(node);
  }
}
function destroy_each(iterations, detaching) {
  for (let i = 0; i < iterations.length; i += 1) {
    if (iterations[i])
      iterations[i].d(detaching);
  }
}
function element(name2) {
  return document.createElement(name2);
}
function svg_element(name2) {
  return document.createElementNS("http://www.w3.org/2000/svg", name2);
}
function text(data) {
  return document.createTextNode(data);
}
function space() {
  return text(" ");
}
function empty() {
  return text("");
}
function listen(node, event, handler, options) {
  node.addEventListener(event, handler, options);
  return () => node.removeEventListener(event, handler, options);
}
function stop_propagation(fn2) {
  return function(event) {
    event.stopPropagation();
    return fn2.call(this, event);
  };
}
function self(fn2) {
  return function(event) {
    if (event.target === this)
      fn2.call(this, event);
  };
}
function attr(node, attribute, value) {
  if (value == null)
    node.removeAttribute(attribute);
  else if (node.getAttribute(attribute) !== value)
    node.setAttribute(attribute, value);
}
function set_svg_attributes(node, attributes) {
  for (const key in attributes) {
    attr(node, key, attributes[key]);
  }
}
function to_number(value) {
  return value === "" ? null : +value;
}
function children(element2) {
  return Array.from(element2.childNodes);
}
function set_data(text2, data) {
  data = "" + data;
  if (text2.wholeText !== data)
    text2.data = data;
}
function set_input_value(input, value) {
  input.value = value == null ? "" : value;
}
function set_style(node, key, value, important) {
  if (value === null) {
    node.style.removeProperty(key);
  } else {
    node.style.setProperty(key, value, important ? "important" : "");
  }
}
function toggle_class(element2, name2, toggle) {
  element2.classList[toggle ? "add" : "remove"](name2);
}
function custom_event(type2, detail, { bubbles = false, cancelable = false } = {}) {
  const e = document.createEvent("CustomEvent");
  e.initCustomEvent(type2, bubbles, cancelable, detail);
  return e;
}
var HtmlTag = class {
  constructor(is_svg = false) {
    this.is_svg = false;
    this.is_svg = is_svg;
    this.e = this.n = null;
  }
  c(html) {
    this.h(html);
  }
  m(html, target, anchor = null) {
    if (!this.e) {
      if (this.is_svg)
        this.e = svg_element(target.nodeName);
      else
        this.e = element(target.nodeName);
      this.t = target;
      this.c(html);
    }
    this.i(anchor);
  }
  h(html) {
    this.e.innerHTML = html;
    this.n = Array.from(this.e.childNodes);
  }
  i(anchor) {
    for (let i = 0; i < this.n.length; i += 1) {
      insert(this.t, this.n[i], anchor);
    }
  }
  p(html) {
    this.d();
    this.h(html);
    this.i(this.a);
  }
  d() {
    this.n.forEach(detach);
  }
};
var managed_styles = /* @__PURE__ */ new Map();
var active = 0;
function hash3(str) {
  let hash4 = 5381;
  let i = str.length;
  while (i--)
    hash4 = (hash4 << 5) - hash4 ^ str.charCodeAt(i);
  return hash4 >>> 0;
}
function create_style_information(doc, node) {
  const info = { stylesheet: append_empty_stylesheet(node), rules: {} };
  managed_styles.set(doc, info);
  return info;
}
function create_rule(node, a, b, duration, delay, ease, fn2, uid = 0) {
  const step = 16.666 / duration;
  let keyframes = "{\n";
  for (let p = 0; p <= 1; p += step) {
    const t = a + (b - a) * ease(p);
    keyframes += p * 100 + `%{${fn2(t, 1 - t)}}
`;
  }
  const rule = keyframes + `100% {${fn2(b, 1 - b)}}
}`;
  const name2 = `__svelte_${hash3(rule)}_${uid}`;
  const doc = get_root_for_style(node);
  const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);
  if (!rules[name2]) {
    rules[name2] = true;
    stylesheet.insertRule(`@keyframes ${name2} ${rule}`, stylesheet.cssRules.length);
  }
  const animation = node.style.animation || "";
  node.style.animation = `${animation ? `${animation}, ` : ""}${name2} ${duration}ms linear ${delay}ms 1 both`;
  active += 1;
  return name2;
}
function delete_rule(node, name2) {
  const previous = (node.style.animation || "").split(", ");
  const next2 = previous.filter(
    name2 ? (anim) => anim.indexOf(name2) < 0 : (anim) => anim.indexOf("__svelte") === -1
  );
  const deleted = previous.length - next2.length;
  if (deleted) {
    node.style.animation = next2.join(", ");
    active -= deleted;
    if (!active)
      clear_rules();
  }
}
function clear_rules() {
  raf(() => {
    if (active)
      return;
    managed_styles.forEach((info) => {
      const { ownerNode } = info.stylesheet;
      if (ownerNode)
        detach(ownerNode);
    });
    managed_styles.clear();
  });
}
function create_animation(node, from, fn2, params) {
  if (!from)
    return noop;
  const to = node.getBoundingClientRect();
  if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)
    return noop;
  const {
    delay = 0,
    duration = 300,
    easing = identity,
    start: start_time = now() + delay,
    end: end2 = start_time + duration,
    tick: tick2 = noop,
    css
  } = fn2(node, { from, to }, params);
  let running = true;
  let started = false;
  let name2;
  function start2() {
    if (css) {
      name2 = create_rule(node, 0, 1, duration, delay, easing, css);
    }
    if (!delay) {
      started = true;
    }
  }
  function stop() {
    if (css)
      delete_rule(node, name2);
    running = false;
  }
  loop((now2) => {
    if (!started && now2 >= start_time) {
      started = true;
    }
    if (started && now2 >= end2) {
      tick2(1, 0);
      stop();
    }
    if (!running) {
      return false;
    }
    if (started) {
      const p = now2 - start_time;
      const t = 0 + 1 * easing(p / duration);
      tick2(t, 1 - t);
    }
    return true;
  });
  start2();
  tick2(0, 1);
  return stop;
}
function fix_position(node) {
  const style = getComputedStyle(node);
  if (style.position !== "absolute" && style.position !== "fixed") {
    const { width, height } = style;
    const a = node.getBoundingClientRect();
    node.style.position = "absolute";
    node.style.width = width;
    node.style.height = height;
    add_transform(node, a);
  }
}
function add_transform(node, a) {
  const b = node.getBoundingClientRect();
  if (a.left !== b.left || a.top !== b.top) {
    const style = getComputedStyle(node);
    const transform = style.transform === "none" ? "" : style.transform;
    node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;
  }
}
var current_component;
function set_current_component(component) {
  current_component = component;
}
function get_current_component() {
  if (!current_component)
    throw new Error("Function called outside component initialization");
  return current_component;
}
function onMount(fn2) {
  get_current_component().$$.on_mount.push(fn2);
}
function onDestroy(fn2) {
  get_current_component().$$.on_destroy.push(fn2);
}
function createEventDispatcher() {
  const component = get_current_component();
  return (type2, detail, { cancelable = false } = {}) => {
    const callbacks = component.$$.callbacks[type2];
    if (callbacks) {
      const event = custom_event(type2, detail, { cancelable });
      callbacks.slice().forEach((fn2) => {
        fn2.call(component, event);
      });
      return !event.defaultPrevented;
    }
    return true;
  };
}
function setContext(key, context) {
  get_current_component().$$.context.set(key, context);
  return context;
}
function getContext(key) {
  return get_current_component().$$.context.get(key);
}
function bubble(component, event) {
  const callbacks = component.$$.callbacks[event.type];
  if (callbacks) {
    callbacks.slice().forEach((fn2) => fn2.call(this, event));
  }
}
var dirty_components = [];
var binding_callbacks = [];
var render_callbacks = [];
var flush_callbacks = [];
var resolved_promise = Promise.resolve();
var update_scheduled = false;
function schedule_update() {
  if (!update_scheduled) {
    update_scheduled = true;
    resolved_promise.then(flush);
  }
}
function add_render_callback(fn2) {
  render_callbacks.push(fn2);
}
function add_flush_callback(fn2) {
  flush_callbacks.push(fn2);
}
var seen_callbacks = /* @__PURE__ */ new Set();
var flushidx = 0;
function flush() {
  const saved_component = current_component;
  do {
    while (flushidx < dirty_components.length) {
      const component = dirty_components[flushidx];
      flushidx++;
      set_current_component(component);
      update(component.$$);
    }
    set_current_component(null);
    dirty_components.length = 0;
    flushidx = 0;
    while (binding_callbacks.length)
      binding_callbacks.pop()();
    for (let i = 0; i < render_callbacks.length; i += 1) {
      const callback = render_callbacks[i];
      if (!seen_callbacks.has(callback)) {
        seen_callbacks.add(callback);
        callback();
      }
    }
    render_callbacks.length = 0;
  } while (dirty_components.length);
  while (flush_callbacks.length) {
    flush_callbacks.pop()();
  }
  update_scheduled = false;
  seen_callbacks.clear();
  set_current_component(saved_component);
}
function update($$) {
  if ($$.fragment !== null) {
    $$.update();
    run_all($$.before_update);
    const dirty = $$.dirty;
    $$.dirty = [-1];
    $$.fragment && $$.fragment.p($$.ctx, dirty);
    $$.after_update.forEach(add_render_callback);
  }
}
var promise;
function wait() {
  if (!promise) {
    promise = Promise.resolve();
    promise.then(() => {
      promise = null;
    });
  }
  return promise;
}
function dispatch(node, direction, kind) {
  node.dispatchEvent(custom_event(`${direction ? "intro" : "outro"}${kind}`));
}
var outroing = /* @__PURE__ */ new Set();
var outros;
function group_outros() {
  outros = {
    r: 0,
    c: [],
    p: outros
  };
}
function check_outros() {
  if (!outros.r) {
    run_all(outros.c);
  }
  outros = outros.p;
}
function transition_in(block, local) {
  if (block && block.i) {
    outroing.delete(block);
    block.i(local);
  }
}
function transition_out(block, local, detach2, callback) {
  if (block && block.o) {
    if (outroing.has(block))
      return;
    outroing.add(block);
    outros.c.push(() => {
      outroing.delete(block);
      if (callback) {
        if (detach2)
          block.d(1);
        callback();
      }
    });
    block.o(local);
  } else if (callback) {
    callback();
  }
}
var null_transition = { duration: 0 };
function create_bidirectional_transition(node, fn2, params, intro) {
  let config = fn2(node, params);
  let t = intro ? 0 : 1;
  let running_program = null;
  let pending_program = null;
  let animation_name = null;
  function clear_animation() {
    if (animation_name)
      delete_rule(node, animation_name);
  }
  function init3(program, duration) {
    const d = program.b - t;
    duration *= Math.abs(d);
    return {
      a: t,
      b: program.b,
      d,
      duration,
      start: program.start,
      end: program.start + duration,
      group: program.group
    };
  }
  function go(b) {
    const { delay = 0, duration = 300, easing = identity, tick: tick2 = noop, css } = config || null_transition;
    const program = {
      start: now() + delay,
      b
    };
    if (!b) {
      program.group = outros;
      outros.r += 1;
    }
    if (running_program || pending_program) {
      pending_program = program;
    } else {
      if (css) {
        clear_animation();
        animation_name = create_rule(node, t, b, duration, delay, easing, css);
      }
      if (b)
        tick2(0, 1);
      running_program = init3(program, duration);
      add_render_callback(() => dispatch(node, b, "start"));
      loop((now2) => {
        if (pending_program && now2 > pending_program.start) {
          running_program = init3(pending_program, duration);
          pending_program = null;
          dispatch(node, running_program.b, "start");
          if (css) {
            clear_animation();
            animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);
          }
        }
        if (running_program) {
          if (now2 >= running_program.end) {
            tick2(t = running_program.b, 1 - t);
            dispatch(node, running_program.b, "end");
            if (!pending_program) {
              if (running_program.b) {
                clear_animation();
              } else {
                if (!--running_program.group.r)
                  run_all(running_program.group.c);
              }
            }
            running_program = null;
          } else if (now2 >= running_program.start) {
            const p = now2 - running_program.start;
            t = running_program.a + running_program.d * easing(p / running_program.duration);
            tick2(t, 1 - t);
          }
        }
        return !!(running_program || pending_program);
      });
    }
  }
  return {
    run(b) {
      if (is_function(config)) {
        wait().then(() => {
          config = config();
          go(b);
        });
      } else {
        go(b);
      }
    },
    end() {
      clear_animation();
      running_program = pending_program = null;
    }
  };
}
var globals = typeof window !== "undefined" ? window : typeof globalThis !== "undefined" ? globalThis : global;
function destroy_block(block, lookup) {
  block.d(1);
  lookup.delete(block.key);
}
function outro_and_destroy_block(block, lookup) {
  transition_out(block, 1, 1, () => {
    lookup.delete(block.key);
  });
}
function fix_and_outro_and_destroy_block(block, lookup) {
  block.f();
  outro_and_destroy_block(block, lookup);
}
function update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block18, next2, get_context) {
  let o = old_blocks.length;
  let n = list.length;
  let i = o;
  const old_indexes = {};
  while (i--)
    old_indexes[old_blocks[i].key] = i;
  const new_blocks = [];
  const new_lookup = /* @__PURE__ */ new Map();
  const deltas = /* @__PURE__ */ new Map();
  i = n;
  while (i--) {
    const child_ctx = get_context(ctx, list, i);
    const key = get_key(child_ctx);
    let block = lookup.get(key);
    if (!block) {
      block = create_each_block18(key, child_ctx);
      block.c();
    } else if (dynamic) {
      block.p(child_ctx, dirty);
    }
    new_lookup.set(key, new_blocks[i] = block);
    if (key in old_indexes)
      deltas.set(key, Math.abs(i - old_indexes[key]));
  }
  const will_move = /* @__PURE__ */ new Set();
  const did_move = /* @__PURE__ */ new Set();
  function insert2(block) {
    transition_in(block, 1);
    block.m(node, next2);
    lookup.set(block.key, block);
    next2 = block.first;
    n--;
  }
  while (o && n) {
    const new_block = new_blocks[n - 1];
    const old_block = old_blocks[o - 1];
    const new_key = new_block.key;
    const old_key = old_block.key;
    if (new_block === old_block) {
      next2 = new_block.first;
      o--;
      n--;
    } else if (!new_lookup.has(old_key)) {
      destroy(old_block, lookup);
      o--;
    } else if (!lookup.has(new_key) || will_move.has(new_key)) {
      insert2(new_block);
    } else if (did_move.has(old_key)) {
      o--;
    } else if (deltas.get(new_key) > deltas.get(old_key)) {
      did_move.add(new_key);
      insert2(new_block);
    } else {
      will_move.add(old_key);
      o--;
    }
  }
  while (o--) {
    const old_block = old_blocks[o];
    if (!new_lookup.has(old_block.key))
      destroy(old_block, lookup);
  }
  while (n)
    insert2(new_blocks[n - 1]);
  return new_blocks;
}
function get_spread_update(levels, updates) {
  const update2 = {};
  const to_null_out = {};
  const accounted_for = { $$scope: 1 };
  let i = levels.length;
  while (i--) {
    const o = levels[i];
    const n = updates[i];
    if (n) {
      for (const key in o) {
        if (!(key in n))
          to_null_out[key] = 1;
      }
      for (const key in n) {
        if (!accounted_for[key]) {
          update2[key] = n[key];
          accounted_for[key] = 1;
        }
      }
      levels[i] = n;
    } else {
      for (const key in o) {
        accounted_for[key] = 1;
      }
    }
  }
  for (const key in to_null_out) {
    if (!(key in update2))
      update2[key] = void 0;
  }
  return update2;
}
function get_spread_object(spread_props) {
  return typeof spread_props === "object" && spread_props !== null ? spread_props : {};
}
function bind(component, name2, callback) {
  const index = component.$$.props[name2];
  if (index !== void 0) {
    component.$$.bound[index] = callback;
    callback(component.$$.ctx[index]);
  }
}
function create_component(block) {
  block && block.c();
}
function mount_component(component, target, anchor, customElement) {
  const { fragment, after_update } = component.$$;
  fragment && fragment.m(target, anchor);
  if (!customElement) {
    add_render_callback(() => {
      const new_on_destroy = component.$$.on_mount.map(run).filter(is_function);
      if (component.$$.on_destroy) {
        component.$$.on_destroy.push(...new_on_destroy);
      } else {
        run_all(new_on_destroy);
      }
      component.$$.on_mount = [];
    });
  }
  after_update.forEach(add_render_callback);
}
function destroy_component(component, detaching) {
  const $$ = component.$$;
  if ($$.fragment !== null) {
    run_all($$.on_destroy);
    $$.fragment && $$.fragment.d(detaching);
    $$.on_destroy = $$.fragment = null;
    $$.ctx = [];
  }
}
function make_dirty(component, i) {
  if (component.$$.dirty[0] === -1) {
    dirty_components.push(component);
    schedule_update();
    component.$$.dirty.fill(0);
  }
  component.$$.dirty[i / 31 | 0] |= 1 << i % 31;
}
function init(component, options, instance40, create_fragment40, not_equal, props, append_styles2, dirty = [-1]) {
  const parent_component = current_component;
  set_current_component(component);
  const $$ = component.$$ = {
    fragment: null,
    ctx: [],
    props,
    update: noop,
    not_equal,
    bound: blank_object(),
    on_mount: [],
    on_destroy: [],
    on_disconnect: [],
    before_update: [],
    after_update: [],
    context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),
    callbacks: blank_object(),
    dirty,
    skip_bound: false,
    root: options.target || parent_component.$$.root
  };
  append_styles2 && append_styles2($$.root);
  let ready = false;
  $$.ctx = instance40 ? instance40(component, options.props || {}, (i, ret, ...rest) => {
    const value = rest.length ? rest[0] : ret;
    if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
      if (!$$.skip_bound && $$.bound[i])
        $$.bound[i](value);
      if (ready)
        make_dirty(component, i);
    }
    return ret;
  }) : [];
  $$.update();
  ready = true;
  run_all($$.before_update);
  $$.fragment = create_fragment40 ? create_fragment40($$.ctx) : false;
  if (options.target) {
    if (options.hydrate) {
      start_hydrating();
      const nodes = children(options.target);
      $$.fragment && $$.fragment.l(nodes);
      nodes.forEach(detach);
    } else {
      $$.fragment && $$.fragment.c();
    }
    if (options.intro)
      transition_in(component.$$.fragment);
    mount_component(component, options.target, options.anchor, options.customElement);
    end_hydrating();
    flush();
  }
  set_current_component(parent_component);
}
var SvelteElement;
if (typeof HTMLElement === "function") {
  SvelteElement = class extends HTMLElement {
    constructor() {
      super();
      this.attachShadow({ mode: "open" });
    }
    connectedCallback() {
      const { on_mount } = this.$$;
      this.$$.on_disconnect = on_mount.map(run).filter(is_function);
      for (const key in this.$$.slotted) {
        this.appendChild(this.$$.slotted[key]);
      }
    }
    attributeChangedCallback(attr2, _oldValue, newValue) {
      this[attr2] = newValue;
    }
    disconnectedCallback() {
      run_all(this.$$.on_disconnect);
    }
    $destroy() {
      destroy_component(this, 1);
      this.$destroy = noop;
    }
    $on(type2, callback) {
      if (!is_function(callback)) {
        return noop;
      }
      const callbacks = this.$$.callbacks[type2] || (this.$$.callbacks[type2] = []);
      callbacks.push(callback);
      return () => {
        const index = callbacks.indexOf(callback);
        if (index !== -1)
          callbacks.splice(index, 1);
      };
    }
    $set($$props) {
      if (this.$$set && !is_empty($$props)) {
        this.$$.skip_bound = true;
        this.$$set($$props);
        this.$$.skip_bound = false;
      }
    }
  };
}
var SvelteComponent = class {
  $destroy() {
    destroy_component(this, 1);
    this.$destroy = noop;
  }
  $on(type2, callback) {
    if (!is_function(callback)) {
      return noop;
    }
    const callbacks = this.$$.callbacks[type2] || (this.$$.callbacks[type2] = []);
    callbacks.push(callback);
    return () => {
      const index = callbacks.indexOf(callback);
      if (index !== -1)
        callbacks.splice(index, 1);
    };
  }
  $set($$props) {
    if (this.$$set && !is_empty($$props)) {
      this.$$.skip_bound = true;
      this.$$set($$props);
      this.$$.skip_bound = false;
    }
  }
};

// node_modules/svelte/store/index.mjs
var subscriber_queue = [];
function readable(value, start2) {
  return {
    subscribe: writable(value, start2).subscribe
  };
}
function writable(value, start2 = noop) {
  let stop;
  const subscribers = /* @__PURE__ */ new Set();
  function set(new_value) {
    if (safe_not_equal(value, new_value)) {
      value = new_value;
      if (stop) {
        const run_queue = !subscriber_queue.length;
        for (const subscriber of subscribers) {
          subscriber[1]();
          subscriber_queue.push(subscriber, value);
        }
        if (run_queue) {
          for (let i = 0; i < subscriber_queue.length; i += 2) {
            subscriber_queue[i][0](subscriber_queue[i + 1]);
          }
          subscriber_queue.length = 0;
        }
      }
    }
  }
  function update2(fn2) {
    set(fn2(value));
  }
  function subscribe2(run2, invalidate = noop) {
    const subscriber = [run2, invalidate];
    subscribers.add(subscriber);
    if (subscribers.size === 1) {
      stop = start2(set) || noop;
    }
    run2(value);
    return () => {
      subscribers.delete(subscriber);
      if (subscribers.size === 0) {
        stop();
        stop = null;
      }
    };
  }
  return { set, update: update2, subscribe: subscribe2 };
}
function derived(stores, fn2, initial_value) {
  const single = !Array.isArray(stores);
  const stores_array = single ? [stores] : stores;
  const auto2 = fn2.length < 2;
  return readable(initial_value, (set) => {
    let inited = false;
    const values = [];
    let pending = 0;
    let cleanup = noop;
    const sync = () => {
      if (pending) {
        return;
      }
      cleanup();
      const result = fn2(single ? values[0] : values, set);
      if (auto2) {
        set(result);
      } else {
        cleanup = is_function(result) ? result : noop;
      }
    };
    const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {
      values[i] = value;
      pending &= ~(1 << i);
      if (inited) {
        sync();
      }
    }, () => {
      pending |= 1 << i;
    }));
    inited = true;
    sync();
    return function stop() {
      run_all(unsubscribers);
      cleanup();
    };
  });
}

// src/encounter/index.ts
var import_obsidian6 = require("obsidian");

// src/encounter/ui/Encounter.svelte
var import_obsidian4 = require("obsidian");

// src/utils/encounter-difficulty.ts
var getCreatureXP = (plugin, creature) => {
  if (creature.xp)
    return creature.xp;
  let existing = plugin.bestiary.find((c) => c.name == creature.name);
  if (existing && existing.cr && existing.cr in XP_PER_CR) {
    return XP_PER_CR[existing.cr];
  }
  return 0;
};
var tresholds = {
  1: { easy: 25, medium: 50, hard: 75, deadly: 100 },
  2: { easy: 50, medium: 100, hard: 150, deadly: 200 },
  3: { easy: 75, medium: 150, hard: 225, deadly: 400 },
  4: { easy: 125, medium: 250, hard: 375, deadly: 500 },
  5: { easy: 250, medium: 500, hard: 750, deadly: 1100 },
  6: { easy: 300, medium: 600, hard: 900, deadly: 1400 },
  7: { easy: 350, medium: 750, hard: 1100, deadly: 1700 },
  8: { easy: 450, medium: 900, hard: 1400, deadly: 2100 },
  9: { easy: 550, medium: 1100, hard: 1600, deadly: 2400 },
  10: { easy: 600, medium: 1200, hard: 1900, deadly: 2800 },
  11: { easy: 800, medium: 1600, hard: 2400, deadly: 3600 },
  12: { easy: 1e3, medium: 2e3, hard: 3e3, deadly: 4500 },
  13: { easy: 1100, medium: 2200, hard: 3400, deadly: 5100 },
  14: { easy: 1250, medium: 2500, hard: 3800, deadly: 5700 },
  15: { easy: 1400, medium: 2800, hard: 4300, deadly: 6400 },
  16: { easy: 1600, medium: 3200, hard: 4800, deadly: 7200 },
  17: { easy: 2e3, medium: 3900, hard: 5900, deadly: 8800 },
  18: { easy: 2100, medium: 4200, hard: 6300, deadly: 9500 },
  19: { easy: 2400, medium: 4900, hard: 7300, deadly: 10900 },
  20: { easy: 2800, medium: 5700, hard: 8500, deadly: 12700 }
};
function xpBudget(characterLevels) {
  const easy = characterLevels.reduce(
    (acc, lvl) => acc + tresholds[lvl].easy,
    0
  );
  const medium = characterLevels.reduce(
    (acc, lvl) => acc + tresholds[lvl].medium,
    0
  );
  const hard = characterLevels.reduce(
    (acc, lvl) => acc + tresholds[lvl].hard,
    0
  );
  const deadly = characterLevels.reduce(
    (acc, lvl) => acc + tresholds[lvl].deadly,
    0
  );
  return { easy, medium, hard, deadly };
}
function formatDifficultyReport(report) {
  return `${[
    `Encounter is ${report.difficulty}`,
    `Total XP: ${report.totalXp}`,
    `Adjusted XP: ${report.adjustedXp} (x${report.multiplier})`,
    ` `,
    `Threshold`,
    `Easy: ${report.budget.easy}`,
    `Medium: ${report.budget.medium}`,
    `Hard: ${report.budget.hard}`,
    `Deadly: ${report.budget.deadly}`
  ].join("\n")}`;
}
function encounterDifficulty(characterLevels, xp, numberOfMonsters) {
  if (!characterLevels?.length || xp == 0 || numberOfMonsters == 0)
    return null;
  let numberMultiplier;
  if (numberOfMonsters === 1) {
    numberMultiplier = 1;
  } else if (numberOfMonsters === 2) {
    numberMultiplier = 1.5;
  } else if (numberOfMonsters < 7) {
    numberMultiplier = 2;
  } else if (numberOfMonsters < 11) {
    numberMultiplier = 2.5;
  } else if (numberOfMonsters < 15) {
    numberMultiplier = 3;
  } else {
    numberMultiplier = 4;
  }
  const adjustedXp = numberMultiplier * xp;
  const budget = xpBudget(characterLevels);
  let difficulty = "Easy";
  if (adjustedXp >= budget.deadly) {
    difficulty = "Deadly";
  } else if (adjustedXp >= budget.hard) {
    difficulty = "Hard";
  } else if (adjustedXp >= budget.medium) {
    difficulty = "Medium";
  }
  let result = {
    difficulty,
    totalXp: xp,
    adjustedXp,
    multiplier: numberMultiplier,
    budget
  };
  return result;
}

// src/encounter/ui/Encounter.svelte
function add_css(target) {
  append_styles(target, "svelte-2rbje", ".encounter-name.svelte-2rbje.svelte-2rbje{display:flex;justify-content:flex-start;align-items:center}.encounter-name.svelte-2rbje .initiative-tracker-name.svelte-2rbje{margin:0}.encounter-instance.svelte-2rbje>.creatures-container>.encounter-creatures:first-of-type h4.svelte-2rbje,.encounter-creatures.svelte-2rbje>ul.svelte-2rbje{margin-top:0}.creature-li.svelte-2rbje.svelte-2rbje{width:fit-content}.xp-parent.svelte-2rbje.svelte-2rbje{display:inline-flex}.difficulty.svelte-2rbje.svelte-2rbje{width:fit-content}.deadly.svelte-2rbje .difficulty-label.svelte-2rbje{color:red}.hard.svelte-2rbje .difficulty-label.svelte-2rbje{color:orange}.medium.svelte-2rbje .difficulty-label.svelte-2rbje{color:yellow}.easy.svelte-2rbje .difficulty-label.svelte-2rbje{color:green}.icons.svelte-2rbje.svelte-2rbje{display:flex}.icons.svelte-2rbje>div.svelte-2rbje:first-child .clickable-icon{margin-right:0}");
}
function get_each_context(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[17] = list[i][0];
  child_ctx[18] = list[i][1];
  return child_ctx;
}
function get_each_context_1(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[21] = list[i];
  return child_ctx;
}
function create_if_block_6(ctx) {
  let if_block_anchor;
  function select_block_type(ctx2, dirty) {
    if (ctx2[3] instanceof Array && ctx2[3].length)
      return create_if_block_7;
    if (!ctx2[3])
      return create_if_block_8;
  }
  let current_block_type = select_block_type(ctx, -1);
  let if_block = current_block_type && current_block_type(ctx);
  return {
    c() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
    },
    p(ctx2, dirty) {
      if (current_block_type === (current_block_type = select_block_type(ctx2, dirty)) && if_block) {
        if_block.p(ctx2, dirty);
      } else {
        if (if_block)
          if_block.d(1);
        if_block = current_block_type && current_block_type(ctx2);
        if (if_block) {
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      }
    },
    d(detaching) {
      if (if_block) {
        if_block.d(detaching);
      }
      if (detaching)
        detach(if_block_anchor);
    }
  };
}
function create_if_block_8(ctx) {
  let div;
  return {
    c() {
      div = element("div");
      div.innerHTML = `<h4 class="svelte-2rbje">No Players</h4>`;
      attr(div, "class", "encounter-creatures encounter-players");
    },
    m(target, anchor) {
      insert(target, div, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching)
        detach(div);
    }
  };
}
function create_if_block_7(ctx) {
  let div;
  let h4;
  let t0_value = (ctx[4] ? ctx[4] : "Players") + "";
  let t0;
  let t1;
  let ul;
  let each_value_1 = ctx[3];
  let each_blocks = [];
  for (let i = 0; i < each_value_1.length; i += 1) {
    each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
  }
  return {
    c() {
      div = element("div");
      h4 = element("h4");
      t0 = text(t0_value);
      t1 = space();
      ul = element("ul");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      attr(h4, "class", "svelte-2rbje");
      attr(ul, "class", "svelte-2rbje");
      attr(div, "class", "encounter-creatures encounter-players svelte-2rbje");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, h4);
      append(h4, t0);
      append(div, t1);
      append(div, ul);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(ul, null);
      }
    },
    p(ctx2, dirty) {
      if (dirty & 16 && t0_value !== (t0_value = (ctx2[4] ? ctx2[4] : "Players") + ""))
        set_data(t0, t0_value);
      if (dirty & 8) {
        each_value_1 = ctx2[3];
        let i;
        for (i = 0; i < each_value_1.length; i += 1) {
          const child_ctx = get_each_context_1(ctx2, each_value_1, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block_1(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(ul, null);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value_1.length;
      }
    },
    d(detaching) {
      if (detaching)
        detach(div);
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_each_block_1(ctx) {
  let li;
  let span;
  let t0_value = ctx[21] + "";
  let t0;
  let t1;
  return {
    c() {
      li = element("li");
      span = element("span");
      t0 = text(t0_value);
      t1 = space();
    },
    m(target, anchor) {
      insert(target, li, anchor);
      append(li, span);
      append(span, t0);
      append(li, t1);
    },
    p(ctx2, dirty) {
      if (dirty & 8 && t0_value !== (t0_value = ctx2[21] + ""))
        set_data(t0, t0_value);
    },
    d(detaching) {
      if (detaching)
        detach(li);
    }
  };
}
function create_if_block_2(ctx) {
  let h4;
  let t1;
  let if_block_anchor;
  function select_block_type_1(ctx2, dirty) {
    if (ctx2[2].size)
      return create_if_block_3;
    return create_else_block_1;
  }
  let current_block_type = select_block_type_1(ctx, -1);
  let if_block = current_block_type(ctx);
  return {
    c() {
      h4 = element("h4");
      h4.textContent = "Creatures";
      t1 = space();
      if_block.c();
      if_block_anchor = empty();
      attr(h4, "class", "svelte-2rbje");
    },
    m(target, anchor) {
      insert(target, h4, anchor);
      insert(target, t1, anchor);
      if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
    },
    p(ctx2, dirty) {
      if (current_block_type === (current_block_type = select_block_type_1(ctx2, dirty)) && if_block) {
        if_block.p(ctx2, dirty);
      } else {
        if_block.d(1);
        if_block = current_block_type(ctx2);
        if (if_block) {
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      }
    },
    d(detaching) {
      if (detaching)
        detach(h4);
      if (detaching)
        detach(t1);
      if_block.d(detaching);
      if (detaching)
        detach(if_block_anchor);
    }
  };
}
function create_else_block_1(ctx) {
  let strong;
  return {
    c() {
      strong = element("strong");
      strong.textContent = "No creatures";
    },
    m(target, anchor) {
      insert(target, strong, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching)
        detach(strong);
    }
  };
}
function create_if_block_3(ctx) {
  let ul;
  let each_value = [...ctx[2]];
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
  }
  return {
    c() {
      ul = element("ul");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      attr(ul, "class", "svelte-2rbje");
    },
    m(target, anchor) {
      insert(target, ul, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(ul, null);
      }
    },
    p(ctx2, dirty) {
      if (dirty & 16516) {
        each_value = [...ctx2[2]];
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(ul, null);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value.length;
      }
    },
    d(detaching) {
      if (detaching)
        detach(ul);
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_else_block(ctx) {
  let t0;
  let t1_value = ctx[17].name + "";
  let t1;
  let t2_value = ctx[18] == 1 ? "" : "s";
  let t2;
  return {
    c() {
      t0 = text("\xA0");
      t1 = text(t1_value);
      t2 = text(t2_value);
    },
    m(target, anchor) {
      insert(target, t0, anchor);
      insert(target, t1, anchor);
      insert(target, t2, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & 4 && t1_value !== (t1_value = ctx2[17].name + ""))
        set_data(t1, t1_value);
      if (dirty & 4 && t2_value !== (t2_value = ctx2[18] == 1 ? "" : "s"))
        set_data(t2, t2_value);
    },
    d(detaching) {
      if (detaching)
        detach(t0);
      if (detaching)
        detach(t1);
      if (detaching)
        detach(t2);
    }
  };
}
function create_if_block_5(ctx) {
  let t0;
  let t1_value = ctx[17].display + "";
  let t1;
  let t2_value = ctx[18] == 1 ? "" : "s";
  let t2;
  let t3;
  let t4_value = ctx[17].name + "";
  let t4;
  let t5;
  return {
    c() {
      t0 = text("\xA0");
      t1 = text(t1_value);
      t2 = text(t2_value);
      t3 = text(" (");
      t4 = text(t4_value);
      t5 = text(")");
    },
    m(target, anchor) {
      insert(target, t0, anchor);
      insert(target, t1, anchor);
      insert(target, t2, anchor);
      insert(target, t3, anchor);
      insert(target, t4, anchor);
      insert(target, t5, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & 4 && t1_value !== (t1_value = ctx2[17].display + ""))
        set_data(t1, t1_value);
      if (dirty & 4 && t2_value !== (t2_value = ctx2[18] == 1 ? "" : "s"))
        set_data(t2, t2_value);
      if (dirty & 4 && t4_value !== (t4_value = ctx2[17].name + ""))
        set_data(t4, t4_value);
    },
    d(detaching) {
      if (detaching)
        detach(t0);
      if (detaching)
        detach(t1);
      if (detaching)
        detach(t2);
      if (detaching)
        detach(t3);
      if (detaching)
        detach(t4);
      if (detaching)
        detach(t5);
    }
  };
}
function create_if_block_4(ctx) {
  let span5;
  let span0;
  let t1;
  let span3;
  let span1;
  let t2_value = ctx[17].xp * ctx[7].get(ctx[17]) + "";
  let t2;
  let t3;
  let span2;
  let t5;
  let span4;
  return {
    c() {
      span5 = element("span");
      span0 = element("span");
      span0.textContent = "(";
      t1 = space();
      span3 = element("span");
      span1 = element("span");
      t2 = text(t2_value);
      t3 = space();
      span2 = element("span");
      span2.textContent = "XP";
      t5 = space();
      span4 = element("span");
      span4.textContent = ")";
      attr(span0, "class", "paren left");
      attr(span1, "class", "xp number");
      attr(span2, "class", "xp text");
      attr(span3, "class", "xp-container");
      attr(span4, "class", "paren right");
      attr(span5, "class", "xp-parent svelte-2rbje");
    },
    m(target, anchor) {
      insert(target, span5, anchor);
      append(span5, span0);
      append(span5, t1);
      append(span5, span3);
      append(span3, span1);
      append(span1, t2);
      append(span3, t3);
      append(span3, span2);
      append(span5, t5);
      append(span5, span4);
    },
    p(ctx2, dirty) {
      if (dirty & 132 && t2_value !== (t2_value = ctx2[17].xp * ctx2[7].get(ctx2[17]) + ""))
        set_data(t2, t2_value);
    },
    d(detaching) {
      if (detaching)
        detach(span5);
    }
  };
}
function create_each_block(ctx) {
  let li;
  let strong;
  let rollerEl_action;
  let t0;
  let span;
  let t1;
  let show_if = ctx[17].xp && ctx[7].has(ctx[17]);
  let t2;
  let li_aria_label_value;
  let mounted;
  let dispose;
  function select_block_type_2(ctx2, dirty) {
    if (ctx2[17].display && ctx2[17].display != ctx2[17].name)
      return create_if_block_5;
    return create_else_block;
  }
  let current_block_type = select_block_type_2(ctx, -1);
  let if_block0 = current_block_type(ctx);
  let if_block1 = show_if && create_if_block_4(ctx);
  return {
    c() {
      li = element("li");
      strong = element("strong");
      t0 = space();
      span = element("span");
      if_block0.c();
      t1 = space();
      if (if_block1)
        if_block1.c();
      t2 = space();
      attr(li, "aria-label", li_aria_label_value = ctx[14](ctx[17]));
      attr(li, "class", "creature-li svelte-2rbje");
    },
    m(target, anchor) {
      insert(target, li, anchor);
      append(li, strong);
      append(li, t0);
      append(li, span);
      if_block0.m(span, null);
      append(li, t1);
      if (if_block1)
        if_block1.m(li, null);
      append(li, t2);
      if (!mounted) {
        dispose = action_destroyer(rollerEl_action = ctx[13].call(null, strong, ctx[17]));
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (rollerEl_action && is_function(rollerEl_action.update) && dirty & 4)
        rollerEl_action.update.call(null, ctx[17]);
      if (current_block_type === (current_block_type = select_block_type_2(ctx, dirty)) && if_block0) {
        if_block0.p(ctx, dirty);
      } else {
        if_block0.d(1);
        if_block0 = current_block_type(ctx);
        if (if_block0) {
          if_block0.c();
          if_block0.m(span, null);
        }
      }
      if (dirty & 132)
        show_if = ctx[17].xp && ctx[7].has(ctx[17]);
      if (show_if) {
        if (if_block1) {
          if_block1.p(ctx, dirty);
        } else {
          if_block1 = create_if_block_4(ctx);
          if_block1.c();
          if_block1.m(li, t2);
        }
      } else if (if_block1) {
        if_block1.d(1);
        if_block1 = null;
      }
      if (dirty & 4 && li_aria_label_value !== (li_aria_label_value = ctx[14](ctx[17]))) {
        attr(li, "aria-label", li_aria_label_value);
      }
    },
    d(detaching) {
      if (detaching)
        detach(li);
      if_block0.d();
      if (if_block1)
        if_block1.d();
      mounted = false;
      dispose();
    }
  };
}
function create_if_block(ctx) {
  let div;
  let if_block = ctx[6] > 0 && ctx[8] && create_if_block_1(ctx);
  return {
    c() {
      div = element("div");
      if (if_block)
        if_block.c();
      attr(div, "class", "encounter-xp difficulty svelte-2rbje");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (if_block)
        if_block.m(div, null);
    },
    p(ctx2, dirty) {
      if (ctx2[6] > 0 && ctx2[8]) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block_1(ctx2);
          if_block.c();
          if_block.m(div, null);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
    },
    d(detaching) {
      if (detaching)
        detach(div);
      if (if_block)
        if_block.d();
    }
  };
}
function create_if_block_1(ctx) {
  let span6;
  let strong;
  let t0_value = ctx[8].difficulty + "";
  let t0;
  let t1;
  let span5;
  let span0;
  let t3;
  let span3;
  let span1;
  let t4;
  let t5;
  let span2;
  let t7;
  let span4;
  let span6_aria_label_value;
  let span6_class_value;
  return {
    c() {
      span6 = element("span");
      strong = element("strong");
      t0 = text(t0_value);
      t1 = space();
      span5 = element("span");
      span0 = element("span");
      span0.textContent = "(";
      t3 = space();
      span3 = element("span");
      span1 = element("span");
      t4 = text(ctx[6]);
      t5 = space();
      span2 = element("span");
      span2.textContent = "XP";
      t7 = space();
      span4 = element("span");
      span4.textContent = ")";
      attr(strong, "class", "difficulty-label svelte-2rbje");
      attr(span0, "class", "paren left");
      attr(span1, "class", "xp number");
      attr(span2, "class", "xp text");
      attr(span3, "class", "xp-container");
      attr(span4, "class", "paren right");
      attr(span5, "class", "xp-parent difficulty svelte-2rbje");
      attr(span6, "aria-label", span6_aria_label_value = formatDifficultyReport(ctx[8]));
      attr(span6, "class", span6_class_value = null_to_empty(ctx[8].difficulty.toLowerCase()) + " svelte-2rbje");
    },
    m(target, anchor) {
      insert(target, span6, anchor);
      append(span6, strong);
      append(strong, t0);
      append(span6, t1);
      append(span6, span5);
      append(span5, span0);
      append(span5, t3);
      append(span5, span3);
      append(span3, span1);
      append(span1, t4);
      append(span3, t5);
      append(span3, span2);
      append(span5, t7);
      append(span5, span4);
    },
    p(ctx2, dirty) {
      if (dirty & 256 && t0_value !== (t0_value = ctx2[8].difficulty + ""))
        set_data(t0, t0_value);
      if (dirty & 64)
        set_data(t4, ctx2[6]);
      if (dirty & 256 && span6_aria_label_value !== (span6_aria_label_value = formatDifficultyReport(ctx2[8]))) {
        attr(span6, "aria-label", span6_aria_label_value);
      }
      if (dirty & 256 && span6_class_value !== (span6_class_value = null_to_empty(ctx2[8].difficulty.toLowerCase()) + " svelte-2rbje")) {
        attr(span6, "class", span6_class_value);
      }
    },
    d(detaching) {
      if (detaching)
        detach(span6);
    }
  };
}
function create_fragment(ctx) {
  let div6;
  let div3;
  let h3;
  let t0;
  let t1;
  let div2;
  let div0;
  let openButton_action;
  let t2;
  let div1;
  let addButton_action;
  let t3;
  let div5;
  let show_if_1 = !ctx[5].includes("players");
  let t4;
  let div4;
  let show_if = !ctx[5].includes("creatures");
  let t5;
  let mounted;
  let dispose;
  let if_block0 = show_if_1 && create_if_block_6(ctx);
  let if_block1 = show_if && create_if_block_2(ctx);
  let if_block2 = ctx[0].data.displayDifficulty && create_if_block(ctx);
  return {
    c() {
      div6 = element("div");
      div3 = element("div");
      h3 = element("h3");
      t0 = text(ctx[1]);
      t1 = space();
      div2 = element("div");
      div0 = element("div");
      t2 = space();
      div1 = element("div");
      t3 = space();
      div5 = element("div");
      if (if_block0)
        if_block0.c();
      t4 = space();
      div4 = element("div");
      if (if_block1)
        if_block1.c();
      t5 = space();
      if (if_block2)
        if_block2.c();
      attr(h3, "data-heading", ctx[1]);
      attr(h3, "class", "initiative-tracker-name svelte-2rbje");
      attr(div0, "aria-label", "Start Encounter");
      attr(div0, "class", "svelte-2rbje");
      attr(div1, "aria-label", "Add to Encounter");
      attr(div1, "class", "svelte-2rbje");
      attr(div2, "class", "icons svelte-2rbje");
      attr(div3, "class", "encounter-name svelte-2rbje");
      attr(div4, "class", "encounter-creatures svelte-2rbje");
      attr(div5, "class", "creatures-container");
      attr(div6, "class", "encounter-instance svelte-2rbje");
    },
    m(target, anchor) {
      insert(target, div6, anchor);
      append(div6, div3);
      append(div3, h3);
      append(h3, t0);
      append(div3, t1);
      append(div3, div2);
      append(div2, div0);
      append(div2, t2);
      append(div2, div1);
      append(div6, t3);
      append(div6, div5);
      if (if_block0)
        if_block0.m(div5, null);
      append(div5, t4);
      append(div5, div4);
      if (if_block1)
        if_block1.m(div4, null);
      append(div5, t5);
      if (if_block2)
        if_block2.m(div5, null);
      if (!mounted) {
        dispose = [
          action_destroyer(openButton_action = ctx[9].call(null, div0)),
          listen(div0, "click", ctx[10]),
          action_destroyer(addButton_action = ctx[11].call(null, div1)),
          listen(div1, "click", ctx[12])
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & 2)
        set_data(t0, ctx2[1]);
      if (dirty & 2) {
        attr(h3, "data-heading", ctx2[1]);
      }
      if (dirty & 32)
        show_if_1 = !ctx2[5].includes("players");
      if (show_if_1) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
        } else {
          if_block0 = create_if_block_6(ctx2);
          if_block0.c();
          if_block0.m(div5, t4);
        }
      } else if (if_block0) {
        if_block0.d(1);
        if_block0 = null;
      }
      if (dirty & 32)
        show_if = !ctx2[5].includes("creatures");
      if (show_if) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
        } else {
          if_block1 = create_if_block_2(ctx2);
          if_block1.c();
          if_block1.m(div4, null);
        }
      } else if (if_block1) {
        if_block1.d(1);
        if_block1 = null;
      }
      if (ctx2[0].data.displayDifficulty) {
        if (if_block2) {
          if_block2.p(ctx2, dirty);
        } else {
          if_block2 = create_if_block(ctx2);
          if_block2.c();
          if_block2.m(div5, null);
        }
      } else if (if_block2) {
        if_block2.d(1);
        if_block2 = null;
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(div6);
      if (if_block0)
        if_block0.d();
      if (if_block1)
        if_block1.d();
      if (if_block2)
        if_block2.d();
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance($$self, $$props, $$invalidate) {
  let { plugin } = $$props;
  let { name: name2 = "Encounter" } = $$props;
  let { creatures } = $$props;
  let { players: players2 } = $$props;
  let { party = null } = $$props;
  let { hide: hide2 = [] } = $$props;
  let { playerLevels } = $$props;
  let totalXP2;
  let creatureMap = /* @__PURE__ */ new Map();
  const rollerMap = /* @__PURE__ */ new Map();
  for (let [creature, count] of creatures) {
    let number = Number(count);
    if (plugin.canUseDiceRoller) {
      let roller = plugin.getRoller(`${count}`);
      roller.on("new-result", () => {
        creatureMap.set(creature, roller.result);
        $$invalidate(7, creatureMap);
        $$invalidate(6, totalXP2 = [...creatureMap].reduce((a, c) => a + getCreatureXP(plugin, c[0]) * c[1], 0));
      });
      rollerMap.set(creature, roller);
      roller.roll();
    } else {
      creatureMap.set(creature, number);
    }
  }
  totalXP2 = [...creatureMap].reduce((a, c) => a + getCreatureXP(plugin, c[0]) * c[1], 0);
  let difficulty;
  const openButton = (node) => {
    new import_obsidian4.ExtraButtonComponent(node).setIcon(START_ENCOUNTER);
  };
  const open = async () => {
    if (!plugin.view) {
      await plugin.addTrackerView();
    }
    const view = plugin.view;
    const creatures2 = [...creatureMap].map(([creature, number]) => {
      if (isNaN(Number(number)) || number < 1)
        return [creature];
      return [...Array(number).keys()].map((v) => Creature.new(creature));
    }).flat();
    tracker.new({
      creatures: [...plugin.getPlayersForParty(party), ...creatures2].map((c) => c.toJSON()),
      name: name2,
      round: 1,
      state: false,
      logFile: null
    });
    plugin.app.workspace.revealLeaf(view.leaf);
  };
  const addButton = (node) => {
    new import_obsidian4.ExtraButtonComponent(node).setIcon("plus-with-circle");
  };
  const add = async (evt) => {
    if (!plugin.view) {
      await plugin.addTrackerView();
    }
    const view = plugin.view;
    const creatures2 = [...creatureMap].map(([creature, number]) => {
      if (isNaN(Number(number)) || number < 1)
        return [creature];
      return [...Array(number).keys()].map((v) => Creature.new(creature));
    }).flat();
    tracker.add(...creatures2);
  };
  const rollerEl = (node, creature) => {
    if (plugin.canUseDiceRoller && rollerMap.has(creature) && !rollerMap.get(creature).isStatic) {
      node.appendChild(rollerMap.get(creature)?.containerEl ?? createSpan({ text: `${creatureMap.get(creature)}` }));
    } else {
      node.setText(`${creatureMap.get(creature)}`);
    }
  };
  const label = (creature) => {
    if (!creature)
      return;
    let label2 = [];
    if (creature.hp) {
      label2.push(`HP: ${creature.hp}`);
    }
    if (creature.ac) {
      label2.push(`AC: ${creature.ac}`);
    }
    if (creature.modifier) {
      label2.push(`MOD: ${creature.modifier}`);
    }
    return `${label2.join(", ")}`;
  };
  $$self.$$set = ($$props2) => {
    if ("plugin" in $$props2)
      $$invalidate(0, plugin = $$props2.plugin);
    if ("name" in $$props2)
      $$invalidate(1, name2 = $$props2.name);
    if ("creatures" in $$props2)
      $$invalidate(2, creatures = $$props2.creatures);
    if ("players" in $$props2)
      $$invalidate(3, players2 = $$props2.players);
    if ("party" in $$props2)
      $$invalidate(4, party = $$props2.party);
    if ("hide" in $$props2)
      $$invalidate(5, hide2 = $$props2.hide);
    if ("playerLevels" in $$props2)
      $$invalidate(15, playerLevels = $$props2.playerLevels);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & 32960) {
      $: {
        if (!isNaN(totalXP2)) {
          $$invalidate(8, difficulty = encounterDifficulty(playerLevels, totalXP2, [...creatureMap.values()].reduce((acc, curr) => acc + curr)));
        }
      }
    }
  };
  return [
    plugin,
    name2,
    creatures,
    players2,
    party,
    hide2,
    totalXP2,
    creatureMap,
    difficulty,
    openButton,
    open,
    addButton,
    add,
    rollerEl,
    label,
    playerLevels
  ];
}
var Encounter = class extends SvelteComponent {
  constructor(options) {
    super();
    init(
      this,
      options,
      instance,
      create_fragment,
      safe_not_equal,
      {
        plugin: 0,
        name: 1,
        creatures: 2,
        players: 3,
        party: 4,
        hide: 5,
        playerLevels: 15
      },
      add_css
    );
  }
};
var Encounter_default = Encounter;

// src/encounter/ui/EncounterRow.svelte
var import_obsidian5 = require("obsidian");
function add_css2(target) {
  append_styles(target, "svelte-bf6d6a", ".deadly.svelte-bf6d6a .difficulty-label.svelte-bf6d6a{color:red}.hard.svelte-bf6d6a .difficulty-label.svelte-bf6d6a{color:orange}.medium.svelte-bf6d6a .difficulty-label.svelte-bf6d6a{color:yellow}.easy.svelte-bf6d6a .difficulty-label.svelte-bf6d6a{color:green}.icons.svelte-bf6d6a.svelte-bf6d6a{display:flex}.icons.svelte-bf6d6a>div.svelte-bf6d6a:first-child .clickable-icon{margin-right:0}ul.svelte-bf6d6a.svelte-bf6d6a{margin:0}");
}
function get_each_context2(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[17] = list[i];
  return child_ctx;
}
function get_each_context_12(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[20] = list[i][0];
  child_ctx[21] = list[i][1];
  return child_ctx;
}
function create_if_block_42(ctx) {
  let td;
  let ul;
  let show_if;
  function select_block_type(ctx2, dirty) {
    if (dirty & 10)
      show_if = null;
    if (show_if == null)
      show_if = !!(!ctx2[3].includes("creatures") && ctx2[1].size);
    if (show_if)
      return create_if_block_52;
    return create_else_block_2;
  }
  let current_block_type = select_block_type(ctx, -1);
  let if_block = current_block_type(ctx);
  return {
    c() {
      td = element("td");
      ul = element("ul");
      if_block.c();
      attr(ul, "class", "encounter-creatures encounter-list svelte-bf6d6a");
    },
    m(target, anchor) {
      insert(target, td, anchor);
      append(td, ul);
      if_block.m(ul, null);
    },
    p(ctx2, dirty) {
      if (current_block_type === (current_block_type = select_block_type(ctx2, dirty)) && if_block) {
        if_block.p(ctx2, dirty);
      } else {
        if_block.d(1);
        if_block = current_block_type(ctx2);
        if (if_block) {
          if_block.c();
          if_block.m(ul, null);
        }
      }
    },
    d(detaching) {
      if (detaching)
        detach(td);
      if_block.d();
    }
  };
}
function create_else_block_2(ctx) {
  let t;
  return {
    c() {
      t = text("-");
    },
    m(target, anchor) {
      insert(target, t, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching)
        detach(t);
    }
  };
}
function create_if_block_52(ctx) {
  let each_1_anchor;
  let each_value_1 = [...ctx[1]];
  let each_blocks = [];
  for (let i = 0; i < each_value_1.length; i += 1) {
    each_blocks[i] = create_each_block_12(get_each_context_12(ctx, each_value_1, i));
  }
  return {
    c() {
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      each_1_anchor = empty();
    },
    m(target, anchor) {
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(target, anchor);
      }
      insert(target, each_1_anchor, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & 4098) {
        each_value_1 = [...ctx2[1]];
        let i;
        for (i = 0; i < each_value_1.length; i += 1) {
          const child_ctx = get_each_context_12(ctx2, each_value_1, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block_12(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value_1.length;
      }
    },
    d(detaching) {
      destroy_each(each_blocks, detaching);
      if (detaching)
        detach(each_1_anchor);
    }
  };
}
function create_each_block_12(ctx) {
  let li;
  let strong;
  let rollerEl_action;
  let t0;
  let t1_value = ctx[20].name + "";
  let t1;
  let t2_value = ctx[21] == 1 ? "" : "s";
  let t2;
  let t3;
  let li_aria_label_value;
  let mounted;
  let dispose;
  return {
    c() {
      li = element("li");
      strong = element("strong");
      t0 = text("\xA0");
      t1 = text(t1_value);
      t2 = text(t2_value);
      t3 = space();
      attr(li, "aria-label", li_aria_label_value = ctx[12](ctx[20]));
    },
    m(target, anchor) {
      insert(target, li, anchor);
      append(li, strong);
      append(li, t0);
      append(li, t1);
      append(li, t2);
      append(li, t3);
      if (!mounted) {
        dispose = action_destroyer(rollerEl_action = ctx[11].call(null, strong, ctx[20]));
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (rollerEl_action && is_function(rollerEl_action.update) && dirty & 2)
        rollerEl_action.update.call(null, ctx[20]);
      if (dirty & 2 && t1_value !== (t1_value = ctx[20].name + ""))
        set_data(t1, t1_value);
      if (dirty & 2 && t2_value !== (t2_value = ctx[21] == 1 ? "" : "s"))
        set_data(t2, t2_value);
      if (dirty & 2 && li_aria_label_value !== (li_aria_label_value = ctx[12](ctx[20]))) {
        attr(li, "aria-label", li_aria_label_value);
      }
    },
    d(detaching) {
      if (detaching)
        detach(li);
      mounted = false;
      dispose();
    }
  };
}
function create_if_block_22(ctx) {
  let td;
  let ul;
  let show_if;
  function select_block_type_1(ctx2, dirty) {
    if (dirty & 12)
      show_if = null;
    if (show_if == null)
      show_if = !!(!ctx2[3].includes("players") && ctx2[2] instanceof Array && ctx2[2].length);
    if (show_if)
      return create_if_block_32;
    return create_else_block_12;
  }
  let current_block_type = select_block_type_1(ctx, -1);
  let if_block = current_block_type(ctx);
  return {
    c() {
      td = element("td");
      ul = element("ul");
      if_block.c();
      attr(ul, "class", "encounter-players encounter-list svelte-bf6d6a");
    },
    m(target, anchor) {
      insert(target, td, anchor);
      append(td, ul);
      if_block.m(ul, null);
    },
    p(ctx2, dirty) {
      if (current_block_type === (current_block_type = select_block_type_1(ctx2, dirty)) && if_block) {
        if_block.p(ctx2, dirty);
      } else {
        if_block.d(1);
        if_block = current_block_type(ctx2);
        if (if_block) {
          if_block.c();
          if_block.m(ul, null);
        }
      }
    },
    d(detaching) {
      if (detaching)
        detach(td);
      if_block.d();
    }
  };
}
function create_else_block_12(ctx) {
  let t;
  return {
    c() {
      t = text("-");
    },
    m(target, anchor) {
      insert(target, t, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching)
        detach(t);
    }
  };
}
function create_if_block_32(ctx) {
  let each_1_anchor;
  let each_value = ctx[2];
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block2(get_each_context2(ctx, each_value, i));
  }
  return {
    c() {
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      each_1_anchor = empty();
    },
    m(target, anchor) {
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(target, anchor);
      }
      insert(target, each_1_anchor, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & 4) {
        each_value = ctx2[2];
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context2(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block2(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value.length;
      }
    },
    d(detaching) {
      destroy_each(each_blocks, detaching);
      if (detaching)
        detach(each_1_anchor);
    }
  };
}
function create_each_block2(ctx) {
  let li;
  let t0_value = ctx[17] + "";
  let t0;
  let t1;
  return {
    c() {
      li = element("li");
      t0 = text(t0_value);
      t1 = space();
    },
    m(target, anchor) {
      insert(target, li, anchor);
      append(li, t0);
      append(li, t1);
    },
    p(ctx2, dirty) {
      if (dirty & 4 && t0_value !== (t0_value = ctx2[17] + ""))
        set_data(t0, t0_value);
    },
    d(detaching) {
      if (detaching)
        detach(li);
    }
  };
}
function create_if_block2(ctx) {
  let td;
  let div;
  function select_block_type_2(ctx2, dirty) {
    if (ctx2[6] > 0 && ctx2[7])
      return create_if_block_12;
    return create_else_block2;
  }
  let current_block_type = select_block_type_2(ctx, -1);
  let if_block = current_block_type(ctx);
  return {
    c() {
      td = element("td");
      div = element("div");
      if_block.c();
      attr(div, "class", "encounter-xp difficulty");
    },
    m(target, anchor) {
      insert(target, td, anchor);
      append(td, div);
      if_block.m(div, null);
    },
    p(ctx2, dirty) {
      if (current_block_type === (current_block_type = select_block_type_2(ctx2, dirty)) && if_block) {
        if_block.p(ctx2, dirty);
      } else {
        if_block.d(1);
        if_block = current_block_type(ctx2);
        if (if_block) {
          if_block.c();
          if_block.m(div, null);
        }
      }
    },
    d(detaching) {
      if (detaching)
        detach(td);
      if_block.d();
    }
  };
}
function create_else_block2(ctx) {
  let t;
  return {
    c() {
      t = text("-");
    },
    m(target, anchor) {
      insert(target, t, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching)
        detach(t);
    }
  };
}
function create_if_block_12(ctx) {
  let span;
  let strong;
  let t_value = ctx[7].difficulty + "";
  let t;
  let span_aria_label_value;
  let span_class_value;
  return {
    c() {
      span = element("span");
      strong = element("strong");
      t = text(t_value);
      attr(strong, "class", "difficulty-label svelte-bf6d6a");
      attr(span, "aria-label", span_aria_label_value = formatDifficultyReport(ctx[7]));
      attr(span, "class", span_class_value = null_to_empty(ctx[7].difficulty.toLowerCase()) + " svelte-bf6d6a");
    },
    m(target, anchor) {
      insert(target, span, anchor);
      append(span, strong);
      append(strong, t);
    },
    p(ctx2, dirty) {
      if (dirty & 128 && t_value !== (t_value = ctx2[7].difficulty + ""))
        set_data(t, t_value);
      if (dirty & 128 && span_aria_label_value !== (span_aria_label_value = formatDifficultyReport(ctx2[7]))) {
        attr(span, "aria-label", span_aria_label_value);
      }
      if (dirty & 128 && span_class_value !== (span_class_value = null_to_empty(ctx2[7].difficulty.toLowerCase()) + " svelte-bf6d6a")) {
        attr(span, "class", span_class_value);
      }
    },
    d(detaching) {
      if (detaching)
        detach(span);
    }
  };
}
function create_fragment2(ctx) {
  let tr;
  let td0;
  let t0;
  let t1;
  let show_if_1 = ctx[5].includes("creatures");
  let t2;
  let show_if = ctx[5].includes("players");
  let t3;
  let t4;
  let td1;
  let div2;
  let div0;
  let open_action;
  let t5;
  let div1;
  let addButton_action;
  let mounted;
  let dispose;
  let if_block0 = show_if_1 && create_if_block_42(ctx);
  let if_block1 = show_if && create_if_block_22(ctx);
  let if_block2 = ctx[4].data.displayDifficulty && create_if_block2(ctx);
  return {
    c() {
      tr = element("tr");
      td0 = element("td");
      t0 = text(ctx[0]);
      t1 = space();
      if (if_block0)
        if_block0.c();
      t2 = space();
      if (if_block1)
        if_block1.c();
      t3 = space();
      if (if_block2)
        if_block2.c();
      t4 = space();
      td1 = element("td");
      div2 = element("div");
      div0 = element("div");
      t5 = space();
      div1 = element("div");
      attr(div0, "class", "svelte-bf6d6a");
      attr(div1, "aria-label", "Add to Encounter");
      attr(div1, "class", "svelte-bf6d6a");
      attr(div2, "class", "icons svelte-bf6d6a");
      attr(tr, "class", "encounter-row");
    },
    m(target, anchor) {
      insert(target, tr, anchor);
      append(tr, td0);
      append(td0, t0);
      append(tr, t1);
      if (if_block0)
        if_block0.m(tr, null);
      append(tr, t2);
      if (if_block1)
        if_block1.m(tr, null);
      append(tr, t3);
      if (if_block2)
        if_block2.m(tr, null);
      append(tr, t4);
      append(tr, td1);
      append(td1, div2);
      append(div2, div0);
      append(div2, t5);
      append(div2, div1);
      if (!mounted) {
        dispose = [
          action_destroyer(open_action = ctx[8].call(null, div0)),
          action_destroyer(addButton_action = ctx[9].call(null, div1)),
          listen(div1, "click", ctx[10])
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & 1)
        set_data(t0, ctx2[0]);
      if (dirty & 32)
        show_if_1 = ctx2[5].includes("creatures");
      if (show_if_1) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
        } else {
          if_block0 = create_if_block_42(ctx2);
          if_block0.c();
          if_block0.m(tr, t2);
        }
      } else if (if_block0) {
        if_block0.d(1);
        if_block0 = null;
      }
      if (dirty & 32)
        show_if = ctx2[5].includes("players");
      if (show_if) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
        } else {
          if_block1 = create_if_block_22(ctx2);
          if_block1.c();
          if_block1.m(tr, t3);
        }
      } else if (if_block1) {
        if_block1.d(1);
        if_block1 = null;
      }
      if (ctx2[4].data.displayDifficulty) {
        if (if_block2) {
          if_block2.p(ctx2, dirty);
        } else {
          if_block2 = create_if_block2(ctx2);
          if_block2.c();
          if_block2.m(tr, t4);
        }
      } else if (if_block2) {
        if_block2.d(1);
        if_block2 = null;
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(tr);
      if (if_block0)
        if_block0.d();
      if (if_block1)
        if_block1.d();
      if (if_block2)
        if_block2.d();
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance2($$self, $$props, $$invalidate) {
  let { name: name2 = "Encounter" } = $$props;
  let { creatures } = $$props;
  let { players: players2 } = $$props;
  let { hide: hide2 = [] } = $$props;
  let { playerLevels } = $$props;
  let { plugin } = $$props;
  let { headers } = $$props;
  let totalXP2;
  let creatureMap = /* @__PURE__ */ new Map();
  const rollerMap = /* @__PURE__ */ new Map();
  for (let [creature, count] of creatures) {
    let number = Number(count);
    if (plugin.canUseDiceRoller) {
      let roller = plugin.getRoller(`${count}`);
      roller.on("new-result", () => {
        creatureMap.set(creature, roller.result);
        $$invalidate(14, creatureMap);
        $$invalidate(6, totalXP2 = [...creatureMap].reduce((a, c) => a + c[0].xp * c[1], 0));
      });
      rollerMap.set(creature, roller);
      roller.roll();
    } else {
      creatureMap.set(creature, number);
    }
  }
  totalXP2 = [...creatureMap].reduce((a, c) => a + c[0].xp * c[1], 0);
  let difficulty;
  const open = (node) => {
    new import_obsidian5.ExtraButtonComponent(node).setIcon(START_ENCOUNTER).setTooltip("Begin Encounter").onClick(async () => {
      if (!plugin.view) {
        await plugin.addTrackerView();
      }
      const view = plugin.view;
      const creatures2 = [...creatureMap].map(([creature, number]) => {
        if (isNaN(Number(number)) || number < 1)
          return [creature];
        return [...Array(number).keys()].map((v) => Creature.new(creature));
      }).flat();
      tracker.new({
        creatures: creatures2.map((c) => c.toJSON()),
        name: name2,
        round: 1,
        state: false,
        logFile: null
      });
      plugin.app.workspace.revealLeaf(view.leaf);
    });
  };
  const addButton = (node) => {
    new import_obsidian5.ExtraButtonComponent(node).setIcon("plus-with-circle");
  };
  const add = async (evt) => {
    if (!plugin.view) {
      await plugin.addTrackerView();
    }
    const view = plugin.view;
    const creatures2 = [...creatureMap].map(([creature, number]) => {
      if (isNaN(Number(number)) || number < 1)
        return [creature];
      return [...Array(number).keys()].map((v) => Creature.new(creature));
    }).flat();
    tracker.add(...creatures2);
  };
  const rollerEl = (node, creature) => {
    if (plugin.canUseDiceRoller && rollerMap.has(creature) && !rollerMap.get(creature).isStatic) {
      node.appendChild(rollerMap.get(creature)?.containerEl ?? createSpan({ text: `${creatureMap.get(creature)}` }));
    } else {
      node.setText(`${creatureMap.get(creature)}`);
    }
  };
  const joiner = (index, length) => {
    if (length == 1 || index == 0)
      return "";
    const delim = length > 2 ? "," : "";
    if (index == length - 1)
      return `${delim} and `;
    return `${delim} `;
  };
  const label = (creature) => {
    if (!creature)
      return;
    let label2 = [];
    if (creature.hp) {
      label2.push(`HP: ${creature.hp}`);
    }
    if (creature.ac) {
      label2.push(`AC: ${creature.ac}`);
    }
    if (creature.modifier) {
      label2.push(`MOD: ${creature.modifier}`);
    }
    return `${label2.join(", ")}`;
  };
  $$self.$$set = ($$props2) => {
    if ("name" in $$props2)
      $$invalidate(0, name2 = $$props2.name);
    if ("creatures" in $$props2)
      $$invalidate(1, creatures = $$props2.creatures);
    if ("players" in $$props2)
      $$invalidate(2, players2 = $$props2.players);
    if ("hide" in $$props2)
      $$invalidate(3, hide2 = $$props2.hide);
    if ("playerLevels" in $$props2)
      $$invalidate(13, playerLevels = $$props2.playerLevels);
    if ("plugin" in $$props2)
      $$invalidate(4, plugin = $$props2.plugin);
    if ("headers" in $$props2)
      $$invalidate(5, headers = $$props2.headers);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & 24640) {
      $: {
        if (!isNaN(totalXP2)) {
          $$invalidate(7, difficulty = encounterDifficulty(playerLevels, totalXP2, [...creatureMap.values()].reduce((acc, curr) => acc + curr)));
        }
      }
    }
  };
  return [
    name2,
    creatures,
    players2,
    hide2,
    plugin,
    headers,
    totalXP2,
    difficulty,
    open,
    addButton,
    add,
    rollerEl,
    label,
    playerLevels,
    creatureMap
  ];
}
var EncounterRow = class extends SvelteComponent {
  constructor(options) {
    super();
    init(
      this,
      options,
      instance2,
      create_fragment2,
      safe_not_equal,
      {
        name: 0,
        creatures: 1,
        players: 2,
        hide: 3,
        playerLevels: 13,
        plugin: 4,
        headers: 5
      },
      add_css2
    );
  }
};
var EncounterRow_default = EncounterRow;

// src/encounter/ui/EncounterTable.svelte
function get_each_context3(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[3] = list[i];
  return child_ctx;
}
function create_if_block_23(ctx) {
  let th;
  return {
    c() {
      th = element("th");
      th.textContent = "Creatures";
    },
    m(target, anchor) {
      insert(target, th, anchor);
    },
    d(detaching) {
      if (detaching)
        detach(th);
    }
  };
}
function create_if_block_13(ctx) {
  let th;
  return {
    c() {
      th = element("th");
      th.textContent = "Players";
    },
    m(target, anchor) {
      insert(target, th, anchor);
    },
    d(detaching) {
      if (detaching)
        detach(th);
    }
  };
}
function create_if_block3(ctx) {
  let th;
  return {
    c() {
      th = element("th");
      th.textContent = "Difficulty";
    },
    m(target, anchor) {
      insert(target, th, anchor);
    },
    d(detaching) {
      if (detaching)
        detach(th);
    }
  };
}
function create_each_block3(ctx) {
  let encounterrow;
  let current;
  const encounterrow_spread_levels = [
    ctx[3],
    { headers: ctx[2] },
    { plugin: ctx[1] }
  ];
  let encounterrow_props = {};
  for (let i = 0; i < encounterrow_spread_levels.length; i += 1) {
    encounterrow_props = assign(encounterrow_props, encounterrow_spread_levels[i]);
  }
  encounterrow = new EncounterRow_default({ props: encounterrow_props });
  return {
    c() {
      create_component(encounterrow.$$.fragment);
    },
    m(target, anchor) {
      mount_component(encounterrow, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const encounterrow_changes = dirty & 7 ? get_spread_update(encounterrow_spread_levels, [
        dirty & 1 && get_spread_object(ctx2[3]),
        dirty & 4 && { headers: ctx2[2] },
        dirty & 2 && { plugin: ctx2[1] }
      ]) : {};
      encounterrow.$set(encounterrow_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(encounterrow.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(encounterrow.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(encounterrow, detaching);
    }
  };
}
function create_fragment3(ctx) {
  let table;
  let thead;
  let tr;
  let th0;
  let t1;
  let show_if_1 = ctx[2].includes("creatures");
  let t2;
  let show_if = ctx[2].includes("players");
  let t3;
  let t4;
  let th1;
  let t6;
  let tbody;
  let current;
  let if_block0 = show_if_1 && create_if_block_23(ctx);
  let if_block1 = show_if && create_if_block_13(ctx);
  let if_block2 = ctx[1].data.displayDifficulty && create_if_block3(ctx);
  let each_value = ctx[0];
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block3(get_each_context3(ctx, each_value, i));
  }
  const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
    each_blocks[i] = null;
  });
  return {
    c() {
      table = element("table");
      thead = element("thead");
      tr = element("tr");
      th0 = element("th");
      th0.textContent = "Name";
      t1 = space();
      if (if_block0)
        if_block0.c();
      t2 = space();
      if (if_block1)
        if_block1.c();
      t3 = space();
      if (if_block2)
        if_block2.c();
      t4 = space();
      th1 = element("th");
      th1.textContent = "Launch";
      t6 = space();
      tbody = element("tbody");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      attr(table, "class", "initiative-tracker encounter-table");
    },
    m(target, anchor) {
      insert(target, table, anchor);
      append(table, thead);
      append(thead, tr);
      append(tr, th0);
      append(tr, t1);
      if (if_block0)
        if_block0.m(tr, null);
      append(tr, t2);
      if (if_block1)
        if_block1.m(tr, null);
      append(tr, t3);
      if (if_block2)
        if_block2.m(tr, null);
      append(tr, t4);
      append(tr, th1);
      append(table, t6);
      append(table, tbody);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(tbody, null);
      }
      current = true;
    },
    p(ctx2, [dirty]) {
      if (ctx2[1].data.displayDifficulty) {
        if (if_block2) {
        } else {
          if_block2 = create_if_block3(ctx2);
          if_block2.c();
          if_block2.m(tr, t4);
        }
      } else if (if_block2) {
        if_block2.d(1);
        if_block2 = null;
      }
      if (dirty & 7) {
        each_value = ctx2[0];
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context3(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
            transition_in(each_blocks[i], 1);
          } else {
            each_blocks[i] = create_each_block3(child_ctx);
            each_blocks[i].c();
            transition_in(each_blocks[i], 1);
            each_blocks[i].m(tbody, null);
          }
        }
        group_outros();
        for (i = each_value.length; i < each_blocks.length; i += 1) {
          out(i);
        }
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i = 0; i < each_value.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(table);
      if (if_block0)
        if_block0.d();
      if (if_block1)
        if_block1.d();
      if (if_block2)
        if_block2.d();
      destroy_each(each_blocks, detaching);
    }
  };
}
function instance3($$self, $$props, $$invalidate) {
  let { encounters } = $$props;
  let { plugin } = $$props;
  const headers = [];
  if (encounters.some((encounter2) => !encounter2.hide.includes("players") && (typeof encounter2.players == "boolean" && encounter2.players || encounter2.players instanceof Array && encounter2.players.length)))
    headers.push("players");
  if (encounters.some((encounter2) => !encounter2.hide.includes("creatures") && encounter2.creatures.size))
    headers.push("creatures");
  $$self.$$set = ($$props2) => {
    if ("encounters" in $$props2)
      $$invalidate(0, encounters = $$props2.encounters);
    if ("plugin" in $$props2)
      $$invalidate(1, plugin = $$props2.plugin);
  };
  return [encounters, plugin, headers];
}
var EncounterTable = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance3, create_fragment3, safe_not_equal, { encounters: 0, plugin: 1 });
  }
};
var EncounterTable_default = EncounterTable;

// src/encounter/index.ts
var equivalent = (creature, existing) => {
  return creature.name == existing.name && creature.display == existing.display && creature.ac == existing.ac && creature.hp == existing.hp && creature.modifier == existing.modifier && creature.xp == existing.xp && creature.hidden == existing.hidden;
};
var EncounterParser = class {
  constructor(plugin) {
    this.plugin = plugin;
  }
  async parse(params) {
    const name2 = params.name;
    const party = params.party ?? this.plugin.data.defaultParty;
    const players2 = this.parsePlayers(params);
    const hide2 = this.parseHide(params);
    const rawMonsters = params.creatures ?? [];
    let creatures = await this.parseRawCreatures(rawMonsters);
    const xp = params.xp ?? null;
    const playerLevels = this.plugin.data.players.map((p) => p.level).filter((p) => p);
    return {
      name: name2,
      players: players2,
      party,
      hide: hide2,
      creatures,
      xp,
      playerLevels
    };
  }
  parseHide(params) {
    if (!("hide" in (params ?? {})))
      return [];
    if (typeof params.hide == "string")
      return ["creatures", "players"].filter((v) => params.hide == v);
    if (Array.isArray(params.hide))
      return ["creatures", "players"].filter(
        (v) => params.hide.includes(v)
      );
    return [];
  }
  parsePlayers(params) {
    const partyName = params.party ?? this.plugin.data.defaultParty;
    const playersToReturn = [];
    const players2 = params.players;
    if (partyName && this.plugin.data.parties.find(
      (p) => p.name.toLowerCase() == partyName.toLowerCase()
    )) {
      const party = this.plugin.data.parties.find(
        (p) => p.name.toLowerCase() == partyName.toLowerCase()
      );
      playersToReturn.push(...party.players);
    }
    if (players2 == "none" || players2 == false) {
      playersToReturn.splice(0, playersToReturn.length);
    } else if (players2 == true) {
      playersToReturn.push(
        ...this.plugin.data.players.map((p) => p.name)
      );
    } else if (!players2 && !params.party) {
    } else if (typeof players2 == "string") {
      playersToReturn.push(players2);
    } else if (Array.isArray(players2)) {
      playersToReturn.push(
        ...(this.plugin.data.players ?? []).map((p) => p.name).filter(
          (p) => players2.map((n) => n.toLowerCase()).includes(p.toLowerCase())
        )
      );
    }
    return Array.from(new Set(playersToReturn));
  }
  async parseRawCreatures(rawMonsters) {
    const creatureMap = /* @__PURE__ */ new Map();
    if (rawMonsters && Array.isArray(rawMonsters)) {
      for (const raw of rawMonsters) {
        const { creature, number = 1 } = this.parseRawCreature(raw) ?? {};
        if (!creature)
          continue;
        const stats = {
          name: creature.name,
          display: creature.display,
          ac: creature.ac,
          hp: creature.hp,
          modifier: creature.modifier,
          xp: creature.xp,
          hidden: creature.hidden
        };
        const existing = [...creatureMap].find(
          ([c]) => equivalent(c, stats)
        );
        if (!existing) {
          creatureMap.set(creature, number);
        } else {
          let amount;
          if (!isNaN(Number(number)) && !isNaN(Number(existing[1]))) {
            amount = Number(number) + existing[1];
          } else {
            amount = `${number} + ${existing[1]}`;
          }
          creatureMap.set(existing[0], amount);
        }
      }
    }
    return creatureMap;
  }
  parseRawCreature(raw) {
    if (!raw)
      return {};
    let monster, number = 1;
    if (typeof raw == "string") {
      const match = raw.match(/(\d+)?:?\s?(.+)/) ?? [];
      number = isNaN(Number(match[1] ?? null)) ? number : Number(match[1]);
      monster = match[2];
    } else if (typeof raw == "object") {
      let entries = Object.entries(raw).flat();
      number = entries[0];
      monster = entries[1];
    }
    if (!monster)
      return {};
    if (typeof number == "string" && !this.plugin.canUseDiceRoller && /\d+d\d+/.test(number)) {
      number = 1;
    }
    if (!isNaN(Number(number)))
      number = Number(number);
    if (!number || typeof number == "number" && number < 1)
      number = 1;
    let name2, display, hp, ac, mod, xp;
    if (typeof monster == "string") {
      name2 = monster.split(/,\s?/)[0];
      [hp, ac, mod, xp] = monster.split(/,\s?/).slice(1).map((v) => isNaN(Number(v)) ? null : Number(v));
    } else if (Array.isArray(monster)) {
      if (typeof monster[0] == "string") {
        name2 = monster[0];
        display = monster[1];
      } else if (Array.isArray(monster[0])) {
        name2 = monster[0][0];
        display = monster[0][1];
      }
      [hp, ac, mod, xp] = monster.slice(1).map((v) => isNaN(Number(v)) ? null : Number(v));
    } else if (typeof monster == "object") {
      ({ creature: name2, name: display, hp, ac, mod, xp } = monster);
    }
    if (!name2 || typeof name2 != "string")
      return {};
    let existing = this.plugin.bestiary.find((c) => c.name == name2);
    let creature = existing ? Creature.from(existing) : new Creature({ name: name2 });
    creature.display = display;
    creature.hp = hp ?? creature.hp;
    creature.ac = ac ?? creature.ac;
    creature.modifier = mod ?? creature.modifier;
    creature.xp = xp ?? creature.xp;
    return { creature, number };
  }
};
var EncounterComponent = class {
  constructor(params, encounterEl, plugin) {
    this.params = params;
    this.encounterEl = encounterEl;
    this.plugin = plugin;
    this.display();
  }
  async display() {
    this.instance = new Encounter_default({
      target: this.encounterEl,
      props: {
        plugin: this.plugin,
        name: this.params.name,
        party: this.params.party,
        players: this.params.players,
        playerLevels: this.params.playerLevels,
        creatures: this.params.creatures,
        hide: this.params.hide
      }
    });
  }
};
var EncounterBlock = class extends import_obsidian6.MarkdownRenderChild {
  constructor(plugin, src, containerEl, table = false) {
    super(containerEl);
    this.plugin = plugin;
    this.src = src;
    this.containerEl = containerEl;
    this.table = table;
    this.parser = new EncounterParser(this.plugin);
  }
  onload() {
    if (this.table) {
      this.postprocessTable();
    } else {
      this.postprocess();
    }
  }
  async postprocess() {
    const encounters = this.src.split("---") ?? [];
    const containerEl = this.containerEl.createDiv("encounter-container");
    const empty2 = containerEl.createSpan({
      text: "No encounters created. Please check your syntax and try again."
    });
    for (let encounter2 of encounters) {
      if (!encounter2?.trim().length)
        continue;
      try {
        const params = (0, import_obsidian6.parseYaml)(encounter2);
        new EncounterComponent(
          await this.parser.parse(params),
          containerEl.createDiv("encounter-instance"),
          this.plugin
        );
        empty2.detach();
      } catch (e) {
        console.error(e);
        new import_obsidian6.Notice(
          "Initiative Tracker: here was an issue parsing: \n\n" + encounter2
        );
      }
    }
    this.registerEvent(
      this.plugin.app.workspace.on("initiative-tracker:unload", () => {
        this.containerEl.empty();
        this.containerEl.createEl("pre").createEl("code", {
          text: `\`\`\`encounter
${this.src}\`\`\``
        });
      })
    );
  }
  async postprocessTable() {
    const encounterSource = this.src.split("---") ?? [];
    const containerEl = this.containerEl.createDiv("encounter-container");
    const empty2 = containerEl.createSpan({
      text: "No encounters created. Please check your syntax and try again."
    });
    const encounters = [];
    for (let encounter2 of encounterSource) {
      if (!encounter2?.trim().length)
        continue;
      try {
        const params = (0, import_obsidian6.parseYaml)(encounter2);
        encounters.push(await this.parser.parse(params));
      } catch (e) {
        console.error(e);
        new import_obsidian6.Notice(
          "Initiative Tracker: here was an issue parsing: \n\n" + encounter2
        );
      }
    }
    if (encounters.length) {
      empty2.detach();
      new EncounterTable_default({
        target: this.containerEl,
        props: {
          encounters,
          plugin: this.plugin
        }
      });
    }
    this.registerEvent(
      this.plugin.app.workspace.on("initiative-tracker:unload", () => {
        this.containerEl.empty();
        this.containerEl.createEl("pre").createEl("code", {
          text: `\`\`\`encounter-table
${this.src}\`\`\``
        });
      })
    );
  }
};

// src/tracker/stores/tracker.ts
var import_obsidian7 = require("obsidian");
var modifier = import_obsidian7.Platform.isMacOS ? "Meta" : "Control";
function createTracker() {
  const creatures = writable([]);
  const updating = writable(/* @__PURE__ */ new Map());
  const { subscribe: subscribe2, set, update: update2 } = creatures;
  let _logger;
  const $round = writable(1);
  const $state = writable(false);
  const setState = (state) => {
    $state.set(state);
    if (state) {
      if (!_logger?.logging) {
        _logger?.new({
          name: get_store_value($name),
          players: current_order.filter((c) => c.player),
          creatures: current_order.filter((c) => !c.player),
          round: get_store_value($round)
        });
      } else {
        _logger?.log(`Combat re-started`);
      }
    } else {
      _logger?.log("Combat stopped");
    }
    updateAndSave((creatures2) => {
      if (creatures2.length && !creatures2.find((c) => c.active)) {
        current_order[0].active = true;
      }
      return creatures2;
    });
  };
  const $name = writable();
  const $party = writable();
  const data = writable();
  let _settings;
  const condensed = derived(creatures, (values) => {
    if (_settings.condense) {
      values.forEach((creature, _, arr) => {
        const equiv = arr.filter((c) => equivalent(c, creature));
        equiv.forEach((eq) => {
          eq.initiative = Math.max(...equiv.map((i) => i.initiative));
        });
      });
    }
    return values;
  });
  let current_order = [];
  const ordered = derived(condensed, (values) => {
    const sort = [...values];
    sort.sort((a, b) => {
      return b.initiative - a.initiative;
    });
    current_order = sort;
    return sort;
  });
  const updateCreatures = (...updates) => update2((creatures2) => {
    for (const { creature, change } of updates) {
      if (change.initiative) {
        creature.initiative = Number(change.initiative);
      }
      if (change.name) {
        creature.name = change.name;
        creature.number = 0;
      }
      if (change.hp) {
        change.hp = Number(change.hp);
        if (change.hp < 0 && creature.temp > 0) {
          const remaining = creature.temp + change.hp;
          creature.temp = Math.max(0, remaining);
          change.hp = Math.min(0, remaining);
        }
        if (_settings.clamp && creature.hp + change.hp < 0) {
          change.hp = -creature.hp;
        }
        if (change.hp > 0 && change.hp + creature.hp > creature.max) {
          switch (_settings.hpOverflow) {
            case OVERFLOW_TYPE.ignore:
              change.hp = Math.max(
                creature.max - creature.hp,
                0
              );
              break;
            case OVERFLOW_TYPE.temp:
              change.temp = change.hp - Math.min(creature.max - creature.hp, 0);
              change.hp -= change.temp;
              break;
            case OVERFLOW_TYPE.current:
              break;
          }
        }
        creature.hp += change.hp;
        if (_settings.autoStatus && creature.hp <= 0) {
          creature.status.add(
            _settings.statuses.find(
              (s) => s.name == "Unconscious"
            )
          );
        }
      }
      if (change.max) {
        if (creature.hp == creature.max) {
          creature.hp = Number(change.max);
        }
        creature.max = Number(change.max);
      }
      if (change.ac) {
        creature.ac = change.ac;
      }
      if (change.temp) {
        let baseline = 0;
        if (_settings.additiveTemp) {
          baseline = creature.temp;
        }
        creature.temp = Math.max(
          creature.temp,
          baseline + change.temp
        );
      }
      if (change.marker) {
        creature.marker = change.marker;
      }
      if (change.status?.length) {
        for (const status of change.status) {
          if (creature.status.has(status)) {
            creature.status.delete(status);
            _logger?.log(
              `${creature.name} relieved of status ${status.name}`
            );
          } else {
            creature.status.add(status);
          }
        }
      }
      if ("hidden" in change) {
        creature.hidden = change.hidden;
      }
      if (!creatures2.includes(creature)) {
        creatures2.push(creature);
      }
    }
    return creatures2;
  });
  const getEncounterState = () => {
    return {
      creatures: get_store_value(creatures).map((c) => c.toJSON()),
      state: get_store_value($state),
      name: get_store_value($name),
      round: get_store_value($round),
      logFile: _logger?.getLogFile() ?? null
    };
  };
  const trySave = () => {
    app.workspace.trigger(
      "initiative-tracker:save-state",
      getEncounterState()
    );
  };
  function updateAndSave(updater) {
    update2(updater);
    trySave();
  }
  const adding = writable(/* @__PURE__ */ new Map());
  const setNumbers = (list, sublist = list) => {
    for (let i = 0; i < sublist.length; i++) {
      const creature = sublist[i];
      if (creature.player || list.filter((c) => c.name == creature.name).length == 1) {
        continue;
      }
      if (creature.number > 0)
        continue;
      const prior = list.filter(
        (c) => c.display ? c.display == creature.display : c.name == creature.name
      ).map((c) => c.number);
      creature.number = prior?.length ? Math.max(...prior) + 1 : 1;
    }
  };
  return {
    subscribe: subscribe2,
    set,
    data,
    setData: (settings) => {
      data.set(settings);
      _settings = settings;
    },
    getLogger: () => _logger,
    setLogger: (logger) => {
      _logger = logger;
    },
    updating,
    updateCreatures,
    setUpdate: (creature, evt) => updating.update((creatures2) => {
      if (creatures2.has(creature)) {
        creatures2.delete(creature);
      } else {
        creatures2.set(creature, {
          saved: evt.getModifierState("Shift"),
          resist: evt.getModifierState(modifier),
          customMod: evt.getModifierState("Alt") ? "2" : "1"
        });
      }
      return creatures2;
    }),
    doUpdate: (toAddString, tag) => updating.update((updatingCreatures) => {
      const messages = [];
      const updates = [];
      updatingCreatures.forEach((entry, creature) => {
        const roundHalf = !toAddString.includes(".");
        const change = {};
        const modifier2 = (entry.saved ? 0.5 : 1) * (entry.resist ? 0.5 : 1) * Number(entry.customMod);
        const name2 = [creature.name];
        if (creature.number > 0) {
          name2.push(`${creature.number}`);
        }
        const message = {
          name: name2.join(" "),
          hp: null,
          temp: false,
          status: null,
          saved: false,
          unc: false
        };
        if (toAddString.charAt(0) == "t") {
          let toAdd = Number(toAddString.slice(1));
          message.hp = toAdd;
          message.temp = true;
          change.temp = toAdd;
        } else {
          let toAdd = Number(toAddString);
          toAdd = -1 * Math.sign(toAdd) * Math.max(Math.abs(toAdd) * modifier2, 1);
          toAdd = roundHalf ? Math.trunc(toAdd) : toAdd;
          message.hp = toAdd;
          if (creature.hp <= 0) {
            message.unc = true;
          }
          change.hp = toAdd;
        }
        if (tag) {
          message.status = tag.name;
          if (!entry.saved) {
            change.status = [tag];
          } else {
            message.saved = true;
          }
        }
        messages.push(message);
        updates.push({ creature, change });
      });
      _logger?.logUpdate(messages);
      updateCreatures(...updates);
      updatingCreatures.clear();
      return updatingCreatures;
    }),
    clearUpdate: () => updating.update((updates) => {
      updates.clear();
      return updates;
    }),
    round: $round,
    name: $name,
    party: $party,
    setParty: (party, plugin) => updateAndSave((creatures2) => {
      const players2 = plugin.getPlayersForParty(party);
      $party.set(party);
      creatures2 = [...creatures2.filter((c) => !c.player), ...players2];
      return creatures2;
    }),
    state: $state,
    getState: () => get_store_value($state),
    toggleState: () => {
      setState(!get_store_value($state));
    },
    setState,
    goToNext: () => updateAndSave((creatures2) => {
      const current = current_order.findIndex((c) => {
        return c.active;
      });
      if (current == -1) {
        current_order[0].active = true;
      } else {
        let enabled = current_order.filter((c) => c.enabled);
        let nextIndex = ((current + 1) % enabled.length + enabled.length) % enabled.length;
        const next2 = current_order[current_order.findIndex(
          (c) => c == enabled[nextIndex]
        )];
        if (next2) {
          current_order[current].active = false;
          if (nextIndex < current) {
            const round2 = get_store_value($round) + 1;
            $round.set(round2);
            _logger?.log("###", `Round ${round2}`);
          }
          _logger?.log("#####", `${next2.name}'s turn`);
          next2.active = true;
        }
      }
      return creatures2;
    }),
    goToPrevious: () => updateAndSave((creatures2) => {
      const current = current_order.findIndex((c) => {
        return c.active;
      });
      if (current == 0 && get_store_value($round) == 1)
        return creatures2;
      if (current == -1) {
        current_order[0].active = true;
      } else {
        let enabled = current_order.filter((c) => c.enabled);
        let nextIndex = ((current - 1) % enabled.length + enabled.length) % enabled.length;
        const next2 = current_order[current_order.findIndex(
          (c) => c == enabled[nextIndex]
        )];
        if (next2) {
          current_order[current].active = false;
          if (nextIndex > current) {
            const round2 = get_store_value($round) - 1;
            $round.set(round2);
            _logger?.log("###", `Round ${round2}`);
          }
          _logger?.log("#####", `${next2.name}'s turn`);
          next2.active = true;
        }
      }
      return creatures2;
    }),
    ordered,
    add: (...items) => updateAndSave((creatures2) => {
      creatures2.push(...items);
      _logger?.log(
        _logger?.join(items.map((c) => c.name)),
        "added to the combat."
      );
      setNumbers(creatures2, items);
      return creatures2;
    }),
    remove: (...items) => updateAndSave((creatures2) => {
      creatures2 = creatures2.filter((m) => !items.includes(m));
      _logger?.log(
        _logger?.join(items.map((c) => c.name)),
        "removed from the combat."
      );
      return creatures2;
    }),
    update: () => update2((c) => c),
    roll: (plugin) => updateAndSave((creatures2) => {
      for (let creature of creatures2) {
        creature.initiative = plugin.getInitiativeValue(
          creature.modifier
        );
        creature.active = false;
      }
      return creatures2;
    }),
    new: (state) => updateAndSave((creatures2) => {
      $round.set(state?.round ?? 1);
      $state.set(state?.state ?? false);
      $name.set(state?.name ?? null);
      creatures2 = state?.creatures ? state.creatures.map((c) => Creature.from(c)) : creatures2.filter((c) => c.player);
      setNumbers(creatures2);
      if (state?.logFile)
        _logger?.new(state.logFile);
      if (!state && _logger)
        _logger.logging = false;
      return creatures2;
    }),
    reset: () => updateAndSave((creatures2) => {
      for (let creature of creatures2) {
        creature.hp = creature.max;
        creature.enabled = true;
        creature.hidden = false;
        creature.status.clear();
        creature.active = false;
      }
      _logger?.log("Encounter HP & Statuses reset");
      return creatures2;
    }),
    getOrderedCreatures: () => get_store_value(ordered),
    logUpdate: (messages) => {
      const toLog = [];
      for (const message of messages) {
        const perCreature = [];
        if (message.hp) {
          if (message.temp) {
            perCreature.push(
              `${message.name} gained ${message.hp.toString()} temporary HP`
            );
          } else if (message.hp < 0) {
            perCreature.push(
              `${message.name} took ${(-1 * message.hp).toString()} damage${message.unc ? " and was knocked unconscious" : ""}`
            );
          } else if (message.hp > 0) {
            perCreature.push(
              `${message.name} was healed for ${message.hp.toString()} HP`
            );
          }
        }
        if (message.status) {
          if (perCreature.length) {
            perCreature.push("and");
          } else {
            perCreature.push(message.name);
          }
          if (message.saved) {
            perCreature.push(`saved against ${message.status}`);
          } else {
            perCreature.push(`took ${message.status} status`);
          }
        }
        toLog.push(perCreature.join(" "));
      }
      _logger?.log(`${toLog.join(". ")}.`);
    },
    getEncounterState,
    updateState: () => update2((c) => c)
  };
}
var tracker = createTracker();

// src/settings/settings.ts
var InitiativeTrackerSettings = class extends import_obsidian8.PluginSettingTab {
  constructor(plugin) {
    super(plugin.app, plugin);
    this.plugin = plugin;
  }
  async display() {
    try {
      let { containerEl } = this;
      containerEl.empty();
      containerEl.addClass("initiative-tracker-settings");
      containerEl.createEl("h2", { text: "Initiative Tracker Settings" });
      this._displayBase(containerEl.createDiv());
      if (!this.plugin.data.openState) {
        this.plugin.data.openState = {
          battle: true,
          player: true,
          party: true,
          plugin: true,
          status: true
        };
      }
      this._displayBattle(
        containerEl.createEl("details", {
          cls: "initiative-tracker-additional-container",
          attr: {
            ...this.plugin.data.openState.player ? { open: true } : {}
          }
        })
      );
      this._displayPlayers(
        containerEl.createEl("details", {
          cls: "initiative-tracker-additional-container",
          attr: {
            ...this.plugin.data.openState.player ? { open: true } : {}
          }
        })
      );
      this._displayParties(
        containerEl.createEl("details", {
          cls: "initiative-tracker-additional-container",
          attr: {
            ...this.plugin.data.openState.party ? { open: true } : {}
          }
        })
      );
      this._displayStatuses(
        containerEl.createEl("details", {
          cls: "initiative-tracker-additional-container",
          attr: {
            ...this.plugin.data.openState.status ? { open: true } : {}
          }
        })
      );
      this._displayIntegrations(
        containerEl.createEl("details", {
          cls: "initiative-tracker-additional-container",
          attr: {
            ...this.plugin.data.openState.plugin ? { open: true } : {}
          }
        })
      );
      this._displayHomebrew(
        containerEl.createDiv("initiative-tracker-additional-container")
      );
      const div = containerEl.createDiv("coffee");
      div.createEl("a", {
        href: "https://www.buymeacoffee.com/valentine195"
      }).createEl("img", {
        attr: {
          src: "https://img.buymeacoffee.com/button-api/?text=Buy me a coffee&emoji=\u2615&slug=valentine195&button_colour=e3e7ef&font_colour=262626&font_family=Inter&outline_colour=262626&coffee_colour=ff0000"
        }
      });
    } catch (e) {
      console.error(e);
      new import_obsidian8.Notice(
        "There was an error displaying the settings tab for Obsidian Initiative Tracker."
      );
    }
  }
  _displayBase(containerEl) {
    containerEl.empty();
    new import_obsidian8.Setting(containerEl).setHeading().setName("Basic Settings");
    new import_obsidian8.Setting(containerEl).setName("Display Beginner Tips").setDesc(
      "Display instructions in the intiative tracker, helping you get used to the workflow."
    ).addToggle((t) => {
      t.setValue(this.plugin.data.beginnerTips).onChange(
        async (v) => {
          this.plugin.data.beginnerTips = v;
          await this.plugin.saveSettings();
        }
      );
    });
    new import_obsidian8.Setting(containerEl).setName("Display Encounter Difficulty").setDesc(
      "Display encounter difficulty based on creature CR and player level. Creatures without CR or level will not be considered in the calculation."
    ).addToggle((t) => {
      t.setValue(this.plugin.data.displayDifficulty).onChange(
        async (v) => {
          this.plugin.data.displayDifficulty = v;
          await this.plugin.saveSettings();
        }
      );
    });
    new import_obsidian8.Setting(containerEl).setName("Roll Equivalent Creatures Together").setDesc(
      "Equivalent creatures (same HP, AC and Name) will roll the same initiative by default."
    ).addToggle((t) => {
      t.setValue(this.plugin.data.condense).onChange(async (v) => {
        this.plugin.data.condense = v;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian8.Setting(containerEl).setName("Use Legacy 'Add Creatures'").setDesc("Use the legacy way to add creatures.").addToggle((t) => {
      t.setValue(this.plugin.data.useLegacy).onChange(async (v) => {
        this.plugin.data.useLegacy = v;
        await this.plugin.saveSettings();
      });
    });
  }
  async _displayBattle(additionalContainer) {
    additionalContainer.empty();
    additionalContainer.ontoggle = () => {
      this.plugin.data.openState.battle = additionalContainer.open;
    };
    const summary = additionalContainer.createEl("summary");
    new import_obsidian8.Setting(summary).setHeading().setName("Battle");
    summary.createDiv("collapser").createDiv("handle");
    new import_obsidian8.Setting(additionalContainer).setName("Clamp Minimum HP").setDesc(
      "When a creature takes damage that would reduce its HP below 0, its HP is set to 0 instead."
    ).addToggle((t) => {
      t.setValue(this.plugin.data.clamp).onChange(async (v) => {
        this.plugin.data.clamp = v;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian8.Setting(additionalContainer).setName("Overflow Healing").setDesc(
      "Set what happens to healing which goes above creatures' max HP threshold."
    ).addDropdown((d) => {
      d.addOption("ignore", "Ignore");
      d.addOption("temp", "Add to temp HP");
      d.addOption("current", "Add to current HP");
      d.setValue(this.plugin.data.hpOverflow ?? "ignore");
      d.onChange(async (v) => {
        this.plugin.data.hpOverflow = v;
        this.plugin.saveSettings();
      });
    });
    new import_obsidian8.Setting(additionalContainer).setName("Automatic Unconscious Status Application").setDesc(
      'When a creature takes damage that would reduce its HP below 0, it gains the "Unconscious" status effect.'
    ).addToggle((t) => {
      t.setValue(this.plugin.data.autoStatus).onChange(async (v) => {
        this.plugin.data.autoStatus = v;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian8.Setting(additionalContainer).setName("Additive Temporary HP").setDesc(
      "Any temporary HP added to a creature will be added on top of existing temporary HP."
    ).addToggle((t) => {
      t.setValue(this.plugin.data.additiveTemp).onChange(
        async (v) => {
          this.plugin.data.additiveTemp = v;
          await this.plugin.saveSettings();
        }
      );
    });
    new import_obsidian8.Setting(additionalContainer).setName("Log Battles").setDesc(
      "Actions taken during battle will be logged to the specified log folder."
    ).addToggle(
      (t) => t.setValue(this.plugin.data.logging).onChange(async (v) => {
        this.plugin.data.logging = v;
        await this.plugin.saveSettings();
      })
    );
    const exists = await this.plugin.app.vault.adapter.exists(
      this.plugin.data.logFolder
    );
    new import_obsidian8.Setting(additionalContainer).setName("Log Folder").setDesc(
      createFragment(async (e) => {
        e.createSpan({
          text: "A new note will be created in this folder for each battle."
        });
        e.createEl("br");
        e.createSpan({ text: "Current: " });
        e.createEl("code", { text: this.plugin.data.logFolder });
        if (!exists) {
          e.createEl("br");
          const container = e.createDiv(
            "initiative-tracker-warning"
          );
          (0, import_obsidian8.setIcon)(container, "initiative-tracker-warning");
          container.createSpan({
            text: "This folder does not exist and will be created when a log file is written for the first time."
          });
        }
      })
    ).addText((t) => {
      t.setValue(this.plugin.data.logFolder);
      let folders = this.app.vault.getAllLoadedFiles().filter((f) => f instanceof import_obsidian8.TFolder);
      const modal = new FolderSuggestionModal(
        this.app,
        t,
        folders
      );
      modal.onClose = t.inputEl.onblur = async () => {
        const v = t.inputEl.value?.trim() ? t.inputEl.value.trim() : "/";
        this.plugin.data.logFolder = (0, import_obsidian8.normalizePath)(v);
        await this.plugin.saveSettings();
        this.display();
      };
    });
  }
  _displayPlayers(additionalContainer) {
    additionalContainer.empty();
    additionalContainer.ontoggle = () => {
      this.plugin.data.openState.player = additionalContainer.open;
    };
    const summary = additionalContainer.createEl("summary");
    new import_obsidian8.Setting(summary).setHeading().setName("Players");
    summary.createDiv("collapser").createDiv("handle");
    new import_obsidian8.Setting(additionalContainer).setName("Add New Player").setDesc(
      "Players added here will be available to add to a party. If you do not have a party created, all players will be added to a new encounter."
    ).addButton((button) => {
      let b = button.setTooltip("Add Player").setButtonText("+").onClick(async () => {
        const modal = new NewPlayerModal(this.plugin);
        modal.open();
        modal.onClose = async () => {
          if (!modal.saved)
            return;
          await this.plugin.savePlayer({
            ...modal.player,
            player: true
          });
          this._displayPlayers(additionalContainer);
        };
      });
      return b;
    });
    const additional = additionalContainer.createDiv("additional");
    const playerView = additional.createDiv("initiative-tracker-players");
    if (!this.plugin.data.players.length) {
      additional.createDiv({
        attr: {
          style: "display: flex; justify-content: center; padding-bottom: 18px;"
        }
      }).createSpan({
        text: "No saved players! Create one to see it here."
      });
    } else {
      const headers = playerView.createDiv(
        "initiative-tracker-player headers"
      );
      headers.createDiv({ text: "Name" });
      new import_obsidian8.ExtraButtonComponent(headers.createDiv()).setIcon(HP).setTooltip("Max HP");
      new import_obsidian8.ExtraButtonComponent(headers.createDiv()).setIcon(AC).setTooltip("Armor Class");
      new import_obsidian8.ExtraButtonComponent(headers.createDiv()).setIcon(INITIATIVE).setTooltip("Initiative Modifier");
      headers.createDiv();
      for (let player of this.plugin.data.players) {
        const playerDiv = playerView.createDiv(
          "initiative-tracker-player"
        );
        playerDiv.createDiv({ text: player.name });
        playerDiv.createDiv({
          text: `${player.hp ?? DEFAULT_UNDEFINED}`
        });
        playerDiv.createDiv({
          text: `${player.ac ?? DEFAULT_UNDEFINED}`
        });
        playerDiv.createDiv({
          text: `${player.modifier ?? DEFAULT_UNDEFINED}`
        });
        const icons = playerDiv.createDiv(
          "initiative-tracker-player-icon"
        );
        new import_obsidian8.ExtraButtonComponent(icons.createDiv()).setIcon("pencil").setTooltip("Edit").onClick(() => {
          const modal = new NewPlayerModal(this.plugin, player);
          modal.open();
          modal.onClose = async () => {
            if (!modal.saved)
              return;
            await this.plugin.updatePlayer(
              player,
              modal.player
            );
            this.plugin.app.workspace.trigger(
              "initiative-tracker:creature-updated-in-settings",
              player
            );
            this._displayPlayers(additionalContainer);
          };
        });
        new import_obsidian8.ExtraButtonComponent(icons.createDiv()).setIcon("trash").setTooltip("Delete").onClick(async () => {
          this.plugin.data.players = this.plugin.data.players.filter((p) => p != player);
          await this.plugin.saveSettings();
          this._displayPlayers(additionalContainer);
        });
      }
    }
  }
  _displayParties(additionalContainer) {
    additionalContainer.empty();
    additionalContainer.ontoggle = () => {
      this.plugin.data.openState.party = additionalContainer.open;
    };
    const summary = additionalContainer.createEl("summary");
    new import_obsidian8.Setting(summary).setHeading().setName("Parties");
    summary.createDiv("collapser").createDiv("handle");
    const explanation = additionalContainer.createDiv(
      "initiative-tracker-explanation"
    );
    explanation.createEl("span", {
      text: "Parties allow you to create different groups of your players. Each player can be a member of multiple parties."
    });
    explanation.createEl("br");
    explanation.createEl("br");
    explanation.createEl("span", {
      text: "You can set a default party for encounters to use, or specify the party for the encounter in the encounter block. While running an encounter in the tracker, you can change the active party, allowing you to quickly switch which players are in combat."
    });
    new import_obsidian8.Setting(additionalContainer).setName("Default Party").setDesc(
      "The tracker will load this party to encounters by default."
    ).addDropdown((d) => {
      d.addOption("none", "None");
      for (const party of this.plugin.data.parties) {
        d.addOption(party.name, party.name);
      }
      d.setValue(this.plugin.data.defaultParty ?? "none");
      d.onChange(async (v) => {
        this.plugin.data.defaultParty = v == "none" ? null : v;
        this.plugin.saveSettings();
      });
    });
    new import_obsidian8.Setting(additionalContainer).setName("Add New Party").addButton((button) => {
      let b = button.setTooltip("Add Party").setButtonText("+").onClick(async () => {
        const modal = new PartyModal(this.plugin);
        modal.open();
        modal.onClose = async () => {
          if (modal.canceled)
            return;
          if (!modal.party.name || !modal.party.name.length)
            return;
          if (this.plugin.data.parties.filter(
            (party) => party.name == modal.party.name
          )) {
            const map = new Map(
              [...this.plugin.data.parties].map((c) => [
                c.name,
                c
              ])
            );
            map.set(modal.party.name, modal.party);
            this.plugin.data.parties = Array.from(
              map.values()
            );
          } else {
            this.plugin.data.parties.push(modal.party);
          }
          await this.plugin.saveSettings();
          this._displayParties(additionalContainer);
        };
      });
      return b;
    });
    const additional = additionalContainer.createDiv("additional");
    if (!this.plugin.data.parties.length) {
      additional.createDiv({
        attr: {
          style: "display: flex; justify-content: center; padding-bottom: 18px;"
        }
      }).createSpan({
        text: "No saved parties! Create one to see it here."
      });
    } else {
      for (const party of this.plugin.data.parties) {
        new import_obsidian8.Setting(additional).setName(party.name).setDesc(party.players.join(", ")).addExtraButton((b) => {
          b.setIcon("pencil").onClick(() => {
            const modal = new PartyModal(this.plugin, party);
            modal.open();
            modal.onClose = async () => {
              if (modal.canceled)
                return;
              if (!modal.party.name || !modal.party.name.length)
                return;
              this.plugin.data.parties.splice(
                this.plugin.data.parties.indexOf(party),
                1,
                modal.party
              );
              if (this.plugin.data.parties.filter(
                (s) => s.name == modal.party.name
              ).length > 1) {
                if (this.plugin.data.parties.filter(
                  (status) => status.name == modal.party.name
                )) {
                  const map = new Map(
                    this.plugin.data.parties.map(
                      (c) => [c.name, c]
                    )
                  );
                  map.set(modal.party.name, modal.party);
                  this.plugin.data.parties = Array.from(
                    map.values()
                  );
                }
              }
              await this.plugin.saveSettings();
              this._displayParties(additionalContainer);
            };
          });
        }).addExtraButton((b) => {
          b.setIcon("trash").onClick(async () => {
            this.plugin.data.parties = this.plugin.data.parties.filter(
              (p) => p.name != party.name
            );
            if (this.plugin.data.defaultParty == party.name) {
              this.plugin.data.defaultParty = this.plugin.data.parties[0]?.name ?? null;
            }
            await this.plugin.saveSettings();
            this._displayParties(additionalContainer);
          });
        });
      }
    }
  }
  _displayStatuses(additionalContainer) {
    additionalContainer.empty();
    additionalContainer.ontoggle = () => {
      this.plugin.data.openState.status = additionalContainer.open;
    };
    const summary = additionalContainer.createEl("summary");
    new import_obsidian8.Setting(summary).setHeading().setName("Statuses");
    summary.createDiv("collapser").createDiv("handle");
    const add = new import_obsidian8.Setting(additionalContainer).setName("Add New Status").setDesc("These statuses will be available to apply to creatures.").addButton((button) => {
      let b = button.setTooltip("Add Status").setButtonText("+").onClick(async () => {
        const modal = new StatusModal(this.plugin);
        modal.onClose = async () => {
          if (modal.canceled)
            return;
          if (!modal.status.name)
            return;
          if (this.plugin.data.statuses.filter(
            (status) => status.name == modal.status.name
          )) {
            const map = new Map(
              [...this.plugin.data.statuses].map((c) => [
                c.name,
                c
              ])
            );
            map.set(modal.status.name, modal.status);
            this.plugin.data.statuses = Array.from(
              map.values()
            );
          } else {
            this.plugin.data.statuses.push(modal.status);
          }
          await this.plugin.saveSettings();
          this._displayStatuses(additionalContainer);
        };
        modal.open();
      });
      return b;
    });
    if (!Conditions.every((c) => this.plugin.data.statuses.includes(c))) {
      add.addExtraButton(
        (b) => b.setIcon("reset").setTooltip("Re-add Default Statuses").onClick(async () => {
          this.plugin.data.statuses = Array.from(
            new Map(
              [
                ...this.plugin.data.statuses,
                ...Conditions
              ].map((c) => [c.name, c])
            ).values()
          );
          await this.plugin.saveSettings();
          this._displayStatuses(additionalContainer);
        })
      );
    }
    const additional = additionalContainer.createDiv("additional");
    for (const status of this.plugin.data.statuses) {
      new import_obsidian8.Setting(additional).setName(status.name).setDesc(status.description).addExtraButton(
        (b) => b.setIcon("pencil").onClick(() => {
          const modal = new StatusModal(this.plugin, status);
          modal.onClose = async () => {
            if (modal.canceled)
              return;
            if (!modal.status.name)
              return;
            this.plugin.data.statuses.splice(
              this.plugin.data.statuses.indexOf(status),
              1,
              modal.status
            );
            if (this.plugin.data.statuses.filter(
              (s) => s.name == modal.status.name
            ).length > 1) {
              if (this.plugin.data.statuses.filter(
                (status2) => status2.name == modal.status.name
              )) {
                const map = new Map(
                  this.plugin.data.statuses.map((c) => [
                    c.name,
                    c
                  ])
                );
                map.set(modal.status.name, modal.status);
                this.plugin.data.statuses = Array.from(
                  map.values()
                );
              }
            }
            await this.plugin.saveSettings();
            this._displayStatuses(additionalContainer);
          };
          modal.open();
        })
      ).addExtraButton(
        (b) => b.setIcon("trash").onClick(async () => {
          this.plugin.data.statuses = this.plugin.data.statuses.filter(
            (s) => s.name != status.name
          );
          await this.plugin.saveSettings();
          this._displayStatuses(additionalContainer);
        })
      ).setClass("initiative-status-item");
    }
  }
  async _displayIntegrations(containerEl) {
    containerEl.empty();
    containerEl.ontoggle = () => {
      this.plugin.data.openState.plugin = containerEl.open;
    };
    const summary = containerEl.createEl("summary");
    new import_obsidian8.Setting(summary).setHeading().setName("Plugin Integrations");
    summary.createDiv("collapser").createDiv("handle");
    if (!this.plugin.canUseStatBlocks) {
      this.plugin.data.sync = false;
      await this.plugin.saveSettings();
    }
    new import_obsidian8.Setting(containerEl).setName("Sync Monsters from TTRPG Statblocks").setDesc(
      createFragment((e) => {
        e.createSpan({
          text: "Homebrew creatures saved to the TTRPG Statblocks plugin will be available in the quick-add."
        });
        if (!this.plugin.canUseStatBlocks) {
          e.createEl("br");
          e.createEl("br");
          e.createSpan({
            text: "Install and enable the "
          });
          e.createEl("a", {
            text: "TTRPG Statblocks",
            href: "obsidian://show-plugin?id=obsidian-5e-statblocks"
          });
          e.createSpan({
            text: " plugin to use homebrew creatures."
          });
        }
      })
    ).addToggle((t) => {
      t.setDisabled(!this.plugin.canUseStatBlocks).setValue(
        this.plugin.data.sync
      );
      t.onChange(async (v) => {
        this.plugin.data.sync = v;
        await this.plugin.saveSettings();
        this._displayIntegrations(containerEl);
      });
    });
    if (this.plugin.data.sync) {
      const synced = new import_obsidian8.Setting(containerEl).setDesc(
        `${this.plugin.statblock_creatures.length} creatures synced.`
      );
      synced.settingEl.addClass("initiative-synced");
      (0, import_obsidian8.setIcon)(synced.nameEl, "check-in-circle");
      synced.nameEl.appendChild(createSpan({ text: "Synced" }));
    }
    new import_obsidian8.Setting(containerEl).setName("Initiative Formula").setDesc(
      createFragment((e) => {
        e.createSpan({
          text: "Initiative formula to use when calculating initiative. Use "
        });
        e.createEl("code", { text: "%mod%" });
        e.createSpan({
          text: " for the modifier placeholder."
        });
        if (!this.plugin.canUseDiceRoller) {
          e.createEl("br");
          e.createEl("br");
          e.createSpan({
            attr: {
              style: `color: var(--text-error);`
            },
            text: "Requires the "
          });
          e.createEl("a", {
            text: "Dice Roller",
            href: "https://github.com/valentine195/obsidian-dice-roller",
            cls: "external-link"
          });
          e.createSpan({
            attr: {
              style: `color: var(--text-error);`
            },
            text: " plugin to modify."
          });
        }
      })
    ).addText((t) => {
      if (!this.plugin.canUseDiceRoller) {
        t.setDisabled(true);
        this.plugin.data.initiative = "1d20 + %mod%";
      }
      t.setValue(this.plugin.data.initiative);
      t.onChange((v) => {
        this.plugin.data.initiative = v;
      });
      t.inputEl.onblur = async () => {
        tracker.roll(this.plugin);
        await this.plugin.saveSettings();
      };
    });
    new import_obsidian8.Setting(containerEl).setName("Integrate with Obsidian Leaflet").setDesc(
      createFragment((e) => {
        e.createSpan({
          text: "Integrate with the Obsidian Leaflet plugin and display combats on a map."
        });
        if (!this.plugin.canUseLeaflet) {
          e.createEl("br");
          e.createEl("br");
          e.createSpan({
            attr: {
              style: `color: var(--text-error);`
            },
            text: "Requires  "
          });
          e.createEl("a", {
            text: "Obsidian Leaflet",
            href: "https://github.com/valentine195/obsidian-leaflet-plugin",
            cls: "external-link"
          });
          e.createSpan({
            attr: {
              style: `color: var(--text-error);`
            },
            text: " version 4.0.0 to modify."
          });
        }
      })
    ).addToggle((t) => {
      if (!this.plugin.canUseLeaflet) {
        t.setDisabled(true);
        this.plugin.data.leafletIntegration = false;
      }
      t.setValue(this.plugin.data.leafletIntegration);
      t.onChange(async (v) => {
        this.plugin.data.leafletIntegration = v;
        await this.plugin.saveSettings();
        this._displayIntegrations(containerEl);
      });
    });
    if (this.plugin.canUseLeaflet && this.plugin.data.leafletIntegration) {
      new import_obsidian8.Setting(containerEl).setName("Default Player Marker Type").setDesc(
        createFragment((e) => {
          if (this.plugin.data.playerMarker) {
            const div = e.createDiv("marker-type-display");
            const inner = div.createDiv("marker-icon-display");
            const marker = this.plugin.leaflet.markerIcons.find(
              (icon) => icon.type == this.plugin.data.playerMarker
            );
            if (marker) {
              inner.innerHTML = marker.html;
            }
          }
        })
      ).addDropdown((drop) => {
        for (let marker of this.plugin.leaflet.markerIcons) {
          drop.addOption(marker.type, marker.type);
        }
        drop.setValue(this.plugin.data.playerMarker ?? "default");
        drop.onChange(async (v) => {
          this.plugin.data.playerMarker = v;
          await this.plugin.saveSettings();
          this._displayIntegrations(containerEl);
        });
      });
      new import_obsidian8.Setting(containerEl).setName("Default Monster Marker Type").setDesc(
        createFragment((e) => {
          if (this.plugin.data.monsterMarker) {
            const div = e.createDiv("marker-type-display");
            const inner = div.createDiv("marker-icon-display");
            const marker = this.plugin.leaflet.markerIcons.find(
              (icon) => icon.type == this.plugin.data.monsterMarker
            );
            if (marker) {
              inner.innerHTML = marker.html;
            }
          }
        })
      ).addDropdown((drop) => {
        for (let marker of this.plugin.leaflet.markerIcons) {
          drop.addOption(marker.type, marker.type);
        }
        drop.setValue(this.plugin.data.monsterMarker);
        drop.onChange(async (v) => {
          this.plugin.data.monsterMarker = v;
          await this.plugin.saveSettings();
          this._displayIntegrations(containerEl);
        });
      });
    }
  }
  _displayHomebrew(additionalContainer) {
    additionalContainer.empty();
    if (this.plugin.data.homebrew.length) {
      const additional = additionalContainer.createDiv("additional");
      new import_obsidian8.Setting(additional).setHeading().setName("Homebrew Creatures");
      const warning = additional.createDiv({
        attr: {
          style: "display: flex; justify-content: center; padding: 18px;"
        }
      }).createEl("strong");
      warning.createSpan({
        text: "Homebrew creatures have moved to the "
      });
      warning.createEl("a", {
        text: "5e Statblocks",
        href: "obsidian://show-plugin?id=obsidian-5e-statblocks"
      });
      warning.createSpan({
        text: " plugin."
      });
      if (this.plugin.canUseStatBlocks) {
        new import_obsidian8.Setting(additional).setName("Migrate Hombrew").setDesc(
          "Move all created homebrew creatures to the 5e Statblocks plugin."
        ).addButton((b) => {
          b.setIcon("install").setTooltip("Migrate").onClick(async () => {
            const statblocks = this.app.plugins.getPlugin(
              "obsidian-5e-statblocks"
            );
            const existing = statblocks.settings.monsters.length;
            await statblocks.saveMonsters(
              this.plugin.data.homebrew
            );
            new import_obsidian8.Notice(
              `${statblocks.settings.monsters.length - existing} of ${this.plugin.data.homebrew.length} Homebrew Monsters saved.`
            );
          });
        }).addExtraButton((b) => {
          b.setIcon("cross-in-box").setTooltip("Delete Homebrew").onClick(async () => {
            if (await confirmWithModal(
              this.app,
              "Are you sure you want to delete all homebrew creatures?"
            )) {
              this.plugin.data.homebrew = [];
              await this.plugin.saveSettings();
              this._displayHomebrew(additionalContainer);
            }
          });
        });
      } else {
        additional.createDiv({
          attr: {
            style: "display: flex; justify-content: center; padding: 18px;"
          }
        }).createEl("strong");
        warning.createSpan({
          text: "Install the "
        });
        warning.createEl("a", {
          text: "5e Statblocks",
          href: "obsidian://show-plugin?id=obsidian-5e-statblocks"
        });
        warning.createSpan({
          text: " plugin to migrate."
        });
      }
    }
  }
};
var NewPlayerModal = class extends import_obsidian9.Modal {
  constructor(plugin, original) {
    super(plugin.app);
    this.plugin = plugin;
    this.original = original;
    this.player = { ...original ?? {} };
  }
  async display(load) {
    let { contentEl } = this;
    contentEl.addClass("initiative-tracker-add-player-modal");
    contentEl.empty();
    let error = false;
    contentEl.createEl("h2", {
      text: this.original ? "Edit Player" : "New Player"
    });
    new import_obsidian8.Setting(contentEl).setName("Link to Note").setDesc("Link player to a note in your vault.").addText((t) => {
      t.setValue(this.player.note ?? "");
      const modal = new FileSuggestionModal(this.app, t);
      modal.onClose = async () => {
        if (!modal.file)
          return;
        const metaData = this.app.metadataCache.getFileCache(
          modal.file
        );
        this.player.note = modal.file.basename;
        this.player.path = modal.file.path;
        this.player.name = modal.file.basename;
        if (!metaData || !metaData.frontmatter)
          return;
        const { ac, hp, modifier: modifier2, level } = metaData.frontmatter;
        this.player = {
          ...this.player,
          ...{ ac, hp, modifier: modifier2, level }
        };
        this.display();
      };
    });
    let nameInput, levelInput, hpInput, acInput, modInput;
    new import_obsidian8.Setting(contentEl).setName("Name").setDesc("Player name. Must be unique!").addText((t) => {
      nameInput = {
        input: t.inputEl,
        validate: (i) => {
          let error2 = false;
          if (!i.value.length && !load || this.plugin.data.players.find(
            (p) => p.name === i.value
          ) && this.player.name != this.original.name) {
            i.addClass("has-error");
            error2 = true;
          }
          return error2;
        }
      };
      t.setValue(this.player.name ?? "");
      t.onChange((v) => {
        t.inputEl.removeClass("has-error");
        this.player.name = v;
      });
    });
    new import_obsidian8.Setting(contentEl).setName("Level").setDesc("Player level.").addText((t) => {
      levelInput = {
        input: t.inputEl,
        validate: (i) => {
          let error2 = false;
          if (isNaN(Number(i.value)) || Number(i.value) <= 0) {
            i.addClass("has-error");
            error2 = true;
          }
          return error2;
        }
      };
      t.setValue(`${this.player.level ?? ""}`);
      t.onChange((v) => {
        t.inputEl.removeClass("has-error");
        this.player.level = Number(v);
      });
    });
    new import_obsidian8.Setting(contentEl).setName("Max Hit Points").addText((t) => {
      hpInput = {
        input: t.inputEl,
        validate: (i) => {
          let error2 = false;
          if (isNaN(Number(i.value))) {
            i.addClass("has-error");
            error2 = true;
          }
          return error2;
        }
      };
      t.setValue(`${this.player.hp ?? ""}`);
      t.onChange((v) => {
        t.inputEl.removeClass("has-error");
        this.player.hp = Number(v);
      });
    });
    new import_obsidian8.Setting(contentEl).setName("Armor Class").addText((t) => {
      acInput = {
        input: t.inputEl,
        validate: (i) => {
          let error2 = false;
          if (isNaN(Number(i.value))) {
            t.inputEl.addClass("has-error");
            error2 = true;
          }
          return error2;
        }
      };
      t.setValue(`${this.player.ac ?? ""}`);
      t.onChange((v) => {
        t.inputEl.removeClass("has-error");
        this.player.ac = Number(v);
      });
    });
    new import_obsidian8.Setting(contentEl).setName("Initiative Modifier").setDesc("This will be added to randomly-rolled initiatives.").addText((t) => {
      modInput = {
        input: t.inputEl,
        validate: (i) => {
          let error2 = false;
          if (isNaN(Number(i.value))) {
            t.inputEl.addClass("has-error");
            error2 = true;
          }
          return error2;
        }
      };
      t.setValue(`${this.player.modifier ?? ""}`);
      t.onChange((v) => {
        this.player.modifier = Number(v);
      });
    });
    if (this.plugin.canUseLeaflet) {
      const markerSetting = new import_obsidian8.Setting(contentEl).setName("Leaflet Marker").addDropdown((drop) => {
        for (let marker of this.plugin.leaflet.markerIcons) {
          drop.addOption(marker.type, marker.type);
        }
        drop.setValue(
          this.player.marker ?? this.plugin.data.playerMarker ?? "default"
        );
        drop.onChange(async (v) => {
          this.player.marker = v;
          this.display();
        });
      });
      if (this.player.marker) {
        const div = createDiv("marker-type-display");
        const inner = div.createDiv("marker-icon-display");
        const marker = this.plugin.leaflet.markerIcons.find(
          (icon) => icon.type == this.player.marker
        );
        if (marker) {
          inner.innerHTML = marker.html;
          markerSetting.descEl.appendChild(div);
        }
      }
    }
    let footerEl = contentEl.createDiv();
    let footerButtons = new import_obsidian8.Setting(footerEl);
    footerButtons.addButton((b) => {
      b.setTooltip("Save").setIcon("checkmark").onClick(async () => {
        let error2 = this.validateInputs(
          nameInput,
          acInput,
          hpInput,
          modInput
        );
        if (error2) {
          new import_obsidian8.Notice("Fix errors before saving.");
          return;
        }
        this.saved = true;
        this.close();
      });
      return b;
    });
    footerButtons.addExtraButton((b) => {
      b.setIcon("cross").setTooltip("Cancel").onClick(() => {
        this.saved = false;
        this.close();
      });
      return b;
    });
    this.validateInputs(nameInput, acInput, hpInput, modInput);
  }
  validateInputs(...inputs) {
    let error = false;
    for (let input of inputs) {
      if (input.validate(input.input)) {
        error = true;
      } else {
        input.input.removeClass("has-error");
      }
    }
    return error;
  }
  onOpen() {
    this.display(true);
  }
};
async function confirmWithModal(app2, text2, buttons = {
  cta: "Yes",
  secondary: "No"
}) {
  return new Promise((resolve, reject) => {
    const modal = new ConfirmModal(app2, text2, buttons);
    modal.onClose = () => {
      resolve(modal.confirmed);
    };
    modal.open();
  });
}
var ConfirmModal = class extends import_obsidian9.Modal {
  constructor(app2, text2, buttons) {
    super(app2);
    this.text = text2;
    this.buttons = buttons;
    this.confirmed = false;
  }
  async display() {
    new Promise((resolve) => {
      this.contentEl.empty();
      this.contentEl.addClass("confirm-modal");
      this.contentEl.createEl("p", {
        text: this.text
      });
      const buttonEl = this.contentEl.createDiv(
        "fantasy-calendar-confirm-buttons"
      );
      new import_obsidian9.ButtonComponent(buttonEl).setButtonText(this.buttons.cta).setCta().onClick(() => {
        this.confirmed = true;
        this.close();
      });
      new import_obsidian9.ButtonComponent(buttonEl).setButtonText(this.buttons.secondary).onClick(() => {
        this.close();
      });
    });
  }
  onOpen() {
    this.display();
  }
};
(0, import_obsidian8.addIcon)(
  "initiative-tracker-warning",
  `<svg aria-hidden="true" focusable="false" data-prefix="fas" data-icon="exclamation-triangle" class="svg-inline--fa fa-exclamation-triangle fa-w-18" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 576 512"><path fill="currentColor" d="M569.517 440.013C587.975 472.007 564.806 512 527.94 512H48.054c-36.937 0-59.999-40.055-41.577-71.987L246.423 23.985c18.467-32.009 64.72-31.951 83.154 0l239.94 416.028zM288 354c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z"></path></svg>`
);
var StatusModal = class extends import_obsidian9.Modal {
  constructor(plugin, status) {
    super(plugin.app);
    this.plugin = plugin;
    this.status = { name: null, description: null };
    this.canceled = false;
    this.editing = false;
    this.warned = false;
    if (status) {
      this.editing = true;
      this.original = status.name;
      this.status = {
        name: status.name,
        description: status.description
      };
    }
  }
  onOpen() {
    this.titleEl.setText(this.editing ? "Edit Status" : "New Status");
    const name2 = new import_obsidian8.Setting(this.contentEl).setName("Name").addText((t) => {
      t.setValue(this.status.name).onChange((v) => {
        this.status.name = v;
        if (this.plugin.data.statuses.find(
          (s) => s.name == this.status.name
        ) && !this.warned && this.original != this.status.name) {
          this.warned = true;
          name2.setDesc(
            createFragment((e) => {
              const container = e.createDiv(
                "initiative-tracker-warning"
              );
              (0, import_obsidian8.setIcon)(
                container,
                "initiative-tracker-warning"
              );
              container.createSpan({
                text: "A status by this name already exists and will be overwritten."
              });
            })
          );
        } else if (this.warned) {
          this.warned = false;
          name2.setDesc("");
        }
      });
    });
    new import_obsidian8.Setting(this.contentEl).setName("Description").addTextArea((t) => {
      t.setValue(this.status.description).onChange(
        (v) => this.status.description = v
      );
    });
    new import_obsidian9.ButtonComponent(
      this.contentEl.createDiv("initiative-tracker-cancel")
    ).setButtonText("Cancel").onClick(() => {
      this.canceled = true;
      this.close();
    });
  }
};
var PartyModal = class extends import_obsidian9.Modal {
  constructor(plugin, party) {
    super(plugin.app);
    this.plugin = plugin;
    this.party = { name: null, players: [] };
    this.canceled = false;
    this.editing = false;
    this.warned = false;
    if (party) {
      this.editing = true;
      this.original = party.name;
      this.party = {
        name: party.name,
        players: [...party.players ?? []]
      };
    }
  }
  onOpen() {
    this.titleEl.setText(
      this.editing ? `Edit ${this.party.name ?? "Party"}` : "New Party"
    );
    const name2 = new import_obsidian8.Setting(this.contentEl).setName("Name").addText((t) => {
      t.setValue(this.party.name).onChange((v) => {
        this.party.name = v;
        if (this.plugin.data.parties.find(
          (s) => s.name == this.party.name
        ) && !this.warned && this.original != this.party.name) {
          this.warned = true;
          name2.setDesc(
            createFragment((e) => {
              const container = e.createDiv(
                "initiative-tracker-warning"
              );
              (0, import_obsidian8.setIcon)(
                container,
                "initiative-tracker-warning"
              );
              container.createSpan({
                text: "A party by this name already exists and will be overwritten."
              });
            })
          );
        } else if (this.warned) {
          this.warned = false;
          name2.setDesc("");
        }
      });
    });
    const playersEl = this.contentEl.createDiv(
      "initiative-tracker-additional-container"
    );
    let playerText;
    new import_obsidian8.Setting(playersEl).setName("Add Player to Party").addText((t) => {
      playerText = t;
      new PlayerSuggestionModal(this.plugin, t, this.party);
    }).addExtraButton(
      (b) => b.setIcon("plus-with-circle").onClick(() => {
        if (!playerText.getValue() || !playerText.getValue().length)
          return;
        if (this.party.players.includes(playerText.getValue())) {
          new import_obsidian8.Notice("That player is already in this party!");
          return;
        }
        if (!this.plugin.data.players.find(
          (p) => p.name == playerText.getValue()
        )) {
          new import_obsidian8.Notice(
            "That player doesn't exist! You should make them first."
          );
          return;
        }
        this.party.players.push(playerText.getValue());
        this.displayPlayers(playersDisplayEl);
        playerText.setValue("");
      })
    );
    const playersDisplayEl = playersEl.createDiv("additional");
    this.displayPlayers(playersDisplayEl);
    new import_obsidian9.ButtonComponent(
      this.contentEl.createDiv("initiative-tracker-cancel")
    ).setButtonText("Cancel").onClick(() => {
      this.canceled = true;
      this.close();
    });
  }
  displayPlayers(containerEl) {
    containerEl.empty();
    if (this.party.players.length) {
      for (const player of this.party.players) {
        new import_obsidian8.Setting(containerEl).setName(player).addExtraButton((b) => {
          b.setIcon("trash").onClick(() => {
            this.party.players.splice(
              this.party.players.indexOf(player),
              1
            );
            this.displayPlayers(containerEl);
          });
        });
      }
    } else {
      containerEl.createDiv({
        attr: {
          style: "display: flex; justify-content: center; padding-bottom: 18px;"
        }
      }).createSpan({
        text: "Add a player to the party to see it here."
      });
    }
  }
};

// src/encounter/ui/EncounterLine.svelte
var import_obsidian10 = require("obsidian");
function add_css3(target) {
  append_styles(target, "svelte-kf2ut3", ".encounter-line.svelte-kf2ut3.svelte-kf2ut3{display:flex;gap:1rem}.icons.svelte-kf2ut3.svelte-kf2ut3{display:flex}.icons.svelte-kf2ut3>span.svelte-kf2ut3 .clickable-icon{margin-right:0}");
}
function get_each_context4(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[11] = list[i][0];
  child_ctx[12] = list[i][1];
  child_ctx[14] = i;
  return child_ctx;
}
function create_else_block3(ctx) {
  let t;
  return {
    c() {
      t = text("-");
    },
    m(target, anchor) {
      insert(target, t, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching)
        detach(t);
    }
  };
}
function create_if_block4(ctx) {
  let each_1_anchor;
  let each_value = [...ctx[0]];
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block4(get_each_context4(ctx, each_value, i));
  }
  return {
    c() {
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      each_1_anchor = empty();
    },
    m(target, anchor) {
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(target, anchor);
      }
      insert(target, each_1_anchor, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & 193) {
        each_value = [...ctx2[0]];
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context4(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block4(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value.length;
      }
    },
    d(detaching) {
      destroy_each(each_blocks, detaching);
      if (detaching)
        detach(each_1_anchor);
    }
  };
}
function create_each_block4(ctx) {
  let span;
  let t0_value = ctx[6](ctx[14], ctx[0].size) + "";
  let t0;
  let t1;
  let strong;
  let rollerEl_action;
  let t2;
  let t3_value = ctx[11].name + "";
  let t3;
  let t4_value = ctx[12] == 1 ? "" : "s";
  let t4;
  let t5;
  let span_aria_label_value;
  let mounted;
  let dispose;
  return {
    c() {
      span = element("span");
      t0 = text(t0_value);
      t1 = space();
      strong = element("strong");
      t2 = text("\xA0");
      t3 = text(t3_value);
      t4 = text(t4_value);
      t5 = space();
      attr(span, "aria-label", span_aria_label_value = ctx[7](ctx[11]));
    },
    m(target, anchor) {
      insert(target, span, anchor);
      append(span, t0);
      append(span, t1);
      append(span, strong);
      append(span, t2);
      append(span, t3);
      append(span, t4);
      append(span, t5);
      if (!mounted) {
        dispose = action_destroyer(rollerEl_action = ctx[5].call(null, strong, ctx[11]));
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (dirty & 1 && t0_value !== (t0_value = ctx[6](ctx[14], ctx[0].size) + ""))
        set_data(t0, t0_value);
      if (rollerEl_action && is_function(rollerEl_action.update) && dirty & 1)
        rollerEl_action.update.call(null, ctx[11]);
      if (dirty & 1 && t3_value !== (t3_value = ctx[11].name + ""))
        set_data(t3, t3_value);
      if (dirty & 1 && t4_value !== (t4_value = ctx[12] == 1 ? "" : "s"))
        set_data(t4, t4_value);
      if (dirty & 1 && span_aria_label_value !== (span_aria_label_value = ctx[7](ctx[11]))) {
        attr(span, "aria-label", span_aria_label_value);
      }
    },
    d(detaching) {
      if (detaching)
        detach(span);
      mounted = false;
      dispose();
    }
  };
}
function create_fragment4(ctx) {
  let span4;
  let span0;
  let t0;
  let span3;
  let span1;
  let openButton_action;
  let t1;
  let span2;
  let addButton_action;
  let mounted;
  let dispose;
  function select_block_type(ctx2, dirty) {
    if (ctx2[0].size)
      return create_if_block4;
    return create_else_block3;
  }
  let current_block_type = select_block_type(ctx, -1);
  let if_block = current_block_type(ctx);
  return {
    c() {
      span4 = element("span");
      span0 = element("span");
      if_block.c();
      t0 = space();
      span3 = element("span");
      span1 = element("span");
      t1 = space();
      span2 = element("span");
      attr(span1, "aria-label", "Begin Encounter");
      attr(span1, "class", "svelte-kf2ut3");
      attr(span2, "aria-label", "Add to Encounter");
      attr(span2, "class", "svelte-kf2ut3");
      attr(span3, "class", "icons svelte-kf2ut3");
      attr(span4, "class", "encounter-line encounter-row svelte-kf2ut3");
    },
    m(target, anchor) {
      insert(target, span4, anchor);
      append(span4, span0);
      if_block.m(span0, null);
      append(span4, t0);
      append(span4, span3);
      append(span3, span1);
      append(span3, t1);
      append(span3, span2);
      if (!mounted) {
        dispose = [
          action_destroyer(openButton_action = ctx[1].call(null, span1)),
          listen(span1, "click", stop_propagation(ctx[2])),
          action_destroyer(addButton_action = ctx[3].call(null, span2)),
          listen(span2, "click", stop_propagation(ctx[4]))
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (current_block_type === (current_block_type = select_block_type(ctx2, dirty)) && if_block) {
        if_block.p(ctx2, dirty);
      } else {
        if_block.d(1);
        if_block = current_block_type(ctx2);
        if (if_block) {
          if_block.c();
          if_block.m(span0, null);
        }
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(span4);
      if_block.d();
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance4($$self, $$props, $$invalidate) {
  let { creatures } = $$props;
  let { plugin } = $$props;
  const creatureMap = /* @__PURE__ */ new Map();
  const rollerMap = /* @__PURE__ */ new Map();
  for (let [creature, count] of creatures) {
    let number = Number(count);
    if (plugin.canUseDiceRoller) {
      let roller = plugin.getRoller(`${count}`);
      roller.on("new-result", () => {
        creatureMap.set(creature, roller.result);
      });
      rollerMap.set(creature, roller);
      roller.roll();
    } else {
      creatureMap.set(creature, number);
    }
  }
  const openButton = (node) => {
    new import_obsidian10.ExtraButtonComponent(node).setIcon(START_ENCOUNTER);
  };
  const open = async () => {
    if (!plugin.view) {
      await plugin.addTrackerView();
    }
    const view = plugin.view;
    const creatures2 = [...creatureMap].map(([creature, number]) => {
      if (isNaN(Number(number)) || number < 1)
        return [creature];
      return [...Array(number).keys()].map((v) => Creature.new(creature));
    }).flat();
    tracker.new({
      creatures: creatures2.map((c) => c.toJSON()),
      name: null,
      state: false,
      round: 1,
      logFile: null
    });
    plugin.app.workspace.revealLeaf(view.leaf);
  };
  const addButton = (node) => {
    new import_obsidian10.ExtraButtonComponent(node).setIcon("plus-with-circle");
  };
  const add = async (evt) => {
    if (!plugin.view) {
      await plugin.addTrackerView();
    }
    const creatures2 = [...creatureMap].map(([creature, number]) => {
      if (isNaN(Number(number)) || number < 1)
        return [creature];
      return [...Array(number).keys()].map((v) => Creature.new(creature));
    }).flat();
    tracker.add(...creatures2);
  };
  const rollerEl = (node, creature) => {
    if (plugin.canUseDiceRoller && rollerMap.has(creature) && !rollerMap.get(creature).isStatic) {
      node.appendChild(rollerMap.get(creature)?.containerEl ?? createSpan({ text: `${creatureMap.get(creature)}` }));
    } else {
      node.setText(`${creatureMap.get(creature)}`);
    }
  };
  const joiner = (index, length) => {
    if (length == 1 || index == 0)
      return "";
    const delim = length > 2 ? "," : "";
    if (index == length - 1)
      return `${delim} and `;
    return `${delim} `;
  };
  const label = (creature) => {
    if (!creature)
      return;
    let label2 = [];
    if (creature.hp) {
      label2.push(`HP: ${creature.hp}`);
    }
    if (creature.ac) {
      label2.push(`AC: ${creature.ac}`);
    }
    if (creature.modifier) {
      label2.push(`MOD: ${creature.modifier}`);
    }
    return `${label2.join(", ")}`;
  };
  $$self.$$set = ($$props2) => {
    if ("creatures" in $$props2)
      $$invalidate(0, creatures = $$props2.creatures);
    if ("plugin" in $$props2)
      $$invalidate(8, plugin = $$props2.plugin);
  };
  return [creatures, openButton, open, addButton, add, rollerEl, joiner, label, plugin];
}
var EncounterLine = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance4, create_fragment4, safe_not_equal, { creatures: 0, plugin: 8 }, add_css3);
  }
};
var EncounterLine_default = EncounterLine;

// src/utils/srd-bestiary.ts
var BESTIARY = [
  {
    name: "Aboleth",
    size: "Large",
    source: "SRD",
    type: "aberration",
    subtype: "",
    alignment: "lawful evil",
    ac: 17,
    hp: 135,
    hit_dice: "18d10",
    speed: "10 ft., swim 40 ft.",
    stats: [21, 9, 15, 18, 15, 18],
    saves: [
      {
        constitution: 6
      },
      {
        intelligence: 8
      },
      {
        wisdom: 6
      }
    ],
    skillsaves: [
      {
        history: 12
      },
      {
        perception: 10
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 120 ft., passive Perception 20",
    languages: "Deep Speech, telepathy 120 ft.",
    cr: "10",
    traits: [
      {
        name: "Amphibious",
        desc: "The aboleth can breathe air and water.",
        attack_bonus: 0
      },
      {
        name: "Mucous Cloud",
        desc: "While underwater, the aboleth is surrounded by transformative mucus. A creature that touches the aboleth or that hits it with a melee attack while within 5 ft. of it must make a DC 14 Constitution saving throw. On a failure, the creature is diseased for 1d4 hours. The diseased creature can breathe only underwater.",
        attack_bonus: 0
      },
      {
        name: "Probing Telepathy",
        desc: "If a creature communicates telepathically with the aboleth, the aboleth learns the creature's greatest desires if the aboleth can see the creature.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The aboleth makes three tentacle attacks.",
        attack_bonus: 0
      },
      {
        name: "Tentacle",
        desc: "Melee Weapon Attack: +9 to hit, reach 10 ft., one target. Hit: 12 (2d6 + 5) bludgeoning damage. If the target is a creature, it must succeed on a DC 14 Constitution saving throw or become diseased. The disease has no effect for 1 minute and can be removed by any magic that cures disease. After 1 minute, the diseased creature's skin becomes translucent and slimy, the creature can't regain hit points unless it is underwater, and the disease can be removed only by heal or another disease-curing spell of 6th level or higher. When the creature is outside a body of water, it takes 6 (1d12) acid damage every 10 minutes unless moisture is applied to the skin before 10 minutes have passed.",
        attack_bonus: 9,
        damage_dice: "2d6",
        damage_bonus: 5
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +9 to hit, reach 10 ft. one target. Hit: 15 (3d6 + 5) bludgeoning damage.",
        attack_bonus: 9,
        damage_dice: "3d6",
        damage_bonus: 5
      },
      {
        name: "Enslave (3/day)",
        desc: "The aboleth targets one creature it can see within 30 ft. of it. The target must succeed on a DC 14 Wisdom saving throw or be magically charmed by the aboleth until the aboleth dies or until it is on a different plane of existence from the target. The charmed target is under the aboleth's control and can't take reactions, and the aboleth and the target can communicate telepathically with each other over any distance.\nWhenever the charmed target takes damage, the target can repeat the saving throw. On a success, the effect ends. No more than once every 24 hours, the target can also repeat the saving throw when it is at least 1 mile away from the aboleth.",
        attack_bonus: 0
      }
    ],
    legendary_actions: [
      {
        name: "Detect",
        desc: "The aboleth makes a Wisdom (Perception) check.",
        attack_bonus: 0
      },
      {
        name: "Tail Swipe",
        desc: "The aboleth makes one tail attack.",
        attack_bonus: 0
      },
      {
        name: "Psychic Drain (Costs 2 Actions)",
        desc: "One creature charmed by the aboleth takes 10 (3d6) psychic damage, and the aboleth regains hit points equal to the damage the creature takes.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Acolyte",
    size: "Medium",
    source: "SRD",
    type: "humanoid",
    subtype: "any race",
    alignment: "any alignment",
    ac: 10,
    hp: 9,
    hit_dice: "2d8",
    speed: "30 ft.",
    stats: [10, 10, 10, 10, 14, 11],
    skillsaves: [
      {
        medicine: 4
      },
      {
        religion: 2
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 12",
    languages: "any one language (usually Common)",
    cr: "1/4",
    traits: [],
    actions: [
      {
        name: "Club",
        desc: "Melee Weapon Attack: +2 to hit, reach 5 ft., one target. Hit: 2 (1d4) bludgeoning damage.",
        attack_bonus: 2,
        damage_dice: "1d4"
      }
    ],
    spells: [
      "The acolyte is a 1st-level spellcaster. Its spellcasting ability is Wisdom (spell save DC 12, +4 to hit with spell attacks). The acolyte has following cleric spells prepared:",
      {
        "Cantrips (at will)": "light, sacred flame, thaumaturgy"
      },
      {
        "1st level (3 slots)": "bless, cure wounds, sanctuary"
      }
    ]
  },
  {
    name: "Adult Black Dragon",
    size: "Huge",
    source: "SRD",
    type: "dragon",
    subtype: "",
    alignment: "chaotic evil",
    ac: 19,
    hp: 195,
    hit_dice: "17d12",
    speed: "40 ft., fly 80 ft., swim 40 ft.",
    stats: [23, 14, 21, 14, 13, 17],
    saves: [
      {
        dexterity: 7
      },
      {
        constitution: 10
      },
      {
        wisdom: 6
      },
      {
        charisma: 8
      }
    ],
    skillsaves: [
      null,
      {
        perception: 11
      },
      {
        stealth: 7
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "acid",
    condition_immunities: "",
    senses: "blindsight 60 ft., darkvision 120 ft., passive Perception 21",
    languages: "Common, Draconic",
    cr: "14",
    traits: [
      {
        name: "Amphibious",
        desc: "The dragon can breathe air and water.",
        attack_bonus: 0
      },
      {
        name: "Legendary Resistance (3/Day)",
        desc: "If the dragon fails a saving throw, it can choose to succeed instead.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon can use its Frightful Presence. It then makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +11 to hit, reach 10 ft., one target. Hit: 17 (2d10 + 6) piercing damage plus 4 (1d8) acid damage.",
        attack_bonus: 11,
        damage_dice: "2d10 + 1d8",
        damage_bonus: 6
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +11 to hit, reach 5 ft., one target. Hit: 13 (2d6 + 6) slashing damage.",
        attack_bonus: 11,
        damage_dice: "2d6",
        damage_bonus: 6
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +11 to hit, reach 15 ft., one target. Hit: 15 (2d8 + 6) bludgeoning damage.",
        attack_bonus: 11,
        damage_dice: "2d8",
        damage_bonus: 6
      },
      {
        name: "Frightful Presence",
        desc: "Each creature of the dragon's choice that is within 120 feet of the dragon and aware of it must succeed on a DC 16 Wisdom saving throw or become frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the dragon's Frightful Presence for the next 24 hours.",
        attack_bonus: 0
      },
      {
        name: "Acid Breath (Recharge 5-6)",
        desc: "The dragon exhales acid in a 60-foot line that is 5 feet wide. Each creature in that line must make a DC 18 Dexterity saving throw, taking 54 (12d8) acid damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "12d8"
      }
    ],
    legendary_actions: [
      {
        name: "Detect",
        desc: "The dragon makes a Wisdom (Perception) check.",
        attack_bonus: 0
      },
      {
        name: "Tail Attack",
        desc: "The dragon makes a tail attack.",
        attack_bonus: 0
      },
      {
        name: "Wing Attack (Costs 2 Actions)",
        desc: "The dragon beats its wings. Each creature within 10 ft. of the dragon must succeed on a DC 19 Dexterity saving throw or take 13 (2d6 + 6) bludgeoning damage and be knocked prone. The dragon can then fly up to half its flying speed.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Adult Blue Dracolich",
    size: "Huge",
    source: "SRD",
    type: "undead",
    subtype: "",
    alignment: "lawful evil",
    ac: 19,
    hp: 225,
    hit_dice: "18d12",
    speed: "40 ft., burrow 30 ft., fly 80 ft.",
    stats: [25, 10, 23, 16, 15, 19],
    skillsaves: [
      {
        perception: 12
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "necrotic",
    damage_immunities: "lightning, poison",
    condition_immunities: "charmed, exhaustion, frightened, paralyzed, poisoned",
    senses: "blindsight 60 ft., darkvision 120 ft., passive Perception 22",
    languages: "Common, Draconic",
    cr: "17",
    traits: [
      {
        name: "Legendary Resistance (3/Day)",
        desc: "If the dracolich fails a saving throw, it can choose to succeed instead.",
        attack_bonus: 0
      },
      {
        name: "Magic Resistance",
        desc: "The dracolich has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The dracolich can use its Frightful Presence. It then makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +12 to hit, reach 10 ft., one target. Hit: 18 (2d10 + 7) piercing damage plus 5 (1d10) lightning damage.",
        attack_bonus: 12,
        damage_dice: "2d10 + 1d10",
        damage_bonus: 7
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +12 to hit, reach 5 ft., one target. Hit: 14 (2d6 + 7) slashing damage.",
        attack_bonus: 12,
        damage_dice: "2d6",
        damage_bonus: 7
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +12 to hit, reach 15 ft., one target. Hit: 16 (2d8 + 7) bludgeoning damage.",
        attack_bonus: 12,
        damage_dice: "2d8",
        damage_bonus: 7
      },
      {
        name: "Frightful Presence",
        desc: "Each creature of the dracolich's choice that is within 120 feet of the dracolich and aware of it must succeed on a DC 18 Wisdom saving throw or become frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the dracolich's Frightful Presence for the next 24 hours.",
        attack_bonus: 0
      },
      {
        name: "Lightning Breath (Recharge 5-6)",
        desc: "The dracolich exhales lightning in a 90-foot line that is 5 feet wide. Each creature in that line must make a DC 20 Dexterity saving throw, taking 66 (12d10) lightning damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "12d10"
      }
    ],
    legendary_actions: [
      {
        name: "Detect",
        desc: "The dracolich makes a Wisdom (Perception) check.",
        attack_bonus: 0
      },
      {
        name: "Tail Attack",
        desc: "The dracolich makes a tail attack.",
        attack_bonus: 0
      },
      {
        name: "Wing Attack (Costs 2 Actions)",
        desc: "The dracolich beats its tattered wings. Each creature within 10 ft. of the dracolich must succeed on a DC 21 Dexterity saving throw or take 14 (2d6 + 7) bludgeoning damage and be knocked prone. After beating its wings this way, the dracolich can fly up to half its flying speed.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Adult Blue Dragon",
    size: "Huge",
    source: "SRD",
    type: "dragon",
    subtype: "",
    alignment: "lawful evil",
    ac: 19,
    hp: 225,
    hit_dice: "18d12",
    speed: "40 ft., burrow 30 ft., fly 80 ft.",
    stats: [25, 10, 23, 16, 15, 19],
    saves: [
      {
        dexterity: 5
      },
      {
        constitution: 11
      },
      {
        wisdom: 7
      },
      {
        charisma: 9
      }
    ],
    skillsaves: [
      null,
      {
        perception: 12
      },
      {
        stealth: 5
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "lightning",
    condition_immunities: "",
    senses: "blindsight 60 ft., darkvision 120 ft., passive Perception 22",
    languages: "Common, Draconic",
    cr: "16",
    traits: [
      {
        name: "Legendary Resistance (3/Day)",
        desc: "If the dragon fails a saving throw, it can choose to succeed instead.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon can use its Frightful Presence. It then makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +12 to hit, reach 10 ft., one target. Hit: 18 (2d10 + 7) piercing damage plus 5 (1d10) lightning damage.",
        attack_bonus: 12,
        damage_dice: "2d10 + 1d10",
        damage_bonus: 7
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +12 to hit, reach 5 ft., one target. Hit: 14 (2d6 + 7) slashing damage.",
        attack_bonus: 12,
        damage_dice: "2d6",
        damage_bonus: 7
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +12 to hit, reach 15 ft., one target. Hit: 16 (2d8 + 7) bludgeoning damage.",
        attack_bonus: 12,
        damage_dice: "2d8",
        damage_bonus: 7
      },
      {
        name: "Frightful Presence",
        desc: "Each creature of the dragon's choice that is within 120 ft. of the dragon and aware of it must succeed on a DC 17 Wisdom saving throw or become frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the dragon's Frightful Presence for the next 24 hours.",
        attack_bonus: 0
      },
      {
        name: "Lightning Breath (Recharge 5-6)",
        desc: "The dragon exhales lightning in a 90-foot line that is 5 ft. wide. Each creature in that line must make a DC 19 Dexterity saving throw, taking 66 (12d10) lightning damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "12d10"
      }
    ],
    legendary_actions: [
      {
        name: "Detect",
        desc: "The dragon makes a Wisdom (Perception) check.",
        attack_bonus: 0
      },
      {
        name: "Tail Attack",
        desc: "The dragon makes a tail attack.",
        attack_bonus: 0
      },
      {
        name: "Wing Attack (Costs 2 Actions)",
        desc: "The dragon beats its wings. Each creature within 10 ft. of the dragon must succeed on a DC 20 Dexterity saving throw or take 14 (2d6 + 7) bludgeoning damage and be knocked prone. The dragon can then fly up to half its flying speed.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Adult Brass Dragon",
    size: "Huge",
    source: "SRD",
    type: "dragon",
    subtype: "",
    alignment: "chaotic good",
    ac: 18,
    hp: 172,
    hit_dice: "15d12",
    speed: "40 ft., burrow 40 ft., fly 80 ft.",
    stats: [23, 10, 21, 14, 13, 17],
    saves: [
      {
        dexterity: 5
      },
      {
        constitution: 10
      },
      {
        wisdom: 6
      },
      {
        charisma: 8
      }
    ],
    skillsaves: [
      null,
      {
        history: 7
      },
      {
        persuasion: 8
      },
      {
        perception: 11
      },
      {
        stealth: 5
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "fire",
    condition_immunities: "",
    senses: "blindsight 60 ft., darkvision 120 ft., passive Perception 21",
    languages: "Common, Draconic",
    cr: "13",
    traits: [
      {
        name: "Legendary Resistance (3/Day)",
        desc: "If the dragon fails a saving throw, it can choose to succeed instead.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon can use its Frightful Presence. It then makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +11 to hit, reach,.0 ft., one target. Hit: 17 (2d10 + 6) piercing damage.",
        attack_bonus: 11,
        damage_dice: "2d10",
        damage_bonus: 6
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +11 to hit, reach 5 ft., one target. Hit: 13 (2d6 + 6) slashing damage.",
        attack_bonus: 11,
        damage_dice: "2d6",
        damage_bonus: 6
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +11 to hit, reach 15 ft., one target. Hit: 15 (2d8 + 6) bludgeoning damage.",
        attack_bonus: 11,
        damage_dice: "2d8",
        damage_bonus: 6
      },
      {
        name: "Frightful Presence",
        desc: "Each creature of the dragon's choice that is within 120 feet of the dragon and aware of it must succeed on a DC 16 Wisdom saving throw or become frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the dragon's Frightful Presence for the next 24 hours.",
        attack_bonus: 0
      },
      {
        name: "Breath Weapons (Recharge 5-6)",
        desc: "The dragon uses one of the following breath weapons.\nFire Breath. The dragon exhales fire in an 60-foot line that is 5 feet wide. Each creature in that line must make a DC 18 Dexterity saving throw, taking 45 (13d6) fire damage on a failed save, or half as much damage on a successful one.\nSleep Breath. The dragon exhales sleep gas in a 60-foot cone. Each creature in that area must succeed on a DC 18 Constitution saving throw or fall unconscious for 10 minutes. This effect ends for a creature if the creature takes damage or someone uses an action to wake it.",
        attack_bonus: 0,
        damage_dice: "13d6"
      }
    ]
  },
  {
    name: "Adult Bronze Dragon",
    size: "Huge",
    source: "SRD",
    type: "dragon",
    subtype: "",
    alignment: "lawful good",
    ac: 19,
    hp: 212,
    hit_dice: "17d12",
    speed: "40 ft., fly 80 ft., swim 40 ft.",
    stats: [25, 10, 23, 16, 15, 19],
    saves: [
      {
        dexterity: 5
      },
      {
        constitution: 11
      },
      {
        wisdom: 7
      },
      {
        charisma: 9
      }
    ],
    skillsaves: [
      {
        insight: 7
      },
      {
        perception: 12
      },
      {
        stealth: 5
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "lightning",
    condition_immunities: "",
    senses: "blindsight 60 ft., darkvision 120 ft., passive Perception 22",
    languages: "Common, Draconic",
    cr: "15",
    traits: [
      {
        name: "Amphibious",
        desc: "The dragon can breathe air and water.",
        attack_bonus: 0
      },
      {
        name: "Legendary Resistance (3/Day)",
        desc: "If the dragon fails a saving throw, it can choose to succeed instead.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon can use its Frightful Presence. It then makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +12 to hit, reach 10 ft., one target. Hit: 18 (2d10 + 7) piercing damage.",
        attack_bonus: 12,
        damage_dice: "2d10",
        damage_bonus: 7
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +12 to hit, reach 5 ft., one target. Hit: 14 (2d6 + 7) slashing damage.",
        attack_bonus: 12,
        damage_dice: "2d6",
        damage_bonus: 7
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +12 to hit, reach 15 ft., one target. Hit: 16 (2d8 + 7) bludgeoning damage.",
        attack_bonus: 12,
        damage_dice: "2d8",
        damage_bonus: 7
      },
      {
        name: "Frightful Presence",
        desc: "Each creature of the dragon's choice that is within 120 feet of the dragon and aware of it must succeed on a DC 17 Wisdom saving throw or become frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the dragon's Frightful Presence for the next 24 hours.",
        attack_bonus: 0
      },
      {
        name: "Breath Weapons (Recharge 5-6)",
        desc: "The dragon uses one of the following breath weapons.\nLightning Breath. The dragon exhales lightning in a 90-foot line that is 5 feet wide. Each creature in that line must make a DC 19 Dexterity saving throw, taking 66 (12d10) lightning damage on a failed save, or half as much damage on a successful one.\nRepulsion Breath. The dragon exhales repulsion energy in a 30-foot cone. Each creature in that area must succeed on a DC 19 Strength saving throw. On a failed save, the creature is pushed 60 feet away from the dragon.",
        attack_bonus: 0,
        damage_dice: "12d10"
      }
    ],
    legendary_actions: [
      {
        name: "Detect",
        desc: "The dragon makes a Wisdom (Perception) check.",
        attack_bonus: 0
      },
      {
        name: "Tail Attack",
        desc: "The dragon makes a tail attack.",
        attack_bonus: 0
      },
      {
        name: "Wing Attack (Costs 2 Actions)",
        desc: "The dragon beats its wings. Each creature within 10 ft. of the dragon must succeed on a DC 20 Dexterity saving throw or take 14 (2d6 + 7) bludgeoning damage and be knocked prone. The dragon can then fly up to half its flying speed.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Adult Copper Dragon",
    size: "Huge",
    source: "SRD",
    type: "dragon",
    subtype: "",
    alignment: "chaotic good",
    ac: 18,
    hp: 184,
    hit_dice: "16d12",
    speed: "40 ft., climb 40 ft., fly 80 ft.",
    stats: [23, 12, 21, 18, 15, 17],
    saves: [
      {
        dexterity: 6
      },
      {
        constitution: 10
      },
      {
        wisdom: 7
      },
      {
        charisma: 8
      }
    ],
    skillsaves: [
      {
        deception: 8
      },
      {
        perception: 12
      },
      {
        stealth: 6
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "acid",
    condition_immunities: "",
    senses: "blindsight 60 ft., darkvision 120 ft., passive Perception 22",
    languages: "Common, Draconic",
    cr: "14",
    traits: [
      {
        name: "Legendary Resistance (3/Day)",
        desc: "If the dragon fails a saving throw, it can choose to succeed instead.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon can use its Frightful Presence. It then makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +11 to hit, reach 10 ft., one target. Hit: 17 (2d10 + 6) piercing damage.",
        attack_bonus: 11,
        damage_dice: "2d10",
        damage_bonus: 6
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +11 to hit, reach 5 ft., one target. Hit: 13 (2d6 + 6) slashing damage.",
        attack_bonus: 11,
        damage_dice: "2d6",
        damage_bonus: 6
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +11 to hit, reach 15 ft., one target. Hit: 15 (2d8 + 6) bludgeoning damage.",
        attack_bonus: 11,
        damage_dice: "2d8",
        damage_bonus: 6
      },
      {
        name: "Frightful Presence",
        desc: "Each creature of the dragon's choice that is within 120 feet of the dragon and aware of it must succeed on a DC 16 Wisdom saving throw or become frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the dragon's Frightful Presence for the next 24 hours.",
        attack_bonus: 0
      },
      {
        name: "Breath Weapons (Recharge 5-6)",
        desc: "The dragon uses one of the following breath weapons.\nAcid Breath. The dragon exhales acid in an 60-foot line that is 5 feet wide. Each creature in that line must make a DC 18 Dexterity saving throw, taking 54 (12d8) acid damage on a failed save, or half as much damage on a successful one.\nSlowing Breath. The dragon exhales gas in a 60-foot cone. Each creature in that area must succeed on a DC 18 Constitution saving throw. On a failed save, the creature can't use reactions, its speed is halved, and it can't make more than one attack on its turn. In addition, the creature can use either an action or a bonus action on its turn, but not both. These effects last for 1 minute. The creature can repeat the saving throw at the end of each of its turns, ending the effect on itself with a successful save.",
        attack_bonus: 0,
        damage_dice: "12d8"
      }
    ],
    legendary_actions: [
      {
        name: "Detect",
        desc: "The dragon makes a Wisdom (Perception) check.",
        attack_bonus: 0
      },
      {
        name: "Tail Attack",
        desc: "The dragon makes a tail attack.",
        attack_bonus: 0
      },
      {
        name: "Wing Attack (Costs 2 Actions)",
        desc: "The dragon beats its wings. Each creature within 10 ft. of the dragon must succeed on a DC 19 Dexterity saving throw or take 13 (2d6 + 6) bludgeoning damage and be knocked prone. The dragon can then fly up to half its flying speed.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Adult Gold Dragon",
    size: "Huge",
    source: "SRD",
    type: "dragon",
    subtype: "",
    alignment: "lawful good",
    ac: 19,
    hp: 256,
    hit_dice: "19d12",
    speed: "40 ft., fly 80 ft., swim 40 ft.",
    stats: [27, 14, 25, 16, 15, 24],
    saves: [
      {
        dexterity: 8
      },
      {
        constitution: 13
      },
      {
        wisdom: 8
      },
      {
        charisma: 13
      }
    ],
    skillsaves: [
      {
        insight: 8
      },
      {
        persuasion: 13
      },
      {
        perception: 14
      },
      {
        stealth: 8
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "fire",
    condition_immunities: "",
    senses: "blindsight 60 ft., darkvision 120 ft., passive Perception 24",
    languages: "Common, Draconic",
    cr: "17",
    traits: [
      {
        name: "Amphibious",
        desc: "The dragon can breathe air and water.",
        attack_bonus: 0
      },
      {
        name: "Legendary Resistance (3/Day)",
        desc: "If the dragon fails a saving throw, it can choose to succeed instead.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon can use its Frightful Presence. It then makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +14 to hit, reach 10 ft., one target. Hit: 19 (2d10 + 8) piercing damage.",
        attack_bonus: 14,
        damage_dice: "2d10",
        damage_bonus: 8
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +14 to hit, reach 5 ft., one target. Hit: 15 (2d6 + 8) slashing damage.",
        attack_bonus: 14,
        damage_dice: "2d6",
        damage_bonus: 8
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +14 to hit, reach 15 ft., one target. Hit: 17 (2d8 + 8) bludgeoning damage.",
        attack_bonus: 14,
        damage_dice: "2d8",
        damage_bonus: 8
      },
      {
        name: "Frightful Presence",
        desc: "Each creature of the dragon's choice that is within 120 feet of the dragon and aware of it must succeed on a DC 21 Wisdom saving throw or become frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the dragon's Frightful Presence for the next 24 hours.",
        attack_bonus: 0
      },
      {
        name: "Breath Weapons (Recharge 5-6)",
        desc: "The dragon uses one of the following breath weapons.\nFire Breath. The dragon exhales fire in a 60-foot cone. Each creature in that area must make a DC 21 Dexterity saving throw, taking 66 (12d10) fire damage on a failed save, or half as much damage on a successful one.\nWeakening Breath. The dragon exhales gas in a 60-foot cone. Each creature in that area must succeed on a DC 21 Strength saving throw or have disadvantage on Strength-based attack rolls, Strength checks, and Strength saving throws for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success.",
        attack_bonus: 0,
        damage_dice: "12d10"
      }
    ],
    legendary_actions: [
      {
        name: "Detect",
        desc: "The dragon makes a Wisdom (Perception) check.",
        attack_bonus: 0
      },
      {
        name: "Tail Attack",
        desc: "The dragon makes a tail attack.",
        attack_bonus: 0
      },
      {
        name: "Wing Attack (Costs 2 Actions)",
        desc: "The dragon beats its wings. Each creature within 10 ft. of the dragon must succeed on a DC 22 Dexterity saving throw or take 15 (2d6 + 8) bludgeoning damage and be knocked prone. The dragon can then fly up to half its flying speed.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Adult Green Dragon",
    size: "Huge",
    source: "SRD",
    type: "dragon",
    subtype: "",
    alignment: "lawful evil",
    ac: 19,
    hp: 207,
    hit_dice: "18d12",
    speed: "40 ft., fly 80 ft., swim 40 ft.",
    stats: [23, 12, 21, 18, 15, 17],
    saves: [
      {
        dexterity: 6
      },
      {
        constitution: 10
      },
      {
        wisdom: 7
      },
      {
        charisma: 8
      }
    ],
    skillsaves: [
      {
        deception: 8
      },
      {
        insight: 7
      },
      {
        persuasion: 8
      },
      {
        perception: 12
      },
      {
        stealth: 6
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "poison",
    condition_immunities: "poisoned",
    senses: "blindsight 60 ft., darkvision 120 ft., passive Perception 22",
    languages: "Common, Draconic",
    cr: "15",
    traits: [
      {
        name: "Amphibious",
        desc: "The dragon can breathe air and water.",
        attack_bonus: 0
      },
      {
        name: "Legendary Resistance (3/Day)",
        desc: "If the dragon fails a saving throw, it can choose to succeed instead.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon can use its Frightful Presence. It then makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +11 to hit, reach 10 ft., one target. Hit: 17 (2d10 + 6) piercing damage plus 7 (2d6) poison damage.",
        attack_bonus: 11,
        damage_dice: "2d10 + 2d6",
        damage_bonus: 6
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +11 to hit, reach 5 ft., one target. Hit: 13 (2d6 + 6) slashing damage.",
        attack_bonus: 11,
        damage_dice: "2d6",
        damage_bonus: 6
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +11 to hit, reach 15 ft., one target. Hit: 15 (2d8 + 6) bludgeoning damage.",
        attack_bonus: 11,
        damage_dice: "2d8",
        damage_bonus: 6
      },
      {
        name: "Frightful Presence",
        desc: "Each creature of the dragon's choice that is within 120 feet of the dragon and aware of it must succeed on a DC 16 Wisdom saving throw or become frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the dragon's Frightful Presence for the next 24 hours .",
        attack_bonus: 0
      },
      {
        name: "Poison Breath (Recharge 5-6)",
        desc: "The dragon exhales poisonous gas in a 60-foot cone. Each creature in that area must make a DC 18 Constitution saving throw, taking 56 (16d6) poison damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "16d6"
      }
    ],
    legendary_actions: [
      {
        name: "Detect",
        desc: "The dragon makes a Wisdom (Perception) check.",
        attack_bonus: 0
      },
      {
        name: "Tail Attack",
        desc: "The dragon makes a tail attack.",
        attack_bonus: 0
      },
      {
        name: "Wing Attack (Costs 2 Actions)",
        desc: "The dragon beats its wings. Each creature within 10 ft. of the dragon must succeed on a DC 19 Dexterity saving throw or take 13 (2d6 + 6) bludgeoning damage and be knocked prone. The dragon can then fly up to half its flying speed.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Adult Red Dragon",
    size: "Huge",
    source: "SRD",
    type: "dragon",
    subtype: "",
    alignment: "chaotic evil",
    ac: 19,
    hp: 256,
    hit_dice: "19d12",
    speed: "40 ft., climb 40 ft., fly 80 ft.",
    stats: [27, 10, 25, 16, 13, 21],
    saves: [
      {
        dexterity: 6
      },
      {
        constitution: 13
      },
      {
        wisdom: 7
      },
      {
        charisma: 11
      }
    ],
    skillsaves: [
      {
        perception: 13
      },
      {
        stealth: 6
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "fire",
    condition_immunities: "",
    senses: "blindsight 60 ft., darkvision 120 ft., passive Perception 23",
    languages: "Common, Draconic",
    cr: "17",
    traits: [
      {
        name: "Legendary Resistance (3/Day)",
        desc: "If the dragon fails a saving throw, it can choose to succeed instead.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon can use its Frightful Presence. It then makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +14 to hit, reach 10 ft., one target. Hit: 19 (2d10 + 8) piercing damage plus 7 (2d6) fire damage.",
        attack_bonus: 14,
        damage_dice: "2d10 + 2d6",
        damage_bonus: 8
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +14 to hit, reach 5 ft., one target. Hit: 15 (2d6 + 8) slashing damage.",
        attack_bonus: 14,
        damage_dice: "2d6",
        damage_bonus: 8
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +14 to hit, reach 15 ft., one target. Hit: 17 (2d8 + 8) bludgeoning damage.",
        attack_bonus: 14,
        damage_dice: "2d8",
        damage_bonus: 8
      },
      {
        name: "Frightful Presence",
        desc: "Each creature of the dragon's choice that is within 120 ft. of the dragon and aware of it must succeed on a DC 19 Wisdom saving throw or become frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the dragon's Frightful Presence for the next 24 hours.",
        attack_bonus: 0
      },
      {
        name: "Fire Breath (Recharge 5-6)",
        desc: "The dragon exhales fire in a 60-foot cone. Each creature in that area must make a DC 21 Dexterity saving throw, taking 63 (18d6) fire damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "18d6"
      },
      {
        name: "Lair Actions",
        desc: "On initiative count 20 (losing initiative ties), the dragon takes a lair action to cause one of the following effects: the dragon can't use the same effect two rounds in a row:\n\u2022 Magma erupts from a point on the ground the dragon can see within 120 feet of it, creating a 20-foot-high, 5-foot-radius geyser. Each creature in the geyser's area must make a DC 15 Dexterity saving throw, taking 21 (6d6) fire damage on a failed save, or half as much damage on a successful one.\n\u2022 A tremor shakes the lair in a 60-foot-radius around the dragon. Each creature other than the dragon on the ground in that area must succeed on a DC 15 Dexterity saving throw or be knocked prone.\n\u2022 Volcanic gases form a cloud in a 20-foot-radius sphere centered on a point the dragon can see within 120 feet of it. The sphere spreads around corners, and its area is lightly obscured. It lasts until initiative count 20 on the next round. Each creature that starts its turn in the cloud must succeed on a DC 13 Constitution saving throw or be poisoned until the end of its turn. While poisoned in this way, a creature is incapacitated.",
        attack_bonus: 0,
        damage_dice: "6d6"
      }
    ],
    legendary_actions: [
      {
        name: "Detect",
        desc: "The dragon makes a Wisdom (Perception) check.",
        attack_bonus: 0
      },
      {
        name: "Tail Attack",
        desc: "The dragon makes a tail attack.",
        attack_bonus: 0
      },
      {
        name: "Wing Attack (Costs 2 Actions)",
        desc: "The dragon beats its wings. Each creature within 10 ft. of the dragon must succeed on a DC 22 Dexterity saving throw or take 15 (2d6 + 8) bludgeoning damage and be knocked prone. The dragon can then fly up to half its flying speed.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Adult Silver Dragon",
    size: "Huge",
    source: "SRD",
    type: "dragon",
    subtype: "",
    alignment: "lawful good",
    ac: 19,
    hp: 243,
    hit_dice: "18d12",
    speed: "40 ft., fly 80 ft.",
    stats: [27, 10, 25, 16, 13, 21],
    saves: [
      {
        dexterity: 5
      },
      {
        constitution: 12
      },
      {
        wisdom: 6
      },
      {
        charisma: 10
      }
    ],
    skillsaves: [
      {
        arcana: 8
      },
      {
        history: 8
      },
      {
        perception: 11
      },
      {
        stealth: 5
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "cold",
    condition_immunities: "",
    senses: "blindsight 60 ft., darkvision 120 ft., passive Perception 21",
    languages: "Common, Draconic",
    cr: "16",
    traits: [
      {
        name: "Legendary Resistance (3/Day)",
        desc: "If the dragon fails a saving throw, it can choose to succeed instead.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon can use its Frightful Presence. It then makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +13 to hit, reach 10 ft., one target. Hit: 19 (2d10 + 8) piercing damage.",
        attack_bonus: 13,
        damage_dice: "2d10",
        damage_bonus: 8
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +13 to hit, reach 5 ft., one target. Hit: 15 (2d6 + 8) slashing damage.",
        attack_bonus: 13,
        damage_dice: "2d6",
        damage_bonus: 8
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +13 to hit, reach 15 ft., one target. Hit: 17 (2d8 + 8) bludgeoning damage.",
        attack_bonus: 13,
        damage_dice: "2d8",
        damage_bonus: 8
      },
      {
        name: "Frightful Presence",
        desc: "Each creature of the dragon's choice that is within 120 feet of the dragon and aware of it must succeed on a DC 18 Wisdom saving throw or become frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the dragon's Frightful Presence for the next 24 hours.",
        attack_bonus: 0
      },
      {
        name: "Breath Weapons (Recharge 5-6)",
        desc: "The dragon uses one of the following breath weapons.\nCold Breath. The dragon exhales an icy blast in a 60-foot cone. Each creature in that area must make a DC 20 Constitution saving throw, taking 58 (13d8) cold damage on a failed save, or half as much damage on a successful one.\nParalyzing Breath. The dragon exhales paralyzing gas in a 60-foot cone. Each creature in that area must succeed on a DC 20 Constitution saving throw or be paralyzed for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success.",
        attack_bonus: 0,
        damage_dice: "13d8"
      }
    ],
    legendary_actions: [
      {
        name: "Detect",
        desc: "The dragon makes a Wisdom (Perception) check.",
        attack_bonus: 0
      },
      {
        name: "Tail Attack",
        desc: "The dragon makes a tail attack.",
        attack_bonus: 0
      },
      {
        name: "Wing Attack (Costs 2 Actions)",
        desc: "The dragon beats its wings. Each creature within 10 ft. of the dragon must succeed on a DC 22 Dexterity saving throw or take 15 (2d6 + 8) bludgeoning damage and be knocked prone. The dragon can then fly up to half its flying speed.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Adult White Dragon",
    size: "Huge",
    source: "SRD",
    type: "dragon",
    subtype: "",
    alignment: "chaotic evil",
    ac: 18,
    hp: 200,
    hit_dice: "16d12",
    speed: "40 ft., burrow 30 ft., fly 80 ft., swim 40 ft.",
    stats: [22, 10, 22, 8, 12, 12],
    saves: [
      {
        dexterity: 5
      },
      {
        constitution: 11
      },
      {
        wisdom: 6
      },
      {
        charisma: 6
      }
    ],
    skillsaves: [
      {
        perception: 11
      },
      {
        stealth: 5
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "cold",
    condition_immunities: "",
    senses: "blindsight 60 ft., darkvision 120 ft., passive Perception 21",
    languages: "Common, Draconic",
    cr: "13",
    traits: [
      {
        name: "Ice Walk",
        desc: "The dragon can move across and climb icy surfaces without needing to make an ability check. Additionally, difficult terrain composed of ice or snow doesn't cost it extra moment.",
        attack_bonus: 0
      },
      {
        name: "Legendary Resistance (3/Day)",
        desc: "If the dragon fails a saving throw, it can choose to succeed instead.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon can use its Frightful Presence. It then makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +11 to hit, reach 10 ft., one target. Hit: 17 (2d10 + 6) piercing damage plus 4 (1d8) cold damage.",
        attack_bonus: 11,
        damage_dice: "2d10 + 1d8",
        damage_bonus: 6
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +11 to hit, reach 5 ft., one target. Hit: 13 (2d6 + 6) slashing damage.",
        attack_bonus: 11,
        damage_dice: "2d6",
        damage_bonus: 6
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +11 to hit, reach 15 ft., one target. Hit: 15 (2d8 + 6) bludgeoning damage.",
        attack_bonus: 11,
        damage_dice: "2d8",
        damage_bonus: 6
      },
      {
        name: "Frightful Presence",
        desc: "Each creature of the dragon's choice that is within 120 ft. of the dragon and aware of it must succeed on a DC 14 Wisdom saving throw or become frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the dragon's Frightful Presence for the next 24 hours.",
        attack_bonus: 0
      },
      {
        name: "Cold Breath (Recharge 5-6)",
        desc: "The dragon exhales an icy blast in a 60-foot cone. Each creature in that area must make a DC 19 Constitution saving throw, taking 54 (12d8) cold damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "12d8"
      }
    ],
    legendary_actions: [
      {
        name: "Detect",
        desc: "The dragon makes a Wisdom (Perception) check.",
        attack_bonus: 0
      },
      {
        name: "Tail Attack",
        desc: "The dragon makes a tail attack.",
        attack_bonus: 0
      },
      {
        name: "Wing Attack (Costs 2 Actions)",
        desc: "The dragon beats its wings. Each creature within 10 ft. of the dragon must succeed on a DC 19 Dexterity saving throw or take 13 (2d6 + 6) bludgeoning damage and be knocked prone. The dragon can then fly up to half its flying speed.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Air Elemental",
    size: "Large",
    source: "SRD",
    type: "elemental",
    subtype: "",
    alignment: "neutral",
    ac: 15,
    hp: 90,
    hit_dice: "12d10",
    speed: "fly 90 ft. (hover)",
    stats: [14, 20, 14, 6, 10, 6],
    damage_vulnerabilities: "",
    damage_resistances: "lightning; thunder; bludgeoning, piercing, and slashing from nonmagical weapons",
    damage_immunities: "poison",
    condition_immunities: "exhaustion, grappled, paralyzed, petrified, poisoned, prone, restrained, unconscious",
    senses: "darkvision 60 ft., passive Perception 10",
    languages: "Auran",
    cr: "5",
    traits: [
      {
        name: "Air Form",
        desc: "The elemental can enter a hostile creature's space and stop there. It can move through a space as narrow as 1 inch wide without squeezing.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The elemental makes two slam attacks.",
        attack_bonus: 0
      },
      {
        name: "Slam",
        desc: "Melee Weapon Attack: +8 to hit, reach 5 ft., one target. Hit: 14 (2d8 + 5) bludgeoning damage.",
        attack_bonus: 8,
        damage_dice: "2d8",
        damage_bonus: 5
      },
      {
        name: "Whirlwind (Recharge 4-6)",
        desc: "Each creature in the elemental's space must make a DC 13 Strength saving throw. On a failure, a target takes 15 (3d8 + 2) bludgeoning damage and is flung up 20 feet away from the elemental in a random direction and knocked prone. If a thrown target strikes an object, such as a wall or floor, the target takes 3 (1d6) bludgeoning damage for every 10 feet it was thrown. If the target is thrown at another creature, that creature must succeed on a DC 13 Dexterity saving throw or take the same damage and be knocked prone.\nIf the saving throw is successful, the target takes half the bludgeoning damage and isn't flung away or knocked prone.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Ancient Black Dragon",
    size: "Gargantuan",
    source: "SRD",
    type: "dragon",
    subtype: "",
    alignment: "chaotic evil",
    ac: 22,
    hp: 367,
    hit_dice: "21d20",
    speed: "40 ft., fly 80 ft., swim 40 ft.",
    stats: [27, 14, 25, 16, 15, 19],
    saves: [
      {
        dexterity: 9
      },
      {
        constitution: 14
      },
      {
        wisdom: 9
      },
      {
        charisma: 11
      }
    ],
    skillsaves: [
      {
        perception: 16
      },
      {
        stealth: 9
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "acid",
    condition_immunities: "",
    senses: "blindsight 60 ft., darkvision 120 ft., passive Perception 26",
    languages: "Common, Draconic",
    cr: "21",
    traits: [
      {
        name: "Amphibious",
        desc: "The dragon can breathe air and water.",
        attack_bonus: 0
      },
      {
        name: "Legendary Resistance (3/Day)",
        desc: "If the dragon fails a saving throw, it can choose to succeed instead.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon can use its Frightful Presence. It then makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack:+ 15 to hit, reach 15 ft., one target. Hit: 19 (2d10 + 8) piercing damage plus 9 (2d8) acid damage.",
        attack_bonus: 15,
        damage_dice: "2d10 + 2d8",
        damage_bonus: 8
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +15 to hit, reach 10 ft., one target. Hit: 15 (2d6 + 8) slashing damage.",
        attack_bonus: 15,
        damage_dice: "2d6",
        damage_bonus: 8
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +15 to hit, reach 20 ft ., one target. Hit: 17 (2d8 + 8) bludgeoning damage.",
        attack_bonus: 15,
        damage_dice: "2d8",
        damage_bonus: 8
      },
      {
        name: "Frightful Presence",
        desc: "Each creature of the dragon's choice that is within 120 feet of the dragon and aware of it must succeed on a DC 19 Wisdom saving throw or become frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the dragon's Frightful Presence for the next 24 hours.",
        attack_bonus: 0
      },
      {
        name: "Acid Breath (Recharge 5-6)",
        desc: "The dragon exhales acid in a 90-foot line that is 10 feet wide. Each creature in that line must make a DC 22 Dexterity saving throw, taking 67 (15d8) acid damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0
      }
    ],
    legendary_actions: [
      {
        name: "Detect",
        desc: "The dragon makes a Wisdom (Perception) check.",
        attack_bonus: 0
      },
      {
        name: "Tail Attack",
        desc: "The dragon makes a tail attack.",
        attack_bonus: 0
      },
      {
        name: "Wing Attack (Costs 2 Actions)",
        desc: "The dragon beats its wings. Each creature within 15 ft. of the dragon must succeed on a DC 23 Dexterity saving throw or take 15 (2d6 + 8) bludgeoning damage and be knocked prone. The dragon can then fly up to half its flying speed.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Ancient Blue Dragon",
    size: "Gargantuan",
    source: "SRD",
    type: "dragon",
    subtype: "",
    alignment: "lawful evil",
    ac: 22,
    hp: 481,
    hit_dice: "26d20",
    speed: "40 ft., burrow 40 ft., fly 80 ft.",
    stats: [29, 10, 27, 18, 17, 21],
    saves: [
      {
        dexterity: 7
      },
      {
        constitution: 15
      },
      {
        wisdom: 10
      },
      {
        charisma: 12
      }
    ],
    skillsaves: [
      {
        perception: 17
      },
      {
        stealth: 7
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "lightning",
    condition_immunities: "",
    senses: "blindsight 60 ft., darkvision 120 ft., passive Perception 27",
    languages: "Common, Draconic",
    cr: "23",
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon can use its Frightful Presence. It then makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +16 to hit, reach 15 ft., one target. Hit: 20 (2d10 + 9) piercing damage plus 11 (2d10) lightning damage.",
        attack_bonus: 16,
        damage_dice: "2d10 + 2d10",
        damage_bonus: 9
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +16 to hit, reach 10 ft., one target. Hit: 16 (2d6 + 9) slashing damage.",
        attack_bonus: 16,
        damage_dice: "2d6",
        damage_bonus: 9
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +16 to hit, reach 20 ft., one target. Hit: 18 (2d8 + 9) bludgeoning damage.",
        attack_bonus: 16,
        damage_dice: "2d8",
        damage_bonus: 9
      },
      {
        name: "Frightful Presence",
        desc: "Each creature of the dragon's choice that is within 120 feet of the dragon and aware of it must succeed on a DC 20 Wisdom saving throw or become frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the dragon's Frightful Presence for the next 24 hours.",
        attack_bonus: 0
      },
      {
        name: "Lightning Breath (Recharge 5-6)",
        desc: "The dragon exhales lightning in a 120-foot line that is 10 feet wide. Each creature in that line must make a DC 23 Dexterity saving throw, taking 88 (16d10) lightning damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "16d10"
      }
    ],
    legendary_actions: [
      {
        name: "Detect",
        desc: "The dragon makes a Wisdom (Perception) check.",
        attack_bonus: 0
      },
      {
        name: "Tail Attack",
        desc: "The dragon makes a tail attack.",
        attack_bonus: 0
      },
      {
        name: "Wing Attack (Costs 2 Actions)",
        desc: "The dragon beats its wings. Each creature within 15 ft. of the dragon must succeed on a DC 24 Dexterity saving throw or take 16 (2d6 + 9) bludgeoning damage and be knocked prone. The dragon can then fly up to half its flying speed.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Ancient Brass Dragon",
    size: "Gargantuan",
    source: "SRD",
    type: "dragon",
    subtype: "",
    alignment: "chaotic good",
    ac: 20,
    hp: 297,
    hit_dice: "17d20",
    speed: "40 ft., burrow 40 ft., fly 80 ft.",
    stats: [27, 10, 25, 16, 15, 19],
    saves: [
      {
        dexterity: 6
      },
      {
        constitution: 13
      },
      {
        wisdom: 8
      },
      {
        charisma: 10
      }
    ],
    skillsaves: [
      {
        history: 9
      },
      {
        persuasion: 10
      },
      {
        perception: 14
      },
      {
        stealth: 6
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "fire",
    condition_immunities: "",
    senses: "blindsight 60 ft., darkvision 120 ft., passive Perception 24",
    languages: "Common, Draconic",
    cr: "20",
    traits: [
      {
        name: "Legendary Resistance (3/Day)",
        desc: "If the dragon fails a saving throw, it can choose to succeed instead.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon can use its Frightful Presence. It then makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +14 to hit, reach 15 ft., one target. Hit: 19 (2d10 + 8) piercing damage.",
        attack_bonus: 14,
        damage_dice: "2d10",
        damage_bonus: 8
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +14 to hit, reach 10 ft., one target. Hit: 15 (2d6 + 8) slashing damage.",
        attack_bonus: 14,
        damage_dice: "2d6",
        damage_bonus: 8
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +14 to hit, reach 20 ft., one target. Hit: 17 (2d8 + 8) bludgeoning damage.",
        attack_bonus: 14,
        damage_dice: "2d8",
        damage_bonus: 8
      },
      {
        name: "Frightful Presence",
        desc: "Each creature of the dragon's choice that is within 120 feet of the dragon and aware of it must succeed on a DC 18 Wisdom saving throw or become frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the dragon's Frightful Presence for the next 24 hours.",
        attack_bonus: 0
      },
      {
        name: "Breath Weapons (Recharge 5-6)",
        desc: "The dragon uses one of the following breath weapons:\nFire Breath. The dragon exhales fire in an 90-foot line that is 10 feet wide. Each creature in that line must make a DC 21 Dexterity saving throw, taking 56 (16d6) fire damage on a failed save, or half as much damage on a successful one.\nSleep Breath. The dragon exhales sleep gas in a 90-foot cone. Each creature in that area must succeed on a DC 21 Constitution saving throw or fall unconscious for 10 minutes. This effect ends for a creature if the creature takes damage or someone uses an action to wake it.",
        attack_bonus: 0,
        damage_dice: "16d6"
      },
      {
        name: "Change Shape",
        desc: "The dragon magically polymorphs into a humanoid or beast that has a challenge rating no higher than its own, or back into its true form. It reverts to its true form if it dies. Any equipment it is wearing or carrying is absorbed or borne by the new form (the dragon's choice).\nIn a new form, the dragon retains its alignment, hit points, Hit Dice, ability to speak, proficiencies, Legendary Resistance, lair actions, and Intelligence, Wisdom, and Charisma scores, as well as this action. Its statistics and capabilities are otherwise replaced by those of the new form, except any class features or legendary actions of that form.",
        attack_bonus: 0
      }
    ],
    legendary_actions: [
      {
        name: "Detect",
        desc: "The dragon makes a Wisdom (Perception) check.",
        attack_bonus: 0
      },
      {
        name: "Tail Attack",
        desc: "The dragon makes a tail attack.",
        attack_bonus: 0
      },
      {
        name: "Wing Attack (Costs 2 Actions)",
        desc: "The dragon beats its wings. Each creature within 15 ft. of the dragon must succeed on a DC 22 Dexterity saving throw or take 15 (2d6 + 8) bludgeoning damage and be knocked prone. The dragon can then fly up to half its flying speed.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Ancient Bronze Dragon",
    size: "Gargantuan",
    source: "SRD",
    type: "dragon",
    subtype: "",
    alignment: "lawful good",
    ac: 22,
    hp: 444,
    hit_dice: "24d20",
    speed: "40 ft., fly 80 ft., swim 40 ft.",
    stats: [29, 10, 27, 18, 17, 21],
    saves: [
      {
        dexterity: 7
      },
      {
        constitution: 15
      },
      {
        wisdom: 10
      },
      {
        charisma: 12
      }
    ],
    skillsaves: [
      {
        insight: 10
      },
      {
        perception: 17
      },
      {
        stealth: 7
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "lightning",
    condition_immunities: "",
    senses: "blindsight 60 ft., darkvision 120 ft., passive Perception 27",
    languages: "Common, Draconic",
    cr: "22",
    traits: [
      {
        name: "Amphibious",
        desc: "The dragon can breathe air and water.",
        attack_bonus: 0
      },
      {
        name: "Legendary Resistance (3/Day)",
        desc: "If the dragon fails a saving throw, it can choose to succeed instead.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon can use its Frightful Presence. It then makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +16 to hit, reach 15 ft., one target. Hit: 20 (2d10 + 9) piercing damage.",
        attack_bonus: 16,
        damage_dice: "2d10",
        damage_bonus: 9
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +16 to hit, reach 10 ft., one target. Hit: 16 (2d6 + 9) slashing damage.",
        attack_bonus: 16,
        damage_dice: "1d6",
        damage_bonus: 9
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +16 to hit, reach 20 ft., one target. Hit: 18 (2d8 + 9) bludgeoning damage.",
        attack_bonus: 0,
        damage_dice: "2d8",
        damage_bonus: 9
      },
      {
        name: "Frightful Presence",
        desc: "Each creature of the dragon's choice that is within 120 feet of the dragon and aware of it must succeed on a DC 20 Wisdom saving throw or become frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the dragon's Frightful Presence for the next 24 hours.",
        attack_bonus: 0
      },
      {
        name: "Breath Weapons (Recharge 5-6)",
        desc: "The dragon uses one of the following breath weapons.\nLightning Breath. The dragon exhales lightning in a 120-foot line that is 10 feet wide. Each creature in that line must make a DC 23 Dexterity saving throw, taking 88 (16d10) lightning damage on a failed save, or half as much damage on a successful one.\nRepulsion Breath. The dragon exhales repulsion energy in a 30-foot cone. Each creature in that area must succeed on a DC 23 Strength saving throw. On a failed save, the creature is pushed 60 feet away from the dragon.",
        attack_bonus: 0,
        damage_dice: "16d10"
      },
      {
        name: "Change Shape",
        desc: "The dragon magically polymorphs into a humanoid or beast that has a challenge rating no higher than its own, or back into its true form. It reverts to its true form if it dies. Any equipment it is wearing or carrying is absorbed or borne by the new form (the dragon's choice).\nIn a new form, the dragon retains its alignment, hit points, Hit Dice, ability to speak, proficiencies, Legendary Resistance, lair actions, and Intelligence, Wisdom, and Charisma scores, as well as this action. Its statistics and capabilities are otherwise replaced by those of the new form, except any class features or legendary actions of that form.",
        attack_bonus: 0
      }
    ],
    legendary_actions: [
      {
        name: "Detect",
        desc: "The dragon makes a Wisdom (Perception) check.",
        attack_bonus: 0
      },
      {
        name: "Tail Attack",
        desc: "The dragon makes a tail attack.",
        attack_bonus: 0
      },
      {
        name: "Wing Attack (Costs 2 Actions)",
        desc: "The dragon beats its wings. Each creature within 15 ft. of the dragon must succeed on a DC 24 Dexterity saving throw or take 16 (2d6 + 9) bludgeoning damage and be knocked prone. The dragon can then fly up to half its flying speed.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Ancient Copper Dragon",
    size: "Gargantuan",
    source: "SRD",
    type: "dragon",
    subtype: "",
    alignment: "chaotic good",
    ac: 21,
    hp: 350,
    hit_dice: "20d20",
    speed: "40 ft., climb 40 ft., fly 80 ft.",
    stats: [27, 12, 25, 20, 17, 19],
    saves: [
      {
        dexterity: 8
      },
      {
        constitution: 14
      },
      {
        wisdom: 10
      },
      {
        charisma: 11
      }
    ],
    skillsaves: [
      {
        stealth: 8
      },
      {
        perception: 17
      },
      {
        deception: 11
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "acid",
    condition_immunities: "",
    senses: "blindsight 60 ft., darkvision 120 ft., passive Perception 27",
    languages: "Common, Draconic",
    cr: "21",
    traits: [
      {
        name: "Legendary Resistance (3/Day)",
        desc: "If the dragon fails a saving throw, it can choose to succeed instead.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon can use its Frightful Presence. It then makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +15 to hit, reach 15 ft., one target. Hit: 19 (2d10 + 8) piercing damage.",
        attack_bonus: 15,
        damage_dice: "2d10",
        damage_bonus: 8
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +15 to hit, reach 10 ft., one target. Hit: 15 (2d6 + 8) slashing damage.",
        attack_bonus: 15,
        damage_dice: "2d6",
        damage_bonus: 8
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +15 to hit, reach 20 ft., one target. Hit: 17 (2d8 + 8) bludgeoning damage.",
        attack_bonus: 15,
        damage_dice: "2d8",
        damage_bonus: 8
      },
      {
        name: "Frightful Presence",
        desc: "Each creature of the dragon's choice that is within 120 feet of the dragon and aware of it must succeed on a DC 19 Wisdom saving throw or become frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the dragon's Frightful Presence for the next 24 hours.",
        attack_bonus: 0
      },
      {
        name: "Breath Weapons (Recharge 5-6)",
        desc: "The dragon uses one of the following breath weapons.\nAcid Breath. The dragon exhales acid in an 90-foot line that is 10 feet wide. Each creature in that line must make a DC 22 Dexterity saving throw, taking 63 (14d8) acid damage on a failed save, or half as much damage on a successful one.\nSlowing Breath. The dragon exhales gas in a 90-foot cone. Each creature in that area must succeed on a DC 22 Constitution saving throw. On a failed save, the creature can't use reactions, its speed is halved, and it can't make more than one attack on its turn. In addition, the creature can use either an action or a bonus action on its turn, but not both. These effects last for 1 minute. The creature can repeat the saving throw at the end of each of its turns, ending the effect on itself with a successful save.",
        attack_bonus: 0,
        damage_dice: "14d8"
      },
      {
        name: "Change Shape",
        desc: "The dragon magically polymorphs into a humanoid or beast that has a challenge rating no higher than its own, or back into its true form. It reverts to its true form if it dies. Any equipment it is wearing or carrying is absorbed or borne by the new form (the dragon's choice).\nIn a new form, the dragon retains its alignment, hit points, Hit Dice, ability to speak, proficiencies, Legendary Resistance, lair actions, and Intelligence, Wisdom, and Charisma scores, as well as this action. Its statistics and capabilities are otherwise replaced by those of the new form, except any class features or legendary actions of that form.",
        attack_bonus: 0
      }
    ],
    legendary_actions: [
      {
        name: "Detect",
        desc: "The dragon makes a Wisdom (Perception) check.",
        attack_bonus: 0
      },
      {
        name: "Tail Attack",
        desc: "The dragon makes a tail attack.",
        attack_bonus: 0
      },
      {
        name: "Wing Attack (Costs 2 Actions)",
        desc: "The dragon beats its wings. Each creature within 15 ft. of the dragon must succeed on a DC 23 Dexterity saving throw or take 15 (2d6 + 8) bludgeoning damage and be knocked prone. The dragon can then fly up to half its flying speed.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Ancient Gold Dragon",
    size: "Gargantuan",
    source: "SRD",
    type: "dragon",
    subtype: "",
    alignment: "lawful good",
    ac: 22,
    hp: 546,
    hit_dice: "28d20",
    speed: "40 ft., fly 80 ft., swim 40 ft.",
    stats: [30, 14, 29, 18, 17, 28],
    saves: [
      {
        dexterity: 9
      },
      {
        constitution: 16
      },
      {
        wisdom: 10
      },
      {
        charisma: 16
      }
    ],
    skillsaves: [
      {
        persuasion: 16
      },
      {
        stealth: 9
      },
      {
        perception: 17
      },
      {
        insight: 10
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "fire",
    condition_immunities: "",
    senses: "blindsight 60 ft., darkvision 120 ft., passive Perception 27",
    languages: "Common, Draconic",
    cr: "24",
    traits: [
      {
        name: "Amphibious",
        desc: "The dragon can breathe air and water.",
        attack_bonus: 0
      },
      {
        name: "Legendary Resistance (3/Day)",
        desc: "If the dragon fails a saving throw, it can choose to succeed instead.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon can use its Frightful Presence. It then makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +17 to hit, reach 15 ft., one target. Hit: 21 (2d10 + 10) piercing damage.",
        attack_bonus: 17,
        damage_dice: "2d10",
        damage_bonus: 10
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +17 to hit, reach 10 ft., one target. Hit: 17 (2d6 + 10) slashing damage.",
        attack_bonus: 17,
        damage_dice: "2d6",
        damage_bonus: 10
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +17 to hit, reach 20 ft., one target. Hit: 19 (2d8 + 10) bludgeoning damage.",
        attack_bonus: 17,
        damage_dice: "2d8",
        damage_bonus: 10
      },
      {
        name: "Frightful Presence",
        desc: "Each creature of the dragon's choice that is within 120 feet of the dragon and aware of it must succeed on a DC 24 Wisdom saving throw or become frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the dragon's Frightful Presence for the next 24 hours.",
        attack_bonus: 0
      },
      {
        name: "Breath Weapons (Recharge 5-6)",
        desc: "The dragon uses one of the following breath weapons.\nFire Breath. The dragon exhales fire in a 90-foot cone. Each creature in that area must make a DC 24 Dexterity saving throw, taking 71 (13d10) fire damage on a failed save, or half as much damage on a successful one.\nWeakening Breath. The dragon exhales gas in a 90-foot cone. Each creature in that area must succeed on a DC 24 Strength saving throw or have disadvantage on Strength-based attack rolls, Strength checks, and Strength saving throws for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success.",
        attack_bonus: 0,
        damage_dice: "13d10"
      },
      {
        name: "Change Shape",
        desc: "The dragon magically polymorphs into a humanoid or beast that has a challenge rating no higher than its own, or back into its true form. It reverts to its true form if it dies. Any equipment it is wearing or carrying is absorbed or borne by the new form (the dragon's choice).\nIn a new form, the dragon retains its alignment, hit points, Hit Dice, ability to speak, proficiencies, Legendary Resistance, lair actions, and Intelligence, Wisdom, and Charisma scores, as well as this action. Its statistics and capabilities are otherwise replaced by those of the new form, except any class features or legendary actions of that form.",
        attack_bonus: 0
      }
    ],
    legendary_actions: [
      {
        name: "Detect",
        desc: "The dragon makes a Wisdom (Perception) check.",
        attack_bonus: 0
      },
      {
        name: "Tail Attack",
        desc: "The dragon makes a tail attack.",
        attack_bonus: 0
      },
      {
        name: "Wing Attack (Costs 2 Actions)",
        desc: "The dragon beats its wings. Each creature within 15 ft. of the dragon must succeed on a DC 25 Dexterity saving throw or take 17 (2d6 + 10) bludgeoning damage and be knocked prone. The dragon can then fly up to half its flying speed.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Ancient Green Dragon",
    size: "Gargantuan",
    source: "SRD",
    type: "dragon",
    subtype: "",
    alignment: "lawful evil",
    ac: 21,
    hp: 385,
    hit_dice: "22d20",
    speed: "40 ft., fly 80 ft., swim 40 ft.",
    stats: [27, 12, 25, 20, 17, 19],
    saves: [
      {
        dexterity: 8
      },
      {
        constitution: 14
      },
      {
        wisdom: 10
      },
      {
        charisma: 11
      }
    ],
    skillsaves: [
      {
        deception: 11
      },
      {
        insight: 10
      },
      {
        perception: 17
      },
      {
        persuasion: 11
      },
      {
        stealth: 8
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "poison",
    condition_immunities: "poisoned",
    senses: "blindsight 60 ft., darkvision 120 ft., passive Perception 27",
    languages: "Common, Draconic",
    cr: "22",
    traits: [
      {
        name: "Amphibious",
        desc: "The dragon can breathe air and water.",
        attack_bonus: 0
      },
      {
        name: "Legendary Resistance (3/Day)",
        desc: "If the dragon fails a saving throw, it can choose to succeed instead.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon can use its Frightful Presence. It then makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +15 to hit, reach 15 ft., one target. Hit: 19 (2d10 + 8) piercing damage plus 10 (3d6) poison damage.",
        attack_bonus: 15,
        damage_dice: "2d10 + 3d6",
        damage_bonus: 9
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +15 to hit, reach 10 ft., one target. Hit: 22 (4d6 + 8) slashing damage.",
        attack_bonus: 15,
        damage_dice: "4d6",
        damage_bonus: 8
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +15 to hit, reach 20 ft., one target. Hit: 17 (2d8 + 8) bludgeoning damage.",
        attack_bonus: 16,
        damage_dice: "2d8",
        damage_bonus: 8
      },
      {
        name: "Frightful Presence",
        desc: "Each creature of the dragon's choice that is within 120 feet of the dragon and aware of it must succeed on a DC 19 Wisdom saving throw or become frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the dragon's Frightful Presence for the next 24 hours.",
        attack_bonus: 0
      },
      {
        name: "Poison Breath (Recharge 5-6)",
        desc: "The dragon exhales poisonous gas in a 90-foot cone. Each creature in that area must make a DC 22 Constitution saving throw, taking 77 (22d6) poison damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "22d6"
      }
    ],
    legendary_actions: [
      {
        name: "Detect",
        desc: "The dragon makes a Wisdom (Perception) check.",
        attack_bonus: 0
      },
      {
        name: "Tail Attack",
        desc: "The dragon makes a tail attack.",
        attack_bonus: 0
      },
      {
        name: "Wing Attack (Costs 2 Actions)",
        desc: "The dragon beats its wings. Each creature within 15 ft. of the dragon must succeed on a DC 23 Dexterity saving throw or take 15 (2d6 + 8) bludgeoning damage and be knocked prone. The dragon can then fly up to half its flying speed.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Ancient Red Dragon",
    size: "Gargantuan",
    source: "SRD",
    type: "dragon",
    subtype: "",
    alignment: "chaotic evil",
    ac: 22,
    hp: 546,
    hit_dice: "28d20",
    speed: "40 ft., climb 40 ft., fly 80 ft.",
    stats: [30, 10, 29, 18, 15, 23],
    saves: [
      {
        dexterity: 7
      },
      {
        constitution: 16
      },
      {
        wisdom: 9
      },
      {
        charisma: 13
      }
    ],
    skillsaves: [
      {
        perception: 16
      },
      {
        stealth: 7
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "fire",
    condition_immunities: "",
    senses: "blindsight 60 ft., darkvision 120 ft., passive Perception 26",
    languages: "Common, Draconic",
    cr: "24",
    traits: [
      {
        name: "Legendary Resistance (3/Day)",
        desc: "If the dragon fails a saving throw, it can choose to succeed instead.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon can use its Frightful Presence. It then makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +17 to hit, reach 15 ft., one target. Hit: 21 (2d10 + 10) piercing damage plus 14 (4d6) fire damage.",
        attack_bonus: 17,
        damage_dice: "2d10 + 4d6",
        damage_bonus: 10
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +17 to hit, reach 10 ft., one target. Hit: 17 (2d6 + 10) slashing damage.",
        attack_bonus: 17,
        damage_dice: "2d6",
        damage_bonus: 10
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +17 to hit, reach 20 ft., one target. Hit: 19 (2d8 + 10) bludgeoning damage.",
        attack_bonus: 17,
        damage_dice: "2d8",
        damage_bonus: 10
      },
      {
        name: "Frightful Presence",
        desc: "Each creature of the dragon's choice that is within 120 feet of the dragon and aware of it must succeed on a DC 21 Wisdom saving throw or become frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the dragon's Frightful Presence for the next 24 hours.",
        attack_bonus: 0
      },
      {
        name: "Fire Breath (Recharge 5-6)",
        desc: "The dragon exhales fire in a 90-foot cone. Each creature in that area must make a DC 24 Dexterity saving throw, taking 91 (26d6) fire damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "26d6"
      }
    ],
    legendary_actions: [
      {
        name: "Detect",
        desc: "The dragon makes a Wisdom (Perception) check.",
        attack_bonus: 0
      },
      {
        name: "Tail Attack",
        desc: "The dragon makes a tail attack.",
        attack_bonus: 0
      },
      {
        name: "Wing Attack (Costs 2 Actions)",
        desc: "The dragon beats its wings. Each creature within 15 ft. of the dragon must succeed on a DC 25 Dexterity saving throw or take 17 (2d6 + 10) bludgeoning damage and be knocked prone. The dragon can then fly up to half its flying speed.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Ancient Silver Dragon",
    size: "Gargantuan",
    source: "SRD",
    type: "dragon",
    subtype: "",
    alignment: "lawful good",
    ac: 22,
    hp: 487,
    hit_dice: "25d20",
    speed: "40 ft., fly 80 ft.",
    stats: [30, 10, 29, 18, 15, 23],
    saves: [
      {
        dexterity: 7
      },
      {
        constitution: 16
      },
      {
        wisdom: 9
      },
      {
        charisma: 13
      }
    ],
    skillsaves: [
      {
        arcana: 11
      },
      {
        perception: 16
      },
      {
        history: 11
      },
      {
        stealth: 7
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "cold",
    condition_immunities: "",
    senses: "blindsight 60 ft., darkvision 120 ft., passive Perception 26",
    languages: "Common, Draconic",
    cr: "23",
    traits: [
      {
        name: "Legendary Resistance (3/Day)",
        desc: "If the dragon fails a saving throw, it can choose to succeed instead.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon can use its Frightful Presence. It then makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +17 to hit, reach 15 ft., one target. Hit: 21 (2d10 + 10) piercing damage.",
        attack_bonus: 17,
        damage_dice: "2d10",
        damage_bonus: 10
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +17 to hit, reach 10 ft., one target. Hit: 17 (2d6 + 10) slashing damage.",
        attack_bonus: 17,
        damage_dice: "2d6",
        damage_bonus: 10
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +17 to hit, reach 20 ft., one target. Hit: 19 (2d8 + 10) bludgeoning damage.",
        attack_bonus: 17,
        damage_dice: "2d8",
        damage_bonus: 10
      },
      {
        name: "Frightful Presence",
        desc: "Each creature of the dragon's choice that is within 120 feet of the dragon and aware of it must succeed on a DC 21 Wisdom saving throw or become frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the dragon's Frightful Presence for the next 24 hours.",
        attack_bonus: 0
      },
      {
        name: "Breath Weapons (Recharge 5-6)",
        desc: "The dragon uses one of the following breath weapons.\nCold Breath. The dragon exhales an icy blast in a 90-foot cone. Each creature in that area must make a DC 24 Constitution saving throw, taking 67 (15d8) cold damage on a failed save, or half as much damage on a successful one.\nParalyzing Breath. The dragon exhales paralyzing gas in a 90- foot cone. Each creature in that area must succeed on a DC 24 Constitution saving throw or be paralyzed for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success.",
        attack_bonus: 0,
        damage_dice: "15d8"
      },
      {
        name: "Change Shape",
        desc: "The dragon magically polymorphs into a humanoid or beast that has a challenge rating no higher than its own, or back into its true form. It reverts to its true form if it dies. Any equipment it is wearing or carrying is absorbed or borne by the new form (the dragon's choice).\nIn a new form, the dragon retains its alignment, hit points, Hit Dice, ability to speak, proficiencies, Legendary Resistance, lair actions, and Intelligence, Wisdom, and Charisma scores, as well as this action. Its statistics and capabilities are otherwise replaced by those of the new form, except any class features or legendary actions of that form.",
        attack_bonus: 0
      }
    ],
    legendary_actions: [
      {
        name: "Detect",
        desc: "The dragon makes a Wisdom (Perception) check.",
        attack_bonus: 0
      },
      {
        name: "Tail Attack",
        desc: "The dragon makes a tail attack.",
        attack_bonus: 0
      },
      {
        name: "Wing Attack (Costs 2 Actions)",
        desc: "The dragon beats its wings. Each creature within 15 ft. of the dragon must succeed on a DC 25 Dexterity saving throw or take 17 (2d6 + 10) bludgeoning damage and be knocked prone. The dragon can then fly up to half its flying speed.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Ancient White Dragon",
    size: "Gargantuan",
    source: "SRD",
    type: "dragon",
    subtype: "",
    alignment: "chaotic evil",
    ac: 20,
    hp: 333,
    hit_dice: "18d20",
    speed: "40 ft., burrow 40 ft., fly 80 ft., swim 40 ft.",
    stats: [26, 10, 26, 10, 13, 14],
    saves: [
      {
        dexterity: 6
      },
      {
        constitution: 14
      },
      {
        wisdom: 7
      },
      {
        charisma: 8
      }
    ],
    skillsaves: [
      {
        perception: 13
      },
      {
        stealth: 6
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "cold",
    condition_immunities: "",
    senses: "blindsight 60 ft., darkvision 120 ft., passive Perception 23",
    languages: "Common, Draconic",
    cr: "20",
    traits: [
      {
        name: "Ice Walk",
        desc: "The dragon can move across and climb icy surfaces without needing to make an ability check. Additionally, difficult terrain composed of ice or snow doesn't cost it extra moment.",
        attack_bonus: 0
      },
      {
        name: "Legendary Resistance (3/Day)",
        desc: "If the dragon fails a saving throw, it can choose to succeed instead.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon can use its Frightful Presence. It then makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +14 to hit, reach 15 ft., one target. Hit: 19 (2d10 + 8) piercing damage plus 9 (2d8) cold damage.",
        attack_bonus: 14,
        damage_dice: "2d10 + 2d8",
        damage_bonus: 8
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +14 to hit, reach 10 ft., one target. Hit: 15 (2d6 + 8) slashing damage.",
        attack_bonus: 14,
        damage_dice: "2d6",
        damage_bonus: 8
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +14 to hit, reach 20 ft., one target. Hit: 17 (2d8 + 8) bludgeoning damage.",
        attack_bonus: 14,
        damage_dice: "2d8",
        damage_bonus: 8
      },
      {
        name: "Frightful Presence",
        desc: "Each creature of the dragon's choice that is within 120 feet of the dragon and aware of it must succeed on a DC 16 Wisdom saving throw or become frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the dragon's Frightful Presence for the next 24 hours .",
        attack_bonus: 0
      },
      {
        name: "Cold Breath (Recharge 5-6)",
        desc: "The dragon exhales an icy blast in a 90-foot cone. Each creature in that area must make a DC 22 Constitution saving throw, taking 72 (l6d8) cold damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "16d8"
      }
    ]
  },
  {
    name: "Androsphinx",
    size: "Large",
    source: "SRD",
    type: "monstrosity",
    subtype: "",
    alignment: "lawful neutral",
    ac: 17,
    hp: 199,
    hit_dice: "19d10",
    speed: "40 ft., fly 60 ft.",
    stats: [22, 10, 20, 16, 18, 23],
    saves: [
      {
        dexterity: 6
      },
      {
        constitution: 11
      },
      {
        intelligence: 9
      },
      {
        wisdom: 10
      }
    ],
    skillsaves: [
      {
        religion: 15
      },
      {
        perception: 10
      },
      {
        arcana: 9
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "psychic; bludgeoning, piercing, and slashing from nonmagical weapons",
    condition_immunities: "charmed, frightened",
    senses: "truesight 120 ft., passive Perception 20",
    languages: "Common, Sphinx",
    cr: "17",
    traits: [
      {
        name: "Inscrutable",
        desc: "The sphinx is immune to any effect that would sense its emotions or read its thoughts, as well as any divination spell that it refuses. Wisdom (Insight) checks made to ascertain the sphinx's intentions or sincerity have disadvantage.",
        attack_bonus: 0
      },
      {
        name: "Magic Weapons",
        desc: "The sphinx's weapon attacks are magical.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The sphinx makes two claw attacks.",
        attack_bonus: 0
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +12 to hit, reach 5 ft., one target. Hit: 17 (2d10 + 6) slashing damage.",
        attack_bonus: 12,
        damage_dice: "2d10",
        damage_bonus: 6
      },
      {
        name: "Roar (3/Day)",
        desc: "The sphinx emits a magical roar. Each time it roars before finishing a long rest, the roar is louder and the effect is different, as detailed below. Each creature within 500 feet of the sphinx and able to hear the roar must make a saving throw.\n\nFirst Roar. Each creature that fails a DC 18 Wisdom saving throw is frightened for 1 minute. A frightened creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success.\n\nSecond Roar. Each creature that fails a DC 18 Wisdom saving throw is deafened and frightened for 1 minute. A frightened creature is paralyzed and can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success.\n\nThird Roar. Each creature makes a DC 18 Constitution saving throw. On a failed save, a creature takes 44 (8d10) thunder damage and is knocked prone. On a successful save, the creature takes half as much damage and isn't knocked prone.",
        attack_bonus: 0
      }
    ],
    legendary_actions: [
      {
        name: "Claw Attack",
        desc: "The sphinx makes one claw attack.",
        attack_bonus: 0
      },
      {
        name: "Teleport (Costs 2 Actions)",
        desc: "The sphinx magically teleports, along with any equipment it is wearing or carrying, up to 120 feet to an unoccupied space it can see.",
        attack_bonus: 0
      },
      {
        name: "Cast a Spell (Costs 3 Actions)",
        desc: "The sphinx casts a spell from its list of prepared spells, using a spell slot as normal.",
        attack_bonus: 0
      }
    ],
    spells: [
      "The sphinx is a 12th-level spellcaster. Its spellcasting ability is Wisdom (spell save DC 18, +10 to hit with spell attacks). It requires no material components to cast its spells. The sphinx has the following cleric spells prepared:",
      {
        "Cantrips (at will)": "sacred flame, spare the dying, thaumaturgy"
      },
      {
        "1st level (4 slots)": "command, detect evil and good, detect magic"
      },
      {
        "2nd level (3 slots)": "lesser restoration, zone of truth"
      },
      {
        "3rd level (3 slots)": "dispel magic, tongues"
      },
      {
        "4th level (3 slots)": "banishment, freedom of movement"
      },
      {
        "5th level (2 slots)": "flame strike, greater restoration"
      },
      {
        "6th level (1 slot)": "heroes' feast"
      }
    ]
  },
  {
    name: "Animated Armor",
    size: "Medium",
    source: "SRD",
    type: "construct",
    subtype: "",
    alignment: "unaligned",
    ac: 18,
    hp: 33,
    hit_dice: "6d8",
    speed: "25 ft.",
    stats: [14, 11, 13, 1, 3, 1],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "poison, psychic",
    condition_immunities: "blinded, charmed, deafened, exhaustion, frightened, paralyzed, petrified, poisoned",
    senses: "blindsight 60 ft. (blind beyond this radius), passive Perception 6",
    languages: "",
    cr: "1",
    traits: [
      {
        name: "Antimagic Susceptibility",
        desc: "The armor is incapacitated while in the area of an antimagic field. If targeted by dispel magic, the armor must succeed on a Constitution saving throw against the caster's spell save DC or fall unconscious for 1 minute.",
        attack_bonus: 0
      },
      {
        name: "False Appearance",
        desc: "While the armor remains motionless, it is indistinguishable from a normal suit of armor.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The armor makes two melee attacks.",
        attack_bonus: 0
      },
      {
        name: "Slam",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 5 (1d6 + 2) bludgeoning damage.",
        attack_bonus: 4,
        damage_dice: "1d6",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Ankheg",
    size: "Large",
    source: "SRD",
    type: "monstrosity",
    subtype: "",
    alignment: "unaligned",
    ac: 14,
    hp: 39,
    hit_dice: "6d10",
    speed: "30 ft., burrow 10 ft.",
    stats: [17, 11, 13, 1, 13, 6],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., tremorsense 60 ft., passive Perception 11",
    languages: "",
    cr: "2",
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 10 (2d6 + 3) slashing damage plus 3 (1d6) acid damage. If the target is a Large or smaller creature, it is grappled (escape DC 13). Until this grapple ends, the ankheg can bite only the grappled creature and has advantage on attack rolls to do so.",
        attack_bonus: 5,
        damage_dice: "2d6 + 1d6",
        damage_bonus: 3
      },
      {
        name: "Acid Spray (Recharge 6)",
        desc: "The ankheg spits acid in a line that is 30 ft. long and 5 ft. wide, provided that it has no creature grappled. Each creature in that line must make a DC 13 Dexterity saving throw, taking 10 (3d6) acid damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "3d6"
      }
    ]
  },
  {
    name: "Ape",
    size: "Medium",
    source: "SRD",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 19,
    hit_dice: "3d8",
    speed: "30 ft., climb 30 ft.",
    stats: [16, 14, 14, 6, 12, 7],
    skillsaves: [
      {
        athletics: 5
      },
      {
        perception: 3
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 13",
    languages: "",
    cr: "1/2",
    actions: [
      {
        name: "Multiattack",
        desc: "The ape makes two fist attacks.",
        attack_bonus: 0
      },
      {
        name: "Fist",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 6 (1d6 + 3) bludgeoning damage.",
        attack_bonus: 5,
        damage_dice: "1d6",
        damage_bonus: 3
      },
      {
        name: "Rock",
        desc: "Ranged Weapon Attack: +5 to hit, range 25/50 ft., one target. Hit: 6 (1d6 + 3) bludgeoning damage.",
        attack_bonus: 5,
        damage_dice: "1d6",
        damage_bonus: 3
      }
    ]
  },
  {
    name: "Archmage",
    size: "Medium",
    source: "SRD",
    type: "humanoid",
    subtype: "any race",
    alignment: "any alignment",
    ac: 12,
    hp: 99,
    hit_dice: "18d8 + 18",
    speed: "30 ft.",
    stats: [10, 14, 12, 20, 15, 16],
    saves: [
      {
        intelligence: 9
      },
      {
        wisdom: 6
      }
    ],
    skillsaves: [
      {
        arcana: 13
      },
      {
        history: 13
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "damage from spells; non magical bludgeoning, piercing, and slashing (from stoneskin)",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 12",
    languages: "any six languages",
    cr: "12",
    traits: [
      {
        name: "Magic Resistance",
        desc: "The archmage has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Dagger",
        desc: "Melee or Ranged Weapon Attack: +6 to hit, reach 5 ft. or range 20/60 ft., one target. Hit: 4 (1d4 + 2) piercing damage.",
        attack_bonus: 6,
        damage_dice: "1d4",
        damage_bonus: 2
      }
    ],
    spells: [
      "The archmage is an 18th-level spellcaster. Its spellcasting ability is Intelligence (spell save DC 17, +9 to hit with spell attacks). The archmage can cast disguise self and invisibility at will and has the following wizard spells prepared:",
      {
        "Cantrips (at will)": "fire bolt, light, mage hand, prestidigitation, shocking grasp"
      },
      {
        "1st level (4 slots)": "detect magic, identify, mage armor*, magic missile"
      },
      {
        "2nd level (3 slots)": "detect thoughts, mirror image, misty step"
      },
      {
        "3rd level (3 slots)": "counterspell,fly, lightning bolt"
      },
      {
        "4th level (3 slots)": "banishment, fire shield, stoneskin*"
      },
      {
        "5th level (3 slots)": "cone of cold, scrying, wall of force"
      },
      {
        "6th level (1 slot)": "globe of invulnerability"
      },
      {
        "7th level (1 slot)": "teleport"
      },
      {
        "8th level (1 slot)": "mind blank*"
      },
      {
        "9th level (1 slot)": "time stop"
      },
      "* The archmage casts these spells on itself before combat."
    ]
  },
  {
    name: "Assassin",
    size: "Medium",
    source: "SRD",
    type: "humanoid",
    subtype: "any race",
    alignment: "any non-good alignment",
    ac: 15,
    hp: 78,
    hit_dice: "12d8",
    speed: "30 ft.",
    stats: [11, 16, 14, 13, 11, 10],
    saves: [
      {
        dexterity: 6
      },
      {
        intelligence: 4
      }
    ],
    skillsaves: [
      {
        acrobatics: 6
      },
      {
        deception: 3
      },
      {
        perception: 3
      },
      {
        stealth: 9
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "poison",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 13",
    languages: "Thieves' cant plus any two languages",
    cr: "8",
    traits: [
      {
        name: "Assassinate",
        desc: "During its first turn, the assassin has advantage on attack rolls against any creature that hasn't taken a turn. Any hit the assassin scores against a surprised creature is a critical hit.",
        attack_bonus: 0
      },
      {
        name: "Evasion",
        desc: "If the assassin is subjected to an effect that allows it to make a Dexterity saving throw to take only half damage, the assassin instead takes no damage if it succeeds on the saving throw, and only half damage if it fails.",
        attack_bonus: 0
      },
      {
        name: "Sneak Attack (1/Turn)",
        desc: "The assassin deals an extra 13 (4d6) damage when it hits a target with a weapon attack and has advantage on the attack roll, or when the target is within 5 ft. of an ally of the assassin that isn't incapacitated and the assassin doesn't have disadvantage on the attack roll.",
        attack_bonus: 0,
        damage_dice: "4d6"
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The assassin makes two shortsword attacks.",
        attack_bonus: 0
      },
      {
        name: "Shortsword",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 6 (1d6 + 3) piercing damage, and the target must make a DC 15 Constitution saving throw, taking 24 (7d6) poison damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 6,
        damage_dice: "1d6",
        damage_bonus: 3
      },
      {
        name: "Light Crossbow",
        desc: "Ranged Weapon Attack: +6 to hit, range 80/320 ft., one target. Hit: 7 (1d8 + 3) piercing damage, and the target must make a DC 15 Constitution saving throw, taking 24 (7d6) poison damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 6,
        damage_dice: "1d8",
        damage_bonus: 3
      }
    ]
  },
  {
    name: "Awakened Shrub",
    size: "Small",
    source: "SRD",
    type: "plant",
    subtype: "",
    alignment: "unaligned",
    ac: 9,
    hp: 10,
    hit_dice: "3d6",
    speed: "20 ft.",
    stats: [3, 8, 11, 10, 10, 6],
    damage_vulnerabilities: "fire",
    damage_resistances: "piercing",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 10",
    languages: "one language known by its creator",
    cr: "0",
    traits: [
      {
        name: "False Appearance",
        desc: "While the shrub remains motionless, it is indistinguishable from a normal shrub.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Rake",
        desc: "Melee Weapon Attack: +1 to hit, reach 5 ft., one target. Hit: 1 (1d4 \u2014 1) slashing damage.",
        attack_bonus: 1,
        damage_dice: "1d4",
        damage_bonus: -1
      }
    ]
  },
  {
    name: "Awakened Tree",
    size: "Huge",
    source: "SRD",
    type: "plant",
    subtype: "",
    alignment: "unaligned",
    ac: 13,
    hp: 59,
    hit_dice: "7d12",
    speed: "20 ft.",
    stats: [19, 6, 15, 10, 10, 7],
    damage_vulnerabilities: "fire",
    damage_resistances: "bludgeoning, piercing",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 10",
    languages: "one language known by its creator",
    cr: "2",
    traits: [
      {
        name: "False Appearance",
        desc: "While the tree remains motionless, it is indistinguishable from a normal tree.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Slam",
        desc: "Melee Weapon Attack: +6 to hit, reach 10 ft., one target. Hit: 14 (3d6 + 4) bludgeoning damage.",
        attack_bonus: 6,
        damage_dice: "3d6",
        damage_bonus: 4
      }
    ]
  },
  {
    name: "Axe Beak",
    size: "Large",
    source: "SRD",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 11,
    hp: 19,
    hit_dice: "3d10",
    speed: "50 ft.",
    stats: [14, 12, 12, 2, 10, 5],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 10",
    languages: "",
    cr: "1/4",
    actions: [
      {
        name: "Beak",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 6 (1d8 + 2) slashing damage.",
        attack_bonus: 4,
        damage_dice: "1d8",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Azer",
    size: "Medium",
    source: "SRD",
    type: "elemental",
    subtype: "",
    alignment: "lawful neutral",
    ac: 17,
    hp: 39,
    hit_dice: "6d8",
    speed: "30 ft.",
    stats: [17, 12, 15, 12, 13, 10],
    saves: [
      {
        constitution: 4
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "fire, poison",
    condition_immunities: "poisoned",
    senses: "passive Perception 11",
    languages: "Ignan",
    cr: "2",
    traits: [
      {
        name: "Heated Body",
        desc: "A creature that touches the azer or hits it with a melee attack while within 5 ft. of it takes 5 (1d10) fire damage.",
        attack_bonus: 0,
        damage_dice: "1d10"
      },
      {
        name: "Heated Weapons",
        desc: "When the azer hits with a metal melee weapon, it deals an extra 3 (1d6) fire damage (included in the attack).",
        attack_bonus: 0
      },
      {
        name: "Illumination",
        desc: "The azer sheds bright light in a 10-foot radius and dim light for an additional 10 ft..",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Warhammer",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 7 (1d8 + 3) bludgeoning damage, or 8 (1d10 + 3) bludgeoning damage if used with two hands to make a melee attack, plus 3 (1d6) fire damage.",
        attack_bonus: 5,
        damage_dice: "1d8 + 1d6",
        damage_bonus: 3
      }
    ]
  },
  {
    name: "Baboon",
    size: "Small",
    source: "SRD",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 3,
    hit_dice: "1d6",
    speed: "30 ft., climb 30 ft.",
    stats: [8, 14, 11, 4, 12, 6],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 11",
    languages: "",
    cr: "0",
    traits: [
      {
        name: "Pack Tactics",
        desc: "The baboon has advantage on an attack roll against a creature if at least one of the baboon's allies is within 5 ft. of the creature and the ally isn't incapacitated.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +1 to hit, reach 5 ft., one target. Hit: 1 (1d4 \u2014 1) piercing damage.",
        attack_bonus: 1,
        damage_dice: "1d4",
        damage_bonus: -1
      }
    ]
  },
  {
    name: "Badger",
    size: "Tiny",
    source: "SRD",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 10,
    hp: 3,
    hit_dice: "1d4",
    speed: "20 ft., burrow 5 ft.",
    stats: [4, 11, 12, 2, 12, 5],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 30 ft., passive Perception 11",
    languages: "",
    cr: "0",
    traits: [
      {
        name: "Keen Smell",
        desc: "The badger has advantage on Wisdom (Perception) checks that rely on smell.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +2 to hit, reach 5 ft., one target. Hit: 1 piercing damage.",
        attack_bonus: 2,
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Balor",
    size: "Huge",
    source: "SRD",
    type: "fiend",
    subtype: "demon",
    alignment: "chaotic evil",
    ac: 19,
    hp: 262,
    hit_dice: "21d12",
    speed: "40 ft., fly 80 ft.",
    stats: [26, 15, 22, 20, 16, 22],
    saves: [
      {
        strength: 14
      },
      {
        constitution: 12
      },
      {
        wisdom: 9
      },
      {
        charisma: 12
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "cold, lightning; bludgeoning, piercing, and slashing from nonmagical weapons",
    damage_immunities: "fire, poison",
    condition_immunities: "poisoned",
    senses: "truesight 120 ft., passive Perception 13",
    languages: "Abyssal, telepathy 120 ft.",
    cr: "19",
    traits: [
      {
        name: "Death Throes",
        desc: "When the balor dies, it explodes, and each creature within 30 feet of it must make a DC 20 Dexterity saving throw, taking 70 (20d6) fire damage on a failed save, or half as much damage on a successful one. The explosion ignites flammable objects in that area that aren't being worn or carried, and it destroys the balor's weapons.",
        attack_bonus: 0,
        damage_dice: "20d6"
      },
      {
        name: "Fire Aura",
        desc: "At the start of each of the balor's turns, each creature within 5 feet of it takes 10 (3d6) fire damage, and flammable objects in the aura that aren't being worn or carried ignite. A creature that touches the balor or hits it with a melee attack while within 5 feet of it takes 10 (3d6) fire damage.",
        attack_bonus: 0,
        damage_dice: "3d6"
      },
      {
        name: "Magic Resistance",
        desc: "The balor has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      },
      {
        name: "Magic Weapons",
        desc: "The balor's weapon attacks are magical.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The balor makes two attacks: one with its longsword and one with its whip.",
        attack_bonus: 0
      },
      {
        name: "Longsword",
        desc: "Melee Weapon Attack: +14 to hit, reach 10 ft., one target. Hit: 21 (3d8 + 8) slashing damage plus 13 (3d8) lightning damage. If the balor scores a critical hit, it rolls damage dice three times, instead of twice.",
        attack_bonus: 14,
        damage_dice: "3d8 + 3d8",
        damage_bonus: 8
      },
      {
        name: "Whip",
        desc: "Melee Weapon Attack: +14 to hit, reach 30 ft., one target. Hit: 15 (2d6 + 8) slashing damage plus 10 (3d6) fire damage, and the target must succeed on a DC 20 Strength saving throw or be pulled up to 25 feet toward the balor.",
        attack_bonus: 14,
        damage_dice: "2d6 + 3d6",
        damage_bonus: 8
      },
      {
        name: "Teleport",
        desc: "The balor magically teleports, along with any equipment it is wearing or carrying, up to 120 feet to an unoccupied space it can see.",
        attack_bonus: 0
      },
      {
        name: "Variant: Summon Demon (1/Day)",
        desc: "The demon chooses what to summon and attempts a magical summoning.\nA balor has a 50 percent chance of summoning 1d8 vrocks, 1d6 hezrous, 1d4 glabrezus, 1d3 nalfeshnees, 1d2 mariliths, or one goristro.\nA summoned demon appears in an unoccupied space within 60 feet of its summoner, acts as an ally of its summoner, and can't summon other demons. It remains for 1 minute, until it or its summoner dies, or until its summoner dismisses it as an action.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Bandit",
    size: "Medium",
    source: "SRD",
    type: "humanoid",
    subtype: "any race",
    alignment: "any non-lawful alignment",
    ac: 12,
    hp: 11,
    hit_dice: "2d8",
    speed: "30 ft.",
    stats: [11, 12, 12, 10, 10, 10],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 10",
    languages: "any one language (usually Common)",
    cr: "1/8",
    actions: [
      {
        name: "Scimitar",
        desc: "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 4 (1d6 + 1) slashing damage.",
        attack_bonus: 3,
        damage_dice: "1d6",
        damage_bonus: 1
      },
      {
        name: "Light Crossbow",
        desc: "Ranged Weapon Attack: +3 to hit, range 80 ft./320 ft., one target. Hit: 5 (1d8 + 1) piercing damage.",
        attack_bonus: 3,
        damage_dice: "1d8",
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Bandit Captain",
    size: "Medium",
    source: "SRD",
    type: "humanoid",
    subtype: "any race",
    alignment: "any non-lawful alignment",
    ac: 15,
    hp: 65,
    hit_dice: "10d8",
    speed: "30 ft.",
    stats: [15, 16, 14, 14, 11, 14],
    saves: [
      {
        strength: 4
      },
      {
        dexterity: 5
      },
      {
        wisdom: 2
      }
    ],
    skillsaves: [
      {
        athletics: 4
      },
      {
        deception: 4
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 10",
    languages: "any two languages",
    cr: "2",
    actions: [
      {
        name: "Multiattack",
        desc: "The captain makes three melee attacks: two with its scimitar and one with its dagger. Or the captain makes two ranged attacks with its daggers.",
        attack_bonus: 0
      },
      {
        name: "Scimitar",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 6 (1d6 + 3) slashing damage.",
        attack_bonus: 5,
        damage_dice: "1d6",
        damage_bonus: 3
      },
      {
        name: "Dagger",
        desc: "Melee or Ranged Weapon Attack: +5 to hit, reach 5 ft. or range 20/60 ft., one target. Hit: 5 (1d4 + 3) piercing damage.",
        attack_bonus: 5,
        damage_dice: "1d4",
        damage_bonus: 3
      }
    ],
    reactions: [
      {
        name: "Parry",
        desc: "The captain adds 2 to its AC against one melee attack that would hit it. To do so, the captain must see the attacker and be wielding a melee weapon.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Barbed Devil",
    size: "Medium",
    source: "SRD",
    type: "fiend",
    subtype: "devil",
    alignment: "lawful evil",
    ac: 15,
    hp: 110,
    hit_dice: "13d8",
    speed: "30 ft.",
    stats: [16, 17, 18, 12, 14, 14],
    saves: [
      {
        strength: 6
      },
      {
        constitution: 7
      },
      {
        wisdom: 5
      },
      {
        charisma: 5
      }
    ],
    skillsaves: [
      {
        deception: 5
      },
      {
        insight: 5
      },
      {
        perception: 8
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "cold; bludgeoning, piercing, and slashing from nonmagical weapons that aren't silvered",
    damage_immunities: "fire, poison",
    condition_immunities: "poisoned",
    senses: "darkvision 120 ft., passive Perception 18",
    languages: "Infernal, telepathy 120 ft.",
    cr: "5",
    traits: [
      {
        name: "Barbed Hide",
        desc: "At the start of each of its turns, the barbed devil deals 5 (1d10) piercing damage to any creature grappling it.",
        attack_bonus: 0,
        damage_dice: "1d10"
      },
      {
        name: "Devil's Sight",
        desc: "Magical darkness doesn't impede the devil's darkvision.",
        attack_bonus: 0
      },
      {
        name: "Magic Resistance",
        desc: "The devil has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The devil makes three melee attacks: one with its tail and two with its claws. Alternatively, it can use Hurl Flame twice.",
        attack_bonus: 0
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft ., one target. Hit: 6 (1d6 + 3) piercing damage.",
        attack_bonus: 6,
        damage_dice: "1d6",
        damage_bonus: 3
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 10 (2d6 + 3) piercing damage.",
        attack_bonus: 6,
        damage_dice: "2d6",
        damage_bonus: 3
      },
      {
        name: "Hurl Flame",
        desc: "Ranged Spell Attack: +5 to hit, range 150 ft., one target. Hit: 10 (3d6) fire damage. If the target is a flammable object that isn't being worn or carried, it also catches fire.",
        attack_bonus: 5,
        damage_dice: "3d6"
      }
    ]
  },
  {
    name: "Basilisk",
    size: "Medium",
    source: "SRD",
    type: "monstrosity",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 52,
    hit_dice: "8d8",
    speed: "20 ft.",
    stats: [16, 8, 15, 2, 8, 7],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 9",
    languages: "",
    cr: "3",
    traits: [
      {
        name: "Petrifying Gaze",
        desc: "If a creature starts its turn within 30 ft. of the basilisk and the two of them can see each other, the basilisk can force the creature to make a DC 12 Constitution saving throw if the basilisk isn't incapacitated. On a failed save, the creature magically begins to turn to stone and is restrained. It must repeat the saving throw at the end of its next turn. On a success, the effect ends. On a failure, the creature is petrified until freed by the greater restoration spell or other magic.\nA creature that isn't surprised can avert its eyes to avoid the saving throw at the start of its turn. If it does so, it can't see the basilisk until the start of its next turn, when it can avert its eyes again. If it looks at the basilisk in the meantime, it must immediately make the save.\nIf the basilisk sees its reflection within 30 ft. of it in bright light, it mistakes itself for a rival and targets itself with its gaze.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 10 (2d6 + 3) piercing damage plus 7 (2d6) poison damage.",
        attack_bonus: 5,
        damage_dice: "2d6 + 2d6",
        damage_bonus: 3
      }
    ]
  },
  {
    name: "Bat",
    size: "Tiny",
    source: "SRD",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 1,
    hit_dice: "1d4",
    speed: "5 ft., fly 30 ft.",
    stats: [2, 15, 8, 2, 12, 4],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "blindsight 60 ft., passive Perception 11",
    languages: "",
    cr: "0",
    traits: [
      {
        name: "Echolocation",
        desc: "The bat can't use its blindsight while deafened.",
        attack_bonus: 0
      },
      {
        name: "Keen Hearing",
        desc: "The bat has advantage on Wisdom (Perception) checks that rely on hearing.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +0 to hit, reach 5 ft., one creature. Hit: 1 piercing damage.",
        attack_bonus: 0,
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Bearded Devil",
    size: "Medium",
    source: "SRD",
    type: "fiend",
    subtype: "devil",
    alignment: "lawful evil",
    ac: 13,
    hp: 52,
    hit_dice: "8d8",
    speed: "30 ft.",
    stats: [16, 15, 15, 9, 11, 11],
    saves: [
      {
        strength: 5
      },
      {
        constitution: 4
      },
      {
        wisdom: 2
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "cold; bludgeoning, piercing, and slashing from nonmagical weapons that aren't silvered",
    damage_immunities: "fire, poison",
    condition_immunities: "poisoned",
    senses: "darkvision 120 ft., passive Perception 10",
    languages: "Infernal, telepathy 120 ft.",
    cr: "3",
    traits: [
      {
        name: "Devil's Sight",
        desc: "Magical darkness doesn't impede the devil's darkvision.",
        attack_bonus: 0
      },
      {
        name: "Magic Resistance",
        desc: "The devil has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      },
      {
        name: "Steadfast",
        desc: "The devil can't be frightened while it can see an allied creature within 30 feet of it.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The devil makes two attacks: one with its beard and one with its glaive.",
        attack_bonus: 0
      },
      {
        name: "Beard",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one creature. Hit: 6 (1d8 + 2) piercing damage, and the target must succeed on a DC 12 Constitution saving throw or be poisoned for 1 minute. While poisoned in this way, the target can't regain hit points. The target can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success.",
        attack_bonus: 5,
        damage_dice: "1d8",
        damage_bonus: 2
      },
      {
        name: "Glaive",
        desc: "Melee Weapon Attack: +5 to hit, reach 10 ft., one target. Hit: 8 (1d10 + 3) slashing damage. If the target is a creature other than an undead or a construct, it must succeed on a DC 12 Constitution saving throw or lose 5 (1d10) hit points at the start of each of its turns due to an infernal wound. Each time the devil hits the wounded target with this attack, the damage dealt by the wound increases by 5 (1d10). Any creature can take an action to stanch the wound with a successful DC 12 Wisdom (Medicine) check. The wound also closes if the target receives magical healing.",
        attack_bonus: 5,
        damage_dice: "1d10",
        damage_bonus: 3
      }
    ]
  },
  {
    name: "Behir",
    size: "Huge",
    source: "SRD",
    type: "monstrosity",
    subtype: "",
    alignment: "neutral evil",
    ac: 17,
    hp: 168,
    hit_dice: "16d12",
    speed: "50 ft., climb 40 ft.",
    stats: [23, 16, 18, 7, 14, 12],
    skillsaves: [
      {
        perception: 6
      },
      {
        stealth: 7
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "lightning",
    condition_immunities: "",
    senses: "darkvision 90 ft., passive Perception 16",
    languages: "Draconic",
    cr: "11",
    actions: [
      {
        name: "Multiattack",
        desc: "The behir makes two attacks: one with its bite and one to constrict.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +10 to hit, reach 10 ft., one target. Hit: 22 (3d10 + 6) piercing damage.",
        attack_bonus: 10,
        damage_dice: "3d10",
        damage_bonus: 6
      },
      {
        name: "Constrict",
        desc: "Melee Weapon Attack: +10 to hit, reach 5 ft., one Large or smaller creature. Hit: 17 (2d10 + 6) bludgeoning damage plus 17 (2d10 + 6) slashing damage. The target is grappled (escape DC 16) if the behir isn't already constricting a creature, and the target is restrained until this grapple ends.",
        attack_bonus: 10,
        damage_dice: "2d10 + 2d10",
        damage_bonus: 6
      },
      {
        name: "Lightning Breath (Recharge 5-6)",
        desc: "The behir exhales a line of lightning that is 20 ft. long and 5 ft. wide. Each creature in that line must make a DC 16 Dexterity saving throw, taking 66 (12d10) lightning damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "12d10"
      },
      {
        name: "Swallow",
        desc: "The behir makes one bite attack against a Medium or smaller target it is grappling. If the attack hits, the target is also swallowed, and the grapple ends. While swallowed, the target is blinded and restrained, it has total cover against attacks and other effects outside the behir, and it takes 21 (6d6) acid damage at the start of each of the behir's turns. A behir can have only one creature swallowed at a time.\nIf the behir takes 30 damage or more on a single turn from the swallowed creature, the behir must succeed on a DC 14 Constitution saving throw at the end of that turn or regurgitate the creature, which falls prone in a space within 10 ft. of the behir. If the behir dies, a swallowed creature is no longer restrained by it and can escape from the corpse by using 15 ft. of movement, exiting prone.",
        attack_bonus: 0,
        damage_dice: "6d6"
      }
    ]
  },
  {
    name: "Berserker",
    size: "Medium",
    source: "SRD",
    type: "humanoid",
    subtype: "any race",
    alignment: "any chaotic alignment",
    ac: 13,
    hp: 67,
    hit_dice: "9d8",
    speed: "30 ft.",
    stats: [16, 12, 17, 9, 11, 9],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 10",
    languages: "any one language (usually Common)",
    cr: "2",
    traits: [
      {
        name: "Reckless",
        desc: "At the start of its turn, the berserker can gain advantage on all melee weapon attack rolls during that turn, but attack rolls against it have advantage until the start of its next turn.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Greataxe",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 9 (1d12 + 3) slashing damage.",
        attack_bonus: 5,
        damage_dice: "1d12",
        damage_bonus: 3
      }
    ]
  },
  {
    name: "Black Bear",
    size: "Medium",
    source: "SRD",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 11,
    hp: 19,
    hit_dice: "3d8",
    speed: "40 ft., climb 30 ft.",
    stats: [15, 10, 14, 2, 12, 7],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 13",
    languages: "",
    cr: "1/2",
    traits: [
      {
        name: "Keen Smell",
        desc: "The bear has advantage on Wisdom (Perception) checks that rely on smell.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The bear makes two attacks: one with its bite and one with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 5 (1d6 + 2) piercing damage.",
        attack_bonus: 3,
        damage_dice: "1d6",
        damage_bonus: 2
      },
      {
        name: "Claws",
        desc: "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 7 (2d4 + 2) slashing damage.",
        attack_bonus: 3,
        damage_dice: "2d4",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Black Dragon Wyrmling",
    size: "Medium",
    source: "SRD",
    type: "dragon",
    subtype: "",
    alignment: "chaotic evil",
    ac: 17,
    hp: 33,
    hit_dice: "6d8",
    speed: "30 ft., fly 60 ft., swim 30 ft.",
    stats: [15, 14, 13, 10, 11, 13],
    saves: [
      {
        dexterity: 4
      },
      {
        constitution: 3
      },
      {
        wisdom: 2
      },
      {
        charisma: 3
      }
    ],
    skillsaves: [
      {
        perception: 4
      },
      {
        stealth: 4
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "acid",
    condition_immunities: "",
    senses: "blindsight 10 ft., darkvision 60 ft., passive Perception 14",
    languages: "Draconic",
    cr: "2",
    traits: [
      {
        name: "Amphibious",
        desc: "The dragon can breathe air and water.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 7 (1d10 + 2) piercing damage plus 2 (1d4) acid damage.",
        attack_bonus: 4,
        damage_dice: "1d10",
        damage_bonus: 2
      },
      {
        name: "Acid Breath (Recharge 5-6)",
        desc: "The dragon exhales acid in a 15-foot line that is 5 feet wide. Each creature in that line must make a DC 11 Dexterity saving throw, taking 22 (Sd8) acid damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "5d8"
      }
    ]
  },
  {
    name: "Black Pudding",
    size: "Large",
    source: "SRD",
    type: "ooze",
    subtype: "",
    alignment: "unaligned",
    ac: 7,
    hp: 85,
    hit_dice: "10d10",
    speed: "20 ft., climb 20 ft.",
    stats: [16, 5, 16, 1, 6, 1],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "acid, cold, lightning, slashing",
    condition_immunities: "blinded, charmed, deafened, exhaustion, frightened, prone",
    senses: "blindsight 60 ft. (blind beyond this radius), passive Perception 8",
    languages: "",
    cr: "4",
    traits: [
      {
        name: "Amorphous",
        desc: "The pudding can move through a space as narrow as 1 inch wide without squeezing.",
        attack_bonus: 0
      },
      {
        name: "Corrosive Form",
        desc: "A creature that touches the pudding or hits it with a melee attack while within 5 feet of it takes 4 (1d8) acid damage. Any nonmagical weapon made of metal or wood that hits the pudding corrodes. After dealing damage, the weapon takes a permanent and cumulative -1 penalty to damage rolls. If its penalty drops to -5, the weapon is destroyed. Nonmagical ammunition made of metal or wood that hits the pudding is destroyed after dealing damage. The pudding can eat through 2-inch-thick, nonmagical wood or metal in 1 round.",
        attack_bonus: 0,
        damage_dice: "1d8"
      },
      {
        name: "Spider Climb",
        desc: "The pudding can climb difficult surfaces, including upside down on ceilings, without needing to make an ability check.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Pseudopod",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 6 (1d6 + 3) bludgeoning damage plus 18 (4d8) acid damage. In addition, nonmagical armor worn by the target is partly dissolved and takes a permanent and cumulative -1 penalty to the AC it offers. The armor is destroyed if the penalty reduces its AC to 10.",
        attack_bonus: 5,
        damage_dice: "1d6 + 4d8",
        damage_bonus: 3
      }
    ],
    reactions: [
      {
        name: "Split",
        desc: "When a pudding that is Medium or larger is subjected to lightning or slashing damage, it splits into two new puddings if it has at least 10 hit points. Each new pudding has hit points equal to half the original pudding's, rounded down. New puddings are one size smaller than the original pudding.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Blink Dog",
    size: "Medium",
    source: "SRD",
    type: "fey",
    subtype: "",
    alignment: "lawful good",
    ac: 13,
    hp: 22,
    hit_dice: "4d8",
    speed: "40 ft.",
    stats: [12, 17, 12, 10, 13, 11],
    skillsaves: [
      {
        perception: 3
      },
      {
        stealth: 5
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 10",
    languages: "Blink Dog, understands Sylvan but can't speak it",
    cr: "1/4",
    traits: [
      {
        name: "Keen Hearing and Smell",
        desc: "The dog has advantage on Wisdom (Perception) checks that rely on hearing or smell.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 4 (1d6 + 1) piercing damage.",
        attack_bonus: 3,
        damage_dice: "1d6",
        damage_bonus: 1
      },
      {
        name: "Teleport (Recharge 4-6)",
        desc: "The dog magically teleports, along with any equipment it is wearing or carrying, up to 40 ft. to an unoccupied space it can see. Before or after teleporting, the dog can make one bite attack.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Blood Hawk",
    size: "Small",
    source: "SRD",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 7,
    hit_dice: "2d6",
    speed: "10 ft., fly 60 ft.",
    stats: [6, 14, 10, 3, 14, 5],
    skillsaves: [
      {
        perception: 4
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 14",
    languages: "",
    cr: "1/8",
    traits: [
      {
        name: "Keen Sight",
        desc: "The hawk has advantage on Wisdom (Perception) checks that rely on sight.",
        attack_bonus: 0
      },
      {
        name: "Pack Tactics",
        desc: "The hawk has advantage on an attack roll against a creature if at least one of the hawk's allies is within 5 ft. of the creature and the ally isn't incapacitated.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Beak",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 4 (1d4 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d4",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Blue Dragon Wyrmling",
    size: "Medium",
    source: "SRD",
    type: "dragon",
    subtype: "",
    alignment: "lawful evil",
    ac: 17,
    hp: 52,
    hit_dice: "8d8",
    speed: "30 ft., burrow 15 ft., fly 60 ft.",
    stats: [17, 10, 15, 12, 11, 15],
    saves: [
      {
        dexterity: 2
      },
      {
        constitution: 4
      },
      {
        wisdom: 2
      },
      {
        charisma: 4
      }
    ],
    skillsaves: [
      {
        perception: 4
      },
      {
        stealth: 2
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "lightning",
    condition_immunities: "",
    senses: "blindsight 10 ft., darkvision 60 ft., passive Perception 14",
    languages: "Draconic",
    cr: "3",
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 8 (1d10 + 3) piercing damage plus 3 (1d6) lightning damage.",
        attack_bonus: 5,
        damage_dice: "1d10 + 1d6",
        damage_bonus: 3
      },
      {
        name: "Lightning Breath (Recharge 5-6)",
        desc: "The dragon exhales lightning in a 30-foot line that is 5 feet wide. Each creature in that line must make a DC 12 Dexterity saving throw, taking 22 (4d10) lightning damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "4d10"
      }
    ]
  },
  {
    name: "Boar",
    size: "Medium",
    source: "SRD",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 11,
    hp: 11,
    hit_dice: "2d8",
    speed: "40 ft.",
    stats: [13, 11, 12, 2, 9, 5],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 9",
    languages: "",
    cr: "1/4",
    traits: [
      {
        name: "Charge",
        desc: "If the boar moves at least 20 ft. straight toward a target and then hits it with a tusk attack on the same turn, the target takes an extra 3 (1d6) slashing damage. If the target is a creature, it must succeed on a DC 11 Strength saving throw or be knocked prone.",
        attack_bonus: 0,
        damage_dice: "1d6"
      },
      {
        name: "Relentless (Recharges after a Short or Long Rest)",
        desc: "If the boar takes 7 damage or less that would reduce it to 0 hit points, it is reduced to 1 hit point instead.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Tusk",
        desc: "Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 4 (1d6 + 1) slashing damage.",
        attack_bonus: 3,
        damage_dice: "1d6",
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Bone Devil",
    size: "Large",
    source: "SRD",
    type: "fiend",
    subtype: "devil",
    alignment: "lawful evil",
    ac: 19,
    hp: 142,
    hit_dice: "15d10",
    speed: "40 ft., fly 40 ft.",
    stats: [18, 16, 18, 13, 14, 16],
    saves: [
      {
        intelligence: 5
      },
      {
        wisdom: 6
      },
      {
        charisma: 7
      }
    ],
    skillsaves: [
      {
        deception: 7
      },
      {
        insight: 6
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "cold; bludgeoning, piercing, and slashing from nonmagical weapons that aren't silvered",
    damage_immunities: "fire, poison",
    condition_immunities: "poisoned",
    senses: "darkvision 120 ft., passive Perception 9",
    languages: "Infernal, telepathy 120 ft.",
    cr: "12",
    traits: [
      {
        name: "Devil's Sight",
        desc: "Magical darkness doesn't impede the devil's darkvision.",
        attack_bonus: 0
      },
      {
        name: "Magic Resistance",
        desc: "The devil has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The devil makes three attacks: two with its claws and one with its sting.",
        attack_bonus: 0
      },
      {
        name: "Multiattack",
        desc: "The devil makes three attacks: two with its claws and one with its sting.",
        attack_bonus: 0
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +8 to hit, reach 10 ft., one target. Hit: 8 (1d8 + 4) slashing damage.",
        attack_bonus: 8,
        damage_dice: "1d8",
        damage_bonus: 4
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +8 to hit, reach 10 ft., one target. Hit: 8 (1d8 + 4) slashing damage.",
        attack_bonus: 8,
        damage_dice: "1d8",
        damage_bonus: 4
      },
      {
        name: "Sting",
        desc: "Melee Weapon Attack: +8 to hit, reach 10 ft., one target. Hit: 13 (2d8 + 4) piercing damage plus 17 (5d6) poison damage, and the target must succeed on a DC 14 Constitution saving throw or become poisoned for 1 minute. The target can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success .",
        attack_bonus: 8,
        damage_dice: "2d8",
        damage_bonus: 4
      },
      {
        name: "Sting",
        desc: "Melee Weapon Attack: +8 to hit, reach 10 ft., one target. Hit: 13 (2d8 + 4) piercing damage plus 17 (5d6) poison damage, and the target must succeed on a DC 14 Constitution saving throw or become poisoned for 1 minute. The target can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success .",
        attack_bonus: 8,
        damage_dice: "2d8",
        damage_bonus: 4
      }
    ]
  },
  {
    name: "Brass Dragon Wyrmling",
    size: "Medium",
    source: "SRD",
    type: "dragon",
    subtype: "",
    alignment: "chaotic good",
    ac: 16,
    hp: 16,
    hit_dice: "3d8",
    speed: "30 ft., burrow 15 ft., fly 60 ft.",
    stats: [15, 10, 13, 10, 11, 13],
    saves: [
      {
        dexterity: 2
      },
      {
        constitution: 3
      },
      {
        wisdom: 2
      },
      {
        charisma: 3
      }
    ],
    skillsaves: [
      {
        perception: 4
      },
      {
        stealth: 2
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "fire",
    condition_immunities: "",
    senses: "blindsight 10 ft., darkvision 60 ft., passive Perception 14",
    languages: "Draconic",
    cr: "1",
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 7 (1d10 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d10",
        damage_bonus: 2
      },
      {
        name: "Breath Weapons (Recharge 5-6)",
        desc: "The dragon uses one of the following breath weapons.\nFire Breath. The dragon exhales fire in an 20-foot line that is 5 feet wide. Each creature in that line must make a DC 11 Dexterity saving throw, taking 14 (4d6) fire damage on a failed save, or half as much damage on a successful one.\nSleep Breath. The dragon exhales sleep gas in a 15-foot cone. Each creature in that area must succeed on a DC 11 Constitution saving throw or fall unconscious for 1 minute. This effect ends for a creature if the creature takes damage or someone uses an action to wake it.",
        attack_bonus: 0,
        damage_dice: "4d6"
      }
    ]
  },
  {
    name: "Bronze Dragon Wyrmling",
    size: "Medium",
    source: "SRD",
    type: "dragon",
    subtype: "",
    alignment: "lawful good",
    ac: 17,
    hp: 32,
    hit_dice: "5d8",
    speed: "30 ft., fly 60 ft., swim 30 ft.",
    stats: [17, 10, 15, 12, 11, 15],
    saves: [
      {
        dexterity: 2
      },
      {
        constitution: 4
      },
      {
        wisdom: 2
      },
      {
        charisma: 4
      }
    ],
    skillsaves: [
      {
        perception: 4
      },
      {
        stealth: 2
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "lightning",
    condition_immunities: "",
    senses: "blindsight 10 ft., darkvision 60 ft., passive Perception 14",
    languages: "Draconic",
    cr: "2",
    traits: [
      {
        name: "Amphibious",
        desc: "The dragon can breathe air and water.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 8 (1d10 + 3) piercing damage.",
        attack_bonus: 5,
        damage_dice: "1d10",
        damage_bonus: 3
      },
      {
        name: "Breath Weapons (Recharge 5-6)",
        desc: "The dragon uses one of the following breath weapons.\nLightning Breath. The dragon exhales lightning in a 40-foot line that is 5 feet wide. Each creature in that line must make a DC 12 Dexterity saving throw, taking 16 (3d10) lightning damage on a failed save, or half as much damage on a successful one.\nRepulsion Breath. The dragon exhales repulsion energy in a 30-foot cone. Each creature in that area must succeed on a DC 12 Strength saving throw. On a failed save, the creature is pushed 30 feet away from the dragon.",
        attack_bonus: 0,
        damage_dice: "3d10"
      }
    ]
  },
  {
    name: "Brown Bear",
    size: "Large",
    source: "SRD",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 11,
    hp: 34,
    hit_dice: "4d10",
    speed: "40 ft., climb 30 ft.",
    stats: [19, 10, 16, 2, 13, 7],
    skillsaves: [
      {
        perception: 3
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 13",
    languages: "",
    cr: "1",
    traits: [
      {
        name: "Keen Smell",
        desc: "The bear has advantage on Wisdom (Perception) checks that rely on smell.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The bear makes two attacks: one with its bite and one with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 8 (1d8 + 4) piercing damage.",
        attack_bonus: 5,
        damage_dice: "1d8",
        damage_bonus: 4
      },
      {
        name: "Claws",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 11 (2d6 + 4) slashing damage.",
        attack_bonus: 5,
        damage_dice: "2d6",
        damage_bonus: 4
      }
    ]
  },
  {
    name: "Bugbear",
    size: "Medium",
    source: "SRD",
    type: "humanoid",
    subtype: "goblinoid",
    alignment: "chaotic evil",
    ac: 16,
    hp: 27,
    hit_dice: "5d8",
    speed: "30 ft.",
    stats: [15, 14, 13, 8, 11, 9],
    skillsaves: [
      {
        stealth: 6
      },
      {
        survival: 2
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 10",
    languages: "Common, Goblin",
    cr: "1",
    traits: [
      {
        name: "Brute",
        desc: "A melee weapon deals one extra die of its damage when the bugbear hits with it (included in the attack).",
        attack_bonus: 0
      },
      {
        name: "Surprise Attack",
        desc: "If the bugbear surprises a creature and hits it with an attack during the first round of combat, the target takes an extra 7 (2d6) damage from the attack.",
        attack_bonus: 0,
        damage_dice: "2d6"
      }
    ],
    actions: [
      {
        name: "Morningstar",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 11 (2d8 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "2d8",
        damage_bonus: 2
      },
      {
        name: "Javelin",
        desc: "Melee or Ranged Weapon Attack: +4 to hit, reach 5 ft. or range 30/120 ft., one target. Hit: 9 (2d6 + 2) piercing damage in melee or 5 (1d6 + 2) piercing damage at range.",
        attack_bonus: 4,
        damage_dice: "2d6",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Bulette",
    size: "Large",
    source: "SRD",
    type: "monstrosity",
    subtype: "",
    alignment: "unaligned",
    ac: 17,
    hp: 94,
    hit_dice: "9d10",
    speed: "40 ft., burrow 40 ft.",
    stats: [19, 11, 21, 2, 10, 5],
    skillsaves: [
      {
        perception: 6
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., tremorsense 60 ft., passive Perception 16",
    languages: "",
    cr: "5",
    traits: [
      {
        name: "Standing Leap",
        desc: "The bulette's long jump is up to 30 ft. and its high jump is up to 15 ft., with or without a running start.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 30 (4d12 + 4) piercing damage.",
        attack_bonus: 7,
        damage_dice: "4d12",
        damage_bonus: 4
      },
      {
        name: "Deadly Leap",
        desc: "If the bulette jumps at least 15 ft. as part of its movement, it can then use this action to land on its ft. in a space that contains one or more other creatures. Each of those creatures must succeed on a DC 16 Strength or Dexterity saving throw (target's choice) or be knocked prone and take 14 (3d6 + 4) bludgeoning damage plus 14 (3d6 + 4) slashing damage. On a successful save, the creature takes only half the damage, isn't knocked prone, and is pushed 5 ft. out of the bulette's space into an unoccupied space of the creature's choice. If no unoccupied space is within range, the creature instead falls prone in the bulette's space.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Camel",
    size: "Large",
    source: "SRD",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 9,
    hp: 15,
    hit_dice: "2d10",
    speed: "50 ft.",
    stats: [16, 8, 14, 2, 8, 5],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 9",
    languages: "",
    cr: "1/8",
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 2 (1d4) bludgeoning damage.",
        attack_bonus: 5,
        damage_dice: "1d4"
      }
    ]
  },
  {
    name: "Carrion Crawler",
    size: "Large",
    source: "SRD",
    type: "monstrosity",
    subtype: "",
    alignment: "unaligned",
    ac: 13,
    hp: 51,
    hit_dice: "6d10",
    speed: "30 ft., climb 30 ft.",
    stats: [14, 13, 16, 1, 12, 5],
    skillsaves: [
      {
        perception: 3
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 13",
    languages: "",
    cr: "2",
    traits: [
      {
        name: "Keen Smell",
        desc: "The carrion crawler has advantage on Wisdom (Perception) checks that rely on smell.",
        attack_bonus: 0
      },
      {
        name: "Spider Climb",
        desc: "The carrion crawler can climb difficult surfaces, including upside down on ceilings, without needing to make an ability check.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The carrion crawler makes two attacks: one with its tentacles and one with its bite.",
        attack_bonus: 0
      },
      {
        name: "Tentacles",
        desc: "Melee Weapon Attack: +8 to hit, reach 10 ft., one creature. Hit: 4 (1d4 + 2) poison damage, and the target must succeed on a DC 13 Constitution saving throw or be poisoned for 1 minute. Until this poison ends, the target is paralyzed. The target can repeat the saving throw at the end of each of its turns, ending the poison on itself on a success.",
        attack_bonus: 8,
        damage_dice: "1d4",
        damage_bonus: 2
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 7 (2d4 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "2d4",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Cat",
    size: "Tiny",
    source: "SRD",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 2,
    hit_dice: "1d4",
    speed: "40 ft., climb 30 ft.",
    stats: [3, 15, 10, 3, 12, 7],
    skillsaves: [
      {
        perception: 3
      },
      {
        stealth: 4
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 13",
    languages: "",
    cr: "0",
    traits: [
      {
        name: "Keen Smell",
        desc: "The cat has advantage on Wisdom (Perception) checks that rely on smell.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Claws",
        desc: "Melee Weapon Attack: +0 to hit, reach 5 ft., one target. Hit: 1 slashing damage.",
        attack_bonus: 0,
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Cave Bear",
    size: "Large",
    source: "SRD",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 42,
    hit_dice: "5d10",
    speed: "40 ft., swim 30 ft.",
    stats: [20, 10, 16, 2, 13, 7],
    skillsaves: [
      {
        perception: 3
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 13",
    languages: "",
    cr: "2",
    traits: [
      {
        name: "Keen Smell",
        desc: "The bear has advantage on Wisdom (Perception) checks that rely on smell.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The bear makes two attacks: one with its bite and one with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 9 (1d8 + 5) piercing damage.",
        attack_bonus: 7,
        damage_dice: "1d8",
        damage_bonus: 5
      },
      {
        name: "Claws",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 12 (2d6 + 5) slashing damage.",
        attack_bonus: 7,
        damage_dice: "2d6",
        damage_bonus: 5
      }
    ]
  },
  {
    name: "Centaur",
    size: "Large",
    source: "SRD",
    type: "monstrosity",
    subtype: "",
    alignment: "neutral good",
    ac: 12,
    hp: 45,
    hit_dice: "6d10",
    speed: "50 ft.",
    stats: [18, 14, 14, 9, 13, 11],
    skillsaves: [
      {
        athletics: 6
      },
      {
        perception: 3
      },
      {
        survival: 3
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 13",
    languages: "Elvish, Sylvan",
    cr: "2",
    traits: [
      {
        name: "Charge",
        desc: "If the centaur moves at least 30 ft. straight toward a target and then hits it with a pike attack on the same turn, the target takes an extra 10 (3d6) piercing damage.",
        attack_bonus: 0,
        damage_dice: "3d6"
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The centaur makes two attacks: one with its pike and one with its hooves or two with its longbow.",
        attack_bonus: 0
      },
      {
        name: "Pike",
        desc: "Melee Weapon Attack: +6 to hit, reach 10 ft., one target. Hit: 9 (1d10 + 4) piercing damage.",
        attack_bonus: 6,
        damage_dice: "1d10",
        damage_bonus: 4
      },
      {
        name: "Hooves",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 11 (2d6 + 4) bludgeoning damage.",
        attack_bonus: 6,
        damage_dice: "2d6",
        damage_bonus: 4
      },
      {
        name: "Longbow",
        desc: "Ranged Weapon Attack: +4 to hit, range 150/600 ft., one target. Hit: 6 (1d8 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d8",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Chain Devil",
    size: "Medium",
    source: "SRD",
    type: "fiend",
    subtype: "devil",
    alignment: "lawful evil",
    ac: 16,
    hp: 85,
    hit_dice: "10d8",
    speed: "30 ft.",
    stats: [18, 15, 18, 11, 12, 14],
    damage_vulnerabilities: "",
    damage_resistances: "cold; bludgeoning, piercing, and slashing from nonmagical weapons that aren't silvered",
    damage_immunities: "fire, poison",
    condition_immunities: "poisoned",
    senses: "darkvision 120 ft., passive Perception 8",
    languages: "Infernal, telepathy 120 ft.",
    cr: "11",
    traits: [
      {
        name: "Devil's Sight",
        desc: "Magical darkness doesn't impede the devil's darkvision.",
        attack_bonus: 0
      },
      {
        name: "Magic Resistance",
        desc: "The devil has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The devil makes two attacks with its chains.",
        attack_bonus: 0
      },
      {
        name: "Chain",
        desc: "Melee Weapon Attack: +8 to hit, reach 10 ft., one target. Hit: 11 (2d6 + 4) slashing damage. The target is grappled (escape DC 14) if the devil isn't already grappling a creature. Until this grapple ends, the target is restrained and takes 7 (2d6) piercing damage at the start of each of its turns.",
        attack_bonus: 8,
        damage_dice: "2d6",
        damage_bonus: 4
      },
      {
        name: "Animate Chains (Recharges after a Short or Long Rest)",
        desc: "Up to four chains the devil can see within 60 feet of it magically sprout razor-edged barbs and animate under the devil's control, provided that the chains aren't being worn or carried.\nEach animated chain is an object with AC 20, 20 hit points, resistance to piercing damage, and immunity to psychic and thunder damage. When the devil uses Multiattack on its turn, it can use each animated chain to make one additional chain attack. An animated chain can grapple one creature of its own but can't make attacks while grappling. An animated chain reverts to its inanimate state if reduced to 0 hit points or if the devil is incapacitated or dies.",
        attack_bonus: 0
      }
    ],
    reactions: [
      {
        name: "Unnerving Mask",
        desc: "When a creature the devil can see starts its turn within 30 feet of the devil, the devil can create the illusion that it looks like one of the creature's departed loved ones or bitter enemies. If the creature can see the devil, it must succeed on a DC 14 Wisdom saving throw or be frightened until the end of its turn.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Chimera",
    size: "Large",
    source: "SRD",
    type: "monstrosity",
    subtype: "",
    alignment: "chaotic evil",
    ac: 14,
    hp: 114,
    hit_dice: "12d10",
    speed: "30 ft., fly 60 ft.",
    stats: [19, 11, 19, 3, 14, 10],
    skillsaves: [
      {
        perception: 8
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 18",
    languages: "understands Draconic but can't speak",
    cr: "6",
    actions: [
      {
        name: "Multiattack",
        desc: "The chimera makes three attacks: one with its bite, one with its horns, and one with its claws. When its fire breath is available, it can use the breath in place of its bite or horns.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 11 (2d6 + 4) piercing damage.",
        attack_bonus: 7,
        damage_dice: "2d6",
        damage_bonus: 4
      },
      {
        name: "Horns",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 10 (1d12 + 4) bludgeoning damage.",
        attack_bonus: 7,
        damage_dice: "1d12",
        damage_bonus: 4
      },
      {
        name: "Claws",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 11 (2d6 + 4) slashing damage.",
        attack_bonus: 7,
        damage_dice: "2d6",
        damage_bonus: 4
      },
      {
        name: "Fire Breath (Recharge 5-6)",
        desc: "The dragon head exhales fire in a 15-foot cone. Each creature in that area must make a DC 15 Dexterity saving throw, taking 31 (7d8) fire damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "7d8"
      }
    ]
  },
  {
    name: "Chuul",
    size: "Large",
    source: "SRD",
    type: "aberration",
    subtype: "",
    alignment: "chaotic evil",
    ac: 16,
    hp: 93,
    hit_dice: "11d10",
    speed: "30 ft., swim 30 ft.",
    stats: [19, 10, 16, 5, 11, 5],
    skillsaves: [
      {
        perception: 4
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "poison",
    condition_immunities: "poisoned",
    senses: "darkvision 60 ft., passive Perception 14",
    languages: "understands Deep Speech but can't speak",
    cr: "4",
    traits: [
      {
        name: "Amphibious",
        desc: "The chuul can breathe air and water.",
        attack_bonus: 0
      },
      {
        name: "Sense Magic",
        desc: "The chuul senses magic within 120 feet of it at will. This trait otherwise works like the detect magic spell but isn't itself magical.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The chuul makes two pincer attacks. If the chuul is grappling a creature, the chuul can also use its tentacles once.",
        attack_bonus: 0
      },
      {
        name: "Pincer",
        desc: "Melee Weapon Attack: +6 to hit, reach 10 ft., one target. Hit: 11 (2d6 + 4) bludgeoning damage. The target is grappled (escape DC 14) if it is a Large or smaller creature and the chuul doesn't have two other creatures grappled.",
        attack_bonus: 6,
        damage_dice: "2d6",
        damage_bonus: 4
      },
      {
        name: "Tentacles",
        desc: "One creature grappled by the chuul must succeed on a DC 13 Constitution saving throw or be poisoned for 1 minute. Until this poison ends, the target is paralyzed. The target can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Clay Golem",
    size: "Large",
    source: "SRD",
    type: "construct",
    subtype: "",
    alignment: "unaligned",
    ac: 14,
    hp: 133,
    hit_dice: "14d10",
    speed: "20 ft.",
    stats: [20, 9, 18, 3, 8, 1],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "acid, poison, psychic; bludgeoning, piercing, and slashing from nonmagical weapons that aren't adamantine",
    condition_immunities: "charmed, exhaustion, frightened, paralyzed, petrified, poisoned",
    senses: "darkvision 60 ft., passive Perception 9",
    languages: "understands the languages of its creator but can't speak",
    cr: "9",
    traits: [
      {
        name: "Acid Absorption",
        desc: "Whenever the golem is subjected to acid damage, it takes no damage and instead regains a number of hit points equal to the acid damage dealt.",
        attack_bonus: 0
      },
      {
        name: "Berserk",
        desc: "Whenever the golem starts its turn with 60 hit points or fewer, roll a d6. On a 6, the golem goes berserk. On each of its turns while berserk, the golem attacks the nearest creature it can see. If no creature is near enough to move to and attack, the golem attacks an object, with preference for an object smaller than itself. Once the golem goes berserk, it continues to do so until it is destroyed or regains all its hit points.",
        attack_bonus: 0
      },
      {
        name: "Immutable Form",
        desc: "The golem is immune to any spell or effect that would alter its form.",
        attack_bonus: 0
      },
      {
        name: "Magic Resistance",
        desc: "The golem has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      },
      {
        name: "Magic Weapons",
        desc: "The golem's weapon attacks are magical.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The golem makes two slam attacks.",
        attack_bonus: 0
      },
      {
        name: "Slam",
        desc: "Melee Weapon Attack: +8 to hit, reach 5 ft., one target. Hit: 16 (2d10 + 5) bludgeoning damage. If the target is a creature, it must succeed on a DC 15 Constitution saving throw or have its hit point maximum reduced by an amount equal to the damage taken. The target dies if this attack reduces its hit point maximum to 0. The reduction lasts until removed by the greater restoration spell or other magic.",
        attack_bonus: 8,
        damage_dice: "2d10",
        damage_bonus: 5
      },
      {
        name: "Haste (Recharge 5-6)",
        desc: "Until the end of its next turn, the golem magically gains a +2 bonus to its AC, has advantage on Dexterity saving throws, and can use its slam attack as a bonus action.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Cloaker",
    size: "Large",
    source: "SRD",
    type: "aberration",
    subtype: "",
    alignment: "chaotic neutral",
    ac: 14,
    hp: 78,
    hit_dice: "12d10",
    speed: "10 ft., fly 40 ft.",
    stats: [17, 15, 12, 13, 12, 14],
    skillsaves: [
      {
        stealth: 5
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 11",
    languages: "Deep Speech, Undercommon",
    cr: "8",
    traits: [
      {
        name: "Damage Transfer",
        desc: "While attached to a creature, the cloaker takes only half the damage dealt to it (rounded down). and that creature takes the other half.",
        attack_bonus: 0
      },
      {
        name: "False Appearance",
        desc: "While the cloaker remains motionless without its underside exposed, it is indistinguishable from a dark leather cloak.",
        attack_bonus: 0
      },
      {
        name: "Light Sensitivity",
        desc: "While in bright light, the cloaker has disadvantage on attack rolls and Wisdom (Perception) checks that rely on sight.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The cloaker makes two attacks: one with its bite and one with its tail.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one creature. Hit: 10 (2d6 + 3) piercing damage, and if the target is Large or smaller, the cloaker attaches to it. If the cloaker has advantage against the target, the cloaker attaches to the target's head, and the target is blinded and unable to breathe while the cloaker is attached. While attached, the cloaker can make this attack only against the target and has advantage on the attack roll. The cloaker can detach itself by spending 5 feet of its movement. A creature, including the target, can take its action to detach the cloaker by succeeding on a DC 16 Strength check.",
        attack_bonus: 6,
        damage_dice: "2d6",
        damage_bonus: 3
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +6 to hit, reach 10 ft., one creature. Hit: 7 (1d8 + 3) slashing damage.",
        attack_bonus: 6,
        damage_dice: "1d8",
        damage_bonus: 3
      },
      {
        name: "Moan",
        desc: "Each creature within 60 feet of the cloaker that can hear its moan and that isn't an aberration must succeed on a DC 13 Wisdom saving throw or become frightened until the end of the cloaker's next turn. If a creature's saving throw is successful, the creature is immune to the cloaker's moan for the next 24 hours.",
        attack_bonus: 0
      },
      {
        name: "Phantasms (Recharges after a Short or Long Rest)",
        desc: "The cloaker magically creates three illusory duplicates of itself if it isn't in bright light. The duplicates move with it and mimic its actions, shifting position so as to make it impossible to track which cloaker is the real one. If the cloaker is ever in an area of bright light, the duplicates disappear.\nWhenever any creature targets the cloaker with an attack or a harmful spell while a duplicate remains, that creature rolls randomly to determine whether it targets the cloaker or one of the duplicates. A creature is unaffected by this magical effect if it can't see or if it relies on senses other than sight.\nA duplicate has the cloaker's AC and uses its saving throws. If an attack hits a duplicate, or if a duplicate fails a saving throw against an effect that deals damage, the duplicate disappears.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Cloud Giant",
    size: "Huge",
    source: "SRD",
    type: "giant",
    subtype: "",
    alignment: "neutral good (50%) or neutral evil (50%)",
    ac: 14,
    hp: 200,
    hit_dice: "16d12",
    speed: "40 ft.",
    stats: [27, 10, 22, 12, 16, 16],
    saves: [
      {
        constitution: 10
      },
      {
        wisdom: 7
      },
      {
        charisma: 7
      }
    ],
    skillsaves: [
      {
        insight: 7
      },
      {
        perception: 7
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 17",
    languages: "Common, Giant",
    cr: "9",
    traits: [
      {
        name: "Keen Smell",
        desc: "The giant has advantage on Wisdom (Perception) checks that rely on smell.",
        attack_bonus: 0
      },
      {
        name: "Innate Spellcasting",
        desc: "The giant's innate spellcasting ability is Charisma. It can innately cast the following spells, requiring no material components:\n\nAt will: detect magic, fog cloud, light\n3/day each: feather fall, fly, misty step, telekinesis\n1/day each: control weather, gaseous form",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The giant makes two morningstar attacks.",
        attack_bonus: 0
      },
      {
        name: "Morningstar",
        desc: "Melee Weapon Attack: +12 to hit, reach 10 ft., one target. Hit: 21 (3d8 + 8) piercing damage.",
        attack_bonus: 12,
        damage_dice: "3d8",
        damage_bonus: 8
      },
      {
        name: "Rock",
        desc: "Ranged Weapon Attack: +12 to hit, range 60/240 ft., one target. Hit: 30 (4d10 + 8) bludgeoning damage.",
        attack_bonus: 12,
        damage_dice: "4d10",
        damage_bonus: 8
      }
    ]
  },
  {
    name: "Cockatrice",
    size: "Small",
    source: "SRD",
    type: "monstrosity",
    subtype: "",
    alignment: "unaligned",
    ac: 11,
    hp: 27,
    hit_dice: "6d6",
    speed: "20 ft., fly 40 ft.",
    stats: [6, 12, 12, 2, 13, 5],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 11",
    languages: "",
    cr: "1/2",
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +3 to hit, reach 5 ft., one creature. Hit: 3 (1d4 + 1) piercing damage, and the target must succeed on a DC 11 Constitution saving throw against being magically petrified. On a failed save, the creature begins to turn to stone and is restrained. It must repeat the saving throw at the end of its next turn. On a success, the effect ends. On a failure, the creature is petrified for 24 hours.",
        attack_bonus: 3,
        damage_dice: "1d4",
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Commoner",
    size: "Medium",
    source: "SRD",
    type: "humanoid",
    subtype: "any race",
    alignment: "any alignment",
    ac: 10,
    hp: 4,
    hit_dice: "1d8",
    speed: "30 ft.",
    stats: [10, 10, 10, 10, 10, 10],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 10",
    languages: "any one language (usually Common)",
    cr: "0",
    actions: [
      {
        name: "Club",
        desc: "Melee Weapon Attack: +2 to hit, reach 5 ft., one target. Hit: 2 (1d4) bludgeoning damage.",
        attack_bonus: 2,
        damage_dice: "1d4"
      }
    ]
  },
  {
    name: "Constrictor Snake",
    size: "Large",
    source: "SRD",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 13,
    hit_dice: "2d10",
    speed: "30 ft., swim 30 ft.",
    stats: [15, 14, 12, 1, 10, 3],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "blindsight 10 ft., passive Perception 10",
    languages: "",
    cr: "1/4",
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one creature. Hit: 5 (1d6 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d6",
        damage_bonus: 2
      },
      {
        name: "Constrict",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one creature. Hit: 6 (1d8 + 2) bludgeoning damage, and the target is grappled (escape DC 14). Until this grapple ends, the creature is restrained, and the snake can't constrict another target.",
        attack_bonus: 4,
        damage_dice: "1d8",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Copper Dragon Wyrmling",
    size: "Medium",
    source: "SRD",
    type: "dragon",
    subtype: "",
    alignment: "chaotic good",
    ac: 16,
    hp: 22,
    hit_dice: "4d8",
    speed: "30 ft., climb 30 ft., fly 60 ft.",
    stats: [15, 12, 13, 14, 11, 13],
    saves: [
      {
        dexterity: 3
      },
      {
        constitution: 3
      },
      {
        wisdom: 2
      },
      {
        charisma: 3
      }
    ],
    skillsaves: [
      {
        perception: 4
      },
      {
        stealth: 3
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "acid",
    condition_immunities: "",
    senses: "blindsight 10 ft., darkvision 60 ft., passive Perception 14",
    languages: "Draconic",
    cr: "1",
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 7 (1d10 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d10",
        damage_bonus: 2
      },
      {
        name: "Breath Weapons (Recharge 5-6)",
        desc: "The dragon uses one of the following breath weapons.\nAcid Breath. The dragon exhales acid in an 20-foot line that is 5 feet wide. Each creature in that line must make a DC 11 Dexterity saving throw, taking 18 (4d8) acid damage on a failed save, or half as much damage on a successful one.\nSlowing Breath. The dragon exhales gas in a 1 5-foot cone. Each creature in that area must succeed on a DC 11 Constitution saving throw. On a failed save, the creature can't use reactions, its speed is halved, and it can't make more than one attack on its turn. In addition, the creature can use either an action or a bonus action on its turn, but not both. These effects last for 1 minute. The creature can repeat the saving throw at the end of each of its turns, ending the effect on itself with a successful save.",
        attack_bonus: 0,
        damage_dice: "4d8"
      }
    ]
  },
  {
    name: "Couatl",
    size: "Medium",
    source: "SRD",
    type: "celestial",
    subtype: "",
    alignment: "lawful good",
    ac: 19,
    hp: 97,
    hit_dice: "13d8",
    speed: "30 ft., fly 90 ft.",
    stats: [16, 20, 17, 18, 20, 18],
    saves: [
      {
        constitution: 5
      },
      {
        wisdom: 7
      },
      {
        charisma: 6
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "radiant",
    damage_immunities: "psychic; bludgeoning, piercing, and slashing from nonmagical weapons",
    condition_immunities: "",
    senses: "truesight 120 ft., passive Perception 15",
    languages: "all, telepathy 120 ft.",
    cr: "4",
    traits: [
      {
        name: "Innate Spellcasting",
        desc: "The couatl's spellcasting ability is Charisma (spell save DC 14). It can innately cast the following spells, requiring only verbal components:\n\nAt will: detect evil and good, detect magic, detect thoughts\n3/day each: bless, create food and water, cure wounds, lesser restoration, protection from poison, sanctuary, shield\n1/day each: dream, greater restoration, scrying",
        attack_bonus: 0
      },
      {
        name: "Magic Weapons",
        desc: "The couatl's weapon attacks are magical.",
        attack_bonus: 0
      },
      {
        name: "Shielded Mind",
        desc: "The couatl is immune to scrying and to any effect that would sense its emotions, read its thoughts, or detect its location.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +8 to hit, reach 5 ft., one creature. Hit: 8 (1d6 + 5) piercing damage, and the target must succeed on a DC 13 Constitution saving throw or be poisoned for 24 hours. Until this poison ends, the target is unconscious. Another creature can use an action to shake the target awake.",
        attack_bonus: 8,
        damage_dice: "1d6",
        damage_bonus: 5
      },
      {
        name: "Constrict",
        desc: "Melee Weapon Attack: +6 to hit, reach 10 ft., one Medium or smaller creature. Hit: 10 (2d6 + 3) bludgeoning damage, and the target is grappled (escape DC 15). Until this grapple ends, the target is restrained, and the couatl can't constrict another target.",
        attack_bonus: 6,
        damage_dice: "2d6",
        damage_bonus: 3
      },
      {
        name: "Change Shape",
        desc: "The couatl magically polymorphs into a humanoid or beast that has a challenge rating equal to or less than its own, or back into its true form. It reverts to its true form if it dies. Any equipment it is wearing or carrying is absorbed or borne by the new form (the couatl's choice).\nIn a new form, the couatl retains its game statistics and ability to speak, but its AC, movement modes, Strength, Dexterity, and other actions are replaced by those of the new form, and it gains any statistics and capabilities (except class features, legendary actions, and lair actions) that the new form has but that it lacks. If the new form has a bite attack, the couatl can use its bite in that form.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Crab",
    size: "Tiny",
    source: "SRD",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 11,
    hp: 2,
    hit_dice: "1d4",
    speed: "20 ft., swim 20 ft.",
    stats: [2, 11, 10, 1, 8, 2],
    skillsaves: [
      {
        stealth: 2
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "blindsight 30 ft., passive Perception 9",
    languages: "",
    cr: "0",
    traits: [
      {
        name: "Amphibious",
        desc: "The crab can breathe air and water.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +0 to hit, reach 5 ft., one target. Hit: 1 bludgeoning damage.",
        attack_bonus: 0,
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Crocodile",
    size: "Large",
    source: "SRD",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 19,
    hit_dice: "3d10",
    speed: "20 ft., swim 20 ft.",
    stats: [15, 10, 13, 2, 10, 5],
    skillsaves: [
      {
        stealth: 2
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 10",
    languages: "",
    cr: "1/2",
    traits: [
      {
        name: "Hold Breath",
        desc: "The crocodile can hold its breath for 15 minutes.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one creature. Hit: 7 (1d10 + 2) piercing damage, and the target is grappled (escape DC 12). Until this grapple ends, the target is restrained, and the crocodile can't bite another target",
        attack_bonus: 4,
        damage_dice: "1d10",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Cult Fanatic",
    size: "Medium",
    source: "SRD",
    type: "humanoid",
    subtype: "any race",
    alignment: "any non-good alignment",
    ac: 13,
    hp: 22,
    hit_dice: "6d8",
    speed: "30 ft.",
    stats: [11, 14, 12, 10, 13, 14],
    skillsaves: [
      {
        deception: 4
      },
      {
        persuasion: 4
      },
      {
        religion: 2
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 11",
    languages: "any one language (usually Common)",
    cr: "2",
    traits: [
      {
        name: "Dark Devotion",
        desc: "The fanatic has advantage on saving throws against being charmed or frightened.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The fanatic makes two melee attacks.",
        attack_bonus: 0
      },
      {
        name: "Dagger",
        desc: "Melee or Ranged Weapon Attack: +4 to hit, reach 5 ft. or range 20/60 ft., one creature. Hit: 4 (1d4 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d4",
        damage_bonus: 2
      }
    ],
    spells: [
      "The fanatic is a 4th-level spellcaster. Its spell casting ability is Wisdom (spell save DC 11, +3 to hit with spell attacks). The fanatic has the following cleric spells prepared:",
      "Cantrips (at will): light, sacred flame, thaumaturgy",
      {
        "1st level (4 slots)": "command, inflict wounds, shield of faith"
      },
      {
        "2nd level (3 slots)": "hold person, spiritual weapon"
      }
    ]
  },
  {
    name: "Cultist",
    size: "Medium",
    source: "SRD",
    type: "humanoid",
    subtype: "any race",
    alignment: "any non-good alignment",
    ac: 12,
    hp: 9,
    hit_dice: "2d8",
    speed: "30 ft.",
    stats: [11, 12, 10, 10, 11, 10],
    skillsaves: [
      {
        deception: 2
      },
      {
        religion: 2
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 10",
    languages: "any one language (usually Common)",
    cr: "1/8",
    traits: [
      {
        name: "Dark Devotion",
        desc: "The cultist has advantage on saving throws against being charmed or frightened.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Scimitar",
        desc: "Melee Weapon Attack: +3 to hit, reach 5 ft., one creature. Hit: 4 (1d6 + 1) slashing damage.",
        attack_bonus: 3,
        damage_dice: "1d6",
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Darkmantle",
    size: "Small",
    source: "SRD",
    type: "monstrosity",
    subtype: "",
    alignment: "unaligned",
    ac: 11,
    hp: 22,
    hit_dice: "5d6",
    speed: "10 ft., fly 30 ft.",
    stats: [16, 12, 13, 2, 10, 5],
    skillsaves: [
      {
        stealth: 3
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "blindsight 60 ft., passive Perception 10",
    languages: "",
    cr: "1/2",
    traits: [
      {
        name: "Echolocation",
        desc: "The darkmantle can't use its blindsight while deafened.",
        attack_bonus: 0
      },
      {
        name: "False Appearance",
        desc: "While the darkmantle remains motionless, it is indistinguishable from a cave formation such as a stalactite or stalagmite.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Crush",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one creature. Hit: 6 (1d6 + 3) bludgeoning damage, and the darkmantle attaches to the target. If the target is Medium or smaller and the darkmantle has advantage on the attack roll, it attaches by engulfing the target's head, and the target is also blinded and unable to breathe while the darkmantle is attached in this way.\nWhile attached to the target, the darkmantle can attack no other creature except the target but has advantage on its attack rolls. The darkmantle's speed also becomes 0, it can't benefit from any bonus to its speed, and it moves with the target.\nA creature can detach the darkmantle by making a successful DC 13 Strength check as an action. On its turn, the darkmantle can detach itself from the target by using 5 feet of movement.",
        attack_bonus: 5,
        damage_dice: "1d6",
        damage_bonus: 3
      },
      {
        name: "Darkness Aura (1/day)",
        desc: "A 15-foot radius of magical darkness extends out from the darkmantle, moves with it, and spreads around corners. The darkness lasts as long as the darkmantle maintains concentration, up to 10 minutes (as if concentrating on a spell). Darkvision can't penetrate this darkness, and no natural light can illuminate it. If any of the darkness overlaps with an area of light created by a spell of 2nd level or lower, the spell creating the light is dispelled.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Death Dog",
    size: "Medium",
    source: "SRD",
    type: "monstrosity",
    subtype: "",
    alignment: "neutral evil",
    ac: 12,
    hp: 39,
    hit_dice: "6d8",
    speed: "40 ft.",
    stats: [15, 14, 14, 3, 13, 6],
    skillsaves: [
      {
        perception: 5
      },
      {
        stealth: 4
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 120 ft., passive Perception 15",
    languages: "",
    cr: "1",
    traits: [
      {
        name: "Two-Headed",
        desc: "The dog has advantage on Wisdom (Perception) checks and on saving throws against being blinded, charmed, deafened, frightened, stunned, or knocked unconscious.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The dog makes two bite attacks.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 5 (1d6 + 2) piercing damage. If the target is a creature, it must succeed on a DC 12 Constitution saving throw against disease or become poisoned until the disease is cured. Every 24 hours that elapse, the creature must repeat the saving throw, reducing its hit point maximum by 5 (1d10) on a failure. This reduction lasts until the disease is cured. The creature dies if the disease reduces its hit point maximum to 0.",
        attack_bonus: 4,
        damage_dice: "1d6",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Deep Gnome (Svirfneblin)",
    size: "Small",
    source: "SRD",
    type: "humanoid",
    subtype: "gnome",
    alignment: "neutral good",
    ac: 15,
    hp: 16,
    hit_dice: "3d6",
    speed: "20 ft.",
    stats: [15, 14, 14, 12, 10, 9],
    skillsaves: [
      {
        perception: 2
      },
      {
        investigation: 3
      },
      {
        stealth: 4
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 120 ft., passive Perception 12",
    languages: "Gnomish, Terran, Undercommon",
    cr: "1/2",
    traits: [
      {
        name: "Stone Camouflage",
        desc: "The gnome has advantage on Dexterity (Stealth) checks made to hide in rocky terrain.",
        attack_bonus: 0
      },
      {
        name: "Gnome Cunning",
        desc: "The gnome has advantage on Intelligence, Wisdom, and Charisma saving throws against magic.",
        attack_bonus: 0
      },
      {
        name: "Innate Spellcasting",
        desc: "The gnome's innate spellcasting ability is Intelligence (spell save DC 11). It can innately cast the following spells, requiring no material components:\nAt will: nondetection (self only)\n1/day each: blindness/deafness, blur, disguise self",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "War Pick",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 6 (1d8 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d8",
        damage_bonus: 2
      },
      {
        name: "Poisoned Dart",
        desc: "Ranged Weapon Attack: +4 to hit, range 30/120 ft., one creature. Hit: 4 (1d4 + 2) piercing damage, and the target must succeed on a DC 12 Constitution saving throw or be poisoned for 1 minute. The target can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success",
        attack_bonus: 4,
        damage_dice: "1d4",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Deer",
    size: "Medium",
    source: "SRD",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 13,
    hp: 4,
    hit_dice: "1d8",
    speed: "50 ft.",
    stats: [11, 16, 11, 2, 14, 5],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 12",
    languages: "",
    cr: "0",
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +2 to hit, reach 5 ft., one target. Hit: 2 (1d4) piercing damage.",
        attack_bonus: 2,
        damage_dice: "1d4"
      }
    ]
  },
  {
    name: "Deva",
    size: "Medium",
    source: "SRD",
    type: "celestial",
    subtype: "",
    alignment: "lawful good",
    ac: 17,
    hp: 136,
    hit_dice: "16d8",
    speed: "30 ft., fly 90 ft.",
    stats: [18, 18, 18, 17, 20, 20],
    saves: [
      {
        wisdom: 9
      },
      {
        charisma: 9
      }
    ],
    skillsaves: [
      {
        insight: 9
      },
      {
        perception: 9
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "radiant; bludgeoning, piercing, and slashing from nonmagical weapons",
    damage_immunities: "",
    condition_immunities: "charmed, exhaustion, frightened",
    senses: "darkvision 120 ft., passive Perception 19",
    languages: "all, telepathy 120 ft.",
    cr: "10",
    traits: [
      {
        name: "Angelic Weapons",
        desc: "The deva's weapon attacks are magical. When the deva hits with any weapon, the weapon deals an extra 4d8 radiant damage (included in the attack).",
        attack_bonus: 0
      },
      {
        name: "Innate Spellcasting",
        desc: "The deva's spellcasting ability is Charisma (spell save DC 17). The deva can innately cast the following spells, requiring only verbal components:\nAt will: detect evil and good\n1/day each: commune, raise dead",
        attack_bonus: 0
      },
      {
        name: "Magic Resistance",
        desc: "The deva has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The deva makes two melee attacks.",
        attack_bonus: 0
      },
      {
        name: "Mace",
        desc: "Melee Weapon Attack: +8 to hit, reach 5 ft., one target. Hit: 7 (1d6 + 4) bludgeoning damage plus 18 (4d8) radiant damage.",
        attack_bonus: 8,
        damage_dice: "1d6 + 4d8",
        damage_bonus: 4
      },
      {
        name: "Healing Touch (3/Day)",
        desc: "The deva touches another creature. The target magically regains 20 (4d8 + 2) hit points and is freed from any curse, disease, poison, blindness, or deafness.",
        attack_bonus: 0
      },
      {
        name: "Change Shape",
        desc: "The deva magically polymorphs into a humanoid or beast that has a challenge rating equal to or less than its own, or back into its true form. It reverts to its true form if it dies. Any equipment it is wearing or carrying is absorbed or borne by the new form (the deva's choice).\nIn a new form, the deva retains its game statistics and ability to speak, but its AC, movement modes, Strength, Dexterity, and special senses are replaced by those of the new form, and it gains any statistics and capabilities (except class features, legendary actions, and lair actions) that the new form has but that it lacks.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Dire Wolf",
    size: "Large",
    source: "SRD",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 14,
    hp: 37,
    hit_dice: "5d10",
    speed: "50 ft.",
    stats: [17, 15, 15, 3, 12, 7],
    skillsaves: [
      {
        perception: 3
      },
      {
        stealth: 4
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 13",
    languages: "",
    cr: "1",
    traits: [
      {
        name: "Keen Hearing and Smell",
        desc: "The wolf has advantage on Wisdom (Perception) checks that rely on hearing or smell.",
        attack_bonus: 0
      },
      {
        name: "Pack Tactics",
        desc: "The wolf has advantage on an attack roll against a creature if at least one of the wolf's allies is within 5 ft. of the creature and the ally isn't incapacitated.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 10 (2d6 + 3) piercing damage. If the target is a creature, it must succeed on a DC 13 Strength saving throw or be knocked prone.",
        attack_bonus: 5,
        damage_dice: "2d6",
        damage_bonus: 3
      }
    ]
  },
  {
    name: "Djinni",
    size: "Large",
    source: "SRD",
    type: "elemental",
    subtype: "",
    alignment: "chaotic good",
    ac: 17,
    hp: 161,
    hit_dice: "14d10",
    speed: "30 ft., fly 90 ft.",
    stats: [21, 15, 22, 15, 16, 20],
    saves: [
      {
        dexterity: 6
      },
      {
        wisdom: 7
      },
      {
        charisma: 9
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "lightning, thunder",
    condition_immunities: "",
    senses: "darkvision 120 ft., passive Perception 13",
    languages: "Auran",
    cr: "11",
    traits: [
      {
        name: "Elemental Demise",
        desc: "If the djinni dies, its body disintegrates into a warm breeze, leaving behind only equipment the djinni was wearing or carrying.",
        attack_bonus: 0
      },
      {
        name: "Innate Spellcasting",
        desc: "The djinni's innate spellcasting ability is Charisma (spell save DC 17, +9 to hit with spell attacks). It can innately cast the following spells, requiring no material components:\n\nAt will: detect evil and good, detect magic, thunderwave 3/day each: create food and water (can create wine instead of water), tongues, wind walk\n1/day each: conjure elemental (air elemental only), creation, gaseous form, invisibility, major image, plane shift",
        attack_bonus: 0
      },
      {
        name: "Variant: Genie Powers",
        desc: "Genies have a variety of magical capabilities, including spells. A few have even greater powers that allow them to alter their appearance or the nature of reality.\n\nDisguises.\nSome genies can veil themselves in illusion to pass as other similarly shaped creatures. Such genies can innately cast the disguise self spell at will, often with a longer duration than is normal for that spell. Mightier genies can cast the true polymorph spell one to three times per day, possibly with a longer duration than normal. Such genies can change only their own shape, but a rare few can use the spell on other creatures and objects as well.\nWishes.\nThe genie power to grant wishes is legendary among mortals. Only the most potent genies, such as those among the nobility, can do so. A particular genie that has this power can grant one to three wishes to a creature that isn't a genie. Once a genie has granted its limit of wishes, it can't grant wishes again for some amount of time (usually 1 year). and cosmic law dictates that the same genie can expend its limit of wishes on a specific creature only once in that creature's existence.\nTo be granted a wish, a creature within 60 feet of the genie states a desired effect to it. The genie can then cast the wish spell on the creature's behalf to bring about the effect. Depending on the genie's nature, the genie might try to pervert the intent of the wish by exploiting the wish's poor wording. The perversion of the wording is usually crafted to be to the genie's benefit.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The djinni makes three scimitar attacks.",
        attack_bonus: 0
      },
      {
        name: "Scimitar",
        desc: "Melee Weapon Attack: +9 to hit, reach 5 ft., one target. Hit: 12 (2d6 + 5) slashing damage plus 3 (1d6) lightning or thunder damage (djinni's choice).",
        attack_bonus: 9,
        damage_dice: "2d6 + 1d6",
        damage_bonus: 5
      },
      {
        name: "Create Whirlwind",
        desc: "A 5-foot-radius, 30-foot-tall cylinder of swirling air magically forms on a point the djinni can see within 120 feet of it. The whirlwind lasts as long as the djinni maintains concentration (as if concentrating on a spell). Any creature but the djinni that enters the whirlwind must succeed on a DC 18 Strength saving throw or be restrained by it. The djinni can move the whirlwind up to 60 feet as an action, and creatures restrained by the whirlwind move with it. The whirlwind ends if the djinni loses sight of it.\nA creature can use its action to free a creature restrained by the whirlwind, including itself, by succeeding on a DC 18 Strength check. If the check succeeds, the creature is no longer restrained and moves to the nearest space outside the whirlwind.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Doppelganger",
    size: "Medium",
    source: "SRD",
    type: "monstrosity",
    subtype: "shapechanger",
    alignment: "unaligned",
    ac: 14,
    hp: 52,
    hit_dice: "8d8",
    speed: "30 ft.",
    stats: [11, 18, 14, 11, 12, 14],
    skillsaves: [
      {
        deception: 6
      },
      {
        insight: 3
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "charmed",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 11",
    languages: "Common",
    cr: "3",
    traits: [
      {
        name: "Shapechanger",
        desc: "The doppelganger can use its action to polymorph into a Small or Medium humanoid it has seen, or back into its true form. Its statistics, other than its size, are the same in each form. Any equipment it is wearing or carrying isn't transformed. It reverts to its true form if it dies.",
        attack_bonus: 0
      },
      {
        name: "Ambusher",
        desc: "The doppelganger has advantage on attack rolls against any creature it has surprised.",
        attack_bonus: 0
      },
      {
        name: "Surprise Attack",
        desc: "If the doppelganger surprises a creature and hits it with an attack during the first round of combat, the target takes an extra 10 (3d6) damage from the attack.",
        attack_bonus: 0,
        damage_dice: "3d6"
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The doppelganger makes two melee attacks.",
        attack_bonus: 0
      },
      {
        name: "Slam",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 7 (1d6 + 4) bludgeoning damage.",
        attack_bonus: 6,
        damage_dice: "1d6",
        damage_bonus: 4
      },
      {
        name: "Read Thoughts",
        desc: "The doppelganger magically reads the surface thoughts of one creature within 60 ft. of it. The effect can penetrate barriers, but 3 ft. of wood or dirt, 2 ft. of stone, 2 inches of metal, or a thin sheet of lead blocks it. While the target is in range, the doppelganger can continue reading its thoughts, as long as the doppelganger's concentration isn't broken (as if concentrating on a spell). While reading the target's mind, the doppelganger has advantage on Wisdom (Insight) and Charisma (Deception, Intimidation, and Persuasion) checks against the target.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Draft Horse",
    size: "Large",
    source: "SRD",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 10,
    hp: 19,
    hit_dice: "3d10",
    speed: "40 ft.",
    stats: [18, 10, 12, 2, 11, 7],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 10",
    languages: "",
    cr: "1/4",
    actions: [
      {
        name: "Hooves",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 9 (2d4 + 4) bludgeoning damage.",
        attack_bonus: 6,
        damage_dice: "2d4",
        damage_bonus: 4
      }
    ]
  },
  {
    name: "Dragon Turtle",
    size: "Gargantuan",
    source: "SRD",
    type: "dragon",
    subtype: "",
    alignment: "neutral",
    ac: 20,
    hp: 341,
    hit_dice: "22d20",
    speed: "20 ft., swim 40 ft.",
    stats: [25, 10, 20, 10, 12, 12],
    saves: [
      {
        dexterity: 6
      },
      {
        constitution: 11
      },
      {
        wisdom: 7
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "fire",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 120 ft., passive Perception 11",
    languages: "Aquan, Draconic",
    cr: "17",
    traits: [
      {
        name: "Amphibious",
        desc: "The dragon turtle can breathe air and water.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon turtle makes three attacks: one with its bite and two with its claws. It can make one tail attack in place of its two claw attacks.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +13 to hit, reach 15 ft., one target. Hit: 26 (3d12 + 7) piercing damage.",
        attack_bonus: 13,
        damage_dice: "3d12",
        damage_bonus: 7
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +13 to hit, reach 10 ft., one target. Hit: 16 (2d8 + 7) slashing damage.",
        attack_bonus: 13,
        damage_dice: "2d8",
        damage_bonus: 7
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +13 to hit, reach 15 ft., one target. Hit: 26 (3d12 + 7) bludgeoning damage. If the target is a creature, it must succeed on a DC 20 Strength saving throw or be pushed up to 10 feet away from the dragon turtle and knocked prone.",
        attack_bonus: 13,
        damage_dice: "3d12",
        damage_bonus: 7
      },
      {
        name: "Steam Breath (Recharge 5-6)",
        desc: "The dragon turtle exhales scalding steam in a 60-foot cone. Each creature in that area must make a DC 18 Constitution saving throw, taking 52 (15d6) fire damage on a failed save, or half as much damage on a successful one. Being underwater doesn't grant resistance against this damage.",
        attack_bonus: 0,
        damage_dice: "15d6"
      }
    ]
  },
  {
    name: "Dretch",
    size: "Small",
    source: "SRD",
    type: "fiend",
    subtype: "demon",
    alignment: "chaotic evil",
    ac: 11,
    hp: 18,
    hit_dice: "4d6",
    speed: "20 ft.",
    stats: [11, 11, 12, 5, 8, 3],
    damage_vulnerabilities: "",
    damage_resistances: "cold, fire, lightning",
    damage_immunities: "poison",
    condition_immunities: "poisoned",
    senses: "darkvision 60 ft., passive Perception 9",
    languages: "Abyssal, telepathy 60 ft. (works only with creatures that understand Abyssal)",
    cr: "1/4",
    actions: [
      {
        name: "Multiattack",
        desc: "The dretch makes two attacks: one with its bite and one with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +2 to hit, reach 5 ft., one target. Hit: 3 (1d6) piercing damage.",
        attack_bonus: 2,
        damage_dice: "1d6"
      },
      {
        name: "Claws",
        desc: "Melee Weapon Attack: +2 to hit, reach 5 ft., one target. Hit: 5 (2d4) slashing damage.",
        attack_bonus: 2,
        damage_dice: "2d4"
      },
      {
        name: "Fetid Cloud (1/Day)",
        desc: "A 10-foot radius of disgusting green gas extends out from the dretch. The gas spreads around corners, and its area is lightly obscured. It lasts for 1 minute or until a strong wind disperses it. Any creature that starts its turn in that area must succeed on a DC 11 Constitution saving throw or be poisoned until the start of its next turn. While poisoned in this way, the target can take either an action or a bonus action on its turn, not both, and can't take reactions.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Drider",
    size: "Large",
    source: "SRD",
    type: "monstrosity",
    subtype: "",
    alignment: "chaotic evil",
    ac: 19,
    hp: 123,
    hit_dice: "13d10",
    speed: "30 ft., climb 30 ft.",
    stats: [16, 16, 18, 13, 14, 12],
    skillsaves: [
      {
        perception: 5
      },
      {
        stealth: 9
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 120 ft., passive Perception 15",
    languages: "Elvish, Undercommon",
    cr: "6",
    traits: [
      {
        name: "Fey Ancestry",
        desc: "The drider has advantage on saving throws against being charmed, and magic can't put the drider to sleep.",
        attack_bonus: 0
      },
      {
        name: "Innate Spellcasting",
        desc: "The drider's innate spellcasting ability is Wisdom (spell save DC 13). The drider can innately cast the following spells, requiring no material components:\nAt will: dancing lights\n1/day each: darkness, faerie fire",
        attack_bonus: 0
      },
      {
        name: "Spider Climb",
        desc: "The drider can climb difficult surfaces, including upside down on ceilings, without needing to make an ability check.",
        attack_bonus: 0
      },
      {
        name: "Sunlight Sensitivity",
        desc: "While in sunlight, the drider has disadvantage on attack rolls, as well as on Wisdom (Perception) checks that rely on sight.",
        attack_bonus: 0
      },
      {
        name: "Web Walker",
        desc: "The drider ignores movement restrictions caused by webbing.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The drider makes three attacks, either with its longsword or its longbow. It can replace one of those attacks with a bite attack.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one creature. Hit: 2 (1d4) piercing damage plus 9 (2d8) poison damage.",
        attack_bonus: 6,
        damage_dice: "1d4",
        damage_bonus: 2
      },
      {
        name: "Longsword",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 7 (1d8 + 3) slashing damage, or 8 (1d10 + 3) slashing damage if used with two hands.",
        attack_bonus: 6,
        damage_dice: "1d8",
        damage_bonus: 3
      },
      {
        name: "Longbow",
        desc: "Ranged Weapon Attack: +6 to hit, range 150/600 ft., one target. Hit: 7 (1d8 + 3) piercing damage plus 4 (1d8) poison damage.",
        attack_bonus: 6,
        damage_dice: "1d8",
        damage_bonus: 3
      }
    ]
  },
  {
    name: "Drow",
    size: "Medium",
    source: "SRD",
    type: "humanoid",
    subtype: "elf",
    alignment: "neutral evil",
    ac: 15,
    hp: 13,
    hit_dice: "3d8",
    speed: "30 ft.",
    stats: [10, 14, 10, 11, 11, 12],
    skillsaves: [
      {
        perception: 2
      },
      {
        stealth: 4
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 120 ft., passive Perception 12",
    languages: "Elvish, Undercommon",
    cr: "1/4",
    traits: [
      {
        name: "Fey Ancestry",
        desc: "The drow has advantage on saving throws against being charmed, and magic can't put the drow to sleep.",
        attack_bonus: 0
      },
      {
        name: "Innate Spellcasting",
        desc: "The drow's spellcasting ability is Charisma (spell save DC 11). It can innately cast the following spells, requiring no material components:\nAt will: dancing lights\n1/day each: darkness, faerie fire",
        attack_bonus: 0
      },
      {
        name: "Sunlight Sensitivity",
        desc: "While in sunlight, the drow has disadvantage on attack rolls, as well as on Wisdom (Perception) checks that rely on sight.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Shortsword",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 5 (1d6 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d6",
        damage_bonus: 2
      },
      {
        name: "Hand Crossbow",
        desc: "Ranged Weapon Attack: +4 to hit, range 30/120 ft., one target. Hit: 5 (1d6 + 2) piercing damage, and the target must succeed on a DC 13 Constitution saving throw or be poisoned for 1 hour. If the saving throw fails by 5 or more, the target is also unconscious while poisoned in this way. The target wakes up if it takes damage or if another creature takes an action to shake it awake.",
        attack_bonus: 4,
        damage_dice: "1d6",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Druid",
    size: "Medium",
    source: "SRD",
    type: "humanoid",
    subtype: "any race",
    alignment: "any alignment",
    ac: 11,
    hp: 27,
    hit_dice: "5d8",
    speed: "30 ft.",
    stats: [10, 12, 13, 12, 15, 11],
    skillsaves: [
      {
        nature: 3
      },
      {
        medicine: 4
      },
      {
        perception: 4
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 14",
    languages: "Druidic plus any two languages",
    cr: "2",
    traits: [],
    actions: [
      {
        name: "Quarterstaff",
        desc: "Melee Weapon Attack: +2 to hit (+4 to hit with shillelagh), reach 5 ft., one target. Hit: 3 (1d6) bludgeoning damage, or 6 (1d8 + 2) bludgeoning damage with shillelagh or if wielded with two hands.",
        attack_bonus: 2,
        damage_dice: "1d6"
      }
    ],
    spells: [
      "The druid is a 4th-level spellcaster. Its spellcasting ability is Wisdom (spell save DC 12, +4 to hit with spell attacks). It has the following druid spells prepared:",
      {
        "Cantrips (at will)": "druidcraft, produce flame, shillelagh"
      },
      {
        "1st level (4 slots)": "entangle, longstrider, speak with animals, thunderwave"
      },
      {
        "2nd level (3 slots)": "animal messenger, barkskin"
      }
    ]
  },
  {
    name: "Dryad",
    size: "Medium",
    source: "SRD",
    type: "fey",
    subtype: "",
    alignment: "neutral",
    ac: 11,
    hp: 22,
    hit_dice: "5d8",
    speed: "30 ft.",
    stats: [10, 12, 11, 14, 15, 18],
    skillsaves: [
      {
        perception: 4
      },
      {
        stealth: 5
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 14",
    languages: "Elvish, Sylvan",
    cr: "1",
    traits: [
      {
        name: "Innate Spellcasting",
        desc: "The dryad's innate spellcasting ability is Charisma (spell save DC 14). The dryad can innately cast the following spells, requiring no material components:\n\nAt will: druidcraft\n3/day each: entangle, goodberry\n1/day each: barkskin, pass without trace, shillelagh",
        attack_bonus: 0
      },
      {
        name: "Magic Resistance",
        desc: "The dryad has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      },
      {
        name: "Speak with Beasts and Plants",
        desc: "The dryad can communicate with beasts and plants as if they shared a language.",
        attack_bonus: 0
      },
      {
        name: "Tree Stride",
        desc: "Once on her turn, the dryad can use 10 ft. of her movement to step magically into one living tree within her reach and emerge from a second living tree within 60 ft. of the first tree, appearing in an unoccupied space within 5 ft. of the second tree. Both trees must be large or bigger.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Club",
        desc: "Melee Weapon Attack: +2 to hit (+6 to hit with shillelagh), reach 5 ft., one target. Hit: 2 (1 d4) bludgeoning damage, or 8 (1d8 + 4) bludgeoning damage with shillelagh.",
        attack_bonus: 2,
        damage_dice: "1d4"
      },
      {
        name: "Fey Charm",
        desc: "The dryad targets one humanoid or beast that she can see within 30 feet of her. If the target can see the dryad, it must succeed on a DC 14 Wisdom saving throw or be magically charmed. The charmed creature regards the dryad as a trusted friend to be heeded and protected. Although the target isn't under the dryad's control, it takes the dryad's requests or actions in the most favorable way it can.\nEach time the dryad or its allies do anything harmful to the target, it can repeat the saving throw, ending the effect on itself on a success. Otherwise, the effect lasts 24 hours or until the dryad dies, is on a different plane of existence from the target, or ends the effect as a bonus action. If a target's saving throw is successful, the target is immune to the dryad's Fey Charm for the next 24 hours.\nThe dryad can have no more than one humanoid and up to three beasts charmed at a time.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Duergar",
    size: "Medium",
    source: "SRD",
    type: "humanoid",
    subtype: "dwarf",
    alignment: "lawful evil",
    ac: 16,
    hp: 26,
    hit_dice: "4d8",
    speed: "25 ft.",
    stats: [14, 11, 14, 11, 10, 9],
    damage_vulnerabilities: "",
    damage_resistances: "poison",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 120 ft., passive Perception 10",
    languages: "Dwarvish, Undercommon",
    cr: "1",
    traits: [
      {
        name: "Duergar Resilience",
        desc: "The duergar has advantage on saving throws against poison, spells, and illusions, as well as to resist being charmed or paralyzed.",
        attack_bonus: 0
      },
      {
        name: "Sunlight Sensitivity",
        desc: "While in sunlight, the duergar has disadvantage on attack rolls, as well as on Wisdom (Perception) checks that rely on sight.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Enlarge (Recharges after a Short or Long Rest)",
        desc: "For 1 minute, the duergar magically increases in size, along with anything it is wearing or carrying. While enlarged, the duergar is Large, doubles its damage dice on Strength-based weapon attacks (included in the attacks), and makes Strength checks and Strength saving throws with advantage. If the duergar lacks the room to become Large, it attains the maximum size possible in the space available.",
        attack_bonus: 0
      },
      {
        name: "War Pick",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 6 (1d8 + 2) piercing damage, or 11 (2d8 + 2) piercing damage while enlarged.",
        attack_bonus: 4,
        damage_dice: "1d8",
        damage_bonus: 2
      },
      {
        name: "Javelin",
        desc: "Melee or Ranged Weapon Attack: +4 to hit, reach 5 ft. or range 30/120 ft., one target. Hit: 5 (1d6 + 2) piercing damage, or 9 (2d6 + 2) piercing damage while enlarged.",
        attack_bonus: 4,
        damage_dice: "1d6",
        damage_bonus: 2
      },
      {
        name: "Invisibility (Recharges after a Short or Long Rest)",
        desc: "The duergar magically turns invisible until it attacks, casts a spell, or uses its Enlarge, or until its concentration is broken, up to 1 hour (as if concentrating on a spell). Any equipment the duergar wears or carries is invisible with it .",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Dust Mephit",
    size: "Small",
    source: "SRD",
    type: "elemental",
    subtype: "",
    alignment: "neutral evil",
    ac: 12,
    hp: 17,
    hit_dice: "5d6",
    speed: "30 ft., fly 30 ft.",
    stats: [5, 14, 10, 9, 11, 10],
    skillsaves: [
      {
        perception: 2
      },
      {
        stealth: 4
      }
    ],
    damage_vulnerabilities: "fire",
    damage_resistances: "",
    damage_immunities: "poison",
    condition_immunities: "poisoned",
    senses: "darkvision 60 ft., passive Perception 12",
    languages: "Auran, Terran",
    cr: "1/2",
    traits: [
      {
        name: "Death Burst",
        desc: "When the mephit dies, it explodes in a burst of dust. Each creature within 5 ft. of it must then succeed on a DC 10 Constitution saving throw or be blinded for 1 minute. A blinded creature can repeat the saving throw on each of its turns, ending the effect on itself on a success.",
        attack_bonus: 0
      },
      {
        name: "Innate Spellcasting (1/Day)",
        desc: "The mephit can innately cast sleep, requiring no material components. Its innate spellcasting ability is Charisma.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Claws",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one creature. Hit: 4 (1d4 + 2) slashing damage.",
        attack_bonus: 4,
        damage_dice: "1d4",
        damage_bonus: 2
      },
      {
        name: "Blinding Breath (Recharge 6)",
        desc: "The mephit exhales a 15-foot cone of blinding dust. Each creature in that area must succeed on a DC 10 Dexterity saving throw or be blinded for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success.",
        attack_bonus: 0
      },
      {
        name: "Variant: Summon Mephits (1/Day)",
        desc: "The mephit has a 25 percent chance of summoning 1d4 mephits of its kind. A summoned mephit appears in an unoccupied space within 60 feet of its summoner, acts as an ally of its summoner, and can't summon other mephits. It remains for 1 minute, until it or its summoner dies, or until its summoner dismisses it as an action.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Eagle",
    size: "Small",
    source: "SRD",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 3,
    hit_dice: "1d6",
    speed: "10 ft., fly 60 ft.",
    stats: [6, 15, 10, 2, 14, 7],
    skillsaves: [
      {
        perception: 4
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 14",
    languages: "",
    cr: "0",
    traits: [
      {
        name: "Keen Sight",
        desc: "The eagle has advantage on Wisdom (Perception) checks that rely on sight.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Talons",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 4 (1d4 + 2) slashing damage.",
        attack_bonus: 4,
        damage_dice: "1d4",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Earth Elemental",
    size: "Large",
    source: "SRD",
    type: "elemental",
    subtype: "",
    alignment: "neutral",
    ac: 17,
    hp: 126,
    hit_dice: "12d10",
    speed: "30 ft., burrow 30 ft.",
    stats: [20, 8, 20, 5, 10, 5],
    damage_vulnerabilities: "thunder",
    damage_resistances: "bludgeoning, piercing, and slashing from nonmagical weapons",
    damage_immunities: "poison",
    condition_immunities: "exhaustion, paralyzed, petrified, poisoned, unconscious",
    senses: "darkvision 60 ft., tremorsense 60 ft., passive Perception 10",
    languages: "Terran",
    cr: "5",
    traits: [
      {
        name: "Earth Glide",
        desc: "The elemental can burrow through nonmagical, unworked earth and stone. While doing so, the elemental doesn't disturb the material it moves through.",
        attack_bonus: 0
      },
      {
        name: "Siege Monster",
        desc: "The elemental deals double damage to objects and structures.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The elemental makes two slam attacks.",
        attack_bonus: 0
      },
      {
        name: "Slam",
        desc: "Melee Weapon Attack: +8 to hit, reach 10 ft., one target. Hit: 14 (2d8 + 5) bludgeoning damage.",
        attack_bonus: 8,
        damage_dice: "2d8",
        damage_bonus: 5
      }
    ]
  },
  {
    name: "Efreeti",
    size: "Large",
    source: "SRD",
    type: "elemental",
    subtype: "",
    alignment: "lawful evil",
    ac: 17,
    hp: 200,
    hit_dice: "16d10",
    speed: "40 ft., fly 60 ft.",
    stats: [22, 12, 24, 16, 15, 16],
    saves: [
      {
        intelligence: 7
      },
      {
        wisdom: 6
      },
      {
        charisma: 7
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "fire",
    condition_immunities: "",
    senses: "darkvision 120 ft., passive Perception 12",
    languages: "Ignan",
    cr: "11",
    traits: [
      {
        name: "Elemental Demise",
        desc: "If the efreeti dies, its body disintegrates in a flash of fire and puff of smoke, leaving behind only equipment the djinni was wearing or carrying.",
        attack_bonus: 0
      },
      {
        name: "Innate Spellcasting",
        desc: "The efreeti's innate spell casting ability is Charisma (spell save DC 15, +7 to hit with spell attacks). It can innately cast the following spells, requiring no material components:\n\nAt will: detect magic\n3/day: enlarge/reduce, tongues\n1/day each: conjure elemental (fire elemental only), gaseous form, invisibility, major image, plane shift, wall of fire",
        attack_bonus: 0
      },
      {
        name: "Variant: Genie Powers",
        desc: "Genies have a variety of magical capabilities, including spells. A few have even greater powers that allow them to alter their appearance or the nature of reality.\n\nDisguises.\nSome genies can veil themselves in illusion to pass as other similarly shaped creatures. Such genies can innately cast the disguise self spell at will, often with a longer duration than is normal for that spell. Mightier genies can cast the true polymorph spell one to three times per day, possibly with a longer duration than normal. Such genies can change only their own shape, but a rare few can use the spell on other creatures and objects as well.\nWishes.\nThe genie power to grant wishes is legendary among mortals. Only the most potent genies, such as those among the nobility, can do so. A particular genie that has this power can grant one to three wishes to a creature that isn't a genie. Once a genie has granted its limit of wishes, it can't grant wishes again for some amount of time (usually 1 year). and cosmic law dictates that the same genie can expend its limit of wishes on a specific creature only once in that creature's existence.\nTo be granted a wish, a creature within 60 feet of the genie states a desired effect to it. The genie can then cast the wish spell on the creature's behalf to bring about the effect. Depending on the genie's nature, the genie might try to pervert the intent of the wish by exploiting the wish's poor wording. The perversion of the wording is usually crafted to be to the genie's benefit.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The efreeti makes two scimitar attacks or uses its Hurl Flame twice.",
        attack_bonus: 0
      },
      {
        name: "Scimitar",
        desc: "Melee Weapon Attack: +10 to hit, reach 5 ft., one target. Hit: 13 (2d6 + 6) slashing damage plus 7 (2d6) fire damage.",
        attack_bonus: 10,
        damage_dice: "2d6 + 2d6",
        damage_bonus: 6
      },
      {
        name: "Hurl Flame",
        desc: "Ranged Spell Attack: +7 to hit, range 120 ft., one target. Hit: 17 (5d6) fire damage.",
        attack_bonus: 7,
        damage_dice: "5d6"
      }
    ]
  },
  {
    name: "Elephant",
    size: "Huge",
    source: "SRD",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 76,
    hit_dice: "8d12",
    speed: "40 ft.",
    stats: [22, 9, 17, 3, 11, 6],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 10",
    languages: "",
    cr: "4",
    traits: [
      {
        name: "Trampling Charge",
        desc: "If the elephant moves at least 20 ft. straight toward a creature and then hits it with a gore attack on the same turn, that target must succeed on a DC 12 Strength saving throw or be knocked prone. If the target is prone, the elephant can make one stomp attack against it as a bonus action.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Gore",
        desc: "Melee Weapon Attack: +8 to hit, reach 5 ft., one target. Hit: 19 (3d8 + 6) piercing damage.",
        attack_bonus: 8,
        damage_dice: "3d8",
        damage_bonus: 6
      },
      {
        name: "Stomp",
        desc: "Melee Weapon Attack: +8 to hit, reach 5 ft., one prone creature. Hit: 22 (3d10 + 6) bludgeoning damage.",
        attack_bonus: 8,
        damage_dice: "3d10",
        damage_bonus: 6
      }
    ]
  },
  {
    name: "Elk",
    size: "Large",
    source: "SRD",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 10,
    hp: 13,
    hit_dice: "2d10",
    speed: "50 ft.",
    stats: [16, 10, 12, 2, 10, 6],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 10",
    languages: "",
    cr: "1/4",
    traits: [
      {
        name: "Charge",
        desc: "If the elk moves at least 20 ft. straight toward a target and then hits it with a ram attack on the same turn, the target takes an extra 7 (2d6) damage. If the target is a creature, it must succeed on a DC 13 Strength saving throw or be knocked prone.",
        attack_bonus: 0,
        damage_dice: "2d6"
      }
    ],
    actions: [
      {
        name: "Ram",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 6 (1d6 + 3) bludgeoning damage.",
        attack_bonus: 0
      },
      {
        name: "Hooves",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one prone creature. Hit: 8 (2d4 + 3) bludgeoning damage.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Erinyes",
    size: "Medium",
    source: "SRD",
    type: "fiend",
    subtype: "devil",
    alignment: "lawful evil",
    ac: 18,
    hp: 153,
    hit_dice: "18d8",
    speed: "30 ft., fly 60 ft.",
    stats: [18, 16, 18, 14, 14, 18],
    saves: [
      {
        dexterity: 7
      },
      {
        constitution: 8
      },
      {
        wisdom: 6
      },
      {
        charisma: 8
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "cold; bludgeoning, piercing, and slashing from nonmagical weapons that aren't silvered",
    damage_immunities: "fire, poison",
    condition_immunities: "poisoned",
    senses: "truesight 120 ft., passive Perception 12",
    languages: "Infernal, telepathy 120 ft.",
    cr: "12",
    traits: [
      {
        name: "Hellish Weapons",
        desc: "The erinyes's weapon attacks are magical and deal an extra 13 (3d8) poison damage on a hit (included in the attacks).",
        attack_bonus: 0
      },
      {
        name: "Magic Resistance",
        desc: "The erinyes has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The erinyes makes three attacks",
        attack_bonus: 0
      },
      {
        name: "Longsword",
        desc: "Melee Weapon Attack: +8 to hit, reach 5 ft., one target. Hit: 8 (1d8 + 4) slashing damage, or 9 (1d10 + 4) slashing damage if used with two hands, plus 13 (3d8) poison damage.",
        attack_bonus: 8,
        damage_dice: "1d8 + 3d8",
        damage_bonus: 4
      },
      {
        name: "Longbow",
        desc: "Ranged Weapon Attack: +7 to hit, range 150/600 ft., one target. Hit: 7 (1d8 + 3) piercing damage plus 13 (3d8) poison damage, and the target must succeed on a DC 14 Constitution saving throw or be poisoned. The poison lasts until it is removed by the lesser restoration spell or similar magic.",
        attack_bonus: 7,
        damage_dice: "1d8 + 3d8",
        damage_bonus: 3
      },
      {
        name: "Variant: Rope of Entanglement",
        desc: "Some erinyes carry a rope of entanglement (detailed in the Dungeon Master's Guide). When such an erinyes uses its Multiattack, the erinyes can use the rope in place of two of the attacks.",
        attack_bonus: 0
      }
    ],
    reactions: [
      {
        name: "Parry",
        desc: "The erinyes adds 4 to its AC against one melee attack that would hit it. To do so, the erinyes must see the attacker and be wielding a melee weapon.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Ettercap",
    size: "Medium",
    source: "SRD",
    type: "monstrosity",
    subtype: "",
    alignment: "neutral evil",
    ac: 13,
    hp: 44,
    hit_dice: "8d8",
    speed: "30 ft., climb 30 ft.",
    stats: [14, 15, 13, 7, 12, 8],
    skillsaves: [
      {
        perception: 3
      },
      {
        stealth: 4
      },
      {
        survival: 3
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 13",
    languages: "",
    cr: "2",
    traits: [
      {
        name: "Spider Climb",
        desc: "The ettercap can climb difficult surfaces, including upside down on ceilings, without needing to make an ability check.",
        attack_bonus: 0
      },
      {
        name: "Web Sense",
        desc: "While in contact with a web, the ettercap knows the exact location of any other creature in contact with the same web.",
        attack_bonus: 0
      },
      {
        name: "Web Walker",
        desc: "The ettercap ignores movement restrictions caused by webbing.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The ettercap makes two attacks: one with its bite and one with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one creature. Hit: 6 (1d8 + 2) piercing damage plus 4 (1d8) poison damage. The target must succeed on a DC 11 Constitution saving throw or be poisoned for 1 minute. The creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success.",
        attack_bonus: 4,
        damage_dice: "1d8",
        damage_bonus: 2
      },
      {
        name: "Claws",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 7 (2d4 + 2) slashing damage.",
        attack_bonus: 4,
        damage_dice: "2d4",
        damage_bonus: 2
      },
      {
        name: "Web (Recharge 5-6)",
        desc: "Ranged Weapon Attack: +4 to hit, range 30/60 ft., one Large or smaller creature. Hit: The creature is restrained by webbing. As an action, the restrained creature can make a DC 11 Strength check, escaping from the webbing on a success. The effect ends if the webbing is destroyed. The webbing has AC 10, 5 hit points, is vulnerable to fire damage and immune to bludgeoning damage.",
        attack_bonus: 0
      },
      {
        name: "Variant: Web Garrote",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one Medium or Small creature against which the ettercap has advantage on the attack roll. Hit: 4 (1d4 + 2) bludgeoning damage, and the target is grappled (escape DC 12). Until this grapple ends, the target can't breathe, and the ettercap has advantage on attack rolls against it.",
        attack_bonus: 4,
        damage_dice: "1d4",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Ettin",
    size: "Large",
    source: "SRD",
    type: "giant",
    subtype: "",
    alignment: "chaotic evil",
    ac: 12,
    hp: 85,
    hit_dice: "10d10",
    speed: "40 ft.",
    stats: [21, 8, 17, 6, 10, 8],
    skillsaves: [
      {
        perception: 4
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 14",
    languages: "Giant, Orc",
    cr: "4",
    traits: [
      {
        name: "Two Heads",
        desc: "The ettin has advantage on Wisdom (Perception) checks and on saving throws against being blinded, charmed, deafened, frightened, stunned, and knocked unconscious.",
        attack_bonus: 0
      },
      {
        name: "Wakeful",
        desc: "When one of the ettin's heads is asleep, its other head is awake.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The ettin makes two attacks: one with its battleaxe and one with its morningstar.",
        attack_bonus: 0
      },
      {
        name: "Battleaxe",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 14 (2d8 + 5) slashing damage.",
        attack_bonus: 7,
        damage_dice: "2d8",
        damage_bonus: 5
      },
      {
        name: "Morningstar",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 14 (2d8 + 5) piercing damage.",
        attack_bonus: 7,
        damage_dice: "2d8",
        damage_bonus: 5
      }
    ]
  },
  {
    name: "Fire Elemental",
    size: "Large",
    source: "SRD",
    type: "elemental",
    subtype: "",
    alignment: "neutral",
    ac: 13,
    hp: 102,
    hit_dice: "12d10",
    speed: "50 ft.",
    stats: [10, 17, 16, 6, 10, 7],
    damage_vulnerabilities: "",
    damage_resistances: "bludgeoning, piercing, and slashing from nonmagical weapons",
    damage_immunities: "fire, poison",
    condition_immunities: "exhaustion, grappled, paralyzed, petrified, poisoned, prone, restrained, unconscious",
    senses: "darkvision 60 ft., passive Perception 10",
    languages: "Ignan",
    cr: "5",
    traits: [
      {
        name: "Fire Form",
        desc: "The elemental can move through a space as narrow as 1 inch wide without squeezing. A creature that touches the elemental or hits it with a melee attack while within 5 ft. of it takes 5 (1d10) fire damage. In addition, the elemental can enter a hostile creature's space and stop there. The first time it enters a creature's space on a turn, that creature takes 5 (1d10) fire damage and catches fire; until someone takes an action to douse the fire, the creature takes 5 (1d10) fire damage at the start of each of its turns.",
        attack_bonus: 0,
        damage_dice: "5d10"
      },
      {
        name: "Illumination",
        desc: "The elemental sheds bright light in a 30-foot radius and dim light in an additional 30 ft..",
        attack_bonus: 0
      },
      {
        name: "Water Susceptibility",
        desc: "For every 5 ft. the elemental moves in water, or for every gallon of water splashed on it, it takes 1 cold damage.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The elemental makes two touch attacks.",
        attack_bonus: 0
      },
      {
        name: "Touch",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 10 (2d6 + 3) fire damage. If the target is a creature or a flammable object, it ignites. Until a creature takes an action to douse the fire, the target takes 5 (1d10) fire damage at the start of each of its turns.",
        attack_bonus: 6,
        damage_dice: "2d6",
        damage_bonus: 3
      }
    ]
  },
  {
    name: "Fire Giant",
    size: "Huge",
    source: "SRD",
    type: "giant",
    subtype: "",
    alignment: "lawful evil",
    ac: 18,
    hp: 162,
    hit_dice: "13d12",
    speed: "30 ft.",
    stats: [25, 9, 23, 10, 14, 13],
    saves: [
      {
        dexterity: 3
      },
      {
        constitution: 10
      },
      {
        charisma: 5
      }
    ],
    skillsaves: [
      {
        athletics: 11
      },
      {
        perception: 6
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "fire",
    condition_immunities: "",
    senses: "passive Perception 16",
    languages: "Giant",
    cr: "9",
    actions: [
      {
        name: "Multiattack",
        desc: "The giant makes two greatsword attacks.",
        attack_bonus: 0
      },
      {
        name: "Greatsword",
        desc: "Melee Weapon Attack: +11 to hit, reach 10 ft., one target. Hit: 28 (6d6 + 7) slashing damage.",
        attack_bonus: 11,
        damage_dice: "6d6",
        damage_bonus: 7
      },
      {
        name: "Rock",
        desc: "Ranged Weapon Attack: +11 to hit, range 60/240 ft., one target. Hit: 29 (4d10 + 7) bludgeoning damage.",
        attack_bonus: 11,
        damage_dice: "4d10",
        damage_bonus: 7
      }
    ]
  },
  {
    name: "Flesh Golem",
    size: "Medium",
    source: "SRD",
    type: "construct",
    subtype: "",
    alignment: "neutral",
    ac: 9,
    hp: 93,
    hit_dice: "11d8",
    speed: "30 ft.",
    stats: [19, 9, 18, 6, 10, 5],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "lightning, poison; bludgeoning, piercing, and slashing from nonmagical weapons that aren't adamantine",
    condition_immunities: "charmed, exhaustion, frightened, paralyzed, petrified, poisoned",
    senses: "darkvision 60 ft., passive Perception 10",
    languages: "understands the languages of its creator but can't speak",
    cr: "5",
    traits: [
      {
        name: "Berserk",
        desc: "Whenever the golem starts its turn with 40 hit points or fewer, roll a d6. On a 6, the golem goes berserk. On each of its turns while berserk, the golem attacks the nearest creature it can see. If no creature is near enough to move to and attack, the golem attacks an object, with preference for an object smaller than itself. Once the golem goes berserk, it continues to do so until it is destroyed or regains all its hit points.\nThe golem's creator, if within 60 feet of the berserk golem, can try to calm it by speaking firmly and persuasively. The golem must be able to hear its creator, who must take an action to make a DC 15 Charisma (Persuasion) check. If the check succeeds, the golem ceases being berserk. If it takes damage while still at 40 hit points or fewer, the golem might go berserk again.",
        attack_bonus: 0
      },
      {
        name: "Aversion of Fire",
        desc: "If the golem takes fire damage, it has disadvantage on attack rolls and ability checks until the end of its next turn.",
        attack_bonus: 0
      },
      {
        name: "Immutable Form",
        desc: "The golem is immune to any spell or effect that would alter its form.",
        attack_bonus: 0
      },
      {
        name: "Lightning Absorption",
        desc: "Whenever the golem is subjected to lightning damage, it takes no damage and instead regains a number of hit points equal to the lightning damage dealt.",
        attack_bonus: 0
      },
      {
        name: "Magic Resistance",
        desc: "The golem has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      },
      {
        name: "Magic Weapons",
        desc: "The golem's weapon attacks are magical.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The golem makes two slam attacks.",
        attack_bonus: 0
      },
      {
        name: "Slam",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 13 (2d8 + 4) bludgeoning damage.",
        attack_bonus: 7,
        damage_dice: "2d8",
        damage_bonus: 4
      }
    ]
  },
  {
    name: "Flying Snake",
    size: "Tiny",
    source: "SRD",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 14,
    hp: 5,
    hit_dice: "2d4",
    speed: "30 ft., fly 60 ft., swim 30 ft.",
    stats: [4, 18, 11, 2, 12, 5],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "blindsight 10 ft., passive Perception 11",
    languages: "",
    cr: "1/8",
    traits: [
      {
        name: "Flyby",
        desc: "The snake doesn't provoke opportunity attacks when it flies out of an enemy's reach.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 1 piercing damage plus 7 (3d4) poison damage.",
        attack_bonus: 6,
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Flying Sword",
    size: "Small",
    source: "SRD",
    type: "construct",
    subtype: "",
    alignment: "unaligned",
    ac: 17,
    hp: 17,
    hit_dice: "5d6",
    speed: "0 ft., fly 50 ft. It can hover.",
    stats: [12, 15, 11, 1, 5, 1],
    saves: [
      {
        dexterity: 4
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "poison, psychic",
    condition_immunities: "blinded, charmed, deafened, frightened, paralyzed, petrified, poisoned",
    senses: "blindsight 60 ft. (blind beyond this radius), passive Perception 7",
    languages: "",
    cr: "1/4",
    traits: [
      {
        name: "Antimagic Susceptibility",
        desc: "The sword is incapacitated while in the area of an antimagic field. If targeted by dispel magic, the sword must succeed on a Constitution saving throw against the caster's spell save DC or fall unconscious for 1 minute.",
        attack_bonus: 0
      },
      {
        name: "False Appearance",
        desc: "While the sword remains motionless and isn't flying, it is indistinguishable from a normal sword.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Longsword",
        desc: "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 5 (1d8 + 1) slashing damage.",
        attack_bonus: 3,
        damage_dice: "1d8",
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Frog",
    size: "Tiny",
    source: "SRD",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 11,
    hp: 1,
    hit_dice: "1d4",
    speed: "20 ft., swim 20 ft.",
    stats: [1, 13, 8, 1, 8, 3],
    skillsaves: [
      {
        perception: 1
      },
      {
        stealth: 3
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 30 ft., passive Perception 11",
    languages: "",
    cr: "0",
    traits: [
      {
        name: "Amphibious",
        desc: "The frog can breathe air and water",
        attack_bonus: 0
      },
      {
        name: "Standing Leap",
        desc: "The frog's long jump is up to 10 ft. and its high jump is up to 5 ft., with or without a running start.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Frost Giant",
    size: "Huge",
    source: "SRD",
    type: "giant",
    subtype: "",
    alignment: "neutral evil",
    ac: 15,
    hp: 138,
    hit_dice: "12d12",
    speed: "40 ft.",
    stats: [23, 9, 21, 9, 10, 12],
    saves: [
      {
        constitution: 8
      },
      {
        wisdom: 3
      },
      {
        charisma: 4
      }
    ],
    skillsaves: [
      {
        athletics: 9
      },
      {
        perception: 3
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "cold",
    condition_immunities: "",
    senses: "passive Perception 13",
    languages: "Giant",
    cr: "8",
    actions: [
      {
        name: "Multiattack",
        desc: "The giant makes two greataxe attacks.",
        attack_bonus: 0
      },
      {
        name: "Greataxe",
        desc: "Melee Weapon Attack: +9 to hit, reach 10 ft., one target. Hit: 25 (3d12 + 6) slashing damage.",
        attack_bonus: 9,
        damage_dice: "3d12",
        damage_bonus: 6
      },
      {
        name: "Rock",
        desc: "Ranged Weapon Attack: +9 to hit, range 60/240 ft., one target. Hit: 28 (4d10 + 6) bludgeoning damage.",
        attack_bonus: 9,
        damage_dice: "4d10",
        damage_bonus: 6
      }
    ]
  },
  {
    name: "Gargoyle",
    size: "Medium",
    source: "SRD",
    type: "elemental",
    subtype: "",
    alignment: "chaotic evil",
    ac: 15,
    hp: 52,
    hit_dice: "7d8",
    speed: "30 ft., fly 60 ft.",
    stats: [15, 11, 16, 6, 11, 7],
    damage_vulnerabilities: "",
    damage_resistances: "bludgeoning, piercing, and slashing from nonmagical weapons that aren't adamantine",
    damage_immunities: "poison",
    condition_immunities: "exhaustion, petrified, poisoned",
    senses: "darkvision 60 ft., passive Perception 10",
    languages: "Terran",
    cr: "2",
    traits: [
      {
        name: "False Appearance",
        desc: "While the gargoyle remains motion less, it is indistinguishable from an inanimate statue.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The gargoyle makes two attacks: one with its bite and one with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 5 (1d6 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d6",
        damage_bonus: 2
      },
      {
        name: "Claws",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 5 (1d6 + 2) slashing damage.",
        attack_bonus: 4,
        damage_dice: "1d6",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Gelatinous Cube",
    size: "Large",
    source: "SRD",
    type: "ooze",
    subtype: "",
    alignment: "unaligned",
    ac: 6,
    hp: 84,
    hit_dice: "8d10",
    speed: "15 ft.",
    stats: [14, 3, 20, 1, 6, 1],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "blinded, charmed, deafened, exhaustion, frightened, prone",
    senses: "blindsight 60 ft. (blind beyond this radius), passive Perception 8",
    languages: "",
    cr: "2",
    traits: [
      {
        name: "Ooze Cube",
        desc: "The cube takes up its entire space. Other creatures can enter the space, but a creature that does so is subjected to the cube's Engulf and has disadvantage on the saving throw.\nCreatures inside the cube can be seen but have total cover.\nA creature within 5 feet of the cube can take an action to pull a creature or object out of the cube. Doing so requires a successful DC 12 Strength check, and the creature making the attempt takes 10 (3d6) acid damage.\nThe cube can hold only one Large creature or up to four Medium or smaller creatures inside it at a time.",
        attack_bonus: 0
      },
      {
        name: "Transparent",
        desc: "Even when the cube is in plain sight, it takes a successful DC 15 Wisdom (Perception) check to spot a cube that has neither moved nor attacked. A creature that tries to enter the cube's space while unaware of the cube is surprised by the cube.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Pseudopod",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one creature. Hit: 10 (3d6) acid damage.",
        attack_bonus: 4,
        damage_dice: "3d6"
      },
      {
        name: "Engulf",
        desc: "The cube moves up to its speed. While doing so, it can enter Large or smaller creatures' spaces. Whenever the cube enters a creature's space, the creature must make a DC 12 Dexterity saving throw.\nOn a successful save, the creature can choose to be pushed 5 feet back or to the side of the cube. A creature that chooses not to be pushed suffers the consequences of a failed saving throw.\nOn a failed save, the cube enters the creature's space, and the creature takes 10 (3d6) acid damage and is engulfed. The engulfed creature can't breathe, is restrained, and takes 21 (6d6) acid damage at the start of each of the cube's turns. When the cube moves, the engulfed creature moves with it.\nAn engulfed creature can try to escape by taking an action to make a DC 12 Strength check. On a success, the creature escapes and enters a space of its choice within 5 feet of the cube.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Ghast",
    size: "Medium",
    source: "SRD",
    type: "undead",
    subtype: "",
    alignment: "chaotic evil",
    ac: 13,
    hp: 36,
    hit_dice: "8d8",
    speed: "30 ft.",
    stats: [16, 17, 10, 11, 10, 8],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "necrotic",
    condition_immunities: "poisoned",
    senses: "darkvision 60 ft., passive Perception 10",
    languages: "Common",
    cr: "2",
    traits: [
      {
        name: "Stench",
        desc: "Any creature that starts its turn within 5 ft. of the ghast must succeed on a DC 10 Constitution saving throw or be poisoned until the start of its next turn. On a successful saving throw, the creature is immune to the ghast's Stench for 24 hours.",
        attack_bonus: 0
      },
      {
        name: "Turn Defiance",
        desc: "The ghast and any ghouls within 30 ft. of it have advantage on saving throws against effects that turn undead.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +3 to hit, reach 5 ft., one creature. Hit: 12 (2d8 + 3) piercing damage.",
        attack_bonus: 3,
        damage_dice: "2d8",
        damage_bonus: 3
      },
      {
        name: "Claws",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 10 (2d6 + 3) slashing damage. If the target is a creature other than an undead, it must succeed on a DC 10 Constitution saving throw or be paralyzed for 1 minute. The target can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success.",
        attack_bonus: 5,
        damage_dice: "2d6",
        damage_bonus: 3
      }
    ]
  },
  {
    name: "Ghost",
    size: "Medium",
    source: "SRD",
    type: "undead",
    subtype: "",
    alignment: "any alignment",
    ac: 11,
    hp: 45,
    hit_dice: "10d8",
    speed: "0 ft., fly 40 ft. It can hover.",
    stats: [7, 13, 10, 10, 12, 17],
    damage_vulnerabilities: "",
    damage_resistances: "acid, fire, lightning, thunder; bludgeoning, piercing, and slashing from nonmagical weapons",
    damage_immunities: "cold, necrotic, poison",
    condition_immunities: "charmed, exhaustion, frightened, grappled, paralyzed, petrified, poisoned, prone, restrained",
    senses: "darkvision 60 ft., passive Perception 11",
    languages: "any languages it knew in life",
    cr: "4",
    traits: [
      {
        name: "Ethereal Sight",
        desc: "The ghost can see 60 ft. into the Ethereal Plane when it is on the Material Plane, and vice versa.",
        attack_bonus: 0
      },
      {
        name: "Incorporeal Movement",
        desc: "The ghost can move through other creatures and objects as if they were difficult terrain. It takes 5 (1d10) force damage if it ends its turn inside an object.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Withering Touch",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 17 (4d6 + 3) necrotic damage.",
        attack_bonus: 5,
        damage_dice: "4d6",
        damage_bonus: 3
      },
      {
        name: "Etherealness",
        desc: "The ghost enters the Ethereal Plane from the Material Plane, or vice versa. It is visible on the Material Plane while it is in the Border Ethereal, and vice versa, yet it can't affect or be affected by anything on the other plane.",
        attack_bonus: 0
      },
      {
        name: "Horrifying Visage",
        desc: "Each non-undead creature within 60 ft. of the ghost that can see it must succeed on a DC 13 Wisdom saving throw or be frightened for 1 minute. If the save fails by 5 or more, the target also ages 1d4 _ 10 years. A frightened target can repeat the saving throw at the end of each of its turns, ending the frightened condition on itself on a success. If a target's saving throw is successful or the effect ends for it, the target is immune to this ghost's Horrifying Visage for the next 24 hours. The aging effect can be reversed with a greater restoration spell, but only within 24 hours of it occurring.",
        attack_bonus: 0
      },
      {
        name: "Possession (Recharge 6)",
        desc: "One humanoid that the ghost can see within 5 ft. of it must succeed on a DC 13 Charisma saving throw or be possessed by the ghost; the ghost then disappears, and the target is incapacitated and loses control of its body. The ghost now controls the body but doesn't deprive the target of awareness. The ghost can't be targeted by any attack, spell, or other effect, except ones that turn undead, and it retains its alignment, Intelligence, Wisdom, Charisma, and immunity to being charmed and frightened. It otherwise uses the possessed target's statistics, but doesn't gain access to the target's knowledge, class features, or proficiencies.\nThe possession lasts until the body drops to 0 hit points, the ghost ends it as a bonus action, or the ghost is turned or forced out by an effect like the dispel evil and good spell. When the possession ends, the ghost reappears in an unoccupied space within 5 ft. of the body. The target is immune to this ghost's Possession for 24 hours after succeeding on the saving throw or after the possession ends.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Ghoul",
    size: "Medium",
    source: "SRD",
    type: "undead",
    subtype: "",
    alignment: "chaotic evil",
    ac: 12,
    hp: 22,
    hit_dice: "5d8",
    speed: "30 ft.",
    stats: [13, 15, 10, 7, 10, 6],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "poisoned",
    senses: "darkvision 60 ft., passive Perception 10",
    languages: "Common",
    cr: "1",
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +2 to hit, reach 5 ft., one creature. Hit: 9 (2d6 + 2) piercing damage.",
        attack_bonus: 2,
        damage_dice: "2d6",
        damage_bonus: 2
      },
      {
        name: "Claws",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 7 (2d4 + 2) slashing damage. If the target is a creature other than an elf or undead, it must succeed on a DC 10 Constitution saving throw or be paralyzed for 1 minute. The target can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Giant Ape",
    size: "Huge",
    source: "SRD",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 157,
    hit_dice: "15d12",
    speed: "40 ft., climb 40 ft.",
    stats: [23, 14, 18, 7, 12, 7],
    skillsaves: [
      {
        athletics: 9
      },
      {
        perception: 4
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 14",
    languages: "",
    cr: "7",
    actions: [
      {
        name: "Multiattack",
        desc: "The ape makes two fist attacks.",
        attack_bonus: 0
      },
      {
        name: "Fist",
        desc: "Melee Weapon Attack: +9 to hit, reach 10 ft., one target. Hit: 22 (3d10 + 6) bludgeoning damage.",
        attack_bonus: 9,
        damage_dice: "3d10",
        damage_bonus: 6
      },
      {
        name: "Rock",
        desc: "Ranged Weapon Attack: +9 to hit, range 50/100 ft., one target. Hit: 30 (7d6 + 6) bludgeoning damage.",
        attack_bonus: 9,
        damage_dice: "7d6",
        damage_bonus: 6
      }
    ]
  },
  {
    name: "Giant Badger",
    size: "Medium",
    source: "SRD",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 10,
    hp: 13,
    hit_dice: "2d8",
    speed: "30 ft., burrow 10 ft.",
    stats: [13, 10, 15, 2, 12, 5],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 30 ft., passive Perception 11",
    languages: "",
    cr: "1/4",
    traits: [
      {
        name: "Keen Smell",
        desc: "The badger has advantage on Wisdom (Perception) checks that rely on smell.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The badger makes two attacks: one with its bite and one with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 4 (1d6 + 1) piercing damage.",
        attack_bonus: 3,
        damage_dice: "1d6",
        damage_bonus: 1
      },
      {
        name: "Claws",
        desc: "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 6 (2d4 + 1) slashing damage.",
        attack_bonus: 3,
        damage_dice: "2d4",
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Giant Bat",
    size: "Large",
    source: "SRD",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 13,
    hp: 22,
    hit_dice: "4d10",
    speed: "10 ft., fly 60 ft.",
    stats: [15, 16, 11, 2, 12, 6],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "blindsight 60 ft., passive Perception 11",
    languages: "",
    cr: "1/4",
    traits: [
      {
        name: "Echolocation",
        desc: "The bat can't use its blindsight while deafened.",
        attack_bonus: 0
      },
      {
        name: "Keen Hearing",
        desc: "The bat has advantage on Wisdom (Perception) checks that rely on hearing.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one creature. Hit: 5 (1d6 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d6",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Giant Boar",
    size: "Large",
    source: "SRD",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 42,
    hit_dice: "5d10",
    speed: "40 ft.",
    stats: [17, 10, 16, 2, 7, 5],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 8",
    languages: "",
    cr: "2",
    traits: [
      {
        name: "Charge",
        desc: "If the boar moves at least 20 ft. straight toward a target and then hits it with a tusk attack on the same turn, the target takes an extra 7 (2d6) slashing damage. If the target is a creature, it must succeed on a DC 13 Strength saving throw or be knocked prone.",
        attack_bonus: 0,
        damage_dice: "2d6"
      },
      {
        name: "Relentless (Recharges after a Short or Long Rest)",
        desc: "If the boar takes 10 damage or less that would reduce it to 0 hit points, it is reduced to 1 hit point instead.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Tusk",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 10 (2d6 + 3) slashing damage.",
        attack_bonus: 5,
        damage_dice: "2d6",
        damage_bonus: 3
      }
    ]
  },
  {
    name: "Giant Centipede",
    size: "Small",
    source: "SRD",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 13,
    hp: 4,
    hit_dice: "1d6",
    speed: "30 ft., climb 30 ft.",
    stats: [5, 14, 12, 1, 7, 3],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "blindsight 30 ft., passive Perception 8",
    languages: "",
    cr: "1/4",
    actions: [
      {
        name: "Bite",
        desc: "Bite. Melee Weapon Attack: +4 to hit, reach 5 ft., one creature. Hit: 4 (1d4 + 2) piercing damage, and the target must succeed on a DC 11 Constitution saving throw or take 10 (3d6) poison damage. If the poison damage reduces the target to 0 hit points, the target is stable but poisoned for 1 hour, even after regaining hit points, and is paralyzed while poisoned in this way.",
        attack_bonus: 4,
        damage_dice: "1d4",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Giant Constrictor Snake",
    size: "Huge",
    source: "SRD",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 60,
    hit_dice: "8d12",
    speed: "30 ft., swim 30 ft.",
    stats: [19, 14, 12, 1, 10, 3],
    skillsaves: [
      {
        perception: 2
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "blindsight 10 ft., passive Perception 12",
    languages: "",
    cr: "2",
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +6 to hit, reach 10 ft., one creature. Hit: 11 (2d6 + 4) piercing damage.",
        attack_bonus: 6,
        damage_dice: "2d6",
        damage_bonus: 4
      },
      {
        name: "Constrict",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one creature. Hit: 13 (2d8 + 4) bludgeoning damage, and the target is grappled (escape DC 16). Until this grapple ends, the creature is restrained, and the snake can't constrict another target.",
        attack_bonus: 6,
        damage_dice: "2d8",
        damage_bonus: 4
      }
    ]
  },
  {
    name: "Giant Crab",
    size: "Medium",
    source: "SRD",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 15,
    hp: 13,
    hit_dice: "3d8",
    speed: "30 ft., swim 30 ft.",
    stats: [13, 15, 11, 1, 9, 3],
    skillsaves: [
      {
        stealth: 4
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "blindsight 30 ft., passive Perception 9",
    languages: "",
    cr: "1/8",
    traits: [
      {
        name: "Amphibious",
        desc: "The crab can breathe air and water.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 4 (1d6 + 1) bludgeoning damage, and the target is grappled (escape DC 11). The crab has two claws, each of which can grapple only one target.",
        attack_bonus: 3,
        damage_dice: "1d6",
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Giant Crocodile",
    size: "Huge",
    source: "SRD",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 14,
    hp: 85,
    hit_dice: "9d12",
    speed: "30 ft., swim 50 ft.",
    stats: [21, 9, 17, 2, 10, 7],
    skillsaves: [
      {
        stealth: 5
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 10",
    languages: "",
    cr: "5",
    traits: [
      {
        name: "Hold Breath",
        desc: "The crocodile can hold its breath for 30 minutes.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The crocodile makes two attacks: one with its bite and one with its tail.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +8 to hit, reach 5 ft., one target. Hit: 21 (3d10 + 5) piercing damage, and the target is grappled (escape DC 16). Until this grapple ends, the target is restrained, and the crocodile can't bite another target.",
        attack_bonus: 8,
        damage_dice: "3d10",
        damage_bonus: 5
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +8 to hit, reach 10 ft., one target not grappled by the crocodile. Hit: 14 (2d8 + 5) bludgeoning damage. If the target is a creature, it must succeed on a DC 16 Strength saving throw or be knocked prone.",
        attack_bonus: 8,
        damage_dice: "2d8",
        damage_bonus: 5
      }
    ]
  },
  {
    name: "Giant Eagle",
    size: "Large",
    source: "SRD",
    type: "beast",
    subtype: "",
    alignment: "neutral good",
    ac: 13,
    hp: 26,
    hit_dice: "4d10",
    speed: "10 ft., fly 80 ft.",
    stats: [16, 17, 13, 8, 14, 10],
    skillsaves: [
      {
        perception: 4
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 14",
    languages: "Giant Eagle, understands Common and Auran but can't speak",
    cr: "1",
    traits: [
      {
        name: "Keen Sight",
        desc: "The eagle has advantage on Wisdom (Perception) checks that rely on sight.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The eagle makes two attacks: one with its beak and one with its talons.",
        attack_bonus: 0
      },
      {
        name: "Beak",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 6 (1d6 + 3) piercing damage.",
        attack_bonus: 5,
        damage_dice: "1d6",
        damage_bonus: 3
      },
      {
        name: "Talons",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 10 (2d6 + 3) slashing damage.",
        attack_bonus: 5,
        damage_dice: "2d6",
        damage_bonus: 3
      }
    ]
  },
  {
    name: "Giant Elk",
    size: "Huge",
    source: "SRD",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 15,
    hp: 42,
    hit_dice: "5d12",
    speed: "60 ft.",
    stats: [19, 16, 14, 7, 14, 10],
    skillsaves: [
      {
        perception: 4
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 14",
    languages: "Giant Elk, understands Common, Elvish, and Sylvan but can't speak",
    cr: "2",
    traits: [
      {
        name: "Charge",
        desc: "If the elk moves at least 20 ft. straight toward a target and then hits it with a ram attack on the same turn, the target takes an extra 7 (2d6) damage. If the target is a creature, it must succeed on a DC 14 Strength saving throw or be knocked prone.",
        attack_bonus: 0,
        damage_dice: "2d6"
      }
    ],
    actions: [
      {
        name: "Ram",
        desc: "Melee Weapon Attack: +6 to hit, reach 10 ft., one target. Hit: 11 (2d6 + 4) bludgeoning damage.",
        attack_bonus: 6,
        damage_dice: "2d6",
        damage_bonus: 4
      },
      {
        name: "Hooves",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one prone creature. Hit: 22 (4d8 + 4) bludgeoning damage.",
        attack_bonus: 6,
        damage_dice: "4d8",
        damage_bonus: 4
      }
    ]
  },
  {
    name: "Giant Fire Beetle",
    size: "Small",
    source: "SRD",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 13,
    hp: 4,
    hit_dice: "1d6",
    speed: "30 ft.",
    stats: [8, 10, 12, 1, 7, 3],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "blindsight 30 ft., passive Perception 8",
    languages: "",
    cr: "0",
    traits: [
      {
        name: "Illumination",
        desc: "The beetle sheds bright light in a 10-foot radius and dim light for an additional 10 ft..",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +1 to hit, reach 5 ft., one target. Hit: 2 (1d6 \u2014 1) slashing damage.",
        attack_bonus: 1,
        damage_dice: "1d6",
        damage_bonus: -1
      }
    ]
  },
  {
    name: "Giant Frog",
    size: "Medium",
    source: "SRD",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 11,
    hp: 18,
    hit_dice: "4d8",
    speed: "30 ft., swim 30 ft.",
    stats: [12, 13, 11, 2, 10, 3],
    skillsaves: [
      {
        perception: 2
      },
      {
        stealth: 3
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 30 ft., passive Perception 12",
    languages: "",
    cr: "1/4",
    traits: [
      {
        name: "Amphibious",
        desc: "The frog can breathe air and water",
        attack_bonus: 0
      },
      {
        name: "Standing Leap",
        desc: "The frog's long jump is up to 20 ft. and its high jump is up to 10 ft., with or without a running start.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 4 (1d6 + 1) piercing damage, and the target is grappled (escape DC 11). Until this grapple ends, the target is restrained, and the frog can't bite another target.",
        attack_bonus: 3,
        damage_dice: "1d6",
        damage_bonus: 1
      },
      {
        name: "Swallow",
        desc: "The frog makes one bite attack against a Small or smaller target it is grappling. If the attack hits, the target is swallowed, and the grapple ends. The swallowed target is blinded and restrained, it has total cover against attacks and other effects outside the frog, and it takes 5 (2d4) acid damage at the start of each of the frog's turns. The frog can have only one target swallowed at a time. If the frog dies, a swallowed creature is no longer restrained by it and can escape from the corpse using 5 ft. of movement, exiting prone.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Giant Goat",
    size: "Large",
    source: "SRD",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 11,
    hp: 19,
    hit_dice: "3d10",
    speed: "40 ft.",
    stats: [17, 11, 12, 3, 12, 6],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 11",
    languages: "",
    cr: "1/2",
    traits: [
      {
        name: "Charge",
        desc: "If the goat moves at least 20 ft. straight toward a target and then hits it with a ram attack on the same turn, the target takes an extra 5 (2d4) bludgeoning damage. If the target is a creature, it must succeed on a DC 13 Strength saving throw or be knocked prone.",
        attack_bonus: 0,
        damage_dice: "2d4"
      },
      {
        name: "Sure-Footed",
        desc: "The goat has advantage on Strength and Dexterity saving throws made against effects that would knock it prone.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Ram",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 8 (2d4 + 3) bludgeoning damage.",
        attack_bonus: 5,
        damage_dice: "2d4",
        damage_bonus: 3
      }
    ]
  },
  {
    name: "Giant Hyena",
    size: "Large",
    source: "SRD",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 45,
    hit_dice: "6d10",
    speed: "50 ft.",
    stats: [16, 14, 14, 2, 12, 7],
    skillsaves: [
      {
        perception: 3
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 13",
    languages: "",
    cr: "1",
    traits: [
      {
        name: "Rampage",
        desc: "When the hyena reduces a creature to 0 hit points with a melee attack on its turn, the hyena can take a bonus action to move up to half its speed and make a bite attack.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 10 (2d6 + 3) piercing damage.",
        attack_bonus: 5,
        damage_dice: "1d6",
        damage_bonus: 3
      }
    ]
  },
  {
    name: "Giant Lizard",
    size: "Large",
    source: "SRD",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 19,
    hit_dice: "3d10",
    speed: "30 ft., climb 30 ft.",
    stats: [15, 12, 13, 2, 10, 5],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 30 ft., passive Perception 10",
    languages: "",
    cr: "1/4",
    traits: [
      {
        name: "Variant: Hold Breath",
        desc: "The lizard can hold its breath for 15 minutes. (A lizard that has this trait also has a swimming speed of 30 feet.)",
        attack_bonus: 0
      },
      {
        name: "Variant: Spider Climb",
        desc: "The lizard can climb difficult surfaces, including upside down on ceilings, without needing to make an ability check.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 6 (1d8 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d8",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Giant Octopus",
    size: "Large",
    source: "SRD",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 11,
    hp: 52,
    hit_dice: "8d10",
    speed: "10 ft., swim 60 ft.",
    stats: [17, 13, 13, 4, 10, 4],
    skillsaves: [
      {
        perception: 4
      },
      {
        stealth: 5
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 14",
    languages: "",
    cr: "1",
    traits: [
      {
        name: "Hold Breath",
        desc: "While out of water, the octopus can hold its breath for 1 hour.",
        attack_bonus: 0
      },
      {
        name: "Underwater Camouflage",
        desc: "The octopus has advantage on Dexterity (Stealth) checks made while underwater.",
        attack_bonus: 0
      },
      {
        name: "Water Breathing",
        desc: "The octopus can breathe only underwater.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Tentacles",
        desc: "Melee Weapon Attack: +5 to hit, reach 15 ft., one target. Hit: 10 (2d6 + 3) bludgeoning damage. If the target is a creature, it is grappled (escape DC 16). Until this grapple ends, the target is restrained, and the octopus can't use its tentacles on another target.",
        attack_bonus: 5,
        damage_dice: "2d6",
        damage_bonus: 3
      },
      {
        name: "Ink Cloud (Recharges after a Short or Long Rest)",
        desc: "A 20-foot-radius cloud of ink extends all around the octopus if it is underwater. The area is heavily obscured for 1 minute, although a significant current can disperse the ink. After releasing the ink, the octopus can use the Dash action as a bonus action.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Giant Owl",
    size: "Large",
    source: "SRD",
    type: "beast",
    subtype: "",
    alignment: "neutral",
    ac: 12,
    hp: 19,
    hit_dice: "3d10",
    speed: "5 ft., fly 60 ft.",
    stats: [13, 15, 12, 8, 13, 10],
    skillsaves: [
      {
        perception: 5
      },
      {
        stealth: 4
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 120 ft., passive Perception 15",
    languages: "Giant Owl, understands Common, Elvish, and Sylvan but can't speak",
    cr: "1/4",
    traits: [
      {
        name: "Flyby",
        desc: "The owl doesn't provoke opportunity attacks when it flies out of an enemy's reach.",
        attack_bonus: 0
      },
      {
        name: "Keen Hearing and Sight",
        desc: "The owl has advantage on Wisdom (Perception) checks that rely on hearing or sight.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Talons",
        desc: "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 8 (2d6 + 1) slashing damage.",
        attack_bonus: 3,
        damage_dice: "2d6",
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Giant Poisonous Snake",
    size: "Medium",
    source: "SRD",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 14,
    hp: 11,
    hit_dice: "2d8",
    speed: "30 ft., swim 30 ft.",
    stats: [10, 18, 13, 2, 10, 3],
    skillsaves: [
      {
        perception: 2
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "blindsight 10 ft., passive Perception 12",
    languages: "",
    cr: "1/4",
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +6 to hit, reach 10 ft., one target. Hit: 6 (1d4 + 4) piercing damage, and the target must make a DC 11 Constitution saving throw, taking 10 (3d6) poison damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 6,
        damage_dice: "1d4",
        damage_bonus: 4
      }
    ]
  },
  {
    name: "Giant Rat",
    size: "Small",
    source: "SRD",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 7,
    hit_dice: "2d6",
    speed: "30 ft.",
    stats: [7, 15, 11, 2, 10, 4],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 10",
    languages: "",
    cr: "1/8",
    traits: [
      {
        name: "Keen Smell",
        desc: "The rat has advantage on Wisdom (Perception) checks that rely on smell.",
        attack_bonus: 0
      },
      {
        name: "Pack Tactics",
        desc: "The rat has advantage on an attack roll against a creature if at least one of the rat's allies is within 5 ft. of the creature and the ally isn't incapacitated.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 4 (1d4 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d4",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Giant Rat (Diseased)",
    size: "Small",
    source: "SRD",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 7,
    hit_dice: "2d6",
    speed: "30 ft.",
    stats: [7, 15, 11, 2, 10, 4],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 10",
    languages: "",
    cr: "1/8",
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 3 (1d4 + 2) piercing damage. If the target is a creature, it must succeed on a DC 10 Constitution saving throw or contract a disease. Until the disease is cured, the target can't regain hit points except by magical means, and the target's hit point maximum decreases by 3 (1d6) every 24 hours. If the target's hit point maximum drops to 0 as a result of this disease, the target dies.",
        attack_bonus: 4,
        damage_dice: "1d4",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Giant Scorpion",
    size: "Large",
    source: "SRD",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 15,
    hp: 52,
    hit_dice: "7d10",
    speed: "40 ft.",
    stats: [15, 13, 15, 1, 9, 3],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "blindsight 60 ft., passive Perception 9",
    languages: "",
    cr: "3",
    actions: [
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 6 (1d8 + 2) bludgeoning damage, and the target is grappled (escape DC 12). The scorpion has two claws, each of which can grapple only one target.",
        attack_bonus: 4,
        damage_dice: "1d8",
        damage_bonus: 2
      },
      {
        name: "Multiattack",
        desc: "The scorpion makes three attacks: two with its claws and one with its sting.",
        attack_bonus: 0
      },
      {
        name: "Sting",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one creature. Hit: 7 (1d10 + 2) piercing damage, and the target must make a DC 12 Constitution saving throw, taking 22 (4d10) poison damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 4,
        damage_dice: "1d10",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Giant Sea Horse",
    size: "Large",
    source: "SRD",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 13,
    hp: 16,
    hit_dice: "3d10",
    speed: "0 ft., swim 40 ft.",
    stats: [12, 15, 11, 2, 12, 5],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 11",
    languages: "",
    cr: "1/2",
    traits: [
      {
        name: "Charge",
        desc: "If the sea horse moves at least 20 ft. straight toward a target and then hits it with a ram attack on the same turn, the target takes an extra 7 (2d6) bludgeoning damage. If the target is a creature, it must succeed on a DC 11 Strength saving throw or be knocked prone.",
        attack_bonus: 0,
        damage_dice: "2d6"
      },
      {
        name: "Water Breathing",
        desc: "The sea horse can breathe only underwater.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Ram",
        desc: "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 4 (1d6 + 1) bludgeoning damage.",
        attack_bonus: 3,
        damage_dice: "1d6",
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Giant Shark",
    size: "Huge",
    source: "SRD",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 13,
    hp: 126,
    hit_dice: "11d12",
    speed: "swim 50 ft.",
    stats: [23, 11, 21, 1, 10, 5],
    skillsaves: [
      {
        perception: 3
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "blindsight 60 ft., passive Perception 13",
    languages: "",
    cr: "5",
    traits: [
      {
        name: "Blood Frenzy",
        desc: "The shark has advantage on melee attack rolls against any creature that doesn't have all its hit points.",
        attack_bonus: 0
      },
      {
        name: "Water Breathing",
        desc: "The shark can breathe only underwater.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Weapon Attack: +9 to hit, reach 5 ft., one target. Hit: 22 (3d10 + 6) piercing damage.",
        attack_bonus: 9,
        damage_dice: "3d10",
        damage_bonus: 6
      }
    ]
  },
  {
    name: "Giant Spider",
    size: "Large",
    source: "SRD",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 14,
    hp: 26,
    hit_dice: "4d10",
    speed: "30 ft., climb 30 ft.",
    stats: [14, 16, 12, 2, 11, 4],
    skillsaves: [
      {
        stealth: 7
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "blindsight 10 ft., darkvision 60 ft., passive Perception 10",
    languages: "",
    cr: "1",
    traits: [
      {
        name: "Spider Climb",
        desc: "The spider can climb difficult surfaces, including upside down on ceilings, without needing to make an ability check.",
        attack_bonus: 0
      },
      {
        name: "Web Sense",
        desc: "While in contact with a web, the spider knows the exact location of any other creature in contact with the same web.",
        attack_bonus: 0
      },
      {
        name: "Web Walker",
        desc: "The spider ignores movement restrictions caused by webbing.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one creature. Hit: 7 (1d8 + 3) piercing damage, and the target must make a DC 11 Constitution saving throw, taking 9 (2d8) poison damage on a failed save, or half as much damage on a successful one. If the poison damage reduces the target to 0 hit points, the target is stable but poisoned for 1 hour, even after regaining hit points, and is paralyzed while poisoned in this way.",
        attack_bonus: 5,
        damage_dice: "1d8",
        damage_bonus: 3
      },
      {
        name: "Web (Recharge 5-6)",
        desc: "Ranged Weapon Attack: +5 to hit, range 30/60 ft., one creature. Hit: The target is restrained by webbing. As an action, the restrained target can make a DC 12 Strength check, bursting the webbing on a success. The webbing can also be attacked and destroyed (AC 10; hp 5; vulnerability to fire damage; immunity to bludgeoning, poison, and psychic damage).",
        attack_bonus: 5
      }
    ]
  },
  {
    name: "Giant Toad",
    size: "Large",
    source: "SRD",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 11,
    hp: 39,
    hit_dice: "6d10",
    speed: "20 ft., swim 40 ft.",
    stats: [15, 13, 13, 2, 10, 3],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 30 ft., passive Perception 10",
    languages: "",
    cr: "1",
    traits: [
      {
        name: "Amphibious",
        desc: "The toad can breathe air and water",
        attack_bonus: 0
      },
      {
        name: "Standing Leap",
        desc: "The toad's long jump is up to 20 ft. and its high jump is up to 10 ft., with or without a running start.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 7 (1d10 + 2) piercing damage plus 5 (1d10) poison damage, and the target is grappled (escape DC 13). Until this grapple ends, the target is restrained, and the toad can't bite another target.",
        attack_bonus: 4,
        damage_dice: "1d10",
        damage_bonus: 2
      },
      {
        name: "Swallow",
        desc: "The toad makes one bite attack against a Medium or smaller target it is grappling. If the attack hits, the target is swallowed, and the grapple ends. The swallowed target is blinded and restrained, it has total cover against attacks and other effects outside the toad, and it takes 10 (3d6) acid damage at the start of each of the toad's turns. The toad can have only one target swallowed at a time.\nIf the toad dies, a swallowed creature is no longer restrained by it and can escape from the corpse using 5 feet of movement, exiting prone.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Giant Vulture",
    size: "Large",
    source: "SRD",
    type: "beast",
    subtype: "",
    alignment: "neutral evil",
    ac: 10,
    hp: 22,
    hit_dice: "3d10",
    speed: "10 ft., fly 60 ft.",
    stats: [15, 10, 15, 6, 12, 7],
    skillsaves: [
      {
        perception: 3
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 13",
    languages: "understands Common but can't speak",
    cr: "1",
    traits: [
      {
        name: "Keen Sight and Smell",
        desc: "The vulture has advantage on Wisdom (Perception) checks that rely on sight or smell.",
        attack_bonus: 0
      },
      {
        name: "Pack Tactics",
        desc: "The vulture has advantage on an attack roll against a creature if at least one of the vulture's allies is within 5 ft. of the creature and the ally isn't incapacitated.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The vulture makes two attacks: one with its beak and one with its talons.",
        attack_bonus: 0
      },
      {
        name: "Beak",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 7 (2d4 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "2d4",
        damage_bonus: 2
      },
      {
        name: "Talons",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 9 (2d6 + 2) slashing damage.",
        attack_bonus: 4,
        damage_dice: "2d6",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Giant Wasp",
    size: "Medium",
    source: "SRD",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 13,
    hit_dice: "3d8",
    speed: "10 ft., fly 50 ft., swim 50 ft.",
    stats: [10, 14, 10, 1, 10, 3],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 10",
    languages: "",
    cr: "1/2",
    actions: [
      {
        name: "Sting",
        desc: "Sting. Melee Weapon Attack: +4 to hit, reach 5 ft., one creature. Hit: 5 (1d6 + 2) piercing damage, and the target must make a DC 11 Constitution saving throw, taking 10 (3d6) poison damage on a failed save, or half as much damage on a successful one. If the poison damage reduces the target to 0 hit points, the target is stable but poisoned for 1 hour, even after regaining hit points, and is paralyzed while poisoned in this way.",
        attack_bonus: 4,
        damage_dice: "1d6",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Giant Weasel",
    size: "Medium",
    source: "SRD",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 13,
    hp: 9,
    hit_dice: "2d8",
    speed: "40 ft.",
    stats: [11, 16, 10, 4, 12, 5],
    skillsaves: [
      {
        perception: 3
      },
      {
        stealth: 5
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 13",
    languages: "",
    cr: "1/8",
    traits: [
      {
        name: "Keen Hearing and Smell",
        desc: "The weasel has advantage on Wisdom (Perception) checks that rely on hearing or smell.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 5 (1d4 + 3) piercing damage.",
        attack_bonus: 5,
        damage_dice: "1d4",
        damage_bonus: 3
      }
    ]
  },
  {
    name: "Giant Wolf Spider",
    size: "Medium",
    source: "SRD",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 13,
    hp: 11,
    hit_dice: "2d8",
    speed: "40 ft., climb 40 ft.",
    stats: [12, 16, 13, 3, 12, 4],
    skillsaves: [
      {
        perception: 3
      },
      {
        stealth: 7
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "blindsight 10 ft., darkvision 60 ft., passive Perception 13",
    languages: "",
    cr: "1/4",
    traits: [
      {
        name: "Spider Climb",
        desc: "The spider can climb difficult surfaces, including upside down on ceilings, without needing to make an ability check.",
        attack_bonus: 0
      },
      {
        name: "Web Sense",
        desc: "While in contact with a web, the spider knows the exact location of any other creature in contact with the same web.",
        attack_bonus: 0
      },
      {
        name: "Web Walker",
        desc: "The spider ignores movement restrictions caused by webbing.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Weapon Attack: +3 to hit, reach 5 ft., one creature. Hit: 4 (1d6 + 1) piercing damage, and the target must make a DC 11 Constitution saving throw, taking 7 (2d6) poison damage on a failed save, or half as much damage on a successful one. If the poison damage reduces the target to 0 hit points, the target is stable but poisoned for 1 hour, even after regaining hit points, and is paralyzed while poisoned in this way.",
        attack_bonus: 3,
        damage_dice: "1d6",
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Gibbering Mouther",
    size: "Medium",
    source: "SRD",
    type: "aberration",
    subtype: "",
    alignment: "neutral",
    ac: 9,
    hp: 67,
    hit_dice: "9d8",
    speed: "10 ft., swim 10 ft.",
    stats: [10, 8, 16, 3, 10, 6],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "prone",
    senses: "darkvision 60 ft., passive Perception 10",
    languages: "",
    cr: "2",
    traits: [
      {
        name: "Aberrant Ground",
        desc: "The ground in a 10-foot radius around the mouther is doughlike difficult terrain. Each creature that starts its turn in that area must succeed on a DC 10 Strength saving throw or have its speed reduced to 0 until the start of its next turn.",
        attack_bonus: 0
      },
      {
        name: "Gibbering",
        desc: "The mouther babbles incoherently while it can see any creature and isn't incapacitated. Each creature that starts its turn within 20 feet of the mouther and can hear the gibbering must succeed on a DC 10 Wisdom saving throw. On a failure, the creature can't take reactions until the start of its next turn and rolls a d8 to determine what it does during its turn. On a 1 to 4, the creature does nothing. On a 5 or 6, the creature takes no action or bonus action and uses all its movement to move in a randomly determined direction. On a 7 or 8, the creature makes a melee attack against a randomly determined creature within its reach or does nothing if it can't make such an attack.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The gibbering mouther makes one bite attack and, if it can, uses its Blinding Spittle.",
        attack_bonus: 0
      },
      {
        name: "Bites",
        desc: "Melee Weapon Attack: +2 to hit, reach 5 ft., one creature. Hit: 17 (5d6) piercing damage. If the target is Medium or smaller, it must succeed on a DC 10 Strength saving throw or be knocked prone. If the target is killed by this damage, it is absorbed into the mouther.",
        attack_bonus: 2,
        damage_dice: "5d6"
      },
      {
        name: "Blinding Spittle (Recharge 5-6)",
        desc: "The mouther spits a chemical glob at a point it can see within 15 feet of it. The glob explodes in a blinding flash of light on impact. Each creature within 5 feet of the flash must succeed on a DC 13 Dexterity saving throw or be blinded until the end of the mouther's next turn.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Glabrezu",
    size: "Large",
    source: "SRD",
    type: "fiend",
    subtype: "demon",
    alignment: "chaotic evil",
    ac: 17,
    hp: 157,
    hit_dice: "15d10",
    speed: "40 ft.",
    stats: [20, 15, 21, 19, 17, 16],
    saves: [
      {
        strength: 9
      },
      {
        constitution: 9
      },
      {
        wisdom: 7
      },
      {
        charisma: 7
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "cold, fire, lightning; bludgeoning, piercing, and slashing from nonmagical weapons",
    damage_immunities: "poison",
    condition_immunities: "poisoned",
    senses: "truesight 120 ft., passive Perception 13",
    languages: "Abyssal, telepathy 120 ft.",
    cr: "9",
    traits: [
      {
        name: "Innate Spellcasting",
        desc: "The glabrezu's spellcasting ability is Intelligence (spell save DC 16). The glabrezu can innately cast the following spells, requiring no material components:\nAt will: darkness, detect magic, dispel magic\n1/day each: confusion, fly, power word stun",
        attack_bonus: 0
      },
      {
        name: "Magic Resistance",
        desc: "The glabrezu has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The glabrezu makes four attacks: two with its pincers and two with its fists. Alternatively, it makes two attacks with its pincers and casts one spell.",
        attack_bonus: 0
      },
      {
        name: "Pincer",
        desc: "Melee Weapon Attack: +9 to hit, reach 10 ft., one target. Hit: 16 (2d10 + 5) bludgeoning damage. If the target is a Medium or smaller creature, it is grappled (escape DC 15). The glabrezu has two pincers, each of which can grapple only one target.",
        attack_bonus: 9,
        damage_dice: "2d10",
        damage_bonus: 5
      },
      {
        name: "Fist",
        desc: "Melee Weapon Attack: +9 to hit, reach 5 ft., one target. Hit: 7 (2d4 + 2) bludgeoning damage.",
        attack_bonus: 9,
        damage_dice: "2d4",
        damage_bonus: 2
      },
      {
        name: "Variant: Summon Demon (1/Day)",
        desc: "The demon chooses what to summon and attempts a magical summoning.\nA glabrezu has a 30 percent chance of summoning 1d3 vrocks, 1d2 hezrous, or one glabrezu.\nA summoned demon appears in an unoccupied space within 60 feet of its summoner, acts as an ally of its summoner, and can't summon other demons. It remains for 1 minute, until it or its summoner dies, or until its summoner dismisses it as an action.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Gladiator",
    size: "Medium",
    source: "SRD",
    type: "humanoid",
    subtype: "any race",
    alignment: "any alignment",
    ac: 16,
    hp: 112,
    hit_dice: "15d8",
    speed: "30 ft.",
    stats: [18, 15, 16, 10, 12, 15],
    saves: [
      {
        strength: 7
      },
      {
        dexterity: 5
      },
      {
        constitution: 6
      }
    ],
    skillsaves: [
      {
        intimidation: 5
      },
      {
        athletics: 10
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 11",
    languages: "any one language (usually Common)",
    cr: "5",
    traits: [
      {
        name: "Brave",
        desc: "The gladiator has advantage on saving throws against being frightened.",
        attack_bonus: 0
      },
      {
        name: "Brute",
        desc: "A melee weapon deals one extra die of its damage when the gladiator hits with it (included in the attack).",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The gladiator makes three melee attacks or two ranged attacks.",
        attack_bonus: 0
      },
      {
        name: "Spear",
        desc: "Melee or Ranged Weapon Attack: +7 to hit, reach 5 ft. and range 20/60 ft., one target. Hit: 11 (2d6 + 4) piercing damage, or 13 (2d8 + 4) piercing damage if used with two hands to make a melee attack.",
        attack_bonus: 7,
        damage_dice: "2d6",
        damage_bonus: 4
      },
      {
        name: "Shield Bash",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one creature. Hit: 9 (2d4 + 4) bludgeoning damage. If the target is a Medium or smaller creature, it must succeed on a DC 15 Strength saving throw or be knocked prone.",
        attack_bonus: 7,
        damage_dice: "2d4",
        damage_bonus: 4
      }
    ],
    reactions: [
      {
        name: "Parry",
        desc: "The gladiator adds 3 to its AC against one melee attack that would hit it. To do so, the gladiator must see the attacker and be wielding a melee weapon.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Gnoll",
    size: "Medium",
    source: "SRD",
    type: "humanoid",
    subtype: "gnoll",
    alignment: "chaotic evil",
    ac: 15,
    hp: 22,
    hit_dice: "5d8",
    speed: "30 ft.",
    stats: [14, 12, 11, 6, 10, 7],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 10",
    languages: "Gnoll",
    cr: "1/2",
    traits: [
      {
        name: "Rampage",
        desc: "When the gnoll reduces a creature to 0 hit points with a melee attack on its turn, the gnoll can take a bonus action to move up to half its speed and make a bite attack.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one creature. Hit: 4 (1d4 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d4",
        damage_bonus: 2
      },
      {
        name: "Spear",
        desc: "Melee or Ranged Weapon Attack: +4 to hit, reach 5 ft. or range 20/60 ft., one target. Hit: 5 (1d6 + 2) piercing damage, or 6 (1d8 + 2) piercing damage if used with two hands to make a melee attack.",
        attack_bonus: 4,
        damage_dice: "1d6",
        damage_bonus: 2
      },
      {
        name: "Longbow",
        desc: "Ranged Weapon Attack: +3 to hit, range 150/600 ft., one target. Hit: 5 (1d8 + 1) piercing damage.",
        attack_bonus: 3,
        damage_dice: "1d8",
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Goat",
    size: "Medium",
    source: "SRD",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 10,
    hp: 4,
    hit_dice: "1d8",
    speed: "40 ft.",
    stats: [12, 10, 11, 2, 10, 5],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 10",
    languages: "",
    cr: "0",
    traits: [
      {
        name: "Charge",
        desc: "If the goat moves at least 20 ft. straight toward a target and then hits it with a ram attack on the same turn, the target takes an extra 2 (1d4) bludgeoning damage. If the target is a creature, it must succeed on a DC 10 Strength saving throw or be knocked prone.",
        attack_bonus: 0,
        damage_dice: "1d4"
      },
      {
        name: "Sure-Footed",
        desc: "The goat has advantage on Strength and Dexterity saving throws made against effects that would knock it prone.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Ram",
        desc: "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 3 (1d4 + 1) bludgeoning damage.",
        attack_bonus: 3,
        damage_dice: "1d4",
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Goblin",
    size: "Small",
    source: "SRD",
    type: "humanoid",
    subtype: "goblinoid",
    alignment: "neutral evil",
    ac: 15,
    hp: 7,
    hit_dice: "2d6",
    speed: "30 ft.",
    stats: [8, 14, 10, 10, 8, 8],
    skillsaves: [
      {
        stealth: 6
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 9",
    languages: "Common, Goblin",
    cr: "1/4",
    traits: [
      {
        name: "Nimble Escape",
        desc: "The goblin can take the Disengage or Hide action as a bonus action on each of its turns.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Scimitar",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 5 (1d6 + 2) slashing damage.",
        attack_bonus: 4,
        damage_dice: "1d6",
        damage_bonus: 2
      },
      {
        name: "Shortbow",
        desc: "Ranged Weapon Attack: +4 to hit, range 80/320 ft., one target. Hit: 5 (1d6 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d6",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Gold Dragon Wyrmling",
    size: "Medium",
    source: "SRD",
    type: "dragon",
    subtype: "",
    alignment: "lawful good",
    ac: 17,
    hp: 60,
    hit_dice: "8d8",
    speed: "30 ft., fly 60 ft., swim 30 ft.",
    stats: [19, 14, 17, 14, 11, 16],
    saves: [
      {
        dexterity: 4
      },
      {
        constitution: 5
      },
      {
        wisdom: 2
      },
      {
        charisma: 5
      }
    ],
    skillsaves: [
      {
        perception: 4
      },
      {
        stealth: 4
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "fire",
    condition_immunities: "",
    senses: "blindsight 10 ft., darkvision 60 ft., passive Perception 14",
    languages: "Draconic",
    cr: "3",
    traits: [
      {
        name: "Amphibious",
        desc: "The dragon can breathe air and water.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 9 (1d10 + 4) piercing damage.",
        attack_bonus: 6,
        damage_dice: "1d10",
        damage_bonus: 4
      },
      {
        name: "Breath Weapons (Recharge 5-6)",
        desc: "The dragon uses one of the following breath weapons.\nFire Breath. The dragon exhales fire in a 15-foot cone. Each creature in that area must make a DC 13 Dexterity saving throw, taking 22 (4d10) fire damage on a failed save, or half as much damage on a successful one.\nWeakening Breath. The dragon exhales gas in a 15-foot cone. Each creature in that area must succeed on a DC 13 Strength saving throw or have disadvantage on Strength-based attack rolls, Strength checks, and Strength saving throws for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success.",
        attack_bonus: 0,
        damage_dice: "4d10"
      }
    ]
  },
  {
    name: "Gorgon",
    size: "Large",
    source: "SRD",
    type: "monstrosity",
    subtype: "",
    alignment: "unaligned",
    ac: 19,
    hp: 114,
    hit_dice: "12d10",
    speed: "40 ft.",
    stats: [20, 11, 18, 2, 12, 7],
    skillsaves: [
      {
        perception: 4
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "petrified",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 14",
    languages: "",
    cr: "5",
    traits: [
      {
        name: "Trampling Charge",
        desc: "If the gorgon moves at least 20 feet straight toward a creature and then hits it with a gore attack on the same turn, that target must succeed on a DC 16 Strength saving throw or be knocked prone. If the target is prone, the gorgon can make one attack with its hooves against it as a bonus action.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Gore",
        desc: "Melee Weapon Attack: +8 to hit, reach 5 ft., one target. Hit: 18 (2d12 + 5) piercing damage.",
        attack_bonus: 8,
        damage_dice: "2d12",
        damage_bonus: 5
      },
      {
        name: "Hooves",
        desc: "Melee Weapon Attack: +8 to hit, reach 5 ft., one target. Hit: 16 (2d10 + 5) bludgeoning damage.",
        attack_bonus: 8,
        damage_dice: "2d10",
        damage_bonus: 5
      },
      {
        name: "Petrifying Breath (Recharge 5-6)",
        desc: "The gorgon exhales petrifying gas in a 30-foot cone. Each creature in that area must succeed on a DC 13 Constitution saving throw. On a failed save, a target begins to turn to stone and is restrained. The restrained target must repeat the saving throw at the end of its next turn. On a success, the effect ends on the target. On a failure, the target is petrified until freed by the greater restoration spell or other magic.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Gray Ooze",
    size: "Medium",
    source: "SRD",
    type: "ooze",
    subtype: "",
    alignment: "unaligned",
    ac: 8,
    hp: 22,
    hit_dice: "3d8",
    speed: "10 ft., climb 10 ft.",
    stats: [12, 6, 16, 1, 6, 2],
    skillsaves: [
      {
        stealth: 2
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "acid, cold, fire",
    damage_immunities: "",
    condition_immunities: "blinded, charmed, deafened, exhaustion, frightened, prone",
    senses: "blindsight 60 ft. (blind beyond this radius), passive Perception 8",
    languages: "",
    cr: "1/2",
    traits: [
      {
        name: "Amorphous",
        desc: "The ooze can move through a space as narrow as 1 inch wide without squeezing.",
        attack_bonus: 0
      },
      {
        name: "Corrode Metal",
        desc: "Any nonmagical weapon made of metal that hits the ooze corrodes. After dealing damage, the weapon takes a permanent and cumulative -1 penalty to damage rolls. If its penalty drops to -5, the weapon is destroyed. Nonmagical ammunition made of metal that hits the ooze is destroyed after dealing damage.\nThe ooze can eat through 2-inch-thick, nonmagical metal in 1 round.",
        attack_bonus: 0
      },
      {
        name: "False Appearance",
        desc: "While the ooze remains motionless, it is indistinguishable from an oily pool or wet rock.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Pseudopod",
        desc: "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 4 (1d6 + 1) bludgeoning damage plus 7 (2d6) acid damage, and if the target is wearing nonmagical metal armor, its armor is partly corroded and takes a permanent and cumulative -1 penalty to the AC it offers. The armor is destroyed if the penalty reduces its AC to 10.",
        attack_bonus: 3,
        damage_dice: "1d6",
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Green Dragon Wyrmling",
    size: "Medium",
    source: "SRD",
    type: "dragon",
    subtype: "",
    alignment: "lawful evil",
    ac: 17,
    hp: 38,
    hit_dice: "7d8",
    speed: "30 ft., fly 60 ft., swim 30 ft.",
    stats: [15, 12, 13, 14, 11, 13],
    saves: [
      {
        dexterity: 3
      },
      {
        constitution: 3
      },
      {
        wisdom: 2
      },
      {
        charisma: 3
      }
    ],
    skillsaves: [
      {
        perception: 4
      },
      {
        stealth: 3
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "poison",
    condition_immunities: "poisoned",
    senses: "blindsight 10 ft., darkvision 60 ft., passive Perception 14",
    languages: "Draconic",
    cr: "2",
    traits: [
      {
        name: "Amphibious",
        desc: "The dragon can breathe air and water.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 7 (1d10 + 2) piercing damage plus 3 (1d6) poison damage.",
        attack_bonus: 4,
        damage_dice: "1d10 + 1d6",
        damage_bonus: 3
      },
      {
        name: "Poison Breath (Recharge 5-6)",
        desc: "The dragon exhales poisonous gas in a 15-foot cone. Each creature in that area must make a DC 11 Constitution saving throw, taking 21 (6d6) poison damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "6d6"
      }
    ]
  },
  {
    name: "Green Hag",
    size: "Medium",
    source: "SRD",
    type: "fey",
    subtype: "",
    alignment: "neutral evil",
    ac: 17,
    hp: 82,
    hit_dice: "11d8",
    speed: "30 ft.",
    stats: [18, 12, 16, 13, 14, 14],
    skillsaves: [
      {
        arcana: 3
      },
      {
        deception: 4
      },
      {
        perception: 4
      },
      {
        stealth: 3
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 14",
    languages: "Common, Draconic, Sylvan",
    cr: "3",
    traits: [
      {
        name: "Amphibious",
        desc: "The hag can breathe air and water.",
        attack_bonus: 0
      },
      {
        name: "Innate Spellcasting",
        desc: "The hag's innate spellcasting ability is Charisma (spell save DC 12). She can innately cast the following spells, requiring no material components:\n\nAt will: dancing lights, minor illusion, vicious mockery",
        attack_bonus: 0
      },
      {
        name: "Mimicry",
        desc: "The hag can mimic animal sounds and humanoid voices. A creature that hears the sounds can tell they are imitations with a successful DC 14 Wisdom (Insight) check.",
        attack_bonus: 0
      },
      {
        name: "Hag Coven",
        desc: "When hags must work together, they form covens, in spite of their selfish natures. A coven is made up of hags of any type, all of whom are equals within the group. However, each of the hags continues to desire more personal power.\nA coven consists of three hags so that any arguments between two hags can be settled by the third. If more than three hags ever come together, as might happen if two covens come into conflict, the result is usually chaos.",
        attack_bonus: 0
      },
      {
        name: "Shared Spellcasting (Coven Only)",
        desc: "While all three members of a hag coven are within 30 feet of one another, they can each cast the following spells from the wizard's spell list but must share the spell slots among themselves:\n\n\u2022 1st level (4 slots): identify, ray of sickness\n\u2022 2nd level (3 slots): hold person, locate object\n\u2022 3rd level (3 slots): bestow curse, counterspell, lightning bolt\n\u2022 4th level (3 slots): phantasmal killer, polymorph\n\u2022 5th level (2 slots): contact other plane, scrying\n\u2022 6th level (1 slot): eye bite\n\nFor casting these spells, each hag is a 12th-level spellcaster that uses Intelligence as her spellcasting ability. The spell save DC is 12+the hag's Intelligence modifier, and the spell attack bonus is 4+the hag's Intelligence modifier.",
        attack_bonus: 0
      },
      {
        name: "Hag Eye (Coven Only)",
        desc: "A hag coven can craft a magic item called a hag eye, which is made from a real eye coated in varnish and often fitted to a pendant or other wearable item. The hag eye is usually entrusted to a minion for safekeeping and transport. A hag in the coven can take an action to see what the hag eye sees if the hag eye is on the same plane of existence. A hag eye has AC 10, 1 hit point, and darkvision with a radius of 60 feet. If it is destroyed, each coven member takes 3d10 psychic damage and is blinded for 24 hours.\nA hag coven can have only one hag eye at a time, and creating a new one requires all three members of the coven to perform a ritual. The ritual takes 1 hour, and the hags can't perform it while blinded. During the ritual, if the hags take any action other than performing the ritual, they must start over.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Claws",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 13 (2d8 + 4) slashing damage.",
        attack_bonus: 6,
        damage_dice: "2d8",
        damage_bonus: 4
      },
      {
        name: "Illusory Appearance",
        desc: "The hag covers herself and anything she is wearing or carrying with a magical illusion that makes her look like another creature of her general size and humanoid shape. The illusion ends if the hag takes a bonus action to end it or if she dies.\nThe changes wrought by this effect fail to hold up to physical inspection. For example, the hag could appear to have smooth skin, but someone touching her would feel her rough flesh. Otherwise, a creature must take an action to visually inspect the illusion and succeed on a DC 20 Intelligence (Investigation) check to discern that the hag is disguised.",
        attack_bonus: 0
      },
      {
        name: "Invisible Passage",
        desc: "The hag magically turns invisible until she attacks or casts a spell, or until her concentration ends (as if concentrating on a spell). While invisible, she leaves no physical evidence of her passage, so she can be tracked only by magic. Any equipment she wears or carries is invisible with her.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Grick",
    size: "Medium",
    source: "SRD",
    type: "monstrosity",
    subtype: "",
    alignment: "neutral",
    ac: 14,
    hp: 27,
    hit_dice: "6d8",
    speed: "30 ft., climb 30 ft.",
    stats: [14, 14, 11, 3, 14, 5],
    damage_vulnerabilities: "",
    damage_resistances: "bludgeoning, piercing, and slashing damage from nonmagical weapons",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 12",
    languages: "",
    cr: "2",
    traits: [
      {
        name: "Stone Camouflage",
        desc: "The grick has advantage on Dexterity (Stealth) checks made to hide in rocky terrain.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The grick makes one attack with its tentacles. If that attack hits, the grick can make one beak attack against the same target.",
        attack_bonus: 0
      },
      {
        name: "Tentacles",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 9 (2d6 + 2) slashing damage.",
        attack_bonus: 4,
        damage_dice: "2d6",
        damage_bonus: 2
      },
      {
        name: "Beak",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 5 (1d6 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d6",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Griffon",
    size: "Large",
    source: "SRD",
    type: "monstrosity",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 59,
    hit_dice: "7d10",
    speed: "30 ft., fly 80 ft.",
    stats: [18, 15, 16, 2, 13, 8],
    skillsaves: [
      {
        perception: 5
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 15",
    languages: "",
    cr: "2",
    traits: [
      {
        name: "Keen Sight",
        desc: "The griffon has advantage on Wisdom (Perception) checks that rely on sight.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The griffon makes two attacks: one with its beak and one with its claws.",
        attack_bonus: 0
      },
      {
        name: "Beak",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 8 (1d8 + 4) piercing damage.",
        attack_bonus: 6,
        damage_dice: "1d8",
        damage_bonus: 4
      },
      {
        name: "Claws",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 11 (2d6 + 4) slashing damage.",
        attack_bonus: 6,
        damage_dice: "2d6",
        damage_bonus: 4
      }
    ]
  },
  {
    name: "Grimlock",
    size: "Medium",
    source: "SRD",
    type: "humanoid",
    subtype: "grimlock",
    alignment: "neutral evil",
    ac: 11,
    hp: 11,
    hit_dice: "2d8",
    speed: "30 ft.",
    stats: [16, 12, 12, 9, 8, 6],
    skillsaves: [
      {
        athletics: 5
      },
      {
        perception: 3
      },
      {
        stealth: 3
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "blinded",
    condition_immunities: "",
    senses: "blindsight 30 ft. or 10 ft. while deafened (blind beyond this radius), passive Perception 13",
    languages: "Undercommon",
    cr: "1/4",
    traits: [
      {
        name: "Blind Senses",
        desc: "The grimlock can't use its blindsight while deafened and unable to smell.",
        attack_bonus: 0
      },
      {
        name: "Keen Hearing and Smell",
        desc: "The grimlock has advantage on Wisdom (Perception) checks that rely on hearing or smell.",
        attack_bonus: 0
      },
      {
        name: "Stone Camouflage",
        desc: "The grimlock has advantage on Dexterity (Stealth) checks made to hide in rocky terrain.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Spiked Bone Club",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 5 (1d4 + 3) bludgeoning damage plus 2 (1d4) piercing damage.",
        attack_bonus: 5,
        damage_dice: "1d4 + 1d4",
        damage_bonus: 5
      }
    ]
  },
  {
    name: "Guard",
    size: "Medium",
    source: "SRD",
    type: "humanoid",
    subtype: "any race",
    alignment: "any alignment",
    ac: 16,
    hp: 11,
    hit_dice: "2d8",
    speed: "30 ft.",
    stats: [13, 12, 12, 10, 11, 10],
    skillsaves: [
      {
        perception: 2
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 12",
    languages: "any one language (usually Common)",
    cr: "1/8",
    actions: [
      {
        name: "Spear",
        desc: "Melee or Ranged Weapon Attack: +3 to hit, reach 5 ft. or range 20/60 ft., one target. Hit: 4 (1d6 + 1) piercing damage or 5 (1d8 + 1) piercing damage if used with two hands to make a melee attack.",
        attack_bonus: 3,
        damage_dice: "1d6",
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Guardian Naga",
    size: "Large",
    source: "SRD",
    type: "monstrosity",
    subtype: "",
    alignment: "lawful good",
    ac: 18,
    hp: 127,
    hit_dice: "15d10",
    speed: "40 ft.",
    stats: [19, 18, 16, 16, 19, 18],
    saves: [
      {
        dexterity: 8
      },
      {
        constitution: 7
      },
      {
        intelligence: 7
      },
      {
        wisdom: 8
      },
      {
        charisma: 8
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "poison",
    condition_immunities: "charmed, poisoned",
    senses: "darkvision 60 ft., passive Perception 14",
    languages: "Celestial, Common",
    cr: "10",
    traits: [
      {
        name: "Rejuvenation",
        desc: "If it dies, the naga returns to life in 1d6 days and regains all its hit points. Only a wish spell can prevent this trait from functioning.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +8 to hit, reach 10 ft., one creature. Hit: 8 (1d8 + 4) piercing damage, and the target must make a DC 15 Constitution saving throw, taking 45 (10d8) poison damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 8,
        damage_dice: "1d8",
        damage_bonus: 4
      },
      {
        name: "Spit Poison",
        desc: "Ranged Weapon Attack: +8 to hit, range 15/30 ft., one creature. Hit: The target must make a DC 15 Constitution saving throw, taking 45 (10d8) poison damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 8,
        damage_dice: "10d8"
      }
    ],
    spells: [
      "The naga is an 11th-level spellcaster. Its spellcasting ability is Wisdom (spell save DC 16, +8 to hit with spell attacks), and it needs only verbal components to cast its spells. It has the following cleric spells prepared:",
      {
        "Cantrips (at will)": "mending, sacred flame, thaumaturgy"
      },
      {
        "1st level (4 slots)": "command, cure wounds, shield of faith"
      },
      {
        "2nd level (3 slots)": "calm emotions, hold person"
      },
      {
        "3rd level (3 slots)": "bestow curse, clairvoyance"
      },
      {
        "4th level (3 slots)": "banishment, freedom of movement"
      },
      {
        "5th level (2 slots)": "flame strike, geas"
      },
      {
        "6th level (1 slot)": "true seeing"
      }
    ]
  },
  {
    name: "Gynosphinx",
    size: "Large",
    source: "SRD",
    type: "monstrosity",
    subtype: "",
    alignment: "lawful neutral",
    ac: 17,
    hp: 136,
    hit_dice: "16d10",
    speed: "40 ft., fly 60 ft.",
    stats: [18, 15, 16, 18, 18, 18],
    skillsaves: [
      {
        arcana: 12
      },
      {
        history: 12
      },
      {
        perception: 8
      },
      {
        religion: 8
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "bludgeoning, piercing, and slashing from nonmagical weapons",
    damage_immunities: "psychic",
    condition_immunities: "charmed, frightened",
    senses: "truesight 120 ft., passive Perception 18",
    languages: "Common, Sphinx",
    cr: "11",
    traits: [
      {
        name: "Inscrutable",
        desc: "The sphinx is immune to any effect that would sense its emotions or read its thoughts, as well as any divination spell that it refuses. Wisdom (Insight) checks made to ascertain the sphinx's intentions or sincerity have disadvantage.",
        attack_bonus: 0
      },
      {
        name: "Magic Weapons",
        desc: "The sphinx's weapon attacks are magical.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The sphinx makes two claw attacks.",
        attack_bonus: 0
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +9 to hit, reach 5 ft., one target. Hit: 13 (2d8 + 4) slashing damage.",
        attack_bonus: 9,
        damage_dice: "2d8",
        damage_bonus: 4
      }
    ],
    legendary_actions: [
      {
        name: "Claw Attack",
        desc: "The sphinx makes one claw attack.",
        attack_bonus: 0
      },
      {
        name: "Teleport (Costs 2 Actions)",
        desc: "The sphinx magically teleports, along with any equipment it is wearing or carrying, up to 120 feet to an unoccupied space it can see.",
        attack_bonus: 0
      },
      {
        name: "Cast a Spell (Costs 3 Actions)",
        desc: "The sphinx casts a spell from its list of prepared spells, using a spell slot as normal.",
        attack_bonus: 0
      }
    ],
    spells: [
      "The sphinx is a 9th-level spellcaster. Its spellcasting ability is Intelligence (spell save DC 16, +8 to hit with spell attacks). It requires no material components to cast its spells. The sphinx has the following wizard spells prepared:",
      {
        "Cantrips (at will)": "mage hand, minor illusion, prestidigitation"
      },
      {
        "1st level (4 slots)": "detect magic, identify, shield"
      },
      {
        "2nd level (3 slots)": "darkness, locate object, suggestion"
      },
      {
        "3rd level (3 slots)": "dispel magic, remove curse, tongues"
      },
      {
        "4th level (3 slots)": "banishment, greater invisibility"
      },
      {
        "5th level (1 slot)": "legend lore"
      }
    ]
  },
  {
    name: "Half-Red Dragon Veteran",
    size: "Medium",
    source: "SRD",
    type: "humanoid",
    subtype: "human",
    alignment: "any alignment",
    ac: 18,
    hp: 65,
    hit_dice: "10d8",
    speed: "30 ft.",
    stats: [16, 13, 14, 10, 11, 10],
    damage_vulnerabilities: "",
    damage_resistances: "fire",
    damage_immunities: "",
    condition_immunities: "",
    senses: "blindsight 10 ft., darkvision 60 ft., passive Perception 12",
    languages: "Common, Draconic",
    cr: "5",
    actions: [
      {
        name: "Multiattack",
        desc: "The veteran makes two longsword attacks. If it has a shortsword drawn, it can also make a shortsword attack.",
        attack_bonus: 0
      },
      {
        name: "Longsword",
        desc: "Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 7 (1d8 + 3) slashing damage, or 8 (1d10 + 3) slashing damage if used with two hands.",
        attack_bonus: 5,
        damage_dice: "1d8",
        damage_bonus: 3
      },
      {
        name: "Shortsword",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 6 (1d6 + 3) piercing damage.",
        attack_bonus: 5,
        damage_dice: "1d6",
        damage_bonus: 3
      },
      {
        name: "Heavy Crossbow",
        desc: "Ranged Weapon Attack: +3 to hit, range 100/400 ft., one target. Hit: 6 (1d10 + 1) piercing damage.",
        attack_bonus: 3,
        damage_dice: "1d10",
        damage_bonus: 1
      },
      {
        name: "Fire Breath (Recharge 5-6)",
        desc: "The veteran exhales fire in a 15-foot cone. Each creature in that area must make a DC 15 Dexterity saving throw, taking 24 (7d6) fire damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "7d6"
      }
    ]
  },
  {
    name: "Harpy",
    size: "Medium",
    source: "SRD",
    type: "monstrosity",
    subtype: "",
    alignment: "chaotic evil",
    ac: 11,
    hp: 38,
    hit_dice: "7d8",
    speed: "20 ft., fly 40 ft.",
    stats: [12, 13, 12, 7, 10, 13],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 10",
    languages: "Common",
    cr: "1",
    actions: [
      {
        name: "Multiattack",
        desc: "The harpy makes two attacks: one with its claws and one with its club.",
        attack_bonus: 0
      },
      {
        name: "Claws",
        desc: "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 6 (2d4 + 1) slashing damage.",
        attack_bonus: 3,
        damage_dice: "2d4",
        damage_bonus: 1
      },
      {
        name: "Club",
        desc: "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 3 (1d4 + 1) bludgeoning damage.",
        attack_bonus: 3,
        damage_dice: "1d4",
        damage_bonus: 1
      },
      {
        name: "Luring Song",
        desc: "The harpy sings a magical melody. Every humanoid and giant within 300 ft. of the harpy that can hear the song must succeed on a DC 11 Wisdom saving throw or be charmed until the song ends. The harpy must take a bonus action on its subsequent turns to continue singing. It can stop singing at any time. The song ends if the harpy is incapacitated.\nWhile charmed by the harpy, a target is incapacitated and ignores the songs of other harpies. If the charmed target is more than 5 ft. away from the harpy, the must move on its turn toward the harpy by the most direct route. It doesn't avoid opportunity attacks, but before moving into damaging terrain, such as lava or a pit, and whenever it takes damage from a source other than the harpy, a target can repeat the saving throw. A creature can also repeat the saving throw at the end of each of its turns. If a creature's saving throw is successful, the effect ends on it.\nA target that successfully saves is immune to this harpy's song for the next 24 hours.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Hawk",
    size: "Tiny",
    source: "SRD",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 13,
    hp: 1,
    hit_dice: "1d4",
    speed: "10 ft., fly 60 ft.",
    stats: [5, 16, 8, 2, 14, 6],
    skillsaves: [
      {
        perception: 4
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 14",
    languages: "",
    cr: "0",
    traits: [
      {
        name: "Keen Sight",
        desc: "The hawk has advantage on Wisdom (Perception) checks that rely on sight.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Talons",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 1 slashing damage.",
        attack_bonus: 5,
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Hell Hound",
    size: "Medium",
    source: "SRD",
    type: "fiend",
    subtype: "",
    alignment: "lawful evil",
    ac: 15,
    hp: 45,
    hit_dice: "7d8",
    speed: "50 ft.",
    stats: [17, 12, 14, 6, 13, 6],
    skillsaves: [
      {
        perception: 5
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "fire",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 15",
    languages: "understands Infernal but can't speak it",
    cr: "3",
    traits: [
      {
        name: "Keen Hearing and Smell",
        desc: "The hound has advantage on Wisdom (Perception) checks that rely on hearing or smell.",
        attack_bonus: 0
      },
      {
        name: "Pack Tactics",
        desc: "The hound has advantage on an attack roll against a creature if at least one of the hound's allies is within 5 ft. of the creature and the ally isn't incapacitated.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 7 (1d8 + 3) piercing damage plus 7 (2d6) fire damage.",
        attack_bonus: 5,
        damage_dice: "1d8",
        damage_bonus: 3
      },
      {
        name: "Fire Breath (Recharge 5-6)",
        desc: "The hound exhales fire in a 15-foot cone. Each creature in that area must make a DC 12 Dexterity saving throw, taking 21 (6d6) fire damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "6d6"
      }
    ]
  },
  {
    name: "Hezrou",
    size: "Large",
    source: "SRD",
    type: "fiend",
    subtype: "demon",
    alignment: "chaotic evil",
    ac: 16,
    hp: 136,
    hit_dice: "13d10",
    speed: "30 ft.",
    stats: [19, 17, 20, 5, 12, 13],
    saves: [
      {
        strength: 7
      },
      {
        constitution: 8
      },
      {
        wisdom: 4
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "cold, fire, lightning; bludgeoning, piercing, and slashing from nonmagical weapons",
    damage_immunities: "poison",
    condition_immunities: "poisoned",
    senses: "darkvision 120 ft., passive Perception 11",
    languages: "Abyssal, telepathy 120 ft.",
    cr: "8",
    traits: [
      {
        name: "Magic Resistance",
        desc: "The hezrou has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      },
      {
        name: "Stench",
        desc: "Any creature that starts its turn within 10 feet of the hezrou must succeed on a DC 14 Constitution saving throw or be poisoned until the start of its next turn. On a successful saving throw, the creature is immune to the hezrou's stench for 24 hours.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The hezrou makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 15 (2d10 + 4) piercing damage.",
        attack_bonus: 7,
        damage_dice: "2d10",
        damage_bonus: 4
      },
      {
        name: "Claws",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 11 (2d6 + 4) slashing damage.",
        attack_bonus: 7,
        damage_dice: "2d6",
        damage_bonus: 4
      },
      {
        name: "Variant: Summon Demon (1/Day)",
        desc: "The demon chooses what to summon and attempts a magical summoning.\nA hezrou has a 30 percent chance of summoning 2d6 dretches or one hezrou.\nA summoned demon appears in an unoccupied space within 60 feet of its summoner, acts as an ally of its summoner, and can't summon other demons. It remains for 1 minute, until it or its summoner dies, or until its summoner dismisses it as an action.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Hill Giant",
    size: "Huge",
    source: "SRD",
    type: "giant",
    subtype: "",
    alignment: "chaotic evil",
    ac: 13,
    hp: 105,
    hit_dice: "10d12",
    speed: "40 ft.",
    stats: [21, 8, 19, 5, 9, 6],
    skillsaves: [
      {
        perception: 2
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 12",
    languages: "Giant",
    cr: "5",
    actions: [
      {
        name: "Multiattack",
        desc: "The giant makes two greatclub attacks.",
        attack_bonus: 0
      },
      {
        name: "Greatclub",
        desc: "Melee Weapon Attack: +8 to hit, reach 10 ft., one target. Hit: 18 (3d8 + 5) bludgeoning damage.",
        attack_bonus: 8,
        damage_dice: "3d8",
        damage_bonus: 5
      },
      {
        name: "Rock",
        desc: "Ranged Weapon Attack: +8 to hit, range 60/240 ft., one target. Hit: 21 (3d10 + 5) bludgeoning damage.",
        attack_bonus: 8,
        damage_dice: "3d10",
        damage_bonus: 5
      }
    ]
  },
  {
    name: "Hippogriff",
    size: "Large",
    source: "SRD",
    type: "monstrosity",
    subtype: "",
    alignment: "unaligned",
    ac: 11,
    hp: 19,
    hit_dice: "3d10",
    speed: "40 ft, fly 60 ft.",
    stats: [17, 13, 13, 2, 12, 8],
    skillsaves: [
      {
        perception: 5
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 15",
    languages: "",
    cr: "1",
    traits: [
      {
        name: "Keen Sight",
        desc: "The hippogriff has advantage on Wisdom (Perception) checks that rely on sight.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The hippogriff makes two attacks: one with its beak and one with its claws.",
        attack_bonus: 0
      },
      {
        name: "Beak",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 8 (1d10 + 3) piercing damage.",
        attack_bonus: 5,
        damage_dice: "1d10",
        damage_bonus: 3
      },
      {
        name: "Claws",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 10 (2d6 + 3) slashing damage.",
        attack_bonus: 5,
        damage_dice: "2d6",
        damage_bonus: 3
      }
    ]
  },
  {
    name: "Hobgoblin",
    size: "Medium",
    source: "SRD",
    type: "humanoid",
    subtype: "goblinoid",
    alignment: "lawful evil",
    ac: 18,
    hp: 11,
    hit_dice: "2d8",
    speed: "30 ft.",
    stats: [13, 12, 12, 10, 10, 9],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 10",
    languages: "Common, Goblin",
    cr: "1/2",
    traits: [
      {
        name: "Martial Advantage",
        desc: "Once per turn, the hobgoblin can deal an extra 7 (2d6) damage to a creature it hits with a weapon attack if that creature is within 5 ft. of an ally of the hobgoblin that isn't incapacitated.",
        attack_bonus: 0,
        damage_dice: "2d6"
      }
    ],
    actions: [
      {
        name: "Longsword",
        desc: "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 5 (1d8 + 1) slashing damage, or 6 (1d10 + 1) slashing damage if used with two hands.",
        attack_bonus: 3,
        damage_dice: "1d8",
        damage_bonus: 1
      },
      {
        name: "Longbow",
        desc: "Ranged Weapon Attack: +3 to hit, range 150/600 ft., one target. Hit: 5 (1d8 + 1) piercing damage.",
        attack_bonus: 3,
        damage_dice: "1d8",
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Homunculus",
    size: "Tiny",
    source: "SRD",
    type: "construct",
    subtype: "",
    alignment: "neutral",
    ac: 13,
    hp: 5,
    hit_dice: "2d4",
    speed: "20 ft., fly 40 ft.",
    stats: [4, 15, 11, 10, 10, 7],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "poison",
    condition_immunities: "charmed, poisoned",
    senses: "darkvision 60 ft., passive Perception 10",
    languages: "understands the languages of its creator but can't speak",
    cr: "0",
    traits: [
      {
        name: "Telepathic Bond",
        desc: "While the homunculus is on the same plane of existence as its master, it can magically convey what it senses to its master, and the two can communicate telepathically.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one creature. Hit: 1 piercing damage, and the target must succeed on a DC 10 Constitution saving throw or be poisoned for 1 minute. If the saving throw fails by 5 or more, the target is instead poisoned for 5 (1d10) minutes and unconscious while poisoned in this way.",
        attack_bonus: 4,
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Horned Devil",
    size: "Large",
    source: "SRD",
    type: "fiend",
    subtype: "devil",
    alignment: "lawful evil",
    ac: 18,
    hp: 148,
    hit_dice: "17d10",
    speed: "20 ft., fly 60 ft.",
    stats: [22, 17, 21, 12, 16, 17],
    saves: [
      {
        strength: 10
      },
      {
        dexterity: 7
      },
      {
        wisdom: 7
      },
      {
        charisma: 7
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "cold; bludgeoning, piercing, and slashing from nonmagical weapons that aren't silvered",
    damage_immunities: "fire, poison",
    condition_immunities: "poisoned",
    senses: "darkvision 120 ft., passive Perception 13",
    languages: "Infernal, telepathy 120 ft.",
    cr: "11",
    traits: [
      {
        name: "Devil's Sight",
        desc: "Magical darkness doesn't impede the devil's darkvision.",
        attack_bonus: 0
      },
      {
        name: "Magic Resistance",
        desc: "The devil has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The devil makes three melee attacks: two with its fork and one with its tail. It can use Hurl Flame in place of any melee attack.",
        attack_bonus: 0
      },
      {
        name: "Fork",
        desc: "Melee Weapon Attack: +10 to hit, reach 10 ft., one target. Hit: 15 (2d8 + 6) piercing damage.",
        attack_bonus: 10,
        damage_dice: "2d8",
        damage_bonus: 6
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +10 to hit, reach 10 ft., one target. Hit: 10 (1d8 + 6) piercing damage. If the target is a creature other than an undead or a construct, it must succeed on a DC 17 Constitution saving throw or lose 10 (3d6) hit points at the start of each of its turns due to an infernal wound. Each time the devil hits the wounded target with this attack, the damage dealt by the wound increases by 10 (3d6). Any creature can take an action to stanch the wound with a successful DC 12 Wisdom (Medicine) check. The wound also closes if the target receives magical healing.",
        attack_bonus: 10,
        damage_dice: "1d8",
        damage_bonus: 6
      },
      {
        name: "Hurl Flame",
        desc: "Ranged Spell Attack: +7 to hit, range 150 ft., one target. Hit: 14 (4d6) fire damage. If the target is a flammable object that isn't being worn or carried, it also catches fire.",
        attack_bonus: 7,
        damage_dice: "4d6"
      }
    ]
  },
  {
    name: "Hunter Shark",
    size: "Large",
    source: "SRD",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 45,
    hit_dice: "6d10",
    speed: "swim 40 ft.",
    stats: [18, 13, 15, 1, 10, 4],
    skillsaves: [
      {
        perception: 2
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 30 ft., passive Perception 12",
    languages: "",
    cr: "2",
    traits: [
      {
        name: "Blood Frenzy",
        desc: "The shark has advantage on melee attack rolls against any creature that doesn't have all its hit points.",
        attack_bonus: 0
      },
      {
        name: "Water Breathing",
        desc: "The shark can breathe only underwater.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 13 (2d8 + 4) piercing damage.",
        attack_bonus: 6,
        damage_dice: "2d8",
        damage_bonus: 4
      }
    ]
  },
  {
    name: "Hydra",
    size: "Huge",
    source: "SRD",
    type: "monstrosity",
    subtype: "",
    alignment: "unaligned",
    ac: 15,
    hp: 172,
    hit_dice: "15d12",
    speed: "30 ft., swim 30 ft.",
    stats: [20, 12, 20, 2, 10, 7],
    skillsaves: [
      {
        perception: 6
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 16",
    languages: "",
    cr: "8",
    traits: [
      {
        name: "Hold Breath",
        desc: "The hydra can hold its breath for 1 hour.",
        attack_bonus: 0
      },
      {
        name: "Multiple Heads",
        desc: "The hydra has five heads. While it has more than one head, the hydra has advantage on saving throws against being blinded, charmed, deafened, frightened, stunned, and knocked unconscious.\nWhenever the hydra takes 25 or more damage in a single turn, one of its heads dies. If all its heads die, the hydra dies.\nAt the end of its turn, it grows two heads for each of its heads that died since its last turn, unless it has taken fire damage since its last turn. The hydra regains 10 hit points for each head regrown in this way.",
        attack_bonus: 0
      },
      {
        name: "Reactive Heads",
        desc: "For each head the hydra has beyond one, it gets an extra reaction that can be used only for opportunity attacks.",
        attack_bonus: 0
      },
      {
        name: "Wakeful",
        desc: "While the hydra sleeps, at least one of its heads is awake.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The hydra makes as many bite attacks as it has heads.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +8 to hit, reach 10 ft., one target. Hit: 10 (1d10 + 5) piercing damage.",
        attack_bonus: 8,
        damage_dice: "1d10",
        damage_bonus: 5
      }
    ]
  },
  {
    name: "Hyena",
    size: "Medium",
    source: "SRD",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 11,
    hp: 5,
    hit_dice: "1d8",
    speed: "50 ft.",
    stats: [11, 13, 12, 2, 12, 5],
    skillsaves: [
      {
        perception: 3
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 13",
    languages: "",
    cr: "0",
    traits: [
      {
        name: "Pack Tactics",
        desc: "The hyena has advantage on an attack roll against a creature if at least one of the hyena's allies is within 5 ft. of the creature and the ally isn't incapacitated.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Weapon Attack: +2 to hit, reach 5 ft., one target. Hit: 3 (1d6) piercing damage.",
        attack_bonus: 2,
        damage_dice: "1d6"
      }
    ]
  },
  {
    name: "Ice Devil",
    size: "Large",
    source: "SRD",
    type: "fiend",
    subtype: "devil",
    alignment: "lawful evil",
    ac: 18,
    hp: 180,
    hit_dice: "19d10",
    speed: "40 ft.",
    stats: [21, 14, 18, 18, 15, 18],
    saves: [
      {
        dexterity: 7
      },
      {
        constitution: 9
      },
      {
        wisdom: 7
      },
      {
        charisma: 9
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "bludgeoning, piercing, and slashing from nonmagical weapons that aren't silvered",
    damage_immunities: "fire, poison",
    condition_immunities: "poisoned",
    senses: "blindsight 60 ft., darkvision 120 ft., passive Perception 12",
    languages: "Infernal, telepathy 120 ft.",
    cr: "14",
    traits: [
      {
        name: "Devil's Sight",
        desc: "Magical darkness doesn't impede the devil's darkvision.",
        attack_bonus: 0
      },
      {
        name: "Magic Resistance",
        desc: "The devil has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The devil makes three attacks: one with its bite, one with its claws, and one with its tail.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +10 to hit, reach 5 ft., one target. Hit: 12 (2d6 + 5) piercing damage plus 10 (3d6) cold damage.",
        attack_bonus: 10,
        damage_dice: "2d6 + 3d6",
        damage_bonus: 5
      },
      {
        name: "Claws",
        desc: "Melee Weapon Attack: +10 to hit, reach 5 ft., one target. Hit: 10 (2d4 + 5) slashing damage plus 10 (3d6) cold damage.",
        attack_bonus: 10,
        damage_dice: "2d4 + 3d6",
        damage_bonus: 5
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack:+10 to hit, reach 10 ft., one target. Hit: 12 (2d6 + 5) bludgeoning damage plus 10 (3d6) cold damage.",
        attack_bonus: 10,
        damage_dice: "2d6 + 3d6",
        damage_bonus: 5
      },
      {
        name: "Wall of Ice",
        desc: "The devil magically forms an opaque wall of ice on a solid surface it can see within 60 feet of it. The wall is 1 foot thick and up to 30 feet long and 10 feet high, or it's a hemispherical dome up to 20 feet in diameter.\nWhen the wall appears, each creature in its space is pushed out of it by the shortest route. The creature chooses which side of the wall to end up on, unless the creature is incapacitated. The creature then makes a DC 17 Dexterity saving throw, taking 35 (10d6) cold damage on a failed save, or half as much damage on a successful one.\nThe wall lasts for 1 minute or until the devil is incapacitated or dies. The wall can be damaged and breached; each 10-foot section has AC 5, 30 hit points, vulnerability to fire damage, and immunity to acid, cold, necrotic, poison, and psychic damage. If a section is destroyed, it leaves behind a sheet of frigid air in the space the wall occupied. Whenever a creature finishes moving through the frigid air on a turn, willingly or otherwise, the creature must make a DC 17 Constitution saving throw, taking 17 (5d6) cold damage on a failed save, or half as much damage on a successful one. The frigid air dissipates when the rest of the wall vanishes.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Ice Mephit",
    size: "Small",
    source: "SRD",
    type: "elemental",
    subtype: "",
    alignment: "neutral evil",
    ac: 11,
    hp: 21,
    hit_dice: "6d6",
    speed: "30 ft., fly 30 ft.",
    stats: [7, 13, 10, 9, 11, 12],
    skillsaves: [
      {
        perception: 2
      },
      {
        stealth: 3
      }
    ],
    damage_vulnerabilities: "bludgeoning, fire",
    damage_resistances: "",
    damage_immunities: "cold, poison",
    condition_immunities: "poisoned",
    senses: "darkvision 60 ft., passive Perception 12",
    languages: "Aquan, Auran",
    cr: "1/2",
    traits: [
      {
        name: "Death Burst",
        desc: "When the mephit dies, it explodes in a burst of jagged ice. Each creature within 5 ft. of it must make a DC 10 Dexterity saving throw, taking 4 (1d8) slashing damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "1d8"
      },
      {
        name: "False Appearance",
        desc: "While the mephit remains motionless, it is indistinguishable from an ordinary shard of ice.",
        attack_bonus: 0
      },
      {
        name: "Innate Spellcasting (1/Day)",
        desc: "The mephit can innately cast fog cloud, requiring no material components. Its innate spellcasting ability is Charisma.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Claws",
        desc: "Melee Weapon Attack: +3 to hit, reach 5 ft., one creature. Hit: 3 (1d4 + 1) slashing damage plus 2 (1d4) cold damage.",
        attack_bonus: 3,
        damage_dice: "1d4",
        damage_bonus: 1
      },
      {
        name: "Frost Breath (Recharge 6)",
        desc: "The mephit exhales a 15-foot cone of cold air. Each creature in that area must succeed on a DC 10 Dexterity saving throw, taking 5 (2d4) cold damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0
      },
      {
        name: "Variant: Summon Mephits (1/Day)",
        desc: "The mephit has a 25 percent chance of summoning 1d4 mephits of its kind. A summoned mephit appears in an unoccupied space within 60 feet of its summoner, acts as an ally of its summoner, and can't summon other mephits. It remains for 1 minute, until it or its summoner dies, or until its summoner dismisses it as an action.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Imp",
    size: "Tiny",
    source: "SRD",
    type: "fiend",
    subtype: "devil",
    alignment: "lawful evil",
    ac: 13,
    hp: 10,
    hit_dice: "3d4",
    speed: "20 ft., fly 40 ft.",
    stats: [6, 17, 13, 11, 12, 14],
    skillsaves: [
      {
        deception: 4
      },
      {
        insight: 3
      },
      {
        persuasion: 4
      },
      {
        stealth: 5
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "cold; bludgeoning, piercing, and slashing from nonmagical/nonsilver weapons",
    damage_immunities: "fire, poison",
    condition_immunities: "poisoned",
    senses: "darkvision 120 ft., passive Perception 11",
    languages: "Infernal, Common",
    cr: "1",
    traits: [
      {
        name: "Shapechanger",
        desc: "The imp can use its action to polymorph into a beast form that resembles a rat (speed 20 ft.), a raven (20 ft., fly 60 ft.), or a spider (20 ft., climb 20 ft.), or back into its true form. Its statistics are the same in each form, except for the speed changes noted. Any equipment it is wearing or carrying isn't transformed. It reverts to its true form if it dies.",
        attack_bonus: 0
      },
      {
        name: "Devil's Sight",
        desc: "Magical darkness doesn't impede the imp's darkvision.",
        attack_bonus: 0
      },
      {
        name: "Magic Resistance",
        desc: "The imp has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      },
      {
        name: "Variant: Familiar",
        desc: "The imp can serve another creature as a familiar, forming a telepathic bond with its willing master. While the two are bonded, the master can sense what the quasit senses as long as they are within 1 mile of each other. While the imp is within 10 feet of its master, the master shares the quasit's Magic Resistance trait. At any time and for any reason, the imp can end its service as a familiar, ending the telepathic bond.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Sting (Bite in Beast Form)",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft ., one target. Hit: 5 (1d4 + 3) piercing damage, and the target must make on a DC 11 Constitution saving throw, taking 10 (3d6) poison damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 5,
        damage_dice: "1d4",
        damage_bonus: 3
      },
      {
        name: "Invisibility",
        desc: "The imp magically turns invisible until it attacks, or until its concentration ends (as if concentrating on a spell). Any equipment the imp wears or carries is invisible with it.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Invisible Stalker",
    size: "Medium",
    source: "SRD",
    type: "elemental",
    subtype: "",
    alignment: "neutral",
    ac: 14,
    hp: 104,
    hit_dice: "16d8",
    speed: "50 ft., fly 50 ft. (hover)",
    stats: [16, 19, 14, 10, 15, 11],
    skillsaves: [
      {
        perception: 8
      },
      {
        stealth: 10
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "bludgeoning, piercing, and slashing from nonmagical weapons",
    damage_immunities: "poison",
    condition_immunities: "exhaustion, grappled, paralyzed, petrified, poisoned, prone, restrained, unconscious",
    senses: "darkvision 60 ft., passive Perception 18",
    languages: "Auran, understands Common but doesn't speak it",
    cr: "6",
    traits: [
      {
        name: "Invisibility",
        desc: "The stalker is invisible.",
        attack_bonus: 0
      },
      {
        name: "Faultless Tracker",
        desc: "The stalker is given a quarry by its summoner. The stalker knows the direction and distance to its quarry as long as the two of them are on the same plane of existence. The stalker also knows the location of its summoner.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The stalker makes two slam attacks.",
        attack_bonus: 0
      },
      {
        name: "Slam",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 10 (2d6 + 3) bludgeoning damage.",
        attack_bonus: 6,
        damage_dice: "2d6",
        damage_bonus: 3
      }
    ]
  },
  {
    name: "Iron Golem",
    size: "Large",
    source: "SRD",
    type: "construct",
    subtype: "",
    alignment: "unaligned",
    ac: 20,
    hp: 210,
    hit_dice: "20d10",
    speed: "30 ft.",
    stats: [24, 9, 20, 3, 11, 1],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "fire, poison, psychic; bludgeoning, piercing, and slashing from nonmagical weapons that aren't adamantine",
    condition_immunities: "charmed, exhaustion, frightened, paralyzed, petrified, poisoned",
    senses: "darkvision 120 ft., passive Perception 10",
    languages: "understands the languages of its creator but can't speak",
    cr: "16",
    traits: [
      {
        name: "Fire Absorption",
        desc: "Whenever the golem is subjected to fire damage, it takes no damage and instead regains a number of hit points equal to the fire damage dealt.",
        attack_bonus: 0
      },
      {
        name: "Immutable Form",
        desc: "The golem is immune to any spell or effect that would alter its form.",
        attack_bonus: 0
      },
      {
        name: "Magic Resistance",
        desc: "The golem has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      },
      {
        name: "Magic Weapons",
        desc: "The golem's weapon attacks are magical.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The golem makes two melee attacks.",
        attack_bonus: 0
      },
      {
        name: "Slam",
        desc: "Melee Weapon Attack: +13 to hit, reach 5 ft., one target. Hit: 20 (3d8 + 7) bludgeoning damage.",
        attack_bonus: 13,
        damage_dice: "3d8",
        damage_bonus: 7
      },
      {
        name: "Sword",
        desc: "Melee Weapon Attack: +13 to hit, reach 10 ft., one target. Hit: 23 (3d10 + 7) slashing damage.",
        attack_bonus: 13,
        damage_dice: "3d10",
        damage_bonus: 7
      },
      {
        name: "Poison Breath (Recharge 5-6)",
        desc: "The golem exhales poisonous gas in a 15-foot cone. Each creature in that area must make a DC 19 Constitution saving throw, taking 45 (l0d8) poison damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "10d8"
      }
    ]
  },
  {
    name: "Jackal",
    size: "Small",
    source: "SRD",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 3,
    hit_dice: "1d6",
    speed: "40 ft.",
    stats: [8, 15, 11, 3, 12, 6],
    skillsaves: [
      {
        perception: 3
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 13",
    languages: "",
    cr: "0",
    traits: [
      {
        name: "Keen Hearing and Smell",
        desc: "The jackal has advantage on Wisdom (Perception) checks that rely on hearing or smell.",
        attack_bonus: 0
      },
      {
        name: "Pack Tactics",
        desc: "The jackal has advantage on an attack roll against a creature if at least one of the jackal's allies is within 5 ft. of the creature and the ally isn't incapacitated.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +1 to hit, reach 5 ft., one target. Hit: 1 (1d4 \u2014 1) piercing damage.",
        attack_bonus: 1,
        damage_dice: "1d4",
        damage_bonus: -1
      }
    ]
  },
  {
    name: "Killer Whale",
    size: "Huge",
    source: "SRD",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 90,
    hit_dice: "12d12",
    speed: "swim 60 ft.",
    stats: [19, 10, 13, 3, 12, 7],
    skillsaves: [
      {
        perception: 3
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "blindsight 120 ft., passive Perception 13",
    languages: "",
    cr: "3",
    traits: [
      {
        name: "Echolocation",
        desc: "The whale can't use its blindsight while deafened.",
        attack_bonus: 0
      },
      {
        name: "Hold Breath",
        desc: "The whale can hold its breath for 30 minutes",
        attack_bonus: 0
      },
      {
        name: "Keen Hearing",
        desc: "The whale has advantage on Wisdom (Perception) checks that rely on hearing.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 21 (5d6 + 4) piercing damage.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Knight",
    size: "Medium",
    source: "SRD",
    type: "humanoid",
    subtype: "any race",
    alignment: "any alignment",
    ac: 18,
    hp: 52,
    hit_dice: "8d8",
    speed: "30 ft.",
    stats: [16, 11, 14, 11, 11, 15],
    saves: [
      {
        constitution: 4
      },
      {
        wisdom: 2
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 10",
    languages: "any one language (usually Common)",
    cr: "3",
    traits: [
      {
        name: "Brave",
        desc: "The knight has advantage on saving throws against being frightened.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The knight makes two melee attacks.",
        attack_bonus: 0
      },
      {
        name: "Greatsword",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 10 (2d6 + 3) slashing damage.",
        attack_bonus: 5,
        damage_dice: "2d6",
        damage_bonus: 3
      },
      {
        name: "Heavy Crossbow",
        desc: "Ranged Weapon Attack: +2 to hit, range 100/400 ft., one target. Hit: 5 (1d10) piercing damage.",
        attack_bonus: 2,
        damage_dice: "1d10"
      },
      {
        name: "Leadership (Recharges after a Short or Long Rest)",
        desc: "For 1 minute, the knight can utter a special command or warning whenever a nonhostile creature that it can see within 30 ft. of it makes an attack roll or a saving throw. The creature can add a d4 to its roll provided it can hear and understand the knight. A creature can benefit from only one Leadership die at a time. This effect ends if the knight is incapacitated.",
        attack_bonus: 0
      }
    ],
    reactions: [
      {
        name: "Parry",
        desc: "The knight adds 2 to its AC against one melee attack that would hit it. To do so, the knight must see the attacker and be wielding a melee weapon.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Kobold",
    size: "Small",
    source: "SRD",
    type: "humanoid",
    subtype: "kobold",
    alignment: "lawful evil",
    ac: 12,
    hp: 5,
    hit_dice: "2d6",
    speed: "30 ft.",
    stats: [7, 15, 9, 8, 7, 8],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 8",
    languages: "Common, Draconic",
    cr: "1/8",
    traits: [
      {
        name: "Sunlight Sensitivity",
        desc: "While in sunlight, the kobold has disadvantage on attack rolls, as well as on Wisdom (Perception) checks that rely on sight.",
        attack_bonus: 0
      },
      {
        name: "Pack Tactics",
        desc: "The kobold has advantage on an attack roll against a creature if at least one of the kobold's allies is within 5 ft. of the creature and the ally isn't incapacitated.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Dagger",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 4 (1d4 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d4",
        damage_bonus: 2
      },
      {
        name: "Sling",
        desc: "Ranged Weapon Attack: +4 to hit, range 30/120 ft., one target. Hit: 4 (1d4 + 2) bludgeoning damage.",
        attack_bonus: 4,
        damage_dice: "1d4",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Kraken",
    size: "Gargantuan",
    source: "SRD",
    type: "monstrosity",
    subtype: "titan",
    alignment: "chaotic evil",
    ac: 18,
    hp: 472,
    hit_dice: "27d20",
    speed: "20 ft., swim 60 ft.",
    stats: [30, 11, 25, 22, 18, 20],
    saves: [
      {
        strength: 17
      },
      {
        dexterity: 7
      },
      {
        constitution: 14
      },
      {
        intelligence: 13
      },
      {
        wisdom: 11
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "lightning; bludgeoning, piercing, and slashing from nonmagical weapons",
    condition_immunities: "frightened, paralyzed",
    senses: "truesight 120 ft., passive Perception 14",
    languages: "understands Abyssal, Celestial, Infernal, and Primordial but can't speak, telepathy 120 ft.",
    cr: "23",
    traits: [
      {
        name: "Amphibious",
        desc: "The kraken can breathe air and water.",
        attack_bonus: 0
      },
      {
        name: "Freedom of Movement",
        desc: "The kraken ignores difficult terrain, and magical effects can't reduce its speed or cause it to be restrained. It can spend 5 feet of movement to escape from nonmagical restraints or being grappled.",
        attack_bonus: 0
      },
      {
        name: "Siege Monster",
        desc: "The kraken deals double damage to objects and structures.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The kraken makes three tentacle attacks, each of which it can replace with one use of Fling.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 23 (3d8 + 10) piercing damage. If the target is a Large or smaller creature grappled by the kraken, that creature is swallowed, and the grapple ends. While swallowed, the creature is blinded and restrained, it has total cover against attacks and other effects outside the kraken, and it takes 42 (12d6) acid damage at the start of each of the kraken's turns. If the kraken takes 50 damage or more on a single turn from a creature inside it, the kraken must succeed on a DC 25 Constitution saving throw at the end of that turn or regurgitate all swallowed creatures, which fall prone in a space within 10 feet of the kraken. If the kraken dies, a swallowed creature is no longer restrained by it and can escape from the corpse using 15 feet of movement, exiting prone.",
        attack_bonus: 7,
        damage_dice: "3d8",
        damage_bonus: 10
      },
      {
        name: "Tentacle",
        desc: "Melee Weapon Attack: +7 to hit, reach 30 ft., one target. Hit: 20 (3d6 + 10) bludgeoning damage, and the target is grappled (escape DC 18). Until this grapple ends, the target is restrained. The kraken has ten tentacles, each of which can grapple one target.",
        attack_bonus: 7,
        damage_dice: "3d6",
        damage_bonus: 10
      },
      {
        name: "Fling",
        desc: "One Large or smaller object held or creature grappled by the kraken is thrown up to 60 feet in a random direction and knocked prone. If a thrown target strikes a solid surface, the target takes 3 (1d6) bludgeoning damage for every 10 feet it was thrown. If the target is thrown at another creature, that creature must succeed on a DC 18 Dexterity saving throw or take the same damage and be knocked prone.",
        attack_bonus: 0
      },
      {
        name: "Lightning Storm",
        desc: "The kraken magically creates three bolts of lightning, each of which can strike a target the kraken can see within 120 feet of it. A target must make a DC 23 Dexterity saving throw, taking 22 (4d10) lightning damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "4d10"
      }
    ],
    legendary_actions: [
      {
        name: "Tentacle Attack or Fling",
        desc: "The kraken makes one tentacle attack or uses its Fling.",
        attack_bonus: 0
      },
      {
        name: "Lightning Storm (Costs 2 Actions)",
        desc: "The kraken uses Lightning Storm.",
        attack_bonus: 0
      },
      {
        name: "Ink Cloud (Costs 3 Actions)",
        desc: "While underwater, the kraken expels an ink cloud in a 60-foot radius. The cloud spreads around corners, and that area is heavily obscured to creatures other than the kraken. Each creature other than the kraken that ends its turn there must succeed on a DC 23 Constitution saving throw, taking 16 (3d10) poison damage on a failed save, or half as much damage on a successful one. A strong current disperses the cloud, which otherwise disappears at the end of the kraken's next turn.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Lamia",
    size: "Large",
    source: "SRD",
    type: "monstrosity",
    subtype: "",
    alignment: "chaotic evil",
    ac: 13,
    hp: 97,
    hit_dice: "13d10",
    speed: "30 ft.",
    stats: [16, 13, 15, 14, 15, 16],
    skillsaves: [
      {
        deception: 7
      },
      {
        insight: 4
      },
      {
        stealth: 3
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 12",
    languages: "Abyssal, Common",
    cr: "4",
    traits: [
      {
        name: "Innate Spellcasting",
        desc: "The lamia's innate spellcasting ability is Charisma (spell save DC 13). It can innately cast the following spells, requiring no material components. At will: disguise self (any humanoid form), major image 3/day each: charm person, mirror image, scrying, suggestion 1/day: geas",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The lamia makes two attacks: one with its claws and one with its dagger or Intoxicating Touch.",
        attack_bonus: 0
      },
      {
        name: "Claws",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 14 (2d10 + 3) slashing damage.",
        attack_bonus: 5,
        damage_dice: "2d10",
        damage_bonus: 3
      },
      {
        name: "Dagger",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 5 (1d4 + 3) piercing damage.",
        attack_bonus: 5,
        damage_dice: "1d4",
        damage_bonus: 3
      },
      {
        name: "Intoxicating Touch",
        desc: "Melee Spell Attack: +5 to hit, reach 5 ft., one creature. Hit: The target is magically cursed for 1 hour. Until the curse ends, the target has disadvantage on Wisdom saving throws and all ability checks.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Lemure",
    size: "Medium",
    source: "SRD",
    type: "fiend",
    subtype: "devil",
    alignment: "lawful evil",
    ac: 7,
    hp: 13,
    hit_dice: "3d8",
    speed: "15 ft.",
    stats: [10, 5, 11, 1, 11, 3],
    damage_vulnerabilities: "",
    damage_resistances: "cold",
    damage_immunities: "fire, poison",
    condition_immunities: "charmed, frightened, poisoned",
    senses: "darkvision 120 ft., passive Perception 10",
    languages: "understands infernal but can't speak",
    cr: "0",
    traits: [
      {
        name: "Devil's Sight",
        desc: "Magical darkness doesn't impede the lemure's darkvision.",
        attack_bonus: 0
      },
      {
        name: "Hellish Rejuvenation",
        desc: "A lemure that dies in the Nine Hells comes back to life with all its hit points in 1d10 days unless it is killed by a good-aligned creature with a bless spell cast on that creature or its remains are sprinkled with holy water.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Fist",
        desc: "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 2 (1d4) bludgeoning damage",
        attack_bonus: 3,
        damage_dice: "1d4"
      }
    ]
  },
  {
    name: "Lich",
    size: "Medium",
    source: "SRD",
    type: "undead",
    subtype: "",
    alignment: "any evil alignment",
    ac: 17,
    hp: 135,
    hit_dice: "18d8",
    speed: "30 ft.",
    stats: [11, 16, 16, 20, 14, 16],
    saves: [
      {
        constitution: 10
      },
      {
        intelligence: 12
      },
      {
        wisdom: 9
      }
    ],
    skillsaves: [
      {
        arcana: 18
      },
      {
        history: 12
      },
      {
        insight: 9
      },
      {
        perception: 9
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "cold, lightning, necrotic",
    damage_immunities: "poison; bludgeoning, piercing, and slashing from nonmagical weapons",
    condition_immunities: "charmed, exhaustion, frightened, paralyzed, poisoned",
    senses: "truesight 120 ft., passive Perception 19",
    languages: "Common plus up to five other languages",
    cr: "21",
    traits: [
      {
        name: "Legendary Resistance (3/Day)",
        desc: "If the lich fails a saving throw, it can choose to succeed instead.",
        attack_bonus: 0
      },
      {
        name: "Rejuvenation",
        desc: "If it has a phylactery, a destroyed lich gains a new body in 1d10 days, regaining all its hit points and becoming active again. The new body appears within 5 feet of the phylactery.",
        attack_bonus: 0
      },
      {
        name: "Turn Resistance",
        desc: "The lich has advantage on saving throws against any effect that turns undead.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Paralyzing Touch",
        desc: "Melee Spell Attack: +12 to hit, reach 5 ft., one creature. Hit: 10 (3d6) cold damage. The target must succeed on a DC 18 Constitution saving throw or be paralyzed for 1 minute. The target can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success.",
        attack_bonus: 12,
        damage_dice: "3d6"
      }
    ],
    legendary_actions: [
      {
        name: "Cantrip",
        desc: "The lich casts a cantrip.",
        attack_bonus: 0
      },
      {
        name: "Paralyzing Touch (Costs 2 Actions)",
        desc: "The lich uses its Paralyzing Touch.",
        attack_bonus: 0
      },
      {
        name: "Frightening Gaze (Costs 2 Actions)",
        desc: "The lich fixes its gaze on one creature it can see within 10 feet of it. The target must succeed on a DC 18 Wisdom saving throw against this magic or become frightened for 1 minute. The frightened target can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a target's saving throw is successful or the effect ends for it, the target is immune to the lich's gaze for the next 24 hours.",
        attack_bonus: 0
      },
      {
        name: "Disrupt Life (Costs 3 Actions)",
        desc: "Each living creature within 20 feet of the lich must make a DC 18 Constitution saving throw against this magic, taking 21 (6d6) necrotic damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "6d6"
      }
    ],
    spells: [
      "The lich is an 18th-level spellcaster. Its spellcasting ability is Intelligence (spell save DC 20, +12 to hit with spell attacks). The lich has the following wizard spells prepared:",
      {
        "Cantrips (at will)": "mage hand, prestidigitation, ray of frost"
      },
      {
        "1st level (4 slots)": "detect magic, magic missile, shield, thunderwave"
      },
      {
        "2nd level (3 slots)": "detect thoughts, invisibility, Melf's acid arrow, mirror image"
      },
      {
        "3rd level (3 slots)": "animate dead, counterspell, dispel magic, fireball"
      },
      {
        "4th level (3 slots)": "blight, dimension door"
      },
      {
        "5th level (3 slots)": "cloudkill, scrying"
      },
      {
        "6th level (1 slot)": "disintegrate, globe of invulnerability"
      },
      {
        "7th level (1 slot)": "finger of death, plane shift"
      },
      {
        "8th level (1 slot)": "dominate monster, power word stun"
      },
      {
        "9th level (1 slot)": "power word kill"
      }
    ]
  },
  {
    name: "Lion",
    size: "Large",
    source: "SRD",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 26,
    hit_dice: "4d10",
    speed: "50 ft.",
    stats: [17, 15, 13, 3, 12, 8],
    skillsaves: [
      {
        perception: 3
      },
      {
        stealth: 6
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 13",
    languages: "",
    cr: "1",
    traits: [
      {
        name: "Keen Smell",
        desc: "The lion has advantage on Wisdom (Perception) checks that rely on smell.",
        attack_bonus: 0
      },
      {
        name: "Pack Tactics",
        desc: "The lion has advantage on an attack roll against a creature if at least one of the lion's allies is within 5 ft. of the creature and the ally isn't incapacitated.",
        attack_bonus: 0
      },
      {
        name: "Pounce",
        desc: "If the lion moves at least 20 ft. straight toward a creature and then hits it with a claw attack on the same turn, that target must succeed on a DC 13 Strength saving throw or be knocked prone. If the target is prone, the lion can make one bite attack against it as a bonus action.",
        attack_bonus: 0
      },
      {
        name: "Running Leap",
        desc: "With a 10-foot running start, the lion can long jump up to 25 ft..",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 7 (1d8 + 3) piercing damage.",
        attack_bonus: 5,
        damage_dice: "1d8",
        damage_bonus: 3
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 6 (1d6 + 3) slashing damage.",
        attack_bonus: 5,
        damage_dice: "1d6",
        damage_bonus: 3
      }
    ]
  },
  {
    name: "Lizard",
    size: "Tiny",
    source: "SRD",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 10,
    hp: 2,
    hit_dice: "1d4",
    speed: "20 ft., climb 20 ft.",
    stats: [2, 11, 10, 1, 8, 3],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 30 ft., passive Perception 9",
    languages: "",
    cr: "0",
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +0 to hit, reach 5 ft., one target. Hit: 1 piercing damage.",
        attack_bonus: 0,
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Lizardfolk",
    size: "Medium",
    source: "SRD",
    type: "humanoid",
    subtype: "lizardfolk",
    alignment: "neutral",
    ac: 15,
    hp: 22,
    hit_dice: "4d8",
    speed: "30 ft., swim 30 ft.",
    stats: [15, 10, 13, 7, 12, 7],
    skillsaves: [
      {
        perception: 3
      },
      {
        stealth: 4
      },
      {
        survival: 5
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 13",
    languages: "Draconic",
    cr: "1/2",
    traits: [
      {
        name: "Hold Breath",
        desc: "The lizardfolk can hold its breath for 15 minutes.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The lizardfolk makes two melee attacks, each one with a different weapon.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 5 (1d6 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d6",
        damage_bonus: 2
      },
      {
        name: "Heavy Club",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 5 (1d6 + 2) bludgeoning damage.",
        attack_bonus: 4,
        damage_dice: "1d6",
        damage_bonus: 2
      },
      {
        name: "Javelin",
        desc: "Melee or Ranged Weapon Attack: +4 to hit, reach 5 ft. or range 30/120 ft., one target. Hit: 5 (1d6 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d6",
        damage_bonus: 2
      },
      {
        name: "Spiked Shield",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 5 (1d6 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d6",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Mage",
    size: "Medium",
    source: "SRD",
    type: "humanoid",
    subtype: "any race",
    alignment: "any alignment",
    ac: 12,
    hp: 40,
    hit_dice: "9d8",
    speed: "30 ft.",
    stats: [9, 14, 11, 17, 12, 11],
    saves: [
      {
        intelligence: 6
      },
      {
        wisdom: 4
      }
    ],
    skillsaves: [
      {
        arcana: 6
      },
      {
        history: 6
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 11",
    languages: "any four languages",
    cr: "6",
    traits: [],
    actions: [
      {
        name: "Dagger",
        desc: "Melee or Ranged Weapon Attack: +5 to hit, reach 5 ft. or range 20/60 ft., one target. Hit: 4 (1d4 + 2) piercing damage.",
        attack_bonus: 5,
        damage_dice: "1d4",
        damage_bonus: 2
      }
    ],
    spells: [
      "The mage is a 9th-level spellcaster. Its spellcasting ability is Intelligence (spell save DC 14, +6 to hit with spell attacks). The mage has the following wizard spells prepared:",
      {
        "Cantrips (at will)": "fire bolt, light, mage hand, prestidigitation"
      },
      {
        "1st level (4 slots)": "detect magic, mage armor, magic missile, shield"
      },
      {
        "2nd level (3 slots)": "misty step, suggestion"
      },
      {
        "3rd level (3 slots)": "counterspell, fireball, fly"
      },
      {
        "4th level (3 slots)": "greater invisibility, ice storm"
      },
      {
        "5th level (1 slot)": "cone of cold"
      }
    ]
  },
  {
    name: "Magma Mephit",
    size: "Small",
    source: "SRD",
    type: "elemental",
    subtype: "",
    alignment: "neutral evil",
    ac: 11,
    hp: 22,
    hit_dice: "5d6",
    speed: "30 ft., fly 30 ft.",
    stats: [8, 12, 12, 7, 10, 10],
    skillsaves: [
      {
        stealth: 3
      }
    ],
    damage_vulnerabilities: "cold",
    damage_resistances: "",
    damage_immunities: "fire, poison",
    condition_immunities: "poisoned",
    senses: "darkvision 60 ft., passive Perception 10",
    languages: "Ignan, Terran",
    cr: "1/2",
    traits: [
      {
        name: "Death Burst",
        desc: "When the mephit dies, it explodes in a burst of lava. Each creature within 5 ft. of it must make a DC 11 Dexterity saving throw, taking 7 (2d6) fire damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "2d6"
      },
      {
        name: "False Appearance",
        desc: "While the mephit remains motionless, it is indistinguishable from an ordinary mound of magma.",
        attack_bonus: 0
      },
      {
        name: "Innate Spellcasting (1/Day)",
        desc: "The mephit can innately cast heat metal (spell save DC 10), requiring no material components. Its innate spellcasting ability is Charisma.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Claws",
        desc: "Melee Weapon Attack: +3 to hit, reach 5 ft ., one creature. Hit: 3 (1d4 + 1) slashing damage plus 2 (1d4) fire damage.",
        attack_bonus: 3,
        damage_dice: "1d4",
        damage_bonus: 1
      },
      {
        name: "Fire Breath (Recharge 6)",
        desc: "The mephit exhales a 15-foot cone of fire. Each creature in that area must make a DC 11 Dexterity saving throw, taking 7 (2d6) fire damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0
      },
      {
        name: "Variant: Summon Mephits (1/Day)",
        desc: "The mephit has a 25 percent chance of summoning 1d4 mephits of its kind. A summoned mephit appears in an unoccupied space within 60 feet of its summoner, acts as an ally of its summoner, and can't summon other mephits. It remains for 1 minute, until it or its summoner dies, or until its summoner dismisses it as an action.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Magmin",
    size: "Small",
    source: "SRD",
    type: "elemental",
    subtype: "",
    alignment: "chaotic neutral",
    ac: 14,
    hp: 9,
    hit_dice: "2d6",
    speed: "30 ft.",
    stats: [7, 15, 12, 8, 11, 10],
    damage_vulnerabilities: "",
    damage_resistances: "bludgeoning, piercing, and slashing from nonmagical weapons",
    damage_immunities: "fire",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 10",
    languages: "Ignan",
    cr: "1/2",
    traits: [
      {
        name: "Death Burst",
        desc: "When the magmin dies, it explodes in a burst of fire and magma. Each creature within 10 ft. of it must make a DC 11 Dexterity saving throw, taking 7 (2d6) fire damage on a failed save, or half as much damage on a successful one. Flammable objects that aren't being worn or carried in that area are ignited.",
        attack_bonus: 0,
        damage_dice: "2d6"
      },
      {
        name: "Ignited Illumination",
        desc: "As a bonus action, the magmin can set itself ablaze or extinguish its flames. While ablaze, the magmin sheds bright light in a 10-foot radius and dim light for an additional 10 ft.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Touch",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 7 (2d6) fire damage. If the target is a creature or a flammable object, it ignites. Until a target takes an action to douse the fire, the target takes 3 (1d6) fire damage at the end of each of its turns.",
        attack_bonus: 4,
        damage_dice: "2d6"
      }
    ]
  },
  {
    name: "Mammoth",
    size: "Huge",
    source: "SRD",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 13,
    hp: 126,
    hit_dice: "11d12",
    speed: "40 ft.",
    stats: [24, 9, 21, 3, 11, 6],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 10",
    languages: "",
    cr: "6",
    traits: [
      {
        name: "Trampling Charge",
        desc: "If the mammoth moves at least 20 ft. straight toward a creature and then hits it with a gore attack on the same turn, that target must succeed on a DC 18 Strength saving throw or be knocked prone. If the target is prone, the mammoth can make one stomp attack against it as a bonus action.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Gore",
        desc: "Melee Weapon Attack: +10 to hit, reach 10 ft., one target. Hit: 25 (4d8 + 7) piercing damage.",
        attack_bonus: 10,
        damage_dice: "4d8",
        damage_bonus: 7
      },
      {
        name: "Stomp",
        desc: "Melee Weapon Attack: +10 to hit, reach 5 ft., one prone creature. Hit: 29 (4d10 + 7) bludgeoning damage.",
        attack_bonus: 10,
        damage_dice: "4d10",
        damage_bonus: 7
      }
    ]
  },
  {
    name: "Manticore",
    size: "Large",
    source: "SRD",
    type: "monstrosity",
    subtype: "",
    alignment: "lawful evil",
    ac: 14,
    hp: 68,
    hit_dice: "8d10",
    speed: "30 ft., fly 50 ft.",
    stats: [17, 16, 17, 7, 12, 8],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 11",
    languages: "",
    cr: "3",
    traits: [
      {
        name: "Tail Spike Regrowth",
        desc: "The manticore has twenty-four tail spikes. Used spikes regrow when the manticore finishes a long rest.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The manticore makes three attacks: one with its bite and two with its claws or three with its tail spikes.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 7 (1d8 + 3) piercing damage.",
        attack_bonus: 5,
        damage_dice: "1d8",
        damage_bonus: 3
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 6 (1d6 + 3) slashing damage.",
        attack_bonus: 5,
        damage_dice: "1d6",
        damage_bonus: 3
      },
      {
        name: "Tail Spike",
        desc: "Ranged Weapon Attack: +5 to hit, range 100/200 ft., one target. Hit: 7 (1d8 + 3) piercing damage.",
        attack_bonus: 5,
        damage_dice: "1d8",
        damage_bonus: 3
      }
    ]
  },
  {
    name: "Marilith",
    size: "Large",
    source: "SRD",
    type: "fiend",
    subtype: "demon",
    alignment: "chaotic evil",
    ac: 18,
    hp: 189,
    hit_dice: "18d10",
    speed: "40 ft.",
    stats: [18, 20, 20, 18, 16, 20],
    saves: [
      {
        strength: 9
      },
      {
        constitution: 10
      },
      {
        wisdom: 8
      },
      {
        charisma: 10
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "cold, fire, lightning; bludgeoning, piercing, and slashing from nonmagical weapons",
    damage_immunities: "poison",
    condition_immunities: "poisoned",
    senses: "truesight 120 ft., passive Perception 13",
    languages: "Abyssal, telepathy 120 ft.",
    cr: "16",
    traits: [
      {
        name: "Magic Resistance",
        desc: "The marilith has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      },
      {
        name: "Magic Weapons",
        desc: "The marilith's weapon attacks are magical.",
        attack_bonus: 0
      },
      {
        name: "Reactive",
        desc: "The marilith can take one reaction on every turn in combat.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The marilith can make seven attacks: six with its longswords and one with its tail.",
        attack_bonus: 0
      },
      {
        name: "Longsword",
        desc: "Melee Weapon Attack: +9 to hit, reach 5 ft., one target. Hit: 13 (2d8 + 4) slashing damage.",
        attack_bonus: 9,
        damage_dice: "2d8",
        damage_bonus: 4
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +9 to hit, reach 10 ft., one creature. Hit: 15 (2d10 + 4) bludgeoning damage. If the target is Medium or smaller, it is grappled (escape DC 19). Until this grapple ends, the target is restrained, the marilith can automatically hit the target with its tail, and the marilith can't make tail attacks against other targets.",
        attack_bonus: 9,
        damage_dice: "2d10",
        damage_bonus: 4
      },
      {
        name: "Teleport",
        desc: "The marilith magically teleports, along with any equipment it is wearing or carrying, up to 120 feet to an unoccupied space it can see.",
        attack_bonus: 0
      },
      {
        name: "Variant: Summon Demon (1/Day)",
        desc: "The demon chooses what to summon and attempts a magical summoning.\nA marilith has a 50 percent chance of summoning 1d6 vrocks, 1d4 hezrous, 1d3 glabrezus, 1d2 nalfeshnees, or one marilith.\nA summoned demon appears in an unoccupied space within 60 feet of its summoner, acts as an ally of its summoner, and can't summon other demons. It remains for 1 minute, until it or its summoner dies, or until its summoner dismisses it as an action.",
        attack_bonus: 0
      }
    ],
    reactions: [
      {
        name: "Parry",
        desc: "The marilith adds 5 to its AC against one melee attack that would hit it. To do so, the marilith must see the attacker and be wielding a melee weapon.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Mastiff",
    size: "Medium",
    source: "SRD",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 5,
    hit_dice: "1d8",
    speed: "40 ft.",
    stats: [13, 14, 12, 3, 12, 7],
    skillsaves: [
      {
        perception: 3
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 13",
    languages: "",
    cr: "1/8",
    traits: [
      {
        name: "Keen Hearing and Smell",
        desc: "The mastiff has advantage on Wisdom (Perception) checks that rely on hearing or smell.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 4 (1d6 + 1) piercing damage. If the target is a creature, it must succeed on a DC 11 Strength saving throw or be knocked prone.",
        attack_bonus: 3,
        damage_dice: "1d6",
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Medusa",
    size: "Medium",
    source: "SRD",
    type: "monstrosity",
    subtype: "",
    alignment: "lawful evil",
    ac: 15,
    hp: 127,
    hit_dice: "17d8",
    speed: "30 ft.",
    stats: [10, 15, 16, 12, 13, 15],
    skillsaves: [
      {
        deception: 5
      },
      {
        insight: 4
      },
      {
        perception: 4
      },
      {
        stealth: 5
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 14",
    languages: "Common",
    cr: "6",
    traits: [
      {
        name: "Petrifying Gaze",
        desc: "When a creature that can see the medusa's eyes starts its turn within 30 ft. of the medusa, the medusa can force it to make a DC 14 Constitution saving throw if the medusa isn't incapacitated and can see the creature. If the saving throw fails by 5 or more, the creature is instantly petrified. Otherwise, a creature that fails the save begins to turn to stone and is restrained. The restrained creature must repeat the saving throw at the end of its next turn, becoming petrified on a failure or ending the effect on a success. The petrification lasts until the creature is freed by the greater restoration spell or other magic.\nUnless surprised, a creature can avert its eyes to avoid the saving throw at the start of its turn. If the creature does so, it can't see the medusa until the start of its next turn, when it can avert its eyes again. If the creature looks at the medusa in the meantime, it must immediately make the save.\nIf the medusa sees itself reflected on a polished surface within 30 ft. of it and in an area of bright light, the medusa is, due to its curse, affected by its own gaze.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The medusa makes either three melee attacks \u2014  one with its snake hair and two with its shortsword \u2014 or two ranged attacks with its longbow.",
        attack_bonus: 0
      },
      {
        name: "Snake Hair",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one creature. Hit: 4 (1d4 + 2) piercing damage plus 14 (4d6) poison damage.",
        attack_bonus: 5,
        damage_dice: "1d4",
        damage_bonus: 2
      },
      {
        name: "Shortsword",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 5 (1d6 + 2) piercing damage.",
        attack_bonus: 5,
        damage_dice: "1d6",
        damage_bonus: 2
      },
      {
        name: "Longbow",
        desc: "Ranged Weapon Attack: +5 to hit, range 150/600 ft., one target. Hit: 6 (1d8 + 2) piercing damage plus 7 (2d6) poison damage.",
        attack_bonus: 5,
        damage_dice: "2d6"
      }
    ]
  },
  {
    name: "Merfolk",
    size: "Medium",
    source: "SRD",
    type: "humanoid",
    subtype: "merfolk",
    alignment: "neutral",
    ac: 11,
    hp: 11,
    hit_dice: "2d8",
    speed: "10 ft., swim 40 ft.",
    stats: [10, 13, 12, 11, 11, 12],
    skillsaves: [
      {
        perception: 2
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 12",
    languages: "Aquan, Common",
    cr: "1/8",
    traits: [
      {
        name: "Amphibious",
        desc: "The merfolk can breathe air and water.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Spear",
        desc: "Melee or Ranged Weapon Attack: +2 to hit, reach 5 ft. or range 20/60 ft., one target. Hit: 3 (1d6) piercing damage, or 4 (1d8) piercing damage if used with two hands to make a melee attack.",
        attack_bonus: 2,
        damage_dice: "1d6"
      }
    ]
  },
  {
    name: "Merrow",
    size: "Large",
    source: "SRD",
    type: "monstrosity",
    subtype: "",
    alignment: "chaotic evil",
    ac: 13,
    hp: 45,
    hit_dice: "6d10",
    speed: "10 ft., swim 40 ft.",
    stats: [18, 10, 15, 8, 10, 9],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 10",
    languages: "Abyssal, Aquan",
    cr: "2",
    traits: [
      {
        name: "Amphibious",
        desc: "The merrow can breathe air and water.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The merrow makes two attacks: one with its bite and one with its claws or harpoon.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 8 (1d8 + 4) piercing damage.",
        attack_bonus: 6,
        damage_dice: "1d8",
        damage_bonus: 4
      },
      {
        name: "Claws",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 9 (2d4 + 4) slashing damage.",
        attack_bonus: 6,
        damage_dice: "2d4",
        damage_bonus: 4
      },
      {
        name: "Harpoon",
        desc: "Melee or Ranged Weapon Attack: +6 to hit, reach 5 ft. or range 20/60 ft., one target. Hit: 11 (2d6 + 4) piercing damage. If the target is a Huge or smaller creature, it must succeed on a Strength contest against the merrow or be pulled up to 20 feet toward the merrow.",
        attack_bonus: 6,
        damage_dice: "2d6",
        damage_bonus: 4
      }
    ]
  },
  {
    name: "Mimic",
    size: "Medium",
    source: "SRD",
    type: "monstrosity",
    subtype: "shapechanger",
    alignment: "neutral",
    ac: 12,
    hp: 58,
    hit_dice: "9d8",
    speed: "15 ft.",
    stats: [17, 12, 15, 5, 13, 8],
    skillsaves: [
      {
        stealth: 5
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "acid",
    condition_immunities: "prone",
    senses: "darkvision 60 ft., passive Perception 11",
    languages: "",
    cr: "2",
    traits: [
      {
        name: "Shapechanger",
        desc: "The mimic can use its action to polymorph into an object or back into its true, amorphous form. Its statistics are the same in each form. Any equipment it is wearing or carrying isn 't transformed. It reverts to its true form if it dies.",
        attack_bonus: 0
      },
      {
        name: "Adhesive (Object Form Only)",
        desc: "The mimic adheres to anything that touches it. A Huge or smaller creature adhered to the mimic is also grappled by it (escape DC 13). Ability checks made to escape this grapple have disadvantage.",
        attack_bonus: 0
      },
      {
        name: "False Appearance (Object Form Only)",
        desc: "While the mimic remains motionless, it is indistinguishable from an ordinary object.",
        attack_bonus: 0
      },
      {
        name: "Grappler",
        desc: "The mimic has advantage on attack rolls against any creature grappled by it.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Pseudopod",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 7 (1d8 + 3) bludgeoning damage. If the mimic is in object form, the target is subjected to its Adhesive trait.",
        attack_bonus: 5,
        damage_dice: "1d8",
        damage_bonus: 3
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 7 (1d8 + 3) piercing damage plus 4 (1d8) acid damage.",
        attack_bonus: 5,
        damage_dice: "1d8 + 1d8",
        damage_bonus: 3
      }
    ]
  },
  {
    name: "Minotaur",
    size: "Large",
    source: "SRD",
    type: "monstrosity",
    subtype: "",
    alignment: "chaotic evil",
    ac: 14,
    hp: 76,
    hit_dice: "9d10",
    speed: "40 ft.",
    stats: [18, 11, 16, 6, 16, 9],
    skillsaves: [
      {
        perception: 7
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 17",
    languages: "Abyssal",
    cr: "3",
    traits: [
      {
        name: "Charge",
        desc: "If the minotaur moves at least 10 ft. straight toward a target and then hits it with a gore attack on the same turn, the target takes an extra 9 (2d8) piercing damage. If the target is a creature, it must succeed on a DC 14 Strength saving throw or be pushed up to 10 ft. away and knocked prone.",
        attack_bonus: 0,
        damage_dice: "2d8"
      },
      {
        name: "Labyrinthine Recall",
        desc: "The minotaur can perfectly recall any path it has traveled.",
        attack_bonus: 0
      },
      {
        name: "Reckless",
        desc: "At the start of its turn, the minotaur can gain advantage on all melee weapon attack rolls it makes during that turn, but attack rolls against it have advantage until the start of its next turn.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Greataxe",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 17 (2d12 + 4) slashing damage.",
        attack_bonus: 6,
        damage_dice: "2d12",
        damage_bonus: 4
      },
      {
        name: "Gore",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 13 (2d8 + 4) piercing damage.",
        attack_bonus: 6,
        damage_dice: "2d8",
        damage_bonus: 4
      }
    ]
  },
  {
    name: "Minotaur Skeleton",
    size: "Large",
    source: "SRD",
    type: "undead",
    subtype: "",
    alignment: "lawful evil",
    ac: 12,
    hp: 67,
    hit_dice: "9d10",
    speed: "40 ft.",
    stats: [18, 11, 15, 6, 8, 5],
    damage_vulnerabilities: "bludgeoning",
    damage_resistances: "",
    damage_immunities: "poison",
    condition_immunities: "exhaustion, poisoned",
    senses: "darkvision 60 ft., passive Perception 9",
    languages: "understands Abyssal but can't speak",
    cr: "2",
    traits: [
      {
        name: "Charge",
        desc: "If the skeleton moves at least 10 feet straight toward a target and then hits it with a gore attack on the same turn, the target takes an extra 9 (2d8) piercing damage. If the target is a creature, it must succeed on a DC 14 Strength saving throw or be pushed up to 10 feet away and knocked prone.",
        attack_bonus: 0,
        damage_dice: "2d8"
      }
    ],
    actions: [
      {
        name: "Greataxe",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 17 (2d12 + 4) slashing damage.",
        attack_bonus: 6,
        damage_dice: "2d12",
        damage_bonus: 4
      },
      {
        name: "Gore",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 13 (2d8 + 4) piercing damage.",
        attack_bonus: 6,
        damage_dice: "2d8",
        damage_bonus: 4
      }
    ]
  },
  {
    name: "Mule",
    size: "Medium",
    source: "SRD",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 10,
    hp: 11,
    hit_dice: "2d8",
    speed: "40 ft.",
    stats: [14, 10, 13, 2, 10, 5],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 10",
    languages: "",
    cr: "1/8",
    traits: [
      {
        name: "Beast of Burden",
        desc: "The mule is considered to be a Large animal for the purpose of determining its carrying capacity.",
        attack_bonus: 0
      },
      {
        name: "Sure-Footed",
        desc: "The mule has advantage on Strength and Dexterity saving throws made against effects that would knock it prone.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Hooves",
        desc: "Melee Weapon Attack: +2 to hit, reach 5 ft., one target. Hit: 4 (1d4 + 2) bludgeoning damage.",
        attack_bonus: 4,
        damage_dice: "1d4",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Mummy",
    size: "Medium",
    source: "SRD",
    type: "undead",
    subtype: "",
    alignment: "lawful evil",
    ac: 11,
    hp: 58,
    hit_dice: "9d8",
    speed: "20 ft.",
    stats: [16, 8, 15, 6, 10, 12],
    saves: [
      {
        wisdom: 2
      }
    ],
    damage_vulnerabilities: "fire",
    damage_resistances: "",
    damage_immunities: "bludgeoning, piercing, and slashing from nonmagical weapons",
    condition_immunities: "necrotic, poisoned",
    senses: "darkvision 60 ft., passive Perception 10",
    languages: "the languages it knew in life",
    cr: "3",
    actions: [
      {
        name: "Multiattack",
        desc: "The mummy can use its Dreadful Glare and makes one attack with its rotting fist.",
        attack_bonus: 0
      },
      {
        name: "Rotting Fist",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 10 (2d6 + 3) bludgeoning damage plus 10 (3d6) necrotic damage. If the target is a creature, it must succeed on a DC 12 Constitution saving throw or be cursed with mummy rot. The cursed target can't regain hit points, and its hit point maximum decreases by 10 (3d6) for every 24 hours that elapse. If the curse reduces the target's hit point maximum to 0, the target dies, and its body turns to dust. The curse lasts until removed by the remove curse spell or other magic.",
        attack_bonus: 5,
        damage_dice: "2d6",
        damage_bonus: 3
      },
      {
        name: "Dreadful Glare",
        desc: "The mummy targets one creature it can see within 60 ft. of it. If the target can see the mummy, it must succeed on a DC 11 Wisdom saving throw against this magic or become frightened until the end of the mummy's next turn. If the target fails the saving throw by 5 or more, it is also paralyzed for the same duration. A target that succeeds on the saving throw is immune to the Dreadful Glare of all mummies (but not mummy lords) for the next 24 hours.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Mummy Lord",
    size: "Medium",
    source: "SRD",
    type: "undead",
    subtype: "",
    alignment: "lawful evil",
    ac: 17,
    hp: 97,
    hit_dice: "13d8",
    speed: "20 ft.",
    stats: [18, 10, 17, 11, 18, 16],
    saves: [
      {
        constitution: 8
      },
      {
        intelligence: 5
      },
      {
        wisdom: 9
      },
      {
        charisma: 8
      }
    ],
    skillsaves: [
      {
        history: 5
      },
      {
        religion: 5
      }
    ],
    damage_vulnerabilities: "bludgeoning",
    damage_resistances: "",
    damage_immunities: "necrotic, poison; bludgeoning, piercing, and slashing from nonmagical weapons",
    condition_immunities: "charmed, exhaustion, frightened, paralyzed, poisoned",
    senses: "darkvision 60 ft., passive Perception 14",
    languages: "the languages it knew in life",
    cr: "15",
    traits: [
      {
        name: "Magic Resistance",
        desc: "The mummy lord has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      },
      {
        name: "Rejuvenation",
        desc: "A destroyed mummy lord gains a new body in 24 hours if its heart is intact, regaining all its hit points and becoming active again. The new body appears within 5 feet of the mummy lord's heart.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The mummy can use its Dreadful Glare and makes one attack with its rotting fist.",
        attack_bonus: 0
      },
      {
        name: "Rotting Fist",
        desc: "Melee Weapon Attack: +9 to hit, reach 5 ft., one target. Hit: 14 (3d6 + 4) bludgeoning damage plus 21 (6d6) necrotic damage. If the target is a creature, it must succeed on a DC 16 Constitution saving throw or be cursed with mummy rot. The cursed target can't regain hit points, and its hit point maximum decreases by 10 (3d6) for every 24 hours that elapse. If the curse reduces the target's hit point maximum to 0, the target dies, and its body turns to dust. The curse lasts until removed by the remove curse spell or other magic.",
        attack_bonus: 9,
        damage_dice: "3d6 + 6d6",
        damage_bonus: 4
      },
      {
        name: "Dreadful Glare",
        desc: "The mummy lord targets one creature it can see within 60 feet of it. If the target can see the mummy lord, it must succeed on a DC 16 Wisdom saving throw against this magic or become frightened until the end of the mummy's next turn. If the target fails the saving throw by 5 or more, it is also paralyzed for the same duration. A target that succeeds on the saving throw is immune to the Dreadful Glare of all mummies and mummy lords for the next 24 hours.",
        attack_bonus: 0
      }
    ],
    legendary_actions: [
      {
        name: "Attack",
        desc: "The mummy lord makes one attack with its rotting fist or uses its Dreadful Glare.",
        attack_bonus: 0
      },
      {
        name: "Blinding Dust",
        desc: "Blinding dust and sand swirls magically around the mummy lord. Each creature within 5 feet of the mummy lord must succeed on a DC 16 Constitution saving throw or be blinded until the end of the creature's next turn.",
        attack_bonus: 0
      },
      {
        name: "Blasphemous Word (Costs 2 Actions)",
        desc: "The mummy lord utters a blasphemous word. Each non-undead creature within 10 feet of the mummy lord that can hear the magical utterance must succeed on a DC 16 Constitution saving throw or be stunned until the end of the mummy lord's next turn.",
        attack_bonus: 0
      },
      {
        name: "Channel Negative Energy (Costs 2 Actions)",
        desc: "The mummy lord magically unleashes negative energy. Creatures within 60 feet of the mummy lord, including ones behind barriers and around corners, can't regain hit points until the end of the mummy lord's next turn.",
        attack_bonus: 0
      },
      {
        name: "Whirlwind of Sand (Costs 2 Actions)",
        desc: "The mummy lord magically transforms into a whirlwind of sand, moves up to 60 feet, and reverts to its normal form. While in whirlwind form, the mummy lord is immune to all damage, and it can't be grappled, petrified, knocked prone, restrained, or stunned. Equipment worn or carried by the mummy lord remain in its possession.",
        attack_bonus: 0
      }
    ],
    spells: [
      "The mummy lord is a 10th-level spellcaster. Its spellcasting ability is Wisdom (spell save DC 17, +9 to hit with spell attacks). The mummy lord has the following cleric spells prepared:",
      {
        "Cantrips (at will)": "sacred flame, thaumaturgy"
      },
      {
        "1st level (4 slots)": "command, guiding bolt, shield of faith"
      },
      {
        "2nd level (3 slots)": "hold person, silence, spiritual weapon"
      },
      {
        "3rd level (3 slots)": "animate dead, dispel magic"
      },
      {
        "4th level (3 slots)": "divination, guardian of faith"
      },
      {
        "5th level (2 slots)": "contagion, insect plague"
      },
      {
        "6th level (1 slot)": "harm"
      }
    ]
  },
  {
    name: "Nalfeshnee",
    size: "Large",
    source: "SRD",
    type: "fiend",
    subtype: "demon",
    alignment: "chaotic evil",
    ac: 18,
    hp: 184,
    hit_dice: "16d10",
    speed: "20 ft., fly 30 ft.",
    stats: [21, 10, 22, 19, 12, 15],
    saves: [
      {
        constitution: 11
      },
      {
        intelligence: 9
      },
      {
        wisdom: 6
      },
      {
        charisma: 7
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "cold, fire, lightning; bludgeoning, piercing, and slashing from nonmagical weapons",
    damage_immunities: "poison",
    condition_immunities: "poisoned",
    senses: "truesight 120 ft., passive Perception 11",
    languages: "Abyssal, telepathy 120 ft.",
    cr: "13",
    traits: [
      {
        name: "Magic Resistance",
        desc: "The nalfeshnee has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The nalfeshnee uses Horror Nimbus if it can.  It then makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +10 to hit, reach 5 ft., one target. Hit: 32 (5d10 + 5) piercing damage.",
        attack_bonus: 10,
        damage_dice: "5d10",
        damage_bonus: 5
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +10 to hit, reach 10 ft., one target. Hit: 15 (3d6 + 5) slashing damage.",
        attack_bonus: 10,
        damage_dice: "3d6",
        damage_bonus: 5
      },
      {
        name: "Horror Nimbus (Recharge 5-6)",
        desc: "The nalfeshnee magically emits scintillating, multicolored light. Each creature within 15 feet of the nalfeshnee that can see the light must succeed on a DC 15 Wisdom saving throw or be frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the nalfeshnee's Horror Nimbus for the next 24 hours.",
        attack_bonus: 0
      },
      {
        name: "Teleport",
        desc: "The nalfeshnee magically teleports, along with any equipment it is wearing or carrying, up to 120 feet to an unoccupied space it can see.",
        attack_bonus: 0
      },
      {
        name: "Variant: Summon Demon (1/Day)",
        desc: "The demon chooses what to summon and attempts a magical summoning.\nA nalfeshnee has a 50 percent chance of summoning 1d4 vrocks, 1d3 hezrous, 1d2 glabrezus, or one nalfeshnee.\nA summoned demon appears in an unoccupied space within 60 feet of its summoner, acts as an ally of its summoner, and can't summon other demons. It remains for 1 minute, until it or its summoner dies, or until its summoner dismisses it as an action.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Night Hag",
    size: "Medium",
    source: "SRD",
    type: "fiend",
    subtype: "",
    alignment: "neutral evil",
    ac: 17,
    hp: 112,
    hit_dice: "15d8",
    speed: "30 ft.",
    stats: [18, 15, 16, 16, 14, 16],
    skillsaves: [
      {
        deception: 7
      },
      {
        insight: 6
      },
      {
        perception: 6
      },
      {
        stealth: 6
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "cold, fire; bludgeoning, piercing, and slashing from nonmagical weapons that aren't silvered",
    damage_immunities: "",
    condition_immunities: "charmed",
    senses: "darkvision 120 ft., passive Perception 16",
    languages: "Abyssal, Common, Infernal, Primordial",
    cr: "5",
    traits: [
      {
        name: "Innate Spellcasting",
        desc: "The hag's innate spellcasting ability is Charisma (spell save DC 14, +6 to hit with spell attacks). She can innately cast the following spells, requiring no material components:\n\nAt will: detect magic, magic missile\n2/day each: plane shift (self only), ray of enfeeblement, sleep",
        attack_bonus: 0
      },
      {
        name: "Magic Resistance",
        desc: "The hag has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      },
      {
        name: "Night Hag Items",
        desc: "A night hag carries two very rare magic items that she must craft for herself If either object is lost, the night hag will go to great lengths to retrieve it, as creating a new tool takes time and effort.\nHeartstone: This lustrous black gem allows a night hag to become ethereal while it is in her possession. The touch of a heartstone also cures any disease. Crafting a heartstone takes 30 days.\nSoul Bag: When an evil humanoid dies as a result of a night hag's Nightmare Haunting, the hag catches the soul in this black sack made of stitched flesh. A soul bag can hold only one evil soul at a time, and only the night hag who crafted the bag can catch a soul with it. Crafting a soul bag takes 7 days and a humanoid sacrifice (whose flesh is used to make the bag).",
        attack_bonus: 0
      },
      {
        name: "Hag Coven",
        desc: "When hags must work together, they form covens, in spite of their selfish natures. A coven is made up of hags of any type, all of whom are equals within the group. However, each of the hags continues to desire more personal power.\nA coven consists of three hags so that any arguments between two hags can be settled by the third. If more than three hags ever come together, as might happen if two covens come into conflict, the result is usually chaos.",
        attack_bonus: 0
      },
      {
        name: "Shared Spellcasting (Coven Only)",
        desc: "While all three members of a hag coven are within 30 feet of one another, they can each cast the following spells from the wizard's spell list but must share the spell slots among themselves:\n\n\u2022 1st level (4 slots): identify, ray of sickness\n\u2022 2nd level (3 slots): hold person, locate object\n\u2022 3rd level (3 slots): bestow curse, counterspell, lightning bolt\n\u2022 4th level (3 slots): phantasmal killer, polymorph\n\u2022 5th level (2 slots): contact other plane, scrying\n\u2022 6th level (1 slot): eye bite\n\nFor casting these spells, each hag is a 12th-level spellcaster that uses Intelligence as her spellcasting ability. The spell save DC is 12+the hag's Intelligence modifier, and the spell attack bonus is 4+the hag's Intelligence modifier.",
        attack_bonus: 0
      },
      {
        name: "Hag Eye (Coven Only)",
        desc: "A hag coven can craft a magic item called a hag eye, which is made from a real eye coated in varnish and often fitted to a pendant or other wearable item. The hag eye is usually entrusted to a minion for safekeeping and transport. A hag in the coven can take an action to see what the hag eye sees if the hag eye is on the same plane of existence. A hag eye has AC 10, 1 hit point, and darkvision with a radius of 60 feet. If it is destroyed, each coven member takes 3d10 psychic damage and is blinded for 24 hours.\nA hag coven can have only one hag eye at a time, and creating a new one requires all three members of the coven to perform a ritual. The ritual takes 1 hour, and the hags can't perform it while blinded. During the ritual, if the hags take any action other than performing the ritual, they must start over.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Claws (Hag Form Only)",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 13 (2d8 + 4) slashing damage.",
        attack_bonus: 7,
        damage_dice: "2d8",
        damage_bonus: 4
      },
      {
        name: "Change Shape",
        desc: "The hag magically polymorphs into a Small or Medium female humanoid, or back into her true form. Her statistics are the same in each form. Any equipment she is wearing or carrying isn't transformed. She reverts to her true form if she dies.",
        attack_bonus: 0
      },
      {
        name: "Etherealness",
        desc: "The hag magically enters the Ethereal Plane from the Material Plane, or vice versa. To do so, the hag must have a heartstone in her possession.",
        attack_bonus: 0
      },
      {
        name: "Nightmare Haunting (1/Day)",
        desc: "While on the Ethereal Plane, the hag magically touches a sleeping humanoid on the Material Plane. A protection from evil and good spell cast on the target prevents this contact, as does a magic circle. As long as the contact persists, the target has dreadful visions. If these visions last for at least 1 hour, the target gains no benefit from its rest, and its hit point maximum is reduced by 5 (1d10). If this effect reduces the target's hit point maximum to 0, the target dies, and if the target was evil, its soul is trapped in the hag's soul bag. The reduction to the target's hit point maximum lasts until removed by the greater restoration spell or similar magic.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Nightmare",
    size: "Large",
    source: "SRD",
    type: "fiend",
    subtype: "",
    alignment: "neutral evil",
    ac: 13,
    hp: 68,
    hit_dice: "8d10",
    speed: "60 ft., fly 90 ft.",
    stats: [18, 15, 16, 10, 13, 15],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "fire",
    condition_immunities: "",
    senses: "passive Perception 11",
    languages: "understands Abyssal, Common, and Infernal but can't speak",
    cr: "3",
    traits: [
      {
        name: "Confer Fire Resistance",
        desc: "The nightmare can grant resistance to fire damage to anyone riding it.",
        attack_bonus: 0
      },
      {
        name: "Illumination",
        desc: "The nightmare sheds bright light in a 10-foot radius and dim light for an additional 10 feet.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Hooves",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 13 (2d8 + 4) bludgeoning damage plus 7 (2d6) fire damage.",
        attack_bonus: 6,
        damage_dice: "2d8 + 2d6",
        damage_bonus: 4
      },
      {
        name: "Ethereal Stride",
        desc: "The nightmare and up to three willing creatures within 5 feet of it magically enter the Ethereal Plane from the Material Plane, or vice versa.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Noble",
    size: "Medium",
    source: "SRD",
    type: "humanoid",
    subtype: "any race",
    alignment: "any alignment",
    ac: 15,
    hp: 9,
    hit_dice: "2d8",
    speed: "30 ft.",
    stats: [11, 12, 11, 12, 14, 16],
    skillsaves: [
      {
        deception: 5
      },
      {
        insight: 4
      },
      {
        persuasion: 5
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 12",
    languages: "any two languages",
    cr: "1/8",
    actions: [
      {
        name: "Rapier",
        desc: "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 5 (1d8 + 1) piercing damage.",
        attack_bonus: 3,
        damage_dice: "1d8",
        damage_bonus: 1
      }
    ],
    reactions: [
      {
        name: "Parry",
        desc: "The noble adds 2 to its AC against one melee attack that would hit it. To do so, the noble must see the attacker and be wielding a melee weapon.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Ochre Jelly",
    size: "Large",
    source: "SRD",
    type: "ooze",
    subtype: "",
    alignment: "unaligned",
    ac: 8,
    hp: 45,
    hit_dice: "6d10",
    speed: "10 ft., climb 10 ft.",
    stats: [15, 6, 14, 2, 6, 1],
    damage_vulnerabilities: "",
    damage_resistances: "acid",
    damage_immunities: "lightning, slashing",
    condition_immunities: "blinded, charmed, deafened, exhaustion, frightened, prone",
    senses: "blindsight 60 ft. (blind beyond this radius), passive Perception 8",
    languages: "",
    cr: "2",
    traits: [
      {
        name: "Amorphous",
        desc: "The jelly can move through a space as narrow as 1 inch wide without squeezing.",
        attack_bonus: 0
      },
      {
        name: "Spider Climb",
        desc: "The jelly can climb difficult surfaces, including upside down on ceilings, without needing to make an ability check.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Pseudopod",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 9 (2d6 + 2) bludgeoning damage plus 3 (1d6) acid damage.",
        attack_bonus: 4,
        damage_dice: "2d6",
        damage_bonus: 2
      }
    ],
    reactions: [
      {
        name: "Split",
        desc: "When a jelly that is Medium or larger is subjected to lightning or slashing damage, it splits into two new jellies if it has at least 10 hit points. Each new jelly has hit points equal to half the original jelly's, rounded down. New jellies are one size smaller than the original jelly.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Octopus",
    size: "Small",
    source: "SRD",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 3,
    hit_dice: "1d6",
    speed: "5 ft., swim 30 ft.",
    stats: [4, 15, 11, 3, 10, 4],
    skillsaves: [
      {
        perception: 2
      },
      {
        stealth: 4
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 30 ft., passive Perception 12",
    languages: "",
    cr: "0",
    traits: [
      {
        name: "Hold Breath",
        desc: "While out of water, the octopus can hold its breath for 30 minutes.",
        attack_bonus: 0
      },
      {
        name: "Underwater Camouflage",
        desc: "The octopus has advantage on Dexterity (Stealth) checks made while underwater.",
        attack_bonus: 0
      },
      {
        name: "Water Breathing",
        desc: "The octopus can breathe only underwater.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Tentacles",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 1 bludgeoning damage, and the target is grappled (escape DC 10). Until this grapple ends, the octopus can't use its tentacles on another target.",
        attack_bonus: 4,
        damage_bonus: 1
      },
      {
        name: "Ink Cloud (Recharges after a Short or Long Rest)",
        desc: "A 5-foot-radius cloud of ink extends all around the octopus if it is underwater. The area is heavily obscured for 1 minute, although a significant current can disperse the ink. After releasing the ink, the octopus can use the Dash action as a bonus action.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Ogre",
    size: "Large",
    source: "SRD",
    type: "giant",
    subtype: "",
    alignment: "chaotic evil",
    ac: 11,
    hp: 59,
    hit_dice: "7d10",
    speed: "40 ft.",
    stats: [19, 8, 16, 5, 7, 7],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 8",
    languages: "Common, Giant",
    cr: "2",
    actions: [
      {
        name: "Greatclub",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 13 (2d8 + 4) bludgeoning damage.",
        attack_bonus: 6,
        damage_dice: "2d8",
        damage_bonus: 4
      },
      {
        name: "Javelin",
        desc: "Melee or Ranged Weapon Attack: +6 to hit, reach 5 ft. or range 30/120 ft., one target. Hit: 11 (2d6 + 4) piercing damage.",
        attack_bonus: 6,
        damage_dice: "2d6",
        damage_bonus: 4
      }
    ]
  },
  {
    name: "Ogre Zombie",
    size: "Large",
    source: "SRD",
    type: "undead",
    subtype: "",
    alignment: "neutral evil",
    ac: 8,
    hp: 85,
    hit_dice: "9d10",
    speed: "30 ft.",
    stats: [19, 6, 18, 3, 6, 5],
    saves: [
      {
        wisdom: 0
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "poison",
    condition_immunities: "poisoned",
    senses: "darkvision 60 ft., passive Perception 8",
    languages: "understands Common and Giant but can't speak",
    cr: "2",
    traits: [
      {
        name: "Undead Fortitude",
        desc: "If damage reduces the zombie to 0 hit points, it must make a Constitution saving throw with a DC of 5+the damage taken, unless the damage is radiant or from a critical hit. On a success, the zombie drops to 1 hit point instead.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Morningstar",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 13 (2d8 + 4) bludgeoning damage.",
        attack_bonus: 6,
        damage_dice: "2d8",
        damage_bonus: 4
      }
    ]
  },
  {
    name: "Oni",
    size: "Large",
    source: "SRD",
    type: "giant",
    subtype: "",
    alignment: "lawful evil",
    ac: 16,
    hp: 110,
    hit_dice: "13d10",
    speed: "30 ft., fly 30 ft.",
    stats: [19, 11, 16, 14, 12, 15],
    saves: [
      {
        dexterity: 3
      },
      {
        constitution: 6
      },
      {
        wisdom: 4
      },
      {
        charisma: 5
      }
    ],
    skillsaves: [
      {
        arcana: 5
      },
      {
        deception: 8
      },
      {
        perception: 4
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 14",
    languages: "Common, Giant",
    cr: "7",
    traits: [
      {
        name: "Innate Spellcasting",
        desc: "The oni's innate spellcasting ability is Charisma (spell save DC 13). The oni can innately cast the following spells, requiring no material components:\n\nAt will: darkness, invisibility\n1/day each: charm person, cone of cold, gaseous form, sleep",
        attack_bonus: 0
      },
      {
        name: "Magic Weapons",
        desc: "The oni's weapon attacks are magical.",
        attack_bonus: 0
      },
      {
        name: "Regeneration",
        desc: "The oni regains 10 hit points at the start of its turn if it has at least 1 hit point.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The oni makes two attacks, either with its claws or its glaive.",
        attack_bonus: 0
      },
      {
        name: "Claw (Oni Form Only)",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 8 (1d8 + 4) slashing damage.",
        attack_bonus: 7,
        damage_dice: "1d8",
        damage_bonus: 4
      },
      {
        name: "Glaive",
        desc: "Melee Weapon Attack: +7 to hit, reach 10 ft., one target. Hit: 15 (2d10 + 4) slashing damage, or 9 (1d10 + 4) slashing damage in Small or Medium form.",
        attack_bonus: 7,
        damage_dice: "2d10",
        damage_bonus: 4
      },
      {
        name: "Change Shape",
        desc: "The oni magically polymorphs into a Small or Medium humanoid, into a Large giant, or back into its true form. Other than its size, its statistics are the same in each form. The only equipment that is transformed is its glaive, which shrinks so that it can be wielded in humanoid form. If the oni dies, it reverts to its true form, and its glaive reverts to its normal size.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Orc",
    size: "Medium",
    source: "SRD",
    type: "humanoid",
    subtype: "orc",
    alignment: "chaotic evil",
    ac: 13,
    hp: 15,
    hit_dice: "2d8",
    speed: "30 ft.",
    stats: [16, 12, 16, 7, 11, 10],
    skillsaves: [
      {
        intimidation: 2
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 10",
    languages: "Common, Orc",
    cr: "1/2",
    traits: [
      {
        name: "Aggressive",
        desc: "As a bonus action, the orc can move up to its speed toward a hostile creature that it can see.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Greataxe",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 9 (1d12 + 3) slashing damage.",
        attack_bonus: 5,
        damage_dice: "1d12",
        damage_bonus: 3
      },
      {
        name: "Javelin",
        desc: "Melee or Ranged Weapon Attack: +5 to hit, reach 5 ft. or range 30/120 ft., one target. Hit: 6 (1d6 + 3) piercing damage.",
        attack_bonus: 5,
        damage_dice: "1d6",
        damage_bonus: 3
      }
    ]
  },
  {
    name: "Otyugh",
    size: "Large",
    source: "SRD",
    type: "aberration",
    subtype: "",
    alignment: "neutral",
    ac: 14,
    hp: 114,
    hit_dice: "12d10",
    speed: "30 ft.",
    stats: [16, 11, 19, 6, 13, 6],
    saves: [
      {
        constitution: 7
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 120 ft., passive Perception 11",
    languages: "Otyugh",
    cr: "5",
    traits: [
      {
        name: "Limited Telepathy",
        desc: "The otyugh can magically transmit simple messages and images to any creature within 120 ft. of it that can understand a language. This form of telepathy doesn't allow the receiving creature to telepathically respond.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The otyugh makes three attacks: one with its bite and two with its tentacles.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 12 (2d8 + 3) piercing damage. If the target is a creature, it must succeed on a DC 15 Constitution saving throw against disease or become poisoned until the disease is cured. Every 24 hours that elapse, the target must repeat the saving throw, reducing its hit point maximum by 5 (1d10) on a failure. The disease is cured on a success. The target dies if the disease reduces its hit point maximum to 0. This reduction to the target's hit point maximum lasts until the disease is cured.",
        attack_bonus: 6,
        damage_dice: "2d8",
        damage_bonus: 3
      },
      {
        name: "Tentacle",
        desc: "Melee Weapon Attack: +6 to hit, reach 10 ft., one target. Hit: 7 (1d8 + 3) bludgeoning damage plus 4 (1d8) piercing damage. If the target is Medium or smaller, it is grappled (escape DC 13) and restrained until the grapple ends. The otyugh has two tentacles, each of which can grapple one target.",
        attack_bonus: 6,
        damage_dice: "1d8",
        damage_bonus: 3
      },
      {
        name: "Tentacle Slam",
        desc: "The otyugh slams creatures grappled by it into each other or a solid surface. Each creature must succeed on a DC 14 Constitution saving throw or take 10 (2d6 + 3) bludgeoning damage and be stunned until the end of the otyugh's next turn. On a successful save, the target takes half the bludgeoning damage and isn't stunned.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Owl",
    size: "Tiny",
    source: "SRD",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 11,
    hp: 1,
    hit_dice: "1d4",
    speed: "5 ft., fly 60 ft.",
    stats: [3, 13, 8, 2, 12, 7],
    skillsaves: [
      {
        perception: 3
      },
      {
        stealth: 3
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 120 ft., passive Perception 13",
    languages: "",
    cr: "0",
    traits: [
      {
        name: "Flyby",
        desc: "The owl doesn't provoke opportunity attacks when it flies out of an enemy's reach.",
        attack_bonus: 0
      },
      {
        name: "Keen Hearing and Sight",
        desc: "The owl has advantage on Wisdom (Perception) checks that rely on hearing or sight.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Talons",
        desc: "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 1 slashing damage.",
        attack_bonus: 3,
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Owlbear",
    size: "Large",
    source: "SRD",
    type: "monstrosity",
    subtype: "",
    alignment: "unaligned",
    ac: 13,
    hp: 59,
    hit_dice: "7d10",
    speed: "40 ft.",
    stats: [20, 12, 17, 3, 12, 7],
    skillsaves: [
      {
        perception: 3
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 13",
    languages: "",
    cr: "3",
    traits: [
      {
        name: "Keen Sight and Smell",
        desc: "The owlbear has advantage on Wisdom (Perception) checks that rely on sight or smell.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The owlbear makes two attacks: one with its beak and one with its claws.",
        attack_bonus: 0
      },
      {
        name: "Beak",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one creature. Hit: 10 (1d10 + 5) piercing damage.",
        attack_bonus: 7,
        damage_dice: "1d10",
        damage_bonus: 5
      },
      {
        name: "Claws",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 14 (2d8 + 5) slashing damage.",
        attack_bonus: 7,
        damage_dice: "2d8",
        damage_bonus: 5
      }
    ]
  },
  {
    name: "Panther",
    size: "Medium",
    source: "SRD",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 13,
    hit_dice: "3d8",
    speed: "50 ft., climb 40 ft.",
    stats: [14, 15, 10, 3, 14, 7],
    skillsaves: [
      {
        perception: 4
      },
      {
        stealth: 6
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 14",
    languages: "",
    cr: "1/4",
    traits: [
      {
        name: "Keen Smell",
        desc: "The panther has advantage on Wisdom (Perception) checks that rely on smell.",
        attack_bonus: 0
      },
      {
        name: "Pounce",
        desc: "If the panther moves at least 20 ft. straight toward a creature and then hits it with a claw attack on the same turn, that target must succeed on a DC 12 Strength saving throw or be knocked prone. If the target is prone, the panther can make one bite attack against it as a bonus action.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 5 (1d6 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d6",
        damage_bonus: 2
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 4 (1d4 + 2) slashing damage.",
        attack_bonus: 4,
        damage_dice: "1d4",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Pegasus",
    size: "Large",
    source: "SRD",
    type: "celestial",
    subtype: "",
    alignment: "chaotic good",
    ac: 12,
    hp: 59,
    hit_dice: "7d10",
    speed: "60 ft., fly 90 ft.",
    stats: [18, 15, 16, 10, 15, 13],
    saves: [
      {
        dexterity: 4
      },
      {
        wisdom: 4
      },
      {
        charisma: 3
      }
    ],
    skillsaves: [
      {
        perception: 6
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 16",
    languages: "understands Celestial, Common, Elvish, and Sylvan but can't speak",
    cr: "2",
    actions: [
      {
        name: "Hooves",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 11 (2d6 + 4) bludgeoning damage.",
        attack_bonus: 6,
        damage_dice: "2d6",
        damage_bonus: 4
      }
    ]
  },
  {
    name: "Phase Spider",
    size: "Large",
    source: "SRD",
    type: "monstrosity",
    subtype: "",
    alignment: "unaligned",
    ac: 13,
    hp: 32,
    hit_dice: "5d10",
    speed: "30 ft., climb 30 ft.",
    stats: [15, 15, 12, 6, 10, 6],
    skillsaves: [
      {
        stealth: 6
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 10",
    languages: "",
    cr: "3",
    traits: [
      {
        name: "Ethereal Jaunt",
        desc: "As a bonus action, the spider can magically shift from the Material Plane to the Ethereal Plane, or vice versa.",
        attack_bonus: 0
      },
      {
        name: "Spider Climb",
        desc: "The spider can climb difficult surfaces, including upside down on ceilings, without needing to make an ability check.",
        attack_bonus: 0
      },
      {
        name: "Web Walker",
        desc: "The spider ignores movement restrictions caused by webbing.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one creature. Hit: 7 (1d10 + 2) piercing damage, and the target must make a DC 11 Constitution saving throw, taking 18 (4d8) poison damage on a failed save, or half as much damage on a successful one. If the poison damage reduces the target to 0 hit points, the target is stable but poisoned for 1 hour, even after regaining hit points, and is paralyzed while poisoned in this way.",
        attack_bonus: 4,
        damage_dice: "1d10",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Pit Fiend",
    size: "Large",
    source: "SRD",
    type: "fiend",
    subtype: "devil",
    alignment: "lawful evil",
    ac: 19,
    hp: 300,
    hit_dice: "24d10",
    speed: "30 ft., fly 60 ft.",
    stats: [26, 14, 24, 22, 18, 24],
    saves: [
      {
        dexterity: 8
      },
      {
        constitution: 13
      },
      {
        wisdom: 10
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "cold; bludgeoning, piercing, and slashing from nonmagical weapons that aren't silvered",
    damage_immunities: "fire, poison",
    condition_immunities: "poisoned",
    senses: "truesight 120 ft., passive Perception 14",
    languages: "Infernal, telepathy 120 ft.",
    cr: "20",
    traits: [
      {
        name: "Fear Aura",
        desc: "Any creature hostile to the pit fiend that starts its turn within 20 feet of the pit fiend must make a DC 21 Wisdom saving throw, unless the pit fiend is incapacitated. On a failed save, the creature is frightened until the start of its next turn. If a creature's saving throw is successful, the creature is immune to the pit fiend's Fear Aura for the next 24 hours.",
        attack_bonus: 0
      },
      {
        name: "Magic Resistance",
        desc: "The pit fiend has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      },
      {
        name: "Magic Weapons",
        desc: "The pit fiend's weapon attacks are magical.",
        attack_bonus: 0
      },
      {
        name: "Innate Spellcasting",
        desc: "The pit fiend's spellcasting ability is Charisma (spell save DC 21). The pit fiend can innately cast the following spells, requiring no material components:\nAt will: detect magic, fireball\n3/day each: hold monster, wall of fire",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The pit fiend makes four attacks: one with its bite, one with its claw, one with its mace, and one with its tail.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +14 to hit, reach 5 ft., one target. Hit: 22 (4d6 + 8) piercing damage. The target must succeed on a DC 21 Constitution saving throw or become poisoned. While poisoned in this way, the target can't regain hit points, and it takes 21 (6d6) poison damage at the start of each of its turns. The poisoned target can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success.",
        attack_bonus: 14,
        damage_dice: "4d6",
        damage_bonus: 8
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +14 to hit, reach 10 ft. , one target. Hit: 17 (2d8 + 8) slashing damage.",
        attack_bonus: 14,
        damage_dice: "2d8",
        damage_bonus: 8
      },
      {
        name: "Mace",
        desc: "Melee Weapon Attack: +14 to hit, reach 10ft., one target. Hit: 15 (2d6 + 8) bludgeoning damage plus 21 (6d6) fire damage.",
        attack_bonus: 14,
        damage_dice: "2d6",
        damage_bonus: 8
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +14 to hit, reach 10ft., one target. Hit: 24 (3d1O + 8) bludgeoning damage.",
        attack_bonus: 14,
        damage_dice: "3d10",
        damage_bonus: 8
      }
    ]
  },
  {
    name: "Planetar",
    size: "Large",
    source: "SRD",
    type: "celestial",
    subtype: "",
    alignment: "lawful good",
    ac: 19,
    hp: 200,
    hit_dice: "16d10",
    speed: "40 ft., fly 120 ft.",
    stats: [24, 20, 24, 19, 22, 25],
    saves: [
      {
        constitution: 12
      },
      {
        wisdom: 11
      },
      {
        charisma: 12
      }
    ],
    skillsaves: [
      {
        perception: 11
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "radiant; bludgeoning, piercing, and slashing from nonmagical weapons",
    damage_immunities: "",
    condition_immunities: "charmed, exhaustion, frightened",
    senses: "truesight 120 ft., passive Perception 21",
    languages: "all, telepathy 120 ft.",
    cr: "16",
    traits: [
      {
        name: "Angelic Weapons",
        desc: "The planetar's weapon attacks are magical. When the planetar hits with any weapon, the weapon deals an extra 5d8 radiant damage (included in the attack).",
        attack_bonus: 0
      },
      {
        name: "Divine Awareness",
        desc: "The planetar knows if it hears a lie.",
        attack_bonus: 0
      },
      {
        name: "Innate Spellcasting",
        desc: "The planetar's spellcasting ability is Charisma (spell save DC 20). The planetar can innately cast the following spells, requiring no material components:\nAt will: detect evil and good, invisibility (self only)\n3/day each: blade barrier, dispel evil and good, flame strike, raise dead\n1/day each: commune, control weather, insect plague",
        attack_bonus: 0
      },
      {
        name: "Magic Resistance",
        desc: "The planetar has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The planetar makes two melee attacks.",
        attack_bonus: 0
      },
      {
        name: "Greatsword",
        desc: "Melee Weapon Attack: +12 to hit, reach 5 ft., one target. Hit: 21 (4d6 + 7) slashing damage plus 22 (5d8) radiant damage.",
        attack_bonus: 12,
        damage_dice: "4d6 + 5d8",
        damage_bonus: 7
      },
      {
        name: "Healing Touch (4/Day)",
        desc: "The planetar touches another creature. The target magically regains 30 (6d8 + 3) hit points and is freed from any curse, disease, poison, blindness, or deafness.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Plesiosaurus",
    size: "Large",
    source: "SRD",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 13,
    hp: 68,
    hit_dice: "8d10",
    speed: "20 ft., swim 40 ft.",
    stats: [18, 15, 16, 2, 12, 5],
    skillsaves: [
      {
        perception: 3
      },
      {
        stealth: 4
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 13",
    languages: "",
    cr: "2",
    traits: [
      {
        name: "Hold Breath",
        desc: "The plesiosaurus can hold its breath for 1 hour.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +6 to hit, reach 10 ft., one target. Hit: 14 (3d6 + 4) piercing damage.",
        attack_bonus: 6,
        damage_dice: "3d6",
        damage_bonus: 4
      }
    ]
  },
  {
    name: "Poisonous Snake",
    size: "Tiny",
    source: "SRD",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 13,
    hp: 2,
    hit_dice: "1d4",
    speed: "30 ft., swim 30 ft.",
    stats: [2, 16, 11, 1, 10, 3],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "blindsight 10 ft., passive Perception 10",
    languages: "",
    cr: "1/8",
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 1 piercing damage, and the target must make a DC 10 Constitution saving throw, taking 5 (2d4) poison damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 5,
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Polar Bear",
    size: "Large",
    source: "SRD",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 42,
    hit_dice: "5d10",
    speed: "40 ft., swim 30 ft.",
    stats: [20, 10, 16, 2, 13, 7],
    skillsaves: [
      {
        perception: 3
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 13",
    languages: "",
    cr: "2",
    traits: [
      {
        name: "Keen Smell",
        desc: "The bear has advantage on Wisdom (Perception) checks that rely on smell.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The bear makes two attacks: one with its bite and one with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 9 (1d8 + 5) piercing damage.",
        attack_bonus: 7,
        damage_dice: "1d8",
        damage_bonus: 5
      },
      {
        name: "Claws",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 12 (2d6 + 5) slashing damage.",
        attack_bonus: 7,
        damage_dice: "2d6",
        damage_bonus: 5
      }
    ]
  },
  {
    name: "Pony",
    size: "Medium",
    source: "SRD",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 10,
    hp: 11,
    hit_dice: "2d8",
    speed: "40 ft.",
    stats: [15, 10, 13, 2, 11, 7],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 10",
    languages: "",
    cr: "1/8",
    actions: [
      {
        name: "Hooves",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 7 (2d4 + 2) bludgeoning damage.",
        attack_bonus: 4,
        damage_dice: "2d4",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Priest",
    size: "Medium",
    source: "SRD",
    type: "humanoid",
    subtype: "any race",
    alignment: "any alignment",
    ac: 13,
    hp: 27,
    hit_dice: "5d8",
    speed: "25 ft.",
    stats: [10, 10, 12, 13, 16, 13],
    skillsaves: [
      {
        medicine: 7
      },
      {
        persuasion: 3
      },
      {
        religion: 4
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 13",
    languages: "any two languages",
    cr: "2",
    traits: [
      {
        name: "Divine Eminence",
        desc: "As a bonus action, the priest can expend a spell slot to cause its melee weapon attacks to magically deal an extra 10 (3d6) radiant damage to a target on a hit. This benefit lasts until the end of the turn. If the priest expends a spell slot of 2nd level or higher, the extra damage increases by 1d6 for each level above 1st.",
        attack_bonus: 0,
        damage_dice: "3d6"
      }
    ],
    actions: [
      {
        name: "Mace",
        desc: "Melee Weapon Attack: +2 to hit, reach 5 ft., one target. Hit: 3 (1d6) bludgeoning damage.",
        attack_bonus: 2,
        damage_dice: "1d6"
      }
    ],
    spells: [
      "The priest is a 5th-level spellcaster. Its spellcasting ability is Wisdom (spell save DC 13, +5 to hit with spell attacks). The priest has the following cleric spells prepared:",
      {
        "Cantrips (at will)": "light, sacred flame, thaumaturgy"
      },
      {
        "1st level (4 slots)": "cure wounds, guiding bolt, sanctuary"
      },
      {
        "2nd level (3 slots)": "lesser restoration, spiritual weapon"
      },
      {
        "3rd level (2 slots)": "dispel magic, spirit guardians"
      }
    ]
  },
  {
    name: "Pseudodragon",
    size: "Tiny",
    source: "SRD",
    type: "dragon",
    subtype: "",
    alignment: "neutral good",
    ac: 13,
    hp: 7,
    hit_dice: "2d4",
    speed: "15 ft., fly 60 ft.",
    stats: [6, 15, 13, 10, 12, 10],
    skillsaves: [
      {
        perception: 3
      },
      {
        stealth: 4
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "blindsight 10 ft., darkvision 60 ft., passive Perception 13",
    languages: "understands Common and Draconic but can't speak",
    cr: "1/4",
    traits: [
      {
        name: "Keen Senses",
        desc: "The pseudodragon has advantage on Wisdom (Perception) checks that rely on sight, hearing, or smell.",
        attack_bonus: 0
      },
      {
        name: "Magic Resistance",
        desc: "The pseudodragon has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      },
      {
        name: "Limited Telepathy",
        desc: "The pseudodragon can magically communicate simple ideas, emotions, and images telepathically with any creature within 100 ft. of it that can understand a language.",
        attack_bonus: 0
      },
      {
        name: "Variant: Familiar",
        desc: "The pseudodragon can serve another creature as a familiar, forming a magic, telepathic bond with that willing companion. While the two are bonded, the companion can sense what the pseudodragon senses as long as they are within 1 mile of each other. While the pseudodragon is within 10 feet of its companion, the companion shares the pseudodragon's Magic Resistance trait. At any time and for any reason, the pseudodragon can end its service as a familiar, ending the telepathic bond.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 4 (1d4 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d4",
        damage_bonus: 2
      },
      {
        name: "Sting",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one creature. Hit: 4 (1d4 + 2) piercing damage, and the target must succeed on a DC 11 Constitution saving throw or become poisoned for 1 hour. If the saving throw fails by 5 or more, the target falls unconscious for the same duration, or until it takes damage or another creature uses an action to shake it awake.",
        attack_bonus: 4,
        damage_dice: "1d4",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Purple Worm",
    size: "Gargantuan",
    source: "SRD",
    type: "monstrosity",
    subtype: "",
    alignment: "unaligned",
    ac: 18,
    hp: 247,
    hit_dice: "15d20",
    speed: "50 ft., burrow 30 ft.",
    stats: [28, 7, 22, 1, 8, 4],
    saves: [
      {
        constitution: 11
      },
      {
        wisdom: 4
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "blindsight 30 ft., tremorsense 60 ft., passive Perception 9",
    languages: "",
    cr: "15",
    traits: [
      {
        name: "Tunneler",
        desc: "The worm can burrow through solid rock at half its burrow speed and leaves a 10-foot-diameter tunnel in its wake.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The worm makes two attacks: one with its bite and one with its stinger.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +9 to hit, reach 10 ft., one target. Hit: 22 (3d8 + 9) piercing damage. If the target is a Large or smaller creature, it must succeed on a DC 19 Dexterity saving throw or be swallowed by the worm. A swallowed creature is blinded and restrained, it has total cover against attacks and other effects outside the worm, and it takes 21 (6d6) acid damage at the start of each of the worm's turns.\nIf the worm takes 30 damage or more on a single turn from a creature inside it, the worm must succeed on a DC 21 Constitution saving throw at the end of that turn or regurgitate all swallowed creatures, which fall prone in a space within 10 feet of the worm. If the worm dies, a swallowed creature is no longer restrained by it and can escape from the corpse by using 20 feet of movement, exiting prone.",
        attack_bonus: 9,
        damage_dice: "3d8",
        damage_bonus: 9
      },
      {
        name: "Tail Stinger",
        desc: "Melee Weapon Attack: +9 to hit, reach 10 ft., one creature. Hit: 19 (3d6 + 9) piercing damage, and the target must make a DC 19 Constitution saving throw, taking 42 (12d6) poison damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 9,
        damage_dice: "3d6",
        damage_bonus: 9
      }
    ]
  },
  {
    name: "Quasit",
    size: "Tiny",
    source: "SRD",
    type: "fiend",
    subtype: "demon",
    alignment: "chaotic evil",
    ac: 13,
    hp: 7,
    hit_dice: "3d4",
    speed: "40 ft.",
    stats: [5, 17, 10, 7, 10, 10],
    skillsaves: [
      {
        stealth: 5
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "cold; fire; lightning; bludgeoning, piercing, and slashing from nonmagical weapons",
    damage_immunities: "poison",
    condition_immunities: "poisoned",
    senses: "darkvision 120 ft., passive Perception 10",
    languages: "Abyssal, Common",
    cr: "1",
    traits: [
      {
        name: "Shapechanger",
        desc: "The quasit can use its action to polymorph into a beast form that resembles a bat (speed 10 ft. fly 40 ft.), a centipede (40 ft., climb 40 ft.), or a toad (40 ft., swim 40 ft.), or back into its true form . Its statistics are the same in each form, except for the speed changes noted. Any equipment it is wearing or carrying isn't transformed . It reverts to its true form if it dies.",
        attack_bonus: 0
      },
      {
        name: "Magic Resistance",
        desc: "The quasit has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      },
      {
        name: "Variant: Familiar",
        desc: "The quasit can serve another creature as a familiar, forming a telepathic bond with its willing master. While the two are bonded, the master can sense what the quasit senses as long as they are within 1 mile of each other. While the quasit is within 10 feet of its master, the master shares the quasit's Magic Resistance trait. At any time and for any reason, the quasit can end its service as a familiar, ending the telepathic bond.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Claw (Bite in Beast Form)",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft ., one target. Hit: 5 (1d4 + 3) piercing damage, and the target must succeed on a DC 10 Constitution saving throw or take 5 (2d4) poison damage and become poisoned for 1 minute. The target can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success.",
        attack_bonus: 4,
        damage_dice: "1d4",
        damage_bonus: 3
      },
      {
        name: "Scare (1/day)",
        desc: "One creature of the quasit's choice within 20 ft. of it must succeed on a DC 10 Wisdom saving throw or be frightened for 1 minute. The target can repeat the saving throw at the end of each of its turns, with disadvantage if the quasit is within line of sight, ending the effect on itself on a success.",
        attack_bonus: 0
      },
      {
        name: "Invisibility",
        desc: "The quasit magically turns invisible until it attacks or uses Scare, or until its concentration ends (as if concentrating on a spell). Any equipment the quasit wears or carries is invisible with it.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Quipper",
    size: "Tiny",
    source: "SRD",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 13,
    hp: 1,
    hit_dice: "1d4",
    speed: "swim 40 ft.",
    stats: [2, 16, 9, 1, 7, 2],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 8",
    languages: "",
    cr: "0",
    traits: [
      {
        name: "Blood Frenzy",
        desc: "The quipper has advantage on melee attack rolls against any creature that doesn't have all its hit points.",
        attack_bonus: 0
      },
      {
        name: "Water Breathing",
        desc: "The quipper can breathe only underwater.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 1 piercing damage.",
        attack_bonus: 5,
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Rakshasa",
    size: "Medium",
    source: "SRD",
    type: "fiend",
    subtype: "",
    alignment: "lawful evil",
    ac: 16,
    hp: 110,
    hit_dice: "13d8",
    speed: "40 ft.",
    stats: [14, 17, 18, 13, 16, 20],
    skillsaves: [
      {
        deception: 10
      },
      {
        insight: 8
      }
    ],
    damage_vulnerabilities: "piercing from magic weapons wielded by good creatures",
    damage_resistances: "",
    damage_immunities: "bludgeoning, piercing, and slashing from nonmagical weapons",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 13",
    languages: "Common, Infernal",
    cr: "13",
    traits: [
      {
        name: "Limited Magic Immunity",
        desc: "The rakshasa can't be affected or detected by spells of 6th level or lower unless it wishes to be. It has advantage on saving throws against all other spells and magical effects.",
        attack_bonus: 0
      },
      {
        name: "Innate Spellcasting",
        desc: "The rakshasa's innate spellcasting ability is Charisma (spell save DC 18, +10 to hit with spell attacks). The rakshasa can innately cast the following spells, requiring no material components:\n\nAt will: detect thoughts, disguise self, mage hand, minor illusion\n3/day each: charm person, detect magic, invisibility, major image, suggestion\n1/day each: dominate person, fly, plane shift, true seeing",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The rakshasa makes two claw attacks",
        attack_bonus: 0
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 9 (2d6 + 2) slashing damage, and the target is cursed if it is a creature. The magical curse takes effect whenever the target takes a short or long rest, filling the target's thoughts with horrible images and dreams. The cursed target gains no benefit from finishing a short or long rest. The curse lasts until it is lifted by a remove curse spell or similar magic.",
        attack_bonus: 7,
        damage_dice: "2d6",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Rat",
    size: "Tiny",
    source: "SRD",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 10,
    hp: 1,
    hit_dice: "1d4",
    speed: "20 ft.",
    stats: [2, 11, 9, 2, 10, 4],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 30 ft., passive Perception 10",
    languages: "",
    cr: "0",
    traits: [
      {
        name: "Keen Smell",
        desc: "The rat has advantage on Wisdom (Perception) checks that rely on smell.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +0 to hit, reach 5 ft., one target. Hit: 1 piercing damage.",
        attack_bonus: 0,
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Raven",
    size: "Tiny",
    source: "SRD",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 1,
    hit_dice: "1d4",
    speed: "10 ft., fly 50 ft.",
    stats: [2, 14, 8, 2, 12, 6],
    skillsaves: [
      {
        perception: 3
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 13",
    languages: "",
    cr: "0",
    traits: [
      {
        name: "Mimicry",
        desc: "The raven can mimic simple sounds it has heard, such as a person whispering, a baby crying, or an animal chittering. A creature that hears the sounds can tell they are imitations with a successful DC 10 Wisdom (Insight) check.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Beak",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 1 piercing damage.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Red Dragon Wyrmling",
    size: "Medium",
    source: "SRD",
    type: "dragon",
    subtype: "",
    alignment: "chaotic evil",
    ac: 17,
    hp: 75,
    hit_dice: "10d8",
    speed: "30 ft., climb 30 ft., fly 60 ft.",
    stats: [19, 10, 17, 12, 11, 15],
    saves: [
      {
        dexterity: 2
      },
      {
        constitution: 5
      },
      {
        wisdom: 2
      },
      {
        charisma: 4
      }
    ],
    skillsaves: [
      {
        perception: 4
      },
      {
        stealth: 2
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "fire",
    condition_immunities: "",
    senses: "blindsight 10 ft., darkvision 60 ft., passive Perception 14",
    languages: "Draconic",
    cr: "4",
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 9 (1d10 + 4) piercing damage plus 3 (1d6) fire damage.",
        attack_bonus: 6,
        damage_dice: "1d10 + 1d6",
        damage_bonus: 4
      },
      {
        name: "Fire Breath (Recharge 5-6)",
        desc: "The dragon exhales fire in a 15-foot cone. Each creature in that area must make a DC 13 Dexterity saving throw, taking 24 (7d6) fire damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "7d6"
      }
    ]
  },
  {
    name: "Reef Shark",
    size: "Medium",
    source: "SRD",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 22,
    hit_dice: "4d8",
    speed: "swim 40 ft.",
    stats: [14, 13, 13, 1, 10, 4],
    skillsaves: [
      {
        perception: 2
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "blindsight 30 ft., passive Perception 12",
    languages: "",
    cr: "1/2",
    traits: [
      {
        name: "Pack Tactics",
        desc: "The shark has advantage on an attack roll against a creature if at least one of the shark's allies is within 5 ft. of the creature and the ally isn't incapacitated.",
        attack_bonus: 0
      },
      {
        name: "Water Breathing",
        desc: "The shark can breathe only underwater.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 6 (1d8 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d8",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Remorhaz",
    size: "Huge",
    source: "SRD",
    type: "monstrosity",
    subtype: "",
    alignment: "unaligned",
    ac: 17,
    hp: 195,
    hit_dice: "17d12",
    speed: "30 ft., burrow 20 ft.",
    stats: [24, 13, 21, 4, 10, 5],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "cold, fire",
    condition_immunities: "",
    senses: "darkvision 60 ft., tremorsense 60 ft., passive Perception 10",
    languages: "",
    cr: "11",
    traits: [
      {
        name: "Heated Body",
        desc: "A creature that touches the remorhaz or hits it with a melee attack while within 5 feet of it takes 10 (3d6) fire damage.",
        attack_bonus: 0,
        damage_dice: "3d6"
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +11 to hit, reach 10 ft., one target. Hit: 40 (6d10 + 7) piercing damage plus 10 (3d6) fire damage. If the target is a creature, it is grappled (escape DC 17). Until this grapple ends, the target is restrained, and the remorhaz can't bite another target.",
        attack_bonus: 11,
        damage_dice: "6d10 + 3d6",
        damage_bonus: 7
      },
      {
        name: "Swallow",
        desc: "The remorhaz makes one bite attack against a Medium or smaller creature it is grappling. If the attack hits, that creature takes the bite's damage and is swallowed, and the grapple ends. While swallowed, the creature is blinded and restrained, it has total cover against attacks and other effects outside the remorhaz, and it takes 21 (6d6) acid damage at the start of each of the remorhaz's turns.\nIf the remorhaz takes 30 damage or more on a single turn from a creature inside it, the remorhaz must succeed on a DC 15 Constitution saving throw at the end of that turn or regurgitate all swallowed creatures, which fall prone in a space within 10 feet oft he remorhaz. If the remorhaz dies, a swallowed creature is no longer restrained by it and can escape from the corpse using 15 feet of movement, exiting prone.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Rhinoceros",
    size: "Large",
    source: "SRD",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 11,
    hp: 45,
    hit_dice: "6d10",
    speed: "40 ft.",
    stats: [21, 8, 15, 2, 12, 6],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 11",
    languages: "",
    cr: "2",
    traits: [
      {
        name: "Charge",
        desc: "If the rhinoceros moves at least 20 ft. straight toward a target and then hits it with a gore attack on the same turn, the target takes an extra 9 (2d8) bludgeoning damage. If the target is a creature, it must succeed on a DC 15 Strength saving throw or be knocked prone.",
        attack_bonus: 0,
        damage_dice: "2d8"
      }
    ],
    actions: [
      {
        name: "Gore",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 14 (2d8 + 5) bludgeoning damage.",
        attack_bonus: 7,
        damage_dice: "2d8",
        damage_bonus: 5
      }
    ]
  },
  {
    name: "Riding Horse",
    size: "Large",
    source: "SRD",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 10,
    hp: 13,
    hit_dice: "2d10",
    speed: "60 ft.",
    stats: [16, 10, 12, 2, 11, 7],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 10",
    languages: "",
    cr: "1/4",
    actions: [
      {
        name: "Hooves",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 8 (2d4 + 3) bludgeoning damage.",
        attack_bonus: 5,
        damage_dice: "2d4",
        damage_bonus: 3
      }
    ]
  },
  {
    name: "Roc",
    size: "Gargantuan",
    source: "SRD",
    type: "monstrosity",
    subtype: "",
    alignment: "unaligned",
    ac: 15,
    hp: 248,
    hit_dice: "16d20",
    speed: "20 ft., fly 120 ft.",
    stats: [28, 10, 20, 3, 10, 9],
    saves: [
      {
        dexterity: 4
      },
      {
        constitution: 9
      },
      {
        wisdom: 4
      },
      {
        charisma: 3
      }
    ],
    skillsaves: [
      {
        perception: 4
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 14",
    languages: "",
    cr: "11",
    traits: [
      {
        name: "Keen Sight",
        desc: "The roc has advantage on Wisdom (Perception) checks that rely on sight.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The roc makes two attacks: one with its beak and one with its talons.",
        attack_bonus: 0
      },
      {
        name: "Beak",
        desc: "Melee Weapon Attack: +13 to hit, reach 10 ft., one target. Hit: 27 (4d8 + 9) piercing damage.",
        attack_bonus: 13,
        damage_dice: "4d8",
        damage_bonus: 9
      },
      {
        name: "Talons",
        desc: "Melee Weapon Attack: +13 to hit, reach 5 ft., one target. Hit: 23 (4d6 + 9) slashing damage, and the target is grappled (escape DC 19). Until this grapple ends, the target is restrained, and the roc can't use its talons on another target.",
        attack_bonus: 13,
        damage_dice: "4d6",
        damage_bonus: 9
      }
    ]
  },
  {
    name: "Roper",
    size: "Large",
    source: "SRD",
    type: "monstrosity",
    subtype: "",
    alignment: "neutral evil",
    ac: 20,
    hp: 93,
    hit_dice: "11d10",
    speed: "10 ft., climb 10 ft.",
    stats: [18, 8, 17, 7, 16, 6],
    skillsaves: [
      {
        perception: 6
      },
      {
        stealth: 5
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 16",
    languages: "",
    cr: "5",
    traits: [
      {
        name: "False Appearance",
        desc: "While the roper remains motionless, it is indistinguishable from a normal cave formation, such as a stalagmite.",
        attack_bonus: 0
      },
      {
        name: "Grasping Tendrils",
        desc: "The roper can have up to six tendrils at a time. Each tendril can be attacked (AC 20; 10 hit points; immunity to poison and psychic damage). Destroying a tendril deals no damage to the roper, which can extrude a replacement tendril on its next turn. A tendril can also be broken if a creature takes an action and succeeds on a DC 15 Strength check against it.",
        attack_bonus: 0
      },
      {
        name: "Spider Climb",
        desc: "The roper can climb difficult surfaces, including upside down on ceilings, without needing to make an ability check.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The roper makes four attacks with its tendrils, uses Reel, and makes one attack with its bite.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 22 (4d8 + 4) piercing damage.",
        attack_bonus: 7,
        damage_dice: "4d8",
        damage_bonus: 4
      },
      {
        name: "Tendril",
        desc: "Melee Weapon Attack: +7 to hit, reach 50 ft., one creature. Hit: The target is grappled (escape DC 15). Until the grapple ends, the target is restrained and has disadvantage on Strength checks and Strength saving throws, and the roper can't use the same tendril on another target.",
        attack_bonus: 7
      },
      {
        name: "Reel",
        desc: "The roper pulls each creature grappled by it up to 25 ft. straight toward it.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Rug of Smothering",
    size: "Large",
    source: "SRD",
    type: "construct",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 33,
    hit_dice: "6d10",
    speed: "10 ft.",
    stats: [17, 14, 10, 1, 3, 1],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "poison, psychic",
    condition_immunities: "blinded, charmed, deafened, frightened, paralyzed, petrified, poisoned",
    senses: "blindsight 60 ft. (blind beyond this radius), passive Perception 6",
    languages: "",
    cr: "2",
    traits: [
      {
        name: "Antimagic Susceptibility",
        desc: "The rug is incapacitated while in the area of an antimagic field. If targeted by dispel magic, the rug must succeed on a Constitution saving throw against the caster's spell save DC or fall unconscious for 1 minute.",
        attack_bonus: 0
      },
      {
        name: "Damage Transfer",
        desc: "While it is grappling a creature, the rug takes only half the damage dealt to it, and the creature grappled by the rug takes the other half.",
        attack_bonus: 0
      },
      {
        name: "False Appearance",
        desc: "While the rug remains motionless, it is indistinguishable from a normal rug.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Smother",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one Medium or smaller creature. Hit: The creature is grappled (escape DC 13). Until this grapple ends, the target is restrained, blinded, and at risk of suffocating, and the rug can't smother another target. In addition, at the start of each of the target's turns, the target takes 10 (2d6 + 3) bludgeoning damage.",
        attack_bonus: 0,
        damage_dice: "2d6",
        damage_bonus: 3
      }
    ]
  },
  {
    name: "Rust Monster",
    size: "Medium",
    source: "SRD",
    type: "monstrosity",
    subtype: "",
    alignment: "unaligned",
    ac: 14,
    hp: 27,
    hit_dice: "5d8",
    speed: "40 ft.",
    stats: [13, 12, 13, 2, 13, 6],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 11",
    languages: "",
    cr: "1/2",
    traits: [
      {
        name: "Iron Scent",
        desc: "The rust monster can pinpoint, by scent, the location of ferrous metal within 30 feet of it.",
        attack_bonus: 0
      },
      {
        name: "Rust Metal",
        desc: "Any nonmagical weapon made of metal that hits the rust monster corrodes. After dealing damage, the weapon takes a permanent and cumulative -1 penalty to damage rolls. If its penalty drops to -5, the weapon is destroyed. Non magical ammunition made of metal that hits the rust monster is destroyed after dealing damage.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 5 (1d8 + 1) piercing damage.",
        attack_bonus: 3,
        damage_dice: "1d8",
        damage_bonus: 1
      },
      {
        name: "Antennae",
        desc: "The rust monster corrodes a nonmagical ferrous metal object it can see within 5 feet of it. If the object isn't being worn or carried, the touch destroys a 1-foot cube of it. If the object is being worn or carried by a creature, the creature can make a DC 11 Dexterity saving throw to avoid the rust monster's touch.\nIf the object touched is either metal armor or a metal shield being worn or carried, its takes a permanent and cumulative -1 penalty to the AC it offers. Armor reduced to an AC of 10 or a shield that drops to a +0 bonus is destroyed. If the object touched is a held metal weapon, it rusts as described in the Rust Metal trait.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Saber-Toothed Tiger",
    size: "Large",
    source: "SRD",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 52,
    hit_dice: "7d10",
    speed: "40 ft.",
    stats: [18, 14, 15, 3, 12, 8],
    skillsaves: [
      {
        perception: 3
      },
      {
        stealth: 6
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 13",
    languages: "",
    cr: "2",
    traits: [
      {
        name: "Keen Smell",
        desc: "The tiger has advantage on Wisdom (Perception) checks that rely on smell.",
        attack_bonus: 0
      },
      {
        name: "Pounce",
        desc: "If the tiger moves at least 20 ft. straight toward a creature and then hits it with a claw attack on the same turn, that target must succeed on a DC 14 Strength saving throw or be knocked prone. If the target is prone, the tiger can make one bite attack against it as a bonus action.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 10 (1d10 + 5) piercing damage.",
        attack_bonus: 6,
        damage_dice: "1d10",
        damage_bonus: 5
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 12 (2d6 + 5) slashing damage.",
        attack_bonus: 6,
        damage_dice: "2d6",
        damage_bonus: 5
      }
    ]
  },
  {
    name: "Sahuagin",
    size: "Medium",
    source: "SRD",
    type: "humanoid",
    subtype: "sahuagin",
    alignment: "lawful evil",
    ac: 12,
    hp: 22,
    hit_dice: "4d8",
    speed: "30 ft., swim 40 ft.",
    stats: [13, 11, 12, 12, 13, 9],
    skillsaves: [
      {
        perception: 5
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 120 ft., passive Perception 15",
    languages: "Sahuagin",
    cr: "1/2",
    traits: [
      {
        name: "Blood Frenzy",
        desc: "The sahuagin has advantage on melee attack rolls against any creature that doesn't have all its hit points.",
        attack_bonus: 0
      },
      {
        name: "Limited Amphibiousness",
        desc: "The sahuagin can breathe air and water, but it needs to be submerged at least once every 4 hours to avoid suffocating.",
        attack_bonus: 0
      },
      {
        name: "Shark Telepathy",
        desc: "The sahuagin can magically command any shark within 120 feet of it, using a limited telepathy.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The sahuagin makes two melee attacks: one with its bite and one with its claws or spear.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 3 (1d4 + 1) piercing damage.",
        attack_bonus: 3,
        damage_dice: "1d4",
        damage_bonus: 1
      },
      {
        name: "Claws",
        desc: "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 3 (1d4 + 1) slashing damage.",
        attack_bonus: 3,
        damage_dice: "1d4",
        damage_bonus: 1
      },
      {
        name: "Spear",
        desc: "Melee or Ranged Weapon Attack: +3 to hit, reach 5 ft. or range 20/60 ft., one target. Hit: 4 (1d6 + 1) piercing damage, or 5 (1d8 + 1) piercing damage if used with two hands to make a melee attack.",
        attack_bonus: 3,
        damage_dice: "1d6",
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Salamander",
    size: "Large",
    source: "SRD",
    type: "elemental",
    subtype: "",
    alignment: "neutral evil",
    ac: 15,
    hp: 90,
    hit_dice: "12d10",
    speed: "30 ft.",
    stats: [18, 14, 15, 11, 10, 12],
    damage_vulnerabilities: "cold",
    damage_resistances: "bludgeoning, piercing, and slashing from nonmagical weapons",
    damage_immunities: "fire",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 10",
    languages: "Ignan",
    cr: "5",
    traits: [
      {
        name: "Heated Body",
        desc: "A creature that touches the salamander or hits it with a melee attack while within 5 ft. of it takes 7 (2d6) fire damage.",
        attack_bonus: 0,
        damage_dice: "2d6"
      },
      {
        name: "Heated Weapons",
        desc: "Any metal melee weapon the salamander wields deals an extra 3 (1d6) fire damage on a hit (included in the attack).",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The salamander makes two attacks: one with its spear and one with its tail.",
        attack_bonus: 0
      },
      {
        name: "Spear",
        desc: "Melee or Ranged Weapon Attack: +7 to hit, reach 5 ft. or range 20 ft./60 ft., one target. Hit: 11 (2d6 + 4) piercing damage, or 13 (2d8 + 4) piercing damage if used with two hands to make a melee attack, plus 3 (1d6) fire damage.",
        attack_bonus: 7,
        damage_dice: "2d6",
        damage_bonus: 4
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +7 to hit, reach 10 ft., one target. Hit: 11 (2d6 + 4) bludgeoning damage plus 7 (2d6) fire damage, and the target is grappled (escape DC 14). Until this grapple ends, the target is restrained, the salamander can automatically hit the target with its tail, and the salamander can't make tail attacks against other targets.",
        attack_bonus: 7,
        damage_dice: "2d6 + 2d6",
        damage_bonus: 4
      }
    ]
  },
  {
    name: "Satyr",
    size: "Medium",
    source: "SRD",
    type: "fey",
    subtype: "",
    alignment: "chaotic neutral",
    ac: 14,
    hp: 31,
    hit_dice: "7d8",
    speed: "40 ft.",
    stats: [12, 16, 11, 12, 10, 14],
    skillsaves: [
      {
        perception: 2
      },
      {
        performance: 6
      },
      {
        stealth: 5
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 12",
    languages: "Common, Elvish, Sylvan",
    cr: "1/2",
    traits: [
      {
        name: "Magic Resistance",
        desc: "The satyr has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Ram",
        desc: "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 6 (2d4 + 1) bludgeoning damage.",
        attack_bonus: 3,
        damage_dice: "2d4",
        damage_bonus: 1
      },
      {
        name: "Shortsword",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 6 (1 d6 + 3) piercing damage.",
        attack_bonus: 5,
        damage_dice: "1d6",
        damage_bonus: 3
      },
      {
        name: "Shortbow",
        desc: "Ranged Weapon Attack: +5 to hit, range 80/320 ft., one target. Hit: 6 (1d6 + 3) piercing damage.",
        attack_bonus: 5,
        damage_dice: "1d6",
        damage_bonus: 3
      },
      {
        name: "Variant: Panpipes",
        desc: "Gentle Lullaby. The creature falls asleep and is unconscious for 1 minute. The effect ends if the creature takes damage or if someone takes an action to shake the creature awake.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Scorpion",
    size: "Tiny",
    source: "SRD",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 11,
    hp: 1,
    hit_dice: "1d4",
    speed: "10 ft.",
    stats: [2, 11, 8, 1, 8, 2],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "blindsight 10 ft., passive Perception 9",
    languages: "",
    cr: "0",
    actions: [
      {
        name: "Sting",
        desc: "Melee Weapon Attack: +2 to hit, reach 5 ft., one creature. Hit: 1 piercing damage, and the target must make a DC 9 Constitution saving throw, taking 4 (1d8) poison damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 2,
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Scout",
    size: "Medium",
    source: "SRD",
    type: "humanoid",
    subtype: "any race",
    alignment: "any alignment",
    ac: 13,
    hp: 16,
    hit_dice: "3d8",
    speed: "30 ft.",
    stats: [11, 14, 12, 11, 13, 11],
    skillsaves: [
      {
        nature: 4
      },
      {
        perception: 5
      },
      {
        stealth: 6
      },
      {
        survival: 5
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 15",
    languages: "any one language (usually Common)",
    cr: "1/2",
    traits: [
      {
        name: "Keen Hearing and Sight",
        desc: "The scout has advantage on Wisdom (Perception) checks that rely on hearing or sight.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The scout makes two melee attacks or two ranged attacks.",
        attack_bonus: 0
      },
      {
        name: "Shortsword",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 5 (1d6 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d6",
        damage_bonus: 2
      },
      {
        name: "Longbow",
        desc: "Ranged Weapon Attack: +4 to hit, ranged 150/600 ft., one target. Hit: 6 (1d8 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d8",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Sea Hag",
    size: "Medium",
    source: "SRD",
    type: "fey",
    subtype: "",
    alignment: "chaotic evil",
    ac: 14,
    hp: 52,
    hit_dice: "7d8",
    speed: "30 ft., swim 40 ft.",
    stats: [16, 13, 16, 12, 12, 13],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 11",
    languages: "Aquan, Common, Giant",
    cr: "2",
    traits: [
      {
        name: "Amphibious",
        desc: "The hag can breathe air and water.",
        attack_bonus: 0
      },
      {
        name: "Horrific Appearance",
        desc: "Any humanoid that starts its turn within 30 feet of the hag and can see the hag's true form must make a DC 11 Wisdom saving throw. On a failed save, the creature is frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, with disadvantage if the hag is within line of sight, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the hag's Horrific Appearance for the next 24 hours.\nUnless the target is surprised or the revelation of the hag's true form is sudden, the target can avert its eyes and avoid making the initial saving throw. Until the start of its next turn, a creature that averts its eyes has disadvantage on attack rolls against the hag.",
        attack_bonus: 0
      },
      {
        name: "Hag Coven",
        desc: "When hags must work together, they form covens, in spite of their selfish natures. A coven is made up of hags of any type, all of whom are equals within the group. However, each of the hags continues to desire more personal power.\nA coven consists of three hags so that any arguments between two hags can be settled by the third. If more than three hags ever come together, as might happen if two covens come into conflict, the result is usually chaos.",
        attack_bonus: 0
      },
      {
        name: "Shared Spellcasting (Coven Only)",
        desc: "While all three members of a hag coven are within 30 feet of one another, they can each cast the following spells from the wizard's spell list but must share the spell slots among themselves:\n\n\u2022 1st level (4 slots): identify, ray of sickness\n\u2022 2nd level (3 slots): hold person, locate object\n\u2022 3rd level (3 slots): bestow curse, counterspell, lightning bolt\n\u2022 4th level (3 slots): phantasmal killer, polymorph\n\u2022 5th level (2 slots): contact other plane, scrying\n\u2022 6th level (1 slot): eye bite\n\nFor casting these spells, each hag is a 12th-level spellcaster that uses Intelligence as her spellcasting ability. The spell save DC is 12+the hag's Intelligence modifier, and the spell attack bonus is 4+the hag's Intelligence modifier.",
        attack_bonus: 0
      },
      {
        name: "Hag Eye (Coven Only)",
        desc: "A hag coven can craft a magic item called a hag eye, which is made from a real eye coated in varnish and often fitted to a pendant or other wearable item. The hag eye is usually entrusted to a minion for safekeeping and transport. A hag in the coven can take an action to see what the hag eye sees if the hag eye is on the same plane of existence. A hag eye has AC 10, 1 hit point, and darkvision with a radius of 60 feet. If it is destroyed, each coven member takes 3d10 psychic damage and is blinded for 24 hours.\nA hag coven can have only one hag eye at a time, and creating a new one requires all three members of the coven to perform a ritual. The ritual takes 1 hour, and the hags can't perform it while blinded. During the ritual, if the hags take any action other than performing the ritual, they must start over.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Claws",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 10 (2d6 + 3) slashing damage.",
        attack_bonus: 5,
        damage_dice: "2d6",
        damage_bonus: 3
      },
      {
        name: "Death Glare",
        desc: "The hag targets one frightened creature she can see within 30 ft. of her. If the target can see the hag, it must succeed on a DC 11 Wisdom saving throw against this magic or drop to 0 hit points.",
        attack_bonus: 0
      },
      {
        name: "Illusory Appearance",
        desc: "The hag covers herself and anything she is wearing or carrying with a magical illusion that makes her look like an ugly creature of her general size and humanoid shape. The effect ends if the hag takes a bonus action to end it or if she dies.\nThe changes wrought by this effect fail to hold up to physical inspection. For example, the hag could appear to have no claws, but someone touching her hand might feel the claws. Otherwise, a creature must take an action to visually inspect the illusion and succeed on a DC 16 Intelligence (Investigation) check to discern that the hag is disguised.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Sea Horse",
    size: "Tiny",
    source: "SRD",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 11,
    hp: 1,
    hit_dice: "1d4",
    speed: "swim 20 ft.",
    stats: [1, 12, 8, 1, 10, 2],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 10",
    languages: "",
    cr: "0",
    traits: [
      {
        name: "Water Breathing",
        desc: "The sea horse can breathe only underwater.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Shadow",
    size: "Medium",
    source: "SRD",
    type: "undead",
    subtype: "",
    alignment: "chaotic evil",
    ac: 12,
    hp: 16,
    hit_dice: "3d8",
    speed: "40 ft.",
    stats: [6, 14, 13, 6, 10, 8],
    skillsaves: [
      {
        stealth: 4
      }
    ],
    damage_vulnerabilities: "radiant",
    damage_resistances: "acid, cold, fire, lightning, thunder; bludgeoning, piercing, and slashing from nonmagical weapons",
    damage_immunities: "necrotic, poison",
    condition_immunities: "exhaustion, frightened, grappled, paralyzed, petrified, poisoned, prone, restrained",
    senses: "darkvision 60 ft., passive Perception 10",
    languages: "",
    cr: "1/2",
    traits: [
      {
        name: "Amorphous",
        desc: "The shadow can move through a space as narrow as 1 inch wide without squeezing.",
        attack_bonus: 0
      },
      {
        name: "Shadow Stealth",
        desc: "While in dim light or darkness, the shadow can take the Hide action as a bonus action. Its stealth bonus is also improved to +6.",
        attack_bonus: 0
      },
      {
        name: "Sunlight Weakness",
        desc: "While in sunlight, the shadow has disadvantage on attack rolls, ability checks, and saving throws.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Strength Drain",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one creature. Hit: 9 (2d6 + 2) necrotic damage, and the target's Strength score is reduced by 1d4. The target dies if this reduces its Strength to 0. Otherwise, the reduction lasts until the target finishes a short or long rest.\nIf a non-evil humanoid dies from this attack, a new shadow rises from the corpse 1d4 hours later.",
        attack_bonus: 4,
        damage_dice: "2d6",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Shambling Mound",
    size: "Large",
    source: "SRD",
    type: "plant",
    subtype: "",
    alignment: "unaligned",
    ac: 15,
    hp: 136,
    hit_dice: "16d10",
    speed: "20 ft., swim 20 ft.",
    stats: [18, 8, 16, 5, 10, 5],
    skillsaves: [
      {
        stealth: 2
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "cold, fire",
    damage_immunities: "lightning",
    condition_immunities: "blinded, deafened, exhaustion",
    senses: "blindsight 60 ft. (blind beyond this radius), passive Perception 10",
    languages: "",
    cr: "5",
    traits: [
      {
        name: "Lightning Absorption",
        desc: "Whenever the shambling mound is subjected to lightning damage, it takes no damage and regains a number of hit points equal to the lightning damage dealt.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The shambling mound makes two slam attacks. If both attacks hit a Medium or smaller target, the target is grappled (escape DC 14), and the shambling mound uses its Engulf on it.",
        attack_bonus: 0
      },
      {
        name: "Slam",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 13 (2d8 + 4) bludgeoning damage.",
        attack_bonus: 7,
        damage_dice: "2d8",
        damage_bonus: 4
      },
      {
        name: "Engulf",
        desc: "The shambling mound engulfs a Medium or smaller creature grappled by it. The engulfed target is blinded, restrained, and unable to breathe, and it must succeed on a DC 14 Constitution saving throw at the start of each of the mound's turns or take 13 (2d8 + 4) bludgeoning damage. If the mound moves, the engulfed target moves with it. The mound can have only one creature engulfed at a time.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Shield Guardian",
    size: "Large",
    source: "SRD",
    type: "construct",
    subtype: "",
    alignment: "unaligned",
    ac: 17,
    hp: 142,
    hit_dice: "15d10",
    speed: "30 ft.",
    stats: [18, 8, 18, 7, 10, 3],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "poison",
    condition_immunities: "charmed, exhaustion, frightened, paralyzed, poisoned",
    senses: "blindsight 10 ft., darkvision 60 ft., passive Perception 10",
    languages: "understands commands given in any language but can't speak",
    cr: "7",
    traits: [
      {
        name: "Bound",
        desc: "The shield guardian is magically bound to an amulet. As long as the guardian and its amulet are on the same plane of existence, the amulet's wearer can telepathically call the guardian to travel to it, and the guardian knows the distance and direction to the amulet. If the guardian is within 60 feet of the amulet's wearer, half of any damage the wearer takes (rounded up) is transferred to the guardian.",
        attack_bonus: 0
      },
      {
        name: "Regeneration",
        desc: "The shield guardian regains 10 hit points at the start of its turn if it has at least 1 hit. point.",
        attack_bonus: 0
      },
      {
        name: "Spell Storing",
        desc: "A spellcaster who wears the shield guardian's amulet can cause the guardian to store one spell of 4th level or lower. To do so, the wearer must cast the spell on the guardian. The spell has no effect but is stored within the guardian. When commanded to do so by the wearer or when a situation arises that was predefined by the spellcaster, the guardian casts the stored spell with any parameters set by the original caster, requiring no components. When the spell is cast or a new spell is stored, any previously stored spell is lost.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The guardian makes two fist attacks.",
        attack_bonus: 0
      },
      {
        name: "Fist",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 11 (2d6 + 4) bludgeoning damage.",
        attack_bonus: 7,
        damage_dice: "2d6",
        damage_bonus: 4
      }
    ],
    reactions: [
      {
        name: "Shield",
        desc: "When a creature makes an attack against the wearer of the guardian's amulet, the guardian grants a +2 bonus to the wearer's AC if the guardian is within 5 feet of the wearer.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Shrieker",
    size: "Medium",
    source: "SRD",
    type: "plant",
    subtype: "",
    alignment: "unaligned",
    ac: 5,
    hp: 13,
    hit_dice: "3d8",
    speed: "0 ft.",
    stats: [1, 1, 10, 1, 3, 1],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "blinded, deafened, frightened",
    senses: "blindsight 30 ft. (blind beyond this radius), passive Perception 6",
    languages: "",
    cr: "0",
    traits: [
      {
        name: "False Appearance",
        desc: "While the shrieker remains motionless, it is indistinguishable from an ordinary fungus.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Shriek",
        desc: "When bright light or a creature is within 30 feet of the shrieker, it emits a shriek audible within 300 feet of it. The shrieker continues to shriek until the disturbance moves out of range and for 1d4 of the shrieker's turns afterward",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Silver Dragon Wyrmling",
    size: "Medium",
    source: "SRD",
    type: "dragon",
    subtype: "",
    alignment: "lawful good",
    ac: 17,
    hp: 45,
    hit_dice: "6d8",
    speed: "30 ft., fly 60 ft.",
    stats: [19, 10, 17, 12, 11, 15],
    saves: [
      {
        dexterity: 2
      },
      {
        constitution: 5
      },
      {
        wisdom: 2
      },
      {
        charisma: 4
      }
    ],
    skillsaves: [
      {
        perception: 4
      },
      {
        stealth: 2
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "cold",
    condition_immunities: "",
    senses: "blindsight 10 ft., darkvision 60 ft., passive Perception 14",
    languages: "Draconic",
    cr: "2",
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 9 (1d10 + 4) piercing damage.",
        attack_bonus: 6,
        damage_dice: "1d10",
        damage_bonus: 4
      },
      {
        name: "Breath Weapons (Recharge 5-6)",
        desc: "The dragon uses one of the following breath weapons.\nCold Breath. The dragon exhales an icy blast in a 15-foot cone. Each creature in that area must make a DC 13 Constitution saving throw, taking 18 (4d8) cold damage on a failed save, or half as much damage on a successful one.\nParalyzing Breath. The dragon exhales paralyzing gas in a 15-foot cone. Each creature in that area must succeed on a DC 13 Constitution saving throw or be paralyzed for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success.",
        attack_bonus: 0,
        damage_dice: "4d8"
      }
    ]
  },
  {
    name: "Skeleton",
    size: "Medium",
    source: "SRD",
    type: "undead",
    subtype: "",
    alignment: "lawful evil",
    ac: 13,
    hp: 13,
    hit_dice: "2d8",
    speed: "30 ft.",
    stats: [10, 14, 15, 6, 8, 5],
    damage_vulnerabilities: "bludgeoning",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "poisoned",
    senses: "darkvision 60 ft., passive Perception 9",
    languages: "understands all languages it spoke in life but can't speak",
    cr: "1/4",
    actions: [
      {
        name: "Shortsword",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 5 (1d6 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d6",
        damage_bonus: 2
      },
      {
        name: "Shortbow",
        desc: "Ranged Weapon Attack: +4 to hit, range 80/320 ft., one target. Hit: 5 (1d6 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d6",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Solar",
    size: "Large",
    source: "SRD",
    type: "celestial",
    subtype: "",
    alignment: "lawful good",
    ac: 21,
    hp: 243,
    hit_dice: "18d10",
    speed: "50 ft., fly 150 ft.",
    stats: [26, 22, 26, 25, 25, 30],
    saves: [
      {
        intelligence: 14
      },
      {
        wisdom: 14
      },
      {
        charisma: 17
      }
    ],
    skillsaves: [
      {
        perception: 14
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "radiant; bludgeoning, piercing, and slashing from nonmagical weapons",
    damage_immunities: "necrotic, poison",
    condition_immunities: "charmed, exhaustion, frightened, poisoned",
    senses: "truesight 120 ft., passive Perception 24",
    languages: "all, telepathy 120 ft.",
    cr: "21",
    traits: [
      {
        name: "Angelic Weapons",
        desc: "The solar's weapon attacks are magical. When the solar hits with any weapon, the weapon deals an extra 6d8 radiant damage (included in the attack).",
        attack_bonus: 0
      },
      {
        name: "Divine Awareness",
        desc: "The solar knows if it hears a lie.",
        attack_bonus: 0
      },
      {
        name: "Innate Spellcasting",
        desc: "The solar's spell casting ability is Charisma (spell save DC 25). It can innately cast the following spells, requiring no material components:\nAt will: detect evil and good, invisibility (self only)\n3/day each: blade barrier, dispel evil and good, resurrection\n1/day each: commune, control weather",
        attack_bonus: 0
      },
      {
        name: "Magic Resistance",
        desc: "The solar has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The solar makes two greatsword attacks.",
        attack_bonus: 0
      },
      {
        name: "Greatsword",
        desc: "Melee Weapon Attack: +15 to hit, reach 5 ft., one target. Hit: 22 (4d6 + 8) slashing damage plus 27 (6d8) radiant damage.",
        attack_bonus: 15,
        damage_dice: "4d6 + 6d8",
        damage_bonus: 8
      },
      {
        name: "Slaying Longbow",
        desc: "Ranged Weapon Attack: +13 to hit, range 150/600 ft., one target. Hit: 15 (2d8 + 6) piercing damage plus 27 (6d8) radiant damage. If the target is a creature that has 190 hit points or fewer, it must succeed on a DC 15 Constitution saving throw or die.",
        attack_bonus: 13,
        damage_dice: "2d8 + 6d8",
        damage_bonus: 6
      },
      {
        name: "Flying Sword",
        desc: "The solar releases its greatsword to hover magically in an unoccupied space within 5 ft. of it. If the solar can see the sword, the solar can mentally command it as a bonus action to fly up to 50 ft. and either make one attack against a target or return to the solar's hands. If the hovering sword is targeted by any effect, the solar is considered to be holding it. The hovering sword falls if the solar dies.",
        attack_bonus: 0
      },
      {
        name: "Healing Touch (4/Day)",
        desc: "The solar touches another creature. The target magically regains 40 (8d8 + 4) hit points and is freed from any curse, disease, poison, blindness, or deafness.",
        attack_bonus: 0
      }
    ],
    legendary_actions: [
      {
        name: "Teleport",
        desc: "The solar magically teleports, along with any equipment it is wearing or carrying, up to 120 ft. to an unoccupied space it can see.",
        attack_bonus: 0
      },
      {
        name: "Searing Burst (Costs 2 Actions)",
        desc: "The solar emits magical, divine energy. Each creature of its choice in a 10 -foot radius must make a DC 23 Dexterity saving throw, taking 14 (4d6) fire damage plus 14 (4d6) radiant damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0
      },
      {
        name: "Blinding Gaze (Costs 3 Actions)",
        desc: "The solar targets one creature it can see within 30 ft. of it. If the target can see it, the target must succeed on a DC 15 Constitution saving throw or be blinded until magic such as the lesser restoration spell removes the blindness.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Specter",
    size: "Medium",
    source: "SRD",
    type: "undead",
    subtype: "",
    alignment: "chaotic evil",
    ac: 12,
    hp: 22,
    hit_dice: "5d8",
    speed: "0 ft., fly 50 ft. (hover)",
    stats: [1, 14, 11, 10, 10, 11],
    damage_vulnerabilities: "",
    damage_resistances: "acid, cold, fire, lightning, thunder; bludgeoning, piercing, and slashing from nonmagical weapons",
    damage_immunities: "necrotic, poison",
    condition_immunities: "charmed, exhaustion, grappled, paralyzed, petrified, poisoned, prone, restrained, unconscious",
    senses: "darkvision 60 ft., passive Perception 10",
    languages: "understands all languages it knew in life but can't speak",
    cr: "1",
    traits: [
      {
        name: "Incorporeal Movement",
        desc: "The specter can move through other creatures and objects as if they were difficult terrain. It takes 5 (1d10) force damage if it ends its turn inside an object.",
        attack_bonus: 0
      },
      {
        name: "Sunlight Sensitivity",
        desc: "While in sunlight, the specter has disadvantage on attack rolls, as well as on Wisdom (Perception) checks that rely on sight.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Life Drain",
        desc: "Melee Spell Attack: +4 to hit, reach 5 ft., one creature. Hit: 10 (3d6) necrotic damage. The target must succeed on a DC 10 Constitution saving throw or its hit point maximum is reduced by an amount equal to the damage taken. This reduction lasts until the creature finishes a long rest. The target dies if this effect reduces its hit point maximum to 0.",
        attack_bonus: 4,
        damage_dice: "3d6"
      }
    ]
  },
  {
    name: "Spider",
    size: "Tiny",
    source: "SRD",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 1,
    hit_dice: "1d4",
    speed: "20 ft., climb 20 ft.",
    stats: [2, 14, 8, 1, 10, 2],
    skillsaves: [
      {
        stealth: 4
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 30 ft., passive Perception 12",
    languages: "",
    cr: "0",
    traits: [
      {
        name: "Spider Climb",
        desc: "The spider can climb difficult surfaces, including upside down on ceilings, without needing to make an ability check.",
        attack_bonus: 0
      },
      {
        name: "Web Sense",
        desc: "While in contact with a web, the spider knows the exact location of any other creature in contact with the same web.",
        attack_bonus: 0
      },
      {
        name: "Web Walker",
        desc: "The spider ignores movement restrictions caused by webbing.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one creature. Hit: 1 piercing damage, and the target must succeed on a DC 9 Constitution saving throw or take 2 (1d4) poison damage.",
        attack_bonus: 4,
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Spirit Naga",
    size: "Large",
    source: "SRD",
    type: "monstrosity",
    subtype: "",
    alignment: "chaotic evil",
    ac: 15,
    hp: 75,
    hit_dice: "10d10",
    speed: "40 ft.",
    stats: [18, 17, 14, 16, 15, 16],
    saves: [
      {
        dexterity: 6
      },
      {
        constitution: 5
      },
      {
        wisdom: 5
      },
      {
        charisma: 6
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "poison",
    condition_immunities: "charmed, poisoned",
    senses: "darkvision 60 ft., passive Perception 12",
    languages: "Abyssal, Common",
    cr: "8",
    traits: [
      {
        name: "Rejuvenation",
        desc: "If it dies, the naga returns to life in 1d6 days and regains all its hit points. Only a wish spell can prevent this trait from functioning.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +7 to hit, reach 10 ft., one creature. Hit: 7 (1d6 + 4) piercing damage, and the target must make a DC 13 Constitution saving throw, taking 31 (7d8) poison damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 7,
        damage_dice: "1d6",
        damage_bonus: 4
      }
    ],
    spells: [
      "The naga is a 10th-level spellcaster. Its spellcasting ability is Intelligence (spell save DC 14, +6 to hit with spell attacks), and it needs only verbal components to cast its spells. It has the following wizard spells prepared:",
      {
        "Cantrips (at will)": "mage hand, minor illusion, ray of frost"
      },
      {
        "1st level (4 slots)": "charm person, detect magic, sleep"
      },
      {
        "2nd level (3 slots)": "detect thoughts, hold person"
      },
      {
        "3rd level (3 slots)": "lightning bolt, water breathing"
      },
      {
        "4th level (3 slots)": "blight, dimension door"
      },
      {
        "5th level (2 slots)": "dominate person"
      }
    ]
  },
  {
    name: "Sprite",
    size: "Tiny",
    source: "SRD",
    type: "fey",
    subtype: "",
    alignment: "neutral good",
    ac: 15,
    hp: 2,
    hit_dice: "1d4",
    speed: "10 ft., fly 40 ft.",
    stats: [3, 18, 10, 14, 13, 11],
    skillsaves: [
      {
        perception: 3
      },
      {
        stealth: 8
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 13",
    languages: "Common, Elvish, Sylvan",
    cr: "1/4",
    actions: [
      {
        name: "Longsword",
        desc: "Melee Weapon Attack: +2 to hit, reach 5 ft., one target. Hit: 1 slashing damage.",
        attack_bonus: 2,
        damage_bonus: 1
      },
      {
        name: "Shortbow",
        desc: "Ranged Weapon Attack: +6 to hit, range 40/160 ft., one target. Hit: 1 piercing damage, and the target must succeed on a DC 10 Constitution saving throw or become poisoned for 1 minute. If its saving throw result is 5 or lower, the poisoned target falls unconscious for the same duration, or until it takes damage or another creature takes an action to shake it awake.",
        attack_bonus: 6,
        damage_bonus: 1
      },
      {
        name: "Heart Sight",
        desc: "The sprite touches a creature and magically knows the creature's current emotional state. If the target fails a DC 10 Charisma saving throw, the sprite also knows the creature's alignment. Celestials, fiends, and undead automatically fail the saving throw.",
        attack_bonus: 0
      },
      {
        name: "Invisibility",
        desc: "The sprite magically turns invisible until it attacks or casts a spell, or until its concentration ends (as if concentrating on a spell). Any equipment the sprite wears or carries is invisible with it.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Spy",
    size: "Medium",
    source: "SRD",
    type: "humanoid",
    subtype: "any race",
    alignment: "any alignment",
    ac: 12,
    hp: 27,
    hit_dice: "6d8",
    speed: "30 ft.",
    stats: [10, 15, 10, 12, 14, 16],
    skillsaves: [
      {
        deception: 5
      },
      {
        insight: 4
      },
      {
        investigation: 5
      },
      {
        perception: 6
      },
      {
        persuasion: 5
      },
      {
        stealth: 4
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 16",
    languages: "any two languages",
    cr: "1",
    traits: [
      {
        name: "Cunning Action",
        desc: "On each of its turns, the spy can use a bonus action to take the Dash, Disengage, or Hide action.",
        attack_bonus: 0
      },
      {
        name: "Sneak Attack (1/Turn)",
        desc: "The spy deals an extra 7 (2d6) damage when it hits a target with a weapon attack and has advantage on the attack roll, or when the target is within 5 ft. of an ally of the spy that isn't incapacitated and the spy doesn't have disadvantage on the attack roll.",
        attack_bonus: 0,
        damage_dice: "2d6"
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The spy makes two melee attacks.",
        attack_bonus: 0
      },
      {
        name: "Shortsword",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 5 (1d6 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d6",
        damage_bonus: 2
      },
      {
        name: "Hand Crossbow",
        desc: "Ranged Weapon Attack: +4 to hit, range 30/120 ft., one target. Hit: 5 (1d6 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d6",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Steam Mephit",
    size: "Small",
    source: "SRD",
    type: "elemental",
    subtype: "",
    alignment: "neutral evil",
    ac: 10,
    hp: 21,
    hit_dice: "6d6",
    speed: "30 ft., fly 30 ft.",
    stats: [5, 11, 10, 11, 10, 12],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "fire, poison",
    condition_immunities: "poisoned",
    senses: "darkvision 60 ft., passive Perception 10",
    languages: "Aquan, Ignan",
    cr: "1/4",
    traits: [
      {
        name: "Death Burst",
        desc: "When the mephit dies, it explodes in a cloud of steam. Each creature within 5 ft. of the mephit must succeed on a DC 10 Dexterity saving throw or take 4 (1d8) fire damage.",
        attack_bonus: 0,
        damage_dice: "1d8"
      },
      {
        name: "Innate Spellcasting (1/Day)",
        desc: "The mephit can innately cast blur, requiring no material components. Its innate spellcasting ability is Charisma.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Claws",
        desc: "Melee Weapon Attack: +2 to hit, reach 5 ft., one creature. Hit: 2 (1d4) slashing damage plus 2 (1d4) fire damage.",
        attack_bonus: 2,
        damage_dice: "2d4"
      },
      {
        name: "Steam Breath (Recharge 6)",
        desc: "The mephit exhales a 15-foot cone of scalding steam. Each creature in that area must succeed on a DC 10 Dexterity saving throw, taking 4 (1d8) fire damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0
      },
      {
        name: "Variant: Summon Mephits (1/Day)",
        desc: "The mephit has a 25 percent chance of summoning 1d4 mephits of its kind. A summoned mephit appears in an unoccupied space within 60 feet of its summoner, acts as an ally of its summoner, and can't summon other mephits. It remains for 1 minute, until it or its summoner dies, or until its summoner dismisses it as an action.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Stirge",
    size: "Tiny",
    source: "SRD",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 14,
    hp: 2,
    hit_dice: "1d4",
    speed: "10 ft., fly 40 ft.",
    stats: [4, 16, 11, 2, 8, 6],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 9",
    languages: "",
    cr: "1/8",
    actions: [
      {
        name: "Blood Drain",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one creature. Hit: 5 (1d4 + 3) piercing damage, and the stirge attaches to the target. While attached, the stirge doesn't attack. Instead, at the start of each of the stirge's turns, the target loses 5 (1d4 + 3) hit points due to blood loss.\nThe stirge can detach itself by spending 5 feet of its movement. It does so after it drains 10 hit points of blood from the target or the target dies. A creature, including the target, can use its action to detach the stirge.",
        attack_bonus: 5,
        damage_dice: "1d4",
        damage_bonus: 3
      }
    ]
  },
  {
    name: "Stone Giant",
    size: "Huge",
    source: "SRD",
    type: "giant",
    subtype: "",
    alignment: "neutral",
    ac: 17,
    hp: 126,
    hit_dice: "11d12",
    speed: "40 ft.",
    stats: [23, 15, 20, 10, 12, 9],
    saves: [
      {
        dexterity: 5
      },
      {
        constitution: 8
      },
      {
        wisdom: 4
      }
    ],
    skillsaves: [
      {
        athletics: 12
      },
      {
        perception: 4
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 14",
    languages: "Giant",
    cr: "7",
    traits: [
      {
        name: "Stone Camouflage",
        desc: "The giant has advantage on Dexterity (Stealth) checks made to hide in rocky terrain.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The giant makes two greatclub attacks.",
        attack_bonus: 0
      },
      {
        name: "Greatclub",
        desc: "Melee Weapon Attack: +9 to hit, reach 15 ft., one target. Hit: 19 (3d8 + 6) bludgeoning damage.",
        attack_bonus: 9,
        damage_dice: "3d8",
        damage_bonus: 6
      },
      {
        name: "Rock",
        desc: "Ranged Weapon Attack: +9 to hit, range 60/240 ft., one target. Hit: 28 (4d10 + 6) bludgeoning damage. If the target is a creature, it must succeed on a DC 17 Strength saving throw or be knocked prone.",
        attack_bonus: 9,
        damage_dice: "4d10",
        damage_bonus: 6
      }
    ],
    reactions: [
      {
        name: "Rock Catching",
        desc: "If a rock or similar object is hurled at the giant, the giant can, with a successful DC 10 Dexterity saving throw, catch the missile and take no bludgeoning damage from it.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Stone Golem",
    size: "Large",
    source: "SRD",
    type: "construct",
    subtype: "",
    alignment: "unaligned",
    ac: 17,
    hp: 178,
    hit_dice: "17d10",
    speed: "30 ft.",
    stats: [22, 9, 20, 3, 11, 1],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "poison, psychic; bludgeoning, piercing, and slashing from nonmagical weapons that aren't adamantine",
    condition_immunities: "charmed, exhaustion, frightened, paralyzed, petrified, poisoned",
    senses: "darkvision 120 ft., passive Perception 10",
    languages: "understands the languages of its creator but can't speak",
    cr: "10",
    traits: [
      {
        name: "Immutable Form",
        desc: "The golem is immune to any spell or effect that would alter its form.",
        attack_bonus: 0
      },
      {
        name: "Magic Resistance",
        desc: "The golem has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      },
      {
        name: "Magic Weapons",
        desc: "The golem's weapon attacks are magical.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The golem makes two slam attacks.",
        attack_bonus: 0
      },
      {
        name: "Slam",
        desc: "Melee Weapon Attack: +10 to hit, reach 5 ft., one target. Hit: 19 (3d8 + 6) bludgeoning damage.",
        attack_bonus: 10,
        damage_dice: "3d8",
        damage_bonus: 6
      },
      {
        name: "Slow (Recharge 5-6)",
        desc: "The golem targets one or more creatures it can see within 10 ft. of it. Each target must make a DC 17 Wisdom saving throw against this magic. On a failed save, a target can't use reactions, its speed is halved, and it can't make more than one attack on its turn. In addition, the target can take either an action or a bonus action on its turn, not both. These effects last for 1 minute. A target can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Storm Giant",
    size: "Huge",
    source: "SRD",
    type: "giant",
    subtype: "",
    alignment: "chaotic good",
    ac: 16,
    hp: 230,
    hit_dice: "20d12",
    speed: "50 ft., swim 50 ft.",
    stats: [29, 14, 20, 16, 18, 18],
    saves: [
      {
        strength: 14
      },
      {
        constitution: 10
      },
      {
        wisdom: 9
      },
      {
        charisma: 9
      }
    ],
    skillsaves: [
      {
        arcana: 8
      },
      {
        athletics: 14
      },
      {
        history: 8
      },
      {
        perception: 9
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "cold",
    damage_immunities: "lightning, thunder",
    condition_immunities: "",
    senses: "passive Perception 19",
    languages: "Common, Giant",
    cr: "13",
    traits: [
      {
        name: "Amphibious",
        desc: "The giant can breathe air and water.",
        attack_bonus: 0
      },
      {
        name: "Innate Spellcasting",
        desc: "The giant's innate spellcasting ability is Charisma (spell save DC 17). It can innately cast the following spells, requiring no material components:\n\nAt will: detect magic, feather fall, levitate, light\n3/day each: control weather, water breathing",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The giant makes two greatsword attacks.",
        attack_bonus: 0
      },
      {
        name: "Greatsword",
        desc: "Melee Weapon Attack: +14 to hit, reach 10 ft., one target. Hit: 30 (6d6 + 9) slashing damage.",
        attack_bonus: 14,
        damage_dice: "6d6",
        damage_bonus: 9
      },
      {
        name: "Rock",
        desc: "Ranged Weapon Attack: +14 to hit, range 60/240 ft., one target. Hit: 35 (4d12 + 9) bludgeoning damage.",
        attack_bonus: 14,
        damage_dice: "4d12",
        damage_bonus: 9
      },
      {
        name: "Lightning Strike (Recharge 5-6)",
        desc: "The giant hurls a magical lightning bolt at a point it can see within 500 feet of it. Each creature within 10 feet of that point must make a DC 17 Dexterity saving throw, taking 54 (12d8) lightning damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "12d8"
      }
    ]
  },
  {
    name: "Succubus/Incubus",
    size: "Medium",
    source: "SRD",
    type: "fiend",
    subtype: "shapechanger",
    alignment: "neutral evil",
    ac: 15,
    hp: 66,
    hit_dice: "12d8",
    speed: "30 ft., fly 60 ft.",
    stats: [8, 17, 13, 15, 12, 20],
    skillsaves: [
      {
        deception: 9
      },
      {
        insight: 5
      },
      {
        perception: 5
      },
      {
        persuasion: 9
      },
      {
        stealth: 7
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "cold, fire, lightning, poison; bludgeoning, piercing, and slashing from nonmagical weapons",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 15",
    languages: "Abyssal, Common, Infernal, telepathy 60 ft.",
    cr: "4",
    traits: [
      {
        name: "Telepathic Bond",
        desc: "The fiend ignores the range restriction on its telepathy when communicating with a creature it has charmed. The two don't even need to be on the same plane of existence.",
        attack_bonus: 0
      },
      {
        name: "Shapechanger",
        desc: "The fiend can use its action to polymorph into a Small or Medium humanoid, or back into its true form. Without wings, the fiend loses its flying speed. Other than its size and speed, its statistics are the same in each form. Any equipment it is wearing or carrying isn't transformed. It reverts to its true form if it dies.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Claw (Fiend Form Only)",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 6 (1d6 + 3) slashing damage.",
        attack_bonus: 5,
        damage_dice: "1d6",
        damage_bonus: 3
      },
      {
        name: "Charm",
        desc: "One humanoid the fiend can see within 30 feet of it must succeed on a DC 15 Wisdom saving throw or be magically charmed for 1 day. The charmed target obeys the fiend's verbal or telepathic commands. If the target suffers any harm or receives a suicidal command, it can repeat the saving throw, ending the effect on a success. If the target successfully saves against the effect, or if the effect on it ends, the target is immune to this fiend's Charm for the next 24 hours.\nThe fiend can have only one target charmed at a time. If it charms another, the effect on the previous target ends.",
        attack_bonus: 0
      },
      {
        name: "Draining Kiss",
        desc: "The fiend kisses a creature charmed by it or a willing creature. The target must make a DC 15 Constitution saving throw against this magic, taking 32 (5d10 + 5) psychic damage on a failed save, or half as much damage on a successful one. The target's hit point maximum is reduced by an amount equal to the damage taken. This reduction lasts until the target finishes a long rest. The target dies if this effect reduces its hit point maximum to 0.",
        attack_bonus: 0,
        damage_dice: "5d10",
        damage_bonus: 5
      },
      {
        name: "Etherealness",
        desc: "The fiend magically enters the Ethereal Plane from the Material Plane, or vice versa.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Swarm of Bats",
    size: "Medium",
    type: "swarm of Tiny beasts",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 22,
    hit_dice: "5d8",
    speed: "0 ft., fly 30 ft.",
    stats: [5, 15, 10, 2, 12, 4],
    damage_vulnerabilities: "",
    damage_resistances: "bludgeoning, piercing, slashing",
    damage_immunities: "",
    condition_immunities: "charmed, frightened, grappled, paralyzed, petrified, prone, restrained, stunned",
    senses: "blindsight 60 ft., passive Perception 11",
    languages: "",
    cr: "1/4",
    traits: [
      {
        name: "Echolocation",
        desc: "The swarm can't use its blindsight while deafened.",
        attack_bonus: 0
      },
      {
        name: "Keen Hearing",
        desc: "The swarm has advantage on Wisdom (Perception) checks that rely on hearing.",
        attack_bonus: 0
      },
      {
        name: "Swarm",
        desc: "The swarm can occupy another creature's space and vice versa, and the swarm can move through any opening large enough for a Tiny bat. The swarm can't regain hit points or gain temporary hit points.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bites",
        desc: "Melee Weapon Attack: +4 to hit, reach 0 ft., one creature in the swarm's space. Hit: 5 (2d4) piercing damage, or 2 (1d4) piercing damage if the swarm has half of its hit points or fewer.",
        attack_bonus: 4,
        damage_dice: "2d4"
      }
    ]
  },
  {
    name: "Swarm of Beetles",
    size: "Medium",
    type: "swarm of Tiny beasts",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 22,
    hit_dice: "5d8",
    speed: "20 ft., burrow 5 ft., climb 20 ft.",
    stats: [3, 13, 10, 1, 7, 1],
    damage_vulnerabilities: "",
    damage_resistances: "bludgeoning, piercing, slashing",
    damage_immunities: "",
    condition_immunities: "charmed, frightened, grappled, paralyzed, petrified, prone, restrained, stunned",
    senses: "blindsight 10 ft., passive Perception 8",
    languages: "",
    cr: "1/2",
    traits: [
      {
        name: "Swarm",
        desc: "The swarm can occupy another creature's space and vice versa, and the swarm can move through any opening large enough for a Tiny insect. The swarm can't regain hit points or gain temporary hit points.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bites",
        desc: "Melee Weapon Attack: +3 to hit, reach 0 ft., one target in the swarm's space. Hit: 10 (4d4) piercing damage, or 5 (2d4) piercing damage if the swarm has half of its hit points or fewer.",
        attack_bonus: 3,
        damage_dice: "4d4"
      }
    ]
  },
  {
    name: "Swarm of Centipedes",
    size: "Medium",
    type: "swarm of Tiny beasts",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 22,
    hit_dice: "5d8",
    speed: "20 ft., climb 20 ft.",
    stats: [3, 13, 10, 1, 7, 1],
    damage_vulnerabilities: "",
    damage_resistances: "bludgeoning, piercing, slashing",
    damage_immunities: "",
    condition_immunities: "charmed, frightened, grappled, paralyzed, petrified, prone, restrained, stunned",
    senses: "blindsight 10 ft., passive Perception 8",
    languages: "",
    cr: "1/2",
    traits: [
      {
        name: "Swarm",
        desc: "The swarm can occupy another creature's space and vice versa, and the swarm can move through any opening large enough for a Tiny insect. The swarm can't regain hit points or gain temporary hit points.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bites",
        desc: "Melee Weapon Attack: +3 to hit, reach 0 ft., one target in the swarm's space. Hit: 10 (4d4) piercing damage, or 5 (2d4) piercing damage if the swarm has half of its hit points or fewer.\nA creature reduced to 0 hit points by a swarm of centipedes is stable but poisoned for 1 hour, even after regaining hit points, and paralyzed while poisoned in this way.",
        attack_bonus: 3,
        damage_dice: "4d4"
      }
    ]
  },
  {
    name: "Swarm of Insects",
    size: "Medium",
    type: "swarm of Tiny beasts",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 22,
    hit_dice: "5d8",
    speed: "20 ft., climb 20 ft.",
    stats: [3, 13, 10, 1, 7, 1],
    damage_vulnerabilities: "",
    damage_resistances: "bludgeoning, piercing, slashing",
    damage_immunities: "",
    condition_immunities: "charmed, frightened, grappled, paralyzed, petrified, prone, restrained, stunned",
    senses: "blindsight 10 ft., passive Perception 8",
    languages: "",
    cr: "1/2",
    traits: [
      {
        name: "Swarm",
        desc: "The swarm can occupy another creature's space and vice versa, and the swarm can move through any opening large enough for a Tiny insect. The swarm can't regain hit points or gain temporary hit points.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bites",
        desc: "Melee Weapon Attack: +3 to hit, reach 0 ft., one target in the swarm's space. Hit: 10 (4d4) piercing damage, or 5 (2d4) piercing damage if the swarm has half of its hit points or fewer.",
        attack_bonus: 3,
        damage_dice: "4d4"
      }
    ]
  },
  {
    name: "Swarm of Poisonous Snakes",
    size: "Medium",
    type: "swarm of Tiny beasts",
    subtype: "",
    alignment: "unaligned",
    ac: 14,
    hp: 36,
    hit_dice: "8d8",
    speed: "30 ft., swim 30 ft.",
    stats: [8, 18, 11, 1, 10, 3],
    damage_vulnerabilities: "",
    damage_resistances: "bludgeoning, piercing, slashing",
    damage_immunities: "",
    condition_immunities: "charmed, frightened, grappled, paralyzed, petrified, prone, restrained, stunned",
    senses: "blindsight 10 ft., passive Perception 10",
    languages: "",
    cr: "2",
    traits: [
      {
        name: "Swarm",
        desc: "The swarm can occupy another creature's space and vice versa, and the swarm can move through any opening large enough for a Tiny snake. The swarm can't regain hit points or gain temporary hit points.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bites",
        desc: "Melee Weapon Attack: +6 to hit, reach 0 ft., one creature in the swarm's space. Hit: 7 (2d6) piercing damage, or 3 (1d6) piercing damage if the swarm has half of its hit points or fewer. The target must make a DC 10 Constitution saving throw, taking 14 (4d6) poison damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 6,
        damage_dice: "2d6"
      }
    ]
  },
  {
    name: "Swarm of Quippers",
    size: "Medium",
    type: "swarm of Tiny beasts",
    subtype: "",
    alignment: "unaligned",
    ac: 13,
    hp: 28,
    hit_dice: "8d8",
    speed: "0 ft., swim 40 ft.",
    stats: [13, 16, 9, 1, 7, 2],
    damage_vulnerabilities: "",
    damage_resistances: "bludgeoning, piercing, slashing",
    damage_immunities: "",
    condition_immunities: "charmed, frightened, grappled, paralyzed, petrified, prone, restrained, stunned",
    senses: "darkvision 60 ft., passive Perception 8",
    languages: "",
    cr: "1",
    traits: [
      {
        name: "Blood Frenzy",
        desc: "The swarm has advantage on melee attack rolls against any creature that doesn't have all its hit points.",
        attack_bonus: 0
      },
      {
        name: "Swarm",
        desc: "The swarm can occupy another creature's space and vice versa, and the swarm can move through any opening large enough for a Tiny quipper. The swarm can't regain hit points or gain temporary hit points.",
        attack_bonus: 0
      },
      {
        name: "Water Breathing",
        desc: "The swarm can breathe only underwater.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bites",
        desc: "Melee Weapon Attack: +5 to hit, reach 0 ft., one creature in the swarm's space. Hit: 14 (4d6) piercing damage, or 7 (2d6) piercing damage if the swarm has half of its hit points or fewer.",
        attack_bonus: 5,
        damage_dice: "4d6"
      }
    ]
  },
  {
    name: "Swarm of Rats",
    size: "Medium",
    type: "swarm of Tiny beasts",
    subtype: "",
    alignment: "unaligned",
    ac: 10,
    hp: 24,
    hit_dice: "7d8",
    speed: "30 ft.",
    stats: [9, 11, 9, 2, 10, 3],
    damage_vulnerabilities: "",
    damage_resistances: "bludgeoning, piercing, slashing",
    damage_immunities: "",
    condition_immunities: "charmed, frightened, grappled, paralyzed, petrified, prone, restrained, stunned",
    senses: "darkvision 30 ft., passive Perception 10",
    languages: "",
    cr: "1/4",
    traits: [
      {
        name: "Keen Smell",
        desc: "The swarm has advantage on Wisdom (Perception) checks that rely on smell.",
        attack_bonus: 0
      },
      {
        name: "Swarm",
        desc: "The swarm can occupy another creature's space and vice versa, and the swarm can move through any opening large enough for a Tiny rat. The swarm can't regain hit points or gain temporary hit points.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bites",
        desc: "Melee Weapon Attack: +2 to hit, reach 0 ft., one target in the swarm's space. Hit: 7 (2d6) piercing damage, or 3 (1d6) piercing damage if the swarm has half of its hit points or fewer.",
        attack_bonus: 2,
        damage_dice: "2d6"
      }
    ]
  },
  {
    name: "Swarm of Ravens",
    size: "Medium",
    type: "swarm of Tiny beasts",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 24,
    hit_dice: "7d8",
    speed: "10 ft., fly 50 ft.",
    stats: [6, 14, 8, 3, 12, 6],
    damage_vulnerabilities: "",
    damage_resistances: "bludgeoning, piercing, slashing",
    damage_immunities: "",
    condition_immunities: "charmed, frightened, grappled, paralyzed, petrified, prone, restrained, stunned",
    senses: "passive Perception 15",
    languages: "",
    cr: "1/4",
    traits: [
      {
        name: "Swarm",
        desc: "The swarm can occupy another creature's space and vice versa, and the swarm can move through any opening large enough for a Tiny raven. The swarm can't regain hit points or gain temporary hit points.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Beaks",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target in the swarm's space. Hit: 7 (2d6) piercing damage, or 3 (1d6) piercing damage if the swarm has half of its hit points or fewer.",
        attack_bonus: 4,
        damage_dice: "2d6"
      }
    ]
  },
  {
    name: "Swarm of Spiders",
    size: "Medium",
    type: "swarm of Tiny beasts",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 22,
    hit_dice: "5d8",
    speed: "20 ft., climb 20 ft.",
    stats: [3, 13, 10, 1, 7, 1],
    damage_vulnerabilities: "",
    damage_resistances: "bludgeoning, piercing, slashing",
    damage_immunities: "",
    condition_immunities: "charmed, frightened, paralyzed, petrified, prone, restrained, stunned",
    senses: "blindsight 10 ft., passive Perception 8",
    languages: "",
    cr: "1/2",
    traits: [
      {
        name: "Swarm",
        desc: "The swarm can occupy another creature's space and vice versa, and the swarm can move through any opening large enough for a Tiny insect. The swarm can't regain hit points or gain temporary hit points.",
        attack_bonus: 0
      },
      {
        name: "Spider Climb",
        desc: "The swarm can climb difficult surfaces, including upside down on ceilings, without needing to make an ability check.",
        attack_bonus: 0
      },
      {
        name: "Web Sense",
        desc: "While in contact with a web, the swarm knows the exact location of any other creature in contact with the same web.",
        attack_bonus: 0
      },
      {
        name: "Web Walker",
        desc: "The swarm ignores movement restrictions caused by webbing.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bites",
        desc: "Melee Weapon Attack: +3 to hit, reach 0 ft., one target in the swarm's space. Hit: 10 (4d4) piercing damage, or 5 (2d4) piercing damage if the swarm has half of its hit points or fewer.",
        attack_bonus: 3,
        damage_dice: "4d4"
      }
    ]
  },
  {
    name: "Swarm of Wasps",
    size: "Medium",
    type: "swarm of Tiny beasts",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 22,
    hit_dice: "5d8",
    speed: "5 ft., fly 30 ft.",
    stats: [3, 13, 10, 1, 7, 1],
    damage_vulnerabilities: "",
    damage_resistances: "bludgeoning, piercing, slashing",
    damage_immunities: "",
    condition_immunities: "charmed, frightened, grappled, paralyzed, petrified, prone, restrained, stunned",
    senses: "blindsight 10 ft., passive Perception 8",
    languages: "",
    cr: "1/2",
    traits: [
      {
        name: "Swarm",
        desc: "The swarm can occupy another creature's space and vice versa, and the swarm can move through any opening large enough for a Tiny insect. The swarm can't regain hit points or gain temporary hit points.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bites",
        desc: "Melee Weapon Attack: +3 to hit, reach 0 ft., one target in the swarm's space. Hit: 10 (4d4) piercing damage, or 5 (2d4) piercing damage if the swarm has half of its hit points or fewer.",
        attack_bonus: 3,
        damage_dice: "4d4"
      }
    ]
  },
  {
    name: "Tarrasque",
    size: "Gargantuan",
    source: "SRD",
    type: "monstrosity",
    subtype: "titan",
    alignment: "unaligned",
    ac: 25,
    hp: 676,
    hit_dice: "33d20",
    speed: "40 ft.",
    stats: [30, 11, 30, 3, 11, 11],
    saves: [
      {
        intelligence: 5
      },
      {
        wisdom: 9
      },
      {
        charisma: 9
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "fire, poison; bludgeoning, piercing, and slashing from nonmagical weapons",
    condition_immunities: "charmed, frightened, paralyzed, poisoned",
    senses: "blindsight 120 ft., passive Perception 10",
    languages: "",
    cr: "30",
    traits: [
      {
        name: "Legendary Resistance (3/Day)",
        desc: "If the tarrasque fails a saving throw, it can choose to succeed instead.",
        attack_bonus: 0
      },
      {
        name: "Magic Resistance",
        desc: "The tarrasque has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      },
      {
        name: "Reflective Carapace",
        desc: "Any time the tarrasque is targeted by a magic missile spell, a line spell, or a spell that requires a ranged attack roll, roll a d6. On a 1 to 5, the tarrasque is unaffected. On a 6, the tarrasque is unaffected, and the effect is reflected back at the caster as though it originated from the tarrasque, turning the caster into the target.",
        attack_bonus: 0
      },
      {
        name: "Siege Monster",
        desc: "The tarrasque deals double damage to objects and structures.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The tarrasque can use its Frightful Presence. It then makes five attacks: one with its bite, two with its claws, one with its horns, and one with its tai l. It can use its Swallow instead of its bite.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +19 to hit, reach 10 ft., one target. Hit: 36 (4d12 + 10) piercing damage. If the target is a creature, it is grappled (escape DC 20). Until this grapple ends, the target is restrained, and the tarrasque can't bite another target.",
        attack_bonus: 19,
        damage_dice: "4d12",
        damage_bonus: 10
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +19 to hit, reach 15 ft., one target. Hit: 28 (4d8 + 10) slashing damage.",
        attack_bonus: 19,
        damage_dice: "4d8",
        damage_bonus: 10
      },
      {
        name: "Horns",
        desc: "Melee Weapon Attack: +19 to hit, reach 10 ft., one target. Hit: 32 (4d10 + 10) piercing damage.",
        attack_bonus: 19,
        damage_dice: "4d10",
        damage_bonus: 10
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +19 to hit, reach 20 ft., one target. Hit: 24 (4d6 + 10) bludgeoning damage. If the target is a creature, it must succeed on a DC 20 Strength saving throw or be knocked prone.",
        attack_bonus: 19,
        damage_dice: "4d6",
        damage_bonus: 10
      },
      {
        name: "Frightful Presence",
        desc: "Each creature of the tarrasque's choice within 120 feet of it and aware of it must succeed on a DC 17 Wisdom saving throw or become frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, with disadvantage if the tarrasque is within line of sight, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the tarrasque's Frightful Presence for the next 24 hours.",
        attack_bonus: 0
      },
      {
        name: "Swallow",
        desc: "The tarrasque makes one bite attack against a Large or smaller creature it is grappling. If the attack hits, the target takes the bite's damage, the target is swallowed, and the grapple ends. While swallowed, the creature is blinded and restrained, it has total cover against attacks and other effects outside the tarrasque, and it takes 56 (16d6) acid damage at the start of each of the tarrasque's turns.\nIf the tarrasque takes 60 damage or more on a single turn from a creature inside it, the tarrasque must succeed on a DC 20 Constitution saving throw at the end of that turn or regurgitate all swallowed creatures, which fall prone in a space within 10 feet of the tarrasque. If the tarrasque dies, a swallowed creature is no longer restrained by it and can escape from the corpse by using 30 feet of movement, exiting prone.",
        attack_bonus: 0
      }
    ],
    legendary_actions: [
      {
        name: "Attack",
        desc: "The tarrasque makes one claw attack or tail attack.",
        attack_bonus: 0
      },
      {
        name: "Move",
        desc: "The tarrasque moves up to half its speed.",
        attack_bonus: 0
      },
      {
        name: "Chomp (Costs 2 Actions)",
        desc: "The tarrasque makes one bite attack or uses its Swallow.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Thug",
    size: "Medium",
    source: "SRD",
    type: "humanoid",
    subtype: "any race",
    alignment: "any non-good alignment",
    ac: 11,
    hp: 32,
    hit_dice: "5d8",
    speed: "30 ft.",
    stats: [15, 11, 14, 10, 10, 11],
    skillsaves: [
      {
        intimidation: 2
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 10",
    languages: "any one language (usually Common)",
    cr: "1/2",
    traits: [
      {
        name: "Pack Tactics",
        desc: "The thug has advantage on an attack roll against a creature if at least one of the thug's allies is within 5 ft. of the creature and the ally isn't incapacitated.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The thug makes two melee attacks.",
        attack_bonus: 0
      },
      {
        name: "Mace",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one creature. Hit: 5 (1d6 + 2) bludgeoning damage.",
        attack_bonus: 4,
        damage_dice: "1d6",
        damage_bonus: 2
      },
      {
        name: "Heavy Crossbow",
        desc: "Ranged Weapon Attack: +2 to hit, range 100/400 ft., one target. Hit: 5 (1d10) piercing damage.",
        attack_bonus: 2,
        damage_dice: "1d10"
      }
    ]
  },
  {
    name: "Tiger",
    size: "Large",
    source: "SRD",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 37,
    hit_dice: "5d10",
    speed: "40 ft.",
    stats: [17, 15, 14, 3, 12, 8],
    skillsaves: [
      {
        perception: 3
      },
      {
        stealth: 6
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 13",
    languages: "",
    cr: "1",
    traits: [
      {
        name: "Keen Smell",
        desc: "The tiger has advantage on Wisdom (Perception) checks that rely on smell.",
        attack_bonus: 0
      },
      {
        name: "Pounce",
        desc: "If the tiger moves at least 20 ft. straight toward a creature and then hits it with a claw attack on the same turn, that target must succeed on a DC 13 Strength saving throw or be knocked prone. If the target is prone, the tiger can make one bite attack against it as a bonus action.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 8 (1d10 + 3) piercing damage.",
        attack_bonus: 5,
        damage_dice: "1d10",
        damage_bonus: 3
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 7 (1d8 + 3) slashing damage.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Treant",
    size: "Huge",
    source: "SRD",
    type: "plant",
    subtype: "",
    alignment: "chaotic good",
    ac: 16,
    hp: 138,
    hit_dice: "12d12",
    speed: "30 ft.",
    stats: [23, 8, 21, 12, 16, 12],
    damage_vulnerabilities: "fire",
    damage_resistances: "bludgeoning, piercing",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 13",
    languages: "Common, Druidic, Elvish, Sylvan",
    cr: "9",
    traits: [
      {
        name: "False Appearance",
        desc: "While the treant remains motionless, it is indistinguishable from a normal tree.",
        attack_bonus: 0
      },
      {
        name: "Siege Monster",
        desc: "The treant deals double damage to objects and structures.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The treant makes two slam attacks.",
        attack_bonus: 0
      },
      {
        name: "Slam",
        desc: "Melee Weapon Attack: +10 to hit, reach 5 ft., one target. Hit: 16 (3d6 + 6) bludgeoning damage.",
        attack_bonus: 10,
        damage_dice: "3d6",
        damage_bonus: 6
      },
      {
        name: "Rock",
        desc: "Ranged Weapon Attack: +10 to hit, range 60/180 ft., one target. Hit: 28 (4d10 + 6) bludgeoning damage.",
        attack_bonus: 10,
        damage_dice: "4d10",
        damage_bonus: 6
      },
      {
        name: "Animate Trees (1/Day)",
        desc: "The treant magically animates one or two trees it can see within 60 feet of it. These trees have the same statistics as a treant, except they have Intelligence and Charisma scores of 1, they can't speak, and they have only the Slam action option. An animated tree acts as an ally of the treant. The tree remains animate for 1 day or until it dies; until the treant dies or is more than 120 feet from the tree; or until the treant takes a bonus action to turn it back into an inanimate tree. The tree then takes root if possible.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Tribal Warrior",
    size: "Medium",
    source: "SRD",
    type: "humanoid",
    subtype: "any race",
    alignment: "any alignment",
    ac: 12,
    hp: 11,
    hit_dice: "2d8",
    speed: "30 ft.",
    stats: [13, 11, 12, 8, 11, 8],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 10",
    languages: "any one language",
    cr: "1/8",
    traits: [
      {
        name: "Pack Tactics",
        desc: "The warrior has advantage on an attack roll against a creature if at least one of the warrior's allies is within 5 ft. of the creature and the ally isn't incapacitated.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Spear",
        desc: "Melee or Ranged Weapon Attack: +3 to hit, reach 5 ft. or range 20/60 ft., one target. Hit: 4 (1d6 + 1) piercing damage, or 5 (1d8 + 1) piercing damage if used with two hands to make a melee attack.",
        attack_bonus: 3,
        damage_dice: "1d6",
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Triceratops",
    size: "Huge",
    source: "SRD",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 13,
    hp: 95,
    hit_dice: "10d12",
    speed: "50 ft.",
    stats: [22, 9, 17, 2, 11, 5],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 10",
    languages: "",
    cr: "5",
    traits: [
      {
        name: "Trampling Charge",
        desc: "If the triceratops moves at least 20 ft. straight toward a creature and then hits it with a gore attack on the same turn, that target must succeed on a DC 13 Strength saving throw or be knocked prone. If the target is prone, the triceratops can make one stomp attack against it as a bonus action.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Gore",
        desc: "Melee Weapon Attack: +9 to hit, reach 5 ft., one target. Hit: 24 (4d8 + 6) piercing damage.",
        attack_bonus: 9,
        damage_dice: "4d8",
        damage_bonus: 6
      },
      {
        name: "Stomp",
        desc: "Melee Weapon Attack: +9 to hit, reach 5 ft., one prone creature. Hit: 22 (3d10 + 6) bludgeoning damage",
        attack_bonus: 9,
        damage_dice: "3d10",
        damage_bonus: 6
      }
    ]
  },
  {
    name: "Troll",
    size: "Large",
    source: "SRD",
    type: "giant",
    subtype: "",
    alignment: "chaotic evil",
    ac: 15,
    hp: 84,
    hit_dice: "8d10",
    speed: "30 ft.",
    stats: [18, 13, 20, 7, 9, 7],
    skillsaves: [
      {
        perception: 2
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 12",
    languages: "Giant",
    cr: "5",
    traits: [
      {
        name: "Keen Smell",
        desc: "The troll has advantage on Wisdom (Perception) checks that rely on smell.",
        attack_bonus: 0
      },
      {
        name: "Regeneration",
        desc: "The troll regains 10 hit points at the start of its turn. If the troll takes acid or fire damage, this trait doesn't function at the start of the troll's next turn. The troll dies only if it starts its turn with 0 hit points and doesn't regenerate.",
        attack_bonus: 0
      },
      {
        name: "Variant: Loathsome Limbs",
        desc: "Whenever the troll takes at least 15 slashing damage at one time, roll a d20 to determine what else happens to it:\n1-10: Nothing else happens.\n11-14: One leg is severed from the troll if it has any legs left.\n15- 18: One arm is severed from the troll if it has any arms left.\n19-20: The troll is decapitated, but the troll dies only if it can't regenerate. If it dies, so does the severed head.\nIf the troll finishes a short or long rest without reattaching a severed limb or head, the part regrows. At that point, the severed part dies. Until then, a severed part acts on the troll's initiative and has its own action and movement. A severed part has AC 13, 10 hit points, and the troll's Regeneration trait.\nA severed leg is unable to attack and has a speed of 5 feet.\nA severed arm has a speed of 5 feet and can make one claw attack on its turn, with disadvantage on the attack roll unless the troll can see the arm and its target. Each time the troll loses an arm, it loses a claw attack.\nIf its head is severed, the troll loses its bite attack and its body is blinded unless the head can see it. The severed head has a speed of 0 feet and the troll's Keen Smell trait. It can make a bite attack but only against a target in its space.\nThe troll's speed is halved if it's missing a leg. If it loses both legs, it falls prone. If it has both arms, it can crawl. With only one arm, it can still crawl, but its speed is halved. With no arms or legs, its speed is 0, and it can't benefit from bonuses to speed.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The troll makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 7 (1d6 + 4) piercing damage.",
        attack_bonus: 7,
        damage_dice: "1d6",
        damage_bonus: 4
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 11 (2d6 + 4) slashing damage.",
        attack_bonus: 7,
        damage_dice: "2d6",
        damage_bonus: 4
      }
    ]
  },
  {
    name: "Tyrannosaurus Rex",
    size: "Huge",
    source: "SRD",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 13,
    hp: 136,
    hit_dice: "13d12",
    speed: "50 ft.",
    stats: [25, 10, 19, 2, 12, 9],
    skillsaves: [
      {
        perception: 4
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 14",
    languages: "",
    cr: "8",
    actions: [
      {
        name: "Multiattack",
        desc: "The tyrannosaurus makes two attacks: one with its bite and one with its tail. It can't make both attacks against the same target.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +10 to hit, reach 10 ft., one target. Hit: 33 (4d12 + 7) piercing damage. If the target is a Medium or smaller creature, it is grappled (escape DC 17). Until this grapple ends, the target is restrained, and the tyrannosaurus can't bite another target.",
        attack_bonus: 10,
        damage_dice: "4d12",
        damage_bonus: 7
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +10 to hit, reach 10 ft., one target. Hit: 20 (3d8 + 7) bludgeoning damage.",
        attack_bonus: 10,
        damage_dice: "3d8",
        damage_bonus: 7
      }
    ]
  },
  {
    name: "Unicorn",
    size: "Large",
    source: "SRD",
    type: "celestial",
    subtype: "",
    alignment: "lawful good",
    ac: 12,
    hp: 67,
    hit_dice: "9d10",
    speed: "50 ft.",
    stats: [18, 14, 15, 11, 17, 16],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "poison",
    condition_immunities: "charmed, paralyzed, poisoned",
    senses: "darkvision 60 ft., passive Perception 13",
    languages: "Celestial, Elvish, Sylvan, telepathy 60 ft.",
    cr: "5",
    traits: [
      {
        name: "Charge",
        desc: "If the unicorn moves at least 20 ft. straight toward a target and then hits it with a horn attack on the same turn, the target takes an extra 9 (2d8) piercing damage. If the target is a creature, it must succeed on a DC 15 Strength saving throw or be knocked prone.",
        attack_bonus: 0,
        damage_dice: "2d8"
      },
      {
        name: "Innate Spellcasting",
        desc: "The unicorn's innate spellcasting ability is Charisma (spell save DC 14). The unicorn can innately cast the following spells, requiring no components:\n\nAt will: detect evil and good, druidcraft, pass without trace\n1/day each: calm emotions, dispel evil and good, entangle",
        attack_bonus: 0
      },
      {
        name: "Magic Resistance",
        desc: "The unicorn has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      },
      {
        name: "Magic Weapons",
        desc: "The unicorn's weapon attacks are magical.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The unicorn makes two attacks: one with its hooves and one with its horn.",
        attack_bonus: 0
      },
      {
        name: "Hooves",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft ., one target. Hit: 11 (2d6 + 4) bludgeoning damage.",
        attack_bonus: 7,
        damage_dice: "2d6",
        damage_bonus: 4
      },
      {
        name: "Horn",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft ., one target. Hit: 8 (1d8 + 4) piercing damage.",
        attack_bonus: 7,
        damage_dice: "1d8",
        damage_bonus: 4
      },
      {
        name: "Healing Touch (3/Day)",
        desc: "The unicorn touches another creature with its horn. The target magically regains 11 (2d8 + 2) hit points. In addition, the touch removes all diseases and neutralizes all poisons afflicting the target.",
        attack_bonus: 0
      },
      {
        name: "Teleport (1/Day)",
        desc: "The unicorn magically teleports itself and up to three willing creatures it can see within 5 ft. of it, along with any equipment they are wearing or carrying, to a location the unicorn is familiar with, up to 1 mile away.",
        attack_bonus: 0
      }
    ],
    legendary_actions: [
      {
        name: "Hooves",
        desc: "The unicorn makes one attack with its hooves.",
        attack_bonus: 0
      },
      {
        name: "Shimmering Shield (Costs 2 Actions)",
        desc: "The unicorn creates a shimmering, magical field around itself or another creature it can see within 60 ft. of it. The target gains a +2 bonus to AC until the end of the unicorn's next turn.",
        attack_bonus: 0
      },
      {
        name: "Heal Self (Costs 3 Actions)",
        desc: "The unicorn magically regains 11 (2d8 + 2) hit points.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Vampire",
    size: "Medium",
    source: "SRD",
    type: "undead",
    subtype: "shapechanger",
    alignment: "lawful evil",
    ac: 16,
    hp: 144,
    hit_dice: "17d8",
    speed: "30 ft.",
    stats: [18, 18, 18, 17, 15, 18],
    saves: [
      {
        dexterity: 9
      },
      {
        wisdom: 7
      },
      {
        charisma: 9
      }
    ],
    skillsaves: [
      {
        perception: 7
      },
      {
        stealth: 9
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "necrotic; bludgeoning, piercing, and slashing from nonmagical weapons",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 120 ft., passive Perception 17",
    languages: "the languages it knew in life",
    cr: "13",
    traits: [
      {
        name: "Shapechanger",
        desc: "If the vampire isn't in sun light or running water, it can use its action to polymorph into a Tiny bat or a Medium cloud of mist, or back into its true form.\nWhile in bat form, the vampire can't speak, its walking speed is 5 feet, and it has a flying speed of 30 feet. Its statistics, other than its size and speed, are unchanged. Anything it is wearing transforms with it, but nothing it is carrying does. It reverts to its true form if it dies.\nWhile in mist form, the vampire can't take any actions, speak, or manipulate objects. It is weightless, has a flying speed of 20 feet, can hover, and can enter a hostile creature's space and stop there. In addition, if air can pass through a space, the mist can do so without squeezing, and it can't pass through water. It has advantage on Strength, Dexterity, and Constitution saving throws, and it is immune to all nonmagical damage, except the damage it takes from sunlight.",
        attack_bonus: 0
      },
      {
        name: "Legendary Resistance (3/Day)",
        desc: "If the vampire fails a saving throw, it can choose to succeed instead.",
        attack_bonus: 0
      },
      {
        name: "Misty Escape",
        desc: "When it drops to 0 hit points outside its resting place, the vampire transforms into a cloud of mist (as in the Shapechanger trait) instead of falling unconscious, provided that it isn't in sunlight or running water. If it can't transform, it is destroyed.\nWhile it has 0 hit points in mist form, it can't revert to its vampire form, and it must reach its resting place within 2 hours or be destroyed. Once in its resting place, it reverts to its vampire form. It is then paralyzed until it regains at least 1 hit point. After spending 1 hour in its resting place with 0 hit points, it regains 1 hit point.",
        attack_bonus: 0
      },
      {
        name: "Regeneration",
        desc: "The vampire regains 20 hit points at the start of its turn if it has at least 1 hit point and isn't in sunlight or running water. If the vampire takes radiant damage or damage from holy water, this trait doesn't function at the start of the vampire's next turn.",
        attack_bonus: 0
      },
      {
        name: "Spider Climb",
        desc: "The vampire can climb difficult surfaces, including upside down on ceilings, without needing to make an ability check.",
        attack_bonus: 0
      },
      {
        name: "Vampire Weaknesses",
        desc: "The vampire has the following flaws:\nForbiddance. The vampire can't enter a residence without an invitation from one of the occupants.\nHarmed by Running Water. The vampire takes 20 acid damage if it ends its turn in running water.\nStake to the Heart. If a piercing weapon made of wood is driven into the vampire's heart while the vampire is incapacitated in its resting place, the vampire is paralyzed until the stake is removed.\nSunlight Hypersensitivity. The vampire takes 20 radiant damage when it starts its turn in sunlight. While in sunlight, it has disadvantage on attack rolls and ability checks.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack (Vampire Form Only)",
        desc: "The vampire makes two attacks, only one of which can be a bite attack.",
        attack_bonus: 0
      },
      {
        name: "Unarmed Strike (Vampire Form Only)",
        desc: "Melee Weapon Attack: +9 to hit, reach 5 ft., one creature. Hit: 8 (1d8 + 4) bludgeoning damage. Instead of dealing damage, the vampire can grapple the target (escape DC 18).",
        attack_bonus: 9,
        damage_dice: "1d8",
        damage_bonus: 4
      },
      {
        name: "Bite (Bat or Vampire Form Only)",
        desc: "Melee Weapon Attack: +9 to hit, reach 5 ft., one willing creature, or a creature that is grappled by the vampire, incapacitated, or restrained. Hit: 7 (1d6 + 4) piercing damage plus 10 (3d6) necrotic damage. The target's hit point maximum is reduced by an amount equal to the necrotic damage taken, and the vampire regains hit points equal to that amount. The reduction lasts until the target finishes a long rest. The target dies if this effect reduces its hit point maximum to 0. A humanoid slain in this way and then buried in the ground rises the following night as a vampire spawn under the vampire's control.",
        attack_bonus: 9,
        damage_dice: "1d6 + 3d6",
        damage_bonus: 4
      },
      {
        name: "Charm",
        desc: "The vampire targets one humanoid it can see within 30 ft. of it. If the target can see the vampire, the target must succeed on a DC 17 Wisdom saving throw against this magic or be charmed by the vampire. The charmed target regards the vampire as a trusted friend to be heeded and protected. Although the target isn't under the vampire's control, it takes the vampire's requests or actions in the most favorable way it can, and it is a willing target for the vampire's bit attack.\nEach time the vampire or the vampire's companions do anything harmful to the target, it can repeat the saving throw, ending the effect on itself on a success. Otherwise, the effect lasts 24 hours or until the vampire is destroyed, is on a different plane of existence than the target, or takes a bonus action to end the effect.",
        attack_bonus: 0
      },
      {
        name: "Children of the Night (1/Day)",
        desc: "The vampire magically calls 2d4 swarms of bats or rats, provided that the sun isn't up. While outdoors, the vampire can call 3d6 wolves instead. The called creatures arrive in 1d4 rounds, acting as allies of the vampire and obeying its spoken commands. The beasts remain for 1 hour, until the vampire dies, or until the vampire dismisses them as a bonus action.",
        attack_bonus: 0
      }
    ],
    legendary_actions: [
      {
        name: "Move",
        desc: "The vampire moves up to its speed without provoking opportunity attacks.",
        attack_bonus: 0
      },
      {
        name: "Unarmed Strike",
        desc: "The vampire makes one unarmed strike.",
        attack_bonus: 0
      },
      {
        name: "Bite (Costs 2 Actions)",
        desc: "The vampire makes one bite attack.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Vampire Spawn",
    size: "Medium",
    source: "SRD",
    type: "undead",
    subtype: "",
    alignment: "neutral evil",
    ac: 15,
    hp: 82,
    hit_dice: "11d8",
    speed: "30 ft.",
    stats: [16, 16, 16, 11, 10, 12],
    saves: [
      {
        dexterity: 6
      },
      {
        wisdom: 3
      }
    ],
    skillsaves: [
      {
        perception: 3
      },
      {
        stealth: 6
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "necrotic; bludgeoning, piercing, and slashing from nonmagical weapons",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 13",
    languages: "the languages it knew in life",
    cr: "5",
    traits: [
      {
        name: "Regeneration",
        desc: "The vampire regains 10 hit points at the start of its turn if it has at least 1 hit point and isn't in sunlight or running water. If the vampire takes radiant damage or damage from holy water, this trait doesn't function at the start of the vampire's next turn.",
        attack_bonus: 0
      },
      {
        name: "Spider Climb",
        desc: "The vampire can climb difficult surfaces, including upside down on ceilings, without needing to make an ability check.",
        attack_bonus: 0
      },
      {
        name: "Vampire Weaknesses",
        desc: "The vampire has the following flaws:\nForbiddance. The vampire can't enter a residence without an invitation from one of the occupants.\nHarmed by Running Water. The vampire takes 20 acid damage when it ends its turn in running water.\nStake to the Heart. The vampire is destroyed if a piercing weapon made of wood is driven into its heart while it is incapacitated in its resting place.\nSunlight Hypersensitivity. The vampire takes 20 radiant damage when it starts its turn in sunlight. While in sunlight, it has disadvantage on attack rolls and ability checks.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The vampire makes two attacks, only one of which can be a bite attack.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one willing creature, or a creature that is grappled by the vampire, incapacitated, or restrained. Hit: 6 (1d6 + 3) piercing damage plus 7 (2d6) necrotic damage. The target's hit point maximum is reduced by an amount equal to the necrotic damage taken, and the vampire regains hit points equal to that amount. The reduction lasts until the target finishes a long rest. The target dies if this effect reduces its hit point maximum to 0.",
        attack_bonus: 61
      },
      {
        name: "Claws",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one creature. Hit: 8 (2d4 + 3) slashing damage. Instead of dealing damage, the vampire can grapple the target (escape DC 13).",
        attack_bonus: 6,
        damage_dice: "2d4",
        damage_bonus: 3
      }
    ]
  },
  {
    name: "Veteran",
    size: "Medium",
    source: "SRD",
    type: "humanoid",
    subtype: "any race",
    alignment: "any alignment",
    ac: 17,
    hp: 58,
    hit_dice: "9d8",
    speed: "30 ft.",
    stats: [16, 13, 14, 10, 11, 10],
    skillsaves: [
      {
        athletics: 5
      },
      {
        perception: 2
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 12",
    languages: "any one language (usually Common)",
    cr: "3",
    actions: [
      {
        name: "Multiattack",
        desc: "The veteran makes two longsword attacks. If it has a shortsword drawn, it can also make a shortsword attack.",
        attack_bonus: 0
      },
      {
        name: "Longsword",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 7 (1d8 + 3) slashing damage, or 8 (1d10 + 3) slashing damage if used with two hands.",
        attack_bonus: 5,
        damage_dice: "1d8",
        damage_bonus: 3
      },
      {
        name: "Shortsword",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 6 (1d6 + 3) piercing damage.",
        attack_bonus: 5,
        damage_dice: "1d6",
        damage_bonus: 3
      },
      {
        name: "Heavy Crossbow",
        desc: "Ranged Weapon Attack: +3 to hit, range 100/400 ft., one target. Hit: 6 (1d10 + 1) piercing damage.",
        attack_bonus: 3,
        damage_dice: "1d10",
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Violet Fungus",
    size: "Medium",
    source: "SRD",
    type: "plant",
    subtype: "",
    alignment: "unaligned",
    ac: 5,
    hp: 18,
    hit_dice: "4d8",
    speed: "5 ft.",
    stats: [3, 1, 10, 1, 3, 1],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "blinded, deafened, frightened",
    senses: "blindsight 30 ft. (blind beyond this radius), passive Perception 6",
    languages: "",
    cr: "1/4",
    traits: [
      {
        name: "False Appearance",
        desc: "While the violet fungus remains motionless, it is indistinguishable from an ordinary fungus.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The fungus makes 1d4 Rotting Touch attacks.",
        attack_bonus: 0
      },
      {
        name: "Rotting Touch",
        desc: "Melee Weapon Attack: +2 to hit, reach 10 ft., one creature. Hit: 4 (1d8) necrotic damage.",
        attack_bonus: 2,
        damage_dice: "1d8"
      }
    ]
  },
  {
    name: "Vrock",
    size: "Large",
    source: "SRD",
    type: "fiend",
    subtype: "demon",
    alignment: "chaotic evil",
    ac: 15,
    hp: 104,
    hit_dice: "11d10",
    speed: "40 ft., fly 60 ft.",
    stats: [17, 15, 18, 8, 13, 8],
    saves: [
      {
        dexterity: 5
      },
      {
        wisdom: 4
      },
      {
        charisma: 2
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "cold, fire, lightning; bludgeoning, piercing, and slashing from nonmagical weapons",
    damage_immunities: "poison",
    condition_immunities: "poisoned",
    senses: "darkvision 120 ft., passive Perception 11",
    languages: "Abyssal, telepathy 120 ft.",
    cr: "6",
    traits: [
      {
        name: "Magic Resistance",
        desc: "The vrock has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The vrock makes two attacks: one with its beak and one with its talons.",
        attack_bonus: 0
      },
      {
        name: "Beak",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 10 (2d6 + 3) piercing damage.",
        attack_bonus: 6,
        damage_dice: "2d6",
        damage_bonus: 3
      },
      {
        name: "Talons",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 14 (2d10 + 3) slashing damage.",
        attack_bonus: 6,
        damage_dice: "2d10",
        damage_bonus: 3
      },
      {
        name: "Spores (Recharge 6)",
        desc: "A 15-foot-radius cloud of toxic spores extends out from the vrock. The spores spread around corners. Each creature in that area must succeed on a DC 14 Constitution saving throw or become poisoned. While poisoned in this way, a target takes 5 (1d10) poison damage at the start of each of its turns. A target can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. Emptying a vial of holy water on the target also ends the effect on it.",
        attack_bonus: 0
      },
      {
        name: "Stunning Screech (1/Day)",
        desc: "The vrock emits a horrific screech. Each creature within 20 feet of it that can hear it and that isn't a demon must succeed on a DC 14 Constitution saving throw or be stunned until the end of the vrock's next turn .",
        attack_bonus: 0
      },
      {
        name: "Variant: Summon Demon (1/Day)",
        desc: "The demon chooses what to summon and attempts a magical summoning.\nA vrock has a 30 percent chance of summoning 2d4 dretches or one vrock.\nA summoned demon appears in an unoccupied space within 60 feet of its summoner, acts as an ally of its summoner, and can't summon other demons. It remains for 1 minute, until it or its summoner dies, or until its summoner dismisses it as an action.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Vulture",
    size: "Medium",
    source: "SRD",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 10,
    hp: 5,
    hit_dice: "1d8",
    speed: "10 ft., fly 50 ft.",
    stats: [7, 10, 13, 2, 12, 4],
    skillsaves: [
      {
        perception: 3
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 13",
    languages: "",
    cr: "0",
    traits: [
      {
        name: "Keen Sight and Smell",
        desc: "The vulture has advantage on Wisdom (Perception) checks that rely on sight or smell.",
        attack_bonus: 0
      },
      {
        name: "Pack Tactics",
        desc: "The vulture has advantage on an attack roll against a creature if at least one of the vulture's allies is within 5 ft. of the creature and the ally isn't incapacitated.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Beak",
        desc: "Melee Weapon Attack: +2 to hit, reach 5 ft., one target. Hit: 2 (1d4) piercing damage.",
        attack_bonus: 2,
        damage_dice: "1d4"
      }
    ]
  },
  {
    name: "Warhorse",
    size: "Large",
    source: "SRD",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 11,
    hp: 19,
    hit_dice: "3d10",
    speed: "60 ft.",
    stats: [18, 12, 13, 2, 12, 7],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 11",
    languages: "",
    cr: "1/2",
    traits: [
      {
        name: "Trampling Charge",
        desc: "If the horse moves at least 20 ft. straight toward a creature and then hits it with a hooves attack on the same turn, that target must succeed on a DC 14 Strength saving throw or be knocked prone. If the target is prone, the horse can make another attack with its hooves against it as a bonus action.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Hooves",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 11 (2d6 + 4) bludgeoning damage.",
        attack_bonus: 6,
        damage_dice: "2d6",
        damage_bonus: 4
      }
    ]
  },
  {
    name: "Warhorse Skeleton",
    size: "Large",
    source: "SRD",
    type: "undead",
    subtype: "",
    alignment: "lawful evil",
    ac: 13,
    hp: 22,
    hit_dice: "3d10",
    speed: "60 ft.",
    stats: [18, 12, 15, 2, 8, 5],
    damage_vulnerabilities: "bludgeoning",
    damage_resistances: "",
    damage_immunities: "poison",
    condition_immunities: "exhaustion, poisoned",
    senses: "darkvision 60 ft., passive Perception 9",
    languages: "",
    cr: "1/2",
    actions: [
      {
        name: "Hooves",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 11 (2d6 + 4) bludgeoning damage.",
        attack_bonus: 6,
        damage_dice: "2d6",
        damage_bonus: 4
      }
    ]
  },
  {
    name: "Water Elemental",
    size: "Large",
    source: "SRD",
    type: "elemental",
    subtype: "",
    alignment: "neutral",
    ac: 14,
    hp: 114,
    hit_dice: "12d10",
    speed: "30 ft., swim 90 ft.",
    stats: [18, 14, 18, 5, 10, 8],
    damage_vulnerabilities: "",
    damage_resistances: "acid; bludgeoning, piercing, and slashing from nonmagical weapons",
    damage_immunities: "poison",
    condition_immunities: "exhaustion, grappled, paralyzed, petrified, poisoned, prone, restrained, unconscious",
    senses: "darkvision 60 ft., passive Perception 10",
    languages: "Aquan",
    cr: "5",
    traits: [
      {
        name: "Water Form",
        desc: "The elemental can enter a hostile creature's space and stop there. It can move through a space as narrow as 1 inch wide without squeezing.",
        attack_bonus: 0
      },
      {
        name: "Freeze",
        desc: "If the elemental takes cold damage, it partially freezes; its speed is reduced by 20 ft. until the end of its next turn.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The elemental makes two slam attacks.",
        attack_bonus: 0
      },
      {
        name: "Slam",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 13 (2d8 + 4) bludgeoning damage.",
        attack_bonus: 7,
        damage_dice: "2d8",
        damage_bonus: 4
      },
      {
        name: "Whelm (Recharge 4-6)",
        desc: "Each creature in the elemental's space must make a DC 15 Strength saving throw. On a failure, a target takes 13 (2d8 + 4) bludgeoning damage. If it is Large or smaller, it is also grappled (escape DC 14). Until this grapple ends, the target is restrained and unable to breathe unless it can breathe water. If the saving throw is successful, the target is pushed out of the elemental's space.\nThe elemental can grapple one Large creature or up to two Medium or smaller creatures at one time. At the start of each of the elemental's turns, each target grappled by it takes 13 (2d8 + 4) bludgeoning damage. A creature within 5 feet of the elemental can pull a creature or object out of it by taking an action to make a DC 14 Strength and succeeding.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Weasel",
    size: "Tiny",
    source: "SRD",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 13,
    hp: 1,
    hit_dice: "1d4",
    speed: "30 ft.",
    stats: [3, 16, 8, 2, 12, 3],
    skillsaves: [
      {
        perception: 3
      },
      {
        stealth: 5
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 13",
    languages: "",
    cr: "0",
    traits: [
      {
        name: "Keen Hearing and Smell",
        desc: "The weasel has advantage on Wisdom (Perception) checks that rely on hearing or smell.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one creature. Hit: 1 piercing damage.",
        attack_bonus: 5,
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Werebear",
    size: "Medium",
    source: "SRD",
    type: "humanoid",
    subtype: "human",
    alignment: "neutral good",
    ac: 10,
    hp: 135,
    hit_dice: "18d8",
    speed: "30 ft. (40 ft., climb 30 ft. in bear or hybrid form)",
    stats: [19, 10, 17, 11, 12, 12],
    skillsaves: [
      {
        perception: 7
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "bludgeoning, piercing, and slashing damage from nonmagical weapons that aren't silvered",
    condition_immunities: "",
    senses: "passive Perception 17",
    languages: "Common (can't speak in bear form)",
    cr: "5",
    traits: [
      {
        name: "Shapechanger",
        desc: "The werebear can use its action to polymorph into a Large bear-humanoid hybrid or into a Large bear, or back into its true form, which is humanoid. Its statistics, other than its size and AC, are the same in each form. Any equipment it. is wearing or carrying isn't transformed. It reverts to its true form if it dies.",
        attack_bonus: 0
      },
      {
        name: "Keen Smell",
        desc: "The werebear has advantage on WisGlom (Perception) checks that rely on smell.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "In bear form, the werebear makes two claw attacks. In humanoid form, it makes two greataxe attacks. In hybrid form, it can attack like a bear or a humanoid.",
        attack_bonus: 0
      },
      {
        name: "Bite (Bear or Hybrid Form Only)",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 15 (2d10 + 4) piercing damage. If the target is a humanoid, it must succeed on a DC 14 Constitution saving throw or be cursed with were bear lycanthropy.",
        attack_bonus: 7,
        damage_dice: "2d10",
        damage_bonus: 4
      },
      {
        name: "Claw (Bear or Hybrid Form Only)",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 13 (2d8 + 4) slashing damage.",
        attack_bonus: 7,
        damage_dice: "2d8",
        damage_bonus: 4
      },
      {
        name: "Greataxe (Humanoid or Hybrid Form Only)",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 10 (1d12 + 4) slashing damage.",
        attack_bonus: 7,
        damage_dice: "1d12",
        damage_bonus: 4
      }
    ]
  },
  {
    name: "Wereboar",
    size: "Medium",
    source: "SRD",
    type: "humanoid",
    subtype: "human",
    alignment: "neutral evil",
    ac: 10,
    hp: 78,
    hit_dice: "12d8",
    speed: "30 ft. (40 ft. in boar form)",
    stats: [17, 10, 15, 10, 11, 8],
    skillsaves: [
      {
        perception: 2
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "bludgeoning, piercing, and slashing damage from nonmagical weapons that aren't silvered",
    condition_immunities: "",
    senses: "passive Perception 12",
    languages: "Common (can't speak in boar form)",
    cr: "4",
    traits: [
      {
        name: "Shapechanger",
        desc: "The wereboar can use its action to polymorph into a boar-humanoid hybrid or into a boar, or back into its true form, which is humanoid. Its statistics, other than its AC, are the same in each form. Any equipment it is wearing or carrying isn't transformed. It reverts to its true form if it dies.",
        attack_bonus: 0
      },
      {
        name: "Charge (Boar or Hybrid Form Only)",
        desc: "If the wereboar moves at least 15 feet straight toward a target and then hits it with its tusks on the same turn, the target takes an extra 7 (2d6) slashing damage. If the target is a creature, it must succeed on a DC 13 Strength saving throw or be knocked prone.",
        attack_bonus: 0,
        damage_dice: "2d6"
      },
      {
        name: "Relentless (Recharges after a Short or Long Rest)",
        desc: "If the wereboar takes 14 damage or less that would reduce it to 0 hit points, it is reduced to 1 hit point instead.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack (Humanoid or Hybrid Form Only)",
        desc: "The wereboar makes two attacks, only one of which can be with its tusks.",
        attack_bonus: 0
      },
      {
        name: "Maul (Humanoid or Hybrid Form Only)",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 10 (2d6 + 3) bludgeoning damage.",
        attack_bonus: 5,
        damage_dice: "2d6",
        damage_bonus: 3
      },
      {
        name: "Tusks (Boar or Hybrid Form Only)",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 10 (2d6 + 3) slashing damage. If the target is a humanoid, it must succeed on a DC 12 Constitution saving throw or be cursed with wereboar lycanthropy.",
        attack_bonus: 5,
        damage_dice: "2d6",
        damage_bonus: 3
      }
    ]
  },
  {
    name: "Wererat",
    size: "Medium",
    source: "SRD",
    type: "humanoid",
    subtype: "human",
    alignment: "lawful evil",
    ac: 12,
    hp: 33,
    hit_dice: "6d8",
    speed: "30 ft.",
    stats: [10, 15, 12, 11, 10, 8],
    skillsaves: [
      {
        perception: 2
      },
      {
        stealth: 4
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "bludgeoning, piercing, and slashing damage from nonmagical weapons that aren't silvered",
    condition_immunities: "",
    senses: "darkvision 60 ft. (rat form only), passive Perception 12",
    languages: "Common (can't speak in rat form)",
    cr: "2",
    traits: [
      {
        name: "Shapechanger",
        desc: "The wererat can use its action to polymorph into a rat-humanoid hybrid or into a giant rat, or back into its true form, which is humanoid. Its statistics, other than its size, are the same in each form. Any equipment it is wearing or carrying isn't transformed. It reverts to its true form if it dies.",
        attack_bonus: 0
      },
      {
        name: "Keen Smell",
        desc: "The wererat has advantage on Wisdom (Perception) checks that rely on smell.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack (Humanoid or Hybrid Form Only)",
        desc: "The wererat makes two attacks, only one of which can be a bite.",
        attack_bonus: 0
      },
      {
        name: "Bite (Rat or Hybrid Form Only).",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 4 (1d4 + 2) piercing damage. If the target is a humanoid, it must succeed on a DC 11 Constitution saving throw or be cursed with wererat lycanthropy.",
        attack_bonus: 4,
        damage_dice: "1d4",
        damage_bonus: 2
      },
      {
        name: "Shortsword (Humanoid or Hybrid Form Only)",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 5 (1d6 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d6",
        damage_bonus: 2
      },
      {
        name: "Hand Crossbow (Humanoid or Hybrid Form Only)",
        desc: "Ranged Weapon Attack: +4 to hit, range 30/120 ft., one target. Hit: 5 (1d6 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d6",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Weretiger",
    size: "Medium",
    source: "SRD",
    type: "humanoid",
    subtype: "human",
    alignment: "neutral",
    ac: 12,
    hp: 120,
    hit_dice: "16d8",
    speed: "30 ft. (40 ft. in tiger form)",
    stats: [17, 15, 16, 10, 13, 11],
    skillsaves: [
      {
        perception: 5
      },
      {
        stealth: 4
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "bludgeoning, piercing, and slashing damage from nonmagical weapons that aren't silvered",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 15",
    languages: "Common (can't speak in tiger form)",
    cr: "4",
    traits: [
      {
        name: "Shapechanger",
        desc: "The weretiger can use its action to polymorph into a tiger-humanoid hybrid or into a tiger, or back into its true form, which is humanoid. Its statistics, other than its size, are the same in each form. Any equipment it is wearing or carrying isn't transformed. It reverts to its true form if it dies.",
        attack_bonus: 0
      },
      {
        name: "Keen Hearing and Smell",
        desc: "The weretiger has advantage on Wisdom (Perception) checks that rely on hearing or smell.",
        attack_bonus: 0
      },
      {
        name: "Pounce (Tiger or Hybrid Form Only)",
        desc: "If the weretiger moves at least 15 feet straight toward a creature and then hits it with a claw attack on the same turn, that target must succeed on a DC 14 Strength saving throw or be knocked prone. If the target is prone, the weretiger can make one bite attack against it as a bonus action.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack (Humanoid or Hybrid Form Only)",
        desc: "In humanoid form, the weretiger makes two scimitar attacks or two longbow attacks. In hybrid form, it can attack like a humanoid or make two claw attacks.",
        attack_bonus: 0
      },
      {
        name: "Bite (Tiger or Hybrid Form Only)",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 8 (1d10 + 3) piercing damage. If the target is a humanoid, it must succeed on a DC 13 Constitution saving throw or be cursed with weretiger lycanthropy.",
        attack_bonus: 5,
        damage_dice: "1d10",
        damage_bonus: 3
      },
      {
        name: "Claw (Tiger or Hybrid Form Only)",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 7 (1d8 + 3) slashing damage.",
        attack_bonus: 5,
        damage_dice: "1d8",
        damage_bonus: 3
      },
      {
        name: "Scimitar (Humanoid or Hybrid Form Only)",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 6 (1d6 + 3) slashing damage.",
        attack_bonus: 5,
        damage_dice: "1d6",
        damage_bonus: 3
      },
      {
        name: "Longbow (Humanoid or Hybrid Form Only)",
        desc: "Ranged Weapon Attack: +4 to hit, range 150/600 ft., one target. Hit: 6 (1d8 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d8",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Werewolf",
    size: "Medium",
    source: "SRD",
    type: "humanoid",
    subtype: "human",
    alignment: "chaotic evil",
    ac: 11,
    hp: 58,
    hit_dice: "9d8",
    speed: "30 ft. (40 ft. in wolf form)",
    stats: [15, 13, 14, 10, 11, 10],
    skillsaves: [
      {
        perception: 4
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "bludgeoning, piercing, and slashing damage from nonmagical weapons that aren't silvered",
    condition_immunities: "",
    senses: "passive Perception 14",
    languages: "Common (can't speak in wolf form)",
    cr: "3",
    traits: [
      {
        name: "Shapechanger",
        desc: "The werewolf can use its action to polymorph into a wolf-humanoid hybrid or into a wolf, or back into its true form, which is humanoid. Its statistics, other than its AC, are the same in each form. Any equipment it is wearing or carrying isn't transformed. It reverts to its true form if it dies.",
        attack_bonus: 0
      },
      {
        name: "Keen Hearing and Smell",
        desc: "The werewolf has advantage on Wisdom (Perception) checks that rely on hearing or smell.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack (Humanoid or Hybrid Form Only)",
        desc: "The werewolf makes two attacks: one with its bite and one with its claws or spear.",
        attack_bonus: 0
      },
      {
        name: "Bite (Wolf or Hybrid Form Only)",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 6 (1d8 + 2) piercing damage. If the target is a humanoid, it must succeed on a DC 12 Constitution saving throw or be cursed with werewolf lycanthropy.",
        attack_bonus: 4,
        damage_dice: "1d8",
        damage_bonus: 2
      },
      {
        name: "Claws (Hybrid Form Only)",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one creature. Hit: 7 (2d4 + 2) slashing damage.",
        attack_bonus: 4,
        damage_dice: "2d4",
        damage_bonus: 2
      },
      {
        name: "Spear (Humanoid Form Only)",
        desc: "Melee or Ranged Weapon Attack: +4 to hit, reach 5 ft. or range 20/60 ft., one creature. Hit: 5 (1d6 + 2) piercing damage, or 6 (1d8 + 2) piercing damage if used with two hands to make a melee attack.",
        attack_bonus: 4,
        damage_dice: "1d6",
        damage_bonus: -2
      }
    ]
  },
  {
    name: "White Dragon Wyrmling",
    size: "Medium",
    source: "SRD",
    type: "dragon",
    subtype: "",
    alignment: "chaotic evil",
    ac: 16,
    hp: 32,
    hit_dice: "5d8",
    speed: "30 ft., burrow 15 ft., fly 60 ft., swim 30 ft.",
    stats: [14, 10, 14, 5, 10, 11],
    saves: [
      {
        dexterity: 2
      },
      {
        constitution: 4
      },
      {
        wisdom: 2
      },
      {
        charisma: 2
      }
    ],
    skillsaves: [
      {
        perception: 4
      },
      {
        stealth: 2
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "cold",
    condition_immunities: "",
    senses: "blindsight 10 ft., darkvision 60 ft., passive Perception 14",
    languages: "Draconic",
    cr: "2",
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 7 (1d10 + 2) piercing damage plus 2 (1d4) cold damage.",
        attack_bonus: 4,
        damage_dice: "1d10 + 1d4",
        damage_bonus: 2
      },
      {
        name: "Cold Breath (Recharge 5-6)",
        desc: "The dragon exhales an icy blast of hail in a 15-foot cone. Each creature in that area must make a DC 12 Constitution saving throw, taking 22 (5d8) cold damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "5d8"
      }
    ]
  },
  {
    name: "Wight",
    size: "Medium",
    source: "SRD",
    type: "undead",
    subtype: "",
    alignment: "neutral evil",
    ac: 14,
    hp: 45,
    hit_dice: "6d8",
    speed: "30 ft.",
    stats: [15, 14, 16, 10, 13, 15],
    skillsaves: [
      {
        perception: 3
      },
      {
        stealth: 4
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "necrotic; bludgeoning, piercing, and slashing from nonmagical weapons that aren't silvered",
    condition_immunities: "poisoned",
    senses: "darkvision 60 ft., passive Perception 13",
    languages: "the languages it knew in life",
    cr: "3",
    traits: [
      {
        name: "Sunlight Sensitivity",
        desc: "While in sunlight, the wight has disadvantage on attack rolls, as well as on Wisdom (Perception) checks that rely on sight.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The wight makes two longsword attacks or two longbow attacks. It can use its Life Drain in place of one longsword attack.",
        attack_bonus: 0
      },
      {
        name: "Life Drain",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one creature. Hit: 5 (1d6 + 2) necrotic damage. The target must succeed on a DC 13 Constitution saving throw or its hit point maximum is reduced by an amount equal to the damage taken. This reduction lasts until the target finishes a long rest. The target dies if this effect reduces its hit point maximum to 0.\nA humanoid slain by this attack rises 24 hours later as a zombie under the wight's control, unless the humanoid is restored to life or its body is destroyed. The wight can have no more than twelve zombies under its control at one time.",
        attack_bonus: 4,
        damage_dice: "1d6",
        damage_bonus: 2
      },
      {
        name: "Longsword",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 6 (1d8 + 2) slashing damage, or 7 (1d10 + 2) slashing damage if used with two hands.",
        attack_bonus: 4,
        damage_dice: "1d8",
        damage_bonus: 2
      },
      {
        name: "Longbow",
        desc: "Ranged Weapon Attack: +4 to hit, range 150/600 ft., one target. Hit: 6 (1d8 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d8",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Will-o'-Wisp",
    size: "Tiny",
    source: "SRD",
    type: "undead",
    subtype: "",
    alignment: "chaotic evil",
    ac: 19,
    hp: 22,
    hit_dice: "9d4",
    speed: "0 ft., fly 50 ft. (hover)",
    stats: [1, 28, 10, 13, 14, 11],
    damage_vulnerabilities: "",
    damage_resistances: "acid, cold, fire, necrotic, thunder; bludgeoning, piercing, and slashing from nonmagical weapons",
    damage_immunities: "lightning, poison",
    condition_immunities: "exhaustion, grappled, paralyzed, poisoned, prone, restrained, unconscious",
    senses: "darkvision 120 ft., passive Perception 12",
    languages: "the languages it knew in life",
    cr: "2",
    traits: [
      {
        name: "Consume Life",
        desc: "As a bonus action, the will-o'-wisp can target one creature it can see within 5 ft. of it that has 0 hit points and is still alive. The target must succeed on a DC 10 Constitution saving throw against this magic or die. If the target dies, the will-o'-wisp regains 10 (3d6) hit points.",
        attack_bonus: 0
      },
      {
        name: "Ephemeral",
        desc: "The will-o'-wisp can't wear or carry anything.",
        attack_bonus: 0
      },
      {
        name: "Incorporeal Movement",
        desc: "The will-o'-wisp can move through other creatures and objects as if they were difficult terrain. It takes 5 (1d10) force damage if it ends its turn inside an object.",
        attack_bonus: 0
      },
      {
        name: "Variable Illumination",
        desc: "The will-o'-wisp sheds bright light in a 5- to 20-foot radius and dim light for an additional number of ft. equal to the chosen radius. The will-o'-wisp can alter the radius as a bonus action.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Shock",
        desc: "Melee Spell Attack: +4 to hit, reach 5 ft., one creature. Hit: 9 (2d8) lightning damage.",
        attack_bonus: 4,
        damage_dice: "2d8"
      },
      {
        name: "Invisibility",
        desc: "The will-o'-wisp and its light magically become invisible until it attacks or uses its Consume Life, or until its concentration ends (as if concentrating on a spell).",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Winter Wolf",
    size: "Large",
    source: "SRD",
    type: "monstrosity",
    subtype: "",
    alignment: "neutral evil",
    ac: 13,
    hp: 75,
    hit_dice: "10d10",
    speed: "50 ft.",
    stats: [18, 13, 14, 7, 12, 8],
    skillsaves: [
      {
        perception: 5
      },
      {
        stealth: 3
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "cold",
    condition_immunities: "",
    senses: "passive Perception 15",
    languages: "Common, Giant, Winter Wolf",
    cr: "3",
    traits: [
      {
        name: "Keen Hearing and Smell",
        desc: "The wolf has advantage on Wisdom (Perception) checks that rely on hearing or smell.",
        attack_bonus: 0
      },
      {
        name: "Pack Tactics",
        desc: "The wolf has advantage on an attack roll against a creature if at least one of the wolf's allies is within 5 ft. of the creature and the ally isn't incapacitated.",
        attack_bonus: 0
      },
      {
        name: "Snow Camouflage",
        desc: "The wolf has advantage on Dexterity (Stealth) checks made to hide in snowy terrain.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 11 (2d6 + 4) piercing damage. If the target is a creature, it must succeed on a DC 14 Strength saving throw or be knocked prone.",
        attack_bonus: 6,
        damage_dice: "2d6",
        damage_bonus: 4
      },
      {
        name: "Cold Breath (Recharge 5-6)",
        desc: "The wolf exhales a blast of freezing wind in a 15-foot cone. Each creature in that area must make a DC 12 Dexterity saving throw, taking 18 (4d8) cold damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "4d8"
      }
    ]
  },
  {
    name: "Wolf",
    size: "Medium",
    source: "SRD",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 13,
    hp: 11,
    hit_dice: "2d8",
    speed: "40 ft.",
    stats: [12, 15, 12, 3, 12, 6],
    skillsaves: [
      {
        perception: 3
      },
      {
        stealth: 4
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 13",
    languages: "",
    cr: "1/4",
    traits: [
      {
        name: "Keen Hearing and Smell",
        desc: "The wolf has advantage on Wisdom (Perception) checks that rely on hearing or smell.",
        attack_bonus: 0
      },
      {
        name: "Pack Tactics",
        desc: "The wolf has advantage on an attack roll against a creature if at least one of the wolf's allies is within 5 ft. of the creature and the ally isn't incapacitated.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 7 (2d4 + 2) piercing damage. If the target is a creature, it must succeed on a DC 11 Strength saving throw or be knocked prone.",
        attack_bonus: 4,
        damage_dice: "2d4",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Worg",
    size: "Large",
    source: "SRD",
    type: "monstrosity",
    subtype: "",
    alignment: "neutral evil",
    ac: 13,
    hp: 26,
    hit_dice: "4d10",
    speed: "50 ft.",
    stats: [16, 13, 13, 7, 11, 8],
    skillsaves: [
      {
        perception: 4
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 14",
    languages: "Goblin, Worg",
    cr: "1/2",
    traits: [
      {
        name: "Keen Hearing and Smell",
        desc: "The worg has advantage on Wisdom (Perception) checks that rely on hearing or smell.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 10 (2d6 + 3) piercing damage. If the target is a creature, it must succeed on a DC 13 Strength saving throw or be knocked prone.",
        attack_bonus: 5,
        damage_dice: "2d6",
        damage_bonus: 3
      }
    ]
  },
  {
    name: "Wraith",
    size: "Medium",
    source: "SRD",
    type: "undead",
    subtype: "",
    alignment: "neutral evil",
    ac: 13,
    hp: 67,
    hit_dice: "9d8",
    speed: "0 ft., fly 60 ft. (hover)",
    stats: [6, 16, 16, 12, 14, 15],
    damage_vulnerabilities: "",
    damage_resistances: "acid, cold, fire, lightning, thunder; bludgeoning, piercing, and slashing from nonmagical weapons that aren't silvered",
    damage_immunities: "necrotic, poison",
    condition_immunities: "charmed, exhaustion, grappled, paralyzed, petrified, poisoned, prone, restrained",
    senses: "darkvision 60 ft., passive Perception 12",
    languages: "the languages it knew in life",
    cr: "5",
    traits: [
      {
        name: "Incorporeal Movement",
        desc: "The wraith can move through other creatures and objects as if they were difficult terrain. It takes 5 (1d10) force damage if it ends its turn inside an object.",
        attack_bonus: 0
      },
      {
        name: "Sunlight Sensitivity",
        desc: "While in sunlight, the wraith has disadvantage on attack rolls, as well as on Wisdom (Perception) checks that rely on sight.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Life Drain",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one creature. Hit: 21 (4d8 + 3) necrotic damage. The target must succeed on a DC 14 Constitution saving throw or its hit point maximum is reduced by an amount equal to the damage taken. This reduction lasts until the target finishes a long rest. The target dies if this effect reduces its hit point maximum to 0.",
        attack_bonus: 6,
        damage_dice: "4d8",
        damage_bonus: 3
      },
      {
        name: "Create Specter",
        desc: "The wraith targets a humanoid within 10 feet of it that has been dead for no longer than 1 minute and died violently. The target's spirit rises as a specter in the space of its corpse or in the nearest unoccupied space. The specter is under the wraith's control. The wraith can have no more than seven specters under its control at one time.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Wyvern",
    size: "Large",
    source: "SRD",
    type: "dragon",
    subtype: "",
    alignment: "unaligned",
    ac: 13,
    hp: 110,
    hit_dice: "13d10",
    speed: "20 ft., fly 80 ft.",
    stats: [19, 10, 16, 5, 12, 6],
    skillsaves: [
      {
        perception: 4
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 14",
    languages: "",
    cr: "6",
    actions: [
      {
        name: "Multiattack",
        desc: "The wyvern makes two attacks: one with its bite and one with its stinger. While flying, it can use its claws in place of one other attack.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +7 to hit, reach 10 ft., one creature. Hit: 11 (2d6 + 4) piercing damage.",
        attack_bonus: 7,
        damage_dice: "2d6",
        damage_bonus: 4
      },
      {
        name: "Claws",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 13 (2d8 + 4) slashing damage.",
        attack_bonus: 7,
        damage_dice: "2d8",
        damage_bonus: 4
      },
      {
        name: "Stinger",
        desc: "Melee Weapon Attack: +7 to hit, reach 10 ft., one creature. Hit: 11 (2d6 + 4) piercing damage. The target must make a DC 15 Constitution saving throw, taking 24 (7d6) poison damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 7,
        damage_dice: "2d6",
        damage_bonus: 4
      }
    ]
  },
  {
    name: "Xorn",
    size: "Medium",
    source: "SRD",
    type: "elemental",
    subtype: "",
    alignment: "neutral",
    ac: 19,
    hp: 73,
    hit_dice: "7d8",
    speed: "20 ft., burrow 20 ft.",
    stats: [17, 10, 22, 11, 10, 11],
    skillsaves: [
      {
        perception: 6
      },
      {
        stealth: 3
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "piercing and slashing from nonmagical weapons that aren't adamantine",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., tremorsense 60 ft., passive Perception 16",
    languages: "Terran",
    cr: "5",
    traits: [
      {
        name: "Earth Glide",
        desc: "The xorn can burrow through nonmagical, unworked earth and stone. While doing so, the xorn doesn't disturb the material it moves through.",
        attack_bonus: 0
      },
      {
        name: "Stone Camouflage",
        desc: "The xorn has advantage on Dexterity (Stealth) checks made to hide in rocky terrain.",
        attack_bonus: 0
      },
      {
        name: "Treasure Sense",
        desc: "The xorn can pinpoint, by scent, the location of precious metals and stones, such as coins and gems, within 60 ft. of it.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The xorn makes three claw attacks and one bite attack.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 13 (3d6 + 3) piercing damage.",
        attack_bonus: 6,
        damage_dice: "3d6",
        damage_bonus: 3
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 6 (1d6 + 3) slashing damage.",
        attack_bonus: 6,
        damage_dice: "1d6",
        damage_bonus: 3
      }
    ]
  },
  {
    name: "Young Black Dragon",
    size: "Large",
    source: "SRD",
    type: "dragon",
    subtype: "",
    alignment: "chaotic evil",
    ac: 18,
    hp: 127,
    hit_dice: "15d10",
    speed: "40 ft., fly 80 ft., swim 40 ft.",
    stats: [19, 14, 17, 12, 11, 15],
    saves: [
      {
        dexterity: 5
      },
      {
        constitution: 6
      },
      {
        wisdom: 3
      },
      {
        charisma: 5
      }
    ],
    skillsaves: [
      {
        perception: 6
      },
      {
        stealth: 5
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "acid",
    condition_immunities: "",
    senses: "blindsight 30 ft., darkvision 120 ft., passive Perception 16",
    languages: "Common, Draconic",
    cr: "7",
    traits: [
      {
        name: "Amphibious",
        desc: "The dragon can breathe air and water.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +7 to hit, reach 10 ft., one target. Hit: 15 (2d10 + 4) piercing damage plus 4 (1d8) acid damage.",
        attack_bonus: 7,
        damage_dice: "2d10 + 1d8",
        damage_bonus: 4
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 11 (2d6 + 4) slashing damage.",
        attack_bonus: 7,
        damage_dice: "2d6",
        damage_bonus: 4
      },
      {
        name: "Acid Breath (Recharge 5-6)",
        desc: "The dragon exhales acid in a 30-foot line that is 5 feet wide. Each creature in that line must make a DC 14 Dexterity saving throw, taking 49 (11d8) acid damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "11d8"
      }
    ]
  },
  {
    name: "Young Blue Dragon",
    size: "Large",
    source: "SRD",
    type: "dragon",
    subtype: "",
    alignment: "lawful evil",
    ac: 18,
    hp: 152,
    hit_dice: "16d10",
    speed: "40 ft., burrow 40 ft., fly 80 ft.",
    stats: [21, 10, 19, 14, 13, 17],
    saves: [
      {
        dexterity: 4
      },
      {
        constitution: 8
      },
      {
        wisdom: 5
      },
      {
        charisma: 7
      }
    ],
    skillsaves: [
      {
        perception: 9
      },
      {
        stealth: 4
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "lightning",
    condition_immunities: "",
    senses: "blindsight 30 ft., darkvision 120 ft., passive Perception 19",
    languages: "Common, Draconic",
    cr: "9",
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +9 to hit, reach 10 ft., one target. Hit: 16 (2d10 + 5) piercing damage plus 5 (1d10) lightning damage.",
        attack_bonus: 9,
        damage_dice: "2d10 + 1d10",
        damage_bonus: 5
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +9 to hit, reach 5 ft., one target. Hit: 12 (2d6 + 5) slashing damage.",
        attack_bonus: 9,
        damage_dice: "2d6",
        damage_bonus: 5
      },
      {
        name: "Lightning Breath (Recharge 5-6)",
        desc: "The dragon exhales lightning in an 60-foot line that is 5 feet wide. Each creature in that line must make a DC 16 Dexterity saving throw, taking 55 (10d10) lightning damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "10d10"
      }
    ]
  },
  {
    name: "Young Brass Dragon",
    size: "Large",
    source: "SRD",
    type: "dragon",
    subtype: "",
    alignment: "chaotic good",
    ac: 17,
    hp: 110,
    hit_dice: "13d10",
    speed: "40 ft., burrow 20 ft., fly 80 ft.",
    stats: [19, 10, 17, 12, 11, 15],
    saves: [
      {
        dexterity: 3
      },
      {
        constitution: 6
      },
      {
        wisdom: 3
      },
      {
        charisma: 5
      }
    ],
    skillsaves: [
      {
        perception: 6
      },
      {
        persuasion: 5
      },
      {
        stealth: 3
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "fire",
    condition_immunities: "",
    senses: "blindsight 30 ft., darkvision 120 ft., passive Perception 16",
    languages: "Common, Draconic",
    cr: "6",
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +7 to hit, reach 10 ft., one target. Hit: 15 (2d10 + 4) piercing damage.",
        attack_bonus: 7,
        damage_dice: "2d10",
        damage_bonus: 4
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 11 (2d6 + 4) slashing damage.",
        attack_bonus: 7,
        damage_dice: "2d6",
        damage_bonus: 4
      },
      {
        name: "Breath Weapons (Recharge 5-6)",
        desc: "The dragon uses one of the following breath weapons.\nFire Breath. The dragon exhales fire in a 40-foot line that is 5 feet wide. Each creature in that line must make a DC 14 Dexterity saving throw, taking 42 (12d6) fire damage on a failed save, or half as much damage on a successful one.\nSleep Breath. The dragon exhales sleep gas in a 30-foot cone. Each creature in that area must succeed on a DC 14 Constitution saving throw or fall unconscious for 5 minutes. This effect ends for a creature if the creature takes damage or someone uses an action to wake it.",
        attack_bonus: 0,
        damage_dice: "12d6"
      }
    ]
  },
  {
    name: "Young Bronze Dragon",
    size: "Large",
    source: "SRD",
    type: "dragon",
    subtype: "",
    alignment: "lawful good",
    ac: 18,
    hp: 142,
    hit_dice: "15d10",
    speed: "40 ft., fly 80 ft., swim 40 ft.",
    stats: [21, 10, 19, 14, 13, 17],
    saves: [
      {
        dexterity: 3
      },
      {
        constitution: 7
      },
      {
        wisdom: 4
      },
      {
        charisma: 6
      }
    ],
    skillsaves: [
      {
        insight: 4
      },
      {
        perception: 7
      },
      {
        stealth: 3
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "lightning",
    condition_immunities: "",
    senses: "blindsight 30 ft., darkvision 120 ft., passive Perception 17",
    languages: "Common, Draconic",
    cr: "8",
    traits: [
      {
        name: "Amphibious",
        desc: "The dragon can breathe air and water.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +8 to hit, reach 10 ft., one target. Hit: 16 (2d10 + 5) piercing damage.",
        attack_bonus: 8,
        damage_dice: "2d10",
        damage_bonus: 5
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +8 to hit, reach 5 ft., one target. Hit: 12 (2d6 + 5) slashing damage.",
        attack_bonus: 8,
        damage_dice: "2d6",
        damage_bonus: 5
      },
      {
        name: "Breath Weapons (Recharge 5-6)",
        desc: "The dragon uses one of the following breath weapons.\nLightning Breath. The dragon exhales lightning in a 60-foot line that is 5 feet wide. Each creature in that line must make a DC 15 Dexterity saving throw, taking 55 (10d10) lightning damage on a failed save, or half as much damage on a successful one.\nRepulsion Breath. The dragon exhales repulsion energy in a 30-foot cone. Each creature in that area must succeed on a DC 15 Strength saving throw. On a failed save, the creature is pushed 40 feet away from the dragon.",
        attack_bonus: 0,
        damage_dice: "10d10"
      }
    ]
  },
  {
    name: "Young Copper Dragon",
    size: "Large",
    source: "SRD",
    type: "dragon",
    subtype: "",
    alignment: "chaotic good",
    ac: 17,
    hp: 119,
    hit_dice: "14d10",
    speed: "40 ft., climb 40 ft., fly 80 ft.",
    stats: [19, 12, 17, 16, 13, 15],
    saves: [
      {
        dexterity: 4
      },
      {
        constitution: 6
      },
      {
        wisdom: 4
      },
      {
        charisma: 5
      }
    ],
    skillsaves: [
      {
        deception: 5
      },
      {
        perception: 7
      },
      {
        stealth: 4
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "acid",
    condition_immunities: "",
    senses: "blindsight 30 ft., darkvision 120 ft., passive Perception 17",
    languages: "Common, Draconic",
    cr: "7",
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +7 to hit, reach 10 ft., one target. Hit: 15 (2d10 + 4) piercing damage.",
        attack_bonus: 7,
        damage_dice: "2d10",
        damage_bonus: 4
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 11 (2d6 + 4) slashing damage.",
        attack_bonus: 7,
        damage_dice: "2d6",
        damage_bonus: 4
      },
      {
        name: "Breath Weapons (Recharge 5-6)",
        desc: "The dragon uses one of the following breath weapons.\nAcid Breath. The dragon exhales acid in an 40-foot line that is 5 feet wide. Each creature in that line must make a DC 14 Dexterity saving throw, taking 40 (9d8) acid damage on a failed save, or half as much damage on a successful one.\nSlowing Breath. The dragon exhales gas in a 30-foot cone. Each creature in that area must succeed on a DC 14 Constitution saving throw. On a failed save, the creature can't use reactions, its speed is halved, and it can't make more than one attack on its turn. In addition, the creature can use either an action or a bonus action on its turn, but not both. These effects last for 1 minute. The creature can repeat the saving throw at the end of each of its turns, ending the effect on itself with a successful save.",
        attack_bonus: 0,
        damage_dice: "9d8"
      }
    ]
  },
  {
    name: "Young Gold Dragon",
    size: "Large",
    source: "SRD",
    type: "dragon",
    subtype: "",
    alignment: "lawful good",
    ac: 18,
    hp: 178,
    hit_dice: "17d10",
    speed: "40 ft., fly 80 ft., swim 40 ft.",
    stats: [23, 14, 21, 16, 13, 20],
    saves: [
      {
        dexterity: 6
      },
      {
        constitution: 9
      },
      {
        wisdom: 5
      },
      {
        charisma: 9
      }
    ],
    skillsaves: [
      {
        insight: 5
      },
      {
        perception: 9
      },
      {
        persuasion: 9
      },
      {
        stealth: 6
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "fire",
    condition_immunities: "",
    senses: "blindsight 30 ft., darkvision 120 ft., passive Perception 19",
    languages: "Common, Draconic",
    cr: "10",
    traits: [
      {
        name: "Amphibious",
        desc: "The dragon can breathe air and water.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +10 to hit, reach 10 ft., one target. Hit: 17 (2d10 + 6) piercing damage.",
        attack_bonus: 10,
        damage_dice: "2d10",
        damage_bonus: 6
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +10 to hit, reach 5 ft., one target. Hit: 13 (2d6 + 6) slashing damage.",
        attack_bonus: 10,
        damage_dice: "2d6",
        damage_bonus: 6
      },
      {
        name: "Breath Weapons (Recharge 5-6)",
        desc: "The dragon uses one of the following breath weapons.\nFire Breath. The dragon exhales fire in a 30-foot cone. Each creature in that area must make a DC 17 Dexterity saving throw, taking 55 (10d10) fire damage on a failed save, or half as much damage on a successful one.\nWeakening Breath. The dragon exhales gas in a 30-foot cone. Each creature in that area must succeed on a DC 17 Strength saving throw or have disadvantage on Strength-based attack rolls, Strength checks, and Strength saving throws for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success.",
        attack_bonus: 0,
        damage_dice: "10d10"
      }
    ]
  },
  {
    name: "Young Green Dragon",
    size: "Large",
    source: "SRD",
    type: "dragon",
    subtype: "",
    alignment: "lawful evil",
    ac: 18,
    hp: 136,
    hit_dice: "16d10",
    speed: "40 ft., fly 80 ft., swim 40 ft.",
    stats: [19, 12, 17, 16, 13, 15],
    saves: [
      {
        dexterity: 4
      },
      {
        constitution: 6
      },
      {
        wisdom: 4
      },
      {
        charisma: 5
      }
    ],
    skillsaves: [
      {
        deception: 5
      },
      {
        perception: 7
      },
      {
        stealth: 4
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "poison",
    condition_immunities: "poisoned",
    senses: "blindsight 30 ft., darkvision 120 ft., passive Perception 17",
    languages: "Common, Draconic",
    cr: "8",
    traits: [
      {
        name: "Amphibious",
        desc: "The dragon can breathe air and water.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +7 to hit, reach 10 ft., one target. Hit: 15 (2d10 + 4) piercing damage plus 7 (2d6) poison damage.",
        attack_bonus: 7,
        damage_dice: "2d10 + 2d6",
        damage_bonus: 4
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 11 (2d6 + 4) slashing damage.",
        attack_bonus: 7,
        damage_dice: "2d6",
        damage_bonus: 4
      },
      {
        name: "Poison Breath (Recharge 5-6)",
        desc: "The dragon exhales poisonous gas in a 30-foot cone. Each creature in that area must make a DC 14 Constitution saving throw, taking 42 (12d6) poison damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "12d6"
      }
    ]
  },
  {
    name: "Young Red Dragon",
    size: "Large",
    source: "SRD",
    type: "dragon",
    subtype: "",
    alignment: "chaotic evil",
    ac: 18,
    hp: 178,
    hit_dice: "17d10",
    speed: "40 ft., climb 40 ft., fly 80 ft.",
    stats: [23, 10, 21, 14, 11, 19],
    saves: [
      {
        dexterity: 4
      },
      {
        constitution: 9
      },
      {
        wisdom: 4
      },
      {
        charisma: 8
      }
    ],
    skillsaves: [
      {
        perception: 8
      },
      {
        stealth: 4
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "fire",
    condition_immunities: "",
    senses: "blindsight 30 ft., darkvision 120 ft., passive Perception 18",
    languages: "Common, Draconic",
    cr: "10",
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +10 to hit, reach 10 ft., one target. Hit: 17 (2d10 + 6) piercing damage plus 3 (1d6) fire damage.",
        attack_bonus: 10,
        damage_dice: "2d10 + 1d6",
        damage_bonus: 6
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +10 to hit, reach 5 ft., one target. Hit: 13 (2d6 + 6) slashing damage.",
        attack_bonus: 10,
        damage_dice: "2d6",
        damage_bonus: 6
      },
      {
        name: "Fire Breath (Recharge 5-6)",
        desc: "The dragon exhales fire in a 30-foot cone. Each creature in that area must make a DC 17 Dexterity saving throw, taking 56 (16d6) fire damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "16d6"
      }
    ]
  },
  {
    name: "Young Silver Dragon",
    size: "Large",
    source: "SRD",
    type: "dragon",
    subtype: "",
    alignment: "lawful good",
    ac: 18,
    hp: 168,
    hit_dice: "16d10",
    speed: "40 ft., fly 80 ft.",
    stats: [23, 10, 21, 14, 11, 19],
    saves: [
      {
        dexterity: 4
      },
      {
        constitution: 9
      },
      {
        wisdom: 4
      },
      {
        charisma: 8
      }
    ],
    skillsaves: [
      {
        arcana: 6
      },
      {
        history: 6
      },
      {
        perception: 8
      },
      {
        stealth: 4
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "cold",
    condition_immunities: "",
    senses: "blindsight 30 ft., darkvision 120 ft., passive Perception 18",
    languages: "Common, Draconic",
    cr: "9",
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +10 to hit, reach 10 ft., one target. Hit: 17 (2d10 + 6) piercing damage.",
        attack_bonus: 10,
        damage_dice: "2d10",
        damage_bonus: 6
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +10 to hit, reach 5 ft., one target. Hit: 13 (2d6 + 6) slashing damage.",
        attack_bonus: 10,
        damage_dice: "2d6",
        damage_bonus: 6
      },
      {
        name: "Breath Weapons (Recharge 5-6)",
        desc: "The dragon uses one of the following breath weapons.\nCold Breath. The dragon exhales an icy blast in a 30-foot cone. Each creature in that area must make a DC 17 Constitution saving throw, taking 54 (12d8) cold damage on a failed save, or half as much damage on a successful one.\nParalyzing Breath. The dragon exhales paralyzing gas in a 30-foot cone. Each creature in that area must succeed on a DC 17 Constitution saving throw or be paralyzed for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success.",
        attack_bonus: 0,
        damage_dice: "12d8"
      }
    ]
  },
  {
    name: "Young White Dragon",
    size: "Large",
    source: "SRD",
    type: "dragon",
    subtype: "",
    alignment: "chaotic evil",
    ac: 17,
    hp: 133,
    hit_dice: "14d10",
    speed: "40 ft., burrow 20 ft., fly 80 ft., swim 40 ft.",
    stats: [18, 10, 18, 6, 11, 12],
    saves: [
      {
        dexterity: 3
      },
      {
        constitution: 7
      },
      {
        wisdom: 3
      },
      {
        charisma: 4
      }
    ],
    skillsaves: [
      {
        perception: 6
      },
      {
        stealth: 3
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "cold",
    condition_immunities: "",
    senses: "blindsight 30 ft., darkvision 120 ft., passive Perception 16",
    languages: "Common, Draconic",
    cr: "6",
    traits: [
      {
        name: "Ice Walk",
        desc: "The dragon can move across and climb icy surfaces without needing to make an ability check. Additionally, difficult terrain composed of ice or snow doesn't cost it extra moment.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +7 to hit, reach 10 ft., one target. Hit: 15 (2d10 + 4) piercing damage plus 4 (1d8) cold damage.",
        attack_bonus: 7,
        damage_dice: "2d10 + 1d8",
        damage_bonus: 4
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 11 (2d6 + 4) slashing damage.",
        attack_bonus: 7,
        damage_dice: "2d6",
        damage_bonus: 4
      },
      {
        name: "Cold Breath (Recharge 5-6)",
        desc: "The dragon exhales an icy blast in a 30-foot cone. Each creature in that area must make a DC 15 Constitution saving throw, taking 45 (10d8) cold damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "10d8"
      }
    ]
  },
  {
    name: "Zombie",
    size: "Medium",
    source: "SRD",
    type: "undead",
    subtype: "",
    alignment: "neutral evil",
    ac: 8,
    hp: 22,
    hit_dice: "3d8",
    speed: "20 ft.",
    stats: [13, 6, 16, 3, 6, 5],
    saves: [
      {
        wisdom: 0
      }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "poisoned",
    senses: "darkvision 60 ft., passive Perception 8",
    languages: "understands all languages it spoke in life but can't speak",
    cr: "1/4",
    traits: [
      {
        name: "Undead Fortitude",
        desc: "If damage reduces the zombie to 0 hit points, it must make a Constitution saving throw with a DC of 5+the damage taken, unless the damage is radiant or from a critical hit. On a success, the zombie drops to 1 hit point instead.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Slam",
        desc: "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 4 (1d6 + 1) bludgeoning damage.",
        attack_bonus: 3,
        damage_dice: "1d6",
        damage_bonus: 1
      }
    ]
  }
];
var BESTIARY_BY_NAME = new Map(
  BESTIARY.map((monster) => {
    return [monster.name, monster];
  })
);

// src/tracker/view.ts
var import_obsidian28 = require("obsidian");

// src/tracker/ui/Controls.svelte
var import_obsidian11 = require("obsidian");
var import_obsidian12 = require("obsidian");
function add_css4(target) {
  append_styles(target, "svelte-g63m31", ".buttons.svelte-g63m31.svelte-g63m31{display:flex;justify-content:space-between;padding:0 0 0.5rem 0}.state.svelte-g63m31.svelte-g63m31{display:flex;justify-content:flex-start;align-items:center}.clean.svelte-g63m31.svelte-g63m31{display:flex;justify-content:flex-end;align-items:center}.state.svelte-g63m31>.svelte-g63m31:not(:last-child),.clean.svelte-g63m31>.svelte-g63m31:not(:last-child){margin-right:0.25rem}");
}
function create_else_block4(ctx) {
  let div;
  let playButton_action;
  let mounted;
  let dispose;
  return {
    c() {
      div = element("div");
      attr(div, "class", "svelte-g63m31");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (!mounted) {
        dispose = action_destroyer(playButton_action = ctx[4].call(null, div));
        mounted = true;
      }
    },
    d(detaching) {
      if (detaching)
        detach(div);
      mounted = false;
      dispose();
    }
  };
}
function create_if_block_14(ctx) {
  let div0;
  let stopButton_action;
  let t0;
  let div1;
  let prevButton_action;
  let t1;
  let div2;
  let nextButton_action;
  let mounted;
  let dispose;
  return {
    c() {
      div0 = element("div");
      t0 = space();
      div1 = element("div");
      t1 = space();
      div2 = element("div");
      attr(div0, "class", "svelte-g63m31");
      attr(div1, "class", "svelte-g63m31");
      attr(div2, "class", "svelte-g63m31");
    },
    m(target, anchor) {
      insert(target, div0, anchor);
      insert(target, t0, anchor);
      insert(target, div1, anchor);
      insert(target, t1, anchor);
      insert(target, div2, anchor);
      if (!mounted) {
        dispose = [
          action_destroyer(stopButton_action = ctx[5].call(null, div0)),
          action_destroyer(prevButton_action = ctx[7].call(null, div1)),
          action_destroyer(nextButton_action = ctx[6].call(null, div2))
        ];
        mounted = true;
      }
    },
    d(detaching) {
      if (detaching)
        detach(div0);
      if (detaching)
        detach(t0);
      if (detaching)
        detach(div1);
      if (detaching)
        detach(t1);
      if (detaching)
        detach(div2);
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_if_block5(ctx) {
  let div;
  let playerView_action;
  let mounted;
  let dispose;
  return {
    c() {
      div = element("div");
      attr(div, "aria-label", "Open Player View");
      attr(div, "class", "svelte-g63m31");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (!mounted) {
        dispose = [
          action_destroyer(playerView_action = ctx[11].call(null, div)),
          listen(div, "click", ctx[12])
        ];
        mounted = true;
      }
    },
    p: noop,
    d(detaching) {
      if (detaching)
        detach(div);
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_fragment5(ctx) {
  let div3;
  let div0;
  let t0;
  let div2;
  let t1;
  let div1;
  let menuIcon_action;
  let mounted;
  let dispose;
  function select_block_type(ctx2, dirty) {
    if (ctx2[0])
      return create_if_block_14;
    return create_else_block4;
  }
  let current_block_type = select_block_type(ctx, -1);
  let if_block0 = current_block_type(ctx);
  let if_block1 = ctx[3] && create_if_block5(ctx);
  return {
    c() {
      div3 = element("div");
      div0 = element("div");
      if_block0.c();
      t0 = space();
      div2 = element("div");
      if (if_block1)
        if_block1.c();
      t1 = space();
      div1 = element("div");
      attr(div0, "class", "state svelte-g63m31");
      attr(div1, "class", "svelte-g63m31");
      attr(div2, "class", "clean svelte-g63m31");
      attr(div3, "class", "buttons svelte-g63m31");
    },
    m(target, anchor) {
      insert(target, div3, anchor);
      append(div3, div0);
      if_block0.m(div0, null);
      append(div3, t0);
      append(div3, div2);
      if (if_block1)
        if_block1.m(div2, null);
      append(div2, t1);
      append(div2, div1);
      if (!mounted) {
        dispose = [
          action_destroyer(menuIcon_action = ctx[10].call(null, div1)),
          listen(div1, "click", ctx[13])
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (current_block_type !== (current_block_type = select_block_type(ctx2, dirty))) {
        if_block0.d(1);
        if_block0 = current_block_type(ctx2);
        if (if_block0) {
          if_block0.c();
          if_block0.m(div0, null);
        }
      }
      if (ctx2[3])
        if_block1.p(ctx2, dirty);
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(div3);
      if_block0.d();
      if (if_block1)
        if_block1.d();
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance5($$self, $$props, $$invalidate) {
  let $data;
  let $state;
  const { state, data } = tracker;
  component_subscribe($$self, state, (value) => $$invalidate(0, $state = value));
  component_subscribe($$self, data, (value) => $$invalidate(15, $data = value));
  const desktop = import_obsidian11.Platform.isDesktop;
  const playButton = (node) => {
    new import_obsidian11.ExtraButtonComponent(node).setIcon(PLAY).setTooltip("Play").onClick(() => tracker.setState(true));
  };
  const stopButton = (node) => {
    new import_obsidian11.ExtraButtonComponent(node).setIcon(STOP).setTooltip("Stop").onClick(() => tracker.setState(false));
  };
  const nextButton = (node) => {
    new import_obsidian11.ExtraButtonComponent(node).setIcon(FORWARD).setTooltip("Next").onClick(() => tracker.goToNext());
  };
  const prevButton = (node) => {
    new import_obsidian11.ExtraButtonComponent(node).setIcon(BACKWARD).setTooltip("Previous").onClick(() => tracker.goToPrevious());
  };
  const plugin = getContext("plugin");
  const dispatch2 = createEventDispatcher();
  const open = (evt) => {
    const menu = new import_obsidian12.Menu();
    menu.addItem((item) => {
      item.setIcon(NEW).setTitle("New Encounter").onClick(() => tracker.new());
    });
    menu.addItem((item) => {
      item.setIcon(NEW).setTitle("Add Creatures").onClick(() => dispatch2("add-creatures"));
    });
    menu.addItem((item) => {
      item.setIcon(REDO).setTitle("Reset HP & Status").onClick(() => tracker.reset());
    });
    menu.addItem((item) => {
      item.setIcon(DICE).setTitle("Re-roll Initiatives").onClick(() => tracker.roll(plugin));
    });
    if ($data.parties && $data.parties.length) {
      menu.addItem((item) => {
        item.setIcon("switch").setTitle("Switch Party").onClick((evt2) => {
          const partyMenu = new import_obsidian12.Menu().setNoIcon();
          for (const party of $data.parties) {
            partyMenu.addItem((item2) => {
              item2.setTitle(party.name).onClick(() => {
                tracker.setParty(party.name, plugin);
              });
            });
          }
          partyMenu.showAtMouseEvent(evt2);
        });
      });
    }
    menu.addItem((item) => {
      item.setIcon(GROUP).setTitle(plugin.data.condense ? "Expand Creatures" : "Group Creatures").onClick(async () => {
        plugin.data.condense = !plugin.data.condense;
        await plugin.saveSettings();
        item.setIcon(plugin.data.condense ? EXPAND : GROUP);
        item.setTitle(plugin.data.condense ? "Expand Creatures" : "Group Creatures");
      });
    });
    menu.addSeparator();
    menu.addItem((item) => {
      item.setIcon(SAVE).setTitle("Save Encounter").onClick(() => {
        dispatch2("save");
      });
    });
    menu.addItem((item) => {
      item.setIcon("open-elsewhere-glyph").setTitle("Load Encounter").onClick(() => {
        dispatch2("load");
      });
    });
    if ($data.leafletIntegration) {
      menu.addSeparator();
      menu.addItem((item) => {
        item.setIcon(MAP).setTitle("Open Leaflet Map").onClick(() => dispatch2("open-map"));
      });
    }
    menu.showAtMouseEvent(evt);
  };
  const menuIcon = (node) => {
    new import_obsidian11.ExtraButtonComponent(node).setIcon("vertical-three-dots");
  };
  const playerView = (node) => {
    new import_obsidian11.ExtraButtonComponent(node).setIcon("view");
  };
  const click_handler3 = (evt) => dispatch2("player-view");
  const click_handler_12 = (evt) => open(evt);
  return [
    $state,
    state,
    data,
    desktop,
    playButton,
    stopButton,
    nextButton,
    prevButton,
    dispatch2,
    open,
    menuIcon,
    playerView,
    click_handler3,
    click_handler_12
  ];
}
var Controls = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance5, create_fragment5, safe_not_equal, {}, add_css4);
  }
};
var Controls_default = Controls;

// src/tracker/ui/creatures/Table.svelte
var import_obsidian17 = require("obsidian");

// src/tracker/ui/creatures/Initiative.svelte
var import_obsidian13 = require("obsidian");
function add_css5(target) {
  append_styles(target, "svelte-1kp13ds", '.tree-item-flair-outer.svelte-1kp13ds::after{content:""}.initiative.svelte-1kp13ds{display:block;padding:0;width:20px;text-align:center;white-space:nowrap;user-select:all;border:0;color:inherit}');
}
function create_key_block(ctx) {
  let input;
  let input_aria_label_value;
  let mounted;
  let dispose;
  return {
    c() {
      input = element("input");
      attr(input, "class", "editable initiative tree-item-flair svelte-1kp13ds");
      attr(input, "aria-label", input_aria_label_value = `${ctx[0] - ctx[1]} + ${ctx[1]}`);
      input.value = ctx[0];
    },
    m(target, anchor) {
      insert(target, input, anchor);
      if (!mounted) {
        dispose = [
          listen(input, "click", click_handler),
          listen(input, "blur", ctx[3]),
          listen(input, "keydown", keydown_handler)
        ];
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (dirty & 3 && input_aria_label_value !== (input_aria_label_value = `${ctx2[0] - ctx2[1]} + ${ctx2[1]}`)) {
        attr(input, "aria-label", input_aria_label_value);
      }
      if (dirty & 1 && input.value !== ctx2[0]) {
        input.value = ctx2[0];
      }
    },
    d(detaching) {
      if (detaching)
        detach(input);
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_fragment6(ctx) {
  let div;
  let previous_key = ctx[0];
  let key_block = create_key_block(ctx);
  return {
    c() {
      div = element("div");
      key_block.c();
      attr(div, "class", "tree-item-flair-outer svelte-1kp13ds");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      key_block.m(div, null);
    },
    p(ctx2, [dirty]) {
      if (dirty & 1 && safe_not_equal(previous_key, previous_key = ctx2[0])) {
        key_block.d(1);
        key_block = create_key_block(ctx2);
        key_block.c();
        key_block.m(div, null);
      } else {
        key_block.p(ctx2, dirty);
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(div);
      key_block.d(detaching);
    }
  };
}
var click_handler = function(evt) {
  this.select();
};
var keydown_handler = function(evt) {
  if (evt.key === "Enter" || evt.key === "Tab") {
    evt.preventDefault();
    this.blur();
    return;
  }
  if (!/^(\d*\.?\d*|Backspace|Delete|Arrow\w+)$/.test(evt.key)) {
    evt.preventDefault();
    return false;
  }
};
function instance6($$self, $$props, $$invalidate) {
  const dispatch2 = createEventDispatcher();
  let { initiative } = $$props;
  let { modifier: modifier2 } = $$props;
  const blur_handler = function(evt) {
    const value = this.value;
    if (isNaN(Number(value)) || Number(value) < 1) {
      new import_obsidian13.Notice("Enter a valid initiative.");
      this.value = `${initiative}`;
      return;
    }
    if (initiative == Number(value)) {
      return;
    }
    dispatch2("initiative", Number(value));
  };
  $$self.$$set = ($$props2) => {
    if ("initiative" in $$props2)
      $$invalidate(0, initiative = $$props2.initiative);
    if ("modifier" in $$props2)
      $$invalidate(1, modifier2 = $$props2.modifier);
  };
  return [initiative, modifier2, dispatch2, blur_handler];
}
var Initiative = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance6, create_fragment6, safe_not_equal, { initiative: 0, modifier: 1 }, add_css5);
  }
};
var Initiative_default = Initiative;

// src/tracker/ui/creatures/CreatureControls.svelte
var import_obsidian14 = require("obsidian");
function add_css6(target) {
  append_styles(target, "svelte-ptr4mi", ".controls.svelte-ptr4mi{display:flex;justify-content:flex-end}.icon.svelte-ptr4mi .clickable-icon{margin-right:0}");
}
function create_fragment7(ctx) {
  let div1;
  let div0;
  let hamburgerIcon_action;
  let mounted;
  let dispose;
  return {
    c() {
      div1 = element("div");
      div0 = element("div");
      attr(div0, "class", "add-button icon svelte-ptr4mi");
      attr(div1, "class", "controls svelte-ptr4mi");
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      append(div1, div0);
      if (!mounted) {
        dispose = action_destroyer(hamburgerIcon_action = ctx[0].call(null, div0));
        mounted = true;
      }
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(div1);
      mounted = false;
      dispose();
    }
  };
}
function instance7($$self, $$props, $$invalidate) {
  const dispatch2 = createEventDispatcher();
  let { creature } = $$props;
  const plugin = getContext("plugin");
  const hamburgerIcon = (node) => {
    const hamburger = new import_obsidian14.ExtraButtonComponent(node).setIcon("vertical-three-dots").setTooltip("Actions");
    hamburger.extraSettingsEl.onclick = (evt) => {
      evt.stopPropagation();
      const menu = new import_obsidian14.Menu();
      menu.addItem((item) => {
        item.setIcon(HP).setTitle("Set Health/Status").onClick(() => {
          dispatch2("hp", { creature });
        });
      });
      menu.addItem((item) => {
        item.setIcon("pencil").setTitle("Edit").onClick(() => {
          dispatch2("edit", creature);
        });
      });
      if (creature.hidden) {
        menu.addItem((item) => {
          item.setIcon("eye").setTitle("Show").onClick(() => {
            tracker.updateCreatures({ creature, change: { hidden: false } });
          });
        });
      } else {
        menu.addItem((item) => {
          item.setIcon(HIDDEN).setTitle("Hide").onClick(() => {
            tracker.updateCreatures({ creature, change: { hidden: true } });
          });
        });
      }
      if (creature.enabled) {
        menu.addItem((item) => {
          item.setIcon(DISABLE).setTitle("Disable").onClick(() => {
            tracker.updateCreatures({ creature, change: { enabled: false } });
          });
        });
      } else {
        menu.addItem((item) => {
          item.setIcon(ENABLE).setTitle("Enable").onClick(() => {
            tracker.updateCreatures({ creature, change: { enabled: true } });
          });
        });
      }
      if (plugin.data.leafletIntegration) {
        menu.addItem((item) => {
          item.setIcon(MAPMARKER).setTitle("Change Marker").onClick((evt2) => {
            const markerMenu = new import_obsidian14.Menu();
            markerMenu.setNoIcon();
            for (let marker of plugin.leaflet.markerIcons) {
              markerMenu.addItem((item2) => {
                item2.setTitle(marker.type);
                item2.onClick(() => {
                  tracker.updateCreatures({
                    creature,
                    change: { marker: marker.type }
                  });
                });
              });
            }
            markerMenu.showAtMouseEvent(evt2);
          });
        });
      }
      menu.addItem((item) => {
        item.setIcon(REMOVE).setTitle("Remove").onClick(() => {
          tracker.remove(creature);
        });
      });
      menu.showAtPosition(evt);
    };
  };
  $$self.$$set = ($$props2) => {
    if ("creature" in $$props2)
      $$invalidate(1, creature = $$props2.creature);
  };
  return [hamburgerIcon, creature];
}
var CreatureControls = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance7, create_fragment7, safe_not_equal, { creature: 1 }, add_css6);
  }
};
var CreatureControls_default = CreatureControls;

// src/tracker/ui/creatures/Status.svelte
var import_obsidian15 = require("obsidian");
function add_css7(target) {
  append_styles(target, "svelte-7lk3cs", ".tag.svelte-7lk3cs{display:flex;align-items:center;gap:0.125rem;color:var(--text-muted);font-size:small;width:fit-content;border-radius:0.25rem}.tag.svelte-7lk3cs .clickable-icon{margin:0}");
}
function create_fragment8(ctx) {
  let div1;
  let span;
  let t0_value = ctx[0].name + "";
  let t0;
  let t1;
  let div0;
  let deleteIcon_action;
  let div1_aria_label_value;
  let mounted;
  let dispose;
  return {
    c() {
      div1 = element("div");
      span = element("span");
      t0 = text(t0_value);
      t1 = space();
      div0 = element("div");
      attr(div1, "aria-label-classes", "initiative-tracker-condition-tooltip");
      attr(div1, "class", "tag svelte-7lk3cs");
      attr(div1, "aria-label", div1_aria_label_value = ctx[0].description?.length ? ctx[0].description : null);
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      append(div1, span);
      append(span, t0);
      append(div1, t1);
      append(div1, div0);
      if (!mounted) {
        dispose = [
          action_destroyer(deleteIcon_action = ctx[2].call(null, div0)),
          listen(div0, "click", ctx[3])
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & 1 && t0_value !== (t0_value = ctx2[0].name + ""))
        set_data(t0, t0_value);
      if (dirty & 1 && div1_aria_label_value !== (div1_aria_label_value = ctx2[0].description?.length ? ctx2[0].description : null)) {
        attr(div1, "aria-label", div1_aria_label_value);
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(div1);
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance8($$self, $$props, $$invalidate) {
  const dispatch2 = createEventDispatcher();
  let { status } = $$props;
  const deleteIcon = (node) => {
    new import_obsidian15.ExtraButtonComponent(node).setIcon("cross-in-box");
  };
  const click_handler3 = () => dispatch2("remove");
  $$self.$$set = ($$props2) => {
    if ("status" in $$props2)
      $$invalidate(0, status = $$props2.status);
  };
  return [status, dispatch2, deleteIcon, click_handler3];
}
var Status = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance8, create_fragment8, safe_not_equal, { status: 0 }, add_css7);
  }
};
var Status_default = Status;

// src/tracker/ui/creatures/Creature.svelte
var import_obsidian16 = require("obsidian");
function add_css8(target) {
  append_styles(target, "svelte-1lako4", ".name-holder.svelte-1lako4{display:flex;align-items:center;gap:0.25rem;font-size:small}.centered-icon.svelte-1lako4{display:flex;align-items:center}.name.svelte-1lako4{display:block;text-align:left;background-color:inherit;border:0;padding:0;height:unset;word-break:keep-all}.center.svelte-1lako4{text-align:center}.creature-adder.svelte-1lako4{cursor:pointer}.statuses.svelte-1lako4{display:flex;flex-flow:row wrap;column-gap:0.25rem}.initiative-container.svelte-1lako4{border-top-left-radius:0.25rem;border-bottom-left-radius:0.25rem}.controls-container.svelte-1lako4{border-top-right-radius:0.25rem;border-bottom-right-radius:0.25rem}");
}
function get_each_context5(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[11] = list[i];
  return child_ctx;
}
function create_if_block_24(ctx) {
  let div;
  let hiddenIcon_action;
  let mounted;
  let dispose;
  return {
    c() {
      div = element("div");
      attr(div, "class", "centered-icon svelte-1lako4");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (!mounted) {
        dispose = action_destroyer(hiddenIcon_action = ctx[4].call(null, div));
        mounted = true;
      }
    },
    d(detaching) {
      if (detaching)
        detach(div);
      mounted = false;
      dispose();
    }
  };
}
function create_else_block5(ctx) {
  let span;
  return {
    c() {
      span = element("span");
      span.textContent = `${ctx[3]()}`;
      attr(span, "class", "name svelte-1lako4");
    },
    m(target, anchor) {
      insert(target, span, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching)
        detach(span);
    }
  };
}
function create_if_block_15(ctx) {
  let strong;
  let t_value = ctx[0].name + "";
  let t;
  return {
    c() {
      strong = element("strong");
      t = text(t_value);
      attr(strong, "class", "name player svelte-1lako4");
    },
    m(target, anchor) {
      insert(target, strong, anchor);
      append(strong, t);
    },
    p(ctx2, dirty) {
      if (dirty & 1 && t_value !== (t_value = ctx2[0].name + ""))
        set_data(t, t_value);
    },
    d(detaching) {
      if (detaching)
        detach(strong);
    }
  };
}
function create_if_block6(ctx) {
  let each_1_anchor;
  let current;
  let each_value = [...ctx[1]];
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block5(get_each_context5(ctx, each_value, i));
  }
  const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
    each_blocks[i] = null;
  });
  return {
    c() {
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      each_1_anchor = empty();
    },
    m(target, anchor) {
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(target, anchor);
      }
      insert(target, each_1_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty & 3) {
        each_value = [...ctx2[1]];
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context5(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
            transition_in(each_blocks[i], 1);
          } else {
            each_blocks[i] = create_each_block5(child_ctx);
            each_blocks[i].c();
            transition_in(each_blocks[i], 1);
            each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
          }
        }
        group_outros();
        for (i = each_value.length; i < each_blocks.length; i += 1) {
          out(i);
        }
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i = 0; i < each_value.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      current = false;
    },
    d(detaching) {
      destroy_each(each_blocks, detaching);
      if (detaching)
        detach(each_1_anchor);
    }
  };
}
function create_each_block5(ctx) {
  let status;
  let current;
  function remove_handler() {
    return ctx[8](ctx[11]);
  }
  status = new Status_default({ props: { status: ctx[11] } });
  status.$on("remove", remove_handler);
  return {
    c() {
      create_component(status.$$.fragment);
    },
    m(target, anchor) {
      mount_component(status, target, anchor);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      const status_changes = {};
      if (dirty & 2)
        status_changes.status = ctx[11];
      status.$set(status_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(status.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(status.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(status, detaching);
    }
  };
}
function create_fragment9(ctx) {
  let td0;
  let initiative;
  let t0;
  let td1;
  let div0;
  let t1;
  let t2;
  let div1;
  let t3;
  let td2;
  let div2;
  let raw_value = ctx[0].hpDisplay + "";
  let t4;
  let td3;
  let t5_value = (ctx[0].ac ?? DEFAULT_UNDEFINED) + "";
  let t5;
  let t6;
  let td4;
  let creaturecontrols;
  let current;
  let mounted;
  let dispose;
  initiative = new Initiative_default({
    props: {
      initiative: ctx[0].initiative,
      modifier: ctx[0].modifier
    }
  });
  initiative.$on("click", click_handler2);
  initiative.$on("initiative", ctx[6]);
  let if_block0 = ctx[0].hidden && create_if_block_24(ctx);
  function select_block_type(ctx2, dirty) {
    if (ctx2[0].player)
      return create_if_block_15;
    return create_else_block5;
  }
  let current_block_type = select_block_type(ctx, -1);
  let if_block1 = current_block_type(ctx);
  let if_block2 = ctx[1].size && create_if_block6(ctx);
  creaturecontrols = new CreatureControls_default({ props: { creature: ctx[0] } });
  creaturecontrols.$on("click", click_handler_4);
  creaturecontrols.$on("tag", ctx[9]);
  creaturecontrols.$on("edit", ctx[10]);
  return {
    c() {
      td0 = element("td");
      create_component(initiative.$$.fragment);
      t0 = space();
      td1 = element("td");
      div0 = element("div");
      if (if_block0)
        if_block0.c();
      t1 = space();
      if_block1.c();
      t2 = space();
      div1 = element("div");
      if (if_block2)
        if_block2.c();
      t3 = space();
      td2 = element("td");
      div2 = element("div");
      t4 = space();
      td3 = element("td");
      t5 = text(t5_value);
      t6 = space();
      td4 = element("td");
      create_component(creaturecontrols.$$.fragment);
      attr(td0, "class", "initiative-container svelte-1lako4");
      attr(div0, "class", "name-holder svelte-1lako4");
      attr(div1, "class", "statuses svelte-1lako4");
      attr(td1, "class", "name-container");
      attr(td2, "class", "center hp-container creature-adder svelte-1lako4");
      attr(td3, "class", "center ac-container creature-adder svelte-1lako4");
      attr(td4, "class", "controls-container svelte-1lako4");
    },
    m(target, anchor) {
      insert(target, td0, anchor);
      mount_component(initiative, td0, null);
      insert(target, t0, anchor);
      insert(target, td1, anchor);
      append(td1, div0);
      if (if_block0)
        if_block0.m(div0, null);
      append(div0, t1);
      if_block1.m(div0, null);
      append(td1, t2);
      append(td1, div1);
      if (if_block2)
        if_block2.m(div1, null);
      insert(target, t3, anchor);
      insert(target, td2, anchor);
      append(td2, div2);
      div2.innerHTML = raw_value;
      insert(target, t4, anchor);
      insert(target, td3, anchor);
      append(td3, t5);
      insert(target, t6, anchor);
      insert(target, td4, anchor);
      mount_component(creaturecontrols, td4, null);
      current = true;
      if (!mounted) {
        dispose = [
          listen(td0, "click", click_handler_1),
          listen(div0, "click", stop_propagation(ctx[7])),
          listen(div0, "mouseenter", ctx[5]),
          listen(div1, "click", click_handler_3)
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      const initiative_changes = {};
      if (dirty & 1)
        initiative_changes.initiative = ctx2[0].initiative;
      if (dirty & 1)
        initiative_changes.modifier = ctx2[0].modifier;
      initiative.$set(initiative_changes);
      if (ctx2[0].hidden) {
        if (if_block0) {
        } else {
          if_block0 = create_if_block_24(ctx2);
          if_block0.c();
          if_block0.m(div0, t1);
        }
      } else if (if_block0) {
        if_block0.d(1);
        if_block0 = null;
      }
      if (current_block_type === (current_block_type = select_block_type(ctx2, dirty)) && if_block1) {
        if_block1.p(ctx2, dirty);
      } else {
        if_block1.d(1);
        if_block1 = current_block_type(ctx2);
        if (if_block1) {
          if_block1.c();
          if_block1.m(div0, null);
        }
      }
      if (ctx2[1].size) {
        if (if_block2) {
          if_block2.p(ctx2, dirty);
          if (dirty & 2) {
            transition_in(if_block2, 1);
          }
        } else {
          if_block2 = create_if_block6(ctx2);
          if_block2.c();
          transition_in(if_block2, 1);
          if_block2.m(div1, null);
        }
      } else if (if_block2) {
        group_outros();
        transition_out(if_block2, 1, 1, () => {
          if_block2 = null;
        });
        check_outros();
      }
      if ((!current || dirty & 1) && raw_value !== (raw_value = ctx2[0].hpDisplay + ""))
        div2.innerHTML = raw_value;
      ;
      if ((!current || dirty & 1) && t5_value !== (t5_value = (ctx2[0].ac ?? DEFAULT_UNDEFINED) + ""))
        set_data(t5, t5_value);
      const creaturecontrols_changes = {};
      if (dirty & 1)
        creaturecontrols_changes.creature = ctx2[0];
      creaturecontrols.$set(creaturecontrols_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(initiative.$$.fragment, local);
      transition_in(if_block2);
      transition_in(creaturecontrols.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(initiative.$$.fragment, local);
      transition_out(if_block2);
      transition_out(creaturecontrols.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(td0);
      destroy_component(initiative);
      if (detaching)
        detach(t0);
      if (detaching)
        detach(td1);
      if (if_block0)
        if_block0.d();
      if_block1.d();
      if (if_block2)
        if_block2.d();
      if (detaching)
        detach(t3);
      if (detaching)
        detach(td2);
      if (detaching)
        detach(t4);
      if (detaching)
        detach(td3);
      if (detaching)
        detach(t6);
      if (detaching)
        detach(td4);
      destroy_component(creaturecontrols);
      mounted = false;
      run_all(dispose);
    }
  };
}
var click_handler2 = (e) => e.stopPropagation();
var click_handler_1 = (e) => e.stopPropagation();
var click_handler_3 = (e) => e.stopPropagation();
var click_handler_4 = (e) => e.stopPropagation();
function instance9($$self, $$props, $$invalidate) {
  let statuses;
  const dispatch2 = createEventDispatcher();
  let { creature } = $$props;
  const name2 = () => creature.getName();
  const hiddenIcon = (div) => {
    (0, import_obsidian16.setIcon)(div, HIDDEN);
  };
  const tryHover = (evt) => {
    if (creature["statblock-link"]) {
      let link = creature["statblock-link"];
      if (/\[.+\]\(.+\)/.test(link)) {
        [, link] = link.match(/\[.+?\]\((.+?)\)/);
      } else if (/\[\[.+\]\]/.test(link)) {
        [, link] = link.match(/\[\[(.+?)(?:\|.+?)?\]\]/);
      }
      app.workspace.trigger("link-hover", {}, evt.target, link, "initiative-tracker ");
    }
  };
  const initiative_handler = (e) => {
    tracker.updateCreatures({
      creature,
      change: { initiative: Number(e.detail) }
    });
  };
  const click_handler_2 = (evt) => {
    dispatch2("open-combatant", creature);
  };
  const remove_handler = (status) => {
    tracker.updateCreatures({ creature, change: { status: [status] } });
  };
  function tag_handler(event) {
    bubble.call(this, $$self, event);
  }
  function edit_handler(event) {
    bubble.call(this, $$self, event);
  }
  $$self.$$set = ($$props2) => {
    if ("creature" in $$props2)
      $$invalidate(0, creature = $$props2.creature);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & 1) {
      $:
        $$invalidate(1, statuses = creature.status);
    }
  };
  return [
    creature,
    statuses,
    dispatch2,
    name2,
    hiddenIcon,
    tryHover,
    initiative_handler,
    click_handler_2,
    remove_handler,
    tag_handler,
    edit_handler
  ];
}
var Creature3 = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance9, create_fragment9, safe_not_equal, { creature: 0 }, add_css8);
  }
};
var Creature_default = Creature3;

// node_modules/svelte-dnd-action/dist/index.mjs
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _typeof(obj) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof(obj);
}
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function _objectWithoutProperties(source, excluded) {
  if (source == null)
    return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key))
        continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}
function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray(arr);
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}
function _iterableToArrayLimit(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null)
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _createForOfIteratorHelper(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (!it) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it)
        o = it;
      var i = 0;
      var F = function() {
      };
      return {
        s: F,
        n: function() {
          if (i >= o.length)
            return {
              done: true
            };
          return {
            done: false,
            value: o[i++]
          };
        },
        e: function(e) {
          throw e;
        },
        f: F
      };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var normalCompletion = true, didErr = false, err;
  return {
    s: function() {
      it = it.call(o);
    },
    n: function() {
      var step = it.next();
      normalCompletion = step.done;
      return step;
    },
    e: function(e) {
      didErr = true;
      err = e;
    },
    f: function() {
      try {
        if (!normalCompletion && it.return != null)
          it.return();
      } finally {
        if (didErr)
          throw err;
      }
    }
  };
}
var FINALIZE_EVENT_NAME = "finalize";
var CONSIDER_EVENT_NAME = "consider";
function dispatchFinalizeEvent(el, items, info) {
  el.dispatchEvent(new CustomEvent(FINALIZE_EVENT_NAME, {
    detail: {
      items,
      info
    }
  }));
}
function dispatchConsiderEvent(el, items, info) {
  el.dispatchEvent(new CustomEvent(CONSIDER_EVENT_NAME, {
    detail: {
      items,
      info
    }
  }));
}
var DRAGGED_ENTERED_EVENT_NAME = "draggedEntered";
var DRAGGED_LEFT_EVENT_NAME = "draggedLeft";
var DRAGGED_OVER_INDEX_EVENT_NAME = "draggedOverIndex";
var DRAGGED_LEFT_DOCUMENT_EVENT_NAME = "draggedLeftDocument";
var DRAGGED_LEFT_TYPES = {
  LEFT_FOR_ANOTHER: "leftForAnother",
  OUTSIDE_OF_ANY: "outsideOfAny"
};
function dispatchDraggedElementEnteredContainer(containerEl, indexObj, draggedEl2) {
  containerEl.dispatchEvent(new CustomEvent(DRAGGED_ENTERED_EVENT_NAME, {
    detail: {
      indexObj,
      draggedEl: draggedEl2
    }
  }));
}
function dispatchDraggedElementLeftContainerForAnother(containerEl, draggedEl2, theOtherDz) {
  containerEl.dispatchEvent(new CustomEvent(DRAGGED_LEFT_EVENT_NAME, {
    detail: {
      draggedEl: draggedEl2,
      type: DRAGGED_LEFT_TYPES.LEFT_FOR_ANOTHER,
      theOtherDz
    }
  }));
}
function dispatchDraggedElementLeftContainerForNone(containerEl, draggedEl2) {
  containerEl.dispatchEvent(new CustomEvent(DRAGGED_LEFT_EVENT_NAME, {
    detail: {
      draggedEl: draggedEl2,
      type: DRAGGED_LEFT_TYPES.OUTSIDE_OF_ANY
    }
  }));
}
function dispatchDraggedElementIsOverIndex(containerEl, indexObj, draggedEl2) {
  containerEl.dispatchEvent(new CustomEvent(DRAGGED_OVER_INDEX_EVENT_NAME, {
    detail: {
      indexObj,
      draggedEl: draggedEl2
    }
  }));
}
function dispatchDraggedLeftDocument(draggedEl2) {
  window.dispatchEvent(new CustomEvent(DRAGGED_LEFT_DOCUMENT_EVENT_NAME, {
    detail: {
      draggedEl: draggedEl2
    }
  }));
}
var TRIGGERS = {
  DRAG_STARTED: "dragStarted",
  DRAGGED_ENTERED: DRAGGED_ENTERED_EVENT_NAME,
  DRAGGED_ENTERED_ANOTHER: "dragEnteredAnother",
  DRAGGED_OVER_INDEX: DRAGGED_OVER_INDEX_EVENT_NAME,
  DRAGGED_LEFT: DRAGGED_LEFT_EVENT_NAME,
  DRAGGED_LEFT_ALL: "draggedLeftAll",
  DROPPED_INTO_ZONE: "droppedIntoZone",
  DROPPED_INTO_ANOTHER: "droppedIntoAnother",
  DROPPED_OUTSIDE_OF_ANY: "droppedOutsideOfAny",
  DRAG_STOPPED: "dragStopped"
};
var SOURCES = {
  POINTER: "pointer",
  KEYBOARD: "keyboard"
};
var SHADOW_ITEM_MARKER_PROPERTY_NAME = "isDndShadowItem";
var SHADOW_ELEMENT_ATTRIBUTE_NAME = "data-is-dnd-shadow-item";
var SHADOW_PLACEHOLDER_ITEM_ID = "id:dnd-shadow-placeholder-0000";
var DRAGGED_ELEMENT_ID = "dnd-action-dragged-el";
var ITEM_ID_KEY = "id";
var activeDndZoneCount = 0;
function incrementActiveDropZoneCount() {
  activeDndZoneCount++;
}
function decrementActiveDropZoneCount() {
  if (activeDndZoneCount === 0) {
    throw new Error("Bug! trying to decrement when there are no dropzones");
  }
  activeDndZoneCount--;
}
var isOnServer = typeof window === "undefined";
var printDebug = function printDebug2() {
};
function getBoundingRectNoTransforms(el) {
  var ta;
  var rect = el.getBoundingClientRect();
  var style = getComputedStyle(el);
  var tx = style.transform;
  if (tx) {
    var sx, sy, dx, dy;
    if (tx.startsWith("matrix3d(")) {
      ta = tx.slice(9, -1).split(/, /);
      sx = +ta[0];
      sy = +ta[5];
      dx = +ta[12];
      dy = +ta[13];
    } else if (tx.startsWith("matrix(")) {
      ta = tx.slice(7, -1).split(/, /);
      sx = +ta[0];
      sy = +ta[3];
      dx = +ta[4];
      dy = +ta[5];
    } else {
      return rect;
    }
    var to = style.transformOrigin;
    var x = rect.x - dx - (1 - sx) * parseFloat(to);
    var y = rect.y - dy - (1 - sy) * parseFloat(to.slice(to.indexOf(" ") + 1));
    var w = sx ? rect.width / sx : el.offsetWidth;
    var h = sy ? rect.height / sy : el.offsetHeight;
    return {
      x,
      y,
      width: w,
      height: h,
      top: y,
      right: x + w,
      bottom: y + h,
      left: x
    };
  } else {
    return rect;
  }
}
function getAbsoluteRectNoTransforms(el) {
  var rect = getBoundingRectNoTransforms(el);
  return {
    top: rect.top + window.scrollY,
    bottom: rect.bottom + window.scrollY,
    left: rect.left + window.scrollX,
    right: rect.right + window.scrollX
  };
}
function getAbsoluteRect(el) {
  var rect = el.getBoundingClientRect();
  return {
    top: rect.top + window.scrollY,
    bottom: rect.bottom + window.scrollY,
    left: rect.left + window.scrollX,
    right: rect.right + window.scrollX
  };
}
function findCenter(rect) {
  return {
    x: (rect.left + rect.right) / 2,
    y: (rect.top + rect.bottom) / 2
  };
}
function calcDistance(pointA, pointB) {
  return Math.sqrt(Math.pow(pointA.x - pointB.x, 2) + Math.pow(pointA.y - pointB.y, 2));
}
function isPointInsideRect(point, rect) {
  return point.y <= rect.bottom && point.y >= rect.top && point.x >= rect.left && point.x <= rect.right;
}
function findCenterOfElement(el) {
  return findCenter(getAbsoluteRect(el));
}
function isCenterOfAInsideB(elA, elB) {
  var centerOfA = findCenterOfElement(elA);
  var rectOfB = getAbsoluteRectNoTransforms(elB);
  return isPointInsideRect(centerOfA, rectOfB);
}
function calcDistanceBetweenCenters(elA, elB) {
  var centerOfA = findCenterOfElement(elA);
  var centerOfB = findCenterOfElement(elB);
  return calcDistance(centerOfA, centerOfB);
}
function isElementOffDocument(el) {
  var rect = getAbsoluteRect(el);
  return rect.right < 0 || rect.left > document.documentElement.scrollWidth || rect.bottom < 0 || rect.top > document.documentElement.scrollHeight;
}
function calcInnerDistancesBetweenPointAndSidesOfElement(point, el) {
  var rect = getAbsoluteRect(el);
  if (!isPointInsideRect(point, rect)) {
    return null;
  }
  return {
    top: point.y - rect.top,
    bottom: rect.bottom - point.y,
    left: point.x - rect.left,
    right: Math.min(rect.right, document.documentElement.clientWidth) - point.x
  };
}
var dzToShadowIndexToRect;
function resetIndexesCache() {
  printDebug(function() {
    return "resetting indexes cache";
  });
  dzToShadowIndexToRect = /* @__PURE__ */ new Map();
}
resetIndexesCache();
function resetIndexesCacheForDz(dz) {
  printDebug(function() {
    return "resetting indexes cache for dz";
  });
  dzToShadowIndexToRect["delete"](dz);
}
function cacheShadowRect(dz) {
  var shadowElIndex = Array.from(dz.children).findIndex(function(child) {
    return child.getAttribute(SHADOW_ELEMENT_ATTRIBUTE_NAME);
  });
  if (shadowElIndex >= 0) {
    if (!dzToShadowIndexToRect.has(dz)) {
      dzToShadowIndexToRect.set(dz, /* @__PURE__ */ new Map());
    }
    dzToShadowIndexToRect.get(dz).set(shadowElIndex, getAbsoluteRectNoTransforms(dz.children[shadowElIndex]));
    return shadowElIndex;
  }
  return void 0;
}
function findWouldBeIndex(floatingAboveEl, collectionBelowEl) {
  if (!isCenterOfAInsideB(floatingAboveEl, collectionBelowEl)) {
    return null;
  }
  var children2 = collectionBelowEl.children;
  if (children2.length === 0) {
    return {
      index: 0,
      isProximityBased: true
    };
  }
  var shadowElIndex = cacheShadowRect(collectionBelowEl);
  for (var i = 0; i < children2.length; i++) {
    if (isCenterOfAInsideB(floatingAboveEl, children2[i])) {
      var cachedShadowRect = dzToShadowIndexToRect.has(collectionBelowEl) && dzToShadowIndexToRect.get(collectionBelowEl).get(i);
      if (cachedShadowRect) {
        if (!isPointInsideRect(findCenterOfElement(floatingAboveEl), cachedShadowRect)) {
          return {
            index: shadowElIndex,
            isProximityBased: false
          };
        }
      }
      return {
        index: i,
        isProximityBased: false
      };
    }
  }
  var minDistanceSoFar = Number.MAX_VALUE;
  var indexOfMin = void 0;
  for (var _i = 0; _i < children2.length; _i++) {
    var distance = calcDistanceBetweenCenters(floatingAboveEl, children2[_i]);
    if (distance < minDistanceSoFar) {
      minDistanceSoFar = distance;
      indexOfMin = _i;
    }
  }
  return {
    index: indexOfMin,
    isProximityBased: true
  };
}
var SCROLL_ZONE_PX = 25;
function makeScroller() {
  var scrollingInfo;
  function resetScrolling2() {
    scrollingInfo = {
      directionObj: void 0,
      stepPx: 0
    };
  }
  resetScrolling2();
  function scrollContainer(containerEl) {
    var _scrollingInfo = scrollingInfo, directionObj = _scrollingInfo.directionObj, stepPx = _scrollingInfo.stepPx;
    if (directionObj) {
      containerEl.scrollBy(directionObj.x * stepPx, directionObj.y * stepPx);
      window.requestAnimationFrame(function() {
        return scrollContainer(containerEl);
      });
    }
  }
  function calcScrollStepPx(distancePx) {
    return SCROLL_ZONE_PX - distancePx;
  }
  function scrollIfNeeded2(pointer, elementToScroll) {
    if (!elementToScroll) {
      return false;
    }
    var distances = calcInnerDistancesBetweenPointAndSidesOfElement(pointer, elementToScroll);
    if (distances === null) {
      resetScrolling2();
      return false;
    }
    var isAlreadyScrolling = !!scrollingInfo.directionObj;
    var scrollingVertically = false, scrollingHorizontally = false;
    if (elementToScroll.scrollHeight > elementToScroll.clientHeight) {
      if (distances.bottom < SCROLL_ZONE_PX) {
        scrollingVertically = true;
        scrollingInfo.directionObj = {
          x: 0,
          y: 1
        };
        scrollingInfo.stepPx = calcScrollStepPx(distances.bottom);
      } else if (distances.top < SCROLL_ZONE_PX) {
        scrollingVertically = true;
        scrollingInfo.directionObj = {
          x: 0,
          y: -1
        };
        scrollingInfo.stepPx = calcScrollStepPx(distances.top);
      }
      if (!isAlreadyScrolling && scrollingVertically) {
        scrollContainer(elementToScroll);
        return true;
      }
    }
    if (elementToScroll.scrollWidth > elementToScroll.clientWidth) {
      if (distances.right < SCROLL_ZONE_PX) {
        scrollingHorizontally = true;
        scrollingInfo.directionObj = {
          x: 1,
          y: 0
        };
        scrollingInfo.stepPx = calcScrollStepPx(distances.right);
      } else if (distances.left < SCROLL_ZONE_PX) {
        scrollingHorizontally = true;
        scrollingInfo.directionObj = {
          x: -1,
          y: 0
        };
        scrollingInfo.stepPx = calcScrollStepPx(distances.left);
      }
      if (!isAlreadyScrolling && scrollingHorizontally) {
        scrollContainer(elementToScroll);
        return true;
      }
    }
    resetScrolling2();
    return false;
  }
  return {
    scrollIfNeeded: scrollIfNeeded2,
    resetScrolling: resetScrolling2
  };
}
function toString(object) {
  return JSON.stringify(object, null, 2);
}
function getDepth(node) {
  if (!node) {
    throw new Error("cannot get depth of a falsy node");
  }
  return _getDepth(node, 0);
}
function _getDepth(node) {
  var countSoFar = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
  if (!node.parentElement) {
    return countSoFar - 1;
  }
  return _getDepth(node.parentElement, countSoFar + 1);
}
function areObjectsShallowEqual(objA, objB) {
  if (Object.keys(objA).length !== Object.keys(objB).length) {
    return false;
  }
  for (var keyA in objA) {
    if (!{}.hasOwnProperty.call(objB, keyA) || objB[keyA] !== objA[keyA]) {
      return false;
    }
  }
  return true;
}
function areArraysShallowEqualSameOrder(arrA, arrB) {
  if (arrA.length !== arrB.length) {
    return false;
  }
  for (var i = 0; i < arrA.length; i++) {
    if (arrA[i] !== arrB[i]) {
      return false;
    }
  }
  return true;
}
var INTERVAL_MS = 200;
var TOLERANCE_PX = 10;
var _makeScroller = makeScroller();
var scrollIfNeeded = _makeScroller.scrollIfNeeded;
var resetScrolling = _makeScroller.resetScrolling;
var next;
function observe(draggedEl2, dropZones) {
  var intervalMs = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : INTERVAL_MS;
  var lastDropZoneFound;
  var lastIndexFound;
  var lastIsDraggedInADropZone = false;
  var lastCentrePositionOfDragged;
  var dropZonesFromDeepToShallow = Array.from(dropZones).sort(function(dz1, dz2) {
    return getDepth(dz2) - getDepth(dz1);
  });
  function andNow() {
    var currentCenterOfDragged = findCenterOfElement(draggedEl2);
    var scrolled = scrollIfNeeded(currentCenterOfDragged, lastDropZoneFound);
    if (!scrolled && lastCentrePositionOfDragged && Math.abs(lastCentrePositionOfDragged.x - currentCenterOfDragged.x) < TOLERANCE_PX && Math.abs(lastCentrePositionOfDragged.y - currentCenterOfDragged.y) < TOLERANCE_PX) {
      next = window.setTimeout(andNow, intervalMs);
      return;
    }
    if (isElementOffDocument(draggedEl2)) {
      printDebug(function() {
        return "off document";
      });
      dispatchDraggedLeftDocument(draggedEl2);
      return;
    }
    lastCentrePositionOfDragged = currentCenterOfDragged;
    var isDraggedInADropZone = false;
    var _iterator = _createForOfIteratorHelper(dropZonesFromDeepToShallow), _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done; ) {
        var dz = _step.value;
        if (scrolled)
          resetIndexesCacheForDz(lastDropZoneFound);
        var indexObj = findWouldBeIndex(draggedEl2, dz);
        if (indexObj === null) {
          continue;
        }
        var index = indexObj.index;
        isDraggedInADropZone = true;
        if (dz !== lastDropZoneFound) {
          lastDropZoneFound && dispatchDraggedElementLeftContainerForAnother(lastDropZoneFound, draggedEl2, dz);
          dispatchDraggedElementEnteredContainer(dz, indexObj, draggedEl2);
          lastDropZoneFound = dz;
        } else if (index !== lastIndexFound) {
          dispatchDraggedElementIsOverIndex(dz, indexObj, draggedEl2);
          lastIndexFound = index;
        }
        break;
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
    if (!isDraggedInADropZone && lastIsDraggedInADropZone && lastDropZoneFound) {
      dispatchDraggedElementLeftContainerForNone(lastDropZoneFound, draggedEl2);
      lastDropZoneFound = void 0;
      lastIndexFound = void 0;
      lastIsDraggedInADropZone = false;
    } else {
      lastIsDraggedInADropZone = true;
    }
    next = window.setTimeout(andNow, intervalMs);
  }
  andNow();
}
function unobserve() {
  printDebug(function() {
    return "unobserving";
  });
  clearTimeout(next);
  resetScrolling();
  resetIndexesCache();
}
var INTERVAL_MS$1 = 300;
var mousePosition;
function updateMousePosition(e) {
  var c = e.touches ? e.touches[0] : e;
  mousePosition = {
    x: c.clientX,
    y: c.clientY
  };
}
var _makeScroller$1 = makeScroller();
var scrollIfNeeded$1 = _makeScroller$1.scrollIfNeeded;
var resetScrolling$1 = _makeScroller$1.resetScrolling;
var next$1;
function loop2() {
  if (mousePosition) {
    var scrolled = scrollIfNeeded$1(mousePosition, document.documentElement);
    if (scrolled)
      resetIndexesCache();
  }
  next$1 = window.setTimeout(loop2, INTERVAL_MS$1);
}
function armWindowScroller() {
  printDebug(function() {
    return "arming window scroller";
  });
  window.addEventListener("mousemove", updateMousePosition);
  window.addEventListener("touchmove", updateMousePosition);
  loop2();
}
function disarmWindowScroller() {
  printDebug(function() {
    return "disarming window scroller";
  });
  window.removeEventListener("mousemove", updateMousePosition);
  window.removeEventListener("touchmove", updateMousePosition);
  mousePosition = void 0;
  window.clearTimeout(next$1);
  resetScrolling$1();
}
function svelteNodeClone(el) {
  var cloned = el.cloneNode(true);
  var values = [];
  var elIsSelect = el.tagName === "SELECT";
  var selects = elIsSelect ? [el] : _toConsumableArray(el.querySelectorAll("select"));
  var _iterator = _createForOfIteratorHelper(selects), _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done; ) {
      var _select = _step.value;
      values.push(_select.value);
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  if (selects.length <= 0) {
    return cloned;
  }
  var clonedSelects = elIsSelect ? [cloned] : _toConsumableArray(cloned.querySelectorAll("select"));
  for (var i = 0; i < clonedSelects.length; i++) {
    var select = clonedSelects[i];
    var value = values[i];
    var optionEl = select.querySelector('option[value="'.concat(value, '"'));
    if (optionEl) {
      optionEl.setAttribute("selected", true);
    }
  }
  return cloned;
}
var TRANSITION_DURATION_SECONDS = 0.2;
function trs(property) {
  return "".concat(property, " ").concat(TRANSITION_DURATION_SECONDS, "s ease");
}
function createDraggedElementFrom(originalElement, positionCenterOnXY) {
  var rect = originalElement.getBoundingClientRect();
  var draggedEl2 = svelteNodeClone(originalElement);
  copyStylesFromTo(originalElement, draggedEl2);
  draggedEl2.id = DRAGGED_ELEMENT_ID;
  draggedEl2.style.position = "fixed";
  var elTopPx = rect.top;
  var elLeftPx = rect.left;
  draggedEl2.style.top = "".concat(elTopPx, "px");
  draggedEl2.style.left = "".concat(elLeftPx, "px");
  if (positionCenterOnXY) {
    var center = findCenter(rect);
    elTopPx -= center.y - positionCenterOnXY.y;
    elLeftPx -= center.x - positionCenterOnXY.x;
    window.setTimeout(function() {
      draggedEl2.style.top = "".concat(elTopPx, "px");
      draggedEl2.style.left = "".concat(elLeftPx, "px");
    }, 0);
  }
  draggedEl2.style.margin = "0";
  draggedEl2.style.boxSizing = "border-box";
  draggedEl2.style.height = "".concat(rect.height, "px");
  draggedEl2.style.width = "".concat(rect.width, "px");
  draggedEl2.style.transition = "".concat(trs("top"), ", ").concat(trs("left"), ", ").concat(trs("background-color"), ", ").concat(trs("opacity"), ", ").concat(trs("color"), " ");
  window.setTimeout(function() {
    return draggedEl2.style.transition += ", ".concat(trs("width"), ", ").concat(trs("height"));
  }, 0);
  draggedEl2.style.zIndex = "9999";
  draggedEl2.style.cursor = "grabbing";
  return draggedEl2;
}
function moveDraggedElementToWasDroppedState(draggedEl2) {
  draggedEl2.style.cursor = "grab";
}
function morphDraggedElementToBeLike(draggedEl2, copyFromEl, currentMouseX, currentMouseY) {
  copyStylesFromTo(copyFromEl, draggedEl2);
  var newRect = copyFromEl.getBoundingClientRect();
  var draggedElRect = draggedEl2.getBoundingClientRect();
  var widthChange = newRect.width - draggedElRect.width;
  var heightChange = newRect.height - draggedElRect.height;
  if (widthChange || heightChange) {
    var relativeDistanceOfMousePointerFromDraggedSides = {
      left: (currentMouseX - draggedElRect.left) / draggedElRect.width,
      top: (currentMouseY - draggedElRect.top) / draggedElRect.height
    };
    draggedEl2.style.height = "".concat(newRect.height, "px");
    draggedEl2.style.width = "".concat(newRect.width, "px");
    draggedEl2.style.left = "".concat(parseFloat(draggedEl2.style.left) - relativeDistanceOfMousePointerFromDraggedSides.left * widthChange, "px");
    draggedEl2.style.top = "".concat(parseFloat(draggedEl2.style.top) - relativeDistanceOfMousePointerFromDraggedSides.top * heightChange, "px");
  }
}
function copyStylesFromTo(copyFromEl, copyToEl) {
  var computedStyle = window.getComputedStyle(copyFromEl);
  Array.from(computedStyle).filter(function(s) {
    return s.startsWith("background") || s.startsWith("padding") || s.startsWith("font") || s.startsWith("text") || s.startsWith("align") || s.startsWith("justify") || s.startsWith("display") || s.startsWith("flex") || s.startsWith("border") || s === "opacity" || s === "color" || s === "list-style-type";
  }).forEach(function(s) {
    return copyToEl.style.setProperty(s, computedStyle.getPropertyValue(s), computedStyle.getPropertyPriority(s));
  });
}
function styleDraggable(draggableEl, dragDisabled) {
  draggableEl.draggable = false;
  draggableEl.ondragstart = function() {
    return false;
  };
  if (!dragDisabled) {
    draggableEl.style.userSelect = "none";
    draggableEl.style.WebkitUserSelect = "none";
    draggableEl.style.cursor = "grab";
  } else {
    draggableEl.style.userSelect = "";
    draggableEl.style.WebkitUserSelect = "";
    draggableEl.style.cursor = "";
  }
}
function hideElement(dragTarget) {
  dragTarget.style.display = "none";
  dragTarget.style.position = "fixed";
  dragTarget.style.zIndex = "-5";
}
function decorateShadowEl(shadowEl) {
  shadowEl.style.visibility = "hidden";
  shadowEl.setAttribute(SHADOW_ELEMENT_ATTRIBUTE_NAME, "true");
}
function unDecorateShadowElement(shadowEl) {
  shadowEl.style.visibility = "";
  shadowEl.removeAttribute(SHADOW_ELEMENT_ATTRIBUTE_NAME);
}
function styleActiveDropZones(dropZones) {
  var getStyles = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : function() {
  };
  var getClasses = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : function() {
    return [];
  };
  dropZones.forEach(function(dz) {
    var styles = getStyles(dz);
    Object.keys(styles).forEach(function(style) {
      dz.style[style] = styles[style];
    });
    getClasses(dz).forEach(function(c) {
      return dz.classList.add(c);
    });
  });
}
function styleInactiveDropZones(dropZones) {
  var getStyles = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : function() {
  };
  var getClasses = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : function() {
    return [];
  };
  dropZones.forEach(function(dz) {
    var styles = getStyles(dz);
    Object.keys(styles).forEach(function(style) {
      dz.style[style] = "";
    });
    getClasses(dz).forEach(function(c) {
      return dz.classList.contains(c) && dz.classList.remove(c);
    });
  });
}
function preventShrinking(el) {
  var originalMinHeight = el.style.minHeight;
  el.style.minHeight = window.getComputedStyle(el).getPropertyValue("height");
  var originalMinWidth = el.style.minWidth;
  el.style.minWidth = window.getComputedStyle(el).getPropertyValue("width");
  return function undo() {
    el.style.minHeight = originalMinHeight;
    el.style.minWidth = originalMinWidth;
  };
}
var DEFAULT_DROP_ZONE_TYPE = "--any--";
var MIN_OBSERVATION_INTERVAL_MS = 100;
var MIN_MOVEMENT_BEFORE_DRAG_START_PX = 3;
var DEFAULT_DROP_TARGET_STYLE = {
  outline: "rgba(255, 255, 102, 0.7) solid 2px"
};
var originalDragTarget;
var draggedEl;
var draggedElData;
var draggedElType;
var originDropZone;
var originIndex;
var shadowElData;
var shadowElDropZone;
var dragStartMousePosition;
var currentMousePosition;
var isWorkingOnPreviousDrag = false;
var finalizingPreviousDrag = false;
var unlockOriginDzMinDimensions;
var isDraggedOutsideOfAnyDz = false;
var scheduledForRemovalAfterDrop = [];
var typeToDropZones = /* @__PURE__ */ new Map();
var dzToConfig = /* @__PURE__ */ new Map();
var elToMouseDownListener = /* @__PURE__ */ new WeakMap();
function registerDropZone(dropZoneEl, type2) {
  printDebug(function() {
    return "registering drop-zone if absent";
  });
  if (!typeToDropZones.has(type2)) {
    typeToDropZones.set(type2, /* @__PURE__ */ new Set());
  }
  if (!typeToDropZones.get(type2).has(dropZoneEl)) {
    typeToDropZones.get(type2).add(dropZoneEl);
    incrementActiveDropZoneCount();
  }
}
function unregisterDropZone(dropZoneEl, type2) {
  typeToDropZones.get(type2)["delete"](dropZoneEl);
  decrementActiveDropZoneCount();
  if (typeToDropZones.get(type2).size === 0) {
    typeToDropZones["delete"](type2);
  }
}
function watchDraggedElement() {
  printDebug(function() {
    return "watching dragged element";
  });
  armWindowScroller();
  var dropZones = typeToDropZones.get(draggedElType);
  var _iterator = _createForOfIteratorHelper(dropZones), _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done; ) {
      var dz = _step.value;
      dz.addEventListener(DRAGGED_ENTERED_EVENT_NAME, handleDraggedEntered);
      dz.addEventListener(DRAGGED_LEFT_EVENT_NAME, handleDraggedLeft);
      dz.addEventListener(DRAGGED_OVER_INDEX_EVENT_NAME, handleDraggedIsOverIndex);
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  window.addEventListener(DRAGGED_LEFT_DOCUMENT_EVENT_NAME, handleDrop);
  var observationIntervalMs = Math.max.apply(Math, [MIN_OBSERVATION_INTERVAL_MS].concat(_toConsumableArray(Array.from(dropZones.keys()).map(function(dz2) {
    return dzToConfig.get(dz2).dropAnimationDurationMs;
  }))));
  observe(draggedEl, dropZones, observationIntervalMs * 1.07);
}
function unWatchDraggedElement() {
  printDebug(function() {
    return "unwatching dragged element";
  });
  disarmWindowScroller();
  var dropZones = typeToDropZones.get(draggedElType);
  var _iterator2 = _createForOfIteratorHelper(dropZones), _step2;
  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
      var dz = _step2.value;
      dz.removeEventListener(DRAGGED_ENTERED_EVENT_NAME, handleDraggedEntered);
      dz.removeEventListener(DRAGGED_LEFT_EVENT_NAME, handleDraggedLeft);
      dz.removeEventListener(DRAGGED_OVER_INDEX_EVENT_NAME, handleDraggedIsOverIndex);
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
  window.removeEventListener(DRAGGED_LEFT_DOCUMENT_EVENT_NAME, handleDrop);
  unobserve();
}
function findShadowPlaceHolderIdx(items) {
  return items.findIndex(function(item) {
    return item[ITEM_ID_KEY] === SHADOW_PLACEHOLDER_ITEM_ID;
  });
}
function findShadowElementIdx(items) {
  return items.findIndex(function(item) {
    return !!item[SHADOW_ITEM_MARKER_PROPERTY_NAME] && item[ITEM_ID_KEY] !== SHADOW_PLACEHOLDER_ITEM_ID;
  });
}
function handleDraggedEntered(e) {
  printDebug(function() {
    return ["dragged entered", e.currentTarget, e.detail];
  });
  var _dzToConfig$get = dzToConfig.get(e.currentTarget), items = _dzToConfig$get.items, dropFromOthersDisabled = _dzToConfig$get.dropFromOthersDisabled;
  if (dropFromOthersDisabled && e.currentTarget !== originDropZone) {
    printDebug(function() {
      return "ignoring dragged entered because drop is currently disabled";
    });
    return;
  }
  isDraggedOutsideOfAnyDz = false;
  items = items.filter(function(item) {
    return item[ITEM_ID_KEY] !== shadowElData[ITEM_ID_KEY];
  });
  printDebug(function() {
    return "dragged entered items ".concat(toString(items));
  });
  if (originDropZone !== e.currentTarget) {
    var originZoneItems = dzToConfig.get(originDropZone).items;
    var newOriginZoneItems = originZoneItems.filter(function(item) {
      return !item[SHADOW_ITEM_MARKER_PROPERTY_NAME];
    });
    dispatchConsiderEvent(originDropZone, newOriginZoneItems, {
      trigger: TRIGGERS.DRAGGED_ENTERED_ANOTHER,
      id: draggedElData[ITEM_ID_KEY],
      source: SOURCES.POINTER
    });
  } else {
    var shadowPlaceHolderIdx = findShadowPlaceHolderIdx(items);
    if (shadowPlaceHolderIdx !== -1) {
      printDebug(function() {
        return "removing placeholder item from origin dz";
      });
      items.splice(shadowPlaceHolderIdx, 1);
    }
  }
  var _e$detail$indexObj = e.detail.indexObj, index = _e$detail$indexObj.index, isProximityBased = _e$detail$indexObj.isProximityBased;
  var shadowElIdx = isProximityBased && index === e.currentTarget.children.length - 1 ? index + 1 : index;
  shadowElDropZone = e.currentTarget;
  items.splice(shadowElIdx, 0, shadowElData);
  dispatchConsiderEvent(e.currentTarget, items, {
    trigger: TRIGGERS.DRAGGED_ENTERED,
    id: draggedElData[ITEM_ID_KEY],
    source: SOURCES.POINTER
  });
}
function handleDraggedLeft(e) {
  if (!isWorkingOnPreviousDrag)
    return;
  printDebug(function() {
    return ["dragged left", e.currentTarget, e.detail];
  });
  var _dzToConfig$get2 = dzToConfig.get(e.currentTarget), items = _dzToConfig$get2.items, dropFromOthersDisabled = _dzToConfig$get2.dropFromOthersDisabled;
  if (dropFromOthersDisabled && e.currentTarget !== originDropZone && e.currentTarget !== shadowElDropZone) {
    printDebug(function() {
      return "drop is currently disabled";
    });
    return;
  }
  var shadowElIdx = findShadowElementIdx(items);
  var shadowItem = items.splice(shadowElIdx, 1)[0];
  shadowElDropZone = void 0;
  var _e$detail = e.detail, type2 = _e$detail.type, theOtherDz = _e$detail.theOtherDz;
  if (type2 === DRAGGED_LEFT_TYPES.OUTSIDE_OF_ANY || type2 === DRAGGED_LEFT_TYPES.LEFT_FOR_ANOTHER && theOtherDz !== originDropZone && dzToConfig.get(theOtherDz).dropFromOthersDisabled) {
    printDebug(function() {
      return "dragged left all, putting shadow element back in the origin dz";
    });
    isDraggedOutsideOfAnyDz = true;
    shadowElDropZone = originDropZone;
    var originZoneItems = dzToConfig.get(originDropZone).items;
    originZoneItems.splice(originIndex, 0, shadowItem);
    dispatchConsiderEvent(originDropZone, originZoneItems, {
      trigger: TRIGGERS.DRAGGED_LEFT_ALL,
      id: draggedElData[ITEM_ID_KEY],
      source: SOURCES.POINTER
    });
  }
  dispatchConsiderEvent(e.currentTarget, items, {
    trigger: TRIGGERS.DRAGGED_LEFT,
    id: draggedElData[ITEM_ID_KEY],
    source: SOURCES.POINTER
  });
}
function handleDraggedIsOverIndex(e) {
  printDebug(function() {
    return ["dragged is over index", e.currentTarget, e.detail];
  });
  var _dzToConfig$get3 = dzToConfig.get(e.currentTarget), items = _dzToConfig$get3.items, dropFromOthersDisabled = _dzToConfig$get3.dropFromOthersDisabled;
  if (dropFromOthersDisabled && e.currentTarget !== originDropZone) {
    printDebug(function() {
      return "drop is currently disabled";
    });
    return;
  }
  isDraggedOutsideOfAnyDz = false;
  var index = e.detail.indexObj.index;
  var shadowElIdx = findShadowElementIdx(items);
  items.splice(shadowElIdx, 1);
  items.splice(index, 0, shadowElData);
  dispatchConsiderEvent(e.currentTarget, items, {
    trigger: TRIGGERS.DRAGGED_OVER_INDEX,
    id: draggedElData[ITEM_ID_KEY],
    source: SOURCES.POINTER
  });
}
function handleMouseMove(e) {
  e.preventDefault();
  var c = e.touches ? e.touches[0] : e;
  currentMousePosition = {
    x: c.clientX,
    y: c.clientY
  };
  draggedEl.style.transform = "translate3d(".concat(currentMousePosition.x - dragStartMousePosition.x, "px, ").concat(currentMousePosition.y - dragStartMousePosition.y, "px, 0)");
}
function handleDrop() {
  printDebug(function() {
    return "dropped";
  });
  finalizingPreviousDrag = true;
  window.removeEventListener("mousemove", handleMouseMove);
  window.removeEventListener("touchmove", handleMouseMove);
  window.removeEventListener("mouseup", handleDrop);
  window.removeEventListener("touchend", handleDrop);
  unWatchDraggedElement();
  moveDraggedElementToWasDroppedState(draggedEl);
  if (!shadowElDropZone) {
    printDebug(function() {
      return "element was dropped right after it left origin but before entering somewhere else";
    });
    shadowElDropZone = originDropZone;
  }
  printDebug(function() {
    return ["dropped in dz", shadowElDropZone];
  });
  var _dzToConfig$get4 = dzToConfig.get(shadowElDropZone), items = _dzToConfig$get4.items, type2 = _dzToConfig$get4.type;
  styleInactiveDropZones(typeToDropZones.get(type2), function(dz) {
    return dzToConfig.get(dz).dropTargetStyle;
  }, function(dz) {
    return dzToConfig.get(dz).dropTargetClasses;
  });
  var shadowElIdx = findShadowElementIdx(items);
  if (shadowElIdx === -1)
    shadowElIdx = originIndex;
  items = items.map(function(item) {
    return item[SHADOW_ITEM_MARKER_PROPERTY_NAME] ? draggedElData : item;
  });
  function finalizeWithinZone() {
    unlockOriginDzMinDimensions();
    dispatchFinalizeEvent(shadowElDropZone, items, {
      trigger: isDraggedOutsideOfAnyDz ? TRIGGERS.DROPPED_OUTSIDE_OF_ANY : TRIGGERS.DROPPED_INTO_ZONE,
      id: draggedElData[ITEM_ID_KEY],
      source: SOURCES.POINTER
    });
    if (shadowElDropZone !== originDropZone) {
      dispatchFinalizeEvent(originDropZone, dzToConfig.get(originDropZone).items, {
        trigger: TRIGGERS.DROPPED_INTO_ANOTHER,
        id: draggedElData[ITEM_ID_KEY],
        source: SOURCES.POINTER
      });
    }
    unDecorateShadowElement(shadowElDropZone.children[shadowElIdx]);
    cleanupPostDrop();
  }
  animateDraggedToFinalPosition(shadowElIdx, finalizeWithinZone);
}
function animateDraggedToFinalPosition(shadowElIdx, callback) {
  var shadowElRect = getBoundingRectNoTransforms(shadowElDropZone.children[shadowElIdx]);
  var newTransform = {
    x: shadowElRect.left - parseFloat(draggedEl.style.left),
    y: shadowElRect.top - parseFloat(draggedEl.style.top)
  };
  var _dzToConfig$get5 = dzToConfig.get(shadowElDropZone), dropAnimationDurationMs = _dzToConfig$get5.dropAnimationDurationMs;
  var transition = "transform ".concat(dropAnimationDurationMs, "ms ease");
  draggedEl.style.transition = draggedEl.style.transition ? draggedEl.style.transition + "," + transition : transition;
  draggedEl.style.transform = "translate3d(".concat(newTransform.x, "px, ").concat(newTransform.y, "px, 0)");
  window.setTimeout(callback, dropAnimationDurationMs);
}
function scheduleDZForRemovalAfterDrop(dz, destroy) {
  scheduledForRemovalAfterDrop.push({
    dz,
    destroy
  });
  window.requestAnimationFrame(function() {
    hideElement(dz);
    document.body.appendChild(dz);
  });
}
function cleanupPostDrop() {
  draggedEl.remove();
  originalDragTarget.remove();
  if (scheduledForRemovalAfterDrop.length) {
    printDebug(function() {
      return ["will destroy zones that were removed during drag", scheduledForRemovalAfterDrop];
    });
    scheduledForRemovalAfterDrop.forEach(function(_ref) {
      var dz = _ref.dz, destroy = _ref.destroy;
      destroy();
      dz.remove();
    });
    scheduledForRemovalAfterDrop = [];
  }
  draggedEl = void 0;
  originalDragTarget = void 0;
  draggedElData = void 0;
  draggedElType = void 0;
  originDropZone = void 0;
  originIndex = void 0;
  shadowElData = void 0;
  shadowElDropZone = void 0;
  dragStartMousePosition = void 0;
  currentMousePosition = void 0;
  isWorkingOnPreviousDrag = false;
  finalizingPreviousDrag = false;
  unlockOriginDzMinDimensions = void 0;
  isDraggedOutsideOfAnyDz = false;
}
function dndzone(node, options) {
  var initialized = false;
  var config = {
    items: void 0,
    type: void 0,
    flipDurationMs: 0,
    dragDisabled: false,
    morphDisabled: false,
    dropFromOthersDisabled: false,
    dropTargetStyle: DEFAULT_DROP_TARGET_STYLE,
    dropTargetClasses: [],
    transformDraggedElement: function transformDraggedElement() {
    },
    centreDraggedOnCursor: false
  };
  printDebug(function() {
    return ["dndzone good to go options: ".concat(toString(options), ", config: ").concat(toString(config)), {
      node
    }];
  });
  var elToIdx = /* @__PURE__ */ new Map();
  function addMaybeListeners() {
    window.addEventListener("mousemove", handleMouseMoveMaybeDragStart, {
      passive: false
    });
    window.addEventListener("touchmove", handleMouseMoveMaybeDragStart, {
      passive: false,
      capture: false
    });
    window.addEventListener("mouseup", handleFalseAlarm, {
      passive: false
    });
    window.addEventListener("touchend", handleFalseAlarm, {
      passive: false
    });
  }
  function removeMaybeListeners() {
    window.removeEventListener("mousemove", handleMouseMoveMaybeDragStart);
    window.removeEventListener("touchmove", handleMouseMoveMaybeDragStart);
    window.removeEventListener("mouseup", handleFalseAlarm);
    window.removeEventListener("touchend", handleFalseAlarm);
  }
  function handleFalseAlarm() {
    removeMaybeListeners();
    originalDragTarget = void 0;
    dragStartMousePosition = void 0;
    currentMousePosition = void 0;
  }
  function handleMouseMoveMaybeDragStart(e) {
    e.preventDefault();
    var c = e.touches ? e.touches[0] : e;
    currentMousePosition = {
      x: c.clientX,
      y: c.clientY
    };
    if (Math.abs(currentMousePosition.x - dragStartMousePosition.x) >= MIN_MOVEMENT_BEFORE_DRAG_START_PX || Math.abs(currentMousePosition.y - dragStartMousePosition.y) >= MIN_MOVEMENT_BEFORE_DRAG_START_PX) {
      removeMaybeListeners();
      handleDragStart();
    }
  }
  function handleMouseDown(e) {
    if (e.target !== e.currentTarget && (e.target.value !== void 0 || e.target.isContentEditable)) {
      printDebug(function() {
        return "won't initiate drag on a nested input element";
      });
      return;
    }
    if (e.button) {
      printDebug(function() {
        return "ignoring none left click button: ".concat(e.button);
      });
      return;
    }
    if (isWorkingOnPreviousDrag) {
      printDebug(function() {
        return "cannot start a new drag before finalizing previous one";
      });
      return;
    }
    e.stopPropagation();
    var c = e.touches ? e.touches[0] : e;
    dragStartMousePosition = {
      x: c.clientX,
      y: c.clientY
    };
    currentMousePosition = _objectSpread2({}, dragStartMousePosition);
    originalDragTarget = e.currentTarget;
    addMaybeListeners();
  }
  function handleDragStart() {
    printDebug(function() {
      return ["drag start config: ".concat(toString(config)), originalDragTarget];
    });
    isWorkingOnPreviousDrag = true;
    var currentIdx = elToIdx.get(originalDragTarget);
    originIndex = currentIdx;
    originDropZone = originalDragTarget.parentElement;
    var rootNode = originDropZone.getRootNode();
    var originDropZoneRoot = rootNode.body || rootNode;
    var items = config.items, type2 = config.type, centreDraggedOnCursor = config.centreDraggedOnCursor;
    draggedElData = _objectSpread2({}, items[currentIdx]);
    draggedElType = type2;
    shadowElData = _objectSpread2(_objectSpread2({}, draggedElData), {}, _defineProperty({}, SHADOW_ITEM_MARKER_PROPERTY_NAME, true));
    var placeHolderElData = _objectSpread2(_objectSpread2({}, shadowElData), {}, _defineProperty({}, ITEM_ID_KEY, SHADOW_PLACEHOLDER_ITEM_ID));
    draggedEl = createDraggedElementFrom(originalDragTarget, centreDraggedOnCursor && currentMousePosition);
    function keepOriginalElementInDom() {
      if (!draggedEl.parentElement) {
        originDropZoneRoot.appendChild(draggedEl);
        draggedEl.focus();
        watchDraggedElement();
        hideElement(originalDragTarget);
        originDropZoneRoot.appendChild(originalDragTarget);
      } else {
        window.requestAnimationFrame(keepOriginalElementInDom);
      }
    }
    window.requestAnimationFrame(keepOriginalElementInDom);
    styleActiveDropZones(Array.from(typeToDropZones.get(config.type)).filter(function(dz) {
      return dz === originDropZone || !dzToConfig.get(dz).dropFromOthersDisabled;
    }), function(dz) {
      return dzToConfig.get(dz).dropTargetStyle;
    }, function(dz) {
      return dzToConfig.get(dz).dropTargetClasses;
    });
    items.splice(currentIdx, 1, placeHolderElData);
    unlockOriginDzMinDimensions = preventShrinking(originDropZone);
    dispatchConsiderEvent(originDropZone, items, {
      trigger: TRIGGERS.DRAG_STARTED,
      id: draggedElData[ITEM_ID_KEY],
      source: SOURCES.POINTER
    });
    window.addEventListener("mousemove", handleMouseMove, {
      passive: false
    });
    window.addEventListener("touchmove", handleMouseMove, {
      passive: false,
      capture: false
    });
    window.addEventListener("mouseup", handleDrop, {
      passive: false
    });
    window.addEventListener("touchend", handleDrop, {
      passive: false
    });
  }
  function configure(_ref2) {
    var _ref2$items = _ref2.items, items = _ref2$items === void 0 ? void 0 : _ref2$items, _ref2$flipDurationMs = _ref2.flipDurationMs, dropAnimationDurationMs = _ref2$flipDurationMs === void 0 ? 0 : _ref2$flipDurationMs, _ref2$type = _ref2.type, newType = _ref2$type === void 0 ? DEFAULT_DROP_ZONE_TYPE : _ref2$type, _ref2$dragDisabled = _ref2.dragDisabled, dragDisabled = _ref2$dragDisabled === void 0 ? false : _ref2$dragDisabled, _ref2$morphDisabled = _ref2.morphDisabled, morphDisabled = _ref2$morphDisabled === void 0 ? false : _ref2$morphDisabled, _ref2$dropFromOthersD = _ref2.dropFromOthersDisabled, dropFromOthersDisabled = _ref2$dropFromOthersD === void 0 ? false : _ref2$dropFromOthersD, _ref2$dropTargetStyle = _ref2.dropTargetStyle, dropTargetStyle = _ref2$dropTargetStyle === void 0 ? DEFAULT_DROP_TARGET_STYLE : _ref2$dropTargetStyle, _ref2$dropTargetClass = _ref2.dropTargetClasses, dropTargetClasses = _ref2$dropTargetClass === void 0 ? [] : _ref2$dropTargetClass, _ref2$transformDragge = _ref2.transformDraggedElement, transformDraggedElement = _ref2$transformDragge === void 0 ? function() {
    } : _ref2$transformDragge, _ref2$centreDraggedOn = _ref2.centreDraggedOnCursor, centreDraggedOnCursor = _ref2$centreDraggedOn === void 0 ? false : _ref2$centreDraggedOn;
    config.dropAnimationDurationMs = dropAnimationDurationMs;
    if (config.type && newType !== config.type) {
      unregisterDropZone(node, config.type);
    }
    config.type = newType;
    registerDropZone(node, newType);
    config.items = _toConsumableArray(items);
    config.dragDisabled = dragDisabled;
    config.morphDisabled = morphDisabled;
    config.transformDraggedElement = transformDraggedElement;
    config.centreDraggedOnCursor = centreDraggedOnCursor;
    if (initialized && isWorkingOnPreviousDrag && !finalizingPreviousDrag && (!areObjectsShallowEqual(dropTargetStyle, config.dropTargetStyle) || !areArraysShallowEqualSameOrder(dropTargetClasses, config.dropTargetClasses))) {
      styleInactiveDropZones([node], function() {
        return config.dropTargetStyle;
      }, function() {
        return dropTargetClasses;
      });
      styleActiveDropZones([node], function() {
        return dropTargetStyle;
      }, function() {
        return dropTargetClasses;
      });
    }
    config.dropTargetStyle = dropTargetStyle;
    config.dropTargetClasses = _toConsumableArray(dropTargetClasses);
    function getConfigProp(dz, propName) {
      return dzToConfig.get(dz) ? dzToConfig.get(dz)[propName] : config[propName];
    }
    if (initialized && isWorkingOnPreviousDrag && config.dropFromOthersDisabled !== dropFromOthersDisabled) {
      if (dropFromOthersDisabled) {
        styleInactiveDropZones([node], function(dz) {
          return getConfigProp(dz, "dropTargetStyle");
        }, function(dz) {
          return getConfigProp(dz, "dropTargetClasses");
        });
      } else {
        styleActiveDropZones([node], function(dz) {
          return getConfigProp(dz, "dropTargetStyle");
        }, function(dz) {
          return getConfigProp(dz, "dropTargetClasses");
        });
      }
    }
    config.dropFromOthersDisabled = dropFromOthersDisabled;
    dzToConfig.set(node, config);
    var shadowElIdx = findShadowElementIdx(config.items);
    for (var idx = 0; idx < node.children.length; idx++) {
      var draggableEl = node.children[idx];
      styleDraggable(draggableEl, dragDisabled);
      if (idx === shadowElIdx) {
        config.transformDraggedElement(draggedEl, draggedElData, idx);
        if (!morphDisabled) {
          morphDraggedElementToBeLike(draggedEl, draggableEl, currentMousePosition.x, currentMousePosition.y);
        }
        decorateShadowEl(draggableEl);
        continue;
      }
      draggableEl.removeEventListener("mousedown", elToMouseDownListener.get(draggableEl));
      draggableEl.removeEventListener("touchstart", elToMouseDownListener.get(draggableEl));
      if (!dragDisabled) {
        draggableEl.addEventListener("mousedown", handleMouseDown);
        draggableEl.addEventListener("touchstart", handleMouseDown);
        elToMouseDownListener.set(draggableEl, handleMouseDown);
      }
      elToIdx.set(draggableEl, idx);
      if (!initialized) {
        initialized = true;
      }
    }
  }
  configure(options);
  return {
    update: function update2(newOptions) {
      printDebug(function() {
        return "pointer dndzone will update newOptions: ".concat(toString(newOptions));
      });
      configure(newOptions);
    },
    destroy: function destroy() {
      function destroyDz() {
        printDebug(function() {
          return "pointer dndzone will destroy";
        });
        unregisterDropZone(node, dzToConfig.get(node).type);
        dzToConfig["delete"](node);
      }
      if (isWorkingOnPreviousDrag) {
        printDebug(function() {
          return "pointer dndzone will be scheduled for destruction";
        });
        scheduleDZForRemovalAfterDrop(node, destroyDz);
      } else {
        destroyDz();
      }
    }
  };
}
var _ID_TO_INSTRUCTION;
var INSTRUCTION_IDs = {
  DND_ZONE_ACTIVE: "dnd-zone-active",
  DND_ZONE_DRAG_DISABLED: "dnd-zone-drag-disabled"
};
var ID_TO_INSTRUCTION = (_ID_TO_INSTRUCTION = {}, _defineProperty(_ID_TO_INSTRUCTION, INSTRUCTION_IDs.DND_ZONE_ACTIVE, "Tab to one the items and press space-bar or enter to start dragging it"), _defineProperty(_ID_TO_INSTRUCTION, INSTRUCTION_IDs.DND_ZONE_DRAG_DISABLED, "This is a disabled drag and drop list"), _ID_TO_INSTRUCTION);
var ALERT_DIV_ID = "dnd-action-aria-alert";
var alertsDiv;
function initAriaOnBrowser() {
  if (alertsDiv) {
    return;
  }
  alertsDiv = document.createElement("div");
  (function initAlertsDiv() {
    alertsDiv.id = ALERT_DIV_ID;
    alertsDiv.style.position = "fixed";
    alertsDiv.style.bottom = "0";
    alertsDiv.style.left = "0";
    alertsDiv.style.zIndex = "-5";
    alertsDiv.style.opacity = "0";
    alertsDiv.style.height = "0";
    alertsDiv.style.width = "0";
    alertsDiv.setAttribute("role", "alert");
  })();
  document.body.prepend(alertsDiv);
  Object.entries(ID_TO_INSTRUCTION).forEach(function(_ref) {
    var _ref2 = _slicedToArray(_ref, 2), id = _ref2[0], txt = _ref2[1];
    return document.body.prepend(instructionToHiddenDiv(id, txt));
  });
}
function initAria() {
  if (isOnServer)
    return null;
  if (document.readyState === "complete") {
    initAriaOnBrowser();
  } else {
    window.addEventListener("DOMContentLoaded", initAriaOnBrowser);
  }
  return _objectSpread2({}, INSTRUCTION_IDs);
}
function destroyAria() {
  if (isOnServer || !alertsDiv)
    return;
  Object.keys(ID_TO_INSTRUCTION).forEach(function(id) {
    var _document$getElementB;
    return (_document$getElementB = document.getElementById(id)) === null || _document$getElementB === void 0 ? void 0 : _document$getElementB.remove();
  });
  alertsDiv.remove();
  alertsDiv = void 0;
}
function instructionToHiddenDiv(id, txt) {
  var div = document.createElement("div");
  div.id = id;
  div.innerHTML = "<p>".concat(txt, "</p>");
  div.style.display = "none";
  div.style.position = "fixed";
  div.style.zIndex = "-5";
  return div;
}
function alertToScreenReader(txt) {
  if (isOnServer)
    return;
  if (!alertsDiv) {
    initAriaOnBrowser();
  }
  alertsDiv.innerHTML = "";
  var alertText = document.createTextNode(txt);
  alertsDiv.appendChild(alertText);
  alertsDiv.style.display = "none";
  alertsDiv.style.display = "inline";
}
var DEFAULT_DROP_ZONE_TYPE$1 = "--any--";
var DEFAULT_DROP_TARGET_STYLE$1 = {
  outline: "rgba(255, 255, 102, 0.7) solid 2px"
};
var isDragging = false;
var draggedItemType;
var focusedDz;
var focusedDzLabel = "";
var focusedItem;
var focusedItemId;
var focusedItemLabel = "";
var allDragTargets = /* @__PURE__ */ new WeakSet();
var elToKeyDownListeners = /* @__PURE__ */ new WeakMap();
var elToFocusListeners = /* @__PURE__ */ new WeakMap();
var dzToHandles = /* @__PURE__ */ new Map();
var dzToConfig$1 = /* @__PURE__ */ new Map();
var typeToDropZones$1 = /* @__PURE__ */ new Map();
var INSTRUCTION_IDs$1;
function registerDropZone$1(dropZoneEl, type2) {
  printDebug(function() {
    return "registering drop-zone if absent";
  });
  if (typeToDropZones$1.size === 0) {
    printDebug(function() {
      return "adding global keydown and click handlers";
    });
    INSTRUCTION_IDs$1 = initAria();
    window.addEventListener("keydown", globalKeyDownHandler);
    window.addEventListener("click", globalClickHandler);
  }
  if (!typeToDropZones$1.has(type2)) {
    typeToDropZones$1.set(type2, /* @__PURE__ */ new Set());
  }
  if (!typeToDropZones$1.get(type2).has(dropZoneEl)) {
    typeToDropZones$1.get(type2).add(dropZoneEl);
    incrementActiveDropZoneCount();
  }
}
function unregisterDropZone$1(dropZoneEl, type2) {
  printDebug(function() {
    return "unregistering drop-zone";
  });
  if (focusedDz === dropZoneEl) {
    handleDrop$1();
  }
  typeToDropZones$1.get(type2)["delete"](dropZoneEl);
  decrementActiveDropZoneCount();
  if (typeToDropZones$1.get(type2).size === 0) {
    typeToDropZones$1["delete"](type2);
  }
  if (typeToDropZones$1.size === 0) {
    printDebug(function() {
      return "removing global keydown and click handlers";
    });
    window.removeEventListener("keydown", globalKeyDownHandler);
    window.removeEventListener("click", globalClickHandler);
    INSTRUCTION_IDs$1 = void 0;
    destroyAria();
  }
}
function globalKeyDownHandler(e) {
  if (!isDragging)
    return;
  switch (e.key) {
    case "Escape": {
      handleDrop$1();
      break;
    }
  }
}
function globalClickHandler() {
  if (!isDragging)
    return;
  if (!allDragTargets.has(document.activeElement)) {
    printDebug(function() {
      return "clicked outside of any draggable";
    });
    handleDrop$1();
  }
}
function handleZoneFocus(e) {
  printDebug(function() {
    return "zone focus";
  });
  if (!isDragging)
    return;
  var newlyFocusedDz = e.currentTarget;
  if (newlyFocusedDz === focusedDz)
    return;
  focusedDzLabel = newlyFocusedDz.getAttribute("aria-label") || "";
  var _dzToConfig$get = dzToConfig$1.get(focusedDz), originItems = _dzToConfig$get.items;
  var originItem = originItems.find(function(item) {
    return item[ITEM_ID_KEY] === focusedItemId;
  });
  var originIdx = originItems.indexOf(originItem);
  var itemToMove = originItems.splice(originIdx, 1)[0];
  var _dzToConfig$get2 = dzToConfig$1.get(newlyFocusedDz), targetItems = _dzToConfig$get2.items, autoAriaDisabled = _dzToConfig$get2.autoAriaDisabled;
  if (newlyFocusedDz.getBoundingClientRect().top < focusedDz.getBoundingClientRect().top || newlyFocusedDz.getBoundingClientRect().left < focusedDz.getBoundingClientRect().left) {
    targetItems.push(itemToMove);
    if (!autoAriaDisabled) {
      alertToScreenReader("Moved item ".concat(focusedItemLabel, " to the end of the list ").concat(focusedDzLabel));
    }
  } else {
    targetItems.unshift(itemToMove);
    if (!autoAriaDisabled) {
      alertToScreenReader("Moved item ".concat(focusedItemLabel, " to the beginning of the list ").concat(focusedDzLabel));
    }
  }
  var dzFrom = focusedDz;
  dispatchFinalizeEvent(dzFrom, originItems, {
    trigger: TRIGGERS.DROPPED_INTO_ANOTHER,
    id: focusedItemId,
    source: SOURCES.KEYBOARD
  });
  dispatchFinalizeEvent(newlyFocusedDz, targetItems, {
    trigger: TRIGGERS.DROPPED_INTO_ZONE,
    id: focusedItemId,
    source: SOURCES.KEYBOARD
  });
  focusedDz = newlyFocusedDz;
}
function triggerAllDzsUpdate() {
  dzToHandles.forEach(function(_ref, dz) {
    var update2 = _ref.update;
    return update2(dzToConfig$1.get(dz));
  });
}
function handleDrop$1() {
  var dispatchConsider = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
  printDebug(function() {
    return "drop";
  });
  if (!dzToConfig$1.get(focusedDz).autoAriaDisabled) {
    alertToScreenReader("Stopped dragging item ".concat(focusedItemLabel));
  }
  if (allDragTargets.has(document.activeElement)) {
    document.activeElement.blur();
  }
  if (dispatchConsider) {
    dispatchConsiderEvent(focusedDz, dzToConfig$1.get(focusedDz).items, {
      trigger: TRIGGERS.DRAG_STOPPED,
      id: focusedItemId,
      source: SOURCES.KEYBOARD
    });
  }
  styleInactiveDropZones(typeToDropZones$1.get(draggedItemType), function(dz) {
    return dzToConfig$1.get(dz).dropTargetStyle;
  }, function(dz) {
    return dzToConfig$1.get(dz).dropTargetClasses;
  });
  focusedItem = null;
  focusedItemId = null;
  focusedItemLabel = "";
  draggedItemType = null;
  focusedDz = null;
  focusedDzLabel = "";
  isDragging = false;
  triggerAllDzsUpdate();
}
function dndzone$1(node, options) {
  var config = {
    items: void 0,
    type: void 0,
    dragDisabled: false,
    zoneTabIndex: 0,
    dropFromOthersDisabled: false,
    dropTargetStyle: DEFAULT_DROP_TARGET_STYLE$1,
    dropTargetClasses: [],
    autoAriaDisabled: false
  };
  function swap(arr, i, j) {
    if (arr.length <= 1)
      return;
    arr.splice(j, 1, arr.splice(i, 1, arr[j])[0]);
  }
  function handleKeyDown(e) {
    printDebug(function() {
      return ["handling key down", e.key];
    });
    switch (e.key) {
      case "Enter":
      case " ": {
        if ((e.target.disabled !== void 0 || e.target.href || e.target.isContentEditable) && !allDragTargets.has(e.target)) {
          return;
        }
        e.preventDefault();
        e.stopPropagation();
        if (isDragging) {
          handleDrop$1();
        } else {
          handleDragStart(e);
        }
        break;
      }
      case "ArrowDown":
      case "ArrowRight": {
        if (!isDragging)
          return;
        e.preventDefault();
        e.stopPropagation();
        var _dzToConfig$get3 = dzToConfig$1.get(node), items = _dzToConfig$get3.items;
        var children2 = Array.from(node.children);
        var idx = children2.indexOf(e.currentTarget);
        printDebug(function() {
          return ["arrow down", idx];
        });
        if (idx < children2.length - 1) {
          if (!config.autoAriaDisabled) {
            alertToScreenReader("Moved item ".concat(focusedItemLabel, " to position ").concat(idx + 2, " in the list ").concat(focusedDzLabel));
          }
          swap(items, idx, idx + 1);
          dispatchFinalizeEvent(node, items, {
            trigger: TRIGGERS.DROPPED_INTO_ZONE,
            id: focusedItemId,
            source: SOURCES.KEYBOARD
          });
        }
        break;
      }
      case "ArrowUp":
      case "ArrowLeft": {
        if (!isDragging)
          return;
        e.preventDefault();
        e.stopPropagation();
        var _dzToConfig$get4 = dzToConfig$1.get(node), _items = _dzToConfig$get4.items;
        var _children = Array.from(node.children);
        var _idx = _children.indexOf(e.currentTarget);
        printDebug(function() {
          return ["arrow up", _idx];
        });
        if (_idx > 0) {
          if (!config.autoAriaDisabled) {
            alertToScreenReader("Moved item ".concat(focusedItemLabel, " to position ").concat(_idx, " in the list ").concat(focusedDzLabel));
          }
          swap(_items, _idx, _idx - 1);
          dispatchFinalizeEvent(node, _items, {
            trigger: TRIGGERS.DROPPED_INTO_ZONE,
            id: focusedItemId,
            source: SOURCES.KEYBOARD
          });
        }
        break;
      }
    }
  }
  function handleDragStart(e) {
    printDebug(function() {
      return "drag start";
    });
    setCurrentFocusedItem(e.currentTarget);
    focusedDz = node;
    draggedItemType = config.type;
    isDragging = true;
    var dropTargets = Array.from(typeToDropZones$1.get(config.type)).filter(function(dz) {
      return dz === focusedDz || !dzToConfig$1.get(dz).dropFromOthersDisabled;
    });
    styleActiveDropZones(dropTargets, function(dz) {
      return dzToConfig$1.get(dz).dropTargetStyle;
    }, function(dz) {
      return dzToConfig$1.get(dz).dropTargetClasses;
    });
    if (!config.autoAriaDisabled) {
      var msg = "Started dragging item ".concat(focusedItemLabel, ". Use the arrow keys to move it within its list ").concat(focusedDzLabel);
      if (dropTargets.length > 1) {
        msg += ", or tab to another list in order to move the item into it";
      }
      alertToScreenReader(msg);
    }
    dispatchConsiderEvent(node, dzToConfig$1.get(node).items, {
      trigger: TRIGGERS.DRAG_STARTED,
      id: focusedItemId,
      source: SOURCES.KEYBOARD
    });
    triggerAllDzsUpdate();
  }
  function handleClick(e) {
    if (!isDragging)
      return;
    if (e.currentTarget === focusedItem)
      return;
    e.stopPropagation();
    handleDrop$1(false);
    handleDragStart(e);
  }
  function setCurrentFocusedItem(draggableEl) {
    var _dzToConfig$get5 = dzToConfig$1.get(node), items = _dzToConfig$get5.items;
    var children2 = Array.from(node.children);
    var focusedItemIdx = children2.indexOf(draggableEl);
    focusedItem = draggableEl;
    focusedItem.tabIndex = 0;
    focusedItemId = items[focusedItemIdx][ITEM_ID_KEY];
    focusedItemLabel = children2[focusedItemIdx].getAttribute("aria-label") || "";
  }
  function configure(_ref2) {
    var _ref2$items = _ref2.items, items = _ref2$items === void 0 ? [] : _ref2$items, _ref2$type = _ref2.type, newType = _ref2$type === void 0 ? DEFAULT_DROP_ZONE_TYPE$1 : _ref2$type, _ref2$dragDisabled = _ref2.dragDisabled, dragDisabled = _ref2$dragDisabled === void 0 ? false : _ref2$dragDisabled, _ref2$zoneTabIndex = _ref2.zoneTabIndex, zoneTabIndex = _ref2$zoneTabIndex === void 0 ? 0 : _ref2$zoneTabIndex, _ref2$dropFromOthersD = _ref2.dropFromOthersDisabled, dropFromOthersDisabled = _ref2$dropFromOthersD === void 0 ? false : _ref2$dropFromOthersD, _ref2$dropTargetStyle = _ref2.dropTargetStyle, dropTargetStyle = _ref2$dropTargetStyle === void 0 ? DEFAULT_DROP_TARGET_STYLE$1 : _ref2$dropTargetStyle, _ref2$dropTargetClass = _ref2.dropTargetClasses, dropTargetClasses = _ref2$dropTargetClass === void 0 ? [] : _ref2$dropTargetClass, _ref2$autoAriaDisable = _ref2.autoAriaDisabled, autoAriaDisabled = _ref2$autoAriaDisable === void 0 ? false : _ref2$autoAriaDisable;
    config.items = _toConsumableArray(items);
    config.dragDisabled = dragDisabled;
    config.dropFromOthersDisabled = dropFromOthersDisabled;
    config.zoneTabIndex = zoneTabIndex;
    config.dropTargetStyle = dropTargetStyle;
    config.dropTargetClasses = dropTargetClasses;
    config.autoAriaDisabled = autoAriaDisabled;
    if (config.type && newType !== config.type) {
      unregisterDropZone$1(node, config.type);
    }
    config.type = newType;
    registerDropZone$1(node, newType);
    if (!autoAriaDisabled) {
      node.setAttribute("aria-disabled", dragDisabled);
      node.setAttribute("role", "list");
      node.setAttribute("aria-describedby", dragDisabled ? INSTRUCTION_IDs$1.DND_ZONE_DRAG_DISABLED : INSTRUCTION_IDs$1.DND_ZONE_ACTIVE);
    }
    dzToConfig$1.set(node, config);
    if (isDragging) {
      node.tabIndex = node === focusedDz || focusedItem.contains(node) || config.dropFromOthersDisabled || focusedDz && config.type !== dzToConfig$1.get(focusedDz).type ? -1 : 0;
    } else {
      node.tabIndex = config.zoneTabIndex;
    }
    node.addEventListener("focus", handleZoneFocus);
    var _loop = function _loop2(i2) {
      var draggableEl = node.children[i2];
      allDragTargets.add(draggableEl);
      draggableEl.tabIndex = isDragging ? -1 : 0;
      if (!autoAriaDisabled) {
        draggableEl.setAttribute("role", "listitem");
      }
      draggableEl.removeEventListener("keydown", elToKeyDownListeners.get(draggableEl));
      draggableEl.removeEventListener("click", elToFocusListeners.get(draggableEl));
      if (!dragDisabled) {
        draggableEl.addEventListener("keydown", handleKeyDown);
        elToKeyDownListeners.set(draggableEl, handleKeyDown);
        draggableEl.addEventListener("click", handleClick);
        elToFocusListeners.set(draggableEl, handleClick);
      }
      if (isDragging && config.items[i2][ITEM_ID_KEY] === focusedItemId) {
        printDebug(function() {
          return ["focusing on", {
            i: i2,
            focusedItemId
          }];
        });
        focusedItem = draggableEl;
        focusedItem.tabIndex = 0;
        draggableEl.focus();
      }
    };
    for (var i = 0; i < node.children.length; i++) {
      _loop(i);
    }
  }
  configure(options);
  var handles = {
    update: function update2(newOptions) {
      printDebug(function() {
        return "keyboard dndzone will update newOptions: ".concat(toString(newOptions));
      });
      configure(newOptions);
    },
    destroy: function destroy() {
      printDebug(function() {
        return "keyboard dndzone will destroy";
      });
      unregisterDropZone$1(node, config.type);
      dzToConfig$1["delete"](node);
      dzToHandles["delete"](node);
    }
  };
  dzToHandles.set(node, handles);
  return handles;
}
var _excluded = ["items", "flipDurationMs", "type", "dragDisabled", "morphDisabled", "dropFromOthersDisabled", "zoneTabIndex", "dropTargetStyle", "dropTargetClasses", "transformDraggedElement", "autoAriaDisabled", "centreDraggedOnCursor"];
function dndzone$2(node, options) {
  validateOptions(options);
  var pointerZone = dndzone(node, options);
  var keyboardZone = dndzone$1(node, options);
  return {
    update: function update2(newOptions) {
      validateOptions(newOptions);
      pointerZone.update(newOptions);
      keyboardZone.update(newOptions);
    },
    destroy: function destroy() {
      pointerZone.destroy();
      keyboardZone.destroy();
    }
  };
}
function validateOptions(options) {
  var items = options.items, flipDurationMs2 = options.flipDurationMs, type2 = options.type, dragDisabled = options.dragDisabled, morphDisabled = options.morphDisabled, dropFromOthersDisabled = options.dropFromOthersDisabled, zoneTabIndex = options.zoneTabIndex, dropTargetStyle = options.dropTargetStyle, dropTargetClasses = options.dropTargetClasses, transformDraggedElement = options.transformDraggedElement, autoAriaDisabled = options.autoAriaDisabled, centreDraggedOnCursor = options.centreDraggedOnCursor, rest = _objectWithoutProperties(options, _excluded);
  if (Object.keys(rest).length > 0) {
    console.warn("dndzone will ignore unknown options", rest);
  }
  if (!items) {
    throw new Error("no 'items' key provided to dndzone");
  }
  var itemWithMissingId = items.find(function(item) {
    return !{}.hasOwnProperty.call(item, ITEM_ID_KEY);
  });
  if (itemWithMissingId) {
    throw new Error("missing '".concat(ITEM_ID_KEY, "' property for item ").concat(toString(itemWithMissingId)));
  }
  if (dropTargetClasses && !Array.isArray(dropTargetClasses)) {
    throw new Error("dropTargetClasses should be an array but instead it is a ".concat(_typeof(dropTargetClasses), ", ").concat(toString(dropTargetClasses)));
  }
  if (zoneTabIndex && !isInt(zoneTabIndex)) {
    throw new Error("zoneTabIndex should be a number but instead it is a ".concat(_typeof(zoneTabIndex), ", ").concat(toString(zoneTabIndex)));
  }
}
function isInt(value) {
  return !isNaN(value) && function(x) {
    return (x | 0) === x;
  }(parseFloat(value));
}

// node_modules/svelte/easing/index.mjs
function cubicOut(t) {
  const f = t - 1;
  return f * f * f + 1;
}

// node_modules/svelte/animate/index.mjs
function flip2(node, { from, to }, params = {}) {
  const style = getComputedStyle(node);
  const transform = style.transform === "none" ? "" : style.transform;
  const [ox, oy] = style.transformOrigin.split(" ").map(parseFloat);
  const dx = from.left + from.width * ox / to.width - (to.left + ox);
  const dy = from.top + from.height * oy / to.height - (to.top + oy);
  const { delay = 0, duration = (d) => Math.sqrt(d) * 120, easing = cubicOut } = params;
  return {
    delay,
    duration: is_function(duration) ? duration(Math.sqrt(dx * dx + dy * dy)) : duration,
    easing,
    css: (t, u) => {
      const x = u * dx;
      const y = u * dy;
      const sx = t + u * from.width / to.width;
      const sy = t + u * from.height / to.height;
      return `transform: ${transform} translate(${x}px, ${y}px) scale(${sx}, ${sy});`;
    }
  };
}

// src/tracker/ui/creatures/Table.svelte
function add_css9(target) {
  append_styles(target, "svelte-mzbbdu", ".no-creatures.svelte-mzbbdu{margin:1rem;text-align:center}.initiative-tracker-table.svelte-mzbbdu{padding:0.5rem;align-items:center;gap:0.25rem 0.5rem;width:100%;margin-left:0rem;table-layout:fixed;border-collapse:separate;border-spacing:0 2px}.left.svelte-mzbbdu{text-align:left}.center.svelte-mzbbdu{text-align:center}.tracker-table-header.svelte-mzbbdu{font-weight:bolder;display:contents}.initiative-tracker-creature.svelte-mzbbdu{position:relative}.initiative-tracker-creature.active.svelte-mzbbdu{background-color:rgba(0, 0, 0, 0.1)}.theme-dark .initiative-tracker-creature.active.svelte-mzbbdu{background-color:rgba(255, 255, 255, 0.1)}.initiative-tracker-creature.disabled.svelte-mzbbdu *{color:var(--text-faint)}.initiative-tracker-creature.svelte-mzbbdu td{border-top:1px solid transparent;border-bottom:1px solid transparent}.initiative-tracker-creature.svelte-mzbbdu td:first-child{border-left:1px solid transparent}.initiative-tracker-creature.svelte-mzbbdu td:last-child{border-right:1px solid transparent}.initiative-tracker-creature.svelte-mzbbdu:hover td,.initiative-tracker-creature.viewing.svelte-mzbbdu td{border-top:1px solid var(--background-modifier-border);border-bottom:1px solid var(--background-modifier-border)}.initiative-tracker-creature.svelte-mzbbdu:hover td:first-child,.initiative-tracker-creature.viewing.svelte-mzbbdu td:first-child{border-left:1px solid var(--background-modifier-border)}.initiative-tracker-creature.svelte-mzbbdu:hover td:last-child,.initiative-tracker-creature.viewing.svelte-mzbbdu td:last-child{border-right:1px solid var(--background-modifier-border)}");
}
function get_each_context6(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[16] = list[i].creature;
  child_ctx[17] = list[i].id;
  return child_ctx;
}
function create_else_block6(ctx) {
  let div;
  return {
    c() {
      div = element("div");
      div.innerHTML = `<p>Add a creature to get started!</p> 
            <small>Players may be created in settings.</small>`;
      attr(div, "class", "no-creatures svelte-mzbbdu");
    },
    m(target, anchor) {
      insert(target, div, anchor);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(div);
    }
  };
}
function create_if_block7(ctx) {
  let thead;
  let th0;
  let t0;
  let th1;
  let t2;
  let th2;
  let hpIcon_action;
  let t3;
  let th3;
  let acIcon_action;
  let t4;
  let th4;
  let t5;
  let tbody;
  let each_blocks = [];
  let each_1_lookup = /* @__PURE__ */ new Map();
  let dndzone_action;
  let current;
  let mounted;
  let dispose;
  let each_value = ctx[1];
  const get_key = (ctx2) => ctx2[17];
  for (let i = 0; i < each_value.length; i += 1) {
    let child_ctx = get_each_context6(ctx, each_value, i);
    let key = get_key(child_ctx);
    each_1_lookup.set(key, each_blocks[i] = create_each_block6(key, child_ctx));
  }
  return {
    c() {
      thead = element("thead");
      th0 = element("th");
      t0 = space();
      th1 = element("th");
      th1.textContent = "Name";
      t2 = space();
      th2 = element("th");
      t3 = space();
      th3 = element("th");
      t4 = space();
      th4 = element("th");
      t5 = space();
      tbody = element("tbody");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      set_style(th0, "width", "10%");
      attr(th1, "class", "left svelte-mzbbdu");
      set_style(th1, "width", "55%");
      set_style(th2, "width", "15%");
      attr(th2, "class", "center svelte-mzbbdu");
      set_style(th3, "width", "15%");
      attr(th3, "class", "center svelte-mzbbdu");
      set_style(th4, "width", "5%");
      attr(thead, "class", "tracker-table-header svelte-mzbbdu");
    },
    m(target, anchor) {
      insert(target, thead, anchor);
      append(thead, th0);
      append(thead, t0);
      append(thead, th1);
      append(thead, t2);
      append(thead, th2);
      append(thead, t3);
      append(thead, th3);
      append(thead, t4);
      append(thead, th4);
      insert(target, t5, anchor);
      insert(target, tbody, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(tbody, null);
      }
      current = true;
      if (!mounted) {
        dispose = [
          action_destroyer(hpIcon_action = ctx[5].call(null, th2)),
          action_destroyer(acIcon_action = ctx[6].call(null, th3)),
          action_destroyer(dndzone_action = dndzone$2.call(null, tbody, {
            items: ctx[1],
            flipDurationMs,
            dropTargetStyle: {},
            morphDisabled: true
          })),
          listen(tbody, "consider", ctx[7]),
          listen(tbody, "finalize", ctx[8])
        ];
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (dirty & 6) {
        each_value = ctx2[1];
        group_outros();
        for (let i = 0; i < each_blocks.length; i += 1)
          each_blocks[i].r();
        each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx2, each_value, each_1_lookup, tbody, fix_and_outro_and_destroy_block, create_each_block6, null, get_each_context6);
        for (let i = 0; i < each_blocks.length; i += 1)
          each_blocks[i].a();
        check_outros();
      }
      if (dndzone_action && is_function(dndzone_action.update) && dirty & 2)
        dndzone_action.update.call(null, {
          items: ctx2[1],
          flipDurationMs,
          dropTargetStyle: {},
          morphDisabled: true
        });
    },
    i(local) {
      if (current)
        return;
      for (let i = 0; i < each_value.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      current = true;
    },
    o(local) {
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(thead);
      if (detaching)
        detach(t5);
      if (detaching)
        detach(tbody);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].d();
      }
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_each_block6(key_1, ctx) {
  let tr;
  let creaturetemplate;
  let t;
  let tr_data_hp_value;
  let tr_data_hp_max_value;
  let tr_data_hp_percent_value;
  let rect;
  let stop_animation = noop;
  let current;
  let mounted;
  let dispose;
  creaturetemplate = new Creature_default({
    props: { creature: ctx[16] }
  });
  creaturetemplate.$on("hp", ctx[9]);
  creaturetemplate.$on("tag", ctx[10]);
  creaturetemplate.$on("edit", ctx[11]);
  creaturetemplate.$on("open-combatant", ctx[12]);
  function click_handler3(...args) {
    return ctx[13](ctx[16], ...args);
  }
  return {
    key: key_1,
    first: null,
    c() {
      tr = element("tr");
      create_component(creaturetemplate.$$.fragment);
      t = space();
      attr(tr, "class", "draggable initiative-tracker-creature svelte-mzbbdu");
      attr(tr, "data-hp", tr_data_hp_value = ctx[16].hp);
      attr(tr, "data-hp-max", tr_data_hp_max_value = ctx[16].max);
      attr(tr, "data-hp-percent", tr_data_hp_percent_value = Math.round((ctx[16].hp ?? 0) / ctx[16].max * 100));
      toggle_class(tr, "disabled", !ctx[16].enabled);
      toggle_class(tr, "active", ctx[2] && ctx[16].active);
      toggle_class(tr, "viewing", ctx[16].viewing);
      this.first = tr;
    },
    m(target, anchor) {
      insert(target, tr, anchor);
      mount_component(creaturetemplate, tr, null);
      append(tr, t);
      current = true;
      if (!mounted) {
        dispose = listen(tr, "click", click_handler3);
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      const creaturetemplate_changes = {};
      if (dirty & 2)
        creaturetemplate_changes.creature = ctx[16];
      creaturetemplate.$set(creaturetemplate_changes);
      if (!current || dirty & 2 && tr_data_hp_value !== (tr_data_hp_value = ctx[16].hp)) {
        attr(tr, "data-hp", tr_data_hp_value);
      }
      if (!current || dirty & 2 && tr_data_hp_max_value !== (tr_data_hp_max_value = ctx[16].max)) {
        attr(tr, "data-hp-max", tr_data_hp_max_value);
      }
      if (!current || dirty & 2 && tr_data_hp_percent_value !== (tr_data_hp_percent_value = Math.round((ctx[16].hp ?? 0) / ctx[16].max * 100))) {
        attr(tr, "data-hp-percent", tr_data_hp_percent_value);
      }
      if (!current || dirty & 2) {
        toggle_class(tr, "disabled", !ctx[16].enabled);
      }
      if (!current || dirty & 6) {
        toggle_class(tr, "active", ctx[2] && ctx[16].active);
      }
      if (!current || dirty & 2) {
        toggle_class(tr, "viewing", ctx[16].viewing);
      }
    },
    r() {
      rect = tr.getBoundingClientRect();
    },
    f() {
      fix_position(tr);
      stop_animation();
    },
    a() {
      stop_animation();
      stop_animation = create_animation(tr, rect, flip2, { duration: flipDurationMs });
    },
    i(local) {
      if (current)
        return;
      transition_in(creaturetemplate.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(creaturetemplate.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(tr);
      destroy_component(creaturetemplate);
      mounted = false;
      dispose();
    }
  };
}
function create_fragment10(ctx) {
  let table;
  let current_block_type_index;
  let if_block;
  let current;
  const if_block_creators = [create_if_block7, create_else_block6];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (ctx2[0].length)
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx, -1);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      table = element("table");
      if_block.c();
      attr(table, "class", "initiative-tracker-table svelte-mzbbdu");
    },
    m(target, anchor) {
      insert(target, table, anchor);
      if_blocks[current_block_type_index].m(table, null);
      current = true;
    },
    p(ctx2, [dirty]) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2, dirty);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(table, null);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(table);
      if_blocks[current_block_type_index].d();
    }
  };
}
var flipDurationMs = 300;
function instance10($$self, $$props, $$invalidate) {
  let items;
  let $tracker;
  let $ordered;
  let $state;
  component_subscribe($$self, tracker, ($$value) => $$invalidate(14, $tracker = $$value));
  const { state, ordered } = tracker;
  component_subscribe($$self, state, (value) => $$invalidate(2, $state = value));
  component_subscribe($$self, ordered, (value) => $$invalidate(0, $ordered = value));
  const dispatch2 = createEventDispatcher();
  const hpIcon = (node) => {
    (0, import_obsidian17.setIcon)(node, HP);
  };
  const acIcon = (node) => {
    (0, import_obsidian17.setIcon)(node, AC);
  };
  function handleDndConsider(e) {
    $$invalidate(1, items = e.detail.items);
  }
  function handleDndFinalize(e) {
    if (e.detail.items.length > 1) {
      let dropped = e.detail.items.find(({ id }) => id == e.detail.info.id);
      const index = e.detail.items.findIndex((c) => c.id == e.detail.info.id);
      if (index == e.detail.items.length - 1) {
        dropped.creature.initiative = e.detail.items[index - 1].creature.initiative;
      } else {
        dropped.creature.initiative = e.detail.items[index + 1].creature.initiative;
      }
    }
    $$invalidate(1, items = e.detail.items);
    set_store_value(tracker, $tracker = [...items.map(({ creature }) => creature)], $tracker);
  }
  function hp_handler(event) {
    bubble.call(this, $$self, event);
  }
  function tag_handler(event) {
    bubble.call(this, $$self, event);
  }
  function edit_handler(event) {
    bubble.call(this, $$self, event);
  }
  function open_combatant_handler(event) {
    bubble.call(this, $$self, event);
  }
  const click_handler3 = (creature, e) => {
    tracker.setUpdate(creature, e);
    e.stopPropagation();
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & 1) {
      $:
        $$invalidate(1, items = [...$ordered].map((c) => {
          return { creature: c, id: getId() };
        }));
    }
  };
  return [
    $ordered,
    items,
    $state,
    state,
    ordered,
    hpIcon,
    acIcon,
    handleDndConsider,
    handleDndFinalize,
    hp_handler,
    tag_handler,
    edit_handler,
    open_combatant_handler,
    click_handler3
  ];
}
var Table = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance10, create_fragment10, safe_not_equal, {}, add_css9);
  }
};
var Table_default = Table;

// src/tracker/ui/Metadata.svelte
function add_css10(target) {
  append_styles(target, "svelte-n8vx8q", ".initiave-tracker-party.svelte-n8vx8q{padding:0 0.5rem;margin:0}.initiative-tracker-name-container.svelte-n8vx8q{display:flex;justify-content:space-between;align-items:center;padding:0 0.5rem;margin:0}.initiative-tracker-name.svelte-n8vx8q{margin:0}.initiative-tracker-round-container.svelte-n8vx8q{padding:0 0.5rem}");
}
function create_if_block_33(ctx) {
  let h2;
  let t;
  return {
    c() {
      h2 = element("h2");
      t = text(ctx[0]);
      attr(h2, "class", "initiative-tracker-name svelte-n8vx8q");
    },
    m(target, anchor) {
      insert(target, h2, anchor);
      append(h2, t);
    },
    p(ctx2, dirty) {
      if (dirty & 1)
        set_data(t, ctx2[0]);
    },
    d(detaching) {
      if (detaching)
        detach(h2);
    }
  };
}
function create_if_block_25(ctx) {
  let span;
  return {
    c() {
      span = element("span");
      span.textContent = `${totalXP} XP`;
      attr(span, "class", "initiative-tracker-xp encounter-xp");
    },
    m(target, anchor) {
      insert(target, span, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching)
        detach(span);
    }
  };
}
function create_if_block_16(ctx) {
  let h4;
  let t;
  return {
    c() {
      h4 = element("h4");
      t = text(ctx[1]);
      attr(h4, "class", "initiave-tracker-party svelte-n8vx8q");
    },
    m(target, anchor) {
      insert(target, h4, anchor);
      append(h4, t);
    },
    p(ctx2, dirty) {
      if (dirty & 2)
        set_data(t, ctx2[1]);
    },
    d(detaching) {
      if (detaching)
        detach(h4);
    }
  };
}
function create_if_block8(ctx) {
  let div;
  let small;
  let em;
  let t0;
  let t1;
  return {
    c() {
      div = element("div");
      small = element("small");
      em = element("em");
      t0 = text("Round ");
      t1 = text(ctx[3]);
      attr(div, "class", "initiative-tracker-round-container svelte-n8vx8q");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, small);
      append(small, em);
      append(em, t0);
      append(em, t1);
    },
    p(ctx2, dirty) {
      if (dirty & 8)
        set_data(t1, ctx2[3]);
    },
    d(detaching) {
      if (detaching)
        detach(div);
    }
  };
}
function create_fragment11(ctx) {
  let div1;
  let div0;
  let t0;
  let t1;
  let t2;
  let if_block0 = ctx[0] && ctx[0].length && create_if_block_33(ctx);
  let if_block1 = totalXP > 0 && create_if_block_25(ctx);
  let if_block2 = ctx[1] && create_if_block_16(ctx);
  let if_block3 = ctx[2] && create_if_block8(ctx);
  return {
    c() {
      div1 = element("div");
      div0 = element("div");
      if (if_block0)
        if_block0.c();
      t0 = space();
      if (if_block1)
        if_block1.c();
      t1 = space();
      if (if_block2)
        if_block2.c();
      t2 = space();
      if (if_block3)
        if_block3.c();
      attr(div0, "class", "initiative-tracker-name-container svelte-n8vx8q");
      attr(div1, "class", "initiatie-tracker-metadata");
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      append(div1, div0);
      if (if_block0)
        if_block0.m(div0, null);
      append(div0, t0);
      if (if_block1)
        if_block1.m(div0, null);
      append(div1, t1);
      if (if_block2)
        if_block2.m(div1, null);
      append(div1, t2);
      if (if_block3)
        if_block3.m(div1, null);
    },
    p(ctx2, [dirty]) {
      if (ctx2[0] && ctx2[0].length) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
        } else {
          if_block0 = create_if_block_33(ctx2);
          if_block0.c();
          if_block0.m(div0, t0);
        }
      } else if (if_block0) {
        if_block0.d(1);
        if_block0 = null;
      }
      if (totalXP > 0)
        if_block1.p(ctx2, dirty);
      if (ctx2[1]) {
        if (if_block2) {
          if_block2.p(ctx2, dirty);
        } else {
          if_block2 = create_if_block_16(ctx2);
          if_block2.c();
          if_block2.m(div1, t2);
        }
      } else if (if_block2) {
        if_block2.d(1);
        if_block2 = null;
      }
      if (ctx2[2]) {
        if (if_block3) {
          if_block3.p(ctx2, dirty);
        } else {
          if_block3 = create_if_block8(ctx2);
          if_block3.c();
          if_block3.m(div1, null);
        }
      } else if (if_block3) {
        if_block3.d(1);
        if_block3 = null;
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(div1);
      if (if_block0)
        if_block0.d();
      if (if_block1)
        if_block1.d();
      if (if_block2)
        if_block2.d();
      if (if_block3)
        if_block3.d();
    }
  };
}
var totalXP = 100;
function instance11($$self, $$props, $$invalidate) {
  let $name;
  let $party;
  let $state;
  let $round;
  const { state, name: name2, round: round2, party } = tracker;
  component_subscribe($$self, state, (value) => $$invalidate(2, $state = value));
  component_subscribe($$self, name2, (value) => $$invalidate(0, $name = value));
  component_subscribe($$self, round2, (value) => $$invalidate(3, $round = value));
  component_subscribe($$self, party, (value) => $$invalidate(1, $party = value));
  return [$name, $party, $state, $round, state, name2, round2, party];
}
var Metadata = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance11, create_fragment11, safe_not_equal, {}, add_css10);
  }
};
var Metadata_default = Metadata;

// src/tracker/ui/SaveEncounter.svelte
var import_obsidian18 = require("obsidian");
function add_css11(target) {
  append_styles(target, "svelte-1ud8n4x", ".saving-container.svelte-1ud8n4x.svelte-1ud8n4x{padding:0.5rem}.saving-encounter.svelte-1ud8n4x.svelte-1ud8n4x{display:flex;align-items:center;justify-content:space-between}.save-buttons.svelte-1ud8n4x.svelte-1ud8n4x{margin-top:1rem;display:flex;justify-content:flex-end;gap:1rem}.save-buttons.svelte-1ud8n4x>div.svelte-1ud8n4x{display:flex;align-items:center}.save-buttons.svelte-1ud8n4x .clickable-icon{margin:0}.save-buttons.svelte-1ud8n4x>.save.svelte-1ud8n4x .clickable-icon.is-disabled{cursor:not-allowed;color:var(--text-faint)}");
}
function create_if_block9(ctx) {
  let span;
  return {
    c() {
      span = element("span");
      span.innerHTML = `<small>An encounter by that name already exists. Are you sure?</small>`;
      attr(span, "class", "checking");
    },
    m(target, anchor) {
      insert(target, span, anchor);
    },
    d(detaching) {
      if (detaching)
        detach(span);
    }
  };
}
function create_fragment12(ctx) {
  let div4;
  let div0;
  let span;
  let t1;
  let input;
  let t2;
  let div3;
  let t3;
  let div1;
  let save_action;
  let t4;
  let div2;
  let cancel_action;
  let mounted;
  let dispose;
  let if_block = ctx[1] && create_if_block9(ctx);
  return {
    c() {
      div4 = element("div");
      div0 = element("div");
      span = element("span");
      span.textContent = "Save encounter as:";
      t1 = space();
      input = element("input");
      t2 = space();
      div3 = element("div");
      if (if_block)
        if_block.c();
      t3 = space();
      div1 = element("div");
      t4 = space();
      div2 = element("div");
      attr(input, "type", "text");
      attr(div0, "class", "saving-encounter svelte-1ud8n4x");
      attr(div1, "class", "save svelte-1ud8n4x");
      attr(div2, "class", "cancel svelte-1ud8n4x");
      attr(div3, "class", "save-buttons svelte-1ud8n4x");
      attr(div4, "class", "saving-container svelte-1ud8n4x");
    },
    m(target, anchor) {
      insert(target, div4, anchor);
      append(div4, div0);
      append(div0, span);
      append(div0, t1);
      append(div0, input);
      set_input_value(input, ctx[0]);
      append(div4, t2);
      append(div4, div3);
      if (if_block)
        if_block.m(div3, null);
      append(div3, t3);
      append(div3, div1);
      append(div3, t4);
      append(div3, div2);
      if (!mounted) {
        dispose = [
          listen(input, "input", ctx[6]),
          listen(input, "input", ctx[3]),
          action_destroyer(save_action = ctx[4].call(null, div1)),
          action_destroyer(cancel_action = ctx[5].call(null, div2))
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & 1 && input.value !== ctx2[0]) {
        set_input_value(input, ctx2[0]);
      }
      if (ctx2[1]) {
        if (if_block) {
        } else {
          if_block = create_if_block9(ctx2);
          if_block.c();
          if_block.m(div3, t3);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(div4);
      if (if_block)
        if_block.d();
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance12($$self, $$props, $$invalidate) {
  let $name;
  const { name: name2 } = tracker;
  component_subscribe($$self, name2, (value) => $$invalidate(9, $name = value));
  let encounterName = $name;
  const plugin = getContext("plugin");
  let saveButton;
  const checkSave = () => {
    if (encounterName?.length && saveButton.disabled) {
      saveButton.setDisabled(false);
    } else if (!encounterName?.length && !saveButton.disabled) {
      saveButton.setDisabled(true);
    }
  };
  let checking = false;
  const save = (node) => {
    saveButton = new import_obsidian18.ExtraButtonComponent(node).setIcon(SAVE).setDisabled(!(encounterName != void 0 && encounterName?.length > 0)).onClick(async () => {
      if (encounterName && encounterName in plugin.data.encounters && !checking) {
        $$invalidate(1, checking = true);
      } else {
        plugin.data.encounters[encounterName] = {
          ...tracker.getEncounterState(),
          name: encounterName
        };
        await plugin.saveSettings();
        dispatch2("cancel");
      }
    });
  };
  const dispatch2 = createEventDispatcher();
  const cancel = (node) => {
    new import_obsidian18.ExtraButtonComponent(node).setIcon("cross").onClick(() => {
      dispatch2("cancel");
    });
  };
  function input_input_handler() {
    encounterName = this.value;
    $$invalidate(0, encounterName);
  }
  return [encounterName, checking, name2, checkSave, save, cancel, input_input_handler];
}
var SaveEncounter = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance12, create_fragment12, safe_not_equal, {}, add_css11);
  }
};
var SaveEncounter_default = SaveEncounter;

// src/tracker/ui/LoadEncounter.svelte
var import_obsidian19 = require("obsidian");
function add_css12(target) {
  append_styles(target, "svelte-vsvyan", ".controls.svelte-vsvyan.svelte-vsvyan{display:flex;justify-content:space-between;align-items:center;border-bottom:1px solid var(--background-modifier-border)}.controls.svelte-vsvyan h4.svelte-vsvyan{margin:0}.loading-container.svelte-vsvyan.svelte-vsvyan{display:flex;flex-flow:column nowrap;gap:0.5rem;padding:0.5rem;height:100%}.loading-container.svelte-vsvyan .clickable-icon{margin:0}.encounter-container.svelte-vsvyan.svelte-vsvyan{height:100%;display:flex;flex-flow:column nowrap;gap:1rem;overflow-y:auto}.no-encounters.svelte-vsvyan.svelte-vsvyan{color:var(--text-muted);display:flex;justify-content:center}.encounter.svelte-vsvyan.svelte-vsvyan{display:flex;justify-content:space-between;align-items:center}.encounter-controls.svelte-vsvyan.svelte-vsvyan{display:flex;align-items:center;gap:1rem}");
}
function get_each_context7(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[7] = list[i];
  return child_ctx;
}
function create_if_block10(ctx) {
  let span;
  return {
    c() {
      span = element("span");
      span.innerHTML = `<em>There are no saved encounters.</em>`;
      attr(span, "class", "no-encounters svelte-vsvyan");
    },
    m(target, anchor) {
      insert(target, span, anchor);
    },
    d(detaching) {
      if (detaching)
        detach(span);
    }
  };
}
function create_each_block7(ctx) {
  let div3;
  let span;
  let t0_value = ctx[7] + "";
  let t0;
  let t1;
  let div2;
  let div0;
  let load_action;
  let t2;
  let div1;
  let trash_action;
  let t3;
  let mounted;
  let dispose;
  return {
    c() {
      div3 = element("div");
      span = element("span");
      t0 = text(t0_value);
      t1 = space();
      div2 = element("div");
      div0 = element("div");
      t2 = space();
      div1 = element("div");
      t3 = space();
      attr(div2, "class", "encounter-controls svelte-vsvyan");
      attr(div3, "class", "encounter svelte-vsvyan");
    },
    m(target, anchor) {
      insert(target, div3, anchor);
      append(div3, span);
      append(span, t0);
      append(div3, t1);
      append(div3, div2);
      append(div2, div0);
      append(div2, t2);
      append(div2, div1);
      append(div3, t3);
      if (!mounted) {
        dispose = [
          action_destroyer(load_action = ctx[3].call(null, div0, ctx[7])),
          action_destroyer(trash_action = ctx[4].call(null, div1, ctx[7]))
        ];
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (dirty & 1 && t0_value !== (t0_value = ctx[7] + ""))
        set_data(t0, t0_value);
      if (load_action && is_function(load_action.update) && dirty & 1)
        load_action.update.call(null, ctx[7]);
      if (trash_action && is_function(trash_action.update) && dirty & 1)
        trash_action.update.call(null, ctx[7]);
    },
    d(detaching) {
      if (detaching)
        detach(div3);
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_fragment13(ctx) {
  let div3;
  let div1;
  let h4;
  let t1;
  let div0;
  let cancel_action;
  let t2;
  let div2;
  let show_if = !ctx[0] || !Object.keys(ctx[0])?.length;
  let t3;
  let mounted;
  let dispose;
  let if_block = show_if && create_if_block10(ctx);
  let each_value = Object.keys(ctx[0]);
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block7(get_each_context7(ctx, each_value, i));
  }
  return {
    c() {
      div3 = element("div");
      div1 = element("div");
      h4 = element("h4");
      h4.textContent = "Load An Encounter";
      t1 = space();
      div0 = element("div");
      t2 = space();
      div2 = element("div");
      if (if_block)
        if_block.c();
      t3 = space();
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      attr(h4, "class", "svelte-vsvyan");
      attr(div1, "class", "controls svelte-vsvyan");
      attr(div2, "class", "encounter-container svelte-vsvyan");
      attr(div3, "class", "loading-container svelte-vsvyan");
    },
    m(target, anchor) {
      insert(target, div3, anchor);
      append(div3, div1);
      append(div1, h4);
      append(div1, t1);
      append(div1, div0);
      append(div3, t2);
      append(div3, div2);
      if (if_block)
        if_block.m(div2, null);
      append(div2, t3);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(div2, null);
      }
      if (!mounted) {
        dispose = [
          action_destroyer(cancel_action = ctx[2].call(null, div0)),
          listen(div0, "click", ctx[5])
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & 1)
        show_if = !ctx2[0] || !Object.keys(ctx2[0])?.length;
      if (show_if) {
        if (if_block) {
        } else {
          if_block = create_if_block10(ctx2);
          if_block.c();
          if_block.m(div2, t3);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
      if (dirty & 1) {
        each_value = Object.keys(ctx2[0]);
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context7(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block7(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(div2, null);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value.length;
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(div3);
      if (if_block)
        if_block.d();
      destroy_each(each_blocks, detaching);
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance13($$self, $$props, $$invalidate) {
  let encounters;
  const dispatch2 = createEventDispatcher();
  const plugin = getContext("plugin");
  const cancel = (node) => {
    new import_obsidian19.ExtraButtonComponent(node).setIcon("cross").setTooltip("Cancel");
  };
  const load = (node, encounter2) => {
    new import_obsidian19.ExtraButtonComponent(node).setIcon("open-elsewhere-glyph").setTooltip("Load Encounter").onClick(() => {
      tracker.new(encounters[encounter2]);
      dispatch2("cancel");
    });
  };
  const trash = (node, encounter2) => {
    new import_obsidian19.ExtraButtonComponent(node).setIcon("trash").setTooltip("Delete Encounter").onClick(() => {
      delete plugin.data.encounters[encounter2];
      $$invalidate(0, encounters = plugin.data.encounters);
    });
  };
  const click_handler3 = () => dispatch2("cancel");
  $:
    $$invalidate(0, encounters = plugin.data.encounters);
  return [encounters, dispatch2, cancel, load, trash, click_handler3];
}
var LoadEncounter = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance13, create_fragment13, safe_not_equal, {}, add_css12);
  }
};
var LoadEncounter_default = LoadEncounter;

// src/tracker/ui/App.svelte
var import_obsidian27 = require("obsidian");

// src/tracker/ui/Updating.svelte
var import_obsidian20 = require("obsidian");
function add_css13(target) {
  append_styles(target, "svelte-tmf1e6", ".input.svelte-tmf1e6{display:flex;align-items:center;gap:0.5rem}.left.svelte-tmf1e6{text-align:left}.center.svelte-tmf1e6{text-align:center}.updating-hp.svelte-tmf1e6{display:flex;flex-flow:column;gap:0.5rem}.updating-container.svelte-tmf1e6{display:flex;flex-flow:column nowrap;gap:0.5rem}.hp-status.svelte-tmf1e6{display:flex;flex-flow:column}.updating-buttons.svelte-tmf1e6{display:flex;justify-content:flex-end;gap:1rem;margin-right:1.2rem}");
}
function get_each_context8(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[24] = list[i][0];
  child_ctx[25] = list[i][1];
  child_ctx[26] = list;
  child_ctx[27] = i;
  return child_ctx;
}
function create_if_block11(ctx) {
  let div6;
  let div4;
  let div1;
  let t0;
  let div0;
  let tag0;
  let hpIcon_action;
  let t1;
  let input0;
  let init_action;
  let t2;
  let div3;
  let t3;
  let div2;
  let tag1;
  let tagIcon_action;
  let t4;
  let input1;
  let t5;
  let div5;
  let span0;
  let checkIcon_action;
  let t6;
  let span1;
  let cancelIcon_action;
  let t7;
  let t8;
  let div7;
  let table;
  let thead;
  let th0;
  let removeIcon_action;
  let t9;
  let th1;
  let t11;
  let th2;
  let t13;
  let th3;
  let t15;
  let th4;
  let t17;
  let tbody;
  let mounted;
  let dispose;
  let if_block0 = ctx[3].data.beginnerTips && create_if_block_34(ctx);
  let if_block1 = ctx[3].data.beginnerTips && create_if_block_26(ctx);
  let if_block2 = ctx[3].data.beginnerTips && create_if_block_17(ctx);
  let each_value = [...ctx[1].entries()];
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block8(get_each_context8(ctx, each_value, i));
  }
  return {
    c() {
      div6 = element("div");
      div4 = element("div");
      div1 = element("div");
      if (if_block0)
        if_block0.c();
      t0 = space();
      div0 = element("div");
      tag0 = element("tag");
      t1 = space();
      input0 = element("input");
      t2 = space();
      div3 = element("div");
      if (if_block1)
        if_block1.c();
      t3 = space();
      div2 = element("div");
      tag1 = element("tag");
      t4 = space();
      input1 = element("input");
      t5 = space();
      div5 = element("div");
      span0 = element("span");
      t6 = space();
      span1 = element("span");
      t7 = space();
      if (if_block2)
        if_block2.c();
      t8 = space();
      div7 = element("div");
      table = element("table");
      thead = element("thead");
      th0 = element("th");
      t9 = space();
      th1 = element("th");
      th1.textContent = "Name";
      t11 = space();
      th2 = element("th");
      th2.textContent = "Saved";
      t13 = space();
      th3 = element("th");
      th3.textContent = "Resist";
      t15 = space();
      th4 = element("th");
      th4.textContent = "Modifier";
      t17 = space();
      tbody = element("tbody");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      attr(tag0, "aria-label", "Apply damage, healing(-) or temp HP(t)");
      set_style(tag0, "margin", "0 0.2rem 0 0.7rem");
      attr(input0, "type", "text");
      attr(div0, "class", "input svelte-tmf1e6");
      attr(div1, "class", "hp-status svelte-tmf1e6");
      attr(tag1, "aria-label", "Apply status effect to creatures that fail their saving throw");
      set_style(tag1, "margin", "0 0.2rem 0 0.7rem");
      attr(input1, "type", "text");
      attr(div2, "class", "input svelte-tmf1e6");
      attr(div3, "class", "hp-status svelte-tmf1e6");
      attr(div4, "class", "updating-hp svelte-tmf1e6");
      set_style(span0, "cursor", "pointer");
      attr(span0, "aria-label", "Apply");
      set_style(span1, "cursor", "pointer");
      attr(span1, "aria-label", "Cancel");
      attr(div5, "class", "updating-buttons svelte-tmf1e6");
      attr(div6, "class", "updating-container svelte-tmf1e6");
      set_style(th0, "padding", "0 0.2rem 0 0");
      set_style(th0, "cursor", "pointer");
      attr(th0, "class", "left svelte-tmf1e6");
      set_style(th1, "width", "100%");
      attr(th1, "class", "left svelte-tmf1e6");
      set_style(th2, "padding", "0 0.2rem");
      attr(th2, "class", "center svelte-tmf1e6");
      set_style(th3, "padding", "0 0.2rem");
      attr(th3, "class", "center svelte-tmf1e6");
      set_style(th4, "padding", "0 0.2rem");
      attr(th4, "class", "center svelte-tmf1e6");
      attr(thead, "class", "updating-creature-table-header");
      attr(table, "class", "updating-creature-table");
      set_style(div7, "margin", "0.5rem");
    },
    m(target, anchor) {
      insert(target, div6, anchor);
      append(div6, div4);
      append(div4, div1);
      if (if_block0)
        if_block0.m(div1, null);
      append(div1, t0);
      append(div1, div0);
      append(div0, tag0);
      append(div0, t1);
      append(div0, input0);
      set_input_value(input0, ctx[0]);
      append(div4, t2);
      append(div4, div3);
      if (if_block1)
        if_block1.m(div3, null);
      append(div3, t3);
      append(div3, div2);
      append(div2, tag1);
      append(div2, t4);
      append(div2, input1);
      append(div6, t5);
      append(div6, div5);
      append(div5, span0);
      append(div5, t6);
      append(div5, span1);
      insert(target, t7, anchor);
      if (if_block2)
        if_block2.m(target, anchor);
      insert(target, t8, anchor);
      insert(target, div7, anchor);
      append(div7, table);
      append(table, thead);
      append(thead, th0);
      append(thead, t9);
      append(thead, th1);
      append(thead, t11);
      append(thead, th2);
      append(thead, t13);
      append(thead, th3);
      append(thead, t15);
      append(thead, th4);
      append(table, t17);
      append(table, tbody);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(tbody, null);
      }
      if (!mounted) {
        dispose = [
          action_destroyer(hpIcon_action = ctx[4].call(null, tag0)),
          listen(input0, "input", ctx[11]),
          listen(input0, "keydown", ctx[12]),
          action_destroyer(init_action = init2.call(null, input0)),
          action_destroyer(tagIcon_action = ctx[5].call(null, tag1)),
          listen(input1, "focus", ctx[13]),
          listen(input1, "keydown", ctx[14]),
          action_destroyer(checkIcon_action = ctx[7].call(null, span0)),
          listen(span0, "click", ctx[15]),
          action_destroyer(cancelIcon_action = ctx[8].call(null, span1)),
          listen(span1, "click", ctx[16]),
          action_destroyer(removeIcon_action = ctx[6].call(null, th0)),
          listen(th0, "click", ctx[17])
        ];
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (dirty & 1 && input0.value !== ctx2[0]) {
        set_input_value(input0, ctx2[0]);
      }
      if (dirty & 2) {
        each_value = [...ctx2[1].entries()];
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context8(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block8(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(tbody, null);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value.length;
      }
    },
    d(detaching) {
      if (detaching)
        detach(div6);
      if (if_block0)
        if_block0.d();
      if (if_block1)
        if_block1.d();
      if (detaching)
        detach(t7);
      if (if_block2)
        if_block2.d(detaching);
      if (detaching)
        detach(t8);
      if (detaching)
        detach(div7);
      destroy_each(each_blocks, detaching);
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_if_block_34(ctx) {
  let small;
  return {
    c() {
      small = element("small");
      small.textContent = "Apply damage, healing(-) or temp HP(t)";
      attr(small, "class", "label");
    },
    m(target, anchor) {
      insert(target, small, anchor);
    },
    d(detaching) {
      if (detaching)
        detach(small);
    }
  };
}
function create_if_block_26(ctx) {
  let small;
  return {
    c() {
      small = element("small");
      small.textContent = "Apply status effect to creatures that fail their saving\n                        throw";
      attr(small, "class", "label");
    },
    m(target, anchor) {
      insert(target, small, anchor);
    },
    d(detaching) {
      if (detaching)
        detach(small);
    }
  };
}
function create_if_block_17(ctx) {
  let div;
  return {
    c() {
      div = element("div");
      div.innerHTML = `<small>Multiple creatures can be selected at a time.</small>`;
    },
    m(target, anchor) {
      insert(target, div, anchor);
    },
    d(detaching) {
      if (detaching)
        detach(div);
    }
  };
}
function create_each_block8(ctx) {
  let tr;
  let td0;
  let removeIcon_action;
  let t0;
  let td1;
  let span;
  let t1_value = ctx[24].name + (ctx[24].number ? " " + ctx[24].number : "");
  let t1;
  let t2;
  let td2;
  let input0;
  let input0_checked_value;
  let t3;
  let td3;
  let input1;
  let input1_checked_value;
  let t4;
  let td4;
  let input2;
  let t5;
  let mounted;
  let dispose;
  function click_handler_32(...args) {
    return ctx[18](ctx[24], ...args);
  }
  function click_handler_42(...args) {
    return ctx[19](ctx[25], ctx[26], ctx[27], ...args);
  }
  function click_handler_5(...args) {
    return ctx[20](ctx[25], ctx[26], ctx[27], ...args);
  }
  function input2_input_handler() {
    ctx[21].call(input2, ctx[26], ctx[27]);
  }
  return {
    c() {
      tr = element("tr");
      td0 = element("td");
      t0 = space();
      td1 = element("td");
      span = element("span");
      t1 = text(t1_value);
      t2 = space();
      td2 = element("td");
      input0 = element("input");
      t3 = space();
      td3 = element("td");
      input1 = element("input");
      t4 = space();
      td4 = element("td");
      input2 = element("input");
      t5 = space();
      set_style(td0, "cursor", "pointer");
      attr(input0, "type", "checkbox");
      input0.checked = input0_checked_value = ctx[25].saved;
      attr(td2, "class", "center svelte-tmf1e6");
      attr(input1, "type", "checkbox");
      input1.checked = input1_checked_value = ctx[25].resist;
      attr(td3, "class", "center svelte-tmf1e6");
      attr(input2, "type", "number");
      attr(input2, "class", "center svelte-tmf1e6");
      set_style(input2, "width", "90%");
      set_style(input2, "height", "80%");
      set_style(input2, "padding", "0");
      attr(td4, "class", "center svelte-tmf1e6");
      attr(tr, "class", "updating-creature-table-row");
    },
    m(target, anchor) {
      insert(target, tr, anchor);
      append(tr, td0);
      append(tr, t0);
      append(tr, td1);
      append(td1, span);
      append(span, t1);
      append(tr, t2);
      append(tr, td2);
      append(td2, input0);
      append(tr, t3);
      append(tr, td3);
      append(td3, input1);
      append(tr, t4);
      append(tr, td4);
      append(td4, input2);
      set_input_value(input2, ctx[25].customMod);
      append(tr, t5);
      if (!mounted) {
        dispose = [
          action_destroyer(removeIcon_action = ctx[6].call(null, td0)),
          listen(td0, "click", click_handler_32),
          listen(input0, "click", click_handler_42),
          listen(input1, "click", click_handler_5),
          listen(input2, "input", input2_input_handler),
          listen(input2, "keydown", keydown_handler_2)
        ];
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (dirty & 2 && t1_value !== (t1_value = ctx[24].name + (ctx[24].number ? " " + ctx[24].number : "")))
        set_data(t1, t1_value);
      if (dirty & 2 && input0_checked_value !== (input0_checked_value = ctx[25].saved)) {
        input0.checked = input0_checked_value;
      }
      if (dirty & 2 && input1_checked_value !== (input1_checked_value = ctx[25].resist)) {
        input1.checked = input1_checked_value;
      }
      if (dirty & 2 && to_number(input2.value) !== ctx[25].customMod) {
        set_input_value(input2, ctx[25].customMod);
      }
    },
    d(detaching) {
      if (detaching)
        detach(tr);
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_fragment14(ctx) {
  let if_block_anchor;
  let if_block = ctx[1].size && create_if_block11(ctx);
  return {
    c() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
    },
    p(ctx2, [dirty]) {
      if (ctx2[1].size) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block11(ctx2);
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (if_block)
        if_block.d(detaching);
      if (detaching)
        detach(if_block_anchor);
    }
  };
}
function init2(el) {
  el.focus();
}
var keydown_handler_2 = function(evt) {
  if (evt.key === "Escape") {
    this.value = "1";
    return;
  }
  if (evt.key === "Enter") {
    evt.preventDefault();
    return;
  }
};
function instance14($$self, $$props, $$invalidate) {
  let $updating;
  const { updating } = tracker;
  component_subscribe($$self, updating, (value) => $$invalidate(1, $updating = value));
  const plugin = getContext("plugin");
  const hpIcon = (node) => {
    (0, import_obsidian20.setIcon)(node, HP);
  };
  const tagIcon = (node) => {
    (0, import_obsidian20.setIcon)(node, TAG);
  };
  const removeIcon = (node) => {
    (0, import_obsidian20.setIcon)(node, REMOVE);
  };
  const checkIcon = (node) => {
    (0, import_obsidian20.setIcon)(node, "check");
  };
  const cancelIcon = (node) => {
    (0, import_obsidian20.setIcon)(node, "cross-in-box");
  };
  let damage = "";
  let status = null;
  let modal;
  const suggestConditions = (node) => {
    modal = new ConditionSuggestionModal(plugin, node);
    modal.onClose = () => {
      status = modal.condition;
      node.focus();
    };
    modal.open();
  };
  const performUpdate = (perform) => {
    if (perform) {
      tracker.doUpdate(damage ?? "", status);
    } else {
      tracker.clearUpdate();
    }
    $$invalidate(0, damage = null);
    status = null;
    return;
  };
  function input0_input_handler() {
    damage = this.value;
    $$invalidate(0, damage);
  }
  const keydown_handler2 = function(evt) {
    if (evt.key == "Tab") {
      return true;
    }
    if (evt.key == "Enter" || evt.key == "Escape") {
      performUpdate(evt.key == "Enter");
      return;
    }
    if (!/^(t?-?\d*\.?\d*(Backspace|Delete|Arrow\w+)?)$/.test(this.value + evt.key)) {
      evt.preventDefault();
      return false;
    }
  };
  const focus_handler = function(evt) {
    suggestConditions(this);
  };
  const keydown_handler_1 = function(evt) {
    if (["Enter", "Escape"].includes(evt.key)) {
      performUpdate(evt.key == "Enter");
    }
  };
  const click_handler3 = () => performUpdate(true);
  const click_handler_12 = () => performUpdate(false);
  const click_handler_2 = () => performUpdate(false);
  const click_handler_32 = function(creature, evt) {
    tracker.setUpdate(creature, evt);
  };
  const click_handler_42 = function(update2, each_value, i, evt) {
    set_store_value(updating, each_value[i][1].saved = !update2.saved, $updating);
  };
  const click_handler_5 = function(update2, each_value, i, evt) {
    set_store_value(updating, each_value[i][1].resist = !update2.resist, $updating);
  };
  function input2_input_handler(each_value, i) {
    each_value[i][1].customMod = to_number(this.value);
  }
  return [
    damage,
    $updating,
    updating,
    plugin,
    hpIcon,
    tagIcon,
    removeIcon,
    checkIcon,
    cancelIcon,
    suggestConditions,
    performUpdate,
    input0_input_handler,
    keydown_handler2,
    focus_handler,
    keydown_handler_1,
    click_handler3,
    click_handler_12,
    click_handler_2,
    click_handler_32,
    click_handler_42,
    click_handler_5,
    input2_input_handler
  ];
}
var Updating = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance14, create_fragment14, safe_not_equal, {}, add_css13);
  }
};
var Updating_default = Updating;

// src/logger/logger.ts
var import_obsidian21 = require("obsidian");
var Logger = class {
  constructor(plugin) {
    this.plugin = plugin;
    this.logging = false;
  }
  async setLogFile(logFile) {
    this.logFile = logFile;
    this.logging = true;
    await this.setFile();
  }
  getLogFile() {
    return this.logFile ? (0, import_obsidian21.normalizePath)(this.logFile) : "";
  }
  async setFile() {
    const file = await this.adapter.exists((0, import_obsidian21.normalizePath)(this.logFile)) ? await this.vault.getAbstractFileByPath(
      (0, import_obsidian21.normalizePath)(this.logFile)
    ) : await this.vault.create(this.logFile, ``);
    if (file instanceof import_obsidian21.TFile) {
      this.file = file;
    }
  }
  getFile() {
    return this.file;
  }
  get enabled() {
    return this.plugin.data.logging;
  }
  get folder() {
    return this.plugin.data.logFolder;
  }
  get vault() {
    return this.plugin.app.vault;
  }
  get adapter() {
    return this.plugin.app.vault.adapter;
  }
  async new(param) {
    if (!this.enabled)
      return;
    if (typeof param == "string") {
      await this.setLogFile(param);
    } else {
      await this.setLogFile(
        `${this.folder}/${Date.now()} - ${param.name ?? "Combat"}.md`
      );
      await this.log(
        `**Combat started ${new Date().toLocaleString()}**

`
      );
      await this.log("## Players");
      await this.log("| Player | Initiative | HP | Statuses |");
      await this.log("| --- | :-: | :-: | :-: |");
      for (const player of param.players.sort(
        (a, b) => b.initiative - a.initiative
      )) {
        await this.log(
          "|",
          player.getName().replace("|", "\\|"),
          "|",
          player.initiative.toString(),
          "|",
          player.hp ? `${player.hp}/${player.max}` : "-",
          "|",
          [...player.status.size ? player.status : ["-"]].join(", ").replace("|", "\\|"),
          "|"
        );
      }
      await this.log("## Creatures");
      await this.log("| Creature | Initiative  | HP | Statuses |");
      await this.log("| --- | :-: | :-: | :-: |");
      for (const creature of param.creatures.sort(
        (a, b) => b.initiative - a.initiative
      )) {
        await this.log(
          "|",
          creature.getName().replace("|", "\\|"),
          "|",
          creature.initiative.toString(),
          "|",
          creature.hp ? `${creature.hp}/${creature.max}` : "-",
          "|",
          [...creature.status.size ? creature.status : ["-"]].join(", ").replace("|", "\\|"),
          "|"
        );
      }
      await this.log("\n\n## Combat Log");
      await this.log("\n### Round 1");
      await this.log(
        `
##### ${tracker.getOrderedCreatures()[0].getName()}'s turn`
      );
    }
  }
  async log(...msg) {
    if (!this.enabled)
      return;
    if (!this.file)
      return;
    if (!await this.adapter.exists(this.logFile)) {
      await this.setLogFile(this.logFile);
    }
    await this.vault.append(this.file, `${msg.join(" ")}
`);
  }
  join(strings, joiner = "and") {
    if (strings.length == 1) {
      return strings[0];
    }
    return `${strings.slice(0, -1).join(", ")} ${joiner} ${strings.slice(
      -1
    )}`;
  }
  logUpdate(messages) {
    const toLog = [];
    for (const message of messages) {
      const perCreature = [];
      if (message.hp) {
        if (message.temp) {
          perCreature.push(
            `${message.name} gained ${message.hp.toString()} temporary HP`
          );
        } else if (message.hp < 0) {
          perCreature.push(
            `${message.name} took ${(-1 * message.hp).toString()} damage${message.unc ? " and was knocked unconscious" : ""}`
          );
        } else if (message.hp > 0) {
          perCreature.push(
            `${message.name} was healed for ${message.hp.toString()} HP`
          );
        }
      }
      if (message.status) {
        if (perCreature.length) {
          perCreature.push("and");
        } else {
          perCreature.push(message.name);
        }
        if (message.saved) {
          perCreature.push(`saved against ${message.status}`);
        } else {
          perCreature.push(`took ${message.status} status`);
        }
      }
      toLog.push(perCreature.join(" "));
    }
    this.log(`${toLog.join(". ")}.`);
  }
};

// src/tracker/ui/create/modal.ts
var import_obsidian25 = require("obsidian");

// src/tracker/ui/create/Creator.svelte
var import_obsidian24 = require("obsidian");

// src/tracker/ui/create/Create.svelte
var import_obsidian22 = require("obsidian");
function add_css14(target) {
  append_styles(target, "svelte-1rjv45j", ".create-new.svelte-1rjv45j>.svelte-1rjv45j{display:grid;grid-template-columns:33% 66%;margin-bottom:0.5rem}.context-buttons.svelte-1rjv45j.svelte-1rjv45j{display:flex;justify-content:flex-end;align-items:center;grid-gap:0.125rem}.cancel-button.svelte-1rjv45j.svelte-1rjv45j{color:var(--text-faint)}.initiative.svelte-1rjv45j.svelte-1rjv45j{position:relative}.initiative.svelte-1rjv45j>.dice.svelte-1rjv45j{position:absolute;right:0.25rem;top:50%;transform:translateY(-50%)}");
}
function create_else_block7(ctx) {
  let div;
  let saveButton_action;
  let mounted;
  let dispose;
  return {
    c() {
      div = element("div");
      attr(div, "class", "add-button");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (!mounted) {
        dispose = action_destroyer(saveButton_action = ctx[7].call(null, div));
        mounted = true;
      }
    },
    d(detaching) {
      if (detaching)
        detach(div);
      mounted = false;
      dispose();
    }
  };
}
function create_if_block12(ctx) {
  let div;
  let editButton_action;
  let mounted;
  let dispose;
  return {
    c() {
      div = element("div");
      attr(div, "class", "add-button");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (!mounted) {
        dispose = action_destroyer(editButton_action = ctx[8].call(null, div));
        mounted = true;
      }
    },
    d(detaching) {
      if (detaching)
        detach(div);
      mounted = false;
      dispose();
    }
  };
}
function create_fragment15(ctx) {
  let div13;
  let div10;
  let div0;
  let label0;
  let t1;
  let input0;
  let t2;
  let div1;
  let label1;
  let t4;
  let input1;
  let t5;
  let div2;
  let label2;
  let t7;
  let input2;
  let t8;
  let div3;
  let label3;
  let t10;
  let input3;
  let t11;
  let div4;
  let label4;
  let t13;
  let input4;
  let t14;
  let div6;
  let label5;
  let t16;
  let input5;
  let t17;
  let div5;
  let diceButton_action;
  let t18;
  let div8;
  let label6;
  let t20;
  let div7;
  let hideToggle_action;
  let t21;
  let div9;
  let label7;
  let t23;
  let input6;
  let t24;
  let div12;
  let div11;
  let cancelButton_action;
  let t25;
  let mounted;
  let dispose;
  function select_block_type(ctx2, dirty) {
    if (ctx2[6])
      return create_if_block12;
    return create_else_block7;
  }
  let current_block_type = select_block_type(ctx, -1);
  let if_block = current_block_type(ctx);
  return {
    c() {
      div13 = element("div");
      div10 = element("div");
      div0 = element("div");
      label0 = element("label");
      label0.textContent = "Creature";
      t1 = space();
      input0 = element("input");
      t2 = space();
      div1 = element("div");
      label1 = element("label");
      label1.textContent = "Display Name";
      t4 = space();
      input1 = element("input");
      t5 = space();
      div2 = element("div");
      label2 = element("label");
      label2.textContent = "HP";
      t7 = space();
      input2 = element("input");
      t8 = space();
      div3 = element("div");
      label3 = element("label");
      label3.textContent = "AC";
      t10 = space();
      input3 = element("input");
      t11 = space();
      div4 = element("div");
      label4 = element("label");
      label4.textContent = "Modifier";
      t13 = space();
      input4 = element("input");
      t14 = space();
      div6 = element("div");
      label5 = element("label");
      label5.textContent = "Initiative";
      t16 = space();
      input5 = element("input");
      t17 = space();
      div5 = element("div");
      t18 = space();
      div8 = element("div");
      label6 = element("label");
      label6.textContent = "Hidden";
      t20 = space();
      div7 = element("div");
      t21 = space();
      div9 = element("div");
      label7 = element("label");
      label7.textContent = "Amount";
      t23 = space();
      input6 = element("input");
      t24 = space();
      div12 = element("div");
      div11 = element("div");
      t25 = space();
      if_block.c();
      attr(label0, "for", "add-name");
      attr(input0, "id", "add-name");
      attr(input0, "type", "text");
      attr(input0, "name", "name");
      attr(input0, "tabindex", "0");
      attr(div0, "class", "svelte-1rjv45j");
      attr(label1, "for", "add-display");
      attr(input1, "id", "add-display");
      attr(input1, "type", "text");
      attr(input1, "name", "display");
      attr(input1, "tabindex", "0");
      attr(div1, "class", "svelte-1rjv45j");
      attr(label2, "for", "add-hp");
      attr(input2, "id", "add-hp");
      attr(input2, "type", "number");
      attr(input2, "name", "hp");
      attr(input2, "tabindex", "0");
      attr(div2, "class", "svelte-1rjv45j");
      attr(label3, "for", "add-ac");
      attr(input3, "id", "add-ac");
      attr(input3, "type", "number");
      attr(input3, "name", "ac");
      attr(input3, "tabindex", "0");
      attr(div3, "class", "svelte-1rjv45j");
      attr(label4, "for", "add-mod");
      attr(input4, "id", "add-mod");
      attr(input4, "type", "number");
      attr(input4, "name", "ac");
      attr(input4, "tabindex", "0");
      attr(div4, "class", "svelte-1rjv45j");
      attr(label5, "for", "add-init");
      attr(input5, "id", "add-init");
      attr(input5, "type", "number");
      attr(input5, "name", "initiative");
      attr(input5, "tabindex", "0");
      attr(div5, "class", "dice svelte-1rjv45j");
      attr(div6, "class", "initiative svelte-1rjv45j");
      attr(label6, "for", "add-mod");
      attr(div8, "class", "svelte-1rjv45j");
      attr(label7, "for", "add-init");
      attr(input6, "id", "add-init");
      attr(input6, "type", "number");
      attr(input6, "name", "initiative");
      attr(input6, "tabindex", "0");
      attr(div9, "class", "amount svelte-1rjv45j");
      attr(div10, "class", "create-new svelte-1rjv45j");
      attr(div11, "class", "add-button cancel-button svelte-1rjv45j");
      attr(div12, "class", "context-buttons svelte-1rjv45j");
      attr(div13, "class", "initiative-tracker-editor");
    },
    m(target, anchor) {
      insert(target, div13, anchor);
      append(div13, div10);
      append(div10, div0);
      append(div0, label0);
      append(div0, t1);
      append(div0, input0);
      ctx[13](input0);
      set_input_value(input0, ctx[3].name);
      append(div10, t2);
      append(div10, div1);
      append(div1, label1);
      append(div1, t4);
      append(div1, input1);
      set_input_value(input1, ctx[3].display);
      append(div10, t5);
      append(div10, div2);
      append(div2, label2);
      append(div2, t7);
      append(div2, input2);
      set_input_value(input2, ctx[3].hp);
      append(div10, t8);
      append(div10, div3);
      append(div3, label3);
      append(div3, t10);
      append(div3, input3);
      set_input_value(input3, ctx[3].ac);
      append(div10, t11);
      append(div10, div4);
      append(div4, label4);
      append(div4, t13);
      append(div4, input4);
      set_input_value(input4, ctx[3].modifier);
      append(div10, t14);
      append(div10, div6);
      append(div6, label5);
      append(div6, t16);
      append(div6, input5);
      set_input_value(input5, ctx[3].initiative);
      append(div6, t17);
      append(div6, div5);
      append(div10, t18);
      append(div10, div8);
      append(div8, label6);
      append(div8, t20);
      append(div8, div7);
      append(div10, t21);
      append(div10, div9);
      append(div9, label7);
      append(div9, t23);
      append(div9, input6);
      set_input_value(input6, ctx[0]);
      append(div13, t24);
      append(div13, div12);
      append(div12, div11);
      append(div12, t25);
      if_block.m(div12, null);
      if (!mounted) {
        dispose = [
          listen(input0, "input", ctx[14]),
          listen(input0, "focus", ctx[15]),
          listen(input1, "input", ctx[16]),
          listen(input2, "input", ctx[17]),
          listen(input3, "input", ctx[18]),
          listen(input4, "input", ctx[19]),
          listen(input5, "input", ctx[20]),
          action_destroyer(diceButton_action = ctx[10].call(null, div5)),
          action_destroyer(hideToggle_action = ctx[11].call(null, div7)),
          listen(input6, "input", ctx[21]),
          action_destroyer(cancelButton_action = ctx[9].call(null, div11))
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & 8 && input0.value !== ctx2[3].name) {
        set_input_value(input0, ctx2[3].name);
      }
      if (dirty & 8 && input1.value !== ctx2[3].display) {
        set_input_value(input1, ctx2[3].display);
      }
      if (dirty & 8 && to_number(input2.value) !== ctx2[3].hp) {
        set_input_value(input2, ctx2[3].hp);
      }
      if (dirty & 8 && to_number(input3.value) !== ctx2[3].ac) {
        set_input_value(input3, ctx2[3].ac);
      }
      if (dirty & 8 && to_number(input4.value) !== ctx2[3].modifier) {
        set_input_value(input4, ctx2[3].modifier);
      }
      if (dirty & 8 && to_number(input5.value) !== ctx2[3].initiative) {
        set_input_value(input5, ctx2[3].initiative);
      }
      if (dirty & 1 && to_number(input6.value) !== ctx2[0]) {
        set_input_value(input6, ctx2[0]);
      }
      if (current_block_type !== (current_block_type = select_block_type(ctx2, dirty))) {
        if_block.d(1);
        if_block = current_block_type(ctx2);
        if (if_block) {
          if_block.c();
          if_block.m(div12, null);
        }
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(div13);
      ctx[13](null);
      if_block.d();
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance15($$self, $$props, $$invalidate) {
  let $editing, $$unsubscribe_editing = noop, $$subscribe_editing = () => ($$unsubscribe_editing(), $$unsubscribe_editing = subscribe(editing, ($$value) => $$invalidate(6, $editing = $$value)), editing);
  let $adding, $$unsubscribe_adding = noop, $$subscribe_adding = () => ($$unsubscribe_adding(), $$unsubscribe_adding = subscribe(adding, ($$value) => $$invalidate(22, $adding = $$value)), adding);
  $$self.$$.on_destroy.push(() => $$unsubscribe_editing());
  $$self.$$.on_destroy.push(() => $$unsubscribe_adding());
  const dispatch2 = createEventDispatcher();
  let creature = new Creature({});
  let { amount = 1 } = $$props;
  let { plugin } = $$props;
  let { adding } = $$props;
  $$subscribe_adding();
  let { editing } = $$props;
  $$subscribe_editing();
  editing.subscribe((c) => {
    if (!c)
      return;
    $$invalidate(3, creature = c);
  });
  const saveButton = (node) => {
    new import_obsidian22.ExtraButtonComponent(node).setTooltip("Add Creature").setIcon("plus").onClick(async () => {
      if (!creature || !creature.name || !creature.name?.length) {
        new import_obsidian22.Notice("Enter a name!");
        return;
      }
      if (!creature.modifier) {
        $$invalidate(3, creature.modifier = 0, creature);
      }
      if (creature.initiative <= 0 || creature.initiative == null || isNaN(creature.initiative)) {
        $$invalidate(3, creature.initiative = await plugin.getInitiativeValue(creature.modifier), creature);
      }
      let existing = $adding.findIndex(([k]) => equivalent(k, creature));
      if (existing > -1) {
        set_store_value(adding, $adding[existing][1] += amount, $adding);
      } else {
        $adding.push([creature, amount]);
      }
      adding.set($adding);
      set_store_value(editing, $editing = null, $editing);
      $$invalidate(3, creature = new Creature({}));
    });
  };
  const editButton = (node) => {
    new import_obsidian22.ExtraButtonComponent(node).setTooltip("Add Creature").setIcon("save").onClick(async () => {
      if (!creature || !creature.name || !creature.name?.length) {
        new import_obsidian22.Notice("Enter a name!");
        return;
      }
      if (!creature.modifier) {
        $$invalidate(3, creature.modifier = 0, creature);
      }
      if (creature.initiative <= 0 || creature.initiative == null || isNaN(creature.initiative)) {
        $$invalidate(3, creature.initiative = await plugin.getInitiativeValue(creature.modifier), creature);
      }
      let existing = $adding.findIndex(([k]) => k != creature && equivalent(k, creature));
      if (existing > -1 && await confirmWithModal2(app, `This will merge ${creature.name} with ${$adding[existing][0].name}.`)) {
        const index = $adding.findIndex(([k]) => k == creature);
        set_store_value(adding, $adding[existing][1] += $adding[index][1], $adding);
        $adding.splice(index, 1);
      }
      adding.set($adding);
      set_store_value(editing, $editing = null, $editing);
      $$invalidate(3, creature = new Creature({}));
    });
  };
  const cancelButton = (node) => {
    new import_obsidian22.ExtraButtonComponent(node).setTooltip("Cancel").setIcon("reset").onClick(() => {
      $$invalidate(3, creature = new Creature({}));
    });
  };
  const diceButton = (node) => {
    new import_obsidian22.ExtraButtonComponent(node).setIcon(DICE).setTooltip("Roll Initiative").onClick(async () => {
      $$invalidate(3, creature.initiative = await plugin.getInitiativeValue(creature.modifier), creature);
    });
  };
  let nameInput;
  let modal;
  onMount(() => {
    $$invalidate(5, modal = new SRDMonsterSuggestionModal(plugin, nameInput));
    $$invalidate(
      5,
      modal.onClose = async () => {
        if (modal.creature) {
          $$invalidate(3, creature = Creature.from(modal.creature));
          $$invalidate(3, creature.initiative = await plugin.getInitiativeValue(creature.modifier), creature);
        }
      },
      modal
    );
  });
  const hideToggle = (div) => {
    new import_obsidian22.ToggleComponent(div).setValue(creature.hidden).onChange((v) => $$invalidate(3, creature.hidden = v, creature));
  };
  function input0_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      nameInput = $$value;
      $$invalidate(4, nameInput);
    });
  }
  function input0_input_handler() {
    creature.name = this.value;
    $$invalidate(3, creature);
  }
  const focus_handler = function() {
    modal.open();
  };
  function input1_input_handler() {
    creature.display = this.value;
    $$invalidate(3, creature);
  }
  function input2_input_handler() {
    creature.hp = to_number(this.value);
    $$invalidate(3, creature);
  }
  function input3_input_handler() {
    creature.ac = to_number(this.value);
    $$invalidate(3, creature);
  }
  function input4_input_handler() {
    creature.modifier = to_number(this.value);
    $$invalidate(3, creature);
  }
  function input5_input_handler() {
    creature.initiative = to_number(this.value);
    $$invalidate(3, creature);
  }
  function input6_input_handler() {
    amount = to_number(this.value);
    $$invalidate(0, amount);
  }
  $$self.$$set = ($$props2) => {
    if ("amount" in $$props2)
      $$invalidate(0, amount = $$props2.amount);
    if ("plugin" in $$props2)
      $$invalidate(12, plugin = $$props2.plugin);
    if ("adding" in $$props2)
      $$subscribe_adding($$invalidate(1, adding = $$props2.adding));
    if ("editing" in $$props2)
      $$subscribe_editing($$invalidate(2, editing = $$props2.editing));
  };
  return [
    amount,
    adding,
    editing,
    creature,
    nameInput,
    modal,
    $editing,
    saveButton,
    editButton,
    cancelButton,
    diceButton,
    hideToggle,
    plugin,
    input0_binding,
    input0_input_handler,
    focus_handler,
    input1_input_handler,
    input2_input_handler,
    input3_input_handler,
    input4_input_handler,
    input5_input_handler,
    input6_input_handler
  ];
}
var Create = class extends SvelteComponent {
  constructor(options) {
    super();
    init(
      this,
      options,
      instance15,
      create_fragment15,
      safe_not_equal,
      {
        amount: 0,
        plugin: 12,
        adding: 1,
        editing: 2
      },
      add_css14
    );
  }
};
var Create_default = Create;

// src/tracker/ui/create/List.svelte
var import_obsidian23 = require("obsidian");
function add_css15(target) {
  append_styles(target, "svelte-cpu15", ".initiative-tracker-list.svelte-cpu15{display:flex;flex-flow:column nowrap;gap:0.5rem}.creature.svelte-cpu15{border-radius:0.5rem;padding:0.5rem}.creature.svelte-cpu15:hover{background-color:var(--background-secondary)}.creature-metadata.svelte-cpu15{display:flex;align-items:center;gap:0.5rem}.creature-amount.svelte-cpu15{margin-left:auto;display:grid;grid-template-columns:1fr 1fr 1fr 1fr;align-items:center;text-align:center}.creature-data.svelte-cpu15{--icon-size:10px;display:flex;align-items:center;gap:0.375rem}");
}
function get_each_context9(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[18] = list[i][0];
  child_ctx[19] = list[i][1];
  child_ctx[21] = i;
  return child_ctx;
}
function create_else_block8(ctx) {
  let span;
  return {
    c() {
      span = element("span");
      span.textContent = "Add a creature.";
    },
    m(target, anchor) {
      insert(target, span, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching)
        detach(span);
    }
  };
}
function create_if_block13(ctx) {
  let each_1_anchor;
  let each_value = ctx[2];
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block9(get_each_context9(ctx, each_value, i));
  }
  return {
    c() {
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      each_1_anchor = empty();
    },
    m(target, anchor) {
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(target, anchor);
      }
      insert(target, each_1_anchor, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & 684) {
        each_value = ctx2[2];
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context9(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block9(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value.length;
      }
    },
    d(detaching) {
      destroy_each(each_blocks, detaching);
      if (detaching)
        detach(each_1_anchor);
    }
  };
}
function create_if_block_18(ctx) {
  let span;
  let hidden_action;
  let mounted;
  let dispose;
  return {
    c() {
      span = element("span");
    },
    m(target, anchor) {
      insert(target, span, anchor);
      if (!mounted) {
        dispose = action_destroyer(hidden_action = ctx[13].call(null, span));
        mounted = true;
      }
    },
    d(detaching) {
      if (detaching)
        detach(span);
      mounted = false;
      dispose();
    }
  };
}
function create_each_block9(ctx) {
  let div7;
  let div6;
  let div0;
  let t0_value = ctx[18].getName() + "";
  let t0;
  let t1;
  let div5;
  let div1;
  let minusIcon_action;
  let t2;
  let div2;
  let t3_value = ctx[19] + "";
  let t3;
  let t4;
  let div3;
  let plusIcon_action;
  let t5;
  let div4;
  let delIcon_action;
  let t6;
  let small;
  let span1;
  let t7_value = ctx[18].hp + "";
  let t7;
  let t8;
  let span0;
  let heart_action;
  let t9;
  let span3;
  let t10_value = ctx[18].ac + "";
  let t10;
  let t11;
  let span2;
  let ac_action;
  let t12;
  let span5;
  let t13_value = ctx[18].initiative + "";
  let t13;
  let t14;
  let span4;
  let init_action;
  let t15;
  let t16;
  let mounted;
  let dispose;
  function click_handler3(...args) {
    return ctx[14](ctx[21], ...args);
  }
  function click_handler_12(...args) {
    return ctx[15](ctx[21], ...args);
  }
  function click_handler_2(...args) {
    return ctx[16](ctx[21], ...args);
  }
  let if_block = ctx[18].hidden && create_if_block_18(ctx);
  function click_handler_32() {
    return ctx[17](ctx[18]);
  }
  return {
    c() {
      div7 = element("div");
      div6 = element("div");
      div0 = element("div");
      t0 = text(t0_value);
      t1 = space();
      div5 = element("div");
      div1 = element("div");
      t2 = space();
      div2 = element("div");
      t3 = text(t3_value);
      t4 = space();
      div3 = element("div");
      t5 = space();
      div4 = element("div");
      t6 = space();
      small = element("small");
      span1 = element("span");
      t7 = text(t7_value);
      t8 = space();
      span0 = element("span");
      t9 = space();
      span3 = element("span");
      t10 = text(t10_value);
      t11 = space();
      span2 = element("span");
      t12 = space();
      span5 = element("span");
      t13 = text(t13_value);
      t14 = space();
      span4 = element("span");
      t15 = space();
      if (if_block)
        if_block.c();
      t16 = space();
      attr(div0, "class", "creature-name");
      attr(div1, "class", "creature-minus");
      attr(div2, "class", "creature-number");
      attr(div3, "class", "creature-minus");
      attr(div4, "class", "creature-delete");
      attr(div5, "class", "creature-amount svelte-cpu15");
      attr(div6, "class", "creature-metadata svelte-cpu15");
      attr(small, "class", "creature-data svelte-cpu15");
      attr(div7, "class", "creature svelte-cpu15");
    },
    m(target, anchor) {
      insert(target, div7, anchor);
      append(div7, div6);
      append(div6, div0);
      append(div0, t0);
      append(div6, t1);
      append(div6, div5);
      append(div5, div1);
      append(div5, t2);
      append(div5, div2);
      append(div2, t3);
      append(div5, t4);
      append(div5, div3);
      append(div5, t5);
      append(div5, div4);
      append(div7, t6);
      append(div7, small);
      append(small, span1);
      append(span1, t7);
      append(span1, t8);
      append(span1, span0);
      append(small, t9);
      append(small, span3);
      append(span3, t10);
      append(span3, t11);
      append(span3, span2);
      append(small, t12);
      append(small, span5);
      append(span5, t13);
      append(span5, t14);
      append(span5, span4);
      append(small, t15);
      if (if_block)
        if_block.m(small, null);
      append(div7, t16);
      if (!mounted) {
        dispose = [
          action_destroyer(minusIcon_action = ctx[4].call(null, div1, ctx[18])),
          listen(div1, "click", stop_propagation(click_handler3)),
          action_destroyer(plusIcon_action = ctx[6].call(null, div3, ctx[18])),
          listen(div3, "click", stop_propagation(click_handler_12)),
          action_destroyer(delIcon_action = ctx[8].call(null, div4, ctx[18])),
          listen(div4, "click", stop_propagation(click_handler_2)),
          action_destroyer(heart_action = ctx[10].call(null, span0)),
          action_destroyer(ac_action = ctx[11].call(null, span2)),
          action_destroyer(init_action = ctx[12].call(null, span4)),
          listen(div7, "click", click_handler_32)
        ];
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (dirty & 4 && t0_value !== (t0_value = ctx[18].getName() + ""))
        set_data(t0, t0_value);
      if (minusIcon_action && is_function(minusIcon_action.update) && dirty & 4)
        minusIcon_action.update.call(null, ctx[18]);
      if (dirty & 4 && t3_value !== (t3_value = ctx[19] + ""))
        set_data(t3, t3_value);
      if (plusIcon_action && is_function(plusIcon_action.update) && dirty & 4)
        plusIcon_action.update.call(null, ctx[18]);
      if (delIcon_action && is_function(delIcon_action.update) && dirty & 4)
        delIcon_action.update.call(null, ctx[18]);
      if (dirty & 4 && t7_value !== (t7_value = ctx[18].hp + ""))
        set_data(t7, t7_value);
      if (dirty & 4 && t10_value !== (t10_value = ctx[18].ac + ""))
        set_data(t10, t10_value);
      if (dirty & 4 && t13_value !== (t13_value = ctx[18].initiative + ""))
        set_data(t13, t13_value);
      if (ctx[18].hidden) {
        if (if_block) {
        } else {
          if_block = create_if_block_18(ctx);
          if_block.c();
          if_block.m(small, null);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
    },
    d(detaching) {
      if (detaching)
        detach(div7);
      if (if_block)
        if_block.d();
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_fragment16(ctx) {
  let div;
  function select_block_type(ctx2, dirty) {
    if (ctx2[2].length)
      return create_if_block13;
    return create_else_block8;
  }
  let current_block_type = select_block_type(ctx, -1);
  let if_block = current_block_type(ctx);
  return {
    c() {
      div = element("div");
      if_block.c();
      attr(div, "class", "initiative-tracker-list svelte-cpu15");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if_block.m(div, null);
    },
    p(ctx2, [dirty]) {
      if (current_block_type === (current_block_type = select_block_type(ctx2, dirty)) && if_block) {
        if_block.p(ctx2, dirty);
      } else {
        if_block.d(1);
        if_block = current_block_type(ctx2);
        if (if_block) {
          if_block.c();
          if_block.m(div, null);
        }
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(div);
      if_block.d();
    }
  };
}
function instance16($$self, $$props, $$invalidate) {
  let $adding, $$unsubscribe_adding = noop, $$subscribe_adding = () => ($$unsubscribe_adding(), $$unsubscribe_adding = subscribe(adding, ($$value) => $$invalidate(2, $adding = $$value)), adding);
  let $editing, $$unsubscribe_editing = noop, $$subscribe_editing = () => ($$unsubscribe_editing(), $$unsubscribe_editing = subscribe(editing, ($$value) => $$invalidate(3, $editing = $$value)), editing);
  $$self.$$.on_destroy.push(() => $$unsubscribe_adding());
  $$self.$$.on_destroy.push(() => $$unsubscribe_editing());
  let { adding } = $$props;
  $$subscribe_adding();
  let { editing } = $$props;
  $$subscribe_editing();
  const minusIcon = (node, creature) => {
    new import_obsidian23.ExtraButtonComponent(node).setIcon("minus");
  };
  const minus = (evt, index) => {
    if ($adding[index][1] - 1 < 1) {
      del(evt, index);
      return;
    }
    set_store_value(adding, $adding[index][1] -= 1, $adding);
    adding.set($adding);
  };
  const plusIcon = (node, creature) => {
    new import_obsidian23.ExtraButtonComponent(node).setIcon("plus");
  };
  const add = (evt, index) => {
    set_store_value(adding, $adding[index][1] += 1, $adding);
    adding.set($adding);
  };
  const delIcon = (node, creature) => {
    new import_obsidian23.ExtraButtonComponent(node).setIcon("trash");
  };
  const del = (evt, index) => {
    $adding.splice(index, 1);
    adding.set($adding);
  };
  const heart = (node) => {
    (0, import_obsidian23.setIcon)(node, HP);
  };
  const ac = (node) => {
    (0, import_obsidian23.setIcon)(node, AC);
  };
  const init3 = (node) => {
    (0, import_obsidian23.setIcon)(node, INITIATIVE);
  };
  const hidden = (node) => {
    (0, import_obsidian23.setIcon)(node, HIDDEN);
  };
  const click_handler3 = (index, evt) => minus(evt, index);
  const click_handler_12 = (index, evt) => add(evt, index);
  const click_handler_2 = (index, evt) => del(evt, index);
  const click_handler_32 = (creature) => set_store_value(editing, $editing = creature, $editing);
  $$self.$$set = ($$props2) => {
    if ("adding" in $$props2)
      $$subscribe_adding($$invalidate(0, adding = $$props2.adding));
    if ("editing" in $$props2)
      $$subscribe_editing($$invalidate(1, editing = $$props2.editing));
  };
  return [
    adding,
    editing,
    $adding,
    $editing,
    minusIcon,
    minus,
    plusIcon,
    add,
    delIcon,
    del,
    heart,
    ac,
    init3,
    hidden,
    click_handler3,
    click_handler_12,
    click_handler_2,
    click_handler_32
  ];
}
var List = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance16, create_fragment16, safe_not_equal, { adding: 0, editing: 1 }, add_css15);
  }
};
var List_default = List;

// src/tracker/ui/create/Creator.svelte
function add_css16(target) {
  append_styles(target, "svelte-17gn2f0", '.initiative-tracker-creator.svelte-17gn2f0{margin-top:1rem;display:grid;grid-template-columns:1fr 1fr;gap:0.5rem}.buttons.svelte-17gn2f0{display:flex;margin-left:auto;justify-content:flex-end;gap:0.5rem}div[disabled="true"].svelte-17gn2f0>button{cursor:not-allowed}');
}
function create_if_block14(ctx) {
  let list;
  let current;
  list = new List_default({
    props: {
      adding: ctx[3],
      editing: ctx[4]
    }
  });
  return {
    c() {
      create_component(list.$$.fragment);
    },
    m(target, anchor) {
      mount_component(list, target, anchor);
      current = true;
    },
    p: noop,
    i(local) {
      if (current)
        return;
      transition_in(list.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(list.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(list, detaching);
    }
  };
}
function create_fragment17(ctx) {
  let div4;
  let div0;
  let create;
  let t0;
  let t1;
  let div3;
  let div1;
  let cancel_action;
  let t2;
  let div2;
  let div2_disabled_value;
  let add_action;
  let current;
  let mounted;
  let dispose;
  create = new Create_default({
    props: {
      plugin: ctx[0],
      editing: ctx[4],
      adding: ctx[3]
    }
  });
  let if_block = !ctx[1] && create_if_block14(ctx);
  return {
    c() {
      div4 = element("div");
      div0 = element("div");
      create_component(create.$$.fragment);
      t0 = space();
      if (if_block)
        if_block.c();
      t1 = space();
      div3 = element("div");
      div1 = element("div");
      t2 = space();
      div2 = element("div");
      attr(div0, "class", "initiative-tracker-creator svelte-17gn2f0");
      attr(div2, "disabled", div2_disabled_value = !ctx[2].length);
      attr(div2, "class", "svelte-17gn2f0");
      attr(div3, "class", "buttons svelte-17gn2f0");
      attr(div4, "class", "initiative-tracker-creator-container");
      toggle_class(div4, "mobile", import_obsidian24.Platform.isMobileApp);
    },
    m(target, anchor) {
      insert(target, div4, anchor);
      append(div4, div0);
      mount_component(create, div0, null);
      append(div0, t0);
      if (if_block)
        if_block.m(div0, null);
      append(div4, t1);
      append(div4, div3);
      append(div3, div1);
      append(div3, t2);
      append(div3, div2);
      current = true;
      if (!mounted) {
        dispose = [
          action_destroyer(cancel_action = ctx[5].call(null, div1)),
          action_destroyer(add_action = ctx[6].call(null, div2))
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      const create_changes = {};
      if (dirty & 1)
        create_changes.plugin = ctx2[0];
      create.$set(create_changes);
      if (!ctx2[1]) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & 2) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block14(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(div0, null);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
      if (!current || dirty & 4 && div2_disabled_value !== (div2_disabled_value = !ctx2[2].length)) {
        attr(div2, "disabled", div2_disabled_value);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(create.$$.fragment, local);
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(create.$$.fragment, local);
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div4);
      destroy_component(create);
      if (if_block)
        if_block.d();
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance17($$self, $$props, $$invalidate) {
  let $adding;
  const dispatch2 = createEventDispatcher();
  let { plugin } = $$props;
  let { isEditing = false } = $$props;
  let { creature = null } = $$props;
  const adding = writable([]);
  component_subscribe($$self, adding, (value) => $$invalidate(2, $adding = value));
  const editing = writable(creature);
  const cancel = (node) => {
    new import_obsidian24.ButtonComponent(node).setCta().setButtonText("Cancel").onClick(() => {
      dispatch2("close");
    });
  };
  const add = (node) => {
    new import_obsidian24.ButtonComponent(node).setButtonText("Add to Encounter").onClick(() => {
      if (!$adding.length)
        return;
      const creatures = $adding.flatMap(([creature2, amount]) => [...Array(amount).keys()].map((k) => Creature.new(creature2)));
      tracker.add(...creatures);
      dispatch2("close");
    });
  };
  $$self.$$set = ($$props2) => {
    if ("plugin" in $$props2)
      $$invalidate(0, plugin = $$props2.plugin);
    if ("isEditing" in $$props2)
      $$invalidate(1, isEditing = $$props2.isEditing);
    if ("creature" in $$props2)
      $$invalidate(7, creature = $$props2.creature);
  };
  return [plugin, isEditing, $adding, adding, editing, cancel, add, creature];
}
var Creator = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance17, create_fragment17, safe_not_equal, { plugin: 0, isEditing: 1, creature: 7 }, add_css16);
  }
};
var Creator_default = Creator;

// src/tracker/ui/create/modal.ts
var AddCreatureModal = class extends import_obsidian25.Modal {
  constructor(plugin, creature) {
    super(plugin.app);
    this.plugin = plugin;
    this.creature = creature;
  }
  onOpen() {
    this.containerEl.addClass("initiative-tracker-modal");
    new Creator_default({
      target: this.contentEl,
      props: {
        plugin: this.plugin,
        ...this.creature ? { creature: this.creature, isEditing: true } : {}
      }
    }).$on("close", () => this.close());
  }
};
async function confirmWithModal2(app2, text2, buttons = {
  cta: "Yes",
  secondary: "No"
}) {
  return new Promise((resolve, reject) => {
    try {
      const modal = new ConfirmModal2(app2, text2, buttons);
      modal.onClose = () => {
        resolve(modal.confirmed);
      };
      modal.open();
    } catch (e) {
      reject();
    }
  });
}
var ConfirmModal2 = class extends import_obsidian25.Modal {
  constructor(app2, text2, buttons) {
    super(app2);
    this.text = text2;
    this.buttons = buttons;
    this.confirmed = false;
  }
  async display() {
    this.containerEl.addClass("initiative-tracker-modal");
    this.contentEl.empty();
    this.contentEl.addClass("confirm-modal");
    this.contentEl.createEl("p", {
      text: this.text
    });
    const buttonEl = this.contentEl.createDiv("confirm-buttons");
    new import_obsidian25.ButtonComponent(buttonEl).setButtonText(this.buttons.cta).setCta().onClick(() => {
      this.confirmed = true;
      this.close();
    });
    new import_obsidian25.ButtonComponent(buttonEl).setButtonText(this.buttons.secondary).onClick(() => {
      this.close();
    });
  }
  onOpen() {
    this.display();
  }
};

// src/tracker/ui/create/Legacy.svelte
var import_obsidian26 = require("obsidian");
function add_css17(target) {
  append_styles(target, "svelte-1rjv45j", ".create-new.svelte-1rjv45j>.svelte-1rjv45j{display:grid;grid-template-columns:33% 66%;margin-bottom:0.5rem}.context-buttons.svelte-1rjv45j.svelte-1rjv45j{display:flex;justify-content:flex-end;align-items:center;grid-gap:0.125rem}.cancel-button.svelte-1rjv45j.svelte-1rjv45j{color:var(--text-faint)}.initiative.svelte-1rjv45j.svelte-1rjv45j{position:relative}.initiative.svelte-1rjv45j>.dice.svelte-1rjv45j{position:absolute;right:0.25rem;top:50%;transform:translateY(-50%)}");
}
function create_fragment18(ctx) {
  let div15;
  let div10;
  let div0;
  let label0;
  let t1;
  let input0;
  let t2;
  let div1;
  let label1;
  let t4;
  let input1;
  let t5;
  let div2;
  let label2;
  let t7;
  let input2;
  let t8;
  let div3;
  let label3;
  let t10;
  let input3;
  let t11;
  let div4;
  let label4;
  let t13;
  let input4;
  let t14;
  let div6;
  let label5;
  let t16;
  let input5;
  let t17;
  let div5;
  let diceButton_action;
  let t18;
  let div8;
  let label6;
  let t20;
  let div7;
  let hideToggle_action;
  let t21;
  let div9;
  let label7;
  let t23;
  let input6;
  let t24;
  let div14;
  let div11;
  let cancelButton_action;
  let t25;
  let div12;
  let editButton_action;
  let t26;
  let div13;
  let addButton_action;
  let mounted;
  let dispose;
  return {
    c() {
      div15 = element("div");
      div10 = element("div");
      div0 = element("div");
      label0 = element("label");
      label0.textContent = "Creature";
      t1 = space();
      input0 = element("input");
      t2 = space();
      div1 = element("div");
      label1 = element("label");
      label1.textContent = "Display Name";
      t4 = space();
      input1 = element("input");
      t5 = space();
      div2 = element("div");
      label2 = element("label");
      label2.textContent = "HP";
      t7 = space();
      input2 = element("input");
      t8 = space();
      div3 = element("div");
      label3 = element("label");
      label3.textContent = "AC";
      t10 = space();
      input3 = element("input");
      t11 = space();
      div4 = element("div");
      label4 = element("label");
      label4.textContent = "Modifier";
      t13 = space();
      input4 = element("input");
      t14 = space();
      div6 = element("div");
      label5 = element("label");
      label5.textContent = "Initiative";
      t16 = space();
      input5 = element("input");
      t17 = space();
      div5 = element("div");
      t18 = space();
      div8 = element("div");
      label6 = element("label");
      label6.textContent = "Hidden";
      t20 = space();
      div7 = element("div");
      t21 = space();
      div9 = element("div");
      label7 = element("label");
      label7.textContent = "Amount";
      t23 = space();
      input6 = element("input");
      t24 = space();
      div14 = element("div");
      div11 = element("div");
      t25 = space();
      div12 = element("div");
      t26 = space();
      div13 = element("div");
      attr(label0, "for", "add-name");
      attr(input0, "id", "add-name");
      attr(input0, "type", "text");
      attr(input0, "name", "name");
      attr(input0, "tabindex", "0");
      attr(div0, "class", "svelte-1rjv45j");
      attr(label1, "for", "add-display");
      attr(input1, "id", "add-display");
      attr(input1, "type", "text");
      attr(input1, "name", "display");
      attr(input1, "tabindex", "0");
      attr(div1, "class", "svelte-1rjv45j");
      attr(label2, "for", "add-hp");
      attr(input2, "id", "add-hp");
      attr(input2, "type", "number");
      attr(input2, "name", "hp");
      attr(input2, "tabindex", "0");
      attr(div2, "class", "svelte-1rjv45j");
      attr(label3, "for", "add-ac");
      attr(input3, "id", "add-ac");
      attr(input3, "type", "number");
      attr(input3, "name", "ac");
      attr(input3, "tabindex", "0");
      attr(div3, "class", "svelte-1rjv45j");
      attr(label4, "for", "add-mod");
      attr(input4, "id", "add-mod");
      attr(input4, "type", "number");
      attr(input4, "name", "ac");
      attr(input4, "tabindex", "0");
      attr(div4, "class", "svelte-1rjv45j");
      attr(label5, "for", "add-init");
      attr(input5, "id", "add-init");
      attr(input5, "type", "number");
      attr(input5, "name", "initiative");
      attr(input5, "tabindex", "0");
      attr(div5, "class", "dice svelte-1rjv45j");
      attr(div6, "class", "initiative svelte-1rjv45j");
      attr(label6, "for", "add-mod");
      attr(div8, "class", "svelte-1rjv45j");
      attr(label7, "for", "add-init");
      attr(input6, "id", "add-init");
      attr(input6, "type", "number");
      attr(input6, "name", "initiative");
      attr(input6, "tabindex", "0");
      attr(div9, "class", "amount svelte-1rjv45j");
      attr(div10, "class", "create-new svelte-1rjv45j");
      attr(div11, "class", "add-button cancel-button svelte-1rjv45j");
      attr(div12, "class", "add-button");
      attr(div13, "class", "add-button");
      attr(div14, "class", "context-buttons svelte-1rjv45j");
      attr(div15, "class", "initiative-tracker-editor");
    },
    m(target, anchor) {
      insert(target, div15, anchor);
      append(div15, div10);
      append(div10, div0);
      append(div0, label0);
      append(div0, t1);
      append(div0, input0);
      ctx[12](input0);
      set_input_value(input0, ctx[0].name);
      append(div10, t2);
      append(div10, div1);
      append(div1, label1);
      append(div1, t4);
      append(div1, input1);
      set_input_value(input1, ctx[0].display);
      append(div10, t5);
      append(div10, div2);
      append(div2, label2);
      append(div2, t7);
      append(div2, input2);
      set_input_value(input2, ctx[0].hp);
      append(div10, t8);
      append(div10, div3);
      append(div3, label3);
      append(div3, t10);
      append(div3, input3);
      set_input_value(input3, ctx[0].ac);
      append(div10, t11);
      append(div10, div4);
      append(div4, label4);
      append(div4, t13);
      append(div4, input4);
      set_input_value(input4, ctx[0].modifier);
      append(div10, t14);
      append(div10, div6);
      append(div6, label5);
      append(div6, t16);
      append(div6, input5);
      set_input_value(input5, ctx[0].initiative);
      append(div6, t17);
      append(div6, div5);
      append(div10, t18);
      append(div10, div8);
      append(div8, label6);
      append(div8, t20);
      append(div8, div7);
      append(div10, t21);
      append(div10, div9);
      append(div9, label7);
      append(div9, t23);
      append(div9, input6);
      set_input_value(input6, ctx[1]);
      append(div15, t24);
      append(div15, div14);
      append(div14, div11);
      append(div14, t25);
      append(div14, div12);
      append(div14, t26);
      append(div14, div13);
      if (!mounted) {
        dispose = [
          listen(input0, "input", ctx[13]),
          listen(input0, "focus", ctx[14]),
          listen(input1, "input", ctx[15]),
          listen(input2, "input", ctx[16]),
          listen(input3, "input", ctx[17]),
          listen(input4, "input", ctx[18]),
          listen(input5, "input", ctx[19]),
          action_destroyer(diceButton_action = ctx[9].call(null, div5)),
          action_destroyer(hideToggle_action = ctx[10].call(null, div7)),
          listen(input6, "input", ctx[20]),
          action_destroyer(cancelButton_action = ctx[8].call(null, div11)),
          listen(div11, "click", ctx[21]),
          action_destroyer(editButton_action = ctx[7].call(null, div12)),
          listen(div12, "click", ctx[22]),
          action_destroyer(addButton_action = ctx[6].call(null, div13)),
          listen(div13, "click", ctx[23])
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & 1 && input0.value !== ctx2[0].name) {
        set_input_value(input0, ctx2[0].name);
      }
      if (dirty & 1 && input1.value !== ctx2[0].display) {
        set_input_value(input1, ctx2[0].display);
      }
      if (dirty & 1 && to_number(input2.value) !== ctx2[0].hp) {
        set_input_value(input2, ctx2[0].hp);
      }
      if (dirty & 1 && to_number(input3.value) !== ctx2[0].ac) {
        set_input_value(input3, ctx2[0].ac);
      }
      if (dirty & 1 && to_number(input4.value) !== ctx2[0].modifier) {
        set_input_value(input4, ctx2[0].modifier);
      }
      if (dirty & 1 && to_number(input5.value) !== ctx2[0].initiative) {
        set_input_value(input5, ctx2[0].initiative);
      }
      if (dirty & 2 && to_number(input6.value) !== ctx2[1]) {
        set_input_value(input6, ctx2[1]);
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(div15);
      ctx[12](null);
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance18($$self, $$props, $$invalidate) {
  const dispatch2 = createEventDispatcher();
  let { creature = new Creature({}) } = $$props;
  let { amount = 1 } = $$props;
  let { plugin } = $$props;
  const add = async (close = true) => {
    if (!creature || !creature.name || !creature.name?.length) {
      new import_obsidian26.Notice("Enter a name!");
      return;
    }
    if (!creature.modifier) {
      $$invalidate(0, creature.modifier = 0, creature);
    }
    if (creature.initiative <= 0 || creature.initiative == null || isNaN(creature.initiative)) {
      $$invalidate(0, creature.initiative = await plugin.getInitiativeValue(creature.modifier), creature);
    }
    tracker.add(...[...Array(amount).keys()].map((k) => Creature.new(creature)));
    $$invalidate(0, creature = new Creature({}));
    if (close)
      dispatch2("close");
  };
  const addButton = (node) => {
    new import_obsidian26.ExtraButtonComponent(node).setTooltip("Add Creature").setIcon("check");
  };
  const editButton = (node) => {
    new import_obsidian26.ExtraButtonComponent(node).setTooltip("Add and Close").setIcon("check-circle");
  };
  const cancelButton = (node) => {
    new import_obsidian26.ExtraButtonComponent(node).setTooltip("Cancel").setIcon("cross");
  };
  const diceButton = (node) => {
    new import_obsidian26.ExtraButtonComponent(node).setIcon(DICE).setTooltip("Roll Initiative").onClick(async () => {
      $$invalidate(0, creature.initiative = await plugin.getInitiativeValue(creature.modifier), creature);
    });
  };
  let nameInput;
  let modal;
  onMount(() => {
    $$invalidate(3, modal = new SRDMonsterSuggestionModal(plugin, nameInput));
    $$invalidate(
      3,
      modal.onClose = async () => {
        if (modal.creature) {
          $$invalidate(0, creature = Creature.from(modal.creature));
          $$invalidate(0, creature.initiative = await plugin.getInitiativeValue(creature.modifier), creature);
        }
      },
      modal
    );
  });
  const hideToggle = (div) => {
    new import_obsidian26.ToggleComponent(div).setValue(creature.hidden).onChange((v) => $$invalidate(0, creature.hidden = v, creature));
  };
  onDestroy(() => modal.close());
  function input0_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      nameInput = $$value;
      $$invalidate(2, nameInput);
    });
  }
  function input0_input_handler() {
    creature.name = this.value;
    $$invalidate(0, creature);
  }
  const focus_handler = function() {
    modal.open();
  };
  function input1_input_handler() {
    creature.display = this.value;
    $$invalidate(0, creature);
  }
  function input2_input_handler() {
    creature.hp = to_number(this.value);
    $$invalidate(0, creature);
  }
  function input3_input_handler() {
    creature.ac = to_number(this.value);
    $$invalidate(0, creature);
  }
  function input4_input_handler() {
    creature.modifier = to_number(this.value);
    $$invalidate(0, creature);
  }
  function input5_input_handler() {
    creature.initiative = to_number(this.value);
    $$invalidate(0, creature);
  }
  function input6_input_handler() {
    amount = to_number(this.value);
    $$invalidate(1, amount);
  }
  const click_handler3 = () => dispatch2("close");
  const click_handler_12 = () => add();
  const click_handler_2 = () => add(false);
  $$self.$$set = ($$props2) => {
    if ("creature" in $$props2)
      $$invalidate(0, creature = $$props2.creature);
    if ("amount" in $$props2)
      $$invalidate(1, amount = $$props2.amount);
    if ("plugin" in $$props2)
      $$invalidate(11, plugin = $$props2.plugin);
  };
  return [
    creature,
    amount,
    nameInput,
    modal,
    dispatch2,
    add,
    addButton,
    editButton,
    cancelButton,
    diceButton,
    hideToggle,
    plugin,
    input0_binding,
    input0_input_handler,
    focus_handler,
    input1_input_handler,
    input2_input_handler,
    input3_input_handler,
    input4_input_handler,
    input5_input_handler,
    input6_input_handler,
    click_handler3,
    click_handler_12,
    click_handler_2
  ];
}
var Legacy = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance18, create_fragment18, safe_not_equal, { creature: 0, amount: 1, plugin: 11 }, add_css17);
  }
};
var Legacy_default = Legacy;

// src/tracker/ui/App.svelte
function add_css18(target) {
  append_styles(target, "svelte-1yp1f6q", ".obsidian-initiative-tracker.svelte-1yp1f6q{margin:0.5rem;min-width:180px;overflow-y:auto}.add-creature-container.svelte-1yp1f6q{display:flex;flex-flow:column nowrap;justify-content:flex-start;margin-right:0.5rem}.context-container.svelte-1yp1f6q{display:flex;flex-flow:row nowrap;justify-content:space-between}.copy-button.svelte-1yp1f6q{width:min-content;opacity:0.25}.copy-button.svelte-1yp1f6q:hover{opacity:1}.add-button.svelte-1yp1f6q{width:min-content}.add-button.svelte-1yp1f6q .clickable-icon{margin:0}");
}
function create_else_block9(ctx) {
  let div3;
  let div2;
  let div0;
  let copyButton_action;
  let t;
  let div1;
  let addButton_action;
  let mounted;
  let dispose;
  return {
    c() {
      div3 = element("div");
      div2 = element("div");
      div0 = element("div");
      t = space();
      div1 = element("div");
      attr(div0, "class", "copy-button svelte-1yp1f6q");
      attr(div1, "class", "add-button svelte-1yp1f6q");
      attr(div2, "class", "context-container svelte-1yp1f6q");
      attr(div3, "class", "add-creature-container svelte-1yp1f6q");
    },
    m(target, anchor) {
      insert(target, div3, anchor);
      append(div3, div2);
      append(div2, div0);
      append(div2, t);
      append(div2, div1);
      if (!mounted) {
        dispose = [
          action_destroyer(copyButton_action = ctx[7].call(null, div0)),
          action_destroyer(addButton_action = ctx[6].call(null, div1)),
          listen(div1, "click", ctx[18])
        ];
        mounted = true;
      }
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(div3);
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_if_block_27(ctx) {
  let legacy_1;
  let current;
  legacy_1 = new Legacy_default({
    props: {
      plugin: ctx[0],
      creature: ctx[4]
    }
  });
  legacy_1.$on("close", ctx[17]);
  return {
    c() {
      create_component(legacy_1.$$.fragment);
    },
    m(target, anchor) {
      mount_component(legacy_1, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const legacy_1_changes = {};
      if (dirty & 1)
        legacy_1_changes.plugin = ctx2[0];
      if (dirty & 16)
        legacy_1_changes.creature = ctx2[4];
      legacy_1.$set(legacy_1_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(legacy_1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(legacy_1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(legacy_1, detaching);
    }
  };
}
function create_if_block_19(ctx) {
  let loadencounter;
  let current;
  loadencounter = new LoadEncounter_default({});
  loadencounter.$on("cancel", ctx[16]);
  return {
    c() {
      create_component(loadencounter.$$.fragment);
    },
    m(target, anchor) {
      mount_component(loadencounter, target, anchor);
      current = true;
    },
    p: noop,
    i(local) {
      if (current)
        return;
      transition_in(loadencounter.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(loadencounter.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(loadencounter, detaching);
    }
  };
}
function create_if_block15(ctx) {
  let saveencounter;
  let current;
  saveencounter = new SaveEncounter_default({});
  saveencounter.$on("cancel", ctx[15]);
  return {
    c() {
      create_component(saveencounter.$$.fragment);
    },
    m(target, anchor) {
      mount_component(saveencounter, target, anchor);
      current = true;
    },
    p: noop,
    i(local) {
      if (current)
        return;
      transition_in(saveencounter.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(saveencounter.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(saveencounter, detaching);
    }
  };
}
function create_fragment19(ctx) {
  let div;
  let controls;
  let t0;
  let metadata;
  let t1;
  let table;
  let t2;
  let updating;
  let t3;
  let current_block_type_index;
  let if_block;
  let current;
  controls = new Controls_default({});
  controls.$on("save", ctx[8]);
  controls.$on("load", ctx[9]);
  controls.$on("add-creatures", ctx[10]);
  controls.$on("player-view", ctx[11]);
  controls.$on("open-map", ctx[12]);
  metadata = new Metadata_default({});
  table = new Table_default({});
  table.$on("edit", ctx[13]);
  table.$on("open-combatant", ctx[14]);
  updating = new Updating_default({});
  const if_block_creators = [create_if_block15, create_if_block_19, create_if_block_27, create_else_block9];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (ctx2[1])
      return 0;
    if (ctx2[2])
      return 1;
    if (ctx2[3])
      return 2;
    return 3;
  }
  current_block_type_index = select_block_type(ctx, -1);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      div = element("div");
      create_component(controls.$$.fragment);
      t0 = space();
      create_component(metadata.$$.fragment);
      t1 = space();
      create_component(table.$$.fragment);
      t2 = space();
      create_component(updating.$$.fragment);
      t3 = space();
      if_block.c();
      attr(div, "class", "obsidian-initiative-tracker svelte-1yp1f6q");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      mount_component(controls, div, null);
      append(div, t0);
      mount_component(metadata, div, null);
      append(div, t1);
      mount_component(table, div, null);
      append(div, t2);
      mount_component(updating, div, null);
      append(div, t3);
      if_blocks[current_block_type_index].m(div, null);
      current = true;
    },
    p(ctx2, [dirty]) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2, dirty);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(div, null);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(controls.$$.fragment, local);
      transition_in(metadata.$$.fragment, local);
      transition_in(table.$$.fragment, local);
      transition_in(updating.$$.fragment, local);
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(controls.$$.fragment, local);
      transition_out(metadata.$$.fragment, local);
      transition_out(table.$$.fragment, local);
      transition_out(updating.$$.fragment, local);
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      destroy_component(controls);
      destroy_component(metadata);
      destroy_component(table);
      destroy_component(updating);
      if_blocks[current_block_type_index].d();
    }
  };
}
function instance19($$self, $$props, $$invalidate) {
  let $tracker;
  component_subscribe($$self, tracker, ($$value) => $$invalidate(19, $tracker = $$value));
  let { plugin } = $$props;
  tracker.setData(plugin.data);
  tracker.setLogger(new Logger(plugin));
  if (plugin.data.state) {
    tracker.new(plugin.data.state);
  } else {
    tracker.setParty(plugin.data.defaultParty, plugin);
    tracker.roll(plugin);
  }
  setContext("plugin", plugin);
  let saving = false;
  let loading = false;
  let legacy = false, editing;
  const editOrAdd = (creature) => {
    if (plugin.data.useLegacy) {
      $$invalidate(3, legacy = true);
      $$invalidate(4, editing = creature);
    } else {
      const modal = new AddCreatureModal(plugin, creature);
      modal.onClose = () => {
      };
      modal.open();
    }
  };
  const addButton = (node) => {
    new import_obsidian27.ExtraButtonComponent(node).setTooltip("Add Creature").setIcon(ADD);
  };
  const copyButton = (node) => {
    new import_obsidian27.ExtraButtonComponent(node).setTooltip("Copy Initiative Order").setIcon(COPY).onClick(async () => {
      const contents = $tracker.map((creature) => `${creature.initiative} ${creature.name}`).join("\n");
      try {
        await navigator.clipboard.writeText(contents);
        new import_obsidian27.Notice("Initiative order copied to clipboard.");
      } catch (e) {
        new import_obsidian27.Notice("Initiative order could not be copied to clipboard.");
      }
    });
  };
  const save_handler = () => $$invalidate(1, saving = true);
  const load_handler = () => $$invalidate(2, loading = true);
  const add_creatures_handler = () => editOrAdd();
  function player_view_handler(event) {
    bubble.call(this, $$self, event);
  }
  function open_map_handler(event) {
    bubble.call(this, $$self, event);
  }
  const edit_handler = (evt) => editOrAdd(evt.detail);
  const open_combatant_handler = (evt) => plugin.openCombatant(evt.detail);
  const cancel_handler = () => $$invalidate(1, saving = false);
  const cancel_handler_1 = () => $$invalidate(2, loading = false);
  const close_handler = () => {
    $$invalidate(3, legacy = false);
    $$invalidate(4, editing = null);
  };
  const click_handler3 = () => editOrAdd();
  $$self.$$set = ($$props2) => {
    if ("plugin" in $$props2)
      $$invalidate(0, plugin = $$props2.plugin);
  };
  return [
    plugin,
    saving,
    loading,
    legacy,
    editing,
    editOrAdd,
    addButton,
    copyButton,
    save_handler,
    load_handler,
    add_creatures_handler,
    player_view_handler,
    open_map_handler,
    edit_handler,
    open_combatant_handler,
    cancel_handler,
    cancel_handler_1,
    close_handler,
    click_handler3
  ];
}
var App4 = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance19, create_fragment19, safe_not_equal, { plugin: 0 }, add_css18);
  }
};
var App_default = App4;

// src/tracker/view.ts
var TrackerView = class extends import_obsidian28.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    this.leaf = leaf;
    this.plugin = plugin;
    this.playerViewOpened = false;
    if (this.plugin.data.state?.creatures?.length) {
    } else {
    }
  }
  async onOpen() {
    this.ui = new App_default({
      target: this.contentEl,
      props: {
        plugin: this.plugin
      }
    });
    this.ui.$on("player-view", () => this.openPlayerView());
    this.ui.$on("open-map", () => this.openInitiativeView());
  }
  getViewType() {
    return INTIATIVE_TRACKER_VIEW;
  }
  getDisplayText() {
    return "Initiative Tracker";
  }
  getIcon() {
    return BASE;
  }
  get pcs() {
    return [];
  }
  get npcs() {
    return [];
  }
  openInitiativeView() {
    this.plugin.leaflet.openInitiativeView(this.pcs, this.npcs);
  }
  getExistingPlayerView() {
    const existing = this.plugin.app.workspace.getLeavesOfType(PLAYER_VIEW_VIEW);
    if (existing.length) {
      return existing[0].view;
    }
  }
  async getPlayerView() {
    const existing = this.getExistingPlayerView();
    if (existing)
      return existing;
    const leaf = await this.app.workspace.openPopoutLeaf();
    await leaf.setViewState({
      type: PLAYER_VIEW_VIEW
    });
    return leaf.view;
  }
  async openPlayerView() {
    await this.getPlayerView();
    this.playerViewOpened = true;
  }
};
var CreatureView = class extends import_obsidian28.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    this.plugin = plugin;
    this.buttonEl = this.contentEl.createDiv("creature-view-button");
    this.statblockEl = this.contentEl.createDiv("creature-statblock-container");
    this.load();
    this.containerEl.addClass("creature-view-container");
    this.containerEl.on(
      "mouseover",
      "a.internal-link",
      (0, import_obsidian28.debounce)(
        (ev) => app.workspace.trigger(
          "link-hover",
          {},
          ev.target,
          ev.target.dataset.href,
          "initiative-tracker "
        ),
        10
      )
    );
    this.containerEl.on(
      "click",
      "a.internal-link",
      (ev) => app.workspace.openLinkText(
        ev.target.dataset.href,
        "initiative-tracker"
      )
    );
  }
  onload() {
    new import_obsidian28.ExtraButtonComponent(this.buttonEl).setIcon("cross").setTooltip("Close Statblock").onClick(() => {
      this.render();
      this.app.workspace.trigger("initiative-tracker:stop-viewing");
    });
  }
  onunload() {
    this.app.workspace.trigger("initiative-tracker:stop-viewing");
  }
  render(creature) {
    this.statblockEl.empty();
    if (!creature) {
      this.statblockEl.createEl("em", {
        text: "Select a creature to view it here."
      });
      return;
    }
    if (this.plugin.canUseStatBlocks && this.plugin.statblockVersion?.major >= 2) {
      const statblock = this.plugin.statblocks.render(
        creature,
        this.statblockEl,
        creature.display
      );
      this.addChild(statblock);
    } else {
      this.statblockEl.createEl("em", {
        text: "Install the TTRPG Statblocks plugin to use this feature!"
      });
    }
  }
  getDisplayText() {
    return "Combatant";
  }
  getIcon() {
    return CREATURE;
  }
  getViewType() {
    return CREATURE_TRACKER_VIEW;
  }
};

// src/builder/view.ts
var import_obsidian37 = require("obsidian");

// src/builder/constants.ts
var EXPERIENCE_PER_LEVEL = {
  1: { daily: 300, easy: 25, medium: 50, hard: 75, deadly: 100 },
  2: { daily: 600, easy: 50, medium: 100, hard: 150, deadly: 200 },
  3: { daily: 1200, easy: 75, medium: 150, hard: 225, deadly: 400 },
  4: { daily: 1700, easy: 125, medium: 250, hard: 375, deadly: 500 },
  5: { daily: 3500, easy: 250, medium: 500, hard: 750, deadly: 1100 },
  6: { daily: 4e3, easy: 300, medium: 600, hard: 900, deadly: 1400 },
  7: { daily: 5e3, easy: 350, medium: 750, hard: 1100, deadly: 1700 },
  8: { daily: 6e3, easy: 450, medium: 900, hard: 1400, deadly: 2100 },
  9: { daily: 7500, easy: 550, medium: 1100, hard: 1600, deadly: 2400 },
  10: { daily: 9e3, easy: 600, medium: 1200, hard: 1900, deadly: 2800 },
  11: { daily: 10500, easy: 800, medium: 1600, hard: 2400, deadly: 3600 },
  12: { daily: 11500, easy: 1e3, medium: 2e3, hard: 3e3, deadly: 4500 },
  13: { daily: 13500, easy: 1100, medium: 2200, hard: 3400, deadly: 5100 },
  14: { daily: 15e3, easy: 1250, medium: 2500, hard: 3800, deadly: 5700 },
  15: { daily: 18e3, easy: 1400, medium: 2800, hard: 4300, deadly: 6400 },
  16: { daily: 2e4, easy: 1600, medium: 3200, hard: 4800, deadly: 7200 },
  17: { daily: 25e3, easy: 2e3, medium: 3900, hard: 5900, deadly: 8800 },
  18: { daily: 27e3, easy: 2100, medium: 4200, hard: 6300, deadly: 9500 },
  19: { daily: 3e4, easy: 2400, medium: 4900, hard: 7300, deadly: 10900 },
  20: { daily: 4e4, easy: 2800, medium: 5700, hard: 8500, deadly: 12700 }
};
var MODIFIERS_BY_COUNT = [0.5, 1, 1.5, 2, 2.5, 3, 4, 5];
var MODIFIER_THRESHOLDS = [Infinity, 1, 2, 3, 7, 11, 15];
var EXPERIENCE_THRESHOLDS = [
  "Easy",
  "Medium",
  "Hard",
  "Deadly"
];

// src/builder/stores/players.ts
var playerCount = writable(0);
function createPlayers() {
  const store = writable([]);
  const { subscribe: subscribe2, set, update: update2 } = store;
  const party = derived(store, ($players) => {
    return $players.filter((p) => p.isPlayer);
  });
  const generics = derived(store, ($players) => {
    return $players.filter(
      (p) => p.isPlayer == false
    );
  });
  const count = derived(store, ($players) => {
    return [...$players].reduce((a, b) => a + b.count, 0);
  });
  return {
    subscribe: subscribe2,
    party,
    generics,
    count,
    thresholds: derived(store, ($players) => {
      const threshold = {
        Easy: 0,
        Medium: 0,
        Hard: 0,
        Deadly: 0,
        Daily: 0
      };
      for (const player of $players) {
        if (!player.level)
          continue;
        if (!player.enabled)
          continue;
        const level = player.level > 20 ? 20 : player.level;
        const thresholds = EXPERIENCE_PER_LEVEL[level];
        if (!thresholds)
          continue;
        threshold.Easy += thresholds.easy * player.count;
        threshold.Medium += thresholds.medium * player.count;
        threshold.Hard += thresholds.hard * player.count;
        threshold.Deadly += thresholds.deadly * player.count;
        threshold.Daily += thresholds.daily * player.count;
      }
      return threshold;
    }),
    modifier: derived(
      count,
      ($count) => $count < 3 ? 1 : $count > 5 ? -1 : 0
    ),
    average: derived(store, ($players) => {
      if (!$players.length)
        return 0;
      return $players.reduce((a, p) => a + (p.enabled ? p.level : 0), 0) / $players.length;
    }),
    add: (item) => update2((players2) => {
      if (!item.count || item.count <= 0) {
        item.count = 1;
      }
      players2.push(item);
      return players2;
    }),
    remove: (item) => update2((players2) => {
      players2 = players2.filter((p) => p != item);
      return players2;
    }),
    delete: (item) => update2((players2) => {
      players2 = players2.filter((p) => p != item);
      return players2;
    }),
    set: (item, count2) => update2((players2) => {
      const player = players2.find((p) => p == item);
      player.count = count2;
      return players2;
    }),
    setLevel: (item, level) => update2((players2) => {
      const player = players2.find((p) => p == item);
      player.level = level;
      return players2;
    }),
    switchParty: (items) => {
      update2((players2) => {
        players2 = [...items, ...get_store_value(generics)];
        return players2;
      });
    },
    empty: () => {
      return set([]);
    },
    toggleEnabled: (item) => update2((players2) => {
      const player = players2.find((p) => p == item);
      player.enabled = !player.enabled;
      return players2;
    })
  };
}
var players = createPlayers();

// src/builder/view/creatures/Creature.svelte
var import_obsidian29 = require("obsidian");

// src/builder/stores/encounter.ts
function createEncounter() {
  const store = writable(/* @__PURE__ */ new Map());
  const { subscribe: subscribe2, set, update: update2 } = store;
  return {
    players,
    subscribe: subscribe2,
    add: (item) => update2((monsters) => {
      monsters.set(item, (monsters.get(item) ?? 0) + 1);
      return monsters;
    }),
    remove: (item) => update2((monsters) => {
      let existing = monsters.get(item);
      if (!existing)
        return monsters;
      if (existing == 1) {
        monsters.delete(item);
      }
      if (existing > 1) {
        monsters.set(item, existing - 1);
      }
      return monsters;
    }),
    delete: (item) => update2((monsters) => {
      monsters.delete(item);
      return monsters;
    }),
    set: (item, count) => update2((monsters) => {
      monsters.set(item, count);
      return monsters;
    }),
    empty: () => set(/* @__PURE__ */ new Map())
  };
}
var encounter = createEncounter();

// src/builder/view/Nullable.svelte
function create_fragment20(ctx) {
  let t;
  return {
    c() {
      t = text(ctx[0]);
    },
    m(target, anchor) {
      insert(target, t, anchor);
    },
    p(ctx2, [dirty]) {
      if (dirty & 1)
        set_data(t, ctx2[0]);
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(t);
    }
  };
}
function instance20($$self, $$props, $$invalidate) {
  let { str = DEFAULT_UNDEFINED } = $$props;
  $$self.$$set = ($$props2) => {
    if ("str" in $$props2)
      $$invalidate(0, str = $$props2.str);
  };
  return [str];
}
var Nullable = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance20, create_fragment20, safe_not_equal, { str: 0 });
  }
};
var Nullable_default = Nullable;

// src/builder/view/creatures/Creature.svelte
function add_css19(target) {
  append_styles(target, "svelte-1bxabyd", '.creature-name-container.svelte-1bxabyd{display:grid;grid-template-areas:"add name"\n            ". desc";justify-content:flex-start;align-items:center;grid-template-columns:auto 1fr}.setting-item-description.svelte-1bxabyd{grid-area:desc}.creature-40.svelte-1bxabyd{width:40%}.creature-15.svelte-1bxabyd{width:15%}');
}
function create_if_block16(ctx) {
  let span;
  let t_value = getSource(ctx[0].source) + "";
  let t;
  let span_aria_label_value;
  return {
    c() {
      span = element("span");
      t = text(t_value);
      attr(span, "aria-label", span_aria_label_value = getTooltip(ctx[0].source));
    },
    m(target, anchor) {
      insert(target, span, anchor);
      append(span, t);
    },
    p(ctx2, dirty) {
      if (dirty & 1 && t_value !== (t_value = getSource(ctx2[0].source) + ""))
        set_data(t, t_value);
      if (dirty & 1 && span_aria_label_value !== (span_aria_label_value = getTooltip(ctx2[0].source))) {
        attr(span, "aria-label", span_aria_label_value);
      }
    },
    d(detaching) {
      if (detaching)
        detach(span);
    }
  };
}
function create_fragment21(ctx) {
  let tr;
  let td0;
  let div3;
  let div0;
  let add_action;
  let t0;
  let div1;
  let t1_value = ctx[0].name + "";
  let t1;
  let t2;
  let div2;
  let t3;
  let td1;
  let nullable0;
  let t4;
  let td2;
  let nullable1;
  let t5;
  let td3;
  let nullable2;
  let t6;
  let td4;
  let nullable3;
  let current;
  let mounted;
  let dispose;
  let if_block = ctx[0].source?.length && create_if_block16(ctx);
  nullable0 = new Nullable_default({
    props: { str: ctx[0].cr ?? 0 }
  });
  nullable1 = new Nullable_default({
    props: {
      str: ctx[0].type ?? DEFAULT_UNDEFINED
    }
  });
  nullable2 = new Nullable_default({
    props: {
      str: ctx[0].size ?? DEFAULT_UNDEFINED
    }
  });
  nullable3 = new Nullable_default({
    props: {
      str: ctx[0].alignment ?? DEFAULT_UNDEFINED
    }
  });
  return {
    c() {
      tr = element("tr");
      td0 = element("td");
      div3 = element("div");
      div0 = element("div");
      t0 = space();
      div1 = element("div");
      t1 = text(t1_value);
      t2 = space();
      div2 = element("div");
      if (if_block)
        if_block.c();
      t3 = space();
      td1 = element("td");
      create_component(nullable0.$$.fragment);
      t4 = space();
      td2 = element("td");
      create_component(nullable1.$$.fragment);
      t5 = space();
      td3 = element("td");
      create_component(nullable2.$$.fragment);
      t6 = space();
      td4 = element("td");
      create_component(nullable3.$$.fragment);
      attr(div1, "class", "setting-item-name");
      attr(div2, "class", "setting-item-description svelte-1bxabyd");
      attr(div3, "class", "creature-name-container svelte-1bxabyd");
      attr(td0, "class", "creature-name creature-40 svelte-1bxabyd");
      attr(td1, "class", "creature-cr creature-15 svelte-1bxabyd");
      attr(td2, "class", "creature-type creature-15 svelte-1bxabyd");
      attr(td3, "class", "creature-size creature-15 svelte-1bxabyd");
      attr(td4, "class", "creature-alignment creature-15 svelte-1bxabyd");
      attr(tr, "class", "creature");
    },
    m(target, anchor) {
      insert(target, tr, anchor);
      append(tr, td0);
      append(td0, div3);
      append(div3, div0);
      append(div3, t0);
      append(div3, div1);
      append(div1, t1);
      append(div3, t2);
      append(div3, div2);
      if (if_block)
        if_block.m(div2, null);
      append(tr, t3);
      append(tr, td1);
      mount_component(nullable0, td1, null);
      append(tr, t4);
      append(tr, td2);
      mount_component(nullable1, td2, null);
      append(tr, t5);
      append(tr, td3);
      mount_component(nullable2, td3, null);
      append(tr, t6);
      append(tr, td4);
      mount_component(nullable3, td4, null);
      current = true;
      if (!mounted) {
        dispose = [
          action_destroyer(add_action = ctx[1].call(null, div0)),
          listen(div0, "click", ctx[3]),
          listen(div1, "mouseover", ctx[4])
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if ((!current || dirty & 1) && t1_value !== (t1_value = ctx2[0].name + ""))
        set_data(t1, t1_value);
      if (ctx2[0].source?.length) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block16(ctx2);
          if_block.c();
          if_block.m(div2, null);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
      const nullable0_changes = {};
      if (dirty & 1)
        nullable0_changes.str = ctx2[0].cr ?? 0;
      nullable0.$set(nullable0_changes);
      const nullable1_changes = {};
      if (dirty & 1)
        nullable1_changes.str = ctx2[0].type ?? DEFAULT_UNDEFINED;
      nullable1.$set(nullable1_changes);
      const nullable2_changes = {};
      if (dirty & 1)
        nullable2_changes.str = ctx2[0].size ?? DEFAULT_UNDEFINED;
      nullable2.$set(nullable2_changes);
      const nullable3_changes = {};
      if (dirty & 1)
        nullable3_changes.str = ctx2[0].alignment ?? DEFAULT_UNDEFINED;
      nullable3.$set(nullable3_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(nullable0.$$.fragment, local);
      transition_in(nullable1.$$.fragment, local);
      transition_in(nullable2.$$.fragment, local);
      transition_in(nullable3.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(nullable0.$$.fragment, local);
      transition_out(nullable1.$$.fragment, local);
      transition_out(nullable2.$$.fragment, local);
      transition_out(nullable3.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(tr);
      if (if_block)
        if_block.d();
      destroy_component(nullable0);
      destroy_component(nullable1);
      destroy_component(nullable2);
      destroy_component(nullable3);
      mounted = false;
      run_all(dispose);
    }
  };
}
function stringify(property, depth = 0, joiner = " ", parens = true) {
  const ret = [];
  if (depth == 5) {
    return "";
  }
  if (property == null)
    return ``;
  if (typeof property == "string")
    return property;
  if (typeof property == "number")
    return `${property}`;
  if (Array.isArray(property)) {
    ret.push(`${parens ? "(" : ""}${property.map((p) => stringify(p, depth++)).join(joiner)}${parens ? ")" : ""}`);
  } else if (typeof property == "object") {
    for (const value of Object.values(property)) {
      ret.push(stringify(value, depth++));
    }
  }
  return ret.join(" ");
}
function getSource(source) {
  if (!Array.isArray(source))
    return source;
  let sliced = source.slice(0, 2);
  if (source.length > 2) {
    sliced.push(`and ${source.length - 2} more`);
  }
  return stringify(sliced, 0, ", ", false);
}
function getTooltip(source) {
  if (!Array.isArray(source))
    return "";
  return stringify(source, 0, ", ", false);
}
function instance21($$self, $$props, $$invalidate) {
  const plugin = getContext("plugin");
  let { creature } = $$props;
  const add = (node) => {
    new import_obsidian29.ExtraButtonComponent(node).setIcon("plus-with-circle");
  };
  function show(node) {
    if (plugin.canUseStatBlocks && plugin.statblockVersion?.major >= 2) {
      const statblockNode = createDiv();
      const statblock = plugin.statblocks.render(creature, statblockNode);
      if (statblock) {
        const popover = new import_obsidian29.HoverPopover({ hoverPopover: null }, node);
        popover.hoverEl.appendChild(statblockNode);
      }
    }
  }
  const click_handler3 = () => encounter.add(creature);
  const mouseover_handler = (evt) => show(evt.currentTarget);
  $$self.$$set = ($$props2) => {
    if ("creature" in $$props2)
      $$invalidate(0, creature = $$props2.creature);
  };
  return [creature, add, show, click_handler3, mouseover_handler];
}
var Creature4 = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance21, create_fragment21, safe_not_equal, { creature: 0 }, add_css19);
  }
};
var Creature_default2 = Creature4;

// src/builder/view/creatures/Filters.svelte
var import_obsidian31 = require("obsidian");

// node_modules/svelte/transition/index.mjs
function fade(node, { delay = 0, duration = 400, easing = identity } = {}) {
  const o = +getComputedStyle(node).opacity;
  return {
    delay,
    duration,
    easing,
    css: (t) => `opacity: ${t * o}`
  };
}
function slide(node, { delay = 0, duration = 400, easing = cubicOut } = {}) {
  const style = getComputedStyle(node);
  const opacity = +style.opacity;
  const height = parseFloat(style.height);
  const padding_top = parseFloat(style.paddingTop);
  const padding_bottom = parseFloat(style.paddingBottom);
  const margin_top = parseFloat(style.marginTop);
  const margin_bottom = parseFloat(style.marginBottom);
  const border_top_width = parseFloat(style.borderTopWidth);
  const border_bottom_width = parseFloat(style.borderBottomWidth);
  return {
    delay,
    duration,
    easing,
    css: (t) => `overflow: hidden;opacity: ${Math.min(t * 20, 1) * opacity};height: ${t * height}px;padding-top: ${t * padding_top}px;padding-bottom: ${t * padding_bottom}px;margin-top: ${t * margin_top}px;margin-bottom: ${t * margin_bottom}px;border-top-width: ${t * border_top_width}px;border-bottom-width: ${t * border_bottom_width}px;`
  };
}

// src/builder/view/creatures/Thumb.svelte
function add_css20(target) {
  append_styles(target, "svelte-1dlbj12", '.thumb.svelte-1dlbj12{position:absolute;top:50%;width:0;height:0}.thumb-content.svelte-1dlbj12{position:relative;width:fit-content;height:fit-content;transform:translate(-50%, -50%)}.thumb-content.svelte-1dlbj12::before{content:"";position:absolute;width:200%;height:200%;transform:translate(-25%, -25%) scale(0);border-radius:100vh;background:var(--interactive-hover);opacity:30%;transition:transform 100ms ease-in-out}.thumb-content.active.svelte-1dlbj12::before{transform:translate(-25%, -25%) scale(1)}');
}
function create_fragment22(ctx) {
  let div1;
  let div0;
  let div1_style_value;
  let handle_action;
  let current;
  let mounted;
  let dispose;
  const default_slot_template = ctx[4].default;
  const default_slot = create_slot(default_slot_template, ctx, ctx[3], null);
  return {
    c() {
      div1 = element("div");
      div0 = element("div");
      if (default_slot)
        default_slot.c();
      attr(div0, "class", "thumb-content svelte-1dlbj12");
      toggle_class(div0, "active", ctx[1]);
      attr(div1, "class", "thumb svelte-1dlbj12");
      attr(div1, "style", div1_style_value = `left: ${ctx[0] * 100}%;`);
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      append(div1, div0);
      if (default_slot) {
        default_slot.m(div0, null);
      }
      current = true;
      if (!mounted) {
        dispose = [
          action_destroyer(handle_action = handle.call(null, div1)),
          listen(div1, "dragstart", ctx[6]),
          listen(div1, "drag", ctx[7]),
          listen(div1, "dragend", ctx[8]),
          listen(div1, "click", stop_propagation(ctx[5]))
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & 8)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            ctx2[3],
            !current ? get_all_dirty_from_scope(ctx2[3]) : get_slot_changes(default_slot_template, ctx2[3], dirty, null),
            null
          );
        }
      }
      if (!current || dirty & 2) {
        toggle_class(div0, "active", ctx2[1]);
      }
      if (!current || dirty & 1 && div1_style_value !== (div1_style_value = `left: ${ctx2[0] * 100}%;`)) {
        attr(div1, "style", div1_style_value);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div1);
      if (default_slot)
        default_slot.d(detaching);
      mounted = false;
      run_all(dispose);
    }
  };
}
function handle(node) {
  const onDown = getOnDown(node);
  node.addEventListener("touchstart", onDown);
  node.addEventListener("mousedown", onDown);
  return {
    destroy() {
      node.removeEventListener("touchstart", onDown);
      node.removeEventListener("mousedown", onDown);
    }
  };
}
function getOnDown(node) {
  const onMove = getOnMove(node);
  return function(e) {
    e.preventDefault();
    node.dispatchEvent(new CustomEvent("dragstart"));
    const moveevent = "touches" in e ? "touchmove" : "mousemove";
    const upevent = "touches" in e ? "touchend" : "mouseup";
    document.addEventListener(moveevent, onMove);
    document.addEventListener(upevent, onUp);
    function onUp(e2) {
      e2.stopPropagation();
      document.removeEventListener(moveevent, onMove);
      document.removeEventListener(upevent, onUp);
      node.dispatchEvent(new CustomEvent("dragend"));
    }
  };
}
function getOnMove(node) {
  const track = node.parentElement;
  return function(e) {
    const { left: left2, width } = track.getBoundingClientRect();
    const clickOffset = "touches" in e ? e.touches[0].clientX : e.clientX;
    const clickPos = Math.min(Math.max((clickOffset - left2) / width, 0), 1) || 0;
    node.dispatchEvent(new CustomEvent("drag", { detail: clickPos }));
  };
}
function instance22($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  const dispatch2 = createEventDispatcher();
  let active2;
  let { pos } = $$props;
  function click_handler3(event) {
    bubble.call(this, $$self, event);
  }
  const dragstart_handler = () => ($$invalidate(1, active2 = true), dispatch2("active", true));
  const drag_handler = ({ detail: v }) => $$invalidate(0, pos = v);
  const dragend_handler = () => ($$invalidate(1, active2 = false), dispatch2("active", false));
  $$self.$$set = ($$props2) => {
    if ("pos" in $$props2)
      $$invalidate(0, pos = $$props2.pos);
    if ("$$scope" in $$props2)
      $$invalidate(3, $$scope = $$props2.$$scope);
  };
  return [
    pos,
    active2,
    dispatch2,
    $$scope,
    slots,
    click_handler3,
    dragstart_handler,
    drag_handler,
    dragend_handler
  ];
}
var Thumb = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance22, create_fragment22, safe_not_equal, { pos: 0 }, add_css20);
  }
};
var Thumb_default = Thumb;

// src/builder/view/creatures/Slider.svelte
function add_css21(target) {
  append_styles(target, "svelte-1skvzai", "input.svelte-1skvzai{display:none}.track-container.svelte-1skvzai{width:calc(100% - 16px);height:16px;display:flex;align-items:center}.track.svelte-1skvzai{margin:0 8px;position:relative;height:4px;width:calc(100% - 16px);border-radius:100vh;background:var(--background-modifier-form-field)}.progress.svelte-1skvzai{position:absolute;left:0;right:0;top:0;bottom:0;border-radius:100vh;background:var(--interactive-accent)}.thumb.svelte-1skvzai{width:16px;height:16px;border-radius:100vh;background:var(--interactive-accent)}.thumb.svelte-1skvzai:hover,.thumb.svelte-1skvzai:active{background:var(--interactive-hover)}");
}
function create_if_block_110(ctx) {
  let input;
  let input_value_value;
  let input_name_value;
  return {
    c() {
      input = element("input");
      attr(input, "type", "number");
      input.value = input_value_value = ctx[0][1];
      attr(input, "name", input_name_value = ctx[1][1]);
      attr(input, "class", "svelte-1skvzai");
    },
    m(target, anchor) {
      insert(target, input, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & 1 && input_value_value !== (input_value_value = ctx2[0][1]) && input.value !== input_value_value) {
        input.value = input_value_value;
      }
      if (dirty & 2 && input_name_value !== (input_name_value = ctx2[1][1])) {
        attr(input, "name", input_name_value);
      }
    },
    d(detaching) {
      if (detaching)
        detach(input);
    }
  };
}
function create_default_slot_1(ctx) {
  let div;
  return {
    c() {
      div = element("div");
      attr(div, "class", "thumb svelte-1skvzai");
    },
    m(target, anchor) {
      insert(target, div, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching)
        detach(div);
    }
  };
}
function create_if_block17(ctx) {
  let thumb;
  let updating_pos;
  let current;
  function thumb_pos_binding_1(value) {
    ctx[13](value);
  }
  let thumb_props = {
    $$slots: { default: [create_default_slot] },
    $$scope: { ctx }
  };
  if (ctx[3][1] !== void 0) {
    thumb_props.pos = ctx[3][1];
  }
  thumb = new Thumb_default({ props: thumb_props });
  binding_callbacks.push(() => bind(thumb, "pos", thumb_pos_binding_1));
  thumb.$on("active", ctx[14]);
  return {
    c() {
      create_component(thumb.$$.fragment);
    },
    m(target, anchor) {
      mount_component(thumb, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const thumb_changes = {};
      if (dirty & 524288) {
        thumb_changes.$$scope = { dirty, ctx: ctx2 };
      }
      if (!updating_pos && dirty & 8) {
        updating_pos = true;
        thumb_changes.pos = ctx2[3][1];
        add_flush_callback(() => updating_pos = false);
      }
      thumb.$set(thumb_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(thumb.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(thumb.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(thumb, detaching);
    }
  };
}
function create_default_slot(ctx) {
  let div;
  return {
    c() {
      div = element("div");
      attr(div, "class", "thumb svelte-1skvzai");
    },
    m(target, anchor) {
      insert(target, div, anchor);
    },
    p: noop,
    d(detaching) {
      if (detaching)
        detach(div);
    }
  };
}
function create_fragment23(ctx) {
  let div2;
  let input;
  let input_value_value;
  let input_name_value;
  let t0;
  let t1;
  let div1;
  let div0;
  let t2;
  let thumb;
  let updating_pos;
  let t3;
  let current;
  let mounted;
  let dispose;
  let if_block0 = ctx[2] && create_if_block_110(ctx);
  function thumb_pos_binding(value) {
    ctx[11](value);
  }
  let thumb_props = {
    $$slots: { default: [create_default_slot_1] },
    $$scope: { ctx }
  };
  if (ctx[3][0] !== void 0) {
    thumb_props.pos = ctx[3][0];
  }
  thumb = new Thumb_default({ props: thumb_props });
  binding_callbacks.push(() => bind(thumb, "pos", thumb_pos_binding));
  thumb.$on("active", ctx[12]);
  let if_block1 = ctx[2] && create_if_block17(ctx);
  return {
    c() {
      div2 = element("div");
      input = element("input");
      t0 = space();
      if (if_block0)
        if_block0.c();
      t1 = space();
      div1 = element("div");
      div0 = element("div");
      t2 = space();
      create_component(thumb.$$.fragment);
      t3 = space();
      if (if_block1)
        if_block1.c();
      attr(input, "type", "number");
      input.value = input_value_value = ctx[0][0];
      attr(input, "name", input_name_value = ctx[1][0]);
      attr(input, "class", "svelte-1skvzai");
      attr(div0, "class", "progress svelte-1skvzai");
      attr(div0, "style", ctx[5]);
      attr(div1, "class", "track svelte-1skvzai");
      attr(div2, "class", "track-container svelte-1skvzai");
    },
    m(target, anchor) {
      insert(target, div2, anchor);
      append(div2, input);
      append(div2, t0);
      if (if_block0)
        if_block0.m(div2, null);
      append(div2, t1);
      append(div2, div1);
      append(div1, div0);
      append(div1, t2);
      mount_component(thumb, div1, null);
      append(div1, t3);
      if (if_block1)
        if_block1.m(div1, null);
      current = true;
      if (!mounted) {
        dispose = listen(div2, "click", ctx[6]);
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (!current || dirty & 1 && input_value_value !== (input_value_value = ctx2[0][0]) && input.value !== input_value_value) {
        input.value = input_value_value;
      }
      if (!current || dirty & 2 && input_name_value !== (input_name_value = ctx2[1][0])) {
        attr(input, "name", input_name_value);
      }
      if (ctx2[2]) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
        } else {
          if_block0 = create_if_block_110(ctx2);
          if_block0.c();
          if_block0.m(div2, t1);
        }
      } else if (if_block0) {
        if_block0.d(1);
        if_block0 = null;
      }
      if (!current || dirty & 32) {
        attr(div0, "style", ctx2[5]);
      }
      const thumb_changes = {};
      if (dirty & 524288) {
        thumb_changes.$$scope = { dirty, ctx: ctx2 };
      }
      if (!updating_pos && dirty & 8) {
        updating_pos = true;
        thumb_changes.pos = ctx2[3][0];
        add_flush_callback(() => updating_pos = false);
      }
      thumb.$set(thumb_changes);
      if (ctx2[2]) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
          if (dirty & 4) {
            transition_in(if_block1, 1);
          }
        } else {
          if_block1 = create_if_block17(ctx2);
          if_block1.c();
          transition_in(if_block1, 1);
          if_block1.m(div1, null);
        }
      } else if (if_block1) {
        group_outros();
        transition_out(if_block1, 1, 1, () => {
          if_block1 = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(thumb.$$.fragment, local);
      transition_in(if_block1);
      current = true;
    },
    o(local) {
      transition_out(thumb.$$.fragment, local);
      transition_out(if_block1);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div2);
      if (if_block0)
        if_block0.d();
      destroy_component(thumb);
      if (if_block1)
        if_block1.d();
      mounted = false;
      dispose();
    }
  };
}
function checkPos(pos) {
  return [Math.min(...pos), Math.max(...pos)];
}
function instance23($$self, $$props, $$invalidate) {
  let progress;
  const dispatch2 = createEventDispatcher();
  let { name: name2 = [] } = $$props;
  let { range = false } = $$props;
  let { min: min2 = 0 } = $$props;
  let { max: max2 = 100 } = $$props;
  let { step = 1 } = $$props;
  let { value = [min2, max2] } = $$props;
  let pos;
  let active2 = false;
  let { order: order2 = false } = $$props;
  function setValue(pos2) {
    const offset2 = min2 % step;
    const width = max2 - min2;
    $$invalidate(0, value = pos2.map((v) => min2 + v * width).map((v) => Math.round((v - offset2) / step) * step + offset2));
    dispatch2("input", value);
  }
  function setPos(value2) {
    $$invalidate(3, pos = value2.map((v) => Math.min(Math.max(v, min2), max2)).map((v) => (v - min2) / (max2 - min2)));
  }
  function clamp() {
    setPos(value);
    setValue(pos);
  }
  function handleClick(evt) {
    const target = evt.target;
    const click = evt.offsetX / target.clientWidth;
    const distances = pos.map((p) => Math.abs(click - p));
    if (distances[1] > distances[0]) {
      $$invalidate(3, pos = [click, pos[1]]);
    } else {
      $$invalidate(3, pos = [pos[0], click]);
    }
    setValue(pos);
  }
  function thumb_pos_binding(value2) {
    if ($$self.$$.not_equal(pos[0], value2)) {
      pos[0] = value2;
      $$invalidate(3, pos), $$invalidate(2, range), $$invalidate(10, order2), $$invalidate(4, active2);
    }
  }
  const active_handler = ({ detail: v }) => $$invalidate(4, active2 = v);
  function thumb_pos_binding_1(value2) {
    if ($$self.$$.not_equal(pos[1], value2)) {
      pos[1] = value2;
      $$invalidate(3, pos), $$invalidate(2, range), $$invalidate(10, order2), $$invalidate(4, active2);
    }
  }
  const active_handler_1 = ({ detail: v }) => $$invalidate(4, active2 = v);
  $$self.$$set = ($$props2) => {
    if ("name" in $$props2)
      $$invalidate(1, name2 = $$props2.name);
    if ("range" in $$props2)
      $$invalidate(2, range = $$props2.range);
    if ("min" in $$props2)
      $$invalidate(7, min2 = $$props2.min);
    if ("max" in $$props2)
      $$invalidate(8, max2 = $$props2.max);
    if ("step" in $$props2)
      $$invalidate(9, step = $$props2.step);
    if ("value" in $$props2)
      $$invalidate(0, value = $$props2.value);
    if ("order" in $$props2)
      $$invalidate(10, order2 = $$props2.order);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & 1052) {
      $:
        if (range && order2 && active2)
          $$invalidate(3, pos = checkPos(pos));
    }
    if ($$self.$$.dirty & 24) {
      $:
        if (active2)
          setValue(pos);
    }
    if ($$self.$$.dirty & 17) {
      $:
        if (!active2)
          setPos(value);
    }
    if ($$self.$$.dirty & 384) {
      $:
        min2, max2, clamp();
    }
    if ($$self.$$.dirty & 12) {
      $:
        $$invalidate(5, progress = `
    left: ${range ? Math.min(pos[0], pos[1]) * 100 : 0}%;
    right: ${100 - Math.max(pos[0], range ? pos[1] : pos[0]) * 100}%;
  `);
    }
  };
  return [
    value,
    name2,
    range,
    pos,
    active2,
    progress,
    handleClick,
    min2,
    max2,
    step,
    order2,
    thumb_pos_binding,
    active_handler,
    thumb_pos_binding_1,
    active_handler_1
  ];
}
var Slider = class extends SvelteComponent {
  constructor(options) {
    super();
    init(
      this,
      options,
      instance23,
      create_fragment23,
      safe_not_equal,
      {
        name: 1,
        range: 2,
        min: 7,
        max: 8,
        step: 9,
        value: 0,
        order: 10
      },
      add_css21
    );
  }
};
var Slider_default = Slider;

// node_modules/svelte-multiselect/CircleSpinner.svelte
function add_css22(target) {
  append_styles(target, "svelte-66wdl1", "div.svelte-66wdl1{display:inline-block;vertical-align:middle;margin:0 3pt;border-width:calc(1em / 5);border-style:solid;border-radius:50%;animation:var(--duration) infinite svelte-66wdl1-rotate}@keyframes svelte-66wdl1-rotate{100%{transform:rotate(360deg)}}");
}
function create_fragment24(ctx) {
  let div;
  let style_border_color = `${ctx[0]} transparent ${ctx[0]}
  ${ctx[0]}`;
  return {
    c() {
      div = element("div");
      set_style(div, "--duration", ctx[1]);
      attr(div, "class", "svelte-66wdl1");
      set_style(div, "border-color", style_border_color);
      set_style(div, "width", ctx[2]);
      set_style(div, "height", ctx[2]);
    },
    m(target, anchor) {
      insert(target, div, anchor);
    },
    p(ctx2, [dirty]) {
      if (dirty & 2) {
        set_style(div, "--duration", ctx2[1]);
      }
      if (dirty & 1 && style_border_color !== (style_border_color = `${ctx2[0]} transparent ${ctx2[0]}
  ${ctx2[0]}`)) {
        set_style(div, "border-color", style_border_color);
      }
      if (dirty & 4) {
        set_style(div, "width", ctx2[2]);
      }
      if (dirty & 4) {
        set_style(div, "height", ctx2[2]);
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(div);
    }
  };
}
function instance24($$self, $$props, $$invalidate) {
  let { color = `cornflowerblue` } = $$props;
  let { duration = `1.5s` } = $$props;
  let { size: size2 = `1em` } = $$props;
  $$self.$$set = ($$props2) => {
    if ("color" in $$props2)
      $$invalidate(0, color = $$props2.color);
    if ("duration" in $$props2)
      $$invalidate(1, duration = $$props2.duration);
    if ("size" in $$props2)
      $$invalidate(2, size2 = $$props2.size);
  };
  return [color, duration, size2];
}
var CircleSpinner = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance24, create_fragment24, safe_not_equal, { color: 0, duration: 1, size: 2 }, add_css22);
  }
};
var CircleSpinner_default = CircleSpinner;

// node_modules/svelte-multiselect/icons/ChevronExpand.svelte
function create_fragment25(ctx) {
  let svg;
  let path;
  let svg_levels = [ctx[0], { fill: "currentColor" }, { viewBox: "0 0 16 16" }];
  let svg_data = {};
  for (let i = 0; i < svg_levels.length; i += 1) {
    svg_data = assign(svg_data, svg_levels[i]);
  }
  return {
    c() {
      svg = svg_element("svg");
      path = svg_element("path");
      attr(path, "d", "M3.646 9.146a.5.5 0 0 1 .708 0L8 12.793l3.646-3.647a.5.5 0 0 1 .708.708l-4 4a.5.5 0 0 1-.708 0l-4-4a.5.5 0 0 1 0-.708zm0-2.292a.5.5 0 0 0 .708 0L8 3.207l3.646 3.647a.5.5 0 0 0 .708-.708l-4-4a.5.5 0 0 0-.708 0l-4 4a.5.5 0 0 0 0 .708z");
      set_svg_attributes(svg, svg_data);
    },
    m(target, anchor) {
      insert(target, svg, anchor);
      append(svg, path);
    },
    p(ctx2, [dirty]) {
      set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
        dirty & 1 && ctx2[0],
        { fill: "currentColor" },
        { viewBox: "0 0 16 16" }
      ]));
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(svg);
    }
  };
}
function instance25($$self, $$props, $$invalidate) {
  $$self.$$set = ($$new_props) => {
    $$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
  };
  $$props = exclude_internal_props($$props);
  return [$$props];
}
var ChevronExpand = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance25, create_fragment25, safe_not_equal, {});
  }
};
var ChevronExpand_default = ChevronExpand;

// node_modules/svelte-multiselect/icons/Cross.svelte
function create_fragment26(ctx) {
  let svg;
  let path;
  let svg_levels = [ctx[0], { viewBox: "0 0 20 20" }, { fill: "currentColor" }];
  let svg_data = {};
  for (let i = 0; i < svg_levels.length; i += 1) {
    svg_data = assign(svg_data, svg_levels[i]);
  }
  return {
    c() {
      svg = svg_element("svg");
      path = svg_element("path");
      attr(path, "d", "M10 1.6a8.4 8.4 0 100 16.8 8.4 8.4 0 000-16.8zm4.789 11.461L13.06 14.79 10 11.729l-3.061 3.06L5.21 13.06 8.272 10 5.211 6.939 6.94 5.211 10 8.271l3.061-3.061 1.729 1.729L11.728 10l3.061 3.061z");
      set_svg_attributes(svg, svg_data);
    },
    m(target, anchor) {
      insert(target, svg, anchor);
      append(svg, path);
    },
    p(ctx2, [dirty]) {
      set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
        dirty & 1 && ctx2[0],
        { viewBox: "0 0 20 20" },
        { fill: "currentColor" }
      ]));
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(svg);
    }
  };
}
function instance26($$self, $$props, $$invalidate) {
  $$self.$$set = ($$new_props) => {
    $$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
  };
  $$props = exclude_internal_props($$props);
  return [$$props];
}
var Cross = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance26, create_fragment26, safe_not_equal, {});
  }
};
var Cross_default = Cross;

// node_modules/svelte-multiselect/icons/Disabled.svelte
function create_fragment27(ctx) {
  let svg;
  let path0;
  let path1;
  let svg_levels = [ctx[0], { viewBox: "0 0 24 24" }, { fill: "currentColor" }];
  let svg_data = {};
  for (let i = 0; i < svg_levels.length; i += 1) {
    svg_data = assign(svg_data, svg_levels[i]);
  }
  return {
    c() {
      svg = svg_element("svg");
      path0 = svg_element("path");
      path1 = svg_element("path");
      attr(path0, "fill", "none");
      attr(path0, "d", "M0 0h24v24H0V0z");
      attr(path1, "d", "M14.48 11.95c.17.02.34.05.52.05 2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4c0 .18.03.35.05.52l3.43 3.43zm2.21 2.21L22.53 20H23v-2c0-2.14-3.56-3.5-6.31-3.84zM0 3.12l4 4V10H1v2h3v3h2v-3h2.88l2.51 2.51C9.19 15.11 7 16.3 7 18v2h9.88l4 4 1.41-1.41L1.41 1.71 0 3.12zM6.88 10H6v-.88l.88.88z");
      set_svg_attributes(svg, svg_data);
    },
    m(target, anchor) {
      insert(target, svg, anchor);
      append(svg, path0);
      append(svg, path1);
    },
    p(ctx2, [dirty]) {
      set_svg_attributes(svg, svg_data = get_spread_update(svg_levels, [
        dirty & 1 && ctx2[0],
        { viewBox: "0 0 24 24" },
        { fill: "currentColor" }
      ]));
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(svg);
    }
  };
}
function instance27($$self, $$props, $$invalidate) {
  $$self.$$set = ($$new_props) => {
    $$invalidate(0, $$props = assign(assign({}, $$props), exclude_internal_props($$new_props)));
  };
  $$props = exclude_internal_props($$props);
  return [$$props];
}
var Disabled = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance27, create_fragment27, safe_not_equal, {});
  }
};
var Disabled_default = Disabled;

// node_modules/svelte/motion/index.mjs
function is_date(obj) {
  return Object.prototype.toString.call(obj) === "[object Date]";
}
function tick_spring(ctx, last_value, current_value, target_value) {
  if (typeof current_value === "number" || is_date(current_value)) {
    const delta = target_value - current_value;
    const velocity = (current_value - last_value) / (ctx.dt || 1 / 60);
    const spring2 = ctx.opts.stiffness * delta;
    const damper = ctx.opts.damping * velocity;
    const acceleration = (spring2 - damper) * ctx.inv_mass;
    const d = (velocity + acceleration) * ctx.dt;
    if (Math.abs(d) < ctx.opts.precision && Math.abs(delta) < ctx.opts.precision) {
      return target_value;
    } else {
      ctx.settled = false;
      return is_date(current_value) ? new Date(current_value.getTime() + d) : current_value + d;
    }
  } else if (Array.isArray(current_value)) {
    return current_value.map((_, i) => tick_spring(ctx, last_value[i], current_value[i], target_value[i]));
  } else if (typeof current_value === "object") {
    const next_value = {};
    for (const k in current_value) {
      next_value[k] = tick_spring(ctx, last_value[k], current_value[k], target_value[k]);
    }
    return next_value;
  } else {
    throw new Error(`Cannot spring ${typeof current_value} values`);
  }
}
function spring(value, opts = {}) {
  const store = writable(value);
  const { stiffness = 0.15, damping = 0.8, precision = 0.01 } = opts;
  let last_time;
  let task;
  let current_token;
  let last_value = value;
  let target_value = value;
  let inv_mass = 1;
  let inv_mass_recovery_rate = 0;
  let cancel_task = false;
  function set(new_value, opts2 = {}) {
    target_value = new_value;
    const token = current_token = {};
    if (value == null || opts2.hard || spring2.stiffness >= 1 && spring2.damping >= 1) {
      cancel_task = true;
      last_time = now();
      last_value = new_value;
      store.set(value = target_value);
      return Promise.resolve();
    } else if (opts2.soft) {
      const rate = opts2.soft === true ? 0.5 : +opts2.soft;
      inv_mass_recovery_rate = 1 / (rate * 60);
      inv_mass = 0;
    }
    if (!task) {
      last_time = now();
      cancel_task = false;
      task = loop((now2) => {
        if (cancel_task) {
          cancel_task = false;
          task = null;
          return false;
        }
        inv_mass = Math.min(inv_mass + inv_mass_recovery_rate, 1);
        const ctx = {
          inv_mass,
          opts: spring2,
          settled: true,
          dt: (now2 - last_time) * 60 / 1e3
        };
        const next_value = tick_spring(ctx, last_value, value, target_value);
        last_time = now2;
        last_value = value;
        store.set(value = next_value);
        if (ctx.settled) {
          task = null;
        }
        return !ctx.settled;
      });
    }
    return new Promise((fulfil) => {
      task.promise.then(() => {
        if (token === current_token)
          fulfil();
      });
    });
  }
  const spring2 = {
    set,
    update: (fn2, opts2) => set(fn2(target_value, value), opts2),
    subscribe: store.subscribe,
    stiffness,
    damping,
    precision
  };
  return spring2;
}

// node_modules/svelte-multiselect/Wiggle.svelte
function create_fragment28(ctx) {
  let span;
  let style_transform = `rotate(${ctx[0].angle}deg) scale(${ctx[0].scale}) translate(${ctx[0].dx}px,
  ${ctx[0].dy}px)`;
  let current;
  const default_slot_template = ctx[11].default;
  const default_slot = create_slot(default_slot_template, ctx, ctx[10], null);
  return {
    c() {
      span = element("span");
      if (default_slot)
        default_slot.c();
      set_style(span, "transform", style_transform);
    },
    m(target, anchor) {
      insert(target, span, anchor);
      if (default_slot) {
        default_slot.m(span, null);
      }
      current = true;
    },
    p(ctx2, [dirty]) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & 1024)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            ctx2[10],
            !current ? get_all_dirty_from_scope(ctx2[10]) : get_slot_changes(default_slot_template, ctx2[10], dirty, null),
            null
          );
        }
      }
      if (dirty & 1 && style_transform !== (style_transform = `rotate(${ctx2[0].angle}deg) scale(${ctx2[0].scale}) translate(${ctx2[0].dx}px,
  ${ctx2[0].dy}px)`)) {
        set_style(span, "transform", style_transform);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(span);
      if (default_slot)
        default_slot.d(detaching);
    }
  };
}
function instance28($$self, $$props, $$invalidate) {
  let $store;
  let { $$slots: slots = {}, $$scope } = $$props;
  let { wiggle = false } = $$props;
  let { angle = 0 } = $$props;
  let { scale = 1 } = $$props;
  let { dx = 0 } = $$props;
  let { dy = 0 } = $$props;
  let { duration = 200 } = $$props;
  let { stiffness = 0.05 } = $$props;
  let { damping = 0.1 } = $$props;
  let restState = { angle: 0, scale: 1, dx: 0, dy: 0 };
  let store = spring(restState, { stiffness, damping });
  component_subscribe($$self, store, (value) => $$invalidate(0, $store = value));
  $$self.$$set = ($$props2) => {
    if ("wiggle" in $$props2)
      $$invalidate(2, wiggle = $$props2.wiggle);
    if ("angle" in $$props2)
      $$invalidate(3, angle = $$props2.angle);
    if ("scale" in $$props2)
      $$invalidate(4, scale = $$props2.scale);
    if ("dx" in $$props2)
      $$invalidate(5, dx = $$props2.dx);
    if ("dy" in $$props2)
      $$invalidate(6, dy = $$props2.dy);
    if ("duration" in $$props2)
      $$invalidate(7, duration = $$props2.duration);
    if ("stiffness" in $$props2)
      $$invalidate(8, stiffness = $$props2.stiffness);
    if ("damping" in $$props2)
      $$invalidate(9, damping = $$props2.damping);
    if ("$$scope" in $$props2)
      $$invalidate(10, $$scope = $$props2.$$scope);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & 132) {
      $:
        if (wiggle)
          setTimeout(() => $$invalidate(2, wiggle = false), duration);
    }
    if ($$self.$$.dirty & 124) {
      $:
        store.set(wiggle ? { scale, angle, dx, dy } : restState);
    }
  };
  return [
    $store,
    store,
    wiggle,
    angle,
    scale,
    dx,
    dy,
    duration,
    stiffness,
    damping,
    $$scope,
    slots
  ];
}
var Wiggle = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance28, create_fragment28, safe_not_equal, {
      wiggle: 2,
      angle: 3,
      scale: 4,
      dx: 5,
      dy: 6,
      duration: 7,
      stiffness: 8,
      damping: 9
    });
  }
};
var Wiggle_default = Wiggle;

// node_modules/svelte-multiselect/MultiSelect.svelte
function add_css23(target) {
  append_styles(target, "svelte-cnxwog", ".svelte-cnxwog:where(div.multiselect){position:relative;align-items:center;display:flex;cursor:text;border:var(--sms-border, 1pt solid lightgray);border-radius:var(--sms-border-radius, 3pt);background:var(--sms-bg);max-width:var(--sms-max-width);padding:var(--sms-padding, 0 3pt);color:var(--sms-text-color);font-size:var(--sms-font-size, inherit);min-height:var(--sms-min-height, 19pt);margin:var(--sms-margin)}.svelte-cnxwog:where(div.multiselect.open){z-index:var(--sms-open-z-index, 4)}.svelte-cnxwog:where(div.multiselect:focus-within){border:var(--sms-focus-border, 1pt solid var(--sms-active-color, cornflowerblue))}.svelte-cnxwog:where(div.multiselect.disabled){background:var(--sms-disabled-bg, lightgray);cursor:not-allowed}.svelte-cnxwog:where(div.multiselect > ul.selected){display:flex;flex:1;padding:0;margin:0;flex-wrap:wrap}.svelte-cnxwog:where(div.multiselect > ul.selected > li){align-items:center;border-radius:3pt;display:flex;margin:2pt;line-height:normal;transition:0.3s;white-space:nowrap;background:var(--sms-selected-bg, rgba(0, 0, 0, 0.15));padding:var(--sms-selected-li-padding, 1pt 5pt);color:var(--sms-selected-text-color, var(--sms-text-color))}.svelte-cnxwog:where(div.multiselect button){border-radius:50%;display:flex;transition:0.2s;color:inherit;background:transparent;border:none;cursor:pointer;outline:none;padding:0;margin:0 0 0 3pt}.svelte-cnxwog:where(div.multiselect button.remove-all){margin:0 3pt}.svelte-cnxwog:where(ul.selected > li button:hover, button.remove-all:hover, button:focus){color:var(--sms-button-hover-color, lightskyblue)}.svelte-cnxwog:where(div.multiselect input){margin:auto 0;padding:0}.svelte-cnxwog:where(div.multiselect > ul.selected > li > input){border:none;outline:none;background:none;flex:1;min-width:2em;color:var(--sms-text-color);font-size:inherit;cursor:inherit;border-radius:0}.svelte-cnxwog:where(div.multiselect > ul.selected > li > input)::placeholder{padding-left:5pt;color:var(--sms-placeholder-color);opacity:var(--sms-placeholder-opacity)}.svelte-cnxwog:where(div.multiselect > input.form-control){width:2em;position:absolute;background:transparent;border:none;outline:none;z-index:-1;opacity:0;pointer-events:none}.svelte-cnxwog:where(div.multiselect > ul.options){list-style:none;padding:4pt 0;top:100%;left:0;width:100%;position:absolute;border-radius:1ex;overflow:auto;background:var(--sms-options-bg, white);max-height:var(--sms-options-max-height, 50vh);overscroll-behavior:var(--sms-options-overscroll, none);box-shadow:var(--sms-options-shadow, 0 0 14pt -8pt black);transition:all 0.2s}.svelte-cnxwog:where(div.multiselect > ul.options.hidden){visibility:hidden;opacity:0;transform:translateY(50px)}.svelte-cnxwog:where(div.multiselect > ul.options > li){padding:3pt 2ex;cursor:pointer;scroll-margin:var(--sms-options-scroll-margin, 100px)}.svelte-cnxwog:where(div.multiselect > ul.options span){padding:3pt 2ex}.svelte-cnxwog:where(div.multiselect > ul.options > li.selected){background:var(--sms-li-selected-bg);color:var(--sms-li-selected-color)}.svelte-cnxwog:where(div.multiselect > ul.options > li.active){background:var(--sms-li-active-bg, var(--sms-active-color, rgba(0, 0, 0, 0.15)))}.svelte-cnxwog:where(div.multiselect > ul.options > li.disabled){cursor:not-allowed;background:var(--sms-li-disabled-bg, #f5f5f6);color:var(--sms-li-disabled-text, #b8b8b8)}");
}
function get_each_context10(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[93] = list[i];
  child_ctx[100] = i;
  const constants_0 = child_ctx[93] instanceof Object ? child_ctx[93] : { label: child_ctx[93] };
  child_ctx[94] = constants_0.label;
  child_ctx[35] = constants_0.disabled !== void 0 ? constants_0.disabled : null;
  child_ctx[95] = constants_0.title !== void 0 ? constants_0.title : null;
  child_ctx[96] = constants_0.selectedTitle !== void 0 ? constants_0.selectedTitle : null;
  child_ctx[97] = constants_0.disabledTitle !== void 0 ? constants_0.disabledTitle : child_ctx[13];
  const constants_1 = child_ctx[0] === child_ctx[100];
  child_ctx[98] = constants_1;
  return child_ctx;
}
var get_option_slot_changes = (dirty) => ({ option: dirty[0] & 2 });
var get_option_slot_context = (ctx) => ({
  option: ctx[93],
  idx: ctx[100]
});
var get_remove_icon_slot_changes_1 = (dirty) => ({});
var get_remove_icon_slot_context_1 = (ctx) => ({});
var get_disabled_icon_slot_changes = (dirty) => ({});
var get_disabled_icon_slot_context = (ctx) => ({});
var get_spinner_slot_changes = (dirty) => ({});
var get_spinner_slot_context = (ctx) => ({});
function get_each_context_13(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[93] = list[i];
  child_ctx[100] = i;
  return child_ctx;
}
var get_remove_icon_slot_changes = (dirty) => ({});
var get_remove_icon_slot_context = (ctx) => ({});
var get_selected_slot_changes = (dirty) => ({ option: dirty[0] & 16 });
var get_selected_slot_context = (ctx) => ({
  option: ctx[93],
  idx: ctx[100]
});
function create_else_block_3(ctx) {
  let t_value = get_label(ctx[93]) + "";
  let t;
  return {
    c() {
      t = text(t_value);
    },
    m(target, anchor) {
      insert(target, t, anchor);
    },
    p(ctx2, dirty) {
      if (dirty[0] & 16 && t_value !== (t_value = get_label(ctx2[93]) + ""))
        set_data(t, t_value);
    },
    d(detaching) {
      if (detaching)
        detach(t);
    }
  };
}
function create_if_block_9(ctx) {
  let html_tag;
  let raw_value = get_label(ctx[93]) + "";
  let html_anchor;
  return {
    c() {
      html_tag = new HtmlTag(false);
      html_anchor = empty();
      html_tag.a = html_anchor;
    },
    m(target, anchor) {
      html_tag.m(raw_value, target, anchor);
      insert(target, html_anchor, anchor);
    },
    p(ctx2, dirty) {
      if (dirty[0] & 16 && raw_value !== (raw_value = get_label(ctx2[93]) + ""))
        html_tag.p(raw_value);
    },
    d(detaching) {
      if (detaching)
        detach(html_anchor);
      if (detaching)
        html_tag.d();
    }
  };
}
function fallback_block_5(ctx) {
  let if_block_anchor;
  function select_block_type(ctx2, dirty) {
    if (ctx2[26])
      return create_if_block_9;
    return create_else_block_3;
  }
  let current_block_type = select_block_type(ctx, [-1, -1, -1, -1]);
  let if_block = current_block_type(ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
    },
    p(ctx2, dirty) {
      if (current_block_type === (current_block_type = select_block_type(ctx2, dirty)) && if_block) {
        if_block.p(ctx2, dirty);
      } else {
        if_block.d(1);
        if_block = current_block_type(ctx2);
        if (if_block) {
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      }
    },
    d(detaching) {
      if_block.d(detaching);
      if (detaching)
        detach(if_block_anchor);
    }
  };
}
function create_if_block_82(ctx) {
  let button;
  let button_title_value;
  let current;
  let mounted;
  let dispose;
  const remove_icon_slot_template = ctx[55]["remove-icon"];
  const remove_icon_slot = create_slot(remove_icon_slot_template, ctx, ctx[90], get_remove_icon_slot_context);
  const remove_icon_slot_or_fallback = remove_icon_slot || fallback_block_4(ctx);
  function mouseup_handler() {
    return ctx[74](ctx[93]);
  }
  function keydown_handler_1() {
    return ctx[75](ctx[93]);
  }
  return {
    c() {
      button = element("button");
      if (remove_icon_slot_or_fallback)
        remove_icon_slot_or_fallback.c();
      attr(button, "type", "button");
      attr(button, "title", button_title_value = ctx[29] + " " + get_label(ctx[93]));
      attr(button, "class", "svelte-cnxwog");
    },
    m(target, anchor) {
      insert(target, button, anchor);
      if (remove_icon_slot_or_fallback) {
        remove_icon_slot_or_fallback.m(button, null);
      }
      current = true;
      if (!mounted) {
        dispose = [
          listen(button, "mouseup", stop_propagation(mouseup_handler)),
          listen(button, "keydown", function() {
            if (is_function(ctx[46](keydown_handler_1)))
              ctx[46](keydown_handler_1).apply(this, arguments);
          })
        ];
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (remove_icon_slot) {
        if (remove_icon_slot.p && (!current || dirty[2] & 268435456)) {
          update_slot_base(
            remove_icon_slot,
            remove_icon_slot_template,
            ctx,
            ctx[90],
            !current ? get_all_dirty_from_scope(ctx[90]) : get_slot_changes(remove_icon_slot_template, ctx[90], dirty, get_remove_icon_slot_changes),
            get_remove_icon_slot_context
          );
        }
      }
      if (!current || dirty[0] & 536870928 && button_title_value !== (button_title_value = ctx[29] + " " + get_label(ctx[93]))) {
        attr(button, "title", button_title_value);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(remove_icon_slot_or_fallback, local);
      current = true;
    },
    o(local) {
      transition_out(remove_icon_slot_or_fallback, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(button);
      if (remove_icon_slot_or_fallback)
        remove_icon_slot_or_fallback.d(detaching);
      mounted = false;
      run_all(dispose);
    }
  };
}
function fallback_block_4(ctx) {
  let crossicon;
  let current;
  crossicon = new Cross_default({ props: { width: "15px" } });
  return {
    c() {
      create_component(crossicon.$$.fragment);
    },
    m(target, anchor) {
      mount_component(crossicon, target, anchor);
      current = true;
    },
    p: noop,
    i(local) {
      if (current)
        return;
      transition_in(crossicon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(crossicon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(crossicon, detaching);
    }
  };
}
function create_each_block_13(ctx) {
  let li;
  let t;
  let li_class_value;
  let current;
  const selected_slot_template = ctx[55].selected;
  const selected_slot = create_slot(selected_slot_template, ctx, ctx[90], get_selected_slot_context);
  const selected_slot_or_fallback = selected_slot || fallback_block_5(ctx);
  let if_block = !ctx[35] && create_if_block_82(ctx);
  return {
    c() {
      li = element("li");
      if (selected_slot_or_fallback)
        selected_slot_or_fallback.c();
      t = space();
      if (if_block)
        if_block.c();
      attr(li, "class", li_class_value = null_to_empty(ctx[19]) + " svelte-cnxwog");
      attr(li, "aria-selected", "true");
    },
    m(target, anchor) {
      insert(target, li, anchor);
      if (selected_slot_or_fallback) {
        selected_slot_or_fallback.m(li, null);
      }
      append(li, t);
      if (if_block)
        if_block.m(li, null);
      current = true;
    },
    p(ctx2, dirty) {
      if (selected_slot) {
        if (selected_slot.p && (!current || dirty[0] & 16 | dirty[2] & 268435456)) {
          update_slot_base(
            selected_slot,
            selected_slot_template,
            ctx2,
            ctx2[90],
            !current ? get_all_dirty_from_scope(ctx2[90]) : get_slot_changes(selected_slot_template, ctx2[90], dirty, get_selected_slot_changes),
            get_selected_slot_context
          );
        }
      } else {
        if (selected_slot_or_fallback && selected_slot_or_fallback.p && (!current || dirty[0] & 67108880)) {
          selected_slot_or_fallback.p(ctx2, !current ? [-1, -1, -1, -1] : dirty);
        }
      }
      if (!ctx2[35]) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty[1] & 16) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block_82(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(li, null);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
      if (!current || dirty[0] & 524288 && li_class_value !== (li_class_value = null_to_empty(ctx2[19]) + " svelte-cnxwog")) {
        attr(li, "class", li_class_value);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(selected_slot_or_fallback, local);
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(selected_slot_or_fallback, local);
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(li);
      if (selected_slot_or_fallback)
        selected_slot_or_fallback.d(detaching);
      if (if_block)
        if_block.d();
    }
  };
}
function create_if_block_72(ctx) {
  let current;
  const spinner_slot_template = ctx[55].spinner;
  const spinner_slot = create_slot(spinner_slot_template, ctx, ctx[90], get_spinner_slot_context);
  const spinner_slot_or_fallback = spinner_slot || fallback_block_3(ctx);
  return {
    c() {
      if (spinner_slot_or_fallback)
        spinner_slot_or_fallback.c();
    },
    m(target, anchor) {
      if (spinner_slot_or_fallback) {
        spinner_slot_or_fallback.m(target, anchor);
      }
      current = true;
    },
    p(ctx2, dirty) {
      if (spinner_slot) {
        if (spinner_slot.p && (!current || dirty[2] & 268435456)) {
          update_slot_base(
            spinner_slot,
            spinner_slot_template,
            ctx2,
            ctx2[90],
            !current ? get_all_dirty_from_scope(ctx2[90]) : get_slot_changes(spinner_slot_template, ctx2[90], dirty, get_spinner_slot_changes),
            get_spinner_slot_context
          );
        }
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(spinner_slot_or_fallback, local);
      current = true;
    },
    o(local) {
      transition_out(spinner_slot_or_fallback, local);
      current = false;
    },
    d(detaching) {
      if (spinner_slot_or_fallback)
        spinner_slot_or_fallback.d(detaching);
    }
  };
}
function fallback_block_3(ctx) {
  let circlespinner;
  let current;
  circlespinner = new CircleSpinner_default({});
  return {
    c() {
      create_component(circlespinner.$$.fragment);
    },
    m(target, anchor) {
      mount_component(circlespinner, target, anchor);
      current = true;
    },
    i(local) {
      if (current)
        return;
      transition_in(circlespinner.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(circlespinner.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(circlespinner, detaching);
    }
  };
}
function create_if_block_43(ctx) {
  let t;
  let if_block1_anchor;
  let current;
  let if_block0 = ctx[21] && (ctx[21] > 1 || ctx[22]) && create_if_block_62(ctx);
  let if_block1 = ctx[21] !== 1 && ctx[4].length > 1 && create_if_block_53(ctx);
  return {
    c() {
      if (if_block0)
        if_block0.c();
      t = space();
      if (if_block1)
        if_block1.c();
      if_block1_anchor = empty();
    },
    m(target, anchor) {
      if (if_block0)
        if_block0.m(target, anchor);
      insert(target, t, anchor);
      if (if_block1)
        if_block1.m(target, anchor);
      insert(target, if_block1_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (ctx2[21] && (ctx2[21] > 1 || ctx2[22])) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
          if (dirty[0] & 6291456) {
            transition_in(if_block0, 1);
          }
        } else {
          if_block0 = create_if_block_62(ctx2);
          if_block0.c();
          transition_in(if_block0, 1);
          if_block0.m(t.parentNode, t);
        }
      } else if (if_block0) {
        group_outros();
        transition_out(if_block0, 1, 1, () => {
          if_block0 = null;
        });
        check_outros();
      }
      if (ctx2[21] !== 1 && ctx2[4].length > 1) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
          if (dirty[0] & 2097168) {
            transition_in(if_block1, 1);
          }
        } else {
          if_block1 = create_if_block_53(ctx2);
          if_block1.c();
          transition_in(if_block1, 1);
          if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
        }
      } else if (if_block1) {
        group_outros();
        transition_out(if_block1, 1, 1, () => {
          if_block1 = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block0);
      transition_in(if_block1);
      current = true;
    },
    o(local) {
      transition_out(if_block0);
      transition_out(if_block1);
      current = false;
    },
    d(detaching) {
      if (if_block0)
        if_block0.d(detaching);
      if (detaching)
        detach(t);
      if (if_block1)
        if_block1.d(detaching);
      if (detaching)
        detach(if_block1_anchor);
    }
  };
}
function create_if_block_35(ctx) {
  let current;
  const disabled_icon_slot_template = ctx[55]["disabled-icon"];
  const disabled_icon_slot = create_slot(disabled_icon_slot_template, ctx, ctx[90], get_disabled_icon_slot_context);
  const disabled_icon_slot_or_fallback = disabled_icon_slot || fallback_block_1(ctx);
  return {
    c() {
      if (disabled_icon_slot_or_fallback)
        disabled_icon_slot_or_fallback.c();
    },
    m(target, anchor) {
      if (disabled_icon_slot_or_fallback) {
        disabled_icon_slot_or_fallback.m(target, anchor);
      }
      current = true;
    },
    p(ctx2, dirty) {
      if (disabled_icon_slot) {
        if (disabled_icon_slot.p && (!current || dirty[2] & 268435456)) {
          update_slot_base(
            disabled_icon_slot,
            disabled_icon_slot_template,
            ctx2,
            ctx2[90],
            !current ? get_all_dirty_from_scope(ctx2[90]) : get_slot_changes(disabled_icon_slot_template, ctx2[90], dirty, get_disabled_icon_slot_changes),
            get_disabled_icon_slot_context
          );
        }
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(disabled_icon_slot_or_fallback, local);
      current = true;
    },
    o(local) {
      transition_out(disabled_icon_slot_or_fallback, local);
      current = false;
    },
    d(detaching) {
      if (disabled_icon_slot_or_fallback)
        disabled_icon_slot_or_fallback.d(detaching);
    }
  };
}
function create_if_block_62(ctx) {
  let wiggle_1;
  let updating_wiggle;
  let current;
  function wiggle_1_wiggle_binding(value) {
    ctx[78](value);
  }
  let wiggle_1_props = {
    angle: 20,
    $$slots: { default: [create_default_slot2] },
    $$scope: { ctx }
  };
  if (ctx[39] !== void 0) {
    wiggle_1_props.wiggle = ctx[39];
  }
  wiggle_1 = new Wiggle_default({ props: wiggle_1_props });
  binding_callbacks.push(() => bind(wiggle_1, "wiggle", wiggle_1_wiggle_binding));
  return {
    c() {
      create_component(wiggle_1.$$.fragment);
    },
    m(target, anchor) {
      mount_component(wiggle_1, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const wiggle_1_changes = {};
      if (dirty[0] & 6291472 | dirty[2] & 268435456) {
        wiggle_1_changes.$$scope = { dirty, ctx: ctx2 };
      }
      if (!updating_wiggle && dirty[1] & 256) {
        updating_wiggle = true;
        wiggle_1_changes.wiggle = ctx2[39];
        add_flush_callback(() => updating_wiggle = false);
      }
      wiggle_1.$set(wiggle_1_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(wiggle_1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(wiggle_1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(wiggle_1, detaching);
    }
  };
}
function create_default_slot2(ctx) {
  let span;
  let t_value = (ctx[22]?.(ctx[4].length, ctx[21]) ?? (ctx[21] > 1 ? `${ctx[4].length}/${ctx[21]}` : ``)) + "";
  let t;
  return {
    c() {
      span = element("span");
      t = text(t_value);
      set_style(span, "padding", "0 3pt");
      attr(span, "class", "svelte-cnxwog");
    },
    m(target, anchor) {
      insert(target, span, anchor);
      append(span, t);
    },
    p(ctx2, dirty) {
      if (dirty[0] & 6291472 && t_value !== (t_value = (ctx2[22]?.(ctx2[4].length, ctx2[21]) ?? (ctx2[21] > 1 ? `${ctx2[4].length}/${ctx2[21]}` : ``)) + ""))
        set_data(t, t_value);
    },
    d(detaching) {
      if (detaching)
        detach(span);
    }
  };
}
function create_if_block_53(ctx) {
  let button;
  let current;
  let mounted;
  let dispose;
  const remove_icon_slot_template = ctx[55]["remove-icon"];
  const remove_icon_slot = create_slot(remove_icon_slot_template, ctx, ctx[90], get_remove_icon_slot_context_1);
  const remove_icon_slot_or_fallback = remove_icon_slot || fallback_block_2(ctx);
  return {
    c() {
      button = element("button");
      if (remove_icon_slot_or_fallback)
        remove_icon_slot_or_fallback.c();
      attr(button, "type", "button");
      attr(button, "class", "remove-all svelte-cnxwog");
      attr(button, "title", ctx[28]);
    },
    m(target, anchor) {
      insert(target, button, anchor);
      if (remove_icon_slot_or_fallback) {
        remove_icon_slot_or_fallback.m(button, null);
      }
      current = true;
      if (!mounted) {
        dispose = [
          listen(button, "mouseup", stop_propagation(ctx[45])),
          listen(button, "keydown", ctx[46](ctx[45]))
        ];
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (remove_icon_slot) {
        if (remove_icon_slot.p && (!current || dirty[2] & 268435456)) {
          update_slot_base(
            remove_icon_slot,
            remove_icon_slot_template,
            ctx2,
            ctx2[90],
            !current ? get_all_dirty_from_scope(ctx2[90]) : get_slot_changes(remove_icon_slot_template, ctx2[90], dirty, get_remove_icon_slot_changes_1),
            get_remove_icon_slot_context_1
          );
        }
      }
      if (!current || dirty[0] & 268435456) {
        attr(button, "title", ctx2[28]);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(remove_icon_slot_or_fallback, local);
      current = true;
    },
    o(local) {
      transition_out(remove_icon_slot_or_fallback, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(button);
      if (remove_icon_slot_or_fallback)
        remove_icon_slot_or_fallback.d(detaching);
      mounted = false;
      run_all(dispose);
    }
  };
}
function fallback_block_2(ctx) {
  let crossicon;
  let current;
  crossicon = new Cross_default({ props: { width: "15px" } });
  return {
    c() {
      create_component(crossicon.$$.fragment);
    },
    m(target, anchor) {
      mount_component(crossicon, target, anchor);
      current = true;
    },
    p: noop,
    i(local) {
      if (current)
        return;
      transition_in(crossicon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(crossicon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(crossicon, detaching);
    }
  };
}
function fallback_block_1(ctx) {
  let disabledicon;
  let current;
  disabledicon = new Disabled_default({ props: { width: "15px" } });
  return {
    c() {
      create_component(disabledicon.$$.fragment);
    },
    m(target, anchor) {
      mount_component(disabledicon, target, anchor);
      current = true;
    },
    p: noop,
    i(local) {
      if (current)
        return;
      transition_in(disabledicon.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(disabledicon.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(disabledicon, detaching);
    }
  };
}
function create_if_block18(ctx) {
  let ul;
  let ul_class_value;
  let current;
  let each_value = ctx[1];
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block10(get_each_context10(ctx, each_value, i));
  }
  const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
    each_blocks[i] = null;
  });
  let each_1_else = null;
  if (!each_value.length) {
    each_1_else = create_else_block_13(ctx);
  }
  return {
    c() {
      ul = element("ul");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      if (each_1_else) {
        each_1_else.c();
      }
      attr(ul, "class", ul_class_value = "options " + ctx[31] + " svelte-cnxwog");
      toggle_class(ul, "hidden", !ctx[8]);
    },
    m(target, anchor) {
      insert(target, ul, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(ul, null);
      }
      if (each_1_else) {
        each_1_else.m(ul, null);
      }
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty[0] & 84282379 | dirty[1] & 3648 | dirty[2] & 268435456) {
        each_value = ctx2[1];
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context10(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
            transition_in(each_blocks[i], 1);
          } else {
            each_blocks[i] = create_each_block10(child_ctx);
            each_blocks[i].c();
            transition_in(each_blocks[i], 1);
            each_blocks[i].m(ul, null);
          }
        }
        group_outros();
        for (i = each_value.length; i < each_blocks.length; i += 1) {
          out(i);
        }
        check_outros();
        if (!each_value.length && each_1_else) {
          each_1_else.p(ctx2, dirty);
        } else if (!each_value.length) {
          each_1_else = create_else_block_13(ctx2);
          each_1_else.c();
          each_1_else.m(ul, null);
        } else if (each_1_else) {
          each_1_else.d(1);
          each_1_else = null;
        }
      }
      if (!current || dirty[1] & 1 && ul_class_value !== (ul_class_value = "options " + ctx2[31] + " svelte-cnxwog")) {
        attr(ul, "class", ul_class_value);
      }
      if (!current || dirty[0] & 256 | dirty[1] & 1) {
        toggle_class(ul, "hidden", !ctx2[8]);
      }
    },
    i(local) {
      if (current)
        return;
      for (let i = 0; i < each_value.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(ul);
      destroy_each(each_blocks, detaching);
      if (each_1_else)
        each_1_else.d();
    }
  };
}
function create_else_block_13(ctx) {
  let if_block_anchor;
  function select_block_type_3(ctx2, dirty) {
    if (ctx2[11] && ctx2[3])
      return create_if_block_28;
    return create_else_block_22;
  }
  let current_block_type = select_block_type_3(ctx, [-1, -1, -1, -1]);
  let if_block = current_block_type(ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
    },
    p(ctx2, dirty) {
      if (current_block_type === (current_block_type = select_block_type_3(ctx2, dirty)) && if_block) {
        if_block.p(ctx2, dirty);
      } else {
        if_block.d(1);
        if_block = current_block_type(ctx2);
        if (if_block) {
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      }
    },
    d(detaching) {
      if_block.d(detaching);
      if (detaching)
        detach(if_block_anchor);
    }
  };
}
function create_else_block_22(ctx) {
  let span;
  let t;
  return {
    c() {
      span = element("span");
      t = text(ctx[24]);
      attr(span, "class", "svelte-cnxwog");
    },
    m(target, anchor) {
      insert(target, span, anchor);
      append(span, t);
    },
    p(ctx2, dirty) {
      if (dirty[0] & 16777216)
        set_data(t, ctx2[24]);
    },
    d(detaching) {
      if (detaching)
        detach(span);
    }
  };
}
function create_if_block_28(ctx) {
  let li;
  let t0;
  let t1;
  let mounted;
  let dispose;
  return {
    c() {
      li = element("li");
      t0 = text(ctx[10]);
      t1 = space();
      attr(li, "title", ctx[10]);
      attr(li, "aria-selected", "false");
      attr(li, "class", "svelte-cnxwog");
      toggle_class(li, "active", ctx[37]);
    },
    m(target, anchor) {
      insert(target, li, anchor);
      append(li, t0);
      append(li, t1);
      if (!mounted) {
        dispose = [
          listen(li, "mousedown", stop_propagation(ctx[57])),
          listen(li, "mouseup", stop_propagation(ctx[84])),
          listen(li, "mouseover", ctx[85]),
          listen(li, "focus", ctx[86]),
          listen(li, "mouseout", ctx[87]),
          listen(li, "blur", ctx[88])
        ];
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (dirty[0] & 1024)
        set_data(t0, ctx2[10]);
      if (dirty[0] & 1024) {
        attr(li, "title", ctx2[10]);
      }
      if (dirty[1] & 64) {
        toggle_class(li, "active", ctx2[37]);
      }
    },
    d(detaching) {
      if (detaching)
        detach(li);
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_else_block10(ctx) {
  let t_value = get_label(ctx[93]) + "";
  let t;
  return {
    c() {
      t = text(t_value);
    },
    m(target, anchor) {
      insert(target, t, anchor);
    },
    p(ctx2, dirty) {
      if (dirty[0] & 2 && t_value !== (t_value = get_label(ctx2[93]) + ""))
        set_data(t, t_value);
    },
    d(detaching) {
      if (detaching)
        detach(t);
    }
  };
}
function create_if_block_111(ctx) {
  let html_tag;
  let raw_value = get_label(ctx[93]) + "";
  let html_anchor;
  return {
    c() {
      html_tag = new HtmlTag(false);
      html_anchor = empty();
      html_tag.a = html_anchor;
    },
    m(target, anchor) {
      html_tag.m(raw_value, target, anchor);
      insert(target, html_anchor, anchor);
    },
    p(ctx2, dirty) {
      if (dirty[0] & 2 && raw_value !== (raw_value = get_label(ctx2[93]) + ""))
        html_tag.p(raw_value);
    },
    d(detaching) {
      if (detaching)
        detach(html_anchor);
      if (detaching)
        html_tag.d();
    }
  };
}
function fallback_block(ctx) {
  let if_block_anchor;
  function select_block_type_2(ctx2, dirty) {
    if (ctx2[26])
      return create_if_block_111;
    return create_else_block10;
  }
  let current_block_type = select_block_type_2(ctx, [-1, -1, -1, -1]);
  let if_block = current_block_type(ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
    },
    p(ctx2, dirty) {
      if (current_block_type === (current_block_type = select_block_type_2(ctx2, dirty)) && if_block) {
        if_block.p(ctx2, dirty);
      } else {
        if_block.d(1);
        if_block = current_block_type(ctx2);
        if (if_block) {
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      }
    },
    d(detaching) {
      if_block.d(detaching);
      if (detaching)
        detach(if_block_anchor);
    }
  };
}
function create_each_block10(ctx) {
  let li;
  let t;
  let li_title_value;
  let li_class_value;
  let current;
  let mounted;
  let dispose;
  const option_slot_template = ctx[55].option;
  const option_slot = create_slot(option_slot_template, ctx, ctx[90], get_option_slot_context);
  const option_slot_or_fallback = option_slot || fallback_block(ctx);
  function mouseup_handler_1(...args) {
    return ctx[79](ctx[35], ctx[94], ...args);
  }
  function mouseover_handler() {
    return ctx[80](ctx[35], ctx[100]);
  }
  function focus_handler_1() {
    return ctx[81](ctx[35], ctx[100]);
  }
  return {
    c() {
      li = element("li");
      if (option_slot_or_fallback)
        option_slot_or_fallback.c();
      t = space();
      attr(li, "title", li_title_value = ctx[35] ? ctx[97] : ctx[40](ctx[94]) && ctx[96] || ctx[95]);
      attr(li, "class", li_class_value = ctx[18] + " " + (ctx[98] ? ctx[17] : ``) + " svelte-cnxwog");
      attr(li, "aria-selected", "false");
      toggle_class(li, "selected", ctx[40](ctx[94]));
      toggle_class(li, "active", ctx[98]);
      toggle_class(li, "disabled", ctx[35]);
    },
    m(target, anchor) {
      insert(target, li, anchor);
      if (option_slot_or_fallback) {
        option_slot_or_fallback.m(li, null);
      }
      append(li, t);
      current = true;
      if (!mounted) {
        dispose = [
          listen(li, "mousedown", stop_propagation(ctx[56])),
          listen(li, "mouseup", stop_propagation(mouseup_handler_1)),
          listen(li, "mouseover", mouseover_handler),
          listen(li, "focus", focus_handler_1),
          listen(li, "mouseout", ctx[82]),
          listen(li, "blur", ctx[83])
        ];
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (option_slot) {
        if (option_slot.p && (!current || dirty[0] & 2 | dirty[2] & 268435456)) {
          update_slot_base(
            option_slot,
            option_slot_template,
            ctx,
            ctx[90],
            !current ? get_all_dirty_from_scope(ctx[90]) : get_slot_changes(option_slot_template, ctx[90], dirty, get_option_slot_changes),
            get_option_slot_context
          );
        }
      } else {
        if (option_slot_or_fallback && option_slot_or_fallback.p && (!current || dirty[0] & 67108866)) {
          option_slot_or_fallback.p(ctx, !current ? [-1, -1, -1, -1] : dirty);
        }
      }
      if (!current || dirty[0] & 2 | dirty[1] & 512 && li_title_value !== (li_title_value = ctx[35] ? ctx[97] : ctx[40](ctx[94]) && ctx[96] || ctx[95])) {
        attr(li, "title", li_title_value);
      }
      if (!current || dirty[0] & 393217 && li_class_value !== (li_class_value = ctx[18] + " " + (ctx[98] ? ctx[17] : ``) + " svelte-cnxwog")) {
        attr(li, "class", li_class_value);
      }
      if (!current || dirty[0] & 393219 | dirty[1] & 512) {
        toggle_class(li, "selected", ctx[40](ctx[94]));
      }
      if (!current || dirty[0] & 393217) {
        toggle_class(li, "active", ctx[98]);
      }
      if (!current || dirty[0] & 393219) {
        toggle_class(li, "disabled", ctx[35]);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(option_slot_or_fallback, local);
      current = true;
    },
    o(local) {
      transition_out(option_slot_or_fallback, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(li);
      if (option_slot_or_fallback)
        option_slot_or_fallback.d(detaching);
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_fragment29(ctx) {
  let div;
  let input0;
  let t0;
  let expandicon;
  let t1;
  let ul;
  let t2;
  let li;
  let input1;
  let input1_class_value;
  let input1_placeholder_value;
  let input1_aria_invalid_value;
  let ul_class_value;
  let t3;
  let t4;
  let current_block_type_index;
  let if_block1;
  let t5;
  let div_aria_multiselectable_value;
  let div_class_value;
  let div_title_value;
  let div_aria_disabled_value;
  let current;
  let mounted;
  let dispose;
  add_render_callback(ctx[71]);
  expandicon = new ChevronExpand_default({
    props: {
      width: "15px",
      style: "min-width: 1em; padding: 0 1pt;"
    }
  });
  let each_value_1 = ctx[4];
  let each_blocks = [];
  for (let i = 0; i < each_value_1.length; i += 1) {
    each_blocks[i] = create_each_block_13(get_each_context_13(ctx, each_value_1, i));
  }
  const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
    each_blocks[i] = null;
  });
  let if_block0 = ctx[20] && create_if_block_72(ctx);
  const if_block_creators = [create_if_block_35, create_if_block_43];
  const if_blocks = [];
  function select_block_type_1(ctx2, dirty) {
    if (ctx2[35])
      return 0;
    if (ctx2[4].length > 0)
      return 1;
    return -1;
  }
  if (~(current_block_type_index = select_block_type_1(ctx, [-1, -1, -1, -1]))) {
    if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  }
  let if_block2 = (ctx[3] || ctx[2]?.length > 0) && create_if_block18(ctx);
  return {
    c() {
      div = element("div");
      input0 = element("input");
      t0 = space();
      create_component(expandicon.$$.fragment);
      t1 = space();
      ul = element("ul");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      t2 = space();
      li = element("li");
      input1 = element("input");
      t3 = space();
      if (if_block0)
        if_block0.c();
      t4 = space();
      if (if_block1)
        if_block1.c();
      t5 = space();
      if (if_block2)
        if_block2.c();
      input0.required = ctx[30];
      attr(input0, "tabindex", "-1");
      attr(input0, "aria-hidden", "true");
      attr(input0, "aria-label", "ignore this, used only to prevent form submission if select is required but empty");
      attr(input0, "class", "form-control svelte-cnxwog");
      attr(input1, "class", input1_class_value = null_to_empty(ctx[16]) + " svelte-cnxwog");
      attr(input1, "autocomplete", ctx[12]);
      attr(input1, "id", ctx[15]);
      attr(input1, "name", ctx[23]);
      input1.disabled = ctx[35];
      attr(input1, "inputmode", ctx[33]);
      attr(input1, "pattern", ctx[34]);
      attr(input1, "placeholder", input1_placeholder_value = ctx[5].length ? `` : ctx[27]);
      attr(input1, "aria-invalid", input1_aria_invalid_value = ctx[7] ? `true` : null);
      set_style(li, "display", "contents");
      attr(li, "class", "svelte-cnxwog");
      attr(ul, "class", ul_class_value = "selected " + ctx[32] + " svelte-cnxwog");
      attr(div, "aria-expanded", ctx[8]);
      attr(div, "aria-multiselectable", div_aria_multiselectable_value = ctx[21] === null || ctx[21] > 1);
      attr(div, "class", div_class_value = "multiselect " + ctx[25] + " svelte-cnxwog");
      attr(div, "title", div_title_value = ctx[35] ? ctx[14] : null);
      attr(div, "aria-disabled", div_aria_disabled_value = ctx[35] ? `true` : null);
      toggle_class(div, "disabled", ctx[35]);
      toggle_class(div, "single", ctx[21] === 1);
      toggle_class(div, "open", ctx[8]);
      toggle_class(div, "invalid", ctx[7]);
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, input0);
      set_input_value(input0, ctx[36]);
      append(div, t0);
      mount_component(expandicon, div, null);
      append(div, t1);
      append(div, ul);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(ul, null);
      }
      append(ul, t2);
      append(ul, li);
      append(li, input1);
      ctx[76](input1);
      set_input_value(input1, ctx[3]);
      append(div, t3);
      if (if_block0)
        if_block0.m(div, null);
      append(div, t4);
      if (~current_block_type_index) {
        if_blocks[current_block_type_index].m(div, null);
      }
      append(div, t5);
      if (if_block2)
        if_block2.m(div, null);
      ctx[89](div);
      current = true;
      if (!mounted) {
        dispose = [
          listen(window, "click", ctx[47]),
          listen(window, "touchstart", ctx[47]),
          listen(window, "resize", ctx[71]),
          listen(input0, "input", ctx[72]),
          listen(input0, "invalid", ctx[73]),
          listen(input1, "input", ctx[77]),
          listen(input1, "mouseup", self(stop_propagation(ctx[43]))),
          listen(input1, "keydown", ctx[44]),
          listen(input1, "focus", ctx[58]),
          listen(input1, "focus", ctx[43]),
          listen(input1, "blur", ctx[59]),
          listen(input1, "change", ctx[60]),
          listen(input1, "click", ctx[61]),
          listen(input1, "keydown", ctx[62]),
          listen(input1, "keyup", ctx[63]),
          listen(input1, "mousedown", ctx[64]),
          listen(input1, "mouseenter", ctx[65]),
          listen(input1, "mouseleave", ctx[66]),
          listen(input1, "touchcancel", ctx[67]),
          listen(input1, "touchend", ctx[68]),
          listen(input1, "touchmove", ctx[69]),
          listen(input1, "touchstart", ctx[70]),
          listen(div, "mouseup", stop_propagation(ctx[43]))
        ];
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (!current || dirty[0] & 1073741824) {
        input0.required = ctx2[30];
      }
      if (dirty[1] & 32 && input0.value !== ctx2[36]) {
        set_input_value(input0, ctx2[36]);
      }
      if (dirty[0] & 604504080 | dirty[1] & 34832 | dirty[2] & 268435456) {
        each_value_1 = ctx2[4];
        let i;
        for (i = 0; i < each_value_1.length; i += 1) {
          const child_ctx = get_each_context_13(ctx2, each_value_1, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
            transition_in(each_blocks[i], 1);
          } else {
            each_blocks[i] = create_each_block_13(child_ctx);
            each_blocks[i].c();
            transition_in(each_blocks[i], 1);
            each_blocks[i].m(ul, t2);
          }
        }
        group_outros();
        for (i = each_value_1.length; i < each_blocks.length; i += 1) {
          out(i);
        }
        check_outros();
      }
      if (!current || dirty[0] & 65536 && input1_class_value !== (input1_class_value = null_to_empty(ctx2[16]) + " svelte-cnxwog")) {
        attr(input1, "class", input1_class_value);
      }
      if (!current || dirty[0] & 4096) {
        attr(input1, "autocomplete", ctx2[12]);
      }
      if (!current || dirty[0] & 32768) {
        attr(input1, "id", ctx2[15]);
      }
      if (!current || dirty[0] & 8388608) {
        attr(input1, "name", ctx2[23]);
      }
      if (!current || dirty[1] & 16) {
        input1.disabled = ctx2[35];
      }
      if (!current || dirty[1] & 4) {
        attr(input1, "inputmode", ctx2[33]);
      }
      if (!current || dirty[1] & 8) {
        attr(input1, "pattern", ctx2[34]);
      }
      if (!current || dirty[0] & 134217760 && input1_placeholder_value !== (input1_placeholder_value = ctx2[5].length ? `` : ctx2[27])) {
        attr(input1, "placeholder", input1_placeholder_value);
      }
      if (!current || dirty[0] & 128 && input1_aria_invalid_value !== (input1_aria_invalid_value = ctx2[7] ? `true` : null)) {
        attr(input1, "aria-invalid", input1_aria_invalid_value);
      }
      if (dirty[0] & 8 && input1.value !== ctx2[3]) {
        set_input_value(input1, ctx2[3]);
      }
      if (!current || dirty[1] & 2 && ul_class_value !== (ul_class_value = "selected " + ctx2[32] + " svelte-cnxwog")) {
        attr(ul, "class", ul_class_value);
      }
      if (ctx2[20]) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
          if (dirty[0] & 1048576) {
            transition_in(if_block0, 1);
          }
        } else {
          if_block0 = create_if_block_72(ctx2);
          if_block0.c();
          transition_in(if_block0, 1);
          if_block0.m(div, t4);
        }
      } else if (if_block0) {
        group_outros();
        transition_out(if_block0, 1, 1, () => {
          if_block0 = null;
        });
        check_outros();
      }
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type_1(ctx2, dirty);
      if (current_block_type_index === previous_block_index) {
        if (~current_block_type_index) {
          if_blocks[current_block_type_index].p(ctx2, dirty);
        }
      } else {
        if (if_block1) {
          group_outros();
          transition_out(if_blocks[previous_block_index], 1, 1, () => {
            if_blocks[previous_block_index] = null;
          });
          check_outros();
        }
        if (~current_block_type_index) {
          if_block1 = if_blocks[current_block_type_index];
          if (!if_block1) {
            if_block1 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
            if_block1.c();
          } else {
            if_block1.p(ctx2, dirty);
          }
          transition_in(if_block1, 1);
          if_block1.m(div, t5);
        } else {
          if_block1 = null;
        }
      }
      if (ctx2[3] || ctx2[2]?.length > 0) {
        if (if_block2) {
          if_block2.p(ctx2, dirty);
          if (dirty[0] & 12) {
            transition_in(if_block2, 1);
          }
        } else {
          if_block2 = create_if_block18(ctx2);
          if_block2.c();
          transition_in(if_block2, 1);
          if_block2.m(div, null);
        }
      } else if (if_block2) {
        group_outros();
        transition_out(if_block2, 1, 1, () => {
          if_block2 = null;
        });
        check_outros();
      }
      if (!current || dirty[0] & 256) {
        attr(div, "aria-expanded", ctx2[8]);
      }
      if (!current || dirty[0] & 2097152 && div_aria_multiselectable_value !== (div_aria_multiselectable_value = ctx2[21] === null || ctx2[21] > 1)) {
        attr(div, "aria-multiselectable", div_aria_multiselectable_value);
      }
      if (!current || dirty[0] & 33554432 && div_class_value !== (div_class_value = "multiselect " + ctx2[25] + " svelte-cnxwog")) {
        attr(div, "class", div_class_value);
      }
      if (!current || dirty[0] & 16384 | dirty[1] & 16 && div_title_value !== (div_title_value = ctx2[35] ? ctx2[14] : null)) {
        attr(div, "title", div_title_value);
      }
      if (!current || dirty[1] & 16 && div_aria_disabled_value !== (div_aria_disabled_value = ctx2[35] ? `true` : null)) {
        attr(div, "aria-disabled", div_aria_disabled_value);
      }
      if (!current || dirty[0] & 33554432 | dirty[1] & 16) {
        toggle_class(div, "disabled", ctx2[35]);
      }
      if (!current || dirty[0] & 35651584) {
        toggle_class(div, "single", ctx2[21] === 1);
      }
      if (!current || dirty[0] & 33554688) {
        toggle_class(div, "open", ctx2[8]);
      }
      if (!current || dirty[0] & 33554560) {
        toggle_class(div, "invalid", ctx2[7]);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(expandicon.$$.fragment, local);
      for (let i = 0; i < each_value_1.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      transition_in(if_block0);
      transition_in(if_block1);
      transition_in(if_block2);
      current = true;
    },
    o(local) {
      transition_out(expandicon.$$.fragment, local);
      each_blocks = each_blocks.filter(Boolean);
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      transition_out(if_block0);
      transition_out(if_block1);
      transition_out(if_block2);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      destroy_component(expandicon);
      destroy_each(each_blocks, detaching);
      ctx[76](null);
      if (if_block0)
        if_block0.d();
      if (~current_block_type_index) {
        if_blocks[current_block_type_index].d();
      }
      if (if_block2)
        if_block2.d();
      ctx[89](null);
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance29($$self, $$props, $$invalidate) {
  let formValue;
  let is_selected;
  let { $$slots: slots = {}, $$scope } = $$props;
  let { activeIndex = null } = $$props;
  let { activeOption = null } = $$props;
  let { addOptionMsg = `Create this option...` } = $$props;
  let { allowUserOptions = false } = $$props;
  let { autocomplete = `off` } = $$props;
  let { autoScroll = true } = $$props;
  let { breakpoint = 800 } = $$props;
  let { defaultDisabledTitle = `This option is disabled` } = $$props;
  let { disabled = false } = $$props;
  let { disabledInputTitle = `This input is disabled` } = $$props;
  let { filterFunc = (op, searchText2) => {
    if (!searchText2)
      return true;
    return `${get_label(op)}`.toLowerCase().includes(searchText2.toLowerCase());
  } } = $$props;
  let { focusInputOnSelect = `desktop` } = $$props;
  let { id = null } = $$props;
  let { input = null } = $$props;
  let { inputClass = `` } = $$props;
  let { invalid = false } = $$props;
  let { liActiveOptionClass = `` } = $$props;
  let { liOptionClass = `` } = $$props;
  let { liSelectedClass = `` } = $$props;
  let { loading = false } = $$props;
  let { matchingOptions = [] } = $$props;
  let { maxSelect = null } = $$props;
  let { maxSelectMsg = null } = $$props;
  let { name: name2 = null } = $$props;
  let { noOptionsMsg = `No matching options` } = $$props;
  let { open = false } = $$props;
  let { options } = $$props;
  let { outerDiv = null } = $$props;
  let { outerDivClass = `` } = $$props;
  let { parseLabelsAsHtml = false } = $$props;
  let { placeholder = null } = $$props;
  let { removeAllTitle = `Remove all` } = $$props;
  let { removeBtnTitle = `Remove` } = $$props;
  let { required = false } = $$props;
  let { searchText = `` } = $$props;
  let { selected = options?.filter((op) => op?.preselected) ?? [] } = $$props;
  let { selectedLabels = [] } = $$props;
  let { selectedValues = [] } = $$props;
  let { sortSelected = false } = $$props;
  let { ulOptionsClass = `` } = $$props;
  let { ulSelectedClass = `` } = $$props;
  let { inputmode = `` } = $$props;
  let { pattern = `` } = $$props;
  if (!(options?.length > 0)) {
    if (allowUserOptions) {
      options = [];
    } else {
      console.error(`MultiSelect received no options`);
    }
  }
  if (parseLabelsAsHtml && allowUserOptions) {
    console.warn(`Don't combine parseLabelsAsHtml and allowUserOptions. It's susceptible to XSS attacks!`);
  }
  if (maxSelect !== null && maxSelect < 1) {
    console.error(`maxSelect must be null or positive integer, got ${maxSelect}`);
  }
  if (!Array.isArray(selected)) {
    console.error(`selected prop must be an array, got ${selected}`);
  }
  const dispatch2 = createEventDispatcher();
  let add_option_msg_is_active = false;
  let window_width;
  let wiggle = false;
  if (activeIndex !== null && !matchingOptions[activeIndex]) {
    throw `Run time error, activeIndex=${activeIndex} is out of bounds, matchingOptions.length=${matchingOptions.length}`;
  }
  function add(label, event) {
    if (maxSelect && maxSelect > 1 && selected.length >= maxSelect)
      $$invalidate(39, wiggle = true);
    if (maxSelect === null || maxSelect === 1 || selected.length < maxSelect) {
      let option = options.find((op) => get_label(op) === label);
      if (!option && [true, `append`].includes(allowUserOptions) && searchText.length > 0) {
        if (typeof options[0] === `object`) {
          option = { label: searchText, value: searchText };
        } else {
          if ([`number`, `undefined`].includes(typeof options[0]) && !isNaN(Number(searchText))) {
            option = Number(searchText);
          } else
            option = searchText;
        }
        if (allowUserOptions === `append`)
          $$invalidate(2, options = [...options, option]);
      }
      $$invalidate(3, searchText = ``);
      if (!option) {
        console.error(`MultiSelect: option with label ${label} not found`);
        return;
      }
      if (maxSelect === 1) {
        $$invalidate(4, selected = [option]);
      } else {
        $$invalidate(4, selected = [...selected, option]);
        if (sortSelected === true) {
          $$invalidate(4, selected = selected.sort((op1, op2) => {
            const [label1, label2] = [get_label(op1), get_label(op2)];
            return `${label1}`.localeCompare(`${label2}`);
          }));
        } else if (typeof sortSelected === `function`) {
          $$invalidate(4, selected = selected.sort(sortSelected));
        }
      }
      if (selected.length === maxSelect)
        close_dropdown(event);
      else if (focusInputOnSelect === true || focusInputOnSelect === `desktop` && window_width > breakpoint) {
        input?.focus();
      }
      dispatch2(`add`, { option });
      dispatch2(`change`, { option, type: `add` });
    }
  }
  function remove(label) {
    if (selected.length === 0)
      return;
    selected.splice(selectedLabels.lastIndexOf(label), 1);
    $$invalidate(4, selected);
    const option = options.find((option2) => get_label(option2) === label) ?? (allowUserOptions && { label, value: label });
    if (!option) {
      return console.error(`MultiSelect: option with label ${label} not found`);
    }
    dispatch2(`remove`, { option });
    dispatch2(`change`, { option, type: `remove` });
  }
  function open_dropdown(event) {
    if (disabled)
      return;
    $$invalidate(8, open = true);
    if (!(event instanceof FocusEvent)) {
      input?.focus();
    }
    dispatch2(`open`, { event });
  }
  function close_dropdown(event) {
    $$invalidate(8, open = false);
    input?.blur();
    $$invalidate(49, activeOption = null);
    dispatch2(`close`, { event });
  }
  async function handle_keydown(event) {
    if (event.key === `Escape` || event.key === `Tab`) {
      close_dropdown(event);
      $$invalidate(3, searchText = ``);
    } else if (event.key === `Enter`) {
      event.preventDefault();
      if (activeOption) {
        const label = get_label(activeOption);
        selectedLabels.includes(label) ? remove(label) : add(label, event);
        $$invalidate(3, searchText = ``);
      } else if (allowUserOptions && searchText.length > 0) {
        add(searchText, event);
      } else
        open_dropdown(event);
    } else if ([`ArrowDown`, `ArrowUp`].includes(event.key)) {
      if (activeIndex === null && matchingOptions.length > 0) {
        $$invalidate(0, activeIndex = 0);
        return;
      } else if (allowUserOptions && searchText.length > 0) {
        $$invalidate(37, add_option_msg_is_active = !add_option_msg_is_active);
        return;
      } else if (activeIndex === null) {
        return;
      }
      const increment = event.key === `ArrowUp` ? -1 : 1;
      $$invalidate(0, activeIndex = (activeIndex + increment) % matchingOptions.length);
      if (activeIndex < 0)
        $$invalidate(0, activeIndex = matchingOptions.length - 1);
      if (autoScroll) {
        setTimeout(
          () => {
            const li = document.querySelector(`ul.options > li.active`);
            if (li) {
              li.parentNode?.scrollIntoView({ block: `center` });
              li.scrollIntoViewIfNeeded();
            }
          },
          10
        );
      }
    } else if (event.key === `Backspace` && selectedLabels.length > 0 && !searchText) {
      remove(selectedLabels.at(-1));
    }
  }
  function remove_all() {
    dispatch2(`removeAll`, { options: selected });
    dispatch2(`change`, { options: selected, type: `removeAll` });
    $$invalidate(4, selected = []);
    $$invalidate(3, searchText = ``);
  }
  const if_enter_or_space = (handler) => (event) => {
    if ([`Enter`, `Space`].includes(event.code)) {
      event.preventDefault();
      handler();
    }
  };
  function on_click_outside(event) {
    if (outerDiv && !outerDiv.contains(event.target)) {
      close_dropdown(event);
    }
  }
  function mousedown_handler_1(event) {
    bubble.call(this, $$self, event);
  }
  function mousedown_handler_2(event) {
    bubble.call(this, $$self, event);
  }
  function focus_handler(event) {
    bubble.call(this, $$self, event);
  }
  function blur_handler(event) {
    bubble.call(this, $$self, event);
  }
  function change_handler(event) {
    bubble.call(this, $$self, event);
  }
  function click_handler3(event) {
    bubble.call(this, $$self, event);
  }
  function keydown_handler2(event) {
    bubble.call(this, $$self, event);
  }
  function keyup_handler(event) {
    bubble.call(this, $$self, event);
  }
  function mousedown_handler(event) {
    bubble.call(this, $$self, event);
  }
  function mouseenter_handler(event) {
    bubble.call(this, $$self, event);
  }
  function mouseleave_handler(event) {
    bubble.call(this, $$self, event);
  }
  function touchcancel_handler(event) {
    bubble.call(this, $$self, event);
  }
  function touchend_handler(event) {
    bubble.call(this, $$self, event);
  }
  function touchmove_handler(event) {
    bubble.call(this, $$self, event);
  }
  function touchstart_handler(event) {
    bubble.call(this, $$self, event);
  }
  function onwindowresize() {
    $$invalidate(38, window_width = window.innerWidth);
  }
  function input0_input_handler() {
    formValue = this.value;
    $$invalidate(36, formValue), $$invalidate(48, selectedValues), $$invalidate(4, selected);
  }
  const invalid_handler = () => $$invalidate(7, invalid = true);
  const mouseup_handler = (option) => remove(get_label(option));
  const keydown_handler_1 = (option) => remove(get_label(option));
  function input1_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      input = $$value;
      $$invalidate(6, input);
    });
  }
  function input1_input_handler() {
    searchText = this.value;
    $$invalidate(3, searchText);
  }
  function wiggle_1_wiggle_binding(value) {
    wiggle = value;
    $$invalidate(39, wiggle);
  }
  const mouseup_handler_1 = (disabled2, label, event) => {
    if (!disabled2)
      is_selected(label) ? remove(label) : add(label, event);
  };
  const mouseover_handler = (disabled2, idx) => {
    if (!disabled2)
      $$invalidate(0, activeIndex = idx);
  };
  const focus_handler_1 = (disabled2, idx) => {
    if (!disabled2)
      $$invalidate(0, activeIndex = idx);
  };
  const mouseout_handler = () => $$invalidate(0, activeIndex = null);
  const blur_handler_1 = () => $$invalidate(0, activeIndex = null);
  const mouseup_handler_2 = (event) => add(searchText, event);
  const mouseover_handler_1 = () => $$invalidate(37, add_option_msg_is_active = true);
  const focus_handler_2 = () => $$invalidate(37, add_option_msg_is_active = true);
  const mouseout_handler_1 = () => $$invalidate(37, add_option_msg_is_active = false);
  const blur_handler_2 = () => $$invalidate(37, add_option_msg_is_active = false);
  function div_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      outerDiv = $$value;
      $$invalidate(9, outerDiv);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("activeIndex" in $$props2)
      $$invalidate(0, activeIndex = $$props2.activeIndex);
    if ("activeOption" in $$props2)
      $$invalidate(49, activeOption = $$props2.activeOption);
    if ("addOptionMsg" in $$props2)
      $$invalidate(10, addOptionMsg = $$props2.addOptionMsg);
    if ("allowUserOptions" in $$props2)
      $$invalidate(11, allowUserOptions = $$props2.allowUserOptions);
    if ("autocomplete" in $$props2)
      $$invalidate(12, autocomplete = $$props2.autocomplete);
    if ("autoScroll" in $$props2)
      $$invalidate(50, autoScroll = $$props2.autoScroll);
    if ("breakpoint" in $$props2)
      $$invalidate(51, breakpoint = $$props2.breakpoint);
    if ("defaultDisabledTitle" in $$props2)
      $$invalidate(13, defaultDisabledTitle = $$props2.defaultDisabledTitle);
    if ("disabled" in $$props2)
      $$invalidate(35, disabled = $$props2.disabled);
    if ("disabledInputTitle" in $$props2)
      $$invalidate(14, disabledInputTitle = $$props2.disabledInputTitle);
    if ("filterFunc" in $$props2)
      $$invalidate(52, filterFunc = $$props2.filterFunc);
    if ("focusInputOnSelect" in $$props2)
      $$invalidate(53, focusInputOnSelect = $$props2.focusInputOnSelect);
    if ("id" in $$props2)
      $$invalidate(15, id = $$props2.id);
    if ("input" in $$props2)
      $$invalidate(6, input = $$props2.input);
    if ("inputClass" in $$props2)
      $$invalidate(16, inputClass = $$props2.inputClass);
    if ("invalid" in $$props2)
      $$invalidate(7, invalid = $$props2.invalid);
    if ("liActiveOptionClass" in $$props2)
      $$invalidate(17, liActiveOptionClass = $$props2.liActiveOptionClass);
    if ("liOptionClass" in $$props2)
      $$invalidate(18, liOptionClass = $$props2.liOptionClass);
    if ("liSelectedClass" in $$props2)
      $$invalidate(19, liSelectedClass = $$props2.liSelectedClass);
    if ("loading" in $$props2)
      $$invalidate(20, loading = $$props2.loading);
    if ("matchingOptions" in $$props2)
      $$invalidate(1, matchingOptions = $$props2.matchingOptions);
    if ("maxSelect" in $$props2)
      $$invalidate(21, maxSelect = $$props2.maxSelect);
    if ("maxSelectMsg" in $$props2)
      $$invalidate(22, maxSelectMsg = $$props2.maxSelectMsg);
    if ("name" in $$props2)
      $$invalidate(23, name2 = $$props2.name);
    if ("noOptionsMsg" in $$props2)
      $$invalidate(24, noOptionsMsg = $$props2.noOptionsMsg);
    if ("open" in $$props2)
      $$invalidate(8, open = $$props2.open);
    if ("options" in $$props2)
      $$invalidate(2, options = $$props2.options);
    if ("outerDiv" in $$props2)
      $$invalidate(9, outerDiv = $$props2.outerDiv);
    if ("outerDivClass" in $$props2)
      $$invalidate(25, outerDivClass = $$props2.outerDivClass);
    if ("parseLabelsAsHtml" in $$props2)
      $$invalidate(26, parseLabelsAsHtml = $$props2.parseLabelsAsHtml);
    if ("placeholder" in $$props2)
      $$invalidate(27, placeholder = $$props2.placeholder);
    if ("removeAllTitle" in $$props2)
      $$invalidate(28, removeAllTitle = $$props2.removeAllTitle);
    if ("removeBtnTitle" in $$props2)
      $$invalidate(29, removeBtnTitle = $$props2.removeBtnTitle);
    if ("required" in $$props2)
      $$invalidate(30, required = $$props2.required);
    if ("searchText" in $$props2)
      $$invalidate(3, searchText = $$props2.searchText);
    if ("selected" in $$props2)
      $$invalidate(4, selected = $$props2.selected);
    if ("selectedLabels" in $$props2)
      $$invalidate(5, selectedLabels = $$props2.selectedLabels);
    if ("selectedValues" in $$props2)
      $$invalidate(48, selectedValues = $$props2.selectedValues);
    if ("sortSelected" in $$props2)
      $$invalidate(54, sortSelected = $$props2.sortSelected);
    if ("ulOptionsClass" in $$props2)
      $$invalidate(31, ulOptionsClass = $$props2.ulOptionsClass);
    if ("ulSelectedClass" in $$props2)
      $$invalidate(32, ulSelectedClass = $$props2.ulSelectedClass);
    if ("inputmode" in $$props2)
      $$invalidate(33, inputmode = $$props2.inputmode);
    if ("pattern" in $$props2)
      $$invalidate(34, pattern = $$props2.pattern);
    if ("$$scope" in $$props2)
      $$invalidate(90, $$scope = $$props2.$$scope);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty[0] & 16) {
      $:
        $$invalidate(5, selectedLabels = selected.map(get_label));
    }
    if ($$self.$$.dirty[0] & 16) {
      $:
        $$invalidate(48, selectedValues = selected.map(get_value));
    }
    if ($$self.$$.dirty[1] & 131072) {
      $:
        $$invalidate(36, formValue = selectedValues.join(`,`));
    }
    if ($$self.$$.dirty[1] & 32) {
      $:
        if (formValue)
          $$invalidate(7, invalid = false);
    }
    if ($$self.$$.dirty[0] & 44 | $$self.$$.dirty[1] & 2097152) {
      $:
        $$invalidate(1, matchingOptions = options.filter((op) => filterFunc(op, searchText) && !selectedLabels.includes(get_label(op))));
    }
    if ($$self.$$.dirty[0] & 3) {
      $:
        $$invalidate(49, activeOption = activeIndex !== null ? matchingOptions[activeIndex] : null);
    }
    if ($$self.$$.dirty[0] & 32) {
      $:
        $$invalidate(40, is_selected = (label) => selectedLabels.includes(label));
    }
  };
  return [
    activeIndex,
    matchingOptions,
    options,
    searchText,
    selected,
    selectedLabels,
    input,
    invalid,
    open,
    outerDiv,
    addOptionMsg,
    allowUserOptions,
    autocomplete,
    defaultDisabledTitle,
    disabledInputTitle,
    id,
    inputClass,
    liActiveOptionClass,
    liOptionClass,
    liSelectedClass,
    loading,
    maxSelect,
    maxSelectMsg,
    name2,
    noOptionsMsg,
    outerDivClass,
    parseLabelsAsHtml,
    placeholder,
    removeAllTitle,
    removeBtnTitle,
    required,
    ulOptionsClass,
    ulSelectedClass,
    inputmode,
    pattern,
    disabled,
    formValue,
    add_option_msg_is_active,
    window_width,
    wiggle,
    is_selected,
    add,
    remove,
    open_dropdown,
    handle_keydown,
    remove_all,
    if_enter_or_space,
    on_click_outside,
    selectedValues,
    activeOption,
    autoScroll,
    breakpoint,
    filterFunc,
    focusInputOnSelect,
    sortSelected,
    slots,
    mousedown_handler_1,
    mousedown_handler_2,
    focus_handler,
    blur_handler,
    change_handler,
    click_handler3,
    keydown_handler2,
    keyup_handler,
    mousedown_handler,
    mouseenter_handler,
    mouseleave_handler,
    touchcancel_handler,
    touchend_handler,
    touchmove_handler,
    touchstart_handler,
    onwindowresize,
    input0_input_handler,
    invalid_handler,
    mouseup_handler,
    keydown_handler_1,
    input1_binding,
    input1_input_handler,
    wiggle_1_wiggle_binding,
    mouseup_handler_1,
    mouseover_handler,
    focus_handler_1,
    mouseout_handler,
    blur_handler_1,
    mouseup_handler_2,
    mouseover_handler_1,
    focus_handler_2,
    mouseout_handler_1,
    blur_handler_2,
    div_binding,
    $$scope
  ];
}
var MultiSelect = class extends SvelteComponent {
  constructor(options) {
    super();
    init(
      this,
      options,
      instance29,
      create_fragment29,
      safe_not_equal,
      {
        activeIndex: 0,
        activeOption: 49,
        addOptionMsg: 10,
        allowUserOptions: 11,
        autocomplete: 12,
        autoScroll: 50,
        breakpoint: 51,
        defaultDisabledTitle: 13,
        disabled: 35,
        disabledInputTitle: 14,
        filterFunc: 52,
        focusInputOnSelect: 53,
        id: 15,
        input: 6,
        inputClass: 16,
        invalid: 7,
        liActiveOptionClass: 17,
        liOptionClass: 18,
        liSelectedClass: 19,
        loading: 20,
        matchingOptions: 1,
        maxSelect: 21,
        maxSelectMsg: 22,
        name: 23,
        noOptionsMsg: 24,
        open: 8,
        options: 2,
        outerDiv: 9,
        outerDivClass: 25,
        parseLabelsAsHtml: 26,
        placeholder: 27,
        removeAllTitle: 28,
        removeBtnTitle: 29,
        required: 30,
        searchText: 3,
        selected: 4,
        selectedLabels: 5,
        selectedValues: 48,
        sortSelected: 54,
        ulOptionsClass: 31,
        ulSelectedClass: 32,
        inputmode: 33,
        pattern: 34
      },
      add_css23,
      [-1, -1, -1, -1]
    );
  }
};
var MultiSelect_default = MultiSelect;

// node_modules/svelte-multiselect/index.js
var get_label = (op) => op instanceof Object ? op.label : op;
var get_value = (op) => op instanceof Object ? op.value ?? op.label : op;
if (typeof Element !== `undefined` && !Element.prototype?.scrollIntoViewIfNeeded) {
  Element.prototype.scrollIntoViewIfNeeded = function(centerIfNeeded = true) {
    const el = this;
    new IntersectionObserver(function([entry]) {
      const ratio = entry.intersectionRatio;
      if (ratio < 1) {
        const place = ratio <= 0 && centerIfNeeded ? `center` : `nearest`;
        el.scrollIntoView({
          block: place,
          inline: place
        });
      }
      this.disconnect();
    }).observe(this);
  };
}

// src/builder/view/creatures/FilterModal.svelte
var import_obsidian30 = require("obsidian");

// src/builder/stores/filter.ts
var DEFAULT_CR = [0, 30];
function createCR() {
  const store = writable([...DEFAULT_CR]);
  const { subscribe: subscribe2, set, update: update2 } = store;
  const isDefault = derived(store, (existing) => {
    if (DEFAULT_CR[0] == existing[0] && DEFAULT_CR[1] == existing[1])
      return true;
    return false;
  });
  return {
    isDefault,
    subscribe: subscribe2,
    set: (value) => {
      const current = get_store_value(store);
      let setMin = true, setMax = true;
      if (value[0] == current[0] || value[0] < 0) {
        setMin = false;
      }
      if (value[1] == current[1] || value[0] > 30) {
        setMax = false;
      }
      if (!setMin && !setMax)
        return;
      update2((cr2) => {
        cr2 = [...value];
        return cr2;
      });
    },
    reset: () => set([...DEFAULT_CR]),
    update: update2,
    comparer: (value) => derived(store, (values) => {
      if (get_store_value(isDefault))
        return true;
      return value[0] >= values[0] && value[1] <= values[1];
    })
  };
}
function createStringArrayStore() {
  let DEFAULT_STRING_ARRAY = [];
  const store = writable([...DEFAULT_STRING_ARRAY]);
  const { subscribe: subscribe2, set, update: update2 } = store;
  const isDefault = derived(store, (existing) => {
    return !existing.length;
  });
  return {
    isDefault,
    subscribe: subscribe2,
    set,
    reset: () => set([...DEFAULT_STRING_ARRAY]),
    comparer: (value) => derived(store, (values) => {
      return get_store_value(isDefault) || values.includes(value);
    }),
    update: update2
  };
}
var cr = createCR();
var alignment = createStringArrayStore();
var type = createStringArrayStore();
var size = createStringArrayStore();
var sources = createStringArrayStore();
var name = writable();

// src/builder/view/creatures/FilterModal.svelte
function add_css24(target) {
  append_styles(target, "svelte-1hrxzxn", ".buttons.svelte-1hrxzxn{display:flex;align-items:center;gap:1rem;margin-bottom:1rem}.sources-list.svelte-1hrxzxn{display:grid;grid-template-columns:repeat(auto-fill, minmax(200px, 1fr));gap:1rem}");
}
function get_each_context11(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[5] = list[i];
  return child_ctx;
}
function create_each_block11(ctx) {
  let div;
  let input;
  let input_name_value;
  let input_id_value;
  let input_checked_value;
  let t0;
  let label;
  let t1_value = ctx[5] + "";
  let t1;
  let label_for_value;
  let t2;
  return {
    c() {
      div = element("div");
      input = element("input");
      t0 = space();
      label = element("label");
      t1 = text(t1_value);
      t2 = space();
      attr(input, "type", "checkbox");
      attr(input, "name", input_name_value = ctx[5]);
      attr(input, "id", input_id_value = `ID_source_${ctx[5]}`);
      input.checked = input_checked_value = !ctx[0].includes(ctx[5]);
      attr(label, "for", label_for_value = `ID_source_${ctx[5]}`);
      attr(div, "class", "source");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, input);
      append(div, t0);
      append(div, label);
      append(label, t1);
      append(div, t2);
    },
    p(ctx2, dirty) {
      if (dirty & 1 && input_checked_value !== (input_checked_value = !ctx2[0].includes(ctx2[5]))) {
        input.checked = input_checked_value;
      }
    },
    d(detaching) {
      if (detaching)
        detach(div);
    }
  };
}
function create_fragment30(ctx) {
  let div4;
  let h3;
  let t1;
  let div2;
  let div0;
  let all_action;
  let t2;
  let div1;
  let none_action;
  let t3;
  let div3;
  let mounted;
  let dispose;
  let each_value = ctx[1];
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block11(get_each_context11(ctx, each_value, i));
  }
  return {
    c() {
      div4 = element("div");
      h3 = element("h3");
      h3.textContent = "Sources";
      t1 = space();
      div2 = element("div");
      div0 = element("div");
      t2 = space();
      div1 = element("div");
      t3 = space();
      div3 = element("div");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      attr(div2, "class", "buttons svelte-1hrxzxn");
      attr(div3, "class", "sources-list svelte-1hrxzxn");
      attr(div4, "class", "initiative-tracker intiative-tracker-modal encounter-builder-modal filter-sources-modal");
    },
    m(target, anchor) {
      insert(target, div4, anchor);
      append(div4, h3);
      append(div4, t1);
      append(div4, div2);
      append(div2, div0);
      append(div2, t2);
      append(div2, div1);
      append(div4, t3);
      append(div4, div3);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(div3, null);
      }
      if (!mounted) {
        dispose = [
          action_destroyer(all_action = ctx[2].call(null, div0)),
          action_destroyer(none_action = ctx[3].call(null, div1))
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & 3) {
        each_value = ctx2[1];
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context11(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block11(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(div3, null);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value.length;
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(div4);
      destroy_each(each_blocks, detaching);
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance30($$self, $$props, $$invalidate) {
  let $sources;
  component_subscribe($$self, sources, ($$value) => $$invalidate(0, $sources = $$value));
  let { plugin } = $$props;
  const allSources = [...new Set(plugin.bestiary.map((c) => c.source).flat())].filter((s) => s).sort();
  const all = (node) => {
    new import_obsidian30.ButtonComponent(node).setButtonText("Select All").onClick(() => {
      set_store_value(sources, $sources = [], $sources);
    });
  };
  const none = (node) => {
    new import_obsidian30.ButtonComponent(node).setButtonText("Deselect All").onClick(() => {
      set_store_value(sources, $sources = [...allSources], $sources);
    });
  };
  $$self.$$set = ($$props2) => {
    if ("plugin" in $$props2)
      $$invalidate(4, plugin = $$props2.plugin);
  };
  return [$sources, allSources, all, none, plugin];
}
var FilterModal = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance30, create_fragment30, safe_not_equal, { plugin: 4 }, add_css24);
  }
};
var FilterModal_default = FilterModal;

// src/builder/view/creatures/Filters.svelte
function add_css25(target) {
  append_styles(target, "svelte-123dcwo", ".filters-container.svelte-123dcwo{display:flex;flex-flow:column nowrap;gap:1rem}.controls.svelte-123dcwo{display:flex;justify-content:space-between;align-items:center;gap:0.5rem}.search.svelte-123dcwo,.search.svelte-123dcwo input{width:100%}.filter-button.svelte-123dcwo{position:relative}.filter-number.svelte-123dcwo{position:absolute;bottom:0;right:0;background-color:var(--interactive-normal);border-radius:50%;width:14px;height:14px;display:flex;align-items:center;justify-content:center;font-size:var(--font-smallest)}.filters.svelte-123dcwo{display:flex;align-items:center;gap:1rem;width:100%}.cr-container.svelte-123dcwo{display:flex;align-items:center;gap:1rem;width:100%;white-space:nowrap}input.svelte-123dcwo{text-align:center}.multiselect-container.svelte-123dcwo{width:100%}div.multiselect{--sms-border:none;--sms-bg:var(--interactive-normal);--sms-options-bg:var(--interactive-normal);--sms-border-radius:var(--radius)}div.multiselect ul{padding-left:0;border-radius:var(--radius)}div.multiselect button{height:0}div.multiselect input{width:0;font-size:var(--font-ui-small)}div.multiselect li{border-left:none}div.multiselect li::before{content:none}");
}
function create_if_block19(ctx) {
  let div3;
  let div0;
  let sourcesButton_action;
  let t0;
  let div1;
  let multiselect0;
  let updating_selected;
  let t1;
  let div2;
  let multiselect1;
  let updating_selected_1;
  let div3_transition;
  let t2;
  let div4;
  let span0;
  let t4;
  let input0;
  let t5;
  let slider;
  let updating_value;
  let t6;
  let input1;
  let t7;
  let span1;
  let current;
  let mounted;
  let dispose;
  function multiselect0_selected_binding(value) {
    ctx[17](value);
  }
  let multiselect0_props = {
    options: ctx[6],
    outerDivClass: "dropdown",
    placeholder: "Sizes"
  };
  if (ctx[1] !== void 0) {
    multiselect0_props.selected = ctx[1];
  }
  multiselect0 = new MultiSelect_default({ props: multiselect0_props });
  binding_callbacks.push(() => bind(multiselect0, "selected", multiselect0_selected_binding));
  function multiselect1_selected_binding(value) {
    ctx[18](value);
  }
  let multiselect1_props = {
    options: ctx[5],
    outerDivClass: "dropdown",
    placeholder: "Types"
  };
  if (ctx[0] !== void 0) {
    multiselect1_props.selected = ctx[0];
  }
  multiselect1 = new MultiSelect_default({ props: multiselect1_props });
  binding_callbacks.push(() => bind(multiselect1, "selected", multiselect1_selected_binding));
  function slider_value_binding(value) {
    ctx[20](value);
  }
  let slider_props = {
    range: true,
    order: true,
    min: 0,
    max: 30
  };
  if (ctx[2] !== void 0) {
    slider_props.value = ctx[2];
  }
  slider = new Slider_default({ props: slider_props });
  binding_callbacks.push(() => bind(slider, "value", slider_value_binding));
  return {
    c() {
      div3 = element("div");
      div0 = element("div");
      t0 = space();
      div1 = element("div");
      create_component(multiselect0.$$.fragment);
      t1 = space();
      div2 = element("div");
      create_component(multiselect1.$$.fragment);
      t2 = space();
      div4 = element("div");
      span0 = element("span");
      span0.textContent = "Min CR";
      t4 = space();
      input0 = element("input");
      t5 = space();
      create_component(slider.$$.fragment);
      t6 = space();
      input1 = element("input");
      t7 = space();
      span1 = element("span");
      span1.textContent = "Max CR";
      attr(div1, "class", "multiselect-container svelte-123dcwo");
      attr(div2, "class", "multiselect-container svelte-123dcwo");
      attr(div3, "class", "filters svelte-123dcwo");
      attr(input0, "type", "number");
      attr(input0, "placeholder", "Min CR");
      attr(input0, "min", "0");
      attr(input0, "max", "30");
      attr(input0, "class", "svelte-123dcwo");
      attr(input1, "type", "number");
      attr(input1, "placeholder", "Max CR");
      attr(input1, "min", "0");
      attr(input1, "max", "30");
      attr(input1, "class", "svelte-123dcwo");
      attr(div4, "class", "cr-container svelte-123dcwo");
    },
    m(target, anchor) {
      insert(target, div3, anchor);
      append(div3, div0);
      append(div3, t0);
      append(div3, div1);
      mount_component(multiselect0, div1, null);
      append(div3, t1);
      append(div3, div2);
      mount_component(multiselect1, div2, null);
      insert(target, t2, anchor);
      insert(target, div4, anchor);
      append(div4, span0);
      append(div4, t4);
      append(div4, input0);
      set_input_value(input0, ctx[2][0]);
      append(div4, t5);
      mount_component(slider, div4, null);
      append(div4, t6);
      append(div4, input1);
      set_input_value(input1, ctx[2][1]);
      append(div4, t7);
      append(div4, span1);
      current = true;
      if (!mounted) {
        dispose = [
          action_destroyer(sourcesButton_action = ctx[11].call(null, div0)),
          listen(input0, "input", ctx[19]),
          listen(input1, "input", ctx[21])
        ];
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      const multiselect0_changes = {};
      if (!updating_selected && dirty & 2) {
        updating_selected = true;
        multiselect0_changes.selected = ctx[1];
        add_flush_callback(() => updating_selected = false);
      }
      multiselect0.$set(multiselect0_changes);
      const multiselect1_changes = {};
      if (dirty & 32)
        multiselect1_changes.options = ctx[5];
      if (!updating_selected_1 && dirty & 1) {
        updating_selected_1 = true;
        multiselect1_changes.selected = ctx[0];
        add_flush_callback(() => updating_selected_1 = false);
      }
      multiselect1.$set(multiselect1_changes);
      if (dirty & 4 && to_number(input0.value) !== ctx[2][0]) {
        set_input_value(input0, ctx[2][0]);
      }
      const slider_changes = {};
      if (!updating_value && dirty & 4) {
        updating_value = true;
        slider_changes.value = ctx[2];
        add_flush_callback(() => updating_value = false);
      }
      slider.$set(slider_changes);
      if (dirty & 4 && to_number(input1.value) !== ctx[2][1]) {
        set_input_value(input1, ctx[2][1]);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(multiselect0.$$.fragment, local);
      transition_in(multiselect1.$$.fragment, local);
      add_render_callback(() => {
        if (!div3_transition)
          div3_transition = create_bidirectional_transition(div3, slide, { easing: identity }, true);
        div3_transition.run(1);
      });
      transition_in(slider.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(multiselect0.$$.fragment, local);
      transition_out(multiselect1.$$.fragment, local);
      if (!div3_transition)
        div3_transition = create_bidirectional_transition(div3, slide, { easing: identity }, false);
      div3_transition.run(0);
      transition_out(slider.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div3);
      destroy_component(multiselect0);
      destroy_component(multiselect1);
      if (detaching && div3_transition)
        div3_transition.end();
      if (detaching)
        detach(t2);
      if (detaching)
        detach(div4);
      destroy_component(slider);
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_fragment31(ctx) {
  let div6;
  let div5;
  let div0;
  let search_action;
  let t0;
  let div3;
  let div1;
  let filter_action;
  let t1;
  let div2;
  let t2;
  let t3;
  let div4;
  let resetIcon_action;
  let t4;
  let current;
  let mounted;
  let dispose;
  let if_block = ctx[3] && create_if_block19(ctx);
  return {
    c() {
      div6 = element("div");
      div5 = element("div");
      div0 = element("div");
      t0 = space();
      div3 = element("div");
      div1 = element("div");
      t1 = space();
      div2 = element("div");
      t2 = text(ctx[4]);
      t3 = space();
      div4 = element("div");
      t4 = space();
      if (if_block)
        if_block.c();
      attr(div0, "class", "search svelte-123dcwo");
      attr(div2, "class", "filter-number svelte-123dcwo");
      attr(div3, "class", "filter-button svelte-123dcwo");
      attr(div5, "class", "controls svelte-123dcwo");
      attr(div6, "class", "filters-container svelte-123dcwo");
    },
    m(target, anchor) {
      insert(target, div6, anchor);
      append(div6, div5);
      append(div5, div0);
      append(div5, t0);
      append(div5, div3);
      append(div3, div1);
      append(div3, t1);
      append(div3, div2);
      append(div2, t2);
      append(div5, t3);
      append(div5, div4);
      append(div6, t4);
      if (if_block)
        if_block.m(div6, null);
      current = true;
      if (!mounted) {
        dispose = [
          action_destroyer(search_action = ctx[7].call(null, div0)),
          action_destroyer(filter_action = ctx[10].call(null, div1)),
          listen(div1, "click", ctx[15]),
          action_destroyer(resetIcon_action = ctx[8].call(null, div4)),
          listen(div4, "click", ctx[16])
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (!current || dirty & 16)
        set_data(t2, ctx2[4]);
      if (ctx2[3]) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & 8) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block19(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(div6, null);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div6);
      if (if_block)
        if_block.d();
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance31($$self, $$props, $$invalidate) {
  let types;
  let active2;
  let $alignment;
  let $type;
  let $size;
  let $sources;
  let $cr;
  let $name;
  component_subscribe($$self, alignment, ($$value) => $$invalidate(12, $alignment = $$value));
  component_subscribe($$self, type, ($$value) => $$invalidate(0, $type = $$value));
  component_subscribe($$self, size, ($$value) => $$invalidate(1, $size = $$value));
  component_subscribe($$self, sources, ($$value) => $$invalidate(13, $sources = $$value));
  component_subscribe($$self, cr, ($$value) => $$invalidate(2, $cr = $$value));
  component_subscribe($$self, name, ($$value) => $$invalidate(14, $name = $$value));
  let open = false;
  const plugin = getContext("plugin");
  const original = plugin.bestiary;
  const sizes = ["Tiny", "Small", "Medium", "Large", "Huge", "Gargantuan", "Varies"];
  const search = (node) => {
    new import_obsidian31.TextComponent(node).setPlaceholder("Name").onChange((0, import_obsidian31.debounce)(
      (v) => {
        set_store_value(name, $name = v, $name);
      },
      10
    ));
  };
  const resetIcon = (node) => {
    new import_obsidian31.ExtraButtonComponent(node).setIcon("reset");
  };
  const reset = () => {
    cr.reset();
    alignment.reset();
    type.reset();
    size.reset();
    sources.reset();
    name.set("");
  };
  const filter = (node) => {
    new import_obsidian31.ExtraButtonComponent(node).setIcon("filter");
  };
  const sourcesButton = (node) => {
    new import_obsidian31.ButtonComponent(node).setButtonText("Manage Sources").onClick(() => {
      const modal = new import_obsidian31.Modal(plugin.app);
      new FilterModal_default({
        target: modal.contentEl,
        props: { plugin }
      });
      modal.open();
    });
  };
  const click_handler3 = () => $$invalidate(3, open = !open);
  const click_handler_12 = () => reset();
  function multiselect0_selected_binding(value) {
    $size = value;
    size.set($size);
  }
  function multiselect1_selected_binding(value) {
    $type = value;
    type.set($type);
  }
  function input0_input_handler() {
    $cr[0] = to_number(this.value);
    cr.set($cr);
  }
  function slider_value_binding(value) {
    $cr = value;
    cr.set($cr);
  }
  function input1_input_handler() {
    $cr[1] = to_number(this.value);
    cr.set($cr);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty & 28679) {
      $:
        $$invalidate(4, active2 = (!$name || !$name.length ? 0 : 1) + ($cr[0] == 0 ? 0 : 1) + ($cr[1] == 30 ? 0 : 1) + (!$sources.length ? 0 : 1) + (!$size.length ? 0 : 1) + (!$type.length ? 0 : 1) + (!$alignment.length ? 0 : 1));
    }
  };
  $:
    $$invalidate(5, types = [
      ...new Set(original.map((c) => {
        return typeof c.type == "string" ? c.type : null;
      }).filter((c) => c))
    ].sort());
  return [
    $type,
    $size,
    $cr,
    open,
    active2,
    types,
    sizes,
    search,
    resetIcon,
    reset,
    filter,
    sourcesButton,
    $alignment,
    $sources,
    $name,
    click_handler3,
    click_handler_12,
    multiselect0_selected_binding,
    multiselect1_selected_binding,
    input0_input_handler,
    slider_value_binding,
    input1_input_handler
  ];
}
var Filters = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance31, create_fragment31, safe_not_equal, {}, add_css25);
  }
};
var Filters_default = Filters;

// src/builder/view/creatures/Creatures.svelte
var import_obsidian33 = require("obsidian");

// src/builder/view/creatures/Pagination.svelte
var import_obsidian32 = require("obsidian");
function add_css26(target) {
  append_styles(target, "svelte-zo5pkp", ".pagination.svelte-zo5pkp{display:flex;justify-content:space-between;align-items:center;gap:1rem}.paginated-container.svelte-zo5pkp{display:flex;align-items:center;gap:1rem}.paginated.svelte-zo5pkp{display:flex;align-items:center;gap:1rem}.clickable-icon.active.svelte-zo5pkp{background-color:var(--background-modifier-hover)}.slicer.svelte-zo5pkp{display:flex;align-items:center;gap:0.5rem}");
}
function get_each_context12(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[14] = list[i];
  return child_ctx;
}
function create_else_block11(ctx) {
  let span;
  let t0_value = ctx[14] + "";
  let t0;
  let t1;
  let mounted;
  let dispose;
  function click_handler_12() {
    return ctx[13](ctx[14]);
  }
  return {
    c() {
      span = element("span");
      t0 = text(t0_value);
      t1 = space();
      attr(span, "class", "clickable-icon svelte-zo5pkp");
      toggle_class(span, "active", ctx[14] == ctx[0]);
    },
    m(target, anchor) {
      insert(target, span, anchor);
      append(span, t0);
      append(span, t1);
      if (!mounted) {
        dispose = listen(span, "click", click_handler_12);
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (dirty & 2 && t0_value !== (t0_value = ctx[14] + ""))
        set_data(t0, t0_value);
      if (dirty & 3) {
        toggle_class(span, "active", ctx[14] == ctx[0]);
      }
    },
    d(detaching) {
      if (detaching)
        detach(span);
      mounted = false;
      dispose();
    }
  };
}
function create_if_block20(ctx) {
  let span;
  let mounted;
  let dispose;
  return {
    c() {
      span = element("span");
      span.textContent = "...";
    },
    m(target, anchor) {
      insert(target, span, anchor);
      if (!mounted) {
        dispose = listen(span, "click", ctx[12]);
        mounted = true;
      }
    },
    p: noop,
    d(detaching) {
      if (detaching)
        detach(span);
      mounted = false;
      dispose();
    }
  };
}
function create_each_block12(ctx) {
  let if_block_anchor;
  function select_block_type(ctx2, dirty) {
    if (ctx2[14] == null)
      return create_if_block20;
    return create_else_block11;
  }
  let current_block_type = select_block_type(ctx, -1);
  let if_block = current_block_type(ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
    },
    p(ctx2, dirty) {
      if (current_block_type === (current_block_type = select_block_type(ctx2, dirty)) && if_block) {
        if_block.p(ctx2, dirty);
      } else {
        if_block.d(1);
        if_block = current_block_type(ctx2);
        if (if_block) {
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      }
    },
    d(detaching) {
      if_block.d(detaching);
      if (detaching)
        detach(if_block_anchor);
    }
  };
}
function create_fragment32(ctx) {
  let div6;
  let div1;
  let div0;
  let slicer_action;
  let t0;
  let span;
  let t2;
  let div5;
  let div2;
  let previous_action;
  let t3;
  let div3;
  let t4;
  let div4;
  let next_action;
  let mounted;
  let dispose;
  let each_value = ctx[1];
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block12(get_each_context12(ctx, each_value, i));
  }
  return {
    c() {
      div6 = element("div");
      div1 = element("div");
      div0 = element("div");
      t0 = space();
      span = element("span");
      span.textContent = "per page";
      t2 = space();
      div5 = element("div");
      div2 = element("div");
      t3 = space();
      div3 = element("div");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      t4 = space();
      div4 = element("div");
      attr(div1, "class", "slicer svelte-zo5pkp");
      attr(div2, "class", "previous");
      attr(div3, "class", "paginated svelte-zo5pkp");
      attr(div4, "class", "next");
      attr(div5, "class", "paginated-container svelte-zo5pkp");
      attr(div6, "class", "pagination svelte-zo5pkp");
    },
    m(target, anchor) {
      insert(target, div6, anchor);
      append(div6, div1);
      append(div1, div0);
      append(div1, t0);
      append(div1, span);
      append(div6, t2);
      append(div6, div5);
      append(div5, div2);
      append(div5, t3);
      append(div5, div3);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(div3, null);
      }
      append(div5, t4);
      append(div5, div4);
      if (!mounted) {
        dispose = [
          action_destroyer(slicer_action = ctx[3].call(null, div0)),
          action_destroyer(previous_action = ctx[4].call(null, div2)),
          action_destroyer(next_action = ctx[5].call(null, div4))
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & 71) {
        each_value = ctx2[1];
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context12(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block12(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(div3, null);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value.length;
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(div6);
      destroy_each(each_blocks, detaching);
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance32($$self, $$props, $$invalidate) {
  let keys;
  let displayed;
  let { slice } = $$props;
  let { page } = $$props;
  let { pages } = $$props;
  const dispatch2 = createEventDispatcher();
  const slicer = (node) => {
    new import_obsidian32.DropdownComponent(node).addOptions({
      "10": "10",
      "25": "25",
      "50": "50",
      "100": "100",
      "200": "200"
    }).setValue(`${slice}`).onChange((v) => dispatch2("slice", Number(v)));
  };
  let prev;
  const previous = (node) => {
    $$invalidate(9, prev = new import_obsidian32.ExtraButtonComponent(node).setIcon("chevron-left").setDisabled(page == 1).onClick(() => {
      dispatch2("previous");
    }));
  };
  let nex;
  const next2 = (node) => {
    $$invalidate(10, nex = new import_obsidian32.ExtraButtonComponent(node).setIcon("chevron-right").setDisabled(page == pages).onClick(() => {
      dispatch2("next");
    }));
  };
  const paginationMenu = (evt) => {
    const menu = new import_obsidian32.Menu();
    for (const number of keys) {
      menu.addItem((item) => {
        item.setTitle(`${number}`).onClick(() => {
          dispatch2("page", number);
        });
      });
    }
    menu.showAtMouseEvent(evt);
  };
  const click_handler3 = (evt) => paginationMenu(evt);
  const click_handler_12 = (num) => dispatch2("page", num);
  $$self.$$set = ($$props2) => {
    if ("slice" in $$props2)
      $$invalidate(7, slice = $$props2.slice);
    if ("page" in $$props2)
      $$invalidate(0, page = $$props2.page);
    if ("pages" in $$props2)
      $$invalidate(8, pages = $$props2.pages);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & 256) {
      $:
        $$invalidate(11, keys = [...Array(pages).keys()].map((k) => k + 1));
    }
    if ($$self.$$.dirty & 1793) {
      $: {
        if (nex && prev) {
          nex.setDisabled(page == pages);
          prev.setDisabled(page == 1);
        }
      }
    }
    if ($$self.$$.dirty & 2305) {
      $:
        $$invalidate(1, displayed = keys.reduce(
          (a, c) => {
            if (c == 1) {
              a.push(c);
            } else if (page == 1 && (c == 2 || c == 3)) {
              a.push(c);
            } else if (c == pages || page == pages && (c == pages - 1 || c == pages - 2)) {
              a.push(c);
            } else if (c == page - 1 || c == page || c == page + 1) {
              a.push(c);
            } else if (a.length >= 1 && a[a.length - 1] != null) {
              a.push(null);
            }
            return a;
          },
          []
        ));
    }
  };
  return [
    page,
    displayed,
    dispatch2,
    slicer,
    previous,
    next2,
    paginationMenu,
    slice,
    pages,
    prev,
    nex,
    keys,
    click_handler3,
    click_handler_12
  ];
}
var Pagination = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance32, create_fragment32, safe_not_equal, { slice: 7, page: 0, pages: 8 }, add_css26);
  }
};
var Pagination_default = Pagination;

// src/builder/view/creatures/Creatures.svelte
function add_css27(target) {
  append_styles(target, "svelte-1nkyvqk", ".filters.svelte-1nkyvqk{margin:1rem 0}.table-header.svelte-1nkyvqk{display:flex;gap:0.25rem}.invisible.svelte-1nkyvqk{color:transparent}table.svelte-1nkyvqk{width:100%}");
}
function get_each_context13(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[20] = list[i];
  return child_ctx;
}
function get_each_context_14(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[23] = list[i];
  return child_ctx;
}
function create_key_block2(ctx) {
  let div;
  let sortIcon_action;
  let mounted;
  let dispose;
  return {
    c() {
      div = element("div");
      attr(div, "class", "svelte-1nkyvqk");
      toggle_class(div, "invisible", !ctx[23].active);
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (!mounted) {
        dispose = action_destroyer(sortIcon_action = ctx[7].call(null, div));
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (dirty & 8) {
        toggle_class(div, "invisible", !ctx2[23].active);
      }
    },
    d(detaching) {
      if (detaching)
        detach(div);
      mounted = false;
      dispose();
    }
  };
}
function create_each_block_14(key_1, ctx) {
  let th;
  let div;
  let span;
  let t0_value = ctx[23].text + "";
  let t0;
  let t1;
  let previous_key = ctx[2];
  let t2;
  let mounted;
  let dispose;
  let key_block = create_key_block2(ctx);
  function click_handler3() {
    return ctx[13](ctx[23]);
  }
  return {
    key: key_1,
    first: null,
    c() {
      th = element("th");
      div = element("div");
      span = element("span");
      t0 = text(t0_value);
      t1 = space();
      key_block.c();
      t2 = space();
      attr(span, "class", "table-header-content");
      attr(div, "class", "table-header svelte-1nkyvqk");
      this.first = th;
    },
    m(target, anchor) {
      insert(target, th, anchor);
      append(th, div);
      append(div, span);
      append(span, t0);
      append(div, t1);
      key_block.m(div, null);
      append(th, t2);
      if (!mounted) {
        dispose = listen(th, "click", click_handler3);
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (dirty & 8 && t0_value !== (t0_value = ctx[23].text + ""))
        set_data(t0, t0_value);
      if (dirty & 4 && safe_not_equal(previous_key, previous_key = ctx[2])) {
        key_block.d(1);
        key_block = create_key_block2(ctx);
        key_block.c();
        key_block.m(div, null);
      } else {
        key_block.p(ctx, dirty);
      }
    },
    d(detaching) {
      if (detaching)
        detach(th);
      key_block.d(detaching);
      mounted = false;
      dispose();
    }
  };
}
function create_each_block13(ctx) {
  let creature;
  let current;
  creature = new Creature_default2({
    props: { creature: ctx[20] }
  });
  return {
    c() {
      create_component(creature.$$.fragment);
    },
    m(target, anchor) {
      mount_component(creature, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const creature_changes = {};
      if (dirty & 19)
        creature_changes.creature = ctx2[20];
      creature.$set(creature_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(creature.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(creature.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(creature, detaching);
    }
  };
}
function create_fragment33(ctx) {
  let div;
  let filters;
  let t0;
  let table;
  let thead;
  let each_blocks_1 = [];
  let each0_lookup = /* @__PURE__ */ new Map();
  let t1;
  let tbody;
  let t2;
  let pagination;
  let current;
  filters = new Filters_default({});
  let each_value_1 = ctx[3];
  const get_key = (ctx2) => ctx2[23].text;
  for (let i = 0; i < each_value_1.length; i += 1) {
    let child_ctx = get_each_context_14(ctx, each_value_1, i);
    let key = get_key(child_ctx);
    each0_lookup.set(key, each_blocks_1[i] = create_each_block_14(key, child_ctx));
  }
  let each_value = ctx[1].slice((ctx[4] - 1) * ctx[0], ctx[4] * ctx[0]);
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block13(get_each_context13(ctx, each_value, i));
  }
  const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
    each_blocks[i] = null;
  });
  pagination = new Pagination_default({
    props: {
      slice: ctx[0],
      page: ctx[4],
      pages: ctx[5]
    }
  });
  pagination.$on("slice", ctx[14]);
  pagination.$on("previous", ctx[15]);
  pagination.$on("next", ctx[16]);
  pagination.$on("page", ctx[17]);
  return {
    c() {
      div = element("div");
      create_component(filters.$$.fragment);
      t0 = space();
      table = element("table");
      thead = element("thead");
      for (let i = 0; i < each_blocks_1.length; i += 1) {
        each_blocks_1[i].c();
      }
      t1 = space();
      tbody = element("tbody");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      t2 = space();
      create_component(pagination.$$.fragment);
      attr(div, "class", "filters svelte-1nkyvqk");
      attr(table, "class", "svelte-1nkyvqk");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      mount_component(filters, div, null);
      insert(target, t0, anchor);
      insert(target, table, anchor);
      append(table, thead);
      for (let i = 0; i < each_blocks_1.length; i += 1) {
        each_blocks_1[i].m(thead, null);
      }
      append(table, t1);
      append(table, tbody);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(tbody, null);
      }
      insert(target, t2, anchor);
      mount_component(pagination, target, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (dirty & 76) {
        each_value_1 = ctx2[3];
        each_blocks_1 = update_keyed_each(each_blocks_1, dirty, get_key, 1, ctx2, each_value_1, each0_lookup, thead, destroy_block, create_each_block_14, null, get_each_context_14);
      }
      if (dirty & 19) {
        each_value = ctx2[1].slice((ctx2[4] - 1) * ctx2[0], ctx2[4] * ctx2[0]);
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context13(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
            transition_in(each_blocks[i], 1);
          } else {
            each_blocks[i] = create_each_block13(child_ctx);
            each_blocks[i].c();
            transition_in(each_blocks[i], 1);
            each_blocks[i].m(tbody, null);
          }
        }
        group_outros();
        for (i = each_value.length; i < each_blocks.length; i += 1) {
          out(i);
        }
        check_outros();
      }
      const pagination_changes = {};
      if (dirty & 1)
        pagination_changes.slice = ctx2[0];
      if (dirty & 16)
        pagination_changes.page = ctx2[4];
      if (dirty & 32)
        pagination_changes.pages = ctx2[5];
      pagination.$set(pagination_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(filters.$$.fragment, local);
      for (let i = 0; i < each_value.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      transition_in(pagination.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(filters.$$.fragment, local);
      each_blocks = each_blocks.filter(Boolean);
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      transition_out(pagination.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      destroy_component(filters);
      if (detaching)
        detach(t0);
      if (detaching)
        detach(table);
      for (let i = 0; i < each_blocks_1.length; i += 1) {
        each_blocks_1[i].d();
      }
      destroy_each(each_blocks, detaching);
      if (detaching)
        detach(t2);
      destroy_component(pagination, detaching);
    }
  };
}
function instance33($$self, $$props, $$invalidate) {
  let filtered;
  let pages;
  let $sources;
  let $type;
  let $size;
  let $cr;
  component_subscribe($$self, sources, ($$value) => $$invalidate(9, $sources = $$value));
  component_subscribe($$self, type, ($$value) => $$invalidate(10, $type = $$value));
  component_subscribe($$self, size, ($$value) => $$invalidate(11, $size = $$value));
  component_subscribe($$self, cr, ($$value) => $$invalidate(12, $cr = $$value));
  const plugin = getContext("plugin");
  let slice = 50;
  let sortDir = true;
  const sort = (field) => {
    if (field.active) {
      $$invalidate(2, sortDir = !sortDir);
    } else {
      $$invalidate(3, headers = headers.map((h) => {
        h.active = false;
        return h;
      }));
      field.active = true;
      $$invalidate(2, sortDir = true);
    }
    creatures.sort(sortDir ? field.sortAsc : field.sortDesc);
    $$invalidate(8, creatures);
  };
  const sortIcon = (node) => {
    (0, import_obsidian33.setIcon)(node, sortDir ? "chevron-up" : "chevron-down");
  };
  let headers = [
    {
      text: "Name",
      active: true,
      sortAsc: (a, b) => a.name.localeCompare(b.name),
      sortDesc: (a, b) => b.name.localeCompare(a.name)
    },
    {
      text: "CR",
      active: false,
      sortAsc: (a, b) => convertFraction(a.cr ?? 0) - convertFraction(b.cr ?? 0),
      sortDesc: (a, b) => convertFraction(b.cr ?? 0) - convertFraction(a.cr ?? 0)
    },
    {
      text: "Type",
      active: false,
      sortAsc: (a, b) => a.type?.localeCompare(b.type),
      sortDesc: (a, b) => b.type?.localeCompare(a.type)
    },
    {
      text: "Size",
      active: false,
      sortAsc: (a, b) => a.size?.localeCompare(b.size),
      sortDesc: (a, b) => b.size?.localeCompare(a.size)
    },
    {
      text: "Alignment",
      active: false,
      sortAsc: (a, b) => a.alignment?.localeCompare(b.alignment),
      sortDesc: (a, b) => b.alignment?.localeCompare(a.alignment)
    }
  ];
  let original = plugin.bestiary;
  let creatures = [...original];
  name.subscribe((n) => {
    if (!n || !n.length) {
      const header = headers.find((h) => h.active) ?? headers[0];
      if (!header.active)
        header.active = true;
      const active2 = sortDir ? header.sortAsc : header.sortDesc;
      $$invalidate(8, creatures = [...original].sort(active2));
    } else {
      const search = (0, import_obsidian33.prepareSimpleSearch)(n);
      const results = [];
      for (const monster of original) {
        if (search(monster.name)) {
          results.push(monster);
        }
      }
      $$invalidate(8, creatures = results);
    }
  });
  let page = 1;
  const click_handler3 = (header) => sort(header);
  const slice_handler = (evt) => $$invalidate(0, slice = evt.detail);
  const previous_handler = () => $$invalidate(4, page = page - 1);
  const next_handler = () => $$invalidate(4, page = Math.min(page + 1, pages));
  const page_handler = (evt) => $$invalidate(4, page = evt.detail);
  $$self.$$.update = () => {
    if ($$self.$$.dirty & 7936) {
      $:
        $$invalidate(1, filtered = creatures.filter((c) => get_store_value(cr.isDefault) || convertFraction(c.cr) >= $cr[0] && convertFraction(c.cr) <= $cr[1]).filter((c) => !$size.length || $size.map((s) => s?.toLowerCase()).includes(c.size?.toLowerCase())).filter((c) => !$type.length || $type.map((s) => s?.toLowerCase()).includes(c.type?.toLowerCase())).filter((c) => !$sources.length || typeof c.source == "string" ? !$sources.includes(c.source) : !c.source?.find((s) => $sources.includes(s))));
    }
    if ($$self.$$.dirty & 3) {
      $:
        $$invalidate(5, pages = Math.ceil(filtered.length / slice));
    }
  };
  return [
    slice,
    filtered,
    sortDir,
    headers,
    page,
    pages,
    sort,
    sortIcon,
    creatures,
    $sources,
    $type,
    $size,
    $cr,
    click_handler3,
    slice_handler,
    previous_handler,
    next_handler,
    page_handler
  ];
}
var Creatures = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance33, create_fragment33, safe_not_equal, {}, add_css27);
  }
};
var Creatures_default = Creatures;

// src/builder/view/encounter/Encounter.svelte
var import_obsidian35 = require("obsidian");

// src/builder/view/encounter/Creature.svelte
var import_obsidian34 = require("obsidian");
function add_css28(target) {
  append_styles(target, "svelte-1b96kim", ".encounter-creature-container.svelte-1b96kim{display:grid;align-items:center;justify-content:center;grid-template-columns:min-content 1fr 10% 10% auto;gap:0.5rem}.encounter-creature.svelte-1b96kim{display:flex;align-items:center;gap:0.5rem}.encounter-creature-context.svelte-1b96kim{text-align:right}.encounter-creature-controls.svelte-1b96kim{display:flex;align-items:center;gap:0.5rem}input.svelte-1b96kim{text-align:center;width:40px}.contains-icon.svelte-1b96kim{display:flex;align-items:center}");
}
function create_if_block_112(ctx) {
  let div;
  let div_aria_label_value;
  let baby_action;
  let mounted;
  let dispose;
  return {
    c() {
      div = element("div");
      attr(div, "class", "contains-icon svelte-1b96kim");
      attr(div, "aria-label", div_aria_label_value = `${ctx[0] > 1 ? "These creatures are" : "This creature is"} significantly under the average party level and might not contribute much to the fight.`);
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (!mounted) {
        dispose = action_destroyer(baby_action = ctx[8].call(null, div));
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (dirty & 1 && div_aria_label_value !== (div_aria_label_value = `${ctx2[0] > 1 ? "These creatures are" : "This creature is"} significantly under the average party level and might not contribute much to the fight.`)) {
        attr(div, "aria-label", div_aria_label_value);
      }
    },
    d(detaching) {
      if (detaching)
        detach(div);
      mounted = false;
      dispose();
    }
  };
}
function create_if_block21(ctx) {
  let div;
  let div_aria_label_value;
  let skull_action;
  let mounted;
  let dispose;
  return {
    c() {
      div = element("div");
      attr(div, "class", "contains-icon svelte-1b96kim");
      attr(div, "aria-label", div_aria_label_value = `${ctx[0] > 1 ? "These creatures are" : "This creature is"} significantly over the average party level and might prove a challenge.`);
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (!mounted) {
        dispose = action_destroyer(skull_action = ctx[10].call(null, div));
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (dirty & 1 && div_aria_label_value !== (div_aria_label_value = `${ctx2[0] > 1 ? "These creatures are" : "This creature is"} significantly over the average party level and might prove a challenge.`)) {
        attr(div, "aria-label", div_aria_label_value);
      }
    },
    d(detaching) {
      if (detaching)
        detach(div);
      mounted = false;
      dispose();
    }
  };
}
function create_fragment34(ctx) {
  let div8;
  let div2;
  let div0;
  let remove_action;
  let t0;
  let input;
  let t1;
  let div1;
  let add_action;
  let t2;
  let div3;
  let strong;
  let t3_value = ctx[1].name + "";
  let t3;
  let t4;
  let t5;
  let t6;
  let div4;
  let span0;
  let nullable0;
  let t7;
  let div5;
  let span1;
  let nullable1;
  let t8;
  let div7;
  let div6;
  let del_action;
  let current;
  let mounted;
  let dispose;
  let if_block0 = ctx[7] && create_if_block_112(ctx);
  let if_block1 = ctx[9] && create_if_block21(ctx);
  nullable0 = new Nullable_default({
    props: {
      str: `${ctx[6](ctx[1].cr)} CR`
    }
  });
  nullable1 = new Nullable_default({
    props: {
      str: `${XP_PER_CR[ctx[1].cr]?.toLocaleString() ?? DEFAULT_UNDEFINED} XP`
    }
  });
  return {
    c() {
      div8 = element("div");
      div2 = element("div");
      div0 = element("div");
      t0 = space();
      input = element("input");
      t1 = space();
      div1 = element("div");
      t2 = space();
      div3 = element("div");
      strong = element("strong");
      t3 = text(t3_value);
      t4 = space();
      if (if_block0)
        if_block0.c();
      t5 = space();
      if (if_block1)
        if_block1.c();
      t6 = space();
      div4 = element("div");
      span0 = element("span");
      create_component(nullable0.$$.fragment);
      t7 = space();
      div5 = element("div");
      span1 = element("span");
      create_component(nullable1.$$.fragment);
      t8 = space();
      div7 = element("div");
      div6 = element("div");
      attr(input, "type", "number");
      attr(input, "min", "1");
      attr(input, "class", "svelte-1b96kim");
      attr(div2, "class", "encounter-creature-controls svelte-1b96kim");
      attr(strong, "class", "encounter-creature-name");
      attr(div3, "class", "encounter-creature svelte-1b96kim");
      attr(div4, "class", "encounter-creature-context svelte-1b96kim");
      attr(div5, "class", "encounter-creature-context svelte-1b96kim");
      attr(div7, "class", "encounter-creature-controls svelte-1b96kim");
      attr(div8, "class", "encounter-creature-container svelte-1b96kim");
    },
    m(target, anchor) {
      insert(target, div8, anchor);
      append(div8, div2);
      append(div2, div0);
      append(div2, t0);
      append(div2, input);
      set_input_value(input, ctx[0]);
      append(div2, t1);
      append(div2, div1);
      append(div8, t2);
      append(div8, div3);
      append(div3, strong);
      append(strong, t3);
      append(div3, t4);
      if (if_block0)
        if_block0.m(div3, null);
      append(div3, t5);
      if (if_block1)
        if_block1.m(div3, null);
      append(div8, t6);
      append(div8, div4);
      append(div4, span0);
      mount_component(nullable0, span0, null);
      append(div8, t7);
      append(div8, div5);
      append(div5, span1);
      mount_component(nullable1, span1, null);
      append(div8, t8);
      append(div8, div7);
      append(div7, div6);
      current = true;
      if (!mounted) {
        dispose = [
          action_destroyer(remove_action = ctx[3].call(null, div0)),
          listen(div0, "click", ctx[11]),
          listen(input, "input", ctx[12]),
          listen(input, "change", ctx[13]),
          action_destroyer(add_action = ctx[4].call(null, div1)),
          listen(div1, "click", ctx[14]),
          action_destroyer(del_action = ctx[5].call(null, div6)),
          listen(div6, "click", ctx[15])
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & 1 && to_number(input.value) !== ctx2[0]) {
        set_input_value(input, ctx2[0]);
      }
      if ((!current || dirty & 2) && t3_value !== (t3_value = ctx2[1].name + ""))
        set_data(t3, t3_value);
      if (ctx2[7])
        if_block0.p(ctx2, dirty);
      if (ctx2[9])
        if_block1.p(ctx2, dirty);
      const nullable0_changes = {};
      if (dirty & 2)
        nullable0_changes.str = `${ctx2[6](ctx2[1].cr)} CR`;
      nullable0.$set(nullable0_changes);
      const nullable1_changes = {};
      if (dirty & 2)
        nullable1_changes.str = `${XP_PER_CR[ctx2[1].cr]?.toLocaleString() ?? DEFAULT_UNDEFINED} XP`;
      nullable1.$set(nullable1_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(nullable0.$$.fragment, local);
      transition_in(nullable1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(nullable0.$$.fragment, local);
      transition_out(nullable1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div8);
      if (if_block0)
        if_block0.d();
      if (if_block1)
        if_block1.d();
      destroy_component(nullable0);
      destroy_component(nullable1);
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance34($$self, $$props, $$invalidate) {
  let $average;
  const { players: players2 } = encounter;
  const { average } = players2;
  component_subscribe($$self, average, (value) => $$invalidate(16, $average = value));
  const remove = (node) => {
    new import_obsidian34.ExtraButtonComponent(node).setIcon("minus-circle");
  };
  const add = (node) => {
    new import_obsidian34.ExtraButtonComponent(node).setIcon("plus-with-circle");
  };
  const del = (node) => {
    new import_obsidian34.ExtraButtonComponent(node).setIcon("trash-2");
  };
  let { count } = $$props;
  let { creature } = $$props;
  const convertedCR = (cr2) => {
    if (cr2 == void 0)
      return DEFAULT_UNDEFINED;
    if (cr2 == "1/8") {
      return "\u215B";
    }
    if (cr2 == "1/4") {
      return "\xBC";
    }
    if (cr2 == "1/2") {
      return "\xBD";
    }
    return cr2;
  };
  const insignificant = convertFraction(creature.cr) < $average - 3;
  const baby = (node) => (0, import_obsidian34.setIcon)(node, "baby");
  const challenge = convertFraction(creature.cr) > $average + 3;
  const skull = (node) => (0, import_obsidian34.setIcon)(node, "skull");
  const click_handler3 = () => encounter.remove(creature);
  function input_input_handler() {
    count = to_number(this.value);
    $$invalidate(0, count);
  }
  const change_handler = (evt) => encounter.set(creature, Number(evt.currentTarget.value));
  const click_handler_12 = () => encounter.add(creature);
  const click_handler_2 = () => encounter.delete(creature);
  $$self.$$set = ($$props2) => {
    if ("count" in $$props2)
      $$invalidate(0, count = $$props2.count);
    if ("creature" in $$props2)
      $$invalidate(1, creature = $$props2.creature);
  };
  return [
    count,
    creature,
    average,
    remove,
    add,
    del,
    convertedCR,
    insignificant,
    baby,
    challenge,
    skull,
    click_handler3,
    input_input_handler,
    change_handler,
    click_handler_12,
    click_handler_2
  ];
}
var Creature5 = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance34, create_fragment34, safe_not_equal, { count: 0, creature: 1 }, add_css28);
  }
};
var Creature_default3 = Creature5;

// src/builder/view/encounter/Encounter.svelte
function add_css29(target) {
  append_styles(target, "svelte-nxatab", ".encounter-header.svelte-nxatab{display:flex;align-items:center;justify-content:space-between}.encounter-creatures.svelte-nxatab{display:flex;gap:0.5rem;flex-flow:column nowrap}.encounter-header.svelte-nxatab .is-disabled{cursor:not-allowed}.encounter-controls.svelte-nxatab{display:flex;gap:0.5rem;align-items:center}");
}
function get_each_context14(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[14] = list[i][0];
  child_ctx[15] = list[i][1];
  return child_ctx;
}
function create_else_block12(ctx) {
  let div;
  let current;
  let each_value = ctx[0];
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block14(get_each_context14(ctx, each_value, i));
  }
  const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
    each_blocks[i] = null;
  });
  return {
    c() {
      div = element("div");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      attr(div, "class", "encounter-creatures svelte-nxatab");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(div, null);
      }
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty & 1) {
        each_value = ctx2[0];
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context14(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
            transition_in(each_blocks[i], 1);
          } else {
            each_blocks[i] = create_each_block14(child_ctx);
            each_blocks[i].c();
            transition_in(each_blocks[i], 1);
            each_blocks[i].m(div, null);
          }
        }
        group_outros();
        for (i = each_value.length; i < each_blocks.length; i += 1) {
          out(i);
        }
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i = 0; i < each_value.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_if_block22(ctx) {
  let span;
  return {
    c() {
      span = element("span");
      span.textContent = "Add some creatures to get started!";
    },
    m(target, anchor) {
      insert(target, span, anchor);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(span);
    }
  };
}
function create_each_block14(ctx) {
  let creature;
  let current;
  creature = new Creature_default3({
    props: {
      creature: ctx[14],
      count: ctx[15]
    }
  });
  return {
    c() {
      create_component(creature.$$.fragment);
    },
    m(target, anchor) {
      mount_component(creature, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const creature_changes = {};
      if (dirty & 1)
        creature_changes.creature = ctx2[14];
      if (dirty & 1)
        creature_changes.count = ctx2[15];
      creature.$set(creature_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(creature.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(creature.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(creature, detaching);
    }
  };
}
function create_fragment35(ctx) {
  let div4;
  let h5;
  let t1;
  let div3;
  let div0;
  let start_action;
  let t2;
  let div1;
  let save_action;
  let t3;
  let div2;
  let clear_action;
  let t4;
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  let mounted;
  let dispose;
  const if_block_creators = [create_if_block22, create_else_block12];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (!ctx2[0].length)
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx, -1);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      div4 = element("div");
      h5 = element("h5");
      h5.textContent = "Encounter";
      t1 = space();
      div3 = element("div");
      div0 = element("div");
      t2 = space();
      div1 = element("div");
      t3 = space();
      div2 = element("div");
      t4 = space();
      if_block.c();
      if_block_anchor = empty();
      attr(h5, "class", "built-encounter");
      attr(div3, "class", "encounter-controls svelte-nxatab");
      attr(div4, "class", "encounter-header svelte-nxatab");
    },
    m(target, anchor) {
      insert(target, div4, anchor);
      append(div4, h5);
      append(div4, t1);
      append(div4, div3);
      append(div3, div0);
      append(div3, t2);
      append(div3, div1);
      append(div3, t3);
      append(div3, div2);
      insert(target, t4, anchor);
      if_blocks[current_block_type_index].m(target, anchor);
      insert(target, if_block_anchor, anchor);
      current = true;
      if (!mounted) {
        dispose = [
          action_destroyer(start_action = ctx[2].call(null, div0)),
          action_destroyer(save_action = ctx[3].call(null, div1)),
          action_destroyer(clear_action = ctx[4].call(null, div2)),
          listen(div2, "click", ctx[9])
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2, dirty);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div4);
      if (detaching)
        detach(t4);
      if_blocks[current_block_type_index].d(detaching);
      if (detaching)
        detach(if_block_anchor);
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance35($$self, $$props, $$invalidate) {
  let items;
  let $encounter;
  let $players;
  component_subscribe($$self, encounter, ($$value) => $$invalidate(8, $encounter = $$value));
  const { players: players2 } = encounter;
  component_subscribe($$self, players2, (value) => $$invalidate(11, $players = value));
  const plugin = getContext("plugin");
  let startIcon;
  const start2 = (node) => {
    $$invalidate(5, startIcon = new import_obsidian35.ExtraButtonComponent(node).setIcon(START_ENCOUNTER).onClick(() => {
      plugin.view.newEncounter({
        creatures: [...$encounter.entries()].map((c) => [...Array(c[1]).keys()].map(() => Creature.from(c[0]))).flat(),
        players: [...$players].map((p) => p.name)
      });
      app.workspace.revealLeaf(plugin.view.leaf);
    }));
  };
  let saveIcon;
  const save = (node) => {
    $$invalidate(6, saveIcon = new import_obsidian35.ExtraButtonComponent(node).setIcon("save").onClick(() => {
      const modal = new import_obsidian35.Modal(app);
      modal.contentEl.createEl("h4", { text: "Save Encounter" });
      let name2 = `Encounter ${Object.keys(plugin.data.encounters).length}`;
      new import_obsidian35.Setting(modal.contentEl).setName("Encounter Name").addText((t) => {
        t.setPlaceholder(name2).onChange((v) => name2 = v);
      });
      new import_obsidian35.Setting(modal.contentEl).addButton((b) => b.setButtonText("Save").onClick(() => {
        if (name2 in plugin.data.encounters) {
          new import_obsidian35.Notice("An encounter by that name already exists.");
          return;
        }
        const creatures = [
          ...[...$players].map((p) => Creature.from(p)),
          ...[...$encounter.entries()].map((c) => [...Array(c[1]).keys()].map(() => Creature.from(c[0]))).flat()
        ];
        plugin.data.encounters[name2] = {
          creatures: [...creatures.map((c) => c.toJSON())],
          state: false,
          name: name2,
          round: 1,
          logFile: null
        };
        modal.close();
      }));
      modal.open();
    }));
  };
  let exportIcon;
  const exp = (node) => {
    $$invalidate(7, exportIcon = new import_obsidian35.ExtraButtonComponent(node).setIcon("code"));
  };
  const load = (node) => {
    new import_obsidian35.ExtraButtonComponent(node).setIcon("import").setTooltip("Load Encounter").onClick(() => {
    });
  };
  const clear = (node) => {
    new import_obsidian35.ExtraButtonComponent(node).setIcon("eraser").setTooltip("Clear Encounter");
  };
  const click_handler3 = () => encounter.empty();
  $$self.$$.update = () => {
    if ($$self.$$.dirty & 256) {
      $:
        $$invalidate(0, items = [...$encounter.entries()]);
    }
    if ($$self.$$.dirty & 33) {
      $: {
        if (startIcon) {
          if (!items.length) {
            startIcon.setDisabled(true);
            startIcon.setTooltip("");
          } else {
            startIcon.setDisabled(false);
            startIcon.setTooltip("Start Encounter");
          }
        }
      }
    }
    if ($$self.$$.dirty & 65) {
      $: {
        if (saveIcon) {
          if (!items.length) {
            saveIcon.setDisabled(true);
            saveIcon.setTooltip("");
          } else {
            saveIcon.setDisabled(false);
            saveIcon.setTooltip("Save Encounter");
          }
        }
      }
    }
    if ($$self.$$.dirty & 129) {
      $: {
        if (exportIcon) {
          if (!items.length) {
            exportIcon.setDisabled(true);
            exportIcon.setTooltip("");
          } else {
            exportIcon.setDisabled(false);
            exportIcon.setTooltip("Export Encounter to Note");
          }
        }
      }
    }
  };
  return [
    items,
    players2,
    start2,
    save,
    clear,
    startIcon,
    saveIcon,
    exportIcon,
    $encounter,
    click_handler3
  ];
}
var Encounter2 = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance35, create_fragment35, safe_not_equal, {}, add_css29);
  }
};
var Encounter_default2 = Encounter2;

// src/builder/view/party/Party.svelte
var import_obsidian36 = require("obsidian");

// src/builder/view/party/Experience.svelte
function add_css30(target) {
  append_styles(target, "svelte-1rh99dg", ".xp-container.svelte-1rh99dg{margin-left:auto}.xp.svelte-1rh99dg{display:flex;gap:1rem}.thresholds.svelte-1rh99dg{display:flex;flex-flow:column;gap:0.5rem}.experience-amount.svelte-1rh99dg{margin-left:auto}.encounter-difficulty.svelte-1rh99dg{display:flex;flex-flow:column nowrap;gap:0.5rem;margin-bottom:1rem}.container.svelte-1rh99dg{display:flex;flex-flow:column nowrap}.header.svelte-1rh99dg{text-transform:uppercase;font-weight:bolder}");
}
function get_each_context15(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[11] = list[i];
  return child_ctx;
}
function create_each_block15(ctx) {
  let div;
  let strong;
  let t0_value = ctx[11] + "";
  let t0;
  let t1;
  let span;
  let t2_value = ctx[2][ctx[11]].toLocaleString() + "";
  let t2;
  let t3;
  let t4;
  let div_class_value;
  return {
    c() {
      div = element("div");
      strong = element("strong");
      t0 = text(t0_value);
      t1 = space();
      span = element("span");
      t2 = text(t2_value);
      t3 = text(" XP");
      t4 = space();
      attr(strong, "class", "experience-name header svelte-1rh99dg");
      attr(span, "class", "experience-amount svelte-1rh99dg");
      attr(div, "class", div_class_value = "experience-threshold " + ctx[11].toLowerCase() + " container svelte-1rh99dg");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, strong);
      append(strong, t0);
      append(div, t1);
      append(div, span);
      append(span, t2);
      append(span, t3);
      append(div, t4);
    },
    p(ctx2, dirty) {
      if (dirty & 4 && t2_value !== (t2_value = ctx2[2][ctx2[11]].toLocaleString() + ""))
        set_data(t2, t2_value);
    },
    d(detaching) {
      if (detaching)
        detach(div);
    }
  };
}
function create_fragment36(ctx) {
  let div7;
  let h50;
  let t1;
  let div5;
  let div3;
  let div0;
  let strong0;
  let t3;
  let span0;
  let t4;
  let t5;
  let div1;
  let strong1;
  let t7;
  let span1;
  let t8_value = (ctx[1] ? ctx[1].toLocaleString() : DEFAULT_UNDEFINED) + "";
  let t8;
  let t9;
  let div2;
  let strong2;
  let t11;
  let span2;
  let t12_value = (ctx[0] ? ctx[0].toLocaleString() : DEFAULT_UNDEFINED) + "";
  let t12;
  let t13;
  let div4;
  let t14;
  let br;
  let t15;
  let div6;
  let h51;
  let t17;
  let span3;
  let t18_value = ctx[2].Daily.toLocaleString() + "";
  let t18;
  let t19;
  let each_value = EXPERIENCE_THRESHOLDS;
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block15(get_each_context15(ctx, each_value, i));
  }
  return {
    c() {
      div7 = element("div");
      h50 = element("h5");
      h50.textContent = "Experience";
      t1 = space();
      div5 = element("div");
      div3 = element("div");
      div0 = element("div");
      strong0 = element("strong");
      strong0.textContent = "Difficulty";
      t3 = space();
      span0 = element("span");
      t4 = text(ctx[3]);
      t5 = space();
      div1 = element("div");
      strong1 = element("strong");
      strong1.textContent = "XP";
      t7 = space();
      span1 = element("span");
      t8 = text(t8_value);
      t9 = space();
      div2 = element("div");
      strong2 = element("strong");
      strong2.textContent = "Adjusted";
      t11 = space();
      span2 = element("span");
      t12 = text(t12_value);
      t13 = space();
      div4 = element("div");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      t14 = space();
      br = element("br");
      t15 = space();
      div6 = element("div");
      h51 = element("h5");
      h51.textContent = "Daily budget";
      t17 = space();
      span3 = element("span");
      t18 = text(t18_value);
      t19 = text(" XP");
      attr(strong0, "class", "header svelte-1rh99dg");
      attr(div0, "class", "difficulty container svelte-1rh99dg");
      attr(strong1, "class", "header svelte-1rh99dg");
      attr(div1, "class", "total container svelte-1rh99dg");
      attr(strong2, "class", "header svelte-1rh99dg");
      attr(div2, "class", "adjusted container svelte-1rh99dg");
      attr(div3, "class", "encounter-difficulty svelte-1rh99dg");
      attr(div4, "class", "thresholds svelte-1rh99dg");
      attr(div5, "class", "xp svelte-1rh99dg");
      attr(h51, "class", "experience-name");
      attr(span3, "class", "experience-amount svelte-1rh99dg");
      attr(div6, "class", "budget");
      attr(div7, "class", "xp-container svelte-1rh99dg");
    },
    m(target, anchor) {
      insert(target, div7, anchor);
      append(div7, h50);
      append(div7, t1);
      append(div7, div5);
      append(div5, div3);
      append(div3, div0);
      append(div0, strong0);
      append(div0, t3);
      append(div0, span0);
      append(span0, t4);
      append(div3, t5);
      append(div3, div1);
      append(div1, strong1);
      append(div1, t7);
      append(div1, span1);
      append(span1, t8);
      append(div3, t9);
      append(div3, div2);
      append(div2, strong2);
      append(div2, t11);
      append(div2, span2);
      append(span2, t12);
      append(div5, t13);
      append(div5, div4);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(div4, null);
      }
      append(div5, t14);
      append(div5, br);
      append(div7, t15);
      append(div7, div6);
      append(div6, h51);
      append(div6, t17);
      append(div6, span3);
      append(span3, t18);
      append(span3, t19);
    },
    p(ctx2, [dirty]) {
      if (dirty & 8)
        set_data(t4, ctx2[3]);
      if (dirty & 2 && t8_value !== (t8_value = (ctx2[1] ? ctx2[1].toLocaleString() : DEFAULT_UNDEFINED) + ""))
        set_data(t8, t8_value);
      if (dirty & 1 && t12_value !== (t12_value = (ctx2[0] ? ctx2[0].toLocaleString() : DEFAULT_UNDEFINED) + ""))
        set_data(t12, t12_value);
      if (dirty & 4) {
        each_value = EXPERIENCE_THRESHOLDS;
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context15(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block15(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(div4, null);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value.length;
      }
      if (dirty & 4 && t18_value !== (t18_value = ctx2[2].Daily.toLocaleString() + ""))
        set_data(t18, t18_value);
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(div7);
      destroy_each(each_blocks, detaching);
    }
  };
}
function instance36($$self, $$props, $$invalidate) {
  let count;
  let index;
  let modifier2;
  let xp;
  let adjXP;
  let $thresholds;
  let $encounter;
  let $playerModifier;
  component_subscribe($$self, encounter, ($$value) => $$invalidate(9, $encounter = $$value));
  const { thresholds, modifier: playerModifier } = players;
  component_subscribe($$self, thresholds, (value) => $$invalidate(2, $thresholds = value));
  component_subscribe($$self, playerModifier, (value) => $$invalidate(10, $playerModifier = value));
  let difficulty;
  $$self.$$.update = () => {
    if ($$self.$$.dirty & 512) {
      $:
        $$invalidate(8, count = [...$encounter.values()].reduce(
          (a, b) => {
            return a + b;
          },
          0
        ));
    }
    if ($$self.$$.dirty & 1280) {
      $:
        $$invalidate(7, index = MODIFIER_THRESHOLDS.lastIndexOf(MODIFIER_THRESHOLDS.filter((t) => t <= count).pop()) + $playerModifier);
    }
    if ($$self.$$.dirty & 128) {
      $:
        $$invalidate(6, modifier2 = MODIFIERS_BY_COUNT[index]);
    }
    if ($$self.$$.dirty & 512) {
      $:
        $$invalidate(1, xp = [...$encounter.entries()].reduce(
          (acc, cur) => {
            const [monster, count2] = cur;
            if (monster.cr && monster.cr in XP_PER_CR) {
              acc += XP_PER_CR[monster.cr] * count2;
            }
            return acc;
          },
          0
        ));
    }
    if ($$self.$$.dirty & 66) {
      $:
        $$invalidate(0, adjXP = xp * modifier2);
    }
    if ($$self.$$.dirty & 5) {
      $: {
        if (!adjXP)
          $$invalidate(3, difficulty = DEFAULT_UNDEFINED);
        else {
          $$invalidate(3, difficulty = "Trivial");
          if (adjXP > $thresholds.Easy) {
            $$invalidate(3, difficulty = "Easy");
          }
          if (adjXP > $thresholds.Medium) {
            $$invalidate(3, difficulty = "Medium");
          }
          if (adjXP > $thresholds.Hard) {
            $$invalidate(3, difficulty = "Hard");
          }
          if (adjXP > $thresholds.Deadly) {
            $$invalidate(3, difficulty = "Deadly");
          }
        }
      }
    }
  };
  return [
    adjXP,
    xp,
    $thresholds,
    difficulty,
    thresholds,
    playerModifier,
    modifier2,
    index,
    count,
    $encounter,
    $playerModifier
  ];
}
var Experience = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance36, create_fragment36, safe_not_equal, {}, add_css30);
  }
};
var Experience_default = Experience;

// src/builder/view/party/Party.svelte
function add_css31(target) {
  append_styles(target, "svelte-ze4k4s", ".players-xp.svelte-ze4k4s.svelte-ze4k4s{display:grid;grid-template-columns:1fr 1fr}.players.svelte-ze4k4s.svelte-ze4k4s{display:flex;flex-flow:column;gap:0.25rem}.player.svelte-ze4k4s.svelte-ze4k4s{display:flex;justify-content:space-between;align-items:center}input.svelte-ze4k4s.svelte-ze4k4s{text-align:center;width:40px}.disabled.svelte-ze4k4s>.player-name.svelte-ze4k4s{text-decoration:line-through}.disabled.svelte-ze4k4s.svelte-ze4k4s{color:var(--text-faint)}.player-right.svelte-ze4k4s.svelte-ze4k4s{display:flex;align-items:center;gap:0.25rem}.add-player.svelte-ze4k4s.svelte-ze4k4s{display:flex;align-items:center;justify-content:flex-end}");
}
function get_each_context16(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[19] = list[i];
  child_ctx[21] = i;
  return child_ctx;
}
function get_each_context_15(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[19] = list[i];
  return child_ctx;
}
function create_if_block_29(ctx) {
  let div;
  let partyDropdown_action;
  let mounted;
  let dispose;
  return {
    c() {
      div = element("div");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (!mounted) {
        dispose = action_destroyer(partyDropdown_action = ctx[5].call(null, div));
        mounted = true;
      }
    },
    d(detaching) {
      if (detaching)
        detach(div);
      mounted = false;
      dispose();
    }
  };
}
function create_else_block_14(ctx) {
  let div;
  let enable_action;
  let mounted;
  let dispose;
  return {
    c() {
      div = element("div");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (!mounted) {
        dispose = action_destroyer(enable_action = ctx[6].call(null, div));
        mounted = true;
      }
    },
    d(detaching) {
      if (detaching)
        detach(div);
      mounted = false;
      dispose();
    }
  };
}
function create_if_block_113(ctx) {
  let div;
  let disable_action;
  let mounted;
  let dispose;
  return {
    c() {
      div = element("div");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (!mounted) {
        dispose = action_destroyer(disable_action = ctx[7].call(null, div));
        mounted = true;
      }
    },
    d(detaching) {
      if (detaching)
        detach(div);
      mounted = false;
      dispose();
    }
  };
}
function create_each_block_15(key_1, ctx) {
  let div2;
  let span0;
  let t0_value = ctx[19].name + "";
  let t0;
  let t1;
  let div1;
  let span1;
  let t2_value = ctx[19].level + "";
  let t2;
  let t3;
  let div0;
  let div0_aria_label_value;
  let mounted;
  let dispose;
  function select_block_type(ctx2, dirty) {
    if (ctx2[19].enabled)
      return create_if_block_113;
    return create_else_block_14;
  }
  let current_block_type = select_block_type(ctx, -1);
  let if_block = current_block_type(ctx);
  function click_handler3() {
    return ctx[12](ctx[19]);
  }
  return {
    key: key_1,
    first: null,
    c() {
      div2 = element("div");
      span0 = element("span");
      t0 = text(t0_value);
      t1 = space();
      div1 = element("div");
      span1 = element("span");
      t2 = text(t2_value);
      t3 = space();
      div0 = element("div");
      if_block.c();
      attr(span0, "class", "player-name svelte-ze4k4s");
      attr(div0, "class", "clickable-icon setting-editor-extra-setting-button");
      attr(div0, "aria-label", div0_aria_label_value = ctx[19].enabled ? "Disable" : "Enable");
      attr(div1, "class", "player-right svelte-ze4k4s");
      attr(div2, "class", "player svelte-ze4k4s");
      toggle_class(div2, "disabled", !ctx[19].enabled);
      this.first = div2;
    },
    m(target, anchor) {
      insert(target, div2, anchor);
      append(div2, span0);
      append(span0, t0);
      append(div2, t1);
      append(div2, div1);
      append(div1, span1);
      append(span1, t2);
      append(div1, t3);
      append(div1, div0);
      if_block.m(div0, null);
      if (!mounted) {
        dispose = listen(div0, "click", click_handler3);
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (dirty & 1 && t0_value !== (t0_value = ctx[19].name + ""))
        set_data(t0, t0_value);
      if (dirty & 1 && t2_value !== (t2_value = ctx[19].level + ""))
        set_data(t2, t2_value);
      if (current_block_type !== (current_block_type = select_block_type(ctx, dirty))) {
        if_block.d(1);
        if_block = current_block_type(ctx);
        if (if_block) {
          if_block.c();
          if_block.m(div0, null);
        }
      }
      if (dirty & 1 && div0_aria_label_value !== (div0_aria_label_value = ctx[19].enabled ? "Disable" : "Enable")) {
        attr(div0, "aria-label", div0_aria_label_value);
      }
      if (dirty & 1) {
        toggle_class(div2, "disabled", !ctx[19].enabled);
      }
    },
    d(detaching) {
      if (detaching)
        detach(div2);
      if_block.d();
      mounted = false;
      dispose();
    }
  };
}
function create_else_block13(ctx) {
  let div;
  let enable_action;
  let mounted;
  let dispose;
  return {
    c() {
      div = element("div");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (!mounted) {
        dispose = action_destroyer(enable_action = ctx[6].call(null, div));
        mounted = true;
      }
    },
    d(detaching) {
      if (detaching)
        detach(div);
      mounted = false;
      dispose();
    }
  };
}
function create_if_block23(ctx) {
  let div;
  let disable_action;
  let mounted;
  let dispose;
  return {
    c() {
      div = element("div");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (!mounted) {
        dispose = action_destroyer(disable_action = ctx[7].call(null, div));
        mounted = true;
      }
    },
    d(detaching) {
      if (detaching)
        detach(div);
      mounted = false;
      dispose();
    }
  };
}
function create_each_block16(ctx) {
  let div5;
  let input0;
  let input0_value_value;
  let t0;
  let span0;
  let t2;
  let div0;
  let crossIcon_action;
  let t3;
  let span1;
  let t5;
  let input1;
  let input1_value_value;
  let t6;
  let div4;
  let div1;
  let div1_aria_label_value;
  let t7;
  let div3;
  let div2;
  let removeIcon_action;
  let mounted;
  let dispose;
  function input_handler(...args) {
    return ctx[13](ctx[19], ...args);
  }
  function input_handler_1(...args) {
    return ctx[14](ctx[19], ...args);
  }
  function select_block_type_1(ctx2, dirty) {
    if (ctx2[19].enabled)
      return create_if_block23;
    return create_else_block13;
  }
  let current_block_type = select_block_type_1(ctx, -1);
  let if_block = current_block_type(ctx);
  function click_handler_12() {
    return ctx[15](ctx[19]);
  }
  function click_handler_2() {
    return ctx[16](ctx[19]);
  }
  return {
    c() {
      div5 = element("div");
      input0 = element("input");
      t0 = space();
      span0 = element("span");
      span0.textContent = "Player(s)";
      t2 = space();
      div0 = element("div");
      t3 = space();
      span1 = element("span");
      span1.textContent = "Level";
      t5 = space();
      input1 = element("input");
      t6 = space();
      div4 = element("div");
      div1 = element("div");
      if_block.c();
      t7 = space();
      div3 = element("div");
      div2 = element("div");
      attr(input0, "type", "number");
      input0.value = input0_value_value = ctx[19].count;
      attr(input0, "min", "1");
      attr(input0, "class", "svelte-ze4k4s");
      attr(input1, "type", "number");
      input1.value = input1_value_value = ctx[19].level;
      attr(input1, "min", "1");
      attr(input1, "class", "svelte-ze4k4s");
      attr(div1, "class", "clickable-icon setting-editor-extra-setting-button");
      attr(div1, "aria-label", div1_aria_label_value = ctx[19].enabled ? "Disable" : "Enable");
      attr(div3, "class", "clickable-icon setting-editor-extra-setting-button");
      attr(div4, "class", "player-right svelte-ze4k4s");
      attr(div5, "class", "player svelte-ze4k4s");
      toggle_class(div5, "disabled", !ctx[19].enabled);
    },
    m(target, anchor) {
      insert(target, div5, anchor);
      append(div5, input0);
      append(div5, t0);
      append(div5, span0);
      append(div5, t2);
      append(div5, div0);
      append(div5, t3);
      append(div5, span1);
      append(div5, t5);
      append(div5, input1);
      append(div5, t6);
      append(div5, div4);
      append(div4, div1);
      if_block.m(div1, null);
      append(div4, t7);
      append(div4, div3);
      append(div3, div2);
      if (!mounted) {
        dispose = [
          listen(input0, "input", input_handler),
          action_destroyer(crossIcon_action = ctx[10].call(null, div0)),
          listen(input1, "input", input_handler_1),
          listen(div1, "click", click_handler_12),
          action_destroyer(removeIcon_action = ctx[11].call(null, div2)),
          listen(div3, "click", click_handler_2)
        ];
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (dirty & 2 && input0_value_value !== (input0_value_value = ctx[19].count) && input0.value !== input0_value_value) {
        input0.value = input0_value_value;
      }
      if (dirty & 2 && input1_value_value !== (input1_value_value = ctx[19].level) && input1.value !== input1_value_value) {
        input1.value = input1_value_value;
      }
      if (current_block_type !== (current_block_type = select_block_type_1(ctx, dirty))) {
        if_block.d(1);
        if_block = current_block_type(ctx);
        if (if_block) {
          if_block.c();
          if_block.m(div1, null);
        }
      }
      if (dirty & 2 && div1_aria_label_value !== (div1_aria_label_value = ctx[19].enabled ? "Disable" : "Enable")) {
        attr(div1, "aria-label", div1_aria_label_value);
      }
      if (dirty & 2) {
        toggle_class(div5, "disabled", !ctx[19].enabled);
      }
    },
    d(detaching) {
      if (detaching)
        detach(div5);
      if_block.d();
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_fragment37(ctx) {
  let div6;
  let div5;
  let div4;
  let h5;
  let t1;
  let div0;
  let t2;
  let div3;
  let each_blocks_1 = [];
  let each0_lookup = /* @__PURE__ */ new Map();
  let t3;
  let t4;
  let div2;
  let div1;
  let addIcon_action;
  let t5;
  let experience;
  let current;
  let mounted;
  let dispose;
  let if_block = ctx[4].length && create_if_block_29(ctx);
  let each_value_1 = ctx[0];
  const get_key = (ctx2) => ctx2[19].name;
  for (let i = 0; i < each_value_1.length; i += 1) {
    let child_ctx = get_each_context_15(ctx, each_value_1, i);
    let key = get_key(child_ctx);
    each0_lookup.set(key, each_blocks_1[i] = create_each_block_15(key, child_ctx));
  }
  let each_value = ctx[1];
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block16(get_each_context16(ctx, each_value, i));
  }
  experience = new Experience_default({});
  return {
    c() {
      div6 = element("div");
      div5 = element("div");
      div4 = element("div");
      h5 = element("h5");
      h5.textContent = "Players";
      t1 = space();
      div0 = element("div");
      if (if_block)
        if_block.c();
      t2 = space();
      div3 = element("div");
      for (let i = 0; i < each_blocks_1.length; i += 1) {
        each_blocks_1[i].c();
      }
      t3 = space();
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      t4 = space();
      div2 = element("div");
      div1 = element("div");
      t5 = space();
      create_component(experience.$$.fragment);
      attr(h5, "class", "player-header");
      attr(div0, "class", "party");
      attr(div1, "class", "clickable-icon setting-editor-extra-setting-button");
      attr(div2, "class", "add-player svelte-ze4k4s");
      attr(div3, "class", "players svelte-ze4k4s");
      attr(div4, "class", "players-container");
      attr(div5, "class", "players-xp svelte-ze4k4s");
      attr(div6, "class", "player-component-container");
    },
    m(target, anchor) {
      insert(target, div6, anchor);
      append(div6, div5);
      append(div5, div4);
      append(div4, h5);
      append(div4, t1);
      append(div4, div0);
      if (if_block)
        if_block.m(div0, null);
      append(div4, t2);
      append(div4, div3);
      for (let i = 0; i < each_blocks_1.length; i += 1) {
        each_blocks_1[i].m(div3, null);
      }
      append(div3, t3);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(div3, null);
      }
      append(div3, t4);
      append(div3, div2);
      append(div2, div1);
      append(div5, t5);
      mount_component(experience, div5, null);
      current = true;
      if (!mounted) {
        dispose = [
          listen(div1, "click", ctx[9]),
          action_destroyer(addIcon_action = ctx[8].call(null, div1))
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & 1) {
        each_value_1 = ctx2[0];
        each_blocks_1 = update_keyed_each(each_blocks_1, dirty, get_key, 1, ctx2, each_value_1, each0_lookup, div3, destroy_block, create_each_block_15, t3, get_each_context_15);
      }
      if (dirty & 2) {
        each_value = ctx2[1];
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context16(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block16(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(div3, t4);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value.length;
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(experience.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(experience.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div6);
      if (if_block)
        if_block.d();
      for (let i = 0; i < each_blocks_1.length; i += 1) {
        each_blocks_1[i].d();
      }
      destroy_each(each_blocks, detaching);
      destroy_component(experience);
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance37($$self, $$props, $$invalidate) {
  let $party;
  let $generics;
  const { party, generics } = players;
  component_subscribe($$self, party, (value) => $$invalidate(0, $party = value));
  component_subscribe($$self, generics, (value) => $$invalidate(1, $generics = value));
  const plugin = getContext("plugin");
  const defaultParty = plugin.data.defaultParty;
  const parties = plugin.data.parties;
  plugin.getPlayersForParty(defaultParty).forEach((p) => {
    players.add({
      level: p.level,
      name: p.name,
      ...p.creature,
      isPlayer: true,
      enabled: true,
      count: 1
    });
  });
  const partyDropdown = (node) => {
    new import_obsidian36.Setting(node).setName("Select a party").addDropdown((dropdown) => {
      dropdown.addOption("none", "None").addOptions(Object.fromEntries(parties.map((p) => [p.name, p.name]))).onChange((name2) => {
        players.switchParty(plugin.getPlayersForParty(name2).map((p) => {
          return {
            level: p.level,
            name: p.name,
            ...p.creature,
            isPlayer: true,
            enabled: true,
            count: 1
          };
        }));
      });
      if (defaultParty) {
        dropdown.setValue(defaultParty);
      }
    });
  };
  const enable = (node) => {
    (0, import_obsidian36.setIcon)(node, ENABLE);
  };
  const disable = (node) => {
    (0, import_obsidian36.setIcon)(node, DISABLE);
  };
  const addIcon3 = (node) => {
    (0, import_obsidian36.setIcon)(node, "plus-with-circle");
  };
  const add = () => {
    players.add({
      isPlayer: false,
      level: 1,
      count: 1,
      enabled: true
    });
  };
  const crossIcon = (node) => {
    (0, import_obsidian36.setIcon)(node, "x");
  };
  const removeIcon = (node) => {
    (0, import_obsidian36.setIcon)(node, "x-square");
  };
  const click_handler3 = (player) => players.toggleEnabled(player);
  const input_handler = (player, evt) => players.set(player, Number(evt.currentTarget.value));
  const input_handler_1 = (player, evt) => players.setLevel(player, Number(evt.currentTarget.value));
  const click_handler_12 = (player) => players.toggleEnabled(player);
  const click_handler_2 = (player) => players.remove(player);
  return [
    $party,
    $generics,
    party,
    generics,
    parties,
    partyDropdown,
    enable,
    disable,
    addIcon3,
    add,
    crossIcon,
    removeIcon,
    click_handler3,
    input_handler,
    input_handler_1,
    click_handler_12,
    click_handler_2
  ];
}
var Party = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance37, create_fragment37, safe_not_equal, {}, add_css31);
  }
};
var Party_default = Party;

// src/builder/view/Builder.svelte
function add_css32(target) {
  append_styles(target, "svelte-95ft2e", ".encounter-builder.svelte-95ft2e{margin:1rem}");
}
function create_fragment38(ctx) {
  let div;
  let party;
  let t0;
  let encounter2;
  let t1;
  let creatures;
  let current;
  party = new Party_default({});
  encounter2 = new Encounter_default2({});
  creatures = new Creatures_default({});
  return {
    c() {
      div = element("div");
      create_component(party.$$.fragment);
      t0 = space();
      create_component(encounter2.$$.fragment);
      t1 = space();
      create_component(creatures.$$.fragment);
      attr(div, "class", "initiative-tracker encounter-builder markdown-rendered svelte-95ft2e");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      mount_component(party, div, null);
      append(div, t0);
      mount_component(encounter2, div, null);
      append(div, t1);
      mount_component(creatures, div, null);
      current = true;
    },
    p: noop,
    i(local) {
      if (current)
        return;
      transition_in(party.$$.fragment, local);
      transition_in(encounter2.$$.fragment, local);
      transition_in(creatures.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(party.$$.fragment, local);
      transition_out(encounter2.$$.fragment, local);
      transition_out(creatures.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      destroy_component(party);
      destroy_component(encounter2);
      destroy_component(creatures);
    }
  };
}
function instance38($$self, $$props, $$invalidate) {
  let { plugin } = $$props;
  setContext("plugin", plugin);
  onDestroy(() => {
    players.empty();
  });
  $$self.$$set = ($$props2) => {
    if ("plugin" in $$props2)
      $$invalidate(0, plugin = $$props2.plugin);
  };
  return [plugin];
}
var Builder = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance38, create_fragment38, safe_not_equal, { plugin: 0 }, add_css32);
  }
};
var Builder_default = Builder;

// src/builder/view.ts
var BuilderView = class extends import_obsidian37.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    this.plugin = plugin;
  }
  async onOpen() {
    this.ui = new Builder_default({
      target: this.contentEl,
      props: {
        plugin: this.plugin
      }
    });
  }
  async onClose() {
    this.ui.$destroy();
  }
  getDisplayText() {
    return "Encounter Builder";
  }
  getIcon() {
    return BUILDER_VIEW;
  }
  getViewType() {
    return BUILDER_VIEW;
  }
};

// src/tracker/player-view.ts
var import_obsidian39 = require("obsidian");

// src/tracker/player/PlayerView.svelte
var import_obsidian38 = require("obsidian");

// node_modules/svelte-loading-spinners/dist/index.mjs
var resolved_promise2 = Promise.resolve();

// src/tracker/player/PlayerView.svelte
function add_css33(target) {
  append_styles(target, "svelte-1fhdxlq", ".full-center.svelte-1fhdxlq{width:100%;height:100%;display:flex;align-items:center;justify-content:center}.initiative-tracker-table.svelte-1fhdxlq{padding:0.5rem;align-items:center;gap:0.25rem 0.5rem;width:100%;margin-left:0rem;table-layout:fixed;border-collapse:separate;border-spacing:0 2px;font-size:larger}.left.svelte-1fhdxlq{text-align:left}.center.svelte-1fhdxlq{text-align:center}.healthy.svelte-1fhdxlq{color:var(--text-success)}.hurt.svelte-1fhdxlq{color:var(--text-warning)}.bloodied.svelte-1fhdxlq{color:var(--text-error)}.defeated.svelte-1fhdxlq{color:var(--text-faint)}.active.svelte-1fhdxlq{background-color:rgba(0, 0, 0, 0.1)}.theme-dark .active.svelte-1fhdxlq{background-color:rgba(255, 255, 255, 0.1)}");
}
function get_each_context17(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[11] = list[i];
  return child_ctx;
}
function create_else_block14(ctx) {
  let span;
  let t_value = ctx[6](ctx[11].hp, ctx[11].max) + "";
  let t;
  return {
    c() {
      span = element("span");
      t = text(t_value);
    },
    m(target, anchor) {
      insert(target, span, anchor);
      append(span, t);
    },
    p(ctx2, dirty) {
      if (dirty & 1 && t_value !== (t_value = ctx2[6](ctx2[11].hp, ctx2[11].max) + ""))
        set_data(t, t_value);
    },
    d(detaching) {
      if (detaching)
        detach(span);
    }
  };
}
function create_if_block24(ctx) {
  let div;
  let raw_value = ctx[11].hpDisplay + "";
  return {
    c() {
      div = element("div");
      attr(div, "class", "center svelte-1fhdxlq");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      div.innerHTML = raw_value;
    },
    p(ctx2, dirty) {
      if (dirty & 1 && raw_value !== (raw_value = ctx2[11].hpDisplay + ""))
        div.innerHTML = raw_value;
      ;
    },
    d(detaching) {
      if (detaching)
        detach(div);
    }
  };
}
function create_each_block17(key_1, ctx) {
  let tr;
  let td0;
  let t0_value = ctx[11].initiative + "";
  let t0;
  let t1;
  let td1;
  let t2_value = ctx[8](ctx[11]) + "";
  let t2;
  let t3;
  let td2;
  let td2_class_value;
  let t4;
  let td3;
  let t5_value = [...ctx[11].status].map(func).join(", ") + "";
  let t5;
  let t6;
  function select_block_type(ctx2, dirty) {
    if (ctx2[11].player)
      return create_if_block24;
    return create_else_block14;
  }
  let current_block_type = select_block_type(ctx, -1);
  let if_block = current_block_type(ctx);
  return {
    key: key_1,
    first: null,
    c() {
      tr = element("tr");
      td0 = element("td");
      t0 = text(t0_value);
      t1 = space();
      td1 = element("td");
      t2 = text(t2_value);
      t3 = space();
      td2 = element("td");
      if_block.c();
      t4 = space();
      td3 = element("td");
      t5 = text(t5_value);
      t6 = space();
      attr(td0, "class", "center svelte-1fhdxlq");
      attr(td2, "class", td2_class_value = null_to_empty(ctx[6](ctx[11].hp, ctx[11].max).toLowerCase()) + " svelte-1fhdxlq");
      toggle_class(td2, "center", true);
      attr(td3, "class", "center svelte-1fhdxlq");
      attr(tr, "class", "svelte-1fhdxlq");
      toggle_class(tr, "active", ctx[7](ctx[11]) && ctx[1]);
      this.first = tr;
    },
    m(target, anchor) {
      insert(target, tr, anchor);
      append(tr, td0);
      append(td0, t0);
      append(tr, t1);
      append(tr, td1);
      append(td1, t2);
      append(tr, t3);
      append(tr, td2);
      if_block.m(td2, null);
      append(tr, t4);
      append(tr, td3);
      append(td3, t5);
      append(tr, t6);
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (dirty & 1 && t0_value !== (t0_value = ctx[11].initiative + ""))
        set_data(t0, t0_value);
      if (dirty & 1 && t2_value !== (t2_value = ctx[8](ctx[11]) + ""))
        set_data(t2, t2_value);
      if (current_block_type === (current_block_type = select_block_type(ctx, dirty)) && if_block) {
        if_block.p(ctx, dirty);
      } else {
        if_block.d(1);
        if_block = current_block_type(ctx);
        if (if_block) {
          if_block.c();
          if_block.m(td2, null);
        }
      }
      if (dirty & 1 && td2_class_value !== (td2_class_value = null_to_empty(ctx[6](ctx[11].hp, ctx[11].max).toLowerCase()) + " svelte-1fhdxlq")) {
        attr(td2, "class", td2_class_value);
      }
      if (dirty & 1) {
        toggle_class(td2, "center", true);
      }
      if (dirty & 1 && t5_value !== (t5_value = [...ctx[11].status].map(func).join(", ") + ""))
        set_data(t5, t5_value);
      if (dirty & 131) {
        toggle_class(tr, "active", ctx[7](ctx[11]) && ctx[1]);
      }
    },
    d(detaching) {
      if (detaching)
        detach(tr);
      if_block.d();
    }
  };
}
function create_fragment39(ctx) {
  let table;
  let thead;
  let th0;
  let strong0;
  let iniIcon_action;
  let t0;
  let th1;
  let t2;
  let th2;
  let strong2;
  let hpIcon_action;
  let t3;
  let th3;
  let t5;
  let tbody;
  let each_blocks = [];
  let each_1_lookup = /* @__PURE__ */ new Map();
  let table_transition;
  let current;
  let mounted;
  let dispose;
  let each_value = ctx[0];
  const get_key = (ctx2) => ctx2[11].id;
  for (let i = 0; i < each_value.length; i += 1) {
    let child_ctx = get_each_context17(ctx, each_value, i);
    let key = get_key(child_ctx);
    each_1_lookup.set(key, each_blocks[i] = create_each_block17(key, child_ctx));
  }
  return {
    c() {
      table = element("table");
      thead = element("thead");
      th0 = element("th");
      strong0 = element("strong");
      t0 = space();
      th1 = element("th");
      th1.innerHTML = `<strong>Name</strong>`;
      t2 = space();
      th2 = element("th");
      strong2 = element("strong");
      t3 = space();
      th3 = element("th");
      th3.innerHTML = `<strong>Statuses</strong>`;
      t5 = space();
      tbody = element("tbody");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      set_style(th0, "width", "5%");
      attr(th1, "class", "left svelte-1fhdxlq");
      set_style(th1, "width", "30%");
      set_style(th2, "width", "15%");
      attr(th2, "class", "center svelte-1fhdxlq");
      attr(thead, "class", "tracker-table-header");
      attr(table, "class", "initiative-tracker-table svelte-1fhdxlq");
    },
    m(target, anchor) {
      insert(target, table, anchor);
      append(table, thead);
      append(thead, th0);
      append(th0, strong0);
      append(thead, t0);
      append(thead, th1);
      append(thead, t2);
      append(thead, th2);
      append(th2, strong2);
      append(thead, t3);
      append(thead, th3);
      append(table, t5);
      append(table, tbody);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(tbody, null);
      }
      current = true;
      if (!mounted) {
        dispose = [
          action_destroyer(iniIcon_action = ctx[5].call(null, strong0)),
          action_destroyer(hpIcon_action = ctx[4].call(null, strong2))
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & 451) {
        each_value = ctx2[0];
        each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx2, each_value, each_1_lookup, tbody, destroy_block, create_each_block17, null, get_each_context17);
      }
    },
    i(local) {
      if (current)
        return;
      add_render_callback(() => {
        if (!table_transition)
          table_transition = create_bidirectional_transition(table, fade, {}, true);
        table_transition.run(1);
      });
      current = true;
    },
    o(local) {
      if (!table_transition)
        table_transition = create_bidirectional_transition(table, fade, {}, false);
      table_transition.run(0);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(table);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].d();
      }
      if (detaching && table_transition)
        table_transition.end();
      mounted = false;
      run_all(dispose);
    }
  };
}
var func = (s) => s.name;
function instance39($$self, $$props, $$invalidate) {
  let activeAndVisible;
  let $ordered;
  let $state;
  const { state, ordered } = tracker;
  component_subscribe($$self, state, (value) => $$invalidate(1, $state = value));
  component_subscribe($$self, ordered, (value) => $$invalidate(9, $ordered = value));
  const dispatch2 = createEventDispatcher();
  const hpIcon = (node) => {
    (0, import_obsidian38.setIcon)(node, HP);
  };
  const iniIcon = (node) => {
    (0, import_obsidian38.setIcon)(node, INITIATIVE);
  };
  const getHpStatus = (hp, max2) => {
    if (!hp)
      return "";
    if (hp <= 0)
      return "Defeated";
    if (hp < max2 / 2)
      return "Bloodied";
    if (hp < max2)
      return "Hurt";
    return "Healthy";
  };
  const amIActive = (creature) => {
    if (creature.hidden)
      return false;
    if (creature.active)
      return true;
    const active2 = $ordered.findIndex((c) => c.active);
    const index = $ordered.indexOf(creature);
    if (active2 == -1 || active2 < index)
      return false;
    const remaining = $ordered.slice(index + 1, active2 + 1);
    if (remaining.every((c) => c.hidden))
      return true;
    return false;
  };
  const name2 = (creature) => creature.getName();
  $$self.$$.update = () => {
    if ($$self.$$.dirty & 512) {
      $:
        $$invalidate(0, activeAndVisible = $ordered.filter((c) => c.enabled && !c.hidden));
    }
  };
  return [
    activeAndVisible,
    $state,
    state,
    ordered,
    hpIcon,
    iniIcon,
    getHpStatus,
    amIActive,
    name2,
    $ordered
  ];
}
var PlayerView = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance39, create_fragment39, safe_not_equal, {}, add_css33);
  }
};
var PlayerView_default = PlayerView;

// src/tracker/player-view.ts
var PlayerView2 = class extends import_obsidian39.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    this.leaf = leaf;
    this.plugin = plugin;
  }
  getDisplayText() {
    return "Player View";
  }
  getViewType() {
    return PLAYER_VIEW_VIEW;
  }
  getIcon() {
    return "lucide-view";
  }
  async onOpen() {
    this._app = new PlayerView_default({
      target: this.contentEl,
      props: {}
    });
  }
};

// src/main.ts
var InitiativeTracker = class extends import_obsidian40.Plugin {
  constructor() {
    super(...arguments);
    this.playerCreatures = /* @__PURE__ */ new Map();
    this.homebrewCreatures = /* @__PURE__ */ new Map();
    this.watchers = /* @__PURE__ */ new Map();
  }
  getRoller(str) {
    if (!this.canUseDiceRoller)
      return;
    const roller = this.app.plugins.getPlugin("obsidian-dice-roller").getRollerSync(str, "statblock", true);
    return roller;
  }
  get canUseDiceRoller() {
    if (this.app.plugins.getPlugin("obsidian-dice-roller") != null) {
      if (!this.app.plugins.getPlugin("obsidian-dice-roller").getRollerSync) {
        new import_obsidian40.Notice(
          "Please update Dice Roller to the latest version to use with Initiative Tracker."
        );
      } else {
        return true;
      }
    }
    return false;
  }
  getInitiativeValue(modifier2 = 0) {
    let initiative = Math.floor(Math.random() * 19 + 1) + modifier2;
    if (this.canUseDiceRoller) {
      const roller = this.getRoller(
        this.data.initiative.replace(/%mod%/g, `(${modifier2})`)
      );
      if (roller) {
        roller.roll();
        if (!isNaN(roller.result))
          initiative = roller.result;
      }
    }
    return initiative;
  }
  getPlayerByName(name2) {
    return Creature.from(this.playerCreatures.get(name2));
  }
  getPlayersForParty(party) {
    return this.data.parties?.find((p) => p.name == party)?.players.map((p) => this.getPlayerByName(p))?.filter((p) => p) ?? [];
  }
  get canUseStatBlocks() {
    return this.app.plugins.getPlugin("obsidian-5e-statblocks") != null;
  }
  get statblocks() {
    return this.app.plugins.getPlugin("obsidian-5e-statblocks");
  }
  get statblockVersion() {
    return this.statblocks?.settings?.version ?? { major: 0 };
  }
  get canUseLeaflet() {
    return this.app.plugins.getPlugin("obsidian-leaflet-plugin") != null && Number(
      this.app.plugins.getPlugin("obsidian-leaflet-plugin").data?.version?.major >= 4
    );
  }
  get leaflet() {
    if (this.canUseLeaflet) {
      return this.app.plugins.getPlugin("obsidian-leaflet-plugin");
    }
  }
  get statblock_creatures() {
    if (!this.data.sync)
      return [];
    if (!this.app.plugins.getPlugin("obsidian-5e-statblocks"))
      return [];
    return [
      ...Array.from(
        this.app.plugins.getPlugin("obsidian-5e-statblocks").data?.values() ?? []
      )
    ];
  }
  get homebrew() {
    return [...this.statblock_creatures, ...this.data.homebrew];
  }
  get bestiary() {
    return [...BESTIARY, ...this.homebrew];
  }
  get view() {
    const leaves = this.app.workspace.getLeavesOfType(
      INTIATIVE_TRACKER_VIEW
    );
    const leaf = leaves?.length ? leaves[0] : null;
    if (leaf && leaf.view && leaf.view instanceof TrackerView)
      return leaf.view;
  }
  get combatant() {
    const leaves = this.app.workspace.getLeavesOfType(
      CREATURE_TRACKER_VIEW
    );
    const leaf = leaves?.length ? leaves[0] : null;
    if (leaf && leaf.view && leaf.view instanceof CreatureView)
      return leaf.view;
  }
  get defaultParty() {
    return this.data.parties.find((p) => p.name == this.data.defaultParty);
  }
  async onload() {
    registerIcons();
    await this.loadSettings();
    this.addSettingTab(new InitiativeTrackerSettings(this));
    this.registerView(
      INTIATIVE_TRACKER_VIEW,
      (leaf) => new TrackerView(leaf, this)
    );
    this.registerView(
      PLAYER_VIEW_VIEW,
      (leaf) => new PlayerView2(leaf, this)
    );
    this.registerView(
      CREATURE_TRACKER_VIEW,
      (leaf) => new CreatureView(leaf, this)
    );
    this.registerView(
      BUILDER_VIEW,
      (leaf) => new BuilderView(leaf, this)
    );
    this.addCommands();
    this.addEvents();
    this.registerMarkdownCodeBlockProcessor("encounter", (src, el, ctx) => {
      const handler = new EncounterBlock(this, src, el);
      ctx.addChild(handler);
    });
    this.registerMarkdownCodeBlockProcessor(
      "encounter-table",
      (src, el, ctx) => {
        const handler = new EncounterBlock(this, src, el, true);
        ctx.addChild(handler);
      }
    );
    this.registerMarkdownPostProcessor(async (el, ctx) => {
      if (!el || !el.firstElementChild)
        return;
      const codeEls = el.querySelectorAll("code");
      if (!codeEls || !codeEls.length)
        return;
      const codes = Array.from(codeEls).filter(
        (code) => /^encounter:\s/.test(code.innerText)
      );
      if (!codes.length)
        return;
      for (const code of codes) {
        const creatures = code.innerText.replace(`encounter:`, "").trim().split(",").map((s) => (0, import_obsidian40.parseYaml)(s.trim()));
        const parser = new EncounterParser(this);
        const parsed = await parser.parse({ creatures });
        if (!parsed || !parsed.creatures || !parsed.creatures.size)
          continue;
        const target = createSpan("initiative-tracker-encounter-line");
        new EncounterLine_default({
          target,
          props: {
            ...parsed,
            plugin: this
          }
        });
        code.replaceWith(target);
      }
    });
    this.playerCreatures = new Map(
      this.data.players.map((p) => [p.name, Creature.from(p)])
    );
    this.homebrewCreatures = new Map(
      this.bestiary.map((p) => [p.name, Creature.from(p)])
    );
    this.app.workspace.onLayoutReady(async () => {
      this.addTrackerView();
      for (const player of this.data.players) {
        if (player.path)
          continue;
        if (!player.note)
          continue;
        const file = await this.app.metadataCache.getFirstLinkpathDest(
          player.note,
          ""
        );
        if (!file || !this.app.metadataCache.getFileCache(file)?.frontmatter) {
          new import_obsidian40.Notice(
            `Initiative Tracker: There was an issue with the linked note for ${player.name}.

Please re-link it in settings.`
          );
          continue;
        }
      }
      this.registerEvent(
        this.app.metadataCache.on("changed", (file) => {
          if (!(file instanceof import_obsidian40.TFile))
            return;
          const players2 = this.data.players.filter(
            (p) => p.path == file.path
          );
          if (!players2.length)
            return;
          const frontmatter = this.app.metadataCache.getFileCache(file)?.frontmatter;
          if (!frontmatter)
            return;
          for (let player of players2) {
            const { ac, hp, modifier: modifier2, level } = frontmatter;
            player.ac = ac;
            player.hp = hp;
            player.modifier = modifier2;
            player.level = level;
            this.playerCreatures.set(
              player.name,
              Creature.from(player)
            );
            if (this.view) {
              const creature = tracker.getOrderedCreatures().find((c) => c.name == player.name);
              if (creature) {
                tracker.updateCreatures({
                  creature,
                  change: {
                    max: player.hp,
                    ac: player.ac
                  }
                });
              }
            }
          }
        })
      );
      this.registerEvent(
        this.app.vault.on("rename", (file, old) => {
          if (!(file instanceof import_obsidian40.TFile))
            return;
          const players2 = this.data.players.filter(
            (p) => p.path == old
          );
          if (!players2.length)
            return;
          for (const player of players2) {
            player.path = file.path;
            player.note = file.basename;
          }
        })
      );
      this.registerEvent(
        this.app.vault.on("delete", (file) => {
          if (!(file instanceof import_obsidian40.TFile))
            return;
          const players2 = this.data.players.filter(
            (p) => p.path == file.path
          );
          if (!players2.length)
            return;
          for (const player of players2) {
            player.path = null;
            player.note = null;
          }
        })
      );
    });
    console.log("Initiative Tracker v" + this.manifest.version + " loaded");
  }
  addCommands() {
    this.addCommand({
      id: "open-tracker",
      name: "Open Initiative Tracker",
      checkCallback: (checking) => {
        if (!this.view) {
          if (!checking) {
            this.addTrackerView();
          }
          return true;
        }
      }
    });
    this.addCommand({
      id: "open-builder",
      name: "Open Encounter Builder",
      checkCallback: (checking) => {
        if (!this.builder) {
          if (!checking) {
            this.addBuilderView();
          }
          return true;
        }
      }
    });
    this.addCommand({
      id: "toggle-encounter",
      name: "Toggle Encounter",
      checkCallback: (checking) => {
        const view = this.view;
        if (view) {
          if (!checking) {
            tracker.toggleState();
          }
          return true;
        }
      }
    });
    this.addCommand({
      id: "next-combatant",
      name: "Next Combatant",
      checkCallback: (checking) => {
        const view = this.view;
        if (view && tracker.getState()) {
          if (!checking) {
            tracker.goToNext();
          }
          return true;
        }
      }
    });
    this.addCommand({
      id: "prev-combatant",
      name: "Previous Combatant",
      checkCallback: (checking) => {
        const view = this.view;
        if (view && tracker.getState()) {
          if (!checking) {
            tracker.goToPrevious();
          }
          return true;
        }
      }
    });
  }
  addEvents() {
    this.registerEvent(
      this.app.workspace.on(
        "initiative-tracker:should-save",
        async () => await this.saveSettings()
      )
    );
    this.registerEvent(
      app.workspace.on(
        "initiative-tracker:save-state",
        async (state) => {
          this.data.state = state;
          await this.saveSettings();
        }
      )
    );
    this.registerEvent(
      this.app.workspace.on(
        "initiative-tracker:start-encounter",
        async (homebrews) => {
          try {
            const creatures = homebrews.map(
              (h) => Creature.from(h).toJSON()
            );
            const view = this.view;
            if (!view) {
              await this.addTrackerView();
            }
            if (view) {
              tracker?.new({
                creatures,
                state: false,
                name: null,
                round: 1,
                logFile: null
              });
              this.app.workspace.revealLeaf(view.leaf);
            } else {
              new import_obsidian40.Notice(
                "Could not find the Initiative Tracker. Try reloading the note!"
              );
            }
          } catch (e) {
            new import_obsidian40.Notice(
              "There was an issue launching the encounter.\n\n" + e.message
            );
            console.error(e);
            return;
          }
        }
      )
    );
  }
  async onunload() {
    await this.saveSettings();
    this.app.workspace.trigger("initiative-tracker:unload");
    this.app.workspace.getLeavesOfType(INTIATIVE_TRACKER_VIEW).forEach((leaf) => leaf.detach());
    this.app.workspace.getLeavesOfType(CREATURE_TRACKER_VIEW).forEach((leaf) => leaf.detach());
    console.log("Initiative Tracker unloaded");
  }
  async addTrackerView() {
    if (this.app.workspace.getLeavesOfType(INTIATIVE_TRACKER_VIEW)?.length) {
      return;
    }
    await this.app.workspace.getRightLeaf(false).setViewState({
      type: INTIATIVE_TRACKER_VIEW
    });
  }
  get builder() {
    const leaves = this.app.workspace.getLeavesOfType(BUILDER_VIEW);
    const leaf = leaves.length ? leaves[0] : null;
    if (leaf && leaf.view && leaf.view instanceof BuilderView)
      return leaf.view;
  }
  async addBuilderView() {
    if (this.app.workspace.getLeavesOfType(BUILDER_VIEW)?.length) {
      return;
    }
    await this.app.workspace.getLeaf(true).setViewState({
      type: BUILDER_VIEW
    });
    this.app.workspace.revealLeaf(this.builder.leaf);
  }
  async saveMonsters(importedMonsters) {
    this.data.homebrew.push(...importedMonsters);
    for (let monster of importedMonsters) {
      this.homebrewCreatures.set(monster.name, Creature.from(monster));
    }
    await this.saveSettings();
  }
  async saveMonster(monster) {
    this.data.homebrew.push(monster);
    this.homebrewCreatures.set(monster.name, Creature.from(monster));
    await this.saveSettings();
  }
  async updatePlayer(existing, player) {
    if (!this.playerCreatures.has(existing.name)) {
      await this.savePlayer(player);
      return;
    }
    const creature = this.playerCreatures.get(existing.name);
    creature.update(player);
    this.data.players.splice(
      this.data.players.indexOf(existing),
      1,
      player
    );
    this.playerCreatures.set(player.name, creature);
    this.playerCreatures.delete(existing.name);
    const view = this.view;
    if (view) {
      tracker.updateState();
    }
    await this.saveSettings();
  }
  async updateMonster(existing, monster) {
    if (!this.homebrewCreatures.has(existing.name)) {
      await this.saveMonster(monster);
      return;
    }
    const creature = this.homebrewCreatures.get(existing.name);
    creature.update(monster);
    this.data.homebrew.splice(
      this.data.homebrew.indexOf(existing),
      1,
      monster
    );
    this.homebrewCreatures.set(monster.name, creature);
    this.homebrewCreatures.delete(existing.name);
    const view = this.view;
    if (view) {
      tracker.updateState();
    }
    await this.saveSettings();
  }
  async deleteMonster(monster) {
    this.data.homebrew = this.data.homebrew.filter((m) => m != monster);
    this.homebrewCreatures.delete(monster.name);
    await this.saveSettings();
  }
  async savePlayer(player) {
    this.data.players.push(player);
    this.playerCreatures.set(player.name, Creature.from(player));
    await this.saveSettings();
  }
  async savePlayers(...players2) {
    for (let monster of players2) {
      this.data.players.push(monster);
      this.playerCreatures.set(monster.name, Creature.from(monster));
    }
    await this.saveSettings();
  }
  async deletePlayer(player) {
    this.data.players = this.data.players.filter((p) => p != player);
    this.playerCreatures.delete(player.name);
    await this.saveSettings();
  }
  async loadSettings() {
    const data = Object.assign(
      {},
      { ...DEFAULT_SETTINGS },
      await this.loadData()
    );
    this.data = data;
    if (this.data.leafletIntegration && !this.data.players.every((p) => p.marker)) {
      this.data.players = this.data.players.map((p) => {
        p.marker = p.marker ?? this.data.playerMarker;
        return p;
      });
    }
  }
  async saveSettings() {
    if (this.data.leafletIntegration && !this.data.players.every((p) => p.marker)) {
      this.data.players = this.data.players.map((p) => {
        p.marker = p.marker ?? this.data.playerMarker;
        return p;
      });
    }
    await this.saveData(this.data);
    tracker.setData(this.data);
  }
  async openCombatant(creature) {
    if (!this.canUseStatBlocks)
      return;
    const view = this.combatant;
    if (!view) {
      const leaf = this.app.workspace.getRightLeaf(true);
      await leaf.setViewState({
        type: CREATURE_TRACKER_VIEW
      });
    }
    this.combatant.render(creature);
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWluaXRpYXRpdmUtdHJhY2tlci9zcmMvbWFpbi50cyIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4taW5pdGlhdGl2ZS10cmFja2VyL3NyYy91dGlscy9jb25zdGFudHMudHMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWluaXRpYXRpdmUtdHJhY2tlci9zcmMvdXRpbHMvY29uZGl0aW9ucy50cyIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4taW5pdGlhdGl2ZS10cmFja2VyL3NyYy91dGlscy9pY29ucy50cyIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4taW5pdGlhdGl2ZS10cmFja2VyL3NyYy91dGlscy9pbmRleC50cyIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4taW5pdGlhdGl2ZS10cmFja2VyL3NyYy9zZXR0aW5ncy9zZXR0aW5ncy50cyIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4taW5pdGlhdGl2ZS10cmFja2VyL3NyYy91dGlscy9zdWdnZXN0ZXIudHMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWluaXRpYXRpdmUtdHJhY2tlci9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2VudW1zLmpzIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi1pbml0aWF0aXZlLXRyYWNrZXIvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0Tm9kZU5hbWUuanMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWluaXRpYXRpdmUtdHJhY2tlci9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRXaW5kb3cuanMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWluaXRpYXRpdmUtdHJhY2tlci9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9pbnN0YW5jZU9mLmpzIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi1pbml0aWF0aXZlLXRyYWNrZXIvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9tb2RpZmllcnMvYXBwbHlTdHlsZXMuanMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWluaXRpYXRpdmUtdHJhY2tlci9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2dldEJhc2VQbGFjZW1lbnQuanMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWluaXRpYXRpdmUtdHJhY2tlci9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL21hdGguanMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWluaXRpYXRpdmUtdHJhY2tlci9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL3VzZXJBZ2VudC5qcyIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4taW5pdGlhdGl2ZS10cmFja2VyL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2lzTGF5b3V0Vmlld3BvcnQuanMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWluaXRpYXRpdmUtdHJhY2tlci9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRCb3VuZGluZ0NsaWVudFJlY3QuanMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWluaXRpYXRpdmUtdHJhY2tlci9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRMYXlvdXRSZWN0LmpzIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi1pbml0aWF0aXZlLXRyYWNrZXIvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvY29udGFpbnMuanMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWluaXRpYXRpdmUtdHJhY2tlci9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRDb21wdXRlZFN0eWxlLmpzIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi1pbml0aWF0aXZlLXRyYWNrZXIvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvaXNUYWJsZUVsZW1lbnQuanMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWluaXRpYXRpdmUtdHJhY2tlci9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXREb2N1bWVudEVsZW1lbnQuanMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWluaXRpYXRpdmUtdHJhY2tlci9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRQYXJlbnROb2RlLmpzIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi1pbml0aWF0aXZlLXRyYWNrZXIvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0T2Zmc2V0UGFyZW50LmpzIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi1pbml0aWF0aXZlLXRyYWNrZXIvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9nZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQuanMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWluaXRpYXRpdmUtdHJhY2tlci9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL3dpdGhpbi5qcyIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4taW5pdGlhdGl2ZS10cmFja2VyL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvZ2V0RnJlc2hTaWRlT2JqZWN0LmpzIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi1pbml0aWF0aXZlLXRyYWNrZXIvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9tZXJnZVBhZGRpbmdPYmplY3QuanMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWluaXRpYXRpdmUtdHJhY2tlci9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2V4cGFuZFRvSGFzaE1hcC5qcyIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4taW5pdGlhdGl2ZS10cmFja2VyL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvbW9kaWZpZXJzL2Fycm93LmpzIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi1pbml0aWF0aXZlLXRyYWNrZXIvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9nZXRWYXJpYXRpb24uanMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWluaXRpYXRpdmUtdHJhY2tlci9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL21vZGlmaWVycy9jb21wdXRlU3R5bGVzLmpzIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi1pbml0aWF0aXZlLXRyYWNrZXIvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9tb2RpZmllcnMvZXZlbnRMaXN0ZW5lcnMuanMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWluaXRpYXRpdmUtdHJhY2tlci9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2dldE9wcG9zaXRlUGxhY2VtZW50LmpzIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi1pbml0aWF0aXZlLXRyYWNrZXIvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9nZXRPcHBvc2l0ZVZhcmlhdGlvblBsYWNlbWVudC5qcyIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4taW5pdGlhdGl2ZS10cmFja2VyL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldFdpbmRvd1Njcm9sbC5qcyIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4taW5pdGlhdGl2ZS10cmFja2VyL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldFdpbmRvd1Njcm9sbEJhclguanMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWluaXRpYXRpdmUtdHJhY2tlci9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRWaWV3cG9ydFJlY3QuanMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWluaXRpYXRpdmUtdHJhY2tlci9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXREb2N1bWVudFJlY3QuanMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWluaXRpYXRpdmUtdHJhY2tlci9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9pc1Njcm9sbFBhcmVudC5qcyIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4taW5pdGlhdGl2ZS10cmFja2VyL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldFNjcm9sbFBhcmVudC5qcyIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4taW5pdGlhdGl2ZS10cmFja2VyL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2xpc3RTY3JvbGxQYXJlbnRzLmpzIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi1pbml0aWF0aXZlLXRyYWNrZXIvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9yZWN0VG9DbGllbnRSZWN0LmpzIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi1pbml0aWF0aXZlLXRyYWNrZXIvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0Q2xpcHBpbmdSZWN0LmpzIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi1pbml0aWF0aXZlLXRyYWNrZXIvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9jb21wdXRlT2Zmc2V0cy5qcyIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4taW5pdGlhdGl2ZS10cmFja2VyL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvZGV0ZWN0T3ZlcmZsb3cuanMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWluaXRpYXRpdmUtdHJhY2tlci9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2NvbXB1dGVBdXRvUGxhY2VtZW50LmpzIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi1pbml0aWF0aXZlLXRyYWNrZXIvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9tb2RpZmllcnMvZmxpcC5qcyIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4taW5pdGlhdGl2ZS10cmFja2VyL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvbW9kaWZpZXJzL2hpZGUuanMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWluaXRpYXRpdmUtdHJhY2tlci9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL21vZGlmaWVycy9vZmZzZXQuanMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWluaXRpYXRpdmUtdHJhY2tlci9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL21vZGlmaWVycy9wb3BwZXJPZmZzZXRzLmpzIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi1pbml0aWF0aXZlLXRyYWNrZXIvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9nZXRBbHRBeGlzLmpzIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi1pbml0aWF0aXZlLXRyYWNrZXIvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9tb2RpZmllcnMvcHJldmVudE92ZXJmbG93LmpzIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi1pbml0aWF0aXZlLXRyYWNrZXIvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0SFRNTEVsZW1lbnRTY3JvbGwuanMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWluaXRpYXRpdmUtdHJhY2tlci9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXROb2RlU2Nyb2xsLmpzIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi1pbml0aWF0aXZlLXRyYWNrZXIvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0Q29tcG9zaXRlUmVjdC5qcyIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4taW5pdGlhdGl2ZS10cmFja2VyL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvb3JkZXJNb2RpZmllcnMuanMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWluaXRpYXRpdmUtdHJhY2tlci9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2RlYm91bmNlLmpzIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi1pbml0aWF0aXZlLXRyYWNrZXIvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9mb3JtYXQuanMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWluaXRpYXRpdmUtdHJhY2tlci9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL3ZhbGlkYXRlTW9kaWZpZXJzLmpzIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi1pbml0aWF0aXZlLXRyYWNrZXIvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy91bmlxdWVCeS5qcyIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4taW5pdGlhdGl2ZS10cmFja2VyL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvbWVyZ2VCeU5hbWUuanMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWluaXRpYXRpdmUtdHJhY2tlci9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2NyZWF0ZVBvcHBlci5qcyIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4taW5pdGlhdGl2ZS10cmFja2VyL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvcG9wcGVyLmpzIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi1pbml0aWF0aXZlLXRyYWNrZXIvc3JjL3V0aWxzL2NyZWF0dXJlLnRzIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi1pbml0aWF0aXZlLXRyYWNrZXIvbm9kZV9tb2R1bGVzL3N2ZWx0ZS9pbnRlcm5hbC9pbmRleC5tanMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWluaXRpYXRpdmUtdHJhY2tlci9ub2RlX21vZHVsZXMvc3ZlbHRlL3N0b3JlL2luZGV4Lm1qcyIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4taW5pdGlhdGl2ZS10cmFja2VyL3NyYy9lbmNvdW50ZXIvaW5kZXgudHMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWluaXRpYXRpdmUtdHJhY2tlci9zcmMvZW5jb3VudGVyL3VpL0VuY291bnRlci5zdmVsdGUiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWluaXRpYXRpdmUtdHJhY2tlci9zcmMvdXRpbHMvZW5jb3VudGVyLWRpZmZpY3VsdHkudHMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWluaXRpYXRpdmUtdHJhY2tlci9zcmMvZW5jb3VudGVyL3VpL0VuY291bnRlclJvdy5zdmVsdGUiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWluaXRpYXRpdmUtdHJhY2tlci9zcmMvZW5jb3VudGVyL3VpL0VuY291bnRlclRhYmxlLnN2ZWx0ZSIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4taW5pdGlhdGl2ZS10cmFja2VyL3NyYy90cmFja2VyL3N0b3Jlcy90cmFja2VyLnRzIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi1pbml0aWF0aXZlLXRyYWNrZXIvc3JjL2VuY291bnRlci91aS9FbmNvdW50ZXJMaW5lLnN2ZWx0ZSIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4taW5pdGlhdGl2ZS10cmFja2VyL3NyYy91dGlscy9zcmQtYmVzdGlhcnkudHMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWluaXRpYXRpdmUtdHJhY2tlci9zcmMvdHJhY2tlci92aWV3LnRzIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi1pbml0aWF0aXZlLXRyYWNrZXIvc3JjL3RyYWNrZXIvdWkvQ29udHJvbHMuc3ZlbHRlIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi1pbml0aWF0aXZlLXRyYWNrZXIvc3JjL3RyYWNrZXIvdWkvY3JlYXR1cmVzL1RhYmxlLnN2ZWx0ZSIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4taW5pdGlhdGl2ZS10cmFja2VyL3NyYy90cmFja2VyL3VpL2NyZWF0dXJlcy9Jbml0aWF0aXZlLnN2ZWx0ZSIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4taW5pdGlhdGl2ZS10cmFja2VyL3NyYy90cmFja2VyL3VpL2NyZWF0dXJlcy9DcmVhdHVyZUNvbnRyb2xzLnN2ZWx0ZSIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4taW5pdGlhdGl2ZS10cmFja2VyL3NyYy90cmFja2VyL3VpL2NyZWF0dXJlcy9TdGF0dXMuc3ZlbHRlIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi1pbml0aWF0aXZlLXRyYWNrZXIvc3JjL3RyYWNrZXIvdWkvY3JlYXR1cmVzL0NyZWF0dXJlLnN2ZWx0ZSIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4taW5pdGlhdGl2ZS10cmFja2VyL25vZGVfbW9kdWxlcy9zdmVsdGUtZG5kLWFjdGlvbi9kaXN0L2luZGV4Lm1qcyIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4taW5pdGlhdGl2ZS10cmFja2VyL25vZGVfbW9kdWxlcy9zdmVsdGUvZWFzaW5nL2luZGV4Lm1qcyIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4taW5pdGlhdGl2ZS10cmFja2VyL25vZGVfbW9kdWxlcy9zdmVsdGUvYW5pbWF0ZS9pbmRleC5tanMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWluaXRpYXRpdmUtdHJhY2tlci9zcmMvdHJhY2tlci91aS9NZXRhZGF0YS5zdmVsdGUiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWluaXRpYXRpdmUtdHJhY2tlci9zcmMvdHJhY2tlci91aS9TYXZlRW5jb3VudGVyLnN2ZWx0ZSIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4taW5pdGlhdGl2ZS10cmFja2VyL3NyYy90cmFja2VyL3VpL0xvYWRFbmNvdW50ZXIuc3ZlbHRlIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi1pbml0aWF0aXZlLXRyYWNrZXIvc3JjL3RyYWNrZXIvdWkvQXBwLnN2ZWx0ZSIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4taW5pdGlhdGl2ZS10cmFja2VyL3NyYy90cmFja2VyL3VpL1VwZGF0aW5nLnN2ZWx0ZSIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4taW5pdGlhdGl2ZS10cmFja2VyL3NyYy9sb2dnZXIvbG9nZ2VyLnRzIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi1pbml0aWF0aXZlLXRyYWNrZXIvc3JjL3RyYWNrZXIvdWkvY3JlYXRlL21vZGFsLnRzIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi1pbml0aWF0aXZlLXRyYWNrZXIvc3JjL3RyYWNrZXIvdWkvY3JlYXRlL0NyZWF0b3Iuc3ZlbHRlIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi1pbml0aWF0aXZlLXRyYWNrZXIvc3JjL3RyYWNrZXIvdWkvY3JlYXRlL0NyZWF0ZS5zdmVsdGUiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWluaXRpYXRpdmUtdHJhY2tlci9zcmMvdHJhY2tlci91aS9jcmVhdGUvTGlzdC5zdmVsdGUiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWluaXRpYXRpdmUtdHJhY2tlci9zcmMvdHJhY2tlci91aS9jcmVhdGUvTGVnYWN5LnN2ZWx0ZSIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4taW5pdGlhdGl2ZS10cmFja2VyL3NyYy9idWlsZGVyL3ZpZXcudHMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWluaXRpYXRpdmUtdHJhY2tlci9zcmMvYnVpbGRlci9jb25zdGFudHMudHMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWluaXRpYXRpdmUtdHJhY2tlci9zcmMvYnVpbGRlci9zdG9yZXMvcGxheWVycy50cyIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4taW5pdGlhdGl2ZS10cmFja2VyL3NyYy9idWlsZGVyL3ZpZXcvY3JlYXR1cmVzL0NyZWF0dXJlLnN2ZWx0ZSIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4taW5pdGlhdGl2ZS10cmFja2VyL3NyYy9idWlsZGVyL3N0b3Jlcy9lbmNvdW50ZXIudHMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWluaXRpYXRpdmUtdHJhY2tlci9zcmMvYnVpbGRlci92aWV3L051bGxhYmxlLnN2ZWx0ZSIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4taW5pdGlhdGl2ZS10cmFja2VyL3NyYy9idWlsZGVyL3ZpZXcvY3JlYXR1cmVzL0ZpbHRlcnMuc3ZlbHRlIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi1pbml0aWF0aXZlLXRyYWNrZXIvbm9kZV9tb2R1bGVzL3N2ZWx0ZS90cmFuc2l0aW9uL2luZGV4Lm1qcyIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4taW5pdGlhdGl2ZS10cmFja2VyL3NyYy9idWlsZGVyL3ZpZXcvY3JlYXR1cmVzL1RodW1iLnN2ZWx0ZSIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4taW5pdGlhdGl2ZS10cmFja2VyL3NyYy9idWlsZGVyL3ZpZXcvY3JlYXR1cmVzL1NsaWRlci5zdmVsdGUiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWluaXRpYXRpdmUtdHJhY2tlci9ub2RlX21vZHVsZXMvc3ZlbHRlLW11bHRpc2VsZWN0L0NpcmNsZVNwaW5uZXIuc3ZlbHRlIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi1pbml0aWF0aXZlLXRyYWNrZXIvbm9kZV9tb2R1bGVzL3N2ZWx0ZS1tdWx0aXNlbGVjdC9pY29ucy9DaGV2cm9uRXhwYW5kLnN2ZWx0ZSIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4taW5pdGlhdGl2ZS10cmFja2VyL25vZGVfbW9kdWxlcy9zdmVsdGUtbXVsdGlzZWxlY3QvaWNvbnMvQ3Jvc3Muc3ZlbHRlIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi1pbml0aWF0aXZlLXRyYWNrZXIvbm9kZV9tb2R1bGVzL3N2ZWx0ZS1tdWx0aXNlbGVjdC9pY29ucy9EaXNhYmxlZC5zdmVsdGUiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWluaXRpYXRpdmUtdHJhY2tlci9ub2RlX21vZHVsZXMvc3ZlbHRlL21vdGlvbi9pbmRleC5tanMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWluaXRpYXRpdmUtdHJhY2tlci9ub2RlX21vZHVsZXMvc3ZlbHRlLW11bHRpc2VsZWN0L1dpZ2dsZS5zdmVsdGUiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWluaXRpYXRpdmUtdHJhY2tlci9ub2RlX21vZHVsZXMvc3ZlbHRlLW11bHRpc2VsZWN0L011bHRpU2VsZWN0LnN2ZWx0ZSIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4taW5pdGlhdGl2ZS10cmFja2VyL25vZGVfbW9kdWxlcy9zdmVsdGUtbXVsdGlzZWxlY3QvaW5kZXguanMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWluaXRpYXRpdmUtdHJhY2tlci9zcmMvYnVpbGRlci92aWV3L2NyZWF0dXJlcy9GaWx0ZXJNb2RhbC5zdmVsdGUiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWluaXRpYXRpdmUtdHJhY2tlci9zcmMvYnVpbGRlci9zdG9yZXMvZmlsdGVyLnRzIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi1pbml0aWF0aXZlLXRyYWNrZXIvc3JjL2J1aWxkZXIvdmlldy9jcmVhdHVyZXMvQ3JlYXR1cmVzLnN2ZWx0ZSIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4taW5pdGlhdGl2ZS10cmFja2VyL3NyYy9idWlsZGVyL3ZpZXcvY3JlYXR1cmVzL1BhZ2luYXRpb24uc3ZlbHRlIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi1pbml0aWF0aXZlLXRyYWNrZXIvc3JjL2J1aWxkZXIvdmlldy9lbmNvdW50ZXIvRW5jb3VudGVyLnN2ZWx0ZSIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4taW5pdGlhdGl2ZS10cmFja2VyL3NyYy9idWlsZGVyL3ZpZXcvZW5jb3VudGVyL0NyZWF0dXJlLnN2ZWx0ZSIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4taW5pdGlhdGl2ZS10cmFja2VyL3NyYy9idWlsZGVyL3ZpZXcvcGFydHkvUGFydHkuc3ZlbHRlIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi1pbml0aWF0aXZlLXRyYWNrZXIvc3JjL2J1aWxkZXIvdmlldy9wYXJ0eS9FeHBlcmllbmNlLnN2ZWx0ZSIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4taW5pdGlhdGl2ZS10cmFja2VyL3NyYy9idWlsZGVyL3ZpZXcvQnVpbGRlci5zdmVsdGUiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWluaXRpYXRpdmUtdHJhY2tlci9zcmMvdHJhY2tlci9wbGF5ZXItdmlldy50cyIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4taW5pdGlhdGl2ZS10cmFja2VyL3NyYy90cmFja2VyL3BsYXllci9QbGF5ZXJWaWV3LnN2ZWx0ZSIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4taW5pdGlhdGl2ZS10cmFja2VyL25vZGVfbW9kdWxlcy9zdmVsdGUtbG9hZGluZy1zcGlubmVycy9ub2RlX21vZHVsZXMvc3ZlbHRlL2ludGVybmFsL2luZGV4Lm1qcyIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4taW5pdGlhdGl2ZS10cmFja2VyL25vZGVfbW9kdWxlcy9zdmVsdGUtbG9hZGluZy1zcGlubmVycy9zcmMvQ2lyY2xlLnN2ZWx0ZSIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4taW5pdGlhdGl2ZS10cmFja2VyL25vZGVfbW9kdWxlcy9zdmVsdGUtbG9hZGluZy1zcGlubmVycy9zcmMvQ2lyY2xlMi5zdmVsdGUiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWluaXRpYXRpdmUtdHJhY2tlci9ub2RlX21vZHVsZXMvc3ZlbHRlLWxvYWRpbmctc3Bpbm5lcnMvc3JjL0NpcmNsZTMuc3ZlbHRlIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi1pbml0aWF0aXZlLXRyYWNrZXIvbm9kZV9tb2R1bGVzL3N2ZWx0ZS1sb2FkaW5nLXNwaW5uZXJzL3NyYy91dGlscy50cyIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4taW5pdGlhdGl2ZS10cmFja2VyL25vZGVfbW9kdWxlcy9zdmVsdGUtbG9hZGluZy1zcGlubmVycy9zcmMvRG91YmxlQm91bmNlLnN2ZWx0ZSIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4taW5pdGlhdGl2ZS10cmFja2VyL25vZGVfbW9kdWxlcy9zdmVsdGUtbG9hZGluZy1zcGlubmVycy9zcmMvR29vZ2xlU3Bpbi5zdmVsdGUiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWluaXRpYXRpdmUtdHJhY2tlci9ub2RlX21vZHVsZXMvc3ZlbHRlLWxvYWRpbmctc3Bpbm5lcnMvc3JjL1NjYWxlT3V0LnN2ZWx0ZSIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4taW5pdGlhdGl2ZS10cmFja2VyL25vZGVfbW9kdWxlcy9zdmVsdGUtbG9hZGluZy1zcGlubmVycy9zcmMvU3BpbkxpbmUuc3ZlbHRlIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi1pbml0aWF0aXZlLXRyYWNrZXIvbm9kZV9tb2R1bGVzL3N2ZWx0ZS1sb2FkaW5nLXNwaW5uZXJzL3NyYy9TdHJldGNoLnN2ZWx0ZSIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4taW5pdGlhdGl2ZS10cmFja2VyL25vZGVfbW9kdWxlcy9zdmVsdGUtbG9hZGluZy1zcGlubmVycy9zcmMvQmFyTG9hZGVyLnN2ZWx0ZSIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4taW5pdGlhdGl2ZS10cmFja2VyL25vZGVfbW9kdWxlcy9zdmVsdGUtbG9hZGluZy1zcGlubmVycy9zcmMvSnVtcGVyLnN2ZWx0ZSIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4taW5pdGlhdGl2ZS10cmFja2VyL25vZGVfbW9kdWxlcy9zdmVsdGUtbG9hZGluZy1zcGlubmVycy9zcmMvUmluZ0xvYWRlci5zdmVsdGUiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWluaXRpYXRpdmUtdHJhY2tlci9ub2RlX21vZHVsZXMvc3ZlbHRlLWxvYWRpbmctc3Bpbm5lcnMvc3JjL1N5bmNMb2FkZXIuc3ZlbHRlIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi1pbml0aWF0aXZlLXRyYWNrZXIvbm9kZV9tb2R1bGVzL3N2ZWx0ZS1sb2FkaW5nLXNwaW5uZXJzL3NyYy9SYWluYm93LnN2ZWx0ZSIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4taW5pdGlhdGl2ZS10cmFja2VyL25vZGVfbW9kdWxlcy9zdmVsdGUtbG9hZGluZy1zcGlubmVycy9zcmMvV2F2ZS5zdmVsdGUiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWluaXRpYXRpdmUtdHJhY2tlci9ub2RlX21vZHVsZXMvc3ZlbHRlLWxvYWRpbmctc3Bpbm5lcnMvc3JjL0ZpcmV3b3JrLnN2ZWx0ZSIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4taW5pdGlhdGl2ZS10cmFja2VyL25vZGVfbW9kdWxlcy9zdmVsdGUtbG9hZGluZy1zcGlubmVycy9zcmMvUHVsc2Uuc3ZlbHRlIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi1pbml0aWF0aXZlLXRyYWNrZXIvbm9kZV9tb2R1bGVzL3N2ZWx0ZS1sb2FkaW5nLXNwaW5uZXJzL3NyYy9KZWxseWZpc2guc3ZlbHRlIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi1pbml0aWF0aXZlLXRyYWNrZXIvbm9kZV9tb2R1bGVzL3N2ZWx0ZS1sb2FkaW5nLXNwaW5uZXJzL3NyYy9DaGFzaW5nLnN2ZWx0ZSIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4taW5pdGlhdGl2ZS10cmFja2VyL25vZGVfbW9kdWxlcy9zdmVsdGUtbG9hZGluZy1zcGlubmVycy9zcmMvU2hhZG93LnN2ZWx0ZSIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4taW5pdGlhdGl2ZS10cmFja2VyL25vZGVfbW9kdWxlcy9zdmVsdGUtbG9hZGluZy1zcGlubmVycy9zcmMvU3F1YXJlLnN2ZWx0ZSIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4taW5pdGlhdGl2ZS10cmFja2VyL25vZGVfbW9kdWxlcy9zdmVsdGUtbG9hZGluZy1zcGlubmVycy9zcmMvTW9vbi5zdmVsdGUiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLWluaXRpYXRpdmUtdHJhY2tlci9ub2RlX21vZHVsZXMvc3ZlbHRlLWxvYWRpbmctc3Bpbm5lcnMvc3JjL1BsYW5lLnN2ZWx0ZSIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4taW5pdGlhdGl2ZS10cmFja2VyL25vZGVfbW9kdWxlcy9zdmVsdGUtbG9hZGluZy1zcGlubmVycy9zcmMvRGlhbW9uZHMuc3ZlbHRlIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi1pbml0aWF0aXZlLXRyYWNrZXIvbm9kZV9tb2R1bGVzL3N2ZWx0ZS1sb2FkaW5nLXNwaW5uZXJzL3NyYy9DbG9jay5zdmVsdGUiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImltcG9ydCB7XG4gICAgRnJvbnRNYXR0ZXJDYWNoZSxcbiAgICBOb3RpY2UsXG4gICAgcGFyc2VZYW1sLFxuICAgIFBsdWdpbixcbiAgICBURmlsZSxcbiAgICBXb3Jrc3BhY2VMZWFmXG59IGZyb20gXCJvYnNpZGlhblwiO1xuXG5pbXBvcnQge1xuICAgIEJVSUxERVJfVklFVyxcbiAgICBDUkVBVFVSRV9UUkFDS0VSX1ZJRVcsXG4gICAgREVGQVVMVF9TRVRUSU5HUyxcbiAgICBJTlRJQVRJVkVfVFJBQ0tFUl9WSUVXLFxuICAgIHJlZ2lzdGVySWNvbnNcbn0gZnJvbSBcIi4vdXRpbHNcIjtcblxuaW1wb3J0IHsgUExBWUVSX1ZJRVdfVklFVyB9IGZyb20gXCIuL3V0aWxzL2NvbnN0YW50c1wiO1xuXG5pbXBvcnQgdHlwZSB7XG4gICAgRXZlbnRzT25BcmdzLFxuICAgIEhvbWVicmV3Q3JlYXR1cmUsXG4gICAgSW5pdGlhdGl2ZVRyYWNrZXJEYXRhLFxuICAgIEluaXRpYXRpdmVWaWV3U3RhdGUsXG4gICAgU1JETW9uc3RlclxufSBmcm9tIFwiLi4vQHR5cGVzL2luZGV4XCI7XG5cbmltcG9ydCBJbml0aWF0aXZlVHJhY2tlclNldHRpbmdzIGZyb20gXCIuL3NldHRpbmdzL3NldHRpbmdzXCI7XG5pbXBvcnQgeyBFbmNvdW50ZXJCbG9jaywgRW5jb3VudGVyUGFyc2VyIH0gZnJvbSBcIi4vZW5jb3VudGVyXCI7XG5pbXBvcnQgRW5jb3VudGVyTGluZSBmcm9tIFwiLi9lbmNvdW50ZXIvdWkvRW5jb3VudGVyTGluZS5zdmVsdGVcIjtcblxuaW1wb3J0IHsgQ3JlYXR1cmUgfSBmcm9tIFwiLi91dGlscy9jcmVhdHVyZVwiO1xuXG5pbXBvcnQgeyBCRVNUSUFSWSB9IGZyb20gXCIuL3V0aWxzL3NyZC1iZXN0aWFyeVwiO1xuXG5pbXBvcnQgVHJhY2tlclZpZXcsIHsgQ3JlYXR1cmVWaWV3IH0gZnJvbSBcIi4vdHJhY2tlci92aWV3XCI7XG5pbXBvcnQgQnVpbGRlclZpZXcgZnJvbSBcIi4vYnVpbGRlci92aWV3XCI7XG5cbmltcG9ydCB0eXBlIHsgUGx1Z2lucyB9IGZyb20gXCIuLi8uLi9vYnNpZGlhbi1vdmVybG9hZC9pbmRleFwiO1xuaW1wb3J0IFBsYXllclZpZXcgZnJvbSBcIi4vdHJhY2tlci9wbGF5ZXItdmlld1wiO1xuaW1wb3J0IHsgdHJhY2tlciB9IGZyb20gXCIuL3RyYWNrZXIvc3RvcmVzL3RyYWNrZXJcIjtcbmRlY2xhcmUgbW9kdWxlIFwib2JzaWRpYW5cIiB7XG4gICAgaW50ZXJmYWNlIEFwcCB7XG4gICAgICAgIHBsdWdpbnM6IHtcbiAgICAgICAgICAgIGdldFBsdWdpbjxUIGV4dGVuZHMga2V5b2YgUGx1Z2lucz4ocGx1Z2luOiBUKTogUGx1Z2luc1tUXTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgaW50ZXJmYWNlIFdvcmtzcGFjZUl0ZW0ge1xuICAgICAgICBjb250YWluZXJFbDogSFRNTEVsZW1lbnQ7XG4gICAgfVxuICAgIGludGVyZmFjZSBXb3Jrc3BhY2Uge1xuICAgICAgICBvbiguLi5hcmdzOiBFdmVudHNPbkFyZ3MpOiBFdmVudFJlZjtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEluaXRpYXRpdmVUcmFja2VyIGV4dGVuZHMgUGx1Z2luIHtcbiAgICBwdWJsaWMgZGF0YTogSW5pdGlhdGl2ZVRyYWNrZXJEYXRhO1xuICAgIHBsYXllckNyZWF0dXJlczogTWFwPHN0cmluZywgQ3JlYXR1cmU+ID0gbmV3IE1hcCgpO1xuICAgIGhvbWVicmV3Q3JlYXR1cmVzOiBNYXA8c3RyaW5nLCBDcmVhdHVyZT4gPSBuZXcgTWFwKCk7XG4gICAgd2F0Y2hlcnM6IE1hcDxURmlsZSwgSG9tZWJyZXdDcmVhdHVyZT4gPSBuZXcgTWFwKCk7XG4gICAgZ2V0Um9sbGVyKHN0cjogc3RyaW5nKSB7XG4gICAgICAgIGlmICghdGhpcy5jYW5Vc2VEaWNlUm9sbGVyKSByZXR1cm47XG4gICAgICAgIGNvbnN0IHJvbGxlciA9IHRoaXMuYXBwLnBsdWdpbnNcbiAgICAgICAgICAgIC5nZXRQbHVnaW4oXCJvYnNpZGlhbi1kaWNlLXJvbGxlclwiKVxuICAgICAgICAgICAgLmdldFJvbGxlclN5bmMoc3RyLCBcInN0YXRibG9ja1wiLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIHJvbGxlcjtcbiAgICB9XG4gICAgZ2V0IGNhblVzZURpY2VSb2xsZXIoKSB7XG4gICAgICAgIGlmICh0aGlzLmFwcC5wbHVnaW5zLmdldFBsdWdpbihcIm9ic2lkaWFuLWRpY2Utcm9sbGVyXCIpICE9IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAhdGhpcy5hcHAucGx1Z2lucy5nZXRQbHVnaW4oXCJvYnNpZGlhbi1kaWNlLXJvbGxlclwiKVxuICAgICAgICAgICAgICAgICAgICAuZ2V0Um9sbGVyU3luY1xuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgbmV3IE5vdGljZShcbiAgICAgICAgICAgICAgICAgICAgXCJQbGVhc2UgdXBkYXRlIERpY2UgUm9sbGVyIHRvIHRoZSBsYXRlc3QgdmVyc2lvbiB0byB1c2Ugd2l0aCBJbml0aWF0aXZlIFRyYWNrZXIuXCJcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgZ2V0SW5pdGlhdGl2ZVZhbHVlKG1vZGlmaWVyOiBudW1iZXIgPSAwKTogbnVtYmVyIHtcbiAgICAgICAgbGV0IGluaXRpYXRpdmUgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxOSArIDEpICsgbW9kaWZpZXI7XG4gICAgICAgIGlmICh0aGlzLmNhblVzZURpY2VSb2xsZXIpIHtcbiAgICAgICAgICAgIGNvbnN0IHJvbGxlciA9IHRoaXMuZ2V0Um9sbGVyKFxuICAgICAgICAgICAgICAgIHRoaXMuZGF0YS5pbml0aWF0aXZlLnJlcGxhY2UoLyVtb2QlL2csIGAoJHttb2RpZmllcn0pYClcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBpZiAocm9sbGVyKSB7XG4gICAgICAgICAgICAgICAgcm9sbGVyLnJvbGwoKTtcbiAgICAgICAgICAgICAgICBpZiAoIWlzTmFOKHJvbGxlci5yZXN1bHQpKSBpbml0aWF0aXZlID0gcm9sbGVyLnJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaW5pdGlhdGl2ZTtcbiAgICB9XG5cbiAgICBnZXRQbGF5ZXJCeU5hbWUobmFtZTogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBDcmVhdHVyZS5mcm9tKHRoaXMucGxheWVyQ3JlYXR1cmVzLmdldChuYW1lKSk7XG4gICAgfVxuICAgIGdldFBsYXllcnNGb3JQYXJ0eShwYXJ0eTogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICB0aGlzLmRhdGEucGFydGllc1xuICAgICAgICAgICAgICAgID8uZmluZCgocCkgPT4gcC5uYW1lID09IHBhcnR5KVxuICAgICAgICAgICAgICAgID8ucGxheWVycy5tYXAoKHApID0+IHRoaXMuZ2V0UGxheWVyQnlOYW1lKHApKVxuICAgICAgICAgICAgICAgID8uZmlsdGVyKChwKSA9PiBwKSA/PyBbXVxuICAgICAgICApO1xuICAgIH1cblxuICAgIGdldCBjYW5Vc2VTdGF0QmxvY2tzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hcHAucGx1Z2lucy5nZXRQbHVnaW4oXCJvYnNpZGlhbi01ZS1zdGF0YmxvY2tzXCIpICE9IG51bGw7XG4gICAgfVxuICAgIGdldCBzdGF0YmxvY2tzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hcHAucGx1Z2lucy5nZXRQbHVnaW4oXCJvYnNpZGlhbi01ZS1zdGF0YmxvY2tzXCIpO1xuICAgIH1cbiAgICBnZXQgc3RhdGJsb2NrVmVyc2lvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGJsb2Nrcz8uc2V0dGluZ3M/LnZlcnNpb24gPz8geyBtYWpvcjogMCB9O1xuICAgIH1cbiAgICBnZXQgY2FuVXNlTGVhZmxldCgpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIHRoaXMuYXBwLnBsdWdpbnMuZ2V0UGx1Z2luKFwib2JzaWRpYW4tbGVhZmxldC1wbHVnaW5cIikgIT0gbnVsbCAmJlxuICAgICAgICAgICAgTnVtYmVyKFxuICAgICAgICAgICAgICAgIHRoaXMuYXBwLnBsdWdpbnMuZ2V0UGx1Z2luKFwib2JzaWRpYW4tbGVhZmxldC1wbHVnaW5cIikuZGF0YVxuICAgICAgICAgICAgICAgICAgICA/LnZlcnNpb24/Lm1ham9yID49IDRcbiAgICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBnZXQgbGVhZmxldCgpIHtcbiAgICAgICAgaWYgKHRoaXMuY2FuVXNlTGVhZmxldCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYXBwLnBsdWdpbnMuZ2V0UGx1Z2luKFwib2JzaWRpYW4tbGVhZmxldC1wbHVnaW5cIik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXQgc3RhdGJsb2NrX2NyZWF0dXJlcygpIHtcbiAgICAgICAgaWYgKCF0aGlzLmRhdGEuc3luYykgcmV0dXJuIFtdO1xuICAgICAgICBpZiAoIXRoaXMuYXBwLnBsdWdpbnMuZ2V0UGx1Z2luKFwib2JzaWRpYW4tNWUtc3RhdGJsb2Nrc1wiKSkgcmV0dXJuIFtdO1xuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgLi4uQXJyYXkuZnJvbShcbiAgICAgICAgICAgICAgICB0aGlzLmFwcC5wbHVnaW5zXG4gICAgICAgICAgICAgICAgICAgIC5nZXRQbHVnaW4oXCJvYnNpZGlhbi01ZS1zdGF0YmxvY2tzXCIpXG4gICAgICAgICAgICAgICAgICAgIC5kYXRhPy52YWx1ZXMoKSA/PyBbXVxuICAgICAgICAgICAgKVxuICAgICAgICBdIGFzIFNSRE1vbnN0ZXJbXTtcbiAgICB9XG5cbiAgICBnZXQgaG9tZWJyZXcoKSB7XG4gICAgICAgIHJldHVybiBbLi4udGhpcy5zdGF0YmxvY2tfY3JlYXR1cmVzLCAuLi50aGlzLmRhdGEuaG9tZWJyZXddO1xuICAgIH1cblxuICAgIGdldCBiZXN0aWFyeSgpIHtcbiAgICAgICAgcmV0dXJuIFsuLi5CRVNUSUFSWSwgLi4udGhpcy5ob21lYnJld107XG4gICAgfVxuXG4gICAgZ2V0IHZpZXcoKSB7XG4gICAgICAgIGNvbnN0IGxlYXZlcyA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRMZWF2ZXNPZlR5cGUoXG4gICAgICAgICAgICBJTlRJQVRJVkVfVFJBQ0tFUl9WSUVXXG4gICAgICAgICk7XG4gICAgICAgIGNvbnN0IGxlYWYgPSBsZWF2ZXM/Lmxlbmd0aCA/IGxlYXZlc1swXSA6IG51bGw7XG4gICAgICAgIGlmIChsZWFmICYmIGxlYWYudmlldyAmJiBsZWFmLnZpZXcgaW5zdGFuY2VvZiBUcmFja2VyVmlldylcbiAgICAgICAgICAgIHJldHVybiBsZWFmLnZpZXc7XG4gICAgfVxuICAgIGdldCBjb21iYXRhbnQoKSB7XG4gICAgICAgIGNvbnN0IGxlYXZlcyA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRMZWF2ZXNPZlR5cGUoXG4gICAgICAgICAgICBDUkVBVFVSRV9UUkFDS0VSX1ZJRVdcbiAgICAgICAgKTtcbiAgICAgICAgY29uc3QgbGVhZiA9IGxlYXZlcz8ubGVuZ3RoID8gbGVhdmVzWzBdIDogbnVsbDtcbiAgICAgICAgaWYgKGxlYWYgJiYgbGVhZi52aWV3ICYmIGxlYWYudmlldyBpbnN0YW5jZW9mIENyZWF0dXJlVmlldylcbiAgICAgICAgICAgIHJldHVybiBsZWFmLnZpZXc7XG4gICAgfVxuXG4gICAgZ2V0IGRlZmF1bHRQYXJ0eSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YS5wYXJ0aWVzLmZpbmQoKHApID0+IHAubmFtZSA9PSB0aGlzLmRhdGEuZGVmYXVsdFBhcnR5KTtcbiAgICB9XG5cbiAgICBhc3luYyBvbmxvYWQoKSB7XG4gICAgICAgIHJlZ2lzdGVySWNvbnMoKTtcblxuICAgICAgICBhd2FpdCB0aGlzLmxvYWRTZXR0aW5ncygpO1xuXG4gICAgICAgIHRoaXMuYWRkU2V0dGluZ1RhYihuZXcgSW5pdGlhdGl2ZVRyYWNrZXJTZXR0aW5ncyh0aGlzKSk7XG5cbiAgICAgICAgdGhpcy5yZWdpc3RlclZpZXcoXG4gICAgICAgICAgICBJTlRJQVRJVkVfVFJBQ0tFUl9WSUVXLFxuICAgICAgICAgICAgKGxlYWY6IFdvcmtzcGFjZUxlYWYpID0+IG5ldyBUcmFja2VyVmlldyhsZWFmLCB0aGlzKVxuICAgICAgICApO1xuICAgICAgICB0aGlzLnJlZ2lzdGVyVmlldyhcbiAgICAgICAgICAgIFBMQVlFUl9WSUVXX1ZJRVcsXG4gICAgICAgICAgICAobGVhZjogV29ya3NwYWNlTGVhZikgPT4gbmV3IFBsYXllclZpZXcobGVhZiwgdGhpcylcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5yZWdpc3RlclZpZXcoXG4gICAgICAgICAgICBDUkVBVFVSRV9UUkFDS0VSX1ZJRVcsXG4gICAgICAgICAgICAobGVhZjogV29ya3NwYWNlTGVhZikgPT4gbmV3IENyZWF0dXJlVmlldyhsZWFmLCB0aGlzKVxuICAgICAgICApO1xuICAgICAgICB0aGlzLnJlZ2lzdGVyVmlldyhcbiAgICAgICAgICAgIEJVSUxERVJfVklFVyxcbiAgICAgICAgICAgIChsZWFmOiBXb3Jrc3BhY2VMZWFmKSA9PiBuZXcgQnVpbGRlclZpZXcobGVhZiwgdGhpcylcbiAgICAgICAgKTtcblxuICAgICAgICB0aGlzLmFkZENvbW1hbmRzKCk7XG4gICAgICAgIHRoaXMuYWRkRXZlbnRzKCk7XG5cbiAgICAgICAgdGhpcy5yZWdpc3Rlck1hcmtkb3duQ29kZUJsb2NrUHJvY2Vzc29yKFwiZW5jb3VudGVyXCIsIChzcmMsIGVsLCBjdHgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGhhbmRsZXIgPSBuZXcgRW5jb3VudGVyQmxvY2sodGhpcywgc3JjLCBlbCk7XG4gICAgICAgICAgICBjdHguYWRkQ2hpbGQoaGFuZGxlcik7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnJlZ2lzdGVyTWFya2Rvd25Db2RlQmxvY2tQcm9jZXNzb3IoXG4gICAgICAgICAgICBcImVuY291bnRlci10YWJsZVwiLFxuICAgICAgICAgICAgKHNyYywgZWwsIGN0eCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGhhbmRsZXIgPSBuZXcgRW5jb3VudGVyQmxvY2sodGhpcywgc3JjLCBlbCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgY3R4LmFkZENoaWxkKGhhbmRsZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuXG4gICAgICAgIHRoaXMucmVnaXN0ZXJNYXJrZG93blBvc3RQcm9jZXNzb3IoYXN5bmMgKGVsLCBjdHgpID0+IHtcbiAgICAgICAgICAgIGlmICghZWwgfHwgIWVsLmZpcnN0RWxlbWVudENoaWxkKSByZXR1cm47XG5cbiAgICAgICAgICAgIGNvbnN0IGNvZGVFbHMgPSBlbC5xdWVyeVNlbGVjdG9yQWxsPEhUTUxFbGVtZW50PihcImNvZGVcIik7XG4gICAgICAgICAgICBpZiAoIWNvZGVFbHMgfHwgIWNvZGVFbHMubGVuZ3RoKSByZXR1cm47XG5cbiAgICAgICAgICAgIGNvbnN0IGNvZGVzID0gQXJyYXkuZnJvbShjb2RlRWxzKS5maWx0ZXIoKGNvZGUpID0+XG4gICAgICAgICAgICAgICAgL15lbmNvdW50ZXI6XFxzLy50ZXN0KGNvZGUuaW5uZXJUZXh0KVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGlmICghY29kZXMubGVuZ3RoKSByZXR1cm47XG5cbiAgICAgICAgICAgIGZvciAoY29uc3QgY29kZSBvZiBjb2Rlcykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNyZWF0dXJlcyA9IGNvZGUuaW5uZXJUZXh0XG4gICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKGBlbmNvdW50ZXI6YCwgXCJcIilcbiAgICAgICAgICAgICAgICAgICAgLnRyaW0oKVxuICAgICAgICAgICAgICAgICAgICAuc3BsaXQoXCIsXCIpXG4gICAgICAgICAgICAgICAgICAgIC5tYXAoKHMpID0+IHBhcnNlWWFtbChzLnRyaW0oKSkpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhcnNlciA9IG5ldyBFbmNvdW50ZXJQYXJzZXIodGhpcyk7XG4gICAgICAgICAgICAgICAgY29uc3QgcGFyc2VkID0gYXdhaXQgcGFyc2VyLnBhcnNlKHsgY3JlYXR1cmVzIH0pO1xuXG4gICAgICAgICAgICAgICAgaWYgKCFwYXJzZWQgfHwgIXBhcnNlZC5jcmVhdHVyZXMgfHwgIXBhcnNlZC5jcmVhdHVyZXMuc2l6ZSlcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG5cbiAgICAgICAgICAgICAgICBjb25zdCB0YXJnZXQgPSBjcmVhdGVTcGFuKFwiaW5pdGlhdGl2ZS10cmFja2VyLWVuY291bnRlci1saW5lXCIpO1xuICAgICAgICAgICAgICAgIG5ldyBFbmNvdW50ZXJMaW5lKHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LFxuICAgICAgICAgICAgICAgICAgICBwcm9wczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4ucGFyc2VkLFxuICAgICAgICAgICAgICAgICAgICAgICAgcGx1Z2luOiB0aGlzXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGNvZGUucmVwbGFjZVdpdGgodGFyZ2V0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5wbGF5ZXJDcmVhdHVyZXMgPSBuZXcgTWFwKFxuICAgICAgICAgICAgdGhpcy5kYXRhLnBsYXllcnMubWFwKChwKSA9PiBbcC5uYW1lLCBDcmVhdHVyZS5mcm9tKHApXSlcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5ob21lYnJld0NyZWF0dXJlcyA9IG5ldyBNYXAoXG4gICAgICAgICAgICB0aGlzLmJlc3RpYXJ5Lm1hcCgocCkgPT4gW3AubmFtZSwgQ3JlYXR1cmUuZnJvbShwKV0pXG4gICAgICAgICk7XG5cbiAgICAgICAgdGhpcy5hcHAud29ya3NwYWNlLm9uTGF5b3V0UmVhZHkoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5hZGRUcmFja2VyVmlldygpO1xuICAgICAgICAgICAgLy9VcGRhdGUgcGxheWVycyBmcm9tIDwgNy4yXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHBsYXllciBvZiB0aGlzLmRhdGEucGxheWVycykge1xuICAgICAgICAgICAgICAgIGlmIChwbGF5ZXIucGF0aCkgY29udGludWU7XG4gICAgICAgICAgICAgICAgaWYgKCFwbGF5ZXIubm90ZSkgY29udGludWU7XG4gICAgICAgICAgICAgICAgY29uc3QgZmlsZSA9IGF3YWl0IHRoaXMuYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0Rmlyc3RMaW5rcGF0aERlc3QoXG4gICAgICAgICAgICAgICAgICAgIHBsYXllci5ub3RlLFxuICAgICAgICAgICAgICAgICAgICBcIlwiXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICFmaWxlIHx8XG4gICAgICAgICAgICAgICAgICAgICF0aGlzLmFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZShmaWxlKT8uZnJvbnRtYXR0ZXJcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3IE5vdGljZShcbiAgICAgICAgICAgICAgICAgICAgICAgIGBJbml0aWF0aXZlIFRyYWNrZXI6IFRoZXJlIHdhcyBhbiBpc3N1ZSB3aXRoIHRoZSBsaW5rZWQgbm90ZSBmb3IgJHtwbGF5ZXIubmFtZX0uXFxuXFxuUGxlYXNlIHJlLWxpbmsgaXQgaW4gc2V0dGluZ3MuYFxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnJlZ2lzdGVyRXZlbnQoXG4gICAgICAgICAgICAgICAgdGhpcy5hcHAubWV0YWRhdGFDYWNoZS5vbihcImNoYW5nZWRcIiwgKGZpbGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEoZmlsZSBpbnN0YW5jZW9mIFRGaWxlKSkgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwbGF5ZXJzID0gdGhpcy5kYXRhLnBsYXllcnMuZmlsdGVyKFxuICAgICAgICAgICAgICAgICAgICAgICAgKHApID0+IHAucGF0aCA9PSBmaWxlLnBhdGhcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFwbGF5ZXJzLmxlbmd0aCkgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBmcm9udG1hdHRlcjogRnJvbnRNYXR0ZXJDYWNoZSA9XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZShmaWxlKT8uZnJvbnRtYXR0ZXI7XG4gICAgICAgICAgICAgICAgICAgIGlmICghZnJvbnRtYXR0ZXIpIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgcGxheWVyIG9mIHBsYXllcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgYWMsIGhwLCBtb2RpZmllciwgbGV2ZWwgfSA9IGZyb250bWF0dGVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyLmFjID0gYWM7XG4gICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXIuaHAgPSBocDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllci5tb2RpZmllciA9IG1vZGlmaWVyO1xuICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyLmxldmVsID0gbGV2ZWw7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGxheWVyQ3JlYXR1cmVzLnNldChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXIubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDcmVhdHVyZS5mcm9tKHBsYXllcilcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy52aWV3KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY3JlYXR1cmUgPSB0cmFja2VyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5nZXRPcmRlcmVkQ3JlYXR1cmVzKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmZpbmQoKGMpID0+IGMubmFtZSA9PSBwbGF5ZXIubmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNyZWF0dXJlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYWNrZXIudXBkYXRlQ3JlYXR1cmVzKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0dXJlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhbmdlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4OiBwbGF5ZXIuaHAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWM6IHBsYXllci5hY1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRoaXMucmVnaXN0ZXJFdmVudChcbiAgICAgICAgICAgICAgICB0aGlzLmFwcC52YXVsdC5vbihcInJlbmFtZVwiLCAoZmlsZSwgb2xkKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghKGZpbGUgaW5zdGFuY2VvZiBURmlsZSkpIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcGxheWVycyA9IHRoaXMuZGF0YS5wbGF5ZXJzLmZpbHRlcihcbiAgICAgICAgICAgICAgICAgICAgICAgIChwKSA9PiBwLnBhdGggPT0gb2xkXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghcGxheWVycy5sZW5ndGgpIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBwbGF5ZXIgb2YgcGxheWVycykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyLnBhdGggPSBmaWxlLnBhdGg7XG4gICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXIubm90ZSA9IGZpbGUuYmFzZW5hbWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRoaXMucmVnaXN0ZXJFdmVudChcbiAgICAgICAgICAgICAgICB0aGlzLmFwcC52YXVsdC5vbihcImRlbGV0ZVwiLCAoZmlsZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIShmaWxlIGluc3RhbmNlb2YgVEZpbGUpKSByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBsYXllcnMgPSB0aGlzLmRhdGEucGxheWVycy5maWx0ZXIoXG4gICAgICAgICAgICAgICAgICAgICAgICAocCkgPT4gcC5wYXRoID09IGZpbGUucGF0aFxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXBsYXllcnMubGVuZ3RoKSByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgcGxheWVyIG9mIHBsYXllcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllci5wYXRoID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllci5ub3RlID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApO1xuICAgICAgICB9KTtcblxuICAgICAgICBjb25zb2xlLmxvZyhcIkluaXRpYXRpdmUgVHJhY2tlciB2XCIgKyB0aGlzLm1hbmlmZXN0LnZlcnNpb24gKyBcIiBsb2FkZWRcIik7XG4gICAgfVxuXG4gICAgYWRkQ29tbWFuZHMoKSB7XG4gICAgICAgIHRoaXMuYWRkQ29tbWFuZCh7XG4gICAgICAgICAgICBpZDogXCJvcGVuLXRyYWNrZXJcIixcbiAgICAgICAgICAgIG5hbWU6IFwiT3BlbiBJbml0aWF0aXZlIFRyYWNrZXJcIixcbiAgICAgICAgICAgIGNoZWNrQ2FsbGJhY2s6IChjaGVja2luZykgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy52aWV3KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghY2hlY2tpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkVHJhY2tlclZpZXcoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmFkZENvbW1hbmQoe1xuICAgICAgICAgICAgaWQ6IFwib3Blbi1idWlsZGVyXCIsXG4gICAgICAgICAgICBuYW1lOiBcIk9wZW4gRW5jb3VudGVyIEJ1aWxkZXJcIixcbiAgICAgICAgICAgIGNoZWNrQ2FsbGJhY2s6IChjaGVja2luZykgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5idWlsZGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghY2hlY2tpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkQnVpbGRlclZpZXcoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuYWRkQ29tbWFuZCh7XG4gICAgICAgICAgICBpZDogXCJ0b2dnbGUtZW5jb3VudGVyXCIsXG4gICAgICAgICAgICBuYW1lOiBcIlRvZ2dsZSBFbmNvdW50ZXJcIixcbiAgICAgICAgICAgIGNoZWNrQ2FsbGJhY2s6IChjaGVja2luZykgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHZpZXcgPSB0aGlzLnZpZXc7XG4gICAgICAgICAgICAgICAgaWYgKHZpZXcpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjaGVja2luZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJhY2tlci50b2dnbGVTdGF0ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5hZGRDb21tYW5kKHtcbiAgICAgICAgICAgIGlkOiBcIm5leHQtY29tYmF0YW50XCIsXG4gICAgICAgICAgICBuYW1lOiBcIk5leHQgQ29tYmF0YW50XCIsXG4gICAgICAgICAgICBjaGVja0NhbGxiYWNrOiAoY2hlY2tpbmcpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCB2aWV3ID0gdGhpcy52aWV3O1xuICAgICAgICAgICAgICAgIGlmICh2aWV3ICYmIHRyYWNrZXIuZ2V0U3RhdGUoKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWNoZWNraW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFja2VyLmdvVG9OZXh0KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmFkZENvbW1hbmQoe1xuICAgICAgICAgICAgaWQ6IFwicHJldi1jb21iYXRhbnRcIixcbiAgICAgICAgICAgIG5hbWU6IFwiUHJldmlvdXMgQ29tYmF0YW50XCIsXG4gICAgICAgICAgICBjaGVja0NhbGxiYWNrOiAoY2hlY2tpbmcpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCB2aWV3ID0gdGhpcy52aWV3O1xuICAgICAgICAgICAgICAgIGlmICh2aWV3ICYmIHRyYWNrZXIuZ2V0U3RhdGUoKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWNoZWNraW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFja2VyLmdvVG9QcmV2aW91cygpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgYWRkRXZlbnRzKCkge1xuICAgICAgICB0aGlzLnJlZ2lzdGVyRXZlbnQoXG4gICAgICAgICAgICB0aGlzLmFwcC53b3Jrc3BhY2Uub24oXG4gICAgICAgICAgICAgICAgXCJpbml0aWF0aXZlLXRyYWNrZXI6c2hvdWxkLXNhdmVcIixcbiAgICAgICAgICAgICAgICBhc3luYyAoKSA9PiBhd2FpdCB0aGlzLnNhdmVTZXR0aW5ncygpXG4gICAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMucmVnaXN0ZXJFdmVudChcbiAgICAgICAgICAgIGFwcC53b3Jrc3BhY2Uub24oXG4gICAgICAgICAgICAgICAgXCJpbml0aWF0aXZlLXRyYWNrZXI6c2F2ZS1zdGF0ZVwiLFxuICAgICAgICAgICAgICAgIGFzeW5jIChzdGF0ZTogSW5pdGlhdGl2ZVZpZXdTdGF0ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGEuc3RhdGUgPSBzdGF0ZTtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMucmVnaXN0ZXJFdmVudChcbiAgICAgICAgICAgIHRoaXMuYXBwLndvcmtzcGFjZS5vbihcbiAgICAgICAgICAgICAgICBcImluaXRpYXRpdmUtdHJhY2tlcjpzdGFydC1lbmNvdW50ZXJcIixcbiAgICAgICAgICAgICAgICBhc3luYyAoaG9tZWJyZXdzOiBIb21lYnJld0NyZWF0dXJlW10pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNyZWF0dXJlcyA9IGhvbWVicmV3cy5tYXAoKGgpID0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQ3JlYXR1cmUuZnJvbShoKS50b0pTT04oKVxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdmlldyA9IHRoaXMudmlldztcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdmlldykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuYWRkVHJhY2tlclZpZXcoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2aWV3KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhY2tlcj8ubmV3KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXR1cmVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdW5kOiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2dGaWxlOiBudWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hcHAud29ya3NwYWNlLnJldmVhbExlYWYodmlldy5sZWFmKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IE5vdGljZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJDb3VsZCBub3QgZmluZCB0aGUgSW5pdGlhdGl2ZSBUcmFja2VyLiBUcnkgcmVsb2FkaW5nIHRoZSBub3RlIVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IE5vdGljZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIlRoZXJlIHdhcyBhbiBpc3N1ZSBsYXVuY2hpbmcgdGhlIGVuY291bnRlci5cXG5cXG5cIiArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUubWVzc2FnZVxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgYXN5bmMgb251bmxvYWQoKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgIHRoaXMuYXBwLndvcmtzcGFjZS50cmlnZ2VyKFwiaW5pdGlhdGl2ZS10cmFja2VyOnVubG9hZFwiKTtcbiAgICAgICAgdGhpcy5hcHAud29ya3NwYWNlXG4gICAgICAgICAgICAuZ2V0TGVhdmVzT2ZUeXBlKElOVElBVElWRV9UUkFDS0VSX1ZJRVcpXG4gICAgICAgICAgICAuZm9yRWFjaCgobGVhZikgPT4gbGVhZi5kZXRhY2goKSk7XG4gICAgICAgIHRoaXMuYXBwLndvcmtzcGFjZVxuICAgICAgICAgICAgLmdldExlYXZlc09mVHlwZShDUkVBVFVSRV9UUkFDS0VSX1ZJRVcpXG4gICAgICAgICAgICAuZm9yRWFjaCgobGVhZikgPT4gbGVhZi5kZXRhY2goKSk7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiSW5pdGlhdGl2ZSBUcmFja2VyIHVubG9hZGVkXCIpO1xuICAgIH1cblxuICAgIGFzeW5jIGFkZFRyYWNrZXJWaWV3KCkge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgICB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0TGVhdmVzT2ZUeXBlKElOVElBVElWRV9UUkFDS0VSX1ZJRVcpPy5sZW5ndGhcbiAgICAgICAgKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgYXdhaXQgdGhpcy5hcHAud29ya3NwYWNlLmdldFJpZ2h0TGVhZihmYWxzZSkuc2V0Vmlld1N0YXRlKHtcbiAgICAgICAgICAgIHR5cGU6IElOVElBVElWRV9UUkFDS0VSX1ZJRVdcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGdldCBidWlsZGVyKCkge1xuICAgICAgICBjb25zdCBsZWF2ZXMgPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0TGVhdmVzT2ZUeXBlKEJVSUxERVJfVklFVyk7XG4gICAgICAgIGNvbnN0IGxlYWYgPSBsZWF2ZXMubGVuZ3RoID8gbGVhdmVzWzBdIDogbnVsbDtcbiAgICAgICAgaWYgKGxlYWYgJiYgbGVhZi52aWV3ICYmIGxlYWYudmlldyBpbnN0YW5jZW9mIEJ1aWxkZXJWaWV3KVxuICAgICAgICAgICAgcmV0dXJuIGxlYWYudmlldztcbiAgICB9XG4gICAgYXN5bmMgYWRkQnVpbGRlclZpZXcoKSB7XG4gICAgICAgIGlmICh0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0TGVhdmVzT2ZUeXBlKEJVSUxERVJfVklFVyk/Lmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGF3YWl0IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRMZWFmKHRydWUpLnNldFZpZXdTdGF0ZSh7XG4gICAgICAgICAgICB0eXBlOiBCVUlMREVSX1ZJRVdcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuYXBwLndvcmtzcGFjZS5yZXZlYWxMZWFmKHRoaXMuYnVpbGRlci5sZWFmKTtcbiAgICB9XG5cbiAgICBhc3luYyBzYXZlTW9uc3RlcnMoaW1wb3J0ZWRNb25zdGVyczogSG9tZWJyZXdDcmVhdHVyZVtdKSB7XG4gICAgICAgIHRoaXMuZGF0YS5ob21lYnJldy5wdXNoKC4uLmltcG9ydGVkTW9uc3RlcnMpO1xuXG4gICAgICAgIGZvciAobGV0IG1vbnN0ZXIgb2YgaW1wb3J0ZWRNb25zdGVycykge1xuICAgICAgICAgICAgdGhpcy5ob21lYnJld0NyZWF0dXJlcy5zZXQobW9uc3Rlci5uYW1lLCBDcmVhdHVyZS5mcm9tKG1vbnN0ZXIpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGF3YWl0IHRoaXMuc2F2ZVNldHRpbmdzKCk7XG4gICAgfVxuICAgIGFzeW5jIHNhdmVNb25zdGVyKG1vbnN0ZXI6IEhvbWVicmV3Q3JlYXR1cmUpIHtcbiAgICAgICAgdGhpcy5kYXRhLmhvbWVicmV3LnB1c2gobW9uc3Rlcik7XG4gICAgICAgIHRoaXMuaG9tZWJyZXdDcmVhdHVyZXMuc2V0KG1vbnN0ZXIubmFtZSwgQ3JlYXR1cmUuZnJvbShtb25zdGVyKSk7XG4gICAgICAgIGF3YWl0IHRoaXMuc2F2ZVNldHRpbmdzKCk7XG4gICAgfVxuICAgIGFzeW5jIHVwZGF0ZVBsYXllcihleGlzdGluZzogSG9tZWJyZXdDcmVhdHVyZSwgcGxheWVyOiBIb21lYnJld0NyZWF0dXJlKSB7XG4gICAgICAgIGlmICghdGhpcy5wbGF5ZXJDcmVhdHVyZXMuaGFzKGV4aXN0aW5nLm5hbWUpKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnNhdmVQbGF5ZXIocGxheWVyKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGNyZWF0dXJlID0gdGhpcy5wbGF5ZXJDcmVhdHVyZXMuZ2V0KGV4aXN0aW5nLm5hbWUpO1xuICAgICAgICBjcmVhdHVyZS51cGRhdGUocGxheWVyKTtcblxuICAgICAgICB0aGlzLmRhdGEucGxheWVycy5zcGxpY2UoXG4gICAgICAgICAgICB0aGlzLmRhdGEucGxheWVycy5pbmRleE9mKGV4aXN0aW5nKSxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICBwbGF5ZXJcbiAgICAgICAgKTtcblxuICAgICAgICB0aGlzLnBsYXllckNyZWF0dXJlcy5zZXQocGxheWVyLm5hbWUsIGNyZWF0dXJlKTtcbiAgICAgICAgdGhpcy5wbGF5ZXJDcmVhdHVyZXMuZGVsZXRlKGV4aXN0aW5nLm5hbWUpO1xuXG4gICAgICAgIGNvbnN0IHZpZXcgPSB0aGlzLnZpZXc7XG4gICAgICAgIGlmICh2aWV3KSB7XG4gICAgICAgICAgICB0cmFja2VyLnVwZGF0ZVN0YXRlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBhd2FpdCB0aGlzLnNhdmVTZXR0aW5ncygpO1xuICAgIH1cbiAgICBhc3luYyB1cGRhdGVNb25zdGVyKGV4aXN0aW5nOiBIb21lYnJld0NyZWF0dXJlLCBtb25zdGVyOiBIb21lYnJld0NyZWF0dXJlKSB7XG4gICAgICAgIGlmICghdGhpcy5ob21lYnJld0NyZWF0dXJlcy5oYXMoZXhpc3RpbmcubmFtZSkpIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuc2F2ZU1vbnN0ZXIobW9uc3Rlcik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBjcmVhdHVyZSA9IHRoaXMuaG9tZWJyZXdDcmVhdHVyZXMuZ2V0KGV4aXN0aW5nLm5hbWUpO1xuICAgICAgICBjcmVhdHVyZS51cGRhdGUobW9uc3Rlcik7XG5cbiAgICAgICAgdGhpcy5kYXRhLmhvbWVicmV3LnNwbGljZShcbiAgICAgICAgICAgIHRoaXMuZGF0YS5ob21lYnJldy5pbmRleE9mKGV4aXN0aW5nKSxcbiAgICAgICAgICAgIDEsXG4gICAgICAgICAgICBtb25zdGVyXG4gICAgICAgICk7XG5cbiAgICAgICAgdGhpcy5ob21lYnJld0NyZWF0dXJlcy5zZXQobW9uc3Rlci5uYW1lLCBjcmVhdHVyZSk7XG4gICAgICAgIHRoaXMuaG9tZWJyZXdDcmVhdHVyZXMuZGVsZXRlKGV4aXN0aW5nLm5hbWUpO1xuXG4gICAgICAgIGNvbnN0IHZpZXcgPSB0aGlzLnZpZXc7XG4gICAgICAgIGlmICh2aWV3KSB7XG4gICAgICAgICAgICB0cmFja2VyLnVwZGF0ZVN0YXRlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBhd2FpdCB0aGlzLnNhdmVTZXR0aW5ncygpO1xuICAgIH1cbiAgICBhc3luYyBkZWxldGVNb25zdGVyKG1vbnN0ZXI6IEhvbWVicmV3Q3JlYXR1cmUpIHtcbiAgICAgICAgdGhpcy5kYXRhLmhvbWVicmV3ID0gdGhpcy5kYXRhLmhvbWVicmV3LmZpbHRlcigobSkgPT4gbSAhPSBtb25zdGVyKTtcbiAgICAgICAgdGhpcy5ob21lYnJld0NyZWF0dXJlcy5kZWxldGUobW9uc3Rlci5uYW1lKTtcblxuICAgICAgICBhd2FpdCB0aGlzLnNhdmVTZXR0aW5ncygpO1xuICAgIH1cblxuICAgIGFzeW5jIHNhdmVQbGF5ZXIocGxheWVyOiBIb21lYnJld0NyZWF0dXJlKSB7XG4gICAgICAgIHRoaXMuZGF0YS5wbGF5ZXJzLnB1c2gocGxheWVyKTtcbiAgICAgICAgdGhpcy5wbGF5ZXJDcmVhdHVyZXMuc2V0KHBsYXllci5uYW1lLCBDcmVhdHVyZS5mcm9tKHBsYXllcikpO1xuICAgICAgICBhd2FpdCB0aGlzLnNhdmVTZXR0aW5ncygpO1xuICAgIH1cbiAgICBhc3luYyBzYXZlUGxheWVycyguLi5wbGF5ZXJzOiBIb21lYnJld0NyZWF0dXJlW10pIHtcbiAgICAgICAgZm9yIChsZXQgbW9uc3RlciBvZiBwbGF5ZXJzKSB7XG4gICAgICAgICAgICB0aGlzLmRhdGEucGxheWVycy5wdXNoKG1vbnN0ZXIpO1xuICAgICAgICAgICAgdGhpcy5wbGF5ZXJDcmVhdHVyZXMuc2V0KG1vbnN0ZXIubmFtZSwgQ3JlYXR1cmUuZnJvbShtb25zdGVyKSk7XG4gICAgICAgIH1cbiAgICAgICAgYXdhaXQgdGhpcy5zYXZlU2V0dGluZ3MoKTtcbiAgICB9XG5cbiAgICBhc3luYyBkZWxldGVQbGF5ZXIocGxheWVyOiBIb21lYnJld0NyZWF0dXJlKSB7XG4gICAgICAgIHRoaXMuZGF0YS5wbGF5ZXJzID0gdGhpcy5kYXRhLnBsYXllcnMuZmlsdGVyKChwKSA9PiBwICE9IHBsYXllcik7XG4gICAgICAgIHRoaXMucGxheWVyQ3JlYXR1cmVzLmRlbGV0ZShwbGF5ZXIubmFtZSk7XG4gICAgICAgIGF3YWl0IHRoaXMuc2F2ZVNldHRpbmdzKCk7XG4gICAgfVxuXG4gICAgYXN5bmMgbG9hZFNldHRpbmdzKCkge1xuICAgICAgICBjb25zdCBkYXRhID0gT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICAgIHt9LFxuICAgICAgICAgICAgeyAuLi5ERUZBVUxUX1NFVFRJTkdTIH0sXG4gICAgICAgICAgICBhd2FpdCB0aGlzLmxvYWREYXRhKClcbiAgICAgICAgKTtcblxuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgICB0aGlzLmRhdGEubGVhZmxldEludGVncmF0aW9uICYmXG4gICAgICAgICAgICAhdGhpcy5kYXRhLnBsYXllcnMuZXZlcnkoKHApID0+IHAubWFya2VyKVxuICAgICAgICApIHtcbiAgICAgICAgICAgIHRoaXMuZGF0YS5wbGF5ZXJzID0gdGhpcy5kYXRhLnBsYXllcnMubWFwKChwKSA9PiB7XG4gICAgICAgICAgICAgICAgcC5tYXJrZXIgPSBwLm1hcmtlciA/PyB0aGlzLmRhdGEucGxheWVyTWFya2VyO1xuICAgICAgICAgICAgICAgIHJldHVybiBwO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhc3luYyBzYXZlU2V0dGluZ3MoKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIHRoaXMuZGF0YS5sZWFmbGV0SW50ZWdyYXRpb24gJiZcbiAgICAgICAgICAgICF0aGlzLmRhdGEucGxheWVycy5ldmVyeSgocCkgPT4gcC5tYXJrZXIpXG4gICAgICAgICkge1xuICAgICAgICAgICAgdGhpcy5kYXRhLnBsYXllcnMgPSB0aGlzLmRhdGEucGxheWVycy5tYXAoKHApID0+IHtcbiAgICAgICAgICAgICAgICBwLm1hcmtlciA9IHAubWFya2VyID8/IHRoaXMuZGF0YS5wbGF5ZXJNYXJrZXI7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHA7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGF3YWl0IHRoaXMuc2F2ZURhdGEodGhpcy5kYXRhKTtcbiAgICAgICAgdHJhY2tlci5zZXREYXRhKHRoaXMuZGF0YSk7XG4gICAgfVxuICAgIGFzeW5jIG9wZW5Db21iYXRhbnQoY3JlYXR1cmU6IENyZWF0dXJlKSB7XG4gICAgICAgIGlmICghdGhpcy5jYW5Vc2VTdGF0QmxvY2tzKSByZXR1cm47XG4gICAgICAgIGNvbnN0IHZpZXcgPSB0aGlzLmNvbWJhdGFudDtcbiAgICAgICAgaWYgKCF2aWV3KSB7XG4gICAgICAgICAgICBjb25zdCBsZWFmID0gdGhpcy5hcHAud29ya3NwYWNlLmdldFJpZ2h0TGVhZih0cnVlKTtcbiAgICAgICAgICAgIGF3YWl0IGxlYWYuc2V0Vmlld1N0YXRlKHtcbiAgICAgICAgICAgICAgICB0eXBlOiBDUkVBVFVSRV9UUkFDS0VSX1ZJRVdcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jb21iYXRhbnQucmVuZGVyKGNyZWF0dXJlKTtcbiAgICB9XG59XG4iLCAiaW1wb3J0IHR5cGUgeyBJbml0aWF0aXZlVHJhY2tlckRhdGEgfSBmcm9tIFwiQHR5cGVzXCI7XG5pbXBvcnQgeyBQbGF0Zm9ybSB9IGZyb20gXCJvYnNpZGlhblwiO1xuaW1wb3J0IHsgQ29uZGl0aW9ucyB9IGZyb20gXCIuL2NvbmRpdGlvbnNcIjtcblxuZXhwb3J0IGNvbnN0IElOVElBVElWRV9UUkFDS0VSX1ZJRVcgPSBcImluaXRpYXRpdmUtdHJhY2tlci12aWV3XCI7XG5leHBvcnQgY29uc3QgUExBWUVSX1ZJRVdfVklFVyA9IFwiaW5pdGlhdGl2ZS10cmFja2VyLXBsYXllci12aWV3XCI7XG5leHBvcnQgY29uc3QgQ1JFQVRVUkVfVFJBQ0tFUl9WSUVXID0gXCJpbml0aWF0aXZlLXRyYWNrZXItY3JlYXR1cmUtdmlld1wiO1xuXG5leHBvcnQgY29uc3QgTUlOX1dJRFRIX0ZPUl9IQU1CVVJHRVIgPSAzMDA7XG5cbmV4cG9ydCBjb25zdCBERUZBVUxUX1VOREVGSU5FRCA9IFwiXHUyMDEzXCI7XG5cbmV4cG9ydCBjb25zdCBNRVRBX01PRElGSUVSID0gUGxhdGZvcm0uaXNNYWNPUyA/IFwiTWV0YVwiIDogXCJDb250cm9sXCI7XG5cbmV4cG9ydCBjb25zdCBERUZBVUxUX1NFVFRJTkdTOiBJbml0aWF0aXZlVHJhY2tlckRhdGEgPSB7XG4gICAgcGxheWVyczogW10sXG4gICAgcGFydGllczogW10sXG4gICAgZGVmYXVsdFBhcnR5OiBudWxsLFxuICAgIGhvbWVicmV3OiBbXSxcbiAgICBzdGF0dXNlczogWy4uLkNvbmRpdGlvbnNdLFxuICAgIHZlcnNpb246IG51bGwsXG4gICAgY2FuVXNlRGljZVJvbGw6IGZhbHNlLFxuICAgIGluaXRpYXRpdmU6IFwiMWQyMCArICVtb2QlXCIsXG4gICAgbW9kaWZpZXI6IG51bGwsXG4gICAgc3luYzogZmFsc2UsXG4gICAgbGVhZmxldEludGVncmF0aW9uOiBmYWxzZSxcbiAgICBwbGF5ZXJNYXJrZXI6IFwiZGVmYXVsdFwiLFxuICAgIG1vbnN0ZXJNYXJrZXI6IFwiZGVmYXVsdFwiLFxuICAgIHN0YXRlOiB7XG4gICAgICAgIGNyZWF0dXJlczogW10sXG4gICAgICAgIHN0YXRlOiBmYWxzZSxcbiAgICAgICAgbmFtZTogbnVsbCxcbiAgICAgICAgcm91bmQ6IG51bGwsXG4gICAgICAgIGxvZ0ZpbGU6IG51bGxcbiAgICB9LFxuICAgIGNvbmRlbnNlOiBmYWxzZSxcbiAgICBjbGFtcDogdHJ1ZSxcbiAgICBhdXRvU3RhdHVzOiB0cnVlLFxuICAgIGJlZ2lubmVyVGlwczogdHJ1ZSxcbiAgICBkaXNwbGF5RGlmZmljdWx0eTogdHJ1ZSxcbiAgICBlbmNvdW50ZXJzOiB7fSxcbiAgICB3YXJuZWRBYm91dEltcG9ydHM6IGZhbHNlLFxuICAgIG9wZW5TdGF0ZToge1xuICAgICAgICBiYXR0bGU6IHRydWUsXG4gICAgICAgIHBhcnR5OiB0cnVlLFxuICAgICAgICBzdGF0dXM6IHRydWUsXG4gICAgICAgIHBsdWdpbjogdHJ1ZSxcbiAgICAgICAgcGxheWVyOiB0cnVlXG4gICAgfSxcbiAgICBocE92ZXJmbG93OiBcImlnbm9yZVwiLFxuICAgIGFkZGl0aXZlVGVtcDogZmFsc2UsXG4gICAgbG9nZ2luZzogZmFsc2UsXG4gICAgbG9nRm9sZGVyOiBcIi9cIixcbiAgICB1c2VMZWdhY3k6IGZhbHNlXG59O1xuXG5leHBvcnQgY29uc3QgWFBfUEVSX0NSOiBSZWNvcmQ8c3RyaW5nLCBudW1iZXI+ID0ge1xuICAgIFwiMFwiOiAwLFxuICAgIFwiMS84XCI6IDI1LFxuICAgIFwiMS80XCI6IDUwLFxuICAgIFwiMS8yXCI6IDEwMCxcbiAgICBcIjFcIjogMjAwLFxuICAgIFwiMlwiOiA0NTAsXG4gICAgXCIzXCI6IDcwMCxcbiAgICBcIjRcIjogMTEwMCxcbiAgICBcIjVcIjogMTgwMCxcbiAgICBcIjZcIjogMjMwMCxcbiAgICBcIjdcIjogMjkwMCxcbiAgICBcIjhcIjogMzkwMCxcbiAgICBcIjlcIjogNTAwMCxcbiAgICBcIjEwXCI6IDU5MDAsXG4gICAgXCIxMVwiOiA3MjAwLFxuICAgIFwiMTJcIjogODQwMCxcbiAgICBcIjEzXCI6IDEwMDAwLFxuICAgIFwiMTRcIjogMTE1MDAsXG4gICAgXCIxNVwiOiAxMzAwMCxcbiAgICBcIjE2XCI6IDE1MDAwLFxuICAgIFwiMTdcIjogMTgwMDAsXG4gICAgXCIxOFwiOiAyMDAwMCxcbiAgICBcIjE5XCI6IDIyMDAwLFxuICAgIFwiMjBcIjogMjUwMDAsXG4gICAgXCIyMVwiOiAzMzAwMCxcbiAgICBcIjIyXCI6IDQxMDAwLFxuICAgIFwiMjNcIjogNTAwMDAsXG4gICAgXCIyNFwiOiA2MjAwMCxcbiAgICBcIjI1XCI6IDc1MDAwLFxuICAgIFwiMjZcIjogOTAwMDAsXG4gICAgXCIyN1wiOiAxMDUwMDAsXG4gICAgXCIyOFwiOiAxMjAwMDAsXG4gICAgXCIyOVwiOiAxMzUwMDAsXG4gICAgXCIzMFwiOiAxNTUwMDBcbn07XG5cbmV4cG9ydCBjb25zdCBPVkVSRkxPV19UWVBFOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9ID0ge1xuICAgIGlnbm9yZTogXCJpZ25vcmVcIixcbiAgICBjdXJyZW50OiBcImN1cnJlbnRcIixcbiAgICB0ZW1wOiBcInRlbXBcIlxufTtcbiIsICJpbXBvcnQgdHlwZSB7IENvbmRpdGlvbiB9IGZyb20gXCIuLi8uLi9AdHlwZXNcIjtcblxuZXhwb3J0IGNvbnN0IENvbmRpdGlvbnM6IENvbmRpdGlvbltdID0gW1xuICAgIHtcbiAgICAgICAgbmFtZTogXCJCbGluZGVkXCIsXG4gICAgICAgIGRlc2NyaXB0aW9uOlxuICAgICAgICAgICAgXCJBIGJsaW5kZWQgY3JlYXR1cmUgY2FuXHUyMDE5dCBzZWUgYW5kIGF1dG9tYXRpY2FsbHkgZmFpbHMgYW55IGFiaWxpdHkgY2hlY2sgdGhhdCByZXF1aXJlcyBzaWdodC5cXG5BdHRhY2sgcm9sbHMgYWdhaW5zdCB0aGUgY3JlYXR1cmUgaGF2ZSBhZHZhbnRhZ2UsIGFuZCB0aGUgY3JlYXR1cmVcdTIwMTlzIEF0dGFjayByb2xscyBoYXZlIGRpc2FkdmFudGFnZS5cIlxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIkNoYXJtZWRcIixcbiAgICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgICAgICBcIkEgY2hhcm1lZCBjcmVhdHVyZSBjYW5cdTIwMTl0IEF0dGFjayB0aGUgY2hhcm1lciBvciB0YXJnZXQgdGhlIGNoYXJtZXIgd2l0aCBoYXJtZnVsIEFiaWxpdGllcyBvciBtYWdpY2FsIEVmZmVjdHMuXFxuVGhlIGNoYXJtZXIgaGFzIGFkdmFudGFnZSBvbiBhbnkgYWJpbGl0eSBjaGVjayB0byBpbnRlcmFjdCBzb2NpYWxseSB3aXRoIHRoZSBjcmVhdHVyZS5cIlxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIkNvbmNlbnRyYXRpbmdcIixcbiAgICAgICAgZGVzY3JpcHRpb246XG4gICAgICAgICAgICBcIlNvbWUgc3BlbGxzIHJlcXVpcmUgeW91IHRvIG1haW50YWluIGNvbmNlbnRyYXRpb24gaW4gb3JkZXIgdG8ga2VlcCB0aGVpciBtYWdpYyBhY3RpdmUuIElmIHlvdSBsb3NlIGNvbmNlbnRyYXRpb24sIHN1Y2ggYSBzcGVsbCBlbmRzLlxcbkEgY3JlYXR1cmUgbG9zZXMgY29uY2VudHJhdGlvbiB3aGVuOiBpdCBjYXN0cyBhbm90aGVyIHNwZWxsIHRoYXQgcmVxdWlyZXMgY29uY2VudHJhdGlvbiwgaXMgaW5jYXBhY2l0YXRlZCwgb3IgZGllcy5cXG5XaGVuIGEgY3JlYXR1cmUgdGFrZXMgZGFtYWdlLCBpdCBtdXN0IG1ha2UgYSBjb25zdGl0dXRpb24gc2F2aW5nIHRocm93IHdpdGggYSBEQyBvZiAxMCBvciBoYWxmIHRoZSBkYW1hZ2UgaXQgdG9vaywgd2hpY2hldmVyIGlzIGhpZ2hlci4gT24gYSBmYWlsdXJlLCBjb25jZW50cmF0aW9uIGlzIGxvc3QuXCJcbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJEZWFmZW5lZFwiLFxuICAgICAgICBkZXNjcmlwdGlvbjpcbiAgICAgICAgICAgIFwiQSBkZWFmZW5lZCBjcmVhdHVyZSBjYW5cdTIwMTl0IGhlYXIgYW5kIGF1dG9tYXRpY2FsbHkgZmFpbHMgYW55IGFiaWxpdHkgY2hlY2sgdGhhdCByZXF1aXJlcyBoZWFyaW5nLlwiXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiRnJpZ2h0ZW5lZFwiLFxuICAgICAgICBkZXNjcmlwdGlvbjogXG4gICAgICAgICAgICBcIkEgZnJpZ2h0ZW5lZCBjcmVhdHVyZSBoYXMgZGlzYWR2YW50YWdlIG9uIEFiaWxpdHkgQ2hlY2tzIGFuZCBBdHRhY2sgcm9sbHMgd2hpbGUgdGhlIHNvdXJjZSBvZiBpdHMgZmVhciBpcyB3aXRoaW4gTGluZSBvZiBTaWdodC5cXG5UaGUgY3JlYXR1cmUgY2FuXHUyMDE5dCB3aWxsaW5nbHkgbW92ZSBjbG9zZXIgdG8gdGhlIHNvdXJjZSBvZiBpdHMgZmVhci5cIlxuICAgICAgICBcbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJHcmFwcGxlZFwiLFxuICAgICAgICBkZXNjcmlwdGlvbjogXG4gICAgICAgICAgICBcIkEgZ3JhcHBsZWQgY3JlYXR1cmVcdTIwMTlzIHNwZWVkIGJlY29tZXMgMCwgYW5kIGl0IGNhblx1MjAxOXQgYmVuZWZpdCBmcm9tIGFueSBib251cyB0byBpdHMgc3BlZWQuXFxuVGhlIGNvbmRpdGlvbiBlbmRzIGlmIHRoZSBHcmFwcGxlciBpcyBpbmNhcGFjaXRhdGVkLlxcblRoZSBjb25kaXRpb24gYWxzbyBlbmRzIGlmIGFuIEVmZmVjdCByZW1vdmVzIHRoZSBncmFwcGxlZCBjcmVhdHVyZSBmcm9tIHRoZSByZWFjaCBvZiB0aGUgR3JhcHBsZXIgb3IgR3JhcHBsaW5nIEVmZmVjdCwgc3VjaCBhcyB3aGVuIGEgY3JlYXR1cmUgaXMgaHVybGVkIGF3YXkgYnkgdGhlIFRodW5kZXJ3YXZlIHNwZWxsLlwiXG4gICAgICAgIFxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIkluY2FwYWNpdGF0ZWRcIixcbiAgICAgICAgZGVzY3JpcHRpb246IFxuICAgICAgICAgICAgXCJBbiBpbmNhcGFjaXRhdGVkIGNyZWF0dXJlIGNhblx1MjAxOXQgdGFrZSBBY3Rpb25zIG9yIFJlYWN0aW9ucy5cIlxuICAgICAgICBcbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJJbnZpc2libGVcIixcbiAgICAgICAgZGVzY3JpcHRpb246IFxuICAgICAgICAgICAgXCJBbiBpbnZpc2libGUgY3JlYXR1cmUgaXMgaW1wb3NzaWJsZSB0byBzZWUgd2l0aG91dCB0aGUgYWlkIG9mIG1hZ2ljIG9yIGEgU3BlY2lhbCBzZW5zZS4gRm9yIHRoZSBQdXJwb3NlIG9mIEhpZGluZywgdGhlIGNyZWF0dXJlIGlzIGhlYXZpbHkgb2JzY3VyZWQuIFRoZSBjcmVhdHVyZVx1MjAxOXMgTG9jYXRpb24gY2FuIGJlIGRldGVjdGVkIGJ5IGFueSBub2lzZSBpdCBtYWtlcyBvciBhbnkgdHJhY2tzIGl0IGxlYXZlcy5cXG5BdHRhY2sgcm9sbHMgYWdhaW5zdCB0aGUgY3JlYXR1cmUgaGF2ZSBkaXNhZHZhbnRhZ2UsIGFuZCB0aGUgY3JlYXR1cmVcdTIwMTlzIEF0dGFjayByb2xscyBoYXZlIGFkdmFudGFnZS5cIlxuICAgICAgICBcbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJQYXJhbHl6ZWRcIixcbiAgICAgICAgZGVzY3JpcHRpb246IFxuICAgICAgICAgICAgXCJBIHBhcmFseXplZCBjcmVhdHVyZSBpcyBpbmNhcGFjaXRhdGVkIGFuZCBjYW5cdTIwMTl0IG1vdmUgb3Igc3BlYWsuXFxuVGhlIGNyZWF0dXJlIGF1dG9tYXRpY2FsbHkgZmFpbHMgU3RyZW5ndGggYW5kIERleHRlcml0eSBTYXZpbmcgVGhyb3dzLlxcbkF0dGFjayByb2xscyBhZ2FpbnN0IHRoZSBjcmVhdHVyZSBoYXZlIGFkdmFudGFnZS5cXG5BbnkgQXR0YWNrIHRoYXQgaGl0cyB0aGUgY3JlYXR1cmUgaXMgYSBjcml0aWNhbCBoaXQgaWYgdGhlIGF0dGFja2VyIGlzIHdpdGhpbiA1IGZlZXQgb2YgdGhlIGNyZWF0dXJlLlwiXG4gICAgICAgIFxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIlBldHJpZmllZFwiLFxuICAgICAgICBkZXNjcmlwdGlvbjogXG4gICAgICAgICAgICBcIkEgcGV0cmlmaWVkIGNyZWF0dXJlIGlzIHRyYW5zZm9ybWVkLCBhbG9uZyB3aXRoIGFueSBub25tYWdpY2FsIG9iamVjdCBpdCBpcyB3ZWFyaW5nIG9yIGNhcnJ5aW5nLCBpbnRvIGEgc29saWQgaW5hbmltYXRlIHN1YnN0YW5jZSAodXN1YWxseSBzdG9uZSkuIEl0cyB3ZWlnaHQgaW5jcmVhc2VzIGJ5IGEgZmFjdG9yIG9mIHRlbiwgYW5kIGl0IGNlYXNlcyBhZ2luZy5cXG5UaGUgY3JlYXR1cmUgaXMgaW5jYXBhY2l0YXRlZCwgY2FuXHUyMDE5dCBtb3ZlIG9yIHNwZWFrLCBhbmQgaXMgdW5hd2FyZSBvZiBpdHMgc3Vycm91bmRpbmdzLlxcbkF0dGFjayByb2xscyBhZ2FpbnN0IHRoZSBjcmVhdHVyZSBoYXZlIGFkdmFudGFnZS5cXG5UaGUgY3JlYXR1cmUgYXV0b21hdGljYWxseSBmYWlscyBTdHJlbmd0aCBhbmQgRGV4dGVyaXR5IFNhdmluZyBUaHJvd3MuXFxuVGhlIGNyZWF0dXJlIGhhcyBSZXNpc3RhbmNlIHRvIGFsbCBkYW1hZ2UuXFxuVGhlIGNyZWF0dXJlIGlzIGltbXVuZSB0byBwb2lzb24gYW5kIGRpc2Vhc2UsIGFsdGhvdWdoIGEgcG9pc29uIG9yIGRpc2Vhc2UgYWxyZWFkeSBpbiBpdHMgc3lzdGVtIGlzIHN1c3BlbmRlZCwgbm90IG5ldXRyYWxpemVkLlwiXG4gICAgICAgIFxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIlBvaXNvbmVkXCIsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBcbiAgICAgICAgICAgIFwiQSBwb2lzb25lZCBjcmVhdHVyZSBoYXMgZGlzYWR2YW50YWdlIG9uIEF0dGFjayByb2xscyBhbmQgQWJpbGl0eSBDaGVja3MuXCJcbiAgICAgICAgXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiUHJvbmVcIixcbiAgICAgICAgZGVzY3JpcHRpb246IFxuICAgICAgICAgICAgXCJBIHByb25lIGNyZWF0dXJlXHUyMDE5cyBvbmx5IE1vdmVtZW50IG9wdGlvbiBpcyB0byBjcmF3bCwgdW5sZXNzIGl0IHN0YW5kcyB1cCBhbmQgdGhlcmVieSBlbmRzIHRoZSBjb25kaXRpb24uXFxuVGhlIGNyZWF0dXJlIGhhcyBkaXNhZHZhbnRhZ2Ugb24gQXR0YWNrIHJvbGxzLlxcbkFuIEF0dGFjayByb2xsIGFnYWluc3QgdGhlIGNyZWF0dXJlIGhhcyBhZHZhbnRhZ2UgaWYgdGhlIGF0dGFja2VyIGlzIHdpdGhpbiA1IGZlZXQgb2YgdGhlIGNyZWF0dXJlLiBPdGhlcndpc2UsIHRoZSBBdHRhY2sgcm9sbCBoYXMgZGlzYWR2YW50YWdlLlwiXG4gICAgICAgIFxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIlJlYWN0ZWRcIixcbiAgICAgICAgZGVzY3JpcHRpb246IFxuICAgICAgICAgICAgXCJBIGNyZWF0dXJlLCB1bmxlc3Mgb3RoZXJ3aXNlIHNwZWNpZmllZCwgZ2V0cyBvbmUgcmVhY3Rpb24gcGVyIHJvdW5kIG9mIGNvbWJhdC5cXG5BIHJlYWN0aW9uIGlzIGFuIGluc3RhbnQgcmVzcG9uc2UgdG8gYSB0cmlnZ2VyIG9mIHNvbWUga2luZCwgd2hpY2ggY2FuIG9jY3VyIG9uIHlvdXIgdHVybiBvciBvbiBzb21lb25lIGVsc2VcdTIwMTlzLlxcbkEgcmVhY3Rpb24gY2FuIGJlIHNwZW50IHRvIG1ha2UgYW4gb3Bwb3J0dW5pdHkgYXR0YWNrLCBkbyBhIHJlYWRpZWQgYWN0aW9uLCBvciB1c2UgYW4gYWJpbGl0eSB0aGF0IHJlcXVpcmVzIGEgcmVhY3Rpb24uXFxuQSBjcmVhdHVyZSB0aGF0IGhhcyBhbHJlYWR5IHJlYWN0ZWQgY2Fubm90IHVzZSBhIHJlYWN0aW9uIHVudGlsIHRoZSBzdGFydCBvZiBpdHMgdHVybi5cIlxuICAgICAgICBcbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJSZXN0cmFpbmVkXCIsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBcbiAgICAgICAgICAgIFwiQSByZXN0cmFpbmVkIGNyZWF0dXJlXHUyMDE5cyBzcGVlZCBiZWNvbWVzIDAsIGFuZCBpdCBjYW5cdTIwMTl0IGJlbmVmaXQgZnJvbSBhbnkgYm9udXMgdG8gaXRzIHNwZWVkLlxcbkF0dGFjayByb2xscyBhZ2FpbnN0IHRoZSBjcmVhdHVyZSBoYXZlIGFkdmFudGFnZSwgYW5kIHRoZSBjcmVhdHVyZVx1MjAxOXMgQXR0YWNrIHJvbGxzIGhhdmUgZGlzYWR2YW50YWdlLlxcblRoZSBjcmVhdHVyZSBoYXMgZGlzYWR2YW50YWdlIG9uIERleHRlcml0eSBTYXZpbmcgVGhyb3dzLlwiXG4gICAgICAgIFxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIlN0dW5uZWRcIixcbiAgICAgICAgZGVzY3JpcHRpb246IFxuICAgICAgICAgICAgXCJBIHN0dW5uZWQgY3JlYXR1cmUgaXMgaW5jYXBhY2l0YXRlZCwgY2FuXHUyMDE5dCBtb3ZlLCBhbmQgY2FuIHNwZWFrIG9ubHkgZmFsdGVyaW5nbHkuXFxuVGhlIGNyZWF0dXJlIGF1dG9tYXRpY2FsbHkgZmFpbHMgU3RyZW5ndGggYW5kIERleHRlcml0eSBTYXZpbmcgVGhyb3dzLlxcbkF0dGFjayByb2xscyBhZ2FpbnN0IHRoZSBjcmVhdHVyZSBoYXZlIGFkdmFudGFnZS5cIlxuICAgICAgICBcbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJVbmNvbnNjaW91c1wiLFxuICAgICAgICBkZXNjcmlwdGlvbjogXG4gICAgICAgICAgICBcIkFuIHVuY29uc2Npb3VzIGNyZWF0dXJlIGlzIGluY2FwYWNpdGF0ZWQsIGNhblx1MjAxOXQgbW92ZSBvciBzcGVhaywgYW5kIGlzIHVuYXdhcmUgb2YgaXRzIHN1cnJvdW5kaW5ncy5cXG5UaGUgY3JlYXR1cmUgZHJvcHMgd2hhdGV2ZXIgaXRcdTIwMTlzIGhvbGRpbmcgYW5kIGZhbGxzIHByb25lLlxcblRoZSBjcmVhdHVyZSBhdXRvbWF0aWNhbGx5IGZhaWxzIFN0cmVuZ3RoIGFuZCBEZXh0ZXJpdHkgU2F2aW5nIFRocm93cy5cXG5BdHRhY2sgcm9sbHMgYWdhaW5zdCB0aGUgY3JlYXR1cmUgaGF2ZSBhZHZhbnRhZ2UuXFxuQW55IEF0dGFjayB0aGF0IGhpdHMgdGhlIGNyZWF0dXJlIGlzIGEgY3JpdGljYWwgaGl0IGlmIHRoZSBhdHRhY2tlciBpcyB3aXRoaW4gNSBmZWV0IG9mIHRoZSBjcmVhdHVyZS5cIlxuICAgICAgICBcbiAgICB9XG5dO1xuIiwgImltcG9ydCB7IGFkZEljb24gfSBmcm9tIFwib2JzaWRpYW5cIjtcblxuZXhwb3J0IGZ1bmN0aW9uIHJlZ2lzdGVySWNvbnMoKSB7XG4gICAgYWRkSWNvbihCQVNFLCBJQ09OKTtcblxuICAgIGFkZEljb24oU0FWRSwgU0FWRV9JQ09OKTtcbiAgICBhZGRJY29uKEFERCwgQUREX0lDT04pO1xuICAgIGFkZEljb24oUkVTVEFSVCwgUkVTVEFSVF9JQ09OKTtcbiAgICBhZGRJY29uKFBMQVksIFBMQVlfSUNPTik7XG4gICAgYWRkSWNvbihGT1JXQVJELCBGT1JXQVJEX0lDT04pO1xuICAgIGFkZEljb24oQkFDS1dBUkQsIEJBQ0tXQVJEX0lDT04pO1xuICAgIGFkZEljb24oU1RPUCwgU1RPUF9JQ09OKTtcbiAgICBhZGRJY29uKEdSSVAsIEdSSVBfSUNPTik7XG4gICAgYWRkSWNvbihIUCwgSFBfSUNPTik7XG4gICAgYWRkSWNvbihBQywgQUNfSUNPTik7XG4gICAgYWRkSWNvbihIQU1CVVJHRVIsIEhBTUJVUkdFUl9JQ09OKTtcbiAgICBhZGRJY29uKEVOQUJMRSwgRU5BQkxFX0lDT04pO1xuICAgIGFkZEljb24oRElTQUJMRSwgRElTQUJMRV9JQ09OKTtcbiAgICBhZGRJY29uKFRBRywgVEFHX0lDT04pO1xuICAgIGFkZEljb24oRURJVCwgRURJVF9JQ09OKTtcbiAgICBhZGRJY29uKElOSVRJQVRJVkUsIElOSVRJQVRJVkVfSUNPTik7XG4gICAgYWRkSWNvbihSRURPLCBSRURPX0lDT04pO1xuICAgIGFkZEljb24oTkVXLCBORVdfSUNPTik7XG4gICAgYWRkSWNvbihESUNFLCBESUNFX0lDT04pO1xuICAgIGFkZEljb24oU1RBUlRfRU5DT1VOVEVSLCBTVEFSVF9FTkNPVU5URVJfSUNPTik7XG4gICAgYWRkSWNvbihNQVAsIE1BUF9JQ09OKTtcbiAgICBhZGRJY29uKENPUFksIENPUFlfSUNPTik7XG4gICAgYWRkSWNvbihcbiAgICAgICAgR1JPVVAsXG4gICAgICAgIGA8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiBhcmlhLWhpZGRlbj1cInRydWVcIiBmb2N1c2FibGU9XCJmYWxzZVwiIGRhdGEtcHJlZml4PVwiZmFzXCIgZGF0YS1pY29uPVwidXNlcnNcIiBjbGFzcz1cInN2Zy1pbmxpbmUtLWZhIGZhLXVzZXJzIGZhLXctMjBcIiByb2xlPVwiaW1nXCIgdmlld0JveD1cIjAgMCA2NDAgNTEyXCI+PHBhdGggZmlsbD1cImN1cnJlbnRDb2xvclwiIGQ9XCJNOTYgMjI0YzM1LjMgMCA2NC0yOC43IDY0LTY0cy0yOC43LTY0LTY0LTY0LTY0IDI4LjctNjQgNjQgMjguNyA2NCA2NCA2NHptNDQ4IDBjMzUuMyAwIDY0LTI4LjcgNjQtNjRzLTI4LjctNjQtNjQtNjQtNjQgMjguNy02NCA2NCAyOC43IDY0IDY0IDY0em0zMiAzMmgtNjRjLTE3LjYgMC0zMy41IDcuMS00NS4xIDE4LjYgNDAuMyAyMi4xIDY4LjkgNjIgNzUuMSAxMDkuNGg2NmMxNy43IDAgMzItMTQuMyAzMi0zMnYtMzJjMC0zNS4zLTI4LjctNjQtNjQtNjR6bS0yNTYgMGM2MS45IDAgMTEyLTUwLjEgMTEyLTExMlMzODEuOSAzMiAzMjAgMzIgMjA4IDgyLjEgMjA4IDE0NHM1MC4xIDExMiAxMTIgMTEyem03Ni44IDMyaC04LjNjLTIwLjggMTAtNDMuOSAxNi02OC41IDE2cy00Ny42LTYtNjguNS0xNmgtOC4zQzE3OS42IDI4OCAxMjggMzM5LjYgMTI4IDQwMy4yVjQzMmMwIDI2LjUgMjEuNSA0OCA0OCA0OGgyODhjMjYuNSAwIDQ4LTIxLjUgNDgtNDh2LTI4LjhjMC02My42LTUxLjYtMTE1LjItMTE1LjItMTE1LjJ6bS0yMjMuNy0xMy40QzE2MS41IDI2My4xIDE0NS42IDI1NiAxMjggMjU2SDY0Yy0zNS4zIDAtNjQgMjguNy02NCA2NHYzMmMwIDE3LjcgMTQuMyAzMiAzMiAzMmg2NS45YzYuMy00Ny40IDM0LjktODcuMyA3NS4yLTEwOS40elwiLz48L3N2Zz5gXG4gICAgKTtcbiAgICBhZGRJY29uKFxuICAgICAgICBFWFBBTkQsXG4gICAgICAgIGA8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiBhcmlhLWhpZGRlbj1cInRydWVcIiBmb2N1c2FibGU9XCJmYWxzZVwiIGRhdGEtcHJlZml4PVwiZmFzXCIgZGF0YS1pY29uPVwidXNlcnMtc2xhc2hcIiBjbGFzcz1cInN2Zy1pbmxpbmUtLWZhIGZhLXVzZXJzLXNsYXNoIGZhLXctMjBcIiByb2xlPVwiaW1nXCIgdmlld0JveD1cIjAgMCA2NDAgNTEyXCI+PHBhdGggZmlsbD1cImN1cnJlbnRDb2xvclwiIGQ9XCJNMTMyLjY1LDIxMi4zMiwzNi4yMSwxMzcuNzhBNjMuNCw2My40LDAsMCwwLDMyLDE2MGE2My44NCw2My44NCwwLDAsMCwxMDAuNjUsNTIuMzJabTQwLjQ0LDYyLjI4QTYzLjc5LDYzLjc5LDAsMCwwLDEyOCwyNTZINjRBNjQuMDYsNjQuMDYsMCwwLDAsMCwzMjB2MzJhMzIsMzIsMCwwLDAsMzIsMzJIOTcuOTFBMTQ2LjYyLDE0Ni42MiwwLDAsMSwxNzMuMDksMjc0LjZaTTU0NCwyMjRhNjQsNjQsMCwxLDAtNjQtNjRBNjQuMDYsNjQuMDYsMCwwLDAsNTQ0LDIyNFpNNTAwLjU2LDM1NS4xMWExMTQuMjQsMTE0LjI0LDAsMCwwLTg0LjQ3LTY1LjI4TDM2MSwyNDcuMjNjNDEuNDYtMTYuMyw3MS01NS45Miw3MS0xMDMuMjNBMTExLjkzLDExMS45MywwLDAsMCwzMjAsMzJjLTU3LjE0LDAtMTAzLjY5LDQyLjgzLTExMC42LDk4LjA4TDQ1LjQ2LDMuMzhBMTYsMTYsMCwwLDAsMjMsNi4xOUwzLjM3LDMxLjQ2QTE2LDE2LDAsMCwwLDYuMTgsNTMuOTFMNTk0LjUzLDUwOC42M0ExNiwxNiwwLDAsMCw2MTcsNTA1LjgybDE5LjY0LTI1LjI3YTE2LDE2LDAsMCwwLTIuODEtMjIuNDVaTTEyOCw0MDMuMjFWNDMyYTQ4LDQ4LDAsMCwwLDQ4LDQ4SDQ2NGE0Ny40NSw0Ny40NSwwLDAsMCwxMi41Ny0xLjg3TDIzMiwyODkuMTNDMTczLjc0LDI5NC44MywxMjgsMzQzLjQyLDEyOCw0MDMuMjFaTTU3NiwyNTZINTEyYTYzLjc5LDYzLjc5LDAsMCwwLTQ1LjA5LDE4LjZBMTQ2LjI5LDE0Ni4yOSwwLDAsMSw1NDIsMzg0aDY2YTMyLDMyLDAsMCwwLDMyLTMyVjMyMEE2NC4wNiw2NC4wNiwwLDAsMCw1NzYsMjU2WlwiLz48L3N2Zz5gXG4gICAgKTtcbiAgICBhZGRJY29uKFxuICAgICAgICBBQ1RJVkUsXG4gICAgICAgIGA8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiBhcmlhLWhpZGRlbj1cInRydWVcIiBmb2N1c2FibGU9XCJmYWxzZVwiIGRhdGEtcHJlZml4PVwiZmFzXCIgZGF0YS1pY29uPVwiYW5nbGUtcmlnaHRcIiBjbGFzcz1cInN2Zy1pbmxpbmUtLWZhIGZhLWFuZ2xlLXJpZ2h0IGZhLXctOFwiIHJvbGU9XCJpbWdcIiB2aWV3Qm94PVwiMCAwIDI1NiA1MTJcIj48cGF0aCBmaWxsPVwiY3VycmVudENvbG9yXCIgZD1cIk0yMjQuMyAyNzNsLTEzNiAxMzZjLTkuNCA5LjQtMjQuNiA5LjQtMzMuOSAwbC0yMi42LTIyLjZjLTkuNC05LjQtOS40LTI0LjYgMC0zMy45bDk2LjQtOTYuNC05Ni40LTk2LjRjLTkuNC05LjQtOS40LTI0LjYgMC0zMy45TDU0LjMgMTAzYzkuNC05LjQgMjQuNi05LjQgMzMuOSAwbDEzNiAxMzZjOS41IDkuNCA5LjUgMjQuNi4xIDM0elwiLz48L3N2Zz5gXG4gICAgKTtcbiAgICBhZGRJY29uKFxuICAgICAgICBNQVBNQVJLRVIsXG4gICAgICAgIGA8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiBhcmlhLWhpZGRlbj1cInRydWVcIiBmb2N1c2FibGU9XCJmYWxzZVwiIGRhdGEtcHJlZml4PVwiZmFzXCIgZGF0YS1pY29uPVwibWFwLW1hcmtlci1hbHRcIiBjbGFzcz1cInN2Zy1pbmxpbmUtLWZhIGZhLW1hcC1tYXJrZXItYWx0IGZhLXctMTJcIiByb2xlPVwiaW1nXCIgdmlld0JveD1cIjAgMCAzODQgNTEyXCI+PHBhdGggZmlsbD1cImN1cnJlbnRDb2xvclwiIGQ9XCJNMTcyLjI2OCA1MDEuNjdDMjYuOTcgMjkxLjAzMSAwIDI2OS40MTMgMCAxOTIgMCA4NS45NjEgODUuOTYxIDAgMTkyIDBzMTkyIDg1Ljk2MSAxOTIgMTkyYzAgNzcuNDEzLTI2Ljk3IDk5LjAzMS0xNzIuMjY4IDMwOS42Ny05LjUzNSAxMy43NzQtMjkuOTMgMTMuNzczLTM5LjQ2NCAwek0xOTIgMjcyYzQ0LjE4MyAwIDgwLTM1LjgxNyA4MC04MHMtMzUuODE3LTgwLTgwLTgwLTgwIDM1LjgxNy04MCA4MCAzNS44MTcgODAgODAgODB6XCIvPjwvc3ZnPmBcbiAgICApO1xuICAgIGFkZEljb24oXG4gICAgICAgIENSRUFUVVJFLFxuICAgICAgICBgPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCIgZm9jdXNhYmxlPVwiZmFsc2VcIiBkYXRhLXByZWZpeD1cImZhc1wiIGRhdGEtaWNvbj1cImRyYWdvblwiIGNsYXNzPVwic3ZnLWlubGluZS0tZmEgZmEtZHJhZ29uIGZhLXctMjBcIiByb2xlPVwiaW1nXCIgdmlld0JveD1cIjAgMCA2NDAgNTEyXCI+PHBhdGggZmlsbD1cImN1cnJlbnRDb2xvclwiIGQ9XCJNMTguMzIgMjU1Ljc4TDE5MiAyMjMuOTZsLTkxLjI4IDY4LjY5Yy0xMC4wOCAxMC4wOC0yLjk0IDI3LjMxIDExLjMxIDI3LjMxaDIyMi43Yy05LjQ0LTI2LjQtMTQuNzMtNTQuNDctMTQuNzMtODMuMzh2LTQyLjI3bC0xMTkuNzMtODcuNmMtMjMuODItMTUuODgtNTUuMjktMTQuMDEtNzcuMDYgNC41OUw1LjgxIDIyNy42NGMtMTIuMzggMTAuMzMtMy40NSAzMC40MiAxMi41MSAyOC4xNHptNTU2Ljg3IDM0LjFsLTEwMC42Ni01MC4zMUE0Ny45OTIgNDcuOTkyIDAgMCAxIDQ0OCAxOTYuNjV2LTM2LjY5aDY0bDI4LjA5IDIyLjYzYzYgNiAxNC4xNCA5LjM3IDIyLjYzIDkuMzdoMzAuOTdhMzIgMzIgMCAwIDAgMjguNjItMTcuNjlsMTQuMzEtMjguNjJhMzIuMDA1IDMyLjAwNSAwIDAgMC0zLjAyLTMzLjUxbC03NC41My05OS4zOEM1NTMuMDIgNC43IDU0My41NCAwIDUzMy40NyAwSDI5Ni4wMmMtNy4xMyAwLTEwLjcgOC41Ny01LjY2IDEzLjYxTDM1MiA2My45NiAyOTIuNDIgODguOGMtNS45IDIuOTUtNS45IDExLjM2IDAgMTQuMzFMMzUyIDEyNy45NnYxMDguNjJjMCA3Mi4wOCAzNi4wMyAxMzkuMzkgOTYgMTc5LjM4LTE5NS41OSA2LjgxLTM0NC41NiA0MS4wMS00MzQuMSA2MC45MUM1Ljc4IDQ3OC42NyAwIDQ4NS44OCAwIDQ5NC4yIDAgNTA0IDcuOTUgNTEyIDE3Ljc2IDUxMmg0OTkuMDhjNjMuMjkuMDEgMTE5LjYxLTQ3LjU2IDEyMi45OS0xMTAuNzYgMi41Mi00Ny4yOC0yMi43My05MC40LTY0LjY0LTExMS4zNnpNNDg5LjE4IDY2LjI1bDQ1LjY1IDExLjQxYy0yLjc1IDEwLjkxLTEyLjQ3IDE4Ljg5LTI0LjEzIDE4LjI2LTEyLjk2LS43MS0yNS44NS0xMi41My0yMS41Mi0yOS42N3pcIi8+PC9zdmc+YFxuICAgICk7XG4gICAgYWRkSWNvbihQTEFZRVJfVklFVywgUExBWUVSX1ZJRVdfSUNPTik7XG4gICAgYWRkSWNvbihCVUlMREVSX1ZJRVcsIEJVSUxERVJfSUNPTik7XG59XG5leHBvcnQgY29uc3QgTUFQTUFSS0VSID0gXCJ0cmFja2VyLW1hcC1tYXJrZXJcIjtcbmV4cG9ydCBjb25zdCBFWFBBTkQgPSBcImV4cGFuZC1jcmVhdHVyZXNcIjtcbmV4cG9ydCBjb25zdCBHUk9VUCA9IFwiZ3JvdXAtY3JlYXR1cmVzXCI7XG5leHBvcnQgY29uc3QgQUNUSVZFID0gXCJpbml0aWF0aXZlLXRyYWNrZXItYWN0aXZlXCI7XG5leHBvcnQgY29uc3QgQ1JFQVRVUkUgPSBcImluaXRpYXRpdmUtdHJhY2tlci1jcmVhdHVyZS12aWV3XCI7XG5leHBvcnQgY29uc3QgSElEREVOID0gXCJleWUtb2ZmXCI7XG5cbmV4cG9ydCBjb25zdCBCQVNFID0gXCJpbml0aWF0aXZlLXRyYWNrZXJcIjtcbmNvbnN0IElDT04gPSBgPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCIgZm9jdXNhYmxlPVwiZmFsc2VcIiBkYXRhLXByZWZpeD1cImZhc1wiIGRhdGEtaWNvbj1cImRpY2UtZDIwXCIgY2xhc3M9XCJzdmctaW5saW5lLS1mYSBmYS1kaWNlLWQyMCBmYS13LTE1XCIgcm9sZT1cImltZ1wiIHZpZXdCb3g9XCIwIDAgNDgwIDUxMlwiPjxwYXRoIGZpbGw9XCJjdXJyZW50Q29sb3JcIiBkPVwiTTEwNi43NSAyMTUuMDZMMS4yIDM3MC45NWMtMy4wOCA1IC4xIDExLjUgNS45MyAxMi4xNGwyMDguMjYgMjIuMDctMTA4LjY0LTE5MC4xek03LjQxIDMxNS40M0w4Mi43IDE5My4wOCA2LjA2IDE0Ny4xYy0yLjY3LTEuNi02LjA2LjMyLTYuMDYgMy40M3YxNjIuODFjMCA0LjAzIDUuMjkgNS41MyA3LjQxIDIuMDl6TTE4LjI1IDQyMy42bDE5NC40IDg3LjY2YzUuMyAyLjQ1IDExLjM1LTEuNDMgMTEuMzUtNy4yNnYtNjUuNjdsLTIwMy41NS0yMi4zYy00LjQ1LS41LTYuMjMgNS41OS0yLjIgNy41N3ptODEuMjItMjU3Ljc4TDE3OS40IDIyLjg4YzQuMzQtNy4wNi0zLjU5LTE1LjI1LTEwLjc4LTExLjE0TDE3LjgxIDExMC4zNWMtMi40NyAxLjYyLTIuMzkgNS4yNi4xMyA2Ljc4bDgxLjUzIDQ4LjY5ek0yNDAgMTc2aDEwOS4yMUwyNTMuNjMgNy42MkMyNTAuNSAyLjU0IDI0NS4yNSAwIDI0MCAwcy0xMC41IDIuNTQtMTMuNjMgNy42MkwxMzAuNzkgMTc2SDI0MHptMjMzLjk0LTI4LjlsLTc2LjY0IDQ1Ljk5IDc1LjI5IDEyMi4zNWMyLjExIDMuNDQgNy40MSAxLjk0IDcuNDEtMi4xVjE1MC41M2MwLTMuMTEtMy4zOS01LjAzLTYuMDYtMy40M3ptLTkzLjQxIDE4LjcybDgxLjUzLTQ4LjdjMi41My0xLjUyIDIuNi01LjE2LjEzLTYuNzhsLTE1MC44MS05OC42Yy03LjE5LTQuMTEtMTUuMTIgNC4wOC0xMC43OCAxMS4xNGw3OS45MyAxNDIuOTR6bTc5LjAyIDI1MC4yMUwyNTYgNDM4LjMydjY1LjY3YzAgNS44NCA2LjA1IDkuNzEgMTEuMzUgNy4yNmwxOTQuNC04Ny42NmM0LjAzLTEuOTcgMi4yNS04LjA2LTIuMi03LjU2em0tODYuMy0yMDAuOTdsLTEwOC42MyAxOTAuMSAyMDguMjYtMjIuMDdjNS44My0uNjUgOS4wMS03LjE0IDUuOTMtMTIuMTRMMzczLjI1IDIxNS4wNnpNMjQwIDIwOEgxMzkuNTdMMjQwIDM4My43NSAzNDAuNDMgMjA4SDI0MHpcIi8+PC9zdmc+YDtcblxuZXhwb3J0IGNvbnN0IE1BUCA9IFwiaW5pdGlhdGl2ZS10cmFja2VyLW1hcFwiO1xuY29uc3QgTUFQX0lDT04gPSBgPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCIgZm9jdXNhYmxlPVwiZmFsc2VcIiBkYXRhLXByZWZpeD1cImZhc1wiIGRhdGEtaWNvbj1cIm1hcC1tYXJrZWQtYWx0XCIgY2xhc3M9XCJzdmctaW5saW5lLS1mYSBmYS1tYXAtbWFya2VkLWFsdCBmYS13LTE4XCIgcm9sZT1cImltZ1wiIHZpZXdCb3g9XCIwIDAgNTc2IDUxMlwiPjxwYXRoIGZpbGw9XCJjdXJyZW50Q29sb3JcIiBkPVwiTTI4OCAwYy02OS41OSAwLTEyNiA1Ni40MS0xMjYgMTI2IDAgNTYuMjYgODIuMzUgMTU4LjggMTEzLjkgMTk2LjAyIDYuMzkgNy41NCAxNy44MiA3LjU0IDI0LjIgMEMzMzEuNjUgMjg0LjggNDE0IDE4Mi4yNiA0MTQgMTI2IDQxNCA1Ni40MSAzNTcuNTkgMCAyODggMHptMCAxNjhjLTIzLjIgMC00Mi0xOC44LTQyLTQyczE4LjgtNDIgNDItNDIgNDIgMTguOCA0MiA0Mi0xOC44IDQyLTQyIDQyek0yMC4xMiAyMTUuOTVBMzIuMDA2IDMyLjAwNiAwIDAgMCAwIDI0NS42NnYyNTAuMzJjMCAxMS4zMiAxMS40MyAxOS4wNiAyMS45NCAxNC44NkwxNjAgNDQ4VjIxNC45MmMtOC44NC0xNS45OC0xNi4wNy0zMS41NC0yMS4yNS00Ni40MkwyMC4xMiAyMTUuOTV6TTI4OCAzNTkuNjdjLTE0LjA3IDAtMjcuMzgtNi4xOC0zNi41MS0xNi45Ni0xOS42Ni0yMy4yLTQwLjU3LTQ5LjYyLTU5LjQ5LTc2LjcydjE4MmwxOTIgNjRWMjY2Yy0xOC45MiAyNy4wOS0zOS44MiA1My41Mi01OS40OSA3Ni43Mi05LjEzIDEwLjc3LTIyLjQ0IDE2Ljk1LTM2LjUxIDE2Ljk1em0yNjYuMDYtMTk4LjUxTDQxNiAyMjR2Mjg4bDEzOS44OC01NS45NUEzMS45OTYgMzEuOTk2IDAgMCAwIDU3NiA0MjYuMzRWMTc2LjAyYzAtMTEuMzItMTEuNDMtMTkuMDYtMjEuOTQtMTQuODZ6XCIvPjwvc3ZnPmA7XG5cbmV4cG9ydCBjb25zdCBTVEFSVF9FTkNPVU5URVIgPSBcImNyb3NzZWQtc3dvcmRzXCI7XG5jb25zdCBTVEFSVF9FTkNPVU5URVJfSUNPTiA9XG4gICAgJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgMTAyNCAxMDI0XCI+PHBhdGggZmlsbD1cImN1cnJlbnRDb2xvclwiIGQ9XCJNMjcuNDMgOTE4LjhsMzAuMzc0LTMwLjM3NCA4MC43OTMgODAuNzkzLTMwLjM3NCAzMC4zNzRMMjcuNDMgOTE4Ljh6bTQyMi4zOTMtMjUzLjgxNWMwLTQ4LjUyMS0zOS4zNi04Ny44ODItODcuODgyLTg3Ljg4MnMtODcuODggMzkuMzYtODcuODggODcuODhjMCA0OC41MjEgMzkuMzM4IDg3Ljg1OSA4Ny44ODIgODcuODgyczg3LjkwMi0zOS4zMzggODcuODgtODcuODh6bS0xNzUuMzUxIDguNDAxbC0uODA3LS44MDctMTY2LjMzNyAxNjYuMzM2IDgwLjc5NCA4MC43OTQgMTY2LjMzNy0xNjYuMzM3LS45Mi0uOTJjLTQxLjgzMi0zLjk4Ni03NS4wOTktMzcuMjUzLTc5LjA2Ny03OS4wNjV6bS0uNDExLTguNDAyYzAtNDUuNTA3IDM0LjYyMS04Mi45NTIgNzguOTUtODcuNDMxLTQ2LjczMS01My4xMjEtODguMjE0LTExMC44ODMtMTIzLjg1Mi0xNzIuNjEzTDExNy41OTMgNTE2LjUwNiAyNzQuNDcgNjczLjM4M2E4OC45MjcgODguOTI3IDAgMCAxLS40MDktOC4zOTl6bTE3NS4zMTUgOC45NjJjLTQuNDcyIDQ0LjMzNC00MS45MTQgNzguOTQyLTg3LjQzMyA3OC45MmE4OS4xMzcgODkuMTM3IDAgMCAxLTguNDA2LS40MTNsMTU3LjA1OCAxNTcuMDU4IDExMS41NjYtMTExLjU2NmMtNjIuMDYzLTM1Ljg0Mi0xMTkuODQxLTc3LjQwNS0xNzIuNzg1LTEyMy45OTl6TTgxNS40OTcgNzQuNjMyTDM5Mi40OTMgNDk3LjYzNmM2LjUzNSA5LjYyMiAxMC43MjkgMjEuNDEgMTAuNzI5IDMzLjgxNyAwIDE5LjIzNC05LjE4OCAzNi40NDEtMjMuMzc1IDQ3LjQ4MyAzNC43MTEgNy4xOTEgNjEuOTE4IDM0Ljg2OSA2OC40NTMgNjkuODE0IDExLjAxMy0xNC42MjUgMjguNS0yNC4xNCA0OC4wNzgtMjQuMTQgMTIuNDA3IDAgMjMuNTEgMy41MSAzMi45NzggOS44OTFsNDIzLjAwMi00MjMuMDAyIDI5LjY5MS0xNjYuNTU1LTE2Ni41NTMgMjkuNjg4ek00MS45NjQgODcyLjU4bDExMi41MzkgMTEyLjUzOSA0OS41MTQtNDkuNTE0TDkxLjQ3OCA4MjMuMDY2IDQxLjk2NCA4NzIuNTh6XCIvPjwvc3ZnPic7XG5leHBvcnQgY29uc3QgU0FWRSA9IFwiaW5pdGlhdGl2ZS10cmFja2VyLXNhdmVcIjtcbmNvbnN0IFNBVkVfSUNPTiA9IGA8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiBhcmlhLWhpZGRlbj1cInRydWVcIiBmb2N1c2FibGU9XCJmYWxzZVwiIGRhdGEtcHJlZml4PVwiZmFzXCIgZGF0YS1pY29uPVwic2F2ZVwiIGNsYXNzPVwic3ZnLWlubGluZS0tZmEgZmEtc2F2ZSBmYS13LTE0XCIgcm9sZT1cImltZ1wiIHZpZXdCb3g9XCIwIDAgNDQ4IDUxMlwiPjxwYXRoIGZpbGw9XCJjdXJyZW50Q29sb3JcIiBkPVwiTTQzMy45NDEgMTI5Ljk0MWwtODMuODgyLTgzLjg4MkE0OCA0OCAwIDAgMCAzMTYuMTE4IDMySDQ4QzIxLjQ5IDMyIDAgNTMuNDkgMCA4MHYzNTJjMCAyNi41MSAyMS40OSA0OCA0OCA0OGgzNTJjMjYuNTEgMCA0OC0yMS40OSA0OC00OFYxNjMuODgyYTQ4IDQ4IDAgMCAwLTE0LjA1OS0zMy45NDF6TTIyNCA0MTZjLTM1LjM0NiAwLTY0LTI4LjY1NC02NC02NCAwLTM1LjM0NiAyOC42NTQtNjQgNjQtNjRzNjQgMjguNjU0IDY0IDY0YzAgMzUuMzQ2LTI4LjY1NCA2NC02NCA2NHptOTYtMzA0LjUyVjIxMmMwIDYuNjI3LTUuMzczIDEyLTEyIDEySDc2Yy02LjYyNyAwLTEyLTUuMzczLTEyLTEyVjEwOGMwLTYuNjI3IDUuMzczLTEyIDEyLTEyaDIyOC41MmMzLjE4MyAwIDYuMjM1IDEuMjY0IDguNDg1IDMuNTE1bDMuNDggMy40OEExMS45OTYgMTEuOTk2IDAgMCAxIDMyMCAxMTEuNDh6XCIvPjwvc3ZnPmA7XG5cbmV4cG9ydCBjb25zdCBBREQgPSBcImluaXRpYXRpdmUtdHJhY2tlci1hZGRcIjtcbmNvbnN0IEFERF9JQ09OID0gYDxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiIGZvY3VzYWJsZT1cImZhbHNlXCIgZGF0YS1wcmVmaXg9XCJmYXNcIiBkYXRhLWljb249XCJ1c2VyLXBsdXNcIiBjbGFzcz1cInN2Zy1pbmxpbmUtLWZhIGZhLXVzZXItcGx1cyBmYS13LTIwXCIgcm9sZT1cImltZ1wiIHZpZXdCb3g9XCIwIDAgNjQwIDUxMlwiPjxwYXRoIGZpbGw9XCJjdXJyZW50Q29sb3JcIiBkPVwiTTYyNCAyMDhoLTY0di02NGMwLTguOC03LjItMTYtMTYtMTZoLTMyYy04LjggMC0xNiA3LjItMTYgMTZ2NjRoLTY0Yy04LjggMC0xNiA3LjItMTYgMTZ2MzJjMCA4LjggNy4yIDE2IDE2IDE2aDY0djY0YzAgOC44IDcuMiAxNiAxNiAxNmgzMmM4LjggMCAxNi03LjIgMTYtMTZ2LTY0aDY0YzguOCAwIDE2LTcuMiAxNi0xNnYtMzJjMC04LjgtNy4yLTE2LTE2LTE2em0tNDAwIDQ4YzcwLjcgMCAxMjgtNTcuMyAxMjgtMTI4UzI5NC43IDAgMjI0IDAgOTYgNTcuMyA5NiAxMjhzNTcuMyAxMjggMTI4IDEyOHptODkuNiAzMmgtMTYuN2MtMjIuMiAxMC4yLTQ2LjkgMTYtNzIuOSAxNnMtNTAuNi01LjgtNzIuOS0xNmgtMTYuN0M2MC4yIDI4OCAwIDM0OC4yIDAgNDIyLjRWNDY0YzAgMjYuNSAyMS41IDQ4IDQ4IDQ4aDM1MmMyNi41IDAgNDgtMjEuNSA0OC00OHYtNDEuNmMwLTc0LjItNjAuMi0xMzQuNC0xMzQuNC0xMzQuNHpcIi8+PC9zdmc+YDtcblxuLyogZXhwb3J0IGNvbnN0IFJFTU9WRSA9IFwiaW5pdGlhdGl2ZS10cmFja2VyLXJlbW92ZVwiOyAqL1xuZXhwb3J0IGNvbnN0IFJFTU9WRSA9IFwidHJhc2hcIjtcbmNvbnN0IFJFTU9WRV9JQ09OID0gYDxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiIGZvY3VzYWJsZT1cImZhbHNlXCIgZGF0YS1wcmVmaXg9XCJmYXNcIiBkYXRhLWljb249XCJ0cmFzaFwiIGNsYXNzPVwic3ZnLWlubGluZS0tZmEgZmEtdHJhc2ggZmEtdy0xNFwiIHJvbGU9XCJpbWdcIiB2aWV3Qm94PVwiMCAwIDQ0OCA1MTJcIj48cGF0aCBmaWxsPVwiY3VycmVudENvbG9yXCIgZD1cIk00MzIgMzJIMzEybC05LjQtMTguN0EyNCAyNCAwIDAgMCAyODEuMSAwSDE2Ni44YTIzLjcyIDIzLjcyIDAgMCAwLTIxLjQgMTMuM0wxMzYgMzJIMTZBMTYgMTYgMCAwIDAgMCA0OHYzMmExNiAxNiAwIDAgMCAxNiAxNmg0MTZhMTYgMTYgMCAwIDAgMTYtMTZWNDhhMTYgMTYgMCAwIDAtMTYtMTZ6TTUzLjIgNDY3YTQ4IDQ4IDAgMCAwIDQ3LjkgNDVoMjQ1LjhhNDggNDggMCAwIDAgNDcuOS00NUw0MTYgMTI4SDMyelwiLz48L3N2Zz5gO1xuXG5leHBvcnQgY29uc3QgUkVTVEFSVCA9IFwiaW5pdGlhdGl2ZS10cmFja2VyLXJlc3RhcnRcIjtcbmNvbnN0IFJFU1RBUlRfSUNPTiA9IGA8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiBhcmlhLWhpZGRlbj1cInRydWVcIiBmb2N1c2FibGU9XCJmYWxzZVwiIGRhdGEtcHJlZml4PVwiZmFzXCIgZGF0YS1pY29uPVwicmVkb1wiIGNsYXNzPVwic3ZnLWlubGluZS0tZmEgZmEtcmVkbyBmYS13LTE2XCIgcm9sZT1cImltZ1wiIHZpZXdCb3g9XCIwIDAgNTEyIDUxMlwiPjxwYXRoIGZpbGw9XCJjdXJyZW50Q29sb3JcIiBkPVwiTTUwMC4zMyAwaC00Ny40MWExMiAxMiAwIDAgMC0xMiAxMi41N2w0IDgyLjc2QTI0Ny40MiAyNDcuNDIgMCAwIDAgMjU2IDhDMTE5LjM0IDggNy45IDExOS41MyA4IDI1Ni4xOSA4LjEgMzkzLjA3IDExOS4xIDUwNCAyNTYgNTA0YTI0Ny4xIDI0Ny4xIDAgMCAwIDE2Ni4xOC02My45MSAxMiAxMiAwIDAgMCAuNDgtMTcuNDNsLTM0LTM0YTEyIDEyIDAgMCAwLTE2LjM4LS41NUExNzYgMTc2IDAgMSAxIDQwMi4xIDE1Ny44bC0xMDEuNTMtNC44N2ExMiAxMiAwIDAgMC0xMi41NyAxMnY0Ny40MWExMiAxMiAwIDAgMCAxMiAxMmgyMDAuMzNhMTIgMTIgMCAwIDAgMTItMTJWMTJhMTIgMTIgMCAwIDAtMTItMTJ6XCIvPjwvc3ZnPmA7XG5cbmV4cG9ydCBjb25zdCBQTEFZID0gXCJpbml0aWF0aXZlLXRyYWNrZXItcGxheVwiO1xuY29uc3QgUExBWV9JQ09OID0gYDxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiIGZvY3VzYWJsZT1cImZhbHNlXCIgZGF0YS1wcmVmaXg9XCJmYXNcIiBkYXRhLWljb249XCJwbGF5XCIgY2xhc3M9XCJzdmctaW5saW5lLS1mYSBmYS1wbGF5IGZhLXctMTRcIiByb2xlPVwiaW1nXCIgdmlld0JveD1cIjAgMCA0NDggNTEyXCI+PHBhdGggZmlsbD1cImN1cnJlbnRDb2xvclwiIGQ9XCJNNDI0LjQgMjE0LjdMNzIuNCA2LjZDNDMuOC0xMC4zIDAgNi4xIDAgNDcuOVY0NjRjMCAzNy41IDQwLjcgNjAuMSA3Mi40IDQxLjNsMzUyLTIwOGMzMS40LTE4LjUgMzEuNS02NC4xIDAtODIuNnpcIi8+PC9zdmc+YDtcblxuZXhwb3J0IGNvbnN0IEZPUldBUkQgPSBcImluaXRpYXRpdmUtdHJhY2tlci1mb3J3YXJkXCI7XG5jb25zdCBGT1JXQVJEX0lDT04gPSBgPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCIgZm9jdXNhYmxlPVwiZmFsc2VcIiBkYXRhLXByZWZpeD1cImZhc1wiIGRhdGEtaWNvbj1cInN0ZXAtZm9yd2FyZFwiIGNsYXNzPVwic3ZnLWlubGluZS0tZmEgZmEtc3RlcC1mb3J3YXJkIGZhLXctMTRcIiByb2xlPVwiaW1nXCIgdmlld0JveD1cIjAgMCA0NDggNTEyXCI+PHBhdGggZmlsbD1cImN1cnJlbnRDb2xvclwiIGQ9XCJNMzg0IDQ0djQyNGMwIDYuNi01LjQgMTItMTIgMTJoLTQ4Yy02LjYgMC0xMi01LjQtMTItMTJWMjkxLjZsLTE5NS41IDE4MUM5NS45IDQ4OS43IDY0IDQ3NS40IDY0IDQ0OFY2NGMwLTI3LjQgMzEuOS00MS43IDUyLjUtMjQuNkwzMTIgMjE5LjNWNDRjMC02LjYgNS40LTEyIDEyLTEyaDQ4YzYuNiAwIDEyIDUuNCAxMiAxMnpcIi8+PC9zdmc+YDtcblxuZXhwb3J0IGNvbnN0IEJBQ0tXQVJEID0gXCJpbml0aWF0aXZlLXRyYWNrZXItYmFja3dhcmRcIjtcbmNvbnN0IEJBQ0tXQVJEX0lDT04gPSBgPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCIgZm9jdXNhYmxlPVwiZmFsc2VcIiBkYXRhLXByZWZpeD1cImZhc1wiIGRhdGEtaWNvbj1cInN0ZXAtYmFja3dhcmRcIiBjbGFzcz1cInN2Zy1pbmxpbmUtLWZhIGZhLXN0ZXAtYmFja3dhcmQgZmEtdy0xNFwiIHJvbGU9XCJpbWdcIiB2aWV3Qm94PVwiMCAwIDQ0OCA1MTJcIj48cGF0aCBmaWxsPVwiY3VycmVudENvbG9yXCIgZD1cIk02NCA0NjhWNDRjMC02LjYgNS40LTEyIDEyLTEyaDQ4YzYuNiAwIDEyIDUuNCAxMiAxMnYxNzYuNGwxOTUuNS0xODFDMzUyLjEgMjIuMyAzODQgMzYuNiAzODQgNjR2Mzg0YzAgMjcuNC0zMS45IDQxLjctNTIuNSAyNC42TDEzNiAyOTIuN1Y0NjhjMCA2LjYtNS40IDEyLTEyIDEySDc2Yy02LjYgMC0xMi01LjQtMTItMTJ6XCIvPjwvc3ZnPmA7XG5cbmV4cG9ydCBjb25zdCBTVE9QID0gXCJpbml0aWF0aXZlLXRyYWNrZXItc3RvcFwiO1xuY29uc3QgU1RPUF9JQ09OID0gYDxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiIGZvY3VzYWJsZT1cImZhbHNlXCIgZGF0YS1wcmVmaXg9XCJmYXNcIiBkYXRhLWljb249XCJzdG9wXCIgY2xhc3M9XCJzdmctaW5saW5lLS1mYSBmYS1zdG9wIGZhLXctMTRcIiByb2xlPVwiaW1nXCIgdmlld0JveD1cIjAgMCA0NDggNTEyXCI+PHBhdGggZmlsbD1cImN1cnJlbnRDb2xvclwiIGQ9XCJNNDAwIDMySDQ4QzIxLjUgMzIgMCA1My41IDAgODB2MzUyYzAgMjYuNSAyMS41IDQ4IDQ4IDQ4aDM1MmMyNi41IDAgNDgtMjEuNSA0OC00OFY4MGMwLTI2LjUtMjEuNS00OC00OC00OHpcIi8+PC9zdmc+YDtcblxuZXhwb3J0IGNvbnN0IEdSSVAgPSBcImluaXRpYXRpdmUtdHJhY2tlci1ncmlwXCI7XG5jb25zdCBHUklQX0lDT04gPSBgPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCIgZm9jdXNhYmxlPVwiZmFsc2VcIiBkYXRhLXByZWZpeD1cImZhc1wiIGRhdGEtaWNvbj1cImdyaXAtdmVydGljYWxcIiBjbGFzcz1cInN2Zy1pbmxpbmUtLWZhIGZhLWdyaXAtdmVydGljYWwgZmEtdy0xMFwiIHJvbGU9XCJpbWdcIiB2aWV3Qm94PVwiMCAwIDMyMCA1MTJcIj48cGF0aCBmaWxsPVwiY3VycmVudENvbG9yXCIgZD1cIk05NiAzMkgzMkMxNC4zMyAzMiAwIDQ2LjMzIDAgNjR2NjRjMCAxNy42NyAxNC4zMyAzMiAzMiAzMmg2NGMxNy42NyAwIDMyLTE0LjMzIDMyLTMyVjY0YzAtMTcuNjctMTQuMzMtMzItMzItMzJ6bTAgMTYwSDMyYy0xNy42NyAwLTMyIDE0LjMzLTMyIDMydjY0YzAgMTcuNjcgMTQuMzMgMzIgMzIgMzJoNjRjMTcuNjcgMCAzMi0xNC4zMyAzMi0zMnYtNjRjMC0xNy42Ny0xNC4zMy0zMi0zMi0zMnptMCAxNjBIMzJjLTE3LjY3IDAtMzIgMTQuMzMtMzIgMzJ2NjRjMCAxNy42NyAxNC4zMyAzMiAzMiAzMmg2NGMxNy42NyAwIDMyLTE0LjMzIDMyLTMydi02NGMwLTE3LjY3LTE0LjMzLTMyLTMyLTMyek0yODggMzJoLTY0Yy0xNy42NyAwLTMyIDE0LjMzLTMyIDMydjY0YzAgMTcuNjcgMTQuMzMgMzIgMzIgMzJoNjRjMTcuNjcgMCAzMi0xNC4zMyAzMi0zMlY2NGMwLTE3LjY3LTE0LjMzLTMyLTMyLTMyem0wIDE2MGgtNjRjLTE3LjY3IDAtMzIgMTQuMzMtMzIgMzJ2NjRjMCAxNy42NyAxNC4zMyAzMiAzMiAzMmg2NGMxNy42NyAwIDMyLTE0LjMzIDMyLTMydi02NGMwLTE3LjY3LTE0LjMzLTMyLTMyLTMyem0wIDE2MGgtNjRjLTE3LjY3IDAtMzIgMTQuMzMtMzIgMzJ2NjRjMCAxNy42NyAxNC4zMyAzMiAzMiAzMmg2NGMxNy42NyAwIDMyLTE0LjMzIDMyLTMydi02NGMwLTE3LjY3LTE0LjMzLTMyLTMyLTMyelwiLz48L3N2Zz5gO1xuXG5leHBvcnQgY29uc3QgSFAgPSBcImluaXRpYXRpdmUtdHJhY2tlci1ocFwiO1xuY29uc3QgSFBfSUNPTiA9IGA8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiBhcmlhLWhpZGRlbj1cInRydWVcIiBmb2N1c2FibGU9XCJmYWxzZVwiIGRhdGEtcHJlZml4PVwiZmFyXCIgZGF0YS1pY29uPVwiaGVhcnRcIiBjbGFzcz1cInN2Zy1pbmxpbmUtLWZhIGZhLWhlYXJ0IGZhLXctMTZcIiByb2xlPVwiaW1nXCIgdmlld0JveD1cIjAgMCA1MTIgNTEyXCI+PHBhdGggZmlsbD1cImN1cnJlbnRDb2xvclwiIGQ9XCJNNDU4LjQgNjQuM0M0MDAuNiAxNS43IDMxMS4zIDIzIDI1NiA3OS4zIDIwMC43IDIzIDExMS40IDE1LjYgNTMuNiA2NC4zLTIxLjYgMTI3LjYtMTAuNiAyMzAuOCA0MyAyODUuNWwxNzUuNCAxNzguN2MxMCAxMC4yIDIzLjQgMTUuOSAzNy42IDE1LjkgMTQuMyAwIDI3LjYtNS42IDM3LjYtMTUuOEw0NjkgMjg1LjZjNTMuNS01NC43IDY0LjctMTU3LjktMTAuNi0yMjEuM3ptLTIzLjYgMTg3LjVMMjU5LjQgNDMwLjVjLTIuNCAyLjQtNC40IDIuNC02LjggMEw3Ny4yIDI1MS44Yy0zNi41LTM3LjItNDMuOS0xMDcuNiA3LjMtMTUwLjcgMzguOS0zMi43IDk4LjktMjcuOCAxMzYuNSAxMC41bDM1IDM1LjcgMzUtMzUuN2MzNy44LTM4LjUgOTcuOC00My4yIDEzNi41LTEwLjYgNTEuMSA0My4xIDQzLjUgMTEzLjkgNy4zIDE1MC44elwiLz48L3N2Zz5gO1xuXG5leHBvcnQgY29uc3QgQUMgPSBcImluaXRpYXRpdmUtdHJhY2tlci1hY1wiO1xuY29uc3QgQUNfSUNPTiA9IGA8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiBhcmlhLWhpZGRlbj1cInRydWVcIiBmb2N1c2FibGU9XCJmYWxzZVwiIGRhdGEtcHJlZml4PVwiZmFzXCIgZGF0YS1pY29uPVwic2hpZWxkLWFsdFwiIGNsYXNzPVwic3ZnLWlubGluZS0tZmEgZmEtc2hpZWxkLWFsdCBmYS13LTE2XCIgcm9sZT1cImltZ1wiIHZpZXdCb3g9XCIwIDAgNTEyIDUxMlwiPjxwYXRoIGZpbGw9XCJjdXJyZW50Q29sb3JcIiBkPVwiTTQ2Ni41IDgzLjdsLTE5Mi04MGE0OC4xNSA0OC4xNSAwIDAgMC0zNi45IDBsLTE5MiA4MEMyNy43IDkxLjEgMTYgMTA4LjYgMTYgMTI4YzAgMTk4LjUgMTE0LjUgMzM1LjcgMjIxLjUgMzgwLjMgMTEuOCA0LjkgMjUuMSA0LjkgMzYuOSAwQzM2MC4xIDQ3Mi42IDQ5NiAzNDkuMyA0OTYgMTI4YzAtMTkuNC0xMS43LTM2LjktMjkuNS00NC4zek0yNTYuMSA0NDYuM2wtLjEtMzgxIDE3NS45IDczLjNjLTMuMyAxNTEuNC04Mi4xIDI2MS4xLTE3NS44IDMwNy43elwiLz48L3N2Zz5gO1xuXG5leHBvcnQgY29uc3QgSEFNQlVSR0VSID0gXCJpbml0aWF0aXZlLXRyYWNrZXItaGFtYnVyZ2VyXCI7XG5jb25zdCBIQU1CVVJHRVJfSUNPTiA9IGA8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiBhcmlhLWhpZGRlbj1cInRydWVcIiBmb2N1c2FibGU9XCJmYWxzZVwiIGRhdGEtcHJlZml4PVwiZmFzXCIgZGF0YS1pY29uPVwiYmFyc1wiIGNsYXNzPVwic3ZnLWlubGluZS0tZmEgZmEtYmFycyBmYS13LTE0XCIgcm9sZT1cImltZ1wiIHZpZXdCb3g9XCIwIDAgNDQ4IDUxMlwiPjxwYXRoIGZpbGw9XCJjdXJyZW50Q29sb3JcIiBkPVwiTTE2IDEzMmg0MTZjOC44MzcgMCAxNi03LjE2MyAxNi0xNlY3NmMwLTguODM3LTcuMTYzLTE2LTE2LTE2SDE2QzcuMTYzIDYwIDAgNjcuMTYzIDAgNzZ2NDBjMCA4LjgzNyA3LjE2MyAxNiAxNiAxNnptMCAxNjBoNDE2YzguODM3IDAgMTYtNy4xNjMgMTYtMTZ2LTQwYzAtOC44MzctNy4xNjMtMTYtMTYtMTZIMTZjLTguODM3IDAtMTYgNy4xNjMtMTYgMTZ2NDBjMCA4LjgzNyA3LjE2MyAxNiAxNiAxNnptMCAxNjBoNDE2YzguODM3IDAgMTYtNy4xNjMgMTYtMTZ2LTQwYzAtOC44MzctNy4xNjMtMTYtMTYtMTZIMTZjLTguODM3IDAtMTYgNy4xNjMtMTYgMTZ2NDBjMCA4LjgzNyA3LjE2MyAxNiAxNiAxNnpcIi8+PC9zdmc+YDtcblxuZXhwb3J0IGNvbnN0IERJU0FCTEUgPSBcImluaXRpYXRpdmUtdHJhY2tlci1kaXNhYmxlXCI7XG5jb25zdCBESVNBQkxFX0lDT04gPSBgPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCIgZm9jdXNhYmxlPVwiZmFsc2VcIiBkYXRhLXByZWZpeD1cImZhc1wiIGRhdGEtaWNvbj1cInVzZXItc2xhc2hcIiBjbGFzcz1cInN2Zy1pbmxpbmUtLWZhIGZhLXVzZXItc2xhc2ggZmEtdy0yMFwiIHJvbGU9XCJpbWdcIiB2aWV3Qm94PVwiMCAwIDY0MCA1MTJcIj48cGF0aCBmaWxsPVwiY3VycmVudENvbG9yXCIgZD1cIk02MzMuOCA0NTguMUwzNjIuMyAyNDguM0M0MTIuMSAyMzAuNyA0NDggMTgzLjggNDQ4IDEyOCA0NDggNTcuMyAzOTAuNyAwIDMyMCAwYy02Ny4xIDAtMTIxLjUgNTEuOC0xMjYuOSAxMTcuNEw0NS41IDMuNEMzOC41LTIgMjguNS0uOCAyMyA2LjJMMy40IDMxLjRjLTUuNCA3LTQuMiAxNyAyLjggMjIuNGw1ODguNCA0NTQuN2M3IDUuNCAxNyA0LjIgMjIuNS0yLjhsMTkuNi0yNS4zYzUuNC02LjggNC4xLTE2LjktMi45LTIyLjN6TTk2IDQyMi40VjQ2NGMwIDI2LjUgMjEuNSA0OCA0OCA0OGgzNTAuMkwyMDcuNCAyOTAuM0MxNDQuMiAzMDEuMyA5NiAzNTYgOTYgNDIyLjR6XCIvPjwvc3ZnPmA7XG5cbmV4cG9ydCBjb25zdCBFTkFCTEUgPSBcImluaXRpYXRpdmUtdHJhY2tlci1lbmFibGVcIjtcbmNvbnN0IEVOQUJMRV9JQ09OID0gYDxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiIGZvY3VzYWJsZT1cImZhbHNlXCIgZGF0YS1wcmVmaXg9XCJmYXNcIiBkYXRhLWljb249XCJ1c2VyLWNoZWNrXCIgY2xhc3M9XCJzdmctaW5saW5lLS1mYSBmYS11c2VyLWNoZWNrIGZhLXctMjBcIiByb2xlPVwiaW1nXCIgdmlld0JveD1cIjAgMCA2NDAgNTEyXCI+PHBhdGggZmlsbD1cImN1cnJlbnRDb2xvclwiIGQ9XCJNMjI0IDI1NmM3MC43IDAgMTI4LTU3LjMgMTI4LTEyOFMyOTQuNyAwIDIyNCAwIDk2IDU3LjMgOTYgMTI4czU3LjMgMTI4IDEyOCAxMjh6bTg5LjYgMzJoLTE2LjdjLTIyLjIgMTAuMi00Ni45IDE2LTcyLjkgMTZzLTUwLjYtNS44LTcyLjktMTZoLTE2LjdDNjAuMiAyODggMCAzNDguMiAwIDQyMi40VjQ2NGMwIDI2LjUgMjEuNSA0OCA0OCA0OGgzNTJjMjYuNSAwIDQ4LTIxLjUgNDgtNDh2LTQxLjZjMC03NC4yLTYwLjItMTM0LjQtMTM0LjQtMTM0LjR6bTMyMy0xMjguNGwtMjcuOC0yOC4xYy00LjYtNC43LTEyLjEtNC43LTE2LjgtLjFsLTEwNC44IDEwNC00NS41LTQ1LjhjLTQuNi00LjctMTIuMS00LjctMTYuOC0uMWwtMjguMSAyNy45Yy00LjcgNC42LTQuNyAxMi4xLS4xIDE2LjhsODEuNyA4Mi4zYzQuNiA0LjcgMTIuMSA0LjcgMTYuOC4xbDE0MS4zLTE0MC4yYzQuNi00LjcgNC43LTEyLjIuMS0xNi44elwiLz48L3N2Zz5gO1xuXG5leHBvcnQgY29uc3QgRURJVCA9IFwiaW5pdGlhdGl2ZS10cmFja2VyLWVkaXRcIjtcbmNvbnN0IEVESVRfSUNPTiA9IGA8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiBhcmlhLWhpZGRlbj1cInRydWVcIiBmb2N1c2FibGU9XCJmYWxzZVwiIGRhdGEtcHJlZml4PVwiZmFyXCIgZGF0YS1pY29uPVwiZWRpdFwiIGNsYXNzPVwic3ZnLWlubGluZS0tZmEgZmEtZWRpdCBmYS13LTE4XCIgcm9sZT1cImltZ1wiIHZpZXdCb3g9XCIwIDAgNTc2IDUxMlwiPjxwYXRoIGZpbGw9XCJjdXJyZW50Q29sb3JcIiBkPVwiTTQwMi4zIDM0NC45bDMyLTMyYzUtNSAxMy43LTEuNSAxMy43IDUuN1Y0NjRjMCAyNi41LTIxLjUgNDgtNDggNDhINDhjLTI2LjUgMC00OC0yMS41LTQ4LTQ4VjExMmMwLTI2LjUgMjEuNS00OCA0OC00OGgyNzMuNWM3LjEgMCAxMC43IDguNiA1LjcgMTMuN2wtMzIgMzJjLTEuNSAxLjUtMy41IDIuMy01LjcgMi4zSDQ4djM1MmgzNTJWMzUwLjVjMC0yLjEuOC00LjEgMi4zLTUuNnptMTU2LjYtMjAxLjhMMjk2LjMgNDA1LjdsLTkwLjQgMTBjLTI2LjIgMi45LTQ4LjUtMTkuMi00NS42LTQ1LjZsMTAtOTAuNEw0MzIuOSAxNy4xYzIyLjktMjIuOSA1OS45LTIyLjkgODIuNyAwbDQzLjIgNDMuMmMyMi45IDIyLjkgMjIuOSA2MCAuMSA4Mi44ek00NjAuMSAxNzRMNDAyIDExNS45IDIxNi4yIDMwMS44bC03LjMgNjUuMyA2NS4zLTcuM0w0NjAuMSAxNzR6bTY0LjgtNzkuN2wtNDMuMi00My4yYy00LjEtNC4xLTEwLjgtNC4xLTE0LjggMEw0MzYgODJsNTguMSA1OC4xIDMwLjktMzAuOWM0LTQuMiA0LTEwLjgtLjEtMTQuOXpcIi8+PC9zdmc+YDtcblxuZXhwb3J0IGNvbnN0IFRBRyA9IFwiaW5pdGlhdGl2ZS10cmFja2VyLXRhZ3NcIjtcbmNvbnN0IFRBR19JQ09OID0gYDxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiIGZvY3VzYWJsZT1cImZhbHNlXCIgZGF0YS1wcmVmaXg9XCJmYXNcIiBkYXRhLWljb249XCJ0YWdcIiBjbGFzcz1cInN2Zy1pbmxpbmUtLWZhIGZhLXRhZyBmYS13LTE2XCIgcm9sZT1cImltZ1wiIHZpZXdCb3g9XCIwIDAgNTEyIDUxMlwiPjxwYXRoIGZpbGw9XCJjdXJyZW50Q29sb3JcIiBkPVwiTTAgMjUyLjExOFY0OEMwIDIxLjQ5IDIxLjQ5IDAgNDggMGgyMDQuMTE4YTQ4IDQ4IDAgMCAxIDMzLjk0MSAxNC4wNTlsMjExLjg4MiAyMTEuODgyYzE4Ljc0NSAxOC43NDUgMTguNzQ1IDQ5LjEzNyAwIDY3Ljg4MkwyOTMuODIzIDQ5Ny45NDFjLTE4Ljc0NSAxOC43NDUtNDkuMTM3IDE4Ljc0NS02Ny44ODIgMEwxNC4wNTkgMjg2LjA1OUE0OCA0OCAwIDAgMSAwIDI1Mi4xMTh6TTExMiA2NGMtMjYuNTEgMC00OCAyMS40OS00OCA0OHMyMS40OSA0OCA0OCA0OCA0OC0yMS40OSA0OC00OC0yMS40OS00OC00OC00OHpcIi8+PC9zdmc+YDtcblxuZXhwb3J0IGNvbnN0IElOSVRJQVRJVkUgPSBcImluaXRpYXRpdmUtdHJhY2tlci1pbml0aWF0aXZlXCI7XG5jb25zdCBJTklUSUFUSVZFX0lDT04gPSBgPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCIgZm9jdXNhYmxlPVwiZmFsc2VcIiBkYXRhLXByZWZpeD1cImZhc1wiIGRhdGEtaWNvbj1cInJ1bm5pbmdcIiBjbGFzcz1cInN2Zy1pbmxpbmUtLWZhIGZhLXJ1bm5pbmcgZmEtdy0xM1wiIHJvbGU9XCJpbWdcIiB2aWV3Qm94PVwiMCAwIDQxNiA1MTJcIj48cGF0aCBmaWxsPVwiY3VycmVudENvbG9yXCIgZD1cIk0yNzIgOTZjMjYuNTEgMCA0OC0yMS40OSA0OC00OFMyOTguNTEgMCAyNzIgMHMtNDggMjEuNDktNDggNDggMjEuNDkgNDggNDggNDh6TTExMy42OSAzMTcuNDdsLTE0LjggMzQuNTJIMzJjLTE3LjY3IDAtMzIgMTQuMzMtMzIgMzJzMTQuMzMgMzIgMzIgMzJoNzcuNDVjMTkuMjUgMCAzNi41OC0xMS40NCA0NC4xMS0yOS4wOWw4Ljc5LTIwLjUyLTEwLjY3LTYuM2MtMTcuMzItMTAuMjMtMzAuMDYtMjUuMzctMzcuOTktNDIuNjF6TTM4NCAyMjMuOTloLTQ0LjAzbC0yNi4wNi01My4yNWMtMTIuNS0yNS41NS0zNS40NS00NC4yMy02MS43OC01MC45NGwtNzEuMDgtMjEuMTRjLTI4LjMtNi44LTU3Ljc3LS41NS04MC44NCAxNy4xNGwtMzkuNjcgMzAuNDFjLTE0LjAzIDEwLjc1LTE2LjY5IDMwLjgzLTUuOTIgNDQuODZzMzAuODQgMTYuNjYgNDQuODYgNS45MmwzOS42OS0zMC40MWM3LjY3LTUuODkgMTcuNDQtOCAyNS4yNy02LjE0bDE0LjcgNC4zNy0zNy40NiA4Ny4zOWMtMTIuNjIgMjkuNDgtMS4zMSA2NC4wMSAyNi4zIDgwLjMxbDg0Ljk4IDUwLjE3LTI3LjQ3IDg3LjczYy01LjI4IDE2Ljg2IDQuMTEgMzQuODEgMjAuOTcgNDAuMDkgMy4xOSAxIDYuNDEgMS40OCA5LjU4IDEuNDggMTMuNjEgMCAyNi4yMy04Ljc3IDMwLjUyLTIyLjQ1bDMxLjY0LTEwMS4wNmM1LjkxLTIwLjc3LTIuODktNDMuMDgtMjEuNjQtNTQuMzlsLTYxLjI0LTM2LjE0IDMxLjMxLTc4LjI4IDIwLjI3IDQxLjQzYzggMTYuMzQgMjQuOTIgMjYuODkgNDMuMTEgMjYuODlIMzg0YzE3LjY3IDAgMzItMTQuMzMgMzItMzJzLTE0LjMzLTMxLjk5LTMyLTMxLjk5elwiLz48L3N2Zz5gO1xuXG5leHBvcnQgY29uc3QgUkVETyA9IFwiaW5pdGlhdGl2ZS10cmFja2VyLXJlZG9cIjtcbmNvbnN0IFJFRE9fSUNPTiA9IGA8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiBhcmlhLWhpZGRlbj1cInRydWVcIiBmb2N1c2FibGU9XCJmYWxzZVwiIGRhdGEtcHJlZml4PVwiZmFzXCIgZGF0YS1pY29uPVwicmVkb1wiIGNsYXNzPVwic3ZnLWlubGluZS0tZmEgZmEtcmVkbyBmYS13LTE2XCIgcm9sZT1cImltZ1wiIHZpZXdCb3g9XCIwIDAgNTEyIDUxMlwiPjxwYXRoIGZpbGw9XCJjdXJyZW50Q29sb3JcIiBkPVwiTTUwMC4zMyAwaC00Ny40MWExMiAxMiAwIDAgMC0xMiAxMi41N2w0IDgyLjc2QTI0Ny40MiAyNDcuNDIgMCAwIDAgMjU2IDhDMTE5LjM0IDggNy45IDExOS41MyA4IDI1Ni4xOSA4LjEgMzkzLjA3IDExOS4xIDUwNCAyNTYgNTA0YTI0Ny4xIDI0Ny4xIDAgMCAwIDE2Ni4xOC02My45MSAxMiAxMiAwIDAgMCAuNDgtMTcuNDNsLTM0LTM0YTEyIDEyIDAgMCAwLTE2LjM4LS41NUExNzYgMTc2IDAgMSAxIDQwMi4xIDE1Ny44bC0xMDEuNTMtNC44N2ExMiAxMiAwIDAgMC0xMi41NyAxMnY0Ny40MWExMiAxMiAwIDAgMCAxMiAxMmgyMDAuMzNhMTIgMTIgMCAwIDAgMTItMTJWMTJhMTIgMTIgMCAwIDAtMTItMTJ6XCIvPjwvc3ZnPmA7XG5cbmV4cG9ydCBjb25zdCBORVcgPSBcImluaXRpYXRpdmUtdHJhY2tlci1uZXdcIjtcbmNvbnN0IE5FV19JQ09OID0gYDxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiIGZvY3VzYWJsZT1cImZhbHNlXCIgZGF0YS1wcmVmaXg9XCJmYXJcIiBkYXRhLWljb249XCJwbHVzLXNxdWFyZVwiIGNsYXNzPVwic3ZnLWlubGluZS0tZmEgZmEtcGx1cy1zcXVhcmUgZmEtdy0xNFwiIHJvbGU9XCJpbWdcIiB2aWV3Qm94PVwiMCAwIDQ0OCA1MTJcIj48cGF0aCBmaWxsPVwiY3VycmVudENvbG9yXCIgZD1cIk0zNTIgMjQwdjMyYzAgNi42LTUuNCAxMi0xMiAxMmgtODh2ODhjMCA2LjYtNS40IDEyLTEyIDEyaC0zMmMtNi42IDAtMTItNS40LTEyLTEydi04OGgtODhjLTYuNiAwLTEyLTUuNC0xMi0xMnYtMzJjMC02LjYgNS40LTEyIDEyLTEyaDg4di04OGMwLTYuNiA1LjQtMTIgMTItMTJoMzJjNi42IDAgMTIgNS40IDEyIDEydjg4aDg4YzYuNiAwIDEyIDUuNCAxMiAxMnptOTYtMTYwdjM1MmMwIDI2LjUtMjEuNSA0OC00OCA0OEg0OGMtMjYuNSAwLTQ4LTIxLjUtNDgtNDhWODBjMC0yNi41IDIxLjUtNDggNDgtNDhoMzUyYzI2LjUgMCA0OCAyMS41IDQ4IDQ4em0tNDggMzQ2Vjg2YzAtMy4zLTIuNy02LTYtNkg1NGMtMy4zIDAtNiAyLjctNiA2djM0MGMwIDMuMyAyLjcgNiA2IDZoMzQwYzMuMyAwIDYtMi43IDYtNnpcIi8+PC9zdmc+YDtcblxuZXhwb3J0IGNvbnN0IERJQ0UgPSBcImluaXRpYXRpdmUtdHJhY2tlci1kaWNlXCI7XG5jb25zdCBESUNFX0lDT04gPSBgPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCIgZm9jdXNhYmxlPVwiZmFsc2VcIiBkYXRhLXByZWZpeD1cImZhc1wiIGRhdGEtaWNvbj1cImRpY2VcIiBjbGFzcz1cInN2Zy1pbmxpbmUtLWZhIGZhLWRpY2UgZmEtdy0yMFwiIHJvbGU9XCJpbWdcIiB2aWV3Qm94PVwiMCAwIDY0MCA1MTJcIj48cGF0aCBmaWxsPVwiY3VycmVudENvbG9yXCIgZD1cIk01OTIgMTkySDQ3My4yNmMxMi42OSAyOS41OSA3LjEyIDY1LjItMTcgODkuMzJMMzIwIDQxNy41OFY0NjRjMCAyNi41MSAyMS40OSA0OCA0OCA0OGgyMjRjMjYuNTEgMCA0OC0yMS40OSA0OC00OFYyNDBjMC0yNi41MS0yMS40OS00OC00OC00OHpNNDgwIDM3NmMtMTMuMjUgMC0yNC0xMC43NS0yNC0yNCAwLTEzLjI2IDEwLjc1LTI0IDI0LTI0czI0IDEwLjc0IDI0IDI0YzAgMTMuMjUtMTAuNzUgMjQtMjQgMjR6bS00Ni4zNy0xODYuN0wyNTguNyAxNC4zN2MtMTkuMTYtMTkuMTYtNTAuMjMtMTkuMTYtNjkuMzkgMEwxNC4zNyAxODkuM2MtMTkuMTYgMTkuMTYtMTkuMTYgNTAuMjMgMCA2OS4zOUwxODkuMyA0MzMuNjNjMTkuMTYgMTkuMTYgNTAuMjMgMTkuMTYgNjkuMzkgMEw0MzMuNjMgMjU4LjdjMTkuMTYtMTkuMTcgMTkuMTYtNTAuMjQgMC02OS40ek05NiAyNDhjLTEzLjI1IDAtMjQtMTAuNzUtMjQtMjQgMC0xMy4yNiAxMC43NS0yNCAyNC0yNHMyNCAxMC43NCAyNCAyNGMwIDEzLjI1LTEwLjc1IDI0LTI0IDI0em0xMjggMTI4Yy0xMy4yNSAwLTI0LTEwLjc1LTI0LTI0IDAtMTMuMjYgMTAuNzUtMjQgMjQtMjRzMjQgMTAuNzQgMjQgMjRjMCAxMy4yNS0xMC43NSAyNC0yNCAyNHptMC0xMjhjLTEzLjI1IDAtMjQtMTAuNzUtMjQtMjQgMC0xMy4yNiAxMC43NS0yNCAyNC0yNHMyNCAxMC43NCAyNCAyNGMwIDEzLjI1LTEwLjc1IDI0LTI0IDI0em0wLTEyOGMtMTMuMjUgMC0yNC0xMC43NS0yNC0yNCAwLTEzLjI2IDEwLjc1LTI0IDI0LTI0czI0IDEwLjc0IDI0IDI0YzAgMTMuMjUtMTAuNzUgMjQtMjQgMjR6bTEyOCAxMjhjLTEzLjI1IDAtMjQtMTAuNzUtMjQtMjQgMC0xMy4yNiAxMC43NS0yNCAyNC0yNHMyNCAxMC43NCAyNCAyNGMwIDEzLjI1LTEwLjc1IDI0LTI0IDI0elwiLz48L3N2Zz5gO1xuXG5leHBvcnQgY29uc3QgQ09QWSA9IFwiaW5pdGlhdGl2ZS10cmFja2VyLWNvcHlcIjtcbmNvbnN0IENPUFlfSUNPTiA9IGA8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiBhcmlhLWhpZGRlbj1cInRydWVcIiBmb2N1c2FibGU9XCJmYWxzZVwiIGRhdGEtcHJlZml4PVwiZmFyXCIgZGF0YS1pY29uPVwiY29weVwiIGNsYXNzPVwic3ZnLWlubGluZS0tZmEgZmEtY29weSBmYS13LTE0XCIgcm9sZT1cImltZ1wiIHZpZXdCb3g9XCIwIDAgNDQ4IDUxMlwiPjxwYXRoIGZpbGw9XCJjdXJyZW50Q29sb3JcIiBkPVwiTTQzMy45NDEgNjUuOTQxbC01MS44ODItNTEuODgyQTQ4IDQ4IDAgMCAwIDM0OC4xMTggMEgxNzZjLTI2LjUxIDAtNDggMjEuNDktNDggNDh2NDhINDhjLTI2LjUxIDAtNDggMjEuNDktNDggNDh2MzIwYzAgMjYuNTEgMjEuNDkgNDggNDggNDhoMjI0YzI2LjUxIDAgNDgtMjEuNDkgNDgtNDh2LTQ4aDgwYzI2LjUxIDAgNDgtMjEuNDkgNDgtNDhWOTkuODgyYTQ4IDQ4IDAgMCAwLTE0LjA1OS0zMy45NDF6TTI2NiA0NjRINTRhNiA2IDAgMCAxLTYtNlYxNTBhNiA2IDAgMCAxIDYtNmg3NHYyMjRjMCAyNi41MSAyMS40OSA0OCA0OCA0OGg5NnY0MmE2IDYgMCAwIDEtNiA2em0xMjgtOTZIMTgyYTYgNiAwIDAgMS02LTZWNTRhNiA2IDAgMCAxIDYtNmgxMDZ2ODhjMCAxMy4yNTUgMTAuNzQ1IDI0IDI0IDI0aDg4djIwMmE2IDYgMCAwIDEtNiA2em02LTI1NmgtNjRWNDhoOS42MzJjMS41OTEgMCAzLjExNy42MzIgNC4yNDMgMS43NTdsNDguMzY4IDQ4LjM2OGE2IDYgMCAwIDEgMS43NTcgNC4yNDNWMTEyelwiLz48L3N2Zz5gO1xuXG5leHBvcnQgY29uc3QgUExBWUVSX1ZJRVcgPSBcImluaXRpYXRpdmUtdHJhY2tlci1wbGF5ZXItdmlld1wiO1xuY29uc3QgUExBWUVSX1ZJRVdfSUNPTiA9IGA8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDUxMiA1MTJcIj48IS0tIEZvbnQgQXdlc29tZSBQcm8gNS4xNS40IGJ5IEBmb250YXdlc29tZSAtIGh0dHBzOi8vZm9udGF3ZXNvbWUuY29tIExpY2Vuc2UgLSBodHRwczovL2ZvbnRhd2Vzb21lLmNvbS9saWNlbnNlIChDb21tZXJjaWFsIExpY2Vuc2UpIC0tPjxwYXRoIGQ9XCJNNDE2IDQ4YzAtOC44NC03LjE2LTE2LTE2LTE2aC02NGMtOC44NCAwLTE2IDcuMTYtMTYgMTZ2NDhoOTZWNDh6TTYzLjkxIDE1OS45OUM2MS40IDI1My44NCAzLjQ2IDI3NC4yMiAwIDQwNHY0NGMwIDE3LjY3IDE0LjMzIDMyIDMyIDMyaDk2YzE3LjY3IDAgMzItMTQuMzMgMzItMzJWMjg4aDMyVjEyOEg5NS44NGMtMTcuNjMgMC0zMS40NSAxNC4zNy0zMS45MyAzMS45OXptMzg0LjE4IDBjLS40OC0xNy42Mi0xNC4zLTMxLjk5LTMxLjkzLTMxLjk5SDMyMHYxNjBoMzJ2MTYwYzAgMTcuNjcgMTQuMzMgMzIgMzIgMzJoOTZjMTcuNjcgMCAzMi0xNC4zMyAzMi0zMnYtNDRjLTMuNDYtMTI5Ljc4LTYxLjQtMTUwLjE2LTYzLjkxLTI0NC4wMXpNMTc2IDMyaC02NGMtOC44NCAwLTE2IDcuMTYtMTYgMTZ2NDhoOTZWNDhjMC04Ljg0LTcuMTYtMTYtMTYtMTZ6bTQ4IDI1Nmg2NFYxMjhoLTY0djE2MHpcIi8+PC9zdmc+YDtcblxuZXhwb3J0IGNvbnN0IEJVSUxERVJfVklFVyA9IFwiaW50aWF0aXZlLXRyYWNrZXItZW5jb3VudGVyLWJ1aWxkZXJcIjtcbmNvbnN0IEJVSUxERVJfSUNPTiA9IGA8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiBmaWxsPVwiY3VycmVudENvbG9yXCIgdmlld0JveD1cIjAgMCA1NzYgNTEyXCI+PCEtLSEgRm9udCBBd2Vzb21lIFBybyA2LjIuMCBieSBAZm9udGF3ZXNvbWUgLSBodHRwczovL2ZvbnRhd2Vzb21lLmNvbSBMaWNlbnNlIC0gaHR0cHM6Ly9mb250YXdlc29tZS5jb20vbGljZW5zZSAoQ29tbWVyY2lhbCBMaWNlbnNlKSBDb3B5cmlnaHQgMjAyMiBGb250aWNvbnMsIEluYy4gLS0+PHBhdGggZD1cIk00MTMuNSAyMzcuNWMtMjguMiA0LjgtNTguMi0zLjYtODAtMjUuNGwtMzguMS0zOC4xQzI4MC40IDE1OSAyNzIgMTM4LjggMjcyIDExNy42VjEwNS41TDE5Mi4zIDYyYy01LjMtMi45LTguNi04LjYtOC4zLTE0LjdzMy45LTExLjUgOS41LTE0bDQ3LjItMjFDMjU5LjEgNC4yIDI3OSAwIDI5OS4yIDBoMTguMWMzNi43IDAgNzIgMTQgOTguNyAzOS4xbDQ0LjYgNDJjMjQuMiAyMi44IDMzLjIgNTUuNyAyNi42IDg2TDUwMyAxODNsOC04YzkuNC05LjQgMjQuNi05LjQgMzMuOSAwbDI0IDI0YzkuNCA5LjQgOS40IDI0LjYgMCAzMy45bC04OCA4OGMtOS40IDkuNC0yNC42IDkuNC0zMy45IDBsLTI0LTI0Yy05LjQtOS40LTkuNC0yNC42IDAtMzMuOWw4LTgtMTcuNS0xNy41ek0yNy40IDM3Ny4xTDI2MC45IDE4Mi42YzMuNSA0LjkgNy41IDkuNiAxMS44IDE0bDM4LjEgMzguMWM2IDYgMTIuNCAxMS4yIDE5LjIgMTUuN0wxMzQuOSA0ODQuNmMtMTQuNSAxNy40LTM2IDI3LjQtNTguNiAyNy40QzM0LjEgNTEyIDAgNDc3LjggMCA0MzUuN2MwLTIyLjYgMTAuMS00NC4xIDI3LjQtNTguNnpcIi8+PC9zdmc+YDtcbiIsICJleHBvcnQgKiBmcm9tIFwiLi9jb25zdGFudHNcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2ljb25zXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9jb25kaXRpb25zXCI7XG5cbmV4cG9ydCBjb25zdCBjb252ZXJ0RnJhY3Rpb24gPSAoczogc3RyaW5nIHwgbnVtYmVyKTogbnVtYmVyID0+IHtcbiAgICBpZiAodHlwZW9mIHMgPT0gXCJudW1iZXJcIikgcmV0dXJuIHM7XG4gICAgaWYgKCFzIHx8IHMgPT0gXCJ1bmRlZmluZWRcIiB8fCAhcy5sZW5ndGgpIHJldHVybiAwO1xuXG4gICAgbGV0IHNwbGl0ID0gcy5zcGxpdChcIi9cIik7XG4gICAgaWYgKHNwbGl0Lmxlbmd0aCA9PSAxKSB7XG4gICAgICAgIGlmIChpc05hTihOdW1iZXIocykpKSB7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gTnVtYmVyKHMpO1xuICAgIH1cbiAgICByZXR1cm4gTnVtYmVyKHNwbGl0WzBdKSAvIE51bWJlcihzcGxpdFsxXSk7XG59O1xuIiwgImltcG9ydCB7XG4gICAgYWRkSWNvbixcbiAgICBFeHRyYUJ1dHRvbkNvbXBvbmVudCxcbiAgICBub3JtYWxpemVQYXRoLFxuICAgIE5vdGljZSxcbiAgICBQbHVnaW5TZXR0aW5nVGFiLFxuICAgIHNldEljb24sXG4gICAgU2V0dGluZyxcbiAgICBUZXh0Q29tcG9uZW50LFxuICAgIFRGb2xkZXJcbn0gZnJvbSBcIm9ic2lkaWFuXCI7XG5cbmltcG9ydCB0eXBlIEluaXRpYXRpdmVUcmFja2VyIGZyb20gXCIuLi9tYWluXCI7XG5cbmltcG9ydCB7XG4gICAgRmlsZVN1Z2dlc3Rpb25Nb2RhbCxcbiAgICBGb2xkZXJTdWdnZXN0aW9uTW9kYWwsXG4gICAgUGxheWVyU3VnZ2VzdGlvbk1vZGFsXG59IGZyb20gXCIuLi91dGlscy9zdWdnZXN0ZXJcIjtcbmltcG9ydCB7XG4gICAgQUMsXG4gICAgQ29uZGl0aW9ucyxcbiAgICBERUZBVUxUX1VOREVGSU5FRCxcbiAgICBFRElULFxuICAgIEhQLFxuICAgIElOSVRJQVRJVkVcbn0gZnJvbSBcIi4uL3V0aWxzXCI7XG5pbXBvcnQgdHlwZSB7IENvbmRpdGlvbiwgSG9tZWJyZXdDcmVhdHVyZSwgSW5wdXRWYWxpZGF0ZSwgUGFydHkgfSBmcm9tIFwiQHR5cGVzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEluaXRpYXRpdmVUcmFja2VyU2V0dGluZ3MgZXh0ZW5kcyBQbHVnaW5TZXR0aW5nVGFiIHtcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHBsdWdpbjogSW5pdGlhdGl2ZVRyYWNrZXIpIHtcbiAgICAgICAgc3VwZXIocGx1Z2luLmFwcCwgcGx1Z2luKTtcbiAgICB9XG4gICAgYXN5bmMgZGlzcGxheSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGxldCB7IGNvbnRhaW5lckVsIH0gPSB0aGlzO1xuXG4gICAgICAgICAgICBjb250YWluZXJFbC5lbXB0eSgpO1xuICAgICAgICAgICAgY29udGFpbmVyRWwuYWRkQ2xhc3MoXCJpbml0aWF0aXZlLXRyYWNrZXItc2V0dGluZ3NcIik7XG5cbiAgICAgICAgICAgIGNvbnRhaW5lckVsLmNyZWF0ZUVsKFwiaDJcIiwgeyB0ZXh0OiBcIkluaXRpYXRpdmUgVHJhY2tlciBTZXR0aW5nc1wiIH0pO1xuXG4gICAgICAgICAgICB0aGlzLl9kaXNwbGF5QmFzZShjb250YWluZXJFbC5jcmVhdGVEaXYoKSk7XG4gICAgICAgICAgICBpZiAoIXRoaXMucGx1Z2luLmRhdGEub3BlblN0YXRlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uZGF0YS5vcGVuU3RhdGUgPSB7XG4gICAgICAgICAgICAgICAgICAgIGJhdHRsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgcGxheWVyOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBwYXJ0eTogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgcGx1Z2luOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBzdGF0dXM6IHRydWVcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fZGlzcGxheUJhdHRsZShcbiAgICAgICAgICAgICAgICBjb250YWluZXJFbC5jcmVhdGVFbChcImRldGFpbHNcIiwge1xuICAgICAgICAgICAgICAgICAgICBjbHM6IFwiaW5pdGlhdGl2ZS10cmFja2VyLWFkZGl0aW9uYWwtY29udGFpbmVyXCIsXG4gICAgICAgICAgICAgICAgICAgIGF0dHI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLih0aGlzLnBsdWdpbi5kYXRhLm9wZW5TdGF0ZS5wbGF5ZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHsgb3BlbjogdHJ1ZSB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiB7fSlcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgdGhpcy5fZGlzcGxheVBsYXllcnMoXG4gICAgICAgICAgICAgICAgY29udGFpbmVyRWwuY3JlYXRlRWwoXCJkZXRhaWxzXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgY2xzOiBcImluaXRpYXRpdmUtdHJhY2tlci1hZGRpdGlvbmFsLWNvbnRhaW5lclwiLFxuICAgICAgICAgICAgICAgICAgICBhdHRyOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAuLi4odGhpcy5wbHVnaW4uZGF0YS5vcGVuU3RhdGUucGxheWVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyB7IG9wZW46IHRydWUgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDoge30pXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRoaXMuX2Rpc3BsYXlQYXJ0aWVzKFxuICAgICAgICAgICAgICAgIGNvbnRhaW5lckVsLmNyZWF0ZUVsKFwiZGV0YWlsc1wiLCB7XG4gICAgICAgICAgICAgICAgICAgIGNsczogXCJpbml0aWF0aXZlLXRyYWNrZXItYWRkaXRpb25hbC1jb250YWluZXJcIixcbiAgICAgICAgICAgICAgICAgICAgYXR0cjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4uKHRoaXMucGx1Z2luLmRhdGEub3BlblN0YXRlLnBhcnR5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyB7IG9wZW46IHRydWUgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDoge30pXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRoaXMuX2Rpc3BsYXlTdGF0dXNlcyhcbiAgICAgICAgICAgICAgICBjb250YWluZXJFbC5jcmVhdGVFbChcImRldGFpbHNcIiwge1xuICAgICAgICAgICAgICAgICAgICBjbHM6IFwiaW5pdGlhdGl2ZS10cmFja2VyLWFkZGl0aW9uYWwtY29udGFpbmVyXCIsXG4gICAgICAgICAgICAgICAgICAgIGF0dHI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLih0aGlzLnBsdWdpbi5kYXRhLm9wZW5TdGF0ZS5zdGF0dXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHsgb3BlbjogdHJ1ZSB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiB7fSlcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgdGhpcy5fZGlzcGxheUludGVncmF0aW9ucyhcbiAgICAgICAgICAgICAgICBjb250YWluZXJFbC5jcmVhdGVFbChcImRldGFpbHNcIiwge1xuICAgICAgICAgICAgICAgICAgICBjbHM6IFwiaW5pdGlhdGl2ZS10cmFja2VyLWFkZGl0aW9uYWwtY29udGFpbmVyXCIsXG4gICAgICAgICAgICAgICAgICAgIGF0dHI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLih0aGlzLnBsdWdpbi5kYXRhLm9wZW5TdGF0ZS5wbHVnaW5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHsgb3BlbjogdHJ1ZSB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiB7fSlcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgdGhpcy5fZGlzcGxheUhvbWVicmV3KFxuICAgICAgICAgICAgICAgIGNvbnRhaW5lckVsLmNyZWF0ZURpdihcImluaXRpYXRpdmUtdHJhY2tlci1hZGRpdGlvbmFsLWNvbnRhaW5lclwiKVxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgY29uc3QgZGl2ID0gY29udGFpbmVyRWwuY3JlYXRlRGl2KFwiY29mZmVlXCIpO1xuICAgICAgICAgICAgZGl2LmNyZWF0ZUVsKFwiYVwiLCB7XG4gICAgICAgICAgICAgICAgaHJlZjogXCJodHRwczovL3d3dy5idXltZWFjb2ZmZWUuY29tL3ZhbGVudGluZTE5NVwiXG4gICAgICAgICAgICB9KS5jcmVhdGVFbChcImltZ1wiLCB7XG4gICAgICAgICAgICAgICAgYXR0cjoge1xuICAgICAgICAgICAgICAgICAgICBzcmM6IFwiaHR0cHM6Ly9pbWcuYnV5bWVhY29mZmVlLmNvbS9idXR0b24tYXBpLz90ZXh0PUJ1eSBtZSBhIGNvZmZlZSZlbW9qaT1cdTI2MTUmc2x1Zz12YWxlbnRpbmUxOTUmYnV0dG9uX2NvbG91cj1lM2U3ZWYmZm9udF9jb2xvdXI9MjYyNjI2JmZvbnRfZmFtaWx5PUludGVyJm91dGxpbmVfY29sb3VyPTI2MjYyNiZjb2ZmZWVfY29sb3VyPWZmMDAwMFwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICAgICAgICBuZXcgTm90aWNlKFxuICAgICAgICAgICAgICAgIFwiVGhlcmUgd2FzIGFuIGVycm9yIGRpc3BsYXlpbmcgdGhlIHNldHRpbmdzIHRhYiBmb3IgT2JzaWRpYW4gSW5pdGlhdGl2ZSBUcmFja2VyLlwiXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfZGlzcGxheUJhc2UoY29udGFpbmVyRWw6IEhUTUxEaXZFbGVtZW50KSB7XG4gICAgICAgIGNvbnRhaW5lckVsLmVtcHR5KCk7XG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKS5zZXRIZWFkaW5nKCkuc2V0TmFtZShcIkJhc2ljIFNldHRpbmdzXCIpO1xuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgICAgICAgIC5zZXROYW1lKFwiRGlzcGxheSBCZWdpbm5lciBUaXBzXCIpXG4gICAgICAgICAgICAuc2V0RGVzYyhcbiAgICAgICAgICAgICAgICBcIkRpc3BsYXkgaW5zdHJ1Y3Rpb25zIGluIHRoZSBpbnRpYXRpdmUgdHJhY2tlciwgaGVscGluZyB5b3UgZ2V0IHVzZWQgdG8gdGhlIHdvcmtmbG93LlwiXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAuYWRkVG9nZ2xlKCh0KSA9PiB7XG4gICAgICAgICAgICAgICAgdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5kYXRhLmJlZ2lubmVyVGlwcykub25DaGFuZ2UoXG4gICAgICAgICAgICAgICAgICAgIGFzeW5jICh2KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5kYXRhLmJlZ2lubmVyVGlwcyA9IHY7XG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG4gICAgICAgICAgICAuc2V0TmFtZShcIkRpc3BsYXkgRW5jb3VudGVyIERpZmZpY3VsdHlcIilcbiAgICAgICAgICAgIC5zZXREZXNjKFxuICAgICAgICAgICAgICAgIFwiRGlzcGxheSBlbmNvdW50ZXIgZGlmZmljdWx0eSBiYXNlZCBvbiBjcmVhdHVyZSBDUiBhbmQgcGxheWVyIGxldmVsLiBDcmVhdHVyZXMgd2l0aG91dCBDUiBvciBsZXZlbCB3aWxsIG5vdCBiZSBjb25zaWRlcmVkIGluIHRoZSBjYWxjdWxhdGlvbi5cIlxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgLmFkZFRvZ2dsZSgodCkgPT4ge1xuICAgICAgICAgICAgICAgIHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uZGF0YS5kaXNwbGF5RGlmZmljdWx0eSkub25DaGFuZ2UoXG4gICAgICAgICAgICAgICAgICAgIGFzeW5jICh2KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5kYXRhLmRpc3BsYXlEaWZmaWN1bHR5ID0gdjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgICAgICAgIC5zZXROYW1lKFwiUm9sbCBFcXVpdmFsZW50IENyZWF0dXJlcyBUb2dldGhlclwiKVxuICAgICAgICAgICAgLnNldERlc2MoXG4gICAgICAgICAgICAgICAgXCJFcXVpdmFsZW50IGNyZWF0dXJlcyAoc2FtZSBIUCwgQUMgYW5kIE5hbWUpIHdpbGwgcm9sbCB0aGUgc2FtZSBpbml0aWF0aXZlIGJ5IGRlZmF1bHQuXCJcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIC5hZGRUb2dnbGUoKHQpID0+IHtcbiAgICAgICAgICAgICAgICB0LnNldFZhbHVlKHRoaXMucGx1Z2luLmRhdGEuY29uZGVuc2UpLm9uQ2hhbmdlKGFzeW5jICh2KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLmRhdGEuY29uZGVuc2UgPSB2O1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgICAgICAgIC5zZXROYW1lKFwiVXNlIExlZ2FjeSAnQWRkIENyZWF0dXJlcydcIilcbiAgICAgICAgICAgIC5zZXREZXNjKFwiVXNlIHRoZSBsZWdhY3kgd2F5IHRvIGFkZCBjcmVhdHVyZXMuXCIpXG4gICAgICAgICAgICAuYWRkVG9nZ2xlKCh0KSA9PiB7XG4gICAgICAgICAgICAgICAgdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5kYXRhLnVzZUxlZ2FjeSkub25DaGFuZ2UoYXN5bmMgKHYpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uZGF0YS51c2VMZWdhY3kgPSB2O1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cbiAgICBwcml2YXRlIGFzeW5jIF9kaXNwbGF5QmF0dGxlKGFkZGl0aW9uYWxDb250YWluZXI6IEhUTUxEZXRhaWxzRWxlbWVudCkge1xuICAgICAgICBhZGRpdGlvbmFsQ29udGFpbmVyLmVtcHR5KCk7XG4gICAgICAgIGFkZGl0aW9uYWxDb250YWluZXIub250b2dnbGUgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnBsdWdpbi5kYXRhLm9wZW5TdGF0ZS5iYXR0bGUgPSBhZGRpdGlvbmFsQ29udGFpbmVyLm9wZW47XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHN1bW1hcnkgPSBhZGRpdGlvbmFsQ29udGFpbmVyLmNyZWF0ZUVsKFwic3VtbWFyeVwiKTtcbiAgICAgICAgbmV3IFNldHRpbmcoc3VtbWFyeSkuc2V0SGVhZGluZygpLnNldE5hbWUoXCJCYXR0bGVcIik7XG4gICAgICAgIHN1bW1hcnkuY3JlYXRlRGl2KFwiY29sbGFwc2VyXCIpLmNyZWF0ZURpdihcImhhbmRsZVwiKTtcbiAgICAgICAgbmV3IFNldHRpbmcoYWRkaXRpb25hbENvbnRhaW5lcilcbiAgICAgICAgICAgIC5zZXROYW1lKFwiQ2xhbXAgTWluaW11bSBIUFwiKVxuICAgICAgICAgICAgLnNldERlc2MoXG4gICAgICAgICAgICAgICAgXCJXaGVuIGEgY3JlYXR1cmUgdGFrZXMgZGFtYWdlIHRoYXQgd291bGQgcmVkdWNlIGl0cyBIUCBiZWxvdyAwLCBpdHMgSFAgaXMgc2V0IHRvIDAgaW5zdGVhZC5cIlxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgLmFkZFRvZ2dsZSgodCkgPT4ge1xuICAgICAgICAgICAgICAgIHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uZGF0YS5jbGFtcCkub25DaGFuZ2UoYXN5bmMgKHYpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uZGF0YS5jbGFtcCA9IHY7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIG5ldyBTZXR0aW5nKGFkZGl0aW9uYWxDb250YWluZXIpXG4gICAgICAgICAgICAuc2V0TmFtZShcIk92ZXJmbG93IEhlYWxpbmdcIilcbiAgICAgICAgICAgIC5zZXREZXNjKFxuICAgICAgICAgICAgICAgIFwiU2V0IHdoYXQgaGFwcGVucyB0byBoZWFsaW5nIHdoaWNoIGdvZXMgYWJvdmUgY3JlYXR1cmVzJyBtYXggSFAgdGhyZXNob2xkLlwiXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAuYWRkRHJvcGRvd24oKGQpID0+IHtcbiAgICAgICAgICAgICAgICBkLmFkZE9wdGlvbihcImlnbm9yZVwiLCBcIklnbm9yZVwiKTtcbiAgICAgICAgICAgICAgICBkLmFkZE9wdGlvbihcInRlbXBcIiwgXCJBZGQgdG8gdGVtcCBIUFwiKTtcbiAgICAgICAgICAgICAgICBkLmFkZE9wdGlvbihcImN1cnJlbnRcIiwgXCJBZGQgdG8gY3VycmVudCBIUFwiKTtcbiAgICAgICAgICAgICAgICBkLnNldFZhbHVlKHRoaXMucGx1Z2luLmRhdGEuaHBPdmVyZmxvdyA/PyBcImlnbm9yZVwiKTtcbiAgICAgICAgICAgICAgICBkLm9uQ2hhbmdlKGFzeW5jICh2KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLmRhdGEuaHBPdmVyZmxvdyA9IHY7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIG5ldyBTZXR0aW5nKGFkZGl0aW9uYWxDb250YWluZXIpXG4gICAgICAgICAgICAuc2V0TmFtZShcIkF1dG9tYXRpYyBVbmNvbnNjaW91cyBTdGF0dXMgQXBwbGljYXRpb25cIilcbiAgICAgICAgICAgIC5zZXREZXNjKFxuICAgICAgICAgICAgICAgICdXaGVuIGEgY3JlYXR1cmUgdGFrZXMgZGFtYWdlIHRoYXQgd291bGQgcmVkdWNlIGl0cyBIUCBiZWxvdyAwLCBpdCBnYWlucyB0aGUgXCJVbmNvbnNjaW91c1wiIHN0YXR1cyBlZmZlY3QuJ1xuICAgICAgICAgICAgKVxuICAgICAgICAgICAgLmFkZFRvZ2dsZSgodCkgPT4ge1xuICAgICAgICAgICAgICAgIHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uZGF0YS5hdXRvU3RhdHVzKS5vbkNoYW5nZShhc3luYyAodikgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5kYXRhLmF1dG9TdGF0dXMgPSB2O1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICBuZXcgU2V0dGluZyhhZGRpdGlvbmFsQ29udGFpbmVyKVxuICAgICAgICAgICAgLnNldE5hbWUoXCJBZGRpdGl2ZSBUZW1wb3JhcnkgSFBcIilcbiAgICAgICAgICAgIC5zZXREZXNjKFxuICAgICAgICAgICAgICAgIFwiQW55IHRlbXBvcmFyeSBIUCBhZGRlZCB0byBhIGNyZWF0dXJlIHdpbGwgYmUgYWRkZWQgb24gdG9wIG9mIGV4aXN0aW5nIHRlbXBvcmFyeSBIUC5cIlxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgLmFkZFRvZ2dsZSgodCkgPT4ge1xuICAgICAgICAgICAgICAgIHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uZGF0YS5hZGRpdGl2ZVRlbXApLm9uQ2hhbmdlKFxuICAgICAgICAgICAgICAgICAgICBhc3luYyAodikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uZGF0YS5hZGRpdGl2ZVRlbXAgPSB2O1xuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgbmV3IFNldHRpbmcoYWRkaXRpb25hbENvbnRhaW5lcilcbiAgICAgICAgICAgIC5zZXROYW1lKFwiTG9nIEJhdHRsZXNcIilcbiAgICAgICAgICAgIC5zZXREZXNjKFxuICAgICAgICAgICAgICAgIFwiQWN0aW9ucyB0YWtlbiBkdXJpbmcgYmF0dGxlIHdpbGwgYmUgbG9nZ2VkIHRvIHRoZSBzcGVjaWZpZWQgbG9nIGZvbGRlci5cIlxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgLmFkZFRvZ2dsZSgodCkgPT5cbiAgICAgICAgICAgICAgICB0LnNldFZhbHVlKHRoaXMucGx1Z2luLmRhdGEubG9nZ2luZykub25DaGFuZ2UoYXN5bmMgKHYpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uZGF0YS5sb2dnaW5nID0gdjtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgY29uc3QgZXhpc3RzID0gYXdhaXQgdGhpcy5wbHVnaW4uYXBwLnZhdWx0LmFkYXB0ZXIuZXhpc3RzKFxuICAgICAgICAgICAgdGhpcy5wbHVnaW4uZGF0YS5sb2dGb2xkZXJcbiAgICAgICAgKTtcbiAgICAgICAgbmV3IFNldHRpbmcoYWRkaXRpb25hbENvbnRhaW5lcilcbiAgICAgICAgICAgIC5zZXROYW1lKFwiTG9nIEZvbGRlclwiKVxuICAgICAgICAgICAgLnNldERlc2MoXG4gICAgICAgICAgICAgICAgY3JlYXRlRnJhZ21lbnQoYXN5bmMgKGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZS5jcmVhdGVTcGFuKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IFwiQSBuZXcgbm90ZSB3aWxsIGJlIGNyZWF0ZWQgaW4gdGhpcyBmb2xkZXIgZm9yIGVhY2ggYmF0dGxlLlwiXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBlLmNyZWF0ZUVsKFwiYnJcIik7XG4gICAgICAgICAgICAgICAgICAgIGUuY3JlYXRlU3Bhbih7IHRleHQ6IFwiQ3VycmVudDogXCIgfSk7XG4gICAgICAgICAgICAgICAgICAgIGUuY3JlYXRlRWwoXCJjb2RlXCIsIHsgdGV4dDogdGhpcy5wbHVnaW4uZGF0YS5sb2dGb2xkZXIgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFleGlzdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGUuY3JlYXRlRWwoXCJiclwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IGUuY3JlYXRlRGl2KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiaW5pdGlhdGl2ZS10cmFja2VyLXdhcm5pbmdcIlxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldEljb24oY29udGFpbmVyLCBcImluaXRpYXRpdmUtdHJhY2tlci13YXJuaW5nXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyLmNyZWF0ZVNwYW4oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IFwiVGhpcyBmb2xkZXIgZG9lcyBub3QgZXhpc3QgYW5kIHdpbGwgYmUgY3JlYXRlZCB3aGVuIGEgbG9nIGZpbGUgaXMgd3JpdHRlbiBmb3IgdGhlIGZpcnN0IHRpbWUuXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIC5hZGRUZXh0KCh0KSA9PiB7XG4gICAgICAgICAgICAgICAgdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5kYXRhLmxvZ0ZvbGRlcik7XG4gICAgICAgICAgICAgICAgbGV0IGZvbGRlcnMgPSB0aGlzLmFwcC52YXVsdFxuICAgICAgICAgICAgICAgICAgICAuZ2V0QWxsTG9hZGVkRmlsZXMoKVxuICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKChmKSA9PiBmIGluc3RhbmNlb2YgVEZvbGRlcik7XG4gICAgICAgICAgICAgICAgY29uc3QgbW9kYWwgPSBuZXcgRm9sZGVyU3VnZ2VzdGlvbk1vZGFsKFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmFwcCxcbiAgICAgICAgICAgICAgICAgICAgdCxcbiAgICAgICAgICAgICAgICAgICAgZm9sZGVycyBhcyBURm9sZGVyW11cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIG1vZGFsLm9uQ2xvc2UgPSB0LmlucHV0RWwub25ibHVyID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB2ID0gdC5pbnB1dEVsLnZhbHVlPy50cmltKClcbiAgICAgICAgICAgICAgICAgICAgICAgID8gdC5pbnB1dEVsLnZhbHVlLnRyaW0oKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBcIi9cIjtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uZGF0YS5sb2dGb2xkZXIgPSBub3JtYWxpemVQYXRoKHYpO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXNwbGF5KCk7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cbiAgICBwcml2YXRlIF9kaXNwbGF5UGxheWVycyhhZGRpdGlvbmFsQ29udGFpbmVyOiBIVE1MRGV0YWlsc0VsZW1lbnQpIHtcbiAgICAgICAgYWRkaXRpb25hbENvbnRhaW5lci5lbXB0eSgpO1xuICAgICAgICBhZGRpdGlvbmFsQ29udGFpbmVyLm9udG9nZ2xlID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5wbHVnaW4uZGF0YS5vcGVuU3RhdGUucGxheWVyID0gYWRkaXRpb25hbENvbnRhaW5lci5vcGVuO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBzdW1tYXJ5ID0gYWRkaXRpb25hbENvbnRhaW5lci5jcmVhdGVFbChcInN1bW1hcnlcIik7XG4gICAgICAgIG5ldyBTZXR0aW5nKHN1bW1hcnkpLnNldEhlYWRpbmcoKS5zZXROYW1lKFwiUGxheWVyc1wiKTtcbiAgICAgICAgc3VtbWFyeS5jcmVhdGVEaXYoXCJjb2xsYXBzZXJcIikuY3JlYXRlRGl2KFwiaGFuZGxlXCIpO1xuICAgICAgICBuZXcgU2V0dGluZyhhZGRpdGlvbmFsQ29udGFpbmVyKVxuICAgICAgICAgICAgLnNldE5hbWUoXCJBZGQgTmV3IFBsYXllclwiKVxuICAgICAgICAgICAgLnNldERlc2MoXG4gICAgICAgICAgICAgICAgXCJQbGF5ZXJzIGFkZGVkIGhlcmUgd2lsbCBiZSBhdmFpbGFibGUgdG8gYWRkIHRvIGEgcGFydHkuIElmIHlvdSBkbyBub3QgaGF2ZSBhIHBhcnR5IGNyZWF0ZWQsIGFsbCBwbGF5ZXJzIHdpbGwgYmUgYWRkZWQgdG8gYSBuZXcgZW5jb3VudGVyLlwiXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAuYWRkQnV0dG9uKChidXR0b246IEJ1dHRvbkNvbXBvbmVudCk6IEJ1dHRvbkNvbXBvbmVudCA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IGIgPSBidXR0b25cbiAgICAgICAgICAgICAgICAgICAgLnNldFRvb2x0aXAoXCJBZGQgUGxheWVyXCIpXG4gICAgICAgICAgICAgICAgICAgIC5zZXRCdXR0b25UZXh0KFwiK1wiKVxuICAgICAgICAgICAgICAgICAgICAub25DbGljayhhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtb2RhbCA9IG5ldyBOZXdQbGF5ZXJNb2RhbCh0aGlzLnBsdWdpbik7XG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RhbC5vcGVuKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RhbC5vbkNsb3NlID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbW9kYWwuc2F2ZWQpIHJldHVybjtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVQbGF5ZXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5tb2RhbC5wbGF5ZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllcjogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZGlzcGxheVBsYXllcnMoYWRkaXRpb25hbENvbnRhaW5lcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBiO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IGFkZGl0aW9uYWwgPSBhZGRpdGlvbmFsQ29udGFpbmVyLmNyZWF0ZURpdihcImFkZGl0aW9uYWxcIik7XG4gICAgICAgIGNvbnN0IHBsYXllclZpZXcgPSBhZGRpdGlvbmFsLmNyZWF0ZURpdihcImluaXRpYXRpdmUtdHJhY2tlci1wbGF5ZXJzXCIpO1xuICAgICAgICBpZiAoIXRoaXMucGx1Z2luLmRhdGEucGxheWVycy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGFkZGl0aW9uYWxcbiAgICAgICAgICAgICAgICAuY3JlYXRlRGl2KHtcbiAgICAgICAgICAgICAgICAgICAgYXR0cjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IFwiZGlzcGxheTogZmxleDsganVzdGlmeS1jb250ZW50OiBjZW50ZXI7IHBhZGRpbmctYm90dG9tOiAxOHB4O1wiXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5jcmVhdGVTcGFuKHtcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogXCJObyBzYXZlZCBwbGF5ZXJzISBDcmVhdGUgb25lIHRvIHNlZSBpdCBoZXJlLlwiXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBoZWFkZXJzID0gcGxheWVyVmlldy5jcmVhdGVEaXYoXG4gICAgICAgICAgICAgICAgXCJpbml0aWF0aXZlLXRyYWNrZXItcGxheWVyIGhlYWRlcnNcIlxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgaGVhZGVycy5jcmVhdGVEaXYoeyB0ZXh0OiBcIk5hbWVcIiB9KTtcbiAgICAgICAgICAgIG5ldyBFeHRyYUJ1dHRvbkNvbXBvbmVudChoZWFkZXJzLmNyZWF0ZURpdigpKVxuICAgICAgICAgICAgICAgIC5zZXRJY29uKEhQKVxuICAgICAgICAgICAgICAgIC5zZXRUb29sdGlwKFwiTWF4IEhQXCIpO1xuICAgICAgICAgICAgbmV3IEV4dHJhQnV0dG9uQ29tcG9uZW50KGhlYWRlcnMuY3JlYXRlRGl2KCkpXG4gICAgICAgICAgICAgICAgLnNldEljb24oQUMpXG4gICAgICAgICAgICAgICAgLnNldFRvb2x0aXAoXCJBcm1vciBDbGFzc1wiKTtcbiAgICAgICAgICAgIG5ldyBFeHRyYUJ1dHRvbkNvbXBvbmVudChoZWFkZXJzLmNyZWF0ZURpdigpKVxuICAgICAgICAgICAgICAgIC5zZXRJY29uKElOSVRJQVRJVkUpXG4gICAgICAgICAgICAgICAgLnNldFRvb2x0aXAoXCJJbml0aWF0aXZlIE1vZGlmaWVyXCIpO1xuXG4gICAgICAgICAgICBoZWFkZXJzLmNyZWF0ZURpdigpO1xuXG4gICAgICAgICAgICBmb3IgKGxldCBwbGF5ZXIgb2YgdGhpcy5wbHVnaW4uZGF0YS5wbGF5ZXJzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcGxheWVyRGl2ID0gcGxheWVyVmlldy5jcmVhdGVEaXYoXG4gICAgICAgICAgICAgICAgICAgIFwiaW5pdGlhdGl2ZS10cmFja2VyLXBsYXllclwiXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBwbGF5ZXJEaXYuY3JlYXRlRGl2KHsgdGV4dDogcGxheWVyLm5hbWUgfSk7XG4gICAgICAgICAgICAgICAgcGxheWVyRGl2LmNyZWF0ZURpdih7XG4gICAgICAgICAgICAgICAgICAgIHRleHQ6IGAke3BsYXllci5ocCA/PyBERUZBVUxUX1VOREVGSU5FRH1gXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcGxheWVyRGl2LmNyZWF0ZURpdih7XG4gICAgICAgICAgICAgICAgICAgIHRleHQ6IGAke3BsYXllci5hYyA/PyBERUZBVUxUX1VOREVGSU5FRH1gXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcGxheWVyRGl2LmNyZWF0ZURpdih7XG4gICAgICAgICAgICAgICAgICAgIHRleHQ6IGAke3BsYXllci5tb2RpZmllciA/PyBERUZBVUxUX1VOREVGSU5FRH1gXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgY29uc3QgaWNvbnMgPSBwbGF5ZXJEaXYuY3JlYXRlRGl2KFxuICAgICAgICAgICAgICAgICAgICBcImluaXRpYXRpdmUtdHJhY2tlci1wbGF5ZXItaWNvblwiXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBuZXcgRXh0cmFCdXR0b25Db21wb25lbnQoaWNvbnMuY3JlYXRlRGl2KCkpXG4gICAgICAgICAgICAgICAgICAgIC5zZXRJY29uKFwicGVuY2lsXCIpXG4gICAgICAgICAgICAgICAgICAgIC5zZXRUb29sdGlwKFwiRWRpdFwiKVxuICAgICAgICAgICAgICAgICAgICAub25DbGljaygoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtb2RhbCA9IG5ldyBOZXdQbGF5ZXJNb2RhbCh0aGlzLnBsdWdpbiwgcGxheWVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGFsLm9wZW4oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGFsLm9uQ2xvc2UgPSBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFtb2RhbC5zYXZlZCkgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnVwZGF0ZVBsYXllcihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RhbC5wbGF5ZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLmFwcC53b3Jrc3BhY2UudHJpZ2dlcihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJpbml0aWF0aXZlLXRyYWNrZXI6Y3JlYXR1cmUtdXBkYXRlZC1pbi1zZXR0aW5nc1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZGlzcGxheVBsYXllcnMoYWRkaXRpb25hbENvbnRhaW5lcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBuZXcgRXh0cmFCdXR0b25Db21wb25lbnQoaWNvbnMuY3JlYXRlRGl2KCkpXG4gICAgICAgICAgICAgICAgICAgIC5zZXRJY29uKFwidHJhc2hcIilcbiAgICAgICAgICAgICAgICAgICAgLnNldFRvb2x0aXAoXCJEZWxldGVcIilcbiAgICAgICAgICAgICAgICAgICAgLm9uQ2xpY2soYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uZGF0YS5wbGF5ZXJzID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5kYXRhLnBsYXllcnMuZmlsdGVyKChwKSA9PiBwICE9IHBsYXllcik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZGlzcGxheVBsYXllcnMoYWRkaXRpb25hbENvbnRhaW5lcik7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHByaXZhdGUgX2Rpc3BsYXlQYXJ0aWVzKGFkZGl0aW9uYWxDb250YWluZXI6IEhUTUxEZXRhaWxzRWxlbWVudCkge1xuICAgICAgICBhZGRpdGlvbmFsQ29udGFpbmVyLmVtcHR5KCk7XG4gICAgICAgIGFkZGl0aW9uYWxDb250YWluZXIub250b2dnbGUgPSAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnBsdWdpbi5kYXRhLm9wZW5TdGF0ZS5wYXJ0eSA9IGFkZGl0aW9uYWxDb250YWluZXIub3BlbjtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3Qgc3VtbWFyeSA9IGFkZGl0aW9uYWxDb250YWluZXIuY3JlYXRlRWwoXCJzdW1tYXJ5XCIpO1xuICAgICAgICBuZXcgU2V0dGluZyhzdW1tYXJ5KS5zZXRIZWFkaW5nKCkuc2V0TmFtZShcIlBhcnRpZXNcIik7XG4gICAgICAgIHN1bW1hcnkuY3JlYXRlRGl2KFwiY29sbGFwc2VyXCIpLmNyZWF0ZURpdihcImhhbmRsZVwiKTtcbiAgICAgICAgY29uc3QgZXhwbGFuYXRpb24gPSBhZGRpdGlvbmFsQ29udGFpbmVyLmNyZWF0ZURpdihcbiAgICAgICAgICAgIFwiaW5pdGlhdGl2ZS10cmFja2VyLWV4cGxhbmF0aW9uXCJcbiAgICAgICAgKTtcbiAgICAgICAgZXhwbGFuYXRpb24uY3JlYXRlRWwoXCJzcGFuXCIsIHtcbiAgICAgICAgICAgIHRleHQ6IFwiUGFydGllcyBhbGxvdyB5b3UgdG8gY3JlYXRlIGRpZmZlcmVudCBncm91cHMgb2YgeW91ciBwbGF5ZXJzLiBFYWNoIHBsYXllciBjYW4gYmUgYSBtZW1iZXIgb2YgbXVsdGlwbGUgcGFydGllcy5cIlxuICAgICAgICB9KTtcbiAgICAgICAgZXhwbGFuYXRpb24uY3JlYXRlRWwoXCJiclwiKTtcbiAgICAgICAgZXhwbGFuYXRpb24uY3JlYXRlRWwoXCJiclwiKTtcbiAgICAgICAgZXhwbGFuYXRpb24uY3JlYXRlRWwoXCJzcGFuXCIsIHtcbiAgICAgICAgICAgIHRleHQ6IFwiWW91IGNhbiBzZXQgYSBkZWZhdWx0IHBhcnR5IGZvciBlbmNvdW50ZXJzIHRvIHVzZSwgb3Igc3BlY2lmeSB0aGUgcGFydHkgZm9yIHRoZSBlbmNvdW50ZXIgaW4gdGhlIGVuY291bnRlciBibG9jay4gV2hpbGUgcnVubmluZyBhbiBlbmNvdW50ZXIgaW4gdGhlIHRyYWNrZXIsIHlvdSBjYW4gY2hhbmdlIHRoZSBhY3RpdmUgcGFydHksIGFsbG93aW5nIHlvdSB0byBxdWlja2x5IHN3aXRjaCB3aGljaCBwbGF5ZXJzIGFyZSBpbiBjb21iYXQuXCJcbiAgICAgICAgfSk7XG4gICAgICAgIG5ldyBTZXR0aW5nKGFkZGl0aW9uYWxDb250YWluZXIpXG4gICAgICAgICAgICAuc2V0TmFtZShcIkRlZmF1bHQgUGFydHlcIilcbiAgICAgICAgICAgIC5zZXREZXNjKFxuICAgICAgICAgICAgICAgIFwiVGhlIHRyYWNrZXIgd2lsbCBsb2FkIHRoaXMgcGFydHkgdG8gZW5jb3VudGVycyBieSBkZWZhdWx0LlwiXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAuYWRkRHJvcGRvd24oKGQpID0+IHtcbiAgICAgICAgICAgICAgICBkLmFkZE9wdGlvbihcIm5vbmVcIiwgXCJOb25lXCIpO1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgcGFydHkgb2YgdGhpcy5wbHVnaW4uZGF0YS5wYXJ0aWVzKSB7XG4gICAgICAgICAgICAgICAgICAgIGQuYWRkT3B0aW9uKHBhcnR5Lm5hbWUsIHBhcnR5Lm5hbWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkLnNldFZhbHVlKHRoaXMucGx1Z2luLmRhdGEuZGVmYXVsdFBhcnR5ID8/IFwibm9uZVwiKTtcbiAgICAgICAgICAgICAgICBkLm9uQ2hhbmdlKGFzeW5jICh2KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLmRhdGEuZGVmYXVsdFBhcnR5ID0gdiA9PSBcIm5vbmVcIiA/IG51bGwgOiB2O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICBuZXcgU2V0dGluZyhhZGRpdGlvbmFsQ29udGFpbmVyKVxuICAgICAgICAgICAgLnNldE5hbWUoXCJBZGQgTmV3IFBhcnR5XCIpXG4gICAgICAgICAgICAuYWRkQnV0dG9uKChidXR0b246IEJ1dHRvbkNvbXBvbmVudCk6IEJ1dHRvbkNvbXBvbmVudCA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IGIgPSBidXR0b25cbiAgICAgICAgICAgICAgICAgICAgLnNldFRvb2x0aXAoXCJBZGQgUGFydHlcIilcbiAgICAgICAgICAgICAgICAgICAgLnNldEJ1dHRvblRleHQoXCIrXCIpXG4gICAgICAgICAgICAgICAgICAgIC5vbkNsaWNrKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1vZGFsID0gbmV3IFBhcnR5TW9kYWwodGhpcy5wbHVnaW4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgbW9kYWwub3BlbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbW9kYWwub25DbG9zZSA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobW9kYWwuY2FuY2VsZWQpIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW1vZGFsLnBhcnR5Lm5hbWUgfHwgIW1vZGFsLnBhcnR5Lm5hbWUubGVuZ3RoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5kYXRhLnBhcnRpZXMuZmlsdGVyKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHBhcnR5KSA9PiBwYXJ0eS5uYW1lID09IG1vZGFsLnBhcnR5Lm5hbWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtYXAgPSBuZXcgTWFwKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWy4uLnRoaXMucGx1Z2luLmRhdGEucGFydGllc10ubWFwKChjKSA9PiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYy5uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcC5zZXQobW9kYWwucGFydHkubmFtZSwgbW9kYWwucGFydHkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5kYXRhLnBhcnRpZXMgPSBBcnJheS5mcm9tKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFwLnZhbHVlcygpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uZGF0YS5wYXJ0aWVzLnB1c2gobW9kYWwucGFydHkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZGlzcGxheVBhcnRpZXMoYWRkaXRpb25hbENvbnRhaW5lcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBiO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IGFkZGl0aW9uYWwgPSBhZGRpdGlvbmFsQ29udGFpbmVyLmNyZWF0ZURpdihcImFkZGl0aW9uYWxcIik7XG4gICAgICAgIGlmICghdGhpcy5wbHVnaW4uZGF0YS5wYXJ0aWVzLmxlbmd0aCkge1xuICAgICAgICAgICAgYWRkaXRpb25hbFxuICAgICAgICAgICAgICAgIC5jcmVhdGVEaXYoe1xuICAgICAgICAgICAgICAgICAgICBhdHRyOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdHlsZTogXCJkaXNwbGF5OiBmbGV4OyBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsgcGFkZGluZy1ib3R0b206IDE4cHg7XCJcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmNyZWF0ZVNwYW4oe1xuICAgICAgICAgICAgICAgICAgICB0ZXh0OiBcIk5vIHNhdmVkIHBhcnRpZXMhIENyZWF0ZSBvbmUgdG8gc2VlIGl0IGhlcmUuXCJcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgcGFydHkgb2YgdGhpcy5wbHVnaW4uZGF0YS5wYXJ0aWVzKSB7XG4gICAgICAgICAgICAgICAgbmV3IFNldHRpbmcoYWRkaXRpb25hbClcbiAgICAgICAgICAgICAgICAgICAgLnNldE5hbWUocGFydHkubmFtZSlcbiAgICAgICAgICAgICAgICAgICAgLnNldERlc2MocGFydHkucGxheWVycy5qb2luKFwiLCBcIikpXG4gICAgICAgICAgICAgICAgICAgIC5hZGRFeHRyYUJ1dHRvbigoYikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgYi5zZXRJY29uKFwicGVuY2lsXCIpLm9uQ2xpY2soKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1vZGFsID0gbmV3IFBhcnR5TW9kYWwodGhpcy5wbHVnaW4sIHBhcnR5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RhbC5vcGVuKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kYWwub25DbG9zZSA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1vZGFsLmNhbmNlbGVkKSByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICFtb2RhbC5wYXJ0eS5uYW1lIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAhbW9kYWwucGFydHkubmFtZS5sZW5ndGhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLmRhdGEucGFydGllcy5zcGxpY2UoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5kYXRhLnBhcnRpZXMuaW5kZXhPZihwYXJ0eSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kYWwucGFydHlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uZGF0YS5wYXJ0aWVzLmZpbHRlcihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAocykgPT4gcy5uYW1lID09IG1vZGFsLnBhcnR5Lm5hbWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkubGVuZ3RoID4gMVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5kYXRhLnBhcnRpZXMuZmlsdGVyKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoc3RhdHVzKSA9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzLm5hbWUgPT0gbW9kYWwucGFydHkubmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1hcCA9IG5ldyBNYXAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLmRhdGEucGFydGllcy5tYXAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoYykgPT4gW2MubmFtZSwgY11cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFwLnNldChtb2RhbC5wYXJ0eS5uYW1lLCBtb2RhbC5wYXJ0eSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uZGF0YS5wYXJ0aWVzID0gQXJyYXkuZnJvbShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFwLnZhbHVlcygpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2Rpc3BsYXlQYXJ0aWVzKGFkZGl0aW9uYWxDb250YWluZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLmFkZEV4dHJhQnV0dG9uKChiKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBiLnNldEljb24oXCJ0cmFzaFwiKS5vbkNsaWNrKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5kYXRhLnBhcnRpZXMgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5kYXRhLnBhcnRpZXMuZmlsdGVyKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHApID0+IHAubmFtZSAhPSBwYXJ0eS5uYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucGx1Z2luLmRhdGEuZGVmYXVsdFBhcnR5ID09IHBhcnR5Lm5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uZGF0YS5kZWZhdWx0UGFydHkgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uZGF0YS5wYXJ0aWVzWzBdPy5uYW1lID8/IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2Rpc3BsYXlQYXJ0aWVzKGFkZGl0aW9uYWxDb250YWluZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHByaXZhdGUgX2Rpc3BsYXlTdGF0dXNlcyhhZGRpdGlvbmFsQ29udGFpbmVyOiBIVE1MRGV0YWlsc0VsZW1lbnQpIHtcbiAgICAgICAgYWRkaXRpb25hbENvbnRhaW5lci5lbXB0eSgpO1xuICAgICAgICBhZGRpdGlvbmFsQ29udGFpbmVyLm9udG9nZ2xlID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5wbHVnaW4uZGF0YS5vcGVuU3RhdGUuc3RhdHVzID0gYWRkaXRpb25hbENvbnRhaW5lci5vcGVuO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBzdW1tYXJ5ID0gYWRkaXRpb25hbENvbnRhaW5lci5jcmVhdGVFbChcInN1bW1hcnlcIik7XG4gICAgICAgIG5ldyBTZXR0aW5nKHN1bW1hcnkpLnNldEhlYWRpbmcoKS5zZXROYW1lKFwiU3RhdHVzZXNcIik7XG4gICAgICAgIHN1bW1hcnkuY3JlYXRlRGl2KFwiY29sbGFwc2VyXCIpLmNyZWF0ZURpdihcImhhbmRsZVwiKTtcbiAgICAgICAgY29uc3QgYWRkID0gbmV3IFNldHRpbmcoYWRkaXRpb25hbENvbnRhaW5lcilcbiAgICAgICAgICAgIC5zZXROYW1lKFwiQWRkIE5ldyBTdGF0dXNcIilcbiAgICAgICAgICAgIC5zZXREZXNjKFwiVGhlc2Ugc3RhdHVzZXMgd2lsbCBiZSBhdmFpbGFibGUgdG8gYXBwbHkgdG8gY3JlYXR1cmVzLlwiKVxuICAgICAgICAgICAgLmFkZEJ1dHRvbigoYnV0dG9uOiBCdXR0b25Db21wb25lbnQpOiBCdXR0b25Db21wb25lbnQgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBiID0gYnV0dG9uXG4gICAgICAgICAgICAgICAgICAgIC5zZXRUb29sdGlwKFwiQWRkIFN0YXR1c1wiKVxuICAgICAgICAgICAgICAgICAgICAuc2V0QnV0dG9uVGV4dChcIitcIilcbiAgICAgICAgICAgICAgICAgICAgLm9uQ2xpY2soYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbW9kYWwgPSBuZXcgU3RhdHVzTW9kYWwodGhpcy5wbHVnaW4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgbW9kYWwub25DbG9zZSA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobW9kYWwuY2FuY2VsZWQpIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW1vZGFsLnN0YXR1cy5uYW1lKSByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5kYXRhLnN0YXR1c2VzLmZpbHRlcihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChzdGF0dXMpID0+IHN0YXR1cy5uYW1lID09IG1vZGFsLnN0YXR1cy5uYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWFwID0gbmV3IE1hcChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsuLi50aGlzLnBsdWdpbi5kYXRhLnN0YXR1c2VzXS5tYXAoKGMpID0+IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFwLnNldChtb2RhbC5zdGF0dXMubmFtZSwgbW9kYWwuc3RhdHVzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uZGF0YS5zdGF0dXNlcyA9IEFycmF5LmZyb20oXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXAudmFsdWVzKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5kYXRhLnN0YXR1c2VzLnB1c2gobW9kYWwuc3RhdHVzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZGlzcGxheVN0YXR1c2VzKGFkZGl0aW9uYWxDb250YWluZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGFsLm9wZW4oKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gYjtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICBpZiAoIUNvbmRpdGlvbnMuZXZlcnkoKGMpID0+IHRoaXMucGx1Z2luLmRhdGEuc3RhdHVzZXMuaW5jbHVkZXMoYykpKSB7XG4gICAgICAgICAgICBhZGQuYWRkRXh0cmFCdXR0b24oKGIpID0+XG4gICAgICAgICAgICAgICAgYlxuICAgICAgICAgICAgICAgICAgICAuc2V0SWNvbihcInJlc2V0XCIpXG4gICAgICAgICAgICAgICAgICAgIC5zZXRUb29sdGlwKFwiUmUtYWRkIERlZmF1bHQgU3RhdHVzZXNcIilcbiAgICAgICAgICAgICAgICAgICAgLm9uQ2xpY2soYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uZGF0YS5zdGF0dXNlcyA9IEFycmF5LmZyb20oXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IE1hcChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4udGhpcy5wbHVnaW4uZGF0YS5zdGF0dXNlcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLkNvbmRpdGlvbnNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXS5tYXAoKGMpID0+IFtjLm5hbWUsIGNdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICkudmFsdWVzKClcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2Rpc3BsYXlTdGF0dXNlcyhhZGRpdGlvbmFsQ29udGFpbmVyKTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYWRkaXRpb25hbCA9IGFkZGl0aW9uYWxDb250YWluZXIuY3JlYXRlRGl2KFwiYWRkaXRpb25hbFwiKTtcbiAgICAgICAgZm9yIChjb25zdCBzdGF0dXMgb2YgdGhpcy5wbHVnaW4uZGF0YS5zdGF0dXNlcykge1xuICAgICAgICAgICAgbmV3IFNldHRpbmcoYWRkaXRpb25hbClcbiAgICAgICAgICAgICAgICAuc2V0TmFtZShzdGF0dXMubmFtZSlcbiAgICAgICAgICAgICAgICAuc2V0RGVzYyhzdGF0dXMuZGVzY3JpcHRpb24pXG4gICAgICAgICAgICAgICAgLmFkZEV4dHJhQnV0dG9uKChiKSA9PlxuICAgICAgICAgICAgICAgICAgICBiLnNldEljb24oXCJwZW5jaWxcIikub25DbGljaygoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtb2RhbCA9IG5ldyBTdGF0dXNNb2RhbCh0aGlzLnBsdWdpbiwgc3RhdHVzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGFsLm9uQ2xvc2UgPSBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1vZGFsLmNhbmNlbGVkKSByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFtb2RhbC5zdGF0dXMubmFtZSkgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLmRhdGEuc3RhdHVzZXMuc3BsaWNlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5kYXRhLnN0YXR1c2VzLmluZGV4T2Yoc3RhdHVzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kYWwuc3RhdHVzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLmRhdGEuc3RhdHVzZXMuZmlsdGVyKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHMpID0+IHMubmFtZSA9PSBtb2RhbC5zdGF0dXMubmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApLmxlbmd0aCA+IDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uZGF0YS5zdGF0dXNlcy5maWx0ZXIoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHN0YXR1cykgPT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdHVzLm5hbWUgPT0gbW9kYWwuc3RhdHVzLm5hbWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtYXAgPSBuZXcgTWFwKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLmRhdGEuc3RhdHVzZXMubWFwKChjKSA9PiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFwLnNldChtb2RhbC5zdGF0dXMubmFtZSwgbW9kYWwuc3RhdHVzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLmRhdGEuc3RhdHVzZXMgPSBBcnJheS5mcm9tKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcC52YWx1ZXMoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9kaXNwbGF5U3RhdHVzZXMoYWRkaXRpb25hbENvbnRhaW5lcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgbW9kYWwub3BlbigpO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAuYWRkRXh0cmFCdXR0b24oKGIpID0+XG4gICAgICAgICAgICAgICAgICAgIGIuc2V0SWNvbihcInRyYXNoXCIpLm9uQ2xpY2soYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uZGF0YS5zdGF0dXNlcyA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uZGF0YS5zdGF0dXNlcy5maWx0ZXIoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChzKSA9PiBzLm5hbWUgIT0gc3RhdHVzLm5hbWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9kaXNwbGF5U3RhdHVzZXMoYWRkaXRpb25hbENvbnRhaW5lcik7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIC5zZXRDbGFzcyhcImluaXRpYXRpdmUtc3RhdHVzLWl0ZW1cIik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcHJpdmF0ZSBhc3luYyBfZGlzcGxheUludGVncmF0aW9ucyhjb250YWluZXJFbDogSFRNTERldGFpbHNFbGVtZW50KSB7XG4gICAgICAgIGNvbnRhaW5lckVsLmVtcHR5KCk7XG4gICAgICAgIGNvbnRhaW5lckVsLm9udG9nZ2xlID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5wbHVnaW4uZGF0YS5vcGVuU3RhdGUucGx1Z2luID0gY29udGFpbmVyRWwub3BlbjtcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3Qgc3VtbWFyeSA9IGNvbnRhaW5lckVsLmNyZWF0ZUVsKFwic3VtbWFyeVwiKTtcbiAgICAgICAgbmV3IFNldHRpbmcoc3VtbWFyeSkuc2V0SGVhZGluZygpLnNldE5hbWUoXCJQbHVnaW4gSW50ZWdyYXRpb25zXCIpO1xuICAgICAgICBzdW1tYXJ5LmNyZWF0ZURpdihcImNvbGxhcHNlclwiKS5jcmVhdGVEaXYoXCJoYW5kbGVcIik7XG4gICAgICAgIGlmICghdGhpcy5wbHVnaW4uY2FuVXNlU3RhdEJsb2Nrcykge1xuICAgICAgICAgICAgdGhpcy5wbHVnaW4uZGF0YS5zeW5jID0gZmFsc2U7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgfVxuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgICAgICAgIC5zZXROYW1lKFwiU3luYyBNb25zdGVycyBmcm9tIFRUUlBHIFN0YXRibG9ja3NcIilcbiAgICAgICAgICAgIC5zZXREZXNjKFxuICAgICAgICAgICAgICAgIGNyZWF0ZUZyYWdtZW50KChlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGUuY3JlYXRlU3Bhbih7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBcIkhvbWVicmV3IGNyZWF0dXJlcyBzYXZlZCB0byB0aGUgVFRSUEcgU3RhdGJsb2NrcyBwbHVnaW4gd2lsbCBiZSBhdmFpbGFibGUgaW4gdGhlIHF1aWNrLWFkZC5cIlxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLnBsdWdpbi5jYW5Vc2VTdGF0QmxvY2tzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlLmNyZWF0ZUVsKFwiYnJcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBlLmNyZWF0ZUVsKFwiYnJcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBlLmNyZWF0ZVNwYW4oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IFwiSW5zdGFsbCBhbmQgZW5hYmxlIHRoZSBcIlxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBlLmNyZWF0ZUVsKFwiYVwiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogXCJUVFJQRyBTdGF0YmxvY2tzXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaHJlZjogXCJvYnNpZGlhbjovL3Nob3ctcGx1Z2luP2lkPW9ic2lkaWFuLTVlLXN0YXRibG9ja3NcIlxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBlLmNyZWF0ZVNwYW4oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IFwiIHBsdWdpbiB0byB1c2UgaG9tZWJyZXcgY3JlYXR1cmVzLlwiXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAuYWRkVG9nZ2xlKCh0KSA9PiB7XG4gICAgICAgICAgICAgICAgdC5zZXREaXNhYmxlZCghdGhpcy5wbHVnaW4uY2FuVXNlU3RhdEJsb2Nrcykuc2V0VmFsdWUoXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLmRhdGEuc3luY1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgdC5vbkNoYW5nZShhc3luYyAodikgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5kYXRhLnN5bmMgPSB2O1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZGlzcGxheUludGVncmF0aW9ucyhjb250YWluZXJFbCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgaWYgKHRoaXMucGx1Z2luLmRhdGEuc3luYykge1xuICAgICAgICAgICAgY29uc3Qgc3luY2VkID0gbmV3IFNldHRpbmcoY29udGFpbmVyRWwpLnNldERlc2MoXG4gICAgICAgICAgICAgICAgYCR7dGhpcy5wbHVnaW4uc3RhdGJsb2NrX2NyZWF0dXJlcy5sZW5ndGh9IGNyZWF0dXJlcyBzeW5jZWQuYFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHN5bmNlZC5zZXR0aW5nRWwuYWRkQ2xhc3MoXCJpbml0aWF0aXZlLXN5bmNlZFwiKTtcbiAgICAgICAgICAgIHNldEljb24oc3luY2VkLm5hbWVFbCwgXCJjaGVjay1pbi1jaXJjbGVcIik7XG4gICAgICAgICAgICBzeW5jZWQubmFtZUVsLmFwcGVuZENoaWxkKGNyZWF0ZVNwYW4oeyB0ZXh0OiBcIlN5bmNlZFwiIH0pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgICAgICAgLnNldE5hbWUoXCJJbml0aWF0aXZlIEZvcm11bGFcIilcbiAgICAgICAgICAgIC5zZXREZXNjKFxuICAgICAgICAgICAgICAgIGNyZWF0ZUZyYWdtZW50KChlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGUuY3JlYXRlU3Bhbih7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBcIkluaXRpYXRpdmUgZm9ybXVsYSB0byB1c2Ugd2hlbiBjYWxjdWxhdGluZyBpbml0aWF0aXZlLiBVc2UgXCJcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGUuY3JlYXRlRWwoXCJjb2RlXCIsIHsgdGV4dDogXCIlbW9kJVwiIH0pO1xuICAgICAgICAgICAgICAgICAgICBlLmNyZWF0ZVNwYW4oe1xuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogXCIgZm9yIHRoZSBtb2RpZmllciBwbGFjZWhvbGRlci5cIlxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLnBsdWdpbi5jYW5Vc2VEaWNlUm9sbGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlLmNyZWF0ZUVsKFwiYnJcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBlLmNyZWF0ZUVsKFwiYnJcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBlLmNyZWF0ZVNwYW4oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IGBjb2xvcjogdmFyKC0tdGV4dC1lcnJvcik7YFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogXCJSZXF1aXJlcyB0aGUgXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgZS5jcmVhdGVFbChcImFcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IFwiRGljZSBSb2xsZXJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmOiBcImh0dHBzOi8vZ2l0aHViLmNvbS92YWxlbnRpbmUxOTUvb2JzaWRpYW4tZGljZS1yb2xsZXJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbHM6IFwiZXh0ZXJuYWwtbGlua1wiXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGUuY3JlYXRlU3Bhbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZTogYGNvbG9yOiB2YXIoLS10ZXh0LWVycm9yKTtgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBcIiBwbHVnaW4gdG8gbW9kaWZ5LlwiXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAuYWRkVGV4dCgodCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5wbHVnaW4uY2FuVXNlRGljZVJvbGxlcikge1xuICAgICAgICAgICAgICAgICAgICB0LnNldERpc2FibGVkKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5kYXRhLmluaXRpYXRpdmUgPSBcIjFkMjAgKyAlbW9kJVwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0LnNldFZhbHVlKHRoaXMucGx1Z2luLmRhdGEuaW5pdGlhdGl2ZSk7XG4gICAgICAgICAgICAgICAgdC5vbkNoYW5nZSgodikgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5kYXRhLmluaXRpYXRpdmUgPSB2O1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHQuaW5wdXRFbC5vbmJsdXIgPSBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRyYWNrZXIucm9sbCh0aGlzLnBsdWdpbik7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG4gICAgICAgICAgICAuc2V0TmFtZShcIkludGVncmF0ZSB3aXRoIE9ic2lkaWFuIExlYWZsZXRcIilcbiAgICAgICAgICAgIC5zZXREZXNjKFxuICAgICAgICAgICAgICAgIGNyZWF0ZUZyYWdtZW50KChlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGUuY3JlYXRlU3Bhbih7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBcIkludGVncmF0ZSB3aXRoIHRoZSBPYnNpZGlhbiBMZWFmbGV0IHBsdWdpbiBhbmQgZGlzcGxheSBjb21iYXRzIG9uIGEgbWFwLlwiXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5wbHVnaW4uY2FuVXNlTGVhZmxldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZS5jcmVhdGVFbChcImJyXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZS5jcmVhdGVFbChcImJyXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZS5jcmVhdGVTcGFuKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiBgY29sb3I6IHZhcigtLXRleHQtZXJyb3IpO2BcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IFwiUmVxdWlyZXMgIFwiXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGUuY3JlYXRlRWwoXCJhXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBcIk9ic2lkaWFuIExlYWZsZXRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBocmVmOiBcImh0dHBzOi8vZ2l0aHViLmNvbS92YWxlbnRpbmUxOTUvb2JzaWRpYW4tbGVhZmxldC1wbHVnaW5cIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbHM6IFwiZXh0ZXJuYWwtbGlua1wiXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGUuY3JlYXRlU3Bhbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZTogYGNvbG9yOiB2YXIoLS10ZXh0LWVycm9yKTtgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBcIiB2ZXJzaW9uIDQuMC4wIHRvIG1vZGlmeS5cIlxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgLmFkZFRvZ2dsZSgodCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5wbHVnaW4uY2FuVXNlTGVhZmxldCkge1xuICAgICAgICAgICAgICAgICAgICB0LnNldERpc2FibGVkKHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5kYXRhLmxlYWZsZXRJbnRlZ3JhdGlvbiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0LnNldFZhbHVlKHRoaXMucGx1Z2luLmRhdGEubGVhZmxldEludGVncmF0aW9uKTtcbiAgICAgICAgICAgICAgICB0Lm9uQ2hhbmdlKGFzeW5jICh2KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLmRhdGEubGVhZmxldEludGVncmF0aW9uID0gdjtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2Rpc3BsYXlJbnRlZ3JhdGlvbnMoY29udGFpbmVyRWwpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKHRoaXMucGx1Z2luLmNhblVzZUxlYWZsZXQgJiYgdGhpcy5wbHVnaW4uZGF0YS5sZWFmbGV0SW50ZWdyYXRpb24pIHtcbiAgICAgICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuICAgICAgICAgICAgICAgIC5zZXROYW1lKFwiRGVmYXVsdCBQbGF5ZXIgTWFya2VyIFR5cGVcIilcbiAgICAgICAgICAgICAgICAuc2V0RGVzYyhcbiAgICAgICAgICAgICAgICAgICAgY3JlYXRlRnJhZ21lbnQoKGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnBsdWdpbi5kYXRhLnBsYXllck1hcmtlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRpdiA9IGUuY3JlYXRlRGl2KFwibWFya2VyLXR5cGUtZGlzcGxheVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpbm5lciA9IGRpdi5jcmVhdGVEaXYoXCJtYXJrZXItaWNvbi1kaXNwbGF5XCIpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWFya2VyID0gdGhpcy5wbHVnaW4ubGVhZmxldC5tYXJrZXJJY29ucy5maW5kKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoaWNvbikgPT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljb24udHlwZSA9PSB0aGlzLnBsdWdpbi5kYXRhLnBsYXllck1hcmtlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hcmtlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbm5lci5pbm5lckhUTUwgPSBtYXJrZXIuaHRtbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIC5hZGREcm9wZG93bigoZHJvcCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBtYXJrZXIgb2YgdGhpcy5wbHVnaW4ubGVhZmxldC5tYXJrZXJJY29ucykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZHJvcC5hZGRPcHRpb24obWFya2VyLnR5cGUsIG1hcmtlci50eXBlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBkcm9wLnNldFZhbHVlKHRoaXMucGx1Z2luLmRhdGEucGxheWVyTWFya2VyID8/IFwiZGVmYXVsdFwiKTtcbiAgICAgICAgICAgICAgICAgICAgZHJvcC5vbkNoYW5nZShhc3luYyAodikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uZGF0YS5wbGF5ZXJNYXJrZXIgPSB2O1xuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9kaXNwbGF5SW50ZWdyYXRpb25zKGNvbnRhaW5lckVsKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgICAgICAgICAgICAuc2V0TmFtZShcIkRlZmF1bHQgTW9uc3RlciBNYXJrZXIgVHlwZVwiKVxuICAgICAgICAgICAgICAgIC5zZXREZXNjKFxuICAgICAgICAgICAgICAgICAgICBjcmVhdGVGcmFnbWVudCgoZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucGx1Z2luLmRhdGEubW9uc3Rlck1hcmtlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRpdiA9IGUuY3JlYXRlRGl2KFwibWFya2VyLXR5cGUtZGlzcGxheVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpbm5lciA9IGRpdi5jcmVhdGVEaXYoXCJtYXJrZXItaWNvbi1kaXNwbGF5XCIpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWFya2VyID0gdGhpcy5wbHVnaW4ubGVhZmxldC5tYXJrZXJJY29ucy5maW5kKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoaWNvbikgPT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljb24udHlwZSA9PSB0aGlzLnBsdWdpbi5kYXRhLm1vbnN0ZXJNYXJrZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXJrZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5uZXIuaW5uZXJIVE1MID0gbWFya2VyLmh0bWw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAuYWRkRHJvcGRvd24oKGRyb3ApID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgbWFya2VyIG9mIHRoaXMucGx1Z2luLmxlYWZsZXQubWFya2VySWNvbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRyb3AuYWRkT3B0aW9uKG1hcmtlci50eXBlLCBtYXJrZXIudHlwZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZHJvcC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5kYXRhLm1vbnN0ZXJNYXJrZXIpO1xuICAgICAgICAgICAgICAgICAgICBkcm9wLm9uQ2hhbmdlKGFzeW5jICh2KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5kYXRhLm1vbnN0ZXJNYXJrZXIgPSB2O1xuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9kaXNwbGF5SW50ZWdyYXRpb25zKGNvbnRhaW5lckVsKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcHJpdmF0ZSBfZGlzcGxheUhvbWVicmV3KGFkZGl0aW9uYWxDb250YWluZXI6IEhUTUxFbGVtZW50KSB7XG4gICAgICAgIGFkZGl0aW9uYWxDb250YWluZXIuZW1wdHkoKTtcbiAgICAgICAgaWYgKHRoaXMucGx1Z2luLmRhdGEuaG9tZWJyZXcubGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25zdCBhZGRpdGlvbmFsID0gYWRkaXRpb25hbENvbnRhaW5lci5jcmVhdGVEaXYoXCJhZGRpdGlvbmFsXCIpO1xuICAgICAgICAgICAgbmV3IFNldHRpbmcoYWRkaXRpb25hbCkuc2V0SGVhZGluZygpLnNldE5hbWUoXCJIb21lYnJldyBDcmVhdHVyZXNcIik7XG4gICAgICAgICAgICBjb25zdCB3YXJuaW5nID0gYWRkaXRpb25hbFxuICAgICAgICAgICAgICAgIC5jcmVhdGVEaXYoe1xuICAgICAgICAgICAgICAgICAgICBhdHRyOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdHlsZTogXCJkaXNwbGF5OiBmbGV4OyBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsgcGFkZGluZzogMThweDtcIlxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuY3JlYXRlRWwoXCJzdHJvbmdcIik7XG4gICAgICAgICAgICB3YXJuaW5nLmNyZWF0ZVNwYW4oe1xuICAgICAgICAgICAgICAgIHRleHQ6IFwiSG9tZWJyZXcgY3JlYXR1cmVzIGhhdmUgbW92ZWQgdG8gdGhlIFwiXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHdhcm5pbmcuY3JlYXRlRWwoXCJhXCIsIHtcbiAgICAgICAgICAgICAgICB0ZXh0OiBcIjVlIFN0YXRibG9ja3NcIixcbiAgICAgICAgICAgICAgICBocmVmOiBcIm9ic2lkaWFuOi8vc2hvdy1wbHVnaW4/aWQ9b2JzaWRpYW4tNWUtc3RhdGJsb2Nrc1wiXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHdhcm5pbmcuY3JlYXRlU3Bhbih7XG4gICAgICAgICAgICAgICAgdGV4dDogXCIgcGx1Z2luLlwiXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmICh0aGlzLnBsdWdpbi5jYW5Vc2VTdGF0QmxvY2tzKSB7XG4gICAgICAgICAgICAgICAgbmV3IFNldHRpbmcoYWRkaXRpb25hbClcbiAgICAgICAgICAgICAgICAgICAgLnNldE5hbWUoXCJNaWdyYXRlIEhvbWJyZXdcIilcbiAgICAgICAgICAgICAgICAgICAgLnNldERlc2MoXG4gICAgICAgICAgICAgICAgICAgICAgICBcIk1vdmUgYWxsIGNyZWF0ZWQgaG9tZWJyZXcgY3JlYXR1cmVzIHRvIHRoZSA1ZSBTdGF0YmxvY2tzIHBsdWdpbi5cIlxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgIC5hZGRCdXR0b24oKGIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGIuc2V0SWNvbihcImluc3RhbGxcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc2V0VG9vbHRpcChcIk1pZ3JhdGVcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAub25DbGljayhhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHN0YXRibG9ja3MgPSB0aGlzLmFwcC5wbHVnaW5zLmdldFBsdWdpbihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwib2JzaWRpYW4tNWUtc3RhdGJsb2Nrc1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGV4aXN0aW5nID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRibG9ja3Muc2V0dGluZ3MubW9uc3RlcnMubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCBzdGF0YmxvY2tzLnNhdmVNb25zdGVycyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLmRhdGEuaG9tZWJyZXdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IE5vdGljZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGAke1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRibG9ja3Muc2V0dGluZ3MubW9uc3RlcnMubGVuZ3RoIC1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleGlzdGluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBvZiAke1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLmRhdGEuaG9tZWJyZXcubGVuZ3RoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IEhvbWVicmV3IE1vbnN0ZXJzIHNhdmVkLmBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLmFkZEV4dHJhQnV0dG9uKChiKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBiLnNldEljb24oXCJjcm9zcy1pbi1ib3hcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc2V0VG9vbHRpcChcIkRlbGV0ZSBIb21lYnJld1wiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5vbkNsaWNrKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgY29uZmlybVdpdGhNb2RhbChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFwcCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIkFyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBkZWxldGUgYWxsIGhvbWVicmV3IGNyZWF0dXJlcz9cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLmRhdGEuaG9tZWJyZXcgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZGlzcGxheUhvbWVicmV3KGFkZGl0aW9uYWxDb250YWluZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBhZGRpdGlvbmFsXG4gICAgICAgICAgICAgICAgICAgIC5jcmVhdGVEaXYoe1xuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiBcImRpc3BsYXk6IGZsZXg7IGp1c3RpZnktY29udGVudDogY2VudGVyOyBwYWRkaW5nOiAxOHB4O1wiXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5jcmVhdGVFbChcInN0cm9uZ1wiKTtcbiAgICAgICAgICAgICAgICB3YXJuaW5nLmNyZWF0ZVNwYW4oe1xuICAgICAgICAgICAgICAgICAgICB0ZXh0OiBcIkluc3RhbGwgdGhlIFwiXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgd2FybmluZy5jcmVhdGVFbChcImFcIiwge1xuICAgICAgICAgICAgICAgICAgICB0ZXh0OiBcIjVlIFN0YXRibG9ja3NcIixcbiAgICAgICAgICAgICAgICAgICAgaHJlZjogXCJvYnNpZGlhbjovL3Nob3ctcGx1Z2luP2lkPW9ic2lkaWFuLTVlLXN0YXRibG9ja3NcIlxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHdhcm5pbmcuY3JlYXRlU3Bhbih7XG4gICAgICAgICAgICAgICAgICAgIHRleHQ6IFwiIHBsdWdpbiB0byBtaWdyYXRlLlwiXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmNsYXNzIE5ld1BsYXllck1vZGFsIGV4dGVuZHMgTW9kYWwge1xuICAgIHBsYXllcjogSG9tZWJyZXdDcmVhdHVyZTtcbiAgICBzYXZlZDogYm9vbGVhbjtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBwbHVnaW46IEluaXRpYXRpdmVUcmFja2VyLFxuICAgICAgICBwcml2YXRlIG9yaWdpbmFsPzogSG9tZWJyZXdDcmVhdHVyZVxuICAgICkge1xuICAgICAgICBzdXBlcihwbHVnaW4uYXBwKTtcbiAgICAgICAgdGhpcy5wbGF5ZXIgPSB7IC4uLihvcmlnaW5hbCA/PyB7fSkgfTtcbiAgICB9XG4gICAgYXN5bmMgZGlzcGxheShsb2FkPzogYm9vbGVhbikge1xuICAgICAgICBsZXQgeyBjb250ZW50RWwgfSA9IHRoaXM7XG5cbiAgICAgICAgY29udGVudEVsLmFkZENsYXNzKFwiaW5pdGlhdGl2ZS10cmFja2VyLWFkZC1wbGF5ZXItbW9kYWxcIik7XG5cbiAgICAgICAgY29udGVudEVsLmVtcHR5KCk7XG5cbiAgICAgICAgbGV0IGVycm9yID0gZmFsc2U7XG5cbiAgICAgICAgY29udGVudEVsLmNyZWF0ZUVsKFwiaDJcIiwge1xuICAgICAgICAgICAgdGV4dDogdGhpcy5vcmlnaW5hbCA/IFwiRWRpdCBQbGF5ZXJcIiA6IFwiTmV3IFBsYXllclwiXG4gICAgICAgIH0pO1xuXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRlbnRFbClcbiAgICAgICAgICAgIC5zZXROYW1lKFwiTGluayB0byBOb3RlXCIpXG4gICAgICAgICAgICAuc2V0RGVzYyhcIkxpbmsgcGxheWVyIHRvIGEgbm90ZSBpbiB5b3VyIHZhdWx0LlwiKVxuICAgICAgICAgICAgLmFkZFRleHQoKHQpID0+IHtcbiAgICAgICAgICAgICAgICB0LnNldFZhbHVlKHRoaXMucGxheWVyLm5vdGUgPz8gXCJcIik7XG4gICAgICAgICAgICAgICAgY29uc3QgbW9kYWwgPSBuZXcgRmlsZVN1Z2dlc3Rpb25Nb2RhbCh0aGlzLmFwcCwgdCk7XG4gICAgICAgICAgICAgICAgbW9kYWwub25DbG9zZSA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFtb2RhbC5maWxlKSByZXR1cm47XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbWV0YURhdGEgPSB0aGlzLmFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZShcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGFsLmZpbGVcbiAgICAgICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsYXllci5ub3RlID0gbW9kYWwuZmlsZS5iYXNlbmFtZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbGF5ZXIucGF0aCA9IG1vZGFsLmZpbGUucGF0aDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbGF5ZXIubmFtZSA9IG1vZGFsLmZpbGUuYmFzZW5hbWU7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFtZXRhRGF0YSB8fCAhbWV0YURhdGEuZnJvbnRtYXR0ZXIpIHJldHVybjtcblxuICAgICAgICAgICAgICAgICAgICBjb25zdCB7IGFjLCBocCwgbW9kaWZpZXIsIGxldmVsIH0gPSBtZXRhRGF0YS5mcm9udG1hdHRlcjtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbGF5ZXIgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAuLi50aGlzLnBsYXllcixcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLnsgYWMsIGhwLCBtb2RpZmllciwgbGV2ZWwgfVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3BsYXkoKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgbGV0IG5hbWVJbnB1dDogSW5wdXRWYWxpZGF0ZSxcbiAgICAgICAgICAgIGxldmVsSW5wdXQ6IElucHV0VmFsaWRhdGUsXG4gICAgICAgICAgICBocElucHV0OiBJbnB1dFZhbGlkYXRlLFxuICAgICAgICAgICAgYWNJbnB1dDogSW5wdXRWYWxpZGF0ZSxcbiAgICAgICAgICAgIG1vZElucHV0OiBJbnB1dFZhbGlkYXRlO1xuXG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRlbnRFbClcbiAgICAgICAgICAgIC5zZXROYW1lKFwiTmFtZVwiKVxuICAgICAgICAgICAgLnNldERlc2MoXCJQbGF5ZXIgbmFtZS4gTXVzdCBiZSB1bmlxdWUhXCIpXG4gICAgICAgICAgICAuYWRkVGV4dCgodCkgPT4ge1xuICAgICAgICAgICAgICAgIG5hbWVJbnB1dCA9IHtcbiAgICAgICAgICAgICAgICAgICAgaW5wdXQ6IHQuaW5wdXRFbCxcbiAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGU6IChpOiBIVE1MSW5wdXRFbGVtZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZXJyb3IgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoIWkudmFsdWUubGVuZ3RoICYmICFsb2FkKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzLnBsdWdpbi5kYXRhLnBsYXllcnMuZmluZChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHApID0+IHAubmFtZSA9PT0gaS52YWx1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbGF5ZXIubmFtZSAhPSB0aGlzLm9yaWdpbmFsLm5hbWUpXG4gICAgICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLmFkZENsYXNzKFwiaGFzLWVycm9yXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgdC5zZXRWYWx1ZSh0aGlzLnBsYXllci5uYW1lID8/IFwiXCIpO1xuICAgICAgICAgICAgICAgIHQub25DaGFuZ2UoKHYpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdC5pbnB1dEVsLnJlbW92ZUNsYXNzKFwiaGFzLWVycm9yXCIpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsYXllci5uYW1lID0gdjtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICBuZXcgU2V0dGluZyhjb250ZW50RWwpXG4gICAgICAgICAgICAuc2V0TmFtZShcIkxldmVsXCIpXG4gICAgICAgICAgICAuc2V0RGVzYyhcIlBsYXllciBsZXZlbC5cIilcbiAgICAgICAgICAgIC5hZGRUZXh0KCh0KSA9PiB7XG4gICAgICAgICAgICAgICAgbGV2ZWxJbnB1dCA9IHtcbiAgICAgICAgICAgICAgICAgICAgaW5wdXQ6IHQuaW5wdXRFbCxcbiAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGU6IChpOiBIVE1MSW5wdXRFbGVtZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZXJyb3IgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc05hTihOdW1iZXIoaS52YWx1ZSkpIHx8IE51bWJlcihpLnZhbHVlKSA8PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5hZGRDbGFzcyhcImhhcy1lcnJvclwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvciA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHQuc2V0VmFsdWUoYCR7dGhpcy5wbGF5ZXIubGV2ZWwgPz8gXCJcIn1gKTtcbiAgICAgICAgICAgICAgICB0Lm9uQ2hhbmdlKCh2KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHQuaW5wdXRFbC5yZW1vdmVDbGFzcyhcImhhcy1lcnJvclwiKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbGF5ZXIubGV2ZWwgPSBOdW1iZXIodik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgbmV3IFNldHRpbmcoY29udGVudEVsKS5zZXROYW1lKFwiTWF4IEhpdCBQb2ludHNcIikuYWRkVGV4dCgodCkgPT4ge1xuICAgICAgICAgICAgaHBJbnB1dCA9IHtcbiAgICAgICAgICAgICAgICBpbnB1dDogdC5pbnB1dEVsLFxuICAgICAgICAgICAgICAgIHZhbGlkYXRlOiAoaTogSFRNTElucHV0RWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBsZXQgZXJyb3IgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzTmFOKE51bWJlcihpLnZhbHVlKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGkuYWRkQ2xhc3MoXCJoYXMtZXJyb3JcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvciA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0LnNldFZhbHVlKGAke3RoaXMucGxheWVyLmhwID8/IFwiXCJ9YCk7XG4gICAgICAgICAgICB0Lm9uQ2hhbmdlKCh2KSA9PiB7XG4gICAgICAgICAgICAgICAgdC5pbnB1dEVsLnJlbW92ZUNsYXNzKFwiaGFzLWVycm9yXCIpO1xuICAgICAgICAgICAgICAgIHRoaXMucGxheWVyLmhwID0gTnVtYmVyKHYpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBuZXcgU2V0dGluZyhjb250ZW50RWwpLnNldE5hbWUoXCJBcm1vciBDbGFzc1wiKS5hZGRUZXh0KCh0KSA9PiB7XG4gICAgICAgICAgICBhY0lucHV0ID0ge1xuICAgICAgICAgICAgICAgIGlucHV0OiB0LmlucHV0RWwsXG4gICAgICAgICAgICAgICAgdmFsaWRhdGU6IChpKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBlcnJvciA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNOYU4oTnVtYmVyKGkudmFsdWUpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdC5pbnB1dEVsLmFkZENsYXNzKFwiaGFzLWVycm9yXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlcnJvcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdC5zZXRWYWx1ZShgJHt0aGlzLnBsYXllci5hYyA/PyBcIlwifWApO1xuICAgICAgICAgICAgdC5vbkNoYW5nZSgodikgPT4ge1xuICAgICAgICAgICAgICAgIHQuaW5wdXRFbC5yZW1vdmVDbGFzcyhcImhhcy1lcnJvclwiKTtcbiAgICAgICAgICAgICAgICB0aGlzLnBsYXllci5hYyA9IE51bWJlcih2KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgbmV3IFNldHRpbmcoY29udGVudEVsKVxuICAgICAgICAgICAgLnNldE5hbWUoXCJJbml0aWF0aXZlIE1vZGlmaWVyXCIpXG4gICAgICAgICAgICAuc2V0RGVzYyhcIlRoaXMgd2lsbCBiZSBhZGRlZCB0byByYW5kb21seS1yb2xsZWQgaW5pdGlhdGl2ZXMuXCIpXG4gICAgICAgICAgICAuYWRkVGV4dCgodCkgPT4ge1xuICAgICAgICAgICAgICAgIG1vZElucHV0ID0ge1xuICAgICAgICAgICAgICAgICAgICBpbnB1dDogdC5pbnB1dEVsLFxuICAgICAgICAgICAgICAgICAgICB2YWxpZGF0ZTogKGkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBlcnJvciA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzTmFOKE51bWJlcihpLnZhbHVlKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LmlucHV0RWwuYWRkQ2xhc3MoXCJoYXMtZXJyb3JcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVycm9yO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB0LnNldFZhbHVlKGAke3RoaXMucGxheWVyLm1vZGlmaWVyID8/IFwiXCJ9YCk7XG4gICAgICAgICAgICAgICAgdC5vbkNoYW5nZSgodikgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsYXllci5tb2RpZmllciA9IE51bWJlcih2KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIGlmICh0aGlzLnBsdWdpbi5jYW5Vc2VMZWFmbGV0KSB7XG4gICAgICAgICAgICBjb25zdCBtYXJrZXJTZXR0aW5nID0gbmV3IFNldHRpbmcoY29udGVudEVsKVxuICAgICAgICAgICAgICAgIC5zZXROYW1lKFwiTGVhZmxldCBNYXJrZXJcIilcbiAgICAgICAgICAgICAgICAuYWRkRHJvcGRvd24oKGRyb3ApID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgbWFya2VyIG9mIHRoaXMucGx1Z2luLmxlYWZsZXQubWFya2VySWNvbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRyb3AuYWRkT3B0aW9uKG1hcmtlci50eXBlLCBtYXJrZXIudHlwZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZHJvcC5zZXRWYWx1ZShcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGxheWVyLm1hcmtlciA/P1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLmRhdGEucGxheWVyTWFya2VyID8/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJkZWZhdWx0XCJcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgZHJvcC5vbkNoYW5nZShhc3luYyAodikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbGF5ZXIubWFya2VyID0gdjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGlzcGxheSgpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKHRoaXMucGxheWVyLm1hcmtlcikge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRpdiA9IGNyZWF0ZURpdihcIm1hcmtlci10eXBlLWRpc3BsYXlcIik7XG4gICAgICAgICAgICAgICAgY29uc3QgaW5uZXIgPSBkaXYuY3JlYXRlRGl2KFwibWFya2VyLWljb24tZGlzcGxheVwiKTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IG1hcmtlciA9IHRoaXMucGx1Z2luLmxlYWZsZXQubWFya2VySWNvbnMuZmluZChcbiAgICAgICAgICAgICAgICAgICAgKGljb24pID0+IGljb24udHlwZSA9PSB0aGlzLnBsYXllci5tYXJrZXJcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGlmIChtYXJrZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5uZXIuaW5uZXJIVE1MID0gbWFya2VyLmh0bWw7XG5cbiAgICAgICAgICAgICAgICAgICAgbWFya2VyU2V0dGluZy5kZXNjRWwuYXBwZW5kQ2hpbGQoZGl2KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgZm9vdGVyRWwgPSBjb250ZW50RWwuY3JlYXRlRGl2KCk7XG4gICAgICAgIGxldCBmb290ZXJCdXR0b25zID0gbmV3IFNldHRpbmcoZm9vdGVyRWwpO1xuICAgICAgICBmb290ZXJCdXR0b25zLmFkZEJ1dHRvbigoYikgPT4ge1xuICAgICAgICAgICAgYi5zZXRUb29sdGlwKFwiU2F2ZVwiKVxuICAgICAgICAgICAgICAgIC5zZXRJY29uKFwiY2hlY2ttYXJrXCIpXG4gICAgICAgICAgICAgICAgLm9uQ2xpY2soYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBsZXQgZXJyb3IgPSB0aGlzLnZhbGlkYXRlSW5wdXRzKFxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZUlucHV0LFxuICAgICAgICAgICAgICAgICAgICAgICAgYWNJbnB1dCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhwSW5wdXQsXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RJbnB1dFxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoXCJGaXggZXJyb3JzIGJlZm9yZSBzYXZpbmcuXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2F2ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gYjtcbiAgICAgICAgfSk7XG4gICAgICAgIGZvb3RlckJ1dHRvbnMuYWRkRXh0cmFCdXR0b24oKGIpID0+IHtcbiAgICAgICAgICAgIGIuc2V0SWNvbihcImNyb3NzXCIpXG4gICAgICAgICAgICAgICAgLnNldFRvb2x0aXAoXCJDYW5jZWxcIilcbiAgICAgICAgICAgICAgICAub25DbGljaygoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2F2ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIGI7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMudmFsaWRhdGVJbnB1dHMobmFtZUlucHV0LCBhY0lucHV0LCBocElucHV0LCBtb2RJbnB1dCk7XG4gICAgfVxuICAgIHZhbGlkYXRlSW5wdXRzKC4uLmlucHV0czogSW5wdXRWYWxpZGF0ZVtdKSB7XG4gICAgICAgIGxldCBlcnJvciA9IGZhbHNlO1xuICAgICAgICBmb3IgKGxldCBpbnB1dCBvZiBpbnB1dHMpIHtcbiAgICAgICAgICAgIGlmIChpbnB1dC52YWxpZGF0ZShpbnB1dC5pbnB1dCkpIHtcbiAgICAgICAgICAgICAgICBlcnJvciA9IHRydWU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlucHV0LmlucHV0LnJlbW92ZUNsYXNzKFwiaGFzLWVycm9yXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBlcnJvcjtcbiAgICB9XG4gICAgb25PcGVuKCkge1xuICAgICAgICB0aGlzLmRpc3BsYXkodHJ1ZSk7XG4gICAgfVxufVxuXG5pbXBvcnQgeyBBcHAsIEJ1dHRvbkNvbXBvbmVudCwgTW9kYWwgfSBmcm9tIFwib2JzaWRpYW5cIjtcbmltcG9ydCB7IHRyYWNrZXIgfSBmcm9tIFwic3JjL3RyYWNrZXIvc3RvcmVzL3RyYWNrZXJcIjtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNvbmZpcm1XaXRoTW9kYWwoXG4gICAgYXBwOiBBcHAsXG4gICAgdGV4dDogc3RyaW5nLFxuICAgIGJ1dHRvbnM6IHsgY3RhOiBzdHJpbmc7IHNlY29uZGFyeTogc3RyaW5nIH0gPSB7XG4gICAgICAgIGN0YTogXCJZZXNcIixcbiAgICAgICAgc2Vjb25kYXJ5OiBcIk5vXCJcbiAgICB9XG4pOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBjb25zdCBtb2RhbCA9IG5ldyBDb25maXJtTW9kYWwoYXBwLCB0ZXh0LCBidXR0b25zKTtcbiAgICAgICAgbW9kYWwub25DbG9zZSA9ICgpID0+IHtcbiAgICAgICAgICAgIHJlc29sdmUobW9kYWwuY29uZmlybWVkKTtcbiAgICAgICAgfTtcbiAgICAgICAgbW9kYWwub3BlbigpO1xuICAgIH0pO1xufVxuXG5leHBvcnQgY2xhc3MgQ29uZmlybU1vZGFsIGV4dGVuZHMgTW9kYWwge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBhcHA6IEFwcCxcbiAgICAgICAgcHVibGljIHRleHQ6IHN0cmluZyxcbiAgICAgICAgcHVibGljIGJ1dHRvbnM6IHsgY3RhOiBzdHJpbmc7IHNlY29uZGFyeTogc3RyaW5nIH1cbiAgICApIHtcbiAgICAgICAgc3VwZXIoYXBwKTtcbiAgICB9XG4gICAgY29uZmlybWVkOiBib29sZWFuID0gZmFsc2U7XG4gICAgYXN5bmMgZGlzcGxheSgpIHtcbiAgICAgICAgbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgICAgICAgIHRoaXMuY29udGVudEVsLmVtcHR5KCk7XG4gICAgICAgICAgICB0aGlzLmNvbnRlbnRFbC5hZGRDbGFzcyhcImNvbmZpcm0tbW9kYWxcIik7XG4gICAgICAgICAgICB0aGlzLmNvbnRlbnRFbC5jcmVhdGVFbChcInBcIiwge1xuICAgICAgICAgICAgICAgIHRleHQ6IHRoaXMudGV4dFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb25zdCBidXR0b25FbCA9IHRoaXMuY29udGVudEVsLmNyZWF0ZURpdihcbiAgICAgICAgICAgICAgICBcImZhbnRhc3ktY2FsZW5kYXItY29uZmlybS1idXR0b25zXCJcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBuZXcgQnV0dG9uQ29tcG9uZW50KGJ1dHRvbkVsKVxuICAgICAgICAgICAgICAgIC5zZXRCdXR0b25UZXh0KHRoaXMuYnV0dG9ucy5jdGEpXG4gICAgICAgICAgICAgICAgLnNldEN0YSgpXG4gICAgICAgICAgICAgICAgLm9uQ2xpY2soKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbmZpcm1lZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIG5ldyBCdXR0b25Db21wb25lbnQoYnV0dG9uRWwpXG4gICAgICAgICAgICAgICAgLnNldEJ1dHRvblRleHQodGhpcy5idXR0b25zLnNlY29uZGFyeSlcbiAgICAgICAgICAgICAgICAub25DbGljaygoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIG9uT3BlbigpIHtcbiAgICAgICAgdGhpcy5kaXNwbGF5KCk7XG4gICAgfVxufVxuYWRkSWNvbihcbiAgICBcImluaXRpYXRpdmUtdHJhY2tlci13YXJuaW5nXCIsXG4gICAgYDxzdmcgYXJpYS1oaWRkZW49XCJ0cnVlXCIgZm9jdXNhYmxlPVwiZmFsc2VcIiBkYXRhLXByZWZpeD1cImZhc1wiIGRhdGEtaWNvbj1cImV4Y2xhbWF0aW9uLXRyaWFuZ2xlXCIgY2xhc3M9XCJzdmctaW5saW5lLS1mYSBmYS1leGNsYW1hdGlvbi10cmlhbmdsZSBmYS13LTE4XCIgcm9sZT1cImltZ1wiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDU3NiA1MTJcIj48cGF0aCBmaWxsPVwiY3VycmVudENvbG9yXCIgZD1cIk01NjkuNTE3IDQ0MC4wMTNDNTg3Ljk3NSA0NzIuMDA3IDU2NC44MDYgNTEyIDUyNy45NCA1MTJINDguMDU0Yy0zNi45MzcgMC01OS45OTktNDAuMDU1LTQxLjU3Ny03MS45ODdMMjQ2LjQyMyAyMy45ODVjMTguNDY3LTMyLjAwOSA2NC43Mi0zMS45NTEgODMuMTU0IDBsMjM5Ljk0IDQxNi4wMjh6TTI4OCAzNTRjLTI1LjQwNSAwLTQ2IDIwLjU5NS00NiA0NnMyMC41OTUgNDYgNDYgNDYgNDYtMjAuNTk1IDQ2LTQ2LTIwLjU5NS00Ni00Ni00NnptLTQzLjY3My0xNjUuMzQ2bDcuNDE4IDEzNmMuMzQ3IDYuMzY0IDUuNjA5IDExLjM0NiAxMS45ODIgMTEuMzQ2aDQ4LjU0NmM2LjM3MyAwIDExLjYzNS00Ljk4MiAxMS45ODItMTEuMzQ2bDcuNDE4LTEzNmMuMzc1LTYuODc0LTUuMDk4LTEyLjY1NC0xMS45ODItMTIuNjU0aC02My4zODNjLTYuODg0IDAtMTIuMzU2IDUuNzgtMTEuOTgxIDEyLjY1NHpcIj48L3BhdGg+PC9zdmc+YFxuKTtcblxuY2xhc3MgU3RhdHVzTW9kYWwgZXh0ZW5kcyBNb2RhbCB7XG4gICAgc3RhdHVzOiBDb25kaXRpb24gPSB7IG5hbWU6IG51bGwsIGRlc2NyaXB0aW9uOiBudWxsIH07XG4gICAgY2FuY2VsZWQgPSBmYWxzZTtcbiAgICBlZGl0aW5nOiBib29sZWFuID0gZmFsc2U7XG4gICAgb3JpZ2luYWw6IHN0cmluZztcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgcGx1Z2luOiBJbml0aWF0aXZlVHJhY2tlciwgc3RhdHVzPzogQ29uZGl0aW9uKSB7XG4gICAgICAgIHN1cGVyKHBsdWdpbi5hcHApO1xuICAgICAgICBpZiAoc3RhdHVzKSB7XG4gICAgICAgICAgICB0aGlzLmVkaXRpbmcgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5vcmlnaW5hbCA9IHN0YXR1cy5uYW1lO1xuICAgICAgICAgICAgdGhpcy5zdGF0dXMgPSB7XG4gICAgICAgICAgICAgICAgbmFtZTogc3RhdHVzLm5hbWUsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IHN0YXR1cy5kZXNjcmlwdGlvblxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB3YXJuZWQgPSBmYWxzZTtcbiAgICBvbk9wZW4oKSB7XG4gICAgICAgIHRoaXMudGl0bGVFbC5zZXRUZXh0KHRoaXMuZWRpdGluZyA/IFwiRWRpdCBTdGF0dXNcIiA6IFwiTmV3IFN0YXR1c1wiKTtcblxuICAgICAgICBjb25zdCBuYW1lID0gbmV3IFNldHRpbmcodGhpcy5jb250ZW50RWwpXG4gICAgICAgICAgICAuc2V0TmFtZShcIk5hbWVcIilcbiAgICAgICAgICAgIC5hZGRUZXh0KCh0KSA9PiB7XG4gICAgICAgICAgICAgICAgdC5zZXRWYWx1ZSh0aGlzLnN0YXR1cy5uYW1lKS5vbkNoYW5nZSgodikgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXR1cy5uYW1lID0gdjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uZGF0YS5zdGF0dXNlcy5maW5kKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChzKSA9PiBzLm5hbWUgPT0gdGhpcy5zdGF0dXMubmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgIXRoaXMud2FybmVkICYmXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9yaWdpbmFsICE9IHRoaXMuc3RhdHVzLm5hbWVcbiAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLndhcm5lZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lLnNldERlc2MoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlRnJhZ21lbnQoKGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY29udGFpbmVyID0gZS5jcmVhdGVEaXYoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImluaXRpYXRpdmUtdHJhY2tlci13YXJuaW5nXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0SWNvbihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiaW5pdGlhdGl2ZS10cmFja2VyLXdhcm5pbmdcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXIuY3JlYXRlU3Bhbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBcIkEgc3RhdHVzIGJ5IHRoaXMgbmFtZSBhbHJlYWR5IGV4aXN0cyBhbmQgd2lsbCBiZSBvdmVyd3JpdHRlbi5cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLndhcm5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy53YXJuZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWUuc2V0RGVzYyhcIlwiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIG5ldyBTZXR0aW5nKHRoaXMuY29udGVudEVsKS5zZXROYW1lKFwiRGVzY3JpcHRpb25cIikuYWRkVGV4dEFyZWEoKHQpID0+IHtcbiAgICAgICAgICAgIHQuc2V0VmFsdWUodGhpcy5zdGF0dXMuZGVzY3JpcHRpb24pLm9uQ2hhbmdlKFxuICAgICAgICAgICAgICAgICh2KSA9PiAodGhpcy5zdGF0dXMuZGVzY3JpcHRpb24gPSB2KVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgbmV3IEJ1dHRvbkNvbXBvbmVudChcbiAgICAgICAgICAgIHRoaXMuY29udGVudEVsLmNyZWF0ZURpdihcImluaXRpYXRpdmUtdHJhY2tlci1jYW5jZWxcIilcbiAgICAgICAgKVxuICAgICAgICAgICAgLnNldEJ1dHRvblRleHQoXCJDYW5jZWxcIilcbiAgICAgICAgICAgIC5vbkNsaWNrKCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmNhbmNlbGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAgICAgICB9KTtcbiAgICB9XG59XG5cbmNsYXNzIFBhcnR5TW9kYWwgZXh0ZW5kcyBNb2RhbCB7XG4gICAgcGFydHk6IFBhcnR5ID0geyBuYW1lOiBudWxsLCBwbGF5ZXJzOiBbXSB9O1xuICAgIGNhbmNlbGVkID0gZmFsc2U7XG4gICAgZWRpdGluZyA9IGZhbHNlO1xuICAgIHdhcm5lZCA9IGZhbHNlO1xuICAgIG9yaWdpbmFsOiBzdHJpbmc7XG4gICAgY29uc3RydWN0b3IocHVibGljIHBsdWdpbjogSW5pdGlhdGl2ZVRyYWNrZXIsIHBhcnR5PzogUGFydHkpIHtcbiAgICAgICAgc3VwZXIocGx1Z2luLmFwcCk7XG4gICAgICAgIGlmIChwYXJ0eSkge1xuICAgICAgICAgICAgdGhpcy5lZGl0aW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMub3JpZ2luYWwgPSBwYXJ0eS5uYW1lO1xuICAgICAgICAgICAgdGhpcy5wYXJ0eSA9IHtcbiAgICAgICAgICAgICAgICBuYW1lOiBwYXJ0eS5uYW1lLFxuICAgICAgICAgICAgICAgIHBsYXllcnM6IFsuLi4ocGFydHkucGxheWVycyA/PyBbXSldXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIG9uT3BlbigpOiB2b2lkIHtcbiAgICAgICAgdGhpcy50aXRsZUVsLnNldFRleHQoXG4gICAgICAgICAgICB0aGlzLmVkaXRpbmcgPyBgRWRpdCAke3RoaXMucGFydHkubmFtZSA/PyBcIlBhcnR5XCJ9YCA6IFwiTmV3IFBhcnR5XCJcbiAgICAgICAgKTtcblxuICAgICAgICBjb25zdCBuYW1lID0gbmV3IFNldHRpbmcodGhpcy5jb250ZW50RWwpXG4gICAgICAgICAgICAuc2V0TmFtZShcIk5hbWVcIilcbiAgICAgICAgICAgIC5hZGRUZXh0KCh0KSA9PiB7XG4gICAgICAgICAgICAgICAgdC5zZXRWYWx1ZSh0aGlzLnBhcnR5Lm5hbWUpLm9uQ2hhbmdlKCh2KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGFydHkubmFtZSA9IHY7XG4gICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLmRhdGEucGFydGllcy5maW5kKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChzKSA9PiBzLm5hbWUgPT0gdGhpcy5wYXJ0eS5uYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICApICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAhdGhpcy53YXJuZWQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub3JpZ2luYWwgIT0gdGhpcy5wYXJ0eS5uYW1lXG4gICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy53YXJuZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZS5zZXREZXNjKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZUZyYWdtZW50KChlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IGUuY3JlYXRlRGl2KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJpbml0aWF0aXZlLXRyYWNrZXItd2FybmluZ1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldEljb24oXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250YWluZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImluaXRpYXRpdmUtdHJhY2tlci13YXJuaW5nXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyLmNyZWF0ZVNwYW4oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogXCJBIHBhcnR5IGJ5IHRoaXMgbmFtZSBhbHJlYWR5IGV4aXN0cyBhbmQgd2lsbCBiZSBvdmVyd3JpdHRlbi5cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLndhcm5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy53YXJuZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWUuc2V0RGVzYyhcIlwiKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgcGxheWVyc0VsID0gdGhpcy5jb250ZW50RWwuY3JlYXRlRGl2KFxuICAgICAgICAgICAgXCJpbml0aWF0aXZlLXRyYWNrZXItYWRkaXRpb25hbC1jb250YWluZXJcIlxuICAgICAgICApO1xuICAgICAgICBsZXQgcGxheWVyVGV4dDogVGV4dENvbXBvbmVudDtcbiAgICAgICAgbmV3IFNldHRpbmcocGxheWVyc0VsKVxuICAgICAgICAgICAgLnNldE5hbWUoXCJBZGQgUGxheWVyIHRvIFBhcnR5XCIpXG4gICAgICAgICAgICAuYWRkVGV4dCgodCkgPT4ge1xuICAgICAgICAgICAgICAgIHBsYXllclRleHQgPSB0O1xuICAgICAgICAgICAgICAgIG5ldyBQbGF5ZXJTdWdnZXN0aW9uTW9kYWwodGhpcy5wbHVnaW4sIHQsIHRoaXMucGFydHkpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5hZGRFeHRyYUJ1dHRvbigoYikgPT5cbiAgICAgICAgICAgICAgICBiLnNldEljb24oXCJwbHVzLXdpdGgtY2lyY2xlXCIpLm9uQ2xpY2soKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXBsYXllclRleHQuZ2V0VmFsdWUoKSB8fCAhcGxheWVyVGV4dC5nZXRWYWx1ZSgpLmxlbmd0aClcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucGFydHkucGxheWVycy5pbmNsdWRlcyhwbGF5ZXJUZXh0LmdldFZhbHVlKCkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgTm90aWNlKFwiVGhhdCBwbGF5ZXIgaXMgYWxyZWFkeSBpbiB0aGlzIHBhcnR5IVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAhdGhpcy5wbHVnaW4uZGF0YS5wbGF5ZXJzLmZpbmQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKHApID0+IHAubmFtZSA9PSBwbGF5ZXJUZXh0LmdldFZhbHVlKClcbiAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgTm90aWNlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiVGhhdCBwbGF5ZXIgZG9lc24ndCBleGlzdCEgWW91IHNob3VsZCBtYWtlIHRoZW0gZmlyc3QuXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXJ0eS5wbGF5ZXJzLnB1c2gocGxheWVyVGV4dC5nZXRWYWx1ZSgpKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXNwbGF5UGxheWVycyhwbGF5ZXJzRGlzcGxheUVsKTtcbiAgICAgICAgICAgICAgICAgICAgcGxheWVyVGV4dC5zZXRWYWx1ZShcIlwiKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKTtcbiAgICAgICAgY29uc3QgcGxheWVyc0Rpc3BsYXlFbCA9IHBsYXllcnNFbC5jcmVhdGVEaXYoXCJhZGRpdGlvbmFsXCIpO1xuICAgICAgICB0aGlzLmRpc3BsYXlQbGF5ZXJzKHBsYXllcnNEaXNwbGF5RWwpO1xuXG4gICAgICAgIG5ldyBCdXR0b25Db21wb25lbnQoXG4gICAgICAgICAgICB0aGlzLmNvbnRlbnRFbC5jcmVhdGVEaXYoXCJpbml0aWF0aXZlLXRyYWNrZXItY2FuY2VsXCIpXG4gICAgICAgIClcbiAgICAgICAgICAgIC5zZXRCdXR0b25UZXh0KFwiQ2FuY2VsXCIpXG4gICAgICAgICAgICAub25DbGljaygoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5jYW5jZWxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxuICAgIGRpc3BsYXlQbGF5ZXJzKGNvbnRhaW5lckVsOiBIVE1MRGl2RWxlbWVudCkge1xuICAgICAgICBjb250YWluZXJFbC5lbXB0eSgpO1xuICAgICAgICBpZiAodGhpcy5wYXJ0eS5wbGF5ZXJzLmxlbmd0aCkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBwbGF5ZXIgb2YgdGhpcy5wYXJ0eS5wbGF5ZXJzKSB7XG4gICAgICAgICAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpLnNldE5hbWUocGxheWVyKS5hZGRFeHRyYUJ1dHRvbigoYikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBiLnNldEljb24oXCJ0cmFzaFwiKS5vbkNsaWNrKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGFydHkucGxheWVycy5zcGxpY2UoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXJ0eS5wbGF5ZXJzLmluZGV4T2YocGxheWVyKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAxXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXNwbGF5UGxheWVycyhjb250YWluZXJFbCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29udGFpbmVyRWxcbiAgICAgICAgICAgICAgICAuY3JlYXRlRGl2KHtcbiAgICAgICAgICAgICAgICAgICAgYXR0cjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IFwiZGlzcGxheTogZmxleDsganVzdGlmeS1jb250ZW50OiBjZW50ZXI7IHBhZGRpbmctYm90dG9tOiAxOHB4O1wiXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5jcmVhdGVTcGFuKHtcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogXCJBZGQgYSBwbGF5ZXIgdG8gdGhlIHBhcnR5IHRvIHNlZSBpdCBoZXJlLlwiXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCAiaW1wb3J0IHtcbiAgICBBcHAsXG4gICAgQ2FjaGVkTWV0YWRhdGEsXG4gICAgRnV6enlNYXRjaCxcbiAgICBGdXp6eVN1Z2dlc3RNb2RhbCxcbiAgICBTY29wZSxcbiAgICBTZXR0aW5nLFxuICAgIFN1Z2dlc3RNb2RhbCxcbiAgICBUZXh0Q29tcG9uZW50LFxuICAgIFRGaWxlLFxuICAgIFRGb2xkZXJcbn0gZnJvbSBcIm9ic2lkaWFuXCI7XG5pbXBvcnQgeyBjcmVhdGVQb3BwZXIsIEluc3RhbmNlIGFzIFBvcHBlckluc3RhbmNlIH0gZnJvbSBcIkBwb3BwZXJqcy9jb3JlXCI7XG5cbmltcG9ydCB7IENvbmRpdGlvbnMgfSBmcm9tIFwiLi9jb25kaXRpb25zXCI7XG5cbmltcG9ydCB0eXBlIHtcbiAgICBIb21lYnJld0NyZWF0dXJlLFxuICAgIFNSRE1vbnN0ZXIsXG4gICAgQ29uZGl0aW9uLFxuICAgIFBhcnR5XG59IGZyb20gXCIuLi8uLi9AdHlwZXNcIjtcbmltcG9ydCB0eXBlIEluaXRpYXRpdmVUcmFja2VyIGZyb20gXCJzcmMvbWFpblwiO1xuXG5jbGFzcyBTdWdnZXN0ZXI8VD4ge1xuICAgIG93bmVyOiBTdWdnZXN0TW9kYWw8VD47XG4gICAgaXRlbXM6IFRbXTtcbiAgICBzdWdnZXN0aW9uczogSFRNTERpdkVsZW1lbnRbXTtcbiAgICBzZWxlY3RlZEl0ZW06IG51bWJlcjtcbiAgICBjb250YWluZXJFbDogSFRNTEVsZW1lbnQ7XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIG93bmVyOiBTdWdnZXN0TW9kYWw8VD4sXG4gICAgICAgIGNvbnRhaW5lckVsOiBIVE1MRWxlbWVudCxcbiAgICAgICAgc2NvcGU6IFNjb3BlXG4gICAgKSB7XG4gICAgICAgIHRoaXMuY29udGFpbmVyRWwgPSBjb250YWluZXJFbDtcbiAgICAgICAgdGhpcy5vd25lciA9IG93bmVyO1xuICAgICAgICBjb250YWluZXJFbC5vbihcbiAgICAgICAgICAgIFwiY2xpY2tcIixcbiAgICAgICAgICAgIFwiLnN1Z2dlc3Rpb24taXRlbVwiLFxuICAgICAgICAgICAgdGhpcy5vblN1Z2dlc3Rpb25DbGljay5iaW5kKHRoaXMpXG4gICAgICAgICk7XG4gICAgICAgIGNvbnRhaW5lckVsLm9uKFxuICAgICAgICAgICAgXCJtb3VzZW1vdmVcIixcbiAgICAgICAgICAgIFwiLnN1Z2dlc3Rpb24taXRlbVwiLFxuICAgICAgICAgICAgdGhpcy5vblN1Z2dlc3Rpb25Nb3VzZW92ZXIuYmluZCh0aGlzKVxuICAgICAgICApO1xuXG4gICAgICAgIHNjb3BlLnJlZ2lzdGVyKFtdLCBcIkFycm93VXBcIiwgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5zZXRTZWxlY3RlZEl0ZW0odGhpcy5zZWxlY3RlZEl0ZW0gLSAxLCB0cnVlKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgc2NvcGUucmVnaXN0ZXIoW10sIFwiQXJyb3dEb3duXCIsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc2V0U2VsZWN0ZWRJdGVtKHRoaXMuc2VsZWN0ZWRJdGVtICsgMSwgdHJ1ZSk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHNjb3BlLnJlZ2lzdGVyKFtdLCBcIkVudGVyXCIsIChldnQpID0+IHtcbiAgICAgICAgICAgIHRoaXMudXNlU2VsZWN0ZWRJdGVtKGV2dCk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHNjb3BlLnJlZ2lzdGVyKFtdLCBcIlRhYlwiLCAoZXZ0KSA9PiB7XG4gICAgICAgICAgICB0aGlzLnVzZVNlbGVjdGVkSXRlbShldnQpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgY2hvb3NlU3VnZ2VzdGlvbihldnQ6IEtleWJvYXJkRXZlbnQpIHtcbiAgICAgICAgaWYgKCF0aGlzLml0ZW1zIHx8ICF0aGlzLml0ZW1zLmxlbmd0aCkgcmV0dXJuO1xuICAgICAgICBjb25zdCBjdXJyZW50VmFsdWUgPSB0aGlzLml0ZW1zW3RoaXMuc2VsZWN0ZWRJdGVtXTtcbiAgICAgICAgaWYgKGN1cnJlbnRWYWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5vd25lci5zZWxlY3RTdWdnZXN0aW9uKGN1cnJlbnRWYWx1ZSwgZXZ0KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBvblN1Z2dlc3Rpb25DbGljayhldmVudDogTW91c2VFdmVudCwgZWw6IEhUTUxEaXZFbGVtZW50KTogdm9pZCB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGlmICghdGhpcy5zdWdnZXN0aW9ucyB8fCAhdGhpcy5zdWdnZXN0aW9ucy5sZW5ndGgpIHJldHVybjtcblxuICAgICAgICBjb25zdCBpdGVtID0gdGhpcy5zdWdnZXN0aW9ucy5pbmRleE9mKGVsKTtcbiAgICAgICAgdGhpcy5zZXRTZWxlY3RlZEl0ZW0oaXRlbSwgZmFsc2UpO1xuICAgICAgICB0aGlzLnVzZVNlbGVjdGVkSXRlbShldmVudCk7XG4gICAgfVxuXG4gICAgb25TdWdnZXN0aW9uTW91c2VvdmVyKGV2ZW50OiBNb3VzZUV2ZW50LCBlbDogSFRNTERpdkVsZW1lbnQpOiB2b2lkIHtcbiAgICAgICAgaWYgKCF0aGlzLnN1Z2dlc3Rpb25zIHx8ICF0aGlzLnN1Z2dlc3Rpb25zLmxlbmd0aCkgcmV0dXJuO1xuICAgICAgICBjb25zdCBpdGVtID0gdGhpcy5zdWdnZXN0aW9ucy5pbmRleE9mKGVsKTtcbiAgICAgICAgdGhpcy5zZXRTZWxlY3RlZEl0ZW0oaXRlbSwgZmFsc2UpO1xuICAgIH1cbiAgICBlbXB0eSgpIHtcbiAgICAgICAgdGhpcy5jb250YWluZXJFbC5lbXB0eSgpO1xuICAgIH1cbiAgICBzZXRTdWdnZXN0aW9ucyhpdGVtczogVFtdKSB7XG4gICAgICAgIHRoaXMuY29udGFpbmVyRWwuZW1wdHkoKTtcbiAgICAgICAgY29uc3QgZWxzOiBIVE1MRGl2RWxlbWVudFtdID0gW107XG5cbiAgICAgICAgaXRlbXMuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc3VnZ2VzdGlvbkVsID0gdGhpcy5jb250YWluZXJFbC5jcmVhdGVEaXYoXCJzdWdnZXN0aW9uLWl0ZW1cIik7XG4gICAgICAgICAgICB0aGlzLm93bmVyLnJlbmRlclN1Z2dlc3Rpb24oaXRlbSwgc3VnZ2VzdGlvbkVsKTtcbiAgICAgICAgICAgIGVscy5wdXNoKHN1Z2dlc3Rpb25FbCk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLml0ZW1zID0gaXRlbXM7XG4gICAgICAgIHRoaXMuc3VnZ2VzdGlvbnMgPSBlbHM7XG4gICAgICAgIHRoaXMuc2V0U2VsZWN0ZWRJdGVtKDAsIGZhbHNlKTtcbiAgICB9XG4gICAgdXNlU2VsZWN0ZWRJdGVtKGV2ZW50OiBNb3VzZUV2ZW50IHwgS2V5Ym9hcmRFdmVudCkge1xuICAgICAgICBpZiAoIXRoaXMuaXRlbXMgfHwgIXRoaXMuaXRlbXMubGVuZ3RoKSByZXR1cm47XG5cbiAgICAgICAgY29uc3QgY3VycmVudFZhbHVlID0gdGhpcy5pdGVtc1t0aGlzLnNlbGVjdGVkSXRlbV07XG5cbiAgICAgICAgaWYgKGN1cnJlbnRWYWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5vd25lci5zZWxlY3RTdWdnZXN0aW9uKGN1cnJlbnRWYWx1ZSwgZXZlbnQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHdyYXAodmFsdWU6IG51bWJlciwgc2l6ZTogbnVtYmVyKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuICgodmFsdWUgJSBzaXplKSArIHNpemUpICUgc2l6ZTtcbiAgICB9XG4gICAgc2V0U2VsZWN0ZWRJdGVtKGluZGV4OiBudW1iZXIsIHNjcm9sbDogYm9vbGVhbikge1xuICAgICAgICBjb25zdCBuSW5kZXggPSB0aGlzLndyYXAoaW5kZXgsIHRoaXMuc3VnZ2VzdGlvbnMubGVuZ3RoKTtcbiAgICAgICAgY29uc3QgcHJldiA9IHRoaXMuc3VnZ2VzdGlvbnNbdGhpcy5zZWxlY3RlZEl0ZW1dO1xuICAgICAgICBjb25zdCBuZXh0ID0gdGhpcy5zdWdnZXN0aW9uc1tuSW5kZXhdO1xuXG4gICAgICAgIGlmIChwcmV2KSBwcmV2LnJlbW92ZUNsYXNzKFwiaXMtc2VsZWN0ZWRcIik7XG4gICAgICAgIGlmIChuZXh0KSBuZXh0LmFkZENsYXNzKFwiaXMtc2VsZWN0ZWRcIik7XG5cbiAgICAgICAgdGhpcy5zZWxlY3RlZEl0ZW0gPSBuSW5kZXg7XG5cbiAgICAgICAgaWYgKHNjcm9sbCkge1xuICAgICAgICAgICAgbmV4dC5zY3JvbGxJbnRvVmlldyhmYWxzZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmFic3RyYWN0IGNsYXNzIFN1Z2dlc3Rpb25Nb2RhbDxUPiBleHRlbmRzIEZ1enp5U3VnZ2VzdE1vZGFsPFQ+IHtcbiAgICBpdGVtczogVFtdID0gW107XG4gICAgc3VnZ2VzdGlvbnM6IEhUTUxEaXZFbGVtZW50W107XG4gICAgcG9wcGVyOiBQb3BwZXJJbnN0YW5jZTtcbiAgICBzY29wZTogU2NvcGUgPSBuZXcgU2NvcGUoKTtcbiAgICBzdWdnZXN0ZXI6IFN1Z2dlc3RlcjxGdXp6eU1hdGNoPFQ+PjtcbiAgICBzdWdnZXN0RWw6IEhUTUxEaXZFbGVtZW50O1xuICAgIHByb21wdEVsOiBIVE1MRGl2RWxlbWVudDtcbiAgICBlbXB0eVN0YXRlVGV4dDogc3RyaW5nID0gXCJObyBtYXRjaCBmb3VuZFwiO1xuICAgIGxpbWl0OiBudW1iZXIgPSAyNTtcbiAgICBjb25zdHJ1Y3RvcihhcHA6IEFwcCwgaW5wdXRFbDogSFRNTElucHV0RWxlbWVudCkge1xuICAgICAgICBzdXBlcihhcHApO1xuICAgICAgICB0aGlzLmlucHV0RWwgPSBpbnB1dEVsO1xuXG4gICAgICAgIHRoaXMuc3VnZ2VzdEVsID0gY3JlYXRlRGl2KHtcbiAgICAgICAgICAgIGF0dHI6IHsgc3R5bGU6IFwibWluLXdpZHRoOiA0NzVweDtcIiB9LFxuICAgICAgICAgICAgY2xzOiBcInN1Z2dlc3Rpb24tY29udGFpbmVyXCJcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5jb250ZW50RWwgPSB0aGlzLnN1Z2dlc3RFbC5jcmVhdGVEaXYoXCJzdWdnZXN0aW9uXCIpO1xuXG4gICAgICAgIHRoaXMuc3VnZ2VzdGVyID0gbmV3IFN1Z2dlc3Rlcih0aGlzLCB0aGlzLmNvbnRlbnRFbCwgdGhpcy5zY29wZSk7XG5cbiAgICAgICAgdGhpcy5zY29wZS5yZWdpc3RlcihbXSwgXCJFc2NhcGVcIiwgdGhpcy5jbG9zZS5iaW5kKHRoaXMpKTtcblxuICAgICAgICB0aGlzLmlucHV0RWwuYWRkRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsIHRoaXMub25JbnB1dENoYW5nZWQuYmluZCh0aGlzKSk7XG4gICAgICAgIHRoaXMuaW5wdXRFbC5hZGRFdmVudExpc3RlbmVyKFwiZm9jdXNcIiwgdGhpcy5vbklucHV0Q2hhbmdlZC5iaW5kKHRoaXMpKTtcbiAgICAgICAgdGhpcy5pbnB1dEVsLmFkZEV2ZW50TGlzdGVuZXIoXCJibHVyXCIsIHRoaXMuY2xvc2UuYmluZCh0aGlzKSk7XG4gICAgICAgIHRoaXMuc3VnZ2VzdEVsLm9uKFxuICAgICAgICAgICAgXCJtb3VzZWRvd25cIixcbiAgICAgICAgICAgIFwiLnN1Z2dlc3Rpb24tY29udGFpbmVyXCIsXG4gICAgICAgICAgICAoZXZlbnQ6IE1vdXNlRXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH1cbiAgICBlbXB0eSgpIHtcbiAgICAgICAgdGhpcy5zdWdnZXN0ZXIuZW1wdHkoKTtcbiAgICB9XG4gICAgb25JbnB1dENoYW5nZWQoKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGlucHV0U3RyID0gdGhpcy5tb2RpZnlJbnB1dCh0aGlzLmlucHV0RWwudmFsdWUpO1xuICAgICAgICBjb25zdCBzdWdnZXN0aW9ucyA9IHRoaXMuZ2V0U3VnZ2VzdGlvbnMoaW5wdXRTdHIpO1xuXG4gICAgICAgIGlmIChzdWdnZXN0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB0aGlzLnN1Z2dlc3Rlci5zZXRTdWdnZXN0aW9ucyhzdWdnZXN0aW9ucy5zbGljZSgwLCB0aGlzLmxpbWl0KSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm9uTm9TdWdnZXN0aW9uKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vcGVuKCk7XG4gICAgfVxuXG4gICAgbW9kaWZ5SW5wdXQoaW5wdXQ6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBpbnB1dDtcbiAgICB9XG4gICAgb25Ob1N1Z2dlc3Rpb24oKSB7XG4gICAgICAgIHRoaXMuZW1wdHkoKTtcbiAgICAgICAgdGhpcy5yZW5kZXJTdWdnZXN0aW9uKFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIHRoaXMuY29udGVudEVsLmNyZWF0ZURpdihcInN1Z2dlc3Rpb24taXRlbVwiKVxuICAgICAgICApO1xuICAgIH1cbiAgICBvcGVuKCk6IHZvaWQge1xuICAgICAgICAvLyBUT0RPOiBGaWd1cmUgb3V0IGEgYmV0dGVyIHdheSB0byBkbyB0aGlzLiBJZGVhIGZyb20gUGVyaW9kaWMgTm90ZXMgcGx1Z2luXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgICAgICg8YW55PnRoaXMuYXBwKS5rZXltYXAucHVzaFNjb3BlKHRoaXMuc2NvcGUpO1xuXG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5zdWdnZXN0RWwpO1xuICAgICAgICB0aGlzLnBvcHBlciA9IGNyZWF0ZVBvcHBlcih0aGlzLmlucHV0RWwsIHRoaXMuc3VnZ2VzdEVsLCB7XG4gICAgICAgICAgICBwbGFjZW1lbnQ6IFwiYXV0by1zdGFydFwiLFxuICAgICAgICAgICAgbW9kaWZpZXJzOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIm9mZnNldFwiLFxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQ6IFswLCAxMF1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcImZsaXBcIixcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWxsb3dlZEF1dG9QbGFjZW1lbnRzOiBbXCJ0b3Atc3RhcnRcIiwgXCJib3R0b20tc3RhcnRcIl1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgY2xvc2UoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuYXBwLmtleW1hcC5wb3BTY29wZSh0aGlzLnNjb3BlKTtcblxuICAgICAgICB0aGlzLnN1Z2dlc3Rlci5zZXRTdWdnZXN0aW9ucyhbXSk7XG4gICAgICAgIGlmICh0aGlzLnBvcHBlcikge1xuICAgICAgICAgICAgdGhpcy5wb3BwZXIuZGVzdHJveSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zdWdnZXN0RWwuZGV0YWNoKCk7XG4gICAgfVxuICAgIGNyZWF0ZVByb21wdChwcm9tcHRzOiBIVE1MU3BhbkVsZW1lbnRbXSkge1xuICAgICAgICBpZiAoIXRoaXMucHJvbXB0RWwpXG4gICAgICAgICAgICB0aGlzLnByb21wdEVsID0gdGhpcy5zdWdnZXN0RWwuY3JlYXRlRGl2KFwicHJvbXB0LWluc3RydWN0aW9uc1wiKTtcbiAgICAgICAgbGV0IHByb21wdCA9IHRoaXMucHJvbXB0RWwuY3JlYXRlRGl2KFwicHJvbXB0LWluc3RydWN0aW9uXCIpO1xuICAgICAgICBmb3IgKGxldCBwIG9mIHByb21wdHMpIHtcbiAgICAgICAgICAgIHByb21wdC5hcHBlbmRDaGlsZChwKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhYnN0cmFjdCBvbkNob29zZUl0ZW0oaXRlbTogVCwgZXZ0OiBNb3VzZUV2ZW50IHwgS2V5Ym9hcmRFdmVudCk6IHZvaWQ7XG4gICAgYWJzdHJhY3QgZ2V0SXRlbVRleHQoYXJnOiBUKTogc3RyaW5nO1xuICAgIGFic3RyYWN0IGdldEl0ZW1zKCk6IFRbXTtcbn1cblxuZXhwb3J0IGNsYXNzIEZpbGVTdWdnZXN0aW9uTW9kYWwgZXh0ZW5kcyBTdWdnZXN0aW9uTW9kYWw8VEZpbGU+IHtcbiAgICBmaWxlOiBURmlsZTtcbiAgICB0ZXh0OiBUZXh0Q29tcG9uZW50O1xuICAgIGZpbGVzID0gdGhpcy5hcHAudmF1bHQuZ2V0TWFya2Rvd25GaWxlcygpO1xuICAgIGNvbnN0cnVjdG9yKGFwcDogQXBwLCBpbnB1dDogVGV4dENvbXBvbmVudCkge1xuICAgICAgICBzdXBlcihhcHAsIGlucHV0LmlucHV0RWwpO1xuICAgICAgICB0aGlzLnRleHQgPSBpbnB1dDtcblxuICAgICAgICB0aGlzLmNyZWF0ZVByb21wdHMoKTtcblxuICAgICAgICB0aGlzLmlucHV0RWwuYWRkRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsIHRoaXMuZ2V0SXRlbS5iaW5kKHRoaXMpKTtcbiAgICB9XG4gICAgY3JlYXRlUHJvbXB0cygpIHt9XG4gICAgZ2V0SXRlbSgpIHtcbiAgICAgICAgY29uc3QgdiA9IHRoaXMuaW5wdXRFbC52YWx1ZSxcbiAgICAgICAgICAgIGZpbGUgPSB0aGlzLml0ZW1zLmZpbmQoKGZpbGUpID0+IGZpbGUubmFtZSA9PT0gdi50cmltKCkpO1xuICAgICAgICBpZiAoZmlsZSA9PSB0aGlzLmZpbGUpIHJldHVybjtcbiAgICAgICAgdGhpcy5maWxlID0gZmlsZTtcbiAgICAgICAgaWYgKHRoaXMuaXRlbXMpIHRoaXMub25JbnB1dENoYW5nZWQoKTtcbiAgICB9XG4gICAgZ2V0SXRlbVRleHQoaXRlbTogVEZpbGUpIHtcbiAgICAgICAgcmV0dXJuIGl0ZW0ubmFtZTtcbiAgICB9XG4gICAgb25DaG9vc2VJdGVtKGl0ZW06IFRGaWxlKSB7XG4gICAgICAgIHRoaXMudGV4dC5zZXRWYWx1ZShpdGVtLm5hbWUpO1xuICAgICAgICB0aGlzLmZpbGUgPSBpdGVtO1xuICAgIH1cbiAgICBzZWxlY3RTdWdnZXN0aW9uKHsgaXRlbSB9OiBGdXp6eU1hdGNoPFRGaWxlPikge1xuICAgICAgICB0aGlzLnRleHQuc2V0VmFsdWUoaXRlbS5iYXNlbmFtZSk7XG4gICAgICAgIHRoaXMuZmlsZSA9IGl0ZW07XG5cbiAgICAgICAgdGhpcy5vbkNsb3NlKCk7XG4gICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICB9XG4gICAgcmVuZGVyU3VnZ2VzdGlvbihyZXN1bHQ6IEZ1enp5TWF0Y2g8VEZpbGU+LCBlbDogSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgbGV0IHsgaXRlbSwgbWF0Y2g6IG1hdGNoZXMgfSA9IHJlc3VsdCB8fCB7fTtcbiAgICAgICAgbGV0IGNvbnRlbnQgPSBlbC5jcmVhdGVEaXYoe1xuICAgICAgICAgICAgY2xzOiBcInN1Z2dlc3Rpb24tY29udGVudCBpY29uXCJcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICghaXRlbSkge1xuICAgICAgICAgICAgdGhpcy5zdWdnZXN0ZXIuc2VsZWN0ZWRJdGVtID0gbnVsbDtcbiAgICAgICAgICAgIGNvbnRlbnQuc2V0VGV4dCh0aGlzLmVtcHR5U3RhdGVUZXh0KTtcbiAgICAgICAgICAgIGNvbnRlbnQucGFyZW50RWxlbWVudC5hZGRDbGFzcyhcImlzLXNlbGVjdGVkXCIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbWF0Y2hFbGVtZW50cyA9IG1hdGNoZXMubWF0Y2hlcy5tYXAoKG0pID0+IHtcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVTcGFuKFwic3VnZ2VzdGlvbi1oaWdobGlnaHRcIik7XG4gICAgICAgIH0pO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGl0ZW0uYmFzZW5hbWUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBtYXRjaCA9IG1hdGNoZXMubWF0Y2hlcy5maW5kKChtKSA9PiBtWzBdID09PSBpKTtcbiAgICAgICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgICAgICAgIGxldCBlbGVtZW50ID0gbWF0Y2hFbGVtZW50c1ttYXRjaGVzLm1hdGNoZXMuaW5kZXhPZihtYXRjaCldO1xuICAgICAgICAgICAgICAgIGNvbnRlbnQuYXBwZW5kQ2hpbGQoZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5hcHBlbmRUZXh0KGl0ZW0uYmFzZW5hbWUuc3Vic3RyaW5nKG1hdGNoWzBdLCBtYXRjaFsxXSkpO1xuXG4gICAgICAgICAgICAgICAgaSArPSBtYXRjaFsxXSAtIG1hdGNoWzBdIC0gMTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29udGVudC5hcHBlbmRUZXh0KGl0ZW0uYmFzZW5hbWVbaV0pO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHBhdGggPSBpdGVtLnBhdGguc3BsaXQoXCIvXCIpLnNsaWNlKDAsIC0xKS5qb2luKFwiL1wiKTtcbiAgICAgICAgaWYgKHBhdGgubGVuZ3RoKSB7XG4gICAgICAgICAgICBwYXRoICs9IFwiL1wiO1xuICAgICAgICB9XG5cbiAgICAgICAgZWwuY3JlYXRlRGl2KHtcbiAgICAgICAgICAgIGNsczogXCJzdWdnZXN0aW9uLW5vdGVcIixcbiAgICAgICAgICAgIHRleHQ6IHBhdGhcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGdldEl0ZW1zKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5maWxlcztcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBTUkRNb25zdGVyU3VnZ2VzdGlvbk1vZGFsIGV4dGVuZHMgU3VnZ2VzdGlvbk1vZGFsPFxuICAgIEhvbWVicmV3Q3JlYXR1cmUgfCBTUkRNb25zdGVyXG4+IHtcbiAgICBjcmVhdHVyZTogSG9tZWJyZXdDcmVhdHVyZSB8IFNSRE1vbnN0ZXI7XG4gICAgY3JlYXR1cmVzOiAoSG9tZWJyZXdDcmVhdHVyZSB8IFNSRE1vbnN0ZXIpW107XG4gICAgY29uc3RydWN0b3IocHVibGljIHBsdWdpbjogSW5pdGlhdGl2ZVRyYWNrZXIsIGlucHV0RWw6IEhUTUxJbnB1dEVsZW1lbnQpIHtcbiAgICAgICAgc3VwZXIocGx1Z2luLmFwcCwgaW5wdXRFbCk7XG4gICAgICAgIHRoaXMuY3JlYXR1cmVzID0gWy4uLnRoaXMucGx1Z2luLmRhdGEucGxheWVycywgLi4udGhpcy5wbHVnaW4uYmVzdGlhcnldO1xuICAgICAgICAvKiB0aGlzLm9uSW5wdXRDaGFuZ2VkKCk7ICovXG4gICAgfVxuICAgIGdldEl0ZW1zKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jcmVhdHVyZXM7XG4gICAgfVxuICAgIGdldEl0ZW1UZXh0KGl0ZW06IEhvbWVicmV3Q3JlYXR1cmUgfCBTUkRNb25zdGVyKSB7XG4gICAgICAgIHJldHVybiBpdGVtLm5hbWU7XG4gICAgfVxuICAgIG9uQ2hvb3NlSXRlbShpdGVtOiBIb21lYnJld0NyZWF0dXJlIHwgU1JETW9uc3Rlcikge1xuICAgICAgICB0aGlzLmlucHV0RWwudmFsdWUgPSBpdGVtLm5hbWU7XG4gICAgICAgIHRoaXMuY3JlYXR1cmUgPSBpdGVtO1xuICAgICAgICB0aGlzLm9uQ2xvc2UoKTtcbiAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgIH1cbiAgICBzZWxlY3RTdWdnZXN0aW9uKHsgaXRlbSB9OiBGdXp6eU1hdGNoPEhvbWVicmV3Q3JlYXR1cmUgfCBTUkRNb25zdGVyPikge1xuICAgICAgICB0aGlzLmlucHV0RWwudmFsdWUgPSBpdGVtLm5hbWU7XG4gICAgICAgIHRoaXMuY3JlYXR1cmUgPSBpdGVtO1xuXG4gICAgICAgIHRoaXMub25DbG9zZSgpO1xuICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgfVxuICAgIHJlbmRlclN1Z2dlc3Rpb24oXG4gICAgICAgIHJlc3VsdDogRnV6enlNYXRjaDxIb21lYnJld0NyZWF0dXJlIHwgU1JETW9uc3Rlcj4sXG4gICAgICAgIGVsOiBIVE1MRWxlbWVudFxuICAgICkge1xuICAgICAgICBsZXQgeyBpdGVtLCBtYXRjaDogbWF0Y2hlcyB9ID0gcmVzdWx0IHx8IHt9O1xuXG4gICAgICAgIGxldCBjb250ZW50ID0gZWwuY3JlYXRlRGl2KHtcbiAgICAgICAgICAgIGNsczogXCJzdWdnZXN0aW9uLWNvbnRlbnQgaWNvblwiXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIWl0ZW0pIHtcbiAgICAgICAgICAgIHRoaXMuc3VnZ2VzdGVyLnNlbGVjdGVkSXRlbSA9IG51bGw7XG4gICAgICAgICAgICBjb250ZW50LnNldFRleHQodGhpcy5lbXB0eVN0YXRlVGV4dCk7XG4gICAgICAgICAgICBjb250ZW50LnBhcmVudEVsZW1lbnQuYWRkQ2xhc3MoXCJpcy1zZWxlY3RlZFwiKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG1hdGNoRWxlbWVudHMgPSBtYXRjaGVzLm1hdGNoZXMubWFwKChtKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlU3BhbihcInN1Z2dlc3Rpb24taGlnaGxpZ2h0XCIpO1xuICAgICAgICB9KTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpdGVtLm5hbWUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBtYXRjaCA9IG1hdGNoZXMubWF0Y2hlcy5maW5kKChtKSA9PiBtWzBdID09PSBpKTtcbiAgICAgICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgICAgICAgIGxldCBlbGVtZW50ID0gbWF0Y2hFbGVtZW50c1ttYXRjaGVzLm1hdGNoZXMuaW5kZXhPZihtYXRjaCldO1xuICAgICAgICAgICAgICAgIGNvbnRlbnQuYXBwZW5kQ2hpbGQoZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5hcHBlbmRUZXh0KGl0ZW0ubmFtZS5zdWJzdHJpbmcobWF0Y2hbMF0sIG1hdGNoWzFdKSk7XG5cbiAgICAgICAgICAgICAgICBpICs9IG1hdGNoWzFdIC0gbWF0Y2hbMF0gLSAxO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb250ZW50LmFwcGVuZFRleHQoaXRlbS5uYW1lW2ldKTtcbiAgICAgICAgfVxuICAgICAgICBlbC5jcmVhdGVEaXYoe1xuICAgICAgICAgICAgY2xzOiBcInN1Z2dlc3Rpb24tbm90ZVwiLFxuICAgICAgICAgICAgdGV4dDogW2l0ZW0uc291cmNlXS5mbGF0KCkuam9pbihcIiwgXCIpXG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuYWJzdHJhY3QgY2xhc3MgRWxlbWVudFN1Z2dlc3Rpb25Nb2RhbDxUPiBleHRlbmRzIEZ1enp5U3VnZ2VzdE1vZGFsPFQ+IHtcbiAgICBpdGVtczogVFtdID0gW107XG4gICAgc3VnZ2VzdGlvbnM6IEhUTUxEaXZFbGVtZW50W107XG4gICAgc2NvcGU6IFNjb3BlID0gbmV3IFNjb3BlKCk7XG4gICAgc3VnZ2VzdGVyOiBTdWdnZXN0ZXI8RnV6enlNYXRjaDxUPj47XG4gICAgc3VnZ2VzdEVsOiBIVE1MRGl2RWxlbWVudDtcbiAgICBwcm9tcHRFbDogSFRNTERpdkVsZW1lbnQ7XG4gICAgZW1wdHlTdGF0ZVRleHQ6IHN0cmluZyA9IFwiTm8gbWF0Y2ggZm91bmRcIjtcbiAgICBsaW1pdDogbnVtYmVyID0gSW5maW5pdHk7XG4gICAgZmlsdGVyZWRJdGVtczogRnV6enlNYXRjaDxUPltdID0gW107XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIGFwcDogQXBwLFxuICAgICAgICBpbnB1dEVsOiBIVE1MSW5wdXRFbGVtZW50LFxuICAgICAgICBzdWdnZXN0RWw6IEhUTUxEaXZFbGVtZW50XG4gICAgKSB7XG4gICAgICAgIHN1cGVyKGFwcCk7XG4gICAgICAgIHRoaXMuaW5wdXRFbCA9IGlucHV0RWw7XG5cbiAgICAgICAgdGhpcy5zdWdnZXN0RWwgPSBzdWdnZXN0RWwuY3JlYXRlRGl2KC8qIFwic3VnZ2VzdGlvbi1jb250YWluZXJcIiAqLyk7XG5cbiAgICAgICAgdGhpcy5jb250ZW50RWwgPSB0aGlzLnN1Z2dlc3RFbC5jcmVhdGVEaXYoLyogXCJzdWdnZXN0aW9uXCIgKi8pO1xuXG4gICAgICAgIHRoaXMuc3VnZ2VzdGVyID0gbmV3IFN1Z2dlc3Rlcih0aGlzLCB0aGlzLmNvbnRlbnRFbCwgdGhpcy5zY29wZSk7XG5cbiAgICAgICAgdGhpcy5zY29wZS5yZWdpc3RlcihbXSwgXCJFc2NhcGVcIiwgKCkgPT4gdGhpcy5jbG9zZS5iaW5kKHRoaXMpKTtcblxuICAgICAgICB0aGlzLmlucHV0RWwuYWRkRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsIHRoaXMuX29uSW5wdXRDaGFuZ2VkLmJpbmQodGhpcykpO1xuICAgICAgICB0aGlzLmlucHV0RWwuYWRkRXZlbnRMaXN0ZW5lcihcImZvY3VzXCIsIHRoaXMuX29uSW5wdXRDaGFuZ2VkLmJpbmQodGhpcykpO1xuICAgICAgICB0aGlzLmlucHV0RWwuYWRkRXZlbnRMaXN0ZW5lcihcImJsdXJcIiwgdGhpcy5jbG9zZS5iaW5kKHRoaXMpKTtcbiAgICAgICAgdGhpcy5zdWdnZXN0RWwub24oXG4gICAgICAgICAgICBcIm1vdXNlZG93blwiLFxuICAgICAgICAgICAgXCIuc3VnZ2VzdGlvbi1jb250YWluZXJcIixcbiAgICAgICAgICAgIChldmVudDogTW91c2VFdmVudCkgPT4ge1xuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfVxuICAgIGVtcHR5KCkge1xuICAgICAgICB0aGlzLnN1Z2dlc3Rlci5lbXB0eSgpO1xuICAgIH1cbiAgICBfb25JbnB1dENoYW5nZWQoKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGlucHV0U3RyID0gdGhpcy5pbnB1dEVsLnZhbHVlO1xuICAgICAgICB0aGlzLmZpbHRlcmVkSXRlbXMgPSB0aGlzLmdldFN1Z2dlc3Rpb25zKGlucHV0U3RyKTtcbiAgICAgICAgaWYgKHRoaXMuZmlsdGVyZWRJdGVtcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB0aGlzLnN1Z2dlc3Rlci5zZXRTdWdnZXN0aW9ucyhcbiAgICAgICAgICAgICAgICB0aGlzLmZpbHRlcmVkSXRlbXMuc2xpY2UoMCwgdGhpcy5saW1pdClcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm9uTm9TdWdnZXN0aW9uKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vbklucHV0Q2hhbmdlZCgpO1xuICAgICAgICB0aGlzLm9wZW4oKTtcbiAgICB9XG4gICAgb25JbnB1dENoYW5nZWQoKTogdm9pZCB7fVxuICAgIG9uTm9TdWdnZXN0aW9uKCkge1xuICAgICAgICB0aGlzLmVtcHR5KCk7XG4gICAgICAgIHRoaXMucmVuZGVyU3VnZ2VzdGlvbihcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICB0aGlzLmNvbnRlbnRFbC5jcmVhdGVEaXYoLyogXCJzdWdnZXN0aW9uLWl0ZW1cIiAqLylcbiAgICAgICAgKTtcbiAgICB9XG4gICAgb3BlbigpOiB2b2lkIHt9XG5cbiAgICBjbG9zZSgpOiB2b2lkIHt9XG4gICAgY3JlYXRlUHJvbXB0KHByb21wdHM6IEhUTUxTcGFuRWxlbWVudFtdKSB7XG4gICAgICAgIGlmICghdGhpcy5wcm9tcHRFbClcbiAgICAgICAgICAgIHRoaXMucHJvbXB0RWwgPSB0aGlzLnN1Z2dlc3RFbC5jcmVhdGVEaXYoXCJwcm9tcHQtaW5zdHJ1Y3Rpb25zXCIpO1xuICAgICAgICBsZXQgcHJvbXB0ID0gdGhpcy5wcm9tcHRFbC5jcmVhdGVEaXYoXCJwcm9tcHQtaW5zdHJ1Y3Rpb25cIik7XG4gICAgICAgIGZvciAobGV0IHAgb2YgcHJvbXB0cykge1xuICAgICAgICAgICAgcHJvbXB0LmFwcGVuZENoaWxkKHApO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFic3RyYWN0IG9uQ2hvb3NlSXRlbShpdGVtOiBULCBldnQ6IE1vdXNlRXZlbnQgfCBLZXlib2FyZEV2ZW50KTogdm9pZDtcbiAgICBhYnN0cmFjdCBnZXRJdGVtVGV4dChhcmc6IFQpOiBzdHJpbmc7XG4gICAgYWJzdHJhY3QgZ2V0SXRlbXMoKTogVFtdO1xufVxuXG5leHBvcnQgY2xhc3MgSG9tZWJyZXdNb25zdGVyU3VnZ2VzdGlvbk1vZGFsIGV4dGVuZHMgRWxlbWVudFN1Z2dlc3Rpb25Nb2RhbDxIb21lYnJld0NyZWF0dXJlPiB7XG4gICAgY3JlYXR1cmU6IEhvbWVicmV3Q3JlYXR1cmU7XG4gICAgaG9tZWJyZXc6IEhvbWVicmV3Q3JlYXR1cmVbXTtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHVibGljIHBsdWdpbjogSW5pdGlhdGl2ZVRyYWNrZXIsXG4gICAgICAgIGlucHV0RWw6IEhUTUxJbnB1dEVsZW1lbnQsXG4gICAgICAgIGVsOiBIVE1MRGl2RWxlbWVudFxuICAgICkge1xuICAgICAgICBzdXBlcihwbHVnaW4uYXBwLCBpbnB1dEVsLCBlbCk7XG4gICAgICAgIHRoaXMuaG9tZWJyZXcgPSB0aGlzLnBsdWdpbi5ob21lYnJldztcbiAgICAgICAgdGhpcy5fb25JbnB1dENoYW5nZWQoKTtcbiAgICB9XG4gICAgZ2V0SXRlbXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhvbWVicmV3O1xuICAgIH1cbiAgICBnZXRJdGVtVGV4dChpdGVtOiBIb21lYnJld0NyZWF0dXJlKSB7XG4gICAgICAgIHJldHVybiBpdGVtLm5hbWU7XG4gICAgfVxuXG4gICAgb25DaG9vc2VJdGVtKGl0ZW06IEhvbWVicmV3Q3JlYXR1cmUpIHtcbiAgICAgICAgdGhpcy5pbnB1dEVsLnZhbHVlID0gaXRlbS5uYW1lO1xuICAgICAgICB0aGlzLmNyZWF0dXJlID0gaXRlbTtcbiAgICB9XG4gICAgc2VsZWN0U3VnZ2VzdGlvbih7IGl0ZW0gfTogRnV6enlNYXRjaDxIb21lYnJld0NyZWF0dXJlPikge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHJlbmRlclN1Z2dlc3Rpb24ocmVzdWx0OiBGdXp6eU1hdGNoPEhvbWVicmV3Q3JlYXR1cmU+LCBlbDogSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgbGV0IHsgaXRlbSwgbWF0Y2g6IG1hdGNoZXMgfSA9IHJlc3VsdCB8fCB7fTtcbiAgICAgICAgbGV0IGNvbnRlbnQgPSBuZXcgU2V0dGluZyhlbCk7IC8qIGVsLmNyZWF0ZURpdih7XG4gICAgICAgICAgICBjbHM6IFwic3VnZ2VzdGlvbi1jb250ZW50XCJcbiAgICAgICAgfSk7ICovXG4gICAgICAgIGlmICghaXRlbSkge1xuICAgICAgICAgICAgY29udGVudC5uYW1lRWwuc2V0VGV4dCh0aGlzLmVtcHR5U3RhdGVUZXh0KTtcbiAgICAgICAgICAgIC8qIGNvbnRlbnQucGFyZW50RWxlbWVudC5hZGRDbGFzcyhcImlzLXNlbGVjdGVkXCIpOyAqL1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbWF0Y2hFbGVtZW50cyA9IG1hdGNoZXMubWF0Y2hlcy5tYXAoKG0pID0+IHtcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVTcGFuKFwic3VnZ2VzdGlvbi1oaWdobGlnaHRcIik7XG4gICAgICAgIH0pO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGl0ZW0ubmFtZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IG1hdGNoID0gbWF0Y2hlcy5tYXRjaGVzLmZpbmQoKG0pID0+IG1bMF0gPT09IGkpO1xuICAgICAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgbGV0IGVsZW1lbnQgPSBtYXRjaEVsZW1lbnRzW21hdGNoZXMubWF0Y2hlcy5pbmRleE9mKG1hdGNoKV07XG4gICAgICAgICAgICAgICAgY29udGVudC5uYW1lRWwuYXBwZW5kQ2hpbGQoZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5hcHBlbmRUZXh0KGl0ZW0ubmFtZS5zdWJzdHJpbmcobWF0Y2hbMF0sIG1hdGNoWzFdKSk7XG5cbiAgICAgICAgICAgICAgICBpICs9IG1hdGNoWzFdIC0gbWF0Y2hbMF0gLSAxO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb250ZW50Lm5hbWVFbC5hcHBlbmRUZXh0KGl0ZW0ubmFtZVtpXSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb250ZW50LnNldERlc2MoW2l0ZW0uc291cmNlID8/IFwiXCJdLmZsYXQoKS5qb2luKFwiLCBcIikpO1xuICAgICAgICBjb250ZW50LmFkZEV4dHJhQnV0dG9uKChiKSA9PiB7XG4gICAgICAgICAgICBiLnNldEljb24oXCJwZW5jaWxcIilcbiAgICAgICAgICAgICAgICAuc2V0VG9vbHRpcChcIkVkaXRcIilcbiAgICAgICAgICAgICAgICAub25DbGljaygoKSA9PiB0aGlzLm9uRWRpdEl0ZW0oaXRlbSkpO1xuICAgICAgICB9KTtcbiAgICAgICAgY29udGVudC5hZGRFeHRyYUJ1dHRvbigoYikgPT4ge1xuICAgICAgICAgICAgYi5zZXRJY29uKFwidHJhc2hcIilcbiAgICAgICAgICAgICAgICAuc2V0VG9vbHRpcChcIkRlbGV0ZVwiKVxuICAgICAgICAgICAgICAgIC5vbkNsaWNrKCgpID0+IHRoaXMub25SZW1vdmVJdGVtKGl0ZW0pKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIG9uRWRpdEl0ZW0oaXRlbTogSG9tZWJyZXdDcmVhdHVyZSkge31cbiAgICBvblJlbW92ZUl0ZW0oaXRlbTogSG9tZWJyZXdDcmVhdHVyZSkge31cbn1cblxuZXhwb3J0IGNsYXNzIENvbmRpdGlvblN1Z2dlc3Rpb25Nb2RhbCBleHRlbmRzIFN1Z2dlc3Rpb25Nb2RhbDxDb25kaXRpb24+IHtcbiAgICBpdGVtczogQ29uZGl0aW9uW10gPSBbXTtcbiAgICBjb25kaXRpb246IENvbmRpdGlvbjtcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgcGx1Z2luOiBJbml0aWF0aXZlVHJhY2tlciwgaW5wdXRFbDogSFRNTElucHV0RWxlbWVudCkge1xuICAgICAgICBzdXBlcihwbHVnaW4uYXBwLCBpbnB1dEVsKTtcbiAgICAgICAgdGhpcy5pdGVtcyA9IHRoaXMucGx1Z2luLmRhdGEuc3RhdHVzZXM7XG4gICAgICAgIHRoaXMuc3VnZ2VzdEVsLnN0eWxlLnJlbW92ZVByb3BlcnR5KFwibWluLXdpZHRoXCIpO1xuICAgICAgICB0aGlzLm9uSW5wdXRDaGFuZ2VkKCk7XG4gICAgfVxuICAgIGdldEl0ZW1UZXh0KGl0ZW06IENvbmRpdGlvbikge1xuICAgICAgICByZXR1cm4gaXRlbS5uYW1lO1xuICAgIH1cbiAgICBnZXRJdGVtcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXRlbXM7XG4gICAgfVxuICAgIG9uQ2hvb3NlSXRlbShpdGVtOiBDb25kaXRpb24pIHtcbiAgICAgICAgdGhpcy5pbnB1dEVsLnZhbHVlID0gaXRlbS5uYW1lO1xuICAgICAgICB0aGlzLmNvbmRpdGlvbiA9IGl0ZW07XG4gICAgfVxuICAgIG9uTm9TdWdnZXN0aW9uKCkge1xuICAgICAgICB0aGlzLmVtcHR5KCk7XG4gICAgICAgIHRoaXMucmVuZGVyU3VnZ2VzdGlvbihcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICB0aGlzLmNvbnRlbnRFbC5jcmVhdGVEaXYoXCJzdWdnZXN0aW9uLWl0ZW1cIilcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5jb25kaXRpb24gPSBudWxsO1xuICAgIH1cbiAgICBzZWxlY3RTdWdnZXN0aW9uKHsgaXRlbSB9OiBGdXp6eU1hdGNoPENvbmRpdGlvbj4pIHtcbiAgICAgICAgaWYgKHRoaXMuY29uZGl0aW9uICE9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmlucHV0RWwudmFsdWUgPSBpdGVtLm5hbWU7XG4gICAgICAgICAgICB0aGlzLmNvbmRpdGlvbiA9IGl0ZW07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmNvbmRpdGlvbiA9IHtcbiAgICAgICAgICAgICAgICBuYW1lOiB0aGlzLmlucHV0RWwudmFsdWUsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFwiXCJcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLm9uQ2xvc2UoKTtcbiAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgIH1cbiAgICByZW5kZXJTdWdnZXN0aW9uKHJlc3VsdDogRnV6enlNYXRjaDxDb25kaXRpb24+LCBlbDogSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgbGV0IHsgaXRlbSwgbWF0Y2g6IG1hdGNoZXMgfSA9IHJlc3VsdCB8fCB7fTtcbiAgICAgICAgbGV0IGNvbnRlbnQgPSBuZXcgU2V0dGluZyhlbCk7IC8qIGVsLmNyZWF0ZURpdih7XG4gICAgICAgICAgICBjbHM6IFwic3VnZ2VzdGlvbi1jb250ZW50XCJcbiAgICAgICAgfSk7ICovXG4gICAgICAgIGlmICghaXRlbSkge1xuICAgICAgICAgICAgY29udGVudC5uYW1lRWwuc2V0VGV4dCh0aGlzLmVtcHR5U3RhdGVUZXh0KTtcbiAgICAgICAgICAgIHRoaXMuY29uZGl0aW9uID0gbnVsbDtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG1hdGNoRWxlbWVudHMgPSBtYXRjaGVzLm1hdGNoZXMubWFwKChtKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gY3JlYXRlU3BhbihcInN1Z2dlc3Rpb24taGlnaGxpZ2h0XCIpO1xuICAgICAgICB9KTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpdGVtLm5hbWUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBtYXRjaCA9IG1hdGNoZXMubWF0Y2hlcy5maW5kKChtKSA9PiBtWzBdID09PSBpKTtcbiAgICAgICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgICAgICAgIGxldCBlbGVtZW50ID0gbWF0Y2hFbGVtZW50c1ttYXRjaGVzLm1hdGNoZXMuaW5kZXhPZihtYXRjaCldO1xuICAgICAgICAgICAgICAgIGNvbnRlbnQubmFtZUVsLmFwcGVuZENoaWxkKGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuYXBwZW5kVGV4dChpdGVtLm5hbWUuc3Vic3RyaW5nKG1hdGNoWzBdLCBtYXRjaFsxXSkpO1xuXG4gICAgICAgICAgICAgICAgaSArPSBtYXRjaFsxXSAtIG1hdGNoWzBdIC0gMTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29udGVudC5uYW1lRWwuYXBwZW5kVGV4dChpdGVtLm5hbWVbaV0pO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgUGxheWVyU3VnZ2VzdGlvbk1vZGFsIGV4dGVuZHMgU3VnZ2VzdGlvbk1vZGFsPEhvbWVicmV3Q3JlYXR1cmU+IHtcbiAgICBwbGF5ZXI6IEhvbWVicmV3Q3JlYXR1cmU7XG4gICAgdGV4dDogVGV4dENvbXBvbmVudDtcbiAgICBpdGVtcyA9IHRoaXMucGx1Z2luLmRhdGEucGxheWVycztcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHVibGljIHBsdWdpbjogSW5pdGlhdGl2ZVRyYWNrZXIsXG4gICAgICAgIGlucHV0OiBUZXh0Q29tcG9uZW50LFxuICAgICAgICBwdWJsaWMgcGFydHk6IFBhcnR5XG4gICAgKSB7XG4gICAgICAgIHN1cGVyKHBsdWdpbi5hcHAsIGlucHV0LmlucHV0RWwpO1xuICAgICAgICB0aGlzLnRleHQgPSBpbnB1dDtcblxuICAgICAgICB0aGlzLmNyZWF0ZVByb21wdHMoKTtcblxuICAgICAgICB0aGlzLmlucHV0RWwuYWRkRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsIHRoaXMuZ2V0SXRlbS5iaW5kKHRoaXMpKTtcbiAgICAgICAgdGhpcy5pbnB1dEVsLmFkZEV2ZW50TGlzdGVuZXIoXCJmb2N1c1wiLCB0aGlzLm9uSW5wdXRDaGFuZ2VkLmJpbmQodGhpcykpO1xuICAgIH1cbiAgICBjcmVhdGVQcm9tcHRzKCkge31cbiAgICBnZXRJdGVtKCkge1xuICAgICAgICBjb25zdCB2ID0gdGhpcy5pbnB1dEVsLnZhbHVlLFxuICAgICAgICAgICAgZmlsZSA9IHRoaXMuaXRlbXMuZmluZCgoZmlsZSkgPT4gZmlsZS5uYW1lID09PSB2LnRyaW0oKSk7XG4gICAgICAgIGlmIChmaWxlID09IHRoaXMucGxheWVyKSByZXR1cm47XG4gICAgICAgIHRoaXMucGxheWVyID0gZmlsZTtcbiAgICAgICAgaWYgKHRoaXMuaXRlbXMpIHRoaXMub25JbnB1dENoYW5nZWQoKTtcbiAgICB9XG4gICAgZ2V0SXRlbVRleHQoaXRlbTogSG9tZWJyZXdDcmVhdHVyZSkge1xuICAgICAgICByZXR1cm4gaXRlbS5uYW1lO1xuICAgIH1cbiAgICBvbkNob29zZUl0ZW0oaXRlbTogSG9tZWJyZXdDcmVhdHVyZSkge1xuICAgICAgICB0aGlzLnRleHQuc2V0VmFsdWUoaXRlbS5uYW1lKTtcbiAgICAgICAgdGhpcy5wbGF5ZXIgPSBpdGVtO1xuICAgIH1cbiAgICBzZWxlY3RTdWdnZXN0aW9uKHsgaXRlbSB9OiBGdXp6eU1hdGNoPEhvbWVicmV3Q3JlYXR1cmU+KSB7XG4gICAgICAgIHRoaXMudGV4dC5zZXRWYWx1ZShpdGVtLm5hbWUpO1xuICAgICAgICB0aGlzLnBsYXllciA9IGl0ZW07XG5cbiAgICAgICAgdGhpcy5vbkNsb3NlKCk7XG4gICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICB9XG4gICAgcmVuZGVyU3VnZ2VzdGlvbihyZXN1bHQ6IEZ1enp5TWF0Y2g8SG9tZWJyZXdDcmVhdHVyZT4sIGVsOiBIVE1MRWxlbWVudCkge1xuICAgICAgICBsZXQgeyBpdGVtLCBtYXRjaDogbWF0Y2hlcyB9ID0gcmVzdWx0IHx8IHt9O1xuICAgICAgICBsZXQgY29udGVudCA9IGVsLmNyZWF0ZURpdih7XG4gICAgICAgICAgICBjbHM6IFwic3VnZ2VzdGlvbi1jb250ZW50IGljb25cIlxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKCFpdGVtKSB7XG4gICAgICAgICAgICB0aGlzLnN1Z2dlc3Rlci5zZWxlY3RlZEl0ZW0gPSBudWxsO1xuICAgICAgICAgICAgY29udGVudC5zZXRUZXh0KHRoaXMuZW1wdHlTdGF0ZVRleHQpO1xuICAgICAgICAgICAgY29udGVudC5wYXJlbnRFbGVtZW50LmFkZENsYXNzKFwiaXMtc2VsZWN0ZWRcIik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBtYXRjaEVsZW1lbnRzID0gbWF0Y2hlcy5tYXRjaGVzLm1hcCgobSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZVNwYW4oXCJzdWdnZXN0aW9uLWhpZ2hsaWdodFwiKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaXRlbS5uYW1lLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgbWF0Y2ggPSBtYXRjaGVzLm1hdGNoZXMuZmluZCgobSkgPT4gbVswXSA9PT0gaSk7XG4gICAgICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICBsZXQgZWxlbWVudCA9IG1hdGNoRWxlbWVudHNbbWF0Y2hlcy5tYXRjaGVzLmluZGV4T2YobWF0Y2gpXTtcbiAgICAgICAgICAgICAgICBjb250ZW50LmFwcGVuZENoaWxkKGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuYXBwZW5kVGV4dChpdGVtLm5hbWUuc3Vic3RyaW5nKG1hdGNoWzBdLCBtYXRjaFsxXSkpO1xuXG4gICAgICAgICAgICAgICAgaSArPSBtYXRjaFsxXSAtIG1hdGNoWzBdIC0gMTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29udGVudC5hcHBlbmRUZXh0KGl0ZW0ubmFtZVtpXSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0SXRlbXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLml0ZW1zLmZpbHRlcigocCkgPT4gIXRoaXMucGFydHkucGxheWVycy5pbmNsdWRlcyhwLm5hbWUpKTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBGb2xkZXJTdWdnZXN0aW9uTW9kYWwgZXh0ZW5kcyBTdWdnZXN0aW9uTW9kYWw8VEZvbGRlcj4ge1xuICAgIHRleHQ6IFRleHRDb21wb25lbnQ7XG4gICAgY2FjaGU6IENhY2hlZE1ldGFkYXRhO1xuICAgIGZvbGRlcnM6IFRGb2xkZXJbXTtcbiAgICBmb2xkZXI6IFRGb2xkZXI7XG4gICAgY29uc3RydWN0b3IoYXBwOiBBcHAsIGlucHV0OiBUZXh0Q29tcG9uZW50LCBpdGVtczogVEZvbGRlcltdKSB7XG4gICAgICAgIHN1cGVyKGFwcCwgaW5wdXQuaW5wdXRFbCk7XG4gICAgICAgIHRoaXMuZm9sZGVycyA9IFsuLi5pdGVtc107XG4gICAgICAgIHRoaXMudGV4dCA9IGlucHV0O1xuXG4gICAgICAgIHRoaXMuaW5wdXRFbC5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgKCkgPT4gdGhpcy5nZXRGb2xkZXIoKSk7XG4gICAgfVxuICAgIGdldEZvbGRlcigpIHtcbiAgICAgICAgY29uc3QgdiA9IHRoaXMuaW5wdXRFbC52YWx1ZSxcbiAgICAgICAgICAgIGZvbGRlciA9IHRoaXMuYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aCh2KTtcbiAgICAgICAgaWYgKGZvbGRlciA9PSB0aGlzLmZvbGRlcikgcmV0dXJuO1xuICAgICAgICBpZiAoIShmb2xkZXIgaW5zdGFuY2VvZiBURm9sZGVyKSkgcmV0dXJuO1xuICAgICAgICB0aGlzLmZvbGRlciA9IGZvbGRlcjtcblxuICAgICAgICB0aGlzLm9uSW5wdXRDaGFuZ2VkKCk7XG4gICAgfVxuICAgIGdldEl0ZW1UZXh0KGl0ZW06IFRGb2xkZXIpIHtcbiAgICAgICAgcmV0dXJuIGl0ZW0ucGF0aDtcbiAgICB9XG4gICAgb25DaG9vc2VJdGVtKGl0ZW06IFRGb2xkZXIpIHtcbiAgICAgICAgdGhpcy50ZXh0LnNldFZhbHVlKGl0ZW0ucGF0aCk7XG4gICAgICAgIHRoaXMuZm9sZGVyID0gaXRlbTtcbiAgICB9XG4gICAgc2VsZWN0U3VnZ2VzdGlvbih7IGl0ZW0gfTogRnV6enlNYXRjaDxURm9sZGVyPikge1xuICAgICAgICBsZXQgbGluayA9IGl0ZW0ucGF0aDtcblxuICAgICAgICB0aGlzLnRleHQuc2V0VmFsdWUobGluayk7XG4gICAgICAgIHRoaXMub25DbG9zZSgpO1xuXG4gICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICB9XG4gICAgcmVuZGVyU3VnZ2VzdGlvbihyZXN1bHQ6IEZ1enp5TWF0Y2g8VEZvbGRlcj4sIGVsOiBIVE1MRWxlbWVudCkge1xuICAgICAgICBsZXQgeyBpdGVtLCBtYXRjaDogbWF0Y2hlcyB9ID0gcmVzdWx0IHx8IHt9O1xuICAgICAgICBsZXQgY29udGVudCA9IGVsLmNyZWF0ZURpdih7XG4gICAgICAgICAgICBjbHM6IFwic3VnZ2VzdGlvbi1jb250ZW50XCJcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICghaXRlbSkge1xuICAgICAgICAgICAgY29udGVudC5zZXRUZXh0KHRoaXMuZW1wdHlTdGF0ZVRleHQpO1xuICAgICAgICAgICAgY29udGVudC5wYXJlbnRFbGVtZW50LmFkZENsYXNzKFwiaXMtc2VsZWN0ZWRcIik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgcGF0aExlbmd0aCA9IGl0ZW0ucGF0aC5sZW5ndGggLSBpdGVtLm5hbWUubGVuZ3RoO1xuICAgICAgICBjb25zdCBtYXRjaEVsZW1lbnRzID0gbWF0Y2hlcy5tYXRjaGVzLm1hcCgobSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZVNwYW4oXCJzdWdnZXN0aW9uLWhpZ2hsaWdodFwiKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGZvciAobGV0IGkgPSBwYXRoTGVuZ3RoOyBpIDwgaXRlbS5wYXRoLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgbWF0Y2ggPSBtYXRjaGVzLm1hdGNoZXMuZmluZCgobSkgPT4gbVswXSA9PT0gaSk7XG4gICAgICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICBsZXQgZWxlbWVudCA9IG1hdGNoRWxlbWVudHNbbWF0Y2hlcy5tYXRjaGVzLmluZGV4T2YobWF0Y2gpXTtcbiAgICAgICAgICAgICAgICBjb250ZW50LmFwcGVuZENoaWxkKGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgIGVsZW1lbnQuYXBwZW5kVGV4dChpdGVtLnBhdGguc3Vic3RyaW5nKG1hdGNoWzBdLCBtYXRjaFsxXSkpO1xuXG4gICAgICAgICAgICAgICAgaSArPSBtYXRjaFsxXSAtIG1hdGNoWzBdIC0gMTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29udGVudC5hcHBlbmRUZXh0KGl0ZW0ucGF0aFtpXSk7XG4gICAgICAgIH1cbiAgICAgICAgZWwuY3JlYXRlRGl2KHtcbiAgICAgICAgICAgIGNsczogXCJzdWdnZXN0aW9uLW5vdGVcIixcbiAgICAgICAgICAgIHRleHQ6IGl0ZW0ucGF0aFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBnZXRJdGVtcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZm9sZGVycztcbiAgICB9XG59XG4iLCAiZXhwb3J0IHZhciB0b3AgPSAndG9wJztcbmV4cG9ydCB2YXIgYm90dG9tID0gJ2JvdHRvbSc7XG5leHBvcnQgdmFyIHJpZ2h0ID0gJ3JpZ2h0JztcbmV4cG9ydCB2YXIgbGVmdCA9ICdsZWZ0JztcbmV4cG9ydCB2YXIgYXV0byA9ICdhdXRvJztcbmV4cG9ydCB2YXIgYmFzZVBsYWNlbWVudHMgPSBbdG9wLCBib3R0b20sIHJpZ2h0LCBsZWZ0XTtcbmV4cG9ydCB2YXIgc3RhcnQgPSAnc3RhcnQnO1xuZXhwb3J0IHZhciBlbmQgPSAnZW5kJztcbmV4cG9ydCB2YXIgY2xpcHBpbmdQYXJlbnRzID0gJ2NsaXBwaW5nUGFyZW50cyc7XG5leHBvcnQgdmFyIHZpZXdwb3J0ID0gJ3ZpZXdwb3J0JztcbmV4cG9ydCB2YXIgcG9wcGVyID0gJ3BvcHBlcic7XG5leHBvcnQgdmFyIHJlZmVyZW5jZSA9ICdyZWZlcmVuY2UnO1xuZXhwb3J0IHZhciB2YXJpYXRpb25QbGFjZW1lbnRzID0gLyojX19QVVJFX18qL2Jhc2VQbGFjZW1lbnRzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBwbGFjZW1lbnQpIHtcbiAgcmV0dXJuIGFjYy5jb25jYXQoW3BsYWNlbWVudCArIFwiLVwiICsgc3RhcnQsIHBsYWNlbWVudCArIFwiLVwiICsgZW5kXSk7XG59LCBbXSk7XG5leHBvcnQgdmFyIHBsYWNlbWVudHMgPSAvKiNfX1BVUkVfXyovW10uY29uY2F0KGJhc2VQbGFjZW1lbnRzLCBbYXV0b10pLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBwbGFjZW1lbnQpIHtcbiAgcmV0dXJuIGFjYy5jb25jYXQoW3BsYWNlbWVudCwgcGxhY2VtZW50ICsgXCItXCIgKyBzdGFydCwgcGxhY2VtZW50ICsgXCItXCIgKyBlbmRdKTtcbn0sIFtdKTsgLy8gbW9kaWZpZXJzIHRoYXQgbmVlZCB0byByZWFkIHRoZSBET01cblxuZXhwb3J0IHZhciBiZWZvcmVSZWFkID0gJ2JlZm9yZVJlYWQnO1xuZXhwb3J0IHZhciByZWFkID0gJ3JlYWQnO1xuZXhwb3J0IHZhciBhZnRlclJlYWQgPSAnYWZ0ZXJSZWFkJzsgLy8gcHVyZS1sb2dpYyBtb2RpZmllcnNcblxuZXhwb3J0IHZhciBiZWZvcmVNYWluID0gJ2JlZm9yZU1haW4nO1xuZXhwb3J0IHZhciBtYWluID0gJ21haW4nO1xuZXhwb3J0IHZhciBhZnRlck1haW4gPSAnYWZ0ZXJNYWluJzsgLy8gbW9kaWZpZXIgd2l0aCB0aGUgcHVycG9zZSB0byB3cml0ZSB0byB0aGUgRE9NIChvciB3cml0ZSBpbnRvIGEgZnJhbWV3b3JrIHN0YXRlKVxuXG5leHBvcnQgdmFyIGJlZm9yZVdyaXRlID0gJ2JlZm9yZVdyaXRlJztcbmV4cG9ydCB2YXIgd3JpdGUgPSAnd3JpdGUnO1xuZXhwb3J0IHZhciBhZnRlcldyaXRlID0gJ2FmdGVyV3JpdGUnO1xuZXhwb3J0IHZhciBtb2RpZmllclBoYXNlcyA9IFtiZWZvcmVSZWFkLCByZWFkLCBhZnRlclJlYWQsIGJlZm9yZU1haW4sIG1haW4sIGFmdGVyTWFpbiwgYmVmb3JlV3JpdGUsIHdyaXRlLCBhZnRlcldyaXRlXTsiLCAiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0Tm9kZU5hbWUoZWxlbWVudCkge1xuICByZXR1cm4gZWxlbWVudCA/IChlbGVtZW50Lm5vZGVOYW1lIHx8ICcnKS50b0xvd2VyQ2FzZSgpIDogbnVsbDtcbn0iLCAiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0V2luZG93KG5vZGUpIHtcbiAgaWYgKG5vZGUgPT0gbnVsbCkge1xuICAgIHJldHVybiB3aW5kb3c7XG4gIH1cblxuICBpZiAobm9kZS50b1N0cmluZygpICE9PSAnW29iamVjdCBXaW5kb3ddJykge1xuICAgIHZhciBvd25lckRvY3VtZW50ID0gbm9kZS5vd25lckRvY3VtZW50O1xuICAgIHJldHVybiBvd25lckRvY3VtZW50ID8gb3duZXJEb2N1bWVudC5kZWZhdWx0VmlldyB8fCB3aW5kb3cgOiB3aW5kb3c7XG4gIH1cblxuICByZXR1cm4gbm9kZTtcbn0iLCAiaW1wb3J0IGdldFdpbmRvdyBmcm9tIFwiLi9nZXRXaW5kb3cuanNcIjtcblxuZnVuY3Rpb24gaXNFbGVtZW50KG5vZGUpIHtcbiAgdmFyIE93bkVsZW1lbnQgPSBnZXRXaW5kb3cobm9kZSkuRWxlbWVudDtcbiAgcmV0dXJuIG5vZGUgaW5zdGFuY2VvZiBPd25FbGVtZW50IHx8IG5vZGUgaW5zdGFuY2VvZiBFbGVtZW50O1xufVxuXG5mdW5jdGlvbiBpc0hUTUxFbGVtZW50KG5vZGUpIHtcbiAgdmFyIE93bkVsZW1lbnQgPSBnZXRXaW5kb3cobm9kZSkuSFRNTEVsZW1lbnQ7XG4gIHJldHVybiBub2RlIGluc3RhbmNlb2YgT3duRWxlbWVudCB8fCBub2RlIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQ7XG59XG5cbmZ1bmN0aW9uIGlzU2hhZG93Um9vdChub2RlKSB7XG4gIC8vIElFIDExIGhhcyBubyBTaGFkb3dSb290XG4gIGlmICh0eXBlb2YgU2hhZG93Um9vdCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgT3duRWxlbWVudCA9IGdldFdpbmRvdyhub2RlKS5TaGFkb3dSb290O1xuICByZXR1cm4gbm9kZSBpbnN0YW5jZW9mIE93bkVsZW1lbnQgfHwgbm9kZSBpbnN0YW5jZW9mIFNoYWRvd1Jvb3Q7XG59XG5cbmV4cG9ydCB7IGlzRWxlbWVudCwgaXNIVE1MRWxlbWVudCwgaXNTaGFkb3dSb290IH07IiwgImltcG9ydCBnZXROb2RlTmFtZSBmcm9tIFwiLi4vZG9tLXV0aWxzL2dldE5vZGVOYW1lLmpzXCI7XG5pbXBvcnQgeyBpc0hUTUxFbGVtZW50IH0gZnJvbSBcIi4uL2RvbS11dGlscy9pbnN0YW5jZU9mLmpzXCI7IC8vIFRoaXMgbW9kaWZpZXIgdGFrZXMgdGhlIHN0eWxlcyBwcmVwYXJlZCBieSB0aGUgYGNvbXB1dGVTdHlsZXNgIG1vZGlmaWVyXG4vLyBhbmQgYXBwbGllcyB0aGVtIHRvIHRoZSBIVE1MRWxlbWVudHMgc3VjaCBhcyBwb3BwZXIgYW5kIGFycm93XG5cbmZ1bmN0aW9uIGFwcGx5U3R5bGVzKF9yZWYpIHtcbiAgdmFyIHN0YXRlID0gX3JlZi5zdGF0ZTtcbiAgT2JqZWN0LmtleXMoc3RhdGUuZWxlbWVudHMpLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB2YXIgc3R5bGUgPSBzdGF0ZS5zdHlsZXNbbmFtZV0gfHwge307XG4gICAgdmFyIGF0dHJpYnV0ZXMgPSBzdGF0ZS5hdHRyaWJ1dGVzW25hbWVdIHx8IHt9O1xuICAgIHZhciBlbGVtZW50ID0gc3RhdGUuZWxlbWVudHNbbmFtZV07IC8vIGFycm93IGlzIG9wdGlvbmFsICsgdmlydHVhbCBlbGVtZW50c1xuXG4gICAgaWYgKCFpc0hUTUxFbGVtZW50KGVsZW1lbnQpIHx8ICFnZXROb2RlTmFtZShlbGVtZW50KSkge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gRmxvdyBkb2Vzbid0IHN1cHBvcnQgdG8gZXh0ZW5kIHRoaXMgcHJvcGVydHksIGJ1dCBpdCdzIHRoZSBtb3N0XG4gICAgLy8gZWZmZWN0aXZlIHdheSB0byBhcHBseSBzdHlsZXMgdG8gYW4gSFRNTEVsZW1lbnRcbiAgICAvLyAkRmxvd0ZpeE1lW2Nhbm5vdC13cml0ZV1cblxuXG4gICAgT2JqZWN0LmFzc2lnbihlbGVtZW50LnN0eWxlLCBzdHlsZSk7XG4gICAgT2JqZWN0LmtleXMoYXR0cmlidXRlcykuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgdmFyIHZhbHVlID0gYXR0cmlidXRlc1tuYW1lXTtcblxuICAgICAgaWYgKHZhbHVlID09PSBmYWxzZSkge1xuICAgICAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShuYW1lKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKG5hbWUsIHZhbHVlID09PSB0cnVlID8gJycgOiB2YWx1ZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBlZmZlY3QoX3JlZjIpIHtcbiAgdmFyIHN0YXRlID0gX3JlZjIuc3RhdGU7XG4gIHZhciBpbml0aWFsU3R5bGVzID0ge1xuICAgIHBvcHBlcjoge1xuICAgICAgcG9zaXRpb246IHN0YXRlLm9wdGlvbnMuc3RyYXRlZ3ksXG4gICAgICBsZWZ0OiAnMCcsXG4gICAgICB0b3A6ICcwJyxcbiAgICAgIG1hcmdpbjogJzAnXG4gICAgfSxcbiAgICBhcnJvdzoge1xuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZSdcbiAgICB9LFxuICAgIHJlZmVyZW5jZToge31cbiAgfTtcbiAgT2JqZWN0LmFzc2lnbihzdGF0ZS5lbGVtZW50cy5wb3BwZXIuc3R5bGUsIGluaXRpYWxTdHlsZXMucG9wcGVyKTtcbiAgc3RhdGUuc3R5bGVzID0gaW5pdGlhbFN0eWxlcztcblxuICBpZiAoc3RhdGUuZWxlbWVudHMuYXJyb3cpIHtcbiAgICBPYmplY3QuYXNzaWduKHN0YXRlLmVsZW1lbnRzLmFycm93LnN0eWxlLCBpbml0aWFsU3R5bGVzLmFycm93KTtcbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgT2JqZWN0LmtleXMoc3RhdGUuZWxlbWVudHMpLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgIHZhciBlbGVtZW50ID0gc3RhdGUuZWxlbWVudHNbbmFtZV07XG4gICAgICB2YXIgYXR0cmlidXRlcyA9IHN0YXRlLmF0dHJpYnV0ZXNbbmFtZV0gfHwge307XG4gICAgICB2YXIgc3R5bGVQcm9wZXJ0aWVzID0gT2JqZWN0LmtleXMoc3RhdGUuc3R5bGVzLmhhc093blByb3BlcnR5KG5hbWUpID8gc3RhdGUuc3R5bGVzW25hbWVdIDogaW5pdGlhbFN0eWxlc1tuYW1lXSk7IC8vIFNldCBhbGwgdmFsdWVzIHRvIGFuIGVtcHR5IHN0cmluZyB0byB1bnNldCB0aGVtXG5cbiAgICAgIHZhciBzdHlsZSA9IHN0eWxlUHJvcGVydGllcy5yZWR1Y2UoZnVuY3Rpb24gKHN0eWxlLCBwcm9wZXJ0eSkge1xuICAgICAgICBzdHlsZVtwcm9wZXJ0eV0gPSAnJztcbiAgICAgICAgcmV0dXJuIHN0eWxlO1xuICAgICAgfSwge30pOyAvLyBhcnJvdyBpcyBvcHRpb25hbCArIHZpcnR1YWwgZWxlbWVudHNcblxuICAgICAgaWYgKCFpc0hUTUxFbGVtZW50KGVsZW1lbnQpIHx8ICFnZXROb2RlTmFtZShlbGVtZW50KSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIE9iamVjdC5hc3NpZ24oZWxlbWVudC5zdHlsZSwgc3R5bGUpO1xuICAgICAgT2JqZWN0LmtleXMoYXR0cmlidXRlcykuZm9yRWFjaChmdW5jdGlvbiAoYXR0cmlidXRlKSB7XG4gICAgICAgIGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKGF0dHJpYnV0ZSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcbn0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ2FwcGx5U3R5bGVzJyxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgcGhhc2U6ICd3cml0ZScsXG4gIGZuOiBhcHBseVN0eWxlcyxcbiAgZWZmZWN0OiBlZmZlY3QsXG4gIHJlcXVpcmVzOiBbJ2NvbXB1dGVTdHlsZXMnXVxufTsiLCAiaW1wb3J0IHsgYXV0byB9IGZyb20gXCIuLi9lbnVtcy5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0QmFzZVBsYWNlbWVudChwbGFjZW1lbnQpIHtcbiAgcmV0dXJuIHBsYWNlbWVudC5zcGxpdCgnLScpWzBdO1xufSIsICJleHBvcnQgdmFyIG1heCA9IE1hdGgubWF4O1xuZXhwb3J0IHZhciBtaW4gPSBNYXRoLm1pbjtcbmV4cG9ydCB2YXIgcm91bmQgPSBNYXRoLnJvdW5kOyIsICJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRVQVN0cmluZygpIHtcbiAgdmFyIHVhRGF0YSA9IG5hdmlnYXRvci51c2VyQWdlbnREYXRhO1xuXG4gIGlmICh1YURhdGEgIT0gbnVsbCAmJiB1YURhdGEuYnJhbmRzKSB7XG4gICAgcmV0dXJuIHVhRGF0YS5icmFuZHMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICByZXR1cm4gaXRlbS5icmFuZCArIFwiL1wiICsgaXRlbS52ZXJzaW9uO1xuICAgIH0pLmpvaW4oJyAnKTtcbiAgfVxuXG4gIHJldHVybiBuYXZpZ2F0b3IudXNlckFnZW50O1xufSIsICJpbXBvcnQgZ2V0VUFTdHJpbmcgZnJvbSBcIi4uL3V0aWxzL3VzZXJBZ2VudC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNMYXlvdXRWaWV3cG9ydCgpIHtcbiAgcmV0dXJuICEvXigoPyFjaHJvbWV8YW5kcm9pZCkuKSpzYWZhcmkvaS50ZXN0KGdldFVBU3RyaW5nKCkpO1xufSIsICJpbXBvcnQgeyBpc0VsZW1lbnQsIGlzSFRNTEVsZW1lbnQgfSBmcm9tIFwiLi9pbnN0YW5jZU9mLmpzXCI7XG5pbXBvcnQgeyByb3VuZCB9IGZyb20gXCIuLi91dGlscy9tYXRoLmpzXCI7XG5pbXBvcnQgZ2V0V2luZG93IGZyb20gXCIuL2dldFdpbmRvdy5qc1wiO1xuaW1wb3J0IGlzTGF5b3V0Vmlld3BvcnQgZnJvbSBcIi4vaXNMYXlvdXRWaWV3cG9ydC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGVsZW1lbnQsIGluY2x1ZGVTY2FsZSwgaXNGaXhlZFN0cmF0ZWd5KSB7XG4gIGlmIChpbmNsdWRlU2NhbGUgPT09IHZvaWQgMCkge1xuICAgIGluY2x1ZGVTY2FsZSA9IGZhbHNlO1xuICB9XG5cbiAgaWYgKGlzRml4ZWRTdHJhdGVneSA9PT0gdm9pZCAwKSB7XG4gICAgaXNGaXhlZFN0cmF0ZWd5ID0gZmFsc2U7XG4gIH1cblxuICB2YXIgY2xpZW50UmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIHZhciBzY2FsZVggPSAxO1xuICB2YXIgc2NhbGVZID0gMTtcblxuICBpZiAoaW5jbHVkZVNjYWxlICYmIGlzSFRNTEVsZW1lbnQoZWxlbWVudCkpIHtcbiAgICBzY2FsZVggPSBlbGVtZW50Lm9mZnNldFdpZHRoID4gMCA/IHJvdW5kKGNsaWVudFJlY3Qud2lkdGgpIC8gZWxlbWVudC5vZmZzZXRXaWR0aCB8fCAxIDogMTtcbiAgICBzY2FsZVkgPSBlbGVtZW50Lm9mZnNldEhlaWdodCA+IDAgPyByb3VuZChjbGllbnRSZWN0LmhlaWdodCkgLyBlbGVtZW50Lm9mZnNldEhlaWdodCB8fCAxIDogMTtcbiAgfVxuXG4gIHZhciBfcmVmID0gaXNFbGVtZW50KGVsZW1lbnQpID8gZ2V0V2luZG93KGVsZW1lbnQpIDogd2luZG93LFxuICAgICAgdmlzdWFsVmlld3BvcnQgPSBfcmVmLnZpc3VhbFZpZXdwb3J0O1xuXG4gIHZhciBhZGRWaXN1YWxPZmZzZXRzID0gIWlzTGF5b3V0Vmlld3BvcnQoKSAmJiBpc0ZpeGVkU3RyYXRlZ3k7XG4gIHZhciB4ID0gKGNsaWVudFJlY3QubGVmdCArIChhZGRWaXN1YWxPZmZzZXRzICYmIHZpc3VhbFZpZXdwb3J0ID8gdmlzdWFsVmlld3BvcnQub2Zmc2V0TGVmdCA6IDApKSAvIHNjYWxlWDtcbiAgdmFyIHkgPSAoY2xpZW50UmVjdC50b3AgKyAoYWRkVmlzdWFsT2Zmc2V0cyAmJiB2aXN1YWxWaWV3cG9ydCA/IHZpc3VhbFZpZXdwb3J0Lm9mZnNldFRvcCA6IDApKSAvIHNjYWxlWTtcbiAgdmFyIHdpZHRoID0gY2xpZW50UmVjdC53aWR0aCAvIHNjYWxlWDtcbiAgdmFyIGhlaWdodCA9IGNsaWVudFJlY3QuaGVpZ2h0IC8gc2NhbGVZO1xuICByZXR1cm4ge1xuICAgIHdpZHRoOiB3aWR0aCxcbiAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICB0b3A6IHksXG4gICAgcmlnaHQ6IHggKyB3aWR0aCxcbiAgICBib3R0b206IHkgKyBoZWlnaHQsXG4gICAgbGVmdDogeCxcbiAgICB4OiB4LFxuICAgIHk6IHlcbiAgfTtcbn0iLCAiaW1wb3J0IGdldEJvdW5kaW5nQ2xpZW50UmVjdCBmcm9tIFwiLi9nZXRCb3VuZGluZ0NsaWVudFJlY3QuanNcIjsgLy8gUmV0dXJucyB0aGUgbGF5b3V0IHJlY3Qgb2YgYW4gZWxlbWVudCByZWxhdGl2ZSB0byBpdHMgb2Zmc2V0UGFyZW50LiBMYXlvdXRcbi8vIG1lYW5zIGl0IGRvZXNuJ3QgdGFrZSBpbnRvIGFjY291bnQgdHJhbnNmb3Jtcy5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0TGF5b3V0UmVjdChlbGVtZW50KSB7XG4gIHZhciBjbGllbnRSZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGVsZW1lbnQpOyAvLyBVc2UgdGhlIGNsaWVudFJlY3Qgc2l6ZXMgaWYgaXQncyBub3QgYmVlbiB0cmFuc2Zvcm1lZC5cbiAgLy8gRml4ZXMgaHR0cHM6Ly9naXRodWIuY29tL3BvcHBlcmpzL3BvcHBlci1jb3JlL2lzc3Vlcy8xMjIzXG5cbiAgdmFyIHdpZHRoID0gZWxlbWVudC5vZmZzZXRXaWR0aDtcbiAgdmFyIGhlaWdodCA9IGVsZW1lbnQub2Zmc2V0SGVpZ2h0O1xuXG4gIGlmIChNYXRoLmFicyhjbGllbnRSZWN0LndpZHRoIC0gd2lkdGgpIDw9IDEpIHtcbiAgICB3aWR0aCA9IGNsaWVudFJlY3Qud2lkdGg7XG4gIH1cblxuICBpZiAoTWF0aC5hYnMoY2xpZW50UmVjdC5oZWlnaHQgLSBoZWlnaHQpIDw9IDEpIHtcbiAgICBoZWlnaHQgPSBjbGllbnRSZWN0LmhlaWdodDtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgeDogZWxlbWVudC5vZmZzZXRMZWZ0LFxuICAgIHk6IGVsZW1lbnQub2Zmc2V0VG9wLFxuICAgIHdpZHRoOiB3aWR0aCxcbiAgICBoZWlnaHQ6IGhlaWdodFxuICB9O1xufSIsICJpbXBvcnQgeyBpc1NoYWRvd1Jvb3QgfSBmcm9tIFwiLi9pbnN0YW5jZU9mLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb250YWlucyhwYXJlbnQsIGNoaWxkKSB7XG4gIHZhciByb290Tm9kZSA9IGNoaWxkLmdldFJvb3ROb2RlICYmIGNoaWxkLmdldFJvb3ROb2RlKCk7IC8vIEZpcnN0LCBhdHRlbXB0IHdpdGggZmFzdGVyIG5hdGl2ZSBtZXRob2RcblxuICBpZiAocGFyZW50LmNvbnRhaW5zKGNoaWxkKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9IC8vIHRoZW4gZmFsbGJhY2sgdG8gY3VzdG9tIGltcGxlbWVudGF0aW9uIHdpdGggU2hhZG93IERPTSBzdXBwb3J0XG4gIGVsc2UgaWYgKHJvb3ROb2RlICYmIGlzU2hhZG93Um9vdChyb290Tm9kZSkpIHtcbiAgICAgIHZhciBuZXh0ID0gY2hpbGQ7XG5cbiAgICAgIGRvIHtcbiAgICAgICAgaWYgKG5leHQgJiYgcGFyZW50LmlzU2FtZU5vZGUobmV4dCkpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSAvLyAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ106IG5lZWQgYSBiZXR0ZXIgd2F5IHRvIGhhbmRsZSB0aGlzLi4uXG5cblxuICAgICAgICBuZXh0ID0gbmV4dC5wYXJlbnROb2RlIHx8IG5leHQuaG9zdDtcbiAgICAgIH0gd2hpbGUgKG5leHQpO1xuICAgIH0gLy8gR2l2ZSB1cCwgdGhlIHJlc3VsdCBpcyBmYWxzZVxuXG5cbiAgcmV0dXJuIGZhbHNlO1xufSIsICJpbXBvcnQgZ2V0V2luZG93IGZyb20gXCIuL2dldFdpbmRvdy5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KSB7XG4gIHJldHVybiBnZXRXaW5kb3coZWxlbWVudCkuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KTtcbn0iLCAiaW1wb3J0IGdldE5vZGVOYW1lIGZyb20gXCIuL2dldE5vZGVOYW1lLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc1RhYmxlRWxlbWVudChlbGVtZW50KSB7XG4gIHJldHVybiBbJ3RhYmxlJywgJ3RkJywgJ3RoJ10uaW5kZXhPZihnZXROb2RlTmFtZShlbGVtZW50KSkgPj0gMDtcbn0iLCAiaW1wb3J0IHsgaXNFbGVtZW50IH0gZnJvbSBcIi4vaW5zdGFuY2VPZi5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0RG9jdW1lbnRFbGVtZW50KGVsZW1lbnQpIHtcbiAgLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtcmV0dXJuXTogYXNzdW1lIGJvZHkgaXMgYWx3YXlzIGF2YWlsYWJsZVxuICByZXR1cm4gKChpc0VsZW1lbnQoZWxlbWVudCkgPyBlbGVtZW50Lm93bmVyRG9jdW1lbnQgOiAvLyAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ11cbiAgZWxlbWVudC5kb2N1bWVudCkgfHwgd2luZG93LmRvY3VtZW50KS5kb2N1bWVudEVsZW1lbnQ7XG59IiwgImltcG9ydCBnZXROb2RlTmFtZSBmcm9tIFwiLi9nZXROb2RlTmFtZS5qc1wiO1xuaW1wb3J0IGdldERvY3VtZW50RWxlbWVudCBmcm9tIFwiLi9nZXREb2N1bWVudEVsZW1lbnQuanNcIjtcbmltcG9ydCB7IGlzU2hhZG93Um9vdCB9IGZyb20gXCIuL2luc3RhbmNlT2YuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFBhcmVudE5vZGUoZWxlbWVudCkge1xuICBpZiAoZ2V0Tm9kZU5hbWUoZWxlbWVudCkgPT09ICdodG1sJykge1xuICAgIHJldHVybiBlbGVtZW50O1xuICB9XG5cbiAgcmV0dXJuICgvLyB0aGlzIGlzIGEgcXVpY2tlciAoYnV0IGxlc3MgdHlwZSBzYWZlKSB3YXkgdG8gc2F2ZSBxdWl0ZSBzb21lIGJ5dGVzIGZyb20gdGhlIGJ1bmRsZVxuICAgIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXJldHVybl1cbiAgICAvLyAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ11cbiAgICBlbGVtZW50LmFzc2lnbmVkU2xvdCB8fCAvLyBzdGVwIGludG8gdGhlIHNoYWRvdyBET00gb2YgdGhlIHBhcmVudCBvZiBhIHNsb3R0ZWQgbm9kZVxuICAgIGVsZW1lbnQucGFyZW50Tm9kZSB8fCAoIC8vIERPTSBFbGVtZW50IGRldGVjdGVkXG4gICAgaXNTaGFkb3dSb290KGVsZW1lbnQpID8gZWxlbWVudC5ob3N0IDogbnVsbCkgfHwgLy8gU2hhZG93Um9vdCBkZXRlY3RlZFxuICAgIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLWNhbGxdOiBIVE1MRWxlbWVudCBpcyBhIE5vZGVcbiAgICBnZXREb2N1bWVudEVsZW1lbnQoZWxlbWVudCkgLy8gZmFsbGJhY2tcblxuICApO1xufSIsICJpbXBvcnQgZ2V0V2luZG93IGZyb20gXCIuL2dldFdpbmRvdy5qc1wiO1xuaW1wb3J0IGdldE5vZGVOYW1lIGZyb20gXCIuL2dldE5vZGVOYW1lLmpzXCI7XG5pbXBvcnQgZ2V0Q29tcHV0ZWRTdHlsZSBmcm9tIFwiLi9nZXRDb21wdXRlZFN0eWxlLmpzXCI7XG5pbXBvcnQgeyBpc0hUTUxFbGVtZW50LCBpc1NoYWRvd1Jvb3QgfSBmcm9tIFwiLi9pbnN0YW5jZU9mLmpzXCI7XG5pbXBvcnQgaXNUYWJsZUVsZW1lbnQgZnJvbSBcIi4vaXNUYWJsZUVsZW1lbnQuanNcIjtcbmltcG9ydCBnZXRQYXJlbnROb2RlIGZyb20gXCIuL2dldFBhcmVudE5vZGUuanNcIjtcbmltcG9ydCBnZXRVQVN0cmluZyBmcm9tIFwiLi4vdXRpbHMvdXNlckFnZW50LmpzXCI7XG5cbmZ1bmN0aW9uIGdldFRydWVPZmZzZXRQYXJlbnQoZWxlbWVudCkge1xuICBpZiAoIWlzSFRNTEVsZW1lbnQoZWxlbWVudCkgfHwgLy8gaHR0cHM6Ly9naXRodWIuY29tL3BvcHBlcmpzL3BvcHBlci1jb3JlL2lzc3Vlcy84MzdcbiAgZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KS5wb3NpdGlvbiA9PT0gJ2ZpeGVkJykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIGVsZW1lbnQub2Zmc2V0UGFyZW50O1xufSAvLyBgLm9mZnNldFBhcmVudGAgcmVwb3J0cyBgbnVsbGAgZm9yIGZpeGVkIGVsZW1lbnRzLCB3aGlsZSBhYnNvbHV0ZSBlbGVtZW50c1xuLy8gcmV0dXJuIHRoZSBjb250YWluaW5nIGJsb2NrXG5cblxuZnVuY3Rpb24gZ2V0Q29udGFpbmluZ0Jsb2NrKGVsZW1lbnQpIHtcbiAgdmFyIGlzRmlyZWZveCA9IC9maXJlZm94L2kudGVzdChnZXRVQVN0cmluZygpKTtcbiAgdmFyIGlzSUUgPSAvVHJpZGVudC9pLnRlc3QoZ2V0VUFTdHJpbmcoKSk7XG5cbiAgaWYgKGlzSUUgJiYgaXNIVE1MRWxlbWVudChlbGVtZW50KSkge1xuICAgIC8vIEluIElFIDksIDEwIGFuZCAxMSBmaXhlZCBlbGVtZW50cyBjb250YWluaW5nIGJsb2NrIGlzIGFsd2F5cyBlc3RhYmxpc2hlZCBieSB0aGUgdmlld3BvcnRcbiAgICB2YXIgZWxlbWVudENzcyA9IGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCk7XG5cbiAgICBpZiAoZWxlbWVudENzcy5wb3NpdGlvbiA9PT0gJ2ZpeGVkJykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG5cbiAgdmFyIGN1cnJlbnROb2RlID0gZ2V0UGFyZW50Tm9kZShlbGVtZW50KTtcblxuICBpZiAoaXNTaGFkb3dSb290KGN1cnJlbnROb2RlKSkge1xuICAgIGN1cnJlbnROb2RlID0gY3VycmVudE5vZGUuaG9zdDtcbiAgfVxuXG4gIHdoaWxlIChpc0hUTUxFbGVtZW50KGN1cnJlbnROb2RlKSAmJiBbJ2h0bWwnLCAnYm9keSddLmluZGV4T2YoZ2V0Tm9kZU5hbWUoY3VycmVudE5vZGUpKSA8IDApIHtcbiAgICB2YXIgY3NzID0gZ2V0Q29tcHV0ZWRTdHlsZShjdXJyZW50Tm9kZSk7IC8vIFRoaXMgaXMgbm9uLWV4aGF1c3RpdmUgYnV0IGNvdmVycyB0aGUgbW9zdCBjb21tb24gQ1NTIHByb3BlcnRpZXMgdGhhdFxuICAgIC8vIGNyZWF0ZSBhIGNvbnRhaW5pbmcgYmxvY2suXG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL0NvbnRhaW5pbmdfYmxvY2sjaWRlbnRpZnlpbmdfdGhlX2NvbnRhaW5pbmdfYmxvY2tcblxuICAgIGlmIChjc3MudHJhbnNmb3JtICE9PSAnbm9uZScgfHwgY3NzLnBlcnNwZWN0aXZlICE9PSAnbm9uZScgfHwgY3NzLmNvbnRhaW4gPT09ICdwYWludCcgfHwgWyd0cmFuc2Zvcm0nLCAncGVyc3BlY3RpdmUnXS5pbmRleE9mKGNzcy53aWxsQ2hhbmdlKSAhPT0gLTEgfHwgaXNGaXJlZm94ICYmIGNzcy53aWxsQ2hhbmdlID09PSAnZmlsdGVyJyB8fCBpc0ZpcmVmb3ggJiYgY3NzLmZpbHRlciAmJiBjc3MuZmlsdGVyICE9PSAnbm9uZScpIHtcbiAgICAgIHJldHVybiBjdXJyZW50Tm9kZTtcbiAgICB9IGVsc2Uge1xuICAgICAgY3VycmVudE5vZGUgPSBjdXJyZW50Tm9kZS5wYXJlbnROb2RlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBudWxsO1xufSAvLyBHZXRzIHRoZSBjbG9zZXN0IGFuY2VzdG9yIHBvc2l0aW9uZWQgZWxlbWVudC4gSGFuZGxlcyBzb21lIGVkZ2UgY2FzZXMsXG4vLyBzdWNoIGFzIHRhYmxlIGFuY2VzdG9ycyBhbmQgY3Jvc3MgYnJvd3NlciBidWdzLlxuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldE9mZnNldFBhcmVudChlbGVtZW50KSB7XG4gIHZhciB3aW5kb3cgPSBnZXRXaW5kb3coZWxlbWVudCk7XG4gIHZhciBvZmZzZXRQYXJlbnQgPSBnZXRUcnVlT2Zmc2V0UGFyZW50KGVsZW1lbnQpO1xuXG4gIHdoaWxlIChvZmZzZXRQYXJlbnQgJiYgaXNUYWJsZUVsZW1lbnQob2Zmc2V0UGFyZW50KSAmJiBnZXRDb21wdXRlZFN0eWxlKG9mZnNldFBhcmVudCkucG9zaXRpb24gPT09ICdzdGF0aWMnKSB7XG4gICAgb2Zmc2V0UGFyZW50ID0gZ2V0VHJ1ZU9mZnNldFBhcmVudChvZmZzZXRQYXJlbnQpO1xuICB9XG5cbiAgaWYgKG9mZnNldFBhcmVudCAmJiAoZ2V0Tm9kZU5hbWUob2Zmc2V0UGFyZW50KSA9PT0gJ2h0bWwnIHx8IGdldE5vZGVOYW1lKG9mZnNldFBhcmVudCkgPT09ICdib2R5JyAmJiBnZXRDb21wdXRlZFN0eWxlKG9mZnNldFBhcmVudCkucG9zaXRpb24gPT09ICdzdGF0aWMnKSkge1xuICAgIHJldHVybiB3aW5kb3c7XG4gIH1cblxuICByZXR1cm4gb2Zmc2V0UGFyZW50IHx8IGdldENvbnRhaW5pbmdCbG9jayhlbGVtZW50KSB8fCB3aW5kb3c7XG59IiwgImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldE1haW5BeGlzRnJvbVBsYWNlbWVudChwbGFjZW1lbnQpIHtcbiAgcmV0dXJuIFsndG9wJywgJ2JvdHRvbSddLmluZGV4T2YocGxhY2VtZW50KSA+PSAwID8gJ3gnIDogJ3knO1xufSIsICJpbXBvcnQgeyBtYXggYXMgbWF0aE1heCwgbWluIGFzIG1hdGhNaW4gfSBmcm9tIFwiLi9tYXRoLmpzXCI7XG5leHBvcnQgZnVuY3Rpb24gd2l0aGluKG1pbiwgdmFsdWUsIG1heCkge1xuICByZXR1cm4gbWF0aE1heChtaW4sIG1hdGhNaW4odmFsdWUsIG1heCkpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHdpdGhpbk1heENsYW1wKG1pbiwgdmFsdWUsIG1heCkge1xuICB2YXIgdiA9IHdpdGhpbihtaW4sIHZhbHVlLCBtYXgpO1xuICByZXR1cm4gdiA+IG1heCA/IG1heCA6IHY7XG59IiwgImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldEZyZXNoU2lkZU9iamVjdCgpIHtcbiAgcmV0dXJuIHtcbiAgICB0b3A6IDAsXG4gICAgcmlnaHQ6IDAsXG4gICAgYm90dG9tOiAwLFxuICAgIGxlZnQ6IDBcbiAgfTtcbn0iLCAiaW1wb3J0IGdldEZyZXNoU2lkZU9iamVjdCBmcm9tIFwiLi9nZXRGcmVzaFNpZGVPYmplY3QuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1lcmdlUGFkZGluZ09iamVjdChwYWRkaW5nT2JqZWN0KSB7XG4gIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBnZXRGcmVzaFNpZGVPYmplY3QoKSwgcGFkZGluZ09iamVjdCk7XG59IiwgImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGV4cGFuZFRvSGFzaE1hcCh2YWx1ZSwga2V5cykge1xuICByZXR1cm4ga2V5cy5yZWR1Y2UoZnVuY3Rpb24gKGhhc2hNYXAsIGtleSkge1xuICAgIGhhc2hNYXBba2V5XSA9IHZhbHVlO1xuICAgIHJldHVybiBoYXNoTWFwO1xuICB9LCB7fSk7XG59IiwgImltcG9ydCBnZXRCYXNlUGxhY2VtZW50IGZyb20gXCIuLi91dGlscy9nZXRCYXNlUGxhY2VtZW50LmpzXCI7XG5pbXBvcnQgZ2V0TGF5b3V0UmVjdCBmcm9tIFwiLi4vZG9tLXV0aWxzL2dldExheW91dFJlY3QuanNcIjtcbmltcG9ydCBjb250YWlucyBmcm9tIFwiLi4vZG9tLXV0aWxzL2NvbnRhaW5zLmpzXCI7XG5pbXBvcnQgZ2V0T2Zmc2V0UGFyZW50IGZyb20gXCIuLi9kb20tdXRpbHMvZ2V0T2Zmc2V0UGFyZW50LmpzXCI7XG5pbXBvcnQgZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50IGZyb20gXCIuLi91dGlscy9nZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQuanNcIjtcbmltcG9ydCB7IHdpdGhpbiB9IGZyb20gXCIuLi91dGlscy93aXRoaW4uanNcIjtcbmltcG9ydCBtZXJnZVBhZGRpbmdPYmplY3QgZnJvbSBcIi4uL3V0aWxzL21lcmdlUGFkZGluZ09iamVjdC5qc1wiO1xuaW1wb3J0IGV4cGFuZFRvSGFzaE1hcCBmcm9tIFwiLi4vdXRpbHMvZXhwYW5kVG9IYXNoTWFwLmpzXCI7XG5pbXBvcnQgeyBsZWZ0LCByaWdodCwgYmFzZVBsYWNlbWVudHMsIHRvcCwgYm90dG9tIH0gZnJvbSBcIi4uL2VudW1zLmpzXCI7XG5pbXBvcnQgeyBpc0hUTUxFbGVtZW50IH0gZnJvbSBcIi4uL2RvbS11dGlscy9pbnN0YW5jZU9mLmpzXCI7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxudmFyIHRvUGFkZGluZ09iamVjdCA9IGZ1bmN0aW9uIHRvUGFkZGluZ09iamVjdChwYWRkaW5nLCBzdGF0ZSkge1xuICBwYWRkaW5nID0gdHlwZW9mIHBhZGRpbmcgPT09ICdmdW5jdGlvbicgPyBwYWRkaW5nKE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLnJlY3RzLCB7XG4gICAgcGxhY2VtZW50OiBzdGF0ZS5wbGFjZW1lbnRcbiAgfSkpIDogcGFkZGluZztcbiAgcmV0dXJuIG1lcmdlUGFkZGluZ09iamVjdCh0eXBlb2YgcGFkZGluZyAhPT0gJ251bWJlcicgPyBwYWRkaW5nIDogZXhwYW5kVG9IYXNoTWFwKHBhZGRpbmcsIGJhc2VQbGFjZW1lbnRzKSk7XG59O1xuXG5mdW5jdGlvbiBhcnJvdyhfcmVmKSB7XG4gIHZhciBfc3RhdGUkbW9kaWZpZXJzRGF0YSQ7XG5cbiAgdmFyIHN0YXRlID0gX3JlZi5zdGF0ZSxcbiAgICAgIG5hbWUgPSBfcmVmLm5hbWUsXG4gICAgICBvcHRpb25zID0gX3JlZi5vcHRpb25zO1xuICB2YXIgYXJyb3dFbGVtZW50ID0gc3RhdGUuZWxlbWVudHMuYXJyb3c7XG4gIHZhciBwb3BwZXJPZmZzZXRzID0gc3RhdGUubW9kaWZpZXJzRGF0YS5wb3BwZXJPZmZzZXRzO1xuICB2YXIgYmFzZVBsYWNlbWVudCA9IGdldEJhc2VQbGFjZW1lbnQoc3RhdGUucGxhY2VtZW50KTtcbiAgdmFyIGF4aXMgPSBnZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQoYmFzZVBsYWNlbWVudCk7XG4gIHZhciBpc1ZlcnRpY2FsID0gW2xlZnQsIHJpZ2h0XS5pbmRleE9mKGJhc2VQbGFjZW1lbnQpID49IDA7XG4gIHZhciBsZW4gPSBpc1ZlcnRpY2FsID8gJ2hlaWdodCcgOiAnd2lkdGgnO1xuXG4gIGlmICghYXJyb3dFbGVtZW50IHx8ICFwb3BwZXJPZmZzZXRzKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgdmFyIHBhZGRpbmdPYmplY3QgPSB0b1BhZGRpbmdPYmplY3Qob3B0aW9ucy5wYWRkaW5nLCBzdGF0ZSk7XG4gIHZhciBhcnJvd1JlY3QgPSBnZXRMYXlvdXRSZWN0KGFycm93RWxlbWVudCk7XG4gIHZhciBtaW5Qcm9wID0gYXhpcyA9PT0gJ3knID8gdG9wIDogbGVmdDtcbiAgdmFyIG1heFByb3AgPSBheGlzID09PSAneScgPyBib3R0b20gOiByaWdodDtcbiAgdmFyIGVuZERpZmYgPSBzdGF0ZS5yZWN0cy5yZWZlcmVuY2VbbGVuXSArIHN0YXRlLnJlY3RzLnJlZmVyZW5jZVtheGlzXSAtIHBvcHBlck9mZnNldHNbYXhpc10gLSBzdGF0ZS5yZWN0cy5wb3BwZXJbbGVuXTtcbiAgdmFyIHN0YXJ0RGlmZiA9IHBvcHBlck9mZnNldHNbYXhpc10gLSBzdGF0ZS5yZWN0cy5yZWZlcmVuY2VbYXhpc107XG4gIHZhciBhcnJvd09mZnNldFBhcmVudCA9IGdldE9mZnNldFBhcmVudChhcnJvd0VsZW1lbnQpO1xuICB2YXIgY2xpZW50U2l6ZSA9IGFycm93T2Zmc2V0UGFyZW50ID8gYXhpcyA9PT0gJ3knID8gYXJyb3dPZmZzZXRQYXJlbnQuY2xpZW50SGVpZ2h0IHx8IDAgOiBhcnJvd09mZnNldFBhcmVudC5jbGllbnRXaWR0aCB8fCAwIDogMDtcbiAgdmFyIGNlbnRlclRvUmVmZXJlbmNlID0gZW5kRGlmZiAvIDIgLSBzdGFydERpZmYgLyAyOyAvLyBNYWtlIHN1cmUgdGhlIGFycm93IGRvZXNuJ3Qgb3ZlcmZsb3cgdGhlIHBvcHBlciBpZiB0aGUgY2VudGVyIHBvaW50IGlzXG4gIC8vIG91dHNpZGUgb2YgdGhlIHBvcHBlciBib3VuZHNcblxuICB2YXIgbWluID0gcGFkZGluZ09iamVjdFttaW5Qcm9wXTtcbiAgdmFyIG1heCA9IGNsaWVudFNpemUgLSBhcnJvd1JlY3RbbGVuXSAtIHBhZGRpbmdPYmplY3RbbWF4UHJvcF07XG4gIHZhciBjZW50ZXIgPSBjbGllbnRTaXplIC8gMiAtIGFycm93UmVjdFtsZW5dIC8gMiArIGNlbnRlclRvUmVmZXJlbmNlO1xuICB2YXIgb2Zmc2V0ID0gd2l0aGluKG1pbiwgY2VudGVyLCBtYXgpOyAvLyBQcmV2ZW50cyBicmVha2luZyBzeW50YXggaGlnaGxpZ2h0aW5nLi4uXG5cbiAgdmFyIGF4aXNQcm9wID0gYXhpcztcbiAgc3RhdGUubW9kaWZpZXJzRGF0YVtuYW1lXSA9IChfc3RhdGUkbW9kaWZpZXJzRGF0YSQgPSB7fSwgX3N0YXRlJG1vZGlmaWVyc0RhdGEkW2F4aXNQcm9wXSA9IG9mZnNldCwgX3N0YXRlJG1vZGlmaWVyc0RhdGEkLmNlbnRlck9mZnNldCA9IG9mZnNldCAtIGNlbnRlciwgX3N0YXRlJG1vZGlmaWVyc0RhdGEkKTtcbn1cblxuZnVuY3Rpb24gZWZmZWN0KF9yZWYyKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYyLnN0YXRlLFxuICAgICAgb3B0aW9ucyA9IF9yZWYyLm9wdGlvbnM7XG4gIHZhciBfb3B0aW9ucyRlbGVtZW50ID0gb3B0aW9ucy5lbGVtZW50LFxuICAgICAgYXJyb3dFbGVtZW50ID0gX29wdGlvbnMkZWxlbWVudCA9PT0gdm9pZCAwID8gJ1tkYXRhLXBvcHBlci1hcnJvd10nIDogX29wdGlvbnMkZWxlbWVudDtcblxuICBpZiAoYXJyb3dFbGVtZW50ID09IG51bGwpIHtcbiAgICByZXR1cm47XG4gIH0gLy8gQ1NTIHNlbGVjdG9yXG5cblxuICBpZiAodHlwZW9mIGFycm93RWxlbWVudCA9PT0gJ3N0cmluZycpIHtcbiAgICBhcnJvd0VsZW1lbnQgPSBzdGF0ZS5lbGVtZW50cy5wb3BwZXIucXVlcnlTZWxlY3RvcihhcnJvd0VsZW1lbnQpO1xuXG4gICAgaWYgKCFhcnJvd0VsZW1lbnQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cblxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgaWYgKCFpc0hUTUxFbGVtZW50KGFycm93RWxlbWVudCkpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoWydQb3BwZXI6IFwiYXJyb3dcIiBlbGVtZW50IG11c3QgYmUgYW4gSFRNTEVsZW1lbnQgKG5vdCBhbiBTVkdFbGVtZW50KS4nLCAnVG8gdXNlIGFuIFNWRyBhcnJvdywgd3JhcCBpdCBpbiBhbiBIVE1MRWxlbWVudCB0aGF0IHdpbGwgYmUgdXNlZCBhcycsICd0aGUgYXJyb3cuJ10uam9pbignICcpKTtcbiAgICB9XG4gIH1cblxuICBpZiAoIWNvbnRhaW5zKHN0YXRlLmVsZW1lbnRzLnBvcHBlciwgYXJyb3dFbGVtZW50KSkge1xuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoWydQb3BwZXI6IFwiYXJyb3dcIiBtb2RpZmllclxcJ3MgYGVsZW1lbnRgIG11c3QgYmUgYSBjaGlsZCBvZiB0aGUgcG9wcGVyJywgJ2VsZW1lbnQuJ10uam9pbignICcpKTtcbiAgICB9XG5cbiAgICByZXR1cm47XG4gIH1cblxuICBzdGF0ZS5lbGVtZW50cy5hcnJvdyA9IGFycm93RWxlbWVudDtcbn0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ2Fycm93JyxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgcGhhc2U6ICdtYWluJyxcbiAgZm46IGFycm93LFxuICBlZmZlY3Q6IGVmZmVjdCxcbiAgcmVxdWlyZXM6IFsncG9wcGVyT2Zmc2V0cyddLFxuICByZXF1aXJlc0lmRXhpc3RzOiBbJ3ByZXZlbnRPdmVyZmxvdyddXG59OyIsICJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRWYXJpYXRpb24ocGxhY2VtZW50KSB7XG4gIHJldHVybiBwbGFjZW1lbnQuc3BsaXQoJy0nKVsxXTtcbn0iLCAiaW1wb3J0IHsgdG9wLCBsZWZ0LCByaWdodCwgYm90dG9tLCBlbmQgfSBmcm9tIFwiLi4vZW51bXMuanNcIjtcbmltcG9ydCBnZXRPZmZzZXRQYXJlbnQgZnJvbSBcIi4uL2RvbS11dGlscy9nZXRPZmZzZXRQYXJlbnQuanNcIjtcbmltcG9ydCBnZXRXaW5kb3cgZnJvbSBcIi4uL2RvbS11dGlscy9nZXRXaW5kb3cuanNcIjtcbmltcG9ydCBnZXREb2N1bWVudEVsZW1lbnQgZnJvbSBcIi4uL2RvbS11dGlscy9nZXREb2N1bWVudEVsZW1lbnQuanNcIjtcbmltcG9ydCBnZXRDb21wdXRlZFN0eWxlIGZyb20gXCIuLi9kb20tdXRpbHMvZ2V0Q29tcHV0ZWRTdHlsZS5qc1wiO1xuaW1wb3J0IGdldEJhc2VQbGFjZW1lbnQgZnJvbSBcIi4uL3V0aWxzL2dldEJhc2VQbGFjZW1lbnQuanNcIjtcbmltcG9ydCBnZXRWYXJpYXRpb24gZnJvbSBcIi4uL3V0aWxzL2dldFZhcmlhdGlvbi5qc1wiO1xuaW1wb3J0IHsgcm91bmQgfSBmcm9tIFwiLi4vdXRpbHMvbWF0aC5qc1wiOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cbnZhciB1bnNldFNpZGVzID0ge1xuICB0b3A6ICdhdXRvJyxcbiAgcmlnaHQ6ICdhdXRvJyxcbiAgYm90dG9tOiAnYXV0bycsXG4gIGxlZnQ6ICdhdXRvJ1xufTsgLy8gUm91bmQgdGhlIG9mZnNldHMgdG8gdGhlIG5lYXJlc3Qgc3VpdGFibGUgc3VicGl4ZWwgYmFzZWQgb24gdGhlIERQUi5cbi8vIFpvb21pbmcgY2FuIGNoYW5nZSB0aGUgRFBSLCBidXQgaXQgc2VlbXMgdG8gcmVwb3J0IGEgdmFsdWUgdGhhdCB3aWxsXG4vLyBjbGVhbmx5IGRpdmlkZSB0aGUgdmFsdWVzIGludG8gdGhlIGFwcHJvcHJpYXRlIHN1YnBpeGVscy5cblxuZnVuY3Rpb24gcm91bmRPZmZzZXRzQnlEUFIoX3JlZikge1xuICB2YXIgeCA9IF9yZWYueCxcbiAgICAgIHkgPSBfcmVmLnk7XG4gIHZhciB3aW4gPSB3aW5kb3c7XG4gIHZhciBkcHIgPSB3aW4uZGV2aWNlUGl4ZWxSYXRpbyB8fCAxO1xuICByZXR1cm4ge1xuICAgIHg6IHJvdW5kKHggKiBkcHIpIC8gZHByIHx8IDAsXG4gICAgeTogcm91bmQoeSAqIGRwcikgLyBkcHIgfHwgMFxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbWFwVG9TdHlsZXMoX3JlZjIpIHtcbiAgdmFyIF9PYmplY3QkYXNzaWduMjtcblxuICB2YXIgcG9wcGVyID0gX3JlZjIucG9wcGVyLFxuICAgICAgcG9wcGVyUmVjdCA9IF9yZWYyLnBvcHBlclJlY3QsXG4gICAgICBwbGFjZW1lbnQgPSBfcmVmMi5wbGFjZW1lbnQsXG4gICAgICB2YXJpYXRpb24gPSBfcmVmMi52YXJpYXRpb24sXG4gICAgICBvZmZzZXRzID0gX3JlZjIub2Zmc2V0cyxcbiAgICAgIHBvc2l0aW9uID0gX3JlZjIucG9zaXRpb24sXG4gICAgICBncHVBY2NlbGVyYXRpb24gPSBfcmVmMi5ncHVBY2NlbGVyYXRpb24sXG4gICAgICBhZGFwdGl2ZSA9IF9yZWYyLmFkYXB0aXZlLFxuICAgICAgcm91bmRPZmZzZXRzID0gX3JlZjIucm91bmRPZmZzZXRzLFxuICAgICAgaXNGaXhlZCA9IF9yZWYyLmlzRml4ZWQ7XG4gIHZhciBfb2Zmc2V0cyR4ID0gb2Zmc2V0cy54LFxuICAgICAgeCA9IF9vZmZzZXRzJHggPT09IHZvaWQgMCA/IDAgOiBfb2Zmc2V0cyR4LFxuICAgICAgX29mZnNldHMkeSA9IG9mZnNldHMueSxcbiAgICAgIHkgPSBfb2Zmc2V0cyR5ID09PSB2b2lkIDAgPyAwIDogX29mZnNldHMkeTtcblxuICB2YXIgX3JlZjMgPSB0eXBlb2Ygcm91bmRPZmZzZXRzID09PSAnZnVuY3Rpb24nID8gcm91bmRPZmZzZXRzKHtcbiAgICB4OiB4LFxuICAgIHk6IHlcbiAgfSkgOiB7XG4gICAgeDogeCxcbiAgICB5OiB5XG4gIH07XG5cbiAgeCA9IF9yZWYzLng7XG4gIHkgPSBfcmVmMy55O1xuICB2YXIgaGFzWCA9IG9mZnNldHMuaGFzT3duUHJvcGVydHkoJ3gnKTtcbiAgdmFyIGhhc1kgPSBvZmZzZXRzLmhhc093blByb3BlcnR5KCd5Jyk7XG4gIHZhciBzaWRlWCA9IGxlZnQ7XG4gIHZhciBzaWRlWSA9IHRvcDtcbiAgdmFyIHdpbiA9IHdpbmRvdztcblxuICBpZiAoYWRhcHRpdmUpIHtcbiAgICB2YXIgb2Zmc2V0UGFyZW50ID0gZ2V0T2Zmc2V0UGFyZW50KHBvcHBlcik7XG4gICAgdmFyIGhlaWdodFByb3AgPSAnY2xpZW50SGVpZ2h0JztcbiAgICB2YXIgd2lkdGhQcm9wID0gJ2NsaWVudFdpZHRoJztcblxuICAgIGlmIChvZmZzZXRQYXJlbnQgPT09IGdldFdpbmRvdyhwb3BwZXIpKSB7XG4gICAgICBvZmZzZXRQYXJlbnQgPSBnZXREb2N1bWVudEVsZW1lbnQocG9wcGVyKTtcblxuICAgICAgaWYgKGdldENvbXB1dGVkU3R5bGUob2Zmc2V0UGFyZW50KS5wb3NpdGlvbiAhPT0gJ3N0YXRpYycgJiYgcG9zaXRpb24gPT09ICdhYnNvbHV0ZScpIHtcbiAgICAgICAgaGVpZ2h0UHJvcCA9ICdzY3JvbGxIZWlnaHQnO1xuICAgICAgICB3aWR0aFByb3AgPSAnc2Nyb2xsV2lkdGgnO1xuICAgICAgfVxuICAgIH0gLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtY2FzdF06IGZvcmNlIHR5cGUgcmVmaW5lbWVudCwgd2UgY29tcGFyZSBvZmZzZXRQYXJlbnQgd2l0aCB3aW5kb3cgYWJvdmUsIGJ1dCBGbG93IGRvZXNuJ3QgZGV0ZWN0IGl0XG5cblxuICAgIG9mZnNldFBhcmVudCA9IG9mZnNldFBhcmVudDtcblxuICAgIGlmIChwbGFjZW1lbnQgPT09IHRvcCB8fCAocGxhY2VtZW50ID09PSBsZWZ0IHx8IHBsYWNlbWVudCA9PT0gcmlnaHQpICYmIHZhcmlhdGlvbiA9PT0gZW5kKSB7XG4gICAgICBzaWRlWSA9IGJvdHRvbTtcbiAgICAgIHZhciBvZmZzZXRZID0gaXNGaXhlZCAmJiBvZmZzZXRQYXJlbnQgPT09IHdpbiAmJiB3aW4udmlzdWFsVmlld3BvcnQgPyB3aW4udmlzdWFsVmlld3BvcnQuaGVpZ2h0IDogLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddXG4gICAgICBvZmZzZXRQYXJlbnRbaGVpZ2h0UHJvcF07XG4gICAgICB5IC09IG9mZnNldFkgLSBwb3BwZXJSZWN0LmhlaWdodDtcbiAgICAgIHkgKj0gZ3B1QWNjZWxlcmF0aW9uID8gMSA6IC0xO1xuICAgIH1cblxuICAgIGlmIChwbGFjZW1lbnQgPT09IGxlZnQgfHwgKHBsYWNlbWVudCA9PT0gdG9wIHx8IHBsYWNlbWVudCA9PT0gYm90dG9tKSAmJiB2YXJpYXRpb24gPT09IGVuZCkge1xuICAgICAgc2lkZVggPSByaWdodDtcbiAgICAgIHZhciBvZmZzZXRYID0gaXNGaXhlZCAmJiBvZmZzZXRQYXJlbnQgPT09IHdpbiAmJiB3aW4udmlzdWFsVmlld3BvcnQgPyB3aW4udmlzdWFsVmlld3BvcnQud2lkdGggOiAvLyAkRmxvd0ZpeE1lW3Byb3AtbWlzc2luZ11cbiAgICAgIG9mZnNldFBhcmVudFt3aWR0aFByb3BdO1xuICAgICAgeCAtPSBvZmZzZXRYIC0gcG9wcGVyUmVjdC53aWR0aDtcbiAgICAgIHggKj0gZ3B1QWNjZWxlcmF0aW9uID8gMSA6IC0xO1xuICAgIH1cbiAgfVxuXG4gIHZhciBjb21tb25TdHlsZXMgPSBPYmplY3QuYXNzaWduKHtcbiAgICBwb3NpdGlvbjogcG9zaXRpb25cbiAgfSwgYWRhcHRpdmUgJiYgdW5zZXRTaWRlcyk7XG5cbiAgdmFyIF9yZWY0ID0gcm91bmRPZmZzZXRzID09PSB0cnVlID8gcm91bmRPZmZzZXRzQnlEUFIoe1xuICAgIHg6IHgsXG4gICAgeTogeVxuICB9KSA6IHtcbiAgICB4OiB4LFxuICAgIHk6IHlcbiAgfTtcblxuICB4ID0gX3JlZjQueDtcbiAgeSA9IF9yZWY0Lnk7XG5cbiAgaWYgKGdwdUFjY2VsZXJhdGlvbikge1xuICAgIHZhciBfT2JqZWN0JGFzc2lnbjtcblxuICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBjb21tb25TdHlsZXMsIChfT2JqZWN0JGFzc2lnbiA9IHt9LCBfT2JqZWN0JGFzc2lnbltzaWRlWV0gPSBoYXNZID8gJzAnIDogJycsIF9PYmplY3QkYXNzaWduW3NpZGVYXSA9IGhhc1ggPyAnMCcgOiAnJywgX09iamVjdCRhc3NpZ24udHJhbnNmb3JtID0gKHdpbi5kZXZpY2VQaXhlbFJhdGlvIHx8IDEpIDw9IDEgPyBcInRyYW5zbGF0ZShcIiArIHggKyBcInB4LCBcIiArIHkgKyBcInB4KVwiIDogXCJ0cmFuc2xhdGUzZChcIiArIHggKyBcInB4LCBcIiArIHkgKyBcInB4LCAwKVwiLCBfT2JqZWN0JGFzc2lnbikpO1xuICB9XG5cbiAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIGNvbW1vblN0eWxlcywgKF9PYmplY3QkYXNzaWduMiA9IHt9LCBfT2JqZWN0JGFzc2lnbjJbc2lkZVldID0gaGFzWSA/IHkgKyBcInB4XCIgOiAnJywgX09iamVjdCRhc3NpZ24yW3NpZGVYXSA9IGhhc1ggPyB4ICsgXCJweFwiIDogJycsIF9PYmplY3QkYXNzaWduMi50cmFuc2Zvcm0gPSAnJywgX09iamVjdCRhc3NpZ24yKSk7XG59XG5cbmZ1bmN0aW9uIGNvbXB1dGVTdHlsZXMoX3JlZjUpIHtcbiAgdmFyIHN0YXRlID0gX3JlZjUuc3RhdGUsXG4gICAgICBvcHRpb25zID0gX3JlZjUub3B0aW9ucztcbiAgdmFyIF9vcHRpb25zJGdwdUFjY2VsZXJhdCA9IG9wdGlvbnMuZ3B1QWNjZWxlcmF0aW9uLFxuICAgICAgZ3B1QWNjZWxlcmF0aW9uID0gX29wdGlvbnMkZ3B1QWNjZWxlcmF0ID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkZ3B1QWNjZWxlcmF0LFxuICAgICAgX29wdGlvbnMkYWRhcHRpdmUgPSBvcHRpb25zLmFkYXB0aXZlLFxuICAgICAgYWRhcHRpdmUgPSBfb3B0aW9ucyRhZGFwdGl2ZSA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJGFkYXB0aXZlLFxuICAgICAgX29wdGlvbnMkcm91bmRPZmZzZXRzID0gb3B0aW9ucy5yb3VuZE9mZnNldHMsXG4gICAgICByb3VuZE9mZnNldHMgPSBfb3B0aW9ucyRyb3VuZE9mZnNldHMgPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyRyb3VuZE9mZnNldHM7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIHZhciB0cmFuc2l0aW9uUHJvcGVydHkgPSBnZXRDb21wdXRlZFN0eWxlKHN0YXRlLmVsZW1lbnRzLnBvcHBlcikudHJhbnNpdGlvblByb3BlcnR5IHx8ICcnO1xuXG4gICAgaWYgKGFkYXB0aXZlICYmIFsndHJhbnNmb3JtJywgJ3RvcCcsICdyaWdodCcsICdib3R0b20nLCAnbGVmdCddLnNvbWUoZnVuY3Rpb24gKHByb3BlcnR5KSB7XG4gICAgICByZXR1cm4gdHJhbnNpdGlvblByb3BlcnR5LmluZGV4T2YocHJvcGVydHkpID49IDA7XG4gICAgfSkpIHtcbiAgICAgIGNvbnNvbGUud2FybihbJ1BvcHBlcjogRGV0ZWN0ZWQgQ1NTIHRyYW5zaXRpb25zIG9uIGF0IGxlYXN0IG9uZSBvZiB0aGUgZm9sbG93aW5nJywgJ0NTUyBwcm9wZXJ0aWVzOiBcInRyYW5zZm9ybVwiLCBcInRvcFwiLCBcInJpZ2h0XCIsIFwiYm90dG9tXCIsIFwibGVmdFwiLicsICdcXG5cXG4nLCAnRGlzYWJsZSB0aGUgXCJjb21wdXRlU3R5bGVzXCIgbW9kaWZpZXJcXCdzIGBhZGFwdGl2ZWAgb3B0aW9uIHRvIGFsbG93JywgJ2ZvciBzbW9vdGggdHJhbnNpdGlvbnMsIG9yIHJlbW92ZSB0aGVzZSBwcm9wZXJ0aWVzIGZyb20gdGhlIENTUycsICd0cmFuc2l0aW9uIGRlY2xhcmF0aW9uIG9uIHRoZSBwb3BwZXIgZWxlbWVudCBpZiBvbmx5IHRyYW5zaXRpb25pbmcnLCAnb3BhY2l0eSBvciBiYWNrZ3JvdW5kLWNvbG9yIGZvciBleGFtcGxlLicsICdcXG5cXG4nLCAnV2UgcmVjb21tZW5kIHVzaW5nIHRoZSBwb3BwZXIgZWxlbWVudCBhcyBhIHdyYXBwZXIgYXJvdW5kIGFuIGlubmVyJywgJ2VsZW1lbnQgdGhhdCBjYW4gaGF2ZSBhbnkgQ1NTIHByb3BlcnR5IHRyYW5zaXRpb25lZCBmb3IgYW5pbWF0aW9ucy4nXS5qb2luKCcgJykpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBjb21tb25TdHlsZXMgPSB7XG4gICAgcGxhY2VtZW50OiBnZXRCYXNlUGxhY2VtZW50KHN0YXRlLnBsYWNlbWVudCksXG4gICAgdmFyaWF0aW9uOiBnZXRWYXJpYXRpb24oc3RhdGUucGxhY2VtZW50KSxcbiAgICBwb3BwZXI6IHN0YXRlLmVsZW1lbnRzLnBvcHBlcixcbiAgICBwb3BwZXJSZWN0OiBzdGF0ZS5yZWN0cy5wb3BwZXIsXG4gICAgZ3B1QWNjZWxlcmF0aW9uOiBncHVBY2NlbGVyYXRpb24sXG4gICAgaXNGaXhlZDogc3RhdGUub3B0aW9ucy5zdHJhdGVneSA9PT0gJ2ZpeGVkJ1xuICB9O1xuXG4gIGlmIChzdGF0ZS5tb2RpZmllcnNEYXRhLnBvcHBlck9mZnNldHMgIT0gbnVsbCkge1xuICAgIHN0YXRlLnN0eWxlcy5wb3BwZXIgPSBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZS5zdHlsZXMucG9wcGVyLCBtYXBUb1N0eWxlcyhPYmplY3QuYXNzaWduKHt9LCBjb21tb25TdHlsZXMsIHtcbiAgICAgIG9mZnNldHM6IHN0YXRlLm1vZGlmaWVyc0RhdGEucG9wcGVyT2Zmc2V0cyxcbiAgICAgIHBvc2l0aW9uOiBzdGF0ZS5vcHRpb25zLnN0cmF0ZWd5LFxuICAgICAgYWRhcHRpdmU6IGFkYXB0aXZlLFxuICAgICAgcm91bmRPZmZzZXRzOiByb3VuZE9mZnNldHNcbiAgICB9KSkpO1xuICB9XG5cbiAgaWYgKHN0YXRlLm1vZGlmaWVyc0RhdGEuYXJyb3cgIT0gbnVsbCkge1xuICAgIHN0YXRlLnN0eWxlcy5hcnJvdyA9IE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLnN0eWxlcy5hcnJvdywgbWFwVG9TdHlsZXMoT2JqZWN0LmFzc2lnbih7fSwgY29tbW9uU3R5bGVzLCB7XG4gICAgICBvZmZzZXRzOiBzdGF0ZS5tb2RpZmllcnNEYXRhLmFycm93LFxuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICBhZGFwdGl2ZTogZmFsc2UsXG4gICAgICByb3VuZE9mZnNldHM6IHJvdW5kT2Zmc2V0c1xuICAgIH0pKSk7XG4gIH1cblxuICBzdGF0ZS5hdHRyaWJ1dGVzLnBvcHBlciA9IE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLmF0dHJpYnV0ZXMucG9wcGVyLCB7XG4gICAgJ2RhdGEtcG9wcGVyLXBsYWNlbWVudCc6IHN0YXRlLnBsYWNlbWVudFxuICB9KTtcbn0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ2NvbXB1dGVTdHlsZXMnLFxuICBlbmFibGVkOiB0cnVlLFxuICBwaGFzZTogJ2JlZm9yZVdyaXRlJyxcbiAgZm46IGNvbXB1dGVTdHlsZXMsXG4gIGRhdGE6IHt9XG59OyIsICJpbXBvcnQgZ2V0V2luZG93IGZyb20gXCIuLi9kb20tdXRpbHMvZ2V0V2luZG93LmpzXCI7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxudmFyIHBhc3NpdmUgPSB7XG4gIHBhc3NpdmU6IHRydWVcbn07XG5cbmZ1bmN0aW9uIGVmZmVjdChfcmVmKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYuc3RhdGUsXG4gICAgICBpbnN0YW5jZSA9IF9yZWYuaW5zdGFuY2UsXG4gICAgICBvcHRpb25zID0gX3JlZi5vcHRpb25zO1xuICB2YXIgX29wdGlvbnMkc2Nyb2xsID0gb3B0aW9ucy5zY3JvbGwsXG4gICAgICBzY3JvbGwgPSBfb3B0aW9ucyRzY3JvbGwgPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyRzY3JvbGwsXG4gICAgICBfb3B0aW9ucyRyZXNpemUgPSBvcHRpb25zLnJlc2l6ZSxcbiAgICAgIHJlc2l6ZSA9IF9vcHRpb25zJHJlc2l6ZSA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJHJlc2l6ZTtcbiAgdmFyIHdpbmRvdyA9IGdldFdpbmRvdyhzdGF0ZS5lbGVtZW50cy5wb3BwZXIpO1xuICB2YXIgc2Nyb2xsUGFyZW50cyA9IFtdLmNvbmNhdChzdGF0ZS5zY3JvbGxQYXJlbnRzLnJlZmVyZW5jZSwgc3RhdGUuc2Nyb2xsUGFyZW50cy5wb3BwZXIpO1xuXG4gIGlmIChzY3JvbGwpIHtcbiAgICBzY3JvbGxQYXJlbnRzLmZvckVhY2goZnVuY3Rpb24gKHNjcm9sbFBhcmVudCkge1xuICAgICAgc2Nyb2xsUGFyZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIGluc3RhbmNlLnVwZGF0ZSwgcGFzc2l2ZSk7XG4gICAgfSk7XG4gIH1cblxuICBpZiAocmVzaXplKSB7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGluc3RhbmNlLnVwZGF0ZSwgcGFzc2l2ZSk7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIGlmIChzY3JvbGwpIHtcbiAgICAgIHNjcm9sbFBhcmVudHMuZm9yRWFjaChmdW5jdGlvbiAoc2Nyb2xsUGFyZW50KSB7XG4gICAgICAgIHNjcm9sbFBhcmVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBpbnN0YW5jZS51cGRhdGUsIHBhc3NpdmUpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHJlc2l6ZSkge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGluc3RhbmNlLnVwZGF0ZSwgcGFzc2l2ZSk7XG4gICAgfVxuICB9O1xufSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cblxuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAnZXZlbnRMaXN0ZW5lcnMnLFxuICBlbmFibGVkOiB0cnVlLFxuICBwaGFzZTogJ3dyaXRlJyxcbiAgZm46IGZ1bmN0aW9uIGZuKCkge30sXG4gIGVmZmVjdDogZWZmZWN0LFxuICBkYXRhOiB7fVxufTsiLCAidmFyIGhhc2ggPSB7XG4gIGxlZnQ6ICdyaWdodCcsXG4gIHJpZ2h0OiAnbGVmdCcsXG4gIGJvdHRvbTogJ3RvcCcsXG4gIHRvcDogJ2JvdHRvbSdcbn07XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRPcHBvc2l0ZVBsYWNlbWVudChwbGFjZW1lbnQpIHtcbiAgcmV0dXJuIHBsYWNlbWVudC5yZXBsYWNlKC9sZWZ0fHJpZ2h0fGJvdHRvbXx0b3AvZywgZnVuY3Rpb24gKG1hdGNoZWQpIHtcbiAgICByZXR1cm4gaGFzaFttYXRjaGVkXTtcbiAgfSk7XG59IiwgInZhciBoYXNoID0ge1xuICBzdGFydDogJ2VuZCcsXG4gIGVuZDogJ3N0YXJ0J1xufTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldE9wcG9zaXRlVmFyaWF0aW9uUGxhY2VtZW50KHBsYWNlbWVudCkge1xuICByZXR1cm4gcGxhY2VtZW50LnJlcGxhY2UoL3N0YXJ0fGVuZC9nLCBmdW5jdGlvbiAobWF0Y2hlZCkge1xuICAgIHJldHVybiBoYXNoW21hdGNoZWRdO1xuICB9KTtcbn0iLCAiaW1wb3J0IGdldFdpbmRvdyBmcm9tIFwiLi9nZXRXaW5kb3cuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFdpbmRvd1Njcm9sbChub2RlKSB7XG4gIHZhciB3aW4gPSBnZXRXaW5kb3cobm9kZSk7XG4gIHZhciBzY3JvbGxMZWZ0ID0gd2luLnBhZ2VYT2Zmc2V0O1xuICB2YXIgc2Nyb2xsVG9wID0gd2luLnBhZ2VZT2Zmc2V0O1xuICByZXR1cm4ge1xuICAgIHNjcm9sbExlZnQ6IHNjcm9sbExlZnQsXG4gICAgc2Nyb2xsVG9wOiBzY3JvbGxUb3BcbiAgfTtcbn0iLCAiaW1wb3J0IGdldEJvdW5kaW5nQ2xpZW50UmVjdCBmcm9tIFwiLi9nZXRCb3VuZGluZ0NsaWVudFJlY3QuanNcIjtcbmltcG9ydCBnZXREb2N1bWVudEVsZW1lbnQgZnJvbSBcIi4vZ2V0RG9jdW1lbnRFbGVtZW50LmpzXCI7XG5pbXBvcnQgZ2V0V2luZG93U2Nyb2xsIGZyb20gXCIuL2dldFdpbmRvd1Njcm9sbC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0V2luZG93U2Nyb2xsQmFyWChlbGVtZW50KSB7XG4gIC8vIElmIDxodG1sPiBoYXMgYSBDU1Mgd2lkdGggZ3JlYXRlciB0aGFuIHRoZSB2aWV3cG9ydCwgdGhlbiB0aGlzIHdpbGwgYmVcbiAgLy8gaW5jb3JyZWN0IGZvciBSVEwuXG4gIC8vIFBvcHBlciAxIGlzIGJyb2tlbiBpbiB0aGlzIGNhc2UgYW5kIG5ldmVyIGhhZCBhIGJ1ZyByZXBvcnQgc28gbGV0J3MgYXNzdW1lXG4gIC8vIGl0J3Mgbm90IGFuIGlzc3VlLiBJIGRvbid0IHRoaW5rIGFueW9uZSBldmVyIHNwZWNpZmllcyB3aWR0aCBvbiA8aHRtbD5cbiAgLy8gYW55d2F5LlxuICAvLyBCcm93c2VycyB3aGVyZSB0aGUgbGVmdCBzY3JvbGxiYXIgZG9lc24ndCBjYXVzZSBhbiBpc3N1ZSByZXBvcnQgYDBgIGZvclxuICAvLyB0aGlzIChlLmcuIEVkZ2UgMjAxOSwgSUUxMSwgU2FmYXJpKVxuICByZXR1cm4gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGdldERvY3VtZW50RWxlbWVudChlbGVtZW50KSkubGVmdCArIGdldFdpbmRvd1Njcm9sbChlbGVtZW50KS5zY3JvbGxMZWZ0O1xufSIsICJpbXBvcnQgZ2V0V2luZG93IGZyb20gXCIuL2dldFdpbmRvdy5qc1wiO1xuaW1wb3J0IGdldERvY3VtZW50RWxlbWVudCBmcm9tIFwiLi9nZXREb2N1bWVudEVsZW1lbnQuanNcIjtcbmltcG9ydCBnZXRXaW5kb3dTY3JvbGxCYXJYIGZyb20gXCIuL2dldFdpbmRvd1Njcm9sbEJhclguanNcIjtcbmltcG9ydCBpc0xheW91dFZpZXdwb3J0IGZyb20gXCIuL2lzTGF5b3V0Vmlld3BvcnQuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFZpZXdwb3J0UmVjdChlbGVtZW50LCBzdHJhdGVneSkge1xuICB2YXIgd2luID0gZ2V0V2luZG93KGVsZW1lbnQpO1xuICB2YXIgaHRtbCA9IGdldERvY3VtZW50RWxlbWVudChlbGVtZW50KTtcbiAgdmFyIHZpc3VhbFZpZXdwb3J0ID0gd2luLnZpc3VhbFZpZXdwb3J0O1xuICB2YXIgd2lkdGggPSBodG1sLmNsaWVudFdpZHRoO1xuICB2YXIgaGVpZ2h0ID0gaHRtbC5jbGllbnRIZWlnaHQ7XG4gIHZhciB4ID0gMDtcbiAgdmFyIHkgPSAwO1xuXG4gIGlmICh2aXN1YWxWaWV3cG9ydCkge1xuICAgIHdpZHRoID0gdmlzdWFsVmlld3BvcnQud2lkdGg7XG4gICAgaGVpZ2h0ID0gdmlzdWFsVmlld3BvcnQuaGVpZ2h0O1xuICAgIHZhciBsYXlvdXRWaWV3cG9ydCA9IGlzTGF5b3V0Vmlld3BvcnQoKTtcblxuICAgIGlmIChsYXlvdXRWaWV3cG9ydCB8fCAhbGF5b3V0Vmlld3BvcnQgJiYgc3RyYXRlZ3kgPT09ICdmaXhlZCcpIHtcbiAgICAgIHggPSB2aXN1YWxWaWV3cG9ydC5vZmZzZXRMZWZ0O1xuICAgICAgeSA9IHZpc3VhbFZpZXdwb3J0Lm9mZnNldFRvcDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHdpZHRoOiB3aWR0aCxcbiAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICB4OiB4ICsgZ2V0V2luZG93U2Nyb2xsQmFyWChlbGVtZW50KSxcbiAgICB5OiB5XG4gIH07XG59IiwgImltcG9ydCBnZXREb2N1bWVudEVsZW1lbnQgZnJvbSBcIi4vZ2V0RG9jdW1lbnRFbGVtZW50LmpzXCI7XG5pbXBvcnQgZ2V0Q29tcHV0ZWRTdHlsZSBmcm9tIFwiLi9nZXRDb21wdXRlZFN0eWxlLmpzXCI7XG5pbXBvcnQgZ2V0V2luZG93U2Nyb2xsQmFyWCBmcm9tIFwiLi9nZXRXaW5kb3dTY3JvbGxCYXJYLmpzXCI7XG5pbXBvcnQgZ2V0V2luZG93U2Nyb2xsIGZyb20gXCIuL2dldFdpbmRvd1Njcm9sbC5qc1wiO1xuaW1wb3J0IHsgbWF4IH0gZnJvbSBcIi4uL3V0aWxzL21hdGguanNcIjsgLy8gR2V0cyB0aGUgZW50aXJlIHNpemUgb2YgdGhlIHNjcm9sbGFibGUgZG9jdW1lbnQgYXJlYSwgZXZlbiBleHRlbmRpbmcgb3V0c2lkZVxuLy8gb2YgdGhlIGA8aHRtbD5gIGFuZCBgPGJvZHk+YCByZWN0IGJvdW5kcyBpZiBob3Jpem9udGFsbHkgc2Nyb2xsYWJsZVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXREb2N1bWVudFJlY3QoZWxlbWVudCkge1xuICB2YXIgX2VsZW1lbnQkb3duZXJEb2N1bWVuO1xuXG4gIHZhciBodG1sID0gZ2V0RG9jdW1lbnRFbGVtZW50KGVsZW1lbnQpO1xuICB2YXIgd2luU2Nyb2xsID0gZ2V0V2luZG93U2Nyb2xsKGVsZW1lbnQpO1xuICB2YXIgYm9keSA9IChfZWxlbWVudCRvd25lckRvY3VtZW4gPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQpID09IG51bGwgPyB2b2lkIDAgOiBfZWxlbWVudCRvd25lckRvY3VtZW4uYm9keTtcbiAgdmFyIHdpZHRoID0gbWF4KGh0bWwuc2Nyb2xsV2lkdGgsIGh0bWwuY2xpZW50V2lkdGgsIGJvZHkgPyBib2R5LnNjcm9sbFdpZHRoIDogMCwgYm9keSA/IGJvZHkuY2xpZW50V2lkdGggOiAwKTtcbiAgdmFyIGhlaWdodCA9IG1heChodG1sLnNjcm9sbEhlaWdodCwgaHRtbC5jbGllbnRIZWlnaHQsIGJvZHkgPyBib2R5LnNjcm9sbEhlaWdodCA6IDAsIGJvZHkgPyBib2R5LmNsaWVudEhlaWdodCA6IDApO1xuICB2YXIgeCA9IC13aW5TY3JvbGwuc2Nyb2xsTGVmdCArIGdldFdpbmRvd1Njcm9sbEJhclgoZWxlbWVudCk7XG4gIHZhciB5ID0gLXdpblNjcm9sbC5zY3JvbGxUb3A7XG5cbiAgaWYgKGdldENvbXB1dGVkU3R5bGUoYm9keSB8fCBodG1sKS5kaXJlY3Rpb24gPT09ICdydGwnKSB7XG4gICAgeCArPSBtYXgoaHRtbC5jbGllbnRXaWR0aCwgYm9keSA/IGJvZHkuY2xpZW50V2lkdGggOiAwKSAtIHdpZHRoO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB3aWR0aDogd2lkdGgsXG4gICAgaGVpZ2h0OiBoZWlnaHQsXG4gICAgeDogeCxcbiAgICB5OiB5XG4gIH07XG59IiwgImltcG9ydCBnZXRDb21wdXRlZFN0eWxlIGZyb20gXCIuL2dldENvbXB1dGVkU3R5bGUuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzU2Nyb2xsUGFyZW50KGVsZW1lbnQpIHtcbiAgLy8gRmlyZWZveCB3YW50cyB1cyB0byBjaGVjayBgLXhgIGFuZCBgLXlgIHZhcmlhdGlvbnMgYXMgd2VsbFxuICB2YXIgX2dldENvbXB1dGVkU3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpLFxuICAgICAgb3ZlcmZsb3cgPSBfZ2V0Q29tcHV0ZWRTdHlsZS5vdmVyZmxvdyxcbiAgICAgIG92ZXJmbG93WCA9IF9nZXRDb21wdXRlZFN0eWxlLm92ZXJmbG93WCxcbiAgICAgIG92ZXJmbG93WSA9IF9nZXRDb21wdXRlZFN0eWxlLm92ZXJmbG93WTtcblxuICByZXR1cm4gL2F1dG98c2Nyb2xsfG92ZXJsYXl8aGlkZGVuLy50ZXN0KG92ZXJmbG93ICsgb3ZlcmZsb3dZICsgb3ZlcmZsb3dYKTtcbn0iLCAiaW1wb3J0IGdldFBhcmVudE5vZGUgZnJvbSBcIi4vZ2V0UGFyZW50Tm9kZS5qc1wiO1xuaW1wb3J0IGlzU2Nyb2xsUGFyZW50IGZyb20gXCIuL2lzU2Nyb2xsUGFyZW50LmpzXCI7XG5pbXBvcnQgZ2V0Tm9kZU5hbWUgZnJvbSBcIi4vZ2V0Tm9kZU5hbWUuanNcIjtcbmltcG9ydCB7IGlzSFRNTEVsZW1lbnQgfSBmcm9tIFwiLi9pbnN0YW5jZU9mLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRTY3JvbGxQYXJlbnQobm9kZSkge1xuICBpZiAoWydodG1sJywgJ2JvZHknLCAnI2RvY3VtZW50J10uaW5kZXhPZihnZXROb2RlTmFtZShub2RlKSkgPj0gMCkge1xuICAgIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXJldHVybl06IGFzc3VtZSBib2R5IGlzIGFsd2F5cyBhdmFpbGFibGVcbiAgICByZXR1cm4gbm9kZS5vd25lckRvY3VtZW50LmJvZHk7XG4gIH1cblxuICBpZiAoaXNIVE1MRWxlbWVudChub2RlKSAmJiBpc1Njcm9sbFBhcmVudChub2RlKSkge1xuICAgIHJldHVybiBub2RlO1xuICB9XG5cbiAgcmV0dXJuIGdldFNjcm9sbFBhcmVudChnZXRQYXJlbnROb2RlKG5vZGUpKTtcbn0iLCAiaW1wb3J0IGdldFNjcm9sbFBhcmVudCBmcm9tIFwiLi9nZXRTY3JvbGxQYXJlbnQuanNcIjtcbmltcG9ydCBnZXRQYXJlbnROb2RlIGZyb20gXCIuL2dldFBhcmVudE5vZGUuanNcIjtcbmltcG9ydCBnZXRXaW5kb3cgZnJvbSBcIi4vZ2V0V2luZG93LmpzXCI7XG5pbXBvcnQgaXNTY3JvbGxQYXJlbnQgZnJvbSBcIi4vaXNTY3JvbGxQYXJlbnQuanNcIjtcbi8qXG5naXZlbiBhIERPTSBlbGVtZW50LCByZXR1cm4gdGhlIGxpc3Qgb2YgYWxsIHNjcm9sbCBwYXJlbnRzLCB1cCB0aGUgbGlzdCBvZiBhbmNlc29yc1xudW50aWwgd2UgZ2V0IHRvIHRoZSB0b3Agd2luZG93IG9iamVjdC4gVGhpcyBsaXN0IGlzIHdoYXQgd2UgYXR0YWNoIHNjcm9sbCBsaXN0ZW5lcnNcbnRvLCBiZWNhdXNlIGlmIGFueSBvZiB0aGVzZSBwYXJlbnQgZWxlbWVudHMgc2Nyb2xsLCB3ZSdsbCBuZWVkIHRvIHJlLWNhbGN1bGF0ZSB0aGVcbnJlZmVyZW5jZSBlbGVtZW50J3MgcG9zaXRpb24uXG4qL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBsaXN0U2Nyb2xsUGFyZW50cyhlbGVtZW50LCBsaXN0KSB7XG4gIHZhciBfZWxlbWVudCRvd25lckRvY3VtZW47XG5cbiAgaWYgKGxpc3QgPT09IHZvaWQgMCkge1xuICAgIGxpc3QgPSBbXTtcbiAgfVxuXG4gIHZhciBzY3JvbGxQYXJlbnQgPSBnZXRTY3JvbGxQYXJlbnQoZWxlbWVudCk7XG4gIHZhciBpc0JvZHkgPSBzY3JvbGxQYXJlbnQgPT09ICgoX2VsZW1lbnQkb3duZXJEb2N1bWVuID0gZWxlbWVudC5vd25lckRvY3VtZW50KSA9PSBudWxsID8gdm9pZCAwIDogX2VsZW1lbnQkb3duZXJEb2N1bWVuLmJvZHkpO1xuICB2YXIgd2luID0gZ2V0V2luZG93KHNjcm9sbFBhcmVudCk7XG4gIHZhciB0YXJnZXQgPSBpc0JvZHkgPyBbd2luXS5jb25jYXQod2luLnZpc3VhbFZpZXdwb3J0IHx8IFtdLCBpc1Njcm9sbFBhcmVudChzY3JvbGxQYXJlbnQpID8gc2Nyb2xsUGFyZW50IDogW10pIDogc2Nyb2xsUGFyZW50O1xuICB2YXIgdXBkYXRlZExpc3QgPSBsaXN0LmNvbmNhdCh0YXJnZXQpO1xuICByZXR1cm4gaXNCb2R5ID8gdXBkYXRlZExpc3QgOiAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS1jYWxsXTogaXNCb2R5IHRlbGxzIHVzIHRhcmdldCB3aWxsIGJlIGFuIEhUTUxFbGVtZW50IGhlcmVcbiAgdXBkYXRlZExpc3QuY29uY2F0KGxpc3RTY3JvbGxQYXJlbnRzKGdldFBhcmVudE5vZGUodGFyZ2V0KSkpO1xufSIsICJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZWN0VG9DbGllbnRSZWN0KHJlY3QpIHtcbiAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHJlY3QsIHtcbiAgICBsZWZ0OiByZWN0LngsXG4gICAgdG9wOiByZWN0LnksXG4gICAgcmlnaHQ6IHJlY3QueCArIHJlY3Qud2lkdGgsXG4gICAgYm90dG9tOiByZWN0LnkgKyByZWN0LmhlaWdodFxuICB9KTtcbn0iLCAiaW1wb3J0IHsgdmlld3BvcnQgfSBmcm9tIFwiLi4vZW51bXMuanNcIjtcbmltcG9ydCBnZXRWaWV3cG9ydFJlY3QgZnJvbSBcIi4vZ2V0Vmlld3BvcnRSZWN0LmpzXCI7XG5pbXBvcnQgZ2V0RG9jdW1lbnRSZWN0IGZyb20gXCIuL2dldERvY3VtZW50UmVjdC5qc1wiO1xuaW1wb3J0IGxpc3RTY3JvbGxQYXJlbnRzIGZyb20gXCIuL2xpc3RTY3JvbGxQYXJlbnRzLmpzXCI7XG5pbXBvcnQgZ2V0T2Zmc2V0UGFyZW50IGZyb20gXCIuL2dldE9mZnNldFBhcmVudC5qc1wiO1xuaW1wb3J0IGdldERvY3VtZW50RWxlbWVudCBmcm9tIFwiLi9nZXREb2N1bWVudEVsZW1lbnQuanNcIjtcbmltcG9ydCBnZXRDb21wdXRlZFN0eWxlIGZyb20gXCIuL2dldENvbXB1dGVkU3R5bGUuanNcIjtcbmltcG9ydCB7IGlzRWxlbWVudCwgaXNIVE1MRWxlbWVudCB9IGZyb20gXCIuL2luc3RhbmNlT2YuanNcIjtcbmltcG9ydCBnZXRCb3VuZGluZ0NsaWVudFJlY3QgZnJvbSBcIi4vZ2V0Qm91bmRpbmdDbGllbnRSZWN0LmpzXCI7XG5pbXBvcnQgZ2V0UGFyZW50Tm9kZSBmcm9tIFwiLi9nZXRQYXJlbnROb2RlLmpzXCI7XG5pbXBvcnQgY29udGFpbnMgZnJvbSBcIi4vY29udGFpbnMuanNcIjtcbmltcG9ydCBnZXROb2RlTmFtZSBmcm9tIFwiLi9nZXROb2RlTmFtZS5qc1wiO1xuaW1wb3J0IHJlY3RUb0NsaWVudFJlY3QgZnJvbSBcIi4uL3V0aWxzL3JlY3RUb0NsaWVudFJlY3QuanNcIjtcbmltcG9ydCB7IG1heCwgbWluIH0gZnJvbSBcIi4uL3V0aWxzL21hdGguanNcIjtcblxuZnVuY3Rpb24gZ2V0SW5uZXJCb3VuZGluZ0NsaWVudFJlY3QoZWxlbWVudCwgc3RyYXRlZ3kpIHtcbiAgdmFyIHJlY3QgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3QoZWxlbWVudCwgZmFsc2UsIHN0cmF0ZWd5ID09PSAnZml4ZWQnKTtcbiAgcmVjdC50b3AgPSByZWN0LnRvcCArIGVsZW1lbnQuY2xpZW50VG9wO1xuICByZWN0LmxlZnQgPSByZWN0LmxlZnQgKyBlbGVtZW50LmNsaWVudExlZnQ7XG4gIHJlY3QuYm90dG9tID0gcmVjdC50b3AgKyBlbGVtZW50LmNsaWVudEhlaWdodDtcbiAgcmVjdC5yaWdodCA9IHJlY3QubGVmdCArIGVsZW1lbnQuY2xpZW50V2lkdGg7XG4gIHJlY3Qud2lkdGggPSBlbGVtZW50LmNsaWVudFdpZHRoO1xuICByZWN0LmhlaWdodCA9IGVsZW1lbnQuY2xpZW50SGVpZ2h0O1xuICByZWN0LnggPSByZWN0LmxlZnQ7XG4gIHJlY3QueSA9IHJlY3QudG9wO1xuICByZXR1cm4gcmVjdDtcbn1cblxuZnVuY3Rpb24gZ2V0Q2xpZW50UmVjdEZyb21NaXhlZFR5cGUoZWxlbWVudCwgY2xpcHBpbmdQYXJlbnQsIHN0cmF0ZWd5KSB7XG4gIHJldHVybiBjbGlwcGluZ1BhcmVudCA9PT0gdmlld3BvcnQgPyByZWN0VG9DbGllbnRSZWN0KGdldFZpZXdwb3J0UmVjdChlbGVtZW50LCBzdHJhdGVneSkpIDogaXNFbGVtZW50KGNsaXBwaW5nUGFyZW50KSA/IGdldElubmVyQm91bmRpbmdDbGllbnRSZWN0KGNsaXBwaW5nUGFyZW50LCBzdHJhdGVneSkgOiByZWN0VG9DbGllbnRSZWN0KGdldERvY3VtZW50UmVjdChnZXREb2N1bWVudEVsZW1lbnQoZWxlbWVudCkpKTtcbn0gLy8gQSBcImNsaXBwaW5nIHBhcmVudFwiIGlzIGFuIG92ZXJmbG93YWJsZSBjb250YWluZXIgd2l0aCB0aGUgY2hhcmFjdGVyaXN0aWMgb2Zcbi8vIGNsaXBwaW5nIChvciBoaWRpbmcpIG92ZXJmbG93aW5nIGVsZW1lbnRzIHdpdGggYSBwb3NpdGlvbiBkaWZmZXJlbnQgZnJvbVxuLy8gYGluaXRpYWxgXG5cblxuZnVuY3Rpb24gZ2V0Q2xpcHBpbmdQYXJlbnRzKGVsZW1lbnQpIHtcbiAgdmFyIGNsaXBwaW5nUGFyZW50cyA9IGxpc3RTY3JvbGxQYXJlbnRzKGdldFBhcmVudE5vZGUoZWxlbWVudCkpO1xuICB2YXIgY2FuRXNjYXBlQ2xpcHBpbmcgPSBbJ2Fic29sdXRlJywgJ2ZpeGVkJ10uaW5kZXhPZihnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpLnBvc2l0aW9uKSA+PSAwO1xuICB2YXIgY2xpcHBlckVsZW1lbnQgPSBjYW5Fc2NhcGVDbGlwcGluZyAmJiBpc0hUTUxFbGVtZW50KGVsZW1lbnQpID8gZ2V0T2Zmc2V0UGFyZW50KGVsZW1lbnQpIDogZWxlbWVudDtcblxuICBpZiAoIWlzRWxlbWVudChjbGlwcGVyRWxlbWVudCkpIHtcbiAgICByZXR1cm4gW107XG4gIH0gLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtcmV0dXJuXTogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2Zsb3cvaXNzdWVzLzE0MTRcblxuXG4gIHJldHVybiBjbGlwcGluZ1BhcmVudHMuZmlsdGVyKGZ1bmN0aW9uIChjbGlwcGluZ1BhcmVudCkge1xuICAgIHJldHVybiBpc0VsZW1lbnQoY2xpcHBpbmdQYXJlbnQpICYmIGNvbnRhaW5zKGNsaXBwaW5nUGFyZW50LCBjbGlwcGVyRWxlbWVudCkgJiYgZ2V0Tm9kZU5hbWUoY2xpcHBpbmdQYXJlbnQpICE9PSAnYm9keSc7XG4gIH0pO1xufSAvLyBHZXRzIHRoZSBtYXhpbXVtIGFyZWEgdGhhdCB0aGUgZWxlbWVudCBpcyB2aXNpYmxlIGluIGR1ZSB0byBhbnkgbnVtYmVyIG9mXG4vLyBjbGlwcGluZyBwYXJlbnRzXG5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0Q2xpcHBpbmdSZWN0KGVsZW1lbnQsIGJvdW5kYXJ5LCByb290Qm91bmRhcnksIHN0cmF0ZWd5KSB7XG4gIHZhciBtYWluQ2xpcHBpbmdQYXJlbnRzID0gYm91bmRhcnkgPT09ICdjbGlwcGluZ1BhcmVudHMnID8gZ2V0Q2xpcHBpbmdQYXJlbnRzKGVsZW1lbnQpIDogW10uY29uY2F0KGJvdW5kYXJ5KTtcbiAgdmFyIGNsaXBwaW5nUGFyZW50cyA9IFtdLmNvbmNhdChtYWluQ2xpcHBpbmdQYXJlbnRzLCBbcm9vdEJvdW5kYXJ5XSk7XG4gIHZhciBmaXJzdENsaXBwaW5nUGFyZW50ID0gY2xpcHBpbmdQYXJlbnRzWzBdO1xuICB2YXIgY2xpcHBpbmdSZWN0ID0gY2xpcHBpbmdQYXJlbnRzLnJlZHVjZShmdW5jdGlvbiAoYWNjUmVjdCwgY2xpcHBpbmdQYXJlbnQpIHtcbiAgICB2YXIgcmVjdCA9IGdldENsaWVudFJlY3RGcm9tTWl4ZWRUeXBlKGVsZW1lbnQsIGNsaXBwaW5nUGFyZW50LCBzdHJhdGVneSk7XG4gICAgYWNjUmVjdC50b3AgPSBtYXgocmVjdC50b3AsIGFjY1JlY3QudG9wKTtcbiAgICBhY2NSZWN0LnJpZ2h0ID0gbWluKHJlY3QucmlnaHQsIGFjY1JlY3QucmlnaHQpO1xuICAgIGFjY1JlY3QuYm90dG9tID0gbWluKHJlY3QuYm90dG9tLCBhY2NSZWN0LmJvdHRvbSk7XG4gICAgYWNjUmVjdC5sZWZ0ID0gbWF4KHJlY3QubGVmdCwgYWNjUmVjdC5sZWZ0KTtcbiAgICByZXR1cm4gYWNjUmVjdDtcbiAgfSwgZ2V0Q2xpZW50UmVjdEZyb21NaXhlZFR5cGUoZWxlbWVudCwgZmlyc3RDbGlwcGluZ1BhcmVudCwgc3RyYXRlZ3kpKTtcbiAgY2xpcHBpbmdSZWN0LndpZHRoID0gY2xpcHBpbmdSZWN0LnJpZ2h0IC0gY2xpcHBpbmdSZWN0LmxlZnQ7XG4gIGNsaXBwaW5nUmVjdC5oZWlnaHQgPSBjbGlwcGluZ1JlY3QuYm90dG9tIC0gY2xpcHBpbmdSZWN0LnRvcDtcbiAgY2xpcHBpbmdSZWN0LnggPSBjbGlwcGluZ1JlY3QubGVmdDtcbiAgY2xpcHBpbmdSZWN0LnkgPSBjbGlwcGluZ1JlY3QudG9wO1xuICByZXR1cm4gY2xpcHBpbmdSZWN0O1xufSIsICJpbXBvcnQgZ2V0QmFzZVBsYWNlbWVudCBmcm9tIFwiLi9nZXRCYXNlUGxhY2VtZW50LmpzXCI7XG5pbXBvcnQgZ2V0VmFyaWF0aW9uIGZyb20gXCIuL2dldFZhcmlhdGlvbi5qc1wiO1xuaW1wb3J0IGdldE1haW5BeGlzRnJvbVBsYWNlbWVudCBmcm9tIFwiLi9nZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQuanNcIjtcbmltcG9ydCB7IHRvcCwgcmlnaHQsIGJvdHRvbSwgbGVmdCwgc3RhcnQsIGVuZCB9IGZyb20gXCIuLi9lbnVtcy5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29tcHV0ZU9mZnNldHMoX3JlZikge1xuICB2YXIgcmVmZXJlbmNlID0gX3JlZi5yZWZlcmVuY2UsXG4gICAgICBlbGVtZW50ID0gX3JlZi5lbGVtZW50LFxuICAgICAgcGxhY2VtZW50ID0gX3JlZi5wbGFjZW1lbnQ7XG4gIHZhciBiYXNlUGxhY2VtZW50ID0gcGxhY2VtZW50ID8gZ2V0QmFzZVBsYWNlbWVudChwbGFjZW1lbnQpIDogbnVsbDtcbiAgdmFyIHZhcmlhdGlvbiA9IHBsYWNlbWVudCA/IGdldFZhcmlhdGlvbihwbGFjZW1lbnQpIDogbnVsbDtcbiAgdmFyIGNvbW1vblggPSByZWZlcmVuY2UueCArIHJlZmVyZW5jZS53aWR0aCAvIDIgLSBlbGVtZW50LndpZHRoIC8gMjtcbiAgdmFyIGNvbW1vblkgPSByZWZlcmVuY2UueSArIHJlZmVyZW5jZS5oZWlnaHQgLyAyIC0gZWxlbWVudC5oZWlnaHQgLyAyO1xuICB2YXIgb2Zmc2V0cztcblxuICBzd2l0Y2ggKGJhc2VQbGFjZW1lbnQpIHtcbiAgICBjYXNlIHRvcDpcbiAgICAgIG9mZnNldHMgPSB7XG4gICAgICAgIHg6IGNvbW1vblgsXG4gICAgICAgIHk6IHJlZmVyZW5jZS55IC0gZWxlbWVudC5oZWlnaHRcbiAgICAgIH07XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgYm90dG9tOlxuICAgICAgb2Zmc2V0cyA9IHtcbiAgICAgICAgeDogY29tbW9uWCxcbiAgICAgICAgeTogcmVmZXJlbmNlLnkgKyByZWZlcmVuY2UuaGVpZ2h0XG4gICAgICB9O1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIHJpZ2h0OlxuICAgICAgb2Zmc2V0cyA9IHtcbiAgICAgICAgeDogcmVmZXJlbmNlLnggKyByZWZlcmVuY2Uud2lkdGgsXG4gICAgICAgIHk6IGNvbW1vbllcbiAgICAgIH07XG4gICAgICBicmVhaztcblxuICAgIGNhc2UgbGVmdDpcbiAgICAgIG9mZnNldHMgPSB7XG4gICAgICAgIHg6IHJlZmVyZW5jZS54IC0gZWxlbWVudC53aWR0aCxcbiAgICAgICAgeTogY29tbW9uWVxuICAgICAgfTtcbiAgICAgIGJyZWFrO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIG9mZnNldHMgPSB7XG4gICAgICAgIHg6IHJlZmVyZW5jZS54LFxuICAgICAgICB5OiByZWZlcmVuY2UueVxuICAgICAgfTtcbiAgfVxuXG4gIHZhciBtYWluQXhpcyA9IGJhc2VQbGFjZW1lbnQgPyBnZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQoYmFzZVBsYWNlbWVudCkgOiBudWxsO1xuXG4gIGlmIChtYWluQXhpcyAhPSBudWxsKSB7XG4gICAgdmFyIGxlbiA9IG1haW5BeGlzID09PSAneScgPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG5cbiAgICBzd2l0Y2ggKHZhcmlhdGlvbikge1xuICAgICAgY2FzZSBzdGFydDpcbiAgICAgICAgb2Zmc2V0c1ttYWluQXhpc10gPSBvZmZzZXRzW21haW5BeGlzXSAtIChyZWZlcmVuY2VbbGVuXSAvIDIgLSBlbGVtZW50W2xlbl0gLyAyKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgZW5kOlxuICAgICAgICBvZmZzZXRzW21haW5BeGlzXSA9IG9mZnNldHNbbWFpbkF4aXNdICsgKHJlZmVyZW5jZVtsZW5dIC8gMiAtIGVsZW1lbnRbbGVuXSAvIDIpO1xuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICB9XG4gIH1cblxuICByZXR1cm4gb2Zmc2V0cztcbn0iLCAiaW1wb3J0IGdldENsaXBwaW5nUmVjdCBmcm9tIFwiLi4vZG9tLXV0aWxzL2dldENsaXBwaW5nUmVjdC5qc1wiO1xuaW1wb3J0IGdldERvY3VtZW50RWxlbWVudCBmcm9tIFwiLi4vZG9tLXV0aWxzL2dldERvY3VtZW50RWxlbWVudC5qc1wiO1xuaW1wb3J0IGdldEJvdW5kaW5nQ2xpZW50UmVjdCBmcm9tIFwiLi4vZG9tLXV0aWxzL2dldEJvdW5kaW5nQ2xpZW50UmVjdC5qc1wiO1xuaW1wb3J0IGNvbXB1dGVPZmZzZXRzIGZyb20gXCIuL2NvbXB1dGVPZmZzZXRzLmpzXCI7XG5pbXBvcnQgcmVjdFRvQ2xpZW50UmVjdCBmcm9tIFwiLi9yZWN0VG9DbGllbnRSZWN0LmpzXCI7XG5pbXBvcnQgeyBjbGlwcGluZ1BhcmVudHMsIHJlZmVyZW5jZSwgcG9wcGVyLCBib3R0b20sIHRvcCwgcmlnaHQsIGJhc2VQbGFjZW1lbnRzLCB2aWV3cG9ydCB9IGZyb20gXCIuLi9lbnVtcy5qc1wiO1xuaW1wb3J0IHsgaXNFbGVtZW50IH0gZnJvbSBcIi4uL2RvbS11dGlscy9pbnN0YW5jZU9mLmpzXCI7XG5pbXBvcnQgbWVyZ2VQYWRkaW5nT2JqZWN0IGZyb20gXCIuL21lcmdlUGFkZGluZ09iamVjdC5qc1wiO1xuaW1wb3J0IGV4cGFuZFRvSGFzaE1hcCBmcm9tIFwiLi9leHBhbmRUb0hhc2hNYXAuanNcIjsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZXRlY3RPdmVyZmxvdyhzdGF0ZSwgb3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgdmFyIF9vcHRpb25zID0gb3B0aW9ucyxcbiAgICAgIF9vcHRpb25zJHBsYWNlbWVudCA9IF9vcHRpb25zLnBsYWNlbWVudCxcbiAgICAgIHBsYWNlbWVudCA9IF9vcHRpb25zJHBsYWNlbWVudCA9PT0gdm9pZCAwID8gc3RhdGUucGxhY2VtZW50IDogX29wdGlvbnMkcGxhY2VtZW50LFxuICAgICAgX29wdGlvbnMkc3RyYXRlZ3kgPSBfb3B0aW9ucy5zdHJhdGVneSxcbiAgICAgIHN0cmF0ZWd5ID0gX29wdGlvbnMkc3RyYXRlZ3kgPT09IHZvaWQgMCA/IHN0YXRlLnN0cmF0ZWd5IDogX29wdGlvbnMkc3RyYXRlZ3ksXG4gICAgICBfb3B0aW9ucyRib3VuZGFyeSA9IF9vcHRpb25zLmJvdW5kYXJ5LFxuICAgICAgYm91bmRhcnkgPSBfb3B0aW9ucyRib3VuZGFyeSA9PT0gdm9pZCAwID8gY2xpcHBpbmdQYXJlbnRzIDogX29wdGlvbnMkYm91bmRhcnksXG4gICAgICBfb3B0aW9ucyRyb290Qm91bmRhcnkgPSBfb3B0aW9ucy5yb290Qm91bmRhcnksXG4gICAgICByb290Qm91bmRhcnkgPSBfb3B0aW9ucyRyb290Qm91bmRhcnkgPT09IHZvaWQgMCA/IHZpZXdwb3J0IDogX29wdGlvbnMkcm9vdEJvdW5kYXJ5LFxuICAgICAgX29wdGlvbnMkZWxlbWVudENvbnRlID0gX29wdGlvbnMuZWxlbWVudENvbnRleHQsXG4gICAgICBlbGVtZW50Q29udGV4dCA9IF9vcHRpb25zJGVsZW1lbnRDb250ZSA9PT0gdm9pZCAwID8gcG9wcGVyIDogX29wdGlvbnMkZWxlbWVudENvbnRlLFxuICAgICAgX29wdGlvbnMkYWx0Qm91bmRhcnkgPSBfb3B0aW9ucy5hbHRCb3VuZGFyeSxcbiAgICAgIGFsdEJvdW5kYXJ5ID0gX29wdGlvbnMkYWx0Qm91bmRhcnkgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkYWx0Qm91bmRhcnksXG4gICAgICBfb3B0aW9ucyRwYWRkaW5nID0gX29wdGlvbnMucGFkZGluZyxcbiAgICAgIHBhZGRpbmcgPSBfb3B0aW9ucyRwYWRkaW5nID09PSB2b2lkIDAgPyAwIDogX29wdGlvbnMkcGFkZGluZztcbiAgdmFyIHBhZGRpbmdPYmplY3QgPSBtZXJnZVBhZGRpbmdPYmplY3QodHlwZW9mIHBhZGRpbmcgIT09ICdudW1iZXInID8gcGFkZGluZyA6IGV4cGFuZFRvSGFzaE1hcChwYWRkaW5nLCBiYXNlUGxhY2VtZW50cykpO1xuICB2YXIgYWx0Q29udGV4dCA9IGVsZW1lbnRDb250ZXh0ID09PSBwb3BwZXIgPyByZWZlcmVuY2UgOiBwb3BwZXI7XG4gIHZhciBwb3BwZXJSZWN0ID0gc3RhdGUucmVjdHMucG9wcGVyO1xuICB2YXIgZWxlbWVudCA9IHN0YXRlLmVsZW1lbnRzW2FsdEJvdW5kYXJ5ID8gYWx0Q29udGV4dCA6IGVsZW1lbnRDb250ZXh0XTtcbiAgdmFyIGNsaXBwaW5nQ2xpZW50UmVjdCA9IGdldENsaXBwaW5nUmVjdChpc0VsZW1lbnQoZWxlbWVudCkgPyBlbGVtZW50IDogZWxlbWVudC5jb250ZXh0RWxlbWVudCB8fCBnZXREb2N1bWVudEVsZW1lbnQoc3RhdGUuZWxlbWVudHMucG9wcGVyKSwgYm91bmRhcnksIHJvb3RCb3VuZGFyeSwgc3RyYXRlZ3kpO1xuICB2YXIgcmVmZXJlbmNlQ2xpZW50UmVjdCA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChzdGF0ZS5lbGVtZW50cy5yZWZlcmVuY2UpO1xuICB2YXIgcG9wcGVyT2Zmc2V0cyA9IGNvbXB1dGVPZmZzZXRzKHtcbiAgICByZWZlcmVuY2U6IHJlZmVyZW5jZUNsaWVudFJlY3QsXG4gICAgZWxlbWVudDogcG9wcGVyUmVjdCxcbiAgICBzdHJhdGVneTogJ2Fic29sdXRlJyxcbiAgICBwbGFjZW1lbnQ6IHBsYWNlbWVudFxuICB9KTtcbiAgdmFyIHBvcHBlckNsaWVudFJlY3QgPSByZWN0VG9DbGllbnRSZWN0KE9iamVjdC5hc3NpZ24oe30sIHBvcHBlclJlY3QsIHBvcHBlck9mZnNldHMpKTtcbiAgdmFyIGVsZW1lbnRDbGllbnRSZWN0ID0gZWxlbWVudENvbnRleHQgPT09IHBvcHBlciA/IHBvcHBlckNsaWVudFJlY3QgOiByZWZlcmVuY2VDbGllbnRSZWN0OyAvLyBwb3NpdGl2ZSA9IG92ZXJmbG93aW5nIHRoZSBjbGlwcGluZyByZWN0XG4gIC8vIDAgb3IgbmVnYXRpdmUgPSB3aXRoaW4gdGhlIGNsaXBwaW5nIHJlY3RcblxuICB2YXIgb3ZlcmZsb3dPZmZzZXRzID0ge1xuICAgIHRvcDogY2xpcHBpbmdDbGllbnRSZWN0LnRvcCAtIGVsZW1lbnRDbGllbnRSZWN0LnRvcCArIHBhZGRpbmdPYmplY3QudG9wLFxuICAgIGJvdHRvbTogZWxlbWVudENsaWVudFJlY3QuYm90dG9tIC0gY2xpcHBpbmdDbGllbnRSZWN0LmJvdHRvbSArIHBhZGRpbmdPYmplY3QuYm90dG9tLFxuICAgIGxlZnQ6IGNsaXBwaW5nQ2xpZW50UmVjdC5sZWZ0IC0gZWxlbWVudENsaWVudFJlY3QubGVmdCArIHBhZGRpbmdPYmplY3QubGVmdCxcbiAgICByaWdodDogZWxlbWVudENsaWVudFJlY3QucmlnaHQgLSBjbGlwcGluZ0NsaWVudFJlY3QucmlnaHQgKyBwYWRkaW5nT2JqZWN0LnJpZ2h0XG4gIH07XG4gIHZhciBvZmZzZXREYXRhID0gc3RhdGUubW9kaWZpZXJzRGF0YS5vZmZzZXQ7IC8vIE9mZnNldHMgY2FuIGJlIGFwcGxpZWQgb25seSB0byB0aGUgcG9wcGVyIGVsZW1lbnRcblxuICBpZiAoZWxlbWVudENvbnRleHQgPT09IHBvcHBlciAmJiBvZmZzZXREYXRhKSB7XG4gICAgdmFyIG9mZnNldCA9IG9mZnNldERhdGFbcGxhY2VtZW50XTtcbiAgICBPYmplY3Qua2V5cyhvdmVyZmxvd09mZnNldHMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgdmFyIG11bHRpcGx5ID0gW3JpZ2h0LCBib3R0b21dLmluZGV4T2Yoa2V5KSA+PSAwID8gMSA6IC0xO1xuICAgICAgdmFyIGF4aXMgPSBbdG9wLCBib3R0b21dLmluZGV4T2Yoa2V5KSA+PSAwID8gJ3knIDogJ3gnO1xuICAgICAgb3ZlcmZsb3dPZmZzZXRzW2tleV0gKz0gb2Zmc2V0W2F4aXNdICogbXVsdGlwbHk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gb3ZlcmZsb3dPZmZzZXRzO1xufSIsICJpbXBvcnQgZ2V0VmFyaWF0aW9uIGZyb20gXCIuL2dldFZhcmlhdGlvbi5qc1wiO1xuaW1wb3J0IHsgdmFyaWF0aW9uUGxhY2VtZW50cywgYmFzZVBsYWNlbWVudHMsIHBsYWNlbWVudHMgYXMgYWxsUGxhY2VtZW50cyB9IGZyb20gXCIuLi9lbnVtcy5qc1wiO1xuaW1wb3J0IGRldGVjdE92ZXJmbG93IGZyb20gXCIuL2RldGVjdE92ZXJmbG93LmpzXCI7XG5pbXBvcnQgZ2V0QmFzZVBsYWNlbWVudCBmcm9tIFwiLi9nZXRCYXNlUGxhY2VtZW50LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb21wdXRlQXV0b1BsYWNlbWVudChzdGF0ZSwgb3B0aW9ucykge1xuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgdmFyIF9vcHRpb25zID0gb3B0aW9ucyxcbiAgICAgIHBsYWNlbWVudCA9IF9vcHRpb25zLnBsYWNlbWVudCxcbiAgICAgIGJvdW5kYXJ5ID0gX29wdGlvbnMuYm91bmRhcnksXG4gICAgICByb290Qm91bmRhcnkgPSBfb3B0aW9ucy5yb290Qm91bmRhcnksXG4gICAgICBwYWRkaW5nID0gX29wdGlvbnMucGFkZGluZyxcbiAgICAgIGZsaXBWYXJpYXRpb25zID0gX29wdGlvbnMuZmxpcFZhcmlhdGlvbnMsXG4gICAgICBfb3B0aW9ucyRhbGxvd2VkQXV0b1AgPSBfb3B0aW9ucy5hbGxvd2VkQXV0b1BsYWNlbWVudHMsXG4gICAgICBhbGxvd2VkQXV0b1BsYWNlbWVudHMgPSBfb3B0aW9ucyRhbGxvd2VkQXV0b1AgPT09IHZvaWQgMCA/IGFsbFBsYWNlbWVudHMgOiBfb3B0aW9ucyRhbGxvd2VkQXV0b1A7XG4gIHZhciB2YXJpYXRpb24gPSBnZXRWYXJpYXRpb24ocGxhY2VtZW50KTtcbiAgdmFyIHBsYWNlbWVudHMgPSB2YXJpYXRpb24gPyBmbGlwVmFyaWF0aW9ucyA/IHZhcmlhdGlvblBsYWNlbWVudHMgOiB2YXJpYXRpb25QbGFjZW1lbnRzLmZpbHRlcihmdW5jdGlvbiAocGxhY2VtZW50KSB7XG4gICAgcmV0dXJuIGdldFZhcmlhdGlvbihwbGFjZW1lbnQpID09PSB2YXJpYXRpb247XG4gIH0pIDogYmFzZVBsYWNlbWVudHM7XG4gIHZhciBhbGxvd2VkUGxhY2VtZW50cyA9IHBsYWNlbWVudHMuZmlsdGVyKGZ1bmN0aW9uIChwbGFjZW1lbnQpIHtcbiAgICByZXR1cm4gYWxsb3dlZEF1dG9QbGFjZW1lbnRzLmluZGV4T2YocGxhY2VtZW50KSA+PSAwO1xuICB9KTtcblxuICBpZiAoYWxsb3dlZFBsYWNlbWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgYWxsb3dlZFBsYWNlbWVudHMgPSBwbGFjZW1lbnRzO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgY29uc29sZS5lcnJvcihbJ1BvcHBlcjogVGhlIGBhbGxvd2VkQXV0b1BsYWNlbWVudHNgIG9wdGlvbiBkaWQgbm90IGFsbG93IGFueScsICdwbGFjZW1lbnRzLiBFbnN1cmUgdGhlIGBwbGFjZW1lbnRgIG9wdGlvbiBtYXRjaGVzIHRoZSB2YXJpYXRpb24nLCAnb2YgdGhlIGFsbG93ZWQgcGxhY2VtZW50cy4nLCAnRm9yIGV4YW1wbGUsIFwiYXV0b1wiIGNhbm5vdCBiZSB1c2VkIHRvIGFsbG93IFwiYm90dG9tLXN0YXJ0XCIuJywgJ1VzZSBcImF1dG8tc3RhcnRcIiBpbnN0ZWFkLiddLmpvaW4oJyAnKSk7XG4gICAgfVxuICB9IC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXR5cGVdOiBGbG93IHNlZW1zIHRvIGhhdmUgcHJvYmxlbXMgd2l0aCB0d28gYXJyYXkgdW5pb25zLi4uXG5cblxuICB2YXIgb3ZlcmZsb3dzID0gYWxsb3dlZFBsYWNlbWVudHMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHBsYWNlbWVudCkge1xuICAgIGFjY1twbGFjZW1lbnRdID0gZGV0ZWN0T3ZlcmZsb3coc3RhdGUsIHtcbiAgICAgIHBsYWNlbWVudDogcGxhY2VtZW50LFxuICAgICAgYm91bmRhcnk6IGJvdW5kYXJ5LFxuICAgICAgcm9vdEJvdW5kYXJ5OiByb290Qm91bmRhcnksXG4gICAgICBwYWRkaW5nOiBwYWRkaW5nXG4gICAgfSlbZ2V0QmFzZVBsYWNlbWVudChwbGFjZW1lbnQpXTtcbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG4gIHJldHVybiBPYmplY3Qua2V5cyhvdmVyZmxvd3MpLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gb3ZlcmZsb3dzW2FdIC0gb3ZlcmZsb3dzW2JdO1xuICB9KTtcbn0iLCAiaW1wb3J0IGdldE9wcG9zaXRlUGxhY2VtZW50IGZyb20gXCIuLi91dGlscy9nZXRPcHBvc2l0ZVBsYWNlbWVudC5qc1wiO1xuaW1wb3J0IGdldEJhc2VQbGFjZW1lbnQgZnJvbSBcIi4uL3V0aWxzL2dldEJhc2VQbGFjZW1lbnQuanNcIjtcbmltcG9ydCBnZXRPcHBvc2l0ZVZhcmlhdGlvblBsYWNlbWVudCBmcm9tIFwiLi4vdXRpbHMvZ2V0T3Bwb3NpdGVWYXJpYXRpb25QbGFjZW1lbnQuanNcIjtcbmltcG9ydCBkZXRlY3RPdmVyZmxvdyBmcm9tIFwiLi4vdXRpbHMvZGV0ZWN0T3ZlcmZsb3cuanNcIjtcbmltcG9ydCBjb21wdXRlQXV0b1BsYWNlbWVudCBmcm9tIFwiLi4vdXRpbHMvY29tcHV0ZUF1dG9QbGFjZW1lbnQuanNcIjtcbmltcG9ydCB7IGJvdHRvbSwgdG9wLCBzdGFydCwgcmlnaHQsIGxlZnQsIGF1dG8gfSBmcm9tIFwiLi4vZW51bXMuanNcIjtcbmltcG9ydCBnZXRWYXJpYXRpb24gZnJvbSBcIi4uL3V0aWxzL2dldFZhcmlhdGlvbi5qc1wiOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cbmZ1bmN0aW9uIGdldEV4cGFuZGVkRmFsbGJhY2tQbGFjZW1lbnRzKHBsYWNlbWVudCkge1xuICBpZiAoZ2V0QmFzZVBsYWNlbWVudChwbGFjZW1lbnQpID09PSBhdXRvKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgdmFyIG9wcG9zaXRlUGxhY2VtZW50ID0gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQocGxhY2VtZW50KTtcbiAgcmV0dXJuIFtnZXRPcHBvc2l0ZVZhcmlhdGlvblBsYWNlbWVudChwbGFjZW1lbnQpLCBvcHBvc2l0ZVBsYWNlbWVudCwgZ2V0T3Bwb3NpdGVWYXJpYXRpb25QbGFjZW1lbnQob3Bwb3NpdGVQbGFjZW1lbnQpXTtcbn1cblxuZnVuY3Rpb24gZmxpcChfcmVmKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYuc3RhdGUsXG4gICAgICBvcHRpb25zID0gX3JlZi5vcHRpb25zLFxuICAgICAgbmFtZSA9IF9yZWYubmFtZTtcblxuICBpZiAoc3RhdGUubW9kaWZpZXJzRGF0YVtuYW1lXS5fc2tpcCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBfb3B0aW9ucyRtYWluQXhpcyA9IG9wdGlvbnMubWFpbkF4aXMsXG4gICAgICBjaGVja01haW5BeGlzID0gX29wdGlvbnMkbWFpbkF4aXMgPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyRtYWluQXhpcyxcbiAgICAgIF9vcHRpb25zJGFsdEF4aXMgPSBvcHRpb25zLmFsdEF4aXMsXG4gICAgICBjaGVja0FsdEF4aXMgPSBfb3B0aW9ucyRhbHRBeGlzID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkYWx0QXhpcyxcbiAgICAgIHNwZWNpZmllZEZhbGxiYWNrUGxhY2VtZW50cyA9IG9wdGlvbnMuZmFsbGJhY2tQbGFjZW1lbnRzLFxuICAgICAgcGFkZGluZyA9IG9wdGlvbnMucGFkZGluZyxcbiAgICAgIGJvdW5kYXJ5ID0gb3B0aW9ucy5ib3VuZGFyeSxcbiAgICAgIHJvb3RCb3VuZGFyeSA9IG9wdGlvbnMucm9vdEJvdW5kYXJ5LFxuICAgICAgYWx0Qm91bmRhcnkgPSBvcHRpb25zLmFsdEJvdW5kYXJ5LFxuICAgICAgX29wdGlvbnMkZmxpcFZhcmlhdGlvID0gb3B0aW9ucy5mbGlwVmFyaWF0aW9ucyxcbiAgICAgIGZsaXBWYXJpYXRpb25zID0gX29wdGlvbnMkZmxpcFZhcmlhdGlvID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkZmxpcFZhcmlhdGlvLFxuICAgICAgYWxsb3dlZEF1dG9QbGFjZW1lbnRzID0gb3B0aW9ucy5hbGxvd2VkQXV0b1BsYWNlbWVudHM7XG4gIHZhciBwcmVmZXJyZWRQbGFjZW1lbnQgPSBzdGF0ZS5vcHRpb25zLnBsYWNlbWVudDtcbiAgdmFyIGJhc2VQbGFjZW1lbnQgPSBnZXRCYXNlUGxhY2VtZW50KHByZWZlcnJlZFBsYWNlbWVudCk7XG4gIHZhciBpc0Jhc2VQbGFjZW1lbnQgPSBiYXNlUGxhY2VtZW50ID09PSBwcmVmZXJyZWRQbGFjZW1lbnQ7XG4gIHZhciBmYWxsYmFja1BsYWNlbWVudHMgPSBzcGVjaWZpZWRGYWxsYmFja1BsYWNlbWVudHMgfHwgKGlzQmFzZVBsYWNlbWVudCB8fCAhZmxpcFZhcmlhdGlvbnMgPyBbZ2V0T3Bwb3NpdGVQbGFjZW1lbnQocHJlZmVycmVkUGxhY2VtZW50KV0gOiBnZXRFeHBhbmRlZEZhbGxiYWNrUGxhY2VtZW50cyhwcmVmZXJyZWRQbGFjZW1lbnQpKTtcbiAgdmFyIHBsYWNlbWVudHMgPSBbcHJlZmVycmVkUGxhY2VtZW50XS5jb25jYXQoZmFsbGJhY2tQbGFjZW1lbnRzKS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgcGxhY2VtZW50KSB7XG4gICAgcmV0dXJuIGFjYy5jb25jYXQoZ2V0QmFzZVBsYWNlbWVudChwbGFjZW1lbnQpID09PSBhdXRvID8gY29tcHV0ZUF1dG9QbGFjZW1lbnQoc3RhdGUsIHtcbiAgICAgIHBsYWNlbWVudDogcGxhY2VtZW50LFxuICAgICAgYm91bmRhcnk6IGJvdW5kYXJ5LFxuICAgICAgcm9vdEJvdW5kYXJ5OiByb290Qm91bmRhcnksXG4gICAgICBwYWRkaW5nOiBwYWRkaW5nLFxuICAgICAgZmxpcFZhcmlhdGlvbnM6IGZsaXBWYXJpYXRpb25zLFxuICAgICAgYWxsb3dlZEF1dG9QbGFjZW1lbnRzOiBhbGxvd2VkQXV0b1BsYWNlbWVudHNcbiAgICB9KSA6IHBsYWNlbWVudCk7XG4gIH0sIFtdKTtcbiAgdmFyIHJlZmVyZW5jZVJlY3QgPSBzdGF0ZS5yZWN0cy5yZWZlcmVuY2U7XG4gIHZhciBwb3BwZXJSZWN0ID0gc3RhdGUucmVjdHMucG9wcGVyO1xuICB2YXIgY2hlY2tzTWFwID0gbmV3IE1hcCgpO1xuICB2YXIgbWFrZUZhbGxiYWNrQ2hlY2tzID0gdHJ1ZTtcbiAgdmFyIGZpcnN0Rml0dGluZ1BsYWNlbWVudCA9IHBsYWNlbWVudHNbMF07XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwbGFjZW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHBsYWNlbWVudCA9IHBsYWNlbWVudHNbaV07XG5cbiAgICB2YXIgX2Jhc2VQbGFjZW1lbnQgPSBnZXRCYXNlUGxhY2VtZW50KHBsYWNlbWVudCk7XG5cbiAgICB2YXIgaXNTdGFydFZhcmlhdGlvbiA9IGdldFZhcmlhdGlvbihwbGFjZW1lbnQpID09PSBzdGFydDtcbiAgICB2YXIgaXNWZXJ0aWNhbCA9IFt0b3AsIGJvdHRvbV0uaW5kZXhPZihfYmFzZVBsYWNlbWVudCkgPj0gMDtcbiAgICB2YXIgbGVuID0gaXNWZXJ0aWNhbCA/ICd3aWR0aCcgOiAnaGVpZ2h0JztcbiAgICB2YXIgb3ZlcmZsb3cgPSBkZXRlY3RPdmVyZmxvdyhzdGF0ZSwge1xuICAgICAgcGxhY2VtZW50OiBwbGFjZW1lbnQsXG4gICAgICBib3VuZGFyeTogYm91bmRhcnksXG4gICAgICByb290Qm91bmRhcnk6IHJvb3RCb3VuZGFyeSxcbiAgICAgIGFsdEJvdW5kYXJ5OiBhbHRCb3VuZGFyeSxcbiAgICAgIHBhZGRpbmc6IHBhZGRpbmdcbiAgICB9KTtcbiAgICB2YXIgbWFpblZhcmlhdGlvblNpZGUgPSBpc1ZlcnRpY2FsID8gaXNTdGFydFZhcmlhdGlvbiA/IHJpZ2h0IDogbGVmdCA6IGlzU3RhcnRWYXJpYXRpb24gPyBib3R0b20gOiB0b3A7XG5cbiAgICBpZiAocmVmZXJlbmNlUmVjdFtsZW5dID4gcG9wcGVyUmVjdFtsZW5dKSB7XG4gICAgICBtYWluVmFyaWF0aW9uU2lkZSA9IGdldE9wcG9zaXRlUGxhY2VtZW50KG1haW5WYXJpYXRpb25TaWRlKTtcbiAgICB9XG5cbiAgICB2YXIgYWx0VmFyaWF0aW9uU2lkZSA9IGdldE9wcG9zaXRlUGxhY2VtZW50KG1haW5WYXJpYXRpb25TaWRlKTtcbiAgICB2YXIgY2hlY2tzID0gW107XG5cbiAgICBpZiAoY2hlY2tNYWluQXhpcykge1xuICAgICAgY2hlY2tzLnB1c2gob3ZlcmZsb3dbX2Jhc2VQbGFjZW1lbnRdIDw9IDApO1xuICAgIH1cblxuICAgIGlmIChjaGVja0FsdEF4aXMpIHtcbiAgICAgIGNoZWNrcy5wdXNoKG92ZXJmbG93W21haW5WYXJpYXRpb25TaWRlXSA8PSAwLCBvdmVyZmxvd1thbHRWYXJpYXRpb25TaWRlXSA8PSAwKTtcbiAgICB9XG5cbiAgICBpZiAoY2hlY2tzLmV2ZXJ5KGZ1bmN0aW9uIChjaGVjaykge1xuICAgICAgcmV0dXJuIGNoZWNrO1xuICAgIH0pKSB7XG4gICAgICBmaXJzdEZpdHRpbmdQbGFjZW1lbnQgPSBwbGFjZW1lbnQ7XG4gICAgICBtYWtlRmFsbGJhY2tDaGVja3MgPSBmYWxzZTtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGNoZWNrc01hcC5zZXQocGxhY2VtZW50LCBjaGVja3MpO1xuICB9XG5cbiAgaWYgKG1ha2VGYWxsYmFja0NoZWNrcykge1xuICAgIC8vIGAyYCBtYXkgYmUgZGVzaXJlZCBpbiBzb21lIGNhc2VzIFx1MjAxMyByZXNlYXJjaCBsYXRlclxuICAgIHZhciBudW1iZXJPZkNoZWNrcyA9IGZsaXBWYXJpYXRpb25zID8gMyA6IDE7XG5cbiAgICB2YXIgX2xvb3AgPSBmdW5jdGlvbiBfbG9vcChfaSkge1xuICAgICAgdmFyIGZpdHRpbmdQbGFjZW1lbnQgPSBwbGFjZW1lbnRzLmZpbmQoZnVuY3Rpb24gKHBsYWNlbWVudCkge1xuICAgICAgICB2YXIgY2hlY2tzID0gY2hlY2tzTWFwLmdldChwbGFjZW1lbnQpO1xuXG4gICAgICAgIGlmIChjaGVja3MpIHtcbiAgICAgICAgICByZXR1cm4gY2hlY2tzLnNsaWNlKDAsIF9pKS5ldmVyeShmdW5jdGlvbiAoY2hlY2spIHtcbiAgICAgICAgICAgIHJldHVybiBjaGVjaztcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGlmIChmaXR0aW5nUGxhY2VtZW50KSB7XG4gICAgICAgIGZpcnN0Rml0dGluZ1BsYWNlbWVudCA9IGZpdHRpbmdQbGFjZW1lbnQ7XG4gICAgICAgIHJldHVybiBcImJyZWFrXCI7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGZvciAodmFyIF9pID0gbnVtYmVyT2ZDaGVja3M7IF9pID4gMDsgX2ktLSkge1xuICAgICAgdmFyIF9yZXQgPSBfbG9vcChfaSk7XG5cbiAgICAgIGlmIChfcmV0ID09PSBcImJyZWFrXCIpIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGlmIChzdGF0ZS5wbGFjZW1lbnQgIT09IGZpcnN0Rml0dGluZ1BsYWNlbWVudCkge1xuICAgIHN0YXRlLm1vZGlmaWVyc0RhdGFbbmFtZV0uX3NraXAgPSB0cnVlO1xuICAgIHN0YXRlLnBsYWNlbWVudCA9IGZpcnN0Rml0dGluZ1BsYWNlbWVudDtcbiAgICBzdGF0ZS5yZXNldCA9IHRydWU7XG4gIH1cbn0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ2ZsaXAnLFxuICBlbmFibGVkOiB0cnVlLFxuICBwaGFzZTogJ21haW4nLFxuICBmbjogZmxpcCxcbiAgcmVxdWlyZXNJZkV4aXN0czogWydvZmZzZXQnXSxcbiAgZGF0YToge1xuICAgIF9za2lwOiBmYWxzZVxuICB9XG59OyIsICJpbXBvcnQgeyB0b3AsIGJvdHRvbSwgbGVmdCwgcmlnaHQgfSBmcm9tIFwiLi4vZW51bXMuanNcIjtcbmltcG9ydCBkZXRlY3RPdmVyZmxvdyBmcm9tIFwiLi4vdXRpbHMvZGV0ZWN0T3ZlcmZsb3cuanNcIjtcblxuZnVuY3Rpb24gZ2V0U2lkZU9mZnNldHMob3ZlcmZsb3csIHJlY3QsIHByZXZlbnRlZE9mZnNldHMpIHtcbiAgaWYgKHByZXZlbnRlZE9mZnNldHMgPT09IHZvaWQgMCkge1xuICAgIHByZXZlbnRlZE9mZnNldHMgPSB7XG4gICAgICB4OiAwLFxuICAgICAgeTogMFxuICAgIH07XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHRvcDogb3ZlcmZsb3cudG9wIC0gcmVjdC5oZWlnaHQgLSBwcmV2ZW50ZWRPZmZzZXRzLnksXG4gICAgcmlnaHQ6IG92ZXJmbG93LnJpZ2h0IC0gcmVjdC53aWR0aCArIHByZXZlbnRlZE9mZnNldHMueCxcbiAgICBib3R0b206IG92ZXJmbG93LmJvdHRvbSAtIHJlY3QuaGVpZ2h0ICsgcHJldmVudGVkT2Zmc2V0cy55LFxuICAgIGxlZnQ6IG92ZXJmbG93LmxlZnQgLSByZWN0LndpZHRoIC0gcHJldmVudGVkT2Zmc2V0cy54XG4gIH07XG59XG5cbmZ1bmN0aW9uIGlzQW55U2lkZUZ1bGx5Q2xpcHBlZChvdmVyZmxvdykge1xuICByZXR1cm4gW3RvcCwgcmlnaHQsIGJvdHRvbSwgbGVmdF0uc29tZShmdW5jdGlvbiAoc2lkZSkge1xuICAgIHJldHVybiBvdmVyZmxvd1tzaWRlXSA+PSAwO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gaGlkZShfcmVmKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYuc3RhdGUsXG4gICAgICBuYW1lID0gX3JlZi5uYW1lO1xuICB2YXIgcmVmZXJlbmNlUmVjdCA9IHN0YXRlLnJlY3RzLnJlZmVyZW5jZTtcbiAgdmFyIHBvcHBlclJlY3QgPSBzdGF0ZS5yZWN0cy5wb3BwZXI7XG4gIHZhciBwcmV2ZW50ZWRPZmZzZXRzID0gc3RhdGUubW9kaWZpZXJzRGF0YS5wcmV2ZW50T3ZlcmZsb3c7XG4gIHZhciByZWZlcmVuY2VPdmVyZmxvdyA9IGRldGVjdE92ZXJmbG93KHN0YXRlLCB7XG4gICAgZWxlbWVudENvbnRleHQ6ICdyZWZlcmVuY2UnXG4gIH0pO1xuICB2YXIgcG9wcGVyQWx0T3ZlcmZsb3cgPSBkZXRlY3RPdmVyZmxvdyhzdGF0ZSwge1xuICAgIGFsdEJvdW5kYXJ5OiB0cnVlXG4gIH0pO1xuICB2YXIgcmVmZXJlbmNlQ2xpcHBpbmdPZmZzZXRzID0gZ2V0U2lkZU9mZnNldHMocmVmZXJlbmNlT3ZlcmZsb3csIHJlZmVyZW5jZVJlY3QpO1xuICB2YXIgcG9wcGVyRXNjYXBlT2Zmc2V0cyA9IGdldFNpZGVPZmZzZXRzKHBvcHBlckFsdE92ZXJmbG93LCBwb3BwZXJSZWN0LCBwcmV2ZW50ZWRPZmZzZXRzKTtcbiAgdmFyIGlzUmVmZXJlbmNlSGlkZGVuID0gaXNBbnlTaWRlRnVsbHlDbGlwcGVkKHJlZmVyZW5jZUNsaXBwaW5nT2Zmc2V0cyk7XG4gIHZhciBoYXNQb3BwZXJFc2NhcGVkID0gaXNBbnlTaWRlRnVsbHlDbGlwcGVkKHBvcHBlckVzY2FwZU9mZnNldHMpO1xuICBzdGF0ZS5tb2RpZmllcnNEYXRhW25hbWVdID0ge1xuICAgIHJlZmVyZW5jZUNsaXBwaW5nT2Zmc2V0czogcmVmZXJlbmNlQ2xpcHBpbmdPZmZzZXRzLFxuICAgIHBvcHBlckVzY2FwZU9mZnNldHM6IHBvcHBlckVzY2FwZU9mZnNldHMsXG4gICAgaXNSZWZlcmVuY2VIaWRkZW46IGlzUmVmZXJlbmNlSGlkZGVuLFxuICAgIGhhc1BvcHBlckVzY2FwZWQ6IGhhc1BvcHBlckVzY2FwZWRcbiAgfTtcbiAgc3RhdGUuYXR0cmlidXRlcy5wb3BwZXIgPSBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZS5hdHRyaWJ1dGVzLnBvcHBlciwge1xuICAgICdkYXRhLXBvcHBlci1yZWZlcmVuY2UtaGlkZGVuJzogaXNSZWZlcmVuY2VIaWRkZW4sXG4gICAgJ2RhdGEtcG9wcGVyLWVzY2FwZWQnOiBoYXNQb3BwZXJFc2NhcGVkXG4gIH0pO1xufSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cblxuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAnaGlkZScsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAnbWFpbicsXG4gIHJlcXVpcmVzSWZFeGlzdHM6IFsncHJldmVudE92ZXJmbG93J10sXG4gIGZuOiBoaWRlXG59OyIsICJpbXBvcnQgZ2V0QmFzZVBsYWNlbWVudCBmcm9tIFwiLi4vdXRpbHMvZ2V0QmFzZVBsYWNlbWVudC5qc1wiO1xuaW1wb3J0IHsgdG9wLCBsZWZ0LCByaWdodCwgcGxhY2VtZW50cyB9IGZyb20gXCIuLi9lbnVtcy5qc1wiOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cbmV4cG9ydCBmdW5jdGlvbiBkaXN0YW5jZUFuZFNraWRkaW5nVG9YWShwbGFjZW1lbnQsIHJlY3RzLCBvZmZzZXQpIHtcbiAgdmFyIGJhc2VQbGFjZW1lbnQgPSBnZXRCYXNlUGxhY2VtZW50KHBsYWNlbWVudCk7XG4gIHZhciBpbnZlcnREaXN0YW5jZSA9IFtsZWZ0LCB0b3BdLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgPj0gMCA/IC0xIDogMTtcblxuICB2YXIgX3JlZiA9IHR5cGVvZiBvZmZzZXQgPT09ICdmdW5jdGlvbicgPyBvZmZzZXQoT2JqZWN0LmFzc2lnbih7fSwgcmVjdHMsIHtcbiAgICBwbGFjZW1lbnQ6IHBsYWNlbWVudFxuICB9KSkgOiBvZmZzZXQsXG4gICAgICBza2lkZGluZyA9IF9yZWZbMF0sXG4gICAgICBkaXN0YW5jZSA9IF9yZWZbMV07XG5cbiAgc2tpZGRpbmcgPSBza2lkZGluZyB8fCAwO1xuICBkaXN0YW5jZSA9IChkaXN0YW5jZSB8fCAwKSAqIGludmVydERpc3RhbmNlO1xuICByZXR1cm4gW2xlZnQsIHJpZ2h0XS5pbmRleE9mKGJhc2VQbGFjZW1lbnQpID49IDAgPyB7XG4gICAgeDogZGlzdGFuY2UsXG4gICAgeTogc2tpZGRpbmdcbiAgfSA6IHtcbiAgICB4OiBza2lkZGluZyxcbiAgICB5OiBkaXN0YW5jZVxuICB9O1xufVxuXG5mdW5jdGlvbiBvZmZzZXQoX3JlZjIpIHtcbiAgdmFyIHN0YXRlID0gX3JlZjIuc3RhdGUsXG4gICAgICBvcHRpb25zID0gX3JlZjIub3B0aW9ucyxcbiAgICAgIG5hbWUgPSBfcmVmMi5uYW1lO1xuICB2YXIgX29wdGlvbnMkb2Zmc2V0ID0gb3B0aW9ucy5vZmZzZXQsXG4gICAgICBvZmZzZXQgPSBfb3B0aW9ucyRvZmZzZXQgPT09IHZvaWQgMCA/IFswLCAwXSA6IF9vcHRpb25zJG9mZnNldDtcbiAgdmFyIGRhdGEgPSBwbGFjZW1lbnRzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBwbGFjZW1lbnQpIHtcbiAgICBhY2NbcGxhY2VtZW50XSA9IGRpc3RhbmNlQW5kU2tpZGRpbmdUb1hZKHBsYWNlbWVudCwgc3RhdGUucmVjdHMsIG9mZnNldCk7XG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30pO1xuICB2YXIgX2RhdGEkc3RhdGUkcGxhY2VtZW50ID0gZGF0YVtzdGF0ZS5wbGFjZW1lbnRdLFxuICAgICAgeCA9IF9kYXRhJHN0YXRlJHBsYWNlbWVudC54LFxuICAgICAgeSA9IF9kYXRhJHN0YXRlJHBsYWNlbWVudC55O1xuXG4gIGlmIChzdGF0ZS5tb2RpZmllcnNEYXRhLnBvcHBlck9mZnNldHMgIT0gbnVsbCkge1xuICAgIHN0YXRlLm1vZGlmaWVyc0RhdGEucG9wcGVyT2Zmc2V0cy54ICs9IHg7XG4gICAgc3RhdGUubW9kaWZpZXJzRGF0YS5wb3BwZXJPZmZzZXRzLnkgKz0geTtcbiAgfVxuXG4gIHN0YXRlLm1vZGlmaWVyc0RhdGFbbmFtZV0gPSBkYXRhO1xufSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cblxuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAnb2Zmc2V0JyxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgcGhhc2U6ICdtYWluJyxcbiAgcmVxdWlyZXM6IFsncG9wcGVyT2Zmc2V0cyddLFxuICBmbjogb2Zmc2V0XG59OyIsICJpbXBvcnQgY29tcHV0ZU9mZnNldHMgZnJvbSBcIi4uL3V0aWxzL2NvbXB1dGVPZmZzZXRzLmpzXCI7XG5cbmZ1bmN0aW9uIHBvcHBlck9mZnNldHMoX3JlZikge1xuICB2YXIgc3RhdGUgPSBfcmVmLnN0YXRlLFxuICAgICAgbmFtZSA9IF9yZWYubmFtZTtcbiAgLy8gT2Zmc2V0cyBhcmUgdGhlIGFjdHVhbCBwb3NpdGlvbiB0aGUgcG9wcGVyIG5lZWRzIHRvIGhhdmUgdG8gYmVcbiAgLy8gcHJvcGVybHkgcG9zaXRpb25lZCBuZWFyIGl0cyByZWZlcmVuY2UgZWxlbWVudFxuICAvLyBUaGlzIGlzIHRoZSBtb3N0IGJhc2ljIHBsYWNlbWVudCwgYW5kIHdpbGwgYmUgYWRqdXN0ZWQgYnlcbiAgLy8gdGhlIG1vZGlmaWVycyBpbiB0aGUgbmV4dCBzdGVwXG4gIHN0YXRlLm1vZGlmaWVyc0RhdGFbbmFtZV0gPSBjb21wdXRlT2Zmc2V0cyh7XG4gICAgcmVmZXJlbmNlOiBzdGF0ZS5yZWN0cy5yZWZlcmVuY2UsXG4gICAgZWxlbWVudDogc3RhdGUucmVjdHMucG9wcGVyLFxuICAgIHN0cmF0ZWd5OiAnYWJzb2x1dGUnLFxuICAgIHBsYWNlbWVudDogc3RhdGUucGxhY2VtZW50XG4gIH0pO1xufSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cblxuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAncG9wcGVyT2Zmc2V0cycsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAncmVhZCcsXG4gIGZuOiBwb3BwZXJPZmZzZXRzLFxuICBkYXRhOiB7fVxufTsiLCAiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0QWx0QXhpcyhheGlzKSB7XG4gIHJldHVybiBheGlzID09PSAneCcgPyAneScgOiAneCc7XG59IiwgImltcG9ydCB7IHRvcCwgbGVmdCwgcmlnaHQsIGJvdHRvbSwgc3RhcnQgfSBmcm9tIFwiLi4vZW51bXMuanNcIjtcbmltcG9ydCBnZXRCYXNlUGxhY2VtZW50IGZyb20gXCIuLi91dGlscy9nZXRCYXNlUGxhY2VtZW50LmpzXCI7XG5pbXBvcnQgZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50IGZyb20gXCIuLi91dGlscy9nZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQuanNcIjtcbmltcG9ydCBnZXRBbHRBeGlzIGZyb20gXCIuLi91dGlscy9nZXRBbHRBeGlzLmpzXCI7XG5pbXBvcnQgeyB3aXRoaW4sIHdpdGhpbk1heENsYW1wIH0gZnJvbSBcIi4uL3V0aWxzL3dpdGhpbi5qc1wiO1xuaW1wb3J0IGdldExheW91dFJlY3QgZnJvbSBcIi4uL2RvbS11dGlscy9nZXRMYXlvdXRSZWN0LmpzXCI7XG5pbXBvcnQgZ2V0T2Zmc2V0UGFyZW50IGZyb20gXCIuLi9kb20tdXRpbHMvZ2V0T2Zmc2V0UGFyZW50LmpzXCI7XG5pbXBvcnQgZGV0ZWN0T3ZlcmZsb3cgZnJvbSBcIi4uL3V0aWxzL2RldGVjdE92ZXJmbG93LmpzXCI7XG5pbXBvcnQgZ2V0VmFyaWF0aW9uIGZyb20gXCIuLi91dGlscy9nZXRWYXJpYXRpb24uanNcIjtcbmltcG9ydCBnZXRGcmVzaFNpZGVPYmplY3QgZnJvbSBcIi4uL3V0aWxzL2dldEZyZXNoU2lkZU9iamVjdC5qc1wiO1xuaW1wb3J0IHsgbWluIGFzIG1hdGhNaW4sIG1heCBhcyBtYXRoTWF4IH0gZnJvbSBcIi4uL3V0aWxzL21hdGguanNcIjtcblxuZnVuY3Rpb24gcHJldmVudE92ZXJmbG93KF9yZWYpIHtcbiAgdmFyIHN0YXRlID0gX3JlZi5zdGF0ZSxcbiAgICAgIG9wdGlvbnMgPSBfcmVmLm9wdGlvbnMsXG4gICAgICBuYW1lID0gX3JlZi5uYW1lO1xuICB2YXIgX29wdGlvbnMkbWFpbkF4aXMgPSBvcHRpb25zLm1haW5BeGlzLFxuICAgICAgY2hlY2tNYWluQXhpcyA9IF9vcHRpb25zJG1haW5BeGlzID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkbWFpbkF4aXMsXG4gICAgICBfb3B0aW9ucyRhbHRBeGlzID0gb3B0aW9ucy5hbHRBeGlzLFxuICAgICAgY2hlY2tBbHRBeGlzID0gX29wdGlvbnMkYWx0QXhpcyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfb3B0aW9ucyRhbHRBeGlzLFxuICAgICAgYm91bmRhcnkgPSBvcHRpb25zLmJvdW5kYXJ5LFxuICAgICAgcm9vdEJvdW5kYXJ5ID0gb3B0aW9ucy5yb290Qm91bmRhcnksXG4gICAgICBhbHRCb3VuZGFyeSA9IG9wdGlvbnMuYWx0Qm91bmRhcnksXG4gICAgICBwYWRkaW5nID0gb3B0aW9ucy5wYWRkaW5nLFxuICAgICAgX29wdGlvbnMkdGV0aGVyID0gb3B0aW9ucy50ZXRoZXIsXG4gICAgICB0ZXRoZXIgPSBfb3B0aW9ucyR0ZXRoZXIgPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyR0ZXRoZXIsXG4gICAgICBfb3B0aW9ucyR0ZXRoZXJPZmZzZXQgPSBvcHRpb25zLnRldGhlck9mZnNldCxcbiAgICAgIHRldGhlck9mZnNldCA9IF9vcHRpb25zJHRldGhlck9mZnNldCA9PT0gdm9pZCAwID8gMCA6IF9vcHRpb25zJHRldGhlck9mZnNldDtcbiAgdmFyIG92ZXJmbG93ID0gZGV0ZWN0T3ZlcmZsb3coc3RhdGUsIHtcbiAgICBib3VuZGFyeTogYm91bmRhcnksXG4gICAgcm9vdEJvdW5kYXJ5OiByb290Qm91bmRhcnksXG4gICAgcGFkZGluZzogcGFkZGluZyxcbiAgICBhbHRCb3VuZGFyeTogYWx0Qm91bmRhcnlcbiAgfSk7XG4gIHZhciBiYXNlUGxhY2VtZW50ID0gZ2V0QmFzZVBsYWNlbWVudChzdGF0ZS5wbGFjZW1lbnQpO1xuICB2YXIgdmFyaWF0aW9uID0gZ2V0VmFyaWF0aW9uKHN0YXRlLnBsYWNlbWVudCk7XG4gIHZhciBpc0Jhc2VQbGFjZW1lbnQgPSAhdmFyaWF0aW9uO1xuICB2YXIgbWFpbkF4aXMgPSBnZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQoYmFzZVBsYWNlbWVudCk7XG4gIHZhciBhbHRBeGlzID0gZ2V0QWx0QXhpcyhtYWluQXhpcyk7XG4gIHZhciBwb3BwZXJPZmZzZXRzID0gc3RhdGUubW9kaWZpZXJzRGF0YS5wb3BwZXJPZmZzZXRzO1xuICB2YXIgcmVmZXJlbmNlUmVjdCA9IHN0YXRlLnJlY3RzLnJlZmVyZW5jZTtcbiAgdmFyIHBvcHBlclJlY3QgPSBzdGF0ZS5yZWN0cy5wb3BwZXI7XG4gIHZhciB0ZXRoZXJPZmZzZXRWYWx1ZSA9IHR5cGVvZiB0ZXRoZXJPZmZzZXQgPT09ICdmdW5jdGlvbicgPyB0ZXRoZXJPZmZzZXQoT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUucmVjdHMsIHtcbiAgICBwbGFjZW1lbnQ6IHN0YXRlLnBsYWNlbWVudFxuICB9KSkgOiB0ZXRoZXJPZmZzZXQ7XG4gIHZhciBub3JtYWxpemVkVGV0aGVyT2Zmc2V0VmFsdWUgPSB0eXBlb2YgdGV0aGVyT2Zmc2V0VmFsdWUgPT09ICdudW1iZXInID8ge1xuICAgIG1haW5BeGlzOiB0ZXRoZXJPZmZzZXRWYWx1ZSxcbiAgICBhbHRBeGlzOiB0ZXRoZXJPZmZzZXRWYWx1ZVxuICB9IDogT2JqZWN0LmFzc2lnbih7XG4gICAgbWFpbkF4aXM6IDAsXG4gICAgYWx0QXhpczogMFxuICB9LCB0ZXRoZXJPZmZzZXRWYWx1ZSk7XG4gIHZhciBvZmZzZXRNb2RpZmllclN0YXRlID0gc3RhdGUubW9kaWZpZXJzRGF0YS5vZmZzZXQgPyBzdGF0ZS5tb2RpZmllcnNEYXRhLm9mZnNldFtzdGF0ZS5wbGFjZW1lbnRdIDogbnVsbDtcbiAgdmFyIGRhdGEgPSB7XG4gICAgeDogMCxcbiAgICB5OiAwXG4gIH07XG5cbiAgaWYgKCFwb3BwZXJPZmZzZXRzKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGNoZWNrTWFpbkF4aXMpIHtcbiAgICB2YXIgX29mZnNldE1vZGlmaWVyU3RhdGUkO1xuXG4gICAgdmFyIG1haW5TaWRlID0gbWFpbkF4aXMgPT09ICd5JyA/IHRvcCA6IGxlZnQ7XG4gICAgdmFyIGFsdFNpZGUgPSBtYWluQXhpcyA9PT0gJ3knID8gYm90dG9tIDogcmlnaHQ7XG4gICAgdmFyIGxlbiA9IG1haW5BeGlzID09PSAneScgPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG4gICAgdmFyIG9mZnNldCA9IHBvcHBlck9mZnNldHNbbWFpbkF4aXNdO1xuICAgIHZhciBtaW4gPSBvZmZzZXQgKyBvdmVyZmxvd1ttYWluU2lkZV07XG4gICAgdmFyIG1heCA9IG9mZnNldCAtIG92ZXJmbG93W2FsdFNpZGVdO1xuICAgIHZhciBhZGRpdGl2ZSA9IHRldGhlciA/IC1wb3BwZXJSZWN0W2xlbl0gLyAyIDogMDtcbiAgICB2YXIgbWluTGVuID0gdmFyaWF0aW9uID09PSBzdGFydCA/IHJlZmVyZW5jZVJlY3RbbGVuXSA6IHBvcHBlclJlY3RbbGVuXTtcbiAgICB2YXIgbWF4TGVuID0gdmFyaWF0aW9uID09PSBzdGFydCA/IC1wb3BwZXJSZWN0W2xlbl0gOiAtcmVmZXJlbmNlUmVjdFtsZW5dOyAvLyBXZSBuZWVkIHRvIGluY2x1ZGUgdGhlIGFycm93IGluIHRoZSBjYWxjdWxhdGlvbiBzbyB0aGUgYXJyb3cgZG9lc24ndCBnb1xuICAgIC8vIG91dHNpZGUgdGhlIHJlZmVyZW5jZSBib3VuZHNcblxuICAgIHZhciBhcnJvd0VsZW1lbnQgPSBzdGF0ZS5lbGVtZW50cy5hcnJvdztcbiAgICB2YXIgYXJyb3dSZWN0ID0gdGV0aGVyICYmIGFycm93RWxlbWVudCA/IGdldExheW91dFJlY3QoYXJyb3dFbGVtZW50KSA6IHtcbiAgICAgIHdpZHRoOiAwLFxuICAgICAgaGVpZ2h0OiAwXG4gICAgfTtcbiAgICB2YXIgYXJyb3dQYWRkaW5nT2JqZWN0ID0gc3RhdGUubW9kaWZpZXJzRGF0YVsnYXJyb3cjcGVyc2lzdGVudCddID8gc3RhdGUubW9kaWZpZXJzRGF0YVsnYXJyb3cjcGVyc2lzdGVudCddLnBhZGRpbmcgOiBnZXRGcmVzaFNpZGVPYmplY3QoKTtcbiAgICB2YXIgYXJyb3dQYWRkaW5nTWluID0gYXJyb3dQYWRkaW5nT2JqZWN0W21haW5TaWRlXTtcbiAgICB2YXIgYXJyb3dQYWRkaW5nTWF4ID0gYXJyb3dQYWRkaW5nT2JqZWN0W2FsdFNpZGVdOyAvLyBJZiB0aGUgcmVmZXJlbmNlIGxlbmd0aCBpcyBzbWFsbGVyIHRoYW4gdGhlIGFycm93IGxlbmd0aCwgd2UgZG9uJ3Qgd2FudFxuICAgIC8vIHRvIGluY2x1ZGUgaXRzIGZ1bGwgc2l6ZSBpbiB0aGUgY2FsY3VsYXRpb24uIElmIHRoZSByZWZlcmVuY2UgaXMgc21hbGxcbiAgICAvLyBhbmQgbmVhciB0aGUgZWRnZSBvZiBhIGJvdW5kYXJ5LCB0aGUgcG9wcGVyIGNhbiBvdmVyZmxvdyBldmVuIGlmIHRoZVxuICAgIC8vIHJlZmVyZW5jZSBpcyBub3Qgb3ZlcmZsb3dpbmcgYXMgd2VsbCAoZS5nLiB2aXJ0dWFsIGVsZW1lbnRzIHdpdGggbm9cbiAgICAvLyB3aWR0aCBvciBoZWlnaHQpXG5cbiAgICB2YXIgYXJyb3dMZW4gPSB3aXRoaW4oMCwgcmVmZXJlbmNlUmVjdFtsZW5dLCBhcnJvd1JlY3RbbGVuXSk7XG4gICAgdmFyIG1pbk9mZnNldCA9IGlzQmFzZVBsYWNlbWVudCA/IHJlZmVyZW5jZVJlY3RbbGVuXSAvIDIgLSBhZGRpdGl2ZSAtIGFycm93TGVuIC0gYXJyb3dQYWRkaW5nTWluIC0gbm9ybWFsaXplZFRldGhlck9mZnNldFZhbHVlLm1haW5BeGlzIDogbWluTGVuIC0gYXJyb3dMZW4gLSBhcnJvd1BhZGRpbmdNaW4gLSBub3JtYWxpemVkVGV0aGVyT2Zmc2V0VmFsdWUubWFpbkF4aXM7XG4gICAgdmFyIG1heE9mZnNldCA9IGlzQmFzZVBsYWNlbWVudCA/IC1yZWZlcmVuY2VSZWN0W2xlbl0gLyAyICsgYWRkaXRpdmUgKyBhcnJvd0xlbiArIGFycm93UGFkZGluZ01heCArIG5vcm1hbGl6ZWRUZXRoZXJPZmZzZXRWYWx1ZS5tYWluQXhpcyA6IG1heExlbiArIGFycm93TGVuICsgYXJyb3dQYWRkaW5nTWF4ICsgbm9ybWFsaXplZFRldGhlck9mZnNldFZhbHVlLm1haW5BeGlzO1xuICAgIHZhciBhcnJvd09mZnNldFBhcmVudCA9IHN0YXRlLmVsZW1lbnRzLmFycm93ICYmIGdldE9mZnNldFBhcmVudChzdGF0ZS5lbGVtZW50cy5hcnJvdyk7XG4gICAgdmFyIGNsaWVudE9mZnNldCA9IGFycm93T2Zmc2V0UGFyZW50ID8gbWFpbkF4aXMgPT09ICd5JyA/IGFycm93T2Zmc2V0UGFyZW50LmNsaWVudFRvcCB8fCAwIDogYXJyb3dPZmZzZXRQYXJlbnQuY2xpZW50TGVmdCB8fCAwIDogMDtcbiAgICB2YXIgb2Zmc2V0TW9kaWZpZXJWYWx1ZSA9IChfb2Zmc2V0TW9kaWZpZXJTdGF0ZSQgPSBvZmZzZXRNb2RpZmllclN0YXRlID09IG51bGwgPyB2b2lkIDAgOiBvZmZzZXRNb2RpZmllclN0YXRlW21haW5BeGlzXSkgIT0gbnVsbCA/IF9vZmZzZXRNb2RpZmllclN0YXRlJCA6IDA7XG4gICAgdmFyIHRldGhlck1pbiA9IG9mZnNldCArIG1pbk9mZnNldCAtIG9mZnNldE1vZGlmaWVyVmFsdWUgLSBjbGllbnRPZmZzZXQ7XG4gICAgdmFyIHRldGhlck1heCA9IG9mZnNldCArIG1heE9mZnNldCAtIG9mZnNldE1vZGlmaWVyVmFsdWU7XG4gICAgdmFyIHByZXZlbnRlZE9mZnNldCA9IHdpdGhpbih0ZXRoZXIgPyBtYXRoTWluKG1pbiwgdGV0aGVyTWluKSA6IG1pbiwgb2Zmc2V0LCB0ZXRoZXIgPyBtYXRoTWF4KG1heCwgdGV0aGVyTWF4KSA6IG1heCk7XG4gICAgcG9wcGVyT2Zmc2V0c1ttYWluQXhpc10gPSBwcmV2ZW50ZWRPZmZzZXQ7XG4gICAgZGF0YVttYWluQXhpc10gPSBwcmV2ZW50ZWRPZmZzZXQgLSBvZmZzZXQ7XG4gIH1cblxuICBpZiAoY2hlY2tBbHRBeGlzKSB7XG4gICAgdmFyIF9vZmZzZXRNb2RpZmllclN0YXRlJDI7XG5cbiAgICB2YXIgX21haW5TaWRlID0gbWFpbkF4aXMgPT09ICd4JyA/IHRvcCA6IGxlZnQ7XG5cbiAgICB2YXIgX2FsdFNpZGUgPSBtYWluQXhpcyA9PT0gJ3gnID8gYm90dG9tIDogcmlnaHQ7XG5cbiAgICB2YXIgX29mZnNldCA9IHBvcHBlck9mZnNldHNbYWx0QXhpc107XG5cbiAgICB2YXIgX2xlbiA9IGFsdEF4aXMgPT09ICd5JyA/ICdoZWlnaHQnIDogJ3dpZHRoJztcblxuICAgIHZhciBfbWluID0gX29mZnNldCArIG92ZXJmbG93W19tYWluU2lkZV07XG5cbiAgICB2YXIgX21heCA9IF9vZmZzZXQgLSBvdmVyZmxvd1tfYWx0U2lkZV07XG5cbiAgICB2YXIgaXNPcmlnaW5TaWRlID0gW3RvcCwgbGVmdF0uaW5kZXhPZihiYXNlUGxhY2VtZW50KSAhPT0gLTE7XG5cbiAgICB2YXIgX29mZnNldE1vZGlmaWVyVmFsdWUgPSAoX29mZnNldE1vZGlmaWVyU3RhdGUkMiA9IG9mZnNldE1vZGlmaWVyU3RhdGUgPT0gbnVsbCA/IHZvaWQgMCA6IG9mZnNldE1vZGlmaWVyU3RhdGVbYWx0QXhpc10pICE9IG51bGwgPyBfb2Zmc2V0TW9kaWZpZXJTdGF0ZSQyIDogMDtcblxuICAgIHZhciBfdGV0aGVyTWluID0gaXNPcmlnaW5TaWRlID8gX21pbiA6IF9vZmZzZXQgLSByZWZlcmVuY2VSZWN0W19sZW5dIC0gcG9wcGVyUmVjdFtfbGVuXSAtIF9vZmZzZXRNb2RpZmllclZhbHVlICsgbm9ybWFsaXplZFRldGhlck9mZnNldFZhbHVlLmFsdEF4aXM7XG5cbiAgICB2YXIgX3RldGhlck1heCA9IGlzT3JpZ2luU2lkZSA/IF9vZmZzZXQgKyByZWZlcmVuY2VSZWN0W19sZW5dICsgcG9wcGVyUmVjdFtfbGVuXSAtIF9vZmZzZXRNb2RpZmllclZhbHVlIC0gbm9ybWFsaXplZFRldGhlck9mZnNldFZhbHVlLmFsdEF4aXMgOiBfbWF4O1xuXG4gICAgdmFyIF9wcmV2ZW50ZWRPZmZzZXQgPSB0ZXRoZXIgJiYgaXNPcmlnaW5TaWRlID8gd2l0aGluTWF4Q2xhbXAoX3RldGhlck1pbiwgX29mZnNldCwgX3RldGhlck1heCkgOiB3aXRoaW4odGV0aGVyID8gX3RldGhlck1pbiA6IF9taW4sIF9vZmZzZXQsIHRldGhlciA/IF90ZXRoZXJNYXggOiBfbWF4KTtcblxuICAgIHBvcHBlck9mZnNldHNbYWx0QXhpc10gPSBfcHJldmVudGVkT2Zmc2V0O1xuICAgIGRhdGFbYWx0QXhpc10gPSBfcHJldmVudGVkT2Zmc2V0IC0gX29mZnNldDtcbiAgfVxuXG4gIHN0YXRlLm1vZGlmaWVyc0RhdGFbbmFtZV0gPSBkYXRhO1xufSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cblxuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAncHJldmVudE92ZXJmbG93JyxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgcGhhc2U6ICdtYWluJyxcbiAgZm46IHByZXZlbnRPdmVyZmxvdyxcbiAgcmVxdWlyZXNJZkV4aXN0czogWydvZmZzZXQnXVxufTsiLCAiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0SFRNTEVsZW1lbnRTY3JvbGwoZWxlbWVudCkge1xuICByZXR1cm4ge1xuICAgIHNjcm9sbExlZnQ6IGVsZW1lbnQuc2Nyb2xsTGVmdCxcbiAgICBzY3JvbGxUb3A6IGVsZW1lbnQuc2Nyb2xsVG9wXG4gIH07XG59IiwgImltcG9ydCBnZXRXaW5kb3dTY3JvbGwgZnJvbSBcIi4vZ2V0V2luZG93U2Nyb2xsLmpzXCI7XG5pbXBvcnQgZ2V0V2luZG93IGZyb20gXCIuL2dldFdpbmRvdy5qc1wiO1xuaW1wb3J0IHsgaXNIVE1MRWxlbWVudCB9IGZyb20gXCIuL2luc3RhbmNlT2YuanNcIjtcbmltcG9ydCBnZXRIVE1MRWxlbWVudFNjcm9sbCBmcm9tIFwiLi9nZXRIVE1MRWxlbWVudFNjcm9sbC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0Tm9kZVNjcm9sbChub2RlKSB7XG4gIGlmIChub2RlID09PSBnZXRXaW5kb3cobm9kZSkgfHwgIWlzSFRNTEVsZW1lbnQobm9kZSkpIHtcbiAgICByZXR1cm4gZ2V0V2luZG93U2Nyb2xsKG5vZGUpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBnZXRIVE1MRWxlbWVudFNjcm9sbChub2RlKTtcbiAgfVxufSIsICJpbXBvcnQgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGZyb20gXCIuL2dldEJvdW5kaW5nQ2xpZW50UmVjdC5qc1wiO1xuaW1wb3J0IGdldE5vZGVTY3JvbGwgZnJvbSBcIi4vZ2V0Tm9kZVNjcm9sbC5qc1wiO1xuaW1wb3J0IGdldE5vZGVOYW1lIGZyb20gXCIuL2dldE5vZGVOYW1lLmpzXCI7XG5pbXBvcnQgeyBpc0hUTUxFbGVtZW50IH0gZnJvbSBcIi4vaW5zdGFuY2VPZi5qc1wiO1xuaW1wb3J0IGdldFdpbmRvd1Njcm9sbEJhclggZnJvbSBcIi4vZ2V0V2luZG93U2Nyb2xsQmFyWC5qc1wiO1xuaW1wb3J0IGdldERvY3VtZW50RWxlbWVudCBmcm9tIFwiLi9nZXREb2N1bWVudEVsZW1lbnQuanNcIjtcbmltcG9ydCBpc1Njcm9sbFBhcmVudCBmcm9tIFwiLi9pc1Njcm9sbFBhcmVudC5qc1wiO1xuaW1wb3J0IHsgcm91bmQgfSBmcm9tIFwiLi4vdXRpbHMvbWF0aC5qc1wiO1xuXG5mdW5jdGlvbiBpc0VsZW1lbnRTY2FsZWQoZWxlbWVudCkge1xuICB2YXIgcmVjdCA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIHZhciBzY2FsZVggPSByb3VuZChyZWN0LndpZHRoKSAvIGVsZW1lbnQub2Zmc2V0V2lkdGggfHwgMTtcbiAgdmFyIHNjYWxlWSA9IHJvdW5kKHJlY3QuaGVpZ2h0KSAvIGVsZW1lbnQub2Zmc2V0SGVpZ2h0IHx8IDE7XG4gIHJldHVybiBzY2FsZVggIT09IDEgfHwgc2NhbGVZICE9PSAxO1xufSAvLyBSZXR1cm5zIHRoZSBjb21wb3NpdGUgcmVjdCBvZiBhbiBlbGVtZW50IHJlbGF0aXZlIHRvIGl0cyBvZmZzZXRQYXJlbnQuXG4vLyBDb21wb3NpdGUgbWVhbnMgaXQgdGFrZXMgaW50byBhY2NvdW50IHRyYW5zZm9ybXMgYXMgd2VsbCBhcyBsYXlvdXQuXG5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0Q29tcG9zaXRlUmVjdChlbGVtZW50T3JWaXJ0dWFsRWxlbWVudCwgb2Zmc2V0UGFyZW50LCBpc0ZpeGVkKSB7XG4gIGlmIChpc0ZpeGVkID09PSB2b2lkIDApIHtcbiAgICBpc0ZpeGVkID0gZmFsc2U7XG4gIH1cblxuICB2YXIgaXNPZmZzZXRQYXJlbnRBbkVsZW1lbnQgPSBpc0hUTUxFbGVtZW50KG9mZnNldFBhcmVudCk7XG4gIHZhciBvZmZzZXRQYXJlbnRJc1NjYWxlZCA9IGlzSFRNTEVsZW1lbnQob2Zmc2V0UGFyZW50KSAmJiBpc0VsZW1lbnRTY2FsZWQob2Zmc2V0UGFyZW50KTtcbiAgdmFyIGRvY3VtZW50RWxlbWVudCA9IGdldERvY3VtZW50RWxlbWVudChvZmZzZXRQYXJlbnQpO1xuICB2YXIgcmVjdCA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChlbGVtZW50T3JWaXJ0dWFsRWxlbWVudCwgb2Zmc2V0UGFyZW50SXNTY2FsZWQsIGlzRml4ZWQpO1xuICB2YXIgc2Nyb2xsID0ge1xuICAgIHNjcm9sbExlZnQ6IDAsXG4gICAgc2Nyb2xsVG9wOiAwXG4gIH07XG4gIHZhciBvZmZzZXRzID0ge1xuICAgIHg6IDAsXG4gICAgeTogMFxuICB9O1xuXG4gIGlmIChpc09mZnNldFBhcmVudEFuRWxlbWVudCB8fCAhaXNPZmZzZXRQYXJlbnRBbkVsZW1lbnQgJiYgIWlzRml4ZWQpIHtcbiAgICBpZiAoZ2V0Tm9kZU5hbWUob2Zmc2V0UGFyZW50KSAhPT0gJ2JvZHknIHx8IC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9wb3BwZXJqcy9wb3BwZXItY29yZS9pc3N1ZXMvMTA3OFxuICAgIGlzU2Nyb2xsUGFyZW50KGRvY3VtZW50RWxlbWVudCkpIHtcbiAgICAgIHNjcm9sbCA9IGdldE5vZGVTY3JvbGwob2Zmc2V0UGFyZW50KTtcbiAgICB9XG5cbiAgICBpZiAoaXNIVE1MRWxlbWVudChvZmZzZXRQYXJlbnQpKSB7XG4gICAgICBvZmZzZXRzID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KG9mZnNldFBhcmVudCwgdHJ1ZSk7XG4gICAgICBvZmZzZXRzLnggKz0gb2Zmc2V0UGFyZW50LmNsaWVudExlZnQ7XG4gICAgICBvZmZzZXRzLnkgKz0gb2Zmc2V0UGFyZW50LmNsaWVudFRvcDtcbiAgICB9IGVsc2UgaWYgKGRvY3VtZW50RWxlbWVudCkge1xuICAgICAgb2Zmc2V0cy54ID0gZ2V0V2luZG93U2Nyb2xsQmFyWChkb2N1bWVudEVsZW1lbnQpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgeDogcmVjdC5sZWZ0ICsgc2Nyb2xsLnNjcm9sbExlZnQgLSBvZmZzZXRzLngsXG4gICAgeTogcmVjdC50b3AgKyBzY3JvbGwuc2Nyb2xsVG9wIC0gb2Zmc2V0cy55LFxuICAgIHdpZHRoOiByZWN0LndpZHRoLFxuICAgIGhlaWdodDogcmVjdC5oZWlnaHRcbiAgfTtcbn0iLCAiaW1wb3J0IHsgbW9kaWZpZXJQaGFzZXMgfSBmcm9tIFwiLi4vZW51bXMuanNcIjsgLy8gc291cmNlOiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy80OTg3NTI1NVxuXG5mdW5jdGlvbiBvcmRlcihtb2RpZmllcnMpIHtcbiAgdmFyIG1hcCA9IG5ldyBNYXAoKTtcbiAgdmFyIHZpc2l0ZWQgPSBuZXcgU2V0KCk7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgbW9kaWZpZXJzLmZvckVhY2goZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgbWFwLnNldChtb2RpZmllci5uYW1lLCBtb2RpZmllcik7XG4gIH0pOyAvLyBPbiB2aXNpdGluZyBvYmplY3QsIGNoZWNrIGZvciBpdHMgZGVwZW5kZW5jaWVzIGFuZCB2aXNpdCB0aGVtIHJlY3Vyc2l2ZWx5XG5cbiAgZnVuY3Rpb24gc29ydChtb2RpZmllcikge1xuICAgIHZpc2l0ZWQuYWRkKG1vZGlmaWVyLm5hbWUpO1xuICAgIHZhciByZXF1aXJlcyA9IFtdLmNvbmNhdChtb2RpZmllci5yZXF1aXJlcyB8fCBbXSwgbW9kaWZpZXIucmVxdWlyZXNJZkV4aXN0cyB8fCBbXSk7XG4gICAgcmVxdWlyZXMuZm9yRWFjaChmdW5jdGlvbiAoZGVwKSB7XG4gICAgICBpZiAoIXZpc2l0ZWQuaGFzKGRlcCkpIHtcbiAgICAgICAgdmFyIGRlcE1vZGlmaWVyID0gbWFwLmdldChkZXApO1xuXG4gICAgICAgIGlmIChkZXBNb2RpZmllcikge1xuICAgICAgICAgIHNvcnQoZGVwTW9kaWZpZXIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmVzdWx0LnB1c2gobW9kaWZpZXIpO1xuICB9XG5cbiAgbW9kaWZpZXJzLmZvckVhY2goZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgaWYgKCF2aXNpdGVkLmhhcyhtb2RpZmllci5uYW1lKSkge1xuICAgICAgLy8gY2hlY2sgZm9yIHZpc2l0ZWQgb2JqZWN0XG4gICAgICBzb3J0KG1vZGlmaWVyKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBvcmRlck1vZGlmaWVycyhtb2RpZmllcnMpIHtcbiAgLy8gb3JkZXIgYmFzZWQgb24gZGVwZW5kZW5jaWVzXG4gIHZhciBvcmRlcmVkTW9kaWZpZXJzID0gb3JkZXIobW9kaWZpZXJzKTsgLy8gb3JkZXIgYmFzZWQgb24gcGhhc2VcblxuICByZXR1cm4gbW9kaWZpZXJQaGFzZXMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHBoYXNlKSB7XG4gICAgcmV0dXJuIGFjYy5jb25jYXQob3JkZXJlZE1vZGlmaWVycy5maWx0ZXIoZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgICByZXR1cm4gbW9kaWZpZXIucGhhc2UgPT09IHBoYXNlO1xuICAgIH0pKTtcbiAgfSwgW10pO1xufSIsICJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZWJvdW5jZShmbikge1xuICB2YXIgcGVuZGluZztcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXBlbmRpbmcpIHtcbiAgICAgIHBlbmRpbmcgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBwZW5kaW5nID0gdW5kZWZpbmVkO1xuICAgICAgICAgIHJlc29sdmUoZm4oKSk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBlbmRpbmc7XG4gIH07XG59IiwgImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZvcm1hdChzdHIpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIFtdLmNvbmNhdChhcmdzKS5yZWR1Y2UoZnVuY3Rpb24gKHAsIGMpIHtcbiAgICByZXR1cm4gcC5yZXBsYWNlKC8lcy8sIGMpO1xuICB9LCBzdHIpO1xufSIsICJpbXBvcnQgZm9ybWF0IGZyb20gXCIuL2Zvcm1hdC5qc1wiO1xuaW1wb3J0IHsgbW9kaWZpZXJQaGFzZXMgfSBmcm9tIFwiLi4vZW51bXMuanNcIjtcbnZhciBJTlZBTElEX01PRElGSUVSX0VSUk9SID0gJ1BvcHBlcjogbW9kaWZpZXIgXCIlc1wiIHByb3ZpZGVkIGFuIGludmFsaWQgJXMgcHJvcGVydHksIGV4cGVjdGVkICVzIGJ1dCBnb3QgJXMnO1xudmFyIE1JU1NJTkdfREVQRU5ERU5DWV9FUlJPUiA9ICdQb3BwZXI6IG1vZGlmaWVyIFwiJXNcIiByZXF1aXJlcyBcIiVzXCIsIGJ1dCBcIiVzXCIgbW9kaWZpZXIgaXMgbm90IGF2YWlsYWJsZSc7XG52YXIgVkFMSURfUFJPUEVSVElFUyA9IFsnbmFtZScsICdlbmFibGVkJywgJ3BoYXNlJywgJ2ZuJywgJ2VmZmVjdCcsICdyZXF1aXJlcycsICdvcHRpb25zJ107XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB2YWxpZGF0ZU1vZGlmaWVycyhtb2RpZmllcnMpIHtcbiAgbW9kaWZpZXJzLmZvckVhY2goZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgW10uY29uY2F0KE9iamVjdC5rZXlzKG1vZGlmaWVyKSwgVkFMSURfUFJPUEVSVElFUykgLy8gSUUxMS1jb21wYXRpYmxlIHJlcGxhY2VtZW50IGZvciBgbmV3IFNldChpdGVyYWJsZSlgXG4gICAgLmZpbHRlcihmdW5jdGlvbiAodmFsdWUsIGluZGV4LCBzZWxmKSB7XG4gICAgICByZXR1cm4gc2VsZi5pbmRleE9mKHZhbHVlKSA9PT0gaW5kZXg7XG4gICAgfSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICBzd2l0Y2ggKGtleSkge1xuICAgICAgICBjYXNlICduYW1lJzpcbiAgICAgICAgICBpZiAodHlwZW9mIG1vZGlmaWVyLm5hbWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGZvcm1hdChJTlZBTElEX01PRElGSUVSX0VSUk9SLCBTdHJpbmcobW9kaWZpZXIubmFtZSksICdcIm5hbWVcIicsICdcInN0cmluZ1wiJywgXCJcXFwiXCIgKyBTdHJpbmcobW9kaWZpZXIubmFtZSkgKyBcIlxcXCJcIikpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ2VuYWJsZWQnOlxuICAgICAgICAgIGlmICh0eXBlb2YgbW9kaWZpZXIuZW5hYmxlZCAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGZvcm1hdChJTlZBTElEX01PRElGSUVSX0VSUk9SLCBtb2RpZmllci5uYW1lLCAnXCJlbmFibGVkXCInLCAnXCJib29sZWFuXCInLCBcIlxcXCJcIiArIFN0cmluZyhtb2RpZmllci5lbmFibGVkKSArIFwiXFxcIlwiKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAncGhhc2UnOlxuICAgICAgICAgIGlmIChtb2RpZmllclBoYXNlcy5pbmRleE9mKG1vZGlmaWVyLnBoYXNlKSA8IDApIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZm9ybWF0KElOVkFMSURfTU9ESUZJRVJfRVJST1IsIG1vZGlmaWVyLm5hbWUsICdcInBoYXNlXCInLCBcImVpdGhlciBcIiArIG1vZGlmaWVyUGhhc2VzLmpvaW4oJywgJyksIFwiXFxcIlwiICsgU3RyaW5nKG1vZGlmaWVyLnBoYXNlKSArIFwiXFxcIlwiKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnZm4nOlxuICAgICAgICAgIGlmICh0eXBlb2YgbW9kaWZpZXIuZm4gIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZm9ybWF0KElOVkFMSURfTU9ESUZJRVJfRVJST1IsIG1vZGlmaWVyLm5hbWUsICdcImZuXCInLCAnXCJmdW5jdGlvblwiJywgXCJcXFwiXCIgKyBTdHJpbmcobW9kaWZpZXIuZm4pICsgXCJcXFwiXCIpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdlZmZlY3QnOlxuICAgICAgICAgIGlmIChtb2RpZmllci5lZmZlY3QgIT0gbnVsbCAmJiB0eXBlb2YgbW9kaWZpZXIuZWZmZWN0ICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGZvcm1hdChJTlZBTElEX01PRElGSUVSX0VSUk9SLCBtb2RpZmllci5uYW1lLCAnXCJlZmZlY3RcIicsICdcImZ1bmN0aW9uXCInLCBcIlxcXCJcIiArIFN0cmluZyhtb2RpZmllci5mbikgKyBcIlxcXCJcIikpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ3JlcXVpcmVzJzpcbiAgICAgICAgICBpZiAobW9kaWZpZXIucmVxdWlyZXMgIT0gbnVsbCAmJiAhQXJyYXkuaXNBcnJheShtb2RpZmllci5yZXF1aXJlcykpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZm9ybWF0KElOVkFMSURfTU9ESUZJRVJfRVJST1IsIG1vZGlmaWVyLm5hbWUsICdcInJlcXVpcmVzXCInLCAnXCJhcnJheVwiJywgXCJcXFwiXCIgKyBTdHJpbmcobW9kaWZpZXIucmVxdWlyZXMpICsgXCJcXFwiXCIpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdyZXF1aXJlc0lmRXhpc3RzJzpcbiAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkobW9kaWZpZXIucmVxdWlyZXNJZkV4aXN0cykpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZm9ybWF0KElOVkFMSURfTU9ESUZJRVJfRVJST1IsIG1vZGlmaWVyLm5hbWUsICdcInJlcXVpcmVzSWZFeGlzdHNcIicsICdcImFycmF5XCInLCBcIlxcXCJcIiArIFN0cmluZyhtb2RpZmllci5yZXF1aXJlc0lmRXhpc3RzKSArIFwiXFxcIlwiKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnb3B0aW9ucyc6XG4gICAgICAgIGNhc2UgJ2RhdGEnOlxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgY29uc29sZS5lcnJvcihcIlBvcHBlckpTOiBhbiBpbnZhbGlkIHByb3BlcnR5IGhhcyBiZWVuIHByb3ZpZGVkIHRvIHRoZSBcXFwiXCIgKyBtb2RpZmllci5uYW1lICsgXCJcXFwiIG1vZGlmaWVyLCB2YWxpZCBwcm9wZXJ0aWVzIGFyZSBcIiArIFZBTElEX1BST1BFUlRJRVMubWFwKGZ1bmN0aW9uIChzKSB7XG4gICAgICAgICAgICByZXR1cm4gXCJcXFwiXCIgKyBzICsgXCJcXFwiXCI7XG4gICAgICAgICAgfSkuam9pbignLCAnKSArIFwiOyBidXQgXFxcIlwiICsga2V5ICsgXCJcXFwiIHdhcyBwcm92aWRlZC5cIik7XG4gICAgICB9XG5cbiAgICAgIG1vZGlmaWVyLnJlcXVpcmVzICYmIG1vZGlmaWVyLnJlcXVpcmVzLmZvckVhY2goZnVuY3Rpb24gKHJlcXVpcmVtZW50KSB7XG4gICAgICAgIGlmIChtb2RpZmllcnMuZmluZChmdW5jdGlvbiAobW9kKSB7XG4gICAgICAgICAgcmV0dXJuIG1vZC5uYW1lID09PSByZXF1aXJlbWVudDtcbiAgICAgICAgfSkgPT0gbnVsbCkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZm9ybWF0KE1JU1NJTkdfREVQRU5ERU5DWV9FUlJPUiwgU3RyaW5nKG1vZGlmaWVyLm5hbWUpLCByZXF1aXJlbWVudCwgcmVxdWlyZW1lbnQpKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH0pO1xufSIsICJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB1bmlxdWVCeShhcnIsIGZuKSB7XG4gIHZhciBpZGVudGlmaWVycyA9IG5ldyBTZXQoKTtcbiAgcmV0dXJuIGFyci5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICB2YXIgaWRlbnRpZmllciA9IGZuKGl0ZW0pO1xuXG4gICAgaWYgKCFpZGVudGlmaWVycy5oYXMoaWRlbnRpZmllcikpIHtcbiAgICAgIGlkZW50aWZpZXJzLmFkZChpZGVudGlmaWVyKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSk7XG59IiwgImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1lcmdlQnlOYW1lKG1vZGlmaWVycykge1xuICB2YXIgbWVyZ2VkID0gbW9kaWZpZXJzLnJlZHVjZShmdW5jdGlvbiAobWVyZ2VkLCBjdXJyZW50KSB7XG4gICAgdmFyIGV4aXN0aW5nID0gbWVyZ2VkW2N1cnJlbnQubmFtZV07XG4gICAgbWVyZ2VkW2N1cnJlbnQubmFtZV0gPSBleGlzdGluZyA/IE9iamVjdC5hc3NpZ24oe30sIGV4aXN0aW5nLCBjdXJyZW50LCB7XG4gICAgICBvcHRpb25zOiBPYmplY3QuYXNzaWduKHt9LCBleGlzdGluZy5vcHRpb25zLCBjdXJyZW50Lm9wdGlvbnMpLFxuICAgICAgZGF0YTogT2JqZWN0LmFzc2lnbih7fSwgZXhpc3RpbmcuZGF0YSwgY3VycmVudC5kYXRhKVxuICAgIH0pIDogY3VycmVudDtcbiAgICByZXR1cm4gbWVyZ2VkO1xuICB9LCB7fSk7IC8vIElFMTEgZG9lcyBub3Qgc3VwcG9ydCBPYmplY3QudmFsdWVzXG5cbiAgcmV0dXJuIE9iamVjdC5rZXlzKG1lcmdlZCkubWFwKGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gbWVyZ2VkW2tleV07XG4gIH0pO1xufSIsICJpbXBvcnQgZ2V0Q29tcG9zaXRlUmVjdCBmcm9tIFwiLi9kb20tdXRpbHMvZ2V0Q29tcG9zaXRlUmVjdC5qc1wiO1xuaW1wb3J0IGdldExheW91dFJlY3QgZnJvbSBcIi4vZG9tLXV0aWxzL2dldExheW91dFJlY3QuanNcIjtcbmltcG9ydCBsaXN0U2Nyb2xsUGFyZW50cyBmcm9tIFwiLi9kb20tdXRpbHMvbGlzdFNjcm9sbFBhcmVudHMuanNcIjtcbmltcG9ydCBnZXRPZmZzZXRQYXJlbnQgZnJvbSBcIi4vZG9tLXV0aWxzL2dldE9mZnNldFBhcmVudC5qc1wiO1xuaW1wb3J0IGdldENvbXB1dGVkU3R5bGUgZnJvbSBcIi4vZG9tLXV0aWxzL2dldENvbXB1dGVkU3R5bGUuanNcIjtcbmltcG9ydCBvcmRlck1vZGlmaWVycyBmcm9tIFwiLi91dGlscy9vcmRlck1vZGlmaWVycy5qc1wiO1xuaW1wb3J0IGRlYm91bmNlIGZyb20gXCIuL3V0aWxzL2RlYm91bmNlLmpzXCI7XG5pbXBvcnQgdmFsaWRhdGVNb2RpZmllcnMgZnJvbSBcIi4vdXRpbHMvdmFsaWRhdGVNb2RpZmllcnMuanNcIjtcbmltcG9ydCB1bmlxdWVCeSBmcm9tIFwiLi91dGlscy91bmlxdWVCeS5qc1wiO1xuaW1wb3J0IGdldEJhc2VQbGFjZW1lbnQgZnJvbSBcIi4vdXRpbHMvZ2V0QmFzZVBsYWNlbWVudC5qc1wiO1xuaW1wb3J0IG1lcmdlQnlOYW1lIGZyb20gXCIuL3V0aWxzL21lcmdlQnlOYW1lLmpzXCI7XG5pbXBvcnQgZGV0ZWN0T3ZlcmZsb3cgZnJvbSBcIi4vdXRpbHMvZGV0ZWN0T3ZlcmZsb3cuanNcIjtcbmltcG9ydCB7IGlzRWxlbWVudCB9IGZyb20gXCIuL2RvbS11dGlscy9pbnN0YW5jZU9mLmpzXCI7XG5pbXBvcnQgeyBhdXRvIH0gZnJvbSBcIi4vZW51bXMuanNcIjtcbnZhciBJTlZBTElEX0VMRU1FTlRfRVJST1IgPSAnUG9wcGVyOiBJbnZhbGlkIHJlZmVyZW5jZSBvciBwb3BwZXIgYXJndW1lbnQgcHJvdmlkZWQuIFRoZXkgbXVzdCBiZSBlaXRoZXIgYSBET00gZWxlbWVudCBvciB2aXJ0dWFsIGVsZW1lbnQuJztcbnZhciBJTkZJTklURV9MT09QX0VSUk9SID0gJ1BvcHBlcjogQW4gaW5maW5pdGUgbG9vcCBpbiB0aGUgbW9kaWZpZXJzIGN5Y2xlIGhhcyBiZWVuIGRldGVjdGVkISBUaGUgY3ljbGUgaGFzIGJlZW4gaW50ZXJydXB0ZWQgdG8gcHJldmVudCBhIGJyb3dzZXIgY3Jhc2guJztcbnZhciBERUZBVUxUX09QVElPTlMgPSB7XG4gIHBsYWNlbWVudDogJ2JvdHRvbScsXG4gIG1vZGlmaWVyczogW10sXG4gIHN0cmF0ZWd5OiAnYWJzb2x1dGUnXG59O1xuXG5mdW5jdGlvbiBhcmVWYWxpZEVsZW1lbnRzKCkge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuICFhcmdzLnNvbWUoZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICByZXR1cm4gIShlbGVtZW50ICYmIHR5cGVvZiBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCA9PT0gJ2Z1bmN0aW9uJyk7XG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcG9wcGVyR2VuZXJhdG9yKGdlbmVyYXRvck9wdGlvbnMpIHtcbiAgaWYgKGdlbmVyYXRvck9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIGdlbmVyYXRvck9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIHZhciBfZ2VuZXJhdG9yT3B0aW9ucyA9IGdlbmVyYXRvck9wdGlvbnMsXG4gICAgICBfZ2VuZXJhdG9yT3B0aW9ucyRkZWYgPSBfZ2VuZXJhdG9yT3B0aW9ucy5kZWZhdWx0TW9kaWZpZXJzLFxuICAgICAgZGVmYXVsdE1vZGlmaWVycyA9IF9nZW5lcmF0b3JPcHRpb25zJGRlZiA9PT0gdm9pZCAwID8gW10gOiBfZ2VuZXJhdG9yT3B0aW9ucyRkZWYsXG4gICAgICBfZ2VuZXJhdG9yT3B0aW9ucyRkZWYyID0gX2dlbmVyYXRvck9wdGlvbnMuZGVmYXVsdE9wdGlvbnMsXG4gICAgICBkZWZhdWx0T3B0aW9ucyA9IF9nZW5lcmF0b3JPcHRpb25zJGRlZjIgPT09IHZvaWQgMCA/IERFRkFVTFRfT1BUSU9OUyA6IF9nZW5lcmF0b3JPcHRpb25zJGRlZjI7XG4gIHJldHVybiBmdW5jdGlvbiBjcmVhdGVQb3BwZXIocmVmZXJlbmNlLCBwb3BwZXIsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0gZGVmYXVsdE9wdGlvbnM7XG4gICAgfVxuXG4gICAgdmFyIHN0YXRlID0ge1xuICAgICAgcGxhY2VtZW50OiAnYm90dG9tJyxcbiAgICAgIG9yZGVyZWRNb2RpZmllcnM6IFtdLFxuICAgICAgb3B0aW9uczogT2JqZWN0LmFzc2lnbih7fSwgREVGQVVMVF9PUFRJT05TLCBkZWZhdWx0T3B0aW9ucyksXG4gICAgICBtb2RpZmllcnNEYXRhOiB7fSxcbiAgICAgIGVsZW1lbnRzOiB7XG4gICAgICAgIHJlZmVyZW5jZTogcmVmZXJlbmNlLFxuICAgICAgICBwb3BwZXI6IHBvcHBlclxuICAgICAgfSxcbiAgICAgIGF0dHJpYnV0ZXM6IHt9LFxuICAgICAgc3R5bGVzOiB7fVxuICAgIH07XG4gICAgdmFyIGVmZmVjdENsZWFudXBGbnMgPSBbXTtcbiAgICB2YXIgaXNEZXN0cm95ZWQgPSBmYWxzZTtcbiAgICB2YXIgaW5zdGFuY2UgPSB7XG4gICAgICBzdGF0ZTogc3RhdGUsXG4gICAgICBzZXRPcHRpb25zOiBmdW5jdGlvbiBzZXRPcHRpb25zKHNldE9wdGlvbnNBY3Rpb24pIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB0eXBlb2Ygc2V0T3B0aW9uc0FjdGlvbiA9PT0gJ2Z1bmN0aW9uJyA/IHNldE9wdGlvbnNBY3Rpb24oc3RhdGUub3B0aW9ucykgOiBzZXRPcHRpb25zQWN0aW9uO1xuICAgICAgICBjbGVhbnVwTW9kaWZpZXJFZmZlY3RzKCk7XG4gICAgICAgIHN0YXRlLm9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0T3B0aW9ucywgc3RhdGUub3B0aW9ucywgb3B0aW9ucyk7XG4gICAgICAgIHN0YXRlLnNjcm9sbFBhcmVudHMgPSB7XG4gICAgICAgICAgcmVmZXJlbmNlOiBpc0VsZW1lbnQocmVmZXJlbmNlKSA/IGxpc3RTY3JvbGxQYXJlbnRzKHJlZmVyZW5jZSkgOiByZWZlcmVuY2UuY29udGV4dEVsZW1lbnQgPyBsaXN0U2Nyb2xsUGFyZW50cyhyZWZlcmVuY2UuY29udGV4dEVsZW1lbnQpIDogW10sXG4gICAgICAgICAgcG9wcGVyOiBsaXN0U2Nyb2xsUGFyZW50cyhwb3BwZXIpXG4gICAgICAgIH07IC8vIE9yZGVycyB0aGUgbW9kaWZpZXJzIGJhc2VkIG9uIHRoZWlyIGRlcGVuZGVuY2llcyBhbmQgYHBoYXNlYFxuICAgICAgICAvLyBwcm9wZXJ0aWVzXG5cbiAgICAgICAgdmFyIG9yZGVyZWRNb2RpZmllcnMgPSBvcmRlck1vZGlmaWVycyhtZXJnZUJ5TmFtZShbXS5jb25jYXQoZGVmYXVsdE1vZGlmaWVycywgc3RhdGUub3B0aW9ucy5tb2RpZmllcnMpKSk7IC8vIFN0cmlwIG91dCBkaXNhYmxlZCBtb2RpZmllcnNcblxuICAgICAgICBzdGF0ZS5vcmRlcmVkTW9kaWZpZXJzID0gb3JkZXJlZE1vZGlmaWVycy5maWx0ZXIoZnVuY3Rpb24gKG0pIHtcbiAgICAgICAgICByZXR1cm4gbS5lbmFibGVkO1xuICAgICAgICB9KTsgLy8gVmFsaWRhdGUgdGhlIHByb3ZpZGVkIG1vZGlmaWVycyBzbyB0aGF0IHRoZSBjb25zdW1lciB3aWxsIGdldCB3YXJuZWRcbiAgICAgICAgLy8gaWYgb25lIG9mIHRoZSBtb2RpZmllcnMgaXMgaW52YWxpZCBmb3IgYW55IHJlYXNvblxuXG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgICB2YXIgbW9kaWZpZXJzID0gdW5pcXVlQnkoW10uY29uY2F0KG9yZGVyZWRNb2RpZmllcnMsIHN0YXRlLm9wdGlvbnMubW9kaWZpZXJzKSwgZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgICAgICAgIHZhciBuYW1lID0gX3JlZi5uYW1lO1xuICAgICAgICAgICAgcmV0dXJuIG5hbWU7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgdmFsaWRhdGVNb2RpZmllcnMobW9kaWZpZXJzKTtcblxuICAgICAgICAgIGlmIChnZXRCYXNlUGxhY2VtZW50KHN0YXRlLm9wdGlvbnMucGxhY2VtZW50KSA9PT0gYXV0bykge1xuICAgICAgICAgICAgdmFyIGZsaXBNb2RpZmllciA9IHN0YXRlLm9yZGVyZWRNb2RpZmllcnMuZmluZChmdW5jdGlvbiAoX3JlZjIpIHtcbiAgICAgICAgICAgICAgdmFyIG5hbWUgPSBfcmVmMi5uYW1lO1xuICAgICAgICAgICAgICByZXR1cm4gbmFtZSA9PT0gJ2ZsaXAnO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmICghZmxpcE1vZGlmaWVyKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoWydQb3BwZXI6IFwiYXV0b1wiIHBsYWNlbWVudHMgcmVxdWlyZSB0aGUgXCJmbGlwXCIgbW9kaWZpZXIgYmUnLCAncHJlc2VudCBhbmQgZW5hYmxlZCB0byB3b3JrLiddLmpvaW4oJyAnKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIF9nZXRDb21wdXRlZFN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShwb3BwZXIpLFxuICAgICAgICAgICAgICBtYXJnaW5Ub3AgPSBfZ2V0Q29tcHV0ZWRTdHlsZS5tYXJnaW5Ub3AsXG4gICAgICAgICAgICAgIG1hcmdpblJpZ2h0ID0gX2dldENvbXB1dGVkU3R5bGUubWFyZ2luUmlnaHQsXG4gICAgICAgICAgICAgIG1hcmdpbkJvdHRvbSA9IF9nZXRDb21wdXRlZFN0eWxlLm1hcmdpbkJvdHRvbSxcbiAgICAgICAgICAgICAgbWFyZ2luTGVmdCA9IF9nZXRDb21wdXRlZFN0eWxlLm1hcmdpbkxlZnQ7IC8vIFdlIG5vIGxvbmdlciB0YWtlIGludG8gYWNjb3VudCBgbWFyZ2luc2Agb24gdGhlIHBvcHBlciwgYW5kIGl0IGNhblxuICAgICAgICAgIC8vIGNhdXNlIGJ1Z3Mgd2l0aCBwb3NpdGlvbmluZywgc28gd2UnbGwgd2FybiB0aGUgY29uc3VtZXJcblxuXG4gICAgICAgICAgaWYgKFttYXJnaW5Ub3AsIG1hcmdpblJpZ2h0LCBtYXJnaW5Cb3R0b20sIG1hcmdpbkxlZnRdLnNvbWUoZnVuY3Rpb24gKG1hcmdpbikge1xuICAgICAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQobWFyZ2luKTtcbiAgICAgICAgICB9KSkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKFsnUG9wcGVyOiBDU1MgXCJtYXJnaW5cIiBzdHlsZXMgY2Fubm90IGJlIHVzZWQgdG8gYXBwbHkgcGFkZGluZycsICdiZXR3ZWVuIHRoZSBwb3BwZXIgYW5kIGl0cyByZWZlcmVuY2UgZWxlbWVudCBvciBib3VuZGFyeS4nLCAnVG8gcmVwbGljYXRlIG1hcmdpbiwgdXNlIHRoZSBgb2Zmc2V0YCBtb2RpZmllciwgYXMgd2VsbCBhcycsICd0aGUgYHBhZGRpbmdgIG9wdGlvbiBpbiB0aGUgYHByZXZlbnRPdmVyZmxvd2AgYW5kIGBmbGlwYCcsICdtb2RpZmllcnMuJ10uam9pbignICcpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBydW5Nb2RpZmllckVmZmVjdHMoKTtcbiAgICAgICAgcmV0dXJuIGluc3RhbmNlLnVwZGF0ZSgpO1xuICAgICAgfSxcbiAgICAgIC8vIFN5bmMgdXBkYXRlIFx1MjAxMyBpdCB3aWxsIGFsd2F5cyBiZSBleGVjdXRlZCwgZXZlbiBpZiBub3QgbmVjZXNzYXJ5LiBUaGlzXG4gICAgICAvLyBpcyB1c2VmdWwgZm9yIGxvdyBmcmVxdWVuY3kgdXBkYXRlcyB3aGVyZSBzeW5jIGJlaGF2aW9yIHNpbXBsaWZpZXMgdGhlXG4gICAgICAvLyBsb2dpYy5cbiAgICAgIC8vIEZvciBoaWdoIGZyZXF1ZW5jeSB1cGRhdGVzIChlLmcuIGByZXNpemVgIGFuZCBgc2Nyb2xsYCBldmVudHMpLCBhbHdheXNcbiAgICAgIC8vIHByZWZlciB0aGUgYXN5bmMgUG9wcGVyI3VwZGF0ZSBtZXRob2RcbiAgICAgIGZvcmNlVXBkYXRlOiBmdW5jdGlvbiBmb3JjZVVwZGF0ZSgpIHtcbiAgICAgICAgaWYgKGlzRGVzdHJveWVkKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIF9zdGF0ZSRlbGVtZW50cyA9IHN0YXRlLmVsZW1lbnRzLFxuICAgICAgICAgICAgcmVmZXJlbmNlID0gX3N0YXRlJGVsZW1lbnRzLnJlZmVyZW5jZSxcbiAgICAgICAgICAgIHBvcHBlciA9IF9zdGF0ZSRlbGVtZW50cy5wb3BwZXI7IC8vIERvbid0IHByb2NlZWQgaWYgYHJlZmVyZW5jZWAgb3IgYHBvcHBlcmAgYXJlIG5vdCB2YWxpZCBlbGVtZW50c1xuICAgICAgICAvLyBhbnltb3JlXG5cbiAgICAgICAgaWYgKCFhcmVWYWxpZEVsZW1lbnRzKHJlZmVyZW5jZSwgcG9wcGVyKSkge1xuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoSU5WQUxJRF9FTEVNRU5UX0VSUk9SKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gLy8gU3RvcmUgdGhlIHJlZmVyZW5jZSBhbmQgcG9wcGVyIHJlY3RzIHRvIGJlIHJlYWQgYnkgbW9kaWZpZXJzXG5cblxuICAgICAgICBzdGF0ZS5yZWN0cyA9IHtcbiAgICAgICAgICByZWZlcmVuY2U6IGdldENvbXBvc2l0ZVJlY3QocmVmZXJlbmNlLCBnZXRPZmZzZXRQYXJlbnQocG9wcGVyKSwgc3RhdGUub3B0aW9ucy5zdHJhdGVneSA9PT0gJ2ZpeGVkJyksXG4gICAgICAgICAgcG9wcGVyOiBnZXRMYXlvdXRSZWN0KHBvcHBlcilcbiAgICAgICAgfTsgLy8gTW9kaWZpZXJzIGhhdmUgdGhlIGFiaWxpdHkgdG8gcmVzZXQgdGhlIGN1cnJlbnQgdXBkYXRlIGN5Y2xlLiBUaGVcbiAgICAgICAgLy8gbW9zdCBjb21tb24gdXNlIGNhc2UgZm9yIHRoaXMgaXMgdGhlIGBmbGlwYCBtb2RpZmllciBjaGFuZ2luZyB0aGVcbiAgICAgICAgLy8gcGxhY2VtZW50LCB3aGljaCB0aGVuIG5lZWRzIHRvIHJlLXJ1biBhbGwgdGhlIG1vZGlmaWVycywgYmVjYXVzZSB0aGVcbiAgICAgICAgLy8gbG9naWMgd2FzIHByZXZpb3VzbHkgcmFuIGZvciB0aGUgcHJldmlvdXMgcGxhY2VtZW50IGFuZCBpcyB0aGVyZWZvcmVcbiAgICAgICAgLy8gc3RhbGUvaW5jb3JyZWN0XG5cbiAgICAgICAgc3RhdGUucmVzZXQgPSBmYWxzZTtcbiAgICAgICAgc3RhdGUucGxhY2VtZW50ID0gc3RhdGUub3B0aW9ucy5wbGFjZW1lbnQ7IC8vIE9uIGVhY2ggdXBkYXRlIGN5Y2xlLCB0aGUgYG1vZGlmaWVyc0RhdGFgIHByb3BlcnR5IGZvciBlYWNoIG1vZGlmaWVyXG4gICAgICAgIC8vIGlzIGZpbGxlZCB3aXRoIHRoZSBpbml0aWFsIGRhdGEgc3BlY2lmaWVkIGJ5IHRoZSBtb2RpZmllci4gVGhpcyBtZWFuc1xuICAgICAgICAvLyBpdCBkb2Vzbid0IHBlcnNpc3QgYW5kIGlzIGZyZXNoIG9uIGVhY2ggdXBkYXRlLlxuICAgICAgICAvLyBUbyBlbnN1cmUgcGVyc2lzdGVudCBkYXRhLCB1c2UgYCR7bmFtZX0jcGVyc2lzdGVudGBcblxuICAgICAgICBzdGF0ZS5vcmRlcmVkTW9kaWZpZXJzLmZvckVhY2goZnVuY3Rpb24gKG1vZGlmaWVyKSB7XG4gICAgICAgICAgcmV0dXJuIHN0YXRlLm1vZGlmaWVyc0RhdGFbbW9kaWZpZXIubmFtZV0gPSBPYmplY3QuYXNzaWduKHt9LCBtb2RpZmllci5kYXRhKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHZhciBfX2RlYnVnX2xvb3BzX18gPSAwO1xuXG4gICAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBzdGF0ZS5vcmRlcmVkTW9kaWZpZXJzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgICAgIF9fZGVidWdfbG9vcHNfXyArPSAxO1xuXG4gICAgICAgICAgICBpZiAoX19kZWJ1Z19sb29wc19fID4gMTAwKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoSU5GSU5JVEVfTE9PUF9FUlJPUik7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChzdGF0ZS5yZXNldCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgc3RhdGUucmVzZXQgPSBmYWxzZTtcbiAgICAgICAgICAgIGluZGV4ID0gLTE7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgX3N0YXRlJG9yZGVyZWRNb2RpZmllID0gc3RhdGUub3JkZXJlZE1vZGlmaWVyc1tpbmRleF0sXG4gICAgICAgICAgICAgIGZuID0gX3N0YXRlJG9yZGVyZWRNb2RpZmllLmZuLFxuICAgICAgICAgICAgICBfc3RhdGUkb3JkZXJlZE1vZGlmaWUyID0gX3N0YXRlJG9yZGVyZWRNb2RpZmllLm9wdGlvbnMsXG4gICAgICAgICAgICAgIF9vcHRpb25zID0gX3N0YXRlJG9yZGVyZWRNb2RpZmllMiA9PT0gdm9pZCAwID8ge30gOiBfc3RhdGUkb3JkZXJlZE1vZGlmaWUyLFxuICAgICAgICAgICAgICBuYW1lID0gX3N0YXRlJG9yZGVyZWRNb2RpZmllLm5hbWU7XG5cbiAgICAgICAgICBpZiAodHlwZW9mIGZuID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBzdGF0ZSA9IGZuKHtcbiAgICAgICAgICAgICAgc3RhdGU6IHN0YXRlLFxuICAgICAgICAgICAgICBvcHRpb25zOiBfb3B0aW9ucyxcbiAgICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgICAgaW5zdGFuY2U6IGluc3RhbmNlXG4gICAgICAgICAgICB9KSB8fCBzdGF0ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAvLyBBc3luYyBhbmQgb3B0aW1pc3RpY2FsbHkgb3B0aW1pemVkIHVwZGF0ZSBcdTIwMTMgaXQgd2lsbCBub3QgYmUgZXhlY3V0ZWQgaWZcbiAgICAgIC8vIG5vdCBuZWNlc3NhcnkgKGRlYm91bmNlZCB0byBydW4gYXQgbW9zdCBvbmNlLXBlci10aWNrKVxuICAgICAgdXBkYXRlOiBkZWJvdW5jZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICAgIGluc3RhbmNlLmZvcmNlVXBkYXRlKCk7XG4gICAgICAgICAgcmVzb2x2ZShzdGF0ZSk7XG4gICAgICAgIH0pO1xuICAgICAgfSksXG4gICAgICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgICBjbGVhbnVwTW9kaWZpZXJFZmZlY3RzKCk7XG4gICAgICAgIGlzRGVzdHJveWVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgaWYgKCFhcmVWYWxpZEVsZW1lbnRzKHJlZmVyZW5jZSwgcG9wcGVyKSkge1xuICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICAgICBjb25zb2xlLmVycm9yKElOVkFMSURfRUxFTUVOVF9FUlJPUik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBpbnN0YW5jZTtcbiAgICB9XG5cbiAgICBpbnN0YW5jZS5zZXRPcHRpb25zKG9wdGlvbnMpLnRoZW4oZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgICBpZiAoIWlzRGVzdHJveWVkICYmIG9wdGlvbnMub25GaXJzdFVwZGF0ZSkge1xuICAgICAgICBvcHRpb25zLm9uRmlyc3RVcGRhdGUoc3RhdGUpO1xuICAgICAgfVxuICAgIH0pOyAvLyBNb2RpZmllcnMgaGF2ZSB0aGUgYWJpbGl0eSB0byBleGVjdXRlIGFyYml0cmFyeSBjb2RlIGJlZm9yZSB0aGUgZmlyc3RcbiAgICAvLyB1cGRhdGUgY3ljbGUgcnVucy4gVGhleSB3aWxsIGJlIGV4ZWN1dGVkIGluIHRoZSBzYW1lIG9yZGVyIGFzIHRoZSB1cGRhdGVcbiAgICAvLyBjeWNsZS4gVGhpcyBpcyB1c2VmdWwgd2hlbiBhIG1vZGlmaWVyIGFkZHMgc29tZSBwZXJzaXN0ZW50IGRhdGEgdGhhdFxuICAgIC8vIG90aGVyIG1vZGlmaWVycyBuZWVkIHRvIHVzZSwgYnV0IHRoZSBtb2RpZmllciBpcyBydW4gYWZ0ZXIgdGhlIGRlcGVuZGVudFxuICAgIC8vIG9uZS5cblxuICAgIGZ1bmN0aW9uIHJ1bk1vZGlmaWVyRWZmZWN0cygpIHtcbiAgICAgIHN0YXRlLm9yZGVyZWRNb2RpZmllcnMuZm9yRWFjaChmdW5jdGlvbiAoX3JlZjMpIHtcbiAgICAgICAgdmFyIG5hbWUgPSBfcmVmMy5uYW1lLFxuICAgICAgICAgICAgX3JlZjMkb3B0aW9ucyA9IF9yZWYzLm9wdGlvbnMsXG4gICAgICAgICAgICBvcHRpb25zID0gX3JlZjMkb3B0aW9ucyA9PT0gdm9pZCAwID8ge30gOiBfcmVmMyRvcHRpb25zLFxuICAgICAgICAgICAgZWZmZWN0ID0gX3JlZjMuZWZmZWN0O1xuXG4gICAgICAgIGlmICh0eXBlb2YgZWZmZWN0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgdmFyIGNsZWFudXBGbiA9IGVmZmVjdCh7XG4gICAgICAgICAgICBzdGF0ZTogc3RhdGUsXG4gICAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgICAgaW5zdGFuY2U6IGluc3RhbmNlLFxuICAgICAgICAgICAgb3B0aW9uczogb3B0aW9uc1xuICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgdmFyIG5vb3BGbiA9IGZ1bmN0aW9uIG5vb3BGbigpIHt9O1xuXG4gICAgICAgICAgZWZmZWN0Q2xlYW51cEZucy5wdXNoKGNsZWFudXBGbiB8fCBub29wRm4pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjbGVhbnVwTW9kaWZpZXJFZmZlY3RzKCkge1xuICAgICAgZWZmZWN0Q2xlYW51cEZucy5mb3JFYWNoKGZ1bmN0aW9uIChmbikge1xuICAgICAgICByZXR1cm4gZm4oKTtcbiAgICAgIH0pO1xuICAgICAgZWZmZWN0Q2xlYW51cEZucyA9IFtdO1xuICAgIH1cblxuICAgIHJldHVybiBpbnN0YW5jZTtcbiAgfTtcbn1cbmV4cG9ydCB2YXIgY3JlYXRlUG9wcGVyID0gLyojX19QVVJFX18qL3BvcHBlckdlbmVyYXRvcigpOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cbmV4cG9ydCB7IGRldGVjdE92ZXJmbG93IH07IiwgImltcG9ydCB7IHBvcHBlckdlbmVyYXRvciwgZGV0ZWN0T3ZlcmZsb3cgfSBmcm9tIFwiLi9jcmVhdGVQb3BwZXIuanNcIjtcbmltcG9ydCBldmVudExpc3RlbmVycyBmcm9tIFwiLi9tb2RpZmllcnMvZXZlbnRMaXN0ZW5lcnMuanNcIjtcbmltcG9ydCBwb3BwZXJPZmZzZXRzIGZyb20gXCIuL21vZGlmaWVycy9wb3BwZXJPZmZzZXRzLmpzXCI7XG5pbXBvcnQgY29tcHV0ZVN0eWxlcyBmcm9tIFwiLi9tb2RpZmllcnMvY29tcHV0ZVN0eWxlcy5qc1wiO1xuaW1wb3J0IGFwcGx5U3R5bGVzIGZyb20gXCIuL21vZGlmaWVycy9hcHBseVN0eWxlcy5qc1wiO1xuaW1wb3J0IG9mZnNldCBmcm9tIFwiLi9tb2RpZmllcnMvb2Zmc2V0LmpzXCI7XG5pbXBvcnQgZmxpcCBmcm9tIFwiLi9tb2RpZmllcnMvZmxpcC5qc1wiO1xuaW1wb3J0IHByZXZlbnRPdmVyZmxvdyBmcm9tIFwiLi9tb2RpZmllcnMvcHJldmVudE92ZXJmbG93LmpzXCI7XG5pbXBvcnQgYXJyb3cgZnJvbSBcIi4vbW9kaWZpZXJzL2Fycm93LmpzXCI7XG5pbXBvcnQgaGlkZSBmcm9tIFwiLi9tb2RpZmllcnMvaGlkZS5qc1wiO1xudmFyIGRlZmF1bHRNb2RpZmllcnMgPSBbZXZlbnRMaXN0ZW5lcnMsIHBvcHBlck9mZnNldHMsIGNvbXB1dGVTdHlsZXMsIGFwcGx5U3R5bGVzLCBvZmZzZXQsIGZsaXAsIHByZXZlbnRPdmVyZmxvdywgYXJyb3csIGhpZGVdO1xudmFyIGNyZWF0ZVBvcHBlciA9IC8qI19fUFVSRV9fKi9wb3BwZXJHZW5lcmF0b3Ioe1xuICBkZWZhdWx0TW9kaWZpZXJzOiBkZWZhdWx0TW9kaWZpZXJzXG59KTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5leHBvcnQgeyBjcmVhdGVQb3BwZXIsIHBvcHBlckdlbmVyYXRvciwgZGVmYXVsdE1vZGlmaWVycywgZGV0ZWN0T3ZlcmZsb3cgfTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5leHBvcnQgeyBjcmVhdGVQb3BwZXIgYXMgY3JlYXRlUG9wcGVyTGl0ZSB9IGZyb20gXCIuL3BvcHBlci1saXRlLmpzXCI7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuZXhwb3J0ICogZnJvbSBcIi4vbW9kaWZpZXJzL2luZGV4LmpzXCI7IiwgImltcG9ydCB0eXBlIHtcbiAgICBDb25kaXRpb24sXG4gICAgQ3JlYXR1cmVTdGF0ZSxcbiAgICBIb21lYnJld0NyZWF0dXJlLFxuICAgIFNSRE1vbnN0ZXJcbn0gZnJvbSBcIkB0eXBlc1wiO1xuaW1wb3J0IHsgQ29uZGl0aW9ucywgWFBfUEVSX0NSIH0gZnJvbSBcIi5cIjtcbmltcG9ydCB7IERFRkFVTFRfVU5ERUZJTkVEIH0gZnJvbSBcIi4vY29uc3RhbnRzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRJZCgpIHtcbiAgICByZXR1cm4gXCJJRF94eXh5eHl4eXh5eHlcIi5yZXBsYWNlKC9beHldL2csIGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIHZhciByID0gKE1hdGgucmFuZG9tKCkgKiAxNikgfCAwLFxuICAgICAgICAgICAgdiA9IGMgPT0gXCJ4XCIgPyByIDogKHIgJiAweDMpIHwgMHg4O1xuICAgICAgICByZXR1cm4gdi50b1N0cmluZygxNik7XG4gICAgfSk7XG59XG5cbmV4cG9ydCBjbGFzcyBDcmVhdHVyZSB7XG4gICAgYWN0aXZlOiBib29sZWFuO1xuICAgIG5hbWU6IHN0cmluZztcbiAgICBtb2RpZmllcjogbnVtYmVyO1xuICAgIGhwOiBudW1iZXI7XG4gICAgdGVtcDogbnVtYmVyO1xuICAgIGFjOiBudW1iZXI7XG4gICAgbm90ZTogc3RyaW5nO1xuICAgIGVuYWJsZWQ6IGJvb2xlYW4gPSB0cnVlO1xuICAgIGhpZGRlbjogYm9vbGVhbiA9IGZhbHNlO1xuICAgIG1heDogbnVtYmVyO1xuICAgIGxldmVsOiBudW1iZXI7XG4gICAgcGxheWVyOiBib29sZWFuO1xuICAgIHN0YXR1czogU2V0PENvbmRpdGlvbj4gPSBuZXcgU2V0KCk7XG4gICAgbWFya2VyOiBzdHJpbmc7XG4gICAgcHJpdmF0ZSBfaW5pdGlhdGl2ZTogbnVtYmVyO1xuICAgIHNvdXJjZTogc3RyaW5nIHwgc3RyaW5nW107XG4gICAgaWQ6IHN0cmluZztcbiAgICB4cDogbnVtYmVyO1xuICAgIHZpZXdpbmc6IGJvb2xlYW4gPSBmYWxzZTtcbiAgICBudW1iZXIgPSAwO1xuICAgIGRpc3BsYXk6IHN0cmluZztcbiAgICBmcmllbmRseTogYm9vbGVhbiA9IGZhbHNlO1xuICAgIFwic3RhdGJsb2NrLWxpbmtcIjogc3RyaW5nO1xuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBjcmVhdHVyZTogSG9tZWJyZXdDcmVhdHVyZSwgaW5pdGlhdGl2ZTogbnVtYmVyID0gMCkge1xuICAgICAgICB0aGlzLm5hbWUgPSBjcmVhdHVyZS5uYW1lO1xuICAgICAgICB0aGlzLmRpc3BsYXkgPSBjcmVhdHVyZS5kaXNwbGF5O1xuICAgICAgICB0aGlzLl9pbml0aWF0aXZlID1cbiAgICAgICAgICAgIFwiaW5pdGlhdGl2ZVwiIGluIGNyZWF0dXJlXG4gICAgICAgICAgICAgICAgPyAoY3JlYXR1cmUgYXMgQ3JlYXR1cmUpLmluaXRpYXRpdmVcbiAgICAgICAgICAgICAgICA6IE51bWJlcihpbml0aWF0aXZlID8/IDApO1xuICAgICAgICB0aGlzLm1vZGlmaWVyID0gTnVtYmVyKGNyZWF0dXJlLm1vZGlmaWVyID8/IDApO1xuXG4gICAgICAgIHRoaXMubWF4ID0gY3JlYXR1cmUuaHAgPyBOdW1iZXIoY3JlYXR1cmUuaHApIDogdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmFjID0gY3JlYXR1cmUuYWMgPyBOdW1iZXIoY3JlYXR1cmUuYWMpIDogdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLm5vdGUgPSBjcmVhdHVyZS5ub3RlO1xuICAgICAgICB0aGlzLmxldmVsID0gY3JlYXR1cmUubGV2ZWw7XG4gICAgICAgIHRoaXMucGxheWVyID0gY3JlYXR1cmUucGxheWVyO1xuXG4gICAgICAgIHRoaXMubWFya2VyID0gY3JlYXR1cmUubWFya2VyO1xuXG4gICAgICAgIHRoaXMuaHAgPSB0aGlzLm1heDtcbiAgICAgICAgdGhpcy50ZW1wID0gMDtcbiAgICAgICAgdGhpcy5zb3VyY2UgPSBjcmVhdHVyZS5zb3VyY2U7XG5cbiAgICAgICAgdGhpcy5mcmllbmRseSA9IGNyZWF0dXJlLmZyaWVuZGx5ID8/IHRoaXMuZnJpZW5kbHk7XG5cbiAgICAgICAgdGhpcy5hY3RpdmUgPSBjcmVhdHVyZS5hY3RpdmU7XG5cbiAgICAgICAgdGhpcy5oaWRkZW4gPSBjcmVhdHVyZS5oaWRkZW4gPz8gZmFsc2U7XG5cbiAgICAgICAgaWYgKFwieHBcIiBpbiBjcmVhdHVyZSkge1xuICAgICAgICAgICAgdGhpcy54cCA9IGNyZWF0dXJlLnhwO1xuICAgICAgICB9IGVsc2UgaWYgKFwiY3JcIiBpbiBjcmVhdHVyZSkge1xuICAgICAgICAgICAgdGhpcy54cCA9IFhQX1BFUl9DUltgJHtjcmVhdHVyZS5jcn1gXTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmlkID0gY3JlYXR1cmUuaWQgPz8gZ2V0SWQoKTtcbiAgICAgICAgaWYgKFwic3RhdGJsb2NrLWxpbmtcIiBpbiBjcmVhdHVyZSkge1xuICAgICAgICAgICAgdGhpc1tcInN0YXRibG9jay1saW5rXCJdID0gKGNyZWF0dXJlIGFzIGFueSlbXG4gICAgICAgICAgICAgICAgXCJzdGF0YmxvY2stbGlua1wiXG4gICAgICAgICAgICBdIGFzIHN0cmluZztcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXQgaHBEaXNwbGF5KCkge1xuICAgICAgICBpZiAodGhpcy5tYXgpIHtcbiAgICAgICAgICAgIGNvbnN0IHRlbXBNb2RzID1cbiAgICAgICAgICAgICAgICB0aGlzLnRlbXAgPiAwXG4gICAgICAgICAgICAgICAgICAgID8gYGFyaWEtbGFiZWw9XCJUZW1wIEhQOiAke3RoaXMudGVtcH1cIiBzdHlsZT1cImZvbnQtd2VpZ2h0OmJvbGRcImBcbiAgICAgICAgICAgICAgICAgICAgOiBcIlwiO1xuICAgICAgICAgICAgcmV0dXJuIGBcbiAgICAgICAgICAgICAgICA8c3BhbiAke3RlbXBNb2RzfT4ke3RoaXMuaHAgKyB0aGlzLnRlbXB9PC9zcGFuPjxzcGFuPi8ke1xuICAgICAgICAgICAgICAgIHRoaXMubWF4XG4gICAgICAgICAgICB9PC9zcGFuPlxuICAgICAgICAgICAgYDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gREVGQVVMVF9VTkRFRklORUQ7XG4gICAgfVxuXG4gICAgZ2V0IGluaXRpYXRpdmUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbml0aWF0aXZlICsgdGhpcy5tb2RpZmllcjtcbiAgICB9XG4gICAgc2V0IGluaXRpYXRpdmUoeDogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMuX2luaXRpYXRpdmUgPSBOdW1iZXIoeCkgLSB0aGlzLm1vZGlmaWVyO1xuICAgIH1cblxuICAgIGdldE5hbWUoKSB7XG4gICAgICAgIGxldCBuYW1lID0gW3RoaXMuZGlzcGxheSA/PyB0aGlzLm5hbWVdO1xuICAgICAgICAvKiBpZiAodGhpcy5kaXNwbGF5KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kaXNwbGF5O1xuICAgICAgICB9ICovXG4gICAgICAgIGlmICh0aGlzLm51bWJlciA+IDApIHtcbiAgICAgICAgICAgIG5hbWUucHVzaChgJHt0aGlzLm51bWJlcn1gKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmFtZS5qb2luKFwiIFwiKTtcbiAgICB9XG5cbiAgICAqW1N5bWJvbC5pdGVyYXRvcl0oKSB7XG4gICAgICAgIHlpZWxkIHRoaXMubmFtZTtcbiAgICAgICAgeWllbGQgdGhpcy5pbml0aWF0aXZlO1xuICAgICAgICB5aWVsZCB0aGlzLm1vZGlmaWVyO1xuICAgICAgICB5aWVsZCB0aGlzLm1heDtcbiAgICAgICAgeWllbGQgdGhpcy5hYztcbiAgICAgICAgeWllbGQgdGhpcy5ub3RlO1xuICAgICAgICB5aWVsZCB0aGlzLmlkO1xuICAgICAgICB5aWVsZCB0aGlzLm1hcmtlcjtcbiAgICAgICAgeWllbGQgdGhpcy54cDtcbiAgICAgICAgeWllbGQgdGhpcy5oaWRkZW47XG4gICAgfVxuXG4gICAgc3RhdGljIG5ldyhjcmVhdHVyZTogQ3JlYXR1cmUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDcmVhdHVyZShcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAuLi5jcmVhdHVyZSxcbiAgICAgICAgICAgICAgICBpZDogZ2V0SWQoKVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNyZWF0dXJlLl9pbml0aWF0aXZlXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgc3RhdGljIGZyb20oY3JlYXR1cmU6IEhvbWVicmV3Q3JlYXR1cmUgfCBTUkRNb25zdGVyKSB7XG4gICAgICAgIGNvbnN0IG1vZGlmaWVyID1cbiAgICAgICAgICAgIFwibW9kaWZpZXJcIiBpbiBjcmVhdHVyZVxuICAgICAgICAgICAgICAgID8gY3JlYXR1cmUubW9kaWZpZXJcbiAgICAgICAgICAgICAgICA6IE1hdGguZmxvb3IoXG4gICAgICAgICAgICAgICAgICAgICAgKChcInN0YXRzXCIgaW4gY3JlYXR1cmUgJiYgY3JlYXR1cmUuc3RhdHMubGVuZ3RoID4gMVxuICAgICAgICAgICAgICAgICAgICAgICAgICA/IGNyZWF0dXJlLnN0YXRzWzFdXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDogMTApIC1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgMTApIC9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgMlxuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIG5ldyBDcmVhdHVyZSh7XG4gICAgICAgICAgICAuLi5jcmVhdHVyZSxcbiAgICAgICAgICAgIG1vZGlmaWVyOiBtb2RpZmllclxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICB1cGRhdGUoY3JlYXR1cmU6IEhvbWVicmV3Q3JlYXR1cmUpIHtcbiAgICAgICAgdGhpcy5uYW1lID0gY3JlYXR1cmUubmFtZTtcbiAgICAgICAgdGhpcy5tb2RpZmllciA9IE51bWJlcihjcmVhdHVyZS5tb2RpZmllciA/PyAwKTtcblxuICAgICAgICB0aGlzLm1heCA9IGNyZWF0dXJlLmhwID8gTnVtYmVyKGNyZWF0dXJlLmhwKSA6IHVuZGVmaW5lZDtcblxuICAgICAgICBpZiAodGhpcy5ocCA+IHRoaXMubWF4KSB0aGlzLmhwID0gdGhpcy5tYXg7XG5cbiAgICAgICAgdGhpcy5hYyA9IGNyZWF0dXJlLmFjID8gTnVtYmVyKGNyZWF0dXJlLmFjKSA6IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5ub3RlID0gY3JlYXR1cmUubm90ZTtcbiAgICAgICAgdGhpcy5sZXZlbCA9IGNyZWF0dXJlLmxldmVsO1xuICAgICAgICB0aGlzLnBsYXllciA9IGNyZWF0dXJlLnBsYXllcjtcblxuICAgICAgICB0aGlzLm1hcmtlciA9IGNyZWF0dXJlLm1hcmtlcjtcbiAgICAgICAgdGhpcy5zb3VyY2UgPSBjcmVhdHVyZS5zb3VyY2U7XG4gICAgfVxuXG4gICAgdG9Qcm9wZXJ0aWVzKCkge1xuICAgICAgICByZXR1cm4geyAuLi50aGlzIH07XG4gICAgfVxuXG4gICAgdG9KU09OKCk6IENyZWF0dXJlU3RhdGUge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgICAgICAgaW5pdGlhdGl2ZTogdGhpcy5pbml0aWF0aXZlIC0gdGhpcy5tb2RpZmllcixcbiAgICAgICAgICAgIG1vZGlmaWVyOiB0aGlzLm1vZGlmaWVyLFxuICAgICAgICAgICAgaHA6IHRoaXMubWF4LFxuICAgICAgICAgICAgYWM6IHRoaXMuYWMsXG4gICAgICAgICAgICBub3RlOiB0aGlzLm5vdGUsXG4gICAgICAgICAgICBpZDogdGhpcy5pZCxcbiAgICAgICAgICAgIG1hcmtlcjogdGhpcy5tYXJrZXIsXG4gICAgICAgICAgICBjdXJyZW50SFA6IHRoaXMuaHAsXG4gICAgICAgICAgICB0ZW1wSFA6IHRoaXMudGVtcCxcbiAgICAgICAgICAgIHN0YXR1czogQXJyYXkuZnJvbSh0aGlzLnN0YXR1cykubWFwKChjKSA9PiBjLm5hbWUpLFxuICAgICAgICAgICAgZW5hYmxlZDogdGhpcy5lbmFibGVkLFxuICAgICAgICAgICAgbGV2ZWw6IHRoaXMubGV2ZWwsXG4gICAgICAgICAgICBwbGF5ZXI6IHRoaXMucGxheWVyLFxuICAgICAgICAgICAgeHA6IHRoaXMueHAsXG4gICAgICAgICAgICBhY3RpdmU6IHRoaXMuYWN0aXZlLFxuICAgICAgICAgICAgaGlkZGVuOiB0aGlzLmhpZGRlbixcbiAgICAgICAgICAgIGZyaWVuZGx5OiB0aGlzLmZyaWVuZGx5LFxuICAgICAgICAgICAgXCJzdGF0YmxvY2stbGlua1wiOiB0aGlzW1wic3RhdGJsb2NrLWxpbmtcIl1cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZnJvbUpTT04oc3RhdGU6IENyZWF0dXJlU3RhdGUpIHtcbiAgICAgICAgY29uc3QgY3JlYXR1cmUgPSBuZXcgQ3JlYXR1cmUoc3RhdGUsIHN0YXRlLmluaXRpYXRpdmUpO1xuICAgICAgICBjcmVhdHVyZS5lbmFibGVkID0gc3RhdGUuZW5hYmxlZDtcblxuICAgICAgICBjcmVhdHVyZS50ZW1wID0gc3RhdGUudGVtcEhQID8gc3RhdGUudGVtcEhQIDogMDtcbiAgICAgICAgY3JlYXR1cmUuaHAgPSBzdGF0ZS5jdXJyZW50SFA7XG4gICAgICAgIGxldCBzdGF0dXNlczogQ29uZGl0aW9uW10gPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCBzdGF0dXMgb2Ygc3RhdGUuc3RhdHVzKSB7XG4gICAgICAgICAgICBjb25zdCBleGlzdGluZyA9IENvbmRpdGlvbnMuZmluZCgoeyBuYW1lIH0pID0+IHN0YXR1cyA9PSBuYW1lKTtcbiAgICAgICAgICAgIGlmIChleGlzdGluZykge1xuICAgICAgICAgICAgICAgIHN0YXR1c2VzLnB1c2goZXhpc3RpbmcpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzdGF0dXNlcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogc3RhdHVzLFxuICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogbnVsbFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNyZWF0dXJlLnN0YXR1cyA9IG5ldyBTZXQoc3RhdHVzZXMpO1xuICAgICAgICBjcmVhdHVyZS5hY3RpdmUgPSBzdGF0ZS5hY3RpdmU7XG4gICAgICAgIHJldHVybiBjcmVhdHVyZTtcbiAgICB9XG59XG4iLCAiZnVuY3Rpb24gbm9vcCgpIHsgfVxuY29uc3QgaWRlbnRpdHkgPSB4ID0+IHg7XG5mdW5jdGlvbiBhc3NpZ24odGFyLCBzcmMpIHtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgZm9yIChjb25zdCBrIGluIHNyYylcbiAgICAgICAgdGFyW2tdID0gc3JjW2tdO1xuICAgIHJldHVybiB0YXI7XG59XG5mdW5jdGlvbiBpc19wcm9taXNlKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHZhbHVlLnRoZW4gPT09ICdmdW5jdGlvbic7XG59XG5mdW5jdGlvbiBhZGRfbG9jYXRpb24oZWxlbWVudCwgZmlsZSwgbGluZSwgY29sdW1uLCBjaGFyKSB7XG4gICAgZWxlbWVudC5fX3N2ZWx0ZV9tZXRhID0ge1xuICAgICAgICBsb2M6IHsgZmlsZSwgbGluZSwgY29sdW1uLCBjaGFyIH1cbiAgICB9O1xufVxuZnVuY3Rpb24gcnVuKGZuKSB7XG4gICAgcmV0dXJuIGZuKCk7XG59XG5mdW5jdGlvbiBibGFua19vYmplY3QoKSB7XG4gICAgcmV0dXJuIE9iamVjdC5jcmVhdGUobnVsbCk7XG59XG5mdW5jdGlvbiBydW5fYWxsKGZucykge1xuICAgIGZucy5mb3JFYWNoKHJ1bik7XG59XG5mdW5jdGlvbiBpc19mdW5jdGlvbih0aGluZykge1xuICAgIHJldHVybiB0eXBlb2YgdGhpbmcgPT09ICdmdW5jdGlvbic7XG59XG5mdW5jdGlvbiBzYWZlX25vdF9lcXVhbChhLCBiKSB7XG4gICAgcmV0dXJuIGEgIT0gYSA/IGIgPT0gYiA6IGEgIT09IGIgfHwgKChhICYmIHR5cGVvZiBhID09PSAnb2JqZWN0JykgfHwgdHlwZW9mIGEgPT09ICdmdW5jdGlvbicpO1xufVxubGV0IHNyY191cmxfZXF1YWxfYW5jaG9yO1xuZnVuY3Rpb24gc3JjX3VybF9lcXVhbChlbGVtZW50X3NyYywgdXJsKSB7XG4gICAgaWYgKCFzcmNfdXJsX2VxdWFsX2FuY2hvcikge1xuICAgICAgICBzcmNfdXJsX2VxdWFsX2FuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICB9XG4gICAgc3JjX3VybF9lcXVhbF9hbmNob3IuaHJlZiA9IHVybDtcbiAgICByZXR1cm4gZWxlbWVudF9zcmMgPT09IHNyY191cmxfZXF1YWxfYW5jaG9yLmhyZWY7XG59XG5mdW5jdGlvbiBub3RfZXF1YWwoYSwgYikge1xuICAgIHJldHVybiBhICE9IGEgPyBiID09IGIgOiBhICE9PSBiO1xufVxuZnVuY3Rpb24gaXNfZW1wdHkob2JqKSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKG9iaikubGVuZ3RoID09PSAwO1xufVxuZnVuY3Rpb24gdmFsaWRhdGVfc3RvcmUoc3RvcmUsIG5hbWUpIHtcbiAgICBpZiAoc3RvcmUgIT0gbnVsbCAmJiB0eXBlb2Ygc3RvcmUuc3Vic2NyaWJlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgJyR7bmFtZX0nIGlzIG5vdCBhIHN0b3JlIHdpdGggYSAnc3Vic2NyaWJlJyBtZXRob2RgKTtcbiAgICB9XG59XG5mdW5jdGlvbiBzdWJzY3JpYmUoc3RvcmUsIC4uLmNhbGxiYWNrcykge1xuICAgIGlmIChzdG9yZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBub29wO1xuICAgIH1cbiAgICBjb25zdCB1bnN1YiA9IHN0b3JlLnN1YnNjcmliZSguLi5jYWxsYmFja3MpO1xuICAgIHJldHVybiB1bnN1Yi51bnN1YnNjcmliZSA/ICgpID0+IHVuc3ViLnVuc3Vic2NyaWJlKCkgOiB1bnN1Yjtcbn1cbmZ1bmN0aW9uIGdldF9zdG9yZV92YWx1ZShzdG9yZSkge1xuICAgIGxldCB2YWx1ZTtcbiAgICBzdWJzY3JpYmUoc3RvcmUsIF8gPT4gdmFsdWUgPSBfKSgpO1xuICAgIHJldHVybiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIGNvbXBvbmVudF9zdWJzY3JpYmUoY29tcG9uZW50LCBzdG9yZSwgY2FsbGJhY2spIHtcbiAgICBjb21wb25lbnQuJCQub25fZGVzdHJveS5wdXNoKHN1YnNjcmliZShzdG9yZSwgY2FsbGJhY2spKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9zbG90KGRlZmluaXRpb24sIGN0eCwgJCRzY29wZSwgZm4pIHtcbiAgICBpZiAoZGVmaW5pdGlvbikge1xuICAgICAgICBjb25zdCBzbG90X2N0eCA9IGdldF9zbG90X2NvbnRleHQoZGVmaW5pdGlvbiwgY3R4LCAkJHNjb3BlLCBmbik7XG4gICAgICAgIHJldHVybiBkZWZpbml0aW9uWzBdKHNsb3RfY3R4KTtcbiAgICB9XG59XG5mdW5jdGlvbiBnZXRfc2xvdF9jb250ZXh0KGRlZmluaXRpb24sIGN0eCwgJCRzY29wZSwgZm4pIHtcbiAgICByZXR1cm4gZGVmaW5pdGlvblsxXSAmJiBmblxuICAgICAgICA/IGFzc2lnbigkJHNjb3BlLmN0eC5zbGljZSgpLCBkZWZpbml0aW9uWzFdKGZuKGN0eCkpKVxuICAgICAgICA6ICQkc2NvcGUuY3R4O1xufVxuZnVuY3Rpb24gZ2V0X3Nsb3RfY2hhbmdlcyhkZWZpbml0aW9uLCAkJHNjb3BlLCBkaXJ0eSwgZm4pIHtcbiAgICBpZiAoZGVmaW5pdGlvblsyXSAmJiBmbikge1xuICAgICAgICBjb25zdCBsZXRzID0gZGVmaW5pdGlvblsyXShmbihkaXJ0eSkpO1xuICAgICAgICBpZiAoJCRzY29wZS5kaXJ0eSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gbGV0cztcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGxldHMgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICBjb25zdCBtZXJnZWQgPSBbXTtcbiAgICAgICAgICAgIGNvbnN0IGxlbiA9IE1hdGgubWF4KCQkc2NvcGUuZGlydHkubGVuZ3RoLCBsZXRzLmxlbmd0aCk7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgbWVyZ2VkW2ldID0gJCRzY29wZS5kaXJ0eVtpXSB8IGxldHNbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbWVyZ2VkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAkJHNjb3BlLmRpcnR5IHwgbGV0cztcbiAgICB9XG4gICAgcmV0dXJuICQkc2NvcGUuZGlydHk7XG59XG5mdW5jdGlvbiB1cGRhdGVfc2xvdF9iYXNlKHNsb3QsIHNsb3RfZGVmaW5pdGlvbiwgY3R4LCAkJHNjb3BlLCBzbG90X2NoYW5nZXMsIGdldF9zbG90X2NvbnRleHRfZm4pIHtcbiAgICBpZiAoc2xvdF9jaGFuZ2VzKSB7XG4gICAgICAgIGNvbnN0IHNsb3RfY29udGV4dCA9IGdldF9zbG90X2NvbnRleHQoc2xvdF9kZWZpbml0aW9uLCBjdHgsICQkc2NvcGUsIGdldF9zbG90X2NvbnRleHRfZm4pO1xuICAgICAgICBzbG90LnAoc2xvdF9jb250ZXh0LCBzbG90X2NoYW5nZXMpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHVwZGF0ZV9zbG90KHNsb3QsIHNsb3RfZGVmaW5pdGlvbiwgY3R4LCAkJHNjb3BlLCBkaXJ0eSwgZ2V0X3Nsb3RfY2hhbmdlc19mbiwgZ2V0X3Nsb3RfY29udGV4dF9mbikge1xuICAgIGNvbnN0IHNsb3RfY2hhbmdlcyA9IGdldF9zbG90X2NoYW5nZXMoc2xvdF9kZWZpbml0aW9uLCAkJHNjb3BlLCBkaXJ0eSwgZ2V0X3Nsb3RfY2hhbmdlc19mbik7XG4gICAgdXBkYXRlX3Nsb3RfYmFzZShzbG90LCBzbG90X2RlZmluaXRpb24sIGN0eCwgJCRzY29wZSwgc2xvdF9jaGFuZ2VzLCBnZXRfc2xvdF9jb250ZXh0X2ZuKTtcbn1cbmZ1bmN0aW9uIGdldF9hbGxfZGlydHlfZnJvbV9zY29wZSgkJHNjb3BlKSB7XG4gICAgaWYgKCQkc2NvcGUuY3R4Lmxlbmd0aCA+IDMyKSB7XG4gICAgICAgIGNvbnN0IGRpcnR5ID0gW107XG4gICAgICAgIGNvbnN0IGxlbmd0aCA9ICQkc2NvcGUuY3R4Lmxlbmd0aCAvIDMyO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBkaXJ0eVtpXSA9IC0xO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkaXJ0eTtcbiAgICB9XG4gICAgcmV0dXJuIC0xO1xufVxuZnVuY3Rpb24gZXhjbHVkZV9pbnRlcm5hbF9wcm9wcyhwcm9wcykge1xuICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xuICAgIGZvciAoY29uc3QgayBpbiBwcm9wcylcbiAgICAgICAgaWYgKGtbMF0gIT09ICckJylcbiAgICAgICAgICAgIHJlc3VsdFtrXSA9IHByb3BzW2tdO1xuICAgIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBjb21wdXRlX3Jlc3RfcHJvcHMocHJvcHMsIGtleXMpIHtcbiAgICBjb25zdCByZXN0ID0ge307XG4gICAga2V5cyA9IG5ldyBTZXQoa2V5cyk7XG4gICAgZm9yIChjb25zdCBrIGluIHByb3BzKVxuICAgICAgICBpZiAoIWtleXMuaGFzKGspICYmIGtbMF0gIT09ICckJylcbiAgICAgICAgICAgIHJlc3Rba10gPSBwcm9wc1trXTtcbiAgICByZXR1cm4gcmVzdDtcbn1cbmZ1bmN0aW9uIGNvbXB1dGVfc2xvdHMoc2xvdHMpIHtcbiAgICBjb25zdCByZXN1bHQgPSB7fTtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBzbG90cykge1xuICAgICAgICByZXN1bHRba2V5XSA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBvbmNlKGZuKSB7XG4gICAgbGV0IHJhbiA9IGZhbHNlO1xuICAgIHJldHVybiBmdW5jdGlvbiAoLi4uYXJncykge1xuICAgICAgICBpZiAocmFuKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICByYW4gPSB0cnVlO1xuICAgICAgICBmbi5jYWxsKHRoaXMsIC4uLmFyZ3MpO1xuICAgIH07XG59XG5mdW5jdGlvbiBudWxsX3RvX2VtcHR5KHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlID09IG51bGwgPyAnJyA6IHZhbHVlO1xufVxuZnVuY3Rpb24gc2V0X3N0b3JlX3ZhbHVlKHN0b3JlLCByZXQsIHZhbHVlKSB7XG4gICAgc3RvcmUuc2V0KHZhbHVlKTtcbiAgICByZXR1cm4gcmV0O1xufVxuY29uc3QgaGFzX3Byb3AgPSAob2JqLCBwcm9wKSA9PiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKTtcbmZ1bmN0aW9uIGFjdGlvbl9kZXN0cm95ZXIoYWN0aW9uX3Jlc3VsdCkge1xuICAgIHJldHVybiBhY3Rpb25fcmVzdWx0ICYmIGlzX2Z1bmN0aW9uKGFjdGlvbl9yZXN1bHQuZGVzdHJveSkgPyBhY3Rpb25fcmVzdWx0LmRlc3Ryb3kgOiBub29wO1xufVxuXG5jb25zdCBpc19jbGllbnQgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJztcbmxldCBub3cgPSBpc19jbGllbnRcbiAgICA/ICgpID0+IHdpbmRvdy5wZXJmb3JtYW5jZS5ub3coKVxuICAgIDogKCkgPT4gRGF0ZS5ub3coKTtcbmxldCByYWYgPSBpc19jbGllbnQgPyBjYiA9PiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoY2IpIDogbm9vcDtcbi8vIHVzZWQgaW50ZXJuYWxseSBmb3IgdGVzdGluZ1xuZnVuY3Rpb24gc2V0X25vdyhmbikge1xuICAgIG5vdyA9IGZuO1xufVxuZnVuY3Rpb24gc2V0X3JhZihmbikge1xuICAgIHJhZiA9IGZuO1xufVxuXG5jb25zdCB0YXNrcyA9IG5ldyBTZXQoKTtcbmZ1bmN0aW9uIHJ1bl90YXNrcyhub3cpIHtcbiAgICB0YXNrcy5mb3JFYWNoKHRhc2sgPT4ge1xuICAgICAgICBpZiAoIXRhc2suYyhub3cpKSB7XG4gICAgICAgICAgICB0YXNrcy5kZWxldGUodGFzayk7XG4gICAgICAgICAgICB0YXNrLmYoKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGlmICh0YXNrcy5zaXplICE9PSAwKVxuICAgICAgICByYWYocnVuX3Rhc2tzKTtcbn1cbi8qKlxuICogRm9yIHRlc3RpbmcgcHVycG9zZXMgb25seSFcbiAqL1xuZnVuY3Rpb24gY2xlYXJfbG9vcHMoKSB7XG4gICAgdGFza3MuY2xlYXIoKTtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyB0YXNrIHRoYXQgcnVucyBvbiBlYWNoIHJhZiBmcmFtZVxuICogdW50aWwgaXQgcmV0dXJucyBhIGZhbHN5IHZhbHVlIG9yIGlzIGFib3J0ZWRcbiAqL1xuZnVuY3Rpb24gbG9vcChjYWxsYmFjaykge1xuICAgIGxldCB0YXNrO1xuICAgIGlmICh0YXNrcy5zaXplID09PSAwKVxuICAgICAgICByYWYocnVuX3Rhc2tzKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBwcm9taXNlOiBuZXcgUHJvbWlzZShmdWxmaWxsID0+IHtcbiAgICAgICAgICAgIHRhc2tzLmFkZCh0YXNrID0geyBjOiBjYWxsYmFjaywgZjogZnVsZmlsbCB9KTtcbiAgICAgICAgfSksXG4gICAgICAgIGFib3J0KCkge1xuICAgICAgICAgICAgdGFza3MuZGVsZXRlKHRhc2spO1xuICAgICAgICB9XG4gICAgfTtcbn1cblxuLy8gVHJhY2sgd2hpY2ggbm9kZXMgYXJlIGNsYWltZWQgZHVyaW5nIGh5ZHJhdGlvbi4gVW5jbGFpbWVkIG5vZGVzIGNhbiB0aGVuIGJlIHJlbW92ZWQgZnJvbSB0aGUgRE9NXG4vLyBhdCB0aGUgZW5kIG9mIGh5ZHJhdGlvbiB3aXRob3V0IHRvdWNoaW5nIHRoZSByZW1haW5pbmcgbm9kZXMuXG5sZXQgaXNfaHlkcmF0aW5nID0gZmFsc2U7XG5mdW5jdGlvbiBzdGFydF9oeWRyYXRpbmcoKSB7XG4gICAgaXNfaHlkcmF0aW5nID0gdHJ1ZTtcbn1cbmZ1bmN0aW9uIGVuZF9oeWRyYXRpbmcoKSB7XG4gICAgaXNfaHlkcmF0aW5nID0gZmFsc2U7XG59XG5mdW5jdGlvbiB1cHBlcl9ib3VuZChsb3csIGhpZ2gsIGtleSwgdmFsdWUpIHtcbiAgICAvLyBSZXR1cm4gZmlyc3QgaW5kZXggb2YgdmFsdWUgbGFyZ2VyIHRoYW4gaW5wdXQgdmFsdWUgaW4gdGhlIHJhbmdlIFtsb3csIGhpZ2gpXG4gICAgd2hpbGUgKGxvdyA8IGhpZ2gpIHtcbiAgICAgICAgY29uc3QgbWlkID0gbG93ICsgKChoaWdoIC0gbG93KSA+PiAxKTtcbiAgICAgICAgaWYgKGtleShtaWQpIDw9IHZhbHVlKSB7XG4gICAgICAgICAgICBsb3cgPSBtaWQgKyAxO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaGlnaCA9IG1pZDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbG93O1xufVxuZnVuY3Rpb24gaW5pdF9oeWRyYXRlKHRhcmdldCkge1xuICAgIGlmICh0YXJnZXQuaHlkcmF0ZV9pbml0KVxuICAgICAgICByZXR1cm47XG4gICAgdGFyZ2V0Lmh5ZHJhdGVfaW5pdCA9IHRydWU7XG4gICAgLy8gV2Uga25vdyB0aGF0IGFsbCBjaGlsZHJlbiBoYXZlIGNsYWltX29yZGVyIHZhbHVlcyBzaW5jZSB0aGUgdW5jbGFpbWVkIGhhdmUgYmVlbiBkZXRhY2hlZCBpZiB0YXJnZXQgaXMgbm90IDxoZWFkPlxuICAgIGxldCBjaGlsZHJlbiA9IHRhcmdldC5jaGlsZE5vZGVzO1xuICAgIC8vIElmIHRhcmdldCBpcyA8aGVhZD4sIHRoZXJlIG1heSBiZSBjaGlsZHJlbiB3aXRob3V0IGNsYWltX29yZGVyXG4gICAgaWYgKHRhcmdldC5ub2RlTmFtZSA9PT0gJ0hFQUQnKSB7XG4gICAgICAgIGNvbnN0IG15Q2hpbGRyZW4gPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3Qgbm9kZSA9IGNoaWxkcmVuW2ldO1xuICAgICAgICAgICAgaWYgKG5vZGUuY2xhaW1fb3JkZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIG15Q2hpbGRyZW4ucHVzaChub2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjaGlsZHJlbiA9IG15Q2hpbGRyZW47XG4gICAgfVxuICAgIC8qXG4gICAgKiBSZW9yZGVyIGNsYWltZWQgY2hpbGRyZW4gb3B0aW1hbGx5LlxuICAgICogV2UgY2FuIHJlb3JkZXIgY2xhaW1lZCBjaGlsZHJlbiBvcHRpbWFsbHkgYnkgZmluZGluZyB0aGUgbG9uZ2VzdCBzdWJzZXF1ZW5jZSBvZlxuICAgICogbm9kZXMgdGhhdCBhcmUgYWxyZWFkeSBjbGFpbWVkIGluIG9yZGVyIGFuZCBvbmx5IG1vdmluZyB0aGUgcmVzdC4gVGhlIGxvbmdlc3RcbiAgICAqIHN1YnNlcXVlbmNlIG9mIG5vZGVzIHRoYXQgYXJlIGNsYWltZWQgaW4gb3JkZXIgY2FuIGJlIGZvdW5kIGJ5XG4gICAgKiBjb21wdXRpbmcgdGhlIGxvbmdlc3QgaW5jcmVhc2luZyBzdWJzZXF1ZW5jZSBvZiAuY2xhaW1fb3JkZXIgdmFsdWVzLlxuICAgICpcbiAgICAqIFRoaXMgYWxnb3JpdGhtIGlzIG9wdGltYWwgaW4gZ2VuZXJhdGluZyB0aGUgbGVhc3QgYW1vdW50IG9mIHJlb3JkZXIgb3BlcmF0aW9uc1xuICAgICogcG9zc2libGUuXG4gICAgKlxuICAgICogUHJvb2Y6XG4gICAgKiBXZSBrbm93IHRoYXQsIGdpdmVuIGEgc2V0IG9mIHJlb3JkZXJpbmcgb3BlcmF0aW9ucywgdGhlIG5vZGVzIHRoYXQgZG8gbm90IG1vdmVcbiAgICAqIGFsd2F5cyBmb3JtIGFuIGluY3JlYXNpbmcgc3Vic2VxdWVuY2UsIHNpbmNlIHRoZXkgZG8gbm90IG1vdmUgYW1vbmcgZWFjaCBvdGhlclxuICAgICogbWVhbmluZyB0aGF0IHRoZXkgbXVzdCBiZSBhbHJlYWR5IG9yZGVyZWQgYW1vbmcgZWFjaCBvdGhlci4gVGh1cywgdGhlIG1heGltYWxcbiAgICAqIHNldCBvZiBub2RlcyB0aGF0IGRvIG5vdCBtb3ZlIGZvcm0gYSBsb25nZXN0IGluY3JlYXNpbmcgc3Vic2VxdWVuY2UuXG4gICAgKi9cbiAgICAvLyBDb21wdXRlIGxvbmdlc3QgaW5jcmVhc2luZyBzdWJzZXF1ZW5jZVxuICAgIC8vIG06IHN1YnNlcXVlbmNlIGxlbmd0aCBqID0+IGluZGV4IGsgb2Ygc21hbGxlc3QgdmFsdWUgdGhhdCBlbmRzIGFuIGluY3JlYXNpbmcgc3Vic2VxdWVuY2Ugb2YgbGVuZ3RoIGpcbiAgICBjb25zdCBtID0gbmV3IEludDMyQXJyYXkoY2hpbGRyZW4ubGVuZ3RoICsgMSk7XG4gICAgLy8gUHJlZGVjZXNzb3IgaW5kaWNlcyArIDFcbiAgICBjb25zdCBwID0gbmV3IEludDMyQXJyYXkoY2hpbGRyZW4ubGVuZ3RoKTtcbiAgICBtWzBdID0gLTE7XG4gICAgbGV0IGxvbmdlc3QgPSAwO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgY3VycmVudCA9IGNoaWxkcmVuW2ldLmNsYWltX29yZGVyO1xuICAgICAgICAvLyBGaW5kIHRoZSBsYXJnZXN0IHN1YnNlcXVlbmNlIGxlbmd0aCBzdWNoIHRoYXQgaXQgZW5kcyBpbiBhIHZhbHVlIGxlc3MgdGhhbiBvdXIgY3VycmVudCB2YWx1ZVxuICAgICAgICAvLyB1cHBlcl9ib3VuZCByZXR1cm5zIGZpcnN0IGdyZWF0ZXIgdmFsdWUsIHNvIHdlIHN1YnRyYWN0IG9uZVxuICAgICAgICAvLyB3aXRoIGZhc3QgcGF0aCBmb3Igd2hlbiB3ZSBhcmUgb24gdGhlIGN1cnJlbnQgbG9uZ2VzdCBzdWJzZXF1ZW5jZVxuICAgICAgICBjb25zdCBzZXFMZW4gPSAoKGxvbmdlc3QgPiAwICYmIGNoaWxkcmVuW21bbG9uZ2VzdF1dLmNsYWltX29yZGVyIDw9IGN1cnJlbnQpID8gbG9uZ2VzdCArIDEgOiB1cHBlcl9ib3VuZCgxLCBsb25nZXN0LCBpZHggPT4gY2hpbGRyZW5bbVtpZHhdXS5jbGFpbV9vcmRlciwgY3VycmVudCkpIC0gMTtcbiAgICAgICAgcFtpXSA9IG1bc2VxTGVuXSArIDE7XG4gICAgICAgIGNvbnN0IG5ld0xlbiA9IHNlcUxlbiArIDE7XG4gICAgICAgIC8vIFdlIGNhbiBndWFyYW50ZWUgdGhhdCBjdXJyZW50IGlzIHRoZSBzbWFsbGVzdCB2YWx1ZS4gT3RoZXJ3aXNlLCB3ZSB3b3VsZCBoYXZlIGdlbmVyYXRlZCBhIGxvbmdlciBzZXF1ZW5jZS5cbiAgICAgICAgbVtuZXdMZW5dID0gaTtcbiAgICAgICAgbG9uZ2VzdCA9IE1hdGgubWF4KG5ld0xlbiwgbG9uZ2VzdCk7XG4gICAgfVxuICAgIC8vIFRoZSBsb25nZXN0IGluY3JlYXNpbmcgc3Vic2VxdWVuY2Ugb2Ygbm9kZXMgKGluaXRpYWxseSByZXZlcnNlZClcbiAgICBjb25zdCBsaXMgPSBbXTtcbiAgICAvLyBUaGUgcmVzdCBvZiB0aGUgbm9kZXMsIG5vZGVzIHRoYXQgd2lsbCBiZSBtb3ZlZFxuICAgIGNvbnN0IHRvTW92ZSA9IFtdO1xuICAgIGxldCBsYXN0ID0gY2hpbGRyZW4ubGVuZ3RoIC0gMTtcbiAgICBmb3IgKGxldCBjdXIgPSBtW2xvbmdlc3RdICsgMTsgY3VyICE9IDA7IGN1ciA9IHBbY3VyIC0gMV0pIHtcbiAgICAgICAgbGlzLnB1c2goY2hpbGRyZW5bY3VyIC0gMV0pO1xuICAgICAgICBmb3IgKDsgbGFzdCA+PSBjdXI7IGxhc3QtLSkge1xuICAgICAgICAgICAgdG9Nb3ZlLnB1c2goY2hpbGRyZW5bbGFzdF0pO1xuICAgICAgICB9XG4gICAgICAgIGxhc3QtLTtcbiAgICB9XG4gICAgZm9yICg7IGxhc3QgPj0gMDsgbGFzdC0tKSB7XG4gICAgICAgIHRvTW92ZS5wdXNoKGNoaWxkcmVuW2xhc3RdKTtcbiAgICB9XG4gICAgbGlzLnJldmVyc2UoKTtcbiAgICAvLyBXZSBzb3J0IHRoZSBub2RlcyBiZWluZyBtb3ZlZCB0byBndWFyYW50ZWUgdGhhdCB0aGVpciBpbnNlcnRpb24gb3JkZXIgbWF0Y2hlcyB0aGUgY2xhaW0gb3JkZXJcbiAgICB0b01vdmUuc29ydCgoYSwgYikgPT4gYS5jbGFpbV9vcmRlciAtIGIuY2xhaW1fb3JkZXIpO1xuICAgIC8vIEZpbmFsbHksIHdlIG1vdmUgdGhlIG5vZGVzXG4gICAgZm9yIChsZXQgaSA9IDAsIGogPSAwOyBpIDwgdG9Nb3ZlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHdoaWxlIChqIDwgbGlzLmxlbmd0aCAmJiB0b01vdmVbaV0uY2xhaW1fb3JkZXIgPj0gbGlzW2pdLmNsYWltX29yZGVyKSB7XG4gICAgICAgICAgICBqKys7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYW5jaG9yID0gaiA8IGxpcy5sZW5ndGggPyBsaXNbal0gOiBudWxsO1xuICAgICAgICB0YXJnZXQuaW5zZXJ0QmVmb3JlKHRvTW92ZVtpXSwgYW5jaG9yKTtcbiAgICB9XG59XG5mdW5jdGlvbiBhcHBlbmQodGFyZ2V0LCBub2RlKSB7XG4gICAgdGFyZ2V0LmFwcGVuZENoaWxkKG5vZGUpO1xufVxuZnVuY3Rpb24gYXBwZW5kX3N0eWxlcyh0YXJnZXQsIHN0eWxlX3NoZWV0X2lkLCBzdHlsZXMpIHtcbiAgICBjb25zdCBhcHBlbmRfc3R5bGVzX3RvID0gZ2V0X3Jvb3RfZm9yX3N0eWxlKHRhcmdldCk7XG4gICAgaWYgKCFhcHBlbmRfc3R5bGVzX3RvLmdldEVsZW1lbnRCeUlkKHN0eWxlX3NoZWV0X2lkKSkge1xuICAgICAgICBjb25zdCBzdHlsZSA9IGVsZW1lbnQoJ3N0eWxlJyk7XG4gICAgICAgIHN0eWxlLmlkID0gc3R5bGVfc2hlZXRfaWQ7XG4gICAgICAgIHN0eWxlLnRleHRDb250ZW50ID0gc3R5bGVzO1xuICAgICAgICBhcHBlbmRfc3R5bGVzaGVldChhcHBlbmRfc3R5bGVzX3RvLCBzdHlsZSk7XG4gICAgfVxufVxuZnVuY3Rpb24gZ2V0X3Jvb3RfZm9yX3N0eWxlKG5vZGUpIHtcbiAgICBpZiAoIW5vZGUpXG4gICAgICAgIHJldHVybiBkb2N1bWVudDtcbiAgICBjb25zdCByb290ID0gbm9kZS5nZXRSb290Tm9kZSA/IG5vZGUuZ2V0Um9vdE5vZGUoKSA6IG5vZGUub3duZXJEb2N1bWVudDtcbiAgICBpZiAocm9vdCAmJiByb290Lmhvc3QpIHtcbiAgICAgICAgcmV0dXJuIHJvb3Q7XG4gICAgfVxuICAgIHJldHVybiBub2RlLm93bmVyRG9jdW1lbnQ7XG59XG5mdW5jdGlvbiBhcHBlbmRfZW1wdHlfc3R5bGVzaGVldChub2RlKSB7XG4gICAgY29uc3Qgc3R5bGVfZWxlbWVudCA9IGVsZW1lbnQoJ3N0eWxlJyk7XG4gICAgYXBwZW5kX3N0eWxlc2hlZXQoZ2V0X3Jvb3RfZm9yX3N0eWxlKG5vZGUpLCBzdHlsZV9lbGVtZW50KTtcbiAgICByZXR1cm4gc3R5bGVfZWxlbWVudC5zaGVldDtcbn1cbmZ1bmN0aW9uIGFwcGVuZF9zdHlsZXNoZWV0KG5vZGUsIHN0eWxlKSB7XG4gICAgYXBwZW5kKG5vZGUuaGVhZCB8fCBub2RlLCBzdHlsZSk7XG4gICAgcmV0dXJuIHN0eWxlLnNoZWV0O1xufVxuZnVuY3Rpb24gYXBwZW5kX2h5ZHJhdGlvbih0YXJnZXQsIG5vZGUpIHtcbiAgICBpZiAoaXNfaHlkcmF0aW5nKSB7XG4gICAgICAgIGluaXRfaHlkcmF0ZSh0YXJnZXQpO1xuICAgICAgICBpZiAoKHRhcmdldC5hY3R1YWxfZW5kX2NoaWxkID09PSB1bmRlZmluZWQpIHx8ICgodGFyZ2V0LmFjdHVhbF9lbmRfY2hpbGQgIT09IG51bGwpICYmICh0YXJnZXQuYWN0dWFsX2VuZF9jaGlsZC5wYXJlbnROb2RlICE9PSB0YXJnZXQpKSkge1xuICAgICAgICAgICAgdGFyZ2V0LmFjdHVhbF9lbmRfY2hpbGQgPSB0YXJnZXQuZmlyc3RDaGlsZDtcbiAgICAgICAgfVxuICAgICAgICAvLyBTa2lwIG5vZGVzIG9mIHVuZGVmaW5lZCBvcmRlcmluZ1xuICAgICAgICB3aGlsZSAoKHRhcmdldC5hY3R1YWxfZW5kX2NoaWxkICE9PSBudWxsKSAmJiAodGFyZ2V0LmFjdHVhbF9lbmRfY2hpbGQuY2xhaW1fb3JkZXIgPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgICAgIHRhcmdldC5hY3R1YWxfZW5kX2NoaWxkID0gdGFyZ2V0LmFjdHVhbF9lbmRfY2hpbGQubmV4dFNpYmxpbmc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5vZGUgIT09IHRhcmdldC5hY3R1YWxfZW5kX2NoaWxkKSB7XG4gICAgICAgICAgICAvLyBXZSBvbmx5IGluc2VydCBpZiB0aGUgb3JkZXJpbmcgb2YgdGhpcyBub2RlIHNob3VsZCBiZSBtb2RpZmllZCBvciB0aGUgcGFyZW50IG5vZGUgaXMgbm90IHRhcmdldFxuICAgICAgICAgICAgaWYgKG5vZGUuY2xhaW1fb3JkZXIgIT09IHVuZGVmaW5lZCB8fCBub2RlLnBhcmVudE5vZGUgIT09IHRhcmdldCkge1xuICAgICAgICAgICAgICAgIHRhcmdldC5pbnNlcnRCZWZvcmUobm9kZSwgdGFyZ2V0LmFjdHVhbF9lbmRfY2hpbGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGFyZ2V0LmFjdHVhbF9lbmRfY2hpbGQgPSBub2RlLm5leHRTaWJsaW5nO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKG5vZGUucGFyZW50Tm9kZSAhPT0gdGFyZ2V0IHx8IG5vZGUubmV4dFNpYmxpbmcgIT09IG51bGwpIHtcbiAgICAgICAgdGFyZ2V0LmFwcGVuZENoaWxkKG5vZGUpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGluc2VydCh0YXJnZXQsIG5vZGUsIGFuY2hvcikge1xuICAgIHRhcmdldC5pbnNlcnRCZWZvcmUobm9kZSwgYW5jaG9yIHx8IG51bGwpO1xufVxuZnVuY3Rpb24gaW5zZXJ0X2h5ZHJhdGlvbih0YXJnZXQsIG5vZGUsIGFuY2hvcikge1xuICAgIGlmIChpc19oeWRyYXRpbmcgJiYgIWFuY2hvcikge1xuICAgICAgICBhcHBlbmRfaHlkcmF0aW9uKHRhcmdldCwgbm9kZSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKG5vZGUucGFyZW50Tm9kZSAhPT0gdGFyZ2V0IHx8IG5vZGUubmV4dFNpYmxpbmcgIT0gYW5jaG9yKSB7XG4gICAgICAgIHRhcmdldC5pbnNlcnRCZWZvcmUobm9kZSwgYW5jaG9yIHx8IG51bGwpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGRldGFjaChub2RlKSB7XG4gICAgaWYgKG5vZGUucGFyZW50Tm9kZSkge1xuICAgICAgICBub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobm9kZSk7XG4gICAgfVxufVxuZnVuY3Rpb24gZGVzdHJveV9lYWNoKGl0ZXJhdGlvbnMsIGRldGFjaGluZykge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaXRlcmF0aW9ucy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBpZiAoaXRlcmF0aW9uc1tpXSlcbiAgICAgICAgICAgIGl0ZXJhdGlvbnNbaV0uZChkZXRhY2hpbmcpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGVsZW1lbnQobmFtZSkge1xuICAgIHJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KG5hbWUpO1xufVxuZnVuY3Rpb24gZWxlbWVudF9pcyhuYW1lLCBpcykge1xuICAgIHJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KG5hbWUsIHsgaXMgfSk7XG59XG5mdW5jdGlvbiBvYmplY3Rfd2l0aG91dF9wcm9wZXJ0aWVzKG9iaiwgZXhjbHVkZSkge1xuICAgIGNvbnN0IHRhcmdldCA9IHt9O1xuICAgIGZvciAoY29uc3QgayBpbiBvYmopIHtcbiAgICAgICAgaWYgKGhhc19wcm9wKG9iaiwgaylcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgICYmIGV4Y2x1ZGUuaW5kZXhPZihrKSA9PT0gLTEpIHtcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgIHRhcmdldFtrXSA9IG9ialtrXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0O1xufVxuZnVuY3Rpb24gc3ZnX2VsZW1lbnQobmFtZSkge1xuICAgIHJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJywgbmFtZSk7XG59XG5mdW5jdGlvbiB0ZXh0KGRhdGEpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoZGF0YSk7XG59XG5mdW5jdGlvbiBzcGFjZSgpIHtcbiAgICByZXR1cm4gdGV4dCgnICcpO1xufVxuZnVuY3Rpb24gZW1wdHkoKSB7XG4gICAgcmV0dXJuIHRleHQoJycpO1xufVxuZnVuY3Rpb24gbGlzdGVuKG5vZGUsIGV2ZW50LCBoYW5kbGVyLCBvcHRpb25zKSB7XG4gICAgbm9kZS5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBoYW5kbGVyLCBvcHRpb25zKTtcbiAgICByZXR1cm4gKCkgPT4gbm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBoYW5kbGVyLCBvcHRpb25zKTtcbn1cbmZ1bmN0aW9uIHByZXZlbnRfZGVmYXVsdChmbikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICByZXR1cm4gZm4uY2FsbCh0aGlzLCBldmVudCk7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIHN0b3BfcHJvcGFnYXRpb24oZm4pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIHJldHVybiBmbi5jYWxsKHRoaXMsIGV2ZW50KTtcbiAgICB9O1xufVxuZnVuY3Rpb24gc2VsZihmbikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBpZiAoZXZlbnQudGFyZ2V0ID09PSB0aGlzKVxuICAgICAgICAgICAgZm4uY2FsbCh0aGlzLCBldmVudCk7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIHRydXN0ZWQoZm4pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgaWYgKGV2ZW50LmlzVHJ1c3RlZClcbiAgICAgICAgICAgIGZuLmNhbGwodGhpcywgZXZlbnQpO1xuICAgIH07XG59XG5mdW5jdGlvbiBhdHRyKG5vZGUsIGF0dHJpYnV0ZSwgdmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPT0gbnVsbClcbiAgICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUoYXR0cmlidXRlKTtcbiAgICBlbHNlIGlmIChub2RlLmdldEF0dHJpYnV0ZShhdHRyaWJ1dGUpICE9PSB2YWx1ZSlcbiAgICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoYXR0cmlidXRlLCB2YWx1ZSk7XG59XG5mdW5jdGlvbiBzZXRfYXR0cmlidXRlcyhub2RlLCBhdHRyaWJ1dGVzKSB7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGNvbnN0IGRlc2NyaXB0b3JzID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMobm9kZS5fX3Byb3RvX18pO1xuICAgIGZvciAoY29uc3Qga2V5IGluIGF0dHJpYnV0ZXMpIHtcbiAgICAgICAgaWYgKGF0dHJpYnV0ZXNba2V5XSA9PSBudWxsKSB7XG4gICAgICAgICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGtleSA9PT0gJ3N0eWxlJykge1xuICAgICAgICAgICAgbm9kZS5zdHlsZS5jc3NUZXh0ID0gYXR0cmlidXRlc1trZXldO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGtleSA9PT0gJ19fdmFsdWUnKSB7XG4gICAgICAgICAgICBub2RlLnZhbHVlID0gbm9kZVtrZXldID0gYXR0cmlidXRlc1trZXldO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGRlc2NyaXB0b3JzW2tleV0gJiYgZGVzY3JpcHRvcnNba2V5XS5zZXQpIHtcbiAgICAgICAgICAgIG5vZGVba2V5XSA9IGF0dHJpYnV0ZXNba2V5XTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGF0dHIobm9kZSwga2V5LCBhdHRyaWJ1dGVzW2tleV0pO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gc2V0X3N2Z19hdHRyaWJ1dGVzKG5vZGUsIGF0dHJpYnV0ZXMpIHtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBhdHRyaWJ1dGVzKSB7XG4gICAgICAgIGF0dHIobm9kZSwga2V5LCBhdHRyaWJ1dGVzW2tleV0pO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHNldF9jdXN0b21fZWxlbWVudF9kYXRhX21hcChub2RlLCBkYXRhX21hcCkge1xuICAgIE9iamVjdC5rZXlzKGRhdGFfbWFwKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgc2V0X2N1c3RvbV9lbGVtZW50X2RhdGEobm9kZSwga2V5LCBkYXRhX21hcFtrZXldKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIHNldF9jdXN0b21fZWxlbWVudF9kYXRhKG5vZGUsIHByb3AsIHZhbHVlKSB7XG4gICAgaWYgKHByb3AgaW4gbm9kZSkge1xuICAgICAgICBub2RlW3Byb3BdID0gdHlwZW9mIG5vZGVbcHJvcF0gPT09ICdib29sZWFuJyAmJiB2YWx1ZSA9PT0gJycgPyB0cnVlIDogdmFsdWU7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBhdHRyKG5vZGUsIHByb3AsIHZhbHVlKTtcbiAgICB9XG59XG5mdW5jdGlvbiB4bGlua19hdHRyKG5vZGUsIGF0dHJpYnV0ZSwgdmFsdWUpIHtcbiAgICBub2RlLnNldEF0dHJpYnV0ZU5TKCdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rJywgYXR0cmlidXRlLCB2YWx1ZSk7XG59XG5mdW5jdGlvbiBnZXRfYmluZGluZ19ncm91cF92YWx1ZShncm91cCwgX192YWx1ZSwgY2hlY2tlZCkge1xuICAgIGNvbnN0IHZhbHVlID0gbmV3IFNldCgpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZ3JvdXAubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKGdyb3VwW2ldLmNoZWNrZWQpXG4gICAgICAgICAgICB2YWx1ZS5hZGQoZ3JvdXBbaV0uX192YWx1ZSk7XG4gICAgfVxuICAgIGlmICghY2hlY2tlZCkge1xuICAgICAgICB2YWx1ZS5kZWxldGUoX192YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiBBcnJheS5mcm9tKHZhbHVlKTtcbn1cbmZ1bmN0aW9uIHRvX251bWJlcih2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gJycgPyBudWxsIDogK3ZhbHVlO1xufVxuZnVuY3Rpb24gdGltZV9yYW5nZXNfdG9fYXJyYXkocmFuZ2VzKSB7XG4gICAgY29uc3QgYXJyYXkgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJhbmdlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBhcnJheS5wdXNoKHsgc3RhcnQ6IHJhbmdlcy5zdGFydChpKSwgZW5kOiByYW5nZXMuZW5kKGkpIH0pO1xuICAgIH1cbiAgICByZXR1cm4gYXJyYXk7XG59XG5mdW5jdGlvbiBjaGlsZHJlbihlbGVtZW50KSB7XG4gICAgcmV0dXJuIEFycmF5LmZyb20oZWxlbWVudC5jaGlsZE5vZGVzKTtcbn1cbmZ1bmN0aW9uIGluaXRfY2xhaW1faW5mbyhub2Rlcykge1xuICAgIGlmIChub2Rlcy5jbGFpbV9pbmZvID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbm9kZXMuY2xhaW1faW5mbyA9IHsgbGFzdF9pbmRleDogMCwgdG90YWxfY2xhaW1lZDogMCB9O1xuICAgIH1cbn1cbmZ1bmN0aW9uIGNsYWltX25vZGUobm9kZXMsIHByZWRpY2F0ZSwgcHJvY2Vzc05vZGUsIGNyZWF0ZU5vZGUsIGRvbnRVcGRhdGVMYXN0SW5kZXggPSBmYWxzZSkge1xuICAgIC8vIFRyeSB0byBmaW5kIG5vZGVzIGluIGFuIG9yZGVyIHN1Y2ggdGhhdCB3ZSBsZW5ndGhlbiB0aGUgbG9uZ2VzdCBpbmNyZWFzaW5nIHN1YnNlcXVlbmNlXG4gICAgaW5pdF9jbGFpbV9pbmZvKG5vZGVzKTtcbiAgICBjb25zdCByZXN1bHROb2RlID0gKCgpID0+IHtcbiAgICAgICAgLy8gV2UgZmlyc3QgdHJ5IHRvIGZpbmQgYW4gZWxlbWVudCBhZnRlciB0aGUgcHJldmlvdXMgb25lXG4gICAgICAgIGZvciAobGV0IGkgPSBub2Rlcy5jbGFpbV9pbmZvLmxhc3RfaW5kZXg7IGkgPCBub2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3Qgbm9kZSA9IG5vZGVzW2ldO1xuICAgICAgICAgICAgaWYgKHByZWRpY2F0ZShub2RlKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlcGxhY2VtZW50ID0gcHJvY2Vzc05vZGUobm9kZSk7XG4gICAgICAgICAgICAgICAgaWYgKHJlcGxhY2VtZW50ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgbm9kZXMuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbm9kZXNbaV0gPSByZXBsYWNlbWVudDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFkb250VXBkYXRlTGFzdEluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGVzLmNsYWltX2luZm8ubGFzdF9pbmRleCA9IGk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBub2RlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIE90aGVyd2lzZSwgd2UgdHJ5IHRvIGZpbmQgb25lIGJlZm9yZVxuICAgICAgICAvLyBXZSBpdGVyYXRlIGluIHJldmVyc2Ugc28gdGhhdCB3ZSBkb24ndCBnbyB0b28gZmFyIGJhY2tcbiAgICAgICAgZm9yIChsZXQgaSA9IG5vZGVzLmNsYWltX2luZm8ubGFzdF9pbmRleCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICBjb25zdCBub2RlID0gbm9kZXNbaV07XG4gICAgICAgICAgICBpZiAocHJlZGljYXRlKG5vZGUpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVwbGFjZW1lbnQgPSBwcm9jZXNzTm9kZShub2RlKTtcbiAgICAgICAgICAgICAgICBpZiAocmVwbGFjZW1lbnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICBub2Rlcy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBub2Rlc1tpXSA9IHJlcGxhY2VtZW50O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIWRvbnRVcGRhdGVMYXN0SW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgbm9kZXMuY2xhaW1faW5mby5sYXN0X2luZGV4ID0gaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAocmVwbGFjZW1lbnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBTaW5jZSB3ZSBzcGxpY2VkIGJlZm9yZSB0aGUgbGFzdF9pbmRleCwgd2UgZGVjcmVhc2UgaXRcbiAgICAgICAgICAgICAgICAgICAgbm9kZXMuY2xhaW1faW5mby5sYXN0X2luZGV4LS07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBub2RlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIElmIHdlIGNhbid0IGZpbmQgYW55IG1hdGNoaW5nIG5vZGUsIHdlIGNyZWF0ZSBhIG5ldyBvbmVcbiAgICAgICAgcmV0dXJuIGNyZWF0ZU5vZGUoKTtcbiAgICB9KSgpO1xuICAgIHJlc3VsdE5vZGUuY2xhaW1fb3JkZXIgPSBub2Rlcy5jbGFpbV9pbmZvLnRvdGFsX2NsYWltZWQ7XG4gICAgbm9kZXMuY2xhaW1faW5mby50b3RhbF9jbGFpbWVkICs9IDE7XG4gICAgcmV0dXJuIHJlc3VsdE5vZGU7XG59XG5mdW5jdGlvbiBjbGFpbV9lbGVtZW50X2Jhc2Uobm9kZXMsIG5hbWUsIGF0dHJpYnV0ZXMsIGNyZWF0ZV9lbGVtZW50KSB7XG4gICAgcmV0dXJuIGNsYWltX25vZGUobm9kZXMsIChub2RlKSA9PiBub2RlLm5vZGVOYW1lID09PSBuYW1lLCAobm9kZSkgPT4ge1xuICAgICAgICBjb25zdCByZW1vdmUgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBub2RlLmF0dHJpYnV0ZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGF0dHJpYnV0ZSA9IG5vZGUuYXR0cmlidXRlc1tqXTtcbiAgICAgICAgICAgIGlmICghYXR0cmlidXRlc1thdHRyaWJ1dGUubmFtZV0pIHtcbiAgICAgICAgICAgICAgICByZW1vdmUucHVzaChhdHRyaWJ1dGUubmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmVtb3ZlLmZvckVhY2godiA9PiBub2RlLnJlbW92ZUF0dHJpYnV0ZSh2KSk7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfSwgKCkgPT4gY3JlYXRlX2VsZW1lbnQobmFtZSkpO1xufVxuZnVuY3Rpb24gY2xhaW1fZWxlbWVudChub2RlcywgbmFtZSwgYXR0cmlidXRlcykge1xuICAgIHJldHVybiBjbGFpbV9lbGVtZW50X2Jhc2Uobm9kZXMsIG5hbWUsIGF0dHJpYnV0ZXMsIGVsZW1lbnQpO1xufVxuZnVuY3Rpb24gY2xhaW1fc3ZnX2VsZW1lbnQobm9kZXMsIG5hbWUsIGF0dHJpYnV0ZXMpIHtcbiAgICByZXR1cm4gY2xhaW1fZWxlbWVudF9iYXNlKG5vZGVzLCBuYW1lLCBhdHRyaWJ1dGVzLCBzdmdfZWxlbWVudCk7XG59XG5mdW5jdGlvbiBjbGFpbV90ZXh0KG5vZGVzLCBkYXRhKSB7XG4gICAgcmV0dXJuIGNsYWltX25vZGUobm9kZXMsIChub2RlKSA9PiBub2RlLm5vZGVUeXBlID09PSAzLCAobm9kZSkgPT4ge1xuICAgICAgICBjb25zdCBkYXRhU3RyID0gJycgKyBkYXRhO1xuICAgICAgICBpZiAobm9kZS5kYXRhLnN0YXJ0c1dpdGgoZGF0YVN0cikpIHtcbiAgICAgICAgICAgIGlmIChub2RlLmRhdGEubGVuZ3RoICE9PSBkYXRhU3RyLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBub2RlLnNwbGl0VGV4dChkYXRhU3RyLmxlbmd0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBub2RlLmRhdGEgPSBkYXRhU3RyO1xuICAgICAgICB9XG4gICAgfSwgKCkgPT4gdGV4dChkYXRhKSwgdHJ1ZSAvLyBUZXh0IG5vZGVzIHNob3VsZCBub3QgdXBkYXRlIGxhc3QgaW5kZXggc2luY2UgaXQgaXMgbGlrZWx5IG5vdCB3b3J0aCBpdCB0byBlbGltaW5hdGUgYW4gaW5jcmVhc2luZyBzdWJzZXF1ZW5jZSBvZiBhY3R1YWwgZWxlbWVudHNcbiAgICApO1xufVxuZnVuY3Rpb24gY2xhaW1fc3BhY2Uobm9kZXMpIHtcbiAgICByZXR1cm4gY2xhaW1fdGV4dChub2RlcywgJyAnKTtcbn1cbmZ1bmN0aW9uIGZpbmRfY29tbWVudChub2RlcywgdGV4dCwgc3RhcnQpIHtcbiAgICBmb3IgKGxldCBpID0gc3RhcnQ7IGkgPCBub2Rlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBjb25zdCBub2RlID0gbm9kZXNbaV07XG4gICAgICAgIGlmIChub2RlLm5vZGVUeXBlID09PSA4IC8qIGNvbW1lbnQgbm9kZSAqLyAmJiBub2RlLnRleHRDb250ZW50LnRyaW0oKSA9PT0gdGV4dCkge1xuICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5vZGVzLmxlbmd0aDtcbn1cbmZ1bmN0aW9uIGNsYWltX2h0bWxfdGFnKG5vZGVzLCBpc19zdmcpIHtcbiAgICAvLyBmaW5kIGh0bWwgb3BlbmluZyB0YWdcbiAgICBjb25zdCBzdGFydF9pbmRleCA9IGZpbmRfY29tbWVudChub2RlcywgJ0hUTUxfVEFHX1NUQVJUJywgMCk7XG4gICAgY29uc3QgZW5kX2luZGV4ID0gZmluZF9jb21tZW50KG5vZGVzLCAnSFRNTF9UQUdfRU5EJywgc3RhcnRfaW5kZXgpO1xuICAgIGlmIChzdGFydF9pbmRleCA9PT0gZW5kX2luZGV4KSB7XG4gICAgICAgIHJldHVybiBuZXcgSHRtbFRhZ0h5ZHJhdGlvbih1bmRlZmluZWQsIGlzX3N2Zyk7XG4gICAgfVxuICAgIGluaXRfY2xhaW1faW5mbyhub2Rlcyk7XG4gICAgY29uc3QgaHRtbF90YWdfbm9kZXMgPSBub2Rlcy5zcGxpY2Uoc3RhcnRfaW5kZXgsIGVuZF9pbmRleCAtIHN0YXJ0X2luZGV4ICsgMSk7XG4gICAgZGV0YWNoKGh0bWxfdGFnX25vZGVzWzBdKTtcbiAgICBkZXRhY2goaHRtbF90YWdfbm9kZXNbaHRtbF90YWdfbm9kZXMubGVuZ3RoIC0gMV0pO1xuICAgIGNvbnN0IGNsYWltZWRfbm9kZXMgPSBodG1sX3RhZ19ub2Rlcy5zbGljZSgxLCBodG1sX3RhZ19ub2Rlcy5sZW5ndGggLSAxKTtcbiAgICBmb3IgKGNvbnN0IG4gb2YgY2xhaW1lZF9ub2Rlcykge1xuICAgICAgICBuLmNsYWltX29yZGVyID0gbm9kZXMuY2xhaW1faW5mby50b3RhbF9jbGFpbWVkO1xuICAgICAgICBub2Rlcy5jbGFpbV9pbmZvLnRvdGFsX2NsYWltZWQgKz0gMTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBIdG1sVGFnSHlkcmF0aW9uKGNsYWltZWRfbm9kZXMsIGlzX3N2Zyk7XG59XG5mdW5jdGlvbiBzZXRfZGF0YSh0ZXh0LCBkYXRhKSB7XG4gICAgZGF0YSA9ICcnICsgZGF0YTtcbiAgICBpZiAodGV4dC53aG9sZVRleHQgIT09IGRhdGEpXG4gICAgICAgIHRleHQuZGF0YSA9IGRhdGE7XG59XG5mdW5jdGlvbiBzZXRfaW5wdXRfdmFsdWUoaW5wdXQsIHZhbHVlKSB7XG4gICAgaW5wdXQudmFsdWUgPSB2YWx1ZSA9PSBudWxsID8gJycgOiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIHNldF9pbnB1dF90eXBlKGlucHV0LCB0eXBlKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaW5wdXQudHlwZSA9IHR5cGU7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGRvIG5vdGhpbmdcbiAgICB9XG59XG5mdW5jdGlvbiBzZXRfc3R5bGUobm9kZSwga2V5LCB2YWx1ZSwgaW1wb3J0YW50KSB7XG4gICAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgICAgIG5vZGUuc3R5bGUucmVtb3ZlUHJvcGVydHkoa2V5KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIG5vZGUuc3R5bGUuc2V0UHJvcGVydHkoa2V5LCB2YWx1ZSwgaW1wb3J0YW50ID8gJ2ltcG9ydGFudCcgOiAnJyk7XG4gICAgfVxufVxuZnVuY3Rpb24gc2VsZWN0X29wdGlvbihzZWxlY3QsIHZhbHVlKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZWxlY3Qub3B0aW9ucy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBjb25zdCBvcHRpb24gPSBzZWxlY3Qub3B0aW9uc1tpXTtcbiAgICAgICAgaWYgKG9wdGlvbi5fX3ZhbHVlID09PSB2YWx1ZSkge1xuICAgICAgICAgICAgb3B0aW9uLnNlbGVjdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzZWxlY3Quc2VsZWN0ZWRJbmRleCA9IC0xOyAvLyBubyBvcHRpb24gc2hvdWxkIGJlIHNlbGVjdGVkXG59XG5mdW5jdGlvbiBzZWxlY3Rfb3B0aW9ucyhzZWxlY3QsIHZhbHVlKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZWxlY3Qub3B0aW9ucy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBjb25zdCBvcHRpb24gPSBzZWxlY3Qub3B0aW9uc1tpXTtcbiAgICAgICAgb3B0aW9uLnNlbGVjdGVkID0gfnZhbHVlLmluZGV4T2Yob3B0aW9uLl9fdmFsdWUpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHNlbGVjdF92YWx1ZShzZWxlY3QpIHtcbiAgICBjb25zdCBzZWxlY3RlZF9vcHRpb24gPSBzZWxlY3QucXVlcnlTZWxlY3RvcignOmNoZWNrZWQnKSB8fCBzZWxlY3Qub3B0aW9uc1swXTtcbiAgICByZXR1cm4gc2VsZWN0ZWRfb3B0aW9uICYmIHNlbGVjdGVkX29wdGlvbi5fX3ZhbHVlO1xufVxuZnVuY3Rpb24gc2VsZWN0X211bHRpcGxlX3ZhbHVlKHNlbGVjdCkge1xuICAgIHJldHVybiBbXS5tYXAuY2FsbChzZWxlY3QucXVlcnlTZWxlY3RvckFsbCgnOmNoZWNrZWQnKSwgb3B0aW9uID0+IG9wdGlvbi5fX3ZhbHVlKTtcbn1cbi8vIHVuZm9ydHVuYXRlbHkgdGhpcyBjYW4ndCBiZSBhIGNvbnN0YW50IGFzIHRoYXQgd291bGRuJ3QgYmUgdHJlZS1zaGFrZWFibGVcbi8vIHNvIHdlIGNhY2hlIHRoZSByZXN1bHQgaW5zdGVhZFxubGV0IGNyb3Nzb3JpZ2luO1xuZnVuY3Rpb24gaXNfY3Jvc3NvcmlnaW4oKSB7XG4gICAgaWYgKGNyb3Nzb3JpZ2luID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY3Jvc3NvcmlnaW4gPSBmYWxzZTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cucGFyZW50KSB7XG4gICAgICAgICAgICAgICAgdm9pZCB3aW5kb3cucGFyZW50LmRvY3VtZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY3Jvc3NvcmlnaW4gPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjcm9zc29yaWdpbjtcbn1cbmZ1bmN0aW9uIGFkZF9yZXNpemVfbGlzdGVuZXIobm9kZSwgZm4pIHtcbiAgICBjb25zdCBjb21wdXRlZF9zdHlsZSA9IGdldENvbXB1dGVkU3R5bGUobm9kZSk7XG4gICAgaWYgKGNvbXB1dGVkX3N0eWxlLnBvc2l0aW9uID09PSAnc3RhdGljJykge1xuICAgICAgICBub2RlLnN0eWxlLnBvc2l0aW9uID0gJ3JlbGF0aXZlJztcbiAgICB9XG4gICAgY29uc3QgaWZyYW1lID0gZWxlbWVudCgnaWZyYW1lJyk7XG4gICAgaWZyYW1lLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCAnZGlzcGxheTogYmxvY2s7IHBvc2l0aW9uOiBhYnNvbHV0ZTsgdG9wOiAwOyBsZWZ0OiAwOyB3aWR0aDogMTAwJTsgaGVpZ2h0OiAxMDAlOyAnICtcbiAgICAgICAgJ292ZXJmbG93OiBoaWRkZW47IGJvcmRlcjogMDsgb3BhY2l0eTogMDsgcG9pbnRlci1ldmVudHM6IG5vbmU7IHotaW5kZXg6IC0xOycpO1xuICAgIGlmcmFtZS5zZXRBdHRyaWJ1dGUoJ2FyaWEtaGlkZGVuJywgJ3RydWUnKTtcbiAgICBpZnJhbWUudGFiSW5kZXggPSAtMTtcbiAgICBjb25zdCBjcm9zc29yaWdpbiA9IGlzX2Nyb3Nzb3JpZ2luKCk7XG4gICAgbGV0IHVuc3Vic2NyaWJlO1xuICAgIGlmIChjcm9zc29yaWdpbikge1xuICAgICAgICBpZnJhbWUuc3JjID0gXCJkYXRhOnRleHQvaHRtbCw8c2NyaXB0Pm9ucmVzaXplPWZ1bmN0aW9uKCl7cGFyZW50LnBvc3RNZXNzYWdlKDAsJyonKX08L3NjcmlwdD5cIjtcbiAgICAgICAgdW5zdWJzY3JpYmUgPSBsaXN0ZW4od2luZG93LCAnbWVzc2FnZScsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgaWYgKGV2ZW50LnNvdXJjZSA9PT0gaWZyYW1lLmNvbnRlbnRXaW5kb3cpXG4gICAgICAgICAgICAgICAgZm4oKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBpZnJhbWUuc3JjID0gJ2Fib3V0OmJsYW5rJztcbiAgICAgICAgaWZyYW1lLm9ubG9hZCA9ICgpID0+IHtcbiAgICAgICAgICAgIHVuc3Vic2NyaWJlID0gbGlzdGVuKGlmcmFtZS5jb250ZW50V2luZG93LCAncmVzaXplJywgZm4pO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBhcHBlbmQobm9kZSwgaWZyYW1lKTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBpZiAoY3Jvc3NvcmlnaW4pIHtcbiAgICAgICAgICAgIHVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodW5zdWJzY3JpYmUgJiYgaWZyYW1lLmNvbnRlbnRXaW5kb3cpIHtcbiAgICAgICAgICAgIHVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH1cbiAgICAgICAgZGV0YWNoKGlmcmFtZSk7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIHRvZ2dsZV9jbGFzcyhlbGVtZW50LCBuYW1lLCB0b2dnbGUpIHtcbiAgICBlbGVtZW50LmNsYXNzTGlzdFt0b2dnbGUgPyAnYWRkJyA6ICdyZW1vdmUnXShuYW1lKTtcbn1cbmZ1bmN0aW9uIGN1c3RvbV9ldmVudCh0eXBlLCBkZXRhaWwsIHsgYnViYmxlcyA9IGZhbHNlLCBjYW5jZWxhYmxlID0gZmFsc2UgfSA9IHt9KSB7XG4gICAgY29uc3QgZSA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdDdXN0b21FdmVudCcpO1xuICAgIGUuaW5pdEN1c3RvbUV2ZW50KHR5cGUsIGJ1YmJsZXMsIGNhbmNlbGFibGUsIGRldGFpbCk7XG4gICAgcmV0dXJuIGU7XG59XG5mdW5jdGlvbiBxdWVyeV9zZWxlY3Rvcl9hbGwoc2VsZWN0b3IsIHBhcmVudCA9IGRvY3VtZW50LmJvZHkpIHtcbiAgICByZXR1cm4gQXJyYXkuZnJvbShwYXJlbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcikpO1xufVxuZnVuY3Rpb24gaGVhZF9zZWxlY3Rvcihub2RlSWQsIGhlYWQpIHtcbiAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICBsZXQgc3RhcnRlZCA9IDA7XG4gICAgZm9yIChjb25zdCBub2RlIG9mIGhlYWQuY2hpbGROb2Rlcykge1xuICAgICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gOCAvKiBjb21tZW50IG5vZGUgKi8pIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbW1lbnQgPSBub2RlLnRleHRDb250ZW50LnRyaW0oKTtcbiAgICAgICAgICAgIGlmIChjb21tZW50ID09PSBgSEVBRF8ke25vZGVJZH1fRU5EYCkge1xuICAgICAgICAgICAgICAgIHN0YXJ0ZWQgLT0gMTtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChub2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGNvbW1lbnQgPT09IGBIRUFEXyR7bm9kZUlkfV9TVEFSVGApIHtcbiAgICAgICAgICAgICAgICBzdGFydGVkICs9IDE7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2gobm9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoc3RhcnRlZCA+IDApIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKG5vZGUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5jbGFzcyBIdG1sVGFnIHtcbiAgICBjb25zdHJ1Y3Rvcihpc19zdmcgPSBmYWxzZSkge1xuICAgICAgICB0aGlzLmlzX3N2ZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLmlzX3N2ZyA9IGlzX3N2ZztcbiAgICAgICAgdGhpcy5lID0gdGhpcy5uID0gbnVsbDtcbiAgICB9XG4gICAgYyhodG1sKSB7XG4gICAgICAgIHRoaXMuaChodG1sKTtcbiAgICB9XG4gICAgbShodG1sLCB0YXJnZXQsIGFuY2hvciA9IG51bGwpIHtcbiAgICAgICAgaWYgKCF0aGlzLmUpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmlzX3N2ZylcbiAgICAgICAgICAgICAgICB0aGlzLmUgPSBzdmdfZWxlbWVudCh0YXJnZXQubm9kZU5hbWUpO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHRoaXMuZSA9IGVsZW1lbnQodGFyZ2V0Lm5vZGVOYW1lKTtcbiAgICAgICAgICAgIHRoaXMudCA9IHRhcmdldDtcbiAgICAgICAgICAgIHRoaXMuYyhodG1sKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmkoYW5jaG9yKTtcbiAgICB9XG4gICAgaChodG1sKSB7XG4gICAgICAgIHRoaXMuZS5pbm5lckhUTUwgPSBodG1sO1xuICAgICAgICB0aGlzLm4gPSBBcnJheS5mcm9tKHRoaXMuZS5jaGlsZE5vZGVzKTtcbiAgICB9XG4gICAgaShhbmNob3IpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLm4ubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIGluc2VydCh0aGlzLnQsIHRoaXMubltpXSwgYW5jaG9yKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBwKGh0bWwpIHtcbiAgICAgICAgdGhpcy5kKCk7XG4gICAgICAgIHRoaXMuaChodG1sKTtcbiAgICAgICAgdGhpcy5pKHRoaXMuYSk7XG4gICAgfVxuICAgIGQoKSB7XG4gICAgICAgIHRoaXMubi5mb3JFYWNoKGRldGFjaCk7XG4gICAgfVxufVxuY2xhc3MgSHRtbFRhZ0h5ZHJhdGlvbiBleHRlbmRzIEh0bWxUYWcge1xuICAgIGNvbnN0cnVjdG9yKGNsYWltZWRfbm9kZXMsIGlzX3N2ZyA9IGZhbHNlKSB7XG4gICAgICAgIHN1cGVyKGlzX3N2Zyk7XG4gICAgICAgIHRoaXMuZSA9IHRoaXMubiA9IG51bGw7XG4gICAgICAgIHRoaXMubCA9IGNsYWltZWRfbm9kZXM7XG4gICAgfVxuICAgIGMoaHRtbCkge1xuICAgICAgICBpZiAodGhpcy5sKSB7XG4gICAgICAgICAgICB0aGlzLm4gPSB0aGlzLmw7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzdXBlci5jKGh0bWwpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGkoYW5jaG9yKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5uLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICBpbnNlcnRfaHlkcmF0aW9uKHRoaXMudCwgdGhpcy5uW2ldLCBhbmNob3IpO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gYXR0cmlidXRlX3RvX29iamVjdChhdHRyaWJ1dGVzKSB7XG4gICAgY29uc3QgcmVzdWx0ID0ge307XG4gICAgZm9yIChjb25zdCBhdHRyaWJ1dGUgb2YgYXR0cmlidXRlcykge1xuICAgICAgICByZXN1bHRbYXR0cmlidXRlLm5hbWVdID0gYXR0cmlidXRlLnZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gZ2V0X2N1c3RvbV9lbGVtZW50c19zbG90cyhlbGVtZW50KSB7XG4gICAgY29uc3QgcmVzdWx0ID0ge307XG4gICAgZWxlbWVudC5jaGlsZE5vZGVzLmZvckVhY2goKG5vZGUpID0+IHtcbiAgICAgICAgcmVzdWx0W25vZGUuc2xvdCB8fCAnZGVmYXVsdCddID0gdHJ1ZTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gY29uc3RydWN0X3N2ZWx0ZV9jb21wb25lbnQoY29tcG9uZW50LCBwcm9wcykge1xuICAgIHJldHVybiBuZXcgY29tcG9uZW50KHByb3BzKTtcbn1cblxuLy8gd2UgbmVlZCB0byBzdG9yZSB0aGUgaW5mb3JtYXRpb24gZm9yIG11bHRpcGxlIGRvY3VtZW50cyBiZWNhdXNlIGEgU3ZlbHRlIGFwcGxpY2F0aW9uIGNvdWxkIGFsc28gY29udGFpbiBpZnJhbWVzXG4vLyBodHRwczovL2dpdGh1Yi5jb20vc3ZlbHRlanMvc3ZlbHRlL2lzc3Vlcy8zNjI0XG5jb25zdCBtYW5hZ2VkX3N0eWxlcyA9IG5ldyBNYXAoKTtcbmxldCBhY3RpdmUgPSAwO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL2Rhcmtza3lhcHAvc3RyaW5nLWhhc2gvYmxvYi9tYXN0ZXIvaW5kZXguanNcbmZ1bmN0aW9uIGhhc2goc3RyKSB7XG4gICAgbGV0IGhhc2ggPSA1MzgxO1xuICAgIGxldCBpID0gc3RyLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKVxuICAgICAgICBoYXNoID0gKChoYXNoIDw8IDUpIC0gaGFzaCkgXiBzdHIuY2hhckNvZGVBdChpKTtcbiAgICByZXR1cm4gaGFzaCA+Pj4gMDtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9zdHlsZV9pbmZvcm1hdGlvbihkb2MsIG5vZGUpIHtcbiAgICBjb25zdCBpbmZvID0geyBzdHlsZXNoZWV0OiBhcHBlbmRfZW1wdHlfc3R5bGVzaGVldChub2RlKSwgcnVsZXM6IHt9IH07XG4gICAgbWFuYWdlZF9zdHlsZXMuc2V0KGRvYywgaW5mbyk7XG4gICAgcmV0dXJuIGluZm87XG59XG5mdW5jdGlvbiBjcmVhdGVfcnVsZShub2RlLCBhLCBiLCBkdXJhdGlvbiwgZGVsYXksIGVhc2UsIGZuLCB1aWQgPSAwKSB7XG4gICAgY29uc3Qgc3RlcCA9IDE2LjY2NiAvIGR1cmF0aW9uO1xuICAgIGxldCBrZXlmcmFtZXMgPSAne1xcbic7XG4gICAgZm9yIChsZXQgcCA9IDA7IHAgPD0gMTsgcCArPSBzdGVwKSB7XG4gICAgICAgIGNvbnN0IHQgPSBhICsgKGIgLSBhKSAqIGVhc2UocCk7XG4gICAgICAgIGtleWZyYW1lcyArPSBwICogMTAwICsgYCV7JHtmbih0LCAxIC0gdCl9fVxcbmA7XG4gICAgfVxuICAgIGNvbnN0IHJ1bGUgPSBrZXlmcmFtZXMgKyBgMTAwJSB7JHtmbihiLCAxIC0gYil9fVxcbn1gO1xuICAgIGNvbnN0IG5hbWUgPSBgX19zdmVsdGVfJHtoYXNoKHJ1bGUpfV8ke3VpZH1gO1xuICAgIGNvbnN0IGRvYyA9IGdldF9yb290X2Zvcl9zdHlsZShub2RlKTtcbiAgICBjb25zdCB7IHN0eWxlc2hlZXQsIHJ1bGVzIH0gPSBtYW5hZ2VkX3N0eWxlcy5nZXQoZG9jKSB8fCBjcmVhdGVfc3R5bGVfaW5mb3JtYXRpb24oZG9jLCBub2RlKTtcbiAgICBpZiAoIXJ1bGVzW25hbWVdKSB7XG4gICAgICAgIHJ1bGVzW25hbWVdID0gdHJ1ZTtcbiAgICAgICAgc3R5bGVzaGVldC5pbnNlcnRSdWxlKGBAa2V5ZnJhbWVzICR7bmFtZX0gJHtydWxlfWAsIHN0eWxlc2hlZXQuY3NzUnVsZXMubGVuZ3RoKTtcbiAgICB9XG4gICAgY29uc3QgYW5pbWF0aW9uID0gbm9kZS5zdHlsZS5hbmltYXRpb24gfHwgJyc7XG4gICAgbm9kZS5zdHlsZS5hbmltYXRpb24gPSBgJHthbmltYXRpb24gPyBgJHthbmltYXRpb259LCBgIDogJyd9JHtuYW1lfSAke2R1cmF0aW9ufW1zIGxpbmVhciAke2RlbGF5fW1zIDEgYm90aGA7XG4gICAgYWN0aXZlICs9IDE7XG4gICAgcmV0dXJuIG5hbWU7XG59XG5mdW5jdGlvbiBkZWxldGVfcnVsZShub2RlLCBuYW1lKSB7XG4gICAgY29uc3QgcHJldmlvdXMgPSAobm9kZS5zdHlsZS5hbmltYXRpb24gfHwgJycpLnNwbGl0KCcsICcpO1xuICAgIGNvbnN0IG5leHQgPSBwcmV2aW91cy5maWx0ZXIobmFtZVxuICAgICAgICA/IGFuaW0gPT4gYW5pbS5pbmRleE9mKG5hbWUpIDwgMCAvLyByZW1vdmUgc3BlY2lmaWMgYW5pbWF0aW9uXG4gICAgICAgIDogYW5pbSA9PiBhbmltLmluZGV4T2YoJ19fc3ZlbHRlJykgPT09IC0xIC8vIHJlbW92ZSBhbGwgU3ZlbHRlIGFuaW1hdGlvbnNcbiAgICApO1xuICAgIGNvbnN0IGRlbGV0ZWQgPSBwcmV2aW91cy5sZW5ndGggLSBuZXh0Lmxlbmd0aDtcbiAgICBpZiAoZGVsZXRlZCkge1xuICAgICAgICBub2RlLnN0eWxlLmFuaW1hdGlvbiA9IG5leHQuam9pbignLCAnKTtcbiAgICAgICAgYWN0aXZlIC09IGRlbGV0ZWQ7XG4gICAgICAgIGlmICghYWN0aXZlKVxuICAgICAgICAgICAgY2xlYXJfcnVsZXMoKTtcbiAgICB9XG59XG5mdW5jdGlvbiBjbGVhcl9ydWxlcygpIHtcbiAgICByYWYoKCkgPT4ge1xuICAgICAgICBpZiAoYWN0aXZlKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBtYW5hZ2VkX3N0eWxlcy5mb3JFYWNoKGluZm8gPT4ge1xuICAgICAgICAgICAgY29uc3QgeyBvd25lck5vZGUgfSA9IGluZm8uc3R5bGVzaGVldDtcbiAgICAgICAgICAgIC8vIHRoZXJlIGlzIG5vIG93bmVyTm9kZSBpZiBpdCBydW5zIG9uIGpzZG9tLlxuICAgICAgICAgICAgaWYgKG93bmVyTm9kZSlcbiAgICAgICAgICAgICAgICBkZXRhY2gob3duZXJOb2RlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIG1hbmFnZWRfc3R5bGVzLmNsZWFyKCk7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZV9hbmltYXRpb24obm9kZSwgZnJvbSwgZm4sIHBhcmFtcykge1xuICAgIGlmICghZnJvbSlcbiAgICAgICAgcmV0dXJuIG5vb3A7XG4gICAgY29uc3QgdG8gPSBub2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIGlmIChmcm9tLmxlZnQgPT09IHRvLmxlZnQgJiYgZnJvbS5yaWdodCA9PT0gdG8ucmlnaHQgJiYgZnJvbS50b3AgPT09IHRvLnRvcCAmJiBmcm9tLmJvdHRvbSA9PT0gdG8uYm90dG9tKVxuICAgICAgICByZXR1cm4gbm9vcDtcbiAgICBjb25zdCB7IGRlbGF5ID0gMCwgZHVyYXRpb24gPSAzMDAsIGVhc2luZyA9IGlkZW50aXR5LCBcbiAgICAvLyBAdHMtaWdub3JlIHRvZG86IHNob3VsZCB0aGlzIGJlIHNlcGFyYXRlZCBmcm9tIGRlc3RydWN0dXJpbmc/IE9yIHN0YXJ0L2VuZCBhZGRlZCB0byBwdWJsaWMgYXBpIGFuZCBkb2N1bWVudGF0aW9uP1xuICAgIHN0YXJ0OiBzdGFydF90aW1lID0gbm93KCkgKyBkZWxheSwgXG4gICAgLy8gQHRzLWlnbm9yZSB0b2RvOlxuICAgIGVuZCA9IHN0YXJ0X3RpbWUgKyBkdXJhdGlvbiwgdGljayA9IG5vb3AsIGNzcyB9ID0gZm4obm9kZSwgeyBmcm9tLCB0byB9LCBwYXJhbXMpO1xuICAgIGxldCBydW5uaW5nID0gdHJ1ZTtcbiAgICBsZXQgc3RhcnRlZCA9IGZhbHNlO1xuICAgIGxldCBuYW1lO1xuICAgIGZ1bmN0aW9uIHN0YXJ0KCkge1xuICAgICAgICBpZiAoY3NzKSB7XG4gICAgICAgICAgICBuYW1lID0gY3JlYXRlX3J1bGUobm9kZSwgMCwgMSwgZHVyYXRpb24sIGRlbGF5LCBlYXNpbmcsIGNzcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFkZWxheSkge1xuICAgICAgICAgICAgc3RhcnRlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gc3RvcCgpIHtcbiAgICAgICAgaWYgKGNzcylcbiAgICAgICAgICAgIGRlbGV0ZV9ydWxlKG5vZGUsIG5hbWUpO1xuICAgICAgICBydW5uaW5nID0gZmFsc2U7XG4gICAgfVxuICAgIGxvb3Aobm93ID0+IHtcbiAgICAgICAgaWYgKCFzdGFydGVkICYmIG5vdyA+PSBzdGFydF90aW1lKSB7XG4gICAgICAgICAgICBzdGFydGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RhcnRlZCAmJiBub3cgPj0gZW5kKSB7XG4gICAgICAgICAgICB0aWNrKDEsIDApO1xuICAgICAgICAgICAgc3RvcCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghcnVubmluZykge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdGFydGVkKSB7XG4gICAgICAgICAgICBjb25zdCBwID0gbm93IC0gc3RhcnRfdGltZTtcbiAgICAgICAgICAgIGNvbnN0IHQgPSAwICsgMSAqIGVhc2luZyhwIC8gZHVyYXRpb24pO1xuICAgICAgICAgICAgdGljayh0LCAxIC0gdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSk7XG4gICAgc3RhcnQoKTtcbiAgICB0aWNrKDAsIDEpO1xuICAgIHJldHVybiBzdG9wO1xufVxuZnVuY3Rpb24gZml4X3Bvc2l0aW9uKG5vZGUpIHtcbiAgICBjb25zdCBzdHlsZSA9IGdldENvbXB1dGVkU3R5bGUobm9kZSk7XG4gICAgaWYgKHN0eWxlLnBvc2l0aW9uICE9PSAnYWJzb2x1dGUnICYmIHN0eWxlLnBvc2l0aW9uICE9PSAnZml4ZWQnKSB7XG4gICAgICAgIGNvbnN0IHsgd2lkdGgsIGhlaWdodCB9ID0gc3R5bGU7XG4gICAgICAgIGNvbnN0IGEgPSBub2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICBub2RlLnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcbiAgICAgICAgbm9kZS5zdHlsZS53aWR0aCA9IHdpZHRoO1xuICAgICAgICBub2RlLnN0eWxlLmhlaWdodCA9IGhlaWdodDtcbiAgICAgICAgYWRkX3RyYW5zZm9ybShub2RlLCBhKTtcbiAgICB9XG59XG5mdW5jdGlvbiBhZGRfdHJhbnNmb3JtKG5vZGUsIGEpIHtcbiAgICBjb25zdCBiID0gbm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBpZiAoYS5sZWZ0ICE9PSBiLmxlZnQgfHwgYS50b3AgIT09IGIudG9wKSB7XG4gICAgICAgIGNvbnN0IHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShub2RlKTtcbiAgICAgICAgY29uc3QgdHJhbnNmb3JtID0gc3R5bGUudHJhbnNmb3JtID09PSAnbm9uZScgPyAnJyA6IHN0eWxlLnRyYW5zZm9ybTtcbiAgICAgICAgbm9kZS5zdHlsZS50cmFuc2Zvcm0gPSBgJHt0cmFuc2Zvcm19IHRyYW5zbGF0ZSgke2EubGVmdCAtIGIubGVmdH1weCwgJHthLnRvcCAtIGIudG9wfXB4KWA7XG4gICAgfVxufVxuXG5sZXQgY3VycmVudF9jb21wb25lbnQ7XG5mdW5jdGlvbiBzZXRfY3VycmVudF9jb21wb25lbnQoY29tcG9uZW50KSB7XG4gICAgY3VycmVudF9jb21wb25lbnQgPSBjb21wb25lbnQ7XG59XG5mdW5jdGlvbiBnZXRfY3VycmVudF9jb21wb25lbnQoKSB7XG4gICAgaWYgKCFjdXJyZW50X2NvbXBvbmVudClcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGdW5jdGlvbiBjYWxsZWQgb3V0c2lkZSBjb21wb25lbnQgaW5pdGlhbGl6YXRpb24nKTtcbiAgICByZXR1cm4gY3VycmVudF9jb21wb25lbnQ7XG59XG4vKipcbiAqIFNjaGVkdWxlcyBhIGNhbGxiYWNrIHRvIHJ1biBpbW1lZGlhdGVseSBiZWZvcmUgdGhlIGNvbXBvbmVudCBpcyB1cGRhdGVkIGFmdGVyIGFueSBzdGF0ZSBjaGFuZ2UuXG4gKlxuICogVGhlIGZpcnN0IHRpbWUgdGhlIGNhbGxiYWNrIHJ1bnMgd2lsbCBiZSBiZWZvcmUgdGhlIGluaXRpYWwgYG9uTW91bnRgXG4gKlxuICogaHR0cHM6Ly9zdmVsdGUuZGV2L2RvY3MjcnVuLXRpbWUtc3ZlbHRlLWJlZm9yZXVwZGF0ZVxuICovXG5mdW5jdGlvbiBiZWZvcmVVcGRhdGUoZm4pIHtcbiAgICBnZXRfY3VycmVudF9jb21wb25lbnQoKS4kJC5iZWZvcmVfdXBkYXRlLnB1c2goZm4pO1xufVxuLyoqXG4gKiBUaGUgYG9uTW91bnRgIGZ1bmN0aW9uIHNjaGVkdWxlcyBhIGNhbGxiYWNrIHRvIHJ1biBhcyBzb29uIGFzIHRoZSBjb21wb25lbnQgaGFzIGJlZW4gbW91bnRlZCB0byB0aGUgRE9NLlxuICogSXQgbXVzdCBiZSBjYWxsZWQgZHVyaW5nIHRoZSBjb21wb25lbnQncyBpbml0aWFsaXNhdGlvbiAoYnV0IGRvZXNuJ3QgbmVlZCB0byBsaXZlICppbnNpZGUqIHRoZSBjb21wb25lbnQ7XG4gKiBpdCBjYW4gYmUgY2FsbGVkIGZyb20gYW4gZXh0ZXJuYWwgbW9kdWxlKS5cbiAqXG4gKiBgb25Nb3VudGAgZG9lcyBub3QgcnVuIGluc2lkZSBhIFtzZXJ2ZXItc2lkZSBjb21wb25lbnRdKC9kb2NzI3J1bi10aW1lLXNlcnZlci1zaWRlLWNvbXBvbmVudC1hcGkpLlxuICpcbiAqIGh0dHBzOi8vc3ZlbHRlLmRldi9kb2NzI3J1bi10aW1lLXN2ZWx0ZS1vbm1vdW50XG4gKi9cbmZ1bmN0aW9uIG9uTW91bnQoZm4pIHtcbiAgICBnZXRfY3VycmVudF9jb21wb25lbnQoKS4kJC5vbl9tb3VudC5wdXNoKGZuKTtcbn1cbi8qKlxuICogU2NoZWR1bGVzIGEgY2FsbGJhY2sgdG8gcnVuIGltbWVkaWF0ZWx5IGFmdGVyIHRoZSBjb21wb25lbnQgaGFzIGJlZW4gdXBkYXRlZC5cbiAqXG4gKiBUaGUgZmlyc3QgdGltZSB0aGUgY2FsbGJhY2sgcnVucyB3aWxsIGJlIGFmdGVyIHRoZSBpbml0aWFsIGBvbk1vdW50YFxuICovXG5mdW5jdGlvbiBhZnRlclVwZGF0ZShmbikge1xuICAgIGdldF9jdXJyZW50X2NvbXBvbmVudCgpLiQkLmFmdGVyX3VwZGF0ZS5wdXNoKGZuKTtcbn1cbi8qKlxuICogU2NoZWR1bGVzIGEgY2FsbGJhY2sgdG8gcnVuIGltbWVkaWF0ZWx5IGJlZm9yZSB0aGUgY29tcG9uZW50IGlzIHVubW91bnRlZC5cbiAqXG4gKiBPdXQgb2YgYG9uTW91bnRgLCBgYmVmb3JlVXBkYXRlYCwgYGFmdGVyVXBkYXRlYCBhbmQgYG9uRGVzdHJveWAsIHRoaXMgaXMgdGhlXG4gKiBvbmx5IG9uZSB0aGF0IHJ1bnMgaW5zaWRlIGEgc2VydmVyLXNpZGUgY29tcG9uZW50LlxuICpcbiAqIGh0dHBzOi8vc3ZlbHRlLmRldi9kb2NzI3J1bi10aW1lLXN2ZWx0ZS1vbmRlc3Ryb3lcbiAqL1xuZnVuY3Rpb24gb25EZXN0cm95KGZuKSB7XG4gICAgZ2V0X2N1cnJlbnRfY29tcG9uZW50KCkuJCQub25fZGVzdHJveS5wdXNoKGZuKTtcbn1cbi8qKlxuICogQ3JlYXRlcyBhbiBldmVudCBkaXNwYXRjaGVyIHRoYXQgY2FuIGJlIHVzZWQgdG8gZGlzcGF0Y2ggW2NvbXBvbmVudCBldmVudHNdKC9kb2NzI3RlbXBsYXRlLXN5bnRheC1jb21wb25lbnQtZGlyZWN0aXZlcy1vbi1ldmVudG5hbWUpLlxuICogRXZlbnQgZGlzcGF0Y2hlcnMgYXJlIGZ1bmN0aW9ucyB0aGF0IGNhbiB0YWtlIHR3byBhcmd1bWVudHM6IGBuYW1lYCBhbmQgYGRldGFpbGAuXG4gKlxuICogQ29tcG9uZW50IGV2ZW50cyBjcmVhdGVkIHdpdGggYGNyZWF0ZUV2ZW50RGlzcGF0Y2hlcmAgY3JlYXRlIGFcbiAqIFtDdXN0b21FdmVudF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0N1c3RvbUV2ZW50KS5cbiAqIFRoZXNlIGV2ZW50cyBkbyBub3QgW2J1YmJsZV0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9MZWFybi9KYXZhU2NyaXB0L0J1aWxkaW5nX2Jsb2Nrcy9FdmVudHMjRXZlbnRfYnViYmxpbmdfYW5kX2NhcHR1cmUpLlxuICogVGhlIGBkZXRhaWxgIGFyZ3VtZW50IGNvcnJlc3BvbmRzIHRvIHRoZSBbQ3VzdG9tRXZlbnQuZGV0YWlsXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvQ3VzdG9tRXZlbnQvZGV0YWlsKVxuICogcHJvcGVydHkgYW5kIGNhbiBjb250YWluIGFueSB0eXBlIG9mIGRhdGEuXG4gKlxuICogaHR0cHM6Ly9zdmVsdGUuZGV2L2RvY3MjcnVuLXRpbWUtc3ZlbHRlLWNyZWF0ZWV2ZW50ZGlzcGF0Y2hlclxuICovXG5mdW5jdGlvbiBjcmVhdGVFdmVudERpc3BhdGNoZXIoKSB7XG4gICAgY29uc3QgY29tcG9uZW50ID0gZ2V0X2N1cnJlbnRfY29tcG9uZW50KCk7XG4gICAgcmV0dXJuICh0eXBlLCBkZXRhaWwsIHsgY2FuY2VsYWJsZSA9IGZhbHNlIH0gPSB7fSkgPT4ge1xuICAgICAgICBjb25zdCBjYWxsYmFja3MgPSBjb21wb25lbnQuJCQuY2FsbGJhY2tzW3R5cGVdO1xuICAgICAgICBpZiAoY2FsbGJhY2tzKSB7XG4gICAgICAgICAgICAvLyBUT0RPIGFyZSB0aGVyZSBzaXR1YXRpb25zIHdoZXJlIGV2ZW50cyBjb3VsZCBiZSBkaXNwYXRjaGVkXG4gICAgICAgICAgICAvLyBpbiBhIHNlcnZlciAobm9uLURPTSkgZW52aXJvbm1lbnQ/XG4gICAgICAgICAgICBjb25zdCBldmVudCA9IGN1c3RvbV9ldmVudCh0eXBlLCBkZXRhaWwsIHsgY2FuY2VsYWJsZSB9KTtcbiAgICAgICAgICAgIGNhbGxiYWNrcy5zbGljZSgpLmZvckVhY2goZm4gPT4ge1xuICAgICAgICAgICAgICAgIGZuLmNhbGwoY29tcG9uZW50LCBldmVudCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiAhZXZlbnQuZGVmYXVsdFByZXZlbnRlZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xufVxuLyoqXG4gKiBBc3NvY2lhdGVzIGFuIGFyYml0cmFyeSBgY29udGV4dGAgb2JqZWN0IHdpdGggdGhlIGN1cnJlbnQgY29tcG9uZW50IGFuZCB0aGUgc3BlY2lmaWVkIGBrZXlgXG4gKiBhbmQgcmV0dXJucyB0aGF0IG9iamVjdC4gVGhlIGNvbnRleHQgaXMgdGhlbiBhdmFpbGFibGUgdG8gY2hpbGRyZW4gb2YgdGhlIGNvbXBvbmVudFxuICogKGluY2x1ZGluZyBzbG90dGVkIGNvbnRlbnQpIHdpdGggYGdldENvbnRleHRgLlxuICpcbiAqIExpa2UgbGlmZWN5Y2xlIGZ1bmN0aW9ucywgdGhpcyBtdXN0IGJlIGNhbGxlZCBkdXJpbmcgY29tcG9uZW50IGluaXRpYWxpc2F0aW9uLlxuICpcbiAqIGh0dHBzOi8vc3ZlbHRlLmRldi9kb2NzI3J1bi10aW1lLXN2ZWx0ZS1zZXRjb250ZXh0XG4gKi9cbmZ1bmN0aW9uIHNldENvbnRleHQoa2V5LCBjb250ZXh0KSB7XG4gICAgZ2V0X2N1cnJlbnRfY29tcG9uZW50KCkuJCQuY29udGV4dC5zZXQoa2V5LCBjb250ZXh0KTtcbiAgICByZXR1cm4gY29udGV4dDtcbn1cbi8qKlxuICogUmV0cmlldmVzIHRoZSBjb250ZXh0IHRoYXQgYmVsb25ncyB0byB0aGUgY2xvc2VzdCBwYXJlbnQgY29tcG9uZW50IHdpdGggdGhlIHNwZWNpZmllZCBga2V5YC5cbiAqIE11c3QgYmUgY2FsbGVkIGR1cmluZyBjb21wb25lbnQgaW5pdGlhbGlzYXRpb24uXG4gKlxuICogaHR0cHM6Ly9zdmVsdGUuZGV2L2RvY3MjcnVuLXRpbWUtc3ZlbHRlLWdldGNvbnRleHRcbiAqL1xuZnVuY3Rpb24gZ2V0Q29udGV4dChrZXkpIHtcbiAgICByZXR1cm4gZ2V0X2N1cnJlbnRfY29tcG9uZW50KCkuJCQuY29udGV4dC5nZXQoa2V5KTtcbn1cbi8qKlxuICogUmV0cmlldmVzIHRoZSB3aG9sZSBjb250ZXh0IG1hcCB0aGF0IGJlbG9uZ3MgdG8gdGhlIGNsb3Nlc3QgcGFyZW50IGNvbXBvbmVudC5cbiAqIE11c3QgYmUgY2FsbGVkIGR1cmluZyBjb21wb25lbnQgaW5pdGlhbGlzYXRpb24uIFVzZWZ1bCwgZm9yIGV4YW1wbGUsIGlmIHlvdVxuICogcHJvZ3JhbW1hdGljYWxseSBjcmVhdGUgYSBjb21wb25lbnQgYW5kIHdhbnQgdG8gcGFzcyB0aGUgZXhpc3RpbmcgY29udGV4dCB0byBpdC5cbiAqXG4gKiBodHRwczovL3N2ZWx0ZS5kZXYvZG9jcyNydW4tdGltZS1zdmVsdGUtZ2V0YWxsY29udGV4dHNcbiAqL1xuZnVuY3Rpb24gZ2V0QWxsQ29udGV4dHMoKSB7XG4gICAgcmV0dXJuIGdldF9jdXJyZW50X2NvbXBvbmVudCgpLiQkLmNvbnRleHQ7XG59XG4vKipcbiAqIENoZWNrcyB3aGV0aGVyIGEgZ2l2ZW4gYGtleWAgaGFzIGJlZW4gc2V0IGluIHRoZSBjb250ZXh0IG9mIGEgcGFyZW50IGNvbXBvbmVudC5cbiAqIE11c3QgYmUgY2FsbGVkIGR1cmluZyBjb21wb25lbnQgaW5pdGlhbGlzYXRpb24uXG4gKlxuICogaHR0cHM6Ly9zdmVsdGUuZGV2L2RvY3MjcnVuLXRpbWUtc3ZlbHRlLWhhc2NvbnRleHRcbiAqL1xuZnVuY3Rpb24gaGFzQ29udGV4dChrZXkpIHtcbiAgICByZXR1cm4gZ2V0X2N1cnJlbnRfY29tcG9uZW50KCkuJCQuY29udGV4dC5oYXMoa2V5KTtcbn1cbi8vIFRPRE8gZmlndXJlIG91dCBpZiB3ZSBzdGlsbCB3YW50IHRvIHN1cHBvcnRcbi8vIHNob3J0aGFuZCBldmVudHMsIG9yIGlmIHdlIHdhbnQgdG8gaW1wbGVtZW50XG4vLyBhIHJlYWwgYnViYmxpbmcgbWVjaGFuaXNtXG5mdW5jdGlvbiBidWJibGUoY29tcG9uZW50LCBldmVudCkge1xuICAgIGNvbnN0IGNhbGxiYWNrcyA9IGNvbXBvbmVudC4kJC5jYWxsYmFja3NbZXZlbnQudHlwZV07XG4gICAgaWYgKGNhbGxiYWNrcykge1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGNhbGxiYWNrcy5zbGljZSgpLmZvckVhY2goZm4gPT4gZm4uY2FsbCh0aGlzLCBldmVudCkpO1xuICAgIH1cbn1cblxuY29uc3QgZGlydHlfY29tcG9uZW50cyA9IFtdO1xuY29uc3QgaW50cm9zID0geyBlbmFibGVkOiBmYWxzZSB9O1xuY29uc3QgYmluZGluZ19jYWxsYmFja3MgPSBbXTtcbmNvbnN0IHJlbmRlcl9jYWxsYmFja3MgPSBbXTtcbmNvbnN0IGZsdXNoX2NhbGxiYWNrcyA9IFtdO1xuY29uc3QgcmVzb2x2ZWRfcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSgpO1xubGV0IHVwZGF0ZV9zY2hlZHVsZWQgPSBmYWxzZTtcbmZ1bmN0aW9uIHNjaGVkdWxlX3VwZGF0ZSgpIHtcbiAgICBpZiAoIXVwZGF0ZV9zY2hlZHVsZWQpIHtcbiAgICAgICAgdXBkYXRlX3NjaGVkdWxlZCA9IHRydWU7XG4gICAgICAgIHJlc29sdmVkX3Byb21pc2UudGhlbihmbHVzaCk7XG4gICAgfVxufVxuZnVuY3Rpb24gdGljaygpIHtcbiAgICBzY2hlZHVsZV91cGRhdGUoKTtcbiAgICByZXR1cm4gcmVzb2x2ZWRfcHJvbWlzZTtcbn1cbmZ1bmN0aW9uIGFkZF9yZW5kZXJfY2FsbGJhY2soZm4pIHtcbiAgICByZW5kZXJfY2FsbGJhY2tzLnB1c2goZm4pO1xufVxuZnVuY3Rpb24gYWRkX2ZsdXNoX2NhbGxiYWNrKGZuKSB7XG4gICAgZmx1c2hfY2FsbGJhY2tzLnB1c2goZm4pO1xufVxuLy8gZmx1c2goKSBjYWxscyBjYWxsYmFja3MgaW4gdGhpcyBvcmRlcjpcbi8vIDEuIEFsbCBiZWZvcmVVcGRhdGUgY2FsbGJhY2tzLCBpbiBvcmRlcjogcGFyZW50cyBiZWZvcmUgY2hpbGRyZW5cbi8vIDIuIEFsbCBiaW5kOnRoaXMgY2FsbGJhY2tzLCBpbiByZXZlcnNlIG9yZGVyOiBjaGlsZHJlbiBiZWZvcmUgcGFyZW50cy5cbi8vIDMuIEFsbCBhZnRlclVwZGF0ZSBjYWxsYmFja3MsIGluIG9yZGVyOiBwYXJlbnRzIGJlZm9yZSBjaGlsZHJlbi4gRVhDRVBUXG4vLyAgICBmb3IgYWZ0ZXJVcGRhdGVzIGNhbGxlZCBkdXJpbmcgdGhlIGluaXRpYWwgb25Nb3VudCwgd2hpY2ggYXJlIGNhbGxlZCBpblxuLy8gICAgcmV2ZXJzZSBvcmRlcjogY2hpbGRyZW4gYmVmb3JlIHBhcmVudHMuXG4vLyBTaW5jZSBjYWxsYmFja3MgbWlnaHQgdXBkYXRlIGNvbXBvbmVudCB2YWx1ZXMsIHdoaWNoIGNvdWxkIHRyaWdnZXIgYW5vdGhlclxuLy8gY2FsbCB0byBmbHVzaCgpLCB0aGUgZm9sbG93aW5nIHN0ZXBzIGd1YXJkIGFnYWluc3QgdGhpczpcbi8vIDEuIER1cmluZyBiZWZvcmVVcGRhdGUsIGFueSB1cGRhdGVkIGNvbXBvbmVudHMgd2lsbCBiZSBhZGRlZCB0byB0aGVcbi8vICAgIGRpcnR5X2NvbXBvbmVudHMgYXJyYXkgYW5kIHdpbGwgY2F1c2UgYSByZWVudHJhbnQgY2FsbCB0byBmbHVzaCgpLiBCZWNhdXNlXG4vLyAgICB0aGUgZmx1c2ggaW5kZXggaXMga2VwdCBvdXRzaWRlIHRoZSBmdW5jdGlvbiwgdGhlIHJlZW50cmFudCBjYWxsIHdpbGwgcGlja1xuLy8gICAgdXAgd2hlcmUgdGhlIGVhcmxpZXIgY2FsbCBsZWZ0IG9mZiBhbmQgZ28gdGhyb3VnaCBhbGwgZGlydHkgY29tcG9uZW50cy4gVGhlXG4vLyAgICBjdXJyZW50X2NvbXBvbmVudCB2YWx1ZSBpcyBzYXZlZCBhbmQgcmVzdG9yZWQgc28gdGhhdCB0aGUgcmVlbnRyYW50IGNhbGwgd2lsbFxuLy8gICAgbm90IGludGVyZmVyZSB3aXRoIHRoZSBcInBhcmVudFwiIGZsdXNoKCkgY2FsbC5cbi8vIDIuIGJpbmQ6dGhpcyBjYWxsYmFja3MgY2Fubm90IHRyaWdnZXIgbmV3IGZsdXNoKCkgY2FsbHMuXG4vLyAzLiBEdXJpbmcgYWZ0ZXJVcGRhdGUsIGFueSB1cGRhdGVkIGNvbXBvbmVudHMgd2lsbCBOT1QgaGF2ZSB0aGVpciBhZnRlclVwZGF0ZVxuLy8gICAgY2FsbGJhY2sgY2FsbGVkIGEgc2Vjb25kIHRpbWU7IHRoZSBzZWVuX2NhbGxiYWNrcyBzZXQsIG91dHNpZGUgdGhlIGZsdXNoKClcbi8vICAgIGZ1bmN0aW9uLCBndWFyYW50ZWVzIHRoaXMgYmVoYXZpb3IuXG5jb25zdCBzZWVuX2NhbGxiYWNrcyA9IG5ldyBTZXQoKTtcbmxldCBmbHVzaGlkeCA9IDA7IC8vIERvICpub3QqIG1vdmUgdGhpcyBpbnNpZGUgdGhlIGZsdXNoKCkgZnVuY3Rpb25cbmZ1bmN0aW9uIGZsdXNoKCkge1xuICAgIGNvbnN0IHNhdmVkX2NvbXBvbmVudCA9IGN1cnJlbnRfY29tcG9uZW50O1xuICAgIGRvIHtcbiAgICAgICAgLy8gZmlyc3QsIGNhbGwgYmVmb3JlVXBkYXRlIGZ1bmN0aW9uc1xuICAgICAgICAvLyBhbmQgdXBkYXRlIGNvbXBvbmVudHNcbiAgICAgICAgd2hpbGUgKGZsdXNoaWR4IDwgZGlydHlfY29tcG9uZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbXBvbmVudCA9IGRpcnR5X2NvbXBvbmVudHNbZmx1c2hpZHhdO1xuICAgICAgICAgICAgZmx1c2hpZHgrKztcbiAgICAgICAgICAgIHNldF9jdXJyZW50X2NvbXBvbmVudChjb21wb25lbnQpO1xuICAgICAgICAgICAgdXBkYXRlKGNvbXBvbmVudC4kJCk7XG4gICAgICAgIH1cbiAgICAgICAgc2V0X2N1cnJlbnRfY29tcG9uZW50KG51bGwpO1xuICAgICAgICBkaXJ0eV9jb21wb25lbnRzLmxlbmd0aCA9IDA7XG4gICAgICAgIGZsdXNoaWR4ID0gMDtcbiAgICAgICAgd2hpbGUgKGJpbmRpbmdfY2FsbGJhY2tzLmxlbmd0aClcbiAgICAgICAgICAgIGJpbmRpbmdfY2FsbGJhY2tzLnBvcCgpKCk7XG4gICAgICAgIC8vIHRoZW4sIG9uY2UgY29tcG9uZW50cyBhcmUgdXBkYXRlZCwgY2FsbFxuICAgICAgICAvLyBhZnRlclVwZGF0ZSBmdW5jdGlvbnMuIFRoaXMgbWF5IGNhdXNlXG4gICAgICAgIC8vIHN1YnNlcXVlbnQgdXBkYXRlcy4uLlxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJlbmRlcl9jYWxsYmFja3MubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIGNvbnN0IGNhbGxiYWNrID0gcmVuZGVyX2NhbGxiYWNrc1tpXTtcbiAgICAgICAgICAgIGlmICghc2Vlbl9jYWxsYmFja3MuaGFzKGNhbGxiYWNrKSkge1xuICAgICAgICAgICAgICAgIC8vIC4uLnNvIGd1YXJkIGFnYWluc3QgaW5maW5pdGUgbG9vcHNcbiAgICAgICAgICAgICAgICBzZWVuX2NhbGxiYWNrcy5hZGQoY2FsbGJhY2spO1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmVuZGVyX2NhbGxiYWNrcy5sZW5ndGggPSAwO1xuICAgIH0gd2hpbGUgKGRpcnR5X2NvbXBvbmVudHMubGVuZ3RoKTtcbiAgICB3aGlsZSAoZmx1c2hfY2FsbGJhY2tzLmxlbmd0aCkge1xuICAgICAgICBmbHVzaF9jYWxsYmFja3MucG9wKCkoKTtcbiAgICB9XG4gICAgdXBkYXRlX3NjaGVkdWxlZCA9IGZhbHNlO1xuICAgIHNlZW5fY2FsbGJhY2tzLmNsZWFyKCk7XG4gICAgc2V0X2N1cnJlbnRfY29tcG9uZW50KHNhdmVkX2NvbXBvbmVudCk7XG59XG5mdW5jdGlvbiB1cGRhdGUoJCQpIHtcbiAgICBpZiAoJCQuZnJhZ21lbnQgIT09IG51bGwpIHtcbiAgICAgICAgJCQudXBkYXRlKCk7XG4gICAgICAgIHJ1bl9hbGwoJCQuYmVmb3JlX3VwZGF0ZSk7XG4gICAgICAgIGNvbnN0IGRpcnR5ID0gJCQuZGlydHk7XG4gICAgICAgICQkLmRpcnR5ID0gWy0xXTtcbiAgICAgICAgJCQuZnJhZ21lbnQgJiYgJCQuZnJhZ21lbnQucCgkJC5jdHgsIGRpcnR5KTtcbiAgICAgICAgJCQuYWZ0ZXJfdXBkYXRlLmZvckVhY2goYWRkX3JlbmRlcl9jYWxsYmFjayk7XG4gICAgfVxufVxuXG5sZXQgcHJvbWlzZTtcbmZ1bmN0aW9uIHdhaXQoKSB7XG4gICAgaWYgKCFwcm9taXNlKSB7XG4gICAgICAgIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgICAgcHJvbWlzZS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIHByb21pc2UgPSBudWxsO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHByb21pc2U7XG59XG5mdW5jdGlvbiBkaXNwYXRjaChub2RlLCBkaXJlY3Rpb24sIGtpbmQpIHtcbiAgICBub2RlLmRpc3BhdGNoRXZlbnQoY3VzdG9tX2V2ZW50KGAke2RpcmVjdGlvbiA/ICdpbnRybycgOiAnb3V0cm8nfSR7a2luZH1gKSk7XG59XG5jb25zdCBvdXRyb2luZyA9IG5ldyBTZXQoKTtcbmxldCBvdXRyb3M7XG5mdW5jdGlvbiBncm91cF9vdXRyb3MoKSB7XG4gICAgb3V0cm9zID0ge1xuICAgICAgICByOiAwLFxuICAgICAgICBjOiBbXSxcbiAgICAgICAgcDogb3V0cm9zIC8vIHBhcmVudCBncm91cFxuICAgIH07XG59XG5mdW5jdGlvbiBjaGVja19vdXRyb3MoKSB7XG4gICAgaWYgKCFvdXRyb3Mucikge1xuICAgICAgICBydW5fYWxsKG91dHJvcy5jKTtcbiAgICB9XG4gICAgb3V0cm9zID0gb3V0cm9zLnA7XG59XG5mdW5jdGlvbiB0cmFuc2l0aW9uX2luKGJsb2NrLCBsb2NhbCkge1xuICAgIGlmIChibG9jayAmJiBibG9jay5pKSB7XG4gICAgICAgIG91dHJvaW5nLmRlbGV0ZShibG9jayk7XG4gICAgICAgIGJsb2NrLmkobG9jYWwpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHRyYW5zaXRpb25fb3V0KGJsb2NrLCBsb2NhbCwgZGV0YWNoLCBjYWxsYmFjaykge1xuICAgIGlmIChibG9jayAmJiBibG9jay5vKSB7XG4gICAgICAgIGlmIChvdXRyb2luZy5oYXMoYmxvY2spKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBvdXRyb2luZy5hZGQoYmxvY2spO1xuICAgICAgICBvdXRyb3MuYy5wdXNoKCgpID0+IHtcbiAgICAgICAgICAgIG91dHJvaW5nLmRlbGV0ZShibG9jayk7XG4gICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICBpZiAoZGV0YWNoKVxuICAgICAgICAgICAgICAgICAgICBibG9jay5kKDEpO1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBibG9jay5vKGxvY2FsKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgY2FsbGJhY2soKTtcbiAgICB9XG59XG5jb25zdCBudWxsX3RyYW5zaXRpb24gPSB7IGR1cmF0aW9uOiAwIH07XG5mdW5jdGlvbiBjcmVhdGVfaW5fdHJhbnNpdGlvbihub2RlLCBmbiwgcGFyYW1zKSB7XG4gICAgbGV0IGNvbmZpZyA9IGZuKG5vZGUsIHBhcmFtcyk7XG4gICAgbGV0IHJ1bm5pbmcgPSBmYWxzZTtcbiAgICBsZXQgYW5pbWF0aW9uX25hbWU7XG4gICAgbGV0IHRhc2s7XG4gICAgbGV0IHVpZCA9IDA7XG4gICAgZnVuY3Rpb24gY2xlYW51cCgpIHtcbiAgICAgICAgaWYgKGFuaW1hdGlvbl9uYW1lKVxuICAgICAgICAgICAgZGVsZXRlX3J1bGUobm9kZSwgYW5pbWF0aW9uX25hbWUpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBnbygpIHtcbiAgICAgICAgY29uc3QgeyBkZWxheSA9IDAsIGR1cmF0aW9uID0gMzAwLCBlYXNpbmcgPSBpZGVudGl0eSwgdGljayA9IG5vb3AsIGNzcyB9ID0gY29uZmlnIHx8IG51bGxfdHJhbnNpdGlvbjtcbiAgICAgICAgaWYgKGNzcylcbiAgICAgICAgICAgIGFuaW1hdGlvbl9uYW1lID0gY3JlYXRlX3J1bGUobm9kZSwgMCwgMSwgZHVyYXRpb24sIGRlbGF5LCBlYXNpbmcsIGNzcywgdWlkKyspO1xuICAgICAgICB0aWNrKDAsIDEpO1xuICAgICAgICBjb25zdCBzdGFydF90aW1lID0gbm93KCkgKyBkZWxheTtcbiAgICAgICAgY29uc3QgZW5kX3RpbWUgPSBzdGFydF90aW1lICsgZHVyYXRpb247XG4gICAgICAgIGlmICh0YXNrKVxuICAgICAgICAgICAgdGFzay5hYm9ydCgpO1xuICAgICAgICBydW5uaW5nID0gdHJ1ZTtcbiAgICAgICAgYWRkX3JlbmRlcl9jYWxsYmFjaygoKSA9PiBkaXNwYXRjaChub2RlLCB0cnVlLCAnc3RhcnQnKSk7XG4gICAgICAgIHRhc2sgPSBsb29wKG5vdyA9PiB7XG4gICAgICAgICAgICBpZiAocnVubmluZykge1xuICAgICAgICAgICAgICAgIGlmIChub3cgPj0gZW5kX3RpbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGljaygxLCAwKTtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2gobm9kZSwgdHJ1ZSwgJ2VuZCcpO1xuICAgICAgICAgICAgICAgICAgICBjbGVhbnVwKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBydW5uaW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChub3cgPj0gc3RhcnRfdGltZSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0ID0gZWFzaW5nKChub3cgLSBzdGFydF90aW1lKSAvIGR1cmF0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgdGljayh0LCAxIC0gdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJ1bm5pbmc7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBsZXQgc3RhcnRlZCA9IGZhbHNlO1xuICAgIHJldHVybiB7XG4gICAgICAgIHN0YXJ0KCkge1xuICAgICAgICAgICAgaWYgKHN0YXJ0ZWQpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgc3RhcnRlZCA9IHRydWU7XG4gICAgICAgICAgICBkZWxldGVfcnVsZShub2RlKTtcbiAgICAgICAgICAgIGlmIChpc19mdW5jdGlvbihjb25maWcpKSB7XG4gICAgICAgICAgICAgICAgY29uZmlnID0gY29uZmlnKCk7XG4gICAgICAgICAgICAgICAgd2FpdCgpLnRoZW4oZ28pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZ28oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgaW52YWxpZGF0ZSgpIHtcbiAgICAgICAgICAgIHN0YXJ0ZWQgPSBmYWxzZTtcbiAgICAgICAgfSxcbiAgICAgICAgZW5kKCkge1xuICAgICAgICAgICAgaWYgKHJ1bm5pbmcpIHtcbiAgICAgICAgICAgICAgICBjbGVhbnVwKCk7XG4gICAgICAgICAgICAgICAgcnVubmluZyA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9vdXRfdHJhbnNpdGlvbihub2RlLCBmbiwgcGFyYW1zKSB7XG4gICAgbGV0IGNvbmZpZyA9IGZuKG5vZGUsIHBhcmFtcyk7XG4gICAgbGV0IHJ1bm5pbmcgPSB0cnVlO1xuICAgIGxldCBhbmltYXRpb25fbmFtZTtcbiAgICBjb25zdCBncm91cCA9IG91dHJvcztcbiAgICBncm91cC5yICs9IDE7XG4gICAgZnVuY3Rpb24gZ28oKSB7XG4gICAgICAgIGNvbnN0IHsgZGVsYXkgPSAwLCBkdXJhdGlvbiA9IDMwMCwgZWFzaW5nID0gaWRlbnRpdHksIHRpY2sgPSBub29wLCBjc3MgfSA9IGNvbmZpZyB8fCBudWxsX3RyYW5zaXRpb247XG4gICAgICAgIGlmIChjc3MpXG4gICAgICAgICAgICBhbmltYXRpb25fbmFtZSA9IGNyZWF0ZV9ydWxlKG5vZGUsIDEsIDAsIGR1cmF0aW9uLCBkZWxheSwgZWFzaW5nLCBjc3MpO1xuICAgICAgICBjb25zdCBzdGFydF90aW1lID0gbm93KCkgKyBkZWxheTtcbiAgICAgICAgY29uc3QgZW5kX3RpbWUgPSBzdGFydF90aW1lICsgZHVyYXRpb247XG4gICAgICAgIGFkZF9yZW5kZXJfY2FsbGJhY2soKCkgPT4gZGlzcGF0Y2gobm9kZSwgZmFsc2UsICdzdGFydCcpKTtcbiAgICAgICAgbG9vcChub3cgPT4ge1xuICAgICAgICAgICAgaWYgKHJ1bm5pbmcpIHtcbiAgICAgICAgICAgICAgICBpZiAobm93ID49IGVuZF90aW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIHRpY2soMCwgMSk7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoKG5vZGUsIGZhbHNlLCAnZW5kJyk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghLS1ncm91cC5yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0aGlzIHdpbGwgcmVzdWx0IGluIGBlbmQoKWAgYmVpbmcgY2FsbGVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gc28gd2UgZG9uJ3QgbmVlZCB0byBjbGVhbiB1cCBoZXJlXG4gICAgICAgICAgICAgICAgICAgICAgICBydW5fYWxsKGdyb3VwLmMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG5vdyA+PSBzdGFydF90aW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBlYXNpbmcoKG5vdyAtIHN0YXJ0X3RpbWUpIC8gZHVyYXRpb24pO1xuICAgICAgICAgICAgICAgICAgICB0aWNrKDEgLSB0LCB0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcnVubmluZztcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChpc19mdW5jdGlvbihjb25maWcpKSB7XG4gICAgICAgIHdhaXQoKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgIGNvbmZpZyA9IGNvbmZpZygpO1xuICAgICAgICAgICAgZ28oKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBnbygpO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBlbmQocmVzZXQpIHtcbiAgICAgICAgICAgIGlmIChyZXNldCAmJiBjb25maWcudGljaykge1xuICAgICAgICAgICAgICAgIGNvbmZpZy50aWNrKDEsIDApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHJ1bm5pbmcpIHtcbiAgICAgICAgICAgICAgICBpZiAoYW5pbWF0aW9uX25hbWUpXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZV9ydWxlKG5vZGUsIGFuaW1hdGlvbl9uYW1lKTtcbiAgICAgICAgICAgICAgICBydW5uaW5nID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlX2JpZGlyZWN0aW9uYWxfdHJhbnNpdGlvbihub2RlLCBmbiwgcGFyYW1zLCBpbnRybykge1xuICAgIGxldCBjb25maWcgPSBmbihub2RlLCBwYXJhbXMpO1xuICAgIGxldCB0ID0gaW50cm8gPyAwIDogMTtcbiAgICBsZXQgcnVubmluZ19wcm9ncmFtID0gbnVsbDtcbiAgICBsZXQgcGVuZGluZ19wcm9ncmFtID0gbnVsbDtcbiAgICBsZXQgYW5pbWF0aW9uX25hbWUgPSBudWxsO1xuICAgIGZ1bmN0aW9uIGNsZWFyX2FuaW1hdGlvbigpIHtcbiAgICAgICAgaWYgKGFuaW1hdGlvbl9uYW1lKVxuICAgICAgICAgICAgZGVsZXRlX3J1bGUobm9kZSwgYW5pbWF0aW9uX25hbWUpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBpbml0KHByb2dyYW0sIGR1cmF0aW9uKSB7XG4gICAgICAgIGNvbnN0IGQgPSAocHJvZ3JhbS5iIC0gdCk7XG4gICAgICAgIGR1cmF0aW9uICo9IE1hdGguYWJzKGQpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYTogdCxcbiAgICAgICAgICAgIGI6IHByb2dyYW0uYixcbiAgICAgICAgICAgIGQsXG4gICAgICAgICAgICBkdXJhdGlvbixcbiAgICAgICAgICAgIHN0YXJ0OiBwcm9ncmFtLnN0YXJ0LFxuICAgICAgICAgICAgZW5kOiBwcm9ncmFtLnN0YXJ0ICsgZHVyYXRpb24sXG4gICAgICAgICAgICBncm91cDogcHJvZ3JhbS5ncm91cFxuICAgICAgICB9O1xuICAgIH1cbiAgICBmdW5jdGlvbiBnbyhiKSB7XG4gICAgICAgIGNvbnN0IHsgZGVsYXkgPSAwLCBkdXJhdGlvbiA9IDMwMCwgZWFzaW5nID0gaWRlbnRpdHksIHRpY2sgPSBub29wLCBjc3MgfSA9IGNvbmZpZyB8fCBudWxsX3RyYW5zaXRpb247XG4gICAgICAgIGNvbnN0IHByb2dyYW0gPSB7XG4gICAgICAgICAgICBzdGFydDogbm93KCkgKyBkZWxheSxcbiAgICAgICAgICAgIGJcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKCFiKSB7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlIHRvZG86IGltcHJvdmUgdHlwaW5nc1xuICAgICAgICAgICAgcHJvZ3JhbS5ncm91cCA9IG91dHJvcztcbiAgICAgICAgICAgIG91dHJvcy5yICs9IDE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHJ1bm5pbmdfcHJvZ3JhbSB8fCBwZW5kaW5nX3Byb2dyYW0pIHtcbiAgICAgICAgICAgIHBlbmRpbmdfcHJvZ3JhbSA9IHByb2dyYW07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBpZiB0aGlzIGlzIGFuIGludHJvLCBhbmQgdGhlcmUncyBhIGRlbGF5LCB3ZSBuZWVkIHRvIGRvXG4gICAgICAgICAgICAvLyBhbiBpbml0aWFsIHRpY2sgYW5kL29yIGFwcGx5IENTUyBhbmltYXRpb24gaW1tZWRpYXRlbHlcbiAgICAgICAgICAgIGlmIChjc3MpIHtcbiAgICAgICAgICAgICAgICBjbGVhcl9hbmltYXRpb24oKTtcbiAgICAgICAgICAgICAgICBhbmltYXRpb25fbmFtZSA9IGNyZWF0ZV9ydWxlKG5vZGUsIHQsIGIsIGR1cmF0aW9uLCBkZWxheSwgZWFzaW5nLCBjc3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGIpXG4gICAgICAgICAgICAgICAgdGljaygwLCAxKTtcbiAgICAgICAgICAgIHJ1bm5pbmdfcHJvZ3JhbSA9IGluaXQocHJvZ3JhbSwgZHVyYXRpb24pO1xuICAgICAgICAgICAgYWRkX3JlbmRlcl9jYWxsYmFjaygoKSA9PiBkaXNwYXRjaChub2RlLCBiLCAnc3RhcnQnKSk7XG4gICAgICAgICAgICBsb29wKG5vdyA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHBlbmRpbmdfcHJvZ3JhbSAmJiBub3cgPiBwZW5kaW5nX3Byb2dyYW0uc3RhcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgcnVubmluZ19wcm9ncmFtID0gaW5pdChwZW5kaW5nX3Byb2dyYW0sIGR1cmF0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgcGVuZGluZ19wcm9ncmFtID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2gobm9kZSwgcnVubmluZ19wcm9ncmFtLmIsICdzdGFydCcpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY3NzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbGVhcl9hbmltYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbl9uYW1lID0gY3JlYXRlX3J1bGUobm9kZSwgdCwgcnVubmluZ19wcm9ncmFtLmIsIHJ1bm5pbmdfcHJvZ3JhbS5kdXJhdGlvbiwgMCwgZWFzaW5nLCBjb25maWcuY3NzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocnVubmluZ19wcm9ncmFtKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChub3cgPj0gcnVubmluZ19wcm9ncmFtLmVuZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGljayh0ID0gcnVubmluZ19wcm9ncmFtLmIsIDEgLSB0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoKG5vZGUsIHJ1bm5pbmdfcHJvZ3JhbS5iLCAnZW5kJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXBlbmRpbmdfcHJvZ3JhbSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdlJ3JlIGRvbmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocnVubmluZ19wcm9ncmFtLmIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaW50cm8gXHUyMDE0IHdlIGNhbiB0aWR5IHVwIGltbWVkaWF0ZWx5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyX2FuaW1hdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gb3V0cm8gXHUyMDE0IG5lZWRzIHRvIGJlIGNvb3JkaW5hdGVkXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghLS1ydW5uaW5nX3Byb2dyYW0uZ3JvdXAucilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ1bl9hbGwocnVubmluZ19wcm9ncmFtLmdyb3VwLmMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJ1bm5pbmdfcHJvZ3JhbSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAobm93ID49IHJ1bm5pbmdfcHJvZ3JhbS5zdGFydCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcCA9IG5vdyAtIHJ1bm5pbmdfcHJvZ3JhbS5zdGFydDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHQgPSBydW5uaW5nX3Byb2dyYW0uYSArIHJ1bm5pbmdfcHJvZ3JhbS5kICogZWFzaW5nKHAgLyBydW5uaW5nX3Byb2dyYW0uZHVyYXRpb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGljayh0LCAxIC0gdCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuICEhKHJ1bm5pbmdfcHJvZ3JhbSB8fCBwZW5kaW5nX3Byb2dyYW0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcnVuKGIpIHtcbiAgICAgICAgICAgIGlmIChpc19mdW5jdGlvbihjb25maWcpKSB7XG4gICAgICAgICAgICAgICAgd2FpdCgpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZyA9IGNvbmZpZygpO1xuICAgICAgICAgICAgICAgICAgICBnbyhiKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGdvKGIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBlbmQoKSB7XG4gICAgICAgICAgICBjbGVhcl9hbmltYXRpb24oKTtcbiAgICAgICAgICAgIHJ1bm5pbmdfcHJvZ3JhbSA9IHBlbmRpbmdfcHJvZ3JhbSA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9O1xufVxuXG5mdW5jdGlvbiBoYW5kbGVfcHJvbWlzZShwcm9taXNlLCBpbmZvKSB7XG4gICAgY29uc3QgdG9rZW4gPSBpbmZvLnRva2VuID0ge307XG4gICAgZnVuY3Rpb24gdXBkYXRlKHR5cGUsIGluZGV4LCBrZXksIHZhbHVlKSB7XG4gICAgICAgIGlmIChpbmZvLnRva2VuICE9PSB0b2tlbilcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgaW5mby5yZXNvbHZlZCA9IHZhbHVlO1xuICAgICAgICBsZXQgY2hpbGRfY3R4ID0gaW5mby5jdHg7XG4gICAgICAgIGlmIChrZXkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY2hpbGRfY3R4ID0gY2hpbGRfY3R4LnNsaWNlKCk7XG4gICAgICAgICAgICBjaGlsZF9jdHhba2V5XSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGJsb2NrID0gdHlwZSAmJiAoaW5mby5jdXJyZW50ID0gdHlwZSkoY2hpbGRfY3R4KTtcbiAgICAgICAgbGV0IG5lZWRzX2ZsdXNoID0gZmFsc2U7XG4gICAgICAgIGlmIChpbmZvLmJsb2NrKSB7XG4gICAgICAgICAgICBpZiAoaW5mby5ibG9ja3MpIHtcbiAgICAgICAgICAgICAgICBpbmZvLmJsb2Nrcy5mb3JFYWNoKChibG9jaywgaSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaSAhPT0gaW5kZXggJiYgYmxvY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwX291dHJvcygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNpdGlvbl9vdXQoYmxvY2ssIDEsIDEsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5mby5ibG9ja3NbaV0gPT09IGJsb2NrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZm8uYmxvY2tzW2ldID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrX291dHJvcygpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpbmZvLmJsb2NrLmQoMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBibG9jay5jKCk7XG4gICAgICAgICAgICB0cmFuc2l0aW9uX2luKGJsb2NrLCAxKTtcbiAgICAgICAgICAgIGJsb2NrLm0oaW5mby5tb3VudCgpLCBpbmZvLmFuY2hvcik7XG4gICAgICAgICAgICBuZWVkc19mbHVzaCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaW5mby5ibG9jayA9IGJsb2NrO1xuICAgICAgICBpZiAoaW5mby5ibG9ja3MpXG4gICAgICAgICAgICBpbmZvLmJsb2Nrc1tpbmRleF0gPSBibG9jaztcbiAgICAgICAgaWYgKG5lZWRzX2ZsdXNoKSB7XG4gICAgICAgICAgICBmbHVzaCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChpc19wcm9taXNlKHByb21pc2UpKSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRfY29tcG9uZW50ID0gZ2V0X2N1cnJlbnRfY29tcG9uZW50KCk7XG4gICAgICAgIHByb21pc2UudGhlbih2YWx1ZSA9PiB7XG4gICAgICAgICAgICBzZXRfY3VycmVudF9jb21wb25lbnQoY3VycmVudF9jb21wb25lbnQpO1xuICAgICAgICAgICAgdXBkYXRlKGluZm8udGhlbiwgMSwgaW5mby52YWx1ZSwgdmFsdWUpO1xuICAgICAgICAgICAgc2V0X2N1cnJlbnRfY29tcG9uZW50KG51bGwpO1xuICAgICAgICB9LCBlcnJvciA9PiB7XG4gICAgICAgICAgICBzZXRfY3VycmVudF9jb21wb25lbnQoY3VycmVudF9jb21wb25lbnQpO1xuICAgICAgICAgICAgdXBkYXRlKGluZm8uY2F0Y2gsIDIsIGluZm8uZXJyb3IsIGVycm9yKTtcbiAgICAgICAgICAgIHNldF9jdXJyZW50X2NvbXBvbmVudChudWxsKTtcbiAgICAgICAgICAgIGlmICghaW5mby5oYXNDYXRjaCkge1xuICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgLy8gaWYgd2UgcHJldmlvdXNseSBoYWQgYSB0aGVuL2NhdGNoIGJsb2NrLCBkZXN0cm95IGl0XG4gICAgICAgIGlmIChpbmZvLmN1cnJlbnQgIT09IGluZm8ucGVuZGluZykge1xuICAgICAgICAgICAgdXBkYXRlKGluZm8ucGVuZGluZywgMCk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgaWYgKGluZm8uY3VycmVudCAhPT0gaW5mby50aGVuKSB7XG4gICAgICAgICAgICB1cGRhdGUoaW5mby50aGVuLCAxLCBpbmZvLnZhbHVlLCBwcm9taXNlKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGluZm8ucmVzb2x2ZWQgPSBwcm9taXNlO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHVwZGF0ZV9hd2FpdF9ibG9ja19icmFuY2goaW5mbywgY3R4LCBkaXJ0eSkge1xuICAgIGNvbnN0IGNoaWxkX2N0eCA9IGN0eC5zbGljZSgpO1xuICAgIGNvbnN0IHsgcmVzb2x2ZWQgfSA9IGluZm87XG4gICAgaWYgKGluZm8uY3VycmVudCA9PT0gaW5mby50aGVuKSB7XG4gICAgICAgIGNoaWxkX2N0eFtpbmZvLnZhbHVlXSA9IHJlc29sdmVkO1xuICAgIH1cbiAgICBpZiAoaW5mby5jdXJyZW50ID09PSBpbmZvLmNhdGNoKSB7XG4gICAgICAgIGNoaWxkX2N0eFtpbmZvLmVycm9yXSA9IHJlc29sdmVkO1xuICAgIH1cbiAgICBpbmZvLmJsb2NrLnAoY2hpbGRfY3R4LCBkaXJ0eSk7XG59XG5cbmNvbnN0IGdsb2JhbHMgPSAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCdcbiAgICA/IHdpbmRvd1xuICAgIDogdHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnXG4gICAgICAgID8gZ2xvYmFsVGhpc1xuICAgICAgICA6IGdsb2JhbCk7XG5cbmZ1bmN0aW9uIGRlc3Ryb3lfYmxvY2soYmxvY2ssIGxvb2t1cCkge1xuICAgIGJsb2NrLmQoMSk7XG4gICAgbG9va3VwLmRlbGV0ZShibG9jay5rZXkpO1xufVxuZnVuY3Rpb24gb3V0cm9fYW5kX2Rlc3Ryb3lfYmxvY2soYmxvY2ssIGxvb2t1cCkge1xuICAgIHRyYW5zaXRpb25fb3V0KGJsb2NrLCAxLCAxLCAoKSA9PiB7XG4gICAgICAgIGxvb2t1cC5kZWxldGUoYmxvY2sua2V5KTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGZpeF9hbmRfZGVzdHJveV9ibG9jayhibG9jaywgbG9va3VwKSB7XG4gICAgYmxvY2suZigpO1xuICAgIGRlc3Ryb3lfYmxvY2soYmxvY2ssIGxvb2t1cCk7XG59XG5mdW5jdGlvbiBmaXhfYW5kX291dHJvX2FuZF9kZXN0cm95X2Jsb2NrKGJsb2NrLCBsb29rdXApIHtcbiAgICBibG9jay5mKCk7XG4gICAgb3V0cm9fYW5kX2Rlc3Ryb3lfYmxvY2soYmxvY2ssIGxvb2t1cCk7XG59XG5mdW5jdGlvbiB1cGRhdGVfa2V5ZWRfZWFjaChvbGRfYmxvY2tzLCBkaXJ0eSwgZ2V0X2tleSwgZHluYW1pYywgY3R4LCBsaXN0LCBsb29rdXAsIG5vZGUsIGRlc3Ryb3ksIGNyZWF0ZV9lYWNoX2Jsb2NrLCBuZXh0LCBnZXRfY29udGV4dCkge1xuICAgIGxldCBvID0gb2xkX2Jsb2Nrcy5sZW5ndGg7XG4gICAgbGV0IG4gPSBsaXN0Lmxlbmd0aDtcbiAgICBsZXQgaSA9IG87XG4gICAgY29uc3Qgb2xkX2luZGV4ZXMgPSB7fTtcbiAgICB3aGlsZSAoaS0tKVxuICAgICAgICBvbGRfaW5kZXhlc1tvbGRfYmxvY2tzW2ldLmtleV0gPSBpO1xuICAgIGNvbnN0IG5ld19ibG9ja3MgPSBbXTtcbiAgICBjb25zdCBuZXdfbG9va3VwID0gbmV3IE1hcCgpO1xuICAgIGNvbnN0IGRlbHRhcyA9IG5ldyBNYXAoKTtcbiAgICBpID0gbjtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIGNvbnN0IGNoaWxkX2N0eCA9IGdldF9jb250ZXh0KGN0eCwgbGlzdCwgaSk7XG4gICAgICAgIGNvbnN0IGtleSA9IGdldF9rZXkoY2hpbGRfY3R4KTtcbiAgICAgICAgbGV0IGJsb2NrID0gbG9va3VwLmdldChrZXkpO1xuICAgICAgICBpZiAoIWJsb2NrKSB7XG4gICAgICAgICAgICBibG9jayA9IGNyZWF0ZV9lYWNoX2Jsb2NrKGtleSwgY2hpbGRfY3R4KTtcbiAgICAgICAgICAgIGJsb2NrLmMoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChkeW5hbWljKSB7XG4gICAgICAgICAgICBibG9jay5wKGNoaWxkX2N0eCwgZGlydHkpO1xuICAgICAgICB9XG4gICAgICAgIG5ld19sb29rdXAuc2V0KGtleSwgbmV3X2Jsb2Nrc1tpXSA9IGJsb2NrKTtcbiAgICAgICAgaWYgKGtleSBpbiBvbGRfaW5kZXhlcylcbiAgICAgICAgICAgIGRlbHRhcy5zZXQoa2V5LCBNYXRoLmFicyhpIC0gb2xkX2luZGV4ZXNba2V5XSkpO1xuICAgIH1cbiAgICBjb25zdCB3aWxsX21vdmUgPSBuZXcgU2V0KCk7XG4gICAgY29uc3QgZGlkX21vdmUgPSBuZXcgU2V0KCk7XG4gICAgZnVuY3Rpb24gaW5zZXJ0KGJsb2NrKSB7XG4gICAgICAgIHRyYW5zaXRpb25faW4oYmxvY2ssIDEpO1xuICAgICAgICBibG9jay5tKG5vZGUsIG5leHQpO1xuICAgICAgICBsb29rdXAuc2V0KGJsb2NrLmtleSwgYmxvY2spO1xuICAgICAgICBuZXh0ID0gYmxvY2suZmlyc3Q7XG4gICAgICAgIG4tLTtcbiAgICB9XG4gICAgd2hpbGUgKG8gJiYgbikge1xuICAgICAgICBjb25zdCBuZXdfYmxvY2sgPSBuZXdfYmxvY2tzW24gLSAxXTtcbiAgICAgICAgY29uc3Qgb2xkX2Jsb2NrID0gb2xkX2Jsb2Nrc1tvIC0gMV07XG4gICAgICAgIGNvbnN0IG5ld19rZXkgPSBuZXdfYmxvY2sua2V5O1xuICAgICAgICBjb25zdCBvbGRfa2V5ID0gb2xkX2Jsb2NrLmtleTtcbiAgICAgICAgaWYgKG5ld19ibG9jayA9PT0gb2xkX2Jsb2NrKSB7XG4gICAgICAgICAgICAvLyBkbyBub3RoaW5nXG4gICAgICAgICAgICBuZXh0ID0gbmV3X2Jsb2NrLmZpcnN0O1xuICAgICAgICAgICAgby0tO1xuICAgICAgICAgICAgbi0tO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCFuZXdfbG9va3VwLmhhcyhvbGRfa2V5KSkge1xuICAgICAgICAgICAgLy8gcmVtb3ZlIG9sZCBibG9ja1xuICAgICAgICAgICAgZGVzdHJveShvbGRfYmxvY2ssIGxvb2t1cCk7XG4gICAgICAgICAgICBvLS07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIWxvb2t1cC5oYXMobmV3X2tleSkgfHwgd2lsbF9tb3ZlLmhhcyhuZXdfa2V5KSkge1xuICAgICAgICAgICAgaW5zZXJ0KG5ld19ibG9jayk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZGlkX21vdmUuaGFzKG9sZF9rZXkpKSB7XG4gICAgICAgICAgICBvLS07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZGVsdGFzLmdldChuZXdfa2V5KSA+IGRlbHRhcy5nZXQob2xkX2tleSkpIHtcbiAgICAgICAgICAgIGRpZF9tb3ZlLmFkZChuZXdfa2V5KTtcbiAgICAgICAgICAgIGluc2VydChuZXdfYmxvY2spO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgd2lsbF9tb3ZlLmFkZChvbGRfa2V5KTtcbiAgICAgICAgICAgIG8tLTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB3aGlsZSAoby0tKSB7XG4gICAgICAgIGNvbnN0IG9sZF9ibG9jayA9IG9sZF9ibG9ja3Nbb107XG4gICAgICAgIGlmICghbmV3X2xvb2t1cC5oYXMob2xkX2Jsb2NrLmtleSkpXG4gICAgICAgICAgICBkZXN0cm95KG9sZF9ibG9jaywgbG9va3VwKTtcbiAgICB9XG4gICAgd2hpbGUgKG4pXG4gICAgICAgIGluc2VydChuZXdfYmxvY2tzW24gLSAxXSk7XG4gICAgcmV0dXJuIG5ld19ibG9ja3M7XG59XG5mdW5jdGlvbiB2YWxpZGF0ZV9lYWNoX2tleXMoY3R4LCBsaXN0LCBnZXRfY29udGV4dCwgZ2V0X2tleSkge1xuICAgIGNvbnN0IGtleXMgPSBuZXcgU2V0KCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGtleSA9IGdldF9rZXkoZ2V0X2NvbnRleHQoY3R4LCBsaXN0LCBpKSk7XG4gICAgICAgIGlmIChrZXlzLmhhcyhrZXkpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBoYXZlIGR1cGxpY2F0ZSBrZXlzIGluIGEga2V5ZWQgZWFjaCcpO1xuICAgICAgICB9XG4gICAgICAgIGtleXMuYWRkKGtleSk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBnZXRfc3ByZWFkX3VwZGF0ZShsZXZlbHMsIHVwZGF0ZXMpIHtcbiAgICBjb25zdCB1cGRhdGUgPSB7fTtcbiAgICBjb25zdCB0b19udWxsX291dCA9IHt9O1xuICAgIGNvbnN0IGFjY291bnRlZF9mb3IgPSB7ICQkc2NvcGU6IDEgfTtcbiAgICBsZXQgaSA9IGxldmVscy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgICBjb25zdCBvID0gbGV2ZWxzW2ldO1xuICAgICAgICBjb25zdCBuID0gdXBkYXRlc1tpXTtcbiAgICAgICAgaWYgKG4pIHtcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIG8pIHtcbiAgICAgICAgICAgICAgICBpZiAoIShrZXkgaW4gbikpXG4gICAgICAgICAgICAgICAgICAgIHRvX251bGxfb3V0W2tleV0gPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gbikge1xuICAgICAgICAgICAgICAgIGlmICghYWNjb3VudGVkX2ZvcltrZXldKSB7XG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZVtrZXldID0gbltrZXldO1xuICAgICAgICAgICAgICAgICAgICBhY2NvdW50ZWRfZm9yW2tleV0gPSAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldmVsc1tpXSA9IG47XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBvKSB7XG4gICAgICAgICAgICAgICAgYWNjb3VudGVkX2ZvcltrZXldID0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGNvbnN0IGtleSBpbiB0b19udWxsX291dCkge1xuICAgICAgICBpZiAoIShrZXkgaW4gdXBkYXRlKSlcbiAgICAgICAgICAgIHVwZGF0ZVtrZXldID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICByZXR1cm4gdXBkYXRlO1xufVxuZnVuY3Rpb24gZ2V0X3NwcmVhZF9vYmplY3Qoc3ByZWFkX3Byb3BzKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBzcHJlYWRfcHJvcHMgPT09ICdvYmplY3QnICYmIHNwcmVhZF9wcm9wcyAhPT0gbnVsbCA/IHNwcmVhZF9wcm9wcyA6IHt9O1xufVxuXG4vLyBzb3VyY2U6IGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2luZGljZXMuaHRtbFxuY29uc3QgYm9vbGVhbl9hdHRyaWJ1dGVzID0gbmV3IFNldChbXG4gICAgJ2FsbG93ZnVsbHNjcmVlbicsXG4gICAgJ2FsbG93cGF5bWVudHJlcXVlc3QnLFxuICAgICdhc3luYycsXG4gICAgJ2F1dG9mb2N1cycsXG4gICAgJ2F1dG9wbGF5JyxcbiAgICAnY2hlY2tlZCcsXG4gICAgJ2NvbnRyb2xzJyxcbiAgICAnZGVmYXVsdCcsXG4gICAgJ2RlZmVyJyxcbiAgICAnZGlzYWJsZWQnLFxuICAgICdmb3Jtbm92YWxpZGF0ZScsXG4gICAgJ2hpZGRlbicsXG4gICAgJ2luZXJ0JyxcbiAgICAnaXNtYXAnLFxuICAgICdpdGVtc2NvcGUnLFxuICAgICdsb29wJyxcbiAgICAnbXVsdGlwbGUnLFxuICAgICdtdXRlZCcsXG4gICAgJ25vbW9kdWxlJyxcbiAgICAnbm92YWxpZGF0ZScsXG4gICAgJ29wZW4nLFxuICAgICdwbGF5c2lubGluZScsXG4gICAgJ3JlYWRvbmx5JyxcbiAgICAncmVxdWlyZWQnLFxuICAgICdyZXZlcnNlZCcsXG4gICAgJ3NlbGVjdGVkJ1xuXSk7XG5cbi8qKiByZWdleCBvZiBhbGwgaHRtbCB2b2lkIGVsZW1lbnQgbmFtZXMgKi9cbmNvbnN0IHZvaWRfZWxlbWVudF9uYW1lcyA9IC9eKD86YXJlYXxiYXNlfGJyfGNvbHxjb21tYW5kfGVtYmVkfGhyfGltZ3xpbnB1dHxrZXlnZW58bGlua3xtZXRhfHBhcmFtfHNvdXJjZXx0cmFja3x3YnIpJC87XG5mdW5jdGlvbiBpc192b2lkKG5hbWUpIHtcbiAgICByZXR1cm4gdm9pZF9lbGVtZW50X25hbWVzLnRlc3QobmFtZSkgfHwgbmFtZS50b0xvd2VyQ2FzZSgpID09PSAnIWRvY3R5cGUnO1xufVxuXG5jb25zdCBpbnZhbGlkX2F0dHJpYnV0ZV9uYW1lX2NoYXJhY3RlciA9IC9bXFxzJ1wiPi89XFx1e0ZERDB9LVxcdXtGREVGfVxcdXtGRkZFfVxcdXtGRkZGfVxcdXsxRkZGRX1cXHV7MUZGRkZ9XFx1ezJGRkZFfVxcdXsyRkZGRn1cXHV7M0ZGRkV9XFx1ezNGRkZGfVxcdXs0RkZGRX1cXHV7NEZGRkZ9XFx1ezVGRkZFfVxcdXs1RkZGRn1cXHV7NkZGRkV9XFx1ezZGRkZGfVxcdXs3RkZGRX1cXHV7N0ZGRkZ9XFx1ezhGRkZFfVxcdXs4RkZGRn1cXHV7OUZGRkV9XFx1ezlGRkZGfVxcdXtBRkZGRX1cXHV7QUZGRkZ9XFx1e0JGRkZFfVxcdXtCRkZGRn1cXHV7Q0ZGRkV9XFx1e0NGRkZGfVxcdXtERkZGRX1cXHV7REZGRkZ9XFx1e0VGRkZFfVxcdXtFRkZGRn1cXHV7RkZGRkV9XFx1e0ZGRkZGfVxcdXsxMEZGRkV9XFx1ezEwRkZGRn1dL3U7XG4vLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zeW50YXguaHRtbCNhdHRyaWJ1dGVzLTJcbi8vIGh0dHBzOi8vaW5mcmEuc3BlYy53aGF0d2cub3JnLyNub25jaGFyYWN0ZXJcbmZ1bmN0aW9uIHNwcmVhZChhcmdzLCBhdHRyc190b19hZGQpIHtcbiAgICBjb25zdCBhdHRyaWJ1dGVzID0gT2JqZWN0LmFzc2lnbih7fSwgLi4uYXJncyk7XG4gICAgaWYgKGF0dHJzX3RvX2FkZCkge1xuICAgICAgICBjb25zdCBjbGFzc2VzX3RvX2FkZCA9IGF0dHJzX3RvX2FkZC5jbGFzc2VzO1xuICAgICAgICBjb25zdCBzdHlsZXNfdG9fYWRkID0gYXR0cnNfdG9fYWRkLnN0eWxlcztcbiAgICAgICAgaWYgKGNsYXNzZXNfdG9fYWRkKSB7XG4gICAgICAgICAgICBpZiAoYXR0cmlidXRlcy5jbGFzcyA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgYXR0cmlidXRlcy5jbGFzcyA9IGNsYXNzZXNfdG9fYWRkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgYXR0cmlidXRlcy5jbGFzcyArPSAnICcgKyBjbGFzc2VzX3RvX2FkZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoc3R5bGVzX3RvX2FkZCkge1xuICAgICAgICAgICAgaWYgKGF0dHJpYnV0ZXMuc3R5bGUgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXMuc3R5bGUgPSBzdHlsZV9vYmplY3RfdG9fc3RyaW5nKHN0eWxlc190b19hZGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgYXR0cmlidXRlcy5zdHlsZSA9IHN0eWxlX29iamVjdF90b19zdHJpbmcobWVyZ2Vfc3NyX3N0eWxlcyhhdHRyaWJ1dGVzLnN0eWxlLCBzdHlsZXNfdG9fYWRkKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgbGV0IHN0ciA9ICcnO1xuICAgIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmZvckVhY2gobmFtZSA9PiB7XG4gICAgICAgIGlmIChpbnZhbGlkX2F0dHJpYnV0ZV9uYW1lX2NoYXJhY3Rlci50ZXN0KG5hbWUpKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IGF0dHJpYnV0ZXNbbmFtZV07XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gdHJ1ZSlcbiAgICAgICAgICAgIHN0ciArPSAnICcgKyBuYW1lO1xuICAgICAgICBlbHNlIGlmIChib29sZWFuX2F0dHJpYnV0ZXMuaGFzKG5hbWUudG9Mb3dlckNhc2UoKSkpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSlcbiAgICAgICAgICAgICAgICBzdHIgKz0gJyAnICsgbmFtZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICAgICAgICBzdHIgKz0gYCAke25hbWV9PVwiJHt2YWx1ZX1cImA7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gc3RyO1xufVxuZnVuY3Rpb24gbWVyZ2Vfc3NyX3N0eWxlcyhzdHlsZV9hdHRyaWJ1dGUsIHN0eWxlX2RpcmVjdGl2ZSkge1xuICAgIGNvbnN0IHN0eWxlX29iamVjdCA9IHt9O1xuICAgIGZvciAoY29uc3QgaW5kaXZpZHVhbF9zdHlsZSBvZiBzdHlsZV9hdHRyaWJ1dGUuc3BsaXQoJzsnKSkge1xuICAgICAgICBjb25zdCBjb2xvbl9pbmRleCA9IGluZGl2aWR1YWxfc3R5bGUuaW5kZXhPZignOicpO1xuICAgICAgICBjb25zdCBuYW1lID0gaW5kaXZpZHVhbF9zdHlsZS5zbGljZSgwLCBjb2xvbl9pbmRleCkudHJpbSgpO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IGluZGl2aWR1YWxfc3R5bGUuc2xpY2UoY29sb25faW5kZXggKyAxKS50cmltKCk7XG4gICAgICAgIGlmICghbmFtZSlcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBzdHlsZV9vYmplY3RbbmFtZV0gPSB2YWx1ZTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBuYW1lIGluIHN0eWxlX2RpcmVjdGl2ZSkge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IHN0eWxlX2RpcmVjdGl2ZVtuYW1lXTtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICBzdHlsZV9vYmplY3RbbmFtZV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGRlbGV0ZSBzdHlsZV9vYmplY3RbbmFtZV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHN0eWxlX29iamVjdDtcbn1cbmNvbnN0IEFUVFJfUkVHRVggPSAvWyZcIl0vZztcbmNvbnN0IENPTlRFTlRfUkVHRVggPSAvWyY8XS9nO1xuLyoqXG4gKiBOb3RlOiB0aGlzIG1ldGhvZCBpcyBwZXJmb3JtYW5jZSBzZW5zaXRpdmUgYW5kIGhhcyBiZWVuIG9wdGltaXplZFxuICogaHR0cHM6Ly9naXRodWIuY29tL3N2ZWx0ZWpzL3N2ZWx0ZS9wdWxsLzU3MDFcbiAqL1xuZnVuY3Rpb24gZXNjYXBlKHZhbHVlLCBpc19hdHRyID0gZmFsc2UpIHtcbiAgICBjb25zdCBzdHIgPSBTdHJpbmcodmFsdWUpO1xuICAgIGNvbnN0IHBhdHRlcm4gPSBpc19hdHRyID8gQVRUUl9SRUdFWCA6IENPTlRFTlRfUkVHRVg7XG4gICAgcGF0dGVybi5sYXN0SW5kZXggPSAwO1xuICAgIGxldCBlc2NhcGVkID0gJyc7XG4gICAgbGV0IGxhc3QgPSAwO1xuICAgIHdoaWxlIChwYXR0ZXJuLnRlc3Qoc3RyKSkge1xuICAgICAgICBjb25zdCBpID0gcGF0dGVybi5sYXN0SW5kZXggLSAxO1xuICAgICAgICBjb25zdCBjaCA9IHN0cltpXTtcbiAgICAgICAgZXNjYXBlZCArPSBzdHIuc3Vic3RyaW5nKGxhc3QsIGkpICsgKGNoID09PSAnJicgPyAnJmFtcDsnIDogKGNoID09PSAnXCInID8gJyZxdW90OycgOiAnJmx0OycpKTtcbiAgICAgICAgbGFzdCA9IGkgKyAxO1xuICAgIH1cbiAgICByZXR1cm4gZXNjYXBlZCArIHN0ci5zdWJzdHJpbmcobGFzdCk7XG59XG5mdW5jdGlvbiBlc2NhcGVfYXR0cmlidXRlX3ZhbHVlKHZhbHVlKSB7XG4gICAgLy8ga2VlcCBib29sZWFucywgbnVsbCwgYW5kIHVuZGVmaW5lZCBmb3IgdGhlIHNha2Ugb2YgYHNwcmVhZGBcbiAgICBjb25zdCBzaG91bGRfZXNjYXBlID0gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyB8fCAodmFsdWUgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jyk7XG4gICAgcmV0dXJuIHNob3VsZF9lc2NhcGUgPyBlc2NhcGUodmFsdWUsIHRydWUpIDogdmFsdWU7XG59XG5mdW5jdGlvbiBlc2NhcGVfb2JqZWN0KG9iaikge1xuICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xuICAgIGZvciAoY29uc3Qga2V5IGluIG9iaikge1xuICAgICAgICByZXN1bHRba2V5XSA9IGVzY2FwZV9hdHRyaWJ1dGVfdmFsdWUob2JqW2tleV0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gZWFjaChpdGVtcywgZm4pIHtcbiAgICBsZXQgc3RyID0gJyc7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpdGVtcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBzdHIgKz0gZm4oaXRlbXNbaV0sIGkpO1xuICAgIH1cbiAgICByZXR1cm4gc3RyO1xufVxuY29uc3QgbWlzc2luZ19jb21wb25lbnQgPSB7XG4gICAgJCRyZW5kZXI6ICgpID0+ICcnXG59O1xuZnVuY3Rpb24gdmFsaWRhdGVfY29tcG9uZW50KGNvbXBvbmVudCwgbmFtZSkge1xuICAgIGlmICghY29tcG9uZW50IHx8ICFjb21wb25lbnQuJCRyZW5kZXIpIHtcbiAgICAgICAgaWYgKG5hbWUgPT09ICdzdmVsdGU6Y29tcG9uZW50JylcbiAgICAgICAgICAgIG5hbWUgKz0gJyB0aGlzPXsuLi59JztcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGA8JHtuYW1lfT4gaXMgbm90IGEgdmFsaWQgU1NSIGNvbXBvbmVudC4gWW91IG1heSBuZWVkIHRvIHJldmlldyB5b3VyIGJ1aWxkIGNvbmZpZyB0byBlbnN1cmUgdGhhdCBkZXBlbmRlbmNpZXMgYXJlIGNvbXBpbGVkLCByYXRoZXIgdGhhbiBpbXBvcnRlZCBhcyBwcmUtY29tcGlsZWQgbW9kdWxlcy4gT3RoZXJ3aXNlIHlvdSBtYXkgbmVlZCB0byBmaXggYSA8JHtuYW1lfT4uYCk7XG4gICAgfVxuICAgIHJldHVybiBjb21wb25lbnQ7XG59XG5mdW5jdGlvbiBkZWJ1ZyhmaWxlLCBsaW5lLCBjb2x1bW4sIHZhbHVlcykge1xuICAgIGNvbnNvbGUubG9nKGB7QGRlYnVnfSAke2ZpbGUgPyBmaWxlICsgJyAnIDogJyd9KCR7bGluZX06JHtjb2x1bW59KWApOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcbiAgICBjb25zb2xlLmxvZyh2YWx1ZXMpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcbiAgICByZXR1cm4gJyc7XG59XG5sZXQgb25fZGVzdHJveTtcbmZ1bmN0aW9uIGNyZWF0ZV9zc3JfY29tcG9uZW50KGZuKSB7XG4gICAgZnVuY3Rpb24gJCRyZW5kZXIocmVzdWx0LCBwcm9wcywgYmluZGluZ3MsIHNsb3RzLCBjb250ZXh0KSB7XG4gICAgICAgIGNvbnN0IHBhcmVudF9jb21wb25lbnQgPSBjdXJyZW50X2NvbXBvbmVudDtcbiAgICAgICAgY29uc3QgJCQgPSB7XG4gICAgICAgICAgICBvbl9kZXN0cm95LFxuICAgICAgICAgICAgY29udGV4dDogbmV3IE1hcChjb250ZXh0IHx8IChwYXJlbnRfY29tcG9uZW50ID8gcGFyZW50X2NvbXBvbmVudC4kJC5jb250ZXh0IDogW10pKSxcbiAgICAgICAgICAgIC8vIHRoZXNlIHdpbGwgYmUgaW1tZWRpYXRlbHkgZGlzY2FyZGVkXG4gICAgICAgICAgICBvbl9tb3VudDogW10sXG4gICAgICAgICAgICBiZWZvcmVfdXBkYXRlOiBbXSxcbiAgICAgICAgICAgIGFmdGVyX3VwZGF0ZTogW10sXG4gICAgICAgICAgICBjYWxsYmFja3M6IGJsYW5rX29iamVjdCgpXG4gICAgICAgIH07XG4gICAgICAgIHNldF9jdXJyZW50X2NvbXBvbmVudCh7ICQkIH0pO1xuICAgICAgICBjb25zdCBodG1sID0gZm4ocmVzdWx0LCBwcm9wcywgYmluZGluZ3MsIHNsb3RzKTtcbiAgICAgICAgc2V0X2N1cnJlbnRfY29tcG9uZW50KHBhcmVudF9jb21wb25lbnQpO1xuICAgICAgICByZXR1cm4gaHRtbDtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcmVuZGVyOiAocHJvcHMgPSB7fSwgeyAkJHNsb3RzID0ge30sIGNvbnRleHQgPSBuZXcgTWFwKCkgfSA9IHt9KSA9PiB7XG4gICAgICAgICAgICBvbl9kZXN0cm95ID0gW107XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSB7IHRpdGxlOiAnJywgaGVhZDogJycsIGNzczogbmV3IFNldCgpIH07XG4gICAgICAgICAgICBjb25zdCBodG1sID0gJCRyZW5kZXIocmVzdWx0LCBwcm9wcywge30sICQkc2xvdHMsIGNvbnRleHQpO1xuICAgICAgICAgICAgcnVuX2FsbChvbl9kZXN0cm95KTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgaHRtbCxcbiAgICAgICAgICAgICAgICBjc3M6IHtcbiAgICAgICAgICAgICAgICAgICAgY29kZTogQXJyYXkuZnJvbShyZXN1bHQuY3NzKS5tYXAoY3NzID0+IGNzcy5jb2RlKS5qb2luKCdcXG4nKSxcbiAgICAgICAgICAgICAgICAgICAgbWFwOiBudWxsIC8vIFRPRE9cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGhlYWQ6IHJlc3VsdC50aXRsZSArIHJlc3VsdC5oZWFkXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICAkJHJlbmRlclxuICAgIH07XG59XG5mdW5jdGlvbiBhZGRfYXR0cmlidXRlKG5hbWUsIHZhbHVlLCBib29sZWFuKSB7XG4gICAgaWYgKHZhbHVlID09IG51bGwgfHwgKGJvb2xlYW4gJiYgIXZhbHVlKSlcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIGNvbnN0IGFzc2lnbm1lbnQgPSAoYm9vbGVhbiAmJiB2YWx1ZSA9PT0gdHJ1ZSkgPyAnJyA6IGA9XCIke2VzY2FwZSh2YWx1ZSwgdHJ1ZSl9XCJgO1xuICAgIHJldHVybiBgICR7bmFtZX0ke2Fzc2lnbm1lbnR9YDtcbn1cbmZ1bmN0aW9uIGFkZF9jbGFzc2VzKGNsYXNzZXMpIHtcbiAgICByZXR1cm4gY2xhc3NlcyA/IGAgY2xhc3M9XCIke2NsYXNzZXN9XCJgIDogJyc7XG59XG5mdW5jdGlvbiBzdHlsZV9vYmplY3RfdG9fc3RyaW5nKHN0eWxlX29iamVjdCkge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhzdHlsZV9vYmplY3QpXG4gICAgICAgIC5maWx0ZXIoa2V5ID0+IHN0eWxlX29iamVjdFtrZXldKVxuICAgICAgICAubWFwKGtleSA9PiBgJHtrZXl9OiAke3N0eWxlX29iamVjdFtrZXldfTtgKVxuICAgICAgICAuam9pbignICcpO1xufVxuZnVuY3Rpb24gYWRkX3N0eWxlcyhzdHlsZV9vYmplY3QpIHtcbiAgICBjb25zdCBzdHlsZXMgPSBzdHlsZV9vYmplY3RfdG9fc3RyaW5nKHN0eWxlX29iamVjdCk7XG4gICAgcmV0dXJuIHN0eWxlcyA/IGAgc3R5bGU9XCIke3N0eWxlc31cImAgOiAnJztcbn1cblxuZnVuY3Rpb24gYmluZChjb21wb25lbnQsIG5hbWUsIGNhbGxiYWNrKSB7XG4gICAgY29uc3QgaW5kZXggPSBjb21wb25lbnQuJCQucHJvcHNbbmFtZV07XG4gICAgaWYgKGluZGV4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29tcG9uZW50LiQkLmJvdW5kW2luZGV4XSA9IGNhbGxiYWNrO1xuICAgICAgICBjYWxsYmFjayhjb21wb25lbnQuJCQuY3R4W2luZGV4XSk7XG4gICAgfVxufVxuZnVuY3Rpb24gY3JlYXRlX2NvbXBvbmVudChibG9jaykge1xuICAgIGJsb2NrICYmIGJsb2NrLmMoKTtcbn1cbmZ1bmN0aW9uIGNsYWltX2NvbXBvbmVudChibG9jaywgcGFyZW50X25vZGVzKSB7XG4gICAgYmxvY2sgJiYgYmxvY2subChwYXJlbnRfbm9kZXMpO1xufVxuZnVuY3Rpb24gbW91bnRfY29tcG9uZW50KGNvbXBvbmVudCwgdGFyZ2V0LCBhbmNob3IsIGN1c3RvbUVsZW1lbnQpIHtcbiAgICBjb25zdCB7IGZyYWdtZW50LCBhZnRlcl91cGRhdGUgfSA9IGNvbXBvbmVudC4kJDtcbiAgICBmcmFnbWVudCAmJiBmcmFnbWVudC5tKHRhcmdldCwgYW5jaG9yKTtcbiAgICBpZiAoIWN1c3RvbUVsZW1lbnQpIHtcbiAgICAgICAgLy8gb25Nb3VudCBoYXBwZW5zIGJlZm9yZSB0aGUgaW5pdGlhbCBhZnRlclVwZGF0ZVxuICAgICAgICBhZGRfcmVuZGVyX2NhbGxiYWNrKCgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG5ld19vbl9kZXN0cm95ID0gY29tcG9uZW50LiQkLm9uX21vdW50Lm1hcChydW4pLmZpbHRlcihpc19mdW5jdGlvbik7XG4gICAgICAgICAgICAvLyBpZiB0aGUgY29tcG9uZW50IHdhcyBkZXN0cm95ZWQgaW1tZWRpYXRlbHlcbiAgICAgICAgICAgIC8vIGl0IHdpbGwgdXBkYXRlIHRoZSBgJCQub25fZGVzdHJveWAgcmVmZXJlbmNlIHRvIGBudWxsYC5cbiAgICAgICAgICAgIC8vIHRoZSBkZXN0cnVjdHVyZWQgb25fZGVzdHJveSBtYXkgc3RpbGwgcmVmZXJlbmNlIHRvIHRoZSBvbGQgYXJyYXlcbiAgICAgICAgICAgIGlmIChjb21wb25lbnQuJCQub25fZGVzdHJveSkge1xuICAgICAgICAgICAgICAgIGNvbXBvbmVudC4kJC5vbl9kZXN0cm95LnB1c2goLi4ubmV3X29uX2Rlc3Ryb3kpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gRWRnZSBjYXNlIC0gY29tcG9uZW50IHdhcyBkZXN0cm95ZWQgaW1tZWRpYXRlbHksXG4gICAgICAgICAgICAgICAgLy8gbW9zdCBsaWtlbHkgYXMgYSByZXN1bHQgb2YgYSBiaW5kaW5nIGluaXRpYWxpc2luZ1xuICAgICAgICAgICAgICAgIHJ1bl9hbGwobmV3X29uX2Rlc3Ryb3kpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29tcG9uZW50LiQkLm9uX21vdW50ID0gW107XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBhZnRlcl91cGRhdGUuZm9yRWFjaChhZGRfcmVuZGVyX2NhbGxiYWNrKTtcbn1cbmZ1bmN0aW9uIGRlc3Ryb3lfY29tcG9uZW50KGNvbXBvbmVudCwgZGV0YWNoaW5nKSB7XG4gICAgY29uc3QgJCQgPSBjb21wb25lbnQuJCQ7XG4gICAgaWYgKCQkLmZyYWdtZW50ICE9PSBudWxsKSB7XG4gICAgICAgIHJ1bl9hbGwoJCQub25fZGVzdHJveSk7XG4gICAgICAgICQkLmZyYWdtZW50ICYmICQkLmZyYWdtZW50LmQoZGV0YWNoaW5nKTtcbiAgICAgICAgLy8gVE9ETyBudWxsIG91dCBvdGhlciByZWZzLCBpbmNsdWRpbmcgY29tcG9uZW50LiQkIChidXQgbmVlZCB0b1xuICAgICAgICAvLyBwcmVzZXJ2ZSBmaW5hbCBzdGF0ZT8pXG4gICAgICAgICQkLm9uX2Rlc3Ryb3kgPSAkJC5mcmFnbWVudCA9IG51bGw7XG4gICAgICAgICQkLmN0eCA9IFtdO1xuICAgIH1cbn1cbmZ1bmN0aW9uIG1ha2VfZGlydHkoY29tcG9uZW50LCBpKSB7XG4gICAgaWYgKGNvbXBvbmVudC4kJC5kaXJ0eVswXSA9PT0gLTEpIHtcbiAgICAgICAgZGlydHlfY29tcG9uZW50cy5wdXNoKGNvbXBvbmVudCk7XG4gICAgICAgIHNjaGVkdWxlX3VwZGF0ZSgpO1xuICAgICAgICBjb21wb25lbnQuJCQuZGlydHkuZmlsbCgwKTtcbiAgICB9XG4gICAgY29tcG9uZW50LiQkLmRpcnR5WyhpIC8gMzEpIHwgMF0gfD0gKDEgPDwgKGkgJSAzMSkpO1xufVxuZnVuY3Rpb24gaW5pdChjb21wb25lbnQsIG9wdGlvbnMsIGluc3RhbmNlLCBjcmVhdGVfZnJhZ21lbnQsIG5vdF9lcXVhbCwgcHJvcHMsIGFwcGVuZF9zdHlsZXMsIGRpcnR5ID0gWy0xXSkge1xuICAgIGNvbnN0IHBhcmVudF9jb21wb25lbnQgPSBjdXJyZW50X2NvbXBvbmVudDtcbiAgICBzZXRfY3VycmVudF9jb21wb25lbnQoY29tcG9uZW50KTtcbiAgICBjb25zdCAkJCA9IGNvbXBvbmVudC4kJCA9IHtcbiAgICAgICAgZnJhZ21lbnQ6IG51bGwsXG4gICAgICAgIGN0eDogW10sXG4gICAgICAgIC8vIHN0YXRlXG4gICAgICAgIHByb3BzLFxuICAgICAgICB1cGRhdGU6IG5vb3AsXG4gICAgICAgIG5vdF9lcXVhbCxcbiAgICAgICAgYm91bmQ6IGJsYW5rX29iamVjdCgpLFxuICAgICAgICAvLyBsaWZlY3ljbGVcbiAgICAgICAgb25fbW91bnQ6IFtdLFxuICAgICAgICBvbl9kZXN0cm95OiBbXSxcbiAgICAgICAgb25fZGlzY29ubmVjdDogW10sXG4gICAgICAgIGJlZm9yZV91cGRhdGU6IFtdLFxuICAgICAgICBhZnRlcl91cGRhdGU6IFtdLFxuICAgICAgICBjb250ZXh0OiBuZXcgTWFwKG9wdGlvbnMuY29udGV4dCB8fCAocGFyZW50X2NvbXBvbmVudCA/IHBhcmVudF9jb21wb25lbnQuJCQuY29udGV4dCA6IFtdKSksXG4gICAgICAgIC8vIGV2ZXJ5dGhpbmcgZWxzZVxuICAgICAgICBjYWxsYmFja3M6IGJsYW5rX29iamVjdCgpLFxuICAgICAgICBkaXJ0eSxcbiAgICAgICAgc2tpcF9ib3VuZDogZmFsc2UsXG4gICAgICAgIHJvb3Q6IG9wdGlvbnMudGFyZ2V0IHx8IHBhcmVudF9jb21wb25lbnQuJCQucm9vdFxuICAgIH07XG4gICAgYXBwZW5kX3N0eWxlcyAmJiBhcHBlbmRfc3R5bGVzKCQkLnJvb3QpO1xuICAgIGxldCByZWFkeSA9IGZhbHNlO1xuICAgICQkLmN0eCA9IGluc3RhbmNlXG4gICAgICAgID8gaW5zdGFuY2UoY29tcG9uZW50LCBvcHRpb25zLnByb3BzIHx8IHt9LCAoaSwgcmV0LCAuLi5yZXN0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHJlc3QubGVuZ3RoID8gcmVzdFswXSA6IHJldDtcbiAgICAgICAgICAgIGlmICgkJC5jdHggJiYgbm90X2VxdWFsKCQkLmN0eFtpXSwgJCQuY3R4W2ldID0gdmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgaWYgKCEkJC5za2lwX2JvdW5kICYmICQkLmJvdW5kW2ldKVxuICAgICAgICAgICAgICAgICAgICAkJC5ib3VuZFtpXSh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgaWYgKHJlYWR5KVxuICAgICAgICAgICAgICAgICAgICBtYWtlX2RpcnR5KGNvbXBvbmVudCwgaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgICB9KVxuICAgICAgICA6IFtdO1xuICAgICQkLnVwZGF0ZSgpO1xuICAgIHJlYWR5ID0gdHJ1ZTtcbiAgICBydW5fYWxsKCQkLmJlZm9yZV91cGRhdGUpO1xuICAgIC8vIGBmYWxzZWAgYXMgYSBzcGVjaWFsIGNhc2Ugb2Ygbm8gRE9NIGNvbXBvbmVudFxuICAgICQkLmZyYWdtZW50ID0gY3JlYXRlX2ZyYWdtZW50ID8gY3JlYXRlX2ZyYWdtZW50KCQkLmN0eCkgOiBmYWxzZTtcbiAgICBpZiAob3B0aW9ucy50YXJnZXQpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMuaHlkcmF0ZSkge1xuICAgICAgICAgICAgc3RhcnRfaHlkcmF0aW5nKCk7XG4gICAgICAgICAgICBjb25zdCBub2RlcyA9IGNoaWxkcmVuKG9wdGlvbnMudGFyZ2V0KTtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbm9uLW51bGwtYXNzZXJ0aW9uXG4gICAgICAgICAgICAkJC5mcmFnbWVudCAmJiAkJC5mcmFnbWVudC5sKG5vZGVzKTtcbiAgICAgICAgICAgIG5vZGVzLmZvckVhY2goZGV0YWNoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbm9uLW51bGwtYXNzZXJ0aW9uXG4gICAgICAgICAgICAkJC5mcmFnbWVudCAmJiAkJC5mcmFnbWVudC5jKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMuaW50cm8pXG4gICAgICAgICAgICB0cmFuc2l0aW9uX2luKGNvbXBvbmVudC4kJC5mcmFnbWVudCk7XG4gICAgICAgIG1vdW50X2NvbXBvbmVudChjb21wb25lbnQsIG9wdGlvbnMudGFyZ2V0LCBvcHRpb25zLmFuY2hvciwgb3B0aW9ucy5jdXN0b21FbGVtZW50KTtcbiAgICAgICAgZW5kX2h5ZHJhdGluZygpO1xuICAgICAgICBmbHVzaCgpO1xuICAgIH1cbiAgICBzZXRfY3VycmVudF9jb21wb25lbnQocGFyZW50X2NvbXBvbmVudCk7XG59XG5sZXQgU3ZlbHRlRWxlbWVudDtcbmlmICh0eXBlb2YgSFRNTEVsZW1lbnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBTdmVsdGVFbGVtZW50ID0gY2xhc3MgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gICAgICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgICAgIHRoaXMuYXR0YWNoU2hhZG93KHsgbW9kZTogJ29wZW4nIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgICAgICAgY29uc3QgeyBvbl9tb3VudCB9ID0gdGhpcy4kJDtcbiAgICAgICAgICAgIHRoaXMuJCQub25fZGlzY29ubmVjdCA9IG9uX21vdW50Lm1hcChydW4pLmZpbHRlcihpc19mdW5jdGlvbik7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlIHRvZG86IGltcHJvdmUgdHlwaW5nc1xuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gdGhpcy4kJC5zbG90dGVkKSB7XG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZSB0b2RvOiBpbXByb3ZlIHR5cGluZ3NcbiAgICAgICAgICAgICAgICB0aGlzLmFwcGVuZENoaWxkKHRoaXMuJCQuc2xvdHRlZFtrZXldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2soYXR0ciwgX29sZFZhbHVlLCBuZXdWYWx1ZSkge1xuICAgICAgICAgICAgdGhpc1thdHRyXSA9IG5ld1ZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGRpc2Nvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgICAgICAgcnVuX2FsbCh0aGlzLiQkLm9uX2Rpc2Nvbm5lY3QpO1xuICAgICAgICB9XG4gICAgICAgICRkZXN0cm95KCkge1xuICAgICAgICAgICAgZGVzdHJveV9jb21wb25lbnQodGhpcywgMSk7XG4gICAgICAgICAgICB0aGlzLiRkZXN0cm95ID0gbm9vcDtcbiAgICAgICAgfVxuICAgICAgICAkb24odHlwZSwgY2FsbGJhY2spIHtcbiAgICAgICAgICAgIC8vIFRPRE8gc2hvdWxkIHRoaXMgZGVsZWdhdGUgdG8gYWRkRXZlbnRMaXN0ZW5lcj9cbiAgICAgICAgICAgIGlmICghaXNfZnVuY3Rpb24oY2FsbGJhY2spKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5vb3A7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBjYWxsYmFja3MgPSAodGhpcy4kJC5jYWxsYmFja3NbdHlwZV0gfHwgKHRoaXMuJCQuY2FsbGJhY2tzW3R5cGVdID0gW10pKTtcbiAgICAgICAgICAgIGNhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcbiAgICAgICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgaW5kZXggPSBjYWxsYmFja3MuaW5kZXhPZihjYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgaWYgKGluZGV4ICE9PSAtMSlcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2tzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgICRzZXQoJCRwcm9wcykge1xuICAgICAgICAgICAgaWYgKHRoaXMuJCRzZXQgJiYgIWlzX2VtcHR5KCQkcHJvcHMpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4kJC5za2lwX2JvdW5kID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLiQkc2V0KCQkcHJvcHMpO1xuICAgICAgICAgICAgICAgIHRoaXMuJCQuc2tpcF9ib3VuZCA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbn1cbi8qKlxuICogQmFzZSBjbGFzcyBmb3IgU3ZlbHRlIGNvbXBvbmVudHMuIFVzZWQgd2hlbiBkZXY9ZmFsc2UuXG4gKi9cbmNsYXNzIFN2ZWx0ZUNvbXBvbmVudCB7XG4gICAgJGRlc3Ryb3koKSB7XG4gICAgICAgIGRlc3Ryb3lfY29tcG9uZW50KHRoaXMsIDEpO1xuICAgICAgICB0aGlzLiRkZXN0cm95ID0gbm9vcDtcbiAgICB9XG4gICAgJG9uKHR5cGUsIGNhbGxiYWNrKSB7XG4gICAgICAgIGlmICghaXNfZnVuY3Rpb24oY2FsbGJhY2spKSB7XG4gICAgICAgICAgICByZXR1cm4gbm9vcDtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjYWxsYmFja3MgPSAodGhpcy4kJC5jYWxsYmFja3NbdHlwZV0gfHwgKHRoaXMuJCQuY2FsbGJhY2tzW3R5cGVdID0gW10pKTtcbiAgICAgICAgY2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgaW5kZXggPSBjYWxsYmFja3MuaW5kZXhPZihjYWxsYmFjayk7XG4gICAgICAgICAgICBpZiAoaW5kZXggIT09IC0xKVxuICAgICAgICAgICAgICAgIGNhbGxiYWNrcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICAkc2V0KCQkcHJvcHMpIHtcbiAgICAgICAgaWYgKHRoaXMuJCRzZXQgJiYgIWlzX2VtcHR5KCQkcHJvcHMpKSB7XG4gICAgICAgICAgICB0aGlzLiQkLnNraXBfYm91bmQgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy4kJHNldCgkJHByb3BzKTtcbiAgICAgICAgICAgIHRoaXMuJCQuc2tpcF9ib3VuZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkaXNwYXRjaF9kZXYodHlwZSwgZGV0YWlsKSB7XG4gICAgZG9jdW1lbnQuZGlzcGF0Y2hFdmVudChjdXN0b21fZXZlbnQodHlwZSwgT2JqZWN0LmFzc2lnbih7IHZlcnNpb246ICczLjUzLjEnIH0sIGRldGFpbCksIHsgYnViYmxlczogdHJ1ZSB9KSk7XG59XG5mdW5jdGlvbiBhcHBlbmRfZGV2KHRhcmdldCwgbm9kZSkge1xuICAgIGRpc3BhdGNoX2RldignU3ZlbHRlRE9NSW5zZXJ0JywgeyB0YXJnZXQsIG5vZGUgfSk7XG4gICAgYXBwZW5kKHRhcmdldCwgbm9kZSk7XG59XG5mdW5jdGlvbiBhcHBlbmRfaHlkcmF0aW9uX2Rldih0YXJnZXQsIG5vZGUpIHtcbiAgICBkaXNwYXRjaF9kZXYoJ1N2ZWx0ZURPTUluc2VydCcsIHsgdGFyZ2V0LCBub2RlIH0pO1xuICAgIGFwcGVuZF9oeWRyYXRpb24odGFyZ2V0LCBub2RlKTtcbn1cbmZ1bmN0aW9uIGluc2VydF9kZXYodGFyZ2V0LCBub2RlLCBhbmNob3IpIHtcbiAgICBkaXNwYXRjaF9kZXYoJ1N2ZWx0ZURPTUluc2VydCcsIHsgdGFyZ2V0LCBub2RlLCBhbmNob3IgfSk7XG4gICAgaW5zZXJ0KHRhcmdldCwgbm9kZSwgYW5jaG9yKTtcbn1cbmZ1bmN0aW9uIGluc2VydF9oeWRyYXRpb25fZGV2KHRhcmdldCwgbm9kZSwgYW5jaG9yKSB7XG4gICAgZGlzcGF0Y2hfZGV2KCdTdmVsdGVET01JbnNlcnQnLCB7IHRhcmdldCwgbm9kZSwgYW5jaG9yIH0pO1xuICAgIGluc2VydF9oeWRyYXRpb24odGFyZ2V0LCBub2RlLCBhbmNob3IpO1xufVxuZnVuY3Rpb24gZGV0YWNoX2Rldihub2RlKSB7XG4gICAgZGlzcGF0Y2hfZGV2KCdTdmVsdGVET01SZW1vdmUnLCB7IG5vZGUgfSk7XG4gICAgZGV0YWNoKG5vZGUpO1xufVxuZnVuY3Rpb24gZGV0YWNoX2JldHdlZW5fZGV2KGJlZm9yZSwgYWZ0ZXIpIHtcbiAgICB3aGlsZSAoYmVmb3JlLm5leHRTaWJsaW5nICYmIGJlZm9yZS5uZXh0U2libGluZyAhPT0gYWZ0ZXIpIHtcbiAgICAgICAgZGV0YWNoX2RldihiZWZvcmUubmV4dFNpYmxpbmcpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGRldGFjaF9iZWZvcmVfZGV2KGFmdGVyKSB7XG4gICAgd2hpbGUgKGFmdGVyLnByZXZpb3VzU2libGluZykge1xuICAgICAgICBkZXRhY2hfZGV2KGFmdGVyLnByZXZpb3VzU2libGluZyk7XG4gICAgfVxufVxuZnVuY3Rpb24gZGV0YWNoX2FmdGVyX2RldihiZWZvcmUpIHtcbiAgICB3aGlsZSAoYmVmb3JlLm5leHRTaWJsaW5nKSB7XG4gICAgICAgIGRldGFjaF9kZXYoYmVmb3JlLm5leHRTaWJsaW5nKTtcbiAgICB9XG59XG5mdW5jdGlvbiBsaXN0ZW5fZGV2KG5vZGUsIGV2ZW50LCBoYW5kbGVyLCBvcHRpb25zLCBoYXNfcHJldmVudF9kZWZhdWx0LCBoYXNfc3RvcF9wcm9wYWdhdGlvbikge1xuICAgIGNvbnN0IG1vZGlmaWVycyA9IG9wdGlvbnMgPT09IHRydWUgPyBbJ2NhcHR1cmUnXSA6IG9wdGlvbnMgPyBBcnJheS5mcm9tKE9iamVjdC5rZXlzKG9wdGlvbnMpKSA6IFtdO1xuICAgIGlmIChoYXNfcHJldmVudF9kZWZhdWx0KVxuICAgICAgICBtb2RpZmllcnMucHVzaCgncHJldmVudERlZmF1bHQnKTtcbiAgICBpZiAoaGFzX3N0b3BfcHJvcGFnYXRpb24pXG4gICAgICAgIG1vZGlmaWVycy5wdXNoKCdzdG9wUHJvcGFnYXRpb24nKTtcbiAgICBkaXNwYXRjaF9kZXYoJ1N2ZWx0ZURPTUFkZEV2ZW50TGlzdGVuZXInLCB7IG5vZGUsIGV2ZW50LCBoYW5kbGVyLCBtb2RpZmllcnMgfSk7XG4gICAgY29uc3QgZGlzcG9zZSA9IGxpc3Rlbihub2RlLCBldmVudCwgaGFuZGxlciwgb3B0aW9ucyk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgZGlzcGF0Y2hfZGV2KCdTdmVsdGVET01SZW1vdmVFdmVudExpc3RlbmVyJywgeyBub2RlLCBldmVudCwgaGFuZGxlciwgbW9kaWZpZXJzIH0pO1xuICAgICAgICBkaXNwb3NlKCk7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIGF0dHJfZGV2KG5vZGUsIGF0dHJpYnV0ZSwgdmFsdWUpIHtcbiAgICBhdHRyKG5vZGUsIGF0dHJpYnV0ZSwgdmFsdWUpO1xuICAgIGlmICh2YWx1ZSA9PSBudWxsKVxuICAgICAgICBkaXNwYXRjaF9kZXYoJ1N2ZWx0ZURPTVJlbW92ZUF0dHJpYnV0ZScsIHsgbm9kZSwgYXR0cmlidXRlIH0pO1xuICAgIGVsc2VcbiAgICAgICAgZGlzcGF0Y2hfZGV2KCdTdmVsdGVET01TZXRBdHRyaWJ1dGUnLCB7IG5vZGUsIGF0dHJpYnV0ZSwgdmFsdWUgfSk7XG59XG5mdW5jdGlvbiBwcm9wX2Rldihub2RlLCBwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgICBub2RlW3Byb3BlcnR5XSA9IHZhbHVlO1xuICAgIGRpc3BhdGNoX2RldignU3ZlbHRlRE9NU2V0UHJvcGVydHknLCB7IG5vZGUsIHByb3BlcnR5LCB2YWx1ZSB9KTtcbn1cbmZ1bmN0aW9uIGRhdGFzZXRfZGV2KG5vZGUsIHByb3BlcnR5LCB2YWx1ZSkge1xuICAgIG5vZGUuZGF0YXNldFtwcm9wZXJ0eV0gPSB2YWx1ZTtcbiAgICBkaXNwYXRjaF9kZXYoJ1N2ZWx0ZURPTVNldERhdGFzZXQnLCB7IG5vZGUsIHByb3BlcnR5LCB2YWx1ZSB9KTtcbn1cbmZ1bmN0aW9uIHNldF9kYXRhX2Rldih0ZXh0LCBkYXRhKSB7XG4gICAgZGF0YSA9ICcnICsgZGF0YTtcbiAgICBpZiAodGV4dC53aG9sZVRleHQgPT09IGRhdGEpXG4gICAgICAgIHJldHVybjtcbiAgICBkaXNwYXRjaF9kZXYoJ1N2ZWx0ZURPTVNldERhdGEnLCB7IG5vZGU6IHRleHQsIGRhdGEgfSk7XG4gICAgdGV4dC5kYXRhID0gZGF0YTtcbn1cbmZ1bmN0aW9uIHZhbGlkYXRlX2VhY2hfYXJndW1lbnQoYXJnKSB7XG4gICAgaWYgKHR5cGVvZiBhcmcgIT09ICdzdHJpbmcnICYmICEoYXJnICYmIHR5cGVvZiBhcmcgPT09ICdvYmplY3QnICYmICdsZW5ndGgnIGluIGFyZykpIHtcbiAgICAgICAgbGV0IG1zZyA9ICd7I2VhY2h9IG9ubHkgaXRlcmF0ZXMgb3ZlciBhcnJheS1saWtlIG9iamVjdHMuJztcbiAgICAgICAgaWYgKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgYXJnICYmIFN5bWJvbC5pdGVyYXRvciBpbiBhcmcpIHtcbiAgICAgICAgICAgIG1zZyArPSAnIFlvdSBjYW4gdXNlIGEgc3ByZWFkIHRvIGNvbnZlcnQgdGhpcyBpdGVyYWJsZSBpbnRvIGFuIGFycmF5Lic7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gICAgfVxufVxuZnVuY3Rpb24gdmFsaWRhdGVfc2xvdHMobmFtZSwgc2xvdCwga2V5cykge1xuICAgIGZvciAoY29uc3Qgc2xvdF9rZXkgb2YgT2JqZWN0LmtleXMoc2xvdCkpIHtcbiAgICAgICAgaWYgKCF+a2V5cy5pbmRleE9mKHNsb3Rfa2V5KSkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKGA8JHtuYW1lfT4gcmVjZWl2ZWQgYW4gdW5leHBlY3RlZCBzbG90IFwiJHtzbG90X2tleX1cIi5gKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIHZhbGlkYXRlX2R5bmFtaWNfZWxlbWVudCh0YWcpIHtcbiAgICBjb25zdCBpc19zdHJpbmcgPSB0eXBlb2YgdGFnID09PSAnc3RyaW5nJztcbiAgICBpZiAodGFnICYmICFpc19zdHJpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCc8c3ZlbHRlOmVsZW1lbnQ+IGV4cGVjdHMgXCJ0aGlzXCIgYXR0cmlidXRlIHRvIGJlIGEgc3RyaW5nLicpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHZhbGlkYXRlX3ZvaWRfZHluYW1pY19lbGVtZW50KHRhZykge1xuICAgIGlmICh0YWcgJiYgaXNfdm9pZCh0YWcpKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihgPHN2ZWx0ZTplbGVtZW50IHRoaXM9XCIke3RhZ31cIj4gaXMgc2VsZi1jbG9zaW5nIGFuZCBjYW5ub3QgaGF2ZSBjb250ZW50LmApO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGNvbnN0cnVjdF9zdmVsdGVfY29tcG9uZW50X2Rldihjb21wb25lbnQsIHByb3BzKSB7XG4gICAgY29uc3QgZXJyb3JfbWVzc2FnZSA9ICd0aGlzPXsuLi59IG9mIDxzdmVsdGU6Y29tcG9uZW50PiBzaG91bGQgc3BlY2lmeSBhIFN2ZWx0ZSBjb21wb25lbnQuJztcbiAgICB0cnkge1xuICAgICAgICBjb25zdCBpbnN0YW5jZSA9IG5ldyBjb21wb25lbnQocHJvcHMpO1xuICAgICAgICBpZiAoIWluc3RhbmNlLiQkIHx8ICFpbnN0YW5jZS4kc2V0IHx8ICFpbnN0YW5jZS4kb24gfHwgIWluc3RhbmNlLiRkZXN0cm95KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JfbWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGluc3RhbmNlO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGNvbnN0IHsgbWVzc2FnZSB9ID0gZXJyO1xuICAgICAgICBpZiAodHlwZW9mIG1lc3NhZ2UgPT09ICdzdHJpbmcnICYmIG1lc3NhZ2UuaW5kZXhPZignaXMgbm90IGEgY29uc3RydWN0b3InKSAhPT0gLTEpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvcl9tZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8qKlxuICogQmFzZSBjbGFzcyBmb3IgU3ZlbHRlIGNvbXBvbmVudHMgd2l0aCBzb21lIG1pbm9yIGRldi1lbmhhbmNlbWVudHMuIFVzZWQgd2hlbiBkZXY9dHJ1ZS5cbiAqL1xuY2xhc3MgU3ZlbHRlQ29tcG9uZW50RGV2IGV4dGVuZHMgU3ZlbHRlQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgICAgIGlmICghb3B0aW9ucyB8fCAoIW9wdGlvbnMudGFyZ2V0ICYmICFvcHRpb25zLiQkaW5saW5lKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiJ3RhcmdldCcgaXMgYSByZXF1aXJlZCBvcHRpb25cIik7XG4gICAgICAgIH1cbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG4gICAgJGRlc3Ryb3koKSB7XG4gICAgICAgIHN1cGVyLiRkZXN0cm95KCk7XG4gICAgICAgIHRoaXMuJGRlc3Ryb3kgPSAoKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ0NvbXBvbmVudCB3YXMgYWxyZWFkeSBkZXN0cm95ZWQnKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlXG4gICAgICAgIH07XG4gICAgfVxuICAgICRjYXB0dXJlX3N0YXRlKCkgeyB9XG4gICAgJGluamVjdF9zdGF0ZSgpIHsgfVxufVxuLyoqXG4gKiBCYXNlIGNsYXNzIHRvIGNyZWF0ZSBzdHJvbmdseSB0eXBlZCBTdmVsdGUgY29tcG9uZW50cy5cbiAqIFRoaXMgb25seSBleGlzdHMgZm9yIHR5cGluZyBwdXJwb3NlcyBhbmQgc2hvdWxkIGJlIHVzZWQgaW4gYC5kLnRzYCBmaWxlcy5cbiAqXG4gKiAjIyMgRXhhbXBsZTpcbiAqXG4gKiBZb3UgaGF2ZSBjb21wb25lbnQgbGlicmFyeSBvbiBucG0gY2FsbGVkIGBjb21wb25lbnQtbGlicmFyeWAsIGZyb20gd2hpY2hcbiAqIHlvdSBleHBvcnQgYSBjb21wb25lbnQgY2FsbGVkIGBNeUNvbXBvbmVudGAuIEZvciBTdmVsdGUrVHlwZVNjcmlwdCB1c2VycyxcbiAqIHlvdSB3YW50IHRvIHByb3ZpZGUgdHlwaW5ncy4gVGhlcmVmb3JlIHlvdSBjcmVhdGUgYSBgaW5kZXguZC50c2A6XG4gKiBgYGB0c1xuICogaW1wb3J0IHsgU3ZlbHRlQ29tcG9uZW50VHlwZWQgfSBmcm9tIFwic3ZlbHRlXCI7XG4gKiBleHBvcnQgY2xhc3MgTXlDb21wb25lbnQgZXh0ZW5kcyBTdmVsdGVDb21wb25lbnRUeXBlZDx7Zm9vOiBzdHJpbmd9PiB7fVxuICogYGBgXG4gKiBUeXBpbmcgdGhpcyBtYWtlcyBpdCBwb3NzaWJsZSBmb3IgSURFcyBsaWtlIFZTIENvZGUgd2l0aCB0aGUgU3ZlbHRlIGV4dGVuc2lvblxuICogdG8gcHJvdmlkZSBpbnRlbGxpc2Vuc2UgYW5kIHRvIHVzZSB0aGUgY29tcG9uZW50IGxpa2UgdGhpcyBpbiBhIFN2ZWx0ZSBmaWxlXG4gKiB3aXRoIFR5cGVTY3JpcHQ6XG4gKiBgYGBzdmVsdGVcbiAqIDxzY3JpcHQgbGFuZz1cInRzXCI+XG4gKiBcdGltcG9ydCB7IE15Q29tcG9uZW50IH0gZnJvbSBcImNvbXBvbmVudC1saWJyYXJ5XCI7XG4gKiA8L3NjcmlwdD5cbiAqIDxNeUNvbXBvbmVudCBmb289eydiYXInfSAvPlxuICogYGBgXG4gKlxuICogIyMjIyBXaHkgbm90IG1ha2UgdGhpcyBwYXJ0IG9mIGBTdmVsdGVDb21wb25lbnQoRGV2KWA/XG4gKiBCZWNhdXNlXG4gKiBgYGB0c1xuICogY2xhc3MgQVN1YmNsYXNzT2ZTdmVsdGVDb21wb25lbnQgZXh0ZW5kcyBTdmVsdGVDb21wb25lbnQ8e2Zvbzogc3RyaW5nfT4ge31cbiAqIGNvbnN0IGNvbXBvbmVudDogdHlwZW9mIFN2ZWx0ZUNvbXBvbmVudCA9IEFTdWJjbGFzc09mU3ZlbHRlQ29tcG9uZW50O1xuICogYGBgXG4gKiB3aWxsIHRocm93IGEgdHlwZSBlcnJvciwgc28gd2UgbmVlZCB0byBzZXBhcmF0ZSB0aGUgbW9yZSBzdHJpY3RseSB0eXBlZCBjbGFzcy5cbiAqL1xuY2xhc3MgU3ZlbHRlQ29tcG9uZW50VHlwZWQgZXh0ZW5kcyBTdmVsdGVDb21wb25lbnREZXYge1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIob3B0aW9ucyk7XG4gICAgfVxufVxuZnVuY3Rpb24gbG9vcF9ndWFyZCh0aW1lb3V0KSB7XG4gICAgY29uc3Qgc3RhcnQgPSBEYXRlLm5vdygpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIGlmIChEYXRlLm5vdygpIC0gc3RhcnQgPiB0aW1lb3V0KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0luZmluaXRlIGxvb3AgZGV0ZWN0ZWQnKTtcbiAgICAgICAgfVxuICAgIH07XG59XG5cbmV4cG9ydCB7IEh0bWxUYWcsIEh0bWxUYWdIeWRyYXRpb24sIFN2ZWx0ZUNvbXBvbmVudCwgU3ZlbHRlQ29tcG9uZW50RGV2LCBTdmVsdGVDb21wb25lbnRUeXBlZCwgU3ZlbHRlRWxlbWVudCwgYWN0aW9uX2Rlc3Ryb3llciwgYWRkX2F0dHJpYnV0ZSwgYWRkX2NsYXNzZXMsIGFkZF9mbHVzaF9jYWxsYmFjaywgYWRkX2xvY2F0aW9uLCBhZGRfcmVuZGVyX2NhbGxiYWNrLCBhZGRfcmVzaXplX2xpc3RlbmVyLCBhZGRfc3R5bGVzLCBhZGRfdHJhbnNmb3JtLCBhZnRlclVwZGF0ZSwgYXBwZW5kLCBhcHBlbmRfZGV2LCBhcHBlbmRfZW1wdHlfc3R5bGVzaGVldCwgYXBwZW5kX2h5ZHJhdGlvbiwgYXBwZW5kX2h5ZHJhdGlvbl9kZXYsIGFwcGVuZF9zdHlsZXMsIGFzc2lnbiwgYXR0ciwgYXR0cl9kZXYsIGF0dHJpYnV0ZV90b19vYmplY3QsIGJlZm9yZVVwZGF0ZSwgYmluZCwgYmluZGluZ19jYWxsYmFja3MsIGJsYW5rX29iamVjdCwgYnViYmxlLCBjaGVja19vdXRyb3MsIGNoaWxkcmVuLCBjbGFpbV9jb21wb25lbnQsIGNsYWltX2VsZW1lbnQsIGNsYWltX2h0bWxfdGFnLCBjbGFpbV9zcGFjZSwgY2xhaW1fc3ZnX2VsZW1lbnQsIGNsYWltX3RleHQsIGNsZWFyX2xvb3BzLCBjb21wb25lbnRfc3Vic2NyaWJlLCBjb21wdXRlX3Jlc3RfcHJvcHMsIGNvbXB1dGVfc2xvdHMsIGNvbnN0cnVjdF9zdmVsdGVfY29tcG9uZW50LCBjb25zdHJ1Y3Rfc3ZlbHRlX2NvbXBvbmVudF9kZXYsIGNyZWF0ZUV2ZW50RGlzcGF0Y2hlciwgY3JlYXRlX2FuaW1hdGlvbiwgY3JlYXRlX2JpZGlyZWN0aW9uYWxfdHJhbnNpdGlvbiwgY3JlYXRlX2NvbXBvbmVudCwgY3JlYXRlX2luX3RyYW5zaXRpb24sIGNyZWF0ZV9vdXRfdHJhbnNpdGlvbiwgY3JlYXRlX3Nsb3QsIGNyZWF0ZV9zc3JfY29tcG9uZW50LCBjdXJyZW50X2NvbXBvbmVudCwgY3VzdG9tX2V2ZW50LCBkYXRhc2V0X2RldiwgZGVidWcsIGRlc3Ryb3lfYmxvY2ssIGRlc3Ryb3lfY29tcG9uZW50LCBkZXN0cm95X2VhY2gsIGRldGFjaCwgZGV0YWNoX2FmdGVyX2RldiwgZGV0YWNoX2JlZm9yZV9kZXYsIGRldGFjaF9iZXR3ZWVuX2RldiwgZGV0YWNoX2RldiwgZGlydHlfY29tcG9uZW50cywgZGlzcGF0Y2hfZGV2LCBlYWNoLCBlbGVtZW50LCBlbGVtZW50X2lzLCBlbXB0eSwgZW5kX2h5ZHJhdGluZywgZXNjYXBlLCBlc2NhcGVfYXR0cmlidXRlX3ZhbHVlLCBlc2NhcGVfb2JqZWN0LCBleGNsdWRlX2ludGVybmFsX3Byb3BzLCBmaXhfYW5kX2Rlc3Ryb3lfYmxvY2ssIGZpeF9hbmRfb3V0cm9fYW5kX2Rlc3Ryb3lfYmxvY2ssIGZpeF9wb3NpdGlvbiwgZmx1c2gsIGdldEFsbENvbnRleHRzLCBnZXRDb250ZXh0LCBnZXRfYWxsX2RpcnR5X2Zyb21fc2NvcGUsIGdldF9iaW5kaW5nX2dyb3VwX3ZhbHVlLCBnZXRfY3VycmVudF9jb21wb25lbnQsIGdldF9jdXN0b21fZWxlbWVudHNfc2xvdHMsIGdldF9yb290X2Zvcl9zdHlsZSwgZ2V0X3Nsb3RfY2hhbmdlcywgZ2V0X3NwcmVhZF9vYmplY3QsIGdldF9zcHJlYWRfdXBkYXRlLCBnZXRfc3RvcmVfdmFsdWUsIGdsb2JhbHMsIGdyb3VwX291dHJvcywgaGFuZGxlX3Byb21pc2UsIGhhc0NvbnRleHQsIGhhc19wcm9wLCBoZWFkX3NlbGVjdG9yLCBpZGVudGl0eSwgaW5pdCwgaW5zZXJ0LCBpbnNlcnRfZGV2LCBpbnNlcnRfaHlkcmF0aW9uLCBpbnNlcnRfaHlkcmF0aW9uX2RldiwgaW50cm9zLCBpbnZhbGlkX2F0dHJpYnV0ZV9uYW1lX2NoYXJhY3RlciwgaXNfY2xpZW50LCBpc19jcm9zc29yaWdpbiwgaXNfZW1wdHksIGlzX2Z1bmN0aW9uLCBpc19wcm9taXNlLCBpc192b2lkLCBsaXN0ZW4sIGxpc3Rlbl9kZXYsIGxvb3AsIGxvb3BfZ3VhcmQsIG1lcmdlX3Nzcl9zdHlsZXMsIG1pc3NpbmdfY29tcG9uZW50LCBtb3VudF9jb21wb25lbnQsIG5vb3AsIG5vdF9lcXVhbCwgbm93LCBudWxsX3RvX2VtcHR5LCBvYmplY3Rfd2l0aG91dF9wcm9wZXJ0aWVzLCBvbkRlc3Ryb3ksIG9uTW91bnQsIG9uY2UsIG91dHJvX2FuZF9kZXN0cm95X2Jsb2NrLCBwcmV2ZW50X2RlZmF1bHQsIHByb3BfZGV2LCBxdWVyeV9zZWxlY3Rvcl9hbGwsIHJhZiwgcnVuLCBydW5fYWxsLCBzYWZlX25vdF9lcXVhbCwgc2NoZWR1bGVfdXBkYXRlLCBzZWxlY3RfbXVsdGlwbGVfdmFsdWUsIHNlbGVjdF9vcHRpb24sIHNlbGVjdF9vcHRpb25zLCBzZWxlY3RfdmFsdWUsIHNlbGYsIHNldENvbnRleHQsIHNldF9hdHRyaWJ1dGVzLCBzZXRfY3VycmVudF9jb21wb25lbnQsIHNldF9jdXN0b21fZWxlbWVudF9kYXRhLCBzZXRfY3VzdG9tX2VsZW1lbnRfZGF0YV9tYXAsIHNldF9kYXRhLCBzZXRfZGF0YV9kZXYsIHNldF9pbnB1dF90eXBlLCBzZXRfaW5wdXRfdmFsdWUsIHNldF9ub3csIHNldF9yYWYsIHNldF9zdG9yZV92YWx1ZSwgc2V0X3N0eWxlLCBzZXRfc3ZnX2F0dHJpYnV0ZXMsIHNwYWNlLCBzcHJlYWQsIHNyY191cmxfZXF1YWwsIHN0YXJ0X2h5ZHJhdGluZywgc3RvcF9wcm9wYWdhdGlvbiwgc3Vic2NyaWJlLCBzdmdfZWxlbWVudCwgdGV4dCwgdGljaywgdGltZV9yYW5nZXNfdG9fYXJyYXksIHRvX251bWJlciwgdG9nZ2xlX2NsYXNzLCB0cmFuc2l0aW9uX2luLCB0cmFuc2l0aW9uX291dCwgdHJ1c3RlZCwgdXBkYXRlX2F3YWl0X2Jsb2NrX2JyYW5jaCwgdXBkYXRlX2tleWVkX2VhY2gsIHVwZGF0ZV9zbG90LCB1cGRhdGVfc2xvdF9iYXNlLCB2YWxpZGF0ZV9jb21wb25lbnQsIHZhbGlkYXRlX2R5bmFtaWNfZWxlbWVudCwgdmFsaWRhdGVfZWFjaF9hcmd1bWVudCwgdmFsaWRhdGVfZWFjaF9rZXlzLCB2YWxpZGF0ZV9zbG90cywgdmFsaWRhdGVfc3RvcmUsIHZhbGlkYXRlX3ZvaWRfZHluYW1pY19lbGVtZW50LCB4bGlua19hdHRyIH07XG4iLCAiaW1wb3J0IHsgbm9vcCwgc2FmZV9ub3RfZXF1YWwsIHN1YnNjcmliZSwgcnVuX2FsbCwgaXNfZnVuY3Rpb24gfSBmcm9tICcuLi9pbnRlcm5hbC9pbmRleC5tanMnO1xuZXhwb3J0IHsgZ2V0X3N0b3JlX3ZhbHVlIGFzIGdldCB9IGZyb20gJy4uL2ludGVybmFsL2luZGV4Lm1qcyc7XG5cbmNvbnN0IHN1YnNjcmliZXJfcXVldWUgPSBbXTtcbi8qKlxuICogQ3JlYXRlcyBhIGBSZWFkYWJsZWAgc3RvcmUgdGhhdCBhbGxvd3MgcmVhZGluZyBieSBzdWJzY3JpcHRpb24uXG4gKiBAcGFyYW0gdmFsdWUgaW5pdGlhbCB2YWx1ZVxuICogQHBhcmFtIHtTdGFydFN0b3BOb3RpZmllcn1zdGFydCBzdGFydCBhbmQgc3RvcCBub3RpZmljYXRpb25zIGZvciBzdWJzY3JpcHRpb25zXG4gKi9cbmZ1bmN0aW9uIHJlYWRhYmxlKHZhbHVlLCBzdGFydCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHN1YnNjcmliZTogd3JpdGFibGUodmFsdWUsIHN0YXJ0KS5zdWJzY3JpYmVcbiAgICB9O1xufVxuLyoqXG4gKiBDcmVhdGUgYSBgV3JpdGFibGVgIHN0b3JlIHRoYXQgYWxsb3dzIGJvdGggdXBkYXRpbmcgYW5kIHJlYWRpbmcgYnkgc3Vic2NyaXB0aW9uLlxuICogQHBhcmFtIHsqPX12YWx1ZSBpbml0aWFsIHZhbHVlXG4gKiBAcGFyYW0ge1N0YXJ0U3RvcE5vdGlmaWVyPX1zdGFydCBzdGFydCBhbmQgc3RvcCBub3RpZmljYXRpb25zIGZvciBzdWJzY3JpcHRpb25zXG4gKi9cbmZ1bmN0aW9uIHdyaXRhYmxlKHZhbHVlLCBzdGFydCA9IG5vb3ApIHtcbiAgICBsZXQgc3RvcDtcbiAgICBjb25zdCBzdWJzY3JpYmVycyA9IG5ldyBTZXQoKTtcbiAgICBmdW5jdGlvbiBzZXQobmV3X3ZhbHVlKSB7XG4gICAgICAgIGlmIChzYWZlX25vdF9lcXVhbCh2YWx1ZSwgbmV3X3ZhbHVlKSkge1xuICAgICAgICAgICAgdmFsdWUgPSBuZXdfdmFsdWU7XG4gICAgICAgICAgICBpZiAoc3RvcCkgeyAvLyBzdG9yZSBpcyByZWFkeVxuICAgICAgICAgICAgICAgIGNvbnN0IHJ1bl9xdWV1ZSA9ICFzdWJzY3JpYmVyX3F1ZXVlLmxlbmd0aDtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHN1YnNjcmliZXIgb2Ygc3Vic2NyaWJlcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlclsxXSgpO1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyX3F1ZXVlLnB1c2goc3Vic2NyaWJlciwgdmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocnVuX3F1ZXVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3Vic2NyaWJlcl9xdWV1ZS5sZW5ndGg7IGkgKz0gMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlcl9xdWV1ZVtpXVswXShzdWJzY3JpYmVyX3F1ZXVlW2kgKyAxXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlcl9xdWV1ZS5sZW5ndGggPSAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiB1cGRhdGUoZm4pIHtcbiAgICAgICAgc2V0KGZuKHZhbHVlKSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHN1YnNjcmliZShydW4sIGludmFsaWRhdGUgPSBub29wKSB7XG4gICAgICAgIGNvbnN0IHN1YnNjcmliZXIgPSBbcnVuLCBpbnZhbGlkYXRlXTtcbiAgICAgICAgc3Vic2NyaWJlcnMuYWRkKHN1YnNjcmliZXIpO1xuICAgICAgICBpZiAoc3Vic2NyaWJlcnMuc2l6ZSA9PT0gMSkge1xuICAgICAgICAgICAgc3RvcCA9IHN0YXJ0KHNldCkgfHwgbm9vcDtcbiAgICAgICAgfVxuICAgICAgICBydW4odmFsdWUpO1xuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgc3Vic2NyaWJlcnMuZGVsZXRlKHN1YnNjcmliZXIpO1xuICAgICAgICAgICAgaWYgKHN1YnNjcmliZXJzLnNpemUgPT09IDApIHtcbiAgICAgICAgICAgICAgICBzdG9wKCk7XG4gICAgICAgICAgICAgICAgc3RvcCA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiB7IHNldCwgdXBkYXRlLCBzdWJzY3JpYmUgfTtcbn1cbmZ1bmN0aW9uIGRlcml2ZWQoc3RvcmVzLCBmbiwgaW5pdGlhbF92YWx1ZSkge1xuICAgIGNvbnN0IHNpbmdsZSA9ICFBcnJheS5pc0FycmF5KHN0b3Jlcyk7XG4gICAgY29uc3Qgc3RvcmVzX2FycmF5ID0gc2luZ2xlXG4gICAgICAgID8gW3N0b3Jlc11cbiAgICAgICAgOiBzdG9yZXM7XG4gICAgY29uc3QgYXV0byA9IGZuLmxlbmd0aCA8IDI7XG4gICAgcmV0dXJuIHJlYWRhYmxlKGluaXRpYWxfdmFsdWUsIChzZXQpID0+IHtcbiAgICAgICAgbGV0IGluaXRlZCA9IGZhbHNlO1xuICAgICAgICBjb25zdCB2YWx1ZXMgPSBbXTtcbiAgICAgICAgbGV0IHBlbmRpbmcgPSAwO1xuICAgICAgICBsZXQgY2xlYW51cCA9IG5vb3A7XG4gICAgICAgIGNvbnN0IHN5bmMgPSAoKSA9PiB7XG4gICAgICAgICAgICBpZiAocGVuZGluZykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNsZWFudXAoKTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGZuKHNpbmdsZSA/IHZhbHVlc1swXSA6IHZhbHVlcywgc2V0KTtcbiAgICAgICAgICAgIGlmIChhdXRvKSB7XG4gICAgICAgICAgICAgICAgc2V0KHJlc3VsdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjbGVhbnVwID0gaXNfZnVuY3Rpb24ocmVzdWx0KSA/IHJlc3VsdCA6IG5vb3A7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHVuc3Vic2NyaWJlcnMgPSBzdG9yZXNfYXJyYXkubWFwKChzdG9yZSwgaSkgPT4gc3Vic2NyaWJlKHN0b3JlLCAodmFsdWUpID0+IHtcbiAgICAgICAgICAgIHZhbHVlc1tpXSA9IHZhbHVlO1xuICAgICAgICAgICAgcGVuZGluZyAmPSB+KDEgPDwgaSk7XG4gICAgICAgICAgICBpZiAoaW5pdGVkKSB7XG4gICAgICAgICAgICAgICAgc3luYygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCAoKSA9PiB7XG4gICAgICAgICAgICBwZW5kaW5nIHw9ICgxIDw8IGkpO1xuICAgICAgICB9KSk7XG4gICAgICAgIGluaXRlZCA9IHRydWU7XG4gICAgICAgIHN5bmMoKTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIHN0b3AoKSB7XG4gICAgICAgICAgICBydW5fYWxsKHVuc3Vic2NyaWJlcnMpO1xuICAgICAgICAgICAgY2xlYW51cCgpO1xuICAgICAgICB9O1xuICAgIH0pO1xufVxuXG5leHBvcnQgeyBkZXJpdmVkLCByZWFkYWJsZSwgd3JpdGFibGUgfTtcbiIsICJpbXBvcnQge1xuICAgIENvbXBvbmVudCxcbiAgICBNYXJrZG93blBvc3RQcm9jZXNzb3JDb250ZXh0LFxuICAgIE1hcmtkb3duUmVuZGVyQ2hpbGQsXG4gICAgTm90aWNlLFxuICAgIHBhcnNlWWFtbFxufSBmcm9tIFwib2JzaWRpYW5cIjtcbmltcG9ydCB0eXBlIEluaXRpYXRpdmVUcmFja2VyIGZyb20gXCIuLi9tYWluXCI7XG5pbXBvcnQgeyBDcmVhdHVyZSB9IGZyb20gXCIuLi91dGlscy9jcmVhdHVyZVwiO1xuXG5pbXBvcnQgRW5jb3VudGVyVUkgZnJvbSBcIi4vdWkvRW5jb3VudGVyLnN2ZWx0ZVwiO1xuaW1wb3J0IEVuY291bnRlclRhYmxlIGZyb20gXCIuL3VpL0VuY291bnRlclRhYmxlLnN2ZWx0ZVwiO1xuXG50eXBlIFJhd0NyZWF0dXJlQXJyYXkgPSBzdHJpbmcgfCBBcnJheTxzdHJpbmcgfCB7IFtrZXk6IG51bWJlcl06IHN0cmluZyB9PjtcbnR5cGUgUmF3Q3JlYXR1cmUgPSBzdHJpbmcgfCB7IFtrZXk6IG51bWJlcl06IHN0cmluZyB9O1xudHlwZSBSYXdQbGF5ZXJzID0gYm9vbGVhbiB8IFwibm9uZVwiIHwgc3RyaW5nW107XG5pbnRlcmZhY2UgRW5jb3VudGVyUGFyYW1ldGVycyB7XG4gICAgbmFtZT86IHN0cmluZztcbiAgICBwbGF5ZXJzPzogUmF3UGxheWVycztcbiAgICBwYXJ0eT86IHN0cmluZztcbiAgICBoaWRlPzogXCJwbGF5ZXJzXCIgfCBcImNyZWF0dXJlc1wiIHwgc3RyaW5nW107XG4gICAgY3JlYXR1cmVzPzogUmF3Q3JlYXR1cmVBcnJheTtcbiAgICB4cD86IG51bWJlcjtcbn1cbmludGVyZmFjZSBDcmVhdHVyZVN0YXRzIHtcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgYWM6IG51bWJlcjtcbiAgICBocDogbnVtYmVyO1xuICAgIG1vZGlmaWVyOiBudW1iZXI7XG4gICAgeHA6IG51bWJlcjtcbiAgICBkaXNwbGF5Pzogc3RyaW5nO1xuICAgIGhpZGRlbjogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGNvbnN0IGVxdWl2YWxlbnQgPSAoXG4gICAgY3JlYXR1cmU6IENyZWF0dXJlIHwgQ3JlYXR1cmVTdGF0cyxcbiAgICBleGlzdGluZzogQ3JlYXR1cmUgfCBDcmVhdHVyZVN0YXRzXG4pID0+IHtcbiAgICByZXR1cm4gKFxuICAgICAgICBjcmVhdHVyZS5uYW1lID09IGV4aXN0aW5nLm5hbWUgJiZcbiAgICAgICAgY3JlYXR1cmUuZGlzcGxheSA9PSBleGlzdGluZy5kaXNwbGF5ICYmXG4gICAgICAgIGNyZWF0dXJlLmFjID09IGV4aXN0aW5nLmFjICYmXG4gICAgICAgIGNyZWF0dXJlLmhwID09IGV4aXN0aW5nLmhwICYmXG4gICAgICAgIGNyZWF0dXJlLm1vZGlmaWVyID09IGV4aXN0aW5nLm1vZGlmaWVyICYmXG4gICAgICAgIGNyZWF0dXJlLnhwID09IGV4aXN0aW5nLnhwICYmXG4gICAgICAgIGNyZWF0dXJlLmhpZGRlbiA9PSBleGlzdGluZy5oaWRkZW5cbiAgICApO1xufTtcblxuZXhwb3J0IGludGVyZmFjZSBQYXJzZWRQYXJhbXMge1xuICAgIG5hbWU6IHN0cmluZztcbiAgICBwbGF5ZXJzOiBzdHJpbmdbXTtcbiAgICBwYXJ0eTogc3RyaW5nO1xuICAgIGhpZGU6IHN0cmluZ1tdO1xuICAgIGNyZWF0dXJlczogTWFwPENyZWF0dXJlLCBzdHJpbmcgfCBudW1iZXI+O1xuICAgIHhwOiBudW1iZXI7XG4gICAgcGxheWVyTGV2ZWxzOiBudW1iZXJbXTtcbn1cblxuZXhwb3J0IGNsYXNzIEVuY291bnRlclBhcnNlciB7XG4gICAgY29uc3RydWN0b3IocHVibGljIHBsdWdpbjogSW5pdGlhdGl2ZVRyYWNrZXIpIHt9XG4gICAgYXN5bmMgcGFyc2UocGFyYW1zOiBFbmNvdW50ZXJQYXJhbWV0ZXJzKTogUHJvbWlzZTxQYXJzZWRQYXJhbXM+IHtcbiAgICAgICAgY29uc3QgbmFtZSA9IHBhcmFtcy5uYW1lO1xuICAgICAgICBjb25zdCBwYXJ0eSA9IHBhcmFtcy5wYXJ0eSA/PyB0aGlzLnBsdWdpbi5kYXRhLmRlZmF1bHRQYXJ0eTtcbiAgICAgICAgY29uc3QgcGxheWVyczogc3RyaW5nW10gPSB0aGlzLnBhcnNlUGxheWVycyhwYXJhbXMpO1xuICAgICAgICBjb25zdCBoaWRlID0gdGhpcy5wYXJzZUhpZGUocGFyYW1zKTtcbiAgICAgICAgY29uc3QgcmF3TW9uc3RlcnMgPSBwYXJhbXMuY3JlYXR1cmVzID8/IFtdO1xuXG4gICAgICAgIGxldCBjcmVhdHVyZXMgPSBhd2FpdCB0aGlzLnBhcnNlUmF3Q3JlYXR1cmVzKHJhd01vbnN0ZXJzKTtcblxuICAgICAgICBjb25zdCB4cCA9IHBhcmFtcy54cCA/PyBudWxsO1xuICAgICAgICBjb25zdCBwbGF5ZXJMZXZlbHMgPSB0aGlzLnBsdWdpbi5kYXRhLnBsYXllcnNcbiAgICAgICAgICAgIC5tYXAoKHApID0+IHAubGV2ZWwpXG4gICAgICAgICAgICAuZmlsdGVyKChwKSA9PiBwKTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgIHBsYXllcnMsXG4gICAgICAgICAgICBwYXJ0eSxcbiAgICAgICAgICAgIGhpZGUsXG4gICAgICAgICAgICBjcmVhdHVyZXMsXG4gICAgICAgICAgICB4cCxcbiAgICAgICAgICAgIHBsYXllckxldmVsc1xuICAgICAgICB9O1xuICAgIH1cbiAgICBwYXJzZUhpZGUocGFyYW1zOiBFbmNvdW50ZXJQYXJhbWV0ZXJzKTogc3RyaW5nW10ge1xuICAgICAgICBpZiAoIShcImhpZGVcIiBpbiAocGFyYW1zID8/IHt9KSkpIHJldHVybiBbXTtcbiAgICAgICAgaWYgKHR5cGVvZiBwYXJhbXMuaGlkZSA9PSBcInN0cmluZ1wiKVxuICAgICAgICAgICAgcmV0dXJuIFtcImNyZWF0dXJlc1wiLCBcInBsYXllcnNcIl0uZmlsdGVyKCh2KSA9PiBwYXJhbXMuaGlkZSA9PSB2KTtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkocGFyYW1zLmhpZGUpKVxuICAgICAgICAgICAgcmV0dXJuIFtcImNyZWF0dXJlc1wiLCBcInBsYXllcnNcIl0uZmlsdGVyKCh2KSA9PlxuICAgICAgICAgICAgICAgIHBhcmFtcy5oaWRlLmluY2x1ZGVzKHYpXG4gICAgICAgICAgICApO1xuXG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgcGFyc2VQbGF5ZXJzKHBhcmFtczogRW5jb3VudGVyUGFyYW1ldGVycykge1xuICAgICAgICBjb25zdCBwYXJ0eU5hbWUgPSBwYXJhbXMucGFydHkgPz8gdGhpcy5wbHVnaW4uZGF0YS5kZWZhdWx0UGFydHk7XG4gICAgICAgIGNvbnN0IHBsYXllcnNUb1JldHVybjogc3RyaW5nW10gPSBbXTtcbiAgICAgICAgY29uc3QgcGxheWVycyA9IHBhcmFtcy5wbGF5ZXJzO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgICBwYXJ0eU5hbWUgJiZcbiAgICAgICAgICAgIHRoaXMucGx1Z2luLmRhdGEucGFydGllcy5maW5kKFxuICAgICAgICAgICAgICAgIChwKSA9PiBwLm5hbWUudG9Mb3dlckNhc2UoKSA9PSBwYXJ0eU5hbWUudG9Mb3dlckNhc2UoKVxuICAgICAgICAgICAgKVxuICAgICAgICApIHtcbiAgICAgICAgICAgIGNvbnN0IHBhcnR5ID0gdGhpcy5wbHVnaW4uZGF0YS5wYXJ0aWVzLmZpbmQoXG4gICAgICAgICAgICAgICAgKHApID0+IHAubmFtZS50b0xvd2VyQ2FzZSgpID09IHBhcnR5TmFtZS50b0xvd2VyQ2FzZSgpXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgcGxheWVyc1RvUmV0dXJuLnB1c2goLi4ucGFydHkucGxheWVycyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBsYXllcnMgPT0gXCJub25lXCIgfHwgcGxheWVycyA9PSBmYWxzZSkge1xuICAgICAgICAgICAgcGxheWVyc1RvUmV0dXJuLnNwbGljZSgwLCBwbGF5ZXJzVG9SZXR1cm4ubGVuZ3RoKTtcbiAgICAgICAgfSBlbHNlIGlmIChwbGF5ZXJzID09IHRydWUpIHtcbiAgICAgICAgICAgIHBsYXllcnNUb1JldHVybi5wdXNoKFxuICAgICAgICAgICAgICAgIC4uLnRoaXMucGx1Z2luLmRhdGEucGxheWVycy5tYXAoKHApID0+IHAubmFtZSlcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSBpZiAoIXBsYXllcnMgJiYgIXBhcmFtcy5wYXJ0eSkge1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBwbGF5ZXJzID09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHBsYXllcnNUb1JldHVybi5wdXNoKHBsYXllcnMpO1xuICAgICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkocGxheWVycykpIHtcbiAgICAgICAgICAgIHBsYXllcnNUb1JldHVybi5wdXNoKFxuICAgICAgICAgICAgICAgIC4uLih0aGlzLnBsdWdpbi5kYXRhLnBsYXllcnMgPz8gW10pXG4gICAgICAgICAgICAgICAgICAgIC5tYXAoKHApID0+IHAubmFtZSlcbiAgICAgICAgICAgICAgICAgICAgLmZpbHRlcigocCkgPT5cbiAgICAgICAgICAgICAgICAgICAgICAgIChwbGF5ZXJzIGFzIHN0cmluZ1tdKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoKG4pID0+IG4udG9Mb3dlckNhc2UoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuaW5jbHVkZXMocC50b0xvd2VyQ2FzZSgpKVxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBBcnJheS5mcm9tKG5ldyBTZXQocGxheWVyc1RvUmV0dXJuKSk7XG4gICAgfVxuICAgIGFzeW5jIHBhcnNlUmF3Q3JlYXR1cmVzKHJhd01vbnN0ZXJzOiBSYXdDcmVhdHVyZUFycmF5KSB7XG4gICAgICAgIGNvbnN0IGNyZWF0dXJlTWFwOiBNYXA8Q3JlYXR1cmUsIG51bWJlciB8IHN0cmluZz4gPSBuZXcgTWFwKCk7XG4gICAgICAgIGlmIChyYXdNb25zdGVycyAmJiBBcnJheS5pc0FycmF5KHJhd01vbnN0ZXJzKSkge1xuICAgICAgICAgICAgZm9yIChjb25zdCByYXcgb2YgcmF3TW9uc3RlcnMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IGNyZWF0dXJlLCBudW1iZXIgPSAxIH0gPVxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBhcnNlUmF3Q3JlYXR1cmUocmF3KSA/PyB7fTtcbiAgICAgICAgICAgICAgICBpZiAoIWNyZWF0dXJlKSBjb250aW51ZTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IHN0YXRzID0ge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBjcmVhdHVyZS5uYW1lLFxuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBjcmVhdHVyZS5kaXNwbGF5LFxuICAgICAgICAgICAgICAgICAgICBhYzogY3JlYXR1cmUuYWMsXG4gICAgICAgICAgICAgICAgICAgIGhwOiBjcmVhdHVyZS5ocCxcbiAgICAgICAgICAgICAgICAgICAgbW9kaWZpZXI6IGNyZWF0dXJlLm1vZGlmaWVyLFxuICAgICAgICAgICAgICAgICAgICB4cDogY3JlYXR1cmUueHAsXG4gICAgICAgICAgICAgICAgICAgIGhpZGRlbjogY3JlYXR1cmUuaGlkZGVuXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBjb25zdCBleGlzdGluZyA9IFsuLi5jcmVhdHVyZU1hcF0uZmluZCgoW2NdKSA9PlxuICAgICAgICAgICAgICAgICAgICBlcXVpdmFsZW50KGMsIHN0YXRzKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgaWYgKCFleGlzdGluZykge1xuICAgICAgICAgICAgICAgICAgICBjcmVhdHVyZU1hcC5zZXQoY3JlYXR1cmUsIG51bWJlcik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGFtb3VudDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpc05hTihOdW1iZXIobnVtYmVyKSkgJiYgIWlzTmFOKE51bWJlcihleGlzdGluZ1sxXSkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhbW91bnQgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChOdW1iZXIobnVtYmVyKSBhcyBudW1iZXIpICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoZXhpc3RpbmdbMV0gYXMgbnVtYmVyKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFtb3VudCA9IGAke251bWJlcn0gKyAke2V4aXN0aW5nWzFdfWA7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBjcmVhdHVyZU1hcC5zZXQoZXhpc3RpbmdbMF0sIGFtb3VudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjcmVhdHVyZU1hcDtcbiAgICB9XG4gICAgcGFyc2VSYXdDcmVhdHVyZShyYXc6IFJhd0NyZWF0dXJlKSB7XG4gICAgICAgIGlmICghcmF3KSByZXR1cm4ge307XG4gICAgICAgIGxldCBtb25zdGVyOiBzdHJpbmcgfCBzdHJpbmdbXSB8IFJlY29yZDxzdHJpbmcsIGFueT4sXG4gICAgICAgICAgICBudW1iZXIgPSAxO1xuXG4gICAgICAgIGlmICh0eXBlb2YgcmF3ID09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIGNvbnN0IG1hdGNoID0gcmF3Lm1hdGNoKC8oXFxkKyk/Oj9cXHM/KC4rKS8pID8/IFtdO1xuICAgICAgICAgICAgbnVtYmVyID0gaXNOYU4oTnVtYmVyKG1hdGNoWzFdID8/IG51bGwpKVxuICAgICAgICAgICAgICAgID8gbnVtYmVyXG4gICAgICAgICAgICAgICAgOiBOdW1iZXIobWF0Y2hbMV0pO1xuICAgICAgICAgICAgbW9uc3RlciA9IG1hdGNoWzJdO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiByYXcgPT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgbGV0IGVudHJpZXMgPSBPYmplY3QuZW50cmllcyhyYXcpLmZsYXQoKTtcbiAgICAgICAgICAgIG51bWJlciA9IGVudHJpZXNbMF07XG4gICAgICAgICAgICBtb25zdGVyID0gZW50cmllc1sxXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghbW9uc3RlcikgcmV0dXJuIHt9O1xuXG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIHR5cGVvZiBudW1iZXIgPT0gXCJzdHJpbmdcIiAmJlxuICAgICAgICAgICAgIXRoaXMucGx1Z2luLmNhblVzZURpY2VSb2xsZXIgJiZcbiAgICAgICAgICAgIC9cXGQrZFxcZCsvLnRlc3QobnVtYmVyKVxuICAgICAgICApIHtcbiAgICAgICAgICAgIG51bWJlciA9IDE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc05hTihOdW1iZXIobnVtYmVyKSkpIG51bWJlciA9IE51bWJlcihudW1iZXIpO1xuICAgICAgICBpZiAoIW51bWJlciB8fCAodHlwZW9mIG51bWJlciA9PSBcIm51bWJlclwiICYmIG51bWJlciA8IDEpKSBudW1iZXIgPSAxO1xuXG4gICAgICAgIGxldCBuYW1lOiBzdHJpbmcsXG4gICAgICAgICAgICBkaXNwbGF5OiBzdHJpbmcsXG4gICAgICAgICAgICBocDogbnVtYmVyLFxuICAgICAgICAgICAgYWM6IG51bWJlcixcbiAgICAgICAgICAgIG1vZDogbnVtYmVyLFxuICAgICAgICAgICAgeHA6IG51bWJlcjtcblxuICAgICAgICBpZiAodHlwZW9mIG1vbnN0ZXIgPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgbmFtZSA9IG1vbnN0ZXIuc3BsaXQoLyxcXHM/LylbMF07XG4gICAgICAgICAgICBbaHAsIGFjLCBtb2QsIHhwXSA9IG1vbnN0ZXJcbiAgICAgICAgICAgICAgICAuc3BsaXQoLyxcXHM/LylcbiAgICAgICAgICAgICAgICAuc2xpY2UoMSlcbiAgICAgICAgICAgICAgICAubWFwKCh2KSA9PiAoaXNOYU4oTnVtYmVyKHYpKSA/IG51bGwgOiBOdW1iZXIodikpKTtcbiAgICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KG1vbnN0ZXIpKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIG1vbnN0ZXJbMF0gPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgIC8vSG9iZ29ibGluLCBKaW1cbiAgICAgICAgICAgICAgICBuYW1lID0gbW9uc3RlclswXTtcbiAgICAgICAgICAgICAgICBkaXNwbGF5ID0gbW9uc3RlclsxXTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShtb25zdGVyWzBdKSkge1xuICAgICAgICAgICAgICAgIC8vW0hvYmdvYmxpbiwgSmltXVxuICAgICAgICAgICAgICAgIG5hbWUgPSBtb25zdGVyWzBdWzBdO1xuICAgICAgICAgICAgICAgIGRpc3BsYXkgPSBtb25zdGVyWzBdWzFdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgW2hwLCBhYywgbW9kLCB4cF0gPSBtb25zdGVyXG4gICAgICAgICAgICAgICAgLnNsaWNlKDEpXG4gICAgICAgICAgICAgICAgLm1hcCgodikgPT4gKGlzTmFOKE51bWJlcih2KSkgPyBudWxsIDogTnVtYmVyKHYpKSk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG1vbnN0ZXIgPT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgKHsgY3JlYXR1cmU6IG5hbWUsIG5hbWU6IGRpc3BsYXksIGhwLCBhYywgbW9kLCB4cCB9ID0gbW9uc3Rlcik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIW5hbWUgfHwgdHlwZW9mIG5hbWUgIT0gXCJzdHJpbmdcIikgcmV0dXJuIHt9O1xuICAgICAgICBsZXQgZXhpc3RpbmcgPSB0aGlzLnBsdWdpbi5iZXN0aWFyeS5maW5kKChjKSA9PiBjLm5hbWUgPT0gbmFtZSk7XG4gICAgICAgIGxldCBjcmVhdHVyZSA9IGV4aXN0aW5nXG4gICAgICAgICAgICA/IENyZWF0dXJlLmZyb20oZXhpc3RpbmcpXG4gICAgICAgICAgICA6IG5ldyBDcmVhdHVyZSh7IG5hbWUgfSk7XG5cbiAgICAgICAgY3JlYXR1cmUuZGlzcGxheSA9IGRpc3BsYXk7XG4gICAgICAgIGNyZWF0dXJlLmhwID0gaHAgPz8gY3JlYXR1cmUuaHA7XG4gICAgICAgIGNyZWF0dXJlLmFjID0gYWMgPz8gY3JlYXR1cmUuYWM7XG4gICAgICAgIGNyZWF0dXJlLm1vZGlmaWVyID0gbW9kID8/IGNyZWF0dXJlLm1vZGlmaWVyO1xuICAgICAgICBjcmVhdHVyZS54cCA9IHhwID8/IGNyZWF0dXJlLnhwO1xuXG4gICAgICAgIHJldHVybiB7IGNyZWF0dXJlLCBudW1iZXIgfTtcbiAgICB9XG59XG5cbmNsYXNzIEVuY291bnRlckNvbXBvbmVudCB7XG4gICAgaW5zdGFuY2U6IEVuY291bnRlclVJO1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwdWJsaWMgcGFyYW1zOiBQYXJzZWRQYXJhbXMsXG4gICAgICAgIHB1YmxpYyBlbmNvdW50ZXJFbDogSFRNTEVsZW1lbnQsXG4gICAgICAgIHB1YmxpYyBwbHVnaW46IEluaXRpYXRpdmVUcmFja2VyXG4gICAgKSB7XG4gICAgICAgIHRoaXMuZGlzcGxheSgpO1xuICAgIH1cbiAgICBhc3luYyBkaXNwbGF5KCkge1xuICAgICAgICB0aGlzLmluc3RhbmNlID0gbmV3IEVuY291bnRlclVJKHtcbiAgICAgICAgICAgIHRhcmdldDogdGhpcy5lbmNvdW50ZXJFbCxcbiAgICAgICAgICAgIHByb3BzOiB7XG4gICAgICAgICAgICAgICAgcGx1Z2luOiB0aGlzLnBsdWdpbixcbiAgICAgICAgICAgICAgICBuYW1lOiB0aGlzLnBhcmFtcy5uYW1lLFxuICAgICAgICAgICAgICAgIHBhcnR5OiB0aGlzLnBhcmFtcy5wYXJ0eSxcbiAgICAgICAgICAgICAgICBwbGF5ZXJzOiB0aGlzLnBhcmFtcy5wbGF5ZXJzLFxuICAgICAgICAgICAgICAgIHBsYXllckxldmVsczogdGhpcy5wYXJhbXMucGxheWVyTGV2ZWxzLFxuICAgICAgICAgICAgICAgIGNyZWF0dXJlczogdGhpcy5wYXJhbXMuY3JlYXR1cmVzLFxuICAgICAgICAgICAgICAgIGhpZGU6IHRoaXMucGFyYW1zLmhpZGVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgRW5jb3VudGVyQmxvY2sgZXh0ZW5kcyBNYXJrZG93blJlbmRlckNoaWxkIHtcbiAgICBwYXJzZXIgPSBuZXcgRW5jb3VudGVyUGFyc2VyKHRoaXMucGx1Z2luKTtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHVibGljIHBsdWdpbjogSW5pdGlhdGl2ZVRyYWNrZXIsXG4gICAgICAgIHB1YmxpYyBzcmM6IHN0cmluZyxcbiAgICAgICAgcHVibGljIGNvbnRhaW5lckVsOiBIVE1MRWxlbWVudCxcbiAgICAgICAgcHVibGljIHRhYmxlID0gZmFsc2VcbiAgICApIHtcbiAgICAgICAgc3VwZXIoY29udGFpbmVyRWwpO1xuICAgIH1cbiAgICBvbmxvYWQoKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLnRhYmxlKSB7XG4gICAgICAgICAgICB0aGlzLnBvc3Rwcm9jZXNzVGFibGUoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucG9zdHByb2Nlc3MoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyBwb3N0cHJvY2VzcygpIHtcbiAgICAgICAgY29uc3QgZW5jb3VudGVycyA9IHRoaXMuc3JjLnNwbGl0KFwiLS0tXCIpID8/IFtdO1xuICAgICAgICBjb25zdCBjb250YWluZXJFbCA9IHRoaXMuY29udGFpbmVyRWwuY3JlYXRlRGl2KFwiZW5jb3VudGVyLWNvbnRhaW5lclwiKTtcbiAgICAgICAgY29uc3QgZW1wdHkgPSBjb250YWluZXJFbC5jcmVhdGVTcGFuKHtcbiAgICAgICAgICAgIHRleHQ6IFwiTm8gZW5jb3VudGVycyBjcmVhdGVkLiBQbGVhc2UgY2hlY2sgeW91ciBzeW50YXggYW5kIHRyeSBhZ2Fpbi5cIlxuICAgICAgICB9KTtcblxuICAgICAgICBmb3IgKGxldCBlbmNvdW50ZXIgb2YgZW5jb3VudGVycykge1xuICAgICAgICAgICAgaWYgKCFlbmNvdW50ZXI/LnRyaW0oKS5sZW5ndGgpIGNvbnRpbnVlO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCBwYXJhbXM6IEVuY291bnRlclBhcmFtZXRlcnMgPSBwYXJzZVlhbWwoZW5jb3VudGVyKTtcbiAgICAgICAgICAgICAgICBuZXcgRW5jb3VudGVyQ29tcG9uZW50KFxuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBhcnNlci5wYXJzZShwYXJhbXMpLFxuICAgICAgICAgICAgICAgICAgICBjb250YWluZXJFbC5jcmVhdGVEaXYoXCJlbmNvdW50ZXItaW5zdGFuY2VcIiksXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBlbXB0eS5kZXRhY2goKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoXG4gICAgICAgICAgICAgICAgICAgIFwiSW5pdGlhdGl2ZSBUcmFja2VyOiBoZXJlIHdhcyBhbiBpc3N1ZSBwYXJzaW5nOiBcXG5cXG5cIiArXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmNvdW50ZXJcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMucmVnaXN0ZXJFdmVudChcbiAgICAgICAgICAgIHRoaXMucGx1Z2luLmFwcC53b3Jrc3BhY2Uub24oXCJpbml0aWF0aXZlLXRyYWNrZXI6dW5sb2FkXCIsICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRhaW5lckVsLmVtcHR5KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5jb250YWluZXJFbC5jcmVhdGVFbChcInByZVwiKS5jcmVhdGVFbChcImNvZGVcIiwge1xuICAgICAgICAgICAgICAgICAgICB0ZXh0OiBgXFxgXFxgXFxgZW5jb3VudGVyXFxuJHt0aGlzLnNyY31cXGBcXGBcXGBgXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICApO1xuICAgIH1cbiAgICBhc3luYyBwb3N0cHJvY2Vzc1RhYmxlKCkge1xuICAgICAgICBjb25zdCBlbmNvdW50ZXJTb3VyY2UgPSB0aGlzLnNyYy5zcGxpdChcIi0tLVwiKSA/PyBbXTtcbiAgICAgICAgY29uc3QgY29udGFpbmVyRWwgPSB0aGlzLmNvbnRhaW5lckVsLmNyZWF0ZURpdihcImVuY291bnRlci1jb250YWluZXJcIik7XG4gICAgICAgIGNvbnN0IGVtcHR5ID0gY29udGFpbmVyRWwuY3JlYXRlU3Bhbih7XG4gICAgICAgICAgICB0ZXh0OiBcIk5vIGVuY291bnRlcnMgY3JlYXRlZC4gUGxlYXNlIGNoZWNrIHlvdXIgc3ludGF4IGFuZCB0cnkgYWdhaW4uXCJcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgZW5jb3VudGVyczogUGFyc2VkUGFyYW1zW10gPSBbXTtcblxuICAgICAgICBmb3IgKGxldCBlbmNvdW50ZXIgb2YgZW5jb3VudGVyU291cmNlKSB7XG4gICAgICAgICAgICBpZiAoIWVuY291bnRlcj8udHJpbSgpLmxlbmd0aCkgY29udGludWU7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhcmFtczogRW5jb3VudGVyUGFyYW1ldGVycyA9IHBhcnNlWWFtbChlbmNvdW50ZXIpO1xuICAgICAgICAgICAgICAgIGVuY291bnRlcnMucHVzaChhd2FpdCB0aGlzLnBhcnNlci5wYXJzZShwYXJhbXMpKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoXG4gICAgICAgICAgICAgICAgICAgIFwiSW5pdGlhdGl2ZSBUcmFja2VyOiBoZXJlIHdhcyBhbiBpc3N1ZSBwYXJzaW5nOiBcXG5cXG5cIiArXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmNvdW50ZXJcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChlbmNvdW50ZXJzLmxlbmd0aCkge1xuICAgICAgICAgICAgZW1wdHkuZGV0YWNoKCk7XG4gICAgICAgICAgICBuZXcgRW5jb3VudGVyVGFibGUoe1xuICAgICAgICAgICAgICAgIHRhcmdldDogdGhpcy5jb250YWluZXJFbCxcbiAgICAgICAgICAgICAgICBwcm9wczoge1xuICAgICAgICAgICAgICAgICAgICBlbmNvdW50ZXJzLFxuICAgICAgICAgICAgICAgICAgICBwbHVnaW46IHRoaXMucGx1Z2luXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZWdpc3RlckV2ZW50KFxuICAgICAgICAgICAgdGhpcy5wbHVnaW4uYXBwLndvcmtzcGFjZS5vbihcImluaXRpYXRpdmUtdHJhY2tlcjp1bmxvYWRcIiwgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuY29udGFpbmVyRWwuZW1wdHkoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRhaW5lckVsLmNyZWF0ZUVsKFwicHJlXCIpLmNyZWF0ZUVsKFwiY29kZVwiLCB7XG4gICAgICAgICAgICAgICAgICAgIHRleHQ6IGBcXGBcXGBcXGBlbmNvdW50ZXItdGFibGVcXG4ke3RoaXMuc3JjfVxcYFxcYFxcYGBcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgfVxufVxuIiwgIjxzY3JpcHQgbGFuZz1cInRzXCI+XG4gICAgaW1wb3J0IHsgRXh0cmFCdXR0b25Db21wb25lbnQsIFBsYXRmb3JtIH0gZnJvbSBcIm9ic2lkaWFuXCI7XG4gICAgaW1wb3J0IHsgU1RBUlRfRU5DT1VOVEVSLCBYUF9QRVJfQ1IgfSBmcm9tIFwic3JjL3V0aWxzXCI7XG5cbiAgICBpbXBvcnQgeyBDcmVhdHVyZSB9IGZyb20gXCJzcmMvdXRpbHMvY3JlYXR1cmVcIjtcbiAgICBpbXBvcnQge1xuICAgICAgICBEaWZmaWN1bHR5UmVwb3J0LFxuICAgICAgICBlbmNvdW50ZXJEaWZmaWN1bHR5LFxuICAgICAgICBmb3JtYXREaWZmaWN1bHR5UmVwb3J0LFxuICAgICAgICBnZXRDcmVhdHVyZVhQXG4gICAgfSBmcm9tIFwic3JjL3V0aWxzL2VuY291bnRlci1kaWZmaWN1bHR5XCI7XG4gICAgaW1wb3J0IHR5cGUgSW5pdGlhdGl2ZVRyYWNrZXIgZnJvbSBcInNyYy9tYWluXCI7XG4gICAgaW1wb3J0IHR5cGUgeyBTdGFja1JvbGxlciB9IGZyb20gXCIuLi8uLi8uLi8uLi9vYnNpZGlhbi1kaWNlLXJvbGxlci9zcmMvcm9sbGVyXCI7XG4gICAgaW1wb3J0IHsgdHJhY2tlciB9IGZyb20gXCJzcmMvdHJhY2tlci9zdG9yZXMvdHJhY2tlclwiO1xuXG4gICAgZXhwb3J0IGxldCBwbHVnaW46IEluaXRpYXRpdmVUcmFja2VyO1xuXG4gICAgZXhwb3J0IGxldCBuYW1lOiBzdHJpbmcgPSBcIkVuY291bnRlclwiO1xuICAgIGV4cG9ydCBsZXQgY3JlYXR1cmVzOiBNYXA8Q3JlYXR1cmUsIG51bWJlciB8IHN0cmluZz47XG4gICAgZXhwb3J0IGxldCBwbGF5ZXJzOiBzdHJpbmdbXTtcbiAgICBleHBvcnQgbGV0IHBhcnR5OiBzdHJpbmcgPSBudWxsO1xuICAgIGV4cG9ydCBsZXQgaGlkZTogc3RyaW5nW10gPSBbXTtcblxuICAgIGV4cG9ydCBsZXQgcGxheWVyTGV2ZWxzOiBudW1iZXJbXTtcblxuICAgIGxldCB0b3RhbFhQOiBudW1iZXI7XG4gICAgbGV0IGNyZWF0dXJlTWFwOiBNYXA8Q3JlYXR1cmUsIG51bWJlcj4gPSBuZXcgTWFwKCk7XG4gICAgY29uc3Qgcm9sbGVyTWFwOiBNYXA8Q3JlYXR1cmUsIFN0YWNrUm9sbGVyPiA9IG5ldyBNYXAoKTtcblxuICAgIGZvciAobGV0IFtjcmVhdHVyZSwgY291bnRdIG9mIGNyZWF0dXJlcykge1xuICAgICAgICBsZXQgbnVtYmVyOiBudW1iZXIgPSBOdW1iZXIoY291bnQpO1xuICAgICAgICBpZiAocGx1Z2luLmNhblVzZURpY2VSb2xsZXIpIHtcbiAgICAgICAgICAgIGxldCByb2xsZXIgPSBwbHVnaW4uZ2V0Um9sbGVyKGAke2NvdW50fWApIGFzIFN0YWNrUm9sbGVyO1xuICAgICAgICAgICAgcm9sbGVyLm9uKFwibmV3LXJlc3VsdFwiLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY3JlYXR1cmVNYXAuc2V0KGNyZWF0dXJlLCByb2xsZXIucmVzdWx0KTtcbiAgICAgICAgICAgICAgICBjcmVhdHVyZU1hcCA9IGNyZWF0dXJlTWFwO1xuICAgICAgICAgICAgICAgIHRvdGFsWFAgPSBbLi4uY3JlYXR1cmVNYXBdLnJlZHVjZShcbiAgICAgICAgICAgICAgICAgICAgKGEsIGMpID0+IGEgKyBnZXRDcmVhdHVyZVhQKHBsdWdpbiwgY1swXSkgKiBjWzFdLFxuICAgICAgICAgICAgICAgICAgICAwXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcm9sbGVyTWFwLnNldChjcmVhdHVyZSwgcm9sbGVyKTtcbiAgICAgICAgICAgIHJvbGxlci5yb2xsKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjcmVhdHVyZU1hcC5zZXQoY3JlYXR1cmUsIG51bWJlcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB0b3RhbFhQID0gWy4uLmNyZWF0dXJlTWFwXS5yZWR1Y2UoXG4gICAgICAgIChhLCBjKSA9PiBhICsgZ2V0Q3JlYXR1cmVYUChwbHVnaW4sIGNbMF0pICogY1sxXSxcbiAgICAgICAgMFxuICAgICk7XG4gICAgbGV0IGRpZmZpY3VsdHk6IERpZmZpY3VsdHlSZXBvcnQ7XG4gICAgJDoge1xuICAgICAgICBpZiAoIWlzTmFOKHRvdGFsWFApKSB7XG4gICAgICAgICAgICBkaWZmaWN1bHR5ID0gZW5jb3VudGVyRGlmZmljdWx0eShcbiAgICAgICAgICAgICAgICBwbGF5ZXJMZXZlbHMsXG4gICAgICAgICAgICAgICAgdG90YWxYUCxcbiAgICAgICAgICAgICAgICBbLi4uY3JlYXR1cmVNYXAudmFsdWVzKCldLnJlZHVjZSgoYWNjLCBjdXJyKSA9PiBhY2MgKyBjdXJyKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IG9wZW5CdXR0b24gPSAobm9kZTogSFRNTEVsZW1lbnQpID0+IHtcbiAgICAgICAgbmV3IEV4dHJhQnV0dG9uQ29tcG9uZW50KG5vZGUpLnNldEljb24oU1RBUlRfRU5DT1VOVEVSKTtcbiAgICB9O1xuXG4gICAgY29uc3Qgb3BlbiA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgaWYgKCFwbHVnaW4udmlldykge1xuICAgICAgICAgICAgYXdhaXQgcGx1Z2luLmFkZFRyYWNrZXJWaWV3KCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB2aWV3ID0gcGx1Z2luLnZpZXc7XG4gICAgICAgIGNvbnN0IGNyZWF0dXJlczogQ3JlYXR1cmVbXSA9IFsuLi5jcmVhdHVyZU1hcF1cbiAgICAgICAgICAgIC5tYXAoKFtjcmVhdHVyZSwgbnVtYmVyXSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChpc05hTihOdW1iZXIobnVtYmVyKSkgfHwgbnVtYmVyIDwgMSkgcmV0dXJuIFtjcmVhdHVyZV07XG4gICAgICAgICAgICAgICAgcmV0dXJuIFsuLi5BcnJheShudW1iZXIpLmtleXMoKV0ubWFwKCh2KSA9PlxuICAgICAgICAgICAgICAgICAgICBDcmVhdHVyZS5uZXcoY3JlYXR1cmUpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuZmxhdCgpO1xuXG4gICAgICAgIHRyYWNrZXIubmV3KHtcbiAgICAgICAgICAgIGNyZWF0dXJlczogWy4uLnBsdWdpbi5nZXRQbGF5ZXJzRm9yUGFydHkocGFydHkpLCAuLi5jcmVhdHVyZXNdLm1hcChcbiAgICAgICAgICAgICAgICAoYykgPT4gYy50b0pTT04oKVxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICByb3VuZDogMSxcbiAgICAgICAgICAgIHN0YXRlOiBmYWxzZSxcbiAgICAgICAgICAgIGxvZ0ZpbGU6IG51bGxcbiAgICAgICAgfSk7XG4gICAgICAgIHBsdWdpbi5hcHAud29ya3NwYWNlLnJldmVhbExlYWYodmlldy5sZWFmKTtcbiAgICB9O1xuXG4gICAgY29uc3QgYWRkQnV0dG9uID0gKG5vZGU6IEhUTUxFbGVtZW50KSA9PiB7XG4gICAgICAgIG5ldyBFeHRyYUJ1dHRvbkNvbXBvbmVudChub2RlKS5zZXRJY29uKFwicGx1cy13aXRoLWNpcmNsZVwiKTtcbiAgICB9O1xuXG4gICAgY29uc3QgYWRkID0gYXN5bmMgKGV2dDogTW91c2VFdmVudCkgPT4ge1xuICAgICAgICBpZiAoIXBsdWdpbi52aWV3KSB7XG4gICAgICAgICAgICBhd2FpdCBwbHVnaW4uYWRkVHJhY2tlclZpZXcoKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB2aWV3ID0gcGx1Z2luLnZpZXc7XG4gICAgICAgIGNvbnN0IGNyZWF0dXJlczogQ3JlYXR1cmVbXSA9IFsuLi5jcmVhdHVyZU1hcF1cbiAgICAgICAgICAgIC5tYXAoKFtjcmVhdHVyZSwgbnVtYmVyXSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChpc05hTihOdW1iZXIobnVtYmVyKSkgfHwgbnVtYmVyIDwgMSkgcmV0dXJuIFtjcmVhdHVyZV07XG4gICAgICAgICAgICAgICAgcmV0dXJuIFsuLi5BcnJheShudW1iZXIpLmtleXMoKV0ubWFwKCh2KSA9PlxuICAgICAgICAgICAgICAgICAgICBDcmVhdHVyZS5uZXcoY3JlYXR1cmUpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuZmxhdCgpO1xuICAgICAgICB0cmFja2VyLmFkZCguLi5jcmVhdHVyZXMpO1xuICAgIH07XG5cbiAgICBjb25zdCByb2xsZXJFbCA9IChub2RlOiBIVE1MRWxlbWVudCwgY3JlYXR1cmU6IENyZWF0dXJlKSA9PiB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIHBsdWdpbi5jYW5Vc2VEaWNlUm9sbGVyICYmXG4gICAgICAgICAgICByb2xsZXJNYXAuaGFzKGNyZWF0dXJlKSAmJlxuICAgICAgICAgICAgIXJvbGxlck1hcC5nZXQoY3JlYXR1cmUpIS5pc1N0YXRpY1xuICAgICAgICApIHtcbiAgICAgICAgICAgIG5vZGUuYXBwZW5kQ2hpbGQoXG4gICAgICAgICAgICAgICAgcm9sbGVyTWFwLmdldChjcmVhdHVyZSk/LmNvbnRhaW5lckVsID8/XG4gICAgICAgICAgICAgICAgICAgIGNyZWF0ZVNwYW4oeyB0ZXh0OiBgJHtjcmVhdHVyZU1hcC5nZXQoY3JlYXR1cmUpfWAgfSlcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBub2RlLnNldFRleHQoYCR7Y3JlYXR1cmVNYXAuZ2V0KGNyZWF0dXJlKX1gKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBjb25zdCBsYWJlbCA9IChjcmVhdHVyZTogQ3JlYXR1cmUpID0+IHtcbiAgICAgICAgaWYgKCFjcmVhdHVyZSkgcmV0dXJuO1xuICAgICAgICBsZXQgbGFiZWwgPSBbXTtcbiAgICAgICAgaWYgKGNyZWF0dXJlLmhwKSB7XG4gICAgICAgICAgICBsYWJlbC5wdXNoKGBIUDogJHtjcmVhdHVyZS5ocH1gKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY3JlYXR1cmUuYWMpIHtcbiAgICAgICAgICAgIGxhYmVsLnB1c2goYEFDOiAke2NyZWF0dXJlLmFjfWApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjcmVhdHVyZS5tb2RpZmllcikge1xuICAgICAgICAgICAgbGFiZWwucHVzaChgTU9EOiAke2NyZWF0dXJlLm1vZGlmaWVyfWApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBgJHtsYWJlbC5qb2luKFwiLCBcIil9YDtcbiAgICB9O1xuPC9zY3JpcHQ+XG5cbjxkaXYgY2xhc3M9XCJlbmNvdW50ZXItaW5zdGFuY2VcIj5cbiAgICA8ZGl2IGNsYXNzPVwiZW5jb3VudGVyLW5hbWVcIj5cbiAgICAgICAgPGgzIGRhdGEtaGVhZGluZz17bmFtZX0gY2xhc3M9XCJpbml0aWF0aXZlLXRyYWNrZXItbmFtZVwiPntuYW1lfTwvaDM+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJpY29uc1wiPlxuICAgICAgICAgICAgPGRpdiB1c2U6b3BlbkJ1dHRvbiBvbjpjbGljaz17b3Blbn0gYXJpYS1sYWJlbD1cIlN0YXJ0IEVuY291bnRlclwiIC8+XG4gICAgICAgICAgICA8ZGl2IHVzZTphZGRCdXR0b24gb246Y2xpY2s9e2FkZH0gYXJpYS1sYWJlbD1cIkFkZCB0byBFbmNvdW50ZXJcIiAvPlxuICAgICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwiY3JlYXR1cmVzLWNvbnRhaW5lclwiPlxuICAgICAgICB7I2lmICFoaWRlLmluY2x1ZGVzKFwicGxheWVyc1wiKX1cbiAgICAgICAgICAgIHsjaWYgcGxheWVycyBpbnN0YW5jZW9mIEFycmF5ICYmIHBsYXllcnMubGVuZ3RofVxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJlbmNvdW50ZXItY3JlYXR1cmVzIGVuY291bnRlci1wbGF5ZXJzXCI+XG4gICAgICAgICAgICAgICAgICAgIDxoND57cGFydHkgPyBwYXJ0eSA6IFwiUGxheWVyc1wifTwvaDQ+XG4gICAgICAgICAgICAgICAgICAgIDx1bD5cbiAgICAgICAgICAgICAgICAgICAgICAgIHsjZWFjaCBwbGF5ZXJzIGFzIHBsYXllcn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPntwbGF5ZXJ9PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICB7L2VhY2h9XG4gICAgICAgICAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICB7OmVsc2UgaWYgIXBsYXllcnN9XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImVuY291bnRlci1jcmVhdHVyZXMgZW5jb3VudGVyLXBsYXllcnNcIj5cbiAgICAgICAgICAgICAgICAgICAgPGg0Pk5vIFBsYXllcnM8L2g0PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgey9pZn1cbiAgICAgICAgey9pZn1cbiAgICAgICAgPGRpdiBjbGFzcz1cImVuY291bnRlci1jcmVhdHVyZXNcIj5cbiAgICAgICAgICAgIHsjaWYgIWhpZGUuaW5jbHVkZXMoXCJjcmVhdHVyZXNcIil9XG4gICAgICAgICAgICAgICAgPGg0PkNyZWF0dXJlczwvaDQ+XG4gICAgICAgICAgICAgICAgeyNpZiBjcmVhdHVyZXMuc2l6ZX1cbiAgICAgICAgICAgICAgICAgICAgPHVsPlxuICAgICAgICAgICAgICAgICAgICAgICAgeyNlYWNoIFsuLi5jcmVhdHVyZXNdIGFzIFtjcmVhdHVyZSwgY291bnRdfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWxhYmVsPXtsYWJlbChjcmVhdHVyZSl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPVwiY3JlYXR1cmUtbGlcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZyB1c2U6cm9sbGVyRWw9e2NyZWF0dXJlfSAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsjaWYgY3JlYXR1cmUuZGlzcGxheSAmJiBjcmVhdHVyZS5kaXNwbGF5ICE9IGNyZWF0dXJlLm5hbWV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJm5ic3A7e2NyZWF0dXJlLmRpc3BsYXl9e2NvdW50ID09IDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBcIlwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogXCJzXCJ9ICh7Y3JlYXR1cmUubmFtZX0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7OmVsc2V9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJm5ic3A7e2NyZWF0dXJlLm5hbWV9e2NvdW50ID09IDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBcIlwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogXCJzXCJ9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7L2lmfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsjaWYgY3JlYXR1cmUueHAgJiYgY3JlYXR1cmVNYXAuaGFzKGNyZWF0dXJlKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwieHAtcGFyZW50XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJwYXJlbiBsZWZ0XCI+KDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInhwLWNvbnRhaW5lclwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInhwIG51bWJlclwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2NyZWF0dXJlLnhwICpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcmVhdHVyZU1hcC5nZXQoY3JlYXR1cmUpfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwieHAgdGV4dFwiPlhQPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInBhcmVuIHJpZ2h0XCI+KTwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgey9pZn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgICAgICAgICAgey9lYWNofVxuICAgICAgICAgICAgICAgICAgICA8L3VsPlxuICAgICAgICAgICAgICAgIHs6ZWxzZX1cbiAgICAgICAgICAgICAgICAgICAgPHN0cm9uZz5ObyBjcmVhdHVyZXM8L3N0cm9uZz5cbiAgICAgICAgICAgICAgICB7L2lmfVxuICAgICAgICAgICAgey9pZn1cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIHsjaWYgcGx1Z2luLmRhdGEuZGlzcGxheURpZmZpY3VsdHl9XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZW5jb3VudGVyLXhwIGRpZmZpY3VsdHlcIj5cbiAgICAgICAgICAgICAgICB7I2lmIHRvdGFsWFAgPiAwICYmIGRpZmZpY3VsdHl9XG4gICAgICAgICAgICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWxhYmVsPXtmb3JtYXREaWZmaWN1bHR5UmVwb3J0KGRpZmZpY3VsdHkpfVxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9e2RpZmZpY3VsdHkuZGlmZmljdWx0eS50b0xvd2VyQ2FzZSgpfVxuICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nIGNsYXNzPVwiZGlmZmljdWx0eS1sYWJlbFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPntkaWZmaWN1bHR5LmRpZmZpY3VsdHl9PC9zdHJvbmdcbiAgICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwieHAtcGFyZW50IGRpZmZpY3VsdHlcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInBhcmVuIGxlZnRcIj4oPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwieHAtY29udGFpbmVyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwieHAgbnVtYmVyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7dG90YWxYUH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInhwIHRleHRcIj5YUDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJwYXJlbiByaWdodFwiPik8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICB7L2lmfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIHsvaWZ9XG4gICAgPC9kaXY+XG48L2Rpdj5cblxuPHN0eWxlPlxuICAgIC5lbmNvdW50ZXItbmFtZSB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDtcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICB9XG4gICAgLmVuY291bnRlci1uYW1lIC5pbml0aWF0aXZlLXRyYWNrZXItbmFtZSB7XG4gICAgICAgIG1hcmdpbjogMDtcbiAgICB9XG4gICAgLmVuY291bnRlci1pbnN0YW5jZVxuICAgICAgICA+IC5jcmVhdHVyZXMtY29udGFpbmVyXG4gICAgICAgID4gLmVuY291bnRlci1jcmVhdHVyZXM6Zmlyc3Qtb2YtdHlwZVxuICAgICAgICBoNCxcbiAgICAuZW5jb3VudGVyLWNyZWF0dXJlcyA+IHVsIHtcbiAgICAgICAgbWFyZ2luLXRvcDogMDtcbiAgICB9XG4gICAgLmNyZWF0dXJlLWxpIHtcbiAgICAgICAgd2lkdGg6IGZpdC1jb250ZW50O1xuICAgIH1cbiAgICAueHAtcGFyZW50IHtcbiAgICAgICAgZGlzcGxheTogaW5saW5lLWZsZXg7XG4gICAgfVxuICAgIC5kaWZmaWN1bHR5IHtcbiAgICAgICAgd2lkdGg6IGZpdC1jb250ZW50O1xuICAgIH1cbiAgICAuZGVhZGx5IC5kaWZmaWN1bHR5LWxhYmVsIHtcbiAgICAgICAgY29sb3I6IHJlZDtcbiAgICB9XG4gICAgLmhhcmQgLmRpZmZpY3VsdHktbGFiZWwge1xuICAgICAgICBjb2xvcjogb3JhbmdlO1xuICAgIH1cbiAgICAubWVkaXVtIC5kaWZmaWN1bHR5LWxhYmVsIHtcbiAgICAgICAgY29sb3I6IHllbGxvdztcbiAgICB9XG4gICAgLmVhc3kgLmRpZmZpY3VsdHktbGFiZWwge1xuICAgICAgICBjb2xvcjogZ3JlZW47XG4gICAgfVxuICAgIC5pY29ucyB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgfVxuICAgIC5pY29ucyA+IGRpdjpmaXJzdC1jaGlsZCA6Z2xvYmFsKC5jbGlja2FibGUtaWNvbikge1xuICAgICAgICBtYXJnaW4tcmlnaHQ6IDA7XG4gICAgfVxuPC9zdHlsZT5cbiIsICJpbXBvcnQgeyBYUF9QRVJfQ1IgfSBmcm9tIFwiLi9jb25zdGFudHNcIjtcbmltcG9ydCB0eXBlIEluaXRpYXRpdmVUcmFja2VyIGZyb20gXCIuLi9tYWluXCI7XG5pbXBvcnQgeyBDcmVhdHVyZSB9IGZyb20gXCIuL2NyZWF0dXJlXCI7XG5cbnR5cGUgWHBCdWRnZXQgPSB7IGVhc3k6IG51bWJlcjsgbWVkaXVtOiBudW1iZXI7IGhhcmQ6IG51bWJlcjsgZGVhZGx5OiBudW1iZXIgfTtcbmV4cG9ydCB0eXBlIERpZmZpY3VsdHlSZXBvcnQgPSB7XG4gICAgZGlmZmljdWx0eTogc3RyaW5nO1xuICAgIHRvdGFsWHA6IG51bWJlcjtcbiAgICBhZGp1c3RlZFhwOiBudW1iZXI7XG4gICAgbXVsdGlwbGllcjogbnVtYmVyO1xuICAgIGJ1ZGdldDogWHBCdWRnZXQ7XG59O1xuXG5pbnRlcmZhY2UgQnVkZ2V0RGljdCB7XG4gICAgW2luZGV4OiBudW1iZXJdOiBYcEJ1ZGdldDtcbn1cblxuZXhwb3J0IGNvbnN0IGdldENyZWF0dXJlWFAgPSAocGx1Z2luOiBJbml0aWF0aXZlVHJhY2tlciwgY3JlYXR1cmU6IENyZWF0dXJlKSA9PiB7XG4gICAgaWYgKGNyZWF0dXJlLnhwKSByZXR1cm4gY3JlYXR1cmUueHA7XG4gICAgbGV0IGV4aXN0aW5nID0gcGx1Z2luLmJlc3RpYXJ5LmZpbmQoKGMpID0+IGMubmFtZSA9PSBjcmVhdHVyZS5uYW1lKTtcbiAgICBpZiAoZXhpc3RpbmcgJiYgZXhpc3RpbmcuY3IgJiYgZXhpc3RpbmcuY3IgaW4gWFBfUEVSX0NSKSB7XG4gICAgICAgIHJldHVybiBYUF9QRVJfQ1JbZXhpc3RpbmcuY3JdO1xuICAgIH1cbiAgICByZXR1cm4gMDtcbn07XG5cbmNvbnN0IHRyZXNob2xkczogQnVkZ2V0RGljdCA9IHtcbiAgICAxOiB7IGVhc3k6IDI1LCBtZWRpdW06IDUwLCBoYXJkOiA3NSwgZGVhZGx5OiAxMDAgfSxcbiAgICAyOiB7IGVhc3k6IDUwLCBtZWRpdW06IDEwMCwgaGFyZDogMTUwLCBkZWFkbHk6IDIwMCB9LFxuICAgIDM6IHsgZWFzeTogNzUsIG1lZGl1bTogMTUwLCBoYXJkOiAyMjUsIGRlYWRseTogNDAwIH0sXG4gICAgNDogeyBlYXN5OiAxMjUsIG1lZGl1bTogMjUwLCBoYXJkOiAzNzUsIGRlYWRseTogNTAwIH0sXG4gICAgNTogeyBlYXN5OiAyNTAsIG1lZGl1bTogNTAwLCBoYXJkOiA3NTAsIGRlYWRseTogMTEwMCB9LFxuICAgIDY6IHsgZWFzeTogMzAwLCBtZWRpdW06IDYwMCwgaGFyZDogOTAwLCBkZWFkbHk6IDE0MDAgfSxcbiAgICA3OiB7IGVhc3k6IDM1MCwgbWVkaXVtOiA3NTAsIGhhcmQ6IDExMDAsIGRlYWRseTogMTcwMCB9LFxuICAgIDg6IHsgZWFzeTogNDUwLCBtZWRpdW06IDkwMCwgaGFyZDogMTQwMCwgZGVhZGx5OiAyMTAwIH0sXG4gICAgOTogeyBlYXN5OiA1NTAsIG1lZGl1bTogMTEwMCwgaGFyZDogMTYwMCwgZGVhZGx5OiAyNDAwIH0sXG4gICAgMTA6IHsgZWFzeTogNjAwLCBtZWRpdW06IDEyMDAsIGhhcmQ6IDE5MDAsIGRlYWRseTogMjgwMCB9LFxuICAgIDExOiB7IGVhc3k6IDgwMCwgbWVkaXVtOiAxNjAwLCBoYXJkOiAyNDAwLCBkZWFkbHk6IDM2MDAgfSxcbiAgICAxMjogeyBlYXN5OiAxMDAwLCBtZWRpdW06IDIwMDAsIGhhcmQ6IDMwMDAsIGRlYWRseTogNDUwMCB9LFxuICAgIDEzOiB7IGVhc3k6IDExMDAsIG1lZGl1bTogMjIwMCwgaGFyZDogMzQwMCwgZGVhZGx5OiA1MTAwIH0sXG4gICAgMTQ6IHsgZWFzeTogMTI1MCwgbWVkaXVtOiAyNTAwLCBoYXJkOiAzODAwLCBkZWFkbHk6IDU3MDAgfSxcbiAgICAxNTogeyBlYXN5OiAxNDAwLCBtZWRpdW06IDI4MDAsIGhhcmQ6IDQzMDAsIGRlYWRseTogNjQwMCB9LFxuICAgIDE2OiB7IGVhc3k6IDE2MDAsIG1lZGl1bTogMzIwMCwgaGFyZDogNDgwMCwgZGVhZGx5OiA3MjAwIH0sXG4gICAgMTc6IHsgZWFzeTogMjAwMCwgbWVkaXVtOiAzOTAwLCBoYXJkOiA1OTAwLCBkZWFkbHk6IDg4MDAgfSxcbiAgICAxODogeyBlYXN5OiAyMTAwLCBtZWRpdW06IDQyMDAsIGhhcmQ6IDYzMDAsIGRlYWRseTogOTUwMCB9LFxuICAgIDE5OiB7IGVhc3k6IDI0MDAsIG1lZGl1bTogNDkwMCwgaGFyZDogNzMwMCwgZGVhZGx5OiAxMDkwMCB9LFxuICAgIDIwOiB7IGVhc3k6IDI4MDAsIG1lZGl1bTogNTcwMCwgaGFyZDogODUwMCwgZGVhZGx5OiAxMjcwMCB9XG59O1xuXG5mdW5jdGlvbiB4cEJ1ZGdldChjaGFyYWN0ZXJMZXZlbHM6IG51bWJlcltdKTogWHBCdWRnZXQge1xuICAgIGNvbnN0IGVhc3kgPSBjaGFyYWN0ZXJMZXZlbHMucmVkdWNlKFxuICAgICAgICAoYWNjLCBsdmwpID0+IGFjYyArIHRyZXNob2xkc1tsdmxdLmVhc3ksXG4gICAgICAgIDBcbiAgICApO1xuICAgIGNvbnN0IG1lZGl1bSA9IGNoYXJhY3RlckxldmVscy5yZWR1Y2UoXG4gICAgICAgIChhY2MsIGx2bCkgPT4gYWNjICsgdHJlc2hvbGRzW2x2bF0ubWVkaXVtLFxuICAgICAgICAwXG4gICAgKTtcbiAgICBjb25zdCBoYXJkID0gY2hhcmFjdGVyTGV2ZWxzLnJlZHVjZShcbiAgICAgICAgKGFjYywgbHZsKSA9PiBhY2MgKyB0cmVzaG9sZHNbbHZsXS5oYXJkLFxuICAgICAgICAwXG4gICAgKTtcbiAgICBjb25zdCBkZWFkbHkgPSBjaGFyYWN0ZXJMZXZlbHMucmVkdWNlKFxuICAgICAgICAoYWNjLCBsdmwpID0+IGFjYyArIHRyZXNob2xkc1tsdmxdLmRlYWRseSxcbiAgICAgICAgMFxuICAgICk7XG4gICAgcmV0dXJuIHsgZWFzeTogZWFzeSwgbWVkaXVtOiBtZWRpdW0sIGhhcmQ6IGhhcmQsIGRlYWRseTogZGVhZGx5IH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmb3JtYXREaWZmaWN1bHR5UmVwb3J0KHJlcG9ydDogRGlmZmljdWx0eVJlcG9ydCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGAke1tcbiAgICAgICAgYEVuY291bnRlciBpcyAke3JlcG9ydC5kaWZmaWN1bHR5fWAsXG4gICAgICAgIGBUb3RhbCBYUDogJHtyZXBvcnQudG90YWxYcH1gLFxuICAgICAgICBgQWRqdXN0ZWQgWFA6ICR7cmVwb3J0LmFkanVzdGVkWHB9ICh4JHtyZXBvcnQubXVsdGlwbGllcn0pYCxcbiAgICAgICAgYCBgLFxuICAgICAgICBgVGhyZXNob2xkYCxcbiAgICAgICAgYEVhc3k6ICR7cmVwb3J0LmJ1ZGdldC5lYXN5fWAsXG4gICAgICAgIGBNZWRpdW06ICR7cmVwb3J0LmJ1ZGdldC5tZWRpdW19YCxcbiAgICAgICAgYEhhcmQ6ICR7cmVwb3J0LmJ1ZGdldC5oYXJkfWAsXG4gICAgICAgIGBEZWFkbHk6ICR7cmVwb3J0LmJ1ZGdldC5kZWFkbHl9YFxuICAgIF0uam9pbihcIlxcblwiKX1gO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZW5jb3VudGVyRGlmZmljdWx0eShcbiAgICBjaGFyYWN0ZXJMZXZlbHM6IG51bWJlcltdLFxuICAgIHhwOiBudW1iZXIsXG4gICAgbnVtYmVyT2ZNb25zdGVyczogbnVtYmVyXG4pOiBEaWZmaWN1bHR5UmVwb3J0IHwgbnVsbCB7XG4gICAgaWYgKCFjaGFyYWN0ZXJMZXZlbHM/Lmxlbmd0aCB8fCB4cCA9PSAwIHx8IG51bWJlck9mTW9uc3RlcnMgPT0gMClcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgbGV0IG51bWJlck11bHRpcGxpZXI6IG51bWJlcjtcbiAgICBpZiAobnVtYmVyT2ZNb25zdGVycyA9PT0gMSkge1xuICAgICAgICBudW1iZXJNdWx0aXBsaWVyID0gMTtcbiAgICB9IGVsc2UgaWYgKG51bWJlck9mTW9uc3RlcnMgPT09IDIpIHtcbiAgICAgICAgbnVtYmVyTXVsdGlwbGllciA9IDEuNTtcbiAgICB9IGVsc2UgaWYgKG51bWJlck9mTW9uc3RlcnMgPCA3KSB7XG4gICAgICAgIG51bWJlck11bHRpcGxpZXIgPSAyLjA7XG4gICAgfSBlbHNlIGlmIChudW1iZXJPZk1vbnN0ZXJzIDwgMTEpIHtcbiAgICAgICAgbnVtYmVyTXVsdGlwbGllciA9IDIuNTtcbiAgICB9IGVsc2UgaWYgKG51bWJlck9mTW9uc3RlcnMgPCAxNSkge1xuICAgICAgICBudW1iZXJNdWx0aXBsaWVyID0gMy4wO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIG51bWJlck11bHRpcGxpZXIgPSA0LjA7XG4gICAgfVxuICAgIGNvbnN0IGFkanVzdGVkWHAgPSBudW1iZXJNdWx0aXBsaWVyICogeHA7XG4gICAgY29uc3QgYnVkZ2V0ID0geHBCdWRnZXQoY2hhcmFjdGVyTGV2ZWxzKTtcbiAgICBsZXQgZGlmZmljdWx0eSA9IFwiRWFzeVwiO1xuICAgIGlmIChhZGp1c3RlZFhwID49IGJ1ZGdldC5kZWFkbHkpIHtcbiAgICAgICAgZGlmZmljdWx0eSA9IFwiRGVhZGx5XCI7XG4gICAgfSBlbHNlIGlmIChhZGp1c3RlZFhwID49IGJ1ZGdldC5oYXJkKSB7XG4gICAgICAgIGRpZmZpY3VsdHkgPSBcIkhhcmRcIjtcbiAgICB9IGVsc2UgaWYgKGFkanVzdGVkWHAgPj0gYnVkZ2V0Lm1lZGl1bSkge1xuICAgICAgICBkaWZmaWN1bHR5ID0gXCJNZWRpdW1cIjtcbiAgICB9XG4gICAgbGV0IHJlc3VsdCA9IHtcbiAgICAgICAgZGlmZmljdWx0eTogZGlmZmljdWx0eSxcbiAgICAgICAgdG90YWxYcDogeHAsXG4gICAgICAgIGFkanVzdGVkWHA6IGFkanVzdGVkWHAsXG4gICAgICAgIG11bHRpcGxpZXI6IG51bWJlck11bHRpcGxpZXIsXG4gICAgICAgIGJ1ZGdldDogYnVkZ2V0XG4gICAgfTtcbiAgICByZXR1cm4gcmVzdWx0O1xufVxuIiwgIjxzY3JpcHQgbGFuZz1cInRzXCI+XG4gICAgaW1wb3J0IHsgRXh0cmFCdXR0b25Db21wb25lbnQgfSBmcm9tIFwib2JzaWRpYW5cIjtcblxuICAgIGltcG9ydCB0eXBlIEluaXRpYXRpdmVUcmFja2VyIGZyb20gXCJzcmMvbWFpblwiO1xuICAgIGltcG9ydCB7IHRyYWNrZXIgfSBmcm9tIFwic3JjL3RyYWNrZXIvc3RvcmVzL3RyYWNrZXJcIjtcbiAgICBpbXBvcnQgeyBTVEFSVF9FTkNPVU5URVIgfSBmcm9tIFwic3JjL3V0aWxzXCI7XG4gICAgaW1wb3J0IHsgQ3JlYXR1cmUgfSBmcm9tIFwic3JjL3V0aWxzL2NyZWF0dXJlXCI7XG4gICAgaW1wb3J0IHtcbiAgICAgICAgRGlmZmljdWx0eVJlcG9ydCxcbiAgICAgICAgZW5jb3VudGVyRGlmZmljdWx0eSxcbiAgICAgICAgZm9ybWF0RGlmZmljdWx0eVJlcG9ydFxuICAgIH0gZnJvbSBcInNyYy91dGlscy9lbmNvdW50ZXItZGlmZmljdWx0eVwiO1xuXG4gICAgaW1wb3J0IHR5cGUgeyBTdGFja1JvbGxlciB9IGZyb20gXCIuLi8uLi8uLi8uLi9vYnNpZGlhbi1kaWNlLXJvbGxlci9zcmMvcm9sbGVyXCI7XG5cbiAgICBleHBvcnQgbGV0IG5hbWU6IHN0cmluZyA9IFwiRW5jb3VudGVyXCI7XG4gICAgZXhwb3J0IGxldCBjcmVhdHVyZXM6IE1hcDxDcmVhdHVyZSwgbnVtYmVyIHwgc3RyaW5nPjtcbiAgICBleHBvcnQgbGV0IHBsYXllcnM6IHN0cmluZ1tdO1xuXG4gICAgZXhwb3J0IGxldCBoaWRlOiBzdHJpbmdbXSA9IFtdO1xuICAgIGV4cG9ydCBsZXQgcGxheWVyTGV2ZWxzOiBudW1iZXJbXTtcbiAgICBleHBvcnQgbGV0IHBsdWdpbjogSW5pdGlhdGl2ZVRyYWNrZXI7XG4gICAgZXhwb3J0IGxldCBoZWFkZXJzOiBzdHJpbmdbXTtcblxuICAgIGxldCB0b3RhbFhQOiBudW1iZXI7XG4gICAgbGV0IGNyZWF0dXJlTWFwOiBNYXA8Q3JlYXR1cmUsIG51bWJlcj4gPSBuZXcgTWFwKCk7XG4gICAgY29uc3Qgcm9sbGVyTWFwOiBNYXA8Q3JlYXR1cmUsIFN0YWNrUm9sbGVyPiA9IG5ldyBNYXAoKTtcblxuICAgIGZvciAobGV0IFtjcmVhdHVyZSwgY291bnRdIG9mIGNyZWF0dXJlcykge1xuICAgICAgICBsZXQgbnVtYmVyOiBudW1iZXIgPSBOdW1iZXIoY291bnQpO1xuICAgICAgICBpZiAocGx1Z2luLmNhblVzZURpY2VSb2xsZXIpIHtcbiAgICAgICAgICAgIGxldCByb2xsZXIgPSBwbHVnaW4uZ2V0Um9sbGVyKGAke2NvdW50fWApIGFzIFN0YWNrUm9sbGVyO1xuICAgICAgICAgICAgcm9sbGVyLm9uKFwibmV3LXJlc3VsdFwiLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY3JlYXR1cmVNYXAuc2V0KGNyZWF0dXJlLCByb2xsZXIucmVzdWx0KTtcbiAgICAgICAgICAgICAgICBjcmVhdHVyZU1hcCA9IGNyZWF0dXJlTWFwO1xuICAgICAgICAgICAgICAgIHRvdGFsWFAgPSBbLi4uY3JlYXR1cmVNYXBdLnJlZHVjZShcbiAgICAgICAgICAgICAgICAgICAgKGEsIGMpID0+IGEgKyBjWzBdLnhwICogY1sxXSxcbiAgICAgICAgICAgICAgICAgICAgMFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJvbGxlck1hcC5zZXQoY3JlYXR1cmUsIHJvbGxlcik7XG4gICAgICAgICAgICByb2xsZXIucm9sbCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY3JlYXR1cmVNYXAuc2V0KGNyZWF0dXJlLCBudW1iZXIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRvdGFsWFAgPSBbLi4uY3JlYXR1cmVNYXBdLnJlZHVjZSgoYSwgYykgPT4gYSArIGNbMF0ueHAgKiBjWzFdLCAwKTtcbiAgICBsZXQgZGlmZmljdWx0eTogRGlmZmljdWx0eVJlcG9ydDtcbiAgICAkOiB7XG4gICAgICAgIGlmICghaXNOYU4odG90YWxYUCkpIHtcbiAgICAgICAgICAgIGRpZmZpY3VsdHkgPSBlbmNvdW50ZXJEaWZmaWN1bHR5KFxuICAgICAgICAgICAgICAgIHBsYXllckxldmVscyxcbiAgICAgICAgICAgICAgICB0b3RhbFhQLFxuICAgICAgICAgICAgICAgIFsuLi5jcmVhdHVyZU1hcC52YWx1ZXMoKV0ucmVkdWNlKChhY2MsIGN1cnIpID0+IGFjYyArIGN1cnIpXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29uc3Qgb3BlbiA9IChub2RlOiBIVE1MRWxlbWVudCkgPT4ge1xuICAgICAgICBuZXcgRXh0cmFCdXR0b25Db21wb25lbnQobm9kZSlcbiAgICAgICAgICAgIC5zZXRJY29uKFNUQVJUX0VOQ09VTlRFUilcbiAgICAgICAgICAgIC5zZXRUb29sdGlwKFwiQmVnaW4gRW5jb3VudGVyXCIpXG4gICAgICAgICAgICAub25DbGljayhhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCFwbHVnaW4udmlldykge1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCBwbHVnaW4uYWRkVHJhY2tlclZpZXcoKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjb25zdCB2aWV3ID0gcGx1Z2luLnZpZXc7XG4gICAgICAgICAgICAgICAgY29uc3QgY3JlYXR1cmVzOiBDcmVhdHVyZVtdID0gWy4uLmNyZWF0dXJlTWFwXVxuICAgICAgICAgICAgICAgICAgICAubWFwKChbY3JlYXR1cmUsIG51bWJlcl0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc05hTihOdW1iZXIobnVtYmVyKSkgfHwgbnVtYmVyIDwgMSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW2NyZWF0dXJlXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbLi4uQXJyYXkobnVtYmVyKS5rZXlzKCldLm1hcCgodikgPT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDcmVhdHVyZS5uZXcoY3JlYXR1cmUpXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAuZmxhdCgpO1xuXG4gICAgICAgICAgICAgICAgdHJhY2tlci5uZXcoe1xuICAgICAgICAgICAgICAgICAgICBjcmVhdHVyZXM6IGNyZWF0dXJlcy5tYXAoKGMpID0+IGMudG9KU09OKCkpLFxuICAgICAgICAgICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgICAgICAgICByb3VuZDogMSxcbiAgICAgICAgICAgICAgICAgICAgc3RhdGU6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBsb2dGaWxlOiBudWxsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcGx1Z2luLmFwcC53b3Jrc3BhY2UucmV2ZWFsTGVhZih2aWV3LmxlYWYpO1xuICAgICAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIGNvbnN0IGFkZEJ1dHRvbiA9IChub2RlOiBIVE1MRWxlbWVudCkgPT4ge1xuICAgICAgICBuZXcgRXh0cmFCdXR0b25Db21wb25lbnQobm9kZSkuc2V0SWNvbihcInBsdXMtd2l0aC1jaXJjbGVcIik7XG4gICAgfTtcblxuICAgIGNvbnN0IGFkZCA9IGFzeW5jIChldnQ6IE1vdXNlRXZlbnQpID0+IHtcbiAgICAgICAgaWYgKCFwbHVnaW4udmlldykge1xuICAgICAgICAgICAgYXdhaXQgcGx1Z2luLmFkZFRyYWNrZXJWaWV3KCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdmlldyA9IHBsdWdpbi52aWV3O1xuICAgICAgICBjb25zdCBjcmVhdHVyZXM6IENyZWF0dXJlW10gPSBbLi4uY3JlYXR1cmVNYXBdXG4gICAgICAgICAgICAubWFwKChbY3JlYXR1cmUsIG51bWJlcl0pID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoaXNOYU4oTnVtYmVyKG51bWJlcikpIHx8IG51bWJlciA8IDEpIHJldHVybiBbY3JlYXR1cmVdO1xuICAgICAgICAgICAgICAgIHJldHVybiBbLi4uQXJyYXkobnVtYmVyKS5rZXlzKCldLm1hcCgodikgPT5cbiAgICAgICAgICAgICAgICAgICAgQ3JlYXR1cmUubmV3KGNyZWF0dXJlKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmZsYXQoKTtcbiAgICAgICAgdHJhY2tlci5hZGQoLi4uY3JlYXR1cmVzKTtcbiAgICB9O1xuXG4gICAgY29uc3Qgcm9sbGVyRWwgPSAobm9kZTogSFRNTEVsZW1lbnQsIGNyZWF0dXJlOiBDcmVhdHVyZSkgPT4ge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgICBwbHVnaW4uY2FuVXNlRGljZVJvbGxlciAmJlxuICAgICAgICAgICAgcm9sbGVyTWFwLmhhcyhjcmVhdHVyZSkgJiZcbiAgICAgICAgICAgICFyb2xsZXJNYXAuZ2V0KGNyZWF0dXJlKSEuaXNTdGF0aWNcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBub2RlLmFwcGVuZENoaWxkKFxuICAgICAgICAgICAgICAgIHJvbGxlck1hcC5nZXQoY3JlYXR1cmUpPy5jb250YWluZXJFbCA/P1xuICAgICAgICAgICAgICAgICAgICBjcmVhdGVTcGFuKHsgdGV4dDogYCR7Y3JlYXR1cmVNYXAuZ2V0KGNyZWF0dXJlKX1gIH0pXG4gICAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbm9kZS5zZXRUZXh0KGAke2NyZWF0dXJlTWFwLmdldChjcmVhdHVyZSl9YCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgY29uc3Qgam9pbmVyID0gKGluZGV4OiBudW1iZXIsIGxlbmd0aDogbnVtYmVyKSA9PiB7XG4gICAgICAgIGlmIChsZW5ndGggPT0gMSB8fCBpbmRleCA9PSAwKSByZXR1cm4gXCJcIjtcbiAgICAgICAgY29uc3QgZGVsaW0gPSBsZW5ndGggPiAyID8gXCIsXCIgOiBcIlwiO1xuICAgICAgICBpZiAoaW5kZXggPT0gbGVuZ3RoIC0gMSkgcmV0dXJuIGAke2RlbGltfSBhbmQgYDtcbiAgICAgICAgcmV0dXJuIGAke2RlbGltfSBgO1xuICAgIH07XG4gICAgY29uc3QgbGFiZWwgPSAoY3JlYXR1cmU6IENyZWF0dXJlKSA9PiB7XG4gICAgICAgIGlmICghY3JlYXR1cmUpIHJldHVybjtcbiAgICAgICAgbGV0IGxhYmVsID0gW107XG4gICAgICAgIGlmIChjcmVhdHVyZS5ocCkge1xuICAgICAgICAgICAgbGFiZWwucHVzaChgSFA6ICR7Y3JlYXR1cmUuaHB9YCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNyZWF0dXJlLmFjKSB7XG4gICAgICAgICAgICBsYWJlbC5wdXNoKGBBQzogJHtjcmVhdHVyZS5hY31gKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY3JlYXR1cmUubW9kaWZpZXIpIHtcbiAgICAgICAgICAgIGxhYmVsLnB1c2goYE1PRDogJHtjcmVhdHVyZS5tb2RpZmllcn1gKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYCR7bGFiZWwuam9pbihcIiwgXCIpfWA7XG4gICAgfTtcbjwvc2NyaXB0PlxuXG48dHIgY2xhc3M9XCJlbmNvdW50ZXItcm93XCI+XG4gICAgPHRkPntuYW1lfTwvdGQ+XG4gICAgeyNpZiBoZWFkZXJzLmluY2x1ZGVzKFwiY3JlYXR1cmVzXCIpfVxuICAgICAgICA8dGQ+XG4gICAgICAgICAgICA8dWwgY2xhc3M9XCJlbmNvdW50ZXItY3JlYXR1cmVzIGVuY291bnRlci1saXN0XCI+XG4gICAgICAgICAgICAgICAgeyNpZiAhaGlkZS5pbmNsdWRlcyhcImNyZWF0dXJlc1wiKSAmJiBjcmVhdHVyZXMuc2l6ZX1cbiAgICAgICAgICAgICAgICAgICAgeyNlYWNoIFsuLi5jcmVhdHVyZXNdIGFzIFtjcmVhdHVyZSwgY291bnRdfVxuICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGFyaWEtbGFiZWw9e2xhYmVsKGNyZWF0dXJlKX0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0cm9uZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2U6cm9sbGVyRWw9e2NyZWF0dXJlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+Jm5ic3A7e2NyZWF0dXJlLm5hbWV9e2NvdW50ID09IDEgPyBcIlwiIDogXCJzXCJ9XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgICAgICB7L2VhY2h9XG4gICAgICAgICAgICAgICAgezplbHNlfVxuICAgICAgICAgICAgICAgICAgICAtXG4gICAgICAgICAgICAgICAgey9pZn1cbiAgICAgICAgICAgIDwvdWw+XG4gICAgICAgIDwvdGQ+XG4gICAgey9pZn1cbiAgICB7I2lmIGhlYWRlcnMuaW5jbHVkZXMoXCJwbGF5ZXJzXCIpfVxuICAgICAgICA8dGQ+XG4gICAgICAgICAgICA8dWwgY2xhc3M9XCJlbmNvdW50ZXItcGxheWVycyBlbmNvdW50ZXItbGlzdFwiPlxuICAgICAgICAgICAgICAgIHsjaWYgIWhpZGUuaW5jbHVkZXMoXCJwbGF5ZXJzXCIpICYmIHBsYXllcnMgaW5zdGFuY2VvZiBBcnJheSAmJiBwbGF5ZXJzLmxlbmd0aH1cbiAgICAgICAgICAgICAgICAgICAgeyNlYWNoIHBsYXllcnMgYXMgcGxheWVyfVxuICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtwbGF5ZXJ9XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxuICAgICAgICAgICAgICAgICAgICB7L2VhY2h9XG4gICAgICAgICAgICAgICAgezplbHNlfVxuICAgICAgICAgICAgICAgICAgICAtXG4gICAgICAgICAgICAgICAgey9pZn1cbiAgICAgICAgICAgIDwvdWw+XG4gICAgICAgIDwvdGQ+XG4gICAgey9pZn1cbiAgICB7I2lmIHBsdWdpbi5kYXRhLmRpc3BsYXlEaWZmaWN1bHR5fVxuICAgICAgICA8dGQ+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZW5jb3VudGVyLXhwIGRpZmZpY3VsdHlcIj5cbiAgICAgICAgICAgICAgICB7I2lmIHRvdGFsWFAgPiAwICYmIGRpZmZpY3VsdHl9XG4gICAgICAgICAgICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWxhYmVsPXtmb3JtYXREaWZmaWN1bHR5UmVwb3J0KGRpZmZpY3VsdHkpfVxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9e2RpZmZpY3VsdHkuZGlmZmljdWx0eS50b0xvd2VyQ2FzZSgpfVxuICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c3Ryb25nIGNsYXNzPVwiZGlmZmljdWx0eS1sYWJlbFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtkaWZmaWN1bHR5LmRpZmZpY3VsdHl9XG4gICAgICAgICAgICAgICAgICAgICAgICA8L3N0cm9uZz5cbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgIHs6ZWxzZX1cbiAgICAgICAgICAgICAgICAgICAgLVxuICAgICAgICAgICAgICAgIHsvaWZ9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC90ZD5cbiAgICB7L2lmfVxuICAgIDx0ZD5cbiAgICAgICAgPGRpdiBjbGFzcz1cImljb25zXCI+XG4gICAgICAgICAgICA8ZGl2IHVzZTpvcGVuIC8+XG4gICAgICAgICAgICA8ZGl2IHVzZTphZGRCdXR0b24gb246Y2xpY2s9e2FkZH0gYXJpYS1sYWJlbD1cIkFkZCB0byBFbmNvdW50ZXJcIiAvPlxuICAgICAgICA8L2Rpdj5cbiAgICA8L3RkPlxuPC90cj5cblxuPHN0eWxlPlxuICAgIC5kZWFkbHkgLmRpZmZpY3VsdHktbGFiZWwge1xuICAgICAgICBjb2xvcjogcmVkO1xuICAgIH1cbiAgICAuaGFyZCAuZGlmZmljdWx0eS1sYWJlbCB7XG4gICAgICAgIGNvbG9yOiBvcmFuZ2U7XG4gICAgfVxuICAgIC5tZWRpdW0gLmRpZmZpY3VsdHktbGFiZWwge1xuICAgICAgICBjb2xvcjogeWVsbG93O1xuICAgIH1cbiAgICAuZWFzeSAuZGlmZmljdWx0eS1sYWJlbCB7XG4gICAgICAgIGNvbG9yOiBncmVlbjtcbiAgICB9XG4gICAgLmljb25zIHtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICB9XG4gICAgLmljb25zID4gZGl2OmZpcnN0LWNoaWxkIDpnbG9iYWwoLmNsaWNrYWJsZS1pY29uKSB7XG4gICAgICAgIG1hcmdpbi1yaWdodDogMDtcbiAgICB9XG4gICAgdWwge1xuICAgICAgICBtYXJnaW46IDA7XG4gICAgfVxuPC9zdHlsZT5cbiIsICI8c2NyaXB0IGxhbmc9XCJ0c1wiPlxuICAgIGltcG9ydCB0eXBlIEluaXRpYXRpdmVUcmFja2VyIGZyb20gXCJzcmMvbWFpblwiO1xuXG4gICAgaW1wb3J0IHR5cGUgeyBQYXJzZWRQYXJhbXMgfSBmcm9tIFwiLi5cIjtcbiAgICBpbXBvcnQgRW5jb3VudGVyUm93IGZyb20gXCIuL0VuY291bnRlclJvdy5zdmVsdGVcIjtcblxuICAgIGV4cG9ydCBsZXQgZW5jb3VudGVyczogUGFyc2VkUGFyYW1zW107XG4gICAgZXhwb3J0IGxldCBwbHVnaW46IEluaXRpYXRpdmVUcmFja2VyO1xuXG4gICAgY29uc3QgaGVhZGVyczogc3RyaW5nW10gPSBbXTtcbiAgICBpZiAoXG4gICAgICAgIGVuY291bnRlcnMuc29tZShcbiAgICAgICAgICAgIChlbmNvdW50ZXIpID0+XG4gICAgICAgICAgICAgICAgIWVuY291bnRlci5oaWRlLmluY2x1ZGVzKFwicGxheWVyc1wiKSAmJlxuICAgICAgICAgICAgICAgICgodHlwZW9mIGVuY291bnRlci5wbGF5ZXJzID09IFwiYm9vbGVhblwiICYmIGVuY291bnRlci5wbGF5ZXJzKSB8fFxuICAgICAgICAgICAgICAgICAgICAoZW5jb3VudGVyLnBsYXllcnMgaW5zdGFuY2VvZiBBcnJheSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgZW5jb3VudGVyLnBsYXllcnMubGVuZ3RoKSlcbiAgICAgICAgKVxuICAgIClcbiAgICAgICAgaGVhZGVycy5wdXNoKFwicGxheWVyc1wiKTtcbiAgICBpZiAoXG4gICAgICAgIGVuY291bnRlcnMuc29tZShcbiAgICAgICAgICAgIChlbmNvdW50ZXIpID0+XG4gICAgICAgICAgICAgICAgIWVuY291bnRlci5oaWRlLmluY2x1ZGVzKFwiY3JlYXR1cmVzXCIpICYmXG4gICAgICAgICAgICAgICAgZW5jb3VudGVyLmNyZWF0dXJlcy5zaXplXG4gICAgICAgIClcbiAgICApXG4gICAgICAgIGhlYWRlcnMucHVzaChcImNyZWF0dXJlc1wiKTtcbjwvc2NyaXB0PlxuXG48dGFibGUgY2xhc3M9XCJpbml0aWF0aXZlLXRyYWNrZXIgZW5jb3VudGVyLXRhYmxlXCI+XG4gICAgPHRoZWFkPlxuICAgICAgICA8dHI+XG4gICAgICAgICAgICA8dGg+TmFtZTwvdGg+XG4gICAgICAgICAgICB7I2lmIGhlYWRlcnMuaW5jbHVkZXMoXCJjcmVhdHVyZXNcIil9XG4gICAgICAgICAgICAgICAgPHRoPkNyZWF0dXJlczwvdGg+XG4gICAgICAgICAgICB7L2lmfVxuICAgICAgICAgICAgeyNpZiBoZWFkZXJzLmluY2x1ZGVzKFwicGxheWVyc1wiKX1cbiAgICAgICAgICAgICAgICA8dGg+UGxheWVyczwvdGg+XG4gICAgICAgICAgICB7L2lmfVxuICAgICAgICAgICAgeyNpZiBwbHVnaW4uZGF0YS5kaXNwbGF5RGlmZmljdWx0eX1cbiAgICAgICAgICAgICAgICA8dGg+RGlmZmljdWx0eTwvdGg+XG4gICAgICAgICAgICB7L2lmfVxuICAgICAgICAgICAgPHRoPkxhdW5jaDwvdGg+XG4gICAgICAgIDwvdHI+XG4gICAgPC90aGVhZD5cbiAgICA8dGJvZHk+XG4gICAgICAgIHsjZWFjaCBlbmNvdW50ZXJzIGFzIGVuY291bnRlcn1cbiAgICAgICAgICAgIDxFbmNvdW50ZXJSb3cgey4uLmVuY291bnRlcn0ge2hlYWRlcnN9IHtwbHVnaW59IC8+XG4gICAgICAgIHsvZWFjaH1cbiAgICA8L3Rib2R5PlxuPC90YWJsZT5cblxuPHN0eWxlPlxuPC9zdHlsZT5cbiIsICJpbXBvcnQgeyBDcmVhdHVyZSB9IGZyb20gXCIuLi8uLi91dGlscy9jcmVhdHVyZVwiO1xuaW1wb3J0IHR5cGUgSW5pdGlhdGl2ZVRyYWNrZXIgZnJvbSBcIi4uLy4uL21haW5cIjtcbmltcG9ydCB7IGRlcml2ZWQsIGdldCwgVXBkYXRlciwgd3JpdGFibGUgfSBmcm9tIFwic3ZlbHRlL3N0b3JlXCI7XG5pbXBvcnQgeyBlcXVpdmFsZW50IH0gZnJvbSBcIi4uLy4uL2VuY291bnRlclwiO1xuaW1wb3J0IHsgUGxhdGZvcm0gfSBmcm9tIFwib2JzaWRpYW5cIjtcbmltcG9ydCB0eXBlIHtcbiAgICBDb25kaXRpb24sXG4gICAgSW5pdGlhdGl2ZVRyYWNrZXJEYXRhLFxuICAgIEluaXRpYXRpdmVWaWV3U3RhdGUsXG4gICAgVXBkYXRlTG9nTWVzc2FnZVxufSBmcm9tIFwiLi4vLi4vLi4vQHR5cGVzXCI7XG5pbXBvcnQgeyBPVkVSRkxPV19UWVBFIH0gZnJvbSBcIi4uLy4uL3V0aWxzXCI7XG5pbXBvcnQgdHlwZSBMb2dnZXIgZnJvbSBcIi4uLy4uL2xvZ2dlci9sb2dnZXJcIjtcblxudHlwZSBIUFVwZGF0ZSA9IHtcbiAgICBzYXZlZDogYm9vbGVhbjtcbiAgICByZXNpc3Q6IGJvb2xlYW47XG4gICAgY3VzdG9tTW9kOiBcIjJcIiB8IFwiMVwiO1xufTtcbnR5cGUgQ3JlYXR1cmVVcGRhdGUgPSB7XG4gICAgaHA/OiBudW1iZXI7XG4gICAgYWM/OiBudW1iZXI7XG4gICAgaW5pdGlhdGl2ZT86IG51bWJlcjtcbiAgICBuYW1lPzogc3RyaW5nO1xuICAgIG1hcmtlcj86IHN0cmluZztcbiAgICB0ZW1wPzogbnVtYmVyO1xuICAgIG1heD86IG51bWJlcjtcbiAgICBzdGF0dXM/OiBDb25kaXRpb25bXTtcbiAgICBoaWRkZW4/OiBib29sZWFuO1xuICAgIGVuYWJsZWQ/OiBib29sZWFuO1xufTtcbnR5cGUgQ3JlYXR1cmVVcGRhdGVzID0geyBjcmVhdHVyZTogQ3JlYXR1cmU7IGNoYW5nZTogQ3JlYXR1cmVVcGRhdGUgfTtcbmNvbnN0IG1vZGlmaWVyID0gUGxhdGZvcm0uaXNNYWNPUyA/IFwiTWV0YVwiIDogXCJDb250cm9sXCI7XG5mdW5jdGlvbiBjcmVhdGVUcmFja2VyKCkge1xuICAgIGNvbnN0IGNyZWF0dXJlcyA9IHdyaXRhYmxlPENyZWF0dXJlW10+KFtdKTtcbiAgICBjb25zdCB1cGRhdGluZyA9IHdyaXRhYmxlPE1hcDxDcmVhdHVyZSwgSFBVcGRhdGU+PihuZXcgTWFwKCkpO1xuICAgIGNvbnN0IHsgc3Vic2NyaWJlLCBzZXQsIHVwZGF0ZSB9ID0gY3JlYXR1cmVzO1xuXG4gICAgbGV0IF9sb2dnZXI6IExvZ2dlcjtcblxuICAgIGNvbnN0ICRyb3VuZCA9IHdyaXRhYmxlPG51bWJlcj4oMSk7XG4gICAgY29uc3QgJHN0YXRlID0gd3JpdGFibGU8Ym9vbGVhbj4oZmFsc2UpO1xuICAgIGNvbnN0IHNldFN0YXRlID0gKHN0YXRlOiBib29sZWFuKSA9PiB7XG4gICAgICAgICRzdGF0ZS5zZXQoc3RhdGUpO1xuICAgICAgICBpZiAoc3RhdGUpIHtcbiAgICAgICAgICAgIGlmICghX2xvZ2dlcj8ubG9nZ2luZykge1xuICAgICAgICAgICAgICAgIF9sb2dnZXI/Lm5ldyh7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IGdldCgkbmFtZSksXG4gICAgICAgICAgICAgICAgICAgIHBsYXllcnM6IGN1cnJlbnRfb3JkZXIuZmlsdGVyKChjKSA9PiBjLnBsYXllciksXG4gICAgICAgICAgICAgICAgICAgIGNyZWF0dXJlczogY3VycmVudF9vcmRlci5maWx0ZXIoKGMpID0+ICFjLnBsYXllciksXG4gICAgICAgICAgICAgICAgICAgIHJvdW5kOiBnZXQoJHJvdW5kKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBfbG9nZ2VyPy5sb2coYENvbWJhdCByZS1zdGFydGVkYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBfbG9nZ2VyPy5sb2coXCJDb21iYXQgc3RvcHBlZFwiKTtcbiAgICAgICAgfVxuICAgICAgICB1cGRhdGVBbmRTYXZlKChjcmVhdHVyZXMpID0+IHtcbiAgICAgICAgICAgIGlmIChjcmVhdHVyZXMubGVuZ3RoICYmICFjcmVhdHVyZXMuZmluZCgoYykgPT4gYy5hY3RpdmUpKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudF9vcmRlclswXS5hY3RpdmUgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGNyZWF0dXJlcztcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBjb25zdCAkbmFtZSA9IHdyaXRhYmxlPHN0cmluZyB8IG51bGw+KCk7XG4gICAgY29uc3QgJHBhcnR5ID0gd3JpdGFibGU8c3RyaW5nIHwgbnVsbD4oKTtcblxuICAgIGNvbnN0IGRhdGEgPSB3cml0YWJsZTxJbml0aWF0aXZlVHJhY2tlckRhdGE+KCk7XG4gICAgbGV0IF9zZXR0aW5nczogSW5pdGlhdGl2ZVRyYWNrZXJEYXRhO1xuXG4gICAgY29uc3QgY29uZGVuc2VkID0gZGVyaXZlZChjcmVhdHVyZXMsICh2YWx1ZXMpID0+IHtcbiAgICAgICAgaWYgKF9zZXR0aW5ncy5jb25kZW5zZSkge1xuICAgICAgICAgICAgdmFsdWVzLmZvckVhY2goKGNyZWF0dXJlLCBfLCBhcnIpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBlcXVpdiA9IGFyci5maWx0ZXIoKGMpID0+IGVxdWl2YWxlbnQoYywgY3JlYXR1cmUpKTtcbiAgICAgICAgICAgICAgICBlcXVpdi5mb3JFYWNoKChlcSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBlcS5pbml0aWF0aXZlID0gTWF0aC5tYXgoLi4uZXF1aXYubWFwKChpKSA9PiBpLmluaXRpYXRpdmUpKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZXM7XG4gICAgfSk7XG5cbiAgICBsZXQgY3VycmVudF9vcmRlcjogQ3JlYXR1cmVbXSA9IFtdO1xuICAgIGNvbnN0IG9yZGVyZWQgPSBkZXJpdmVkKGNvbmRlbnNlZCwgKHZhbHVlcykgPT4ge1xuICAgICAgICBjb25zdCBzb3J0ID0gWy4uLnZhbHVlc107XG4gICAgICAgIHNvcnQuc29ydCgoYSwgYikgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGIuaW5pdGlhdGl2ZSAtIGEuaW5pdGlhdGl2ZTtcbiAgICAgICAgfSk7XG4gICAgICAgIGN1cnJlbnRfb3JkZXIgPSBzb3J0O1xuICAgICAgICByZXR1cm4gc29ydDtcbiAgICB9KTtcblxuICAgIGNvbnN0IHVwZGF0ZUNyZWF0dXJlcyA9ICguLi51cGRhdGVzOiBDcmVhdHVyZVVwZGF0ZXNbXSkgPT5cbiAgICAgICAgdXBkYXRlKChjcmVhdHVyZXMpID0+IHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgeyBjcmVhdHVyZSwgY2hhbmdlIH0gb2YgdXBkYXRlcykge1xuICAgICAgICAgICAgICAgIGlmIChjaGFuZ2UuaW5pdGlhdGl2ZSkge1xuICAgICAgICAgICAgICAgICAgICBjcmVhdHVyZS5pbml0aWF0aXZlID0gTnVtYmVyKGNoYW5nZS5pbml0aWF0aXZlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGNoYW5nZS5uYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIGNyZWF0dXJlLm5hbWUgPSBjaGFuZ2UubmFtZTtcbiAgICAgICAgICAgICAgICAgICAgY3JlYXR1cmUubnVtYmVyID0gMDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGNoYW5nZS5ocCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBSZWR1Y2UgdGVtcCBIUCBmaXJzdFxuICAgICAgICAgICAgICAgICAgICBjaGFuZ2UuaHAgPSBOdW1iZXIoY2hhbmdlLmhwKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNoYW5nZS5ocCA8IDAgJiYgY3JlYXR1cmUudGVtcCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlbWFpbmluZyA9IGNyZWF0dXJlLnRlbXAgKyBjaGFuZ2UuaHA7XG4gICAgICAgICAgICAgICAgICAgICAgICBjcmVhdHVyZS50ZW1wID0gTWF0aC5tYXgoMCwgcmVtYWluaW5nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5nZS5ocCA9IE1hdGgubWluKDAsIHJlbWFpbmluZyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gQ2xhbXAgSFAgYXQgMCBpZiBjbGFtcCBpcyBlbmFibGVkIGluIHNldHRpbmdzXG4gICAgICAgICAgICAgICAgICAgIGlmIChfc2V0dGluZ3MuY2xhbXAgJiYgY3JlYXR1cmUuaHAgKyBjaGFuZ2UuaHAgPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2UuaHAgPSAtY3JlYXR1cmUuaHA7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gSGFuZGxlIG92ZXJmbG93IGhlYWxpbmcgYWNjb3JkaW5nIHRvIHNldHRpbmdzXG4gICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5nZS5ocCA+IDAgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5nZS5ocCArIGNyZWF0dXJlLmhwID4gY3JlYXR1cmUubWF4XG4gICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChfc2V0dGluZ3MuaHBPdmVyZmxvdykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgT1ZFUkZMT1dfVFlQRS5pZ25vcmU6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5nZS5ocCA9IE1hdGgubWF4KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXR1cmUubWF4IC0gY3JlYXR1cmUuaHAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgT1ZFUkZMT1dfVFlQRS50ZW1wOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBHaXZlcyB0ZW1wIGEgdmFsdWUsIHN1Y2ggdGhhdCBpdCB3aWxsIGJlIHNldCBsYXRlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2UudGVtcCA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2UuaHAgLVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTWF0aC5taW4oY3JlYXR1cmUubWF4IC0gY3JlYXR1cmUuaHAsIDApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2UuaHAgLT0gY2hhbmdlLnRlbXA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgT1ZFUkZMT1dfVFlQRS5jdXJyZW50OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjcmVhdHVyZS5ocCArPSBjaGFuZ2UuaHA7XG4gICAgICAgICAgICAgICAgICAgIGlmIChfc2V0dGluZ3MuYXV0b1N0YXR1cyAmJiBjcmVhdHVyZS5ocCA8PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjcmVhdHVyZS5zdGF0dXMuYWRkKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9zZXR0aW5ncy5zdGF0dXNlcy5maW5kKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAocykgPT4gcy5uYW1lID09IFwiVW5jb25zY2lvdXNcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGNoYW5nZS5tYXgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNyZWF0dXJlLmhwID09IGNyZWF0dXJlLm1heCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXR1cmUuaHAgPSBOdW1iZXIoY2hhbmdlLm1heCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY3JlYXR1cmUubWF4ID0gTnVtYmVyKGNoYW5nZS5tYXgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoY2hhbmdlLmFjKSB7XG4gICAgICAgICAgICAgICAgICAgIGNyZWF0dXJlLmFjID0gY2hhbmdlLmFjO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoY2hhbmdlLnRlbXApIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGJhc2VsaW5lID0gMDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKF9zZXR0aW5ncy5hZGRpdGl2ZVRlbXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhc2VsaW5lID0gY3JlYXR1cmUudGVtcDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjcmVhdHVyZS50ZW1wID0gTWF0aC5tYXgoXG4gICAgICAgICAgICAgICAgICAgICAgICBjcmVhdHVyZS50ZW1wLFxuICAgICAgICAgICAgICAgICAgICAgICAgYmFzZWxpbmUgKyBjaGFuZ2UudGVtcFxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoY2hhbmdlLm1hcmtlcikge1xuICAgICAgICAgICAgICAgICAgICBjcmVhdHVyZS5tYXJrZXIgPSBjaGFuZ2UubWFya2VyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoY2hhbmdlLnN0YXR1cz8ubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgc3RhdHVzIG9mIGNoYW5nZS5zdGF0dXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjcmVhdHVyZS5zdGF0dXMuaGFzKHN0YXR1cykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcmVhdHVyZS5zdGF0dXMuZGVsZXRlKHN0YXR1cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX2xvZ2dlcj8ubG9nKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgJHtjcmVhdHVyZS5uYW1lfSByZWxpZXZlZCBvZiBzdGF0dXMgJHtzdGF0dXMubmFtZX1gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXR1cmUuc3RhdHVzLmFkZChzdGF0dXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChcImhpZGRlblwiIGluIGNoYW5nZSkge1xuICAgICAgICAgICAgICAgICAgICBjcmVhdHVyZS5oaWRkZW4gPSBjaGFuZ2UuaGlkZGVuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIWNyZWF0dXJlcy5pbmNsdWRlcyhjcmVhdHVyZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY3JlYXR1cmVzLnB1c2goY3JlYXR1cmUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjcmVhdHVyZXM7XG4gICAgICAgIH0pO1xuXG4gICAgY29uc3QgZ2V0RW5jb3VudGVyU3RhdGUgPSAoKTogSW5pdGlhdGl2ZVZpZXdTdGF0ZSA9PiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjcmVhdHVyZXM6IGdldChjcmVhdHVyZXMpLm1hcCgoYykgPT4gYy50b0pTT04oKSksXG4gICAgICAgICAgICBzdGF0ZTogZ2V0KCRzdGF0ZSksXG4gICAgICAgICAgICBuYW1lOiBnZXQoJG5hbWUpLFxuICAgICAgICAgICAgcm91bmQ6IGdldCgkcm91bmQpLFxuICAgICAgICAgICAgbG9nRmlsZTogX2xvZ2dlcj8uZ2V0TG9nRmlsZSgpID8/IG51bGxcbiAgICAgICAgfTtcbiAgICB9O1xuXG4gICAgY29uc3QgdHJ5U2F2ZSA9ICgpID0+IHtcbiAgICAgICAgYXBwLndvcmtzcGFjZS50cmlnZ2VyKFxuICAgICAgICAgICAgXCJpbml0aWF0aXZlLXRyYWNrZXI6c2F2ZS1zdGF0ZVwiLFxuICAgICAgICAgICAgZ2V0RW5jb3VudGVyU3RhdGUoKVxuICAgICAgICApO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiB1cGRhdGVBbmRTYXZlKHVwZGF0ZXI6IFVwZGF0ZXI8Q3JlYXR1cmVbXT4pOiB2b2lkIHtcbiAgICAgICAgdXBkYXRlKHVwZGF0ZXIpO1xuICAgICAgICB0cnlTYXZlKCk7XG4gICAgfVxuXG4gICAgY29uc3QgYWRkaW5nID0gd3JpdGFibGU8TWFwPENyZWF0dXJlLCBudW1iZXI+PihuZXcgTWFwKCkpO1xuXG4gICAgY29uc3Qgc2V0TnVtYmVycyA9IChsaXN0OiBDcmVhdHVyZVtdLCBzdWJsaXN0OiBDcmVhdHVyZVtdID0gbGlzdCkgPT4ge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN1Ymxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGNyZWF0dXJlID0gc3VibGlzdFtpXTtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICBjcmVhdHVyZS5wbGF5ZXIgfHxcbiAgICAgICAgICAgICAgICBsaXN0LmZpbHRlcigoYykgPT4gYy5uYW1lID09IGNyZWF0dXJlLm5hbWUpLmxlbmd0aCA9PSAxXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjcmVhdHVyZS5udW1iZXIgPiAwKSBjb250aW51ZTtcbiAgICAgICAgICAgIGNvbnN0IHByaW9yID0gbGlzdFxuICAgICAgICAgICAgICAgIC5maWx0ZXIoKGMpID0+XG4gICAgICAgICAgICAgICAgICAgIGMuZGlzcGxheVxuICAgICAgICAgICAgICAgICAgICAgICAgPyBjLmRpc3BsYXkgPT0gY3JlYXR1cmUuZGlzcGxheVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBjLm5hbWUgPT0gY3JlYXR1cmUubmFtZVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAubWFwKChjKSA9PiBjLm51bWJlcik7XG4gICAgICAgICAgICBjcmVhdHVyZS5udW1iZXIgPSBwcmlvcj8ubGVuZ3RoID8gTWF0aC5tYXgoLi4ucHJpb3IpICsgMSA6IDE7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgc3Vic2NyaWJlLFxuICAgICAgICBzZXQsXG5cbiAgICAgICAgZGF0YSxcbiAgICAgICAgc2V0RGF0YTogKHNldHRpbmdzOiBJbml0aWF0aXZlVHJhY2tlckRhdGEpID0+IHtcbiAgICAgICAgICAgIGRhdGEuc2V0KHNldHRpbmdzKTtcbiAgICAgICAgICAgIF9zZXR0aW5ncyA9IHNldHRpbmdzO1xuICAgICAgICB9LFxuXG4gICAgICAgIGdldExvZ2dlcjogKCkgPT4gX2xvZ2dlcixcblxuICAgICAgICBzZXRMb2dnZXI6IChsb2dnZXI6IExvZ2dlcikgPT4ge1xuICAgICAgICAgICAgX2xvZ2dlciA9IGxvZ2dlcjtcbiAgICAgICAgfSxcblxuICAgICAgICB1cGRhdGluZyxcbiAgICAgICAgdXBkYXRlQ3JlYXR1cmVzLFxuXG4gICAgICAgIHNldFVwZGF0ZTogKGNyZWF0dXJlOiBDcmVhdHVyZSwgZXZ0OiBNb3VzZUV2ZW50KSA9PlxuICAgICAgICAgICAgdXBkYXRpbmcudXBkYXRlKChjcmVhdHVyZXMpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoY3JlYXR1cmVzLmhhcyhjcmVhdHVyZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY3JlYXR1cmVzLmRlbGV0ZShjcmVhdHVyZSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY3JlYXR1cmVzLnNldChjcmVhdHVyZSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2F2ZWQ6IGV2dC5nZXRNb2RpZmllclN0YXRlKFwiU2hpZnRcIiksXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNpc3Q6IGV2dC5nZXRNb2RpZmllclN0YXRlKG1vZGlmaWVyKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1c3RvbU1vZDogZXZ0LmdldE1vZGlmaWVyU3RhdGUoXCJBbHRcIikgPyBcIjJcIiA6IFwiMVwiXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gY3JlYXR1cmVzO1xuICAgICAgICAgICAgfSksXG4gICAgICAgIGRvVXBkYXRlOiAodG9BZGRTdHJpbmc6IHN0cmluZywgdGFnOiBDb25kaXRpb24pID0+XG4gICAgICAgICAgICB1cGRhdGluZy51cGRhdGUoKHVwZGF0aW5nQ3JlYXR1cmVzKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgbWVzc2FnZXM6IFVwZGF0ZUxvZ01lc3NhZ2VbXSA9IFtdO1xuICAgICAgICAgICAgICAgIGNvbnN0IHVwZGF0ZXM6IENyZWF0dXJlVXBkYXRlc1tdID0gW107XG5cbiAgICAgICAgICAgICAgICB1cGRhdGluZ0NyZWF0dXJlcy5mb3JFYWNoKChlbnRyeSwgY3JlYXR1cmUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgcm91bmRIYWxmID0gIXRvQWRkU3RyaW5nLmluY2x1ZGVzKFwiLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY2hhbmdlOiBDcmVhdHVyZVVwZGF0ZSA9IHt9O1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBtb2RpZmllciA9XG4gICAgICAgICAgICAgICAgICAgICAgICAoZW50cnkuc2F2ZWQgPyAwLjUgOiAxKSAqXG4gICAgICAgICAgICAgICAgICAgICAgICAoZW50cnkucmVzaXN0ID8gMC41IDogMSkgKlxuICAgICAgICAgICAgICAgICAgICAgICAgTnVtYmVyKGVudHJ5LmN1c3RvbU1vZCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5hbWUgPSBbY3JlYXR1cmUubmFtZV07XG4gICAgICAgICAgICAgICAgICAgIGlmIChjcmVhdHVyZS5udW1iZXIgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lLnB1c2goYCR7Y3JlYXR1cmUubnVtYmVyfWApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2U6IFVwZGF0ZUxvZ01lc3NhZ2UgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBuYW1lLmpvaW4oXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgaHA6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1czogbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNhdmVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHVuYzogZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAodG9BZGRTdHJpbmcuY2hhckF0KDApID09IFwidFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdG9BZGQgPSBOdW1iZXIodG9BZGRTdHJpbmcuc2xpY2UoMSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5ocCA9IHRvQWRkO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS50ZW1wID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5nZS50ZW1wID0gdG9BZGQ7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdG9BZGQgPSBOdW1iZXIodG9BZGRTdHJpbmcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdG9BZGQgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0xICpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBNYXRoLnNpZ24odG9BZGQpICpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBNYXRoLm1heChNYXRoLmFicyh0b0FkZCkgKiBtb2RpZmllciwgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0b0FkZCA9IHJvdW5kSGFsZiA/IE1hdGgudHJ1bmModG9BZGQpIDogdG9BZGQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmhwID0gdG9BZGQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3JlYXR1cmUuaHAgPD0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UudW5jID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5nZS5ocCA9IHRvQWRkO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uuc3RhdHVzID0gdGFnLm5hbWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWVudHJ5LnNhdmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhbmdlLnN0YXR1cyA9IFt0YWddO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnNhdmVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlcy5wdXNoKG1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICB1cGRhdGVzLnB1c2goeyBjcmVhdHVyZSwgY2hhbmdlIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIF9sb2dnZXI/LmxvZ1VwZGF0ZShtZXNzYWdlcyk7XG4gICAgICAgICAgICAgICAgdXBkYXRlQ3JlYXR1cmVzKC4uLnVwZGF0ZXMpO1xuICAgICAgICAgICAgICAgIHVwZGF0aW5nQ3JlYXR1cmVzLmNsZWFyKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHVwZGF0aW5nQ3JlYXR1cmVzO1xuICAgICAgICAgICAgfSksXG4gICAgICAgIGNsZWFyVXBkYXRlOiAoKSA9PlxuICAgICAgICAgICAgdXBkYXRpbmcudXBkYXRlKCh1cGRhdGVzKSA9PiB7XG4gICAgICAgICAgICAgICAgdXBkYXRlcy5jbGVhcigpO1xuICAgICAgICAgICAgICAgIHJldHVybiB1cGRhdGVzO1xuICAgICAgICAgICAgfSksXG5cbiAgICAgICAgcm91bmQ6ICRyb3VuZCxcblxuICAgICAgICBuYW1lOiAkbmFtZSxcblxuICAgICAgICBwYXJ0eTogJHBhcnR5LFxuICAgICAgICBzZXRQYXJ0eTogKHBhcnR5OiBzdHJpbmcsIHBsdWdpbjogSW5pdGlhdGl2ZVRyYWNrZXIpID0+XG4gICAgICAgICAgICB1cGRhdGVBbmRTYXZlKChjcmVhdHVyZXMpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBwbGF5ZXJzID0gcGx1Z2luLmdldFBsYXllcnNGb3JQYXJ0eShwYXJ0eSk7XG4gICAgICAgICAgICAgICAgJHBhcnR5LnNldChwYXJ0eSk7XG4gICAgICAgICAgICAgICAgY3JlYXR1cmVzID0gWy4uLmNyZWF0dXJlcy5maWx0ZXIoKGMpID0+ICFjLnBsYXllciksIC4uLnBsYXllcnNdO1xuICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdHVyZXM7XG4gICAgICAgICAgICB9KSxcblxuICAgICAgICBzdGF0ZTogJHN0YXRlLFxuICAgICAgICBnZXRTdGF0ZTogKCkgPT4gZ2V0KCRzdGF0ZSksXG4gICAgICAgIHRvZ2dsZVN0YXRlOiAoKSA9PiB7XG4gICAgICAgICAgICBzZXRTdGF0ZSghZ2V0KCRzdGF0ZSkpO1xuICAgICAgICB9LFxuICAgICAgICBzZXRTdGF0ZSxcblxuICAgICAgICBnb1RvTmV4dDogKCkgPT5cbiAgICAgICAgICAgIHVwZGF0ZUFuZFNhdmUoKGNyZWF0dXJlcykgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnQgPSBjdXJyZW50X29yZGVyLmZpbmRJbmRleCgoYykgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYy5hY3RpdmU7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbnQgPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudF9vcmRlclswXS5hY3RpdmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBlbmFibGVkID0gY3VycmVudF9vcmRlci5maWx0ZXIoKGMpID0+IGMuZW5hYmxlZCk7XG5cbiAgICAgICAgICAgICAgICAgICAgbGV0IG5leHRJbmRleCA9XG4gICAgICAgICAgICAgICAgICAgICAgICAoKChjdXJyZW50ICsgMSkgJSBlbmFibGVkLmxlbmd0aCkgKyBlbmFibGVkLmxlbmd0aCkgJVxuICAgICAgICAgICAgICAgICAgICAgICAgZW5hYmxlZC5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5leHQgPVxuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudF9vcmRlcltcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50X29yZGVyLmZpbmRJbmRleChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGMpID0+IGMgPT0gZW5hYmxlZFtuZXh0SW5kZXhdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5leHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRfb3JkZXJbY3VycmVudF0uYWN0aXZlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobmV4dEluZGV4IDwgY3VycmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJvdW5kID0gZ2V0KCRyb3VuZCkgKyAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyb3VuZC5zZXQocm91bmQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9sb2dnZXI/LmxvZyhcIiMjI1wiLCBgUm91bmQgJHtyb3VuZH1gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIF9sb2dnZXI/LmxvZyhcIiMjIyMjXCIsIGAke25leHQubmFtZX0ncyB0dXJuYCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXh0LmFjdGl2ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0dXJlcztcbiAgICAgICAgICAgIH0pLFxuICAgICAgICBnb1RvUHJldmlvdXM6ICgpID0+XG4gICAgICAgICAgICB1cGRhdGVBbmRTYXZlKChjcmVhdHVyZXMpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50ID0gY3VycmVudF9vcmRlci5maW5kSW5kZXgoKGMpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGMuYWN0aXZlO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50ID09IDAgJiYgZ2V0KCRyb3VuZCkgPT0gMSkgcmV0dXJuIGNyZWF0dXJlcztcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudCA9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50X29yZGVyWzBdLmFjdGl2ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGVuYWJsZWQgPSBjdXJyZW50X29yZGVyLmZpbHRlcigoYykgPT4gYy5lbmFibGVkKTtcblxuICAgICAgICAgICAgICAgICAgICBsZXQgbmV4dEluZGV4ID1cbiAgICAgICAgICAgICAgICAgICAgICAgICgoKGN1cnJlbnQgLSAxKSAlIGVuYWJsZWQubGVuZ3RoKSArIGVuYWJsZWQubGVuZ3RoKSAlXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmFibGVkLmxlbmd0aDtcblxuICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXh0ID1cbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRfb3JkZXJbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudF9vcmRlci5maW5kSW5kZXgoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChjKSA9PiBjID09IGVuYWJsZWRbbmV4dEluZGV4XVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50X29yZGVyW2N1cnJlbnRdLmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5leHRJbmRleCA+IGN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByb3VuZCA9IGdldCgkcm91bmQpIC0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcm91bmQuc2V0KHJvdW5kKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBfbG9nZ2VyPy5sb2coXCIjIyNcIiwgYFJvdW5kICR7cm91bmR9YCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBfbG9nZ2VyPy5sb2coXCIjIyMjI1wiLCBgJHtuZXh0Lm5hbWV9J3MgdHVybmApO1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dC5hY3RpdmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdHVyZXM7XG4gICAgICAgICAgICB9KSxcblxuICAgICAgICBvcmRlcmVkLFxuXG4gICAgICAgIGFkZDogKC4uLml0ZW1zOiBDcmVhdHVyZVtdKSA9PlxuICAgICAgICAgICAgdXBkYXRlQW5kU2F2ZSgoY3JlYXR1cmVzKSA9PiB7XG4gICAgICAgICAgICAgICAgY3JlYXR1cmVzLnB1c2goLi4uaXRlbXMpO1xuICAgICAgICAgICAgICAgIF9sb2dnZXI/LmxvZyhcbiAgICAgICAgICAgICAgICAgICAgX2xvZ2dlcj8uam9pbihpdGVtcy5tYXAoKGMpID0+IGMubmFtZSkpLFxuICAgICAgICAgICAgICAgICAgICBcImFkZGVkIHRvIHRoZSBjb21iYXQuXCJcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHNldE51bWJlcnMoY3JlYXR1cmVzLCBpdGVtcyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0dXJlcztcbiAgICAgICAgICAgIH0pLFxuICAgICAgICByZW1vdmU6ICguLi5pdGVtczogQ3JlYXR1cmVbXSkgPT5cbiAgICAgICAgICAgIHVwZGF0ZUFuZFNhdmUoKGNyZWF0dXJlcykgPT4ge1xuICAgICAgICAgICAgICAgIGNyZWF0dXJlcyA9IGNyZWF0dXJlcy5maWx0ZXIoKG0pID0+ICFpdGVtcy5pbmNsdWRlcyhtKSk7XG5cbiAgICAgICAgICAgICAgICBfbG9nZ2VyPy5sb2coXG4gICAgICAgICAgICAgICAgICAgIF9sb2dnZXI/LmpvaW4oaXRlbXMubWFwKChjKSA9PiBjLm5hbWUpKSxcbiAgICAgICAgICAgICAgICAgICAgXCJyZW1vdmVkIGZyb20gdGhlIGNvbWJhdC5cIlxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0dXJlcztcbiAgICAgICAgICAgIH0pLFxuICAgICAgICB1cGRhdGU6ICgpID0+IHVwZGF0ZSgoYykgPT4gYyksXG4gICAgICAgIHJvbGw6IChwbHVnaW46IEluaXRpYXRpdmVUcmFja2VyKSA9PlxuICAgICAgICAgICAgdXBkYXRlQW5kU2F2ZSgoY3JlYXR1cmVzKSA9PiB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgY3JlYXR1cmUgb2YgY3JlYXR1cmVzKSB7XG4gICAgICAgICAgICAgICAgICAgIGNyZWF0dXJlLmluaXRpYXRpdmUgPSBwbHVnaW4uZ2V0SW5pdGlhdGl2ZVZhbHVlKFxuICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXR1cmUubW9kaWZpZXJcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgY3JlYXR1cmUuYWN0aXZlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdHVyZXM7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgbmV3OiAoc3RhdGU/OiBJbml0aWF0aXZlVmlld1N0YXRlKSA9PlxuICAgICAgICAgICAgdXBkYXRlQW5kU2F2ZSgoY3JlYXR1cmVzKSA9PiB7XG4gICAgICAgICAgICAgICAgJHJvdW5kLnNldChzdGF0ZT8ucm91bmQgPz8gMSk7XG4gICAgICAgICAgICAgICAgJHN0YXRlLnNldChzdGF0ZT8uc3RhdGUgPz8gZmFsc2UpO1xuICAgICAgICAgICAgICAgICRuYW1lLnNldChzdGF0ZT8ubmFtZSA/PyBudWxsKTtcbiAgICAgICAgICAgICAgICBjcmVhdHVyZXMgPSBzdGF0ZT8uY3JlYXR1cmVzXG4gICAgICAgICAgICAgICAgICAgID8gc3RhdGUuY3JlYXR1cmVzLm1hcCgoYykgPT4gQ3JlYXR1cmUuZnJvbShjKSlcbiAgICAgICAgICAgICAgICAgICAgOiBjcmVhdHVyZXMuZmlsdGVyKChjKSA9PiBjLnBsYXllcik7XG5cbiAgICAgICAgICAgICAgICBzZXROdW1iZXJzKGNyZWF0dXJlcyk7XG5cbiAgICAgICAgICAgICAgICBpZiAoc3RhdGU/LmxvZ0ZpbGUpIF9sb2dnZXI/Lm5ldyhzdGF0ZS5sb2dGaWxlKTtcbiAgICAgICAgICAgICAgICBpZiAoIXN0YXRlICYmIF9sb2dnZXIpIF9sb2dnZXIubG9nZ2luZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdHVyZXM7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgcmVzZXQ6ICgpID0+XG4gICAgICAgICAgICB1cGRhdGVBbmRTYXZlKChjcmVhdHVyZXMpID0+IHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBjcmVhdHVyZSBvZiBjcmVhdHVyZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgY3JlYXR1cmUuaHAgPSBjcmVhdHVyZS5tYXg7XG4gICAgICAgICAgICAgICAgICAgIGNyZWF0dXJlLmVuYWJsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBjcmVhdHVyZS5oaWRkZW4gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgY3JlYXR1cmUuc3RhdHVzLmNsZWFyKCk7XG4gICAgICAgICAgICAgICAgICAgIGNyZWF0dXJlLmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBfbG9nZ2VyPy5sb2coXCJFbmNvdW50ZXIgSFAgJiBTdGF0dXNlcyByZXNldFwiKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gY3JlYXR1cmVzO1xuICAgICAgICAgICAgfSksXG5cbiAgICAgICAgZ2V0T3JkZXJlZENyZWF0dXJlczogKCkgPT4gZ2V0KG9yZGVyZWQpLFxuICAgICAgICBsb2dVcGRhdGU6IChtZXNzYWdlczogVXBkYXRlTG9nTWVzc2FnZVtdKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB0b0xvZzogc3RyaW5nW10gPSBbXTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgbWVzc2FnZSBvZiBtZXNzYWdlcykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBlckNyZWF0dXJlOiBzdHJpbmdbXSA9IFtdO1xuICAgICAgICAgICAgICAgIGlmIChtZXNzYWdlLmhwKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChtZXNzYWdlLnRlbXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBlckNyZWF0dXJlLnB1c2goXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYCR7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UubmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZ2FpbmVkICR7bWVzc2FnZS5ocC50b1N0cmluZygpfSB0ZW1wb3JhcnkgSFBgXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG1lc3NhZ2UuaHAgPCAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwZXJDcmVhdHVyZS5wdXNoKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGAke21lc3NhZ2UubmFtZX0gdG9vayAkeyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLTEgKiBtZXNzYWdlLmhwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKS50b1N0cmluZygpfSBkYW1hZ2Uke1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnVuY1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBcIiBhbmQgd2FzIGtub2NrZWQgdW5jb25zY2lvdXNcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBcIlwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfWBcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobWVzc2FnZS5ocCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBlckNyZWF0dXJlLnB1c2goXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYCR7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UubmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gd2FzIGhlYWxlZCBmb3IgJHttZXNzYWdlLmhwLnRvU3RyaW5nKCl9IEhQYFxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobWVzc2FnZS5zdGF0dXMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBlckNyZWF0dXJlLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGVyQ3JlYXR1cmUucHVzaChcImFuZFwiKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBlckNyZWF0dXJlLnB1c2gobWVzc2FnZS5uYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAobWVzc2FnZS5zYXZlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGVyQ3JlYXR1cmUucHVzaChgc2F2ZWQgYWdhaW5zdCAke21lc3NhZ2Uuc3RhdHVzfWApO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGVyQ3JlYXR1cmUucHVzaChgdG9vayAke21lc3NhZ2Uuc3RhdHVzfSBzdGF0dXNgKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0b0xvZy5wdXNoKHBlckNyZWF0dXJlLmpvaW4oXCIgXCIpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF9sb2dnZXI/LmxvZyhgJHt0b0xvZy5qb2luKFwiLiBcIil9LmApO1xuICAgICAgICB9LFxuXG4gICAgICAgIGdldEVuY291bnRlclN0YXRlLFxuXG4gICAgICAgIHVwZGF0ZVN0YXRlOiAoKSA9PiB1cGRhdGUoKGMpID0+IGMpXG4gICAgfTtcbn1cblxuZXhwb3J0IGNvbnN0IHRyYWNrZXIgPSBjcmVhdGVUcmFja2VyKCk7XG4iLCAiPHNjcmlwdCBsYW5nPVwidHNcIj5cbiAgICBpbXBvcnQgeyBFeHRyYUJ1dHRvbkNvbXBvbmVudCB9IGZyb20gXCJvYnNpZGlhblwiO1xuXG4gICAgaW1wb3J0IHR5cGUgSW5pdGlhdGl2ZVRyYWNrZXIgZnJvbSBcInNyYy9tYWluXCI7XG4gICAgaW1wb3J0IHsgdHJhY2tlciB9IGZyb20gXCJzcmMvdHJhY2tlci9zdG9yZXMvdHJhY2tlclwiO1xuICAgIGltcG9ydCB7IFNUQVJUX0VOQ09VTlRFUiB9IGZyb20gXCJzcmMvdXRpbHNcIjtcbiAgICBpbXBvcnQgeyBDcmVhdHVyZSB9IGZyb20gXCJzcmMvdXRpbHMvY3JlYXR1cmVcIjtcblxuICAgIGltcG9ydCB0eXBlIHsgU3RhY2tSb2xsZXIgfSBmcm9tIFwiLi4vLi4vLi4vLi4vb2JzaWRpYW4tZGljZS1yb2xsZXIvc3JjL3JvbGxlclwiO1xuXG4gICAgZXhwb3J0IGxldCBjcmVhdHVyZXM6IE1hcDxDcmVhdHVyZSwgbnVtYmVyIHwgc3RyaW5nPjtcblxuICAgIGV4cG9ydCBsZXQgcGx1Z2luOiBJbml0aWF0aXZlVHJhY2tlcjtcblxuICAgIGNvbnN0IGNyZWF0dXJlTWFwOiBNYXA8Q3JlYXR1cmUsIG51bWJlcj4gPSBuZXcgTWFwKCk7XG4gICAgY29uc3Qgcm9sbGVyTWFwOiBNYXA8Q3JlYXR1cmUsIFN0YWNrUm9sbGVyPiA9IG5ldyBNYXAoKTtcblxuICAgIGZvciAobGV0IFtjcmVhdHVyZSwgY291bnRdIG9mIGNyZWF0dXJlcykge1xuICAgICAgICBsZXQgbnVtYmVyOiBudW1iZXIgPSBOdW1iZXIoY291bnQpO1xuICAgICAgICBpZiAocGx1Z2luLmNhblVzZURpY2VSb2xsZXIpIHtcbiAgICAgICAgICAgIGxldCByb2xsZXIgPSBwbHVnaW4uZ2V0Um9sbGVyKGAke2NvdW50fWApIGFzIFN0YWNrUm9sbGVyO1xuICAgICAgICAgICAgcm9sbGVyLm9uKFwibmV3LXJlc3VsdFwiLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY3JlYXR1cmVNYXAuc2V0KGNyZWF0dXJlLCByb2xsZXIucmVzdWx0KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcm9sbGVyTWFwLnNldChjcmVhdHVyZSwgcm9sbGVyKTtcbiAgICAgICAgICAgIHJvbGxlci5yb2xsKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjcmVhdHVyZU1hcC5zZXQoY3JlYXR1cmUsIG51bWJlcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBvcGVuQnV0dG9uID0gKG5vZGU6IEhUTUxFbGVtZW50KSA9PiB7XG4gICAgICAgIG5ldyBFeHRyYUJ1dHRvbkNvbXBvbmVudChub2RlKS5zZXRJY29uKFNUQVJUX0VOQ09VTlRFUik7XG4gICAgfTtcbiAgICBjb25zdCBvcGVuID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICBpZiAoIXBsdWdpbi52aWV3KSB7XG4gICAgICAgICAgICBhd2FpdCBwbHVnaW4uYWRkVHJhY2tlclZpZXcoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHZpZXcgPSBwbHVnaW4udmlldztcbiAgICAgICAgY29uc3QgY3JlYXR1cmVzOiBDcmVhdHVyZVtdID0gWy4uLmNyZWF0dXJlTWFwXVxuICAgICAgICAgICAgLm1hcCgoW2NyZWF0dXJlLCBudW1iZXJdKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGlzTmFOKE51bWJlcihudW1iZXIpKSB8fCBudW1iZXIgPCAxKSByZXR1cm4gW2NyZWF0dXJlXTtcbiAgICAgICAgICAgICAgICByZXR1cm4gWy4uLkFycmF5KG51bWJlcikua2V5cygpXS5tYXAoKHYpID0+XG4gICAgICAgICAgICAgICAgICAgIENyZWF0dXJlLm5ldyhjcmVhdHVyZSlcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5mbGF0KCk7XG5cbiAgICAgICAgdHJhY2tlci5uZXcoe1xuICAgICAgICAgICAgY3JlYXR1cmVzOiBjcmVhdHVyZXMubWFwKChjKSA9PiBjLnRvSlNPTigpKSxcbiAgICAgICAgICAgIG5hbWU6IG51bGwsXG4gICAgICAgICAgICBzdGF0ZTogZmFsc2UsXG4gICAgICAgICAgICByb3VuZDogMSxcbiAgICAgICAgICAgIGxvZ0ZpbGU6IG51bGxcbiAgICAgICAgfSk7XG4gICAgICAgIHBsdWdpbi5hcHAud29ya3NwYWNlLnJldmVhbExlYWYodmlldy5sZWFmKTtcbiAgICB9O1xuXG4gICAgY29uc3QgYWRkQnV0dG9uID0gKG5vZGU6IEhUTUxFbGVtZW50KSA9PiB7XG4gICAgICAgIG5ldyBFeHRyYUJ1dHRvbkNvbXBvbmVudChub2RlKS5zZXRJY29uKFwicGx1cy13aXRoLWNpcmNsZVwiKTtcbiAgICB9O1xuXG4gICAgY29uc3QgYWRkID0gYXN5bmMgKGV2dDogTW91c2VFdmVudCkgPT4ge1xuICAgICAgICBpZiAoIXBsdWdpbi52aWV3KSB7XG4gICAgICAgICAgICBhd2FpdCBwbHVnaW4uYWRkVHJhY2tlclZpZXcoKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjcmVhdHVyZXM6IENyZWF0dXJlW10gPSBbLi4uY3JlYXR1cmVNYXBdXG4gICAgICAgICAgICAubWFwKChbY3JlYXR1cmUsIG51bWJlcl0pID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoaXNOYU4oTnVtYmVyKG51bWJlcikpIHx8IG51bWJlciA8IDEpIHJldHVybiBbY3JlYXR1cmVdO1xuICAgICAgICAgICAgICAgIHJldHVybiBbLi4uQXJyYXkobnVtYmVyKS5rZXlzKCldLm1hcCgodikgPT5cbiAgICAgICAgICAgICAgICAgICAgQ3JlYXR1cmUubmV3KGNyZWF0dXJlKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmZsYXQoKTtcbiAgICAgICAgdHJhY2tlci5hZGQoLi4uY3JlYXR1cmVzKTtcbiAgICB9O1xuXG4gICAgY29uc3Qgcm9sbGVyRWwgPSAobm9kZTogSFRNTEVsZW1lbnQsIGNyZWF0dXJlOiBDcmVhdHVyZSkgPT4ge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgICBwbHVnaW4uY2FuVXNlRGljZVJvbGxlciAmJlxuICAgICAgICAgICAgcm9sbGVyTWFwLmhhcyhjcmVhdHVyZSkgJiZcbiAgICAgICAgICAgICFyb2xsZXJNYXAuZ2V0KGNyZWF0dXJlKSEuaXNTdGF0aWNcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBub2RlLmFwcGVuZENoaWxkKFxuICAgICAgICAgICAgICAgIHJvbGxlck1hcC5nZXQoY3JlYXR1cmUpPy5jb250YWluZXJFbCA/P1xuICAgICAgICAgICAgICAgICAgICBjcmVhdGVTcGFuKHsgdGV4dDogYCR7Y3JlYXR1cmVNYXAuZ2V0KGNyZWF0dXJlKX1gIH0pXG4gICAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbm9kZS5zZXRUZXh0KGAke2NyZWF0dXJlTWFwLmdldChjcmVhdHVyZSl9YCk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgY29uc3Qgam9pbmVyID0gKGluZGV4OiBudW1iZXIsIGxlbmd0aDogbnVtYmVyKSA9PiB7XG4gICAgICAgIGlmIChsZW5ndGggPT0gMSB8fCBpbmRleCA9PSAwKSByZXR1cm4gXCJcIjtcbiAgICAgICAgY29uc3QgZGVsaW0gPSBsZW5ndGggPiAyID8gXCIsXCIgOiBcIlwiO1xuICAgICAgICBpZiAoaW5kZXggPT0gbGVuZ3RoIC0gMSkgcmV0dXJuIGAke2RlbGltfSBhbmQgYDtcbiAgICAgICAgcmV0dXJuIGAke2RlbGltfSBgO1xuICAgIH07XG4gICAgY29uc3QgbGFiZWwgPSAoY3JlYXR1cmU6IENyZWF0dXJlKSA9PiB7XG4gICAgICAgIGlmICghY3JlYXR1cmUpIHJldHVybjtcbiAgICAgICAgbGV0IGxhYmVsID0gW107XG4gICAgICAgIGlmIChjcmVhdHVyZS5ocCkge1xuICAgICAgICAgICAgbGFiZWwucHVzaChgSFA6ICR7Y3JlYXR1cmUuaHB9YCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNyZWF0dXJlLmFjKSB7XG4gICAgICAgICAgICBsYWJlbC5wdXNoKGBBQzogJHtjcmVhdHVyZS5hY31gKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY3JlYXR1cmUubW9kaWZpZXIpIHtcbiAgICAgICAgICAgIGxhYmVsLnB1c2goYE1PRDogJHtjcmVhdHVyZS5tb2RpZmllcn1gKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYCR7bGFiZWwuam9pbihcIiwgXCIpfWA7XG4gICAgfTtcbjwvc2NyaXB0PlxuXG48c3BhbiBjbGFzcz1cImVuY291bnRlci1saW5lIGVuY291bnRlci1yb3dcIj5cbiAgICA8c3Bhbj5cbiAgICAgICAgeyNpZiBjcmVhdHVyZXMuc2l6ZX1cbiAgICAgICAgICAgIHsjZWFjaCBbLi4uY3JlYXR1cmVzXSBhcyBbY3JlYXR1cmUsIGNvdW50XSwgaW5kZXh9XG4gICAgICAgICAgICAgICAgPHNwYW4gYXJpYS1sYWJlbD17bGFiZWwoY3JlYXR1cmUpfT5cbiAgICAgICAgICAgICAgICAgICAge2pvaW5lcihpbmRleCwgY3JlYXR1cmVzLnNpemUpfVxuICAgICAgICAgICAgICAgICAgICA8c3Ryb25nXG4gICAgICAgICAgICAgICAgICAgICAgICB1c2U6cm9sbGVyRWw9e2NyZWF0dXJlfVxuICAgICAgICAgICAgICAgICAgICAvPiZuYnNwO3tjcmVhdHVyZS5uYW1lfXtjb3VudCA9PSAxID8gXCJcIiA6IFwic1wifVxuICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgIHsvZWFjaH1cbiAgICAgICAgezplbHNlfVxuICAgICAgICAgICAgLVxuICAgICAgICB7L2lmfVxuICAgIDwvc3Bhbj5cbiAgICA8c3BhbiBjbGFzcz1cImljb25zXCI+XG4gICAgICAgIDxzcGFuXG4gICAgICAgICAgICB1c2U6b3BlbkJ1dHRvblxuICAgICAgICAgICAgb246Y2xpY2t8c3RvcFByb3BhZ2F0aW9uPXtvcGVufVxuICAgICAgICAgICAgYXJpYS1sYWJlbD1cIkJlZ2luIEVuY291bnRlclwiXG4gICAgICAgIC8+XG4gICAgICAgIDxzcGFuXG4gICAgICAgICAgICB1c2U6YWRkQnV0dG9uXG4gICAgICAgICAgICBvbjpjbGlja3xzdG9wUHJvcGFnYXRpb249e2FkZH1cbiAgICAgICAgICAgIGFyaWEtbGFiZWw9XCJBZGQgdG8gRW5jb3VudGVyXCJcbiAgICAgICAgLz5cbiAgICA8L3NwYW4+XG48L3NwYW4+XG5cbjxzdHlsZT5cbiAgICAuZW5jb3VudGVyLWxpbmUge1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBnYXA6IDFyZW07XG4gICAgfVxuICAgIC5pY29ucyB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgfVxuICAgIC5pY29ucyA+IHNwYW4gOmdsb2JhbCguY2xpY2thYmxlLWljb24pIHtcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiAwO1xuICAgIH1cbjwvc3R5bGU+XG4iLCAiLyoqIFwiT1BFTiBHQU1FIExJQ0VOU0UgVmVyc2lvbiAxLjBhXCJcbiAqICdUaGUgZm9sbG93aW5nIHRleHQgaXMgdGhlIHByb3BlcnR5IG9mIFdpemFyZHMgb2YgdGhlIENvYXN0LCBJbmMuIGFuZCBpcyBDb3B5cmlnaHQgMjAwMCBXaXphcmRzIG9mIHRoZSBDb2FzdCwgSW5jIChcIldpemFyZHNcIikuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuJ1xuICogICcxLiBEZWZpbml0aW9uczogKGEpXCJDb250cmlidXRvcnNcIiBtZWFucyB0aGUgY29weXJpZ2h0IGFuZC9vciB0cmFkZW1hcmsgb3duZXJzIHdobyBoYXZlIGNvbnRyaWJ1dGVkIE9wZW4gR2FtZSBDb250ZW50OyAoYilcIkRlcml2YXRpdmUgTWF0ZXJpYWxcIiBtZWFucyBjb3B5cmlnaHRlZCBtYXRlcmlhbCBpbmNsdWRpbmcgZGVyaXZhdGl2ZSB3b3JrcyBhbmQgdHJhbnNsYXRpb25zIChpbmNsdWRpbmcgaW50byBvdGhlciBjb21wdXRlciBsYW5ndWFnZXMpLCBwb3RhdGlvbiwgbW9kaWZpY2F0aW9uLCBjb3JyZWN0aW9uLCBhZGRpdGlvbiwgZXh0ZW5zaW9uLCB1cGdyYWRlLCBpbXByb3ZlbWVudCwgY29tcGlsYXRpb24sIGFicmlkZ21lbnQgb3Igb3RoZXIgZm9ybSBpbiB3aGljaCBhbiBleGlzdGluZyB3b3JrIG1heSBiZSByZWNhc3QsIHRyYW5zZm9ybWVkIG9yIGFkYXB0ZWQ7IChjKSBcIkRpc3RyaWJ1dGVcIiBtZWFucyB0byByZXByb2R1Y2UsIGxpY2Vuc2UsIHJlbnQsIGxlYXNlLCBzZWxsLCBicm9hZGNhc3QsIHB1YmxpY2x5IGRpc3BsYXksIHRyYW5zbWl0IG9yIG90aGVyd2lzZSBkaXN0cmlidXRlOyAoZClcIk9wZW4gR2FtZSBDb250ZW50XCIgbWVhbnMgdGhlIGdhbWUgbWVjaGFuaWMgYW5kIGluY2x1ZGVzIHRoZSBtZXRob2RzLCBwcm9jZWR1cmVzLCBwcm9jZXNzZXMgYW5kIHJvdXRpbmVzIHRvIHRoZSBleHRlbnQgc3VjaCBjb250ZW50IGRvZXMgbm90IGVtYm9keSB0aGUgUHJvZHVjdCBJZGVudGl0eSBhbmQgaXMgYW4gZW5oYW5jZW1lbnQgb3ZlciB0aGUgcHJpb3IgYXJ0IGFuZCBhbnkgYWRkaXRpb25hbCBjb250ZW50IGNsZWFybHkgaWRlbnRpZmllZCBhcyBPcGVuIEdhbWUgQ29udGVudCBieSB0aGUgQ29udHJpYnV0b3IsIGFuZCBtZWFucyBhbnkgd29yayBjb3ZlcmVkIGJ5IHRoaXMgTGljZW5zZSwgaW5jbHVkaW5nIHRyYW5zbGF0aW9ucyBhbmQgZGVyaXZhdGl2ZSB3b3JrcyB1bmRlciBjb3B5cmlnaHQgbGF3LCBidXQgc3BlY2lmaWNhbGx5IGV4Y2x1ZGVzIFByb2R1Y3QgSWRlbnRpdHkuIChlKSBcIlByb2R1Y3QgSWRlbnRpdHlcIiBtZWFucyBwcm9kdWN0IGFuZCBwcm9kdWN0IGxpbmUgbmFtZXMsIGxvZ29zIGFuZCBpZGVudGlmeWluZyBtYXJrcyBpbmNsdWRpbmcgdHJhZGUgZHJlc3M7IGFydGlmYWN0czsgY3JlYXR1cmVzIGNoYXJhY3RlcnM7IHN0b3JpZXMsIHN0b3J5bGluZXMsIHBsb3RzLCB0aGVtYXRpYyBlbGVtZW50cywgZGlhbG9ndWUsIGluY2lkZW50cywgbGFuZ3VhZ2UsIGFydHdvcmssIHN5bWJvbHMsIGRlc2lnbnMsIGRlcGljdGlvbnMsIGxpa2VuZXNzZXMsIGZvcm1hdHMsIHBvc2VzLCBjb25jZXB0cywgdGhlbWVzIGFuZCBncmFwaGljLCBwaG90b2dyYXBoaWMgYW5kIG90aGVyIHZpc3VhbCBvciBhdWRpbyByZXByZXNlbnRhdGlvbnM7IG5hbWVzIGFuZCBkZXNjcmlwdGlvbnMgb2YgY2hhcmFjdGVycywgc3BlbGxzLCBlbmNoYW50bWVudHMsIHBlcnNvbmFsaXRpZXMsIHRlYW1zLCBwZXJzb25hcywgbGlrZW5lc3NlcyBhbmQgc3BlY2lhbCBhYmlsaXRpZXM7IHBsYWNlcywgbG9jYXRpb25zLCBlbnZpcm9ubWVudHMsIGNyZWF0dXJlcywgZXF1aXBtZW50LCBtYWdpY2FsIG9yIHN1cGVybmF0dXJhbCBhYmlsaXRpZXMgb3IgZWZmZWN0cywgbG9nb3MsIHN5bWJvbHMsIG9yIGdyYXBoaWMgZGVzaWduczsgYW5kIGFueSBvdGhlciB0cmFkZW1hcmsgb3IgcmVnaXN0ZXJlZCB0cmFkZW1hcmsgY2xlYXJseSBpZGVudGlmaWVkIGFzIFByb2R1Y3QgaWRlbnRpdHkgYnkgdGhlIG93bmVyIG9mIHRoZSBQcm9kdWN0IElkZW50aXR5LCBhbmQgd2hpY2ggc3BlY2lmaWNhbGx5IGV4Y2x1ZGVzIHRoZSBPcGVuIEdhbWUgQ29udGVudDsgKGYpIFwiVHJhZGVtYXJrXCIgbWVhbnMgdGhlIGxvZ29zLCBuYW1lcywgbWFyaywgc2lnbiwgbW90dG8sIGRlc2lnbnMgdGhhdCBhcmUgdXNlZCBieSBhIENvbnRyaWJ1dG9yIHRvIGlkZW50aWZ5IGl0c2VsZiBvciBpdHMgcHJvZHVjdHMgb3IgdGhlIGFzc29jaWF0ZWQgcHJvZHVjdHMgY29udHJpYnV0ZWQgdG8gdGhlIE9wZW4gR2FtZSBMaWNlbnNlIGJ5IHRoZSBDb250cmlidXRvciAoZykgXCJVc2VcIiwgXCJVc2VkXCIgb3IgXCJVc2luZ1wiIG1lYW5zIHRvIHVzZSwgRGlzdHJpYnV0ZSwgY29weSwgZWRpdCwgZm9ybWF0LCBtb2RpZnksIHRyYW5zbGF0ZSBhbmQgb3RoZXJ3aXNlIGNyZWF0ZSBEZXJpdmF0aXZlIE1hdGVyaWFsIG9mIE9wZW4gR2FtZSBDb250ZW50LiAoaCkgXCJZb3VcIiBvciBcIllvdXJcIiBtZWFucyB0aGUgbGljZW5zZWUgaW4gdGVybXMgb2YgdGhpcyBhZ3JlZW1lbnQuJ1xuICogIFwiMi4gVGhlIExpY2Vuc2U6IFRoaXMgTGljZW5zZSBhcHBsaWVzIHRvIGFueSBPcGVuIEdhbWUgQ29udGVudCB0aGF0IGNvbnRhaW5zIGEgbm90aWNlIGluZGljYXRpbmcgdGhhdCB0aGUgT3BlbiBHYW1lIENvbnRlbnQgbWF5IG9ubHkgYmUgVXNlZCB1bmRlciBhbmQgaW4gdGVybXMgb2YgdGhpcyBMaWNlbnNlLiBZb3UgbXVzdCBhZmZpeCBzdWNoIGEgbm90aWNlIHRvIGFueSBPcGVuIEdhbWUgQ29udGVudCB0aGF0IHlvdSBVc2UuIE5vIHRlcm1zIG1heSBiZSBhZGRlZCB0byBvciBzdWJ0cmFjdGVkIGZyb20gdGhpcyBMaWNlbnNlIGV4Y2VwdCBhcyBkZXNjcmliZWQgYnkgdGhlIExpY2Vuc2UgaXRzZWxmLiBObyBvdGhlciB0ZXJtcyBvciBjb25kaXRpb25zIG1heSBiZSBhcHBsaWVkIHRvIGFueSBPcGVuIEdhbWUgQ29udGVudCBkaXN0cmlidXRlZCB1c2luZyB0aGlzIExpY2Vuc2UuXCJcbiAqICBcIjMuT2ZmZXIgYW5kIEFjY2VwdGFuY2U6IEJ5IFVzaW5nIHRoZSBPcGVuIEdhbWUgQ29udGVudCBZb3UgaW5kaWNhdGUgWW91ciBhY2NlcHRhbmNlIG9mIHRoZSB0ZXJtcyBvZiB0aGlzIExpY2Vuc2UuXCJcbiAqICBcIjQuIEdyYW50IGFuZCBDb25zaWRlcmF0aW9uOiBJbiBjb25zaWRlcmF0aW9uIGZvciBhZ3JlZWluZyB0byB1c2UgdGhpcyBMaWNlbnNlLCB0aGUgQ29udHJpYnV0b3JzIGdyYW50IFlvdSBhIHBlcnBldHVhbCwgd29ybGR3aWRlLCByb3lhbHR5LWZyZWUsIG5vbi1leGNsdXNpdmUgbGljZW5zZSB3aXRoIHRoZSBleGFjdCB0ZXJtcyBvZiB0aGlzIExpY2Vuc2UgdG8gVXNlLCB0aGUgT3BlbiBHYW1lIENvbnRlbnQuXCJcbiAqICBcIjUuUmVwcmVzZW50YXRpb24gb2YgQXV0aG9yaXR5IHRvIENvbnRyaWJ1dGU6IElmIFlvdSBhcmUgY29udHJpYnV0aW5nIG9yaWdpbmFsIG1hdGVyaWFsIGFzIE9wZW4gR2FtZSBDb250ZW50LCBZb3UgcmVwcmVzZW50IHRoYXQgWW91ciBDb250cmlidXRpb25zIGFyZSBZb3VyIG9yaWdpbmFsIGNyZWF0aW9uIGFuZC9vciBZb3UgaGF2ZSBzdWZmaWNpZW50IHJpZ2h0cyB0byBncmFudCB0aGUgcmlnaHRzIGNvbnZleWVkIGJ5IHRoaXMgTGljZW5zZS5cIlxuICogIFwiNi5Ob3RpY2Ugb2YgTGljZW5zZSBDb3B5cmlnaHQ6IFlvdSBtdXN0IHVwZGF0ZSB0aGUgQ09QWVJJR0hUIE5PVElDRSBwb3J0aW9uIG9mIHRoaXMgTGljZW5zZSB0byBpbmNsdWRlIHRoZSBleGFjdCB0ZXh0IG9mIHRoZSBDT1BZUklHSFQgTk9USUNFIG9mIGFueSBPcGVuIEdhbWUgQ29udGVudCBZb3UgYXJlIGNvcHlpbmcsIG1vZGlmeWluZyBvciBkaXN0cmlidXRpbmcsIGFuZCBZb3UgbXVzdCBhZGQgdGhlIHRpdGxlLCB0aGUgY29weXJpZ2h0IGRhdGUsIGFuZCB0aGUgY29weXJpZ2h0IGhvbGRlcidzIG5hbWUgdG8gdGhlIENPUFlSSUdIVCBOT1RJQ0Ugb2YgYW55IG9yaWdpbmFsIE9wZW4gR2FtZSBDb250ZW50IHlvdSBEaXN0cmlidXRlLlwiXG4gKiAgXCI3LiBVc2Ugb2YgUHJvZHVjdCBJZGVudGl0eTogWW91IGFncmVlIG5vdCB0byBVc2UgYW55IFByb2R1Y3QgSWRlbnRpdHksIGluY2x1ZGluZyBhcyBhbiBpbmRpY2F0aW9uIGFzIHRvIGNvbXBhdGliaWxpdHksIGV4Y2VwdCBhcyBleHByZXNzbHkgbGljZW5zZWQgaW4gYW5vdGhlciwgaW5kZXBlbmRlbnQgQWdyZWVtZW50IHdpdGggdGhlIG93bmVyIG9mIGVhY2ggZWxlbWVudCBvZiB0aGF0IFByb2R1Y3QgSWRlbnRpdHkuIFlvdSBhZ3JlZSBub3QgdG8gaW5kaWNhdGUgY29tcGF0aWJpbGl0eSBvciBjby1hZGFwdGFiaWxpdHkgd2l0aCBhbnkgVHJhZGVtYXJrIG9yIFJlZ2lzdGVyZWQgVHJhZGVtYXJrIGluIGNvbmp1bmN0aW9uIHdpdGggYSB3b3JrIGNvbnRhaW5pbmcgT3BlbiBHYW1lIENvbnRlbnQgZXhjZXB0IGFzIGV4cHJlc3NseSBsaWNlbnNlZCBpbiBhbm90aGVyLCBpbmRlcGVuZGVudCBBZ3JlZW1lbnQgd2l0aCB0aGUgb3duZXIgb2Ygc3VjaCBUcmFkZW1hcmsgb3IgUmVnaXN0ZXJlZCBUcmFkZW1hcmsuIFRoZSB1c2Ugb2YgYW55IFByb2R1Y3QgSWRlbnRpdHkgaW4gT3BlbiBHYW1lIENvbnRlbnQgZG9lcyBub3QgY29uc3RpdHV0ZSBhIGNoYWxsZW5nZSB0byB0aGUgb3duZXJzaGlwIG9mIHRoYXQgUHJvZHVjdCBJZGVudGl0eS4gVGhlIG93bmVyIG9mIGFueSBQcm9kdWN0IElkZW50aXR5IHVzZWQgaW4gT3BlbiBHYW1lIENvbnRlbnQgc2hhbGwgcmV0YWluIGFsbCByaWdodHMsIHRpdGxlIGFuZCBpbnRlcmVzdCBpbiBhbmQgdG8gdGhhdCBQcm9kdWN0IElkZW50aXR5LlwiXG4gKiAgXCI4LiBJZGVudGlmaWNhdGlvbjogSWYgeW91IGRpc3RyaWJ1dGUgT3BlbiBHYW1lIENvbnRlbnQgWW91IG11c3QgY2xlYXJseSBpbmRpY2F0ZSB3aGljaCBwb3J0aW9ucyBvZiB0aGUgd29yayB0aGF0IHlvdSBhcmUgZGlzdHJpYnV0aW5nIGFyZSBPcGVuIEdhbWUgQ29udGVudC5cIlxuICogIFwiOS4gVXBkYXRpbmcgdGhlIExpY2Vuc2U6IFdpemFyZHMgb3IgaXRzIGRlc2lnbmF0ZWQgQWdlbnRzIG1heSBwdWJsaXNoIHVwZGF0ZWQgdmVyc2lvbnMgb2YgdGhpcyBMaWNlbnNlLiBZb3UgbWF5IHVzZSBhbnkgYXV0aG9yaXplZCB2ZXJzaW9uIG9mIHRoaXMgTGljZW5zZSB0byBjb3B5LCBtb2RpZnkgYW5kIGRpc3RyaWJ1dGUgYW55IE9wZW4gR2FtZSBDb250ZW50IG9yaWdpbmFsbHkgZGlzdHJpYnV0ZWQgdW5kZXIgYW55IHZlcnNpb24gb2YgdGhpcyBMaWNlbnNlLlwiXG4gKiAgXCIxMCBDb3B5IG9mIHRoaXMgTGljZW5zZTogWW91IE1VU1QgaW5jbHVkZSBhIGNvcHkgb2YgdGhpcyBMaWNlbnNlIHdpdGggZXZlcnkgY29weSBvZiB0aGUgT3BlbiBHYW1lIENvbnRlbnQgWW91IERpc3RyaWJ1dGUuXCJcbiAqICBcIjExLiBVc2Ugb2YgQ29udHJpYnV0b3IgQ3JlZGl0czogWW91IG1heSBub3QgbWFya2V0IG9yIGFkdmVydGlzZSB0aGUgT3BlbiBHYW1lIENvbnRlbnQgdXNpbmcgdGhlIG5hbWUgb2YgYW55IENvbnRyaWJ1dG9yIHVubGVzcyBZb3UgaGF2ZSB3cml0dGVuIHBlcm1pc3Npb24gZnJvbSB0aGUgQ29udHJpYnV0b3IgdG8gZG8gc28uXCJcbiAqICBcIjEyIEluYWJpbGl0eSB0byBDb21wbHk6IElmIGl0IGlzIGltcG9zc2libGUgZm9yIFlvdSB0byBjb21wbHkgd2l0aCBhbnkgb2YgdGhlIHRlcm1zIG9mIHRoaXMgTGljZW5zZSB3aXRoIHJlc3BlY3QgdG8gc29tZSBvciBhbGwgb2YgdGhlIE9wZW4gR2FtZSBDb250ZW50IGR1ZSB0byBzdGF0dXRlLCBqdWRpY2lhbCBvcmRlciwgb3IgZ292ZXJubWVudGFsIHJlZ3VsYXRpb24gdGhlbiBZb3UgbWF5IG5vdCBVc2UgYW55IE9wZW4gR2FtZSBNYXRlcmlhbCBzbyBhZmZlY3RlZC5cIlxuICogIFwiMTMgVGVybWluYXRpb246IFRoaXMgTGljZW5zZSB3aWxsIHRlcm1pbmF0ZSBhdXRvbWF0aWNhbGx5IGlmIFlvdSBmYWlsIHRvIGNvbXBseSB3aXRoIGFsbCB0ZXJtcyBoZXJlaW4gYW5kIGZhaWwgdG8gY3VyZSBzdWNoIGJyZWFjaCB3aXRoaW4gMzAgZGF5cyBvZiBiZWNvbWluZyBhd2FyZSBvZiB0aGUgYnJlYWNoLiBBbGwgc3VibGljZW5zZXMgc2hhbGwgc3Vydml2ZSB0aGUgdGVybWluYXRpb24gb2YgdGhpcyBMaWNlbnNlLlwiXG4gKiAgXCIxNCBSZWZvcm1hdGlvbjogSWYgYW55IHByb3Zpc2lvbiBvZiB0aGlzIExpY2Vuc2UgaXMgaGVsZCB0byBiZSB1bmVuZm9yY2VhYmxlLCBzdWNoIHByb3Zpc2lvbiBzaGFsbCBiZSByZWZvcm1lZCBvbmx5IHRvIHRoZSBleHRlbnQgbmVjZXNzYXJ5IHRvIG1ha2UgaXQgZW5mb3JjZWFibGUuXCJcbiAqICBcIjE1IENPUFlSSUdIVCBOT1RJQ0UgT3BlbiBHYW1lIExpY2Vuc2UgdiAxLjAgQ29weXJpZ2h0IDIwMDAsIFdpemFyZHMgb2YgdGhlIENvYXN0LCBJbmMuXCJcbiAqL1xuXG5pbXBvcnQgdHlwZSB7IFNSRE1vbnN0ZXIgfSBmcm9tIFwiLi4vLi4vQHR5cGVzXCI7XG5cbmV4cG9ydCBjb25zdCBCRVNUSUFSWTogU1JETW9uc3RlcltdID0gW1xuXHR7XG5cdFx0bmFtZTogXCJBYm9sZXRoXCIsXG5cdFx0c2l6ZTogXCJMYXJnZVwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcImFiZXJyYXRpb25cIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJsYXdmdWwgZXZpbFwiLFxuXHRcdGFjOiAxNyxcblx0XHRocDogMTM1LFxuXHRcdGhpdF9kaWNlOiBcIjE4ZDEwXCIsXG5cdFx0c3BlZWQ6IFwiMTAgZnQuLCBzd2ltIDQwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbMjEsIDksIDE1LCAxOCwgMTUsIDE4XSxcblx0XHRzYXZlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRjb25zdGl0dXRpb246IDYsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRpbnRlbGxpZ2VuY2U6IDgsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHR3aXNkb206IDYsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0c2tpbGxzYXZlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRoaXN0b3J5OiAxMixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHBlcmNlcHRpb246IDEwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuXHRcdGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuXHRcdHNlbnNlczogXCJkYXJrdmlzaW9uIDEyMCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAyMFwiLFxuXHRcdGxhbmd1YWdlczogXCJEZWVwIFNwZWVjaCwgdGVsZXBhdGh5IDEyMCBmdC5cIixcblx0XHRjcjogXCIxMFwiLFxuXHRcdHRyYWl0czogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkFtcGhpYmlvdXNcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgYWJvbGV0aCBjYW4gYnJlYXRoZSBhaXIgYW5kIHdhdGVyLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIk11Y291cyBDbG91ZFwiLFxuXHRcdFx0XHRkZXNjOiBcIldoaWxlIHVuZGVyd2F0ZXIsIHRoZSBhYm9sZXRoIGlzIHN1cnJvdW5kZWQgYnkgdHJhbnNmb3JtYXRpdmUgbXVjdXMuIEEgY3JlYXR1cmUgdGhhdCB0b3VjaGVzIHRoZSBhYm9sZXRoIG9yIHRoYXQgaGl0cyBpdCB3aXRoIGEgbWVsZWUgYXR0YWNrIHdoaWxlIHdpdGhpbiA1IGZ0LiBvZiBpdCBtdXN0IG1ha2UgYSBEQyAxNCBDb25zdGl0dXRpb24gc2F2aW5nIHRocm93LiBPbiBhIGZhaWx1cmUsIHRoZSBjcmVhdHVyZSBpcyBkaXNlYXNlZCBmb3IgMWQ0IGhvdXJzLiBUaGUgZGlzZWFzZWQgY3JlYXR1cmUgY2FuIGJyZWF0aGUgb25seSB1bmRlcndhdGVyLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlByb2JpbmcgVGVsZXBhdGh5XCIsXG5cdFx0XHRcdGRlc2M6IFwiSWYgYSBjcmVhdHVyZSBjb21tdW5pY2F0ZXMgdGVsZXBhdGhpY2FsbHkgd2l0aCB0aGUgYWJvbGV0aCwgdGhlIGFib2xldGggbGVhcm5zIHRoZSBjcmVhdHVyZSdzIGdyZWF0ZXN0IGRlc2lyZXMgaWYgdGhlIGFib2xldGggY2FuIHNlZSB0aGUgY3JlYXR1cmUuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgYWJvbGV0aCBtYWtlcyB0aHJlZSB0ZW50YWNsZSBhdHRhY2tzLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlRlbnRhY2xlXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzkgdG8gaGl0LCByZWFjaCAxMCBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTIgKDJkNiArIDUpIGJsdWRnZW9uaW5nIGRhbWFnZS4gSWYgdGhlIHRhcmdldCBpcyBhIGNyZWF0dXJlLCBpdCBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxNCBDb25zdGl0dXRpb24gc2F2aW5nIHRocm93IG9yIGJlY29tZSBkaXNlYXNlZC4gVGhlIGRpc2Vhc2UgaGFzIG5vIGVmZmVjdCBmb3IgMSBtaW51dGUgYW5kIGNhbiBiZSByZW1vdmVkIGJ5IGFueSBtYWdpYyB0aGF0IGN1cmVzIGRpc2Vhc2UuIEFmdGVyIDEgbWludXRlLCB0aGUgZGlzZWFzZWQgY3JlYXR1cmUncyBza2luIGJlY29tZXMgdHJhbnNsdWNlbnQgYW5kIHNsaW15LCB0aGUgY3JlYXR1cmUgY2FuJ3QgcmVnYWluIGhpdCBwb2ludHMgdW5sZXNzIGl0IGlzIHVuZGVyd2F0ZXIsIGFuZCB0aGUgZGlzZWFzZSBjYW4gYmUgcmVtb3ZlZCBvbmx5IGJ5IGhlYWwgb3IgYW5vdGhlciBkaXNlYXNlLWN1cmluZyBzcGVsbCBvZiA2dGggbGV2ZWwgb3IgaGlnaGVyLiBXaGVuIHRoZSBjcmVhdHVyZSBpcyBvdXRzaWRlIGEgYm9keSBvZiB3YXRlciwgaXQgdGFrZXMgNiAoMWQxMikgYWNpZCBkYW1hZ2UgZXZlcnkgMTAgbWludXRlcyB1bmxlc3MgbW9pc3R1cmUgaXMgYXBwbGllZCB0byB0aGUgc2tpbiBiZWZvcmUgMTAgbWludXRlcyBoYXZlIHBhc3NlZC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA5LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIyZDZcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiA1LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJUYWlsXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzkgdG8gaGl0LCByZWFjaCAxMCBmdC4gb25lIHRhcmdldC4gSGl0OiAxNSAoM2Q2ICsgNSkgYmx1ZGdlb25pbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDksXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjNkNlwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDUsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkVuc2xhdmUgKDMvZGF5KVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBhYm9sZXRoIHRhcmdldHMgb25lIGNyZWF0dXJlIGl0IGNhbiBzZWUgd2l0aGluIDMwIGZ0LiBvZiBpdC4gVGhlIHRhcmdldCBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxNCBXaXNkb20gc2F2aW5nIHRocm93IG9yIGJlIG1hZ2ljYWxseSBjaGFybWVkIGJ5IHRoZSBhYm9sZXRoIHVudGlsIHRoZSBhYm9sZXRoIGRpZXMgb3IgdW50aWwgaXQgaXMgb24gYSBkaWZmZXJlbnQgcGxhbmUgb2YgZXhpc3RlbmNlIGZyb20gdGhlIHRhcmdldC4gVGhlIGNoYXJtZWQgdGFyZ2V0IGlzIHVuZGVyIHRoZSBhYm9sZXRoJ3MgY29udHJvbCBhbmQgY2FuJ3QgdGFrZSByZWFjdGlvbnMsIGFuZCB0aGUgYWJvbGV0aCBhbmQgdGhlIHRhcmdldCBjYW4gY29tbXVuaWNhdGUgdGVsZXBhdGhpY2FsbHkgd2l0aCBlYWNoIG90aGVyIG92ZXIgYW55IGRpc3RhbmNlLlxcbldoZW5ldmVyIHRoZSBjaGFybWVkIHRhcmdldCB0YWtlcyBkYW1hZ2UsIHRoZSB0YXJnZXQgY2FuIHJlcGVhdCB0aGUgc2F2aW5nIHRocm93LiBPbiBhIHN1Y2Nlc3MsIHRoZSBlZmZlY3QgZW5kcy4gTm8gbW9yZSB0aGFuIG9uY2UgZXZlcnkgMjQgaG91cnMsIHRoZSB0YXJnZXQgY2FuIGFsc28gcmVwZWF0IHRoZSBzYXZpbmcgdGhyb3cgd2hlbiBpdCBpcyBhdCBsZWFzdCAxIG1pbGUgYXdheSBmcm9tIHRoZSBhYm9sZXRoLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0bGVnZW5kYXJ5X2FjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJEZXRlY3RcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgYWJvbGV0aCBtYWtlcyBhIFdpc2RvbSAoUGVyY2VwdGlvbikgY2hlY2suXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiVGFpbCBTd2lwZVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBhYm9sZXRoIG1ha2VzIG9uZSB0YWlsIGF0dGFjay5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJQc3ljaGljIERyYWluIChDb3N0cyAyIEFjdGlvbnMpXCIsXG5cdFx0XHRcdGRlc2M6IFwiT25lIGNyZWF0dXJlIGNoYXJtZWQgYnkgdGhlIGFib2xldGggdGFrZXMgMTAgKDNkNikgcHN5Y2hpYyBkYW1hZ2UsIGFuZCB0aGUgYWJvbGV0aCByZWdhaW5zIGhpdCBwb2ludHMgZXF1YWwgdG8gdGhlIGRhbWFnZSB0aGUgY3JlYXR1cmUgdGFrZXMuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiQWNvbHl0ZVwiLFxuXHRcdHNpemU6IFwiTWVkaXVtXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwiaHVtYW5vaWRcIixcblx0XHRzdWJ0eXBlOiBcImFueSByYWNlXCIsXG5cdFx0YWxpZ25tZW50OiBcImFueSBhbGlnbm1lbnRcIixcblx0XHRhYzogMTAsXG5cdFx0aHA6IDksXG5cdFx0aGl0X2RpY2U6IFwiMmQ4XCIsXG5cdFx0c3BlZWQ6IFwiMzAgZnQuXCIsXG5cdFx0c3RhdHM6IFsxMCwgMTAsIDEwLCAxMCwgMTQsIDExXSxcblx0XHRza2lsbHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG1lZGljaW5lOiA0LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0cmVsaWdpb246IDIsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0c2Vuc2VzOiBcInBhc3NpdmUgUGVyY2VwdGlvbiAxMlwiLFxuXHRcdGxhbmd1YWdlczogXCJhbnkgb25lIGxhbmd1YWdlICh1c3VhbGx5IENvbW1vbilcIixcblx0XHRjcjogXCIxLzRcIixcblx0XHR0cmFpdHM6IFtdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJDbHViXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzIgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAyICgxZDQpIGJsdWRnZW9uaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAyLFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxZDRcIixcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRzcGVsbHM6IFtcblx0XHRcdFwiVGhlIGFjb2x5dGUgaXMgYSAxc3QtbGV2ZWwgc3BlbGxjYXN0ZXIuIEl0cyBzcGVsbGNhc3RpbmcgYWJpbGl0eSBpcyBXaXNkb20gKHNwZWxsIHNhdmUgREMgMTIsICs0IHRvIGhpdCB3aXRoIHNwZWxsIGF0dGFja3MpLiBUaGUgYWNvbHl0ZSBoYXMgZm9sbG93aW5nIGNsZXJpYyBzcGVsbHMgcHJlcGFyZWQ6XCIsXG5cdFx0XHR7XG5cdFx0XHRcdFwiQ2FudHJpcHMgKGF0IHdpbGwpXCI6IFwibGlnaHQsIHNhY3JlZCBmbGFtZSwgdGhhdW1hdHVyZ3lcIixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdFwiMXN0IGxldmVsICgzIHNsb3RzKVwiOiBcImJsZXNzLCBjdXJlIHdvdW5kcywgc2FuY3R1YXJ5XCIsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIkFkdWx0IEJsYWNrIERyYWdvblwiLFxuXHRcdHNpemU6IFwiSHVnZVwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcImRyYWdvblwiLFxuXHRcdHN1YnR5cGU6IFwiXCIsXG5cdFx0YWxpZ25tZW50OiBcImNoYW90aWMgZXZpbFwiLFxuXHRcdGFjOiAxOSxcblx0XHRocDogMTk1LFxuXHRcdGhpdF9kaWNlOiBcIjE3ZDEyXCIsXG5cdFx0c3BlZWQ6IFwiNDAgZnQuLCBmbHkgODAgZnQuLCBzd2ltIDQwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbMjMsIDE0LCAyMSwgMTQsIDEzLCAxN10sXG5cdFx0c2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0ZGV4dGVyaXR5OiA3LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0Y29uc3RpdHV0aW9uOiAxMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHdpc2RvbTogNixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdGNoYXJpc21hOiA4LFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdHNraWxsc2F2ZXM6IFtcblx0XHRcdG51bGwsXG5cdFx0XHR7XG5cdFx0XHRcdHBlcmNlcHRpb246IDExLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0c3RlYWx0aDogNyxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJhY2lkXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0c2Vuc2VzOiBcImJsaW5kc2lnaHQgNjAgZnQuLCBkYXJrdmlzaW9uIDEyMCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAyMVwiLFxuXHRcdGxhbmd1YWdlczogXCJDb21tb24sIERyYWNvbmljXCIsXG5cdFx0Y3I6IFwiMTRcIixcblx0XHR0cmFpdHM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJBbXBoaWJpb3VzXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGRyYWdvbiBjYW4gYnJlYXRoZSBhaXIgYW5kIHdhdGVyLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkxlZ2VuZGFyeSBSZXNpc3RhbmNlICgzL0RheSlcIixcblx0XHRcdFx0ZGVzYzogXCJJZiB0aGUgZHJhZ29uIGZhaWxzIGEgc2F2aW5nIHRocm93LCBpdCBjYW4gY2hvb3NlIHRvIHN1Y2NlZWQgaW5zdGVhZC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJNdWx0aWF0dGFja1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBkcmFnb24gY2FuIHVzZSBpdHMgRnJpZ2h0ZnVsIFByZXNlbmNlLiBJdCB0aGVuIG1ha2VzIHRocmVlIGF0dGFja3M6IG9uZSB3aXRoIGl0cyBiaXRlIGFuZCB0d28gd2l0aCBpdHMgY2xhd3MuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQml0ZVwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICsxMSB0byBoaXQsIHJlYWNoIDEwIGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxNyAoMmQxMCArIDYpIHBpZXJjaW5nIGRhbWFnZSBwbHVzIDQgKDFkOCkgYWNpZCBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMTEsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjJkMTAgKyAxZDhcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiA2LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJDbGF3XCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzExIHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTMgKDJkNiArIDYpIHNsYXNoaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAxMSxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMmQ2XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogNixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiVGFpbFwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICsxMSB0byBoaXQsIHJlYWNoIDE1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxNSAoMmQ4ICsgNikgYmx1ZGdlb25pbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDExLFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIyZDhcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiA2LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJGcmlnaHRmdWwgUHJlc2VuY2VcIixcblx0XHRcdFx0ZGVzYzogXCJFYWNoIGNyZWF0dXJlIG9mIHRoZSBkcmFnb24ncyBjaG9pY2UgdGhhdCBpcyB3aXRoaW4gMTIwIGZlZXQgb2YgdGhlIGRyYWdvbiBhbmQgYXdhcmUgb2YgaXQgbXVzdCBzdWNjZWVkIG9uIGEgREMgMTYgV2lzZG9tIHNhdmluZyB0aHJvdyBvciBiZWNvbWUgZnJpZ2h0ZW5lZCBmb3IgMSBtaW51dGUuIEEgY3JlYXR1cmUgY2FuIHJlcGVhdCB0aGUgc2F2aW5nIHRocm93IGF0IHRoZSBlbmQgb2YgZWFjaCBvZiBpdHMgdHVybnMsIGVuZGluZyB0aGUgZWZmZWN0IG9uIGl0c2VsZiBvbiBhIHN1Y2Nlc3MuIElmIGEgY3JlYXR1cmUncyBzYXZpbmcgdGhyb3cgaXMgc3VjY2Vzc2Z1bCBvciB0aGUgZWZmZWN0IGVuZHMgZm9yIGl0LCB0aGUgY3JlYXR1cmUgaXMgaW1tdW5lIHRvIHRoZSBkcmFnb24ncyBGcmlnaHRmdWwgUHJlc2VuY2UgZm9yIHRoZSBuZXh0IDI0IGhvdXJzLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkFjaWQgQnJlYXRoIChSZWNoYXJnZSA1LTYpXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGRyYWdvbiBleGhhbGVzIGFjaWQgaW4gYSA2MC1mb290IGxpbmUgdGhhdCBpcyA1IGZlZXQgd2lkZS4gRWFjaCBjcmVhdHVyZSBpbiB0aGF0IGxpbmUgbXVzdCBtYWtlIGEgREMgMTggRGV4dGVyaXR5IHNhdmluZyB0aHJvdywgdGFraW5nIDU0ICgxMmQ4KSBhY2lkIGRhbWFnZSBvbiBhIGZhaWxlZCBzYXZlLCBvciBoYWxmIGFzIG11Y2ggZGFtYWdlIG9uIGEgc3VjY2Vzc2Z1bCBvbmUuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMTJkOFwiLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGxlZ2VuZGFyeV9hY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiRGV0ZWN0XCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGRyYWdvbiBtYWtlcyBhIFdpc2RvbSAoUGVyY2VwdGlvbikgY2hlY2suXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiVGFpbCBBdHRhY2tcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgZHJhZ29uIG1ha2VzIGEgdGFpbCBhdHRhY2suXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiV2luZyBBdHRhY2sgKENvc3RzIDIgQWN0aW9ucylcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgZHJhZ29uIGJlYXRzIGl0cyB3aW5ncy4gRWFjaCBjcmVhdHVyZSB3aXRoaW4gMTAgZnQuIG9mIHRoZSBkcmFnb24gbXVzdCBzdWNjZWVkIG9uIGEgREMgMTkgRGV4dGVyaXR5IHNhdmluZyB0aHJvdyBvciB0YWtlIDEzICgyZDYgKyA2KSBibHVkZ2VvbmluZyBkYW1hZ2UgYW5kIGJlIGtub2NrZWQgcHJvbmUuIFRoZSBkcmFnb24gY2FuIHRoZW4gZmx5IHVwIHRvIGhhbGYgaXRzIGZseWluZyBzcGVlZC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJBZHVsdCBCbHVlIERyYWNvbGljaFwiLFxuXHRcdHNpemU6IFwiSHVnZVwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcInVuZGVhZFwiLFxuXHRcdHN1YnR5cGU6IFwiXCIsXG5cdFx0YWxpZ25tZW50OiBcImxhd2Z1bCBldmlsXCIsXG5cdFx0YWM6IDE5LFxuXHRcdGhwOiAyMjUsXG5cdFx0aGl0X2RpY2U6IFwiMThkMTJcIixcblx0XHRzcGVlZDogXCI0MCBmdC4sIGJ1cnJvdyAzMCBmdC4sIGZseSA4MCBmdC5cIixcblx0XHRzdGF0czogWzI1LCAxMCwgMjMsIDE2LCAxNSwgMTldLFxuXHRcdHNraWxsc2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0cGVyY2VwdGlvbjogMTIsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwibmVjcm90aWNcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJsaWdodG5pbmcsIHBvaXNvblwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOlxuXHRcdFx0XCJjaGFybWVkLCBleGhhdXN0aW9uLCBmcmlnaHRlbmVkLCBwYXJhbHl6ZWQsIHBvaXNvbmVkXCIsXG5cdFx0c2Vuc2VzOiBcImJsaW5kc2lnaHQgNjAgZnQuLCBkYXJrdmlzaW9uIDEyMCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAyMlwiLFxuXHRcdGxhbmd1YWdlczogXCJDb21tb24sIERyYWNvbmljXCIsXG5cdFx0Y3I6IFwiMTdcIixcblx0XHR0cmFpdHM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJMZWdlbmRhcnkgUmVzaXN0YW5jZSAoMy9EYXkpXCIsXG5cdFx0XHRcdGRlc2M6IFwiSWYgdGhlIGRyYWNvbGljaCBmYWlscyBhIHNhdmluZyB0aHJvdywgaXQgY2FuIGNob29zZSB0byBzdWNjZWVkIGluc3RlYWQuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTWFnaWMgUmVzaXN0YW5jZVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBkcmFjb2xpY2ggaGFzIGFkdmFudGFnZSBvbiBzYXZpbmcgdGhyb3dzIGFnYWluc3Qgc3BlbGxzIGFuZCBvdGhlciBtYWdpY2FsIGVmZmVjdHMuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgZHJhY29saWNoIGNhbiB1c2UgaXRzIEZyaWdodGZ1bCBQcmVzZW5jZS4gSXQgdGhlbiBtYWtlcyB0aHJlZSBhdHRhY2tzOiBvbmUgd2l0aCBpdHMgYml0ZSBhbmQgdHdvIHdpdGggaXRzIGNsYXdzLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkJpdGVcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMTIgdG8gaGl0LCByZWFjaCAxMCBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTggKDJkMTAgKyA3KSBwaWVyY2luZyBkYW1hZ2UgcGx1cyA1ICgxZDEwKSBsaWdodG5pbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDEyLFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIyZDEwICsgMWQxMFwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDcsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkNsYXdcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMTIgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxNCAoMmQ2ICsgNykgc2xhc2hpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDEyLFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIyZDZcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiA3LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJUYWlsXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzEyIHRvIGhpdCwgcmVhY2ggMTUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDE2ICgyZDggKyA3KSBibHVkZ2VvbmluZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMTIsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjJkOFwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDcsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkZyaWdodGZ1bCBQcmVzZW5jZVwiLFxuXHRcdFx0XHRkZXNjOiBcIkVhY2ggY3JlYXR1cmUgb2YgdGhlIGRyYWNvbGljaCdzIGNob2ljZSB0aGF0IGlzIHdpdGhpbiAxMjAgZmVldCBvZiB0aGUgZHJhY29saWNoIGFuZCBhd2FyZSBvZiBpdCBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxOCBXaXNkb20gc2F2aW5nIHRocm93IG9yIGJlY29tZSBmcmlnaHRlbmVkIGZvciAxIG1pbnV0ZS4gQSBjcmVhdHVyZSBjYW4gcmVwZWF0IHRoZSBzYXZpbmcgdGhyb3cgYXQgdGhlIGVuZCBvZiBlYWNoIG9mIGl0cyB0dXJucywgZW5kaW5nIHRoZSBlZmZlY3Qgb24gaXRzZWxmIG9uIGEgc3VjY2Vzcy4gSWYgYSBjcmVhdHVyZSdzIHNhdmluZyB0aHJvdyBpcyBzdWNjZXNzZnVsIG9yIHRoZSBlZmZlY3QgZW5kcyBmb3IgaXQsIHRoZSBjcmVhdHVyZSBpcyBpbW11bmUgdG8gdGhlIGRyYWNvbGljaCdzIEZyaWdodGZ1bCBQcmVzZW5jZSBmb3IgdGhlIG5leHQgMjQgaG91cnMuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTGlnaHRuaW5nIEJyZWF0aCAoUmVjaGFyZ2UgNS02KVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBkcmFjb2xpY2ggZXhoYWxlcyBsaWdodG5pbmcgaW4gYSA5MC1mb290IGxpbmUgdGhhdCBpcyA1IGZlZXQgd2lkZS4gRWFjaCBjcmVhdHVyZSBpbiB0aGF0IGxpbmUgbXVzdCBtYWtlIGEgREMgMjAgRGV4dGVyaXR5IHNhdmluZyB0aHJvdywgdGFraW5nIDY2ICgxMmQxMCkgbGlnaHRuaW5nIGRhbWFnZSBvbiBhIGZhaWxlZCBzYXZlLCBvciBoYWxmIGFzIG11Y2ggZGFtYWdlIG9uIGEgc3VjY2Vzc2Z1bCBvbmUuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMTJkMTBcIixcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRsZWdlbmRhcnlfYWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkRldGVjdFwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBkcmFjb2xpY2ggbWFrZXMgYSBXaXNkb20gKFBlcmNlcHRpb24pIGNoZWNrLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlRhaWwgQXR0YWNrXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGRyYWNvbGljaCBtYWtlcyBhIHRhaWwgYXR0YWNrLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIldpbmcgQXR0YWNrIChDb3N0cyAyIEFjdGlvbnMpXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGRyYWNvbGljaCBiZWF0cyBpdHMgdGF0dGVyZWQgd2luZ3MuIEVhY2ggY3JlYXR1cmUgd2l0aGluIDEwIGZ0LiBvZiB0aGUgZHJhY29saWNoIG11c3Qgc3VjY2VlZCBvbiBhIERDIDIxIERleHRlcml0eSBzYXZpbmcgdGhyb3cgb3IgdGFrZSAxNCAoMmQ2ICsgNykgYmx1ZGdlb25pbmcgZGFtYWdlIGFuZCBiZSBrbm9ja2VkIHByb25lLiBBZnRlciBiZWF0aW5nIGl0cyB3aW5ncyB0aGlzIHdheSwgdGhlIGRyYWNvbGljaCBjYW4gZmx5IHVwIHRvIGhhbGYgaXRzIGZseWluZyBzcGVlZC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJBZHVsdCBCbHVlIERyYWdvblwiLFxuXHRcdHNpemU6IFwiSHVnZVwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcImRyYWdvblwiLFxuXHRcdHN1YnR5cGU6IFwiXCIsXG5cdFx0YWxpZ25tZW50OiBcImxhd2Z1bCBldmlsXCIsXG5cdFx0YWM6IDE5LFxuXHRcdGhwOiAyMjUsXG5cdFx0aGl0X2RpY2U6IFwiMThkMTJcIixcblx0XHRzcGVlZDogXCI0MCBmdC4sIGJ1cnJvdyAzMCBmdC4sIGZseSA4MCBmdC5cIixcblx0XHRzdGF0czogWzI1LCAxMCwgMjMsIDE2LCAxNSwgMTldLFxuXHRcdHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdGRleHRlcml0eTogNSxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdGNvbnN0aXR1dGlvbjogMTEsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHR3aXNkb206IDcsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRjaGFyaXNtYTogOSxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRza2lsbHNhdmVzOiBbXG5cdFx0XHRudWxsLFxuXHRcdFx0e1xuXHRcdFx0XHRwZXJjZXB0aW9uOiAxMixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHN0ZWFsdGg6IDUsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwibGlnaHRuaW5nXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0c2Vuc2VzOiBcImJsaW5kc2lnaHQgNjAgZnQuLCBkYXJrdmlzaW9uIDEyMCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAyMlwiLFxuXHRcdGxhbmd1YWdlczogXCJDb21tb24sIERyYWNvbmljXCIsXG5cdFx0Y3I6IFwiMTZcIixcblx0XHR0cmFpdHM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJMZWdlbmRhcnkgUmVzaXN0YW5jZSAoMy9EYXkpXCIsXG5cdFx0XHRcdGRlc2M6IFwiSWYgdGhlIGRyYWdvbiBmYWlscyBhIHNhdmluZyB0aHJvdywgaXQgY2FuIGNob29zZSB0byBzdWNjZWVkIGluc3RlYWQuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgZHJhZ29uIGNhbiB1c2UgaXRzIEZyaWdodGZ1bCBQcmVzZW5jZS4gSXQgdGhlbiBtYWtlcyB0aHJlZSBhdHRhY2tzOiBvbmUgd2l0aCBpdHMgYml0ZSBhbmQgdHdvIHdpdGggaXRzIGNsYXdzLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkJpdGVcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMTIgdG8gaGl0LCByZWFjaCAxMCBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTggKDJkMTAgKyA3KSBwaWVyY2luZyBkYW1hZ2UgcGx1cyA1ICgxZDEwKSBsaWdodG5pbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDEyLFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIyZDEwICsgMWQxMFwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDcsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkNsYXdcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMTIgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxNCAoMmQ2ICsgNykgc2xhc2hpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDEyLFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIyZDZcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiA3LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJUYWlsXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzEyIHRvIGhpdCwgcmVhY2ggMTUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDE2ICgyZDggKyA3KSBibHVkZ2VvbmluZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMTIsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjJkOFwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDcsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkZyaWdodGZ1bCBQcmVzZW5jZVwiLFxuXHRcdFx0XHRkZXNjOiBcIkVhY2ggY3JlYXR1cmUgb2YgdGhlIGRyYWdvbidzIGNob2ljZSB0aGF0IGlzIHdpdGhpbiAxMjAgZnQuIG9mIHRoZSBkcmFnb24gYW5kIGF3YXJlIG9mIGl0IG11c3Qgc3VjY2VlZCBvbiBhIERDIDE3IFdpc2RvbSBzYXZpbmcgdGhyb3cgb3IgYmVjb21lIGZyaWdodGVuZWQgZm9yIDEgbWludXRlLiBBIGNyZWF0dXJlIGNhbiByZXBlYXQgdGhlIHNhdmluZyB0aHJvdyBhdCB0aGUgZW5kIG9mIGVhY2ggb2YgaXRzIHR1cm5zLCBlbmRpbmcgdGhlIGVmZmVjdCBvbiBpdHNlbGYgb24gYSBzdWNjZXNzLiBJZiBhIGNyZWF0dXJlJ3Mgc2F2aW5nIHRocm93IGlzIHN1Y2Nlc3NmdWwgb3IgdGhlIGVmZmVjdCBlbmRzIGZvciBpdCwgdGhlIGNyZWF0dXJlIGlzIGltbXVuZSB0byB0aGUgZHJhZ29uJ3MgRnJpZ2h0ZnVsIFByZXNlbmNlIGZvciB0aGUgbmV4dCAyNCBob3Vycy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJMaWdodG5pbmcgQnJlYXRoIChSZWNoYXJnZSA1LTYpXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGRyYWdvbiBleGhhbGVzIGxpZ2h0bmluZyBpbiBhIDkwLWZvb3QgbGluZSB0aGF0IGlzIDUgZnQuIHdpZGUuIEVhY2ggY3JlYXR1cmUgaW4gdGhhdCBsaW5lIG11c3QgbWFrZSBhIERDIDE5IERleHRlcml0eSBzYXZpbmcgdGhyb3csIHRha2luZyA2NiAoMTJkMTApIGxpZ2h0bmluZyBkYW1hZ2Ugb24gYSBmYWlsZWQgc2F2ZSwgb3IgaGFsZiBhcyBtdWNoIGRhbWFnZSBvbiBhIHN1Y2Nlc3NmdWwgb25lLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjEyZDEwXCIsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0bGVnZW5kYXJ5X2FjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJEZXRlY3RcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgZHJhZ29uIG1ha2VzIGEgV2lzZG9tIChQZXJjZXB0aW9uKSBjaGVjay5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJUYWlsIEF0dGFja1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBkcmFnb24gbWFrZXMgYSB0YWlsIGF0dGFjay5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJXaW5nIEF0dGFjayAoQ29zdHMgMiBBY3Rpb25zKVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBkcmFnb24gYmVhdHMgaXRzIHdpbmdzLiBFYWNoIGNyZWF0dXJlIHdpdGhpbiAxMCBmdC4gb2YgdGhlIGRyYWdvbiBtdXN0IHN1Y2NlZWQgb24gYSBEQyAyMCBEZXh0ZXJpdHkgc2F2aW5nIHRocm93IG9yIHRha2UgMTQgKDJkNiArIDcpIGJsdWRnZW9uaW5nIGRhbWFnZSBhbmQgYmUga25vY2tlZCBwcm9uZS4gVGhlIGRyYWdvbiBjYW4gdGhlbiBmbHkgdXAgdG8gaGFsZiBpdHMgZmx5aW5nIHNwZWVkLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIkFkdWx0IEJyYXNzIERyYWdvblwiLFxuXHRcdHNpemU6IFwiSHVnZVwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcImRyYWdvblwiLFxuXHRcdHN1YnR5cGU6IFwiXCIsXG5cdFx0YWxpZ25tZW50OiBcImNoYW90aWMgZ29vZFwiLFxuXHRcdGFjOiAxOCxcblx0XHRocDogMTcyLFxuXHRcdGhpdF9kaWNlOiBcIjE1ZDEyXCIsXG5cdFx0c3BlZWQ6IFwiNDAgZnQuLCBidXJyb3cgNDAgZnQuLCBmbHkgODAgZnQuXCIsXG5cdFx0c3RhdHM6IFsyMywgMTAsIDIxLCAxNCwgMTMsIDE3XSxcblx0XHRzYXZlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRkZXh0ZXJpdHk6IDUsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRjb25zdGl0dXRpb246IDEwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0d2lzZG9tOiA2LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0Y2hhcmlzbWE6IDgsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0c2tpbGxzYXZlczogW1xuXHRcdFx0bnVsbCxcblx0XHRcdHtcblx0XHRcdFx0aGlzdG9yeTogNyxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHBlcnN1YXNpb246IDgsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRwZXJjZXB0aW9uOiAxMSxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHN0ZWFsdGg6IDUsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiZmlyZVwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuXHRcdHNlbnNlczogXCJibGluZHNpZ2h0IDYwIGZ0LiwgZGFya3Zpc2lvbiAxMjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMjFcIixcblx0XHRsYW5ndWFnZXM6IFwiQ29tbW9uLCBEcmFjb25pY1wiLFxuXHRcdGNyOiBcIjEzXCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTGVnZW5kYXJ5IFJlc2lzdGFuY2UgKDMvRGF5KVwiLFxuXHRcdFx0XHRkZXNjOiBcIklmIHRoZSBkcmFnb24gZmFpbHMgYSBzYXZpbmcgdGhyb3csIGl0IGNhbiBjaG9vc2UgdG8gc3VjY2VlZCBpbnN0ZWFkLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGRyYWdvbiBjYW4gdXNlIGl0cyBGcmlnaHRmdWwgUHJlc2VuY2UuIEl0IHRoZW4gbWFrZXMgdGhyZWUgYXR0YWNrczogb25lIHdpdGggaXRzIGJpdGUgYW5kIHR3byB3aXRoIGl0cyBjbGF3cy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJCaXRlXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzExIHRvIGhpdCwgcmVhY2gsLjAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDE3ICgyZDEwICsgNikgcGllcmNpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDExLFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIyZDEwXCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogNixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQ2xhd1wiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICsxMSB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDEzICgyZDYgKyA2KSBzbGFzaGluZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMTEsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjJkNlwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDYsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlRhaWxcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMTEgdG8gaGl0LCByZWFjaCAxNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTUgKDJkOCArIDYpIGJsdWRnZW9uaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAxMSxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMmQ4XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogNixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiRnJpZ2h0ZnVsIFByZXNlbmNlXCIsXG5cdFx0XHRcdGRlc2M6IFwiRWFjaCBjcmVhdHVyZSBvZiB0aGUgZHJhZ29uJ3MgY2hvaWNlIHRoYXQgaXMgd2l0aGluIDEyMCBmZWV0IG9mIHRoZSBkcmFnb24gYW5kIGF3YXJlIG9mIGl0IG11c3Qgc3VjY2VlZCBvbiBhIERDIDE2IFdpc2RvbSBzYXZpbmcgdGhyb3cgb3IgYmVjb21lIGZyaWdodGVuZWQgZm9yIDEgbWludXRlLiBBIGNyZWF0dXJlIGNhbiByZXBlYXQgdGhlIHNhdmluZyB0aHJvdyBhdCB0aGUgZW5kIG9mIGVhY2ggb2YgaXRzIHR1cm5zLCBlbmRpbmcgdGhlIGVmZmVjdCBvbiBpdHNlbGYgb24gYSBzdWNjZXNzLiBJZiBhIGNyZWF0dXJlJ3Mgc2F2aW5nIHRocm93IGlzIHN1Y2Nlc3NmdWwgb3IgdGhlIGVmZmVjdCBlbmRzIGZvciBpdCwgdGhlIGNyZWF0dXJlIGlzIGltbXVuZSB0byB0aGUgZHJhZ29uJ3MgRnJpZ2h0ZnVsIFByZXNlbmNlIGZvciB0aGUgbmV4dCAyNCBob3Vycy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJCcmVhdGggV2VhcG9ucyAoUmVjaGFyZ2UgNS02KVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBkcmFnb24gdXNlcyBvbmUgb2YgdGhlIGZvbGxvd2luZyBicmVhdGggd2VhcG9ucy5cXG5GaXJlIEJyZWF0aC4gVGhlIGRyYWdvbiBleGhhbGVzIGZpcmUgaW4gYW4gNjAtZm9vdCBsaW5lIHRoYXQgaXMgNSBmZWV0IHdpZGUuIEVhY2ggY3JlYXR1cmUgaW4gdGhhdCBsaW5lIG11c3QgbWFrZSBhIERDIDE4IERleHRlcml0eSBzYXZpbmcgdGhyb3csIHRha2luZyA0NSAoMTNkNikgZmlyZSBkYW1hZ2Ugb24gYSBmYWlsZWQgc2F2ZSwgb3IgaGFsZiBhcyBtdWNoIGRhbWFnZSBvbiBhIHN1Y2Nlc3NmdWwgb25lLlxcblNsZWVwIEJyZWF0aC4gVGhlIGRyYWdvbiBleGhhbGVzIHNsZWVwIGdhcyBpbiBhIDYwLWZvb3QgY29uZS4gRWFjaCBjcmVhdHVyZSBpbiB0aGF0IGFyZWEgbXVzdCBzdWNjZWVkIG9uIGEgREMgMTggQ29uc3RpdHV0aW9uIHNhdmluZyB0aHJvdyBvciBmYWxsIHVuY29uc2Npb3VzIGZvciAxMCBtaW51dGVzLiBUaGlzIGVmZmVjdCBlbmRzIGZvciBhIGNyZWF0dXJlIGlmIHRoZSBjcmVhdHVyZSB0YWtlcyBkYW1hZ2Ugb3Igc29tZW9uZSB1c2VzIGFuIGFjdGlvbiB0byB3YWtlIGl0LlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjEzZDZcIixcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiQWR1bHQgQnJvbnplIERyYWdvblwiLFxuXHRcdHNpemU6IFwiSHVnZVwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcImRyYWdvblwiLFxuXHRcdHN1YnR5cGU6IFwiXCIsXG5cdFx0YWxpZ25tZW50OiBcImxhd2Z1bCBnb29kXCIsXG5cdFx0YWM6IDE5LFxuXHRcdGhwOiAyMTIsXG5cdFx0aGl0X2RpY2U6IFwiMTdkMTJcIixcblx0XHRzcGVlZDogXCI0MCBmdC4sIGZseSA4MCBmdC4sIHN3aW0gNDAgZnQuXCIsXG5cdFx0c3RhdHM6IFsyNSwgMTAsIDIzLCAxNiwgMTUsIDE5XSxcblx0XHRzYXZlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRkZXh0ZXJpdHk6IDUsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRjb25zdGl0dXRpb246IDExLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0d2lzZG9tOiA3LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0Y2hhcmlzbWE6IDksXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0c2tpbGxzYXZlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRpbnNpZ2h0OiA3LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0cGVyY2VwdGlvbjogMTIsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRzdGVhbHRoOiA1LFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuXHRcdGRhbWFnZV9pbW11bml0aWVzOiBcImxpZ2h0bmluZ1wiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuXHRcdHNlbnNlczogXCJibGluZHNpZ2h0IDYwIGZ0LiwgZGFya3Zpc2lvbiAxMjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMjJcIixcblx0XHRsYW5ndWFnZXM6IFwiQ29tbW9uLCBEcmFjb25pY1wiLFxuXHRcdGNyOiBcIjE1XCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQW1waGliaW91c1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBkcmFnb24gY2FuIGJyZWF0aGUgYWlyIGFuZCB3YXRlci5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJMZWdlbmRhcnkgUmVzaXN0YW5jZSAoMy9EYXkpXCIsXG5cdFx0XHRcdGRlc2M6IFwiSWYgdGhlIGRyYWdvbiBmYWlscyBhIHNhdmluZyB0aHJvdywgaXQgY2FuIGNob29zZSB0byBzdWNjZWVkIGluc3RlYWQuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgZHJhZ29uIGNhbiB1c2UgaXRzIEZyaWdodGZ1bCBQcmVzZW5jZS4gSXQgdGhlbiBtYWtlcyB0aHJlZSBhdHRhY2tzOiBvbmUgd2l0aCBpdHMgYml0ZSBhbmQgdHdvIHdpdGggaXRzIGNsYXdzLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkJpdGVcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMTIgdG8gaGl0LCByZWFjaCAxMCBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTggKDJkMTAgKyA3KSBwaWVyY2luZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMTIsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjJkMTBcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiA3LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJDbGF3XCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzEyIHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTQgKDJkNiArIDcpIHNsYXNoaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAxMixcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMmQ2XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogNyxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiVGFpbFwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICsxMiB0byBoaXQsIHJlYWNoIDE1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxNiAoMmQ4ICsgNykgYmx1ZGdlb25pbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDEyLFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIyZDhcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiA3LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJGcmlnaHRmdWwgUHJlc2VuY2VcIixcblx0XHRcdFx0ZGVzYzogXCJFYWNoIGNyZWF0dXJlIG9mIHRoZSBkcmFnb24ncyBjaG9pY2UgdGhhdCBpcyB3aXRoaW4gMTIwIGZlZXQgb2YgdGhlIGRyYWdvbiBhbmQgYXdhcmUgb2YgaXQgbXVzdCBzdWNjZWVkIG9uIGEgREMgMTcgV2lzZG9tIHNhdmluZyB0aHJvdyBvciBiZWNvbWUgZnJpZ2h0ZW5lZCBmb3IgMSBtaW51dGUuIEEgY3JlYXR1cmUgY2FuIHJlcGVhdCB0aGUgc2F2aW5nIHRocm93IGF0IHRoZSBlbmQgb2YgZWFjaCBvZiBpdHMgdHVybnMsIGVuZGluZyB0aGUgZWZmZWN0IG9uIGl0c2VsZiBvbiBhIHN1Y2Nlc3MuIElmIGEgY3JlYXR1cmUncyBzYXZpbmcgdGhyb3cgaXMgc3VjY2Vzc2Z1bCBvciB0aGUgZWZmZWN0IGVuZHMgZm9yIGl0LCB0aGUgY3JlYXR1cmUgaXMgaW1tdW5lIHRvIHRoZSBkcmFnb24ncyBGcmlnaHRmdWwgUHJlc2VuY2UgZm9yIHRoZSBuZXh0IDI0IGhvdXJzLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkJyZWF0aCBXZWFwb25zIChSZWNoYXJnZSA1LTYpXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGRyYWdvbiB1c2VzIG9uZSBvZiB0aGUgZm9sbG93aW5nIGJyZWF0aCB3ZWFwb25zLlxcbkxpZ2h0bmluZyBCcmVhdGguIFRoZSBkcmFnb24gZXhoYWxlcyBsaWdodG5pbmcgaW4gYSA5MC1mb290IGxpbmUgdGhhdCBpcyA1IGZlZXQgd2lkZS4gRWFjaCBjcmVhdHVyZSBpbiB0aGF0IGxpbmUgbXVzdCBtYWtlIGEgREMgMTkgRGV4dGVyaXR5IHNhdmluZyB0aHJvdywgdGFraW5nIDY2ICgxMmQxMCkgbGlnaHRuaW5nIGRhbWFnZSBvbiBhIGZhaWxlZCBzYXZlLCBvciBoYWxmIGFzIG11Y2ggZGFtYWdlIG9uIGEgc3VjY2Vzc2Z1bCBvbmUuXFxuUmVwdWxzaW9uIEJyZWF0aC4gVGhlIGRyYWdvbiBleGhhbGVzIHJlcHVsc2lvbiBlbmVyZ3kgaW4gYSAzMC1mb290IGNvbmUuIEVhY2ggY3JlYXR1cmUgaW4gdGhhdCBhcmVhIG11c3Qgc3VjY2VlZCBvbiBhIERDIDE5IFN0cmVuZ3RoIHNhdmluZyB0aHJvdy4gT24gYSBmYWlsZWQgc2F2ZSwgdGhlIGNyZWF0dXJlIGlzIHB1c2hlZCA2MCBmZWV0IGF3YXkgZnJvbSB0aGUgZHJhZ29uLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjEyZDEwXCIsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0bGVnZW5kYXJ5X2FjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJEZXRlY3RcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgZHJhZ29uIG1ha2VzIGEgV2lzZG9tIChQZXJjZXB0aW9uKSBjaGVjay5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJUYWlsIEF0dGFja1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBkcmFnb24gbWFrZXMgYSB0YWlsIGF0dGFjay5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJXaW5nIEF0dGFjayAoQ29zdHMgMiBBY3Rpb25zKVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBkcmFnb24gYmVhdHMgaXRzIHdpbmdzLiBFYWNoIGNyZWF0dXJlIHdpdGhpbiAxMCBmdC4gb2YgdGhlIGRyYWdvbiBtdXN0IHN1Y2NlZWQgb24gYSBEQyAyMCBEZXh0ZXJpdHkgc2F2aW5nIHRocm93IG9yIHRha2UgMTQgKDJkNiArIDcpIGJsdWRnZW9uaW5nIGRhbWFnZSBhbmQgYmUga25vY2tlZCBwcm9uZS4gVGhlIGRyYWdvbiBjYW4gdGhlbiBmbHkgdXAgdG8gaGFsZiBpdHMgZmx5aW5nIHNwZWVkLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIkFkdWx0IENvcHBlciBEcmFnb25cIixcblx0XHRzaXplOiBcIkh1Z2VcIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJkcmFnb25cIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJjaGFvdGljIGdvb2RcIixcblx0XHRhYzogMTgsXG5cdFx0aHA6IDE4NCxcblx0XHRoaXRfZGljZTogXCIxNmQxMlwiLFxuXHRcdHNwZWVkOiBcIjQwIGZ0LiwgY2xpbWIgNDAgZnQuLCBmbHkgODAgZnQuXCIsXG5cdFx0c3RhdHM6IFsyMywgMTIsIDIxLCAxOCwgMTUsIDE3XSxcblx0XHRzYXZlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRkZXh0ZXJpdHk6IDYsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRjb25zdGl0dXRpb246IDEwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0d2lzZG9tOiA3LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0Y2hhcmlzbWE6IDgsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0c2tpbGxzYXZlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRkZWNlcHRpb246IDgsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRwZXJjZXB0aW9uOiAxMixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHN0ZWFsdGg6IDYsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiYWNpZFwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuXHRcdHNlbnNlczogXCJibGluZHNpZ2h0IDYwIGZ0LiwgZGFya3Zpc2lvbiAxMjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMjJcIixcblx0XHRsYW5ndWFnZXM6IFwiQ29tbW9uLCBEcmFjb25pY1wiLFxuXHRcdGNyOiBcIjE0XCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTGVnZW5kYXJ5IFJlc2lzdGFuY2UgKDMvRGF5KVwiLFxuXHRcdFx0XHRkZXNjOiBcIklmIHRoZSBkcmFnb24gZmFpbHMgYSBzYXZpbmcgdGhyb3csIGl0IGNhbiBjaG9vc2UgdG8gc3VjY2VlZCBpbnN0ZWFkLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGRyYWdvbiBjYW4gdXNlIGl0cyBGcmlnaHRmdWwgUHJlc2VuY2UuIEl0IHRoZW4gbWFrZXMgdGhyZWUgYXR0YWNrczogb25lIHdpdGggaXRzIGJpdGUgYW5kIHR3byB3aXRoIGl0cyBjbGF3cy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJCaXRlXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzExIHRvIGhpdCwgcmVhY2ggMTAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDE3ICgyZDEwICsgNikgcGllcmNpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDExLFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIyZDEwXCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogNixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQ2xhd1wiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICsxMSB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDEzICgyZDYgKyA2KSBzbGFzaGluZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMTEsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjJkNlwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDYsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlRhaWxcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMTEgdG8gaGl0LCByZWFjaCAxNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTUgKDJkOCArIDYpIGJsdWRnZW9uaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAxMSxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMmQ4XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogNixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiRnJpZ2h0ZnVsIFByZXNlbmNlXCIsXG5cdFx0XHRcdGRlc2M6IFwiRWFjaCBjcmVhdHVyZSBvZiB0aGUgZHJhZ29uJ3MgY2hvaWNlIHRoYXQgaXMgd2l0aGluIDEyMCBmZWV0IG9mIHRoZSBkcmFnb24gYW5kIGF3YXJlIG9mIGl0IG11c3Qgc3VjY2VlZCBvbiBhIERDIDE2IFdpc2RvbSBzYXZpbmcgdGhyb3cgb3IgYmVjb21lIGZyaWdodGVuZWQgZm9yIDEgbWludXRlLiBBIGNyZWF0dXJlIGNhbiByZXBlYXQgdGhlIHNhdmluZyB0aHJvdyBhdCB0aGUgZW5kIG9mIGVhY2ggb2YgaXRzIHR1cm5zLCBlbmRpbmcgdGhlIGVmZmVjdCBvbiBpdHNlbGYgb24gYSBzdWNjZXNzLiBJZiBhIGNyZWF0dXJlJ3Mgc2F2aW5nIHRocm93IGlzIHN1Y2Nlc3NmdWwgb3IgdGhlIGVmZmVjdCBlbmRzIGZvciBpdCwgdGhlIGNyZWF0dXJlIGlzIGltbXVuZSB0byB0aGUgZHJhZ29uJ3MgRnJpZ2h0ZnVsIFByZXNlbmNlIGZvciB0aGUgbmV4dCAyNCBob3Vycy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJCcmVhdGggV2VhcG9ucyAoUmVjaGFyZ2UgNS02KVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBkcmFnb24gdXNlcyBvbmUgb2YgdGhlIGZvbGxvd2luZyBicmVhdGggd2VhcG9ucy5cXG5BY2lkIEJyZWF0aC4gVGhlIGRyYWdvbiBleGhhbGVzIGFjaWQgaW4gYW4gNjAtZm9vdCBsaW5lIHRoYXQgaXMgNSBmZWV0IHdpZGUuIEVhY2ggY3JlYXR1cmUgaW4gdGhhdCBsaW5lIG11c3QgbWFrZSBhIERDIDE4IERleHRlcml0eSBzYXZpbmcgdGhyb3csIHRha2luZyA1NCAoMTJkOCkgYWNpZCBkYW1hZ2Ugb24gYSBmYWlsZWQgc2F2ZSwgb3IgaGFsZiBhcyBtdWNoIGRhbWFnZSBvbiBhIHN1Y2Nlc3NmdWwgb25lLlxcblNsb3dpbmcgQnJlYXRoLiBUaGUgZHJhZ29uIGV4aGFsZXMgZ2FzIGluIGEgNjAtZm9vdCBjb25lLiBFYWNoIGNyZWF0dXJlIGluIHRoYXQgYXJlYSBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxOCBDb25zdGl0dXRpb24gc2F2aW5nIHRocm93LiBPbiBhIGZhaWxlZCBzYXZlLCB0aGUgY3JlYXR1cmUgY2FuJ3QgdXNlIHJlYWN0aW9ucywgaXRzIHNwZWVkIGlzIGhhbHZlZCwgYW5kIGl0IGNhbid0IG1ha2UgbW9yZSB0aGFuIG9uZSBhdHRhY2sgb24gaXRzIHR1cm4uIEluIGFkZGl0aW9uLCB0aGUgY3JlYXR1cmUgY2FuIHVzZSBlaXRoZXIgYW4gYWN0aW9uIG9yIGEgYm9udXMgYWN0aW9uIG9uIGl0cyB0dXJuLCBidXQgbm90IGJvdGguIFRoZXNlIGVmZmVjdHMgbGFzdCBmb3IgMSBtaW51dGUuIFRoZSBjcmVhdHVyZSBjYW4gcmVwZWF0IHRoZSBzYXZpbmcgdGhyb3cgYXQgdGhlIGVuZCBvZiBlYWNoIG9mIGl0cyB0dXJucywgZW5kaW5nIHRoZSBlZmZlY3Qgb24gaXRzZWxmIHdpdGggYSBzdWNjZXNzZnVsIHNhdmUuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMTJkOFwiLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGxlZ2VuZGFyeV9hY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiRGV0ZWN0XCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGRyYWdvbiBtYWtlcyBhIFdpc2RvbSAoUGVyY2VwdGlvbikgY2hlY2suXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiVGFpbCBBdHRhY2tcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgZHJhZ29uIG1ha2VzIGEgdGFpbCBhdHRhY2suXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiV2luZyBBdHRhY2sgKENvc3RzIDIgQWN0aW9ucylcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgZHJhZ29uIGJlYXRzIGl0cyB3aW5ncy4gRWFjaCBjcmVhdHVyZSB3aXRoaW4gMTAgZnQuIG9mIHRoZSBkcmFnb24gbXVzdCBzdWNjZWVkIG9uIGEgREMgMTkgRGV4dGVyaXR5IHNhdmluZyB0aHJvdyBvciB0YWtlIDEzICgyZDYgKyA2KSBibHVkZ2VvbmluZyBkYW1hZ2UgYW5kIGJlIGtub2NrZWQgcHJvbmUuIFRoZSBkcmFnb24gY2FuIHRoZW4gZmx5IHVwIHRvIGhhbGYgaXRzIGZseWluZyBzcGVlZC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJBZHVsdCBHb2xkIERyYWdvblwiLFxuXHRcdHNpemU6IFwiSHVnZVwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcImRyYWdvblwiLFxuXHRcdHN1YnR5cGU6IFwiXCIsXG5cdFx0YWxpZ25tZW50OiBcImxhd2Z1bCBnb29kXCIsXG5cdFx0YWM6IDE5LFxuXHRcdGhwOiAyNTYsXG5cdFx0aGl0X2RpY2U6IFwiMTlkMTJcIixcblx0XHRzcGVlZDogXCI0MCBmdC4sIGZseSA4MCBmdC4sIHN3aW0gNDAgZnQuXCIsXG5cdFx0c3RhdHM6IFsyNywgMTQsIDI1LCAxNiwgMTUsIDI0XSxcblx0XHRzYXZlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRkZXh0ZXJpdHk6IDgsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRjb25zdGl0dXRpb246IDEzLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0d2lzZG9tOiA4LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0Y2hhcmlzbWE6IDEzLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdHNraWxsc2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0aW5zaWdodDogOCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHBlcnN1YXNpb246IDEzLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0cGVyY2VwdGlvbjogMTQsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRzdGVhbHRoOiA4LFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuXHRcdGRhbWFnZV9pbW11bml0aWVzOiBcImZpcmVcIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcblx0XHRzZW5zZXM6IFwiYmxpbmRzaWdodCA2MCBmdC4sIGRhcmt2aXNpb24gMTIwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDI0XCIsXG5cdFx0bGFuZ3VhZ2VzOiBcIkNvbW1vbiwgRHJhY29uaWNcIixcblx0XHRjcjogXCIxN1wiLFxuXHRcdHRyYWl0czogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkFtcGhpYmlvdXNcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgZHJhZ29uIGNhbiBicmVhdGhlIGFpciBhbmQgd2F0ZXIuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTGVnZW5kYXJ5IFJlc2lzdGFuY2UgKDMvRGF5KVwiLFxuXHRcdFx0XHRkZXNjOiBcIklmIHRoZSBkcmFnb24gZmFpbHMgYSBzYXZpbmcgdGhyb3csIGl0IGNhbiBjaG9vc2UgdG8gc3VjY2VlZCBpbnN0ZWFkLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGRyYWdvbiBjYW4gdXNlIGl0cyBGcmlnaHRmdWwgUHJlc2VuY2UuIEl0IHRoZW4gbWFrZXMgdGhyZWUgYXR0YWNrczogb25lIHdpdGggaXRzIGJpdGUgYW5kIHR3byB3aXRoIGl0cyBjbGF3cy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJCaXRlXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzE0IHRvIGhpdCwgcmVhY2ggMTAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDE5ICgyZDEwICsgOCkgcGllcmNpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDE0LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIyZDEwXCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogOCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQ2xhd1wiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICsxNCB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDE1ICgyZDYgKyA4KSBzbGFzaGluZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMTQsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjJkNlwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDgsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlRhaWxcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMTQgdG8gaGl0LCByZWFjaCAxNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTcgKDJkOCArIDgpIGJsdWRnZW9uaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAxNCxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMmQ4XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogOCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiRnJpZ2h0ZnVsIFByZXNlbmNlXCIsXG5cdFx0XHRcdGRlc2M6IFwiRWFjaCBjcmVhdHVyZSBvZiB0aGUgZHJhZ29uJ3MgY2hvaWNlIHRoYXQgaXMgd2l0aGluIDEyMCBmZWV0IG9mIHRoZSBkcmFnb24gYW5kIGF3YXJlIG9mIGl0IG11c3Qgc3VjY2VlZCBvbiBhIERDIDIxIFdpc2RvbSBzYXZpbmcgdGhyb3cgb3IgYmVjb21lIGZyaWdodGVuZWQgZm9yIDEgbWludXRlLiBBIGNyZWF0dXJlIGNhbiByZXBlYXQgdGhlIHNhdmluZyB0aHJvdyBhdCB0aGUgZW5kIG9mIGVhY2ggb2YgaXRzIHR1cm5zLCBlbmRpbmcgdGhlIGVmZmVjdCBvbiBpdHNlbGYgb24gYSBzdWNjZXNzLiBJZiBhIGNyZWF0dXJlJ3Mgc2F2aW5nIHRocm93IGlzIHN1Y2Nlc3NmdWwgb3IgdGhlIGVmZmVjdCBlbmRzIGZvciBpdCwgdGhlIGNyZWF0dXJlIGlzIGltbXVuZSB0byB0aGUgZHJhZ29uJ3MgRnJpZ2h0ZnVsIFByZXNlbmNlIGZvciB0aGUgbmV4dCAyNCBob3Vycy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJCcmVhdGggV2VhcG9ucyAoUmVjaGFyZ2UgNS02KVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBkcmFnb24gdXNlcyBvbmUgb2YgdGhlIGZvbGxvd2luZyBicmVhdGggd2VhcG9ucy5cXG5GaXJlIEJyZWF0aC4gVGhlIGRyYWdvbiBleGhhbGVzIGZpcmUgaW4gYSA2MC1mb290IGNvbmUuIEVhY2ggY3JlYXR1cmUgaW4gdGhhdCBhcmVhIG11c3QgbWFrZSBhIERDIDIxIERleHRlcml0eSBzYXZpbmcgdGhyb3csIHRha2luZyA2NiAoMTJkMTApIGZpcmUgZGFtYWdlIG9uIGEgZmFpbGVkIHNhdmUsIG9yIGhhbGYgYXMgbXVjaCBkYW1hZ2Ugb24gYSBzdWNjZXNzZnVsIG9uZS5cXG5XZWFrZW5pbmcgQnJlYXRoLiBUaGUgZHJhZ29uIGV4aGFsZXMgZ2FzIGluIGEgNjAtZm9vdCBjb25lLiBFYWNoIGNyZWF0dXJlIGluIHRoYXQgYXJlYSBtdXN0IHN1Y2NlZWQgb24gYSBEQyAyMSBTdHJlbmd0aCBzYXZpbmcgdGhyb3cgb3IgaGF2ZSBkaXNhZHZhbnRhZ2Ugb24gU3RyZW5ndGgtYmFzZWQgYXR0YWNrIHJvbGxzLCBTdHJlbmd0aCBjaGVja3MsIGFuZCBTdHJlbmd0aCBzYXZpbmcgdGhyb3dzIGZvciAxIG1pbnV0ZS4gQSBjcmVhdHVyZSBjYW4gcmVwZWF0IHRoZSBzYXZpbmcgdGhyb3cgYXQgdGhlIGVuZCBvZiBlYWNoIG9mIGl0cyB0dXJucywgZW5kaW5nIHRoZSBlZmZlY3Qgb24gaXRzZWxmIG9uIGEgc3VjY2Vzcy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxMmQxMFwiLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGxlZ2VuZGFyeV9hY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiRGV0ZWN0XCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGRyYWdvbiBtYWtlcyBhIFdpc2RvbSAoUGVyY2VwdGlvbikgY2hlY2suXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiVGFpbCBBdHRhY2tcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgZHJhZ29uIG1ha2VzIGEgdGFpbCBhdHRhY2suXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiV2luZyBBdHRhY2sgKENvc3RzIDIgQWN0aW9ucylcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgZHJhZ29uIGJlYXRzIGl0cyB3aW5ncy4gRWFjaCBjcmVhdHVyZSB3aXRoaW4gMTAgZnQuIG9mIHRoZSBkcmFnb24gbXVzdCBzdWNjZWVkIG9uIGEgREMgMjIgRGV4dGVyaXR5IHNhdmluZyB0aHJvdyBvciB0YWtlIDE1ICgyZDYgKyA4KSBibHVkZ2VvbmluZyBkYW1hZ2UgYW5kIGJlIGtub2NrZWQgcHJvbmUuIFRoZSBkcmFnb24gY2FuIHRoZW4gZmx5IHVwIHRvIGhhbGYgaXRzIGZseWluZyBzcGVlZC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJBZHVsdCBHcmVlbiBEcmFnb25cIixcblx0XHRzaXplOiBcIkh1Z2VcIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJkcmFnb25cIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJsYXdmdWwgZXZpbFwiLFxuXHRcdGFjOiAxOSxcblx0XHRocDogMjA3LFxuXHRcdGhpdF9kaWNlOiBcIjE4ZDEyXCIsXG5cdFx0c3BlZWQ6IFwiNDAgZnQuLCBmbHkgODAgZnQuLCBzd2ltIDQwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbMjMsIDEyLCAyMSwgMTgsIDE1LCAxN10sXG5cdFx0c2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0ZGV4dGVyaXR5OiA2LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0Y29uc3RpdHV0aW9uOiAxMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHdpc2RvbTogNyxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdGNoYXJpc21hOiA4LFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdHNraWxsc2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0ZGVjZXB0aW9uOiA4LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0aW5zaWdodDogNyxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHBlcnN1YXNpb246IDgsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRwZXJjZXB0aW9uOiAxMixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHN0ZWFsdGg6IDYsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwicG9pc29uXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwicG9pc29uZWRcIixcblx0XHRzZW5zZXM6IFwiYmxpbmRzaWdodCA2MCBmdC4sIGRhcmt2aXNpb24gMTIwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDIyXCIsXG5cdFx0bGFuZ3VhZ2VzOiBcIkNvbW1vbiwgRHJhY29uaWNcIixcblx0XHRjcjogXCIxNVwiLFxuXHRcdHRyYWl0czogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkFtcGhpYmlvdXNcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgZHJhZ29uIGNhbiBicmVhdGhlIGFpciBhbmQgd2F0ZXIuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTGVnZW5kYXJ5IFJlc2lzdGFuY2UgKDMvRGF5KVwiLFxuXHRcdFx0XHRkZXNjOiBcIklmIHRoZSBkcmFnb24gZmFpbHMgYSBzYXZpbmcgdGhyb3csIGl0IGNhbiBjaG9vc2UgdG8gc3VjY2VlZCBpbnN0ZWFkLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGRyYWdvbiBjYW4gdXNlIGl0cyBGcmlnaHRmdWwgUHJlc2VuY2UuIEl0IHRoZW4gbWFrZXMgdGhyZWUgYXR0YWNrczogb25lIHdpdGggaXRzIGJpdGUgYW5kIHR3byB3aXRoIGl0cyBjbGF3cy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJCaXRlXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzExIHRvIGhpdCwgcmVhY2ggMTAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDE3ICgyZDEwICsgNikgcGllcmNpbmcgZGFtYWdlIHBsdXMgNyAoMmQ2KSBwb2lzb24gZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDExLFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIyZDEwICsgMmQ2XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogNixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQ2xhd1wiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICsxMSB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDEzICgyZDYgKyA2KSBzbGFzaGluZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMTEsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjJkNlwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDYsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlRhaWxcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMTEgdG8gaGl0LCByZWFjaCAxNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTUgKDJkOCArIDYpIGJsdWRnZW9uaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAxMSxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMmQ4XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogNixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiRnJpZ2h0ZnVsIFByZXNlbmNlXCIsXG5cdFx0XHRcdGRlc2M6IFwiRWFjaCBjcmVhdHVyZSBvZiB0aGUgZHJhZ29uJ3MgY2hvaWNlIHRoYXQgaXMgd2l0aGluIDEyMCBmZWV0IG9mIHRoZSBkcmFnb24gYW5kIGF3YXJlIG9mIGl0IG11c3Qgc3VjY2VlZCBvbiBhIERDIDE2IFdpc2RvbSBzYXZpbmcgdGhyb3cgb3IgYmVjb21lIGZyaWdodGVuZWQgZm9yIDEgbWludXRlLiBBIGNyZWF0dXJlIGNhbiByZXBlYXQgdGhlIHNhdmluZyB0aHJvdyBhdCB0aGUgZW5kIG9mIGVhY2ggb2YgaXRzIHR1cm5zLCBlbmRpbmcgdGhlIGVmZmVjdCBvbiBpdHNlbGYgb24gYSBzdWNjZXNzLiBJZiBhIGNyZWF0dXJlJ3Mgc2F2aW5nIHRocm93IGlzIHN1Y2Nlc3NmdWwgb3IgdGhlIGVmZmVjdCBlbmRzIGZvciBpdCwgdGhlIGNyZWF0dXJlIGlzIGltbXVuZSB0byB0aGUgZHJhZ29uJ3MgRnJpZ2h0ZnVsIFByZXNlbmNlIGZvciB0aGUgbmV4dCAyNCBob3VycyAuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiUG9pc29uIEJyZWF0aCAoUmVjaGFyZ2UgNS02KVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBkcmFnb24gZXhoYWxlcyBwb2lzb25vdXMgZ2FzIGluIGEgNjAtZm9vdCBjb25lLiBFYWNoIGNyZWF0dXJlIGluIHRoYXQgYXJlYSBtdXN0IG1ha2UgYSBEQyAxOCBDb25zdGl0dXRpb24gc2F2aW5nIHRocm93LCB0YWtpbmcgNTYgKDE2ZDYpIHBvaXNvbiBkYW1hZ2Ugb24gYSBmYWlsZWQgc2F2ZSwgb3IgaGFsZiBhcyBtdWNoIGRhbWFnZSBvbiBhIHN1Y2Nlc3NmdWwgb25lLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjE2ZDZcIixcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRsZWdlbmRhcnlfYWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkRldGVjdFwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBkcmFnb24gbWFrZXMgYSBXaXNkb20gKFBlcmNlcHRpb24pIGNoZWNrLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlRhaWwgQXR0YWNrXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGRyYWdvbiBtYWtlcyBhIHRhaWwgYXR0YWNrLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIldpbmcgQXR0YWNrIChDb3N0cyAyIEFjdGlvbnMpXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGRyYWdvbiBiZWF0cyBpdHMgd2luZ3MuIEVhY2ggY3JlYXR1cmUgd2l0aGluIDEwIGZ0LiBvZiB0aGUgZHJhZ29uIG11c3Qgc3VjY2VlZCBvbiBhIERDIDE5IERleHRlcml0eSBzYXZpbmcgdGhyb3cgb3IgdGFrZSAxMyAoMmQ2ICsgNikgYmx1ZGdlb25pbmcgZGFtYWdlIGFuZCBiZSBrbm9ja2VkIHByb25lLiBUaGUgZHJhZ29uIGNhbiB0aGVuIGZseSB1cCB0byBoYWxmIGl0cyBmbHlpbmcgc3BlZWQuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiQWR1bHQgUmVkIERyYWdvblwiLFxuXHRcdHNpemU6IFwiSHVnZVwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcImRyYWdvblwiLFxuXHRcdHN1YnR5cGU6IFwiXCIsXG5cdFx0YWxpZ25tZW50OiBcImNoYW90aWMgZXZpbFwiLFxuXHRcdGFjOiAxOSxcblx0XHRocDogMjU2LFxuXHRcdGhpdF9kaWNlOiBcIjE5ZDEyXCIsXG5cdFx0c3BlZWQ6IFwiNDAgZnQuLCBjbGltYiA0MCBmdC4sIGZseSA4MCBmdC5cIixcblx0XHRzdGF0czogWzI3LCAxMCwgMjUsIDE2LCAxMywgMjFdLFxuXHRcdHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdGRleHRlcml0eTogNixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdGNvbnN0aXR1dGlvbjogMTMsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHR3aXNkb206IDcsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRjaGFyaXNtYTogMTEsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0c2tpbGxzYXZlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRwZXJjZXB0aW9uOiAxMyxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHN0ZWFsdGg6IDYsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiZmlyZVwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuXHRcdHNlbnNlczogXCJibGluZHNpZ2h0IDYwIGZ0LiwgZGFya3Zpc2lvbiAxMjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMjNcIixcblx0XHRsYW5ndWFnZXM6IFwiQ29tbW9uLCBEcmFjb25pY1wiLFxuXHRcdGNyOiBcIjE3XCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTGVnZW5kYXJ5IFJlc2lzdGFuY2UgKDMvRGF5KVwiLFxuXHRcdFx0XHRkZXNjOiBcIklmIHRoZSBkcmFnb24gZmFpbHMgYSBzYXZpbmcgdGhyb3csIGl0IGNhbiBjaG9vc2UgdG8gc3VjY2VlZCBpbnN0ZWFkLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGRyYWdvbiBjYW4gdXNlIGl0cyBGcmlnaHRmdWwgUHJlc2VuY2UuIEl0IHRoZW4gbWFrZXMgdGhyZWUgYXR0YWNrczogb25lIHdpdGggaXRzIGJpdGUgYW5kIHR3byB3aXRoIGl0cyBjbGF3cy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJCaXRlXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzE0IHRvIGhpdCwgcmVhY2ggMTAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDE5ICgyZDEwICsgOCkgcGllcmNpbmcgZGFtYWdlIHBsdXMgNyAoMmQ2KSBmaXJlIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAxNCxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMmQxMCArIDJkNlwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDgsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkNsYXdcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMTQgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxNSAoMmQ2ICsgOCkgc2xhc2hpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDE0LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIyZDZcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiA4LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJUYWlsXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzE0IHRvIGhpdCwgcmVhY2ggMTUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDE3ICgyZDggKyA4KSBibHVkZ2VvbmluZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMTQsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjJkOFwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDgsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkZyaWdodGZ1bCBQcmVzZW5jZVwiLFxuXHRcdFx0XHRkZXNjOiBcIkVhY2ggY3JlYXR1cmUgb2YgdGhlIGRyYWdvbidzIGNob2ljZSB0aGF0IGlzIHdpdGhpbiAxMjAgZnQuIG9mIHRoZSBkcmFnb24gYW5kIGF3YXJlIG9mIGl0IG11c3Qgc3VjY2VlZCBvbiBhIERDIDE5IFdpc2RvbSBzYXZpbmcgdGhyb3cgb3IgYmVjb21lIGZyaWdodGVuZWQgZm9yIDEgbWludXRlLiBBIGNyZWF0dXJlIGNhbiByZXBlYXQgdGhlIHNhdmluZyB0aHJvdyBhdCB0aGUgZW5kIG9mIGVhY2ggb2YgaXRzIHR1cm5zLCBlbmRpbmcgdGhlIGVmZmVjdCBvbiBpdHNlbGYgb24gYSBzdWNjZXNzLiBJZiBhIGNyZWF0dXJlJ3Mgc2F2aW5nIHRocm93IGlzIHN1Y2Nlc3NmdWwgb3IgdGhlIGVmZmVjdCBlbmRzIGZvciBpdCwgdGhlIGNyZWF0dXJlIGlzIGltbXVuZSB0byB0aGUgZHJhZ29uJ3MgRnJpZ2h0ZnVsIFByZXNlbmNlIGZvciB0aGUgbmV4dCAyNCBob3Vycy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJGaXJlIEJyZWF0aCAoUmVjaGFyZ2UgNS02KVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBkcmFnb24gZXhoYWxlcyBmaXJlIGluIGEgNjAtZm9vdCBjb25lLiBFYWNoIGNyZWF0dXJlIGluIHRoYXQgYXJlYSBtdXN0IG1ha2UgYSBEQyAyMSBEZXh0ZXJpdHkgc2F2aW5nIHRocm93LCB0YWtpbmcgNjMgKDE4ZDYpIGZpcmUgZGFtYWdlIG9uIGEgZmFpbGVkIHNhdmUsIG9yIGhhbGYgYXMgbXVjaCBkYW1hZ2Ugb24gYSBzdWNjZXNzZnVsIG9uZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxOGQ2XCIsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkxhaXIgQWN0aW9uc1wiLFxuXHRcdFx0XHRkZXNjOiBcIk9uIGluaXRpYXRpdmUgY291bnQgMjAgKGxvc2luZyBpbml0aWF0aXZlIHRpZXMpLCB0aGUgZHJhZ29uIHRha2VzIGEgbGFpciBhY3Rpb24gdG8gY2F1c2Ugb25lIG9mIHRoZSBmb2xsb3dpbmcgZWZmZWN0czogdGhlIGRyYWdvbiBjYW4ndCB1c2UgdGhlIHNhbWUgZWZmZWN0IHR3byByb3VuZHMgaW4gYSByb3c6XFxuXHUyMDIyIE1hZ21hIGVydXB0cyBmcm9tIGEgcG9pbnQgb24gdGhlIGdyb3VuZCB0aGUgZHJhZ29uIGNhbiBzZWUgd2l0aGluIDEyMCBmZWV0IG9mIGl0LCBjcmVhdGluZyBhIDIwLWZvb3QtaGlnaCwgNS1mb290LXJhZGl1cyBnZXlzZXIuIEVhY2ggY3JlYXR1cmUgaW4gdGhlIGdleXNlcidzIGFyZWEgbXVzdCBtYWtlIGEgREMgMTUgRGV4dGVyaXR5IHNhdmluZyB0aHJvdywgdGFraW5nIDIxICg2ZDYpIGZpcmUgZGFtYWdlIG9uIGEgZmFpbGVkIHNhdmUsIG9yIGhhbGYgYXMgbXVjaCBkYW1hZ2Ugb24gYSBzdWNjZXNzZnVsIG9uZS5cXG5cdTIwMjIgQSB0cmVtb3Igc2hha2VzIHRoZSBsYWlyIGluIGEgNjAtZm9vdC1yYWRpdXMgYXJvdW5kIHRoZSBkcmFnb24uIEVhY2ggY3JlYXR1cmUgb3RoZXIgdGhhbiB0aGUgZHJhZ29uIG9uIHRoZSBncm91bmQgaW4gdGhhdCBhcmVhIG11c3Qgc3VjY2VlZCBvbiBhIERDIDE1IERleHRlcml0eSBzYXZpbmcgdGhyb3cgb3IgYmUga25vY2tlZCBwcm9uZS5cXG5cdTIwMjIgVm9sY2FuaWMgZ2FzZXMgZm9ybSBhIGNsb3VkIGluIGEgMjAtZm9vdC1yYWRpdXMgc3BoZXJlIGNlbnRlcmVkIG9uIGEgcG9pbnQgdGhlIGRyYWdvbiBjYW4gc2VlIHdpdGhpbiAxMjAgZmVldCBvZiBpdC4gVGhlIHNwaGVyZSBzcHJlYWRzIGFyb3VuZCBjb3JuZXJzLCBhbmQgaXRzIGFyZWEgaXMgbGlnaHRseSBvYnNjdXJlZC4gSXQgbGFzdHMgdW50aWwgaW5pdGlhdGl2ZSBjb3VudCAyMCBvbiB0aGUgbmV4dCByb3VuZC4gRWFjaCBjcmVhdHVyZSB0aGF0IHN0YXJ0cyBpdHMgdHVybiBpbiB0aGUgY2xvdWQgbXVzdCBzdWNjZWVkIG9uIGEgREMgMTMgQ29uc3RpdHV0aW9uIHNhdmluZyB0aHJvdyBvciBiZSBwb2lzb25lZCB1bnRpbCB0aGUgZW5kIG9mIGl0cyB0dXJuLiBXaGlsZSBwb2lzb25lZCBpbiB0aGlzIHdheSwgYSBjcmVhdHVyZSBpcyBpbmNhcGFjaXRhdGVkLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjZkNlwiLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGxlZ2VuZGFyeV9hY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiRGV0ZWN0XCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGRyYWdvbiBtYWtlcyBhIFdpc2RvbSAoUGVyY2VwdGlvbikgY2hlY2suXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiVGFpbCBBdHRhY2tcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgZHJhZ29uIG1ha2VzIGEgdGFpbCBhdHRhY2suXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiV2luZyBBdHRhY2sgKENvc3RzIDIgQWN0aW9ucylcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgZHJhZ29uIGJlYXRzIGl0cyB3aW5ncy4gRWFjaCBjcmVhdHVyZSB3aXRoaW4gMTAgZnQuIG9mIHRoZSBkcmFnb24gbXVzdCBzdWNjZWVkIG9uIGEgREMgMjIgRGV4dGVyaXR5IHNhdmluZyB0aHJvdyBvciB0YWtlIDE1ICgyZDYgKyA4KSBibHVkZ2VvbmluZyBkYW1hZ2UgYW5kIGJlIGtub2NrZWQgcHJvbmUuIFRoZSBkcmFnb24gY2FuIHRoZW4gZmx5IHVwIHRvIGhhbGYgaXRzIGZseWluZyBzcGVlZC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJBZHVsdCBTaWx2ZXIgRHJhZ29uXCIsXG5cdFx0c2l6ZTogXCJIdWdlXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwiZHJhZ29uXCIsXG5cdFx0c3VidHlwZTogXCJcIixcblx0XHRhbGlnbm1lbnQ6IFwibGF3ZnVsIGdvb2RcIixcblx0XHRhYzogMTksXG5cdFx0aHA6IDI0Myxcblx0XHRoaXRfZGljZTogXCIxOGQxMlwiLFxuXHRcdHNwZWVkOiBcIjQwIGZ0LiwgZmx5IDgwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbMjcsIDEwLCAyNSwgMTYsIDEzLCAyMV0sXG5cdFx0c2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0ZGV4dGVyaXR5OiA1LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0Y29uc3RpdHV0aW9uOiAxMixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHdpc2RvbTogNixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdGNoYXJpc21hOiAxMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRza2lsbHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdGFyY2FuYTogOCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdGhpc3Rvcnk6IDgsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRwZXJjZXB0aW9uOiAxMSxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHN0ZWFsdGg6IDUsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiY29sZFwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuXHRcdHNlbnNlczogXCJibGluZHNpZ2h0IDYwIGZ0LiwgZGFya3Zpc2lvbiAxMjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMjFcIixcblx0XHRsYW5ndWFnZXM6IFwiQ29tbW9uLCBEcmFjb25pY1wiLFxuXHRcdGNyOiBcIjE2XCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTGVnZW5kYXJ5IFJlc2lzdGFuY2UgKDMvRGF5KVwiLFxuXHRcdFx0XHRkZXNjOiBcIklmIHRoZSBkcmFnb24gZmFpbHMgYSBzYXZpbmcgdGhyb3csIGl0IGNhbiBjaG9vc2UgdG8gc3VjY2VlZCBpbnN0ZWFkLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGRyYWdvbiBjYW4gdXNlIGl0cyBGcmlnaHRmdWwgUHJlc2VuY2UuIEl0IHRoZW4gbWFrZXMgdGhyZWUgYXR0YWNrczogb25lIHdpdGggaXRzIGJpdGUgYW5kIHR3byB3aXRoIGl0cyBjbGF3cy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJCaXRlXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzEzIHRvIGhpdCwgcmVhY2ggMTAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDE5ICgyZDEwICsgOCkgcGllcmNpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDEzLFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIyZDEwXCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogOCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQ2xhd1wiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICsxMyB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDE1ICgyZDYgKyA4KSBzbGFzaGluZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMTMsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjJkNlwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDgsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlRhaWxcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMTMgdG8gaGl0LCByZWFjaCAxNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTcgKDJkOCArIDgpIGJsdWRnZW9uaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAxMyxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMmQ4XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogOCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiRnJpZ2h0ZnVsIFByZXNlbmNlXCIsXG5cdFx0XHRcdGRlc2M6IFwiRWFjaCBjcmVhdHVyZSBvZiB0aGUgZHJhZ29uJ3MgY2hvaWNlIHRoYXQgaXMgd2l0aGluIDEyMCBmZWV0IG9mIHRoZSBkcmFnb24gYW5kIGF3YXJlIG9mIGl0IG11c3Qgc3VjY2VlZCBvbiBhIERDIDE4IFdpc2RvbSBzYXZpbmcgdGhyb3cgb3IgYmVjb21lIGZyaWdodGVuZWQgZm9yIDEgbWludXRlLiBBIGNyZWF0dXJlIGNhbiByZXBlYXQgdGhlIHNhdmluZyB0aHJvdyBhdCB0aGUgZW5kIG9mIGVhY2ggb2YgaXRzIHR1cm5zLCBlbmRpbmcgdGhlIGVmZmVjdCBvbiBpdHNlbGYgb24gYSBzdWNjZXNzLiBJZiBhIGNyZWF0dXJlJ3Mgc2F2aW5nIHRocm93IGlzIHN1Y2Nlc3NmdWwgb3IgdGhlIGVmZmVjdCBlbmRzIGZvciBpdCwgdGhlIGNyZWF0dXJlIGlzIGltbXVuZSB0byB0aGUgZHJhZ29uJ3MgRnJpZ2h0ZnVsIFByZXNlbmNlIGZvciB0aGUgbmV4dCAyNCBob3Vycy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJCcmVhdGggV2VhcG9ucyAoUmVjaGFyZ2UgNS02KVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBkcmFnb24gdXNlcyBvbmUgb2YgdGhlIGZvbGxvd2luZyBicmVhdGggd2VhcG9ucy5cXG5Db2xkIEJyZWF0aC4gVGhlIGRyYWdvbiBleGhhbGVzIGFuIGljeSBibGFzdCBpbiBhIDYwLWZvb3QgY29uZS4gRWFjaCBjcmVhdHVyZSBpbiB0aGF0IGFyZWEgbXVzdCBtYWtlIGEgREMgMjAgQ29uc3RpdHV0aW9uIHNhdmluZyB0aHJvdywgdGFraW5nIDU4ICgxM2Q4KSBjb2xkIGRhbWFnZSBvbiBhIGZhaWxlZCBzYXZlLCBvciBoYWxmIGFzIG11Y2ggZGFtYWdlIG9uIGEgc3VjY2Vzc2Z1bCBvbmUuXFxuUGFyYWx5emluZyBCcmVhdGguIFRoZSBkcmFnb24gZXhoYWxlcyBwYXJhbHl6aW5nIGdhcyBpbiBhIDYwLWZvb3QgY29uZS4gRWFjaCBjcmVhdHVyZSBpbiB0aGF0IGFyZWEgbXVzdCBzdWNjZWVkIG9uIGEgREMgMjAgQ29uc3RpdHV0aW9uIHNhdmluZyB0aHJvdyBvciBiZSBwYXJhbHl6ZWQgZm9yIDEgbWludXRlLiBBIGNyZWF0dXJlIGNhbiByZXBlYXQgdGhlIHNhdmluZyB0aHJvdyBhdCB0aGUgZW5kIG9mIGVhY2ggb2YgaXRzIHR1cm5zLCBlbmRpbmcgdGhlIGVmZmVjdCBvbiBpdHNlbGYgb24gYSBzdWNjZXNzLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjEzZDhcIixcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRsZWdlbmRhcnlfYWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkRldGVjdFwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBkcmFnb24gbWFrZXMgYSBXaXNkb20gKFBlcmNlcHRpb24pIGNoZWNrLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlRhaWwgQXR0YWNrXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGRyYWdvbiBtYWtlcyBhIHRhaWwgYXR0YWNrLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIldpbmcgQXR0YWNrIChDb3N0cyAyIEFjdGlvbnMpXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGRyYWdvbiBiZWF0cyBpdHMgd2luZ3MuIEVhY2ggY3JlYXR1cmUgd2l0aGluIDEwIGZ0LiBvZiB0aGUgZHJhZ29uIG11c3Qgc3VjY2VlZCBvbiBhIERDIDIyIERleHRlcml0eSBzYXZpbmcgdGhyb3cgb3IgdGFrZSAxNSAoMmQ2ICsgOCkgYmx1ZGdlb25pbmcgZGFtYWdlIGFuZCBiZSBrbm9ja2VkIHByb25lLiBUaGUgZHJhZ29uIGNhbiB0aGVuIGZseSB1cCB0byBoYWxmIGl0cyBmbHlpbmcgc3BlZWQuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiQWR1bHQgV2hpdGUgRHJhZ29uXCIsXG5cdFx0c2l6ZTogXCJIdWdlXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwiZHJhZ29uXCIsXG5cdFx0c3VidHlwZTogXCJcIixcblx0XHRhbGlnbm1lbnQ6IFwiY2hhb3RpYyBldmlsXCIsXG5cdFx0YWM6IDE4LFxuXHRcdGhwOiAyMDAsXG5cdFx0aGl0X2RpY2U6IFwiMTZkMTJcIixcblx0XHRzcGVlZDogXCI0MCBmdC4sIGJ1cnJvdyAzMCBmdC4sIGZseSA4MCBmdC4sIHN3aW0gNDAgZnQuXCIsXG5cdFx0c3RhdHM6IFsyMiwgMTAsIDIyLCA4LCAxMiwgMTJdLFxuXHRcdHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdGRleHRlcml0eTogNSxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdGNvbnN0aXR1dGlvbjogMTEsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHR3aXNkb206IDYsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRjaGFyaXNtYTogNixcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRza2lsbHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdHBlcmNlcHRpb246IDExLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0c3RlYWx0aDogNSxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJjb2xkXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0c2Vuc2VzOiBcImJsaW5kc2lnaHQgNjAgZnQuLCBkYXJrdmlzaW9uIDEyMCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAyMVwiLFxuXHRcdGxhbmd1YWdlczogXCJDb21tb24sIERyYWNvbmljXCIsXG5cdFx0Y3I6IFwiMTNcIixcblx0XHR0cmFpdHM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJJY2UgV2Fsa1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBkcmFnb24gY2FuIG1vdmUgYWNyb3NzIGFuZCBjbGltYiBpY3kgc3VyZmFjZXMgd2l0aG91dCBuZWVkaW5nIHRvIG1ha2UgYW4gYWJpbGl0eSBjaGVjay4gQWRkaXRpb25hbGx5LCBkaWZmaWN1bHQgdGVycmFpbiBjb21wb3NlZCBvZiBpY2Ugb3Igc25vdyBkb2Vzbid0IGNvc3QgaXQgZXh0cmEgbW9tZW50LlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkxlZ2VuZGFyeSBSZXNpc3RhbmNlICgzL0RheSlcIixcblx0XHRcdFx0ZGVzYzogXCJJZiB0aGUgZHJhZ29uIGZhaWxzIGEgc2F2aW5nIHRocm93LCBpdCBjYW4gY2hvb3NlIHRvIHN1Y2NlZWQgaW5zdGVhZC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJNdWx0aWF0dGFja1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBkcmFnb24gY2FuIHVzZSBpdHMgRnJpZ2h0ZnVsIFByZXNlbmNlLiBJdCB0aGVuIG1ha2VzIHRocmVlIGF0dGFja3M6IG9uZSB3aXRoIGl0cyBiaXRlIGFuZCB0d28gd2l0aCBpdHMgY2xhd3MuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQml0ZVwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICsxMSB0byBoaXQsIHJlYWNoIDEwIGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxNyAoMmQxMCArIDYpIHBpZXJjaW5nIGRhbWFnZSBwbHVzIDQgKDFkOCkgY29sZCBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMTEsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjJkMTAgKyAxZDhcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiA2LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJDbGF3XCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzExIHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTMgKDJkNiArIDYpIHNsYXNoaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAxMSxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMmQ2XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogNixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiVGFpbFwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICsxMSB0byBoaXQsIHJlYWNoIDE1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxNSAoMmQ4ICsgNikgYmx1ZGdlb25pbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDExLFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIyZDhcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiA2LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJGcmlnaHRmdWwgUHJlc2VuY2VcIixcblx0XHRcdFx0ZGVzYzogXCJFYWNoIGNyZWF0dXJlIG9mIHRoZSBkcmFnb24ncyBjaG9pY2UgdGhhdCBpcyB3aXRoaW4gMTIwIGZ0LiBvZiB0aGUgZHJhZ29uIGFuZCBhd2FyZSBvZiBpdCBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxNCBXaXNkb20gc2F2aW5nIHRocm93IG9yIGJlY29tZSBmcmlnaHRlbmVkIGZvciAxIG1pbnV0ZS4gQSBjcmVhdHVyZSBjYW4gcmVwZWF0IHRoZSBzYXZpbmcgdGhyb3cgYXQgdGhlIGVuZCBvZiBlYWNoIG9mIGl0cyB0dXJucywgZW5kaW5nIHRoZSBlZmZlY3Qgb24gaXRzZWxmIG9uIGEgc3VjY2Vzcy4gSWYgYSBjcmVhdHVyZSdzIHNhdmluZyB0aHJvdyBpcyBzdWNjZXNzZnVsIG9yIHRoZSBlZmZlY3QgZW5kcyBmb3IgaXQsIHRoZSBjcmVhdHVyZSBpcyBpbW11bmUgdG8gdGhlIGRyYWdvbidzIEZyaWdodGZ1bCBQcmVzZW5jZSBmb3IgdGhlIG5leHQgMjQgaG91cnMuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQ29sZCBCcmVhdGggKFJlY2hhcmdlIDUtNilcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgZHJhZ29uIGV4aGFsZXMgYW4gaWN5IGJsYXN0IGluIGEgNjAtZm9vdCBjb25lLiBFYWNoIGNyZWF0dXJlIGluIHRoYXQgYXJlYSBtdXN0IG1ha2UgYSBEQyAxOSBDb25zdGl0dXRpb24gc2F2aW5nIHRocm93LCB0YWtpbmcgNTQgKDEyZDgpIGNvbGQgZGFtYWdlIG9uIGEgZmFpbGVkIHNhdmUsIG9yIGhhbGYgYXMgbXVjaCBkYW1hZ2Ugb24gYSBzdWNjZXNzZnVsIG9uZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxMmQ4XCIsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0bGVnZW5kYXJ5X2FjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJEZXRlY3RcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgZHJhZ29uIG1ha2VzIGEgV2lzZG9tIChQZXJjZXB0aW9uKSBjaGVjay5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJUYWlsIEF0dGFja1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBkcmFnb24gbWFrZXMgYSB0YWlsIGF0dGFjay5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJXaW5nIEF0dGFjayAoQ29zdHMgMiBBY3Rpb25zKVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBkcmFnb24gYmVhdHMgaXRzIHdpbmdzLiBFYWNoIGNyZWF0dXJlIHdpdGhpbiAxMCBmdC4gb2YgdGhlIGRyYWdvbiBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxOSBEZXh0ZXJpdHkgc2F2aW5nIHRocm93IG9yIHRha2UgMTMgKDJkNiArIDYpIGJsdWRnZW9uaW5nIGRhbWFnZSBhbmQgYmUga25vY2tlZCBwcm9uZS4gVGhlIGRyYWdvbiBjYW4gdGhlbiBmbHkgdXAgdG8gaGFsZiBpdHMgZmx5aW5nIHNwZWVkLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIkFpciBFbGVtZW50YWxcIixcblx0XHRzaXplOiBcIkxhcmdlXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwiZWxlbWVudGFsXCIsXG5cdFx0c3VidHlwZTogXCJcIixcblx0XHRhbGlnbm1lbnQ6IFwibmV1dHJhbFwiLFxuXHRcdGFjOiAxNSxcblx0XHRocDogOTAsXG5cdFx0aGl0X2RpY2U6IFwiMTJkMTBcIixcblx0XHRzcGVlZDogXCJmbHkgOTAgZnQuIChob3ZlcilcIixcblx0XHRzdGF0czogWzE0LCAyMCwgMTQsIDYsIDEwLCA2XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczpcblx0XHRcdFwibGlnaHRuaW5nOyB0aHVuZGVyOyBibHVkZ2VvbmluZywgcGllcmNpbmcsIGFuZCBzbGFzaGluZyBmcm9tIG5vbm1hZ2ljYWwgd2VhcG9uc1wiLFxuXHRcdGRhbWFnZV9pbW11bml0aWVzOiBcInBvaXNvblwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOlxuXHRcdFx0XCJleGhhdXN0aW9uLCBncmFwcGxlZCwgcGFyYWx5emVkLCBwZXRyaWZpZWQsIHBvaXNvbmVkLCBwcm9uZSwgcmVzdHJhaW5lZCwgdW5jb25zY2lvdXNcIixcblx0XHRzZW5zZXM6IFwiZGFya3Zpc2lvbiA2MCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxMFwiLFxuXHRcdGxhbmd1YWdlczogXCJBdXJhblwiLFxuXHRcdGNyOiBcIjVcIixcblx0XHR0cmFpdHM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJBaXIgRm9ybVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBlbGVtZW50YWwgY2FuIGVudGVyIGEgaG9zdGlsZSBjcmVhdHVyZSdzIHNwYWNlIGFuZCBzdG9wIHRoZXJlLiBJdCBjYW4gbW92ZSB0aHJvdWdoIGEgc3BhY2UgYXMgbmFycm93IGFzIDEgaW5jaCB3aWRlIHdpdGhvdXQgc3F1ZWV6aW5nLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGVsZW1lbnRhbCBtYWtlcyB0d28gc2xhbSBhdHRhY2tzLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlNsYW1cIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArOCB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDE0ICgyZDggKyA1KSBibHVkZ2VvbmluZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogOCxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMmQ4XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogNSxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiV2hpcmx3aW5kIChSZWNoYXJnZSA0LTYpXCIsXG5cdFx0XHRcdGRlc2M6IFwiRWFjaCBjcmVhdHVyZSBpbiB0aGUgZWxlbWVudGFsJ3Mgc3BhY2UgbXVzdCBtYWtlIGEgREMgMTMgU3RyZW5ndGggc2F2aW5nIHRocm93LiBPbiBhIGZhaWx1cmUsIGEgdGFyZ2V0IHRha2VzIDE1ICgzZDggKyAyKSBibHVkZ2VvbmluZyBkYW1hZ2UgYW5kIGlzIGZsdW5nIHVwIDIwIGZlZXQgYXdheSBmcm9tIHRoZSBlbGVtZW50YWwgaW4gYSByYW5kb20gZGlyZWN0aW9uIGFuZCBrbm9ja2VkIHByb25lLiBJZiBhIHRocm93biB0YXJnZXQgc3RyaWtlcyBhbiBvYmplY3QsIHN1Y2ggYXMgYSB3YWxsIG9yIGZsb29yLCB0aGUgdGFyZ2V0IHRha2VzIDMgKDFkNikgYmx1ZGdlb25pbmcgZGFtYWdlIGZvciBldmVyeSAxMCBmZWV0IGl0IHdhcyB0aHJvd24uIElmIHRoZSB0YXJnZXQgaXMgdGhyb3duIGF0IGFub3RoZXIgY3JlYXR1cmUsIHRoYXQgY3JlYXR1cmUgbXVzdCBzdWNjZWVkIG9uIGEgREMgMTMgRGV4dGVyaXR5IHNhdmluZyB0aHJvdyBvciB0YWtlIHRoZSBzYW1lIGRhbWFnZSBhbmQgYmUga25vY2tlZCBwcm9uZS5cXG5JZiB0aGUgc2F2aW5nIHRocm93IGlzIHN1Y2Nlc3NmdWwsIHRoZSB0YXJnZXQgdGFrZXMgaGFsZiB0aGUgYmx1ZGdlb25pbmcgZGFtYWdlIGFuZCBpc24ndCBmbHVuZyBhd2F5IG9yIGtub2NrZWQgcHJvbmUuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiQW5jaWVudCBCbGFjayBEcmFnb25cIixcblx0XHRzaXplOiBcIkdhcmdhbnR1YW5cIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJkcmFnb25cIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJjaGFvdGljIGV2aWxcIixcblx0XHRhYzogMjIsXG5cdFx0aHA6IDM2Nyxcblx0XHRoaXRfZGljZTogXCIyMWQyMFwiLFxuXHRcdHNwZWVkOiBcIjQwIGZ0LiwgZmx5IDgwIGZ0Liwgc3dpbSA0MCBmdC5cIixcblx0XHRzdGF0czogWzI3LCAxNCwgMjUsIDE2LCAxNSwgMTldLFxuXHRcdHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdGRleHRlcml0eTogOSxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdGNvbnN0aXR1dGlvbjogMTQsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHR3aXNkb206IDksXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRjaGFyaXNtYTogMTEsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0c2tpbGxzYXZlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRwZXJjZXB0aW9uOiAxNixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHN0ZWFsdGg6IDksXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiYWNpZFwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuXHRcdHNlbnNlczogXCJibGluZHNpZ2h0IDYwIGZ0LiwgZGFya3Zpc2lvbiAxMjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMjZcIixcblx0XHRsYW5ndWFnZXM6IFwiQ29tbW9uLCBEcmFjb25pY1wiLFxuXHRcdGNyOiBcIjIxXCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQW1waGliaW91c1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBkcmFnb24gY2FuIGJyZWF0aGUgYWlyIGFuZCB3YXRlci5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJMZWdlbmRhcnkgUmVzaXN0YW5jZSAoMy9EYXkpXCIsXG5cdFx0XHRcdGRlc2M6IFwiSWYgdGhlIGRyYWdvbiBmYWlscyBhIHNhdmluZyB0aHJvdywgaXQgY2FuIGNob29zZSB0byBzdWNjZWVkIGluc3RlYWQuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgZHJhZ29uIGNhbiB1c2UgaXRzIEZyaWdodGZ1bCBQcmVzZW5jZS4gSXQgdGhlbiBtYWtlcyB0aHJlZSBhdHRhY2tzOiBvbmUgd2l0aCBpdHMgYml0ZSBhbmQgdHdvIHdpdGggaXRzIGNsYXdzLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkJpdGVcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOisgMTUgdG8gaGl0LCByZWFjaCAxNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTkgKDJkMTAgKyA4KSBwaWVyY2luZyBkYW1hZ2UgcGx1cyA5ICgyZDgpIGFjaWQgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDE1LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIyZDEwICsgMmQ4XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogOCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQ2xhd1wiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICsxNSB0byBoaXQsIHJlYWNoIDEwIGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxNSAoMmQ2ICsgOCkgc2xhc2hpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDE1LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIyZDZcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiA4LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJUYWlsXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzE1IHRvIGhpdCwgcmVhY2ggMjAgZnQgLiwgb25lIHRhcmdldC4gSGl0OiAxNyAoMmQ4ICsgOCkgYmx1ZGdlb25pbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDE1LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIyZDhcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiA4LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJGcmlnaHRmdWwgUHJlc2VuY2VcIixcblx0XHRcdFx0ZGVzYzogXCJFYWNoIGNyZWF0dXJlIG9mIHRoZSBkcmFnb24ncyBjaG9pY2UgdGhhdCBpcyB3aXRoaW4gMTIwIGZlZXQgb2YgdGhlIGRyYWdvbiBhbmQgYXdhcmUgb2YgaXQgbXVzdCBzdWNjZWVkIG9uIGEgREMgMTkgV2lzZG9tIHNhdmluZyB0aHJvdyBvciBiZWNvbWUgZnJpZ2h0ZW5lZCBmb3IgMSBtaW51dGUuIEEgY3JlYXR1cmUgY2FuIHJlcGVhdCB0aGUgc2F2aW5nIHRocm93IGF0IHRoZSBlbmQgb2YgZWFjaCBvZiBpdHMgdHVybnMsIGVuZGluZyB0aGUgZWZmZWN0IG9uIGl0c2VsZiBvbiBhIHN1Y2Nlc3MuIElmIGEgY3JlYXR1cmUncyBzYXZpbmcgdGhyb3cgaXMgc3VjY2Vzc2Z1bCBvciB0aGUgZWZmZWN0IGVuZHMgZm9yIGl0LCB0aGUgY3JlYXR1cmUgaXMgaW1tdW5lIHRvIHRoZSBkcmFnb24ncyBGcmlnaHRmdWwgUHJlc2VuY2UgZm9yIHRoZSBuZXh0IDI0IGhvdXJzLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkFjaWQgQnJlYXRoIChSZWNoYXJnZSA1LTYpXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGRyYWdvbiBleGhhbGVzIGFjaWQgaW4gYSA5MC1mb290IGxpbmUgdGhhdCBpcyAxMCBmZWV0IHdpZGUuIEVhY2ggY3JlYXR1cmUgaW4gdGhhdCBsaW5lIG11c3QgbWFrZSBhIERDIDIyIERleHRlcml0eSBzYXZpbmcgdGhyb3csIHRha2luZyA2NyAoMTVkOCkgYWNpZCBkYW1hZ2Ugb24gYSBmYWlsZWQgc2F2ZSwgb3IgaGFsZiBhcyBtdWNoIGRhbWFnZSBvbiBhIHN1Y2Nlc3NmdWwgb25lLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0bGVnZW5kYXJ5X2FjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJEZXRlY3RcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgZHJhZ29uIG1ha2VzIGEgV2lzZG9tIChQZXJjZXB0aW9uKSBjaGVjay5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJUYWlsIEF0dGFja1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBkcmFnb24gbWFrZXMgYSB0YWlsIGF0dGFjay5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJXaW5nIEF0dGFjayAoQ29zdHMgMiBBY3Rpb25zKVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBkcmFnb24gYmVhdHMgaXRzIHdpbmdzLiBFYWNoIGNyZWF0dXJlIHdpdGhpbiAxNSBmdC4gb2YgdGhlIGRyYWdvbiBtdXN0IHN1Y2NlZWQgb24gYSBEQyAyMyBEZXh0ZXJpdHkgc2F2aW5nIHRocm93IG9yIHRha2UgMTUgKDJkNiArIDgpIGJsdWRnZW9uaW5nIGRhbWFnZSBhbmQgYmUga25vY2tlZCBwcm9uZS4gVGhlIGRyYWdvbiBjYW4gdGhlbiBmbHkgdXAgdG8gaGFsZiBpdHMgZmx5aW5nIHNwZWVkLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIkFuY2llbnQgQmx1ZSBEcmFnb25cIixcblx0XHRzaXplOiBcIkdhcmdhbnR1YW5cIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJkcmFnb25cIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJsYXdmdWwgZXZpbFwiLFxuXHRcdGFjOiAyMixcblx0XHRocDogNDgxLFxuXHRcdGhpdF9kaWNlOiBcIjI2ZDIwXCIsXG5cdFx0c3BlZWQ6IFwiNDAgZnQuLCBidXJyb3cgNDAgZnQuLCBmbHkgODAgZnQuXCIsXG5cdFx0c3RhdHM6IFsyOSwgMTAsIDI3LCAxOCwgMTcsIDIxXSxcblx0XHRzYXZlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRkZXh0ZXJpdHk6IDcsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRjb25zdGl0dXRpb246IDE1LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0d2lzZG9tOiAxMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdGNoYXJpc21hOiAxMixcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRza2lsbHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdHBlcmNlcHRpb246IDE3LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0c3RlYWx0aDogNyxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJsaWdodG5pbmdcIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcblx0XHRzZW5zZXM6IFwiYmxpbmRzaWdodCA2MCBmdC4sIGRhcmt2aXNpb24gMTIwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDI3XCIsXG5cdFx0bGFuZ3VhZ2VzOiBcIkNvbW1vbiwgRHJhY29uaWNcIixcblx0XHRjcjogXCIyM1wiLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJNdWx0aWF0dGFja1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBkcmFnb24gY2FuIHVzZSBpdHMgRnJpZ2h0ZnVsIFByZXNlbmNlLiBJdCB0aGVuIG1ha2VzIHRocmVlIGF0dGFja3M6IG9uZSB3aXRoIGl0cyBiaXRlIGFuZCB0d28gd2l0aCBpdHMgY2xhd3MuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQml0ZVwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICsxNiB0byBoaXQsIHJlYWNoIDE1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAyMCAoMmQxMCArIDkpIHBpZXJjaW5nIGRhbWFnZSBwbHVzIDExICgyZDEwKSBsaWdodG5pbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDE2LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIyZDEwICsgMmQxMFwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDksXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkNsYXdcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMTYgdG8gaGl0LCByZWFjaCAxMCBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTYgKDJkNiArIDkpIHNsYXNoaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAxNixcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMmQ2XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogOSxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiVGFpbFwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICsxNiB0byBoaXQsIHJlYWNoIDIwIGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxOCAoMmQ4ICsgOSkgYmx1ZGdlb25pbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDE2LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIyZDhcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiA5LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJGcmlnaHRmdWwgUHJlc2VuY2VcIixcblx0XHRcdFx0ZGVzYzogXCJFYWNoIGNyZWF0dXJlIG9mIHRoZSBkcmFnb24ncyBjaG9pY2UgdGhhdCBpcyB3aXRoaW4gMTIwIGZlZXQgb2YgdGhlIGRyYWdvbiBhbmQgYXdhcmUgb2YgaXQgbXVzdCBzdWNjZWVkIG9uIGEgREMgMjAgV2lzZG9tIHNhdmluZyB0aHJvdyBvciBiZWNvbWUgZnJpZ2h0ZW5lZCBmb3IgMSBtaW51dGUuIEEgY3JlYXR1cmUgY2FuIHJlcGVhdCB0aGUgc2F2aW5nIHRocm93IGF0IHRoZSBlbmQgb2YgZWFjaCBvZiBpdHMgdHVybnMsIGVuZGluZyB0aGUgZWZmZWN0IG9uIGl0c2VsZiBvbiBhIHN1Y2Nlc3MuIElmIGEgY3JlYXR1cmUncyBzYXZpbmcgdGhyb3cgaXMgc3VjY2Vzc2Z1bCBvciB0aGUgZWZmZWN0IGVuZHMgZm9yIGl0LCB0aGUgY3JlYXR1cmUgaXMgaW1tdW5lIHRvIHRoZSBkcmFnb24ncyBGcmlnaHRmdWwgUHJlc2VuY2UgZm9yIHRoZSBuZXh0IDI0IGhvdXJzLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkxpZ2h0bmluZyBCcmVhdGggKFJlY2hhcmdlIDUtNilcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgZHJhZ29uIGV4aGFsZXMgbGlnaHRuaW5nIGluIGEgMTIwLWZvb3QgbGluZSB0aGF0IGlzIDEwIGZlZXQgd2lkZS4gRWFjaCBjcmVhdHVyZSBpbiB0aGF0IGxpbmUgbXVzdCBtYWtlIGEgREMgMjMgRGV4dGVyaXR5IHNhdmluZyB0aHJvdywgdGFraW5nIDg4ICgxNmQxMCkgbGlnaHRuaW5nIGRhbWFnZSBvbiBhIGZhaWxlZCBzYXZlLCBvciBoYWxmIGFzIG11Y2ggZGFtYWdlIG9uIGEgc3VjY2Vzc2Z1bCBvbmUuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMTZkMTBcIixcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRsZWdlbmRhcnlfYWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkRldGVjdFwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBkcmFnb24gbWFrZXMgYSBXaXNkb20gKFBlcmNlcHRpb24pIGNoZWNrLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlRhaWwgQXR0YWNrXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGRyYWdvbiBtYWtlcyBhIHRhaWwgYXR0YWNrLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIldpbmcgQXR0YWNrIChDb3N0cyAyIEFjdGlvbnMpXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGRyYWdvbiBiZWF0cyBpdHMgd2luZ3MuIEVhY2ggY3JlYXR1cmUgd2l0aGluIDE1IGZ0LiBvZiB0aGUgZHJhZ29uIG11c3Qgc3VjY2VlZCBvbiBhIERDIDI0IERleHRlcml0eSBzYXZpbmcgdGhyb3cgb3IgdGFrZSAxNiAoMmQ2ICsgOSkgYmx1ZGdlb25pbmcgZGFtYWdlIGFuZCBiZSBrbm9ja2VkIHByb25lLiBUaGUgZHJhZ29uIGNhbiB0aGVuIGZseSB1cCB0byBoYWxmIGl0cyBmbHlpbmcgc3BlZWQuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiQW5jaWVudCBCcmFzcyBEcmFnb25cIixcblx0XHRzaXplOiBcIkdhcmdhbnR1YW5cIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJkcmFnb25cIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJjaGFvdGljIGdvb2RcIixcblx0XHRhYzogMjAsXG5cdFx0aHA6IDI5Nyxcblx0XHRoaXRfZGljZTogXCIxN2QyMFwiLFxuXHRcdHNwZWVkOiBcIjQwIGZ0LiwgYnVycm93IDQwIGZ0LiwgZmx5IDgwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbMjcsIDEwLCAyNSwgMTYsIDE1LCAxOV0sXG5cdFx0c2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0ZGV4dGVyaXR5OiA2LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0Y29uc3RpdHV0aW9uOiAxMyxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHdpc2RvbTogOCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdGNoYXJpc21hOiAxMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRza2lsbHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdGhpc3Rvcnk6IDksXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRwZXJzdWFzaW9uOiAxMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHBlcmNlcHRpb246IDE0LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0c3RlYWx0aDogNixcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJmaXJlXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0c2Vuc2VzOiBcImJsaW5kc2lnaHQgNjAgZnQuLCBkYXJrdmlzaW9uIDEyMCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAyNFwiLFxuXHRcdGxhbmd1YWdlczogXCJDb21tb24sIERyYWNvbmljXCIsXG5cdFx0Y3I6IFwiMjBcIixcblx0XHR0cmFpdHM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJMZWdlbmRhcnkgUmVzaXN0YW5jZSAoMy9EYXkpXCIsXG5cdFx0XHRcdGRlc2M6IFwiSWYgdGhlIGRyYWdvbiBmYWlscyBhIHNhdmluZyB0aHJvdywgaXQgY2FuIGNob29zZSB0byBzdWNjZWVkIGluc3RlYWQuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgZHJhZ29uIGNhbiB1c2UgaXRzIEZyaWdodGZ1bCBQcmVzZW5jZS4gSXQgdGhlbiBtYWtlcyB0aHJlZSBhdHRhY2tzOiBvbmUgd2l0aCBpdHMgYml0ZSBhbmQgdHdvIHdpdGggaXRzIGNsYXdzLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkJpdGVcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMTQgdG8gaGl0LCByZWFjaCAxNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTkgKDJkMTAgKyA4KSBwaWVyY2luZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMTQsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjJkMTBcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiA4LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJDbGF3XCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzE0IHRvIGhpdCwgcmVhY2ggMTAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDE1ICgyZDYgKyA4KSBzbGFzaGluZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMTQsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjJkNlwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDgsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlRhaWxcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMTQgdG8gaGl0LCByZWFjaCAyMCBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTcgKDJkOCArIDgpIGJsdWRnZW9uaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAxNCxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMmQ4XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogOCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiRnJpZ2h0ZnVsIFByZXNlbmNlXCIsXG5cdFx0XHRcdGRlc2M6IFwiRWFjaCBjcmVhdHVyZSBvZiB0aGUgZHJhZ29uJ3MgY2hvaWNlIHRoYXQgaXMgd2l0aGluIDEyMCBmZWV0IG9mIHRoZSBkcmFnb24gYW5kIGF3YXJlIG9mIGl0IG11c3Qgc3VjY2VlZCBvbiBhIERDIDE4IFdpc2RvbSBzYXZpbmcgdGhyb3cgb3IgYmVjb21lIGZyaWdodGVuZWQgZm9yIDEgbWludXRlLiBBIGNyZWF0dXJlIGNhbiByZXBlYXQgdGhlIHNhdmluZyB0aHJvdyBhdCB0aGUgZW5kIG9mIGVhY2ggb2YgaXRzIHR1cm5zLCBlbmRpbmcgdGhlIGVmZmVjdCBvbiBpdHNlbGYgb24gYSBzdWNjZXNzLiBJZiBhIGNyZWF0dXJlJ3Mgc2F2aW5nIHRocm93IGlzIHN1Y2Nlc3NmdWwgb3IgdGhlIGVmZmVjdCBlbmRzIGZvciBpdCwgdGhlIGNyZWF0dXJlIGlzIGltbXVuZSB0byB0aGUgZHJhZ29uJ3MgRnJpZ2h0ZnVsIFByZXNlbmNlIGZvciB0aGUgbmV4dCAyNCBob3Vycy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJCcmVhdGggV2VhcG9ucyAoUmVjaGFyZ2UgNS02KVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBkcmFnb24gdXNlcyBvbmUgb2YgdGhlIGZvbGxvd2luZyBicmVhdGggd2VhcG9uczpcXG5GaXJlIEJyZWF0aC4gVGhlIGRyYWdvbiBleGhhbGVzIGZpcmUgaW4gYW4gOTAtZm9vdCBsaW5lIHRoYXQgaXMgMTAgZmVldCB3aWRlLiBFYWNoIGNyZWF0dXJlIGluIHRoYXQgbGluZSBtdXN0IG1ha2UgYSBEQyAyMSBEZXh0ZXJpdHkgc2F2aW5nIHRocm93LCB0YWtpbmcgNTYgKDE2ZDYpIGZpcmUgZGFtYWdlIG9uIGEgZmFpbGVkIHNhdmUsIG9yIGhhbGYgYXMgbXVjaCBkYW1hZ2Ugb24gYSBzdWNjZXNzZnVsIG9uZS5cXG5TbGVlcCBCcmVhdGguIFRoZSBkcmFnb24gZXhoYWxlcyBzbGVlcCBnYXMgaW4gYSA5MC1mb290IGNvbmUuIEVhY2ggY3JlYXR1cmUgaW4gdGhhdCBhcmVhIG11c3Qgc3VjY2VlZCBvbiBhIERDIDIxIENvbnN0aXR1dGlvbiBzYXZpbmcgdGhyb3cgb3IgZmFsbCB1bmNvbnNjaW91cyBmb3IgMTAgbWludXRlcy4gVGhpcyBlZmZlY3QgZW5kcyBmb3IgYSBjcmVhdHVyZSBpZiB0aGUgY3JlYXR1cmUgdGFrZXMgZGFtYWdlIG9yIHNvbWVvbmUgdXNlcyBhbiBhY3Rpb24gdG8gd2FrZSBpdC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxNmQ2XCIsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkNoYW5nZSBTaGFwZVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBkcmFnb24gbWFnaWNhbGx5IHBvbHltb3JwaHMgaW50byBhIGh1bWFub2lkIG9yIGJlYXN0IHRoYXQgaGFzIGEgY2hhbGxlbmdlIHJhdGluZyBubyBoaWdoZXIgdGhhbiBpdHMgb3duLCBvciBiYWNrIGludG8gaXRzIHRydWUgZm9ybS4gSXQgcmV2ZXJ0cyB0byBpdHMgdHJ1ZSBmb3JtIGlmIGl0IGRpZXMuIEFueSBlcXVpcG1lbnQgaXQgaXMgd2VhcmluZyBvciBjYXJyeWluZyBpcyBhYnNvcmJlZCBvciBib3JuZSBieSB0aGUgbmV3IGZvcm0gKHRoZSBkcmFnb24ncyBjaG9pY2UpLlxcbkluIGEgbmV3IGZvcm0sIHRoZSBkcmFnb24gcmV0YWlucyBpdHMgYWxpZ25tZW50LCBoaXQgcG9pbnRzLCBIaXQgRGljZSwgYWJpbGl0eSB0byBzcGVhaywgcHJvZmljaWVuY2llcywgTGVnZW5kYXJ5IFJlc2lzdGFuY2UsIGxhaXIgYWN0aW9ucywgYW5kIEludGVsbGlnZW5jZSwgV2lzZG9tLCBhbmQgQ2hhcmlzbWEgc2NvcmVzLCBhcyB3ZWxsIGFzIHRoaXMgYWN0aW9uLiBJdHMgc3RhdGlzdGljcyBhbmQgY2FwYWJpbGl0aWVzIGFyZSBvdGhlcndpc2UgcmVwbGFjZWQgYnkgdGhvc2Ugb2YgdGhlIG5ldyBmb3JtLCBleGNlcHQgYW55IGNsYXNzIGZlYXR1cmVzIG9yIGxlZ2VuZGFyeSBhY3Rpb25zIG9mIHRoYXQgZm9ybS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGxlZ2VuZGFyeV9hY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiRGV0ZWN0XCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGRyYWdvbiBtYWtlcyBhIFdpc2RvbSAoUGVyY2VwdGlvbikgY2hlY2suXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiVGFpbCBBdHRhY2tcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgZHJhZ29uIG1ha2VzIGEgdGFpbCBhdHRhY2suXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiV2luZyBBdHRhY2sgKENvc3RzIDIgQWN0aW9ucylcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgZHJhZ29uIGJlYXRzIGl0cyB3aW5ncy4gRWFjaCBjcmVhdHVyZSB3aXRoaW4gMTUgZnQuIG9mIHRoZSBkcmFnb24gbXVzdCBzdWNjZWVkIG9uIGEgREMgMjIgRGV4dGVyaXR5IHNhdmluZyB0aHJvdyBvciB0YWtlIDE1ICgyZDYgKyA4KSBibHVkZ2VvbmluZyBkYW1hZ2UgYW5kIGJlIGtub2NrZWQgcHJvbmUuIFRoZSBkcmFnb24gY2FuIHRoZW4gZmx5IHVwIHRvIGhhbGYgaXRzIGZseWluZyBzcGVlZC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJBbmNpZW50IEJyb256ZSBEcmFnb25cIixcblx0XHRzaXplOiBcIkdhcmdhbnR1YW5cIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJkcmFnb25cIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJsYXdmdWwgZ29vZFwiLFxuXHRcdGFjOiAyMixcblx0XHRocDogNDQ0LFxuXHRcdGhpdF9kaWNlOiBcIjI0ZDIwXCIsXG5cdFx0c3BlZWQ6IFwiNDAgZnQuLCBmbHkgODAgZnQuLCBzd2ltIDQwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbMjksIDEwLCAyNywgMTgsIDE3LCAyMV0sXG5cdFx0c2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0ZGV4dGVyaXR5OiA3LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0Y29uc3RpdHV0aW9uOiAxNSxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHdpc2RvbTogMTAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRjaGFyaXNtYTogMTIsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0c2tpbGxzYXZlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRpbnNpZ2h0OiAxMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHBlcmNlcHRpb246IDE3LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0c3RlYWx0aDogNyxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJsaWdodG5pbmdcIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcblx0XHRzZW5zZXM6IFwiYmxpbmRzaWdodCA2MCBmdC4sIGRhcmt2aXNpb24gMTIwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDI3XCIsXG5cdFx0bGFuZ3VhZ2VzOiBcIkNvbW1vbiwgRHJhY29uaWNcIixcblx0XHRjcjogXCIyMlwiLFxuXHRcdHRyYWl0czogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkFtcGhpYmlvdXNcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgZHJhZ29uIGNhbiBicmVhdGhlIGFpciBhbmQgd2F0ZXIuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTGVnZW5kYXJ5IFJlc2lzdGFuY2UgKDMvRGF5KVwiLFxuXHRcdFx0XHRkZXNjOiBcIklmIHRoZSBkcmFnb24gZmFpbHMgYSBzYXZpbmcgdGhyb3csIGl0IGNhbiBjaG9vc2UgdG8gc3VjY2VlZCBpbnN0ZWFkLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGRyYWdvbiBjYW4gdXNlIGl0cyBGcmlnaHRmdWwgUHJlc2VuY2UuIEl0IHRoZW4gbWFrZXMgdGhyZWUgYXR0YWNrczogb25lIHdpdGggaXRzIGJpdGUgYW5kIHR3byB3aXRoIGl0cyBjbGF3cy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJCaXRlXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzE2IHRvIGhpdCwgcmVhY2ggMTUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDIwICgyZDEwICsgOSkgcGllcmNpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDE2LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIyZDEwXCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogOSxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQ2xhd1wiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICsxNiB0byBoaXQsIHJlYWNoIDEwIGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxNiAoMmQ2ICsgOSkgc2xhc2hpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDE2LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxZDZcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiA5LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJUYWlsXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzE2IHRvIGhpdCwgcmVhY2ggMjAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDE4ICgyZDggKyA5KSBibHVkZ2VvbmluZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMmQ4XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogOSxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiRnJpZ2h0ZnVsIFByZXNlbmNlXCIsXG5cdFx0XHRcdGRlc2M6IFwiRWFjaCBjcmVhdHVyZSBvZiB0aGUgZHJhZ29uJ3MgY2hvaWNlIHRoYXQgaXMgd2l0aGluIDEyMCBmZWV0IG9mIHRoZSBkcmFnb24gYW5kIGF3YXJlIG9mIGl0IG11c3Qgc3VjY2VlZCBvbiBhIERDIDIwIFdpc2RvbSBzYXZpbmcgdGhyb3cgb3IgYmVjb21lIGZyaWdodGVuZWQgZm9yIDEgbWludXRlLiBBIGNyZWF0dXJlIGNhbiByZXBlYXQgdGhlIHNhdmluZyB0aHJvdyBhdCB0aGUgZW5kIG9mIGVhY2ggb2YgaXRzIHR1cm5zLCBlbmRpbmcgdGhlIGVmZmVjdCBvbiBpdHNlbGYgb24gYSBzdWNjZXNzLiBJZiBhIGNyZWF0dXJlJ3Mgc2F2aW5nIHRocm93IGlzIHN1Y2Nlc3NmdWwgb3IgdGhlIGVmZmVjdCBlbmRzIGZvciBpdCwgdGhlIGNyZWF0dXJlIGlzIGltbXVuZSB0byB0aGUgZHJhZ29uJ3MgRnJpZ2h0ZnVsIFByZXNlbmNlIGZvciB0aGUgbmV4dCAyNCBob3Vycy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJCcmVhdGggV2VhcG9ucyAoUmVjaGFyZ2UgNS02KVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBkcmFnb24gdXNlcyBvbmUgb2YgdGhlIGZvbGxvd2luZyBicmVhdGggd2VhcG9ucy5cXG5MaWdodG5pbmcgQnJlYXRoLiBUaGUgZHJhZ29uIGV4aGFsZXMgbGlnaHRuaW5nIGluIGEgMTIwLWZvb3QgbGluZSB0aGF0IGlzIDEwIGZlZXQgd2lkZS4gRWFjaCBjcmVhdHVyZSBpbiB0aGF0IGxpbmUgbXVzdCBtYWtlIGEgREMgMjMgRGV4dGVyaXR5IHNhdmluZyB0aHJvdywgdGFraW5nIDg4ICgxNmQxMCkgbGlnaHRuaW5nIGRhbWFnZSBvbiBhIGZhaWxlZCBzYXZlLCBvciBoYWxmIGFzIG11Y2ggZGFtYWdlIG9uIGEgc3VjY2Vzc2Z1bCBvbmUuXFxuUmVwdWxzaW9uIEJyZWF0aC4gVGhlIGRyYWdvbiBleGhhbGVzIHJlcHVsc2lvbiBlbmVyZ3kgaW4gYSAzMC1mb290IGNvbmUuIEVhY2ggY3JlYXR1cmUgaW4gdGhhdCBhcmVhIG11c3Qgc3VjY2VlZCBvbiBhIERDIDIzIFN0cmVuZ3RoIHNhdmluZyB0aHJvdy4gT24gYSBmYWlsZWQgc2F2ZSwgdGhlIGNyZWF0dXJlIGlzIHB1c2hlZCA2MCBmZWV0IGF3YXkgZnJvbSB0aGUgZHJhZ29uLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjE2ZDEwXCIsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkNoYW5nZSBTaGFwZVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBkcmFnb24gbWFnaWNhbGx5IHBvbHltb3JwaHMgaW50byBhIGh1bWFub2lkIG9yIGJlYXN0IHRoYXQgaGFzIGEgY2hhbGxlbmdlIHJhdGluZyBubyBoaWdoZXIgdGhhbiBpdHMgb3duLCBvciBiYWNrIGludG8gaXRzIHRydWUgZm9ybS4gSXQgcmV2ZXJ0cyB0byBpdHMgdHJ1ZSBmb3JtIGlmIGl0IGRpZXMuIEFueSBlcXVpcG1lbnQgaXQgaXMgd2VhcmluZyBvciBjYXJyeWluZyBpcyBhYnNvcmJlZCBvciBib3JuZSBieSB0aGUgbmV3IGZvcm0gKHRoZSBkcmFnb24ncyBjaG9pY2UpLlxcbkluIGEgbmV3IGZvcm0sIHRoZSBkcmFnb24gcmV0YWlucyBpdHMgYWxpZ25tZW50LCBoaXQgcG9pbnRzLCBIaXQgRGljZSwgYWJpbGl0eSB0byBzcGVhaywgcHJvZmljaWVuY2llcywgTGVnZW5kYXJ5IFJlc2lzdGFuY2UsIGxhaXIgYWN0aW9ucywgYW5kIEludGVsbGlnZW5jZSwgV2lzZG9tLCBhbmQgQ2hhcmlzbWEgc2NvcmVzLCBhcyB3ZWxsIGFzIHRoaXMgYWN0aW9uLiBJdHMgc3RhdGlzdGljcyBhbmQgY2FwYWJpbGl0aWVzIGFyZSBvdGhlcndpc2UgcmVwbGFjZWQgYnkgdGhvc2Ugb2YgdGhlIG5ldyBmb3JtLCBleGNlcHQgYW55IGNsYXNzIGZlYXR1cmVzIG9yIGxlZ2VuZGFyeSBhY3Rpb25zIG9mIHRoYXQgZm9ybS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGxlZ2VuZGFyeV9hY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiRGV0ZWN0XCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGRyYWdvbiBtYWtlcyBhIFdpc2RvbSAoUGVyY2VwdGlvbikgY2hlY2suXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiVGFpbCBBdHRhY2tcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgZHJhZ29uIG1ha2VzIGEgdGFpbCBhdHRhY2suXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiV2luZyBBdHRhY2sgKENvc3RzIDIgQWN0aW9ucylcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgZHJhZ29uIGJlYXRzIGl0cyB3aW5ncy4gRWFjaCBjcmVhdHVyZSB3aXRoaW4gMTUgZnQuIG9mIHRoZSBkcmFnb24gbXVzdCBzdWNjZWVkIG9uIGEgREMgMjQgRGV4dGVyaXR5IHNhdmluZyB0aHJvdyBvciB0YWtlIDE2ICgyZDYgKyA5KSBibHVkZ2VvbmluZyBkYW1hZ2UgYW5kIGJlIGtub2NrZWQgcHJvbmUuIFRoZSBkcmFnb24gY2FuIHRoZW4gZmx5IHVwIHRvIGhhbGYgaXRzIGZseWluZyBzcGVlZC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJBbmNpZW50IENvcHBlciBEcmFnb25cIixcblx0XHRzaXplOiBcIkdhcmdhbnR1YW5cIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJkcmFnb25cIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJjaGFvdGljIGdvb2RcIixcblx0XHRhYzogMjEsXG5cdFx0aHA6IDM1MCxcblx0XHRoaXRfZGljZTogXCIyMGQyMFwiLFxuXHRcdHNwZWVkOiBcIjQwIGZ0LiwgY2xpbWIgNDAgZnQuLCBmbHkgODAgZnQuXCIsXG5cdFx0c3RhdHM6IFsyNywgMTIsIDI1LCAyMCwgMTcsIDE5XSxcblx0XHRzYXZlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRkZXh0ZXJpdHk6IDgsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRjb25zdGl0dXRpb246IDE0LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0d2lzZG9tOiAxMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdGNoYXJpc21hOiAxMSxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRza2lsbHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdHN0ZWFsdGg6IDgsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRwZXJjZXB0aW9uOiAxNyxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdGRlY2VwdGlvbjogMTEsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiYWNpZFwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuXHRcdHNlbnNlczogXCJibGluZHNpZ2h0IDYwIGZ0LiwgZGFya3Zpc2lvbiAxMjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMjdcIixcblx0XHRsYW5ndWFnZXM6IFwiQ29tbW9uLCBEcmFjb25pY1wiLFxuXHRcdGNyOiBcIjIxXCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTGVnZW5kYXJ5IFJlc2lzdGFuY2UgKDMvRGF5KVwiLFxuXHRcdFx0XHRkZXNjOiBcIklmIHRoZSBkcmFnb24gZmFpbHMgYSBzYXZpbmcgdGhyb3csIGl0IGNhbiBjaG9vc2UgdG8gc3VjY2VlZCBpbnN0ZWFkLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGRyYWdvbiBjYW4gdXNlIGl0cyBGcmlnaHRmdWwgUHJlc2VuY2UuIEl0IHRoZW4gbWFrZXMgdGhyZWUgYXR0YWNrczogb25lIHdpdGggaXRzIGJpdGUgYW5kIHR3byB3aXRoIGl0cyBjbGF3cy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJCaXRlXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzE1IHRvIGhpdCwgcmVhY2ggMTUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDE5ICgyZDEwICsgOCkgcGllcmNpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDE1LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIyZDEwXCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogOCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQ2xhd1wiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICsxNSB0byBoaXQsIHJlYWNoIDEwIGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxNSAoMmQ2ICsgOCkgc2xhc2hpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDE1LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIyZDZcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiA4LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJUYWlsXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzE1IHRvIGhpdCwgcmVhY2ggMjAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDE3ICgyZDggKyA4KSBibHVkZ2VvbmluZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMTUsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjJkOFwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDgsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkZyaWdodGZ1bCBQcmVzZW5jZVwiLFxuXHRcdFx0XHRkZXNjOiBcIkVhY2ggY3JlYXR1cmUgb2YgdGhlIGRyYWdvbidzIGNob2ljZSB0aGF0IGlzIHdpdGhpbiAxMjAgZmVldCBvZiB0aGUgZHJhZ29uIGFuZCBhd2FyZSBvZiBpdCBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxOSBXaXNkb20gc2F2aW5nIHRocm93IG9yIGJlY29tZSBmcmlnaHRlbmVkIGZvciAxIG1pbnV0ZS4gQSBjcmVhdHVyZSBjYW4gcmVwZWF0IHRoZSBzYXZpbmcgdGhyb3cgYXQgdGhlIGVuZCBvZiBlYWNoIG9mIGl0cyB0dXJucywgZW5kaW5nIHRoZSBlZmZlY3Qgb24gaXRzZWxmIG9uIGEgc3VjY2Vzcy4gSWYgYSBjcmVhdHVyZSdzIHNhdmluZyB0aHJvdyBpcyBzdWNjZXNzZnVsIG9yIHRoZSBlZmZlY3QgZW5kcyBmb3IgaXQsIHRoZSBjcmVhdHVyZSBpcyBpbW11bmUgdG8gdGhlIGRyYWdvbidzIEZyaWdodGZ1bCBQcmVzZW5jZSBmb3IgdGhlIG5leHQgMjQgaG91cnMuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQnJlYXRoIFdlYXBvbnMgKFJlY2hhcmdlIDUtNilcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgZHJhZ29uIHVzZXMgb25lIG9mIHRoZSBmb2xsb3dpbmcgYnJlYXRoIHdlYXBvbnMuXFxuQWNpZCBCcmVhdGguIFRoZSBkcmFnb24gZXhoYWxlcyBhY2lkIGluIGFuIDkwLWZvb3QgbGluZSB0aGF0IGlzIDEwIGZlZXQgd2lkZS4gRWFjaCBjcmVhdHVyZSBpbiB0aGF0IGxpbmUgbXVzdCBtYWtlIGEgREMgMjIgRGV4dGVyaXR5IHNhdmluZyB0aHJvdywgdGFraW5nIDYzICgxNGQ4KSBhY2lkIGRhbWFnZSBvbiBhIGZhaWxlZCBzYXZlLCBvciBoYWxmIGFzIG11Y2ggZGFtYWdlIG9uIGEgc3VjY2Vzc2Z1bCBvbmUuXFxuU2xvd2luZyBCcmVhdGguIFRoZSBkcmFnb24gZXhoYWxlcyBnYXMgaW4gYSA5MC1mb290IGNvbmUuIEVhY2ggY3JlYXR1cmUgaW4gdGhhdCBhcmVhIG11c3Qgc3VjY2VlZCBvbiBhIERDIDIyIENvbnN0aXR1dGlvbiBzYXZpbmcgdGhyb3cuIE9uIGEgZmFpbGVkIHNhdmUsIHRoZSBjcmVhdHVyZSBjYW4ndCB1c2UgcmVhY3Rpb25zLCBpdHMgc3BlZWQgaXMgaGFsdmVkLCBhbmQgaXQgY2FuJ3QgbWFrZSBtb3JlIHRoYW4gb25lIGF0dGFjayBvbiBpdHMgdHVybi4gSW4gYWRkaXRpb24sIHRoZSBjcmVhdHVyZSBjYW4gdXNlIGVpdGhlciBhbiBhY3Rpb24gb3IgYSBib251cyBhY3Rpb24gb24gaXRzIHR1cm4sIGJ1dCBub3QgYm90aC4gVGhlc2UgZWZmZWN0cyBsYXN0IGZvciAxIG1pbnV0ZS4gVGhlIGNyZWF0dXJlIGNhbiByZXBlYXQgdGhlIHNhdmluZyB0aHJvdyBhdCB0aGUgZW5kIG9mIGVhY2ggb2YgaXRzIHR1cm5zLCBlbmRpbmcgdGhlIGVmZmVjdCBvbiBpdHNlbGYgd2l0aCBhIHN1Y2Nlc3NmdWwgc2F2ZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxNGQ4XCIsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkNoYW5nZSBTaGFwZVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBkcmFnb24gbWFnaWNhbGx5IHBvbHltb3JwaHMgaW50byBhIGh1bWFub2lkIG9yIGJlYXN0IHRoYXQgaGFzIGEgY2hhbGxlbmdlIHJhdGluZyBubyBoaWdoZXIgdGhhbiBpdHMgb3duLCBvciBiYWNrIGludG8gaXRzIHRydWUgZm9ybS4gSXQgcmV2ZXJ0cyB0byBpdHMgdHJ1ZSBmb3JtIGlmIGl0IGRpZXMuIEFueSBlcXVpcG1lbnQgaXQgaXMgd2VhcmluZyBvciBjYXJyeWluZyBpcyBhYnNvcmJlZCBvciBib3JuZSBieSB0aGUgbmV3IGZvcm0gKHRoZSBkcmFnb24ncyBjaG9pY2UpLlxcbkluIGEgbmV3IGZvcm0sIHRoZSBkcmFnb24gcmV0YWlucyBpdHMgYWxpZ25tZW50LCBoaXQgcG9pbnRzLCBIaXQgRGljZSwgYWJpbGl0eSB0byBzcGVhaywgcHJvZmljaWVuY2llcywgTGVnZW5kYXJ5IFJlc2lzdGFuY2UsIGxhaXIgYWN0aW9ucywgYW5kIEludGVsbGlnZW5jZSwgV2lzZG9tLCBhbmQgQ2hhcmlzbWEgc2NvcmVzLCBhcyB3ZWxsIGFzIHRoaXMgYWN0aW9uLiBJdHMgc3RhdGlzdGljcyBhbmQgY2FwYWJpbGl0aWVzIGFyZSBvdGhlcndpc2UgcmVwbGFjZWQgYnkgdGhvc2Ugb2YgdGhlIG5ldyBmb3JtLCBleGNlcHQgYW55IGNsYXNzIGZlYXR1cmVzIG9yIGxlZ2VuZGFyeSBhY3Rpb25zIG9mIHRoYXQgZm9ybS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGxlZ2VuZGFyeV9hY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiRGV0ZWN0XCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGRyYWdvbiBtYWtlcyBhIFdpc2RvbSAoUGVyY2VwdGlvbikgY2hlY2suXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiVGFpbCBBdHRhY2tcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgZHJhZ29uIG1ha2VzIGEgdGFpbCBhdHRhY2suXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiV2luZyBBdHRhY2sgKENvc3RzIDIgQWN0aW9ucylcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgZHJhZ29uIGJlYXRzIGl0cyB3aW5ncy4gRWFjaCBjcmVhdHVyZSB3aXRoaW4gMTUgZnQuIG9mIHRoZSBkcmFnb24gbXVzdCBzdWNjZWVkIG9uIGEgREMgMjMgRGV4dGVyaXR5IHNhdmluZyB0aHJvdyBvciB0YWtlIDE1ICgyZDYgKyA4KSBibHVkZ2VvbmluZyBkYW1hZ2UgYW5kIGJlIGtub2NrZWQgcHJvbmUuIFRoZSBkcmFnb24gY2FuIHRoZW4gZmx5IHVwIHRvIGhhbGYgaXRzIGZseWluZyBzcGVlZC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJBbmNpZW50IEdvbGQgRHJhZ29uXCIsXG5cdFx0c2l6ZTogXCJHYXJnYW50dWFuXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwiZHJhZ29uXCIsXG5cdFx0c3VidHlwZTogXCJcIixcblx0XHRhbGlnbm1lbnQ6IFwibGF3ZnVsIGdvb2RcIixcblx0XHRhYzogMjIsXG5cdFx0aHA6IDU0Nixcblx0XHRoaXRfZGljZTogXCIyOGQyMFwiLFxuXHRcdHNwZWVkOiBcIjQwIGZ0LiwgZmx5IDgwIGZ0Liwgc3dpbSA0MCBmdC5cIixcblx0XHRzdGF0czogWzMwLCAxNCwgMjksIDE4LCAxNywgMjhdLFxuXHRcdHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdGRleHRlcml0eTogOSxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdGNvbnN0aXR1dGlvbjogMTYsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHR3aXNkb206IDEwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0Y2hhcmlzbWE6IDE2LFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdHNraWxsc2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0cGVyc3Vhc2lvbjogMTYsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRzdGVhbHRoOiA5LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0cGVyY2VwdGlvbjogMTcsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRpbnNpZ2h0OiAxMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJmaXJlXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0c2Vuc2VzOiBcImJsaW5kc2lnaHQgNjAgZnQuLCBkYXJrdmlzaW9uIDEyMCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAyN1wiLFxuXHRcdGxhbmd1YWdlczogXCJDb21tb24sIERyYWNvbmljXCIsXG5cdFx0Y3I6IFwiMjRcIixcblx0XHR0cmFpdHM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJBbXBoaWJpb3VzXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGRyYWdvbiBjYW4gYnJlYXRoZSBhaXIgYW5kIHdhdGVyLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkxlZ2VuZGFyeSBSZXNpc3RhbmNlICgzL0RheSlcIixcblx0XHRcdFx0ZGVzYzogXCJJZiB0aGUgZHJhZ29uIGZhaWxzIGEgc2F2aW5nIHRocm93LCBpdCBjYW4gY2hvb3NlIHRvIHN1Y2NlZWQgaW5zdGVhZC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJNdWx0aWF0dGFja1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBkcmFnb24gY2FuIHVzZSBpdHMgRnJpZ2h0ZnVsIFByZXNlbmNlLiBJdCB0aGVuIG1ha2VzIHRocmVlIGF0dGFja3M6IG9uZSB3aXRoIGl0cyBiaXRlIGFuZCB0d28gd2l0aCBpdHMgY2xhd3MuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQml0ZVwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICsxNyB0byBoaXQsIHJlYWNoIDE1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAyMSAoMmQxMCArIDEwKSBwaWVyY2luZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMTcsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjJkMTBcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiAxMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQ2xhd1wiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICsxNyB0byBoaXQsIHJlYWNoIDEwIGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxNyAoMmQ2ICsgMTApIHNsYXNoaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAxNyxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMmQ2XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogMTAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlRhaWxcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMTcgdG8gaGl0LCByZWFjaCAyMCBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTkgKDJkOCArIDEwKSBibHVkZ2VvbmluZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMTcsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjJkOFwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDEwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJGcmlnaHRmdWwgUHJlc2VuY2VcIixcblx0XHRcdFx0ZGVzYzogXCJFYWNoIGNyZWF0dXJlIG9mIHRoZSBkcmFnb24ncyBjaG9pY2UgdGhhdCBpcyB3aXRoaW4gMTIwIGZlZXQgb2YgdGhlIGRyYWdvbiBhbmQgYXdhcmUgb2YgaXQgbXVzdCBzdWNjZWVkIG9uIGEgREMgMjQgV2lzZG9tIHNhdmluZyB0aHJvdyBvciBiZWNvbWUgZnJpZ2h0ZW5lZCBmb3IgMSBtaW51dGUuIEEgY3JlYXR1cmUgY2FuIHJlcGVhdCB0aGUgc2F2aW5nIHRocm93IGF0IHRoZSBlbmQgb2YgZWFjaCBvZiBpdHMgdHVybnMsIGVuZGluZyB0aGUgZWZmZWN0IG9uIGl0c2VsZiBvbiBhIHN1Y2Nlc3MuIElmIGEgY3JlYXR1cmUncyBzYXZpbmcgdGhyb3cgaXMgc3VjY2Vzc2Z1bCBvciB0aGUgZWZmZWN0IGVuZHMgZm9yIGl0LCB0aGUgY3JlYXR1cmUgaXMgaW1tdW5lIHRvIHRoZSBkcmFnb24ncyBGcmlnaHRmdWwgUHJlc2VuY2UgZm9yIHRoZSBuZXh0IDI0IGhvdXJzLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkJyZWF0aCBXZWFwb25zIChSZWNoYXJnZSA1LTYpXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGRyYWdvbiB1c2VzIG9uZSBvZiB0aGUgZm9sbG93aW5nIGJyZWF0aCB3ZWFwb25zLlxcbkZpcmUgQnJlYXRoLiBUaGUgZHJhZ29uIGV4aGFsZXMgZmlyZSBpbiBhIDkwLWZvb3QgY29uZS4gRWFjaCBjcmVhdHVyZSBpbiB0aGF0IGFyZWEgbXVzdCBtYWtlIGEgREMgMjQgRGV4dGVyaXR5IHNhdmluZyB0aHJvdywgdGFraW5nIDcxICgxM2QxMCkgZmlyZSBkYW1hZ2Ugb24gYSBmYWlsZWQgc2F2ZSwgb3IgaGFsZiBhcyBtdWNoIGRhbWFnZSBvbiBhIHN1Y2Nlc3NmdWwgb25lLlxcbldlYWtlbmluZyBCcmVhdGguIFRoZSBkcmFnb24gZXhoYWxlcyBnYXMgaW4gYSA5MC1mb290IGNvbmUuIEVhY2ggY3JlYXR1cmUgaW4gdGhhdCBhcmVhIG11c3Qgc3VjY2VlZCBvbiBhIERDIDI0IFN0cmVuZ3RoIHNhdmluZyB0aHJvdyBvciBoYXZlIGRpc2FkdmFudGFnZSBvbiBTdHJlbmd0aC1iYXNlZCBhdHRhY2sgcm9sbHMsIFN0cmVuZ3RoIGNoZWNrcywgYW5kIFN0cmVuZ3RoIHNhdmluZyB0aHJvd3MgZm9yIDEgbWludXRlLiBBIGNyZWF0dXJlIGNhbiByZXBlYXQgdGhlIHNhdmluZyB0aHJvdyBhdCB0aGUgZW5kIG9mIGVhY2ggb2YgaXRzIHR1cm5zLCBlbmRpbmcgdGhlIGVmZmVjdCBvbiBpdHNlbGYgb24gYSBzdWNjZXNzLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjEzZDEwXCIsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkNoYW5nZSBTaGFwZVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBkcmFnb24gbWFnaWNhbGx5IHBvbHltb3JwaHMgaW50byBhIGh1bWFub2lkIG9yIGJlYXN0IHRoYXQgaGFzIGEgY2hhbGxlbmdlIHJhdGluZyBubyBoaWdoZXIgdGhhbiBpdHMgb3duLCBvciBiYWNrIGludG8gaXRzIHRydWUgZm9ybS4gSXQgcmV2ZXJ0cyB0byBpdHMgdHJ1ZSBmb3JtIGlmIGl0IGRpZXMuIEFueSBlcXVpcG1lbnQgaXQgaXMgd2VhcmluZyBvciBjYXJyeWluZyBpcyBhYnNvcmJlZCBvciBib3JuZSBieSB0aGUgbmV3IGZvcm0gKHRoZSBkcmFnb24ncyBjaG9pY2UpLlxcbkluIGEgbmV3IGZvcm0sIHRoZSBkcmFnb24gcmV0YWlucyBpdHMgYWxpZ25tZW50LCBoaXQgcG9pbnRzLCBIaXQgRGljZSwgYWJpbGl0eSB0byBzcGVhaywgcHJvZmljaWVuY2llcywgTGVnZW5kYXJ5IFJlc2lzdGFuY2UsIGxhaXIgYWN0aW9ucywgYW5kIEludGVsbGlnZW5jZSwgV2lzZG9tLCBhbmQgQ2hhcmlzbWEgc2NvcmVzLCBhcyB3ZWxsIGFzIHRoaXMgYWN0aW9uLiBJdHMgc3RhdGlzdGljcyBhbmQgY2FwYWJpbGl0aWVzIGFyZSBvdGhlcndpc2UgcmVwbGFjZWQgYnkgdGhvc2Ugb2YgdGhlIG5ldyBmb3JtLCBleGNlcHQgYW55IGNsYXNzIGZlYXR1cmVzIG9yIGxlZ2VuZGFyeSBhY3Rpb25zIG9mIHRoYXQgZm9ybS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGxlZ2VuZGFyeV9hY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiRGV0ZWN0XCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGRyYWdvbiBtYWtlcyBhIFdpc2RvbSAoUGVyY2VwdGlvbikgY2hlY2suXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiVGFpbCBBdHRhY2tcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgZHJhZ29uIG1ha2VzIGEgdGFpbCBhdHRhY2suXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiV2luZyBBdHRhY2sgKENvc3RzIDIgQWN0aW9ucylcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgZHJhZ29uIGJlYXRzIGl0cyB3aW5ncy4gRWFjaCBjcmVhdHVyZSB3aXRoaW4gMTUgZnQuIG9mIHRoZSBkcmFnb24gbXVzdCBzdWNjZWVkIG9uIGEgREMgMjUgRGV4dGVyaXR5IHNhdmluZyB0aHJvdyBvciB0YWtlIDE3ICgyZDYgKyAxMCkgYmx1ZGdlb25pbmcgZGFtYWdlIGFuZCBiZSBrbm9ja2VkIHByb25lLiBUaGUgZHJhZ29uIGNhbiB0aGVuIGZseSB1cCB0byBoYWxmIGl0cyBmbHlpbmcgc3BlZWQuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiQW5jaWVudCBHcmVlbiBEcmFnb25cIixcblx0XHRzaXplOiBcIkdhcmdhbnR1YW5cIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJkcmFnb25cIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJsYXdmdWwgZXZpbFwiLFxuXHRcdGFjOiAyMSxcblx0XHRocDogMzg1LFxuXHRcdGhpdF9kaWNlOiBcIjIyZDIwXCIsXG5cdFx0c3BlZWQ6IFwiNDAgZnQuLCBmbHkgODAgZnQuLCBzd2ltIDQwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbMjcsIDEyLCAyNSwgMjAsIDE3LCAxOV0sXG5cdFx0c2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0ZGV4dGVyaXR5OiA4LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0Y29uc3RpdHV0aW9uOiAxNCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHdpc2RvbTogMTAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRjaGFyaXNtYTogMTEsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0c2tpbGxzYXZlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRkZWNlcHRpb246IDExLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0aW5zaWdodDogMTAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRwZXJjZXB0aW9uOiAxNyxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHBlcnN1YXNpb246IDExLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0c3RlYWx0aDogOCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJwb2lzb25cIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczogXCJwb2lzb25lZFwiLFxuXHRcdHNlbnNlczogXCJibGluZHNpZ2h0IDYwIGZ0LiwgZGFya3Zpc2lvbiAxMjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMjdcIixcblx0XHRsYW5ndWFnZXM6IFwiQ29tbW9uLCBEcmFjb25pY1wiLFxuXHRcdGNyOiBcIjIyXCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQW1waGliaW91c1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBkcmFnb24gY2FuIGJyZWF0aGUgYWlyIGFuZCB3YXRlci5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJMZWdlbmRhcnkgUmVzaXN0YW5jZSAoMy9EYXkpXCIsXG5cdFx0XHRcdGRlc2M6IFwiSWYgdGhlIGRyYWdvbiBmYWlscyBhIHNhdmluZyB0aHJvdywgaXQgY2FuIGNob29zZSB0byBzdWNjZWVkIGluc3RlYWQuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgZHJhZ29uIGNhbiB1c2UgaXRzIEZyaWdodGZ1bCBQcmVzZW5jZS4gSXQgdGhlbiBtYWtlcyB0aHJlZSBhdHRhY2tzOiBvbmUgd2l0aCBpdHMgYml0ZSBhbmQgdHdvIHdpdGggaXRzIGNsYXdzLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkJpdGVcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMTUgdG8gaGl0LCByZWFjaCAxNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTkgKDJkMTAgKyA4KSBwaWVyY2luZyBkYW1hZ2UgcGx1cyAxMCAoM2Q2KSBwb2lzb24gZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDE1LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIyZDEwICsgM2Q2XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogOSxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQ2xhd1wiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICsxNSB0byBoaXQsIHJlYWNoIDEwIGZ0Liwgb25lIHRhcmdldC4gSGl0OiAyMiAoNGQ2ICsgOCkgc2xhc2hpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDE1LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCI0ZDZcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiA4LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJUYWlsXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzE1IHRvIGhpdCwgcmVhY2ggMjAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDE3ICgyZDggKyA4KSBibHVkZ2VvbmluZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMTYsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjJkOFwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDgsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkZyaWdodGZ1bCBQcmVzZW5jZVwiLFxuXHRcdFx0XHRkZXNjOiBcIkVhY2ggY3JlYXR1cmUgb2YgdGhlIGRyYWdvbidzIGNob2ljZSB0aGF0IGlzIHdpdGhpbiAxMjAgZmVldCBvZiB0aGUgZHJhZ29uIGFuZCBhd2FyZSBvZiBpdCBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxOSBXaXNkb20gc2F2aW5nIHRocm93IG9yIGJlY29tZSBmcmlnaHRlbmVkIGZvciAxIG1pbnV0ZS4gQSBjcmVhdHVyZSBjYW4gcmVwZWF0IHRoZSBzYXZpbmcgdGhyb3cgYXQgdGhlIGVuZCBvZiBlYWNoIG9mIGl0cyB0dXJucywgZW5kaW5nIHRoZSBlZmZlY3Qgb24gaXRzZWxmIG9uIGEgc3VjY2Vzcy4gSWYgYSBjcmVhdHVyZSdzIHNhdmluZyB0aHJvdyBpcyBzdWNjZXNzZnVsIG9yIHRoZSBlZmZlY3QgZW5kcyBmb3IgaXQsIHRoZSBjcmVhdHVyZSBpcyBpbW11bmUgdG8gdGhlIGRyYWdvbidzIEZyaWdodGZ1bCBQcmVzZW5jZSBmb3IgdGhlIG5leHQgMjQgaG91cnMuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiUG9pc29uIEJyZWF0aCAoUmVjaGFyZ2UgNS02KVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBkcmFnb24gZXhoYWxlcyBwb2lzb25vdXMgZ2FzIGluIGEgOTAtZm9vdCBjb25lLiBFYWNoIGNyZWF0dXJlIGluIHRoYXQgYXJlYSBtdXN0IG1ha2UgYSBEQyAyMiBDb25zdGl0dXRpb24gc2F2aW5nIHRocm93LCB0YWtpbmcgNzcgKDIyZDYpIHBvaXNvbiBkYW1hZ2Ugb24gYSBmYWlsZWQgc2F2ZSwgb3IgaGFsZiBhcyBtdWNoIGRhbWFnZSBvbiBhIHN1Y2Nlc3NmdWwgb25lLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjIyZDZcIixcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRsZWdlbmRhcnlfYWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkRldGVjdFwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBkcmFnb24gbWFrZXMgYSBXaXNkb20gKFBlcmNlcHRpb24pIGNoZWNrLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlRhaWwgQXR0YWNrXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGRyYWdvbiBtYWtlcyBhIHRhaWwgYXR0YWNrLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIldpbmcgQXR0YWNrIChDb3N0cyAyIEFjdGlvbnMpXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGRyYWdvbiBiZWF0cyBpdHMgd2luZ3MuIEVhY2ggY3JlYXR1cmUgd2l0aGluIDE1IGZ0LiBvZiB0aGUgZHJhZ29uIG11c3Qgc3VjY2VlZCBvbiBhIERDIDIzIERleHRlcml0eSBzYXZpbmcgdGhyb3cgb3IgdGFrZSAxNSAoMmQ2ICsgOCkgYmx1ZGdlb25pbmcgZGFtYWdlIGFuZCBiZSBrbm9ja2VkIHByb25lLiBUaGUgZHJhZ29uIGNhbiB0aGVuIGZseSB1cCB0byBoYWxmIGl0cyBmbHlpbmcgc3BlZWQuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiQW5jaWVudCBSZWQgRHJhZ29uXCIsXG5cdFx0c2l6ZTogXCJHYXJnYW50dWFuXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwiZHJhZ29uXCIsXG5cdFx0c3VidHlwZTogXCJcIixcblx0XHRhbGlnbm1lbnQ6IFwiY2hhb3RpYyBldmlsXCIsXG5cdFx0YWM6IDIyLFxuXHRcdGhwOiA1NDYsXG5cdFx0aGl0X2RpY2U6IFwiMjhkMjBcIixcblx0XHRzcGVlZDogXCI0MCBmdC4sIGNsaW1iIDQwIGZ0LiwgZmx5IDgwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbMzAsIDEwLCAyOSwgMTgsIDE1LCAyM10sXG5cdFx0c2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0ZGV4dGVyaXR5OiA3LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0Y29uc3RpdHV0aW9uOiAxNixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHdpc2RvbTogOSxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdGNoYXJpc21hOiAxMyxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRza2lsbHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdHBlcmNlcHRpb246IDE2LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0c3RlYWx0aDogNyxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJmaXJlXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0c2Vuc2VzOiBcImJsaW5kc2lnaHQgNjAgZnQuLCBkYXJrdmlzaW9uIDEyMCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAyNlwiLFxuXHRcdGxhbmd1YWdlczogXCJDb21tb24sIERyYWNvbmljXCIsXG5cdFx0Y3I6IFwiMjRcIixcblx0XHR0cmFpdHM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJMZWdlbmRhcnkgUmVzaXN0YW5jZSAoMy9EYXkpXCIsXG5cdFx0XHRcdGRlc2M6IFwiSWYgdGhlIGRyYWdvbiBmYWlscyBhIHNhdmluZyB0aHJvdywgaXQgY2FuIGNob29zZSB0byBzdWNjZWVkIGluc3RlYWQuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgZHJhZ29uIGNhbiB1c2UgaXRzIEZyaWdodGZ1bCBQcmVzZW5jZS4gSXQgdGhlbiBtYWtlcyB0aHJlZSBhdHRhY2tzOiBvbmUgd2l0aCBpdHMgYml0ZSBhbmQgdHdvIHdpdGggaXRzIGNsYXdzLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkJpdGVcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMTcgdG8gaGl0LCByZWFjaCAxNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMjEgKDJkMTAgKyAxMCkgcGllcmNpbmcgZGFtYWdlIHBsdXMgMTQgKDRkNikgZmlyZSBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMTcsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjJkMTAgKyA0ZDZcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiAxMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQ2xhd1wiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICsxNyB0byBoaXQsIHJlYWNoIDEwIGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxNyAoMmQ2ICsgMTApIHNsYXNoaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAxNyxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMmQ2XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogMTAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlRhaWxcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMTcgdG8gaGl0LCByZWFjaCAyMCBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTkgKDJkOCArIDEwKSBibHVkZ2VvbmluZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMTcsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjJkOFwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDEwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJGcmlnaHRmdWwgUHJlc2VuY2VcIixcblx0XHRcdFx0ZGVzYzogXCJFYWNoIGNyZWF0dXJlIG9mIHRoZSBkcmFnb24ncyBjaG9pY2UgdGhhdCBpcyB3aXRoaW4gMTIwIGZlZXQgb2YgdGhlIGRyYWdvbiBhbmQgYXdhcmUgb2YgaXQgbXVzdCBzdWNjZWVkIG9uIGEgREMgMjEgV2lzZG9tIHNhdmluZyB0aHJvdyBvciBiZWNvbWUgZnJpZ2h0ZW5lZCBmb3IgMSBtaW51dGUuIEEgY3JlYXR1cmUgY2FuIHJlcGVhdCB0aGUgc2F2aW5nIHRocm93IGF0IHRoZSBlbmQgb2YgZWFjaCBvZiBpdHMgdHVybnMsIGVuZGluZyB0aGUgZWZmZWN0IG9uIGl0c2VsZiBvbiBhIHN1Y2Nlc3MuIElmIGEgY3JlYXR1cmUncyBzYXZpbmcgdGhyb3cgaXMgc3VjY2Vzc2Z1bCBvciB0aGUgZWZmZWN0IGVuZHMgZm9yIGl0LCB0aGUgY3JlYXR1cmUgaXMgaW1tdW5lIHRvIHRoZSBkcmFnb24ncyBGcmlnaHRmdWwgUHJlc2VuY2UgZm9yIHRoZSBuZXh0IDI0IGhvdXJzLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkZpcmUgQnJlYXRoIChSZWNoYXJnZSA1LTYpXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGRyYWdvbiBleGhhbGVzIGZpcmUgaW4gYSA5MC1mb290IGNvbmUuIEVhY2ggY3JlYXR1cmUgaW4gdGhhdCBhcmVhIG11c3QgbWFrZSBhIERDIDI0IERleHRlcml0eSBzYXZpbmcgdGhyb3csIHRha2luZyA5MSAoMjZkNikgZmlyZSBkYW1hZ2Ugb24gYSBmYWlsZWQgc2F2ZSwgb3IgaGFsZiBhcyBtdWNoIGRhbWFnZSBvbiBhIHN1Y2Nlc3NmdWwgb25lLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjI2ZDZcIixcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRsZWdlbmRhcnlfYWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkRldGVjdFwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBkcmFnb24gbWFrZXMgYSBXaXNkb20gKFBlcmNlcHRpb24pIGNoZWNrLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlRhaWwgQXR0YWNrXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGRyYWdvbiBtYWtlcyBhIHRhaWwgYXR0YWNrLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIldpbmcgQXR0YWNrIChDb3N0cyAyIEFjdGlvbnMpXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGRyYWdvbiBiZWF0cyBpdHMgd2luZ3MuIEVhY2ggY3JlYXR1cmUgd2l0aGluIDE1IGZ0LiBvZiB0aGUgZHJhZ29uIG11c3Qgc3VjY2VlZCBvbiBhIERDIDI1IERleHRlcml0eSBzYXZpbmcgdGhyb3cgb3IgdGFrZSAxNyAoMmQ2ICsgMTApIGJsdWRnZW9uaW5nIGRhbWFnZSBhbmQgYmUga25vY2tlZCBwcm9uZS4gVGhlIGRyYWdvbiBjYW4gdGhlbiBmbHkgdXAgdG8gaGFsZiBpdHMgZmx5aW5nIHNwZWVkLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIkFuY2llbnQgU2lsdmVyIERyYWdvblwiLFxuXHRcdHNpemU6IFwiR2FyZ2FudHVhblwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcImRyYWdvblwiLFxuXHRcdHN1YnR5cGU6IFwiXCIsXG5cdFx0YWxpZ25tZW50OiBcImxhd2Z1bCBnb29kXCIsXG5cdFx0YWM6IDIyLFxuXHRcdGhwOiA0ODcsXG5cdFx0aGl0X2RpY2U6IFwiMjVkMjBcIixcblx0XHRzcGVlZDogXCI0MCBmdC4sIGZseSA4MCBmdC5cIixcblx0XHRzdGF0czogWzMwLCAxMCwgMjksIDE4LCAxNSwgMjNdLFxuXHRcdHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdGRleHRlcml0eTogNyxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdGNvbnN0aXR1dGlvbjogMTYsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHR3aXNkb206IDksXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRjaGFyaXNtYTogMTMsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0c2tpbGxzYXZlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRhcmNhbmE6IDExLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0cGVyY2VwdGlvbjogMTYsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRoaXN0b3J5OiAxMSxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHN0ZWFsdGg6IDcsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiY29sZFwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuXHRcdHNlbnNlczogXCJibGluZHNpZ2h0IDYwIGZ0LiwgZGFya3Zpc2lvbiAxMjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMjZcIixcblx0XHRsYW5ndWFnZXM6IFwiQ29tbW9uLCBEcmFjb25pY1wiLFxuXHRcdGNyOiBcIjIzXCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTGVnZW5kYXJ5IFJlc2lzdGFuY2UgKDMvRGF5KVwiLFxuXHRcdFx0XHRkZXNjOiBcIklmIHRoZSBkcmFnb24gZmFpbHMgYSBzYXZpbmcgdGhyb3csIGl0IGNhbiBjaG9vc2UgdG8gc3VjY2VlZCBpbnN0ZWFkLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGRyYWdvbiBjYW4gdXNlIGl0cyBGcmlnaHRmdWwgUHJlc2VuY2UuIEl0IHRoZW4gbWFrZXMgdGhyZWUgYXR0YWNrczogb25lIHdpdGggaXRzIGJpdGUgYW5kIHR3byB3aXRoIGl0cyBjbGF3cy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJCaXRlXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzE3IHRvIGhpdCwgcmVhY2ggMTUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDIxICgyZDEwICsgMTApIHBpZXJjaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAxNyxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMmQxMFwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDEwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJDbGF3XCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzE3IHRvIGhpdCwgcmVhY2ggMTAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDE3ICgyZDYgKyAxMCkgc2xhc2hpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDE3LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIyZDZcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiAxMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiVGFpbFwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICsxNyB0byBoaXQsIHJlYWNoIDIwIGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxOSAoMmQ4ICsgMTApIGJsdWRnZW9uaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAxNyxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMmQ4XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogMTAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkZyaWdodGZ1bCBQcmVzZW5jZVwiLFxuXHRcdFx0XHRkZXNjOiBcIkVhY2ggY3JlYXR1cmUgb2YgdGhlIGRyYWdvbidzIGNob2ljZSB0aGF0IGlzIHdpdGhpbiAxMjAgZmVldCBvZiB0aGUgZHJhZ29uIGFuZCBhd2FyZSBvZiBpdCBtdXN0IHN1Y2NlZWQgb24gYSBEQyAyMSBXaXNkb20gc2F2aW5nIHRocm93IG9yIGJlY29tZSBmcmlnaHRlbmVkIGZvciAxIG1pbnV0ZS4gQSBjcmVhdHVyZSBjYW4gcmVwZWF0IHRoZSBzYXZpbmcgdGhyb3cgYXQgdGhlIGVuZCBvZiBlYWNoIG9mIGl0cyB0dXJucywgZW5kaW5nIHRoZSBlZmZlY3Qgb24gaXRzZWxmIG9uIGEgc3VjY2Vzcy4gSWYgYSBjcmVhdHVyZSdzIHNhdmluZyB0aHJvdyBpcyBzdWNjZXNzZnVsIG9yIHRoZSBlZmZlY3QgZW5kcyBmb3IgaXQsIHRoZSBjcmVhdHVyZSBpcyBpbW11bmUgdG8gdGhlIGRyYWdvbidzIEZyaWdodGZ1bCBQcmVzZW5jZSBmb3IgdGhlIG5leHQgMjQgaG91cnMuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQnJlYXRoIFdlYXBvbnMgKFJlY2hhcmdlIDUtNilcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgZHJhZ29uIHVzZXMgb25lIG9mIHRoZSBmb2xsb3dpbmcgYnJlYXRoIHdlYXBvbnMuXFxuQ29sZCBCcmVhdGguIFRoZSBkcmFnb24gZXhoYWxlcyBhbiBpY3kgYmxhc3QgaW4gYSA5MC1mb290IGNvbmUuIEVhY2ggY3JlYXR1cmUgaW4gdGhhdCBhcmVhIG11c3QgbWFrZSBhIERDIDI0IENvbnN0aXR1dGlvbiBzYXZpbmcgdGhyb3csIHRha2luZyA2NyAoMTVkOCkgY29sZCBkYW1hZ2Ugb24gYSBmYWlsZWQgc2F2ZSwgb3IgaGFsZiBhcyBtdWNoIGRhbWFnZSBvbiBhIHN1Y2Nlc3NmdWwgb25lLlxcblBhcmFseXppbmcgQnJlYXRoLiBUaGUgZHJhZ29uIGV4aGFsZXMgcGFyYWx5emluZyBnYXMgaW4gYSA5MC0gZm9vdCBjb25lLiBFYWNoIGNyZWF0dXJlIGluIHRoYXQgYXJlYSBtdXN0IHN1Y2NlZWQgb24gYSBEQyAyNCBDb25zdGl0dXRpb24gc2F2aW5nIHRocm93IG9yIGJlIHBhcmFseXplZCBmb3IgMSBtaW51dGUuIEEgY3JlYXR1cmUgY2FuIHJlcGVhdCB0aGUgc2F2aW5nIHRocm93IGF0IHRoZSBlbmQgb2YgZWFjaCBvZiBpdHMgdHVybnMsIGVuZGluZyB0aGUgZWZmZWN0IG9uIGl0c2VsZiBvbiBhIHN1Y2Nlc3MuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMTVkOFwiLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJDaGFuZ2UgU2hhcGVcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgZHJhZ29uIG1hZ2ljYWxseSBwb2x5bW9ycGhzIGludG8gYSBodW1hbm9pZCBvciBiZWFzdCB0aGF0IGhhcyBhIGNoYWxsZW5nZSByYXRpbmcgbm8gaGlnaGVyIHRoYW4gaXRzIG93biwgb3IgYmFjayBpbnRvIGl0cyB0cnVlIGZvcm0uIEl0IHJldmVydHMgdG8gaXRzIHRydWUgZm9ybSBpZiBpdCBkaWVzLiBBbnkgZXF1aXBtZW50IGl0IGlzIHdlYXJpbmcgb3IgY2FycnlpbmcgaXMgYWJzb3JiZWQgb3IgYm9ybmUgYnkgdGhlIG5ldyBmb3JtICh0aGUgZHJhZ29uJ3MgY2hvaWNlKS5cXG5JbiBhIG5ldyBmb3JtLCB0aGUgZHJhZ29uIHJldGFpbnMgaXRzIGFsaWdubWVudCwgaGl0IHBvaW50cywgSGl0IERpY2UsIGFiaWxpdHkgdG8gc3BlYWssIHByb2ZpY2llbmNpZXMsIExlZ2VuZGFyeSBSZXNpc3RhbmNlLCBsYWlyIGFjdGlvbnMsIGFuZCBJbnRlbGxpZ2VuY2UsIFdpc2RvbSwgYW5kIENoYXJpc21hIHNjb3JlcywgYXMgd2VsbCBhcyB0aGlzIGFjdGlvbi4gSXRzIHN0YXRpc3RpY3MgYW5kIGNhcGFiaWxpdGllcyBhcmUgb3RoZXJ3aXNlIHJlcGxhY2VkIGJ5IHRob3NlIG9mIHRoZSBuZXcgZm9ybSwgZXhjZXB0IGFueSBjbGFzcyBmZWF0dXJlcyBvciBsZWdlbmRhcnkgYWN0aW9ucyBvZiB0aGF0IGZvcm0uXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRsZWdlbmRhcnlfYWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkRldGVjdFwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBkcmFnb24gbWFrZXMgYSBXaXNkb20gKFBlcmNlcHRpb24pIGNoZWNrLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlRhaWwgQXR0YWNrXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGRyYWdvbiBtYWtlcyBhIHRhaWwgYXR0YWNrLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIldpbmcgQXR0YWNrIChDb3N0cyAyIEFjdGlvbnMpXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGRyYWdvbiBiZWF0cyBpdHMgd2luZ3MuIEVhY2ggY3JlYXR1cmUgd2l0aGluIDE1IGZ0LiBvZiB0aGUgZHJhZ29uIG11c3Qgc3VjY2VlZCBvbiBhIERDIDI1IERleHRlcml0eSBzYXZpbmcgdGhyb3cgb3IgdGFrZSAxNyAoMmQ2ICsgMTApIGJsdWRnZW9uaW5nIGRhbWFnZSBhbmQgYmUga25vY2tlZCBwcm9uZS4gVGhlIGRyYWdvbiBjYW4gdGhlbiBmbHkgdXAgdG8gaGFsZiBpdHMgZmx5aW5nIHNwZWVkLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIkFuY2llbnQgV2hpdGUgRHJhZ29uXCIsXG5cdFx0c2l6ZTogXCJHYXJnYW50dWFuXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwiZHJhZ29uXCIsXG5cdFx0c3VidHlwZTogXCJcIixcblx0XHRhbGlnbm1lbnQ6IFwiY2hhb3RpYyBldmlsXCIsXG5cdFx0YWM6IDIwLFxuXHRcdGhwOiAzMzMsXG5cdFx0aGl0X2RpY2U6IFwiMThkMjBcIixcblx0XHRzcGVlZDogXCI0MCBmdC4sIGJ1cnJvdyA0MCBmdC4sIGZseSA4MCBmdC4sIHN3aW0gNDAgZnQuXCIsXG5cdFx0c3RhdHM6IFsyNiwgMTAsIDI2LCAxMCwgMTMsIDE0XSxcblx0XHRzYXZlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRkZXh0ZXJpdHk6IDYsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRjb25zdGl0dXRpb246IDE0LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0d2lzZG9tOiA3LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0Y2hhcmlzbWE6IDgsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0c2tpbGxzYXZlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRwZXJjZXB0aW9uOiAxMyxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHN0ZWFsdGg6IDYsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiY29sZFwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuXHRcdHNlbnNlczogXCJibGluZHNpZ2h0IDYwIGZ0LiwgZGFya3Zpc2lvbiAxMjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMjNcIixcblx0XHRsYW5ndWFnZXM6IFwiQ29tbW9uLCBEcmFjb25pY1wiLFxuXHRcdGNyOiBcIjIwXCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiSWNlIFdhbGtcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgZHJhZ29uIGNhbiBtb3ZlIGFjcm9zcyBhbmQgY2xpbWIgaWN5IHN1cmZhY2VzIHdpdGhvdXQgbmVlZGluZyB0byBtYWtlIGFuIGFiaWxpdHkgY2hlY2suIEFkZGl0aW9uYWxseSwgZGlmZmljdWx0IHRlcnJhaW4gY29tcG9zZWQgb2YgaWNlIG9yIHNub3cgZG9lc24ndCBjb3N0IGl0IGV4dHJhIG1vbWVudC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJMZWdlbmRhcnkgUmVzaXN0YW5jZSAoMy9EYXkpXCIsXG5cdFx0XHRcdGRlc2M6IFwiSWYgdGhlIGRyYWdvbiBmYWlscyBhIHNhdmluZyB0aHJvdywgaXQgY2FuIGNob29zZSB0byBzdWNjZWVkIGluc3RlYWQuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgZHJhZ29uIGNhbiB1c2UgaXRzIEZyaWdodGZ1bCBQcmVzZW5jZS4gSXQgdGhlbiBtYWtlcyB0aHJlZSBhdHRhY2tzOiBvbmUgd2l0aCBpdHMgYml0ZSBhbmQgdHdvIHdpdGggaXRzIGNsYXdzLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkJpdGVcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMTQgdG8gaGl0LCByZWFjaCAxNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTkgKDJkMTAgKyA4KSBwaWVyY2luZyBkYW1hZ2UgcGx1cyA5ICgyZDgpIGNvbGQgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDE0LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIyZDEwICsgMmQ4XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogOCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQ2xhd1wiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICsxNCB0byBoaXQsIHJlYWNoIDEwIGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxNSAoMmQ2ICsgOCkgc2xhc2hpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDE0LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIyZDZcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiA4LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJUYWlsXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzE0IHRvIGhpdCwgcmVhY2ggMjAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDE3ICgyZDggKyA4KSBibHVkZ2VvbmluZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMTQsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjJkOFwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDgsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkZyaWdodGZ1bCBQcmVzZW5jZVwiLFxuXHRcdFx0XHRkZXNjOiBcIkVhY2ggY3JlYXR1cmUgb2YgdGhlIGRyYWdvbidzIGNob2ljZSB0aGF0IGlzIHdpdGhpbiAxMjAgZmVldCBvZiB0aGUgZHJhZ29uIGFuZCBhd2FyZSBvZiBpdCBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxNiBXaXNkb20gc2F2aW5nIHRocm93IG9yIGJlY29tZSBmcmlnaHRlbmVkIGZvciAxIG1pbnV0ZS4gQSBjcmVhdHVyZSBjYW4gcmVwZWF0IHRoZSBzYXZpbmcgdGhyb3cgYXQgdGhlIGVuZCBvZiBlYWNoIG9mIGl0cyB0dXJucywgZW5kaW5nIHRoZSBlZmZlY3Qgb24gaXRzZWxmIG9uIGEgc3VjY2Vzcy4gSWYgYSBjcmVhdHVyZSdzIHNhdmluZyB0aHJvdyBpcyBzdWNjZXNzZnVsIG9yIHRoZSBlZmZlY3QgZW5kcyBmb3IgaXQsIHRoZSBjcmVhdHVyZSBpcyBpbW11bmUgdG8gdGhlIGRyYWdvbidzIEZyaWdodGZ1bCBQcmVzZW5jZSBmb3IgdGhlIG5leHQgMjQgaG91cnMgLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkNvbGQgQnJlYXRoIChSZWNoYXJnZSA1LTYpXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGRyYWdvbiBleGhhbGVzIGFuIGljeSBibGFzdCBpbiBhIDkwLWZvb3QgY29uZS4gRWFjaCBjcmVhdHVyZSBpbiB0aGF0IGFyZWEgbXVzdCBtYWtlIGEgREMgMjIgQ29uc3RpdHV0aW9uIHNhdmluZyB0aHJvdywgdGFraW5nIDcyIChsNmQ4KSBjb2xkIGRhbWFnZSBvbiBhIGZhaWxlZCBzYXZlLCBvciBoYWxmIGFzIG11Y2ggZGFtYWdlIG9uIGEgc3VjY2Vzc2Z1bCBvbmUuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMTZkOFwiLFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJBbmRyb3NwaGlueFwiLFxuXHRcdHNpemU6IFwiTGFyZ2VcIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJtb25zdHJvc2l0eVwiLFxuXHRcdHN1YnR5cGU6IFwiXCIsXG5cdFx0YWxpZ25tZW50OiBcImxhd2Z1bCBuZXV0cmFsXCIsXG5cdFx0YWM6IDE3LFxuXHRcdGhwOiAxOTksXG5cdFx0aGl0X2RpY2U6IFwiMTlkMTBcIixcblx0XHRzcGVlZDogXCI0MCBmdC4sIGZseSA2MCBmdC5cIixcblx0XHRzdGF0czogWzIyLCAxMCwgMjAsIDE2LCAxOCwgMjNdLFxuXHRcdHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdGRleHRlcml0eTogNixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdGNvbnN0aXR1dGlvbjogMTEsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRpbnRlbGxpZ2VuY2U6IDksXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHR3aXNkb206IDEwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdHNraWxsc2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0cmVsaWdpb246IDE1LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0cGVyY2VwdGlvbjogMTAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRhcmNhbmE6IDksXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6XG5cdFx0XHRcInBzeWNoaWM7IGJsdWRnZW9uaW5nLCBwaWVyY2luZywgYW5kIHNsYXNoaW5nIGZyb20gbm9ubWFnaWNhbCB3ZWFwb25zXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiY2hhcm1lZCwgZnJpZ2h0ZW5lZFwiLFxuXHRcdHNlbnNlczogXCJ0cnVlc2lnaHQgMTIwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDIwXCIsXG5cdFx0bGFuZ3VhZ2VzOiBcIkNvbW1vbiwgU3BoaW54XCIsXG5cdFx0Y3I6IFwiMTdcIixcblx0XHR0cmFpdHM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJJbnNjcnV0YWJsZVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBzcGhpbnggaXMgaW1tdW5lIHRvIGFueSBlZmZlY3QgdGhhdCB3b3VsZCBzZW5zZSBpdHMgZW1vdGlvbnMgb3IgcmVhZCBpdHMgdGhvdWdodHMsIGFzIHdlbGwgYXMgYW55IGRpdmluYXRpb24gc3BlbGwgdGhhdCBpdCByZWZ1c2VzLiBXaXNkb20gKEluc2lnaHQpIGNoZWNrcyBtYWRlIHRvIGFzY2VydGFpbiB0aGUgc3BoaW54J3MgaW50ZW50aW9ucyBvciBzaW5jZXJpdHkgaGF2ZSBkaXNhZHZhbnRhZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTWFnaWMgV2VhcG9uc1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBzcGhpbngncyB3ZWFwb24gYXR0YWNrcyBhcmUgbWFnaWNhbC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJNdWx0aWF0dGFja1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBzcGhpbnggbWFrZXMgdHdvIGNsYXcgYXR0YWNrcy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJDbGF3XCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzEyIHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTcgKDJkMTAgKyA2KSBzbGFzaGluZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMTIsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjJkMTBcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiA2LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJSb2FyICgzL0RheSlcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgc3BoaW54IGVtaXRzIGEgbWFnaWNhbCByb2FyLiBFYWNoIHRpbWUgaXQgcm9hcnMgYmVmb3JlIGZpbmlzaGluZyBhIGxvbmcgcmVzdCwgdGhlIHJvYXIgaXMgbG91ZGVyIGFuZCB0aGUgZWZmZWN0IGlzIGRpZmZlcmVudCwgYXMgZGV0YWlsZWQgYmVsb3cuIEVhY2ggY3JlYXR1cmUgd2l0aGluIDUwMCBmZWV0IG9mIHRoZSBzcGhpbnggYW5kIGFibGUgdG8gaGVhciB0aGUgcm9hciBtdXN0IG1ha2UgYSBzYXZpbmcgdGhyb3cuXFxuXFxuRmlyc3QgUm9hci4gRWFjaCBjcmVhdHVyZSB0aGF0IGZhaWxzIGEgREMgMTggV2lzZG9tIHNhdmluZyB0aHJvdyBpcyBmcmlnaHRlbmVkIGZvciAxIG1pbnV0ZS4gQSBmcmlnaHRlbmVkIGNyZWF0dXJlIGNhbiByZXBlYXQgdGhlIHNhdmluZyB0aHJvdyBhdCB0aGUgZW5kIG9mIGVhY2ggb2YgaXRzIHR1cm5zLCBlbmRpbmcgdGhlIGVmZmVjdCBvbiBpdHNlbGYgb24gYSBzdWNjZXNzLlxcblxcblNlY29uZCBSb2FyLiBFYWNoIGNyZWF0dXJlIHRoYXQgZmFpbHMgYSBEQyAxOCBXaXNkb20gc2F2aW5nIHRocm93IGlzIGRlYWZlbmVkIGFuZCBmcmlnaHRlbmVkIGZvciAxIG1pbnV0ZS4gQSBmcmlnaHRlbmVkIGNyZWF0dXJlIGlzIHBhcmFseXplZCBhbmQgY2FuIHJlcGVhdCB0aGUgc2F2aW5nIHRocm93IGF0IHRoZSBlbmQgb2YgZWFjaCBvZiBpdHMgdHVybnMsIGVuZGluZyB0aGUgZWZmZWN0IG9uIGl0c2VsZiBvbiBhIHN1Y2Nlc3MuXFxuXFxuVGhpcmQgUm9hci4gRWFjaCBjcmVhdHVyZSBtYWtlcyBhIERDIDE4IENvbnN0aXR1dGlvbiBzYXZpbmcgdGhyb3cuIE9uIGEgZmFpbGVkIHNhdmUsIGEgY3JlYXR1cmUgdGFrZXMgNDQgKDhkMTApIHRodW5kZXIgZGFtYWdlIGFuZCBpcyBrbm9ja2VkIHByb25lLiBPbiBhIHN1Y2Nlc3NmdWwgc2F2ZSwgdGhlIGNyZWF0dXJlIHRha2VzIGhhbGYgYXMgbXVjaCBkYW1hZ2UgYW5kIGlzbid0IGtub2NrZWQgcHJvbmUuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRsZWdlbmRhcnlfYWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkNsYXcgQXR0YWNrXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIHNwaGlueCBtYWtlcyBvbmUgY2xhdyBhdHRhY2suXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiVGVsZXBvcnQgKENvc3RzIDIgQWN0aW9ucylcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgc3BoaW54IG1hZ2ljYWxseSB0ZWxlcG9ydHMsIGFsb25nIHdpdGggYW55IGVxdWlwbWVudCBpdCBpcyB3ZWFyaW5nIG9yIGNhcnJ5aW5nLCB1cCB0byAxMjAgZmVldCB0byBhbiB1bm9jY3VwaWVkIHNwYWNlIGl0IGNhbiBzZWUuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQ2FzdCBhIFNwZWxsIChDb3N0cyAzIEFjdGlvbnMpXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIHNwaGlueCBjYXN0cyBhIHNwZWxsIGZyb20gaXRzIGxpc3Qgb2YgcHJlcGFyZWQgc3BlbGxzLCB1c2luZyBhIHNwZWxsIHNsb3QgYXMgbm9ybWFsLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0c3BlbGxzOiBbXG5cdFx0XHRcIlRoZSBzcGhpbnggaXMgYSAxMnRoLWxldmVsIHNwZWxsY2FzdGVyLiBJdHMgc3BlbGxjYXN0aW5nIGFiaWxpdHkgaXMgV2lzZG9tIChzcGVsbCBzYXZlIERDIDE4LCArMTAgdG8gaGl0IHdpdGggc3BlbGwgYXR0YWNrcykuIEl0IHJlcXVpcmVzIG5vIG1hdGVyaWFsIGNvbXBvbmVudHMgdG8gY2FzdCBpdHMgc3BlbGxzLiBUaGUgc3BoaW54IGhhcyB0aGUgZm9sbG93aW5nIGNsZXJpYyBzcGVsbHMgcHJlcGFyZWQ6XCIsXG5cdFx0XHR7XG5cdFx0XHRcdFwiQ2FudHJpcHMgKGF0IHdpbGwpXCI6XG5cdFx0XHRcdFx0XCJzYWNyZWQgZmxhbWUsIHNwYXJlIHRoZSBkeWluZywgdGhhdW1hdHVyZ3lcIixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdFwiMXN0IGxldmVsICg0IHNsb3RzKVwiOlxuXHRcdFx0XHRcdFwiY29tbWFuZCwgZGV0ZWN0IGV2aWwgYW5kIGdvb2QsIGRldGVjdCBtYWdpY1wiLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0XCIybmQgbGV2ZWwgKDMgc2xvdHMpXCI6IFwibGVzc2VyIHJlc3RvcmF0aW9uLCB6b25lIG9mIHRydXRoXCIsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRcIjNyZCBsZXZlbCAoMyBzbG90cylcIjogXCJkaXNwZWwgbWFnaWMsIHRvbmd1ZXNcIixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdFwiNHRoIGxldmVsICgzIHNsb3RzKVwiOiBcImJhbmlzaG1lbnQsIGZyZWVkb20gb2YgbW92ZW1lbnRcIixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdFwiNXRoIGxldmVsICgyIHNsb3RzKVwiOiBcImZsYW1lIHN0cmlrZSwgZ3JlYXRlciByZXN0b3JhdGlvblwiLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0XCI2dGggbGV2ZWwgKDEgc2xvdClcIjogXCJoZXJvZXMnIGZlYXN0XCIsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIkFuaW1hdGVkIEFybW9yXCIsXG5cdFx0c2l6ZTogXCJNZWRpdW1cIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJjb25zdHJ1Y3RcIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcblx0XHRhYzogMTgsXG5cdFx0aHA6IDMzLFxuXHRcdGhpdF9kaWNlOiBcIjZkOFwiLFxuXHRcdHNwZWVkOiBcIjI1IGZ0LlwiLFxuXHRcdHN0YXRzOiBbMTQsIDExLCAxMywgMSwgMywgMV0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwicG9pc29uLCBwc3ljaGljXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6XG5cdFx0XHRcImJsaW5kZWQsIGNoYXJtZWQsIGRlYWZlbmVkLCBleGhhdXN0aW9uLCBmcmlnaHRlbmVkLCBwYXJhbHl6ZWQsIHBldHJpZmllZCwgcG9pc29uZWRcIixcblx0XHRzZW5zZXM6IFwiYmxpbmRzaWdodCA2MCBmdC4gKGJsaW5kIGJleW9uZCB0aGlzIHJhZGl1cyksIHBhc3NpdmUgUGVyY2VwdGlvbiA2XCIsXG5cdFx0bGFuZ3VhZ2VzOiBcIlwiLFxuXHRcdGNyOiBcIjFcIixcblx0XHR0cmFpdHM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJBbnRpbWFnaWMgU3VzY2VwdGliaWxpdHlcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgYXJtb3IgaXMgaW5jYXBhY2l0YXRlZCB3aGlsZSBpbiB0aGUgYXJlYSBvZiBhbiBhbnRpbWFnaWMgZmllbGQuIElmIHRhcmdldGVkIGJ5IGRpc3BlbCBtYWdpYywgdGhlIGFybW9yIG11c3Qgc3VjY2VlZCBvbiBhIENvbnN0aXR1dGlvbiBzYXZpbmcgdGhyb3cgYWdhaW5zdCB0aGUgY2FzdGVyJ3Mgc3BlbGwgc2F2ZSBEQyBvciBmYWxsIHVuY29uc2Npb3VzIGZvciAxIG1pbnV0ZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJGYWxzZSBBcHBlYXJhbmNlXCIsXG5cdFx0XHRcdGRlc2M6IFwiV2hpbGUgdGhlIGFybW9yIHJlbWFpbnMgbW90aW9ubGVzcywgaXQgaXMgaW5kaXN0aW5ndWlzaGFibGUgZnJvbSBhIG5vcm1hbCBzdWl0IG9mIGFybW9yLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGFybW9yIG1ha2VzIHR3byBtZWxlZSBhdHRhY2tzLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlNsYW1cIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNCB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDUgKDFkNiArIDIpIGJsdWRnZW9uaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA0LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxZDZcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiAyLFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJBbmtoZWdcIixcblx0XHRzaXplOiBcIkxhcmdlXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwibW9uc3Ryb3NpdHlcIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcblx0XHRhYzogMTQsXG5cdFx0aHA6IDM5LFxuXHRcdGhpdF9kaWNlOiBcIjZkMTBcIixcblx0XHRzcGVlZDogXCIzMCBmdC4sIGJ1cnJvdyAxMCBmdC5cIixcblx0XHRzdGF0czogWzE3LCAxMSwgMTMsIDEsIDEzLCA2XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcblx0XHRzZW5zZXM6IFwiZGFya3Zpc2lvbiA2MCBmdC4sIHRyZW1vcnNlbnNlIDYwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDExXCIsXG5cdFx0bGFuZ3VhZ2VzOiBcIlwiLFxuXHRcdGNyOiBcIjJcIixcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQml0ZVwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs1IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTAgKDJkNiArIDMpIHNsYXNoaW5nIGRhbWFnZSBwbHVzIDMgKDFkNikgYWNpZCBkYW1hZ2UuIElmIHRoZSB0YXJnZXQgaXMgYSBMYXJnZSBvciBzbWFsbGVyIGNyZWF0dXJlLCBpdCBpcyBncmFwcGxlZCAoZXNjYXBlIERDIDEzKS4gVW50aWwgdGhpcyBncmFwcGxlIGVuZHMsIHRoZSBhbmtoZWcgY2FuIGJpdGUgb25seSB0aGUgZ3JhcHBsZWQgY3JlYXR1cmUgYW5kIGhhcyBhZHZhbnRhZ2Ugb24gYXR0YWNrIHJvbGxzIHRvIGRvIHNvLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDUsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjJkNiArIDFkNlwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDMsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkFjaWQgU3ByYXkgKFJlY2hhcmdlIDYpXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGFua2hlZyBzcGl0cyBhY2lkIGluIGEgbGluZSB0aGF0IGlzIDMwIGZ0LiBsb25nIGFuZCA1IGZ0LiB3aWRlLCBwcm92aWRlZCB0aGF0IGl0IGhhcyBubyBjcmVhdHVyZSBncmFwcGxlZC4gRWFjaCBjcmVhdHVyZSBpbiB0aGF0IGxpbmUgbXVzdCBtYWtlIGEgREMgMTMgRGV4dGVyaXR5IHNhdmluZyB0aHJvdywgdGFraW5nIDEwICgzZDYpIGFjaWQgZGFtYWdlIG9uIGEgZmFpbGVkIHNhdmUsIG9yIGhhbGYgYXMgbXVjaCBkYW1hZ2Ugb24gYSBzdWNjZXNzZnVsIG9uZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIzZDZcIixcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiQXBlXCIsXG5cdFx0c2l6ZTogXCJNZWRpdW1cIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJiZWFzdFwiLFxuXHRcdHN1YnR5cGU6IFwiXCIsXG5cdFx0YWxpZ25tZW50OiBcInVuYWxpZ25lZFwiLFxuXHRcdGFjOiAxMixcblx0XHRocDogMTksXG5cdFx0aGl0X2RpY2U6IFwiM2Q4XCIsXG5cdFx0c3BlZWQ6IFwiMzAgZnQuLCBjbGltYiAzMCBmdC5cIixcblx0XHRzdGF0czogWzE2LCAxNCwgMTQsIDYsIDEyLCA3XSxcblx0XHRza2lsbHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdGF0aGxldGljczogNSxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHBlcmNlcHRpb246IDMsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0c2Vuc2VzOiBcInBhc3NpdmUgUGVyY2VwdGlvbiAxM1wiLFxuXHRcdGxhbmd1YWdlczogXCJcIixcblx0XHRjcjogXCIxLzJcIixcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgYXBlIG1ha2VzIHR3byBmaXN0IGF0dGFja3MuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiRmlzdFwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs1IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogNiAoMWQ2ICsgMykgYmx1ZGdlb25pbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDUsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjFkNlwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDMsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlJvY2tcIixcblx0XHRcdFx0ZGVzYzogXCJSYW5nZWQgV2VhcG9uIEF0dGFjazogKzUgdG8gaGl0LCByYW5nZSAyNS81MCBmdC4sIG9uZSB0YXJnZXQuIEhpdDogNiAoMWQ2ICsgMykgYmx1ZGdlb25pbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDUsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjFkNlwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDMsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIkFyY2htYWdlXCIsXG5cdFx0c2l6ZTogXCJNZWRpdW1cIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJodW1hbm9pZFwiLFxuXHRcdHN1YnR5cGU6IFwiYW55IHJhY2VcIixcblx0XHRhbGlnbm1lbnQ6IFwiYW55IGFsaWdubWVudFwiLFxuXHRcdGFjOiAxMixcblx0XHRocDogOTksXG5cdFx0aGl0X2RpY2U6IFwiMThkOCArIDE4XCIsXG5cdFx0c3BlZWQ6IFwiMzAgZnQuXCIsXG5cdFx0c3RhdHM6IFsxMCwgMTQsIDEyLCAyMCwgMTUsIDE2XSxcblx0XHRzYXZlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRpbnRlbGxpZ2VuY2U6IDksXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHR3aXNkb206IDYsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0c2tpbGxzYXZlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRhcmNhbmE6IDEzLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0aGlzdG9yeTogMTMsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6XG5cdFx0XHRcImRhbWFnZSBmcm9tIHNwZWxsczsgbm9uIG1hZ2ljYWwgYmx1ZGdlb25pbmcsIHBpZXJjaW5nLCBhbmQgc2xhc2hpbmcgKGZyb20gc3RvbmVza2luKVwiLFxuXHRcdGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuXHRcdHNlbnNlczogXCJwYXNzaXZlIFBlcmNlcHRpb24gMTJcIixcblx0XHRsYW5ndWFnZXM6IFwiYW55IHNpeCBsYW5ndWFnZXNcIixcblx0XHRjcjogXCIxMlwiLFxuXHRcdHRyYWl0czogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIk1hZ2ljIFJlc2lzdGFuY2VcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgYXJjaG1hZ2UgaGFzIGFkdmFudGFnZSBvbiBzYXZpbmcgdGhyb3dzIGFnYWluc3Qgc3BlbGxzIGFuZCBvdGhlciBtYWdpY2FsIGVmZmVjdHMuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiRGFnZ2VyXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgb3IgUmFuZ2VkIFdlYXBvbiBBdHRhY2s6ICs2IHRvIGhpdCwgcmVhY2ggNSBmdC4gb3IgcmFuZ2UgMjAvNjAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDQgKDFkNCArIDIpIHBpZXJjaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA2LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxZDRcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiAyLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdHNwZWxsczogW1xuXHRcdFx0XCJUaGUgYXJjaG1hZ2UgaXMgYW4gMTh0aC1sZXZlbCBzcGVsbGNhc3Rlci4gSXRzIHNwZWxsY2FzdGluZyBhYmlsaXR5IGlzIEludGVsbGlnZW5jZSAoc3BlbGwgc2F2ZSBEQyAxNywgKzkgdG8gaGl0IHdpdGggc3BlbGwgYXR0YWNrcykuIFRoZSBhcmNobWFnZSBjYW4gY2FzdCBkaXNndWlzZSBzZWxmIGFuZCBpbnZpc2liaWxpdHkgYXQgd2lsbCBhbmQgaGFzIHRoZSBmb2xsb3dpbmcgd2l6YXJkIHNwZWxscyBwcmVwYXJlZDpcIixcblx0XHRcdHtcblx0XHRcdFx0XCJDYW50cmlwcyAoYXQgd2lsbClcIjpcblx0XHRcdFx0XHRcImZpcmUgYm9sdCwgbGlnaHQsIG1hZ2UgaGFuZCwgcHJlc3RpZGlnaXRhdGlvbiwgc2hvY2tpbmcgZ3Jhc3BcIixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdFwiMXN0IGxldmVsICg0IHNsb3RzKVwiOlxuXHRcdFx0XHRcdFwiZGV0ZWN0IG1hZ2ljLCBpZGVudGlmeSwgbWFnZSBhcm1vciosIG1hZ2ljIG1pc3NpbGVcIixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdFwiMm5kIGxldmVsICgzIHNsb3RzKVwiOlxuXHRcdFx0XHRcdFwiZGV0ZWN0IHRob3VnaHRzLCBtaXJyb3IgaW1hZ2UsIG1pc3R5IHN0ZXBcIixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdFwiM3JkIGxldmVsICgzIHNsb3RzKVwiOiBcImNvdW50ZXJzcGVsbCxmbHksIGxpZ2h0bmluZyBib2x0XCIsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRcIjR0aCBsZXZlbCAoMyBzbG90cylcIjogXCJiYW5pc2htZW50LCBmaXJlIHNoaWVsZCwgc3RvbmVza2luKlwiLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0XCI1dGggbGV2ZWwgKDMgc2xvdHMpXCI6IFwiY29uZSBvZiBjb2xkLCBzY3J5aW5nLCB3YWxsIG9mIGZvcmNlXCIsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRcIjZ0aCBsZXZlbCAoMSBzbG90KVwiOiBcImdsb2JlIG9mIGludnVsbmVyYWJpbGl0eVwiLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0XCI3dGggbGV2ZWwgKDEgc2xvdClcIjogXCJ0ZWxlcG9ydFwiLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0XCI4dGggbGV2ZWwgKDEgc2xvdClcIjogXCJtaW5kIGJsYW5rKlwiLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0XCI5dGggbGV2ZWwgKDEgc2xvdClcIjogXCJ0aW1lIHN0b3BcIixcblx0XHRcdH0sXG5cdFx0XHRcIiogVGhlIGFyY2htYWdlIGNhc3RzIHRoZXNlIHNwZWxscyBvbiBpdHNlbGYgYmVmb3JlIGNvbWJhdC5cIixcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJBc3Nhc3NpblwiLFxuXHRcdHNpemU6IFwiTWVkaXVtXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwiaHVtYW5vaWRcIixcblx0XHRzdWJ0eXBlOiBcImFueSByYWNlXCIsXG5cdFx0YWxpZ25tZW50OiBcImFueSBub24tZ29vZCBhbGlnbm1lbnRcIixcblx0XHRhYzogMTUsXG5cdFx0aHA6IDc4LFxuXHRcdGhpdF9kaWNlOiBcIjEyZDhcIixcblx0XHRzcGVlZDogXCIzMCBmdC5cIixcblx0XHRzdGF0czogWzExLCAxNiwgMTQsIDEzLCAxMSwgMTBdLFxuXHRcdHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdGRleHRlcml0eTogNixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdGludGVsbGlnZW5jZTogNCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRza2lsbHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdGFjcm9iYXRpY3M6IDYsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRkZWNlcHRpb246IDMsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRwZXJjZXB0aW9uOiAzLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0c3RlYWx0aDogOSxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJwb2lzb25cIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcblx0XHRzZW5zZXM6IFwicGFzc2l2ZSBQZXJjZXB0aW9uIDEzXCIsXG5cdFx0bGFuZ3VhZ2VzOiBcIlRoaWV2ZXMnIGNhbnQgcGx1cyBhbnkgdHdvIGxhbmd1YWdlc1wiLFxuXHRcdGNyOiBcIjhcIixcblx0XHR0cmFpdHM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJBc3Nhc3NpbmF0ZVwiLFxuXHRcdFx0XHRkZXNjOiBcIkR1cmluZyBpdHMgZmlyc3QgdHVybiwgdGhlIGFzc2Fzc2luIGhhcyBhZHZhbnRhZ2Ugb24gYXR0YWNrIHJvbGxzIGFnYWluc3QgYW55IGNyZWF0dXJlIHRoYXQgaGFzbid0IHRha2VuIGEgdHVybi4gQW55IGhpdCB0aGUgYXNzYXNzaW4gc2NvcmVzIGFnYWluc3QgYSBzdXJwcmlzZWQgY3JlYXR1cmUgaXMgYSBjcml0aWNhbCBoaXQuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiRXZhc2lvblwiLFxuXHRcdFx0XHRkZXNjOiBcIklmIHRoZSBhc3Nhc3NpbiBpcyBzdWJqZWN0ZWQgdG8gYW4gZWZmZWN0IHRoYXQgYWxsb3dzIGl0IHRvIG1ha2UgYSBEZXh0ZXJpdHkgc2F2aW5nIHRocm93IHRvIHRha2Ugb25seSBoYWxmIGRhbWFnZSwgdGhlIGFzc2Fzc2luIGluc3RlYWQgdGFrZXMgbm8gZGFtYWdlIGlmIGl0IHN1Y2NlZWRzIG9uIHRoZSBzYXZpbmcgdGhyb3csIGFuZCBvbmx5IGhhbGYgZGFtYWdlIGlmIGl0IGZhaWxzLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlNuZWFrIEF0dGFjayAoMS9UdXJuKVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBhc3Nhc3NpbiBkZWFscyBhbiBleHRyYSAxMyAoNGQ2KSBkYW1hZ2Ugd2hlbiBpdCBoaXRzIGEgdGFyZ2V0IHdpdGggYSB3ZWFwb24gYXR0YWNrIGFuZCBoYXMgYWR2YW50YWdlIG9uIHRoZSBhdHRhY2sgcm9sbCwgb3Igd2hlbiB0aGUgdGFyZ2V0IGlzIHdpdGhpbiA1IGZ0LiBvZiBhbiBhbGx5IG9mIHRoZSBhc3Nhc3NpbiB0aGF0IGlzbid0IGluY2FwYWNpdGF0ZWQgYW5kIHRoZSBhc3Nhc3NpbiBkb2Vzbid0IGhhdmUgZGlzYWR2YW50YWdlIG9uIHRoZSBhdHRhY2sgcm9sbC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCI0ZDZcIixcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgYXNzYXNzaW4gbWFrZXMgdHdvIHNob3J0c3dvcmQgYXR0YWNrcy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJTaG9ydHN3b3JkXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzYgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiA2ICgxZDYgKyAzKSBwaWVyY2luZyBkYW1hZ2UsIGFuZCB0aGUgdGFyZ2V0IG11c3QgbWFrZSBhIERDIDE1IENvbnN0aXR1dGlvbiBzYXZpbmcgdGhyb3csIHRha2luZyAyNCAoN2Q2KSBwb2lzb24gZGFtYWdlIG9uIGEgZmFpbGVkIHNhdmUsIG9yIGhhbGYgYXMgbXVjaCBkYW1hZ2Ugb24gYSBzdWNjZXNzZnVsIG9uZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA2LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxZDZcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiAzLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJMaWdodCBDcm9zc2Jvd1wiLFxuXHRcdFx0XHRkZXNjOiBcIlJhbmdlZCBXZWFwb24gQXR0YWNrOiArNiB0byBoaXQsIHJhbmdlIDgwLzMyMCBmdC4sIG9uZSB0YXJnZXQuIEhpdDogNyAoMWQ4ICsgMykgcGllcmNpbmcgZGFtYWdlLCBhbmQgdGhlIHRhcmdldCBtdXN0IG1ha2UgYSBEQyAxNSBDb25zdGl0dXRpb24gc2F2aW5nIHRocm93LCB0YWtpbmcgMjQgKDdkNikgcG9pc29uIGRhbWFnZSBvbiBhIGZhaWxlZCBzYXZlLCBvciBoYWxmIGFzIG11Y2ggZGFtYWdlIG9uIGEgc3VjY2Vzc2Z1bCBvbmUuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNixcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMWQ4XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogMyxcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiQXdha2VuZWQgU2hydWJcIixcblx0XHRzaXplOiBcIlNtYWxsXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwicGxhbnRcIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcblx0XHRhYzogOSxcblx0XHRocDogMTAsXG5cdFx0aGl0X2RpY2U6IFwiM2Q2XCIsXG5cdFx0c3BlZWQ6IFwiMjAgZnQuXCIsXG5cdFx0c3RhdHM6IFszLCA4LCAxMSwgMTAsIDEwLCA2XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcImZpcmVcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwicGllcmNpbmdcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcblx0XHRzZW5zZXM6IFwicGFzc2l2ZSBQZXJjZXB0aW9uIDEwXCIsXG5cdFx0bGFuZ3VhZ2VzOiBcIm9uZSBsYW5ndWFnZSBrbm93biBieSBpdHMgY3JlYXRvclwiLFxuXHRcdGNyOiBcIjBcIixcblx0XHR0cmFpdHM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJGYWxzZSBBcHBlYXJhbmNlXCIsXG5cdFx0XHRcdGRlc2M6IFwiV2hpbGUgdGhlIHNocnViIHJlbWFpbnMgbW90aW9ubGVzcywgaXQgaXMgaW5kaXN0aW5ndWlzaGFibGUgZnJvbSBhIG5vcm1hbCBzaHJ1Yi5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJSYWtlXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzEgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxICgxZDQgXHUyMDE0IDEpIHNsYXNoaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAxLFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxZDRcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiAtMSxcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiQXdha2VuZWQgVHJlZVwiLFxuXHRcdHNpemU6IFwiSHVnZVwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcInBsYW50XCIsXG5cdFx0c3VidHlwZTogXCJcIixcblx0XHRhbGlnbm1lbnQ6IFwidW5hbGlnbmVkXCIsXG5cdFx0YWM6IDEzLFxuXHRcdGhwOiA1OSxcblx0XHRoaXRfZGljZTogXCI3ZDEyXCIsXG5cdFx0c3BlZWQ6IFwiMjAgZnQuXCIsXG5cdFx0c3RhdHM6IFsxOSwgNiwgMTUsIDEwLCAxMCwgN10sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJmaXJlXCIsXG5cdFx0ZGFtYWdlX3Jlc2lzdGFuY2VzOiBcImJsdWRnZW9uaW5nLCBwaWVyY2luZ1wiLFxuXHRcdGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuXHRcdHNlbnNlczogXCJwYXNzaXZlIFBlcmNlcHRpb24gMTBcIixcblx0XHRsYW5ndWFnZXM6IFwib25lIGxhbmd1YWdlIGtub3duIGJ5IGl0cyBjcmVhdG9yXCIsXG5cdFx0Y3I6IFwiMlwiLFxuXHRcdHRyYWl0czogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkZhbHNlIEFwcGVhcmFuY2VcIixcblx0XHRcdFx0ZGVzYzogXCJXaGlsZSB0aGUgdHJlZSByZW1haW5zIG1vdGlvbmxlc3MsIGl0IGlzIGluZGlzdGluZ3Vpc2hhYmxlIGZyb20gYSBub3JtYWwgdHJlZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJTbGFtXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzYgdG8gaGl0LCByZWFjaCAxMCBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTQgKDNkNiArIDQpIGJsdWRnZW9uaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA2LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIzZDZcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiA0LFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJBeGUgQmVha1wiLFxuXHRcdHNpemU6IFwiTGFyZ2VcIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJiZWFzdFwiLFxuXHRcdHN1YnR5cGU6IFwiXCIsXG5cdFx0YWxpZ25tZW50OiBcInVuYWxpZ25lZFwiLFxuXHRcdGFjOiAxMSxcblx0XHRocDogMTksXG5cdFx0aGl0X2RpY2U6IFwiM2QxMFwiLFxuXHRcdHNwZWVkOiBcIjUwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbMTQsIDEyLCAxMiwgMiwgMTAsIDVdLFxuXHRcdGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuXHRcdGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuXHRcdHNlbnNlczogXCJwYXNzaXZlIFBlcmNlcHRpb24gMTBcIixcblx0XHRsYW5ndWFnZXM6IFwiXCIsXG5cdFx0Y3I6IFwiMS80XCIsXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkJlYWtcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNCB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDYgKDFkOCArIDIpIHNsYXNoaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA0LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxZDhcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiAyLFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJBemVyXCIsXG5cdFx0c2l6ZTogXCJNZWRpdW1cIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJlbGVtZW50YWxcIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJsYXdmdWwgbmV1dHJhbFwiLFxuXHRcdGFjOiAxNyxcblx0XHRocDogMzksXG5cdFx0aGl0X2RpY2U6IFwiNmQ4XCIsXG5cdFx0c3BlZWQ6IFwiMzAgZnQuXCIsXG5cdFx0c3RhdHM6IFsxNywgMTIsIDE1LCAxMiwgMTMsIDEwXSxcblx0XHRzYXZlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRjb25zdGl0dXRpb246IDQsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiZmlyZSwgcG9pc29uXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwicG9pc29uZWRcIixcblx0XHRzZW5zZXM6IFwicGFzc2l2ZSBQZXJjZXB0aW9uIDExXCIsXG5cdFx0bGFuZ3VhZ2VzOiBcIklnbmFuXCIsXG5cdFx0Y3I6IFwiMlwiLFxuXHRcdHRyYWl0czogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkhlYXRlZCBCb2R5XCIsXG5cdFx0XHRcdGRlc2M6IFwiQSBjcmVhdHVyZSB0aGF0IHRvdWNoZXMgdGhlIGF6ZXIgb3IgaGl0cyBpdCB3aXRoIGEgbWVsZWUgYXR0YWNrIHdoaWxlIHdpdGhpbiA1IGZ0LiBvZiBpdCB0YWtlcyA1ICgxZDEwKSBmaXJlIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxZDEwXCIsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkhlYXRlZCBXZWFwb25zXCIsXG5cdFx0XHRcdGRlc2M6IFwiV2hlbiB0aGUgYXplciBoaXRzIHdpdGggYSBtZXRhbCBtZWxlZSB3ZWFwb24sIGl0IGRlYWxzIGFuIGV4dHJhIDMgKDFkNikgZmlyZSBkYW1hZ2UgKGluY2x1ZGVkIGluIHRoZSBhdHRhY2spLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIklsbHVtaW5hdGlvblwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBhemVyIHNoZWRzIGJyaWdodCBsaWdodCBpbiBhIDEwLWZvb3QgcmFkaXVzIGFuZCBkaW0gbGlnaHQgZm9yIGFuIGFkZGl0aW9uYWwgMTAgZnQuLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIldhcmhhbW1lclwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs1IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogNyAoMWQ4ICsgMykgYmx1ZGdlb25pbmcgZGFtYWdlLCBvciA4ICgxZDEwICsgMykgYmx1ZGdlb25pbmcgZGFtYWdlIGlmIHVzZWQgd2l0aCB0d28gaGFuZHMgdG8gbWFrZSBhIG1lbGVlIGF0dGFjaywgcGx1cyAzICgxZDYpIGZpcmUgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDUsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjFkOCArIDFkNlwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDMsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIkJhYm9vblwiLFxuXHRcdHNpemU6IFwiU21hbGxcIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJiZWFzdFwiLFxuXHRcdHN1YnR5cGU6IFwiXCIsXG5cdFx0YWxpZ25tZW50OiBcInVuYWxpZ25lZFwiLFxuXHRcdGFjOiAxMixcblx0XHRocDogMyxcblx0XHRoaXRfZGljZTogXCIxZDZcIixcblx0XHRzcGVlZDogXCIzMCBmdC4sIGNsaW1iIDMwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbOCwgMTQsIDExLCA0LCAxMiwgNl0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0c2Vuc2VzOiBcInBhc3NpdmUgUGVyY2VwdGlvbiAxMVwiLFxuXHRcdGxhbmd1YWdlczogXCJcIixcblx0XHRjcjogXCIwXCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiUGFjayBUYWN0aWNzXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGJhYm9vbiBoYXMgYWR2YW50YWdlIG9uIGFuIGF0dGFjayByb2xsIGFnYWluc3QgYSBjcmVhdHVyZSBpZiBhdCBsZWFzdCBvbmUgb2YgdGhlIGJhYm9vbidzIGFsbGllcyBpcyB3aXRoaW4gNSBmdC4gb2YgdGhlIGNyZWF0dXJlIGFuZCB0aGUgYWxseSBpc24ndCBpbmNhcGFjaXRhdGVkLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkJpdGVcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMSB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDEgKDFkNCBcdTIwMTQgMSkgcGllcmNpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDEsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjFkNFwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IC0xLFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJCYWRnZXJcIixcblx0XHRzaXplOiBcIlRpbnlcIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJiZWFzdFwiLFxuXHRcdHN1YnR5cGU6IFwiXCIsXG5cdFx0YWxpZ25tZW50OiBcInVuYWxpZ25lZFwiLFxuXHRcdGFjOiAxMCxcblx0XHRocDogMyxcblx0XHRoaXRfZGljZTogXCIxZDRcIixcblx0XHRzcGVlZDogXCIyMCBmdC4sIGJ1cnJvdyA1IGZ0LlwiLFxuXHRcdHN0YXRzOiBbNCwgMTEsIDEyLCAyLCAxMiwgNV0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0c2Vuc2VzOiBcImRhcmt2aXNpb24gMzAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTFcIixcblx0XHRsYW5ndWFnZXM6IFwiXCIsXG5cdFx0Y3I6IFwiMFwiLFxuXHRcdHRyYWl0czogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIktlZW4gU21lbGxcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgYmFkZ2VyIGhhcyBhZHZhbnRhZ2Ugb24gV2lzZG9tIChQZXJjZXB0aW9uKSBjaGVja3MgdGhhdCByZWx5IG9uIHNtZWxsLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkJpdGVcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMiB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDEgcGllcmNpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogMSxcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiQmFsb3JcIixcblx0XHRzaXplOiBcIkh1Z2VcIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJmaWVuZFwiLFxuXHRcdHN1YnR5cGU6IFwiZGVtb25cIixcblx0XHRhbGlnbm1lbnQ6IFwiY2hhb3RpYyBldmlsXCIsXG5cdFx0YWM6IDE5LFxuXHRcdGhwOiAyNjIsXG5cdFx0aGl0X2RpY2U6IFwiMjFkMTJcIixcblx0XHRzcGVlZDogXCI0MCBmdC4sIGZseSA4MCBmdC5cIixcblx0XHRzdGF0czogWzI2LCAxNSwgMjIsIDIwLCAxNiwgMjJdLFxuXHRcdHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdHN0cmVuZ3RoOiAxNCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdGNvbnN0aXR1dGlvbjogMTIsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHR3aXNkb206IDksXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRjaGFyaXNtYTogMTIsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6XG5cdFx0XHRcImNvbGQsIGxpZ2h0bmluZzsgYmx1ZGdlb25pbmcsIHBpZXJjaW5nLCBhbmQgc2xhc2hpbmcgZnJvbSBub25tYWdpY2FsIHdlYXBvbnNcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJmaXJlLCBwb2lzb25cIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczogXCJwb2lzb25lZFwiLFxuXHRcdHNlbnNlczogXCJ0cnVlc2lnaHQgMTIwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDEzXCIsXG5cdFx0bGFuZ3VhZ2VzOiBcIkFieXNzYWwsIHRlbGVwYXRoeSAxMjAgZnQuXCIsXG5cdFx0Y3I6IFwiMTlcIixcblx0XHR0cmFpdHM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJEZWF0aCBUaHJvZXNcIixcblx0XHRcdFx0ZGVzYzogXCJXaGVuIHRoZSBiYWxvciBkaWVzLCBpdCBleHBsb2RlcywgYW5kIGVhY2ggY3JlYXR1cmUgd2l0aGluIDMwIGZlZXQgb2YgaXQgbXVzdCBtYWtlIGEgREMgMjAgRGV4dGVyaXR5IHNhdmluZyB0aHJvdywgdGFraW5nIDcwICgyMGQ2KSBmaXJlIGRhbWFnZSBvbiBhIGZhaWxlZCBzYXZlLCBvciBoYWxmIGFzIG11Y2ggZGFtYWdlIG9uIGEgc3VjY2Vzc2Z1bCBvbmUuIFRoZSBleHBsb3Npb24gaWduaXRlcyBmbGFtbWFibGUgb2JqZWN0cyBpbiB0aGF0IGFyZWEgdGhhdCBhcmVuJ3QgYmVpbmcgd29ybiBvciBjYXJyaWVkLCBhbmQgaXQgZGVzdHJveXMgdGhlIGJhbG9yJ3Mgd2VhcG9ucy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIyMGQ2XCIsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkZpcmUgQXVyYVwiLFxuXHRcdFx0XHRkZXNjOiBcIkF0IHRoZSBzdGFydCBvZiBlYWNoIG9mIHRoZSBiYWxvcidzIHR1cm5zLCBlYWNoIGNyZWF0dXJlIHdpdGhpbiA1IGZlZXQgb2YgaXQgdGFrZXMgMTAgKDNkNikgZmlyZSBkYW1hZ2UsIGFuZCBmbGFtbWFibGUgb2JqZWN0cyBpbiB0aGUgYXVyYSB0aGF0IGFyZW4ndCBiZWluZyB3b3JuIG9yIGNhcnJpZWQgaWduaXRlLiBBIGNyZWF0dXJlIHRoYXQgdG91Y2hlcyB0aGUgYmFsb3Igb3IgaGl0cyBpdCB3aXRoIGEgbWVsZWUgYXR0YWNrIHdoaWxlIHdpdGhpbiA1IGZlZXQgb2YgaXQgdGFrZXMgMTAgKDNkNikgZmlyZSBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiM2Q2XCIsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIk1hZ2ljIFJlc2lzdGFuY2VcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgYmFsb3IgaGFzIGFkdmFudGFnZSBvbiBzYXZpbmcgdGhyb3dzIGFnYWluc3Qgc3BlbGxzIGFuZCBvdGhlciBtYWdpY2FsIGVmZmVjdHMuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTWFnaWMgV2VhcG9uc1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBiYWxvcidzIHdlYXBvbiBhdHRhY2tzIGFyZSBtYWdpY2FsLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGJhbG9yIG1ha2VzIHR3byBhdHRhY2tzOiBvbmUgd2l0aCBpdHMgbG9uZ3N3b3JkIGFuZCBvbmUgd2l0aCBpdHMgd2hpcC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJMb25nc3dvcmRcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMTQgdG8gaGl0LCByZWFjaCAxMCBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMjEgKDNkOCArIDgpIHNsYXNoaW5nIGRhbWFnZSBwbHVzIDEzICgzZDgpIGxpZ2h0bmluZyBkYW1hZ2UuIElmIHRoZSBiYWxvciBzY29yZXMgYSBjcml0aWNhbCBoaXQsIGl0IHJvbGxzIGRhbWFnZSBkaWNlIHRocmVlIHRpbWVzLCBpbnN0ZWFkIG9mIHR3aWNlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDE0LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIzZDggKyAzZDhcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiA4LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJXaGlwXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzE0IHRvIGhpdCwgcmVhY2ggMzAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDE1ICgyZDYgKyA4KSBzbGFzaGluZyBkYW1hZ2UgcGx1cyAxMCAoM2Q2KSBmaXJlIGRhbWFnZSwgYW5kIHRoZSB0YXJnZXQgbXVzdCBzdWNjZWVkIG9uIGEgREMgMjAgU3RyZW5ndGggc2F2aW5nIHRocm93IG9yIGJlIHB1bGxlZCB1cCB0byAyNSBmZWV0IHRvd2FyZCB0aGUgYmFsb3IuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMTQsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjJkNiArIDNkNlwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDgsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlRlbGVwb3J0XCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGJhbG9yIG1hZ2ljYWxseSB0ZWxlcG9ydHMsIGFsb25nIHdpdGggYW55IGVxdWlwbWVudCBpdCBpcyB3ZWFyaW5nIG9yIGNhcnJ5aW5nLCB1cCB0byAxMjAgZmVldCB0byBhbiB1bm9jY3VwaWVkIHNwYWNlIGl0IGNhbiBzZWUuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiVmFyaWFudDogU3VtbW9uIERlbW9uICgxL0RheSlcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgZGVtb24gY2hvb3NlcyB3aGF0IHRvIHN1bW1vbiBhbmQgYXR0ZW1wdHMgYSBtYWdpY2FsIHN1bW1vbmluZy5cXG5BIGJhbG9yIGhhcyBhIDUwIHBlcmNlbnQgY2hhbmNlIG9mIHN1bW1vbmluZyAxZDggdnJvY2tzLCAxZDYgaGV6cm91cywgMWQ0IGdsYWJyZXp1cywgMWQzIG5hbGZlc2huZWVzLCAxZDIgbWFyaWxpdGhzLCBvciBvbmUgZ29yaXN0cm8uXFxuQSBzdW1tb25lZCBkZW1vbiBhcHBlYXJzIGluIGFuIHVub2NjdXBpZWQgc3BhY2Ugd2l0aGluIDYwIGZlZXQgb2YgaXRzIHN1bW1vbmVyLCBhY3RzIGFzIGFuIGFsbHkgb2YgaXRzIHN1bW1vbmVyLCBhbmQgY2FuJ3Qgc3VtbW9uIG90aGVyIGRlbW9ucy4gSXQgcmVtYWlucyBmb3IgMSBtaW51dGUsIHVudGlsIGl0IG9yIGl0cyBzdW1tb25lciBkaWVzLCBvciB1bnRpbCBpdHMgc3VtbW9uZXIgZGlzbWlzc2VzIGl0IGFzIGFuIGFjdGlvbi5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJCYW5kaXRcIixcblx0XHRzaXplOiBcIk1lZGl1bVwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcImh1bWFub2lkXCIsXG5cdFx0c3VidHlwZTogXCJhbnkgcmFjZVwiLFxuXHRcdGFsaWdubWVudDogXCJhbnkgbm9uLWxhd2Z1bCBhbGlnbm1lbnRcIixcblx0XHRhYzogMTIsXG5cdFx0aHA6IDExLFxuXHRcdGhpdF9kaWNlOiBcIjJkOFwiLFxuXHRcdHNwZWVkOiBcIjMwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbMTEsIDEyLCAxMiwgMTAsIDEwLCAxMF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0c2Vuc2VzOiBcInBhc3NpdmUgUGVyY2VwdGlvbiAxMFwiLFxuXHRcdGxhbmd1YWdlczogXCJhbnkgb25lIGxhbmd1YWdlICh1c3VhbGx5IENvbW1vbilcIixcblx0XHRjcjogXCIxLzhcIixcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiU2NpbWl0YXJcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMyB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDQgKDFkNiArIDEpIHNsYXNoaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAzLFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxZDZcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiAxLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJMaWdodCBDcm9zc2Jvd1wiLFxuXHRcdFx0XHRkZXNjOiBcIlJhbmdlZCBXZWFwb24gQXR0YWNrOiArMyB0byBoaXQsIHJhbmdlIDgwIGZ0Li8zMjAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDUgKDFkOCArIDEpIHBpZXJjaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAzLFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxZDhcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiAxLFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJCYW5kaXQgQ2FwdGFpblwiLFxuXHRcdHNpemU6IFwiTWVkaXVtXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwiaHVtYW5vaWRcIixcblx0XHRzdWJ0eXBlOiBcImFueSByYWNlXCIsXG5cdFx0YWxpZ25tZW50OiBcImFueSBub24tbGF3ZnVsIGFsaWdubWVudFwiLFxuXHRcdGFjOiAxNSxcblx0XHRocDogNjUsXG5cdFx0aGl0X2RpY2U6IFwiMTBkOFwiLFxuXHRcdHNwZWVkOiBcIjMwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbMTUsIDE2LCAxNCwgMTQsIDExLCAxNF0sXG5cdFx0c2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0c3RyZW5ndGg6IDQsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRkZXh0ZXJpdHk6IDUsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHR3aXNkb206IDIsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0c2tpbGxzYXZlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRhdGhsZXRpY3M6IDQsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRkZWNlcHRpb246IDQsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0c2Vuc2VzOiBcInBhc3NpdmUgUGVyY2VwdGlvbiAxMFwiLFxuXHRcdGxhbmd1YWdlczogXCJhbnkgdHdvIGxhbmd1YWdlc1wiLFxuXHRcdGNyOiBcIjJcIixcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgY2FwdGFpbiBtYWtlcyB0aHJlZSBtZWxlZSBhdHRhY2tzOiB0d28gd2l0aCBpdHMgc2NpbWl0YXIgYW5kIG9uZSB3aXRoIGl0cyBkYWdnZXIuIE9yIHRoZSBjYXB0YWluIG1ha2VzIHR3byByYW5nZWQgYXR0YWNrcyB3aXRoIGl0cyBkYWdnZXJzLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlNjaW1pdGFyXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzUgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiA2ICgxZDYgKyAzKSBzbGFzaGluZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNSxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMWQ2XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogMyxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiRGFnZ2VyXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgb3IgUmFuZ2VkIFdlYXBvbiBBdHRhY2s6ICs1IHRvIGhpdCwgcmVhY2ggNSBmdC4gb3IgcmFuZ2UgMjAvNjAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDUgKDFkNCArIDMpIHBpZXJjaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA1LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxZDRcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiAzLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdHJlYWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlBhcnJ5XCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGNhcHRhaW4gYWRkcyAyIHRvIGl0cyBBQyBhZ2FpbnN0IG9uZSBtZWxlZSBhdHRhY2sgdGhhdCB3b3VsZCBoaXQgaXQuIFRvIGRvIHNvLCB0aGUgY2FwdGFpbiBtdXN0IHNlZSB0aGUgYXR0YWNrZXIgYW5kIGJlIHdpZWxkaW5nIGEgbWVsZWUgd2VhcG9uLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIkJhcmJlZCBEZXZpbFwiLFxuXHRcdHNpemU6IFwiTWVkaXVtXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwiZmllbmRcIixcblx0XHRzdWJ0eXBlOiBcImRldmlsXCIsXG5cdFx0YWxpZ25tZW50OiBcImxhd2Z1bCBldmlsXCIsXG5cdFx0YWM6IDE1LFxuXHRcdGhwOiAxMTAsXG5cdFx0aGl0X2RpY2U6IFwiMTNkOFwiLFxuXHRcdHNwZWVkOiBcIjMwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbMTYsIDE3LCAxOCwgMTIsIDE0LCAxNF0sXG5cdFx0c2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0c3RyZW5ndGg6IDYsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRjb25zdGl0dXRpb246IDcsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHR3aXNkb206IDUsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRjaGFyaXNtYTogNSxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRza2lsbHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdGRlY2VwdGlvbjogNSxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdGluc2lnaHQ6IDUsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRwZXJjZXB0aW9uOiA4LFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX3Jlc2lzdGFuY2VzOlxuXHRcdFx0XCJjb2xkOyBibHVkZ2VvbmluZywgcGllcmNpbmcsIGFuZCBzbGFzaGluZyBmcm9tIG5vbm1hZ2ljYWwgd2VhcG9ucyB0aGF0IGFyZW4ndCBzaWx2ZXJlZFwiLFxuXHRcdGRhbWFnZV9pbW11bml0aWVzOiBcImZpcmUsIHBvaXNvblwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcInBvaXNvbmVkXCIsXG5cdFx0c2Vuc2VzOiBcImRhcmt2aXNpb24gMTIwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDE4XCIsXG5cdFx0bGFuZ3VhZ2VzOiBcIkluZmVybmFsLCB0ZWxlcGF0aHkgMTIwIGZ0LlwiLFxuXHRcdGNyOiBcIjVcIixcblx0XHR0cmFpdHM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJCYXJiZWQgSGlkZVwiLFxuXHRcdFx0XHRkZXNjOiBcIkF0IHRoZSBzdGFydCBvZiBlYWNoIG9mIGl0cyB0dXJucywgdGhlIGJhcmJlZCBkZXZpbCBkZWFscyA1ICgxZDEwKSBwaWVyY2luZyBkYW1hZ2UgdG8gYW55IGNyZWF0dXJlIGdyYXBwbGluZyBpdC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxZDEwXCIsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkRldmlsJ3MgU2lnaHRcIixcblx0XHRcdFx0ZGVzYzogXCJNYWdpY2FsIGRhcmtuZXNzIGRvZXNuJ3QgaW1wZWRlIHRoZSBkZXZpbCdzIGRhcmt2aXNpb24uXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTWFnaWMgUmVzaXN0YW5jZVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBkZXZpbCBoYXMgYWR2YW50YWdlIG9uIHNhdmluZyB0aHJvd3MgYWdhaW5zdCBzcGVsbHMgYW5kIG90aGVyIG1hZ2ljYWwgZWZmZWN0cy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJNdWx0aWF0dGFja1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBkZXZpbCBtYWtlcyB0aHJlZSBtZWxlZSBhdHRhY2tzOiBvbmUgd2l0aCBpdHMgdGFpbCBhbmQgdHdvIHdpdGggaXRzIGNsYXdzLiBBbHRlcm5hdGl2ZWx5LCBpdCBjYW4gdXNlIEh1cmwgRmxhbWUgdHdpY2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQ2xhd1wiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs2IHRvIGhpdCwgcmVhY2ggNSBmdCAuLCBvbmUgdGFyZ2V0LiBIaXQ6IDYgKDFkNiArIDMpIHBpZXJjaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA2LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxZDZcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiAzLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJUYWlsXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzYgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxMCAoMmQ2ICsgMykgcGllcmNpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDYsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjJkNlwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDMsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkh1cmwgRmxhbWVcIixcblx0XHRcdFx0ZGVzYzogXCJSYW5nZWQgU3BlbGwgQXR0YWNrOiArNSB0byBoaXQsIHJhbmdlIDE1MCBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTAgKDNkNikgZmlyZSBkYW1hZ2UuIElmIHRoZSB0YXJnZXQgaXMgYSBmbGFtbWFibGUgb2JqZWN0IHRoYXQgaXNuJ3QgYmVpbmcgd29ybiBvciBjYXJyaWVkLCBpdCBhbHNvIGNhdGNoZXMgZmlyZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA1LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIzZDZcIixcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiQmFzaWxpc2tcIixcblx0XHRzaXplOiBcIk1lZGl1bVwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcIm1vbnN0cm9zaXR5XCIsXG5cdFx0c3VidHlwZTogXCJcIixcblx0XHRhbGlnbm1lbnQ6IFwidW5hbGlnbmVkXCIsXG5cdFx0YWM6IDEyLFxuXHRcdGhwOiA1Mixcblx0XHRoaXRfZGljZTogXCI4ZDhcIixcblx0XHRzcGVlZDogXCIyMCBmdC5cIixcblx0XHRzdGF0czogWzE2LCA4LCAxNSwgMiwgOCwgN10sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0c2Vuc2VzOiBcImRhcmt2aXNpb24gNjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gOVwiLFxuXHRcdGxhbmd1YWdlczogXCJcIixcblx0XHRjcjogXCIzXCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiUGV0cmlmeWluZyBHYXplXCIsXG5cdFx0XHRcdGRlc2M6IFwiSWYgYSBjcmVhdHVyZSBzdGFydHMgaXRzIHR1cm4gd2l0aGluIDMwIGZ0LiBvZiB0aGUgYmFzaWxpc2sgYW5kIHRoZSB0d28gb2YgdGhlbSBjYW4gc2VlIGVhY2ggb3RoZXIsIHRoZSBiYXNpbGlzayBjYW4gZm9yY2UgdGhlIGNyZWF0dXJlIHRvIG1ha2UgYSBEQyAxMiBDb25zdGl0dXRpb24gc2F2aW5nIHRocm93IGlmIHRoZSBiYXNpbGlzayBpc24ndCBpbmNhcGFjaXRhdGVkLiBPbiBhIGZhaWxlZCBzYXZlLCB0aGUgY3JlYXR1cmUgbWFnaWNhbGx5IGJlZ2lucyB0byB0dXJuIHRvIHN0b25lIGFuZCBpcyByZXN0cmFpbmVkLiBJdCBtdXN0IHJlcGVhdCB0aGUgc2F2aW5nIHRocm93IGF0IHRoZSBlbmQgb2YgaXRzIG5leHQgdHVybi4gT24gYSBzdWNjZXNzLCB0aGUgZWZmZWN0IGVuZHMuIE9uIGEgZmFpbHVyZSwgdGhlIGNyZWF0dXJlIGlzIHBldHJpZmllZCB1bnRpbCBmcmVlZCBieSB0aGUgZ3JlYXRlciByZXN0b3JhdGlvbiBzcGVsbCBvciBvdGhlciBtYWdpYy5cXG5BIGNyZWF0dXJlIHRoYXQgaXNuJ3Qgc3VycHJpc2VkIGNhbiBhdmVydCBpdHMgZXllcyB0byBhdm9pZCB0aGUgc2F2aW5nIHRocm93IGF0IHRoZSBzdGFydCBvZiBpdHMgdHVybi4gSWYgaXQgZG9lcyBzbywgaXQgY2FuJ3Qgc2VlIHRoZSBiYXNpbGlzayB1bnRpbCB0aGUgc3RhcnQgb2YgaXRzIG5leHQgdHVybiwgd2hlbiBpdCBjYW4gYXZlcnQgaXRzIGV5ZXMgYWdhaW4uIElmIGl0IGxvb2tzIGF0IHRoZSBiYXNpbGlzayBpbiB0aGUgbWVhbnRpbWUsIGl0IG11c3QgaW1tZWRpYXRlbHkgbWFrZSB0aGUgc2F2ZS5cXG5JZiB0aGUgYmFzaWxpc2sgc2VlcyBpdHMgcmVmbGVjdGlvbiB3aXRoaW4gMzAgZnQuIG9mIGl0IGluIGJyaWdodCBsaWdodCwgaXQgbWlzdGFrZXMgaXRzZWxmIGZvciBhIHJpdmFsIGFuZCB0YXJnZXRzIGl0c2VsZiB3aXRoIGl0cyBnYXplLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkJpdGVcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNSB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDEwICgyZDYgKyAzKSBwaWVyY2luZyBkYW1hZ2UgcGx1cyA3ICgyZDYpIHBvaXNvbiBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNSxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMmQ2ICsgMmQ2XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogMyxcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiQmF0XCIsXG5cdFx0c2l6ZTogXCJUaW55XCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwiYmVhc3RcIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcblx0XHRhYzogMTIsXG5cdFx0aHA6IDEsXG5cdFx0aGl0X2RpY2U6IFwiMWQ0XCIsXG5cdFx0c3BlZWQ6IFwiNSBmdC4sIGZseSAzMCBmdC5cIixcblx0XHRzdGF0czogWzIsIDE1LCA4LCAyLCAxMiwgNF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0c2Vuc2VzOiBcImJsaW5kc2lnaHQgNjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTFcIixcblx0XHRsYW5ndWFnZXM6IFwiXCIsXG5cdFx0Y3I6IFwiMFwiLFxuXHRcdHRyYWl0czogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkVjaG9sb2NhdGlvblwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBiYXQgY2FuJ3QgdXNlIGl0cyBibGluZHNpZ2h0IHdoaWxlIGRlYWZlbmVkLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIktlZW4gSGVhcmluZ1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBiYXQgaGFzIGFkdmFudGFnZSBvbiBXaXNkb20gKFBlcmNlcHRpb24pIGNoZWNrcyB0aGF0IHJlbHkgb24gaGVhcmluZy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJCaXRlXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzAgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIGNyZWF0dXJlLiBIaXQ6IDEgcGllcmNpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHRcdGRhbWFnZV9ib251czogMSxcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiQmVhcmRlZCBEZXZpbFwiLFxuXHRcdHNpemU6IFwiTWVkaXVtXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwiZmllbmRcIixcblx0XHRzdWJ0eXBlOiBcImRldmlsXCIsXG5cdFx0YWxpZ25tZW50OiBcImxhd2Z1bCBldmlsXCIsXG5cdFx0YWM6IDEzLFxuXHRcdGhwOiA1Mixcblx0XHRoaXRfZGljZTogXCI4ZDhcIixcblx0XHRzcGVlZDogXCIzMCBmdC5cIixcblx0XHRzdGF0czogWzE2LCAxNSwgMTUsIDksIDExLCAxMV0sXG5cdFx0c2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0c3RyZW5ndGg6IDUsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRjb25zdGl0dXRpb246IDQsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHR3aXNkb206IDIsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6XG5cdFx0XHRcImNvbGQ7IGJsdWRnZW9uaW5nLCBwaWVyY2luZywgYW5kIHNsYXNoaW5nIGZyb20gbm9ubWFnaWNhbCB3ZWFwb25zIHRoYXQgYXJlbid0IHNpbHZlcmVkXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiZmlyZSwgcG9pc29uXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwicG9pc29uZWRcIixcblx0XHRzZW5zZXM6IFwiZGFya3Zpc2lvbiAxMjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTBcIixcblx0XHRsYW5ndWFnZXM6IFwiSW5mZXJuYWwsIHRlbGVwYXRoeSAxMjAgZnQuXCIsXG5cdFx0Y3I6IFwiM1wiLFxuXHRcdHRyYWl0czogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkRldmlsJ3MgU2lnaHRcIixcblx0XHRcdFx0ZGVzYzogXCJNYWdpY2FsIGRhcmtuZXNzIGRvZXNuJ3QgaW1wZWRlIHRoZSBkZXZpbCdzIGRhcmt2aXNpb24uXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTWFnaWMgUmVzaXN0YW5jZVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBkZXZpbCBoYXMgYWR2YW50YWdlIG9uIHNhdmluZyB0aHJvd3MgYWdhaW5zdCBzcGVsbHMgYW5kIG90aGVyIG1hZ2ljYWwgZWZmZWN0cy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJTdGVhZGZhc3RcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgZGV2aWwgY2FuJ3QgYmUgZnJpZ2h0ZW5lZCB3aGlsZSBpdCBjYW4gc2VlIGFuIGFsbGllZCBjcmVhdHVyZSB3aXRoaW4gMzAgZmVldCBvZiBpdC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJNdWx0aWF0dGFja1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBkZXZpbCBtYWtlcyB0d28gYXR0YWNrczogb25lIHdpdGggaXRzIGJlYXJkIGFuZCBvbmUgd2l0aCBpdHMgZ2xhaXZlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkJlYXJkXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzUgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIGNyZWF0dXJlLiBIaXQ6IDYgKDFkOCArIDIpIHBpZXJjaW5nIGRhbWFnZSwgYW5kIHRoZSB0YXJnZXQgbXVzdCBzdWNjZWVkIG9uIGEgREMgMTIgQ29uc3RpdHV0aW9uIHNhdmluZyB0aHJvdyBvciBiZSBwb2lzb25lZCBmb3IgMSBtaW51dGUuIFdoaWxlIHBvaXNvbmVkIGluIHRoaXMgd2F5LCB0aGUgdGFyZ2V0IGNhbid0IHJlZ2FpbiBoaXQgcG9pbnRzLiBUaGUgdGFyZ2V0IGNhbiByZXBlYXQgdGhlIHNhdmluZyB0aHJvdyBhdCB0aGUgZW5kIG9mIGVhY2ggb2YgaXRzIHR1cm5zLCBlbmRpbmcgdGhlIGVmZmVjdCBvbiBpdHNlbGYgb24gYSBzdWNjZXNzLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDUsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjFkOFwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDIsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkdsYWl2ZVwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs1IHRvIGhpdCwgcmVhY2ggMTAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDggKDFkMTAgKyAzKSBzbGFzaGluZyBkYW1hZ2UuIElmIHRoZSB0YXJnZXQgaXMgYSBjcmVhdHVyZSBvdGhlciB0aGFuIGFuIHVuZGVhZCBvciBhIGNvbnN0cnVjdCwgaXQgbXVzdCBzdWNjZWVkIG9uIGEgREMgMTIgQ29uc3RpdHV0aW9uIHNhdmluZyB0aHJvdyBvciBsb3NlIDUgKDFkMTApIGhpdCBwb2ludHMgYXQgdGhlIHN0YXJ0IG9mIGVhY2ggb2YgaXRzIHR1cm5zIGR1ZSB0byBhbiBpbmZlcm5hbCB3b3VuZC4gRWFjaCB0aW1lIHRoZSBkZXZpbCBoaXRzIHRoZSB3b3VuZGVkIHRhcmdldCB3aXRoIHRoaXMgYXR0YWNrLCB0aGUgZGFtYWdlIGRlYWx0IGJ5IHRoZSB3b3VuZCBpbmNyZWFzZXMgYnkgNSAoMWQxMCkuIEFueSBjcmVhdHVyZSBjYW4gdGFrZSBhbiBhY3Rpb24gdG8gc3RhbmNoIHRoZSB3b3VuZCB3aXRoIGEgc3VjY2Vzc2Z1bCBEQyAxMiBXaXNkb20gKE1lZGljaW5lKSBjaGVjay4gVGhlIHdvdW5kIGFsc28gY2xvc2VzIGlmIHRoZSB0YXJnZXQgcmVjZWl2ZXMgbWFnaWNhbCBoZWFsaW5nLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDUsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjFkMTBcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiAzLFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJCZWhpclwiLFxuXHRcdHNpemU6IFwiSHVnZVwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcIm1vbnN0cm9zaXR5XCIsXG5cdFx0c3VidHlwZTogXCJcIixcblx0XHRhbGlnbm1lbnQ6IFwibmV1dHJhbCBldmlsXCIsXG5cdFx0YWM6IDE3LFxuXHRcdGhwOiAxNjgsXG5cdFx0aGl0X2RpY2U6IFwiMTZkMTJcIixcblx0XHRzcGVlZDogXCI1MCBmdC4sIGNsaW1iIDQwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbMjMsIDE2LCAxOCwgNywgMTQsIDEyXSxcblx0XHRza2lsbHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdHBlcmNlcHRpb246IDYsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRzdGVhbHRoOiA3LFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuXHRcdGRhbWFnZV9pbW11bml0aWVzOiBcImxpZ2h0bmluZ1wiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuXHRcdHNlbnNlczogXCJkYXJrdmlzaW9uIDkwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDE2XCIsXG5cdFx0bGFuZ3VhZ2VzOiBcIkRyYWNvbmljXCIsXG5cdFx0Y3I6IFwiMTFcIixcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgYmVoaXIgbWFrZXMgdHdvIGF0dGFja3M6IG9uZSB3aXRoIGl0cyBiaXRlIGFuZCBvbmUgdG8gY29uc3RyaWN0LlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkJpdGVcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMTAgdG8gaGl0LCByZWFjaCAxMCBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMjIgKDNkMTAgKyA2KSBwaWVyY2luZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMTAsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjNkMTBcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiA2LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJDb25zdHJpY3RcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMTAgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIExhcmdlIG9yIHNtYWxsZXIgY3JlYXR1cmUuIEhpdDogMTcgKDJkMTAgKyA2KSBibHVkZ2VvbmluZyBkYW1hZ2UgcGx1cyAxNyAoMmQxMCArIDYpIHNsYXNoaW5nIGRhbWFnZS4gVGhlIHRhcmdldCBpcyBncmFwcGxlZCAoZXNjYXBlIERDIDE2KSBpZiB0aGUgYmVoaXIgaXNuJ3QgYWxyZWFkeSBjb25zdHJpY3RpbmcgYSBjcmVhdHVyZSwgYW5kIHRoZSB0YXJnZXQgaXMgcmVzdHJhaW5lZCB1bnRpbCB0aGlzIGdyYXBwbGUgZW5kcy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAxMCxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMmQxMCArIDJkMTBcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiA2LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJMaWdodG5pbmcgQnJlYXRoIChSZWNoYXJnZSA1LTYpXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGJlaGlyIGV4aGFsZXMgYSBsaW5lIG9mIGxpZ2h0bmluZyB0aGF0IGlzIDIwIGZ0LiBsb25nIGFuZCA1IGZ0LiB3aWRlLiBFYWNoIGNyZWF0dXJlIGluIHRoYXQgbGluZSBtdXN0IG1ha2UgYSBEQyAxNiBEZXh0ZXJpdHkgc2F2aW5nIHRocm93LCB0YWtpbmcgNjYgKDEyZDEwKSBsaWdodG5pbmcgZGFtYWdlIG9uIGEgZmFpbGVkIHNhdmUsIG9yIGhhbGYgYXMgbXVjaCBkYW1hZ2Ugb24gYSBzdWNjZXNzZnVsIG9uZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxMmQxMFwiLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJTd2FsbG93XCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGJlaGlyIG1ha2VzIG9uZSBiaXRlIGF0dGFjayBhZ2FpbnN0IGEgTWVkaXVtIG9yIHNtYWxsZXIgdGFyZ2V0IGl0IGlzIGdyYXBwbGluZy4gSWYgdGhlIGF0dGFjayBoaXRzLCB0aGUgdGFyZ2V0IGlzIGFsc28gc3dhbGxvd2VkLCBhbmQgdGhlIGdyYXBwbGUgZW5kcy4gV2hpbGUgc3dhbGxvd2VkLCB0aGUgdGFyZ2V0IGlzIGJsaW5kZWQgYW5kIHJlc3RyYWluZWQsIGl0IGhhcyB0b3RhbCBjb3ZlciBhZ2FpbnN0IGF0dGFja3MgYW5kIG90aGVyIGVmZmVjdHMgb3V0c2lkZSB0aGUgYmVoaXIsIGFuZCBpdCB0YWtlcyAyMSAoNmQ2KSBhY2lkIGRhbWFnZSBhdCB0aGUgc3RhcnQgb2YgZWFjaCBvZiB0aGUgYmVoaXIncyB0dXJucy4gQSBiZWhpciBjYW4gaGF2ZSBvbmx5IG9uZSBjcmVhdHVyZSBzd2FsbG93ZWQgYXQgYSB0aW1lLlxcbklmIHRoZSBiZWhpciB0YWtlcyAzMCBkYW1hZ2Ugb3IgbW9yZSBvbiBhIHNpbmdsZSB0dXJuIGZyb20gdGhlIHN3YWxsb3dlZCBjcmVhdHVyZSwgdGhlIGJlaGlyIG11c3Qgc3VjY2VlZCBvbiBhIERDIDE0IENvbnN0aXR1dGlvbiBzYXZpbmcgdGhyb3cgYXQgdGhlIGVuZCBvZiB0aGF0IHR1cm4gb3IgcmVndXJnaXRhdGUgdGhlIGNyZWF0dXJlLCB3aGljaCBmYWxscyBwcm9uZSBpbiBhIHNwYWNlIHdpdGhpbiAxMCBmdC4gb2YgdGhlIGJlaGlyLiBJZiB0aGUgYmVoaXIgZGllcywgYSBzd2FsbG93ZWQgY3JlYXR1cmUgaXMgbm8gbG9uZ2VyIHJlc3RyYWluZWQgYnkgaXQgYW5kIGNhbiBlc2NhcGUgZnJvbSB0aGUgY29ycHNlIGJ5IHVzaW5nIDE1IGZ0LiBvZiBtb3ZlbWVudCwgZXhpdGluZyBwcm9uZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCI2ZDZcIixcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiQmVyc2Vya2VyXCIsXG5cdFx0c2l6ZTogXCJNZWRpdW1cIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJodW1hbm9pZFwiLFxuXHRcdHN1YnR5cGU6IFwiYW55IHJhY2VcIixcblx0XHRhbGlnbm1lbnQ6IFwiYW55IGNoYW90aWMgYWxpZ25tZW50XCIsXG5cdFx0YWM6IDEzLFxuXHRcdGhwOiA2Nyxcblx0XHRoaXRfZGljZTogXCI5ZDhcIixcblx0XHRzcGVlZDogXCIzMCBmdC5cIixcblx0XHRzdGF0czogWzE2LCAxMiwgMTcsIDksIDExLCA5XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcblx0XHRzZW5zZXM6IFwicGFzc2l2ZSBQZXJjZXB0aW9uIDEwXCIsXG5cdFx0bGFuZ3VhZ2VzOiBcImFueSBvbmUgbGFuZ3VhZ2UgKHVzdWFsbHkgQ29tbW9uKVwiLFxuXHRcdGNyOiBcIjJcIixcblx0XHR0cmFpdHM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJSZWNrbGVzc1wiLFxuXHRcdFx0XHRkZXNjOiBcIkF0IHRoZSBzdGFydCBvZiBpdHMgdHVybiwgdGhlIGJlcnNlcmtlciBjYW4gZ2FpbiBhZHZhbnRhZ2Ugb24gYWxsIG1lbGVlIHdlYXBvbiBhdHRhY2sgcm9sbHMgZHVyaW5nIHRoYXQgdHVybiwgYnV0IGF0dGFjayByb2xscyBhZ2FpbnN0IGl0IGhhdmUgYWR2YW50YWdlIHVudGlsIHRoZSBzdGFydCBvZiBpdHMgbmV4dCB0dXJuLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkdyZWF0YXhlXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzUgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiA5ICgxZDEyICsgMykgc2xhc2hpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDUsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjFkMTJcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiAzLFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJCbGFjayBCZWFyXCIsXG5cdFx0c2l6ZTogXCJNZWRpdW1cIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJiZWFzdFwiLFxuXHRcdHN1YnR5cGU6IFwiXCIsXG5cdFx0YWxpZ25tZW50OiBcInVuYWxpZ25lZFwiLFxuXHRcdGFjOiAxMSxcblx0XHRocDogMTksXG5cdFx0aGl0X2RpY2U6IFwiM2Q4XCIsXG5cdFx0c3BlZWQ6IFwiNDAgZnQuLCBjbGltYiAzMCBmdC5cIixcblx0XHRzdGF0czogWzE1LCAxMCwgMTQsIDIsIDEyLCA3XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcblx0XHRzZW5zZXM6IFwicGFzc2l2ZSBQZXJjZXB0aW9uIDEzXCIsXG5cdFx0bGFuZ3VhZ2VzOiBcIlwiLFxuXHRcdGNyOiBcIjEvMlwiLFxuXHRcdHRyYWl0czogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIktlZW4gU21lbGxcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgYmVhciBoYXMgYWR2YW50YWdlIG9uIFdpc2RvbSAoUGVyY2VwdGlvbikgY2hlY2tzIHRoYXQgcmVseSBvbiBzbWVsbC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJNdWx0aWF0dGFja1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBiZWFyIG1ha2VzIHR3byBhdHRhY2tzOiBvbmUgd2l0aCBpdHMgYml0ZSBhbmQgb25lIHdpdGggaXRzIGNsYXdzLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkJpdGVcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMyB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDUgKDFkNiArIDIpIHBpZXJjaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAzLFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxZDZcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiAyLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJDbGF3c1wiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICszIHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogNyAoMmQ0ICsgMikgc2xhc2hpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDMsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjJkNFwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDIsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIkJsYWNrIERyYWdvbiBXeXJtbGluZ1wiLFxuXHRcdHNpemU6IFwiTWVkaXVtXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwiZHJhZ29uXCIsXG5cdFx0c3VidHlwZTogXCJcIixcblx0XHRhbGlnbm1lbnQ6IFwiY2hhb3RpYyBldmlsXCIsXG5cdFx0YWM6IDE3LFxuXHRcdGhwOiAzMyxcblx0XHRoaXRfZGljZTogXCI2ZDhcIixcblx0XHRzcGVlZDogXCIzMCBmdC4sIGZseSA2MCBmdC4sIHN3aW0gMzAgZnQuXCIsXG5cdFx0c3RhdHM6IFsxNSwgMTQsIDEzLCAxMCwgMTEsIDEzXSxcblx0XHRzYXZlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRkZXh0ZXJpdHk6IDQsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRjb25zdGl0dXRpb246IDMsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHR3aXNkb206IDIsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRjaGFyaXNtYTogMyxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRza2lsbHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdHBlcmNlcHRpb246IDQsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRzdGVhbHRoOiA0LFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuXHRcdGRhbWFnZV9pbW11bml0aWVzOiBcImFjaWRcIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcblx0XHRzZW5zZXM6IFwiYmxpbmRzaWdodCAxMCBmdC4sIGRhcmt2aXNpb24gNjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTRcIixcblx0XHRsYW5ndWFnZXM6IFwiRHJhY29uaWNcIixcblx0XHRjcjogXCIyXCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQW1waGliaW91c1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBkcmFnb24gY2FuIGJyZWF0aGUgYWlyIGFuZCB3YXRlci5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJCaXRlXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzQgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiA3ICgxZDEwICsgMikgcGllcmNpbmcgZGFtYWdlIHBsdXMgMiAoMWQ0KSBhY2lkIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA0LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxZDEwXCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogMixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQWNpZCBCcmVhdGggKFJlY2hhcmdlIDUtNilcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgZHJhZ29uIGV4aGFsZXMgYWNpZCBpbiBhIDE1LWZvb3QgbGluZSB0aGF0IGlzIDUgZmVldCB3aWRlLiBFYWNoIGNyZWF0dXJlIGluIHRoYXQgbGluZSBtdXN0IG1ha2UgYSBEQyAxMSBEZXh0ZXJpdHkgc2F2aW5nIHRocm93LCB0YWtpbmcgMjIgKFNkOCkgYWNpZCBkYW1hZ2Ugb24gYSBmYWlsZWQgc2F2ZSwgb3IgaGFsZiBhcyBtdWNoIGRhbWFnZSBvbiBhIHN1Y2Nlc3NmdWwgb25lLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjVkOFwiLFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJCbGFjayBQdWRkaW5nXCIsXG5cdFx0c2l6ZTogXCJMYXJnZVwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcIm9vemVcIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcblx0XHRhYzogNyxcblx0XHRocDogODUsXG5cdFx0aGl0X2RpY2U6IFwiMTBkMTBcIixcblx0XHRzcGVlZDogXCIyMCBmdC4sIGNsaW1iIDIwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbMTYsIDUsIDE2LCAxLCA2LCAxXSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJhY2lkLCBjb2xkLCBsaWdodG5pbmcsIHNsYXNoaW5nXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6XG5cdFx0XHRcImJsaW5kZWQsIGNoYXJtZWQsIGRlYWZlbmVkLCBleGhhdXN0aW9uLCBmcmlnaHRlbmVkLCBwcm9uZVwiLFxuXHRcdHNlbnNlczogXCJibGluZHNpZ2h0IDYwIGZ0LiAoYmxpbmQgYmV5b25kIHRoaXMgcmFkaXVzKSwgcGFzc2l2ZSBQZXJjZXB0aW9uIDhcIixcblx0XHRsYW5ndWFnZXM6IFwiXCIsXG5cdFx0Y3I6IFwiNFwiLFxuXHRcdHRyYWl0czogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkFtb3JwaG91c1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBwdWRkaW5nIGNhbiBtb3ZlIHRocm91Z2ggYSBzcGFjZSBhcyBuYXJyb3cgYXMgMSBpbmNoIHdpZGUgd2l0aG91dCBzcXVlZXppbmcuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQ29ycm9zaXZlIEZvcm1cIixcblx0XHRcdFx0ZGVzYzogXCJBIGNyZWF0dXJlIHRoYXQgdG91Y2hlcyB0aGUgcHVkZGluZyBvciBoaXRzIGl0IHdpdGggYSBtZWxlZSBhdHRhY2sgd2hpbGUgd2l0aGluIDUgZmVldCBvZiBpdCB0YWtlcyA0ICgxZDgpIGFjaWQgZGFtYWdlLiBBbnkgbm9ubWFnaWNhbCB3ZWFwb24gbWFkZSBvZiBtZXRhbCBvciB3b29kIHRoYXQgaGl0cyB0aGUgcHVkZGluZyBjb3Jyb2Rlcy4gQWZ0ZXIgZGVhbGluZyBkYW1hZ2UsIHRoZSB3ZWFwb24gdGFrZXMgYSBwZXJtYW5lbnQgYW5kIGN1bXVsYXRpdmUgLTEgcGVuYWx0eSB0byBkYW1hZ2Ugcm9sbHMuIElmIGl0cyBwZW5hbHR5IGRyb3BzIHRvIC01LCB0aGUgd2VhcG9uIGlzIGRlc3Ryb3llZC4gTm9ubWFnaWNhbCBhbW11bml0aW9uIG1hZGUgb2YgbWV0YWwgb3Igd29vZCB0aGF0IGhpdHMgdGhlIHB1ZGRpbmcgaXMgZGVzdHJveWVkIGFmdGVyIGRlYWxpbmcgZGFtYWdlLiBUaGUgcHVkZGluZyBjYW4gZWF0IHRocm91Z2ggMi1pbmNoLXRoaWNrLCBub25tYWdpY2FsIHdvb2Qgb3IgbWV0YWwgaW4gMSByb3VuZC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxZDhcIixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiU3BpZGVyIENsaW1iXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIHB1ZGRpbmcgY2FuIGNsaW1iIGRpZmZpY3VsdCBzdXJmYWNlcywgaW5jbHVkaW5nIHVwc2lkZSBkb3duIG9uIGNlaWxpbmdzLCB3aXRob3V0IG5lZWRpbmcgdG8gbWFrZSBhbiBhYmlsaXR5IGNoZWNrLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlBzZXVkb3BvZFwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs1IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogNiAoMWQ2ICsgMykgYmx1ZGdlb25pbmcgZGFtYWdlIHBsdXMgMTggKDRkOCkgYWNpZCBkYW1hZ2UuIEluIGFkZGl0aW9uLCBub25tYWdpY2FsIGFybW9yIHdvcm4gYnkgdGhlIHRhcmdldCBpcyBwYXJ0bHkgZGlzc29sdmVkIGFuZCB0YWtlcyBhIHBlcm1hbmVudCBhbmQgY3VtdWxhdGl2ZSAtMSBwZW5hbHR5IHRvIHRoZSBBQyBpdCBvZmZlcnMuIFRoZSBhcm1vciBpcyBkZXN0cm95ZWQgaWYgdGhlIHBlbmFsdHkgcmVkdWNlcyBpdHMgQUMgdG8gMTAuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNSxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMWQ2ICsgNGQ4XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogMyxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRyZWFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJTcGxpdFwiLFxuXHRcdFx0XHRkZXNjOiBcIldoZW4gYSBwdWRkaW5nIHRoYXQgaXMgTWVkaXVtIG9yIGxhcmdlciBpcyBzdWJqZWN0ZWQgdG8gbGlnaHRuaW5nIG9yIHNsYXNoaW5nIGRhbWFnZSwgaXQgc3BsaXRzIGludG8gdHdvIG5ldyBwdWRkaW5ncyBpZiBpdCBoYXMgYXQgbGVhc3QgMTAgaGl0IHBvaW50cy4gRWFjaCBuZXcgcHVkZGluZyBoYXMgaGl0IHBvaW50cyBlcXVhbCB0byBoYWxmIHRoZSBvcmlnaW5hbCBwdWRkaW5nJ3MsIHJvdW5kZWQgZG93bi4gTmV3IHB1ZGRpbmdzIGFyZSBvbmUgc2l6ZSBzbWFsbGVyIHRoYW4gdGhlIG9yaWdpbmFsIHB1ZGRpbmcuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiQmxpbmsgRG9nXCIsXG5cdFx0c2l6ZTogXCJNZWRpdW1cIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJmZXlcIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJsYXdmdWwgZ29vZFwiLFxuXHRcdGFjOiAxMyxcblx0XHRocDogMjIsXG5cdFx0aGl0X2RpY2U6IFwiNGQ4XCIsXG5cdFx0c3BlZWQ6IFwiNDAgZnQuXCIsXG5cdFx0c3RhdHM6IFsxMiwgMTcsIDEyLCAxMCwgMTMsIDExXSxcblx0XHRza2lsbHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdHBlcmNlcHRpb246IDMsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRzdGVhbHRoOiA1LFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuXHRcdGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuXHRcdHNlbnNlczogXCJwYXNzaXZlIFBlcmNlcHRpb24gMTBcIixcblx0XHRsYW5ndWFnZXM6IFwiQmxpbmsgRG9nLCB1bmRlcnN0YW5kcyBTeWx2YW4gYnV0IGNhbid0IHNwZWFrIGl0XCIsXG5cdFx0Y3I6IFwiMS80XCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiS2VlbiBIZWFyaW5nIGFuZCBTbWVsbFwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBkb2cgaGFzIGFkdmFudGFnZSBvbiBXaXNkb20gKFBlcmNlcHRpb24pIGNoZWNrcyB0aGF0IHJlbHkgb24gaGVhcmluZyBvciBzbWVsbC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJCaXRlXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzMgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiA0ICgxZDYgKyAxKSBwaWVyY2luZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMyxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMWQ2XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogMSxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiVGVsZXBvcnQgKFJlY2hhcmdlIDQtNilcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgZG9nIG1hZ2ljYWxseSB0ZWxlcG9ydHMsIGFsb25nIHdpdGggYW55IGVxdWlwbWVudCBpdCBpcyB3ZWFyaW5nIG9yIGNhcnJ5aW5nLCB1cCB0byA0MCBmdC4gdG8gYW4gdW5vY2N1cGllZCBzcGFjZSBpdCBjYW4gc2VlLiBCZWZvcmUgb3IgYWZ0ZXIgdGVsZXBvcnRpbmcsIHRoZSBkb2cgY2FuIG1ha2Ugb25lIGJpdGUgYXR0YWNrLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIkJsb29kIEhhd2tcIixcblx0XHRzaXplOiBcIlNtYWxsXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwiYmVhc3RcIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcblx0XHRhYzogMTIsXG5cdFx0aHA6IDcsXG5cdFx0aGl0X2RpY2U6IFwiMmQ2XCIsXG5cdFx0c3BlZWQ6IFwiMTAgZnQuLCBmbHkgNjAgZnQuXCIsXG5cdFx0c3RhdHM6IFs2LCAxNCwgMTAsIDMsIDE0LCA1XSxcblx0XHRza2lsbHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdHBlcmNlcHRpb246IDQsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0c2Vuc2VzOiBcInBhc3NpdmUgUGVyY2VwdGlvbiAxNFwiLFxuXHRcdGxhbmd1YWdlczogXCJcIixcblx0XHRjcjogXCIxLzhcIixcblx0XHR0cmFpdHM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJLZWVuIFNpZ2h0XCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGhhd2sgaGFzIGFkdmFudGFnZSBvbiBXaXNkb20gKFBlcmNlcHRpb24pIGNoZWNrcyB0aGF0IHJlbHkgb24gc2lnaHQuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiUGFjayBUYWN0aWNzXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGhhd2sgaGFzIGFkdmFudGFnZSBvbiBhbiBhdHRhY2sgcm9sbCBhZ2FpbnN0IGEgY3JlYXR1cmUgaWYgYXQgbGVhc3Qgb25lIG9mIHRoZSBoYXdrJ3MgYWxsaWVzIGlzIHdpdGhpbiA1IGZ0LiBvZiB0aGUgY3JlYXR1cmUgYW5kIHRoZSBhbGx5IGlzbid0IGluY2FwYWNpdGF0ZWQuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQmVha1wiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs0IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogNCAoMWQ0ICsgMikgcGllcmNpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDQsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjFkNFwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDIsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIkJsdWUgRHJhZ29uIFd5cm1saW5nXCIsXG5cdFx0c2l6ZTogXCJNZWRpdW1cIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJkcmFnb25cIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJsYXdmdWwgZXZpbFwiLFxuXHRcdGFjOiAxNyxcblx0XHRocDogNTIsXG5cdFx0aGl0X2RpY2U6IFwiOGQ4XCIsXG5cdFx0c3BlZWQ6IFwiMzAgZnQuLCBidXJyb3cgMTUgZnQuLCBmbHkgNjAgZnQuXCIsXG5cdFx0c3RhdHM6IFsxNywgMTAsIDE1LCAxMiwgMTEsIDE1XSxcblx0XHRzYXZlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRkZXh0ZXJpdHk6IDIsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRjb25zdGl0dXRpb246IDQsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHR3aXNkb206IDIsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRjaGFyaXNtYTogNCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRza2lsbHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdHBlcmNlcHRpb246IDQsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRzdGVhbHRoOiAyLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuXHRcdGRhbWFnZV9pbW11bml0aWVzOiBcImxpZ2h0bmluZ1wiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuXHRcdHNlbnNlczogXCJibGluZHNpZ2h0IDEwIGZ0LiwgZGFya3Zpc2lvbiA2MCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxNFwiLFxuXHRcdGxhbmd1YWdlczogXCJEcmFjb25pY1wiLFxuXHRcdGNyOiBcIjNcIixcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQml0ZVwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs1IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogOCAoMWQxMCArIDMpIHBpZXJjaW5nIGRhbWFnZSBwbHVzIDMgKDFkNikgbGlnaHRuaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA1LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxZDEwICsgMWQ2XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogMyxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTGlnaHRuaW5nIEJyZWF0aCAoUmVjaGFyZ2UgNS02KVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBkcmFnb24gZXhoYWxlcyBsaWdodG5pbmcgaW4gYSAzMC1mb290IGxpbmUgdGhhdCBpcyA1IGZlZXQgd2lkZS4gRWFjaCBjcmVhdHVyZSBpbiB0aGF0IGxpbmUgbXVzdCBtYWtlIGEgREMgMTIgRGV4dGVyaXR5IHNhdmluZyB0aHJvdywgdGFraW5nIDIyICg0ZDEwKSBsaWdodG5pbmcgZGFtYWdlIG9uIGEgZmFpbGVkIHNhdmUsIG9yIGhhbGYgYXMgbXVjaCBkYW1hZ2Ugb24gYSBzdWNjZXNzZnVsIG9uZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCI0ZDEwXCIsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIkJvYXJcIixcblx0XHRzaXplOiBcIk1lZGl1bVwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcImJlYXN0XCIsXG5cdFx0c3VidHlwZTogXCJcIixcblx0XHRhbGlnbm1lbnQ6IFwidW5hbGlnbmVkXCIsXG5cdFx0YWM6IDExLFxuXHRcdGhwOiAxMSxcblx0XHRoaXRfZGljZTogXCIyZDhcIixcblx0XHRzcGVlZDogXCI0MCBmdC5cIixcblx0XHRzdGF0czogWzEzLCAxMSwgMTIsIDIsIDksIDVdLFxuXHRcdGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuXHRcdGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuXHRcdHNlbnNlczogXCJwYXNzaXZlIFBlcmNlcHRpb24gOVwiLFxuXHRcdGxhbmd1YWdlczogXCJcIixcblx0XHRjcjogXCIxLzRcIixcblx0XHR0cmFpdHM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJDaGFyZ2VcIixcblx0XHRcdFx0ZGVzYzogXCJJZiB0aGUgYm9hciBtb3ZlcyBhdCBsZWFzdCAyMCBmdC4gc3RyYWlnaHQgdG93YXJkIGEgdGFyZ2V0IGFuZCB0aGVuIGhpdHMgaXQgd2l0aCBhIHR1c2sgYXR0YWNrIG9uIHRoZSBzYW1lIHR1cm4sIHRoZSB0YXJnZXQgdGFrZXMgYW4gZXh0cmEgMyAoMWQ2KSBzbGFzaGluZyBkYW1hZ2UuIElmIHRoZSB0YXJnZXQgaXMgYSBjcmVhdHVyZSwgaXQgbXVzdCBzdWNjZWVkIG9uIGEgREMgMTEgU3RyZW5ndGggc2F2aW5nIHRocm93IG9yIGJlIGtub2NrZWQgcHJvbmUuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMWQ2XCIsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlJlbGVudGxlc3MgKFJlY2hhcmdlcyBhZnRlciBhIFNob3J0IG9yIExvbmcgUmVzdClcIixcblx0XHRcdFx0ZGVzYzogXCJJZiB0aGUgYm9hciB0YWtlcyA3IGRhbWFnZSBvciBsZXNzIHRoYXQgd291bGQgcmVkdWNlIGl0IHRvIDAgaGl0IHBvaW50cywgaXQgaXMgcmVkdWNlZCB0byAxIGhpdCBwb2ludCBpbnN0ZWFkLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlR1c2tcIixcblx0XHRcdFx0ZGVzYzogXCJXZWFwb24gQXR0YWNrOiArMyB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDQgKDFkNiArIDEpIHNsYXNoaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAzLFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxZDZcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiAxLFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJCb25lIERldmlsXCIsXG5cdFx0c2l6ZTogXCJMYXJnZVwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcImZpZW5kXCIsXG5cdFx0c3VidHlwZTogXCJkZXZpbFwiLFxuXHRcdGFsaWdubWVudDogXCJsYXdmdWwgZXZpbFwiLFxuXHRcdGFjOiAxOSxcblx0XHRocDogMTQyLFxuXHRcdGhpdF9kaWNlOiBcIjE1ZDEwXCIsXG5cdFx0c3BlZWQ6IFwiNDAgZnQuLCBmbHkgNDAgZnQuXCIsXG5cdFx0c3RhdHM6IFsxOCwgMTYsIDE4LCAxMywgMTQsIDE2XSxcblx0XHRzYXZlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRpbnRlbGxpZ2VuY2U6IDUsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHR3aXNkb206IDYsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRjaGFyaXNtYTogNyxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRza2lsbHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdGRlY2VwdGlvbjogNyxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdGluc2lnaHQ6IDYsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6XG5cdFx0XHRcImNvbGQ7IGJsdWRnZW9uaW5nLCBwaWVyY2luZywgYW5kIHNsYXNoaW5nIGZyb20gbm9ubWFnaWNhbCB3ZWFwb25zIHRoYXQgYXJlbid0IHNpbHZlcmVkXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiZmlyZSwgcG9pc29uXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwicG9pc29uZWRcIixcblx0XHRzZW5zZXM6IFwiZGFya3Zpc2lvbiAxMjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gOVwiLFxuXHRcdGxhbmd1YWdlczogXCJJbmZlcm5hbCwgdGVsZXBhdGh5IDEyMCBmdC5cIixcblx0XHRjcjogXCIxMlwiLFxuXHRcdHRyYWl0czogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkRldmlsJ3MgU2lnaHRcIixcblx0XHRcdFx0ZGVzYzogXCJNYWdpY2FsIGRhcmtuZXNzIGRvZXNuJ3QgaW1wZWRlIHRoZSBkZXZpbCdzIGRhcmt2aXNpb24uXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTWFnaWMgUmVzaXN0YW5jZVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBkZXZpbCBoYXMgYWR2YW50YWdlIG9uIHNhdmluZyB0aHJvd3MgYWdhaW5zdCBzcGVsbHMgYW5kIG90aGVyIG1hZ2ljYWwgZWZmZWN0cy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJNdWx0aWF0dGFja1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBkZXZpbCBtYWtlcyB0aHJlZSBhdHRhY2tzOiB0d28gd2l0aCBpdHMgY2xhd3MgYW5kIG9uZSB3aXRoIGl0cyBzdGluZy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJNdWx0aWF0dGFja1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBkZXZpbCBtYWtlcyB0aHJlZSBhdHRhY2tzOiB0d28gd2l0aCBpdHMgY2xhd3MgYW5kIG9uZSB3aXRoIGl0cyBzdGluZy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJDbGF3XCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzggdG8gaGl0LCByZWFjaCAxMCBmdC4sIG9uZSB0YXJnZXQuIEhpdDogOCAoMWQ4ICsgNCkgc2xhc2hpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDgsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjFkOFwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDQsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkNsYXdcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArOCB0byBoaXQsIHJlYWNoIDEwIGZ0Liwgb25lIHRhcmdldC4gSGl0OiA4ICgxZDggKyA0KSBzbGFzaGluZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogOCxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMWQ4XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogNCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiU3RpbmdcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArOCB0byBoaXQsIHJlYWNoIDEwIGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxMyAoMmQ4ICsgNCkgcGllcmNpbmcgZGFtYWdlIHBsdXMgMTcgKDVkNikgcG9pc29uIGRhbWFnZSwgYW5kIHRoZSB0YXJnZXQgbXVzdCBzdWNjZWVkIG9uIGEgREMgMTQgQ29uc3RpdHV0aW9uIHNhdmluZyB0aHJvdyBvciBiZWNvbWUgcG9pc29uZWQgZm9yIDEgbWludXRlLiBUaGUgdGFyZ2V0IGNhbiByZXBlYXQgdGhlIHNhdmluZyB0aHJvdyBhdCB0aGUgZW5kIG9mIGVhY2ggb2YgaXRzIHR1cm5zLCBlbmRpbmcgdGhlIGVmZmVjdCBvbiBpdHNlbGYgb24gYSBzdWNjZXNzIC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA4LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIyZDhcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiA0LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJTdGluZ1wiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs4IHRvIGhpdCwgcmVhY2ggMTAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDEzICgyZDggKyA0KSBwaWVyY2luZyBkYW1hZ2UgcGx1cyAxNyAoNWQ2KSBwb2lzb24gZGFtYWdlLCBhbmQgdGhlIHRhcmdldCBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxNCBDb25zdGl0dXRpb24gc2F2aW5nIHRocm93IG9yIGJlY29tZSBwb2lzb25lZCBmb3IgMSBtaW51dGUuIFRoZSB0YXJnZXQgY2FuIHJlcGVhdCB0aGUgc2F2aW5nIHRocm93IGF0IHRoZSBlbmQgb2YgZWFjaCBvZiBpdHMgdHVybnMsIGVuZGluZyB0aGUgZWZmZWN0IG9uIGl0c2VsZiBvbiBhIHN1Y2Nlc3MgLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDgsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjJkOFwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDQsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIkJyYXNzIERyYWdvbiBXeXJtbGluZ1wiLFxuXHRcdHNpemU6IFwiTWVkaXVtXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwiZHJhZ29uXCIsXG5cdFx0c3VidHlwZTogXCJcIixcblx0XHRhbGlnbm1lbnQ6IFwiY2hhb3RpYyBnb29kXCIsXG5cdFx0YWM6IDE2LFxuXHRcdGhwOiAxNixcblx0XHRoaXRfZGljZTogXCIzZDhcIixcblx0XHRzcGVlZDogXCIzMCBmdC4sIGJ1cnJvdyAxNSBmdC4sIGZseSA2MCBmdC5cIixcblx0XHRzdGF0czogWzE1LCAxMCwgMTMsIDEwLCAxMSwgMTNdLFxuXHRcdHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdGRleHRlcml0eTogMixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdGNvbnN0aXR1dGlvbjogMyxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHdpc2RvbTogMixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdGNoYXJpc21hOiAzLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdHNraWxsc2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0cGVyY2VwdGlvbjogNCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHN0ZWFsdGg6IDIsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiZmlyZVwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuXHRcdHNlbnNlczogXCJibGluZHNpZ2h0IDEwIGZ0LiwgZGFya3Zpc2lvbiA2MCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxNFwiLFxuXHRcdGxhbmd1YWdlczogXCJEcmFjb25pY1wiLFxuXHRcdGNyOiBcIjFcIixcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQml0ZVwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs0IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogNyAoMWQxMCArIDIpIHBpZXJjaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA0LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxZDEwXCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogMixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQnJlYXRoIFdlYXBvbnMgKFJlY2hhcmdlIDUtNilcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgZHJhZ29uIHVzZXMgb25lIG9mIHRoZSBmb2xsb3dpbmcgYnJlYXRoIHdlYXBvbnMuXFxuRmlyZSBCcmVhdGguIFRoZSBkcmFnb24gZXhoYWxlcyBmaXJlIGluIGFuIDIwLWZvb3QgbGluZSB0aGF0IGlzIDUgZmVldCB3aWRlLiBFYWNoIGNyZWF0dXJlIGluIHRoYXQgbGluZSBtdXN0IG1ha2UgYSBEQyAxMSBEZXh0ZXJpdHkgc2F2aW5nIHRocm93LCB0YWtpbmcgMTQgKDRkNikgZmlyZSBkYW1hZ2Ugb24gYSBmYWlsZWQgc2F2ZSwgb3IgaGFsZiBhcyBtdWNoIGRhbWFnZSBvbiBhIHN1Y2Nlc3NmdWwgb25lLlxcblNsZWVwIEJyZWF0aC4gVGhlIGRyYWdvbiBleGhhbGVzIHNsZWVwIGdhcyBpbiBhIDE1LWZvb3QgY29uZS4gRWFjaCBjcmVhdHVyZSBpbiB0aGF0IGFyZWEgbXVzdCBzdWNjZWVkIG9uIGEgREMgMTEgQ29uc3RpdHV0aW9uIHNhdmluZyB0aHJvdyBvciBmYWxsIHVuY29uc2Npb3VzIGZvciAxIG1pbnV0ZS4gVGhpcyBlZmZlY3QgZW5kcyBmb3IgYSBjcmVhdHVyZSBpZiB0aGUgY3JlYXR1cmUgdGFrZXMgZGFtYWdlIG9yIHNvbWVvbmUgdXNlcyBhbiBhY3Rpb24gdG8gd2FrZSBpdC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCI0ZDZcIixcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiQnJvbnplIERyYWdvbiBXeXJtbGluZ1wiLFxuXHRcdHNpemU6IFwiTWVkaXVtXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwiZHJhZ29uXCIsXG5cdFx0c3VidHlwZTogXCJcIixcblx0XHRhbGlnbm1lbnQ6IFwibGF3ZnVsIGdvb2RcIixcblx0XHRhYzogMTcsXG5cdFx0aHA6IDMyLFxuXHRcdGhpdF9kaWNlOiBcIjVkOFwiLFxuXHRcdHNwZWVkOiBcIjMwIGZ0LiwgZmx5IDYwIGZ0Liwgc3dpbSAzMCBmdC5cIixcblx0XHRzdGF0czogWzE3LCAxMCwgMTUsIDEyLCAxMSwgMTVdLFxuXHRcdHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdGRleHRlcml0eTogMixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdGNvbnN0aXR1dGlvbjogNCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHdpc2RvbTogMixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdGNoYXJpc21hOiA0LFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdHNraWxsc2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0cGVyY2VwdGlvbjogNCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHN0ZWFsdGg6IDIsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwibGlnaHRuaW5nXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0c2Vuc2VzOiBcImJsaW5kc2lnaHQgMTAgZnQuLCBkYXJrdmlzaW9uIDYwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDE0XCIsXG5cdFx0bGFuZ3VhZ2VzOiBcIkRyYWNvbmljXCIsXG5cdFx0Y3I6IFwiMlwiLFxuXHRcdHRyYWl0czogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkFtcGhpYmlvdXNcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgZHJhZ29uIGNhbiBicmVhdGhlIGFpciBhbmQgd2F0ZXIuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQml0ZVwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs1IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogOCAoMWQxMCArIDMpIHBpZXJjaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA1LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxZDEwXCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogMyxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQnJlYXRoIFdlYXBvbnMgKFJlY2hhcmdlIDUtNilcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgZHJhZ29uIHVzZXMgb25lIG9mIHRoZSBmb2xsb3dpbmcgYnJlYXRoIHdlYXBvbnMuXFxuTGlnaHRuaW5nIEJyZWF0aC4gVGhlIGRyYWdvbiBleGhhbGVzIGxpZ2h0bmluZyBpbiBhIDQwLWZvb3QgbGluZSB0aGF0IGlzIDUgZmVldCB3aWRlLiBFYWNoIGNyZWF0dXJlIGluIHRoYXQgbGluZSBtdXN0IG1ha2UgYSBEQyAxMiBEZXh0ZXJpdHkgc2F2aW5nIHRocm93LCB0YWtpbmcgMTYgKDNkMTApIGxpZ2h0bmluZyBkYW1hZ2Ugb24gYSBmYWlsZWQgc2F2ZSwgb3IgaGFsZiBhcyBtdWNoIGRhbWFnZSBvbiBhIHN1Y2Nlc3NmdWwgb25lLlxcblJlcHVsc2lvbiBCcmVhdGguIFRoZSBkcmFnb24gZXhoYWxlcyByZXB1bHNpb24gZW5lcmd5IGluIGEgMzAtZm9vdCBjb25lLiBFYWNoIGNyZWF0dXJlIGluIHRoYXQgYXJlYSBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxMiBTdHJlbmd0aCBzYXZpbmcgdGhyb3cuIE9uIGEgZmFpbGVkIHNhdmUsIHRoZSBjcmVhdHVyZSBpcyBwdXNoZWQgMzAgZmVldCBhd2F5IGZyb20gdGhlIGRyYWdvbi5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIzZDEwXCIsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIkJyb3duIEJlYXJcIixcblx0XHRzaXplOiBcIkxhcmdlXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwiYmVhc3RcIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcblx0XHRhYzogMTEsXG5cdFx0aHA6IDM0LFxuXHRcdGhpdF9kaWNlOiBcIjRkMTBcIixcblx0XHRzcGVlZDogXCI0MCBmdC4sIGNsaW1iIDMwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbMTksIDEwLCAxNiwgMiwgMTMsIDddLFxuXHRcdHNraWxsc2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0cGVyY2VwdGlvbjogMyxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcblx0XHRzZW5zZXM6IFwicGFzc2l2ZSBQZXJjZXB0aW9uIDEzXCIsXG5cdFx0bGFuZ3VhZ2VzOiBcIlwiLFxuXHRcdGNyOiBcIjFcIixcblx0XHR0cmFpdHM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJLZWVuIFNtZWxsXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGJlYXIgaGFzIGFkdmFudGFnZSBvbiBXaXNkb20gKFBlcmNlcHRpb24pIGNoZWNrcyB0aGF0IHJlbHkgb24gc21lbGwuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgYmVhciBtYWtlcyB0d28gYXR0YWNrczogb25lIHdpdGggaXRzIGJpdGUgYW5kIG9uZSB3aXRoIGl0cyBjbGF3cy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJCaXRlXCIsXG5cdFx0XHRcdGRlc2M6IFwiV2VhcG9uIEF0dGFjazogKzUgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiA4ICgxZDggKyA0KSBwaWVyY2luZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNSxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMWQ4XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogNCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQ2xhd3NcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNSB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDExICgyZDYgKyA0KSBzbGFzaGluZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNSxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMmQ2XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogNCxcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiQnVnYmVhclwiLFxuXHRcdHNpemU6IFwiTWVkaXVtXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwiaHVtYW5vaWRcIixcblx0XHRzdWJ0eXBlOiBcImdvYmxpbm9pZFwiLFxuXHRcdGFsaWdubWVudDogXCJjaGFvdGljIGV2aWxcIixcblx0XHRhYzogMTYsXG5cdFx0aHA6IDI3LFxuXHRcdGhpdF9kaWNlOiBcIjVkOFwiLFxuXHRcdHNwZWVkOiBcIjMwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbMTUsIDE0LCAxMywgOCwgMTEsIDldLFxuXHRcdHNraWxsc2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0c3RlYWx0aDogNixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHN1cnZpdmFsOiAyLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuXHRcdGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuXHRcdHNlbnNlczogXCJkYXJrdmlzaW9uIDYwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDEwXCIsXG5cdFx0bGFuZ3VhZ2VzOiBcIkNvbW1vbiwgR29ibGluXCIsXG5cdFx0Y3I6IFwiMVwiLFxuXHRcdHRyYWl0czogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkJydXRlXCIsXG5cdFx0XHRcdGRlc2M6IFwiQSBtZWxlZSB3ZWFwb24gZGVhbHMgb25lIGV4dHJhIGRpZSBvZiBpdHMgZGFtYWdlIHdoZW4gdGhlIGJ1Z2JlYXIgaGl0cyB3aXRoIGl0IChpbmNsdWRlZCBpbiB0aGUgYXR0YWNrKS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJTdXJwcmlzZSBBdHRhY2tcIixcblx0XHRcdFx0ZGVzYzogXCJJZiB0aGUgYnVnYmVhciBzdXJwcmlzZXMgYSBjcmVhdHVyZSBhbmQgaGl0cyBpdCB3aXRoIGFuIGF0dGFjayBkdXJpbmcgdGhlIGZpcnN0IHJvdW5kIG9mIGNvbWJhdCwgdGhlIHRhcmdldCB0YWtlcyBhbiBleHRyYSA3ICgyZDYpIGRhbWFnZSBmcm9tIHRoZSBhdHRhY2suXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMmQ2XCIsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIk1vcm5pbmdzdGFyXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzQgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxMSAoMmQ4ICsgMikgcGllcmNpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDQsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjJkOFwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDIsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkphdmVsaW5cIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBvciBSYW5nZWQgV2VhcG9uIEF0dGFjazogKzQgdG8gaGl0LCByZWFjaCA1IGZ0LiBvciByYW5nZSAzMC8xMjAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDkgKDJkNiArIDIpIHBpZXJjaW5nIGRhbWFnZSBpbiBtZWxlZSBvciA1ICgxZDYgKyAyKSBwaWVyY2luZyBkYW1hZ2UgYXQgcmFuZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNCxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMmQ2XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogMixcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiQnVsZXR0ZVwiLFxuXHRcdHNpemU6IFwiTGFyZ2VcIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJtb25zdHJvc2l0eVwiLFxuXHRcdHN1YnR5cGU6IFwiXCIsXG5cdFx0YWxpZ25tZW50OiBcInVuYWxpZ25lZFwiLFxuXHRcdGFjOiAxNyxcblx0XHRocDogOTQsXG5cdFx0aGl0X2RpY2U6IFwiOWQxMFwiLFxuXHRcdHNwZWVkOiBcIjQwIGZ0LiwgYnVycm93IDQwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbMTksIDExLCAyMSwgMiwgMTAsIDVdLFxuXHRcdHNraWxsc2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0cGVyY2VwdGlvbjogNixcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcblx0XHRzZW5zZXM6IFwiZGFya3Zpc2lvbiA2MCBmdC4sIHRyZW1vcnNlbnNlIDYwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDE2XCIsXG5cdFx0bGFuZ3VhZ2VzOiBcIlwiLFxuXHRcdGNyOiBcIjVcIixcblx0XHR0cmFpdHM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJTdGFuZGluZyBMZWFwXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGJ1bGV0dGUncyBsb25nIGp1bXAgaXMgdXAgdG8gMzAgZnQuIGFuZCBpdHMgaGlnaCBqdW1wIGlzIHVwIHRvIDE1IGZ0Liwgd2l0aCBvciB3aXRob3V0IGEgcnVubmluZyBzdGFydC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJCaXRlXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzcgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAzMCAoNGQxMiArIDQpIHBpZXJjaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA3LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCI0ZDEyXCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogNCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiRGVhZGx5IExlYXBcIixcblx0XHRcdFx0ZGVzYzogXCJJZiB0aGUgYnVsZXR0ZSBqdW1wcyBhdCBsZWFzdCAxNSBmdC4gYXMgcGFydCBvZiBpdHMgbW92ZW1lbnQsIGl0IGNhbiB0aGVuIHVzZSB0aGlzIGFjdGlvbiB0byBsYW5kIG9uIGl0cyBmdC4gaW4gYSBzcGFjZSB0aGF0IGNvbnRhaW5zIG9uZSBvciBtb3JlIG90aGVyIGNyZWF0dXJlcy4gRWFjaCBvZiB0aG9zZSBjcmVhdHVyZXMgbXVzdCBzdWNjZWVkIG9uIGEgREMgMTYgU3RyZW5ndGggb3IgRGV4dGVyaXR5IHNhdmluZyB0aHJvdyAodGFyZ2V0J3MgY2hvaWNlKSBvciBiZSBrbm9ja2VkIHByb25lIGFuZCB0YWtlIDE0ICgzZDYgKyA0KSBibHVkZ2VvbmluZyBkYW1hZ2UgcGx1cyAxNCAoM2Q2ICsgNCkgc2xhc2hpbmcgZGFtYWdlLiBPbiBhIHN1Y2Nlc3NmdWwgc2F2ZSwgdGhlIGNyZWF0dXJlIHRha2VzIG9ubHkgaGFsZiB0aGUgZGFtYWdlLCBpc24ndCBrbm9ja2VkIHByb25lLCBhbmQgaXMgcHVzaGVkIDUgZnQuIG91dCBvZiB0aGUgYnVsZXR0ZSdzIHNwYWNlIGludG8gYW4gdW5vY2N1cGllZCBzcGFjZSBvZiB0aGUgY3JlYXR1cmUncyBjaG9pY2UuIElmIG5vIHVub2NjdXBpZWQgc3BhY2UgaXMgd2l0aGluIHJhbmdlLCB0aGUgY3JlYXR1cmUgaW5zdGVhZCBmYWxscyBwcm9uZSBpbiB0aGUgYnVsZXR0ZSdzIHNwYWNlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIkNhbWVsXCIsXG5cdFx0c2l6ZTogXCJMYXJnZVwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcImJlYXN0XCIsXG5cdFx0c3VidHlwZTogXCJcIixcblx0XHRhbGlnbm1lbnQ6IFwidW5hbGlnbmVkXCIsXG5cdFx0YWM6IDksXG5cdFx0aHA6IDE1LFxuXHRcdGhpdF9kaWNlOiBcIjJkMTBcIixcblx0XHRzcGVlZDogXCI1MCBmdC5cIixcblx0XHRzdGF0czogWzE2LCA4LCAxNCwgMiwgOCwgNV0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0c2Vuc2VzOiBcInBhc3NpdmUgUGVyY2VwdGlvbiA5XCIsXG5cdFx0bGFuZ3VhZ2VzOiBcIlwiLFxuXHRcdGNyOiBcIjEvOFwiLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJCaXRlXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzUgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAyICgxZDQpIGJsdWRnZW9uaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA1LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxZDRcIixcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiQ2FycmlvbiBDcmF3bGVyXCIsXG5cdFx0c2l6ZTogXCJMYXJnZVwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcIm1vbnN0cm9zaXR5XCIsXG5cdFx0c3VidHlwZTogXCJcIixcblx0XHRhbGlnbm1lbnQ6IFwidW5hbGlnbmVkXCIsXG5cdFx0YWM6IDEzLFxuXHRcdGhwOiA1MSxcblx0XHRoaXRfZGljZTogXCI2ZDEwXCIsXG5cdFx0c3BlZWQ6IFwiMzAgZnQuLCBjbGltYiAzMCBmdC5cIixcblx0XHRzdGF0czogWzE0LCAxMywgMTYsIDEsIDEyLCA1XSxcblx0XHRza2lsbHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdHBlcmNlcHRpb246IDMsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0c2Vuc2VzOiBcImRhcmt2aXNpb24gNjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTNcIixcblx0XHRsYW5ndWFnZXM6IFwiXCIsXG5cdFx0Y3I6IFwiMlwiLFxuXHRcdHRyYWl0czogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIktlZW4gU21lbGxcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgY2FycmlvbiBjcmF3bGVyIGhhcyBhZHZhbnRhZ2Ugb24gV2lzZG9tIChQZXJjZXB0aW9uKSBjaGVja3MgdGhhdCByZWx5IG9uIHNtZWxsLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlNwaWRlciBDbGltYlwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBjYXJyaW9uIGNyYXdsZXIgY2FuIGNsaW1iIGRpZmZpY3VsdCBzdXJmYWNlcywgaW5jbHVkaW5nIHVwc2lkZSBkb3duIG9uIGNlaWxpbmdzLCB3aXRob3V0IG5lZWRpbmcgdG8gbWFrZSBhbiBhYmlsaXR5IGNoZWNrLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGNhcnJpb24gY3Jhd2xlciBtYWtlcyB0d28gYXR0YWNrczogb25lIHdpdGggaXRzIHRlbnRhY2xlcyBhbmQgb25lIHdpdGggaXRzIGJpdGUuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiVGVudGFjbGVzXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzggdG8gaGl0LCByZWFjaCAxMCBmdC4sIG9uZSBjcmVhdHVyZS4gSGl0OiA0ICgxZDQgKyAyKSBwb2lzb24gZGFtYWdlLCBhbmQgdGhlIHRhcmdldCBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxMyBDb25zdGl0dXRpb24gc2F2aW5nIHRocm93IG9yIGJlIHBvaXNvbmVkIGZvciAxIG1pbnV0ZS4gVW50aWwgdGhpcyBwb2lzb24gZW5kcywgdGhlIHRhcmdldCBpcyBwYXJhbHl6ZWQuIFRoZSB0YXJnZXQgY2FuIHJlcGVhdCB0aGUgc2F2aW5nIHRocm93IGF0IHRoZSBlbmQgb2YgZWFjaCBvZiBpdHMgdHVybnMsIGVuZGluZyB0aGUgcG9pc29uIG9uIGl0c2VsZiBvbiBhIHN1Y2Nlc3MuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogOCxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMWQ0XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogMixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQml0ZVwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs0IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogNyAoMmQ0ICsgMikgcGllcmNpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDQsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjJkNFwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDIsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIkNhdFwiLFxuXHRcdHNpemU6IFwiVGlueVwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcImJlYXN0XCIsXG5cdFx0c3VidHlwZTogXCJcIixcblx0XHRhbGlnbm1lbnQ6IFwidW5hbGlnbmVkXCIsXG5cdFx0YWM6IDEyLFxuXHRcdGhwOiAyLFxuXHRcdGhpdF9kaWNlOiBcIjFkNFwiLFxuXHRcdHNwZWVkOiBcIjQwIGZ0LiwgY2xpbWIgMzAgZnQuXCIsXG5cdFx0c3RhdHM6IFszLCAxNSwgMTAsIDMsIDEyLCA3XSxcblx0XHRza2lsbHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdHBlcmNlcHRpb246IDMsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRzdGVhbHRoOiA0LFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuXHRcdGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuXHRcdHNlbnNlczogXCJwYXNzaXZlIFBlcmNlcHRpb24gMTNcIixcblx0XHRsYW5ndWFnZXM6IFwiXCIsXG5cdFx0Y3I6IFwiMFwiLFxuXHRcdHRyYWl0czogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIktlZW4gU21lbGxcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgY2F0IGhhcyBhZHZhbnRhZ2Ugb24gV2lzZG9tIChQZXJjZXB0aW9uKSBjaGVja3MgdGhhdCByZWx5IG9uIHNtZWxsLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkNsYXdzXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzAgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxIHNsYXNoaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDEsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIkNhdmUgQmVhclwiLFxuXHRcdHNpemU6IFwiTGFyZ2VcIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJiZWFzdFwiLFxuXHRcdHN1YnR5cGU6IFwiXCIsXG5cdFx0YWxpZ25tZW50OiBcInVuYWxpZ25lZFwiLFxuXHRcdGFjOiAxMixcblx0XHRocDogNDIsXG5cdFx0aGl0X2RpY2U6IFwiNWQxMFwiLFxuXHRcdHNwZWVkOiBcIjQwIGZ0Liwgc3dpbSAzMCBmdC5cIixcblx0XHRzdGF0czogWzIwLCAxMCwgMTYsIDIsIDEzLCA3XSxcblx0XHRza2lsbHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdHBlcmNlcHRpb246IDMsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0c2Vuc2VzOiBcImRhcmt2aXNpb24gNjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTNcIixcblx0XHRsYW5ndWFnZXM6IFwiXCIsXG5cdFx0Y3I6IFwiMlwiLFxuXHRcdHRyYWl0czogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIktlZW4gU21lbGxcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgYmVhciBoYXMgYWR2YW50YWdlIG9uIFdpc2RvbSAoUGVyY2VwdGlvbikgY2hlY2tzIHRoYXQgcmVseSBvbiBzbWVsbC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJNdWx0aWF0dGFja1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBiZWFyIG1ha2VzIHR3byBhdHRhY2tzOiBvbmUgd2l0aCBpdHMgYml0ZSBhbmQgb25lIHdpdGggaXRzIGNsYXdzLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkJpdGVcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNyB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDkgKDFkOCArIDUpIHBpZXJjaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA3LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxZDhcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiA1LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJDbGF3c1wiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs3IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTIgKDJkNiArIDUpIHNsYXNoaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA3LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIyZDZcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiA1LFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJDZW50YXVyXCIsXG5cdFx0c2l6ZTogXCJMYXJnZVwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcIm1vbnN0cm9zaXR5XCIsXG5cdFx0c3VidHlwZTogXCJcIixcblx0XHRhbGlnbm1lbnQ6IFwibmV1dHJhbCBnb29kXCIsXG5cdFx0YWM6IDEyLFxuXHRcdGhwOiA0NSxcblx0XHRoaXRfZGljZTogXCI2ZDEwXCIsXG5cdFx0c3BlZWQ6IFwiNTAgZnQuXCIsXG5cdFx0c3RhdHM6IFsxOCwgMTQsIDE0LCA5LCAxMywgMTFdLFxuXHRcdHNraWxsc2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0YXRobGV0aWNzOiA2LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0cGVyY2VwdGlvbjogMyxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHN1cnZpdmFsOiAzLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuXHRcdGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuXHRcdHNlbnNlczogXCJwYXNzaXZlIFBlcmNlcHRpb24gMTNcIixcblx0XHRsYW5ndWFnZXM6IFwiRWx2aXNoLCBTeWx2YW5cIixcblx0XHRjcjogXCIyXCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQ2hhcmdlXCIsXG5cdFx0XHRcdGRlc2M6IFwiSWYgdGhlIGNlbnRhdXIgbW92ZXMgYXQgbGVhc3QgMzAgZnQuIHN0cmFpZ2h0IHRvd2FyZCBhIHRhcmdldCBhbmQgdGhlbiBoaXRzIGl0IHdpdGggYSBwaWtlIGF0dGFjayBvbiB0aGUgc2FtZSB0dXJuLCB0aGUgdGFyZ2V0IHRha2VzIGFuIGV4dHJhIDEwICgzZDYpIHBpZXJjaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIzZDZcIixcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgY2VudGF1ciBtYWtlcyB0d28gYXR0YWNrczogb25lIHdpdGggaXRzIHBpa2UgYW5kIG9uZSB3aXRoIGl0cyBob292ZXMgb3IgdHdvIHdpdGggaXRzIGxvbmdib3cuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiUGlrZVwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs2IHRvIGhpdCwgcmVhY2ggMTAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDkgKDFkMTAgKyA0KSBwaWVyY2luZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNixcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMWQxMFwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDQsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkhvb3Zlc1wiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs2IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTEgKDJkNiArIDQpIGJsdWRnZW9uaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA2LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIyZDZcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiA0LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJMb25nYm93XCIsXG5cdFx0XHRcdGRlc2M6IFwiUmFuZ2VkIFdlYXBvbiBBdHRhY2s6ICs0IHRvIGhpdCwgcmFuZ2UgMTUwLzYwMCBmdC4sIG9uZSB0YXJnZXQuIEhpdDogNiAoMWQ4ICsgMikgcGllcmNpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDQsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjFkOFwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDIsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIkNoYWluIERldmlsXCIsXG5cdFx0c2l6ZTogXCJNZWRpdW1cIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJmaWVuZFwiLFxuXHRcdHN1YnR5cGU6IFwiZGV2aWxcIixcblx0XHRhbGlnbm1lbnQ6IFwibGF3ZnVsIGV2aWxcIixcblx0XHRhYzogMTYsXG5cdFx0aHA6IDg1LFxuXHRcdGhpdF9kaWNlOiBcIjEwZDhcIixcblx0XHRzcGVlZDogXCIzMCBmdC5cIixcblx0XHRzdGF0czogWzE4LCAxNSwgMTgsIDExLCAxMiwgMTRdLFxuXHRcdGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX3Jlc2lzdGFuY2VzOlxuXHRcdFx0XCJjb2xkOyBibHVkZ2VvbmluZywgcGllcmNpbmcsIGFuZCBzbGFzaGluZyBmcm9tIG5vbm1hZ2ljYWwgd2VhcG9ucyB0aGF0IGFyZW4ndCBzaWx2ZXJlZFwiLFxuXHRcdGRhbWFnZV9pbW11bml0aWVzOiBcImZpcmUsIHBvaXNvblwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcInBvaXNvbmVkXCIsXG5cdFx0c2Vuc2VzOiBcImRhcmt2aXNpb24gMTIwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDhcIixcblx0XHRsYW5ndWFnZXM6IFwiSW5mZXJuYWwsIHRlbGVwYXRoeSAxMjAgZnQuXCIsXG5cdFx0Y3I6IFwiMTFcIixcblx0XHR0cmFpdHM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJEZXZpbCdzIFNpZ2h0XCIsXG5cdFx0XHRcdGRlc2M6IFwiTWFnaWNhbCBkYXJrbmVzcyBkb2Vzbid0IGltcGVkZSB0aGUgZGV2aWwncyBkYXJrdmlzaW9uLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIk1hZ2ljIFJlc2lzdGFuY2VcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgZGV2aWwgaGFzIGFkdmFudGFnZSBvbiBzYXZpbmcgdGhyb3dzIGFnYWluc3Qgc3BlbGxzIGFuZCBvdGhlciBtYWdpY2FsIGVmZmVjdHMuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgZGV2aWwgbWFrZXMgdHdvIGF0dGFja3Mgd2l0aCBpdHMgY2hhaW5zLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkNoYWluXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzggdG8gaGl0LCByZWFjaCAxMCBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTEgKDJkNiArIDQpIHNsYXNoaW5nIGRhbWFnZS4gVGhlIHRhcmdldCBpcyBncmFwcGxlZCAoZXNjYXBlIERDIDE0KSBpZiB0aGUgZGV2aWwgaXNuJ3QgYWxyZWFkeSBncmFwcGxpbmcgYSBjcmVhdHVyZS4gVW50aWwgdGhpcyBncmFwcGxlIGVuZHMsIHRoZSB0YXJnZXQgaXMgcmVzdHJhaW5lZCBhbmQgdGFrZXMgNyAoMmQ2KSBwaWVyY2luZyBkYW1hZ2UgYXQgdGhlIHN0YXJ0IG9mIGVhY2ggb2YgaXRzIHR1cm5zLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDgsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjJkNlwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDQsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkFuaW1hdGUgQ2hhaW5zIChSZWNoYXJnZXMgYWZ0ZXIgYSBTaG9ydCBvciBMb25nIFJlc3QpXCIsXG5cdFx0XHRcdGRlc2M6IFwiVXAgdG8gZm91ciBjaGFpbnMgdGhlIGRldmlsIGNhbiBzZWUgd2l0aGluIDYwIGZlZXQgb2YgaXQgbWFnaWNhbGx5IHNwcm91dCByYXpvci1lZGdlZCBiYXJicyBhbmQgYW5pbWF0ZSB1bmRlciB0aGUgZGV2aWwncyBjb250cm9sLCBwcm92aWRlZCB0aGF0IHRoZSBjaGFpbnMgYXJlbid0IGJlaW5nIHdvcm4gb3IgY2FycmllZC5cXG5FYWNoIGFuaW1hdGVkIGNoYWluIGlzIGFuIG9iamVjdCB3aXRoIEFDIDIwLCAyMCBoaXQgcG9pbnRzLCByZXNpc3RhbmNlIHRvIHBpZXJjaW5nIGRhbWFnZSwgYW5kIGltbXVuaXR5IHRvIHBzeWNoaWMgYW5kIHRodW5kZXIgZGFtYWdlLiBXaGVuIHRoZSBkZXZpbCB1c2VzIE11bHRpYXR0YWNrIG9uIGl0cyB0dXJuLCBpdCBjYW4gdXNlIGVhY2ggYW5pbWF0ZWQgY2hhaW4gdG8gbWFrZSBvbmUgYWRkaXRpb25hbCBjaGFpbiBhdHRhY2suIEFuIGFuaW1hdGVkIGNoYWluIGNhbiBncmFwcGxlIG9uZSBjcmVhdHVyZSBvZiBpdHMgb3duIGJ1dCBjYW4ndCBtYWtlIGF0dGFja3Mgd2hpbGUgZ3JhcHBsaW5nLiBBbiBhbmltYXRlZCBjaGFpbiByZXZlcnRzIHRvIGl0cyBpbmFuaW1hdGUgc3RhdGUgaWYgcmVkdWNlZCB0byAwIGhpdCBwb2ludHMgb3IgaWYgdGhlIGRldmlsIGlzIGluY2FwYWNpdGF0ZWQgb3IgZGllcy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdHJlYWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlVubmVydmluZyBNYXNrXCIsXG5cdFx0XHRcdGRlc2M6IFwiV2hlbiBhIGNyZWF0dXJlIHRoZSBkZXZpbCBjYW4gc2VlIHN0YXJ0cyBpdHMgdHVybiB3aXRoaW4gMzAgZmVldCBvZiB0aGUgZGV2aWwsIHRoZSBkZXZpbCBjYW4gY3JlYXRlIHRoZSBpbGx1c2lvbiB0aGF0IGl0IGxvb2tzIGxpa2Ugb25lIG9mIHRoZSBjcmVhdHVyZSdzIGRlcGFydGVkIGxvdmVkIG9uZXMgb3IgYml0dGVyIGVuZW1pZXMuIElmIHRoZSBjcmVhdHVyZSBjYW4gc2VlIHRoZSBkZXZpbCwgaXQgbXVzdCBzdWNjZWVkIG9uIGEgREMgMTQgV2lzZG9tIHNhdmluZyB0aHJvdyBvciBiZSBmcmlnaHRlbmVkIHVudGlsIHRoZSBlbmQgb2YgaXRzIHR1cm4uXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiQ2hpbWVyYVwiLFxuXHRcdHNpemU6IFwiTGFyZ2VcIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJtb25zdHJvc2l0eVwiLFxuXHRcdHN1YnR5cGU6IFwiXCIsXG5cdFx0YWxpZ25tZW50OiBcImNoYW90aWMgZXZpbFwiLFxuXHRcdGFjOiAxNCxcblx0XHRocDogMTE0LFxuXHRcdGhpdF9kaWNlOiBcIjEyZDEwXCIsXG5cdFx0c3BlZWQ6IFwiMzAgZnQuLCBmbHkgNjAgZnQuXCIsXG5cdFx0c3RhdHM6IFsxOSwgMTEsIDE5LCAzLCAxNCwgMTBdLFxuXHRcdHNraWxsc2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0cGVyY2VwdGlvbjogOCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcblx0XHRzZW5zZXM6IFwiZGFya3Zpc2lvbiA2MCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxOFwiLFxuXHRcdGxhbmd1YWdlczogXCJ1bmRlcnN0YW5kcyBEcmFjb25pYyBidXQgY2FuJ3Qgc3BlYWtcIixcblx0XHRjcjogXCI2XCIsXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGNoaW1lcmEgbWFrZXMgdGhyZWUgYXR0YWNrczogb25lIHdpdGggaXRzIGJpdGUsIG9uZSB3aXRoIGl0cyBob3JucywgYW5kIG9uZSB3aXRoIGl0cyBjbGF3cy4gV2hlbiBpdHMgZmlyZSBicmVhdGggaXMgYXZhaWxhYmxlLCBpdCBjYW4gdXNlIHRoZSBicmVhdGggaW4gcGxhY2Ugb2YgaXRzIGJpdGUgb3IgaG9ybnMuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQml0ZVwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs3IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTEgKDJkNiArIDQpIHBpZXJjaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA3LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIyZDZcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiA0LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJIb3Juc1wiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs3IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTAgKDFkMTIgKyA0KSBibHVkZ2VvbmluZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNyxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMWQxMlwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDQsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkNsYXdzXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzcgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxMSAoMmQ2ICsgNCkgc2xhc2hpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDcsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjJkNlwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDQsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkZpcmUgQnJlYXRoIChSZWNoYXJnZSA1LTYpXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGRyYWdvbiBoZWFkIGV4aGFsZXMgZmlyZSBpbiBhIDE1LWZvb3QgY29uZS4gRWFjaCBjcmVhdHVyZSBpbiB0aGF0IGFyZWEgbXVzdCBtYWtlIGEgREMgMTUgRGV4dGVyaXR5IHNhdmluZyB0aHJvdywgdGFraW5nIDMxICg3ZDgpIGZpcmUgZGFtYWdlIG9uIGEgZmFpbGVkIHNhdmUsIG9yIGhhbGYgYXMgbXVjaCBkYW1hZ2Ugb24gYSBzdWNjZXNzZnVsIG9uZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCI3ZDhcIixcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiQ2h1dWxcIixcblx0XHRzaXplOiBcIkxhcmdlXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwiYWJlcnJhdGlvblwiLFxuXHRcdHN1YnR5cGU6IFwiXCIsXG5cdFx0YWxpZ25tZW50OiBcImNoYW90aWMgZXZpbFwiLFxuXHRcdGFjOiAxNixcblx0XHRocDogOTMsXG5cdFx0aGl0X2RpY2U6IFwiMTFkMTBcIixcblx0XHRzcGVlZDogXCIzMCBmdC4sIHN3aW0gMzAgZnQuXCIsXG5cdFx0c3RhdHM6IFsxOSwgMTAsIDE2LCA1LCAxMSwgNV0sXG5cdFx0c2tpbGxzYXZlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRwZXJjZXB0aW9uOiA0LFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuXHRcdGRhbWFnZV9pbW11bml0aWVzOiBcInBvaXNvblwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcInBvaXNvbmVkXCIsXG5cdFx0c2Vuc2VzOiBcImRhcmt2aXNpb24gNjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTRcIixcblx0XHRsYW5ndWFnZXM6IFwidW5kZXJzdGFuZHMgRGVlcCBTcGVlY2ggYnV0IGNhbid0IHNwZWFrXCIsXG5cdFx0Y3I6IFwiNFwiLFxuXHRcdHRyYWl0czogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkFtcGhpYmlvdXNcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgY2h1dWwgY2FuIGJyZWF0aGUgYWlyIGFuZCB3YXRlci5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJTZW5zZSBNYWdpY1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBjaHV1bCBzZW5zZXMgbWFnaWMgd2l0aGluIDEyMCBmZWV0IG9mIGl0IGF0IHdpbGwuIFRoaXMgdHJhaXQgb3RoZXJ3aXNlIHdvcmtzIGxpa2UgdGhlIGRldGVjdCBtYWdpYyBzcGVsbCBidXQgaXNuJ3QgaXRzZWxmIG1hZ2ljYWwuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgY2h1dWwgbWFrZXMgdHdvIHBpbmNlciBhdHRhY2tzLiBJZiB0aGUgY2h1dWwgaXMgZ3JhcHBsaW5nIGEgY3JlYXR1cmUsIHRoZSBjaHV1bCBjYW4gYWxzbyB1c2UgaXRzIHRlbnRhY2xlcyBvbmNlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlBpbmNlclwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs2IHRvIGhpdCwgcmVhY2ggMTAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDExICgyZDYgKyA0KSBibHVkZ2VvbmluZyBkYW1hZ2UuIFRoZSB0YXJnZXQgaXMgZ3JhcHBsZWQgKGVzY2FwZSBEQyAxNCkgaWYgaXQgaXMgYSBMYXJnZSBvciBzbWFsbGVyIGNyZWF0dXJlIGFuZCB0aGUgY2h1dWwgZG9lc24ndCBoYXZlIHR3byBvdGhlciBjcmVhdHVyZXMgZ3JhcHBsZWQuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNixcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMmQ2XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogNCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiVGVudGFjbGVzXCIsXG5cdFx0XHRcdGRlc2M6IFwiT25lIGNyZWF0dXJlIGdyYXBwbGVkIGJ5IHRoZSBjaHV1bCBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxMyBDb25zdGl0dXRpb24gc2F2aW5nIHRocm93IG9yIGJlIHBvaXNvbmVkIGZvciAxIG1pbnV0ZS4gVW50aWwgdGhpcyBwb2lzb24gZW5kcywgdGhlIHRhcmdldCBpcyBwYXJhbHl6ZWQuIFRoZSB0YXJnZXQgY2FuIHJlcGVhdCB0aGUgc2F2aW5nIHRocm93IGF0IHRoZSBlbmQgb2YgZWFjaCBvZiBpdHMgdHVybnMsIGVuZGluZyB0aGUgZWZmZWN0IG9uIGl0c2VsZiBvbiBhIHN1Y2Nlc3MuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiQ2xheSBHb2xlbVwiLFxuXHRcdHNpemU6IFwiTGFyZ2VcIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJjb25zdHJ1Y3RcIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcblx0XHRhYzogMTQsXG5cdFx0aHA6IDEzMyxcblx0XHRoaXRfZGljZTogXCIxNGQxMFwiLFxuXHRcdHNwZWVkOiBcIjIwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbMjAsIDksIDE4LCAzLCA4LCAxXSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczpcblx0XHRcdFwiYWNpZCwgcG9pc29uLCBwc3ljaGljOyBibHVkZ2VvbmluZywgcGllcmNpbmcsIGFuZCBzbGFzaGluZyBmcm9tIG5vbm1hZ2ljYWwgd2VhcG9ucyB0aGF0IGFyZW4ndCBhZGFtYW50aW5lXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6XG5cdFx0XHRcImNoYXJtZWQsIGV4aGF1c3Rpb24sIGZyaWdodGVuZWQsIHBhcmFseXplZCwgcGV0cmlmaWVkLCBwb2lzb25lZFwiLFxuXHRcdHNlbnNlczogXCJkYXJrdmlzaW9uIDYwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDlcIixcblx0XHRsYW5ndWFnZXM6IFwidW5kZXJzdGFuZHMgdGhlIGxhbmd1YWdlcyBvZiBpdHMgY3JlYXRvciBidXQgY2FuJ3Qgc3BlYWtcIixcblx0XHRjcjogXCI5XCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQWNpZCBBYnNvcnB0aW9uXCIsXG5cdFx0XHRcdGRlc2M6IFwiV2hlbmV2ZXIgdGhlIGdvbGVtIGlzIHN1YmplY3RlZCB0byBhY2lkIGRhbWFnZSwgaXQgdGFrZXMgbm8gZGFtYWdlIGFuZCBpbnN0ZWFkIHJlZ2FpbnMgYSBudW1iZXIgb2YgaGl0IHBvaW50cyBlcXVhbCB0byB0aGUgYWNpZCBkYW1hZ2UgZGVhbHQuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQmVyc2Vya1wiLFxuXHRcdFx0XHRkZXNjOiBcIldoZW5ldmVyIHRoZSBnb2xlbSBzdGFydHMgaXRzIHR1cm4gd2l0aCA2MCBoaXQgcG9pbnRzIG9yIGZld2VyLCByb2xsIGEgZDYuIE9uIGEgNiwgdGhlIGdvbGVtIGdvZXMgYmVyc2Vyay4gT24gZWFjaCBvZiBpdHMgdHVybnMgd2hpbGUgYmVyc2VyaywgdGhlIGdvbGVtIGF0dGFja3MgdGhlIG5lYXJlc3QgY3JlYXR1cmUgaXQgY2FuIHNlZS4gSWYgbm8gY3JlYXR1cmUgaXMgbmVhciBlbm91Z2ggdG8gbW92ZSB0byBhbmQgYXR0YWNrLCB0aGUgZ29sZW0gYXR0YWNrcyBhbiBvYmplY3QsIHdpdGggcHJlZmVyZW5jZSBmb3IgYW4gb2JqZWN0IHNtYWxsZXIgdGhhbiBpdHNlbGYuIE9uY2UgdGhlIGdvbGVtIGdvZXMgYmVyc2VyaywgaXQgY29udGludWVzIHRvIGRvIHNvIHVudGlsIGl0IGlzIGRlc3Ryb3llZCBvciByZWdhaW5zIGFsbCBpdHMgaGl0IHBvaW50cy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJJbW11dGFibGUgRm9ybVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBnb2xlbSBpcyBpbW11bmUgdG8gYW55IHNwZWxsIG9yIGVmZmVjdCB0aGF0IHdvdWxkIGFsdGVyIGl0cyBmb3JtLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIk1hZ2ljIFJlc2lzdGFuY2VcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgZ29sZW0gaGFzIGFkdmFudGFnZSBvbiBzYXZpbmcgdGhyb3dzIGFnYWluc3Qgc3BlbGxzIGFuZCBvdGhlciBtYWdpY2FsIGVmZmVjdHMuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTWFnaWMgV2VhcG9uc1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBnb2xlbSdzIHdlYXBvbiBhdHRhY2tzIGFyZSBtYWdpY2FsLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGdvbGVtIG1ha2VzIHR3byBzbGFtIGF0dGFja3MuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiU2xhbVwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs4IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTYgKDJkMTAgKyA1KSBibHVkZ2VvbmluZyBkYW1hZ2UuIElmIHRoZSB0YXJnZXQgaXMgYSBjcmVhdHVyZSwgaXQgbXVzdCBzdWNjZWVkIG9uIGEgREMgMTUgQ29uc3RpdHV0aW9uIHNhdmluZyB0aHJvdyBvciBoYXZlIGl0cyBoaXQgcG9pbnQgbWF4aW11bSByZWR1Y2VkIGJ5IGFuIGFtb3VudCBlcXVhbCB0byB0aGUgZGFtYWdlIHRha2VuLiBUaGUgdGFyZ2V0IGRpZXMgaWYgdGhpcyBhdHRhY2sgcmVkdWNlcyBpdHMgaGl0IHBvaW50IG1heGltdW0gdG8gMC4gVGhlIHJlZHVjdGlvbiBsYXN0cyB1bnRpbCByZW1vdmVkIGJ5IHRoZSBncmVhdGVyIHJlc3RvcmF0aW9uIHNwZWxsIG9yIG90aGVyIG1hZ2ljLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDgsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjJkMTBcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiA1LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJIYXN0ZSAoUmVjaGFyZ2UgNS02KVwiLFxuXHRcdFx0XHRkZXNjOiBcIlVudGlsIHRoZSBlbmQgb2YgaXRzIG5leHQgdHVybiwgdGhlIGdvbGVtIG1hZ2ljYWxseSBnYWlucyBhICsyIGJvbnVzIHRvIGl0cyBBQywgaGFzIGFkdmFudGFnZSBvbiBEZXh0ZXJpdHkgc2F2aW5nIHRocm93cywgYW5kIGNhbiB1c2UgaXRzIHNsYW0gYXR0YWNrIGFzIGEgYm9udXMgYWN0aW9uLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIkNsb2FrZXJcIixcblx0XHRzaXplOiBcIkxhcmdlXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwiYWJlcnJhdGlvblwiLFxuXHRcdHN1YnR5cGU6IFwiXCIsXG5cdFx0YWxpZ25tZW50OiBcImNoYW90aWMgbmV1dHJhbFwiLFxuXHRcdGFjOiAxNCxcblx0XHRocDogNzgsXG5cdFx0aGl0X2RpY2U6IFwiMTJkMTBcIixcblx0XHRzcGVlZDogXCIxMCBmdC4sIGZseSA0MCBmdC5cIixcblx0XHRzdGF0czogWzE3LCAxNSwgMTIsIDEzLCAxMiwgMTRdLFxuXHRcdHNraWxsc2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0c3RlYWx0aDogNSxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcblx0XHRzZW5zZXM6IFwiZGFya3Zpc2lvbiA2MCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxMVwiLFxuXHRcdGxhbmd1YWdlczogXCJEZWVwIFNwZWVjaCwgVW5kZXJjb21tb25cIixcblx0XHRjcjogXCI4XCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiRGFtYWdlIFRyYW5zZmVyXCIsXG5cdFx0XHRcdGRlc2M6IFwiV2hpbGUgYXR0YWNoZWQgdG8gYSBjcmVhdHVyZSwgdGhlIGNsb2FrZXIgdGFrZXMgb25seSBoYWxmIHRoZSBkYW1hZ2UgZGVhbHQgdG8gaXQgKHJvdW5kZWQgZG93bikuIGFuZCB0aGF0IGNyZWF0dXJlIHRha2VzIHRoZSBvdGhlciBoYWxmLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkZhbHNlIEFwcGVhcmFuY2VcIixcblx0XHRcdFx0ZGVzYzogXCJXaGlsZSB0aGUgY2xvYWtlciByZW1haW5zIG1vdGlvbmxlc3Mgd2l0aG91dCBpdHMgdW5kZXJzaWRlIGV4cG9zZWQsIGl0IGlzIGluZGlzdGluZ3Vpc2hhYmxlIGZyb20gYSBkYXJrIGxlYXRoZXIgY2xvYWsuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTGlnaHQgU2Vuc2l0aXZpdHlcIixcblx0XHRcdFx0ZGVzYzogXCJXaGlsZSBpbiBicmlnaHQgbGlnaHQsIHRoZSBjbG9ha2VyIGhhcyBkaXNhZHZhbnRhZ2Ugb24gYXR0YWNrIHJvbGxzIGFuZCBXaXNkb20gKFBlcmNlcHRpb24pIGNoZWNrcyB0aGF0IHJlbHkgb24gc2lnaHQuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgY2xvYWtlciBtYWtlcyB0d28gYXR0YWNrczogb25lIHdpdGggaXRzIGJpdGUgYW5kIG9uZSB3aXRoIGl0cyB0YWlsLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkJpdGVcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNiB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgY3JlYXR1cmUuIEhpdDogMTAgKDJkNiArIDMpIHBpZXJjaW5nIGRhbWFnZSwgYW5kIGlmIHRoZSB0YXJnZXQgaXMgTGFyZ2Ugb3Igc21hbGxlciwgdGhlIGNsb2FrZXIgYXR0YWNoZXMgdG8gaXQuIElmIHRoZSBjbG9ha2VyIGhhcyBhZHZhbnRhZ2UgYWdhaW5zdCB0aGUgdGFyZ2V0LCB0aGUgY2xvYWtlciBhdHRhY2hlcyB0byB0aGUgdGFyZ2V0J3MgaGVhZCwgYW5kIHRoZSB0YXJnZXQgaXMgYmxpbmRlZCBhbmQgdW5hYmxlIHRvIGJyZWF0aGUgd2hpbGUgdGhlIGNsb2FrZXIgaXMgYXR0YWNoZWQuIFdoaWxlIGF0dGFjaGVkLCB0aGUgY2xvYWtlciBjYW4gbWFrZSB0aGlzIGF0dGFjayBvbmx5IGFnYWluc3QgdGhlIHRhcmdldCBhbmQgaGFzIGFkdmFudGFnZSBvbiB0aGUgYXR0YWNrIHJvbGwuIFRoZSBjbG9ha2VyIGNhbiBkZXRhY2ggaXRzZWxmIGJ5IHNwZW5kaW5nIDUgZmVldCBvZiBpdHMgbW92ZW1lbnQuIEEgY3JlYXR1cmUsIGluY2x1ZGluZyB0aGUgdGFyZ2V0LCBjYW4gdGFrZSBpdHMgYWN0aW9uIHRvIGRldGFjaCB0aGUgY2xvYWtlciBieSBzdWNjZWVkaW5nIG9uIGEgREMgMTYgU3RyZW5ndGggY2hlY2suXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNixcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMmQ2XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogMyxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiVGFpbFwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs2IHRvIGhpdCwgcmVhY2ggMTAgZnQuLCBvbmUgY3JlYXR1cmUuIEhpdDogNyAoMWQ4ICsgMykgc2xhc2hpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDYsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjFkOFwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDMsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIk1vYW5cIixcblx0XHRcdFx0ZGVzYzogXCJFYWNoIGNyZWF0dXJlIHdpdGhpbiA2MCBmZWV0IG9mIHRoZSBjbG9ha2VyIHRoYXQgY2FuIGhlYXIgaXRzIG1vYW4gYW5kIHRoYXQgaXNuJ3QgYW4gYWJlcnJhdGlvbiBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxMyBXaXNkb20gc2F2aW5nIHRocm93IG9yIGJlY29tZSBmcmlnaHRlbmVkIHVudGlsIHRoZSBlbmQgb2YgdGhlIGNsb2FrZXIncyBuZXh0IHR1cm4uIElmIGEgY3JlYXR1cmUncyBzYXZpbmcgdGhyb3cgaXMgc3VjY2Vzc2Z1bCwgdGhlIGNyZWF0dXJlIGlzIGltbXVuZSB0byB0aGUgY2xvYWtlcidzIG1vYW4gZm9yIHRoZSBuZXh0IDI0IGhvdXJzLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlBoYW50YXNtcyAoUmVjaGFyZ2VzIGFmdGVyIGEgU2hvcnQgb3IgTG9uZyBSZXN0KVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBjbG9ha2VyIG1hZ2ljYWxseSBjcmVhdGVzIHRocmVlIGlsbHVzb3J5IGR1cGxpY2F0ZXMgb2YgaXRzZWxmIGlmIGl0IGlzbid0IGluIGJyaWdodCBsaWdodC4gVGhlIGR1cGxpY2F0ZXMgbW92ZSB3aXRoIGl0IGFuZCBtaW1pYyBpdHMgYWN0aW9ucywgc2hpZnRpbmcgcG9zaXRpb24gc28gYXMgdG8gbWFrZSBpdCBpbXBvc3NpYmxlIHRvIHRyYWNrIHdoaWNoIGNsb2FrZXIgaXMgdGhlIHJlYWwgb25lLiBJZiB0aGUgY2xvYWtlciBpcyBldmVyIGluIGFuIGFyZWEgb2YgYnJpZ2h0IGxpZ2h0LCB0aGUgZHVwbGljYXRlcyBkaXNhcHBlYXIuXFxuV2hlbmV2ZXIgYW55IGNyZWF0dXJlIHRhcmdldHMgdGhlIGNsb2FrZXIgd2l0aCBhbiBhdHRhY2sgb3IgYSBoYXJtZnVsIHNwZWxsIHdoaWxlIGEgZHVwbGljYXRlIHJlbWFpbnMsIHRoYXQgY3JlYXR1cmUgcm9sbHMgcmFuZG9tbHkgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgaXQgdGFyZ2V0cyB0aGUgY2xvYWtlciBvciBvbmUgb2YgdGhlIGR1cGxpY2F0ZXMuIEEgY3JlYXR1cmUgaXMgdW5hZmZlY3RlZCBieSB0aGlzIG1hZ2ljYWwgZWZmZWN0IGlmIGl0IGNhbid0IHNlZSBvciBpZiBpdCByZWxpZXMgb24gc2Vuc2VzIG90aGVyIHRoYW4gc2lnaHQuXFxuQSBkdXBsaWNhdGUgaGFzIHRoZSBjbG9ha2VyJ3MgQUMgYW5kIHVzZXMgaXRzIHNhdmluZyB0aHJvd3MuIElmIGFuIGF0dGFjayBoaXRzIGEgZHVwbGljYXRlLCBvciBpZiBhIGR1cGxpY2F0ZSBmYWlscyBhIHNhdmluZyB0aHJvdyBhZ2FpbnN0IGFuIGVmZmVjdCB0aGF0IGRlYWxzIGRhbWFnZSwgdGhlIGR1cGxpY2F0ZSBkaXNhcHBlYXJzLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIkNsb3VkIEdpYW50XCIsXG5cdFx0c2l6ZTogXCJIdWdlXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwiZ2lhbnRcIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJuZXV0cmFsIGdvb2QgKDUwJSkgb3IgbmV1dHJhbCBldmlsICg1MCUpXCIsXG5cdFx0YWM6IDE0LFxuXHRcdGhwOiAyMDAsXG5cdFx0aGl0X2RpY2U6IFwiMTZkMTJcIixcblx0XHRzcGVlZDogXCI0MCBmdC5cIixcblx0XHRzdGF0czogWzI3LCAxMCwgMjIsIDEyLCAxNiwgMTZdLFxuXHRcdHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdGNvbnN0aXR1dGlvbjogMTAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHR3aXNkb206IDcsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRjaGFyaXNtYTogNyxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRza2lsbHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdGluc2lnaHQ6IDcsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRwZXJjZXB0aW9uOiA3LFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuXHRcdGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuXHRcdHNlbnNlczogXCJwYXNzaXZlIFBlcmNlcHRpb24gMTdcIixcblx0XHRsYW5ndWFnZXM6IFwiQ29tbW9uLCBHaWFudFwiLFxuXHRcdGNyOiBcIjlcIixcblx0XHR0cmFpdHM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJLZWVuIFNtZWxsXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGdpYW50IGhhcyBhZHZhbnRhZ2Ugb24gV2lzZG9tIChQZXJjZXB0aW9uKSBjaGVja3MgdGhhdCByZWx5IG9uIHNtZWxsLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIklubmF0ZSBTcGVsbGNhc3RpbmdcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgZ2lhbnQncyBpbm5hdGUgc3BlbGxjYXN0aW5nIGFiaWxpdHkgaXMgQ2hhcmlzbWEuIEl0IGNhbiBpbm5hdGVseSBjYXN0IHRoZSBmb2xsb3dpbmcgc3BlbGxzLCByZXF1aXJpbmcgbm8gbWF0ZXJpYWwgY29tcG9uZW50czpcXG5cXG5BdCB3aWxsOiBkZXRlY3QgbWFnaWMsIGZvZyBjbG91ZCwgbGlnaHRcXG4zL2RheSBlYWNoOiBmZWF0aGVyIGZhbGwsIGZseSwgbWlzdHkgc3RlcCwgdGVsZWtpbmVzaXNcXG4xL2RheSBlYWNoOiBjb250cm9sIHdlYXRoZXIsIGdhc2VvdXMgZm9ybVwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGdpYW50IG1ha2VzIHR3byBtb3JuaW5nc3RhciBhdHRhY2tzLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIk1vcm5pbmdzdGFyXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzEyIHRvIGhpdCwgcmVhY2ggMTAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDIxICgzZDggKyA4KSBwaWVyY2luZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMTIsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjNkOFwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDgsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlJvY2tcIixcblx0XHRcdFx0ZGVzYzogXCJSYW5nZWQgV2VhcG9uIEF0dGFjazogKzEyIHRvIGhpdCwgcmFuZ2UgNjAvMjQwIGZ0Liwgb25lIHRhcmdldC4gSGl0OiAzMCAoNGQxMCArIDgpIGJsdWRnZW9uaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAxMixcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiNGQxMFwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDgsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIkNvY2thdHJpY2VcIixcblx0XHRzaXplOiBcIlNtYWxsXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwibW9uc3Ryb3NpdHlcIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcblx0XHRhYzogMTEsXG5cdFx0aHA6IDI3LFxuXHRcdGhpdF9kaWNlOiBcIjZkNlwiLFxuXHRcdHNwZWVkOiBcIjIwIGZ0LiwgZmx5IDQwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbNiwgMTIsIDEyLCAyLCAxMywgNV0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0c2Vuc2VzOiBcImRhcmt2aXNpb24gNjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTFcIixcblx0XHRsYW5ndWFnZXM6IFwiXCIsXG5cdFx0Y3I6IFwiMS8yXCIsXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkJpdGVcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMyB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgY3JlYXR1cmUuIEhpdDogMyAoMWQ0ICsgMSkgcGllcmNpbmcgZGFtYWdlLCBhbmQgdGhlIHRhcmdldCBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxMSBDb25zdGl0dXRpb24gc2F2aW5nIHRocm93IGFnYWluc3QgYmVpbmcgbWFnaWNhbGx5IHBldHJpZmllZC4gT24gYSBmYWlsZWQgc2F2ZSwgdGhlIGNyZWF0dXJlIGJlZ2lucyB0byB0dXJuIHRvIHN0b25lIGFuZCBpcyByZXN0cmFpbmVkLiBJdCBtdXN0IHJlcGVhdCB0aGUgc2F2aW5nIHRocm93IGF0IHRoZSBlbmQgb2YgaXRzIG5leHQgdHVybi4gT24gYSBzdWNjZXNzLCB0aGUgZWZmZWN0IGVuZHMuIE9uIGEgZmFpbHVyZSwgdGhlIGNyZWF0dXJlIGlzIHBldHJpZmllZCBmb3IgMjQgaG91cnMuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMyxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMWQ0XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogMSxcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiQ29tbW9uZXJcIixcblx0XHRzaXplOiBcIk1lZGl1bVwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcImh1bWFub2lkXCIsXG5cdFx0c3VidHlwZTogXCJhbnkgcmFjZVwiLFxuXHRcdGFsaWdubWVudDogXCJhbnkgYWxpZ25tZW50XCIsXG5cdFx0YWM6IDEwLFxuXHRcdGhwOiA0LFxuXHRcdGhpdF9kaWNlOiBcIjFkOFwiLFxuXHRcdHNwZWVkOiBcIjMwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbMTAsIDEwLCAxMCwgMTAsIDEwLCAxMF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0c2Vuc2VzOiBcInBhc3NpdmUgUGVyY2VwdGlvbiAxMFwiLFxuXHRcdGxhbmd1YWdlczogXCJhbnkgb25lIGxhbmd1YWdlICh1c3VhbGx5IENvbW1vbilcIixcblx0XHRjcjogXCIwXCIsXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkNsdWJcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMiB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDIgKDFkNCkgYmx1ZGdlb25pbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDIsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjFkNFwiLFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJDb25zdHJpY3RvciBTbmFrZVwiLFxuXHRcdHNpemU6IFwiTGFyZ2VcIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJiZWFzdFwiLFxuXHRcdHN1YnR5cGU6IFwiXCIsXG5cdFx0YWxpZ25tZW50OiBcInVuYWxpZ25lZFwiLFxuXHRcdGFjOiAxMixcblx0XHRocDogMTMsXG5cdFx0aGl0X2RpY2U6IFwiMmQxMFwiLFxuXHRcdHNwZWVkOiBcIjMwIGZ0Liwgc3dpbSAzMCBmdC5cIixcblx0XHRzdGF0czogWzE1LCAxNCwgMTIsIDEsIDEwLCAzXSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcblx0XHRzZW5zZXM6IFwiYmxpbmRzaWdodCAxMCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxMFwiLFxuXHRcdGxhbmd1YWdlczogXCJcIixcblx0XHRjcjogXCIxLzRcIixcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQml0ZVwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs0IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSBjcmVhdHVyZS4gSGl0OiA1ICgxZDYgKyAyKSBwaWVyY2luZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNCxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMWQ2XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogMixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQ29uc3RyaWN0XCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzQgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIGNyZWF0dXJlLiBIaXQ6IDYgKDFkOCArIDIpIGJsdWRnZW9uaW5nIGRhbWFnZSwgYW5kIHRoZSB0YXJnZXQgaXMgZ3JhcHBsZWQgKGVzY2FwZSBEQyAxNCkuIFVudGlsIHRoaXMgZ3JhcHBsZSBlbmRzLCB0aGUgY3JlYXR1cmUgaXMgcmVzdHJhaW5lZCwgYW5kIHRoZSBzbmFrZSBjYW4ndCBjb25zdHJpY3QgYW5vdGhlciB0YXJnZXQuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNCxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMWQ4XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogMixcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiQ29wcGVyIERyYWdvbiBXeXJtbGluZ1wiLFxuXHRcdHNpemU6IFwiTWVkaXVtXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwiZHJhZ29uXCIsXG5cdFx0c3VidHlwZTogXCJcIixcblx0XHRhbGlnbm1lbnQ6IFwiY2hhb3RpYyBnb29kXCIsXG5cdFx0YWM6IDE2LFxuXHRcdGhwOiAyMixcblx0XHRoaXRfZGljZTogXCI0ZDhcIixcblx0XHRzcGVlZDogXCIzMCBmdC4sIGNsaW1iIDMwIGZ0LiwgZmx5IDYwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbMTUsIDEyLCAxMywgMTQsIDExLCAxM10sXG5cdFx0c2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0ZGV4dGVyaXR5OiAzLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0Y29uc3RpdHV0aW9uOiAzLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0d2lzZG9tOiAyLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0Y2hhcmlzbWE6IDMsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0c2tpbGxzYXZlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRwZXJjZXB0aW9uOiA0LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0c3RlYWx0aDogMyxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJhY2lkXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0c2Vuc2VzOiBcImJsaW5kc2lnaHQgMTAgZnQuLCBkYXJrdmlzaW9uIDYwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDE0XCIsXG5cdFx0bGFuZ3VhZ2VzOiBcIkRyYWNvbmljXCIsXG5cdFx0Y3I6IFwiMVwiLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJCaXRlXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzQgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiA3ICgxZDEwICsgMikgcGllcmNpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDQsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjFkMTBcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiAyLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJCcmVhdGggV2VhcG9ucyAoUmVjaGFyZ2UgNS02KVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBkcmFnb24gdXNlcyBvbmUgb2YgdGhlIGZvbGxvd2luZyBicmVhdGggd2VhcG9ucy5cXG5BY2lkIEJyZWF0aC4gVGhlIGRyYWdvbiBleGhhbGVzIGFjaWQgaW4gYW4gMjAtZm9vdCBsaW5lIHRoYXQgaXMgNSBmZWV0IHdpZGUuIEVhY2ggY3JlYXR1cmUgaW4gdGhhdCBsaW5lIG11c3QgbWFrZSBhIERDIDExIERleHRlcml0eSBzYXZpbmcgdGhyb3csIHRha2luZyAxOCAoNGQ4KSBhY2lkIGRhbWFnZSBvbiBhIGZhaWxlZCBzYXZlLCBvciBoYWxmIGFzIG11Y2ggZGFtYWdlIG9uIGEgc3VjY2Vzc2Z1bCBvbmUuXFxuU2xvd2luZyBCcmVhdGguIFRoZSBkcmFnb24gZXhoYWxlcyBnYXMgaW4gYSAxIDUtZm9vdCBjb25lLiBFYWNoIGNyZWF0dXJlIGluIHRoYXQgYXJlYSBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxMSBDb25zdGl0dXRpb24gc2F2aW5nIHRocm93LiBPbiBhIGZhaWxlZCBzYXZlLCB0aGUgY3JlYXR1cmUgY2FuJ3QgdXNlIHJlYWN0aW9ucywgaXRzIHNwZWVkIGlzIGhhbHZlZCwgYW5kIGl0IGNhbid0IG1ha2UgbW9yZSB0aGFuIG9uZSBhdHRhY2sgb24gaXRzIHR1cm4uIEluIGFkZGl0aW9uLCB0aGUgY3JlYXR1cmUgY2FuIHVzZSBlaXRoZXIgYW4gYWN0aW9uIG9yIGEgYm9udXMgYWN0aW9uIG9uIGl0cyB0dXJuLCBidXQgbm90IGJvdGguIFRoZXNlIGVmZmVjdHMgbGFzdCBmb3IgMSBtaW51dGUuIFRoZSBjcmVhdHVyZSBjYW4gcmVwZWF0IHRoZSBzYXZpbmcgdGhyb3cgYXQgdGhlIGVuZCBvZiBlYWNoIG9mIGl0cyB0dXJucywgZW5kaW5nIHRoZSBlZmZlY3Qgb24gaXRzZWxmIHdpdGggYSBzdWNjZXNzZnVsIHNhdmUuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiNGQ4XCIsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIkNvdWF0bFwiLFxuXHRcdHNpemU6IFwiTWVkaXVtXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwiY2VsZXN0aWFsXCIsXG5cdFx0c3VidHlwZTogXCJcIixcblx0XHRhbGlnbm1lbnQ6IFwibGF3ZnVsIGdvb2RcIixcblx0XHRhYzogMTksXG5cdFx0aHA6IDk3LFxuXHRcdGhpdF9kaWNlOiBcIjEzZDhcIixcblx0XHRzcGVlZDogXCIzMCBmdC4sIGZseSA5MCBmdC5cIixcblx0XHRzdGF0czogWzE2LCAyMCwgMTcsIDE4LCAyMCwgMThdLFxuXHRcdHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdGNvbnN0aXR1dGlvbjogNSxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHdpc2RvbTogNyxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdGNoYXJpc21hOiA2LFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX3Jlc2lzdGFuY2VzOiBcInJhZGlhbnRcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczpcblx0XHRcdFwicHN5Y2hpYzsgYmx1ZGdlb25pbmcsIHBpZXJjaW5nLCBhbmQgc2xhc2hpbmcgZnJvbSBub25tYWdpY2FsIHdlYXBvbnNcIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcblx0XHRzZW5zZXM6IFwidHJ1ZXNpZ2h0IDEyMCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxNVwiLFxuXHRcdGxhbmd1YWdlczogXCJhbGwsIHRlbGVwYXRoeSAxMjAgZnQuXCIsXG5cdFx0Y3I6IFwiNFwiLFxuXHRcdHRyYWl0czogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIklubmF0ZSBTcGVsbGNhc3RpbmdcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgY291YXRsJ3Mgc3BlbGxjYXN0aW5nIGFiaWxpdHkgaXMgQ2hhcmlzbWEgKHNwZWxsIHNhdmUgREMgMTQpLiBJdCBjYW4gaW5uYXRlbHkgY2FzdCB0aGUgZm9sbG93aW5nIHNwZWxscywgcmVxdWlyaW5nIG9ubHkgdmVyYmFsIGNvbXBvbmVudHM6XFxuXFxuQXQgd2lsbDogZGV0ZWN0IGV2aWwgYW5kIGdvb2QsIGRldGVjdCBtYWdpYywgZGV0ZWN0IHRob3VnaHRzXFxuMy9kYXkgZWFjaDogYmxlc3MsIGNyZWF0ZSBmb29kIGFuZCB3YXRlciwgY3VyZSB3b3VuZHMsIGxlc3NlciByZXN0b3JhdGlvbiwgcHJvdGVjdGlvbiBmcm9tIHBvaXNvbiwgc2FuY3R1YXJ5LCBzaGllbGRcXG4xL2RheSBlYWNoOiBkcmVhbSwgZ3JlYXRlciByZXN0b3JhdGlvbiwgc2NyeWluZ1wiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIk1hZ2ljIFdlYXBvbnNcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgY291YXRsJ3Mgd2VhcG9uIGF0dGFja3MgYXJlIG1hZ2ljYWwuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiU2hpZWxkZWQgTWluZFwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBjb3VhdGwgaXMgaW1tdW5lIHRvIHNjcnlpbmcgYW5kIHRvIGFueSBlZmZlY3QgdGhhdCB3b3VsZCBzZW5zZSBpdHMgZW1vdGlvbnMsIHJlYWQgaXRzIHRob3VnaHRzLCBvciBkZXRlY3QgaXRzIGxvY2F0aW9uLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkJpdGVcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArOCB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgY3JlYXR1cmUuIEhpdDogOCAoMWQ2ICsgNSkgcGllcmNpbmcgZGFtYWdlLCBhbmQgdGhlIHRhcmdldCBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxMyBDb25zdGl0dXRpb24gc2F2aW5nIHRocm93IG9yIGJlIHBvaXNvbmVkIGZvciAyNCBob3Vycy4gVW50aWwgdGhpcyBwb2lzb24gZW5kcywgdGhlIHRhcmdldCBpcyB1bmNvbnNjaW91cy4gQW5vdGhlciBjcmVhdHVyZSBjYW4gdXNlIGFuIGFjdGlvbiB0byBzaGFrZSB0aGUgdGFyZ2V0IGF3YWtlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDgsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjFkNlwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDUsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkNvbnN0cmljdFwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs2IHRvIGhpdCwgcmVhY2ggMTAgZnQuLCBvbmUgTWVkaXVtIG9yIHNtYWxsZXIgY3JlYXR1cmUuIEhpdDogMTAgKDJkNiArIDMpIGJsdWRnZW9uaW5nIGRhbWFnZSwgYW5kIHRoZSB0YXJnZXQgaXMgZ3JhcHBsZWQgKGVzY2FwZSBEQyAxNSkuIFVudGlsIHRoaXMgZ3JhcHBsZSBlbmRzLCB0aGUgdGFyZ2V0IGlzIHJlc3RyYWluZWQsIGFuZCB0aGUgY291YXRsIGNhbid0IGNvbnN0cmljdCBhbm90aGVyIHRhcmdldC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA2LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIyZDZcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiAzLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJDaGFuZ2UgU2hhcGVcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgY291YXRsIG1hZ2ljYWxseSBwb2x5bW9ycGhzIGludG8gYSBodW1hbm9pZCBvciBiZWFzdCB0aGF0IGhhcyBhIGNoYWxsZW5nZSByYXRpbmcgZXF1YWwgdG8gb3IgbGVzcyB0aGFuIGl0cyBvd24sIG9yIGJhY2sgaW50byBpdHMgdHJ1ZSBmb3JtLiBJdCByZXZlcnRzIHRvIGl0cyB0cnVlIGZvcm0gaWYgaXQgZGllcy4gQW55IGVxdWlwbWVudCBpdCBpcyB3ZWFyaW5nIG9yIGNhcnJ5aW5nIGlzIGFic29yYmVkIG9yIGJvcm5lIGJ5IHRoZSBuZXcgZm9ybSAodGhlIGNvdWF0bCdzIGNob2ljZSkuXFxuSW4gYSBuZXcgZm9ybSwgdGhlIGNvdWF0bCByZXRhaW5zIGl0cyBnYW1lIHN0YXRpc3RpY3MgYW5kIGFiaWxpdHkgdG8gc3BlYWssIGJ1dCBpdHMgQUMsIG1vdmVtZW50IG1vZGVzLCBTdHJlbmd0aCwgRGV4dGVyaXR5LCBhbmQgb3RoZXIgYWN0aW9ucyBhcmUgcmVwbGFjZWQgYnkgdGhvc2Ugb2YgdGhlIG5ldyBmb3JtLCBhbmQgaXQgZ2FpbnMgYW55IHN0YXRpc3RpY3MgYW5kIGNhcGFiaWxpdGllcyAoZXhjZXB0IGNsYXNzIGZlYXR1cmVzLCBsZWdlbmRhcnkgYWN0aW9ucywgYW5kIGxhaXIgYWN0aW9ucykgdGhhdCB0aGUgbmV3IGZvcm0gaGFzIGJ1dCB0aGF0IGl0IGxhY2tzLiBJZiB0aGUgbmV3IGZvcm0gaGFzIGEgYml0ZSBhdHRhY2ssIHRoZSBjb3VhdGwgY2FuIHVzZSBpdHMgYml0ZSBpbiB0aGF0IGZvcm0uXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiQ3JhYlwiLFxuXHRcdHNpemU6IFwiVGlueVwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcImJlYXN0XCIsXG5cdFx0c3VidHlwZTogXCJcIixcblx0XHRhbGlnbm1lbnQ6IFwidW5hbGlnbmVkXCIsXG5cdFx0YWM6IDExLFxuXHRcdGhwOiAyLFxuXHRcdGhpdF9kaWNlOiBcIjFkNFwiLFxuXHRcdHNwZWVkOiBcIjIwIGZ0Liwgc3dpbSAyMCBmdC5cIixcblx0XHRzdGF0czogWzIsIDExLCAxMCwgMSwgOCwgMl0sXG5cdFx0c2tpbGxzYXZlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRzdGVhbHRoOiAyLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuXHRcdGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuXHRcdHNlbnNlczogXCJibGluZHNpZ2h0IDMwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDlcIixcblx0XHRsYW5ndWFnZXM6IFwiXCIsXG5cdFx0Y3I6IFwiMFwiLFxuXHRcdHRyYWl0czogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkFtcGhpYmlvdXNcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgY3JhYiBjYW4gYnJlYXRoZSBhaXIgYW5kIHdhdGVyLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkNsYXdcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMCB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDEgYmx1ZGdlb25pbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHRcdGRhbWFnZV9ib251czogMSxcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiQ3JvY29kaWxlXCIsXG5cdFx0c2l6ZTogXCJMYXJnZVwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcImJlYXN0XCIsXG5cdFx0c3VidHlwZTogXCJcIixcblx0XHRhbGlnbm1lbnQ6IFwidW5hbGlnbmVkXCIsXG5cdFx0YWM6IDEyLFxuXHRcdGhwOiAxOSxcblx0XHRoaXRfZGljZTogXCIzZDEwXCIsXG5cdFx0c3BlZWQ6IFwiMjAgZnQuLCBzd2ltIDIwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbMTUsIDEwLCAxMywgMiwgMTAsIDVdLFxuXHRcdHNraWxsc2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0c3RlYWx0aDogMixcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcblx0XHRzZW5zZXM6IFwicGFzc2l2ZSBQZXJjZXB0aW9uIDEwXCIsXG5cdFx0bGFuZ3VhZ2VzOiBcIlwiLFxuXHRcdGNyOiBcIjEvMlwiLFxuXHRcdHRyYWl0czogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkhvbGQgQnJlYXRoXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGNyb2NvZGlsZSBjYW4gaG9sZCBpdHMgYnJlYXRoIGZvciAxNSBtaW51dGVzLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkJpdGVcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNCB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgY3JlYXR1cmUuIEhpdDogNyAoMWQxMCArIDIpIHBpZXJjaW5nIGRhbWFnZSwgYW5kIHRoZSB0YXJnZXQgaXMgZ3JhcHBsZWQgKGVzY2FwZSBEQyAxMikuIFVudGlsIHRoaXMgZ3JhcHBsZSBlbmRzLCB0aGUgdGFyZ2V0IGlzIHJlc3RyYWluZWQsIGFuZCB0aGUgY3JvY29kaWxlIGNhbid0IGJpdGUgYW5vdGhlciB0YXJnZXRcIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA0LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxZDEwXCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogMixcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiQ3VsdCBGYW5hdGljXCIsXG5cdFx0c2l6ZTogXCJNZWRpdW1cIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJodW1hbm9pZFwiLFxuXHRcdHN1YnR5cGU6IFwiYW55IHJhY2VcIixcblx0XHRhbGlnbm1lbnQ6IFwiYW55IG5vbi1nb29kIGFsaWdubWVudFwiLFxuXHRcdGFjOiAxMyxcblx0XHRocDogMjIsXG5cdFx0aGl0X2RpY2U6IFwiNmQ4XCIsXG5cdFx0c3BlZWQ6IFwiMzAgZnQuXCIsXG5cdFx0c3RhdHM6IFsxMSwgMTQsIDEyLCAxMCwgMTMsIDE0XSxcblx0XHRza2lsbHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdGRlY2VwdGlvbjogNCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHBlcnN1YXNpb246IDQsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRyZWxpZ2lvbjogMixcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcblx0XHRzZW5zZXM6IFwicGFzc2l2ZSBQZXJjZXB0aW9uIDExXCIsXG5cdFx0bGFuZ3VhZ2VzOiBcImFueSBvbmUgbGFuZ3VhZ2UgKHVzdWFsbHkgQ29tbW9uKVwiLFxuXHRcdGNyOiBcIjJcIixcblx0XHR0cmFpdHM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJEYXJrIERldm90aW9uXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGZhbmF0aWMgaGFzIGFkdmFudGFnZSBvbiBzYXZpbmcgdGhyb3dzIGFnYWluc3QgYmVpbmcgY2hhcm1lZCBvciBmcmlnaHRlbmVkLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGZhbmF0aWMgbWFrZXMgdHdvIG1lbGVlIGF0dGFja3MuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiRGFnZ2VyXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgb3IgUmFuZ2VkIFdlYXBvbiBBdHRhY2s6ICs0IHRvIGhpdCwgcmVhY2ggNSBmdC4gb3IgcmFuZ2UgMjAvNjAgZnQuLCBvbmUgY3JlYXR1cmUuIEhpdDogNCAoMWQ0ICsgMikgcGllcmNpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDQsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjFkNFwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDIsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0c3BlbGxzOiBbXG5cdFx0XHRcIlRoZSBmYW5hdGljIGlzIGEgNHRoLWxldmVsIHNwZWxsY2FzdGVyLiBJdHMgc3BlbGwgY2FzdGluZyBhYmlsaXR5IGlzIFdpc2RvbSAoc3BlbGwgc2F2ZSBEQyAxMSwgKzMgdG8gaGl0IHdpdGggc3BlbGwgYXR0YWNrcykuIFRoZSBmYW5hdGljIGhhcyB0aGUgZm9sbG93aW5nIGNsZXJpYyBzcGVsbHMgcHJlcGFyZWQ6XCIsXG5cdFx0XHRcIkNhbnRyaXBzIChhdCB3aWxsKTogbGlnaHQsIHNhY3JlZCBmbGFtZSwgdGhhdW1hdHVyZ3lcIixcblx0XHRcdHtcblx0XHRcdFx0XCIxc3QgbGV2ZWwgKDQgc2xvdHMpXCI6XG5cdFx0XHRcdFx0XCJjb21tYW5kLCBpbmZsaWN0IHdvdW5kcywgc2hpZWxkIG9mIGZhaXRoXCIsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRcIjJuZCBsZXZlbCAoMyBzbG90cylcIjogXCJob2xkIHBlcnNvbiwgc3Bpcml0dWFsIHdlYXBvblwiLFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJDdWx0aXN0XCIsXG5cdFx0c2l6ZTogXCJNZWRpdW1cIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJodW1hbm9pZFwiLFxuXHRcdHN1YnR5cGU6IFwiYW55IHJhY2VcIixcblx0XHRhbGlnbm1lbnQ6IFwiYW55IG5vbi1nb29kIGFsaWdubWVudFwiLFxuXHRcdGFjOiAxMixcblx0XHRocDogOSxcblx0XHRoaXRfZGljZTogXCIyZDhcIixcblx0XHRzcGVlZDogXCIzMCBmdC5cIixcblx0XHRzdGF0czogWzExLCAxMiwgMTAsIDEwLCAxMSwgMTBdLFxuXHRcdHNraWxsc2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0ZGVjZXB0aW9uOiAyLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0cmVsaWdpb246IDIsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0c2Vuc2VzOiBcInBhc3NpdmUgUGVyY2VwdGlvbiAxMFwiLFxuXHRcdGxhbmd1YWdlczogXCJhbnkgb25lIGxhbmd1YWdlICh1c3VhbGx5IENvbW1vbilcIixcblx0XHRjcjogXCIxLzhcIixcblx0XHR0cmFpdHM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJEYXJrIERldm90aW9uXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGN1bHRpc3QgaGFzIGFkdmFudGFnZSBvbiBzYXZpbmcgdGhyb3dzIGFnYWluc3QgYmVpbmcgY2hhcm1lZCBvciBmcmlnaHRlbmVkLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlNjaW1pdGFyXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzMgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIGNyZWF0dXJlLiBIaXQ6IDQgKDFkNiArIDEpIHNsYXNoaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAzLFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxZDZcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiAxLFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJEYXJrbWFudGxlXCIsXG5cdFx0c2l6ZTogXCJTbWFsbFwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcIm1vbnN0cm9zaXR5XCIsXG5cdFx0c3VidHlwZTogXCJcIixcblx0XHRhbGlnbm1lbnQ6IFwidW5hbGlnbmVkXCIsXG5cdFx0YWM6IDExLFxuXHRcdGhwOiAyMixcblx0XHRoaXRfZGljZTogXCI1ZDZcIixcblx0XHRzcGVlZDogXCIxMCBmdC4sIGZseSAzMCBmdC5cIixcblx0XHRzdGF0czogWzE2LCAxMiwgMTMsIDIsIDEwLCA1XSxcblx0XHRza2lsbHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdHN0ZWFsdGg6IDMsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0c2Vuc2VzOiBcImJsaW5kc2lnaHQgNjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTBcIixcblx0XHRsYW5ndWFnZXM6IFwiXCIsXG5cdFx0Y3I6IFwiMS8yXCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiRWNob2xvY2F0aW9uXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGRhcmttYW50bGUgY2FuJ3QgdXNlIGl0cyBibGluZHNpZ2h0IHdoaWxlIGRlYWZlbmVkLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkZhbHNlIEFwcGVhcmFuY2VcIixcblx0XHRcdFx0ZGVzYzogXCJXaGlsZSB0aGUgZGFya21hbnRsZSByZW1haW5zIG1vdGlvbmxlc3MsIGl0IGlzIGluZGlzdGluZ3Vpc2hhYmxlIGZyb20gYSBjYXZlIGZvcm1hdGlvbiBzdWNoIGFzIGEgc3RhbGFjdGl0ZSBvciBzdGFsYWdtaXRlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkNydXNoXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzUgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIGNyZWF0dXJlLiBIaXQ6IDYgKDFkNiArIDMpIGJsdWRnZW9uaW5nIGRhbWFnZSwgYW5kIHRoZSBkYXJrbWFudGxlIGF0dGFjaGVzIHRvIHRoZSB0YXJnZXQuIElmIHRoZSB0YXJnZXQgaXMgTWVkaXVtIG9yIHNtYWxsZXIgYW5kIHRoZSBkYXJrbWFudGxlIGhhcyBhZHZhbnRhZ2Ugb24gdGhlIGF0dGFjayByb2xsLCBpdCBhdHRhY2hlcyBieSBlbmd1bGZpbmcgdGhlIHRhcmdldCdzIGhlYWQsIGFuZCB0aGUgdGFyZ2V0IGlzIGFsc28gYmxpbmRlZCBhbmQgdW5hYmxlIHRvIGJyZWF0aGUgd2hpbGUgdGhlIGRhcmttYW50bGUgaXMgYXR0YWNoZWQgaW4gdGhpcyB3YXkuXFxuV2hpbGUgYXR0YWNoZWQgdG8gdGhlIHRhcmdldCwgdGhlIGRhcmttYW50bGUgY2FuIGF0dGFjayBubyBvdGhlciBjcmVhdHVyZSBleGNlcHQgdGhlIHRhcmdldCBidXQgaGFzIGFkdmFudGFnZSBvbiBpdHMgYXR0YWNrIHJvbGxzLiBUaGUgZGFya21hbnRsZSdzIHNwZWVkIGFsc28gYmVjb21lcyAwLCBpdCBjYW4ndCBiZW5lZml0IGZyb20gYW55IGJvbnVzIHRvIGl0cyBzcGVlZCwgYW5kIGl0IG1vdmVzIHdpdGggdGhlIHRhcmdldC5cXG5BIGNyZWF0dXJlIGNhbiBkZXRhY2ggdGhlIGRhcmttYW50bGUgYnkgbWFraW5nIGEgc3VjY2Vzc2Z1bCBEQyAxMyBTdHJlbmd0aCBjaGVjayBhcyBhbiBhY3Rpb24uIE9uIGl0cyB0dXJuLCB0aGUgZGFya21hbnRsZSBjYW4gZGV0YWNoIGl0c2VsZiBmcm9tIHRoZSB0YXJnZXQgYnkgdXNpbmcgNSBmZWV0IG9mIG1vdmVtZW50LlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDUsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjFkNlwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDMsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkRhcmtuZXNzIEF1cmEgKDEvZGF5KVwiLFxuXHRcdFx0XHRkZXNjOiBcIkEgMTUtZm9vdCByYWRpdXMgb2YgbWFnaWNhbCBkYXJrbmVzcyBleHRlbmRzIG91dCBmcm9tIHRoZSBkYXJrbWFudGxlLCBtb3ZlcyB3aXRoIGl0LCBhbmQgc3ByZWFkcyBhcm91bmQgY29ybmVycy4gVGhlIGRhcmtuZXNzIGxhc3RzIGFzIGxvbmcgYXMgdGhlIGRhcmttYW50bGUgbWFpbnRhaW5zIGNvbmNlbnRyYXRpb24sIHVwIHRvIDEwIG1pbnV0ZXMgKGFzIGlmIGNvbmNlbnRyYXRpbmcgb24gYSBzcGVsbCkuIERhcmt2aXNpb24gY2FuJ3QgcGVuZXRyYXRlIHRoaXMgZGFya25lc3MsIGFuZCBubyBuYXR1cmFsIGxpZ2h0IGNhbiBpbGx1bWluYXRlIGl0LiBJZiBhbnkgb2YgdGhlIGRhcmtuZXNzIG92ZXJsYXBzIHdpdGggYW4gYXJlYSBvZiBsaWdodCBjcmVhdGVkIGJ5IGEgc3BlbGwgb2YgMm5kIGxldmVsIG9yIGxvd2VyLCB0aGUgc3BlbGwgY3JlYXRpbmcgdGhlIGxpZ2h0IGlzIGRpc3BlbGxlZC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJEZWF0aCBEb2dcIixcblx0XHRzaXplOiBcIk1lZGl1bVwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcIm1vbnN0cm9zaXR5XCIsXG5cdFx0c3VidHlwZTogXCJcIixcblx0XHRhbGlnbm1lbnQ6IFwibmV1dHJhbCBldmlsXCIsXG5cdFx0YWM6IDEyLFxuXHRcdGhwOiAzOSxcblx0XHRoaXRfZGljZTogXCI2ZDhcIixcblx0XHRzcGVlZDogXCI0MCBmdC5cIixcblx0XHRzdGF0czogWzE1LCAxNCwgMTQsIDMsIDEzLCA2XSxcblx0XHRza2lsbHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdHBlcmNlcHRpb246IDUsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRzdGVhbHRoOiA0LFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuXHRcdGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuXHRcdHNlbnNlczogXCJkYXJrdmlzaW9uIDEyMCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxNVwiLFxuXHRcdGxhbmd1YWdlczogXCJcIixcblx0XHRjcjogXCIxXCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiVHdvLUhlYWRlZFwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBkb2cgaGFzIGFkdmFudGFnZSBvbiBXaXNkb20gKFBlcmNlcHRpb24pIGNoZWNrcyBhbmQgb24gc2F2aW5nIHRocm93cyBhZ2FpbnN0IGJlaW5nIGJsaW5kZWQsIGNoYXJtZWQsIGRlYWZlbmVkLCBmcmlnaHRlbmVkLCBzdHVubmVkLCBvciBrbm9ja2VkIHVuY29uc2Npb3VzLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGRvZyBtYWtlcyB0d28gYml0ZSBhdHRhY2tzLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkJpdGVcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNCB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDUgKDFkNiArIDIpIHBpZXJjaW5nIGRhbWFnZS4gSWYgdGhlIHRhcmdldCBpcyBhIGNyZWF0dXJlLCBpdCBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxMiBDb25zdGl0dXRpb24gc2F2aW5nIHRocm93IGFnYWluc3QgZGlzZWFzZSBvciBiZWNvbWUgcG9pc29uZWQgdW50aWwgdGhlIGRpc2Vhc2UgaXMgY3VyZWQuIEV2ZXJ5IDI0IGhvdXJzIHRoYXQgZWxhcHNlLCB0aGUgY3JlYXR1cmUgbXVzdCByZXBlYXQgdGhlIHNhdmluZyB0aHJvdywgcmVkdWNpbmcgaXRzIGhpdCBwb2ludCBtYXhpbXVtIGJ5IDUgKDFkMTApIG9uIGEgZmFpbHVyZS4gVGhpcyByZWR1Y3Rpb24gbGFzdHMgdW50aWwgdGhlIGRpc2Vhc2UgaXMgY3VyZWQuIFRoZSBjcmVhdHVyZSBkaWVzIGlmIHRoZSBkaXNlYXNlIHJlZHVjZXMgaXRzIGhpdCBwb2ludCBtYXhpbXVtIHRvIDAuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNCxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMWQ2XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogMixcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiRGVlcCBHbm9tZSAoU3ZpcmZuZWJsaW4pXCIsXG5cdFx0c2l6ZTogXCJTbWFsbFwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcImh1bWFub2lkXCIsXG5cdFx0c3VidHlwZTogXCJnbm9tZVwiLFxuXHRcdGFsaWdubWVudDogXCJuZXV0cmFsIGdvb2RcIixcblx0XHRhYzogMTUsXG5cdFx0aHA6IDE2LFxuXHRcdGhpdF9kaWNlOiBcIjNkNlwiLFxuXHRcdHNwZWVkOiBcIjIwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbMTUsIDE0LCAxNCwgMTIsIDEwLCA5XSxcblx0XHRza2lsbHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdHBlcmNlcHRpb246IDIsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRpbnZlc3RpZ2F0aW9uOiAzLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0c3RlYWx0aDogNCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcblx0XHRzZW5zZXM6IFwiZGFya3Zpc2lvbiAxMjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTJcIixcblx0XHRsYW5ndWFnZXM6IFwiR25vbWlzaCwgVGVycmFuLCBVbmRlcmNvbW1vblwiLFxuXHRcdGNyOiBcIjEvMlwiLFxuXHRcdHRyYWl0czogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlN0b25lIENhbW91ZmxhZ2VcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgZ25vbWUgaGFzIGFkdmFudGFnZSBvbiBEZXh0ZXJpdHkgKFN0ZWFsdGgpIGNoZWNrcyBtYWRlIHRvIGhpZGUgaW4gcm9ja3kgdGVycmFpbi5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJHbm9tZSBDdW5uaW5nXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGdub21lIGhhcyBhZHZhbnRhZ2Ugb24gSW50ZWxsaWdlbmNlLCBXaXNkb20sIGFuZCBDaGFyaXNtYSBzYXZpbmcgdGhyb3dzIGFnYWluc3QgbWFnaWMuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiSW5uYXRlIFNwZWxsY2FzdGluZ1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBnbm9tZSdzIGlubmF0ZSBzcGVsbGNhc3RpbmcgYWJpbGl0eSBpcyBJbnRlbGxpZ2VuY2UgKHNwZWxsIHNhdmUgREMgMTEpLiBJdCBjYW4gaW5uYXRlbHkgY2FzdCB0aGUgZm9sbG93aW5nIHNwZWxscywgcmVxdWlyaW5nIG5vIG1hdGVyaWFsIGNvbXBvbmVudHM6XFxuQXQgd2lsbDogbm9uZGV0ZWN0aW9uIChzZWxmIG9ubHkpXFxuMS9kYXkgZWFjaDogYmxpbmRuZXNzL2RlYWZuZXNzLCBibHVyLCBkaXNndWlzZSBzZWxmXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiV2FyIFBpY2tcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNCB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDYgKDFkOCArIDIpIHBpZXJjaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA0LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxZDhcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiAyLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJQb2lzb25lZCBEYXJ0XCIsXG5cdFx0XHRcdGRlc2M6IFwiUmFuZ2VkIFdlYXBvbiBBdHRhY2s6ICs0IHRvIGhpdCwgcmFuZ2UgMzAvMTIwIGZ0Liwgb25lIGNyZWF0dXJlLiBIaXQ6IDQgKDFkNCArIDIpIHBpZXJjaW5nIGRhbWFnZSwgYW5kIHRoZSB0YXJnZXQgbXVzdCBzdWNjZWVkIG9uIGEgREMgMTIgQ29uc3RpdHV0aW9uIHNhdmluZyB0aHJvdyBvciBiZSBwb2lzb25lZCBmb3IgMSBtaW51dGUuIFRoZSB0YXJnZXQgY2FuIHJlcGVhdCB0aGUgc2F2aW5nIHRocm93IGF0IHRoZSBlbmQgb2YgZWFjaCBvZiBpdHMgdHVybnMsIGVuZGluZyB0aGUgZWZmZWN0IG9uIGl0c2VsZiBvbiBhIHN1Y2Nlc3NcIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA0LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxZDRcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiAyLFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJEZWVyXCIsXG5cdFx0c2l6ZTogXCJNZWRpdW1cIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJiZWFzdFwiLFxuXHRcdHN1YnR5cGU6IFwiXCIsXG5cdFx0YWxpZ25tZW50OiBcInVuYWxpZ25lZFwiLFxuXHRcdGFjOiAxMyxcblx0XHRocDogNCxcblx0XHRoaXRfZGljZTogXCIxZDhcIixcblx0XHRzcGVlZDogXCI1MCBmdC5cIixcblx0XHRzdGF0czogWzExLCAxNiwgMTEsIDIsIDE0LCA1XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcblx0XHRzZW5zZXM6IFwicGFzc2l2ZSBQZXJjZXB0aW9uIDEyXCIsXG5cdFx0bGFuZ3VhZ2VzOiBcIlwiLFxuXHRcdGNyOiBcIjBcIixcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQml0ZVwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICsyIHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMiAoMWQ0KSBwaWVyY2luZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMixcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMWQ0XCIsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIkRldmFcIixcblx0XHRzaXplOiBcIk1lZGl1bVwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcImNlbGVzdGlhbFwiLFxuXHRcdHN1YnR5cGU6IFwiXCIsXG5cdFx0YWxpZ25tZW50OiBcImxhd2Z1bCBnb29kXCIsXG5cdFx0YWM6IDE3LFxuXHRcdGhwOiAxMzYsXG5cdFx0aGl0X2RpY2U6IFwiMTZkOFwiLFxuXHRcdHNwZWVkOiBcIjMwIGZ0LiwgZmx5IDkwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbMTgsIDE4LCAxOCwgMTcsIDIwLCAyMF0sXG5cdFx0c2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0d2lzZG9tOiA5LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0Y2hhcmlzbWE6IDksXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0c2tpbGxzYXZlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRpbnNpZ2h0OiA5LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0cGVyY2VwdGlvbjogOSxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczpcblx0XHRcdFwicmFkaWFudDsgYmx1ZGdlb25pbmcsIHBpZXJjaW5nLCBhbmQgc2xhc2hpbmcgZnJvbSBub25tYWdpY2FsIHdlYXBvbnNcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczogXCJjaGFybWVkLCBleGhhdXN0aW9uLCBmcmlnaHRlbmVkXCIsXG5cdFx0c2Vuc2VzOiBcImRhcmt2aXNpb24gMTIwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDE5XCIsXG5cdFx0bGFuZ3VhZ2VzOiBcImFsbCwgdGVsZXBhdGh5IDEyMCBmdC5cIixcblx0XHRjcjogXCIxMFwiLFxuXHRcdHRyYWl0czogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkFuZ2VsaWMgV2VhcG9uc1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBkZXZhJ3Mgd2VhcG9uIGF0dGFja3MgYXJlIG1hZ2ljYWwuIFdoZW4gdGhlIGRldmEgaGl0cyB3aXRoIGFueSB3ZWFwb24sIHRoZSB3ZWFwb24gZGVhbHMgYW4gZXh0cmEgNGQ4IHJhZGlhbnQgZGFtYWdlIChpbmNsdWRlZCBpbiB0aGUgYXR0YWNrKS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJJbm5hdGUgU3BlbGxjYXN0aW5nXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGRldmEncyBzcGVsbGNhc3RpbmcgYWJpbGl0eSBpcyBDaGFyaXNtYSAoc3BlbGwgc2F2ZSBEQyAxNykuIFRoZSBkZXZhIGNhbiBpbm5hdGVseSBjYXN0IHRoZSBmb2xsb3dpbmcgc3BlbGxzLCByZXF1aXJpbmcgb25seSB2ZXJiYWwgY29tcG9uZW50czpcXG5BdCB3aWxsOiBkZXRlY3QgZXZpbCBhbmQgZ29vZFxcbjEvZGF5IGVhY2g6IGNvbW11bmUsIHJhaXNlIGRlYWRcIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJNYWdpYyBSZXNpc3RhbmNlXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGRldmEgaGFzIGFkdmFudGFnZSBvbiBzYXZpbmcgdGhyb3dzIGFnYWluc3Qgc3BlbGxzIGFuZCBvdGhlciBtYWdpY2FsIGVmZmVjdHMuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgZGV2YSBtYWtlcyB0d28gbWVsZWUgYXR0YWNrcy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJNYWNlXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzggdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiA3ICgxZDYgKyA0KSBibHVkZ2VvbmluZyBkYW1hZ2UgcGx1cyAxOCAoNGQ4KSByYWRpYW50IGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA4LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxZDYgKyA0ZDhcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiA0LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJIZWFsaW5nIFRvdWNoICgzL0RheSlcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgZGV2YSB0b3VjaGVzIGFub3RoZXIgY3JlYXR1cmUuIFRoZSB0YXJnZXQgbWFnaWNhbGx5IHJlZ2FpbnMgMjAgKDRkOCArIDIpIGhpdCBwb2ludHMgYW5kIGlzIGZyZWVkIGZyb20gYW55IGN1cnNlLCBkaXNlYXNlLCBwb2lzb24sIGJsaW5kbmVzcywgb3IgZGVhZm5lc3MuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQ2hhbmdlIFNoYXBlXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGRldmEgbWFnaWNhbGx5IHBvbHltb3JwaHMgaW50byBhIGh1bWFub2lkIG9yIGJlYXN0IHRoYXQgaGFzIGEgY2hhbGxlbmdlIHJhdGluZyBlcXVhbCB0byBvciBsZXNzIHRoYW4gaXRzIG93biwgb3IgYmFjayBpbnRvIGl0cyB0cnVlIGZvcm0uIEl0IHJldmVydHMgdG8gaXRzIHRydWUgZm9ybSBpZiBpdCBkaWVzLiBBbnkgZXF1aXBtZW50IGl0IGlzIHdlYXJpbmcgb3IgY2FycnlpbmcgaXMgYWJzb3JiZWQgb3IgYm9ybmUgYnkgdGhlIG5ldyBmb3JtICh0aGUgZGV2YSdzIGNob2ljZSkuXFxuSW4gYSBuZXcgZm9ybSwgdGhlIGRldmEgcmV0YWlucyBpdHMgZ2FtZSBzdGF0aXN0aWNzIGFuZCBhYmlsaXR5IHRvIHNwZWFrLCBidXQgaXRzIEFDLCBtb3ZlbWVudCBtb2RlcywgU3RyZW5ndGgsIERleHRlcml0eSwgYW5kIHNwZWNpYWwgc2Vuc2VzIGFyZSByZXBsYWNlZCBieSB0aG9zZSBvZiB0aGUgbmV3IGZvcm0sIGFuZCBpdCBnYWlucyBhbnkgc3RhdGlzdGljcyBhbmQgY2FwYWJpbGl0aWVzIChleGNlcHQgY2xhc3MgZmVhdHVyZXMsIGxlZ2VuZGFyeSBhY3Rpb25zLCBhbmQgbGFpciBhY3Rpb25zKSB0aGF0IHRoZSBuZXcgZm9ybSBoYXMgYnV0IHRoYXQgaXQgbGFja3MuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiRGlyZSBXb2xmXCIsXG5cdFx0c2l6ZTogXCJMYXJnZVwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcImJlYXN0XCIsXG5cdFx0c3VidHlwZTogXCJcIixcblx0XHRhbGlnbm1lbnQ6IFwidW5hbGlnbmVkXCIsXG5cdFx0YWM6IDE0LFxuXHRcdGhwOiAzNyxcblx0XHRoaXRfZGljZTogXCI1ZDEwXCIsXG5cdFx0c3BlZWQ6IFwiNTAgZnQuXCIsXG5cdFx0c3RhdHM6IFsxNywgMTUsIDE1LCAzLCAxMiwgN10sXG5cdFx0c2tpbGxzYXZlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRwZXJjZXB0aW9uOiAzLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0c3RlYWx0aDogNCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcblx0XHRzZW5zZXM6IFwicGFzc2l2ZSBQZXJjZXB0aW9uIDEzXCIsXG5cdFx0bGFuZ3VhZ2VzOiBcIlwiLFxuXHRcdGNyOiBcIjFcIixcblx0XHR0cmFpdHM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJLZWVuIEhlYXJpbmcgYW5kIFNtZWxsXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIHdvbGYgaGFzIGFkdmFudGFnZSBvbiBXaXNkb20gKFBlcmNlcHRpb24pIGNoZWNrcyB0aGF0IHJlbHkgb24gaGVhcmluZyBvciBzbWVsbC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJQYWNrIFRhY3RpY3NcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgd29sZiBoYXMgYWR2YW50YWdlIG9uIGFuIGF0dGFjayByb2xsIGFnYWluc3QgYSBjcmVhdHVyZSBpZiBhdCBsZWFzdCBvbmUgb2YgdGhlIHdvbGYncyBhbGxpZXMgaXMgd2l0aGluIDUgZnQuIG9mIHRoZSBjcmVhdHVyZSBhbmQgdGhlIGFsbHkgaXNuJ3QgaW5jYXBhY2l0YXRlZC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJCaXRlXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzUgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxMCAoMmQ2ICsgMykgcGllcmNpbmcgZGFtYWdlLiBJZiB0aGUgdGFyZ2V0IGlzIGEgY3JlYXR1cmUsIGl0IG11c3Qgc3VjY2VlZCBvbiBhIERDIDEzIFN0cmVuZ3RoIHNhdmluZyB0aHJvdyBvciBiZSBrbm9ja2VkIHByb25lLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDUsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjJkNlwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDMsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIkRqaW5uaVwiLFxuXHRcdHNpemU6IFwiTGFyZ2VcIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJlbGVtZW50YWxcIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJjaGFvdGljIGdvb2RcIixcblx0XHRhYzogMTcsXG5cdFx0aHA6IDE2MSxcblx0XHRoaXRfZGljZTogXCIxNGQxMFwiLFxuXHRcdHNwZWVkOiBcIjMwIGZ0LiwgZmx5IDkwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbMjEsIDE1LCAyMiwgMTUsIDE2LCAyMF0sXG5cdFx0c2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0ZGV4dGVyaXR5OiA2LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0d2lzZG9tOiA3LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0Y2hhcmlzbWE6IDksXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwibGlnaHRuaW5nLCB0aHVuZGVyXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0c2Vuc2VzOiBcImRhcmt2aXNpb24gMTIwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDEzXCIsXG5cdFx0bGFuZ3VhZ2VzOiBcIkF1cmFuXCIsXG5cdFx0Y3I6IFwiMTFcIixcblx0XHR0cmFpdHM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJFbGVtZW50YWwgRGVtaXNlXCIsXG5cdFx0XHRcdGRlc2M6IFwiSWYgdGhlIGRqaW5uaSBkaWVzLCBpdHMgYm9keSBkaXNpbnRlZ3JhdGVzIGludG8gYSB3YXJtIGJyZWV6ZSwgbGVhdmluZyBiZWhpbmQgb25seSBlcXVpcG1lbnQgdGhlIGRqaW5uaSB3YXMgd2VhcmluZyBvciBjYXJyeWluZy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJJbm5hdGUgU3BlbGxjYXN0aW5nXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGRqaW5uaSdzIGlubmF0ZSBzcGVsbGNhc3RpbmcgYWJpbGl0eSBpcyBDaGFyaXNtYSAoc3BlbGwgc2F2ZSBEQyAxNywgKzkgdG8gaGl0IHdpdGggc3BlbGwgYXR0YWNrcykuIEl0IGNhbiBpbm5hdGVseSBjYXN0IHRoZSBmb2xsb3dpbmcgc3BlbGxzLCByZXF1aXJpbmcgbm8gbWF0ZXJpYWwgY29tcG9uZW50czpcXG5cXG5BdCB3aWxsOiBkZXRlY3QgZXZpbCBhbmQgZ29vZCwgZGV0ZWN0IG1hZ2ljLCB0aHVuZGVyd2F2ZSAzL2RheSBlYWNoOiBjcmVhdGUgZm9vZCBhbmQgd2F0ZXIgKGNhbiBjcmVhdGUgd2luZSBpbnN0ZWFkIG9mIHdhdGVyKSwgdG9uZ3Vlcywgd2luZCB3YWxrXFxuMS9kYXkgZWFjaDogY29uanVyZSBlbGVtZW50YWwgKGFpciBlbGVtZW50YWwgb25seSksIGNyZWF0aW9uLCBnYXNlb3VzIGZvcm0sIGludmlzaWJpbGl0eSwgbWFqb3IgaW1hZ2UsIHBsYW5lIHNoaWZ0XCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiVmFyaWFudDogR2VuaWUgUG93ZXJzXCIsXG5cdFx0XHRcdGRlc2M6IFwiR2VuaWVzIGhhdmUgYSB2YXJpZXR5IG9mIG1hZ2ljYWwgY2FwYWJpbGl0aWVzLCBpbmNsdWRpbmcgc3BlbGxzLiBBIGZldyBoYXZlIGV2ZW4gZ3JlYXRlciBwb3dlcnMgdGhhdCBhbGxvdyB0aGVtIHRvIGFsdGVyIHRoZWlyIGFwcGVhcmFuY2Ugb3IgdGhlIG5hdHVyZSBvZiByZWFsaXR5LlxcblxcbkRpc2d1aXNlcy5cXG5Tb21lIGdlbmllcyBjYW4gdmVpbCB0aGVtc2VsdmVzIGluIGlsbHVzaW9uIHRvIHBhc3MgYXMgb3RoZXIgc2ltaWxhcmx5IHNoYXBlZCBjcmVhdHVyZXMuIFN1Y2ggZ2VuaWVzIGNhbiBpbm5hdGVseSBjYXN0IHRoZSBkaXNndWlzZSBzZWxmIHNwZWxsIGF0IHdpbGwsIG9mdGVuIHdpdGggYSBsb25nZXIgZHVyYXRpb24gdGhhbiBpcyBub3JtYWwgZm9yIHRoYXQgc3BlbGwuIE1pZ2h0aWVyIGdlbmllcyBjYW4gY2FzdCB0aGUgdHJ1ZSBwb2x5bW9ycGggc3BlbGwgb25lIHRvIHRocmVlIHRpbWVzIHBlciBkYXksIHBvc3NpYmx5IHdpdGggYSBsb25nZXIgZHVyYXRpb24gdGhhbiBub3JtYWwuIFN1Y2ggZ2VuaWVzIGNhbiBjaGFuZ2Ugb25seSB0aGVpciBvd24gc2hhcGUsIGJ1dCBhIHJhcmUgZmV3IGNhbiB1c2UgdGhlIHNwZWxsIG9uIG90aGVyIGNyZWF0dXJlcyBhbmQgb2JqZWN0cyBhcyB3ZWxsLlxcbldpc2hlcy5cXG5UaGUgZ2VuaWUgcG93ZXIgdG8gZ3JhbnQgd2lzaGVzIGlzIGxlZ2VuZGFyeSBhbW9uZyBtb3J0YWxzLiBPbmx5IHRoZSBtb3N0IHBvdGVudCBnZW5pZXMsIHN1Y2ggYXMgdGhvc2UgYW1vbmcgdGhlIG5vYmlsaXR5LCBjYW4gZG8gc28uIEEgcGFydGljdWxhciBnZW5pZSB0aGF0IGhhcyB0aGlzIHBvd2VyIGNhbiBncmFudCBvbmUgdG8gdGhyZWUgd2lzaGVzIHRvIGEgY3JlYXR1cmUgdGhhdCBpc24ndCBhIGdlbmllLiBPbmNlIGEgZ2VuaWUgaGFzIGdyYW50ZWQgaXRzIGxpbWl0IG9mIHdpc2hlcywgaXQgY2FuJ3QgZ3JhbnQgd2lzaGVzIGFnYWluIGZvciBzb21lIGFtb3VudCBvZiB0aW1lICh1c3VhbGx5IDEgeWVhcikuIGFuZCBjb3NtaWMgbGF3IGRpY3RhdGVzIHRoYXQgdGhlIHNhbWUgZ2VuaWUgY2FuIGV4cGVuZCBpdHMgbGltaXQgb2Ygd2lzaGVzIG9uIGEgc3BlY2lmaWMgY3JlYXR1cmUgb25seSBvbmNlIGluIHRoYXQgY3JlYXR1cmUncyBleGlzdGVuY2UuXFxuVG8gYmUgZ3JhbnRlZCBhIHdpc2gsIGEgY3JlYXR1cmUgd2l0aGluIDYwIGZlZXQgb2YgdGhlIGdlbmllIHN0YXRlcyBhIGRlc2lyZWQgZWZmZWN0IHRvIGl0LiBUaGUgZ2VuaWUgY2FuIHRoZW4gY2FzdCB0aGUgd2lzaCBzcGVsbCBvbiB0aGUgY3JlYXR1cmUncyBiZWhhbGYgdG8gYnJpbmcgYWJvdXQgdGhlIGVmZmVjdC4gRGVwZW5kaW5nIG9uIHRoZSBnZW5pZSdzIG5hdHVyZSwgdGhlIGdlbmllIG1pZ2h0IHRyeSB0byBwZXJ2ZXJ0IHRoZSBpbnRlbnQgb2YgdGhlIHdpc2ggYnkgZXhwbG9pdGluZyB0aGUgd2lzaCdzIHBvb3Igd29yZGluZy4gVGhlIHBlcnZlcnNpb24gb2YgdGhlIHdvcmRpbmcgaXMgdXN1YWxseSBjcmFmdGVkIHRvIGJlIHRvIHRoZSBnZW5pZSdzIGJlbmVmaXQuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgZGppbm5pIG1ha2VzIHRocmVlIHNjaW1pdGFyIGF0dGFja3MuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiU2NpbWl0YXJcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArOSB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDEyICgyZDYgKyA1KSBzbGFzaGluZyBkYW1hZ2UgcGx1cyAzICgxZDYpIGxpZ2h0bmluZyBvciB0aHVuZGVyIGRhbWFnZSAoZGppbm5pJ3MgY2hvaWNlKS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA5LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIyZDYgKyAxZDZcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiA1LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJDcmVhdGUgV2hpcmx3aW5kXCIsXG5cdFx0XHRcdGRlc2M6IFwiQSA1LWZvb3QtcmFkaXVzLCAzMC1mb290LXRhbGwgY3lsaW5kZXIgb2Ygc3dpcmxpbmcgYWlyIG1hZ2ljYWxseSBmb3JtcyBvbiBhIHBvaW50IHRoZSBkamlubmkgY2FuIHNlZSB3aXRoaW4gMTIwIGZlZXQgb2YgaXQuIFRoZSB3aGlybHdpbmQgbGFzdHMgYXMgbG9uZyBhcyB0aGUgZGppbm5pIG1haW50YWlucyBjb25jZW50cmF0aW9uIChhcyBpZiBjb25jZW50cmF0aW5nIG9uIGEgc3BlbGwpLiBBbnkgY3JlYXR1cmUgYnV0IHRoZSBkamlubmkgdGhhdCBlbnRlcnMgdGhlIHdoaXJsd2luZCBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxOCBTdHJlbmd0aCBzYXZpbmcgdGhyb3cgb3IgYmUgcmVzdHJhaW5lZCBieSBpdC4gVGhlIGRqaW5uaSBjYW4gbW92ZSB0aGUgd2hpcmx3aW5kIHVwIHRvIDYwIGZlZXQgYXMgYW4gYWN0aW9uLCBhbmQgY3JlYXR1cmVzIHJlc3RyYWluZWQgYnkgdGhlIHdoaXJsd2luZCBtb3ZlIHdpdGggaXQuIFRoZSB3aGlybHdpbmQgZW5kcyBpZiB0aGUgZGppbm5pIGxvc2VzIHNpZ2h0IG9mIGl0LlxcbkEgY3JlYXR1cmUgY2FuIHVzZSBpdHMgYWN0aW9uIHRvIGZyZWUgYSBjcmVhdHVyZSByZXN0cmFpbmVkIGJ5IHRoZSB3aGlybHdpbmQsIGluY2x1ZGluZyBpdHNlbGYsIGJ5IHN1Y2NlZWRpbmcgb24gYSBEQyAxOCBTdHJlbmd0aCBjaGVjay4gSWYgdGhlIGNoZWNrIHN1Y2NlZWRzLCB0aGUgY3JlYXR1cmUgaXMgbm8gbG9uZ2VyIHJlc3RyYWluZWQgYW5kIG1vdmVzIHRvIHRoZSBuZWFyZXN0IHNwYWNlIG91dHNpZGUgdGhlIHdoaXJsd2luZC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJEb3BwZWxnYW5nZXJcIixcblx0XHRzaXplOiBcIk1lZGl1bVwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcIm1vbnN0cm9zaXR5XCIsXG5cdFx0c3VidHlwZTogXCJzaGFwZWNoYW5nZXJcIixcblx0XHRhbGlnbm1lbnQ6IFwidW5hbGlnbmVkXCIsXG5cdFx0YWM6IDE0LFxuXHRcdGhwOiA1Mixcblx0XHRoaXRfZGljZTogXCI4ZDhcIixcblx0XHRzcGVlZDogXCIzMCBmdC5cIixcblx0XHRzdGF0czogWzExLCAxOCwgMTQsIDExLCAxMiwgMTRdLFxuXHRcdHNraWxsc2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0ZGVjZXB0aW9uOiA2LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0aW5zaWdodDogMyxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJjaGFybWVkXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0c2Vuc2VzOiBcImRhcmt2aXNpb24gNjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTFcIixcblx0XHRsYW5ndWFnZXM6IFwiQ29tbW9uXCIsXG5cdFx0Y3I6IFwiM1wiLFxuXHRcdHRyYWl0czogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlNoYXBlY2hhbmdlclwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBkb3BwZWxnYW5nZXIgY2FuIHVzZSBpdHMgYWN0aW9uIHRvIHBvbHltb3JwaCBpbnRvIGEgU21hbGwgb3IgTWVkaXVtIGh1bWFub2lkIGl0IGhhcyBzZWVuLCBvciBiYWNrIGludG8gaXRzIHRydWUgZm9ybS4gSXRzIHN0YXRpc3RpY3MsIG90aGVyIHRoYW4gaXRzIHNpemUsIGFyZSB0aGUgc2FtZSBpbiBlYWNoIGZvcm0uIEFueSBlcXVpcG1lbnQgaXQgaXMgd2VhcmluZyBvciBjYXJyeWluZyBpc24ndCB0cmFuc2Zvcm1lZC4gSXQgcmV2ZXJ0cyB0byBpdHMgdHJ1ZSBmb3JtIGlmIGl0IGRpZXMuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQW1idXNoZXJcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgZG9wcGVsZ2FuZ2VyIGhhcyBhZHZhbnRhZ2Ugb24gYXR0YWNrIHJvbGxzIGFnYWluc3QgYW55IGNyZWF0dXJlIGl0IGhhcyBzdXJwcmlzZWQuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiU3VycHJpc2UgQXR0YWNrXCIsXG5cdFx0XHRcdGRlc2M6IFwiSWYgdGhlIGRvcHBlbGdhbmdlciBzdXJwcmlzZXMgYSBjcmVhdHVyZSBhbmQgaGl0cyBpdCB3aXRoIGFuIGF0dGFjayBkdXJpbmcgdGhlIGZpcnN0IHJvdW5kIG9mIGNvbWJhdCwgdGhlIHRhcmdldCB0YWtlcyBhbiBleHRyYSAxMCAoM2Q2KSBkYW1hZ2UgZnJvbSB0aGUgYXR0YWNrLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjNkNlwiLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJNdWx0aWF0dGFja1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBkb3BwZWxnYW5nZXIgbWFrZXMgdHdvIG1lbGVlIGF0dGFja3MuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiU2xhbVwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs2IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogNyAoMWQ2ICsgNCkgYmx1ZGdlb25pbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDYsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjFkNlwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDQsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlJlYWQgVGhvdWdodHNcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgZG9wcGVsZ2FuZ2VyIG1hZ2ljYWxseSByZWFkcyB0aGUgc3VyZmFjZSB0aG91Z2h0cyBvZiBvbmUgY3JlYXR1cmUgd2l0aGluIDYwIGZ0LiBvZiBpdC4gVGhlIGVmZmVjdCBjYW4gcGVuZXRyYXRlIGJhcnJpZXJzLCBidXQgMyBmdC4gb2Ygd29vZCBvciBkaXJ0LCAyIGZ0LiBvZiBzdG9uZSwgMiBpbmNoZXMgb2YgbWV0YWwsIG9yIGEgdGhpbiBzaGVldCBvZiBsZWFkIGJsb2NrcyBpdC4gV2hpbGUgdGhlIHRhcmdldCBpcyBpbiByYW5nZSwgdGhlIGRvcHBlbGdhbmdlciBjYW4gY29udGludWUgcmVhZGluZyBpdHMgdGhvdWdodHMsIGFzIGxvbmcgYXMgdGhlIGRvcHBlbGdhbmdlcidzIGNvbmNlbnRyYXRpb24gaXNuJ3QgYnJva2VuIChhcyBpZiBjb25jZW50cmF0aW5nIG9uIGEgc3BlbGwpLiBXaGlsZSByZWFkaW5nIHRoZSB0YXJnZXQncyBtaW5kLCB0aGUgZG9wcGVsZ2FuZ2VyIGhhcyBhZHZhbnRhZ2Ugb24gV2lzZG9tIChJbnNpZ2h0KSBhbmQgQ2hhcmlzbWEgKERlY2VwdGlvbiwgSW50aW1pZGF0aW9uLCBhbmQgUGVyc3Vhc2lvbikgY2hlY2tzIGFnYWluc3QgdGhlIHRhcmdldC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJEcmFmdCBIb3JzZVwiLFxuXHRcdHNpemU6IFwiTGFyZ2VcIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJiZWFzdFwiLFxuXHRcdHN1YnR5cGU6IFwiXCIsXG5cdFx0YWxpZ25tZW50OiBcInVuYWxpZ25lZFwiLFxuXHRcdGFjOiAxMCxcblx0XHRocDogMTksXG5cdFx0aGl0X2RpY2U6IFwiM2QxMFwiLFxuXHRcdHNwZWVkOiBcIjQwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbMTgsIDEwLCAxMiwgMiwgMTEsIDddLFxuXHRcdGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuXHRcdGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuXHRcdHNlbnNlczogXCJwYXNzaXZlIFBlcmNlcHRpb24gMTBcIixcblx0XHRsYW5ndWFnZXM6IFwiXCIsXG5cdFx0Y3I6IFwiMS80XCIsXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkhvb3Zlc1wiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs2IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogOSAoMmQ0ICsgNCkgYmx1ZGdlb25pbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDYsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjJkNFwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDQsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIkRyYWdvbiBUdXJ0bGVcIixcblx0XHRzaXplOiBcIkdhcmdhbnR1YW5cIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJkcmFnb25cIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJuZXV0cmFsXCIsXG5cdFx0YWM6IDIwLFxuXHRcdGhwOiAzNDEsXG5cdFx0aGl0X2RpY2U6IFwiMjJkMjBcIixcblx0XHRzcGVlZDogXCIyMCBmdC4sIHN3aW0gNDAgZnQuXCIsXG5cdFx0c3RhdHM6IFsyNSwgMTAsIDIwLCAxMCwgMTIsIDEyXSxcblx0XHRzYXZlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRkZXh0ZXJpdHk6IDYsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRjb25zdGl0dXRpb246IDExLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0d2lzZG9tOiA3LFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX3Jlc2lzdGFuY2VzOiBcImZpcmVcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcblx0XHRzZW5zZXM6IFwiZGFya3Zpc2lvbiAxMjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTFcIixcblx0XHRsYW5ndWFnZXM6IFwiQXF1YW4sIERyYWNvbmljXCIsXG5cdFx0Y3I6IFwiMTdcIixcblx0XHR0cmFpdHM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJBbXBoaWJpb3VzXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGRyYWdvbiB0dXJ0bGUgY2FuIGJyZWF0aGUgYWlyIGFuZCB3YXRlci5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJNdWx0aWF0dGFja1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBkcmFnb24gdHVydGxlIG1ha2VzIHRocmVlIGF0dGFja3M6IG9uZSB3aXRoIGl0cyBiaXRlIGFuZCB0d28gd2l0aCBpdHMgY2xhd3MuIEl0IGNhbiBtYWtlIG9uZSB0YWlsIGF0dGFjayBpbiBwbGFjZSBvZiBpdHMgdHdvIGNsYXcgYXR0YWNrcy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJCaXRlXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzEzIHRvIGhpdCwgcmVhY2ggMTUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDI2ICgzZDEyICsgNykgcGllcmNpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDEzLFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIzZDEyXCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogNyxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQ2xhd1wiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICsxMyB0byBoaXQsIHJlYWNoIDEwIGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxNiAoMmQ4ICsgNykgc2xhc2hpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDEzLFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIyZDhcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiA3LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJUYWlsXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzEzIHRvIGhpdCwgcmVhY2ggMTUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDI2ICgzZDEyICsgNykgYmx1ZGdlb25pbmcgZGFtYWdlLiBJZiB0aGUgdGFyZ2V0IGlzIGEgY3JlYXR1cmUsIGl0IG11c3Qgc3VjY2VlZCBvbiBhIERDIDIwIFN0cmVuZ3RoIHNhdmluZyB0aHJvdyBvciBiZSBwdXNoZWQgdXAgdG8gMTAgZmVldCBhd2F5IGZyb20gdGhlIGRyYWdvbiB0dXJ0bGUgYW5kIGtub2NrZWQgcHJvbmUuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMTMsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjNkMTJcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiA3LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJTdGVhbSBCcmVhdGggKFJlY2hhcmdlIDUtNilcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgZHJhZ29uIHR1cnRsZSBleGhhbGVzIHNjYWxkaW5nIHN0ZWFtIGluIGEgNjAtZm9vdCBjb25lLiBFYWNoIGNyZWF0dXJlIGluIHRoYXQgYXJlYSBtdXN0IG1ha2UgYSBEQyAxOCBDb25zdGl0dXRpb24gc2F2aW5nIHRocm93LCB0YWtpbmcgNTIgKDE1ZDYpIGZpcmUgZGFtYWdlIG9uIGEgZmFpbGVkIHNhdmUsIG9yIGhhbGYgYXMgbXVjaCBkYW1hZ2Ugb24gYSBzdWNjZXNzZnVsIG9uZS4gQmVpbmcgdW5kZXJ3YXRlciBkb2Vzbid0IGdyYW50IHJlc2lzdGFuY2UgYWdhaW5zdCB0aGlzIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxNWQ2XCIsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIkRyZXRjaFwiLFxuXHRcdHNpemU6IFwiU21hbGxcIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJmaWVuZFwiLFxuXHRcdHN1YnR5cGU6IFwiZGVtb25cIixcblx0XHRhbGlnbm1lbnQ6IFwiY2hhb3RpYyBldmlsXCIsXG5cdFx0YWM6IDExLFxuXHRcdGhwOiAxOCxcblx0XHRoaXRfZGljZTogXCI0ZDZcIixcblx0XHRzcGVlZDogXCIyMCBmdC5cIixcblx0XHRzdGF0czogWzExLCAxMSwgMTIsIDUsIDgsIDNdLFxuXHRcdGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX3Jlc2lzdGFuY2VzOiBcImNvbGQsIGZpcmUsIGxpZ2h0bmluZ1wiLFxuXHRcdGRhbWFnZV9pbW11bml0aWVzOiBcInBvaXNvblwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcInBvaXNvbmVkXCIsXG5cdFx0c2Vuc2VzOiBcImRhcmt2aXNpb24gNjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gOVwiLFxuXHRcdGxhbmd1YWdlczpcblx0XHRcdFwiQWJ5c3NhbCwgdGVsZXBhdGh5IDYwIGZ0LiAod29ya3Mgb25seSB3aXRoIGNyZWF0dXJlcyB0aGF0IHVuZGVyc3RhbmQgQWJ5c3NhbClcIixcblx0XHRjcjogXCIxLzRcIixcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgZHJldGNoIG1ha2VzIHR3byBhdHRhY2tzOiBvbmUgd2l0aCBpdHMgYml0ZSBhbmQgb25lIHdpdGggaXRzIGNsYXdzLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkJpdGVcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMiB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDMgKDFkNikgcGllcmNpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDIsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjFkNlwiLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJDbGF3c1wiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICsyIHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogNSAoMmQ0KSBzbGFzaGluZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMixcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMmQ0XCIsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkZldGlkIENsb3VkICgxL0RheSlcIixcblx0XHRcdFx0ZGVzYzogXCJBIDEwLWZvb3QgcmFkaXVzIG9mIGRpc2d1c3RpbmcgZ3JlZW4gZ2FzIGV4dGVuZHMgb3V0IGZyb20gdGhlIGRyZXRjaC4gVGhlIGdhcyBzcHJlYWRzIGFyb3VuZCBjb3JuZXJzLCBhbmQgaXRzIGFyZWEgaXMgbGlnaHRseSBvYnNjdXJlZC4gSXQgbGFzdHMgZm9yIDEgbWludXRlIG9yIHVudGlsIGEgc3Ryb25nIHdpbmQgZGlzcGVyc2VzIGl0LiBBbnkgY3JlYXR1cmUgdGhhdCBzdGFydHMgaXRzIHR1cm4gaW4gdGhhdCBhcmVhIG11c3Qgc3VjY2VlZCBvbiBhIERDIDExIENvbnN0aXR1dGlvbiBzYXZpbmcgdGhyb3cgb3IgYmUgcG9pc29uZWQgdW50aWwgdGhlIHN0YXJ0IG9mIGl0cyBuZXh0IHR1cm4uIFdoaWxlIHBvaXNvbmVkIGluIHRoaXMgd2F5LCB0aGUgdGFyZ2V0IGNhbiB0YWtlIGVpdGhlciBhbiBhY3Rpb24gb3IgYSBib251cyBhY3Rpb24gb24gaXRzIHR1cm4sIG5vdCBib3RoLCBhbmQgY2FuJ3QgdGFrZSByZWFjdGlvbnMuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiRHJpZGVyXCIsXG5cdFx0c2l6ZTogXCJMYXJnZVwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcIm1vbnN0cm9zaXR5XCIsXG5cdFx0c3VidHlwZTogXCJcIixcblx0XHRhbGlnbm1lbnQ6IFwiY2hhb3RpYyBldmlsXCIsXG5cdFx0YWM6IDE5LFxuXHRcdGhwOiAxMjMsXG5cdFx0aGl0X2RpY2U6IFwiMTNkMTBcIixcblx0XHRzcGVlZDogXCIzMCBmdC4sIGNsaW1iIDMwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbMTYsIDE2LCAxOCwgMTMsIDE0LCAxMl0sXG5cdFx0c2tpbGxzYXZlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRwZXJjZXB0aW9uOiA1LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0c3RlYWx0aDogOSxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcblx0XHRzZW5zZXM6IFwiZGFya3Zpc2lvbiAxMjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTVcIixcblx0XHRsYW5ndWFnZXM6IFwiRWx2aXNoLCBVbmRlcmNvbW1vblwiLFxuXHRcdGNyOiBcIjZcIixcblx0XHR0cmFpdHM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJGZXkgQW5jZXN0cnlcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgZHJpZGVyIGhhcyBhZHZhbnRhZ2Ugb24gc2F2aW5nIHRocm93cyBhZ2FpbnN0IGJlaW5nIGNoYXJtZWQsIGFuZCBtYWdpYyBjYW4ndCBwdXQgdGhlIGRyaWRlciB0byBzbGVlcC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJJbm5hdGUgU3BlbGxjYXN0aW5nXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGRyaWRlcidzIGlubmF0ZSBzcGVsbGNhc3RpbmcgYWJpbGl0eSBpcyBXaXNkb20gKHNwZWxsIHNhdmUgREMgMTMpLiBUaGUgZHJpZGVyIGNhbiBpbm5hdGVseSBjYXN0IHRoZSBmb2xsb3dpbmcgc3BlbGxzLCByZXF1aXJpbmcgbm8gbWF0ZXJpYWwgY29tcG9uZW50czpcXG5BdCB3aWxsOiBkYW5jaW5nIGxpZ2h0c1xcbjEvZGF5IGVhY2g6IGRhcmtuZXNzLCBmYWVyaWUgZmlyZVwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlNwaWRlciBDbGltYlwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBkcmlkZXIgY2FuIGNsaW1iIGRpZmZpY3VsdCBzdXJmYWNlcywgaW5jbHVkaW5nIHVwc2lkZSBkb3duIG9uIGNlaWxpbmdzLCB3aXRob3V0IG5lZWRpbmcgdG8gbWFrZSBhbiBhYmlsaXR5IGNoZWNrLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlN1bmxpZ2h0IFNlbnNpdGl2aXR5XCIsXG5cdFx0XHRcdGRlc2M6IFwiV2hpbGUgaW4gc3VubGlnaHQsIHRoZSBkcmlkZXIgaGFzIGRpc2FkdmFudGFnZSBvbiBhdHRhY2sgcm9sbHMsIGFzIHdlbGwgYXMgb24gV2lzZG9tIChQZXJjZXB0aW9uKSBjaGVja3MgdGhhdCByZWx5IG9uIHNpZ2h0LlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIldlYiBXYWxrZXJcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgZHJpZGVyIGlnbm9yZXMgbW92ZW1lbnQgcmVzdHJpY3Rpb25zIGNhdXNlZCBieSB3ZWJiaW5nLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGRyaWRlciBtYWtlcyB0aHJlZSBhdHRhY2tzLCBlaXRoZXIgd2l0aCBpdHMgbG9uZ3N3b3JkIG9yIGl0cyBsb25nYm93LiBJdCBjYW4gcmVwbGFjZSBvbmUgb2YgdGhvc2UgYXR0YWNrcyB3aXRoIGEgYml0ZSBhdHRhY2suXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQml0ZVwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs2IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSBjcmVhdHVyZS4gSGl0OiAyICgxZDQpIHBpZXJjaW5nIGRhbWFnZSBwbHVzIDkgKDJkOCkgcG9pc29uIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA2LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxZDRcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiAyLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJMb25nc3dvcmRcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNiB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDcgKDFkOCArIDMpIHNsYXNoaW5nIGRhbWFnZSwgb3IgOCAoMWQxMCArIDMpIHNsYXNoaW5nIGRhbWFnZSBpZiB1c2VkIHdpdGggdHdvIGhhbmRzLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDYsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjFkOFwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDMsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkxvbmdib3dcIixcblx0XHRcdFx0ZGVzYzogXCJSYW5nZWQgV2VhcG9uIEF0dGFjazogKzYgdG8gaGl0LCByYW5nZSAxNTAvNjAwIGZ0Liwgb25lIHRhcmdldC4gSGl0OiA3ICgxZDggKyAzKSBwaWVyY2luZyBkYW1hZ2UgcGx1cyA0ICgxZDgpIHBvaXNvbiBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNixcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMWQ4XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogMyxcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiRHJvd1wiLFxuXHRcdHNpemU6IFwiTWVkaXVtXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwiaHVtYW5vaWRcIixcblx0XHRzdWJ0eXBlOiBcImVsZlwiLFxuXHRcdGFsaWdubWVudDogXCJuZXV0cmFsIGV2aWxcIixcblx0XHRhYzogMTUsXG5cdFx0aHA6IDEzLFxuXHRcdGhpdF9kaWNlOiBcIjNkOFwiLFxuXHRcdHNwZWVkOiBcIjMwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbMTAsIDE0LCAxMCwgMTEsIDExLCAxMl0sXG5cdFx0c2tpbGxzYXZlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRwZXJjZXB0aW9uOiAyLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0c3RlYWx0aDogNCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcblx0XHRzZW5zZXM6IFwiZGFya3Zpc2lvbiAxMjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTJcIixcblx0XHRsYW5ndWFnZXM6IFwiRWx2aXNoLCBVbmRlcmNvbW1vblwiLFxuXHRcdGNyOiBcIjEvNFwiLFxuXHRcdHRyYWl0czogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkZleSBBbmNlc3RyeVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBkcm93IGhhcyBhZHZhbnRhZ2Ugb24gc2F2aW5nIHRocm93cyBhZ2FpbnN0IGJlaW5nIGNoYXJtZWQsIGFuZCBtYWdpYyBjYW4ndCBwdXQgdGhlIGRyb3cgdG8gc2xlZXAuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiSW5uYXRlIFNwZWxsY2FzdGluZ1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBkcm93J3Mgc3BlbGxjYXN0aW5nIGFiaWxpdHkgaXMgQ2hhcmlzbWEgKHNwZWxsIHNhdmUgREMgMTEpLiBJdCBjYW4gaW5uYXRlbHkgY2FzdCB0aGUgZm9sbG93aW5nIHNwZWxscywgcmVxdWlyaW5nIG5vIG1hdGVyaWFsIGNvbXBvbmVudHM6XFxuQXQgd2lsbDogZGFuY2luZyBsaWdodHNcXG4xL2RheSBlYWNoOiBkYXJrbmVzcywgZmFlcmllIGZpcmVcIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJTdW5saWdodCBTZW5zaXRpdml0eVwiLFxuXHRcdFx0XHRkZXNjOiBcIldoaWxlIGluIHN1bmxpZ2h0LCB0aGUgZHJvdyBoYXMgZGlzYWR2YW50YWdlIG9uIGF0dGFjayByb2xscywgYXMgd2VsbCBhcyBvbiBXaXNkb20gKFBlcmNlcHRpb24pIGNoZWNrcyB0aGF0IHJlbHkgb24gc2lnaHQuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiU2hvcnRzd29yZFwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs0IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogNSAoMWQ2ICsgMikgcGllcmNpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDQsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjFkNlwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDIsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkhhbmQgQ3Jvc3Nib3dcIixcblx0XHRcdFx0ZGVzYzogXCJSYW5nZWQgV2VhcG9uIEF0dGFjazogKzQgdG8gaGl0LCByYW5nZSAzMC8xMjAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDUgKDFkNiArIDIpIHBpZXJjaW5nIGRhbWFnZSwgYW5kIHRoZSB0YXJnZXQgbXVzdCBzdWNjZWVkIG9uIGEgREMgMTMgQ29uc3RpdHV0aW9uIHNhdmluZyB0aHJvdyBvciBiZSBwb2lzb25lZCBmb3IgMSBob3VyLiBJZiB0aGUgc2F2aW5nIHRocm93IGZhaWxzIGJ5IDUgb3IgbW9yZSwgdGhlIHRhcmdldCBpcyBhbHNvIHVuY29uc2Npb3VzIHdoaWxlIHBvaXNvbmVkIGluIHRoaXMgd2F5LiBUaGUgdGFyZ2V0IHdha2VzIHVwIGlmIGl0IHRha2VzIGRhbWFnZSBvciBpZiBhbm90aGVyIGNyZWF0dXJlIHRha2VzIGFuIGFjdGlvbiB0byBzaGFrZSBpdCBhd2FrZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA0LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxZDZcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiAyLFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJEcnVpZFwiLFxuXHRcdHNpemU6IFwiTWVkaXVtXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwiaHVtYW5vaWRcIixcblx0XHRzdWJ0eXBlOiBcImFueSByYWNlXCIsXG5cdFx0YWxpZ25tZW50OiBcImFueSBhbGlnbm1lbnRcIixcblx0XHRhYzogMTEsXG5cdFx0aHA6IDI3LFxuXHRcdGhpdF9kaWNlOiBcIjVkOFwiLFxuXHRcdHNwZWVkOiBcIjMwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbMTAsIDEyLCAxMywgMTIsIDE1LCAxMV0sXG5cdFx0c2tpbGxzYXZlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYXR1cmU6IDMsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRtZWRpY2luZTogNCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHBlcmNlcHRpb246IDQsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0c2Vuc2VzOiBcInBhc3NpdmUgUGVyY2VwdGlvbiAxNFwiLFxuXHRcdGxhbmd1YWdlczogXCJEcnVpZGljIHBsdXMgYW55IHR3byBsYW5ndWFnZXNcIixcblx0XHRjcjogXCIyXCIsXG5cdFx0dHJhaXRzOiBbXSxcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiUXVhcnRlcnN0YWZmXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzIgdG8gaGl0ICgrNCB0byBoaXQgd2l0aCBzaGlsbGVsYWdoKSwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMyAoMWQ2KSBibHVkZ2VvbmluZyBkYW1hZ2UsIG9yIDYgKDFkOCArIDIpIGJsdWRnZW9uaW5nIGRhbWFnZSB3aXRoIHNoaWxsZWxhZ2ggb3IgaWYgd2llbGRlZCB3aXRoIHR3byBoYW5kcy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAyLFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxZDZcIixcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRzcGVsbHM6IFtcblx0XHRcdFwiVGhlIGRydWlkIGlzIGEgNHRoLWxldmVsIHNwZWxsY2FzdGVyLiBJdHMgc3BlbGxjYXN0aW5nIGFiaWxpdHkgaXMgV2lzZG9tIChzcGVsbCBzYXZlIERDIDEyLCArNCB0byBoaXQgd2l0aCBzcGVsbCBhdHRhY2tzKS4gSXQgaGFzIHRoZSBmb2xsb3dpbmcgZHJ1aWQgc3BlbGxzIHByZXBhcmVkOlwiLFxuXHRcdFx0e1xuXHRcdFx0XHRcIkNhbnRyaXBzIChhdCB3aWxsKVwiOiBcImRydWlkY3JhZnQsIHByb2R1Y2UgZmxhbWUsIHNoaWxsZWxhZ2hcIixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdFwiMXN0IGxldmVsICg0IHNsb3RzKVwiOlxuXHRcdFx0XHRcdFwiZW50YW5nbGUsIGxvbmdzdHJpZGVyLCBzcGVhayB3aXRoIGFuaW1hbHMsIHRodW5kZXJ3YXZlXCIsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRcIjJuZCBsZXZlbCAoMyBzbG90cylcIjogXCJhbmltYWwgbWVzc2VuZ2VyLCBiYXJrc2tpblwiLFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJEcnlhZFwiLFxuXHRcdHNpemU6IFwiTWVkaXVtXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwiZmV5XCIsXG5cdFx0c3VidHlwZTogXCJcIixcblx0XHRhbGlnbm1lbnQ6IFwibmV1dHJhbFwiLFxuXHRcdGFjOiAxMSxcblx0XHRocDogMjIsXG5cdFx0aGl0X2RpY2U6IFwiNWQ4XCIsXG5cdFx0c3BlZWQ6IFwiMzAgZnQuXCIsXG5cdFx0c3RhdHM6IFsxMCwgMTIsIDExLCAxNCwgMTUsIDE4XSxcblx0XHRza2lsbHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdHBlcmNlcHRpb246IDQsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRzdGVhbHRoOiA1LFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuXHRcdGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuXHRcdHNlbnNlczogXCJkYXJrdmlzaW9uIDYwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDE0XCIsXG5cdFx0bGFuZ3VhZ2VzOiBcIkVsdmlzaCwgU3lsdmFuXCIsXG5cdFx0Y3I6IFwiMVwiLFxuXHRcdHRyYWl0czogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIklubmF0ZSBTcGVsbGNhc3RpbmdcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgZHJ5YWQncyBpbm5hdGUgc3BlbGxjYXN0aW5nIGFiaWxpdHkgaXMgQ2hhcmlzbWEgKHNwZWxsIHNhdmUgREMgMTQpLiBUaGUgZHJ5YWQgY2FuIGlubmF0ZWx5IGNhc3QgdGhlIGZvbGxvd2luZyBzcGVsbHMsIHJlcXVpcmluZyBubyBtYXRlcmlhbCBjb21wb25lbnRzOlxcblxcbkF0IHdpbGw6IGRydWlkY3JhZnRcXG4zL2RheSBlYWNoOiBlbnRhbmdsZSwgZ29vZGJlcnJ5XFxuMS9kYXkgZWFjaDogYmFya3NraW4sIHBhc3Mgd2l0aG91dCB0cmFjZSwgc2hpbGxlbGFnaFwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIk1hZ2ljIFJlc2lzdGFuY2VcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgZHJ5YWQgaGFzIGFkdmFudGFnZSBvbiBzYXZpbmcgdGhyb3dzIGFnYWluc3Qgc3BlbGxzIGFuZCBvdGhlciBtYWdpY2FsIGVmZmVjdHMuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiU3BlYWsgd2l0aCBCZWFzdHMgYW5kIFBsYW50c1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBkcnlhZCBjYW4gY29tbXVuaWNhdGUgd2l0aCBiZWFzdHMgYW5kIHBsYW50cyBhcyBpZiB0aGV5IHNoYXJlZCBhIGxhbmd1YWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlRyZWUgU3RyaWRlXCIsXG5cdFx0XHRcdGRlc2M6IFwiT25jZSBvbiBoZXIgdHVybiwgdGhlIGRyeWFkIGNhbiB1c2UgMTAgZnQuIG9mIGhlciBtb3ZlbWVudCB0byBzdGVwIG1hZ2ljYWxseSBpbnRvIG9uZSBsaXZpbmcgdHJlZSB3aXRoaW4gaGVyIHJlYWNoIGFuZCBlbWVyZ2UgZnJvbSBhIHNlY29uZCBsaXZpbmcgdHJlZSB3aXRoaW4gNjAgZnQuIG9mIHRoZSBmaXJzdCB0cmVlLCBhcHBlYXJpbmcgaW4gYW4gdW5vY2N1cGllZCBzcGFjZSB3aXRoaW4gNSBmdC4gb2YgdGhlIHNlY29uZCB0cmVlLiBCb3RoIHRyZWVzIG11c3QgYmUgbGFyZ2Ugb3IgYmlnZ2VyLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkNsdWJcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMiB0byBoaXQgKCs2IHRvIGhpdCB3aXRoIHNoaWxsZWxhZ2gpLCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAyICgxIGQ0KSBibHVkZ2VvbmluZyBkYW1hZ2UsIG9yIDggKDFkOCArIDQpIGJsdWRnZW9uaW5nIGRhbWFnZSB3aXRoIHNoaWxsZWxhZ2guXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMixcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMWQ0XCIsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkZleSBDaGFybVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBkcnlhZCB0YXJnZXRzIG9uZSBodW1hbm9pZCBvciBiZWFzdCB0aGF0IHNoZSBjYW4gc2VlIHdpdGhpbiAzMCBmZWV0IG9mIGhlci4gSWYgdGhlIHRhcmdldCBjYW4gc2VlIHRoZSBkcnlhZCwgaXQgbXVzdCBzdWNjZWVkIG9uIGEgREMgMTQgV2lzZG9tIHNhdmluZyB0aHJvdyBvciBiZSBtYWdpY2FsbHkgY2hhcm1lZC4gVGhlIGNoYXJtZWQgY3JlYXR1cmUgcmVnYXJkcyB0aGUgZHJ5YWQgYXMgYSB0cnVzdGVkIGZyaWVuZCB0byBiZSBoZWVkZWQgYW5kIHByb3RlY3RlZC4gQWx0aG91Z2ggdGhlIHRhcmdldCBpc24ndCB1bmRlciB0aGUgZHJ5YWQncyBjb250cm9sLCBpdCB0YWtlcyB0aGUgZHJ5YWQncyByZXF1ZXN0cyBvciBhY3Rpb25zIGluIHRoZSBtb3N0IGZhdm9yYWJsZSB3YXkgaXQgY2FuLlxcbkVhY2ggdGltZSB0aGUgZHJ5YWQgb3IgaXRzIGFsbGllcyBkbyBhbnl0aGluZyBoYXJtZnVsIHRvIHRoZSB0YXJnZXQsIGl0IGNhbiByZXBlYXQgdGhlIHNhdmluZyB0aHJvdywgZW5kaW5nIHRoZSBlZmZlY3Qgb24gaXRzZWxmIG9uIGEgc3VjY2Vzcy4gT3RoZXJ3aXNlLCB0aGUgZWZmZWN0IGxhc3RzIDI0IGhvdXJzIG9yIHVudGlsIHRoZSBkcnlhZCBkaWVzLCBpcyBvbiBhIGRpZmZlcmVudCBwbGFuZSBvZiBleGlzdGVuY2UgZnJvbSB0aGUgdGFyZ2V0LCBvciBlbmRzIHRoZSBlZmZlY3QgYXMgYSBib251cyBhY3Rpb24uIElmIGEgdGFyZ2V0J3Mgc2F2aW5nIHRocm93IGlzIHN1Y2Nlc3NmdWwsIHRoZSB0YXJnZXQgaXMgaW1tdW5lIHRvIHRoZSBkcnlhZCdzIEZleSBDaGFybSBmb3IgdGhlIG5leHQgMjQgaG91cnMuXFxuVGhlIGRyeWFkIGNhbiBoYXZlIG5vIG1vcmUgdGhhbiBvbmUgaHVtYW5vaWQgYW5kIHVwIHRvIHRocmVlIGJlYXN0cyBjaGFybWVkIGF0IGEgdGltZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJEdWVyZ2FyXCIsXG5cdFx0c2l6ZTogXCJNZWRpdW1cIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJodW1hbm9pZFwiLFxuXHRcdHN1YnR5cGU6IFwiZHdhcmZcIixcblx0XHRhbGlnbm1lbnQ6IFwibGF3ZnVsIGV2aWxcIixcblx0XHRhYzogMTYsXG5cdFx0aHA6IDI2LFxuXHRcdGhpdF9kaWNlOiBcIjRkOFwiLFxuXHRcdHNwZWVkOiBcIjI1IGZ0LlwiLFxuXHRcdHN0YXRzOiBbMTQsIDExLCAxNCwgMTEsIDEwLCA5XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJwb2lzb25cIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcblx0XHRzZW5zZXM6IFwiZGFya3Zpc2lvbiAxMjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTBcIixcblx0XHRsYW5ndWFnZXM6IFwiRHdhcnZpc2gsIFVuZGVyY29tbW9uXCIsXG5cdFx0Y3I6IFwiMVwiLFxuXHRcdHRyYWl0czogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkR1ZXJnYXIgUmVzaWxpZW5jZVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBkdWVyZ2FyIGhhcyBhZHZhbnRhZ2Ugb24gc2F2aW5nIHRocm93cyBhZ2FpbnN0IHBvaXNvbiwgc3BlbGxzLCBhbmQgaWxsdXNpb25zLCBhcyB3ZWxsIGFzIHRvIHJlc2lzdCBiZWluZyBjaGFybWVkIG9yIHBhcmFseXplZC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJTdW5saWdodCBTZW5zaXRpdml0eVwiLFxuXHRcdFx0XHRkZXNjOiBcIldoaWxlIGluIHN1bmxpZ2h0LCB0aGUgZHVlcmdhciBoYXMgZGlzYWR2YW50YWdlIG9uIGF0dGFjayByb2xscywgYXMgd2VsbCBhcyBvbiBXaXNkb20gKFBlcmNlcHRpb24pIGNoZWNrcyB0aGF0IHJlbHkgb24gc2lnaHQuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiRW5sYXJnZSAoUmVjaGFyZ2VzIGFmdGVyIGEgU2hvcnQgb3IgTG9uZyBSZXN0KVwiLFxuXHRcdFx0XHRkZXNjOiBcIkZvciAxIG1pbnV0ZSwgdGhlIGR1ZXJnYXIgbWFnaWNhbGx5IGluY3JlYXNlcyBpbiBzaXplLCBhbG9uZyB3aXRoIGFueXRoaW5nIGl0IGlzIHdlYXJpbmcgb3IgY2FycnlpbmcuIFdoaWxlIGVubGFyZ2VkLCB0aGUgZHVlcmdhciBpcyBMYXJnZSwgZG91YmxlcyBpdHMgZGFtYWdlIGRpY2Ugb24gU3RyZW5ndGgtYmFzZWQgd2VhcG9uIGF0dGFja3MgKGluY2x1ZGVkIGluIHRoZSBhdHRhY2tzKSwgYW5kIG1ha2VzIFN0cmVuZ3RoIGNoZWNrcyBhbmQgU3RyZW5ndGggc2F2aW5nIHRocm93cyB3aXRoIGFkdmFudGFnZS4gSWYgdGhlIGR1ZXJnYXIgbGFja3MgdGhlIHJvb20gdG8gYmVjb21lIExhcmdlLCBpdCBhdHRhaW5zIHRoZSBtYXhpbXVtIHNpemUgcG9zc2libGUgaW4gdGhlIHNwYWNlIGF2YWlsYWJsZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJXYXIgUGlja1wiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs0IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogNiAoMWQ4ICsgMikgcGllcmNpbmcgZGFtYWdlLCBvciAxMSAoMmQ4ICsgMikgcGllcmNpbmcgZGFtYWdlIHdoaWxlIGVubGFyZ2VkLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDQsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjFkOFwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDIsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkphdmVsaW5cIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBvciBSYW5nZWQgV2VhcG9uIEF0dGFjazogKzQgdG8gaGl0LCByZWFjaCA1IGZ0LiBvciByYW5nZSAzMC8xMjAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDUgKDFkNiArIDIpIHBpZXJjaW5nIGRhbWFnZSwgb3IgOSAoMmQ2ICsgMikgcGllcmNpbmcgZGFtYWdlIHdoaWxlIGVubGFyZ2VkLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDQsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjFkNlwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDIsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkludmlzaWJpbGl0eSAoUmVjaGFyZ2VzIGFmdGVyIGEgU2hvcnQgb3IgTG9uZyBSZXN0KVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBkdWVyZ2FyIG1hZ2ljYWxseSB0dXJucyBpbnZpc2libGUgdW50aWwgaXQgYXR0YWNrcywgY2FzdHMgYSBzcGVsbCwgb3IgdXNlcyBpdHMgRW5sYXJnZSwgb3IgdW50aWwgaXRzIGNvbmNlbnRyYXRpb24gaXMgYnJva2VuLCB1cCB0byAxIGhvdXIgKGFzIGlmIGNvbmNlbnRyYXRpbmcgb24gYSBzcGVsbCkuIEFueSBlcXVpcG1lbnQgdGhlIGR1ZXJnYXIgd2VhcnMgb3IgY2FycmllcyBpcyBpbnZpc2libGUgd2l0aCBpdCAuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiRHVzdCBNZXBoaXRcIixcblx0XHRzaXplOiBcIlNtYWxsXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwiZWxlbWVudGFsXCIsXG5cdFx0c3VidHlwZTogXCJcIixcblx0XHRhbGlnbm1lbnQ6IFwibmV1dHJhbCBldmlsXCIsXG5cdFx0YWM6IDEyLFxuXHRcdGhwOiAxNyxcblx0XHRoaXRfZGljZTogXCI1ZDZcIixcblx0XHRzcGVlZDogXCIzMCBmdC4sIGZseSAzMCBmdC5cIixcblx0XHRzdGF0czogWzUsIDE0LCAxMCwgOSwgMTEsIDEwXSxcblx0XHRza2lsbHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdHBlcmNlcHRpb246IDIsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRzdGVhbHRoOiA0LFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiZmlyZVwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJwb2lzb25cIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczogXCJwb2lzb25lZFwiLFxuXHRcdHNlbnNlczogXCJkYXJrdmlzaW9uIDYwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDEyXCIsXG5cdFx0bGFuZ3VhZ2VzOiBcIkF1cmFuLCBUZXJyYW5cIixcblx0XHRjcjogXCIxLzJcIixcblx0XHR0cmFpdHM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJEZWF0aCBCdXJzdFwiLFxuXHRcdFx0XHRkZXNjOiBcIldoZW4gdGhlIG1lcGhpdCBkaWVzLCBpdCBleHBsb2RlcyBpbiBhIGJ1cnN0IG9mIGR1c3QuIEVhY2ggY3JlYXR1cmUgd2l0aGluIDUgZnQuIG9mIGl0IG11c3QgdGhlbiBzdWNjZWVkIG9uIGEgREMgMTAgQ29uc3RpdHV0aW9uIHNhdmluZyB0aHJvdyBvciBiZSBibGluZGVkIGZvciAxIG1pbnV0ZS4gQSBibGluZGVkIGNyZWF0dXJlIGNhbiByZXBlYXQgdGhlIHNhdmluZyB0aHJvdyBvbiBlYWNoIG9mIGl0cyB0dXJucywgZW5kaW5nIHRoZSBlZmZlY3Qgb24gaXRzZWxmIG9uIGEgc3VjY2Vzcy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJJbm5hdGUgU3BlbGxjYXN0aW5nICgxL0RheSlcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgbWVwaGl0IGNhbiBpbm5hdGVseSBjYXN0IHNsZWVwLCByZXF1aXJpbmcgbm8gbWF0ZXJpYWwgY29tcG9uZW50cy4gSXRzIGlubmF0ZSBzcGVsbGNhc3RpbmcgYWJpbGl0eSBpcyBDaGFyaXNtYS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJDbGF3c1wiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs0IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSBjcmVhdHVyZS4gSGl0OiA0ICgxZDQgKyAyKSBzbGFzaGluZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNCxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMWQ0XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogMixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQmxpbmRpbmcgQnJlYXRoIChSZWNoYXJnZSA2KVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBtZXBoaXQgZXhoYWxlcyBhIDE1LWZvb3QgY29uZSBvZiBibGluZGluZyBkdXN0LiBFYWNoIGNyZWF0dXJlIGluIHRoYXQgYXJlYSBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxMCBEZXh0ZXJpdHkgc2F2aW5nIHRocm93IG9yIGJlIGJsaW5kZWQgZm9yIDEgbWludXRlLiBBIGNyZWF0dXJlIGNhbiByZXBlYXQgdGhlIHNhdmluZyB0aHJvdyBhdCB0aGUgZW5kIG9mIGVhY2ggb2YgaXRzIHR1cm5zLCBlbmRpbmcgdGhlIGVmZmVjdCBvbiBpdHNlbGYgb24gYSBzdWNjZXNzLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlZhcmlhbnQ6IFN1bW1vbiBNZXBoaXRzICgxL0RheSlcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgbWVwaGl0IGhhcyBhIDI1IHBlcmNlbnQgY2hhbmNlIG9mIHN1bW1vbmluZyAxZDQgbWVwaGl0cyBvZiBpdHMga2luZC4gQSBzdW1tb25lZCBtZXBoaXQgYXBwZWFycyBpbiBhbiB1bm9jY3VwaWVkIHNwYWNlIHdpdGhpbiA2MCBmZWV0IG9mIGl0cyBzdW1tb25lciwgYWN0cyBhcyBhbiBhbGx5IG9mIGl0cyBzdW1tb25lciwgYW5kIGNhbid0IHN1bW1vbiBvdGhlciBtZXBoaXRzLiBJdCByZW1haW5zIGZvciAxIG1pbnV0ZSwgdW50aWwgaXQgb3IgaXRzIHN1bW1vbmVyIGRpZXMsIG9yIHVudGlsIGl0cyBzdW1tb25lciBkaXNtaXNzZXMgaXQgYXMgYW4gYWN0aW9uLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIkVhZ2xlXCIsXG5cdFx0c2l6ZTogXCJTbWFsbFwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcImJlYXN0XCIsXG5cdFx0c3VidHlwZTogXCJcIixcblx0XHRhbGlnbm1lbnQ6IFwidW5hbGlnbmVkXCIsXG5cdFx0YWM6IDEyLFxuXHRcdGhwOiAzLFxuXHRcdGhpdF9kaWNlOiBcIjFkNlwiLFxuXHRcdHNwZWVkOiBcIjEwIGZ0LiwgZmx5IDYwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbNiwgMTUsIDEwLCAyLCAxNCwgN10sXG5cdFx0c2tpbGxzYXZlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRwZXJjZXB0aW9uOiA0LFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuXHRcdGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuXHRcdHNlbnNlczogXCJwYXNzaXZlIFBlcmNlcHRpb24gMTRcIixcblx0XHRsYW5ndWFnZXM6IFwiXCIsXG5cdFx0Y3I6IFwiMFwiLFxuXHRcdHRyYWl0czogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIktlZW4gU2lnaHRcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgZWFnbGUgaGFzIGFkdmFudGFnZSBvbiBXaXNkb20gKFBlcmNlcHRpb24pIGNoZWNrcyB0aGF0IHJlbHkgb24gc2lnaHQuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiVGFsb25zXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzQgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiA0ICgxZDQgKyAyKSBzbGFzaGluZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNCxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMWQ0XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogMixcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiRWFydGggRWxlbWVudGFsXCIsXG5cdFx0c2l6ZTogXCJMYXJnZVwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcImVsZW1lbnRhbFwiLFxuXHRcdHN1YnR5cGU6IFwiXCIsXG5cdFx0YWxpZ25tZW50OiBcIm5ldXRyYWxcIixcblx0XHRhYzogMTcsXG5cdFx0aHA6IDEyNixcblx0XHRoaXRfZGljZTogXCIxMmQxMFwiLFxuXHRcdHNwZWVkOiBcIjMwIGZ0LiwgYnVycm93IDMwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbMjAsIDgsIDIwLCA1LCAxMCwgNV0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJ0aHVuZGVyXCIsXG5cdFx0ZGFtYWdlX3Jlc2lzdGFuY2VzOlxuXHRcdFx0XCJibHVkZ2VvbmluZywgcGllcmNpbmcsIGFuZCBzbGFzaGluZyBmcm9tIG5vbm1hZ2ljYWwgd2VhcG9uc1wiLFxuXHRcdGRhbWFnZV9pbW11bml0aWVzOiBcInBvaXNvblwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOlxuXHRcdFx0XCJleGhhdXN0aW9uLCBwYXJhbHl6ZWQsIHBldHJpZmllZCwgcG9pc29uZWQsIHVuY29uc2Npb3VzXCIsXG5cdFx0c2Vuc2VzOiBcImRhcmt2aXNpb24gNjAgZnQuLCB0cmVtb3JzZW5zZSA2MCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxMFwiLFxuXHRcdGxhbmd1YWdlczogXCJUZXJyYW5cIixcblx0XHRjcjogXCI1XCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiRWFydGggR2xpZGVcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgZWxlbWVudGFsIGNhbiBidXJyb3cgdGhyb3VnaCBub25tYWdpY2FsLCB1bndvcmtlZCBlYXJ0aCBhbmQgc3RvbmUuIFdoaWxlIGRvaW5nIHNvLCB0aGUgZWxlbWVudGFsIGRvZXNuJ3QgZGlzdHVyYiB0aGUgbWF0ZXJpYWwgaXQgbW92ZXMgdGhyb3VnaC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJTaWVnZSBNb25zdGVyXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGVsZW1lbnRhbCBkZWFscyBkb3VibGUgZGFtYWdlIHRvIG9iamVjdHMgYW5kIHN0cnVjdHVyZXMuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgZWxlbWVudGFsIG1ha2VzIHR3byBzbGFtIGF0dGFja3MuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiU2xhbVwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs4IHRvIGhpdCwgcmVhY2ggMTAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDE0ICgyZDggKyA1KSBibHVkZ2VvbmluZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogOCxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMmQ4XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogNSxcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiRWZyZWV0aVwiLFxuXHRcdHNpemU6IFwiTGFyZ2VcIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJlbGVtZW50YWxcIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJsYXdmdWwgZXZpbFwiLFxuXHRcdGFjOiAxNyxcblx0XHRocDogMjAwLFxuXHRcdGhpdF9kaWNlOiBcIjE2ZDEwXCIsXG5cdFx0c3BlZWQ6IFwiNDAgZnQuLCBmbHkgNjAgZnQuXCIsXG5cdFx0c3RhdHM6IFsyMiwgMTIsIDI0LCAxNiwgMTUsIDE2XSxcblx0XHRzYXZlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRpbnRlbGxpZ2VuY2U6IDcsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHR3aXNkb206IDYsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRjaGFyaXNtYTogNyxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJmaXJlXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0c2Vuc2VzOiBcImRhcmt2aXNpb24gMTIwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDEyXCIsXG5cdFx0bGFuZ3VhZ2VzOiBcIklnbmFuXCIsXG5cdFx0Y3I6IFwiMTFcIixcblx0XHR0cmFpdHM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJFbGVtZW50YWwgRGVtaXNlXCIsXG5cdFx0XHRcdGRlc2M6IFwiSWYgdGhlIGVmcmVldGkgZGllcywgaXRzIGJvZHkgZGlzaW50ZWdyYXRlcyBpbiBhIGZsYXNoIG9mIGZpcmUgYW5kIHB1ZmYgb2Ygc21va2UsIGxlYXZpbmcgYmVoaW5kIG9ubHkgZXF1aXBtZW50IHRoZSBkamlubmkgd2FzIHdlYXJpbmcgb3IgY2FycnlpbmcuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiSW5uYXRlIFNwZWxsY2FzdGluZ1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBlZnJlZXRpJ3MgaW5uYXRlIHNwZWxsIGNhc3RpbmcgYWJpbGl0eSBpcyBDaGFyaXNtYSAoc3BlbGwgc2F2ZSBEQyAxNSwgKzcgdG8gaGl0IHdpdGggc3BlbGwgYXR0YWNrcykuIEl0IGNhbiBpbm5hdGVseSBjYXN0IHRoZSBmb2xsb3dpbmcgc3BlbGxzLCByZXF1aXJpbmcgbm8gbWF0ZXJpYWwgY29tcG9uZW50czpcXG5cXG5BdCB3aWxsOiBkZXRlY3QgbWFnaWNcXG4zL2RheTogZW5sYXJnZS9yZWR1Y2UsIHRvbmd1ZXNcXG4xL2RheSBlYWNoOiBjb25qdXJlIGVsZW1lbnRhbCAoZmlyZSBlbGVtZW50YWwgb25seSksIGdhc2VvdXMgZm9ybSwgaW52aXNpYmlsaXR5LCBtYWpvciBpbWFnZSwgcGxhbmUgc2hpZnQsIHdhbGwgb2YgZmlyZVwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlZhcmlhbnQ6IEdlbmllIFBvd2Vyc1wiLFxuXHRcdFx0XHRkZXNjOiBcIkdlbmllcyBoYXZlIGEgdmFyaWV0eSBvZiBtYWdpY2FsIGNhcGFiaWxpdGllcywgaW5jbHVkaW5nIHNwZWxscy4gQSBmZXcgaGF2ZSBldmVuIGdyZWF0ZXIgcG93ZXJzIHRoYXQgYWxsb3cgdGhlbSB0byBhbHRlciB0aGVpciBhcHBlYXJhbmNlIG9yIHRoZSBuYXR1cmUgb2YgcmVhbGl0eS5cXG5cXG5EaXNndWlzZXMuXFxuU29tZSBnZW5pZXMgY2FuIHZlaWwgdGhlbXNlbHZlcyBpbiBpbGx1c2lvbiB0byBwYXNzIGFzIG90aGVyIHNpbWlsYXJseSBzaGFwZWQgY3JlYXR1cmVzLiBTdWNoIGdlbmllcyBjYW4gaW5uYXRlbHkgY2FzdCB0aGUgZGlzZ3Vpc2Ugc2VsZiBzcGVsbCBhdCB3aWxsLCBvZnRlbiB3aXRoIGEgbG9uZ2VyIGR1cmF0aW9uIHRoYW4gaXMgbm9ybWFsIGZvciB0aGF0IHNwZWxsLiBNaWdodGllciBnZW5pZXMgY2FuIGNhc3QgdGhlIHRydWUgcG9seW1vcnBoIHNwZWxsIG9uZSB0byB0aHJlZSB0aW1lcyBwZXIgZGF5LCBwb3NzaWJseSB3aXRoIGEgbG9uZ2VyIGR1cmF0aW9uIHRoYW4gbm9ybWFsLiBTdWNoIGdlbmllcyBjYW4gY2hhbmdlIG9ubHkgdGhlaXIgb3duIHNoYXBlLCBidXQgYSByYXJlIGZldyBjYW4gdXNlIHRoZSBzcGVsbCBvbiBvdGhlciBjcmVhdHVyZXMgYW5kIG9iamVjdHMgYXMgd2VsbC5cXG5XaXNoZXMuXFxuVGhlIGdlbmllIHBvd2VyIHRvIGdyYW50IHdpc2hlcyBpcyBsZWdlbmRhcnkgYW1vbmcgbW9ydGFscy4gT25seSB0aGUgbW9zdCBwb3RlbnQgZ2VuaWVzLCBzdWNoIGFzIHRob3NlIGFtb25nIHRoZSBub2JpbGl0eSwgY2FuIGRvIHNvLiBBIHBhcnRpY3VsYXIgZ2VuaWUgdGhhdCBoYXMgdGhpcyBwb3dlciBjYW4gZ3JhbnQgb25lIHRvIHRocmVlIHdpc2hlcyB0byBhIGNyZWF0dXJlIHRoYXQgaXNuJ3QgYSBnZW5pZS4gT25jZSBhIGdlbmllIGhhcyBncmFudGVkIGl0cyBsaW1pdCBvZiB3aXNoZXMsIGl0IGNhbid0IGdyYW50IHdpc2hlcyBhZ2FpbiBmb3Igc29tZSBhbW91bnQgb2YgdGltZSAodXN1YWxseSAxIHllYXIpLiBhbmQgY29zbWljIGxhdyBkaWN0YXRlcyB0aGF0IHRoZSBzYW1lIGdlbmllIGNhbiBleHBlbmQgaXRzIGxpbWl0IG9mIHdpc2hlcyBvbiBhIHNwZWNpZmljIGNyZWF0dXJlIG9ubHkgb25jZSBpbiB0aGF0IGNyZWF0dXJlJ3MgZXhpc3RlbmNlLlxcblRvIGJlIGdyYW50ZWQgYSB3aXNoLCBhIGNyZWF0dXJlIHdpdGhpbiA2MCBmZWV0IG9mIHRoZSBnZW5pZSBzdGF0ZXMgYSBkZXNpcmVkIGVmZmVjdCB0byBpdC4gVGhlIGdlbmllIGNhbiB0aGVuIGNhc3QgdGhlIHdpc2ggc3BlbGwgb24gdGhlIGNyZWF0dXJlJ3MgYmVoYWxmIHRvIGJyaW5nIGFib3V0IHRoZSBlZmZlY3QuIERlcGVuZGluZyBvbiB0aGUgZ2VuaWUncyBuYXR1cmUsIHRoZSBnZW5pZSBtaWdodCB0cnkgdG8gcGVydmVydCB0aGUgaW50ZW50IG9mIHRoZSB3aXNoIGJ5IGV4cGxvaXRpbmcgdGhlIHdpc2gncyBwb29yIHdvcmRpbmcuIFRoZSBwZXJ2ZXJzaW9uIG9mIHRoZSB3b3JkaW5nIGlzIHVzdWFsbHkgY3JhZnRlZCB0byBiZSB0byB0aGUgZ2VuaWUncyBiZW5lZml0LlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGVmcmVldGkgbWFrZXMgdHdvIHNjaW1pdGFyIGF0dGFja3Mgb3IgdXNlcyBpdHMgSHVybCBGbGFtZSB0d2ljZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJTY2ltaXRhclwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICsxMCB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDEzICgyZDYgKyA2KSBzbGFzaGluZyBkYW1hZ2UgcGx1cyA3ICgyZDYpIGZpcmUgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDEwLFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIyZDYgKyAyZDZcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiA2LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJIdXJsIEZsYW1lXCIsXG5cdFx0XHRcdGRlc2M6IFwiUmFuZ2VkIFNwZWxsIEF0dGFjazogKzcgdG8gaGl0LCByYW5nZSAxMjAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDE3ICg1ZDYpIGZpcmUgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDcsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjVkNlwiLFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJFbGVwaGFudFwiLFxuXHRcdHNpemU6IFwiSHVnZVwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcImJlYXN0XCIsXG5cdFx0c3VidHlwZTogXCJcIixcblx0XHRhbGlnbm1lbnQ6IFwidW5hbGlnbmVkXCIsXG5cdFx0YWM6IDEyLFxuXHRcdGhwOiA3Nixcblx0XHRoaXRfZGljZTogXCI4ZDEyXCIsXG5cdFx0c3BlZWQ6IFwiNDAgZnQuXCIsXG5cdFx0c3RhdHM6IFsyMiwgOSwgMTcsIDMsIDExLCA2XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcblx0XHRzZW5zZXM6IFwicGFzc2l2ZSBQZXJjZXB0aW9uIDEwXCIsXG5cdFx0bGFuZ3VhZ2VzOiBcIlwiLFxuXHRcdGNyOiBcIjRcIixcblx0XHR0cmFpdHM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJUcmFtcGxpbmcgQ2hhcmdlXCIsXG5cdFx0XHRcdGRlc2M6IFwiSWYgdGhlIGVsZXBoYW50IG1vdmVzIGF0IGxlYXN0IDIwIGZ0LiBzdHJhaWdodCB0b3dhcmQgYSBjcmVhdHVyZSBhbmQgdGhlbiBoaXRzIGl0IHdpdGggYSBnb3JlIGF0dGFjayBvbiB0aGUgc2FtZSB0dXJuLCB0aGF0IHRhcmdldCBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxMiBTdHJlbmd0aCBzYXZpbmcgdGhyb3cgb3IgYmUga25vY2tlZCBwcm9uZS4gSWYgdGhlIHRhcmdldCBpcyBwcm9uZSwgdGhlIGVsZXBoYW50IGNhbiBtYWtlIG9uZSBzdG9tcCBhdHRhY2sgYWdhaW5zdCBpdCBhcyBhIGJvbnVzIGFjdGlvbi5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJHb3JlXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzggdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxOSAoM2Q4ICsgNikgcGllcmNpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDgsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjNkOFwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDYsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlN0b21wXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzggdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHByb25lIGNyZWF0dXJlLiBIaXQ6IDIyICgzZDEwICsgNikgYmx1ZGdlb25pbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDgsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjNkMTBcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiA2LFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJFbGtcIixcblx0XHRzaXplOiBcIkxhcmdlXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwiYmVhc3RcIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcblx0XHRhYzogMTAsXG5cdFx0aHA6IDEzLFxuXHRcdGhpdF9kaWNlOiBcIjJkMTBcIixcblx0XHRzcGVlZDogXCI1MCBmdC5cIixcblx0XHRzdGF0czogWzE2LCAxMCwgMTIsIDIsIDEwLCA2XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcblx0XHRzZW5zZXM6IFwicGFzc2l2ZSBQZXJjZXB0aW9uIDEwXCIsXG5cdFx0bGFuZ3VhZ2VzOiBcIlwiLFxuXHRcdGNyOiBcIjEvNFwiLFxuXHRcdHRyYWl0czogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkNoYXJnZVwiLFxuXHRcdFx0XHRkZXNjOiBcIklmIHRoZSBlbGsgbW92ZXMgYXQgbGVhc3QgMjAgZnQuIHN0cmFpZ2h0IHRvd2FyZCBhIHRhcmdldCBhbmQgdGhlbiBoaXRzIGl0IHdpdGggYSByYW0gYXR0YWNrIG9uIHRoZSBzYW1lIHR1cm4sIHRoZSB0YXJnZXQgdGFrZXMgYW4gZXh0cmEgNyAoMmQ2KSBkYW1hZ2UuIElmIHRoZSB0YXJnZXQgaXMgYSBjcmVhdHVyZSwgaXQgbXVzdCBzdWNjZWVkIG9uIGEgREMgMTMgU3RyZW5ndGggc2F2aW5nIHRocm93IG9yIGJlIGtub2NrZWQgcHJvbmUuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMmQ2XCIsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlJhbVwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs1IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogNiAoMWQ2ICsgMykgYmx1ZGdlb25pbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkhvb3Zlc1wiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs1IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSBwcm9uZSBjcmVhdHVyZS4gSGl0OiA4ICgyZDQgKyAzKSBibHVkZ2VvbmluZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiRXJpbnllc1wiLFxuXHRcdHNpemU6IFwiTWVkaXVtXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwiZmllbmRcIixcblx0XHRzdWJ0eXBlOiBcImRldmlsXCIsXG5cdFx0YWxpZ25tZW50OiBcImxhd2Z1bCBldmlsXCIsXG5cdFx0YWM6IDE4LFxuXHRcdGhwOiAxNTMsXG5cdFx0aGl0X2RpY2U6IFwiMThkOFwiLFxuXHRcdHNwZWVkOiBcIjMwIGZ0LiwgZmx5IDYwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbMTgsIDE2LCAxOCwgMTQsIDE0LCAxOF0sXG5cdFx0c2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0ZGV4dGVyaXR5OiA3LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0Y29uc3RpdHV0aW9uOiA4LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0d2lzZG9tOiA2LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0Y2hhcmlzbWE6IDgsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6XG5cdFx0XHRcImNvbGQ7IGJsdWRnZW9uaW5nLCBwaWVyY2luZywgYW5kIHNsYXNoaW5nIGZyb20gbm9ubWFnaWNhbCB3ZWFwb25zIHRoYXQgYXJlbid0IHNpbHZlcmVkXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiZmlyZSwgcG9pc29uXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwicG9pc29uZWRcIixcblx0XHRzZW5zZXM6IFwidHJ1ZXNpZ2h0IDEyMCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxMlwiLFxuXHRcdGxhbmd1YWdlczogXCJJbmZlcm5hbCwgdGVsZXBhdGh5IDEyMCBmdC5cIixcblx0XHRjcjogXCIxMlwiLFxuXHRcdHRyYWl0czogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkhlbGxpc2ggV2VhcG9uc1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBlcmlueWVzJ3Mgd2VhcG9uIGF0dGFja3MgYXJlIG1hZ2ljYWwgYW5kIGRlYWwgYW4gZXh0cmEgMTMgKDNkOCkgcG9pc29uIGRhbWFnZSBvbiBhIGhpdCAoaW5jbHVkZWQgaW4gdGhlIGF0dGFja3MpLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIk1hZ2ljIFJlc2lzdGFuY2VcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgZXJpbnllcyBoYXMgYWR2YW50YWdlIG9uIHNhdmluZyB0aHJvd3MgYWdhaW5zdCBzcGVsbHMgYW5kIG90aGVyIG1hZ2ljYWwgZWZmZWN0cy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJNdWx0aWF0dGFja1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBlcmlueWVzIG1ha2VzIHRocmVlIGF0dGFja3NcIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJMb25nc3dvcmRcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArOCB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDggKDFkOCArIDQpIHNsYXNoaW5nIGRhbWFnZSwgb3IgOSAoMWQxMCArIDQpIHNsYXNoaW5nIGRhbWFnZSBpZiB1c2VkIHdpdGggdHdvIGhhbmRzLCBwbHVzIDEzICgzZDgpIHBvaXNvbiBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogOCxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMWQ4ICsgM2Q4XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogNCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTG9uZ2Jvd1wiLFxuXHRcdFx0XHRkZXNjOiBcIlJhbmdlZCBXZWFwb24gQXR0YWNrOiArNyB0byBoaXQsIHJhbmdlIDE1MC82MDAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDcgKDFkOCArIDMpIHBpZXJjaW5nIGRhbWFnZSBwbHVzIDEzICgzZDgpIHBvaXNvbiBkYW1hZ2UsIGFuZCB0aGUgdGFyZ2V0IG11c3Qgc3VjY2VlZCBvbiBhIERDIDE0IENvbnN0aXR1dGlvbiBzYXZpbmcgdGhyb3cgb3IgYmUgcG9pc29uZWQuIFRoZSBwb2lzb24gbGFzdHMgdW50aWwgaXQgaXMgcmVtb3ZlZCBieSB0aGUgbGVzc2VyIHJlc3RvcmF0aW9uIHNwZWxsIG9yIHNpbWlsYXIgbWFnaWMuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNyxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMWQ4ICsgM2Q4XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogMyxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiVmFyaWFudDogUm9wZSBvZiBFbnRhbmdsZW1lbnRcIixcblx0XHRcdFx0ZGVzYzogXCJTb21lIGVyaW55ZXMgY2FycnkgYSByb3BlIG9mIGVudGFuZ2xlbWVudCAoZGV0YWlsZWQgaW4gdGhlIER1bmdlb24gTWFzdGVyJ3MgR3VpZGUpLiBXaGVuIHN1Y2ggYW4gZXJpbnllcyB1c2VzIGl0cyBNdWx0aWF0dGFjaywgdGhlIGVyaW55ZXMgY2FuIHVzZSB0aGUgcm9wZSBpbiBwbGFjZSBvZiB0d28gb2YgdGhlIGF0dGFja3MuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRyZWFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJQYXJyeVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBlcmlueWVzIGFkZHMgNCB0byBpdHMgQUMgYWdhaW5zdCBvbmUgbWVsZWUgYXR0YWNrIHRoYXQgd291bGQgaGl0IGl0LiBUbyBkbyBzbywgdGhlIGVyaW55ZXMgbXVzdCBzZWUgdGhlIGF0dGFja2VyIGFuZCBiZSB3aWVsZGluZyBhIG1lbGVlIHdlYXBvbi5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJFdHRlcmNhcFwiLFxuXHRcdHNpemU6IFwiTWVkaXVtXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwibW9uc3Ryb3NpdHlcIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJuZXV0cmFsIGV2aWxcIixcblx0XHRhYzogMTMsXG5cdFx0aHA6IDQ0LFxuXHRcdGhpdF9kaWNlOiBcIjhkOFwiLFxuXHRcdHNwZWVkOiBcIjMwIGZ0LiwgY2xpbWIgMzAgZnQuXCIsXG5cdFx0c3RhdHM6IFsxNCwgMTUsIDEzLCA3LCAxMiwgOF0sXG5cdFx0c2tpbGxzYXZlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRwZXJjZXB0aW9uOiAzLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0c3RlYWx0aDogNCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHN1cnZpdmFsOiAzLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuXHRcdGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuXHRcdHNlbnNlczogXCJkYXJrdmlzaW9uIDYwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDEzXCIsXG5cdFx0bGFuZ3VhZ2VzOiBcIlwiLFxuXHRcdGNyOiBcIjJcIixcblx0XHR0cmFpdHM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJTcGlkZXIgQ2xpbWJcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgZXR0ZXJjYXAgY2FuIGNsaW1iIGRpZmZpY3VsdCBzdXJmYWNlcywgaW5jbHVkaW5nIHVwc2lkZSBkb3duIG9uIGNlaWxpbmdzLCB3aXRob3V0IG5lZWRpbmcgdG8gbWFrZSBhbiBhYmlsaXR5IGNoZWNrLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIldlYiBTZW5zZVwiLFxuXHRcdFx0XHRkZXNjOiBcIldoaWxlIGluIGNvbnRhY3Qgd2l0aCBhIHdlYiwgdGhlIGV0dGVyY2FwIGtub3dzIHRoZSBleGFjdCBsb2NhdGlvbiBvZiBhbnkgb3RoZXIgY3JlYXR1cmUgaW4gY29udGFjdCB3aXRoIHRoZSBzYW1lIHdlYi5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJXZWIgV2Fsa2VyXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGV0dGVyY2FwIGlnbm9yZXMgbW92ZW1lbnQgcmVzdHJpY3Rpb25zIGNhdXNlZCBieSB3ZWJiaW5nLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGV0dGVyY2FwIG1ha2VzIHR3byBhdHRhY2tzOiBvbmUgd2l0aCBpdHMgYml0ZSBhbmQgb25lIHdpdGggaXRzIGNsYXdzLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkJpdGVcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNCB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgY3JlYXR1cmUuIEhpdDogNiAoMWQ4ICsgMikgcGllcmNpbmcgZGFtYWdlIHBsdXMgNCAoMWQ4KSBwb2lzb24gZGFtYWdlLiBUaGUgdGFyZ2V0IG11c3Qgc3VjY2VlZCBvbiBhIERDIDExIENvbnN0aXR1dGlvbiBzYXZpbmcgdGhyb3cgb3IgYmUgcG9pc29uZWQgZm9yIDEgbWludXRlLiBUaGUgY3JlYXR1cmUgY2FuIHJlcGVhdCB0aGUgc2F2aW5nIHRocm93IGF0IHRoZSBlbmQgb2YgZWFjaCBvZiBpdHMgdHVybnMsIGVuZGluZyB0aGUgZWZmZWN0IG9uIGl0c2VsZiBvbiBhIHN1Y2Nlc3MuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNCxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMWQ4XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogMixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQ2xhd3NcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNCB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDcgKDJkNCArIDIpIHNsYXNoaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA0LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIyZDRcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiAyLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJXZWIgKFJlY2hhcmdlIDUtNilcIixcblx0XHRcdFx0ZGVzYzogXCJSYW5nZWQgV2VhcG9uIEF0dGFjazogKzQgdG8gaGl0LCByYW5nZSAzMC82MCBmdC4sIG9uZSBMYXJnZSBvciBzbWFsbGVyIGNyZWF0dXJlLiBIaXQ6IFRoZSBjcmVhdHVyZSBpcyByZXN0cmFpbmVkIGJ5IHdlYmJpbmcuIEFzIGFuIGFjdGlvbiwgdGhlIHJlc3RyYWluZWQgY3JlYXR1cmUgY2FuIG1ha2UgYSBEQyAxMSBTdHJlbmd0aCBjaGVjaywgZXNjYXBpbmcgZnJvbSB0aGUgd2ViYmluZyBvbiBhIHN1Y2Nlc3MuIFRoZSBlZmZlY3QgZW5kcyBpZiB0aGUgd2ViYmluZyBpcyBkZXN0cm95ZWQuIFRoZSB3ZWJiaW5nIGhhcyBBQyAxMCwgNSBoaXQgcG9pbnRzLCBpcyB2dWxuZXJhYmxlIHRvIGZpcmUgZGFtYWdlIGFuZCBpbW11bmUgdG8gYmx1ZGdlb25pbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlZhcmlhbnQ6IFdlYiBHYXJyb3RlXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzQgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIE1lZGl1bSBvciBTbWFsbCBjcmVhdHVyZSBhZ2FpbnN0IHdoaWNoIHRoZSBldHRlcmNhcCBoYXMgYWR2YW50YWdlIG9uIHRoZSBhdHRhY2sgcm9sbC4gSGl0OiA0ICgxZDQgKyAyKSBibHVkZ2VvbmluZyBkYW1hZ2UsIGFuZCB0aGUgdGFyZ2V0IGlzIGdyYXBwbGVkIChlc2NhcGUgREMgMTIpLiBVbnRpbCB0aGlzIGdyYXBwbGUgZW5kcywgdGhlIHRhcmdldCBjYW4ndCBicmVhdGhlLCBhbmQgdGhlIGV0dGVyY2FwIGhhcyBhZHZhbnRhZ2Ugb24gYXR0YWNrIHJvbGxzIGFnYWluc3QgaXQuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNCxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMWQ0XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogMixcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiRXR0aW5cIixcblx0XHRzaXplOiBcIkxhcmdlXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwiZ2lhbnRcIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJjaGFvdGljIGV2aWxcIixcblx0XHRhYzogMTIsXG5cdFx0aHA6IDg1LFxuXHRcdGhpdF9kaWNlOiBcIjEwZDEwXCIsXG5cdFx0c3BlZWQ6IFwiNDAgZnQuXCIsXG5cdFx0c3RhdHM6IFsyMSwgOCwgMTcsIDYsIDEwLCA4XSxcblx0XHRza2lsbHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdHBlcmNlcHRpb246IDQsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0c2Vuc2VzOiBcImRhcmt2aXNpb24gNjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTRcIixcblx0XHRsYW5ndWFnZXM6IFwiR2lhbnQsIE9yY1wiLFxuXHRcdGNyOiBcIjRcIixcblx0XHR0cmFpdHM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJUd28gSGVhZHNcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgZXR0aW4gaGFzIGFkdmFudGFnZSBvbiBXaXNkb20gKFBlcmNlcHRpb24pIGNoZWNrcyBhbmQgb24gc2F2aW5nIHRocm93cyBhZ2FpbnN0IGJlaW5nIGJsaW5kZWQsIGNoYXJtZWQsIGRlYWZlbmVkLCBmcmlnaHRlbmVkLCBzdHVubmVkLCBhbmQga25vY2tlZCB1bmNvbnNjaW91cy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJXYWtlZnVsXCIsXG5cdFx0XHRcdGRlc2M6IFwiV2hlbiBvbmUgb2YgdGhlIGV0dGluJ3MgaGVhZHMgaXMgYXNsZWVwLCBpdHMgb3RoZXIgaGVhZCBpcyBhd2FrZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJNdWx0aWF0dGFja1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBldHRpbiBtYWtlcyB0d28gYXR0YWNrczogb25lIHdpdGggaXRzIGJhdHRsZWF4ZSBhbmQgb25lIHdpdGggaXRzIG1vcm5pbmdzdGFyLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkJhdHRsZWF4ZVwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs3IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTQgKDJkOCArIDUpIHNsYXNoaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA3LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIyZDhcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiA1LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJNb3JuaW5nc3RhclwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs3IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTQgKDJkOCArIDUpIHBpZXJjaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA3LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIyZDhcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiA1LFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJGaXJlIEVsZW1lbnRhbFwiLFxuXHRcdHNpemU6IFwiTGFyZ2VcIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJlbGVtZW50YWxcIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJuZXV0cmFsXCIsXG5cdFx0YWM6IDEzLFxuXHRcdGhwOiAxMDIsXG5cdFx0aGl0X2RpY2U6IFwiMTJkMTBcIixcblx0XHRzcGVlZDogXCI1MCBmdC5cIixcblx0XHRzdGF0czogWzEwLCAxNywgMTYsIDYsIDEwLCA3XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczpcblx0XHRcdFwiYmx1ZGdlb25pbmcsIHBpZXJjaW5nLCBhbmQgc2xhc2hpbmcgZnJvbSBub25tYWdpY2FsIHdlYXBvbnNcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJmaXJlLCBwb2lzb25cIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczpcblx0XHRcdFwiZXhoYXVzdGlvbiwgZ3JhcHBsZWQsIHBhcmFseXplZCwgcGV0cmlmaWVkLCBwb2lzb25lZCwgcHJvbmUsIHJlc3RyYWluZWQsIHVuY29uc2Npb3VzXCIsXG5cdFx0c2Vuc2VzOiBcImRhcmt2aXNpb24gNjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTBcIixcblx0XHRsYW5ndWFnZXM6IFwiSWduYW5cIixcblx0XHRjcjogXCI1XCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiRmlyZSBGb3JtXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGVsZW1lbnRhbCBjYW4gbW92ZSB0aHJvdWdoIGEgc3BhY2UgYXMgbmFycm93IGFzIDEgaW5jaCB3aWRlIHdpdGhvdXQgc3F1ZWV6aW5nLiBBIGNyZWF0dXJlIHRoYXQgdG91Y2hlcyB0aGUgZWxlbWVudGFsIG9yIGhpdHMgaXQgd2l0aCBhIG1lbGVlIGF0dGFjayB3aGlsZSB3aXRoaW4gNSBmdC4gb2YgaXQgdGFrZXMgNSAoMWQxMCkgZmlyZSBkYW1hZ2UuIEluIGFkZGl0aW9uLCB0aGUgZWxlbWVudGFsIGNhbiBlbnRlciBhIGhvc3RpbGUgY3JlYXR1cmUncyBzcGFjZSBhbmQgc3RvcCB0aGVyZS4gVGhlIGZpcnN0IHRpbWUgaXQgZW50ZXJzIGEgY3JlYXR1cmUncyBzcGFjZSBvbiBhIHR1cm4sIHRoYXQgY3JlYXR1cmUgdGFrZXMgNSAoMWQxMCkgZmlyZSBkYW1hZ2UgYW5kIGNhdGNoZXMgZmlyZTsgdW50aWwgc29tZW9uZSB0YWtlcyBhbiBhY3Rpb24gdG8gZG91c2UgdGhlIGZpcmUsIHRoZSBjcmVhdHVyZSB0YWtlcyA1ICgxZDEwKSBmaXJlIGRhbWFnZSBhdCB0aGUgc3RhcnQgb2YgZWFjaCBvZiBpdHMgdHVybnMuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiNWQxMFwiLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJJbGx1bWluYXRpb25cIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgZWxlbWVudGFsIHNoZWRzIGJyaWdodCBsaWdodCBpbiBhIDMwLWZvb3QgcmFkaXVzIGFuZCBkaW0gbGlnaHQgaW4gYW4gYWRkaXRpb25hbCAzMCBmdC4uXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiV2F0ZXIgU3VzY2VwdGliaWxpdHlcIixcblx0XHRcdFx0ZGVzYzogXCJGb3IgZXZlcnkgNSBmdC4gdGhlIGVsZW1lbnRhbCBtb3ZlcyBpbiB3YXRlciwgb3IgZm9yIGV2ZXJ5IGdhbGxvbiBvZiB3YXRlciBzcGxhc2hlZCBvbiBpdCwgaXQgdGFrZXMgMSBjb2xkIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJNdWx0aWF0dGFja1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBlbGVtZW50YWwgbWFrZXMgdHdvIHRvdWNoIGF0dGFja3MuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiVG91Y2hcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNiB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDEwICgyZDYgKyAzKSBmaXJlIGRhbWFnZS4gSWYgdGhlIHRhcmdldCBpcyBhIGNyZWF0dXJlIG9yIGEgZmxhbW1hYmxlIG9iamVjdCwgaXQgaWduaXRlcy4gVW50aWwgYSBjcmVhdHVyZSB0YWtlcyBhbiBhY3Rpb24gdG8gZG91c2UgdGhlIGZpcmUsIHRoZSB0YXJnZXQgdGFrZXMgNSAoMWQxMCkgZmlyZSBkYW1hZ2UgYXQgdGhlIHN0YXJ0IG9mIGVhY2ggb2YgaXRzIHR1cm5zLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDYsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjJkNlwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDMsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIkZpcmUgR2lhbnRcIixcblx0XHRzaXplOiBcIkh1Z2VcIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJnaWFudFwiLFxuXHRcdHN1YnR5cGU6IFwiXCIsXG5cdFx0YWxpZ25tZW50OiBcImxhd2Z1bCBldmlsXCIsXG5cdFx0YWM6IDE4LFxuXHRcdGhwOiAxNjIsXG5cdFx0aGl0X2RpY2U6IFwiMTNkMTJcIixcblx0XHRzcGVlZDogXCIzMCBmdC5cIixcblx0XHRzdGF0czogWzI1LCA5LCAyMywgMTAsIDE0LCAxM10sXG5cdFx0c2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0ZGV4dGVyaXR5OiAzLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0Y29uc3RpdHV0aW9uOiAxMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdGNoYXJpc21hOiA1LFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdHNraWxsc2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0YXRobGV0aWNzOiAxMSxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHBlcmNlcHRpb246IDYsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiZmlyZVwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuXHRcdHNlbnNlczogXCJwYXNzaXZlIFBlcmNlcHRpb24gMTZcIixcblx0XHRsYW5ndWFnZXM6IFwiR2lhbnRcIixcblx0XHRjcjogXCI5XCIsXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGdpYW50IG1ha2VzIHR3byBncmVhdHN3b3JkIGF0dGFja3MuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiR3JlYXRzd29yZFwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICsxMSB0byBoaXQsIHJlYWNoIDEwIGZ0Liwgb25lIHRhcmdldC4gSGl0OiAyOCAoNmQ2ICsgNykgc2xhc2hpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDExLFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCI2ZDZcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiA3LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJSb2NrXCIsXG5cdFx0XHRcdGRlc2M6IFwiUmFuZ2VkIFdlYXBvbiBBdHRhY2s6ICsxMSB0byBoaXQsIHJhbmdlIDYwLzI0MCBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMjkgKDRkMTAgKyA3KSBibHVkZ2VvbmluZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMTEsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjRkMTBcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiA3LFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJGbGVzaCBHb2xlbVwiLFxuXHRcdHNpemU6IFwiTWVkaXVtXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwiY29uc3RydWN0XCIsXG5cdFx0c3VidHlwZTogXCJcIixcblx0XHRhbGlnbm1lbnQ6IFwibmV1dHJhbFwiLFxuXHRcdGFjOiA5LFxuXHRcdGhwOiA5Myxcblx0XHRoaXRfZGljZTogXCIxMWQ4XCIsXG5cdFx0c3BlZWQ6IFwiMzAgZnQuXCIsXG5cdFx0c3RhdHM6IFsxOSwgOSwgMTgsIDYsIDEwLCA1XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczpcblx0XHRcdFwibGlnaHRuaW5nLCBwb2lzb247IGJsdWRnZW9uaW5nLCBwaWVyY2luZywgYW5kIHNsYXNoaW5nIGZyb20gbm9ubWFnaWNhbCB3ZWFwb25zIHRoYXQgYXJlbid0IGFkYW1hbnRpbmVcIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczpcblx0XHRcdFwiY2hhcm1lZCwgZXhoYXVzdGlvbiwgZnJpZ2h0ZW5lZCwgcGFyYWx5emVkLCBwZXRyaWZpZWQsIHBvaXNvbmVkXCIsXG5cdFx0c2Vuc2VzOiBcImRhcmt2aXNpb24gNjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTBcIixcblx0XHRsYW5ndWFnZXM6IFwidW5kZXJzdGFuZHMgdGhlIGxhbmd1YWdlcyBvZiBpdHMgY3JlYXRvciBidXQgY2FuJ3Qgc3BlYWtcIixcblx0XHRjcjogXCI1XCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQmVyc2Vya1wiLFxuXHRcdFx0XHRkZXNjOiBcIldoZW5ldmVyIHRoZSBnb2xlbSBzdGFydHMgaXRzIHR1cm4gd2l0aCA0MCBoaXQgcG9pbnRzIG9yIGZld2VyLCByb2xsIGEgZDYuIE9uIGEgNiwgdGhlIGdvbGVtIGdvZXMgYmVyc2Vyay4gT24gZWFjaCBvZiBpdHMgdHVybnMgd2hpbGUgYmVyc2VyaywgdGhlIGdvbGVtIGF0dGFja3MgdGhlIG5lYXJlc3QgY3JlYXR1cmUgaXQgY2FuIHNlZS4gSWYgbm8gY3JlYXR1cmUgaXMgbmVhciBlbm91Z2ggdG8gbW92ZSB0byBhbmQgYXR0YWNrLCB0aGUgZ29sZW0gYXR0YWNrcyBhbiBvYmplY3QsIHdpdGggcHJlZmVyZW5jZSBmb3IgYW4gb2JqZWN0IHNtYWxsZXIgdGhhbiBpdHNlbGYuIE9uY2UgdGhlIGdvbGVtIGdvZXMgYmVyc2VyaywgaXQgY29udGludWVzIHRvIGRvIHNvIHVudGlsIGl0IGlzIGRlc3Ryb3llZCBvciByZWdhaW5zIGFsbCBpdHMgaGl0IHBvaW50cy5cXG5UaGUgZ29sZW0ncyBjcmVhdG9yLCBpZiB3aXRoaW4gNjAgZmVldCBvZiB0aGUgYmVyc2VyayBnb2xlbSwgY2FuIHRyeSB0byBjYWxtIGl0IGJ5IHNwZWFraW5nIGZpcm1seSBhbmQgcGVyc3Vhc2l2ZWx5LiBUaGUgZ29sZW0gbXVzdCBiZSBhYmxlIHRvIGhlYXIgaXRzIGNyZWF0b3IsIHdobyBtdXN0IHRha2UgYW4gYWN0aW9uIHRvIG1ha2UgYSBEQyAxNSBDaGFyaXNtYSAoUGVyc3Vhc2lvbikgY2hlY2suIElmIHRoZSBjaGVjayBzdWNjZWVkcywgdGhlIGdvbGVtIGNlYXNlcyBiZWluZyBiZXJzZXJrLiBJZiBpdCB0YWtlcyBkYW1hZ2Ugd2hpbGUgc3RpbGwgYXQgNDAgaGl0IHBvaW50cyBvciBmZXdlciwgdGhlIGdvbGVtIG1pZ2h0IGdvIGJlcnNlcmsgYWdhaW4uXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQXZlcnNpb24gb2YgRmlyZVwiLFxuXHRcdFx0XHRkZXNjOiBcIklmIHRoZSBnb2xlbSB0YWtlcyBmaXJlIGRhbWFnZSwgaXQgaGFzIGRpc2FkdmFudGFnZSBvbiBhdHRhY2sgcm9sbHMgYW5kIGFiaWxpdHkgY2hlY2tzIHVudGlsIHRoZSBlbmQgb2YgaXRzIG5leHQgdHVybi5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJJbW11dGFibGUgRm9ybVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBnb2xlbSBpcyBpbW11bmUgdG8gYW55IHNwZWxsIG9yIGVmZmVjdCB0aGF0IHdvdWxkIGFsdGVyIGl0cyBmb3JtLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkxpZ2h0bmluZyBBYnNvcnB0aW9uXCIsXG5cdFx0XHRcdGRlc2M6IFwiV2hlbmV2ZXIgdGhlIGdvbGVtIGlzIHN1YmplY3RlZCB0byBsaWdodG5pbmcgZGFtYWdlLCBpdCB0YWtlcyBubyBkYW1hZ2UgYW5kIGluc3RlYWQgcmVnYWlucyBhIG51bWJlciBvZiBoaXQgcG9pbnRzIGVxdWFsIHRvIHRoZSBsaWdodG5pbmcgZGFtYWdlIGRlYWx0LlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIk1hZ2ljIFJlc2lzdGFuY2VcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgZ29sZW0gaGFzIGFkdmFudGFnZSBvbiBzYXZpbmcgdGhyb3dzIGFnYWluc3Qgc3BlbGxzIGFuZCBvdGhlciBtYWdpY2FsIGVmZmVjdHMuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTWFnaWMgV2VhcG9uc1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBnb2xlbSdzIHdlYXBvbiBhdHRhY2tzIGFyZSBtYWdpY2FsLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGdvbGVtIG1ha2VzIHR3byBzbGFtIGF0dGFja3MuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiU2xhbVwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs3IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTMgKDJkOCArIDQpIGJsdWRnZW9uaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA3LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIyZDhcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiA0LFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJGbHlpbmcgU25ha2VcIixcblx0XHRzaXplOiBcIlRpbnlcIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJiZWFzdFwiLFxuXHRcdHN1YnR5cGU6IFwiXCIsXG5cdFx0YWxpZ25tZW50OiBcInVuYWxpZ25lZFwiLFxuXHRcdGFjOiAxNCxcblx0XHRocDogNSxcblx0XHRoaXRfZGljZTogXCIyZDRcIixcblx0XHRzcGVlZDogXCIzMCBmdC4sIGZseSA2MCBmdC4sIHN3aW0gMzAgZnQuXCIsXG5cdFx0c3RhdHM6IFs0LCAxOCwgMTEsIDIsIDEyLCA1XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcblx0XHRzZW5zZXM6IFwiYmxpbmRzaWdodCAxMCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxMVwiLFxuXHRcdGxhbmd1YWdlczogXCJcIixcblx0XHRjcjogXCIxLzhcIixcblx0XHR0cmFpdHM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJGbHlieVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBzbmFrZSBkb2Vzbid0IHByb3Zva2Ugb3Bwb3J0dW5pdHkgYXR0YWNrcyB3aGVuIGl0IGZsaWVzIG91dCBvZiBhbiBlbmVteSdzIHJlYWNoLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkJpdGVcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNiB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDEgcGllcmNpbmcgZGFtYWdlIHBsdXMgNyAoM2Q0KSBwb2lzb24gZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDYsXG5cdFx0XHRcdGRhbWFnZV9ib251czogMSxcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiRmx5aW5nIFN3b3JkXCIsXG5cdFx0c2l6ZTogXCJTbWFsbFwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcImNvbnN0cnVjdFwiLFxuXHRcdHN1YnR5cGU6IFwiXCIsXG5cdFx0YWxpZ25tZW50OiBcInVuYWxpZ25lZFwiLFxuXHRcdGFjOiAxNyxcblx0XHRocDogMTcsXG5cdFx0aGl0X2RpY2U6IFwiNWQ2XCIsXG5cdFx0c3BlZWQ6IFwiMCBmdC4sIGZseSA1MCBmdC4gSXQgY2FuIGhvdmVyLlwiLFxuXHRcdHN0YXRzOiBbMTIsIDE1LCAxMSwgMSwgNSwgMV0sXG5cdFx0c2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0ZGV4dGVyaXR5OiA0LFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuXHRcdGRhbWFnZV9pbW11bml0aWVzOiBcInBvaXNvbiwgcHN5Y2hpY1wiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOlxuXHRcdFx0XCJibGluZGVkLCBjaGFybWVkLCBkZWFmZW5lZCwgZnJpZ2h0ZW5lZCwgcGFyYWx5emVkLCBwZXRyaWZpZWQsIHBvaXNvbmVkXCIsXG5cdFx0c2Vuc2VzOiBcImJsaW5kc2lnaHQgNjAgZnQuIChibGluZCBiZXlvbmQgdGhpcyByYWRpdXMpLCBwYXNzaXZlIFBlcmNlcHRpb24gN1wiLFxuXHRcdGxhbmd1YWdlczogXCJcIixcblx0XHRjcjogXCIxLzRcIixcblx0XHR0cmFpdHM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJBbnRpbWFnaWMgU3VzY2VwdGliaWxpdHlcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgc3dvcmQgaXMgaW5jYXBhY2l0YXRlZCB3aGlsZSBpbiB0aGUgYXJlYSBvZiBhbiBhbnRpbWFnaWMgZmllbGQuIElmIHRhcmdldGVkIGJ5IGRpc3BlbCBtYWdpYywgdGhlIHN3b3JkIG11c3Qgc3VjY2VlZCBvbiBhIENvbnN0aXR1dGlvbiBzYXZpbmcgdGhyb3cgYWdhaW5zdCB0aGUgY2FzdGVyJ3Mgc3BlbGwgc2F2ZSBEQyBvciBmYWxsIHVuY29uc2Npb3VzIGZvciAxIG1pbnV0ZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJGYWxzZSBBcHBlYXJhbmNlXCIsXG5cdFx0XHRcdGRlc2M6IFwiV2hpbGUgdGhlIHN3b3JkIHJlbWFpbnMgbW90aW9ubGVzcyBhbmQgaXNuJ3QgZmx5aW5nLCBpdCBpcyBpbmRpc3Rpbmd1aXNoYWJsZSBmcm9tIGEgbm9ybWFsIHN3b3JkLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkxvbmdzd29yZFwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICszIHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogNSAoMWQ4ICsgMSkgc2xhc2hpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDMsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjFkOFwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDEsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIkZyb2dcIixcblx0XHRzaXplOiBcIlRpbnlcIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJiZWFzdFwiLFxuXHRcdHN1YnR5cGU6IFwiXCIsXG5cdFx0YWxpZ25tZW50OiBcInVuYWxpZ25lZFwiLFxuXHRcdGFjOiAxMSxcblx0XHRocDogMSxcblx0XHRoaXRfZGljZTogXCIxZDRcIixcblx0XHRzcGVlZDogXCIyMCBmdC4sIHN3aW0gMjAgZnQuXCIsXG5cdFx0c3RhdHM6IFsxLCAxMywgOCwgMSwgOCwgM10sXG5cdFx0c2tpbGxzYXZlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRwZXJjZXB0aW9uOiAxLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0c3RlYWx0aDogMyxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcblx0XHRzZW5zZXM6IFwiZGFya3Zpc2lvbiAzMCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxMVwiLFxuXHRcdGxhbmd1YWdlczogXCJcIixcblx0XHRjcjogXCIwXCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQW1waGliaW91c1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBmcm9nIGNhbiBicmVhdGhlIGFpciBhbmQgd2F0ZXJcIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJTdGFuZGluZyBMZWFwXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGZyb2cncyBsb25nIGp1bXAgaXMgdXAgdG8gMTAgZnQuIGFuZCBpdHMgaGlnaCBqdW1wIGlzIHVwIHRvIDUgZnQuLCB3aXRoIG9yIHdpdGhvdXQgYSBydW5uaW5nIHN0YXJ0LlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIkZyb3N0IEdpYW50XCIsXG5cdFx0c2l6ZTogXCJIdWdlXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwiZ2lhbnRcIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJuZXV0cmFsIGV2aWxcIixcblx0XHRhYzogMTUsXG5cdFx0aHA6IDEzOCxcblx0XHRoaXRfZGljZTogXCIxMmQxMlwiLFxuXHRcdHNwZWVkOiBcIjQwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbMjMsIDksIDIxLCA5LCAxMCwgMTJdLFxuXHRcdHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdGNvbnN0aXR1dGlvbjogOCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHdpc2RvbTogMyxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdGNoYXJpc21hOiA0LFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdHNraWxsc2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0YXRobGV0aWNzOiA5LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0cGVyY2VwdGlvbjogMyxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJjb2xkXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0c2Vuc2VzOiBcInBhc3NpdmUgUGVyY2VwdGlvbiAxM1wiLFxuXHRcdGxhbmd1YWdlczogXCJHaWFudFwiLFxuXHRcdGNyOiBcIjhcIixcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgZ2lhbnQgbWFrZXMgdHdvIGdyZWF0YXhlIGF0dGFja3MuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiR3JlYXRheGVcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArOSB0byBoaXQsIHJlYWNoIDEwIGZ0Liwgb25lIHRhcmdldC4gSGl0OiAyNSAoM2QxMiArIDYpIHNsYXNoaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA5LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIzZDEyXCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogNixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiUm9ja1wiLFxuXHRcdFx0XHRkZXNjOiBcIlJhbmdlZCBXZWFwb24gQXR0YWNrOiArOSB0byBoaXQsIHJhbmdlIDYwLzI0MCBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMjggKDRkMTAgKyA2KSBibHVkZ2VvbmluZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogOSxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiNGQxMFwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDYsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIkdhcmdveWxlXCIsXG5cdFx0c2l6ZTogXCJNZWRpdW1cIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJlbGVtZW50YWxcIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJjaGFvdGljIGV2aWxcIixcblx0XHRhYzogMTUsXG5cdFx0aHA6IDUyLFxuXHRcdGhpdF9kaWNlOiBcIjdkOFwiLFxuXHRcdHNwZWVkOiBcIjMwIGZ0LiwgZmx5IDYwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbMTUsIDExLCAxNiwgNiwgMTEsIDddLFxuXHRcdGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX3Jlc2lzdGFuY2VzOlxuXHRcdFx0XCJibHVkZ2VvbmluZywgcGllcmNpbmcsIGFuZCBzbGFzaGluZyBmcm9tIG5vbm1hZ2ljYWwgd2VhcG9ucyB0aGF0IGFyZW4ndCBhZGFtYW50aW5lXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwicG9pc29uXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiZXhoYXVzdGlvbiwgcGV0cmlmaWVkLCBwb2lzb25lZFwiLFxuXHRcdHNlbnNlczogXCJkYXJrdmlzaW9uIDYwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDEwXCIsXG5cdFx0bGFuZ3VhZ2VzOiBcIlRlcnJhblwiLFxuXHRcdGNyOiBcIjJcIixcblx0XHR0cmFpdHM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJGYWxzZSBBcHBlYXJhbmNlXCIsXG5cdFx0XHRcdGRlc2M6IFwiV2hpbGUgdGhlIGdhcmdveWxlIHJlbWFpbnMgbW90aW9uIGxlc3MsIGl0IGlzIGluZGlzdGluZ3Vpc2hhYmxlIGZyb20gYW4gaW5hbmltYXRlIHN0YXR1ZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJNdWx0aWF0dGFja1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBnYXJnb3lsZSBtYWtlcyB0d28gYXR0YWNrczogb25lIHdpdGggaXRzIGJpdGUgYW5kIG9uZSB3aXRoIGl0cyBjbGF3cy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJCaXRlXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzQgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiA1ICgxZDYgKyAyKSBwaWVyY2luZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNCxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMWQ2XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogMixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQ2xhd3NcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNCB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDUgKDFkNiArIDIpIHNsYXNoaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA0LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxZDZcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiAyLFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJHZWxhdGlub3VzIEN1YmVcIixcblx0XHRzaXplOiBcIkxhcmdlXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwib296ZVwiLFxuXHRcdHN1YnR5cGU6IFwiXCIsXG5cdFx0YWxpZ25tZW50OiBcInVuYWxpZ25lZFwiLFxuXHRcdGFjOiA2LFxuXHRcdGhwOiA4NCxcblx0XHRoaXRfZGljZTogXCI4ZDEwXCIsXG5cdFx0c3BlZWQ6IFwiMTUgZnQuXCIsXG5cdFx0c3RhdHM6IFsxNCwgMywgMjAsIDEsIDYsIDFdLFxuXHRcdGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuXHRcdGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOlxuXHRcdFx0XCJibGluZGVkLCBjaGFybWVkLCBkZWFmZW5lZCwgZXhoYXVzdGlvbiwgZnJpZ2h0ZW5lZCwgcHJvbmVcIixcblx0XHRzZW5zZXM6IFwiYmxpbmRzaWdodCA2MCBmdC4gKGJsaW5kIGJleW9uZCB0aGlzIHJhZGl1cyksIHBhc3NpdmUgUGVyY2VwdGlvbiA4XCIsXG5cdFx0bGFuZ3VhZ2VzOiBcIlwiLFxuXHRcdGNyOiBcIjJcIixcblx0XHR0cmFpdHM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJPb3plIEN1YmVcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgY3ViZSB0YWtlcyB1cCBpdHMgZW50aXJlIHNwYWNlLiBPdGhlciBjcmVhdHVyZXMgY2FuIGVudGVyIHRoZSBzcGFjZSwgYnV0IGEgY3JlYXR1cmUgdGhhdCBkb2VzIHNvIGlzIHN1YmplY3RlZCB0byB0aGUgY3ViZSdzIEVuZ3VsZiBhbmQgaGFzIGRpc2FkdmFudGFnZSBvbiB0aGUgc2F2aW5nIHRocm93LlxcbkNyZWF0dXJlcyBpbnNpZGUgdGhlIGN1YmUgY2FuIGJlIHNlZW4gYnV0IGhhdmUgdG90YWwgY292ZXIuXFxuQSBjcmVhdHVyZSB3aXRoaW4gNSBmZWV0IG9mIHRoZSBjdWJlIGNhbiB0YWtlIGFuIGFjdGlvbiB0byBwdWxsIGEgY3JlYXR1cmUgb3Igb2JqZWN0IG91dCBvZiB0aGUgY3ViZS4gRG9pbmcgc28gcmVxdWlyZXMgYSBzdWNjZXNzZnVsIERDIDEyIFN0cmVuZ3RoIGNoZWNrLCBhbmQgdGhlIGNyZWF0dXJlIG1ha2luZyB0aGUgYXR0ZW1wdCB0YWtlcyAxMCAoM2Q2KSBhY2lkIGRhbWFnZS5cXG5UaGUgY3ViZSBjYW4gaG9sZCBvbmx5IG9uZSBMYXJnZSBjcmVhdHVyZSBvciB1cCB0byBmb3VyIE1lZGl1bSBvciBzbWFsbGVyIGNyZWF0dXJlcyBpbnNpZGUgaXQgYXQgYSB0aW1lLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlRyYW5zcGFyZW50XCIsXG5cdFx0XHRcdGRlc2M6IFwiRXZlbiB3aGVuIHRoZSBjdWJlIGlzIGluIHBsYWluIHNpZ2h0LCBpdCB0YWtlcyBhIHN1Y2Nlc3NmdWwgREMgMTUgV2lzZG9tIChQZXJjZXB0aW9uKSBjaGVjayB0byBzcG90IGEgY3ViZSB0aGF0IGhhcyBuZWl0aGVyIG1vdmVkIG5vciBhdHRhY2tlZC4gQSBjcmVhdHVyZSB0aGF0IHRyaWVzIHRvIGVudGVyIHRoZSBjdWJlJ3Mgc3BhY2Ugd2hpbGUgdW5hd2FyZSBvZiB0aGUgY3ViZSBpcyBzdXJwcmlzZWQgYnkgdGhlIGN1YmUuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiUHNldWRvcG9kXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzQgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIGNyZWF0dXJlLiBIaXQ6IDEwICgzZDYpIGFjaWQgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDQsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjNkNlwiLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJFbmd1bGZcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgY3ViZSBtb3ZlcyB1cCB0byBpdHMgc3BlZWQuIFdoaWxlIGRvaW5nIHNvLCBpdCBjYW4gZW50ZXIgTGFyZ2Ugb3Igc21hbGxlciBjcmVhdHVyZXMnIHNwYWNlcy4gV2hlbmV2ZXIgdGhlIGN1YmUgZW50ZXJzIGEgY3JlYXR1cmUncyBzcGFjZSwgdGhlIGNyZWF0dXJlIG11c3QgbWFrZSBhIERDIDEyIERleHRlcml0eSBzYXZpbmcgdGhyb3cuXFxuT24gYSBzdWNjZXNzZnVsIHNhdmUsIHRoZSBjcmVhdHVyZSBjYW4gY2hvb3NlIHRvIGJlIHB1c2hlZCA1IGZlZXQgYmFjayBvciB0byB0aGUgc2lkZSBvZiB0aGUgY3ViZS4gQSBjcmVhdHVyZSB0aGF0IGNob29zZXMgbm90IHRvIGJlIHB1c2hlZCBzdWZmZXJzIHRoZSBjb25zZXF1ZW5jZXMgb2YgYSBmYWlsZWQgc2F2aW5nIHRocm93Llxcbk9uIGEgZmFpbGVkIHNhdmUsIHRoZSBjdWJlIGVudGVycyB0aGUgY3JlYXR1cmUncyBzcGFjZSwgYW5kIHRoZSBjcmVhdHVyZSB0YWtlcyAxMCAoM2Q2KSBhY2lkIGRhbWFnZSBhbmQgaXMgZW5ndWxmZWQuIFRoZSBlbmd1bGZlZCBjcmVhdHVyZSBjYW4ndCBicmVhdGhlLCBpcyByZXN0cmFpbmVkLCBhbmQgdGFrZXMgMjEgKDZkNikgYWNpZCBkYW1hZ2UgYXQgdGhlIHN0YXJ0IG9mIGVhY2ggb2YgdGhlIGN1YmUncyB0dXJucy4gV2hlbiB0aGUgY3ViZSBtb3ZlcywgdGhlIGVuZ3VsZmVkIGNyZWF0dXJlIG1vdmVzIHdpdGggaXQuXFxuQW4gZW5ndWxmZWQgY3JlYXR1cmUgY2FuIHRyeSB0byBlc2NhcGUgYnkgdGFraW5nIGFuIGFjdGlvbiB0byBtYWtlIGEgREMgMTIgU3RyZW5ndGggY2hlY2suIE9uIGEgc3VjY2VzcywgdGhlIGNyZWF0dXJlIGVzY2FwZXMgYW5kIGVudGVycyBhIHNwYWNlIG9mIGl0cyBjaG9pY2Ugd2l0aGluIDUgZmVldCBvZiB0aGUgY3ViZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJHaGFzdFwiLFxuXHRcdHNpemU6IFwiTWVkaXVtXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwidW5kZWFkXCIsXG5cdFx0c3VidHlwZTogXCJcIixcblx0XHRhbGlnbm1lbnQ6IFwiY2hhb3RpYyBldmlsXCIsXG5cdFx0YWM6IDEzLFxuXHRcdGhwOiAzNixcblx0XHRoaXRfZGljZTogXCI4ZDhcIixcblx0XHRzcGVlZDogXCIzMCBmdC5cIixcblx0XHRzdGF0czogWzE2LCAxNywgMTAsIDExLCAxMCwgOF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwibmVjcm90aWNcIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczogXCJwb2lzb25lZFwiLFxuXHRcdHNlbnNlczogXCJkYXJrdmlzaW9uIDYwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDEwXCIsXG5cdFx0bGFuZ3VhZ2VzOiBcIkNvbW1vblwiLFxuXHRcdGNyOiBcIjJcIixcblx0XHR0cmFpdHM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJTdGVuY2hcIixcblx0XHRcdFx0ZGVzYzogXCJBbnkgY3JlYXR1cmUgdGhhdCBzdGFydHMgaXRzIHR1cm4gd2l0aGluIDUgZnQuIG9mIHRoZSBnaGFzdCBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxMCBDb25zdGl0dXRpb24gc2F2aW5nIHRocm93IG9yIGJlIHBvaXNvbmVkIHVudGlsIHRoZSBzdGFydCBvZiBpdHMgbmV4dCB0dXJuLiBPbiBhIHN1Y2Nlc3NmdWwgc2F2aW5nIHRocm93LCB0aGUgY3JlYXR1cmUgaXMgaW1tdW5lIHRvIHRoZSBnaGFzdCdzIFN0ZW5jaCBmb3IgMjQgaG91cnMuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiVHVybiBEZWZpYW5jZVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBnaGFzdCBhbmQgYW55IGdob3VscyB3aXRoaW4gMzAgZnQuIG9mIGl0IGhhdmUgYWR2YW50YWdlIG9uIHNhdmluZyB0aHJvd3MgYWdhaW5zdCBlZmZlY3RzIHRoYXQgdHVybiB1bmRlYWQuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQml0ZVwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICszIHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSBjcmVhdHVyZS4gSGl0OiAxMiAoMmQ4ICsgMykgcGllcmNpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDMsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjJkOFwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDMsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkNsYXdzXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzUgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxMCAoMmQ2ICsgMykgc2xhc2hpbmcgZGFtYWdlLiBJZiB0aGUgdGFyZ2V0IGlzIGEgY3JlYXR1cmUgb3RoZXIgdGhhbiBhbiB1bmRlYWQsIGl0IG11c3Qgc3VjY2VlZCBvbiBhIERDIDEwIENvbnN0aXR1dGlvbiBzYXZpbmcgdGhyb3cgb3IgYmUgcGFyYWx5emVkIGZvciAxIG1pbnV0ZS4gVGhlIHRhcmdldCBjYW4gcmVwZWF0IHRoZSBzYXZpbmcgdGhyb3cgYXQgdGhlIGVuZCBvZiBlYWNoIG9mIGl0cyB0dXJucywgZW5kaW5nIHRoZSBlZmZlY3Qgb24gaXRzZWxmIG9uIGEgc3VjY2Vzcy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA1LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIyZDZcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiAzLFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJHaG9zdFwiLFxuXHRcdHNpemU6IFwiTWVkaXVtXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwidW5kZWFkXCIsXG5cdFx0c3VidHlwZTogXCJcIixcblx0XHRhbGlnbm1lbnQ6IFwiYW55IGFsaWdubWVudFwiLFxuXHRcdGFjOiAxMSxcblx0XHRocDogNDUsXG5cdFx0aGl0X2RpY2U6IFwiMTBkOFwiLFxuXHRcdHNwZWVkOiBcIjAgZnQuLCBmbHkgNDAgZnQuIEl0IGNhbiBob3Zlci5cIixcblx0XHRzdGF0czogWzcsIDEzLCAxMCwgMTAsIDEyLCAxN10sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6XG5cdFx0XHRcImFjaWQsIGZpcmUsIGxpZ2h0bmluZywgdGh1bmRlcjsgYmx1ZGdlb25pbmcsIHBpZXJjaW5nLCBhbmQgc2xhc2hpbmcgZnJvbSBub25tYWdpY2FsIHdlYXBvbnNcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJjb2xkLCBuZWNyb3RpYywgcG9pc29uXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6XG5cdFx0XHRcImNoYXJtZWQsIGV4aGF1c3Rpb24sIGZyaWdodGVuZWQsIGdyYXBwbGVkLCBwYXJhbHl6ZWQsIHBldHJpZmllZCwgcG9pc29uZWQsIHByb25lLCByZXN0cmFpbmVkXCIsXG5cdFx0c2Vuc2VzOiBcImRhcmt2aXNpb24gNjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTFcIixcblx0XHRsYW5ndWFnZXM6IFwiYW55IGxhbmd1YWdlcyBpdCBrbmV3IGluIGxpZmVcIixcblx0XHRjcjogXCI0XCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiRXRoZXJlYWwgU2lnaHRcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgZ2hvc3QgY2FuIHNlZSA2MCBmdC4gaW50byB0aGUgRXRoZXJlYWwgUGxhbmUgd2hlbiBpdCBpcyBvbiB0aGUgTWF0ZXJpYWwgUGxhbmUsIGFuZCB2aWNlIHZlcnNhLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkluY29ycG9yZWFsIE1vdmVtZW50XCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGdob3N0IGNhbiBtb3ZlIHRocm91Z2ggb3RoZXIgY3JlYXR1cmVzIGFuZCBvYmplY3RzIGFzIGlmIHRoZXkgd2VyZSBkaWZmaWN1bHQgdGVycmFpbi4gSXQgdGFrZXMgNSAoMWQxMCkgZm9yY2UgZGFtYWdlIGlmIGl0IGVuZHMgaXRzIHR1cm4gaW5zaWRlIGFuIG9iamVjdC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJXaXRoZXJpbmcgVG91Y2hcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNSB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDE3ICg0ZDYgKyAzKSBuZWNyb3RpYyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNSxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiNGQ2XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogMyxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiRXRoZXJlYWxuZXNzXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGdob3N0IGVudGVycyB0aGUgRXRoZXJlYWwgUGxhbmUgZnJvbSB0aGUgTWF0ZXJpYWwgUGxhbmUsIG9yIHZpY2UgdmVyc2EuIEl0IGlzIHZpc2libGUgb24gdGhlIE1hdGVyaWFsIFBsYW5lIHdoaWxlIGl0IGlzIGluIHRoZSBCb3JkZXIgRXRoZXJlYWwsIGFuZCB2aWNlIHZlcnNhLCB5ZXQgaXQgY2FuJ3QgYWZmZWN0IG9yIGJlIGFmZmVjdGVkIGJ5IGFueXRoaW5nIG9uIHRoZSBvdGhlciBwbGFuZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJIb3JyaWZ5aW5nIFZpc2FnZVwiLFxuXHRcdFx0XHRkZXNjOiBcIkVhY2ggbm9uLXVuZGVhZCBjcmVhdHVyZSB3aXRoaW4gNjAgZnQuIG9mIHRoZSBnaG9zdCB0aGF0IGNhbiBzZWUgaXQgbXVzdCBzdWNjZWVkIG9uIGEgREMgMTMgV2lzZG9tIHNhdmluZyB0aHJvdyBvciBiZSBmcmlnaHRlbmVkIGZvciAxIG1pbnV0ZS4gSWYgdGhlIHNhdmUgZmFpbHMgYnkgNSBvciBtb3JlLCB0aGUgdGFyZ2V0IGFsc28gYWdlcyAxZDQgXyAxMCB5ZWFycy4gQSBmcmlnaHRlbmVkIHRhcmdldCBjYW4gcmVwZWF0IHRoZSBzYXZpbmcgdGhyb3cgYXQgdGhlIGVuZCBvZiBlYWNoIG9mIGl0cyB0dXJucywgZW5kaW5nIHRoZSBmcmlnaHRlbmVkIGNvbmRpdGlvbiBvbiBpdHNlbGYgb24gYSBzdWNjZXNzLiBJZiBhIHRhcmdldCdzIHNhdmluZyB0aHJvdyBpcyBzdWNjZXNzZnVsIG9yIHRoZSBlZmZlY3QgZW5kcyBmb3IgaXQsIHRoZSB0YXJnZXQgaXMgaW1tdW5lIHRvIHRoaXMgZ2hvc3QncyBIb3JyaWZ5aW5nIFZpc2FnZSBmb3IgdGhlIG5leHQgMjQgaG91cnMuIFRoZSBhZ2luZyBlZmZlY3QgY2FuIGJlIHJldmVyc2VkIHdpdGggYSBncmVhdGVyIHJlc3RvcmF0aW9uIHNwZWxsLCBidXQgb25seSB3aXRoaW4gMjQgaG91cnMgb2YgaXQgb2NjdXJyaW5nLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlBvc3Nlc3Npb24gKFJlY2hhcmdlIDYpXCIsXG5cdFx0XHRcdGRlc2M6IFwiT25lIGh1bWFub2lkIHRoYXQgdGhlIGdob3N0IGNhbiBzZWUgd2l0aGluIDUgZnQuIG9mIGl0IG11c3Qgc3VjY2VlZCBvbiBhIERDIDEzIENoYXJpc21hIHNhdmluZyB0aHJvdyBvciBiZSBwb3NzZXNzZWQgYnkgdGhlIGdob3N0OyB0aGUgZ2hvc3QgdGhlbiBkaXNhcHBlYXJzLCBhbmQgdGhlIHRhcmdldCBpcyBpbmNhcGFjaXRhdGVkIGFuZCBsb3NlcyBjb250cm9sIG9mIGl0cyBib2R5LiBUaGUgZ2hvc3Qgbm93IGNvbnRyb2xzIHRoZSBib2R5IGJ1dCBkb2Vzbid0IGRlcHJpdmUgdGhlIHRhcmdldCBvZiBhd2FyZW5lc3MuIFRoZSBnaG9zdCBjYW4ndCBiZSB0YXJnZXRlZCBieSBhbnkgYXR0YWNrLCBzcGVsbCwgb3Igb3RoZXIgZWZmZWN0LCBleGNlcHQgb25lcyB0aGF0IHR1cm4gdW5kZWFkLCBhbmQgaXQgcmV0YWlucyBpdHMgYWxpZ25tZW50LCBJbnRlbGxpZ2VuY2UsIFdpc2RvbSwgQ2hhcmlzbWEsIGFuZCBpbW11bml0eSB0byBiZWluZyBjaGFybWVkIGFuZCBmcmlnaHRlbmVkLiBJdCBvdGhlcndpc2UgdXNlcyB0aGUgcG9zc2Vzc2VkIHRhcmdldCdzIHN0YXRpc3RpY3MsIGJ1dCBkb2Vzbid0IGdhaW4gYWNjZXNzIHRvIHRoZSB0YXJnZXQncyBrbm93bGVkZ2UsIGNsYXNzIGZlYXR1cmVzLCBvciBwcm9maWNpZW5jaWVzLlxcblRoZSBwb3NzZXNzaW9uIGxhc3RzIHVudGlsIHRoZSBib2R5IGRyb3BzIHRvIDAgaGl0IHBvaW50cywgdGhlIGdob3N0IGVuZHMgaXQgYXMgYSBib251cyBhY3Rpb24sIG9yIHRoZSBnaG9zdCBpcyB0dXJuZWQgb3IgZm9yY2VkIG91dCBieSBhbiBlZmZlY3QgbGlrZSB0aGUgZGlzcGVsIGV2aWwgYW5kIGdvb2Qgc3BlbGwuIFdoZW4gdGhlIHBvc3Nlc3Npb24gZW5kcywgdGhlIGdob3N0IHJlYXBwZWFycyBpbiBhbiB1bm9jY3VwaWVkIHNwYWNlIHdpdGhpbiA1IGZ0LiBvZiB0aGUgYm9keS4gVGhlIHRhcmdldCBpcyBpbW11bmUgdG8gdGhpcyBnaG9zdCdzIFBvc3Nlc3Npb24gZm9yIDI0IGhvdXJzIGFmdGVyIHN1Y2NlZWRpbmcgb24gdGhlIHNhdmluZyB0aHJvdyBvciBhZnRlciB0aGUgcG9zc2Vzc2lvbiBlbmRzLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIkdob3VsXCIsXG5cdFx0c2l6ZTogXCJNZWRpdW1cIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJ1bmRlYWRcIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJjaGFvdGljIGV2aWxcIixcblx0XHRhYzogMTIsXG5cdFx0aHA6IDIyLFxuXHRcdGhpdF9kaWNlOiBcIjVkOFwiLFxuXHRcdHNwZWVkOiBcIjMwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbMTMsIDE1LCAxMCwgNywgMTAsIDZdLFxuXHRcdGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuXHRcdGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcInBvaXNvbmVkXCIsXG5cdFx0c2Vuc2VzOiBcImRhcmt2aXNpb24gNjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTBcIixcblx0XHRsYW5ndWFnZXM6IFwiQ29tbW9uXCIsXG5cdFx0Y3I6IFwiMVwiLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJCaXRlXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzIgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIGNyZWF0dXJlLiBIaXQ6IDkgKDJkNiArIDIpIHBpZXJjaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAyLFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIyZDZcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiAyLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJDbGF3c1wiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs0IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogNyAoMmQ0ICsgMikgc2xhc2hpbmcgZGFtYWdlLiBJZiB0aGUgdGFyZ2V0IGlzIGEgY3JlYXR1cmUgb3RoZXIgdGhhbiBhbiBlbGYgb3IgdW5kZWFkLCBpdCBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxMCBDb25zdGl0dXRpb24gc2F2aW5nIHRocm93IG9yIGJlIHBhcmFseXplZCBmb3IgMSBtaW51dGUuIFRoZSB0YXJnZXQgY2FuIHJlcGVhdCB0aGUgc2F2aW5nIHRocm93IGF0IHRoZSBlbmQgb2YgZWFjaCBvZiBpdHMgdHVybnMsIGVuZGluZyB0aGUgZWZmZWN0IG9uIGl0c2VsZiBvbiBhIHN1Y2Nlc3MuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiR2lhbnQgQXBlXCIsXG5cdFx0c2l6ZTogXCJIdWdlXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwiYmVhc3RcIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcblx0XHRhYzogMTIsXG5cdFx0aHA6IDE1Nyxcblx0XHRoaXRfZGljZTogXCIxNWQxMlwiLFxuXHRcdHNwZWVkOiBcIjQwIGZ0LiwgY2xpbWIgNDAgZnQuXCIsXG5cdFx0c3RhdHM6IFsyMywgMTQsIDE4LCA3LCAxMiwgN10sXG5cdFx0c2tpbGxzYXZlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRhdGhsZXRpY3M6IDksXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRwZXJjZXB0aW9uOiA0LFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuXHRcdGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuXHRcdHNlbnNlczogXCJwYXNzaXZlIFBlcmNlcHRpb24gMTRcIixcblx0XHRsYW5ndWFnZXM6IFwiXCIsXG5cdFx0Y3I6IFwiN1wiLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJNdWx0aWF0dGFja1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBhcGUgbWFrZXMgdHdvIGZpc3QgYXR0YWNrcy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJGaXN0XCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzkgdG8gaGl0LCByZWFjaCAxMCBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMjIgKDNkMTAgKyA2KSBibHVkZ2VvbmluZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogOSxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiM2QxMFwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDYsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlJvY2tcIixcblx0XHRcdFx0ZGVzYzogXCJSYW5nZWQgV2VhcG9uIEF0dGFjazogKzkgdG8gaGl0LCByYW5nZSA1MC8xMDAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDMwICg3ZDYgKyA2KSBibHVkZ2VvbmluZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogOSxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiN2Q2XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogNixcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiR2lhbnQgQmFkZ2VyXCIsXG5cdFx0c2l6ZTogXCJNZWRpdW1cIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJiZWFzdFwiLFxuXHRcdHN1YnR5cGU6IFwiXCIsXG5cdFx0YWxpZ25tZW50OiBcInVuYWxpZ25lZFwiLFxuXHRcdGFjOiAxMCxcblx0XHRocDogMTMsXG5cdFx0aGl0X2RpY2U6IFwiMmQ4XCIsXG5cdFx0c3BlZWQ6IFwiMzAgZnQuLCBidXJyb3cgMTAgZnQuXCIsXG5cdFx0c3RhdHM6IFsxMywgMTAsIDE1LCAyLCAxMiwgNV0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0c2Vuc2VzOiBcImRhcmt2aXNpb24gMzAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTFcIixcblx0XHRsYW5ndWFnZXM6IFwiXCIsXG5cdFx0Y3I6IFwiMS80XCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiS2VlbiBTbWVsbFwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBiYWRnZXIgaGFzIGFkdmFudGFnZSBvbiBXaXNkb20gKFBlcmNlcHRpb24pIGNoZWNrcyB0aGF0IHJlbHkgb24gc21lbGwuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgYmFkZ2VyIG1ha2VzIHR3byBhdHRhY2tzOiBvbmUgd2l0aCBpdHMgYml0ZSBhbmQgb25lIHdpdGggaXRzIGNsYXdzLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkJpdGVcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMyB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDQgKDFkNiArIDEpIHBpZXJjaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAzLFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxZDZcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiAxLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJDbGF3c1wiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICszIHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogNiAoMmQ0ICsgMSkgc2xhc2hpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDMsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjJkNFwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDEsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIkdpYW50IEJhdFwiLFxuXHRcdHNpemU6IFwiTGFyZ2VcIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJiZWFzdFwiLFxuXHRcdHN1YnR5cGU6IFwiXCIsXG5cdFx0YWxpZ25tZW50OiBcInVuYWxpZ25lZFwiLFxuXHRcdGFjOiAxMyxcblx0XHRocDogMjIsXG5cdFx0aGl0X2RpY2U6IFwiNGQxMFwiLFxuXHRcdHNwZWVkOiBcIjEwIGZ0LiwgZmx5IDYwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbMTUsIDE2LCAxMSwgMiwgMTIsIDZdLFxuXHRcdGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuXHRcdGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuXHRcdHNlbnNlczogXCJibGluZHNpZ2h0IDYwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDExXCIsXG5cdFx0bGFuZ3VhZ2VzOiBcIlwiLFxuXHRcdGNyOiBcIjEvNFwiLFxuXHRcdHRyYWl0czogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkVjaG9sb2NhdGlvblwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBiYXQgY2FuJ3QgdXNlIGl0cyBibGluZHNpZ2h0IHdoaWxlIGRlYWZlbmVkLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIktlZW4gSGVhcmluZ1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBiYXQgaGFzIGFkdmFudGFnZSBvbiBXaXNkb20gKFBlcmNlcHRpb24pIGNoZWNrcyB0aGF0IHJlbHkgb24gaGVhcmluZy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJCaXRlXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzQgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIGNyZWF0dXJlLiBIaXQ6IDUgKDFkNiArIDIpIHBpZXJjaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA0LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxZDZcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiAyLFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJHaWFudCBCb2FyXCIsXG5cdFx0c2l6ZTogXCJMYXJnZVwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcImJlYXN0XCIsXG5cdFx0c3VidHlwZTogXCJcIixcblx0XHRhbGlnbm1lbnQ6IFwidW5hbGlnbmVkXCIsXG5cdFx0YWM6IDEyLFxuXHRcdGhwOiA0Mixcblx0XHRoaXRfZGljZTogXCI1ZDEwXCIsXG5cdFx0c3BlZWQ6IFwiNDAgZnQuXCIsXG5cdFx0c3RhdHM6IFsxNywgMTAsIDE2LCAyLCA3LCA1XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcblx0XHRzZW5zZXM6IFwicGFzc2l2ZSBQZXJjZXB0aW9uIDhcIixcblx0XHRsYW5ndWFnZXM6IFwiXCIsXG5cdFx0Y3I6IFwiMlwiLFxuXHRcdHRyYWl0czogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkNoYXJnZVwiLFxuXHRcdFx0XHRkZXNjOiBcIklmIHRoZSBib2FyIG1vdmVzIGF0IGxlYXN0IDIwIGZ0LiBzdHJhaWdodCB0b3dhcmQgYSB0YXJnZXQgYW5kIHRoZW4gaGl0cyBpdCB3aXRoIGEgdHVzayBhdHRhY2sgb24gdGhlIHNhbWUgdHVybiwgdGhlIHRhcmdldCB0YWtlcyBhbiBleHRyYSA3ICgyZDYpIHNsYXNoaW5nIGRhbWFnZS4gSWYgdGhlIHRhcmdldCBpcyBhIGNyZWF0dXJlLCBpdCBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxMyBTdHJlbmd0aCBzYXZpbmcgdGhyb3cgb3IgYmUga25vY2tlZCBwcm9uZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIyZDZcIixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiUmVsZW50bGVzcyAoUmVjaGFyZ2VzIGFmdGVyIGEgU2hvcnQgb3IgTG9uZyBSZXN0KVwiLFxuXHRcdFx0XHRkZXNjOiBcIklmIHRoZSBib2FyIHRha2VzIDEwIGRhbWFnZSBvciBsZXNzIHRoYXQgd291bGQgcmVkdWNlIGl0IHRvIDAgaGl0IHBvaW50cywgaXQgaXMgcmVkdWNlZCB0byAxIGhpdCBwb2ludCBpbnN0ZWFkLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlR1c2tcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNSB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDEwICgyZDYgKyAzKSBzbGFzaGluZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNSxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMmQ2XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogMyxcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiR2lhbnQgQ2VudGlwZWRlXCIsXG5cdFx0c2l6ZTogXCJTbWFsbFwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcImJlYXN0XCIsXG5cdFx0c3VidHlwZTogXCJcIixcblx0XHRhbGlnbm1lbnQ6IFwidW5hbGlnbmVkXCIsXG5cdFx0YWM6IDEzLFxuXHRcdGhwOiA0LFxuXHRcdGhpdF9kaWNlOiBcIjFkNlwiLFxuXHRcdHNwZWVkOiBcIjMwIGZ0LiwgY2xpbWIgMzAgZnQuXCIsXG5cdFx0c3RhdHM6IFs1LCAxNCwgMTIsIDEsIDcsIDNdLFxuXHRcdGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuXHRcdGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuXHRcdHNlbnNlczogXCJibGluZHNpZ2h0IDMwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDhcIixcblx0XHRsYW5ndWFnZXM6IFwiXCIsXG5cdFx0Y3I6IFwiMS80XCIsXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkJpdGVcIixcblx0XHRcdFx0ZGVzYzogXCJCaXRlLiBNZWxlZSBXZWFwb24gQXR0YWNrOiArNCB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgY3JlYXR1cmUuIEhpdDogNCAoMWQ0ICsgMikgcGllcmNpbmcgZGFtYWdlLCBhbmQgdGhlIHRhcmdldCBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxMSBDb25zdGl0dXRpb24gc2F2aW5nIHRocm93IG9yIHRha2UgMTAgKDNkNikgcG9pc29uIGRhbWFnZS4gSWYgdGhlIHBvaXNvbiBkYW1hZ2UgcmVkdWNlcyB0aGUgdGFyZ2V0IHRvIDAgaGl0IHBvaW50cywgdGhlIHRhcmdldCBpcyBzdGFibGUgYnV0IHBvaXNvbmVkIGZvciAxIGhvdXIsIGV2ZW4gYWZ0ZXIgcmVnYWluaW5nIGhpdCBwb2ludHMsIGFuZCBpcyBwYXJhbHl6ZWQgd2hpbGUgcG9pc29uZWQgaW4gdGhpcyB3YXkuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNCxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMWQ0XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogMixcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiR2lhbnQgQ29uc3RyaWN0b3IgU25ha2VcIixcblx0XHRzaXplOiBcIkh1Z2VcIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJiZWFzdFwiLFxuXHRcdHN1YnR5cGU6IFwiXCIsXG5cdFx0YWxpZ25tZW50OiBcInVuYWxpZ25lZFwiLFxuXHRcdGFjOiAxMixcblx0XHRocDogNjAsXG5cdFx0aGl0X2RpY2U6IFwiOGQxMlwiLFxuXHRcdHNwZWVkOiBcIjMwIGZ0Liwgc3dpbSAzMCBmdC5cIixcblx0XHRzdGF0czogWzE5LCAxNCwgMTIsIDEsIDEwLCAzXSxcblx0XHRza2lsbHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdHBlcmNlcHRpb246IDIsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0c2Vuc2VzOiBcImJsaW5kc2lnaHQgMTAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTJcIixcblx0XHRsYW5ndWFnZXM6IFwiXCIsXG5cdFx0Y3I6IFwiMlwiLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJCaXRlXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzYgdG8gaGl0LCByZWFjaCAxMCBmdC4sIG9uZSBjcmVhdHVyZS4gSGl0OiAxMSAoMmQ2ICsgNCkgcGllcmNpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDYsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjJkNlwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDQsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkNvbnN0cmljdFwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs2IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSBjcmVhdHVyZS4gSGl0OiAxMyAoMmQ4ICsgNCkgYmx1ZGdlb25pbmcgZGFtYWdlLCBhbmQgdGhlIHRhcmdldCBpcyBncmFwcGxlZCAoZXNjYXBlIERDIDE2KS4gVW50aWwgdGhpcyBncmFwcGxlIGVuZHMsIHRoZSBjcmVhdHVyZSBpcyByZXN0cmFpbmVkLCBhbmQgdGhlIHNuYWtlIGNhbid0IGNvbnN0cmljdCBhbm90aGVyIHRhcmdldC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA2LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIyZDhcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiA0LFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJHaWFudCBDcmFiXCIsXG5cdFx0c2l6ZTogXCJNZWRpdW1cIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJiZWFzdFwiLFxuXHRcdHN1YnR5cGU6IFwiXCIsXG5cdFx0YWxpZ25tZW50OiBcInVuYWxpZ25lZFwiLFxuXHRcdGFjOiAxNSxcblx0XHRocDogMTMsXG5cdFx0aGl0X2RpY2U6IFwiM2Q4XCIsXG5cdFx0c3BlZWQ6IFwiMzAgZnQuLCBzd2ltIDMwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbMTMsIDE1LCAxMSwgMSwgOSwgM10sXG5cdFx0c2tpbGxzYXZlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRzdGVhbHRoOiA0LFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuXHRcdGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuXHRcdHNlbnNlczogXCJibGluZHNpZ2h0IDMwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDlcIixcblx0XHRsYW5ndWFnZXM6IFwiXCIsXG5cdFx0Y3I6IFwiMS84XCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQW1waGliaW91c1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBjcmFiIGNhbiBicmVhdGhlIGFpciBhbmQgd2F0ZXIuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQ2xhd1wiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICszIHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogNCAoMWQ2ICsgMSkgYmx1ZGdlb25pbmcgZGFtYWdlLCBhbmQgdGhlIHRhcmdldCBpcyBncmFwcGxlZCAoZXNjYXBlIERDIDExKS4gVGhlIGNyYWIgaGFzIHR3byBjbGF3cywgZWFjaCBvZiB3aGljaCBjYW4gZ3JhcHBsZSBvbmx5IG9uZSB0YXJnZXQuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMyxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMWQ2XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogMSxcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiR2lhbnQgQ3JvY29kaWxlXCIsXG5cdFx0c2l6ZTogXCJIdWdlXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwiYmVhc3RcIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcblx0XHRhYzogMTQsXG5cdFx0aHA6IDg1LFxuXHRcdGhpdF9kaWNlOiBcIjlkMTJcIixcblx0XHRzcGVlZDogXCIzMCBmdC4sIHN3aW0gNTAgZnQuXCIsXG5cdFx0c3RhdHM6IFsyMSwgOSwgMTcsIDIsIDEwLCA3XSxcblx0XHRza2lsbHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdHN0ZWFsdGg6IDUsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0c2Vuc2VzOiBcInBhc3NpdmUgUGVyY2VwdGlvbiAxMFwiLFxuXHRcdGxhbmd1YWdlczogXCJcIixcblx0XHRjcjogXCI1XCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiSG9sZCBCcmVhdGhcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgY3JvY29kaWxlIGNhbiBob2xkIGl0cyBicmVhdGggZm9yIDMwIG1pbnV0ZXMuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgY3JvY29kaWxlIG1ha2VzIHR3byBhdHRhY2tzOiBvbmUgd2l0aCBpdHMgYml0ZSBhbmQgb25lIHdpdGggaXRzIHRhaWwuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQml0ZVwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs4IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMjEgKDNkMTAgKyA1KSBwaWVyY2luZyBkYW1hZ2UsIGFuZCB0aGUgdGFyZ2V0IGlzIGdyYXBwbGVkIChlc2NhcGUgREMgMTYpLiBVbnRpbCB0aGlzIGdyYXBwbGUgZW5kcywgdGhlIHRhcmdldCBpcyByZXN0cmFpbmVkLCBhbmQgdGhlIGNyb2NvZGlsZSBjYW4ndCBiaXRlIGFub3RoZXIgdGFyZ2V0LlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDgsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjNkMTBcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiA1LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJUYWlsXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzggdG8gaGl0LCByZWFjaCAxMCBmdC4sIG9uZSB0YXJnZXQgbm90IGdyYXBwbGVkIGJ5IHRoZSBjcm9jb2RpbGUuIEhpdDogMTQgKDJkOCArIDUpIGJsdWRnZW9uaW5nIGRhbWFnZS4gSWYgdGhlIHRhcmdldCBpcyBhIGNyZWF0dXJlLCBpdCBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxNiBTdHJlbmd0aCBzYXZpbmcgdGhyb3cgb3IgYmUga25vY2tlZCBwcm9uZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA4LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIyZDhcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiA1LFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJHaWFudCBFYWdsZVwiLFxuXHRcdHNpemU6IFwiTGFyZ2VcIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJiZWFzdFwiLFxuXHRcdHN1YnR5cGU6IFwiXCIsXG5cdFx0YWxpZ25tZW50OiBcIm5ldXRyYWwgZ29vZFwiLFxuXHRcdGFjOiAxMyxcblx0XHRocDogMjYsXG5cdFx0aGl0X2RpY2U6IFwiNGQxMFwiLFxuXHRcdHNwZWVkOiBcIjEwIGZ0LiwgZmx5IDgwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbMTYsIDE3LCAxMywgOCwgMTQsIDEwXSxcblx0XHRza2lsbHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdHBlcmNlcHRpb246IDQsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0c2Vuc2VzOiBcInBhc3NpdmUgUGVyY2VwdGlvbiAxNFwiLFxuXHRcdGxhbmd1YWdlczogXCJHaWFudCBFYWdsZSwgdW5kZXJzdGFuZHMgQ29tbW9uIGFuZCBBdXJhbiBidXQgY2FuJ3Qgc3BlYWtcIixcblx0XHRjcjogXCIxXCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiS2VlbiBTaWdodFwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBlYWdsZSBoYXMgYWR2YW50YWdlIG9uIFdpc2RvbSAoUGVyY2VwdGlvbikgY2hlY2tzIHRoYXQgcmVseSBvbiBzaWdodC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJNdWx0aWF0dGFja1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBlYWdsZSBtYWtlcyB0d28gYXR0YWNrczogb25lIHdpdGggaXRzIGJlYWsgYW5kIG9uZSB3aXRoIGl0cyB0YWxvbnMuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQmVha1wiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs1IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogNiAoMWQ2ICsgMykgcGllcmNpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDUsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjFkNlwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDMsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlRhbG9uc1wiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs1IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTAgKDJkNiArIDMpIHNsYXNoaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA1LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIyZDZcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiAzLFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJHaWFudCBFbGtcIixcblx0XHRzaXplOiBcIkh1Z2VcIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJiZWFzdFwiLFxuXHRcdHN1YnR5cGU6IFwiXCIsXG5cdFx0YWxpZ25tZW50OiBcInVuYWxpZ25lZFwiLFxuXHRcdGFjOiAxNSxcblx0XHRocDogNDIsXG5cdFx0aGl0X2RpY2U6IFwiNWQxMlwiLFxuXHRcdHNwZWVkOiBcIjYwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbMTksIDE2LCAxNCwgNywgMTQsIDEwXSxcblx0XHRza2lsbHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdHBlcmNlcHRpb246IDQsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0c2Vuc2VzOiBcInBhc3NpdmUgUGVyY2VwdGlvbiAxNFwiLFxuXHRcdGxhbmd1YWdlczpcblx0XHRcdFwiR2lhbnQgRWxrLCB1bmRlcnN0YW5kcyBDb21tb24sIEVsdmlzaCwgYW5kIFN5bHZhbiBidXQgY2FuJ3Qgc3BlYWtcIixcblx0XHRjcjogXCIyXCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQ2hhcmdlXCIsXG5cdFx0XHRcdGRlc2M6IFwiSWYgdGhlIGVsayBtb3ZlcyBhdCBsZWFzdCAyMCBmdC4gc3RyYWlnaHQgdG93YXJkIGEgdGFyZ2V0IGFuZCB0aGVuIGhpdHMgaXQgd2l0aCBhIHJhbSBhdHRhY2sgb24gdGhlIHNhbWUgdHVybiwgdGhlIHRhcmdldCB0YWtlcyBhbiBleHRyYSA3ICgyZDYpIGRhbWFnZS4gSWYgdGhlIHRhcmdldCBpcyBhIGNyZWF0dXJlLCBpdCBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxNCBTdHJlbmd0aCBzYXZpbmcgdGhyb3cgb3IgYmUga25vY2tlZCBwcm9uZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIyZDZcIixcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiUmFtXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzYgdG8gaGl0LCByZWFjaCAxMCBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTEgKDJkNiArIDQpIGJsdWRnZW9uaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA2LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIyZDZcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiA0LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJIb292ZXNcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNiB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgcHJvbmUgY3JlYXR1cmUuIEhpdDogMjIgKDRkOCArIDQpIGJsdWRnZW9uaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA2LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCI0ZDhcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiA0LFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJHaWFudCBGaXJlIEJlZXRsZVwiLFxuXHRcdHNpemU6IFwiU21hbGxcIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJiZWFzdFwiLFxuXHRcdHN1YnR5cGU6IFwiXCIsXG5cdFx0YWxpZ25tZW50OiBcInVuYWxpZ25lZFwiLFxuXHRcdGFjOiAxMyxcblx0XHRocDogNCxcblx0XHRoaXRfZGljZTogXCIxZDZcIixcblx0XHRzcGVlZDogXCIzMCBmdC5cIixcblx0XHRzdGF0czogWzgsIDEwLCAxMiwgMSwgNywgM10sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0c2Vuc2VzOiBcImJsaW5kc2lnaHQgMzAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gOFwiLFxuXHRcdGxhbmd1YWdlczogXCJcIixcblx0XHRjcjogXCIwXCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiSWxsdW1pbmF0aW9uXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGJlZXRsZSBzaGVkcyBicmlnaHQgbGlnaHQgaW4gYSAxMC1mb290IHJhZGl1cyBhbmQgZGltIGxpZ2h0IGZvciBhbiBhZGRpdGlvbmFsIDEwIGZ0Li5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJCaXRlXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzEgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAyICgxZDYgXHUyMDE0IDEpIHNsYXNoaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAxLFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxZDZcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiAtMSxcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiR2lhbnQgRnJvZ1wiLFxuXHRcdHNpemU6IFwiTWVkaXVtXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwiYmVhc3RcIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcblx0XHRhYzogMTEsXG5cdFx0aHA6IDE4LFxuXHRcdGhpdF9kaWNlOiBcIjRkOFwiLFxuXHRcdHNwZWVkOiBcIjMwIGZ0Liwgc3dpbSAzMCBmdC5cIixcblx0XHRzdGF0czogWzEyLCAxMywgMTEsIDIsIDEwLCAzXSxcblx0XHRza2lsbHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdHBlcmNlcHRpb246IDIsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRzdGVhbHRoOiAzLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuXHRcdGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuXHRcdHNlbnNlczogXCJkYXJrdmlzaW9uIDMwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDEyXCIsXG5cdFx0bGFuZ3VhZ2VzOiBcIlwiLFxuXHRcdGNyOiBcIjEvNFwiLFxuXHRcdHRyYWl0czogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkFtcGhpYmlvdXNcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgZnJvZyBjYW4gYnJlYXRoZSBhaXIgYW5kIHdhdGVyXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiU3RhbmRpbmcgTGVhcFwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBmcm9nJ3MgbG9uZyBqdW1wIGlzIHVwIHRvIDIwIGZ0LiBhbmQgaXRzIGhpZ2gganVtcCBpcyB1cCB0byAxMCBmdC4sIHdpdGggb3Igd2l0aG91dCBhIHJ1bm5pbmcgc3RhcnQuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQml0ZVwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICszIHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogNCAoMWQ2ICsgMSkgcGllcmNpbmcgZGFtYWdlLCBhbmQgdGhlIHRhcmdldCBpcyBncmFwcGxlZCAoZXNjYXBlIERDIDExKS4gVW50aWwgdGhpcyBncmFwcGxlIGVuZHMsIHRoZSB0YXJnZXQgaXMgcmVzdHJhaW5lZCwgYW5kIHRoZSBmcm9nIGNhbid0IGJpdGUgYW5vdGhlciB0YXJnZXQuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMyxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMWQ2XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogMSxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiU3dhbGxvd1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBmcm9nIG1ha2VzIG9uZSBiaXRlIGF0dGFjayBhZ2FpbnN0IGEgU21hbGwgb3Igc21hbGxlciB0YXJnZXQgaXQgaXMgZ3JhcHBsaW5nLiBJZiB0aGUgYXR0YWNrIGhpdHMsIHRoZSB0YXJnZXQgaXMgc3dhbGxvd2VkLCBhbmQgdGhlIGdyYXBwbGUgZW5kcy4gVGhlIHN3YWxsb3dlZCB0YXJnZXQgaXMgYmxpbmRlZCBhbmQgcmVzdHJhaW5lZCwgaXQgaGFzIHRvdGFsIGNvdmVyIGFnYWluc3QgYXR0YWNrcyBhbmQgb3RoZXIgZWZmZWN0cyBvdXRzaWRlIHRoZSBmcm9nLCBhbmQgaXQgdGFrZXMgNSAoMmQ0KSBhY2lkIGRhbWFnZSBhdCB0aGUgc3RhcnQgb2YgZWFjaCBvZiB0aGUgZnJvZydzIHR1cm5zLiBUaGUgZnJvZyBjYW4gaGF2ZSBvbmx5IG9uZSB0YXJnZXQgc3dhbGxvd2VkIGF0IGEgdGltZS4gSWYgdGhlIGZyb2cgZGllcywgYSBzd2FsbG93ZWQgY3JlYXR1cmUgaXMgbm8gbG9uZ2VyIHJlc3RyYWluZWQgYnkgaXQgYW5kIGNhbiBlc2NhcGUgZnJvbSB0aGUgY29ycHNlIHVzaW5nIDUgZnQuIG9mIG1vdmVtZW50LCBleGl0aW5nIHByb25lLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIkdpYW50IEdvYXRcIixcblx0XHRzaXplOiBcIkxhcmdlXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwiYmVhc3RcIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcblx0XHRhYzogMTEsXG5cdFx0aHA6IDE5LFxuXHRcdGhpdF9kaWNlOiBcIjNkMTBcIixcblx0XHRzcGVlZDogXCI0MCBmdC5cIixcblx0XHRzdGF0czogWzE3LCAxMSwgMTIsIDMsIDEyLCA2XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcblx0XHRzZW5zZXM6IFwicGFzc2l2ZSBQZXJjZXB0aW9uIDExXCIsXG5cdFx0bGFuZ3VhZ2VzOiBcIlwiLFxuXHRcdGNyOiBcIjEvMlwiLFxuXHRcdHRyYWl0czogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkNoYXJnZVwiLFxuXHRcdFx0XHRkZXNjOiBcIklmIHRoZSBnb2F0IG1vdmVzIGF0IGxlYXN0IDIwIGZ0LiBzdHJhaWdodCB0b3dhcmQgYSB0YXJnZXQgYW5kIHRoZW4gaGl0cyBpdCB3aXRoIGEgcmFtIGF0dGFjayBvbiB0aGUgc2FtZSB0dXJuLCB0aGUgdGFyZ2V0IHRha2VzIGFuIGV4dHJhIDUgKDJkNCkgYmx1ZGdlb25pbmcgZGFtYWdlLiBJZiB0aGUgdGFyZ2V0IGlzIGEgY3JlYXR1cmUsIGl0IG11c3Qgc3VjY2VlZCBvbiBhIERDIDEzIFN0cmVuZ3RoIHNhdmluZyB0aHJvdyBvciBiZSBrbm9ja2VkIHByb25lLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjJkNFwiLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJTdXJlLUZvb3RlZFwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBnb2F0IGhhcyBhZHZhbnRhZ2Ugb24gU3RyZW5ndGggYW5kIERleHRlcml0eSBzYXZpbmcgdGhyb3dzIG1hZGUgYWdhaW5zdCBlZmZlY3RzIHRoYXQgd291bGQga25vY2sgaXQgcHJvbmUuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiUmFtXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzUgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiA4ICgyZDQgKyAzKSBibHVkZ2VvbmluZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNSxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMmQ0XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogMyxcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiR2lhbnQgSHllbmFcIixcblx0XHRzaXplOiBcIkxhcmdlXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwiYmVhc3RcIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcblx0XHRhYzogMTIsXG5cdFx0aHA6IDQ1LFxuXHRcdGhpdF9kaWNlOiBcIjZkMTBcIixcblx0XHRzcGVlZDogXCI1MCBmdC5cIixcblx0XHRzdGF0czogWzE2LCAxNCwgMTQsIDIsIDEyLCA3XSxcblx0XHRza2lsbHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdHBlcmNlcHRpb246IDMsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0c2Vuc2VzOiBcInBhc3NpdmUgUGVyY2VwdGlvbiAxM1wiLFxuXHRcdGxhbmd1YWdlczogXCJcIixcblx0XHRjcjogXCIxXCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiUmFtcGFnZVwiLFxuXHRcdFx0XHRkZXNjOiBcIldoZW4gdGhlIGh5ZW5hIHJlZHVjZXMgYSBjcmVhdHVyZSB0byAwIGhpdCBwb2ludHMgd2l0aCBhIG1lbGVlIGF0dGFjayBvbiBpdHMgdHVybiwgdGhlIGh5ZW5hIGNhbiB0YWtlIGEgYm9udXMgYWN0aW9uIHRvIG1vdmUgdXAgdG8gaGFsZiBpdHMgc3BlZWQgYW5kIG1ha2UgYSBiaXRlIGF0dGFjay5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJCaXRlXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzUgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxMCAoMmQ2ICsgMykgcGllcmNpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDUsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjFkNlwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDMsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIkdpYW50IExpemFyZFwiLFxuXHRcdHNpemU6IFwiTGFyZ2VcIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJiZWFzdFwiLFxuXHRcdHN1YnR5cGU6IFwiXCIsXG5cdFx0YWxpZ25tZW50OiBcInVuYWxpZ25lZFwiLFxuXHRcdGFjOiAxMixcblx0XHRocDogMTksXG5cdFx0aGl0X2RpY2U6IFwiM2QxMFwiLFxuXHRcdHNwZWVkOiBcIjMwIGZ0LiwgY2xpbWIgMzAgZnQuXCIsXG5cdFx0c3RhdHM6IFsxNSwgMTIsIDEzLCAyLCAxMCwgNV0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0c2Vuc2VzOiBcImRhcmt2aXNpb24gMzAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTBcIixcblx0XHRsYW5ndWFnZXM6IFwiXCIsXG5cdFx0Y3I6IFwiMS80XCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiVmFyaWFudDogSG9sZCBCcmVhdGhcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgbGl6YXJkIGNhbiBob2xkIGl0cyBicmVhdGggZm9yIDE1IG1pbnV0ZXMuIChBIGxpemFyZCB0aGF0IGhhcyB0aGlzIHRyYWl0IGFsc28gaGFzIGEgc3dpbW1pbmcgc3BlZWQgb2YgMzAgZmVldC4pXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiVmFyaWFudDogU3BpZGVyIENsaW1iXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGxpemFyZCBjYW4gY2xpbWIgZGlmZmljdWx0IHN1cmZhY2VzLCBpbmNsdWRpbmcgdXBzaWRlIGRvd24gb24gY2VpbGluZ3MsIHdpdGhvdXQgbmVlZGluZyB0byBtYWtlIGFuIGFiaWxpdHkgY2hlY2suXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQml0ZVwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs0IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogNiAoMWQ4ICsgMikgcGllcmNpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDQsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjFkOFwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDIsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIkdpYW50IE9jdG9wdXNcIixcblx0XHRzaXplOiBcIkxhcmdlXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwiYmVhc3RcIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcblx0XHRhYzogMTEsXG5cdFx0aHA6IDUyLFxuXHRcdGhpdF9kaWNlOiBcIjhkMTBcIixcblx0XHRzcGVlZDogXCIxMCBmdC4sIHN3aW0gNjAgZnQuXCIsXG5cdFx0c3RhdHM6IFsxNywgMTMsIDEzLCA0LCAxMCwgNF0sXG5cdFx0c2tpbGxzYXZlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRwZXJjZXB0aW9uOiA0LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0c3RlYWx0aDogNSxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcblx0XHRzZW5zZXM6IFwiZGFya3Zpc2lvbiA2MCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxNFwiLFxuXHRcdGxhbmd1YWdlczogXCJcIixcblx0XHRjcjogXCIxXCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiSG9sZCBCcmVhdGhcIixcblx0XHRcdFx0ZGVzYzogXCJXaGlsZSBvdXQgb2Ygd2F0ZXIsIHRoZSBvY3RvcHVzIGNhbiBob2xkIGl0cyBicmVhdGggZm9yIDEgaG91ci5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJVbmRlcndhdGVyIENhbW91ZmxhZ2VcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgb2N0b3B1cyBoYXMgYWR2YW50YWdlIG9uIERleHRlcml0eSAoU3RlYWx0aCkgY2hlY2tzIG1hZGUgd2hpbGUgdW5kZXJ3YXRlci5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJXYXRlciBCcmVhdGhpbmdcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgb2N0b3B1cyBjYW4gYnJlYXRoZSBvbmx5IHVuZGVyd2F0ZXIuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiVGVudGFjbGVzXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzUgdG8gaGl0LCByZWFjaCAxNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTAgKDJkNiArIDMpIGJsdWRnZW9uaW5nIGRhbWFnZS4gSWYgdGhlIHRhcmdldCBpcyBhIGNyZWF0dXJlLCBpdCBpcyBncmFwcGxlZCAoZXNjYXBlIERDIDE2KS4gVW50aWwgdGhpcyBncmFwcGxlIGVuZHMsIHRoZSB0YXJnZXQgaXMgcmVzdHJhaW5lZCwgYW5kIHRoZSBvY3RvcHVzIGNhbid0IHVzZSBpdHMgdGVudGFjbGVzIG9uIGFub3RoZXIgdGFyZ2V0LlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDUsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjJkNlwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDMsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkluayBDbG91ZCAoUmVjaGFyZ2VzIGFmdGVyIGEgU2hvcnQgb3IgTG9uZyBSZXN0KVwiLFxuXHRcdFx0XHRkZXNjOiBcIkEgMjAtZm9vdC1yYWRpdXMgY2xvdWQgb2YgaW5rIGV4dGVuZHMgYWxsIGFyb3VuZCB0aGUgb2N0b3B1cyBpZiBpdCBpcyB1bmRlcndhdGVyLiBUaGUgYXJlYSBpcyBoZWF2aWx5IG9ic2N1cmVkIGZvciAxIG1pbnV0ZSwgYWx0aG91Z2ggYSBzaWduaWZpY2FudCBjdXJyZW50IGNhbiBkaXNwZXJzZSB0aGUgaW5rLiBBZnRlciByZWxlYXNpbmcgdGhlIGluaywgdGhlIG9jdG9wdXMgY2FuIHVzZSB0aGUgRGFzaCBhY3Rpb24gYXMgYSBib251cyBhY3Rpb24uXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiR2lhbnQgT3dsXCIsXG5cdFx0c2l6ZTogXCJMYXJnZVwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcImJlYXN0XCIsXG5cdFx0c3VidHlwZTogXCJcIixcblx0XHRhbGlnbm1lbnQ6IFwibmV1dHJhbFwiLFxuXHRcdGFjOiAxMixcblx0XHRocDogMTksXG5cdFx0aGl0X2RpY2U6IFwiM2QxMFwiLFxuXHRcdHNwZWVkOiBcIjUgZnQuLCBmbHkgNjAgZnQuXCIsXG5cdFx0c3RhdHM6IFsxMywgMTUsIDEyLCA4LCAxMywgMTBdLFxuXHRcdHNraWxsc2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0cGVyY2VwdGlvbjogNSxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHN0ZWFsdGg6IDQsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0c2Vuc2VzOiBcImRhcmt2aXNpb24gMTIwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDE1XCIsXG5cdFx0bGFuZ3VhZ2VzOlxuXHRcdFx0XCJHaWFudCBPd2wsIHVuZGVyc3RhbmRzIENvbW1vbiwgRWx2aXNoLCBhbmQgU3lsdmFuIGJ1dCBjYW4ndCBzcGVha1wiLFxuXHRcdGNyOiBcIjEvNFwiLFxuXHRcdHRyYWl0czogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkZseWJ5XCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIG93bCBkb2Vzbid0IHByb3Zva2Ugb3Bwb3J0dW5pdHkgYXR0YWNrcyB3aGVuIGl0IGZsaWVzIG91dCBvZiBhbiBlbmVteSdzIHJlYWNoLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIktlZW4gSGVhcmluZyBhbmQgU2lnaHRcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgb3dsIGhhcyBhZHZhbnRhZ2Ugb24gV2lzZG9tIChQZXJjZXB0aW9uKSBjaGVja3MgdGhhdCByZWx5IG9uIGhlYXJpbmcgb3Igc2lnaHQuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiVGFsb25zXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzMgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiA4ICgyZDYgKyAxKSBzbGFzaGluZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMyxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMmQ2XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogMSxcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiR2lhbnQgUG9pc29ub3VzIFNuYWtlXCIsXG5cdFx0c2l6ZTogXCJNZWRpdW1cIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJiZWFzdFwiLFxuXHRcdHN1YnR5cGU6IFwiXCIsXG5cdFx0YWxpZ25tZW50OiBcInVuYWxpZ25lZFwiLFxuXHRcdGFjOiAxNCxcblx0XHRocDogMTEsXG5cdFx0aGl0X2RpY2U6IFwiMmQ4XCIsXG5cdFx0c3BlZWQ6IFwiMzAgZnQuLCBzd2ltIDMwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbMTAsIDE4LCAxMywgMiwgMTAsIDNdLFxuXHRcdHNraWxsc2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0cGVyY2VwdGlvbjogMixcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcblx0XHRzZW5zZXM6IFwiYmxpbmRzaWdodCAxMCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxMlwiLFxuXHRcdGxhbmd1YWdlczogXCJcIixcblx0XHRjcjogXCIxLzRcIixcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQml0ZVwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs2IHRvIGhpdCwgcmVhY2ggMTAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDYgKDFkNCArIDQpIHBpZXJjaW5nIGRhbWFnZSwgYW5kIHRoZSB0YXJnZXQgbXVzdCBtYWtlIGEgREMgMTEgQ29uc3RpdHV0aW9uIHNhdmluZyB0aHJvdywgdGFraW5nIDEwICgzZDYpIHBvaXNvbiBkYW1hZ2Ugb24gYSBmYWlsZWQgc2F2ZSwgb3IgaGFsZiBhcyBtdWNoIGRhbWFnZSBvbiBhIHN1Y2Nlc3NmdWwgb25lLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDYsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjFkNFwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDQsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIkdpYW50IFJhdFwiLFxuXHRcdHNpemU6IFwiU21hbGxcIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJiZWFzdFwiLFxuXHRcdHN1YnR5cGU6IFwiXCIsXG5cdFx0YWxpZ25tZW50OiBcInVuYWxpZ25lZFwiLFxuXHRcdGFjOiAxMixcblx0XHRocDogNyxcblx0XHRoaXRfZGljZTogXCIyZDZcIixcblx0XHRzcGVlZDogXCIzMCBmdC5cIixcblx0XHRzdGF0czogWzcsIDE1LCAxMSwgMiwgMTAsIDRdLFxuXHRcdGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuXHRcdGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuXHRcdHNlbnNlczogXCJkYXJrdmlzaW9uIDYwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDEwXCIsXG5cdFx0bGFuZ3VhZ2VzOiBcIlwiLFxuXHRcdGNyOiBcIjEvOFwiLFxuXHRcdHRyYWl0czogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIktlZW4gU21lbGxcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgcmF0IGhhcyBhZHZhbnRhZ2Ugb24gV2lzZG9tIChQZXJjZXB0aW9uKSBjaGVja3MgdGhhdCByZWx5IG9uIHNtZWxsLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlBhY2sgVGFjdGljc1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSByYXQgaGFzIGFkdmFudGFnZSBvbiBhbiBhdHRhY2sgcm9sbCBhZ2FpbnN0IGEgY3JlYXR1cmUgaWYgYXQgbGVhc3Qgb25lIG9mIHRoZSByYXQncyBhbGxpZXMgaXMgd2l0aGluIDUgZnQuIG9mIHRoZSBjcmVhdHVyZSBhbmQgdGhlIGFsbHkgaXNuJ3QgaW5jYXBhY2l0YXRlZC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJCaXRlXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzQgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiA0ICgxZDQgKyAyKSBwaWVyY2luZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNCxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMWQ0XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogMixcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiR2lhbnQgUmF0IChEaXNlYXNlZClcIixcblx0XHRzaXplOiBcIlNtYWxsXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwiYmVhc3RcIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcblx0XHRhYzogMTIsXG5cdFx0aHA6IDcsXG5cdFx0aGl0X2RpY2U6IFwiMmQ2XCIsXG5cdFx0c3BlZWQ6IFwiMzAgZnQuXCIsXG5cdFx0c3RhdHM6IFs3LCAxNSwgMTEsIDIsIDEwLCA0XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcblx0XHRzZW5zZXM6IFwiZGFya3Zpc2lvbiA2MCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxMFwiLFxuXHRcdGxhbmd1YWdlczogXCJcIixcblx0XHRjcjogXCIxLzhcIixcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQml0ZVwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs0IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMyAoMWQ0ICsgMikgcGllcmNpbmcgZGFtYWdlLiBJZiB0aGUgdGFyZ2V0IGlzIGEgY3JlYXR1cmUsIGl0IG11c3Qgc3VjY2VlZCBvbiBhIERDIDEwIENvbnN0aXR1dGlvbiBzYXZpbmcgdGhyb3cgb3IgY29udHJhY3QgYSBkaXNlYXNlLiBVbnRpbCB0aGUgZGlzZWFzZSBpcyBjdXJlZCwgdGhlIHRhcmdldCBjYW4ndCByZWdhaW4gaGl0IHBvaW50cyBleGNlcHQgYnkgbWFnaWNhbCBtZWFucywgYW5kIHRoZSB0YXJnZXQncyBoaXQgcG9pbnQgbWF4aW11bSBkZWNyZWFzZXMgYnkgMyAoMWQ2KSBldmVyeSAyNCBob3Vycy4gSWYgdGhlIHRhcmdldCdzIGhpdCBwb2ludCBtYXhpbXVtIGRyb3BzIHRvIDAgYXMgYSByZXN1bHQgb2YgdGhpcyBkaXNlYXNlLCB0aGUgdGFyZ2V0IGRpZXMuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNCxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMWQ0XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogMixcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiR2lhbnQgU2NvcnBpb25cIixcblx0XHRzaXplOiBcIkxhcmdlXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwiYmVhc3RcIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcblx0XHRhYzogMTUsXG5cdFx0aHA6IDUyLFxuXHRcdGhpdF9kaWNlOiBcIjdkMTBcIixcblx0XHRzcGVlZDogXCI0MCBmdC5cIixcblx0XHRzdGF0czogWzE1LCAxMywgMTUsIDEsIDksIDNdLFxuXHRcdGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuXHRcdGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuXHRcdHNlbnNlczogXCJibGluZHNpZ2h0IDYwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDlcIixcblx0XHRsYW5ndWFnZXM6IFwiXCIsXG5cdFx0Y3I6IFwiM1wiLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJDbGF3XCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzQgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiA2ICgxZDggKyAyKSBibHVkZ2VvbmluZyBkYW1hZ2UsIGFuZCB0aGUgdGFyZ2V0IGlzIGdyYXBwbGVkIChlc2NhcGUgREMgMTIpLiBUaGUgc2NvcnBpb24gaGFzIHR3byBjbGF3cywgZWFjaCBvZiB3aGljaCBjYW4gZ3JhcHBsZSBvbmx5IG9uZSB0YXJnZXQuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNCxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMWQ4XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogMixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgc2NvcnBpb24gbWFrZXMgdGhyZWUgYXR0YWNrczogdHdvIHdpdGggaXRzIGNsYXdzIGFuZCBvbmUgd2l0aCBpdHMgc3RpbmcuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiU3RpbmdcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNCB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgY3JlYXR1cmUuIEhpdDogNyAoMWQxMCArIDIpIHBpZXJjaW5nIGRhbWFnZSwgYW5kIHRoZSB0YXJnZXQgbXVzdCBtYWtlIGEgREMgMTIgQ29uc3RpdHV0aW9uIHNhdmluZyB0aHJvdywgdGFraW5nIDIyICg0ZDEwKSBwb2lzb24gZGFtYWdlIG9uIGEgZmFpbGVkIHNhdmUsIG9yIGhhbGYgYXMgbXVjaCBkYW1hZ2Ugb24gYSBzdWNjZXNzZnVsIG9uZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA0LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxZDEwXCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogMixcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiR2lhbnQgU2VhIEhvcnNlXCIsXG5cdFx0c2l6ZTogXCJMYXJnZVwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcImJlYXN0XCIsXG5cdFx0c3VidHlwZTogXCJcIixcblx0XHRhbGlnbm1lbnQ6IFwidW5hbGlnbmVkXCIsXG5cdFx0YWM6IDEzLFxuXHRcdGhwOiAxNixcblx0XHRoaXRfZGljZTogXCIzZDEwXCIsXG5cdFx0c3BlZWQ6IFwiMCBmdC4sIHN3aW0gNDAgZnQuXCIsXG5cdFx0c3RhdHM6IFsxMiwgMTUsIDExLCAyLCAxMiwgNV0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0c2Vuc2VzOiBcInBhc3NpdmUgUGVyY2VwdGlvbiAxMVwiLFxuXHRcdGxhbmd1YWdlczogXCJcIixcblx0XHRjcjogXCIxLzJcIixcblx0XHR0cmFpdHM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJDaGFyZ2VcIixcblx0XHRcdFx0ZGVzYzogXCJJZiB0aGUgc2VhIGhvcnNlIG1vdmVzIGF0IGxlYXN0IDIwIGZ0LiBzdHJhaWdodCB0b3dhcmQgYSB0YXJnZXQgYW5kIHRoZW4gaGl0cyBpdCB3aXRoIGEgcmFtIGF0dGFjayBvbiB0aGUgc2FtZSB0dXJuLCB0aGUgdGFyZ2V0IHRha2VzIGFuIGV4dHJhIDcgKDJkNikgYmx1ZGdlb25pbmcgZGFtYWdlLiBJZiB0aGUgdGFyZ2V0IGlzIGEgY3JlYXR1cmUsIGl0IG11c3Qgc3VjY2VlZCBvbiBhIERDIDExIFN0cmVuZ3RoIHNhdmluZyB0aHJvdyBvciBiZSBrbm9ja2VkIHByb25lLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjJkNlwiLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJXYXRlciBCcmVhdGhpbmdcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgc2VhIGhvcnNlIGNhbiBicmVhdGhlIG9ubHkgdW5kZXJ3YXRlci5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJSYW1cIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMyB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDQgKDFkNiArIDEpIGJsdWRnZW9uaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAzLFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxZDZcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiAxLFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJHaWFudCBTaGFya1wiLFxuXHRcdHNpemU6IFwiSHVnZVwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcImJlYXN0XCIsXG5cdFx0c3VidHlwZTogXCJcIixcblx0XHRhbGlnbm1lbnQ6IFwidW5hbGlnbmVkXCIsXG5cdFx0YWM6IDEzLFxuXHRcdGhwOiAxMjYsXG5cdFx0aGl0X2RpY2U6IFwiMTFkMTJcIixcblx0XHRzcGVlZDogXCJzd2ltIDUwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbMjMsIDExLCAyMSwgMSwgMTAsIDVdLFxuXHRcdHNraWxsc2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0cGVyY2VwdGlvbjogMyxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcblx0XHRzZW5zZXM6IFwiYmxpbmRzaWdodCA2MCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxM1wiLFxuXHRcdGxhbmd1YWdlczogXCJcIixcblx0XHRjcjogXCI1XCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQmxvb2QgRnJlbnp5XCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIHNoYXJrIGhhcyBhZHZhbnRhZ2Ugb24gbWVsZWUgYXR0YWNrIHJvbGxzIGFnYWluc3QgYW55IGNyZWF0dXJlIHRoYXQgZG9lc24ndCBoYXZlIGFsbCBpdHMgaGl0IHBvaW50cy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJXYXRlciBCcmVhdGhpbmdcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgc2hhcmsgY2FuIGJyZWF0aGUgb25seSB1bmRlcndhdGVyLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkJpdGVcIixcblx0XHRcdFx0ZGVzYzogXCJXZWFwb24gQXR0YWNrOiArOSB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDIyICgzZDEwICsgNikgcGllcmNpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDksXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjNkMTBcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiA2LFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJHaWFudCBTcGlkZXJcIixcblx0XHRzaXplOiBcIkxhcmdlXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwiYmVhc3RcIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcblx0XHRhYzogMTQsXG5cdFx0aHA6IDI2LFxuXHRcdGhpdF9kaWNlOiBcIjRkMTBcIixcblx0XHRzcGVlZDogXCIzMCBmdC4sIGNsaW1iIDMwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbMTQsIDE2LCAxMiwgMiwgMTEsIDRdLFxuXHRcdHNraWxsc2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0c3RlYWx0aDogNyxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcblx0XHRzZW5zZXM6IFwiYmxpbmRzaWdodCAxMCBmdC4sIGRhcmt2aXNpb24gNjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTBcIixcblx0XHRsYW5ndWFnZXM6IFwiXCIsXG5cdFx0Y3I6IFwiMVwiLFxuXHRcdHRyYWl0czogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlNwaWRlciBDbGltYlwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBzcGlkZXIgY2FuIGNsaW1iIGRpZmZpY3VsdCBzdXJmYWNlcywgaW5jbHVkaW5nIHVwc2lkZSBkb3duIG9uIGNlaWxpbmdzLCB3aXRob3V0IG5lZWRpbmcgdG8gbWFrZSBhbiBhYmlsaXR5IGNoZWNrLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIldlYiBTZW5zZVwiLFxuXHRcdFx0XHRkZXNjOiBcIldoaWxlIGluIGNvbnRhY3Qgd2l0aCBhIHdlYiwgdGhlIHNwaWRlciBrbm93cyB0aGUgZXhhY3QgbG9jYXRpb24gb2YgYW55IG90aGVyIGNyZWF0dXJlIGluIGNvbnRhY3Qgd2l0aCB0aGUgc2FtZSB3ZWIuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiV2ViIFdhbGtlclwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBzcGlkZXIgaWdub3JlcyBtb3ZlbWVudCByZXN0cmljdGlvbnMgY2F1c2VkIGJ5IHdlYmJpbmcuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQml0ZVwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs1IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSBjcmVhdHVyZS4gSGl0OiA3ICgxZDggKyAzKSBwaWVyY2luZyBkYW1hZ2UsIGFuZCB0aGUgdGFyZ2V0IG11c3QgbWFrZSBhIERDIDExIENvbnN0aXR1dGlvbiBzYXZpbmcgdGhyb3csIHRha2luZyA5ICgyZDgpIHBvaXNvbiBkYW1hZ2Ugb24gYSBmYWlsZWQgc2F2ZSwgb3IgaGFsZiBhcyBtdWNoIGRhbWFnZSBvbiBhIHN1Y2Nlc3NmdWwgb25lLiBJZiB0aGUgcG9pc29uIGRhbWFnZSByZWR1Y2VzIHRoZSB0YXJnZXQgdG8gMCBoaXQgcG9pbnRzLCB0aGUgdGFyZ2V0IGlzIHN0YWJsZSBidXQgcG9pc29uZWQgZm9yIDEgaG91ciwgZXZlbiBhZnRlciByZWdhaW5pbmcgaGl0IHBvaW50cywgYW5kIGlzIHBhcmFseXplZCB3aGlsZSBwb2lzb25lZCBpbiB0aGlzIHdheS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA1LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxZDhcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiAzLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJXZWIgKFJlY2hhcmdlIDUtNilcIixcblx0XHRcdFx0ZGVzYzogXCJSYW5nZWQgV2VhcG9uIEF0dGFjazogKzUgdG8gaGl0LCByYW5nZSAzMC82MCBmdC4sIG9uZSBjcmVhdHVyZS4gSGl0OiBUaGUgdGFyZ2V0IGlzIHJlc3RyYWluZWQgYnkgd2ViYmluZy4gQXMgYW4gYWN0aW9uLCB0aGUgcmVzdHJhaW5lZCB0YXJnZXQgY2FuIG1ha2UgYSBEQyAxMiBTdHJlbmd0aCBjaGVjaywgYnVyc3RpbmcgdGhlIHdlYmJpbmcgb24gYSBzdWNjZXNzLiBUaGUgd2ViYmluZyBjYW4gYWxzbyBiZSBhdHRhY2tlZCBhbmQgZGVzdHJveWVkIChBQyAxMDsgaHAgNTsgdnVsbmVyYWJpbGl0eSB0byBmaXJlIGRhbWFnZTsgaW1tdW5pdHkgdG8gYmx1ZGdlb25pbmcsIHBvaXNvbiwgYW5kIHBzeWNoaWMgZGFtYWdlKS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA1LFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJHaWFudCBUb2FkXCIsXG5cdFx0c2l6ZTogXCJMYXJnZVwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcImJlYXN0XCIsXG5cdFx0c3VidHlwZTogXCJcIixcblx0XHRhbGlnbm1lbnQ6IFwidW5hbGlnbmVkXCIsXG5cdFx0YWM6IDExLFxuXHRcdGhwOiAzOSxcblx0XHRoaXRfZGljZTogXCI2ZDEwXCIsXG5cdFx0c3BlZWQ6IFwiMjAgZnQuLCBzd2ltIDQwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbMTUsIDEzLCAxMywgMiwgMTAsIDNdLFxuXHRcdGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuXHRcdGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuXHRcdHNlbnNlczogXCJkYXJrdmlzaW9uIDMwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDEwXCIsXG5cdFx0bGFuZ3VhZ2VzOiBcIlwiLFxuXHRcdGNyOiBcIjFcIixcblx0XHR0cmFpdHM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJBbXBoaWJpb3VzXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIHRvYWQgY2FuIGJyZWF0aGUgYWlyIGFuZCB3YXRlclwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlN0YW5kaW5nIExlYXBcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgdG9hZCdzIGxvbmcganVtcCBpcyB1cCB0byAyMCBmdC4gYW5kIGl0cyBoaWdoIGp1bXAgaXMgdXAgdG8gMTAgZnQuLCB3aXRoIG9yIHdpdGhvdXQgYSBydW5uaW5nIHN0YXJ0LlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkJpdGVcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNCB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDcgKDFkMTAgKyAyKSBwaWVyY2luZyBkYW1hZ2UgcGx1cyA1ICgxZDEwKSBwb2lzb24gZGFtYWdlLCBhbmQgdGhlIHRhcmdldCBpcyBncmFwcGxlZCAoZXNjYXBlIERDIDEzKS4gVW50aWwgdGhpcyBncmFwcGxlIGVuZHMsIHRoZSB0YXJnZXQgaXMgcmVzdHJhaW5lZCwgYW5kIHRoZSB0b2FkIGNhbid0IGJpdGUgYW5vdGhlciB0YXJnZXQuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNCxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMWQxMFwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDIsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlN3YWxsb3dcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgdG9hZCBtYWtlcyBvbmUgYml0ZSBhdHRhY2sgYWdhaW5zdCBhIE1lZGl1bSBvciBzbWFsbGVyIHRhcmdldCBpdCBpcyBncmFwcGxpbmcuIElmIHRoZSBhdHRhY2sgaGl0cywgdGhlIHRhcmdldCBpcyBzd2FsbG93ZWQsIGFuZCB0aGUgZ3JhcHBsZSBlbmRzLiBUaGUgc3dhbGxvd2VkIHRhcmdldCBpcyBibGluZGVkIGFuZCByZXN0cmFpbmVkLCBpdCBoYXMgdG90YWwgY292ZXIgYWdhaW5zdCBhdHRhY2tzIGFuZCBvdGhlciBlZmZlY3RzIG91dHNpZGUgdGhlIHRvYWQsIGFuZCBpdCB0YWtlcyAxMCAoM2Q2KSBhY2lkIGRhbWFnZSBhdCB0aGUgc3RhcnQgb2YgZWFjaCBvZiB0aGUgdG9hZCdzIHR1cm5zLiBUaGUgdG9hZCBjYW4gaGF2ZSBvbmx5IG9uZSB0YXJnZXQgc3dhbGxvd2VkIGF0IGEgdGltZS5cXG5JZiB0aGUgdG9hZCBkaWVzLCBhIHN3YWxsb3dlZCBjcmVhdHVyZSBpcyBubyBsb25nZXIgcmVzdHJhaW5lZCBieSBpdCBhbmQgY2FuIGVzY2FwZSBmcm9tIHRoZSBjb3Jwc2UgdXNpbmcgNSBmZWV0IG9mIG1vdmVtZW50LCBleGl0aW5nIHByb25lLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIkdpYW50IFZ1bHR1cmVcIixcblx0XHRzaXplOiBcIkxhcmdlXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwiYmVhc3RcIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJuZXV0cmFsIGV2aWxcIixcblx0XHRhYzogMTAsXG5cdFx0aHA6IDIyLFxuXHRcdGhpdF9kaWNlOiBcIjNkMTBcIixcblx0XHRzcGVlZDogXCIxMCBmdC4sIGZseSA2MCBmdC5cIixcblx0XHRzdGF0czogWzE1LCAxMCwgMTUsIDYsIDEyLCA3XSxcblx0XHRza2lsbHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdHBlcmNlcHRpb246IDMsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0c2Vuc2VzOiBcInBhc3NpdmUgUGVyY2VwdGlvbiAxM1wiLFxuXHRcdGxhbmd1YWdlczogXCJ1bmRlcnN0YW5kcyBDb21tb24gYnV0IGNhbid0IHNwZWFrXCIsXG5cdFx0Y3I6IFwiMVwiLFxuXHRcdHRyYWl0czogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIktlZW4gU2lnaHQgYW5kIFNtZWxsXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIHZ1bHR1cmUgaGFzIGFkdmFudGFnZSBvbiBXaXNkb20gKFBlcmNlcHRpb24pIGNoZWNrcyB0aGF0IHJlbHkgb24gc2lnaHQgb3Igc21lbGwuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiUGFjayBUYWN0aWNzXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIHZ1bHR1cmUgaGFzIGFkdmFudGFnZSBvbiBhbiBhdHRhY2sgcm9sbCBhZ2FpbnN0IGEgY3JlYXR1cmUgaWYgYXQgbGVhc3Qgb25lIG9mIHRoZSB2dWx0dXJlJ3MgYWxsaWVzIGlzIHdpdGhpbiA1IGZ0LiBvZiB0aGUgY3JlYXR1cmUgYW5kIHRoZSBhbGx5IGlzbid0IGluY2FwYWNpdGF0ZWQuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgdnVsdHVyZSBtYWtlcyB0d28gYXR0YWNrczogb25lIHdpdGggaXRzIGJlYWsgYW5kIG9uZSB3aXRoIGl0cyB0YWxvbnMuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQmVha1wiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs0IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogNyAoMmQ0ICsgMikgcGllcmNpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDQsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjJkNFwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDIsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlRhbG9uc1wiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs0IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogOSAoMmQ2ICsgMikgc2xhc2hpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDQsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjJkNlwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDIsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIkdpYW50IFdhc3BcIixcblx0XHRzaXplOiBcIk1lZGl1bVwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcImJlYXN0XCIsXG5cdFx0c3VidHlwZTogXCJcIixcblx0XHRhbGlnbm1lbnQ6IFwidW5hbGlnbmVkXCIsXG5cdFx0YWM6IDEyLFxuXHRcdGhwOiAxMyxcblx0XHRoaXRfZGljZTogXCIzZDhcIixcblx0XHRzcGVlZDogXCIxMCBmdC4sIGZseSA1MCBmdC4sIHN3aW0gNTAgZnQuXCIsXG5cdFx0c3RhdHM6IFsxMCwgMTQsIDEwLCAxLCAxMCwgM10sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0c2Vuc2VzOiBcInBhc3NpdmUgUGVyY2VwdGlvbiAxMFwiLFxuXHRcdGxhbmd1YWdlczogXCJcIixcblx0XHRjcjogXCIxLzJcIixcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiU3RpbmdcIixcblx0XHRcdFx0ZGVzYzogXCJTdGluZy4gTWVsZWUgV2VhcG9uIEF0dGFjazogKzQgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIGNyZWF0dXJlLiBIaXQ6IDUgKDFkNiArIDIpIHBpZXJjaW5nIGRhbWFnZSwgYW5kIHRoZSB0YXJnZXQgbXVzdCBtYWtlIGEgREMgMTEgQ29uc3RpdHV0aW9uIHNhdmluZyB0aHJvdywgdGFraW5nIDEwICgzZDYpIHBvaXNvbiBkYW1hZ2Ugb24gYSBmYWlsZWQgc2F2ZSwgb3IgaGFsZiBhcyBtdWNoIGRhbWFnZSBvbiBhIHN1Y2Nlc3NmdWwgb25lLiBJZiB0aGUgcG9pc29uIGRhbWFnZSByZWR1Y2VzIHRoZSB0YXJnZXQgdG8gMCBoaXQgcG9pbnRzLCB0aGUgdGFyZ2V0IGlzIHN0YWJsZSBidXQgcG9pc29uZWQgZm9yIDEgaG91ciwgZXZlbiBhZnRlciByZWdhaW5pbmcgaGl0IHBvaW50cywgYW5kIGlzIHBhcmFseXplZCB3aGlsZSBwb2lzb25lZCBpbiB0aGlzIHdheS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA0LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxZDZcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiAyLFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJHaWFudCBXZWFzZWxcIixcblx0XHRzaXplOiBcIk1lZGl1bVwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcImJlYXN0XCIsXG5cdFx0c3VidHlwZTogXCJcIixcblx0XHRhbGlnbm1lbnQ6IFwidW5hbGlnbmVkXCIsXG5cdFx0YWM6IDEzLFxuXHRcdGhwOiA5LFxuXHRcdGhpdF9kaWNlOiBcIjJkOFwiLFxuXHRcdHNwZWVkOiBcIjQwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbMTEsIDE2LCAxMCwgNCwgMTIsIDVdLFxuXHRcdHNraWxsc2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0cGVyY2VwdGlvbjogMyxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHN0ZWFsdGg6IDUsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0c2Vuc2VzOiBcImRhcmt2aXNpb24gNjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTNcIixcblx0XHRsYW5ndWFnZXM6IFwiXCIsXG5cdFx0Y3I6IFwiMS84XCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiS2VlbiBIZWFyaW5nIGFuZCBTbWVsbFwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSB3ZWFzZWwgaGFzIGFkdmFudGFnZSBvbiBXaXNkb20gKFBlcmNlcHRpb24pIGNoZWNrcyB0aGF0IHJlbHkgb24gaGVhcmluZyBvciBzbWVsbC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJCaXRlXCIsXG5cdFx0XHRcdGRlc2M6IFwiV2VhcG9uIEF0dGFjazogKzUgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiA1ICgxZDQgKyAzKSBwaWVyY2luZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNSxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMWQ0XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogMyxcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiR2lhbnQgV29sZiBTcGlkZXJcIixcblx0XHRzaXplOiBcIk1lZGl1bVwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcImJlYXN0XCIsXG5cdFx0c3VidHlwZTogXCJcIixcblx0XHRhbGlnbm1lbnQ6IFwidW5hbGlnbmVkXCIsXG5cdFx0YWM6IDEzLFxuXHRcdGhwOiAxMSxcblx0XHRoaXRfZGljZTogXCIyZDhcIixcblx0XHRzcGVlZDogXCI0MCBmdC4sIGNsaW1iIDQwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbMTIsIDE2LCAxMywgMywgMTIsIDRdLFxuXHRcdHNraWxsc2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0cGVyY2VwdGlvbjogMyxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHN0ZWFsdGg6IDcsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0c2Vuc2VzOiBcImJsaW5kc2lnaHQgMTAgZnQuLCBkYXJrdmlzaW9uIDYwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDEzXCIsXG5cdFx0bGFuZ3VhZ2VzOiBcIlwiLFxuXHRcdGNyOiBcIjEvNFwiLFxuXHRcdHRyYWl0czogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlNwaWRlciBDbGltYlwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBzcGlkZXIgY2FuIGNsaW1iIGRpZmZpY3VsdCBzdXJmYWNlcywgaW5jbHVkaW5nIHVwc2lkZSBkb3duIG9uIGNlaWxpbmdzLCB3aXRob3V0IG5lZWRpbmcgdG8gbWFrZSBhbiBhYmlsaXR5IGNoZWNrLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIldlYiBTZW5zZVwiLFxuXHRcdFx0XHRkZXNjOiBcIldoaWxlIGluIGNvbnRhY3Qgd2l0aCBhIHdlYiwgdGhlIHNwaWRlciBrbm93cyB0aGUgZXhhY3QgbG9jYXRpb24gb2YgYW55IG90aGVyIGNyZWF0dXJlIGluIGNvbnRhY3Qgd2l0aCB0aGUgc2FtZSB3ZWIuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiV2ViIFdhbGtlclwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBzcGlkZXIgaWdub3JlcyBtb3ZlbWVudCByZXN0cmljdGlvbnMgY2F1c2VkIGJ5IHdlYmJpbmcuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQml0ZVwiLFxuXHRcdFx0XHRkZXNjOiBcIldlYXBvbiBBdHRhY2s6ICszIHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSBjcmVhdHVyZS4gSGl0OiA0ICgxZDYgKyAxKSBwaWVyY2luZyBkYW1hZ2UsIGFuZCB0aGUgdGFyZ2V0IG11c3QgbWFrZSBhIERDIDExIENvbnN0aXR1dGlvbiBzYXZpbmcgdGhyb3csIHRha2luZyA3ICgyZDYpIHBvaXNvbiBkYW1hZ2Ugb24gYSBmYWlsZWQgc2F2ZSwgb3IgaGFsZiBhcyBtdWNoIGRhbWFnZSBvbiBhIHN1Y2Nlc3NmdWwgb25lLiBJZiB0aGUgcG9pc29uIGRhbWFnZSByZWR1Y2VzIHRoZSB0YXJnZXQgdG8gMCBoaXQgcG9pbnRzLCB0aGUgdGFyZ2V0IGlzIHN0YWJsZSBidXQgcG9pc29uZWQgZm9yIDEgaG91ciwgZXZlbiBhZnRlciByZWdhaW5pbmcgaGl0IHBvaW50cywgYW5kIGlzIHBhcmFseXplZCB3aGlsZSBwb2lzb25lZCBpbiB0aGlzIHdheS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAzLFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxZDZcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiAxLFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJHaWJiZXJpbmcgTW91dGhlclwiLFxuXHRcdHNpemU6IFwiTWVkaXVtXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwiYWJlcnJhdGlvblwiLFxuXHRcdHN1YnR5cGU6IFwiXCIsXG5cdFx0YWxpZ25tZW50OiBcIm5ldXRyYWxcIixcblx0XHRhYzogOSxcblx0XHRocDogNjcsXG5cdFx0aGl0X2RpY2U6IFwiOWQ4XCIsXG5cdFx0c3BlZWQ6IFwiMTAgZnQuLCBzd2ltIDEwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbMTAsIDgsIDE2LCAzLCAxMCwgNl0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwicHJvbmVcIixcblx0XHRzZW5zZXM6IFwiZGFya3Zpc2lvbiA2MCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxMFwiLFxuXHRcdGxhbmd1YWdlczogXCJcIixcblx0XHRjcjogXCIyXCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQWJlcnJhbnQgR3JvdW5kXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGdyb3VuZCBpbiBhIDEwLWZvb3QgcmFkaXVzIGFyb3VuZCB0aGUgbW91dGhlciBpcyBkb3VnaGxpa2UgZGlmZmljdWx0IHRlcnJhaW4uIEVhY2ggY3JlYXR1cmUgdGhhdCBzdGFydHMgaXRzIHR1cm4gaW4gdGhhdCBhcmVhIG11c3Qgc3VjY2VlZCBvbiBhIERDIDEwIFN0cmVuZ3RoIHNhdmluZyB0aHJvdyBvciBoYXZlIGl0cyBzcGVlZCByZWR1Y2VkIHRvIDAgdW50aWwgdGhlIHN0YXJ0IG9mIGl0cyBuZXh0IHR1cm4uXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiR2liYmVyaW5nXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIG1vdXRoZXIgYmFiYmxlcyBpbmNvaGVyZW50bHkgd2hpbGUgaXQgY2FuIHNlZSBhbnkgY3JlYXR1cmUgYW5kIGlzbid0IGluY2FwYWNpdGF0ZWQuIEVhY2ggY3JlYXR1cmUgdGhhdCBzdGFydHMgaXRzIHR1cm4gd2l0aGluIDIwIGZlZXQgb2YgdGhlIG1vdXRoZXIgYW5kIGNhbiBoZWFyIHRoZSBnaWJiZXJpbmcgbXVzdCBzdWNjZWVkIG9uIGEgREMgMTAgV2lzZG9tIHNhdmluZyB0aHJvdy4gT24gYSBmYWlsdXJlLCB0aGUgY3JlYXR1cmUgY2FuJ3QgdGFrZSByZWFjdGlvbnMgdW50aWwgdGhlIHN0YXJ0IG9mIGl0cyBuZXh0IHR1cm4gYW5kIHJvbGxzIGEgZDggdG8gZGV0ZXJtaW5lIHdoYXQgaXQgZG9lcyBkdXJpbmcgaXRzIHR1cm4uIE9uIGEgMSB0byA0LCB0aGUgY3JlYXR1cmUgZG9lcyBub3RoaW5nLiBPbiBhIDUgb3IgNiwgdGhlIGNyZWF0dXJlIHRha2VzIG5vIGFjdGlvbiBvciBib251cyBhY3Rpb24gYW5kIHVzZXMgYWxsIGl0cyBtb3ZlbWVudCB0byBtb3ZlIGluIGEgcmFuZG9tbHkgZGV0ZXJtaW5lZCBkaXJlY3Rpb24uIE9uIGEgNyBvciA4LCB0aGUgY3JlYXR1cmUgbWFrZXMgYSBtZWxlZSBhdHRhY2sgYWdhaW5zdCBhIHJhbmRvbWx5IGRldGVybWluZWQgY3JlYXR1cmUgd2l0aGluIGl0cyByZWFjaCBvciBkb2VzIG5vdGhpbmcgaWYgaXQgY2FuJ3QgbWFrZSBzdWNoIGFuIGF0dGFjay5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJNdWx0aWF0dGFja1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBnaWJiZXJpbmcgbW91dGhlciBtYWtlcyBvbmUgYml0ZSBhdHRhY2sgYW5kLCBpZiBpdCBjYW4sIHVzZXMgaXRzIEJsaW5kaW5nIFNwaXR0bGUuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQml0ZXNcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMiB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgY3JlYXR1cmUuIEhpdDogMTcgKDVkNikgcGllcmNpbmcgZGFtYWdlLiBJZiB0aGUgdGFyZ2V0IGlzIE1lZGl1bSBvciBzbWFsbGVyLCBpdCBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxMCBTdHJlbmd0aCBzYXZpbmcgdGhyb3cgb3IgYmUga25vY2tlZCBwcm9uZS4gSWYgdGhlIHRhcmdldCBpcyBraWxsZWQgYnkgdGhpcyBkYW1hZ2UsIGl0IGlzIGFic29yYmVkIGludG8gdGhlIG1vdXRoZXIuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMixcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiNWQ2XCIsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkJsaW5kaW5nIFNwaXR0bGUgKFJlY2hhcmdlIDUtNilcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgbW91dGhlciBzcGl0cyBhIGNoZW1pY2FsIGdsb2IgYXQgYSBwb2ludCBpdCBjYW4gc2VlIHdpdGhpbiAxNSBmZWV0IG9mIGl0LiBUaGUgZ2xvYiBleHBsb2RlcyBpbiBhIGJsaW5kaW5nIGZsYXNoIG9mIGxpZ2h0IG9uIGltcGFjdC4gRWFjaCBjcmVhdHVyZSB3aXRoaW4gNSBmZWV0IG9mIHRoZSBmbGFzaCBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxMyBEZXh0ZXJpdHkgc2F2aW5nIHRocm93IG9yIGJlIGJsaW5kZWQgdW50aWwgdGhlIGVuZCBvZiB0aGUgbW91dGhlcidzIG5leHQgdHVybi5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJHbGFicmV6dVwiLFxuXHRcdHNpemU6IFwiTGFyZ2VcIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJmaWVuZFwiLFxuXHRcdHN1YnR5cGU6IFwiZGVtb25cIixcblx0XHRhbGlnbm1lbnQ6IFwiY2hhb3RpYyBldmlsXCIsXG5cdFx0YWM6IDE3LFxuXHRcdGhwOiAxNTcsXG5cdFx0aGl0X2RpY2U6IFwiMTVkMTBcIixcblx0XHRzcGVlZDogXCI0MCBmdC5cIixcblx0XHRzdGF0czogWzIwLCAxNSwgMjEsIDE5LCAxNywgMTZdLFxuXHRcdHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdHN0cmVuZ3RoOiA5LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0Y29uc3RpdHV0aW9uOiA5LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0d2lzZG9tOiA3LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0Y2hhcmlzbWE6IDcsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6XG5cdFx0XHRcImNvbGQsIGZpcmUsIGxpZ2h0bmluZzsgYmx1ZGdlb25pbmcsIHBpZXJjaW5nLCBhbmQgc2xhc2hpbmcgZnJvbSBub25tYWdpY2FsIHdlYXBvbnNcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJwb2lzb25cIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczogXCJwb2lzb25lZFwiLFxuXHRcdHNlbnNlczogXCJ0cnVlc2lnaHQgMTIwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDEzXCIsXG5cdFx0bGFuZ3VhZ2VzOiBcIkFieXNzYWwsIHRlbGVwYXRoeSAxMjAgZnQuXCIsXG5cdFx0Y3I6IFwiOVwiLFxuXHRcdHRyYWl0czogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIklubmF0ZSBTcGVsbGNhc3RpbmdcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgZ2xhYnJlenUncyBzcGVsbGNhc3RpbmcgYWJpbGl0eSBpcyBJbnRlbGxpZ2VuY2UgKHNwZWxsIHNhdmUgREMgMTYpLiBUaGUgZ2xhYnJlenUgY2FuIGlubmF0ZWx5IGNhc3QgdGhlIGZvbGxvd2luZyBzcGVsbHMsIHJlcXVpcmluZyBubyBtYXRlcmlhbCBjb21wb25lbnRzOlxcbkF0IHdpbGw6IGRhcmtuZXNzLCBkZXRlY3QgbWFnaWMsIGRpc3BlbCBtYWdpY1xcbjEvZGF5IGVhY2g6IGNvbmZ1c2lvbiwgZmx5LCBwb3dlciB3b3JkIHN0dW5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJNYWdpYyBSZXNpc3RhbmNlXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGdsYWJyZXp1IGhhcyBhZHZhbnRhZ2Ugb24gc2F2aW5nIHRocm93cyBhZ2FpbnN0IHNwZWxscyBhbmQgb3RoZXIgbWFnaWNhbCBlZmZlY3RzLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGdsYWJyZXp1IG1ha2VzIGZvdXIgYXR0YWNrczogdHdvIHdpdGggaXRzIHBpbmNlcnMgYW5kIHR3byB3aXRoIGl0cyBmaXN0cy4gQWx0ZXJuYXRpdmVseSwgaXQgbWFrZXMgdHdvIGF0dGFja3Mgd2l0aCBpdHMgcGluY2VycyBhbmQgY2FzdHMgb25lIHNwZWxsLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlBpbmNlclwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs5IHRvIGhpdCwgcmVhY2ggMTAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDE2ICgyZDEwICsgNSkgYmx1ZGdlb25pbmcgZGFtYWdlLiBJZiB0aGUgdGFyZ2V0IGlzIGEgTWVkaXVtIG9yIHNtYWxsZXIgY3JlYXR1cmUsIGl0IGlzIGdyYXBwbGVkIChlc2NhcGUgREMgMTUpLiBUaGUgZ2xhYnJlenUgaGFzIHR3byBwaW5jZXJzLCBlYWNoIG9mIHdoaWNoIGNhbiBncmFwcGxlIG9ubHkgb25lIHRhcmdldC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA5LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIyZDEwXCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogNSxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiRmlzdFwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs5IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogNyAoMmQ0ICsgMikgYmx1ZGdlb25pbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDksXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjJkNFwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDIsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlZhcmlhbnQ6IFN1bW1vbiBEZW1vbiAoMS9EYXkpXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGRlbW9uIGNob29zZXMgd2hhdCB0byBzdW1tb24gYW5kIGF0dGVtcHRzIGEgbWFnaWNhbCBzdW1tb25pbmcuXFxuQSBnbGFicmV6dSBoYXMgYSAzMCBwZXJjZW50IGNoYW5jZSBvZiBzdW1tb25pbmcgMWQzIHZyb2NrcywgMWQyIGhlenJvdXMsIG9yIG9uZSBnbGFicmV6dS5cXG5BIHN1bW1vbmVkIGRlbW9uIGFwcGVhcnMgaW4gYW4gdW5vY2N1cGllZCBzcGFjZSB3aXRoaW4gNjAgZmVldCBvZiBpdHMgc3VtbW9uZXIsIGFjdHMgYXMgYW4gYWxseSBvZiBpdHMgc3VtbW9uZXIsIGFuZCBjYW4ndCBzdW1tb24gb3RoZXIgZGVtb25zLiBJdCByZW1haW5zIGZvciAxIG1pbnV0ZSwgdW50aWwgaXQgb3IgaXRzIHN1bW1vbmVyIGRpZXMsIG9yIHVudGlsIGl0cyBzdW1tb25lciBkaXNtaXNzZXMgaXQgYXMgYW4gYWN0aW9uLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIkdsYWRpYXRvclwiLFxuXHRcdHNpemU6IFwiTWVkaXVtXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwiaHVtYW5vaWRcIixcblx0XHRzdWJ0eXBlOiBcImFueSByYWNlXCIsXG5cdFx0YWxpZ25tZW50OiBcImFueSBhbGlnbm1lbnRcIixcblx0XHRhYzogMTYsXG5cdFx0aHA6IDExMixcblx0XHRoaXRfZGljZTogXCIxNWQ4XCIsXG5cdFx0c3BlZWQ6IFwiMzAgZnQuXCIsXG5cdFx0c3RhdHM6IFsxOCwgMTUsIDE2LCAxMCwgMTIsIDE1XSxcblx0XHRzYXZlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRzdHJlbmd0aDogNyxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdGRleHRlcml0eTogNSxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdGNvbnN0aXR1dGlvbjogNixcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRza2lsbHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdGludGltaWRhdGlvbjogNSxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdGF0aGxldGljczogMTAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0c2Vuc2VzOiBcInBhc3NpdmUgUGVyY2VwdGlvbiAxMVwiLFxuXHRcdGxhbmd1YWdlczogXCJhbnkgb25lIGxhbmd1YWdlICh1c3VhbGx5IENvbW1vbilcIixcblx0XHRjcjogXCI1XCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQnJhdmVcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgZ2xhZGlhdG9yIGhhcyBhZHZhbnRhZ2Ugb24gc2F2aW5nIHRocm93cyBhZ2FpbnN0IGJlaW5nIGZyaWdodGVuZWQuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQnJ1dGVcIixcblx0XHRcdFx0ZGVzYzogXCJBIG1lbGVlIHdlYXBvbiBkZWFscyBvbmUgZXh0cmEgZGllIG9mIGl0cyBkYW1hZ2Ugd2hlbiB0aGUgZ2xhZGlhdG9yIGhpdHMgd2l0aCBpdCAoaW5jbHVkZWQgaW4gdGhlIGF0dGFjaykuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgZ2xhZGlhdG9yIG1ha2VzIHRocmVlIG1lbGVlIGF0dGFja3Mgb3IgdHdvIHJhbmdlZCBhdHRhY2tzLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlNwZWFyXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgb3IgUmFuZ2VkIFdlYXBvbiBBdHRhY2s6ICs3IHRvIGhpdCwgcmVhY2ggNSBmdC4gYW5kIHJhbmdlIDIwLzYwIGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxMSAoMmQ2ICsgNCkgcGllcmNpbmcgZGFtYWdlLCBvciAxMyAoMmQ4ICsgNCkgcGllcmNpbmcgZGFtYWdlIGlmIHVzZWQgd2l0aCB0d28gaGFuZHMgdG8gbWFrZSBhIG1lbGVlIGF0dGFjay5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA3LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIyZDZcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiA0LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJTaGllbGQgQmFzaFwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs3IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSBjcmVhdHVyZS4gSGl0OiA5ICgyZDQgKyA0KSBibHVkZ2VvbmluZyBkYW1hZ2UuIElmIHRoZSB0YXJnZXQgaXMgYSBNZWRpdW0gb3Igc21hbGxlciBjcmVhdHVyZSwgaXQgbXVzdCBzdWNjZWVkIG9uIGEgREMgMTUgU3RyZW5ndGggc2F2aW5nIHRocm93IG9yIGJlIGtub2NrZWQgcHJvbmUuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNyxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMmQ0XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogNCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRyZWFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJQYXJyeVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBnbGFkaWF0b3IgYWRkcyAzIHRvIGl0cyBBQyBhZ2FpbnN0IG9uZSBtZWxlZSBhdHRhY2sgdGhhdCB3b3VsZCBoaXQgaXQuIFRvIGRvIHNvLCB0aGUgZ2xhZGlhdG9yIG11c3Qgc2VlIHRoZSBhdHRhY2tlciBhbmQgYmUgd2llbGRpbmcgYSBtZWxlZSB3ZWFwb24uXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiR25vbGxcIixcblx0XHRzaXplOiBcIk1lZGl1bVwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcImh1bWFub2lkXCIsXG5cdFx0c3VidHlwZTogXCJnbm9sbFwiLFxuXHRcdGFsaWdubWVudDogXCJjaGFvdGljIGV2aWxcIixcblx0XHRhYzogMTUsXG5cdFx0aHA6IDIyLFxuXHRcdGhpdF9kaWNlOiBcIjVkOFwiLFxuXHRcdHNwZWVkOiBcIjMwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbMTQsIDEyLCAxMSwgNiwgMTAsIDddLFxuXHRcdGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuXHRcdGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuXHRcdHNlbnNlczogXCJkYXJrdmlzaW9uIDYwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDEwXCIsXG5cdFx0bGFuZ3VhZ2VzOiBcIkdub2xsXCIsXG5cdFx0Y3I6IFwiMS8yXCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiUmFtcGFnZVwiLFxuXHRcdFx0XHRkZXNjOiBcIldoZW4gdGhlIGdub2xsIHJlZHVjZXMgYSBjcmVhdHVyZSB0byAwIGhpdCBwb2ludHMgd2l0aCBhIG1lbGVlIGF0dGFjayBvbiBpdHMgdHVybiwgdGhlIGdub2xsIGNhbiB0YWtlIGEgYm9udXMgYWN0aW9uIHRvIG1vdmUgdXAgdG8gaGFsZiBpdHMgc3BlZWQgYW5kIG1ha2UgYSBiaXRlIGF0dGFjay5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJCaXRlXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzQgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIGNyZWF0dXJlLiBIaXQ6IDQgKDFkNCArIDIpIHBpZXJjaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA0LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxZDRcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiAyLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJTcGVhclwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIG9yIFJhbmdlZCBXZWFwb24gQXR0YWNrOiArNCB0byBoaXQsIHJlYWNoIDUgZnQuIG9yIHJhbmdlIDIwLzYwIGZ0Liwgb25lIHRhcmdldC4gSGl0OiA1ICgxZDYgKyAyKSBwaWVyY2luZyBkYW1hZ2UsIG9yIDYgKDFkOCArIDIpIHBpZXJjaW5nIGRhbWFnZSBpZiB1c2VkIHdpdGggdHdvIGhhbmRzIHRvIG1ha2UgYSBtZWxlZSBhdHRhY2suXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNCxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMWQ2XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogMixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTG9uZ2Jvd1wiLFxuXHRcdFx0XHRkZXNjOiBcIlJhbmdlZCBXZWFwb24gQXR0YWNrOiArMyB0byBoaXQsIHJhbmdlIDE1MC82MDAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDUgKDFkOCArIDEpIHBpZXJjaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAzLFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxZDhcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiAxLFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJHb2F0XCIsXG5cdFx0c2l6ZTogXCJNZWRpdW1cIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJiZWFzdFwiLFxuXHRcdHN1YnR5cGU6IFwiXCIsXG5cdFx0YWxpZ25tZW50OiBcInVuYWxpZ25lZFwiLFxuXHRcdGFjOiAxMCxcblx0XHRocDogNCxcblx0XHRoaXRfZGljZTogXCIxZDhcIixcblx0XHRzcGVlZDogXCI0MCBmdC5cIixcblx0XHRzdGF0czogWzEyLCAxMCwgMTEsIDIsIDEwLCA1XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcblx0XHRzZW5zZXM6IFwicGFzc2l2ZSBQZXJjZXB0aW9uIDEwXCIsXG5cdFx0bGFuZ3VhZ2VzOiBcIlwiLFxuXHRcdGNyOiBcIjBcIixcblx0XHR0cmFpdHM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJDaGFyZ2VcIixcblx0XHRcdFx0ZGVzYzogXCJJZiB0aGUgZ29hdCBtb3ZlcyBhdCBsZWFzdCAyMCBmdC4gc3RyYWlnaHQgdG93YXJkIGEgdGFyZ2V0IGFuZCB0aGVuIGhpdHMgaXQgd2l0aCBhIHJhbSBhdHRhY2sgb24gdGhlIHNhbWUgdHVybiwgdGhlIHRhcmdldCB0YWtlcyBhbiBleHRyYSAyICgxZDQpIGJsdWRnZW9uaW5nIGRhbWFnZS4gSWYgdGhlIHRhcmdldCBpcyBhIGNyZWF0dXJlLCBpdCBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxMCBTdHJlbmd0aCBzYXZpbmcgdGhyb3cgb3IgYmUga25vY2tlZCBwcm9uZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxZDRcIixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiU3VyZS1Gb290ZWRcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgZ29hdCBoYXMgYWR2YW50YWdlIG9uIFN0cmVuZ3RoIGFuZCBEZXh0ZXJpdHkgc2F2aW5nIHRocm93cyBtYWRlIGFnYWluc3QgZWZmZWN0cyB0aGF0IHdvdWxkIGtub2NrIGl0IHByb25lLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlJhbVwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICszIHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMyAoMWQ0ICsgMSkgYmx1ZGdlb25pbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDMsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjFkNFwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDEsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIkdvYmxpblwiLFxuXHRcdHNpemU6IFwiU21hbGxcIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJodW1hbm9pZFwiLFxuXHRcdHN1YnR5cGU6IFwiZ29ibGlub2lkXCIsXG5cdFx0YWxpZ25tZW50OiBcIm5ldXRyYWwgZXZpbFwiLFxuXHRcdGFjOiAxNSxcblx0XHRocDogNyxcblx0XHRoaXRfZGljZTogXCIyZDZcIixcblx0XHRzcGVlZDogXCIzMCBmdC5cIixcblx0XHRzdGF0czogWzgsIDE0LCAxMCwgMTAsIDgsIDhdLFxuXHRcdHNraWxsc2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0c3RlYWx0aDogNixcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcblx0XHRzZW5zZXM6IFwiZGFya3Zpc2lvbiA2MCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiA5XCIsXG5cdFx0bGFuZ3VhZ2VzOiBcIkNvbW1vbiwgR29ibGluXCIsXG5cdFx0Y3I6IFwiMS80XCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTmltYmxlIEVzY2FwZVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBnb2JsaW4gY2FuIHRha2UgdGhlIERpc2VuZ2FnZSBvciBIaWRlIGFjdGlvbiBhcyBhIGJvbnVzIGFjdGlvbiBvbiBlYWNoIG9mIGl0cyB0dXJucy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJTY2ltaXRhclwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs0IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogNSAoMWQ2ICsgMikgc2xhc2hpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDQsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjFkNlwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDIsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlNob3J0Ym93XCIsXG5cdFx0XHRcdGRlc2M6IFwiUmFuZ2VkIFdlYXBvbiBBdHRhY2s6ICs0IHRvIGhpdCwgcmFuZ2UgODAvMzIwIGZ0Liwgb25lIHRhcmdldC4gSGl0OiA1ICgxZDYgKyAyKSBwaWVyY2luZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNCxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMWQ2XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogMixcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiR29sZCBEcmFnb24gV3lybWxpbmdcIixcblx0XHRzaXplOiBcIk1lZGl1bVwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcImRyYWdvblwiLFxuXHRcdHN1YnR5cGU6IFwiXCIsXG5cdFx0YWxpZ25tZW50OiBcImxhd2Z1bCBnb29kXCIsXG5cdFx0YWM6IDE3LFxuXHRcdGhwOiA2MCxcblx0XHRoaXRfZGljZTogXCI4ZDhcIixcblx0XHRzcGVlZDogXCIzMCBmdC4sIGZseSA2MCBmdC4sIHN3aW0gMzAgZnQuXCIsXG5cdFx0c3RhdHM6IFsxOSwgMTQsIDE3LCAxNCwgMTEsIDE2XSxcblx0XHRzYXZlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRkZXh0ZXJpdHk6IDQsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRjb25zdGl0dXRpb246IDUsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHR3aXNkb206IDIsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRjaGFyaXNtYTogNSxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRza2lsbHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdHBlcmNlcHRpb246IDQsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRzdGVhbHRoOiA0LFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuXHRcdGRhbWFnZV9pbW11bml0aWVzOiBcImZpcmVcIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcblx0XHRzZW5zZXM6IFwiYmxpbmRzaWdodCAxMCBmdC4sIGRhcmt2aXNpb24gNjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTRcIixcblx0XHRsYW5ndWFnZXM6IFwiRHJhY29uaWNcIixcblx0XHRjcjogXCIzXCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQW1waGliaW91c1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBkcmFnb24gY2FuIGJyZWF0aGUgYWlyIGFuZCB3YXRlci5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJCaXRlXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzYgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiA5ICgxZDEwICsgNCkgcGllcmNpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDYsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjFkMTBcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiA0LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJCcmVhdGggV2VhcG9ucyAoUmVjaGFyZ2UgNS02KVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBkcmFnb24gdXNlcyBvbmUgb2YgdGhlIGZvbGxvd2luZyBicmVhdGggd2VhcG9ucy5cXG5GaXJlIEJyZWF0aC4gVGhlIGRyYWdvbiBleGhhbGVzIGZpcmUgaW4gYSAxNS1mb290IGNvbmUuIEVhY2ggY3JlYXR1cmUgaW4gdGhhdCBhcmVhIG11c3QgbWFrZSBhIERDIDEzIERleHRlcml0eSBzYXZpbmcgdGhyb3csIHRha2luZyAyMiAoNGQxMCkgZmlyZSBkYW1hZ2Ugb24gYSBmYWlsZWQgc2F2ZSwgb3IgaGFsZiBhcyBtdWNoIGRhbWFnZSBvbiBhIHN1Y2Nlc3NmdWwgb25lLlxcbldlYWtlbmluZyBCcmVhdGguIFRoZSBkcmFnb24gZXhoYWxlcyBnYXMgaW4gYSAxNS1mb290IGNvbmUuIEVhY2ggY3JlYXR1cmUgaW4gdGhhdCBhcmVhIG11c3Qgc3VjY2VlZCBvbiBhIERDIDEzIFN0cmVuZ3RoIHNhdmluZyB0aHJvdyBvciBoYXZlIGRpc2FkdmFudGFnZSBvbiBTdHJlbmd0aC1iYXNlZCBhdHRhY2sgcm9sbHMsIFN0cmVuZ3RoIGNoZWNrcywgYW5kIFN0cmVuZ3RoIHNhdmluZyB0aHJvd3MgZm9yIDEgbWludXRlLiBBIGNyZWF0dXJlIGNhbiByZXBlYXQgdGhlIHNhdmluZyB0aHJvdyBhdCB0aGUgZW5kIG9mIGVhY2ggb2YgaXRzIHR1cm5zLCBlbmRpbmcgdGhlIGVmZmVjdCBvbiBpdHNlbGYgb24gYSBzdWNjZXNzLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjRkMTBcIixcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiR29yZ29uXCIsXG5cdFx0c2l6ZTogXCJMYXJnZVwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcIm1vbnN0cm9zaXR5XCIsXG5cdFx0c3VidHlwZTogXCJcIixcblx0XHRhbGlnbm1lbnQ6IFwidW5hbGlnbmVkXCIsXG5cdFx0YWM6IDE5LFxuXHRcdGhwOiAxMTQsXG5cdFx0aGl0X2RpY2U6IFwiMTJkMTBcIixcblx0XHRzcGVlZDogXCI0MCBmdC5cIixcblx0XHRzdGF0czogWzIwLCAxMSwgMTgsIDIsIDEyLCA3XSxcblx0XHRza2lsbHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdHBlcmNlcHRpb246IDQsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwicGV0cmlmaWVkXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0c2Vuc2VzOiBcImRhcmt2aXNpb24gNjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTRcIixcblx0XHRsYW5ndWFnZXM6IFwiXCIsXG5cdFx0Y3I6IFwiNVwiLFxuXHRcdHRyYWl0czogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlRyYW1wbGluZyBDaGFyZ2VcIixcblx0XHRcdFx0ZGVzYzogXCJJZiB0aGUgZ29yZ29uIG1vdmVzIGF0IGxlYXN0IDIwIGZlZXQgc3RyYWlnaHQgdG93YXJkIGEgY3JlYXR1cmUgYW5kIHRoZW4gaGl0cyBpdCB3aXRoIGEgZ29yZSBhdHRhY2sgb24gdGhlIHNhbWUgdHVybiwgdGhhdCB0YXJnZXQgbXVzdCBzdWNjZWVkIG9uIGEgREMgMTYgU3RyZW5ndGggc2F2aW5nIHRocm93IG9yIGJlIGtub2NrZWQgcHJvbmUuIElmIHRoZSB0YXJnZXQgaXMgcHJvbmUsIHRoZSBnb3Jnb24gY2FuIG1ha2Ugb25lIGF0dGFjayB3aXRoIGl0cyBob292ZXMgYWdhaW5zdCBpdCBhcyBhIGJvbnVzIGFjdGlvbi5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJHb3JlXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzggdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxOCAoMmQxMiArIDUpIHBpZXJjaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA4LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIyZDEyXCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogNSxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiSG9vdmVzXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzggdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxNiAoMmQxMCArIDUpIGJsdWRnZW9uaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA4LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIyZDEwXCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogNSxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiUGV0cmlmeWluZyBCcmVhdGggKFJlY2hhcmdlIDUtNilcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgZ29yZ29uIGV4aGFsZXMgcGV0cmlmeWluZyBnYXMgaW4gYSAzMC1mb290IGNvbmUuIEVhY2ggY3JlYXR1cmUgaW4gdGhhdCBhcmVhIG11c3Qgc3VjY2VlZCBvbiBhIERDIDEzIENvbnN0aXR1dGlvbiBzYXZpbmcgdGhyb3cuIE9uIGEgZmFpbGVkIHNhdmUsIGEgdGFyZ2V0IGJlZ2lucyB0byB0dXJuIHRvIHN0b25lIGFuZCBpcyByZXN0cmFpbmVkLiBUaGUgcmVzdHJhaW5lZCB0YXJnZXQgbXVzdCByZXBlYXQgdGhlIHNhdmluZyB0aHJvdyBhdCB0aGUgZW5kIG9mIGl0cyBuZXh0IHR1cm4uIE9uIGEgc3VjY2VzcywgdGhlIGVmZmVjdCBlbmRzIG9uIHRoZSB0YXJnZXQuIE9uIGEgZmFpbHVyZSwgdGhlIHRhcmdldCBpcyBwZXRyaWZpZWQgdW50aWwgZnJlZWQgYnkgdGhlIGdyZWF0ZXIgcmVzdG9yYXRpb24gc3BlbGwgb3Igb3RoZXIgbWFnaWMuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiR3JheSBPb3plXCIsXG5cdFx0c2l6ZTogXCJNZWRpdW1cIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJvb3plXCIsXG5cdFx0c3VidHlwZTogXCJcIixcblx0XHRhbGlnbm1lbnQ6IFwidW5hbGlnbmVkXCIsXG5cdFx0YWM6IDgsXG5cdFx0aHA6IDIyLFxuXHRcdGhpdF9kaWNlOiBcIjNkOFwiLFxuXHRcdHNwZWVkOiBcIjEwIGZ0LiwgY2xpbWIgMTAgZnQuXCIsXG5cdFx0c3RhdHM6IFsxMiwgNiwgMTYsIDEsIDYsIDJdLFxuXHRcdHNraWxsc2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0c3RlYWx0aDogMixcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJhY2lkLCBjb2xkLCBmaXJlXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6XG5cdFx0XHRcImJsaW5kZWQsIGNoYXJtZWQsIGRlYWZlbmVkLCBleGhhdXN0aW9uLCBmcmlnaHRlbmVkLCBwcm9uZVwiLFxuXHRcdHNlbnNlczogXCJibGluZHNpZ2h0IDYwIGZ0LiAoYmxpbmQgYmV5b25kIHRoaXMgcmFkaXVzKSwgcGFzc2l2ZSBQZXJjZXB0aW9uIDhcIixcblx0XHRsYW5ndWFnZXM6IFwiXCIsXG5cdFx0Y3I6IFwiMS8yXCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQW1vcnBob3VzXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIG9vemUgY2FuIG1vdmUgdGhyb3VnaCBhIHNwYWNlIGFzIG5hcnJvdyBhcyAxIGluY2ggd2lkZSB3aXRob3V0IHNxdWVlemluZy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJDb3Jyb2RlIE1ldGFsXCIsXG5cdFx0XHRcdGRlc2M6IFwiQW55IG5vbm1hZ2ljYWwgd2VhcG9uIG1hZGUgb2YgbWV0YWwgdGhhdCBoaXRzIHRoZSBvb3plIGNvcnJvZGVzLiBBZnRlciBkZWFsaW5nIGRhbWFnZSwgdGhlIHdlYXBvbiB0YWtlcyBhIHBlcm1hbmVudCBhbmQgY3VtdWxhdGl2ZSAtMSBwZW5hbHR5IHRvIGRhbWFnZSByb2xscy4gSWYgaXRzIHBlbmFsdHkgZHJvcHMgdG8gLTUsIHRoZSB3ZWFwb24gaXMgZGVzdHJveWVkLiBOb25tYWdpY2FsIGFtbXVuaXRpb24gbWFkZSBvZiBtZXRhbCB0aGF0IGhpdHMgdGhlIG9vemUgaXMgZGVzdHJveWVkIGFmdGVyIGRlYWxpbmcgZGFtYWdlLlxcblRoZSBvb3plIGNhbiBlYXQgdGhyb3VnaCAyLWluY2gtdGhpY2ssIG5vbm1hZ2ljYWwgbWV0YWwgaW4gMSByb3VuZC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJGYWxzZSBBcHBlYXJhbmNlXCIsXG5cdFx0XHRcdGRlc2M6IFwiV2hpbGUgdGhlIG9vemUgcmVtYWlucyBtb3Rpb25sZXNzLCBpdCBpcyBpbmRpc3Rpbmd1aXNoYWJsZSBmcm9tIGFuIG9pbHkgcG9vbCBvciB3ZXQgcm9jay5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJQc2V1ZG9wb2RcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMyB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDQgKDFkNiArIDEpIGJsdWRnZW9uaW5nIGRhbWFnZSBwbHVzIDcgKDJkNikgYWNpZCBkYW1hZ2UsIGFuZCBpZiB0aGUgdGFyZ2V0IGlzIHdlYXJpbmcgbm9ubWFnaWNhbCBtZXRhbCBhcm1vciwgaXRzIGFybW9yIGlzIHBhcnRseSBjb3Jyb2RlZCBhbmQgdGFrZXMgYSBwZXJtYW5lbnQgYW5kIGN1bXVsYXRpdmUgLTEgcGVuYWx0eSB0byB0aGUgQUMgaXQgb2ZmZXJzLiBUaGUgYXJtb3IgaXMgZGVzdHJveWVkIGlmIHRoZSBwZW5hbHR5IHJlZHVjZXMgaXRzIEFDIHRvIDEwLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDMsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjFkNlwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDEsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIkdyZWVuIERyYWdvbiBXeXJtbGluZ1wiLFxuXHRcdHNpemU6IFwiTWVkaXVtXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwiZHJhZ29uXCIsXG5cdFx0c3VidHlwZTogXCJcIixcblx0XHRhbGlnbm1lbnQ6IFwibGF3ZnVsIGV2aWxcIixcblx0XHRhYzogMTcsXG5cdFx0aHA6IDM4LFxuXHRcdGhpdF9kaWNlOiBcIjdkOFwiLFxuXHRcdHNwZWVkOiBcIjMwIGZ0LiwgZmx5IDYwIGZ0Liwgc3dpbSAzMCBmdC5cIixcblx0XHRzdGF0czogWzE1LCAxMiwgMTMsIDE0LCAxMSwgMTNdLFxuXHRcdHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdGRleHRlcml0eTogMyxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdGNvbnN0aXR1dGlvbjogMyxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHdpc2RvbTogMixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdGNoYXJpc21hOiAzLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdHNraWxsc2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0cGVyY2VwdGlvbjogNCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHN0ZWFsdGg6IDMsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwicG9pc29uXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwicG9pc29uZWRcIixcblx0XHRzZW5zZXM6IFwiYmxpbmRzaWdodCAxMCBmdC4sIGRhcmt2aXNpb24gNjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTRcIixcblx0XHRsYW5ndWFnZXM6IFwiRHJhY29uaWNcIixcblx0XHRjcjogXCIyXCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQW1waGliaW91c1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBkcmFnb24gY2FuIGJyZWF0aGUgYWlyIGFuZCB3YXRlci5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJCaXRlXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzQgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiA3ICgxZDEwICsgMikgcGllcmNpbmcgZGFtYWdlIHBsdXMgMyAoMWQ2KSBwb2lzb24gZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDQsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjFkMTAgKyAxZDZcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiAzLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJQb2lzb24gQnJlYXRoIChSZWNoYXJnZSA1LTYpXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGRyYWdvbiBleGhhbGVzIHBvaXNvbm91cyBnYXMgaW4gYSAxNS1mb290IGNvbmUuIEVhY2ggY3JlYXR1cmUgaW4gdGhhdCBhcmVhIG11c3QgbWFrZSBhIERDIDExIENvbnN0aXR1dGlvbiBzYXZpbmcgdGhyb3csIHRha2luZyAyMSAoNmQ2KSBwb2lzb24gZGFtYWdlIG9uIGEgZmFpbGVkIHNhdmUsIG9yIGhhbGYgYXMgbXVjaCBkYW1hZ2Ugb24gYSBzdWNjZXNzZnVsIG9uZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCI2ZDZcIixcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiR3JlZW4gSGFnXCIsXG5cdFx0c2l6ZTogXCJNZWRpdW1cIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJmZXlcIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJuZXV0cmFsIGV2aWxcIixcblx0XHRhYzogMTcsXG5cdFx0aHA6IDgyLFxuXHRcdGhpdF9kaWNlOiBcIjExZDhcIixcblx0XHRzcGVlZDogXCIzMCBmdC5cIixcblx0XHRzdGF0czogWzE4LCAxMiwgMTYsIDEzLCAxNCwgMTRdLFxuXHRcdHNraWxsc2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0YXJjYW5hOiAzLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0ZGVjZXB0aW9uOiA0LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0cGVyY2VwdGlvbjogNCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHN0ZWFsdGg6IDMsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0c2Vuc2VzOiBcImRhcmt2aXNpb24gNjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTRcIixcblx0XHRsYW5ndWFnZXM6IFwiQ29tbW9uLCBEcmFjb25pYywgU3lsdmFuXCIsXG5cdFx0Y3I6IFwiM1wiLFxuXHRcdHRyYWl0czogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkFtcGhpYmlvdXNcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgaGFnIGNhbiBicmVhdGhlIGFpciBhbmQgd2F0ZXIuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiSW5uYXRlIFNwZWxsY2FzdGluZ1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBoYWcncyBpbm5hdGUgc3BlbGxjYXN0aW5nIGFiaWxpdHkgaXMgQ2hhcmlzbWEgKHNwZWxsIHNhdmUgREMgMTIpLiBTaGUgY2FuIGlubmF0ZWx5IGNhc3QgdGhlIGZvbGxvd2luZyBzcGVsbHMsIHJlcXVpcmluZyBubyBtYXRlcmlhbCBjb21wb25lbnRzOlxcblxcbkF0IHdpbGw6IGRhbmNpbmcgbGlnaHRzLCBtaW5vciBpbGx1c2lvbiwgdmljaW91cyBtb2NrZXJ5XCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTWltaWNyeVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBoYWcgY2FuIG1pbWljIGFuaW1hbCBzb3VuZHMgYW5kIGh1bWFub2lkIHZvaWNlcy4gQSBjcmVhdHVyZSB0aGF0IGhlYXJzIHRoZSBzb3VuZHMgY2FuIHRlbGwgdGhleSBhcmUgaW1pdGF0aW9ucyB3aXRoIGEgc3VjY2Vzc2Z1bCBEQyAxNCBXaXNkb20gKEluc2lnaHQpIGNoZWNrLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkhhZyBDb3ZlblwiLFxuXHRcdFx0XHRkZXNjOiBcIldoZW4gaGFncyBtdXN0IHdvcmsgdG9nZXRoZXIsIHRoZXkgZm9ybSBjb3ZlbnMsIGluIHNwaXRlIG9mIHRoZWlyIHNlbGZpc2ggbmF0dXJlcy4gQSBjb3ZlbiBpcyBtYWRlIHVwIG9mIGhhZ3Mgb2YgYW55IHR5cGUsIGFsbCBvZiB3aG9tIGFyZSBlcXVhbHMgd2l0aGluIHRoZSBncm91cC4gSG93ZXZlciwgZWFjaCBvZiB0aGUgaGFncyBjb250aW51ZXMgdG8gZGVzaXJlIG1vcmUgcGVyc29uYWwgcG93ZXIuXFxuQSBjb3ZlbiBjb25zaXN0cyBvZiB0aHJlZSBoYWdzIHNvIHRoYXQgYW55IGFyZ3VtZW50cyBiZXR3ZWVuIHR3byBoYWdzIGNhbiBiZSBzZXR0bGVkIGJ5IHRoZSB0aGlyZC4gSWYgbW9yZSB0aGFuIHRocmVlIGhhZ3MgZXZlciBjb21lIHRvZ2V0aGVyLCBhcyBtaWdodCBoYXBwZW4gaWYgdHdvIGNvdmVucyBjb21lIGludG8gY29uZmxpY3QsIHRoZSByZXN1bHQgaXMgdXN1YWxseSBjaGFvcy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJTaGFyZWQgU3BlbGxjYXN0aW5nIChDb3ZlbiBPbmx5KVwiLFxuXHRcdFx0XHRkZXNjOiBcIldoaWxlIGFsbCB0aHJlZSBtZW1iZXJzIG9mIGEgaGFnIGNvdmVuIGFyZSB3aXRoaW4gMzAgZmVldCBvZiBvbmUgYW5vdGhlciwgdGhleSBjYW4gZWFjaCBjYXN0IHRoZSBmb2xsb3dpbmcgc3BlbGxzIGZyb20gdGhlIHdpemFyZCdzIHNwZWxsIGxpc3QgYnV0IG11c3Qgc2hhcmUgdGhlIHNwZWxsIHNsb3RzIGFtb25nIHRoZW1zZWx2ZXM6XFxuXFxuXHUyMDIyIDFzdCBsZXZlbCAoNCBzbG90cyk6IGlkZW50aWZ5LCByYXkgb2Ygc2lja25lc3NcXG5cdTIwMjIgMm5kIGxldmVsICgzIHNsb3RzKTogaG9sZCBwZXJzb24sIGxvY2F0ZSBvYmplY3RcXG5cdTIwMjIgM3JkIGxldmVsICgzIHNsb3RzKTogYmVzdG93IGN1cnNlLCBjb3VudGVyc3BlbGwsIGxpZ2h0bmluZyBib2x0XFxuXHUyMDIyIDR0aCBsZXZlbCAoMyBzbG90cyk6IHBoYW50YXNtYWwga2lsbGVyLCBwb2x5bW9ycGhcXG5cdTIwMjIgNXRoIGxldmVsICgyIHNsb3RzKTogY29udGFjdCBvdGhlciBwbGFuZSwgc2NyeWluZ1xcblx1MjAyMiA2dGggbGV2ZWwgKDEgc2xvdCk6IGV5ZSBiaXRlXFxuXFxuRm9yIGNhc3RpbmcgdGhlc2Ugc3BlbGxzLCBlYWNoIGhhZyBpcyBhIDEydGgtbGV2ZWwgc3BlbGxjYXN0ZXIgdGhhdCB1c2VzIEludGVsbGlnZW5jZSBhcyBoZXIgc3BlbGxjYXN0aW5nIGFiaWxpdHkuIFRoZSBzcGVsbCBzYXZlIERDIGlzIDEyK3RoZSBoYWcncyBJbnRlbGxpZ2VuY2UgbW9kaWZpZXIsIGFuZCB0aGUgc3BlbGwgYXR0YWNrIGJvbnVzIGlzIDQrdGhlIGhhZydzIEludGVsbGlnZW5jZSBtb2RpZmllci5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJIYWcgRXllIChDb3ZlbiBPbmx5KVwiLFxuXHRcdFx0XHRkZXNjOiBcIkEgaGFnIGNvdmVuIGNhbiBjcmFmdCBhIG1hZ2ljIGl0ZW0gY2FsbGVkIGEgaGFnIGV5ZSwgd2hpY2ggaXMgbWFkZSBmcm9tIGEgcmVhbCBleWUgY29hdGVkIGluIHZhcm5pc2ggYW5kIG9mdGVuIGZpdHRlZCB0byBhIHBlbmRhbnQgb3Igb3RoZXIgd2VhcmFibGUgaXRlbS4gVGhlIGhhZyBleWUgaXMgdXN1YWxseSBlbnRydXN0ZWQgdG8gYSBtaW5pb24gZm9yIHNhZmVrZWVwaW5nIGFuZCB0cmFuc3BvcnQuIEEgaGFnIGluIHRoZSBjb3ZlbiBjYW4gdGFrZSBhbiBhY3Rpb24gdG8gc2VlIHdoYXQgdGhlIGhhZyBleWUgc2VlcyBpZiB0aGUgaGFnIGV5ZSBpcyBvbiB0aGUgc2FtZSBwbGFuZSBvZiBleGlzdGVuY2UuIEEgaGFnIGV5ZSBoYXMgQUMgMTAsIDEgaGl0IHBvaW50LCBhbmQgZGFya3Zpc2lvbiB3aXRoIGEgcmFkaXVzIG9mIDYwIGZlZXQuIElmIGl0IGlzIGRlc3Ryb3llZCwgZWFjaCBjb3ZlbiBtZW1iZXIgdGFrZXMgM2QxMCBwc3ljaGljIGRhbWFnZSBhbmQgaXMgYmxpbmRlZCBmb3IgMjQgaG91cnMuXFxuQSBoYWcgY292ZW4gY2FuIGhhdmUgb25seSBvbmUgaGFnIGV5ZSBhdCBhIHRpbWUsIGFuZCBjcmVhdGluZyBhIG5ldyBvbmUgcmVxdWlyZXMgYWxsIHRocmVlIG1lbWJlcnMgb2YgdGhlIGNvdmVuIHRvIHBlcmZvcm0gYSByaXR1YWwuIFRoZSByaXR1YWwgdGFrZXMgMSBob3VyLCBhbmQgdGhlIGhhZ3MgY2FuJ3QgcGVyZm9ybSBpdCB3aGlsZSBibGluZGVkLiBEdXJpbmcgdGhlIHJpdHVhbCwgaWYgdGhlIGhhZ3MgdGFrZSBhbnkgYWN0aW9uIG90aGVyIHRoYW4gcGVyZm9ybWluZyB0aGUgcml0dWFsLCB0aGV5IG11c3Qgc3RhcnQgb3Zlci5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJDbGF3c1wiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs2IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTMgKDJkOCArIDQpIHNsYXNoaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA2LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIyZDhcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiA0LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJJbGx1c29yeSBBcHBlYXJhbmNlXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGhhZyBjb3ZlcnMgaGVyc2VsZiBhbmQgYW55dGhpbmcgc2hlIGlzIHdlYXJpbmcgb3IgY2Fycnlpbmcgd2l0aCBhIG1hZ2ljYWwgaWxsdXNpb24gdGhhdCBtYWtlcyBoZXIgbG9vayBsaWtlIGFub3RoZXIgY3JlYXR1cmUgb2YgaGVyIGdlbmVyYWwgc2l6ZSBhbmQgaHVtYW5vaWQgc2hhcGUuIFRoZSBpbGx1c2lvbiBlbmRzIGlmIHRoZSBoYWcgdGFrZXMgYSBib251cyBhY3Rpb24gdG8gZW5kIGl0IG9yIGlmIHNoZSBkaWVzLlxcblRoZSBjaGFuZ2VzIHdyb3VnaHQgYnkgdGhpcyBlZmZlY3QgZmFpbCB0byBob2xkIHVwIHRvIHBoeXNpY2FsIGluc3BlY3Rpb24uIEZvciBleGFtcGxlLCB0aGUgaGFnIGNvdWxkIGFwcGVhciB0byBoYXZlIHNtb290aCBza2luLCBidXQgc29tZW9uZSB0b3VjaGluZyBoZXIgd291bGQgZmVlbCBoZXIgcm91Z2ggZmxlc2guIE90aGVyd2lzZSwgYSBjcmVhdHVyZSBtdXN0IHRha2UgYW4gYWN0aW9uIHRvIHZpc3VhbGx5IGluc3BlY3QgdGhlIGlsbHVzaW9uIGFuZCBzdWNjZWVkIG9uIGEgREMgMjAgSW50ZWxsaWdlbmNlIChJbnZlc3RpZ2F0aW9uKSBjaGVjayB0byBkaXNjZXJuIHRoYXQgdGhlIGhhZyBpcyBkaXNndWlzZWQuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiSW52aXNpYmxlIFBhc3NhZ2VcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgaGFnIG1hZ2ljYWxseSB0dXJucyBpbnZpc2libGUgdW50aWwgc2hlIGF0dGFja3Mgb3IgY2FzdHMgYSBzcGVsbCwgb3IgdW50aWwgaGVyIGNvbmNlbnRyYXRpb24gZW5kcyAoYXMgaWYgY29uY2VudHJhdGluZyBvbiBhIHNwZWxsKS4gV2hpbGUgaW52aXNpYmxlLCBzaGUgbGVhdmVzIG5vIHBoeXNpY2FsIGV2aWRlbmNlIG9mIGhlciBwYXNzYWdlLCBzbyBzaGUgY2FuIGJlIHRyYWNrZWQgb25seSBieSBtYWdpYy4gQW55IGVxdWlwbWVudCBzaGUgd2VhcnMgb3IgY2FycmllcyBpcyBpbnZpc2libGUgd2l0aCBoZXIuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiR3JpY2tcIixcblx0XHRzaXplOiBcIk1lZGl1bVwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcIm1vbnN0cm9zaXR5XCIsXG5cdFx0c3VidHlwZTogXCJcIixcblx0XHRhbGlnbm1lbnQ6IFwibmV1dHJhbFwiLFxuXHRcdGFjOiAxNCxcblx0XHRocDogMjcsXG5cdFx0aGl0X2RpY2U6IFwiNmQ4XCIsXG5cdFx0c3BlZWQ6IFwiMzAgZnQuLCBjbGltYiAzMCBmdC5cIixcblx0XHRzdGF0czogWzE0LCAxNCwgMTEsIDMsIDE0LCA1XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczpcblx0XHRcdFwiYmx1ZGdlb25pbmcsIHBpZXJjaW5nLCBhbmQgc2xhc2hpbmcgZGFtYWdlIGZyb20gbm9ubWFnaWNhbCB3ZWFwb25zXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0c2Vuc2VzOiBcImRhcmt2aXNpb24gNjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTJcIixcblx0XHRsYW5ndWFnZXM6IFwiXCIsXG5cdFx0Y3I6IFwiMlwiLFxuXHRcdHRyYWl0czogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlN0b25lIENhbW91ZmxhZ2VcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgZ3JpY2sgaGFzIGFkdmFudGFnZSBvbiBEZXh0ZXJpdHkgKFN0ZWFsdGgpIGNoZWNrcyBtYWRlIHRvIGhpZGUgaW4gcm9ja3kgdGVycmFpbi5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJNdWx0aWF0dGFja1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBncmljayBtYWtlcyBvbmUgYXR0YWNrIHdpdGggaXRzIHRlbnRhY2xlcy4gSWYgdGhhdCBhdHRhY2sgaGl0cywgdGhlIGdyaWNrIGNhbiBtYWtlIG9uZSBiZWFrIGF0dGFjayBhZ2FpbnN0IHRoZSBzYW1lIHRhcmdldC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJUZW50YWNsZXNcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNCB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDkgKDJkNiArIDIpIHNsYXNoaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA0LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIyZDZcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiAyLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJCZWFrXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzQgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiA1ICgxZDYgKyAyKSBwaWVyY2luZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNCxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMWQ2XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogMixcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiR3JpZmZvblwiLFxuXHRcdHNpemU6IFwiTGFyZ2VcIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJtb25zdHJvc2l0eVwiLFxuXHRcdHN1YnR5cGU6IFwiXCIsXG5cdFx0YWxpZ25tZW50OiBcInVuYWxpZ25lZFwiLFxuXHRcdGFjOiAxMixcblx0XHRocDogNTksXG5cdFx0aGl0X2RpY2U6IFwiN2QxMFwiLFxuXHRcdHNwZWVkOiBcIjMwIGZ0LiwgZmx5IDgwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbMTgsIDE1LCAxNiwgMiwgMTMsIDhdLFxuXHRcdHNraWxsc2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0cGVyY2VwdGlvbjogNSxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcblx0XHRzZW5zZXM6IFwiZGFya3Zpc2lvbiA2MCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxNVwiLFxuXHRcdGxhbmd1YWdlczogXCJcIixcblx0XHRjcjogXCIyXCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiS2VlbiBTaWdodFwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBncmlmZm9uIGhhcyBhZHZhbnRhZ2Ugb24gV2lzZG9tIChQZXJjZXB0aW9uKSBjaGVja3MgdGhhdCByZWx5IG9uIHNpZ2h0LlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGdyaWZmb24gbWFrZXMgdHdvIGF0dGFja3M6IG9uZSB3aXRoIGl0cyBiZWFrIGFuZCBvbmUgd2l0aCBpdHMgY2xhd3MuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQmVha1wiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs2IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogOCAoMWQ4ICsgNCkgcGllcmNpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDYsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjFkOFwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDQsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkNsYXdzXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzYgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxMSAoMmQ2ICsgNCkgc2xhc2hpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDYsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjJkNlwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDQsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIkdyaW1sb2NrXCIsXG5cdFx0c2l6ZTogXCJNZWRpdW1cIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJodW1hbm9pZFwiLFxuXHRcdHN1YnR5cGU6IFwiZ3JpbWxvY2tcIixcblx0XHRhbGlnbm1lbnQ6IFwibmV1dHJhbCBldmlsXCIsXG5cdFx0YWM6IDExLFxuXHRcdGhwOiAxMSxcblx0XHRoaXRfZGljZTogXCIyZDhcIixcblx0XHRzcGVlZDogXCIzMCBmdC5cIixcblx0XHRzdGF0czogWzE2LCAxMiwgMTIsIDksIDgsIDZdLFxuXHRcdHNraWxsc2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0YXRobGV0aWNzOiA1LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0cGVyY2VwdGlvbjogMyxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHN0ZWFsdGg6IDMsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiYmxpbmRlZFwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuXHRcdHNlbnNlczogXCJibGluZHNpZ2h0IDMwIGZ0LiBvciAxMCBmdC4gd2hpbGUgZGVhZmVuZWQgKGJsaW5kIGJleW9uZCB0aGlzIHJhZGl1cyksIHBhc3NpdmUgUGVyY2VwdGlvbiAxM1wiLFxuXHRcdGxhbmd1YWdlczogXCJVbmRlcmNvbW1vblwiLFxuXHRcdGNyOiBcIjEvNFwiLFxuXHRcdHRyYWl0czogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkJsaW5kIFNlbnNlc1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBncmltbG9jayBjYW4ndCB1c2UgaXRzIGJsaW5kc2lnaHQgd2hpbGUgZGVhZmVuZWQgYW5kIHVuYWJsZSB0byBzbWVsbC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJLZWVuIEhlYXJpbmcgYW5kIFNtZWxsXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGdyaW1sb2NrIGhhcyBhZHZhbnRhZ2Ugb24gV2lzZG9tIChQZXJjZXB0aW9uKSBjaGVja3MgdGhhdCByZWx5IG9uIGhlYXJpbmcgb3Igc21lbGwuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiU3RvbmUgQ2Ftb3VmbGFnZVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBncmltbG9jayBoYXMgYWR2YW50YWdlIG9uIERleHRlcml0eSAoU3RlYWx0aCkgY2hlY2tzIG1hZGUgdG8gaGlkZSBpbiByb2NreSB0ZXJyYWluLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlNwaWtlZCBCb25lIENsdWJcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNSB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDUgKDFkNCArIDMpIGJsdWRnZW9uaW5nIGRhbWFnZSBwbHVzIDIgKDFkNCkgcGllcmNpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDUsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjFkNCArIDFkNFwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDUsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIkd1YXJkXCIsXG5cdFx0c2l6ZTogXCJNZWRpdW1cIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJodW1hbm9pZFwiLFxuXHRcdHN1YnR5cGU6IFwiYW55IHJhY2VcIixcblx0XHRhbGlnbm1lbnQ6IFwiYW55IGFsaWdubWVudFwiLFxuXHRcdGFjOiAxNixcblx0XHRocDogMTEsXG5cdFx0aGl0X2RpY2U6IFwiMmQ4XCIsXG5cdFx0c3BlZWQ6IFwiMzAgZnQuXCIsXG5cdFx0c3RhdHM6IFsxMywgMTIsIDEyLCAxMCwgMTEsIDEwXSxcblx0XHRza2lsbHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdHBlcmNlcHRpb246IDIsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0c2Vuc2VzOiBcInBhc3NpdmUgUGVyY2VwdGlvbiAxMlwiLFxuXHRcdGxhbmd1YWdlczogXCJhbnkgb25lIGxhbmd1YWdlICh1c3VhbGx5IENvbW1vbilcIixcblx0XHRjcjogXCIxLzhcIixcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiU3BlYXJcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBvciBSYW5nZWQgV2VhcG9uIEF0dGFjazogKzMgdG8gaGl0LCByZWFjaCA1IGZ0LiBvciByYW5nZSAyMC82MCBmdC4sIG9uZSB0YXJnZXQuIEhpdDogNCAoMWQ2ICsgMSkgcGllcmNpbmcgZGFtYWdlIG9yIDUgKDFkOCArIDEpIHBpZXJjaW5nIGRhbWFnZSBpZiB1c2VkIHdpdGggdHdvIGhhbmRzIHRvIG1ha2UgYSBtZWxlZSBhdHRhY2suXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMyxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMWQ2XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogMSxcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiR3VhcmRpYW4gTmFnYVwiLFxuXHRcdHNpemU6IFwiTGFyZ2VcIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJtb25zdHJvc2l0eVwiLFxuXHRcdHN1YnR5cGU6IFwiXCIsXG5cdFx0YWxpZ25tZW50OiBcImxhd2Z1bCBnb29kXCIsXG5cdFx0YWM6IDE4LFxuXHRcdGhwOiAxMjcsXG5cdFx0aGl0X2RpY2U6IFwiMTVkMTBcIixcblx0XHRzcGVlZDogXCI0MCBmdC5cIixcblx0XHRzdGF0czogWzE5LCAxOCwgMTYsIDE2LCAxOSwgMThdLFxuXHRcdHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdGRleHRlcml0eTogOCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdGNvbnN0aXR1dGlvbjogNyxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdGludGVsbGlnZW5jZTogNyxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHdpc2RvbTogOCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdGNoYXJpc21hOiA4LFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuXHRcdGRhbWFnZV9pbW11bml0aWVzOiBcInBvaXNvblwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcImNoYXJtZWQsIHBvaXNvbmVkXCIsXG5cdFx0c2Vuc2VzOiBcImRhcmt2aXNpb24gNjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTRcIixcblx0XHRsYW5ndWFnZXM6IFwiQ2VsZXN0aWFsLCBDb21tb25cIixcblx0XHRjcjogXCIxMFwiLFxuXHRcdHRyYWl0czogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlJlanV2ZW5hdGlvblwiLFxuXHRcdFx0XHRkZXNjOiBcIklmIGl0IGRpZXMsIHRoZSBuYWdhIHJldHVybnMgdG8gbGlmZSBpbiAxZDYgZGF5cyBhbmQgcmVnYWlucyBhbGwgaXRzIGhpdCBwb2ludHMuIE9ubHkgYSB3aXNoIHNwZWxsIGNhbiBwcmV2ZW50IHRoaXMgdHJhaXQgZnJvbSBmdW5jdGlvbmluZy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJCaXRlXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzggdG8gaGl0LCByZWFjaCAxMCBmdC4sIG9uZSBjcmVhdHVyZS4gSGl0OiA4ICgxZDggKyA0KSBwaWVyY2luZyBkYW1hZ2UsIGFuZCB0aGUgdGFyZ2V0IG11c3QgbWFrZSBhIERDIDE1IENvbnN0aXR1dGlvbiBzYXZpbmcgdGhyb3csIHRha2luZyA0NSAoMTBkOCkgcG9pc29uIGRhbWFnZSBvbiBhIGZhaWxlZCBzYXZlLCBvciBoYWxmIGFzIG11Y2ggZGFtYWdlIG9uIGEgc3VjY2Vzc2Z1bCBvbmUuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogOCxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMWQ4XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogNCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiU3BpdCBQb2lzb25cIixcblx0XHRcdFx0ZGVzYzogXCJSYW5nZWQgV2VhcG9uIEF0dGFjazogKzggdG8gaGl0LCByYW5nZSAxNS8zMCBmdC4sIG9uZSBjcmVhdHVyZS4gSGl0OiBUaGUgdGFyZ2V0IG11c3QgbWFrZSBhIERDIDE1IENvbnN0aXR1dGlvbiBzYXZpbmcgdGhyb3csIHRha2luZyA0NSAoMTBkOCkgcG9pc29uIGRhbWFnZSBvbiBhIGZhaWxlZCBzYXZlLCBvciBoYWxmIGFzIG11Y2ggZGFtYWdlIG9uIGEgc3VjY2Vzc2Z1bCBvbmUuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogOCxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMTBkOFwiLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdHNwZWxsczogW1xuXHRcdFx0XCJUaGUgbmFnYSBpcyBhbiAxMXRoLWxldmVsIHNwZWxsY2FzdGVyLiBJdHMgc3BlbGxjYXN0aW5nIGFiaWxpdHkgaXMgV2lzZG9tIChzcGVsbCBzYXZlIERDIDE2LCArOCB0byBoaXQgd2l0aCBzcGVsbCBhdHRhY2tzKSwgYW5kIGl0IG5lZWRzIG9ubHkgdmVyYmFsIGNvbXBvbmVudHMgdG8gY2FzdCBpdHMgc3BlbGxzLiBJdCBoYXMgdGhlIGZvbGxvd2luZyBjbGVyaWMgc3BlbGxzIHByZXBhcmVkOlwiLFxuXHRcdFx0e1xuXHRcdFx0XHRcIkNhbnRyaXBzIChhdCB3aWxsKVwiOiBcIm1lbmRpbmcsIHNhY3JlZCBmbGFtZSwgdGhhdW1hdHVyZ3lcIixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdFwiMXN0IGxldmVsICg0IHNsb3RzKVwiOiBcImNvbW1hbmQsIGN1cmUgd291bmRzLCBzaGllbGQgb2YgZmFpdGhcIixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdFwiMm5kIGxldmVsICgzIHNsb3RzKVwiOiBcImNhbG0gZW1vdGlvbnMsIGhvbGQgcGVyc29uXCIsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRcIjNyZCBsZXZlbCAoMyBzbG90cylcIjogXCJiZXN0b3cgY3Vyc2UsIGNsYWlydm95YW5jZVwiLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0XCI0dGggbGV2ZWwgKDMgc2xvdHMpXCI6IFwiYmFuaXNobWVudCwgZnJlZWRvbSBvZiBtb3ZlbWVudFwiLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0XCI1dGggbGV2ZWwgKDIgc2xvdHMpXCI6IFwiZmxhbWUgc3RyaWtlLCBnZWFzXCIsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRcIjZ0aCBsZXZlbCAoMSBzbG90KVwiOiBcInRydWUgc2VlaW5nXCIsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIkd5bm9zcGhpbnhcIixcblx0XHRzaXplOiBcIkxhcmdlXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwibW9uc3Ryb3NpdHlcIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJsYXdmdWwgbmV1dHJhbFwiLFxuXHRcdGFjOiAxNyxcblx0XHRocDogMTM2LFxuXHRcdGhpdF9kaWNlOiBcIjE2ZDEwXCIsXG5cdFx0c3BlZWQ6IFwiNDAgZnQuLCBmbHkgNjAgZnQuXCIsXG5cdFx0c3RhdHM6IFsxOCwgMTUsIDE2LCAxOCwgMTgsIDE4XSxcblx0XHRza2lsbHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdGFyY2FuYTogMTIsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRoaXN0b3J5OiAxMixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHBlcmNlcHRpb246IDgsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRyZWxpZ2lvbjogOCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczpcblx0XHRcdFwiYmx1ZGdlb25pbmcsIHBpZXJjaW5nLCBhbmQgc2xhc2hpbmcgZnJvbSBub25tYWdpY2FsIHdlYXBvbnNcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJwc3ljaGljXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiY2hhcm1lZCwgZnJpZ2h0ZW5lZFwiLFxuXHRcdHNlbnNlczogXCJ0cnVlc2lnaHQgMTIwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDE4XCIsXG5cdFx0bGFuZ3VhZ2VzOiBcIkNvbW1vbiwgU3BoaW54XCIsXG5cdFx0Y3I6IFwiMTFcIixcblx0XHR0cmFpdHM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJJbnNjcnV0YWJsZVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBzcGhpbnggaXMgaW1tdW5lIHRvIGFueSBlZmZlY3QgdGhhdCB3b3VsZCBzZW5zZSBpdHMgZW1vdGlvbnMgb3IgcmVhZCBpdHMgdGhvdWdodHMsIGFzIHdlbGwgYXMgYW55IGRpdmluYXRpb24gc3BlbGwgdGhhdCBpdCByZWZ1c2VzLiBXaXNkb20gKEluc2lnaHQpIGNoZWNrcyBtYWRlIHRvIGFzY2VydGFpbiB0aGUgc3BoaW54J3MgaW50ZW50aW9ucyBvciBzaW5jZXJpdHkgaGF2ZSBkaXNhZHZhbnRhZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTWFnaWMgV2VhcG9uc1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBzcGhpbngncyB3ZWFwb24gYXR0YWNrcyBhcmUgbWFnaWNhbC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJNdWx0aWF0dGFja1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBzcGhpbnggbWFrZXMgdHdvIGNsYXcgYXR0YWNrcy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJDbGF3XCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzkgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxMyAoMmQ4ICsgNCkgc2xhc2hpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDksXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjJkOFwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDQsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0bGVnZW5kYXJ5X2FjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJDbGF3IEF0dGFja1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBzcGhpbnggbWFrZXMgb25lIGNsYXcgYXR0YWNrLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlRlbGVwb3J0IChDb3N0cyAyIEFjdGlvbnMpXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIHNwaGlueCBtYWdpY2FsbHkgdGVsZXBvcnRzLCBhbG9uZyB3aXRoIGFueSBlcXVpcG1lbnQgaXQgaXMgd2VhcmluZyBvciBjYXJyeWluZywgdXAgdG8gMTIwIGZlZXQgdG8gYW4gdW5vY2N1cGllZCBzcGFjZSBpdCBjYW4gc2VlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkNhc3QgYSBTcGVsbCAoQ29zdHMgMyBBY3Rpb25zKVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBzcGhpbnggY2FzdHMgYSBzcGVsbCBmcm9tIGl0cyBsaXN0IG9mIHByZXBhcmVkIHNwZWxscywgdXNpbmcgYSBzcGVsbCBzbG90IGFzIG5vcm1hbC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdHNwZWxsczogW1xuXHRcdFx0XCJUaGUgc3BoaW54IGlzIGEgOXRoLWxldmVsIHNwZWxsY2FzdGVyLiBJdHMgc3BlbGxjYXN0aW5nIGFiaWxpdHkgaXMgSW50ZWxsaWdlbmNlIChzcGVsbCBzYXZlIERDIDE2LCArOCB0byBoaXQgd2l0aCBzcGVsbCBhdHRhY2tzKS4gSXQgcmVxdWlyZXMgbm8gbWF0ZXJpYWwgY29tcG9uZW50cyB0byBjYXN0IGl0cyBzcGVsbHMuIFRoZSBzcGhpbnggaGFzIHRoZSBmb2xsb3dpbmcgd2l6YXJkIHNwZWxscyBwcmVwYXJlZDpcIixcblx0XHRcdHtcblx0XHRcdFx0XCJDYW50cmlwcyAoYXQgd2lsbClcIjpcblx0XHRcdFx0XHRcIm1hZ2UgaGFuZCwgbWlub3IgaWxsdXNpb24sIHByZXN0aWRpZ2l0YXRpb25cIixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdFwiMXN0IGxldmVsICg0IHNsb3RzKVwiOiBcImRldGVjdCBtYWdpYywgaWRlbnRpZnksIHNoaWVsZFwiLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0XCIybmQgbGV2ZWwgKDMgc2xvdHMpXCI6IFwiZGFya25lc3MsIGxvY2F0ZSBvYmplY3QsIHN1Z2dlc3Rpb25cIixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdFwiM3JkIGxldmVsICgzIHNsb3RzKVwiOiBcImRpc3BlbCBtYWdpYywgcmVtb3ZlIGN1cnNlLCB0b25ndWVzXCIsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRcIjR0aCBsZXZlbCAoMyBzbG90cylcIjogXCJiYW5pc2htZW50LCBncmVhdGVyIGludmlzaWJpbGl0eVwiLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0XCI1dGggbGV2ZWwgKDEgc2xvdClcIjogXCJsZWdlbmQgbG9yZVwiLFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJIYWxmLVJlZCBEcmFnb24gVmV0ZXJhblwiLFxuXHRcdHNpemU6IFwiTWVkaXVtXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwiaHVtYW5vaWRcIixcblx0XHRzdWJ0eXBlOiBcImh1bWFuXCIsXG5cdFx0YWxpZ25tZW50OiBcImFueSBhbGlnbm1lbnRcIixcblx0XHRhYzogMTgsXG5cdFx0aHA6IDY1LFxuXHRcdGhpdF9kaWNlOiBcIjEwZDhcIixcblx0XHRzcGVlZDogXCIzMCBmdC5cIixcblx0XHRzdGF0czogWzE2LCAxMywgMTQsIDEwLCAxMSwgMTBdLFxuXHRcdGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX3Jlc2lzdGFuY2VzOiBcImZpcmVcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcblx0XHRzZW5zZXM6IFwiYmxpbmRzaWdodCAxMCBmdC4sIGRhcmt2aXNpb24gNjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTJcIixcblx0XHRsYW5ndWFnZXM6IFwiQ29tbW9uLCBEcmFjb25pY1wiLFxuXHRcdGNyOiBcIjVcIixcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgdmV0ZXJhbiBtYWtlcyB0d28gbG9uZ3N3b3JkIGF0dGFja3MuIElmIGl0IGhhcyBhIHNob3J0c3dvcmQgZHJhd24sIGl0IGNhbiBhbHNvIG1ha2UgYSBzaG9ydHN3b3JkIGF0dGFjay5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJMb25nc3dvcmRcIixcblx0XHRcdFx0ZGVzYzogXCJXZWFwb24gQXR0YWNrOiArNSB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDcgKDFkOCArIDMpIHNsYXNoaW5nIGRhbWFnZSwgb3IgOCAoMWQxMCArIDMpIHNsYXNoaW5nIGRhbWFnZSBpZiB1c2VkIHdpdGggdHdvIGhhbmRzLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDUsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjFkOFwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDMsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlNob3J0c3dvcmRcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNSB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDYgKDFkNiArIDMpIHBpZXJjaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA1LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxZDZcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiAzLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJIZWF2eSBDcm9zc2Jvd1wiLFxuXHRcdFx0XHRkZXNjOiBcIlJhbmdlZCBXZWFwb24gQXR0YWNrOiArMyB0byBoaXQsIHJhbmdlIDEwMC80MDAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDYgKDFkMTAgKyAxKSBwaWVyY2luZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMyxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMWQxMFwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDEsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkZpcmUgQnJlYXRoIChSZWNoYXJnZSA1LTYpXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIHZldGVyYW4gZXhoYWxlcyBmaXJlIGluIGEgMTUtZm9vdCBjb25lLiBFYWNoIGNyZWF0dXJlIGluIHRoYXQgYXJlYSBtdXN0IG1ha2UgYSBEQyAxNSBEZXh0ZXJpdHkgc2F2aW5nIHRocm93LCB0YWtpbmcgMjQgKDdkNikgZmlyZSBkYW1hZ2Ugb24gYSBmYWlsZWQgc2F2ZSwgb3IgaGFsZiBhcyBtdWNoIGRhbWFnZSBvbiBhIHN1Y2Nlc3NmdWwgb25lLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjdkNlwiLFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJIYXJweVwiLFxuXHRcdHNpemU6IFwiTWVkaXVtXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwibW9uc3Ryb3NpdHlcIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJjaGFvdGljIGV2aWxcIixcblx0XHRhYzogMTEsXG5cdFx0aHA6IDM4LFxuXHRcdGhpdF9kaWNlOiBcIjdkOFwiLFxuXHRcdHNwZWVkOiBcIjIwIGZ0LiwgZmx5IDQwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbMTIsIDEzLCAxMiwgNywgMTAsIDEzXSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcblx0XHRzZW5zZXM6IFwicGFzc2l2ZSBQZXJjZXB0aW9uIDEwXCIsXG5cdFx0bGFuZ3VhZ2VzOiBcIkNvbW1vblwiLFxuXHRcdGNyOiBcIjFcIixcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgaGFycHkgbWFrZXMgdHdvIGF0dGFja3M6IG9uZSB3aXRoIGl0cyBjbGF3cyBhbmQgb25lIHdpdGggaXRzIGNsdWIuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQ2xhd3NcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMyB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDYgKDJkNCArIDEpIHNsYXNoaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAzLFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIyZDRcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiAxLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJDbHViXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzMgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAzICgxZDQgKyAxKSBibHVkZ2VvbmluZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMyxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMWQ0XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogMSxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTHVyaW5nIFNvbmdcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgaGFycHkgc2luZ3MgYSBtYWdpY2FsIG1lbG9keS4gRXZlcnkgaHVtYW5vaWQgYW5kIGdpYW50IHdpdGhpbiAzMDAgZnQuIG9mIHRoZSBoYXJweSB0aGF0IGNhbiBoZWFyIHRoZSBzb25nIG11c3Qgc3VjY2VlZCBvbiBhIERDIDExIFdpc2RvbSBzYXZpbmcgdGhyb3cgb3IgYmUgY2hhcm1lZCB1bnRpbCB0aGUgc29uZyBlbmRzLiBUaGUgaGFycHkgbXVzdCB0YWtlIGEgYm9udXMgYWN0aW9uIG9uIGl0cyBzdWJzZXF1ZW50IHR1cm5zIHRvIGNvbnRpbnVlIHNpbmdpbmcuIEl0IGNhbiBzdG9wIHNpbmdpbmcgYXQgYW55IHRpbWUuIFRoZSBzb25nIGVuZHMgaWYgdGhlIGhhcnB5IGlzIGluY2FwYWNpdGF0ZWQuXFxuV2hpbGUgY2hhcm1lZCBieSB0aGUgaGFycHksIGEgdGFyZ2V0IGlzIGluY2FwYWNpdGF0ZWQgYW5kIGlnbm9yZXMgdGhlIHNvbmdzIG9mIG90aGVyIGhhcnBpZXMuIElmIHRoZSBjaGFybWVkIHRhcmdldCBpcyBtb3JlIHRoYW4gNSBmdC4gYXdheSBmcm9tIHRoZSBoYXJweSwgdGhlIG11c3QgbW92ZSBvbiBpdHMgdHVybiB0b3dhcmQgdGhlIGhhcnB5IGJ5IHRoZSBtb3N0IGRpcmVjdCByb3V0ZS4gSXQgZG9lc24ndCBhdm9pZCBvcHBvcnR1bml0eSBhdHRhY2tzLCBidXQgYmVmb3JlIG1vdmluZyBpbnRvIGRhbWFnaW5nIHRlcnJhaW4sIHN1Y2ggYXMgbGF2YSBvciBhIHBpdCwgYW5kIHdoZW5ldmVyIGl0IHRha2VzIGRhbWFnZSBmcm9tIGEgc291cmNlIG90aGVyIHRoYW4gdGhlIGhhcnB5LCBhIHRhcmdldCBjYW4gcmVwZWF0IHRoZSBzYXZpbmcgdGhyb3cuIEEgY3JlYXR1cmUgY2FuIGFsc28gcmVwZWF0IHRoZSBzYXZpbmcgdGhyb3cgYXQgdGhlIGVuZCBvZiBlYWNoIG9mIGl0cyB0dXJucy4gSWYgYSBjcmVhdHVyZSdzIHNhdmluZyB0aHJvdyBpcyBzdWNjZXNzZnVsLCB0aGUgZWZmZWN0IGVuZHMgb24gaXQuXFxuQSB0YXJnZXQgdGhhdCBzdWNjZXNzZnVsbHkgc2F2ZXMgaXMgaW1tdW5lIHRvIHRoaXMgaGFycHkncyBzb25nIGZvciB0aGUgbmV4dCAyNCBob3Vycy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJIYXdrXCIsXG5cdFx0c2l6ZTogXCJUaW55XCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwiYmVhc3RcIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcblx0XHRhYzogMTMsXG5cdFx0aHA6IDEsXG5cdFx0aGl0X2RpY2U6IFwiMWQ0XCIsXG5cdFx0c3BlZWQ6IFwiMTAgZnQuLCBmbHkgNjAgZnQuXCIsXG5cdFx0c3RhdHM6IFs1LCAxNiwgOCwgMiwgMTQsIDZdLFxuXHRcdHNraWxsc2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0cGVyY2VwdGlvbjogNCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcblx0XHRzZW5zZXM6IFwicGFzc2l2ZSBQZXJjZXB0aW9uIDE0XCIsXG5cdFx0bGFuZ3VhZ2VzOiBcIlwiLFxuXHRcdGNyOiBcIjBcIixcblx0XHR0cmFpdHM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJLZWVuIFNpZ2h0XCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGhhd2sgaGFzIGFkdmFudGFnZSBvbiBXaXNkb20gKFBlcmNlcHRpb24pIGNoZWNrcyB0aGF0IHJlbHkgb24gc2lnaHQuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiVGFsb25zXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzUgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxIHNsYXNoaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA1LFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDEsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIkhlbGwgSG91bmRcIixcblx0XHRzaXplOiBcIk1lZGl1bVwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcImZpZW5kXCIsXG5cdFx0c3VidHlwZTogXCJcIixcblx0XHRhbGlnbm1lbnQ6IFwibGF3ZnVsIGV2aWxcIixcblx0XHRhYzogMTUsXG5cdFx0aHA6IDQ1LFxuXHRcdGhpdF9kaWNlOiBcIjdkOFwiLFxuXHRcdHNwZWVkOiBcIjUwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbMTcsIDEyLCAxNCwgNiwgMTMsIDZdLFxuXHRcdHNraWxsc2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0cGVyY2VwdGlvbjogNSxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJmaXJlXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0c2Vuc2VzOiBcImRhcmt2aXNpb24gNjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTVcIixcblx0XHRsYW5ndWFnZXM6IFwidW5kZXJzdGFuZHMgSW5mZXJuYWwgYnV0IGNhbid0IHNwZWFrIGl0XCIsXG5cdFx0Y3I6IFwiM1wiLFxuXHRcdHRyYWl0czogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIktlZW4gSGVhcmluZyBhbmQgU21lbGxcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgaG91bmQgaGFzIGFkdmFudGFnZSBvbiBXaXNkb20gKFBlcmNlcHRpb24pIGNoZWNrcyB0aGF0IHJlbHkgb24gaGVhcmluZyBvciBzbWVsbC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJQYWNrIFRhY3RpY3NcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgaG91bmQgaGFzIGFkdmFudGFnZSBvbiBhbiBhdHRhY2sgcm9sbCBhZ2FpbnN0IGEgY3JlYXR1cmUgaWYgYXQgbGVhc3Qgb25lIG9mIHRoZSBob3VuZCdzIGFsbGllcyBpcyB3aXRoaW4gNSBmdC4gb2YgdGhlIGNyZWF0dXJlIGFuZCB0aGUgYWxseSBpc24ndCBpbmNhcGFjaXRhdGVkLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkJpdGVcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNSB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDcgKDFkOCArIDMpIHBpZXJjaW5nIGRhbWFnZSBwbHVzIDcgKDJkNikgZmlyZSBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNSxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMWQ4XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogMyxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiRmlyZSBCcmVhdGggKFJlY2hhcmdlIDUtNilcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgaG91bmQgZXhoYWxlcyBmaXJlIGluIGEgMTUtZm9vdCBjb25lLiBFYWNoIGNyZWF0dXJlIGluIHRoYXQgYXJlYSBtdXN0IG1ha2UgYSBEQyAxMiBEZXh0ZXJpdHkgc2F2aW5nIHRocm93LCB0YWtpbmcgMjEgKDZkNikgZmlyZSBkYW1hZ2Ugb24gYSBmYWlsZWQgc2F2ZSwgb3IgaGFsZiBhcyBtdWNoIGRhbWFnZSBvbiBhIHN1Y2Nlc3NmdWwgb25lLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjZkNlwiLFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJIZXpyb3VcIixcblx0XHRzaXplOiBcIkxhcmdlXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwiZmllbmRcIixcblx0XHRzdWJ0eXBlOiBcImRlbW9uXCIsXG5cdFx0YWxpZ25tZW50OiBcImNoYW90aWMgZXZpbFwiLFxuXHRcdGFjOiAxNixcblx0XHRocDogMTM2LFxuXHRcdGhpdF9kaWNlOiBcIjEzZDEwXCIsXG5cdFx0c3BlZWQ6IFwiMzAgZnQuXCIsXG5cdFx0c3RhdHM6IFsxOSwgMTcsIDIwLCA1LCAxMiwgMTNdLFxuXHRcdHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdHN0cmVuZ3RoOiA3LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0Y29uc3RpdHV0aW9uOiA4LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0d2lzZG9tOiA0LFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX3Jlc2lzdGFuY2VzOlxuXHRcdFx0XCJjb2xkLCBmaXJlLCBsaWdodG5pbmc7IGJsdWRnZW9uaW5nLCBwaWVyY2luZywgYW5kIHNsYXNoaW5nIGZyb20gbm9ubWFnaWNhbCB3ZWFwb25zXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwicG9pc29uXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwicG9pc29uZWRcIixcblx0XHRzZW5zZXM6IFwiZGFya3Zpc2lvbiAxMjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTFcIixcblx0XHRsYW5ndWFnZXM6IFwiQWJ5c3NhbCwgdGVsZXBhdGh5IDEyMCBmdC5cIixcblx0XHRjcjogXCI4XCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTWFnaWMgUmVzaXN0YW5jZVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBoZXpyb3UgaGFzIGFkdmFudGFnZSBvbiBzYXZpbmcgdGhyb3dzIGFnYWluc3Qgc3BlbGxzIGFuZCBvdGhlciBtYWdpY2FsIGVmZmVjdHMuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiU3RlbmNoXCIsXG5cdFx0XHRcdGRlc2M6IFwiQW55IGNyZWF0dXJlIHRoYXQgc3RhcnRzIGl0cyB0dXJuIHdpdGhpbiAxMCBmZWV0IG9mIHRoZSBoZXpyb3UgbXVzdCBzdWNjZWVkIG9uIGEgREMgMTQgQ29uc3RpdHV0aW9uIHNhdmluZyB0aHJvdyBvciBiZSBwb2lzb25lZCB1bnRpbCB0aGUgc3RhcnQgb2YgaXRzIG5leHQgdHVybi4gT24gYSBzdWNjZXNzZnVsIHNhdmluZyB0aHJvdywgdGhlIGNyZWF0dXJlIGlzIGltbXVuZSB0byB0aGUgaGV6cm91J3Mgc3RlbmNoIGZvciAyNCBob3Vycy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJNdWx0aWF0dGFja1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBoZXpyb3UgbWFrZXMgdGhyZWUgYXR0YWNrczogb25lIHdpdGggaXRzIGJpdGUgYW5kIHR3byB3aXRoIGl0cyBjbGF3cy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJCaXRlXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzcgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxNSAoMmQxMCArIDQpIHBpZXJjaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA3LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIyZDEwXCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogNCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQ2xhd3NcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNyB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDExICgyZDYgKyA0KSBzbGFzaGluZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNyxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMmQ2XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogNCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiVmFyaWFudDogU3VtbW9uIERlbW9uICgxL0RheSlcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgZGVtb24gY2hvb3NlcyB3aGF0IHRvIHN1bW1vbiBhbmQgYXR0ZW1wdHMgYSBtYWdpY2FsIHN1bW1vbmluZy5cXG5BIGhlenJvdSBoYXMgYSAzMCBwZXJjZW50IGNoYW5jZSBvZiBzdW1tb25pbmcgMmQ2IGRyZXRjaGVzIG9yIG9uZSBoZXpyb3UuXFxuQSBzdW1tb25lZCBkZW1vbiBhcHBlYXJzIGluIGFuIHVub2NjdXBpZWQgc3BhY2Ugd2l0aGluIDYwIGZlZXQgb2YgaXRzIHN1bW1vbmVyLCBhY3RzIGFzIGFuIGFsbHkgb2YgaXRzIHN1bW1vbmVyLCBhbmQgY2FuJ3Qgc3VtbW9uIG90aGVyIGRlbW9ucy4gSXQgcmVtYWlucyBmb3IgMSBtaW51dGUsIHVudGlsIGl0IG9yIGl0cyBzdW1tb25lciBkaWVzLCBvciB1bnRpbCBpdHMgc3VtbW9uZXIgZGlzbWlzc2VzIGl0IGFzIGFuIGFjdGlvbi5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJIaWxsIEdpYW50XCIsXG5cdFx0c2l6ZTogXCJIdWdlXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwiZ2lhbnRcIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJjaGFvdGljIGV2aWxcIixcblx0XHRhYzogMTMsXG5cdFx0aHA6IDEwNSxcblx0XHRoaXRfZGljZTogXCIxMGQxMlwiLFxuXHRcdHNwZWVkOiBcIjQwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbMjEsIDgsIDE5LCA1LCA5LCA2XSxcblx0XHRza2lsbHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdHBlcmNlcHRpb246IDIsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0c2Vuc2VzOiBcInBhc3NpdmUgUGVyY2VwdGlvbiAxMlwiLFxuXHRcdGxhbmd1YWdlczogXCJHaWFudFwiLFxuXHRcdGNyOiBcIjVcIixcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgZ2lhbnQgbWFrZXMgdHdvIGdyZWF0Y2x1YiBhdHRhY2tzLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkdyZWF0Y2x1YlwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs4IHRvIGhpdCwgcmVhY2ggMTAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDE4ICgzZDggKyA1KSBibHVkZ2VvbmluZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogOCxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiM2Q4XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogNSxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiUm9ja1wiLFxuXHRcdFx0XHRkZXNjOiBcIlJhbmdlZCBXZWFwb24gQXR0YWNrOiArOCB0byBoaXQsIHJhbmdlIDYwLzI0MCBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMjEgKDNkMTAgKyA1KSBibHVkZ2VvbmluZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogOCxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiM2QxMFwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDUsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIkhpcHBvZ3JpZmZcIixcblx0XHRzaXplOiBcIkxhcmdlXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwibW9uc3Ryb3NpdHlcIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcblx0XHRhYzogMTEsXG5cdFx0aHA6IDE5LFxuXHRcdGhpdF9kaWNlOiBcIjNkMTBcIixcblx0XHRzcGVlZDogXCI0MCBmdCwgZmx5IDYwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbMTcsIDEzLCAxMywgMiwgMTIsIDhdLFxuXHRcdHNraWxsc2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0cGVyY2VwdGlvbjogNSxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcblx0XHRzZW5zZXM6IFwicGFzc2l2ZSBQZXJjZXB0aW9uIDE1XCIsXG5cdFx0bGFuZ3VhZ2VzOiBcIlwiLFxuXHRcdGNyOiBcIjFcIixcblx0XHR0cmFpdHM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJLZWVuIFNpZ2h0XCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGhpcHBvZ3JpZmYgaGFzIGFkdmFudGFnZSBvbiBXaXNkb20gKFBlcmNlcHRpb24pIGNoZWNrcyB0aGF0IHJlbHkgb24gc2lnaHQuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgaGlwcG9ncmlmZiBtYWtlcyB0d28gYXR0YWNrczogb25lIHdpdGggaXRzIGJlYWsgYW5kIG9uZSB3aXRoIGl0cyBjbGF3cy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJCZWFrXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzUgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiA4ICgxZDEwICsgMykgcGllcmNpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDUsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjFkMTBcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiAzLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJDbGF3c1wiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs1IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTAgKDJkNiArIDMpIHNsYXNoaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA1LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIyZDZcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiAzLFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJIb2Jnb2JsaW5cIixcblx0XHRzaXplOiBcIk1lZGl1bVwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcImh1bWFub2lkXCIsXG5cdFx0c3VidHlwZTogXCJnb2JsaW5vaWRcIixcblx0XHRhbGlnbm1lbnQ6IFwibGF3ZnVsIGV2aWxcIixcblx0XHRhYzogMTgsXG5cdFx0aHA6IDExLFxuXHRcdGhpdF9kaWNlOiBcIjJkOFwiLFxuXHRcdHNwZWVkOiBcIjMwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbMTMsIDEyLCAxMiwgMTAsIDEwLCA5XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcblx0XHRzZW5zZXM6IFwiZGFya3Zpc2lvbiA2MCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxMFwiLFxuXHRcdGxhbmd1YWdlczogXCJDb21tb24sIEdvYmxpblwiLFxuXHRcdGNyOiBcIjEvMlwiLFxuXHRcdHRyYWl0czogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIk1hcnRpYWwgQWR2YW50YWdlXCIsXG5cdFx0XHRcdGRlc2M6IFwiT25jZSBwZXIgdHVybiwgdGhlIGhvYmdvYmxpbiBjYW4gZGVhbCBhbiBleHRyYSA3ICgyZDYpIGRhbWFnZSB0byBhIGNyZWF0dXJlIGl0IGhpdHMgd2l0aCBhIHdlYXBvbiBhdHRhY2sgaWYgdGhhdCBjcmVhdHVyZSBpcyB3aXRoaW4gNSBmdC4gb2YgYW4gYWxseSBvZiB0aGUgaG9iZ29ibGluIHRoYXQgaXNuJ3QgaW5jYXBhY2l0YXRlZC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIyZDZcIixcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTG9uZ3N3b3JkXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzMgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiA1ICgxZDggKyAxKSBzbGFzaGluZyBkYW1hZ2UsIG9yIDYgKDFkMTAgKyAxKSBzbGFzaGluZyBkYW1hZ2UgaWYgdXNlZCB3aXRoIHR3byBoYW5kcy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAzLFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxZDhcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiAxLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJMb25nYm93XCIsXG5cdFx0XHRcdGRlc2M6IFwiUmFuZ2VkIFdlYXBvbiBBdHRhY2s6ICszIHRvIGhpdCwgcmFuZ2UgMTUwLzYwMCBmdC4sIG9uZSB0YXJnZXQuIEhpdDogNSAoMWQ4ICsgMSkgcGllcmNpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDMsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjFkOFwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDEsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIkhvbXVuY3VsdXNcIixcblx0XHRzaXplOiBcIlRpbnlcIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJjb25zdHJ1Y3RcIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJuZXV0cmFsXCIsXG5cdFx0YWM6IDEzLFxuXHRcdGhwOiA1LFxuXHRcdGhpdF9kaWNlOiBcIjJkNFwiLFxuXHRcdHNwZWVkOiBcIjIwIGZ0LiwgZmx5IDQwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbNCwgMTUsIDExLCAxMCwgMTAsIDddLFxuXHRcdGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuXHRcdGRhbWFnZV9pbW11bml0aWVzOiBcInBvaXNvblwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcImNoYXJtZWQsIHBvaXNvbmVkXCIsXG5cdFx0c2Vuc2VzOiBcImRhcmt2aXNpb24gNjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTBcIixcblx0XHRsYW5ndWFnZXM6IFwidW5kZXJzdGFuZHMgdGhlIGxhbmd1YWdlcyBvZiBpdHMgY3JlYXRvciBidXQgY2FuJ3Qgc3BlYWtcIixcblx0XHRjcjogXCIwXCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiVGVsZXBhdGhpYyBCb25kXCIsXG5cdFx0XHRcdGRlc2M6IFwiV2hpbGUgdGhlIGhvbXVuY3VsdXMgaXMgb24gdGhlIHNhbWUgcGxhbmUgb2YgZXhpc3RlbmNlIGFzIGl0cyBtYXN0ZXIsIGl0IGNhbiBtYWdpY2FsbHkgY29udmV5IHdoYXQgaXQgc2Vuc2VzIHRvIGl0cyBtYXN0ZXIsIGFuZCB0aGUgdHdvIGNhbiBjb21tdW5pY2F0ZSB0ZWxlcGF0aGljYWxseS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJCaXRlXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzQgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIGNyZWF0dXJlLiBIaXQ6IDEgcGllcmNpbmcgZGFtYWdlLCBhbmQgdGhlIHRhcmdldCBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxMCBDb25zdGl0dXRpb24gc2F2aW5nIHRocm93IG9yIGJlIHBvaXNvbmVkIGZvciAxIG1pbnV0ZS4gSWYgdGhlIHNhdmluZyB0aHJvdyBmYWlscyBieSA1IG9yIG1vcmUsIHRoZSB0YXJnZXQgaXMgaW5zdGVhZCBwb2lzb25lZCBmb3IgNSAoMWQxMCkgbWludXRlcyBhbmQgdW5jb25zY2lvdXMgd2hpbGUgcG9pc29uZWQgaW4gdGhpcyB3YXkuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNCxcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiAxLFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJIb3JuZWQgRGV2aWxcIixcblx0XHRzaXplOiBcIkxhcmdlXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwiZmllbmRcIixcblx0XHRzdWJ0eXBlOiBcImRldmlsXCIsXG5cdFx0YWxpZ25tZW50OiBcImxhd2Z1bCBldmlsXCIsXG5cdFx0YWM6IDE4LFxuXHRcdGhwOiAxNDgsXG5cdFx0aGl0X2RpY2U6IFwiMTdkMTBcIixcblx0XHRzcGVlZDogXCIyMCBmdC4sIGZseSA2MCBmdC5cIixcblx0XHRzdGF0czogWzIyLCAxNywgMjEsIDEyLCAxNiwgMTddLFxuXHRcdHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdHN0cmVuZ3RoOiAxMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdGRleHRlcml0eTogNyxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHdpc2RvbTogNyxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdGNoYXJpc21hOiA3LFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX3Jlc2lzdGFuY2VzOlxuXHRcdFx0XCJjb2xkOyBibHVkZ2VvbmluZywgcGllcmNpbmcsIGFuZCBzbGFzaGluZyBmcm9tIG5vbm1hZ2ljYWwgd2VhcG9ucyB0aGF0IGFyZW4ndCBzaWx2ZXJlZFwiLFxuXHRcdGRhbWFnZV9pbW11bml0aWVzOiBcImZpcmUsIHBvaXNvblwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcInBvaXNvbmVkXCIsXG5cdFx0c2Vuc2VzOiBcImRhcmt2aXNpb24gMTIwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDEzXCIsXG5cdFx0bGFuZ3VhZ2VzOiBcIkluZmVybmFsLCB0ZWxlcGF0aHkgMTIwIGZ0LlwiLFxuXHRcdGNyOiBcIjExXCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiRGV2aWwncyBTaWdodFwiLFxuXHRcdFx0XHRkZXNjOiBcIk1hZ2ljYWwgZGFya25lc3MgZG9lc24ndCBpbXBlZGUgdGhlIGRldmlsJ3MgZGFya3Zpc2lvbi5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJNYWdpYyBSZXNpc3RhbmNlXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGRldmlsIGhhcyBhZHZhbnRhZ2Ugb24gc2F2aW5nIHRocm93cyBhZ2FpbnN0IHNwZWxscyBhbmQgb3RoZXIgbWFnaWNhbCBlZmZlY3RzLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGRldmlsIG1ha2VzIHRocmVlIG1lbGVlIGF0dGFja3M6IHR3byB3aXRoIGl0cyBmb3JrIGFuZCBvbmUgd2l0aCBpdHMgdGFpbC4gSXQgY2FuIHVzZSBIdXJsIEZsYW1lIGluIHBsYWNlIG9mIGFueSBtZWxlZSBhdHRhY2suXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiRm9ya1wiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICsxMCB0byBoaXQsIHJlYWNoIDEwIGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxNSAoMmQ4ICsgNikgcGllcmNpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDEwLFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIyZDhcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiA2LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJUYWlsXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzEwIHRvIGhpdCwgcmVhY2ggMTAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDEwICgxZDggKyA2KSBwaWVyY2luZyBkYW1hZ2UuIElmIHRoZSB0YXJnZXQgaXMgYSBjcmVhdHVyZSBvdGhlciB0aGFuIGFuIHVuZGVhZCBvciBhIGNvbnN0cnVjdCwgaXQgbXVzdCBzdWNjZWVkIG9uIGEgREMgMTcgQ29uc3RpdHV0aW9uIHNhdmluZyB0aHJvdyBvciBsb3NlIDEwICgzZDYpIGhpdCBwb2ludHMgYXQgdGhlIHN0YXJ0IG9mIGVhY2ggb2YgaXRzIHR1cm5zIGR1ZSB0byBhbiBpbmZlcm5hbCB3b3VuZC4gRWFjaCB0aW1lIHRoZSBkZXZpbCBoaXRzIHRoZSB3b3VuZGVkIHRhcmdldCB3aXRoIHRoaXMgYXR0YWNrLCB0aGUgZGFtYWdlIGRlYWx0IGJ5IHRoZSB3b3VuZCBpbmNyZWFzZXMgYnkgMTAgKDNkNikuIEFueSBjcmVhdHVyZSBjYW4gdGFrZSBhbiBhY3Rpb24gdG8gc3RhbmNoIHRoZSB3b3VuZCB3aXRoIGEgc3VjY2Vzc2Z1bCBEQyAxMiBXaXNkb20gKE1lZGljaW5lKSBjaGVjay4gVGhlIHdvdW5kIGFsc28gY2xvc2VzIGlmIHRoZSB0YXJnZXQgcmVjZWl2ZXMgbWFnaWNhbCBoZWFsaW5nLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDEwLFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxZDhcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiA2LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJIdXJsIEZsYW1lXCIsXG5cdFx0XHRcdGRlc2M6IFwiUmFuZ2VkIFNwZWxsIEF0dGFjazogKzcgdG8gaGl0LCByYW5nZSAxNTAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDE0ICg0ZDYpIGZpcmUgZGFtYWdlLiBJZiB0aGUgdGFyZ2V0IGlzIGEgZmxhbW1hYmxlIG9iamVjdCB0aGF0IGlzbid0IGJlaW5nIHdvcm4gb3IgY2FycmllZCwgaXQgYWxzbyBjYXRjaGVzIGZpcmUuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNyxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiNGQ2XCIsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIkh1bnRlciBTaGFya1wiLFxuXHRcdHNpemU6IFwiTGFyZ2VcIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJiZWFzdFwiLFxuXHRcdHN1YnR5cGU6IFwiXCIsXG5cdFx0YWxpZ25tZW50OiBcInVuYWxpZ25lZFwiLFxuXHRcdGFjOiAxMixcblx0XHRocDogNDUsXG5cdFx0aGl0X2RpY2U6IFwiNmQxMFwiLFxuXHRcdHNwZWVkOiBcInN3aW0gNDAgZnQuXCIsXG5cdFx0c3RhdHM6IFsxOCwgMTMsIDE1LCAxLCAxMCwgNF0sXG5cdFx0c2tpbGxzYXZlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRwZXJjZXB0aW9uOiAyLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuXHRcdGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuXHRcdHNlbnNlczogXCJkYXJrdmlzaW9uIDMwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDEyXCIsXG5cdFx0bGFuZ3VhZ2VzOiBcIlwiLFxuXHRcdGNyOiBcIjJcIixcblx0XHR0cmFpdHM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJCbG9vZCBGcmVuenlcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgc2hhcmsgaGFzIGFkdmFudGFnZSBvbiBtZWxlZSBhdHRhY2sgcm9sbHMgYWdhaW5zdCBhbnkgY3JlYXR1cmUgdGhhdCBkb2Vzbid0IGhhdmUgYWxsIGl0cyBoaXQgcG9pbnRzLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIldhdGVyIEJyZWF0aGluZ1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBzaGFyayBjYW4gYnJlYXRoZSBvbmx5IHVuZGVyd2F0ZXIuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQml0ZVwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs2IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTMgKDJkOCArIDQpIHBpZXJjaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA2LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIyZDhcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiA0LFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJIeWRyYVwiLFxuXHRcdHNpemU6IFwiSHVnZVwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcIm1vbnN0cm9zaXR5XCIsXG5cdFx0c3VidHlwZTogXCJcIixcblx0XHRhbGlnbm1lbnQ6IFwidW5hbGlnbmVkXCIsXG5cdFx0YWM6IDE1LFxuXHRcdGhwOiAxNzIsXG5cdFx0aGl0X2RpY2U6IFwiMTVkMTJcIixcblx0XHRzcGVlZDogXCIzMCBmdC4sIHN3aW0gMzAgZnQuXCIsXG5cdFx0c3RhdHM6IFsyMCwgMTIsIDIwLCAyLCAxMCwgN10sXG5cdFx0c2tpbGxzYXZlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRwZXJjZXB0aW9uOiA2LFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuXHRcdGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuXHRcdHNlbnNlczogXCJkYXJrdmlzaW9uIDYwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDE2XCIsXG5cdFx0bGFuZ3VhZ2VzOiBcIlwiLFxuXHRcdGNyOiBcIjhcIixcblx0XHR0cmFpdHM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJIb2xkIEJyZWF0aFwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBoeWRyYSBjYW4gaG9sZCBpdHMgYnJlYXRoIGZvciAxIGhvdXIuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTXVsdGlwbGUgSGVhZHNcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgaHlkcmEgaGFzIGZpdmUgaGVhZHMuIFdoaWxlIGl0IGhhcyBtb3JlIHRoYW4gb25lIGhlYWQsIHRoZSBoeWRyYSBoYXMgYWR2YW50YWdlIG9uIHNhdmluZyB0aHJvd3MgYWdhaW5zdCBiZWluZyBibGluZGVkLCBjaGFybWVkLCBkZWFmZW5lZCwgZnJpZ2h0ZW5lZCwgc3R1bm5lZCwgYW5kIGtub2NrZWQgdW5jb25zY2lvdXMuXFxuV2hlbmV2ZXIgdGhlIGh5ZHJhIHRha2VzIDI1IG9yIG1vcmUgZGFtYWdlIGluIGEgc2luZ2xlIHR1cm4sIG9uZSBvZiBpdHMgaGVhZHMgZGllcy4gSWYgYWxsIGl0cyBoZWFkcyBkaWUsIHRoZSBoeWRyYSBkaWVzLlxcbkF0IHRoZSBlbmQgb2YgaXRzIHR1cm4sIGl0IGdyb3dzIHR3byBoZWFkcyBmb3IgZWFjaCBvZiBpdHMgaGVhZHMgdGhhdCBkaWVkIHNpbmNlIGl0cyBsYXN0IHR1cm4sIHVubGVzcyBpdCBoYXMgdGFrZW4gZmlyZSBkYW1hZ2Ugc2luY2UgaXRzIGxhc3QgdHVybi4gVGhlIGh5ZHJhIHJlZ2FpbnMgMTAgaGl0IHBvaW50cyBmb3IgZWFjaCBoZWFkIHJlZ3Jvd24gaW4gdGhpcyB3YXkuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiUmVhY3RpdmUgSGVhZHNcIixcblx0XHRcdFx0ZGVzYzogXCJGb3IgZWFjaCBoZWFkIHRoZSBoeWRyYSBoYXMgYmV5b25kIG9uZSwgaXQgZ2V0cyBhbiBleHRyYSByZWFjdGlvbiB0aGF0IGNhbiBiZSB1c2VkIG9ubHkgZm9yIG9wcG9ydHVuaXR5IGF0dGFja3MuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiV2FrZWZ1bFwiLFxuXHRcdFx0XHRkZXNjOiBcIldoaWxlIHRoZSBoeWRyYSBzbGVlcHMsIGF0IGxlYXN0IG9uZSBvZiBpdHMgaGVhZHMgaXMgYXdha2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgaHlkcmEgbWFrZXMgYXMgbWFueSBiaXRlIGF0dGFja3MgYXMgaXQgaGFzIGhlYWRzLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkJpdGVcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArOCB0byBoaXQsIHJlYWNoIDEwIGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxMCAoMWQxMCArIDUpIHBpZXJjaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA4LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxZDEwXCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogNSxcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiSHllbmFcIixcblx0XHRzaXplOiBcIk1lZGl1bVwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcImJlYXN0XCIsXG5cdFx0c3VidHlwZTogXCJcIixcblx0XHRhbGlnbm1lbnQ6IFwidW5hbGlnbmVkXCIsXG5cdFx0YWM6IDExLFxuXHRcdGhwOiA1LFxuXHRcdGhpdF9kaWNlOiBcIjFkOFwiLFxuXHRcdHNwZWVkOiBcIjUwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbMTEsIDEzLCAxMiwgMiwgMTIsIDVdLFxuXHRcdHNraWxsc2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0cGVyY2VwdGlvbjogMyxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcblx0XHRzZW5zZXM6IFwicGFzc2l2ZSBQZXJjZXB0aW9uIDEzXCIsXG5cdFx0bGFuZ3VhZ2VzOiBcIlwiLFxuXHRcdGNyOiBcIjBcIixcblx0XHR0cmFpdHM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJQYWNrIFRhY3RpY3NcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgaHllbmEgaGFzIGFkdmFudGFnZSBvbiBhbiBhdHRhY2sgcm9sbCBhZ2FpbnN0IGEgY3JlYXR1cmUgaWYgYXQgbGVhc3Qgb25lIG9mIHRoZSBoeWVuYSdzIGFsbGllcyBpcyB3aXRoaW4gNSBmdC4gb2YgdGhlIGNyZWF0dXJlIGFuZCB0aGUgYWxseSBpc24ndCBpbmNhcGFjaXRhdGVkLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkJpdGVcIixcblx0XHRcdFx0ZGVzYzogXCJXZWFwb24gQXR0YWNrOiArMiB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDMgKDFkNikgcGllcmNpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDIsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjFkNlwiLFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJJY2UgRGV2aWxcIixcblx0XHRzaXplOiBcIkxhcmdlXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwiZmllbmRcIixcblx0XHRzdWJ0eXBlOiBcImRldmlsXCIsXG5cdFx0YWxpZ25tZW50OiBcImxhd2Z1bCBldmlsXCIsXG5cdFx0YWM6IDE4LFxuXHRcdGhwOiAxODAsXG5cdFx0aGl0X2RpY2U6IFwiMTlkMTBcIixcblx0XHRzcGVlZDogXCI0MCBmdC5cIixcblx0XHRzdGF0czogWzIxLCAxNCwgMTgsIDE4LCAxNSwgMThdLFxuXHRcdHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdGRleHRlcml0eTogNyxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdGNvbnN0aXR1dGlvbjogOSxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHdpc2RvbTogNyxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdGNoYXJpc21hOiA5LFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX3Jlc2lzdGFuY2VzOlxuXHRcdFx0XCJibHVkZ2VvbmluZywgcGllcmNpbmcsIGFuZCBzbGFzaGluZyBmcm9tIG5vbm1hZ2ljYWwgd2VhcG9ucyB0aGF0IGFyZW4ndCBzaWx2ZXJlZFwiLFxuXHRcdGRhbWFnZV9pbW11bml0aWVzOiBcImZpcmUsIHBvaXNvblwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcInBvaXNvbmVkXCIsXG5cdFx0c2Vuc2VzOiBcImJsaW5kc2lnaHQgNjAgZnQuLCBkYXJrdmlzaW9uIDEyMCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxMlwiLFxuXHRcdGxhbmd1YWdlczogXCJJbmZlcm5hbCwgdGVsZXBhdGh5IDEyMCBmdC5cIixcblx0XHRjcjogXCIxNFwiLFxuXHRcdHRyYWl0czogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkRldmlsJ3MgU2lnaHRcIixcblx0XHRcdFx0ZGVzYzogXCJNYWdpY2FsIGRhcmtuZXNzIGRvZXNuJ3QgaW1wZWRlIHRoZSBkZXZpbCdzIGRhcmt2aXNpb24uXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTWFnaWMgUmVzaXN0YW5jZVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBkZXZpbCBoYXMgYWR2YW50YWdlIG9uIHNhdmluZyB0aHJvd3MgYWdhaW5zdCBzcGVsbHMgYW5kIG90aGVyIG1hZ2ljYWwgZWZmZWN0cy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJNdWx0aWF0dGFja1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBkZXZpbCBtYWtlcyB0aHJlZSBhdHRhY2tzOiBvbmUgd2l0aCBpdHMgYml0ZSwgb25lIHdpdGggaXRzIGNsYXdzLCBhbmQgb25lIHdpdGggaXRzIHRhaWwuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQml0ZVwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICsxMCB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDEyICgyZDYgKyA1KSBwaWVyY2luZyBkYW1hZ2UgcGx1cyAxMCAoM2Q2KSBjb2xkIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAxMCxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMmQ2ICsgM2Q2XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogNSxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQ2xhd3NcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMTAgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxMCAoMmQ0ICsgNSkgc2xhc2hpbmcgZGFtYWdlIHBsdXMgMTAgKDNkNikgY29sZCBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMTAsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjJkNCArIDNkNlwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDUsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlRhaWxcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOisxMCB0byBoaXQsIHJlYWNoIDEwIGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxMiAoMmQ2ICsgNSkgYmx1ZGdlb25pbmcgZGFtYWdlIHBsdXMgMTAgKDNkNikgY29sZCBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMTAsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjJkNiArIDNkNlwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDUsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIldhbGwgb2YgSWNlXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGRldmlsIG1hZ2ljYWxseSBmb3JtcyBhbiBvcGFxdWUgd2FsbCBvZiBpY2Ugb24gYSBzb2xpZCBzdXJmYWNlIGl0IGNhbiBzZWUgd2l0aGluIDYwIGZlZXQgb2YgaXQuIFRoZSB3YWxsIGlzIDEgZm9vdCB0aGljayBhbmQgdXAgdG8gMzAgZmVldCBsb25nIGFuZCAxMCBmZWV0IGhpZ2gsIG9yIGl0J3MgYSBoZW1pc3BoZXJpY2FsIGRvbWUgdXAgdG8gMjAgZmVldCBpbiBkaWFtZXRlci5cXG5XaGVuIHRoZSB3YWxsIGFwcGVhcnMsIGVhY2ggY3JlYXR1cmUgaW4gaXRzIHNwYWNlIGlzIHB1c2hlZCBvdXQgb2YgaXQgYnkgdGhlIHNob3J0ZXN0IHJvdXRlLiBUaGUgY3JlYXR1cmUgY2hvb3NlcyB3aGljaCBzaWRlIG9mIHRoZSB3YWxsIHRvIGVuZCB1cCBvbiwgdW5sZXNzIHRoZSBjcmVhdHVyZSBpcyBpbmNhcGFjaXRhdGVkLiBUaGUgY3JlYXR1cmUgdGhlbiBtYWtlcyBhIERDIDE3IERleHRlcml0eSBzYXZpbmcgdGhyb3csIHRha2luZyAzNSAoMTBkNikgY29sZCBkYW1hZ2Ugb24gYSBmYWlsZWQgc2F2ZSwgb3IgaGFsZiBhcyBtdWNoIGRhbWFnZSBvbiBhIHN1Y2Nlc3NmdWwgb25lLlxcblRoZSB3YWxsIGxhc3RzIGZvciAxIG1pbnV0ZSBvciB1bnRpbCB0aGUgZGV2aWwgaXMgaW5jYXBhY2l0YXRlZCBvciBkaWVzLiBUaGUgd2FsbCBjYW4gYmUgZGFtYWdlZCBhbmQgYnJlYWNoZWQ7IGVhY2ggMTAtZm9vdCBzZWN0aW9uIGhhcyBBQyA1LCAzMCBoaXQgcG9pbnRzLCB2dWxuZXJhYmlsaXR5IHRvIGZpcmUgZGFtYWdlLCBhbmQgaW1tdW5pdHkgdG8gYWNpZCwgY29sZCwgbmVjcm90aWMsIHBvaXNvbiwgYW5kIHBzeWNoaWMgZGFtYWdlLiBJZiBhIHNlY3Rpb24gaXMgZGVzdHJveWVkLCBpdCBsZWF2ZXMgYmVoaW5kIGEgc2hlZXQgb2YgZnJpZ2lkIGFpciBpbiB0aGUgc3BhY2UgdGhlIHdhbGwgb2NjdXBpZWQuIFdoZW5ldmVyIGEgY3JlYXR1cmUgZmluaXNoZXMgbW92aW5nIHRocm91Z2ggdGhlIGZyaWdpZCBhaXIgb24gYSB0dXJuLCB3aWxsaW5nbHkgb3Igb3RoZXJ3aXNlLCB0aGUgY3JlYXR1cmUgbXVzdCBtYWtlIGEgREMgMTcgQ29uc3RpdHV0aW9uIHNhdmluZyB0aHJvdywgdGFraW5nIDE3ICg1ZDYpIGNvbGQgZGFtYWdlIG9uIGEgZmFpbGVkIHNhdmUsIG9yIGhhbGYgYXMgbXVjaCBkYW1hZ2Ugb24gYSBzdWNjZXNzZnVsIG9uZS4gVGhlIGZyaWdpZCBhaXIgZGlzc2lwYXRlcyB3aGVuIHRoZSByZXN0IG9mIHRoZSB3YWxsIHZhbmlzaGVzLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIkljZSBNZXBoaXRcIixcblx0XHRzaXplOiBcIlNtYWxsXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwiZWxlbWVudGFsXCIsXG5cdFx0c3VidHlwZTogXCJcIixcblx0XHRhbGlnbm1lbnQ6IFwibmV1dHJhbCBldmlsXCIsXG5cdFx0YWM6IDExLFxuXHRcdGhwOiAyMSxcblx0XHRoaXRfZGljZTogXCI2ZDZcIixcblx0XHRzcGVlZDogXCIzMCBmdC4sIGZseSAzMCBmdC5cIixcblx0XHRzdGF0czogWzcsIDEzLCAxMCwgOSwgMTEsIDEyXSxcblx0XHRza2lsbHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdHBlcmNlcHRpb246IDIsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRzdGVhbHRoOiAzLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiYmx1ZGdlb25pbmcsIGZpcmVcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiY29sZCwgcG9pc29uXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwicG9pc29uZWRcIixcblx0XHRzZW5zZXM6IFwiZGFya3Zpc2lvbiA2MCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxMlwiLFxuXHRcdGxhbmd1YWdlczogXCJBcXVhbiwgQXVyYW5cIixcblx0XHRjcjogXCIxLzJcIixcblx0XHR0cmFpdHM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJEZWF0aCBCdXJzdFwiLFxuXHRcdFx0XHRkZXNjOiBcIldoZW4gdGhlIG1lcGhpdCBkaWVzLCBpdCBleHBsb2RlcyBpbiBhIGJ1cnN0IG9mIGphZ2dlZCBpY2UuIEVhY2ggY3JlYXR1cmUgd2l0aGluIDUgZnQuIG9mIGl0IG11c3QgbWFrZSBhIERDIDEwIERleHRlcml0eSBzYXZpbmcgdGhyb3csIHRha2luZyA0ICgxZDgpIHNsYXNoaW5nIGRhbWFnZSBvbiBhIGZhaWxlZCBzYXZlLCBvciBoYWxmIGFzIG11Y2ggZGFtYWdlIG9uIGEgc3VjY2Vzc2Z1bCBvbmUuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMWQ4XCIsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkZhbHNlIEFwcGVhcmFuY2VcIixcblx0XHRcdFx0ZGVzYzogXCJXaGlsZSB0aGUgbWVwaGl0IHJlbWFpbnMgbW90aW9ubGVzcywgaXQgaXMgaW5kaXN0aW5ndWlzaGFibGUgZnJvbSBhbiBvcmRpbmFyeSBzaGFyZCBvZiBpY2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiSW5uYXRlIFNwZWxsY2FzdGluZyAoMS9EYXkpXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIG1lcGhpdCBjYW4gaW5uYXRlbHkgY2FzdCBmb2cgY2xvdWQsIHJlcXVpcmluZyBubyBtYXRlcmlhbCBjb21wb25lbnRzLiBJdHMgaW5uYXRlIHNwZWxsY2FzdGluZyBhYmlsaXR5IGlzIENoYXJpc21hLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkNsYXdzXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzMgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIGNyZWF0dXJlLiBIaXQ6IDMgKDFkNCArIDEpIHNsYXNoaW5nIGRhbWFnZSBwbHVzIDIgKDFkNCkgY29sZCBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMyxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMWQ0XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogMSxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiRnJvc3QgQnJlYXRoIChSZWNoYXJnZSA2KVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBtZXBoaXQgZXhoYWxlcyBhIDE1LWZvb3QgY29uZSBvZiBjb2xkIGFpci4gRWFjaCBjcmVhdHVyZSBpbiB0aGF0IGFyZWEgbXVzdCBzdWNjZWVkIG9uIGEgREMgMTAgRGV4dGVyaXR5IHNhdmluZyB0aHJvdywgdGFraW5nIDUgKDJkNCkgY29sZCBkYW1hZ2Ugb24gYSBmYWlsZWQgc2F2ZSwgb3IgaGFsZiBhcyBtdWNoIGRhbWFnZSBvbiBhIHN1Y2Nlc3NmdWwgb25lLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlZhcmlhbnQ6IFN1bW1vbiBNZXBoaXRzICgxL0RheSlcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgbWVwaGl0IGhhcyBhIDI1IHBlcmNlbnQgY2hhbmNlIG9mIHN1bW1vbmluZyAxZDQgbWVwaGl0cyBvZiBpdHMga2luZC4gQSBzdW1tb25lZCBtZXBoaXQgYXBwZWFycyBpbiBhbiB1bm9jY3VwaWVkIHNwYWNlIHdpdGhpbiA2MCBmZWV0IG9mIGl0cyBzdW1tb25lciwgYWN0cyBhcyBhbiBhbGx5IG9mIGl0cyBzdW1tb25lciwgYW5kIGNhbid0IHN1bW1vbiBvdGhlciBtZXBoaXRzLiBJdCByZW1haW5zIGZvciAxIG1pbnV0ZSwgdW50aWwgaXQgb3IgaXRzIHN1bW1vbmVyIGRpZXMsIG9yIHVudGlsIGl0cyBzdW1tb25lciBkaXNtaXNzZXMgaXQgYXMgYW4gYWN0aW9uLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIkltcFwiLFxuXHRcdHNpemU6IFwiVGlueVwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcImZpZW5kXCIsXG5cdFx0c3VidHlwZTogXCJkZXZpbFwiLFxuXHRcdGFsaWdubWVudDogXCJsYXdmdWwgZXZpbFwiLFxuXHRcdGFjOiAxMyxcblx0XHRocDogMTAsXG5cdFx0aGl0X2RpY2U6IFwiM2Q0XCIsXG5cdFx0c3BlZWQ6IFwiMjAgZnQuLCBmbHkgNDAgZnQuXCIsXG5cdFx0c3RhdHM6IFs2LCAxNywgMTMsIDExLCAxMiwgMTRdLFxuXHRcdHNraWxsc2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0ZGVjZXB0aW9uOiA0LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0aW5zaWdodDogMyxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHBlcnN1YXNpb246IDQsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRzdGVhbHRoOiA1LFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX3Jlc2lzdGFuY2VzOlxuXHRcdFx0XCJjb2xkOyBibHVkZ2VvbmluZywgcGllcmNpbmcsIGFuZCBzbGFzaGluZyBmcm9tIG5vbm1hZ2ljYWwvbm9uc2lsdmVyIHdlYXBvbnNcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJmaXJlLCBwb2lzb25cIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczogXCJwb2lzb25lZFwiLFxuXHRcdHNlbnNlczogXCJkYXJrdmlzaW9uIDEyMCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxMVwiLFxuXHRcdGxhbmd1YWdlczogXCJJbmZlcm5hbCwgQ29tbW9uXCIsXG5cdFx0Y3I6IFwiMVwiLFxuXHRcdHRyYWl0czogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlNoYXBlY2hhbmdlclwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBpbXAgY2FuIHVzZSBpdHMgYWN0aW9uIHRvIHBvbHltb3JwaCBpbnRvIGEgYmVhc3QgZm9ybSB0aGF0IHJlc2VtYmxlcyBhIHJhdCAoc3BlZWQgMjAgZnQuKSwgYSByYXZlbiAoMjAgZnQuLCBmbHkgNjAgZnQuKSwgb3IgYSBzcGlkZXIgKDIwIGZ0LiwgY2xpbWIgMjAgZnQuKSwgb3IgYmFjayBpbnRvIGl0cyB0cnVlIGZvcm0uIEl0cyBzdGF0aXN0aWNzIGFyZSB0aGUgc2FtZSBpbiBlYWNoIGZvcm0sIGV4Y2VwdCBmb3IgdGhlIHNwZWVkIGNoYW5nZXMgbm90ZWQuIEFueSBlcXVpcG1lbnQgaXQgaXMgd2VhcmluZyBvciBjYXJyeWluZyBpc24ndCB0cmFuc2Zvcm1lZC4gSXQgcmV2ZXJ0cyB0byBpdHMgdHJ1ZSBmb3JtIGlmIGl0IGRpZXMuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiRGV2aWwncyBTaWdodFwiLFxuXHRcdFx0XHRkZXNjOiBcIk1hZ2ljYWwgZGFya25lc3MgZG9lc24ndCBpbXBlZGUgdGhlIGltcCdzIGRhcmt2aXNpb24uXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTWFnaWMgUmVzaXN0YW5jZVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBpbXAgaGFzIGFkdmFudGFnZSBvbiBzYXZpbmcgdGhyb3dzIGFnYWluc3Qgc3BlbGxzIGFuZCBvdGhlciBtYWdpY2FsIGVmZmVjdHMuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiVmFyaWFudDogRmFtaWxpYXJcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgaW1wIGNhbiBzZXJ2ZSBhbm90aGVyIGNyZWF0dXJlIGFzIGEgZmFtaWxpYXIsIGZvcm1pbmcgYSB0ZWxlcGF0aGljIGJvbmQgd2l0aCBpdHMgd2lsbGluZyBtYXN0ZXIuIFdoaWxlIHRoZSB0d28gYXJlIGJvbmRlZCwgdGhlIG1hc3RlciBjYW4gc2Vuc2Ugd2hhdCB0aGUgcXVhc2l0IHNlbnNlcyBhcyBsb25nIGFzIHRoZXkgYXJlIHdpdGhpbiAxIG1pbGUgb2YgZWFjaCBvdGhlci4gV2hpbGUgdGhlIGltcCBpcyB3aXRoaW4gMTAgZmVldCBvZiBpdHMgbWFzdGVyLCB0aGUgbWFzdGVyIHNoYXJlcyB0aGUgcXVhc2l0J3MgTWFnaWMgUmVzaXN0YW5jZSB0cmFpdC4gQXQgYW55IHRpbWUgYW5kIGZvciBhbnkgcmVhc29uLCB0aGUgaW1wIGNhbiBlbmQgaXRzIHNlcnZpY2UgYXMgYSBmYW1pbGlhciwgZW5kaW5nIHRoZSB0ZWxlcGF0aGljIGJvbmQuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiU3RpbmcgKEJpdGUgaW4gQmVhc3QgRm9ybSlcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNSB0byBoaXQsIHJlYWNoIDUgZnQgLiwgb25lIHRhcmdldC4gSGl0OiA1ICgxZDQgKyAzKSBwaWVyY2luZyBkYW1hZ2UsIGFuZCB0aGUgdGFyZ2V0IG11c3QgbWFrZSBvbiBhIERDIDExIENvbnN0aXR1dGlvbiBzYXZpbmcgdGhyb3csIHRha2luZyAxMCAoM2Q2KSBwb2lzb24gZGFtYWdlIG9uIGEgZmFpbGVkIHNhdmUsIG9yIGhhbGYgYXMgbXVjaCBkYW1hZ2Ugb24gYSBzdWNjZXNzZnVsIG9uZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA1LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxZDRcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiAzLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJJbnZpc2liaWxpdHlcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgaW1wIG1hZ2ljYWxseSB0dXJucyBpbnZpc2libGUgdW50aWwgaXQgYXR0YWNrcywgb3IgdW50aWwgaXRzIGNvbmNlbnRyYXRpb24gZW5kcyAoYXMgaWYgY29uY2VudHJhdGluZyBvbiBhIHNwZWxsKS4gQW55IGVxdWlwbWVudCB0aGUgaW1wIHdlYXJzIG9yIGNhcnJpZXMgaXMgaW52aXNpYmxlIHdpdGggaXQuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiSW52aXNpYmxlIFN0YWxrZXJcIixcblx0XHRzaXplOiBcIk1lZGl1bVwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcImVsZW1lbnRhbFwiLFxuXHRcdHN1YnR5cGU6IFwiXCIsXG5cdFx0YWxpZ25tZW50OiBcIm5ldXRyYWxcIixcblx0XHRhYzogMTQsXG5cdFx0aHA6IDEwNCxcblx0XHRoaXRfZGljZTogXCIxNmQ4XCIsXG5cdFx0c3BlZWQ6IFwiNTAgZnQuLCBmbHkgNTAgZnQuIChob3ZlcilcIixcblx0XHRzdGF0czogWzE2LCAxOSwgMTQsIDEwLCAxNSwgMTFdLFxuXHRcdHNraWxsc2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0cGVyY2VwdGlvbjogOCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHN0ZWFsdGg6IDEwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX3Jlc2lzdGFuY2VzOlxuXHRcdFx0XCJibHVkZ2VvbmluZywgcGllcmNpbmcsIGFuZCBzbGFzaGluZyBmcm9tIG5vbm1hZ2ljYWwgd2VhcG9uc1wiLFxuXHRcdGRhbWFnZV9pbW11bml0aWVzOiBcInBvaXNvblwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOlxuXHRcdFx0XCJleGhhdXN0aW9uLCBncmFwcGxlZCwgcGFyYWx5emVkLCBwZXRyaWZpZWQsIHBvaXNvbmVkLCBwcm9uZSwgcmVzdHJhaW5lZCwgdW5jb25zY2lvdXNcIixcblx0XHRzZW5zZXM6IFwiZGFya3Zpc2lvbiA2MCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxOFwiLFxuXHRcdGxhbmd1YWdlczogXCJBdXJhbiwgdW5kZXJzdGFuZHMgQ29tbW9uIGJ1dCBkb2Vzbid0IHNwZWFrIGl0XCIsXG5cdFx0Y3I6IFwiNlwiLFxuXHRcdHRyYWl0czogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkludmlzaWJpbGl0eVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBzdGFsa2VyIGlzIGludmlzaWJsZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJGYXVsdGxlc3MgVHJhY2tlclwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBzdGFsa2VyIGlzIGdpdmVuIGEgcXVhcnJ5IGJ5IGl0cyBzdW1tb25lci4gVGhlIHN0YWxrZXIga25vd3MgdGhlIGRpcmVjdGlvbiBhbmQgZGlzdGFuY2UgdG8gaXRzIHF1YXJyeSBhcyBsb25nIGFzIHRoZSB0d28gb2YgdGhlbSBhcmUgb24gdGhlIHNhbWUgcGxhbmUgb2YgZXhpc3RlbmNlLiBUaGUgc3RhbGtlciBhbHNvIGtub3dzIHRoZSBsb2NhdGlvbiBvZiBpdHMgc3VtbW9uZXIuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgc3RhbGtlciBtYWtlcyB0d28gc2xhbSBhdHRhY2tzLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlNsYW1cIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNiB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDEwICgyZDYgKyAzKSBibHVkZ2VvbmluZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNixcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMmQ2XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogMyxcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiSXJvbiBHb2xlbVwiLFxuXHRcdHNpemU6IFwiTGFyZ2VcIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJjb25zdHJ1Y3RcIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcblx0XHRhYzogMjAsXG5cdFx0aHA6IDIxMCxcblx0XHRoaXRfZGljZTogXCIyMGQxMFwiLFxuXHRcdHNwZWVkOiBcIjMwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbMjQsIDksIDIwLCAzLCAxMSwgMV0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6XG5cdFx0XHRcImZpcmUsIHBvaXNvbiwgcHN5Y2hpYzsgYmx1ZGdlb25pbmcsIHBpZXJjaW5nLCBhbmQgc2xhc2hpbmcgZnJvbSBub25tYWdpY2FsIHdlYXBvbnMgdGhhdCBhcmVuJ3QgYWRhbWFudGluZVwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOlxuXHRcdFx0XCJjaGFybWVkLCBleGhhdXN0aW9uLCBmcmlnaHRlbmVkLCBwYXJhbHl6ZWQsIHBldHJpZmllZCwgcG9pc29uZWRcIixcblx0XHRzZW5zZXM6IFwiZGFya3Zpc2lvbiAxMjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTBcIixcblx0XHRsYW5ndWFnZXM6IFwidW5kZXJzdGFuZHMgdGhlIGxhbmd1YWdlcyBvZiBpdHMgY3JlYXRvciBidXQgY2FuJ3Qgc3BlYWtcIixcblx0XHRjcjogXCIxNlwiLFxuXHRcdHRyYWl0czogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkZpcmUgQWJzb3JwdGlvblwiLFxuXHRcdFx0XHRkZXNjOiBcIldoZW5ldmVyIHRoZSBnb2xlbSBpcyBzdWJqZWN0ZWQgdG8gZmlyZSBkYW1hZ2UsIGl0IHRha2VzIG5vIGRhbWFnZSBhbmQgaW5zdGVhZCByZWdhaW5zIGEgbnVtYmVyIG9mIGhpdCBwb2ludHMgZXF1YWwgdG8gdGhlIGZpcmUgZGFtYWdlIGRlYWx0LlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkltbXV0YWJsZSBGb3JtXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGdvbGVtIGlzIGltbXVuZSB0byBhbnkgc3BlbGwgb3IgZWZmZWN0IHRoYXQgd291bGQgYWx0ZXIgaXRzIGZvcm0uXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTWFnaWMgUmVzaXN0YW5jZVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBnb2xlbSBoYXMgYWR2YW50YWdlIG9uIHNhdmluZyB0aHJvd3MgYWdhaW5zdCBzcGVsbHMgYW5kIG90aGVyIG1hZ2ljYWwgZWZmZWN0cy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJNYWdpYyBXZWFwb25zXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGdvbGVtJ3Mgd2VhcG9uIGF0dGFja3MgYXJlIG1hZ2ljYWwuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgZ29sZW0gbWFrZXMgdHdvIG1lbGVlIGF0dGFja3MuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiU2xhbVwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICsxMyB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDIwICgzZDggKyA3KSBibHVkZ2VvbmluZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMTMsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjNkOFwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDcsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlN3b3JkXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzEzIHRvIGhpdCwgcmVhY2ggMTAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDIzICgzZDEwICsgNykgc2xhc2hpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDEzLFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIzZDEwXCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogNyxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiUG9pc29uIEJyZWF0aCAoUmVjaGFyZ2UgNS02KVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBnb2xlbSBleGhhbGVzIHBvaXNvbm91cyBnYXMgaW4gYSAxNS1mb290IGNvbmUuIEVhY2ggY3JlYXR1cmUgaW4gdGhhdCBhcmVhIG11c3QgbWFrZSBhIERDIDE5IENvbnN0aXR1dGlvbiBzYXZpbmcgdGhyb3csIHRha2luZyA0NSAobDBkOCkgcG9pc29uIGRhbWFnZSBvbiBhIGZhaWxlZCBzYXZlLCBvciBoYWxmIGFzIG11Y2ggZGFtYWdlIG9uIGEgc3VjY2Vzc2Z1bCBvbmUuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMTBkOFwiLFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJKYWNrYWxcIixcblx0XHRzaXplOiBcIlNtYWxsXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwiYmVhc3RcIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcblx0XHRhYzogMTIsXG5cdFx0aHA6IDMsXG5cdFx0aGl0X2RpY2U6IFwiMWQ2XCIsXG5cdFx0c3BlZWQ6IFwiNDAgZnQuXCIsXG5cdFx0c3RhdHM6IFs4LCAxNSwgMTEsIDMsIDEyLCA2XSxcblx0XHRza2lsbHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdHBlcmNlcHRpb246IDMsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0c2Vuc2VzOiBcInBhc3NpdmUgUGVyY2VwdGlvbiAxM1wiLFxuXHRcdGxhbmd1YWdlczogXCJcIixcblx0XHRjcjogXCIwXCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiS2VlbiBIZWFyaW5nIGFuZCBTbWVsbFwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBqYWNrYWwgaGFzIGFkdmFudGFnZSBvbiBXaXNkb20gKFBlcmNlcHRpb24pIGNoZWNrcyB0aGF0IHJlbHkgb24gaGVhcmluZyBvciBzbWVsbC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJQYWNrIFRhY3RpY3NcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgamFja2FsIGhhcyBhZHZhbnRhZ2Ugb24gYW4gYXR0YWNrIHJvbGwgYWdhaW5zdCBhIGNyZWF0dXJlIGlmIGF0IGxlYXN0IG9uZSBvZiB0aGUgamFja2FsJ3MgYWxsaWVzIGlzIHdpdGhpbiA1IGZ0LiBvZiB0aGUgY3JlYXR1cmUgYW5kIHRoZSBhbGx5IGlzbid0IGluY2FwYWNpdGF0ZWQuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQml0ZVwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICsxIHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMSAoMWQ0IFx1MjAxNCAxKSBwaWVyY2luZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMSxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMWQ0XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogLTEsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIktpbGxlciBXaGFsZVwiLFxuXHRcdHNpemU6IFwiSHVnZVwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcImJlYXN0XCIsXG5cdFx0c3VidHlwZTogXCJcIixcblx0XHRhbGlnbm1lbnQ6IFwidW5hbGlnbmVkXCIsXG5cdFx0YWM6IDEyLFxuXHRcdGhwOiA5MCxcblx0XHRoaXRfZGljZTogXCIxMmQxMlwiLFxuXHRcdHNwZWVkOiBcInN3aW0gNjAgZnQuXCIsXG5cdFx0c3RhdHM6IFsxOSwgMTAsIDEzLCAzLCAxMiwgN10sXG5cdFx0c2tpbGxzYXZlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRwZXJjZXB0aW9uOiAzLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuXHRcdGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuXHRcdHNlbnNlczogXCJibGluZHNpZ2h0IDEyMCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxM1wiLFxuXHRcdGxhbmd1YWdlczogXCJcIixcblx0XHRjcjogXCIzXCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiRWNob2xvY2F0aW9uXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIHdoYWxlIGNhbid0IHVzZSBpdHMgYmxpbmRzaWdodCB3aGlsZSBkZWFmZW5lZC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJIb2xkIEJyZWF0aFwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSB3aGFsZSBjYW4gaG9sZCBpdHMgYnJlYXRoIGZvciAzMCBtaW51dGVzXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiS2VlbiBIZWFyaW5nXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIHdoYWxlIGhhcyBhZHZhbnRhZ2Ugb24gV2lzZG9tIChQZXJjZXB0aW9uKSBjaGVja3MgdGhhdCByZWx5IG9uIGhlYXJpbmcuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQml0ZVwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs2IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMjEgKDVkNiArIDQpIHBpZXJjaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJLbmlnaHRcIixcblx0XHRzaXplOiBcIk1lZGl1bVwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcImh1bWFub2lkXCIsXG5cdFx0c3VidHlwZTogXCJhbnkgcmFjZVwiLFxuXHRcdGFsaWdubWVudDogXCJhbnkgYWxpZ25tZW50XCIsXG5cdFx0YWM6IDE4LFxuXHRcdGhwOiA1Mixcblx0XHRoaXRfZGljZTogXCI4ZDhcIixcblx0XHRzcGVlZDogXCIzMCBmdC5cIixcblx0XHRzdGF0czogWzE2LCAxMSwgMTQsIDExLCAxMSwgMTVdLFxuXHRcdHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdGNvbnN0aXR1dGlvbjogNCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHdpc2RvbTogMixcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcblx0XHRzZW5zZXM6IFwicGFzc2l2ZSBQZXJjZXB0aW9uIDEwXCIsXG5cdFx0bGFuZ3VhZ2VzOiBcImFueSBvbmUgbGFuZ3VhZ2UgKHVzdWFsbHkgQ29tbW9uKVwiLFxuXHRcdGNyOiBcIjNcIixcblx0XHR0cmFpdHM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJCcmF2ZVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBrbmlnaHQgaGFzIGFkdmFudGFnZSBvbiBzYXZpbmcgdGhyb3dzIGFnYWluc3QgYmVpbmcgZnJpZ2h0ZW5lZC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJNdWx0aWF0dGFja1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBrbmlnaHQgbWFrZXMgdHdvIG1lbGVlIGF0dGFja3MuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiR3JlYXRzd29yZFwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs1IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTAgKDJkNiArIDMpIHNsYXNoaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA1LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIyZDZcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiAzLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJIZWF2eSBDcm9zc2Jvd1wiLFxuXHRcdFx0XHRkZXNjOiBcIlJhbmdlZCBXZWFwb24gQXR0YWNrOiArMiB0byBoaXQsIHJhbmdlIDEwMC80MDAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDUgKDFkMTApIHBpZXJjaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAyLFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxZDEwXCIsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkxlYWRlcnNoaXAgKFJlY2hhcmdlcyBhZnRlciBhIFNob3J0IG9yIExvbmcgUmVzdClcIixcblx0XHRcdFx0ZGVzYzogXCJGb3IgMSBtaW51dGUsIHRoZSBrbmlnaHQgY2FuIHV0dGVyIGEgc3BlY2lhbCBjb21tYW5kIG9yIHdhcm5pbmcgd2hlbmV2ZXIgYSBub25ob3N0aWxlIGNyZWF0dXJlIHRoYXQgaXQgY2FuIHNlZSB3aXRoaW4gMzAgZnQuIG9mIGl0IG1ha2VzIGFuIGF0dGFjayByb2xsIG9yIGEgc2F2aW5nIHRocm93LiBUaGUgY3JlYXR1cmUgY2FuIGFkZCBhIGQ0IHRvIGl0cyByb2xsIHByb3ZpZGVkIGl0IGNhbiBoZWFyIGFuZCB1bmRlcnN0YW5kIHRoZSBrbmlnaHQuIEEgY3JlYXR1cmUgY2FuIGJlbmVmaXQgZnJvbSBvbmx5IG9uZSBMZWFkZXJzaGlwIGRpZSBhdCBhIHRpbWUuIFRoaXMgZWZmZWN0IGVuZHMgaWYgdGhlIGtuaWdodCBpcyBpbmNhcGFjaXRhdGVkLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0cmVhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiUGFycnlcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUga25pZ2h0IGFkZHMgMiB0byBpdHMgQUMgYWdhaW5zdCBvbmUgbWVsZWUgYXR0YWNrIHRoYXQgd291bGQgaGl0IGl0LiBUbyBkbyBzbywgdGhlIGtuaWdodCBtdXN0IHNlZSB0aGUgYXR0YWNrZXIgYW5kIGJlIHdpZWxkaW5nIGEgbWVsZWUgd2VhcG9uLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIktvYm9sZFwiLFxuXHRcdHNpemU6IFwiU21hbGxcIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJodW1hbm9pZFwiLFxuXHRcdHN1YnR5cGU6IFwia29ib2xkXCIsXG5cdFx0YWxpZ25tZW50OiBcImxhd2Z1bCBldmlsXCIsXG5cdFx0YWM6IDEyLFxuXHRcdGhwOiA1LFxuXHRcdGhpdF9kaWNlOiBcIjJkNlwiLFxuXHRcdHNwZWVkOiBcIjMwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbNywgMTUsIDksIDgsIDcsIDhdLFxuXHRcdGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuXHRcdGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuXHRcdHNlbnNlczogXCJkYXJrdmlzaW9uIDYwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDhcIixcblx0XHRsYW5ndWFnZXM6IFwiQ29tbW9uLCBEcmFjb25pY1wiLFxuXHRcdGNyOiBcIjEvOFwiLFxuXHRcdHRyYWl0czogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlN1bmxpZ2h0IFNlbnNpdGl2aXR5XCIsXG5cdFx0XHRcdGRlc2M6IFwiV2hpbGUgaW4gc3VubGlnaHQsIHRoZSBrb2JvbGQgaGFzIGRpc2FkdmFudGFnZSBvbiBhdHRhY2sgcm9sbHMsIGFzIHdlbGwgYXMgb24gV2lzZG9tIChQZXJjZXB0aW9uKSBjaGVja3MgdGhhdCByZWx5IG9uIHNpZ2h0LlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlBhY2sgVGFjdGljc1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBrb2JvbGQgaGFzIGFkdmFudGFnZSBvbiBhbiBhdHRhY2sgcm9sbCBhZ2FpbnN0IGEgY3JlYXR1cmUgaWYgYXQgbGVhc3Qgb25lIG9mIHRoZSBrb2JvbGQncyBhbGxpZXMgaXMgd2l0aGluIDUgZnQuIG9mIHRoZSBjcmVhdHVyZSBhbmQgdGhlIGFsbHkgaXNuJ3QgaW5jYXBhY2l0YXRlZC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJEYWdnZXJcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNCB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDQgKDFkNCArIDIpIHBpZXJjaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA0LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxZDRcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiAyLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJTbGluZ1wiLFxuXHRcdFx0XHRkZXNjOiBcIlJhbmdlZCBXZWFwb24gQXR0YWNrOiArNCB0byBoaXQsIHJhbmdlIDMwLzEyMCBmdC4sIG9uZSB0YXJnZXQuIEhpdDogNCAoMWQ0ICsgMikgYmx1ZGdlb25pbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDQsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjFkNFwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDIsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIktyYWtlblwiLFxuXHRcdHNpemU6IFwiR2FyZ2FudHVhblwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcIm1vbnN0cm9zaXR5XCIsXG5cdFx0c3VidHlwZTogXCJ0aXRhblwiLFxuXHRcdGFsaWdubWVudDogXCJjaGFvdGljIGV2aWxcIixcblx0XHRhYzogMTgsXG5cdFx0aHA6IDQ3Mixcblx0XHRoaXRfZGljZTogXCIyN2QyMFwiLFxuXHRcdHNwZWVkOiBcIjIwIGZ0Liwgc3dpbSA2MCBmdC5cIixcblx0XHRzdGF0czogWzMwLCAxMSwgMjUsIDIyLCAxOCwgMjBdLFxuXHRcdHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdHN0cmVuZ3RoOiAxNyxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdGRleHRlcml0eTogNyxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdGNvbnN0aXR1dGlvbjogMTQsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRpbnRlbGxpZ2VuY2U6IDEzLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0d2lzZG9tOiAxMSxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczpcblx0XHRcdFwibGlnaHRuaW5nOyBibHVkZ2VvbmluZywgcGllcmNpbmcsIGFuZCBzbGFzaGluZyBmcm9tIG5vbm1hZ2ljYWwgd2VhcG9uc1wiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcImZyaWdodGVuZWQsIHBhcmFseXplZFwiLFxuXHRcdHNlbnNlczogXCJ0cnVlc2lnaHQgMTIwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDE0XCIsXG5cdFx0bGFuZ3VhZ2VzOlxuXHRcdFx0XCJ1bmRlcnN0YW5kcyBBYnlzc2FsLCBDZWxlc3RpYWwsIEluZmVybmFsLCBhbmQgUHJpbW9yZGlhbCBidXQgY2FuJ3Qgc3BlYWssIHRlbGVwYXRoeSAxMjAgZnQuXCIsXG5cdFx0Y3I6IFwiMjNcIixcblx0XHR0cmFpdHM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJBbXBoaWJpb3VzXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGtyYWtlbiBjYW4gYnJlYXRoZSBhaXIgYW5kIHdhdGVyLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkZyZWVkb20gb2YgTW92ZW1lbnRcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUga3Jha2VuIGlnbm9yZXMgZGlmZmljdWx0IHRlcnJhaW4sIGFuZCBtYWdpY2FsIGVmZmVjdHMgY2FuJ3QgcmVkdWNlIGl0cyBzcGVlZCBvciBjYXVzZSBpdCB0byBiZSByZXN0cmFpbmVkLiBJdCBjYW4gc3BlbmQgNSBmZWV0IG9mIG1vdmVtZW50IHRvIGVzY2FwZSBmcm9tIG5vbm1hZ2ljYWwgcmVzdHJhaW50cyBvciBiZWluZyBncmFwcGxlZC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJTaWVnZSBNb25zdGVyXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGtyYWtlbiBkZWFscyBkb3VibGUgZGFtYWdlIHRvIG9iamVjdHMgYW5kIHN0cnVjdHVyZXMuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUga3Jha2VuIG1ha2VzIHRocmVlIHRlbnRhY2xlIGF0dGFja3MsIGVhY2ggb2Ygd2hpY2ggaXQgY2FuIHJlcGxhY2Ugd2l0aCBvbmUgdXNlIG9mIEZsaW5nLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkJpdGVcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNyB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDIzICgzZDggKyAxMCkgcGllcmNpbmcgZGFtYWdlLiBJZiB0aGUgdGFyZ2V0IGlzIGEgTGFyZ2Ugb3Igc21hbGxlciBjcmVhdHVyZSBncmFwcGxlZCBieSB0aGUga3Jha2VuLCB0aGF0IGNyZWF0dXJlIGlzIHN3YWxsb3dlZCwgYW5kIHRoZSBncmFwcGxlIGVuZHMuIFdoaWxlIHN3YWxsb3dlZCwgdGhlIGNyZWF0dXJlIGlzIGJsaW5kZWQgYW5kIHJlc3RyYWluZWQsIGl0IGhhcyB0b3RhbCBjb3ZlciBhZ2FpbnN0IGF0dGFja3MgYW5kIG90aGVyIGVmZmVjdHMgb3V0c2lkZSB0aGUga3Jha2VuLCBhbmQgaXQgdGFrZXMgNDIgKDEyZDYpIGFjaWQgZGFtYWdlIGF0IHRoZSBzdGFydCBvZiBlYWNoIG9mIHRoZSBrcmFrZW4ncyB0dXJucy4gSWYgdGhlIGtyYWtlbiB0YWtlcyA1MCBkYW1hZ2Ugb3IgbW9yZSBvbiBhIHNpbmdsZSB0dXJuIGZyb20gYSBjcmVhdHVyZSBpbnNpZGUgaXQsIHRoZSBrcmFrZW4gbXVzdCBzdWNjZWVkIG9uIGEgREMgMjUgQ29uc3RpdHV0aW9uIHNhdmluZyB0aHJvdyBhdCB0aGUgZW5kIG9mIHRoYXQgdHVybiBvciByZWd1cmdpdGF0ZSBhbGwgc3dhbGxvd2VkIGNyZWF0dXJlcywgd2hpY2ggZmFsbCBwcm9uZSBpbiBhIHNwYWNlIHdpdGhpbiAxMCBmZWV0IG9mIHRoZSBrcmFrZW4uIElmIHRoZSBrcmFrZW4gZGllcywgYSBzd2FsbG93ZWQgY3JlYXR1cmUgaXMgbm8gbG9uZ2VyIHJlc3RyYWluZWQgYnkgaXQgYW5kIGNhbiBlc2NhcGUgZnJvbSB0aGUgY29ycHNlIHVzaW5nIDE1IGZlZXQgb2YgbW92ZW1lbnQsIGV4aXRpbmcgcHJvbmUuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNyxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiM2Q4XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogMTAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlRlbnRhY2xlXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzcgdG8gaGl0LCByZWFjaCAzMCBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMjAgKDNkNiArIDEwKSBibHVkZ2VvbmluZyBkYW1hZ2UsIGFuZCB0aGUgdGFyZ2V0IGlzIGdyYXBwbGVkIChlc2NhcGUgREMgMTgpLiBVbnRpbCB0aGlzIGdyYXBwbGUgZW5kcywgdGhlIHRhcmdldCBpcyByZXN0cmFpbmVkLiBUaGUga3Jha2VuIGhhcyB0ZW4gdGVudGFjbGVzLCBlYWNoIG9mIHdoaWNoIGNhbiBncmFwcGxlIG9uZSB0YXJnZXQuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNyxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiM2Q2XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogMTAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkZsaW5nXCIsXG5cdFx0XHRcdGRlc2M6IFwiT25lIExhcmdlIG9yIHNtYWxsZXIgb2JqZWN0IGhlbGQgb3IgY3JlYXR1cmUgZ3JhcHBsZWQgYnkgdGhlIGtyYWtlbiBpcyB0aHJvd24gdXAgdG8gNjAgZmVldCBpbiBhIHJhbmRvbSBkaXJlY3Rpb24gYW5kIGtub2NrZWQgcHJvbmUuIElmIGEgdGhyb3duIHRhcmdldCBzdHJpa2VzIGEgc29saWQgc3VyZmFjZSwgdGhlIHRhcmdldCB0YWtlcyAzICgxZDYpIGJsdWRnZW9uaW5nIGRhbWFnZSBmb3IgZXZlcnkgMTAgZmVldCBpdCB3YXMgdGhyb3duLiBJZiB0aGUgdGFyZ2V0IGlzIHRocm93biBhdCBhbm90aGVyIGNyZWF0dXJlLCB0aGF0IGNyZWF0dXJlIG11c3Qgc3VjY2VlZCBvbiBhIERDIDE4IERleHRlcml0eSBzYXZpbmcgdGhyb3cgb3IgdGFrZSB0aGUgc2FtZSBkYW1hZ2UgYW5kIGJlIGtub2NrZWQgcHJvbmUuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTGlnaHRuaW5nIFN0b3JtXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGtyYWtlbiBtYWdpY2FsbHkgY3JlYXRlcyB0aHJlZSBib2x0cyBvZiBsaWdodG5pbmcsIGVhY2ggb2Ygd2hpY2ggY2FuIHN0cmlrZSBhIHRhcmdldCB0aGUga3Jha2VuIGNhbiBzZWUgd2l0aGluIDEyMCBmZWV0IG9mIGl0LiBBIHRhcmdldCBtdXN0IG1ha2UgYSBEQyAyMyBEZXh0ZXJpdHkgc2F2aW5nIHRocm93LCB0YWtpbmcgMjIgKDRkMTApIGxpZ2h0bmluZyBkYW1hZ2Ugb24gYSBmYWlsZWQgc2F2ZSwgb3IgaGFsZiBhcyBtdWNoIGRhbWFnZSBvbiBhIHN1Y2Nlc3NmdWwgb25lLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjRkMTBcIixcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRsZWdlbmRhcnlfYWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlRlbnRhY2xlIEF0dGFjayBvciBGbGluZ1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBrcmFrZW4gbWFrZXMgb25lIHRlbnRhY2xlIGF0dGFjayBvciB1c2VzIGl0cyBGbGluZy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJMaWdodG5pbmcgU3Rvcm0gKENvc3RzIDIgQWN0aW9ucylcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUga3Jha2VuIHVzZXMgTGlnaHRuaW5nIFN0b3JtLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkluayBDbG91ZCAoQ29zdHMgMyBBY3Rpb25zKVwiLFxuXHRcdFx0XHRkZXNjOiBcIldoaWxlIHVuZGVyd2F0ZXIsIHRoZSBrcmFrZW4gZXhwZWxzIGFuIGluayBjbG91ZCBpbiBhIDYwLWZvb3QgcmFkaXVzLiBUaGUgY2xvdWQgc3ByZWFkcyBhcm91bmQgY29ybmVycywgYW5kIHRoYXQgYXJlYSBpcyBoZWF2aWx5IG9ic2N1cmVkIHRvIGNyZWF0dXJlcyBvdGhlciB0aGFuIHRoZSBrcmFrZW4uIEVhY2ggY3JlYXR1cmUgb3RoZXIgdGhhbiB0aGUga3Jha2VuIHRoYXQgZW5kcyBpdHMgdHVybiB0aGVyZSBtdXN0IHN1Y2NlZWQgb24gYSBEQyAyMyBDb25zdGl0dXRpb24gc2F2aW5nIHRocm93LCB0YWtpbmcgMTYgKDNkMTApIHBvaXNvbiBkYW1hZ2Ugb24gYSBmYWlsZWQgc2F2ZSwgb3IgaGFsZiBhcyBtdWNoIGRhbWFnZSBvbiBhIHN1Y2Nlc3NmdWwgb25lLiBBIHN0cm9uZyBjdXJyZW50IGRpc3BlcnNlcyB0aGUgY2xvdWQsIHdoaWNoIG90aGVyd2lzZSBkaXNhcHBlYXJzIGF0IHRoZSBlbmQgb2YgdGhlIGtyYWtlbidzIG5leHQgdHVybi5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJMYW1pYVwiLFxuXHRcdHNpemU6IFwiTGFyZ2VcIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJtb25zdHJvc2l0eVwiLFxuXHRcdHN1YnR5cGU6IFwiXCIsXG5cdFx0YWxpZ25tZW50OiBcImNoYW90aWMgZXZpbFwiLFxuXHRcdGFjOiAxMyxcblx0XHRocDogOTcsXG5cdFx0aGl0X2RpY2U6IFwiMTNkMTBcIixcblx0XHRzcGVlZDogXCIzMCBmdC5cIixcblx0XHRzdGF0czogWzE2LCAxMywgMTUsIDE0LCAxNSwgMTZdLFxuXHRcdHNraWxsc2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0ZGVjZXB0aW9uOiA3LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0aW5zaWdodDogNCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHN0ZWFsdGg6IDMsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0c2Vuc2VzOiBcImRhcmt2aXNpb24gNjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTJcIixcblx0XHRsYW5ndWFnZXM6IFwiQWJ5c3NhbCwgQ29tbW9uXCIsXG5cdFx0Y3I6IFwiNFwiLFxuXHRcdHRyYWl0czogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIklubmF0ZSBTcGVsbGNhc3RpbmdcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgbGFtaWEncyBpbm5hdGUgc3BlbGxjYXN0aW5nIGFiaWxpdHkgaXMgQ2hhcmlzbWEgKHNwZWxsIHNhdmUgREMgMTMpLiBJdCBjYW4gaW5uYXRlbHkgY2FzdCB0aGUgZm9sbG93aW5nIHNwZWxscywgcmVxdWlyaW5nIG5vIG1hdGVyaWFsIGNvbXBvbmVudHMuIEF0IHdpbGw6IGRpc2d1aXNlIHNlbGYgKGFueSBodW1hbm9pZCBmb3JtKSwgbWFqb3IgaW1hZ2UgMy9kYXkgZWFjaDogY2hhcm0gcGVyc29uLCBtaXJyb3IgaW1hZ2UsIHNjcnlpbmcsIHN1Z2dlc3Rpb24gMS9kYXk6IGdlYXNcIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJNdWx0aWF0dGFja1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBsYW1pYSBtYWtlcyB0d28gYXR0YWNrczogb25lIHdpdGggaXRzIGNsYXdzIGFuZCBvbmUgd2l0aCBpdHMgZGFnZ2VyIG9yIEludG94aWNhdGluZyBUb3VjaC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJDbGF3c1wiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs1IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTQgKDJkMTAgKyAzKSBzbGFzaGluZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNSxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMmQxMFwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDMsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkRhZ2dlclwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs1IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogNSAoMWQ0ICsgMykgcGllcmNpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDUsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjFkNFwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDMsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkludG94aWNhdGluZyBUb3VjaFwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFNwZWxsIEF0dGFjazogKzUgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIGNyZWF0dXJlLiBIaXQ6IFRoZSB0YXJnZXQgaXMgbWFnaWNhbGx5IGN1cnNlZCBmb3IgMSBob3VyLiBVbnRpbCB0aGUgY3Vyc2UgZW5kcywgdGhlIHRhcmdldCBoYXMgZGlzYWR2YW50YWdlIG9uIFdpc2RvbSBzYXZpbmcgdGhyb3dzIGFuZCBhbGwgYWJpbGl0eSBjaGVja3MuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiTGVtdXJlXCIsXG5cdFx0c2l6ZTogXCJNZWRpdW1cIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJmaWVuZFwiLFxuXHRcdHN1YnR5cGU6IFwiZGV2aWxcIixcblx0XHRhbGlnbm1lbnQ6IFwibGF3ZnVsIGV2aWxcIixcblx0XHRhYzogNyxcblx0XHRocDogMTMsXG5cdFx0aGl0X2RpY2U6IFwiM2Q4XCIsXG5cdFx0c3BlZWQ6IFwiMTUgZnQuXCIsXG5cdFx0c3RhdHM6IFsxMCwgNSwgMTEsIDEsIDExLCAzXSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJjb2xkXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiZmlyZSwgcG9pc29uXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiY2hhcm1lZCwgZnJpZ2h0ZW5lZCwgcG9pc29uZWRcIixcblx0XHRzZW5zZXM6IFwiZGFya3Zpc2lvbiAxMjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTBcIixcblx0XHRsYW5ndWFnZXM6IFwidW5kZXJzdGFuZHMgaW5mZXJuYWwgYnV0IGNhbid0IHNwZWFrXCIsXG5cdFx0Y3I6IFwiMFwiLFxuXHRcdHRyYWl0czogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkRldmlsJ3MgU2lnaHRcIixcblx0XHRcdFx0ZGVzYzogXCJNYWdpY2FsIGRhcmtuZXNzIGRvZXNuJ3QgaW1wZWRlIHRoZSBsZW11cmUncyBkYXJrdmlzaW9uLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkhlbGxpc2ggUmVqdXZlbmF0aW9uXCIsXG5cdFx0XHRcdGRlc2M6IFwiQSBsZW11cmUgdGhhdCBkaWVzIGluIHRoZSBOaW5lIEhlbGxzIGNvbWVzIGJhY2sgdG8gbGlmZSB3aXRoIGFsbCBpdHMgaGl0IHBvaW50cyBpbiAxZDEwIGRheXMgdW5sZXNzIGl0IGlzIGtpbGxlZCBieSBhIGdvb2QtYWxpZ25lZCBjcmVhdHVyZSB3aXRoIGEgYmxlc3Mgc3BlbGwgY2FzdCBvbiB0aGF0IGNyZWF0dXJlIG9yIGl0cyByZW1haW5zIGFyZSBzcHJpbmtsZWQgd2l0aCBob2x5IHdhdGVyLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkZpc3RcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMyB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDIgKDFkNCkgYmx1ZGdlb25pbmcgZGFtYWdlXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMyxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMWQ0XCIsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIkxpY2hcIixcblx0XHRzaXplOiBcIk1lZGl1bVwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcInVuZGVhZFwiLFxuXHRcdHN1YnR5cGU6IFwiXCIsXG5cdFx0YWxpZ25tZW50OiBcImFueSBldmlsIGFsaWdubWVudFwiLFxuXHRcdGFjOiAxNyxcblx0XHRocDogMTM1LFxuXHRcdGhpdF9kaWNlOiBcIjE4ZDhcIixcblx0XHRzcGVlZDogXCIzMCBmdC5cIixcblx0XHRzdGF0czogWzExLCAxNiwgMTYsIDIwLCAxNCwgMTZdLFxuXHRcdHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdGNvbnN0aXR1dGlvbjogMTAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRpbnRlbGxpZ2VuY2U6IDEyLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0d2lzZG9tOiA5LFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdHNraWxsc2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0YXJjYW5hOiAxOCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdGhpc3Rvcnk6IDEyLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0aW5zaWdodDogOSxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHBlcmNlcHRpb246IDksXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiY29sZCwgbGlnaHRuaW5nLCBuZWNyb3RpY1wiLFxuXHRcdGRhbWFnZV9pbW11bml0aWVzOlxuXHRcdFx0XCJwb2lzb247IGJsdWRnZW9uaW5nLCBwaWVyY2luZywgYW5kIHNsYXNoaW5nIGZyb20gbm9ubWFnaWNhbCB3ZWFwb25zXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6XG5cdFx0XHRcImNoYXJtZWQsIGV4aGF1c3Rpb24sIGZyaWdodGVuZWQsIHBhcmFseXplZCwgcG9pc29uZWRcIixcblx0XHRzZW5zZXM6IFwidHJ1ZXNpZ2h0IDEyMCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxOVwiLFxuXHRcdGxhbmd1YWdlczogXCJDb21tb24gcGx1cyB1cCB0byBmaXZlIG90aGVyIGxhbmd1YWdlc1wiLFxuXHRcdGNyOiBcIjIxXCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTGVnZW5kYXJ5IFJlc2lzdGFuY2UgKDMvRGF5KVwiLFxuXHRcdFx0XHRkZXNjOiBcIklmIHRoZSBsaWNoIGZhaWxzIGEgc2F2aW5nIHRocm93LCBpdCBjYW4gY2hvb3NlIHRvIHN1Y2NlZWQgaW5zdGVhZC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJSZWp1dmVuYXRpb25cIixcblx0XHRcdFx0ZGVzYzogXCJJZiBpdCBoYXMgYSBwaHlsYWN0ZXJ5LCBhIGRlc3Ryb3llZCBsaWNoIGdhaW5zIGEgbmV3IGJvZHkgaW4gMWQxMCBkYXlzLCByZWdhaW5pbmcgYWxsIGl0cyBoaXQgcG9pbnRzIGFuZCBiZWNvbWluZyBhY3RpdmUgYWdhaW4uIFRoZSBuZXcgYm9keSBhcHBlYXJzIHdpdGhpbiA1IGZlZXQgb2YgdGhlIHBoeWxhY3RlcnkuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiVHVybiBSZXNpc3RhbmNlXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGxpY2ggaGFzIGFkdmFudGFnZSBvbiBzYXZpbmcgdGhyb3dzIGFnYWluc3QgYW55IGVmZmVjdCB0aGF0IHR1cm5zIHVuZGVhZC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJQYXJhbHl6aW5nIFRvdWNoXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgU3BlbGwgQXR0YWNrOiArMTIgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIGNyZWF0dXJlLiBIaXQ6IDEwICgzZDYpIGNvbGQgZGFtYWdlLiBUaGUgdGFyZ2V0IG11c3Qgc3VjY2VlZCBvbiBhIERDIDE4IENvbnN0aXR1dGlvbiBzYXZpbmcgdGhyb3cgb3IgYmUgcGFyYWx5emVkIGZvciAxIG1pbnV0ZS4gVGhlIHRhcmdldCBjYW4gcmVwZWF0IHRoZSBzYXZpbmcgdGhyb3cgYXQgdGhlIGVuZCBvZiBlYWNoIG9mIGl0cyB0dXJucywgZW5kaW5nIHRoZSBlZmZlY3Qgb24gaXRzZWxmIG9uIGEgc3VjY2Vzcy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAxMixcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiM2Q2XCIsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0bGVnZW5kYXJ5X2FjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJDYW50cmlwXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGxpY2ggY2FzdHMgYSBjYW50cmlwLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlBhcmFseXppbmcgVG91Y2ggKENvc3RzIDIgQWN0aW9ucylcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgbGljaCB1c2VzIGl0cyBQYXJhbHl6aW5nIFRvdWNoLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkZyaWdodGVuaW5nIEdhemUgKENvc3RzIDIgQWN0aW9ucylcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgbGljaCBmaXhlcyBpdHMgZ2F6ZSBvbiBvbmUgY3JlYXR1cmUgaXQgY2FuIHNlZSB3aXRoaW4gMTAgZmVldCBvZiBpdC4gVGhlIHRhcmdldCBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxOCBXaXNkb20gc2F2aW5nIHRocm93IGFnYWluc3QgdGhpcyBtYWdpYyBvciBiZWNvbWUgZnJpZ2h0ZW5lZCBmb3IgMSBtaW51dGUuIFRoZSBmcmlnaHRlbmVkIHRhcmdldCBjYW4gcmVwZWF0IHRoZSBzYXZpbmcgdGhyb3cgYXQgdGhlIGVuZCBvZiBlYWNoIG9mIGl0cyB0dXJucywgZW5kaW5nIHRoZSBlZmZlY3Qgb24gaXRzZWxmIG9uIGEgc3VjY2Vzcy4gSWYgYSB0YXJnZXQncyBzYXZpbmcgdGhyb3cgaXMgc3VjY2Vzc2Z1bCBvciB0aGUgZWZmZWN0IGVuZHMgZm9yIGl0LCB0aGUgdGFyZ2V0IGlzIGltbXVuZSB0byB0aGUgbGljaCdzIGdhemUgZm9yIHRoZSBuZXh0IDI0IGhvdXJzLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkRpc3J1cHQgTGlmZSAoQ29zdHMgMyBBY3Rpb25zKVwiLFxuXHRcdFx0XHRkZXNjOiBcIkVhY2ggbGl2aW5nIGNyZWF0dXJlIHdpdGhpbiAyMCBmZWV0IG9mIHRoZSBsaWNoIG11c3QgbWFrZSBhIERDIDE4IENvbnN0aXR1dGlvbiBzYXZpbmcgdGhyb3cgYWdhaW5zdCB0aGlzIG1hZ2ljLCB0YWtpbmcgMjEgKDZkNikgbmVjcm90aWMgZGFtYWdlIG9uIGEgZmFpbGVkIHNhdmUsIG9yIGhhbGYgYXMgbXVjaCBkYW1hZ2Ugb24gYSBzdWNjZXNzZnVsIG9uZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCI2ZDZcIixcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRzcGVsbHM6IFtcblx0XHRcdFwiVGhlIGxpY2ggaXMgYW4gMTh0aC1sZXZlbCBzcGVsbGNhc3Rlci4gSXRzIHNwZWxsY2FzdGluZyBhYmlsaXR5IGlzIEludGVsbGlnZW5jZSAoc3BlbGwgc2F2ZSBEQyAyMCwgKzEyIHRvIGhpdCB3aXRoIHNwZWxsIGF0dGFja3MpLiBUaGUgbGljaCBoYXMgdGhlIGZvbGxvd2luZyB3aXphcmQgc3BlbGxzIHByZXBhcmVkOlwiLFxuXHRcdFx0e1xuXHRcdFx0XHRcIkNhbnRyaXBzIChhdCB3aWxsKVwiOlxuXHRcdFx0XHRcdFwibWFnZSBoYW5kLCBwcmVzdGlkaWdpdGF0aW9uLCByYXkgb2YgZnJvc3RcIixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdFwiMXN0IGxldmVsICg0IHNsb3RzKVwiOlxuXHRcdFx0XHRcdFwiZGV0ZWN0IG1hZ2ljLCBtYWdpYyBtaXNzaWxlLCBzaGllbGQsIHRodW5kZXJ3YXZlXCIsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRcIjJuZCBsZXZlbCAoMyBzbG90cylcIjpcblx0XHRcdFx0XHRcImRldGVjdCB0aG91Z2h0cywgaW52aXNpYmlsaXR5LCBNZWxmJ3MgYWNpZCBhcnJvdywgbWlycm9yIGltYWdlXCIsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRcIjNyZCBsZXZlbCAoMyBzbG90cylcIjpcblx0XHRcdFx0XHRcImFuaW1hdGUgZGVhZCwgY291bnRlcnNwZWxsLCBkaXNwZWwgbWFnaWMsIGZpcmViYWxsXCIsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRcIjR0aCBsZXZlbCAoMyBzbG90cylcIjogXCJibGlnaHQsIGRpbWVuc2lvbiBkb29yXCIsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRcIjV0aCBsZXZlbCAoMyBzbG90cylcIjogXCJjbG91ZGtpbGwsIHNjcnlpbmdcIixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdFwiNnRoIGxldmVsICgxIHNsb3QpXCI6IFwiZGlzaW50ZWdyYXRlLCBnbG9iZSBvZiBpbnZ1bG5lcmFiaWxpdHlcIixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdFwiN3RoIGxldmVsICgxIHNsb3QpXCI6IFwiZmluZ2VyIG9mIGRlYXRoLCBwbGFuZSBzaGlmdFwiLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0XCI4dGggbGV2ZWwgKDEgc2xvdClcIjogXCJkb21pbmF0ZSBtb25zdGVyLCBwb3dlciB3b3JkIHN0dW5cIixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdFwiOXRoIGxldmVsICgxIHNsb3QpXCI6IFwicG93ZXIgd29yZCBraWxsXCIsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIkxpb25cIixcblx0XHRzaXplOiBcIkxhcmdlXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwiYmVhc3RcIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcblx0XHRhYzogMTIsXG5cdFx0aHA6IDI2LFxuXHRcdGhpdF9kaWNlOiBcIjRkMTBcIixcblx0XHRzcGVlZDogXCI1MCBmdC5cIixcblx0XHRzdGF0czogWzE3LCAxNSwgMTMsIDMsIDEyLCA4XSxcblx0XHRza2lsbHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdHBlcmNlcHRpb246IDMsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRzdGVhbHRoOiA2LFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuXHRcdGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuXHRcdHNlbnNlczogXCJwYXNzaXZlIFBlcmNlcHRpb24gMTNcIixcblx0XHRsYW5ndWFnZXM6IFwiXCIsXG5cdFx0Y3I6IFwiMVwiLFxuXHRcdHRyYWl0czogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIktlZW4gU21lbGxcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgbGlvbiBoYXMgYWR2YW50YWdlIG9uIFdpc2RvbSAoUGVyY2VwdGlvbikgY2hlY2tzIHRoYXQgcmVseSBvbiBzbWVsbC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJQYWNrIFRhY3RpY3NcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgbGlvbiBoYXMgYWR2YW50YWdlIG9uIGFuIGF0dGFjayByb2xsIGFnYWluc3QgYSBjcmVhdHVyZSBpZiBhdCBsZWFzdCBvbmUgb2YgdGhlIGxpb24ncyBhbGxpZXMgaXMgd2l0aGluIDUgZnQuIG9mIHRoZSBjcmVhdHVyZSBhbmQgdGhlIGFsbHkgaXNuJ3QgaW5jYXBhY2l0YXRlZC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJQb3VuY2VcIixcblx0XHRcdFx0ZGVzYzogXCJJZiB0aGUgbGlvbiBtb3ZlcyBhdCBsZWFzdCAyMCBmdC4gc3RyYWlnaHQgdG93YXJkIGEgY3JlYXR1cmUgYW5kIHRoZW4gaGl0cyBpdCB3aXRoIGEgY2xhdyBhdHRhY2sgb24gdGhlIHNhbWUgdHVybiwgdGhhdCB0YXJnZXQgbXVzdCBzdWNjZWVkIG9uIGEgREMgMTMgU3RyZW5ndGggc2F2aW5nIHRocm93IG9yIGJlIGtub2NrZWQgcHJvbmUuIElmIHRoZSB0YXJnZXQgaXMgcHJvbmUsIHRoZSBsaW9uIGNhbiBtYWtlIG9uZSBiaXRlIGF0dGFjayBhZ2FpbnN0IGl0IGFzIGEgYm9udXMgYWN0aW9uLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlJ1bm5pbmcgTGVhcFwiLFxuXHRcdFx0XHRkZXNjOiBcIldpdGggYSAxMC1mb290IHJ1bm5pbmcgc3RhcnQsIHRoZSBsaW9uIGNhbiBsb25nIGp1bXAgdXAgdG8gMjUgZnQuLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkJpdGVcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNSB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDcgKDFkOCArIDMpIHBpZXJjaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA1LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxZDhcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiAzLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJDbGF3XCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzUgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiA2ICgxZDYgKyAzKSBzbGFzaGluZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNSxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMWQ2XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogMyxcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiTGl6YXJkXCIsXG5cdFx0c2l6ZTogXCJUaW55XCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwiYmVhc3RcIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcblx0XHRhYzogMTAsXG5cdFx0aHA6IDIsXG5cdFx0aGl0X2RpY2U6IFwiMWQ0XCIsXG5cdFx0c3BlZWQ6IFwiMjAgZnQuLCBjbGltYiAyMCBmdC5cIixcblx0XHRzdGF0czogWzIsIDExLCAxMCwgMSwgOCwgM10sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0c2Vuc2VzOiBcImRhcmt2aXNpb24gMzAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gOVwiLFxuXHRcdGxhbmd1YWdlczogXCJcIixcblx0XHRjcjogXCIwXCIsXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkJpdGVcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMCB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDEgcGllcmNpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHRcdGRhbWFnZV9ib251czogMSxcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiTGl6YXJkZm9sa1wiLFxuXHRcdHNpemU6IFwiTWVkaXVtXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwiaHVtYW5vaWRcIixcblx0XHRzdWJ0eXBlOiBcImxpemFyZGZvbGtcIixcblx0XHRhbGlnbm1lbnQ6IFwibmV1dHJhbFwiLFxuXHRcdGFjOiAxNSxcblx0XHRocDogMjIsXG5cdFx0aGl0X2RpY2U6IFwiNGQ4XCIsXG5cdFx0c3BlZWQ6IFwiMzAgZnQuLCBzd2ltIDMwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbMTUsIDEwLCAxMywgNywgMTIsIDddLFxuXHRcdHNraWxsc2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0cGVyY2VwdGlvbjogMyxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHN0ZWFsdGg6IDQsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRzdXJ2aXZhbDogNSxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcblx0XHRzZW5zZXM6IFwicGFzc2l2ZSBQZXJjZXB0aW9uIDEzXCIsXG5cdFx0bGFuZ3VhZ2VzOiBcIkRyYWNvbmljXCIsXG5cdFx0Y3I6IFwiMS8yXCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiSG9sZCBCcmVhdGhcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgbGl6YXJkZm9sayBjYW4gaG9sZCBpdHMgYnJlYXRoIGZvciAxNSBtaW51dGVzLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGxpemFyZGZvbGsgbWFrZXMgdHdvIG1lbGVlIGF0dGFja3MsIGVhY2ggb25lIHdpdGggYSBkaWZmZXJlbnQgd2VhcG9uLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkJpdGVcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNCB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDUgKDFkNiArIDIpIHBpZXJjaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA0LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxZDZcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiAyLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJIZWF2eSBDbHViXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzQgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiA1ICgxZDYgKyAyKSBibHVkZ2VvbmluZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNCxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMWQ2XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogMixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiSmF2ZWxpblwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIG9yIFJhbmdlZCBXZWFwb24gQXR0YWNrOiArNCB0byBoaXQsIHJlYWNoIDUgZnQuIG9yIHJhbmdlIDMwLzEyMCBmdC4sIG9uZSB0YXJnZXQuIEhpdDogNSAoMWQ2ICsgMikgcGllcmNpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDQsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjFkNlwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDIsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlNwaWtlZCBTaGllbGRcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNCB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDUgKDFkNiArIDIpIHBpZXJjaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA0LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxZDZcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiAyLFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJNYWdlXCIsXG5cdFx0c2l6ZTogXCJNZWRpdW1cIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJodW1hbm9pZFwiLFxuXHRcdHN1YnR5cGU6IFwiYW55IHJhY2VcIixcblx0XHRhbGlnbm1lbnQ6IFwiYW55IGFsaWdubWVudFwiLFxuXHRcdGFjOiAxMixcblx0XHRocDogNDAsXG5cdFx0aGl0X2RpY2U6IFwiOWQ4XCIsXG5cdFx0c3BlZWQ6IFwiMzAgZnQuXCIsXG5cdFx0c3RhdHM6IFs5LCAxNCwgMTEsIDE3LCAxMiwgMTFdLFxuXHRcdHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdGludGVsbGlnZW5jZTogNixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHdpc2RvbTogNCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRza2lsbHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdGFyY2FuYTogNixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdGhpc3Rvcnk6IDYsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0c2Vuc2VzOiBcInBhc3NpdmUgUGVyY2VwdGlvbiAxMVwiLFxuXHRcdGxhbmd1YWdlczogXCJhbnkgZm91ciBsYW5ndWFnZXNcIixcblx0XHRjcjogXCI2XCIsXG5cdFx0dHJhaXRzOiBbXSxcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiRGFnZ2VyXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgb3IgUmFuZ2VkIFdlYXBvbiBBdHRhY2s6ICs1IHRvIGhpdCwgcmVhY2ggNSBmdC4gb3IgcmFuZ2UgMjAvNjAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDQgKDFkNCArIDIpIHBpZXJjaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA1LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxZDRcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiAyLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdHNwZWxsczogW1xuXHRcdFx0XCJUaGUgbWFnZSBpcyBhIDl0aC1sZXZlbCBzcGVsbGNhc3Rlci4gSXRzIHNwZWxsY2FzdGluZyBhYmlsaXR5IGlzIEludGVsbGlnZW5jZSAoc3BlbGwgc2F2ZSBEQyAxNCwgKzYgdG8gaGl0IHdpdGggc3BlbGwgYXR0YWNrcykuIFRoZSBtYWdlIGhhcyB0aGUgZm9sbG93aW5nIHdpemFyZCBzcGVsbHMgcHJlcGFyZWQ6XCIsXG5cdFx0XHR7XG5cdFx0XHRcdFwiQ2FudHJpcHMgKGF0IHdpbGwpXCI6XG5cdFx0XHRcdFx0XCJmaXJlIGJvbHQsIGxpZ2h0LCBtYWdlIGhhbmQsIHByZXN0aWRpZ2l0YXRpb25cIixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdFwiMXN0IGxldmVsICg0IHNsb3RzKVwiOlxuXHRcdFx0XHRcdFwiZGV0ZWN0IG1hZ2ljLCBtYWdlIGFybW9yLCBtYWdpYyBtaXNzaWxlLCBzaGllbGRcIixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdFwiMm5kIGxldmVsICgzIHNsb3RzKVwiOiBcIm1pc3R5IHN0ZXAsIHN1Z2dlc3Rpb25cIixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdFwiM3JkIGxldmVsICgzIHNsb3RzKVwiOiBcImNvdW50ZXJzcGVsbCwgZmlyZWJhbGwsIGZseVwiLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0XCI0dGggbGV2ZWwgKDMgc2xvdHMpXCI6IFwiZ3JlYXRlciBpbnZpc2liaWxpdHksIGljZSBzdG9ybVwiLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0XCI1dGggbGV2ZWwgKDEgc2xvdClcIjogXCJjb25lIG9mIGNvbGRcIixcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiTWFnbWEgTWVwaGl0XCIsXG5cdFx0c2l6ZTogXCJTbWFsbFwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcImVsZW1lbnRhbFwiLFxuXHRcdHN1YnR5cGU6IFwiXCIsXG5cdFx0YWxpZ25tZW50OiBcIm5ldXRyYWwgZXZpbFwiLFxuXHRcdGFjOiAxMSxcblx0XHRocDogMjIsXG5cdFx0aGl0X2RpY2U6IFwiNWQ2XCIsXG5cdFx0c3BlZWQ6IFwiMzAgZnQuLCBmbHkgMzAgZnQuXCIsXG5cdFx0c3RhdHM6IFs4LCAxMiwgMTIsIDcsIDEwLCAxMF0sXG5cdFx0c2tpbGxzYXZlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRzdGVhbHRoOiAzLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiY29sZFwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJmaXJlLCBwb2lzb25cIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczogXCJwb2lzb25lZFwiLFxuXHRcdHNlbnNlczogXCJkYXJrdmlzaW9uIDYwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDEwXCIsXG5cdFx0bGFuZ3VhZ2VzOiBcIklnbmFuLCBUZXJyYW5cIixcblx0XHRjcjogXCIxLzJcIixcblx0XHR0cmFpdHM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJEZWF0aCBCdXJzdFwiLFxuXHRcdFx0XHRkZXNjOiBcIldoZW4gdGhlIG1lcGhpdCBkaWVzLCBpdCBleHBsb2RlcyBpbiBhIGJ1cnN0IG9mIGxhdmEuIEVhY2ggY3JlYXR1cmUgd2l0aGluIDUgZnQuIG9mIGl0IG11c3QgbWFrZSBhIERDIDExIERleHRlcml0eSBzYXZpbmcgdGhyb3csIHRha2luZyA3ICgyZDYpIGZpcmUgZGFtYWdlIG9uIGEgZmFpbGVkIHNhdmUsIG9yIGhhbGYgYXMgbXVjaCBkYW1hZ2Ugb24gYSBzdWNjZXNzZnVsIG9uZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIyZDZcIixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiRmFsc2UgQXBwZWFyYW5jZVwiLFxuXHRcdFx0XHRkZXNjOiBcIldoaWxlIHRoZSBtZXBoaXQgcmVtYWlucyBtb3Rpb25sZXNzLCBpdCBpcyBpbmRpc3Rpbmd1aXNoYWJsZSBmcm9tIGFuIG9yZGluYXJ5IG1vdW5kIG9mIG1hZ21hLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIklubmF0ZSBTcGVsbGNhc3RpbmcgKDEvRGF5KVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBtZXBoaXQgY2FuIGlubmF0ZWx5IGNhc3QgaGVhdCBtZXRhbCAoc3BlbGwgc2F2ZSBEQyAxMCksIHJlcXVpcmluZyBubyBtYXRlcmlhbCBjb21wb25lbnRzLiBJdHMgaW5uYXRlIHNwZWxsY2FzdGluZyBhYmlsaXR5IGlzIENoYXJpc21hLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkNsYXdzXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzMgdG8gaGl0LCByZWFjaCA1IGZ0IC4sIG9uZSBjcmVhdHVyZS4gSGl0OiAzICgxZDQgKyAxKSBzbGFzaGluZyBkYW1hZ2UgcGx1cyAyICgxZDQpIGZpcmUgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDMsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjFkNFwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDEsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkZpcmUgQnJlYXRoIChSZWNoYXJnZSA2KVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBtZXBoaXQgZXhoYWxlcyBhIDE1LWZvb3QgY29uZSBvZiBmaXJlLiBFYWNoIGNyZWF0dXJlIGluIHRoYXQgYXJlYSBtdXN0IG1ha2UgYSBEQyAxMSBEZXh0ZXJpdHkgc2F2aW5nIHRocm93LCB0YWtpbmcgNyAoMmQ2KSBmaXJlIGRhbWFnZSBvbiBhIGZhaWxlZCBzYXZlLCBvciBoYWxmIGFzIG11Y2ggZGFtYWdlIG9uIGEgc3VjY2Vzc2Z1bCBvbmUuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiVmFyaWFudDogU3VtbW9uIE1lcGhpdHMgKDEvRGF5KVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBtZXBoaXQgaGFzIGEgMjUgcGVyY2VudCBjaGFuY2Ugb2Ygc3VtbW9uaW5nIDFkNCBtZXBoaXRzIG9mIGl0cyBraW5kLiBBIHN1bW1vbmVkIG1lcGhpdCBhcHBlYXJzIGluIGFuIHVub2NjdXBpZWQgc3BhY2Ugd2l0aGluIDYwIGZlZXQgb2YgaXRzIHN1bW1vbmVyLCBhY3RzIGFzIGFuIGFsbHkgb2YgaXRzIHN1bW1vbmVyLCBhbmQgY2FuJ3Qgc3VtbW9uIG90aGVyIG1lcGhpdHMuIEl0IHJlbWFpbnMgZm9yIDEgbWludXRlLCB1bnRpbCBpdCBvciBpdHMgc3VtbW9uZXIgZGllcywgb3IgdW50aWwgaXRzIHN1bW1vbmVyIGRpc21pc3NlcyBpdCBhcyBhbiBhY3Rpb24uXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiTWFnbWluXCIsXG5cdFx0c2l6ZTogXCJTbWFsbFwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcImVsZW1lbnRhbFwiLFxuXHRcdHN1YnR5cGU6IFwiXCIsXG5cdFx0YWxpZ25tZW50OiBcImNoYW90aWMgbmV1dHJhbFwiLFxuXHRcdGFjOiAxNCxcblx0XHRocDogOSxcblx0XHRoaXRfZGljZTogXCIyZDZcIixcblx0XHRzcGVlZDogXCIzMCBmdC5cIixcblx0XHRzdGF0czogWzcsIDE1LCAxMiwgOCwgMTEsIDEwXSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczpcblx0XHRcdFwiYmx1ZGdlb25pbmcsIHBpZXJjaW5nLCBhbmQgc2xhc2hpbmcgZnJvbSBub25tYWdpY2FsIHdlYXBvbnNcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJmaXJlXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0c2Vuc2VzOiBcImRhcmt2aXNpb24gNjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTBcIixcblx0XHRsYW5ndWFnZXM6IFwiSWduYW5cIixcblx0XHRjcjogXCIxLzJcIixcblx0XHR0cmFpdHM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJEZWF0aCBCdXJzdFwiLFxuXHRcdFx0XHRkZXNjOiBcIldoZW4gdGhlIG1hZ21pbiBkaWVzLCBpdCBleHBsb2RlcyBpbiBhIGJ1cnN0IG9mIGZpcmUgYW5kIG1hZ21hLiBFYWNoIGNyZWF0dXJlIHdpdGhpbiAxMCBmdC4gb2YgaXQgbXVzdCBtYWtlIGEgREMgMTEgRGV4dGVyaXR5IHNhdmluZyB0aHJvdywgdGFraW5nIDcgKDJkNikgZmlyZSBkYW1hZ2Ugb24gYSBmYWlsZWQgc2F2ZSwgb3IgaGFsZiBhcyBtdWNoIGRhbWFnZSBvbiBhIHN1Y2Nlc3NmdWwgb25lLiBGbGFtbWFibGUgb2JqZWN0cyB0aGF0IGFyZW4ndCBiZWluZyB3b3JuIG9yIGNhcnJpZWQgaW4gdGhhdCBhcmVhIGFyZSBpZ25pdGVkLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjJkNlwiLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJJZ25pdGVkIElsbHVtaW5hdGlvblwiLFxuXHRcdFx0XHRkZXNjOiBcIkFzIGEgYm9udXMgYWN0aW9uLCB0aGUgbWFnbWluIGNhbiBzZXQgaXRzZWxmIGFibGF6ZSBvciBleHRpbmd1aXNoIGl0cyBmbGFtZXMuIFdoaWxlIGFibGF6ZSwgdGhlIG1hZ21pbiBzaGVkcyBicmlnaHQgbGlnaHQgaW4gYSAxMC1mb290IHJhZGl1cyBhbmQgZGltIGxpZ2h0IGZvciBhbiBhZGRpdGlvbmFsIDEwIGZ0LlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlRvdWNoXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzQgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiA3ICgyZDYpIGZpcmUgZGFtYWdlLiBJZiB0aGUgdGFyZ2V0IGlzIGEgY3JlYXR1cmUgb3IgYSBmbGFtbWFibGUgb2JqZWN0LCBpdCBpZ25pdGVzLiBVbnRpbCBhIHRhcmdldCB0YWtlcyBhbiBhY3Rpb24gdG8gZG91c2UgdGhlIGZpcmUsIHRoZSB0YXJnZXQgdGFrZXMgMyAoMWQ2KSBmaXJlIGRhbWFnZSBhdCB0aGUgZW5kIG9mIGVhY2ggb2YgaXRzIHR1cm5zLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDQsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjJkNlwiLFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJNYW1tb3RoXCIsXG5cdFx0c2l6ZTogXCJIdWdlXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwiYmVhc3RcIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcblx0XHRhYzogMTMsXG5cdFx0aHA6IDEyNixcblx0XHRoaXRfZGljZTogXCIxMWQxMlwiLFxuXHRcdHNwZWVkOiBcIjQwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbMjQsIDksIDIxLCAzLCAxMSwgNl0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0c2Vuc2VzOiBcInBhc3NpdmUgUGVyY2VwdGlvbiAxMFwiLFxuXHRcdGxhbmd1YWdlczogXCJcIixcblx0XHRjcjogXCI2XCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiVHJhbXBsaW5nIENoYXJnZVwiLFxuXHRcdFx0XHRkZXNjOiBcIklmIHRoZSBtYW1tb3RoIG1vdmVzIGF0IGxlYXN0IDIwIGZ0LiBzdHJhaWdodCB0b3dhcmQgYSBjcmVhdHVyZSBhbmQgdGhlbiBoaXRzIGl0IHdpdGggYSBnb3JlIGF0dGFjayBvbiB0aGUgc2FtZSB0dXJuLCB0aGF0IHRhcmdldCBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxOCBTdHJlbmd0aCBzYXZpbmcgdGhyb3cgb3IgYmUga25vY2tlZCBwcm9uZS4gSWYgdGhlIHRhcmdldCBpcyBwcm9uZSwgdGhlIG1hbW1vdGggY2FuIG1ha2Ugb25lIHN0b21wIGF0dGFjayBhZ2FpbnN0IGl0IGFzIGEgYm9udXMgYWN0aW9uLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkdvcmVcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMTAgdG8gaGl0LCByZWFjaCAxMCBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMjUgKDRkOCArIDcpIHBpZXJjaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAxMCxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiNGQ4XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogNyxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiU3RvbXBcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMTAgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHByb25lIGNyZWF0dXJlLiBIaXQ6IDI5ICg0ZDEwICsgNykgYmx1ZGdlb25pbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDEwLFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCI0ZDEwXCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogNyxcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiTWFudGljb3JlXCIsXG5cdFx0c2l6ZTogXCJMYXJnZVwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcIm1vbnN0cm9zaXR5XCIsXG5cdFx0c3VidHlwZTogXCJcIixcblx0XHRhbGlnbm1lbnQ6IFwibGF3ZnVsIGV2aWxcIixcblx0XHRhYzogMTQsXG5cdFx0aHA6IDY4LFxuXHRcdGhpdF9kaWNlOiBcIjhkMTBcIixcblx0XHRzcGVlZDogXCIzMCBmdC4sIGZseSA1MCBmdC5cIixcblx0XHRzdGF0czogWzE3LCAxNiwgMTcsIDcsIDEyLCA4XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcblx0XHRzZW5zZXM6IFwiZGFya3Zpc2lvbiA2MCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxMVwiLFxuXHRcdGxhbmd1YWdlczogXCJcIixcblx0XHRjcjogXCIzXCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiVGFpbCBTcGlrZSBSZWdyb3d0aFwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBtYW50aWNvcmUgaGFzIHR3ZW50eS1mb3VyIHRhaWwgc3Bpa2VzLiBVc2VkIHNwaWtlcyByZWdyb3cgd2hlbiB0aGUgbWFudGljb3JlIGZpbmlzaGVzIGEgbG9uZyByZXN0LlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIG1hbnRpY29yZSBtYWtlcyB0aHJlZSBhdHRhY2tzOiBvbmUgd2l0aCBpdHMgYml0ZSBhbmQgdHdvIHdpdGggaXRzIGNsYXdzIG9yIHRocmVlIHdpdGggaXRzIHRhaWwgc3Bpa2VzLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkJpdGVcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNSB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDcgKDFkOCArIDMpIHBpZXJjaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA1LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxZDhcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiAzLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJDbGF3XCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzUgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiA2ICgxZDYgKyAzKSBzbGFzaGluZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNSxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMWQ2XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogMyxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiVGFpbCBTcGlrZVwiLFxuXHRcdFx0XHRkZXNjOiBcIlJhbmdlZCBXZWFwb24gQXR0YWNrOiArNSB0byBoaXQsIHJhbmdlIDEwMC8yMDAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDcgKDFkOCArIDMpIHBpZXJjaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA1LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxZDhcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiAzLFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJNYXJpbGl0aFwiLFxuXHRcdHNpemU6IFwiTGFyZ2VcIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJmaWVuZFwiLFxuXHRcdHN1YnR5cGU6IFwiZGVtb25cIixcblx0XHRhbGlnbm1lbnQ6IFwiY2hhb3RpYyBldmlsXCIsXG5cdFx0YWM6IDE4LFxuXHRcdGhwOiAxODksXG5cdFx0aGl0X2RpY2U6IFwiMThkMTBcIixcblx0XHRzcGVlZDogXCI0MCBmdC5cIixcblx0XHRzdGF0czogWzE4LCAyMCwgMjAsIDE4LCAxNiwgMjBdLFxuXHRcdHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdHN0cmVuZ3RoOiA5LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0Y29uc3RpdHV0aW9uOiAxMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHdpc2RvbTogOCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdGNoYXJpc21hOiAxMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczpcblx0XHRcdFwiY29sZCwgZmlyZSwgbGlnaHRuaW5nOyBibHVkZ2VvbmluZywgcGllcmNpbmcsIGFuZCBzbGFzaGluZyBmcm9tIG5vbm1hZ2ljYWwgd2VhcG9uc1wiLFxuXHRcdGRhbWFnZV9pbW11bml0aWVzOiBcInBvaXNvblwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcInBvaXNvbmVkXCIsXG5cdFx0c2Vuc2VzOiBcInRydWVzaWdodCAxMjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTNcIixcblx0XHRsYW5ndWFnZXM6IFwiQWJ5c3NhbCwgdGVsZXBhdGh5IDEyMCBmdC5cIixcblx0XHRjcjogXCIxNlwiLFxuXHRcdHRyYWl0czogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIk1hZ2ljIFJlc2lzdGFuY2VcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgbWFyaWxpdGggaGFzIGFkdmFudGFnZSBvbiBzYXZpbmcgdGhyb3dzIGFnYWluc3Qgc3BlbGxzIGFuZCBvdGhlciBtYWdpY2FsIGVmZmVjdHMuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTWFnaWMgV2VhcG9uc1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBtYXJpbGl0aCdzIHdlYXBvbiBhdHRhY2tzIGFyZSBtYWdpY2FsLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlJlYWN0aXZlXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIG1hcmlsaXRoIGNhbiB0YWtlIG9uZSByZWFjdGlvbiBvbiBldmVyeSB0dXJuIGluIGNvbWJhdC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJNdWx0aWF0dGFja1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBtYXJpbGl0aCBjYW4gbWFrZSBzZXZlbiBhdHRhY2tzOiBzaXggd2l0aCBpdHMgbG9uZ3N3b3JkcyBhbmQgb25lIHdpdGggaXRzIHRhaWwuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTG9uZ3N3b3JkXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzkgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxMyAoMmQ4ICsgNCkgc2xhc2hpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDksXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjJkOFwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDQsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlRhaWxcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArOSB0byBoaXQsIHJlYWNoIDEwIGZ0Liwgb25lIGNyZWF0dXJlLiBIaXQ6IDE1ICgyZDEwICsgNCkgYmx1ZGdlb25pbmcgZGFtYWdlLiBJZiB0aGUgdGFyZ2V0IGlzIE1lZGl1bSBvciBzbWFsbGVyLCBpdCBpcyBncmFwcGxlZCAoZXNjYXBlIERDIDE5KS4gVW50aWwgdGhpcyBncmFwcGxlIGVuZHMsIHRoZSB0YXJnZXQgaXMgcmVzdHJhaW5lZCwgdGhlIG1hcmlsaXRoIGNhbiBhdXRvbWF0aWNhbGx5IGhpdCB0aGUgdGFyZ2V0IHdpdGggaXRzIHRhaWwsIGFuZCB0aGUgbWFyaWxpdGggY2FuJ3QgbWFrZSB0YWlsIGF0dGFja3MgYWdhaW5zdCBvdGhlciB0YXJnZXRzLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDksXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjJkMTBcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiA0LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJUZWxlcG9ydFwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBtYXJpbGl0aCBtYWdpY2FsbHkgdGVsZXBvcnRzLCBhbG9uZyB3aXRoIGFueSBlcXVpcG1lbnQgaXQgaXMgd2VhcmluZyBvciBjYXJyeWluZywgdXAgdG8gMTIwIGZlZXQgdG8gYW4gdW5vY2N1cGllZCBzcGFjZSBpdCBjYW4gc2VlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlZhcmlhbnQ6IFN1bW1vbiBEZW1vbiAoMS9EYXkpXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGRlbW9uIGNob29zZXMgd2hhdCB0byBzdW1tb24gYW5kIGF0dGVtcHRzIGEgbWFnaWNhbCBzdW1tb25pbmcuXFxuQSBtYXJpbGl0aCBoYXMgYSA1MCBwZXJjZW50IGNoYW5jZSBvZiBzdW1tb25pbmcgMWQ2IHZyb2NrcywgMWQ0IGhlenJvdXMsIDFkMyBnbGFicmV6dXMsIDFkMiBuYWxmZXNobmVlcywgb3Igb25lIG1hcmlsaXRoLlxcbkEgc3VtbW9uZWQgZGVtb24gYXBwZWFycyBpbiBhbiB1bm9jY3VwaWVkIHNwYWNlIHdpdGhpbiA2MCBmZWV0IG9mIGl0cyBzdW1tb25lciwgYWN0cyBhcyBhbiBhbGx5IG9mIGl0cyBzdW1tb25lciwgYW5kIGNhbid0IHN1bW1vbiBvdGhlciBkZW1vbnMuIEl0IHJlbWFpbnMgZm9yIDEgbWludXRlLCB1bnRpbCBpdCBvciBpdHMgc3VtbW9uZXIgZGllcywgb3IgdW50aWwgaXRzIHN1bW1vbmVyIGRpc21pc3NlcyBpdCBhcyBhbiBhY3Rpb24uXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRyZWFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJQYXJyeVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBtYXJpbGl0aCBhZGRzIDUgdG8gaXRzIEFDIGFnYWluc3Qgb25lIG1lbGVlIGF0dGFjayB0aGF0IHdvdWxkIGhpdCBpdC4gVG8gZG8gc28sIHRoZSBtYXJpbGl0aCBtdXN0IHNlZSB0aGUgYXR0YWNrZXIgYW5kIGJlIHdpZWxkaW5nIGEgbWVsZWUgd2VhcG9uLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIk1hc3RpZmZcIixcblx0XHRzaXplOiBcIk1lZGl1bVwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcImJlYXN0XCIsXG5cdFx0c3VidHlwZTogXCJcIixcblx0XHRhbGlnbm1lbnQ6IFwidW5hbGlnbmVkXCIsXG5cdFx0YWM6IDEyLFxuXHRcdGhwOiA1LFxuXHRcdGhpdF9kaWNlOiBcIjFkOFwiLFxuXHRcdHNwZWVkOiBcIjQwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbMTMsIDE0LCAxMiwgMywgMTIsIDddLFxuXHRcdHNraWxsc2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0cGVyY2VwdGlvbjogMyxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcblx0XHRzZW5zZXM6IFwicGFzc2l2ZSBQZXJjZXB0aW9uIDEzXCIsXG5cdFx0bGFuZ3VhZ2VzOiBcIlwiLFxuXHRcdGNyOiBcIjEvOFwiLFxuXHRcdHRyYWl0czogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIktlZW4gSGVhcmluZyBhbmQgU21lbGxcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgbWFzdGlmZiBoYXMgYWR2YW50YWdlIG9uIFdpc2RvbSAoUGVyY2VwdGlvbikgY2hlY2tzIHRoYXQgcmVseSBvbiBoZWFyaW5nIG9yIHNtZWxsLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkJpdGVcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMyB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDQgKDFkNiArIDEpIHBpZXJjaW5nIGRhbWFnZS4gSWYgdGhlIHRhcmdldCBpcyBhIGNyZWF0dXJlLCBpdCBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxMSBTdHJlbmd0aCBzYXZpbmcgdGhyb3cgb3IgYmUga25vY2tlZCBwcm9uZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAzLFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxZDZcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiAxLFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJNZWR1c2FcIixcblx0XHRzaXplOiBcIk1lZGl1bVwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcIm1vbnN0cm9zaXR5XCIsXG5cdFx0c3VidHlwZTogXCJcIixcblx0XHRhbGlnbm1lbnQ6IFwibGF3ZnVsIGV2aWxcIixcblx0XHRhYzogMTUsXG5cdFx0aHA6IDEyNyxcblx0XHRoaXRfZGljZTogXCIxN2Q4XCIsXG5cdFx0c3BlZWQ6IFwiMzAgZnQuXCIsXG5cdFx0c3RhdHM6IFsxMCwgMTUsIDE2LCAxMiwgMTMsIDE1XSxcblx0XHRza2lsbHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdGRlY2VwdGlvbjogNSxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdGluc2lnaHQ6IDQsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRwZXJjZXB0aW9uOiA0LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0c3RlYWx0aDogNSxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcblx0XHRzZW5zZXM6IFwiZGFya3Zpc2lvbiA2MCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxNFwiLFxuXHRcdGxhbmd1YWdlczogXCJDb21tb25cIixcblx0XHRjcjogXCI2XCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiUGV0cmlmeWluZyBHYXplXCIsXG5cdFx0XHRcdGRlc2M6IFwiV2hlbiBhIGNyZWF0dXJlIHRoYXQgY2FuIHNlZSB0aGUgbWVkdXNhJ3MgZXllcyBzdGFydHMgaXRzIHR1cm4gd2l0aGluIDMwIGZ0LiBvZiB0aGUgbWVkdXNhLCB0aGUgbWVkdXNhIGNhbiBmb3JjZSBpdCB0byBtYWtlIGEgREMgMTQgQ29uc3RpdHV0aW9uIHNhdmluZyB0aHJvdyBpZiB0aGUgbWVkdXNhIGlzbid0IGluY2FwYWNpdGF0ZWQgYW5kIGNhbiBzZWUgdGhlIGNyZWF0dXJlLiBJZiB0aGUgc2F2aW5nIHRocm93IGZhaWxzIGJ5IDUgb3IgbW9yZSwgdGhlIGNyZWF0dXJlIGlzIGluc3RhbnRseSBwZXRyaWZpZWQuIE90aGVyd2lzZSwgYSBjcmVhdHVyZSB0aGF0IGZhaWxzIHRoZSBzYXZlIGJlZ2lucyB0byB0dXJuIHRvIHN0b25lIGFuZCBpcyByZXN0cmFpbmVkLiBUaGUgcmVzdHJhaW5lZCBjcmVhdHVyZSBtdXN0IHJlcGVhdCB0aGUgc2F2aW5nIHRocm93IGF0IHRoZSBlbmQgb2YgaXRzIG5leHQgdHVybiwgYmVjb21pbmcgcGV0cmlmaWVkIG9uIGEgZmFpbHVyZSBvciBlbmRpbmcgdGhlIGVmZmVjdCBvbiBhIHN1Y2Nlc3MuIFRoZSBwZXRyaWZpY2F0aW9uIGxhc3RzIHVudGlsIHRoZSBjcmVhdHVyZSBpcyBmcmVlZCBieSB0aGUgZ3JlYXRlciByZXN0b3JhdGlvbiBzcGVsbCBvciBvdGhlciBtYWdpYy5cXG5Vbmxlc3Mgc3VycHJpc2VkLCBhIGNyZWF0dXJlIGNhbiBhdmVydCBpdHMgZXllcyB0byBhdm9pZCB0aGUgc2F2aW5nIHRocm93IGF0IHRoZSBzdGFydCBvZiBpdHMgdHVybi4gSWYgdGhlIGNyZWF0dXJlIGRvZXMgc28sIGl0IGNhbid0IHNlZSB0aGUgbWVkdXNhIHVudGlsIHRoZSBzdGFydCBvZiBpdHMgbmV4dCB0dXJuLCB3aGVuIGl0IGNhbiBhdmVydCBpdHMgZXllcyBhZ2Fpbi4gSWYgdGhlIGNyZWF0dXJlIGxvb2tzIGF0IHRoZSBtZWR1c2EgaW4gdGhlIG1lYW50aW1lLCBpdCBtdXN0IGltbWVkaWF0ZWx5IG1ha2UgdGhlIHNhdmUuXFxuSWYgdGhlIG1lZHVzYSBzZWVzIGl0c2VsZiByZWZsZWN0ZWQgb24gYSBwb2xpc2hlZCBzdXJmYWNlIHdpdGhpbiAzMCBmdC4gb2YgaXQgYW5kIGluIGFuIGFyZWEgb2YgYnJpZ2h0IGxpZ2h0LCB0aGUgbWVkdXNhIGlzLCBkdWUgdG8gaXRzIGN1cnNlLCBhZmZlY3RlZCBieSBpdHMgb3duIGdhemUuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgbWVkdXNhIG1ha2VzIGVpdGhlciB0aHJlZSBtZWxlZSBhdHRhY2tzIFx1MjAxNCAgb25lIHdpdGggaXRzIHNuYWtlIGhhaXIgYW5kIHR3byB3aXRoIGl0cyBzaG9ydHN3b3JkIFx1MjAxNCBvciB0d28gcmFuZ2VkIGF0dGFja3Mgd2l0aCBpdHMgbG9uZ2Jvdy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJTbmFrZSBIYWlyXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzUgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIGNyZWF0dXJlLiBIaXQ6IDQgKDFkNCArIDIpIHBpZXJjaW5nIGRhbWFnZSBwbHVzIDE0ICg0ZDYpIHBvaXNvbiBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNSxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMWQ0XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogMixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiU2hvcnRzd29yZFwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs1IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogNSAoMWQ2ICsgMikgcGllcmNpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDUsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjFkNlwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDIsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkxvbmdib3dcIixcblx0XHRcdFx0ZGVzYzogXCJSYW5nZWQgV2VhcG9uIEF0dGFjazogKzUgdG8gaGl0LCByYW5nZSAxNTAvNjAwIGZ0Liwgb25lIHRhcmdldC4gSGl0OiA2ICgxZDggKyAyKSBwaWVyY2luZyBkYW1hZ2UgcGx1cyA3ICgyZDYpIHBvaXNvbiBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNSxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMmQ2XCIsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIk1lcmZvbGtcIixcblx0XHRzaXplOiBcIk1lZGl1bVwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcImh1bWFub2lkXCIsXG5cdFx0c3VidHlwZTogXCJtZXJmb2xrXCIsXG5cdFx0YWxpZ25tZW50OiBcIm5ldXRyYWxcIixcblx0XHRhYzogMTEsXG5cdFx0aHA6IDExLFxuXHRcdGhpdF9kaWNlOiBcIjJkOFwiLFxuXHRcdHNwZWVkOiBcIjEwIGZ0Liwgc3dpbSA0MCBmdC5cIixcblx0XHRzdGF0czogWzEwLCAxMywgMTIsIDExLCAxMSwgMTJdLFxuXHRcdHNraWxsc2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0cGVyY2VwdGlvbjogMixcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcblx0XHRzZW5zZXM6IFwicGFzc2l2ZSBQZXJjZXB0aW9uIDEyXCIsXG5cdFx0bGFuZ3VhZ2VzOiBcIkFxdWFuLCBDb21tb25cIixcblx0XHRjcjogXCIxLzhcIixcblx0XHR0cmFpdHM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJBbXBoaWJpb3VzXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIG1lcmZvbGsgY2FuIGJyZWF0aGUgYWlyIGFuZCB3YXRlci5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJTcGVhclwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIG9yIFJhbmdlZCBXZWFwb24gQXR0YWNrOiArMiB0byBoaXQsIHJlYWNoIDUgZnQuIG9yIHJhbmdlIDIwLzYwIGZ0Liwgb25lIHRhcmdldC4gSGl0OiAzICgxZDYpIHBpZXJjaW5nIGRhbWFnZSwgb3IgNCAoMWQ4KSBwaWVyY2luZyBkYW1hZ2UgaWYgdXNlZCB3aXRoIHR3byBoYW5kcyB0byBtYWtlIGEgbWVsZWUgYXR0YWNrLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDIsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjFkNlwiLFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJNZXJyb3dcIixcblx0XHRzaXplOiBcIkxhcmdlXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwibW9uc3Ryb3NpdHlcIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJjaGFvdGljIGV2aWxcIixcblx0XHRhYzogMTMsXG5cdFx0aHA6IDQ1LFxuXHRcdGhpdF9kaWNlOiBcIjZkMTBcIixcblx0XHRzcGVlZDogXCIxMCBmdC4sIHN3aW0gNDAgZnQuXCIsXG5cdFx0c3RhdHM6IFsxOCwgMTAsIDE1LCA4LCAxMCwgOV0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0c2Vuc2VzOiBcImRhcmt2aXNpb24gNjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTBcIixcblx0XHRsYW5ndWFnZXM6IFwiQWJ5c3NhbCwgQXF1YW5cIixcblx0XHRjcjogXCIyXCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQW1waGliaW91c1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBtZXJyb3cgY2FuIGJyZWF0aGUgYWlyIGFuZCB3YXRlci5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJNdWx0aWF0dGFja1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBtZXJyb3cgbWFrZXMgdHdvIGF0dGFja3M6IG9uZSB3aXRoIGl0cyBiaXRlIGFuZCBvbmUgd2l0aCBpdHMgY2xhd3Mgb3IgaGFycG9vbi5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJCaXRlXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzYgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiA4ICgxZDggKyA0KSBwaWVyY2luZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNixcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMWQ4XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogNCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQ2xhd3NcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNiB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDkgKDJkNCArIDQpIHNsYXNoaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA2LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIyZDRcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiA0LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJIYXJwb29uXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgb3IgUmFuZ2VkIFdlYXBvbiBBdHRhY2s6ICs2IHRvIGhpdCwgcmVhY2ggNSBmdC4gb3IgcmFuZ2UgMjAvNjAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDExICgyZDYgKyA0KSBwaWVyY2luZyBkYW1hZ2UuIElmIHRoZSB0YXJnZXQgaXMgYSBIdWdlIG9yIHNtYWxsZXIgY3JlYXR1cmUsIGl0IG11c3Qgc3VjY2VlZCBvbiBhIFN0cmVuZ3RoIGNvbnRlc3QgYWdhaW5zdCB0aGUgbWVycm93IG9yIGJlIHB1bGxlZCB1cCB0byAyMCBmZWV0IHRvd2FyZCB0aGUgbWVycm93LlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDYsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjJkNlwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDQsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIk1pbWljXCIsXG5cdFx0c2l6ZTogXCJNZWRpdW1cIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJtb25zdHJvc2l0eVwiLFxuXHRcdHN1YnR5cGU6IFwic2hhcGVjaGFuZ2VyXCIsXG5cdFx0YWxpZ25tZW50OiBcIm5ldXRyYWxcIixcblx0XHRhYzogMTIsXG5cdFx0aHA6IDU4LFxuXHRcdGhpdF9kaWNlOiBcIjlkOFwiLFxuXHRcdHNwZWVkOiBcIjE1IGZ0LlwiLFxuXHRcdHN0YXRzOiBbMTcsIDEyLCAxNSwgNSwgMTMsIDhdLFxuXHRcdHNraWxsc2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0c3RlYWx0aDogNSxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJhY2lkXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwicHJvbmVcIixcblx0XHRzZW5zZXM6IFwiZGFya3Zpc2lvbiA2MCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxMVwiLFxuXHRcdGxhbmd1YWdlczogXCJcIixcblx0XHRjcjogXCIyXCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiU2hhcGVjaGFuZ2VyXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIG1pbWljIGNhbiB1c2UgaXRzIGFjdGlvbiB0byBwb2x5bW9ycGggaW50byBhbiBvYmplY3Qgb3IgYmFjayBpbnRvIGl0cyB0cnVlLCBhbW9ycGhvdXMgZm9ybS4gSXRzIHN0YXRpc3RpY3MgYXJlIHRoZSBzYW1lIGluIGVhY2ggZm9ybS4gQW55IGVxdWlwbWVudCBpdCBpcyB3ZWFyaW5nIG9yIGNhcnJ5aW5nIGlzbiAndCB0cmFuc2Zvcm1lZC4gSXQgcmV2ZXJ0cyB0byBpdHMgdHJ1ZSBmb3JtIGlmIGl0IGRpZXMuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQWRoZXNpdmUgKE9iamVjdCBGb3JtIE9ubHkpXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIG1pbWljIGFkaGVyZXMgdG8gYW55dGhpbmcgdGhhdCB0b3VjaGVzIGl0LiBBIEh1Z2Ugb3Igc21hbGxlciBjcmVhdHVyZSBhZGhlcmVkIHRvIHRoZSBtaW1pYyBpcyBhbHNvIGdyYXBwbGVkIGJ5IGl0IChlc2NhcGUgREMgMTMpLiBBYmlsaXR5IGNoZWNrcyBtYWRlIHRvIGVzY2FwZSB0aGlzIGdyYXBwbGUgaGF2ZSBkaXNhZHZhbnRhZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiRmFsc2UgQXBwZWFyYW5jZSAoT2JqZWN0IEZvcm0gT25seSlcIixcblx0XHRcdFx0ZGVzYzogXCJXaGlsZSB0aGUgbWltaWMgcmVtYWlucyBtb3Rpb25sZXNzLCBpdCBpcyBpbmRpc3Rpbmd1aXNoYWJsZSBmcm9tIGFuIG9yZGluYXJ5IG9iamVjdC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJHcmFwcGxlclwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBtaW1pYyBoYXMgYWR2YW50YWdlIG9uIGF0dGFjayByb2xscyBhZ2FpbnN0IGFueSBjcmVhdHVyZSBncmFwcGxlZCBieSBpdC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJQc2V1ZG9wb2RcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNSB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDcgKDFkOCArIDMpIGJsdWRnZW9uaW5nIGRhbWFnZS4gSWYgdGhlIG1pbWljIGlzIGluIG9iamVjdCBmb3JtLCB0aGUgdGFyZ2V0IGlzIHN1YmplY3RlZCB0byBpdHMgQWRoZXNpdmUgdHJhaXQuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNSxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMWQ4XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogMyxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQml0ZVwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs1IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogNyAoMWQ4ICsgMykgcGllcmNpbmcgZGFtYWdlIHBsdXMgNCAoMWQ4KSBhY2lkIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA1LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxZDggKyAxZDhcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiAzLFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJNaW5vdGF1clwiLFxuXHRcdHNpemU6IFwiTGFyZ2VcIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJtb25zdHJvc2l0eVwiLFxuXHRcdHN1YnR5cGU6IFwiXCIsXG5cdFx0YWxpZ25tZW50OiBcImNoYW90aWMgZXZpbFwiLFxuXHRcdGFjOiAxNCxcblx0XHRocDogNzYsXG5cdFx0aGl0X2RpY2U6IFwiOWQxMFwiLFxuXHRcdHNwZWVkOiBcIjQwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbMTgsIDExLCAxNiwgNiwgMTYsIDldLFxuXHRcdHNraWxsc2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0cGVyY2VwdGlvbjogNyxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcblx0XHRzZW5zZXM6IFwiZGFya3Zpc2lvbiA2MCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxN1wiLFxuXHRcdGxhbmd1YWdlczogXCJBYnlzc2FsXCIsXG5cdFx0Y3I6IFwiM1wiLFxuXHRcdHRyYWl0czogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkNoYXJnZVwiLFxuXHRcdFx0XHRkZXNjOiBcIklmIHRoZSBtaW5vdGF1ciBtb3ZlcyBhdCBsZWFzdCAxMCBmdC4gc3RyYWlnaHQgdG93YXJkIGEgdGFyZ2V0IGFuZCB0aGVuIGhpdHMgaXQgd2l0aCBhIGdvcmUgYXR0YWNrIG9uIHRoZSBzYW1lIHR1cm4sIHRoZSB0YXJnZXQgdGFrZXMgYW4gZXh0cmEgOSAoMmQ4KSBwaWVyY2luZyBkYW1hZ2UuIElmIHRoZSB0YXJnZXQgaXMgYSBjcmVhdHVyZSwgaXQgbXVzdCBzdWNjZWVkIG9uIGEgREMgMTQgU3RyZW5ndGggc2F2aW5nIHRocm93IG9yIGJlIHB1c2hlZCB1cCB0byAxMCBmdC4gYXdheSBhbmQga25vY2tlZCBwcm9uZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIyZDhcIixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTGFieXJpbnRoaW5lIFJlY2FsbFwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBtaW5vdGF1ciBjYW4gcGVyZmVjdGx5IHJlY2FsbCBhbnkgcGF0aCBpdCBoYXMgdHJhdmVsZWQuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiUmVja2xlc3NcIixcblx0XHRcdFx0ZGVzYzogXCJBdCB0aGUgc3RhcnQgb2YgaXRzIHR1cm4sIHRoZSBtaW5vdGF1ciBjYW4gZ2FpbiBhZHZhbnRhZ2Ugb24gYWxsIG1lbGVlIHdlYXBvbiBhdHRhY2sgcm9sbHMgaXQgbWFrZXMgZHVyaW5nIHRoYXQgdHVybiwgYnV0IGF0dGFjayByb2xscyBhZ2FpbnN0IGl0IGhhdmUgYWR2YW50YWdlIHVudGlsIHRoZSBzdGFydCBvZiBpdHMgbmV4dCB0dXJuLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkdyZWF0YXhlXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzYgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxNyAoMmQxMiArIDQpIHNsYXNoaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA2LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIyZDEyXCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogNCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiR29yZVwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs2IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTMgKDJkOCArIDQpIHBpZXJjaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA2LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIyZDhcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiA0LFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJNaW5vdGF1ciBTa2VsZXRvblwiLFxuXHRcdHNpemU6IFwiTGFyZ2VcIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJ1bmRlYWRcIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJsYXdmdWwgZXZpbFwiLFxuXHRcdGFjOiAxMixcblx0XHRocDogNjcsXG5cdFx0aGl0X2RpY2U6IFwiOWQxMFwiLFxuXHRcdHNwZWVkOiBcIjQwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbMTgsIDExLCAxNSwgNiwgOCwgNV0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJibHVkZ2VvbmluZ1wiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJwb2lzb25cIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczogXCJleGhhdXN0aW9uLCBwb2lzb25lZFwiLFxuXHRcdHNlbnNlczogXCJkYXJrdmlzaW9uIDYwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDlcIixcblx0XHRsYW5ndWFnZXM6IFwidW5kZXJzdGFuZHMgQWJ5c3NhbCBidXQgY2FuJ3Qgc3BlYWtcIixcblx0XHRjcjogXCIyXCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQ2hhcmdlXCIsXG5cdFx0XHRcdGRlc2M6IFwiSWYgdGhlIHNrZWxldG9uIG1vdmVzIGF0IGxlYXN0IDEwIGZlZXQgc3RyYWlnaHQgdG93YXJkIGEgdGFyZ2V0IGFuZCB0aGVuIGhpdHMgaXQgd2l0aCBhIGdvcmUgYXR0YWNrIG9uIHRoZSBzYW1lIHR1cm4sIHRoZSB0YXJnZXQgdGFrZXMgYW4gZXh0cmEgOSAoMmQ4KSBwaWVyY2luZyBkYW1hZ2UuIElmIHRoZSB0YXJnZXQgaXMgYSBjcmVhdHVyZSwgaXQgbXVzdCBzdWNjZWVkIG9uIGEgREMgMTQgU3RyZW5ndGggc2F2aW5nIHRocm93IG9yIGJlIHB1c2hlZCB1cCB0byAxMCBmZWV0IGF3YXkgYW5kIGtub2NrZWQgcHJvbmUuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMmQ4XCIsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkdyZWF0YXhlXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzYgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxNyAoMmQxMiArIDQpIHNsYXNoaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA2LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIyZDEyXCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogNCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiR29yZVwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs2IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTMgKDJkOCArIDQpIHBpZXJjaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA2LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIyZDhcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiA0LFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJNdWxlXCIsXG5cdFx0c2l6ZTogXCJNZWRpdW1cIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJiZWFzdFwiLFxuXHRcdHN1YnR5cGU6IFwiXCIsXG5cdFx0YWxpZ25tZW50OiBcInVuYWxpZ25lZFwiLFxuXHRcdGFjOiAxMCxcblx0XHRocDogMTEsXG5cdFx0aGl0X2RpY2U6IFwiMmQ4XCIsXG5cdFx0c3BlZWQ6IFwiNDAgZnQuXCIsXG5cdFx0c3RhdHM6IFsxNCwgMTAsIDEzLCAyLCAxMCwgNV0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0c2Vuc2VzOiBcInBhc3NpdmUgUGVyY2VwdGlvbiAxMFwiLFxuXHRcdGxhbmd1YWdlczogXCJcIixcblx0XHRjcjogXCIxLzhcIixcblx0XHR0cmFpdHM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJCZWFzdCBvZiBCdXJkZW5cIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgbXVsZSBpcyBjb25zaWRlcmVkIHRvIGJlIGEgTGFyZ2UgYW5pbWFsIGZvciB0aGUgcHVycG9zZSBvZiBkZXRlcm1pbmluZyBpdHMgY2FycnlpbmcgY2FwYWNpdHkuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiU3VyZS1Gb290ZWRcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgbXVsZSBoYXMgYWR2YW50YWdlIG9uIFN0cmVuZ3RoIGFuZCBEZXh0ZXJpdHkgc2F2aW5nIHRocm93cyBtYWRlIGFnYWluc3QgZWZmZWN0cyB0aGF0IHdvdWxkIGtub2NrIGl0IHByb25lLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkhvb3Zlc1wiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICsyIHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogNCAoMWQ0ICsgMikgYmx1ZGdlb25pbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDQsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjFkNFwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDIsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIk11bW15XCIsXG5cdFx0c2l6ZTogXCJNZWRpdW1cIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJ1bmRlYWRcIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJsYXdmdWwgZXZpbFwiLFxuXHRcdGFjOiAxMSxcblx0XHRocDogNTgsXG5cdFx0aGl0X2RpY2U6IFwiOWQ4XCIsXG5cdFx0c3BlZWQ6IFwiMjAgZnQuXCIsXG5cdFx0c3RhdHM6IFsxNiwgOCwgMTUsIDYsIDEwLCAxMl0sXG5cdFx0c2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0d2lzZG9tOiAyLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiZmlyZVwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczpcblx0XHRcdFwiYmx1ZGdlb25pbmcsIHBpZXJjaW5nLCBhbmQgc2xhc2hpbmcgZnJvbSBub25tYWdpY2FsIHdlYXBvbnNcIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczogXCJuZWNyb3RpYywgcG9pc29uZWRcIixcblx0XHRzZW5zZXM6IFwiZGFya3Zpc2lvbiA2MCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxMFwiLFxuXHRcdGxhbmd1YWdlczogXCJ0aGUgbGFuZ3VhZ2VzIGl0IGtuZXcgaW4gbGlmZVwiLFxuXHRcdGNyOiBcIjNcIixcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgbXVtbXkgY2FuIHVzZSBpdHMgRHJlYWRmdWwgR2xhcmUgYW5kIG1ha2VzIG9uZSBhdHRhY2sgd2l0aCBpdHMgcm90dGluZyBmaXN0LlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlJvdHRpbmcgRmlzdFwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs1IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTAgKDJkNiArIDMpIGJsdWRnZW9uaW5nIGRhbWFnZSBwbHVzIDEwICgzZDYpIG5lY3JvdGljIGRhbWFnZS4gSWYgdGhlIHRhcmdldCBpcyBhIGNyZWF0dXJlLCBpdCBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxMiBDb25zdGl0dXRpb24gc2F2aW5nIHRocm93IG9yIGJlIGN1cnNlZCB3aXRoIG11bW15IHJvdC4gVGhlIGN1cnNlZCB0YXJnZXQgY2FuJ3QgcmVnYWluIGhpdCBwb2ludHMsIGFuZCBpdHMgaGl0IHBvaW50IG1heGltdW0gZGVjcmVhc2VzIGJ5IDEwICgzZDYpIGZvciBldmVyeSAyNCBob3VycyB0aGF0IGVsYXBzZS4gSWYgdGhlIGN1cnNlIHJlZHVjZXMgdGhlIHRhcmdldCdzIGhpdCBwb2ludCBtYXhpbXVtIHRvIDAsIHRoZSB0YXJnZXQgZGllcywgYW5kIGl0cyBib2R5IHR1cm5zIHRvIGR1c3QuIFRoZSBjdXJzZSBsYXN0cyB1bnRpbCByZW1vdmVkIGJ5IHRoZSByZW1vdmUgY3Vyc2Ugc3BlbGwgb3Igb3RoZXIgbWFnaWMuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNSxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMmQ2XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogMyxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiRHJlYWRmdWwgR2xhcmVcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgbXVtbXkgdGFyZ2V0cyBvbmUgY3JlYXR1cmUgaXQgY2FuIHNlZSB3aXRoaW4gNjAgZnQuIG9mIGl0LiBJZiB0aGUgdGFyZ2V0IGNhbiBzZWUgdGhlIG11bW15LCBpdCBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxMSBXaXNkb20gc2F2aW5nIHRocm93IGFnYWluc3QgdGhpcyBtYWdpYyBvciBiZWNvbWUgZnJpZ2h0ZW5lZCB1bnRpbCB0aGUgZW5kIG9mIHRoZSBtdW1teSdzIG5leHQgdHVybi4gSWYgdGhlIHRhcmdldCBmYWlscyB0aGUgc2F2aW5nIHRocm93IGJ5IDUgb3IgbW9yZSwgaXQgaXMgYWxzbyBwYXJhbHl6ZWQgZm9yIHRoZSBzYW1lIGR1cmF0aW9uLiBBIHRhcmdldCB0aGF0IHN1Y2NlZWRzIG9uIHRoZSBzYXZpbmcgdGhyb3cgaXMgaW1tdW5lIHRvIHRoZSBEcmVhZGZ1bCBHbGFyZSBvZiBhbGwgbXVtbWllcyAoYnV0IG5vdCBtdW1teSBsb3JkcykgZm9yIHRoZSBuZXh0IDI0IGhvdXJzLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIk11bW15IExvcmRcIixcblx0XHRzaXplOiBcIk1lZGl1bVwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcInVuZGVhZFwiLFxuXHRcdHN1YnR5cGU6IFwiXCIsXG5cdFx0YWxpZ25tZW50OiBcImxhd2Z1bCBldmlsXCIsXG5cdFx0YWM6IDE3LFxuXHRcdGhwOiA5Nyxcblx0XHRoaXRfZGljZTogXCIxM2Q4XCIsXG5cdFx0c3BlZWQ6IFwiMjAgZnQuXCIsXG5cdFx0c3RhdHM6IFsxOCwgMTAsIDE3LCAxMSwgMTgsIDE2XSxcblx0XHRzYXZlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRjb25zdGl0dXRpb246IDgsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRpbnRlbGxpZ2VuY2U6IDUsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHR3aXNkb206IDksXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRjaGFyaXNtYTogOCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRza2lsbHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdGhpc3Rvcnk6IDUsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRyZWxpZ2lvbjogNSxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcImJsdWRnZW9uaW5nXCIsXG5cdFx0ZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuXHRcdGRhbWFnZV9pbW11bml0aWVzOlxuXHRcdFx0XCJuZWNyb3RpYywgcG9pc29uOyBibHVkZ2VvbmluZywgcGllcmNpbmcsIGFuZCBzbGFzaGluZyBmcm9tIG5vbm1hZ2ljYWwgd2VhcG9uc1wiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOlxuXHRcdFx0XCJjaGFybWVkLCBleGhhdXN0aW9uLCBmcmlnaHRlbmVkLCBwYXJhbHl6ZWQsIHBvaXNvbmVkXCIsXG5cdFx0c2Vuc2VzOiBcImRhcmt2aXNpb24gNjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTRcIixcblx0XHRsYW5ndWFnZXM6IFwidGhlIGxhbmd1YWdlcyBpdCBrbmV3IGluIGxpZmVcIixcblx0XHRjcjogXCIxNVwiLFxuXHRcdHRyYWl0czogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIk1hZ2ljIFJlc2lzdGFuY2VcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgbXVtbXkgbG9yZCBoYXMgYWR2YW50YWdlIG9uIHNhdmluZyB0aHJvd3MgYWdhaW5zdCBzcGVsbHMgYW5kIG90aGVyIG1hZ2ljYWwgZWZmZWN0cy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJSZWp1dmVuYXRpb25cIixcblx0XHRcdFx0ZGVzYzogXCJBIGRlc3Ryb3llZCBtdW1teSBsb3JkIGdhaW5zIGEgbmV3IGJvZHkgaW4gMjQgaG91cnMgaWYgaXRzIGhlYXJ0IGlzIGludGFjdCwgcmVnYWluaW5nIGFsbCBpdHMgaGl0IHBvaW50cyBhbmQgYmVjb21pbmcgYWN0aXZlIGFnYWluLiBUaGUgbmV3IGJvZHkgYXBwZWFycyB3aXRoaW4gNSBmZWV0IG9mIHRoZSBtdW1teSBsb3JkJ3MgaGVhcnQuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgbXVtbXkgY2FuIHVzZSBpdHMgRHJlYWRmdWwgR2xhcmUgYW5kIG1ha2VzIG9uZSBhdHRhY2sgd2l0aCBpdHMgcm90dGluZyBmaXN0LlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlJvdHRpbmcgRmlzdFwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs5IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTQgKDNkNiArIDQpIGJsdWRnZW9uaW5nIGRhbWFnZSBwbHVzIDIxICg2ZDYpIG5lY3JvdGljIGRhbWFnZS4gSWYgdGhlIHRhcmdldCBpcyBhIGNyZWF0dXJlLCBpdCBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxNiBDb25zdGl0dXRpb24gc2F2aW5nIHRocm93IG9yIGJlIGN1cnNlZCB3aXRoIG11bW15IHJvdC4gVGhlIGN1cnNlZCB0YXJnZXQgY2FuJ3QgcmVnYWluIGhpdCBwb2ludHMsIGFuZCBpdHMgaGl0IHBvaW50IG1heGltdW0gZGVjcmVhc2VzIGJ5IDEwICgzZDYpIGZvciBldmVyeSAyNCBob3VycyB0aGF0IGVsYXBzZS4gSWYgdGhlIGN1cnNlIHJlZHVjZXMgdGhlIHRhcmdldCdzIGhpdCBwb2ludCBtYXhpbXVtIHRvIDAsIHRoZSB0YXJnZXQgZGllcywgYW5kIGl0cyBib2R5IHR1cm5zIHRvIGR1c3QuIFRoZSBjdXJzZSBsYXN0cyB1bnRpbCByZW1vdmVkIGJ5IHRoZSByZW1vdmUgY3Vyc2Ugc3BlbGwgb3Igb3RoZXIgbWFnaWMuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogOSxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiM2Q2ICsgNmQ2XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogNCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiRHJlYWRmdWwgR2xhcmVcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgbXVtbXkgbG9yZCB0YXJnZXRzIG9uZSBjcmVhdHVyZSBpdCBjYW4gc2VlIHdpdGhpbiA2MCBmZWV0IG9mIGl0LiBJZiB0aGUgdGFyZ2V0IGNhbiBzZWUgdGhlIG11bW15IGxvcmQsIGl0IG11c3Qgc3VjY2VlZCBvbiBhIERDIDE2IFdpc2RvbSBzYXZpbmcgdGhyb3cgYWdhaW5zdCB0aGlzIG1hZ2ljIG9yIGJlY29tZSBmcmlnaHRlbmVkIHVudGlsIHRoZSBlbmQgb2YgdGhlIG11bW15J3MgbmV4dCB0dXJuLiBJZiB0aGUgdGFyZ2V0IGZhaWxzIHRoZSBzYXZpbmcgdGhyb3cgYnkgNSBvciBtb3JlLCBpdCBpcyBhbHNvIHBhcmFseXplZCBmb3IgdGhlIHNhbWUgZHVyYXRpb24uIEEgdGFyZ2V0IHRoYXQgc3VjY2VlZHMgb24gdGhlIHNhdmluZyB0aHJvdyBpcyBpbW11bmUgdG8gdGhlIERyZWFkZnVsIEdsYXJlIG9mIGFsbCBtdW1taWVzIGFuZCBtdW1teSBsb3JkcyBmb3IgdGhlIG5leHQgMjQgaG91cnMuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRsZWdlbmRhcnlfYWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkF0dGFja1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBtdW1teSBsb3JkIG1ha2VzIG9uZSBhdHRhY2sgd2l0aCBpdHMgcm90dGluZyBmaXN0IG9yIHVzZXMgaXRzIERyZWFkZnVsIEdsYXJlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkJsaW5kaW5nIER1c3RcIixcblx0XHRcdFx0ZGVzYzogXCJCbGluZGluZyBkdXN0IGFuZCBzYW5kIHN3aXJscyBtYWdpY2FsbHkgYXJvdW5kIHRoZSBtdW1teSBsb3JkLiBFYWNoIGNyZWF0dXJlIHdpdGhpbiA1IGZlZXQgb2YgdGhlIG11bW15IGxvcmQgbXVzdCBzdWNjZWVkIG9uIGEgREMgMTYgQ29uc3RpdHV0aW9uIHNhdmluZyB0aHJvdyBvciBiZSBibGluZGVkIHVudGlsIHRoZSBlbmQgb2YgdGhlIGNyZWF0dXJlJ3MgbmV4dCB0dXJuLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkJsYXNwaGVtb3VzIFdvcmQgKENvc3RzIDIgQWN0aW9ucylcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgbXVtbXkgbG9yZCB1dHRlcnMgYSBibGFzcGhlbW91cyB3b3JkLiBFYWNoIG5vbi11bmRlYWQgY3JlYXR1cmUgd2l0aGluIDEwIGZlZXQgb2YgdGhlIG11bW15IGxvcmQgdGhhdCBjYW4gaGVhciB0aGUgbWFnaWNhbCB1dHRlcmFuY2UgbXVzdCBzdWNjZWVkIG9uIGEgREMgMTYgQ29uc3RpdHV0aW9uIHNhdmluZyB0aHJvdyBvciBiZSBzdHVubmVkIHVudGlsIHRoZSBlbmQgb2YgdGhlIG11bW15IGxvcmQncyBuZXh0IHR1cm4uXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQ2hhbm5lbCBOZWdhdGl2ZSBFbmVyZ3kgKENvc3RzIDIgQWN0aW9ucylcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgbXVtbXkgbG9yZCBtYWdpY2FsbHkgdW5sZWFzaGVzIG5lZ2F0aXZlIGVuZXJneS4gQ3JlYXR1cmVzIHdpdGhpbiA2MCBmZWV0IG9mIHRoZSBtdW1teSBsb3JkLCBpbmNsdWRpbmcgb25lcyBiZWhpbmQgYmFycmllcnMgYW5kIGFyb3VuZCBjb3JuZXJzLCBjYW4ndCByZWdhaW4gaGl0IHBvaW50cyB1bnRpbCB0aGUgZW5kIG9mIHRoZSBtdW1teSBsb3JkJ3MgbmV4dCB0dXJuLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIldoaXJsd2luZCBvZiBTYW5kIChDb3N0cyAyIEFjdGlvbnMpXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIG11bW15IGxvcmQgbWFnaWNhbGx5IHRyYW5zZm9ybXMgaW50byBhIHdoaXJsd2luZCBvZiBzYW5kLCBtb3ZlcyB1cCB0byA2MCBmZWV0LCBhbmQgcmV2ZXJ0cyB0byBpdHMgbm9ybWFsIGZvcm0uIFdoaWxlIGluIHdoaXJsd2luZCBmb3JtLCB0aGUgbXVtbXkgbG9yZCBpcyBpbW11bmUgdG8gYWxsIGRhbWFnZSwgYW5kIGl0IGNhbid0IGJlIGdyYXBwbGVkLCBwZXRyaWZpZWQsIGtub2NrZWQgcHJvbmUsIHJlc3RyYWluZWQsIG9yIHN0dW5uZWQuIEVxdWlwbWVudCB3b3JuIG9yIGNhcnJpZWQgYnkgdGhlIG11bW15IGxvcmQgcmVtYWluIGluIGl0cyBwb3NzZXNzaW9uLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0c3BlbGxzOiBbXG5cdFx0XHRcIlRoZSBtdW1teSBsb3JkIGlzIGEgMTB0aC1sZXZlbCBzcGVsbGNhc3Rlci4gSXRzIHNwZWxsY2FzdGluZyBhYmlsaXR5IGlzIFdpc2RvbSAoc3BlbGwgc2F2ZSBEQyAxNywgKzkgdG8gaGl0IHdpdGggc3BlbGwgYXR0YWNrcykuIFRoZSBtdW1teSBsb3JkIGhhcyB0aGUgZm9sbG93aW5nIGNsZXJpYyBzcGVsbHMgcHJlcGFyZWQ6XCIsXG5cdFx0XHR7XG5cdFx0XHRcdFwiQ2FudHJpcHMgKGF0IHdpbGwpXCI6IFwic2FjcmVkIGZsYW1lLCB0aGF1bWF0dXJneVwiLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0XCIxc3QgbGV2ZWwgKDQgc2xvdHMpXCI6IFwiY29tbWFuZCwgZ3VpZGluZyBib2x0LCBzaGllbGQgb2YgZmFpdGhcIixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdFwiMm5kIGxldmVsICgzIHNsb3RzKVwiOiBcImhvbGQgcGVyc29uLCBzaWxlbmNlLCBzcGlyaXR1YWwgd2VhcG9uXCIsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRcIjNyZCBsZXZlbCAoMyBzbG90cylcIjogXCJhbmltYXRlIGRlYWQsIGRpc3BlbCBtYWdpY1wiLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0XCI0dGggbGV2ZWwgKDMgc2xvdHMpXCI6IFwiZGl2aW5hdGlvbiwgZ3VhcmRpYW4gb2YgZmFpdGhcIixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdFwiNXRoIGxldmVsICgyIHNsb3RzKVwiOiBcImNvbnRhZ2lvbiwgaW5zZWN0IHBsYWd1ZVwiLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0XCI2dGggbGV2ZWwgKDEgc2xvdClcIjogXCJoYXJtXCIsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIk5hbGZlc2huZWVcIixcblx0XHRzaXplOiBcIkxhcmdlXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwiZmllbmRcIixcblx0XHRzdWJ0eXBlOiBcImRlbW9uXCIsXG5cdFx0YWxpZ25tZW50OiBcImNoYW90aWMgZXZpbFwiLFxuXHRcdGFjOiAxOCxcblx0XHRocDogMTg0LFxuXHRcdGhpdF9kaWNlOiBcIjE2ZDEwXCIsXG5cdFx0c3BlZWQ6IFwiMjAgZnQuLCBmbHkgMzAgZnQuXCIsXG5cdFx0c3RhdHM6IFsyMSwgMTAsIDIyLCAxOSwgMTIsIDE1XSxcblx0XHRzYXZlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRjb25zdGl0dXRpb246IDExLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0aW50ZWxsaWdlbmNlOiA5LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0d2lzZG9tOiA2LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0Y2hhcmlzbWE6IDcsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6XG5cdFx0XHRcImNvbGQsIGZpcmUsIGxpZ2h0bmluZzsgYmx1ZGdlb25pbmcsIHBpZXJjaW5nLCBhbmQgc2xhc2hpbmcgZnJvbSBub25tYWdpY2FsIHdlYXBvbnNcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJwb2lzb25cIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczogXCJwb2lzb25lZFwiLFxuXHRcdHNlbnNlczogXCJ0cnVlc2lnaHQgMTIwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDExXCIsXG5cdFx0bGFuZ3VhZ2VzOiBcIkFieXNzYWwsIHRlbGVwYXRoeSAxMjAgZnQuXCIsXG5cdFx0Y3I6IFwiMTNcIixcblx0XHR0cmFpdHM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJNYWdpYyBSZXNpc3RhbmNlXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIG5hbGZlc2huZWUgaGFzIGFkdmFudGFnZSBvbiBzYXZpbmcgdGhyb3dzIGFnYWluc3Qgc3BlbGxzIGFuZCBvdGhlciBtYWdpY2FsIGVmZmVjdHMuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgbmFsZmVzaG5lZSB1c2VzIEhvcnJvciBOaW1idXMgaWYgaXQgY2FuLiAgSXQgdGhlbiBtYWtlcyB0aHJlZSBhdHRhY2tzOiBvbmUgd2l0aCBpdHMgYml0ZSBhbmQgdHdvIHdpdGggaXRzIGNsYXdzLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkJpdGVcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMTAgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAzMiAoNWQxMCArIDUpIHBpZXJjaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAxMCxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiNWQxMFwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDUsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkNsYXdcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMTAgdG8gaGl0LCByZWFjaCAxMCBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTUgKDNkNiArIDUpIHNsYXNoaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAxMCxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiM2Q2XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogNSxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiSG9ycm9yIE5pbWJ1cyAoUmVjaGFyZ2UgNS02KVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBuYWxmZXNobmVlIG1hZ2ljYWxseSBlbWl0cyBzY2ludGlsbGF0aW5nLCBtdWx0aWNvbG9yZWQgbGlnaHQuIEVhY2ggY3JlYXR1cmUgd2l0aGluIDE1IGZlZXQgb2YgdGhlIG5hbGZlc2huZWUgdGhhdCBjYW4gc2VlIHRoZSBsaWdodCBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxNSBXaXNkb20gc2F2aW5nIHRocm93IG9yIGJlIGZyaWdodGVuZWQgZm9yIDEgbWludXRlLiBBIGNyZWF0dXJlIGNhbiByZXBlYXQgdGhlIHNhdmluZyB0aHJvdyBhdCB0aGUgZW5kIG9mIGVhY2ggb2YgaXRzIHR1cm5zLCBlbmRpbmcgdGhlIGVmZmVjdCBvbiBpdHNlbGYgb24gYSBzdWNjZXNzLiBJZiBhIGNyZWF0dXJlJ3Mgc2F2aW5nIHRocm93IGlzIHN1Y2Nlc3NmdWwgb3IgdGhlIGVmZmVjdCBlbmRzIGZvciBpdCwgdGhlIGNyZWF0dXJlIGlzIGltbXVuZSB0byB0aGUgbmFsZmVzaG5lZSdzIEhvcnJvciBOaW1idXMgZm9yIHRoZSBuZXh0IDI0IGhvdXJzLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlRlbGVwb3J0XCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIG5hbGZlc2huZWUgbWFnaWNhbGx5IHRlbGVwb3J0cywgYWxvbmcgd2l0aCBhbnkgZXF1aXBtZW50IGl0IGlzIHdlYXJpbmcgb3IgY2FycnlpbmcsIHVwIHRvIDEyMCBmZWV0IHRvIGFuIHVub2NjdXBpZWQgc3BhY2UgaXQgY2FuIHNlZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJWYXJpYW50OiBTdW1tb24gRGVtb24gKDEvRGF5KVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBkZW1vbiBjaG9vc2VzIHdoYXQgdG8gc3VtbW9uIGFuZCBhdHRlbXB0cyBhIG1hZ2ljYWwgc3VtbW9uaW5nLlxcbkEgbmFsZmVzaG5lZSBoYXMgYSA1MCBwZXJjZW50IGNoYW5jZSBvZiBzdW1tb25pbmcgMWQ0IHZyb2NrcywgMWQzIGhlenJvdXMsIDFkMiBnbGFicmV6dXMsIG9yIG9uZSBuYWxmZXNobmVlLlxcbkEgc3VtbW9uZWQgZGVtb24gYXBwZWFycyBpbiBhbiB1bm9jY3VwaWVkIHNwYWNlIHdpdGhpbiA2MCBmZWV0IG9mIGl0cyBzdW1tb25lciwgYWN0cyBhcyBhbiBhbGx5IG9mIGl0cyBzdW1tb25lciwgYW5kIGNhbid0IHN1bW1vbiBvdGhlciBkZW1vbnMuIEl0IHJlbWFpbnMgZm9yIDEgbWludXRlLCB1bnRpbCBpdCBvciBpdHMgc3VtbW9uZXIgZGllcywgb3IgdW50aWwgaXRzIHN1bW1vbmVyIGRpc21pc3NlcyBpdCBhcyBhbiBhY3Rpb24uXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiTmlnaHQgSGFnXCIsXG5cdFx0c2l6ZTogXCJNZWRpdW1cIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJmaWVuZFwiLFxuXHRcdHN1YnR5cGU6IFwiXCIsXG5cdFx0YWxpZ25tZW50OiBcIm5ldXRyYWwgZXZpbFwiLFxuXHRcdGFjOiAxNyxcblx0XHRocDogMTEyLFxuXHRcdGhpdF9kaWNlOiBcIjE1ZDhcIixcblx0XHRzcGVlZDogXCIzMCBmdC5cIixcblx0XHRzdGF0czogWzE4LCAxNSwgMTYsIDE2LCAxNCwgMTZdLFxuXHRcdHNraWxsc2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0ZGVjZXB0aW9uOiA3LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0aW5zaWdodDogNixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHBlcmNlcHRpb246IDYsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRzdGVhbHRoOiA2LFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX3Jlc2lzdGFuY2VzOlxuXHRcdFx0XCJjb2xkLCBmaXJlOyBibHVkZ2VvbmluZywgcGllcmNpbmcsIGFuZCBzbGFzaGluZyBmcm9tIG5vbm1hZ2ljYWwgd2VhcG9ucyB0aGF0IGFyZW4ndCBzaWx2ZXJlZFwiLFxuXHRcdGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcImNoYXJtZWRcIixcblx0XHRzZW5zZXM6IFwiZGFya3Zpc2lvbiAxMjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTZcIixcblx0XHRsYW5ndWFnZXM6IFwiQWJ5c3NhbCwgQ29tbW9uLCBJbmZlcm5hbCwgUHJpbW9yZGlhbFwiLFxuXHRcdGNyOiBcIjVcIixcblx0XHR0cmFpdHM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJJbm5hdGUgU3BlbGxjYXN0aW5nXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGhhZydzIGlubmF0ZSBzcGVsbGNhc3RpbmcgYWJpbGl0eSBpcyBDaGFyaXNtYSAoc3BlbGwgc2F2ZSBEQyAxNCwgKzYgdG8gaGl0IHdpdGggc3BlbGwgYXR0YWNrcykuIFNoZSBjYW4gaW5uYXRlbHkgY2FzdCB0aGUgZm9sbG93aW5nIHNwZWxscywgcmVxdWlyaW5nIG5vIG1hdGVyaWFsIGNvbXBvbmVudHM6XFxuXFxuQXQgd2lsbDogZGV0ZWN0IG1hZ2ljLCBtYWdpYyBtaXNzaWxlXFxuMi9kYXkgZWFjaDogcGxhbmUgc2hpZnQgKHNlbGYgb25seSksIHJheSBvZiBlbmZlZWJsZW1lbnQsIHNsZWVwXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTWFnaWMgUmVzaXN0YW5jZVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBoYWcgaGFzIGFkdmFudGFnZSBvbiBzYXZpbmcgdGhyb3dzIGFnYWluc3Qgc3BlbGxzIGFuZCBvdGhlciBtYWdpY2FsIGVmZmVjdHMuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTmlnaHQgSGFnIEl0ZW1zXCIsXG5cdFx0XHRcdGRlc2M6IFwiQSBuaWdodCBoYWcgY2FycmllcyB0d28gdmVyeSByYXJlIG1hZ2ljIGl0ZW1zIHRoYXQgc2hlIG11c3QgY3JhZnQgZm9yIGhlcnNlbGYgSWYgZWl0aGVyIG9iamVjdCBpcyBsb3N0LCB0aGUgbmlnaHQgaGFnIHdpbGwgZ28gdG8gZ3JlYXQgbGVuZ3RocyB0byByZXRyaWV2ZSBpdCwgYXMgY3JlYXRpbmcgYSBuZXcgdG9vbCB0YWtlcyB0aW1lIGFuZCBlZmZvcnQuXFxuSGVhcnRzdG9uZTogVGhpcyBsdXN0cm91cyBibGFjayBnZW0gYWxsb3dzIGEgbmlnaHQgaGFnIHRvIGJlY29tZSBldGhlcmVhbCB3aGlsZSBpdCBpcyBpbiBoZXIgcG9zc2Vzc2lvbi4gVGhlIHRvdWNoIG9mIGEgaGVhcnRzdG9uZSBhbHNvIGN1cmVzIGFueSBkaXNlYXNlLiBDcmFmdGluZyBhIGhlYXJ0c3RvbmUgdGFrZXMgMzAgZGF5cy5cXG5Tb3VsIEJhZzogV2hlbiBhbiBldmlsIGh1bWFub2lkIGRpZXMgYXMgYSByZXN1bHQgb2YgYSBuaWdodCBoYWcncyBOaWdodG1hcmUgSGF1bnRpbmcsIHRoZSBoYWcgY2F0Y2hlcyB0aGUgc291bCBpbiB0aGlzIGJsYWNrIHNhY2sgbWFkZSBvZiBzdGl0Y2hlZCBmbGVzaC4gQSBzb3VsIGJhZyBjYW4gaG9sZCBvbmx5IG9uZSBldmlsIHNvdWwgYXQgYSB0aW1lLCBhbmQgb25seSB0aGUgbmlnaHQgaGFnIHdobyBjcmFmdGVkIHRoZSBiYWcgY2FuIGNhdGNoIGEgc291bCB3aXRoIGl0LiBDcmFmdGluZyBhIHNvdWwgYmFnIHRha2VzIDcgZGF5cyBhbmQgYSBodW1hbm9pZCBzYWNyaWZpY2UgKHdob3NlIGZsZXNoIGlzIHVzZWQgdG8gbWFrZSB0aGUgYmFnKS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJIYWcgQ292ZW5cIixcblx0XHRcdFx0ZGVzYzogXCJXaGVuIGhhZ3MgbXVzdCB3b3JrIHRvZ2V0aGVyLCB0aGV5IGZvcm0gY292ZW5zLCBpbiBzcGl0ZSBvZiB0aGVpciBzZWxmaXNoIG5hdHVyZXMuIEEgY292ZW4gaXMgbWFkZSB1cCBvZiBoYWdzIG9mIGFueSB0eXBlLCBhbGwgb2Ygd2hvbSBhcmUgZXF1YWxzIHdpdGhpbiB0aGUgZ3JvdXAuIEhvd2V2ZXIsIGVhY2ggb2YgdGhlIGhhZ3MgY29udGludWVzIHRvIGRlc2lyZSBtb3JlIHBlcnNvbmFsIHBvd2VyLlxcbkEgY292ZW4gY29uc2lzdHMgb2YgdGhyZWUgaGFncyBzbyB0aGF0IGFueSBhcmd1bWVudHMgYmV0d2VlbiB0d28gaGFncyBjYW4gYmUgc2V0dGxlZCBieSB0aGUgdGhpcmQuIElmIG1vcmUgdGhhbiB0aHJlZSBoYWdzIGV2ZXIgY29tZSB0b2dldGhlciwgYXMgbWlnaHQgaGFwcGVuIGlmIHR3byBjb3ZlbnMgY29tZSBpbnRvIGNvbmZsaWN0LCB0aGUgcmVzdWx0IGlzIHVzdWFsbHkgY2hhb3MuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiU2hhcmVkIFNwZWxsY2FzdGluZyAoQ292ZW4gT25seSlcIixcblx0XHRcdFx0ZGVzYzogXCJXaGlsZSBhbGwgdGhyZWUgbWVtYmVycyBvZiBhIGhhZyBjb3ZlbiBhcmUgd2l0aGluIDMwIGZlZXQgb2Ygb25lIGFub3RoZXIsIHRoZXkgY2FuIGVhY2ggY2FzdCB0aGUgZm9sbG93aW5nIHNwZWxscyBmcm9tIHRoZSB3aXphcmQncyBzcGVsbCBsaXN0IGJ1dCBtdXN0IHNoYXJlIHRoZSBzcGVsbCBzbG90cyBhbW9uZyB0aGVtc2VsdmVzOlxcblxcblx1MjAyMiAxc3QgbGV2ZWwgKDQgc2xvdHMpOiBpZGVudGlmeSwgcmF5IG9mIHNpY2tuZXNzXFxuXHUyMDIyIDJuZCBsZXZlbCAoMyBzbG90cyk6IGhvbGQgcGVyc29uLCBsb2NhdGUgb2JqZWN0XFxuXHUyMDIyIDNyZCBsZXZlbCAoMyBzbG90cyk6IGJlc3RvdyBjdXJzZSwgY291bnRlcnNwZWxsLCBsaWdodG5pbmcgYm9sdFxcblx1MjAyMiA0dGggbGV2ZWwgKDMgc2xvdHMpOiBwaGFudGFzbWFsIGtpbGxlciwgcG9seW1vcnBoXFxuXHUyMDIyIDV0aCBsZXZlbCAoMiBzbG90cyk6IGNvbnRhY3Qgb3RoZXIgcGxhbmUsIHNjcnlpbmdcXG5cdTIwMjIgNnRoIGxldmVsICgxIHNsb3QpOiBleWUgYml0ZVxcblxcbkZvciBjYXN0aW5nIHRoZXNlIHNwZWxscywgZWFjaCBoYWcgaXMgYSAxMnRoLWxldmVsIHNwZWxsY2FzdGVyIHRoYXQgdXNlcyBJbnRlbGxpZ2VuY2UgYXMgaGVyIHNwZWxsY2FzdGluZyBhYmlsaXR5LiBUaGUgc3BlbGwgc2F2ZSBEQyBpcyAxMit0aGUgaGFnJ3MgSW50ZWxsaWdlbmNlIG1vZGlmaWVyLCBhbmQgdGhlIHNwZWxsIGF0dGFjayBib251cyBpcyA0K3RoZSBoYWcncyBJbnRlbGxpZ2VuY2UgbW9kaWZpZXIuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiSGFnIEV5ZSAoQ292ZW4gT25seSlcIixcblx0XHRcdFx0ZGVzYzogXCJBIGhhZyBjb3ZlbiBjYW4gY3JhZnQgYSBtYWdpYyBpdGVtIGNhbGxlZCBhIGhhZyBleWUsIHdoaWNoIGlzIG1hZGUgZnJvbSBhIHJlYWwgZXllIGNvYXRlZCBpbiB2YXJuaXNoIGFuZCBvZnRlbiBmaXR0ZWQgdG8gYSBwZW5kYW50IG9yIG90aGVyIHdlYXJhYmxlIGl0ZW0uIFRoZSBoYWcgZXllIGlzIHVzdWFsbHkgZW50cnVzdGVkIHRvIGEgbWluaW9uIGZvciBzYWZla2VlcGluZyBhbmQgdHJhbnNwb3J0LiBBIGhhZyBpbiB0aGUgY292ZW4gY2FuIHRha2UgYW4gYWN0aW9uIHRvIHNlZSB3aGF0IHRoZSBoYWcgZXllIHNlZXMgaWYgdGhlIGhhZyBleWUgaXMgb24gdGhlIHNhbWUgcGxhbmUgb2YgZXhpc3RlbmNlLiBBIGhhZyBleWUgaGFzIEFDIDEwLCAxIGhpdCBwb2ludCwgYW5kIGRhcmt2aXNpb24gd2l0aCBhIHJhZGl1cyBvZiA2MCBmZWV0LiBJZiBpdCBpcyBkZXN0cm95ZWQsIGVhY2ggY292ZW4gbWVtYmVyIHRha2VzIDNkMTAgcHN5Y2hpYyBkYW1hZ2UgYW5kIGlzIGJsaW5kZWQgZm9yIDI0IGhvdXJzLlxcbkEgaGFnIGNvdmVuIGNhbiBoYXZlIG9ubHkgb25lIGhhZyBleWUgYXQgYSB0aW1lLCBhbmQgY3JlYXRpbmcgYSBuZXcgb25lIHJlcXVpcmVzIGFsbCB0aHJlZSBtZW1iZXJzIG9mIHRoZSBjb3ZlbiB0byBwZXJmb3JtIGEgcml0dWFsLiBUaGUgcml0dWFsIHRha2VzIDEgaG91ciwgYW5kIHRoZSBoYWdzIGNhbid0IHBlcmZvcm0gaXQgd2hpbGUgYmxpbmRlZC4gRHVyaW5nIHRoZSByaXR1YWwsIGlmIHRoZSBoYWdzIHRha2UgYW55IGFjdGlvbiBvdGhlciB0aGFuIHBlcmZvcm1pbmcgdGhlIHJpdHVhbCwgdGhleSBtdXN0IHN0YXJ0IG92ZXIuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQ2xhd3MgKEhhZyBGb3JtIE9ubHkpXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzcgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxMyAoMmQ4ICsgNCkgc2xhc2hpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDcsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjJkOFwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDQsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkNoYW5nZSBTaGFwZVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBoYWcgbWFnaWNhbGx5IHBvbHltb3JwaHMgaW50byBhIFNtYWxsIG9yIE1lZGl1bSBmZW1hbGUgaHVtYW5vaWQsIG9yIGJhY2sgaW50byBoZXIgdHJ1ZSBmb3JtLiBIZXIgc3RhdGlzdGljcyBhcmUgdGhlIHNhbWUgaW4gZWFjaCBmb3JtLiBBbnkgZXF1aXBtZW50IHNoZSBpcyB3ZWFyaW5nIG9yIGNhcnJ5aW5nIGlzbid0IHRyYW5zZm9ybWVkLiBTaGUgcmV2ZXJ0cyB0byBoZXIgdHJ1ZSBmb3JtIGlmIHNoZSBkaWVzLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkV0aGVyZWFsbmVzc1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBoYWcgbWFnaWNhbGx5IGVudGVycyB0aGUgRXRoZXJlYWwgUGxhbmUgZnJvbSB0aGUgTWF0ZXJpYWwgUGxhbmUsIG9yIHZpY2UgdmVyc2EuIFRvIGRvIHNvLCB0aGUgaGFnIG11c3QgaGF2ZSBhIGhlYXJ0c3RvbmUgaW4gaGVyIHBvc3Nlc3Npb24uXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTmlnaHRtYXJlIEhhdW50aW5nICgxL0RheSlcIixcblx0XHRcdFx0ZGVzYzogXCJXaGlsZSBvbiB0aGUgRXRoZXJlYWwgUGxhbmUsIHRoZSBoYWcgbWFnaWNhbGx5IHRvdWNoZXMgYSBzbGVlcGluZyBodW1hbm9pZCBvbiB0aGUgTWF0ZXJpYWwgUGxhbmUuIEEgcHJvdGVjdGlvbiBmcm9tIGV2aWwgYW5kIGdvb2Qgc3BlbGwgY2FzdCBvbiB0aGUgdGFyZ2V0IHByZXZlbnRzIHRoaXMgY29udGFjdCwgYXMgZG9lcyBhIG1hZ2ljIGNpcmNsZS4gQXMgbG9uZyBhcyB0aGUgY29udGFjdCBwZXJzaXN0cywgdGhlIHRhcmdldCBoYXMgZHJlYWRmdWwgdmlzaW9ucy4gSWYgdGhlc2UgdmlzaW9ucyBsYXN0IGZvciBhdCBsZWFzdCAxIGhvdXIsIHRoZSB0YXJnZXQgZ2FpbnMgbm8gYmVuZWZpdCBmcm9tIGl0cyByZXN0LCBhbmQgaXRzIGhpdCBwb2ludCBtYXhpbXVtIGlzIHJlZHVjZWQgYnkgNSAoMWQxMCkuIElmIHRoaXMgZWZmZWN0IHJlZHVjZXMgdGhlIHRhcmdldCdzIGhpdCBwb2ludCBtYXhpbXVtIHRvIDAsIHRoZSB0YXJnZXQgZGllcywgYW5kIGlmIHRoZSB0YXJnZXQgd2FzIGV2aWwsIGl0cyBzb3VsIGlzIHRyYXBwZWQgaW4gdGhlIGhhZydzIHNvdWwgYmFnLiBUaGUgcmVkdWN0aW9uIHRvIHRoZSB0YXJnZXQncyBoaXQgcG9pbnQgbWF4aW11bSBsYXN0cyB1bnRpbCByZW1vdmVkIGJ5IHRoZSBncmVhdGVyIHJlc3RvcmF0aW9uIHNwZWxsIG9yIHNpbWlsYXIgbWFnaWMuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiTmlnaHRtYXJlXCIsXG5cdFx0c2l6ZTogXCJMYXJnZVwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcImZpZW5kXCIsXG5cdFx0c3VidHlwZTogXCJcIixcblx0XHRhbGlnbm1lbnQ6IFwibmV1dHJhbCBldmlsXCIsXG5cdFx0YWM6IDEzLFxuXHRcdGhwOiA2OCxcblx0XHRoaXRfZGljZTogXCI4ZDEwXCIsXG5cdFx0c3BlZWQ6IFwiNjAgZnQuLCBmbHkgOTAgZnQuXCIsXG5cdFx0c3RhdHM6IFsxOCwgMTUsIDE2LCAxMCwgMTMsIDE1XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJmaXJlXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0c2Vuc2VzOiBcInBhc3NpdmUgUGVyY2VwdGlvbiAxMVwiLFxuXHRcdGxhbmd1YWdlczogXCJ1bmRlcnN0YW5kcyBBYnlzc2FsLCBDb21tb24sIGFuZCBJbmZlcm5hbCBidXQgY2FuJ3Qgc3BlYWtcIixcblx0XHRjcjogXCIzXCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQ29uZmVyIEZpcmUgUmVzaXN0YW5jZVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBuaWdodG1hcmUgY2FuIGdyYW50IHJlc2lzdGFuY2UgdG8gZmlyZSBkYW1hZ2UgdG8gYW55b25lIHJpZGluZyBpdC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJJbGx1bWluYXRpb25cIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgbmlnaHRtYXJlIHNoZWRzIGJyaWdodCBsaWdodCBpbiBhIDEwLWZvb3QgcmFkaXVzIGFuZCBkaW0gbGlnaHQgZm9yIGFuIGFkZGl0aW9uYWwgMTAgZmVldC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJIb292ZXNcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNiB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDEzICgyZDggKyA0KSBibHVkZ2VvbmluZyBkYW1hZ2UgcGx1cyA3ICgyZDYpIGZpcmUgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDYsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjJkOCArIDJkNlwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDQsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkV0aGVyZWFsIFN0cmlkZVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBuaWdodG1hcmUgYW5kIHVwIHRvIHRocmVlIHdpbGxpbmcgY3JlYXR1cmVzIHdpdGhpbiA1IGZlZXQgb2YgaXQgbWFnaWNhbGx5IGVudGVyIHRoZSBFdGhlcmVhbCBQbGFuZSBmcm9tIHRoZSBNYXRlcmlhbCBQbGFuZSwgb3IgdmljZSB2ZXJzYS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJOb2JsZVwiLFxuXHRcdHNpemU6IFwiTWVkaXVtXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwiaHVtYW5vaWRcIixcblx0XHRzdWJ0eXBlOiBcImFueSByYWNlXCIsXG5cdFx0YWxpZ25tZW50OiBcImFueSBhbGlnbm1lbnRcIixcblx0XHRhYzogMTUsXG5cdFx0aHA6IDksXG5cdFx0aGl0X2RpY2U6IFwiMmQ4XCIsXG5cdFx0c3BlZWQ6IFwiMzAgZnQuXCIsXG5cdFx0c3RhdHM6IFsxMSwgMTIsIDExLCAxMiwgMTQsIDE2XSxcblx0XHRza2lsbHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdGRlY2VwdGlvbjogNSxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdGluc2lnaHQ6IDQsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRwZXJzdWFzaW9uOiA1LFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuXHRcdGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuXHRcdHNlbnNlczogXCJwYXNzaXZlIFBlcmNlcHRpb24gMTJcIixcblx0XHRsYW5ndWFnZXM6IFwiYW55IHR3byBsYW5ndWFnZXNcIixcblx0XHRjcjogXCIxLzhcIixcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiUmFwaWVyXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzMgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiA1ICgxZDggKyAxKSBwaWVyY2luZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMyxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMWQ4XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogMSxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRyZWFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJQYXJyeVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBub2JsZSBhZGRzIDIgdG8gaXRzIEFDIGFnYWluc3Qgb25lIG1lbGVlIGF0dGFjayB0aGF0IHdvdWxkIGhpdCBpdC4gVG8gZG8gc28sIHRoZSBub2JsZSBtdXN0IHNlZSB0aGUgYXR0YWNrZXIgYW5kIGJlIHdpZWxkaW5nIGEgbWVsZWUgd2VhcG9uLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIk9jaHJlIEplbGx5XCIsXG5cdFx0c2l6ZTogXCJMYXJnZVwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcIm9vemVcIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcblx0XHRhYzogOCxcblx0XHRocDogNDUsXG5cdFx0aGl0X2RpY2U6IFwiNmQxMFwiLFxuXHRcdHNwZWVkOiBcIjEwIGZ0LiwgY2xpbWIgMTAgZnQuXCIsXG5cdFx0c3RhdHM6IFsxNSwgNiwgMTQsIDIsIDYsIDFdLFxuXHRcdGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX3Jlc2lzdGFuY2VzOiBcImFjaWRcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJsaWdodG5pbmcsIHNsYXNoaW5nXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6XG5cdFx0XHRcImJsaW5kZWQsIGNoYXJtZWQsIGRlYWZlbmVkLCBleGhhdXN0aW9uLCBmcmlnaHRlbmVkLCBwcm9uZVwiLFxuXHRcdHNlbnNlczogXCJibGluZHNpZ2h0IDYwIGZ0LiAoYmxpbmQgYmV5b25kIHRoaXMgcmFkaXVzKSwgcGFzc2l2ZSBQZXJjZXB0aW9uIDhcIixcblx0XHRsYW5ndWFnZXM6IFwiXCIsXG5cdFx0Y3I6IFwiMlwiLFxuXHRcdHRyYWl0czogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkFtb3JwaG91c1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBqZWxseSBjYW4gbW92ZSB0aHJvdWdoIGEgc3BhY2UgYXMgbmFycm93IGFzIDEgaW5jaCB3aWRlIHdpdGhvdXQgc3F1ZWV6aW5nLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlNwaWRlciBDbGltYlwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBqZWxseSBjYW4gY2xpbWIgZGlmZmljdWx0IHN1cmZhY2VzLCBpbmNsdWRpbmcgdXBzaWRlIGRvd24gb24gY2VpbGluZ3MsIHdpdGhvdXQgbmVlZGluZyB0byBtYWtlIGFuIGFiaWxpdHkgY2hlY2suXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiUHNldWRvcG9kXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzQgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiA5ICgyZDYgKyAyKSBibHVkZ2VvbmluZyBkYW1hZ2UgcGx1cyAzICgxZDYpIGFjaWQgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDQsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjJkNlwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDIsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0cmVhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiU3BsaXRcIixcblx0XHRcdFx0ZGVzYzogXCJXaGVuIGEgamVsbHkgdGhhdCBpcyBNZWRpdW0gb3IgbGFyZ2VyIGlzIHN1YmplY3RlZCB0byBsaWdodG5pbmcgb3Igc2xhc2hpbmcgZGFtYWdlLCBpdCBzcGxpdHMgaW50byB0d28gbmV3IGplbGxpZXMgaWYgaXQgaGFzIGF0IGxlYXN0IDEwIGhpdCBwb2ludHMuIEVhY2ggbmV3IGplbGx5IGhhcyBoaXQgcG9pbnRzIGVxdWFsIHRvIGhhbGYgdGhlIG9yaWdpbmFsIGplbGx5J3MsIHJvdW5kZWQgZG93bi4gTmV3IGplbGxpZXMgYXJlIG9uZSBzaXplIHNtYWxsZXIgdGhhbiB0aGUgb3JpZ2luYWwgamVsbHkuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiT2N0b3B1c1wiLFxuXHRcdHNpemU6IFwiU21hbGxcIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJiZWFzdFwiLFxuXHRcdHN1YnR5cGU6IFwiXCIsXG5cdFx0YWxpZ25tZW50OiBcInVuYWxpZ25lZFwiLFxuXHRcdGFjOiAxMixcblx0XHRocDogMyxcblx0XHRoaXRfZGljZTogXCIxZDZcIixcblx0XHRzcGVlZDogXCI1IGZ0Liwgc3dpbSAzMCBmdC5cIixcblx0XHRzdGF0czogWzQsIDE1LCAxMSwgMywgMTAsIDRdLFxuXHRcdHNraWxsc2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0cGVyY2VwdGlvbjogMixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHN0ZWFsdGg6IDQsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0c2Vuc2VzOiBcImRhcmt2aXNpb24gMzAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTJcIixcblx0XHRsYW5ndWFnZXM6IFwiXCIsXG5cdFx0Y3I6IFwiMFwiLFxuXHRcdHRyYWl0czogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkhvbGQgQnJlYXRoXCIsXG5cdFx0XHRcdGRlc2M6IFwiV2hpbGUgb3V0IG9mIHdhdGVyLCB0aGUgb2N0b3B1cyBjYW4gaG9sZCBpdHMgYnJlYXRoIGZvciAzMCBtaW51dGVzLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlVuZGVyd2F0ZXIgQ2Ftb3VmbGFnZVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBvY3RvcHVzIGhhcyBhZHZhbnRhZ2Ugb24gRGV4dGVyaXR5IChTdGVhbHRoKSBjaGVja3MgbWFkZSB3aGlsZSB1bmRlcndhdGVyLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIldhdGVyIEJyZWF0aGluZ1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBvY3RvcHVzIGNhbiBicmVhdGhlIG9ubHkgdW5kZXJ3YXRlci5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJUZW50YWNsZXNcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNCB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDEgYmx1ZGdlb25pbmcgZGFtYWdlLCBhbmQgdGhlIHRhcmdldCBpcyBncmFwcGxlZCAoZXNjYXBlIERDIDEwKS4gVW50aWwgdGhpcyBncmFwcGxlIGVuZHMsIHRoZSBvY3RvcHVzIGNhbid0IHVzZSBpdHMgdGVudGFjbGVzIG9uIGFub3RoZXIgdGFyZ2V0LlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDQsXG5cdFx0XHRcdGRhbWFnZV9ib251czogMSxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiSW5rIENsb3VkIChSZWNoYXJnZXMgYWZ0ZXIgYSBTaG9ydCBvciBMb25nIFJlc3QpXCIsXG5cdFx0XHRcdGRlc2M6IFwiQSA1LWZvb3QtcmFkaXVzIGNsb3VkIG9mIGluayBleHRlbmRzIGFsbCBhcm91bmQgdGhlIG9jdG9wdXMgaWYgaXQgaXMgdW5kZXJ3YXRlci4gVGhlIGFyZWEgaXMgaGVhdmlseSBvYnNjdXJlZCBmb3IgMSBtaW51dGUsIGFsdGhvdWdoIGEgc2lnbmlmaWNhbnQgY3VycmVudCBjYW4gZGlzcGVyc2UgdGhlIGluay4gQWZ0ZXIgcmVsZWFzaW5nIHRoZSBpbmssIHRoZSBvY3RvcHVzIGNhbiB1c2UgdGhlIERhc2ggYWN0aW9uIGFzIGEgYm9udXMgYWN0aW9uLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIk9ncmVcIixcblx0XHRzaXplOiBcIkxhcmdlXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwiZ2lhbnRcIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJjaGFvdGljIGV2aWxcIixcblx0XHRhYzogMTEsXG5cdFx0aHA6IDU5LFxuXHRcdGhpdF9kaWNlOiBcIjdkMTBcIixcblx0XHRzcGVlZDogXCI0MCBmdC5cIixcblx0XHRzdGF0czogWzE5LCA4LCAxNiwgNSwgNywgN10sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0c2Vuc2VzOiBcImRhcmt2aXNpb24gNjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gOFwiLFxuXHRcdGxhbmd1YWdlczogXCJDb21tb24sIEdpYW50XCIsXG5cdFx0Y3I6IFwiMlwiLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJHcmVhdGNsdWJcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNiB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDEzICgyZDggKyA0KSBibHVkZ2VvbmluZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNixcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMmQ4XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogNCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiSmF2ZWxpblwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIG9yIFJhbmdlZCBXZWFwb24gQXR0YWNrOiArNiB0byBoaXQsIHJlYWNoIDUgZnQuIG9yIHJhbmdlIDMwLzEyMCBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTEgKDJkNiArIDQpIHBpZXJjaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA2LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIyZDZcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiA0LFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJPZ3JlIFpvbWJpZVwiLFxuXHRcdHNpemU6IFwiTGFyZ2VcIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJ1bmRlYWRcIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJuZXV0cmFsIGV2aWxcIixcblx0XHRhYzogOCxcblx0XHRocDogODUsXG5cdFx0aGl0X2RpY2U6IFwiOWQxMFwiLFxuXHRcdHNwZWVkOiBcIjMwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbMTksIDYsIDE4LCAzLCA2LCA1XSxcblx0XHRzYXZlczogW1xuXHRcdFx0e1xuXHRcdFx0XHR3aXNkb206IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwicG9pc29uXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwicG9pc29uZWRcIixcblx0XHRzZW5zZXM6IFwiZGFya3Zpc2lvbiA2MCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiA4XCIsXG5cdFx0bGFuZ3VhZ2VzOiBcInVuZGVyc3RhbmRzIENvbW1vbiBhbmQgR2lhbnQgYnV0IGNhbid0IHNwZWFrXCIsXG5cdFx0Y3I6IFwiMlwiLFxuXHRcdHRyYWl0czogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlVuZGVhZCBGb3J0aXR1ZGVcIixcblx0XHRcdFx0ZGVzYzogXCJJZiBkYW1hZ2UgcmVkdWNlcyB0aGUgem9tYmllIHRvIDAgaGl0IHBvaW50cywgaXQgbXVzdCBtYWtlIGEgQ29uc3RpdHV0aW9uIHNhdmluZyB0aHJvdyB3aXRoIGEgREMgb2YgNSt0aGUgZGFtYWdlIHRha2VuLCB1bmxlc3MgdGhlIGRhbWFnZSBpcyByYWRpYW50IG9yIGZyb20gYSBjcml0aWNhbCBoaXQuIE9uIGEgc3VjY2VzcywgdGhlIHpvbWJpZSBkcm9wcyB0byAxIGhpdCBwb2ludCBpbnN0ZWFkLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIk1vcm5pbmdzdGFyXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzYgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxMyAoMmQ4ICsgNCkgYmx1ZGdlb25pbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDYsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjJkOFwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDQsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIk9uaVwiLFxuXHRcdHNpemU6IFwiTGFyZ2VcIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJnaWFudFwiLFxuXHRcdHN1YnR5cGU6IFwiXCIsXG5cdFx0YWxpZ25tZW50OiBcImxhd2Z1bCBldmlsXCIsXG5cdFx0YWM6IDE2LFxuXHRcdGhwOiAxMTAsXG5cdFx0aGl0X2RpY2U6IFwiMTNkMTBcIixcblx0XHRzcGVlZDogXCIzMCBmdC4sIGZseSAzMCBmdC5cIixcblx0XHRzdGF0czogWzE5LCAxMSwgMTYsIDE0LCAxMiwgMTVdLFxuXHRcdHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdGRleHRlcml0eTogMyxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdGNvbnN0aXR1dGlvbjogNixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHdpc2RvbTogNCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdGNoYXJpc21hOiA1LFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdHNraWxsc2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0YXJjYW5hOiA1LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0ZGVjZXB0aW9uOiA4LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0cGVyY2VwdGlvbjogNCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcblx0XHRzZW5zZXM6IFwiZGFya3Zpc2lvbiA2MCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxNFwiLFxuXHRcdGxhbmd1YWdlczogXCJDb21tb24sIEdpYW50XCIsXG5cdFx0Y3I6IFwiN1wiLFxuXHRcdHRyYWl0czogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIklubmF0ZSBTcGVsbGNhc3RpbmdcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgb25pJ3MgaW5uYXRlIHNwZWxsY2FzdGluZyBhYmlsaXR5IGlzIENoYXJpc21hIChzcGVsbCBzYXZlIERDIDEzKS4gVGhlIG9uaSBjYW4gaW5uYXRlbHkgY2FzdCB0aGUgZm9sbG93aW5nIHNwZWxscywgcmVxdWlyaW5nIG5vIG1hdGVyaWFsIGNvbXBvbmVudHM6XFxuXFxuQXQgd2lsbDogZGFya25lc3MsIGludmlzaWJpbGl0eVxcbjEvZGF5IGVhY2g6IGNoYXJtIHBlcnNvbiwgY29uZSBvZiBjb2xkLCBnYXNlb3VzIGZvcm0sIHNsZWVwXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTWFnaWMgV2VhcG9uc1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBvbmkncyB3ZWFwb24gYXR0YWNrcyBhcmUgbWFnaWNhbC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJSZWdlbmVyYXRpb25cIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgb25pIHJlZ2FpbnMgMTAgaGl0IHBvaW50cyBhdCB0aGUgc3RhcnQgb2YgaXRzIHR1cm4gaWYgaXQgaGFzIGF0IGxlYXN0IDEgaGl0IHBvaW50LlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIG9uaSBtYWtlcyB0d28gYXR0YWNrcywgZWl0aGVyIHdpdGggaXRzIGNsYXdzIG9yIGl0cyBnbGFpdmUuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQ2xhdyAoT25pIEZvcm0gT25seSlcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNyB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDggKDFkOCArIDQpIHNsYXNoaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA3LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxZDhcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiA0LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJHbGFpdmVcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNyB0byBoaXQsIHJlYWNoIDEwIGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxNSAoMmQxMCArIDQpIHNsYXNoaW5nIGRhbWFnZSwgb3IgOSAoMWQxMCArIDQpIHNsYXNoaW5nIGRhbWFnZSBpbiBTbWFsbCBvciBNZWRpdW0gZm9ybS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA3LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIyZDEwXCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogNCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQ2hhbmdlIFNoYXBlXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIG9uaSBtYWdpY2FsbHkgcG9seW1vcnBocyBpbnRvIGEgU21hbGwgb3IgTWVkaXVtIGh1bWFub2lkLCBpbnRvIGEgTGFyZ2UgZ2lhbnQsIG9yIGJhY2sgaW50byBpdHMgdHJ1ZSBmb3JtLiBPdGhlciB0aGFuIGl0cyBzaXplLCBpdHMgc3RhdGlzdGljcyBhcmUgdGhlIHNhbWUgaW4gZWFjaCBmb3JtLiBUaGUgb25seSBlcXVpcG1lbnQgdGhhdCBpcyB0cmFuc2Zvcm1lZCBpcyBpdHMgZ2xhaXZlLCB3aGljaCBzaHJpbmtzIHNvIHRoYXQgaXQgY2FuIGJlIHdpZWxkZWQgaW4gaHVtYW5vaWQgZm9ybS4gSWYgdGhlIG9uaSBkaWVzLCBpdCByZXZlcnRzIHRvIGl0cyB0cnVlIGZvcm0sIGFuZCBpdHMgZ2xhaXZlIHJldmVydHMgdG8gaXRzIG5vcm1hbCBzaXplLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIk9yY1wiLFxuXHRcdHNpemU6IFwiTWVkaXVtXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwiaHVtYW5vaWRcIixcblx0XHRzdWJ0eXBlOiBcIm9yY1wiLFxuXHRcdGFsaWdubWVudDogXCJjaGFvdGljIGV2aWxcIixcblx0XHRhYzogMTMsXG5cdFx0aHA6IDE1LFxuXHRcdGhpdF9kaWNlOiBcIjJkOFwiLFxuXHRcdHNwZWVkOiBcIjMwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbMTYsIDEyLCAxNiwgNywgMTEsIDEwXSxcblx0XHRza2lsbHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdGludGltaWRhdGlvbjogMixcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcblx0XHRzZW5zZXM6IFwiZGFya3Zpc2lvbiA2MCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxMFwiLFxuXHRcdGxhbmd1YWdlczogXCJDb21tb24sIE9yY1wiLFxuXHRcdGNyOiBcIjEvMlwiLFxuXHRcdHRyYWl0czogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkFnZ3Jlc3NpdmVcIixcblx0XHRcdFx0ZGVzYzogXCJBcyBhIGJvbnVzIGFjdGlvbiwgdGhlIG9yYyBjYW4gbW92ZSB1cCB0byBpdHMgc3BlZWQgdG93YXJkIGEgaG9zdGlsZSBjcmVhdHVyZSB0aGF0IGl0IGNhbiBzZWUuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiR3JlYXRheGVcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNSB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDkgKDFkMTIgKyAzKSBzbGFzaGluZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNSxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMWQxMlwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDMsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkphdmVsaW5cIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBvciBSYW5nZWQgV2VhcG9uIEF0dGFjazogKzUgdG8gaGl0LCByZWFjaCA1IGZ0LiBvciByYW5nZSAzMC8xMjAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDYgKDFkNiArIDMpIHBpZXJjaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA1LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxZDZcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiAzLFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJPdHl1Z2hcIixcblx0XHRzaXplOiBcIkxhcmdlXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwiYWJlcnJhdGlvblwiLFxuXHRcdHN1YnR5cGU6IFwiXCIsXG5cdFx0YWxpZ25tZW50OiBcIm5ldXRyYWxcIixcblx0XHRhYzogMTQsXG5cdFx0aHA6IDExNCxcblx0XHRoaXRfZGljZTogXCIxMmQxMFwiLFxuXHRcdHNwZWVkOiBcIjMwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbMTYsIDExLCAxOSwgNiwgMTMsIDZdLFxuXHRcdHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdGNvbnN0aXR1dGlvbjogNyxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcblx0XHRzZW5zZXM6IFwiZGFya3Zpc2lvbiAxMjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTFcIixcblx0XHRsYW5ndWFnZXM6IFwiT3R5dWdoXCIsXG5cdFx0Y3I6IFwiNVwiLFxuXHRcdHRyYWl0czogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkxpbWl0ZWQgVGVsZXBhdGh5XCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIG90eXVnaCBjYW4gbWFnaWNhbGx5IHRyYW5zbWl0IHNpbXBsZSBtZXNzYWdlcyBhbmQgaW1hZ2VzIHRvIGFueSBjcmVhdHVyZSB3aXRoaW4gMTIwIGZ0LiBvZiBpdCB0aGF0IGNhbiB1bmRlcnN0YW5kIGEgbGFuZ3VhZ2UuIFRoaXMgZm9ybSBvZiB0ZWxlcGF0aHkgZG9lc24ndCBhbGxvdyB0aGUgcmVjZWl2aW5nIGNyZWF0dXJlIHRvIHRlbGVwYXRoaWNhbGx5IHJlc3BvbmQuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgb3R5dWdoIG1ha2VzIHRocmVlIGF0dGFja3M6IG9uZSB3aXRoIGl0cyBiaXRlIGFuZCB0d28gd2l0aCBpdHMgdGVudGFjbGVzLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkJpdGVcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNiB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDEyICgyZDggKyAzKSBwaWVyY2luZyBkYW1hZ2UuIElmIHRoZSB0YXJnZXQgaXMgYSBjcmVhdHVyZSwgaXQgbXVzdCBzdWNjZWVkIG9uIGEgREMgMTUgQ29uc3RpdHV0aW9uIHNhdmluZyB0aHJvdyBhZ2FpbnN0IGRpc2Vhc2Ugb3IgYmVjb21lIHBvaXNvbmVkIHVudGlsIHRoZSBkaXNlYXNlIGlzIGN1cmVkLiBFdmVyeSAyNCBob3VycyB0aGF0IGVsYXBzZSwgdGhlIHRhcmdldCBtdXN0IHJlcGVhdCB0aGUgc2F2aW5nIHRocm93LCByZWR1Y2luZyBpdHMgaGl0IHBvaW50IG1heGltdW0gYnkgNSAoMWQxMCkgb24gYSBmYWlsdXJlLiBUaGUgZGlzZWFzZSBpcyBjdXJlZCBvbiBhIHN1Y2Nlc3MuIFRoZSB0YXJnZXQgZGllcyBpZiB0aGUgZGlzZWFzZSByZWR1Y2VzIGl0cyBoaXQgcG9pbnQgbWF4aW11bSB0byAwLiBUaGlzIHJlZHVjdGlvbiB0byB0aGUgdGFyZ2V0J3MgaGl0IHBvaW50IG1heGltdW0gbGFzdHMgdW50aWwgdGhlIGRpc2Vhc2UgaXMgY3VyZWQuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNixcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMmQ4XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogMyxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiVGVudGFjbGVcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNiB0byBoaXQsIHJlYWNoIDEwIGZ0Liwgb25lIHRhcmdldC4gSGl0OiA3ICgxZDggKyAzKSBibHVkZ2VvbmluZyBkYW1hZ2UgcGx1cyA0ICgxZDgpIHBpZXJjaW5nIGRhbWFnZS4gSWYgdGhlIHRhcmdldCBpcyBNZWRpdW0gb3Igc21hbGxlciwgaXQgaXMgZ3JhcHBsZWQgKGVzY2FwZSBEQyAxMykgYW5kIHJlc3RyYWluZWQgdW50aWwgdGhlIGdyYXBwbGUgZW5kcy4gVGhlIG90eXVnaCBoYXMgdHdvIHRlbnRhY2xlcywgZWFjaCBvZiB3aGljaCBjYW4gZ3JhcHBsZSBvbmUgdGFyZ2V0LlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDYsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjFkOFwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDMsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlRlbnRhY2xlIFNsYW1cIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgb3R5dWdoIHNsYW1zIGNyZWF0dXJlcyBncmFwcGxlZCBieSBpdCBpbnRvIGVhY2ggb3RoZXIgb3IgYSBzb2xpZCBzdXJmYWNlLiBFYWNoIGNyZWF0dXJlIG11c3Qgc3VjY2VlZCBvbiBhIERDIDE0IENvbnN0aXR1dGlvbiBzYXZpbmcgdGhyb3cgb3IgdGFrZSAxMCAoMmQ2ICsgMykgYmx1ZGdlb25pbmcgZGFtYWdlIGFuZCBiZSBzdHVubmVkIHVudGlsIHRoZSBlbmQgb2YgdGhlIG90eXVnaCdzIG5leHQgdHVybi4gT24gYSBzdWNjZXNzZnVsIHNhdmUsIHRoZSB0YXJnZXQgdGFrZXMgaGFsZiB0aGUgYmx1ZGdlb25pbmcgZGFtYWdlIGFuZCBpc24ndCBzdHVubmVkLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIk93bFwiLFxuXHRcdHNpemU6IFwiVGlueVwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcImJlYXN0XCIsXG5cdFx0c3VidHlwZTogXCJcIixcblx0XHRhbGlnbm1lbnQ6IFwidW5hbGlnbmVkXCIsXG5cdFx0YWM6IDExLFxuXHRcdGhwOiAxLFxuXHRcdGhpdF9kaWNlOiBcIjFkNFwiLFxuXHRcdHNwZWVkOiBcIjUgZnQuLCBmbHkgNjAgZnQuXCIsXG5cdFx0c3RhdHM6IFszLCAxMywgOCwgMiwgMTIsIDddLFxuXHRcdHNraWxsc2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0cGVyY2VwdGlvbjogMyxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHN0ZWFsdGg6IDMsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0c2Vuc2VzOiBcImRhcmt2aXNpb24gMTIwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDEzXCIsXG5cdFx0bGFuZ3VhZ2VzOiBcIlwiLFxuXHRcdGNyOiBcIjBcIixcblx0XHR0cmFpdHM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJGbHlieVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBvd2wgZG9lc24ndCBwcm92b2tlIG9wcG9ydHVuaXR5IGF0dGFja3Mgd2hlbiBpdCBmbGllcyBvdXQgb2YgYW4gZW5lbXkncyByZWFjaC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJLZWVuIEhlYXJpbmcgYW5kIFNpZ2h0XCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIG93bCBoYXMgYWR2YW50YWdlIG9uIFdpc2RvbSAoUGVyY2VwdGlvbikgY2hlY2tzIHRoYXQgcmVseSBvbiBoZWFyaW5nIG9yIHNpZ2h0LlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlRhbG9uc1wiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICszIHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMSBzbGFzaGluZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMyxcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiAxLFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJPd2xiZWFyXCIsXG5cdFx0c2l6ZTogXCJMYXJnZVwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcIm1vbnN0cm9zaXR5XCIsXG5cdFx0c3VidHlwZTogXCJcIixcblx0XHRhbGlnbm1lbnQ6IFwidW5hbGlnbmVkXCIsXG5cdFx0YWM6IDEzLFxuXHRcdGhwOiA1OSxcblx0XHRoaXRfZGljZTogXCI3ZDEwXCIsXG5cdFx0c3BlZWQ6IFwiNDAgZnQuXCIsXG5cdFx0c3RhdHM6IFsyMCwgMTIsIDE3LCAzLCAxMiwgN10sXG5cdFx0c2tpbGxzYXZlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRwZXJjZXB0aW9uOiAzLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuXHRcdGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuXHRcdHNlbnNlczogXCJkYXJrdmlzaW9uIDYwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDEzXCIsXG5cdFx0bGFuZ3VhZ2VzOiBcIlwiLFxuXHRcdGNyOiBcIjNcIixcblx0XHR0cmFpdHM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJLZWVuIFNpZ2h0IGFuZCBTbWVsbFwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBvd2xiZWFyIGhhcyBhZHZhbnRhZ2Ugb24gV2lzZG9tIChQZXJjZXB0aW9uKSBjaGVja3MgdGhhdCByZWx5IG9uIHNpZ2h0IG9yIHNtZWxsLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIG93bGJlYXIgbWFrZXMgdHdvIGF0dGFja3M6IG9uZSB3aXRoIGl0cyBiZWFrIGFuZCBvbmUgd2l0aCBpdHMgY2xhd3MuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQmVha1wiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs3IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSBjcmVhdHVyZS4gSGl0OiAxMCAoMWQxMCArIDUpIHBpZXJjaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA3LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxZDEwXCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogNSxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQ2xhd3NcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNyB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDE0ICgyZDggKyA1KSBzbGFzaGluZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNyxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMmQ4XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogNSxcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiUGFudGhlclwiLFxuXHRcdHNpemU6IFwiTWVkaXVtXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwiYmVhc3RcIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcblx0XHRhYzogMTIsXG5cdFx0aHA6IDEzLFxuXHRcdGhpdF9kaWNlOiBcIjNkOFwiLFxuXHRcdHNwZWVkOiBcIjUwIGZ0LiwgY2xpbWIgNDAgZnQuXCIsXG5cdFx0c3RhdHM6IFsxNCwgMTUsIDEwLCAzLCAxNCwgN10sXG5cdFx0c2tpbGxzYXZlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRwZXJjZXB0aW9uOiA0LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0c3RlYWx0aDogNixcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcblx0XHRzZW5zZXM6IFwicGFzc2l2ZSBQZXJjZXB0aW9uIDE0XCIsXG5cdFx0bGFuZ3VhZ2VzOiBcIlwiLFxuXHRcdGNyOiBcIjEvNFwiLFxuXHRcdHRyYWl0czogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIktlZW4gU21lbGxcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgcGFudGhlciBoYXMgYWR2YW50YWdlIG9uIFdpc2RvbSAoUGVyY2VwdGlvbikgY2hlY2tzIHRoYXQgcmVseSBvbiBzbWVsbC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJQb3VuY2VcIixcblx0XHRcdFx0ZGVzYzogXCJJZiB0aGUgcGFudGhlciBtb3ZlcyBhdCBsZWFzdCAyMCBmdC4gc3RyYWlnaHQgdG93YXJkIGEgY3JlYXR1cmUgYW5kIHRoZW4gaGl0cyBpdCB3aXRoIGEgY2xhdyBhdHRhY2sgb24gdGhlIHNhbWUgdHVybiwgdGhhdCB0YXJnZXQgbXVzdCBzdWNjZWVkIG9uIGEgREMgMTIgU3RyZW5ndGggc2F2aW5nIHRocm93IG9yIGJlIGtub2NrZWQgcHJvbmUuIElmIHRoZSB0YXJnZXQgaXMgcHJvbmUsIHRoZSBwYW50aGVyIGNhbiBtYWtlIG9uZSBiaXRlIGF0dGFjayBhZ2FpbnN0IGl0IGFzIGEgYm9udXMgYWN0aW9uLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkJpdGVcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNCB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDUgKDFkNiArIDIpIHBpZXJjaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA0LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxZDZcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiAyLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJDbGF3XCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzQgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiA0ICgxZDQgKyAyKSBzbGFzaGluZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNCxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMWQ0XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogMixcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiUGVnYXN1c1wiLFxuXHRcdHNpemU6IFwiTGFyZ2VcIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJjZWxlc3RpYWxcIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJjaGFvdGljIGdvb2RcIixcblx0XHRhYzogMTIsXG5cdFx0aHA6IDU5LFxuXHRcdGhpdF9kaWNlOiBcIjdkMTBcIixcblx0XHRzcGVlZDogXCI2MCBmdC4sIGZseSA5MCBmdC5cIixcblx0XHRzdGF0czogWzE4LCAxNSwgMTYsIDEwLCAxNSwgMTNdLFxuXHRcdHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdGRleHRlcml0eTogNCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHdpc2RvbTogNCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdGNoYXJpc21hOiAzLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdHNraWxsc2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0cGVyY2VwdGlvbjogNixcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcblx0XHRzZW5zZXM6IFwicGFzc2l2ZSBQZXJjZXB0aW9uIDE2XCIsXG5cdFx0bGFuZ3VhZ2VzOlxuXHRcdFx0XCJ1bmRlcnN0YW5kcyBDZWxlc3RpYWwsIENvbW1vbiwgRWx2aXNoLCBhbmQgU3lsdmFuIGJ1dCBjYW4ndCBzcGVha1wiLFxuXHRcdGNyOiBcIjJcIixcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiSG9vdmVzXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzYgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxMSAoMmQ2ICsgNCkgYmx1ZGdlb25pbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDYsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjJkNlwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDQsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIlBoYXNlIFNwaWRlclwiLFxuXHRcdHNpemU6IFwiTGFyZ2VcIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJtb25zdHJvc2l0eVwiLFxuXHRcdHN1YnR5cGU6IFwiXCIsXG5cdFx0YWxpZ25tZW50OiBcInVuYWxpZ25lZFwiLFxuXHRcdGFjOiAxMyxcblx0XHRocDogMzIsXG5cdFx0aGl0X2RpY2U6IFwiNWQxMFwiLFxuXHRcdHNwZWVkOiBcIjMwIGZ0LiwgY2xpbWIgMzAgZnQuXCIsXG5cdFx0c3RhdHM6IFsxNSwgMTUsIDEyLCA2LCAxMCwgNl0sXG5cdFx0c2tpbGxzYXZlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRzdGVhbHRoOiA2LFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuXHRcdGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuXHRcdHNlbnNlczogXCJkYXJrdmlzaW9uIDYwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDEwXCIsXG5cdFx0bGFuZ3VhZ2VzOiBcIlwiLFxuXHRcdGNyOiBcIjNcIixcblx0XHR0cmFpdHM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJFdGhlcmVhbCBKYXVudFwiLFxuXHRcdFx0XHRkZXNjOiBcIkFzIGEgYm9udXMgYWN0aW9uLCB0aGUgc3BpZGVyIGNhbiBtYWdpY2FsbHkgc2hpZnQgZnJvbSB0aGUgTWF0ZXJpYWwgUGxhbmUgdG8gdGhlIEV0aGVyZWFsIFBsYW5lLCBvciB2aWNlIHZlcnNhLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlNwaWRlciBDbGltYlwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBzcGlkZXIgY2FuIGNsaW1iIGRpZmZpY3VsdCBzdXJmYWNlcywgaW5jbHVkaW5nIHVwc2lkZSBkb3duIG9uIGNlaWxpbmdzLCB3aXRob3V0IG5lZWRpbmcgdG8gbWFrZSBhbiBhYmlsaXR5IGNoZWNrLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIldlYiBXYWxrZXJcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgc3BpZGVyIGlnbm9yZXMgbW92ZW1lbnQgcmVzdHJpY3Rpb25zIGNhdXNlZCBieSB3ZWJiaW5nLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkJpdGVcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNCB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgY3JlYXR1cmUuIEhpdDogNyAoMWQxMCArIDIpIHBpZXJjaW5nIGRhbWFnZSwgYW5kIHRoZSB0YXJnZXQgbXVzdCBtYWtlIGEgREMgMTEgQ29uc3RpdHV0aW9uIHNhdmluZyB0aHJvdywgdGFraW5nIDE4ICg0ZDgpIHBvaXNvbiBkYW1hZ2Ugb24gYSBmYWlsZWQgc2F2ZSwgb3IgaGFsZiBhcyBtdWNoIGRhbWFnZSBvbiBhIHN1Y2Nlc3NmdWwgb25lLiBJZiB0aGUgcG9pc29uIGRhbWFnZSByZWR1Y2VzIHRoZSB0YXJnZXQgdG8gMCBoaXQgcG9pbnRzLCB0aGUgdGFyZ2V0IGlzIHN0YWJsZSBidXQgcG9pc29uZWQgZm9yIDEgaG91ciwgZXZlbiBhZnRlciByZWdhaW5pbmcgaGl0IHBvaW50cywgYW5kIGlzIHBhcmFseXplZCB3aGlsZSBwb2lzb25lZCBpbiB0aGlzIHdheS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA0LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxZDEwXCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogMixcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiUGl0IEZpZW5kXCIsXG5cdFx0c2l6ZTogXCJMYXJnZVwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcImZpZW5kXCIsXG5cdFx0c3VidHlwZTogXCJkZXZpbFwiLFxuXHRcdGFsaWdubWVudDogXCJsYXdmdWwgZXZpbFwiLFxuXHRcdGFjOiAxOSxcblx0XHRocDogMzAwLFxuXHRcdGhpdF9kaWNlOiBcIjI0ZDEwXCIsXG5cdFx0c3BlZWQ6IFwiMzAgZnQuLCBmbHkgNjAgZnQuXCIsXG5cdFx0c3RhdHM6IFsyNiwgMTQsIDI0LCAyMiwgMTgsIDI0XSxcblx0XHRzYXZlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRkZXh0ZXJpdHk6IDgsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRjb25zdGl0dXRpb246IDEzLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0d2lzZG9tOiAxMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczpcblx0XHRcdFwiY29sZDsgYmx1ZGdlb25pbmcsIHBpZXJjaW5nLCBhbmQgc2xhc2hpbmcgZnJvbSBub25tYWdpY2FsIHdlYXBvbnMgdGhhdCBhcmVuJ3Qgc2lsdmVyZWRcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJmaXJlLCBwb2lzb25cIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczogXCJwb2lzb25lZFwiLFxuXHRcdHNlbnNlczogXCJ0cnVlc2lnaHQgMTIwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDE0XCIsXG5cdFx0bGFuZ3VhZ2VzOiBcIkluZmVybmFsLCB0ZWxlcGF0aHkgMTIwIGZ0LlwiLFxuXHRcdGNyOiBcIjIwXCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiRmVhciBBdXJhXCIsXG5cdFx0XHRcdGRlc2M6IFwiQW55IGNyZWF0dXJlIGhvc3RpbGUgdG8gdGhlIHBpdCBmaWVuZCB0aGF0IHN0YXJ0cyBpdHMgdHVybiB3aXRoaW4gMjAgZmVldCBvZiB0aGUgcGl0IGZpZW5kIG11c3QgbWFrZSBhIERDIDIxIFdpc2RvbSBzYXZpbmcgdGhyb3csIHVubGVzcyB0aGUgcGl0IGZpZW5kIGlzIGluY2FwYWNpdGF0ZWQuIE9uIGEgZmFpbGVkIHNhdmUsIHRoZSBjcmVhdHVyZSBpcyBmcmlnaHRlbmVkIHVudGlsIHRoZSBzdGFydCBvZiBpdHMgbmV4dCB0dXJuLiBJZiBhIGNyZWF0dXJlJ3Mgc2F2aW5nIHRocm93IGlzIHN1Y2Nlc3NmdWwsIHRoZSBjcmVhdHVyZSBpcyBpbW11bmUgdG8gdGhlIHBpdCBmaWVuZCdzIEZlYXIgQXVyYSBmb3IgdGhlIG5leHQgMjQgaG91cnMuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTWFnaWMgUmVzaXN0YW5jZVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBwaXQgZmllbmQgaGFzIGFkdmFudGFnZSBvbiBzYXZpbmcgdGhyb3dzIGFnYWluc3Qgc3BlbGxzIGFuZCBvdGhlciBtYWdpY2FsIGVmZmVjdHMuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTWFnaWMgV2VhcG9uc1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBwaXQgZmllbmQncyB3ZWFwb24gYXR0YWNrcyBhcmUgbWFnaWNhbC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJJbm5hdGUgU3BlbGxjYXN0aW5nXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIHBpdCBmaWVuZCdzIHNwZWxsY2FzdGluZyBhYmlsaXR5IGlzIENoYXJpc21hIChzcGVsbCBzYXZlIERDIDIxKS4gVGhlIHBpdCBmaWVuZCBjYW4gaW5uYXRlbHkgY2FzdCB0aGUgZm9sbG93aW5nIHNwZWxscywgcmVxdWlyaW5nIG5vIG1hdGVyaWFsIGNvbXBvbmVudHM6XFxuQXQgd2lsbDogZGV0ZWN0IG1hZ2ljLCBmaXJlYmFsbFxcbjMvZGF5IGVhY2g6IGhvbGQgbW9uc3Rlciwgd2FsbCBvZiBmaXJlXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgcGl0IGZpZW5kIG1ha2VzIGZvdXIgYXR0YWNrczogb25lIHdpdGggaXRzIGJpdGUsIG9uZSB3aXRoIGl0cyBjbGF3LCBvbmUgd2l0aCBpdHMgbWFjZSwgYW5kIG9uZSB3aXRoIGl0cyB0YWlsLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkJpdGVcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMTQgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAyMiAoNGQ2ICsgOCkgcGllcmNpbmcgZGFtYWdlLiBUaGUgdGFyZ2V0IG11c3Qgc3VjY2VlZCBvbiBhIERDIDIxIENvbnN0aXR1dGlvbiBzYXZpbmcgdGhyb3cgb3IgYmVjb21lIHBvaXNvbmVkLiBXaGlsZSBwb2lzb25lZCBpbiB0aGlzIHdheSwgdGhlIHRhcmdldCBjYW4ndCByZWdhaW4gaGl0IHBvaW50cywgYW5kIGl0IHRha2VzIDIxICg2ZDYpIHBvaXNvbiBkYW1hZ2UgYXQgdGhlIHN0YXJ0IG9mIGVhY2ggb2YgaXRzIHR1cm5zLiBUaGUgcG9pc29uZWQgdGFyZ2V0IGNhbiByZXBlYXQgdGhlIHNhdmluZyB0aHJvdyBhdCB0aGUgZW5kIG9mIGVhY2ggb2YgaXRzIHR1cm5zLCBlbmRpbmcgdGhlIGVmZmVjdCBvbiBpdHNlbGYgb24gYSBzdWNjZXNzLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDE0LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCI0ZDZcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiA4LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJDbGF3XCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzE0IHRvIGhpdCwgcmVhY2ggMTAgZnQuICwgb25lIHRhcmdldC4gSGl0OiAxNyAoMmQ4ICsgOCkgc2xhc2hpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDE0LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIyZDhcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiA4LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJNYWNlXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzE0IHRvIGhpdCwgcmVhY2ggMTBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTUgKDJkNiArIDgpIGJsdWRnZW9uaW5nIGRhbWFnZSBwbHVzIDIxICg2ZDYpIGZpcmUgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDE0LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIyZDZcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiA4LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJUYWlsXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzE0IHRvIGhpdCwgcmVhY2ggMTBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMjQgKDNkMU8gKyA4KSBibHVkZ2VvbmluZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMTQsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjNkMTBcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiA4LFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJQbGFuZXRhclwiLFxuXHRcdHNpemU6IFwiTGFyZ2VcIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJjZWxlc3RpYWxcIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJsYXdmdWwgZ29vZFwiLFxuXHRcdGFjOiAxOSxcblx0XHRocDogMjAwLFxuXHRcdGhpdF9kaWNlOiBcIjE2ZDEwXCIsXG5cdFx0c3BlZWQ6IFwiNDAgZnQuLCBmbHkgMTIwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbMjQsIDIwLCAyNCwgMTksIDIyLCAyNV0sXG5cdFx0c2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0Y29uc3RpdHV0aW9uOiAxMixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHdpc2RvbTogMTEsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRjaGFyaXNtYTogMTIsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0c2tpbGxzYXZlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRwZXJjZXB0aW9uOiAxMSxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczpcblx0XHRcdFwicmFkaWFudDsgYmx1ZGdlb25pbmcsIHBpZXJjaW5nLCBhbmQgc2xhc2hpbmcgZnJvbSBub25tYWdpY2FsIHdlYXBvbnNcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczogXCJjaGFybWVkLCBleGhhdXN0aW9uLCBmcmlnaHRlbmVkXCIsXG5cdFx0c2Vuc2VzOiBcInRydWVzaWdodCAxMjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMjFcIixcblx0XHRsYW5ndWFnZXM6IFwiYWxsLCB0ZWxlcGF0aHkgMTIwIGZ0LlwiLFxuXHRcdGNyOiBcIjE2XCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQW5nZWxpYyBXZWFwb25zXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIHBsYW5ldGFyJ3Mgd2VhcG9uIGF0dGFja3MgYXJlIG1hZ2ljYWwuIFdoZW4gdGhlIHBsYW5ldGFyIGhpdHMgd2l0aCBhbnkgd2VhcG9uLCB0aGUgd2VhcG9uIGRlYWxzIGFuIGV4dHJhIDVkOCByYWRpYW50IGRhbWFnZSAoaW5jbHVkZWQgaW4gdGhlIGF0dGFjaykuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiRGl2aW5lIEF3YXJlbmVzc1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBwbGFuZXRhciBrbm93cyBpZiBpdCBoZWFycyBhIGxpZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJJbm5hdGUgU3BlbGxjYXN0aW5nXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIHBsYW5ldGFyJ3Mgc3BlbGxjYXN0aW5nIGFiaWxpdHkgaXMgQ2hhcmlzbWEgKHNwZWxsIHNhdmUgREMgMjApLiBUaGUgcGxhbmV0YXIgY2FuIGlubmF0ZWx5IGNhc3QgdGhlIGZvbGxvd2luZyBzcGVsbHMsIHJlcXVpcmluZyBubyBtYXRlcmlhbCBjb21wb25lbnRzOlxcbkF0IHdpbGw6IGRldGVjdCBldmlsIGFuZCBnb29kLCBpbnZpc2liaWxpdHkgKHNlbGYgb25seSlcXG4zL2RheSBlYWNoOiBibGFkZSBiYXJyaWVyLCBkaXNwZWwgZXZpbCBhbmQgZ29vZCwgZmxhbWUgc3RyaWtlLCByYWlzZSBkZWFkXFxuMS9kYXkgZWFjaDogY29tbXVuZSwgY29udHJvbCB3ZWF0aGVyLCBpbnNlY3QgcGxhZ3VlXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTWFnaWMgUmVzaXN0YW5jZVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBwbGFuZXRhciBoYXMgYWR2YW50YWdlIG9uIHNhdmluZyB0aHJvd3MgYWdhaW5zdCBzcGVsbHMgYW5kIG90aGVyIG1hZ2ljYWwgZWZmZWN0cy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJNdWx0aWF0dGFja1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBwbGFuZXRhciBtYWtlcyB0d28gbWVsZWUgYXR0YWNrcy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJHcmVhdHN3b3JkXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzEyIHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMjEgKDRkNiArIDcpIHNsYXNoaW5nIGRhbWFnZSBwbHVzIDIyICg1ZDgpIHJhZGlhbnQgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDEyLFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCI0ZDYgKyA1ZDhcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiA3LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJIZWFsaW5nIFRvdWNoICg0L0RheSlcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgcGxhbmV0YXIgdG91Y2hlcyBhbm90aGVyIGNyZWF0dXJlLiBUaGUgdGFyZ2V0IG1hZ2ljYWxseSByZWdhaW5zIDMwICg2ZDggKyAzKSBoaXQgcG9pbnRzIGFuZCBpcyBmcmVlZCBmcm9tIGFueSBjdXJzZSwgZGlzZWFzZSwgcG9pc29uLCBibGluZG5lc3MsIG9yIGRlYWZuZXNzLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIlBsZXNpb3NhdXJ1c1wiLFxuXHRcdHNpemU6IFwiTGFyZ2VcIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJiZWFzdFwiLFxuXHRcdHN1YnR5cGU6IFwiXCIsXG5cdFx0YWxpZ25tZW50OiBcInVuYWxpZ25lZFwiLFxuXHRcdGFjOiAxMyxcblx0XHRocDogNjgsXG5cdFx0aGl0X2RpY2U6IFwiOGQxMFwiLFxuXHRcdHNwZWVkOiBcIjIwIGZ0Liwgc3dpbSA0MCBmdC5cIixcblx0XHRzdGF0czogWzE4LCAxNSwgMTYsIDIsIDEyLCA1XSxcblx0XHRza2lsbHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdHBlcmNlcHRpb246IDMsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRzdGVhbHRoOiA0LFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuXHRcdGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuXHRcdHNlbnNlczogXCJwYXNzaXZlIFBlcmNlcHRpb24gMTNcIixcblx0XHRsYW5ndWFnZXM6IFwiXCIsXG5cdFx0Y3I6IFwiMlwiLFxuXHRcdHRyYWl0czogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkhvbGQgQnJlYXRoXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIHBsZXNpb3NhdXJ1cyBjYW4gaG9sZCBpdHMgYnJlYXRoIGZvciAxIGhvdXIuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQml0ZVwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs2IHRvIGhpdCwgcmVhY2ggMTAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDE0ICgzZDYgKyA0KSBwaWVyY2luZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNixcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiM2Q2XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogNCxcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiUG9pc29ub3VzIFNuYWtlXCIsXG5cdFx0c2l6ZTogXCJUaW55XCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwiYmVhc3RcIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcblx0XHRhYzogMTMsXG5cdFx0aHA6IDIsXG5cdFx0aGl0X2RpY2U6IFwiMWQ0XCIsXG5cdFx0c3BlZWQ6IFwiMzAgZnQuLCBzd2ltIDMwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbMiwgMTYsIDExLCAxLCAxMCwgM10sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0c2Vuc2VzOiBcImJsaW5kc2lnaHQgMTAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTBcIixcblx0XHRsYW5ndWFnZXM6IFwiXCIsXG5cdFx0Y3I6IFwiMS84XCIsXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkJpdGVcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNSB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDEgcGllcmNpbmcgZGFtYWdlLCBhbmQgdGhlIHRhcmdldCBtdXN0IG1ha2UgYSBEQyAxMCBDb25zdGl0dXRpb24gc2F2aW5nIHRocm93LCB0YWtpbmcgNSAoMmQ0KSBwb2lzb24gZGFtYWdlIG9uIGEgZmFpbGVkIHNhdmUsIG9yIGhhbGYgYXMgbXVjaCBkYW1hZ2Ugb24gYSBzdWNjZXNzZnVsIG9uZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA1LFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDEsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIlBvbGFyIEJlYXJcIixcblx0XHRzaXplOiBcIkxhcmdlXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwiYmVhc3RcIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcblx0XHRhYzogMTIsXG5cdFx0aHA6IDQyLFxuXHRcdGhpdF9kaWNlOiBcIjVkMTBcIixcblx0XHRzcGVlZDogXCI0MCBmdC4sIHN3aW0gMzAgZnQuXCIsXG5cdFx0c3RhdHM6IFsyMCwgMTAsIDE2LCAyLCAxMywgN10sXG5cdFx0c2tpbGxzYXZlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRwZXJjZXB0aW9uOiAzLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuXHRcdGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuXHRcdHNlbnNlczogXCJwYXNzaXZlIFBlcmNlcHRpb24gMTNcIixcblx0XHRsYW5ndWFnZXM6IFwiXCIsXG5cdFx0Y3I6IFwiMlwiLFxuXHRcdHRyYWl0czogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIktlZW4gU21lbGxcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgYmVhciBoYXMgYWR2YW50YWdlIG9uIFdpc2RvbSAoUGVyY2VwdGlvbikgY2hlY2tzIHRoYXQgcmVseSBvbiBzbWVsbC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJNdWx0aWF0dGFja1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBiZWFyIG1ha2VzIHR3byBhdHRhY2tzOiBvbmUgd2l0aCBpdHMgYml0ZSBhbmQgb25lIHdpdGggaXRzIGNsYXdzLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkJpdGVcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNyB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDkgKDFkOCArIDUpIHBpZXJjaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA3LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxZDhcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiA1LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJDbGF3c1wiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs3IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTIgKDJkNiArIDUpIHNsYXNoaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA3LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIyZDZcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiA1LFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJQb255XCIsXG5cdFx0c2l6ZTogXCJNZWRpdW1cIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJiZWFzdFwiLFxuXHRcdHN1YnR5cGU6IFwiXCIsXG5cdFx0YWxpZ25tZW50OiBcInVuYWxpZ25lZFwiLFxuXHRcdGFjOiAxMCxcblx0XHRocDogMTEsXG5cdFx0aGl0X2RpY2U6IFwiMmQ4XCIsXG5cdFx0c3BlZWQ6IFwiNDAgZnQuXCIsXG5cdFx0c3RhdHM6IFsxNSwgMTAsIDEzLCAyLCAxMSwgN10sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0c2Vuc2VzOiBcInBhc3NpdmUgUGVyY2VwdGlvbiAxMFwiLFxuXHRcdGxhbmd1YWdlczogXCJcIixcblx0XHRjcjogXCIxLzhcIixcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiSG9vdmVzXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzQgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiA3ICgyZDQgKyAyKSBibHVkZ2VvbmluZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNCxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMmQ0XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogMixcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiUHJpZXN0XCIsXG5cdFx0c2l6ZTogXCJNZWRpdW1cIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJodW1hbm9pZFwiLFxuXHRcdHN1YnR5cGU6IFwiYW55IHJhY2VcIixcblx0XHRhbGlnbm1lbnQ6IFwiYW55IGFsaWdubWVudFwiLFxuXHRcdGFjOiAxMyxcblx0XHRocDogMjcsXG5cdFx0aGl0X2RpY2U6IFwiNWQ4XCIsXG5cdFx0c3BlZWQ6IFwiMjUgZnQuXCIsXG5cdFx0c3RhdHM6IFsxMCwgMTAsIDEyLCAxMywgMTYsIDEzXSxcblx0XHRza2lsbHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG1lZGljaW5lOiA3LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0cGVyc3Vhc2lvbjogMyxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHJlbGlnaW9uOiA0LFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuXHRcdGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuXHRcdHNlbnNlczogXCJwYXNzaXZlIFBlcmNlcHRpb24gMTNcIixcblx0XHRsYW5ndWFnZXM6IFwiYW55IHR3byBsYW5ndWFnZXNcIixcblx0XHRjcjogXCIyXCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiRGl2aW5lIEVtaW5lbmNlXCIsXG5cdFx0XHRcdGRlc2M6IFwiQXMgYSBib251cyBhY3Rpb24sIHRoZSBwcmllc3QgY2FuIGV4cGVuZCBhIHNwZWxsIHNsb3QgdG8gY2F1c2UgaXRzIG1lbGVlIHdlYXBvbiBhdHRhY2tzIHRvIG1hZ2ljYWxseSBkZWFsIGFuIGV4dHJhIDEwICgzZDYpIHJhZGlhbnQgZGFtYWdlIHRvIGEgdGFyZ2V0IG9uIGEgaGl0LiBUaGlzIGJlbmVmaXQgbGFzdHMgdW50aWwgdGhlIGVuZCBvZiB0aGUgdHVybi4gSWYgdGhlIHByaWVzdCBleHBlbmRzIGEgc3BlbGwgc2xvdCBvZiAybmQgbGV2ZWwgb3IgaGlnaGVyLCB0aGUgZXh0cmEgZGFtYWdlIGluY3JlYXNlcyBieSAxZDYgZm9yIGVhY2ggbGV2ZWwgYWJvdmUgMXN0LlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjNkNlwiLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJNYWNlXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzIgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAzICgxZDYpIGJsdWRnZW9uaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAyLFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxZDZcIixcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRzcGVsbHM6IFtcblx0XHRcdFwiVGhlIHByaWVzdCBpcyBhIDV0aC1sZXZlbCBzcGVsbGNhc3Rlci4gSXRzIHNwZWxsY2FzdGluZyBhYmlsaXR5IGlzIFdpc2RvbSAoc3BlbGwgc2F2ZSBEQyAxMywgKzUgdG8gaGl0IHdpdGggc3BlbGwgYXR0YWNrcykuIFRoZSBwcmllc3QgaGFzIHRoZSBmb2xsb3dpbmcgY2xlcmljIHNwZWxscyBwcmVwYXJlZDpcIixcblx0XHRcdHtcblx0XHRcdFx0XCJDYW50cmlwcyAoYXQgd2lsbClcIjogXCJsaWdodCwgc2FjcmVkIGZsYW1lLCB0aGF1bWF0dXJneVwiLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0XCIxc3QgbGV2ZWwgKDQgc2xvdHMpXCI6IFwiY3VyZSB3b3VuZHMsIGd1aWRpbmcgYm9sdCwgc2FuY3R1YXJ5XCIsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRcIjJuZCBsZXZlbCAoMyBzbG90cylcIjogXCJsZXNzZXIgcmVzdG9yYXRpb24sIHNwaXJpdHVhbCB3ZWFwb25cIixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdFwiM3JkIGxldmVsICgyIHNsb3RzKVwiOiBcImRpc3BlbCBtYWdpYywgc3Bpcml0IGd1YXJkaWFuc1wiLFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJQc2V1ZG9kcmFnb25cIixcblx0XHRzaXplOiBcIlRpbnlcIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJkcmFnb25cIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJuZXV0cmFsIGdvb2RcIixcblx0XHRhYzogMTMsXG5cdFx0aHA6IDcsXG5cdFx0aGl0X2RpY2U6IFwiMmQ0XCIsXG5cdFx0c3BlZWQ6IFwiMTUgZnQuLCBmbHkgNjAgZnQuXCIsXG5cdFx0c3RhdHM6IFs2LCAxNSwgMTMsIDEwLCAxMiwgMTBdLFxuXHRcdHNraWxsc2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0cGVyY2VwdGlvbjogMyxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHN0ZWFsdGg6IDQsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0c2Vuc2VzOiBcImJsaW5kc2lnaHQgMTAgZnQuLCBkYXJrdmlzaW9uIDYwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDEzXCIsXG5cdFx0bGFuZ3VhZ2VzOiBcInVuZGVyc3RhbmRzIENvbW1vbiBhbmQgRHJhY29uaWMgYnV0IGNhbid0IHNwZWFrXCIsXG5cdFx0Y3I6IFwiMS80XCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiS2VlbiBTZW5zZXNcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgcHNldWRvZHJhZ29uIGhhcyBhZHZhbnRhZ2Ugb24gV2lzZG9tIChQZXJjZXB0aW9uKSBjaGVja3MgdGhhdCByZWx5IG9uIHNpZ2h0LCBoZWFyaW5nLCBvciBzbWVsbC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJNYWdpYyBSZXNpc3RhbmNlXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIHBzZXVkb2RyYWdvbiBoYXMgYWR2YW50YWdlIG9uIHNhdmluZyB0aHJvd3MgYWdhaW5zdCBzcGVsbHMgYW5kIG90aGVyIG1hZ2ljYWwgZWZmZWN0cy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJMaW1pdGVkIFRlbGVwYXRoeVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBwc2V1ZG9kcmFnb24gY2FuIG1hZ2ljYWxseSBjb21tdW5pY2F0ZSBzaW1wbGUgaWRlYXMsIGVtb3Rpb25zLCBhbmQgaW1hZ2VzIHRlbGVwYXRoaWNhbGx5IHdpdGggYW55IGNyZWF0dXJlIHdpdGhpbiAxMDAgZnQuIG9mIGl0IHRoYXQgY2FuIHVuZGVyc3RhbmQgYSBsYW5ndWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJWYXJpYW50OiBGYW1pbGlhclwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBwc2V1ZG9kcmFnb24gY2FuIHNlcnZlIGFub3RoZXIgY3JlYXR1cmUgYXMgYSBmYW1pbGlhciwgZm9ybWluZyBhIG1hZ2ljLCB0ZWxlcGF0aGljIGJvbmQgd2l0aCB0aGF0IHdpbGxpbmcgY29tcGFuaW9uLiBXaGlsZSB0aGUgdHdvIGFyZSBib25kZWQsIHRoZSBjb21wYW5pb24gY2FuIHNlbnNlIHdoYXQgdGhlIHBzZXVkb2RyYWdvbiBzZW5zZXMgYXMgbG9uZyBhcyB0aGV5IGFyZSB3aXRoaW4gMSBtaWxlIG9mIGVhY2ggb3RoZXIuIFdoaWxlIHRoZSBwc2V1ZG9kcmFnb24gaXMgd2l0aGluIDEwIGZlZXQgb2YgaXRzIGNvbXBhbmlvbiwgdGhlIGNvbXBhbmlvbiBzaGFyZXMgdGhlIHBzZXVkb2RyYWdvbidzIE1hZ2ljIFJlc2lzdGFuY2UgdHJhaXQuIEF0IGFueSB0aW1lIGFuZCBmb3IgYW55IHJlYXNvbiwgdGhlIHBzZXVkb2RyYWdvbiBjYW4gZW5kIGl0cyBzZXJ2aWNlIGFzIGEgZmFtaWxpYXIsIGVuZGluZyB0aGUgdGVsZXBhdGhpYyBib25kLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkJpdGVcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNCB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDQgKDFkNCArIDIpIHBpZXJjaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA0LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxZDRcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiAyLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJTdGluZ1wiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs0IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSBjcmVhdHVyZS4gSGl0OiA0ICgxZDQgKyAyKSBwaWVyY2luZyBkYW1hZ2UsIGFuZCB0aGUgdGFyZ2V0IG11c3Qgc3VjY2VlZCBvbiBhIERDIDExIENvbnN0aXR1dGlvbiBzYXZpbmcgdGhyb3cgb3IgYmVjb21lIHBvaXNvbmVkIGZvciAxIGhvdXIuIElmIHRoZSBzYXZpbmcgdGhyb3cgZmFpbHMgYnkgNSBvciBtb3JlLCB0aGUgdGFyZ2V0IGZhbGxzIHVuY29uc2Npb3VzIGZvciB0aGUgc2FtZSBkdXJhdGlvbiwgb3IgdW50aWwgaXQgdGFrZXMgZGFtYWdlIG9yIGFub3RoZXIgY3JlYXR1cmUgdXNlcyBhbiBhY3Rpb24gdG8gc2hha2UgaXQgYXdha2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNCxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMWQ0XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogMixcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiUHVycGxlIFdvcm1cIixcblx0XHRzaXplOiBcIkdhcmdhbnR1YW5cIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJtb25zdHJvc2l0eVwiLFxuXHRcdHN1YnR5cGU6IFwiXCIsXG5cdFx0YWxpZ25tZW50OiBcInVuYWxpZ25lZFwiLFxuXHRcdGFjOiAxOCxcblx0XHRocDogMjQ3LFxuXHRcdGhpdF9kaWNlOiBcIjE1ZDIwXCIsXG5cdFx0c3BlZWQ6IFwiNTAgZnQuLCBidXJyb3cgMzAgZnQuXCIsXG5cdFx0c3RhdHM6IFsyOCwgNywgMjIsIDEsIDgsIDRdLFxuXHRcdHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdGNvbnN0aXR1dGlvbjogMTEsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHR3aXNkb206IDQsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0c2Vuc2VzOiBcImJsaW5kc2lnaHQgMzAgZnQuLCB0cmVtb3JzZW5zZSA2MCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiA5XCIsXG5cdFx0bGFuZ3VhZ2VzOiBcIlwiLFxuXHRcdGNyOiBcIjE1XCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiVHVubmVsZXJcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgd29ybSBjYW4gYnVycm93IHRocm91Z2ggc29saWQgcm9jayBhdCBoYWxmIGl0cyBidXJyb3cgc3BlZWQgYW5kIGxlYXZlcyBhIDEwLWZvb3QtZGlhbWV0ZXIgdHVubmVsIGluIGl0cyB3YWtlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIHdvcm0gbWFrZXMgdHdvIGF0dGFja3M6IG9uZSB3aXRoIGl0cyBiaXRlIGFuZCBvbmUgd2l0aCBpdHMgc3Rpbmdlci5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJCaXRlXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzkgdG8gaGl0LCByZWFjaCAxMCBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMjIgKDNkOCArIDkpIHBpZXJjaW5nIGRhbWFnZS4gSWYgdGhlIHRhcmdldCBpcyBhIExhcmdlIG9yIHNtYWxsZXIgY3JlYXR1cmUsIGl0IG11c3Qgc3VjY2VlZCBvbiBhIERDIDE5IERleHRlcml0eSBzYXZpbmcgdGhyb3cgb3IgYmUgc3dhbGxvd2VkIGJ5IHRoZSB3b3JtLiBBIHN3YWxsb3dlZCBjcmVhdHVyZSBpcyBibGluZGVkIGFuZCByZXN0cmFpbmVkLCBpdCBoYXMgdG90YWwgY292ZXIgYWdhaW5zdCBhdHRhY2tzIGFuZCBvdGhlciBlZmZlY3RzIG91dHNpZGUgdGhlIHdvcm0sIGFuZCBpdCB0YWtlcyAyMSAoNmQ2KSBhY2lkIGRhbWFnZSBhdCB0aGUgc3RhcnQgb2YgZWFjaCBvZiB0aGUgd29ybSdzIHR1cm5zLlxcbklmIHRoZSB3b3JtIHRha2VzIDMwIGRhbWFnZSBvciBtb3JlIG9uIGEgc2luZ2xlIHR1cm4gZnJvbSBhIGNyZWF0dXJlIGluc2lkZSBpdCwgdGhlIHdvcm0gbXVzdCBzdWNjZWVkIG9uIGEgREMgMjEgQ29uc3RpdHV0aW9uIHNhdmluZyB0aHJvdyBhdCB0aGUgZW5kIG9mIHRoYXQgdHVybiBvciByZWd1cmdpdGF0ZSBhbGwgc3dhbGxvd2VkIGNyZWF0dXJlcywgd2hpY2ggZmFsbCBwcm9uZSBpbiBhIHNwYWNlIHdpdGhpbiAxMCBmZWV0IG9mIHRoZSB3b3JtLiBJZiB0aGUgd29ybSBkaWVzLCBhIHN3YWxsb3dlZCBjcmVhdHVyZSBpcyBubyBsb25nZXIgcmVzdHJhaW5lZCBieSBpdCBhbmQgY2FuIGVzY2FwZSBmcm9tIHRoZSBjb3Jwc2UgYnkgdXNpbmcgMjAgZmVldCBvZiBtb3ZlbWVudCwgZXhpdGluZyBwcm9uZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA5LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIzZDhcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiA5LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJUYWlsIFN0aW5nZXJcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArOSB0byBoaXQsIHJlYWNoIDEwIGZ0Liwgb25lIGNyZWF0dXJlLiBIaXQ6IDE5ICgzZDYgKyA5KSBwaWVyY2luZyBkYW1hZ2UsIGFuZCB0aGUgdGFyZ2V0IG11c3QgbWFrZSBhIERDIDE5IENvbnN0aXR1dGlvbiBzYXZpbmcgdGhyb3csIHRha2luZyA0MiAoMTJkNikgcG9pc29uIGRhbWFnZSBvbiBhIGZhaWxlZCBzYXZlLCBvciBoYWxmIGFzIG11Y2ggZGFtYWdlIG9uIGEgc3VjY2Vzc2Z1bCBvbmUuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogOSxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiM2Q2XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogOSxcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiUXVhc2l0XCIsXG5cdFx0c2l6ZTogXCJUaW55XCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwiZmllbmRcIixcblx0XHRzdWJ0eXBlOiBcImRlbW9uXCIsXG5cdFx0YWxpZ25tZW50OiBcImNoYW90aWMgZXZpbFwiLFxuXHRcdGFjOiAxMyxcblx0XHRocDogNyxcblx0XHRoaXRfZGljZTogXCIzZDRcIixcblx0XHRzcGVlZDogXCI0MCBmdC5cIixcblx0XHRzdGF0czogWzUsIDE3LCAxMCwgNywgMTAsIDEwXSxcblx0XHRza2lsbHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdHN0ZWFsdGg6IDUsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6XG5cdFx0XHRcImNvbGQ7IGZpcmU7IGxpZ2h0bmluZzsgYmx1ZGdlb25pbmcsIHBpZXJjaW5nLCBhbmQgc2xhc2hpbmcgZnJvbSBub25tYWdpY2FsIHdlYXBvbnNcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJwb2lzb25cIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczogXCJwb2lzb25lZFwiLFxuXHRcdHNlbnNlczogXCJkYXJrdmlzaW9uIDEyMCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxMFwiLFxuXHRcdGxhbmd1YWdlczogXCJBYnlzc2FsLCBDb21tb25cIixcblx0XHRjcjogXCIxXCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiU2hhcGVjaGFuZ2VyXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIHF1YXNpdCBjYW4gdXNlIGl0cyBhY3Rpb24gdG8gcG9seW1vcnBoIGludG8gYSBiZWFzdCBmb3JtIHRoYXQgcmVzZW1ibGVzIGEgYmF0IChzcGVlZCAxMCBmdC4gZmx5IDQwIGZ0LiksIGEgY2VudGlwZWRlICg0MCBmdC4sIGNsaW1iIDQwIGZ0LiksIG9yIGEgdG9hZCAoNDAgZnQuLCBzd2ltIDQwIGZ0LiksIG9yIGJhY2sgaW50byBpdHMgdHJ1ZSBmb3JtIC4gSXRzIHN0YXRpc3RpY3MgYXJlIHRoZSBzYW1lIGluIGVhY2ggZm9ybSwgZXhjZXB0IGZvciB0aGUgc3BlZWQgY2hhbmdlcyBub3RlZC4gQW55IGVxdWlwbWVudCBpdCBpcyB3ZWFyaW5nIG9yIGNhcnJ5aW5nIGlzbid0IHRyYW5zZm9ybWVkIC4gSXQgcmV2ZXJ0cyB0byBpdHMgdHJ1ZSBmb3JtIGlmIGl0IGRpZXMuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTWFnaWMgUmVzaXN0YW5jZVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBxdWFzaXQgaGFzIGFkdmFudGFnZSBvbiBzYXZpbmcgdGhyb3dzIGFnYWluc3Qgc3BlbGxzIGFuZCBvdGhlciBtYWdpY2FsIGVmZmVjdHMuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiVmFyaWFudDogRmFtaWxpYXJcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgcXVhc2l0IGNhbiBzZXJ2ZSBhbm90aGVyIGNyZWF0dXJlIGFzIGEgZmFtaWxpYXIsIGZvcm1pbmcgYSB0ZWxlcGF0aGljIGJvbmQgd2l0aCBpdHMgd2lsbGluZyBtYXN0ZXIuIFdoaWxlIHRoZSB0d28gYXJlIGJvbmRlZCwgdGhlIG1hc3RlciBjYW4gc2Vuc2Ugd2hhdCB0aGUgcXVhc2l0IHNlbnNlcyBhcyBsb25nIGFzIHRoZXkgYXJlIHdpdGhpbiAxIG1pbGUgb2YgZWFjaCBvdGhlci4gV2hpbGUgdGhlIHF1YXNpdCBpcyB3aXRoaW4gMTAgZmVldCBvZiBpdHMgbWFzdGVyLCB0aGUgbWFzdGVyIHNoYXJlcyB0aGUgcXVhc2l0J3MgTWFnaWMgUmVzaXN0YW5jZSB0cmFpdC4gQXQgYW55IHRpbWUgYW5kIGZvciBhbnkgcmVhc29uLCB0aGUgcXVhc2l0IGNhbiBlbmQgaXRzIHNlcnZpY2UgYXMgYSBmYW1pbGlhciwgZW5kaW5nIHRoZSB0ZWxlcGF0aGljIGJvbmQuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQ2xhdyAoQml0ZSBpbiBCZWFzdCBGb3JtKVwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs0IHRvIGhpdCwgcmVhY2ggNSBmdCAuLCBvbmUgdGFyZ2V0LiBIaXQ6IDUgKDFkNCArIDMpIHBpZXJjaW5nIGRhbWFnZSwgYW5kIHRoZSB0YXJnZXQgbXVzdCBzdWNjZWVkIG9uIGEgREMgMTAgQ29uc3RpdHV0aW9uIHNhdmluZyB0aHJvdyBvciB0YWtlIDUgKDJkNCkgcG9pc29uIGRhbWFnZSBhbmQgYmVjb21lIHBvaXNvbmVkIGZvciAxIG1pbnV0ZS4gVGhlIHRhcmdldCBjYW4gcmVwZWF0IHRoZSBzYXZpbmcgdGhyb3cgYXQgdGhlIGVuZCBvZiBlYWNoIG9mIGl0cyB0dXJucywgZW5kaW5nIHRoZSBlZmZlY3Qgb24gaXRzZWxmIG9uIGEgc3VjY2Vzcy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA0LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxZDRcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiAzLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJTY2FyZSAoMS9kYXkpXCIsXG5cdFx0XHRcdGRlc2M6IFwiT25lIGNyZWF0dXJlIG9mIHRoZSBxdWFzaXQncyBjaG9pY2Ugd2l0aGluIDIwIGZ0LiBvZiBpdCBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxMCBXaXNkb20gc2F2aW5nIHRocm93IG9yIGJlIGZyaWdodGVuZWQgZm9yIDEgbWludXRlLiBUaGUgdGFyZ2V0IGNhbiByZXBlYXQgdGhlIHNhdmluZyB0aHJvdyBhdCB0aGUgZW5kIG9mIGVhY2ggb2YgaXRzIHR1cm5zLCB3aXRoIGRpc2FkdmFudGFnZSBpZiB0aGUgcXVhc2l0IGlzIHdpdGhpbiBsaW5lIG9mIHNpZ2h0LCBlbmRpbmcgdGhlIGVmZmVjdCBvbiBpdHNlbGYgb24gYSBzdWNjZXNzLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkludmlzaWJpbGl0eVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBxdWFzaXQgbWFnaWNhbGx5IHR1cm5zIGludmlzaWJsZSB1bnRpbCBpdCBhdHRhY2tzIG9yIHVzZXMgU2NhcmUsIG9yIHVudGlsIGl0cyBjb25jZW50cmF0aW9uIGVuZHMgKGFzIGlmIGNvbmNlbnRyYXRpbmcgb24gYSBzcGVsbCkuIEFueSBlcXVpcG1lbnQgdGhlIHF1YXNpdCB3ZWFycyBvciBjYXJyaWVzIGlzIGludmlzaWJsZSB3aXRoIGl0LlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIlF1aXBwZXJcIixcblx0XHRzaXplOiBcIlRpbnlcIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJiZWFzdFwiLFxuXHRcdHN1YnR5cGU6IFwiXCIsXG5cdFx0YWxpZ25tZW50OiBcInVuYWxpZ25lZFwiLFxuXHRcdGFjOiAxMyxcblx0XHRocDogMSxcblx0XHRoaXRfZGljZTogXCIxZDRcIixcblx0XHRzcGVlZDogXCJzd2ltIDQwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbMiwgMTYsIDksIDEsIDcsIDJdLFxuXHRcdGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuXHRcdGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuXHRcdHNlbnNlczogXCJkYXJrdmlzaW9uIDYwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDhcIixcblx0XHRsYW5ndWFnZXM6IFwiXCIsXG5cdFx0Y3I6IFwiMFwiLFxuXHRcdHRyYWl0czogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkJsb29kIEZyZW56eVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBxdWlwcGVyIGhhcyBhZHZhbnRhZ2Ugb24gbWVsZWUgYXR0YWNrIHJvbGxzIGFnYWluc3QgYW55IGNyZWF0dXJlIHRoYXQgZG9lc24ndCBoYXZlIGFsbCBpdHMgaGl0IHBvaW50cy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJXYXRlciBCcmVhdGhpbmdcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgcXVpcHBlciBjYW4gYnJlYXRoZSBvbmx5IHVuZGVyd2F0ZXIuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQml0ZVwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs1IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMSBwaWVyY2luZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNSxcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiAxLFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJSYWtzaGFzYVwiLFxuXHRcdHNpemU6IFwiTWVkaXVtXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwiZmllbmRcIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJsYXdmdWwgZXZpbFwiLFxuXHRcdGFjOiAxNixcblx0XHRocDogMTEwLFxuXHRcdGhpdF9kaWNlOiBcIjEzZDhcIixcblx0XHRzcGVlZDogXCI0MCBmdC5cIixcblx0XHRzdGF0czogWzE0LCAxNywgMTgsIDEzLCAxNiwgMjBdLFxuXHRcdHNraWxsc2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0ZGVjZXB0aW9uOiAxMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdGluc2lnaHQ6IDgsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczpcblx0XHRcdFwicGllcmNpbmcgZnJvbSBtYWdpYyB3ZWFwb25zIHdpZWxkZWQgYnkgZ29vZCBjcmVhdHVyZXNcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6XG5cdFx0XHRcImJsdWRnZW9uaW5nLCBwaWVyY2luZywgYW5kIHNsYXNoaW5nIGZyb20gbm9ubWFnaWNhbCB3ZWFwb25zXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0c2Vuc2VzOiBcImRhcmt2aXNpb24gNjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTNcIixcblx0XHRsYW5ndWFnZXM6IFwiQ29tbW9uLCBJbmZlcm5hbFwiLFxuXHRcdGNyOiBcIjEzXCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTGltaXRlZCBNYWdpYyBJbW11bml0eVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSByYWtzaGFzYSBjYW4ndCBiZSBhZmZlY3RlZCBvciBkZXRlY3RlZCBieSBzcGVsbHMgb2YgNnRoIGxldmVsIG9yIGxvd2VyIHVubGVzcyBpdCB3aXNoZXMgdG8gYmUuIEl0IGhhcyBhZHZhbnRhZ2Ugb24gc2F2aW5nIHRocm93cyBhZ2FpbnN0IGFsbCBvdGhlciBzcGVsbHMgYW5kIG1hZ2ljYWwgZWZmZWN0cy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJJbm5hdGUgU3BlbGxjYXN0aW5nXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIHJha3NoYXNhJ3MgaW5uYXRlIHNwZWxsY2FzdGluZyBhYmlsaXR5IGlzIENoYXJpc21hIChzcGVsbCBzYXZlIERDIDE4LCArMTAgdG8gaGl0IHdpdGggc3BlbGwgYXR0YWNrcykuIFRoZSByYWtzaGFzYSBjYW4gaW5uYXRlbHkgY2FzdCB0aGUgZm9sbG93aW5nIHNwZWxscywgcmVxdWlyaW5nIG5vIG1hdGVyaWFsIGNvbXBvbmVudHM6XFxuXFxuQXQgd2lsbDogZGV0ZWN0IHRob3VnaHRzLCBkaXNndWlzZSBzZWxmLCBtYWdlIGhhbmQsIG1pbm9yIGlsbHVzaW9uXFxuMy9kYXkgZWFjaDogY2hhcm0gcGVyc29uLCBkZXRlY3QgbWFnaWMsIGludmlzaWJpbGl0eSwgbWFqb3IgaW1hZ2UsIHN1Z2dlc3Rpb25cXG4xL2RheSBlYWNoOiBkb21pbmF0ZSBwZXJzb24sIGZseSwgcGxhbmUgc2hpZnQsIHRydWUgc2VlaW5nXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgcmFrc2hhc2EgbWFrZXMgdHdvIGNsYXcgYXR0YWNrc1wiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkNsYXdcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNyB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDkgKDJkNiArIDIpIHNsYXNoaW5nIGRhbWFnZSwgYW5kIHRoZSB0YXJnZXQgaXMgY3Vyc2VkIGlmIGl0IGlzIGEgY3JlYXR1cmUuIFRoZSBtYWdpY2FsIGN1cnNlIHRha2VzIGVmZmVjdCB3aGVuZXZlciB0aGUgdGFyZ2V0IHRha2VzIGEgc2hvcnQgb3IgbG9uZyByZXN0LCBmaWxsaW5nIHRoZSB0YXJnZXQncyB0aG91Z2h0cyB3aXRoIGhvcnJpYmxlIGltYWdlcyBhbmQgZHJlYW1zLiBUaGUgY3Vyc2VkIHRhcmdldCBnYWlucyBubyBiZW5lZml0IGZyb20gZmluaXNoaW5nIGEgc2hvcnQgb3IgbG9uZyByZXN0LiBUaGUgY3Vyc2UgbGFzdHMgdW50aWwgaXQgaXMgbGlmdGVkIGJ5IGEgcmVtb3ZlIGN1cnNlIHNwZWxsIG9yIHNpbWlsYXIgbWFnaWMuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNyxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMmQ2XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogMixcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiUmF0XCIsXG5cdFx0c2l6ZTogXCJUaW55XCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwiYmVhc3RcIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcblx0XHRhYzogMTAsXG5cdFx0aHA6IDEsXG5cdFx0aGl0X2RpY2U6IFwiMWQ0XCIsXG5cdFx0c3BlZWQ6IFwiMjAgZnQuXCIsXG5cdFx0c3RhdHM6IFsyLCAxMSwgOSwgMiwgMTAsIDRdLFxuXHRcdGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuXHRcdGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuXHRcdHNlbnNlczogXCJkYXJrdmlzaW9uIDMwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDEwXCIsXG5cdFx0bGFuZ3VhZ2VzOiBcIlwiLFxuXHRcdGNyOiBcIjBcIixcblx0XHR0cmFpdHM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJLZWVuIFNtZWxsXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIHJhdCBoYXMgYWR2YW50YWdlIG9uIFdpc2RvbSAoUGVyY2VwdGlvbikgY2hlY2tzIHRoYXQgcmVseSBvbiBzbWVsbC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJCaXRlXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzAgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxIHBpZXJjaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDEsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIlJhdmVuXCIsXG5cdFx0c2l6ZTogXCJUaW55XCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwiYmVhc3RcIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcblx0XHRhYzogMTIsXG5cdFx0aHA6IDEsXG5cdFx0aGl0X2RpY2U6IFwiMWQ0XCIsXG5cdFx0c3BlZWQ6IFwiMTAgZnQuLCBmbHkgNTAgZnQuXCIsXG5cdFx0c3RhdHM6IFsyLCAxNCwgOCwgMiwgMTIsIDZdLFxuXHRcdHNraWxsc2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0cGVyY2VwdGlvbjogMyxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcblx0XHRzZW5zZXM6IFwicGFzc2l2ZSBQZXJjZXB0aW9uIDEzXCIsXG5cdFx0bGFuZ3VhZ2VzOiBcIlwiLFxuXHRcdGNyOiBcIjBcIixcblx0XHR0cmFpdHM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJNaW1pY3J5XCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIHJhdmVuIGNhbiBtaW1pYyBzaW1wbGUgc291bmRzIGl0IGhhcyBoZWFyZCwgc3VjaCBhcyBhIHBlcnNvbiB3aGlzcGVyaW5nLCBhIGJhYnkgY3J5aW5nLCBvciBhbiBhbmltYWwgY2hpdHRlcmluZy4gQSBjcmVhdHVyZSB0aGF0IGhlYXJzIHRoZSBzb3VuZHMgY2FuIHRlbGwgdGhleSBhcmUgaW1pdGF0aW9ucyB3aXRoIGEgc3VjY2Vzc2Z1bCBEQyAxMCBXaXNkb20gKEluc2lnaHQpIGNoZWNrLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkJlYWtcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNCB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDEgcGllcmNpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIlJlZCBEcmFnb24gV3lybWxpbmdcIixcblx0XHRzaXplOiBcIk1lZGl1bVwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcImRyYWdvblwiLFxuXHRcdHN1YnR5cGU6IFwiXCIsXG5cdFx0YWxpZ25tZW50OiBcImNoYW90aWMgZXZpbFwiLFxuXHRcdGFjOiAxNyxcblx0XHRocDogNzUsXG5cdFx0aGl0X2RpY2U6IFwiMTBkOFwiLFxuXHRcdHNwZWVkOiBcIjMwIGZ0LiwgY2xpbWIgMzAgZnQuLCBmbHkgNjAgZnQuXCIsXG5cdFx0c3RhdHM6IFsxOSwgMTAsIDE3LCAxMiwgMTEsIDE1XSxcblx0XHRzYXZlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRkZXh0ZXJpdHk6IDIsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRjb25zdGl0dXRpb246IDUsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHR3aXNkb206IDIsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRjaGFyaXNtYTogNCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRza2lsbHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdHBlcmNlcHRpb246IDQsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRzdGVhbHRoOiAyLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuXHRcdGRhbWFnZV9pbW11bml0aWVzOiBcImZpcmVcIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcblx0XHRzZW5zZXM6IFwiYmxpbmRzaWdodCAxMCBmdC4sIGRhcmt2aXNpb24gNjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTRcIixcblx0XHRsYW5ndWFnZXM6IFwiRHJhY29uaWNcIixcblx0XHRjcjogXCI0XCIsXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkJpdGVcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNiB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDkgKDFkMTAgKyA0KSBwaWVyY2luZyBkYW1hZ2UgcGx1cyAzICgxZDYpIGZpcmUgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDYsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjFkMTAgKyAxZDZcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiA0LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJGaXJlIEJyZWF0aCAoUmVjaGFyZ2UgNS02KVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBkcmFnb24gZXhoYWxlcyBmaXJlIGluIGEgMTUtZm9vdCBjb25lLiBFYWNoIGNyZWF0dXJlIGluIHRoYXQgYXJlYSBtdXN0IG1ha2UgYSBEQyAxMyBEZXh0ZXJpdHkgc2F2aW5nIHRocm93LCB0YWtpbmcgMjQgKDdkNikgZmlyZSBkYW1hZ2Ugb24gYSBmYWlsZWQgc2F2ZSwgb3IgaGFsZiBhcyBtdWNoIGRhbWFnZSBvbiBhIHN1Y2Nlc3NmdWwgb25lLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjdkNlwiLFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJSZWVmIFNoYXJrXCIsXG5cdFx0c2l6ZTogXCJNZWRpdW1cIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJiZWFzdFwiLFxuXHRcdHN1YnR5cGU6IFwiXCIsXG5cdFx0YWxpZ25tZW50OiBcInVuYWxpZ25lZFwiLFxuXHRcdGFjOiAxMixcblx0XHRocDogMjIsXG5cdFx0aGl0X2RpY2U6IFwiNGQ4XCIsXG5cdFx0c3BlZWQ6IFwic3dpbSA0MCBmdC5cIixcblx0XHRzdGF0czogWzE0LCAxMywgMTMsIDEsIDEwLCA0XSxcblx0XHRza2lsbHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdHBlcmNlcHRpb246IDIsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0c2Vuc2VzOiBcImJsaW5kc2lnaHQgMzAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTJcIixcblx0XHRsYW5ndWFnZXM6IFwiXCIsXG5cdFx0Y3I6IFwiMS8yXCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiUGFjayBUYWN0aWNzXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIHNoYXJrIGhhcyBhZHZhbnRhZ2Ugb24gYW4gYXR0YWNrIHJvbGwgYWdhaW5zdCBhIGNyZWF0dXJlIGlmIGF0IGxlYXN0IG9uZSBvZiB0aGUgc2hhcmsncyBhbGxpZXMgaXMgd2l0aGluIDUgZnQuIG9mIHRoZSBjcmVhdHVyZSBhbmQgdGhlIGFsbHkgaXNuJ3QgaW5jYXBhY2l0YXRlZC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJXYXRlciBCcmVhdGhpbmdcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgc2hhcmsgY2FuIGJyZWF0aGUgb25seSB1bmRlcndhdGVyLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkJpdGVcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNCB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDYgKDFkOCArIDIpIHBpZXJjaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA0LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxZDhcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiAyLFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJSZW1vcmhhelwiLFxuXHRcdHNpemU6IFwiSHVnZVwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcIm1vbnN0cm9zaXR5XCIsXG5cdFx0c3VidHlwZTogXCJcIixcblx0XHRhbGlnbm1lbnQ6IFwidW5hbGlnbmVkXCIsXG5cdFx0YWM6IDE3LFxuXHRcdGhwOiAxOTUsXG5cdFx0aGl0X2RpY2U6IFwiMTdkMTJcIixcblx0XHRzcGVlZDogXCIzMCBmdC4sIGJ1cnJvdyAyMCBmdC5cIixcblx0XHRzdGF0czogWzI0LCAxMywgMjEsIDQsIDEwLCA1XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJjb2xkLCBmaXJlXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0c2Vuc2VzOiBcImRhcmt2aXNpb24gNjAgZnQuLCB0cmVtb3JzZW5zZSA2MCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxMFwiLFxuXHRcdGxhbmd1YWdlczogXCJcIixcblx0XHRjcjogXCIxMVwiLFxuXHRcdHRyYWl0czogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkhlYXRlZCBCb2R5XCIsXG5cdFx0XHRcdGRlc2M6IFwiQSBjcmVhdHVyZSB0aGF0IHRvdWNoZXMgdGhlIHJlbW9yaGF6IG9yIGhpdHMgaXQgd2l0aCBhIG1lbGVlIGF0dGFjayB3aGlsZSB3aXRoaW4gNSBmZWV0IG9mIGl0IHRha2VzIDEwICgzZDYpIGZpcmUgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjNkNlwiLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJCaXRlXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzExIHRvIGhpdCwgcmVhY2ggMTAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDQwICg2ZDEwICsgNykgcGllcmNpbmcgZGFtYWdlIHBsdXMgMTAgKDNkNikgZmlyZSBkYW1hZ2UuIElmIHRoZSB0YXJnZXQgaXMgYSBjcmVhdHVyZSwgaXQgaXMgZ3JhcHBsZWQgKGVzY2FwZSBEQyAxNykuIFVudGlsIHRoaXMgZ3JhcHBsZSBlbmRzLCB0aGUgdGFyZ2V0IGlzIHJlc3RyYWluZWQsIGFuZCB0aGUgcmVtb3JoYXogY2FuJ3QgYml0ZSBhbm90aGVyIHRhcmdldC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAxMSxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiNmQxMCArIDNkNlwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDcsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlN3YWxsb3dcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgcmVtb3JoYXogbWFrZXMgb25lIGJpdGUgYXR0YWNrIGFnYWluc3QgYSBNZWRpdW0gb3Igc21hbGxlciBjcmVhdHVyZSBpdCBpcyBncmFwcGxpbmcuIElmIHRoZSBhdHRhY2sgaGl0cywgdGhhdCBjcmVhdHVyZSB0YWtlcyB0aGUgYml0ZSdzIGRhbWFnZSBhbmQgaXMgc3dhbGxvd2VkLCBhbmQgdGhlIGdyYXBwbGUgZW5kcy4gV2hpbGUgc3dhbGxvd2VkLCB0aGUgY3JlYXR1cmUgaXMgYmxpbmRlZCBhbmQgcmVzdHJhaW5lZCwgaXQgaGFzIHRvdGFsIGNvdmVyIGFnYWluc3QgYXR0YWNrcyBhbmQgb3RoZXIgZWZmZWN0cyBvdXRzaWRlIHRoZSByZW1vcmhheiwgYW5kIGl0IHRha2VzIDIxICg2ZDYpIGFjaWQgZGFtYWdlIGF0IHRoZSBzdGFydCBvZiBlYWNoIG9mIHRoZSByZW1vcmhheidzIHR1cm5zLlxcbklmIHRoZSByZW1vcmhheiB0YWtlcyAzMCBkYW1hZ2Ugb3IgbW9yZSBvbiBhIHNpbmdsZSB0dXJuIGZyb20gYSBjcmVhdHVyZSBpbnNpZGUgaXQsIHRoZSByZW1vcmhheiBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxNSBDb25zdGl0dXRpb24gc2F2aW5nIHRocm93IGF0IHRoZSBlbmQgb2YgdGhhdCB0dXJuIG9yIHJlZ3VyZ2l0YXRlIGFsbCBzd2FsbG93ZWQgY3JlYXR1cmVzLCB3aGljaCBmYWxsIHByb25lIGluIGEgc3BhY2Ugd2l0aGluIDEwIGZlZXQgb2Z0IGhlIHJlbW9yaGF6LiBJZiB0aGUgcmVtb3JoYXogZGllcywgYSBzd2FsbG93ZWQgY3JlYXR1cmUgaXMgbm8gbG9uZ2VyIHJlc3RyYWluZWQgYnkgaXQgYW5kIGNhbiBlc2NhcGUgZnJvbSB0aGUgY29ycHNlIHVzaW5nIDE1IGZlZXQgb2YgbW92ZW1lbnQsIGV4aXRpbmcgcHJvbmUuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiUmhpbm9jZXJvc1wiLFxuXHRcdHNpemU6IFwiTGFyZ2VcIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJiZWFzdFwiLFxuXHRcdHN1YnR5cGU6IFwiXCIsXG5cdFx0YWxpZ25tZW50OiBcInVuYWxpZ25lZFwiLFxuXHRcdGFjOiAxMSxcblx0XHRocDogNDUsXG5cdFx0aGl0X2RpY2U6IFwiNmQxMFwiLFxuXHRcdHNwZWVkOiBcIjQwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbMjEsIDgsIDE1LCAyLCAxMiwgNl0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0c2Vuc2VzOiBcInBhc3NpdmUgUGVyY2VwdGlvbiAxMVwiLFxuXHRcdGxhbmd1YWdlczogXCJcIixcblx0XHRjcjogXCIyXCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQ2hhcmdlXCIsXG5cdFx0XHRcdGRlc2M6IFwiSWYgdGhlIHJoaW5vY2Vyb3MgbW92ZXMgYXQgbGVhc3QgMjAgZnQuIHN0cmFpZ2h0IHRvd2FyZCBhIHRhcmdldCBhbmQgdGhlbiBoaXRzIGl0IHdpdGggYSBnb3JlIGF0dGFjayBvbiB0aGUgc2FtZSB0dXJuLCB0aGUgdGFyZ2V0IHRha2VzIGFuIGV4dHJhIDkgKDJkOCkgYmx1ZGdlb25pbmcgZGFtYWdlLiBJZiB0aGUgdGFyZ2V0IGlzIGEgY3JlYXR1cmUsIGl0IG11c3Qgc3VjY2VlZCBvbiBhIERDIDE1IFN0cmVuZ3RoIHNhdmluZyB0aHJvdyBvciBiZSBrbm9ja2VkIHByb25lLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjJkOFwiLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJHb3JlXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzcgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxNCAoMmQ4ICsgNSkgYmx1ZGdlb25pbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDcsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjJkOFwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDUsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIlJpZGluZyBIb3JzZVwiLFxuXHRcdHNpemU6IFwiTGFyZ2VcIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJiZWFzdFwiLFxuXHRcdHN1YnR5cGU6IFwiXCIsXG5cdFx0YWxpZ25tZW50OiBcInVuYWxpZ25lZFwiLFxuXHRcdGFjOiAxMCxcblx0XHRocDogMTMsXG5cdFx0aGl0X2RpY2U6IFwiMmQxMFwiLFxuXHRcdHNwZWVkOiBcIjYwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbMTYsIDEwLCAxMiwgMiwgMTEsIDddLFxuXHRcdGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuXHRcdGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuXHRcdHNlbnNlczogXCJwYXNzaXZlIFBlcmNlcHRpb24gMTBcIixcblx0XHRsYW5ndWFnZXM6IFwiXCIsXG5cdFx0Y3I6IFwiMS80XCIsXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkhvb3Zlc1wiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs1IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogOCAoMmQ0ICsgMykgYmx1ZGdlb25pbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDUsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjJkNFwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDMsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIlJvY1wiLFxuXHRcdHNpemU6IFwiR2FyZ2FudHVhblwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcIm1vbnN0cm9zaXR5XCIsXG5cdFx0c3VidHlwZTogXCJcIixcblx0XHRhbGlnbm1lbnQ6IFwidW5hbGlnbmVkXCIsXG5cdFx0YWM6IDE1LFxuXHRcdGhwOiAyNDgsXG5cdFx0aGl0X2RpY2U6IFwiMTZkMjBcIixcblx0XHRzcGVlZDogXCIyMCBmdC4sIGZseSAxMjAgZnQuXCIsXG5cdFx0c3RhdHM6IFsyOCwgMTAsIDIwLCAzLCAxMCwgOV0sXG5cdFx0c2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0ZGV4dGVyaXR5OiA0LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0Y29uc3RpdHV0aW9uOiA5LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0d2lzZG9tOiA0LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0Y2hhcmlzbWE6IDMsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0c2tpbGxzYXZlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRwZXJjZXB0aW9uOiA0LFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuXHRcdGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuXHRcdHNlbnNlczogXCJwYXNzaXZlIFBlcmNlcHRpb24gMTRcIixcblx0XHRsYW5ndWFnZXM6IFwiXCIsXG5cdFx0Y3I6IFwiMTFcIixcblx0XHR0cmFpdHM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJLZWVuIFNpZ2h0XCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIHJvYyBoYXMgYWR2YW50YWdlIG9uIFdpc2RvbSAoUGVyY2VwdGlvbikgY2hlY2tzIHRoYXQgcmVseSBvbiBzaWdodC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJNdWx0aWF0dGFja1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSByb2MgbWFrZXMgdHdvIGF0dGFja3M6IG9uZSB3aXRoIGl0cyBiZWFrIGFuZCBvbmUgd2l0aCBpdHMgdGFsb25zLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkJlYWtcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMTMgdG8gaGl0LCByZWFjaCAxMCBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMjcgKDRkOCArIDkpIHBpZXJjaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAxMyxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiNGQ4XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogOSxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiVGFsb25zXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzEzIHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMjMgKDRkNiArIDkpIHNsYXNoaW5nIGRhbWFnZSwgYW5kIHRoZSB0YXJnZXQgaXMgZ3JhcHBsZWQgKGVzY2FwZSBEQyAxOSkuIFVudGlsIHRoaXMgZ3JhcHBsZSBlbmRzLCB0aGUgdGFyZ2V0IGlzIHJlc3RyYWluZWQsIGFuZCB0aGUgcm9jIGNhbid0IHVzZSBpdHMgdGFsb25zIG9uIGFub3RoZXIgdGFyZ2V0LlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDEzLFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCI0ZDZcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiA5LFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJSb3BlclwiLFxuXHRcdHNpemU6IFwiTGFyZ2VcIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJtb25zdHJvc2l0eVwiLFxuXHRcdHN1YnR5cGU6IFwiXCIsXG5cdFx0YWxpZ25tZW50OiBcIm5ldXRyYWwgZXZpbFwiLFxuXHRcdGFjOiAyMCxcblx0XHRocDogOTMsXG5cdFx0aGl0X2RpY2U6IFwiMTFkMTBcIixcblx0XHRzcGVlZDogXCIxMCBmdC4sIGNsaW1iIDEwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbMTgsIDgsIDE3LCA3LCAxNiwgNl0sXG5cdFx0c2tpbGxzYXZlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRwZXJjZXB0aW9uOiA2LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0c3RlYWx0aDogNSxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcblx0XHRzZW5zZXM6IFwiZGFya3Zpc2lvbiA2MCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxNlwiLFxuXHRcdGxhbmd1YWdlczogXCJcIixcblx0XHRjcjogXCI1XCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiRmFsc2UgQXBwZWFyYW5jZVwiLFxuXHRcdFx0XHRkZXNjOiBcIldoaWxlIHRoZSByb3BlciByZW1haW5zIG1vdGlvbmxlc3MsIGl0IGlzIGluZGlzdGluZ3Vpc2hhYmxlIGZyb20gYSBub3JtYWwgY2F2ZSBmb3JtYXRpb24sIHN1Y2ggYXMgYSBzdGFsYWdtaXRlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkdyYXNwaW5nIFRlbmRyaWxzXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIHJvcGVyIGNhbiBoYXZlIHVwIHRvIHNpeCB0ZW5kcmlscyBhdCBhIHRpbWUuIEVhY2ggdGVuZHJpbCBjYW4gYmUgYXR0YWNrZWQgKEFDIDIwOyAxMCBoaXQgcG9pbnRzOyBpbW11bml0eSB0byBwb2lzb24gYW5kIHBzeWNoaWMgZGFtYWdlKS4gRGVzdHJveWluZyBhIHRlbmRyaWwgZGVhbHMgbm8gZGFtYWdlIHRvIHRoZSByb3Blciwgd2hpY2ggY2FuIGV4dHJ1ZGUgYSByZXBsYWNlbWVudCB0ZW5kcmlsIG9uIGl0cyBuZXh0IHR1cm4uIEEgdGVuZHJpbCBjYW4gYWxzbyBiZSBicm9rZW4gaWYgYSBjcmVhdHVyZSB0YWtlcyBhbiBhY3Rpb24gYW5kIHN1Y2NlZWRzIG9uIGEgREMgMTUgU3RyZW5ndGggY2hlY2sgYWdhaW5zdCBpdC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJTcGlkZXIgQ2xpbWJcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgcm9wZXIgY2FuIGNsaW1iIGRpZmZpY3VsdCBzdXJmYWNlcywgaW5jbHVkaW5nIHVwc2lkZSBkb3duIG9uIGNlaWxpbmdzLCB3aXRob3V0IG5lZWRpbmcgdG8gbWFrZSBhbiBhYmlsaXR5IGNoZWNrLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIHJvcGVyIG1ha2VzIGZvdXIgYXR0YWNrcyB3aXRoIGl0cyB0ZW5kcmlscywgdXNlcyBSZWVsLCBhbmQgbWFrZXMgb25lIGF0dGFjayB3aXRoIGl0cyBiaXRlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkJpdGVcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNyB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDIyICg0ZDggKyA0KSBwaWVyY2luZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNyxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiNGQ4XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogNCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiVGVuZHJpbFwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs3IHRvIGhpdCwgcmVhY2ggNTAgZnQuLCBvbmUgY3JlYXR1cmUuIEhpdDogVGhlIHRhcmdldCBpcyBncmFwcGxlZCAoZXNjYXBlIERDIDE1KS4gVW50aWwgdGhlIGdyYXBwbGUgZW5kcywgdGhlIHRhcmdldCBpcyByZXN0cmFpbmVkIGFuZCBoYXMgZGlzYWR2YW50YWdlIG9uIFN0cmVuZ3RoIGNoZWNrcyBhbmQgU3RyZW5ndGggc2F2aW5nIHRocm93cywgYW5kIHRoZSByb3BlciBjYW4ndCB1c2UgdGhlIHNhbWUgdGVuZHJpbCBvbiBhbm90aGVyIHRhcmdldC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA3LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJSZWVsXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIHJvcGVyIHB1bGxzIGVhY2ggY3JlYXR1cmUgZ3JhcHBsZWQgYnkgaXQgdXAgdG8gMjUgZnQuIHN0cmFpZ2h0IHRvd2FyZCBpdC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJSdWcgb2YgU21vdGhlcmluZ1wiLFxuXHRcdHNpemU6IFwiTGFyZ2VcIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJjb25zdHJ1Y3RcIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcblx0XHRhYzogMTIsXG5cdFx0aHA6IDMzLFxuXHRcdGhpdF9kaWNlOiBcIjZkMTBcIixcblx0XHRzcGVlZDogXCIxMCBmdC5cIixcblx0XHRzdGF0czogWzE3LCAxNCwgMTAsIDEsIDMsIDFdLFxuXHRcdGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuXHRcdGRhbWFnZV9pbW11bml0aWVzOiBcInBvaXNvbiwgcHN5Y2hpY1wiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOlxuXHRcdFx0XCJibGluZGVkLCBjaGFybWVkLCBkZWFmZW5lZCwgZnJpZ2h0ZW5lZCwgcGFyYWx5emVkLCBwZXRyaWZpZWQsIHBvaXNvbmVkXCIsXG5cdFx0c2Vuc2VzOiBcImJsaW5kc2lnaHQgNjAgZnQuIChibGluZCBiZXlvbmQgdGhpcyByYWRpdXMpLCBwYXNzaXZlIFBlcmNlcHRpb24gNlwiLFxuXHRcdGxhbmd1YWdlczogXCJcIixcblx0XHRjcjogXCIyXCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQW50aW1hZ2ljIFN1c2NlcHRpYmlsaXR5XCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIHJ1ZyBpcyBpbmNhcGFjaXRhdGVkIHdoaWxlIGluIHRoZSBhcmVhIG9mIGFuIGFudGltYWdpYyBmaWVsZC4gSWYgdGFyZ2V0ZWQgYnkgZGlzcGVsIG1hZ2ljLCB0aGUgcnVnIG11c3Qgc3VjY2VlZCBvbiBhIENvbnN0aXR1dGlvbiBzYXZpbmcgdGhyb3cgYWdhaW5zdCB0aGUgY2FzdGVyJ3Mgc3BlbGwgc2F2ZSBEQyBvciBmYWxsIHVuY29uc2Npb3VzIGZvciAxIG1pbnV0ZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJEYW1hZ2UgVHJhbnNmZXJcIixcblx0XHRcdFx0ZGVzYzogXCJXaGlsZSBpdCBpcyBncmFwcGxpbmcgYSBjcmVhdHVyZSwgdGhlIHJ1ZyB0YWtlcyBvbmx5IGhhbGYgdGhlIGRhbWFnZSBkZWFsdCB0byBpdCwgYW5kIHRoZSBjcmVhdHVyZSBncmFwcGxlZCBieSB0aGUgcnVnIHRha2VzIHRoZSBvdGhlciBoYWxmLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkZhbHNlIEFwcGVhcmFuY2VcIixcblx0XHRcdFx0ZGVzYzogXCJXaGlsZSB0aGUgcnVnIHJlbWFpbnMgbW90aW9ubGVzcywgaXQgaXMgaW5kaXN0aW5ndWlzaGFibGUgZnJvbSBhIG5vcm1hbCBydWcuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiU21vdGhlclwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs1IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSBNZWRpdW0gb3Igc21hbGxlciBjcmVhdHVyZS4gSGl0OiBUaGUgY3JlYXR1cmUgaXMgZ3JhcHBsZWQgKGVzY2FwZSBEQyAxMykuIFVudGlsIHRoaXMgZ3JhcHBsZSBlbmRzLCB0aGUgdGFyZ2V0IGlzIHJlc3RyYWluZWQsIGJsaW5kZWQsIGFuZCBhdCByaXNrIG9mIHN1ZmZvY2F0aW5nLCBhbmQgdGhlIHJ1ZyBjYW4ndCBzbW90aGVyIGFub3RoZXIgdGFyZ2V0LiBJbiBhZGRpdGlvbiwgYXQgdGhlIHN0YXJ0IG9mIGVhY2ggb2YgdGhlIHRhcmdldCdzIHR1cm5zLCB0aGUgdGFyZ2V0IHRha2VzIDEwICgyZDYgKyAzKSBibHVkZ2VvbmluZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMmQ2XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogMyxcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiUnVzdCBNb25zdGVyXCIsXG5cdFx0c2l6ZTogXCJNZWRpdW1cIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJtb25zdHJvc2l0eVwiLFxuXHRcdHN1YnR5cGU6IFwiXCIsXG5cdFx0YWxpZ25tZW50OiBcInVuYWxpZ25lZFwiLFxuXHRcdGFjOiAxNCxcblx0XHRocDogMjcsXG5cdFx0aGl0X2RpY2U6IFwiNWQ4XCIsXG5cdFx0c3BlZWQ6IFwiNDAgZnQuXCIsXG5cdFx0c3RhdHM6IFsxMywgMTIsIDEzLCAyLCAxMywgNl0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0c2Vuc2VzOiBcImRhcmt2aXNpb24gNjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTFcIixcblx0XHRsYW5ndWFnZXM6IFwiXCIsXG5cdFx0Y3I6IFwiMS8yXCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiSXJvbiBTY2VudFwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBydXN0IG1vbnN0ZXIgY2FuIHBpbnBvaW50LCBieSBzY2VudCwgdGhlIGxvY2F0aW9uIG9mIGZlcnJvdXMgbWV0YWwgd2l0aGluIDMwIGZlZXQgb2YgaXQuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiUnVzdCBNZXRhbFwiLFxuXHRcdFx0XHRkZXNjOiBcIkFueSBub25tYWdpY2FsIHdlYXBvbiBtYWRlIG9mIG1ldGFsIHRoYXQgaGl0cyB0aGUgcnVzdCBtb25zdGVyIGNvcnJvZGVzLiBBZnRlciBkZWFsaW5nIGRhbWFnZSwgdGhlIHdlYXBvbiB0YWtlcyBhIHBlcm1hbmVudCBhbmQgY3VtdWxhdGl2ZSAtMSBwZW5hbHR5IHRvIGRhbWFnZSByb2xscy4gSWYgaXRzIHBlbmFsdHkgZHJvcHMgdG8gLTUsIHRoZSB3ZWFwb24gaXMgZGVzdHJveWVkLiBOb24gbWFnaWNhbCBhbW11bml0aW9uIG1hZGUgb2YgbWV0YWwgdGhhdCBoaXRzIHRoZSBydXN0IG1vbnN0ZXIgaXMgZGVzdHJveWVkIGFmdGVyIGRlYWxpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkJpdGVcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMyB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDUgKDFkOCArIDEpIHBpZXJjaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAzLFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxZDhcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiAxLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJBbnRlbm5hZVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBydXN0IG1vbnN0ZXIgY29ycm9kZXMgYSBub25tYWdpY2FsIGZlcnJvdXMgbWV0YWwgb2JqZWN0IGl0IGNhbiBzZWUgd2l0aGluIDUgZmVldCBvZiBpdC4gSWYgdGhlIG9iamVjdCBpc24ndCBiZWluZyB3b3JuIG9yIGNhcnJpZWQsIHRoZSB0b3VjaCBkZXN0cm95cyBhIDEtZm9vdCBjdWJlIG9mIGl0LiBJZiB0aGUgb2JqZWN0IGlzIGJlaW5nIHdvcm4gb3IgY2FycmllZCBieSBhIGNyZWF0dXJlLCB0aGUgY3JlYXR1cmUgY2FuIG1ha2UgYSBEQyAxMSBEZXh0ZXJpdHkgc2F2aW5nIHRocm93IHRvIGF2b2lkIHRoZSBydXN0IG1vbnN0ZXIncyB0b3VjaC5cXG5JZiB0aGUgb2JqZWN0IHRvdWNoZWQgaXMgZWl0aGVyIG1ldGFsIGFybW9yIG9yIGEgbWV0YWwgc2hpZWxkIGJlaW5nIHdvcm4gb3IgY2FycmllZCwgaXRzIHRha2VzIGEgcGVybWFuZW50IGFuZCBjdW11bGF0aXZlIC0xIHBlbmFsdHkgdG8gdGhlIEFDIGl0IG9mZmVycy4gQXJtb3IgcmVkdWNlZCB0byBhbiBBQyBvZiAxMCBvciBhIHNoaWVsZCB0aGF0IGRyb3BzIHRvIGEgKzAgYm9udXMgaXMgZGVzdHJveWVkLiBJZiB0aGUgb2JqZWN0IHRvdWNoZWQgaXMgYSBoZWxkIG1ldGFsIHdlYXBvbiwgaXQgcnVzdHMgYXMgZGVzY3JpYmVkIGluIHRoZSBSdXN0IE1ldGFsIHRyYWl0LlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIlNhYmVyLVRvb3RoZWQgVGlnZXJcIixcblx0XHRzaXplOiBcIkxhcmdlXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwiYmVhc3RcIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcblx0XHRhYzogMTIsXG5cdFx0aHA6IDUyLFxuXHRcdGhpdF9kaWNlOiBcIjdkMTBcIixcblx0XHRzcGVlZDogXCI0MCBmdC5cIixcblx0XHRzdGF0czogWzE4LCAxNCwgMTUsIDMsIDEyLCA4XSxcblx0XHRza2lsbHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdHBlcmNlcHRpb246IDMsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRzdGVhbHRoOiA2LFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuXHRcdGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuXHRcdHNlbnNlczogXCJwYXNzaXZlIFBlcmNlcHRpb24gMTNcIixcblx0XHRsYW5ndWFnZXM6IFwiXCIsXG5cdFx0Y3I6IFwiMlwiLFxuXHRcdHRyYWl0czogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIktlZW4gU21lbGxcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgdGlnZXIgaGFzIGFkdmFudGFnZSBvbiBXaXNkb20gKFBlcmNlcHRpb24pIGNoZWNrcyB0aGF0IHJlbHkgb24gc21lbGwuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiUG91bmNlXCIsXG5cdFx0XHRcdGRlc2M6IFwiSWYgdGhlIHRpZ2VyIG1vdmVzIGF0IGxlYXN0IDIwIGZ0LiBzdHJhaWdodCB0b3dhcmQgYSBjcmVhdHVyZSBhbmQgdGhlbiBoaXRzIGl0IHdpdGggYSBjbGF3IGF0dGFjayBvbiB0aGUgc2FtZSB0dXJuLCB0aGF0IHRhcmdldCBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxNCBTdHJlbmd0aCBzYXZpbmcgdGhyb3cgb3IgYmUga25vY2tlZCBwcm9uZS4gSWYgdGhlIHRhcmdldCBpcyBwcm9uZSwgdGhlIHRpZ2VyIGNhbiBtYWtlIG9uZSBiaXRlIGF0dGFjayBhZ2FpbnN0IGl0IGFzIGEgYm9udXMgYWN0aW9uLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkJpdGVcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNiB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDEwICgxZDEwICsgNSkgcGllcmNpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDYsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjFkMTBcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiA1LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJDbGF3XCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzYgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxMiAoMmQ2ICsgNSkgc2xhc2hpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDYsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjJkNlwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDUsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIlNhaHVhZ2luXCIsXG5cdFx0c2l6ZTogXCJNZWRpdW1cIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJodW1hbm9pZFwiLFxuXHRcdHN1YnR5cGU6IFwic2FodWFnaW5cIixcblx0XHRhbGlnbm1lbnQ6IFwibGF3ZnVsIGV2aWxcIixcblx0XHRhYzogMTIsXG5cdFx0aHA6IDIyLFxuXHRcdGhpdF9kaWNlOiBcIjRkOFwiLFxuXHRcdHNwZWVkOiBcIjMwIGZ0Liwgc3dpbSA0MCBmdC5cIixcblx0XHRzdGF0czogWzEzLCAxMSwgMTIsIDEyLCAxMywgOV0sXG5cdFx0c2tpbGxzYXZlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRwZXJjZXB0aW9uOiA1LFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuXHRcdGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuXHRcdHNlbnNlczogXCJkYXJrdmlzaW9uIDEyMCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxNVwiLFxuXHRcdGxhbmd1YWdlczogXCJTYWh1YWdpblwiLFxuXHRcdGNyOiBcIjEvMlwiLFxuXHRcdHRyYWl0czogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkJsb29kIEZyZW56eVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBzYWh1YWdpbiBoYXMgYWR2YW50YWdlIG9uIG1lbGVlIGF0dGFjayByb2xscyBhZ2FpbnN0IGFueSBjcmVhdHVyZSB0aGF0IGRvZXNuJ3QgaGF2ZSBhbGwgaXRzIGhpdCBwb2ludHMuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTGltaXRlZCBBbXBoaWJpb3VzbmVzc1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBzYWh1YWdpbiBjYW4gYnJlYXRoZSBhaXIgYW5kIHdhdGVyLCBidXQgaXQgbmVlZHMgdG8gYmUgc3VibWVyZ2VkIGF0IGxlYXN0IG9uY2UgZXZlcnkgNCBob3VycyB0byBhdm9pZCBzdWZmb2NhdGluZy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJTaGFyayBUZWxlcGF0aHlcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgc2FodWFnaW4gY2FuIG1hZ2ljYWxseSBjb21tYW5kIGFueSBzaGFyayB3aXRoaW4gMTIwIGZlZXQgb2YgaXQsIHVzaW5nIGEgbGltaXRlZCB0ZWxlcGF0aHkuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgc2FodWFnaW4gbWFrZXMgdHdvIG1lbGVlIGF0dGFja3M6IG9uZSB3aXRoIGl0cyBiaXRlIGFuZCBvbmUgd2l0aCBpdHMgY2xhd3Mgb3Igc3BlYXIuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQml0ZVwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICszIHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMyAoMWQ0ICsgMSkgcGllcmNpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDMsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjFkNFwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDEsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkNsYXdzXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzMgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAzICgxZDQgKyAxKSBzbGFzaGluZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMyxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMWQ0XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogMSxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiU3BlYXJcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBvciBSYW5nZWQgV2VhcG9uIEF0dGFjazogKzMgdG8gaGl0LCByZWFjaCA1IGZ0LiBvciByYW5nZSAyMC82MCBmdC4sIG9uZSB0YXJnZXQuIEhpdDogNCAoMWQ2ICsgMSkgcGllcmNpbmcgZGFtYWdlLCBvciA1ICgxZDggKyAxKSBwaWVyY2luZyBkYW1hZ2UgaWYgdXNlZCB3aXRoIHR3byBoYW5kcyB0byBtYWtlIGEgbWVsZWUgYXR0YWNrLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDMsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjFkNlwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDEsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIlNhbGFtYW5kZXJcIixcblx0XHRzaXplOiBcIkxhcmdlXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwiZWxlbWVudGFsXCIsXG5cdFx0c3VidHlwZTogXCJcIixcblx0XHRhbGlnbm1lbnQ6IFwibmV1dHJhbCBldmlsXCIsXG5cdFx0YWM6IDE1LFxuXHRcdGhwOiA5MCxcblx0XHRoaXRfZGljZTogXCIxMmQxMFwiLFxuXHRcdHNwZWVkOiBcIjMwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbMTgsIDE0LCAxNSwgMTEsIDEwLCAxMl0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJjb2xkXCIsXG5cdFx0ZGFtYWdlX3Jlc2lzdGFuY2VzOlxuXHRcdFx0XCJibHVkZ2VvbmluZywgcGllcmNpbmcsIGFuZCBzbGFzaGluZyBmcm9tIG5vbm1hZ2ljYWwgd2VhcG9uc1wiLFxuXHRcdGRhbWFnZV9pbW11bml0aWVzOiBcImZpcmVcIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcblx0XHRzZW5zZXM6IFwiZGFya3Zpc2lvbiA2MCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxMFwiLFxuXHRcdGxhbmd1YWdlczogXCJJZ25hblwiLFxuXHRcdGNyOiBcIjVcIixcblx0XHR0cmFpdHM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJIZWF0ZWQgQm9keVwiLFxuXHRcdFx0XHRkZXNjOiBcIkEgY3JlYXR1cmUgdGhhdCB0b3VjaGVzIHRoZSBzYWxhbWFuZGVyIG9yIGhpdHMgaXQgd2l0aCBhIG1lbGVlIGF0dGFjayB3aGlsZSB3aXRoaW4gNSBmdC4gb2YgaXQgdGFrZXMgNyAoMmQ2KSBmaXJlIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIyZDZcIixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiSGVhdGVkIFdlYXBvbnNcIixcblx0XHRcdFx0ZGVzYzogXCJBbnkgbWV0YWwgbWVsZWUgd2VhcG9uIHRoZSBzYWxhbWFuZGVyIHdpZWxkcyBkZWFscyBhbiBleHRyYSAzICgxZDYpIGZpcmUgZGFtYWdlIG9uIGEgaGl0IChpbmNsdWRlZCBpbiB0aGUgYXR0YWNrKS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJNdWx0aWF0dGFja1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBzYWxhbWFuZGVyIG1ha2VzIHR3byBhdHRhY2tzOiBvbmUgd2l0aCBpdHMgc3BlYXIgYW5kIG9uZSB3aXRoIGl0cyB0YWlsLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlNwZWFyXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgb3IgUmFuZ2VkIFdlYXBvbiBBdHRhY2s6ICs3IHRvIGhpdCwgcmVhY2ggNSBmdC4gb3IgcmFuZ2UgMjAgZnQuLzYwIGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxMSAoMmQ2ICsgNCkgcGllcmNpbmcgZGFtYWdlLCBvciAxMyAoMmQ4ICsgNCkgcGllcmNpbmcgZGFtYWdlIGlmIHVzZWQgd2l0aCB0d28gaGFuZHMgdG8gbWFrZSBhIG1lbGVlIGF0dGFjaywgcGx1cyAzICgxZDYpIGZpcmUgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDcsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjJkNlwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDQsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlRhaWxcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNyB0byBoaXQsIHJlYWNoIDEwIGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxMSAoMmQ2ICsgNCkgYmx1ZGdlb25pbmcgZGFtYWdlIHBsdXMgNyAoMmQ2KSBmaXJlIGRhbWFnZSwgYW5kIHRoZSB0YXJnZXQgaXMgZ3JhcHBsZWQgKGVzY2FwZSBEQyAxNCkuIFVudGlsIHRoaXMgZ3JhcHBsZSBlbmRzLCB0aGUgdGFyZ2V0IGlzIHJlc3RyYWluZWQsIHRoZSBzYWxhbWFuZGVyIGNhbiBhdXRvbWF0aWNhbGx5IGhpdCB0aGUgdGFyZ2V0IHdpdGggaXRzIHRhaWwsIGFuZCB0aGUgc2FsYW1hbmRlciBjYW4ndCBtYWtlIHRhaWwgYXR0YWNrcyBhZ2FpbnN0IG90aGVyIHRhcmdldHMuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNyxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMmQ2ICsgMmQ2XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogNCxcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiU2F0eXJcIixcblx0XHRzaXplOiBcIk1lZGl1bVwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcImZleVwiLFxuXHRcdHN1YnR5cGU6IFwiXCIsXG5cdFx0YWxpZ25tZW50OiBcImNoYW90aWMgbmV1dHJhbFwiLFxuXHRcdGFjOiAxNCxcblx0XHRocDogMzEsXG5cdFx0aGl0X2RpY2U6IFwiN2Q4XCIsXG5cdFx0c3BlZWQ6IFwiNDAgZnQuXCIsXG5cdFx0c3RhdHM6IFsxMiwgMTYsIDExLCAxMiwgMTAsIDE0XSxcblx0XHRza2lsbHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdHBlcmNlcHRpb246IDIsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRwZXJmb3JtYW5jZTogNixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHN0ZWFsdGg6IDUsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0c2Vuc2VzOiBcInBhc3NpdmUgUGVyY2VwdGlvbiAxMlwiLFxuXHRcdGxhbmd1YWdlczogXCJDb21tb24sIEVsdmlzaCwgU3lsdmFuXCIsXG5cdFx0Y3I6IFwiMS8yXCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTWFnaWMgUmVzaXN0YW5jZVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBzYXR5ciBoYXMgYWR2YW50YWdlIG9uIHNhdmluZyB0aHJvd3MgYWdhaW5zdCBzcGVsbHMgYW5kIG90aGVyIG1hZ2ljYWwgZWZmZWN0cy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJSYW1cIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMyB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDYgKDJkNCArIDEpIGJsdWRnZW9uaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAzLFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIyZDRcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiAxLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJTaG9ydHN3b3JkXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzUgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiA2ICgxIGQ2ICsgMykgcGllcmNpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDUsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjFkNlwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDMsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlNob3J0Ym93XCIsXG5cdFx0XHRcdGRlc2M6IFwiUmFuZ2VkIFdlYXBvbiBBdHRhY2s6ICs1IHRvIGhpdCwgcmFuZ2UgODAvMzIwIGZ0Liwgb25lIHRhcmdldC4gSGl0OiA2ICgxZDYgKyAzKSBwaWVyY2luZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNSxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMWQ2XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogMyxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiVmFyaWFudDogUGFucGlwZXNcIixcblx0XHRcdFx0ZGVzYzogXCJHZW50bGUgTHVsbGFieS4gVGhlIGNyZWF0dXJlIGZhbGxzIGFzbGVlcCBhbmQgaXMgdW5jb25zY2lvdXMgZm9yIDEgbWludXRlLiBUaGUgZWZmZWN0IGVuZHMgaWYgdGhlIGNyZWF0dXJlIHRha2VzIGRhbWFnZSBvciBpZiBzb21lb25lIHRha2VzIGFuIGFjdGlvbiB0byBzaGFrZSB0aGUgY3JlYXR1cmUgYXdha2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiU2NvcnBpb25cIixcblx0XHRzaXplOiBcIlRpbnlcIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJiZWFzdFwiLFxuXHRcdHN1YnR5cGU6IFwiXCIsXG5cdFx0YWxpZ25tZW50OiBcInVuYWxpZ25lZFwiLFxuXHRcdGFjOiAxMSxcblx0XHRocDogMSxcblx0XHRoaXRfZGljZTogXCIxZDRcIixcblx0XHRzcGVlZDogXCIxMCBmdC5cIixcblx0XHRzdGF0czogWzIsIDExLCA4LCAxLCA4LCAyXSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcblx0XHRzZW5zZXM6IFwiYmxpbmRzaWdodCAxMCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiA5XCIsXG5cdFx0bGFuZ3VhZ2VzOiBcIlwiLFxuXHRcdGNyOiBcIjBcIixcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiU3RpbmdcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMiB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgY3JlYXR1cmUuIEhpdDogMSBwaWVyY2luZyBkYW1hZ2UsIGFuZCB0aGUgdGFyZ2V0IG11c3QgbWFrZSBhIERDIDkgQ29uc3RpdHV0aW9uIHNhdmluZyB0aHJvdywgdGFraW5nIDQgKDFkOCkgcG9pc29uIGRhbWFnZSBvbiBhIGZhaWxlZCBzYXZlLCBvciBoYWxmIGFzIG11Y2ggZGFtYWdlIG9uIGEgc3VjY2Vzc2Z1bCBvbmUuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiAxLFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJTY291dFwiLFxuXHRcdHNpemU6IFwiTWVkaXVtXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwiaHVtYW5vaWRcIixcblx0XHRzdWJ0eXBlOiBcImFueSByYWNlXCIsXG5cdFx0YWxpZ25tZW50OiBcImFueSBhbGlnbm1lbnRcIixcblx0XHRhYzogMTMsXG5cdFx0aHA6IDE2LFxuXHRcdGhpdF9kaWNlOiBcIjNkOFwiLFxuXHRcdHNwZWVkOiBcIjMwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbMTEsIDE0LCAxMiwgMTEsIDEzLCAxMV0sXG5cdFx0c2tpbGxzYXZlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYXR1cmU6IDQsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRwZXJjZXB0aW9uOiA1LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0c3RlYWx0aDogNixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHN1cnZpdmFsOiA1LFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuXHRcdGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuXHRcdHNlbnNlczogXCJwYXNzaXZlIFBlcmNlcHRpb24gMTVcIixcblx0XHRsYW5ndWFnZXM6IFwiYW55IG9uZSBsYW5ndWFnZSAodXN1YWxseSBDb21tb24pXCIsXG5cdFx0Y3I6IFwiMS8yXCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiS2VlbiBIZWFyaW5nIGFuZCBTaWdodFwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBzY291dCBoYXMgYWR2YW50YWdlIG9uIFdpc2RvbSAoUGVyY2VwdGlvbikgY2hlY2tzIHRoYXQgcmVseSBvbiBoZWFyaW5nIG9yIHNpZ2h0LlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIHNjb3V0IG1ha2VzIHR3byBtZWxlZSBhdHRhY2tzIG9yIHR3byByYW5nZWQgYXR0YWNrcy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJTaG9ydHN3b3JkXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzQgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiA1ICgxZDYgKyAyKSBwaWVyY2luZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNCxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMWQ2XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogMixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTG9uZ2Jvd1wiLFxuXHRcdFx0XHRkZXNjOiBcIlJhbmdlZCBXZWFwb24gQXR0YWNrOiArNCB0byBoaXQsIHJhbmdlZCAxNTAvNjAwIGZ0Liwgb25lIHRhcmdldC4gSGl0OiA2ICgxZDggKyAyKSBwaWVyY2luZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNCxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMWQ4XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogMixcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiU2VhIEhhZ1wiLFxuXHRcdHNpemU6IFwiTWVkaXVtXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwiZmV5XCIsXG5cdFx0c3VidHlwZTogXCJcIixcblx0XHRhbGlnbm1lbnQ6IFwiY2hhb3RpYyBldmlsXCIsXG5cdFx0YWM6IDE0LFxuXHRcdGhwOiA1Mixcblx0XHRoaXRfZGljZTogXCI3ZDhcIixcblx0XHRzcGVlZDogXCIzMCBmdC4sIHN3aW0gNDAgZnQuXCIsXG5cdFx0c3RhdHM6IFsxNiwgMTMsIDE2LCAxMiwgMTIsIDEzXSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcblx0XHRzZW5zZXM6IFwiZGFya3Zpc2lvbiA2MCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxMVwiLFxuXHRcdGxhbmd1YWdlczogXCJBcXVhbiwgQ29tbW9uLCBHaWFudFwiLFxuXHRcdGNyOiBcIjJcIixcblx0XHR0cmFpdHM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJBbXBoaWJpb3VzXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGhhZyBjYW4gYnJlYXRoZSBhaXIgYW5kIHdhdGVyLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkhvcnJpZmljIEFwcGVhcmFuY2VcIixcblx0XHRcdFx0ZGVzYzogXCJBbnkgaHVtYW5vaWQgdGhhdCBzdGFydHMgaXRzIHR1cm4gd2l0aGluIDMwIGZlZXQgb2YgdGhlIGhhZyBhbmQgY2FuIHNlZSB0aGUgaGFnJ3MgdHJ1ZSBmb3JtIG11c3QgbWFrZSBhIERDIDExIFdpc2RvbSBzYXZpbmcgdGhyb3cuIE9uIGEgZmFpbGVkIHNhdmUsIHRoZSBjcmVhdHVyZSBpcyBmcmlnaHRlbmVkIGZvciAxIG1pbnV0ZS4gQSBjcmVhdHVyZSBjYW4gcmVwZWF0IHRoZSBzYXZpbmcgdGhyb3cgYXQgdGhlIGVuZCBvZiBlYWNoIG9mIGl0cyB0dXJucywgd2l0aCBkaXNhZHZhbnRhZ2UgaWYgdGhlIGhhZyBpcyB3aXRoaW4gbGluZSBvZiBzaWdodCwgZW5kaW5nIHRoZSBlZmZlY3Qgb24gaXRzZWxmIG9uIGEgc3VjY2Vzcy4gSWYgYSBjcmVhdHVyZSdzIHNhdmluZyB0aHJvdyBpcyBzdWNjZXNzZnVsIG9yIHRoZSBlZmZlY3QgZW5kcyBmb3IgaXQsIHRoZSBjcmVhdHVyZSBpcyBpbW11bmUgdG8gdGhlIGhhZydzIEhvcnJpZmljIEFwcGVhcmFuY2UgZm9yIHRoZSBuZXh0IDI0IGhvdXJzLlxcblVubGVzcyB0aGUgdGFyZ2V0IGlzIHN1cnByaXNlZCBvciB0aGUgcmV2ZWxhdGlvbiBvZiB0aGUgaGFnJ3MgdHJ1ZSBmb3JtIGlzIHN1ZGRlbiwgdGhlIHRhcmdldCBjYW4gYXZlcnQgaXRzIGV5ZXMgYW5kIGF2b2lkIG1ha2luZyB0aGUgaW5pdGlhbCBzYXZpbmcgdGhyb3cuIFVudGlsIHRoZSBzdGFydCBvZiBpdHMgbmV4dCB0dXJuLCBhIGNyZWF0dXJlIHRoYXQgYXZlcnRzIGl0cyBleWVzIGhhcyBkaXNhZHZhbnRhZ2Ugb24gYXR0YWNrIHJvbGxzIGFnYWluc3QgdGhlIGhhZy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJIYWcgQ292ZW5cIixcblx0XHRcdFx0ZGVzYzogXCJXaGVuIGhhZ3MgbXVzdCB3b3JrIHRvZ2V0aGVyLCB0aGV5IGZvcm0gY292ZW5zLCBpbiBzcGl0ZSBvZiB0aGVpciBzZWxmaXNoIG5hdHVyZXMuIEEgY292ZW4gaXMgbWFkZSB1cCBvZiBoYWdzIG9mIGFueSB0eXBlLCBhbGwgb2Ygd2hvbSBhcmUgZXF1YWxzIHdpdGhpbiB0aGUgZ3JvdXAuIEhvd2V2ZXIsIGVhY2ggb2YgdGhlIGhhZ3MgY29udGludWVzIHRvIGRlc2lyZSBtb3JlIHBlcnNvbmFsIHBvd2VyLlxcbkEgY292ZW4gY29uc2lzdHMgb2YgdGhyZWUgaGFncyBzbyB0aGF0IGFueSBhcmd1bWVudHMgYmV0d2VlbiB0d28gaGFncyBjYW4gYmUgc2V0dGxlZCBieSB0aGUgdGhpcmQuIElmIG1vcmUgdGhhbiB0aHJlZSBoYWdzIGV2ZXIgY29tZSB0b2dldGhlciwgYXMgbWlnaHQgaGFwcGVuIGlmIHR3byBjb3ZlbnMgY29tZSBpbnRvIGNvbmZsaWN0LCB0aGUgcmVzdWx0IGlzIHVzdWFsbHkgY2hhb3MuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiU2hhcmVkIFNwZWxsY2FzdGluZyAoQ292ZW4gT25seSlcIixcblx0XHRcdFx0ZGVzYzogXCJXaGlsZSBhbGwgdGhyZWUgbWVtYmVycyBvZiBhIGhhZyBjb3ZlbiBhcmUgd2l0aGluIDMwIGZlZXQgb2Ygb25lIGFub3RoZXIsIHRoZXkgY2FuIGVhY2ggY2FzdCB0aGUgZm9sbG93aW5nIHNwZWxscyBmcm9tIHRoZSB3aXphcmQncyBzcGVsbCBsaXN0IGJ1dCBtdXN0IHNoYXJlIHRoZSBzcGVsbCBzbG90cyBhbW9uZyB0aGVtc2VsdmVzOlxcblxcblx1MjAyMiAxc3QgbGV2ZWwgKDQgc2xvdHMpOiBpZGVudGlmeSwgcmF5IG9mIHNpY2tuZXNzXFxuXHUyMDIyIDJuZCBsZXZlbCAoMyBzbG90cyk6IGhvbGQgcGVyc29uLCBsb2NhdGUgb2JqZWN0XFxuXHUyMDIyIDNyZCBsZXZlbCAoMyBzbG90cyk6IGJlc3RvdyBjdXJzZSwgY291bnRlcnNwZWxsLCBsaWdodG5pbmcgYm9sdFxcblx1MjAyMiA0dGggbGV2ZWwgKDMgc2xvdHMpOiBwaGFudGFzbWFsIGtpbGxlciwgcG9seW1vcnBoXFxuXHUyMDIyIDV0aCBsZXZlbCAoMiBzbG90cyk6IGNvbnRhY3Qgb3RoZXIgcGxhbmUsIHNjcnlpbmdcXG5cdTIwMjIgNnRoIGxldmVsICgxIHNsb3QpOiBleWUgYml0ZVxcblxcbkZvciBjYXN0aW5nIHRoZXNlIHNwZWxscywgZWFjaCBoYWcgaXMgYSAxMnRoLWxldmVsIHNwZWxsY2FzdGVyIHRoYXQgdXNlcyBJbnRlbGxpZ2VuY2UgYXMgaGVyIHNwZWxsY2FzdGluZyBhYmlsaXR5LiBUaGUgc3BlbGwgc2F2ZSBEQyBpcyAxMit0aGUgaGFnJ3MgSW50ZWxsaWdlbmNlIG1vZGlmaWVyLCBhbmQgdGhlIHNwZWxsIGF0dGFjayBib251cyBpcyA0K3RoZSBoYWcncyBJbnRlbGxpZ2VuY2UgbW9kaWZpZXIuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiSGFnIEV5ZSAoQ292ZW4gT25seSlcIixcblx0XHRcdFx0ZGVzYzogXCJBIGhhZyBjb3ZlbiBjYW4gY3JhZnQgYSBtYWdpYyBpdGVtIGNhbGxlZCBhIGhhZyBleWUsIHdoaWNoIGlzIG1hZGUgZnJvbSBhIHJlYWwgZXllIGNvYXRlZCBpbiB2YXJuaXNoIGFuZCBvZnRlbiBmaXR0ZWQgdG8gYSBwZW5kYW50IG9yIG90aGVyIHdlYXJhYmxlIGl0ZW0uIFRoZSBoYWcgZXllIGlzIHVzdWFsbHkgZW50cnVzdGVkIHRvIGEgbWluaW9uIGZvciBzYWZla2VlcGluZyBhbmQgdHJhbnNwb3J0LiBBIGhhZyBpbiB0aGUgY292ZW4gY2FuIHRha2UgYW4gYWN0aW9uIHRvIHNlZSB3aGF0IHRoZSBoYWcgZXllIHNlZXMgaWYgdGhlIGhhZyBleWUgaXMgb24gdGhlIHNhbWUgcGxhbmUgb2YgZXhpc3RlbmNlLiBBIGhhZyBleWUgaGFzIEFDIDEwLCAxIGhpdCBwb2ludCwgYW5kIGRhcmt2aXNpb24gd2l0aCBhIHJhZGl1cyBvZiA2MCBmZWV0LiBJZiBpdCBpcyBkZXN0cm95ZWQsIGVhY2ggY292ZW4gbWVtYmVyIHRha2VzIDNkMTAgcHN5Y2hpYyBkYW1hZ2UgYW5kIGlzIGJsaW5kZWQgZm9yIDI0IGhvdXJzLlxcbkEgaGFnIGNvdmVuIGNhbiBoYXZlIG9ubHkgb25lIGhhZyBleWUgYXQgYSB0aW1lLCBhbmQgY3JlYXRpbmcgYSBuZXcgb25lIHJlcXVpcmVzIGFsbCB0aHJlZSBtZW1iZXJzIG9mIHRoZSBjb3ZlbiB0byBwZXJmb3JtIGEgcml0dWFsLiBUaGUgcml0dWFsIHRha2VzIDEgaG91ciwgYW5kIHRoZSBoYWdzIGNhbid0IHBlcmZvcm0gaXQgd2hpbGUgYmxpbmRlZC4gRHVyaW5nIHRoZSByaXR1YWwsIGlmIHRoZSBoYWdzIHRha2UgYW55IGFjdGlvbiBvdGhlciB0aGFuIHBlcmZvcm1pbmcgdGhlIHJpdHVhbCwgdGhleSBtdXN0IHN0YXJ0IG92ZXIuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQ2xhd3NcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNSB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDEwICgyZDYgKyAzKSBzbGFzaGluZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNSxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMmQ2XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogMyxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiRGVhdGggR2xhcmVcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgaGFnIHRhcmdldHMgb25lIGZyaWdodGVuZWQgY3JlYXR1cmUgc2hlIGNhbiBzZWUgd2l0aGluIDMwIGZ0LiBvZiBoZXIuIElmIHRoZSB0YXJnZXQgY2FuIHNlZSB0aGUgaGFnLCBpdCBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxMSBXaXNkb20gc2F2aW5nIHRocm93IGFnYWluc3QgdGhpcyBtYWdpYyBvciBkcm9wIHRvIDAgaGl0IHBvaW50cy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJJbGx1c29yeSBBcHBlYXJhbmNlXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGhhZyBjb3ZlcnMgaGVyc2VsZiBhbmQgYW55dGhpbmcgc2hlIGlzIHdlYXJpbmcgb3IgY2Fycnlpbmcgd2l0aCBhIG1hZ2ljYWwgaWxsdXNpb24gdGhhdCBtYWtlcyBoZXIgbG9vayBsaWtlIGFuIHVnbHkgY3JlYXR1cmUgb2YgaGVyIGdlbmVyYWwgc2l6ZSBhbmQgaHVtYW5vaWQgc2hhcGUuIFRoZSBlZmZlY3QgZW5kcyBpZiB0aGUgaGFnIHRha2VzIGEgYm9udXMgYWN0aW9uIHRvIGVuZCBpdCBvciBpZiBzaGUgZGllcy5cXG5UaGUgY2hhbmdlcyB3cm91Z2h0IGJ5IHRoaXMgZWZmZWN0IGZhaWwgdG8gaG9sZCB1cCB0byBwaHlzaWNhbCBpbnNwZWN0aW9uLiBGb3IgZXhhbXBsZSwgdGhlIGhhZyBjb3VsZCBhcHBlYXIgdG8gaGF2ZSBubyBjbGF3cywgYnV0IHNvbWVvbmUgdG91Y2hpbmcgaGVyIGhhbmQgbWlnaHQgZmVlbCB0aGUgY2xhd3MuIE90aGVyd2lzZSwgYSBjcmVhdHVyZSBtdXN0IHRha2UgYW4gYWN0aW9uIHRvIHZpc3VhbGx5IGluc3BlY3QgdGhlIGlsbHVzaW9uIGFuZCBzdWNjZWVkIG9uIGEgREMgMTYgSW50ZWxsaWdlbmNlIChJbnZlc3RpZ2F0aW9uKSBjaGVjayB0byBkaXNjZXJuIHRoYXQgdGhlIGhhZyBpcyBkaXNndWlzZWQuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiU2VhIEhvcnNlXCIsXG5cdFx0c2l6ZTogXCJUaW55XCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwiYmVhc3RcIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcblx0XHRhYzogMTEsXG5cdFx0aHA6IDEsXG5cdFx0aGl0X2RpY2U6IFwiMWQ0XCIsXG5cdFx0c3BlZWQ6IFwic3dpbSAyMCBmdC5cIixcblx0XHRzdGF0czogWzEsIDEyLCA4LCAxLCAxMCwgMl0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0c2Vuc2VzOiBcInBhc3NpdmUgUGVyY2VwdGlvbiAxMFwiLFxuXHRcdGxhbmd1YWdlczogXCJcIixcblx0XHRjcjogXCIwXCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiV2F0ZXIgQnJlYXRoaW5nXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIHNlYSBob3JzZSBjYW4gYnJlYXRoZSBvbmx5IHVuZGVyd2F0ZXIuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiU2hhZG93XCIsXG5cdFx0c2l6ZTogXCJNZWRpdW1cIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJ1bmRlYWRcIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJjaGFvdGljIGV2aWxcIixcblx0XHRhYzogMTIsXG5cdFx0aHA6IDE2LFxuXHRcdGhpdF9kaWNlOiBcIjNkOFwiLFxuXHRcdHNwZWVkOiBcIjQwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbNiwgMTQsIDEzLCA2LCAxMCwgOF0sXG5cdFx0c2tpbGxzYXZlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRzdGVhbHRoOiA0LFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwicmFkaWFudFwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczpcblx0XHRcdFwiYWNpZCwgY29sZCwgZmlyZSwgbGlnaHRuaW5nLCB0aHVuZGVyOyBibHVkZ2VvbmluZywgcGllcmNpbmcsIGFuZCBzbGFzaGluZyBmcm9tIG5vbm1hZ2ljYWwgd2VhcG9uc1wiLFxuXHRcdGRhbWFnZV9pbW11bml0aWVzOiBcIm5lY3JvdGljLCBwb2lzb25cIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczpcblx0XHRcdFwiZXhoYXVzdGlvbiwgZnJpZ2h0ZW5lZCwgZ3JhcHBsZWQsIHBhcmFseXplZCwgcGV0cmlmaWVkLCBwb2lzb25lZCwgcHJvbmUsIHJlc3RyYWluZWRcIixcblx0XHRzZW5zZXM6IFwiZGFya3Zpc2lvbiA2MCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxMFwiLFxuXHRcdGxhbmd1YWdlczogXCJcIixcblx0XHRjcjogXCIxLzJcIixcblx0XHR0cmFpdHM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJBbW9ycGhvdXNcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgc2hhZG93IGNhbiBtb3ZlIHRocm91Z2ggYSBzcGFjZSBhcyBuYXJyb3cgYXMgMSBpbmNoIHdpZGUgd2l0aG91dCBzcXVlZXppbmcuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiU2hhZG93IFN0ZWFsdGhcIixcblx0XHRcdFx0ZGVzYzogXCJXaGlsZSBpbiBkaW0gbGlnaHQgb3IgZGFya25lc3MsIHRoZSBzaGFkb3cgY2FuIHRha2UgdGhlIEhpZGUgYWN0aW9uIGFzIGEgYm9udXMgYWN0aW9uLiBJdHMgc3RlYWx0aCBib251cyBpcyBhbHNvIGltcHJvdmVkIHRvICs2LlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlN1bmxpZ2h0IFdlYWtuZXNzXCIsXG5cdFx0XHRcdGRlc2M6IFwiV2hpbGUgaW4gc3VubGlnaHQsIHRoZSBzaGFkb3cgaGFzIGRpc2FkdmFudGFnZSBvbiBhdHRhY2sgcm9sbHMsIGFiaWxpdHkgY2hlY2tzLCBhbmQgc2F2aW5nIHRocm93cy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJTdHJlbmd0aCBEcmFpblwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs0IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSBjcmVhdHVyZS4gSGl0OiA5ICgyZDYgKyAyKSBuZWNyb3RpYyBkYW1hZ2UsIGFuZCB0aGUgdGFyZ2V0J3MgU3RyZW5ndGggc2NvcmUgaXMgcmVkdWNlZCBieSAxZDQuIFRoZSB0YXJnZXQgZGllcyBpZiB0aGlzIHJlZHVjZXMgaXRzIFN0cmVuZ3RoIHRvIDAuIE90aGVyd2lzZSwgdGhlIHJlZHVjdGlvbiBsYXN0cyB1bnRpbCB0aGUgdGFyZ2V0IGZpbmlzaGVzIGEgc2hvcnQgb3IgbG9uZyByZXN0LlxcbklmIGEgbm9uLWV2aWwgaHVtYW5vaWQgZGllcyBmcm9tIHRoaXMgYXR0YWNrLCBhIG5ldyBzaGFkb3cgcmlzZXMgZnJvbSB0aGUgY29ycHNlIDFkNCBob3VycyBsYXRlci5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA0LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIyZDZcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiAyLFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJTaGFtYmxpbmcgTW91bmRcIixcblx0XHRzaXplOiBcIkxhcmdlXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwicGxhbnRcIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcblx0XHRhYzogMTUsXG5cdFx0aHA6IDEzNixcblx0XHRoaXRfZGljZTogXCIxNmQxMFwiLFxuXHRcdHNwZWVkOiBcIjIwIGZ0Liwgc3dpbSAyMCBmdC5cIixcblx0XHRzdGF0czogWzE4LCA4LCAxNiwgNSwgMTAsIDVdLFxuXHRcdHNraWxsc2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0c3RlYWx0aDogMixcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJjb2xkLCBmaXJlXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwibGlnaHRuaW5nXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiYmxpbmRlZCwgZGVhZmVuZWQsIGV4aGF1c3Rpb25cIixcblx0XHRzZW5zZXM6IFwiYmxpbmRzaWdodCA2MCBmdC4gKGJsaW5kIGJleW9uZCB0aGlzIHJhZGl1cyksIHBhc3NpdmUgUGVyY2VwdGlvbiAxMFwiLFxuXHRcdGxhbmd1YWdlczogXCJcIixcblx0XHRjcjogXCI1XCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTGlnaHRuaW5nIEFic29ycHRpb25cIixcblx0XHRcdFx0ZGVzYzogXCJXaGVuZXZlciB0aGUgc2hhbWJsaW5nIG1vdW5kIGlzIHN1YmplY3RlZCB0byBsaWdodG5pbmcgZGFtYWdlLCBpdCB0YWtlcyBubyBkYW1hZ2UgYW5kIHJlZ2FpbnMgYSBudW1iZXIgb2YgaGl0IHBvaW50cyBlcXVhbCB0byB0aGUgbGlnaHRuaW5nIGRhbWFnZSBkZWFsdC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJNdWx0aWF0dGFja1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBzaGFtYmxpbmcgbW91bmQgbWFrZXMgdHdvIHNsYW0gYXR0YWNrcy4gSWYgYm90aCBhdHRhY2tzIGhpdCBhIE1lZGl1bSBvciBzbWFsbGVyIHRhcmdldCwgdGhlIHRhcmdldCBpcyBncmFwcGxlZCAoZXNjYXBlIERDIDE0KSwgYW5kIHRoZSBzaGFtYmxpbmcgbW91bmQgdXNlcyBpdHMgRW5ndWxmIG9uIGl0LlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlNsYW1cIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNyB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDEzICgyZDggKyA0KSBibHVkZ2VvbmluZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNyxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMmQ4XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogNCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiRW5ndWxmXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIHNoYW1ibGluZyBtb3VuZCBlbmd1bGZzIGEgTWVkaXVtIG9yIHNtYWxsZXIgY3JlYXR1cmUgZ3JhcHBsZWQgYnkgaXQuIFRoZSBlbmd1bGZlZCB0YXJnZXQgaXMgYmxpbmRlZCwgcmVzdHJhaW5lZCwgYW5kIHVuYWJsZSB0byBicmVhdGhlLCBhbmQgaXQgbXVzdCBzdWNjZWVkIG9uIGEgREMgMTQgQ29uc3RpdHV0aW9uIHNhdmluZyB0aHJvdyBhdCB0aGUgc3RhcnQgb2YgZWFjaCBvZiB0aGUgbW91bmQncyB0dXJucyBvciB0YWtlIDEzICgyZDggKyA0KSBibHVkZ2VvbmluZyBkYW1hZ2UuIElmIHRoZSBtb3VuZCBtb3ZlcywgdGhlIGVuZ3VsZmVkIHRhcmdldCBtb3ZlcyB3aXRoIGl0LiBUaGUgbW91bmQgY2FuIGhhdmUgb25seSBvbmUgY3JlYXR1cmUgZW5ndWxmZWQgYXQgYSB0aW1lLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIlNoaWVsZCBHdWFyZGlhblwiLFxuXHRcdHNpemU6IFwiTGFyZ2VcIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJjb25zdHJ1Y3RcIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcblx0XHRhYzogMTcsXG5cdFx0aHA6IDE0Mixcblx0XHRoaXRfZGljZTogXCIxNWQxMFwiLFxuXHRcdHNwZWVkOiBcIjMwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbMTgsIDgsIDE4LCA3LCAxMCwgM10sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwicG9pc29uXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6XG5cdFx0XHRcImNoYXJtZWQsIGV4aGF1c3Rpb24sIGZyaWdodGVuZWQsIHBhcmFseXplZCwgcG9pc29uZWRcIixcblx0XHRzZW5zZXM6IFwiYmxpbmRzaWdodCAxMCBmdC4sIGRhcmt2aXNpb24gNjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTBcIixcblx0XHRsYW5ndWFnZXM6IFwidW5kZXJzdGFuZHMgY29tbWFuZHMgZ2l2ZW4gaW4gYW55IGxhbmd1YWdlIGJ1dCBjYW4ndCBzcGVha1wiLFxuXHRcdGNyOiBcIjdcIixcblx0XHR0cmFpdHM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJCb3VuZFwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBzaGllbGQgZ3VhcmRpYW4gaXMgbWFnaWNhbGx5IGJvdW5kIHRvIGFuIGFtdWxldC4gQXMgbG9uZyBhcyB0aGUgZ3VhcmRpYW4gYW5kIGl0cyBhbXVsZXQgYXJlIG9uIHRoZSBzYW1lIHBsYW5lIG9mIGV4aXN0ZW5jZSwgdGhlIGFtdWxldCdzIHdlYXJlciBjYW4gdGVsZXBhdGhpY2FsbHkgY2FsbCB0aGUgZ3VhcmRpYW4gdG8gdHJhdmVsIHRvIGl0LCBhbmQgdGhlIGd1YXJkaWFuIGtub3dzIHRoZSBkaXN0YW5jZSBhbmQgZGlyZWN0aW9uIHRvIHRoZSBhbXVsZXQuIElmIHRoZSBndWFyZGlhbiBpcyB3aXRoaW4gNjAgZmVldCBvZiB0aGUgYW11bGV0J3Mgd2VhcmVyLCBoYWxmIG9mIGFueSBkYW1hZ2UgdGhlIHdlYXJlciB0YWtlcyAocm91bmRlZCB1cCkgaXMgdHJhbnNmZXJyZWQgdG8gdGhlIGd1YXJkaWFuLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlJlZ2VuZXJhdGlvblwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBzaGllbGQgZ3VhcmRpYW4gcmVnYWlucyAxMCBoaXQgcG9pbnRzIGF0IHRoZSBzdGFydCBvZiBpdHMgdHVybiBpZiBpdCBoYXMgYXQgbGVhc3QgMSBoaXQuIHBvaW50LlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlNwZWxsIFN0b3JpbmdcIixcblx0XHRcdFx0ZGVzYzogXCJBIHNwZWxsY2FzdGVyIHdobyB3ZWFycyB0aGUgc2hpZWxkIGd1YXJkaWFuJ3MgYW11bGV0IGNhbiBjYXVzZSB0aGUgZ3VhcmRpYW4gdG8gc3RvcmUgb25lIHNwZWxsIG9mIDR0aCBsZXZlbCBvciBsb3dlci4gVG8gZG8gc28sIHRoZSB3ZWFyZXIgbXVzdCBjYXN0IHRoZSBzcGVsbCBvbiB0aGUgZ3VhcmRpYW4uIFRoZSBzcGVsbCBoYXMgbm8gZWZmZWN0IGJ1dCBpcyBzdG9yZWQgd2l0aGluIHRoZSBndWFyZGlhbi4gV2hlbiBjb21tYW5kZWQgdG8gZG8gc28gYnkgdGhlIHdlYXJlciBvciB3aGVuIGEgc2l0dWF0aW9uIGFyaXNlcyB0aGF0IHdhcyBwcmVkZWZpbmVkIGJ5IHRoZSBzcGVsbGNhc3RlciwgdGhlIGd1YXJkaWFuIGNhc3RzIHRoZSBzdG9yZWQgc3BlbGwgd2l0aCBhbnkgcGFyYW1ldGVycyBzZXQgYnkgdGhlIG9yaWdpbmFsIGNhc3RlciwgcmVxdWlyaW5nIG5vIGNvbXBvbmVudHMuIFdoZW4gdGhlIHNwZWxsIGlzIGNhc3Qgb3IgYSBuZXcgc3BlbGwgaXMgc3RvcmVkLCBhbnkgcHJldmlvdXNseSBzdG9yZWQgc3BlbGwgaXMgbG9zdC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJNdWx0aWF0dGFja1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBndWFyZGlhbiBtYWtlcyB0d28gZmlzdCBhdHRhY2tzLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkZpc3RcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNyB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDExICgyZDYgKyA0KSBibHVkZ2VvbmluZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNyxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMmQ2XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogNCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRyZWFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJTaGllbGRcIixcblx0XHRcdFx0ZGVzYzogXCJXaGVuIGEgY3JlYXR1cmUgbWFrZXMgYW4gYXR0YWNrIGFnYWluc3QgdGhlIHdlYXJlciBvZiB0aGUgZ3VhcmRpYW4ncyBhbXVsZXQsIHRoZSBndWFyZGlhbiBncmFudHMgYSArMiBib251cyB0byB0aGUgd2VhcmVyJ3MgQUMgaWYgdGhlIGd1YXJkaWFuIGlzIHdpdGhpbiA1IGZlZXQgb2YgdGhlIHdlYXJlci5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJTaHJpZWtlclwiLFxuXHRcdHNpemU6IFwiTWVkaXVtXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwicGxhbnRcIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcblx0XHRhYzogNSxcblx0XHRocDogMTMsXG5cdFx0aGl0X2RpY2U6IFwiM2Q4XCIsXG5cdFx0c3BlZWQ6IFwiMCBmdC5cIixcblx0XHRzdGF0czogWzEsIDEsIDEwLCAxLCAzLCAxXSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczogXCJibGluZGVkLCBkZWFmZW5lZCwgZnJpZ2h0ZW5lZFwiLFxuXHRcdHNlbnNlczogXCJibGluZHNpZ2h0IDMwIGZ0LiAoYmxpbmQgYmV5b25kIHRoaXMgcmFkaXVzKSwgcGFzc2l2ZSBQZXJjZXB0aW9uIDZcIixcblx0XHRsYW5ndWFnZXM6IFwiXCIsXG5cdFx0Y3I6IFwiMFwiLFxuXHRcdHRyYWl0czogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkZhbHNlIEFwcGVhcmFuY2VcIixcblx0XHRcdFx0ZGVzYzogXCJXaGlsZSB0aGUgc2hyaWVrZXIgcmVtYWlucyBtb3Rpb25sZXNzLCBpdCBpcyBpbmRpc3Rpbmd1aXNoYWJsZSBmcm9tIGFuIG9yZGluYXJ5IGZ1bmd1cy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJTaHJpZWtcIixcblx0XHRcdFx0ZGVzYzogXCJXaGVuIGJyaWdodCBsaWdodCBvciBhIGNyZWF0dXJlIGlzIHdpdGhpbiAzMCBmZWV0IG9mIHRoZSBzaHJpZWtlciwgaXQgZW1pdHMgYSBzaHJpZWsgYXVkaWJsZSB3aXRoaW4gMzAwIGZlZXQgb2YgaXQuIFRoZSBzaHJpZWtlciBjb250aW51ZXMgdG8gc2hyaWVrIHVudGlsIHRoZSBkaXN0dXJiYW5jZSBtb3ZlcyBvdXQgb2YgcmFuZ2UgYW5kIGZvciAxZDQgb2YgdGhlIHNocmlla2VyJ3MgdHVybnMgYWZ0ZXJ3YXJkXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiU2lsdmVyIERyYWdvbiBXeXJtbGluZ1wiLFxuXHRcdHNpemU6IFwiTWVkaXVtXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwiZHJhZ29uXCIsXG5cdFx0c3VidHlwZTogXCJcIixcblx0XHRhbGlnbm1lbnQ6IFwibGF3ZnVsIGdvb2RcIixcblx0XHRhYzogMTcsXG5cdFx0aHA6IDQ1LFxuXHRcdGhpdF9kaWNlOiBcIjZkOFwiLFxuXHRcdHNwZWVkOiBcIjMwIGZ0LiwgZmx5IDYwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbMTksIDEwLCAxNywgMTIsIDExLCAxNV0sXG5cdFx0c2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0ZGV4dGVyaXR5OiAyLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0Y29uc3RpdHV0aW9uOiA1LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0d2lzZG9tOiAyLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0Y2hhcmlzbWE6IDQsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0c2tpbGxzYXZlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRwZXJjZXB0aW9uOiA0LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0c3RlYWx0aDogMixcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJjb2xkXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0c2Vuc2VzOiBcImJsaW5kc2lnaHQgMTAgZnQuLCBkYXJrdmlzaW9uIDYwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDE0XCIsXG5cdFx0bGFuZ3VhZ2VzOiBcIkRyYWNvbmljXCIsXG5cdFx0Y3I6IFwiMlwiLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJCaXRlXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzYgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiA5ICgxZDEwICsgNCkgcGllcmNpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDYsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjFkMTBcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiA0LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJCcmVhdGggV2VhcG9ucyAoUmVjaGFyZ2UgNS02KVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBkcmFnb24gdXNlcyBvbmUgb2YgdGhlIGZvbGxvd2luZyBicmVhdGggd2VhcG9ucy5cXG5Db2xkIEJyZWF0aC4gVGhlIGRyYWdvbiBleGhhbGVzIGFuIGljeSBibGFzdCBpbiBhIDE1LWZvb3QgY29uZS4gRWFjaCBjcmVhdHVyZSBpbiB0aGF0IGFyZWEgbXVzdCBtYWtlIGEgREMgMTMgQ29uc3RpdHV0aW9uIHNhdmluZyB0aHJvdywgdGFraW5nIDE4ICg0ZDgpIGNvbGQgZGFtYWdlIG9uIGEgZmFpbGVkIHNhdmUsIG9yIGhhbGYgYXMgbXVjaCBkYW1hZ2Ugb24gYSBzdWNjZXNzZnVsIG9uZS5cXG5QYXJhbHl6aW5nIEJyZWF0aC4gVGhlIGRyYWdvbiBleGhhbGVzIHBhcmFseXppbmcgZ2FzIGluIGEgMTUtZm9vdCBjb25lLiBFYWNoIGNyZWF0dXJlIGluIHRoYXQgYXJlYSBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxMyBDb25zdGl0dXRpb24gc2F2aW5nIHRocm93IG9yIGJlIHBhcmFseXplZCBmb3IgMSBtaW51dGUuIEEgY3JlYXR1cmUgY2FuIHJlcGVhdCB0aGUgc2F2aW5nIHRocm93IGF0IHRoZSBlbmQgb2YgZWFjaCBvZiBpdHMgdHVybnMsIGVuZGluZyB0aGUgZWZmZWN0IG9uIGl0c2VsZiBvbiBhIHN1Y2Nlc3MuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiNGQ4XCIsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIlNrZWxldG9uXCIsXG5cdFx0c2l6ZTogXCJNZWRpdW1cIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJ1bmRlYWRcIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJsYXdmdWwgZXZpbFwiLFxuXHRcdGFjOiAxMyxcblx0XHRocDogMTMsXG5cdFx0aGl0X2RpY2U6IFwiMmQ4XCIsXG5cdFx0c3BlZWQ6IFwiMzAgZnQuXCIsXG5cdFx0c3RhdHM6IFsxMCwgMTQsIDE1LCA2LCA4LCA1XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcImJsdWRnZW9uaW5nXCIsXG5cdFx0ZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuXHRcdGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcInBvaXNvbmVkXCIsXG5cdFx0c2Vuc2VzOiBcImRhcmt2aXNpb24gNjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gOVwiLFxuXHRcdGxhbmd1YWdlczogXCJ1bmRlcnN0YW5kcyBhbGwgbGFuZ3VhZ2VzIGl0IHNwb2tlIGluIGxpZmUgYnV0IGNhbid0IHNwZWFrXCIsXG5cdFx0Y3I6IFwiMS80XCIsXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlNob3J0c3dvcmRcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNCB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDUgKDFkNiArIDIpIHBpZXJjaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA0LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxZDZcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiAyLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJTaG9ydGJvd1wiLFxuXHRcdFx0XHRkZXNjOiBcIlJhbmdlZCBXZWFwb24gQXR0YWNrOiArNCB0byBoaXQsIHJhbmdlIDgwLzMyMCBmdC4sIG9uZSB0YXJnZXQuIEhpdDogNSAoMWQ2ICsgMikgcGllcmNpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDQsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjFkNlwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDIsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIlNvbGFyXCIsXG5cdFx0c2l6ZTogXCJMYXJnZVwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcImNlbGVzdGlhbFwiLFxuXHRcdHN1YnR5cGU6IFwiXCIsXG5cdFx0YWxpZ25tZW50OiBcImxhd2Z1bCBnb29kXCIsXG5cdFx0YWM6IDIxLFxuXHRcdGhwOiAyNDMsXG5cdFx0aGl0X2RpY2U6IFwiMThkMTBcIixcblx0XHRzcGVlZDogXCI1MCBmdC4sIGZseSAxNTAgZnQuXCIsXG5cdFx0c3RhdHM6IFsyNiwgMjIsIDI2LCAyNSwgMjUsIDMwXSxcblx0XHRzYXZlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRpbnRlbGxpZ2VuY2U6IDE0LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0d2lzZG9tOiAxNCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdGNoYXJpc21hOiAxNyxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRza2lsbHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdHBlcmNlcHRpb246IDE0LFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX3Jlc2lzdGFuY2VzOlxuXHRcdFx0XCJyYWRpYW50OyBibHVkZ2VvbmluZywgcGllcmNpbmcsIGFuZCBzbGFzaGluZyBmcm9tIG5vbm1hZ2ljYWwgd2VhcG9uc1wiLFxuXHRcdGRhbWFnZV9pbW11bml0aWVzOiBcIm5lY3JvdGljLCBwb2lzb25cIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczogXCJjaGFybWVkLCBleGhhdXN0aW9uLCBmcmlnaHRlbmVkLCBwb2lzb25lZFwiLFxuXHRcdHNlbnNlczogXCJ0cnVlc2lnaHQgMTIwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDI0XCIsXG5cdFx0bGFuZ3VhZ2VzOiBcImFsbCwgdGVsZXBhdGh5IDEyMCBmdC5cIixcblx0XHRjcjogXCIyMVwiLFxuXHRcdHRyYWl0czogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkFuZ2VsaWMgV2VhcG9uc1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBzb2xhcidzIHdlYXBvbiBhdHRhY2tzIGFyZSBtYWdpY2FsLiBXaGVuIHRoZSBzb2xhciBoaXRzIHdpdGggYW55IHdlYXBvbiwgdGhlIHdlYXBvbiBkZWFscyBhbiBleHRyYSA2ZDggcmFkaWFudCBkYW1hZ2UgKGluY2x1ZGVkIGluIHRoZSBhdHRhY2spLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkRpdmluZSBBd2FyZW5lc3NcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgc29sYXIga25vd3MgaWYgaXQgaGVhcnMgYSBsaWUuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiSW5uYXRlIFNwZWxsY2FzdGluZ1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBzb2xhcidzIHNwZWxsIGNhc3RpbmcgYWJpbGl0eSBpcyBDaGFyaXNtYSAoc3BlbGwgc2F2ZSBEQyAyNSkuIEl0IGNhbiBpbm5hdGVseSBjYXN0IHRoZSBmb2xsb3dpbmcgc3BlbGxzLCByZXF1aXJpbmcgbm8gbWF0ZXJpYWwgY29tcG9uZW50czpcXG5BdCB3aWxsOiBkZXRlY3QgZXZpbCBhbmQgZ29vZCwgaW52aXNpYmlsaXR5IChzZWxmIG9ubHkpXFxuMy9kYXkgZWFjaDogYmxhZGUgYmFycmllciwgZGlzcGVsIGV2aWwgYW5kIGdvb2QsIHJlc3VycmVjdGlvblxcbjEvZGF5IGVhY2g6IGNvbW11bmUsIGNvbnRyb2wgd2VhdGhlclwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIk1hZ2ljIFJlc2lzdGFuY2VcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgc29sYXIgaGFzIGFkdmFudGFnZSBvbiBzYXZpbmcgdGhyb3dzIGFnYWluc3Qgc3BlbGxzIGFuZCBvdGhlciBtYWdpY2FsIGVmZmVjdHMuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgc29sYXIgbWFrZXMgdHdvIGdyZWF0c3dvcmQgYXR0YWNrcy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJHcmVhdHN3b3JkXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzE1IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMjIgKDRkNiArIDgpIHNsYXNoaW5nIGRhbWFnZSBwbHVzIDI3ICg2ZDgpIHJhZGlhbnQgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDE1LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCI0ZDYgKyA2ZDhcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiA4LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJTbGF5aW5nIExvbmdib3dcIixcblx0XHRcdFx0ZGVzYzogXCJSYW5nZWQgV2VhcG9uIEF0dGFjazogKzEzIHRvIGhpdCwgcmFuZ2UgMTUwLzYwMCBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTUgKDJkOCArIDYpIHBpZXJjaW5nIGRhbWFnZSBwbHVzIDI3ICg2ZDgpIHJhZGlhbnQgZGFtYWdlLiBJZiB0aGUgdGFyZ2V0IGlzIGEgY3JlYXR1cmUgdGhhdCBoYXMgMTkwIGhpdCBwb2ludHMgb3IgZmV3ZXIsIGl0IG11c3Qgc3VjY2VlZCBvbiBhIERDIDE1IENvbnN0aXR1dGlvbiBzYXZpbmcgdGhyb3cgb3IgZGllLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDEzLFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIyZDggKyA2ZDhcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiA2LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJGbHlpbmcgU3dvcmRcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgc29sYXIgcmVsZWFzZXMgaXRzIGdyZWF0c3dvcmQgdG8gaG92ZXIgbWFnaWNhbGx5IGluIGFuIHVub2NjdXBpZWQgc3BhY2Ugd2l0aGluIDUgZnQuIG9mIGl0LiBJZiB0aGUgc29sYXIgY2FuIHNlZSB0aGUgc3dvcmQsIHRoZSBzb2xhciBjYW4gbWVudGFsbHkgY29tbWFuZCBpdCBhcyBhIGJvbnVzIGFjdGlvbiB0byBmbHkgdXAgdG8gNTAgZnQuIGFuZCBlaXRoZXIgbWFrZSBvbmUgYXR0YWNrIGFnYWluc3QgYSB0YXJnZXQgb3IgcmV0dXJuIHRvIHRoZSBzb2xhcidzIGhhbmRzLiBJZiB0aGUgaG92ZXJpbmcgc3dvcmQgaXMgdGFyZ2V0ZWQgYnkgYW55IGVmZmVjdCwgdGhlIHNvbGFyIGlzIGNvbnNpZGVyZWQgdG8gYmUgaG9sZGluZyBpdC4gVGhlIGhvdmVyaW5nIHN3b3JkIGZhbGxzIGlmIHRoZSBzb2xhciBkaWVzLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkhlYWxpbmcgVG91Y2ggKDQvRGF5KVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBzb2xhciB0b3VjaGVzIGFub3RoZXIgY3JlYXR1cmUuIFRoZSB0YXJnZXQgbWFnaWNhbGx5IHJlZ2FpbnMgNDAgKDhkOCArIDQpIGhpdCBwb2ludHMgYW5kIGlzIGZyZWVkIGZyb20gYW55IGN1cnNlLCBkaXNlYXNlLCBwb2lzb24sIGJsaW5kbmVzcywgb3IgZGVhZm5lc3MuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRsZWdlbmRhcnlfYWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlRlbGVwb3J0XCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIHNvbGFyIG1hZ2ljYWxseSB0ZWxlcG9ydHMsIGFsb25nIHdpdGggYW55IGVxdWlwbWVudCBpdCBpcyB3ZWFyaW5nIG9yIGNhcnJ5aW5nLCB1cCB0byAxMjAgZnQuIHRvIGFuIHVub2NjdXBpZWQgc3BhY2UgaXQgY2FuIHNlZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJTZWFyaW5nIEJ1cnN0IChDb3N0cyAyIEFjdGlvbnMpXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIHNvbGFyIGVtaXRzIG1hZ2ljYWwsIGRpdmluZSBlbmVyZ3kuIEVhY2ggY3JlYXR1cmUgb2YgaXRzIGNob2ljZSBpbiBhIDEwIC1mb290IHJhZGl1cyBtdXN0IG1ha2UgYSBEQyAyMyBEZXh0ZXJpdHkgc2F2aW5nIHRocm93LCB0YWtpbmcgMTQgKDRkNikgZmlyZSBkYW1hZ2UgcGx1cyAxNCAoNGQ2KSByYWRpYW50IGRhbWFnZSBvbiBhIGZhaWxlZCBzYXZlLCBvciBoYWxmIGFzIG11Y2ggZGFtYWdlIG9uIGEgc3VjY2Vzc2Z1bCBvbmUuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQmxpbmRpbmcgR2F6ZSAoQ29zdHMgMyBBY3Rpb25zKVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBzb2xhciB0YXJnZXRzIG9uZSBjcmVhdHVyZSBpdCBjYW4gc2VlIHdpdGhpbiAzMCBmdC4gb2YgaXQuIElmIHRoZSB0YXJnZXQgY2FuIHNlZSBpdCwgdGhlIHRhcmdldCBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxNSBDb25zdGl0dXRpb24gc2F2aW5nIHRocm93IG9yIGJlIGJsaW5kZWQgdW50aWwgbWFnaWMgc3VjaCBhcyB0aGUgbGVzc2VyIHJlc3RvcmF0aW9uIHNwZWxsIHJlbW92ZXMgdGhlIGJsaW5kbmVzcy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJTcGVjdGVyXCIsXG5cdFx0c2l6ZTogXCJNZWRpdW1cIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJ1bmRlYWRcIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJjaGFvdGljIGV2aWxcIixcblx0XHRhYzogMTIsXG5cdFx0aHA6IDIyLFxuXHRcdGhpdF9kaWNlOiBcIjVkOFwiLFxuXHRcdHNwZWVkOiBcIjAgZnQuLCBmbHkgNTAgZnQuIChob3ZlcilcIixcblx0XHRzdGF0czogWzEsIDE0LCAxMSwgMTAsIDEwLCAxMV0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6XG5cdFx0XHRcImFjaWQsIGNvbGQsIGZpcmUsIGxpZ2h0bmluZywgdGh1bmRlcjsgYmx1ZGdlb25pbmcsIHBpZXJjaW5nLCBhbmQgc2xhc2hpbmcgZnJvbSBub25tYWdpY2FsIHdlYXBvbnNcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJuZWNyb3RpYywgcG9pc29uXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6XG5cdFx0XHRcImNoYXJtZWQsIGV4aGF1c3Rpb24sIGdyYXBwbGVkLCBwYXJhbHl6ZWQsIHBldHJpZmllZCwgcG9pc29uZWQsIHByb25lLCByZXN0cmFpbmVkLCB1bmNvbnNjaW91c1wiLFxuXHRcdHNlbnNlczogXCJkYXJrdmlzaW9uIDYwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDEwXCIsXG5cdFx0bGFuZ3VhZ2VzOiBcInVuZGVyc3RhbmRzIGFsbCBsYW5ndWFnZXMgaXQga25ldyBpbiBsaWZlIGJ1dCBjYW4ndCBzcGVha1wiLFxuXHRcdGNyOiBcIjFcIixcblx0XHR0cmFpdHM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJJbmNvcnBvcmVhbCBNb3ZlbWVudFwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBzcGVjdGVyIGNhbiBtb3ZlIHRocm91Z2ggb3RoZXIgY3JlYXR1cmVzIGFuZCBvYmplY3RzIGFzIGlmIHRoZXkgd2VyZSBkaWZmaWN1bHQgdGVycmFpbi4gSXQgdGFrZXMgNSAoMWQxMCkgZm9yY2UgZGFtYWdlIGlmIGl0IGVuZHMgaXRzIHR1cm4gaW5zaWRlIGFuIG9iamVjdC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJTdW5saWdodCBTZW5zaXRpdml0eVwiLFxuXHRcdFx0XHRkZXNjOiBcIldoaWxlIGluIHN1bmxpZ2h0LCB0aGUgc3BlY3RlciBoYXMgZGlzYWR2YW50YWdlIG9uIGF0dGFjayByb2xscywgYXMgd2VsbCBhcyBvbiBXaXNkb20gKFBlcmNlcHRpb24pIGNoZWNrcyB0aGF0IHJlbHkgb24gc2lnaHQuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTGlmZSBEcmFpblwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFNwZWxsIEF0dGFjazogKzQgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIGNyZWF0dXJlLiBIaXQ6IDEwICgzZDYpIG5lY3JvdGljIGRhbWFnZS4gVGhlIHRhcmdldCBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxMCBDb25zdGl0dXRpb24gc2F2aW5nIHRocm93IG9yIGl0cyBoaXQgcG9pbnQgbWF4aW11bSBpcyByZWR1Y2VkIGJ5IGFuIGFtb3VudCBlcXVhbCB0byB0aGUgZGFtYWdlIHRha2VuLiBUaGlzIHJlZHVjdGlvbiBsYXN0cyB1bnRpbCB0aGUgY3JlYXR1cmUgZmluaXNoZXMgYSBsb25nIHJlc3QuIFRoZSB0YXJnZXQgZGllcyBpZiB0aGlzIGVmZmVjdCByZWR1Y2VzIGl0cyBoaXQgcG9pbnQgbWF4aW11bSB0byAwLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDQsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjNkNlwiLFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJTcGlkZXJcIixcblx0XHRzaXplOiBcIlRpbnlcIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJiZWFzdFwiLFxuXHRcdHN1YnR5cGU6IFwiXCIsXG5cdFx0YWxpZ25tZW50OiBcInVuYWxpZ25lZFwiLFxuXHRcdGFjOiAxMixcblx0XHRocDogMSxcblx0XHRoaXRfZGljZTogXCIxZDRcIixcblx0XHRzcGVlZDogXCIyMCBmdC4sIGNsaW1iIDIwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbMiwgMTQsIDgsIDEsIDEwLCAyXSxcblx0XHRza2lsbHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdHN0ZWFsdGg6IDQsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0c2Vuc2VzOiBcImRhcmt2aXNpb24gMzAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTJcIixcblx0XHRsYW5ndWFnZXM6IFwiXCIsXG5cdFx0Y3I6IFwiMFwiLFxuXHRcdHRyYWl0czogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlNwaWRlciBDbGltYlwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBzcGlkZXIgY2FuIGNsaW1iIGRpZmZpY3VsdCBzdXJmYWNlcywgaW5jbHVkaW5nIHVwc2lkZSBkb3duIG9uIGNlaWxpbmdzLCB3aXRob3V0IG5lZWRpbmcgdG8gbWFrZSBhbiBhYmlsaXR5IGNoZWNrLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIldlYiBTZW5zZVwiLFxuXHRcdFx0XHRkZXNjOiBcIldoaWxlIGluIGNvbnRhY3Qgd2l0aCBhIHdlYiwgdGhlIHNwaWRlciBrbm93cyB0aGUgZXhhY3QgbG9jYXRpb24gb2YgYW55IG90aGVyIGNyZWF0dXJlIGluIGNvbnRhY3Qgd2l0aCB0aGUgc2FtZSB3ZWIuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiV2ViIFdhbGtlclwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBzcGlkZXIgaWdub3JlcyBtb3ZlbWVudCByZXN0cmljdGlvbnMgY2F1c2VkIGJ5IHdlYmJpbmcuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQml0ZVwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs0IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSBjcmVhdHVyZS4gSGl0OiAxIHBpZXJjaW5nIGRhbWFnZSwgYW5kIHRoZSB0YXJnZXQgbXVzdCBzdWNjZWVkIG9uIGEgREMgOSBDb25zdGl0dXRpb24gc2F2aW5nIHRocm93IG9yIHRha2UgMiAoMWQ0KSBwb2lzb24gZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDQsXG5cdFx0XHRcdGRhbWFnZV9ib251czogMSxcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiU3Bpcml0IE5hZ2FcIixcblx0XHRzaXplOiBcIkxhcmdlXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwibW9uc3Ryb3NpdHlcIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJjaGFvdGljIGV2aWxcIixcblx0XHRhYzogMTUsXG5cdFx0aHA6IDc1LFxuXHRcdGhpdF9kaWNlOiBcIjEwZDEwXCIsXG5cdFx0c3BlZWQ6IFwiNDAgZnQuXCIsXG5cdFx0c3RhdHM6IFsxOCwgMTcsIDE0LCAxNiwgMTUsIDE2XSxcblx0XHRzYXZlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRkZXh0ZXJpdHk6IDYsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRjb25zdGl0dXRpb246IDUsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHR3aXNkb206IDUsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRjaGFyaXNtYTogNixcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJwb2lzb25cIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczogXCJjaGFybWVkLCBwb2lzb25lZFwiLFxuXHRcdHNlbnNlczogXCJkYXJrdmlzaW9uIDYwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDEyXCIsXG5cdFx0bGFuZ3VhZ2VzOiBcIkFieXNzYWwsIENvbW1vblwiLFxuXHRcdGNyOiBcIjhcIixcblx0XHR0cmFpdHM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJSZWp1dmVuYXRpb25cIixcblx0XHRcdFx0ZGVzYzogXCJJZiBpdCBkaWVzLCB0aGUgbmFnYSByZXR1cm5zIHRvIGxpZmUgaW4gMWQ2IGRheXMgYW5kIHJlZ2FpbnMgYWxsIGl0cyBoaXQgcG9pbnRzLiBPbmx5IGEgd2lzaCBzcGVsbCBjYW4gcHJldmVudCB0aGlzIHRyYWl0IGZyb20gZnVuY3Rpb25pbmcuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQml0ZVwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs3IHRvIGhpdCwgcmVhY2ggMTAgZnQuLCBvbmUgY3JlYXR1cmUuIEhpdDogNyAoMWQ2ICsgNCkgcGllcmNpbmcgZGFtYWdlLCBhbmQgdGhlIHRhcmdldCBtdXN0IG1ha2UgYSBEQyAxMyBDb25zdGl0dXRpb24gc2F2aW5nIHRocm93LCB0YWtpbmcgMzEgKDdkOCkgcG9pc29uIGRhbWFnZSBvbiBhIGZhaWxlZCBzYXZlLCBvciBoYWxmIGFzIG11Y2ggZGFtYWdlIG9uIGEgc3VjY2Vzc2Z1bCBvbmUuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNyxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMWQ2XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogNCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRzcGVsbHM6IFtcblx0XHRcdFwiVGhlIG5hZ2EgaXMgYSAxMHRoLWxldmVsIHNwZWxsY2FzdGVyLiBJdHMgc3BlbGxjYXN0aW5nIGFiaWxpdHkgaXMgSW50ZWxsaWdlbmNlIChzcGVsbCBzYXZlIERDIDE0LCArNiB0byBoaXQgd2l0aCBzcGVsbCBhdHRhY2tzKSwgYW5kIGl0IG5lZWRzIG9ubHkgdmVyYmFsIGNvbXBvbmVudHMgdG8gY2FzdCBpdHMgc3BlbGxzLiBJdCBoYXMgdGhlIGZvbGxvd2luZyB3aXphcmQgc3BlbGxzIHByZXBhcmVkOlwiLFxuXHRcdFx0e1xuXHRcdFx0XHRcIkNhbnRyaXBzIChhdCB3aWxsKVwiOiBcIm1hZ2UgaGFuZCwgbWlub3IgaWxsdXNpb24sIHJheSBvZiBmcm9zdFwiLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0XCIxc3QgbGV2ZWwgKDQgc2xvdHMpXCI6IFwiY2hhcm0gcGVyc29uLCBkZXRlY3QgbWFnaWMsIHNsZWVwXCIsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRcIjJuZCBsZXZlbCAoMyBzbG90cylcIjogXCJkZXRlY3QgdGhvdWdodHMsIGhvbGQgcGVyc29uXCIsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRcIjNyZCBsZXZlbCAoMyBzbG90cylcIjogXCJsaWdodG5pbmcgYm9sdCwgd2F0ZXIgYnJlYXRoaW5nXCIsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRcIjR0aCBsZXZlbCAoMyBzbG90cylcIjogXCJibGlnaHQsIGRpbWVuc2lvbiBkb29yXCIsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRcIjV0aCBsZXZlbCAoMiBzbG90cylcIjogXCJkb21pbmF0ZSBwZXJzb25cIixcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiU3ByaXRlXCIsXG5cdFx0c2l6ZTogXCJUaW55XCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwiZmV5XCIsXG5cdFx0c3VidHlwZTogXCJcIixcblx0XHRhbGlnbm1lbnQ6IFwibmV1dHJhbCBnb29kXCIsXG5cdFx0YWM6IDE1LFxuXHRcdGhwOiAyLFxuXHRcdGhpdF9kaWNlOiBcIjFkNFwiLFxuXHRcdHNwZWVkOiBcIjEwIGZ0LiwgZmx5IDQwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbMywgMTgsIDEwLCAxNCwgMTMsIDExXSxcblx0XHRza2lsbHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdHBlcmNlcHRpb246IDMsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRzdGVhbHRoOiA4LFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuXHRcdGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuXHRcdHNlbnNlczogXCJwYXNzaXZlIFBlcmNlcHRpb24gMTNcIixcblx0XHRsYW5ndWFnZXM6IFwiQ29tbW9uLCBFbHZpc2gsIFN5bHZhblwiLFxuXHRcdGNyOiBcIjEvNFwiLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJMb25nc3dvcmRcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMiB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDEgc2xhc2hpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogMSxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiU2hvcnRib3dcIixcblx0XHRcdFx0ZGVzYzogXCJSYW5nZWQgV2VhcG9uIEF0dGFjazogKzYgdG8gaGl0LCByYW5nZSA0MC8xNjAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDEgcGllcmNpbmcgZGFtYWdlLCBhbmQgdGhlIHRhcmdldCBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxMCBDb25zdGl0dXRpb24gc2F2aW5nIHRocm93IG9yIGJlY29tZSBwb2lzb25lZCBmb3IgMSBtaW51dGUuIElmIGl0cyBzYXZpbmcgdGhyb3cgcmVzdWx0IGlzIDUgb3IgbG93ZXIsIHRoZSBwb2lzb25lZCB0YXJnZXQgZmFsbHMgdW5jb25zY2lvdXMgZm9yIHRoZSBzYW1lIGR1cmF0aW9uLCBvciB1bnRpbCBpdCB0YWtlcyBkYW1hZ2Ugb3IgYW5vdGhlciBjcmVhdHVyZSB0YWtlcyBhbiBhY3Rpb24gdG8gc2hha2UgaXQgYXdha2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiAxLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJIZWFydCBTaWdodFwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBzcHJpdGUgdG91Y2hlcyBhIGNyZWF0dXJlIGFuZCBtYWdpY2FsbHkga25vd3MgdGhlIGNyZWF0dXJlJ3MgY3VycmVudCBlbW90aW9uYWwgc3RhdGUuIElmIHRoZSB0YXJnZXQgZmFpbHMgYSBEQyAxMCBDaGFyaXNtYSBzYXZpbmcgdGhyb3csIHRoZSBzcHJpdGUgYWxzbyBrbm93cyB0aGUgY3JlYXR1cmUncyBhbGlnbm1lbnQuIENlbGVzdGlhbHMsIGZpZW5kcywgYW5kIHVuZGVhZCBhdXRvbWF0aWNhbGx5IGZhaWwgdGhlIHNhdmluZyB0aHJvdy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJJbnZpc2liaWxpdHlcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgc3ByaXRlIG1hZ2ljYWxseSB0dXJucyBpbnZpc2libGUgdW50aWwgaXQgYXR0YWNrcyBvciBjYXN0cyBhIHNwZWxsLCBvciB1bnRpbCBpdHMgY29uY2VudHJhdGlvbiBlbmRzIChhcyBpZiBjb25jZW50cmF0aW5nIG9uIGEgc3BlbGwpLiBBbnkgZXF1aXBtZW50IHRoZSBzcHJpdGUgd2VhcnMgb3IgY2FycmllcyBpcyBpbnZpc2libGUgd2l0aCBpdC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJTcHlcIixcblx0XHRzaXplOiBcIk1lZGl1bVwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcImh1bWFub2lkXCIsXG5cdFx0c3VidHlwZTogXCJhbnkgcmFjZVwiLFxuXHRcdGFsaWdubWVudDogXCJhbnkgYWxpZ25tZW50XCIsXG5cdFx0YWM6IDEyLFxuXHRcdGhwOiAyNyxcblx0XHRoaXRfZGljZTogXCI2ZDhcIixcblx0XHRzcGVlZDogXCIzMCBmdC5cIixcblx0XHRzdGF0czogWzEwLCAxNSwgMTAsIDEyLCAxNCwgMTZdLFxuXHRcdHNraWxsc2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0ZGVjZXB0aW9uOiA1LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0aW5zaWdodDogNCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdGludmVzdGlnYXRpb246IDUsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRwZXJjZXB0aW9uOiA2LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0cGVyc3Vhc2lvbjogNSxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHN0ZWFsdGg6IDQsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0c2Vuc2VzOiBcInBhc3NpdmUgUGVyY2VwdGlvbiAxNlwiLFxuXHRcdGxhbmd1YWdlczogXCJhbnkgdHdvIGxhbmd1YWdlc1wiLFxuXHRcdGNyOiBcIjFcIixcblx0XHR0cmFpdHM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJDdW5uaW5nIEFjdGlvblwiLFxuXHRcdFx0XHRkZXNjOiBcIk9uIGVhY2ggb2YgaXRzIHR1cm5zLCB0aGUgc3B5IGNhbiB1c2UgYSBib251cyBhY3Rpb24gdG8gdGFrZSB0aGUgRGFzaCwgRGlzZW5nYWdlLCBvciBIaWRlIGFjdGlvbi5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJTbmVhayBBdHRhY2sgKDEvVHVybilcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgc3B5IGRlYWxzIGFuIGV4dHJhIDcgKDJkNikgZGFtYWdlIHdoZW4gaXQgaGl0cyBhIHRhcmdldCB3aXRoIGEgd2VhcG9uIGF0dGFjayBhbmQgaGFzIGFkdmFudGFnZSBvbiB0aGUgYXR0YWNrIHJvbGwsIG9yIHdoZW4gdGhlIHRhcmdldCBpcyB3aXRoaW4gNSBmdC4gb2YgYW4gYWxseSBvZiB0aGUgc3B5IHRoYXQgaXNuJ3QgaW5jYXBhY2l0YXRlZCBhbmQgdGhlIHNweSBkb2Vzbid0IGhhdmUgZGlzYWR2YW50YWdlIG9uIHRoZSBhdHRhY2sgcm9sbC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIyZDZcIixcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgc3B5IG1ha2VzIHR3byBtZWxlZSBhdHRhY2tzLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlNob3J0c3dvcmRcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNCB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDUgKDFkNiArIDIpIHBpZXJjaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA0LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxZDZcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiAyLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJIYW5kIENyb3NzYm93XCIsXG5cdFx0XHRcdGRlc2M6IFwiUmFuZ2VkIFdlYXBvbiBBdHRhY2s6ICs0IHRvIGhpdCwgcmFuZ2UgMzAvMTIwIGZ0Liwgb25lIHRhcmdldC4gSGl0OiA1ICgxZDYgKyAyKSBwaWVyY2luZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNCxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMWQ2XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogMixcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiU3RlYW0gTWVwaGl0XCIsXG5cdFx0c2l6ZTogXCJTbWFsbFwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcImVsZW1lbnRhbFwiLFxuXHRcdHN1YnR5cGU6IFwiXCIsXG5cdFx0YWxpZ25tZW50OiBcIm5ldXRyYWwgZXZpbFwiLFxuXHRcdGFjOiAxMCxcblx0XHRocDogMjEsXG5cdFx0aGl0X2RpY2U6IFwiNmQ2XCIsXG5cdFx0c3BlZWQ6IFwiMzAgZnQuLCBmbHkgMzAgZnQuXCIsXG5cdFx0c3RhdHM6IFs1LCAxMSwgMTAsIDExLCAxMCwgMTJdLFxuXHRcdGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuXHRcdGRhbWFnZV9pbW11bml0aWVzOiBcImZpcmUsIHBvaXNvblwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcInBvaXNvbmVkXCIsXG5cdFx0c2Vuc2VzOiBcImRhcmt2aXNpb24gNjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTBcIixcblx0XHRsYW5ndWFnZXM6IFwiQXF1YW4sIElnbmFuXCIsXG5cdFx0Y3I6IFwiMS80XCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiRGVhdGggQnVyc3RcIixcblx0XHRcdFx0ZGVzYzogXCJXaGVuIHRoZSBtZXBoaXQgZGllcywgaXQgZXhwbG9kZXMgaW4gYSBjbG91ZCBvZiBzdGVhbS4gRWFjaCBjcmVhdHVyZSB3aXRoaW4gNSBmdC4gb2YgdGhlIG1lcGhpdCBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxMCBEZXh0ZXJpdHkgc2F2aW5nIHRocm93IG9yIHRha2UgNCAoMWQ4KSBmaXJlIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxZDhcIixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiSW5uYXRlIFNwZWxsY2FzdGluZyAoMS9EYXkpXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIG1lcGhpdCBjYW4gaW5uYXRlbHkgY2FzdCBibHVyLCByZXF1aXJpbmcgbm8gbWF0ZXJpYWwgY29tcG9uZW50cy4gSXRzIGlubmF0ZSBzcGVsbGNhc3RpbmcgYWJpbGl0eSBpcyBDaGFyaXNtYS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJDbGF3c1wiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICsyIHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSBjcmVhdHVyZS4gSGl0OiAyICgxZDQpIHNsYXNoaW5nIGRhbWFnZSBwbHVzIDIgKDFkNCkgZmlyZSBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMixcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMmQ0XCIsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlN0ZWFtIEJyZWF0aCAoUmVjaGFyZ2UgNilcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgbWVwaGl0IGV4aGFsZXMgYSAxNS1mb290IGNvbmUgb2Ygc2NhbGRpbmcgc3RlYW0uIEVhY2ggY3JlYXR1cmUgaW4gdGhhdCBhcmVhIG11c3Qgc3VjY2VlZCBvbiBhIERDIDEwIERleHRlcml0eSBzYXZpbmcgdGhyb3csIHRha2luZyA0ICgxZDgpIGZpcmUgZGFtYWdlIG9uIGEgZmFpbGVkIHNhdmUsIG9yIGhhbGYgYXMgbXVjaCBkYW1hZ2Ugb24gYSBzdWNjZXNzZnVsIG9uZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJWYXJpYW50OiBTdW1tb24gTWVwaGl0cyAoMS9EYXkpXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIG1lcGhpdCBoYXMgYSAyNSBwZXJjZW50IGNoYW5jZSBvZiBzdW1tb25pbmcgMWQ0IG1lcGhpdHMgb2YgaXRzIGtpbmQuIEEgc3VtbW9uZWQgbWVwaGl0IGFwcGVhcnMgaW4gYW4gdW5vY2N1cGllZCBzcGFjZSB3aXRoaW4gNjAgZmVldCBvZiBpdHMgc3VtbW9uZXIsIGFjdHMgYXMgYW4gYWxseSBvZiBpdHMgc3VtbW9uZXIsIGFuZCBjYW4ndCBzdW1tb24gb3RoZXIgbWVwaGl0cy4gSXQgcmVtYWlucyBmb3IgMSBtaW51dGUsIHVudGlsIGl0IG9yIGl0cyBzdW1tb25lciBkaWVzLCBvciB1bnRpbCBpdHMgc3VtbW9uZXIgZGlzbWlzc2VzIGl0IGFzIGFuIGFjdGlvbi5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJTdGlyZ2VcIixcblx0XHRzaXplOiBcIlRpbnlcIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJiZWFzdFwiLFxuXHRcdHN1YnR5cGU6IFwiXCIsXG5cdFx0YWxpZ25tZW50OiBcInVuYWxpZ25lZFwiLFxuXHRcdGFjOiAxNCxcblx0XHRocDogMixcblx0XHRoaXRfZGljZTogXCIxZDRcIixcblx0XHRzcGVlZDogXCIxMCBmdC4sIGZseSA0MCBmdC5cIixcblx0XHRzdGF0czogWzQsIDE2LCAxMSwgMiwgOCwgNl0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0c2Vuc2VzOiBcImRhcmt2aXNpb24gNjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gOVwiLFxuXHRcdGxhbmd1YWdlczogXCJcIixcblx0XHRjcjogXCIxLzhcIixcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQmxvb2QgRHJhaW5cIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNSB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgY3JlYXR1cmUuIEhpdDogNSAoMWQ0ICsgMykgcGllcmNpbmcgZGFtYWdlLCBhbmQgdGhlIHN0aXJnZSBhdHRhY2hlcyB0byB0aGUgdGFyZ2V0LiBXaGlsZSBhdHRhY2hlZCwgdGhlIHN0aXJnZSBkb2Vzbid0IGF0dGFjay4gSW5zdGVhZCwgYXQgdGhlIHN0YXJ0IG9mIGVhY2ggb2YgdGhlIHN0aXJnZSdzIHR1cm5zLCB0aGUgdGFyZ2V0IGxvc2VzIDUgKDFkNCArIDMpIGhpdCBwb2ludHMgZHVlIHRvIGJsb29kIGxvc3MuXFxuVGhlIHN0aXJnZSBjYW4gZGV0YWNoIGl0c2VsZiBieSBzcGVuZGluZyA1IGZlZXQgb2YgaXRzIG1vdmVtZW50LiBJdCBkb2VzIHNvIGFmdGVyIGl0IGRyYWlucyAxMCBoaXQgcG9pbnRzIG9mIGJsb29kIGZyb20gdGhlIHRhcmdldCBvciB0aGUgdGFyZ2V0IGRpZXMuIEEgY3JlYXR1cmUsIGluY2x1ZGluZyB0aGUgdGFyZ2V0LCBjYW4gdXNlIGl0cyBhY3Rpb24gdG8gZGV0YWNoIHRoZSBzdGlyZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNSxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMWQ0XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogMyxcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiU3RvbmUgR2lhbnRcIixcblx0XHRzaXplOiBcIkh1Z2VcIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJnaWFudFwiLFxuXHRcdHN1YnR5cGU6IFwiXCIsXG5cdFx0YWxpZ25tZW50OiBcIm5ldXRyYWxcIixcblx0XHRhYzogMTcsXG5cdFx0aHA6IDEyNixcblx0XHRoaXRfZGljZTogXCIxMWQxMlwiLFxuXHRcdHNwZWVkOiBcIjQwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbMjMsIDE1LCAyMCwgMTAsIDEyLCA5XSxcblx0XHRzYXZlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRkZXh0ZXJpdHk6IDUsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRjb25zdGl0dXRpb246IDgsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHR3aXNkb206IDQsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0c2tpbGxzYXZlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRhdGhsZXRpY3M6IDEyLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0cGVyY2VwdGlvbjogNCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcblx0XHRzZW5zZXM6IFwiZGFya3Zpc2lvbiA2MCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxNFwiLFxuXHRcdGxhbmd1YWdlczogXCJHaWFudFwiLFxuXHRcdGNyOiBcIjdcIixcblx0XHR0cmFpdHM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJTdG9uZSBDYW1vdWZsYWdlXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGdpYW50IGhhcyBhZHZhbnRhZ2Ugb24gRGV4dGVyaXR5IChTdGVhbHRoKSBjaGVja3MgbWFkZSB0byBoaWRlIGluIHJvY2t5IHRlcnJhaW4uXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgZ2lhbnQgbWFrZXMgdHdvIGdyZWF0Y2x1YiBhdHRhY2tzLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkdyZWF0Y2x1YlwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs5IHRvIGhpdCwgcmVhY2ggMTUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDE5ICgzZDggKyA2KSBibHVkZ2VvbmluZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogOSxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiM2Q4XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogNixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiUm9ja1wiLFxuXHRcdFx0XHRkZXNjOiBcIlJhbmdlZCBXZWFwb24gQXR0YWNrOiArOSB0byBoaXQsIHJhbmdlIDYwLzI0MCBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMjggKDRkMTAgKyA2KSBibHVkZ2VvbmluZyBkYW1hZ2UuIElmIHRoZSB0YXJnZXQgaXMgYSBjcmVhdHVyZSwgaXQgbXVzdCBzdWNjZWVkIG9uIGEgREMgMTcgU3RyZW5ndGggc2F2aW5nIHRocm93IG9yIGJlIGtub2NrZWQgcHJvbmUuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogOSxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiNGQxMFwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDYsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0cmVhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiUm9jayBDYXRjaGluZ1wiLFxuXHRcdFx0XHRkZXNjOiBcIklmIGEgcm9jayBvciBzaW1pbGFyIG9iamVjdCBpcyBodXJsZWQgYXQgdGhlIGdpYW50LCB0aGUgZ2lhbnQgY2FuLCB3aXRoIGEgc3VjY2Vzc2Z1bCBEQyAxMCBEZXh0ZXJpdHkgc2F2aW5nIHRocm93LCBjYXRjaCB0aGUgbWlzc2lsZSBhbmQgdGFrZSBubyBibHVkZ2VvbmluZyBkYW1hZ2UgZnJvbSBpdC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJTdG9uZSBHb2xlbVwiLFxuXHRcdHNpemU6IFwiTGFyZ2VcIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJjb25zdHJ1Y3RcIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcblx0XHRhYzogMTcsXG5cdFx0aHA6IDE3OCxcblx0XHRoaXRfZGljZTogXCIxN2QxMFwiLFxuXHRcdHNwZWVkOiBcIjMwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbMjIsIDksIDIwLCAzLCAxMSwgMV0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6XG5cdFx0XHRcInBvaXNvbiwgcHN5Y2hpYzsgYmx1ZGdlb25pbmcsIHBpZXJjaW5nLCBhbmQgc2xhc2hpbmcgZnJvbSBub25tYWdpY2FsIHdlYXBvbnMgdGhhdCBhcmVuJ3QgYWRhbWFudGluZVwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOlxuXHRcdFx0XCJjaGFybWVkLCBleGhhdXN0aW9uLCBmcmlnaHRlbmVkLCBwYXJhbHl6ZWQsIHBldHJpZmllZCwgcG9pc29uZWRcIixcblx0XHRzZW5zZXM6IFwiZGFya3Zpc2lvbiAxMjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTBcIixcblx0XHRsYW5ndWFnZXM6IFwidW5kZXJzdGFuZHMgdGhlIGxhbmd1YWdlcyBvZiBpdHMgY3JlYXRvciBidXQgY2FuJ3Qgc3BlYWtcIixcblx0XHRjcjogXCIxMFwiLFxuXHRcdHRyYWl0czogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkltbXV0YWJsZSBGb3JtXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGdvbGVtIGlzIGltbXVuZSB0byBhbnkgc3BlbGwgb3IgZWZmZWN0IHRoYXQgd291bGQgYWx0ZXIgaXRzIGZvcm0uXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTWFnaWMgUmVzaXN0YW5jZVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBnb2xlbSBoYXMgYWR2YW50YWdlIG9uIHNhdmluZyB0aHJvd3MgYWdhaW5zdCBzcGVsbHMgYW5kIG90aGVyIG1hZ2ljYWwgZWZmZWN0cy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJNYWdpYyBXZWFwb25zXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGdvbGVtJ3Mgd2VhcG9uIGF0dGFja3MgYXJlIG1hZ2ljYWwuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgZ29sZW0gbWFrZXMgdHdvIHNsYW0gYXR0YWNrcy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJTbGFtXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzEwIHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTkgKDNkOCArIDYpIGJsdWRnZW9uaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAxMCxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiM2Q4XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogNixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiU2xvdyAoUmVjaGFyZ2UgNS02KVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBnb2xlbSB0YXJnZXRzIG9uZSBvciBtb3JlIGNyZWF0dXJlcyBpdCBjYW4gc2VlIHdpdGhpbiAxMCBmdC4gb2YgaXQuIEVhY2ggdGFyZ2V0IG11c3QgbWFrZSBhIERDIDE3IFdpc2RvbSBzYXZpbmcgdGhyb3cgYWdhaW5zdCB0aGlzIG1hZ2ljLiBPbiBhIGZhaWxlZCBzYXZlLCBhIHRhcmdldCBjYW4ndCB1c2UgcmVhY3Rpb25zLCBpdHMgc3BlZWQgaXMgaGFsdmVkLCBhbmQgaXQgY2FuJ3QgbWFrZSBtb3JlIHRoYW4gb25lIGF0dGFjayBvbiBpdHMgdHVybi4gSW4gYWRkaXRpb24sIHRoZSB0YXJnZXQgY2FuIHRha2UgZWl0aGVyIGFuIGFjdGlvbiBvciBhIGJvbnVzIGFjdGlvbiBvbiBpdHMgdHVybiwgbm90IGJvdGguIFRoZXNlIGVmZmVjdHMgbGFzdCBmb3IgMSBtaW51dGUuIEEgdGFyZ2V0IGNhbiByZXBlYXQgdGhlIHNhdmluZyB0aHJvdyBhdCB0aGUgZW5kIG9mIGVhY2ggb2YgaXRzIHR1cm5zLCBlbmRpbmcgdGhlIGVmZmVjdCBvbiBpdHNlbGYgb24gYSBzdWNjZXNzLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIlN0b3JtIEdpYW50XCIsXG5cdFx0c2l6ZTogXCJIdWdlXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwiZ2lhbnRcIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJjaGFvdGljIGdvb2RcIixcblx0XHRhYzogMTYsXG5cdFx0aHA6IDIzMCxcblx0XHRoaXRfZGljZTogXCIyMGQxMlwiLFxuXHRcdHNwZWVkOiBcIjUwIGZ0Liwgc3dpbSA1MCBmdC5cIixcblx0XHRzdGF0czogWzI5LCAxNCwgMjAsIDE2LCAxOCwgMThdLFxuXHRcdHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdHN0cmVuZ3RoOiAxNCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdGNvbnN0aXR1dGlvbjogMTAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHR3aXNkb206IDksXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRjaGFyaXNtYTogOSxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRza2lsbHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdGFyY2FuYTogOCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdGF0aGxldGljczogMTQsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRoaXN0b3J5OiA4LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0cGVyY2VwdGlvbjogOSxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJjb2xkXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwibGlnaHRuaW5nLCB0aHVuZGVyXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0c2Vuc2VzOiBcInBhc3NpdmUgUGVyY2VwdGlvbiAxOVwiLFxuXHRcdGxhbmd1YWdlczogXCJDb21tb24sIEdpYW50XCIsXG5cdFx0Y3I6IFwiMTNcIixcblx0XHR0cmFpdHM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJBbXBoaWJpb3VzXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGdpYW50IGNhbiBicmVhdGhlIGFpciBhbmQgd2F0ZXIuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiSW5uYXRlIFNwZWxsY2FzdGluZ1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBnaWFudCdzIGlubmF0ZSBzcGVsbGNhc3RpbmcgYWJpbGl0eSBpcyBDaGFyaXNtYSAoc3BlbGwgc2F2ZSBEQyAxNykuIEl0IGNhbiBpbm5hdGVseSBjYXN0IHRoZSBmb2xsb3dpbmcgc3BlbGxzLCByZXF1aXJpbmcgbm8gbWF0ZXJpYWwgY29tcG9uZW50czpcXG5cXG5BdCB3aWxsOiBkZXRlY3QgbWFnaWMsIGZlYXRoZXIgZmFsbCwgbGV2aXRhdGUsIGxpZ2h0XFxuMy9kYXkgZWFjaDogY29udHJvbCB3ZWF0aGVyLCB3YXRlciBicmVhdGhpbmdcIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJNdWx0aWF0dGFja1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBnaWFudCBtYWtlcyB0d28gZ3JlYXRzd29yZCBhdHRhY2tzLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkdyZWF0c3dvcmRcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMTQgdG8gaGl0LCByZWFjaCAxMCBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMzAgKDZkNiArIDkpIHNsYXNoaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAxNCxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiNmQ2XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogOSxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiUm9ja1wiLFxuXHRcdFx0XHRkZXNjOiBcIlJhbmdlZCBXZWFwb24gQXR0YWNrOiArMTQgdG8gaGl0LCByYW5nZSA2MC8yNDAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDM1ICg0ZDEyICsgOSkgYmx1ZGdlb25pbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDE0LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCI0ZDEyXCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogOSxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTGlnaHRuaW5nIFN0cmlrZSAoUmVjaGFyZ2UgNS02KVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBnaWFudCBodXJscyBhIG1hZ2ljYWwgbGlnaHRuaW5nIGJvbHQgYXQgYSBwb2ludCBpdCBjYW4gc2VlIHdpdGhpbiA1MDAgZmVldCBvZiBpdC4gRWFjaCBjcmVhdHVyZSB3aXRoaW4gMTAgZmVldCBvZiB0aGF0IHBvaW50IG11c3QgbWFrZSBhIERDIDE3IERleHRlcml0eSBzYXZpbmcgdGhyb3csIHRha2luZyA1NCAoMTJkOCkgbGlnaHRuaW5nIGRhbWFnZSBvbiBhIGZhaWxlZCBzYXZlLCBvciBoYWxmIGFzIG11Y2ggZGFtYWdlIG9uIGEgc3VjY2Vzc2Z1bCBvbmUuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMTJkOFwiLFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJTdWNjdWJ1cy9JbmN1YnVzXCIsXG5cdFx0c2l6ZTogXCJNZWRpdW1cIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJmaWVuZFwiLFxuXHRcdHN1YnR5cGU6IFwic2hhcGVjaGFuZ2VyXCIsXG5cdFx0YWxpZ25tZW50OiBcIm5ldXRyYWwgZXZpbFwiLFxuXHRcdGFjOiAxNSxcblx0XHRocDogNjYsXG5cdFx0aGl0X2RpY2U6IFwiMTJkOFwiLFxuXHRcdHNwZWVkOiBcIjMwIGZ0LiwgZmx5IDYwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbOCwgMTcsIDEzLCAxNSwgMTIsIDIwXSxcblx0XHRza2lsbHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdGRlY2VwdGlvbjogOSxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdGluc2lnaHQ6IDUsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRwZXJjZXB0aW9uOiA1LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0cGVyc3Vhc2lvbjogOSxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHN0ZWFsdGg6IDcsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6XG5cdFx0XHRcImNvbGQsIGZpcmUsIGxpZ2h0bmluZywgcG9pc29uOyBibHVkZ2VvbmluZywgcGllcmNpbmcsIGFuZCBzbGFzaGluZyBmcm9tIG5vbm1hZ2ljYWwgd2VhcG9uc1wiLFxuXHRcdGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuXHRcdHNlbnNlczogXCJkYXJrdmlzaW9uIDYwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDE1XCIsXG5cdFx0bGFuZ3VhZ2VzOiBcIkFieXNzYWwsIENvbW1vbiwgSW5mZXJuYWwsIHRlbGVwYXRoeSA2MCBmdC5cIixcblx0XHRjcjogXCI0XCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiVGVsZXBhdGhpYyBCb25kXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGZpZW5kIGlnbm9yZXMgdGhlIHJhbmdlIHJlc3RyaWN0aW9uIG9uIGl0cyB0ZWxlcGF0aHkgd2hlbiBjb21tdW5pY2F0aW5nIHdpdGggYSBjcmVhdHVyZSBpdCBoYXMgY2hhcm1lZC4gVGhlIHR3byBkb24ndCBldmVuIG5lZWQgdG8gYmUgb24gdGhlIHNhbWUgcGxhbmUgb2YgZXhpc3RlbmNlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlNoYXBlY2hhbmdlclwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBmaWVuZCBjYW4gdXNlIGl0cyBhY3Rpb24gdG8gcG9seW1vcnBoIGludG8gYSBTbWFsbCBvciBNZWRpdW0gaHVtYW5vaWQsIG9yIGJhY2sgaW50byBpdHMgdHJ1ZSBmb3JtLiBXaXRob3V0IHdpbmdzLCB0aGUgZmllbmQgbG9zZXMgaXRzIGZseWluZyBzcGVlZC4gT3RoZXIgdGhhbiBpdHMgc2l6ZSBhbmQgc3BlZWQsIGl0cyBzdGF0aXN0aWNzIGFyZSB0aGUgc2FtZSBpbiBlYWNoIGZvcm0uIEFueSBlcXVpcG1lbnQgaXQgaXMgd2VhcmluZyBvciBjYXJyeWluZyBpc24ndCB0cmFuc2Zvcm1lZC4gSXQgcmV2ZXJ0cyB0byBpdHMgdHJ1ZSBmb3JtIGlmIGl0IGRpZXMuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQ2xhdyAoRmllbmQgRm9ybSBPbmx5KVwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs1IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogNiAoMWQ2ICsgMykgc2xhc2hpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDUsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjFkNlwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDMsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkNoYXJtXCIsXG5cdFx0XHRcdGRlc2M6IFwiT25lIGh1bWFub2lkIHRoZSBmaWVuZCBjYW4gc2VlIHdpdGhpbiAzMCBmZWV0IG9mIGl0IG11c3Qgc3VjY2VlZCBvbiBhIERDIDE1IFdpc2RvbSBzYXZpbmcgdGhyb3cgb3IgYmUgbWFnaWNhbGx5IGNoYXJtZWQgZm9yIDEgZGF5LiBUaGUgY2hhcm1lZCB0YXJnZXQgb2JleXMgdGhlIGZpZW5kJ3MgdmVyYmFsIG9yIHRlbGVwYXRoaWMgY29tbWFuZHMuIElmIHRoZSB0YXJnZXQgc3VmZmVycyBhbnkgaGFybSBvciByZWNlaXZlcyBhIHN1aWNpZGFsIGNvbW1hbmQsIGl0IGNhbiByZXBlYXQgdGhlIHNhdmluZyB0aHJvdywgZW5kaW5nIHRoZSBlZmZlY3Qgb24gYSBzdWNjZXNzLiBJZiB0aGUgdGFyZ2V0IHN1Y2Nlc3NmdWxseSBzYXZlcyBhZ2FpbnN0IHRoZSBlZmZlY3QsIG9yIGlmIHRoZSBlZmZlY3Qgb24gaXQgZW5kcywgdGhlIHRhcmdldCBpcyBpbW11bmUgdG8gdGhpcyBmaWVuZCdzIENoYXJtIGZvciB0aGUgbmV4dCAyNCBob3Vycy5cXG5UaGUgZmllbmQgY2FuIGhhdmUgb25seSBvbmUgdGFyZ2V0IGNoYXJtZWQgYXQgYSB0aW1lLiBJZiBpdCBjaGFybXMgYW5vdGhlciwgdGhlIGVmZmVjdCBvbiB0aGUgcHJldmlvdXMgdGFyZ2V0IGVuZHMuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiRHJhaW5pbmcgS2lzc1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBmaWVuZCBraXNzZXMgYSBjcmVhdHVyZSBjaGFybWVkIGJ5IGl0IG9yIGEgd2lsbGluZyBjcmVhdHVyZS4gVGhlIHRhcmdldCBtdXN0IG1ha2UgYSBEQyAxNSBDb25zdGl0dXRpb24gc2F2aW5nIHRocm93IGFnYWluc3QgdGhpcyBtYWdpYywgdGFraW5nIDMyICg1ZDEwICsgNSkgcHN5Y2hpYyBkYW1hZ2Ugb24gYSBmYWlsZWQgc2F2ZSwgb3IgaGFsZiBhcyBtdWNoIGRhbWFnZSBvbiBhIHN1Y2Nlc3NmdWwgb25lLiBUaGUgdGFyZ2V0J3MgaGl0IHBvaW50IG1heGltdW0gaXMgcmVkdWNlZCBieSBhbiBhbW91bnQgZXF1YWwgdG8gdGhlIGRhbWFnZSB0YWtlbi4gVGhpcyByZWR1Y3Rpb24gbGFzdHMgdW50aWwgdGhlIHRhcmdldCBmaW5pc2hlcyBhIGxvbmcgcmVzdC4gVGhlIHRhcmdldCBkaWVzIGlmIHRoaXMgZWZmZWN0IHJlZHVjZXMgaXRzIGhpdCBwb2ludCBtYXhpbXVtIHRvIDAuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiNWQxMFwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDUsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkV0aGVyZWFsbmVzc1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBmaWVuZCBtYWdpY2FsbHkgZW50ZXJzIHRoZSBFdGhlcmVhbCBQbGFuZSBmcm9tIHRoZSBNYXRlcmlhbCBQbGFuZSwgb3IgdmljZSB2ZXJzYS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJTd2FybSBvZiBCYXRzXCIsXG5cdFx0c2l6ZTogXCJNZWRpdW1cIixcblx0XHR0eXBlOiBcInN3YXJtIG9mIFRpbnkgYmVhc3RzXCIsXG5cdFx0c3VidHlwZTogXCJcIixcblx0XHRhbGlnbm1lbnQ6IFwidW5hbGlnbmVkXCIsXG5cdFx0YWM6IDEyLFxuXHRcdGhwOiAyMixcblx0XHRoaXRfZGljZTogXCI1ZDhcIixcblx0XHRzcGVlZDogXCIwIGZ0LiwgZmx5IDMwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbNSwgMTUsIDEwLCAyLCAxMiwgNF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiYmx1ZGdlb25pbmcsIHBpZXJjaW5nLCBzbGFzaGluZ1wiLFxuXHRcdGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOlxuXHRcdFx0XCJjaGFybWVkLCBmcmlnaHRlbmVkLCBncmFwcGxlZCwgcGFyYWx5emVkLCBwZXRyaWZpZWQsIHByb25lLCByZXN0cmFpbmVkLCBzdHVubmVkXCIsXG5cdFx0c2Vuc2VzOiBcImJsaW5kc2lnaHQgNjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTFcIixcblx0XHRsYW5ndWFnZXM6IFwiXCIsXG5cdFx0Y3I6IFwiMS80XCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiRWNob2xvY2F0aW9uXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIHN3YXJtIGNhbid0IHVzZSBpdHMgYmxpbmRzaWdodCB3aGlsZSBkZWFmZW5lZC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJLZWVuIEhlYXJpbmdcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgc3dhcm0gaGFzIGFkdmFudGFnZSBvbiBXaXNkb20gKFBlcmNlcHRpb24pIGNoZWNrcyB0aGF0IHJlbHkgb24gaGVhcmluZy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJTd2FybVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBzd2FybSBjYW4gb2NjdXB5IGFub3RoZXIgY3JlYXR1cmUncyBzcGFjZSBhbmQgdmljZSB2ZXJzYSwgYW5kIHRoZSBzd2FybSBjYW4gbW92ZSB0aHJvdWdoIGFueSBvcGVuaW5nIGxhcmdlIGVub3VnaCBmb3IgYSBUaW55IGJhdC4gVGhlIHN3YXJtIGNhbid0IHJlZ2FpbiBoaXQgcG9pbnRzIG9yIGdhaW4gdGVtcG9yYXJ5IGhpdCBwb2ludHMuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQml0ZXNcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNCB0byBoaXQsIHJlYWNoIDAgZnQuLCBvbmUgY3JlYXR1cmUgaW4gdGhlIHN3YXJtJ3Mgc3BhY2UuIEhpdDogNSAoMmQ0KSBwaWVyY2luZyBkYW1hZ2UsIG9yIDIgKDFkNCkgcGllcmNpbmcgZGFtYWdlIGlmIHRoZSBzd2FybSBoYXMgaGFsZiBvZiBpdHMgaGl0IHBvaW50cyBvciBmZXdlci5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA0LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIyZDRcIixcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiU3dhcm0gb2YgQmVldGxlc1wiLFxuXHRcdHNpemU6IFwiTWVkaXVtXCIsXG5cdFx0dHlwZTogXCJzd2FybSBvZiBUaW55IGJlYXN0c1wiLFxuXHRcdHN1YnR5cGU6IFwiXCIsXG5cdFx0YWxpZ25tZW50OiBcInVuYWxpZ25lZFwiLFxuXHRcdGFjOiAxMixcblx0XHRocDogMjIsXG5cdFx0aGl0X2RpY2U6IFwiNWQ4XCIsXG5cdFx0c3BlZWQ6IFwiMjAgZnQuLCBidXJyb3cgNSBmdC4sIGNsaW1iIDIwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbMywgMTMsIDEwLCAxLCA3LCAxXSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJibHVkZ2VvbmluZywgcGllcmNpbmcsIHNsYXNoaW5nXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6XG5cdFx0XHRcImNoYXJtZWQsIGZyaWdodGVuZWQsIGdyYXBwbGVkLCBwYXJhbHl6ZWQsIHBldHJpZmllZCwgcHJvbmUsIHJlc3RyYWluZWQsIHN0dW5uZWRcIixcblx0XHRzZW5zZXM6IFwiYmxpbmRzaWdodCAxMCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiA4XCIsXG5cdFx0bGFuZ3VhZ2VzOiBcIlwiLFxuXHRcdGNyOiBcIjEvMlwiLFxuXHRcdHRyYWl0czogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlN3YXJtXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIHN3YXJtIGNhbiBvY2N1cHkgYW5vdGhlciBjcmVhdHVyZSdzIHNwYWNlIGFuZCB2aWNlIHZlcnNhLCBhbmQgdGhlIHN3YXJtIGNhbiBtb3ZlIHRocm91Z2ggYW55IG9wZW5pbmcgbGFyZ2UgZW5vdWdoIGZvciBhIFRpbnkgaW5zZWN0LiBUaGUgc3dhcm0gY2FuJ3QgcmVnYWluIGhpdCBwb2ludHMgb3IgZ2FpbiB0ZW1wb3JhcnkgaGl0IHBvaW50cy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJCaXRlc1wiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICszIHRvIGhpdCwgcmVhY2ggMCBmdC4sIG9uZSB0YXJnZXQgaW4gdGhlIHN3YXJtJ3Mgc3BhY2UuIEhpdDogMTAgKDRkNCkgcGllcmNpbmcgZGFtYWdlLCBvciA1ICgyZDQpIHBpZXJjaW5nIGRhbWFnZSBpZiB0aGUgc3dhcm0gaGFzIGhhbGYgb2YgaXRzIGhpdCBwb2ludHMgb3IgZmV3ZXIuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMyxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiNGQ0XCIsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIlN3YXJtIG9mIENlbnRpcGVkZXNcIixcblx0XHRzaXplOiBcIk1lZGl1bVwiLFxuXHRcdHR5cGU6IFwic3dhcm0gb2YgVGlueSBiZWFzdHNcIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcblx0XHRhYzogMTIsXG5cdFx0aHA6IDIyLFxuXHRcdGhpdF9kaWNlOiBcIjVkOFwiLFxuXHRcdHNwZWVkOiBcIjIwIGZ0LiwgY2xpbWIgMjAgZnQuXCIsXG5cdFx0c3RhdHM6IFszLCAxMywgMTAsIDEsIDcsIDFdLFxuXHRcdGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX3Jlc2lzdGFuY2VzOiBcImJsdWRnZW9uaW5nLCBwaWVyY2luZywgc2xhc2hpbmdcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczpcblx0XHRcdFwiY2hhcm1lZCwgZnJpZ2h0ZW5lZCwgZ3JhcHBsZWQsIHBhcmFseXplZCwgcGV0cmlmaWVkLCBwcm9uZSwgcmVzdHJhaW5lZCwgc3R1bm5lZFwiLFxuXHRcdHNlbnNlczogXCJibGluZHNpZ2h0IDEwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDhcIixcblx0XHRsYW5ndWFnZXM6IFwiXCIsXG5cdFx0Y3I6IFwiMS8yXCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiU3dhcm1cIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgc3dhcm0gY2FuIG9jY3VweSBhbm90aGVyIGNyZWF0dXJlJ3Mgc3BhY2UgYW5kIHZpY2UgdmVyc2EsIGFuZCB0aGUgc3dhcm0gY2FuIG1vdmUgdGhyb3VnaCBhbnkgb3BlbmluZyBsYXJnZSBlbm91Z2ggZm9yIGEgVGlueSBpbnNlY3QuIFRoZSBzd2FybSBjYW4ndCByZWdhaW4gaGl0IHBvaW50cyBvciBnYWluIHRlbXBvcmFyeSBoaXQgcG9pbnRzLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkJpdGVzXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzMgdG8gaGl0LCByZWFjaCAwIGZ0Liwgb25lIHRhcmdldCBpbiB0aGUgc3dhcm0ncyBzcGFjZS4gSGl0OiAxMCAoNGQ0KSBwaWVyY2luZyBkYW1hZ2UsIG9yIDUgKDJkNCkgcGllcmNpbmcgZGFtYWdlIGlmIHRoZSBzd2FybSBoYXMgaGFsZiBvZiBpdHMgaGl0IHBvaW50cyBvciBmZXdlci5cXG5BIGNyZWF0dXJlIHJlZHVjZWQgdG8gMCBoaXQgcG9pbnRzIGJ5IGEgc3dhcm0gb2YgY2VudGlwZWRlcyBpcyBzdGFibGUgYnV0IHBvaXNvbmVkIGZvciAxIGhvdXIsIGV2ZW4gYWZ0ZXIgcmVnYWluaW5nIGhpdCBwb2ludHMsIGFuZCBwYXJhbHl6ZWQgd2hpbGUgcG9pc29uZWQgaW4gdGhpcyB3YXkuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMyxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiNGQ0XCIsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIlN3YXJtIG9mIEluc2VjdHNcIixcblx0XHRzaXplOiBcIk1lZGl1bVwiLFxuXHRcdHR5cGU6IFwic3dhcm0gb2YgVGlueSBiZWFzdHNcIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcblx0XHRhYzogMTIsXG5cdFx0aHA6IDIyLFxuXHRcdGhpdF9kaWNlOiBcIjVkOFwiLFxuXHRcdHNwZWVkOiBcIjIwIGZ0LiwgY2xpbWIgMjAgZnQuXCIsXG5cdFx0c3RhdHM6IFszLCAxMywgMTAsIDEsIDcsIDFdLFxuXHRcdGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX3Jlc2lzdGFuY2VzOiBcImJsdWRnZW9uaW5nLCBwaWVyY2luZywgc2xhc2hpbmdcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczpcblx0XHRcdFwiY2hhcm1lZCwgZnJpZ2h0ZW5lZCwgZ3JhcHBsZWQsIHBhcmFseXplZCwgcGV0cmlmaWVkLCBwcm9uZSwgcmVzdHJhaW5lZCwgc3R1bm5lZFwiLFxuXHRcdHNlbnNlczogXCJibGluZHNpZ2h0IDEwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDhcIixcblx0XHRsYW5ndWFnZXM6IFwiXCIsXG5cdFx0Y3I6IFwiMS8yXCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiU3dhcm1cIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgc3dhcm0gY2FuIG9jY3VweSBhbm90aGVyIGNyZWF0dXJlJ3Mgc3BhY2UgYW5kIHZpY2UgdmVyc2EsIGFuZCB0aGUgc3dhcm0gY2FuIG1vdmUgdGhyb3VnaCBhbnkgb3BlbmluZyBsYXJnZSBlbm91Z2ggZm9yIGEgVGlueSBpbnNlY3QuIFRoZSBzd2FybSBjYW4ndCByZWdhaW4gaGl0IHBvaW50cyBvciBnYWluIHRlbXBvcmFyeSBoaXQgcG9pbnRzLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkJpdGVzXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzMgdG8gaGl0LCByZWFjaCAwIGZ0Liwgb25lIHRhcmdldCBpbiB0aGUgc3dhcm0ncyBzcGFjZS4gSGl0OiAxMCAoNGQ0KSBwaWVyY2luZyBkYW1hZ2UsIG9yIDUgKDJkNCkgcGllcmNpbmcgZGFtYWdlIGlmIHRoZSBzd2FybSBoYXMgaGFsZiBvZiBpdHMgaGl0IHBvaW50cyBvciBmZXdlci5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAzLFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCI0ZDRcIixcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiU3dhcm0gb2YgUG9pc29ub3VzIFNuYWtlc1wiLFxuXHRcdHNpemU6IFwiTWVkaXVtXCIsXG5cdFx0dHlwZTogXCJzd2FybSBvZiBUaW55IGJlYXN0c1wiLFxuXHRcdHN1YnR5cGU6IFwiXCIsXG5cdFx0YWxpZ25tZW50OiBcInVuYWxpZ25lZFwiLFxuXHRcdGFjOiAxNCxcblx0XHRocDogMzYsXG5cdFx0aGl0X2RpY2U6IFwiOGQ4XCIsXG5cdFx0c3BlZWQ6IFwiMzAgZnQuLCBzd2ltIDMwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbOCwgMTgsIDExLCAxLCAxMCwgM10sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiYmx1ZGdlb25pbmcsIHBpZXJjaW5nLCBzbGFzaGluZ1wiLFxuXHRcdGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOlxuXHRcdFx0XCJjaGFybWVkLCBmcmlnaHRlbmVkLCBncmFwcGxlZCwgcGFyYWx5emVkLCBwZXRyaWZpZWQsIHByb25lLCByZXN0cmFpbmVkLCBzdHVubmVkXCIsXG5cdFx0c2Vuc2VzOiBcImJsaW5kc2lnaHQgMTAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTBcIixcblx0XHRsYW5ndWFnZXM6IFwiXCIsXG5cdFx0Y3I6IFwiMlwiLFxuXHRcdHRyYWl0czogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlN3YXJtXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIHN3YXJtIGNhbiBvY2N1cHkgYW5vdGhlciBjcmVhdHVyZSdzIHNwYWNlIGFuZCB2aWNlIHZlcnNhLCBhbmQgdGhlIHN3YXJtIGNhbiBtb3ZlIHRocm91Z2ggYW55IG9wZW5pbmcgbGFyZ2UgZW5vdWdoIGZvciBhIFRpbnkgc25ha2UuIFRoZSBzd2FybSBjYW4ndCByZWdhaW4gaGl0IHBvaW50cyBvciBnYWluIHRlbXBvcmFyeSBoaXQgcG9pbnRzLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkJpdGVzXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzYgdG8gaGl0LCByZWFjaCAwIGZ0Liwgb25lIGNyZWF0dXJlIGluIHRoZSBzd2FybSdzIHNwYWNlLiBIaXQ6IDcgKDJkNikgcGllcmNpbmcgZGFtYWdlLCBvciAzICgxZDYpIHBpZXJjaW5nIGRhbWFnZSBpZiB0aGUgc3dhcm0gaGFzIGhhbGYgb2YgaXRzIGhpdCBwb2ludHMgb3IgZmV3ZXIuIFRoZSB0YXJnZXQgbXVzdCBtYWtlIGEgREMgMTAgQ29uc3RpdHV0aW9uIHNhdmluZyB0aHJvdywgdGFraW5nIDE0ICg0ZDYpIHBvaXNvbiBkYW1hZ2Ugb24gYSBmYWlsZWQgc2F2ZSwgb3IgaGFsZiBhcyBtdWNoIGRhbWFnZSBvbiBhIHN1Y2Nlc3NmdWwgb25lLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDYsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjJkNlwiLFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJTd2FybSBvZiBRdWlwcGVyc1wiLFxuXHRcdHNpemU6IFwiTWVkaXVtXCIsXG5cdFx0dHlwZTogXCJzd2FybSBvZiBUaW55IGJlYXN0c1wiLFxuXHRcdHN1YnR5cGU6IFwiXCIsXG5cdFx0YWxpZ25tZW50OiBcInVuYWxpZ25lZFwiLFxuXHRcdGFjOiAxMyxcblx0XHRocDogMjgsXG5cdFx0aGl0X2RpY2U6IFwiOGQ4XCIsXG5cdFx0c3BlZWQ6IFwiMCBmdC4sIHN3aW0gNDAgZnQuXCIsXG5cdFx0c3RhdHM6IFsxMywgMTYsIDksIDEsIDcsIDJdLFxuXHRcdGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX3Jlc2lzdGFuY2VzOiBcImJsdWRnZW9uaW5nLCBwaWVyY2luZywgc2xhc2hpbmdcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczpcblx0XHRcdFwiY2hhcm1lZCwgZnJpZ2h0ZW5lZCwgZ3JhcHBsZWQsIHBhcmFseXplZCwgcGV0cmlmaWVkLCBwcm9uZSwgcmVzdHJhaW5lZCwgc3R1bm5lZFwiLFxuXHRcdHNlbnNlczogXCJkYXJrdmlzaW9uIDYwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDhcIixcblx0XHRsYW5ndWFnZXM6IFwiXCIsXG5cdFx0Y3I6IFwiMVwiLFxuXHRcdHRyYWl0czogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkJsb29kIEZyZW56eVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBzd2FybSBoYXMgYWR2YW50YWdlIG9uIG1lbGVlIGF0dGFjayByb2xscyBhZ2FpbnN0IGFueSBjcmVhdHVyZSB0aGF0IGRvZXNuJ3QgaGF2ZSBhbGwgaXRzIGhpdCBwb2ludHMuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiU3dhcm1cIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgc3dhcm0gY2FuIG9jY3VweSBhbm90aGVyIGNyZWF0dXJlJ3Mgc3BhY2UgYW5kIHZpY2UgdmVyc2EsIGFuZCB0aGUgc3dhcm0gY2FuIG1vdmUgdGhyb3VnaCBhbnkgb3BlbmluZyBsYXJnZSBlbm91Z2ggZm9yIGEgVGlueSBxdWlwcGVyLiBUaGUgc3dhcm0gY2FuJ3QgcmVnYWluIGhpdCBwb2ludHMgb3IgZ2FpbiB0ZW1wb3JhcnkgaGl0IHBvaW50cy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJXYXRlciBCcmVhdGhpbmdcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgc3dhcm0gY2FuIGJyZWF0aGUgb25seSB1bmRlcndhdGVyLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkJpdGVzXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzUgdG8gaGl0LCByZWFjaCAwIGZ0Liwgb25lIGNyZWF0dXJlIGluIHRoZSBzd2FybSdzIHNwYWNlLiBIaXQ6IDE0ICg0ZDYpIHBpZXJjaW5nIGRhbWFnZSwgb3IgNyAoMmQ2KSBwaWVyY2luZyBkYW1hZ2UgaWYgdGhlIHN3YXJtIGhhcyBoYWxmIG9mIGl0cyBoaXQgcG9pbnRzIG9yIGZld2VyLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDUsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjRkNlwiLFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJTd2FybSBvZiBSYXRzXCIsXG5cdFx0c2l6ZTogXCJNZWRpdW1cIixcblx0XHR0eXBlOiBcInN3YXJtIG9mIFRpbnkgYmVhc3RzXCIsXG5cdFx0c3VidHlwZTogXCJcIixcblx0XHRhbGlnbm1lbnQ6IFwidW5hbGlnbmVkXCIsXG5cdFx0YWM6IDEwLFxuXHRcdGhwOiAyNCxcblx0XHRoaXRfZGljZTogXCI3ZDhcIixcblx0XHRzcGVlZDogXCIzMCBmdC5cIixcblx0XHRzdGF0czogWzksIDExLCA5LCAyLCAxMCwgM10sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiYmx1ZGdlb25pbmcsIHBpZXJjaW5nLCBzbGFzaGluZ1wiLFxuXHRcdGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOlxuXHRcdFx0XCJjaGFybWVkLCBmcmlnaHRlbmVkLCBncmFwcGxlZCwgcGFyYWx5emVkLCBwZXRyaWZpZWQsIHByb25lLCByZXN0cmFpbmVkLCBzdHVubmVkXCIsXG5cdFx0c2Vuc2VzOiBcImRhcmt2aXNpb24gMzAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTBcIixcblx0XHRsYW5ndWFnZXM6IFwiXCIsXG5cdFx0Y3I6IFwiMS80XCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiS2VlbiBTbWVsbFwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBzd2FybSBoYXMgYWR2YW50YWdlIG9uIFdpc2RvbSAoUGVyY2VwdGlvbikgY2hlY2tzIHRoYXQgcmVseSBvbiBzbWVsbC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJTd2FybVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBzd2FybSBjYW4gb2NjdXB5IGFub3RoZXIgY3JlYXR1cmUncyBzcGFjZSBhbmQgdmljZSB2ZXJzYSwgYW5kIHRoZSBzd2FybSBjYW4gbW92ZSB0aHJvdWdoIGFueSBvcGVuaW5nIGxhcmdlIGVub3VnaCBmb3IgYSBUaW55IHJhdC4gVGhlIHN3YXJtIGNhbid0IHJlZ2FpbiBoaXQgcG9pbnRzIG9yIGdhaW4gdGVtcG9yYXJ5IGhpdCBwb2ludHMuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQml0ZXNcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMiB0byBoaXQsIHJlYWNoIDAgZnQuLCBvbmUgdGFyZ2V0IGluIHRoZSBzd2FybSdzIHNwYWNlLiBIaXQ6IDcgKDJkNikgcGllcmNpbmcgZGFtYWdlLCBvciAzICgxZDYpIHBpZXJjaW5nIGRhbWFnZSBpZiB0aGUgc3dhcm0gaGFzIGhhbGYgb2YgaXRzIGhpdCBwb2ludHMgb3IgZmV3ZXIuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMixcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMmQ2XCIsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIlN3YXJtIG9mIFJhdmVuc1wiLFxuXHRcdHNpemU6IFwiTWVkaXVtXCIsXG5cdFx0dHlwZTogXCJzd2FybSBvZiBUaW55IGJlYXN0c1wiLFxuXHRcdHN1YnR5cGU6IFwiXCIsXG5cdFx0YWxpZ25tZW50OiBcInVuYWxpZ25lZFwiLFxuXHRcdGFjOiAxMixcblx0XHRocDogMjQsXG5cdFx0aGl0X2RpY2U6IFwiN2Q4XCIsXG5cdFx0c3BlZWQ6IFwiMTAgZnQuLCBmbHkgNTAgZnQuXCIsXG5cdFx0c3RhdHM6IFs2LCAxNCwgOCwgMywgMTIsIDZdLFxuXHRcdGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX3Jlc2lzdGFuY2VzOiBcImJsdWRnZW9uaW5nLCBwaWVyY2luZywgc2xhc2hpbmdcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczpcblx0XHRcdFwiY2hhcm1lZCwgZnJpZ2h0ZW5lZCwgZ3JhcHBsZWQsIHBhcmFseXplZCwgcGV0cmlmaWVkLCBwcm9uZSwgcmVzdHJhaW5lZCwgc3R1bm5lZFwiLFxuXHRcdHNlbnNlczogXCJwYXNzaXZlIFBlcmNlcHRpb24gMTVcIixcblx0XHRsYW5ndWFnZXM6IFwiXCIsXG5cdFx0Y3I6IFwiMS80XCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiU3dhcm1cIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgc3dhcm0gY2FuIG9jY3VweSBhbm90aGVyIGNyZWF0dXJlJ3Mgc3BhY2UgYW5kIHZpY2UgdmVyc2EsIGFuZCB0aGUgc3dhcm0gY2FuIG1vdmUgdGhyb3VnaCBhbnkgb3BlbmluZyBsYXJnZSBlbm91Z2ggZm9yIGEgVGlueSByYXZlbi4gVGhlIHN3YXJtIGNhbid0IHJlZ2FpbiBoaXQgcG9pbnRzIG9yIGdhaW4gdGVtcG9yYXJ5IGhpdCBwb2ludHMuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQmVha3NcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNCB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0IGluIHRoZSBzd2FybSdzIHNwYWNlLiBIaXQ6IDcgKDJkNikgcGllcmNpbmcgZGFtYWdlLCBvciAzICgxZDYpIHBpZXJjaW5nIGRhbWFnZSBpZiB0aGUgc3dhcm0gaGFzIGhhbGYgb2YgaXRzIGhpdCBwb2ludHMgb3IgZmV3ZXIuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNCxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMmQ2XCIsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIlN3YXJtIG9mIFNwaWRlcnNcIixcblx0XHRzaXplOiBcIk1lZGl1bVwiLFxuXHRcdHR5cGU6IFwic3dhcm0gb2YgVGlueSBiZWFzdHNcIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcblx0XHRhYzogMTIsXG5cdFx0aHA6IDIyLFxuXHRcdGhpdF9kaWNlOiBcIjVkOFwiLFxuXHRcdHNwZWVkOiBcIjIwIGZ0LiwgY2xpbWIgMjAgZnQuXCIsXG5cdFx0c3RhdHM6IFszLCAxMywgMTAsIDEsIDcsIDFdLFxuXHRcdGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX3Jlc2lzdGFuY2VzOiBcImJsdWRnZW9uaW5nLCBwaWVyY2luZywgc2xhc2hpbmdcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczpcblx0XHRcdFwiY2hhcm1lZCwgZnJpZ2h0ZW5lZCwgcGFyYWx5emVkLCBwZXRyaWZpZWQsIHByb25lLCByZXN0cmFpbmVkLCBzdHVubmVkXCIsXG5cdFx0c2Vuc2VzOiBcImJsaW5kc2lnaHQgMTAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gOFwiLFxuXHRcdGxhbmd1YWdlczogXCJcIixcblx0XHRjcjogXCIxLzJcIixcblx0XHR0cmFpdHM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJTd2FybVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBzd2FybSBjYW4gb2NjdXB5IGFub3RoZXIgY3JlYXR1cmUncyBzcGFjZSBhbmQgdmljZSB2ZXJzYSwgYW5kIHRoZSBzd2FybSBjYW4gbW92ZSB0aHJvdWdoIGFueSBvcGVuaW5nIGxhcmdlIGVub3VnaCBmb3IgYSBUaW55IGluc2VjdC4gVGhlIHN3YXJtIGNhbid0IHJlZ2FpbiBoaXQgcG9pbnRzIG9yIGdhaW4gdGVtcG9yYXJ5IGhpdCBwb2ludHMuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiU3BpZGVyIENsaW1iXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIHN3YXJtIGNhbiBjbGltYiBkaWZmaWN1bHQgc3VyZmFjZXMsIGluY2x1ZGluZyB1cHNpZGUgZG93biBvbiBjZWlsaW5ncywgd2l0aG91dCBuZWVkaW5nIHRvIG1ha2UgYW4gYWJpbGl0eSBjaGVjay5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJXZWIgU2Vuc2VcIixcblx0XHRcdFx0ZGVzYzogXCJXaGlsZSBpbiBjb250YWN0IHdpdGggYSB3ZWIsIHRoZSBzd2FybSBrbm93cyB0aGUgZXhhY3QgbG9jYXRpb24gb2YgYW55IG90aGVyIGNyZWF0dXJlIGluIGNvbnRhY3Qgd2l0aCB0aGUgc2FtZSB3ZWIuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiV2ViIFdhbGtlclwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBzd2FybSBpZ25vcmVzIG1vdmVtZW50IHJlc3RyaWN0aW9ucyBjYXVzZWQgYnkgd2ViYmluZy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJCaXRlc1wiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICszIHRvIGhpdCwgcmVhY2ggMCBmdC4sIG9uZSB0YXJnZXQgaW4gdGhlIHN3YXJtJ3Mgc3BhY2UuIEhpdDogMTAgKDRkNCkgcGllcmNpbmcgZGFtYWdlLCBvciA1ICgyZDQpIHBpZXJjaW5nIGRhbWFnZSBpZiB0aGUgc3dhcm0gaGFzIGhhbGYgb2YgaXRzIGhpdCBwb2ludHMgb3IgZmV3ZXIuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMyxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiNGQ0XCIsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIlN3YXJtIG9mIFdhc3BzXCIsXG5cdFx0c2l6ZTogXCJNZWRpdW1cIixcblx0XHR0eXBlOiBcInN3YXJtIG9mIFRpbnkgYmVhc3RzXCIsXG5cdFx0c3VidHlwZTogXCJcIixcblx0XHRhbGlnbm1lbnQ6IFwidW5hbGlnbmVkXCIsXG5cdFx0YWM6IDEyLFxuXHRcdGhwOiAyMixcblx0XHRoaXRfZGljZTogXCI1ZDhcIixcblx0XHRzcGVlZDogXCI1IGZ0LiwgZmx5IDMwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbMywgMTMsIDEwLCAxLCA3LCAxXSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJibHVkZ2VvbmluZywgcGllcmNpbmcsIHNsYXNoaW5nXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6XG5cdFx0XHRcImNoYXJtZWQsIGZyaWdodGVuZWQsIGdyYXBwbGVkLCBwYXJhbHl6ZWQsIHBldHJpZmllZCwgcHJvbmUsIHJlc3RyYWluZWQsIHN0dW5uZWRcIixcblx0XHRzZW5zZXM6IFwiYmxpbmRzaWdodCAxMCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiA4XCIsXG5cdFx0bGFuZ3VhZ2VzOiBcIlwiLFxuXHRcdGNyOiBcIjEvMlwiLFxuXHRcdHRyYWl0czogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlN3YXJtXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIHN3YXJtIGNhbiBvY2N1cHkgYW5vdGhlciBjcmVhdHVyZSdzIHNwYWNlIGFuZCB2aWNlIHZlcnNhLCBhbmQgdGhlIHN3YXJtIGNhbiBtb3ZlIHRocm91Z2ggYW55IG9wZW5pbmcgbGFyZ2UgZW5vdWdoIGZvciBhIFRpbnkgaW5zZWN0LiBUaGUgc3dhcm0gY2FuJ3QgcmVnYWluIGhpdCBwb2ludHMgb3IgZ2FpbiB0ZW1wb3JhcnkgaGl0IHBvaW50cy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJCaXRlc1wiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICszIHRvIGhpdCwgcmVhY2ggMCBmdC4sIG9uZSB0YXJnZXQgaW4gdGhlIHN3YXJtJ3Mgc3BhY2UuIEhpdDogMTAgKDRkNCkgcGllcmNpbmcgZGFtYWdlLCBvciA1ICgyZDQpIHBpZXJjaW5nIGRhbWFnZSBpZiB0aGUgc3dhcm0gaGFzIGhhbGYgb2YgaXRzIGhpdCBwb2ludHMgb3IgZmV3ZXIuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMyxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiNGQ0XCIsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIlRhcnJhc3F1ZVwiLFxuXHRcdHNpemU6IFwiR2FyZ2FudHVhblwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcIm1vbnN0cm9zaXR5XCIsXG5cdFx0c3VidHlwZTogXCJ0aXRhblwiLFxuXHRcdGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcblx0XHRhYzogMjUsXG5cdFx0aHA6IDY3Nixcblx0XHRoaXRfZGljZTogXCIzM2QyMFwiLFxuXHRcdHNwZWVkOiBcIjQwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbMzAsIDExLCAzMCwgMywgMTEsIDExXSxcblx0XHRzYXZlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRpbnRlbGxpZ2VuY2U6IDUsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHR3aXNkb206IDksXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRjaGFyaXNtYTogOSxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczpcblx0XHRcdFwiZmlyZSwgcG9pc29uOyBibHVkZ2VvbmluZywgcGllcmNpbmcsIGFuZCBzbGFzaGluZyBmcm9tIG5vbm1hZ2ljYWwgd2VhcG9uc1wiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcImNoYXJtZWQsIGZyaWdodGVuZWQsIHBhcmFseXplZCwgcG9pc29uZWRcIixcblx0XHRzZW5zZXM6IFwiYmxpbmRzaWdodCAxMjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTBcIixcblx0XHRsYW5ndWFnZXM6IFwiXCIsXG5cdFx0Y3I6IFwiMzBcIixcblx0XHR0cmFpdHM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJMZWdlbmRhcnkgUmVzaXN0YW5jZSAoMy9EYXkpXCIsXG5cdFx0XHRcdGRlc2M6IFwiSWYgdGhlIHRhcnJhc3F1ZSBmYWlscyBhIHNhdmluZyB0aHJvdywgaXQgY2FuIGNob29zZSB0byBzdWNjZWVkIGluc3RlYWQuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTWFnaWMgUmVzaXN0YW5jZVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSB0YXJyYXNxdWUgaGFzIGFkdmFudGFnZSBvbiBzYXZpbmcgdGhyb3dzIGFnYWluc3Qgc3BlbGxzIGFuZCBvdGhlciBtYWdpY2FsIGVmZmVjdHMuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiUmVmbGVjdGl2ZSBDYXJhcGFjZVwiLFxuXHRcdFx0XHRkZXNjOiBcIkFueSB0aW1lIHRoZSB0YXJyYXNxdWUgaXMgdGFyZ2V0ZWQgYnkgYSBtYWdpYyBtaXNzaWxlIHNwZWxsLCBhIGxpbmUgc3BlbGwsIG9yIGEgc3BlbGwgdGhhdCByZXF1aXJlcyBhIHJhbmdlZCBhdHRhY2sgcm9sbCwgcm9sbCBhIGQ2LiBPbiBhIDEgdG8gNSwgdGhlIHRhcnJhc3F1ZSBpcyB1bmFmZmVjdGVkLiBPbiBhIDYsIHRoZSB0YXJyYXNxdWUgaXMgdW5hZmZlY3RlZCwgYW5kIHRoZSBlZmZlY3QgaXMgcmVmbGVjdGVkIGJhY2sgYXQgdGhlIGNhc3RlciBhcyB0aG91Z2ggaXQgb3JpZ2luYXRlZCBmcm9tIHRoZSB0YXJyYXNxdWUsIHR1cm5pbmcgdGhlIGNhc3RlciBpbnRvIHRoZSB0YXJnZXQuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiU2llZ2UgTW9uc3RlclwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSB0YXJyYXNxdWUgZGVhbHMgZG91YmxlIGRhbWFnZSB0byBvYmplY3RzIGFuZCBzdHJ1Y3R1cmVzLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIHRhcnJhc3F1ZSBjYW4gdXNlIGl0cyBGcmlnaHRmdWwgUHJlc2VuY2UuIEl0IHRoZW4gbWFrZXMgZml2ZSBhdHRhY2tzOiBvbmUgd2l0aCBpdHMgYml0ZSwgdHdvIHdpdGggaXRzIGNsYXdzLCBvbmUgd2l0aCBpdHMgaG9ybnMsIGFuZCBvbmUgd2l0aCBpdHMgdGFpIGwuIEl0IGNhbiB1c2UgaXRzIFN3YWxsb3cgaW5zdGVhZCBvZiBpdHMgYml0ZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJCaXRlXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzE5IHRvIGhpdCwgcmVhY2ggMTAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDM2ICg0ZDEyICsgMTApIHBpZXJjaW5nIGRhbWFnZS4gSWYgdGhlIHRhcmdldCBpcyBhIGNyZWF0dXJlLCBpdCBpcyBncmFwcGxlZCAoZXNjYXBlIERDIDIwKS4gVW50aWwgdGhpcyBncmFwcGxlIGVuZHMsIHRoZSB0YXJnZXQgaXMgcmVzdHJhaW5lZCwgYW5kIHRoZSB0YXJyYXNxdWUgY2FuJ3QgYml0ZSBhbm90aGVyIHRhcmdldC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAxOSxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiNGQxMlwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDEwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJDbGF3XCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzE5IHRvIGhpdCwgcmVhY2ggMTUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDI4ICg0ZDggKyAxMCkgc2xhc2hpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDE5LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCI0ZDhcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiAxMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiSG9ybnNcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMTkgdG8gaGl0LCByZWFjaCAxMCBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMzIgKDRkMTAgKyAxMCkgcGllcmNpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDE5LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCI0ZDEwXCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogMTAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlRhaWxcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMTkgdG8gaGl0LCByZWFjaCAyMCBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMjQgKDRkNiArIDEwKSBibHVkZ2VvbmluZyBkYW1hZ2UuIElmIHRoZSB0YXJnZXQgaXMgYSBjcmVhdHVyZSwgaXQgbXVzdCBzdWNjZWVkIG9uIGEgREMgMjAgU3RyZW5ndGggc2F2aW5nIHRocm93IG9yIGJlIGtub2NrZWQgcHJvbmUuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMTksXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjRkNlwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDEwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJGcmlnaHRmdWwgUHJlc2VuY2VcIixcblx0XHRcdFx0ZGVzYzogXCJFYWNoIGNyZWF0dXJlIG9mIHRoZSB0YXJyYXNxdWUncyBjaG9pY2Ugd2l0aGluIDEyMCBmZWV0IG9mIGl0IGFuZCBhd2FyZSBvZiBpdCBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxNyBXaXNkb20gc2F2aW5nIHRocm93IG9yIGJlY29tZSBmcmlnaHRlbmVkIGZvciAxIG1pbnV0ZS4gQSBjcmVhdHVyZSBjYW4gcmVwZWF0IHRoZSBzYXZpbmcgdGhyb3cgYXQgdGhlIGVuZCBvZiBlYWNoIG9mIGl0cyB0dXJucywgd2l0aCBkaXNhZHZhbnRhZ2UgaWYgdGhlIHRhcnJhc3F1ZSBpcyB3aXRoaW4gbGluZSBvZiBzaWdodCwgZW5kaW5nIHRoZSBlZmZlY3Qgb24gaXRzZWxmIG9uIGEgc3VjY2Vzcy4gSWYgYSBjcmVhdHVyZSdzIHNhdmluZyB0aHJvdyBpcyBzdWNjZXNzZnVsIG9yIHRoZSBlZmZlY3QgZW5kcyBmb3IgaXQsIHRoZSBjcmVhdHVyZSBpcyBpbW11bmUgdG8gdGhlIHRhcnJhc3F1ZSdzIEZyaWdodGZ1bCBQcmVzZW5jZSBmb3IgdGhlIG5leHQgMjQgaG91cnMuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiU3dhbGxvd1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSB0YXJyYXNxdWUgbWFrZXMgb25lIGJpdGUgYXR0YWNrIGFnYWluc3QgYSBMYXJnZSBvciBzbWFsbGVyIGNyZWF0dXJlIGl0IGlzIGdyYXBwbGluZy4gSWYgdGhlIGF0dGFjayBoaXRzLCB0aGUgdGFyZ2V0IHRha2VzIHRoZSBiaXRlJ3MgZGFtYWdlLCB0aGUgdGFyZ2V0IGlzIHN3YWxsb3dlZCwgYW5kIHRoZSBncmFwcGxlIGVuZHMuIFdoaWxlIHN3YWxsb3dlZCwgdGhlIGNyZWF0dXJlIGlzIGJsaW5kZWQgYW5kIHJlc3RyYWluZWQsIGl0IGhhcyB0b3RhbCBjb3ZlciBhZ2FpbnN0IGF0dGFja3MgYW5kIG90aGVyIGVmZmVjdHMgb3V0c2lkZSB0aGUgdGFycmFzcXVlLCBhbmQgaXQgdGFrZXMgNTYgKDE2ZDYpIGFjaWQgZGFtYWdlIGF0IHRoZSBzdGFydCBvZiBlYWNoIG9mIHRoZSB0YXJyYXNxdWUncyB0dXJucy5cXG5JZiB0aGUgdGFycmFzcXVlIHRha2VzIDYwIGRhbWFnZSBvciBtb3JlIG9uIGEgc2luZ2xlIHR1cm4gZnJvbSBhIGNyZWF0dXJlIGluc2lkZSBpdCwgdGhlIHRhcnJhc3F1ZSBtdXN0IHN1Y2NlZWQgb24gYSBEQyAyMCBDb25zdGl0dXRpb24gc2F2aW5nIHRocm93IGF0IHRoZSBlbmQgb2YgdGhhdCB0dXJuIG9yIHJlZ3VyZ2l0YXRlIGFsbCBzd2FsbG93ZWQgY3JlYXR1cmVzLCB3aGljaCBmYWxsIHByb25lIGluIGEgc3BhY2Ugd2l0aGluIDEwIGZlZXQgb2YgdGhlIHRhcnJhc3F1ZS4gSWYgdGhlIHRhcnJhc3F1ZSBkaWVzLCBhIHN3YWxsb3dlZCBjcmVhdHVyZSBpcyBubyBsb25nZXIgcmVzdHJhaW5lZCBieSBpdCBhbmQgY2FuIGVzY2FwZSBmcm9tIHRoZSBjb3Jwc2UgYnkgdXNpbmcgMzAgZmVldCBvZiBtb3ZlbWVudCwgZXhpdGluZyBwcm9uZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGxlZ2VuZGFyeV9hY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQXR0YWNrXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIHRhcnJhc3F1ZSBtYWtlcyBvbmUgY2xhdyBhdHRhY2sgb3IgdGFpbCBhdHRhY2suXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTW92ZVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSB0YXJyYXNxdWUgbW92ZXMgdXAgdG8gaGFsZiBpdHMgc3BlZWQuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQ2hvbXAgKENvc3RzIDIgQWN0aW9ucylcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgdGFycmFzcXVlIG1ha2VzIG9uZSBiaXRlIGF0dGFjayBvciB1c2VzIGl0cyBTd2FsbG93LlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIlRodWdcIixcblx0XHRzaXplOiBcIk1lZGl1bVwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcImh1bWFub2lkXCIsXG5cdFx0c3VidHlwZTogXCJhbnkgcmFjZVwiLFxuXHRcdGFsaWdubWVudDogXCJhbnkgbm9uLWdvb2QgYWxpZ25tZW50XCIsXG5cdFx0YWM6IDExLFxuXHRcdGhwOiAzMixcblx0XHRoaXRfZGljZTogXCI1ZDhcIixcblx0XHRzcGVlZDogXCIzMCBmdC5cIixcblx0XHRzdGF0czogWzE1LCAxMSwgMTQsIDEwLCAxMCwgMTFdLFxuXHRcdHNraWxsc2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0aW50aW1pZGF0aW9uOiAyLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuXHRcdGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuXHRcdHNlbnNlczogXCJwYXNzaXZlIFBlcmNlcHRpb24gMTBcIixcblx0XHRsYW5ndWFnZXM6IFwiYW55IG9uZSBsYW5ndWFnZSAodXN1YWxseSBDb21tb24pXCIsXG5cdFx0Y3I6IFwiMS8yXCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiUGFjayBUYWN0aWNzXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIHRodWcgaGFzIGFkdmFudGFnZSBvbiBhbiBhdHRhY2sgcm9sbCBhZ2FpbnN0IGEgY3JlYXR1cmUgaWYgYXQgbGVhc3Qgb25lIG9mIHRoZSB0aHVnJ3MgYWxsaWVzIGlzIHdpdGhpbiA1IGZ0LiBvZiB0aGUgY3JlYXR1cmUgYW5kIHRoZSBhbGx5IGlzbid0IGluY2FwYWNpdGF0ZWQuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgdGh1ZyBtYWtlcyB0d28gbWVsZWUgYXR0YWNrcy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJNYWNlXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzQgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIGNyZWF0dXJlLiBIaXQ6IDUgKDFkNiArIDIpIGJsdWRnZW9uaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA0LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxZDZcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiAyLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJIZWF2eSBDcm9zc2Jvd1wiLFxuXHRcdFx0XHRkZXNjOiBcIlJhbmdlZCBXZWFwb24gQXR0YWNrOiArMiB0byBoaXQsIHJhbmdlIDEwMC80MDAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDUgKDFkMTApIHBpZXJjaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAyLFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxZDEwXCIsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIlRpZ2VyXCIsXG5cdFx0c2l6ZTogXCJMYXJnZVwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcImJlYXN0XCIsXG5cdFx0c3VidHlwZTogXCJcIixcblx0XHRhbGlnbm1lbnQ6IFwidW5hbGlnbmVkXCIsXG5cdFx0YWM6IDEyLFxuXHRcdGhwOiAzNyxcblx0XHRoaXRfZGljZTogXCI1ZDEwXCIsXG5cdFx0c3BlZWQ6IFwiNDAgZnQuXCIsXG5cdFx0c3RhdHM6IFsxNywgMTUsIDE0LCAzLCAxMiwgOF0sXG5cdFx0c2tpbGxzYXZlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRwZXJjZXB0aW9uOiAzLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0c3RlYWx0aDogNixcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcblx0XHRzZW5zZXM6IFwiZGFya3Zpc2lvbiA2MCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxM1wiLFxuXHRcdGxhbmd1YWdlczogXCJcIixcblx0XHRjcjogXCIxXCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiS2VlbiBTbWVsbFwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSB0aWdlciBoYXMgYWR2YW50YWdlIG9uIFdpc2RvbSAoUGVyY2VwdGlvbikgY2hlY2tzIHRoYXQgcmVseSBvbiBzbWVsbC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJQb3VuY2VcIixcblx0XHRcdFx0ZGVzYzogXCJJZiB0aGUgdGlnZXIgbW92ZXMgYXQgbGVhc3QgMjAgZnQuIHN0cmFpZ2h0IHRvd2FyZCBhIGNyZWF0dXJlIGFuZCB0aGVuIGhpdHMgaXQgd2l0aCBhIGNsYXcgYXR0YWNrIG9uIHRoZSBzYW1lIHR1cm4sIHRoYXQgdGFyZ2V0IG11c3Qgc3VjY2VlZCBvbiBhIERDIDEzIFN0cmVuZ3RoIHNhdmluZyB0aHJvdyBvciBiZSBrbm9ja2VkIHByb25lLiBJZiB0aGUgdGFyZ2V0IGlzIHByb25lLCB0aGUgdGlnZXIgY2FuIG1ha2Ugb25lIGJpdGUgYXR0YWNrIGFnYWluc3QgaXQgYXMgYSBib251cyBhY3Rpb24uXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQml0ZVwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs1IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogOCAoMWQxMCArIDMpIHBpZXJjaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA1LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxZDEwXCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogMyxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQ2xhd1wiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs1IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogNyAoMWQ4ICsgMykgc2xhc2hpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIlRyZWFudFwiLFxuXHRcdHNpemU6IFwiSHVnZVwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcInBsYW50XCIsXG5cdFx0c3VidHlwZTogXCJcIixcblx0XHRhbGlnbm1lbnQ6IFwiY2hhb3RpYyBnb29kXCIsXG5cdFx0YWM6IDE2LFxuXHRcdGhwOiAxMzgsXG5cdFx0aGl0X2RpY2U6IFwiMTJkMTJcIixcblx0XHRzcGVlZDogXCIzMCBmdC5cIixcblx0XHRzdGF0czogWzIzLCA4LCAyMSwgMTIsIDE2LCAxMl0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJmaXJlXCIsXG5cdFx0ZGFtYWdlX3Jlc2lzdGFuY2VzOiBcImJsdWRnZW9uaW5nLCBwaWVyY2luZ1wiLFxuXHRcdGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuXHRcdHNlbnNlczogXCJwYXNzaXZlIFBlcmNlcHRpb24gMTNcIixcblx0XHRsYW5ndWFnZXM6IFwiQ29tbW9uLCBEcnVpZGljLCBFbHZpc2gsIFN5bHZhblwiLFxuXHRcdGNyOiBcIjlcIixcblx0XHR0cmFpdHM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJGYWxzZSBBcHBlYXJhbmNlXCIsXG5cdFx0XHRcdGRlc2M6IFwiV2hpbGUgdGhlIHRyZWFudCByZW1haW5zIG1vdGlvbmxlc3MsIGl0IGlzIGluZGlzdGluZ3Vpc2hhYmxlIGZyb20gYSBub3JtYWwgdHJlZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJTaWVnZSBNb25zdGVyXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIHRyZWFudCBkZWFscyBkb3VibGUgZGFtYWdlIHRvIG9iamVjdHMgYW5kIHN0cnVjdHVyZXMuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgdHJlYW50IG1ha2VzIHR3byBzbGFtIGF0dGFja3MuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiU2xhbVwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICsxMCB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDE2ICgzZDYgKyA2KSBibHVkZ2VvbmluZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMTAsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjNkNlwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDYsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlJvY2tcIixcblx0XHRcdFx0ZGVzYzogXCJSYW5nZWQgV2VhcG9uIEF0dGFjazogKzEwIHRvIGhpdCwgcmFuZ2UgNjAvMTgwIGZ0Liwgb25lIHRhcmdldC4gSGl0OiAyOCAoNGQxMCArIDYpIGJsdWRnZW9uaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAxMCxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiNGQxMFwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDYsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkFuaW1hdGUgVHJlZXMgKDEvRGF5KVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSB0cmVhbnQgbWFnaWNhbGx5IGFuaW1hdGVzIG9uZSBvciB0d28gdHJlZXMgaXQgY2FuIHNlZSB3aXRoaW4gNjAgZmVldCBvZiBpdC4gVGhlc2UgdHJlZXMgaGF2ZSB0aGUgc2FtZSBzdGF0aXN0aWNzIGFzIGEgdHJlYW50LCBleGNlcHQgdGhleSBoYXZlIEludGVsbGlnZW5jZSBhbmQgQ2hhcmlzbWEgc2NvcmVzIG9mIDEsIHRoZXkgY2FuJ3Qgc3BlYWssIGFuZCB0aGV5IGhhdmUgb25seSB0aGUgU2xhbSBhY3Rpb24gb3B0aW9uLiBBbiBhbmltYXRlZCB0cmVlIGFjdHMgYXMgYW4gYWxseSBvZiB0aGUgdHJlYW50LiBUaGUgdHJlZSByZW1haW5zIGFuaW1hdGUgZm9yIDEgZGF5IG9yIHVudGlsIGl0IGRpZXM7IHVudGlsIHRoZSB0cmVhbnQgZGllcyBvciBpcyBtb3JlIHRoYW4gMTIwIGZlZXQgZnJvbSB0aGUgdHJlZTsgb3IgdW50aWwgdGhlIHRyZWFudCB0YWtlcyBhIGJvbnVzIGFjdGlvbiB0byB0dXJuIGl0IGJhY2sgaW50byBhbiBpbmFuaW1hdGUgdHJlZS4gVGhlIHRyZWUgdGhlbiB0YWtlcyByb290IGlmIHBvc3NpYmxlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIlRyaWJhbCBXYXJyaW9yXCIsXG5cdFx0c2l6ZTogXCJNZWRpdW1cIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJodW1hbm9pZFwiLFxuXHRcdHN1YnR5cGU6IFwiYW55IHJhY2VcIixcblx0XHRhbGlnbm1lbnQ6IFwiYW55IGFsaWdubWVudFwiLFxuXHRcdGFjOiAxMixcblx0XHRocDogMTEsXG5cdFx0aGl0X2RpY2U6IFwiMmQ4XCIsXG5cdFx0c3BlZWQ6IFwiMzAgZnQuXCIsXG5cdFx0c3RhdHM6IFsxMywgMTEsIDEyLCA4LCAxMSwgOF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0c2Vuc2VzOiBcInBhc3NpdmUgUGVyY2VwdGlvbiAxMFwiLFxuXHRcdGxhbmd1YWdlczogXCJhbnkgb25lIGxhbmd1YWdlXCIsXG5cdFx0Y3I6IFwiMS84XCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiUGFjayBUYWN0aWNzXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIHdhcnJpb3IgaGFzIGFkdmFudGFnZSBvbiBhbiBhdHRhY2sgcm9sbCBhZ2FpbnN0IGEgY3JlYXR1cmUgaWYgYXQgbGVhc3Qgb25lIG9mIHRoZSB3YXJyaW9yJ3MgYWxsaWVzIGlzIHdpdGhpbiA1IGZ0LiBvZiB0aGUgY3JlYXR1cmUgYW5kIHRoZSBhbGx5IGlzbid0IGluY2FwYWNpdGF0ZWQuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiU3BlYXJcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBvciBSYW5nZWQgV2VhcG9uIEF0dGFjazogKzMgdG8gaGl0LCByZWFjaCA1IGZ0LiBvciByYW5nZSAyMC82MCBmdC4sIG9uZSB0YXJnZXQuIEhpdDogNCAoMWQ2ICsgMSkgcGllcmNpbmcgZGFtYWdlLCBvciA1ICgxZDggKyAxKSBwaWVyY2luZyBkYW1hZ2UgaWYgdXNlZCB3aXRoIHR3byBoYW5kcyB0byBtYWtlIGEgbWVsZWUgYXR0YWNrLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDMsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjFkNlwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDEsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIlRyaWNlcmF0b3BzXCIsXG5cdFx0c2l6ZTogXCJIdWdlXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwiYmVhc3RcIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcblx0XHRhYzogMTMsXG5cdFx0aHA6IDk1LFxuXHRcdGhpdF9kaWNlOiBcIjEwZDEyXCIsXG5cdFx0c3BlZWQ6IFwiNTAgZnQuXCIsXG5cdFx0c3RhdHM6IFsyMiwgOSwgMTcsIDIsIDExLCA1XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcblx0XHRzZW5zZXM6IFwicGFzc2l2ZSBQZXJjZXB0aW9uIDEwXCIsXG5cdFx0bGFuZ3VhZ2VzOiBcIlwiLFxuXHRcdGNyOiBcIjVcIixcblx0XHR0cmFpdHM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJUcmFtcGxpbmcgQ2hhcmdlXCIsXG5cdFx0XHRcdGRlc2M6IFwiSWYgdGhlIHRyaWNlcmF0b3BzIG1vdmVzIGF0IGxlYXN0IDIwIGZ0LiBzdHJhaWdodCB0b3dhcmQgYSBjcmVhdHVyZSBhbmQgdGhlbiBoaXRzIGl0IHdpdGggYSBnb3JlIGF0dGFjayBvbiB0aGUgc2FtZSB0dXJuLCB0aGF0IHRhcmdldCBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxMyBTdHJlbmd0aCBzYXZpbmcgdGhyb3cgb3IgYmUga25vY2tlZCBwcm9uZS4gSWYgdGhlIHRhcmdldCBpcyBwcm9uZSwgdGhlIHRyaWNlcmF0b3BzIGNhbiBtYWtlIG9uZSBzdG9tcCBhdHRhY2sgYWdhaW5zdCBpdCBhcyBhIGJvbnVzIGFjdGlvbi5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJHb3JlXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzkgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAyNCAoNGQ4ICsgNikgcGllcmNpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDksXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjRkOFwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDYsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlN0b21wXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzkgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHByb25lIGNyZWF0dXJlLiBIaXQ6IDIyICgzZDEwICsgNikgYmx1ZGdlb25pbmcgZGFtYWdlXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogOSxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiM2QxMFwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDYsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIlRyb2xsXCIsXG5cdFx0c2l6ZTogXCJMYXJnZVwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcImdpYW50XCIsXG5cdFx0c3VidHlwZTogXCJcIixcblx0XHRhbGlnbm1lbnQ6IFwiY2hhb3RpYyBldmlsXCIsXG5cdFx0YWM6IDE1LFxuXHRcdGhwOiA4NCxcblx0XHRoaXRfZGljZTogXCI4ZDEwXCIsXG5cdFx0c3BlZWQ6IFwiMzAgZnQuXCIsXG5cdFx0c3RhdHM6IFsxOCwgMTMsIDIwLCA3LCA5LCA3XSxcblx0XHRza2lsbHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdHBlcmNlcHRpb246IDIsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0c2Vuc2VzOiBcImRhcmt2aXNpb24gNjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTJcIixcblx0XHRsYW5ndWFnZXM6IFwiR2lhbnRcIixcblx0XHRjcjogXCI1XCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiS2VlbiBTbWVsbFwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSB0cm9sbCBoYXMgYWR2YW50YWdlIG9uIFdpc2RvbSAoUGVyY2VwdGlvbikgY2hlY2tzIHRoYXQgcmVseSBvbiBzbWVsbC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJSZWdlbmVyYXRpb25cIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgdHJvbGwgcmVnYWlucyAxMCBoaXQgcG9pbnRzIGF0IHRoZSBzdGFydCBvZiBpdHMgdHVybi4gSWYgdGhlIHRyb2xsIHRha2VzIGFjaWQgb3IgZmlyZSBkYW1hZ2UsIHRoaXMgdHJhaXQgZG9lc24ndCBmdW5jdGlvbiBhdCB0aGUgc3RhcnQgb2YgdGhlIHRyb2xsJ3MgbmV4dCB0dXJuLiBUaGUgdHJvbGwgZGllcyBvbmx5IGlmIGl0IHN0YXJ0cyBpdHMgdHVybiB3aXRoIDAgaGl0IHBvaW50cyBhbmQgZG9lc24ndCByZWdlbmVyYXRlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlZhcmlhbnQ6IExvYXRoc29tZSBMaW1ic1wiLFxuXHRcdFx0XHRkZXNjOiBcIldoZW5ldmVyIHRoZSB0cm9sbCB0YWtlcyBhdCBsZWFzdCAxNSBzbGFzaGluZyBkYW1hZ2UgYXQgb25lIHRpbWUsIHJvbGwgYSBkMjAgdG8gZGV0ZXJtaW5lIHdoYXQgZWxzZSBoYXBwZW5zIHRvIGl0OlxcbjEtMTA6IE5vdGhpbmcgZWxzZSBoYXBwZW5zLlxcbjExLTE0OiBPbmUgbGVnIGlzIHNldmVyZWQgZnJvbSB0aGUgdHJvbGwgaWYgaXQgaGFzIGFueSBsZWdzIGxlZnQuXFxuMTUtIDE4OiBPbmUgYXJtIGlzIHNldmVyZWQgZnJvbSB0aGUgdHJvbGwgaWYgaXQgaGFzIGFueSBhcm1zIGxlZnQuXFxuMTktMjA6IFRoZSB0cm9sbCBpcyBkZWNhcGl0YXRlZCwgYnV0IHRoZSB0cm9sbCBkaWVzIG9ubHkgaWYgaXQgY2FuJ3QgcmVnZW5lcmF0ZS4gSWYgaXQgZGllcywgc28gZG9lcyB0aGUgc2V2ZXJlZCBoZWFkLlxcbklmIHRoZSB0cm9sbCBmaW5pc2hlcyBhIHNob3J0IG9yIGxvbmcgcmVzdCB3aXRob3V0IHJlYXR0YWNoaW5nIGEgc2V2ZXJlZCBsaW1iIG9yIGhlYWQsIHRoZSBwYXJ0IHJlZ3Jvd3MuIEF0IHRoYXQgcG9pbnQsIHRoZSBzZXZlcmVkIHBhcnQgZGllcy4gVW50aWwgdGhlbiwgYSBzZXZlcmVkIHBhcnQgYWN0cyBvbiB0aGUgdHJvbGwncyBpbml0aWF0aXZlIGFuZCBoYXMgaXRzIG93biBhY3Rpb24gYW5kIG1vdmVtZW50LiBBIHNldmVyZWQgcGFydCBoYXMgQUMgMTMsIDEwIGhpdCBwb2ludHMsIGFuZCB0aGUgdHJvbGwncyBSZWdlbmVyYXRpb24gdHJhaXQuXFxuQSBzZXZlcmVkIGxlZyBpcyB1bmFibGUgdG8gYXR0YWNrIGFuZCBoYXMgYSBzcGVlZCBvZiA1IGZlZXQuXFxuQSBzZXZlcmVkIGFybSBoYXMgYSBzcGVlZCBvZiA1IGZlZXQgYW5kIGNhbiBtYWtlIG9uZSBjbGF3IGF0dGFjayBvbiBpdHMgdHVybiwgd2l0aCBkaXNhZHZhbnRhZ2Ugb24gdGhlIGF0dGFjayByb2xsIHVubGVzcyB0aGUgdHJvbGwgY2FuIHNlZSB0aGUgYXJtIGFuZCBpdHMgdGFyZ2V0LiBFYWNoIHRpbWUgdGhlIHRyb2xsIGxvc2VzIGFuIGFybSwgaXQgbG9zZXMgYSBjbGF3IGF0dGFjay5cXG5JZiBpdHMgaGVhZCBpcyBzZXZlcmVkLCB0aGUgdHJvbGwgbG9zZXMgaXRzIGJpdGUgYXR0YWNrIGFuZCBpdHMgYm9keSBpcyBibGluZGVkIHVubGVzcyB0aGUgaGVhZCBjYW4gc2VlIGl0LiBUaGUgc2V2ZXJlZCBoZWFkIGhhcyBhIHNwZWVkIG9mIDAgZmVldCBhbmQgdGhlIHRyb2xsJ3MgS2VlbiBTbWVsbCB0cmFpdC4gSXQgY2FuIG1ha2UgYSBiaXRlIGF0dGFjayBidXQgb25seSBhZ2FpbnN0IGEgdGFyZ2V0IGluIGl0cyBzcGFjZS5cXG5UaGUgdHJvbGwncyBzcGVlZCBpcyBoYWx2ZWQgaWYgaXQncyBtaXNzaW5nIGEgbGVnLiBJZiBpdCBsb3NlcyBib3RoIGxlZ3MsIGl0IGZhbGxzIHByb25lLiBJZiBpdCBoYXMgYm90aCBhcm1zLCBpdCBjYW4gY3Jhd2wuIFdpdGggb25seSBvbmUgYXJtLCBpdCBjYW4gc3RpbGwgY3Jhd2wsIGJ1dCBpdHMgc3BlZWQgaXMgaGFsdmVkLiBXaXRoIG5vIGFybXMgb3IgbGVncywgaXRzIHNwZWVkIGlzIDAsIGFuZCBpdCBjYW4ndCBiZW5lZml0IGZyb20gYm9udXNlcyB0byBzcGVlZC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJNdWx0aWF0dGFja1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSB0cm9sbCBtYWtlcyB0aHJlZSBhdHRhY2tzOiBvbmUgd2l0aCBpdHMgYml0ZSBhbmQgdHdvIHdpdGggaXRzIGNsYXdzLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkJpdGVcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNyB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDcgKDFkNiArIDQpIHBpZXJjaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA3LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxZDZcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiA0LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJDbGF3XCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzcgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxMSAoMmQ2ICsgNCkgc2xhc2hpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDcsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjJkNlwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDQsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIlR5cmFubm9zYXVydXMgUmV4XCIsXG5cdFx0c2l6ZTogXCJIdWdlXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwiYmVhc3RcIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcblx0XHRhYzogMTMsXG5cdFx0aHA6IDEzNixcblx0XHRoaXRfZGljZTogXCIxM2QxMlwiLFxuXHRcdHNwZWVkOiBcIjUwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbMjUsIDEwLCAxOSwgMiwgMTIsIDldLFxuXHRcdHNraWxsc2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0cGVyY2VwdGlvbjogNCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcblx0XHRzZW5zZXM6IFwicGFzc2l2ZSBQZXJjZXB0aW9uIDE0XCIsXG5cdFx0bGFuZ3VhZ2VzOiBcIlwiLFxuXHRcdGNyOiBcIjhcIixcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgdHlyYW5ub3NhdXJ1cyBtYWtlcyB0d28gYXR0YWNrczogb25lIHdpdGggaXRzIGJpdGUgYW5kIG9uZSB3aXRoIGl0cyB0YWlsLiBJdCBjYW4ndCBtYWtlIGJvdGggYXR0YWNrcyBhZ2FpbnN0IHRoZSBzYW1lIHRhcmdldC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJCaXRlXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzEwIHRvIGhpdCwgcmVhY2ggMTAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDMzICg0ZDEyICsgNykgcGllcmNpbmcgZGFtYWdlLiBJZiB0aGUgdGFyZ2V0IGlzIGEgTWVkaXVtIG9yIHNtYWxsZXIgY3JlYXR1cmUsIGl0IGlzIGdyYXBwbGVkIChlc2NhcGUgREMgMTcpLiBVbnRpbCB0aGlzIGdyYXBwbGUgZW5kcywgdGhlIHRhcmdldCBpcyByZXN0cmFpbmVkLCBhbmQgdGhlIHR5cmFubm9zYXVydXMgY2FuJ3QgYml0ZSBhbm90aGVyIHRhcmdldC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAxMCxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiNGQxMlwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDcsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlRhaWxcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMTAgdG8gaGl0LCByZWFjaCAxMCBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMjAgKDNkOCArIDcpIGJsdWRnZW9uaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAxMCxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiM2Q4XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogNyxcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiVW5pY29yblwiLFxuXHRcdHNpemU6IFwiTGFyZ2VcIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJjZWxlc3RpYWxcIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJsYXdmdWwgZ29vZFwiLFxuXHRcdGFjOiAxMixcblx0XHRocDogNjcsXG5cdFx0aGl0X2RpY2U6IFwiOWQxMFwiLFxuXHRcdHNwZWVkOiBcIjUwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbMTgsIDE0LCAxNSwgMTEsIDE3LCAxNl0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwicG9pc29uXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiY2hhcm1lZCwgcGFyYWx5emVkLCBwb2lzb25lZFwiLFxuXHRcdHNlbnNlczogXCJkYXJrdmlzaW9uIDYwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDEzXCIsXG5cdFx0bGFuZ3VhZ2VzOiBcIkNlbGVzdGlhbCwgRWx2aXNoLCBTeWx2YW4sIHRlbGVwYXRoeSA2MCBmdC5cIixcblx0XHRjcjogXCI1XCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQ2hhcmdlXCIsXG5cdFx0XHRcdGRlc2M6IFwiSWYgdGhlIHVuaWNvcm4gbW92ZXMgYXQgbGVhc3QgMjAgZnQuIHN0cmFpZ2h0IHRvd2FyZCBhIHRhcmdldCBhbmQgdGhlbiBoaXRzIGl0IHdpdGggYSBob3JuIGF0dGFjayBvbiB0aGUgc2FtZSB0dXJuLCB0aGUgdGFyZ2V0IHRha2VzIGFuIGV4dHJhIDkgKDJkOCkgcGllcmNpbmcgZGFtYWdlLiBJZiB0aGUgdGFyZ2V0IGlzIGEgY3JlYXR1cmUsIGl0IG11c3Qgc3VjY2VlZCBvbiBhIERDIDE1IFN0cmVuZ3RoIHNhdmluZyB0aHJvdyBvciBiZSBrbm9ja2VkIHByb25lLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjJkOFwiLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJJbm5hdGUgU3BlbGxjYXN0aW5nXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIHVuaWNvcm4ncyBpbm5hdGUgc3BlbGxjYXN0aW5nIGFiaWxpdHkgaXMgQ2hhcmlzbWEgKHNwZWxsIHNhdmUgREMgMTQpLiBUaGUgdW5pY29ybiBjYW4gaW5uYXRlbHkgY2FzdCB0aGUgZm9sbG93aW5nIHNwZWxscywgcmVxdWlyaW5nIG5vIGNvbXBvbmVudHM6XFxuXFxuQXQgd2lsbDogZGV0ZWN0IGV2aWwgYW5kIGdvb2QsIGRydWlkY3JhZnQsIHBhc3Mgd2l0aG91dCB0cmFjZVxcbjEvZGF5IGVhY2g6IGNhbG0gZW1vdGlvbnMsIGRpc3BlbCBldmlsIGFuZCBnb29kLCBlbnRhbmdsZVwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIk1hZ2ljIFJlc2lzdGFuY2VcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgdW5pY29ybiBoYXMgYWR2YW50YWdlIG9uIHNhdmluZyB0aHJvd3MgYWdhaW5zdCBzcGVsbHMgYW5kIG90aGVyIG1hZ2ljYWwgZWZmZWN0cy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJNYWdpYyBXZWFwb25zXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIHVuaWNvcm4ncyB3ZWFwb24gYXR0YWNrcyBhcmUgbWFnaWNhbC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJNdWx0aWF0dGFja1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSB1bmljb3JuIG1ha2VzIHR3byBhdHRhY2tzOiBvbmUgd2l0aCBpdHMgaG9vdmVzIGFuZCBvbmUgd2l0aCBpdHMgaG9ybi5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJIb292ZXNcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNyB0byBoaXQsIHJlYWNoIDUgZnQgLiwgb25lIHRhcmdldC4gSGl0OiAxMSAoMmQ2ICsgNCkgYmx1ZGdlb25pbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDcsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjJkNlwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDQsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkhvcm5cIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNyB0byBoaXQsIHJlYWNoIDUgZnQgLiwgb25lIHRhcmdldC4gSGl0OiA4ICgxZDggKyA0KSBwaWVyY2luZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNyxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMWQ4XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogNCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiSGVhbGluZyBUb3VjaCAoMy9EYXkpXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIHVuaWNvcm4gdG91Y2hlcyBhbm90aGVyIGNyZWF0dXJlIHdpdGggaXRzIGhvcm4uIFRoZSB0YXJnZXQgbWFnaWNhbGx5IHJlZ2FpbnMgMTEgKDJkOCArIDIpIGhpdCBwb2ludHMuIEluIGFkZGl0aW9uLCB0aGUgdG91Y2ggcmVtb3ZlcyBhbGwgZGlzZWFzZXMgYW5kIG5ldXRyYWxpemVzIGFsbCBwb2lzb25zIGFmZmxpY3RpbmcgdGhlIHRhcmdldC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJUZWxlcG9ydCAoMS9EYXkpXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIHVuaWNvcm4gbWFnaWNhbGx5IHRlbGVwb3J0cyBpdHNlbGYgYW5kIHVwIHRvIHRocmVlIHdpbGxpbmcgY3JlYXR1cmVzIGl0IGNhbiBzZWUgd2l0aGluIDUgZnQuIG9mIGl0LCBhbG9uZyB3aXRoIGFueSBlcXVpcG1lbnQgdGhleSBhcmUgd2VhcmluZyBvciBjYXJyeWluZywgdG8gYSBsb2NhdGlvbiB0aGUgdW5pY29ybiBpcyBmYW1pbGlhciB3aXRoLCB1cCB0byAxIG1pbGUgYXdheS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGxlZ2VuZGFyeV9hY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiSG9vdmVzXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIHVuaWNvcm4gbWFrZXMgb25lIGF0dGFjayB3aXRoIGl0cyBob292ZXMuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiU2hpbW1lcmluZyBTaGllbGQgKENvc3RzIDIgQWN0aW9ucylcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgdW5pY29ybiBjcmVhdGVzIGEgc2hpbW1lcmluZywgbWFnaWNhbCBmaWVsZCBhcm91bmQgaXRzZWxmIG9yIGFub3RoZXIgY3JlYXR1cmUgaXQgY2FuIHNlZSB3aXRoaW4gNjAgZnQuIG9mIGl0LiBUaGUgdGFyZ2V0IGdhaW5zIGEgKzIgYm9udXMgdG8gQUMgdW50aWwgdGhlIGVuZCBvZiB0aGUgdW5pY29ybidzIG5leHQgdHVybi5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJIZWFsIFNlbGYgKENvc3RzIDMgQWN0aW9ucylcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgdW5pY29ybiBtYWdpY2FsbHkgcmVnYWlucyAxMSAoMmQ4ICsgMikgaGl0IHBvaW50cy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJWYW1waXJlXCIsXG5cdFx0c2l6ZTogXCJNZWRpdW1cIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJ1bmRlYWRcIixcblx0XHRzdWJ0eXBlOiBcInNoYXBlY2hhbmdlclwiLFxuXHRcdGFsaWdubWVudDogXCJsYXdmdWwgZXZpbFwiLFxuXHRcdGFjOiAxNixcblx0XHRocDogMTQ0LFxuXHRcdGhpdF9kaWNlOiBcIjE3ZDhcIixcblx0XHRzcGVlZDogXCIzMCBmdC5cIixcblx0XHRzdGF0czogWzE4LCAxOCwgMTgsIDE3LCAxNSwgMThdLFxuXHRcdHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdGRleHRlcml0eTogOSxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHdpc2RvbTogNyxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdGNoYXJpc21hOiA5LFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdHNraWxsc2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0cGVyY2VwdGlvbjogNyxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHN0ZWFsdGg6IDksXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6XG5cdFx0XHRcIm5lY3JvdGljOyBibHVkZ2VvbmluZywgcGllcmNpbmcsIGFuZCBzbGFzaGluZyBmcm9tIG5vbm1hZ2ljYWwgd2VhcG9uc1wiLFxuXHRcdGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuXHRcdHNlbnNlczogXCJkYXJrdmlzaW9uIDEyMCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxN1wiLFxuXHRcdGxhbmd1YWdlczogXCJ0aGUgbGFuZ3VhZ2VzIGl0IGtuZXcgaW4gbGlmZVwiLFxuXHRcdGNyOiBcIjEzXCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiU2hhcGVjaGFuZ2VyXCIsXG5cdFx0XHRcdGRlc2M6IFwiSWYgdGhlIHZhbXBpcmUgaXNuJ3QgaW4gc3VuIGxpZ2h0IG9yIHJ1bm5pbmcgd2F0ZXIsIGl0IGNhbiB1c2UgaXRzIGFjdGlvbiB0byBwb2x5bW9ycGggaW50byBhIFRpbnkgYmF0IG9yIGEgTWVkaXVtIGNsb3VkIG9mIG1pc3QsIG9yIGJhY2sgaW50byBpdHMgdHJ1ZSBmb3JtLlxcbldoaWxlIGluIGJhdCBmb3JtLCB0aGUgdmFtcGlyZSBjYW4ndCBzcGVhaywgaXRzIHdhbGtpbmcgc3BlZWQgaXMgNSBmZWV0LCBhbmQgaXQgaGFzIGEgZmx5aW5nIHNwZWVkIG9mIDMwIGZlZXQuIEl0cyBzdGF0aXN0aWNzLCBvdGhlciB0aGFuIGl0cyBzaXplIGFuZCBzcGVlZCwgYXJlIHVuY2hhbmdlZC4gQW55dGhpbmcgaXQgaXMgd2VhcmluZyB0cmFuc2Zvcm1zIHdpdGggaXQsIGJ1dCBub3RoaW5nIGl0IGlzIGNhcnJ5aW5nIGRvZXMuIEl0IHJldmVydHMgdG8gaXRzIHRydWUgZm9ybSBpZiBpdCBkaWVzLlxcbldoaWxlIGluIG1pc3QgZm9ybSwgdGhlIHZhbXBpcmUgY2FuJ3QgdGFrZSBhbnkgYWN0aW9ucywgc3BlYWssIG9yIG1hbmlwdWxhdGUgb2JqZWN0cy4gSXQgaXMgd2VpZ2h0bGVzcywgaGFzIGEgZmx5aW5nIHNwZWVkIG9mIDIwIGZlZXQsIGNhbiBob3ZlciwgYW5kIGNhbiBlbnRlciBhIGhvc3RpbGUgY3JlYXR1cmUncyBzcGFjZSBhbmQgc3RvcCB0aGVyZS4gSW4gYWRkaXRpb24sIGlmIGFpciBjYW4gcGFzcyB0aHJvdWdoIGEgc3BhY2UsIHRoZSBtaXN0IGNhbiBkbyBzbyB3aXRob3V0IHNxdWVlemluZywgYW5kIGl0IGNhbid0IHBhc3MgdGhyb3VnaCB3YXRlci4gSXQgaGFzIGFkdmFudGFnZSBvbiBTdHJlbmd0aCwgRGV4dGVyaXR5LCBhbmQgQ29uc3RpdHV0aW9uIHNhdmluZyB0aHJvd3MsIGFuZCBpdCBpcyBpbW11bmUgdG8gYWxsIG5vbm1hZ2ljYWwgZGFtYWdlLCBleGNlcHQgdGhlIGRhbWFnZSBpdCB0YWtlcyBmcm9tIHN1bmxpZ2h0LlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkxlZ2VuZGFyeSBSZXNpc3RhbmNlICgzL0RheSlcIixcblx0XHRcdFx0ZGVzYzogXCJJZiB0aGUgdmFtcGlyZSBmYWlscyBhIHNhdmluZyB0aHJvdywgaXQgY2FuIGNob29zZSB0byBzdWNjZWVkIGluc3RlYWQuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTWlzdHkgRXNjYXBlXCIsXG5cdFx0XHRcdGRlc2M6IFwiV2hlbiBpdCBkcm9wcyB0byAwIGhpdCBwb2ludHMgb3V0c2lkZSBpdHMgcmVzdGluZyBwbGFjZSwgdGhlIHZhbXBpcmUgdHJhbnNmb3JtcyBpbnRvIGEgY2xvdWQgb2YgbWlzdCAoYXMgaW4gdGhlIFNoYXBlY2hhbmdlciB0cmFpdCkgaW5zdGVhZCBvZiBmYWxsaW5nIHVuY29uc2Npb3VzLCBwcm92aWRlZCB0aGF0IGl0IGlzbid0IGluIHN1bmxpZ2h0IG9yIHJ1bm5pbmcgd2F0ZXIuIElmIGl0IGNhbid0IHRyYW5zZm9ybSwgaXQgaXMgZGVzdHJveWVkLlxcbldoaWxlIGl0IGhhcyAwIGhpdCBwb2ludHMgaW4gbWlzdCBmb3JtLCBpdCBjYW4ndCByZXZlcnQgdG8gaXRzIHZhbXBpcmUgZm9ybSwgYW5kIGl0IG11c3QgcmVhY2ggaXRzIHJlc3RpbmcgcGxhY2Ugd2l0aGluIDIgaG91cnMgb3IgYmUgZGVzdHJveWVkLiBPbmNlIGluIGl0cyByZXN0aW5nIHBsYWNlLCBpdCByZXZlcnRzIHRvIGl0cyB2YW1waXJlIGZvcm0uIEl0IGlzIHRoZW4gcGFyYWx5emVkIHVudGlsIGl0IHJlZ2FpbnMgYXQgbGVhc3QgMSBoaXQgcG9pbnQuIEFmdGVyIHNwZW5kaW5nIDEgaG91ciBpbiBpdHMgcmVzdGluZyBwbGFjZSB3aXRoIDAgaGl0IHBvaW50cywgaXQgcmVnYWlucyAxIGhpdCBwb2ludC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJSZWdlbmVyYXRpb25cIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgdmFtcGlyZSByZWdhaW5zIDIwIGhpdCBwb2ludHMgYXQgdGhlIHN0YXJ0IG9mIGl0cyB0dXJuIGlmIGl0IGhhcyBhdCBsZWFzdCAxIGhpdCBwb2ludCBhbmQgaXNuJ3QgaW4gc3VubGlnaHQgb3IgcnVubmluZyB3YXRlci4gSWYgdGhlIHZhbXBpcmUgdGFrZXMgcmFkaWFudCBkYW1hZ2Ugb3IgZGFtYWdlIGZyb20gaG9seSB3YXRlciwgdGhpcyB0cmFpdCBkb2Vzbid0IGZ1bmN0aW9uIGF0IHRoZSBzdGFydCBvZiB0aGUgdmFtcGlyZSdzIG5leHQgdHVybi5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJTcGlkZXIgQ2xpbWJcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgdmFtcGlyZSBjYW4gY2xpbWIgZGlmZmljdWx0IHN1cmZhY2VzLCBpbmNsdWRpbmcgdXBzaWRlIGRvd24gb24gY2VpbGluZ3MsIHdpdGhvdXQgbmVlZGluZyB0byBtYWtlIGFuIGFiaWxpdHkgY2hlY2suXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiVmFtcGlyZSBXZWFrbmVzc2VzXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIHZhbXBpcmUgaGFzIHRoZSBmb2xsb3dpbmcgZmxhd3M6XFxuRm9yYmlkZGFuY2UuIFRoZSB2YW1waXJlIGNhbid0IGVudGVyIGEgcmVzaWRlbmNlIHdpdGhvdXQgYW4gaW52aXRhdGlvbiBmcm9tIG9uZSBvZiB0aGUgb2NjdXBhbnRzLlxcbkhhcm1lZCBieSBSdW5uaW5nIFdhdGVyLiBUaGUgdmFtcGlyZSB0YWtlcyAyMCBhY2lkIGRhbWFnZSBpZiBpdCBlbmRzIGl0cyB0dXJuIGluIHJ1bm5pbmcgd2F0ZXIuXFxuU3Rha2UgdG8gdGhlIEhlYXJ0LiBJZiBhIHBpZXJjaW5nIHdlYXBvbiBtYWRlIG9mIHdvb2QgaXMgZHJpdmVuIGludG8gdGhlIHZhbXBpcmUncyBoZWFydCB3aGlsZSB0aGUgdmFtcGlyZSBpcyBpbmNhcGFjaXRhdGVkIGluIGl0cyByZXN0aW5nIHBsYWNlLCB0aGUgdmFtcGlyZSBpcyBwYXJhbHl6ZWQgdW50aWwgdGhlIHN0YWtlIGlzIHJlbW92ZWQuXFxuU3VubGlnaHQgSHlwZXJzZW5zaXRpdml0eS4gVGhlIHZhbXBpcmUgdGFrZXMgMjAgcmFkaWFudCBkYW1hZ2Ugd2hlbiBpdCBzdGFydHMgaXRzIHR1cm4gaW4gc3VubGlnaHQuIFdoaWxlIGluIHN1bmxpZ2h0LCBpdCBoYXMgZGlzYWR2YW50YWdlIG9uIGF0dGFjayByb2xscyBhbmQgYWJpbGl0eSBjaGVja3MuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTXVsdGlhdHRhY2sgKFZhbXBpcmUgRm9ybSBPbmx5KVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSB2YW1waXJlIG1ha2VzIHR3byBhdHRhY2tzLCBvbmx5IG9uZSBvZiB3aGljaCBjYW4gYmUgYSBiaXRlIGF0dGFjay5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJVbmFybWVkIFN0cmlrZSAoVmFtcGlyZSBGb3JtIE9ubHkpXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzkgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIGNyZWF0dXJlLiBIaXQ6IDggKDFkOCArIDQpIGJsdWRnZW9uaW5nIGRhbWFnZS4gSW5zdGVhZCBvZiBkZWFsaW5nIGRhbWFnZSwgdGhlIHZhbXBpcmUgY2FuIGdyYXBwbGUgdGhlIHRhcmdldCAoZXNjYXBlIERDIDE4KS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA5LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxZDhcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiA0LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJCaXRlIChCYXQgb3IgVmFtcGlyZSBGb3JtIE9ubHkpXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzkgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHdpbGxpbmcgY3JlYXR1cmUsIG9yIGEgY3JlYXR1cmUgdGhhdCBpcyBncmFwcGxlZCBieSB0aGUgdmFtcGlyZSwgaW5jYXBhY2l0YXRlZCwgb3IgcmVzdHJhaW5lZC4gSGl0OiA3ICgxZDYgKyA0KSBwaWVyY2luZyBkYW1hZ2UgcGx1cyAxMCAoM2Q2KSBuZWNyb3RpYyBkYW1hZ2UuIFRoZSB0YXJnZXQncyBoaXQgcG9pbnQgbWF4aW11bSBpcyByZWR1Y2VkIGJ5IGFuIGFtb3VudCBlcXVhbCB0byB0aGUgbmVjcm90aWMgZGFtYWdlIHRha2VuLCBhbmQgdGhlIHZhbXBpcmUgcmVnYWlucyBoaXQgcG9pbnRzIGVxdWFsIHRvIHRoYXQgYW1vdW50LiBUaGUgcmVkdWN0aW9uIGxhc3RzIHVudGlsIHRoZSB0YXJnZXQgZmluaXNoZXMgYSBsb25nIHJlc3QuIFRoZSB0YXJnZXQgZGllcyBpZiB0aGlzIGVmZmVjdCByZWR1Y2VzIGl0cyBoaXQgcG9pbnQgbWF4aW11bSB0byAwLiBBIGh1bWFub2lkIHNsYWluIGluIHRoaXMgd2F5IGFuZCB0aGVuIGJ1cmllZCBpbiB0aGUgZ3JvdW5kIHJpc2VzIHRoZSBmb2xsb3dpbmcgbmlnaHQgYXMgYSB2YW1waXJlIHNwYXduIHVuZGVyIHRoZSB2YW1waXJlJ3MgY29udHJvbC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA5LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxZDYgKyAzZDZcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiA0LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJDaGFybVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSB2YW1waXJlIHRhcmdldHMgb25lIGh1bWFub2lkIGl0IGNhbiBzZWUgd2l0aGluIDMwIGZ0LiBvZiBpdC4gSWYgdGhlIHRhcmdldCBjYW4gc2VlIHRoZSB2YW1waXJlLCB0aGUgdGFyZ2V0IG11c3Qgc3VjY2VlZCBvbiBhIERDIDE3IFdpc2RvbSBzYXZpbmcgdGhyb3cgYWdhaW5zdCB0aGlzIG1hZ2ljIG9yIGJlIGNoYXJtZWQgYnkgdGhlIHZhbXBpcmUuIFRoZSBjaGFybWVkIHRhcmdldCByZWdhcmRzIHRoZSB2YW1waXJlIGFzIGEgdHJ1c3RlZCBmcmllbmQgdG8gYmUgaGVlZGVkIGFuZCBwcm90ZWN0ZWQuIEFsdGhvdWdoIHRoZSB0YXJnZXQgaXNuJ3QgdW5kZXIgdGhlIHZhbXBpcmUncyBjb250cm9sLCBpdCB0YWtlcyB0aGUgdmFtcGlyZSdzIHJlcXVlc3RzIG9yIGFjdGlvbnMgaW4gdGhlIG1vc3QgZmF2b3JhYmxlIHdheSBpdCBjYW4sIGFuZCBpdCBpcyBhIHdpbGxpbmcgdGFyZ2V0IGZvciB0aGUgdmFtcGlyZSdzIGJpdCBhdHRhY2suXFxuRWFjaCB0aW1lIHRoZSB2YW1waXJlIG9yIHRoZSB2YW1waXJlJ3MgY29tcGFuaW9ucyBkbyBhbnl0aGluZyBoYXJtZnVsIHRvIHRoZSB0YXJnZXQsIGl0IGNhbiByZXBlYXQgdGhlIHNhdmluZyB0aHJvdywgZW5kaW5nIHRoZSBlZmZlY3Qgb24gaXRzZWxmIG9uIGEgc3VjY2Vzcy4gT3RoZXJ3aXNlLCB0aGUgZWZmZWN0IGxhc3RzIDI0IGhvdXJzIG9yIHVudGlsIHRoZSB2YW1waXJlIGlzIGRlc3Ryb3llZCwgaXMgb24gYSBkaWZmZXJlbnQgcGxhbmUgb2YgZXhpc3RlbmNlIHRoYW4gdGhlIHRhcmdldCwgb3IgdGFrZXMgYSBib251cyBhY3Rpb24gdG8gZW5kIHRoZSBlZmZlY3QuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQ2hpbGRyZW4gb2YgdGhlIE5pZ2h0ICgxL0RheSlcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgdmFtcGlyZSBtYWdpY2FsbHkgY2FsbHMgMmQ0IHN3YXJtcyBvZiBiYXRzIG9yIHJhdHMsIHByb3ZpZGVkIHRoYXQgdGhlIHN1biBpc24ndCB1cC4gV2hpbGUgb3V0ZG9vcnMsIHRoZSB2YW1waXJlIGNhbiBjYWxsIDNkNiB3b2x2ZXMgaW5zdGVhZC4gVGhlIGNhbGxlZCBjcmVhdHVyZXMgYXJyaXZlIGluIDFkNCByb3VuZHMsIGFjdGluZyBhcyBhbGxpZXMgb2YgdGhlIHZhbXBpcmUgYW5kIG9iZXlpbmcgaXRzIHNwb2tlbiBjb21tYW5kcy4gVGhlIGJlYXN0cyByZW1haW4gZm9yIDEgaG91ciwgdW50aWwgdGhlIHZhbXBpcmUgZGllcywgb3IgdW50aWwgdGhlIHZhbXBpcmUgZGlzbWlzc2VzIHRoZW0gYXMgYSBib251cyBhY3Rpb24uXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRsZWdlbmRhcnlfYWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIk1vdmVcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgdmFtcGlyZSBtb3ZlcyB1cCB0byBpdHMgc3BlZWQgd2l0aG91dCBwcm92b2tpbmcgb3Bwb3J0dW5pdHkgYXR0YWNrcy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJVbmFybWVkIFN0cmlrZVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSB2YW1waXJlIG1ha2VzIG9uZSB1bmFybWVkIHN0cmlrZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJCaXRlIChDb3N0cyAyIEFjdGlvbnMpXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIHZhbXBpcmUgbWFrZXMgb25lIGJpdGUgYXR0YWNrLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIlZhbXBpcmUgU3Bhd25cIixcblx0XHRzaXplOiBcIk1lZGl1bVwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcInVuZGVhZFwiLFxuXHRcdHN1YnR5cGU6IFwiXCIsXG5cdFx0YWxpZ25tZW50OiBcIm5ldXRyYWwgZXZpbFwiLFxuXHRcdGFjOiAxNSxcblx0XHRocDogODIsXG5cdFx0aGl0X2RpY2U6IFwiMTFkOFwiLFxuXHRcdHNwZWVkOiBcIjMwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbMTYsIDE2LCAxNiwgMTEsIDEwLCAxMl0sXG5cdFx0c2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0ZGV4dGVyaXR5OiA2LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0d2lzZG9tOiAzLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdHNraWxsc2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0cGVyY2VwdGlvbjogMyxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHN0ZWFsdGg6IDYsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6XG5cdFx0XHRcIm5lY3JvdGljOyBibHVkZ2VvbmluZywgcGllcmNpbmcsIGFuZCBzbGFzaGluZyBmcm9tIG5vbm1hZ2ljYWwgd2VhcG9uc1wiLFxuXHRcdGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuXHRcdHNlbnNlczogXCJkYXJrdmlzaW9uIDYwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDEzXCIsXG5cdFx0bGFuZ3VhZ2VzOiBcInRoZSBsYW5ndWFnZXMgaXQga25ldyBpbiBsaWZlXCIsXG5cdFx0Y3I6IFwiNVwiLFxuXHRcdHRyYWl0czogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlJlZ2VuZXJhdGlvblwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSB2YW1waXJlIHJlZ2FpbnMgMTAgaGl0IHBvaW50cyBhdCB0aGUgc3RhcnQgb2YgaXRzIHR1cm4gaWYgaXQgaGFzIGF0IGxlYXN0IDEgaGl0IHBvaW50IGFuZCBpc24ndCBpbiBzdW5saWdodCBvciBydW5uaW5nIHdhdGVyLiBJZiB0aGUgdmFtcGlyZSB0YWtlcyByYWRpYW50IGRhbWFnZSBvciBkYW1hZ2UgZnJvbSBob2x5IHdhdGVyLCB0aGlzIHRyYWl0IGRvZXNuJ3QgZnVuY3Rpb24gYXQgdGhlIHN0YXJ0IG9mIHRoZSB2YW1waXJlJ3MgbmV4dCB0dXJuLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlNwaWRlciBDbGltYlwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSB2YW1waXJlIGNhbiBjbGltYiBkaWZmaWN1bHQgc3VyZmFjZXMsIGluY2x1ZGluZyB1cHNpZGUgZG93biBvbiBjZWlsaW5ncywgd2l0aG91dCBuZWVkaW5nIHRvIG1ha2UgYW4gYWJpbGl0eSBjaGVjay5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJWYW1waXJlIFdlYWtuZXNzZXNcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgdmFtcGlyZSBoYXMgdGhlIGZvbGxvd2luZyBmbGF3czpcXG5Gb3JiaWRkYW5jZS4gVGhlIHZhbXBpcmUgY2FuJ3QgZW50ZXIgYSByZXNpZGVuY2Ugd2l0aG91dCBhbiBpbnZpdGF0aW9uIGZyb20gb25lIG9mIHRoZSBvY2N1cGFudHMuXFxuSGFybWVkIGJ5IFJ1bm5pbmcgV2F0ZXIuIFRoZSB2YW1waXJlIHRha2VzIDIwIGFjaWQgZGFtYWdlIHdoZW4gaXQgZW5kcyBpdHMgdHVybiBpbiBydW5uaW5nIHdhdGVyLlxcblN0YWtlIHRvIHRoZSBIZWFydC4gVGhlIHZhbXBpcmUgaXMgZGVzdHJveWVkIGlmIGEgcGllcmNpbmcgd2VhcG9uIG1hZGUgb2Ygd29vZCBpcyBkcml2ZW4gaW50byBpdHMgaGVhcnQgd2hpbGUgaXQgaXMgaW5jYXBhY2l0YXRlZCBpbiBpdHMgcmVzdGluZyBwbGFjZS5cXG5TdW5saWdodCBIeXBlcnNlbnNpdGl2aXR5LiBUaGUgdmFtcGlyZSB0YWtlcyAyMCByYWRpYW50IGRhbWFnZSB3aGVuIGl0IHN0YXJ0cyBpdHMgdHVybiBpbiBzdW5saWdodC4gV2hpbGUgaW4gc3VubGlnaHQsIGl0IGhhcyBkaXNhZHZhbnRhZ2Ugb24gYXR0YWNrIHJvbGxzIGFuZCBhYmlsaXR5IGNoZWNrcy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJNdWx0aWF0dGFja1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSB2YW1waXJlIG1ha2VzIHR3byBhdHRhY2tzLCBvbmx5IG9uZSBvZiB3aGljaCBjYW4gYmUgYSBiaXRlIGF0dGFjay5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJCaXRlXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzYgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHdpbGxpbmcgY3JlYXR1cmUsIG9yIGEgY3JlYXR1cmUgdGhhdCBpcyBncmFwcGxlZCBieSB0aGUgdmFtcGlyZSwgaW5jYXBhY2l0YXRlZCwgb3IgcmVzdHJhaW5lZC4gSGl0OiA2ICgxZDYgKyAzKSBwaWVyY2luZyBkYW1hZ2UgcGx1cyA3ICgyZDYpIG5lY3JvdGljIGRhbWFnZS4gVGhlIHRhcmdldCdzIGhpdCBwb2ludCBtYXhpbXVtIGlzIHJlZHVjZWQgYnkgYW4gYW1vdW50IGVxdWFsIHRvIHRoZSBuZWNyb3RpYyBkYW1hZ2UgdGFrZW4sIGFuZCB0aGUgdmFtcGlyZSByZWdhaW5zIGhpdCBwb2ludHMgZXF1YWwgdG8gdGhhdCBhbW91bnQuIFRoZSByZWR1Y3Rpb24gbGFzdHMgdW50aWwgdGhlIHRhcmdldCBmaW5pc2hlcyBhIGxvbmcgcmVzdC4gVGhlIHRhcmdldCBkaWVzIGlmIHRoaXMgZWZmZWN0IHJlZHVjZXMgaXRzIGhpdCBwb2ludCBtYXhpbXVtIHRvIDAuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNjEsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkNsYXdzXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzYgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIGNyZWF0dXJlLiBIaXQ6IDggKDJkNCArIDMpIHNsYXNoaW5nIGRhbWFnZS4gSW5zdGVhZCBvZiBkZWFsaW5nIGRhbWFnZSwgdGhlIHZhbXBpcmUgY2FuIGdyYXBwbGUgdGhlIHRhcmdldCAoZXNjYXBlIERDIDEzKS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA2LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIyZDRcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiAzLFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJWZXRlcmFuXCIsXG5cdFx0c2l6ZTogXCJNZWRpdW1cIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJodW1hbm9pZFwiLFxuXHRcdHN1YnR5cGU6IFwiYW55IHJhY2VcIixcblx0XHRhbGlnbm1lbnQ6IFwiYW55IGFsaWdubWVudFwiLFxuXHRcdGFjOiAxNyxcblx0XHRocDogNTgsXG5cdFx0aGl0X2RpY2U6IFwiOWQ4XCIsXG5cdFx0c3BlZWQ6IFwiMzAgZnQuXCIsXG5cdFx0c3RhdHM6IFsxNiwgMTMsIDE0LCAxMCwgMTEsIDEwXSxcblx0XHRza2lsbHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdGF0aGxldGljczogNSxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHBlcmNlcHRpb246IDIsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0c2Vuc2VzOiBcInBhc3NpdmUgUGVyY2VwdGlvbiAxMlwiLFxuXHRcdGxhbmd1YWdlczogXCJhbnkgb25lIGxhbmd1YWdlICh1c3VhbGx5IENvbW1vbilcIixcblx0XHRjcjogXCIzXCIsXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIHZldGVyYW4gbWFrZXMgdHdvIGxvbmdzd29yZCBhdHRhY2tzLiBJZiBpdCBoYXMgYSBzaG9ydHN3b3JkIGRyYXduLCBpdCBjYW4gYWxzbyBtYWtlIGEgc2hvcnRzd29yZCBhdHRhY2suXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTG9uZ3N3b3JkXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzUgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiA3ICgxZDggKyAzKSBzbGFzaGluZyBkYW1hZ2UsIG9yIDggKDFkMTAgKyAzKSBzbGFzaGluZyBkYW1hZ2UgaWYgdXNlZCB3aXRoIHR3byBoYW5kcy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA1LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxZDhcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiAzLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJTaG9ydHN3b3JkXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzUgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiA2ICgxZDYgKyAzKSBwaWVyY2luZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNSxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMWQ2XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogMyxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiSGVhdnkgQ3Jvc3Nib3dcIixcblx0XHRcdFx0ZGVzYzogXCJSYW5nZWQgV2VhcG9uIEF0dGFjazogKzMgdG8gaGl0LCByYW5nZSAxMDAvNDAwIGZ0Liwgb25lIHRhcmdldC4gSGl0OiA2ICgxZDEwICsgMSkgcGllcmNpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDMsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjFkMTBcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiAxLFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJWaW9sZXQgRnVuZ3VzXCIsXG5cdFx0c2l6ZTogXCJNZWRpdW1cIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJwbGFudFwiLFxuXHRcdHN1YnR5cGU6IFwiXCIsXG5cdFx0YWxpZ25tZW50OiBcInVuYWxpZ25lZFwiLFxuXHRcdGFjOiA1LFxuXHRcdGhwOiAxOCxcblx0XHRoaXRfZGljZTogXCI0ZDhcIixcblx0XHRzcGVlZDogXCI1IGZ0LlwiLFxuXHRcdHN0YXRzOiBbMywgMSwgMTAsIDEsIDMsIDFdLFxuXHRcdGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuXHRcdGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcImJsaW5kZWQsIGRlYWZlbmVkLCBmcmlnaHRlbmVkXCIsXG5cdFx0c2Vuc2VzOiBcImJsaW5kc2lnaHQgMzAgZnQuIChibGluZCBiZXlvbmQgdGhpcyByYWRpdXMpLCBwYXNzaXZlIFBlcmNlcHRpb24gNlwiLFxuXHRcdGxhbmd1YWdlczogXCJcIixcblx0XHRjcjogXCIxLzRcIixcblx0XHR0cmFpdHM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJGYWxzZSBBcHBlYXJhbmNlXCIsXG5cdFx0XHRcdGRlc2M6IFwiV2hpbGUgdGhlIHZpb2xldCBmdW5ndXMgcmVtYWlucyBtb3Rpb25sZXNzLCBpdCBpcyBpbmRpc3Rpbmd1aXNoYWJsZSBmcm9tIGFuIG9yZGluYXJ5IGZ1bmd1cy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJNdWx0aWF0dGFja1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBmdW5ndXMgbWFrZXMgMWQ0IFJvdHRpbmcgVG91Y2ggYXR0YWNrcy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJSb3R0aW5nIFRvdWNoXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzIgdG8gaGl0LCByZWFjaCAxMCBmdC4sIG9uZSBjcmVhdHVyZS4gSGl0OiA0ICgxZDgpIG5lY3JvdGljIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAyLFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxZDhcIixcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiVnJvY2tcIixcblx0XHRzaXplOiBcIkxhcmdlXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwiZmllbmRcIixcblx0XHRzdWJ0eXBlOiBcImRlbW9uXCIsXG5cdFx0YWxpZ25tZW50OiBcImNoYW90aWMgZXZpbFwiLFxuXHRcdGFjOiAxNSxcblx0XHRocDogMTA0LFxuXHRcdGhpdF9kaWNlOiBcIjExZDEwXCIsXG5cdFx0c3BlZWQ6IFwiNDAgZnQuLCBmbHkgNjAgZnQuXCIsXG5cdFx0c3RhdHM6IFsxNywgMTUsIDE4LCA4LCAxMywgOF0sXG5cdFx0c2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0ZGV4dGVyaXR5OiA1LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0d2lzZG9tOiA0LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0Y2hhcmlzbWE6IDIsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6XG5cdFx0XHRcImNvbGQsIGZpcmUsIGxpZ2h0bmluZzsgYmx1ZGdlb25pbmcsIHBpZXJjaW5nLCBhbmQgc2xhc2hpbmcgZnJvbSBub25tYWdpY2FsIHdlYXBvbnNcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJwb2lzb25cIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczogXCJwb2lzb25lZFwiLFxuXHRcdHNlbnNlczogXCJkYXJrdmlzaW9uIDEyMCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxMVwiLFxuXHRcdGxhbmd1YWdlczogXCJBYnlzc2FsLCB0ZWxlcGF0aHkgMTIwIGZ0LlwiLFxuXHRcdGNyOiBcIjZcIixcblx0XHR0cmFpdHM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJNYWdpYyBSZXNpc3RhbmNlXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIHZyb2NrIGhhcyBhZHZhbnRhZ2Ugb24gc2F2aW5nIHRocm93cyBhZ2FpbnN0IHNwZWxscyBhbmQgb3RoZXIgbWFnaWNhbCBlZmZlY3RzLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIHZyb2NrIG1ha2VzIHR3byBhdHRhY2tzOiBvbmUgd2l0aCBpdHMgYmVhayBhbmQgb25lIHdpdGggaXRzIHRhbG9ucy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJCZWFrXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzYgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxMCAoMmQ2ICsgMykgcGllcmNpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDYsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjJkNlwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDMsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlRhbG9uc1wiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs2IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTQgKDJkMTAgKyAzKSBzbGFzaGluZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNixcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMmQxMFwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDMsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlNwb3JlcyAoUmVjaGFyZ2UgNilcIixcblx0XHRcdFx0ZGVzYzogXCJBIDE1LWZvb3QtcmFkaXVzIGNsb3VkIG9mIHRveGljIHNwb3JlcyBleHRlbmRzIG91dCBmcm9tIHRoZSB2cm9jay4gVGhlIHNwb3JlcyBzcHJlYWQgYXJvdW5kIGNvcm5lcnMuIEVhY2ggY3JlYXR1cmUgaW4gdGhhdCBhcmVhIG11c3Qgc3VjY2VlZCBvbiBhIERDIDE0IENvbnN0aXR1dGlvbiBzYXZpbmcgdGhyb3cgb3IgYmVjb21lIHBvaXNvbmVkLiBXaGlsZSBwb2lzb25lZCBpbiB0aGlzIHdheSwgYSB0YXJnZXQgdGFrZXMgNSAoMWQxMCkgcG9pc29uIGRhbWFnZSBhdCB0aGUgc3RhcnQgb2YgZWFjaCBvZiBpdHMgdHVybnMuIEEgdGFyZ2V0IGNhbiByZXBlYXQgdGhlIHNhdmluZyB0aHJvdyBhdCB0aGUgZW5kIG9mIGVhY2ggb2YgaXRzIHR1cm5zLCBlbmRpbmcgdGhlIGVmZmVjdCBvbiBpdHNlbGYgb24gYSBzdWNjZXNzLiBFbXB0eWluZyBhIHZpYWwgb2YgaG9seSB3YXRlciBvbiB0aGUgdGFyZ2V0IGFsc28gZW5kcyB0aGUgZWZmZWN0IG9uIGl0LlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlN0dW5uaW5nIFNjcmVlY2ggKDEvRGF5KVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSB2cm9jayBlbWl0cyBhIGhvcnJpZmljIHNjcmVlY2guIEVhY2ggY3JlYXR1cmUgd2l0aGluIDIwIGZlZXQgb2YgaXQgdGhhdCBjYW4gaGVhciBpdCBhbmQgdGhhdCBpc24ndCBhIGRlbW9uIG11c3Qgc3VjY2VlZCBvbiBhIERDIDE0IENvbnN0aXR1dGlvbiBzYXZpbmcgdGhyb3cgb3IgYmUgc3R1bm5lZCB1bnRpbCB0aGUgZW5kIG9mIHRoZSB2cm9jaydzIG5leHQgdHVybiAuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiVmFyaWFudDogU3VtbW9uIERlbW9uICgxL0RheSlcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgZGVtb24gY2hvb3NlcyB3aGF0IHRvIHN1bW1vbiBhbmQgYXR0ZW1wdHMgYSBtYWdpY2FsIHN1bW1vbmluZy5cXG5BIHZyb2NrIGhhcyBhIDMwIHBlcmNlbnQgY2hhbmNlIG9mIHN1bW1vbmluZyAyZDQgZHJldGNoZXMgb3Igb25lIHZyb2NrLlxcbkEgc3VtbW9uZWQgZGVtb24gYXBwZWFycyBpbiBhbiB1bm9jY3VwaWVkIHNwYWNlIHdpdGhpbiA2MCBmZWV0IG9mIGl0cyBzdW1tb25lciwgYWN0cyBhcyBhbiBhbGx5IG9mIGl0cyBzdW1tb25lciwgYW5kIGNhbid0IHN1bW1vbiBvdGhlciBkZW1vbnMuIEl0IHJlbWFpbnMgZm9yIDEgbWludXRlLCB1bnRpbCBpdCBvciBpdHMgc3VtbW9uZXIgZGllcywgb3IgdW50aWwgaXRzIHN1bW1vbmVyIGRpc21pc3NlcyBpdCBhcyBhbiBhY3Rpb24uXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiVnVsdHVyZVwiLFxuXHRcdHNpemU6IFwiTWVkaXVtXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwiYmVhc3RcIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcblx0XHRhYzogMTAsXG5cdFx0aHA6IDUsXG5cdFx0aGl0X2RpY2U6IFwiMWQ4XCIsXG5cdFx0c3BlZWQ6IFwiMTAgZnQuLCBmbHkgNTAgZnQuXCIsXG5cdFx0c3RhdHM6IFs3LCAxMCwgMTMsIDIsIDEyLCA0XSxcblx0XHRza2lsbHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdHBlcmNlcHRpb246IDMsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0c2Vuc2VzOiBcInBhc3NpdmUgUGVyY2VwdGlvbiAxM1wiLFxuXHRcdGxhbmd1YWdlczogXCJcIixcblx0XHRjcjogXCIwXCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiS2VlbiBTaWdodCBhbmQgU21lbGxcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgdnVsdHVyZSBoYXMgYWR2YW50YWdlIG9uIFdpc2RvbSAoUGVyY2VwdGlvbikgY2hlY2tzIHRoYXQgcmVseSBvbiBzaWdodCBvciBzbWVsbC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJQYWNrIFRhY3RpY3NcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgdnVsdHVyZSBoYXMgYWR2YW50YWdlIG9uIGFuIGF0dGFjayByb2xsIGFnYWluc3QgYSBjcmVhdHVyZSBpZiBhdCBsZWFzdCBvbmUgb2YgdGhlIHZ1bHR1cmUncyBhbGxpZXMgaXMgd2l0aGluIDUgZnQuIG9mIHRoZSBjcmVhdHVyZSBhbmQgdGhlIGFsbHkgaXNuJ3QgaW5jYXBhY2l0YXRlZC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJCZWFrXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzIgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAyICgxZDQpIHBpZXJjaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAyLFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxZDRcIixcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiV2FyaG9yc2VcIixcblx0XHRzaXplOiBcIkxhcmdlXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwiYmVhc3RcIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcblx0XHRhYzogMTEsXG5cdFx0aHA6IDE5LFxuXHRcdGhpdF9kaWNlOiBcIjNkMTBcIixcblx0XHRzcGVlZDogXCI2MCBmdC5cIixcblx0XHRzdGF0czogWzE4LCAxMiwgMTMsIDIsIDEyLCA3XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcblx0XHRzZW5zZXM6IFwicGFzc2l2ZSBQZXJjZXB0aW9uIDExXCIsXG5cdFx0bGFuZ3VhZ2VzOiBcIlwiLFxuXHRcdGNyOiBcIjEvMlwiLFxuXHRcdHRyYWl0czogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlRyYW1wbGluZyBDaGFyZ2VcIixcblx0XHRcdFx0ZGVzYzogXCJJZiB0aGUgaG9yc2UgbW92ZXMgYXQgbGVhc3QgMjAgZnQuIHN0cmFpZ2h0IHRvd2FyZCBhIGNyZWF0dXJlIGFuZCB0aGVuIGhpdHMgaXQgd2l0aCBhIGhvb3ZlcyBhdHRhY2sgb24gdGhlIHNhbWUgdHVybiwgdGhhdCB0YXJnZXQgbXVzdCBzdWNjZWVkIG9uIGEgREMgMTQgU3RyZW5ndGggc2F2aW5nIHRocm93IG9yIGJlIGtub2NrZWQgcHJvbmUuIElmIHRoZSB0YXJnZXQgaXMgcHJvbmUsIHRoZSBob3JzZSBjYW4gbWFrZSBhbm90aGVyIGF0dGFjayB3aXRoIGl0cyBob292ZXMgYWdhaW5zdCBpdCBhcyBhIGJvbnVzIGFjdGlvbi5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJIb292ZXNcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNiB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDExICgyZDYgKyA0KSBibHVkZ2VvbmluZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNixcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMmQ2XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogNCxcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiV2FyaG9yc2UgU2tlbGV0b25cIixcblx0XHRzaXplOiBcIkxhcmdlXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwidW5kZWFkXCIsXG5cdFx0c3VidHlwZTogXCJcIixcblx0XHRhbGlnbm1lbnQ6IFwibGF3ZnVsIGV2aWxcIixcblx0XHRhYzogMTMsXG5cdFx0aHA6IDIyLFxuXHRcdGhpdF9kaWNlOiBcIjNkMTBcIixcblx0XHRzcGVlZDogXCI2MCBmdC5cIixcblx0XHRzdGF0czogWzE4LCAxMiwgMTUsIDIsIDgsIDVdLFxuXHRcdGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiYmx1ZGdlb25pbmdcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwicG9pc29uXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiZXhoYXVzdGlvbiwgcG9pc29uZWRcIixcblx0XHRzZW5zZXM6IFwiZGFya3Zpc2lvbiA2MCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiA5XCIsXG5cdFx0bGFuZ3VhZ2VzOiBcIlwiLFxuXHRcdGNyOiBcIjEvMlwiLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJIb292ZXNcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNiB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDExICgyZDYgKyA0KSBibHVkZ2VvbmluZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNixcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMmQ2XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogNCxcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiV2F0ZXIgRWxlbWVudGFsXCIsXG5cdFx0c2l6ZTogXCJMYXJnZVwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcImVsZW1lbnRhbFwiLFxuXHRcdHN1YnR5cGU6IFwiXCIsXG5cdFx0YWxpZ25tZW50OiBcIm5ldXRyYWxcIixcblx0XHRhYzogMTQsXG5cdFx0aHA6IDExNCxcblx0XHRoaXRfZGljZTogXCIxMmQxMFwiLFxuXHRcdHNwZWVkOiBcIjMwIGZ0Liwgc3dpbSA5MCBmdC5cIixcblx0XHRzdGF0czogWzE4LCAxNCwgMTgsIDUsIDEwLCA4XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczpcblx0XHRcdFwiYWNpZDsgYmx1ZGdlb25pbmcsIHBpZXJjaW5nLCBhbmQgc2xhc2hpbmcgZnJvbSBub25tYWdpY2FsIHdlYXBvbnNcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJwb2lzb25cIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczpcblx0XHRcdFwiZXhoYXVzdGlvbiwgZ3JhcHBsZWQsIHBhcmFseXplZCwgcGV0cmlmaWVkLCBwb2lzb25lZCwgcHJvbmUsIHJlc3RyYWluZWQsIHVuY29uc2Npb3VzXCIsXG5cdFx0c2Vuc2VzOiBcImRhcmt2aXNpb24gNjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTBcIixcblx0XHRsYW5ndWFnZXM6IFwiQXF1YW5cIixcblx0XHRjcjogXCI1XCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiV2F0ZXIgRm9ybVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBlbGVtZW50YWwgY2FuIGVudGVyIGEgaG9zdGlsZSBjcmVhdHVyZSdzIHNwYWNlIGFuZCBzdG9wIHRoZXJlLiBJdCBjYW4gbW92ZSB0aHJvdWdoIGEgc3BhY2UgYXMgbmFycm93IGFzIDEgaW5jaCB3aWRlIHdpdGhvdXQgc3F1ZWV6aW5nLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkZyZWV6ZVwiLFxuXHRcdFx0XHRkZXNjOiBcIklmIHRoZSBlbGVtZW50YWwgdGFrZXMgY29sZCBkYW1hZ2UsIGl0IHBhcnRpYWxseSBmcmVlemVzOyBpdHMgc3BlZWQgaXMgcmVkdWNlZCBieSAyMCBmdC4gdW50aWwgdGhlIGVuZCBvZiBpdHMgbmV4dCB0dXJuLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGVsZW1lbnRhbCBtYWtlcyB0d28gc2xhbSBhdHRhY2tzLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlNsYW1cIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNyB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDEzICgyZDggKyA0KSBibHVkZ2VvbmluZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNyxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMmQ4XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogNCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiV2hlbG0gKFJlY2hhcmdlIDQtNilcIixcblx0XHRcdFx0ZGVzYzogXCJFYWNoIGNyZWF0dXJlIGluIHRoZSBlbGVtZW50YWwncyBzcGFjZSBtdXN0IG1ha2UgYSBEQyAxNSBTdHJlbmd0aCBzYXZpbmcgdGhyb3cuIE9uIGEgZmFpbHVyZSwgYSB0YXJnZXQgdGFrZXMgMTMgKDJkOCArIDQpIGJsdWRnZW9uaW5nIGRhbWFnZS4gSWYgaXQgaXMgTGFyZ2Ugb3Igc21hbGxlciwgaXQgaXMgYWxzbyBncmFwcGxlZCAoZXNjYXBlIERDIDE0KS4gVW50aWwgdGhpcyBncmFwcGxlIGVuZHMsIHRoZSB0YXJnZXQgaXMgcmVzdHJhaW5lZCBhbmQgdW5hYmxlIHRvIGJyZWF0aGUgdW5sZXNzIGl0IGNhbiBicmVhdGhlIHdhdGVyLiBJZiB0aGUgc2F2aW5nIHRocm93IGlzIHN1Y2Nlc3NmdWwsIHRoZSB0YXJnZXQgaXMgcHVzaGVkIG91dCBvZiB0aGUgZWxlbWVudGFsJ3Mgc3BhY2UuXFxuVGhlIGVsZW1lbnRhbCBjYW4gZ3JhcHBsZSBvbmUgTGFyZ2UgY3JlYXR1cmUgb3IgdXAgdG8gdHdvIE1lZGl1bSBvciBzbWFsbGVyIGNyZWF0dXJlcyBhdCBvbmUgdGltZS4gQXQgdGhlIHN0YXJ0IG9mIGVhY2ggb2YgdGhlIGVsZW1lbnRhbCdzIHR1cm5zLCBlYWNoIHRhcmdldCBncmFwcGxlZCBieSBpdCB0YWtlcyAxMyAoMmQ4ICsgNCkgYmx1ZGdlb25pbmcgZGFtYWdlLiBBIGNyZWF0dXJlIHdpdGhpbiA1IGZlZXQgb2YgdGhlIGVsZW1lbnRhbCBjYW4gcHVsbCBhIGNyZWF0dXJlIG9yIG9iamVjdCBvdXQgb2YgaXQgYnkgdGFraW5nIGFuIGFjdGlvbiB0byBtYWtlIGEgREMgMTQgU3RyZW5ndGggYW5kIHN1Y2NlZWRpbmcuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiV2Vhc2VsXCIsXG5cdFx0c2l6ZTogXCJUaW55XCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwiYmVhc3RcIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcblx0XHRhYzogMTMsXG5cdFx0aHA6IDEsXG5cdFx0aGl0X2RpY2U6IFwiMWQ0XCIsXG5cdFx0c3BlZWQ6IFwiMzAgZnQuXCIsXG5cdFx0c3RhdHM6IFszLCAxNiwgOCwgMiwgMTIsIDNdLFxuXHRcdHNraWxsc2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0cGVyY2VwdGlvbjogMyxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHN0ZWFsdGg6IDUsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0c2Vuc2VzOiBcInBhc3NpdmUgUGVyY2VwdGlvbiAxM1wiLFxuXHRcdGxhbmd1YWdlczogXCJcIixcblx0XHRjcjogXCIwXCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiS2VlbiBIZWFyaW5nIGFuZCBTbWVsbFwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSB3ZWFzZWwgaGFzIGFkdmFudGFnZSBvbiBXaXNkb20gKFBlcmNlcHRpb24pIGNoZWNrcyB0aGF0IHJlbHkgb24gaGVhcmluZyBvciBzbWVsbC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJCaXRlXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzUgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIGNyZWF0dXJlLiBIaXQ6IDEgcGllcmNpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDUsXG5cdFx0XHRcdGRhbWFnZV9ib251czogMSxcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiV2VyZWJlYXJcIixcblx0XHRzaXplOiBcIk1lZGl1bVwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcImh1bWFub2lkXCIsXG5cdFx0c3VidHlwZTogXCJodW1hblwiLFxuXHRcdGFsaWdubWVudDogXCJuZXV0cmFsIGdvb2RcIixcblx0XHRhYzogMTAsXG5cdFx0aHA6IDEzNSxcblx0XHRoaXRfZGljZTogXCIxOGQ4XCIsXG5cdFx0c3BlZWQ6IFwiMzAgZnQuICg0MCBmdC4sIGNsaW1iIDMwIGZ0LiBpbiBiZWFyIG9yIGh5YnJpZCBmb3JtKVwiLFxuXHRcdHN0YXRzOiBbMTksIDEwLCAxNywgMTEsIDEyLCAxMl0sXG5cdFx0c2tpbGxzYXZlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRwZXJjZXB0aW9uOiA3LFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuXHRcdGRhbWFnZV9pbW11bml0aWVzOlxuXHRcdFx0XCJibHVkZ2VvbmluZywgcGllcmNpbmcsIGFuZCBzbGFzaGluZyBkYW1hZ2UgZnJvbSBub25tYWdpY2FsIHdlYXBvbnMgdGhhdCBhcmVuJ3Qgc2lsdmVyZWRcIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcblx0XHRzZW5zZXM6IFwicGFzc2l2ZSBQZXJjZXB0aW9uIDE3XCIsXG5cdFx0bGFuZ3VhZ2VzOiBcIkNvbW1vbiAoY2FuJ3Qgc3BlYWsgaW4gYmVhciBmb3JtKVwiLFxuXHRcdGNyOiBcIjVcIixcblx0XHR0cmFpdHM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJTaGFwZWNoYW5nZXJcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgd2VyZWJlYXIgY2FuIHVzZSBpdHMgYWN0aW9uIHRvIHBvbHltb3JwaCBpbnRvIGEgTGFyZ2UgYmVhci1odW1hbm9pZCBoeWJyaWQgb3IgaW50byBhIExhcmdlIGJlYXIsIG9yIGJhY2sgaW50byBpdHMgdHJ1ZSBmb3JtLCB3aGljaCBpcyBodW1hbm9pZC4gSXRzIHN0YXRpc3RpY3MsIG90aGVyIHRoYW4gaXRzIHNpemUgYW5kIEFDLCBhcmUgdGhlIHNhbWUgaW4gZWFjaCBmb3JtLiBBbnkgZXF1aXBtZW50IGl0LiBpcyB3ZWFyaW5nIG9yIGNhcnJ5aW5nIGlzbid0IHRyYW5zZm9ybWVkLiBJdCByZXZlcnRzIHRvIGl0cyB0cnVlIGZvcm0gaWYgaXQgZGllcy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJLZWVuIFNtZWxsXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIHdlcmViZWFyIGhhcyBhZHZhbnRhZ2Ugb24gV2lzR2xvbSAoUGVyY2VwdGlvbikgY2hlY2tzIHRoYXQgcmVseSBvbiBzbWVsbC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJNdWx0aWF0dGFja1wiLFxuXHRcdFx0XHRkZXNjOiBcIkluIGJlYXIgZm9ybSwgdGhlIHdlcmViZWFyIG1ha2VzIHR3byBjbGF3IGF0dGFja3MuIEluIGh1bWFub2lkIGZvcm0sIGl0IG1ha2VzIHR3byBncmVhdGF4ZSBhdHRhY2tzLiBJbiBoeWJyaWQgZm9ybSwgaXQgY2FuIGF0dGFjayBsaWtlIGEgYmVhciBvciBhIGh1bWFub2lkLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkJpdGUgKEJlYXIgb3IgSHlicmlkIEZvcm0gT25seSlcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNyB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDE1ICgyZDEwICsgNCkgcGllcmNpbmcgZGFtYWdlLiBJZiB0aGUgdGFyZ2V0IGlzIGEgaHVtYW5vaWQsIGl0IG11c3Qgc3VjY2VlZCBvbiBhIERDIDE0IENvbnN0aXR1dGlvbiBzYXZpbmcgdGhyb3cgb3IgYmUgY3Vyc2VkIHdpdGggd2VyZSBiZWFyIGx5Y2FudGhyb3B5LlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDcsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjJkMTBcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiA0LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJDbGF3IChCZWFyIG9yIEh5YnJpZCBGb3JtIE9ubHkpXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzcgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxMyAoMmQ4ICsgNCkgc2xhc2hpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDcsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjJkOFwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDQsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkdyZWF0YXhlIChIdW1hbm9pZCBvciBIeWJyaWQgRm9ybSBPbmx5KVwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs3IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTAgKDFkMTIgKyA0KSBzbGFzaGluZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNyxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMWQxMlwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDQsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIldlcmVib2FyXCIsXG5cdFx0c2l6ZTogXCJNZWRpdW1cIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJodW1hbm9pZFwiLFxuXHRcdHN1YnR5cGU6IFwiaHVtYW5cIixcblx0XHRhbGlnbm1lbnQ6IFwibmV1dHJhbCBldmlsXCIsXG5cdFx0YWM6IDEwLFxuXHRcdGhwOiA3OCxcblx0XHRoaXRfZGljZTogXCIxMmQ4XCIsXG5cdFx0c3BlZWQ6IFwiMzAgZnQuICg0MCBmdC4gaW4gYm9hciBmb3JtKVwiLFxuXHRcdHN0YXRzOiBbMTcsIDEwLCAxNSwgMTAsIDExLCA4XSxcblx0XHRza2lsbHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdHBlcmNlcHRpb246IDIsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6XG5cdFx0XHRcImJsdWRnZW9uaW5nLCBwaWVyY2luZywgYW5kIHNsYXNoaW5nIGRhbWFnZSBmcm9tIG5vbm1hZ2ljYWwgd2VhcG9ucyB0aGF0IGFyZW4ndCBzaWx2ZXJlZFwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuXHRcdHNlbnNlczogXCJwYXNzaXZlIFBlcmNlcHRpb24gMTJcIixcblx0XHRsYW5ndWFnZXM6IFwiQ29tbW9uIChjYW4ndCBzcGVhayBpbiBib2FyIGZvcm0pXCIsXG5cdFx0Y3I6IFwiNFwiLFxuXHRcdHRyYWl0czogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlNoYXBlY2hhbmdlclwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSB3ZXJlYm9hciBjYW4gdXNlIGl0cyBhY3Rpb24gdG8gcG9seW1vcnBoIGludG8gYSBib2FyLWh1bWFub2lkIGh5YnJpZCBvciBpbnRvIGEgYm9hciwgb3IgYmFjayBpbnRvIGl0cyB0cnVlIGZvcm0sIHdoaWNoIGlzIGh1bWFub2lkLiBJdHMgc3RhdGlzdGljcywgb3RoZXIgdGhhbiBpdHMgQUMsIGFyZSB0aGUgc2FtZSBpbiBlYWNoIGZvcm0uIEFueSBlcXVpcG1lbnQgaXQgaXMgd2VhcmluZyBvciBjYXJyeWluZyBpc24ndCB0cmFuc2Zvcm1lZC4gSXQgcmV2ZXJ0cyB0byBpdHMgdHJ1ZSBmb3JtIGlmIGl0IGRpZXMuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQ2hhcmdlIChCb2FyIG9yIEh5YnJpZCBGb3JtIE9ubHkpXCIsXG5cdFx0XHRcdGRlc2M6IFwiSWYgdGhlIHdlcmVib2FyIG1vdmVzIGF0IGxlYXN0IDE1IGZlZXQgc3RyYWlnaHQgdG93YXJkIGEgdGFyZ2V0IGFuZCB0aGVuIGhpdHMgaXQgd2l0aCBpdHMgdHVza3Mgb24gdGhlIHNhbWUgdHVybiwgdGhlIHRhcmdldCB0YWtlcyBhbiBleHRyYSA3ICgyZDYpIHNsYXNoaW5nIGRhbWFnZS4gSWYgdGhlIHRhcmdldCBpcyBhIGNyZWF0dXJlLCBpdCBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxMyBTdHJlbmd0aCBzYXZpbmcgdGhyb3cgb3IgYmUga25vY2tlZCBwcm9uZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIyZDZcIixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiUmVsZW50bGVzcyAoUmVjaGFyZ2VzIGFmdGVyIGEgU2hvcnQgb3IgTG9uZyBSZXN0KVwiLFxuXHRcdFx0XHRkZXNjOiBcIklmIHRoZSB3ZXJlYm9hciB0YWtlcyAxNCBkYW1hZ2Ugb3IgbGVzcyB0aGF0IHdvdWxkIHJlZHVjZSBpdCB0byAwIGhpdCBwb2ludHMsIGl0IGlzIHJlZHVjZWQgdG8gMSBoaXQgcG9pbnQgaW5zdGVhZC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJNdWx0aWF0dGFjayAoSHVtYW5vaWQgb3IgSHlicmlkIEZvcm0gT25seSlcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgd2VyZWJvYXIgbWFrZXMgdHdvIGF0dGFja3MsIG9ubHkgb25lIG9mIHdoaWNoIGNhbiBiZSB3aXRoIGl0cyB0dXNrcy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJNYXVsIChIdW1hbm9pZCBvciBIeWJyaWQgRm9ybSBPbmx5KVwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs1IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTAgKDJkNiArIDMpIGJsdWRnZW9uaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA1LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIyZDZcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiAzLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJUdXNrcyAoQm9hciBvciBIeWJyaWQgRm9ybSBPbmx5KVwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs1IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTAgKDJkNiArIDMpIHNsYXNoaW5nIGRhbWFnZS4gSWYgdGhlIHRhcmdldCBpcyBhIGh1bWFub2lkLCBpdCBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxMiBDb25zdGl0dXRpb24gc2F2aW5nIHRocm93IG9yIGJlIGN1cnNlZCB3aXRoIHdlcmVib2FyIGx5Y2FudGhyb3B5LlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDUsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjJkNlwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDMsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIldlcmVyYXRcIixcblx0XHRzaXplOiBcIk1lZGl1bVwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcImh1bWFub2lkXCIsXG5cdFx0c3VidHlwZTogXCJodW1hblwiLFxuXHRcdGFsaWdubWVudDogXCJsYXdmdWwgZXZpbFwiLFxuXHRcdGFjOiAxMixcblx0XHRocDogMzMsXG5cdFx0aGl0X2RpY2U6IFwiNmQ4XCIsXG5cdFx0c3BlZWQ6IFwiMzAgZnQuXCIsXG5cdFx0c3RhdHM6IFsxMCwgMTUsIDEyLCAxMSwgMTAsIDhdLFxuXHRcdHNraWxsc2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0cGVyY2VwdGlvbjogMixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHN0ZWFsdGg6IDQsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6XG5cdFx0XHRcImJsdWRnZW9uaW5nLCBwaWVyY2luZywgYW5kIHNsYXNoaW5nIGRhbWFnZSBmcm9tIG5vbm1hZ2ljYWwgd2VhcG9ucyB0aGF0IGFyZW4ndCBzaWx2ZXJlZFwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuXHRcdHNlbnNlczogXCJkYXJrdmlzaW9uIDYwIGZ0LiAocmF0IGZvcm0gb25seSksIHBhc3NpdmUgUGVyY2VwdGlvbiAxMlwiLFxuXHRcdGxhbmd1YWdlczogXCJDb21tb24gKGNhbid0IHNwZWFrIGluIHJhdCBmb3JtKVwiLFxuXHRcdGNyOiBcIjJcIixcblx0XHR0cmFpdHM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJTaGFwZWNoYW5nZXJcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgd2VyZXJhdCBjYW4gdXNlIGl0cyBhY3Rpb24gdG8gcG9seW1vcnBoIGludG8gYSByYXQtaHVtYW5vaWQgaHlicmlkIG9yIGludG8gYSBnaWFudCByYXQsIG9yIGJhY2sgaW50byBpdHMgdHJ1ZSBmb3JtLCB3aGljaCBpcyBodW1hbm9pZC4gSXRzIHN0YXRpc3RpY3MsIG90aGVyIHRoYW4gaXRzIHNpemUsIGFyZSB0aGUgc2FtZSBpbiBlYWNoIGZvcm0uIEFueSBlcXVpcG1lbnQgaXQgaXMgd2VhcmluZyBvciBjYXJyeWluZyBpc24ndCB0cmFuc2Zvcm1lZC4gSXQgcmV2ZXJ0cyB0byBpdHMgdHJ1ZSBmb3JtIGlmIGl0IGRpZXMuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiS2VlbiBTbWVsbFwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSB3ZXJlcmF0IGhhcyBhZHZhbnRhZ2Ugb24gV2lzZG9tIChQZXJjZXB0aW9uKSBjaGVja3MgdGhhdCByZWx5IG9uIHNtZWxsLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIk11bHRpYXR0YWNrIChIdW1hbm9pZCBvciBIeWJyaWQgRm9ybSBPbmx5KVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSB3ZXJlcmF0IG1ha2VzIHR3byBhdHRhY2tzLCBvbmx5IG9uZSBvZiB3aGljaCBjYW4gYmUgYSBiaXRlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkJpdGUgKFJhdCBvciBIeWJyaWQgRm9ybSBPbmx5KS5cIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNCB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDQgKDFkNCArIDIpIHBpZXJjaW5nIGRhbWFnZS4gSWYgdGhlIHRhcmdldCBpcyBhIGh1bWFub2lkLCBpdCBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxMSBDb25zdGl0dXRpb24gc2F2aW5nIHRocm93IG9yIGJlIGN1cnNlZCB3aXRoIHdlcmVyYXQgbHljYW50aHJvcHkuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNCxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMWQ0XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogMixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiU2hvcnRzd29yZCAoSHVtYW5vaWQgb3IgSHlicmlkIEZvcm0gT25seSlcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNCB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDUgKDFkNiArIDIpIHBpZXJjaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA0LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxZDZcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiAyLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJIYW5kIENyb3NzYm93IChIdW1hbm9pZCBvciBIeWJyaWQgRm9ybSBPbmx5KVwiLFxuXHRcdFx0XHRkZXNjOiBcIlJhbmdlZCBXZWFwb24gQXR0YWNrOiArNCB0byBoaXQsIHJhbmdlIDMwLzEyMCBmdC4sIG9uZSB0YXJnZXQuIEhpdDogNSAoMWQ2ICsgMikgcGllcmNpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDQsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjFkNlwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDIsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIldlcmV0aWdlclwiLFxuXHRcdHNpemU6IFwiTWVkaXVtXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwiaHVtYW5vaWRcIixcblx0XHRzdWJ0eXBlOiBcImh1bWFuXCIsXG5cdFx0YWxpZ25tZW50OiBcIm5ldXRyYWxcIixcblx0XHRhYzogMTIsXG5cdFx0aHA6IDEyMCxcblx0XHRoaXRfZGljZTogXCIxNmQ4XCIsXG5cdFx0c3BlZWQ6IFwiMzAgZnQuICg0MCBmdC4gaW4gdGlnZXIgZm9ybSlcIixcblx0XHRzdGF0czogWzE3LCAxNSwgMTYsIDEwLCAxMywgMTFdLFxuXHRcdHNraWxsc2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0cGVyY2VwdGlvbjogNSxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHN0ZWFsdGg6IDQsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6XG5cdFx0XHRcImJsdWRnZW9uaW5nLCBwaWVyY2luZywgYW5kIHNsYXNoaW5nIGRhbWFnZSBmcm9tIG5vbm1hZ2ljYWwgd2VhcG9ucyB0aGF0IGFyZW4ndCBzaWx2ZXJlZFwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuXHRcdHNlbnNlczogXCJkYXJrdmlzaW9uIDYwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDE1XCIsXG5cdFx0bGFuZ3VhZ2VzOiBcIkNvbW1vbiAoY2FuJ3Qgc3BlYWsgaW4gdGlnZXIgZm9ybSlcIixcblx0XHRjcjogXCI0XCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiU2hhcGVjaGFuZ2VyXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIHdlcmV0aWdlciBjYW4gdXNlIGl0cyBhY3Rpb24gdG8gcG9seW1vcnBoIGludG8gYSB0aWdlci1odW1hbm9pZCBoeWJyaWQgb3IgaW50byBhIHRpZ2VyLCBvciBiYWNrIGludG8gaXRzIHRydWUgZm9ybSwgd2hpY2ggaXMgaHVtYW5vaWQuIEl0cyBzdGF0aXN0aWNzLCBvdGhlciB0aGFuIGl0cyBzaXplLCBhcmUgdGhlIHNhbWUgaW4gZWFjaCBmb3JtLiBBbnkgZXF1aXBtZW50IGl0IGlzIHdlYXJpbmcgb3IgY2FycnlpbmcgaXNuJ3QgdHJhbnNmb3JtZWQuIEl0IHJldmVydHMgdG8gaXRzIHRydWUgZm9ybSBpZiBpdCBkaWVzLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIktlZW4gSGVhcmluZyBhbmQgU21lbGxcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgd2VyZXRpZ2VyIGhhcyBhZHZhbnRhZ2Ugb24gV2lzZG9tIChQZXJjZXB0aW9uKSBjaGVja3MgdGhhdCByZWx5IG9uIGhlYXJpbmcgb3Igc21lbGwuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiUG91bmNlIChUaWdlciBvciBIeWJyaWQgRm9ybSBPbmx5KVwiLFxuXHRcdFx0XHRkZXNjOiBcIklmIHRoZSB3ZXJldGlnZXIgbW92ZXMgYXQgbGVhc3QgMTUgZmVldCBzdHJhaWdodCB0b3dhcmQgYSBjcmVhdHVyZSBhbmQgdGhlbiBoaXRzIGl0IHdpdGggYSBjbGF3IGF0dGFjayBvbiB0aGUgc2FtZSB0dXJuLCB0aGF0IHRhcmdldCBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxNCBTdHJlbmd0aCBzYXZpbmcgdGhyb3cgb3IgYmUga25vY2tlZCBwcm9uZS4gSWYgdGhlIHRhcmdldCBpcyBwcm9uZSwgdGhlIHdlcmV0aWdlciBjYW4gbWFrZSBvbmUgYml0ZSBhdHRhY2sgYWdhaW5zdCBpdCBhcyBhIGJvbnVzIGFjdGlvbi5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJNdWx0aWF0dGFjayAoSHVtYW5vaWQgb3IgSHlicmlkIEZvcm0gT25seSlcIixcblx0XHRcdFx0ZGVzYzogXCJJbiBodW1hbm9pZCBmb3JtLCB0aGUgd2VyZXRpZ2VyIG1ha2VzIHR3byBzY2ltaXRhciBhdHRhY2tzIG9yIHR3byBsb25nYm93IGF0dGFja3MuIEluIGh5YnJpZCBmb3JtLCBpdCBjYW4gYXR0YWNrIGxpa2UgYSBodW1hbm9pZCBvciBtYWtlIHR3byBjbGF3IGF0dGFja3MuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQml0ZSAoVGlnZXIgb3IgSHlicmlkIEZvcm0gT25seSlcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNSB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDggKDFkMTAgKyAzKSBwaWVyY2luZyBkYW1hZ2UuIElmIHRoZSB0YXJnZXQgaXMgYSBodW1hbm9pZCwgaXQgbXVzdCBzdWNjZWVkIG9uIGEgREMgMTMgQ29uc3RpdHV0aW9uIHNhdmluZyB0aHJvdyBvciBiZSBjdXJzZWQgd2l0aCB3ZXJldGlnZXIgbHljYW50aHJvcHkuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNSxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMWQxMFwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDMsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkNsYXcgKFRpZ2VyIG9yIEh5YnJpZCBGb3JtIE9ubHkpXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzUgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiA3ICgxZDggKyAzKSBzbGFzaGluZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNSxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMWQ4XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogMyxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiU2NpbWl0YXIgKEh1bWFub2lkIG9yIEh5YnJpZCBGb3JtIE9ubHkpXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzUgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiA2ICgxZDYgKyAzKSBzbGFzaGluZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNSxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMWQ2XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogMyxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTG9uZ2JvdyAoSHVtYW5vaWQgb3IgSHlicmlkIEZvcm0gT25seSlcIixcblx0XHRcdFx0ZGVzYzogXCJSYW5nZWQgV2VhcG9uIEF0dGFjazogKzQgdG8gaGl0LCByYW5nZSAxNTAvNjAwIGZ0Liwgb25lIHRhcmdldC4gSGl0OiA2ICgxZDggKyAyKSBwaWVyY2luZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNCxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMWQ4XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogMixcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiV2VyZXdvbGZcIixcblx0XHRzaXplOiBcIk1lZGl1bVwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcImh1bWFub2lkXCIsXG5cdFx0c3VidHlwZTogXCJodW1hblwiLFxuXHRcdGFsaWdubWVudDogXCJjaGFvdGljIGV2aWxcIixcblx0XHRhYzogMTEsXG5cdFx0aHA6IDU4LFxuXHRcdGhpdF9kaWNlOiBcIjlkOFwiLFxuXHRcdHNwZWVkOiBcIjMwIGZ0LiAoNDAgZnQuIGluIHdvbGYgZm9ybSlcIixcblx0XHRzdGF0czogWzE1LCAxMywgMTQsIDEwLCAxMSwgMTBdLFxuXHRcdHNraWxsc2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0cGVyY2VwdGlvbjogNCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczpcblx0XHRcdFwiYmx1ZGdlb25pbmcsIHBpZXJjaW5nLCBhbmQgc2xhc2hpbmcgZGFtYWdlIGZyb20gbm9ubWFnaWNhbCB3ZWFwb25zIHRoYXQgYXJlbid0IHNpbHZlcmVkXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0c2Vuc2VzOiBcInBhc3NpdmUgUGVyY2VwdGlvbiAxNFwiLFxuXHRcdGxhbmd1YWdlczogXCJDb21tb24gKGNhbid0IHNwZWFrIGluIHdvbGYgZm9ybSlcIixcblx0XHRjcjogXCIzXCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiU2hhcGVjaGFuZ2VyXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIHdlcmV3b2xmIGNhbiB1c2UgaXRzIGFjdGlvbiB0byBwb2x5bW9ycGggaW50byBhIHdvbGYtaHVtYW5vaWQgaHlicmlkIG9yIGludG8gYSB3b2xmLCBvciBiYWNrIGludG8gaXRzIHRydWUgZm9ybSwgd2hpY2ggaXMgaHVtYW5vaWQuIEl0cyBzdGF0aXN0aWNzLCBvdGhlciB0aGFuIGl0cyBBQywgYXJlIHRoZSBzYW1lIGluIGVhY2ggZm9ybS4gQW55IGVxdWlwbWVudCBpdCBpcyB3ZWFyaW5nIG9yIGNhcnJ5aW5nIGlzbid0IHRyYW5zZm9ybWVkLiBJdCByZXZlcnRzIHRvIGl0cyB0cnVlIGZvcm0gaWYgaXQgZGllcy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJLZWVuIEhlYXJpbmcgYW5kIFNtZWxsXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIHdlcmV3b2xmIGhhcyBhZHZhbnRhZ2Ugb24gV2lzZG9tIChQZXJjZXB0aW9uKSBjaGVja3MgdGhhdCByZWx5IG9uIGhlYXJpbmcgb3Igc21lbGwuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTXVsdGlhdHRhY2sgKEh1bWFub2lkIG9yIEh5YnJpZCBGb3JtIE9ubHkpXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIHdlcmV3b2xmIG1ha2VzIHR3byBhdHRhY2tzOiBvbmUgd2l0aCBpdHMgYml0ZSBhbmQgb25lIHdpdGggaXRzIGNsYXdzIG9yIHNwZWFyLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkJpdGUgKFdvbGYgb3IgSHlicmlkIEZvcm0gT25seSlcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNCB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDYgKDFkOCArIDIpIHBpZXJjaW5nIGRhbWFnZS4gSWYgdGhlIHRhcmdldCBpcyBhIGh1bWFub2lkLCBpdCBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxMiBDb25zdGl0dXRpb24gc2F2aW5nIHRocm93IG9yIGJlIGN1cnNlZCB3aXRoIHdlcmV3b2xmIGx5Y2FudGhyb3B5LlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDQsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjFkOFwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDIsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkNsYXdzIChIeWJyaWQgRm9ybSBPbmx5KVwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs0IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSBjcmVhdHVyZS4gSGl0OiA3ICgyZDQgKyAyKSBzbGFzaGluZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNCxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMmQ0XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogMixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiU3BlYXIgKEh1bWFub2lkIEZvcm0gT25seSlcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBvciBSYW5nZWQgV2VhcG9uIEF0dGFjazogKzQgdG8gaGl0LCByZWFjaCA1IGZ0LiBvciByYW5nZSAyMC82MCBmdC4sIG9uZSBjcmVhdHVyZS4gSGl0OiA1ICgxZDYgKyAyKSBwaWVyY2luZyBkYW1hZ2UsIG9yIDYgKDFkOCArIDIpIHBpZXJjaW5nIGRhbWFnZSBpZiB1c2VkIHdpdGggdHdvIGhhbmRzIHRvIG1ha2UgYSBtZWxlZSBhdHRhY2suXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNCxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMWQ2XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogLTIsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIldoaXRlIERyYWdvbiBXeXJtbGluZ1wiLFxuXHRcdHNpemU6IFwiTWVkaXVtXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwiZHJhZ29uXCIsXG5cdFx0c3VidHlwZTogXCJcIixcblx0XHRhbGlnbm1lbnQ6IFwiY2hhb3RpYyBldmlsXCIsXG5cdFx0YWM6IDE2LFxuXHRcdGhwOiAzMixcblx0XHRoaXRfZGljZTogXCI1ZDhcIixcblx0XHRzcGVlZDogXCIzMCBmdC4sIGJ1cnJvdyAxNSBmdC4sIGZseSA2MCBmdC4sIHN3aW0gMzAgZnQuXCIsXG5cdFx0c3RhdHM6IFsxNCwgMTAsIDE0LCA1LCAxMCwgMTFdLFxuXHRcdHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdGRleHRlcml0eTogMixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdGNvbnN0aXR1dGlvbjogNCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHdpc2RvbTogMixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdGNoYXJpc21hOiAyLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdHNraWxsc2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0cGVyY2VwdGlvbjogNCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHN0ZWFsdGg6IDIsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiY29sZFwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuXHRcdHNlbnNlczogXCJibGluZHNpZ2h0IDEwIGZ0LiwgZGFya3Zpc2lvbiA2MCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxNFwiLFxuXHRcdGxhbmd1YWdlczogXCJEcmFjb25pY1wiLFxuXHRcdGNyOiBcIjJcIixcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQml0ZVwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs0IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogNyAoMWQxMCArIDIpIHBpZXJjaW5nIGRhbWFnZSBwbHVzIDIgKDFkNCkgY29sZCBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNCxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMWQxMCArIDFkNFwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDIsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkNvbGQgQnJlYXRoIChSZWNoYXJnZSA1LTYpXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGRyYWdvbiBleGhhbGVzIGFuIGljeSBibGFzdCBvZiBoYWlsIGluIGEgMTUtZm9vdCBjb25lLiBFYWNoIGNyZWF0dXJlIGluIHRoYXQgYXJlYSBtdXN0IG1ha2UgYSBEQyAxMiBDb25zdGl0dXRpb24gc2F2aW5nIHRocm93LCB0YWtpbmcgMjIgKDVkOCkgY29sZCBkYW1hZ2Ugb24gYSBmYWlsZWQgc2F2ZSwgb3IgaGFsZiBhcyBtdWNoIGRhbWFnZSBvbiBhIHN1Y2Nlc3NmdWwgb25lLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjVkOFwiLFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJXaWdodFwiLFxuXHRcdHNpemU6IFwiTWVkaXVtXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwidW5kZWFkXCIsXG5cdFx0c3VidHlwZTogXCJcIixcblx0XHRhbGlnbm1lbnQ6IFwibmV1dHJhbCBldmlsXCIsXG5cdFx0YWM6IDE0LFxuXHRcdGhwOiA0NSxcblx0XHRoaXRfZGljZTogXCI2ZDhcIixcblx0XHRzcGVlZDogXCIzMCBmdC5cIixcblx0XHRzdGF0czogWzE1LCAxNCwgMTYsIDEwLCAxMywgMTVdLFxuXHRcdHNraWxsc2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0cGVyY2VwdGlvbjogMyxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHN0ZWFsdGg6IDQsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6XG5cdFx0XHRcIm5lY3JvdGljOyBibHVkZ2VvbmluZywgcGllcmNpbmcsIGFuZCBzbGFzaGluZyBmcm9tIG5vbm1hZ2ljYWwgd2VhcG9ucyB0aGF0IGFyZW4ndCBzaWx2ZXJlZFwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcInBvaXNvbmVkXCIsXG5cdFx0c2Vuc2VzOiBcImRhcmt2aXNpb24gNjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTNcIixcblx0XHRsYW5ndWFnZXM6IFwidGhlIGxhbmd1YWdlcyBpdCBrbmV3IGluIGxpZmVcIixcblx0XHRjcjogXCIzXCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiU3VubGlnaHQgU2Vuc2l0aXZpdHlcIixcblx0XHRcdFx0ZGVzYzogXCJXaGlsZSBpbiBzdW5saWdodCwgdGhlIHdpZ2h0IGhhcyBkaXNhZHZhbnRhZ2Ugb24gYXR0YWNrIHJvbGxzLCBhcyB3ZWxsIGFzIG9uIFdpc2RvbSAoUGVyY2VwdGlvbikgY2hlY2tzIHRoYXQgcmVseSBvbiBzaWdodC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJNdWx0aWF0dGFja1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSB3aWdodCBtYWtlcyB0d28gbG9uZ3N3b3JkIGF0dGFja3Mgb3IgdHdvIGxvbmdib3cgYXR0YWNrcy4gSXQgY2FuIHVzZSBpdHMgTGlmZSBEcmFpbiBpbiBwbGFjZSBvZiBvbmUgbG9uZ3N3b3JkIGF0dGFjay5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJMaWZlIERyYWluXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzQgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIGNyZWF0dXJlLiBIaXQ6IDUgKDFkNiArIDIpIG5lY3JvdGljIGRhbWFnZS4gVGhlIHRhcmdldCBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxMyBDb25zdGl0dXRpb24gc2F2aW5nIHRocm93IG9yIGl0cyBoaXQgcG9pbnQgbWF4aW11bSBpcyByZWR1Y2VkIGJ5IGFuIGFtb3VudCBlcXVhbCB0byB0aGUgZGFtYWdlIHRha2VuLiBUaGlzIHJlZHVjdGlvbiBsYXN0cyB1bnRpbCB0aGUgdGFyZ2V0IGZpbmlzaGVzIGEgbG9uZyByZXN0LiBUaGUgdGFyZ2V0IGRpZXMgaWYgdGhpcyBlZmZlY3QgcmVkdWNlcyBpdHMgaGl0IHBvaW50IG1heGltdW0gdG8gMC5cXG5BIGh1bWFub2lkIHNsYWluIGJ5IHRoaXMgYXR0YWNrIHJpc2VzIDI0IGhvdXJzIGxhdGVyIGFzIGEgem9tYmllIHVuZGVyIHRoZSB3aWdodCdzIGNvbnRyb2wsIHVubGVzcyB0aGUgaHVtYW5vaWQgaXMgcmVzdG9yZWQgdG8gbGlmZSBvciBpdHMgYm9keSBpcyBkZXN0cm95ZWQuIFRoZSB3aWdodCBjYW4gaGF2ZSBubyBtb3JlIHRoYW4gdHdlbHZlIHpvbWJpZXMgdW5kZXIgaXRzIGNvbnRyb2wgYXQgb25lIHRpbWUuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNCxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMWQ2XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogMixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTG9uZ3N3b3JkXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzQgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiA2ICgxZDggKyAyKSBzbGFzaGluZyBkYW1hZ2UsIG9yIDcgKDFkMTAgKyAyKSBzbGFzaGluZyBkYW1hZ2UgaWYgdXNlZCB3aXRoIHR3byBoYW5kcy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA0LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxZDhcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiAyLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJMb25nYm93XCIsXG5cdFx0XHRcdGRlc2M6IFwiUmFuZ2VkIFdlYXBvbiBBdHRhY2s6ICs0IHRvIGhpdCwgcmFuZ2UgMTUwLzYwMCBmdC4sIG9uZSB0YXJnZXQuIEhpdDogNiAoMWQ4ICsgMikgcGllcmNpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDQsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjFkOFwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDIsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIldpbGwtbyctV2lzcFwiLFxuXHRcdHNpemU6IFwiVGlueVwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcInVuZGVhZFwiLFxuXHRcdHN1YnR5cGU6IFwiXCIsXG5cdFx0YWxpZ25tZW50OiBcImNoYW90aWMgZXZpbFwiLFxuXHRcdGFjOiAxOSxcblx0XHRocDogMjIsXG5cdFx0aGl0X2RpY2U6IFwiOWQ0XCIsXG5cdFx0c3BlZWQ6IFwiMCBmdC4sIGZseSA1MCBmdC4gKGhvdmVyKVwiLFxuXHRcdHN0YXRzOiBbMSwgMjgsIDEwLCAxMywgMTQsIDExXSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczpcblx0XHRcdFwiYWNpZCwgY29sZCwgZmlyZSwgbmVjcm90aWMsIHRodW5kZXI7IGJsdWRnZW9uaW5nLCBwaWVyY2luZywgYW5kIHNsYXNoaW5nIGZyb20gbm9ubWFnaWNhbCB3ZWFwb25zXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwibGlnaHRuaW5nLCBwb2lzb25cIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczpcblx0XHRcdFwiZXhoYXVzdGlvbiwgZ3JhcHBsZWQsIHBhcmFseXplZCwgcG9pc29uZWQsIHByb25lLCByZXN0cmFpbmVkLCB1bmNvbnNjaW91c1wiLFxuXHRcdHNlbnNlczogXCJkYXJrdmlzaW9uIDEyMCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxMlwiLFxuXHRcdGxhbmd1YWdlczogXCJ0aGUgbGFuZ3VhZ2VzIGl0IGtuZXcgaW4gbGlmZVwiLFxuXHRcdGNyOiBcIjJcIixcblx0XHR0cmFpdHM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJDb25zdW1lIExpZmVcIixcblx0XHRcdFx0ZGVzYzogXCJBcyBhIGJvbnVzIGFjdGlvbiwgdGhlIHdpbGwtbyctd2lzcCBjYW4gdGFyZ2V0IG9uZSBjcmVhdHVyZSBpdCBjYW4gc2VlIHdpdGhpbiA1IGZ0LiBvZiBpdCB0aGF0IGhhcyAwIGhpdCBwb2ludHMgYW5kIGlzIHN0aWxsIGFsaXZlLiBUaGUgdGFyZ2V0IG11c3Qgc3VjY2VlZCBvbiBhIERDIDEwIENvbnN0aXR1dGlvbiBzYXZpbmcgdGhyb3cgYWdhaW5zdCB0aGlzIG1hZ2ljIG9yIGRpZS4gSWYgdGhlIHRhcmdldCBkaWVzLCB0aGUgd2lsbC1vJy13aXNwIHJlZ2FpbnMgMTAgKDNkNikgaGl0IHBvaW50cy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJFcGhlbWVyYWxcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgd2lsbC1vJy13aXNwIGNhbid0IHdlYXIgb3IgY2FycnkgYW55dGhpbmcuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiSW5jb3Jwb3JlYWwgTW92ZW1lbnRcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgd2lsbC1vJy13aXNwIGNhbiBtb3ZlIHRocm91Z2ggb3RoZXIgY3JlYXR1cmVzIGFuZCBvYmplY3RzIGFzIGlmIHRoZXkgd2VyZSBkaWZmaWN1bHQgdGVycmFpbi4gSXQgdGFrZXMgNSAoMWQxMCkgZm9yY2UgZGFtYWdlIGlmIGl0IGVuZHMgaXRzIHR1cm4gaW5zaWRlIGFuIG9iamVjdC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJWYXJpYWJsZSBJbGx1bWluYXRpb25cIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgd2lsbC1vJy13aXNwIHNoZWRzIGJyaWdodCBsaWdodCBpbiBhIDUtIHRvIDIwLWZvb3QgcmFkaXVzIGFuZCBkaW0gbGlnaHQgZm9yIGFuIGFkZGl0aW9uYWwgbnVtYmVyIG9mIGZ0LiBlcXVhbCB0byB0aGUgY2hvc2VuIHJhZGl1cy4gVGhlIHdpbGwtbyctd2lzcCBjYW4gYWx0ZXIgdGhlIHJhZGl1cyBhcyBhIGJvbnVzIGFjdGlvbi5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJTaG9ja1wiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFNwZWxsIEF0dGFjazogKzQgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIGNyZWF0dXJlLiBIaXQ6IDkgKDJkOCkgbGlnaHRuaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA0LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIyZDhcIixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiSW52aXNpYmlsaXR5XCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIHdpbGwtbyctd2lzcCBhbmQgaXRzIGxpZ2h0IG1hZ2ljYWxseSBiZWNvbWUgaW52aXNpYmxlIHVudGlsIGl0IGF0dGFja3Mgb3IgdXNlcyBpdHMgQ29uc3VtZSBMaWZlLCBvciB1bnRpbCBpdHMgY29uY2VudHJhdGlvbiBlbmRzIChhcyBpZiBjb25jZW50cmF0aW5nIG9uIGEgc3BlbGwpLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIldpbnRlciBXb2xmXCIsXG5cdFx0c2l6ZTogXCJMYXJnZVwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcIm1vbnN0cm9zaXR5XCIsXG5cdFx0c3VidHlwZTogXCJcIixcblx0XHRhbGlnbm1lbnQ6IFwibmV1dHJhbCBldmlsXCIsXG5cdFx0YWM6IDEzLFxuXHRcdGhwOiA3NSxcblx0XHRoaXRfZGljZTogXCIxMGQxMFwiLFxuXHRcdHNwZWVkOiBcIjUwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbMTgsIDEzLCAxNCwgNywgMTIsIDhdLFxuXHRcdHNraWxsc2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0cGVyY2VwdGlvbjogNSxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHN0ZWFsdGg6IDMsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiY29sZFwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuXHRcdHNlbnNlczogXCJwYXNzaXZlIFBlcmNlcHRpb24gMTVcIixcblx0XHRsYW5ndWFnZXM6IFwiQ29tbW9uLCBHaWFudCwgV2ludGVyIFdvbGZcIixcblx0XHRjcjogXCIzXCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiS2VlbiBIZWFyaW5nIGFuZCBTbWVsbFwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSB3b2xmIGhhcyBhZHZhbnRhZ2Ugb24gV2lzZG9tIChQZXJjZXB0aW9uKSBjaGVja3MgdGhhdCByZWx5IG9uIGhlYXJpbmcgb3Igc21lbGwuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiUGFjayBUYWN0aWNzXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIHdvbGYgaGFzIGFkdmFudGFnZSBvbiBhbiBhdHRhY2sgcm9sbCBhZ2FpbnN0IGEgY3JlYXR1cmUgaWYgYXQgbGVhc3Qgb25lIG9mIHRoZSB3b2xmJ3MgYWxsaWVzIGlzIHdpdGhpbiA1IGZ0LiBvZiB0aGUgY3JlYXR1cmUgYW5kIHRoZSBhbGx5IGlzbid0IGluY2FwYWNpdGF0ZWQuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiU25vdyBDYW1vdWZsYWdlXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIHdvbGYgaGFzIGFkdmFudGFnZSBvbiBEZXh0ZXJpdHkgKFN0ZWFsdGgpIGNoZWNrcyBtYWRlIHRvIGhpZGUgaW4gc25vd3kgdGVycmFpbi5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJCaXRlXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzYgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxMSAoMmQ2ICsgNCkgcGllcmNpbmcgZGFtYWdlLiBJZiB0aGUgdGFyZ2V0IGlzIGEgY3JlYXR1cmUsIGl0IG11c3Qgc3VjY2VlZCBvbiBhIERDIDE0IFN0cmVuZ3RoIHNhdmluZyB0aHJvdyBvciBiZSBrbm9ja2VkIHByb25lLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDYsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjJkNlwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDQsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkNvbGQgQnJlYXRoIChSZWNoYXJnZSA1LTYpXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIHdvbGYgZXhoYWxlcyBhIGJsYXN0IG9mIGZyZWV6aW5nIHdpbmQgaW4gYSAxNS1mb290IGNvbmUuIEVhY2ggY3JlYXR1cmUgaW4gdGhhdCBhcmVhIG11c3QgbWFrZSBhIERDIDEyIERleHRlcml0eSBzYXZpbmcgdGhyb3csIHRha2luZyAxOCAoNGQ4KSBjb2xkIGRhbWFnZSBvbiBhIGZhaWxlZCBzYXZlLCBvciBoYWxmIGFzIG11Y2ggZGFtYWdlIG9uIGEgc3VjY2Vzc2Z1bCBvbmUuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiNGQ4XCIsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIldvbGZcIixcblx0XHRzaXplOiBcIk1lZGl1bVwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcImJlYXN0XCIsXG5cdFx0c3VidHlwZTogXCJcIixcblx0XHRhbGlnbm1lbnQ6IFwidW5hbGlnbmVkXCIsXG5cdFx0YWM6IDEzLFxuXHRcdGhwOiAxMSxcblx0XHRoaXRfZGljZTogXCIyZDhcIixcblx0XHRzcGVlZDogXCI0MCBmdC5cIixcblx0XHRzdGF0czogWzEyLCAxNSwgMTIsIDMsIDEyLCA2XSxcblx0XHRza2lsbHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdHBlcmNlcHRpb246IDMsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRzdGVhbHRoOiA0LFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuXHRcdGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuXHRcdHNlbnNlczogXCJwYXNzaXZlIFBlcmNlcHRpb24gMTNcIixcblx0XHRsYW5ndWFnZXM6IFwiXCIsXG5cdFx0Y3I6IFwiMS80XCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiS2VlbiBIZWFyaW5nIGFuZCBTbWVsbFwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSB3b2xmIGhhcyBhZHZhbnRhZ2Ugb24gV2lzZG9tIChQZXJjZXB0aW9uKSBjaGVja3MgdGhhdCByZWx5IG9uIGhlYXJpbmcgb3Igc21lbGwuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiUGFjayBUYWN0aWNzXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIHdvbGYgaGFzIGFkdmFudGFnZSBvbiBhbiBhdHRhY2sgcm9sbCBhZ2FpbnN0IGEgY3JlYXR1cmUgaWYgYXQgbGVhc3Qgb25lIG9mIHRoZSB3b2xmJ3MgYWxsaWVzIGlzIHdpdGhpbiA1IGZ0LiBvZiB0aGUgY3JlYXR1cmUgYW5kIHRoZSBhbGx5IGlzbid0IGluY2FwYWNpdGF0ZWQuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQml0ZVwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs0IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogNyAoMmQ0ICsgMikgcGllcmNpbmcgZGFtYWdlLiBJZiB0aGUgdGFyZ2V0IGlzIGEgY3JlYXR1cmUsIGl0IG11c3Qgc3VjY2VlZCBvbiBhIERDIDExIFN0cmVuZ3RoIHNhdmluZyB0aHJvdyBvciBiZSBrbm9ja2VkIHByb25lLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDQsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjJkNFwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDIsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIldvcmdcIixcblx0XHRzaXplOiBcIkxhcmdlXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwibW9uc3Ryb3NpdHlcIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJuZXV0cmFsIGV2aWxcIixcblx0XHRhYzogMTMsXG5cdFx0aHA6IDI2LFxuXHRcdGhpdF9kaWNlOiBcIjRkMTBcIixcblx0XHRzcGVlZDogXCI1MCBmdC5cIixcblx0XHRzdGF0czogWzE2LCAxMywgMTMsIDcsIDExLCA4XSxcblx0XHRza2lsbHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdHBlcmNlcHRpb246IDQsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0c2Vuc2VzOiBcImRhcmt2aXNpb24gNjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTRcIixcblx0XHRsYW5ndWFnZXM6IFwiR29ibGluLCBXb3JnXCIsXG5cdFx0Y3I6IFwiMS8yXCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiS2VlbiBIZWFyaW5nIGFuZCBTbWVsbFwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSB3b3JnIGhhcyBhZHZhbnRhZ2Ugb24gV2lzZG9tIChQZXJjZXB0aW9uKSBjaGVja3MgdGhhdCByZWx5IG9uIGhlYXJpbmcgb3Igc21lbGwuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQml0ZVwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs1IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTAgKDJkNiArIDMpIHBpZXJjaW5nIGRhbWFnZS4gSWYgdGhlIHRhcmdldCBpcyBhIGNyZWF0dXJlLCBpdCBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxMyBTdHJlbmd0aCBzYXZpbmcgdGhyb3cgb3IgYmUga25vY2tlZCBwcm9uZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA1LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIyZDZcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiAzLFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJXcmFpdGhcIixcblx0XHRzaXplOiBcIk1lZGl1bVwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcInVuZGVhZFwiLFxuXHRcdHN1YnR5cGU6IFwiXCIsXG5cdFx0YWxpZ25tZW50OiBcIm5ldXRyYWwgZXZpbFwiLFxuXHRcdGFjOiAxMyxcblx0XHRocDogNjcsXG5cdFx0aGl0X2RpY2U6IFwiOWQ4XCIsXG5cdFx0c3BlZWQ6IFwiMCBmdC4sIGZseSA2MCBmdC4gKGhvdmVyKVwiLFxuXHRcdHN0YXRzOiBbNiwgMTYsIDE2LCAxMiwgMTQsIDE1XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczpcblx0XHRcdFwiYWNpZCwgY29sZCwgZmlyZSwgbGlnaHRuaW5nLCB0aHVuZGVyOyBibHVkZ2VvbmluZywgcGllcmNpbmcsIGFuZCBzbGFzaGluZyBmcm9tIG5vbm1hZ2ljYWwgd2VhcG9ucyB0aGF0IGFyZW4ndCBzaWx2ZXJlZFwiLFxuXHRcdGRhbWFnZV9pbW11bml0aWVzOiBcIm5lY3JvdGljLCBwb2lzb25cIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczpcblx0XHRcdFwiY2hhcm1lZCwgZXhoYXVzdGlvbiwgZ3JhcHBsZWQsIHBhcmFseXplZCwgcGV0cmlmaWVkLCBwb2lzb25lZCwgcHJvbmUsIHJlc3RyYWluZWRcIixcblx0XHRzZW5zZXM6IFwiZGFya3Zpc2lvbiA2MCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxMlwiLFxuXHRcdGxhbmd1YWdlczogXCJ0aGUgbGFuZ3VhZ2VzIGl0IGtuZXcgaW4gbGlmZVwiLFxuXHRcdGNyOiBcIjVcIixcblx0XHR0cmFpdHM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJJbmNvcnBvcmVhbCBNb3ZlbWVudFwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSB3cmFpdGggY2FuIG1vdmUgdGhyb3VnaCBvdGhlciBjcmVhdHVyZXMgYW5kIG9iamVjdHMgYXMgaWYgdGhleSB3ZXJlIGRpZmZpY3VsdCB0ZXJyYWluLiBJdCB0YWtlcyA1ICgxZDEwKSBmb3JjZSBkYW1hZ2UgaWYgaXQgZW5kcyBpdHMgdHVybiBpbnNpZGUgYW4gb2JqZWN0LlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlN1bmxpZ2h0IFNlbnNpdGl2aXR5XCIsXG5cdFx0XHRcdGRlc2M6IFwiV2hpbGUgaW4gc3VubGlnaHQsIHRoZSB3cmFpdGggaGFzIGRpc2FkdmFudGFnZSBvbiBhdHRhY2sgcm9sbHMsIGFzIHdlbGwgYXMgb24gV2lzZG9tIChQZXJjZXB0aW9uKSBjaGVja3MgdGhhdCByZWx5IG9uIHNpZ2h0LlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkxpZmUgRHJhaW5cIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNiB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgY3JlYXR1cmUuIEhpdDogMjEgKDRkOCArIDMpIG5lY3JvdGljIGRhbWFnZS4gVGhlIHRhcmdldCBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxNCBDb25zdGl0dXRpb24gc2F2aW5nIHRocm93IG9yIGl0cyBoaXQgcG9pbnQgbWF4aW11bSBpcyByZWR1Y2VkIGJ5IGFuIGFtb3VudCBlcXVhbCB0byB0aGUgZGFtYWdlIHRha2VuLiBUaGlzIHJlZHVjdGlvbiBsYXN0cyB1bnRpbCB0aGUgdGFyZ2V0IGZpbmlzaGVzIGEgbG9uZyByZXN0LiBUaGUgdGFyZ2V0IGRpZXMgaWYgdGhpcyBlZmZlY3QgcmVkdWNlcyBpdHMgaGl0IHBvaW50IG1heGltdW0gdG8gMC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA2LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCI0ZDhcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiAzLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJDcmVhdGUgU3BlY3RlclwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSB3cmFpdGggdGFyZ2V0cyBhIGh1bWFub2lkIHdpdGhpbiAxMCBmZWV0IG9mIGl0IHRoYXQgaGFzIGJlZW4gZGVhZCBmb3Igbm8gbG9uZ2VyIHRoYW4gMSBtaW51dGUgYW5kIGRpZWQgdmlvbGVudGx5LiBUaGUgdGFyZ2V0J3Mgc3Bpcml0IHJpc2VzIGFzIGEgc3BlY3RlciBpbiB0aGUgc3BhY2Ugb2YgaXRzIGNvcnBzZSBvciBpbiB0aGUgbmVhcmVzdCB1bm9jY3VwaWVkIHNwYWNlLiBUaGUgc3BlY3RlciBpcyB1bmRlciB0aGUgd3JhaXRoJ3MgY29udHJvbC4gVGhlIHdyYWl0aCBjYW4gaGF2ZSBubyBtb3JlIHRoYW4gc2V2ZW4gc3BlY3RlcnMgdW5kZXIgaXRzIGNvbnRyb2wgYXQgb25lIHRpbWUuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiV3l2ZXJuXCIsXG5cdFx0c2l6ZTogXCJMYXJnZVwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcImRyYWdvblwiLFxuXHRcdHN1YnR5cGU6IFwiXCIsXG5cdFx0YWxpZ25tZW50OiBcInVuYWxpZ25lZFwiLFxuXHRcdGFjOiAxMyxcblx0XHRocDogMTEwLFxuXHRcdGhpdF9kaWNlOiBcIjEzZDEwXCIsXG5cdFx0c3BlZWQ6IFwiMjAgZnQuLCBmbHkgODAgZnQuXCIsXG5cdFx0c3RhdHM6IFsxOSwgMTAsIDE2LCA1LCAxMiwgNl0sXG5cdFx0c2tpbGxzYXZlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRwZXJjZXB0aW9uOiA0LFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuXHRcdGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuXHRcdHNlbnNlczogXCJkYXJrdmlzaW9uIDYwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDE0XCIsXG5cdFx0bGFuZ3VhZ2VzOiBcIlwiLFxuXHRcdGNyOiBcIjZcIixcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgd3l2ZXJuIG1ha2VzIHR3byBhdHRhY2tzOiBvbmUgd2l0aCBpdHMgYml0ZSBhbmQgb25lIHdpdGggaXRzIHN0aW5nZXIuIFdoaWxlIGZseWluZywgaXQgY2FuIHVzZSBpdHMgY2xhd3MgaW4gcGxhY2Ugb2Ygb25lIG90aGVyIGF0dGFjay5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJCaXRlXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzcgdG8gaGl0LCByZWFjaCAxMCBmdC4sIG9uZSBjcmVhdHVyZS4gSGl0OiAxMSAoMmQ2ICsgNCkgcGllcmNpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDcsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjJkNlwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDQsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkNsYXdzXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzcgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxMyAoMmQ4ICsgNCkgc2xhc2hpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDcsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjJkOFwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDQsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIlN0aW5nZXJcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNyB0byBoaXQsIHJlYWNoIDEwIGZ0Liwgb25lIGNyZWF0dXJlLiBIaXQ6IDExICgyZDYgKyA0KSBwaWVyY2luZyBkYW1hZ2UuIFRoZSB0YXJnZXQgbXVzdCBtYWtlIGEgREMgMTUgQ29uc3RpdHV0aW9uIHNhdmluZyB0aHJvdywgdGFraW5nIDI0ICg3ZDYpIHBvaXNvbiBkYW1hZ2Ugb24gYSBmYWlsZWQgc2F2ZSwgb3IgaGFsZiBhcyBtdWNoIGRhbWFnZSBvbiBhIHN1Y2Nlc3NmdWwgb25lLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDcsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjJkNlwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDQsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIlhvcm5cIixcblx0XHRzaXplOiBcIk1lZGl1bVwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcImVsZW1lbnRhbFwiLFxuXHRcdHN1YnR5cGU6IFwiXCIsXG5cdFx0YWxpZ25tZW50OiBcIm5ldXRyYWxcIixcblx0XHRhYzogMTksXG5cdFx0aHA6IDczLFxuXHRcdGhpdF9kaWNlOiBcIjdkOFwiLFxuXHRcdHNwZWVkOiBcIjIwIGZ0LiwgYnVycm93IDIwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbMTcsIDEwLCAyMiwgMTEsIDEwLCAxMV0sXG5cdFx0c2tpbGxzYXZlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRwZXJjZXB0aW9uOiA2LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0c3RlYWx0aDogMyxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczpcblx0XHRcdFwicGllcmNpbmcgYW5kIHNsYXNoaW5nIGZyb20gbm9ubWFnaWNhbCB3ZWFwb25zIHRoYXQgYXJlbid0IGFkYW1hbnRpbmVcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcblx0XHRzZW5zZXM6IFwiZGFya3Zpc2lvbiA2MCBmdC4sIHRyZW1vcnNlbnNlIDYwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDE2XCIsXG5cdFx0bGFuZ3VhZ2VzOiBcIlRlcnJhblwiLFxuXHRcdGNyOiBcIjVcIixcblx0XHR0cmFpdHM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJFYXJ0aCBHbGlkZVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSB4b3JuIGNhbiBidXJyb3cgdGhyb3VnaCBub25tYWdpY2FsLCB1bndvcmtlZCBlYXJ0aCBhbmQgc3RvbmUuIFdoaWxlIGRvaW5nIHNvLCB0aGUgeG9ybiBkb2Vzbid0IGRpc3R1cmIgdGhlIG1hdGVyaWFsIGl0IG1vdmVzIHRocm91Z2guXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiU3RvbmUgQ2Ftb3VmbGFnZVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSB4b3JuIGhhcyBhZHZhbnRhZ2Ugb24gRGV4dGVyaXR5IChTdGVhbHRoKSBjaGVja3MgbWFkZSB0byBoaWRlIGluIHJvY2t5IHRlcnJhaW4uXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiVHJlYXN1cmUgU2Vuc2VcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgeG9ybiBjYW4gcGlucG9pbnQsIGJ5IHNjZW50LCB0aGUgbG9jYXRpb24gb2YgcHJlY2lvdXMgbWV0YWxzIGFuZCBzdG9uZXMsIHN1Y2ggYXMgY29pbnMgYW5kIGdlbXMsIHdpdGhpbiA2MCBmdC4gb2YgaXQuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgeG9ybiBtYWtlcyB0aHJlZSBjbGF3IGF0dGFja3MgYW5kIG9uZSBiaXRlIGF0dGFjay5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJCaXRlXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzYgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxMyAoM2Q2ICsgMykgcGllcmNpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDYsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjNkNlwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDMsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkNsYXdcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNiB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDYgKDFkNiArIDMpIHNsYXNoaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA2LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxZDZcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiAzLFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJZb3VuZyBCbGFjayBEcmFnb25cIixcblx0XHRzaXplOiBcIkxhcmdlXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwiZHJhZ29uXCIsXG5cdFx0c3VidHlwZTogXCJcIixcblx0XHRhbGlnbm1lbnQ6IFwiY2hhb3RpYyBldmlsXCIsXG5cdFx0YWM6IDE4LFxuXHRcdGhwOiAxMjcsXG5cdFx0aGl0X2RpY2U6IFwiMTVkMTBcIixcblx0XHRzcGVlZDogXCI0MCBmdC4sIGZseSA4MCBmdC4sIHN3aW0gNDAgZnQuXCIsXG5cdFx0c3RhdHM6IFsxOSwgMTQsIDE3LCAxMiwgMTEsIDE1XSxcblx0XHRzYXZlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRkZXh0ZXJpdHk6IDUsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRjb25zdGl0dXRpb246IDYsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHR3aXNkb206IDMsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRjaGFyaXNtYTogNSxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRza2lsbHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdHBlcmNlcHRpb246IDYsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRzdGVhbHRoOiA1LFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuXHRcdGRhbWFnZV9pbW11bml0aWVzOiBcImFjaWRcIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcblx0XHRzZW5zZXM6IFwiYmxpbmRzaWdodCAzMCBmdC4sIGRhcmt2aXNpb24gMTIwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDE2XCIsXG5cdFx0bGFuZ3VhZ2VzOiBcIkNvbW1vbiwgRHJhY29uaWNcIixcblx0XHRjcjogXCI3XCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQW1waGliaW91c1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBkcmFnb24gY2FuIGJyZWF0aGUgYWlyIGFuZCB3YXRlci5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJNdWx0aWF0dGFja1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBkcmFnb24gbWFrZXMgdGhyZWUgYXR0YWNrczogb25lIHdpdGggaXRzIGJpdGUgYW5kIHR3byB3aXRoIGl0cyBjbGF3cy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJCaXRlXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzcgdG8gaGl0LCByZWFjaCAxMCBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTUgKDJkMTAgKyA0KSBwaWVyY2luZyBkYW1hZ2UgcGx1cyA0ICgxZDgpIGFjaWQgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDcsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjJkMTAgKyAxZDhcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiA0LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJDbGF3XCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzcgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxMSAoMmQ2ICsgNCkgc2xhc2hpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDcsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjJkNlwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDQsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkFjaWQgQnJlYXRoIChSZWNoYXJnZSA1LTYpXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGRyYWdvbiBleGhhbGVzIGFjaWQgaW4gYSAzMC1mb290IGxpbmUgdGhhdCBpcyA1IGZlZXQgd2lkZS4gRWFjaCBjcmVhdHVyZSBpbiB0aGF0IGxpbmUgbXVzdCBtYWtlIGEgREMgMTQgRGV4dGVyaXR5IHNhdmluZyB0aHJvdywgdGFraW5nIDQ5ICgxMWQ4KSBhY2lkIGRhbWFnZSBvbiBhIGZhaWxlZCBzYXZlLCBvciBoYWxmIGFzIG11Y2ggZGFtYWdlIG9uIGEgc3VjY2Vzc2Z1bCBvbmUuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMTFkOFwiLFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJZb3VuZyBCbHVlIERyYWdvblwiLFxuXHRcdHNpemU6IFwiTGFyZ2VcIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJkcmFnb25cIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJsYXdmdWwgZXZpbFwiLFxuXHRcdGFjOiAxOCxcblx0XHRocDogMTUyLFxuXHRcdGhpdF9kaWNlOiBcIjE2ZDEwXCIsXG5cdFx0c3BlZWQ6IFwiNDAgZnQuLCBidXJyb3cgNDAgZnQuLCBmbHkgODAgZnQuXCIsXG5cdFx0c3RhdHM6IFsyMSwgMTAsIDE5LCAxNCwgMTMsIDE3XSxcblx0XHRzYXZlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRkZXh0ZXJpdHk6IDQsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRjb25zdGl0dXRpb246IDgsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHR3aXNkb206IDUsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRjaGFyaXNtYTogNyxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRza2lsbHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdHBlcmNlcHRpb246IDksXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRzdGVhbHRoOiA0LFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuXHRcdGRhbWFnZV9pbW11bml0aWVzOiBcImxpZ2h0bmluZ1wiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuXHRcdHNlbnNlczogXCJibGluZHNpZ2h0IDMwIGZ0LiwgZGFya3Zpc2lvbiAxMjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTlcIixcblx0XHRsYW5ndWFnZXM6IFwiQ29tbW9uLCBEcmFjb25pY1wiLFxuXHRcdGNyOiBcIjlcIixcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgZHJhZ29uIG1ha2VzIHRocmVlIGF0dGFja3M6IG9uZSB3aXRoIGl0cyBiaXRlIGFuZCB0d28gd2l0aCBpdHMgY2xhd3MuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQml0ZVwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs5IHRvIGhpdCwgcmVhY2ggMTAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDE2ICgyZDEwICsgNSkgcGllcmNpbmcgZGFtYWdlIHBsdXMgNSAoMWQxMCkgbGlnaHRuaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA5LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIyZDEwICsgMWQxMFwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDUsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkNsYXdcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArOSB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDEyICgyZDYgKyA1KSBzbGFzaGluZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogOSxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMmQ2XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogNSxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTGlnaHRuaW5nIEJyZWF0aCAoUmVjaGFyZ2UgNS02KVwiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBkcmFnb24gZXhoYWxlcyBsaWdodG5pbmcgaW4gYW4gNjAtZm9vdCBsaW5lIHRoYXQgaXMgNSBmZWV0IHdpZGUuIEVhY2ggY3JlYXR1cmUgaW4gdGhhdCBsaW5lIG11c3QgbWFrZSBhIERDIDE2IERleHRlcml0eSBzYXZpbmcgdGhyb3csIHRha2luZyA1NSAoMTBkMTApIGxpZ2h0bmluZyBkYW1hZ2Ugb24gYSBmYWlsZWQgc2F2ZSwgb3IgaGFsZiBhcyBtdWNoIGRhbWFnZSBvbiBhIHN1Y2Nlc3NmdWwgb25lLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjEwZDEwXCIsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIllvdW5nIEJyYXNzIERyYWdvblwiLFxuXHRcdHNpemU6IFwiTGFyZ2VcIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJkcmFnb25cIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJjaGFvdGljIGdvb2RcIixcblx0XHRhYzogMTcsXG5cdFx0aHA6IDExMCxcblx0XHRoaXRfZGljZTogXCIxM2QxMFwiLFxuXHRcdHNwZWVkOiBcIjQwIGZ0LiwgYnVycm93IDIwIGZ0LiwgZmx5IDgwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbMTksIDEwLCAxNywgMTIsIDExLCAxNV0sXG5cdFx0c2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0ZGV4dGVyaXR5OiAzLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0Y29uc3RpdHV0aW9uOiA2LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0d2lzZG9tOiAzLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0Y2hhcmlzbWE6IDUsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0c2tpbGxzYXZlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRwZXJjZXB0aW9uOiA2LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0cGVyc3Vhc2lvbjogNSxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHN0ZWFsdGg6IDMsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiZmlyZVwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuXHRcdHNlbnNlczogXCJibGluZHNpZ2h0IDMwIGZ0LiwgZGFya3Zpc2lvbiAxMjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTZcIixcblx0XHRsYW5ndWFnZXM6IFwiQ29tbW9uLCBEcmFjb25pY1wiLFxuXHRcdGNyOiBcIjZcIixcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgZHJhZ29uIG1ha2VzIHRocmVlIGF0dGFja3M6IG9uZSB3aXRoIGl0cyBiaXRlIGFuZCB0d28gd2l0aCBpdHMgY2xhd3MuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQml0ZVwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs3IHRvIGhpdCwgcmVhY2ggMTAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDE1ICgyZDEwICsgNCkgcGllcmNpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDcsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjJkMTBcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiA0LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJDbGF3XCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzcgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxMSAoMmQ2ICsgNCkgc2xhc2hpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDcsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjJkNlwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDQsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkJyZWF0aCBXZWFwb25zIChSZWNoYXJnZSA1LTYpXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGRyYWdvbiB1c2VzIG9uZSBvZiB0aGUgZm9sbG93aW5nIGJyZWF0aCB3ZWFwb25zLlxcbkZpcmUgQnJlYXRoLiBUaGUgZHJhZ29uIGV4aGFsZXMgZmlyZSBpbiBhIDQwLWZvb3QgbGluZSB0aGF0IGlzIDUgZmVldCB3aWRlLiBFYWNoIGNyZWF0dXJlIGluIHRoYXQgbGluZSBtdXN0IG1ha2UgYSBEQyAxNCBEZXh0ZXJpdHkgc2F2aW5nIHRocm93LCB0YWtpbmcgNDIgKDEyZDYpIGZpcmUgZGFtYWdlIG9uIGEgZmFpbGVkIHNhdmUsIG9yIGhhbGYgYXMgbXVjaCBkYW1hZ2Ugb24gYSBzdWNjZXNzZnVsIG9uZS5cXG5TbGVlcCBCcmVhdGguIFRoZSBkcmFnb24gZXhoYWxlcyBzbGVlcCBnYXMgaW4gYSAzMC1mb290IGNvbmUuIEVhY2ggY3JlYXR1cmUgaW4gdGhhdCBhcmVhIG11c3Qgc3VjY2VlZCBvbiBhIERDIDE0IENvbnN0aXR1dGlvbiBzYXZpbmcgdGhyb3cgb3IgZmFsbCB1bmNvbnNjaW91cyBmb3IgNSBtaW51dGVzLiBUaGlzIGVmZmVjdCBlbmRzIGZvciBhIGNyZWF0dXJlIGlmIHRoZSBjcmVhdHVyZSB0YWtlcyBkYW1hZ2Ugb3Igc29tZW9uZSB1c2VzIGFuIGFjdGlvbiB0byB3YWtlIGl0LlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjEyZDZcIixcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiWW91bmcgQnJvbnplIERyYWdvblwiLFxuXHRcdHNpemU6IFwiTGFyZ2VcIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJkcmFnb25cIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJsYXdmdWwgZ29vZFwiLFxuXHRcdGFjOiAxOCxcblx0XHRocDogMTQyLFxuXHRcdGhpdF9kaWNlOiBcIjE1ZDEwXCIsXG5cdFx0c3BlZWQ6IFwiNDAgZnQuLCBmbHkgODAgZnQuLCBzd2ltIDQwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbMjEsIDEwLCAxOSwgMTQsIDEzLCAxN10sXG5cdFx0c2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0ZGV4dGVyaXR5OiAzLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0Y29uc3RpdHV0aW9uOiA3LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0d2lzZG9tOiA0LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0Y2hhcmlzbWE6IDYsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0c2tpbGxzYXZlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRpbnNpZ2h0OiA0LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0cGVyY2VwdGlvbjogNyxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHN0ZWFsdGg6IDMsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwibGlnaHRuaW5nXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0c2Vuc2VzOiBcImJsaW5kc2lnaHQgMzAgZnQuLCBkYXJrdmlzaW9uIDEyMCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxN1wiLFxuXHRcdGxhbmd1YWdlczogXCJDb21tb24sIERyYWNvbmljXCIsXG5cdFx0Y3I6IFwiOFwiLFxuXHRcdHRyYWl0czogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkFtcGhpYmlvdXNcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgZHJhZ29uIGNhbiBicmVhdGhlIGFpciBhbmQgd2F0ZXIuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRhY3Rpb25zOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgZHJhZ29uIG1ha2VzIHRocmVlIGF0dGFja3M6IG9uZSB3aXRoIGl0cyBiaXRlIGFuZCB0d28gd2l0aCBpdHMgY2xhd3MuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQml0ZVwiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs4IHRvIGhpdCwgcmVhY2ggMTAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDE2ICgyZDEwICsgNSkgcGllcmNpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDgsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjJkMTBcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiA1LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJDbGF3XCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzggdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxMiAoMmQ2ICsgNSkgc2xhc2hpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDgsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjJkNlwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDUsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkJyZWF0aCBXZWFwb25zIChSZWNoYXJnZSA1LTYpXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGRyYWdvbiB1c2VzIG9uZSBvZiB0aGUgZm9sbG93aW5nIGJyZWF0aCB3ZWFwb25zLlxcbkxpZ2h0bmluZyBCcmVhdGguIFRoZSBkcmFnb24gZXhoYWxlcyBsaWdodG5pbmcgaW4gYSA2MC1mb290IGxpbmUgdGhhdCBpcyA1IGZlZXQgd2lkZS4gRWFjaCBjcmVhdHVyZSBpbiB0aGF0IGxpbmUgbXVzdCBtYWtlIGEgREMgMTUgRGV4dGVyaXR5IHNhdmluZyB0aHJvdywgdGFraW5nIDU1ICgxMGQxMCkgbGlnaHRuaW5nIGRhbWFnZSBvbiBhIGZhaWxlZCBzYXZlLCBvciBoYWxmIGFzIG11Y2ggZGFtYWdlIG9uIGEgc3VjY2Vzc2Z1bCBvbmUuXFxuUmVwdWxzaW9uIEJyZWF0aC4gVGhlIGRyYWdvbiBleGhhbGVzIHJlcHVsc2lvbiBlbmVyZ3kgaW4gYSAzMC1mb290IGNvbmUuIEVhY2ggY3JlYXR1cmUgaW4gdGhhdCBhcmVhIG11c3Qgc3VjY2VlZCBvbiBhIERDIDE1IFN0cmVuZ3RoIHNhdmluZyB0aHJvdy4gT24gYSBmYWlsZWQgc2F2ZSwgdGhlIGNyZWF0dXJlIGlzIHB1c2hlZCA0MCBmZWV0IGF3YXkgZnJvbSB0aGUgZHJhZ29uLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjEwZDEwXCIsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIllvdW5nIENvcHBlciBEcmFnb25cIixcblx0XHRzaXplOiBcIkxhcmdlXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwiZHJhZ29uXCIsXG5cdFx0c3VidHlwZTogXCJcIixcblx0XHRhbGlnbm1lbnQ6IFwiY2hhb3RpYyBnb29kXCIsXG5cdFx0YWM6IDE3LFxuXHRcdGhwOiAxMTksXG5cdFx0aGl0X2RpY2U6IFwiMTRkMTBcIixcblx0XHRzcGVlZDogXCI0MCBmdC4sIGNsaW1iIDQwIGZ0LiwgZmx5IDgwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbMTksIDEyLCAxNywgMTYsIDEzLCAxNV0sXG5cdFx0c2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0ZGV4dGVyaXR5OiA0LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0Y29uc3RpdHV0aW9uOiA2LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0d2lzZG9tOiA0LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0Y2hhcmlzbWE6IDUsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0c2tpbGxzYXZlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRkZWNlcHRpb246IDUsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRwZXJjZXB0aW9uOiA3LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0c3RlYWx0aDogNCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJhY2lkXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0c2Vuc2VzOiBcImJsaW5kc2lnaHQgMzAgZnQuLCBkYXJrdmlzaW9uIDEyMCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxN1wiLFxuXHRcdGxhbmd1YWdlczogXCJDb21tb24sIERyYWNvbmljXCIsXG5cdFx0Y3I6IFwiN1wiLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJNdWx0aWF0dGFja1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBkcmFnb24gbWFrZXMgdGhyZWUgYXR0YWNrczogb25lIHdpdGggaXRzIGJpdGUgYW5kIHR3byB3aXRoIGl0cyBjbGF3cy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJCaXRlXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzcgdG8gaGl0LCByZWFjaCAxMCBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTUgKDJkMTAgKyA0KSBwaWVyY2luZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNyxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMmQxMFwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDQsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkNsYXdcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNyB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDExICgyZDYgKyA0KSBzbGFzaGluZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNyxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMmQ2XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogNCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQnJlYXRoIFdlYXBvbnMgKFJlY2hhcmdlIDUtNilcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgZHJhZ29uIHVzZXMgb25lIG9mIHRoZSBmb2xsb3dpbmcgYnJlYXRoIHdlYXBvbnMuXFxuQWNpZCBCcmVhdGguIFRoZSBkcmFnb24gZXhoYWxlcyBhY2lkIGluIGFuIDQwLWZvb3QgbGluZSB0aGF0IGlzIDUgZmVldCB3aWRlLiBFYWNoIGNyZWF0dXJlIGluIHRoYXQgbGluZSBtdXN0IG1ha2UgYSBEQyAxNCBEZXh0ZXJpdHkgc2F2aW5nIHRocm93LCB0YWtpbmcgNDAgKDlkOCkgYWNpZCBkYW1hZ2Ugb24gYSBmYWlsZWQgc2F2ZSwgb3IgaGFsZiBhcyBtdWNoIGRhbWFnZSBvbiBhIHN1Y2Nlc3NmdWwgb25lLlxcblNsb3dpbmcgQnJlYXRoLiBUaGUgZHJhZ29uIGV4aGFsZXMgZ2FzIGluIGEgMzAtZm9vdCBjb25lLiBFYWNoIGNyZWF0dXJlIGluIHRoYXQgYXJlYSBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxNCBDb25zdGl0dXRpb24gc2F2aW5nIHRocm93LiBPbiBhIGZhaWxlZCBzYXZlLCB0aGUgY3JlYXR1cmUgY2FuJ3QgdXNlIHJlYWN0aW9ucywgaXRzIHNwZWVkIGlzIGhhbHZlZCwgYW5kIGl0IGNhbid0IG1ha2UgbW9yZSB0aGFuIG9uZSBhdHRhY2sgb24gaXRzIHR1cm4uIEluIGFkZGl0aW9uLCB0aGUgY3JlYXR1cmUgY2FuIHVzZSBlaXRoZXIgYW4gYWN0aW9uIG9yIGEgYm9udXMgYWN0aW9uIG9uIGl0cyB0dXJuLCBidXQgbm90IGJvdGguIFRoZXNlIGVmZmVjdHMgbGFzdCBmb3IgMSBtaW51dGUuIFRoZSBjcmVhdHVyZSBjYW4gcmVwZWF0IHRoZSBzYXZpbmcgdGhyb3cgYXQgdGhlIGVuZCBvZiBlYWNoIG9mIGl0cyB0dXJucywgZW5kaW5nIHRoZSBlZmZlY3Qgb24gaXRzZWxmIHdpdGggYSBzdWNjZXNzZnVsIHNhdmUuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiOWQ4XCIsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIllvdW5nIEdvbGQgRHJhZ29uXCIsXG5cdFx0c2l6ZTogXCJMYXJnZVwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcImRyYWdvblwiLFxuXHRcdHN1YnR5cGU6IFwiXCIsXG5cdFx0YWxpZ25tZW50OiBcImxhd2Z1bCBnb29kXCIsXG5cdFx0YWM6IDE4LFxuXHRcdGhwOiAxNzgsXG5cdFx0aGl0X2RpY2U6IFwiMTdkMTBcIixcblx0XHRzcGVlZDogXCI0MCBmdC4sIGZseSA4MCBmdC4sIHN3aW0gNDAgZnQuXCIsXG5cdFx0c3RhdHM6IFsyMywgMTQsIDIxLCAxNiwgMTMsIDIwXSxcblx0XHRzYXZlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRkZXh0ZXJpdHk6IDYsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRjb25zdGl0dXRpb246IDksXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHR3aXNkb206IDUsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRjaGFyaXNtYTogOSxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRza2lsbHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdGluc2lnaHQ6IDUsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRwZXJjZXB0aW9uOiA5LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0cGVyc3Vhc2lvbjogOSxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHN0ZWFsdGg6IDYsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiZmlyZVwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuXHRcdHNlbnNlczogXCJibGluZHNpZ2h0IDMwIGZ0LiwgZGFya3Zpc2lvbiAxMjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTlcIixcblx0XHRsYW5ndWFnZXM6IFwiQ29tbW9uLCBEcmFjb25pY1wiLFxuXHRcdGNyOiBcIjEwXCIsXG5cdFx0dHJhaXRzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQW1waGliaW91c1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBkcmFnb24gY2FuIGJyZWF0aGUgYWlyIGFuZCB3YXRlci5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJNdWx0aWF0dGFja1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBkcmFnb24gbWFrZXMgdGhyZWUgYXR0YWNrczogb25lIHdpdGggaXRzIGJpdGUgYW5kIHR3byB3aXRoIGl0cyBjbGF3cy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJCaXRlXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzEwIHRvIGhpdCwgcmVhY2ggMTAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDE3ICgyZDEwICsgNikgcGllcmNpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDEwLFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIyZDEwXCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogNixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQ2xhd1wiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICsxMCB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDEzICgyZDYgKyA2KSBzbGFzaGluZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMTAsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjJkNlwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDYsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkJyZWF0aCBXZWFwb25zIChSZWNoYXJnZSA1LTYpXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGRyYWdvbiB1c2VzIG9uZSBvZiB0aGUgZm9sbG93aW5nIGJyZWF0aCB3ZWFwb25zLlxcbkZpcmUgQnJlYXRoLiBUaGUgZHJhZ29uIGV4aGFsZXMgZmlyZSBpbiBhIDMwLWZvb3QgY29uZS4gRWFjaCBjcmVhdHVyZSBpbiB0aGF0IGFyZWEgbXVzdCBtYWtlIGEgREMgMTcgRGV4dGVyaXR5IHNhdmluZyB0aHJvdywgdGFraW5nIDU1ICgxMGQxMCkgZmlyZSBkYW1hZ2Ugb24gYSBmYWlsZWQgc2F2ZSwgb3IgaGFsZiBhcyBtdWNoIGRhbWFnZSBvbiBhIHN1Y2Nlc3NmdWwgb25lLlxcbldlYWtlbmluZyBCcmVhdGguIFRoZSBkcmFnb24gZXhoYWxlcyBnYXMgaW4gYSAzMC1mb290IGNvbmUuIEVhY2ggY3JlYXR1cmUgaW4gdGhhdCBhcmVhIG11c3Qgc3VjY2VlZCBvbiBhIERDIDE3IFN0cmVuZ3RoIHNhdmluZyB0aHJvdyBvciBoYXZlIGRpc2FkdmFudGFnZSBvbiBTdHJlbmd0aC1iYXNlZCBhdHRhY2sgcm9sbHMsIFN0cmVuZ3RoIGNoZWNrcywgYW5kIFN0cmVuZ3RoIHNhdmluZyB0aHJvd3MgZm9yIDEgbWludXRlLiBBIGNyZWF0dXJlIGNhbiByZXBlYXQgdGhlIHNhdmluZyB0aHJvdyBhdCB0aGUgZW5kIG9mIGVhY2ggb2YgaXRzIHR1cm5zLCBlbmRpbmcgdGhlIGVmZmVjdCBvbiBpdHNlbGYgb24gYSBzdWNjZXNzLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjEwZDEwXCIsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIllvdW5nIEdyZWVuIERyYWdvblwiLFxuXHRcdHNpemU6IFwiTGFyZ2VcIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJkcmFnb25cIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJsYXdmdWwgZXZpbFwiLFxuXHRcdGFjOiAxOCxcblx0XHRocDogMTM2LFxuXHRcdGhpdF9kaWNlOiBcIjE2ZDEwXCIsXG5cdFx0c3BlZWQ6IFwiNDAgZnQuLCBmbHkgODAgZnQuLCBzd2ltIDQwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbMTksIDEyLCAxNywgMTYsIDEzLCAxNV0sXG5cdFx0c2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0ZGV4dGVyaXR5OiA0LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0Y29uc3RpdHV0aW9uOiA2LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0d2lzZG9tOiA0LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0Y2hhcmlzbWE6IDUsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0c2tpbGxzYXZlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRkZWNlcHRpb246IDUsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRwZXJjZXB0aW9uOiA3LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0c3RlYWx0aDogNCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJwb2lzb25cIixcblx0XHRjb25kaXRpb25faW1tdW5pdGllczogXCJwb2lzb25lZFwiLFxuXHRcdHNlbnNlczogXCJibGluZHNpZ2h0IDMwIGZ0LiwgZGFya3Zpc2lvbiAxMjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTdcIixcblx0XHRsYW5ndWFnZXM6IFwiQ29tbW9uLCBEcmFjb25pY1wiLFxuXHRcdGNyOiBcIjhcIixcblx0XHR0cmFpdHM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJBbXBoaWJpb3VzXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGRyYWdvbiBjYW4gYnJlYXRoZSBhaXIgYW5kIHdhdGVyLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGRyYWdvbiBtYWtlcyB0aHJlZSBhdHRhY2tzOiBvbmUgd2l0aCBpdHMgYml0ZSBhbmQgdHdvIHdpdGggaXRzIGNsYXdzLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkJpdGVcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNyB0byBoaXQsIHJlYWNoIDEwIGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxNSAoMmQxMCArIDQpIHBpZXJjaW5nIGRhbWFnZSBwbHVzIDcgKDJkNikgcG9pc29uIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA3LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIyZDEwICsgMmQ2XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogNCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQ2xhd1wiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs3IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTEgKDJkNiArIDQpIHNsYXNoaW5nIGRhbWFnZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiA3LFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIyZDZcIixcblx0XHRcdFx0ZGFtYWdlX2JvbnVzOiA0LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJQb2lzb24gQnJlYXRoIChSZWNoYXJnZSA1LTYpXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGRyYWdvbiBleGhhbGVzIHBvaXNvbm91cyBnYXMgaW4gYSAzMC1mb290IGNvbmUuIEVhY2ggY3JlYXR1cmUgaW4gdGhhdCBhcmVhIG11c3QgbWFrZSBhIERDIDE0IENvbnN0aXR1dGlvbiBzYXZpbmcgdGhyb3csIHRha2luZyA0MiAoMTJkNikgcG9pc29uIGRhbWFnZSBvbiBhIGZhaWxlZCBzYXZlLCBvciBoYWxmIGFzIG11Y2ggZGFtYWdlIG9uIGEgc3VjY2Vzc2Z1bCBvbmUuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMTJkNlwiLFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJZb3VuZyBSZWQgRHJhZ29uXCIsXG5cdFx0c2l6ZTogXCJMYXJnZVwiLFxuXHRcdHNvdXJjZTogXCJTUkRcIixcblx0XHR0eXBlOiBcImRyYWdvblwiLFxuXHRcdHN1YnR5cGU6IFwiXCIsXG5cdFx0YWxpZ25tZW50OiBcImNoYW90aWMgZXZpbFwiLFxuXHRcdGFjOiAxOCxcblx0XHRocDogMTc4LFxuXHRcdGhpdF9kaWNlOiBcIjE3ZDEwXCIsXG5cdFx0c3BlZWQ6IFwiNDAgZnQuLCBjbGltYiA0MCBmdC4sIGZseSA4MCBmdC5cIixcblx0XHRzdGF0czogWzIzLCAxMCwgMjEsIDE0LCAxMSwgMTldLFxuXHRcdHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdGRleHRlcml0eTogNCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdGNvbnN0aXR1dGlvbjogOSxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHdpc2RvbTogNCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdGNoYXJpc21hOiA4LFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdHNraWxsc2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0cGVyY2VwdGlvbjogOCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHN0ZWFsdGg6IDQsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiZmlyZVwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuXHRcdHNlbnNlczogXCJibGluZHNpZ2h0IDMwIGZ0LiwgZGFya3Zpc2lvbiAxMjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMThcIixcblx0XHRsYW5ndWFnZXM6IFwiQ29tbW9uLCBEcmFjb25pY1wiLFxuXHRcdGNyOiBcIjEwXCIsXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGRyYWdvbiBtYWtlcyB0aHJlZSBhdHRhY2tzOiBvbmUgd2l0aCBpdHMgYml0ZSBhbmQgdHdvIHdpdGggaXRzIGNsYXdzLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkJpdGVcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMTAgdG8gaGl0LCByZWFjaCAxMCBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTcgKDJkMTAgKyA2KSBwaWVyY2luZyBkYW1hZ2UgcGx1cyAzICgxZDYpIGZpcmUgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDEwLFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIyZDEwICsgMWQ2XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogNixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQ2xhd1wiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICsxMCB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDEzICgyZDYgKyA2KSBzbGFzaGluZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMTAsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjJkNlwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDYsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkZpcmUgQnJlYXRoIChSZWNoYXJnZSA1LTYpXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGRyYWdvbiBleGhhbGVzIGZpcmUgaW4gYSAzMC1mb290IGNvbmUuIEVhY2ggY3JlYXR1cmUgaW4gdGhhdCBhcmVhIG11c3QgbWFrZSBhIERDIDE3IERleHRlcml0eSBzYXZpbmcgdGhyb3csIHRha2luZyA1NiAoMTZkNikgZmlyZSBkYW1hZ2Ugb24gYSBmYWlsZWQgc2F2ZSwgb3IgaGFsZiBhcyBtdWNoIGRhbWFnZSBvbiBhIHN1Y2Nlc3NmdWwgb25lLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjE2ZDZcIixcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcblx0e1xuXHRcdG5hbWU6IFwiWW91bmcgU2lsdmVyIERyYWdvblwiLFxuXHRcdHNpemU6IFwiTGFyZ2VcIixcblx0XHRzb3VyY2U6IFwiU1JEXCIsXG5cdFx0dHlwZTogXCJkcmFnb25cIixcblx0XHRzdWJ0eXBlOiBcIlwiLFxuXHRcdGFsaWdubWVudDogXCJsYXdmdWwgZ29vZFwiLFxuXHRcdGFjOiAxOCxcblx0XHRocDogMTY4LFxuXHRcdGhpdF9kaWNlOiBcIjE2ZDEwXCIsXG5cdFx0c3BlZWQ6IFwiNDAgZnQuLCBmbHkgODAgZnQuXCIsXG5cdFx0c3RhdHM6IFsyMywgMTAsIDIxLCAxNCwgMTEsIDE5XSxcblx0XHRzYXZlczogW1xuXHRcdFx0e1xuXHRcdFx0XHRkZXh0ZXJpdHk6IDQsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRjb25zdGl0dXRpb246IDksXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHR3aXNkb206IDQsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRjaGFyaXNtYTogOCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRza2lsbHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdGFyY2FuYTogNixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdGhpc3Rvcnk6IDYsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRwZXJjZXB0aW9uOiA4LFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0c3RlYWx0aDogNCxcblx0XHRcdH0sXG5cdFx0XSxcblx0XHRkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuXHRcdGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcblx0XHRkYW1hZ2VfaW1tdW5pdGllczogXCJjb2xkXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0c2Vuc2VzOiBcImJsaW5kc2lnaHQgMzAgZnQuLCBkYXJrdmlzaW9uIDEyMCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxOFwiLFxuXHRcdGxhbmd1YWdlczogXCJDb21tb24sIERyYWNvbmljXCIsXG5cdFx0Y3I6IFwiOVwiLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJNdWx0aWF0dGFja1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBkcmFnb24gbWFrZXMgdGhyZWUgYXR0YWNrczogb25lIHdpdGggaXRzIGJpdGUgYW5kIHR3byB3aXRoIGl0cyBjbGF3cy5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJCaXRlXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzEwIHRvIGhpdCwgcmVhY2ggMTAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDE3ICgyZDEwICsgNikgcGllcmNpbmcgZGFtYWdlLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDEwLFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIyZDEwXCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogNixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQ2xhd1wiLFxuXHRcdFx0XHRkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICsxMCB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDEzICgyZDYgKyA2KSBzbGFzaGluZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMTAsXG5cdFx0XHRcdGRhbWFnZV9kaWNlOiBcIjJkNlwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDYsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkJyZWF0aCBXZWFwb25zIChSZWNoYXJnZSA1LTYpXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGRyYWdvbiB1c2VzIG9uZSBvZiB0aGUgZm9sbG93aW5nIGJyZWF0aCB3ZWFwb25zLlxcbkNvbGQgQnJlYXRoLiBUaGUgZHJhZ29uIGV4aGFsZXMgYW4gaWN5IGJsYXN0IGluIGEgMzAtZm9vdCBjb25lLiBFYWNoIGNyZWF0dXJlIGluIHRoYXQgYXJlYSBtdXN0IG1ha2UgYSBEQyAxNyBDb25zdGl0dXRpb24gc2F2aW5nIHRocm93LCB0YWtpbmcgNTQgKDEyZDgpIGNvbGQgZGFtYWdlIG9uIGEgZmFpbGVkIHNhdmUsIG9yIGhhbGYgYXMgbXVjaCBkYW1hZ2Ugb24gYSBzdWNjZXNzZnVsIG9uZS5cXG5QYXJhbHl6aW5nIEJyZWF0aC4gVGhlIGRyYWdvbiBleGhhbGVzIHBhcmFseXppbmcgZ2FzIGluIGEgMzAtZm9vdCBjb25lLiBFYWNoIGNyZWF0dXJlIGluIHRoYXQgYXJlYSBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxNyBDb25zdGl0dXRpb24gc2F2aW5nIHRocm93IG9yIGJlIHBhcmFseXplZCBmb3IgMSBtaW51dGUuIEEgY3JlYXR1cmUgY2FuIHJlcGVhdCB0aGUgc2F2aW5nIHRocm93IGF0IHRoZSBlbmQgb2YgZWFjaCBvZiBpdHMgdHVybnMsIGVuZGluZyB0aGUgZWZmZWN0IG9uIGl0c2VsZiBvbiBhIHN1Y2Nlc3MuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMCxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMTJkOFwiLFxuXHRcdFx0fSxcblx0XHRdLFxuXHR9LFxuXHR7XG5cdFx0bmFtZTogXCJZb3VuZyBXaGl0ZSBEcmFnb25cIixcblx0XHRzaXplOiBcIkxhcmdlXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwiZHJhZ29uXCIsXG5cdFx0c3VidHlwZTogXCJcIixcblx0XHRhbGlnbm1lbnQ6IFwiY2hhb3RpYyBldmlsXCIsXG5cdFx0YWM6IDE3LFxuXHRcdGhwOiAxMzMsXG5cdFx0aGl0X2RpY2U6IFwiMTRkMTBcIixcblx0XHRzcGVlZDogXCI0MCBmdC4sIGJ1cnJvdyAyMCBmdC4sIGZseSA4MCBmdC4sIHN3aW0gNDAgZnQuXCIsXG5cdFx0c3RhdHM6IFsxOCwgMTAsIDE4LCA2LCAxMSwgMTJdLFxuXHRcdHNhdmVzOiBbXG5cdFx0XHR7XG5cdFx0XHRcdGRleHRlcml0eTogMyxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdGNvbnN0aXR1dGlvbjogNyxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHdpc2RvbTogMyxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdGNoYXJpc21hOiA0LFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdHNraWxsc2F2ZXM6IFtcblx0XHRcdHtcblx0XHRcdFx0cGVyY2VwdGlvbjogNixcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdHN0ZWFsdGg6IDMsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiY29sZFwiLFxuXHRcdGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuXHRcdHNlbnNlczogXCJibGluZHNpZ2h0IDMwIGZ0LiwgZGFya3Zpc2lvbiAxMjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTZcIixcblx0XHRsYW5ndWFnZXM6IFwiQ29tbW9uLCBEcmFjb25pY1wiLFxuXHRcdGNyOiBcIjZcIixcblx0XHR0cmFpdHM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJJY2UgV2Fsa1wiLFxuXHRcdFx0XHRkZXNjOiBcIlRoZSBkcmFnb24gY2FuIG1vdmUgYWNyb3NzIGFuZCBjbGltYiBpY3kgc3VyZmFjZXMgd2l0aG91dCBuZWVkaW5nIHRvIG1ha2UgYW4gYWJpbGl0eSBjaGVjay4gQWRkaXRpb25hbGx5LCBkaWZmaWN1bHQgdGVycmFpbiBjb21wb3NlZCBvZiBpY2Ugb3Igc25vdyBkb2Vzbid0IGNvc3QgaXQgZXh0cmEgbW9tZW50LlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0YWN0aW9uczogW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG5cdFx0XHRcdGRlc2M6IFwiVGhlIGRyYWdvbiBtYWtlcyB0aHJlZSBhdHRhY2tzOiBvbmUgd2l0aCBpdHMgYml0ZSBhbmQgdHdvIHdpdGggaXRzIGNsYXdzLlwiLFxuXHRcdFx0XHRhdHRhY2tfYm9udXM6IDAsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkJpdGVcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNyB0byBoaXQsIHJlYWNoIDEwIGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxNSAoMmQxMCArIDQpIHBpZXJjaW5nIGRhbWFnZSBwbHVzIDQgKDFkOCkgY29sZCBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNyxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMmQxMCArIDFkOFwiLFxuXHRcdFx0XHRkYW1hZ2VfYm9udXM6IDQsXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiBcIkNsYXdcIixcblx0XHRcdFx0ZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNyB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDExICgyZDYgKyA0KSBzbGFzaGluZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogNyxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMmQ2XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogNCxcblx0XHRcdH0sXG5cdFx0XHR7XG5cdFx0XHRcdG5hbWU6IFwiQ29sZCBCcmVhdGggKFJlY2hhcmdlIDUtNilcIixcblx0XHRcdFx0ZGVzYzogXCJUaGUgZHJhZ29uIGV4aGFsZXMgYW4gaWN5IGJsYXN0IGluIGEgMzAtZm9vdCBjb25lLiBFYWNoIGNyZWF0dXJlIGluIHRoYXQgYXJlYSBtdXN0IG1ha2UgYSBEQyAxNSBDb25zdGl0dXRpb24gc2F2aW5nIHRocm93LCB0YWtpbmcgNDUgKDEwZDgpIGNvbGQgZGFtYWdlIG9uIGEgZmFpbGVkIHNhdmUsIG9yIGhhbGYgYXMgbXVjaCBkYW1hZ2Ugb24gYSBzdWNjZXNzZnVsIG9uZS5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0XHRkYW1hZ2VfZGljZTogXCIxMGQ4XCIsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdH0sXG5cdHtcblx0XHRuYW1lOiBcIlpvbWJpZVwiLFxuXHRcdHNpemU6IFwiTWVkaXVtXCIsXG5cdFx0c291cmNlOiBcIlNSRFwiLFxuXHRcdHR5cGU6IFwidW5kZWFkXCIsXG5cdFx0c3VidHlwZTogXCJcIixcblx0XHRhbGlnbm1lbnQ6IFwibmV1dHJhbCBldmlsXCIsXG5cdFx0YWM6IDgsXG5cdFx0aHA6IDIyLFxuXHRcdGhpdF9kaWNlOiBcIjNkOFwiLFxuXHRcdHNwZWVkOiBcIjIwIGZ0LlwiLFxuXHRcdHN0YXRzOiBbMTMsIDYsIDE2LCAzLCA2LCA1XSxcblx0XHRzYXZlczogW1xuXHRcdFx0e1xuXHRcdFx0XHR3aXNkb206IDAsXG5cdFx0XHR9LFxuXHRcdF0sXG5cdFx0ZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcblx0XHRkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG5cdFx0ZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG5cdFx0Y29uZGl0aW9uX2ltbXVuaXRpZXM6IFwicG9pc29uZWRcIixcblx0XHRzZW5zZXM6IFwiZGFya3Zpc2lvbiA2MCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiA4XCIsXG5cdFx0bGFuZ3VhZ2VzOiBcInVuZGVyc3RhbmRzIGFsbCBsYW5ndWFnZXMgaXQgc3Bva2UgaW4gbGlmZSBidXQgY2FuJ3Qgc3BlYWtcIixcblx0XHRjcjogXCIxLzRcIixcblx0XHR0cmFpdHM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJVbmRlYWQgRm9ydGl0dWRlXCIsXG5cdFx0XHRcdGRlc2M6IFwiSWYgZGFtYWdlIHJlZHVjZXMgdGhlIHpvbWJpZSB0byAwIGhpdCBwb2ludHMsIGl0IG11c3QgbWFrZSBhIENvbnN0aXR1dGlvbiBzYXZpbmcgdGhyb3cgd2l0aCBhIERDIG9mIDUrdGhlIGRhbWFnZSB0YWtlbiwgdW5sZXNzIHRoZSBkYW1hZ2UgaXMgcmFkaWFudCBvciBmcm9tIGEgY3JpdGljYWwgaGl0LiBPbiBhIHN1Y2Nlc3MsIHRoZSB6b21iaWUgZHJvcHMgdG8gMSBoaXQgcG9pbnQgaW5zdGVhZC5cIixcblx0XHRcdFx0YXR0YWNrX2JvbnVzOiAwLFxuXHRcdFx0fSxcblx0XHRdLFxuXHRcdGFjdGlvbnM6IFtcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogXCJTbGFtXCIsXG5cdFx0XHRcdGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzMgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiA0ICgxZDYgKyAxKSBibHVkZ2VvbmluZyBkYW1hZ2UuXCIsXG5cdFx0XHRcdGF0dGFja19ib251czogMyxcblx0XHRcdFx0ZGFtYWdlX2RpY2U6IFwiMWQ2XCIsXG5cdFx0XHRcdGRhbWFnZV9ib251czogMSxcblx0XHRcdH0sXG5cdFx0XSxcblx0fSxcbl07XG5cbi8qIGV4cG9ydCBjb25zdCBCRVNUSUFSWV9CWV9OQU1FID0gT2JqZWN0LmZyb21FbnRyaWVzKFxuICAgIEJFU1RJQVJZLm1hcCgobW9uc3RlcikgPT4gW21vbnN0ZXIubmFtZSwgbW9uc3Rlcl0pXG4pOyAqL1xuXG5leHBvcnQgY29uc3QgQkVTVElBUllfQllfTkFNRTogTWFwPHN0cmluZywgU1JETW9uc3Rlcj4gPSBuZXcgTWFwKFxuXHRCRVNUSUFSWS5tYXAoKG1vbnN0ZXIpID0+IHtcblx0XHQvKiAgICAgICAgIGNvbnN0IHN0YXRibG9jazogU3RhdGJsb2NrTW9uc3RlciA9IE9iamVjdC5hc3NpZ24oe30sIG1vbnN0ZXIsIHtcbiAgICAgICAgICAgIHRyYWl0czogbmV3IE1hcCgpLFxuICAgICAgICAgICAgYWN0aW9uczogbmV3IE1hcCgpLFxuICAgICAgICAgICAgcmVhY3Rpb25zOiBuZXcgTWFwKCksXG4gICAgICAgICAgICBsZWdlbmRhcnlfYWN0aW9uczogbmV3IE1hcCgpXG4gICAgICAgIH0pO1xuICAgICAgICBzdGF0YmxvY2sudHJhaXRzID0gdHJhaXRNYXBGcm9tKG1vbnN0ZXIudHJhaXRzKTtcbiAgICAgICAgc3RhdGJsb2NrLmFjdGlvbnMgPSB0cmFpdE1hcEZyb20obW9uc3Rlci5hY3Rpb25zKTtcbiAgICAgICAgc3RhdGJsb2NrLnJlYWN0aW9ucyA9IHRyYWl0TWFwRnJvbShtb25zdGVyLnJlYWN0aW9ucyk7XG4gICAgICAgIHN0YXRibG9jay5sZWdlbmRhcnlfYWN0aW9ucyA9IHRyYWl0TWFwRnJvbShtb25zdGVyLmxlZ2VuZGFyeV9hY3Rpb25zKTsgKi9cblxuXHRcdHJldHVybiBbbW9uc3Rlci5uYW1lLCBtb25zdGVyXTtcblx0fSlcbik7XG4iLCAiaW1wb3J0IHtcbiAgICBkZWJvdW5jZSxcbiAgICBFeHRyYUJ1dHRvbkNvbXBvbmVudCxcbiAgICBJdGVtVmlldyxcbiAgICBOb3RpY2UsXG4gICAgV29ya3NwYWNlTGVhZlxufSBmcm9tIFwib2JzaWRpYW5cIjtcbmltcG9ydCB7XG4gICAgQkFTRSxcbiAgICBDUkVBVFVSRSxcbiAgICBDUkVBVFVSRV9UUkFDS0VSX1ZJRVcsXG4gICAgSU5USUFUSVZFX1RSQUNLRVJfVklFV1xufSBmcm9tIFwiLi4vdXRpbHNcIjtcblxuaW1wb3J0IHR5cGUgSW5pdGlhdGl2ZVRyYWNrZXIgZnJvbSBcIi4uL21haW5cIjtcblxuaW1wb3J0IEFwcCBmcm9tIFwiLi91aS9BcHAuc3ZlbHRlXCI7XG5pbXBvcnQgdHlwZSB7IENyZWF0dXJlIH0gZnJvbSBcIi4uL3V0aWxzL2NyZWF0dXJlXCI7XG5pbXBvcnQgdHlwZSB7XG4gICAgQ29uZGl0aW9uLFxuICAgIEhvbWVicmV3Q3JlYXR1cmUsXG4gICAgSW5pdGlhdGl2ZVZpZXdTdGF0ZSxcbiAgICBQYXJ0eSxcbiAgICBUcmFja2VyRXZlbnRzLFxuICAgIFVwZGF0ZUxvZ01lc3NhZ2Vcbn0gZnJvbSBcIkB0eXBlc1wiO1xuaW1wb3J0IHsgZXF1aXZhbGVudCB9IGZyb20gXCIuLi9lbmNvdW50ZXJcIjtcbmltcG9ydCB7IE9WRVJGTE9XX1RZUEUsIFBMQVlFUl9WSUVXX1ZJRVcgfSBmcm9tIFwiLi4vdXRpbHMvY29uc3RhbnRzXCI7XG5pbXBvcnQgdHlwZSBQbGF5ZXJWaWV3IGZyb20gXCIuL3BsYXllci12aWV3XCI7XG5pbXBvcnQgTG9nZ2VyIGZyb20gXCIuLi9sb2dnZXIvbG9nZ2VyXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRyYWNrZXJWaWV3IGV4dGVuZHMgSXRlbVZpZXcge1xuICAgIHVpOiBBcHA7XG5cbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgbGVhZjogV29ya3NwYWNlTGVhZiwgcHVibGljIHBsdWdpbjogSW5pdGlhdGl2ZVRyYWNrZXIpIHtcbiAgICAgICAgc3VwZXIobGVhZik7XG4gICAgICAgIGlmICh0aGlzLnBsdWdpbi5kYXRhLnN0YXRlPy5jcmVhdHVyZXM/Lmxlbmd0aCkge1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIG9uT3BlbigpIHtcbiAgICAgICAgdGhpcy51aSA9IG5ldyBBcHAoe1xuICAgICAgICAgICAgdGFyZ2V0OiB0aGlzLmNvbnRlbnRFbCxcbiAgICAgICAgICAgIHByb3BzOiB7XG4gICAgICAgICAgICAgICAgcGx1Z2luOiB0aGlzLnBsdWdpblxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy51aS4kb24oXCJwbGF5ZXItdmlld1wiLCAoKSA9PiB0aGlzLm9wZW5QbGF5ZXJWaWV3KCkpO1xuICAgICAgICB0aGlzLnVpLiRvbihcIm9wZW4tbWFwXCIsICgpID0+IHRoaXMub3BlbkluaXRpYXRpdmVWaWV3KCkpO1xuICAgIH1cbiAgICBnZXRWaWV3VHlwZSgpIHtcbiAgICAgICAgcmV0dXJuIElOVElBVElWRV9UUkFDS0VSX1ZJRVc7XG4gICAgfVxuICAgIGdldERpc3BsYXlUZXh0KCkge1xuICAgICAgICByZXR1cm4gXCJJbml0aWF0aXZlIFRyYWNrZXJcIjtcbiAgICB9XG4gICAgZ2V0SWNvbigpIHtcbiAgICAgICAgcmV0dXJuIEJBU0U7XG4gICAgfVxuXG4gICAgLy9sZWdhY3kgTGVhZmxldCBzdXBwb3J0Li4uXG4gICAgZ2V0IHBjcygpOiBDcmVhdHVyZVtdIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgICBnZXQgbnBjcygpOiBDcmVhdHVyZVtdIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgICBvcGVuSW5pdGlhdGl2ZVZpZXcoKSB7XG4gICAgICAgIHRoaXMucGx1Z2luLmxlYWZsZXQub3BlbkluaXRpYXRpdmVWaWV3KHRoaXMucGNzLCB0aGlzLm5wY3MpO1xuICAgIH1cblxuICAgIC8vb3BlbiBwbGF5ZXIgdmlld1xuICAgIHBsYXllclZpZXdPcGVuZWQgPSBmYWxzZTtcbiAgICBnZXRFeGlzdGluZ1BsYXllclZpZXcoKTogUGxheWVyVmlldyB8IHVuZGVmaW5lZCB7XG4gICAgICAgIGNvbnN0IGV4aXN0aW5nID1cbiAgICAgICAgICAgIHRoaXMucGx1Z2luLmFwcC53b3Jrc3BhY2UuZ2V0TGVhdmVzT2ZUeXBlKFBMQVlFUl9WSUVXX1ZJRVcpO1xuICAgICAgICBpZiAoZXhpc3RpbmcubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gZXhpc3RpbmdbMF0udmlldyBhcyBQbGF5ZXJWaWV3O1xuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIGdldFBsYXllclZpZXcoKTogUHJvbWlzZTxQbGF5ZXJWaWV3PiB7XG4gICAgICAgIGNvbnN0IGV4aXN0aW5nID0gdGhpcy5nZXRFeGlzdGluZ1BsYXllclZpZXcoKTtcbiAgICAgICAgaWYgKGV4aXN0aW5nKSByZXR1cm4gZXhpc3Rpbmc7XG4gICAgICAgIGNvbnN0IGxlYWYgPSBhd2FpdCB0aGlzLmFwcC53b3Jrc3BhY2Uub3BlblBvcG91dExlYWYoKTtcbiAgICAgICAgYXdhaXQgbGVhZi5zZXRWaWV3U3RhdGUoe1xuICAgICAgICAgICAgdHlwZTogUExBWUVSX1ZJRVdfVklFV1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGxlYWYudmlldyBhcyBQbGF5ZXJWaWV3O1xuICAgIH1cbiAgICBhc3luYyBvcGVuUGxheWVyVmlldygpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5nZXRQbGF5ZXJWaWV3KCk7XG4gICAgICAgIHRoaXMucGxheWVyVmlld09wZW5lZCA9IHRydWU7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgQ3JlYXR1cmVWaWV3IGV4dGVuZHMgSXRlbVZpZXcge1xuICAgIGJ1dHRvbkVsID0gdGhpcy5jb250ZW50RWwuY3JlYXRlRGl2KFwiY3JlYXR1cmUtdmlldy1idXR0b25cIik7XG4gICAgc3RhdGJsb2NrRWwgPSB0aGlzLmNvbnRlbnRFbC5jcmVhdGVEaXYoXCJjcmVhdHVyZS1zdGF0YmxvY2stY29udGFpbmVyXCIpO1xuICAgIGNvbnN0cnVjdG9yKGxlYWY6IFdvcmtzcGFjZUxlYWYsIHB1YmxpYyBwbHVnaW46IEluaXRpYXRpdmVUcmFja2VyKSB7XG4gICAgICAgIHN1cGVyKGxlYWYpO1xuICAgICAgICB0aGlzLmxvYWQoKTtcbiAgICAgICAgdGhpcy5jb250YWluZXJFbC5hZGRDbGFzcyhcImNyZWF0dXJlLXZpZXctY29udGFpbmVyXCIpO1xuICAgICAgICB0aGlzLmNvbnRhaW5lckVsLm9uKFxuICAgICAgICAgICAgXCJtb3VzZW92ZXJcIixcbiAgICAgICAgICAgIFwiYS5pbnRlcm5hbC1saW5rXCIsXG4gICAgICAgICAgICBkZWJvdW5jZShcbiAgICAgICAgICAgICAgICAoZXYpID0+XG4gICAgICAgICAgICAgICAgICAgIGFwcC53b3Jrc3BhY2UudHJpZ2dlcihcbiAgICAgICAgICAgICAgICAgICAgICAgIFwibGluay1ob3ZlclwiLFxuICAgICAgICAgICAgICAgICAgICAgICAge30sIC8vaG92ZXIgcG9wb3ZlciwgYnV0IGRvbid0IG5lZWRcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2LnRhcmdldCwgLy90YXJnZXRFbFxuICAgICAgICAgICAgICAgICAgICAgICAgKGV2LnRhcmdldCBhcyBIVE1MQW5jaG9yRWxlbWVudCkuZGF0YXNldC5ocmVmLCAvL2xpbmtUZXh0XG4gICAgICAgICAgICAgICAgICAgICAgICBcImluaXRpYXRpdmUtdHJhY2tlciBcIiAvL3NvdXJjZVxuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIDEwXG4gICAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgICAgIHRoaXMuY29udGFpbmVyRWwub24oXCJjbGlja1wiLCBcImEuaW50ZXJuYWwtbGlua1wiLCAoZXYpID0+XG4gICAgICAgICAgICBhcHAud29ya3NwYWNlLm9wZW5MaW5rVGV4dChcbiAgICAgICAgICAgICAgICAoZXYudGFyZ2V0IGFzIEhUTUxBbmNob3JFbGVtZW50KS5kYXRhc2V0LmhyZWYsXG4gICAgICAgICAgICAgICAgXCJpbml0aWF0aXZlLXRyYWNrZXJcIlxuICAgICAgICAgICAgKVxuICAgICAgICApO1xuICAgIH1cbiAgICBvbmxvYWQoKSB7XG4gICAgICAgIG5ldyBFeHRyYUJ1dHRvbkNvbXBvbmVudCh0aGlzLmJ1dHRvbkVsKVxuICAgICAgICAgICAgLnNldEljb24oXCJjcm9zc1wiKVxuICAgICAgICAgICAgLnNldFRvb2x0aXAoXCJDbG9zZSBTdGF0YmxvY2tcIilcbiAgICAgICAgICAgIC5vbkNsaWNrKCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcigpO1xuICAgICAgICAgICAgICAgIHRoaXMuYXBwLndvcmtzcGFjZS50cmlnZ2VyKFwiaW5pdGlhdGl2ZS10cmFja2VyOnN0b3Atdmlld2luZ1wiKTtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cbiAgICBvbnVubG9hZCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5hcHAud29ya3NwYWNlLnRyaWdnZXIoXCJpbml0aWF0aXZlLXRyYWNrZXI6c3RvcC12aWV3aW5nXCIpO1xuICAgIH1cbiAgICByZW5kZXIoY3JlYXR1cmU/OiBIb21lYnJld0NyZWF0dXJlKSB7XG4gICAgICAgIHRoaXMuc3RhdGJsb2NrRWwuZW1wdHkoKTtcbiAgICAgICAgaWYgKCFjcmVhdHVyZSkge1xuICAgICAgICAgICAgdGhpcy5zdGF0YmxvY2tFbC5jcmVhdGVFbChcImVtXCIsIHtcbiAgICAgICAgICAgICAgICB0ZXh0OiBcIlNlbGVjdCBhIGNyZWF0dXJlIHRvIHZpZXcgaXQgaGVyZS5cIlxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXG4gICAgICAgICAgICB0aGlzLnBsdWdpbi5jYW5Vc2VTdGF0QmxvY2tzICYmXG4gICAgICAgICAgICB0aGlzLnBsdWdpbi5zdGF0YmxvY2tWZXJzaW9uPy5tYWpvciA+PSAyXG4gICAgICAgICkge1xuICAgICAgICAgICAgY29uc3Qgc3RhdGJsb2NrID0gdGhpcy5wbHVnaW4uc3RhdGJsb2Nrcy5yZW5kZXIoXG4gICAgICAgICAgICAgICAgY3JlYXR1cmUsXG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0YmxvY2tFbCxcbiAgICAgICAgICAgICAgICBjcmVhdHVyZS5kaXNwbGF5XG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgdGhpcy5hZGRDaGlsZChzdGF0YmxvY2spO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zdGF0YmxvY2tFbC5jcmVhdGVFbChcImVtXCIsIHtcbiAgICAgICAgICAgICAgICB0ZXh0OiBcIkluc3RhbGwgdGhlIFRUUlBHIFN0YXRibG9ja3MgcGx1Z2luIHRvIHVzZSB0aGlzIGZlYXR1cmUhXCJcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGdldERpc3BsYXlUZXh0KCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBcIkNvbWJhdGFudFwiO1xuICAgIH1cbiAgICBnZXRJY29uKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBDUkVBVFVSRTtcbiAgICB9XG4gICAgZ2V0Vmlld1R5cGUoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIENSRUFUVVJFX1RSQUNLRVJfVklFVztcbiAgICB9XG59XG4iLCAiPHNjcmlwdCBsYW5nPVwidHNcIj5cbiAgICBpbXBvcnQgeyBFeHRyYUJ1dHRvbkNvbXBvbmVudCwgUGxhdGZvcm0gfSBmcm9tIFwib2JzaWRpYW5cIjtcblxuICAgIGltcG9ydCB7XG4gICAgICAgIEJBQ0tXQVJELFxuICAgICAgICBESUNFLFxuICAgICAgICBFWFBBTkQsXG4gICAgICAgIEZPUldBUkQsXG4gICAgICAgIEdST1VQLFxuICAgICAgICBNQVAsXG4gICAgICAgIE5FVyxcbiAgICAgICAgUExBWSxcbiAgICAgICAgUkVETyxcbiAgICAgICAgU0FWRSxcbiAgICAgICAgU1RPUFxuICAgIH0gZnJvbSBcInNyYy91dGlsc1wiO1xuXG4gICAgaW1wb3J0IHsgTWVudSB9IGZyb20gXCJvYnNpZGlhblwiO1xuICAgIGltcG9ydCB7IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlciwgZ2V0Q29udGV4dCB9IGZyb20gXCJzdmVsdGVcIjtcbiAgICBpbXBvcnQgdHlwZSBJbml0aWF0aXZlVHJhY2tlciBmcm9tIFwic3JjL21haW5cIjtcblxuICAgIGltcG9ydCB7IHRyYWNrZXIgfSBmcm9tIFwiLi4vc3RvcmVzL3RyYWNrZXJcIjtcblxuICAgIGNvbnN0IHsgc3RhdGUsIGRhdGEgfSA9IHRyYWNrZXI7XG5cbiAgICBjb25zdCBkZXNrdG9wID0gUGxhdGZvcm0uaXNEZXNrdG9wO1xuXG4gICAgY29uc3QgcGxheUJ1dHRvbiA9IChub2RlOiBIVE1MRWxlbWVudCkgPT4ge1xuICAgICAgICBuZXcgRXh0cmFCdXR0b25Db21wb25lbnQobm9kZSlcbiAgICAgICAgICAgIC5zZXRJY29uKFBMQVkpXG4gICAgICAgICAgICAuc2V0VG9vbHRpcChcIlBsYXlcIilcbiAgICAgICAgICAgIC5vbkNsaWNrKCgpID0+IHRyYWNrZXIuc2V0U3RhdGUodHJ1ZSkpO1xuICAgIH07XG4gICAgY29uc3Qgc3RvcEJ1dHRvbiA9IChub2RlOiBIVE1MRWxlbWVudCkgPT4ge1xuICAgICAgICBuZXcgRXh0cmFCdXR0b25Db21wb25lbnQobm9kZSlcbiAgICAgICAgICAgIC5zZXRJY29uKFNUT1ApXG4gICAgICAgICAgICAuc2V0VG9vbHRpcChcIlN0b3BcIilcbiAgICAgICAgICAgIC5vbkNsaWNrKCgpID0+IHRyYWNrZXIuc2V0U3RhdGUoZmFsc2UpKTtcbiAgICB9O1xuICAgIGNvbnN0IG5leHRCdXR0b24gPSAobm9kZTogSFRNTEVsZW1lbnQpID0+IHtcbiAgICAgICAgbmV3IEV4dHJhQnV0dG9uQ29tcG9uZW50KG5vZGUpXG4gICAgICAgICAgICAuc2V0SWNvbihGT1JXQVJEKVxuICAgICAgICAgICAgLnNldFRvb2x0aXAoXCJOZXh0XCIpXG4gICAgICAgICAgICAub25DbGljaygoKSA9PiB0cmFja2VyLmdvVG9OZXh0KCkpO1xuICAgIH07XG4gICAgY29uc3QgcHJldkJ1dHRvbiA9IChub2RlOiBIVE1MRWxlbWVudCkgPT4ge1xuICAgICAgICBuZXcgRXh0cmFCdXR0b25Db21wb25lbnQobm9kZSlcbiAgICAgICAgICAgIC5zZXRJY29uKEJBQ0tXQVJEKVxuICAgICAgICAgICAgLnNldFRvb2x0aXAoXCJQcmV2aW91c1wiKVxuICAgICAgICAgICAgLm9uQ2xpY2soKCkgPT4gdHJhY2tlci5nb1RvUHJldmlvdXMoKSk7XG4gICAgfTtcblxuICAgIGNvbnN0IHBsdWdpbiA9IGdldENvbnRleHQ8SW5pdGlhdGl2ZVRyYWNrZXI+KFwicGx1Z2luXCIpO1xuXG4gICAgY29uc3QgZGlzcGF0Y2ggPSBjcmVhdGVFdmVudERpc3BhdGNoZXIoKTtcblxuICAgIGNvbnN0IG9wZW4gPSAoZXZ0OiBNb3VzZUV2ZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IG1lbnUgPSBuZXcgTWVudSgpO1xuICAgICAgICBtZW51LmFkZEl0ZW0oKGl0ZW0pID0+IHtcbiAgICAgICAgICAgIGl0ZW0uc2V0SWNvbihORVcpXG4gICAgICAgICAgICAgICAgLnNldFRpdGxlKFwiTmV3IEVuY291bnRlclwiKVxuICAgICAgICAgICAgICAgIC5vbkNsaWNrKCgpID0+IHRyYWNrZXIubmV3KCkpO1xuICAgICAgICB9KTtcbiAgICAgICAgbWVudS5hZGRJdGVtKChpdGVtKSA9PiB7XG4gICAgICAgICAgICBpdGVtLnNldEljb24oTkVXKVxuICAgICAgICAgICAgICAgIC5zZXRUaXRsZShcIkFkZCBDcmVhdHVyZXNcIilcbiAgICAgICAgICAgICAgICAub25DbGljaygoKSA9PiBkaXNwYXRjaChcImFkZC1jcmVhdHVyZXNcIikpO1xuICAgICAgICB9KTtcbiAgICAgICAgbWVudS5hZGRJdGVtKChpdGVtKSA9PiB7XG4gICAgICAgICAgICBpdGVtLnNldEljb24oUkVETylcbiAgICAgICAgICAgICAgICAuc2V0VGl0bGUoXCJSZXNldCBIUCAmIFN0YXR1c1wiKVxuICAgICAgICAgICAgICAgIC5vbkNsaWNrKCgpID0+IHRyYWNrZXIucmVzZXQoKSk7XG4gICAgICAgIH0pO1xuICAgICAgICBtZW51LmFkZEl0ZW0oKGl0ZW0pID0+IHtcbiAgICAgICAgICAgIGl0ZW0uc2V0SWNvbihESUNFKVxuICAgICAgICAgICAgICAgIC5zZXRUaXRsZShcIlJlLXJvbGwgSW5pdGlhdGl2ZXNcIilcbiAgICAgICAgICAgICAgICAub25DbGljaygoKSA9PiB0cmFja2VyLnJvbGwocGx1Z2luKSk7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoJGRhdGEucGFydGllcyAmJiAkZGF0YS5wYXJ0aWVzLmxlbmd0aCkge1xuICAgICAgICAgICAgbWVudS5hZGRJdGVtKChpdGVtKSA9PiB7XG4gICAgICAgICAgICAgICAgaXRlbS5zZXRJY29uKFwic3dpdGNoXCIpXG4gICAgICAgICAgICAgICAgICAgIC5zZXRUaXRsZShcIlN3aXRjaCBQYXJ0eVwiKVxuICAgICAgICAgICAgICAgICAgICAub25DbGljaygoZXZ0OiBNb3VzZUV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvKiBtZW51LmhpZGUoKTsgKi9cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhcnR5TWVudSA9IG5ldyBNZW51KCkuc2V0Tm9JY29uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHBhcnR5IG9mICRkYXRhLnBhcnRpZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJ0eU1lbnUuYWRkSXRlbSgoaXRlbSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLnNldFRpdGxlKHBhcnR5Lm5hbWUpLm9uQ2xpY2soKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhY2tlci5zZXRQYXJ0eShwYXJ0eS5uYW1lLCBwbHVnaW4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcnR5TWVudS5zaG93QXRNb3VzZUV2ZW50KGV2dCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgbWVudS5hZGRJdGVtKChpdGVtKSA9PiB7XG4gICAgICAgICAgICBpdGVtLnNldEljb24oR1JPVVApXG4gICAgICAgICAgICAgICAgLnNldFRpdGxlKFxuICAgICAgICAgICAgICAgICAgICBwbHVnaW4uZGF0YS5jb25kZW5zZVxuICAgICAgICAgICAgICAgICAgICAgICAgPyBcIkV4cGFuZCBDcmVhdHVyZXNcIlxuICAgICAgICAgICAgICAgICAgICAgICAgOiBcIkdyb3VwIENyZWF0dXJlc1wiXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIC5vbkNsaWNrKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcGx1Z2luLmRhdGEuY29uZGVuc2UgPSAhcGx1Z2luLmRhdGEuY29uZGVuc2U7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICAgICAgaXRlbS5zZXRJY29uKHBsdWdpbi5kYXRhLmNvbmRlbnNlID8gRVhQQU5EIDogR1JPVVApO1xuICAgICAgICAgICAgICAgICAgICBpdGVtLnNldFRpdGxlKFxuICAgICAgICAgICAgICAgICAgICAgICAgcGx1Z2luLmRhdGEuY29uZGVuc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IFwiRXhwYW5kIENyZWF0dXJlc1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBcIkdyb3VwIENyZWF0dXJlc1wiXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIG1lbnUuYWRkU2VwYXJhdG9yKCk7XG4gICAgICAgIG1lbnUuYWRkSXRlbSgoaXRlbSkgPT4ge1xuICAgICAgICAgICAgaXRlbS5zZXRJY29uKFNBVkUpXG4gICAgICAgICAgICAgICAgLnNldFRpdGxlKFwiU2F2ZSBFbmNvdW50ZXJcIilcbiAgICAgICAgICAgICAgICAub25DbGljaygoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoKFwic2F2ZVwiKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIG1lbnUuYWRkSXRlbSgoaXRlbSkgPT4ge1xuICAgICAgICAgICAgaXRlbS5zZXRJY29uKFwib3Blbi1lbHNld2hlcmUtZ2x5cGhcIilcbiAgICAgICAgICAgICAgICAuc2V0VGl0bGUoXCJMb2FkIEVuY291bnRlclwiKVxuICAgICAgICAgICAgICAgIC5vbkNsaWNrKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2goXCJsb2FkXCIpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKCRkYXRhLmxlYWZsZXRJbnRlZ3JhdGlvbikge1xuICAgICAgICAgICAgbWVudS5hZGRTZXBhcmF0b3IoKTtcbiAgICAgICAgICAgIG1lbnUuYWRkSXRlbSgoaXRlbSkgPT4ge1xuICAgICAgICAgICAgICAgIGl0ZW0uc2V0SWNvbihNQVApXG4gICAgICAgICAgICAgICAgICAgIC5zZXRUaXRsZShcIk9wZW4gTGVhZmxldCBNYXBcIilcbiAgICAgICAgICAgICAgICAgICAgLm9uQ2xpY2soKCkgPT4gZGlzcGF0Y2goXCJvcGVuLW1hcFwiKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBtZW51LnNob3dBdE1vdXNlRXZlbnQoZXZ0KTtcbiAgICB9O1xuXG4gICAgY29uc3QgbWVudUljb24gPSAobm9kZTogSFRNTEVsZW1lbnQpID0+IHtcbiAgICAgICAgbmV3IEV4dHJhQnV0dG9uQ29tcG9uZW50KG5vZGUpLnNldEljb24oXCJ2ZXJ0aWNhbC10aHJlZS1kb3RzXCIpO1xuICAgIH07XG4gICAgY29uc3QgcGxheWVyVmlldyA9IChub2RlOiBIVE1MRWxlbWVudCkgPT4ge1xuICAgICAgICBuZXcgRXh0cmFCdXR0b25Db21wb25lbnQobm9kZSkuc2V0SWNvbihcInZpZXdcIik7XG4gICAgfTtcbjwvc2NyaXB0PlxuXG48ZGl2IGNsYXNzPVwiYnV0dG9uc1wiPlxuICAgIDxkaXYgY2xhc3M9XCJzdGF0ZVwiPlxuICAgICAgICB7I2lmICRzdGF0ZX1cbiAgICAgICAgICAgIDxkaXYgdXNlOnN0b3BCdXR0b24gLz5cbiAgICAgICAgICAgIDxkaXYgdXNlOnByZXZCdXR0b24gLz5cbiAgICAgICAgICAgIDxkaXYgdXNlOm5leHRCdXR0b24gLz5cbiAgICAgICAgezplbHNlfVxuICAgICAgICAgICAgPGRpdiB1c2U6cGxheUJ1dHRvbiAvPlxuICAgICAgICB7L2lmfVxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJjbGVhblwiPlxuICAgICAgICB7I2lmIGRlc2t0b3B9XG4gICAgICAgICAgICA8IS0tIHN2ZWx0ZS1pZ25vcmUgYTExeS1jbGljay1ldmVudHMtaGF2ZS1rZXktZXZlbnRzIC0tPlxuICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgIHVzZTpwbGF5ZXJWaWV3XG4gICAgICAgICAgICAgICAgYXJpYS1sYWJlbD1cIk9wZW4gUGxheWVyIFZpZXdcIlxuICAgICAgICAgICAgICAgIG9uOmNsaWNrPXsoZXZ0KSA9PiBkaXNwYXRjaChcInBsYXllci12aWV3XCIpfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgey9pZn1cbiAgICAgICAgPCEtLSBzdmVsdGUtaWdub3JlIGExMXktY2xpY2stZXZlbnRzLWhhdmUta2V5LWV2ZW50cyAtLT5cbiAgICAgICAgPGRpdiB1c2U6bWVudUljb24gb246Y2xpY2s9eyhldnQpID0+IG9wZW4oZXZ0KX0gLz5cbiAgICA8L2Rpdj5cbjwvZGl2PlxuXG48c3R5bGU+XG4gICAgLmJ1dHRvbnMge1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gICAgICAgIHBhZGRpbmc6IDAgMCAwLjVyZW0gMDtcbiAgICB9XG4gICAgLnN0YXRlIHtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIH1cbiAgICAuY2xlYW4ge1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kO1xuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIH1cblxuICAgIC5zdGF0ZSA+ICo6bm90KDpsYXN0LWNoaWxkKSxcbiAgICAuY2xlYW4gPiAqOm5vdCg6bGFzdC1jaGlsZCkge1xuICAgICAgICBtYXJnaW4tcmlnaHQ6IDAuMjVyZW07XG4gICAgfVxuPC9zdHlsZT5cbiIsICI8c2NyaXB0IGxhbmc9XCJ0c1wiPlxuICAgIGltcG9ydCB7IHNldEljb24gfSBmcm9tIFwib2JzaWRpYW5cIjtcblxuICAgIGltcG9ydCBDcmVhdHVyZVRlbXBsYXRlIGZyb20gXCIuL0NyZWF0dXJlLnN2ZWx0ZVwiO1xuXG4gICAgaW1wb3J0IHsgQUMsIEhQLCBNRVRBX01PRElGSUVSIH0gZnJvbSBcInNyYy91dGlsc1wiO1xuICAgIGltcG9ydCB7IENyZWF0dXJlLCBnZXRJZCB9IGZyb20gXCJzcmMvdXRpbHMvY3JlYXR1cmVcIjtcbiAgICBpbXBvcnQgeyBjcmVhdGVFdmVudERpc3BhdGNoZXIgfSBmcm9tIFwic3ZlbHRlXCI7XG4gICAgaW1wb3J0IHsgZG5kem9uZSB9IGZyb20gXCJzdmVsdGUtZG5kLWFjdGlvblwiO1xuICAgIGltcG9ydCB7IGZsaXAgfSBmcm9tIFwic3ZlbHRlL2FuaW1hdGVcIjtcblxuICAgIGltcG9ydCB7IHRyYWNrZXIgfSBmcm9tIFwiLi4vLi4vc3RvcmVzL3RyYWNrZXJcIjtcbiAgICBjb25zdCB7IHN0YXRlLCBvcmRlcmVkIH0gPSB0cmFja2VyO1xuXG4gICAgJDogaXRlbXMgPSBbLi4uJG9yZGVyZWRdLm1hcCgoYykgPT4ge1xuICAgICAgICByZXR1cm4geyBjcmVhdHVyZTogYywgaWQ6IGdldElkKCkgfTtcbiAgICB9KTtcblxuICAgIGNvbnN0IGRpc3BhdGNoID0gY3JlYXRlRXZlbnREaXNwYXRjaGVyKCk7XG5cbiAgICBjb25zdCBocEljb24gPSAobm9kZTogSFRNTEVsZW1lbnQpID0+IHtcbiAgICAgICAgc2V0SWNvbihub2RlLCBIUCk7XG4gICAgfTtcbiAgICBjb25zdCBhY0ljb24gPSAobm9kZTogSFRNTEVsZW1lbnQpID0+IHtcbiAgICAgICAgc2V0SWNvbihub2RlLCBBQyk7XG4gICAgfTtcbiAgICBjb25zdCBmbGlwRHVyYXRpb25NcyA9IDMwMDtcbiAgICBmdW5jdGlvbiBoYW5kbGVEbmRDb25zaWRlcihcbiAgICAgICAgZTogQ3VzdG9tRXZlbnQ8R2VuZXJpY0RuZEV2ZW50PHsgY3JlYXR1cmU6IENyZWF0dXJlOyBpZDogc3RyaW5nIH0+PlxuICAgICkge1xuICAgICAgICBpdGVtcyA9IGUuZGV0YWlsLml0ZW1zO1xuICAgIH1cbiAgICBmdW5jdGlvbiBoYW5kbGVEbmRGaW5hbGl6ZShcbiAgICAgICAgZTogQ3VzdG9tRXZlbnQ8R2VuZXJpY0RuZEV2ZW50PHsgY3JlYXR1cmU6IENyZWF0dXJlOyBpZDogc3RyaW5nIH0+PlxuICAgICkge1xuICAgICAgICBpZiAoZS5kZXRhaWwuaXRlbXMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgbGV0IGRyb3BwZWQgPSBlLmRldGFpbC5pdGVtcy5maW5kKFxuICAgICAgICAgICAgICAgICh7IGlkIH0pID0+IGlkID09IGUuZGV0YWlsLmluZm8uaWRcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBjb25zdCBpbmRleCA9IGUuZGV0YWlsLml0ZW1zLmZpbmRJbmRleChcbiAgICAgICAgICAgICAgICAoYykgPT4gYy5pZCA9PSBlLmRldGFpbC5pbmZvLmlkXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgaWYgKGluZGV4ID09IGUuZGV0YWlsLml0ZW1zLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgICAgICBkcm9wcGVkLmNyZWF0dXJlLmluaXRpYXRpdmUgPVxuICAgICAgICAgICAgICAgICAgICBlLmRldGFpbC5pdGVtc1tpbmRleCAtIDFdLmNyZWF0dXJlLmluaXRpYXRpdmU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGRyb3BwZWQuY3JlYXR1cmUuaW5pdGlhdGl2ZSA9XG4gICAgICAgICAgICAgICAgICAgIGUuZGV0YWlsLml0ZW1zW2luZGV4ICsgMV0uY3JlYXR1cmUuaW5pdGlhdGl2ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpdGVtcyA9IGUuZGV0YWlsLml0ZW1zO1xuICAgICAgICAkdHJhY2tlciA9IFsuLi5pdGVtcy5tYXAoKHsgY3JlYXR1cmUgfSkgPT4gY3JlYXR1cmUpXTtcbiAgICB9XG48L3NjcmlwdD5cblxuPHRhYmxlIGNsYXNzPVwiaW5pdGlhdGl2ZS10cmFja2VyLXRhYmxlXCI+XG4gICAgeyNpZiAkb3JkZXJlZC5sZW5ndGh9XG4gICAgICAgIDx0aGVhZCBjbGFzcz1cInRyYWNrZXItdGFibGUtaGVhZGVyXCI+XG4gICAgICAgICAgICA8dGggc3R5bGU9XCJ3aWR0aDoxMCVcIiAvPlxuICAgICAgICAgICAgPHRoIGNsYXNzPVwibGVmdFwiIHN0eWxlPVwid2lkdGg6NTUlXCI+TmFtZTwvdGg+XG4gICAgICAgICAgICA8dGggc3R5bGU9XCJ3aWR0aDoxNSVcIiB1c2U6aHBJY29uIGNsYXNzPVwiY2VudGVyXCIgLz5cbiAgICAgICAgICAgIDx0aCBzdHlsZT1cIndpZHRoOjE1JVwiIHVzZTphY0ljb24gY2xhc3M9XCJjZW50ZXJcIiAvPlxuICAgICAgICAgICAgPHRoIHN0eWxlPVwid2lkdGg6NSVcIiAvPlxuICAgICAgICA8L3RoZWFkPlxuICAgICAgICA8dGJvZHlcbiAgICAgICAgICAgIHVzZTpkbmR6b25lPXt7XG4gICAgICAgICAgICAgICAgaXRlbXMsXG4gICAgICAgICAgICAgICAgZmxpcER1cmF0aW9uTXMsXG4gICAgICAgICAgICAgICAgZHJvcFRhcmdldFN0eWxlOiB7fSxcbiAgICAgICAgICAgICAgICBtb3JwaERpc2FibGVkOiB0cnVlXG4gICAgICAgICAgICB9fVxuICAgICAgICAgICAgb246Y29uc2lkZXI9e2hhbmRsZURuZENvbnNpZGVyfVxuICAgICAgICAgICAgb246ZmluYWxpemU9e2hhbmRsZURuZEZpbmFsaXplfVxuICAgICAgICA+XG4gICAgICAgICAgICB7I2VhY2ggaXRlbXMgYXMgeyBjcmVhdHVyZSwgaWQgfSAoaWQpfVxuICAgICAgICAgICAgICAgIDx0clxuICAgICAgICAgICAgICAgICAgICBjbGFzcz1cImRyYWdnYWJsZSBpbml0aWF0aXZlLXRyYWNrZXItY3JlYXR1cmVcIlxuICAgICAgICAgICAgICAgICAgICBjbGFzczpkaXNhYmxlZD17IWNyZWF0dXJlLmVuYWJsZWR9XG4gICAgICAgICAgICAgICAgICAgIGNsYXNzOmFjdGl2ZT17JHN0YXRlICYmIGNyZWF0dXJlLmFjdGl2ZX1cbiAgICAgICAgICAgICAgICAgICAgY2xhc3M6dmlld2luZz17Y3JlYXR1cmUudmlld2luZ31cbiAgICAgICAgICAgICAgICAgICAgYW5pbWF0ZTpmbGlwPXt7IGR1cmF0aW9uOiBmbGlwRHVyYXRpb25NcyB9fVxuICAgICAgICAgICAgICAgICAgICBkYXRhLWhwPXtjcmVhdHVyZS5ocH1cbiAgICAgICAgICAgICAgICAgICAgZGF0YS1ocC1tYXg9e2NyZWF0dXJlLm1heH1cbiAgICAgICAgICAgICAgICAgICAgZGF0YS1ocC1wZXJjZW50PXtNYXRoLnJvdW5kKFxuICAgICAgICAgICAgICAgICAgICAgICAgKChjcmVhdHVyZS5ocCA/PyAwKSAvIGNyZWF0dXJlLm1heCkgKiAxMDAgPz8gMFxuICAgICAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgICAgICBvbjpjbGljaz17KGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYWNrZXIuc2V0VXBkYXRlKGNyZWF0dXJlLCBlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICA8Q3JlYXR1cmVUZW1wbGF0ZSB7Y3JlYXR1cmV9IG9uOmhwIG9uOnRhZyBvbjplZGl0IG9uOm9wZW4tY29tYmF0YW50IC8+XG4gICAgICAgICAgICAgICAgPC90cj5cbiAgICAgICAgICAgIHsvZWFjaH1cbiAgICAgICAgPC90Ym9keT5cbiAgICB7OmVsc2V9XG4gICAgICAgIDxkaXYgY2xhc3M9XCJuby1jcmVhdHVyZXNcIj5cbiAgICAgICAgICAgIDxwPkFkZCBhIGNyZWF0dXJlIHRvIGdldCBzdGFydGVkITwvcD5cbiAgICAgICAgICAgIDxzbWFsbD5QbGF5ZXJzIG1heSBiZSBjcmVhdGVkIGluIHNldHRpbmdzLjwvc21hbGw+XG4gICAgICAgIDwvZGl2PlxuICAgIHsvaWZ9XG48L3RhYmxlPlxuXG48c3R5bGUgc2NvcGVkPlxuICAgIC5uby1jcmVhdHVyZXMge1xuICAgICAgICBtYXJnaW46IDFyZW07XG4gICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICB9XG4gICAgLmluaXRpYXRpdmUtdHJhY2tlci10YWJsZSB7XG4gICAgICAgIHBhZGRpbmc6IDAuNXJlbTtcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgZ2FwOiAwLjI1cmVtIDAuNXJlbTtcbiAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgIG1hcmdpbi1sZWZ0OiAwcmVtO1xuICAgICAgICB0YWJsZS1sYXlvdXQ6IGZpeGVkO1xuICAgICAgICBib3JkZXItY29sbGFwc2U6IHNlcGFyYXRlO1xuICAgICAgICBib3JkZXItc3BhY2luZzogMCAycHg7XG4gICAgfVxuXG4gICAgLmxlZnQge1xuICAgICAgICB0ZXh0LWFsaWduOiBsZWZ0O1xuICAgIH1cbiAgICAuY2VudGVyIHtcbiAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIH1cblxuICAgIC50cmFja2VyLXRhYmxlLWhlYWRlciB7XG4gICAgICAgIGZvbnQtd2VpZ2h0OiBib2xkZXI7XG4gICAgICAgIGRpc3BsYXk6IGNvbnRlbnRzO1xuICAgIH1cblxuICAgIC5pbml0aWF0aXZlLXRyYWNrZXItY3JlYXR1cmUge1xuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgfVxuICAgIC5pbml0aWF0aXZlLXRyYWNrZXItY3JlYXR1cmUuYWN0aXZlIHtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgwLCAwLCAwLCAwLjEpO1xuICAgIH1cbiAgICA6Z2xvYmFsKC50aGVtZS1kYXJrKSAuaW5pdGlhdGl2ZS10cmFja2VyLWNyZWF0dXJlLmFjdGl2ZSB7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4xKTtcbiAgICB9XG4gICAgLmluaXRpYXRpdmUtdHJhY2tlci1jcmVhdHVyZS5kaXNhYmxlZCA6Z2xvYmFsKCopIHtcbiAgICAgICAgY29sb3I6IHZhcigtLXRleHQtZmFpbnQpO1xuICAgIH1cbiAgICAuaW5pdGlhdGl2ZS10cmFja2VyLWNyZWF0dXJlIDpnbG9iYWwodGQpIHtcbiAgICAgICAgYm9yZGVyLXRvcDogMXB4IHNvbGlkIHRyYW5zcGFyZW50O1xuICAgICAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgdHJhbnNwYXJlbnQ7XG4gICAgfVxuICAgIC5pbml0aWF0aXZlLXRyYWNrZXItY3JlYXR1cmUgOmdsb2JhbCh0ZDpmaXJzdC1jaGlsZCkge1xuICAgICAgICBib3JkZXItbGVmdDogMXB4IHNvbGlkIHRyYW5zcGFyZW50O1xuICAgIH1cbiAgICAuaW5pdGlhdGl2ZS10cmFja2VyLWNyZWF0dXJlIDpnbG9iYWwodGQ6bGFzdC1jaGlsZCkge1xuICAgICAgICBib3JkZXItcmlnaHQ6IDFweCBzb2xpZCB0cmFuc3BhcmVudDtcbiAgICB9XG4gICAgLmluaXRpYXRpdmUtdHJhY2tlci1jcmVhdHVyZTpob3ZlciA6Z2xvYmFsKHRkKSxcbiAgICAuaW5pdGlhdGl2ZS10cmFja2VyLWNyZWF0dXJlLnZpZXdpbmcgOmdsb2JhbCh0ZCkge1xuICAgICAgICBib3JkZXItdG9wOiAxcHggc29saWQgdmFyKC0tYmFja2dyb3VuZC1tb2RpZmllci1ib3JkZXIpO1xuICAgICAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgdmFyKC0tYmFja2dyb3VuZC1tb2RpZmllci1ib3JkZXIpO1xuICAgIH1cbiAgICAuaW5pdGlhdGl2ZS10cmFja2VyLWNyZWF0dXJlOmhvdmVyIDpnbG9iYWwodGQ6Zmlyc3QtY2hpbGQpLFxuICAgIC5pbml0aWF0aXZlLXRyYWNrZXItY3JlYXR1cmUudmlld2luZyA6Z2xvYmFsKHRkOmZpcnN0LWNoaWxkKSB7XG4gICAgICAgIGJvcmRlci1sZWZ0OiAxcHggc29saWQgdmFyKC0tYmFja2dyb3VuZC1tb2RpZmllci1ib3JkZXIpO1xuICAgIH1cbiAgICAuaW5pdGlhdGl2ZS10cmFja2VyLWNyZWF0dXJlOmhvdmVyIDpnbG9iYWwodGQ6bGFzdC1jaGlsZCksXG4gICAgLmluaXRpYXRpdmUtdHJhY2tlci1jcmVhdHVyZS52aWV3aW5nIDpnbG9iYWwodGQ6bGFzdC1jaGlsZCkge1xuICAgICAgICBib3JkZXItcmlnaHQ6IDFweCBzb2xpZCB2YXIoLS1iYWNrZ3JvdW5kLW1vZGlmaWVyLWJvcmRlcik7XG4gICAgfVxuPC9zdHlsZT5cbiIsICI8c2NyaXB0IGxhbmc9XCJ0c1wiPlxuICAgIGltcG9ydCB7IE5vdGljZSB9IGZyb20gXCJvYnNpZGlhblwiO1xuXG4gICAgaW1wb3J0IHsgY3JlYXRlRXZlbnREaXNwYXRjaGVyIH0gZnJvbSBcInN2ZWx0ZVwiO1xuXG4gICAgY29uc3QgZGlzcGF0Y2ggPSBjcmVhdGVFdmVudERpc3BhdGNoZXIoKTtcblxuICAgIGV4cG9ydCBsZXQgaW5pdGlhdGl2ZTogbnVtYmVyO1xuXG4gICAgZXhwb3J0IGxldCBtb2RpZmllcjogbnVtYmVyO1xuPC9zY3JpcHQ+XG5cbjxkaXYgY2xhc3M9XCJ0cmVlLWl0ZW0tZmxhaXItb3V0ZXJcIj5cbiAgICB7I2tleSBpbml0aWF0aXZlfVxuICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgIGNsYXNzPVwiZWRpdGFibGUgaW5pdGlhdGl2ZSB0cmVlLWl0ZW0tZmxhaXJcIlxuICAgICAgICAgICAgYXJpYS1sYWJlbD17YCR7aW5pdGlhdGl2ZSAtIG1vZGlmaWVyfSArICR7bW9kaWZpZXJ9YH1cbiAgICAgICAgICAgIG9uOmNsaWNrPXtmdW5jdGlvbiAoZXZ0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3QoKTtcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgICBvbjpibHVyPXtmdW5jdGlvbiAoZXZ0KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLnZhbHVlO1xuICAgICAgICAgICAgICAgIGlmIChpc05hTihOdW1iZXIodmFsdWUpKSB8fCBOdW1iZXIodmFsdWUpIDwgMSkge1xuICAgICAgICAgICAgICAgICAgICBuZXcgTm90aWNlKFwiRW50ZXIgYSB2YWxpZCBpbml0aWF0aXZlLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy52YWx1ZSA9IGAke2luaXRpYXRpdmV9YDtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoaW5pdGlhdGl2ZSA9PSBOdW1iZXIodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZGlzcGF0Y2goXCJpbml0aWF0aXZlXCIsIE51bWJlcih2YWx1ZSkpO1xuICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIG9uOmtleWRvd249e2Z1bmN0aW9uIChldnQpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXZ0LmtleSA9PT0gXCJFbnRlclwiIHx8IGV2dC5rZXkgPT09IFwiVGFiXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYmx1cigpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghL14oXFxkKlxcLj9cXGQqfEJhY2tzcGFjZXxEZWxldGV8QXJyb3dcXHcrKSQvLnRlc3QoZXZ0LmtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9fVxuICAgICAgICAgICAgdmFsdWU9e2luaXRpYXRpdmV9XG4gICAgICAgIC8+XG4gICAgey9rZXl9XG48L2Rpdj5cblxuPHN0eWxlPlxuICAgIC50cmVlLWl0ZW0tZmxhaXItb3V0ZXI6OmFmdGVyIHtcbiAgICAgICAgY29udGVudDogXCJcIjtcbiAgICB9XG4gICAgLmluaXRpYXRpdmUge1xuICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgcGFkZGluZzogMDtcbiAgICAgICAgd2lkdGg6IDIwcHg7XG4gICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgICAgICAgdXNlci1zZWxlY3Q6IGFsbDtcbiAgICAgICAgYm9yZGVyOiAwO1xuICAgICAgICBjb2xvcjogaW5oZXJpdDtcbiAgICB9XG48L3N0eWxlPlxuIiwgIjxzY3JpcHQgbGFuZz1cInRzXCI+XG4gICAgaW1wb3J0IHsgRXh0cmFCdXR0b25Db21wb25lbnQsIE1lbnUgfSBmcm9tIFwib2JzaWRpYW5cIjtcbiAgICBpbXBvcnQgeyBESVNBQkxFLCBFTkFCTEUsIEhJRERFTiwgSFAsIE1BUE1BUktFUiwgUkVNT1ZFLCBUQUcgfSBmcm9tIFwic3JjL3V0aWxzXCI7XG4gICAgaW1wb3J0IHR5cGUgeyBDcmVhdHVyZSB9IGZyb20gXCJzcmMvdXRpbHMvY3JlYXR1cmVcIjtcbiAgICBpbXBvcnQgdHlwZSBUcmFja2VyVmlldyBmcm9tIFwic3JjL3RyYWNrZXIvdmlld1wiO1xuICAgIGltcG9ydCB7IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlciwgZ2V0Q29udGV4dCB9IGZyb20gXCJzdmVsdGVcIjtcbiAgICBpbXBvcnQgdHlwZSBJbml0aWF0aXZlVHJhY2tlciBmcm9tIFwic3JjL21haW5cIjtcbiAgICBpbXBvcnQgeyB0cmFja2VyIH0gZnJvbSBcInNyYy90cmFja2VyL3N0b3Jlcy90cmFja2VyXCI7XG5cbiAgICBjb25zdCBkaXNwYXRjaCA9IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlcigpO1xuXG4gICAgZXhwb3J0IGxldCBjcmVhdHVyZTogQ3JlYXR1cmU7XG5cbiAgICBjb25zdCBwbHVnaW4gPSBnZXRDb250ZXh0PEluaXRpYXRpdmVUcmFja2VyPihcInBsdWdpblwiKTtcblxuICAgIGNvbnN0IGhhbWJ1cmdlckljb24gPSAobm9kZTogSFRNTEVsZW1lbnQpID0+IHtcbiAgICAgICAgY29uc3QgaGFtYnVyZ2VyID0gbmV3IEV4dHJhQnV0dG9uQ29tcG9uZW50KG5vZGUpXG4gICAgICAgICAgICAuc2V0SWNvbihcInZlcnRpY2FsLXRocmVlLWRvdHNcIilcbiAgICAgICAgICAgIC5zZXRUb29sdGlwKFwiQWN0aW9uc1wiKTtcbiAgICAgICAgaGFtYnVyZ2VyLmV4dHJhU2V0dGluZ3NFbC5vbmNsaWNrID0gKGV2dCkgPT4ge1xuICAgICAgICAgICAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgY29uc3QgbWVudSA9IG5ldyBNZW51KCk7XG4gICAgICAgICAgICBtZW51LmFkZEl0ZW0oKGl0ZW0pID0+IHtcbiAgICAgICAgICAgICAgICBpdGVtLnNldEljb24oSFApXG4gICAgICAgICAgICAgICAgICAgIC5zZXRUaXRsZShcIlNldCBIZWFsdGgvU3RhdHVzXCIpXG4gICAgICAgICAgICAgICAgICAgIC5vbkNsaWNrKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoKFwiaHBcIiwgeyBjcmVhdHVyZSB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIG1lbnUuYWRkSXRlbSgoaXRlbSkgPT4ge1xuICAgICAgICAgICAgICAgIGl0ZW0uc2V0SWNvbihcInBlbmNpbFwiKVxuICAgICAgICAgICAgICAgICAgICAuc2V0VGl0bGUoXCJFZGl0XCIpXG4gICAgICAgICAgICAgICAgICAgIC5vbkNsaWNrKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoKFwiZWRpdFwiLCBjcmVhdHVyZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoY3JlYXR1cmUuaGlkZGVuKSB7XG4gICAgICAgICAgICAgICAgbWVudS5hZGRJdGVtKChpdGVtKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGl0ZW0uc2V0SWNvbihcImV5ZVwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnNldFRpdGxlKFwiU2hvd1wiKVxuICAgICAgICAgICAgICAgICAgICAgICAgLm9uQ2xpY2soKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYWNrZXIudXBkYXRlQ3JlYXR1cmVzKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXR1cmUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5nZTogeyBoaWRkZW46IGZhbHNlIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBtZW51LmFkZEl0ZW0oKGl0ZW0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaXRlbS5zZXRJY29uKEhJRERFTilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRUaXRsZShcIkhpZGVcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5vbkNsaWNrKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFja2VyLnVwZGF0ZUNyZWF0dXJlcyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0dXJlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFuZ2U6IHsgaGlkZGVuOiB0cnVlIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNyZWF0dXJlLmVuYWJsZWQpIHtcbiAgICAgICAgICAgICAgICBtZW51LmFkZEl0ZW0oKGl0ZW0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaXRlbS5zZXRJY29uKERJU0FCTEUpXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2V0VGl0bGUoXCJEaXNhYmxlXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAub25DbGljaygoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhY2tlci51cGRhdGVDcmVhdHVyZXMoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcmVhdHVyZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hhbmdlOiB7IGVuYWJsZWQ6IGZhbHNlIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBtZW51LmFkZEl0ZW0oKGl0ZW0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaXRlbS5zZXRJY29uKEVOQUJMRSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRUaXRsZShcIkVuYWJsZVwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgLm9uQ2xpY2soKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYWNrZXIudXBkYXRlQ3JlYXR1cmVzKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXR1cmUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5nZTogeyBlbmFibGVkOiB0cnVlIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHBsdWdpbi5kYXRhLmxlYWZsZXRJbnRlZ3JhdGlvbikge1xuICAgICAgICAgICAgICAgIG1lbnUuYWRkSXRlbSgoaXRlbSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpdGVtLnNldEljb24oTUFQTUFSS0VSKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnNldFRpdGxlKFwiQ2hhbmdlIE1hcmtlclwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgLm9uQ2xpY2soKGV2dDogTW91c2VFdmVudCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1hcmtlck1lbnUgPSBuZXcgTWVudSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmtlck1lbnUuc2V0Tm9JY29uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgbWFya2VyIG9mIHBsdWdpbi5sZWFmbGV0Lm1hcmtlckljb25zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmtlck1lbnUuYWRkSXRlbSgoaXRlbSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5zZXRUaXRsZShtYXJrZXIudHlwZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLm9uQ2xpY2soKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYWNrZXIudXBkYXRlQ3JlYXR1cmVzKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXR1cmUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5nZTogeyBtYXJrZXI6IG1hcmtlci50eXBlIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFya2VyTWVudS5zaG93QXRNb3VzZUV2ZW50KGV2dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG1lbnUuYWRkSXRlbSgoaXRlbSkgPT4ge1xuICAgICAgICAgICAgICAgIGl0ZW0uc2V0SWNvbihSRU1PVkUpXG4gICAgICAgICAgICAgICAgICAgIC5zZXRUaXRsZShcIlJlbW92ZVwiKVxuICAgICAgICAgICAgICAgICAgICAub25DbGljaygoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFja2VyLnJlbW92ZShjcmVhdHVyZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBtZW51LnNob3dBdFBvc2l0aW9uKGV2dCk7XG4gICAgICAgIH07XG4gICAgfTtcbjwvc2NyaXB0PlxuXG48ZGl2IGNsYXNzPVwiY29udHJvbHNcIj5cbiAgICA8ZGl2IGNsYXNzPVwiYWRkLWJ1dHRvbiBpY29uXCIgdXNlOmhhbWJ1cmdlckljb24gLz5cbjwvZGl2PlxuXG48c3R5bGU+XG4gICAgLmNvbnRyb2xzIHtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcbiAgICB9XG4gICAgLmljb24gOmdsb2JhbCguY2xpY2thYmxlLWljb24pIHtcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiAwO1xuICAgIH1cbjwvc3R5bGU+XG4iLCAiPHNjcmlwdCBsYW5nPVwidHNcIj5cbiAgICBpbXBvcnQgeyBFeHRyYUJ1dHRvbkNvbXBvbmVudCB9IGZyb20gXCJvYnNpZGlhblwiO1xuICAgIGltcG9ydCB7IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlciB9IGZyb20gXCJzdmVsdGVcIjtcbiAgICBjb25zdCBkaXNwYXRjaCA9IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlcigpO1xuXG4gICAgaW1wb3J0IHR5cGUgeyBDb25kaXRpb24gfSBmcm9tIFwiQHR5cGVzXCI7XG5cbiAgICBleHBvcnQgbGV0IHN0YXR1czogQ29uZGl0aW9uO1xuXG4gICAgY29uc3QgZGVsZXRlSWNvbiA9IChub2RlOiBIVE1MRWxlbWVudCkgPT4ge1xuICAgICAgICBuZXcgRXh0cmFCdXR0b25Db21wb25lbnQobm9kZSkuc2V0SWNvbihcImNyb3NzLWluLWJveFwiKTtcbiAgICB9O1xuPC9zY3JpcHQ+XG5cbjwhLS0gc3ZlbHRlLWlnbm9yZSBhMTF5LXVua25vd24tYXJpYS1hdHRyaWJ1dGUgLS0+XG48ZGl2XG4gICAgYXJpYS1sYWJlbC1jbGFzc2VzPVwiaW5pdGlhdGl2ZS10cmFja2VyLWNvbmRpdGlvbi10b29sdGlwXCJcbiAgICBjbGFzcz1cInRhZ1wiXG4gICAgYXJpYS1sYWJlbD17c3RhdHVzLmRlc2NyaXB0aW9uPy5sZW5ndGggPyBzdGF0dXMuZGVzY3JpcHRpb24gOiBudWxsfVxuPlxuICAgIDxzcGFuPntzdGF0dXMubmFtZX08L3NwYW4+XG4gICAgPGRpdiB1c2U6ZGVsZXRlSWNvbiBvbjpjbGljaz17KCkgPT4gZGlzcGF0Y2goXCJyZW1vdmVcIil9IC8+XG48L2Rpdj5cblxuPHN0eWxlPlxuICAgIC50YWcge1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICBnYXA6IDAuMTI1cmVtO1xuICAgICAgICBjb2xvcjogdmFyKC0tdGV4dC1tdXRlZCk7XG4gICAgICAgIGZvbnQtc2l6ZTogc21hbGw7XG4gICAgICAgIHdpZHRoOiBmaXQtY29udGVudDtcbiAgICAgICAgYm9yZGVyLXJhZGl1czogMC4yNXJlbTtcbiAgICB9XG4gICAgLnRhZyA6Z2xvYmFsKC5jbGlja2FibGUtaWNvbikge1xuICAgICAgICBtYXJnaW46IDA7XG4gICAgfVxuPC9zdHlsZT5cbiIsICI8c2NyaXB0IGxhbmc9XCJ0c1wiPlxuICAgIGltcG9ydCB7IERFRkFVTFRfVU5ERUZJTkVELCBISURERU4gfSBmcm9tIFwic3JjL3V0aWxzXCI7XG4gICAgaW1wb3J0IHR5cGUgeyBDcmVhdHVyZSB9IGZyb20gXCJzcmMvdXRpbHMvY3JlYXR1cmVcIjtcbiAgICBpbXBvcnQgSW5pdGlhdGl2ZSBmcm9tIFwiLi9Jbml0aWF0aXZlLnN2ZWx0ZVwiO1xuICAgIGltcG9ydCBDcmVhdHVyZUNvbnRyb2xzIGZyb20gXCIuL0NyZWF0dXJlQ29udHJvbHMuc3ZlbHRlXCI7XG4gICAgaW1wb3J0IFN0YXR1cyBmcm9tIFwiLi9TdGF0dXMuc3ZlbHRlXCI7XG4gICAgaW1wb3J0IHsgc2V0SWNvbiB9IGZyb20gXCJvYnNpZGlhblwiO1xuICAgIGltcG9ydCB7IHRyYWNrZXIgfSBmcm9tIFwiLi4vLi4vc3RvcmVzL3RyYWNrZXJcIjtcbiAgICBpbXBvcnQgeyBjcmVhdGVFdmVudERpc3BhdGNoZXIgfSBmcm9tIFwic3ZlbHRlXCI7XG5cbiAgICBjb25zdCBkaXNwYXRjaCA9IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlcigpO1xuXG4gICAgZXhwb3J0IGxldCBjcmVhdHVyZTogQ3JlYXR1cmU7XG4gICAgJDogc3RhdHVzZXMgPSBjcmVhdHVyZS5zdGF0dXM7XG5cbiAgICBjb25zdCBuYW1lID0gKCkgPT4gY3JlYXR1cmUuZ2V0TmFtZSgpO1xuICAgIGNvbnN0IGhpZGRlbkljb24gPSAoZGl2OiBIVE1MRWxlbWVudCkgPT4ge1xuICAgICAgICBzZXRJY29uKGRpdiwgSElEREVOKTtcbiAgICB9O1xuXG4gICAgY29uc3QgdHJ5SG92ZXIgPSAoZXZ0OiBNb3VzZUV2ZW50KSA9PiB7XG4gICAgICAgIGlmIChjcmVhdHVyZVtcInN0YXRibG9jay1saW5rXCJdKSB7XG4gICAgICAgICAgICBsZXQgbGluayA9IGNyZWF0dXJlW1wic3RhdGJsb2NrLWxpbmtcIl07XG4gICAgICAgICAgICBpZiAoL1xcWy4rXFxdXFwoLitcXCkvLnRlc3QobGluaykpIHtcbiAgICAgICAgICAgICAgICAvL21kXG4gICAgICAgICAgICAgICAgWywgbGlua10gPSBsaW5rLm1hdGNoKC9cXFsuKz9cXF1cXCgoLis/KVxcKS8pO1xuICAgICAgICAgICAgfSBlbHNlIGlmICgvXFxbXFxbLitcXF1cXF0vLnRlc3QobGluaykpIHtcbiAgICAgICAgICAgICAgICAvL3dpa2lcbiAgICAgICAgICAgICAgICBbLCBsaW5rXSA9IGxpbmsubWF0Y2goL1xcW1xcWyguKz8pKD86XFx8Lis/KT9cXF1cXF0vKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYXBwLndvcmtzcGFjZS50cmlnZ2VyKFxuICAgICAgICAgICAgICAgIFwibGluay1ob3ZlclwiLFxuICAgICAgICAgICAgICAgIHt9LCAvL2hvdmVyIHBvcG92ZXIsIGJ1dCBkb24ndCBuZWVkXG4gICAgICAgICAgICAgICAgZXZ0LnRhcmdldCwgLy90YXJnZXRFbFxuICAgICAgICAgICAgICAgIGxpbmssIC8vbGlua1RleHRcbiAgICAgICAgICAgICAgICBcImluaXRpYXRpdmUtdHJhY2tlciBcIiAvL3NvdXJjZVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH07XG48L3NjcmlwdD5cblxuPCEtLSBzdmVsdGUtaWdub3JlIGExMXktY2xpY2stZXZlbnRzLWhhdmUta2V5LWV2ZW50cyAtLT5cbjx0ZCBjbGFzcz1cImluaXRpYXRpdmUtY29udGFpbmVyXCIgb246Y2xpY2s9eyhlKSA9PiBlLnN0b3BQcm9wYWdhdGlvbigpfT5cbiAgICA8SW5pdGlhdGl2ZVxuICAgICAgICBpbml0aWF0aXZlPXtjcmVhdHVyZS5pbml0aWF0aXZlfVxuICAgICAgICBtb2RpZmllcj17Y3JlYXR1cmUubW9kaWZpZXJ9XG4gICAgICAgIG9uOmNsaWNrPXsoZSkgPT4gZS5zdG9wUHJvcGFnYXRpb24oKX1cbiAgICAgICAgb246aW5pdGlhdGl2ZT17KGUpID0+IHtcbiAgICAgICAgICAgIHRyYWNrZXIudXBkYXRlQ3JlYXR1cmVzKHtcbiAgICAgICAgICAgICAgICBjcmVhdHVyZSxcbiAgICAgICAgICAgICAgICBjaGFuZ2U6IHsgaW5pdGlhdGl2ZTogTnVtYmVyKGUuZGV0YWlsKSB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfX1cbiAgICAvPlxuPC90ZD5cbjx0ZCBjbGFzcz1cIm5hbWUtY29udGFpbmVyXCI+XG4gICAgPCEtLSBzdmVsdGUtaWdub3JlIGExMXktY2xpY2stZXZlbnRzLWhhdmUta2V5LWV2ZW50cyAtLT5cbiAgICA8ZGl2XG4gICAgICAgIGNsYXNzPVwibmFtZS1ob2xkZXJcIlxuICAgICAgICBvbjpjbGlja3xzdG9wUHJvcGFnYXRpb249eyhldnQpID0+IHtcbiAgICAgICAgICAgIGRpc3BhdGNoKFwib3Blbi1jb21iYXRhbnRcIiwgY3JlYXR1cmUpO1xuICAgICAgICB9fVxuICAgICAgICBvbjptb3VzZWVudGVyPXt0cnlIb3Zlcn1cbiAgICA+XG4gICAgICAgIHsjaWYgY3JlYXR1cmUuaGlkZGVufVxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNlbnRlcmVkLWljb25cIiB1c2U6aGlkZGVuSWNvbiAvPlxuICAgICAgICB7L2lmfVxuICAgICAgICB7I2lmIGNyZWF0dXJlLnBsYXllcn1cbiAgICAgICAgICAgIDxzdHJvbmcgY2xhc3M9XCJuYW1lIHBsYXllclwiPntjcmVhdHVyZS5uYW1lfTwvc3Ryb25nPlxuICAgICAgICB7OmVsc2V9XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cIm5hbWVcIj57bmFtZSgpfTwvc3Bhbj5cbiAgICAgICAgey9pZn1cbiAgICA8L2Rpdj5cbiAgICA8IS0tIHN2ZWx0ZS1pZ25vcmUgYTExeS1jbGljay1ldmVudHMtaGF2ZS1rZXktZXZlbnRzIC0tPlxuICAgIDxkaXYgY2xhc3M9XCJzdGF0dXNlc1wiIG9uOmNsaWNrPXsoZSkgPT4gZS5zdG9wUHJvcGFnYXRpb24oKX0+XG4gICAgICAgIHsjaWYgc3RhdHVzZXMuc2l6ZX1cbiAgICAgICAgICAgIHsjZWFjaCBbLi4uc3RhdHVzZXNdIGFzIHN0YXR1c31cbiAgICAgICAgICAgICAgICA8U3RhdHVzXG4gICAgICAgICAgICAgICAgICAgIHtzdGF0dXN9XG4gICAgICAgICAgICAgICAgICAgIG9uOnJlbW92ZT17KCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJhY2tlci51cGRhdGVDcmVhdHVyZXMoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0dXJlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5nZTogeyBzdGF0dXM6IFtzdGF0dXNdIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICB7L2VhY2h9XG4gICAgICAgIHsvaWZ9XG4gICAgPC9kaXY+XG48L3RkPlxuXG48dGQgY2xhc3M9XCJjZW50ZXIgaHAtY29udGFpbmVyIGNyZWF0dXJlLWFkZGVyXCI+XG4gICAgPGRpdj5cbiAgICAgICAge0BodG1sIGNyZWF0dXJlLmhwRGlzcGxheX1cbiAgICA8L2Rpdj5cbjwvdGQ+XG5cbjx0ZCBjbGFzcz1cImNlbnRlciBhYy1jb250YWluZXIgY3JlYXR1cmUtYWRkZXJcIlxuICAgID57Y3JlYXR1cmUuYWMgPz8gREVGQVVMVF9VTkRFRklORUR9PC90ZFxuPlxuXG48dGQgY2xhc3M9XCJjb250cm9scy1jb250YWluZXJcIj5cbiAgICA8Q3JlYXR1cmVDb250cm9sc1xuICAgICAgICBvbjpjbGljaz17KGUpID0+IGUuc3RvcFByb3BhZ2F0aW9uKCl9XG4gICAgICAgIG9uOnRhZ1xuICAgICAgICBvbjplZGl0XG4gICAgICAgIHtjcmVhdHVyZX1cbiAgICAvPlxuPC90ZD5cblxuPHN0eWxlIHNjb3BlZD5cbiAgICAubmFtZS1ob2xkZXIge1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICBnYXA6IDAuMjVyZW07XG4gICAgICAgIGZvbnQtc2l6ZTogc21hbGw7XG4gICAgfVxuICAgIC5jZW50ZXJlZC1pY29uIHtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICB9XG4gICAgLm5hbWUge1xuICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgdGV4dC1hbGlnbjogbGVmdDtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogaW5oZXJpdDtcbiAgICAgICAgYm9yZGVyOiAwO1xuICAgICAgICBwYWRkaW5nOiAwO1xuICAgICAgICBoZWlnaHQ6IHVuc2V0O1xuICAgICAgICB3b3JkLWJyZWFrOiBrZWVwLWFsbDtcbiAgICB9XG4gICAgLmNlbnRlciB7XG4gICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICB9XG4gICAgLmNyZWF0dXJlLWFkZGVyIHtcbiAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgIH1cblxuICAgIC5zdGF0dXNlcyB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGZsZXgtZmxvdzogcm93IHdyYXA7XG4gICAgICAgIGNvbHVtbi1nYXA6IDAuMjVyZW07XG4gICAgfVxuXG4gICAgLmluaXRpYXRpdmUtY29udGFpbmVyIHtcbiAgICAgICAgYm9yZGVyLXRvcC1sZWZ0LXJhZGl1czogMC4yNXJlbTtcbiAgICAgICAgYm9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czogMC4yNXJlbTtcbiAgICB9XG4gICAgLmNvbnRyb2xzLWNvbnRhaW5lciB7XG4gICAgICAgIGJvcmRlci10b3AtcmlnaHQtcmFkaXVzOiAwLjI1cmVtO1xuICAgICAgICBib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czogMC4yNXJlbTtcbiAgICB9XG48L3N0eWxlPlxuIiwgImZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkge1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7XG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7XG4gICAgZW51bWVyYWJsZU9ubHkgJiYgKHN5bWJvbHMgPSBzeW1ib2xzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTtcbiAgICB9KSksIGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTtcbiAgfVxuICByZXR1cm4ga2V5cztcbn1cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQyKHRhcmdldCkge1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzb3VyY2UgPSBudWxsICE9IGFyZ3VtZW50c1tpXSA/IGFyZ3VtZW50c1tpXSA6IHt9O1xuICAgIGkgJSAyID8gb3duS2V5cyhPYmplY3Qoc291cmNlKSwgITApLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7XG4gICAgfSkgOiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSkgOiBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpO1xuICAgIH0pO1xuICB9XG4gIHJldHVybiB0YXJnZXQ7XG59XG5mdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7XG5cbiAgcmV0dXJuIF90eXBlb2YgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBcInN5bWJvbFwiID09IHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPyBmdW5jdGlvbiAob2JqKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBvYmo7XG4gIH0gOiBmdW5jdGlvbiAob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajtcbiAgfSwgX3R5cGVvZihvYmopO1xufVxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuICByZXR1cm4gb2JqO1xufVxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcbiAgdmFyIHRhcmdldCA9IHt9O1xuICB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gIHZhciBrZXksIGk7XG4gIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0gc291cmNlS2V5c1tpXTtcbiAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gIH1cbiAgcmV0dXJuIHRhcmdldDtcbn1cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCk7XG4gIHZhciBrZXksIGk7XG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgdmFyIHNvdXJjZVN5bWJvbEtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSk7XG4gICAgZm9yIChpID0gMDsgaSA8IHNvdXJjZVN5bWJvbEtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGtleSA9IHNvdXJjZVN5bWJvbEtleXNbaV07XG4gICAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoc291cmNlLCBrZXkpKSBjb250aW51ZTtcbiAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgfVxuICB9XG4gIHJldHVybiB0YXJnZXQ7XG59XG5mdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHtcbiAgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTtcbn1cbmZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHtcbiAgcmV0dXJuIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBfbm9uSXRlcmFibGVTcHJlYWQoKTtcbn1cbmZ1bmN0aW9uIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KGFycik7XG59XG5mdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7XG59XG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHtcbiAgaWYgKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgaXRlcltTeW1ib2wuaXRlcmF0b3JdICE9IG51bGwgfHwgaXRlcltcIkBAaXRlcmF0b3JcIl0gIT0gbnVsbCkgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7XG59XG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB7XG4gIHZhciBfaSA9IGFyciA9PSBudWxsID8gbnVsbCA6IHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgYXJyW1N5bWJvbC5pdGVyYXRvcl0gfHwgYXJyW1wiQEBpdGVyYXRvclwiXTtcbiAgaWYgKF9pID09IG51bGwpIHJldHVybjtcbiAgdmFyIF9hcnIgPSBbXTtcbiAgdmFyIF9uID0gdHJ1ZTtcbiAgdmFyIF9kID0gZmFsc2U7XG4gIHZhciBfcywgX2U7XG4gIHRyeSB7XG4gICAgZm9yIChfaSA9IF9pLmNhbGwoYXJyKTsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkge1xuICAgICAgX2Fyci5wdXNoKF9zLnZhbHVlKTtcbiAgICAgIGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhaztcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIF9kID0gdHJ1ZTtcbiAgICBfZSA9IGVycjtcbiAgfSBmaW5hbGx5IHtcbiAgICB0cnkge1xuICAgICAgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSAhPSBudWxsKSBfaVtcInJldHVyblwiXSgpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpZiAoX2QpIHRocm93IF9lO1xuICAgIH1cbiAgfVxuICByZXR1cm4gX2Fycjtcbn1cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHtcbiAgaWYgKCFvKSByZXR1cm47XG4gIGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7XG4gIHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTtcbiAgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTtcbiAgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7XG4gIGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcbn1cbmZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KGFyciwgbGVuKSB7XG4gIGlmIChsZW4gPT0gbnVsbCB8fCBsZW4gPiBhcnIubGVuZ3RoKSBsZW4gPSBhcnIubGVuZ3RoO1xuICBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIGFycjJbaV0gPSBhcnJbaV07XG4gIHJldHVybiBhcnIyO1xufVxuZnVuY3Rpb24gX25vbkl0ZXJhYmxlU3ByZWFkKCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIHNwcmVhZCBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTtcbn1cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7XG59XG5mdW5jdGlvbiBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihvLCBhbGxvd0FycmF5TGlrZSkge1xuICB2YXIgaXQgPSB0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXSB8fCBvW1wiQEBpdGVyYXRvclwiXTtcbiAgaWYgKCFpdCkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KG8pIHx8IChpdCA9IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvKSkgfHwgYWxsb3dBcnJheUxpa2UgJiYgbyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHtcbiAgICAgIGlmIChpdCkgbyA9IGl0O1xuICAgICAgdmFyIGkgPSAwO1xuICAgICAgdmFyIEYgPSBmdW5jdGlvbiAoKSB7fTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHM6IEYsXG4gICAgICAgIG46IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAoaSA+PSBvLmxlbmd0aCkgcmV0dXJuIHtcbiAgICAgICAgICAgIGRvbmU6IHRydWVcbiAgICAgICAgICB9O1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkb25lOiBmYWxzZSxcbiAgICAgICAgICAgIHZhbHVlOiBvW2krK11cbiAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICBlOiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH0sXG4gICAgICAgIGY6IEZcbiAgICAgIH07XG4gICAgfVxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gaXRlcmF0ZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTtcbiAgfVxuICB2YXIgbm9ybWFsQ29tcGxldGlvbiA9IHRydWUsXG4gICAgZGlkRXJyID0gZmFsc2UsXG4gICAgZXJyO1xuICByZXR1cm4ge1xuICAgIHM6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGl0ID0gaXQuY2FsbChvKTtcbiAgICB9LFxuICAgIG46IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBzdGVwID0gaXQubmV4dCgpO1xuICAgICAgbm9ybWFsQ29tcGxldGlvbiA9IHN0ZXAuZG9uZTtcbiAgICAgIHJldHVybiBzdGVwO1xuICAgIH0sXG4gICAgZTogZnVuY3Rpb24gKGUpIHtcbiAgICAgIGRpZEVyciA9IHRydWU7XG4gICAgICBlcnIgPSBlO1xuICAgIH0sXG4gICAgZjogZnVuY3Rpb24gKCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKCFub3JtYWxDb21wbGV0aW9uICYmIGl0LnJldHVybiAhPSBudWxsKSBpdC5yZXR1cm4oKTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIGlmIChkaWRFcnIpIHRocm93IGVycjtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59XG5cbi8vIGV4dGVybmFsIGV2ZW50c1xudmFyIEZJTkFMSVpFX0VWRU5UX05BTUUgPSBcImZpbmFsaXplXCI7XG52YXIgQ09OU0lERVJfRVZFTlRfTkFNRSA9IFwiY29uc2lkZXJcIjtcblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBJbmZvXG4gKiBAcHJvcGVydHkge3N0cmluZ30gdHJpZ2dlclxuICogQHByb3BlcnR5IHtzdHJpbmd9IGlkXG4gKiBAcHJvcGVydHkge3N0cmluZ30gc291cmNlXG4gKiBAcGFyYW0ge05vZGV9IGVsXG4gKiBAcGFyYW0ge0FycmF5fSBpdGVtc1xuICogQHBhcmFtIHtJbmZvfSBpbmZvXG4gKi9cbmZ1bmN0aW9uIGRpc3BhdGNoRmluYWxpemVFdmVudChlbCwgaXRlbXMsIGluZm8pIHtcbiAgZWwuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoRklOQUxJWkVfRVZFTlRfTkFNRSwge1xuICAgIGRldGFpbDoge1xuICAgICAgaXRlbXM6IGl0ZW1zLFxuICAgICAgaW5mbzogaW5mb1xuICAgIH1cbiAgfSkpO1xufVxuXG4vKipcbiAqIERpc3BhdGNoZXMgYSBjb25zaWRlciBldmVudFxuICogQHBhcmFtIHtOb2RlfSBlbFxuICogQHBhcmFtIHtBcnJheX0gaXRlbXNcbiAqIEBwYXJhbSB7SW5mb30gaW5mb1xuICovXG5mdW5jdGlvbiBkaXNwYXRjaENvbnNpZGVyRXZlbnQoZWwsIGl0ZW1zLCBpbmZvKSB7XG4gIGVsLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KENPTlNJREVSX0VWRU5UX05BTUUsIHtcbiAgICBkZXRhaWw6IHtcbiAgICAgIGl0ZW1zOiBpdGVtcyxcbiAgICAgIGluZm86IGluZm9cbiAgICB9XG4gIH0pKTtcbn1cblxuLy8gaW50ZXJuYWwgZXZlbnRzXG52YXIgRFJBR0dFRF9FTlRFUkVEX0VWRU5UX05BTUUgPSBcImRyYWdnZWRFbnRlcmVkXCI7XG52YXIgRFJBR0dFRF9MRUZUX0VWRU5UX05BTUUgPSBcImRyYWdnZWRMZWZ0XCI7XG52YXIgRFJBR0dFRF9PVkVSX0lOREVYX0VWRU5UX05BTUUgPSBcImRyYWdnZWRPdmVySW5kZXhcIjtcbnZhciBEUkFHR0VEX0xFRlRfRE9DVU1FTlRfRVZFTlRfTkFNRSA9IFwiZHJhZ2dlZExlZnREb2N1bWVudFwiO1xudmFyIERSQUdHRURfTEVGVF9UWVBFUyA9IHtcbiAgTEVGVF9GT1JfQU5PVEhFUjogXCJsZWZ0Rm9yQW5vdGhlclwiLFxuICBPVVRTSURFX09GX0FOWTogXCJvdXRzaWRlT2ZBbnlcIlxufTtcbmZ1bmN0aW9uIGRpc3BhdGNoRHJhZ2dlZEVsZW1lbnRFbnRlcmVkQ29udGFpbmVyKGNvbnRhaW5lckVsLCBpbmRleE9iaiwgZHJhZ2dlZEVsKSB7XG4gIGNvbnRhaW5lckVsLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KERSQUdHRURfRU5URVJFRF9FVkVOVF9OQU1FLCB7XG4gICAgZGV0YWlsOiB7XG4gICAgICBpbmRleE9iajogaW5kZXhPYmosXG4gICAgICBkcmFnZ2VkRWw6IGRyYWdnZWRFbFxuICAgIH1cbiAgfSkpO1xufVxuXG4vKipcbiAqIEBwYXJhbSBjb250YWluZXJFbCAtIHRoZSBkcm9wem9uZSB0aGUgZWxlbWVudCBsZWZ0XG4gKiBAcGFyYW0gZHJhZ2dlZEVsIC0gdGhlIGRyYWdnZWQgZWxlbWVudFxuICogQHBhcmFtIHRoZU90aGVyRHogLSB0aGUgbmV3IGRyb3B6b25lIHRoZSBlbGVtZW50IGVudGVyZWRcbiAqL1xuZnVuY3Rpb24gZGlzcGF0Y2hEcmFnZ2VkRWxlbWVudExlZnRDb250YWluZXJGb3JBbm90aGVyKGNvbnRhaW5lckVsLCBkcmFnZ2VkRWwsIHRoZU90aGVyRHopIHtcbiAgY29udGFpbmVyRWwuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoRFJBR0dFRF9MRUZUX0VWRU5UX05BTUUsIHtcbiAgICBkZXRhaWw6IHtcbiAgICAgIGRyYWdnZWRFbDogZHJhZ2dlZEVsLFxuICAgICAgdHlwZTogRFJBR0dFRF9MRUZUX1RZUEVTLkxFRlRfRk9SX0FOT1RIRVIsXG4gICAgICB0aGVPdGhlckR6OiB0aGVPdGhlckR6XG4gICAgfVxuICB9KSk7XG59XG5mdW5jdGlvbiBkaXNwYXRjaERyYWdnZWRFbGVtZW50TGVmdENvbnRhaW5lckZvck5vbmUoY29udGFpbmVyRWwsIGRyYWdnZWRFbCkge1xuICBjb250YWluZXJFbC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudChEUkFHR0VEX0xFRlRfRVZFTlRfTkFNRSwge1xuICAgIGRldGFpbDoge1xuICAgICAgZHJhZ2dlZEVsOiBkcmFnZ2VkRWwsXG4gICAgICB0eXBlOiBEUkFHR0VEX0xFRlRfVFlQRVMuT1VUU0lERV9PRl9BTllcbiAgICB9XG4gIH0pKTtcbn1cbmZ1bmN0aW9uIGRpc3BhdGNoRHJhZ2dlZEVsZW1lbnRJc092ZXJJbmRleChjb250YWluZXJFbCwgaW5kZXhPYmosIGRyYWdnZWRFbCkge1xuICBjb250YWluZXJFbC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudChEUkFHR0VEX09WRVJfSU5ERVhfRVZFTlRfTkFNRSwge1xuICAgIGRldGFpbDoge1xuICAgICAgaW5kZXhPYmo6IGluZGV4T2JqLFxuICAgICAgZHJhZ2dlZEVsOiBkcmFnZ2VkRWxcbiAgICB9XG4gIH0pKTtcbn1cbmZ1bmN0aW9uIGRpc3BhdGNoRHJhZ2dlZExlZnREb2N1bWVudChkcmFnZ2VkRWwpIHtcbiAgd2luZG93LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KERSQUdHRURfTEVGVF9ET0NVTUVOVF9FVkVOVF9OQU1FLCB7XG4gICAgZGV0YWlsOiB7XG4gICAgICBkcmFnZ2VkRWw6IGRyYWdnZWRFbFxuICAgIH1cbiAgfSkpO1xufVxuXG52YXIgVFJJR0dFUlMgPSB7XG4gIERSQUdfU1RBUlRFRDogXCJkcmFnU3RhcnRlZFwiLFxuICBEUkFHR0VEX0VOVEVSRUQ6IERSQUdHRURfRU5URVJFRF9FVkVOVF9OQU1FLFxuICBEUkFHR0VEX0VOVEVSRURfQU5PVEhFUjogXCJkcmFnRW50ZXJlZEFub3RoZXJcIixcbiAgRFJBR0dFRF9PVkVSX0lOREVYOiBEUkFHR0VEX09WRVJfSU5ERVhfRVZFTlRfTkFNRSxcbiAgRFJBR0dFRF9MRUZUOiBEUkFHR0VEX0xFRlRfRVZFTlRfTkFNRSxcbiAgRFJBR0dFRF9MRUZUX0FMTDogXCJkcmFnZ2VkTGVmdEFsbFwiLFxuICBEUk9QUEVEX0lOVE9fWk9ORTogXCJkcm9wcGVkSW50b1pvbmVcIixcbiAgRFJPUFBFRF9JTlRPX0FOT1RIRVI6IFwiZHJvcHBlZEludG9Bbm90aGVyXCIsXG4gIERST1BQRURfT1VUU0lERV9PRl9BTlk6IFwiZHJvcHBlZE91dHNpZGVPZkFueVwiLFxuICBEUkFHX1NUT1BQRUQ6IFwiZHJhZ1N0b3BwZWRcIlxufTtcbnZhciBTT1VSQ0VTID0ge1xuICBQT0lOVEVSOiBcInBvaW50ZXJcIixcbiAgS0VZQk9BUkQ6IFwia2V5Ym9hcmRcIlxufTtcbnZhciBTSEFET1dfSVRFTV9NQVJLRVJfUFJPUEVSVFlfTkFNRSA9IFwiaXNEbmRTaGFkb3dJdGVtXCI7XG52YXIgU0hBRE9XX0VMRU1FTlRfQVRUUklCVVRFX05BTUUgPSBcImRhdGEtaXMtZG5kLXNoYWRvdy1pdGVtXCI7XG52YXIgU0hBRE9XX1BMQUNFSE9MREVSX0lURU1fSUQgPSBcImlkOmRuZC1zaGFkb3ctcGxhY2Vob2xkZXItMDAwMFwiO1xudmFyIERSQUdHRURfRUxFTUVOVF9JRCA9IFwiZG5kLWFjdGlvbi1kcmFnZ2VkLWVsXCI7XG52YXIgSVRFTV9JRF9LRVkgPSBcImlkXCI7XG52YXIgYWN0aXZlRG5kWm9uZUNvdW50ID0gMDtcbmZ1bmN0aW9uIGluY3JlbWVudEFjdGl2ZURyb3Bab25lQ291bnQoKSB7XG4gIGFjdGl2ZURuZFpvbmVDb3VudCsrO1xufVxuZnVuY3Rpb24gZGVjcmVtZW50QWN0aXZlRHJvcFpvbmVDb3VudCgpIHtcbiAgaWYgKGFjdGl2ZURuZFpvbmVDb3VudCA9PT0gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkJ1ZyEgdHJ5aW5nIHRvIGRlY3JlbWVudCB3aGVuIHRoZXJlIGFyZSBubyBkcm9wem9uZXNcIik7XG4gIH1cbiAgYWN0aXZlRG5kWm9uZUNvdW50LS07XG59XG5cbi8qKlxuICogQWxsb3dzIHVzaW5nIGFub3RoZXIga2V5IGluc3RlYWQgb2YgXCJpZFwiIGluIHRoZSBpdGVtcyBkYXRhLiBUaGlzIGlzIGdsb2JhbCBhbmQgYXBwbGllcyB0byBhbGwgZG5kem9uZXMuXG4gKiBIYXMgdG8gYmUgY2FsbGVkIHdoZW4gdGhlcmUgYXJlIG5vIHJlbmRlcmVkIGRuZHpvbmVzIHdoYXRzb2V2ZXIuXG4gKiBAcGFyYW0ge1N0cmluZ30gbmV3S2V5TmFtZVxuICogQHRocm93cyB7RXJyb3J9IGlmIGl0IHdhcyBjYWxsZWQgd2hlbiB0aGVyZSBhcmUgcmVuZGVyZWQgZG5kem9uZXMgb3IgaWYgaXQgaXMgZ2l2ZW4gdGhlIHdyb25nIHR5cGUgKG5vdCBhIHN0cmluZylcbiAqL1xuZnVuY3Rpb24gb3ZlcnJpZGVJdGVtSWRLZXlOYW1lQmVmb3JlSW5pdGlhbGlzaW5nRG5kWm9uZXMobmV3S2V5TmFtZSkge1xuICBpZiAoYWN0aXZlRG5kWm9uZUNvdW50ID4gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcImNhbiBvbmx5IG92ZXJyaWRlIHRoZSBpZCBrZXkgYmVmb3JlIGluaXRpYWxpc2luZyBhbnkgZG5kem9uZVwiKTtcbiAgfVxuICBpZiAodHlwZW9mIG5ld0tleU5hbWUgIT09IFwic3RyaW5nXCIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJpdGVtIGlkIGtleSBoYXMgdG8gYmUgYSBzdHJpbmdcIik7XG4gIH1cbiAgcHJpbnREZWJ1ZyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIFtcIm92ZXJyaWRpbmcgaXRlbSBpZCBrZXkgbmFtZVwiLCBuZXdLZXlOYW1lXTtcbiAgfSk7XG4gIElURU1fSURfS0VZID0gbmV3S2V5TmFtZTtcbn1cbnZhciBpc09uU2VydmVyID0gdHlwZW9mIHdpbmRvdyA9PT0gXCJ1bmRlZmluZWRcIjtcbnZhciBwcmludERlYnVnID0gZnVuY3Rpb24gcHJpbnREZWJ1ZygpIHt9O1xuXG4vKipcbiAqIEFsbG93cyB0aGUgdXNlciB0byBzaG93L2hpZGUgY29uc29sZSBkZWJ1ZyBvdXRwdXRcbiAqICogQHBhcmFtIHtCb29sZWFufSBpc0RlYnVnXG4gKi9cbmZ1bmN0aW9uIHNldERlYnVnTW9kZShpc0RlYnVnKSB7XG4gIGlmIChpc0RlYnVnKSB7XG4gICAgcHJpbnREZWJ1ZyA9IGZ1bmN0aW9uIHByaW50RGVidWcoZ2VuZXJhdGVNZXNzYWdlKSB7XG4gICAgICB2YXIgbG9nRnVuY3Rpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGNvbnNvbGUuZGVidWc7XG4gICAgICB2YXIgbWVzc2FnZSA9IGdlbmVyYXRlTWVzc2FnZSgpO1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkobWVzc2FnZSkpIHtcbiAgICAgICAgbG9nRnVuY3Rpb24uYXBwbHkodm9pZCAwLCBfdG9Db25zdW1hYmxlQXJyYXkobWVzc2FnZSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbG9nRnVuY3Rpb24obWVzc2FnZSk7XG4gICAgICB9XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBwcmludERlYnVnID0gZnVuY3Rpb24gcHJpbnREZWJ1ZygpIHt9O1xuICB9XG59XG5cbi8vIFRoaXMgaXMgYmFzZWQgb2ZmIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzI3NzQ1NDM4L2hvdy10by1jb21wdXRlLWdldGJvdW5kaW5nY2xpZW50cmVjdC13aXRob3V0LWNvbnNpZGVyaW5nLXRyYW5zZm9ybXMvNTc4NzY2MDEjNTc4NzY2MDFcbi8vIEl0IHJlbW92ZXMgdGhlIHRyYW5zZm9ybXMgdGhhdCBhcmUgcG90ZW50aWFsbHkgYXBwbGllZCBieSB0aGUgZmxpcCBhbmltYXRpb25zXG4vKipcbiAqIEdldHMgdGhlIGJvdW5kaW5nIHJlY3QgYnV0IHJlbW92ZXMgdHJhbnNmb3JtcyAoZXg6IGZsaXAgYW5pbWF0aW9uKVxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxcbiAqIEByZXR1cm4ge3t0b3A6IG51bWJlciwgbGVmdDogbnVtYmVyLCBib3R0b206IG51bWJlciwgcmlnaHQ6IG51bWJlcn19XG4gKi9cbmZ1bmN0aW9uIGdldEJvdW5kaW5nUmVjdE5vVHJhbnNmb3JtcyhlbCkge1xuICB2YXIgdGE7XG4gIHZhciByZWN0ID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIHZhciBzdHlsZSA9IGdldENvbXB1dGVkU3R5bGUoZWwpO1xuICB2YXIgdHggPSBzdHlsZS50cmFuc2Zvcm07XG4gIGlmICh0eCkge1xuICAgIHZhciBzeCwgc3ksIGR4LCBkeTtcbiAgICBpZiAodHguc3RhcnRzV2l0aChcIm1hdHJpeDNkKFwiKSkge1xuICAgICAgdGEgPSB0eC5zbGljZSg5LCAtMSkuc3BsaXQoLywgLyk7XG4gICAgICBzeCA9ICt0YVswXTtcbiAgICAgIHN5ID0gK3RhWzVdO1xuICAgICAgZHggPSArdGFbMTJdO1xuICAgICAgZHkgPSArdGFbMTNdO1xuICAgIH0gZWxzZSBpZiAodHguc3RhcnRzV2l0aChcIm1hdHJpeChcIikpIHtcbiAgICAgIHRhID0gdHguc2xpY2UoNywgLTEpLnNwbGl0KC8sIC8pO1xuICAgICAgc3ggPSArdGFbMF07XG4gICAgICBzeSA9ICt0YVszXTtcbiAgICAgIGR4ID0gK3RhWzRdO1xuICAgICAgZHkgPSArdGFbNV07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiByZWN0O1xuICAgIH1cbiAgICB2YXIgdG8gPSBzdHlsZS50cmFuc2Zvcm1PcmlnaW47XG4gICAgdmFyIHggPSByZWN0LnggLSBkeCAtICgxIC0gc3gpICogcGFyc2VGbG9hdCh0byk7XG4gICAgdmFyIHkgPSByZWN0LnkgLSBkeSAtICgxIC0gc3kpICogcGFyc2VGbG9hdCh0by5zbGljZSh0by5pbmRleE9mKFwiIFwiKSArIDEpKTtcbiAgICB2YXIgdyA9IHN4ID8gcmVjdC53aWR0aCAvIHN4IDogZWwub2Zmc2V0V2lkdGg7XG4gICAgdmFyIGggPSBzeSA/IHJlY3QuaGVpZ2h0IC8gc3kgOiBlbC5vZmZzZXRIZWlnaHQ7XG4gICAgcmV0dXJuIHtcbiAgICAgIHg6IHgsXG4gICAgICB5OiB5LFxuICAgICAgd2lkdGg6IHcsXG4gICAgICBoZWlnaHQ6IGgsXG4gICAgICB0b3A6IHksXG4gICAgICByaWdodDogeCArIHcsXG4gICAgICBib3R0b206IHkgKyBoLFxuICAgICAgbGVmdDogeFxuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHJlY3Q7XG4gIH1cbn1cblxuLyoqXG4gKiBHZXRzIHRoZSBhYnNvbHV0ZSBib3VuZGluZyByZWN0IChhY2NvdW50cyBmb3IgdGhlIHdpbmRvdydzIHNjcm9sbCBwb3NpdGlvbiBhbmQgcmVtb3ZlcyB0cmFuc2Zvcm1zKVxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxcbiAqIEByZXR1cm4ge3t0b3A6IG51bWJlciwgbGVmdDogbnVtYmVyLCBib3R0b206IG51bWJlciwgcmlnaHQ6IG51bWJlcn19XG4gKi9cbmZ1bmN0aW9uIGdldEFic29sdXRlUmVjdE5vVHJhbnNmb3JtcyhlbCkge1xuICB2YXIgcmVjdCA9IGdldEJvdW5kaW5nUmVjdE5vVHJhbnNmb3JtcyhlbCk7XG4gIHJldHVybiB7XG4gICAgdG9wOiByZWN0LnRvcCArIHdpbmRvdy5zY3JvbGxZLFxuICAgIGJvdHRvbTogcmVjdC5ib3R0b20gKyB3aW5kb3cuc2Nyb2xsWSxcbiAgICBsZWZ0OiByZWN0LmxlZnQgKyB3aW5kb3cuc2Nyb2xsWCxcbiAgICByaWdodDogcmVjdC5yaWdodCArIHdpbmRvdy5zY3JvbGxYXG4gIH07XG59XG5cbi8qKlxuICogR2V0cyB0aGUgYWJzb2x1dGUgYm91bmRpbmcgcmVjdCAoYWNjb3VudHMgZm9yIHRoZSB3aW5kb3cncyBzY3JvbGwgcG9zaXRpb24pXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbFxuICogQHJldHVybiB7e3RvcDogbnVtYmVyLCBsZWZ0OiBudW1iZXIsIGJvdHRvbTogbnVtYmVyLCByaWdodDogbnVtYmVyfX1cbiAqL1xuZnVuY3Rpb24gZ2V0QWJzb2x1dGVSZWN0KGVsKSB7XG4gIHZhciByZWN0ID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIHJldHVybiB7XG4gICAgdG9wOiByZWN0LnRvcCArIHdpbmRvdy5zY3JvbGxZLFxuICAgIGJvdHRvbTogcmVjdC5ib3R0b20gKyB3aW5kb3cuc2Nyb2xsWSxcbiAgICBsZWZ0OiByZWN0LmxlZnQgKyB3aW5kb3cuc2Nyb2xsWCxcbiAgICByaWdodDogcmVjdC5yaWdodCArIHdpbmRvdy5zY3JvbGxYXG4gIH07XG59XG5cbi8qKlxuICogZmluZHMgdGhlIGNlbnRlciA6KVxuICogQHR5cGVkZWYge09iamVjdH0gUmVjdFxuICogQHByb3BlcnR5IHtudW1iZXJ9IHRvcFxuICogQHByb3BlcnR5IHtudW1iZXJ9IGJvdHRvbVxuICogQHByb3BlcnR5IHtudW1iZXJ9IGxlZnRcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSByaWdodFxuICogQHBhcmFtIHtSZWN0fSByZWN0XG4gKiBAcmV0dXJuIHt7eDogbnVtYmVyLCB5OiBudW1iZXJ9fVxuICovXG5mdW5jdGlvbiBmaW5kQ2VudGVyKHJlY3QpIHtcbiAgcmV0dXJuIHtcbiAgICB4OiAocmVjdC5sZWZ0ICsgcmVjdC5yaWdodCkgLyAyLFxuICAgIHk6IChyZWN0LnRvcCArIHJlY3QuYm90dG9tKSAvIDJcbiAgfTtcbn1cblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBQb2ludFxuICogQHByb3BlcnR5IHtudW1iZXJ9IHhcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSB5XG4gKiBAcGFyYW0ge1BvaW50fSBwb2ludEFcbiAqIEBwYXJhbSB7UG9pbnR9IHBvaW50QlxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5mdW5jdGlvbiBjYWxjRGlzdGFuY2UocG9pbnRBLCBwb2ludEIpIHtcbiAgcmV0dXJuIE1hdGguc3FydChNYXRoLnBvdyhwb2ludEEueCAtIHBvaW50Qi54LCAyKSArIE1hdGgucG93KHBvaW50QS55IC0gcG9pbnRCLnksIDIpKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge1BvaW50fSBwb2ludFxuICogQHBhcmFtIHtSZWN0fSByZWN0XG4gKiBAcmV0dXJuIHtib29sZWFufGJvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzUG9pbnRJbnNpZGVSZWN0KHBvaW50LCByZWN0KSB7XG4gIHJldHVybiBwb2ludC55IDw9IHJlY3QuYm90dG9tICYmIHBvaW50LnkgPj0gcmVjdC50b3AgJiYgcG9pbnQueCA+PSByZWN0LmxlZnQgJiYgcG9pbnQueCA8PSByZWN0LnJpZ2h0O1xufVxuXG4vKipcbiAqIGZpbmQgdGhlIGFic29sdXRlIGNvb3JkaW5hdGVzIG9mIHRoZSBjZW50ZXIgb2YgYSBkb20gZWxlbWVudFxuICogQHBhcmFtIGVsIHtIVE1MRWxlbWVudH1cbiAqIEByZXR1cm5zIHt7eDogbnVtYmVyLCB5OiBudW1iZXJ9fVxuICovXG5mdW5jdGlvbiBmaW5kQ2VudGVyT2ZFbGVtZW50KGVsKSB7XG4gIHJldHVybiBmaW5kQ2VudGVyKGdldEFic29sdXRlUmVjdChlbCkpO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsQVxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxCXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc0NlbnRlck9mQUluc2lkZUIoZWxBLCBlbEIpIHtcbiAgdmFyIGNlbnRlck9mQSA9IGZpbmRDZW50ZXJPZkVsZW1lbnQoZWxBKTtcbiAgdmFyIHJlY3RPZkIgPSBnZXRBYnNvbHV0ZVJlY3ROb1RyYW5zZm9ybXMoZWxCKTtcbiAgcmV0dXJuIGlzUG9pbnRJbnNpZGVSZWN0KGNlbnRlck9mQSwgcmVjdE9mQik7XG59XG5cbi8qKlxuICogQHBhcmFtIHtIVE1MRWxlbWVudHxDaGlsZE5vZGV9IGVsQVxuICogQHBhcmFtIHtIVE1MRWxlbWVudHxDaGlsZE5vZGV9IGVsQlxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5mdW5jdGlvbiBjYWxjRGlzdGFuY2VCZXR3ZWVuQ2VudGVycyhlbEEsIGVsQikge1xuICB2YXIgY2VudGVyT2ZBID0gZmluZENlbnRlck9mRWxlbWVudChlbEEpO1xuICB2YXIgY2VudGVyT2ZCID0gZmluZENlbnRlck9mRWxlbWVudChlbEIpO1xuICByZXR1cm4gY2FsY0Rpc3RhbmNlKGNlbnRlck9mQSwgY2VudGVyT2ZCKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbCAtIHRoZSBlbGVtZW50IHRvIGNoZWNrXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gLSB0cnVlIGlmIHRoZSBlbGVtZW50IGluIGl0cyBlbnRpcmV0eSBpcyBvZmYgc2NyZWVuIGluY2x1ZGluZyB0aGUgc2Nyb2xsYWJsZSBhcmVhICh0aGUgbm9ybWFsIGRvbSBldmVudHMgbG9vayBhdCB0aGUgbW91c2UgcmF0aGVyIHRoYW4gdGhlIGVsZW1lbnQpXG4gKi9cbmZ1bmN0aW9uIGlzRWxlbWVudE9mZkRvY3VtZW50KGVsKSB7XG4gIHZhciByZWN0ID0gZ2V0QWJzb2x1dGVSZWN0KGVsKTtcbiAgcmV0dXJuIHJlY3QucmlnaHQgPCAwIHx8IHJlY3QubGVmdCA+IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxXaWR0aCB8fCByZWN0LmJvdHRvbSA8IDAgfHwgcmVjdC50b3AgPiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsSGVpZ2h0O1xufVxuXG4vKipcbiAqIElmIHRoZSBwb2ludCBpcyBpbnNpZGUgdGhlIGVsZW1lbnQgcmV0dXJucyBpdHMgZGlzdGFuY2VzIGZyb20gdGhlIHNpZGVzLCBvdGhlcndpc2UgcmV0dXJucyBudWxsXG4gKiBAcGFyYW0ge1BvaW50fSBwb2ludFxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxcbiAqIEByZXR1cm4ge251bGx8e3RvcDogbnVtYmVyLCBsZWZ0OiBudW1iZXIsIGJvdHRvbTogbnVtYmVyLCByaWdodDogbnVtYmVyfX1cbiAqL1xuZnVuY3Rpb24gY2FsY0lubmVyRGlzdGFuY2VzQmV0d2VlblBvaW50QW5kU2lkZXNPZkVsZW1lbnQocG9pbnQsIGVsKSB7XG4gIHZhciByZWN0ID0gZ2V0QWJzb2x1dGVSZWN0KGVsKTtcbiAgaWYgKCFpc1BvaW50SW5zaWRlUmVjdChwb2ludCwgcmVjdCkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4ge1xuICAgIHRvcDogcG9pbnQueSAtIHJlY3QudG9wLFxuICAgIGJvdHRvbTogcmVjdC5ib3R0b20gLSBwb2ludC55LFxuICAgIGxlZnQ6IHBvaW50LnggLSByZWN0LmxlZnQsXG4gICAgLy8gVE9ETyAtIGZpZ3VyZSBvdXQgd2hhdCBpcyBzbyBzcGVjaWFsIGFib3V0IHJpZ2h0ICh3aHkgdGhlIHJlY3QgaXMgdG9vIGJpZylcbiAgICByaWdodDogTWF0aC5taW4ocmVjdC5yaWdodCwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoKSAtIHBvaW50LnhcbiAgfTtcbn1cblxudmFyIGR6VG9TaGFkb3dJbmRleFRvUmVjdDtcblxuLyoqXG4gKiBSZXNldHMgdGhlIGNhY2hlIHRoYXQgYWxsb3dzIGZvciBzbWFydGVyIFwid291bGQgYmUgaW5kZXhcIiByZXNvbHV0aW9uLiBTaG91bGQgYmUgY2FsbGVkIGFmdGVyIGV2ZXJ5IGRyYWcgb3BlcmF0aW9uXG4gKi9cbmZ1bmN0aW9uIHJlc2V0SW5kZXhlc0NhY2hlKCkge1xuICBwcmludERlYnVnKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gXCJyZXNldHRpbmcgaW5kZXhlcyBjYWNoZVwiO1xuICB9KTtcbiAgZHpUb1NoYWRvd0luZGV4VG9SZWN0ID0gbmV3IE1hcCgpO1xufVxucmVzZXRJbmRleGVzQ2FjaGUoKTtcblxuLyoqXG4gKiBSZXNldHMgdGhlIGNhY2hlIHRoYXQgYWxsb3dzIGZvciBzbWFydGVyIFwid291bGQgYmUgaW5kZXhcIiByZXNvbHV0aW9uIGZvciBhIHNwZWNpZmljIGRyb3B6b25lLCBzaG91bGQgYmUgY2FsbGVkIGFmdGVyIHRoZSB6b25lIHdhcyBzY3JvbGxlZFxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZHpcbiAqL1xuZnVuY3Rpb24gcmVzZXRJbmRleGVzQ2FjaGVGb3JEeihkeikge1xuICBwcmludERlYnVnKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gXCJyZXNldHRpbmcgaW5kZXhlcyBjYWNoZSBmb3IgZHpcIjtcbiAgfSk7XG4gIGR6VG9TaGFkb3dJbmRleFRvUmVjdFtcImRlbGV0ZVwiXShkeik7XG59XG5cbi8qKlxuICogQ2FjaGVzIHRoZSBjb29yZGluYXRlcyBvZiB0aGUgc2hhZG93IGVsZW1lbnQgd2hlbiBpdCdzIGluIGEgY2VydGFpbiBpbmRleCBpbiBhIGNlcnRhaW4gZHJvcHpvbmUuXG4gKiBIZWxwZnVsIGluIG9yZGVyIHRvIGRldGVybWluZSBcIndvdWxkIGJlIGluZGV4XCIgbW9yZSBlZmZlY3RpdmVseVxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZHpcbiAqIEByZXR1cm4ge251bWJlcn0gLSB0aGUgc2hhZG93IGVsZW1lbnQgaW5kZXhcbiAqL1xuZnVuY3Rpb24gY2FjaGVTaGFkb3dSZWN0KGR6KSB7XG4gIHZhciBzaGFkb3dFbEluZGV4ID0gQXJyYXkuZnJvbShkei5jaGlsZHJlbikuZmluZEluZGV4KGZ1bmN0aW9uIChjaGlsZCkge1xuICAgIHJldHVybiBjaGlsZC5nZXRBdHRyaWJ1dGUoU0hBRE9XX0VMRU1FTlRfQVRUUklCVVRFX05BTUUpO1xuICB9KTtcbiAgaWYgKHNoYWRvd0VsSW5kZXggPj0gMCkge1xuICAgIGlmICghZHpUb1NoYWRvd0luZGV4VG9SZWN0LmhhcyhkeikpIHtcbiAgICAgIGR6VG9TaGFkb3dJbmRleFRvUmVjdC5zZXQoZHosIG5ldyBNYXAoKSk7XG4gICAgfVxuICAgIGR6VG9TaGFkb3dJbmRleFRvUmVjdC5nZXQoZHopLnNldChzaGFkb3dFbEluZGV4LCBnZXRBYnNvbHV0ZVJlY3ROb1RyYW5zZm9ybXMoZHouY2hpbGRyZW5bc2hhZG93RWxJbmRleF0pKTtcbiAgICByZXR1cm4gc2hhZG93RWxJbmRleDtcbiAgfVxuICByZXR1cm4gdW5kZWZpbmVkO1xufVxuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IEluZGV4XG4gKiBAcHJvcGVydHkge251bWJlcn0gaW5kZXggLSB0aGUgd291bGQgYmUgaW5kZXhcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gaXNQcm94aW1pdHlCYXNlZCAtIGZhbHNlIGlmIHRoZSBlbGVtZW50IGlzIGFjdHVhbGx5IG92ZXIgdGhlIGluZGV4LCB0cnVlIGlmIGl0IGlzIG5vdCBvdmVyIGl0IGJ1dCB0aGlzIGluZGV4IGlzIHRoZSBjbG9zZXN0XG4gKi9cbi8qKlxuICogRmluZCB0aGUgaW5kZXggZm9yIHRoZSBkcmFnZ2VkIGVsZW1lbnQgaW4gdGhlIGxpc3QgaXQgaXMgZHJhZ2dlZCBvdmVyXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBmbG9hdGluZ0Fib3ZlRWxcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGNvbGxlY3Rpb25CZWxvd0VsXG4gKiBAcmV0dXJucyB7SW5kZXh8bnVsbH0gLSAgaWYgdGhlIGVsZW1lbnQgaXMgb3ZlciB0aGUgY29udGFpbmVyIHRoZSBJbmRleCBvYmplY3Qgb3RoZXJ3aXNlIG51bGxcbiAqL1xuZnVuY3Rpb24gZmluZFdvdWxkQmVJbmRleChmbG9hdGluZ0Fib3ZlRWwsIGNvbGxlY3Rpb25CZWxvd0VsKSB7XG4gIGlmICghaXNDZW50ZXJPZkFJbnNpZGVCKGZsb2F0aW5nQWJvdmVFbCwgY29sbGVjdGlvbkJlbG93RWwpKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgdmFyIGNoaWxkcmVuID0gY29sbGVjdGlvbkJlbG93RWwuY2hpbGRyZW47XG4gIC8vIHRoZSBjb250YWluZXIgaXMgZW1wdHksIGZsb2F0aW5nIGVsZW1lbnQgc2hvdWxkIGJlIHRoZSBmaXJzdFxuICBpZiAoY2hpbGRyZW4ubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGluZGV4OiAwLFxuICAgICAgaXNQcm94aW1pdHlCYXNlZDogdHJ1ZVxuICAgIH07XG4gIH1cbiAgdmFyIHNoYWRvd0VsSW5kZXggPSBjYWNoZVNoYWRvd1JlY3QoY29sbGVjdGlvbkJlbG93RWwpO1xuXG4gIC8vIHRoZSBzZWFyY2ggY291bGQgYmUgbW9yZSBlZmZpY2llbnQgYnV0IGtlZXBpbmcgaXQgc2ltcGxlIGZvciBub3dcbiAgLy8gYSBwb3NzaWJsZSBpbXByb3ZlbWVudDogcGFzcyBpbiB0aGUgbGFzdEluZGV4IGl0IHdhcyBmb3VuZCBpbiBhbmQgY2hlY2sgdGhlcmUgZmlyc3QsIHRoZW4gZXhwYW5kIGZyb20gdGhlcmVcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgIGlmIChpc0NlbnRlck9mQUluc2lkZUIoZmxvYXRpbmdBYm92ZUVsLCBjaGlsZHJlbltpXSkpIHtcbiAgICAgIHZhciBjYWNoZWRTaGFkb3dSZWN0ID0gZHpUb1NoYWRvd0luZGV4VG9SZWN0Lmhhcyhjb2xsZWN0aW9uQmVsb3dFbCkgJiYgZHpUb1NoYWRvd0luZGV4VG9SZWN0LmdldChjb2xsZWN0aW9uQmVsb3dFbCkuZ2V0KGkpO1xuICAgICAgaWYgKGNhY2hlZFNoYWRvd1JlY3QpIHtcbiAgICAgICAgaWYgKCFpc1BvaW50SW5zaWRlUmVjdChmaW5kQ2VudGVyT2ZFbGVtZW50KGZsb2F0aW5nQWJvdmVFbCksIGNhY2hlZFNoYWRvd1JlY3QpKSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGluZGV4OiBzaGFkb3dFbEluZGV4LFxuICAgICAgICAgICAgaXNQcm94aW1pdHlCYXNlZDogZmFsc2VcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4ge1xuICAgICAgICBpbmRleDogaSxcbiAgICAgICAgaXNQcm94aW1pdHlCYXNlZDogZmFsc2VcbiAgICAgIH07XG4gICAgfVxuICB9XG4gIC8vIHRoaXMgY2FuIGhhcHBlbiBpZiB0aGVyZSBpcyBzcGFjZSBhcm91bmQgdGhlIGNoaWxkcmVuIHNvIHRoZSBmbG9hdGluZyBlbGVtZW50IGhhc1xuICAvL2VudGVyZWQgdGhlIGNvbnRhaW5lciBidXQgbm90IGFueSBvZiB0aGUgY2hpbGRyZW4sIGluIHRoaXMgY2FzZSB3ZSB3aWxsIGZpbmQgdGhlIG5lYXJlc3QgY2hpbGRcbiAgdmFyIG1pbkRpc3RhbmNlU29GYXIgPSBOdW1iZXIuTUFYX1ZBTFVFO1xuICB2YXIgaW5kZXhPZk1pbiA9IHVuZGVmaW5lZDtcbiAgLy8gd2UgYXJlIGNoZWNraW5nIGFsbCBvZiB0aGVtIGJlY2F1c2Ugd2UgZG9uJ3Qga25vdyB3aGV0aGVyIHdlIGFyZSBkZWFsaW5nIHdpdGggYSBob3Jpem9udGFsIG9yIHZlcnRpY2FsIGNvbnRhaW5lciBhbmQgd2hlcmUgdGhlIGZsb2F0aW5nIGVsZW1lbnQgZW50ZXJlZCBmcm9tXG4gIGZvciAodmFyIF9pID0gMDsgX2kgPCBjaGlsZHJlbi5sZW5ndGg7IF9pKyspIHtcbiAgICB2YXIgZGlzdGFuY2UgPSBjYWxjRGlzdGFuY2VCZXR3ZWVuQ2VudGVycyhmbG9hdGluZ0Fib3ZlRWwsIGNoaWxkcmVuW19pXSk7XG4gICAgaWYgKGRpc3RhbmNlIDwgbWluRGlzdGFuY2VTb0Zhcikge1xuICAgICAgbWluRGlzdGFuY2VTb0ZhciA9IGRpc3RhbmNlO1xuICAgICAgaW5kZXhPZk1pbiA9IF9pO1xuICAgIH1cbiAgfVxuICByZXR1cm4ge1xuICAgIGluZGV4OiBpbmRleE9mTWluLFxuICAgIGlzUHJveGltaXR5QmFzZWQ6IHRydWVcbiAgfTtcbn1cblxudmFyIFNDUk9MTF9aT05FX1BYID0gMjU7XG5mdW5jdGlvbiBtYWtlU2Nyb2xsZXIoKSB7XG4gIHZhciBzY3JvbGxpbmdJbmZvO1xuICBmdW5jdGlvbiByZXNldFNjcm9sbGluZygpIHtcbiAgICBzY3JvbGxpbmdJbmZvID0ge1xuICAgICAgZGlyZWN0aW9uT2JqOiB1bmRlZmluZWQsXG4gICAgICBzdGVwUHg6IDBcbiAgICB9O1xuICB9XG4gIHJlc2V0U2Nyb2xsaW5nKCk7XG4gIC8vIGRpcmVjdGlvbk9iaiB7eDogMHwxfC0xLCB5OjB8MXwtMX0gLSAxIG1lYW5zIGRvd24gaW4geSBhbmQgcmlnaHQgaW4geFxuICBmdW5jdGlvbiBzY3JvbGxDb250YWluZXIoY29udGFpbmVyRWwpIHtcbiAgICB2YXIgX3Njcm9sbGluZ0luZm8gPSBzY3JvbGxpbmdJbmZvLFxuICAgICAgZGlyZWN0aW9uT2JqID0gX3Njcm9sbGluZ0luZm8uZGlyZWN0aW9uT2JqLFxuICAgICAgc3RlcFB4ID0gX3Njcm9sbGluZ0luZm8uc3RlcFB4O1xuICAgIGlmIChkaXJlY3Rpb25PYmopIHtcbiAgICAgIGNvbnRhaW5lckVsLnNjcm9sbEJ5KGRpcmVjdGlvbk9iai54ICogc3RlcFB4LCBkaXJlY3Rpb25PYmoueSAqIHN0ZXBQeCk7XG4gICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHNjcm9sbENvbnRhaW5lcihjb250YWluZXJFbCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gY2FsY1Njcm9sbFN0ZXBQeChkaXN0YW5jZVB4KSB7XG4gICAgcmV0dXJuIFNDUk9MTF9aT05FX1BYIC0gZGlzdGFuY2VQeDtcbiAgfVxuXG4gIC8qKlxuICAgKiBJZiB0aGUgcG9pbnRlciBpcyBuZXh0IHRvIHRoZSBzaWRlcyBvZiB0aGUgZWxlbWVudCB0byBzY3JvbGwsIHdpbGwgdHJpZ2dlciBzY3JvbGxpbmdcbiAgICogQ2FuIGJlIGNhbGxlZCByZXBlYXRlZGx5IHdpdGggdXBkYXRlZCBwb2ludGVyIGFuZCBlbGVtZW50VG9TY3JvbGwgdmFsdWVzIHdpdGhvdXQgaXNzdWVzXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IC0gdHJ1ZSBpZiBzY3JvbGxpbmcgd2FzIG5lZWRlZFxuICAgKi9cbiAgZnVuY3Rpb24gc2Nyb2xsSWZOZWVkZWQocG9pbnRlciwgZWxlbWVudFRvU2Nyb2xsKSB7XG4gICAgaWYgKCFlbGVtZW50VG9TY3JvbGwpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdmFyIGRpc3RhbmNlcyA9IGNhbGNJbm5lckRpc3RhbmNlc0JldHdlZW5Qb2ludEFuZFNpZGVzT2ZFbGVtZW50KHBvaW50ZXIsIGVsZW1lbnRUb1Njcm9sbCk7XG4gICAgaWYgKGRpc3RhbmNlcyA9PT0gbnVsbCkge1xuICAgICAgcmVzZXRTY3JvbGxpbmcoKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdmFyIGlzQWxyZWFkeVNjcm9sbGluZyA9ICEhc2Nyb2xsaW5nSW5mby5kaXJlY3Rpb25PYmo7XG4gICAgdmFyIHNjcm9sbGluZ1ZlcnRpY2FsbHkgPSBmYWxzZSxcbiAgICAgIHNjcm9sbGluZ0hvcml6b250YWxseSA9IGZhbHNlO1xuICAgIC8vIHZlcnRpY2FsXG4gICAgaWYgKGVsZW1lbnRUb1Njcm9sbC5zY3JvbGxIZWlnaHQgPiBlbGVtZW50VG9TY3JvbGwuY2xpZW50SGVpZ2h0KSB7XG4gICAgICBpZiAoZGlzdGFuY2VzLmJvdHRvbSA8IFNDUk9MTF9aT05FX1BYKSB7XG4gICAgICAgIHNjcm9sbGluZ1ZlcnRpY2FsbHkgPSB0cnVlO1xuICAgICAgICBzY3JvbGxpbmdJbmZvLmRpcmVjdGlvbk9iaiA9IHtcbiAgICAgICAgICB4OiAwLFxuICAgICAgICAgIHk6IDFcbiAgICAgICAgfTtcbiAgICAgICAgc2Nyb2xsaW5nSW5mby5zdGVwUHggPSBjYWxjU2Nyb2xsU3RlcFB4KGRpc3RhbmNlcy5ib3R0b20pO1xuICAgICAgfSBlbHNlIGlmIChkaXN0YW5jZXMudG9wIDwgU0NST0xMX1pPTkVfUFgpIHtcbiAgICAgICAgc2Nyb2xsaW5nVmVydGljYWxseSA9IHRydWU7XG4gICAgICAgIHNjcm9sbGluZ0luZm8uZGlyZWN0aW9uT2JqID0ge1xuICAgICAgICAgIHg6IDAsXG4gICAgICAgICAgeTogLTFcbiAgICAgICAgfTtcbiAgICAgICAgc2Nyb2xsaW5nSW5mby5zdGVwUHggPSBjYWxjU2Nyb2xsU3RlcFB4KGRpc3RhbmNlcy50b3ApO1xuICAgICAgfVxuICAgICAgaWYgKCFpc0FscmVhZHlTY3JvbGxpbmcgJiYgc2Nyb2xsaW5nVmVydGljYWxseSkge1xuICAgICAgICBzY3JvbGxDb250YWluZXIoZWxlbWVudFRvU2Nyb2xsKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIGhvcml6b250YWxcbiAgICBpZiAoZWxlbWVudFRvU2Nyb2xsLnNjcm9sbFdpZHRoID4gZWxlbWVudFRvU2Nyb2xsLmNsaWVudFdpZHRoKSB7XG4gICAgICBpZiAoZGlzdGFuY2VzLnJpZ2h0IDwgU0NST0xMX1pPTkVfUFgpIHtcbiAgICAgICAgc2Nyb2xsaW5nSG9yaXpvbnRhbGx5ID0gdHJ1ZTtcbiAgICAgICAgc2Nyb2xsaW5nSW5mby5kaXJlY3Rpb25PYmogPSB7XG4gICAgICAgICAgeDogMSxcbiAgICAgICAgICB5OiAwXG4gICAgICAgIH07XG4gICAgICAgIHNjcm9sbGluZ0luZm8uc3RlcFB4ID0gY2FsY1Njcm9sbFN0ZXBQeChkaXN0YW5jZXMucmlnaHQpO1xuICAgICAgfSBlbHNlIGlmIChkaXN0YW5jZXMubGVmdCA8IFNDUk9MTF9aT05FX1BYKSB7XG4gICAgICAgIHNjcm9sbGluZ0hvcml6b250YWxseSA9IHRydWU7XG4gICAgICAgIHNjcm9sbGluZ0luZm8uZGlyZWN0aW9uT2JqID0ge1xuICAgICAgICAgIHg6IC0xLFxuICAgICAgICAgIHk6IDBcbiAgICAgICAgfTtcbiAgICAgICAgc2Nyb2xsaW5nSW5mby5zdGVwUHggPSBjYWxjU2Nyb2xsU3RlcFB4KGRpc3RhbmNlcy5sZWZ0KTtcbiAgICAgIH1cbiAgICAgIGlmICghaXNBbHJlYWR5U2Nyb2xsaW5nICYmIHNjcm9sbGluZ0hvcml6b250YWxseSkge1xuICAgICAgICBzY3JvbGxDb250YWluZXIoZWxlbWVudFRvU2Nyb2xsKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJlc2V0U2Nyb2xsaW5nKCk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB7XG4gICAgc2Nyb2xsSWZOZWVkZWQ6IHNjcm9sbElmTmVlZGVkLFxuICAgIHJlc2V0U2Nyb2xsaW5nOiByZXNldFNjcm9sbGluZ1xuICB9O1xufVxuXG4vKipcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3RcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gdG9TdHJpbmcob2JqZWN0KSB7XG4gIHJldHVybiBKU09OLnN0cmluZ2lmeShvYmplY3QsIG51bGwsIDIpO1xufVxuXG4vKipcbiAqIEZpbmRzIHRoZSBkZXB0aCBvZiB0aGUgZ2l2ZW4gbm9kZSBpbiB0aGUgRE9NIHRyZWVcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IG5vZGVcbiAqIEByZXR1cm4ge251bWJlcn0gLSB0aGUgZGVwdGggb2YgdGhlIG5vZGVcbiAqL1xuZnVuY3Rpb24gZ2V0RGVwdGgobm9kZSkge1xuICBpZiAoIW5vZGUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJjYW5ub3QgZ2V0IGRlcHRoIG9mIGEgZmFsc3kgbm9kZVwiKTtcbiAgfVxuICByZXR1cm4gX2dldERlcHRoKG5vZGUsIDApO1xufVxuZnVuY3Rpb24gX2dldERlcHRoKG5vZGUpIHtcbiAgdmFyIGNvdW50U29GYXIgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDA7XG4gIGlmICghbm9kZS5wYXJlbnRFbGVtZW50KSB7XG4gICAgcmV0dXJuIGNvdW50U29GYXIgLSAxO1xuICB9XG4gIHJldHVybiBfZ2V0RGVwdGgobm9kZS5wYXJlbnRFbGVtZW50LCBjb3VudFNvRmFyICsgMSk7XG59XG5cbi8qKlxuICogQSBzaW1wbGUgdXRpbCB0byBzaGFsbG93IGNvbXBhcmUgb2JqZWN0cyBxdWlja2x5LCBpdCBkb2Vzbid0IHZhbGlkYXRlIHRoZSBhcmd1bWVudHMgc28gcGFzcyBvYmplY3RzIGluXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqQVxuICogQHBhcmFtIHtPYmplY3R9IG9iakJcbiAqIEByZXR1cm4ge2Jvb2xlYW59IC0gdHJ1ZSBpZiBvYmpBIGFuZCBvYmpCIGFyZSBzaGFsbG93IGVxdWFsXG4gKi9cbmZ1bmN0aW9uIGFyZU9iamVjdHNTaGFsbG93RXF1YWwob2JqQSwgb2JqQikge1xuICBpZiAoT2JqZWN0LmtleXMob2JqQSkubGVuZ3RoICE9PSBPYmplY3Qua2V5cyhvYmpCKS5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgZm9yICh2YXIga2V5QSBpbiBvYmpBKSB7XG4gICAgaWYgKCF7fS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iakIsIGtleUEpIHx8IG9iakJba2V5QV0gIT09IG9iakFba2V5QV0pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5cbi8qKlxuICogU2hhbGxvdyBjb21wYXJlcyB0d28gYXJyYXlzXG4gKiBAcGFyYW0gYXJyQVxuICogQHBhcmFtIGFyckJcbiAqIEByZXR1cm4ge2Jvb2xlYW59IC0gd2hldGhlciB0aGUgYXJyYXlzIGFyZSBzaGFsbG93IGVxdWFsXG4gKi9cbmZ1bmN0aW9uIGFyZUFycmF5c1NoYWxsb3dFcXVhbFNhbWVPcmRlcihhcnJBLCBhcnJCKSB7XG4gIGlmIChhcnJBLmxlbmd0aCAhPT0gYXJyQi5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJBLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGFyckFbaV0gIT09IGFyckJbaV0pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRydWU7XG59XG5cbnZhciBJTlRFUlZBTF9NUyA9IDIwMDtcbnZhciBUT0xFUkFOQ0VfUFggPSAxMDtcbnZhciBfbWFrZVNjcm9sbGVyID0gbWFrZVNjcm9sbGVyKCksXG4gIHNjcm9sbElmTmVlZGVkID0gX21ha2VTY3JvbGxlci5zY3JvbGxJZk5lZWRlZCxcbiAgcmVzZXRTY3JvbGxpbmcgPSBfbWFrZVNjcm9sbGVyLnJlc2V0U2Nyb2xsaW5nO1xudmFyIG5leHQ7XG5cbi8qKlxuICogVHJhY2tzIHRoZSBkcmFnZ2VkIGVsZW1lbnRzIGFuZCBwZXJmb3JtcyB0aGUgc2lkZSBlZmZlY3RzIHdoZW4gaXQgaXMgZHJhZ2dlZCBvdmVyIGEgZHJvcCB6b25lIChiYXNpY2FsbHkgZGlzcGF0Y2hpbmcgY3VzdG9tLWV2ZW50cyBzY3JvbGxpbmcpXG4gKiBAcGFyYW0ge1NldDxIVE1MRWxlbWVudD59IGRyb3Bab25lc1xuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZHJhZ2dlZEVsXG4gKiBAcGFyYW0ge251bWJlcn0gW2ludGVydmFsTXMgPSBJTlRFUlZBTF9NU11cbiAqL1xuZnVuY3Rpb24gb2JzZXJ2ZShkcmFnZ2VkRWwsIGRyb3Bab25lcykge1xuICB2YXIgaW50ZXJ2YWxNcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogSU5URVJWQUxfTVM7XG4gIC8vIGluaXRpYWxpemF0aW9uXG4gIHZhciBsYXN0RHJvcFpvbmVGb3VuZDtcbiAgdmFyIGxhc3RJbmRleEZvdW5kO1xuICB2YXIgbGFzdElzRHJhZ2dlZEluQURyb3Bab25lID0gZmFsc2U7XG4gIHZhciBsYXN0Q2VudHJlUG9zaXRpb25PZkRyYWdnZWQ7XG4gIC8vIFdlIGFyZSBzb3J0aW5nIHRvIG1ha2Ugc3VyZSB0aGF0IGluIGNhc2Ugb2YgbmVzdGVkIHpvbmVzIG9mIHRoZSBzYW1lIHR5cGUgdGhlIG9uZSBcIm9uIHRvcFwiIGlzIGNvbnNpZGVyZWQgZmlyc3RcbiAgdmFyIGRyb3Bab25lc0Zyb21EZWVwVG9TaGFsbG93ID0gQXJyYXkuZnJvbShkcm9wWm9uZXMpLnNvcnQoZnVuY3Rpb24gKGR6MSwgZHoyKSB7XG4gICAgcmV0dXJuIGdldERlcHRoKGR6MikgLSBnZXREZXB0aChkejEpO1xuICB9KTtcblxuICAvKipcbiAgICogVGhlIG1haW4gZnVuY3Rpb24gaW4gdGhpcyBtb2R1bGUuIFRyYWNrcyB3aGVyZSBldmVyeXRoaW5nIGlzLyBzaG91bGQgYmUgYSB0YWtlIHRoZSBhY3Rpb25zXG4gICAqL1xuICBmdW5jdGlvbiBhbmROb3coKSB7XG4gICAgdmFyIGN1cnJlbnRDZW50ZXJPZkRyYWdnZWQgPSBmaW5kQ2VudGVyT2ZFbGVtZW50KGRyYWdnZWRFbCk7XG4gICAgdmFyIHNjcm9sbGVkID0gc2Nyb2xsSWZOZWVkZWQoY3VycmVudENlbnRlck9mRHJhZ2dlZCwgbGFzdERyb3Bab25lRm91bmQpO1xuICAgIC8vIHdlIG9ubHkgd2FudCB0byBtYWtlIGEgbmV3IGRlY2lzaW9uIGFmdGVyIHRoZSBlbGVtZW50IHdhcyBtb3ZlZCBhIGJpdCB0byBwcmV2ZW50IGZsaWNrZXJpbmdcbiAgICBpZiAoIXNjcm9sbGVkICYmIGxhc3RDZW50cmVQb3NpdGlvbk9mRHJhZ2dlZCAmJiBNYXRoLmFicyhsYXN0Q2VudHJlUG9zaXRpb25PZkRyYWdnZWQueCAtIGN1cnJlbnRDZW50ZXJPZkRyYWdnZWQueCkgPCBUT0xFUkFOQ0VfUFggJiYgTWF0aC5hYnMobGFzdENlbnRyZVBvc2l0aW9uT2ZEcmFnZ2VkLnkgLSBjdXJyZW50Q2VudGVyT2ZEcmFnZ2VkLnkpIDwgVE9MRVJBTkNFX1BYKSB7XG4gICAgICBuZXh0ID0gd2luZG93LnNldFRpbWVvdXQoYW5kTm93LCBpbnRlcnZhbE1zKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGlzRWxlbWVudE9mZkRvY3VtZW50KGRyYWdnZWRFbCkpIHtcbiAgICAgIHByaW50RGVidWcoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gXCJvZmYgZG9jdW1lbnRcIjtcbiAgICAgIH0pO1xuICAgICAgZGlzcGF0Y2hEcmFnZ2VkTGVmdERvY3VtZW50KGRyYWdnZWRFbCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxhc3RDZW50cmVQb3NpdGlvbk9mRHJhZ2dlZCA9IGN1cnJlbnRDZW50ZXJPZkRyYWdnZWQ7XG4gICAgLy8gdGhpcyBpcyBhIHNpbXBsZSBhbGdvcml0aG0sIHBvdGVudGlhbCBpbXByb3ZlbWVudDogZmlyc3QgbG9vayBhdCBsYXN0RHJvcFpvbmVGb3VuZFxuICAgIHZhciBpc0RyYWdnZWRJbkFEcm9wWm9uZSA9IGZhbHNlO1xuICAgIHZhciBfaXRlcmF0b3IgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihkcm9wWm9uZXNGcm9tRGVlcFRvU2hhbGxvdyksXG4gICAgICBfc3RlcDtcbiAgICB0cnkge1xuICAgICAgZm9yIChfaXRlcmF0b3IucygpOyAhKF9zdGVwID0gX2l0ZXJhdG9yLm4oKSkuZG9uZTspIHtcbiAgICAgICAgdmFyIGR6ID0gX3N0ZXAudmFsdWU7XG4gICAgICAgIGlmIChzY3JvbGxlZCkgcmVzZXRJbmRleGVzQ2FjaGVGb3JEeihsYXN0RHJvcFpvbmVGb3VuZCk7XG4gICAgICAgIHZhciBpbmRleE9iaiA9IGZpbmRXb3VsZEJlSW5kZXgoZHJhZ2dlZEVsLCBkeik7XG4gICAgICAgIGlmIChpbmRleE9iaiA9PT0gbnVsbCkge1xuICAgICAgICAgIC8vIGl0IGlzIG5vdCBpbnNpZGVcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaW5kZXggPSBpbmRleE9iai5pbmRleDtcbiAgICAgICAgaXNEcmFnZ2VkSW5BRHJvcFpvbmUgPSB0cnVlO1xuICAgICAgICAvLyB0aGUgZWxlbWVudCBpcyBvdmVyIGEgY29udGFpbmVyXG4gICAgICAgIGlmIChkeiAhPT0gbGFzdERyb3Bab25lRm91bmQpIHtcbiAgICAgICAgICBsYXN0RHJvcFpvbmVGb3VuZCAmJiBkaXNwYXRjaERyYWdnZWRFbGVtZW50TGVmdENvbnRhaW5lckZvckFub3RoZXIobGFzdERyb3Bab25lRm91bmQsIGRyYWdnZWRFbCwgZHopO1xuICAgICAgICAgIGRpc3BhdGNoRHJhZ2dlZEVsZW1lbnRFbnRlcmVkQ29udGFpbmVyKGR6LCBpbmRleE9iaiwgZHJhZ2dlZEVsKTtcbiAgICAgICAgICBsYXN0RHJvcFpvbmVGb3VuZCA9IGR6O1xuICAgICAgICB9IGVsc2UgaWYgKGluZGV4ICE9PSBsYXN0SW5kZXhGb3VuZCkge1xuICAgICAgICAgIGRpc3BhdGNoRHJhZ2dlZEVsZW1lbnRJc092ZXJJbmRleChkeiwgaW5kZXhPYmosIGRyYWdnZWRFbCk7XG4gICAgICAgICAgbGFzdEluZGV4Rm91bmQgPSBpbmRleDtcbiAgICAgICAgfVxuICAgICAgICAvLyB3ZSBoYW5kbGUgbG9vcGluZyB3aXRoIHRoZSAnY29udGludWUnIHN0YXRlbWVudCBhYm92ZVxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIC8vIHRoZSBmaXJzdCB0aW1lIHRoZSBkcmFnZ2VkIGVsZW1lbnQgaXMgbm90IGluIGFueSBkcm9wem9uZSB3ZSBuZWVkIHRvIG5vdGlmeSB0aGUgbGFzdCBkcm9wem9uZSBpdCB3YXMgaW5cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIF9pdGVyYXRvci5lKGVycik7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIF9pdGVyYXRvci5mKCk7XG4gICAgfVxuICAgIGlmICghaXNEcmFnZ2VkSW5BRHJvcFpvbmUgJiYgbGFzdElzRHJhZ2dlZEluQURyb3Bab25lICYmIGxhc3REcm9wWm9uZUZvdW5kKSB7XG4gICAgICBkaXNwYXRjaERyYWdnZWRFbGVtZW50TGVmdENvbnRhaW5lckZvck5vbmUobGFzdERyb3Bab25lRm91bmQsIGRyYWdnZWRFbCk7XG4gICAgICBsYXN0RHJvcFpvbmVGb3VuZCA9IHVuZGVmaW5lZDtcbiAgICAgIGxhc3RJbmRleEZvdW5kID0gdW5kZWZpbmVkO1xuICAgICAgbGFzdElzRHJhZ2dlZEluQURyb3Bab25lID0gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxhc3RJc0RyYWdnZWRJbkFEcm9wWm9uZSA9IHRydWU7XG4gICAgfVxuICAgIG5leHQgPSB3aW5kb3cuc2V0VGltZW91dChhbmROb3csIGludGVydmFsTXMpO1xuICB9XG4gIGFuZE5vdygpO1xufVxuXG4vLyBhc3N1bXB0aW9uIC0gd2UgY2FuIG9ubHkgb2JzZXJ2ZSBvbmUgZHJhZ2dlZCBlbGVtZW50IGF0IGEgdGltZSwgdGhpcyBjb3VsZCBiZSBjaGFuZ2VkIGluIHRoZSBmdXR1cmVcbmZ1bmN0aW9uIHVub2JzZXJ2ZSgpIHtcbiAgcHJpbnREZWJ1ZyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIFwidW5vYnNlcnZpbmdcIjtcbiAgfSk7XG4gIGNsZWFyVGltZW91dChuZXh0KTtcbiAgcmVzZXRTY3JvbGxpbmcoKTtcbiAgcmVzZXRJbmRleGVzQ2FjaGUoKTtcbn1cblxudmFyIElOVEVSVkFMX01TJDEgPSAzMDA7XG52YXIgbW91c2VQb3NpdGlvbjtcblxuLyoqXG4gKiBEbyBub3QgdXNlIHRoaXMhIGl0IGlzIHZpc2libGUgZm9yIHRlc3Rpbmcgb25seSB1bnRpbCB3ZSBnZXQgb3ZlciB0aGUgaXNzdWUgQ3lwcmVzcyBub3QgdHJpZ2dlcmluZyB0aGUgbW91c2Vtb3ZlIGxpc3RlbmVyc1xuICogLy8gVE9ETyAtIG1ha2UgcHJpdmF0ZSAocmVtb3ZlIGV4cG9ydClcbiAqIEBwYXJhbSB7e2NsaWVudFg6IG51bWJlciwgY2xpZW50WTogbnVtYmVyfX0gZVxuICovXG5mdW5jdGlvbiB1cGRhdGVNb3VzZVBvc2l0aW9uKGUpIHtcbiAgdmFyIGMgPSBlLnRvdWNoZXMgPyBlLnRvdWNoZXNbMF0gOiBlO1xuICBtb3VzZVBvc2l0aW9uID0ge1xuICAgIHg6IGMuY2xpZW50WCxcbiAgICB5OiBjLmNsaWVudFlcbiAgfTtcbn1cbnZhciBfbWFrZVNjcm9sbGVyJDEgPSBtYWtlU2Nyb2xsZXIoKSxcbiAgc2Nyb2xsSWZOZWVkZWQkMSA9IF9tYWtlU2Nyb2xsZXIkMS5zY3JvbGxJZk5lZWRlZCxcbiAgcmVzZXRTY3JvbGxpbmckMSA9IF9tYWtlU2Nyb2xsZXIkMS5yZXNldFNjcm9sbGluZztcbnZhciBuZXh0JDE7XG5mdW5jdGlvbiBsb29wKCkge1xuICBpZiAobW91c2VQb3NpdGlvbikge1xuICAgIHZhciBzY3JvbGxlZCA9IHNjcm9sbElmTmVlZGVkJDEobW91c2VQb3NpdGlvbiwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KTtcbiAgICBpZiAoc2Nyb2xsZWQpIHJlc2V0SW5kZXhlc0NhY2hlKCk7XG4gIH1cbiAgbmV4dCQxID0gd2luZG93LnNldFRpbWVvdXQobG9vcCwgSU5URVJWQUxfTVMkMSk7XG59XG5cbi8qKlxuICogd2lsbCBzdGFydCB3YXRjaGluZyB0aGUgbW91c2UgcG9pbnRlciBhbmQgc2Nyb2xsIHRoZSB3aW5kb3cgaWYgaXQgZ29lcyBuZXh0IHRvIHRoZSBlZGdlc1xuICovXG5mdW5jdGlvbiBhcm1XaW5kb3dTY3JvbGxlcigpIHtcbiAgcHJpbnREZWJ1ZyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIFwiYXJtaW5nIHdpbmRvdyBzY3JvbGxlclwiO1xuICB9KTtcbiAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgdXBkYXRlTW91c2VQb3NpdGlvbik7XG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwidG91Y2htb3ZlXCIsIHVwZGF0ZU1vdXNlUG9zaXRpb24pO1xuICBsb29wKCk7XG59XG5cbi8qKlxuICogd2lsbCBzdG9wIHdhdGNoaW5nIHRoZSBtb3VzZSBwb2ludGVyIGFuZCB3b24ndCBzY3JvbGwgdGhlIHdpbmRvdyBhbnltb3JlXG4gKi9cbmZ1bmN0aW9uIGRpc2FybVdpbmRvd1Njcm9sbGVyKCkge1xuICBwcmludERlYnVnKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gXCJkaXNhcm1pbmcgd2luZG93IHNjcm9sbGVyXCI7XG4gIH0pO1xuICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCB1cGRhdGVNb3VzZVBvc2l0aW9uKTtcbiAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0b3VjaG1vdmVcIiwgdXBkYXRlTW91c2VQb3NpdGlvbik7XG4gIG1vdXNlUG9zaXRpb24gPSB1bmRlZmluZWQ7XG4gIHdpbmRvdy5jbGVhclRpbWVvdXQobmV4dCQxKTtcbiAgcmVzZXRTY3JvbGxpbmckMSgpO1xufVxuXG4vKipcbiAqIEZpeGVzIHN2ZWx0ZSBpc3N1ZSB3aGVuIGNsb25pbmcgbm9kZSBjb250YWluaW5nIChvciBiZWluZykgPHNlbGVjdD4gd2hpY2ggd2lsbCBsb29zZSBpdCdzIHZhbHVlLlxuICogU2luY2Ugc3ZlbHRlIG1hbmFnZXMgc2VsZWN0IHZhbHVlIGludGVybmFsbHkuXG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9zdmVsdGVqcy9zdmVsdGUvaXNzdWVzLzY3MTdcbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2lzYWFjSGFnb2VsL3N2ZWx0ZS1kbmQtYWN0aW9uL2lzc3Vlcy8zMDZcbiAqIFxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWwgXG4gKiBAcmV0dXJucyBcbiAqL1xuZnVuY3Rpb24gc3ZlbHRlTm9kZUNsb25lKGVsKSB7XG4gIHZhciBjbG9uZWQgPSBlbC5jbG9uZU5vZGUodHJ1ZSk7XG4gIHZhciB2YWx1ZXMgPSBbXTtcbiAgdmFyIGVsSXNTZWxlY3QgPSBlbC50YWdOYW1lID09PSBcIlNFTEVDVFwiO1xuICB2YXIgc2VsZWN0cyA9IGVsSXNTZWxlY3QgPyBbZWxdIDogX3RvQ29uc3VtYWJsZUFycmF5KGVsLnF1ZXJ5U2VsZWN0b3JBbGwoJ3NlbGVjdCcpKTtcbiAgdmFyIF9pdGVyYXRvciA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKHNlbGVjdHMpLFxuICAgIF9zdGVwO1xuICB0cnkge1xuICAgIGZvciAoX2l0ZXJhdG9yLnMoKTsgIShfc3RlcCA9IF9pdGVyYXRvci5uKCkpLmRvbmU7KSB7XG4gICAgICB2YXIgX3NlbGVjdCA9IF9zdGVwLnZhbHVlO1xuICAgICAgdmFsdWVzLnB1c2goX3NlbGVjdC52YWx1ZSk7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBfaXRlcmF0b3IuZShlcnIpO1xuICB9IGZpbmFsbHkge1xuICAgIF9pdGVyYXRvci5mKCk7XG4gIH1cbiAgaWYgKHNlbGVjdHMubGVuZ3RoIDw9IDApIHtcbiAgICByZXR1cm4gY2xvbmVkO1xuICB9XG4gIHZhciBjbG9uZWRTZWxlY3RzID0gZWxJc1NlbGVjdCA/IFtjbG9uZWRdIDogX3RvQ29uc3VtYWJsZUFycmF5KGNsb25lZC5xdWVyeVNlbGVjdG9yQWxsKCdzZWxlY3QnKSk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgY2xvbmVkU2VsZWN0cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzZWxlY3QgPSBjbG9uZWRTZWxlY3RzW2ldO1xuICAgIHZhciB2YWx1ZSA9IHZhbHVlc1tpXTtcbiAgICB2YXIgb3B0aW9uRWwgPSBzZWxlY3QucXVlcnlTZWxlY3RvcihcIm9wdGlvblt2YWx1ZT1cXFwiXCIuY29uY2F0KHZhbHVlLCBcIlxcXCJcIikpO1xuICAgIGlmIChvcHRpb25FbCkge1xuICAgICAgb3B0aW9uRWwuc2V0QXR0cmlidXRlKCdzZWxlY3RlZCcsIHRydWUpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gY2xvbmVkO1xufVxuXG52YXIgVFJBTlNJVElPTl9EVVJBVElPTl9TRUNPTkRTID0gMC4yO1xuXG4vKipcbiAqIHByaXZhdGUgaGVscGVyIGZ1bmN0aW9uIC0gY3JlYXRlcyBhIHRyYW5zaXRpb24gc3RyaW5nIGZvciBhIHByb3BlcnR5XG4gKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHlcbiAqIEByZXR1cm4ge3N0cmluZ30gLSB0aGUgdHJhbnNpdGlvbiBzdHJpbmdcbiAqL1xuZnVuY3Rpb24gdHJzKHByb3BlcnR5KSB7XG4gIHJldHVybiBcIlwiLmNvbmNhdChwcm9wZXJ0eSwgXCIgXCIpLmNvbmNhdChUUkFOU0lUSU9OX0RVUkFUSU9OX1NFQ09ORFMsIFwicyBlYXNlXCIpO1xufVxuLyoqXG4gKiBjbG9uZXMgdGhlIGdpdmVuIGVsZW1lbnQgYW5kIGFwcGxpZXMgcHJvcGVyIHN0eWxlcyBhbmQgdHJhbnNpdGlvbnMgdG8gdGhlIGRyYWdnZWQgZWxlbWVudFxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gb3JpZ2luYWxFbGVtZW50XG4gKiBAcGFyYW0ge1BvaW50fSBbcG9zaXRpb25DZW50ZXJPblhZXVxuICogQHJldHVybiB7Tm9kZX0gLSB0aGUgY2xvbmVkLCBzdHlsZWQgZWxlbWVudFxuICovXG5mdW5jdGlvbiBjcmVhdGVEcmFnZ2VkRWxlbWVudEZyb20ob3JpZ2luYWxFbGVtZW50LCBwb3NpdGlvbkNlbnRlck9uWFkpIHtcbiAgdmFyIHJlY3QgPSBvcmlnaW5hbEVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIHZhciBkcmFnZ2VkRWwgPSBzdmVsdGVOb2RlQ2xvbmUob3JpZ2luYWxFbGVtZW50KTtcbiAgY29weVN0eWxlc0Zyb21UbyhvcmlnaW5hbEVsZW1lbnQsIGRyYWdnZWRFbCk7XG4gIGRyYWdnZWRFbC5pZCA9IERSQUdHRURfRUxFTUVOVF9JRDtcbiAgZHJhZ2dlZEVsLnN0eWxlLnBvc2l0aW9uID0gXCJmaXhlZFwiO1xuICB2YXIgZWxUb3BQeCA9IHJlY3QudG9wO1xuICB2YXIgZWxMZWZ0UHggPSByZWN0LmxlZnQ7XG4gIGRyYWdnZWRFbC5zdHlsZS50b3AgPSBcIlwiLmNvbmNhdChlbFRvcFB4LCBcInB4XCIpO1xuICBkcmFnZ2VkRWwuc3R5bGUubGVmdCA9IFwiXCIuY29uY2F0KGVsTGVmdFB4LCBcInB4XCIpO1xuICBpZiAocG9zaXRpb25DZW50ZXJPblhZKSB7XG4gICAgdmFyIGNlbnRlciA9IGZpbmRDZW50ZXIocmVjdCk7XG4gICAgZWxUb3BQeCAtPSBjZW50ZXIueSAtIHBvc2l0aW9uQ2VudGVyT25YWS55O1xuICAgIGVsTGVmdFB4IC09IGNlbnRlci54IC0gcG9zaXRpb25DZW50ZXJPblhZLng7XG4gICAgd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgZHJhZ2dlZEVsLnN0eWxlLnRvcCA9IFwiXCIuY29uY2F0KGVsVG9wUHgsIFwicHhcIik7XG4gICAgICBkcmFnZ2VkRWwuc3R5bGUubGVmdCA9IFwiXCIuY29uY2F0KGVsTGVmdFB4LCBcInB4XCIpO1xuICAgIH0sIDApO1xuICB9XG4gIGRyYWdnZWRFbC5zdHlsZS5tYXJnaW4gPSBcIjBcIjtcbiAgLy8gd2UgY2FuJ3QgaGF2ZSByZWxhdGl2ZSBvciBhdXRvbWF0aWMgaGVpZ2h0IGFuZCB3aWR0aCBvciBpdCB3aWxsIGJyZWFrIHRoZSBpbGx1c2lvblxuICBkcmFnZ2VkRWwuc3R5bGUuYm94U2l6aW5nID0gXCJib3JkZXItYm94XCI7XG4gIGRyYWdnZWRFbC5zdHlsZS5oZWlnaHQgPSBcIlwiLmNvbmNhdChyZWN0LmhlaWdodCwgXCJweFwiKTtcbiAgZHJhZ2dlZEVsLnN0eWxlLndpZHRoID0gXCJcIi5jb25jYXQocmVjdC53aWR0aCwgXCJweFwiKTtcbiAgZHJhZ2dlZEVsLnN0eWxlLnRyYW5zaXRpb24gPSBcIlwiLmNvbmNhdCh0cnMoXCJ0b3BcIiksIFwiLCBcIikuY29uY2F0KHRycyhcImxlZnRcIiksIFwiLCBcIikuY29uY2F0KHRycyhcImJhY2tncm91bmQtY29sb3JcIiksIFwiLCBcIikuY29uY2F0KHRycyhcIm9wYWNpdHlcIiksIFwiLCBcIikuY29uY2F0KHRycyhcImNvbG9yXCIpLCBcIiBcIik7XG4gIC8vIHRoaXMgaXMgYSB3b3JrYXJvdW5kIGZvciBhIHN0cmFuZ2UgYnJvd3NlciBidWcgdGhhdCBjYXVzZXMgdGhlIHJpZ2h0IGJvcmRlciB0byBkaXNhcHBlYXIgd2hlbiBhbGwgdGhlIHRyYW5zaXRpb25zIGFyZSBhZGRlZCBhdCB0aGUgc2FtZSB0aW1lXG4gIHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZHJhZ2dlZEVsLnN0eWxlLnRyYW5zaXRpb24gKz0gXCIsIFwiLmNvbmNhdCh0cnMoXCJ3aWR0aFwiKSwgXCIsIFwiKS5jb25jYXQodHJzKFwiaGVpZ2h0XCIpKTtcbiAgfSwgMCk7XG4gIGRyYWdnZWRFbC5zdHlsZS56SW5kZXggPSBcIjk5OTlcIjtcbiAgZHJhZ2dlZEVsLnN0eWxlLmN1cnNvciA9IFwiZ3JhYmJpbmdcIjtcbiAgcmV0dXJuIGRyYWdnZWRFbDtcbn1cblxuLyoqXG4gKiBzdHlsZXMgdGhlIGRyYWdnZWQgZWxlbWVudCB0byBhICdkcm9wcGVkJyBzdGF0ZVxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZHJhZ2dlZEVsXG4gKi9cbmZ1bmN0aW9uIG1vdmVEcmFnZ2VkRWxlbWVudFRvV2FzRHJvcHBlZFN0YXRlKGRyYWdnZWRFbCkge1xuICBkcmFnZ2VkRWwuc3R5bGUuY3Vyc29yID0gXCJncmFiXCI7XG59XG5cbi8qKlxuICogTW9ycGhzIHRoZSBkcmFnZ2VkIGVsZW1lbnQgc3R5bGUsIG1haW50YWlucyB0aGUgbW91c2UgcG9pbnRlciB3aXRoaW4gdGhlIGVsZW1lbnRcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGRyYWdnZWRFbFxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gY29weUZyb21FbCAtIHRoZSBlbGVtZW50IHRoZSBkcmFnZ2VkIGVsZW1lbnQgc2hvdWxkIGxvb2sgbGlrZSwgdHlwaWNhbGx5IHRoZSBzaGFkb3cgZWxlbWVudFxuICogQHBhcmFtIHtudW1iZXJ9IGN1cnJlbnRNb3VzZVhcbiAqIEBwYXJhbSB7bnVtYmVyfSBjdXJyZW50TW91c2VZXG4gKi9cbmZ1bmN0aW9uIG1vcnBoRHJhZ2dlZEVsZW1lbnRUb0JlTGlrZShkcmFnZ2VkRWwsIGNvcHlGcm9tRWwsIGN1cnJlbnRNb3VzZVgsIGN1cnJlbnRNb3VzZVkpIHtcbiAgY29weVN0eWxlc0Zyb21Ubyhjb3B5RnJvbUVsLCBkcmFnZ2VkRWwpO1xuICB2YXIgbmV3UmVjdCA9IGNvcHlGcm9tRWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIHZhciBkcmFnZ2VkRWxSZWN0ID0gZHJhZ2dlZEVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICB2YXIgd2lkdGhDaGFuZ2UgPSBuZXdSZWN0LndpZHRoIC0gZHJhZ2dlZEVsUmVjdC53aWR0aDtcbiAgdmFyIGhlaWdodENoYW5nZSA9IG5ld1JlY3QuaGVpZ2h0IC0gZHJhZ2dlZEVsUmVjdC5oZWlnaHQ7XG4gIGlmICh3aWR0aENoYW5nZSB8fCBoZWlnaHRDaGFuZ2UpIHtcbiAgICB2YXIgcmVsYXRpdmVEaXN0YW5jZU9mTW91c2VQb2ludGVyRnJvbURyYWdnZWRTaWRlcyA9IHtcbiAgICAgIGxlZnQ6IChjdXJyZW50TW91c2VYIC0gZHJhZ2dlZEVsUmVjdC5sZWZ0KSAvIGRyYWdnZWRFbFJlY3Qud2lkdGgsXG4gICAgICB0b3A6IChjdXJyZW50TW91c2VZIC0gZHJhZ2dlZEVsUmVjdC50b3ApIC8gZHJhZ2dlZEVsUmVjdC5oZWlnaHRcbiAgICB9O1xuICAgIGRyYWdnZWRFbC5zdHlsZS5oZWlnaHQgPSBcIlwiLmNvbmNhdChuZXdSZWN0LmhlaWdodCwgXCJweFwiKTtcbiAgICBkcmFnZ2VkRWwuc3R5bGUud2lkdGggPSBcIlwiLmNvbmNhdChuZXdSZWN0LndpZHRoLCBcInB4XCIpO1xuICAgIGRyYWdnZWRFbC5zdHlsZS5sZWZ0ID0gXCJcIi5jb25jYXQocGFyc2VGbG9hdChkcmFnZ2VkRWwuc3R5bGUubGVmdCkgLSByZWxhdGl2ZURpc3RhbmNlT2ZNb3VzZVBvaW50ZXJGcm9tRHJhZ2dlZFNpZGVzLmxlZnQgKiB3aWR0aENoYW5nZSwgXCJweFwiKTtcbiAgICBkcmFnZ2VkRWwuc3R5bGUudG9wID0gXCJcIi5jb25jYXQocGFyc2VGbG9hdChkcmFnZ2VkRWwuc3R5bGUudG9wKSAtIHJlbGF0aXZlRGlzdGFuY2VPZk1vdXNlUG9pbnRlckZyb21EcmFnZ2VkU2lkZXMudG9wICogaGVpZ2h0Q2hhbmdlLCBcInB4XCIpO1xuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gY29weUZyb21FbFxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gY29weVRvRWxcbiAqL1xuZnVuY3Rpb24gY29weVN0eWxlc0Zyb21Ubyhjb3B5RnJvbUVsLCBjb3B5VG9FbCkge1xuICB2YXIgY29tcHV0ZWRTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGNvcHlGcm9tRWwpO1xuICBBcnJheS5mcm9tKGNvbXB1dGVkU3R5bGUpLmZpbHRlcihmdW5jdGlvbiAocykge1xuICAgIHJldHVybiBzLnN0YXJ0c1dpdGgoXCJiYWNrZ3JvdW5kXCIpIHx8IHMuc3RhcnRzV2l0aChcInBhZGRpbmdcIikgfHwgcy5zdGFydHNXaXRoKFwiZm9udFwiKSB8fCBzLnN0YXJ0c1dpdGgoXCJ0ZXh0XCIpIHx8IHMuc3RhcnRzV2l0aChcImFsaWduXCIpIHx8IHMuc3RhcnRzV2l0aChcImp1c3RpZnlcIikgfHwgcy5zdGFydHNXaXRoKFwiZGlzcGxheVwiKSB8fCBzLnN0YXJ0c1dpdGgoXCJmbGV4XCIpIHx8IHMuc3RhcnRzV2l0aChcImJvcmRlclwiKSB8fCBzID09PSBcIm9wYWNpdHlcIiB8fCBzID09PSBcImNvbG9yXCIgfHwgcyA9PT0gXCJsaXN0LXN0eWxlLXR5cGVcIjtcbiAgfSkuZm9yRWFjaChmdW5jdGlvbiAocykge1xuICAgIHJldHVybiBjb3B5VG9FbC5zdHlsZS5zZXRQcm9wZXJ0eShzLCBjb21wdXRlZFN0eWxlLmdldFByb3BlcnR5VmFsdWUocyksIGNvbXB1dGVkU3R5bGUuZ2V0UHJvcGVydHlQcmlvcml0eShzKSk7XG4gIH0pO1xufVxuXG4vKipcbiAqIG1ha2VzIHRoZSBlbGVtZW50IGNvbXBhdGlibGUgd2l0aCBiZWluZyBkcmFnZ2FibGVcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGRyYWdnYWJsZUVsXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGRyYWdEaXNhYmxlZFxuICovXG5mdW5jdGlvbiBzdHlsZURyYWdnYWJsZShkcmFnZ2FibGVFbCwgZHJhZ0Rpc2FibGVkKSB7XG4gIGRyYWdnYWJsZUVsLmRyYWdnYWJsZSA9IGZhbHNlO1xuICBkcmFnZ2FibGVFbC5vbmRyYWdzdGFydCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG4gIGlmICghZHJhZ0Rpc2FibGVkKSB7XG4gICAgZHJhZ2dhYmxlRWwuc3R5bGUudXNlclNlbGVjdCA9IFwibm9uZVwiO1xuICAgIGRyYWdnYWJsZUVsLnN0eWxlLldlYmtpdFVzZXJTZWxlY3QgPSBcIm5vbmVcIjtcbiAgICBkcmFnZ2FibGVFbC5zdHlsZS5jdXJzb3IgPSBcImdyYWJcIjtcbiAgfSBlbHNlIHtcbiAgICBkcmFnZ2FibGVFbC5zdHlsZS51c2VyU2VsZWN0ID0gXCJcIjtcbiAgICBkcmFnZ2FibGVFbC5zdHlsZS5XZWJraXRVc2VyU2VsZWN0ID0gXCJcIjtcbiAgICBkcmFnZ2FibGVFbC5zdHlsZS5jdXJzb3IgPSBcIlwiO1xuICB9XG59XG5cbi8qKlxuICogSGlkZXMgdGhlIHByb3ZpZGVkIGVsZW1lbnQgc28gdGhhdCBpdCBjYW4gc3RheSBpbiB0aGUgZG9tIHdpdGhvdXQgaW50ZXJydXB0aW5nXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBkcmFnVGFyZ2V0XG4gKi9cbmZ1bmN0aW9uIGhpZGVFbGVtZW50KGRyYWdUYXJnZXQpIHtcbiAgZHJhZ1RhcmdldC5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gIGRyYWdUYXJnZXQuc3R5bGUucG9zaXRpb24gPSBcImZpeGVkXCI7XG4gIGRyYWdUYXJnZXQuc3R5bGUuekluZGV4ID0gXCItNVwiO1xufVxuXG4vKipcbiAqIHN0eWxlcyB0aGUgc2hhZG93IGVsZW1lbnRcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHNoYWRvd0VsXG4gKi9cbmZ1bmN0aW9uIGRlY29yYXRlU2hhZG93RWwoc2hhZG93RWwpIHtcbiAgc2hhZG93RWwuc3R5bGUudmlzaWJpbGl0eSA9IFwiaGlkZGVuXCI7XG4gIHNoYWRvd0VsLnNldEF0dHJpYnV0ZShTSEFET1dfRUxFTUVOVF9BVFRSSUJVVEVfTkFNRSwgXCJ0cnVlXCIpO1xufVxuXG4vKipcbiAqIHVuZG8gdGhlIHN0eWxlcyB0aGUgc2hhZG93IGVsZW1lbnRcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHNoYWRvd0VsXG4gKi9cbmZ1bmN0aW9uIHVuRGVjb3JhdGVTaGFkb3dFbGVtZW50KHNoYWRvd0VsKSB7XG4gIHNoYWRvd0VsLnN0eWxlLnZpc2liaWxpdHkgPSBcIlwiO1xuICBzaGFkb3dFbC5yZW1vdmVBdHRyaWJ1dGUoU0hBRE9XX0VMRU1FTlRfQVRUUklCVVRFX05BTUUpO1xufVxuXG4vKipcbiAqIHdpbGwgbWFyayB0aGUgZ2l2ZW4gZHJvcHpvbmVzIGFzIHZpc3VhbGx5IGFjdGl2ZVxuICogQHBhcmFtIHtBcnJheTxIVE1MRWxlbWVudD59IGRyb3Bab25lc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZ2V0U3R5bGVzIC0gbWFwcyBhIGRyb3B6b25lIHRvIGEgc3R5bGVzIG9iamVjdCAoc28gdGhlIHN0eWxlcyBjYW4gYmUgcmVtb3ZlZClcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGdldENsYXNzZXMgLSBtYXBzIGEgZHJvcHpvbmUgdG8gYSBjbGFzc0xpc3RcbiAqL1xuZnVuY3Rpb24gc3R5bGVBY3RpdmVEcm9wWm9uZXMoZHJvcFpvbmVzKSB7XG4gIHZhciBnZXRTdHlsZXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGZ1bmN0aW9uICgpIHt9O1xuICB2YXIgZ2V0Q2xhc3NlcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBbXTtcbiAgfTtcbiAgZHJvcFpvbmVzLmZvckVhY2goZnVuY3Rpb24gKGR6KSB7XG4gICAgdmFyIHN0eWxlcyA9IGdldFN0eWxlcyhkeik7XG4gICAgT2JqZWN0LmtleXMoc3R5bGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChzdHlsZSkge1xuICAgICAgZHouc3R5bGVbc3R5bGVdID0gc3R5bGVzW3N0eWxlXTtcbiAgICB9KTtcbiAgICBnZXRDbGFzc2VzKGR6KS5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7XG4gICAgICByZXR1cm4gZHouY2xhc3NMaXN0LmFkZChjKTtcbiAgICB9KTtcbiAgfSk7XG59XG5cbi8qKlxuICogd2lsbCByZW1vdmUgdGhlICdhY3RpdmUnIHN0eWxpbmcgZnJvbSBnaXZlbiBkcm9wem9uZXNcbiAqIEBwYXJhbSB7QXJyYXk8SFRNTEVsZW1lbnQ+fSBkcm9wWm9uZXNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGdldFN0eWxlcyAtIG1hcHMgYSBkcm9wem9uZSB0byBhIHN0eWxlcyBvYmplY3RcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGdldENsYXNzZXMgLSBtYXBzIGEgZHJvcHpvbmUgdG8gYSBjbGFzc0xpc3RcbiAqL1xuZnVuY3Rpb24gc3R5bGVJbmFjdGl2ZURyb3Bab25lcyhkcm9wWm9uZXMpIHtcbiAgdmFyIGdldFN0eWxlcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZnVuY3Rpb24gKCkge307XG4gIHZhciBnZXRDbGFzc2VzID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9O1xuICBkcm9wWm9uZXMuZm9yRWFjaChmdW5jdGlvbiAoZHopIHtcbiAgICB2YXIgc3R5bGVzID0gZ2V0U3R5bGVzKGR6KTtcbiAgICBPYmplY3Qua2V5cyhzdHlsZXMpLmZvckVhY2goZnVuY3Rpb24gKHN0eWxlKSB7XG4gICAgICBkei5zdHlsZVtzdHlsZV0gPSBcIlwiO1xuICAgIH0pO1xuICAgIGdldENsYXNzZXMoZHopLmZvckVhY2goZnVuY3Rpb24gKGMpIHtcbiAgICAgIHJldHVybiBkei5jbGFzc0xpc3QuY29udGFpbnMoYykgJiYgZHouY2xhc3NMaXN0LnJlbW92ZShjKTtcbiAgICB9KTtcbiAgfSk7XG59XG5cbi8qKlxuICogd2lsbCBwcmV2ZW50IHRoZSBwcm92aWRlZCBlbGVtZW50IGZyb20gc2hyaW5raW5nIGJ5IHNldHRpbmcgaXRzIG1pbldpZHRoIGFuZCBtaW5IZWlnaHQgdG8gdGhlIGN1cnJlbnQgd2lkdGggYW5kIGhlaWdodCB2YWx1ZXNcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsXG4gKiBAcmV0dXJuIHtmdW5jdGlvbigpOiB2b2lkfSAtIHJ1biB0aGlzIGZ1bmN0aW9uIHRvIHVuZG8gdGhlIG9wZXJhdGlvbiBhbmQgcmVzdG9yZSB0aGUgb3JpZ2luYWwgdmFsdWVzXG4gKi9cbmZ1bmN0aW9uIHByZXZlbnRTaHJpbmtpbmcoZWwpIHtcbiAgdmFyIG9yaWdpbmFsTWluSGVpZ2h0ID0gZWwuc3R5bGUubWluSGVpZ2h0O1xuICBlbC5zdHlsZS5taW5IZWlnaHQgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCkuZ2V0UHJvcGVydHlWYWx1ZShcImhlaWdodFwiKTtcbiAgdmFyIG9yaWdpbmFsTWluV2lkdGggPSBlbC5zdHlsZS5taW5XaWR0aDtcbiAgZWwuc3R5bGUubWluV2lkdGggPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCkuZ2V0UHJvcGVydHlWYWx1ZShcIndpZHRoXCIpO1xuICByZXR1cm4gZnVuY3Rpb24gdW5kbygpIHtcbiAgICBlbC5zdHlsZS5taW5IZWlnaHQgPSBvcmlnaW5hbE1pbkhlaWdodDtcbiAgICBlbC5zdHlsZS5taW5XaWR0aCA9IG9yaWdpbmFsTWluV2lkdGg7XG4gIH07XG59XG5cbnZhciBERUZBVUxUX0RST1BfWk9ORV9UWVBFID0gXCItLWFueS0tXCI7XG52YXIgTUlOX09CU0VSVkFUSU9OX0lOVEVSVkFMX01TID0gMTAwO1xudmFyIE1JTl9NT1ZFTUVOVF9CRUZPUkVfRFJBR19TVEFSVF9QWCA9IDM7XG52YXIgREVGQVVMVF9EUk9QX1RBUkdFVF9TVFlMRSA9IHtcbiAgb3V0bGluZTogXCJyZ2JhKDI1NSwgMjU1LCAxMDIsIDAuNykgc29saWQgMnB4XCJcbn07XG52YXIgb3JpZ2luYWxEcmFnVGFyZ2V0O1xudmFyIGRyYWdnZWRFbDtcbnZhciBkcmFnZ2VkRWxEYXRhO1xudmFyIGRyYWdnZWRFbFR5cGU7XG52YXIgb3JpZ2luRHJvcFpvbmU7XG52YXIgb3JpZ2luSW5kZXg7XG52YXIgc2hhZG93RWxEYXRhO1xudmFyIHNoYWRvd0VsRHJvcFpvbmU7XG52YXIgZHJhZ1N0YXJ0TW91c2VQb3NpdGlvbjtcbnZhciBjdXJyZW50TW91c2VQb3NpdGlvbjtcbnZhciBpc1dvcmtpbmdPblByZXZpb3VzRHJhZyA9IGZhbHNlO1xudmFyIGZpbmFsaXppbmdQcmV2aW91c0RyYWcgPSBmYWxzZTtcbnZhciB1bmxvY2tPcmlnaW5Eek1pbkRpbWVuc2lvbnM7XG52YXIgaXNEcmFnZ2VkT3V0c2lkZU9mQW55RHogPSBmYWxzZTtcbnZhciBzY2hlZHVsZWRGb3JSZW1vdmFsQWZ0ZXJEcm9wID0gW107XG5cbi8vIGEgbWFwIGZyb20gdHlwZSB0byBhIHNldCBvZiBkcm9wLXpvbmVzXG52YXIgdHlwZVRvRHJvcFpvbmVzID0gbmV3IE1hcCgpO1xuLy8gaW1wb3J0YW50IC0gdGhpcyBpcyBuZWVkZWQgYmVjYXVzZSBvdGhlcndpc2UgdGhlIGNvbmZpZyB0aGF0IHdvdWxkIGJlIHVzZWQgZm9yIGV2ZXJ5b25lIGlzIHRoZSBjb25maWcgb2YgdGhlIGVsZW1lbnQgdGhhdCBjcmVhdGVkIHRoZSBldmVudCBsaXN0ZW5lcnNcbnZhciBkelRvQ29uZmlnID0gbmV3IE1hcCgpO1xuLy8gdGhpcyBpcyBuZWVkZWQgaW4gb3JkZXIgdG8gYmUgYWJsZSB0byBjbGVhbnVwIG9sZCBsaXN0ZW5lcnMgYW5kIGF2b2lkIHN0YWxlIGNsb3N1cmVzIGlzc3VlcyAoYXMgdGhlIGxpc3RlbmVyIGlzIGRlZmluZWQgd2l0aGluIGVhY2ggem9uZSlcbnZhciBlbFRvTW91c2VEb3duTGlzdGVuZXIgPSBuZXcgV2Vha01hcCgpO1xuXG4vKiBkcm9wLXpvbmVzIHJlZ2lzdHJhdGlvbiBtYW5hZ2VtZW50ICovXG5mdW5jdGlvbiByZWdpc3RlckRyb3Bab25lKGRyb3Bab25lRWwsIHR5cGUpIHtcbiAgcHJpbnREZWJ1ZyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIFwicmVnaXN0ZXJpbmcgZHJvcC16b25lIGlmIGFic2VudFwiO1xuICB9KTtcbiAgaWYgKCF0eXBlVG9Ecm9wWm9uZXMuaGFzKHR5cGUpKSB7XG4gICAgdHlwZVRvRHJvcFpvbmVzLnNldCh0eXBlLCBuZXcgU2V0KCkpO1xuICB9XG4gIGlmICghdHlwZVRvRHJvcFpvbmVzLmdldCh0eXBlKS5oYXMoZHJvcFpvbmVFbCkpIHtcbiAgICB0eXBlVG9Ecm9wWm9uZXMuZ2V0KHR5cGUpLmFkZChkcm9wWm9uZUVsKTtcbiAgICBpbmNyZW1lbnRBY3RpdmVEcm9wWm9uZUNvdW50KCk7XG4gIH1cbn1cbmZ1bmN0aW9uIHVucmVnaXN0ZXJEcm9wWm9uZShkcm9wWm9uZUVsLCB0eXBlKSB7XG4gIHR5cGVUb0Ryb3Bab25lcy5nZXQodHlwZSlbXCJkZWxldGVcIl0oZHJvcFpvbmVFbCk7XG4gIGRlY3JlbWVudEFjdGl2ZURyb3Bab25lQ291bnQoKTtcbiAgaWYgKHR5cGVUb0Ryb3Bab25lcy5nZXQodHlwZSkuc2l6ZSA9PT0gMCkge1xuICAgIHR5cGVUb0Ryb3Bab25lc1tcImRlbGV0ZVwiXSh0eXBlKTtcbiAgfVxufVxuXG4vKiBmdW5jdGlvbnMgdG8gbWFuYWdlIG9ic2VydmluZyB0aGUgZHJhZ2dlZCBlbGVtZW50IGFuZCB0cmlnZ2VyIGN1c3RvbSBkcmFnLWV2ZW50cyAqL1xuZnVuY3Rpb24gd2F0Y2hEcmFnZ2VkRWxlbWVudCgpIHtcbiAgcHJpbnREZWJ1ZyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIFwid2F0Y2hpbmcgZHJhZ2dlZCBlbGVtZW50XCI7XG4gIH0pO1xuICBhcm1XaW5kb3dTY3JvbGxlcigpO1xuICB2YXIgZHJvcFpvbmVzID0gdHlwZVRvRHJvcFpvbmVzLmdldChkcmFnZ2VkRWxUeXBlKTtcbiAgdmFyIF9pdGVyYXRvciA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGRyb3Bab25lcyksXG4gICAgX3N0ZXA7XG4gIHRyeSB7XG4gICAgZm9yIChfaXRlcmF0b3IucygpOyAhKF9zdGVwID0gX2l0ZXJhdG9yLm4oKSkuZG9uZTspIHtcbiAgICAgIHZhciBkeiA9IF9zdGVwLnZhbHVlO1xuICAgICAgZHouYWRkRXZlbnRMaXN0ZW5lcihEUkFHR0VEX0VOVEVSRURfRVZFTlRfTkFNRSwgaGFuZGxlRHJhZ2dlZEVudGVyZWQpO1xuICAgICAgZHouYWRkRXZlbnRMaXN0ZW5lcihEUkFHR0VEX0xFRlRfRVZFTlRfTkFNRSwgaGFuZGxlRHJhZ2dlZExlZnQpO1xuICAgICAgZHouYWRkRXZlbnRMaXN0ZW5lcihEUkFHR0VEX09WRVJfSU5ERVhfRVZFTlRfTkFNRSwgaGFuZGxlRHJhZ2dlZElzT3ZlckluZGV4KTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIF9pdGVyYXRvci5lKGVycik7XG4gIH0gZmluYWxseSB7XG4gICAgX2l0ZXJhdG9yLmYoKTtcbiAgfVxuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihEUkFHR0VEX0xFRlRfRE9DVU1FTlRfRVZFTlRfTkFNRSwgaGFuZGxlRHJvcCk7XG4gIC8vIGl0IGlzIGltcG9ydGFudCB0aGF0IHdlIGRvbid0IGhhdmUgYW4gaW50ZXJ2YWwgdGhhdCBpcyBmYXN0ZXIgdGhhbiB0aGUgZmxpcCBkdXJhdGlvbiBiZWNhdXNlIGl0IGNhbiBjYXVzZSBlbGVtZW50cyB0byBqdW1wIGJhY2ggYW5kIGZvcnRoXG4gIHZhciBvYnNlcnZhdGlvbkludGVydmFsTXMgPSBNYXRoLm1heC5hcHBseShNYXRoLCBbTUlOX09CU0VSVkFUSU9OX0lOVEVSVkFMX01TXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KEFycmF5LmZyb20oZHJvcFpvbmVzLmtleXMoKSkubWFwKGZ1bmN0aW9uIChkeikge1xuICAgIHJldHVybiBkelRvQ29uZmlnLmdldChkeikuZHJvcEFuaW1hdGlvbkR1cmF0aW9uTXM7XG4gIH0pKSkpO1xuICBvYnNlcnZlKGRyYWdnZWRFbCwgZHJvcFpvbmVzLCBvYnNlcnZhdGlvbkludGVydmFsTXMgKiAxLjA3KTtcbn1cbmZ1bmN0aW9uIHVuV2F0Y2hEcmFnZ2VkRWxlbWVudCgpIHtcbiAgcHJpbnREZWJ1ZyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIFwidW53YXRjaGluZyBkcmFnZ2VkIGVsZW1lbnRcIjtcbiAgfSk7XG4gIGRpc2FybVdpbmRvd1Njcm9sbGVyKCk7XG4gIHZhciBkcm9wWm9uZXMgPSB0eXBlVG9Ecm9wWm9uZXMuZ2V0KGRyYWdnZWRFbFR5cGUpO1xuICB2YXIgX2l0ZXJhdG9yMiA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGRyb3Bab25lcyksXG4gICAgX3N0ZXAyO1xuICB0cnkge1xuICAgIGZvciAoX2l0ZXJhdG9yMi5zKCk7ICEoX3N0ZXAyID0gX2l0ZXJhdG9yMi5uKCkpLmRvbmU7KSB7XG4gICAgICB2YXIgZHogPSBfc3RlcDIudmFsdWU7XG4gICAgICBkei5yZW1vdmVFdmVudExpc3RlbmVyKERSQUdHRURfRU5URVJFRF9FVkVOVF9OQU1FLCBoYW5kbGVEcmFnZ2VkRW50ZXJlZCk7XG4gICAgICBkei5yZW1vdmVFdmVudExpc3RlbmVyKERSQUdHRURfTEVGVF9FVkVOVF9OQU1FLCBoYW5kbGVEcmFnZ2VkTGVmdCk7XG4gICAgICBkei5yZW1vdmVFdmVudExpc3RlbmVyKERSQUdHRURfT1ZFUl9JTkRFWF9FVkVOVF9OQU1FLCBoYW5kbGVEcmFnZ2VkSXNPdmVySW5kZXgpO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgX2l0ZXJhdG9yMi5lKGVycik7XG4gIH0gZmluYWxseSB7XG4gICAgX2l0ZXJhdG9yMi5mKCk7XG4gIH1cbiAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoRFJBR0dFRF9MRUZUX0RPQ1VNRU5UX0VWRU5UX05BTUUsIGhhbmRsZURyb3ApO1xuICB1bm9ic2VydmUoKTtcbn1cblxuLy8gZmluZHMgdGhlIGluaXRpYWwgcGxhY2Vob2xkZXIgdGhhdCBpcyBwbGFjZWQgdGhlcmUgb24gZHJhZyBzdGFydFxuZnVuY3Rpb24gZmluZFNoYWRvd1BsYWNlSG9sZGVySWR4KGl0ZW1zKSB7XG4gIHJldHVybiBpdGVtcy5maW5kSW5kZXgoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICByZXR1cm4gaXRlbVtJVEVNX0lEX0tFWV0gPT09IFNIQURPV19QTEFDRUhPTERFUl9JVEVNX0lEO1xuICB9KTtcbn1cbmZ1bmN0aW9uIGZpbmRTaGFkb3dFbGVtZW50SWR4KGl0ZW1zKSB7XG4gIC8vIGNoZWNraW5nIHRoYXQgdGhlIGlkIGlzIG5vdCB0aGUgcGxhY2Vob2xkZXIncyBmb3IgRHJhZ3VsYSBsaWtlIHVzZWNhc2VzXG4gIHJldHVybiBpdGVtcy5maW5kSW5kZXgoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICByZXR1cm4gISFpdGVtW1NIQURPV19JVEVNX01BUktFUl9QUk9QRVJUWV9OQU1FXSAmJiBpdGVtW0lURU1fSURfS0VZXSAhPT0gU0hBRE9XX1BMQUNFSE9MREVSX0lURU1fSUQ7XG4gIH0pO1xufVxuXG4vKiBjdXN0b20gZHJhZy1ldmVudHMgaGFuZGxlcnMgKi9cbmZ1bmN0aW9uIGhhbmRsZURyYWdnZWRFbnRlcmVkKGUpIHtcbiAgcHJpbnREZWJ1ZyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIFtcImRyYWdnZWQgZW50ZXJlZFwiLCBlLmN1cnJlbnRUYXJnZXQsIGUuZGV0YWlsXTtcbiAgfSk7XG4gIHZhciBfZHpUb0NvbmZpZyRnZXQgPSBkelRvQ29uZmlnLmdldChlLmN1cnJlbnRUYXJnZXQpLFxuICAgIGl0ZW1zID0gX2R6VG9Db25maWckZ2V0Lml0ZW1zLFxuICAgIGRyb3BGcm9tT3RoZXJzRGlzYWJsZWQgPSBfZHpUb0NvbmZpZyRnZXQuZHJvcEZyb21PdGhlcnNEaXNhYmxlZDtcbiAgaWYgKGRyb3BGcm9tT3RoZXJzRGlzYWJsZWQgJiYgZS5jdXJyZW50VGFyZ2V0ICE9PSBvcmlnaW5Ecm9wWm9uZSkge1xuICAgIHByaW50RGVidWcoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIFwiaWdub3JpbmcgZHJhZ2dlZCBlbnRlcmVkIGJlY2F1c2UgZHJvcCBpcyBjdXJyZW50bHkgZGlzYWJsZWRcIjtcbiAgICB9KTtcbiAgICByZXR1cm47XG4gIH1cbiAgaXNEcmFnZ2VkT3V0c2lkZU9mQW55RHogPSBmYWxzZTtcbiAgLy8gdGhpcyBkZWFscyB3aXRoIGFub3RoZXIgcmFjZSBjb25kaXRpb24uIGluIHJhcmUgb2NjYXNpb25zIChzdXBlciByYXBpZCBvcGVyYXRpb25zKSB0aGUgbGlzdCBoYXNuJ3QgdXBkYXRlZCB5ZXRcbiAgaXRlbXMgPSBpdGVtcy5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICByZXR1cm4gaXRlbVtJVEVNX0lEX0tFWV0gIT09IHNoYWRvd0VsRGF0YVtJVEVNX0lEX0tFWV07XG4gIH0pO1xuICBwcmludERlYnVnKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gXCJkcmFnZ2VkIGVudGVyZWQgaXRlbXMgXCIuY29uY2F0KHRvU3RyaW5nKGl0ZW1zKSk7XG4gIH0pO1xuICBpZiAob3JpZ2luRHJvcFpvbmUgIT09IGUuY3VycmVudFRhcmdldCkge1xuICAgIHZhciBvcmlnaW5ab25lSXRlbXMgPSBkelRvQ29uZmlnLmdldChvcmlnaW5Ecm9wWm9uZSkuaXRlbXM7XG4gICAgdmFyIG5ld09yaWdpblpvbmVJdGVtcyA9IG9yaWdpblpvbmVJdGVtcy5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHJldHVybiAhaXRlbVtTSEFET1dfSVRFTV9NQVJLRVJfUFJPUEVSVFlfTkFNRV07XG4gICAgfSk7XG4gICAgZGlzcGF0Y2hDb25zaWRlckV2ZW50KG9yaWdpbkRyb3Bab25lLCBuZXdPcmlnaW5ab25lSXRlbXMsIHtcbiAgICAgIHRyaWdnZXI6IFRSSUdHRVJTLkRSQUdHRURfRU5URVJFRF9BTk9USEVSLFxuICAgICAgaWQ6IGRyYWdnZWRFbERhdGFbSVRFTV9JRF9LRVldLFxuICAgICAgc291cmNlOiBTT1VSQ0VTLlBPSU5URVJcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgc2hhZG93UGxhY2VIb2xkZXJJZHggPSBmaW5kU2hhZG93UGxhY2VIb2xkZXJJZHgoaXRlbXMpO1xuICAgIGlmIChzaGFkb3dQbGFjZUhvbGRlcklkeCAhPT0gLTEpIHtcbiAgICAgIC8vIG9ubHkgaGFwcGVucyByaWdodCBhZnRlciBkcmFnIHN0YXJ0LCBvbiB0aGUgZmlyc3QgZHJhZyBlbnRlcmVkIGV2ZW50XG4gICAgICBwcmludERlYnVnKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIFwicmVtb3ZpbmcgcGxhY2Vob2xkZXIgaXRlbSBmcm9tIG9yaWdpbiBkelwiO1xuICAgICAgfSk7XG4gICAgICBpdGVtcy5zcGxpY2Uoc2hhZG93UGxhY2VIb2xkZXJJZHgsIDEpO1xuICAgIH1cbiAgfVxuICB2YXIgX2UkZGV0YWlsJGluZGV4T2JqID0gZS5kZXRhaWwuaW5kZXhPYmosXG4gICAgaW5kZXggPSBfZSRkZXRhaWwkaW5kZXhPYmouaW5kZXgsXG4gICAgaXNQcm94aW1pdHlCYXNlZCA9IF9lJGRldGFpbCRpbmRleE9iai5pc1Byb3hpbWl0eUJhc2VkO1xuICB2YXIgc2hhZG93RWxJZHggPSBpc1Byb3hpbWl0eUJhc2VkICYmIGluZGV4ID09PSBlLmN1cnJlbnRUYXJnZXQuY2hpbGRyZW4ubGVuZ3RoIC0gMSA/IGluZGV4ICsgMSA6IGluZGV4O1xuICBzaGFkb3dFbERyb3Bab25lID0gZS5jdXJyZW50VGFyZ2V0O1xuICBpdGVtcy5zcGxpY2Uoc2hhZG93RWxJZHgsIDAsIHNoYWRvd0VsRGF0YSk7XG4gIGRpc3BhdGNoQ29uc2lkZXJFdmVudChlLmN1cnJlbnRUYXJnZXQsIGl0ZW1zLCB7XG4gICAgdHJpZ2dlcjogVFJJR0dFUlMuRFJBR0dFRF9FTlRFUkVELFxuICAgIGlkOiBkcmFnZ2VkRWxEYXRhW0lURU1fSURfS0VZXSxcbiAgICBzb3VyY2U6IFNPVVJDRVMuUE9JTlRFUlxuICB9KTtcbn1cbmZ1bmN0aW9uIGhhbmRsZURyYWdnZWRMZWZ0KGUpIHtcbiAgLy8gZGVhbGluZyB3aXRoIGEgcmFyZSByYWNlIGNvbmRpdGlvbiBvbiBleHRyZW1lbHkgcmFwaWQgY2xpY2tpbmcgYW5kIGRyb3BwaW5nXG4gIGlmICghaXNXb3JraW5nT25QcmV2aW91c0RyYWcpIHJldHVybjtcbiAgcHJpbnREZWJ1ZyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIFtcImRyYWdnZWQgbGVmdFwiLCBlLmN1cnJlbnRUYXJnZXQsIGUuZGV0YWlsXTtcbiAgfSk7XG4gIHZhciBfZHpUb0NvbmZpZyRnZXQyID0gZHpUb0NvbmZpZy5nZXQoZS5jdXJyZW50VGFyZ2V0KSxcbiAgICBpdGVtcyA9IF9kelRvQ29uZmlnJGdldDIuaXRlbXMsXG4gICAgZHJvcEZyb21PdGhlcnNEaXNhYmxlZCA9IF9kelRvQ29uZmlnJGdldDIuZHJvcEZyb21PdGhlcnNEaXNhYmxlZDtcbiAgaWYgKGRyb3BGcm9tT3RoZXJzRGlzYWJsZWQgJiYgZS5jdXJyZW50VGFyZ2V0ICE9PSBvcmlnaW5Ecm9wWm9uZSAmJiBlLmN1cnJlbnRUYXJnZXQgIT09IHNoYWRvd0VsRHJvcFpvbmUpIHtcbiAgICBwcmludERlYnVnKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBcImRyb3AgaXMgY3VycmVudGx5IGRpc2FibGVkXCI7XG4gICAgfSk7XG4gICAgcmV0dXJuO1xuICB9XG4gIHZhciBzaGFkb3dFbElkeCA9IGZpbmRTaGFkb3dFbGVtZW50SWR4KGl0ZW1zKTtcbiAgdmFyIHNoYWRvd0l0ZW0gPSBpdGVtcy5zcGxpY2Uoc2hhZG93RWxJZHgsIDEpWzBdO1xuICBzaGFkb3dFbERyb3Bab25lID0gdW5kZWZpbmVkO1xuICB2YXIgX2UkZGV0YWlsID0gZS5kZXRhaWwsXG4gICAgdHlwZSA9IF9lJGRldGFpbC50eXBlLFxuICAgIHRoZU90aGVyRHogPSBfZSRkZXRhaWwudGhlT3RoZXJEejtcbiAgaWYgKHR5cGUgPT09IERSQUdHRURfTEVGVF9UWVBFUy5PVVRTSURFX09GX0FOWSB8fCB0eXBlID09PSBEUkFHR0VEX0xFRlRfVFlQRVMuTEVGVF9GT1JfQU5PVEhFUiAmJiB0aGVPdGhlckR6ICE9PSBvcmlnaW5Ecm9wWm9uZSAmJiBkelRvQ29uZmlnLmdldCh0aGVPdGhlckR6KS5kcm9wRnJvbU90aGVyc0Rpc2FibGVkKSB7XG4gICAgcHJpbnREZWJ1ZyhmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gXCJkcmFnZ2VkIGxlZnQgYWxsLCBwdXR0aW5nIHNoYWRvdyBlbGVtZW50IGJhY2sgaW4gdGhlIG9yaWdpbiBkelwiO1xuICAgIH0pO1xuICAgIGlzRHJhZ2dlZE91dHNpZGVPZkFueUR6ID0gdHJ1ZTtcbiAgICBzaGFkb3dFbERyb3Bab25lID0gb3JpZ2luRHJvcFpvbmU7XG4gICAgdmFyIG9yaWdpblpvbmVJdGVtcyA9IGR6VG9Db25maWcuZ2V0KG9yaWdpbkRyb3Bab25lKS5pdGVtcztcbiAgICBvcmlnaW5ab25lSXRlbXMuc3BsaWNlKG9yaWdpbkluZGV4LCAwLCBzaGFkb3dJdGVtKTtcbiAgICBkaXNwYXRjaENvbnNpZGVyRXZlbnQob3JpZ2luRHJvcFpvbmUsIG9yaWdpblpvbmVJdGVtcywge1xuICAgICAgdHJpZ2dlcjogVFJJR0dFUlMuRFJBR0dFRF9MRUZUX0FMTCxcbiAgICAgIGlkOiBkcmFnZ2VkRWxEYXRhW0lURU1fSURfS0VZXSxcbiAgICAgIHNvdXJjZTogU09VUkNFUy5QT0lOVEVSXG4gICAgfSk7XG4gIH1cbiAgLy8gZm9yIHRoZSBvcmlnaW4gZHosIHdoZW4gdGhlIGRyYWdnZWQgaXMgb3V0c2lkZSBvZiBhbnksIHRoaXMgd2lsbCBiZSBmaXJlZCBpbiBhZGRpdGlvbiB0byB0aGUgcHJldmlvdXMuIHRoaXMgaXMgZm9yIHNpbXBsaWNpdHlcbiAgZGlzcGF0Y2hDb25zaWRlckV2ZW50KGUuY3VycmVudFRhcmdldCwgaXRlbXMsIHtcbiAgICB0cmlnZ2VyOiBUUklHR0VSUy5EUkFHR0VEX0xFRlQsXG4gICAgaWQ6IGRyYWdnZWRFbERhdGFbSVRFTV9JRF9LRVldLFxuICAgIHNvdXJjZTogU09VUkNFUy5QT0lOVEVSXG4gIH0pO1xufVxuZnVuY3Rpb24gaGFuZGxlRHJhZ2dlZElzT3ZlckluZGV4KGUpIHtcbiAgcHJpbnREZWJ1ZyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIFtcImRyYWdnZWQgaXMgb3ZlciBpbmRleFwiLCBlLmN1cnJlbnRUYXJnZXQsIGUuZGV0YWlsXTtcbiAgfSk7XG4gIHZhciBfZHpUb0NvbmZpZyRnZXQzID0gZHpUb0NvbmZpZy5nZXQoZS5jdXJyZW50VGFyZ2V0KSxcbiAgICBpdGVtcyA9IF9kelRvQ29uZmlnJGdldDMuaXRlbXMsXG4gICAgZHJvcEZyb21PdGhlcnNEaXNhYmxlZCA9IF9kelRvQ29uZmlnJGdldDMuZHJvcEZyb21PdGhlcnNEaXNhYmxlZDtcbiAgaWYgKGRyb3BGcm9tT3RoZXJzRGlzYWJsZWQgJiYgZS5jdXJyZW50VGFyZ2V0ICE9PSBvcmlnaW5Ecm9wWm9uZSkge1xuICAgIHByaW50RGVidWcoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIFwiZHJvcCBpcyBjdXJyZW50bHkgZGlzYWJsZWRcIjtcbiAgICB9KTtcbiAgICByZXR1cm47XG4gIH1cbiAgaXNEcmFnZ2VkT3V0c2lkZU9mQW55RHogPSBmYWxzZTtcbiAgdmFyIGluZGV4ID0gZS5kZXRhaWwuaW5kZXhPYmouaW5kZXg7XG4gIHZhciBzaGFkb3dFbElkeCA9IGZpbmRTaGFkb3dFbGVtZW50SWR4KGl0ZW1zKTtcbiAgaXRlbXMuc3BsaWNlKHNoYWRvd0VsSWR4LCAxKTtcbiAgaXRlbXMuc3BsaWNlKGluZGV4LCAwLCBzaGFkb3dFbERhdGEpO1xuICBkaXNwYXRjaENvbnNpZGVyRXZlbnQoZS5jdXJyZW50VGFyZ2V0LCBpdGVtcywge1xuICAgIHRyaWdnZXI6IFRSSUdHRVJTLkRSQUdHRURfT1ZFUl9JTkRFWCxcbiAgICBpZDogZHJhZ2dlZEVsRGF0YVtJVEVNX0lEX0tFWV0sXG4gICAgc291cmNlOiBTT1VSQ0VTLlBPSU5URVJcbiAgfSk7XG59XG5cbi8vIEdsb2JhbCBtb3VzZS90b3VjaC1ldmVudHMgaGFuZGxlcnNcbmZ1bmN0aW9uIGhhbmRsZU1vdXNlTW92ZShlKSB7XG4gIGUucHJldmVudERlZmF1bHQoKTtcbiAgdmFyIGMgPSBlLnRvdWNoZXMgPyBlLnRvdWNoZXNbMF0gOiBlO1xuICBjdXJyZW50TW91c2VQb3NpdGlvbiA9IHtcbiAgICB4OiBjLmNsaWVudFgsXG4gICAgeTogYy5jbGllbnRZXG4gIH07XG4gIGRyYWdnZWRFbC5zdHlsZS50cmFuc2Zvcm0gPSBcInRyYW5zbGF0ZTNkKFwiLmNvbmNhdChjdXJyZW50TW91c2VQb3NpdGlvbi54IC0gZHJhZ1N0YXJ0TW91c2VQb3NpdGlvbi54LCBcInB4LCBcIikuY29uY2F0KGN1cnJlbnRNb3VzZVBvc2l0aW9uLnkgLSBkcmFnU3RhcnRNb3VzZVBvc2l0aW9uLnksIFwicHgsIDApXCIpO1xufVxuZnVuY3Rpb24gaGFuZGxlRHJvcCgpIHtcbiAgcHJpbnREZWJ1ZyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIFwiZHJvcHBlZFwiO1xuICB9KTtcbiAgZmluYWxpemluZ1ByZXZpb3VzRHJhZyA9IHRydWU7XG4gIC8vIGNsZWFudXBcbiAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgaGFuZGxlTW91c2VNb3ZlKTtcbiAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0b3VjaG1vdmVcIiwgaGFuZGxlTW91c2VNb3ZlKTtcbiAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIGhhbmRsZURyb3ApO1xuICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRvdWNoZW5kXCIsIGhhbmRsZURyb3ApO1xuICB1bldhdGNoRHJhZ2dlZEVsZW1lbnQoKTtcbiAgbW92ZURyYWdnZWRFbGVtZW50VG9XYXNEcm9wcGVkU3RhdGUoZHJhZ2dlZEVsKTtcbiAgaWYgKCFzaGFkb3dFbERyb3Bab25lKSB7XG4gICAgcHJpbnREZWJ1ZyhmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gXCJlbGVtZW50IHdhcyBkcm9wcGVkIHJpZ2h0IGFmdGVyIGl0IGxlZnQgb3JpZ2luIGJ1dCBiZWZvcmUgZW50ZXJpbmcgc29tZXdoZXJlIGVsc2VcIjtcbiAgICB9KTtcbiAgICBzaGFkb3dFbERyb3Bab25lID0gb3JpZ2luRHJvcFpvbmU7XG4gIH1cbiAgcHJpbnREZWJ1ZyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIFtcImRyb3BwZWQgaW4gZHpcIiwgc2hhZG93RWxEcm9wWm9uZV07XG4gIH0pO1xuICB2YXIgX2R6VG9Db25maWckZ2V0NCA9IGR6VG9Db25maWcuZ2V0KHNoYWRvd0VsRHJvcFpvbmUpLFxuICAgIGl0ZW1zID0gX2R6VG9Db25maWckZ2V0NC5pdGVtcyxcbiAgICB0eXBlID0gX2R6VG9Db25maWckZ2V0NC50eXBlO1xuICBzdHlsZUluYWN0aXZlRHJvcFpvbmVzKHR5cGVUb0Ryb3Bab25lcy5nZXQodHlwZSksIGZ1bmN0aW9uIChkeikge1xuICAgIHJldHVybiBkelRvQ29uZmlnLmdldChkeikuZHJvcFRhcmdldFN0eWxlO1xuICB9LCBmdW5jdGlvbiAoZHopIHtcbiAgICByZXR1cm4gZHpUb0NvbmZpZy5nZXQoZHopLmRyb3BUYXJnZXRDbGFzc2VzO1xuICB9KTtcbiAgdmFyIHNoYWRvd0VsSWR4ID0gZmluZFNoYWRvd0VsZW1lbnRJZHgoaXRlbXMpO1xuICAvLyB0aGUgaGFuZGxlciBtaWdodCByZW1vdmUgdGhlIHNoYWRvdyBlbGVtZW50LCBleDogZHJhZ3VsYSBsaWtlIGNvcHkgb24gZHJhZ1xuICBpZiAoc2hhZG93RWxJZHggPT09IC0xKSBzaGFkb3dFbElkeCA9IG9yaWdpbkluZGV4O1xuICBpdGVtcyA9IGl0ZW1zLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgIHJldHVybiBpdGVtW1NIQURPV19JVEVNX01BUktFUl9QUk9QRVJUWV9OQU1FXSA/IGRyYWdnZWRFbERhdGEgOiBpdGVtO1xuICB9KTtcbiAgZnVuY3Rpb24gZmluYWxpemVXaXRoaW5ab25lKCkge1xuICAgIHVubG9ja09yaWdpbkR6TWluRGltZW5zaW9ucygpO1xuICAgIGRpc3BhdGNoRmluYWxpemVFdmVudChzaGFkb3dFbERyb3Bab25lLCBpdGVtcywge1xuICAgICAgdHJpZ2dlcjogaXNEcmFnZ2VkT3V0c2lkZU9mQW55RHogPyBUUklHR0VSUy5EUk9QUEVEX09VVFNJREVfT0ZfQU5ZIDogVFJJR0dFUlMuRFJPUFBFRF9JTlRPX1pPTkUsXG4gICAgICBpZDogZHJhZ2dlZEVsRGF0YVtJVEVNX0lEX0tFWV0sXG4gICAgICBzb3VyY2U6IFNPVVJDRVMuUE9JTlRFUlxuICAgIH0pO1xuICAgIGlmIChzaGFkb3dFbERyb3Bab25lICE9PSBvcmlnaW5Ecm9wWm9uZSkge1xuICAgICAgLy8gbGV0dGluZyB0aGUgb3JpZ2luIGRyb3Agem9uZSBrbm93IHRoZSBlbGVtZW50IHdhcyBwZXJtYW5lbnRseSB0YWtlbiBhd2F5XG4gICAgICBkaXNwYXRjaEZpbmFsaXplRXZlbnQob3JpZ2luRHJvcFpvbmUsIGR6VG9Db25maWcuZ2V0KG9yaWdpbkRyb3Bab25lKS5pdGVtcywge1xuICAgICAgICB0cmlnZ2VyOiBUUklHR0VSUy5EUk9QUEVEX0lOVE9fQU5PVEhFUixcbiAgICAgICAgaWQ6IGRyYWdnZWRFbERhdGFbSVRFTV9JRF9LRVldLFxuICAgICAgICBzb3VyY2U6IFNPVVJDRVMuUE9JTlRFUlxuICAgICAgfSk7XG4gICAgfVxuICAgIHVuRGVjb3JhdGVTaGFkb3dFbGVtZW50KHNoYWRvd0VsRHJvcFpvbmUuY2hpbGRyZW5bc2hhZG93RWxJZHhdKTtcbiAgICBjbGVhbnVwUG9zdERyb3AoKTtcbiAgfVxuICBhbmltYXRlRHJhZ2dlZFRvRmluYWxQb3NpdGlvbihzaGFkb3dFbElkeCwgZmluYWxpemVXaXRoaW5ab25lKTtcbn1cblxuLy8gaGVscGVyIGZ1bmN0aW9uIGZvciBoYW5kbGVEcm9wXG5mdW5jdGlvbiBhbmltYXRlRHJhZ2dlZFRvRmluYWxQb3NpdGlvbihzaGFkb3dFbElkeCwgY2FsbGJhY2spIHtcbiAgdmFyIHNoYWRvd0VsUmVjdCA9IGdldEJvdW5kaW5nUmVjdE5vVHJhbnNmb3JtcyhzaGFkb3dFbERyb3Bab25lLmNoaWxkcmVuW3NoYWRvd0VsSWR4XSk7XG4gIHZhciBuZXdUcmFuc2Zvcm0gPSB7XG4gICAgeDogc2hhZG93RWxSZWN0LmxlZnQgLSBwYXJzZUZsb2F0KGRyYWdnZWRFbC5zdHlsZS5sZWZ0KSxcbiAgICB5OiBzaGFkb3dFbFJlY3QudG9wIC0gcGFyc2VGbG9hdChkcmFnZ2VkRWwuc3R5bGUudG9wKVxuICB9O1xuICB2YXIgX2R6VG9Db25maWckZ2V0NSA9IGR6VG9Db25maWcuZ2V0KHNoYWRvd0VsRHJvcFpvbmUpLFxuICAgIGRyb3BBbmltYXRpb25EdXJhdGlvbk1zID0gX2R6VG9Db25maWckZ2V0NS5kcm9wQW5pbWF0aW9uRHVyYXRpb25NcztcbiAgdmFyIHRyYW5zaXRpb24gPSBcInRyYW5zZm9ybSBcIi5jb25jYXQoZHJvcEFuaW1hdGlvbkR1cmF0aW9uTXMsIFwibXMgZWFzZVwiKTtcbiAgZHJhZ2dlZEVsLnN0eWxlLnRyYW5zaXRpb24gPSBkcmFnZ2VkRWwuc3R5bGUudHJhbnNpdGlvbiA/IGRyYWdnZWRFbC5zdHlsZS50cmFuc2l0aW9uICsgXCIsXCIgKyB0cmFuc2l0aW9uIDogdHJhbnNpdGlvbjtcbiAgZHJhZ2dlZEVsLnN0eWxlLnRyYW5zZm9ybSA9IFwidHJhbnNsYXRlM2QoXCIuY29uY2F0KG5ld1RyYW5zZm9ybS54LCBcInB4LCBcIikuY29uY2F0KG5ld1RyYW5zZm9ybS55LCBcInB4LCAwKVwiKTtcbiAgd2luZG93LnNldFRpbWVvdXQoY2FsbGJhY2ssIGRyb3BBbmltYXRpb25EdXJhdGlvbk1zKTtcbn1cbmZ1bmN0aW9uIHNjaGVkdWxlRFpGb3JSZW1vdmFsQWZ0ZXJEcm9wKGR6LCBkZXN0cm95KSB7XG4gIHNjaGVkdWxlZEZvclJlbW92YWxBZnRlckRyb3AucHVzaCh7XG4gICAgZHo6IGR6LFxuICAgIGRlc3Ryb3k6IGRlc3Ryb3lcbiAgfSk7XG4gIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkge1xuICAgIGhpZGVFbGVtZW50KGR6KTtcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGR6KTtcbiAgfSk7XG59XG4vKiBjbGVhbnVwICovXG5mdW5jdGlvbiBjbGVhbnVwUG9zdERyb3AoKSB7XG4gIGRyYWdnZWRFbC5yZW1vdmUoKTtcbiAgb3JpZ2luYWxEcmFnVGFyZ2V0LnJlbW92ZSgpO1xuICBpZiAoc2NoZWR1bGVkRm9yUmVtb3ZhbEFmdGVyRHJvcC5sZW5ndGgpIHtcbiAgICBwcmludERlYnVnKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBbXCJ3aWxsIGRlc3Ryb3kgem9uZXMgdGhhdCB3ZXJlIHJlbW92ZWQgZHVyaW5nIGRyYWdcIiwgc2NoZWR1bGVkRm9yUmVtb3ZhbEFmdGVyRHJvcF07XG4gICAgfSk7XG4gICAgc2NoZWR1bGVkRm9yUmVtb3ZhbEFmdGVyRHJvcC5mb3JFYWNoKGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICB2YXIgZHogPSBfcmVmLmR6LFxuICAgICAgICBkZXN0cm95ID0gX3JlZi5kZXN0cm95O1xuICAgICAgZGVzdHJveSgpO1xuICAgICAgZHoucmVtb3ZlKCk7XG4gICAgfSk7XG4gICAgc2NoZWR1bGVkRm9yUmVtb3ZhbEFmdGVyRHJvcCA9IFtdO1xuICB9XG4gIGRyYWdnZWRFbCA9IHVuZGVmaW5lZDtcbiAgb3JpZ2luYWxEcmFnVGFyZ2V0ID0gdW5kZWZpbmVkO1xuICBkcmFnZ2VkRWxEYXRhID0gdW5kZWZpbmVkO1xuICBkcmFnZ2VkRWxUeXBlID0gdW5kZWZpbmVkO1xuICBvcmlnaW5Ecm9wWm9uZSA9IHVuZGVmaW5lZDtcbiAgb3JpZ2luSW5kZXggPSB1bmRlZmluZWQ7XG4gIHNoYWRvd0VsRGF0YSA9IHVuZGVmaW5lZDtcbiAgc2hhZG93RWxEcm9wWm9uZSA9IHVuZGVmaW5lZDtcbiAgZHJhZ1N0YXJ0TW91c2VQb3NpdGlvbiA9IHVuZGVmaW5lZDtcbiAgY3VycmVudE1vdXNlUG9zaXRpb24gPSB1bmRlZmluZWQ7XG4gIGlzV29ya2luZ09uUHJldmlvdXNEcmFnID0gZmFsc2U7XG4gIGZpbmFsaXppbmdQcmV2aW91c0RyYWcgPSBmYWxzZTtcbiAgdW5sb2NrT3JpZ2luRHpNaW5EaW1lbnNpb25zID0gdW5kZWZpbmVkO1xuICBpc0RyYWdnZWRPdXRzaWRlT2ZBbnlEeiA9IGZhbHNlO1xufVxuZnVuY3Rpb24gZG5kem9uZShub2RlLCBvcHRpb25zKSB7XG4gIHZhciBpbml0aWFsaXplZCA9IGZhbHNlO1xuICB2YXIgY29uZmlnID0ge1xuICAgIGl0ZW1zOiB1bmRlZmluZWQsXG4gICAgdHlwZTogdW5kZWZpbmVkLFxuICAgIGZsaXBEdXJhdGlvbk1zOiAwLFxuICAgIGRyYWdEaXNhYmxlZDogZmFsc2UsXG4gICAgbW9ycGhEaXNhYmxlZDogZmFsc2UsXG4gICAgZHJvcEZyb21PdGhlcnNEaXNhYmxlZDogZmFsc2UsXG4gICAgZHJvcFRhcmdldFN0eWxlOiBERUZBVUxUX0RST1BfVEFSR0VUX1NUWUxFLFxuICAgIGRyb3BUYXJnZXRDbGFzc2VzOiBbXSxcbiAgICB0cmFuc2Zvcm1EcmFnZ2VkRWxlbWVudDogZnVuY3Rpb24gdHJhbnNmb3JtRHJhZ2dlZEVsZW1lbnQoKSB7fSxcbiAgICBjZW50cmVEcmFnZ2VkT25DdXJzb3I6IGZhbHNlXG4gIH07XG4gIHByaW50RGVidWcoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBbXCJkbmR6b25lIGdvb2QgdG8gZ28gb3B0aW9uczogXCIuY29uY2F0KHRvU3RyaW5nKG9wdGlvbnMpLCBcIiwgY29uZmlnOiBcIikuY29uY2F0KHRvU3RyaW5nKGNvbmZpZykpLCB7XG4gICAgICBub2RlOiBub2RlXG4gICAgfV07XG4gIH0pO1xuICB2YXIgZWxUb0lkeCA9IG5ldyBNYXAoKTtcbiAgZnVuY3Rpb24gYWRkTWF5YmVMaXN0ZW5lcnMoKSB7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgaGFuZGxlTW91c2VNb3ZlTWF5YmVEcmFnU3RhcnQsIHtcbiAgICAgIHBhc3NpdmU6IGZhbHNlXG4gICAgfSk7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaG1vdmVcIiwgaGFuZGxlTW91c2VNb3ZlTWF5YmVEcmFnU3RhcnQsIHtcbiAgICAgIHBhc3NpdmU6IGZhbHNlLFxuICAgICAgY2FwdHVyZTogZmFsc2VcbiAgICB9KTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIiwgaGFuZGxlRmFsc2VBbGFybSwge1xuICAgICAgcGFzc2l2ZTogZmFsc2VcbiAgICB9KTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNoZW5kXCIsIGhhbmRsZUZhbHNlQWxhcm0sIHtcbiAgICAgIHBhc3NpdmU6IGZhbHNlXG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gcmVtb3ZlTWF5YmVMaXN0ZW5lcnMoKSB7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgaGFuZGxlTW91c2VNb3ZlTWF5YmVEcmFnU3RhcnQpO1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwidG91Y2htb3ZlXCIsIGhhbmRsZU1vdXNlTW92ZU1heWJlRHJhZ1N0YXJ0KTtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIiwgaGFuZGxlRmFsc2VBbGFybSk7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0b3VjaGVuZFwiLCBoYW5kbGVGYWxzZUFsYXJtKTtcbiAgfVxuICBmdW5jdGlvbiBoYW5kbGVGYWxzZUFsYXJtKCkge1xuICAgIHJlbW92ZU1heWJlTGlzdGVuZXJzKCk7XG4gICAgb3JpZ2luYWxEcmFnVGFyZ2V0ID0gdW5kZWZpbmVkO1xuICAgIGRyYWdTdGFydE1vdXNlUG9zaXRpb24gPSB1bmRlZmluZWQ7XG4gICAgY3VycmVudE1vdXNlUG9zaXRpb24gPSB1bmRlZmluZWQ7XG4gIH1cbiAgZnVuY3Rpb24gaGFuZGxlTW91c2VNb3ZlTWF5YmVEcmFnU3RhcnQoZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB2YXIgYyA9IGUudG91Y2hlcyA/IGUudG91Y2hlc1swXSA6IGU7XG4gICAgY3VycmVudE1vdXNlUG9zaXRpb24gPSB7XG4gICAgICB4OiBjLmNsaWVudFgsXG4gICAgICB5OiBjLmNsaWVudFlcbiAgICB9O1xuICAgIGlmIChNYXRoLmFicyhjdXJyZW50TW91c2VQb3NpdGlvbi54IC0gZHJhZ1N0YXJ0TW91c2VQb3NpdGlvbi54KSA+PSBNSU5fTU9WRU1FTlRfQkVGT1JFX0RSQUdfU1RBUlRfUFggfHwgTWF0aC5hYnMoY3VycmVudE1vdXNlUG9zaXRpb24ueSAtIGRyYWdTdGFydE1vdXNlUG9zaXRpb24ueSkgPj0gTUlOX01PVkVNRU5UX0JFRk9SRV9EUkFHX1NUQVJUX1BYKSB7XG4gICAgICByZW1vdmVNYXliZUxpc3RlbmVycygpO1xuICAgICAgaGFuZGxlRHJhZ1N0YXJ0KCk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGhhbmRsZU1vdXNlRG93bihlKSB7XG4gICAgLy8gb24gc2FmYXJpIGNsaWNraW5nIG9uIGEgc2VsZWN0IGVsZW1lbnQgZG9lc24ndCBmaXJlIG1vdXNldXAgYXQgdGhlIGVuZCBvZiB0aGUgY2xpY2sgYW5kIGluIGdlbmVyYWwgdGhpcyBtYWtlcyBtb3JlIHNlbnNlXG4gICAgaWYgKGUudGFyZ2V0ICE9PSBlLmN1cnJlbnRUYXJnZXQgJiYgKGUudGFyZ2V0LnZhbHVlICE9PSB1bmRlZmluZWQgfHwgZS50YXJnZXQuaXNDb250ZW50RWRpdGFibGUpKSB7XG4gICAgICBwcmludERlYnVnKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIFwid29uJ3QgaW5pdGlhdGUgZHJhZyBvbiBhIG5lc3RlZCBpbnB1dCBlbGVtZW50XCI7XG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gcHJldmVudHMgcmVzcG9uZGluZyB0byBhbnkgYnV0dG9uIGJ1dCBsZWZ0IGNsaWNrIHdoaWNoIGVxdWFscyAwICh3aGljaCBpcyBmYWxzeSlcbiAgICBpZiAoZS5idXR0b24pIHtcbiAgICAgIHByaW50RGVidWcoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gXCJpZ25vcmluZyBub25lIGxlZnQgY2xpY2sgYnV0dG9uOiBcIi5jb25jYXQoZS5idXR0b24pO1xuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChpc1dvcmtpbmdPblByZXZpb3VzRHJhZykge1xuICAgICAgcHJpbnREZWJ1ZyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBcImNhbm5vdCBzdGFydCBhIG5ldyBkcmFnIGJlZm9yZSBmaW5hbGl6aW5nIHByZXZpb3VzIG9uZVwiO1xuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgdmFyIGMgPSBlLnRvdWNoZXMgPyBlLnRvdWNoZXNbMF0gOiBlO1xuICAgIGRyYWdTdGFydE1vdXNlUG9zaXRpb24gPSB7XG4gICAgICB4OiBjLmNsaWVudFgsXG4gICAgICB5OiBjLmNsaWVudFlcbiAgICB9O1xuICAgIGN1cnJlbnRNb3VzZVBvc2l0aW9uID0gX29iamVjdFNwcmVhZDIoe30sIGRyYWdTdGFydE1vdXNlUG9zaXRpb24pO1xuICAgIG9yaWdpbmFsRHJhZ1RhcmdldCA9IGUuY3VycmVudFRhcmdldDtcbiAgICBhZGRNYXliZUxpc3RlbmVycygpO1xuICB9XG4gIGZ1bmN0aW9uIGhhbmRsZURyYWdTdGFydCgpIHtcbiAgICBwcmludERlYnVnKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBbXCJkcmFnIHN0YXJ0IGNvbmZpZzogXCIuY29uY2F0KHRvU3RyaW5nKGNvbmZpZykpLCBvcmlnaW5hbERyYWdUYXJnZXRdO1xuICAgIH0pO1xuICAgIGlzV29ya2luZ09uUHJldmlvdXNEcmFnID0gdHJ1ZTtcblxuICAgIC8vIGluaXRpYWxpc2luZyBnbG9iYWxzXG4gICAgdmFyIGN1cnJlbnRJZHggPSBlbFRvSWR4LmdldChvcmlnaW5hbERyYWdUYXJnZXQpO1xuICAgIG9yaWdpbkluZGV4ID0gY3VycmVudElkeDtcbiAgICBvcmlnaW5Ecm9wWm9uZSA9IG9yaWdpbmFsRHJhZ1RhcmdldC5wYXJlbnRFbGVtZW50O1xuICAgIC8qKiBAdHlwZSB7U2hhZG93Um9vdCB8IEhUTUxEb2N1bWVudH0gKi9cbiAgICB2YXIgcm9vdE5vZGUgPSBvcmlnaW5Ecm9wWm9uZS5nZXRSb290Tm9kZSgpO1xuICAgIHZhciBvcmlnaW5Ecm9wWm9uZVJvb3QgPSByb290Tm9kZS5ib2R5IHx8IHJvb3ROb2RlO1xuICAgIHZhciBpdGVtcyA9IGNvbmZpZy5pdGVtcyxcbiAgICAgIHR5cGUgPSBjb25maWcudHlwZSxcbiAgICAgIGNlbnRyZURyYWdnZWRPbkN1cnNvciA9IGNvbmZpZy5jZW50cmVEcmFnZ2VkT25DdXJzb3I7XG4gICAgZHJhZ2dlZEVsRGF0YSA9IF9vYmplY3RTcHJlYWQyKHt9LCBpdGVtc1tjdXJyZW50SWR4XSk7XG4gICAgZHJhZ2dlZEVsVHlwZSA9IHR5cGU7XG4gICAgc2hhZG93RWxEYXRhID0gX29iamVjdFNwcmVhZDIoX29iamVjdFNwcmVhZDIoe30sIGRyYWdnZWRFbERhdGEpLCB7fSwgX2RlZmluZVByb3BlcnR5KHt9LCBTSEFET1dfSVRFTV9NQVJLRVJfUFJPUEVSVFlfTkFNRSwgdHJ1ZSkpO1xuICAgIC8vIFRoZSBpbml0aWFsIHNoYWRvdyBlbGVtZW50LiBXZSBuZWVkIGEgZGlmZmVyZW50IGlkIGF0IGZpcnN0IGluIG9yZGVyIHRvIGF2b2lkIGNvbmZsaWN0cyBhbmQgdGltaW5nIGlzc3Vlc1xuICAgIHZhciBwbGFjZUhvbGRlckVsRGF0YSA9IF9vYmplY3RTcHJlYWQyKF9vYmplY3RTcHJlYWQyKHt9LCBzaGFkb3dFbERhdGEpLCB7fSwgX2RlZmluZVByb3BlcnR5KHt9LCBJVEVNX0lEX0tFWSwgU0hBRE9XX1BMQUNFSE9MREVSX0lURU1fSUQpKTtcblxuICAgIC8vIGNyZWF0aW5nIHRoZSBkcmFnZ2FibGUgZWxlbWVudFxuICAgIGRyYWdnZWRFbCA9IGNyZWF0ZURyYWdnZWRFbGVtZW50RnJvbShvcmlnaW5hbERyYWdUYXJnZXQsIGNlbnRyZURyYWdnZWRPbkN1cnNvciAmJiBjdXJyZW50TW91c2VQb3NpdGlvbik7XG4gICAgLy8gV2Ugd2lsbCBrZWVwIHRoZSBvcmlnaW5hbCBkb20gbm9kZSBpbiB0aGUgZG9tIGJlY2F1c2UgdG91Y2ggZXZlbnRzIGtlZXAgZmlyaW5nIG9uIGl0LCB3ZSB3YW50IHRvIHJlLWFkZCBpdCBhZnRlciB0aGUgZnJhbWV3b3JrIHJlbW92ZXMgaXRcbiAgICBmdW5jdGlvbiBrZWVwT3JpZ2luYWxFbGVtZW50SW5Eb20oKSB7XG4gICAgICBpZiAoIWRyYWdnZWRFbC5wYXJlbnRFbGVtZW50KSB7XG4gICAgICAgIG9yaWdpbkRyb3Bab25lUm9vdC5hcHBlbmRDaGlsZChkcmFnZ2VkRWwpO1xuICAgICAgICAvLyB0byBwcmV2ZW50IHRoZSBvdXRsaW5lIGZyb20gZGlzYXBwZWFyaW5nXG4gICAgICAgIGRyYWdnZWRFbC5mb2N1cygpO1xuICAgICAgICB3YXRjaERyYWdnZWRFbGVtZW50KCk7XG4gICAgICAgIGhpZGVFbGVtZW50KG9yaWdpbmFsRHJhZ1RhcmdldCk7XG4gICAgICAgIG9yaWdpbkRyb3Bab25lUm9vdC5hcHBlbmRDaGlsZChvcmlnaW5hbERyYWdUYXJnZXQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShrZWVwT3JpZ2luYWxFbGVtZW50SW5Eb20pO1xuICAgICAgfVxuICAgIH1cbiAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGtlZXBPcmlnaW5hbEVsZW1lbnRJbkRvbSk7XG4gICAgc3R5bGVBY3RpdmVEcm9wWm9uZXMoQXJyYXkuZnJvbSh0eXBlVG9Ecm9wWm9uZXMuZ2V0KGNvbmZpZy50eXBlKSkuZmlsdGVyKGZ1bmN0aW9uIChkeikge1xuICAgICAgcmV0dXJuIGR6ID09PSBvcmlnaW5Ecm9wWm9uZSB8fCAhZHpUb0NvbmZpZy5nZXQoZHopLmRyb3BGcm9tT3RoZXJzRGlzYWJsZWQ7XG4gICAgfSksIGZ1bmN0aW9uIChkeikge1xuICAgICAgcmV0dXJuIGR6VG9Db25maWcuZ2V0KGR6KS5kcm9wVGFyZ2V0U3R5bGU7XG4gICAgfSwgZnVuY3Rpb24gKGR6KSB7XG4gICAgICByZXR1cm4gZHpUb0NvbmZpZy5nZXQoZHopLmRyb3BUYXJnZXRDbGFzc2VzO1xuICAgIH0pO1xuXG4gICAgLy8gcmVtb3ZpbmcgdGhlIG9yaWdpbmFsIGVsZW1lbnQgYnkgcmVtb3ZpbmcgaXRzIGRhdGEgZW50cnlcbiAgICBpdGVtcy5zcGxpY2UoY3VycmVudElkeCwgMSwgcGxhY2VIb2xkZXJFbERhdGEpO1xuICAgIHVubG9ja09yaWdpbkR6TWluRGltZW5zaW9ucyA9IHByZXZlbnRTaHJpbmtpbmcob3JpZ2luRHJvcFpvbmUpO1xuICAgIGRpc3BhdGNoQ29uc2lkZXJFdmVudChvcmlnaW5Ecm9wWm9uZSwgaXRlbXMsIHtcbiAgICAgIHRyaWdnZXI6IFRSSUdHRVJTLkRSQUdfU1RBUlRFRCxcbiAgICAgIGlkOiBkcmFnZ2VkRWxEYXRhW0lURU1fSURfS0VZXSxcbiAgICAgIHNvdXJjZTogU09VUkNFUy5QT0lOVEVSXG4gICAgfSk7XG5cbiAgICAvLyBoYW5kaW5nIG92ZXIgdG8gZ2xvYmFsIGhhbmRsZXJzIC0gc3RhcnRpbmcgdG8gd2F0Y2ggdGhlIGVsZW1lbnRcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCBoYW5kbGVNb3VzZU1vdmUsIHtcbiAgICAgIHBhc3NpdmU6IGZhbHNlXG4gICAgfSk7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaG1vdmVcIiwgaGFuZGxlTW91c2VNb3ZlLCB7XG4gICAgICBwYXNzaXZlOiBmYWxzZSxcbiAgICAgIGNhcHR1cmU6IGZhbHNlXG4gICAgfSk7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIGhhbmRsZURyb3AsIHtcbiAgICAgIHBhc3NpdmU6IGZhbHNlXG4gICAgfSk7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaGVuZFwiLCBoYW5kbGVEcm9wLCB7XG4gICAgICBwYXNzaXZlOiBmYWxzZVxuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIGNvbmZpZ3VyZShfcmVmMikge1xuICAgIHZhciBfcmVmMiRpdGVtcyA9IF9yZWYyLml0ZW1zLFxuICAgICAgaXRlbXMgPSBfcmVmMiRpdGVtcyA9PT0gdm9pZCAwID8gdW5kZWZpbmVkIDogX3JlZjIkaXRlbXMsXG4gICAgICBfcmVmMiRmbGlwRHVyYXRpb25NcyA9IF9yZWYyLmZsaXBEdXJhdGlvbk1zLFxuICAgICAgZHJvcEFuaW1hdGlvbkR1cmF0aW9uTXMgPSBfcmVmMiRmbGlwRHVyYXRpb25NcyA9PT0gdm9pZCAwID8gMCA6IF9yZWYyJGZsaXBEdXJhdGlvbk1zLFxuICAgICAgX3JlZjIkdHlwZSA9IF9yZWYyLnR5cGUsXG4gICAgICBuZXdUeXBlID0gX3JlZjIkdHlwZSA9PT0gdm9pZCAwID8gREVGQVVMVF9EUk9QX1pPTkVfVFlQRSA6IF9yZWYyJHR5cGUsXG4gICAgICBfcmVmMiRkcmFnRGlzYWJsZWQgPSBfcmVmMi5kcmFnRGlzYWJsZWQsXG4gICAgICBkcmFnRGlzYWJsZWQgPSBfcmVmMiRkcmFnRGlzYWJsZWQgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZjIkZHJhZ0Rpc2FibGVkLFxuICAgICAgX3JlZjIkbW9ycGhEaXNhYmxlZCA9IF9yZWYyLm1vcnBoRGlzYWJsZWQsXG4gICAgICBtb3JwaERpc2FibGVkID0gX3JlZjIkbW9ycGhEaXNhYmxlZCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmMiRtb3JwaERpc2FibGVkLFxuICAgICAgX3JlZjIkZHJvcEZyb21PdGhlcnNEID0gX3JlZjIuZHJvcEZyb21PdGhlcnNEaXNhYmxlZCxcbiAgICAgIGRyb3BGcm9tT3RoZXJzRGlzYWJsZWQgPSBfcmVmMiRkcm9wRnJvbU90aGVyc0QgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZjIkZHJvcEZyb21PdGhlcnNELFxuICAgICAgX3JlZjIkZHJvcFRhcmdldFN0eWxlID0gX3JlZjIuZHJvcFRhcmdldFN0eWxlLFxuICAgICAgZHJvcFRhcmdldFN0eWxlID0gX3JlZjIkZHJvcFRhcmdldFN0eWxlID09PSB2b2lkIDAgPyBERUZBVUxUX0RST1BfVEFSR0VUX1NUWUxFIDogX3JlZjIkZHJvcFRhcmdldFN0eWxlLFxuICAgICAgX3JlZjIkZHJvcFRhcmdldENsYXNzID0gX3JlZjIuZHJvcFRhcmdldENsYXNzZXMsXG4gICAgICBkcm9wVGFyZ2V0Q2xhc3NlcyA9IF9yZWYyJGRyb3BUYXJnZXRDbGFzcyA9PT0gdm9pZCAwID8gW10gOiBfcmVmMiRkcm9wVGFyZ2V0Q2xhc3MsXG4gICAgICBfcmVmMiR0cmFuc2Zvcm1EcmFnZ2UgPSBfcmVmMi50cmFuc2Zvcm1EcmFnZ2VkRWxlbWVudCxcbiAgICAgIHRyYW5zZm9ybURyYWdnZWRFbGVtZW50ID0gX3JlZjIkdHJhbnNmb3JtRHJhZ2dlID09PSB2b2lkIDAgPyBmdW5jdGlvbiAoKSB7fSA6IF9yZWYyJHRyYW5zZm9ybURyYWdnZSxcbiAgICAgIF9yZWYyJGNlbnRyZURyYWdnZWRPbiA9IF9yZWYyLmNlbnRyZURyYWdnZWRPbkN1cnNvcixcbiAgICAgIGNlbnRyZURyYWdnZWRPbkN1cnNvciA9IF9yZWYyJGNlbnRyZURyYWdnZWRPbiA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmMiRjZW50cmVEcmFnZ2VkT247XG4gICAgY29uZmlnLmRyb3BBbmltYXRpb25EdXJhdGlvbk1zID0gZHJvcEFuaW1hdGlvbkR1cmF0aW9uTXM7XG4gICAgaWYgKGNvbmZpZy50eXBlICYmIG5ld1R5cGUgIT09IGNvbmZpZy50eXBlKSB7XG4gICAgICB1bnJlZ2lzdGVyRHJvcFpvbmUobm9kZSwgY29uZmlnLnR5cGUpO1xuICAgIH1cbiAgICBjb25maWcudHlwZSA9IG5ld1R5cGU7XG4gICAgcmVnaXN0ZXJEcm9wWm9uZShub2RlLCBuZXdUeXBlKTtcbiAgICBjb25maWcuaXRlbXMgPSBfdG9Db25zdW1hYmxlQXJyYXkoaXRlbXMpO1xuICAgIGNvbmZpZy5kcmFnRGlzYWJsZWQgPSBkcmFnRGlzYWJsZWQ7XG4gICAgY29uZmlnLm1vcnBoRGlzYWJsZWQgPSBtb3JwaERpc2FibGVkO1xuICAgIGNvbmZpZy50cmFuc2Zvcm1EcmFnZ2VkRWxlbWVudCA9IHRyYW5zZm9ybURyYWdnZWRFbGVtZW50O1xuICAgIGNvbmZpZy5jZW50cmVEcmFnZ2VkT25DdXJzb3IgPSBjZW50cmVEcmFnZ2VkT25DdXJzb3I7XG5cbiAgICAvLyByZWFsdGltZSB1cGRhdGUgZm9yIGRyb3BUYXJnZXRTdHlsZVxuICAgIGlmIChpbml0aWFsaXplZCAmJiBpc1dvcmtpbmdPblByZXZpb3VzRHJhZyAmJiAhZmluYWxpemluZ1ByZXZpb3VzRHJhZyAmJiAoIWFyZU9iamVjdHNTaGFsbG93RXF1YWwoZHJvcFRhcmdldFN0eWxlLCBjb25maWcuZHJvcFRhcmdldFN0eWxlKSB8fCAhYXJlQXJyYXlzU2hhbGxvd0VxdWFsU2FtZU9yZGVyKGRyb3BUYXJnZXRDbGFzc2VzLCBjb25maWcuZHJvcFRhcmdldENsYXNzZXMpKSkge1xuICAgICAgc3R5bGVJbmFjdGl2ZURyb3Bab25lcyhbbm9kZV0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGNvbmZpZy5kcm9wVGFyZ2V0U3R5bGU7XG4gICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBkcm9wVGFyZ2V0Q2xhc3NlcztcbiAgICAgIH0pO1xuICAgICAgc3R5bGVBY3RpdmVEcm9wWm9uZXMoW25vZGVdLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBkcm9wVGFyZ2V0U3R5bGU7XG4gICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBkcm9wVGFyZ2V0Q2xhc3NlcztcbiAgICAgIH0pO1xuICAgIH1cbiAgICBjb25maWcuZHJvcFRhcmdldFN0eWxlID0gZHJvcFRhcmdldFN0eWxlO1xuICAgIGNvbmZpZy5kcm9wVGFyZ2V0Q2xhc3NlcyA9IF90b0NvbnN1bWFibGVBcnJheShkcm9wVGFyZ2V0Q2xhc3Nlcyk7XG5cbiAgICAvLyByZWFsdGltZSB1cGRhdGUgZm9yIGRyb3BGcm9tT3RoZXJzRGlzYWJsZWRcbiAgICBmdW5jdGlvbiBnZXRDb25maWdQcm9wKGR6LCBwcm9wTmFtZSkge1xuICAgICAgcmV0dXJuIGR6VG9Db25maWcuZ2V0KGR6KSA/IGR6VG9Db25maWcuZ2V0KGR6KVtwcm9wTmFtZV0gOiBjb25maWdbcHJvcE5hbWVdO1xuICAgIH1cbiAgICBpZiAoaW5pdGlhbGl6ZWQgJiYgaXNXb3JraW5nT25QcmV2aW91c0RyYWcgJiYgY29uZmlnLmRyb3BGcm9tT3RoZXJzRGlzYWJsZWQgIT09IGRyb3BGcm9tT3RoZXJzRGlzYWJsZWQpIHtcbiAgICAgIGlmIChkcm9wRnJvbU90aGVyc0Rpc2FibGVkKSB7XG4gICAgICAgIHN0eWxlSW5hY3RpdmVEcm9wWm9uZXMoW25vZGVdLCBmdW5jdGlvbiAoZHopIHtcbiAgICAgICAgICByZXR1cm4gZ2V0Q29uZmlnUHJvcChkeiwgXCJkcm9wVGFyZ2V0U3R5bGVcIik7XG4gICAgICAgIH0sIGZ1bmN0aW9uIChkeikge1xuICAgICAgICAgIHJldHVybiBnZXRDb25maWdQcm9wKGR6LCBcImRyb3BUYXJnZXRDbGFzc2VzXCIpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0eWxlQWN0aXZlRHJvcFpvbmVzKFtub2RlXSwgZnVuY3Rpb24gKGR6KSB7XG4gICAgICAgICAgcmV0dXJuIGdldENvbmZpZ1Byb3AoZHosIFwiZHJvcFRhcmdldFN0eWxlXCIpO1xuICAgICAgICB9LCBmdW5jdGlvbiAoZHopIHtcbiAgICAgICAgICByZXR1cm4gZ2V0Q29uZmlnUHJvcChkeiwgXCJkcm9wVGFyZ2V0Q2xhc3Nlc1wiKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbmZpZy5kcm9wRnJvbU90aGVyc0Rpc2FibGVkID0gZHJvcEZyb21PdGhlcnNEaXNhYmxlZDtcbiAgICBkelRvQ29uZmlnLnNldChub2RlLCBjb25maWcpO1xuICAgIHZhciBzaGFkb3dFbElkeCA9IGZpbmRTaGFkb3dFbGVtZW50SWR4KGNvbmZpZy5pdGVtcyk7XG4gICAgZm9yICh2YXIgaWR4ID0gMDsgaWR4IDwgbm9kZS5jaGlsZHJlbi5sZW5ndGg7IGlkeCsrKSB7XG4gICAgICB2YXIgZHJhZ2dhYmxlRWwgPSBub2RlLmNoaWxkcmVuW2lkeF07XG4gICAgICBzdHlsZURyYWdnYWJsZShkcmFnZ2FibGVFbCwgZHJhZ0Rpc2FibGVkKTtcbiAgICAgIGlmIChpZHggPT09IHNoYWRvd0VsSWR4KSB7XG4gICAgICAgIGNvbmZpZy50cmFuc2Zvcm1EcmFnZ2VkRWxlbWVudChkcmFnZ2VkRWwsIGRyYWdnZWRFbERhdGEsIGlkeCk7XG4gICAgICAgIGlmICghbW9ycGhEaXNhYmxlZCkge1xuICAgICAgICAgIG1vcnBoRHJhZ2dlZEVsZW1lbnRUb0JlTGlrZShkcmFnZ2VkRWwsIGRyYWdnYWJsZUVsLCBjdXJyZW50TW91c2VQb3NpdGlvbi54LCBjdXJyZW50TW91c2VQb3NpdGlvbi55KTtcbiAgICAgICAgfVxuICAgICAgICBkZWNvcmF0ZVNoYWRvd0VsKGRyYWdnYWJsZUVsKTtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBkcmFnZ2FibGVFbC5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIGVsVG9Nb3VzZURvd25MaXN0ZW5lci5nZXQoZHJhZ2dhYmxlRWwpKTtcbiAgICAgIGRyYWdnYWJsZUVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0b3VjaHN0YXJ0XCIsIGVsVG9Nb3VzZURvd25MaXN0ZW5lci5nZXQoZHJhZ2dhYmxlRWwpKTtcbiAgICAgIGlmICghZHJhZ0Rpc2FibGVkKSB7XG4gICAgICAgIGRyYWdnYWJsZUVsLmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZWRvd25cIiwgaGFuZGxlTW91c2VEb3duKTtcbiAgICAgICAgZHJhZ2dhYmxlRWwuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNoc3RhcnRcIiwgaGFuZGxlTW91c2VEb3duKTtcbiAgICAgICAgZWxUb01vdXNlRG93bkxpc3RlbmVyLnNldChkcmFnZ2FibGVFbCwgaGFuZGxlTW91c2VEb3duKTtcbiAgICAgIH1cbiAgICAgIC8vIHVwZGF0aW5nIHRoZSBpZHhcbiAgICAgIGVsVG9JZHguc2V0KGRyYWdnYWJsZUVsLCBpZHgpO1xuICAgICAgaWYgKCFpbml0aWFsaXplZCkge1xuICAgICAgICBpbml0aWFsaXplZCA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGNvbmZpZ3VyZShvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShuZXdPcHRpb25zKSB7XG4gICAgICBwcmludERlYnVnKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIFwicG9pbnRlciBkbmR6b25lIHdpbGwgdXBkYXRlIG5ld09wdGlvbnM6IFwiLmNvbmNhdCh0b1N0cmluZyhuZXdPcHRpb25zKSk7XG4gICAgICB9KTtcbiAgICAgIGNvbmZpZ3VyZShuZXdPcHRpb25zKTtcbiAgICB9LFxuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICBmdW5jdGlvbiBkZXN0cm95RHooKSB7XG4gICAgICAgIHByaW50RGVidWcoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBcInBvaW50ZXIgZG5kem9uZSB3aWxsIGRlc3Ryb3lcIjtcbiAgICAgICAgfSk7XG4gICAgICAgIHVucmVnaXN0ZXJEcm9wWm9uZShub2RlLCBkelRvQ29uZmlnLmdldChub2RlKS50eXBlKTtcbiAgICAgICAgZHpUb0NvbmZpZ1tcImRlbGV0ZVwiXShub2RlKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1dvcmtpbmdPblByZXZpb3VzRHJhZykge1xuICAgICAgICBwcmludERlYnVnKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZXR1cm4gXCJwb2ludGVyIGRuZHpvbmUgd2lsbCBiZSBzY2hlZHVsZWQgZm9yIGRlc3RydWN0aW9uXCI7XG4gICAgICAgIH0pO1xuICAgICAgICBzY2hlZHVsZURaRm9yUmVtb3ZhbEFmdGVyRHJvcChub2RlLCBkZXN0cm95RHopO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVzdHJveUR6KCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuXG52YXIgX0lEX1RPX0lOU1RSVUNUSU9OO1xudmFyIElOU1RSVUNUSU9OX0lEcyA9IHtcbiAgRE5EX1pPTkVfQUNUSVZFOiBcImRuZC16b25lLWFjdGl2ZVwiLFxuICBETkRfWk9ORV9EUkFHX0RJU0FCTEVEOiBcImRuZC16b25lLWRyYWctZGlzYWJsZWRcIlxufTtcbnZhciBJRF9UT19JTlNUUlVDVElPTiA9IChfSURfVE9fSU5TVFJVQ1RJT04gPSB7fSwgX2RlZmluZVByb3BlcnR5KF9JRF9UT19JTlNUUlVDVElPTiwgSU5TVFJVQ1RJT05fSURzLkRORF9aT05FX0FDVElWRSwgXCJUYWIgdG8gb25lIHRoZSBpdGVtcyBhbmQgcHJlc3Mgc3BhY2UtYmFyIG9yIGVudGVyIHRvIHN0YXJ0IGRyYWdnaW5nIGl0XCIpLCBfZGVmaW5lUHJvcGVydHkoX0lEX1RPX0lOU1RSVUNUSU9OLCBJTlNUUlVDVElPTl9JRHMuRE5EX1pPTkVfRFJBR19ESVNBQkxFRCwgXCJUaGlzIGlzIGEgZGlzYWJsZWQgZHJhZyBhbmQgZHJvcCBsaXN0XCIpLCBfSURfVE9fSU5TVFJVQ1RJT04pO1xudmFyIEFMRVJUX0RJVl9JRCA9IFwiZG5kLWFjdGlvbi1hcmlhLWFsZXJ0XCI7XG52YXIgYWxlcnRzRGl2O1xuZnVuY3Rpb24gaW5pdEFyaWFPbkJyb3dzZXIoKSB7XG4gIGlmIChhbGVydHNEaXYpIHtcbiAgICAvLyBpdCBpcyBhbHJlYWR5IGluaXRpYWxpemVkXG4gICAgcmV0dXJuO1xuICB9XG4gIC8vIHNldHRpbmcgdGhlIGR5bmFtaWMgYWxlcnRzXG4gIGFsZXJ0c0RpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIChmdW5jdGlvbiBpbml0QWxlcnRzRGl2KCkge1xuICAgIGFsZXJ0c0Rpdi5pZCA9IEFMRVJUX0RJVl9JRDtcbiAgICAvLyB0YWIgaW5kZXggLTEgbWFrZXMgdGhlIGFsZXJ0IGJlIHJlYWQgdHdpY2Ugb24gY2hyb21lIGZvciBzb21lIHJlYXNvblxuICAgIC8vYWxlcnRzRGl2LnRhYkluZGV4ID0gLTE7XG4gICAgYWxlcnRzRGl2LnN0eWxlLnBvc2l0aW9uID0gXCJmaXhlZFwiO1xuICAgIGFsZXJ0c0Rpdi5zdHlsZS5ib3R0b20gPSBcIjBcIjtcbiAgICBhbGVydHNEaXYuc3R5bGUubGVmdCA9IFwiMFwiO1xuICAgIGFsZXJ0c0Rpdi5zdHlsZS56SW5kZXggPSBcIi01XCI7XG4gICAgYWxlcnRzRGl2LnN0eWxlLm9wYWNpdHkgPSBcIjBcIjtcbiAgICBhbGVydHNEaXYuc3R5bGUuaGVpZ2h0ID0gXCIwXCI7XG4gICAgYWxlcnRzRGl2LnN0eWxlLndpZHRoID0gXCIwXCI7XG4gICAgYWxlcnRzRGl2LnNldEF0dHJpYnV0ZShcInJvbGVcIiwgXCJhbGVydFwiKTtcbiAgfSkoKTtcbiAgZG9jdW1lbnQuYm9keS5wcmVwZW5kKGFsZXJ0c0Rpdik7XG5cbiAgLy8gc2V0dGluZyB0aGUgaW5zdHJ1Y3Rpb25zXG4gIE9iamVjdC5lbnRyaWVzKElEX1RPX0lOU1RSVUNUSU9OKS5mb3JFYWNoKGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgdmFyIF9yZWYyID0gX3NsaWNlZFRvQXJyYXkoX3JlZiwgMiksXG4gICAgICBpZCA9IF9yZWYyWzBdLFxuICAgICAgdHh0ID0gX3JlZjJbMV07XG4gICAgcmV0dXJuIGRvY3VtZW50LmJvZHkucHJlcGVuZChpbnN0cnVjdGlvblRvSGlkZGVuRGl2KGlkLCB0eHQpKTtcbiAgfSk7XG59XG5cbi8qKlxuICogSW5pdGlhbGl6ZXMgdGhlIHN0YXRpYyBhcmlhIGluc3RydWN0aW9ucyBzbyB0aGV5IGNhbiBiZSBhdHRhY2hlZCB0byB6b25lc1xuICogQHJldHVybiB7e0RORF9aT05FX0FDVElWRTogc3RyaW5nLCBETkRfWk9ORV9EUkFHX0RJU0FCTEVEOiBzdHJpbmd9IHwgbnVsbH0gLSB0aGUgSURzIGZvciBzdGF0aWMgYXJpYSBpbnN0cnVjdGlvbiAodG8gYmUgdXNlZCB2aWEgYXJpYS1kZXNjcmliZWRieSkgb3IgbnVsbCBvbiB0aGUgc2VydmVyXG4gKi9cbmZ1bmN0aW9uIGluaXRBcmlhKCkge1xuICBpZiAoaXNPblNlcnZlcikgcmV0dXJuIG51bGw7XG4gIGlmIChkb2N1bWVudC5yZWFkeVN0YXRlID09PSBcImNvbXBsZXRlXCIpIHtcbiAgICBpbml0QXJpYU9uQnJvd3NlcigpO1xuICB9IGVsc2Uge1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLCBpbml0QXJpYU9uQnJvd3Nlcik7XG4gIH1cbiAgcmV0dXJuIF9vYmplY3RTcHJlYWQyKHt9LCBJTlNUUlVDVElPTl9JRHMpO1xufVxuXG4vKipcbiAqIFJlbW92ZXMgYWxsIHRoZSBhcnRpZmFjdHMgKGRvbSBlbGVtZW50cykgYWRkZWQgYnkgdGhpcyBtb2R1bGVcbiAqL1xuZnVuY3Rpb24gZGVzdHJveUFyaWEoKSB7XG4gIGlmIChpc09uU2VydmVyIHx8ICFhbGVydHNEaXYpIHJldHVybjtcbiAgT2JqZWN0LmtleXMoSURfVE9fSU5TVFJVQ1RJT04pLmZvckVhY2goZnVuY3Rpb24gKGlkKSB7XG4gICAgdmFyIF9kb2N1bWVudCRnZXRFbGVtZW50QjtcbiAgICByZXR1cm4gKF9kb2N1bWVudCRnZXRFbGVtZW50QiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKSkgPT09IG51bGwgfHwgX2RvY3VtZW50JGdldEVsZW1lbnRCID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZG9jdW1lbnQkZ2V0RWxlbWVudEIucmVtb3ZlKCk7XG4gIH0pO1xuICBhbGVydHNEaXYucmVtb3ZlKCk7XG4gIGFsZXJ0c0RpdiA9IHVuZGVmaW5lZDtcbn1cbmZ1bmN0aW9uIGluc3RydWN0aW9uVG9IaWRkZW5EaXYoaWQsIHR4dCkge1xuICB2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgZGl2LmlkID0gaWQ7XG4gIGRpdi5pbm5lckhUTUwgPSBcIjxwPlwiLmNvbmNhdCh0eHQsIFwiPC9wPlwiKTtcbiAgZGl2LnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgZGl2LnN0eWxlLnBvc2l0aW9uID0gXCJmaXhlZFwiO1xuICBkaXYuc3R5bGUuekluZGV4ID0gXCItNVwiO1xuICByZXR1cm4gZGl2O1xufVxuXG4vKipcbiAqIFdpbGwgbWFrZSB0aGUgc2NyZWVuIHJlYWRlciBhbGVydCB0aGUgcHJvdmlkZWQgdGV4dCB0byB0aGUgdXNlclxuICogQHBhcmFtIHtzdHJpbmd9IHR4dFxuICovXG5mdW5jdGlvbiBhbGVydFRvU2NyZWVuUmVhZGVyKHR4dCkge1xuICBpZiAoaXNPblNlcnZlcikgcmV0dXJuO1xuICBpZiAoIWFsZXJ0c0Rpdikge1xuICAgIGluaXRBcmlhT25Ccm93c2VyKCk7XG4gIH1cbiAgYWxlcnRzRGl2LmlubmVySFRNTCA9IFwiXCI7XG4gIHZhciBhbGVydFRleHQgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh0eHQpO1xuICBhbGVydHNEaXYuYXBwZW5kQ2hpbGQoYWxlcnRUZXh0KTtcbiAgLy8gdGhpcyBpcyBuZWVkZWQgZm9yIFNhZmFyaVxuICBhbGVydHNEaXYuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiO1xuICBhbGVydHNEaXYuc3R5bGUuZGlzcGxheSA9IFwiaW5saW5lXCI7XG59XG5cbnZhciBERUZBVUxUX0RST1BfWk9ORV9UWVBFJDEgPSBcIi0tYW55LS1cIjtcbnZhciBERUZBVUxUX0RST1BfVEFSR0VUX1NUWUxFJDEgPSB7XG4gIG91dGxpbmU6IFwicmdiYSgyNTUsIDI1NSwgMTAyLCAwLjcpIHNvbGlkIDJweFwiXG59O1xudmFyIGlzRHJhZ2dpbmcgPSBmYWxzZTtcbnZhciBkcmFnZ2VkSXRlbVR5cGU7XG52YXIgZm9jdXNlZER6O1xudmFyIGZvY3VzZWREekxhYmVsID0gXCJcIjtcbnZhciBmb2N1c2VkSXRlbTtcbnZhciBmb2N1c2VkSXRlbUlkO1xudmFyIGZvY3VzZWRJdGVtTGFiZWwgPSBcIlwiO1xudmFyIGFsbERyYWdUYXJnZXRzID0gbmV3IFdlYWtTZXQoKTtcbnZhciBlbFRvS2V5RG93bkxpc3RlbmVycyA9IG5ldyBXZWFrTWFwKCk7XG52YXIgZWxUb0ZvY3VzTGlzdGVuZXJzID0gbmV3IFdlYWtNYXAoKTtcbnZhciBkelRvSGFuZGxlcyA9IG5ldyBNYXAoKTtcbnZhciBkelRvQ29uZmlnJDEgPSBuZXcgTWFwKCk7XG52YXIgdHlwZVRvRHJvcFpvbmVzJDEgPSBuZXcgTWFwKCk7XG5cbi8qIFRPRE8gKHBvdGVudGlhbGx5KVxuICogd2hhdCdzIHRoZSBkZWFsIHdpdGggdGhlIGJsYWNrIGJvcmRlciBvZiB2b2ljZS1yZWFkZXIgbm90IGZvbGxvd2luZyBmb2N1cz9cbiAqIG1heWJlIGtlZXAgZm9jdXMgb24gdGhlIGxhc3QgZHJhZ2dlZCBpdGVtIHVwb24gZHJvcD9cbiAqL1xuXG52YXIgSU5TVFJVQ1RJT05fSURzJDE7XG5cbi8qIGRyb3Atem9uZXMgcmVnaXN0cmF0aW9uIG1hbmFnZW1lbnQgKi9cbmZ1bmN0aW9uIHJlZ2lzdGVyRHJvcFpvbmUkMShkcm9wWm9uZUVsLCB0eXBlKSB7XG4gIHByaW50RGVidWcoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBcInJlZ2lzdGVyaW5nIGRyb3Atem9uZSBpZiBhYnNlbnRcIjtcbiAgfSk7XG4gIGlmICh0eXBlVG9Ecm9wWm9uZXMkMS5zaXplID09PSAwKSB7XG4gICAgcHJpbnREZWJ1ZyhmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gXCJhZGRpbmcgZ2xvYmFsIGtleWRvd24gYW5kIGNsaWNrIGhhbmRsZXJzXCI7XG4gICAgfSk7XG4gICAgSU5TVFJVQ1RJT05fSURzJDEgPSBpbml0QXJpYSgpO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBnbG9iYWxLZXlEb3duSGFuZGxlcik7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBnbG9iYWxDbGlja0hhbmRsZXIpO1xuICB9XG4gIGlmICghdHlwZVRvRHJvcFpvbmVzJDEuaGFzKHR5cGUpKSB7XG4gICAgdHlwZVRvRHJvcFpvbmVzJDEuc2V0KHR5cGUsIG5ldyBTZXQoKSk7XG4gIH1cbiAgaWYgKCF0eXBlVG9Ecm9wWm9uZXMkMS5nZXQodHlwZSkuaGFzKGRyb3Bab25lRWwpKSB7XG4gICAgdHlwZVRvRHJvcFpvbmVzJDEuZ2V0KHR5cGUpLmFkZChkcm9wWm9uZUVsKTtcbiAgICBpbmNyZW1lbnRBY3RpdmVEcm9wWm9uZUNvdW50KCk7XG4gIH1cbn1cbmZ1bmN0aW9uIHVucmVnaXN0ZXJEcm9wWm9uZSQxKGRyb3Bab25lRWwsIHR5cGUpIHtcbiAgcHJpbnREZWJ1ZyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIFwidW5yZWdpc3RlcmluZyBkcm9wLXpvbmVcIjtcbiAgfSk7XG4gIGlmIChmb2N1c2VkRHogPT09IGRyb3Bab25lRWwpIHtcbiAgICBoYW5kbGVEcm9wJDEoKTtcbiAgfVxuICB0eXBlVG9Ecm9wWm9uZXMkMS5nZXQodHlwZSlbXCJkZWxldGVcIl0oZHJvcFpvbmVFbCk7XG4gIGRlY3JlbWVudEFjdGl2ZURyb3Bab25lQ291bnQoKTtcbiAgaWYgKHR5cGVUb0Ryb3Bab25lcyQxLmdldCh0eXBlKS5zaXplID09PSAwKSB7XG4gICAgdHlwZVRvRHJvcFpvbmVzJDFbXCJkZWxldGVcIl0odHlwZSk7XG4gIH1cbiAgaWYgKHR5cGVUb0Ryb3Bab25lcyQxLnNpemUgPT09IDApIHtcbiAgICBwcmludERlYnVnKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBcInJlbW92aW5nIGdsb2JhbCBrZXlkb3duIGFuZCBjbGljayBoYW5kbGVyc1wiO1xuICAgIH0pO1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBnbG9iYWxLZXlEb3duSGFuZGxlcik7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBnbG9iYWxDbGlja0hhbmRsZXIpO1xuICAgIElOU1RSVUNUSU9OX0lEcyQxID0gdW5kZWZpbmVkO1xuICAgIGRlc3Ryb3lBcmlhKCk7XG4gIH1cbn1cbmZ1bmN0aW9uIGdsb2JhbEtleURvd25IYW5kbGVyKGUpIHtcbiAgaWYgKCFpc0RyYWdnaW5nKSByZXR1cm47XG4gIHN3aXRjaCAoZS5rZXkpIHtcbiAgICBjYXNlIFwiRXNjYXBlXCI6XG4gICAgICB7XG4gICAgICAgIGhhbmRsZURyb3AkMSgpO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gZ2xvYmFsQ2xpY2tIYW5kbGVyKCkge1xuICBpZiAoIWlzRHJhZ2dpbmcpIHJldHVybjtcbiAgaWYgKCFhbGxEcmFnVGFyZ2V0cy5oYXMoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkpIHtcbiAgICBwcmludERlYnVnKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBcImNsaWNrZWQgb3V0c2lkZSBvZiBhbnkgZHJhZ2dhYmxlXCI7XG4gICAgfSk7XG4gICAgaGFuZGxlRHJvcCQxKCk7XG4gIH1cbn1cbmZ1bmN0aW9uIGhhbmRsZVpvbmVGb2N1cyhlKSB7XG4gIHByaW50RGVidWcoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBcInpvbmUgZm9jdXNcIjtcbiAgfSk7XG4gIGlmICghaXNEcmFnZ2luZykgcmV0dXJuO1xuICB2YXIgbmV3bHlGb2N1c2VkRHogPSBlLmN1cnJlbnRUYXJnZXQ7XG4gIGlmIChuZXdseUZvY3VzZWREeiA9PT0gZm9jdXNlZER6KSByZXR1cm47XG4gIGZvY3VzZWREekxhYmVsID0gbmV3bHlGb2N1c2VkRHouZ2V0QXR0cmlidXRlKFwiYXJpYS1sYWJlbFwiKSB8fCBcIlwiO1xuICB2YXIgX2R6VG9Db25maWckZ2V0ID0gZHpUb0NvbmZpZyQxLmdldChmb2N1c2VkRHopLFxuICAgIG9yaWdpbkl0ZW1zID0gX2R6VG9Db25maWckZ2V0Lml0ZW1zO1xuICB2YXIgb3JpZ2luSXRlbSA9IG9yaWdpbkl0ZW1zLmZpbmQoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICByZXR1cm4gaXRlbVtJVEVNX0lEX0tFWV0gPT09IGZvY3VzZWRJdGVtSWQ7XG4gIH0pO1xuICB2YXIgb3JpZ2luSWR4ID0gb3JpZ2luSXRlbXMuaW5kZXhPZihvcmlnaW5JdGVtKTtcbiAgdmFyIGl0ZW1Ub01vdmUgPSBvcmlnaW5JdGVtcy5zcGxpY2Uob3JpZ2luSWR4LCAxKVswXTtcbiAgdmFyIF9kelRvQ29uZmlnJGdldDIgPSBkelRvQ29uZmlnJDEuZ2V0KG5ld2x5Rm9jdXNlZER6KSxcbiAgICB0YXJnZXRJdGVtcyA9IF9kelRvQ29uZmlnJGdldDIuaXRlbXMsXG4gICAgYXV0b0FyaWFEaXNhYmxlZCA9IF9kelRvQ29uZmlnJGdldDIuYXV0b0FyaWFEaXNhYmxlZDtcbiAgaWYgKG5ld2x5Rm9jdXNlZER6LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcCA8IGZvY3VzZWREei5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3AgfHwgbmV3bHlGb2N1c2VkRHouZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCA8IGZvY3VzZWREei5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0KSB7XG4gICAgdGFyZ2V0SXRlbXMucHVzaChpdGVtVG9Nb3ZlKTtcbiAgICBpZiAoIWF1dG9BcmlhRGlzYWJsZWQpIHtcbiAgICAgIGFsZXJ0VG9TY3JlZW5SZWFkZXIoXCJNb3ZlZCBpdGVtIFwiLmNvbmNhdChmb2N1c2VkSXRlbUxhYmVsLCBcIiB0byB0aGUgZW5kIG9mIHRoZSBsaXN0IFwiKS5jb25jYXQoZm9jdXNlZER6TGFiZWwpKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGFyZ2V0SXRlbXMudW5zaGlmdChpdGVtVG9Nb3ZlKTtcbiAgICBpZiAoIWF1dG9BcmlhRGlzYWJsZWQpIHtcbiAgICAgIGFsZXJ0VG9TY3JlZW5SZWFkZXIoXCJNb3ZlZCBpdGVtIFwiLmNvbmNhdChmb2N1c2VkSXRlbUxhYmVsLCBcIiB0byB0aGUgYmVnaW5uaW5nIG9mIHRoZSBsaXN0IFwiKS5jb25jYXQoZm9jdXNlZER6TGFiZWwpKTtcbiAgICB9XG4gIH1cbiAgdmFyIGR6RnJvbSA9IGZvY3VzZWREejtcbiAgZGlzcGF0Y2hGaW5hbGl6ZUV2ZW50KGR6RnJvbSwgb3JpZ2luSXRlbXMsIHtcbiAgICB0cmlnZ2VyOiBUUklHR0VSUy5EUk9QUEVEX0lOVE9fQU5PVEhFUixcbiAgICBpZDogZm9jdXNlZEl0ZW1JZCxcbiAgICBzb3VyY2U6IFNPVVJDRVMuS0VZQk9BUkRcbiAgfSk7XG4gIGRpc3BhdGNoRmluYWxpemVFdmVudChuZXdseUZvY3VzZWREeiwgdGFyZ2V0SXRlbXMsIHtcbiAgICB0cmlnZ2VyOiBUUklHR0VSUy5EUk9QUEVEX0lOVE9fWk9ORSxcbiAgICBpZDogZm9jdXNlZEl0ZW1JZCxcbiAgICBzb3VyY2U6IFNPVVJDRVMuS0VZQk9BUkRcbiAgfSk7XG4gIGZvY3VzZWREeiA9IG5ld2x5Rm9jdXNlZER6O1xufVxuZnVuY3Rpb24gdHJpZ2dlckFsbER6c1VwZGF0ZSgpIHtcbiAgZHpUb0hhbmRsZXMuZm9yRWFjaChmdW5jdGlvbiAoX3JlZiwgZHopIHtcbiAgICB2YXIgdXBkYXRlID0gX3JlZi51cGRhdGU7XG4gICAgcmV0dXJuIHVwZGF0ZShkelRvQ29uZmlnJDEuZ2V0KGR6KSk7XG4gIH0pO1xufVxuZnVuY3Rpb24gaGFuZGxlRHJvcCQxKCkge1xuICB2YXIgZGlzcGF0Y2hDb25zaWRlciA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogdHJ1ZTtcbiAgcHJpbnREZWJ1ZyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIFwiZHJvcFwiO1xuICB9KTtcbiAgaWYgKCFkelRvQ29uZmlnJDEuZ2V0KGZvY3VzZWREeikuYXV0b0FyaWFEaXNhYmxlZCkge1xuICAgIGFsZXJ0VG9TY3JlZW5SZWFkZXIoXCJTdG9wcGVkIGRyYWdnaW5nIGl0ZW0gXCIuY29uY2F0KGZvY3VzZWRJdGVtTGFiZWwpKTtcbiAgfVxuICBpZiAoYWxsRHJhZ1RhcmdldHMuaGFzKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpKSB7XG4gICAgZG9jdW1lbnQuYWN0aXZlRWxlbWVudC5ibHVyKCk7XG4gIH1cbiAgaWYgKGRpc3BhdGNoQ29uc2lkZXIpIHtcbiAgICBkaXNwYXRjaENvbnNpZGVyRXZlbnQoZm9jdXNlZER6LCBkelRvQ29uZmlnJDEuZ2V0KGZvY3VzZWREeikuaXRlbXMsIHtcbiAgICAgIHRyaWdnZXI6IFRSSUdHRVJTLkRSQUdfU1RPUFBFRCxcbiAgICAgIGlkOiBmb2N1c2VkSXRlbUlkLFxuICAgICAgc291cmNlOiBTT1VSQ0VTLktFWUJPQVJEXG4gICAgfSk7XG4gIH1cbiAgc3R5bGVJbmFjdGl2ZURyb3Bab25lcyh0eXBlVG9Ecm9wWm9uZXMkMS5nZXQoZHJhZ2dlZEl0ZW1UeXBlKSwgZnVuY3Rpb24gKGR6KSB7XG4gICAgcmV0dXJuIGR6VG9Db25maWckMS5nZXQoZHopLmRyb3BUYXJnZXRTdHlsZTtcbiAgfSwgZnVuY3Rpb24gKGR6KSB7XG4gICAgcmV0dXJuIGR6VG9Db25maWckMS5nZXQoZHopLmRyb3BUYXJnZXRDbGFzc2VzO1xuICB9KTtcbiAgZm9jdXNlZEl0ZW0gPSBudWxsO1xuICBmb2N1c2VkSXRlbUlkID0gbnVsbDtcbiAgZm9jdXNlZEl0ZW1MYWJlbCA9IFwiXCI7XG4gIGRyYWdnZWRJdGVtVHlwZSA9IG51bGw7XG4gIGZvY3VzZWREeiA9IG51bGw7XG4gIGZvY3VzZWREekxhYmVsID0gXCJcIjtcbiAgaXNEcmFnZ2luZyA9IGZhbHNlO1xuICB0cmlnZ2VyQWxsRHpzVXBkYXRlKCk7XG59XG4vLy8vLy9cbmZ1bmN0aW9uIGRuZHpvbmUkMShub2RlLCBvcHRpb25zKSB7XG4gIHZhciBjb25maWcgPSB7XG4gICAgaXRlbXM6IHVuZGVmaW5lZCxcbiAgICB0eXBlOiB1bmRlZmluZWQsXG4gICAgZHJhZ0Rpc2FibGVkOiBmYWxzZSxcbiAgICB6b25lVGFiSW5kZXg6IDAsXG4gICAgZHJvcEZyb21PdGhlcnNEaXNhYmxlZDogZmFsc2UsXG4gICAgZHJvcFRhcmdldFN0eWxlOiBERUZBVUxUX0RST1BfVEFSR0VUX1NUWUxFJDEsXG4gICAgZHJvcFRhcmdldENsYXNzZXM6IFtdLFxuICAgIGF1dG9BcmlhRGlzYWJsZWQ6IGZhbHNlXG4gIH07XG4gIGZ1bmN0aW9uIHN3YXAoYXJyLCBpLCBqKSB7XG4gICAgaWYgKGFyci5sZW5ndGggPD0gMSkgcmV0dXJuO1xuICAgIGFyci5zcGxpY2UoaiwgMSwgYXJyLnNwbGljZShpLCAxLCBhcnJbal0pWzBdKTtcbiAgfVxuICBmdW5jdGlvbiBoYW5kbGVLZXlEb3duKGUpIHtcbiAgICBwcmludERlYnVnKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBbXCJoYW5kbGluZyBrZXkgZG93blwiLCBlLmtleV07XG4gICAgfSk7XG4gICAgc3dpdGNoIChlLmtleSkge1xuICAgICAgY2FzZSBcIkVudGVyXCI6XG4gICAgICBjYXNlIFwiIFwiOlxuICAgICAgICB7XG4gICAgICAgICAgLy8gd2UgZG9uJ3Qgd2FudCB0byBhZmZlY3QgbmVzdGVkIGlucHV0IGVsZW1lbnRzIG9yIGNsaWNrYWJsZSBlbGVtZW50c1xuICAgICAgICAgIGlmICgoZS50YXJnZXQuZGlzYWJsZWQgIT09IHVuZGVmaW5lZCB8fCBlLnRhcmdldC5ocmVmIHx8IGUudGFyZ2V0LmlzQ29udGVudEVkaXRhYmxlKSAmJiAhYWxsRHJhZ1RhcmdldHMuaGFzKGUudGFyZ2V0KSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7IC8vIHByZXZlbnRpbmcgc2Nyb2xsaW5nIG9uIHNwYWNlYmFyXG4gICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICBpZiAoaXNEcmFnZ2luZykge1xuICAgICAgICAgICAgLy8gVE9ETyAtIHNob3VsZCB0aGlzIHRyaWdnZXIgYSBkcm9wPyBvbmx5IGhlcmUgb3IgaW4gZ2VuZXJhbCAoYXMgaW4gd2hlbiBoaXR0aW5nIHNwYWNlIG9yIGVudGVyIG91dHNpZGUgb2YgYW55IHpvbmUpP1xuICAgICAgICAgICAgaGFuZGxlRHJvcCQxKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGRyYWcgc3RhcnRcbiAgICAgICAgICAgIGhhbmRsZURyYWdTdGFydChlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIGNhc2UgXCJBcnJvd0Rvd25cIjpcbiAgICAgIGNhc2UgXCJBcnJvd1JpZ2h0XCI6XG4gICAgICAgIHtcbiAgICAgICAgICBpZiAoIWlzRHJhZ2dpbmcpIHJldHVybjtcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7IC8vIHByZXZlbnQgc2Nyb2xsaW5nXG4gICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICB2YXIgX2R6VG9Db25maWckZ2V0MyA9IGR6VG9Db25maWckMS5nZXQobm9kZSksXG4gICAgICAgICAgICBpdGVtcyA9IF9kelRvQ29uZmlnJGdldDMuaXRlbXM7XG4gICAgICAgICAgdmFyIGNoaWxkcmVuID0gQXJyYXkuZnJvbShub2RlLmNoaWxkcmVuKTtcbiAgICAgICAgICB2YXIgaWR4ID0gY2hpbGRyZW4uaW5kZXhPZihlLmN1cnJlbnRUYXJnZXQpO1xuICAgICAgICAgIHByaW50RGVidWcoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIFtcImFycm93IGRvd25cIiwgaWR4XTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBpZiAoaWR4IDwgY2hpbGRyZW4ubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgaWYgKCFjb25maWcuYXV0b0FyaWFEaXNhYmxlZCkge1xuICAgICAgICAgICAgICBhbGVydFRvU2NyZWVuUmVhZGVyKFwiTW92ZWQgaXRlbSBcIi5jb25jYXQoZm9jdXNlZEl0ZW1MYWJlbCwgXCIgdG8gcG9zaXRpb24gXCIpLmNvbmNhdChpZHggKyAyLCBcIiBpbiB0aGUgbGlzdCBcIikuY29uY2F0KGZvY3VzZWREekxhYmVsKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzd2FwKGl0ZW1zLCBpZHgsIGlkeCArIDEpO1xuICAgICAgICAgICAgZGlzcGF0Y2hGaW5hbGl6ZUV2ZW50KG5vZGUsIGl0ZW1zLCB7XG4gICAgICAgICAgICAgIHRyaWdnZXI6IFRSSUdHRVJTLkRST1BQRURfSU5UT19aT05FLFxuICAgICAgICAgICAgICBpZDogZm9jdXNlZEl0ZW1JZCxcbiAgICAgICAgICAgICAgc291cmNlOiBTT1VSQ0VTLktFWUJPQVJEXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIGNhc2UgXCJBcnJvd1VwXCI6XG4gICAgICBjYXNlIFwiQXJyb3dMZWZ0XCI6XG4gICAgICAgIHtcbiAgICAgICAgICBpZiAoIWlzRHJhZ2dpbmcpIHJldHVybjtcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7IC8vIHByZXZlbnQgc2Nyb2xsaW5nXG4gICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICB2YXIgX2R6VG9Db25maWckZ2V0NCA9IGR6VG9Db25maWckMS5nZXQobm9kZSksXG4gICAgICAgICAgICBfaXRlbXMgPSBfZHpUb0NvbmZpZyRnZXQ0Lml0ZW1zO1xuICAgICAgICAgIHZhciBfY2hpbGRyZW4gPSBBcnJheS5mcm9tKG5vZGUuY2hpbGRyZW4pO1xuICAgICAgICAgIHZhciBfaWR4ID0gX2NoaWxkcmVuLmluZGV4T2YoZS5jdXJyZW50VGFyZ2V0KTtcbiAgICAgICAgICBwcmludERlYnVnKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBbXCJhcnJvdyB1cFwiLCBfaWR4XTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBpZiAoX2lkeCA+IDApIHtcbiAgICAgICAgICAgIGlmICghY29uZmlnLmF1dG9BcmlhRGlzYWJsZWQpIHtcbiAgICAgICAgICAgICAgYWxlcnRUb1NjcmVlblJlYWRlcihcIk1vdmVkIGl0ZW0gXCIuY29uY2F0KGZvY3VzZWRJdGVtTGFiZWwsIFwiIHRvIHBvc2l0aW9uIFwiKS5jb25jYXQoX2lkeCwgXCIgaW4gdGhlIGxpc3QgXCIpLmNvbmNhdChmb2N1c2VkRHpMYWJlbCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3dhcChfaXRlbXMsIF9pZHgsIF9pZHggLSAxKTtcbiAgICAgICAgICAgIGRpc3BhdGNoRmluYWxpemVFdmVudChub2RlLCBfaXRlbXMsIHtcbiAgICAgICAgICAgICAgdHJpZ2dlcjogVFJJR0dFUlMuRFJPUFBFRF9JTlRPX1pPTkUsXG4gICAgICAgICAgICAgIGlkOiBmb2N1c2VkSXRlbUlkLFxuICAgICAgICAgICAgICBzb3VyY2U6IFNPVVJDRVMuS0VZQk9BUkRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBoYW5kbGVEcmFnU3RhcnQoZSkge1xuICAgIHByaW50RGVidWcoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIFwiZHJhZyBzdGFydFwiO1xuICAgIH0pO1xuICAgIHNldEN1cnJlbnRGb2N1c2VkSXRlbShlLmN1cnJlbnRUYXJnZXQpO1xuICAgIGZvY3VzZWREeiA9IG5vZGU7XG4gICAgZHJhZ2dlZEl0ZW1UeXBlID0gY29uZmlnLnR5cGU7XG4gICAgaXNEcmFnZ2luZyA9IHRydWU7XG4gICAgdmFyIGRyb3BUYXJnZXRzID0gQXJyYXkuZnJvbSh0eXBlVG9Ecm9wWm9uZXMkMS5nZXQoY29uZmlnLnR5cGUpKS5maWx0ZXIoZnVuY3Rpb24gKGR6KSB7XG4gICAgICByZXR1cm4gZHogPT09IGZvY3VzZWREeiB8fCAhZHpUb0NvbmZpZyQxLmdldChkeikuZHJvcEZyb21PdGhlcnNEaXNhYmxlZDtcbiAgICB9KTtcbiAgICBzdHlsZUFjdGl2ZURyb3Bab25lcyhkcm9wVGFyZ2V0cywgZnVuY3Rpb24gKGR6KSB7XG4gICAgICByZXR1cm4gZHpUb0NvbmZpZyQxLmdldChkeikuZHJvcFRhcmdldFN0eWxlO1xuICAgIH0sIGZ1bmN0aW9uIChkeikge1xuICAgICAgcmV0dXJuIGR6VG9Db25maWckMS5nZXQoZHopLmRyb3BUYXJnZXRDbGFzc2VzO1xuICAgIH0pO1xuICAgIGlmICghY29uZmlnLmF1dG9BcmlhRGlzYWJsZWQpIHtcbiAgICAgIHZhciBtc2cgPSBcIlN0YXJ0ZWQgZHJhZ2dpbmcgaXRlbSBcIi5jb25jYXQoZm9jdXNlZEl0ZW1MYWJlbCwgXCIuIFVzZSB0aGUgYXJyb3cga2V5cyB0byBtb3ZlIGl0IHdpdGhpbiBpdHMgbGlzdCBcIikuY29uY2F0KGZvY3VzZWREekxhYmVsKTtcbiAgICAgIGlmIChkcm9wVGFyZ2V0cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIG1zZyArPSBcIiwgb3IgdGFiIHRvIGFub3RoZXIgbGlzdCBpbiBvcmRlciB0byBtb3ZlIHRoZSBpdGVtIGludG8gaXRcIjtcbiAgICAgIH1cbiAgICAgIGFsZXJ0VG9TY3JlZW5SZWFkZXIobXNnKTtcbiAgICB9XG4gICAgZGlzcGF0Y2hDb25zaWRlckV2ZW50KG5vZGUsIGR6VG9Db25maWckMS5nZXQobm9kZSkuaXRlbXMsIHtcbiAgICAgIHRyaWdnZXI6IFRSSUdHRVJTLkRSQUdfU1RBUlRFRCxcbiAgICAgIGlkOiBmb2N1c2VkSXRlbUlkLFxuICAgICAgc291cmNlOiBTT1VSQ0VTLktFWUJPQVJEXG4gICAgfSk7XG4gICAgdHJpZ2dlckFsbER6c1VwZGF0ZSgpO1xuICB9XG4gIGZ1bmN0aW9uIGhhbmRsZUNsaWNrKGUpIHtcbiAgICBpZiAoIWlzRHJhZ2dpbmcpIHJldHVybjtcbiAgICBpZiAoZS5jdXJyZW50VGFyZ2V0ID09PSBmb2N1c2VkSXRlbSkgcmV0dXJuO1xuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgaGFuZGxlRHJvcCQxKGZhbHNlKTtcbiAgICBoYW5kbGVEcmFnU3RhcnQoZSk7XG4gIH1cbiAgZnVuY3Rpb24gc2V0Q3VycmVudEZvY3VzZWRJdGVtKGRyYWdnYWJsZUVsKSB7XG4gICAgdmFyIF9kelRvQ29uZmlnJGdldDUgPSBkelRvQ29uZmlnJDEuZ2V0KG5vZGUpLFxuICAgICAgaXRlbXMgPSBfZHpUb0NvbmZpZyRnZXQ1Lml0ZW1zO1xuICAgIHZhciBjaGlsZHJlbiA9IEFycmF5LmZyb20obm9kZS5jaGlsZHJlbik7XG4gICAgdmFyIGZvY3VzZWRJdGVtSWR4ID0gY2hpbGRyZW4uaW5kZXhPZihkcmFnZ2FibGVFbCk7XG4gICAgZm9jdXNlZEl0ZW0gPSBkcmFnZ2FibGVFbDtcbiAgICBmb2N1c2VkSXRlbS50YWJJbmRleCA9IDA7XG4gICAgZm9jdXNlZEl0ZW1JZCA9IGl0ZW1zW2ZvY3VzZWRJdGVtSWR4XVtJVEVNX0lEX0tFWV07XG4gICAgZm9jdXNlZEl0ZW1MYWJlbCA9IGNoaWxkcmVuW2ZvY3VzZWRJdGVtSWR4XS5nZXRBdHRyaWJ1dGUoXCJhcmlhLWxhYmVsXCIpIHx8IFwiXCI7XG4gIH1cbiAgZnVuY3Rpb24gY29uZmlndXJlKF9yZWYyKSB7XG4gICAgdmFyIF9yZWYyJGl0ZW1zID0gX3JlZjIuaXRlbXMsXG4gICAgICBpdGVtcyA9IF9yZWYyJGl0ZW1zID09PSB2b2lkIDAgPyBbXSA6IF9yZWYyJGl0ZW1zLFxuICAgICAgX3JlZjIkdHlwZSA9IF9yZWYyLnR5cGUsXG4gICAgICBuZXdUeXBlID0gX3JlZjIkdHlwZSA9PT0gdm9pZCAwID8gREVGQVVMVF9EUk9QX1pPTkVfVFlQRSQxIDogX3JlZjIkdHlwZSxcbiAgICAgIF9yZWYyJGRyYWdEaXNhYmxlZCA9IF9yZWYyLmRyYWdEaXNhYmxlZCxcbiAgICAgIGRyYWdEaXNhYmxlZCA9IF9yZWYyJGRyYWdEaXNhYmxlZCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmMiRkcmFnRGlzYWJsZWQsXG4gICAgICBfcmVmMiR6b25lVGFiSW5kZXggPSBfcmVmMi56b25lVGFiSW5kZXgsXG4gICAgICB6b25lVGFiSW5kZXggPSBfcmVmMiR6b25lVGFiSW5kZXggPT09IHZvaWQgMCA/IDAgOiBfcmVmMiR6b25lVGFiSW5kZXgsXG4gICAgICBfcmVmMiRkcm9wRnJvbU90aGVyc0QgPSBfcmVmMi5kcm9wRnJvbU90aGVyc0Rpc2FibGVkLFxuICAgICAgZHJvcEZyb21PdGhlcnNEaXNhYmxlZCA9IF9yZWYyJGRyb3BGcm9tT3RoZXJzRCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmMiRkcm9wRnJvbU90aGVyc0QsXG4gICAgICBfcmVmMiRkcm9wVGFyZ2V0U3R5bGUgPSBfcmVmMi5kcm9wVGFyZ2V0U3R5bGUsXG4gICAgICBkcm9wVGFyZ2V0U3R5bGUgPSBfcmVmMiRkcm9wVGFyZ2V0U3R5bGUgPT09IHZvaWQgMCA/IERFRkFVTFRfRFJPUF9UQVJHRVRfU1RZTEUkMSA6IF9yZWYyJGRyb3BUYXJnZXRTdHlsZSxcbiAgICAgIF9yZWYyJGRyb3BUYXJnZXRDbGFzcyA9IF9yZWYyLmRyb3BUYXJnZXRDbGFzc2VzLFxuICAgICAgZHJvcFRhcmdldENsYXNzZXMgPSBfcmVmMiRkcm9wVGFyZ2V0Q2xhc3MgPT09IHZvaWQgMCA/IFtdIDogX3JlZjIkZHJvcFRhcmdldENsYXNzLFxuICAgICAgX3JlZjIkYXV0b0FyaWFEaXNhYmxlID0gX3JlZjIuYXV0b0FyaWFEaXNhYmxlZCxcbiAgICAgIGF1dG9BcmlhRGlzYWJsZWQgPSBfcmVmMiRhdXRvQXJpYURpc2FibGUgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZjIkYXV0b0FyaWFEaXNhYmxlO1xuICAgIGNvbmZpZy5pdGVtcyA9IF90b0NvbnN1bWFibGVBcnJheShpdGVtcyk7XG4gICAgY29uZmlnLmRyYWdEaXNhYmxlZCA9IGRyYWdEaXNhYmxlZDtcbiAgICBjb25maWcuZHJvcEZyb21PdGhlcnNEaXNhYmxlZCA9IGRyb3BGcm9tT3RoZXJzRGlzYWJsZWQ7XG4gICAgY29uZmlnLnpvbmVUYWJJbmRleCA9IHpvbmVUYWJJbmRleDtcbiAgICBjb25maWcuZHJvcFRhcmdldFN0eWxlID0gZHJvcFRhcmdldFN0eWxlO1xuICAgIGNvbmZpZy5kcm9wVGFyZ2V0Q2xhc3NlcyA9IGRyb3BUYXJnZXRDbGFzc2VzO1xuICAgIGNvbmZpZy5hdXRvQXJpYURpc2FibGVkID0gYXV0b0FyaWFEaXNhYmxlZDtcbiAgICBpZiAoY29uZmlnLnR5cGUgJiYgbmV3VHlwZSAhPT0gY29uZmlnLnR5cGUpIHtcbiAgICAgIHVucmVnaXN0ZXJEcm9wWm9uZSQxKG5vZGUsIGNvbmZpZy50eXBlKTtcbiAgICB9XG4gICAgY29uZmlnLnR5cGUgPSBuZXdUeXBlO1xuICAgIHJlZ2lzdGVyRHJvcFpvbmUkMShub2RlLCBuZXdUeXBlKTtcbiAgICBpZiAoIWF1dG9BcmlhRGlzYWJsZWQpIHtcbiAgICAgIG5vZGUuc2V0QXR0cmlidXRlKFwiYXJpYS1kaXNhYmxlZFwiLCBkcmFnRGlzYWJsZWQpO1xuICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoXCJyb2xlXCIsIFwibGlzdFwiKTtcbiAgICAgIG5vZGUuc2V0QXR0cmlidXRlKFwiYXJpYS1kZXNjcmliZWRieVwiLCBkcmFnRGlzYWJsZWQgPyBJTlNUUlVDVElPTl9JRHMkMS5ETkRfWk9ORV9EUkFHX0RJU0FCTEVEIDogSU5TVFJVQ1RJT05fSURzJDEuRE5EX1pPTkVfQUNUSVZFKTtcbiAgICB9XG4gICAgZHpUb0NvbmZpZyQxLnNldChub2RlLCBjb25maWcpO1xuICAgIGlmIChpc0RyYWdnaW5nKSB7XG4gICAgICBub2RlLnRhYkluZGV4ID0gbm9kZSA9PT0gZm9jdXNlZER6IHx8IGZvY3VzZWRJdGVtLmNvbnRhaW5zKG5vZGUpIHx8IGNvbmZpZy5kcm9wRnJvbU90aGVyc0Rpc2FibGVkIHx8IGZvY3VzZWREeiAmJiBjb25maWcudHlwZSAhPT0gZHpUb0NvbmZpZyQxLmdldChmb2N1c2VkRHopLnR5cGUgPyAtMSA6IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5vZGUudGFiSW5kZXggPSBjb25maWcuem9uZVRhYkluZGV4O1xuICAgIH1cbiAgICBub2RlLmFkZEV2ZW50TGlzdGVuZXIoXCJmb2N1c1wiLCBoYW5kbGVab25lRm9jdXMpO1xuICAgIHZhciBfbG9vcCA9IGZ1bmN0aW9uIF9sb29wKGkpIHtcbiAgICAgIHZhciBkcmFnZ2FibGVFbCA9IG5vZGUuY2hpbGRyZW5baV07XG4gICAgICBhbGxEcmFnVGFyZ2V0cy5hZGQoZHJhZ2dhYmxlRWwpO1xuICAgICAgZHJhZ2dhYmxlRWwudGFiSW5kZXggPSBpc0RyYWdnaW5nID8gLTEgOiAwO1xuICAgICAgaWYgKCFhdXRvQXJpYURpc2FibGVkKSB7XG4gICAgICAgIGRyYWdnYWJsZUVsLnNldEF0dHJpYnV0ZShcInJvbGVcIiwgXCJsaXN0aXRlbVwiKTtcbiAgICAgIH1cbiAgICAgIGRyYWdnYWJsZUVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIGVsVG9LZXlEb3duTGlzdGVuZXJzLmdldChkcmFnZ2FibGVFbCkpO1xuICAgICAgZHJhZ2dhYmxlRWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGVsVG9Gb2N1c0xpc3RlbmVycy5nZXQoZHJhZ2dhYmxlRWwpKTtcbiAgICAgIGlmICghZHJhZ0Rpc2FibGVkKSB7XG4gICAgICAgIGRyYWdnYWJsZUVsLmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIGhhbmRsZUtleURvd24pO1xuICAgICAgICBlbFRvS2V5RG93bkxpc3RlbmVycy5zZXQoZHJhZ2dhYmxlRWwsIGhhbmRsZUtleURvd24pO1xuICAgICAgICBkcmFnZ2FibGVFbC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgaGFuZGxlQ2xpY2spO1xuICAgICAgICBlbFRvRm9jdXNMaXN0ZW5lcnMuc2V0KGRyYWdnYWJsZUVsLCBoYW5kbGVDbGljayk7XG4gICAgICB9XG4gICAgICBpZiAoaXNEcmFnZ2luZyAmJiBjb25maWcuaXRlbXNbaV1bSVRFTV9JRF9LRVldID09PSBmb2N1c2VkSXRlbUlkKSB7XG4gICAgICAgIHByaW50RGVidWcoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBbXCJmb2N1c2luZyBvblwiLCB7XG4gICAgICAgICAgICBpOiBpLFxuICAgICAgICAgICAgZm9jdXNlZEl0ZW1JZDogZm9jdXNlZEl0ZW1JZFxuICAgICAgICAgIH1dO1xuICAgICAgICB9KTtcbiAgICAgICAgLy8gaWYgaXQgaXMgYSBuZXN0ZWQgZHJvcHpvbmUsIGl0IHdhcyByZS1yZW5kZXJlZCBhbmQgd2UgbmVlZCB0byByZWZyZXNoIG91ciBwb2ludGVyXG4gICAgICAgIGZvY3VzZWRJdGVtID0gZHJhZ2dhYmxlRWw7XG4gICAgICAgIGZvY3VzZWRJdGVtLnRhYkluZGV4ID0gMDtcbiAgICAgICAgLy8gd2l0aG91dCB0aGlzIHRoZSBlbGVtZW50IGxvc2VzIGZvY3VzIGlmIGl0IG1vdmVzIGJhY2t3YXJkcyBpbiB0aGUgbGlzdFxuICAgICAgICBkcmFnZ2FibGVFbC5mb2N1cygpO1xuICAgICAgfVxuICAgIH07XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBub2RlLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICBfbG9vcChpKTtcbiAgICB9XG4gIH1cbiAgY29uZmlndXJlKG9wdGlvbnMpO1xuICB2YXIgaGFuZGxlcyA9IHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShuZXdPcHRpb25zKSB7XG4gICAgICBwcmludERlYnVnKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIFwia2V5Ym9hcmQgZG5kem9uZSB3aWxsIHVwZGF0ZSBuZXdPcHRpb25zOiBcIi5jb25jYXQodG9TdHJpbmcobmV3T3B0aW9ucykpO1xuICAgICAgfSk7XG4gICAgICBjb25maWd1cmUobmV3T3B0aW9ucyk7XG4gICAgfSxcbiAgICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgcHJpbnREZWJ1ZyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBcImtleWJvYXJkIGRuZHpvbmUgd2lsbCBkZXN0cm95XCI7XG4gICAgICB9KTtcbiAgICAgIHVucmVnaXN0ZXJEcm9wWm9uZSQxKG5vZGUsIGNvbmZpZy50eXBlKTtcbiAgICAgIGR6VG9Db25maWckMVtcImRlbGV0ZVwiXShub2RlKTtcbiAgICAgIGR6VG9IYW5kbGVzW1wiZGVsZXRlXCJdKG5vZGUpO1xuICAgIH1cbiAgfTtcbiAgZHpUb0hhbmRsZXMuc2V0KG5vZGUsIGhhbmRsZXMpO1xuICByZXR1cm4gaGFuZGxlcztcbn1cblxudmFyIF9leGNsdWRlZCA9IFtcIml0ZW1zXCIsIFwiZmxpcER1cmF0aW9uTXNcIiwgXCJ0eXBlXCIsIFwiZHJhZ0Rpc2FibGVkXCIsIFwibW9ycGhEaXNhYmxlZFwiLCBcImRyb3BGcm9tT3RoZXJzRGlzYWJsZWRcIiwgXCJ6b25lVGFiSW5kZXhcIiwgXCJkcm9wVGFyZ2V0U3R5bGVcIiwgXCJkcm9wVGFyZ2V0Q2xhc3Nlc1wiLCBcInRyYW5zZm9ybURyYWdnZWRFbGVtZW50XCIsIFwiYXV0b0FyaWFEaXNhYmxlZFwiLCBcImNlbnRyZURyYWdnZWRPbkN1cnNvclwiXTtcblxuLyoqXG4gKiBBIGN1c3RvbSBhY3Rpb24gdG8gdHVybiBhbnkgY29udGFpbmVyIHRvIGEgZG5kIHpvbmUgYW5kIGFsbCBvZiBpdHMgZGlyZWN0IGNoaWxkcmVuIHRvIGRyYWdnYWJsZXNcbiAqIFN1cHBvcnRzIG1vdXNlLCB0b3VjaCBhbmQga2V5Ym9hcmQgaW50ZXJhY3Rpb25zLlxuICogRGlzcGF0Y2hlcyB0d28gZXZlbnRzIHRoYXQgdGhlIGNvbnRhaW5lciBpcyBleHBlY3RlZCB0byByZWFjdCB0byBieSBtb2RpZnlpbmcgaXRzIGxpc3Qgb2YgaXRlbXMsXG4gKiB3aGljaCB3aWxsIHRoZW4gZmVlZCBiYWNrIGluIHRvIHRoaXMgYWN0aW9uIHZpYSB0aGUgdXBkYXRlIGZ1bmN0aW9uXG4gKlxuICogQHR5cGVkZWYge29iamVjdH0gT3B0aW9uc1xuICogQHByb3BlcnR5IHthcnJheX0gaXRlbXMgLSB0aGUgbGlzdCBvZiBpdGVtcyB0aGF0IHdhcyB1c2VkIHRvIGdlbmVyYXRlIHRoZSBjaGlsZHJlbiBvZiB0aGUgZ2l2ZW4gbm9kZSAodGhlIGxpc3QgdXNlZCBpbiB0aGUgI2VhY2ggYmxvY2tcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbdHlwZV0gLSB0aGUgdHlwZSBvZiB0aGUgZG5kIHpvbmUuIGNoaWxkcmVuIGRyYWdnZWQgZnJvbSBoZXJlIGNhbiBvbmx5IGJlIGRyb3BwZWQgaW4gb3RoZXIgem9uZXMgb2YgdGhlIHNhbWUgdHlwZSwgZGVmYXVsdCB0byBhIGJhc2UgdHlwZVxuICogQHByb3BlcnR5IHtudW1iZXJ9IFtmbGlwRHVyYXRpb25Nc10gLSBpZiB0aGUgbGlzdCBhbmltYXRlZCB1c2luZyBmbGlwIChyZWNvbW1lbmRlZCksIHNwZWNpZmllcyB0aGUgZmxpcCBkdXJhdGlvbiBzdWNoIHRoYXQgZXZlcnl0aGluZyBzeW5jcyB3aXRoIGl0IHdpdGhvdXQgY29uZmxpY3QsIGRlZmF1bHRzIHRvIHplcm9cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW2RyYWdEaXNhYmxlZF1cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW21vcnBoRGlzYWJsZWRdIC0gd2hldGhlciBkcmFnZ2VkIGVsZW1lbnQgc2hvdWxkIG1vcnBoIHRvIHpvbmUgZGltZW5zaW9uc1xuICogQHByb3BlcnR5IHtib29sZWFufSBbZHJvcEZyb21PdGhlcnNEaXNhYmxlZF1cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBbem9uZVRhYkluZGV4XSAtIHNldCB0aGUgdGFiaW5kZXggb2YgdGhlIGxpc3QgY29udGFpbmVyIHdoZW4gbm90IGRyYWdnaW5nXG4gKiBAcHJvcGVydHkge29iamVjdH0gW2Ryb3BUYXJnZXRTdHlsZV1cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nW119IFtkcm9wVGFyZ2V0Q2xhc3Nlc11cbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IFt0cmFuc2Zvcm1EcmFnZ2VkRWxlbWVudF1cbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IG5vZGUgLSB0aGUgZWxlbWVudCB0byBlbmhhbmNlXG4gKiBAcGFyYW0ge09wdGlvbnN9IG9wdGlvbnNcbiAqIEByZXR1cm4ge3t1cGRhdGU6IGZ1bmN0aW9uLCBkZXN0cm95OiBmdW5jdGlvbn19XG4gKi9cbmZ1bmN0aW9uIGRuZHpvbmUkMihub2RlLCBvcHRpb25zKSB7XG4gIHZhbGlkYXRlT3B0aW9ucyhvcHRpb25zKTtcbiAgdmFyIHBvaW50ZXJab25lID0gZG5kem9uZShub2RlLCBvcHRpb25zKTtcbiAgdmFyIGtleWJvYXJkWm9uZSA9IGRuZHpvbmUkMShub2RlLCBvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShuZXdPcHRpb25zKSB7XG4gICAgICB2YWxpZGF0ZU9wdGlvbnMobmV3T3B0aW9ucyk7XG4gICAgICBwb2ludGVyWm9uZS51cGRhdGUobmV3T3B0aW9ucyk7XG4gICAgICBrZXlib2FyZFpvbmUudXBkYXRlKG5ld09wdGlvbnMpO1xuICAgIH0sXG4gICAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgIHBvaW50ZXJab25lLmRlc3Ryb3koKTtcbiAgICAgIGtleWJvYXJkWm9uZS5kZXN0cm95KCk7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gdmFsaWRhdGVPcHRpb25zKG9wdGlvbnMpIHtcbiAgLyplc2xpbnQtZGlzYWJsZSovXG4gIHZhciBpdGVtcyA9IG9wdGlvbnMuaXRlbXMsXG4gICAgZmxpcER1cmF0aW9uTXMgPSBvcHRpb25zLmZsaXBEdXJhdGlvbk1zLFxuICAgIHR5cGUgPSBvcHRpb25zLnR5cGUsXG4gICAgZHJhZ0Rpc2FibGVkID0gb3B0aW9ucy5kcmFnRGlzYWJsZWQsXG4gICAgbW9ycGhEaXNhYmxlZCA9IG9wdGlvbnMubW9ycGhEaXNhYmxlZCxcbiAgICBkcm9wRnJvbU90aGVyc0Rpc2FibGVkID0gb3B0aW9ucy5kcm9wRnJvbU90aGVyc0Rpc2FibGVkLFxuICAgIHpvbmVUYWJJbmRleCA9IG9wdGlvbnMuem9uZVRhYkluZGV4LFxuICAgIGRyb3BUYXJnZXRTdHlsZSA9IG9wdGlvbnMuZHJvcFRhcmdldFN0eWxlLFxuICAgIGRyb3BUYXJnZXRDbGFzc2VzID0gb3B0aW9ucy5kcm9wVGFyZ2V0Q2xhc3NlcyxcbiAgICB0cmFuc2Zvcm1EcmFnZ2VkRWxlbWVudCA9IG9wdGlvbnMudHJhbnNmb3JtRHJhZ2dlZEVsZW1lbnQsXG4gICAgYXV0b0FyaWFEaXNhYmxlZCA9IG9wdGlvbnMuYXV0b0FyaWFEaXNhYmxlZCxcbiAgICBjZW50cmVEcmFnZ2VkT25DdXJzb3IgPSBvcHRpb25zLmNlbnRyZURyYWdnZWRPbkN1cnNvcixcbiAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9wdGlvbnMsIF9leGNsdWRlZCk7XG4gIC8qZXNsaW50LWVuYWJsZSovXG4gIGlmIChPYmplY3Qua2V5cyhyZXN0KS5sZW5ndGggPiAwKSB7XG4gICAgY29uc29sZS53YXJuKFwiZG5kem9uZSB3aWxsIGlnbm9yZSB1bmtub3duIG9wdGlvbnNcIiwgcmVzdCk7XG4gIH1cbiAgaWYgKCFpdGVtcykge1xuICAgIHRocm93IG5ldyBFcnJvcihcIm5vICdpdGVtcycga2V5IHByb3ZpZGVkIHRvIGRuZHpvbmVcIik7XG4gIH1cbiAgdmFyIGl0ZW1XaXRoTWlzc2luZ0lkID0gaXRlbXMuZmluZChmdW5jdGlvbiAoaXRlbSkge1xuICAgIHJldHVybiAhe30uaGFzT3duUHJvcGVydHkuY2FsbChpdGVtLCBJVEVNX0lEX0tFWSk7XG4gIH0pO1xuICBpZiAoaXRlbVdpdGhNaXNzaW5nSWQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJtaXNzaW5nICdcIi5jb25jYXQoSVRFTV9JRF9LRVksIFwiJyBwcm9wZXJ0eSBmb3IgaXRlbSBcIikuY29uY2F0KHRvU3RyaW5nKGl0ZW1XaXRoTWlzc2luZ0lkKSkpO1xuICB9XG4gIGlmIChkcm9wVGFyZ2V0Q2xhc3NlcyAmJiAhQXJyYXkuaXNBcnJheShkcm9wVGFyZ2V0Q2xhc3NlcykpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJkcm9wVGFyZ2V0Q2xhc3NlcyBzaG91bGQgYmUgYW4gYXJyYXkgYnV0IGluc3RlYWQgaXQgaXMgYSBcIi5jb25jYXQoX3R5cGVvZihkcm9wVGFyZ2V0Q2xhc3NlcyksIFwiLCBcIikuY29uY2F0KHRvU3RyaW5nKGRyb3BUYXJnZXRDbGFzc2VzKSkpO1xuICB9XG4gIGlmICh6b25lVGFiSW5kZXggJiYgIWlzSW50KHpvbmVUYWJJbmRleCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJ6b25lVGFiSW5kZXggc2hvdWxkIGJlIGEgbnVtYmVyIGJ1dCBpbnN0ZWFkIGl0IGlzIGEgXCIuY29uY2F0KF90eXBlb2Yoem9uZVRhYkluZGV4KSwgXCIsIFwiKS5jb25jYXQodG9TdHJpbmcoem9uZVRhYkluZGV4KSkpO1xuICB9XG59XG5mdW5jdGlvbiBpc0ludCh2YWx1ZSkge1xuICByZXR1cm4gIWlzTmFOKHZhbHVlKSAmJiBmdW5jdGlvbiAoeCkge1xuICAgIHJldHVybiAoeCB8IDApID09PSB4O1xuICB9KHBhcnNlRmxvYXQodmFsdWUpKTtcbn1cblxuZXhwb3J0IHsgRFJBR0dFRF9FTEVNRU5UX0lELCBTSEFET1dfSVRFTV9NQVJLRVJfUFJPUEVSVFlfTkFNRSwgU0hBRE9XX1BMQUNFSE9MREVSX0lURU1fSUQsIFNPVVJDRVMsIFRSSUdHRVJTLCBhbGVydFRvU2NyZWVuUmVhZGVyLCBkbmR6b25lJDIgYXMgZG5kem9uZSwgb3ZlcnJpZGVJdGVtSWRLZXlOYW1lQmVmb3JlSW5pdGlhbGlzaW5nRG5kWm9uZXMsIHNldERlYnVnTW9kZSB9O1xuIiwgImV4cG9ydCB7IGlkZW50aXR5IGFzIGxpbmVhciB9IGZyb20gJy4uL2ludGVybmFsL2luZGV4Lm1qcyc7XG5cbi8qXG5BZGFwdGVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL21hdHRkZXNsXG5EaXN0cmlidXRlZCB1bmRlciBNSVQgTGljZW5zZSBodHRwczovL2dpdGh1Yi5jb20vbWF0dGRlc2wvZWFzZXMvYmxvYi9tYXN0ZXIvTElDRU5TRS5tZFxuKi9cbmZ1bmN0aW9uIGJhY2tJbk91dCh0KSB7XG4gICAgY29uc3QgcyA9IDEuNzAxNTggKiAxLjUyNTtcbiAgICBpZiAoKHQgKj0gMikgPCAxKVxuICAgICAgICByZXR1cm4gMC41ICogKHQgKiB0ICogKChzICsgMSkgKiB0IC0gcykpO1xuICAgIHJldHVybiAwLjUgKiAoKHQgLT0gMikgKiB0ICogKChzICsgMSkgKiB0ICsgcykgKyAyKTtcbn1cbmZ1bmN0aW9uIGJhY2tJbih0KSB7XG4gICAgY29uc3QgcyA9IDEuNzAxNTg7XG4gICAgcmV0dXJuIHQgKiB0ICogKChzICsgMSkgKiB0IC0gcyk7XG59XG5mdW5jdGlvbiBiYWNrT3V0KHQpIHtcbiAgICBjb25zdCBzID0gMS43MDE1ODtcbiAgICByZXR1cm4gLS10ICogdCAqICgocyArIDEpICogdCArIHMpICsgMTtcbn1cbmZ1bmN0aW9uIGJvdW5jZU91dCh0KSB7XG4gICAgY29uc3QgYSA9IDQuMCAvIDExLjA7XG4gICAgY29uc3QgYiA9IDguMCAvIDExLjA7XG4gICAgY29uc3QgYyA9IDkuMCAvIDEwLjA7XG4gICAgY29uc3QgY2EgPSA0MzU2LjAgLyAzNjEuMDtcbiAgICBjb25zdCBjYiA9IDM1NDQyLjAgLyAxODA1LjA7XG4gICAgY29uc3QgY2MgPSAxNjA2MS4wIC8gMTgwNS4wO1xuICAgIGNvbnN0IHQyID0gdCAqIHQ7XG4gICAgcmV0dXJuIHQgPCBhXG4gICAgICAgID8gNy41NjI1ICogdDJcbiAgICAgICAgOiB0IDwgYlxuICAgICAgICAgICAgPyA5LjA3NSAqIHQyIC0gOS45ICogdCArIDMuNFxuICAgICAgICAgICAgOiB0IDwgY1xuICAgICAgICAgICAgICAgID8gY2EgKiB0MiAtIGNiICogdCArIGNjXG4gICAgICAgICAgICAgICAgOiAxMC44ICogdCAqIHQgLSAyMC41MiAqIHQgKyAxMC43Mjtcbn1cbmZ1bmN0aW9uIGJvdW5jZUluT3V0KHQpIHtcbiAgICByZXR1cm4gdCA8IDAuNVxuICAgICAgICA/IDAuNSAqICgxLjAgLSBib3VuY2VPdXQoMS4wIC0gdCAqIDIuMCkpXG4gICAgICAgIDogMC41ICogYm91bmNlT3V0KHQgKiAyLjAgLSAxLjApICsgMC41O1xufVxuZnVuY3Rpb24gYm91bmNlSW4odCkge1xuICAgIHJldHVybiAxLjAgLSBib3VuY2VPdXQoMS4wIC0gdCk7XG59XG5mdW5jdGlvbiBjaXJjSW5PdXQodCkge1xuICAgIGlmICgodCAqPSAyKSA8IDEpXG4gICAgICAgIHJldHVybiAtMC41ICogKE1hdGguc3FydCgxIC0gdCAqIHQpIC0gMSk7XG4gICAgcmV0dXJuIDAuNSAqIChNYXRoLnNxcnQoMSAtICh0IC09IDIpICogdCkgKyAxKTtcbn1cbmZ1bmN0aW9uIGNpcmNJbih0KSB7XG4gICAgcmV0dXJuIDEuMCAtIE1hdGguc3FydCgxLjAgLSB0ICogdCk7XG59XG5mdW5jdGlvbiBjaXJjT3V0KHQpIHtcbiAgICByZXR1cm4gTWF0aC5zcXJ0KDEgLSAtLXQgKiB0KTtcbn1cbmZ1bmN0aW9uIGN1YmljSW5PdXQodCkge1xuICAgIHJldHVybiB0IDwgMC41ID8gNC4wICogdCAqIHQgKiB0IDogMC41ICogTWF0aC5wb3coMi4wICogdCAtIDIuMCwgMy4wKSArIDEuMDtcbn1cbmZ1bmN0aW9uIGN1YmljSW4odCkge1xuICAgIHJldHVybiB0ICogdCAqIHQ7XG59XG5mdW5jdGlvbiBjdWJpY091dCh0KSB7XG4gICAgY29uc3QgZiA9IHQgLSAxLjA7XG4gICAgcmV0dXJuIGYgKiBmICogZiArIDEuMDtcbn1cbmZ1bmN0aW9uIGVsYXN0aWNJbk91dCh0KSB7XG4gICAgcmV0dXJuIHQgPCAwLjVcbiAgICAgICAgPyAwLjUgKlxuICAgICAgICAgICAgTWF0aC5zaW4oKCgrMTMuMCAqIE1hdGguUEkpIC8gMikgKiAyLjAgKiB0KSAqXG4gICAgICAgICAgICBNYXRoLnBvdygyLjAsIDEwLjAgKiAoMi4wICogdCAtIDEuMCkpXG4gICAgICAgIDogMC41ICpcbiAgICAgICAgICAgIE1hdGguc2luKCgoLTEzLjAgKiBNYXRoLlBJKSAvIDIpICogKDIuMCAqIHQgLSAxLjAgKyAxLjApKSAqXG4gICAgICAgICAgICBNYXRoLnBvdygyLjAsIC0xMC4wICogKDIuMCAqIHQgLSAxLjApKSArXG4gICAgICAgICAgICAxLjA7XG59XG5mdW5jdGlvbiBlbGFzdGljSW4odCkge1xuICAgIHJldHVybiBNYXRoLnNpbigoMTMuMCAqIHQgKiBNYXRoLlBJKSAvIDIpICogTWF0aC5wb3coMi4wLCAxMC4wICogKHQgLSAxLjApKTtcbn1cbmZ1bmN0aW9uIGVsYXN0aWNPdXQodCkge1xuICAgIHJldHVybiAoTWF0aC5zaW4oKC0xMy4wICogKHQgKyAxLjApICogTWF0aC5QSSkgLyAyKSAqIE1hdGgucG93KDIuMCwgLTEwLjAgKiB0KSArIDEuMCk7XG59XG5mdW5jdGlvbiBleHBvSW5PdXQodCkge1xuICAgIHJldHVybiB0ID09PSAwLjAgfHwgdCA9PT0gMS4wXG4gICAgICAgID8gdFxuICAgICAgICA6IHQgPCAwLjVcbiAgICAgICAgICAgID8gKzAuNSAqIE1hdGgucG93KDIuMCwgMjAuMCAqIHQgLSAxMC4wKVxuICAgICAgICAgICAgOiAtMC41ICogTWF0aC5wb3coMi4wLCAxMC4wIC0gdCAqIDIwLjApICsgMS4wO1xufVxuZnVuY3Rpb24gZXhwb0luKHQpIHtcbiAgICByZXR1cm4gdCA9PT0gMC4wID8gdCA6IE1hdGgucG93KDIuMCwgMTAuMCAqICh0IC0gMS4wKSk7XG59XG5mdW5jdGlvbiBleHBvT3V0KHQpIHtcbiAgICByZXR1cm4gdCA9PT0gMS4wID8gdCA6IDEuMCAtIE1hdGgucG93KDIuMCwgLTEwLjAgKiB0KTtcbn1cbmZ1bmN0aW9uIHF1YWRJbk91dCh0KSB7XG4gICAgdCAvPSAwLjU7XG4gICAgaWYgKHQgPCAxKVxuICAgICAgICByZXR1cm4gMC41ICogdCAqIHQ7XG4gICAgdC0tO1xuICAgIHJldHVybiAtMC41ICogKHQgKiAodCAtIDIpIC0gMSk7XG59XG5mdW5jdGlvbiBxdWFkSW4odCkge1xuICAgIHJldHVybiB0ICogdDtcbn1cbmZ1bmN0aW9uIHF1YWRPdXQodCkge1xuICAgIHJldHVybiAtdCAqICh0IC0gMi4wKTtcbn1cbmZ1bmN0aW9uIHF1YXJ0SW5PdXQodCkge1xuICAgIHJldHVybiB0IDwgMC41XG4gICAgICAgID8gKzguMCAqIE1hdGgucG93KHQsIDQuMClcbiAgICAgICAgOiAtOC4wICogTWF0aC5wb3codCAtIDEuMCwgNC4wKSArIDEuMDtcbn1cbmZ1bmN0aW9uIHF1YXJ0SW4odCkge1xuICAgIHJldHVybiBNYXRoLnBvdyh0LCA0LjApO1xufVxuZnVuY3Rpb24gcXVhcnRPdXQodCkge1xuICAgIHJldHVybiBNYXRoLnBvdyh0IC0gMS4wLCAzLjApICogKDEuMCAtIHQpICsgMS4wO1xufVxuZnVuY3Rpb24gcXVpbnRJbk91dCh0KSB7XG4gICAgaWYgKCh0ICo9IDIpIDwgMSlcbiAgICAgICAgcmV0dXJuIDAuNSAqIHQgKiB0ICogdCAqIHQgKiB0O1xuICAgIHJldHVybiAwLjUgKiAoKHQgLT0gMikgKiB0ICogdCAqIHQgKiB0ICsgMik7XG59XG5mdW5jdGlvbiBxdWludEluKHQpIHtcbiAgICByZXR1cm4gdCAqIHQgKiB0ICogdCAqIHQ7XG59XG5mdW5jdGlvbiBxdWludE91dCh0KSB7XG4gICAgcmV0dXJuIC0tdCAqIHQgKiB0ICogdCAqIHQgKyAxO1xufVxuZnVuY3Rpb24gc2luZUluT3V0KHQpIHtcbiAgICByZXR1cm4gLTAuNSAqIChNYXRoLmNvcyhNYXRoLlBJICogdCkgLSAxKTtcbn1cbmZ1bmN0aW9uIHNpbmVJbih0KSB7XG4gICAgY29uc3QgdiA9IE1hdGguY29zKHQgKiBNYXRoLlBJICogMC41KTtcbiAgICBpZiAoTWF0aC5hYnModikgPCAxZS0xNClcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgZWxzZVxuICAgICAgICByZXR1cm4gMSAtIHY7XG59XG5mdW5jdGlvbiBzaW5lT3V0KHQpIHtcbiAgICByZXR1cm4gTWF0aC5zaW4oKHQgKiBNYXRoLlBJKSAvIDIpO1xufVxuXG5leHBvcnQgeyBiYWNrSW4sIGJhY2tJbk91dCwgYmFja091dCwgYm91bmNlSW4sIGJvdW5jZUluT3V0LCBib3VuY2VPdXQsIGNpcmNJbiwgY2lyY0luT3V0LCBjaXJjT3V0LCBjdWJpY0luLCBjdWJpY0luT3V0LCBjdWJpY091dCwgZWxhc3RpY0luLCBlbGFzdGljSW5PdXQsIGVsYXN0aWNPdXQsIGV4cG9JbiwgZXhwb0luT3V0LCBleHBvT3V0LCBxdWFkSW4sIHF1YWRJbk91dCwgcXVhZE91dCwgcXVhcnRJbiwgcXVhcnRJbk91dCwgcXVhcnRPdXQsIHF1aW50SW4sIHF1aW50SW5PdXQsIHF1aW50T3V0LCBzaW5lSW4sIHNpbmVJbk91dCwgc2luZU91dCB9O1xuIiwgImltcG9ydCB7IGN1YmljT3V0IH0gZnJvbSAnLi4vZWFzaW5nL2luZGV4Lm1qcyc7XG5pbXBvcnQgeyBpc19mdW5jdGlvbiB9IGZyb20gJy4uL2ludGVybmFsL2luZGV4Lm1qcyc7XG5cbmZ1bmN0aW9uIGZsaXAobm9kZSwgeyBmcm9tLCB0byB9LCBwYXJhbXMgPSB7fSkge1xuICAgIGNvbnN0IHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShub2RlKTtcbiAgICBjb25zdCB0cmFuc2Zvcm0gPSBzdHlsZS50cmFuc2Zvcm0gPT09ICdub25lJyA/ICcnIDogc3R5bGUudHJhbnNmb3JtO1xuICAgIGNvbnN0IFtveCwgb3ldID0gc3R5bGUudHJhbnNmb3JtT3JpZ2luLnNwbGl0KCcgJykubWFwKHBhcnNlRmxvYXQpO1xuICAgIGNvbnN0IGR4ID0gKGZyb20ubGVmdCArIGZyb20ud2lkdGggKiBveCAvIHRvLndpZHRoKSAtICh0by5sZWZ0ICsgb3gpO1xuICAgIGNvbnN0IGR5ID0gKGZyb20udG9wICsgZnJvbS5oZWlnaHQgKiBveSAvIHRvLmhlaWdodCkgLSAodG8udG9wICsgb3kpO1xuICAgIGNvbnN0IHsgZGVsYXkgPSAwLCBkdXJhdGlvbiA9IChkKSA9PiBNYXRoLnNxcnQoZCkgKiAxMjAsIGVhc2luZyA9IGN1YmljT3V0IH0gPSBwYXJhbXM7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZGVsYXksXG4gICAgICAgIGR1cmF0aW9uOiBpc19mdW5jdGlvbihkdXJhdGlvbikgPyBkdXJhdGlvbihNYXRoLnNxcnQoZHggKiBkeCArIGR5ICogZHkpKSA6IGR1cmF0aW9uLFxuICAgICAgICBlYXNpbmcsXG4gICAgICAgIGNzczogKHQsIHUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHggPSB1ICogZHg7XG4gICAgICAgICAgICBjb25zdCB5ID0gdSAqIGR5O1xuICAgICAgICAgICAgY29uc3Qgc3ggPSB0ICsgdSAqIGZyb20ud2lkdGggLyB0by53aWR0aDtcbiAgICAgICAgICAgIGNvbnN0IHN5ID0gdCArIHUgKiBmcm9tLmhlaWdodCAvIHRvLmhlaWdodDtcbiAgICAgICAgICAgIHJldHVybiBgdHJhbnNmb3JtOiAke3RyYW5zZm9ybX0gdHJhbnNsYXRlKCR7eH1weCwgJHt5fXB4KSBzY2FsZSgke3N4fSwgJHtzeX0pO2A7XG4gICAgICAgIH1cbiAgICB9O1xufVxuXG5leHBvcnQgeyBmbGlwIH07XG4iLCAiPHNjcmlwdCBsYW5nPVwidHNcIj5cbiAgICBpbXBvcnQgeyB0cmFja2VyIH0gZnJvbSBcIi4uL3N0b3Jlcy90cmFja2VyXCI7XG5cbiAgICBjb25zdCB7IHN0YXRlLCBuYW1lLCByb3VuZCwgcGFydHkgfSA9IHRyYWNrZXI7XG5cbiAgICBsZXQgdG90YWxYUCA9IDEwMDtcbjwvc2NyaXB0PlxuXG48ZGl2IGNsYXNzPVwiaW5pdGlhdGllLXRyYWNrZXItbWV0YWRhdGFcIj5cbiAgICA8ZGl2IGNsYXNzPVwiaW5pdGlhdGl2ZS10cmFja2VyLW5hbWUtY29udGFpbmVyXCI+XG4gICAgICAgIHsjaWYgJG5hbWUgJiYgJG5hbWUubGVuZ3RofVxuICAgICAgICAgICAgPGgyIGNsYXNzPVwiaW5pdGlhdGl2ZS10cmFja2VyLW5hbWVcIj57JG5hbWV9PC9oMj5cbiAgICAgICAgey9pZn1cbiAgICAgICAgeyNpZiB0b3RhbFhQID4gMH1cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiaW5pdGlhdGl2ZS10cmFja2VyLXhwIGVuY291bnRlci14cFwiPnt0b3RhbFhQfSBYUDwvc3Bhbj5cbiAgICAgICAgey9pZn1cbiAgICA8L2Rpdj5cbiAgICB7I2lmICRwYXJ0eX1cbiAgICAgICAgPGg0IGNsYXNzPVwiaW5pdGlhdmUtdHJhY2tlci1wYXJ0eVwiPnskcGFydHl9PC9oND5cbiAgICB7L2lmfVxuICAgIHsjaWYgJHN0YXRlfVxuICAgICAgICA8ZGl2IGNsYXNzPVwiaW5pdGlhdGl2ZS10cmFja2VyLXJvdW5kLWNvbnRhaW5lclwiPlxuICAgICAgICAgICAgPHNtYWxsPlxuICAgICAgICAgICAgICAgIDxlbT5cbiAgICAgICAgICAgICAgICAgICAgUm91bmQgeyRyb3VuZH1cbiAgICAgICAgICAgICAgICA8L2VtPlxuICAgICAgICAgICAgPC9zbWFsbD5cbiAgICAgICAgPC9kaXY+XG4gICAgey9pZn1cbjwvZGl2PlxuXG48c3R5bGUgc2NvcGVkPlxuICAgIC5pbml0aWF2ZS10cmFja2VyLXBhcnR5IHtcbiAgICAgICAgcGFkZGluZzogMCAwLjVyZW07XG4gICAgICAgIG1hcmdpbjogMDtcbiAgICB9XG4gICAgLmluaXRpYXRpdmUtdHJhY2tlci1uYW1lLWNvbnRhaW5lciB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgcGFkZGluZzogMCAwLjVyZW07XG4gICAgICAgIG1hcmdpbjogMDtcbiAgICB9XG4gICAgLmluaXRpYXRpdmUtdHJhY2tlci1uYW1lIHtcbiAgICAgICAgbWFyZ2luOiAwO1xuICAgIH1cbiAgICAuaW5pdGlhdGl2ZS10cmFja2VyLXJvdW5kLWNvbnRhaW5lciB7XG4gICAgICAgIHBhZGRpbmc6IDAgMC41cmVtO1xuICAgIH1cbjwvc3R5bGU+XG4iLCAiPHNjcmlwdCBsYW5nPVwidHNcIj5cbiAgICBpbXBvcnQgeyBFeHRyYUJ1dHRvbkNvbXBvbmVudCB9IGZyb20gXCJvYnNpZGlhblwiO1xuICAgIGltcG9ydCB7IFNBVkUgfSBmcm9tIFwic3JjL3V0aWxzXCI7XG5cbiAgICBpbXBvcnQgeyBnZXRDb250ZXh0IH0gZnJvbSBcInN2ZWx0ZVwiO1xuICAgIGltcG9ydCB7IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlciB9IGZyb20gXCJzdmVsdGVcIjtcbiAgICBpbXBvcnQgdHlwZSBJbml0aWF0aXZlVHJhY2tlciBmcm9tIFwic3JjL21haW5cIjtcbiAgICBpbXBvcnQgeyB0cmFja2VyIH0gZnJvbSBcIi4uL3N0b3Jlcy90cmFja2VyXCI7XG5cbiAgICBjb25zdCB7IG5hbWUgfSA9IHRyYWNrZXI7XG4gICAgbGV0IGVuY291bnRlck5hbWUgPSAkbmFtZTtcbiAgICBjb25zdCBwbHVnaW4gPSBnZXRDb250ZXh0PEluaXRpYXRpdmVUcmFja2VyPihcInBsdWdpblwiKTtcblxuICAgIGxldCBzYXZlQnV0dG9uOiBFeHRyYUJ1dHRvbkNvbXBvbmVudDtcbiAgICBjb25zdCBjaGVja1NhdmUgPSAoKSA9PiB7XG4gICAgICAgIGlmIChlbmNvdW50ZXJOYW1lPy5sZW5ndGggJiYgc2F2ZUJ1dHRvbi5kaXNhYmxlZCkge1xuICAgICAgICAgICAgc2F2ZUJ1dHRvbi5zZXREaXNhYmxlZChmYWxzZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoIWVuY291bnRlck5hbWU/Lmxlbmd0aCAmJiAhc2F2ZUJ1dHRvbi5kaXNhYmxlZCkge1xuICAgICAgICAgICAgc2F2ZUJ1dHRvbi5zZXREaXNhYmxlZCh0cnVlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgbGV0IGNoZWNraW5nID0gZmFsc2U7XG4gICAgY29uc3Qgc2F2ZSA9IChub2RlOiBIVE1MRWxlbWVudCkgPT4ge1xuICAgICAgICBzYXZlQnV0dG9uID0gbmV3IEV4dHJhQnV0dG9uQ29tcG9uZW50KG5vZGUpXG4gICAgICAgICAgICAuc2V0SWNvbihTQVZFKVxuICAgICAgICAgICAgLnNldERpc2FibGVkKFxuICAgICAgICAgICAgICAgICEoZW5jb3VudGVyTmFtZSAhPSB1bmRlZmluZWQgJiYgZW5jb3VudGVyTmFtZT8ubGVuZ3RoID4gMClcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIC5vbkNsaWNrKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgIGVuY291bnRlck5hbWUgJiZcbiAgICAgICAgICAgICAgICAgICAgZW5jb3VudGVyTmFtZSBpbiBwbHVnaW4uZGF0YS5lbmNvdW50ZXJzICYmXG4gICAgICAgICAgICAgICAgICAgICFjaGVja2luZ1xuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICBjaGVja2luZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcGx1Z2luLmRhdGEuZW5jb3VudGVyc1tlbmNvdW50ZXJOYW1lXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLnRyYWNrZXIuZ2V0RW5jb3VudGVyU3RhdGUoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IGVuY291bnRlck5hbWVcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgcGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaChcImNhbmNlbFwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICB9O1xuICAgIGNvbnN0IGRpc3BhdGNoID0gY3JlYXRlRXZlbnREaXNwYXRjaGVyKCk7XG4gICAgY29uc3QgY2FuY2VsID0gKG5vZGU6IEhUTUxFbGVtZW50KSA9PiB7XG4gICAgICAgIG5ldyBFeHRyYUJ1dHRvbkNvbXBvbmVudChub2RlKS5zZXRJY29uKFwiY3Jvc3NcIikub25DbGljaygoKSA9PiB7XG4gICAgICAgICAgICBkaXNwYXRjaChcImNhbmNlbFwiKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbjwvc2NyaXB0PlxuXG48ZGl2IGNsYXNzPVwic2F2aW5nLWNvbnRhaW5lclwiPlxuICAgIDxkaXYgY2xhc3M9XCJzYXZpbmctZW5jb3VudGVyXCI+XG4gICAgICAgIDxzcGFuPlNhdmUgZW5jb3VudGVyIGFzOjwvc3Bhbj5cbiAgICAgICAgPCEtLSBzdmVsdGUtaWdub3JlIGExMXktYXV0b2ZvY3VzIC0tPlxuICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBiaW5kOnZhbHVlPXtlbmNvdW50ZXJOYW1lfSBvbjppbnB1dD17Y2hlY2tTYXZlfSAvPlxuICAgIDwvZGl2PlxuXG4gICAgPGRpdiBjbGFzcz1cInNhdmUtYnV0dG9uc1wiPlxuICAgICAgICB7I2lmIGNoZWNraW5nfVxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJjaGVja2luZ1wiPlxuICAgICAgICAgICAgICAgIDxzbWFsbD5cbiAgICAgICAgICAgICAgICAgICAgQW4gZW5jb3VudGVyIGJ5IHRoYXQgbmFtZSBhbHJlYWR5IGV4aXN0cy4gQXJlIHlvdSBzdXJlP1xuICAgICAgICAgICAgICAgIDwvc21hbGw+XG4gICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgIHsvaWZ9XG4gICAgICAgIDxkaXYgY2xhc3M9XCJzYXZlXCIgdXNlOnNhdmUgLz5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNhbmNlbFwiIHVzZTpjYW5jZWwgLz5cbiAgICA8L2Rpdj5cbjwvZGl2PlxuXG48c3R5bGU+XG4gICAgLnNhdmluZy1jb250YWluZXIge1xuICAgICAgICBwYWRkaW5nOiAwLjVyZW07XG4gICAgfVxuICAgIC5zYXZpbmctZW5jb3VudGVyIHtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgIH1cbiAgICAuc2F2ZS1idXR0b25zIHtcbiAgICAgICAgbWFyZ2luLXRvcDogMXJlbTtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcbiAgICAgICAgZ2FwOiAxcmVtO1xuICAgIH1cbiAgICAuc2F2ZS1idXR0b25zID4gZGl2IHtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICB9XG4gICAgLnNhdmUtYnV0dG9ucyA6Z2xvYmFsKC5jbGlja2FibGUtaWNvbikge1xuICAgICAgICBtYXJnaW46IDA7XG4gICAgfVxuICAgIC5zYXZlLWJ1dHRvbnMgPiAuc2F2ZSA6Z2xvYmFsKC5jbGlja2FibGUtaWNvbi5pcy1kaXNhYmxlZCkge1xuICAgICAgICBjdXJzb3I6IG5vdC1hbGxvd2VkO1xuICAgICAgICBjb2xvcjogdmFyKC0tdGV4dC1mYWludCk7XG4gICAgfVxuPC9zdHlsZT5cbiIsICI8c2NyaXB0IGxhbmc9XCJ0c1wiPlxuICAgIGltcG9ydCB7IEV4dHJhQnV0dG9uQ29tcG9uZW50IH0gZnJvbSBcIm9ic2lkaWFuXCI7XG4gICAgaW1wb3J0IHR5cGUgSW5pdGlhdGl2ZVRyYWNrZXIgZnJvbSBcInNyYy9tYWluXCI7XG5cbiAgICBpbXBvcnQgeyBjcmVhdGVFdmVudERpc3BhdGNoZXIsIGdldENvbnRleHQgfSBmcm9tIFwic3ZlbHRlXCI7XG4gICAgaW1wb3J0IHsgdHJhY2tlciB9IGZyb20gXCIuLi9zdG9yZXMvdHJhY2tlclwiO1xuXG4gICAgY29uc3QgZGlzcGF0Y2ggPSBjcmVhdGVFdmVudERpc3BhdGNoZXIoKTtcbiAgICBjb25zdCBwbHVnaW4gPSBnZXRDb250ZXh0PEluaXRpYXRpdmVUcmFja2VyPihcInBsdWdpblwiKTtcblxuICAgIGNvbnN0IGNhbmNlbCA9IChub2RlOiBIVE1MRWxlbWVudCkgPT4ge1xuICAgICAgICBuZXcgRXh0cmFCdXR0b25Db21wb25lbnQobm9kZSkuc2V0SWNvbihcImNyb3NzXCIpLnNldFRvb2x0aXAoXCJDYW5jZWxcIik7XG4gICAgfTtcblxuICAgICQ6IGVuY291bnRlcnMgPSBwbHVnaW4uZGF0YS5lbmNvdW50ZXJzO1xuXG4gICAgY29uc3QgbG9hZCA9IChub2RlOiBIVE1MRWxlbWVudCwgZW5jb3VudGVyOiBzdHJpbmcpID0+IHtcbiAgICAgICAgbmV3IEV4dHJhQnV0dG9uQ29tcG9uZW50KG5vZGUpXG4gICAgICAgICAgICAuc2V0SWNvbihcIm9wZW4tZWxzZXdoZXJlLWdseXBoXCIpXG4gICAgICAgICAgICAuc2V0VG9vbHRpcChcIkxvYWQgRW5jb3VudGVyXCIpXG4gICAgICAgICAgICAub25DbGljaygoKSA9PiB7XG4gICAgICAgICAgICAgICAgdHJhY2tlci5uZXcoZW5jb3VudGVyc1tlbmNvdW50ZXJdKTtcbiAgICAgICAgICAgICAgICBkaXNwYXRjaChcImNhbmNlbFwiKTtcbiAgICAgICAgICAgIH0pO1xuICAgIH07XG4gICAgY29uc3QgdHJhc2ggPSAobm9kZTogSFRNTEVsZW1lbnQsIGVuY291bnRlcjogc3RyaW5nKSA9PiB7XG4gICAgICAgIG5ldyBFeHRyYUJ1dHRvbkNvbXBvbmVudChub2RlKVxuICAgICAgICAgICAgLnNldEljb24oXCJ0cmFzaFwiKVxuICAgICAgICAgICAgLnNldFRvb2x0aXAoXCJEZWxldGUgRW5jb3VudGVyXCIpXG4gICAgICAgICAgICAub25DbGljaygoKSA9PiB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHBsdWdpbi5kYXRhLmVuY291bnRlcnNbZW5jb3VudGVyXTtcbiAgICAgICAgICAgICAgICBlbmNvdW50ZXJzID0gcGx1Z2luLmRhdGEuZW5jb3VudGVycztcbiAgICAgICAgICAgIH0pO1xuICAgIH07XG48L3NjcmlwdD5cblxuPGRpdiBjbGFzcz1cImxvYWRpbmctY29udGFpbmVyXCI+XG4gICAgPGRpdiBjbGFzcz1cImNvbnRyb2xzXCI+XG4gICAgICAgIDxoND5Mb2FkIEFuIEVuY291bnRlcjwvaDQ+XG4gICAgICAgIDxkaXYgdXNlOmNhbmNlbCBvbjpjbGljaz17KCkgPT4gZGlzcGF0Y2goXCJjYW5jZWxcIil9IC8+XG4gICAgPC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cImVuY291bnRlci1jb250YWluZXJcIj5cbiAgICAgICAgeyNpZiAhZW5jb3VudGVycyB8fCAhT2JqZWN0LmtleXMoZW5jb3VudGVycyk/Lmxlbmd0aH1cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwibm8tZW5jb3VudGVyc1wiPlxuICAgICAgICAgICAgICAgIDxlbT5UaGVyZSBhcmUgbm8gc2F2ZWQgZW5jb3VudGVycy48L2VtPlxuICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICB7L2lmfVxuICAgICAgICB7I2VhY2ggT2JqZWN0LmtleXMoZW5jb3VudGVycykgYXMgZW5jb3VudGVyfVxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImVuY291bnRlclwiPlxuICAgICAgICAgICAgICAgIDxzcGFuPntlbmNvdW50ZXJ9PC9zcGFuPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJlbmNvdW50ZXItY29udHJvbHNcIj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiB1c2U6bG9hZD17ZW5jb3VudGVyfSAvPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IHVzZTp0cmFzaD17ZW5jb3VudGVyfSAvPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIHsvZWFjaH1cbiAgICA8L2Rpdj5cbjwvZGl2PlxuXG48c3R5bGU+XG4gICAgLmNvbnRyb2xzIHtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgdmFyKC0tYmFja2dyb3VuZC1tb2RpZmllci1ib3JkZXIpO1xuICAgIH1cbiAgICAuY29udHJvbHMgaDQge1xuICAgICAgICBtYXJnaW46IDA7XG4gICAgfVxuICAgIC5sb2FkaW5nLWNvbnRhaW5lciB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGZsZXgtZmxvdzogY29sdW1uIG5vd3JhcDtcbiAgICAgICAgZ2FwOiAwLjVyZW07XG4gICAgICAgIHBhZGRpbmc6IDAuNXJlbTtcbiAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgIH1cbiAgICAubG9hZGluZy1jb250YWluZXIgOmdsb2JhbCguY2xpY2thYmxlLWljb24pIHtcbiAgICAgICAgbWFyZ2luOiAwO1xuICAgIH1cbiAgICAuZW5jb3VudGVyLWNvbnRhaW5lciB7XG4gICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgZmxleC1mbG93OiBjb2x1bW4gbm93cmFwO1xuICAgICAgICBnYXA6IDFyZW07XG4gICAgICAgIG92ZXJmbG93LXk6IGF1dG87XG4gICAgfVxuICAgIC5uby1lbmNvdW50ZXJzIHtcbiAgICAgICAgY29sb3I6IHZhcigtLXRleHQtbXV0ZWQpO1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICB9XG4gICAgLmVuY291bnRlciB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICB9XG4gICAgLmVuY291bnRlci1jb250cm9scyB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgIGdhcDogMXJlbTtcbiAgICB9XG48L3N0eWxlPlxuIiwgIjxzY3JpcHQgbGFuZz1cInRzXCI+XG4gICAgaW1wb3J0IHR5cGUgSW5pdGlhdGl2ZVRyYWNrZXIgZnJvbSBcInNyYy9tYWluXCI7XG4gICAgaW1wb3J0IHsgc2V0Q29udGV4dCB9IGZyb20gXCJzdmVsdGVcIjtcbiAgICBpbXBvcnQgQ29udHJvbHMgZnJvbSBcIi4vQ29udHJvbHMuc3ZlbHRlXCI7XG4gICAgaW1wb3J0IFRhYmxlIGZyb20gXCIuL2NyZWF0dXJlcy9UYWJsZS5zdmVsdGVcIjtcbiAgICBpbXBvcnQgTWV0YWRhdGEgZnJvbSBcIi4vTWV0YWRhdGEuc3ZlbHRlXCI7XG4gICAgaW1wb3J0IFNhdmVFbmNvdW50ZXIgZnJvbSBcIi4vU2F2ZUVuY291bnRlci5zdmVsdGVcIjtcbiAgICBpbXBvcnQgTG9hZEVuY291bnRlciBmcm9tIFwiLi9Mb2FkRW5jb3VudGVyLnN2ZWx0ZVwiO1xuXG4gICAgaW1wb3J0IHsgdHJhY2tlciB9IGZyb20gXCIuLi9zdG9yZXMvdHJhY2tlclwiO1xuICAgIGltcG9ydCB7IEV4dHJhQnV0dG9uQ29tcG9uZW50LCBOb3RpY2UgfSBmcm9tIFwib2JzaWRpYW5cIjtcbiAgICBpbXBvcnQgeyBBREQsIENPUFkgfSBmcm9tIFwic3JjL3V0aWxzXCI7XG4gICAgaW1wb3J0IFVwZGF0aW5nIGZyb20gXCIuL1VwZGF0aW5nLnN2ZWx0ZVwiO1xuICAgIGltcG9ydCBMb2dnZXIgZnJvbSBcInNyYy9sb2dnZXIvbG9nZ2VyXCI7XG5cbiAgICBpbXBvcnQgeyBBZGRDcmVhdHVyZU1vZGFsIH0gZnJvbSBcIi4vY3JlYXRlL21vZGFsXCI7XG4gICAgaW1wb3J0IExlZ2FjeSBmcm9tIFwiLi9jcmVhdGUvTGVnYWN5LnN2ZWx0ZVwiO1xuICAgIGltcG9ydCB0eXBlIHsgQ3JlYXR1cmUgfSBmcm9tIFwic3JjL3V0aWxzL2NyZWF0dXJlXCI7XG5cbiAgICBleHBvcnQgbGV0IHBsdWdpbjogSW5pdGlhdGl2ZVRyYWNrZXI7XG5cbiAgICB0cmFja2VyLnNldERhdGEocGx1Z2luLmRhdGEpO1xuICAgIHRyYWNrZXIuc2V0TG9nZ2VyKG5ldyBMb2dnZXIocGx1Z2luKSk7XG4gICAgaWYgKHBsdWdpbi5kYXRhLnN0YXRlKSB7XG4gICAgICAgIHRyYWNrZXIubmV3KHBsdWdpbi5kYXRhLnN0YXRlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0cmFja2VyLnNldFBhcnR5KHBsdWdpbi5kYXRhLmRlZmF1bHRQYXJ0eSwgcGx1Z2luKTtcbiAgICAgICAgdHJhY2tlci5yb2xsKHBsdWdpbik7XG4gICAgfVxuXG4gICAgc2V0Q29udGV4dDxJbml0aWF0aXZlVHJhY2tlcj4oXCJwbHVnaW5cIiwgcGx1Z2luKTtcblxuICAgIGxldCBzYXZpbmcgPSBmYWxzZTtcbiAgICBsZXQgbG9hZGluZyA9IGZhbHNlO1xuICAgIGxldCBsZWdhY3kgPSBmYWxzZSxcbiAgICAgICAgZWRpdGluZzogQ3JlYXR1cmU7XG4gICAgY29uc3QgZWRpdE9yQWRkID0gKGNyZWF0dXJlPzogQ3JlYXR1cmUpID0+IHtcbiAgICAgICAgaWYgKHBsdWdpbi5kYXRhLnVzZUxlZ2FjeSkge1xuICAgICAgICAgICAgbGVnYWN5ID0gdHJ1ZTtcbiAgICAgICAgICAgIGVkaXRpbmcgPSBjcmVhdHVyZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IG1vZGFsID0gbmV3IEFkZENyZWF0dXJlTW9kYWwocGx1Z2luLCBjcmVhdHVyZSk7XG4gICAgICAgICAgICBtb2RhbC5vbkNsb3NlID0gKCkgPT4ge307XG4gICAgICAgICAgICBtb2RhbC5vcGVuKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGNvbnN0IGFkZEJ1dHRvbiA9IChub2RlOiBIVE1MRWxlbWVudCkgPT4ge1xuICAgICAgICBuZXcgRXh0cmFCdXR0b25Db21wb25lbnQobm9kZSkuc2V0VG9vbHRpcChcIkFkZCBDcmVhdHVyZVwiKS5zZXRJY29uKEFERCk7XG4gICAgfTtcbiAgICBjb25zdCBjb3B5QnV0dG9uID0gKG5vZGU6IEhUTUxFbGVtZW50KSA9PiB7XG4gICAgICAgIG5ldyBFeHRyYUJ1dHRvbkNvbXBvbmVudChub2RlKVxuICAgICAgICAgICAgLnNldFRvb2x0aXAoXCJDb3B5IEluaXRpYXRpdmUgT3JkZXJcIilcbiAgICAgICAgICAgIC5zZXRJY29uKENPUFkpXG4gICAgICAgICAgICAub25DbGljayhhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgY29udGVudHMgPSAkdHJhY2tlclxuICAgICAgICAgICAgICAgICAgICAubWFwKFxuICAgICAgICAgICAgICAgICAgICAgICAgKGNyZWF0dXJlKSA9PiBgJHtjcmVhdHVyZS5pbml0aWF0aXZlfSAke2NyZWF0dXJlLm5hbWV9YFxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgIC5qb2luKFwiXFxuXCIpO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IG5hdmlnYXRvci5jbGlwYm9hcmQud3JpdGVUZXh0KGNvbnRlbnRzKTtcbiAgICAgICAgICAgICAgICAgICAgbmV3IE5vdGljZShcIkluaXRpYXRpdmUgb3JkZXIgY29waWVkIHRvIGNsaXBib2FyZC5cIik7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICBuZXcgTm90aWNlKFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJJbml0aWF0aXZlIG9yZGVyIGNvdWxkIG5vdCBiZSBjb3BpZWQgdG8gY2xpcGJvYXJkLlwiXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgfTtcbjwvc2NyaXB0PlxuXG48ZGl2IGNsYXNzPVwib2JzaWRpYW4taW5pdGlhdGl2ZS10cmFja2VyXCI+XG4gICAgPENvbnRyb2xzXG4gICAgICAgIG9uOnNhdmU9eygpID0+IChzYXZpbmcgPSB0cnVlKX1cbiAgICAgICAgb246bG9hZD17KCkgPT4gKGxvYWRpbmcgPSB0cnVlKX1cbiAgICAgICAgb246YWRkLWNyZWF0dXJlcz17KCkgPT4gZWRpdE9yQWRkKCl9XG4gICAgICAgIG9uOnBsYXllci12aWV3XG4gICAgICAgIG9uOm9wZW4tbWFwXG4gICAgLz5cblxuICAgIDxNZXRhZGF0YSAvPlxuICAgIDxUYWJsZVxuICAgICAgICBvbjplZGl0PXsoZXZ0KSA9PiBlZGl0T3JBZGQoZXZ0LmRldGFpbCl9XG4gICAgICAgIG9uOm9wZW4tY29tYmF0YW50PXsoZXZ0KSA9PiBwbHVnaW4ub3BlbkNvbWJhdGFudChldnQuZGV0YWlsKX1cbiAgICAvPlxuICAgIDxVcGRhdGluZyAvPlxuICAgIHsjaWYgc2F2aW5nfVxuICAgICAgICA8U2F2ZUVuY291bnRlciBvbjpjYW5jZWw9eygpID0+IChzYXZpbmcgPSBmYWxzZSl9IC8+XG4gICAgezplbHNlIGlmIGxvYWRpbmd9XG4gICAgICAgIDxMb2FkRW5jb3VudGVyIG9uOmNhbmNlbD17KCkgPT4gKGxvYWRpbmcgPSBmYWxzZSl9IC8+XG4gICAgezplbHNlIGlmIGxlZ2FjeX1cbiAgICAgICAgPExlZ2FjeVxuICAgICAgICAgICAge3BsdWdpbn1cbiAgICAgICAgICAgIGNyZWF0dXJlPXtlZGl0aW5nfVxuICAgICAgICAgICAgb246Y2xvc2U9eygpID0+IHtcbiAgICAgICAgICAgICAgICBsZWdhY3kgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBlZGl0aW5nID0gbnVsbDtcbiAgICAgICAgICAgIH19XG4gICAgICAgIC8+XG4gICAgezplbHNlfVxuICAgICAgICA8ZGl2IGNsYXNzPVwiYWRkLWNyZWF0dXJlLWNvbnRhaW5lclwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbnRleHQtY29udGFpbmVyXCI+XG4gICAgICAgICAgICAgICAgPGRpdiB1c2U6Y29weUJ1dHRvbiBjbGFzcz1cImNvcHktYnV0dG9uXCIgLz5cbiAgICAgICAgICAgICAgICA8IS0tIHN2ZWx0ZS1pZ25vcmUgYTExeS1jbGljay1ldmVudHMtaGF2ZS1rZXktZXZlbnRzIC0tPlxuICAgICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICAgICAgdXNlOmFkZEJ1dHRvblxuICAgICAgICAgICAgICAgICAgICBjbGFzcz1cImFkZC1idXR0b25cIlxuICAgICAgICAgICAgICAgICAgICBvbjpjbGljaz17KCkgPT4gZWRpdE9yQWRkKCl9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICB7L2lmfVxuPC9kaXY+XG5cbjxzdHlsZSBzY29wZWQ+XG4gICAgLm9ic2lkaWFuLWluaXRpYXRpdmUtdHJhY2tlciB7XG4gICAgICAgIG1hcmdpbjogMC41cmVtO1xuICAgICAgICAvKiBtYXJnaW4tYm90dG9tOiAwLjVyZW07ICovXG4gICAgICAgIG1pbi13aWR0aDogMTgwcHg7XG4gICAgICAgIG92ZXJmbG93LXk6IGF1dG87XG4gICAgfVxuICAgIC5hZGQtY3JlYXR1cmUtY29udGFpbmVyIHtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgZmxleC1mbG93OiBjb2x1bW4gbm93cmFwO1xuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7XG4gICAgICAgIG1hcmdpbi1yaWdodDogMC41cmVtO1xuICAgIH1cbiAgICAuY29udGV4dC1jb250YWluZXIge1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBmbGV4LWZsb3c6IHJvdyBub3dyYXA7XG4gICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICB9XG4gICAgLmNvcHktYnV0dG9uIHtcbiAgICAgICAgd2lkdGg6IG1pbi1jb250ZW50O1xuICAgICAgICBvcGFjaXR5OiAwLjI1O1xuICAgIH1cbiAgICAuY29weS1idXR0b246aG92ZXIge1xuICAgICAgICBvcGFjaXR5OiAxO1xuICAgIH1cbiAgICAuYWRkLWJ1dHRvbiB7XG4gICAgICAgIHdpZHRoOiBtaW4tY29udGVudDtcbiAgICB9XG4gICAgLmFkZC1idXR0b24gOmdsb2JhbCguY2xpY2thYmxlLWljb24pIHtcbiAgICAgICAgbWFyZ2luOiAwO1xuICAgIH1cbjwvc3R5bGU+XG4iLCAiPHNjcmlwdCBsYW5nPVwidHNcIj5cbiAgICBpbXBvcnQgdHlwZSB7IENvbmRpdGlvbiwgVXBkYXRlTG9nTWVzc2FnZSB9IGZyb20gXCJAdHlwZXNcIjtcbiAgICBpbXBvcnQgeyBzZXRJY29uIH0gZnJvbSBcIm9ic2lkaWFuXCI7XG4gICAgaW1wb3J0IHR5cGUgSW5pdGlhdGl2ZVRyYWNrZXIgZnJvbSBcInNyYy9tYWluXCI7XG4gICAgaW1wb3J0IHsgSFAsIFJFTU9WRSwgVEFHIH0gZnJvbSBcInNyYy91dGlsc1wiO1xuICAgIGltcG9ydCB7IENvbmRpdGlvblN1Z2dlc3Rpb25Nb2RhbCB9IGZyb20gXCJzcmMvdXRpbHMvc3VnZ2VzdGVyXCI7XG4gICAgaW1wb3J0IHsgZ2V0Q29udGV4dCB9IGZyb20gXCJzdmVsdGVcIjtcblxuICAgIGltcG9ydCB7IHRyYWNrZXIgfSBmcm9tIFwiLi4vc3RvcmVzL3RyYWNrZXJcIjtcbiAgICBjb25zdCB7IHVwZGF0aW5nIH0gPSB0cmFja2VyO1xuXG4gICAgY29uc3QgcGx1Z2luID0gZ2V0Q29udGV4dDxJbml0aWF0aXZlVHJhY2tlcj4oXCJwbHVnaW5cIik7XG4gICAgY29uc3QgaHBJY29uID0gKG5vZGU6IEhUTUxFbGVtZW50KSA9PiB7XG4gICAgICAgIHNldEljb24obm9kZSwgSFApO1xuICAgIH07XG4gICAgY29uc3QgdGFnSWNvbiA9IChub2RlOiBIVE1MRWxlbWVudCkgPT4ge1xuICAgICAgICBzZXRJY29uKG5vZGUsIFRBRyk7XG4gICAgfTtcbiAgICBjb25zdCByZW1vdmVJY29uID0gKG5vZGU6IEhUTUxFbGVtZW50KSA9PiB7XG4gICAgICAgIHNldEljb24obm9kZSwgUkVNT1ZFKTtcbiAgICB9O1xuICAgIGNvbnN0IGNoZWNrSWNvbiA9IChub2RlOiBIVE1MRWxlbWVudCkgPT4ge1xuICAgICAgICBzZXRJY29uKG5vZGUsIFwiY2hlY2tcIik7XG4gICAgfTtcbiAgICBjb25zdCBjYW5jZWxJY29uID0gKG5vZGU6IEhUTUxFbGVtZW50KSA9PiB7XG4gICAgICAgIHNldEljb24obm9kZSwgXCJjcm9zcy1pbi1ib3hcIik7XG4gICAgfTtcbiAgICBsZXQgZGFtYWdlOiBzdHJpbmcgPSBcIlwiO1xuICAgIGxldCBzdGF0dXM6IENvbmRpdGlvbiA9IG51bGw7XG5cbiAgICBsZXQgbW9kYWw6IENvbmRpdGlvblN1Z2dlc3Rpb25Nb2RhbDtcbiAgICBjb25zdCBzdWdnZXN0Q29uZGl0aW9ucyA9IChub2RlOiBIVE1MSW5wdXRFbGVtZW50KSA9PiB7XG4gICAgICAgIG1vZGFsID0gbmV3IENvbmRpdGlvblN1Z2dlc3Rpb25Nb2RhbChwbHVnaW4sIG5vZGUpO1xuICAgICAgICBtb2RhbC5vbkNsb3NlID0gKCkgPT4ge1xuICAgICAgICAgICAgc3RhdHVzID0gbW9kYWwuY29uZGl0aW9uO1xuICAgICAgICAgICAgbm9kZS5mb2N1cygpO1xuICAgICAgICB9O1xuICAgICAgICBtb2RhbC5vcGVuKCk7XG4gICAgfTtcbiAgICBmdW5jdGlvbiBpbml0KGVsOiBIVE1MSW5wdXRFbGVtZW50KSB7XG4gICAgICAgIGVsLmZvY3VzKCk7XG4gICAgfVxuICAgIGNvbnN0IHBlcmZvcm1VcGRhdGUgPSAocGVyZm9ybTogYm9vbGVhbikgPT4ge1xuICAgICAgICBpZiAocGVyZm9ybSkge1xuICAgICAgICAgICAgdHJhY2tlci5kb1VwZGF0ZShkYW1hZ2UgPz8gXCJcIiwgc3RhdHVzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRyYWNrZXIuY2xlYXJVcGRhdGUoKTtcbiAgICAgICAgfVxuICAgICAgICBkYW1hZ2UgPSBudWxsO1xuICAgICAgICBzdGF0dXMgPSBudWxsO1xuICAgICAgICByZXR1cm47XG4gICAgfTtcbjwvc2NyaXB0PlxuXG57I2lmICR1cGRhdGluZy5zaXplfVxuICAgIDxkaXYgY2xhc3M9XCJ1cGRhdGluZy1jb250YWluZXJcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInVwZGF0aW5nLWhwXCI+XG4gICAgICAgICAgICA8IS0tIHN2ZWx0ZS1pZ25vcmUgYTExeS1hdXRvZm9jdXMgLS0+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiaHAtc3RhdHVzXCI+XG4gICAgICAgICAgICAgICAgeyNpZiBwbHVnaW4uZGF0YS5iZWdpbm5lclRpcHN9XG4gICAgICAgICAgICAgICAgICAgIDxzbWFsbCBjbGFzcz1cImxhYmVsXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICBBcHBseSBkYW1hZ2UsIGhlYWxpbmcoLSkgb3IgdGVtcCBIUCh0KVxuICAgICAgICAgICAgICAgICAgICA8L3NtYWxsPlxuICAgICAgICAgICAgICAgIHsvaWZ9XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImlucHV0XCI+XG4gICAgICAgICAgICAgICAgICAgIDx0YWdcbiAgICAgICAgICAgICAgICAgICAgICAgIHVzZTpocEljb25cbiAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtbGFiZWw9XCJBcHBseSBkYW1hZ2UsIGhlYWxpbmcoLSkgb3IgdGVtcCBIUCh0KVwiXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT1cIm1hcmdpbjogMCAwLjJyZW0gMCAwLjdyZW1cIlxuICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJpbmQ6dmFsdWU9e2RhbWFnZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIG9uOmtleWRvd249e2Z1bmN0aW9uIChldnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXZ0LmtleSA9PSBcIlRhYlwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXZ0LmtleSA9PSBcIkVudGVyXCIgfHwgZXZ0LmtleSA9PSBcIkVzY2FwZVwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlcmZvcm1VcGRhdGUoZXZ0LmtleSA9PSBcIkVudGVyXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIS9eKHQ/LT9cXGQqXFwuP1xcZCooQmFja3NwYWNlfERlbGV0ZXxBcnJvd1xcdyspPykkLy50ZXN0KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy52YWx1ZSArIGV2dC5rZXlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgICAgICB1c2U6aW5pdFxuICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiaHAtc3RhdHVzXCI+XG4gICAgICAgICAgICAgICAgeyNpZiBwbHVnaW4uZGF0YS5iZWdpbm5lclRpcHN9XG4gICAgICAgICAgICAgICAgICAgIDxzbWFsbCBjbGFzcz1cImxhYmVsXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICBBcHBseSBzdGF0dXMgZWZmZWN0IHRvIGNyZWF0dXJlcyB0aGF0IGZhaWwgdGhlaXIgc2F2aW5nXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvd1xuICAgICAgICAgICAgICAgICAgICA8L3NtYWxsPlxuICAgICAgICAgICAgICAgIHsvaWZ9XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImlucHV0XCI+XG4gICAgICAgICAgICAgICAgICAgIDx0YWdcbiAgICAgICAgICAgICAgICAgICAgICAgIHVzZTp0YWdJY29uXG4gICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWxhYmVsPVwiQXBwbHkgc3RhdHVzIGVmZmVjdCB0byBjcmVhdHVyZXMgdGhhdCBmYWlsIHRoZWlyIHNhdmluZyB0aHJvd1wiXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT1cIm1hcmdpbjogMCAwLjJyZW0gMCAwLjdyZW1cIlxuICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uOmZvY3VzPXtmdW5jdGlvbiAoZXZ0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VnZ2VzdENvbmRpdGlvbnModGhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgICAgICAgb246a2V5ZG93bj17ZnVuY3Rpb24gKGV2dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChbXCJFbnRlclwiLCBcIkVzY2FwZVwiXS5pbmNsdWRlcyhldnQua2V5KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZXJmb3JtVXBkYXRlKGV2dC5rZXkgPT0gXCJFbnRlclwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwidXBkYXRpbmctYnV0dG9uc1wiPlxuICAgICAgICAgICAgPHNwYW5cbiAgICAgICAgICAgICAgICB1c2U6Y2hlY2tJY29uXG4gICAgICAgICAgICAgICAgb246Y2xpY2s9eygpID0+IHBlcmZvcm1VcGRhdGUodHJ1ZSl9XG4gICAgICAgICAgICAgICAgc3R5bGU9XCJjdXJzb3I6cG9pbnRlclwiXG4gICAgICAgICAgICAgICAgYXJpYS1sYWJlbD1cIkFwcGx5XCJcbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8c3BhblxuICAgICAgICAgICAgICAgIHVzZTpjYW5jZWxJY29uXG4gICAgICAgICAgICAgICAgb246Y2xpY2s9eygpID0+IHBlcmZvcm1VcGRhdGUoZmFsc2UpfVxuICAgICAgICAgICAgICAgIHN0eWxlPVwiY3Vyc29yOnBvaW50ZXJcIlxuICAgICAgICAgICAgICAgIGFyaWEtbGFiZWw9XCJDYW5jZWxcIlxuICAgICAgICAgICAgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICAgeyNpZiBwbHVnaW4uZGF0YS5iZWdpbm5lclRpcHN9XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgICA8c21hbGw+TXVsdGlwbGUgY3JlYXR1cmVzIGNhbiBiZSBzZWxlY3RlZCBhdCBhIHRpbWUuPC9zbWFsbD5cbiAgICAgICAgPC9kaXY+XG4gICAgey9pZn1cbiAgICA8ZGl2IHN0eWxlPVwibWFyZ2luOiAwLjVyZW1cIj5cbiAgICAgICAgPHRhYmxlIGNsYXNzPVwidXBkYXRpbmctY3JlYXR1cmUtdGFibGVcIj5cbiAgICAgICAgICAgIDx0aGVhZCBjbGFzcz1cInVwZGF0aW5nLWNyZWF0dXJlLXRhYmxlLWhlYWRlclwiPlxuICAgICAgICAgICAgICAgIDx0aFxuICAgICAgICAgICAgICAgICAgICBzdHlsZT1cInBhZGRpbmc6MCAwLjJyZW0gMCAwOyBjdXJzb3I6cG9pbnRlclwiXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzPVwibGVmdFwiXG4gICAgICAgICAgICAgICAgICAgIHVzZTpyZW1vdmVJY29uXG4gICAgICAgICAgICAgICAgICAgIG9uOmNsaWNrPXsoKSA9PiBwZXJmb3JtVXBkYXRlKGZhbHNlKX1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIDx0aCBzdHlsZT1cIndpZHRoOjEwMCVcIiBjbGFzcz1cImxlZnRcIj5OYW1lPC90aD5cbiAgICAgICAgICAgICAgICA8dGggc3R5bGU9XCJwYWRkaW5nOjAgMC4ycmVtXCIgY2xhc3M9XCJjZW50ZXJcIj5TYXZlZDwvdGg+XG4gICAgICAgICAgICAgICAgPHRoIHN0eWxlPVwicGFkZGluZzowIDAuMnJlbVwiIGNsYXNzPVwiY2VudGVyXCI+UmVzaXN0PC90aD5cbiAgICAgICAgICAgICAgICA8dGggc3R5bGU9XCJwYWRkaW5nOjAgMC4ycmVtXCIgY2xhc3M9XCJjZW50ZXJcIj5Nb2RpZmllcjwvdGg+XG4gICAgICAgICAgICA8L3RoZWFkPlxuICAgICAgICAgICAgPHRib2R5PlxuICAgICAgICAgICAgICAgIHsjZWFjaCBbLi4uJHVwZGF0aW5nLmVudHJpZXMoKV0gYXMgW2NyZWF0dXJlLCB1cGRhdGVdLCBpfVxuICAgICAgICAgICAgICAgICAgICA8dHIgY2xhc3M9XCJ1cGRhdGluZy1jcmVhdHVyZS10YWJsZS1yb3dcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZTpyZW1vdmVJY29uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb246Y2xpY2s9e2Z1bmN0aW9uIChldnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhY2tlci5zZXRVcGRhdGUoY3JlYXR1cmUsIGV2dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT1cImN1cnNvcjpwb2ludGVyXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQ+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtjcmVhdHVyZS5uYW1lICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChjcmVhdHVyZS5udW1iZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IFwiIFwiICsgY3JlYXR1cmUubnVtYmVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBcIlwiKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPVwiY2VudGVyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9XCJjaGVja2JveFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrZWQ9e3VwZGF0ZS5zYXZlZH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb246Y2xpY2s9e2Z1bmN0aW9uIChldnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZS5zYXZlZCA9ICF1cGRhdGUuc2F2ZWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XG4gICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9XCJjZW50ZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cImNoZWNrYm94XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tlZD17dXBkYXRlLnJlc2lzdH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb246Y2xpY2s9e2Z1bmN0aW9uIChldnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZS5yZXNpc3QgPSAhdXBkYXRlLnJlc2lzdDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cImNlbnRlclwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlPVwibnVtYmVyXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9XCJjZW50ZXJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT1cIndpZHRoOjkwJTsgaGVpZ2h0OjgwJTsgcGFkZGluZzowO1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJpbmQ6dmFsdWU9e3VwZGF0ZS5jdXN0b21Nb2R9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uOmtleWRvd249e2Z1bmN0aW9uIChldnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChldnQua2V5ID09PSBcIkVzY2FwZVwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy52YWx1ZSA9IFwiMVwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChldnQua2V5ID09PSBcIkVudGVyXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XG4gICAgICAgICAgICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgICAgICAgey9lYWNofVxuICAgICAgICAgICAgPC90Ym9keT5cbiAgICAgICAgPC90YWJsZT5cbiAgICA8L2Rpdj5cbnsvaWZ9XG5cbjxzdHlsZSBzY29wZWQ+XG4gICAgLmlucHV0IHtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgZ2FwOiAwLjVyZW07XG4gICAgfVxuICAgIC5sZWZ0IHtcbiAgICAgICAgdGV4dC1hbGlnbjogbGVmdDtcbiAgICB9XG4gICAgLmNlbnRlciB7XG4gICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICB9XG4gICAgLnVwZGF0aW5nLWhwIHtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgZmxleC1mbG93OiBjb2x1bW47XG4gICAgICAgIGdhcDogMC41cmVtO1xuICAgIH1cbiAgICAudXBkYXRpbmctY29udGFpbmVyIHtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgZmxleC1mbG93OiBjb2x1bW4gbm93cmFwO1xuICAgICAgICBnYXA6IDAuNXJlbTtcbiAgICB9XG4gICAgLmhwLXN0YXR1cyB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGZsZXgtZmxvdzogY29sdW1uO1xuICAgIH1cbiAgICAudXBkYXRpbmctYnV0dG9ucyB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGp1c3RpZnktY29udGVudDogZmxleC1lbmQ7XG4gICAgICAgIGdhcDogMXJlbTtcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiAxLjJyZW07XG4gICAgfVxuPC9zdHlsZT5cbiIsICJpbXBvcnQgeyBub3JtYWxpemVQYXRoLCBURmlsZSB9IGZyb20gXCJvYnNpZGlhblwiO1xuaW1wb3J0IHR5cGUgSW5pdGlhdGl2ZVRyYWNrZXIgZnJvbSBcIi4uL21haW5cIjtcbmltcG9ydCB0eXBlIHsgQ3JlYXR1cmUgfSBmcm9tIFwiLi4vdXRpbHMvY3JlYXR1cmVcIjtcblxuaW1wb3J0IHsgdHJhY2tlciB9IGZyb20gXCJzcmMvdHJhY2tlci9zdG9yZXMvdHJhY2tlclwiO1xuaW1wb3J0IHR5cGUgeyBVcGRhdGVMb2dNZXNzYWdlIH0gZnJvbSBcIkB0eXBlc1wiO1xuXG5leHBvcnQgaW50ZXJmYWNlIExvZ1N0YXRlIHtcbiAgICBuYW1lPzogc3RyaW5nO1xuICAgIHBsYXllcnM6IENyZWF0dXJlW107XG4gICAgY3JlYXR1cmVzOiBDcmVhdHVyZVtdO1xuICAgIHJvdW5kOiBudW1iZXI7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExvZ2dlciB7XG4gICAgcHVibGljIGFzeW5jIHNldExvZ0ZpbGUobG9nRmlsZTogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMubG9nRmlsZSA9IGxvZ0ZpbGU7XG4gICAgICAgIHRoaXMubG9nZ2luZyA9IHRydWU7XG5cbiAgICAgICAgYXdhaXQgdGhpcy5zZXRGaWxlKCk7XG4gICAgfVxuICAgIHB1YmxpYyBnZXRMb2dGaWxlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2dGaWxlID8gbm9ybWFsaXplUGF0aCh0aGlzLmxvZ0ZpbGUpIDogXCJcIjtcbiAgICB9XG4gICAgcHJpdmF0ZSBsb2dGaWxlOiBzdHJpbmc7XG4gICAgYXN5bmMgc2V0RmlsZSgpIHtcbiAgICAgICAgY29uc3QgZmlsZSA9IChhd2FpdCB0aGlzLmFkYXB0ZXIuZXhpc3RzKG5vcm1hbGl6ZVBhdGgodGhpcy5sb2dGaWxlKSkpXG4gICAgICAgICAgICA/IGF3YWl0IHRoaXMudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKFxuICAgICAgICAgICAgICAgICAgbm9ybWFsaXplUGF0aCh0aGlzLmxvZ0ZpbGUpXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgIDogYXdhaXQgdGhpcy52YXVsdC5jcmVhdGUodGhpcy5sb2dGaWxlLCBgYCk7XG5cbiAgICAgICAgaWYgKGZpbGUgaW5zdGFuY2VvZiBURmlsZSkge1xuICAgICAgICAgICAgdGhpcy5maWxlID0gZmlsZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXRGaWxlKCk6IFRGaWxlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmlsZTtcbiAgICB9XG4gICAgcHJpdmF0ZSBmaWxlOiBURmlsZTtcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgcGx1Z2luOiBJbml0aWF0aXZlVHJhY2tlcikge31cbiAgICBnZXQgZW5hYmxlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGx1Z2luLmRhdGEubG9nZ2luZztcbiAgICB9XG4gICAgZ2V0IGZvbGRlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGx1Z2luLmRhdGEubG9nRm9sZGVyO1xuICAgIH1cbiAgICBnZXQgdmF1bHQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBsdWdpbi5hcHAudmF1bHQ7XG4gICAgfVxuICAgIGdldCBhZGFwdGVyKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wbHVnaW4uYXBwLnZhdWx0LmFkYXB0ZXI7XG4gICAgfVxuICAgIGxvZ2dpbmcgPSBmYWxzZTtcbiAgICBhc3luYyBuZXcobG9nRmlsZTogc3RyaW5nKTogUHJvbWlzZTx2b2lkPjtcbiAgICBhc3luYyBuZXcoc3RhdGU6IExvZ1N0YXRlKTogUHJvbWlzZTx2b2lkPjtcbiAgICBhc3luYyBuZXcocGFyYW06IHN0cmluZyB8IExvZ1N0YXRlKSB7XG4gICAgICAgIGlmICghdGhpcy5lbmFibGVkKSByZXR1cm47XG5cbiAgICAgICAgaWYgKHR5cGVvZiBwYXJhbSA9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnNldExvZ0ZpbGUocGFyYW0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5zZXRMb2dGaWxlKFxuICAgICAgICAgICAgICAgIGAke3RoaXMuZm9sZGVyfS8ke0RhdGUubm93KCl9IC0gJHtwYXJhbS5uYW1lID8/IFwiQ29tYmF0XCJ9Lm1kYFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMubG9nKFxuICAgICAgICAgICAgICAgIGAqKkNvbWJhdCBzdGFydGVkICR7bmV3IERhdGUoKS50b0xvY2FsZVN0cmluZygpfSoqXFxuXFxuYFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMubG9nKFwiIyMgUGxheWVyc1wiKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMubG9nKFwifCBQbGF5ZXIgfCBJbml0aWF0aXZlIHwgSFAgfCBTdGF0dXNlcyB8XCIpO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5sb2coXCJ8IC0tLSB8IDotOiB8IDotOiB8IDotOiB8XCIpO1xuICAgICAgICAgICAgZm9yIChjb25zdCBwbGF5ZXIgb2YgcGFyYW0ucGxheWVycy5zb3J0KFxuICAgICAgICAgICAgICAgIChhLCBiKSA9PiBiLmluaXRpYXRpdmUgLSBhLmluaXRpYXRpdmVcbiAgICAgICAgICAgICkpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmxvZyhcbiAgICAgICAgICAgICAgICAgICAgXCJ8XCIsXG4gICAgICAgICAgICAgICAgICAgIHBsYXllci5nZXROYW1lKCkucmVwbGFjZShcInxcIiwgXCJcXFxcfFwiKSxcbiAgICAgICAgICAgICAgICAgICAgXCJ8XCIsXG4gICAgICAgICAgICAgICAgICAgIHBsYXllci5pbml0aWF0aXZlLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgICAgIFwifFwiLFxuICAgICAgICAgICAgICAgICAgICBwbGF5ZXIuaHAgPyBgJHtwbGF5ZXIuaHB9LyR7cGxheWVyLm1heH1gIDogXCItXCIsXG4gICAgICAgICAgICAgICAgICAgIFwifFwiLFxuICAgICAgICAgICAgICAgICAgICBbLi4uKHBsYXllci5zdGF0dXMuc2l6ZSA/IHBsYXllci5zdGF0dXMgOiBbXCItXCJdKV1cbiAgICAgICAgICAgICAgICAgICAgICAgIC5qb2luKFwiLCBcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKFwifFwiLCBcIlxcXFx8XCIpLFxuICAgICAgICAgICAgICAgICAgICBcInxcIlxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmxvZyhcIiMjIENyZWF0dXJlc1wiKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMubG9nKFwifCBDcmVhdHVyZSB8IEluaXRpYXRpdmUgIHwgSFAgfCBTdGF0dXNlcyB8XCIpO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5sb2coXCJ8IC0tLSB8IDotOiB8IDotOiB8IDotOiB8XCIpO1xuICAgICAgICAgICAgZm9yIChjb25zdCBjcmVhdHVyZSBvZiBwYXJhbS5jcmVhdHVyZXMuc29ydChcbiAgICAgICAgICAgICAgICAoYSwgYikgPT4gYi5pbml0aWF0aXZlIC0gYS5pbml0aWF0aXZlXG4gICAgICAgICAgICApKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5sb2coXG4gICAgICAgICAgICAgICAgICAgIFwifFwiLFxuICAgICAgICAgICAgICAgICAgICBjcmVhdHVyZS5nZXROYW1lKCkucmVwbGFjZShcInxcIiwgXCJcXFxcfFwiKSxcbiAgICAgICAgICAgICAgICAgICAgXCJ8XCIsXG4gICAgICAgICAgICAgICAgICAgIGNyZWF0dXJlLmluaXRpYXRpdmUudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgXCJ8XCIsXG4gICAgICAgICAgICAgICAgICAgIGNyZWF0dXJlLmhwID8gYCR7Y3JlYXR1cmUuaHB9LyR7Y3JlYXR1cmUubWF4fWAgOiBcIi1cIixcbiAgICAgICAgICAgICAgICAgICAgXCJ8XCIsXG4gICAgICAgICAgICAgICAgICAgIFsuLi4oY3JlYXR1cmUuc3RhdHVzLnNpemUgPyBjcmVhdHVyZS5zdGF0dXMgOiBbXCItXCJdKV1cbiAgICAgICAgICAgICAgICAgICAgICAgIC5qb2luKFwiLCBcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKFwifFwiLCBcIlxcXFx8XCIpLFxuICAgICAgICAgICAgICAgICAgICBcInxcIlxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGF3YWl0IHRoaXMubG9nKFwiXFxuXFxuIyMgQ29tYmF0IExvZ1wiKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMubG9nKFwiXFxuIyMjIFJvdW5kIDFcIik7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmxvZyhcbiAgICAgICAgICAgICAgICBgXFxuIyMjIyMgJHt0cmFja2VyLmdldE9yZGVyZWRDcmVhdHVyZXMoKVswXS5nZXROYW1lKCl9J3MgdHVybmBcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgbG9nKC4uLm1zZzogc3RyaW5nW10pIHtcbiAgICAgICAgaWYgKCF0aGlzLmVuYWJsZWQpIHJldHVybjtcbiAgICAgICAgaWYgKCF0aGlzLmZpbGUpIHJldHVybjtcbiAgICAgICAgaWYgKCEoYXdhaXQgdGhpcy5hZGFwdGVyLmV4aXN0cyh0aGlzLmxvZ0ZpbGUpKSkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5zZXRMb2dGaWxlKHRoaXMubG9nRmlsZSk7XG4gICAgICAgIH1cbiAgICAgICAgYXdhaXQgdGhpcy52YXVsdC5hcHBlbmQodGhpcy5maWxlLCBgJHttc2cuam9pbihcIiBcIil9XFxuYCk7XG4gICAgfVxuICAgIHB1YmxpYyBqb2luKHN0cmluZ3M6IHN0cmluZ1tdLCBqb2luZXI6IHN0cmluZyA9IFwiYW5kXCIpIHtcbiAgICAgICAgaWYgKHN0cmluZ3MubGVuZ3RoID09IDEpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmdzWzBdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBgJHtzdHJpbmdzLnNsaWNlKDAsIC0xKS5qb2luKFwiLCBcIil9ICR7am9pbmVyfSAke3N0cmluZ3Muc2xpY2UoXG4gICAgICAgICAgICAtMVxuICAgICAgICApfWA7XG4gICAgfVxuICAgIGxvZ1VwZGF0ZShtZXNzYWdlczogVXBkYXRlTG9nTWVzc2FnZVtdKSB7XG4gICAgICAgIGNvbnN0IHRvTG9nOiBzdHJpbmdbXSA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IG1lc3NhZ2Ugb2YgbWVzc2FnZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IHBlckNyZWF0dXJlOiBzdHJpbmdbXSA9IFtdO1xuICAgICAgICAgICAgaWYgKG1lc3NhZ2UuaHApIHtcbiAgICAgICAgICAgICAgICBpZiAobWVzc2FnZS50ZW1wKSB7XG4gICAgICAgICAgICAgICAgICAgIHBlckNyZWF0dXJlLnB1c2goXG4gICAgICAgICAgICAgICAgICAgICAgICBgJHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLm5hbWVcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZ2FpbmVkICR7bWVzc2FnZS5ocC50b1N0cmluZygpfSB0ZW1wb3JhcnkgSFBgXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtZXNzYWdlLmhwIDwgMCkge1xuICAgICAgICAgICAgICAgICAgICBwZXJDcmVhdHVyZS5wdXNoKFxuICAgICAgICAgICAgICAgICAgICAgICAgYCR7bWVzc2FnZS5uYW1lfSB0b29rICR7KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0xICogbWVzc2FnZS5ocFxuICAgICAgICAgICAgICAgICAgICAgICAgKS50b1N0cmluZygpfSBkYW1hZ2Uke1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UudW5jID8gXCIgYW5kIHdhcyBrbm9ja2VkIHVuY29uc2Npb3VzXCIgOiBcIlwiXG4gICAgICAgICAgICAgICAgICAgICAgICB9YFxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobWVzc2FnZS5ocCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcGVyQ3JlYXR1cmUucHVzaChcbiAgICAgICAgICAgICAgICAgICAgICAgIGAke1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UubmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgfSB3YXMgaGVhbGVkIGZvciAke21lc3NhZ2UuaHAudG9TdHJpbmcoKX0gSFBgXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1lc3NhZ2Uuc3RhdHVzKSB7XG4gICAgICAgICAgICAgICAgaWYgKHBlckNyZWF0dXJlLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBwZXJDcmVhdHVyZS5wdXNoKFwiYW5kXCIpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHBlckNyZWF0dXJlLnB1c2gobWVzc2FnZS5uYW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2Uuc2F2ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcGVyQ3JlYXR1cmUucHVzaChgc2F2ZWQgYWdhaW5zdCAke21lc3NhZ2Uuc3RhdHVzfWApO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHBlckNyZWF0dXJlLnB1c2goYHRvb2sgJHttZXNzYWdlLnN0YXR1c30gc3RhdHVzYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdG9Mb2cucHVzaChwZXJDcmVhdHVyZS5qb2luKFwiIFwiKSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5sb2coYCR7dG9Mb2cuam9pbihcIi4gXCIpfS5gKTtcbiAgICB9XG59XG4iLCAiaW1wb3J0IHsgQXBwLCBCdXR0b25Db21wb25lbnQsIE1vZGFsIH0gZnJvbSBcIm9ic2lkaWFuXCI7XG5pbXBvcnQgdHlwZSBJbml0aWF0aXZlVHJhY2tlciBmcm9tIFwic3JjL21haW5cIjtcbmltcG9ydCB0eXBlIHsgQ3JlYXR1cmUgfSBmcm9tIFwic3JjL3V0aWxzL2NyZWF0dXJlXCI7XG5pbXBvcnQgQ3JlYXRvciBmcm9tIFwiLi9DcmVhdG9yLnN2ZWx0ZVwiO1xuZXhwb3J0IGNsYXNzIEFkZENyZWF0dXJlTW9kYWwgZXh0ZW5kcyBNb2RhbCB7XG4gICAgY29uc3RydWN0b3IocHVibGljIHBsdWdpbjogSW5pdGlhdGl2ZVRyYWNrZXIsIHB1YmxpYyBjcmVhdHVyZT86IENyZWF0dXJlKSB7XG4gICAgICAgIHN1cGVyKHBsdWdpbi5hcHApO1xuICAgIH1cbiAgICBvbk9wZW4oKSB7XG4gICAgICAgIHRoaXMuY29udGFpbmVyRWwuYWRkQ2xhc3MoXCJpbml0aWF0aXZlLXRyYWNrZXItbW9kYWxcIik7XG4gICAgICAgIG5ldyBDcmVhdG9yKHtcbiAgICAgICAgICAgIHRhcmdldDogdGhpcy5jb250ZW50RWwsXG4gICAgICAgICAgICBwcm9wczoge1xuICAgICAgICAgICAgICAgIHBsdWdpbjogdGhpcy5wbHVnaW4sXG4gICAgICAgICAgICAgICAgLi4uKHRoaXMuY3JlYXR1cmVcbiAgICAgICAgICAgICAgICAgICAgPyB7IGNyZWF0dXJlOiB0aGlzLmNyZWF0dXJlLCBpc0VkaXRpbmc6IHRydWUgfVxuICAgICAgICAgICAgICAgICAgICA6IHt9KVxuICAgICAgICAgICAgfVxuICAgICAgICB9KS4kb24oXCJjbG9zZVwiLCAoKSA9PiB0aGlzLmNsb3NlKCkpO1xuICAgIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNvbmZpcm1XaXRoTW9kYWwoXG4gICAgYXBwOiBBcHAsXG4gICAgdGV4dDogc3RyaW5nLFxuICAgIGJ1dHRvbnM6IHsgY3RhOiBzdHJpbmc7IHNlY29uZGFyeTogc3RyaW5nIH0gPSB7XG4gICAgICAgIGN0YTogXCJZZXNcIixcbiAgICAgICAgc2Vjb25kYXJ5OiBcIk5vXCJcbiAgICB9XG4pOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgbW9kYWwgPSBuZXcgQ29uZmlybU1vZGFsKGFwcCwgdGV4dCwgYnV0dG9ucyk7XG4gICAgICAgICAgICBtb2RhbC5vbkNsb3NlID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIHJlc29sdmUobW9kYWwuY29uZmlybWVkKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBtb2RhbC5vcGVuKCk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHJlamVjdCgpO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5leHBvcnQgY2xhc3MgQ29uZmlybU1vZGFsIGV4dGVuZHMgTW9kYWwge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBhcHA6IEFwcCxcbiAgICAgICAgcHVibGljIHRleHQ6IHN0cmluZyxcbiAgICAgICAgcHVibGljIGJ1dHRvbnM6IHsgY3RhOiBzdHJpbmc7IHNlY29uZGFyeTogc3RyaW5nIH1cbiAgICApIHtcbiAgICAgICAgc3VwZXIoYXBwKTtcbiAgICB9XG4gICAgY29uZmlybWVkOiBib29sZWFuID0gZmFsc2U7XG4gICAgYXN5bmMgZGlzcGxheSgpIHtcbiAgICAgICAgdGhpcy5jb250YWluZXJFbC5hZGRDbGFzcyhcImluaXRpYXRpdmUtdHJhY2tlci1tb2RhbFwiKTtcbiAgICAgICAgdGhpcy5jb250ZW50RWwuZW1wdHkoKTtcbiAgICAgICAgdGhpcy5jb250ZW50RWwuYWRkQ2xhc3MoXCJjb25maXJtLW1vZGFsXCIpO1xuICAgICAgICB0aGlzLmNvbnRlbnRFbC5jcmVhdGVFbChcInBcIiwge1xuICAgICAgICAgICAgdGV4dDogdGhpcy50ZXh0XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBidXR0b25FbCA9IHRoaXMuY29udGVudEVsLmNyZWF0ZURpdihcImNvbmZpcm0tYnV0dG9uc1wiKTtcbiAgICAgICAgbmV3IEJ1dHRvbkNvbXBvbmVudChidXR0b25FbClcbiAgICAgICAgICAgIC5zZXRCdXR0b25UZXh0KHRoaXMuYnV0dG9ucy5jdGEpXG4gICAgICAgICAgICAuc2V0Q3RhKClcbiAgICAgICAgICAgIC5vbkNsaWNrKCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbmZpcm1lZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIG5ldyBCdXR0b25Db21wb25lbnQoYnV0dG9uRWwpXG4gICAgICAgICAgICAuc2V0QnV0dG9uVGV4dCh0aGlzLmJ1dHRvbnMuc2Vjb25kYXJ5KVxuICAgICAgICAgICAgLm9uQ2xpY2soKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cbiAgICBvbk9wZW4oKSB7XG4gICAgICAgIHRoaXMuZGlzcGxheSgpO1xuICAgIH1cbn1cbiIsICI8c2NyaXB0IGxhbmc9XCJ0c1wiPlxuICAgIGltcG9ydCB7IEJ1dHRvbkNvbXBvbmVudCwgUGxhdGZvcm0gfSBmcm9tIFwib2JzaWRpYW5cIjtcbiAgICBpbXBvcnQgdHlwZSBJbml0aWF0aXZlVHJhY2tlciBmcm9tIFwic3JjL21haW5cIjtcbiAgICBpbXBvcnQgeyB0cmFja2VyIH0gZnJvbSBcInNyYy90cmFja2VyL3N0b3Jlcy90cmFja2VyXCI7XG4gICAgaW1wb3J0IHsgQ3JlYXR1cmUgfSBmcm9tIFwic3JjL3V0aWxzL2NyZWF0dXJlXCI7XG4gICAgaW1wb3J0IHsgY3JlYXRlRXZlbnREaXNwYXRjaGVyIH0gZnJvbSBcInN2ZWx0ZVwiO1xuICAgIGltcG9ydCB7IHdyaXRhYmxlIH0gZnJvbSBcInN2ZWx0ZS9zdG9yZVwiO1xuICAgIGltcG9ydCBDcmVhdGUgZnJvbSBcIi4vQ3JlYXRlLnN2ZWx0ZVwiO1xuICAgIGltcG9ydCBMaXN0IGZyb20gXCIuL0xpc3Quc3ZlbHRlXCI7XG5cbiAgICBjb25zdCBkaXNwYXRjaCA9IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlcigpO1xuXG4gICAgZXhwb3J0IGxldCBwbHVnaW46IEluaXRpYXRpdmVUcmFja2VyO1xuICAgIGV4cG9ydCBsZXQgaXNFZGl0aW5nID0gZmFsc2U7XG4gICAgZXhwb3J0IGxldCBjcmVhdHVyZSA9IG51bGw7XG5cbiAgICBjb25zdCBhZGRpbmcgPSB3cml0YWJsZTxBcnJheTxbQ3JlYXR1cmUsIG51bWJlcl0+PihbXSk7XG4gICAgY29uc3QgZWRpdGluZyA9IHdyaXRhYmxlPENyZWF0dXJlPihjcmVhdHVyZSk7XG5cbiAgICBjb25zdCBjYW5jZWwgPSAobm9kZTogSFRNTEVsZW1lbnQpID0+IHtcbiAgICAgICAgbmV3IEJ1dHRvbkNvbXBvbmVudChub2RlKVxuICAgICAgICAgICAgLnNldEN0YSgpXG4gICAgICAgICAgICAuc2V0QnV0dG9uVGV4dChcIkNhbmNlbFwiKVxuICAgICAgICAgICAgLm9uQ2xpY2soKCkgPT4ge1xuICAgICAgICAgICAgICAgIGRpc3BhdGNoKFwiY2xvc2VcIik7XG4gICAgICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgY29uc3QgYWRkID0gKG5vZGU6IEhUTUxFbGVtZW50KSA9PiB7XG4gICAgICAgIG5ldyBCdXR0b25Db21wb25lbnQobm9kZSlcbiAgICAgICAgICAgIC5zZXRCdXR0b25UZXh0KFwiQWRkIHRvIEVuY291bnRlclwiKVxuICAgICAgICAgICAgLm9uQ2xpY2soKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghJGFkZGluZy5sZW5ndGgpIHJldHVybjtcbiAgICAgICAgICAgICAgICBjb25zdCBjcmVhdHVyZXMgPSAkYWRkaW5nLmZsYXRNYXAoKFtjcmVhdHVyZSwgYW1vdW50XSkgPT5cbiAgICAgICAgICAgICAgICAgICAgWy4uLkFycmF5KGFtb3VudCkua2V5cygpXS5tYXAoKGspID0+IENyZWF0dXJlLm5ldyhjcmVhdHVyZSkpXG4gICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgIHRyYWNrZXIuYWRkKC4uLmNyZWF0dXJlcyk7XG4gICAgICAgICAgICAgICAgZGlzcGF0Y2goXCJjbG9zZVwiKTtcbiAgICAgICAgICAgIH0pO1xuICAgIH07XG48L3NjcmlwdD5cblxuPGRpdlxuICAgIGNsYXNzPVwiaW5pdGlhdGl2ZS10cmFja2VyLWNyZWF0b3ItY29udGFpbmVyXCJcbiAgICBjbGFzczptb2JpbGU9e1BsYXRmb3JtLmlzTW9iaWxlQXBwfVxuPlxuICAgIDxkaXYgY2xhc3M9XCJpbml0aWF0aXZlLXRyYWNrZXItY3JlYXRvclwiPlxuICAgICAgICA8Q3JlYXRlIHtwbHVnaW59IHtlZGl0aW5nfSB7YWRkaW5nfSAvPlxuICAgICAgICB7I2lmICFpc0VkaXRpbmd9XG4gICAgICAgICAgICA8TGlzdCB7YWRkaW5nfSB7ZWRpdGluZ30gLz5cbiAgICAgICAgey9pZn1cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwiYnV0dG9uc1wiPlxuICAgICAgICA8ZGl2IHVzZTpjYW5jZWwgLz5cbiAgICAgICAgPGRpdiB1c2U6YWRkIGRpc2FibGVkPXshJGFkZGluZy5sZW5ndGh9IC8+XG4gICAgPC9kaXY+XG48L2Rpdj5cblxuPHN0eWxlIHNjb3BlZD5cbiAgICAuaW5pdGlhdGl2ZS10cmFja2VyLWNyZWF0b3Ige1xuICAgICAgICBtYXJnaW4tdG9wOiAxcmVtO1xuICAgICAgICBkaXNwbGF5OiBncmlkO1xuICAgICAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmciAxZnI7XG4gICAgICAgIGdhcDogMC41cmVtO1xuICAgIH1cbiAgICAuYnV0dG9ucyB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIG1hcmdpbi1sZWZ0OiBhdXRvO1xuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kO1xuICAgICAgICBnYXA6IDAuNXJlbTtcbiAgICB9XG5cbiAgICBkaXZbZGlzYWJsZWQ9XCJ0cnVlXCJdID4gOmdsb2JhbChidXR0b24pIHtcbiAgICAgICAgY3Vyc29yOiBub3QtYWxsb3dlZDtcbiAgICB9XG48L3N0eWxlPlxuIiwgIjxzY3JpcHQgbGFuZz1cInRzXCI+XG4gICAgaW1wb3J0IHtcbiAgICAgICAgRXh0cmFCdXR0b25Db21wb25lbnQsXG4gICAgICAgIEJ1dHRvbkNvbXBvbmVudCxcbiAgICAgICAgTm90aWNlLFxuICAgICAgICBUb2dnbGVDb21wb25lbnRcbiAgICB9IGZyb20gXCJvYnNpZGlhblwiO1xuXG4gICAgaW1wb3J0IHsgY3JlYXRlRXZlbnREaXNwYXRjaGVyLCBvbk1vdW50IH0gZnJvbSBcInN2ZWx0ZVwiO1xuXG4gICAgaW1wb3J0IHsgRElDRSB9IGZyb20gXCJzcmMvdXRpbHNcIjtcbiAgICBpbXBvcnQgeyBTUkRNb25zdGVyU3VnZ2VzdGlvbk1vZGFsIH0gZnJvbSBcInNyYy91dGlscy9zdWdnZXN0ZXJcIjtcbiAgICBpbXBvcnQgeyBDcmVhdHVyZSB9IGZyb20gXCJzcmMvdXRpbHMvY3JlYXR1cmVcIjtcbiAgICBpbXBvcnQgdHlwZSBJbml0aWF0aXZlVHJhY2tlciBmcm9tIFwic3JjL21haW5cIjtcbiAgICBpbXBvcnQgdHlwZSB7IFdyaXRhYmxlIH0gZnJvbSBcInN2ZWx0ZS9zdG9yZVwiO1xuICAgIGltcG9ydCB7IGVxdWl2YWxlbnQgfSBmcm9tIFwic3JjL2VuY291bnRlclwiO1xuICAgIGltcG9ydCB7IGNvbmZpcm1XaXRoTW9kYWwgfSBmcm9tIFwiLi9tb2RhbFwiO1xuXG4gICAgY29uc3QgZGlzcGF0Y2ggPSBjcmVhdGVFdmVudERpc3BhdGNoZXIoKTtcblxuICAgIGxldCBjcmVhdHVyZTogQ3JlYXR1cmUgPSBuZXcgQ3JlYXR1cmUoe30pO1xuICAgIGV4cG9ydCBsZXQgYW1vdW50ID0gMTtcbiAgICBleHBvcnQgbGV0IHBsdWdpbjogSW5pdGlhdGl2ZVRyYWNrZXI7XG4gICAgZXhwb3J0IGxldCBhZGRpbmc6IFdyaXRhYmxlPEFycmF5PFtDcmVhdHVyZSwgbnVtYmVyXT4+O1xuICAgIGV4cG9ydCBsZXQgZWRpdGluZzogV3JpdGFibGU8Q3JlYXR1cmU+O1xuXG4gICAgZWRpdGluZy5zdWJzY3JpYmUoKGMpID0+IHtcbiAgICAgICAgaWYgKCFjKSByZXR1cm47XG4gICAgICAgIGNyZWF0dXJlID0gYztcbiAgICB9KTtcblxuICAgIGNvbnN0IHNhdmVCdXR0b24gPSAobm9kZTogSFRNTEVsZW1lbnQpID0+IHtcbiAgICAgICAgbmV3IEV4dHJhQnV0dG9uQ29tcG9uZW50KG5vZGUpXG4gICAgICAgICAgICAuc2V0VG9vbHRpcChcIkFkZCBDcmVhdHVyZVwiKVxuICAgICAgICAgICAgLnNldEljb24oXCJwbHVzXCIpXG4gICAgICAgICAgICAub25DbGljayhhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCFjcmVhdHVyZSB8fCAhY3JlYXR1cmUubmFtZSB8fCAhY3JlYXR1cmUubmFtZT8ubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoXCJFbnRlciBhIG5hbWUhXCIpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghY3JlYXR1cmUubW9kaWZpZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgY3JlYXR1cmUubW9kaWZpZXIgPSAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgIGNyZWF0dXJlLmluaXRpYXRpdmUgPD0gMCB8fFxuICAgICAgICAgICAgICAgICAgICBjcmVhdHVyZS5pbml0aWF0aXZlID09IG51bGwgfHxcbiAgICAgICAgICAgICAgICAgICAgaXNOYU4oY3JlYXR1cmUuaW5pdGlhdGl2ZSlcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgY3JlYXR1cmUuaW5pdGlhdGl2ZSA9IGF3YWl0IHBsdWdpbi5nZXRJbml0aWF0aXZlVmFsdWUoXG4gICAgICAgICAgICAgICAgICAgICAgICBjcmVhdHVyZS5tb2RpZmllclxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGxldCBleGlzdGluZyA9ICRhZGRpbmcuZmluZEluZGV4KChba10pID0+XG4gICAgICAgICAgICAgICAgICAgIGVxdWl2YWxlbnQoaywgY3JlYXR1cmUpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBpZiAoZXhpc3RpbmcgPiAtMSkge1xuICAgICAgICAgICAgICAgICAgICAkYWRkaW5nW2V4aXN0aW5nXVsxXSArPSBhbW91bnQ7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgJGFkZGluZy5wdXNoKFtjcmVhdHVyZSwgYW1vdW50XSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICRhZGRpbmcgPSAkYWRkaW5nO1xuICAgICAgICAgICAgICAgICRlZGl0aW5nID0gbnVsbDtcbiAgICAgICAgICAgICAgICBjcmVhdHVyZSA9IG5ldyBDcmVhdHVyZSh7fSk7XG4gICAgICAgICAgICB9KTtcbiAgICB9O1xuICAgIGNvbnN0IGVkaXRCdXR0b24gPSAobm9kZTogSFRNTEVsZW1lbnQpID0+IHtcbiAgICAgICAgbmV3IEV4dHJhQnV0dG9uQ29tcG9uZW50KG5vZGUpXG4gICAgICAgICAgICAuc2V0VG9vbHRpcChcIkFkZCBDcmVhdHVyZVwiKVxuICAgICAgICAgICAgLnNldEljb24oXCJzYXZlXCIpXG4gICAgICAgICAgICAub25DbGljayhhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCFjcmVhdHVyZSB8fCAhY3JlYXR1cmUubmFtZSB8fCAhY3JlYXR1cmUubmFtZT8ubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoXCJFbnRlciBhIG5hbWUhXCIpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghY3JlYXR1cmUubW9kaWZpZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgY3JlYXR1cmUubW9kaWZpZXIgPSAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgIGNyZWF0dXJlLmluaXRpYXRpdmUgPD0gMCB8fFxuICAgICAgICAgICAgICAgICAgICBjcmVhdHVyZS5pbml0aWF0aXZlID09IG51bGwgfHxcbiAgICAgICAgICAgICAgICAgICAgaXNOYU4oY3JlYXR1cmUuaW5pdGlhdGl2ZSlcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgY3JlYXR1cmUuaW5pdGlhdGl2ZSA9IGF3YWl0IHBsdWdpbi5nZXRJbml0aWF0aXZlVmFsdWUoXG4gICAgICAgICAgICAgICAgICAgICAgICBjcmVhdHVyZS5tb2RpZmllclxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBsZXQgZXhpc3RpbmcgPSAkYWRkaW5nLmZpbmRJbmRleChcbiAgICAgICAgICAgICAgICAgICAgKFtrXSkgPT4gayAhPSBjcmVhdHVyZSAmJiBlcXVpdmFsZW50KGssIGNyZWF0dXJlKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICBleGlzdGluZyA+IC0xICYmXG4gICAgICAgICAgICAgICAgICAgIChhd2FpdCBjb25maXJtV2l0aE1vZGFsKFxuICAgICAgICAgICAgICAgICAgICAgICAgYXBwLFxuICAgICAgICAgICAgICAgICAgICAgICAgYFRoaXMgd2lsbCBtZXJnZSAke2NyZWF0dXJlLm5hbWV9IHdpdGggJHskYWRkaW5nW2V4aXN0aW5nXVswXS5uYW1lfS5gXG4gICAgICAgICAgICAgICAgICAgICkpXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gJGFkZGluZy5maW5kSW5kZXgoKFtrXSkgPT4gayA9PSBjcmVhdHVyZSk7XG4gICAgICAgICAgICAgICAgICAgICRhZGRpbmdbZXhpc3RpbmddWzFdICs9ICRhZGRpbmdbaW5kZXhdWzFdO1xuICAgICAgICAgICAgICAgICAgICAkYWRkaW5nLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICRhZGRpbmcgPSAkYWRkaW5nO1xuICAgICAgICAgICAgICAgICRlZGl0aW5nID0gbnVsbDtcbiAgICAgICAgICAgICAgICBjcmVhdHVyZSA9IG5ldyBDcmVhdHVyZSh7fSk7XG4gICAgICAgICAgICB9KTtcbiAgICB9O1xuICAgIGNvbnN0IGNhbmNlbEJ1dHRvbiA9IChub2RlOiBIVE1MRWxlbWVudCkgPT4ge1xuICAgICAgICBuZXcgRXh0cmFCdXR0b25Db21wb25lbnQobm9kZSlcbiAgICAgICAgICAgIC5zZXRUb29sdGlwKFwiQ2FuY2VsXCIpXG4gICAgICAgICAgICAuc2V0SWNvbihcInJlc2V0XCIpXG4gICAgICAgICAgICAub25DbGljaygoKSA9PiB7XG4gICAgICAgICAgICAgICAgY3JlYXR1cmUgPSBuZXcgQ3JlYXR1cmUoe30pO1xuICAgICAgICAgICAgfSk7XG4gICAgfTtcbiAgICBjb25zdCBkaWNlQnV0dG9uID0gKG5vZGU6IEhUTUxFbGVtZW50KSA9PiB7XG4gICAgICAgIG5ldyBFeHRyYUJ1dHRvbkNvbXBvbmVudChub2RlKVxuICAgICAgICAgICAgLnNldEljb24oRElDRSlcbiAgICAgICAgICAgIC5zZXRUb29sdGlwKFwiUm9sbCBJbml0aWF0aXZlXCIpXG4gICAgICAgICAgICAub25DbGljayhhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY3JlYXR1cmUuaW5pdGlhdGl2ZSA9IGF3YWl0IHBsdWdpbi5nZXRJbml0aWF0aXZlVmFsdWUoXG4gICAgICAgICAgICAgICAgICAgIGNyZWF0dXJlLm1vZGlmaWVyXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0pO1xuICAgIH07XG4gICAgbGV0IG5hbWVJbnB1dDogSFRNTElucHV0RWxlbWVudDtcbiAgICBsZXQgbW9kYWw6IFNSRE1vbnN0ZXJTdWdnZXN0aW9uTW9kYWw7XG4gICAgb25Nb3VudCgoKSA9PiB7XG4gICAgICAgIG1vZGFsID0gbmV3IFNSRE1vbnN0ZXJTdWdnZXN0aW9uTW9kYWwocGx1Z2luLCBuYW1lSW5wdXQpO1xuICAgICAgICBtb2RhbC5vbkNsb3NlID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgaWYgKG1vZGFsLmNyZWF0dXJlKSB7XG4gICAgICAgICAgICAgICAgY3JlYXR1cmUgPSBDcmVhdHVyZS5mcm9tKG1vZGFsLmNyZWF0dXJlKTtcblxuICAgICAgICAgICAgICAgIGNyZWF0dXJlLmluaXRpYXRpdmUgPSBhd2FpdCBwbHVnaW4uZ2V0SW5pdGlhdGl2ZVZhbHVlKFxuICAgICAgICAgICAgICAgICAgICBjcmVhdHVyZS5tb2RpZmllclxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfSk7XG4gICAgY29uc3QgaGlkZVRvZ2dsZSA9IChkaXY6IEhUTUxEaXZFbGVtZW50KSA9PiB7XG4gICAgICAgIG5ldyBUb2dnbGVDb21wb25lbnQoZGl2KVxuICAgICAgICAgICAgLnNldFZhbHVlKGNyZWF0dXJlLmhpZGRlbilcbiAgICAgICAgICAgIC5vbkNoYW5nZSgodikgPT4gKGNyZWF0dXJlLmhpZGRlbiA9IHYpKTtcbiAgICB9O1xuPC9zY3JpcHQ+XG5cbjxkaXYgY2xhc3M9XCJpbml0aWF0aXZlLXRyYWNrZXItZWRpdG9yXCI+XG4gICAgPGRpdiBjbGFzcz1cImNyZWF0ZS1uZXdcIj5cbiAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIDxsYWJlbCBmb3I9XCJhZGQtbmFtZVwiPkNyZWF0dXJlPC9sYWJlbD5cbiAgICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgICAgIGJpbmQ6dGhpcz17bmFtZUlucHV0fVxuICAgICAgICAgICAgICAgIGJpbmQ6dmFsdWU9e2NyZWF0dXJlLm5hbWV9XG4gICAgICAgICAgICAgICAgb246Zm9jdXM9e2Z1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgbW9kYWwub3BlbigpO1xuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgaWQ9XCJhZGQtbmFtZVwiXG4gICAgICAgICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgICAgICAgIG5hbWU9XCJuYW1lXCJcbiAgICAgICAgICAgICAgICB0YWJpbmRleD1cIjBcIlxuICAgICAgICAgICAgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgICA8bGFiZWwgZm9yPVwiYWRkLWRpc3BsYXlcIj5EaXNwbGF5IE5hbWU8L2xhYmVsPlxuICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICAgYmluZDp2YWx1ZT17Y3JlYXR1cmUuZGlzcGxheX1cbiAgICAgICAgICAgICAgICBpZD1cImFkZC1kaXNwbGF5XCJcbiAgICAgICAgICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgICAgICAgbmFtZT1cImRpc3BsYXlcIlxuICAgICAgICAgICAgICAgIHRhYmluZGV4PVwiMFwiXG4gICAgICAgICAgICAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIDxsYWJlbCBmb3I9XCJhZGQtaHBcIj5IUDwvbGFiZWw+XG4gICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgICBiaW5kOnZhbHVlPXtjcmVhdHVyZS5ocH1cbiAgICAgICAgICAgICAgICBpZD1cImFkZC1ocFwiXG4gICAgICAgICAgICAgICAgdHlwZT1cIm51bWJlclwiXG4gICAgICAgICAgICAgICAgbmFtZT1cImhwXCJcbiAgICAgICAgICAgICAgICB0YWJpbmRleD1cIjBcIlxuICAgICAgICAgICAgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgICA8bGFiZWwgZm9yPVwiYWRkLWFjXCI+QUM8L2xhYmVsPlxuICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICAgYmluZDp2YWx1ZT17Y3JlYXR1cmUuYWN9XG4gICAgICAgICAgICAgICAgaWQ9XCJhZGQtYWNcIlxuICAgICAgICAgICAgICAgIHR5cGU9XCJudW1iZXJcIlxuICAgICAgICAgICAgICAgIG5hbWU9XCJhY1wiXG4gICAgICAgICAgICAgICAgdGFiaW5kZXg9XCIwXCJcbiAgICAgICAgICAgIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgPGxhYmVsIGZvcj1cImFkZC1tb2RcIj5Nb2RpZmllcjwvbGFiZWw+XG4gICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgICBiaW5kOnZhbHVlPXtjcmVhdHVyZS5tb2RpZmllcn1cbiAgICAgICAgICAgICAgICBpZD1cImFkZC1tb2RcIlxuICAgICAgICAgICAgICAgIHR5cGU9XCJudW1iZXJcIlxuICAgICAgICAgICAgICAgIG5hbWU9XCJhY1wiXG4gICAgICAgICAgICAgICAgdGFiaW5kZXg9XCIwXCJcbiAgICAgICAgICAgIC8+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxkaXYgY2xhc3M9XCJpbml0aWF0aXZlXCI+XG4gICAgICAgICAgICA8bGFiZWwgZm9yPVwiYWRkLWluaXRcIj5Jbml0aWF0aXZlPC9sYWJlbD5cbiAgICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgICAgIGJpbmQ6dmFsdWU9e2NyZWF0dXJlLmluaXRpYXRpdmV9XG4gICAgICAgICAgICAgICAgaWQ9XCJhZGQtaW5pdFwiXG4gICAgICAgICAgICAgICAgdHlwZT1cIm51bWJlclwiXG4gICAgICAgICAgICAgICAgbmFtZT1cImluaXRpYXRpdmVcIlxuICAgICAgICAgICAgICAgIHRhYmluZGV4PVwiMFwiXG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImRpY2VcIiB1c2U6ZGljZUJ1dHRvbiAvPlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgPGxhYmVsIGZvcj1cImFkZC1tb2RcIj5IaWRkZW48L2xhYmVsPlxuICAgICAgICAgICAgPGRpdiB1c2U6aGlkZVRvZ2dsZSAvPlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8ZGl2IGNsYXNzPVwiYW1vdW50XCI+XG4gICAgICAgICAgICA8bGFiZWwgZm9yPVwiYWRkLWluaXRcIj5BbW91bnQ8L2xhYmVsPlxuICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICAgYmluZDp2YWx1ZT17YW1vdW50fVxuICAgICAgICAgICAgICAgIGlkPVwiYWRkLWluaXRcIlxuICAgICAgICAgICAgICAgIHR5cGU9XCJudW1iZXJcIlxuICAgICAgICAgICAgICAgIG5hbWU9XCJpbml0aWF0aXZlXCJcbiAgICAgICAgICAgICAgICB0YWJpbmRleD1cIjBcIlxuICAgICAgICAgICAgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cImNvbnRleHQtYnV0dG9uc1wiPlxuICAgICAgICA8ZGl2IHVzZTpjYW5jZWxCdXR0b24gY2xhc3M9XCJhZGQtYnV0dG9uIGNhbmNlbC1idXR0b25cIiAvPlxuICAgICAgICB7I2lmICRlZGl0aW5nfVxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImFkZC1idXR0b25cIiB1c2U6ZWRpdEJ1dHRvbiAvPlxuICAgICAgICB7OmVsc2V9XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYWRkLWJ1dHRvblwiIHVzZTpzYXZlQnV0dG9uIC8+XG4gICAgICAgIHsvaWZ9XG4gICAgPC9kaXY+XG48L2Rpdj5cblxuPHN0eWxlPlxuICAgIC5jcmVhdGUtbmV3ID4gKiB7XG4gICAgICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMzMlIDY2JTtcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogMC41cmVtO1xuICAgIH1cbiAgICAuY29udGV4dC1idXR0b25zIHtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgZ3JpZC1nYXA6IDAuMTI1cmVtO1xuICAgIH1cbiAgICAuY2FuY2VsLWJ1dHRvbiB7XG4gICAgICAgIGNvbG9yOiB2YXIoLS10ZXh0LWZhaW50KTtcbiAgICB9XG5cbiAgICAuaW5pdGlhdGl2ZSB7XG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICB9XG4gICAgLmluaXRpYXRpdmUgPiAuZGljZSB7XG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgcmlnaHQ6IDAuMjVyZW07XG4gICAgICAgIHRvcDogNTAlO1xuICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTUwJSk7XG4gICAgfVxuPC9zdHlsZT5cbiIsICI8c2NyaXB0IGxhbmc9XCJ0c1wiPlxuICAgIGltcG9ydCB7IEV4dHJhQnV0dG9uQ29tcG9uZW50LCBzZXRJY29uIH0gZnJvbSBcIm9ic2lkaWFuXCI7XG4gICAgaW1wb3J0IHsgQUMsIEhJRERFTiwgSFAsIElOSVRJQVRJVkUgfSBmcm9tIFwic3JjL3V0aWxzXCI7XG4gICAgaW1wb3J0IHR5cGUgeyBDcmVhdHVyZSB9IGZyb20gXCJzcmMvdXRpbHMvY3JlYXR1cmVcIjtcbiAgICBpbXBvcnQgdHlwZSB7IFdyaXRhYmxlIH0gZnJvbSBcInN2ZWx0ZS9zdG9yZVwiO1xuXG4gICAgZXhwb3J0IGxldCBhZGRpbmc6IFdyaXRhYmxlPEFycmF5PFtDcmVhdHVyZSwgbnVtYmVyXT4+O1xuICAgIGV4cG9ydCBsZXQgZWRpdGluZzogV3JpdGFibGU8Q3JlYXR1cmU+O1xuXG4gICAgY29uc3QgbWludXNJY29uID0gKG5vZGU6IEhUTUxFbGVtZW50LCBjcmVhdHVyZTogQ3JlYXR1cmUpID0+IHtcbiAgICAgICAgbmV3IEV4dHJhQnV0dG9uQ29tcG9uZW50KG5vZGUpLnNldEljb24oXCJtaW51c1wiKTtcbiAgICB9O1xuICAgIGNvbnN0IG1pbnVzID0gKGV2dDogTW91c2VFdmVudCwgaW5kZXg6IG51bWJlcikgPT4ge1xuICAgICAgICBpZiAoJGFkZGluZ1tpbmRleF1bMV0gLSAxIDwgMSkge1xuICAgICAgICAgICAgZGVsKGV2dCwgaW5kZXgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgICRhZGRpbmdbaW5kZXhdWzFdIC09IDE7XG4gICAgICAgICRhZGRpbmcgPSAkYWRkaW5nO1xuICAgIH07XG4gICAgY29uc3QgcGx1c0ljb24gPSAobm9kZTogSFRNTEVsZW1lbnQsIGNyZWF0dXJlOiBDcmVhdHVyZSkgPT4ge1xuICAgICAgICBuZXcgRXh0cmFCdXR0b25Db21wb25lbnQobm9kZSkuc2V0SWNvbihcInBsdXNcIik7XG4gICAgfTtcbiAgICBjb25zdCBhZGQgPSAoZXZ0OiBNb3VzZUV2ZW50LCBpbmRleDogbnVtYmVyKSA9PiB7XG4gICAgICAgICRhZGRpbmdbaW5kZXhdWzFdICs9IDE7XG4gICAgICAgICRhZGRpbmcgPSAkYWRkaW5nO1xuICAgIH07XG4gICAgY29uc3QgZGVsSWNvbiA9IChub2RlOiBIVE1MRWxlbWVudCwgY3JlYXR1cmU6IENyZWF0dXJlKSA9PiB7XG4gICAgICAgIG5ldyBFeHRyYUJ1dHRvbkNvbXBvbmVudChub2RlKS5zZXRJY29uKFwidHJhc2hcIik7XG4gICAgfTtcbiAgICBjb25zdCBkZWwgPSAoZXZ0OiBNb3VzZUV2ZW50LCBpbmRleDogbnVtYmVyKSA9PiB7XG4gICAgICAgICRhZGRpbmcuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgJGFkZGluZyA9ICRhZGRpbmc7XG4gICAgfTtcbiAgICBjb25zdCBoZWFydCA9IChub2RlOiBIVE1MRWxlbWVudCkgPT4ge1xuICAgICAgICBzZXRJY29uKG5vZGUsIEhQKTtcbiAgICB9O1xuICAgIGNvbnN0IGFjID0gKG5vZGU6IEhUTUxFbGVtZW50KSA9PiB7XG4gICAgICAgIHNldEljb24obm9kZSwgQUMpO1xuICAgIH07XG4gICAgY29uc3QgaW5pdCA9IChub2RlOiBIVE1MRWxlbWVudCkgPT4ge1xuICAgICAgICBzZXRJY29uKG5vZGUsIElOSVRJQVRJVkUpO1xuICAgIH07XG4gICAgY29uc3QgaGlkZGVuID0gKG5vZGU6IEhUTUxFbGVtZW50KSA9PiB7XG4gICAgICAgIHNldEljb24obm9kZSwgSElEREVOKTtcbiAgICB9O1xuPC9zY3JpcHQ+XG5cbjxkaXYgY2xhc3M9XCJpbml0aWF0aXZlLXRyYWNrZXItbGlzdFwiPlxuICAgIHsjaWYgJGFkZGluZy5sZW5ndGh9XG4gICAgICAgIHsjZWFjaCAkYWRkaW5nIGFzIFtjcmVhdHVyZSwgbnVtYmVyXSwgaW5kZXh9XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY3JlYXR1cmVcIiBvbjpjbGljaz17KCkgPT4gKCRlZGl0aW5nID0gY3JlYXR1cmUpfT5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY3JlYXR1cmUtbWV0YWRhdGFcIj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNyZWF0dXJlLW5hbWVcIj57Y3JlYXR1cmUuZ2V0TmFtZSgpfTwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY3JlYXR1cmUtYW1vdW50XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9XCJjcmVhdHVyZS1taW51c1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlOm1pbnVzSWNvbj17Y3JlYXR1cmV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb246Y2xpY2t8c3RvcFByb3BhZ2F0aW9uPXsoZXZ0KSA9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW51cyhldnQsIGluZGV4KX1cbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY3JlYXR1cmUtbnVtYmVyXCI+e251bWJlcn08L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz1cImNyZWF0dXJlLW1pbnVzXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2U6cGx1c0ljb249e2NyZWF0dXJlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uOmNsaWNrfHN0b3BQcm9wYWdhdGlvbj17KGV2dCkgPT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkKGV2dCwgaW5kZXgpfVxuICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz1cImNyZWF0dXJlLWRlbGV0ZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXNlOmRlbEljb249e2NyZWF0dXJlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uOmNsaWNrfHN0b3BQcm9wYWdhdGlvbj17KGV2dCkgPT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsKGV2dCwgaW5kZXgpfVxuICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPHNtYWxsIGNsYXNzPVwiY3JlYXR1cmUtZGF0YVwiPlxuICAgICAgICAgICAgICAgICAgICA8c3Bhbj57Y3JlYXR1cmUuaHB9IDxzcGFuIHVzZTpoZWFydCAvPjwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgPHNwYW4+e2NyZWF0dXJlLmFjfSA8c3BhbiB1c2U6YWMgLz48L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgIDxzcGFuPntjcmVhdHVyZS5pbml0aWF0aXZlfSA8c3BhbiB1c2U6aW5pdCAvPjwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgeyNpZiBjcmVhdHVyZS5oaWRkZW59XG4gICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB1c2U6aGlkZGVuIC8+XG4gICAgICAgICAgICAgICAgICAgIHsvaWZ9XG4gICAgICAgICAgICAgICAgPC9zbWFsbD5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICB7L2VhY2h9XG4gICAgezplbHNlfVxuICAgICAgICA8c3Bhbj5BZGQgYSBjcmVhdHVyZS48L3NwYW4+XG4gICAgey9pZn1cbjwvZGl2PlxuXG48c3R5bGUgc2NvcGVkPlxuICAgIC5pbml0aWF0aXZlLXRyYWNrZXItbGlzdCB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGZsZXgtZmxvdzogY29sdW1uIG5vd3JhcDtcbiAgICAgICAgZ2FwOiAwLjVyZW07XG4gICAgfVxuXG4gICAgLmNyZWF0dXJlIHtcbiAgICAgICAgYm9yZGVyLXJhZGl1czogMC41cmVtO1xuICAgICAgICBwYWRkaW5nOiAwLjVyZW07XG4gICAgfVxuICAgIC5jcmVhdHVyZTpob3ZlciB7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWJhY2tncm91bmQtc2Vjb25kYXJ5KTtcbiAgICB9XG5cbiAgICAuY3JlYXR1cmUtbWV0YWRhdGEge1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICBnYXA6IDAuNXJlbTtcbiAgICB9XG4gICAgLmNyZWF0dXJlLWFtb3VudCB7XG4gICAgICAgIG1hcmdpbi1sZWZ0OiBhdXRvO1xuICAgICAgICBkaXNwbGF5OiBncmlkO1xuICAgICAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmciAxZnIgMWZyIDFmcjtcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIH1cbiAgICAuY3JlYXR1cmUtZGF0YSB7XG4gICAgICAgIC0taWNvbi1zaXplOiAxMHB4O1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICBnYXA6IDAuMzc1cmVtO1xuICAgIH1cbjwvc3R5bGU+XG4iLCAiPHNjcmlwdCBsYW5nPVwidHNcIj5cbiAgICBpbXBvcnQge1xuICAgICAgICBFeHRyYUJ1dHRvbkNvbXBvbmVudCxcbiAgICAgICAgQnV0dG9uQ29tcG9uZW50LFxuICAgICAgICBOb3RpY2UsXG4gICAgICAgIFRvZ2dsZUNvbXBvbmVudFxuICAgIH0gZnJvbSBcIm9ic2lkaWFuXCI7XG5cbiAgICBpbXBvcnQgeyBjcmVhdGVFdmVudERpc3BhdGNoZXIsIG9uRGVzdHJveSwgb25Nb3VudCB9IGZyb20gXCJzdmVsdGVcIjtcblxuICAgIGltcG9ydCB7IERJQ0UgfSBmcm9tIFwic3JjL3V0aWxzXCI7XG4gICAgaW1wb3J0IHsgU1JETW9uc3RlclN1Z2dlc3Rpb25Nb2RhbCB9IGZyb20gXCJzcmMvdXRpbHMvc3VnZ2VzdGVyXCI7XG4gICAgaW1wb3J0IHsgQ3JlYXR1cmUgfSBmcm9tIFwic3JjL3V0aWxzL2NyZWF0dXJlXCI7XG4gICAgaW1wb3J0IHR5cGUgSW5pdGlhdGl2ZVRyYWNrZXIgZnJvbSBcInNyYy9tYWluXCI7XG5cbiAgICBpbXBvcnQgeyB0cmFja2VyIH0gZnJvbSBcInNyYy90cmFja2VyL3N0b3Jlcy90cmFja2VyXCI7XG5cbiAgICBjb25zdCBkaXNwYXRjaCA9IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlcigpO1xuXG4gICAgZXhwb3J0IGxldCBjcmVhdHVyZTogQ3JlYXR1cmUgPSBuZXcgQ3JlYXR1cmUoe30pO1xuICAgIGV4cG9ydCBsZXQgYW1vdW50ID0gMTtcbiAgICBleHBvcnQgbGV0IHBsdWdpbjogSW5pdGlhdGl2ZVRyYWNrZXI7XG5cbiAgICBjb25zdCBhZGQgPSBhc3luYyAoY2xvc2UgPSB0cnVlKSA9PiB7XG4gICAgICAgIGlmICghY3JlYXR1cmUgfHwgIWNyZWF0dXJlLm5hbWUgfHwgIWNyZWF0dXJlLm5hbWU/Lmxlbmd0aCkge1xuICAgICAgICAgICAgbmV3IE5vdGljZShcIkVudGVyIGEgbmFtZSFcIik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFjcmVhdHVyZS5tb2RpZmllcikge1xuICAgICAgICAgICAgY3JlYXR1cmUubW9kaWZpZXIgPSAwO1xuICAgICAgICB9XG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIGNyZWF0dXJlLmluaXRpYXRpdmUgPD0gMCB8fFxuICAgICAgICAgICAgY3JlYXR1cmUuaW5pdGlhdGl2ZSA9PSBudWxsIHx8XG4gICAgICAgICAgICBpc05hTihjcmVhdHVyZS5pbml0aWF0aXZlKVxuICAgICAgICApIHtcbiAgICAgICAgICAgIGNyZWF0dXJlLmluaXRpYXRpdmUgPSBhd2FpdCBwbHVnaW4uZ2V0SW5pdGlhdGl2ZVZhbHVlKFxuICAgICAgICAgICAgICAgIGNyZWF0dXJlLm1vZGlmaWVyXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHRyYWNrZXIuYWRkKFxuICAgICAgICAgICAgLi4uWy4uLkFycmF5KGFtb3VudCkua2V5cygpXS5tYXAoKGspID0+IENyZWF0dXJlLm5ldyhjcmVhdHVyZSkpXG4gICAgICAgICk7XG4gICAgICAgIGNyZWF0dXJlID0gbmV3IENyZWF0dXJlKHt9KTtcbiAgICAgICAgaWYgKGNsb3NlKSBkaXNwYXRjaChcImNsb3NlXCIpO1xuICAgIH07XG5cbiAgICBjb25zdCBhZGRCdXR0b24gPSAobm9kZTogSFRNTEVsZW1lbnQpID0+IHtcbiAgICAgICAgbmV3IEV4dHJhQnV0dG9uQ29tcG9uZW50KG5vZGUpXG4gICAgICAgICAgICAuc2V0VG9vbHRpcChcIkFkZCBDcmVhdHVyZVwiKVxuICAgICAgICAgICAgLnNldEljb24oXCJjaGVja1wiKTtcbiAgICB9O1xuICAgIGNvbnN0IGVkaXRCdXR0b24gPSAobm9kZTogSFRNTEVsZW1lbnQpID0+IHtcbiAgICAgICAgbmV3IEV4dHJhQnV0dG9uQ29tcG9uZW50KG5vZGUpXG4gICAgICAgICAgICAuc2V0VG9vbHRpcChcIkFkZCBhbmQgQ2xvc2VcIilcbiAgICAgICAgICAgIC5zZXRJY29uKFwiY2hlY2stY2lyY2xlXCIpO1xuICAgIH07XG4gICAgY29uc3QgY2FuY2VsQnV0dG9uID0gKG5vZGU6IEhUTUxFbGVtZW50KSA9PiB7XG4gICAgICAgIG5ldyBFeHRyYUJ1dHRvbkNvbXBvbmVudChub2RlKS5zZXRUb29sdGlwKFwiQ2FuY2VsXCIpLnNldEljb24oXCJjcm9zc1wiKTtcbiAgICB9O1xuICAgIGNvbnN0IGRpY2VCdXR0b24gPSAobm9kZTogSFRNTEVsZW1lbnQpID0+IHtcbiAgICAgICAgbmV3IEV4dHJhQnV0dG9uQ29tcG9uZW50KG5vZGUpXG4gICAgICAgICAgICAuc2V0SWNvbihESUNFKVxuICAgICAgICAgICAgLnNldFRvb2x0aXAoXCJSb2xsIEluaXRpYXRpdmVcIilcbiAgICAgICAgICAgIC5vbkNsaWNrKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICBjcmVhdHVyZS5pbml0aWF0aXZlID0gYXdhaXQgcGx1Z2luLmdldEluaXRpYXRpdmVWYWx1ZShcbiAgICAgICAgICAgICAgICAgICAgY3JlYXR1cmUubW9kaWZpZXJcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSk7XG4gICAgfTtcbiAgICBsZXQgbmFtZUlucHV0OiBIVE1MSW5wdXRFbGVtZW50O1xuICAgIGxldCBtb2RhbDogU1JETW9uc3RlclN1Z2dlc3Rpb25Nb2RhbDtcbiAgICBvbk1vdW50KCgpID0+IHtcbiAgICAgICAgbW9kYWwgPSBuZXcgU1JETW9uc3RlclN1Z2dlc3Rpb25Nb2RhbChwbHVnaW4sIG5hbWVJbnB1dCk7XG4gICAgICAgIG1vZGFsLm9uQ2xvc2UgPSBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBpZiAobW9kYWwuY3JlYXR1cmUpIHtcbiAgICAgICAgICAgICAgICBjcmVhdHVyZSA9IENyZWF0dXJlLmZyb20obW9kYWwuY3JlYXR1cmUpO1xuXG4gICAgICAgICAgICAgICAgY3JlYXR1cmUuaW5pdGlhdGl2ZSA9IGF3YWl0IHBsdWdpbi5nZXRJbml0aWF0aXZlVmFsdWUoXG4gICAgICAgICAgICAgICAgICAgIGNyZWF0dXJlLm1vZGlmaWVyXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9KTtcbiAgICBjb25zdCBoaWRlVG9nZ2xlID0gKGRpdjogSFRNTERpdkVsZW1lbnQpID0+IHtcbiAgICAgICAgbmV3IFRvZ2dsZUNvbXBvbmVudChkaXYpXG4gICAgICAgICAgICAuc2V0VmFsdWUoY3JlYXR1cmUuaGlkZGVuKVxuICAgICAgICAgICAgLm9uQ2hhbmdlKCh2KSA9PiAoY3JlYXR1cmUuaGlkZGVuID0gdikpO1xuICAgIH07XG4gICAgb25EZXN0cm95KCgpID0+IG1vZGFsLmNsb3NlKCkpO1xuPC9zY3JpcHQ+XG5cbjxkaXYgY2xhc3M9XCJpbml0aWF0aXZlLXRyYWNrZXItZWRpdG9yXCI+XG4gICAgPGRpdiBjbGFzcz1cImNyZWF0ZS1uZXdcIj5cbiAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIDxsYWJlbCBmb3I9XCJhZGQtbmFtZVwiPkNyZWF0dXJlPC9sYWJlbD5cbiAgICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgICAgIGJpbmQ6dGhpcz17bmFtZUlucHV0fVxuICAgICAgICAgICAgICAgIGJpbmQ6dmFsdWU9e2NyZWF0dXJlLm5hbWV9XG4gICAgICAgICAgICAgICAgb246Zm9jdXM9e2Z1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgbW9kYWwub3BlbigpO1xuICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgaWQ9XCJhZGQtbmFtZVwiXG4gICAgICAgICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgICAgICAgIG5hbWU9XCJuYW1lXCJcbiAgICAgICAgICAgICAgICB0YWJpbmRleD1cIjBcIlxuICAgICAgICAgICAgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgICA8bGFiZWwgZm9yPVwiYWRkLWRpc3BsYXlcIj5EaXNwbGF5IE5hbWU8L2xhYmVsPlxuICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICAgYmluZDp2YWx1ZT17Y3JlYXR1cmUuZGlzcGxheX1cbiAgICAgICAgICAgICAgICBpZD1cImFkZC1kaXNwbGF5XCJcbiAgICAgICAgICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgICAgICAgbmFtZT1cImRpc3BsYXlcIlxuICAgICAgICAgICAgICAgIHRhYmluZGV4PVwiMFwiXG4gICAgICAgICAgICAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIDxsYWJlbCBmb3I9XCJhZGQtaHBcIj5IUDwvbGFiZWw+XG4gICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgICBiaW5kOnZhbHVlPXtjcmVhdHVyZS5ocH1cbiAgICAgICAgICAgICAgICBpZD1cImFkZC1ocFwiXG4gICAgICAgICAgICAgICAgdHlwZT1cIm51bWJlclwiXG4gICAgICAgICAgICAgICAgbmFtZT1cImhwXCJcbiAgICAgICAgICAgICAgICB0YWJpbmRleD1cIjBcIlxuICAgICAgICAgICAgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgICA8bGFiZWwgZm9yPVwiYWRkLWFjXCI+QUM8L2xhYmVsPlxuICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICAgYmluZDp2YWx1ZT17Y3JlYXR1cmUuYWN9XG4gICAgICAgICAgICAgICAgaWQ9XCJhZGQtYWNcIlxuICAgICAgICAgICAgICAgIHR5cGU9XCJudW1iZXJcIlxuICAgICAgICAgICAgICAgIG5hbWU9XCJhY1wiXG4gICAgICAgICAgICAgICAgdGFiaW5kZXg9XCIwXCJcbiAgICAgICAgICAgIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgPGxhYmVsIGZvcj1cImFkZC1tb2RcIj5Nb2RpZmllcjwvbGFiZWw+XG4gICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgICBiaW5kOnZhbHVlPXtjcmVhdHVyZS5tb2RpZmllcn1cbiAgICAgICAgICAgICAgICBpZD1cImFkZC1tb2RcIlxuICAgICAgICAgICAgICAgIHR5cGU9XCJudW1iZXJcIlxuICAgICAgICAgICAgICAgIG5hbWU9XCJhY1wiXG4gICAgICAgICAgICAgICAgdGFiaW5kZXg9XCIwXCJcbiAgICAgICAgICAgIC8+XG4gICAgICAgIDwvZGl2PlxuXG4gICAgICAgIDxkaXYgY2xhc3M9XCJpbml0aWF0aXZlXCI+XG4gICAgICAgICAgICA8bGFiZWwgZm9yPVwiYWRkLWluaXRcIj5Jbml0aWF0aXZlPC9sYWJlbD5cbiAgICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgICAgIGJpbmQ6dmFsdWU9e2NyZWF0dXJlLmluaXRpYXRpdmV9XG4gICAgICAgICAgICAgICAgaWQ9XCJhZGQtaW5pdFwiXG4gICAgICAgICAgICAgICAgdHlwZT1cIm51bWJlclwiXG4gICAgICAgICAgICAgICAgbmFtZT1cImluaXRpYXRpdmVcIlxuICAgICAgICAgICAgICAgIHRhYmluZGV4PVwiMFwiXG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImRpY2VcIiB1c2U6ZGljZUJ1dHRvbiAvPlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgPGxhYmVsIGZvcj1cImFkZC1tb2RcIj5IaWRkZW48L2xhYmVsPlxuICAgICAgICAgICAgPGRpdiB1c2U6aGlkZVRvZ2dsZSAvPlxuICAgICAgICA8L2Rpdj5cblxuICAgICAgICA8ZGl2IGNsYXNzPVwiYW1vdW50XCI+XG4gICAgICAgICAgICA8bGFiZWwgZm9yPVwiYWRkLWluaXRcIj5BbW91bnQ8L2xhYmVsPlxuICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICAgYmluZDp2YWx1ZT17YW1vdW50fVxuICAgICAgICAgICAgICAgIGlkPVwiYWRkLWluaXRcIlxuICAgICAgICAgICAgICAgIHR5cGU9XCJudW1iZXJcIlxuICAgICAgICAgICAgICAgIG5hbWU9XCJpbml0aWF0aXZlXCJcbiAgICAgICAgICAgICAgICB0YWJpbmRleD1cIjBcIlxuICAgICAgICAgICAgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cImNvbnRleHQtYnV0dG9uc1wiPlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgICB1c2U6Y2FuY2VsQnV0dG9uXG4gICAgICAgICAgICBjbGFzcz1cImFkZC1idXR0b24gY2FuY2VsLWJ1dHRvblwiXG4gICAgICAgICAgICBvbjpjbGljaz17KCkgPT4gZGlzcGF0Y2goXCJjbG9zZVwiKX1cbiAgICAgICAgLz5cbiAgICAgICAgPGRpdiBjbGFzcz1cImFkZC1idXR0b25cIiB1c2U6ZWRpdEJ1dHRvbiBvbjpjbGljaz17KCkgPT4gYWRkKCl9IC8+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJhZGQtYnV0dG9uXCIgdXNlOmFkZEJ1dHRvbiBvbjpjbGljaz17KCkgPT4gYWRkKGZhbHNlKX0gLz5cbiAgICA8L2Rpdj5cbjwvZGl2PlxuXG48c3R5bGU+XG4gICAgLmNyZWF0ZS1uZXcgPiAqIHtcbiAgICAgICAgZGlzcGxheTogZ3JpZDtcbiAgICAgICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAzMyUgNjYlO1xuICAgICAgICBtYXJnaW4tYm90dG9tOiAwLjVyZW07XG4gICAgfVxuICAgIC5jb250ZXh0LWJ1dHRvbnMge1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kO1xuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICBncmlkLWdhcDogMC4xMjVyZW07XG4gICAgfVxuICAgIC5jYW5jZWwtYnV0dG9uIHtcbiAgICAgICAgY29sb3I6IHZhcigtLXRleHQtZmFpbnQpO1xuICAgIH1cblxuICAgIC5pbml0aWF0aXZlIHtcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIH1cbiAgICAuaW5pdGlhdGl2ZSA+IC5kaWNlIHtcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICByaWdodDogMC4yNXJlbTtcbiAgICAgICAgdG9wOiA1MCU7XG4gICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNTAlKTtcbiAgICB9XG48L3N0eWxlPlxuIiwgImltcG9ydCB0eXBlIHsgRXhwZXJpZW5jZVRocmVzaG9sZCB9IGZyb20gXCJAdHlwZXNcIjtcbmltcG9ydCB7IEl0ZW1WaWV3LCBXb3Jrc3BhY2VMZWFmIH0gZnJvbSBcIm9ic2lkaWFuXCI7XG5pbXBvcnQgdHlwZSBJbml0aWF0aXZlVHJhY2tlciBmcm9tIFwic3JjL21haW5cIjtcbmltcG9ydCB7IEJVSUxERVJfVklFVyB9IGZyb20gXCIuLi91dGlsc1wiO1xuXG5pbXBvcnQgQnVpbGRlciBmcm9tIFwiLi92aWV3L0J1aWxkZXIuc3ZlbHRlXCI7XG5cbmludGVyZmFjZSBCdWlsZGVyQ29udGV4dCB7XG4gICAgcGx1Z2luOiBJbml0aWF0aXZlVHJhY2tlcjtcbiAgICBwbGF5ZXJDb3VudDogbnVtYmVyO1xuICAgIHRocmVzaG9sZHM6IEV4cGVyaWVuY2VUaHJlc2hvbGQ7XG59XG5kZWNsYXJlIG1vZHVsZSBcInN2ZWx0ZVwiIHtcbiAgICBmdW5jdGlvbiBzZXRDb250ZXh0PFQgZXh0ZW5kcyBrZXlvZiBCdWlsZGVyQ29udGV4dD4oXG4gICAgICAgIGtleTogVCxcbiAgICAgICAgY29udGV4dDogQnVpbGRlckNvbnRleHRbVF1cbiAgICApOiBCdWlsZGVyQ29udGV4dFtUXTtcbiAgICBmdW5jdGlvbiBnZXRDb250ZXh0PFQgZXh0ZW5kcyBrZXlvZiBCdWlsZGVyQ29udGV4dD4oXG4gICAgICAgIGtleTogVFxuICAgICk6IEJ1aWxkZXJDb250ZXh0W1RdO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCdWlsZGVyVmlldyBleHRlbmRzIEl0ZW1WaWV3IHtcbiAgICBjb25zdHJ1Y3RvcihsZWFmOiBXb3Jrc3BhY2VMZWFmLCBwdWJsaWMgcGx1Z2luOiBJbml0aWF0aXZlVHJhY2tlcikge1xuICAgICAgICBzdXBlcihsZWFmKTtcbiAgICB9XG4gICAgdWk6IEJ1aWxkZXI7XG4gICAgYXN5bmMgb25PcGVuKCkge1xuICAgICAgICB0aGlzLnVpID0gbmV3IEJ1aWxkZXIoe1xuICAgICAgICAgICAgdGFyZ2V0OiB0aGlzLmNvbnRlbnRFbCxcbiAgICAgICAgICAgIHByb3BzOiB7XG4gICAgICAgICAgICAgICAgcGx1Z2luOiB0aGlzLnBsdWdpblxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgYXN5bmMgb25DbG9zZSgpIHtcbiAgICAgICAgdGhpcy51aS4kZGVzdHJveSgpO1xuICAgIH1cbiAgICBnZXREaXNwbGF5VGV4dCgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gXCJFbmNvdW50ZXIgQnVpbGRlclwiO1xuICAgIH1cbiAgICBnZXRJY29uKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBCVUlMREVSX1ZJRVc7XG4gICAgfVxuICAgIGdldFZpZXdUeXBlKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBCVUlMREVSX1ZJRVc7XG4gICAgfVxufVxuIiwgImV4cG9ydCBjb25zdCBFWFBFUklFTkNFX1BFUl9MRVZFTDoge1xuICAgIFtrZXk6IG51bWJlcl06IHtcbiAgICAgICAgZGFpbHk6IG51bWJlcjtcbiAgICAgICAgZWFzeTogbnVtYmVyO1xuICAgICAgICBtZWRpdW06IG51bWJlcjtcbiAgICAgICAgaGFyZDogbnVtYmVyO1xuICAgICAgICBkZWFkbHk6IG51bWJlcjtcbiAgICB9O1xufSA9IHtcbiAgICAxOiB7IGRhaWx5OiAzMDAsIGVhc3k6IDI1LCBtZWRpdW06IDUwLCBoYXJkOiA3NSwgZGVhZGx5OiAxMDAgfSxcbiAgICAyOiB7IGRhaWx5OiA2MDAsIGVhc3k6IDUwLCBtZWRpdW06IDEwMCwgaGFyZDogMTUwLCBkZWFkbHk6IDIwMCB9LFxuICAgIDM6IHsgZGFpbHk6IDEyMDAsIGVhc3k6IDc1LCBtZWRpdW06IDE1MCwgaGFyZDogMjI1LCBkZWFkbHk6IDQwMCB9LFxuICAgIDQ6IHsgZGFpbHk6IDE3MDAsIGVhc3k6IDEyNSwgbWVkaXVtOiAyNTAsIGhhcmQ6IDM3NSwgZGVhZGx5OiA1MDAgfSxcbiAgICA1OiB7IGRhaWx5OiAzNTAwLCBlYXN5OiAyNTAsIG1lZGl1bTogNTAwLCBoYXJkOiA3NTAsIGRlYWRseTogMTEwMCB9LFxuICAgIDY6IHsgZGFpbHk6IDQwMDAsIGVhc3k6IDMwMCwgbWVkaXVtOiA2MDAsIGhhcmQ6IDkwMCwgZGVhZGx5OiAxNDAwIH0sXG4gICAgNzogeyBkYWlseTogNTAwMCwgZWFzeTogMzUwLCBtZWRpdW06IDc1MCwgaGFyZDogMTEwMCwgZGVhZGx5OiAxNzAwIH0sXG4gICAgODogeyBkYWlseTogNjAwMCwgZWFzeTogNDUwLCBtZWRpdW06IDkwMCwgaGFyZDogMTQwMCwgZGVhZGx5OiAyMTAwIH0sXG4gICAgOTogeyBkYWlseTogNzUwMCwgZWFzeTogNTUwLCBtZWRpdW06IDExMDAsIGhhcmQ6IDE2MDAsIGRlYWRseTogMjQwMCB9LFxuICAgIDEwOiB7IGRhaWx5OiA5MDAwLCBlYXN5OiA2MDAsIG1lZGl1bTogMTIwMCwgaGFyZDogMTkwMCwgZGVhZGx5OiAyODAwIH0sXG4gICAgMTE6IHsgZGFpbHk6IDEwNTAwLCBlYXN5OiA4MDAsIG1lZGl1bTogMTYwMCwgaGFyZDogMjQwMCwgZGVhZGx5OiAzNjAwIH0sXG4gICAgMTI6IHsgZGFpbHk6IDExNTAwLCBlYXN5OiAxMDAwLCBtZWRpdW06IDIwMDAsIGhhcmQ6IDMwMDAsIGRlYWRseTogNDUwMCB9LFxuICAgIDEzOiB7IGRhaWx5OiAxMzUwMCwgZWFzeTogMTEwMCwgbWVkaXVtOiAyMjAwLCBoYXJkOiAzNDAwLCBkZWFkbHk6IDUxMDAgfSxcbiAgICAxNDogeyBkYWlseTogMTUwMDAsIGVhc3k6IDEyNTAsIG1lZGl1bTogMjUwMCwgaGFyZDogMzgwMCwgZGVhZGx5OiA1NzAwIH0sXG4gICAgMTU6IHsgZGFpbHk6IDE4MDAwLCBlYXN5OiAxNDAwLCBtZWRpdW06IDI4MDAsIGhhcmQ6IDQzMDAsIGRlYWRseTogNjQwMCB9LFxuICAgIDE2OiB7IGRhaWx5OiAyMDAwMCwgZWFzeTogMTYwMCwgbWVkaXVtOiAzMjAwLCBoYXJkOiA0ODAwLCBkZWFkbHk6IDcyMDAgfSxcbiAgICAxNzogeyBkYWlseTogMjUwMDAsIGVhc3k6IDIwMDAsIG1lZGl1bTogMzkwMCwgaGFyZDogNTkwMCwgZGVhZGx5OiA4ODAwIH0sXG4gICAgMTg6IHsgZGFpbHk6IDI3MDAwLCBlYXN5OiAyMTAwLCBtZWRpdW06IDQyMDAsIGhhcmQ6IDYzMDAsIGRlYWRseTogOTUwMCB9LFxuICAgIDE5OiB7IGRhaWx5OiAzMDAwMCwgZWFzeTogMjQwMCwgbWVkaXVtOiA0OTAwLCBoYXJkOiA3MzAwLCBkZWFkbHk6IDEwOTAwIH0sXG4gICAgMjA6IHsgZGFpbHk6IDQwMDAwLCBlYXN5OiAyODAwLCBtZWRpdW06IDU3MDAsIGhhcmQ6IDg1MDAsIGRlYWRseTogMTI3MDAgfVxufTtcblxuZXhwb3J0IGNvbnN0IENSX0VYUEVSSUVOQ0VfVkFMVUVTID0ge1xuICAgIDA6IDEwLFxuICAgIFwiMS84XCI6IDI1LFxuICAgIFwiMS80XCI6IDUwLFxuICAgIFwiMS8yXCI6IDEwMCxcbiAgICAxOiAyMDAsXG4gICAgMjogNDUwLFxuICAgIDM6IDcwMCxcbiAgICA0OiAxMTAwLFxuICAgIDU6IDE4MDAsXG4gICAgNjogMjMwMCxcbiAgICA3OiAyOTAwLFxuICAgIDg6IDM5MDAsXG4gICAgOTogNTAwMCxcbiAgICAxMDogNTkwMCxcbiAgICAxMTogNzIwMCxcbiAgICAxMjogODQwMCxcbiAgICAxMzogMTAwMDAsXG4gICAgMTQ6IDExNTAwLFxuICAgIDE1OiAxMzAwMCxcbiAgICAxNjogMTUwMDAsXG4gICAgMTc6IDE4MDAwLFxuICAgIDE4OiAyMDAwMCxcbiAgICAxOTogMjIwMDAsXG4gICAgMjA6IDI1MDAwLFxuICAgIDIxOiAzMzAwMCxcbiAgICAyMjogNDEwMDAsXG4gICAgMjM6IDUwMDAwLFxuICAgIDI0OiA2MjAwMCxcbiAgICAyNTogNzUwMDAsXG4gICAgMjY6IDkwMDAwLFxuICAgIDI3OiAxMDUwMDAsXG4gICAgMjg6IDEyMDAwMCxcbiAgICAyOTogMTM1MDAwLFxuICAgIDMwOiAxNTUwMDBcbn07XG5cbmV4cG9ydCBjb25zdCBNT0RJRklFUlNfQllfQ09VTlQgPSBbMC41LCAxLCAxLjUsIDIsIDIuNSwgMywgNCwgNV0gYXMgY29uc3Q7XG5leHBvcnQgY29uc3QgTU9ESUZJRVJfVEhSRVNIT0xEUyA9IFtJbmZpbml0eSwgMSwgMiwgMywgNywgMTEsIDE1XTtcblxuZXhwb3J0IGNvbnN0IEVYUEVSSUVOQ0VfVEhSRVNIT0xEUyA9IFtcbiAgICBcIkVhc3lcIixcbiAgICBcIk1lZGl1bVwiLFxuICAgIFwiSGFyZFwiLFxuICAgIFwiRGVhZGx5XCJcbl0gYXMgY29uc3Q7XG5cbiIsICJpbXBvcnQgeyBkZXJpdmVkLCBnZXQsIHdyaXRhYmxlIH0gZnJvbSBcInN2ZWx0ZS9zdG9yZVwiO1xuaW1wb3J0IHR5cGUgeyBDcmVhdHVyZVN0YXRlIH0gZnJvbSBcIi4uLy4uLy4uL0B0eXBlc1wiO1xuaW1wb3J0IHsgRVhQRVJJRU5DRV9QRVJfTEVWRUwgfSBmcm9tIFwiLi4vY29uc3RhbnRzXCI7XG5cbmV4cG9ydCBjb25zdCBwbGF5ZXJDb3VudCA9IHdyaXRhYmxlKDApO1xuXG5pbnRlcmZhY2UgUGxheWVyIGV4dGVuZHMgUGFydGlhbDxDcmVhdHVyZVN0YXRlPiB7XG4gICAgbGV2ZWw6IG51bWJlcjtcbiAgICBuYW1lOiBzdHJpbmc7XG4gICAgaXNQbGF5ZXI6IHRydWU7XG4gICAgZW5hYmxlZDogYm9vbGVhbjtcbiAgICBjb3VudDogbnVtYmVyO1xufVxuaW50ZXJmYWNlIEdlbmVyaWNQbGF5ZXIgZXh0ZW5kcyBQYXJ0aWFsPENyZWF0dXJlU3RhdGU+IHtcbiAgICBsZXZlbDogbnVtYmVyO1xuICAgIGlzUGxheWVyOiBmYWxzZTtcbiAgICBlbmFibGVkOiBib29sZWFuO1xuICAgIGNvdW50OiBudW1iZXI7XG59XG50eXBlIENvbWJpbmVkUGxheWVyID0gUGxheWVyIHwgR2VuZXJpY1BsYXllcjtcblxuZnVuY3Rpb24gY3JlYXRlUGxheWVycygpIHtcbiAgICBjb25zdCBzdG9yZSA9IHdyaXRhYmxlPENvbWJpbmVkUGxheWVyW10+KFtdKTtcbiAgICBjb25zdCB7IHN1YnNjcmliZSwgc2V0LCB1cGRhdGUgfSA9IHN0b3JlO1xuICAgIGNvbnN0IHBhcnR5ID0gZGVyaXZlZChzdG9yZSwgKCRwbGF5ZXJzKSA9PiB7XG4gICAgICAgIHJldHVybiAkcGxheWVycy5maWx0ZXI8UGxheWVyPigocCk6IHAgaXMgUGxheWVyID0+IHAuaXNQbGF5ZXIpO1xuICAgIH0pO1xuICAgIGNvbnN0IGdlbmVyaWNzID0gZGVyaXZlZChzdG9yZSwgKCRwbGF5ZXJzKSA9PiB7XG4gICAgICAgIHJldHVybiAkcGxheWVycy5maWx0ZXI8R2VuZXJpY1BsYXllcj4oXG4gICAgICAgICAgICAocCk6IHAgaXMgR2VuZXJpY1BsYXllciA9PiBwLmlzUGxheWVyID09IGZhbHNlXG4gICAgICAgICk7XG4gICAgfSk7XG4gICAgY29uc3QgY291bnQgPSBkZXJpdmVkKHN0b3JlLCAoJHBsYXllcnMpID0+IHtcbiAgICAgICAgcmV0dXJuIFsuLi4kcGxheWVyc10ucmVkdWNlKChhLCBiKSA9PiBhICsgYi5jb3VudCwgMCk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBzdWJzY3JpYmUsXG4gICAgICAgIHBhcnR5LFxuICAgICAgICBnZW5lcmljcyxcbiAgICAgICAgY291bnQsXG4gICAgICAgIHRocmVzaG9sZHM6IGRlcml2ZWQoc3RvcmUsICgkcGxheWVycykgPT4ge1xuICAgICAgICAgICAgY29uc3QgdGhyZXNob2xkID0ge1xuICAgICAgICAgICAgICAgIEVhc3k6IDAsXG4gICAgICAgICAgICAgICAgTWVkaXVtOiAwLFxuICAgICAgICAgICAgICAgIEhhcmQ6IDAsXG4gICAgICAgICAgICAgICAgRGVhZGx5OiAwLFxuICAgICAgICAgICAgICAgIERhaWx5OiAwXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgZm9yIChjb25zdCBwbGF5ZXIgb2YgJHBsYXllcnMpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXBsYXllci5sZXZlbCkgY29udGludWU7XG4gICAgICAgICAgICAgICAgaWYgKCFwbGF5ZXIuZW5hYmxlZCkgY29udGludWU7XG4gICAgICAgICAgICAgICAgY29uc3QgbGV2ZWwgPSBwbGF5ZXIubGV2ZWwgPiAyMCA/IDIwIDogcGxheWVyLmxldmVsO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRocmVzaG9sZHMgPSBFWFBFUklFTkNFX1BFUl9MRVZFTFtsZXZlbF07XG4gICAgICAgICAgICAgICAgaWYgKCF0aHJlc2hvbGRzKSBjb250aW51ZTtcblxuICAgICAgICAgICAgICAgIHRocmVzaG9sZC5FYXN5ICs9IHRocmVzaG9sZHMuZWFzeSAqIHBsYXllci5jb3VudDtcbiAgICAgICAgICAgICAgICB0aHJlc2hvbGQuTWVkaXVtICs9IHRocmVzaG9sZHMubWVkaXVtICogcGxheWVyLmNvdW50O1xuICAgICAgICAgICAgICAgIHRocmVzaG9sZC5IYXJkICs9IHRocmVzaG9sZHMuaGFyZCAqIHBsYXllci5jb3VudDtcbiAgICAgICAgICAgICAgICB0aHJlc2hvbGQuRGVhZGx5ICs9IHRocmVzaG9sZHMuZGVhZGx5ICogcGxheWVyLmNvdW50O1xuICAgICAgICAgICAgICAgIHRocmVzaG9sZC5EYWlseSArPSB0aHJlc2hvbGRzLmRhaWx5ICogcGxheWVyLmNvdW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRocmVzaG9sZDtcbiAgICAgICAgfSksXG4gICAgICAgIG1vZGlmaWVyOiBkZXJpdmVkKGNvdW50LCAoJGNvdW50KSA9PlxuICAgICAgICAgICAgJGNvdW50IDwgMyA/IDEgOiAkY291bnQgPiA1ID8gLTEgOiAwXG4gICAgICAgICksXG4gICAgICAgIGF2ZXJhZ2U6IGRlcml2ZWQoc3RvcmUsICgkcGxheWVycykgPT4ge1xuICAgICAgICAgICAgaWYgKCEkcGxheWVycy5sZW5ndGgpIHJldHVybiAwO1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAkcGxheWVycy5yZWR1Y2UoKGEsIHApID0+IGEgKyAocC5lbmFibGVkID8gcC5sZXZlbCA6IDApLCAwKSAvXG4gICAgICAgICAgICAgICAgJHBsYXllcnMubGVuZ3RoXG4gICAgICAgICAgICApO1xuICAgICAgICB9KSxcbiAgICAgICAgYWRkOiAoaXRlbTogQ29tYmluZWRQbGF5ZXIpID0+XG4gICAgICAgICAgICB1cGRhdGUoKHBsYXllcnMpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIWl0ZW0uY291bnQgfHwgaXRlbS5jb3VudCA8PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGl0ZW0uY291bnQgPSAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBwbGF5ZXJzLnB1c2goaXRlbSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBsYXllcnM7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgcmVtb3ZlOiAoaXRlbTogQ29tYmluZWRQbGF5ZXIpID0+XG4gICAgICAgICAgICB1cGRhdGUoKHBsYXllcnMpID0+IHtcbiAgICAgICAgICAgICAgICBwbGF5ZXJzID0gcGxheWVycy5maWx0ZXIoKHApID0+IHAgIT0gaXRlbSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBsYXllcnM7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgZGVsZXRlOiAoaXRlbTogQ29tYmluZWRQbGF5ZXIpID0+XG4gICAgICAgICAgICB1cGRhdGUoKHBsYXllcnMpID0+IHtcbiAgICAgICAgICAgICAgICBwbGF5ZXJzID0gcGxheWVycy5maWx0ZXIoKHApID0+IHAgIT0gaXRlbSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBsYXllcnM7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgc2V0OiAoaXRlbTogQ29tYmluZWRQbGF5ZXIsIGNvdW50OiBudW1iZXIpID0+XG4gICAgICAgICAgICB1cGRhdGUoKHBsYXllcnMpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBwbGF5ZXIgPSBwbGF5ZXJzLmZpbmQoKHApID0+IHAgPT0gaXRlbSk7XG4gICAgICAgICAgICAgICAgcGxheWVyIS5jb3VudCA9IGNvdW50O1xuICAgICAgICAgICAgICAgIHJldHVybiBwbGF5ZXJzO1xuICAgICAgICAgICAgfSksXG4gICAgICAgIHNldExldmVsOiAoaXRlbTogQ29tYmluZWRQbGF5ZXIsIGxldmVsOiBudW1iZXIpID0+XG4gICAgICAgICAgICB1cGRhdGUoKHBsYXllcnMpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBwbGF5ZXIgPSBwbGF5ZXJzLmZpbmQoKHApID0+IHAgPT0gaXRlbSk7XG4gICAgICAgICAgICAgICAgcGxheWVyIS5sZXZlbCA9IGxldmVsO1xuICAgICAgICAgICAgICAgIHJldHVybiBwbGF5ZXJzO1xuICAgICAgICAgICAgfSksXG5cbiAgICAgICAgc3dpdGNoUGFydHk6IChpdGVtczogUGxheWVyW10pID0+IHtcbiAgICAgICAgICAgIHVwZGF0ZSgocGxheWVycykgPT4ge1xuICAgICAgICAgICAgICAgIHBsYXllcnMgPSBbLi4uaXRlbXMsIC4uLmdldChnZW5lcmljcyldO1xuICAgICAgICAgICAgICAgIHJldHVybiBwbGF5ZXJzO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIGVtcHR5OiAoKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gc2V0KFtdKTtcbiAgICAgICAgfSxcbiAgICAgICAgdG9nZ2xlRW5hYmxlZDogKGl0ZW06IENvbWJpbmVkUGxheWVyKSA9PlxuICAgICAgICAgICAgdXBkYXRlKChwbGF5ZXJzKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgcGxheWVyID0gcGxheWVycy5maW5kKChwKSA9PiBwID09IGl0ZW0pO1xuICAgICAgICAgICAgICAgIHBsYXllciEuZW5hYmxlZCA9ICFwbGF5ZXIhLmVuYWJsZWQ7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBsYXllcnM7XG4gICAgICAgICAgICB9KVxuICAgIH07XG59XG5cbmV4cG9ydCBjb25zdCBwbGF5ZXJzID0gY3JlYXRlUGxheWVycygpO1xuIiwgIjxzY3JpcHQgbGFuZz1cInRzXCI+XG4gICAgaW1wb3J0IHR5cGUgeyBTUkRNb25zdGVyIH0gZnJvbSBcIkB0eXBlc1wiO1xuICAgIGltcG9ydCB7IEV4dHJhQnV0dG9uQ29tcG9uZW50LCBIb3ZlclBvcG92ZXIgfSBmcm9tIFwib2JzaWRpYW5cIjtcbiAgICBpbXBvcnQgeyBERUZBVUxUX1VOREVGSU5FRCB9IGZyb20gXCJzcmMvdXRpbHNcIjtcbiAgICBpbXBvcnQgeyBnZXRDb250ZXh0IH0gZnJvbSBcInN2ZWx0ZVwiO1xuICAgIGltcG9ydCB7IGVuY291bnRlciB9IGZyb20gXCIuLi8uLi9zdG9yZXMvZW5jb3VudGVyXCI7XG4gICAgaW1wb3J0IE51bGxhYmxlIGZyb20gXCIuLi9OdWxsYWJsZS5zdmVsdGVcIjtcblxuICAgIGNvbnN0IHBsdWdpbiA9IGdldENvbnRleHQoXCJwbHVnaW5cIik7XG4gICAgZXhwb3J0IGxldCBjcmVhdHVyZTogU1JETW9uc3RlcjtcbiAgICBjb25zdCBhZGQgPSAobm9kZTogSFRNTEVsZW1lbnQpID0+IHtcbiAgICAgICAgbmV3IEV4dHJhQnV0dG9uQ29tcG9uZW50KG5vZGUpLnNldEljb24oXCJwbHVzLXdpdGgtY2lyY2xlXCIpO1xuICAgIH07XG4gICAgZnVuY3Rpb24gc3RyaW5naWZ5KFxuICAgICAgICBwcm9wZXJ0eTogUmVjb3JkPHN0cmluZywgYW55PiB8IHN0cmluZyB8IGFueVtdIHwgbnVtYmVyIHwgYm9vbGVhbixcbiAgICAgICAgZGVwdGg6IG51bWJlciA9IDAsXG4gICAgICAgIGpvaW5lcjogc3RyaW5nID0gXCIgXCIsXG4gICAgICAgIHBhcmVucyA9IHRydWVcbiAgICApOiBzdHJpbmcge1xuICAgICAgICBjb25zdCByZXQgPSBbXTtcbiAgICAgICAgaWYgKGRlcHRoID09IDUpIHtcbiAgICAgICAgICAgIHJldHVybiBcIlwiO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwcm9wZXJ0eSA9PSBudWxsKSByZXR1cm4gYGA7XG4gICAgICAgIGlmICh0eXBlb2YgcHJvcGVydHkgPT0gXCJzdHJpbmdcIikgcmV0dXJuIHByb3BlcnR5O1xuICAgICAgICBpZiAodHlwZW9mIHByb3BlcnR5ID09IFwibnVtYmVyXCIpIHJldHVybiBgJHtwcm9wZXJ0eX1gO1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShwcm9wZXJ0eSkpIHtcbiAgICAgICAgICAgIHJldC5wdXNoKFxuICAgICAgICAgICAgICAgIGAke3BhcmVucyA/IFwiKFwiIDogXCJcIn0ke3Byb3BlcnR5XG4gICAgICAgICAgICAgICAgICAgIC5tYXAoKHApID0+IHN0cmluZ2lmeShwLCBkZXB0aCsrKSlcbiAgICAgICAgICAgICAgICAgICAgLmpvaW4oam9pbmVyKX0ke3BhcmVucyA/IFwiKVwiIDogXCJcIn1gXG4gICAgICAgICAgICApO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBwcm9wZXJ0eSA9PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHZhbHVlIG9mIE9iamVjdC52YWx1ZXMocHJvcGVydHkpKSB7XG4gICAgICAgICAgICAgICAgcmV0LnB1c2goc3RyaW5naWZ5KHZhbHVlLCBkZXB0aCsrKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJldC5qb2luKFwiIFwiKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRTb3VyY2Uoc291cmNlOiBzdHJpbmcgfCBzdHJpbmdbXSk6IHN0cmluZyB7XG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheShzb3VyY2UpKSByZXR1cm4gc291cmNlO1xuICAgICAgICBsZXQgc2xpY2VkID0gc291cmNlLnNsaWNlKDAsIDIpO1xuICAgICAgICBpZiAoc291cmNlLmxlbmd0aCA+IDIpIHtcbiAgICAgICAgICAgIHNsaWNlZC5wdXNoKGBhbmQgJHtzb3VyY2UubGVuZ3RoIC0gMn0gbW9yZWApO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHN0cmluZ2lmeShzbGljZWQsIDAsIFwiLCBcIiwgZmFsc2UpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBnZXRUb29sdGlwKHNvdXJjZTogc3RyaW5nIHwgc3RyaW5nW10pOiBzdHJpbmcge1xuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoc291cmNlKSkgcmV0dXJuIFwiXCI7XG4gICAgICAgIHJldHVybiBzdHJpbmdpZnkoc291cmNlLCAwLCBcIiwgXCIsIGZhbHNlKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzaG93KG5vZGU6IEhUTUxFbGVtZW50KSB7XG4gICAgICAgIGlmIChwbHVnaW4uY2FuVXNlU3RhdEJsb2NrcyAmJiBwbHVnaW4uc3RhdGJsb2NrVmVyc2lvbj8ubWFqb3IgPj0gMikge1xuICAgICAgICAgICAgY29uc3Qgc3RhdGJsb2NrTm9kZSA9IGNyZWF0ZURpdigpO1xuICAgICAgICAgICAgY29uc3Qgc3RhdGJsb2NrID0gcGx1Z2luLnN0YXRibG9ja3MucmVuZGVyKGNyZWF0dXJlLCBzdGF0YmxvY2tOb2RlKTtcbiAgICAgICAgICAgIGlmIChzdGF0YmxvY2spIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwb3BvdmVyID0gbmV3IEhvdmVyUG9wb3Zlcih7IGhvdmVyUG9wb3ZlcjogbnVsbCB9LCBub2RlKTtcbiAgICAgICAgICAgICAgICBwb3BvdmVyLmhvdmVyRWwuYXBwZW5kQ2hpbGQoc3RhdGJsb2NrTm9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG48L3NjcmlwdD5cblxuPHRyIGNsYXNzPVwiY3JlYXR1cmVcIj5cbiAgICA8dGQgY2xhc3M9XCJjcmVhdHVyZS1uYW1lIGNyZWF0dXJlLTQwXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJjcmVhdHVyZS1uYW1lLWNvbnRhaW5lclwiPlxuICAgICAgICAgICAgPGRpdiB1c2U6YWRkIG9uOmNsaWNrPXsoKSA9PiBlbmNvdW50ZXIuYWRkKGNyZWF0dXJlKX0gLz5cbiAgICAgICAgICAgIDwhLS0gc3ZlbHRlLWlnbm9yZSBhMTF5LW1vdXNlLWV2ZW50cy1oYXZlLWtleS1ldmVudHMgLS0+XG4gICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgY2xhc3M9XCJzZXR0aW5nLWl0ZW0tbmFtZVwiXG4gICAgICAgICAgICAgICAgb246bW91c2VvdmVyPXsoZXZ0KSA9PiBzaG93KGV2dC5jdXJyZW50VGFyZ2V0KX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICB7Y3JlYXR1cmUubmFtZX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInNldHRpbmctaXRlbS1kZXNjcmlwdGlvblwiPlxuICAgICAgICAgICAgICAgIHsjaWYgY3JlYXR1cmUuc291cmNlPy5sZW5ndGh9XG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGFyaWEtbGFiZWw9e2dldFRvb2x0aXAoY3JlYXR1cmUuc291cmNlKX0+XG4gICAgICAgICAgICAgICAgICAgICAgICB7Z2V0U291cmNlKGNyZWF0dXJlLnNvdXJjZSl9XG4gICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICB7L2lmfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8IS0tIDxkaXYgY2xhc3M9XCJjcmVhdHVyZS1uYW1lXCI+XG4gICAgICAgICAgICA8L2Rpdj4gLS0+XG4gICAgICAgICAgICA8IS0tIHN2ZWx0ZS1pZ25vcmUgYTExeS1tb3VzZS1ldmVudHMtaGF2ZS1rZXktZXZlbnRzIC0tPlxuICAgICAgICA8L2Rpdj5cbiAgICA8L3RkPlxuICAgIDx0ZCBjbGFzcz1cImNyZWF0dXJlLWNyIGNyZWF0dXJlLTE1XCI+PE51bGxhYmxlIHN0cj17Y3JlYXR1cmUuY3IgPz8gMH0gLz48L3RkPlxuICAgIDx0ZCBjbGFzcz1cImNyZWF0dXJlLXR5cGUgY3JlYXR1cmUtMTVcIlxuICAgICAgICA+PE51bGxhYmxlIHN0cj17Y3JlYXR1cmUudHlwZSA/PyBERUZBVUxUX1VOREVGSU5FRH0gLz48L3RkXG4gICAgPlxuICAgIDx0ZCBjbGFzcz1cImNyZWF0dXJlLXNpemUgY3JlYXR1cmUtMTVcIlxuICAgICAgICA+PE51bGxhYmxlIHN0cj17Y3JlYXR1cmUuc2l6ZSA/PyBERUZBVUxUX1VOREVGSU5FRH0gLz48L3RkXG4gICAgPlxuICAgIDx0ZCBjbGFzcz1cImNyZWF0dXJlLWFsaWdubWVudCBjcmVhdHVyZS0xNVwiPlxuICAgICAgICA8TnVsbGFibGUgc3RyPXtjcmVhdHVyZS5hbGlnbm1lbnQgPz8gREVGQVVMVF9VTkRFRklORUR9IC8+XG4gICAgPC90ZD5cbjwvdHI+XG5cbjxzdHlsZSBzY29wZWQ+XG4gICAgLmNyZWF0dXJlLW5hbWUtY29udGFpbmVyIHtcbiAgICAgICAgLyogZGlzcGxheTogZmxleDtcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgZ2FwOiAwLjVyZW07ICovXG4gICAgICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgICAgIGdyaWQtdGVtcGxhdGUtYXJlYXM6XG4gICAgICAgICAgICBcImFkZCBuYW1lXCJcbiAgICAgICAgICAgIFwiLiBkZXNjXCI7XG4gICAgICAgIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDtcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiBhdXRvIDFmcjtcbiAgICB9XG4gICAgLnNldHRpbmctaXRlbS1kZXNjcmlwdGlvbiB7XG4gICAgICAgIGdyaWQtYXJlYTogZGVzYztcbiAgICB9XG4gICAgLyogLmNyZWF0dXJlLW5hbWUgPiBkaXYge1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIH0gKi9cbiAgICAuY3JlYXR1cmUtNDAge1xuICAgICAgICB3aWR0aDogNDAlO1xuICAgIH1cbiAgICAuY3JlYXR1cmUtMTUge1xuICAgICAgICB3aWR0aDogMTUlO1xuICAgIH1cbjwvc3R5bGU+XG4iLCAiaW1wb3J0IHR5cGUgeyBTUkRNb25zdGVyIH0gZnJvbSBcIi4uLy4uLy4uL0B0eXBlc1wiO1xuaW1wb3J0IHsgd3JpdGFibGUgfSBmcm9tIFwic3ZlbHRlL3N0b3JlXCI7XG5pbXBvcnQgeyBwbGF5ZXJzIH0gZnJvbSBcIi4vcGxheWVyc1wiO1xuZnVuY3Rpb24gY3JlYXRlRW5jb3VudGVyKCkge1xuICAgIGNvbnN0IHN0b3JlID0gd3JpdGFibGU8TWFwPFNSRE1vbnN0ZXIsIG51bWJlcj4+KG5ldyBNYXAoKSk7XG4gICAgY29uc3QgeyBzdWJzY3JpYmUsIHNldCwgdXBkYXRlIH0gPSBzdG9yZTtcbiAgICByZXR1cm4ge1xuICAgICAgICBwbGF5ZXJzLFxuICAgICAgICBzdWJzY3JpYmUsXG4gICAgICAgIGFkZDogKGl0ZW06IFNSRE1vbnN0ZXIpID0+XG4gICAgICAgICAgICB1cGRhdGUoKG1vbnN0ZXJzKSA9PiB7XG4gICAgICAgICAgICAgICAgbW9uc3RlcnMuc2V0KGl0ZW0sIChtb25zdGVycy5nZXQoaXRlbSkgPz8gMCkgKyAxKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9uc3RlcnM7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgcmVtb3ZlOiAoaXRlbTogU1JETW9uc3RlcikgPT5cbiAgICAgICAgICAgIHVwZGF0ZSgobW9uc3RlcnMpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgZXhpc3RpbmcgPSBtb25zdGVycy5nZXQoaXRlbSk7XG4gICAgICAgICAgICAgICAgaWYgKCFleGlzdGluZykgcmV0dXJuIG1vbnN0ZXJzO1xuICAgICAgICAgICAgICAgIGlmIChleGlzdGluZyA9PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIG1vbnN0ZXJzLmRlbGV0ZShpdGVtKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGV4aXN0aW5nID4gMSkge1xuICAgICAgICAgICAgICAgICAgICBtb25zdGVycy5zZXQoaXRlbSwgZXhpc3RpbmcgLSAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vbnN0ZXJzOyAvLyB0aGlzIGxpbmUgaXMgaW1wb3J0YW50IHRvIHVwZGF0ZSB0aGUgc3RvcmUgdmFsdWUgISFcbiAgICAgICAgICAgIH0pLFxuICAgICAgICBkZWxldGU6IChpdGVtOiBTUkRNb25zdGVyKSA9PlxuICAgICAgICAgICAgdXBkYXRlKChtb25zdGVycykgPT4ge1xuICAgICAgICAgICAgICAgIG1vbnN0ZXJzLmRlbGV0ZShpdGVtKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbW9uc3RlcnM7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgc2V0OiAoaXRlbTogU1JETW9uc3RlciwgY291bnQ6IG51bWJlcikgPT5cbiAgICAgICAgICAgIHVwZGF0ZSgobW9uc3RlcnMpID0+IHtcbiAgICAgICAgICAgICAgICBtb25zdGVycy5zZXQoaXRlbSwgY291bnQpO1xuICAgICAgICAgICAgICAgIHJldHVybiBtb25zdGVycztcbiAgICAgICAgICAgIH0pLFxuICAgICAgICBlbXB0eTogKCkgPT4gc2V0KG5ldyBNYXAoKSlcbiAgICB9O1xufVxuXG5leHBvcnQgY29uc3QgZW5jb3VudGVyID0gY3JlYXRlRW5jb3VudGVyKCk7XG4iLCAiPHNjcmlwdCBsYW5nPVwidHNcIj5cbiAgICBpbXBvcnQgeyBERUZBVUxUX1VOREVGSU5FRCB9IGZyb20gXCJzcmMvdXRpbHNcIjtcblxuICAgIGV4cG9ydCBsZXQgc3RyOiBzdHJpbmcgfCBudW1iZXIgPSBERUZBVUxUX1VOREVGSU5FRDtcbjwvc2NyaXB0PlxuXG57c3RyfVxuIiwgIjxzY3JpcHQgbGFuZz1cInRzXCI+XG4gICAgaW1wb3J0IHtcbiAgICAgICAgQnV0dG9uQ29tcG9uZW50LFxuICAgICAgICBkZWJvdW5jZSxcbiAgICAgICAgRXh0cmFCdXR0b25Db21wb25lbnQsXG4gICAgICAgIE1vZGFsLFxuICAgICAgICBUZXh0Q29tcG9uZW50XG4gICAgfSBmcm9tIFwib2JzaWRpYW5cIjtcbiAgICBpbXBvcnQgeyBnZXRDb250ZXh0IH0gZnJvbSBcInN2ZWx0ZVwiO1xuICAgIGltcG9ydCB7IHNsaWRlIH0gZnJvbSBcInN2ZWx0ZS90cmFuc2l0aW9uXCI7XG4gICAgaW1wb3J0IHsgbGluZWFyIH0gZnJvbSBcInN2ZWx0ZS9lYXNpbmdcIjtcbiAgICBpbXBvcnQgU2xpZGVyIGZyb20gXCIuL1NsaWRlci5zdmVsdGVcIjtcbiAgICBpbXBvcnQgTXVsdGlzZWxlY3QgZnJvbSBcInN2ZWx0ZS1tdWx0aXNlbGVjdFwiO1xuXG4gICAgaW1wb3J0IEZpbHRlck1vZGFsIGZyb20gXCIuL0ZpbHRlck1vZGFsLnN2ZWx0ZVwiO1xuXG4gICAgaW1wb3J0IHR5cGUgeyBTUkRNb25zdGVyIH0gZnJvbSBcIkB0eXBlc1wiO1xuXG4gICAgaW1wb3J0IHtcbiAgICAgICAgY3IsXG4gICAgICAgIGFsaWdubWVudCxcbiAgICAgICAgc2l6ZSxcbiAgICAgICAgdHlwZSxcbiAgICAgICAgc291cmNlcyxcbiAgICAgICAgbmFtZVxuICAgIH0gZnJvbSBcIi4uLy4uL3N0b3Jlcy9maWx0ZXJcIjtcblxuICAgIGxldCBvcGVuID0gZmFsc2U7XG5cbiAgICBjb25zdCBwbHVnaW4gPSBnZXRDb250ZXh0KFwicGx1Z2luXCIpO1xuICAgIGNvbnN0IG9yaWdpbmFsID0gcGx1Z2luLmJlc3RpYXJ5IGFzIFNSRE1vbnN0ZXJbXTtcblxuICAgIGNvbnN0IHNpemVzID0gW1xuICAgICAgICBcIlRpbnlcIixcbiAgICAgICAgXCJTbWFsbFwiLFxuICAgICAgICBcIk1lZGl1bVwiLFxuICAgICAgICBcIkxhcmdlXCIsXG4gICAgICAgIFwiSHVnZVwiLFxuICAgICAgICBcIkdhcmdhbnR1YW5cIixcbiAgICAgICAgXCJWYXJpZXNcIlxuICAgIF07XG5cbiAgICAkOiB0eXBlcyA9IFtcbiAgICAgICAgLi4ubmV3IFNldChcbiAgICAgICAgICAgIG9yaWdpbmFsXG4gICAgICAgICAgICAgICAgLm1hcCgoYykgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHlwZW9mIGMudHlwZSA9PSBcInN0cmluZ1wiID8gYy50eXBlIDogbnVsbDtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5maWx0ZXIoKGMpID0+IGMpXG4gICAgICAgIClcbiAgICBdLnNvcnQoKTtcblxuICAgIGNvbnN0IHNlYXJjaCA9IChub2RlOiBIVE1MRWxlbWVudCkgPT4ge1xuICAgICAgICBuZXcgVGV4dENvbXBvbmVudChub2RlKS5zZXRQbGFjZWhvbGRlcihcIk5hbWVcIikub25DaGFuZ2UoXG4gICAgICAgICAgICBkZWJvdW5jZSgodikgPT4ge1xuICAgICAgICAgICAgICAgICRuYW1lID0gdjtcbiAgICAgICAgICAgIH0sIDEwKVxuICAgICAgICApO1xuICAgIH07XG5cbiAgICBjb25zdCByZXNldEljb24gPSAobm9kZTogSFRNTEVsZW1lbnQpID0+IHtcbiAgICAgICAgbmV3IEV4dHJhQnV0dG9uQ29tcG9uZW50KG5vZGUpLnNldEljb24oXCJyZXNldFwiKTtcbiAgICB9O1xuICAgIGNvbnN0IHJlc2V0ID0gKCkgPT4ge1xuICAgICAgICBjci5yZXNldCgpO1xuICAgICAgICBhbGlnbm1lbnQucmVzZXQoKTtcbiAgICAgICAgdHlwZS5yZXNldCgpO1xuICAgICAgICBzaXplLnJlc2V0KCk7XG4gICAgICAgIHNvdXJjZXMucmVzZXQoKTtcbiAgICAgICAgbmFtZS5zZXQoXCJcIik7XG4gICAgfTtcbiAgICBjb25zdCBmaWx0ZXIgPSAobm9kZTogSFRNTEVsZW1lbnQpID0+IHtcbiAgICAgICAgbmV3IEV4dHJhQnV0dG9uQ29tcG9uZW50KG5vZGUpLnNldEljb24oXCJmaWx0ZXJcIik7XG4gICAgfTtcbiAgICBjb25zdCBzb3VyY2VzQnV0dG9uID0gKG5vZGU6IEhUTUxFbGVtZW50KSA9PiB7XG4gICAgICAgIG5ldyBCdXR0b25Db21wb25lbnQobm9kZSlcbiAgICAgICAgICAgIC5zZXRCdXR0b25UZXh0KFwiTWFuYWdlIFNvdXJjZXNcIilcbiAgICAgICAgICAgIC5vbkNsaWNrKCgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBtb2RhbCA9IG5ldyBNb2RhbChwbHVnaW4uYXBwKTtcbiAgICAgICAgICAgICAgICBuZXcgRmlsdGVyTW9kYWwoeyB0YXJnZXQ6IG1vZGFsLmNvbnRlbnRFbCwgcHJvcHM6IHsgcGx1Z2luIH0gfSk7XG4gICAgICAgICAgICAgICAgbW9kYWwub3BlbigpO1xuICAgICAgICAgICAgfSk7XG4gICAgfTtcblxuICAgICQ6IGFjdGl2ZSA9XG4gICAgICAgICghJG5hbWUgfHwgISRuYW1lLmxlbmd0aCA/IDAgOiAxKSArXG4gICAgICAgICgkY3JbMF0gPT0gMCA/IDAgOiAxKSArXG4gICAgICAgICgkY3JbMV0gPT0gMzAgPyAwIDogMSkgK1xuICAgICAgICAoISRzb3VyY2VzLmxlbmd0aCA/IDAgOiAxKSArXG4gICAgICAgICghJHNpemUubGVuZ3RoID8gMCA6IDEpICtcbiAgICAgICAgKCEkdHlwZS5sZW5ndGggPyAwIDogMSkgK1xuICAgICAgICAoISRhbGlnbm1lbnQubGVuZ3RoID8gMCA6IDEpO1xuPC9zY3JpcHQ+XG5cbjxkaXYgY2xhc3M9XCJmaWx0ZXJzLWNvbnRhaW5lclwiPlxuICAgIDxkaXYgY2xhc3M9XCJjb250cm9sc1wiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwic2VhcmNoXCIgdXNlOnNlYXJjaCAvPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiZmlsdGVyLWJ1dHRvblwiPlxuICAgICAgICAgICAgPGRpdiB1c2U6ZmlsdGVyIG9uOmNsaWNrPXsoKSA9PiAob3BlbiA9ICFvcGVuKX0gLz5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJmaWx0ZXItbnVtYmVyXCI+e2FjdGl2ZX08L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgdXNlOnJlc2V0SWNvbiBvbjpjbGljaz17KCkgPT4gcmVzZXQoKX0gLz5cbiAgICA8L2Rpdj5cbiAgICB7I2lmIG9wZW59XG4gICAgICAgIDxkaXYgY2xhc3M9XCJmaWx0ZXJzXCIgdHJhbnNpdGlvbjpzbGlkZT17eyBlYXNpbmc6IGxpbmVhciB9fT5cbiAgICAgICAgICAgIDxkaXYgdXNlOnNvdXJjZXNCdXR0b24gLz5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtdWx0aXNlbGVjdC1jb250YWluZXJcIj5cbiAgICAgICAgICAgICAgICA8TXVsdGlzZWxlY3RcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucz17c2l6ZXN9XG4gICAgICAgICAgICAgICAgICAgIGJpbmQ6c2VsZWN0ZWQ9eyRzaXplfVxuICAgICAgICAgICAgICAgICAgICBvdXRlckRpdkNsYXNzPVwiZHJvcGRvd25cIlxuICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIlNpemVzXCJcbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwibXVsdGlzZWxlY3QtY29udGFpbmVyXCI+XG4gICAgICAgICAgICAgICAgPE11bHRpc2VsZWN0XG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnM9e3R5cGVzfVxuICAgICAgICAgICAgICAgICAgICBiaW5kOnNlbGVjdGVkPXskdHlwZX1cbiAgICAgICAgICAgICAgICAgICAgb3V0ZXJEaXZDbGFzcz1cImRyb3Bkb3duXCJcbiAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJUeXBlc1wiXG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNyLWNvbnRhaW5lclwiPlxuICAgICAgICAgICAgPHNwYW4+TWluIENSPC9zcGFuPlxuICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICAgdHlwZT1cIm51bWJlclwiXG4gICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJNaW4gQ1JcIlxuICAgICAgICAgICAgICAgIG1pbj1cIjBcIlxuICAgICAgICAgICAgICAgIG1heD1cIjMwXCJcbiAgICAgICAgICAgICAgICBiaW5kOnZhbHVlPXskY3JbMF19XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPFNsaWRlciBiaW5kOnZhbHVlPXskY3J9IHJhbmdlIG9yZGVyIG1pbj17MH0gbWF4PXszMH0gLz5cblxuICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICAgdHlwZT1cIm51bWJlclwiXG4gICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJNYXggQ1JcIlxuICAgICAgICAgICAgICAgIG1pbj1cIjBcIlxuICAgICAgICAgICAgICAgIG1heD1cIjMwXCJcbiAgICAgICAgICAgICAgICBiaW5kOnZhbHVlPXskY3JbMV19XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPHNwYW4+TWF4IENSPC9zcGFuPlxuICAgICAgICA8L2Rpdj5cbiAgICB7L2lmfVxuPC9kaXY+XG5cbjxzdHlsZSBzY29wZWQ+XG4gICAgLmZpbHRlcnMtY29udGFpbmVyIHtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgZmxleC1mbG93OiBjb2x1bW4gbm93cmFwO1xuICAgICAgICBnYXA6IDFyZW07XG4gICAgfVxuICAgIC5jb250cm9scyB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgZ2FwOiAwLjVyZW07XG4gICAgfVxuICAgIC5zZWFyY2gsXG4gICAgLnNlYXJjaCA6Z2xvYmFsKGlucHV0KSB7XG4gICAgICAgIHdpZHRoOiAxMDAlO1xuICAgIH1cblxuICAgIC5maWx0ZXItYnV0dG9uIHtcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIH1cbiAgICAuZmlsdGVyLW51bWJlciB7XG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgYm90dG9tOiAwO1xuICAgICAgICByaWdodDogMDtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0taW50ZXJhY3RpdmUtbm9ybWFsKTtcbiAgICAgICAgYm9yZGVyLXJhZGl1czogNTAlO1xuICAgICAgICB3aWR0aDogMTRweDtcbiAgICAgICAgaGVpZ2h0OiAxNHB4O1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICAgICAgZm9udC1zaXplOiB2YXIoLS1mb250LXNtYWxsZXN0KTtcbiAgICB9XG5cbiAgICAuZmlsdGVycyB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgIGdhcDogMXJlbTtcbiAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgfVxuICAgIC5jci1jb250YWluZXIge1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICBnYXA6IDFyZW07XG4gICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICAgIH1cblxuICAgIGlucHV0IHtcbiAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgIH1cblxuICAgIC5tdWx0aXNlbGVjdC1jb250YWluZXIge1xuICAgICAgICB3aWR0aDogMTAwJTtcbiAgICB9XG5cbiAgICAvKiogTm9ybWFsaXplIG11bHRpc2VsZWN0ICovXG4gICAgOmdsb2JhbChkaXYubXVsdGlzZWxlY3QpIHtcbiAgICAgICAgLS1zbXMtYm9yZGVyOiBub25lO1xuICAgICAgICAtLXNtcy1iZzogdmFyKC0taW50ZXJhY3RpdmUtbm9ybWFsKTtcbiAgICAgICAgLS1zbXMtb3B0aW9ucy1iZzogdmFyKC0taW50ZXJhY3RpdmUtbm9ybWFsKTtcbiAgICAgICAgLS1zbXMtYm9yZGVyLXJhZGl1czogdmFyKC0tcmFkaXVzKTtcbiAgICB9XG4gICAgOmdsb2JhbChkaXYubXVsdGlzZWxlY3QgdWwpIHtcbiAgICAgICAgcGFkZGluZy1sZWZ0OiAwO1xuICAgICAgICBib3JkZXItcmFkaXVzOiB2YXIoLS1yYWRpdXMpO1xuICAgIH1cbiAgICA6Z2xvYmFsKGRpdi5tdWx0aXNlbGVjdCBidXR0b24pIHtcbiAgICAgICAgaGVpZ2h0OiAwO1xuICAgIH1cbiAgICA6Z2xvYmFsKGRpdi5tdWx0aXNlbGVjdCBpbnB1dCkge1xuICAgICAgICB3aWR0aDogMDtcbiAgICAgICAgZm9udC1zaXplOiB2YXIoLS1mb250LXVpLXNtYWxsKTtcbiAgICB9XG4gICAgOmdsb2JhbChkaXYubXVsdGlzZWxlY3QgbGkpIHtcbiAgICAgICAgYm9yZGVyLWxlZnQ6IG5vbmU7XG4gICAgfVxuICAgIDpnbG9iYWwoZGl2Lm11bHRpc2VsZWN0IGxpOjpiZWZvcmUpIHtcbiAgICAgICAgY29udGVudDogbm9uZTtcbiAgICB9XG48L3N0eWxlPlxuIiwgImltcG9ydCB7IGN1YmljSW5PdXQsIGxpbmVhciwgY3ViaWNPdXQgfSBmcm9tICcuLi9lYXNpbmcvaW5kZXgubWpzJztcbmltcG9ydCB7IGlzX2Z1bmN0aW9uLCBhc3NpZ24gfSBmcm9tICcuLi9pbnRlcm5hbC9pbmRleC5tanMnO1xuXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbkNvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxyXG5cclxuUGVybWlzc2lvbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgYW5kL29yIGRpc3RyaWJ1dGUgdGhpcyBzb2Z0d2FyZSBmb3IgYW55XHJcbnB1cnBvc2Ugd2l0aCBvciB3aXRob3V0IGZlZSBpcyBoZXJlYnkgZ3JhbnRlZC5cclxuXHJcblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIgQU5EIFRIRSBBVVRIT1IgRElTQ0xBSU1TIEFMTCBXQVJSQU5USUVTIFdJVEhcclxuUkVHQVJEIFRPIFRISVMgU09GVFdBUkUgSU5DTFVESU5HIEFMTCBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZXHJcbkFORCBGSVRORVNTLiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SIEJFIExJQUJMRSBGT1IgQU5ZIFNQRUNJQUwsIERJUkVDVCxcclxuSU5ESVJFQ1QsIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBPUiBBTlkgREFNQUdFUyBXSEFUU09FVkVSIFJFU1VMVElORyBGUk9NXHJcbkxPU1MgT0YgVVNFLCBEQVRBIE9SIFBST0ZJVFMsIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBORUdMSUdFTkNFIE9SXHJcbk9USEVSIFRPUlRJT1VTIEFDVElPTiwgQVJJU0lORyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBVU0UgT1JcclxuUEVSRk9STUFOQ0UgT0YgVEhJUyBTT0ZUV0FSRS5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cclxuXHJcbmZ1bmN0aW9uIF9fcmVzdChzLCBlKSB7XHJcbiAgICB2YXIgdCA9IHt9O1xyXG4gICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApXHJcbiAgICAgICAgdFtwXSA9IHNbcF07XHJcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpXHJcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcclxuICAgICAgICB9XHJcbiAgICByZXR1cm4gdDtcclxufVxuXG5mdW5jdGlvbiBibHVyKG5vZGUsIHsgZGVsYXkgPSAwLCBkdXJhdGlvbiA9IDQwMCwgZWFzaW5nID0gY3ViaWNJbk91dCwgYW1vdW50ID0gNSwgb3BhY2l0eSA9IDAgfSA9IHt9KSB7XG4gICAgY29uc3Qgc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKG5vZGUpO1xuICAgIGNvbnN0IHRhcmdldF9vcGFjaXR5ID0gK3N0eWxlLm9wYWNpdHk7XG4gICAgY29uc3QgZiA9IHN0eWxlLmZpbHRlciA9PT0gJ25vbmUnID8gJycgOiBzdHlsZS5maWx0ZXI7XG4gICAgY29uc3Qgb2QgPSB0YXJnZXRfb3BhY2l0eSAqICgxIC0gb3BhY2l0eSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZGVsYXksXG4gICAgICAgIGR1cmF0aW9uLFxuICAgICAgICBlYXNpbmcsXG4gICAgICAgIGNzczogKF90LCB1KSA9PiBgb3BhY2l0eTogJHt0YXJnZXRfb3BhY2l0eSAtIChvZCAqIHUpfTsgZmlsdGVyOiAke2Z9IGJsdXIoJHt1ICogYW1vdW50fXB4KTtgXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGZhZGUobm9kZSwgeyBkZWxheSA9IDAsIGR1cmF0aW9uID0gNDAwLCBlYXNpbmcgPSBsaW5lYXIgfSA9IHt9KSB7XG4gICAgY29uc3QgbyA9ICtnZXRDb21wdXRlZFN0eWxlKG5vZGUpLm9wYWNpdHk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZGVsYXksXG4gICAgICAgIGR1cmF0aW9uLFxuICAgICAgICBlYXNpbmcsXG4gICAgICAgIGNzczogdCA9PiBgb3BhY2l0eTogJHt0ICogb31gXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGZseShub2RlLCB7IGRlbGF5ID0gMCwgZHVyYXRpb24gPSA0MDAsIGVhc2luZyA9IGN1YmljT3V0LCB4ID0gMCwgeSA9IDAsIG9wYWNpdHkgPSAwIH0gPSB7fSkge1xuICAgIGNvbnN0IHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShub2RlKTtcbiAgICBjb25zdCB0YXJnZXRfb3BhY2l0eSA9ICtzdHlsZS5vcGFjaXR5O1xuICAgIGNvbnN0IHRyYW5zZm9ybSA9IHN0eWxlLnRyYW5zZm9ybSA9PT0gJ25vbmUnID8gJycgOiBzdHlsZS50cmFuc2Zvcm07XG4gICAgY29uc3Qgb2QgPSB0YXJnZXRfb3BhY2l0eSAqICgxIC0gb3BhY2l0eSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZGVsYXksXG4gICAgICAgIGR1cmF0aW9uLFxuICAgICAgICBlYXNpbmcsXG4gICAgICAgIGNzczogKHQsIHUpID0+IGBcblx0XHRcdHRyYW5zZm9ybTogJHt0cmFuc2Zvcm19IHRyYW5zbGF0ZSgkeygxIC0gdCkgKiB4fXB4LCAkeygxIC0gdCkgKiB5fXB4KTtcblx0XHRcdG9wYWNpdHk6ICR7dGFyZ2V0X29wYWNpdHkgLSAob2QgKiB1KX1gXG4gICAgfTtcbn1cbmZ1bmN0aW9uIHNsaWRlKG5vZGUsIHsgZGVsYXkgPSAwLCBkdXJhdGlvbiA9IDQwMCwgZWFzaW5nID0gY3ViaWNPdXQgfSA9IHt9KSB7XG4gICAgY29uc3Qgc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKG5vZGUpO1xuICAgIGNvbnN0IG9wYWNpdHkgPSArc3R5bGUub3BhY2l0eTtcbiAgICBjb25zdCBoZWlnaHQgPSBwYXJzZUZsb2F0KHN0eWxlLmhlaWdodCk7XG4gICAgY29uc3QgcGFkZGluZ190b3AgPSBwYXJzZUZsb2F0KHN0eWxlLnBhZGRpbmdUb3ApO1xuICAgIGNvbnN0IHBhZGRpbmdfYm90dG9tID0gcGFyc2VGbG9hdChzdHlsZS5wYWRkaW5nQm90dG9tKTtcbiAgICBjb25zdCBtYXJnaW5fdG9wID0gcGFyc2VGbG9hdChzdHlsZS5tYXJnaW5Ub3ApO1xuICAgIGNvbnN0IG1hcmdpbl9ib3R0b20gPSBwYXJzZUZsb2F0KHN0eWxlLm1hcmdpbkJvdHRvbSk7XG4gICAgY29uc3QgYm9yZGVyX3RvcF93aWR0aCA9IHBhcnNlRmxvYXQoc3R5bGUuYm9yZGVyVG9wV2lkdGgpO1xuICAgIGNvbnN0IGJvcmRlcl9ib3R0b21fd2lkdGggPSBwYXJzZUZsb2F0KHN0eWxlLmJvcmRlckJvdHRvbVdpZHRoKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBkZWxheSxcbiAgICAgICAgZHVyYXRpb24sXG4gICAgICAgIGVhc2luZyxcbiAgICAgICAgY3NzOiB0ID0+ICdvdmVyZmxvdzogaGlkZGVuOycgK1xuICAgICAgICAgICAgYG9wYWNpdHk6ICR7TWF0aC5taW4odCAqIDIwLCAxKSAqIG9wYWNpdHl9O2AgK1xuICAgICAgICAgICAgYGhlaWdodDogJHt0ICogaGVpZ2h0fXB4O2AgK1xuICAgICAgICAgICAgYHBhZGRpbmctdG9wOiAke3QgKiBwYWRkaW5nX3RvcH1weDtgICtcbiAgICAgICAgICAgIGBwYWRkaW5nLWJvdHRvbTogJHt0ICogcGFkZGluZ19ib3R0b219cHg7YCArXG4gICAgICAgICAgICBgbWFyZ2luLXRvcDogJHt0ICogbWFyZ2luX3RvcH1weDtgICtcbiAgICAgICAgICAgIGBtYXJnaW4tYm90dG9tOiAke3QgKiBtYXJnaW5fYm90dG9tfXB4O2AgK1xuICAgICAgICAgICAgYGJvcmRlci10b3Atd2lkdGg6ICR7dCAqIGJvcmRlcl90b3Bfd2lkdGh9cHg7YCArXG4gICAgICAgICAgICBgYm9yZGVyLWJvdHRvbS13aWR0aDogJHt0ICogYm9yZGVyX2JvdHRvbV93aWR0aH1weDtgXG4gICAgfTtcbn1cbmZ1bmN0aW9uIHNjYWxlKG5vZGUsIHsgZGVsYXkgPSAwLCBkdXJhdGlvbiA9IDQwMCwgZWFzaW5nID0gY3ViaWNPdXQsIHN0YXJ0ID0gMCwgb3BhY2l0eSA9IDAgfSA9IHt9KSB7XG4gICAgY29uc3Qgc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKG5vZGUpO1xuICAgIGNvbnN0IHRhcmdldF9vcGFjaXR5ID0gK3N0eWxlLm9wYWNpdHk7XG4gICAgY29uc3QgdHJhbnNmb3JtID0gc3R5bGUudHJhbnNmb3JtID09PSAnbm9uZScgPyAnJyA6IHN0eWxlLnRyYW5zZm9ybTtcbiAgICBjb25zdCBzZCA9IDEgLSBzdGFydDtcbiAgICBjb25zdCBvZCA9IHRhcmdldF9vcGFjaXR5ICogKDEgLSBvcGFjaXR5KTtcbiAgICByZXR1cm4ge1xuICAgICAgICBkZWxheSxcbiAgICAgICAgZHVyYXRpb24sXG4gICAgICAgIGVhc2luZyxcbiAgICAgICAgY3NzOiAoX3QsIHUpID0+IGBcblx0XHRcdHRyYW5zZm9ybTogJHt0cmFuc2Zvcm19IHNjYWxlKCR7MSAtIChzZCAqIHUpfSk7XG5cdFx0XHRvcGFjaXR5OiAke3RhcmdldF9vcGFjaXR5IC0gKG9kICogdSl9XG5cdFx0YFxuICAgIH07XG59XG5mdW5jdGlvbiBkcmF3KG5vZGUsIHsgZGVsYXkgPSAwLCBzcGVlZCwgZHVyYXRpb24sIGVhc2luZyA9IGN1YmljSW5PdXQgfSA9IHt9KSB7XG4gICAgbGV0IGxlbiA9IG5vZGUuZ2V0VG90YWxMZW5ndGgoKTtcbiAgICBjb25zdCBzdHlsZSA9IGdldENvbXB1dGVkU3R5bGUobm9kZSk7XG4gICAgaWYgKHN0eWxlLnN0cm9rZUxpbmVjYXAgIT09ICdidXR0Jykge1xuICAgICAgICBsZW4gKz0gcGFyc2VJbnQoc3R5bGUuc3Ryb2tlV2lkdGgpO1xuICAgIH1cbiAgICBpZiAoZHVyYXRpb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAoc3BlZWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZHVyYXRpb24gPSA4MDA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBkdXJhdGlvbiA9IGxlbiAvIHNwZWVkO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBkdXJhdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBkdXJhdGlvbiA9IGR1cmF0aW9uKGxlbik7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIGRlbGF5LFxuICAgICAgICBkdXJhdGlvbixcbiAgICAgICAgZWFzaW5nLFxuICAgICAgICBjc3M6ICh0LCB1KSA9PiBgc3Ryb2tlLWRhc2hhcnJheTogJHt0ICogbGVufSAke3UgKiBsZW59YFxuICAgIH07XG59XG5mdW5jdGlvbiBjcm9zc2ZhZGUoX2EpIHtcbiAgICB2YXIgeyBmYWxsYmFjayB9ID0gX2EsIGRlZmF1bHRzID0gX19yZXN0KF9hLCBbXCJmYWxsYmFja1wiXSk7XG4gICAgY29uc3QgdG9fcmVjZWl2ZSA9IG5ldyBNYXAoKTtcbiAgICBjb25zdCB0b19zZW5kID0gbmV3IE1hcCgpO1xuICAgIGZ1bmN0aW9uIGNyb3NzZmFkZShmcm9tLCBub2RlLCBwYXJhbXMpIHtcbiAgICAgICAgY29uc3QgeyBkZWxheSA9IDAsIGR1cmF0aW9uID0gZCA9PiBNYXRoLnNxcnQoZCkgKiAzMCwgZWFzaW5nID0gY3ViaWNPdXQgfSA9IGFzc2lnbihhc3NpZ24oe30sIGRlZmF1bHRzKSwgcGFyYW1zKTtcbiAgICAgICAgY29uc3QgdG8gPSBub2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICBjb25zdCBkeCA9IGZyb20ubGVmdCAtIHRvLmxlZnQ7XG4gICAgICAgIGNvbnN0IGR5ID0gZnJvbS50b3AgLSB0by50b3A7XG4gICAgICAgIGNvbnN0IGR3ID0gZnJvbS53aWR0aCAvIHRvLndpZHRoO1xuICAgICAgICBjb25zdCBkaCA9IGZyb20uaGVpZ2h0IC8gdG8uaGVpZ2h0O1xuICAgICAgICBjb25zdCBkID0gTWF0aC5zcXJ0KGR4ICogZHggKyBkeSAqIGR5KTtcbiAgICAgICAgY29uc3Qgc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKG5vZGUpO1xuICAgICAgICBjb25zdCB0cmFuc2Zvcm0gPSBzdHlsZS50cmFuc2Zvcm0gPT09ICdub25lJyA/ICcnIDogc3R5bGUudHJhbnNmb3JtO1xuICAgICAgICBjb25zdCBvcGFjaXR5ID0gK3N0eWxlLm9wYWNpdHk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkZWxheSxcbiAgICAgICAgICAgIGR1cmF0aW9uOiBpc19mdW5jdGlvbihkdXJhdGlvbikgPyBkdXJhdGlvbihkKSA6IGR1cmF0aW9uLFxuICAgICAgICAgICAgZWFzaW5nLFxuICAgICAgICAgICAgY3NzOiAodCwgdSkgPT4gYFxuXHRcdFx0XHRvcGFjaXR5OiAke3QgKiBvcGFjaXR5fTtcblx0XHRcdFx0dHJhbnNmb3JtLW9yaWdpbjogdG9wIGxlZnQ7XG5cdFx0XHRcdHRyYW5zZm9ybTogJHt0cmFuc2Zvcm19IHRyYW5zbGF0ZSgke3UgKiBkeH1weCwke3UgKiBkeX1weCkgc2NhbGUoJHt0ICsgKDEgLSB0KSAqIGR3fSwgJHt0ICsgKDEgLSB0KSAqIGRofSk7XG5cdFx0XHRgXG4gICAgICAgIH07XG4gICAgfVxuICAgIGZ1bmN0aW9uIHRyYW5zaXRpb24oaXRlbXMsIGNvdW50ZXJwYXJ0cywgaW50cm8pIHtcbiAgICAgICAgcmV0dXJuIChub2RlLCBwYXJhbXMpID0+IHtcbiAgICAgICAgICAgIGl0ZW1zLnNldChwYXJhbXMua2V5LCB7XG4gICAgICAgICAgICAgICAgcmVjdDogbm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChjb3VudGVycGFydHMuaGFzKHBhcmFtcy5rZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgcmVjdCB9ID0gY291bnRlcnBhcnRzLmdldChwYXJhbXMua2V5KTtcbiAgICAgICAgICAgICAgICAgICAgY291bnRlcnBhcnRzLmRlbGV0ZShwYXJhbXMua2V5KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNyb3NzZmFkZShyZWN0LCBub2RlLCBwYXJhbXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBpZiB0aGUgbm9kZSBpcyBkaXNhcHBlYXJpbmcgYWx0b2dldGhlclxuICAgICAgICAgICAgICAgIC8vIChpLmUuIHdhc24ndCBjbGFpbWVkIGJ5IHRoZSBvdGhlciBsaXN0KVxuICAgICAgICAgICAgICAgIC8vIHRoZW4gd2UgbmVlZCB0byBzdXBwbHkgYW4gb3V0cm9cbiAgICAgICAgICAgICAgICBpdGVtcy5kZWxldGUocGFyYW1zLmtleSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbGxiYWNrICYmIGZhbGxiYWNrKG5vZGUsIHBhcmFtcywgaW50cm8pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIFtcbiAgICAgICAgdHJhbnNpdGlvbih0b19zZW5kLCB0b19yZWNlaXZlLCBmYWxzZSksXG4gICAgICAgIHRyYW5zaXRpb24odG9fcmVjZWl2ZSwgdG9fc2VuZCwgdHJ1ZSlcbiAgICBdO1xufVxuXG5leHBvcnQgeyBibHVyLCBjcm9zc2ZhZGUsIGRyYXcsIGZhZGUsIGZseSwgc2NhbGUsIHNsaWRlIH07XG4iLCAiPHNjcmlwdCBsYW5nPVwidHNcIj5cbiAgICBpbXBvcnQgeyBjcmVhdGVFdmVudERpc3BhdGNoZXIgfSBmcm9tIFwic3ZlbHRlXCI7XG4gICAgY29uc3QgZGlzcGF0Y2ggPSBjcmVhdGVFdmVudERpc3BhdGNoZXIoKTtcbiAgICBsZXQgcG9zOiBudW1iZXIsIGFjdGl2ZTogYm9vbGVhbjtcbiAgICBleHBvcnQgeyBwb3MgfTtcblxuICAgIGZ1bmN0aW9uIGhhbmRsZShub2RlOiBFbGVtZW50KSB7XG4gICAgICAgIGNvbnN0IG9uRG93biA9IGdldE9uRG93bihub2RlKTtcblxuICAgICAgICBub2RlLmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaHN0YXJ0XCIsIG9uRG93bik7XG4gICAgICAgIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLCBvbkRvd24pO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZGVzdHJveSgpIHtcbiAgICAgICAgICAgICAgICBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0b3VjaHN0YXJ0XCIsIG9uRG93bik7XG4gICAgICAgICAgICAgICAgbm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIG9uRG93bik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0T25Eb3duKG5vZGU6IEVsZW1lbnQpIHtcbiAgICAgICAgY29uc3Qgb25Nb3ZlID0gZ2V0T25Nb3ZlKG5vZGUpO1xuXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoZTogTW91c2VFdmVudCkge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgbm9kZS5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudChcImRyYWdzdGFydFwiKSk7XG5cbiAgICAgICAgICAgIGNvbnN0IG1vdmVldmVudCA9IFwidG91Y2hlc1wiIGluIGUgPyBcInRvdWNobW92ZVwiIDogXCJtb3VzZW1vdmVcIjtcbiAgICAgICAgICAgIGNvbnN0IHVwZXZlbnQgPSBcInRvdWNoZXNcIiBpbiBlID8gXCJ0b3VjaGVuZFwiIDogXCJtb3VzZXVwXCI7XG5cbiAgICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIobW92ZWV2ZW50LCBvbk1vdmUpO1xuICAgICAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcih1cGV2ZW50LCBvblVwKTtcblxuICAgICAgICAgICAgZnVuY3Rpb24gb25VcChlOiBNb3VzZUV2ZW50KSB7XG4gICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgICAgICAgICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIobW92ZWV2ZW50LCBvbk1vdmUpO1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIodXBldmVudCwgb25VcCk7XG5cbiAgICAgICAgICAgICAgICBub2RlLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KFwiZHJhZ2VuZFwiKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0T25Nb3ZlKG5vZGU6IEVsZW1lbnQpIHtcbiAgICAgICAgY29uc3QgdHJhY2sgPSBub2RlLnBhcmVudEVsZW1lbnQ7XG5cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChlOiBNb3VzZUV2ZW50IHwgVG91Y2hFdmVudCkge1xuICAgICAgICAgICAgY29uc3QgeyBsZWZ0LCB3aWR0aCB9ID0gdHJhY2suZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgICBjb25zdCBjbGlja09mZnNldCA9XG4gICAgICAgICAgICAgICAgXCJ0b3VjaGVzXCIgaW4gZSA/IGUudG91Y2hlc1swXS5jbGllbnRYIDogZS5jbGllbnRYO1xuICAgICAgICAgICAgY29uc3QgY2xpY2tQb3MgPVxuICAgICAgICAgICAgICAgIE1hdGgubWluKE1hdGgubWF4KChjbGlja09mZnNldCAtIGxlZnQpIC8gd2lkdGgsIDApLCAxKSB8fCAwO1xuICAgICAgICAgICAgbm9kZS5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudChcImRyYWdcIiwgeyBkZXRhaWw6IGNsaWNrUG9zIH0pKTtcbiAgICAgICAgfTtcbiAgICB9XG48L3NjcmlwdD5cblxuPGRpdlxuICAgIGNsYXNzPVwidGh1bWJcIlxuICAgIHN0eWxlPXtgbGVmdDogJHtwb3MgKiAxMDB9JTtgfVxuICAgIHVzZTpoYW5kbGVcbiAgICBvbjpkcmFnc3RhcnQ9eygpID0+ICgoYWN0aXZlID0gdHJ1ZSksIGRpc3BhdGNoKFwiYWN0aXZlXCIsIHRydWUpKX1cbiAgICBvbjpkcmFnPXsoeyBkZXRhaWw6IHYgfSkgPT4gKHBvcyA9IHYpfVxuICAgIG9uOmRyYWdlbmQ9eygpID0+ICgoYWN0aXZlID0gZmFsc2UpLCBkaXNwYXRjaChcImFjdGl2ZVwiLCBmYWxzZSkpfVxuICAgIG9uOmNsaWNrfHN0b3BQcm9wYWdhdGlvblxuPlxuICAgIDxkaXYgY2xhc3M9XCJ0aHVtYi1jb250ZW50XCIgY2xhc3M6YWN0aXZlPlxuICAgICAgICA8c2xvdCAvPlxuICAgIDwvZGl2PlxuPC9kaXY+XG5cbjxzdHlsZT5cbiAgICAudGh1bWIge1xuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgIHRvcDogNTAlO1xuICAgICAgICB3aWR0aDogMDtcbiAgICAgICAgaGVpZ2h0OiAwO1xuICAgIH1cbiAgICAudGh1bWItY29udGVudCB7XG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgd2lkdGg6IGZpdC1jb250ZW50O1xuICAgICAgICBoZWlnaHQ6IGZpdC1jb250ZW50O1xuICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKTtcbiAgICB9XG5cbiAgICAudGh1bWItY29udGVudDo6YmVmb3JlIHtcbiAgICAgICAgY29udGVudDogXCJcIjtcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICB3aWR0aDogMjAwJTtcbiAgICAgICAgaGVpZ2h0OiAyMDAlO1xuICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtMjUlLCAtMjUlKSBzY2FsZSgwKTtcbiAgICAgICAgYm9yZGVyLXJhZGl1czogMTAwdmg7XG4gICAgICAgIGJhY2tncm91bmQ6IHZhcigtLWludGVyYWN0aXZlLWhvdmVyKTtcbiAgICAgICAgb3BhY2l0eTogMzAlO1xuICAgICAgICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMTAwbXMgZWFzZS1pbi1vdXQ7XG4gICAgfVxuXG4gICAgLnRodW1iLWNvbnRlbnQuYWN0aXZlOjpiZWZvcmUge1xuICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtMjUlLCAtMjUlKSBzY2FsZSgxKTtcbiAgICB9XG48L3N0eWxlPlxuIiwgIjxzY3JpcHQgbGFuZz1cInRzXCI+XG4gICAgaW1wb3J0IHsgY3JlYXRlRXZlbnREaXNwYXRjaGVyIH0gZnJvbSBcInN2ZWx0ZVwiO1xuICAgIGltcG9ydCBUaHVtYiBmcm9tIFwiLi9UaHVtYi5zdmVsdGVcIjtcblxuICAgIGNvbnN0IGRpc3BhdGNoID0gY3JlYXRlRXZlbnREaXNwYXRjaGVyKCk7XG5cbiAgICBsZXQgbmFtZTogc3RyaW5nW10gPSBbXTtcbiAgICBsZXQgcmFuZ2UgPSBmYWxzZTtcbiAgICBsZXQgbWluID0gMDtcbiAgICBsZXQgbWF4ID0gMTAwO1xuICAgIGxldCBzdGVwID0gMTtcbiAgICBsZXQgdmFsdWUgPSBbbWluLCBtYXhdO1xuICAgIGxldCBwb3M6IG51bWJlcltdO1xuICAgIGxldCBhY3RpdmUgPSBmYWxzZTtcbiAgICBsZXQgb3JkZXIgPSBmYWxzZTtcblxuICAgIGV4cG9ydCB7IG5hbWUsIHJhbmdlLCBtaW4sIG1heCwgc3RlcCwgdmFsdWUsIG9yZGVyIH07XG5cbiAgICAkOiBpZiAoYWN0aXZlKSBzZXRWYWx1ZShwb3MpO1xuICAgICQ6IGlmICghYWN0aXZlKSBzZXRQb3ModmFsdWUpO1xuICAgICQ6IGlmIChyYW5nZSAmJiBvcmRlciAmJiBhY3RpdmUpIHBvcyA9IGNoZWNrUG9zKHBvcyk7XG4gICAgJDogbWluLCBtYXgsIGNsYW1wKCk7XG4gICAgJDogcHJvZ3Jlc3MgPSBgXG4gICAgbGVmdDogJHtyYW5nZSA/IE1hdGgubWluKHBvc1swXSwgcG9zWzFdKSAqIDEwMCA6IDB9JTtcbiAgICByaWdodDogJHsxMDAgLSBNYXRoLm1heChwb3NbMF0sIHJhbmdlID8gcG9zWzFdIDogcG9zWzBdKSAqIDEwMH0lO1xuICBgO1xuXG4gICAgZnVuY3Rpb24gc2V0VmFsdWUocG9zOiBudW1iZXJbXSkge1xuICAgICAgICBjb25zdCBvZmZzZXQgPSBtaW4gJSBzdGVwO1xuICAgICAgICBjb25zdCB3aWR0aCA9IG1heCAtIG1pbjtcbiAgICAgICAgdmFsdWUgPSBwb3NcbiAgICAgICAgICAgIC5tYXAoKHYpID0+IG1pbiArIHYgKiB3aWR0aClcbiAgICAgICAgICAgIC5tYXAoKHYpID0+IE1hdGgucm91bmQoKHYgLSBvZmZzZXQpIC8gc3RlcCkgKiBzdGVwICsgb2Zmc2V0KTtcbiAgICAgICAgZGlzcGF0Y2goXCJpbnB1dFwiLCB2YWx1ZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0UG9zKHZhbHVlOiBudW1iZXJbXSkge1xuICAgICAgICBwb3MgPSB2YWx1ZVxuICAgICAgICAgICAgLm1hcCgodikgPT4gTWF0aC5taW4oTWF0aC5tYXgodiwgbWluKSwgbWF4KSlcbiAgICAgICAgICAgIC5tYXAoKHYpID0+ICh2IC0gbWluKSAvIChtYXggLSBtaW4pKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjaGVja1Bvcyhwb3M6IG51bWJlcltdKSB7XG4gICAgICAgIHJldHVybiBbTWF0aC5taW4oLi4ucG9zKSwgTWF0aC5tYXgoLi4ucG9zKV07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xhbXAoKSB7XG4gICAgICAgIHNldFBvcyh2YWx1ZSk7XG4gICAgICAgIHNldFZhbHVlKHBvcyk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGhhbmRsZUNsaWNrKGV2dDogTW91c2VFdmVudCkge1xuICAgICAgICBjb25zdCB0YXJnZXQgPSBldnQudGFyZ2V0IGFzIEhUTUxEaXZFbGVtZW50O1xuICAgICAgICBjb25zdCBjbGljayA9IGV2dC5vZmZzZXRYIC8gdGFyZ2V0LmNsaWVudFdpZHRoO1xuICAgICAgICBjb25zdCBkaXN0YW5jZXMgPSBwb3MubWFwKChwKSA9PiBNYXRoLmFicyhjbGljayAtIHApKTtcbiAgICAgICAgaWYgKGRpc3RhbmNlc1sxXSA+IGRpc3RhbmNlc1swXSkge1xuICAgICAgICAgICAgcG9zID0gW2NsaWNrLCBwb3NbMV1dO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcG9zID0gW3Bvc1swXSwgY2xpY2tdO1xuICAgICAgICB9XG4gICAgICAgIHNldFZhbHVlKHBvcyk7XG4gICAgfVxuPC9zY3JpcHQ+XG5cbjxkaXYgY2xhc3M9XCJ0cmFjay1jb250YWluZXJcIiBvbjpjbGljaz17aGFuZGxlQ2xpY2t9PlxuICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCIgdmFsdWU9e3ZhbHVlWzBdfSBuYW1lPXtuYW1lWzBdfSAvPlxuICAgIHsjaWYgcmFuZ2V9XG4gICAgICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCIgdmFsdWU9e3ZhbHVlWzFdfSBuYW1lPXtuYW1lWzFdfSAvPlxuICAgIHsvaWZ9XG4gICAgPGRpdiBjbGFzcz1cInRyYWNrXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJwcm9ncmVzc1wiIHN0eWxlPXtwcm9ncmVzc30gLz5cbiAgICAgICAgPFRodW1iIGJpbmQ6cG9zPXtwb3NbMF19IG9uOmFjdGl2ZT17KHsgZGV0YWlsOiB2IH0pID0+IChhY3RpdmUgPSB2KX0+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwidGh1bWJcIiAvPlxuICAgICAgICA8L1RodW1iPlxuICAgICAgICB7I2lmIHJhbmdlfVxuICAgICAgICAgICAgPFRodW1iXG4gICAgICAgICAgICAgICAgYmluZDpwb3M9e3Bvc1sxXX1cbiAgICAgICAgICAgICAgICBvbjphY3RpdmU9eyh7IGRldGFpbDogdiB9KSA9PiAoYWN0aXZlID0gdil9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRodW1iXCIgLz5cbiAgICAgICAgICAgIDwvVGh1bWI+XG4gICAgICAgIHsvaWZ9XG4gICAgPC9kaXY+XG48L2Rpdj5cblxuPHN0eWxlPlxuICAgIGlucHV0IHtcbiAgICAgICAgZGlzcGxheTogbm9uZTtcbiAgICB9XG5cbiAgICAudHJhY2stY29udGFpbmVyIHtcbiAgICAgICAgd2lkdGg6IGNhbGMoMTAwJSAtIDE2cHgpO1xuICAgICAgICBoZWlnaHQ6IDE2cHg7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgfVxuXG4gICAgLnRyYWNrIHtcbiAgICAgICAgbWFyZ2luOiAwIDhweDtcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICBoZWlnaHQ6IDRweDtcbiAgICAgICAgd2lkdGg6IGNhbGMoMTAwJSAtIDE2cHgpO1xuICAgICAgICBib3JkZXItcmFkaXVzOiAxMDB2aDtcbiAgICAgICAgYmFja2dyb3VuZDogdmFyKC0tYmFja2dyb3VuZC1tb2RpZmllci1mb3JtLWZpZWxkKTtcbiAgICB9XG5cbiAgICAucHJvZ3Jlc3Mge1xuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgIGxlZnQ6IDA7XG4gICAgICAgIHJpZ2h0OiAwO1xuICAgICAgICB0b3A6IDA7XG4gICAgICAgIGJvdHRvbTogMDtcbiAgICAgICAgYm9yZGVyLXJhZGl1czogMTAwdmg7XG4gICAgICAgIGJhY2tncm91bmQ6IHZhcigtLWludGVyYWN0aXZlLWFjY2VudCk7XG4gICAgfVxuXG4gICAgLnRodW1iIHtcbiAgICAgICAgd2lkdGg6IDE2cHg7XG4gICAgICAgIGhlaWdodDogMTZweDtcbiAgICAgICAgYm9yZGVyLXJhZGl1czogMTAwdmg7XG4gICAgICAgIGJhY2tncm91bmQ6IHZhcigtLWludGVyYWN0aXZlLWFjY2VudCk7XG4gICAgfVxuXG4gICAgLnRodW1iOmhvdmVyLFxuICAgIC50aHVtYjphY3RpdmUge1xuICAgICAgICBiYWNrZ3JvdW5kOiB2YXIoLS1pbnRlcmFjdGl2ZS1ob3Zlcik7XG4gICAgfVxuPC9zdHlsZT5cbiIsICI8c2NyaXB0PmV4cG9ydCBsZXQgY29sb3IgPSBgY29ybmZsb3dlcmJsdWVgO1xuZXhwb3J0IGxldCBkdXJhdGlvbiA9IGAxLjVzYDtcbmV4cG9ydCBsZXQgc2l6ZSA9IGAxZW1gO1xuPC9zY3JpcHQ+XG5cbjxkaXZcbiAgc3R5bGU9XCItLWR1cmF0aW9uOiB7ZHVyYXRpb259XCJcbiAgc3R5bGU6Ym9yZGVyLWNvbG9yPVwie2NvbG9yfSB0cmFuc3BhcmVudCB7Y29sb3J9XG4gIHtjb2xvcn1cIlxuICBzdHlsZTp3aWR0aD17c2l6ZX1cbiAgc3R5bGU6aGVpZ2h0PXtzaXplfVxuLz5cblxuPHN0eWxlPlxuICBkaXYge1xuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xuICAgIG1hcmdpbjogMCAzcHQ7XG4gICAgYm9yZGVyLXdpZHRoOiBjYWxjKDFlbSAvIDUpO1xuICAgIGJvcmRlci1zdHlsZTogc29saWQ7XG4gICAgYm9yZGVyLXJhZGl1czogNTAlO1xuICAgIGFuaW1hdGlvbjogdmFyKC0tZHVyYXRpb24pIGluZmluaXRlIHJvdGF0ZTtcbiAgfVxuICBAa2V5ZnJhbWVzIHJvdGF0ZSB7XG4gICAgMTAwJSB7XG4gICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgzNjBkZWcpO1xuICAgIH1cbiAgfVxuPC9zdHlsZT5cbiIsICI8c3ZnIHsuLi4kJHByb3BzfSBmaWxsPVwiY3VycmVudENvbG9yXCIgdmlld0JveD1cIjAgMCAxNiAxNlwiPlxuICA8cGF0aFxuICAgIGQ9XCJNMy42NDYgOS4xNDZhLjUuNSAwIDAgMSAuNzA4IDBMOCAxMi43OTNsMy42NDYtMy42NDdhLjUuNSAwIDAgMSAuNzA4LjcwOGwtNCA0YS41LjUgMCAwIDEtLjcwOCAwbC00LTRhLjUuNSAwIDAgMSAwLS43MDh6bTAtMi4yOTJhLjUuNSAwIDAgMCAuNzA4IDBMOCAzLjIwN2wzLjY0NiAzLjY0N2EuNS41IDAgMCAwIC43MDgtLjcwOGwtNC00YS41LjUgMCAwIDAtLjcwOCAwbC00IDRhLjUuNSAwIDAgMCAwIC43MDh6XCJcbiAgLz5cbjwvc3ZnPlxuIiwgIjxzdmcgey4uLiQkcHJvcHN9IHZpZXdCb3g9XCIwIDAgMjAgMjBcIiBmaWxsPVwiY3VycmVudENvbG9yXCI+XG4gIDxwYXRoXG4gICAgZD1cIk0xMCAxLjZhOC40IDguNCAwIDEwMCAxNi44IDguNCA4LjQgMCAwMDAtMTYuOHptNC43ODkgMTEuNDYxTDEzLjA2IDE0Ljc5IDEwIDExLjcyOWwtMy4wNjEgMy4wNkw1LjIxIDEzLjA2IDguMjcyIDEwIDUuMjExIDYuOTM5IDYuOTQgNS4yMTEgMTAgOC4yNzFsMy4wNjEtMy4wNjEgMS43MjkgMS43MjlMMTEuNzI4IDEwbDMuMDYxIDMuMDYxelwiXG4gIC8+XG48L3N2Zz5cbiIsICI8c3ZnIHsuLi4kJHByb3BzfSB2aWV3Qm94PVwiMCAwIDI0IDI0XCIgZmlsbD1cImN1cnJlbnRDb2xvclwiPlxuICA8cGF0aCBmaWxsPVwibm9uZVwiIGQ9XCJNMCAwaDI0djI0SDBWMHpcIiAvPlxuICA8cGF0aFxuICAgIGQ9XCJNMTQuNDggMTEuOTVjLjE3LjAyLjM0LjA1LjUyLjA1IDIuMjEgMCA0LTEuNzkgNC00cy0xLjc5LTQtNC00LTQgMS43OS00IDRjMCAuMTguMDMuMzUuMDUuNTJsMy40MyAzLjQzem0yLjIxIDIuMjFMMjIuNTMgMjBIMjN2LTJjMC0yLjE0LTMuNTYtMy41LTYuMzEtMy44NHpNMCAzLjEybDQgNFYxMEgxdjJoM3YzaDJ2LTNoMi44OGwyLjUxIDIuNTFDOS4xOSAxNS4xMSA3IDE2LjMgNyAxOHYyaDkuODhsNCA0IDEuNDEtMS40MUwxLjQxIDEuNzEgMCAzLjEyek02Ljg4IDEwSDZ2LS44OGwuODguODh6XCJcbiAgLz5cbjwvc3ZnPlxuIiwgImltcG9ydCB7IHdyaXRhYmxlIH0gZnJvbSAnLi4vc3RvcmUvaW5kZXgubWpzJztcbmltcG9ydCB7IG5vdywgbG9vcCwgYXNzaWduIH0gZnJvbSAnLi4vaW50ZXJuYWwvaW5kZXgubWpzJztcbmltcG9ydCB7IGxpbmVhciB9IGZyb20gJy4uL2Vhc2luZy9pbmRleC5tanMnO1xuXG5mdW5jdGlvbiBpc19kYXRlKG9iaikge1xuICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufVxuXG5mdW5jdGlvbiB0aWNrX3NwcmluZyhjdHgsIGxhc3RfdmFsdWUsIGN1cnJlbnRfdmFsdWUsIHRhcmdldF92YWx1ZSkge1xuICAgIGlmICh0eXBlb2YgY3VycmVudF92YWx1ZSA9PT0gJ251bWJlcicgfHwgaXNfZGF0ZShjdXJyZW50X3ZhbHVlKSkge1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGNvbnN0IGRlbHRhID0gdGFyZ2V0X3ZhbHVlIC0gY3VycmVudF92YWx1ZTtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBjb25zdCB2ZWxvY2l0eSA9IChjdXJyZW50X3ZhbHVlIC0gbGFzdF92YWx1ZSkgLyAoY3R4LmR0IHx8IDEgLyA2MCk7IC8vIGd1YXJkIGRpdiBieSAwXG4gICAgICAgIGNvbnN0IHNwcmluZyA9IGN0eC5vcHRzLnN0aWZmbmVzcyAqIGRlbHRhO1xuICAgICAgICBjb25zdCBkYW1wZXIgPSBjdHgub3B0cy5kYW1waW5nICogdmVsb2NpdHk7XG4gICAgICAgIGNvbnN0IGFjY2VsZXJhdGlvbiA9IChzcHJpbmcgLSBkYW1wZXIpICogY3R4Lmludl9tYXNzO1xuICAgICAgICBjb25zdCBkID0gKHZlbG9jaXR5ICsgYWNjZWxlcmF0aW9uKSAqIGN0eC5kdDtcbiAgICAgICAgaWYgKE1hdGguYWJzKGQpIDwgY3R4Lm9wdHMucHJlY2lzaW9uICYmIE1hdGguYWJzKGRlbHRhKSA8IGN0eC5vcHRzLnByZWNpc2lvbikge1xuICAgICAgICAgICAgcmV0dXJuIHRhcmdldF92YWx1ZTsgLy8gc2V0dGxlZFxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY3R4LnNldHRsZWQgPSBmYWxzZTsgLy8gc2lnbmFsIGxvb3AgdG8ga2VlcCB0aWNraW5nXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICByZXR1cm4gaXNfZGF0ZShjdXJyZW50X3ZhbHVlKSA/XG4gICAgICAgICAgICAgICAgbmV3IERhdGUoY3VycmVudF92YWx1ZS5nZXRUaW1lKCkgKyBkKSA6IGN1cnJlbnRfdmFsdWUgKyBkO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoY3VycmVudF92YWx1ZSkpIHtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICByZXR1cm4gY3VycmVudF92YWx1ZS5tYXAoKF8sIGkpID0+IHRpY2tfc3ByaW5nKGN0eCwgbGFzdF92YWx1ZVtpXSwgY3VycmVudF92YWx1ZVtpXSwgdGFyZ2V0X3ZhbHVlW2ldKSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBjdXJyZW50X3ZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgICAgICBjb25zdCBuZXh0X3ZhbHVlID0ge307XG4gICAgICAgIGZvciAoY29uc3QgayBpbiBjdXJyZW50X3ZhbHVlKSB7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICBuZXh0X3ZhbHVlW2tdID0gdGlja19zcHJpbmcoY3R4LCBsYXN0X3ZhbHVlW2tdLCBjdXJyZW50X3ZhbHVlW2tdLCB0YXJnZXRfdmFsdWVba10pO1xuICAgICAgICB9XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgcmV0dXJuIG5leHRfdmFsdWU7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCBzcHJpbmcgJHt0eXBlb2YgY3VycmVudF92YWx1ZX0gdmFsdWVzYCk7XG4gICAgfVxufVxuZnVuY3Rpb24gc3ByaW5nKHZhbHVlLCBvcHRzID0ge30pIHtcbiAgICBjb25zdCBzdG9yZSA9IHdyaXRhYmxlKHZhbHVlKTtcbiAgICBjb25zdCB7IHN0aWZmbmVzcyA9IDAuMTUsIGRhbXBpbmcgPSAwLjgsIHByZWNpc2lvbiA9IDAuMDEgfSA9IG9wdHM7XG4gICAgbGV0IGxhc3RfdGltZTtcbiAgICBsZXQgdGFzaztcbiAgICBsZXQgY3VycmVudF90b2tlbjtcbiAgICBsZXQgbGFzdF92YWx1ZSA9IHZhbHVlO1xuICAgIGxldCB0YXJnZXRfdmFsdWUgPSB2YWx1ZTtcbiAgICBsZXQgaW52X21hc3MgPSAxO1xuICAgIGxldCBpbnZfbWFzc19yZWNvdmVyeV9yYXRlID0gMDtcbiAgICBsZXQgY2FuY2VsX3Rhc2sgPSBmYWxzZTtcbiAgICBmdW5jdGlvbiBzZXQobmV3X3ZhbHVlLCBvcHRzID0ge30pIHtcbiAgICAgICAgdGFyZ2V0X3ZhbHVlID0gbmV3X3ZhbHVlO1xuICAgICAgICBjb25zdCB0b2tlbiA9IGN1cnJlbnRfdG9rZW4gPSB7fTtcbiAgICAgICAgaWYgKHZhbHVlID09IG51bGwgfHwgb3B0cy5oYXJkIHx8IChzcHJpbmcuc3RpZmZuZXNzID49IDEgJiYgc3ByaW5nLmRhbXBpbmcgPj0gMSkpIHtcbiAgICAgICAgICAgIGNhbmNlbF90YXNrID0gdHJ1ZTsgLy8gY2FuY2VsIGFueSBydW5uaW5nIGFuaW1hdGlvblxuICAgICAgICAgICAgbGFzdF90aW1lID0gbm93KCk7XG4gICAgICAgICAgICBsYXN0X3ZhbHVlID0gbmV3X3ZhbHVlO1xuICAgICAgICAgICAgc3RvcmUuc2V0KHZhbHVlID0gdGFyZ2V0X3ZhbHVlKTtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChvcHRzLnNvZnQpIHtcbiAgICAgICAgICAgIGNvbnN0IHJhdGUgPSBvcHRzLnNvZnQgPT09IHRydWUgPyAuNSA6ICtvcHRzLnNvZnQ7XG4gICAgICAgICAgICBpbnZfbWFzc19yZWNvdmVyeV9yYXRlID0gMSAvIChyYXRlICogNjApO1xuICAgICAgICAgICAgaW52X21hc3MgPSAwOyAvLyBpbmZpbml0ZSBtYXNzLCB1bmFmZmVjdGVkIGJ5IHNwcmluZyBmb3JjZXNcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRhc2spIHtcbiAgICAgICAgICAgIGxhc3RfdGltZSA9IG5vdygpO1xuICAgICAgICAgICAgY2FuY2VsX3Rhc2sgPSBmYWxzZTtcbiAgICAgICAgICAgIHRhc2sgPSBsb29wKG5vdyA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGNhbmNlbF90YXNrKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbmNlbF90YXNrID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHRhc2sgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGludl9tYXNzID0gTWF0aC5taW4oaW52X21hc3MgKyBpbnZfbWFzc19yZWNvdmVyeV9yYXRlLCAxKTtcbiAgICAgICAgICAgICAgICBjb25zdCBjdHggPSB7XG4gICAgICAgICAgICAgICAgICAgIGludl9tYXNzLFxuICAgICAgICAgICAgICAgICAgICBvcHRzOiBzcHJpbmcsXG4gICAgICAgICAgICAgICAgICAgIHNldHRsZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGR0OiAobm93IC0gbGFzdF90aW1lKSAqIDYwIC8gMTAwMFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgY29uc3QgbmV4dF92YWx1ZSA9IHRpY2tfc3ByaW5nKGN0eCwgbGFzdF92YWx1ZSwgdmFsdWUsIHRhcmdldF92YWx1ZSk7XG4gICAgICAgICAgICAgICAgbGFzdF90aW1lID0gbm93O1xuICAgICAgICAgICAgICAgIGxhc3RfdmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICBzdG9yZS5zZXQodmFsdWUgPSBuZXh0X3ZhbHVlKTtcbiAgICAgICAgICAgICAgICBpZiAoY3R4LnNldHRsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGFzayA9IG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiAhY3R4LnNldHRsZWQ7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVsZmlsID0+IHtcbiAgICAgICAgICAgIHRhc2sucHJvbWlzZS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodG9rZW4gPT09IGN1cnJlbnRfdG9rZW4pXG4gICAgICAgICAgICAgICAgICAgIGZ1bGZpbCgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBjb25zdCBzcHJpbmcgPSB7XG4gICAgICAgIHNldCxcbiAgICAgICAgdXBkYXRlOiAoZm4sIG9wdHMpID0+IHNldChmbih0YXJnZXRfdmFsdWUsIHZhbHVlKSwgb3B0cyksXG4gICAgICAgIHN1YnNjcmliZTogc3RvcmUuc3Vic2NyaWJlLFxuICAgICAgICBzdGlmZm5lc3MsXG4gICAgICAgIGRhbXBpbmcsXG4gICAgICAgIHByZWNpc2lvblxuICAgIH07XG4gICAgcmV0dXJuIHNwcmluZztcbn1cblxuZnVuY3Rpb24gZ2V0X2ludGVycG9sYXRvcihhLCBiKSB7XG4gICAgaWYgKGEgPT09IGIgfHwgYSAhPT0gYSlcbiAgICAgICAgcmV0dXJuICgpID0+IGE7XG4gICAgY29uc3QgdHlwZSA9IHR5cGVvZiBhO1xuICAgIGlmICh0eXBlICE9PSB0eXBlb2YgYiB8fCBBcnJheS5pc0FycmF5KGEpICE9PSBBcnJheS5pc0FycmF5KGIpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGludGVycG9sYXRlIHZhbHVlcyBvZiBkaWZmZXJlbnQgdHlwZScpO1xuICAgIH1cbiAgICBpZiAoQXJyYXkuaXNBcnJheShhKSkge1xuICAgICAgICBjb25zdCBhcnIgPSBiLm1hcCgoYmksIGkpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBnZXRfaW50ZXJwb2xhdG9yKGFbaV0sIGJpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0ID0+IGFyci5tYXAoZm4gPT4gZm4odCkpO1xuICAgIH1cbiAgICBpZiAodHlwZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgaWYgKCFhIHx8ICFiKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdPYmplY3QgY2Fubm90IGJlIG51bGwnKTtcbiAgICAgICAgaWYgKGlzX2RhdGUoYSkgJiYgaXNfZGF0ZShiKSkge1xuICAgICAgICAgICAgYSA9IGEuZ2V0VGltZSgpO1xuICAgICAgICAgICAgYiA9IGIuZ2V0VGltZSgpO1xuICAgICAgICAgICAgY29uc3QgZGVsdGEgPSBiIC0gYTtcbiAgICAgICAgICAgIHJldHVybiB0ID0+IG5ldyBEYXRlKGEgKyB0ICogZGVsdGEpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhiKTtcbiAgICAgICAgY29uc3QgaW50ZXJwb2xhdG9ycyA9IHt9O1xuICAgICAgICBrZXlzLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgICAgIGludGVycG9sYXRvcnNba2V5XSA9IGdldF9pbnRlcnBvbGF0b3IoYVtrZXldLCBiW2tleV0pO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHQgPT4ge1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0ge307XG4gICAgICAgICAgICBrZXlzLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgICAgICAgICByZXN1bHRba2V5XSA9IGludGVycG9sYXRvcnNba2V5XSh0KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgaWYgKHR5cGUgPT09ICdudW1iZXInKSB7XG4gICAgICAgIGNvbnN0IGRlbHRhID0gYiAtIGE7XG4gICAgICAgIHJldHVybiB0ID0+IGEgKyB0ICogZGVsdGE7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihgQ2Fubm90IGludGVycG9sYXRlICR7dHlwZX0gdmFsdWVzYCk7XG59XG5mdW5jdGlvbiB0d2VlbmVkKHZhbHVlLCBkZWZhdWx0cyA9IHt9KSB7XG4gICAgY29uc3Qgc3RvcmUgPSB3cml0YWJsZSh2YWx1ZSk7XG4gICAgbGV0IHRhc2s7XG4gICAgbGV0IHRhcmdldF92YWx1ZSA9IHZhbHVlO1xuICAgIGZ1bmN0aW9uIHNldChuZXdfdmFsdWUsIG9wdHMpIHtcbiAgICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgICAgIHN0b3JlLnNldCh2YWx1ZSA9IG5ld192YWx1ZSk7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGFyZ2V0X3ZhbHVlID0gbmV3X3ZhbHVlO1xuICAgICAgICBsZXQgcHJldmlvdXNfdGFzayA9IHRhc2s7XG4gICAgICAgIGxldCBzdGFydGVkID0gZmFsc2U7XG4gICAgICAgIGxldCB7IGRlbGF5ID0gMCwgZHVyYXRpb24gPSA0MDAsIGVhc2luZyA9IGxpbmVhciwgaW50ZXJwb2xhdGUgPSBnZXRfaW50ZXJwb2xhdG9yIH0gPSBhc3NpZ24oYXNzaWduKHt9LCBkZWZhdWx0cyksIG9wdHMpO1xuICAgICAgICBpZiAoZHVyYXRpb24gPT09IDApIHtcbiAgICAgICAgICAgIGlmIChwcmV2aW91c190YXNrKSB7XG4gICAgICAgICAgICAgICAgcHJldmlvdXNfdGFzay5hYm9ydCgpO1xuICAgICAgICAgICAgICAgIHByZXZpb3VzX3Rhc2sgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3RvcmUuc2V0KHZhbHVlID0gdGFyZ2V0X3ZhbHVlKTtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzdGFydCA9IG5vdygpICsgZGVsYXk7XG4gICAgICAgIGxldCBmbjtcbiAgICAgICAgdGFzayA9IGxvb3Aobm93ID0+IHtcbiAgICAgICAgICAgIGlmIChub3cgPCBzdGFydClcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIGlmICghc3RhcnRlZCkge1xuICAgICAgICAgICAgICAgIGZuID0gaW50ZXJwb2xhdGUodmFsdWUsIG5ld192YWx1ZSk7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBkdXJhdGlvbiA9PT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgICAgICAgICAgICAgZHVyYXRpb24gPSBkdXJhdGlvbih2YWx1ZSwgbmV3X3ZhbHVlKTtcbiAgICAgICAgICAgICAgICBzdGFydGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChwcmV2aW91c190YXNrKSB7XG4gICAgICAgICAgICAgICAgcHJldmlvdXNfdGFzay5hYm9ydCgpO1xuICAgICAgICAgICAgICAgIHByZXZpb3VzX3Rhc2sgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgZWxhcHNlZCA9IG5vdyAtIHN0YXJ0O1xuICAgICAgICAgICAgaWYgKGVsYXBzZWQgPiBkdXJhdGlvbikge1xuICAgICAgICAgICAgICAgIHN0b3JlLnNldCh2YWx1ZSA9IG5ld192YWx1ZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgc3RvcmUuc2V0KHZhbHVlID0gZm4oZWFzaW5nKGVsYXBzZWQgLyBkdXJhdGlvbikpKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRhc2sucHJvbWlzZTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgc2V0LFxuICAgICAgICB1cGRhdGU6IChmbiwgb3B0cykgPT4gc2V0KGZuKHRhcmdldF92YWx1ZSwgdmFsdWUpLCBvcHRzKSxcbiAgICAgICAgc3Vic2NyaWJlOiBzdG9yZS5zdWJzY3JpYmVcbiAgICB9O1xufVxuXG5leHBvcnQgeyBzcHJpbmcsIHR3ZWVuZWQgfTtcbiIsICI8c2NyaXB0PmltcG9ydCB7IHNwcmluZyB9IGZyb20gJ3N2ZWx0ZS9tb3Rpb24nO1xuLy8gYmluZCB0byB0aGlzIHN0YXRlIGFuZCBzZXQgaXQgdG8gdHJ1ZSBmcm9tIHBhcmVudFxuZXhwb3J0IGxldCB3aWdnbGUgPSBmYWxzZTtcbi8vIGludGVuZGVkIHVzZSBjYXNlOiBzZXQgbWF4IHZhbHVlIGR1cmluZyB3aWdnbGUgZm9yIG9uZSBvZiBhbmdsZSwgc2NhbGUsIGR4LCBkeSB0aHJvdWdoIHByb3BzXG5leHBvcnQgbGV0IGFuZ2xlID0gMDsgLy8gdHJ5IDIwXG5leHBvcnQgbGV0IHNjYWxlID0gMTsgLy8gdHJ5IDEuMlxuZXhwb3J0IGxldCBkeCA9IDA7IC8vIHRyeSAxMFxuZXhwb3J0IGxldCBkeSA9IDA7IC8vIHRyeSAxMFxuZXhwb3J0IGxldCBkdXJhdGlvbiA9IDIwMDtcbmV4cG9ydCBsZXQgc3RpZmZuZXNzID0gMC4wNTtcbmV4cG9ydCBsZXQgZGFtcGluZyA9IDAuMTtcbmxldCByZXN0U3RhdGUgPSB7IGFuZ2xlOiAwLCBzY2FsZTogMSwgZHg6IDAsIGR5OiAwIH07XG5sZXQgc3RvcmUgPSBzcHJpbmcocmVzdFN0YXRlLCB7IHN0aWZmbmVzcywgZGFtcGluZyB9KTtcbiQ6IHN0b3JlLnNldCh3aWdnbGUgPyB7IHNjYWxlLCBhbmdsZSwgZHgsIGR5IH0gOiByZXN0U3RhdGUpO1xuJDogaWYgKHdpZ2dsZSlcbiAgICBzZXRUaW1lb3V0KCgpID0+ICh3aWdnbGUgPSBmYWxzZSksIGR1cmF0aW9uKTtcbjwvc2NyaXB0PlxuXG48c3BhblxuICBzdHlsZTp0cmFuc2Zvcm09XCJyb3RhdGUoeyRzdG9yZS5hbmdsZX1kZWcpIHNjYWxlKHskc3RvcmUuc2NhbGV9KSB0cmFuc2xhdGUoeyRzdG9yZS5keH1weCxcbiAgeyRzdG9yZS5keX1weClcIlxuPlxuICA8c2xvdCAvPlxuPC9zcGFuPlxuIiwgIjxzY3JpcHQ+aW1wb3J0IHsgY3JlYXRlRXZlbnREaXNwYXRjaGVyIH0gZnJvbSAnc3ZlbHRlJztcbmltcG9ydCB7IGdldF9sYWJlbCwgZ2V0X3ZhbHVlIH0gZnJvbSAnLi8nO1xuaW1wb3J0IENpcmNsZVNwaW5uZXIgZnJvbSAnLi9DaXJjbGVTcGlubmVyLnN2ZWx0ZSc7XG5pbXBvcnQgeyBDcm9zc0ljb24sIERpc2FibGVkSWNvbiwgRXhwYW5kSWNvbiB9IGZyb20gJy4vaWNvbnMnO1xuaW1wb3J0IFdpZ2dsZSBmcm9tICcuL1dpZ2dsZS5zdmVsdGUnO1xuZXhwb3J0IGxldCBhY3RpdmVJbmRleCA9IG51bGw7XG5leHBvcnQgbGV0IGFjdGl2ZU9wdGlvbiA9IG51bGw7XG5leHBvcnQgbGV0IGFkZE9wdGlvbk1zZyA9IGBDcmVhdGUgdGhpcyBvcHRpb24uLi5gO1xuZXhwb3J0IGxldCBhbGxvd1VzZXJPcHRpb25zID0gZmFsc2U7XG5leHBvcnQgbGV0IGF1dG9jb21wbGV0ZSA9IGBvZmZgO1xuZXhwb3J0IGxldCBhdXRvU2Nyb2xsID0gdHJ1ZTtcbmV4cG9ydCBsZXQgYnJlYWtwb2ludCA9IDgwMDsgLy8gYW55IHNjcmVlbiB3aXRoIG1vcmUgaG9yaXpvbnRhbCBwaXhlbHMgaXMgY29uc2lkZXJlZCBkZXNrdG9wLCBiZWxvdyBpcyBtb2JpbGVcbmV4cG9ydCBsZXQgZGVmYXVsdERpc2FibGVkVGl0bGUgPSBgVGhpcyBvcHRpb24gaXMgZGlzYWJsZWRgO1xuZXhwb3J0IGxldCBkaXNhYmxlZCA9IGZhbHNlO1xuZXhwb3J0IGxldCBkaXNhYmxlZElucHV0VGl0bGUgPSBgVGhpcyBpbnB1dCBpcyBkaXNhYmxlZGA7XG5leHBvcnQgbGV0IGZpbHRlckZ1bmMgPSAob3AsIHNlYXJjaFRleHQpID0+IHtcbiAgICBpZiAoIXNlYXJjaFRleHQpXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIHJldHVybiBgJHtnZXRfbGFiZWwob3ApfWAudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhzZWFyY2hUZXh0LnRvTG93ZXJDYXNlKCkpO1xufTtcbmV4cG9ydCBsZXQgZm9jdXNJbnB1dE9uU2VsZWN0ID0gYGRlc2t0b3BgO1xuZXhwb3J0IGxldCBpZCA9IG51bGw7XG5leHBvcnQgbGV0IGlucHV0ID0gbnVsbDtcbmV4cG9ydCBsZXQgaW5wdXRDbGFzcyA9IGBgO1xuZXhwb3J0IGxldCBpbnZhbGlkID0gZmFsc2U7XG5leHBvcnQgbGV0IGxpQWN0aXZlT3B0aW9uQ2xhc3MgPSBgYDtcbmV4cG9ydCBsZXQgbGlPcHRpb25DbGFzcyA9IGBgO1xuZXhwb3J0IGxldCBsaVNlbGVjdGVkQ2xhc3MgPSBgYDtcbmV4cG9ydCBsZXQgbG9hZGluZyA9IGZhbHNlO1xuZXhwb3J0IGxldCBtYXRjaGluZ09wdGlvbnMgPSBbXTtcbmV4cG9ydCBsZXQgbWF4U2VsZWN0ID0gbnVsbDsgLy8gbnVsbCBtZWFucyBhbnkgbnVtYmVyIG9mIG9wdGlvbnMgYXJlIHNlbGVjdGFibGVcbmV4cG9ydCBsZXQgbWF4U2VsZWN0TXNnID0gbnVsbDtcbmV4cG9ydCBsZXQgbmFtZSA9IG51bGw7XG5leHBvcnQgbGV0IG5vT3B0aW9uc01zZyA9IGBObyBtYXRjaGluZyBvcHRpb25zYDtcbmV4cG9ydCBsZXQgb3BlbiA9IGZhbHNlO1xuZXhwb3J0IGxldCBvcHRpb25zO1xuZXhwb3J0IGxldCBvdXRlckRpdiA9IG51bGw7XG5leHBvcnQgbGV0IG91dGVyRGl2Q2xhc3MgPSBgYDtcbmV4cG9ydCBsZXQgcGFyc2VMYWJlbHNBc0h0bWwgPSBmYWxzZTsgLy8gc2hvdWxkIG5vdCBiZSBjb21iaW5lZCB3aXRoIGFsbG93VXNlck9wdGlvbnMhXG5leHBvcnQgbGV0IHBsYWNlaG9sZGVyID0gbnVsbDtcbmV4cG9ydCBsZXQgcmVtb3ZlQWxsVGl0bGUgPSBgUmVtb3ZlIGFsbGA7XG5leHBvcnQgbGV0IHJlbW92ZUJ0blRpdGxlID0gYFJlbW92ZWA7XG5leHBvcnQgbGV0IHJlcXVpcmVkID0gZmFsc2U7XG5leHBvcnQgbGV0IHNlYXJjaFRleHQgPSBgYDtcbmV4cG9ydCBsZXQgc2VsZWN0ZWQgPSBvcHRpb25zPy5maWx0ZXIoKG9wKSA9PiBvcD8ucHJlc2VsZWN0ZWQpID8/IFtdO1xuZXhwb3J0IGxldCBzZWxlY3RlZExhYmVscyA9IFtdO1xuZXhwb3J0IGxldCBzZWxlY3RlZFZhbHVlcyA9IFtdO1xuZXhwb3J0IGxldCBzb3J0U2VsZWN0ZWQgPSBmYWxzZTtcbmV4cG9ydCBsZXQgdWxPcHRpb25zQ2xhc3MgPSBgYDtcbmV4cG9ydCBsZXQgdWxTZWxlY3RlZENsYXNzID0gYGA7XG5leHBvcnQgbGV0IGlucHV0bW9kZSA9IGBgO1xuZXhwb3J0IGxldCBwYXR0ZXJuID0gYGA7XG5pZiAoIShvcHRpb25zPy5sZW5ndGggPiAwKSkge1xuICAgIGlmIChhbGxvd1VzZXJPcHRpb25zKSB7XG4gICAgICAgIG9wdGlvbnMgPSBbXTsgLy8gaW5pdGlhbGl6aW5nIGFzIGFycmF5IGF2b2lkcyBlcnJvcnMgd2hlbiBjb21wb25lbnQgbW91bnRzXG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICAvLyBvbmx5IGVycm9yIGZvciBlbXB0eSBvcHRpb25zIGlmIHVzZXIgaXMgbm90IGFsbG93ZWQgdG8gY3JlYXRlIGN1c3RvbSBvcHRpb25zXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYE11bHRpU2VsZWN0IHJlY2VpdmVkIG5vIG9wdGlvbnNgKTtcbiAgICB9XG59XG5pZiAocGFyc2VMYWJlbHNBc0h0bWwgJiYgYWxsb3dVc2VyT3B0aW9ucykge1xuICAgIGNvbnNvbGUud2FybihgRG9uJ3QgY29tYmluZSBwYXJzZUxhYmVsc0FzSHRtbCBhbmQgYWxsb3dVc2VyT3B0aW9ucy4gSXQncyBzdXNjZXB0aWJsZSB0byBYU1MgYXR0YWNrcyFgKTtcbn1cbmlmIChtYXhTZWxlY3QgIT09IG51bGwgJiYgbWF4U2VsZWN0IDwgMSkge1xuICAgIGNvbnNvbGUuZXJyb3IoYG1heFNlbGVjdCBtdXN0IGJlIG51bGwgb3IgcG9zaXRpdmUgaW50ZWdlciwgZ290ICR7bWF4U2VsZWN0fWApO1xufVxuaWYgKCFBcnJheS5pc0FycmF5KHNlbGVjdGVkKSkge1xuICAgIGNvbnNvbGUuZXJyb3IoYHNlbGVjdGVkIHByb3AgbXVzdCBiZSBhbiBhcnJheSwgZ290ICR7c2VsZWN0ZWR9YCk7XG59XG5jb25zdCBkaXNwYXRjaCA9IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlcigpO1xubGV0IGFkZF9vcHRpb25fbXNnX2lzX2FjdGl2ZSA9IGZhbHNlOyAvLyBjb250cm9scyBhY3RpdmUgc3RhdGUgb2YgPGxpPnthZGRPcHRpb25Nc2d9PC9saT5cbmxldCB3aW5kb3dfd2lkdGg7XG5sZXQgd2lnZ2xlID0gZmFsc2U7IC8vIGNvbnRyb2xzIHdpZ2dsZSBhbmltYXRpb24gd2hlbiB1c2VyIHRyaWVzIHRvIGV4Y2VlZCBtYXhTZWxlY3RcbiQ6IHNlbGVjdGVkTGFiZWxzID0gc2VsZWN0ZWQubWFwKGdldF9sYWJlbCk7XG4kOiBzZWxlY3RlZFZhbHVlcyA9IHNlbGVjdGVkLm1hcChnZXRfdmFsdWUpO1xuLy8gZm9ybVZhbHVlIGJpbmRzIHRvIGlucHV0LmZvcm0tY29udHJvbCB0byBwcmV2ZW50IGZvcm0gc3VibWlzc2lvbiBpZiByZXF1aXJlZFxuLy8gcHJvcCBpcyB0cnVlIGFuZCBubyBvcHRpb25zIGFyZSBzZWxlY3RlZFxuJDogZm9ybVZhbHVlID0gc2VsZWN0ZWRWYWx1ZXMuam9pbihgLGApO1xuJDogaWYgKGZvcm1WYWx1ZSlcbiAgICBpbnZhbGlkID0gZmFsc2U7IC8vIHJlc2V0IGVycm9yIHN0YXR1cyB3aGVuZXZlciBjb21wb25lbnQgc3RhdGUgY2hhbmdlc1xuLy8gb3B0aW9ucyBtYXRjaGluZyB0aGUgY3VycmVudCBzZWFyY2ggdGV4dFxuJDogbWF0Y2hpbmdPcHRpb25zID0gb3B0aW9ucy5maWx0ZXIoKG9wKSA9PiBmaWx0ZXJGdW5jKG9wLCBzZWFyY2hUZXh0KSAmJiAhc2VsZWN0ZWRMYWJlbHMuaW5jbHVkZXMoZ2V0X2xhYmVsKG9wKSkgLy8gcmVtb3ZlIGFscmVhZHkgc2VsZWN0ZWQgb3B0aW9ucyBmcm9tIGRyb3Bkb3duIGxpc3Rcbik7XG4vLyByYWlzZSBpZiBtYXRjaGluZ09wdGlvbnNbYWN0aXZlSW5kZXhdIGRvZXMgbm90IHlpZWxkIGEgdmFsdWVcbmlmIChhY3RpdmVJbmRleCAhPT0gbnVsbCAmJiAhbWF0Y2hpbmdPcHRpb25zW2FjdGl2ZUluZGV4XSkge1xuICAgIHRocm93IGBSdW4gdGltZSBlcnJvciwgYWN0aXZlSW5kZXg9JHthY3RpdmVJbmRleH0gaXMgb3V0IG9mIGJvdW5kcywgbWF0Y2hpbmdPcHRpb25zLmxlbmd0aD0ke21hdGNoaW5nT3B0aW9ucy5sZW5ndGh9YDtcbn1cbi8vIHVwZGF0ZSBhY3RpdmVPcHRpb24gd2hlbiBhY3RpdmVJbmRleCBjaGFuZ2VzXG4kOiBhY3RpdmVPcHRpb24gPSBhY3RpdmVJbmRleCAhPT0gbnVsbCA/IG1hdGNoaW5nT3B0aW9uc1thY3RpdmVJbmRleF0gOiBudWxsO1xuLy8gYWRkIGFuIG9wdGlvbiB0byBzZWxlY3RlZCBsaXN0XG5mdW5jdGlvbiBhZGQobGFiZWwsIGV2ZW50KSB7XG4gICAgaWYgKG1heFNlbGVjdCAmJiBtYXhTZWxlY3QgPiAxICYmIHNlbGVjdGVkLmxlbmd0aCA+PSBtYXhTZWxlY3QpXG4gICAgICAgIHdpZ2dsZSA9IHRydWU7XG4gICAgLy8gdG8gcHJldmVudCBkdXBsaWNhdGUgc2VsZWN0aW9uLCB3ZSBjb3VsZCBhZGQgYCYmICFzZWxlY3RlZExhYmVscy5pbmNsdWRlcyhsYWJlbClgXG4gICAgaWYgKG1heFNlbGVjdCA9PT0gbnVsbCB8fCBtYXhTZWxlY3QgPT09IDEgfHwgc2VsZWN0ZWQubGVuZ3RoIDwgbWF4U2VsZWN0KSB7XG4gICAgICAgIC8vIGZpcnN0IGNoZWNrIGlmIHdlIGZpbmQgb3B0aW9uIGluIHRoZSBvcHRpb25zIGxpc3RcbiAgICAgICAgbGV0IG9wdGlvbiA9IG9wdGlvbnMuZmluZCgob3ApID0+IGdldF9sYWJlbChvcCkgPT09IGxhYmVsKTtcbiAgICAgICAgaWYgKCFvcHRpb24gJiYgLy8gdGhpcyBoYXMgdGhlIHNpZGUtZWZmZWN0IG9mIG5vdCBhbGxvd2luZyB0byB1c2VyIHRvIGFkZCB0aGUgc2FtZVxuICAgICAgICAgICAgLy8gY3VzdG9tIG9wdGlvbiB0d2ljZSBpbiBhcHBlbmQgbW9kZVxuICAgICAgICAgICAgW3RydWUsIGBhcHBlbmRgXS5pbmNsdWRlcyhhbGxvd1VzZXJPcHRpb25zKSAmJlxuICAgICAgICAgICAgc2VhcmNoVGV4dC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAvLyB1c2VyIGVudGVyZWQgdGV4dCBidXQgbm8gb3B0aW9ucyBtYXRjaCwgc28gaWYgYWxsb3dVc2VyT3B0aW9ucz10cnVlIHwgJ2FwcGVuZCcsIHdlIGNyZWF0ZVxuICAgICAgICAgICAgLy8gYSBuZXcgb3B0aW9uIGZyb20gdGhlIHVzZXItZW50ZXJlZCB0ZXh0XG4gICAgICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnNbMF0gPT09IGBvYmplY3RgKSB7XG4gICAgICAgICAgICAgICAgLy8gaWYgMXN0IG9wdGlvbiBpcyBhbiBvYmplY3QsIHdlIGNyZWF0ZSBuZXcgb3B0aW9uIGFzIG9iamVjdCB0byBrZWVwIHR5cGUgaG9tb2dlbmVpdHlcbiAgICAgICAgICAgICAgICBvcHRpb24gPSB7IGxhYmVsOiBzZWFyY2hUZXh0LCB2YWx1ZTogc2VhcmNoVGV4dCB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKFtgbnVtYmVyYCwgYHVuZGVmaW5lZGBdLmluY2x1ZGVzKHR5cGVvZiBvcHRpb25zWzBdKSAmJlxuICAgICAgICAgICAgICAgICAgICAhaXNOYU4oTnVtYmVyKHNlYXJjaFRleHQpKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBjcmVhdGUgbmV3IG9wdGlvbiBhcyBudW1iZXIgaWYgaXQgcGFyc2VzIHRvIGEgbnVtYmVyIGFuZCAxc3Qgb3B0aW9uIGlzIGFsc28gbnVtYmVyIG9yIG1pc3NpbmdcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uID0gTnVtYmVyKHNlYXJjaFRleHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbiA9IHNlYXJjaFRleHQ7IC8vIGVsc2UgY3JlYXRlIGN1c3RvbSBvcHRpb24gYXMgc3RyaW5nXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYWxsb3dVc2VyT3B0aW9ucyA9PT0gYGFwcGVuZGApXG4gICAgICAgICAgICAgICAgb3B0aW9ucyA9IFsuLi5vcHRpb25zLCBvcHRpb25dO1xuICAgICAgICB9XG4gICAgICAgIHNlYXJjaFRleHQgPSBgYDsgLy8gcmVzZXQgc2VhcmNoIHN0cmluZyBvbiBzZWxlY3Rpb25cbiAgICAgICAgaWYgKCFvcHRpb24pIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYE11bHRpU2VsZWN0OiBvcHRpb24gd2l0aCBsYWJlbCAke2xhYmVsfSBub3QgZm91bmRgKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWF4U2VsZWN0ID09PSAxKSB7XG4gICAgICAgICAgICAvLyBmb3IgbWF4c2VsZWN0ID0gMSB3ZSBhbHdheXMgcmVwbGFjZSBjdXJyZW50IG9wdGlvbiB3aXRoIG5ldyBvbmVcbiAgICAgICAgICAgIHNlbGVjdGVkID0gW29wdGlvbl07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzZWxlY3RlZCA9IFsuLi5zZWxlY3RlZCwgb3B0aW9uXTtcbiAgICAgICAgICAgIGlmIChzb3J0U2VsZWN0ZWQgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBzZWxlY3RlZCA9IHNlbGVjdGVkLnNvcnQoKG9wMSwgb3AyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IFtsYWJlbDEsIGxhYmVsMl0gPSBbZ2V0X2xhYmVsKG9wMSksIGdldF9sYWJlbChvcDIpXTtcbiAgICAgICAgICAgICAgICAgICAgLy8gY29lcmNlIHRvIHN0cmluZyBpZiBsYWJlbHMgYXJlIG51bWJlcnNcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGAke2xhYmVsMX1gLmxvY2FsZUNvbXBhcmUoYCR7bGFiZWwyfWApO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIHNvcnRTZWxlY3RlZCA9PT0gYGZ1bmN0aW9uYCkge1xuICAgICAgICAgICAgICAgIHNlbGVjdGVkID0gc2VsZWN0ZWQuc29ydChzb3J0U2VsZWN0ZWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChzZWxlY3RlZC5sZW5ndGggPT09IG1heFNlbGVjdClcbiAgICAgICAgICAgIGNsb3NlX2Ryb3Bkb3duKGV2ZW50KTtcbiAgICAgICAgZWxzZSBpZiAoZm9jdXNJbnB1dE9uU2VsZWN0ID09PSB0cnVlIHx8XG4gICAgICAgICAgICAoZm9jdXNJbnB1dE9uU2VsZWN0ID09PSBgZGVza3RvcGAgJiYgd2luZG93X3dpZHRoID4gYnJlYWtwb2ludCkpIHtcbiAgICAgICAgICAgIGlucHV0Py5mb2N1cygpO1xuICAgICAgICB9XG4gICAgICAgIGRpc3BhdGNoKGBhZGRgLCB7IG9wdGlvbiB9KTtcbiAgICAgICAgZGlzcGF0Y2goYGNoYW5nZWAsIHsgb3B0aW9uLCB0eXBlOiBgYWRkYCB9KTtcbiAgICB9XG59XG4vLyByZW1vdmUgYW4gb3B0aW9uIGZyb20gc2VsZWN0ZWQgbGlzdFxuZnVuY3Rpb24gcmVtb3ZlKGxhYmVsKSB7XG4gICAgaWYgKHNlbGVjdGVkLmxlbmd0aCA9PT0gMClcbiAgICAgICAgcmV0dXJuO1xuICAgIHNlbGVjdGVkLnNwbGljZShzZWxlY3RlZExhYmVscy5sYXN0SW5kZXhPZihsYWJlbCksIDEpO1xuICAgIHNlbGVjdGVkID0gc2VsZWN0ZWQ7IC8vIFN2ZWx0ZSByZXJlbmRlciBhZnRlciBpbi1wbGFjZSBzcGxpY2VcbiAgICBjb25zdCBvcHRpb24gPSBvcHRpb25zLmZpbmQoKG9wdGlvbikgPT4gZ2V0X2xhYmVsKG9wdGlvbikgPT09IGxhYmVsKSA/P1xuICAgICAgICAvLyBpZiBvcHRpb24gd2l0aCBsYWJlbCBjb3VsZCBub3QgYmUgZm91bmQgYnV0IGFsbG93VXNlck9wdGlvbnMgaXMgdHJ1dGh5LFxuICAgICAgICAvLyBhc3N1bWUgaXQgd2FzIGNyZWF0ZWQgYnkgdXNlciBhbmQgY3JlYXRlIGNvcnJlc3BvbmRpZG5nIG9wdGlvbiBvYmplY3RcbiAgICAgICAgLy8gb24gdGhlIGZseSBmb3IgdXNlIGFzIGV2ZW50IHBheWxvYWRcbiAgICAgICAgKGFsbG93VXNlck9wdGlvbnMgJiYgeyBsYWJlbCwgdmFsdWU6IGxhYmVsIH0pO1xuICAgIGlmICghb3B0aW9uKSB7XG4gICAgICAgIHJldHVybiBjb25zb2xlLmVycm9yKGBNdWx0aVNlbGVjdDogb3B0aW9uIHdpdGggbGFiZWwgJHtsYWJlbH0gbm90IGZvdW5kYCk7XG4gICAgfVxuICAgIGRpc3BhdGNoKGByZW1vdmVgLCB7IG9wdGlvbiB9KTtcbiAgICBkaXNwYXRjaChgY2hhbmdlYCwgeyBvcHRpb24sIHR5cGU6IGByZW1vdmVgIH0pO1xufVxuZnVuY3Rpb24gb3Blbl9kcm9wZG93bihldmVudCkge1xuICAgIGlmIChkaXNhYmxlZClcbiAgICAgICAgcmV0dXJuO1xuICAgIG9wZW4gPSB0cnVlO1xuICAgIGlmICghKGV2ZW50IGluc3RhbmNlb2YgRm9jdXNFdmVudCkpIHtcbiAgICAgICAgLy8gYXZvaWQgZG91YmxlLWZvY3Vzc2luZyBpbnB1dCB3aGVuIGV2ZW50IHRoYXQgb3BlbmVkIGRyb3Bkb3duIHdhcyBhbHJlYWR5IGlucHV0IEZvY3VzRXZlbnRcbiAgICAgICAgaW5wdXQ/LmZvY3VzKCk7XG4gICAgfVxuICAgIGRpc3BhdGNoKGBvcGVuYCwgeyBldmVudCB9KTtcbn1cbmZ1bmN0aW9uIGNsb3NlX2Ryb3Bkb3duKGV2ZW50KSB7XG4gICAgb3BlbiA9IGZhbHNlO1xuICAgIGlucHV0Py5ibHVyKCk7XG4gICAgYWN0aXZlT3B0aW9uID0gbnVsbDtcbiAgICBkaXNwYXRjaChgY2xvc2VgLCB7IGV2ZW50IH0pO1xufVxuLy8gaGFuZGxlIGFsbCBrZXlib2FyZCBldmVudHMgdGhpcyBjb21wb25lbnQgcmVjZWl2ZXNcbmFzeW5jIGZ1bmN0aW9uIGhhbmRsZV9rZXlkb3duKGV2ZW50KSB7XG4gICAgLy8gb24gZXNjYXBlIG9yIHRhYiBvdXQgb2YgaW5wdXQ6IGRpc21pc3Mgb3B0aW9ucyBkcm9wZG93biBhbmQgcmVzZXQgc2VhcmNoIHRleHRcbiAgICBpZiAoZXZlbnQua2V5ID09PSBgRXNjYXBlYCB8fCBldmVudC5rZXkgPT09IGBUYWJgKSB7XG4gICAgICAgIGNsb3NlX2Ryb3Bkb3duKGV2ZW50KTtcbiAgICAgICAgc2VhcmNoVGV4dCA9IGBgO1xuICAgIH1cbiAgICAvLyBvbiBlbnRlciBrZXk6IHRvZ2dsZSBhY3RpdmUgb3B0aW9uIGFuZCByZXNldCBzZWFyY2ggdGV4dFxuICAgIGVsc2UgaWYgKGV2ZW50LmtleSA9PT0gYEVudGVyYCkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOyAvLyBwcmV2ZW50IGVudGVyIGtleSBmcm9tIHRyaWdnZXJpbmcgZm9ybSBzdWJtaXNzaW9uXG4gICAgICAgIGlmIChhY3RpdmVPcHRpb24pIHtcbiAgICAgICAgICAgIGNvbnN0IGxhYmVsID0gZ2V0X2xhYmVsKGFjdGl2ZU9wdGlvbik7XG4gICAgICAgICAgICBzZWxlY3RlZExhYmVscy5pbmNsdWRlcyhsYWJlbCkgPyByZW1vdmUobGFiZWwpIDogYWRkKGxhYmVsLCBldmVudCk7XG4gICAgICAgICAgICBzZWFyY2hUZXh0ID0gYGA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYWxsb3dVc2VyT3B0aW9ucyAmJiBzZWFyY2hUZXh0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIC8vIHVzZXIgZW50ZXJlZCB0ZXh0IGJ1dCBubyBvcHRpb25zIG1hdGNoLCBzbyBpZiBhbGxvd1VzZXJPcHRpb25zIGlzIHRydXRoeSwgd2UgY3JlYXRlIG5ldyBvcHRpb25cbiAgICAgICAgICAgIGFkZChzZWFyY2hUZXh0LCBldmVudCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gbm8gYWN0aXZlIG9wdGlvbiBhbmQgbm8gc2VhcmNoIHRleHQgbWVhbnMgdGhlIG9wdGlvbnMgZHJvcGRvd24gaXMgY2xvc2VkXG4gICAgICAgIC8vIGluIHdoaWNoIGNhc2UgZW50ZXIgbWVhbnMgb3BlbiBpdFxuICAgICAgICBlbHNlXG4gICAgICAgICAgICBvcGVuX2Ryb3Bkb3duKGV2ZW50KTtcbiAgICB9XG4gICAgLy8gb24gdXAvZG93biBhcnJvdyBrZXlzOiB1cGRhdGUgYWN0aXZlIG9wdGlvblxuICAgIGVsc2UgaWYgKFtgQXJyb3dEb3duYCwgYEFycm93VXBgXS5pbmNsdWRlcyhldmVudC5rZXkpKSB7XG4gICAgICAgIC8vIGlmIG5vIG9wdGlvbiBpcyBhY3RpdmUgeWV0LCBidXQgdGhlcmUgYXJlIG1hdGNoaW5nIG9wdGlvbnMsIG1ha2UgZmlyc3Qgb25lIGFjdGl2ZVxuICAgICAgICBpZiAoYWN0aXZlSW5kZXggPT09IG51bGwgJiYgbWF0Y2hpbmdPcHRpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGFjdGl2ZUluZGV4ID0gMDtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChhbGxvd1VzZXJPcHRpb25zICYmIHNlYXJjaFRleHQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgLy8gaWYgYWxsb3dVc2VyT3B0aW9ucyBpcyB0cnV0aHkgYW5kIHVzZXIgZW50ZXJlZCB0ZXh0IGJ1dCBubyBvcHRpb25zIG1hdGNoLCB3ZSBtYWtlXG4gICAgICAgICAgICAvLyA8bGk+e2FkZFVzZXJNc2d9PC9saT4gYWN0aXZlIG9uIGtleWRvd24gKG9yIHRvZ2dsZSBpdCBpZiBhbHJlYWR5IGFjdGl2ZSlcbiAgICAgICAgICAgIGFkZF9vcHRpb25fbXNnX2lzX2FjdGl2ZSA9ICFhZGRfb3B0aW9uX21zZ19pc19hY3RpdmU7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYWN0aXZlSW5kZXggPT09IG51bGwpIHtcbiAgICAgICAgICAgIC8vIGlmIG5vIG9wdGlvbiBpcyBhY3RpdmUgYW5kIG5vIG9wdGlvbnMgYXJlIG1hdGNoaW5nLCBkbyBub3RoaW5nXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaW5jcmVtZW50ID0gZXZlbnQua2V5ID09PSBgQXJyb3dVcGAgPyAtMSA6IDE7XG4gICAgICAgIGFjdGl2ZUluZGV4ID0gKGFjdGl2ZUluZGV4ICsgaW5jcmVtZW50KSAlIG1hdGNoaW5nT3B0aW9ucy5sZW5ndGg7XG4gICAgICAgIC8vICUgaW4gSlMgYmVoYXZlcyBsaWtlIHJlbWFpbmRlciBvcGVyYXRvciwgbm90IHJlYWwgbW9kdWxvLCBzbyBuZWdhdGl2ZSBudW1iZXJzIHN0YXkgbmVnYXRpdmVcbiAgICAgICAgLy8gbmVlZCB0byBkbyBtYW51YWwgd3JhcCBhcm91bmQgYXQgMFxuICAgICAgICBpZiAoYWN0aXZlSW5kZXggPCAwKVxuICAgICAgICAgICAgYWN0aXZlSW5kZXggPSBtYXRjaGluZ09wdGlvbnMubGVuZ3RoIC0gMTtcbiAgICAgICAgaWYgKGF1dG9TY3JvbGwpIHtcbiAgICAgICAgICAgIC8vIFRPRE8gVGhpcyB1Z2x5IHRpbWVvdXQgaGFjayBpcyBuZWVkZWQgdG8gcHJvcGVybHkgc2Nyb2xsIGVsZW1lbnQgaW50byB2aWV3IHdoZW4gd3JhcHBpbmdcbiAgICAgICAgICAgIC8vIGFyb3VuZCBzdGFydC9lbmQgb2Ygb3B0aW9uIGxpc3QuIEZpbmQgYSBiZXR0ZXIgc29sdXRpb24gdGhhbiB3YWl0aW5nIDEwIG1zIHRvLlxuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgbGkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGB1bC5vcHRpb25zID4gbGkuYWN0aXZlYCk7XG4gICAgICAgICAgICAgICAgaWYgKGxpKSB7XG4gICAgICAgICAgICAgICAgICAgIGxpLnBhcmVudE5vZGU/LnNjcm9sbEludG9WaWV3KHsgYmxvY2s6IGBjZW50ZXJgIH0pO1xuICAgICAgICAgICAgICAgICAgICBsaS5zY3JvbGxJbnRvVmlld0lmTmVlZGVkKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSwgMTApO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIG9uIGJhY2tzcGFjZSBrZXk6IHJlbW92ZSBsYXN0IHNlbGVjdGVkIG9wdGlvblxuICAgIGVsc2UgaWYgKGV2ZW50LmtleSA9PT0gYEJhY2tzcGFjZWAgJiYgc2VsZWN0ZWRMYWJlbHMubGVuZ3RoID4gMCAmJiAhc2VhcmNoVGV4dCkge1xuICAgICAgICByZW1vdmUoc2VsZWN0ZWRMYWJlbHMuYXQoLTEpKTtcbiAgICB9XG59XG5mdW5jdGlvbiByZW1vdmVfYWxsKCkge1xuICAgIGRpc3BhdGNoKGByZW1vdmVBbGxgLCB7IG9wdGlvbnM6IHNlbGVjdGVkIH0pO1xuICAgIGRpc3BhdGNoKGBjaGFuZ2VgLCB7IG9wdGlvbnM6IHNlbGVjdGVkLCB0eXBlOiBgcmVtb3ZlQWxsYCB9KTtcbiAgICBzZWxlY3RlZCA9IFtdO1xuICAgIHNlYXJjaFRleHQgPSBgYDtcbn1cbiQ6IGlzX3NlbGVjdGVkID0gKGxhYmVsKSA9PiBzZWxlY3RlZExhYmVscy5pbmNsdWRlcyhsYWJlbCk7XG5jb25zdCBpZl9lbnRlcl9vcl9zcGFjZSA9IChoYW5kbGVyKSA9PiAoZXZlbnQpID0+IHtcbiAgICBpZiAoW2BFbnRlcmAsIGBTcGFjZWBdLmluY2x1ZGVzKGV2ZW50LmNvZGUpKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGhhbmRsZXIoKTtcbiAgICB9XG59O1xuZnVuY3Rpb24gb25fY2xpY2tfb3V0c2lkZShldmVudCkge1xuICAgIGlmIChvdXRlckRpdiAmJiAhb3V0ZXJEaXYuY29udGFpbnMoZXZlbnQudGFyZ2V0KSkge1xuICAgICAgICBjbG9zZV9kcm9wZG93bihldmVudCk7XG4gICAgfVxufVxuPC9zY3JpcHQ+XG5cbjxzdmVsdGU6d2luZG93XG4gIG9uOmNsaWNrPXtvbl9jbGlja19vdXRzaWRlfVxuICBvbjp0b3VjaHN0YXJ0PXtvbl9jbGlja19vdXRzaWRlfVxuICBiaW5kOmlubmVyV2lkdGg9e3dpbmRvd193aWR0aH1cbi8+XG5cbjxkaXZcbiAgYmluZDp0aGlzPXtvdXRlckRpdn1cbiAgY2xhc3M6ZGlzYWJsZWRcbiAgY2xhc3M6c2luZ2xlPXttYXhTZWxlY3QgPT09IDF9XG4gIGNsYXNzOm9wZW5cbiAgYXJpYS1leHBhbmRlZD17b3Blbn1cbiAgYXJpYS1tdWx0aXNlbGVjdGFibGU9e21heFNlbGVjdCA9PT0gbnVsbCB8fCBtYXhTZWxlY3QgPiAxfVxuICBjbGFzczppbnZhbGlkXG4gIGNsYXNzPVwibXVsdGlzZWxlY3Qge291dGVyRGl2Q2xhc3N9XCJcbiAgb246bW91c2V1cHxzdG9wUHJvcGFnYXRpb249e29wZW5fZHJvcGRvd259XG4gIHRpdGxlPXtkaXNhYmxlZCA/IGRpc2FibGVkSW5wdXRUaXRsZSA6IG51bGx9XG4gIGFyaWEtZGlzYWJsZWQ9e2Rpc2FibGVkID8gYHRydWVgIDogbnVsbH1cbj5cbiAgPGlucHV0XG4gICAge3JlcXVpcmVkfVxuICAgIGJpbmQ6dmFsdWU9e2Zvcm1WYWx1ZX1cbiAgICB0YWJpbmRleD1cIi0xXCJcbiAgICBhcmlhLWhpZGRlbj1cInRydWVcIlxuICAgIGFyaWEtbGFiZWw9XCJpZ25vcmUgdGhpcywgdXNlZCBvbmx5IHRvIHByZXZlbnQgZm9ybSBzdWJtaXNzaW9uIGlmIHNlbGVjdCBpcyByZXF1aXJlZCBidXQgZW1wdHlcIlxuICAgIGNsYXNzPVwiZm9ybS1jb250cm9sXCJcbiAgICBvbjppbnZhbGlkPXsoKSA9PiAoaW52YWxpZCA9IHRydWUpfVxuICAvPlxuICA8RXhwYW5kSWNvbiB3aWR0aD1cIjE1cHhcIiBzdHlsZT1cIm1pbi13aWR0aDogMWVtOyBwYWRkaW5nOiAwIDFwdDtcIiAvPlxuICA8dWwgY2xhc3M9XCJzZWxlY3RlZCB7dWxTZWxlY3RlZENsYXNzfVwiPlxuICAgIHsjZWFjaCBzZWxlY3RlZCBhcyBvcHRpb24sIGlkeH1cbiAgICAgIDxsaSBjbGFzcz17bGlTZWxlY3RlZENsYXNzfSBhcmlhLXNlbGVjdGVkPVwidHJ1ZVwiPlxuICAgICAgICA8c2xvdCBuYW1lPVwic2VsZWN0ZWRcIiB7b3B0aW9ufSB7aWR4fT5cbiAgICAgICAgICB7I2lmIHBhcnNlTGFiZWxzQXNIdG1sfVxuICAgICAgICAgICAge0BodG1sIGdldF9sYWJlbChvcHRpb24pfVxuICAgICAgICAgIHs6ZWxzZX1cbiAgICAgICAgICAgIHtnZXRfbGFiZWwob3B0aW9uKX1cbiAgICAgICAgICB7L2lmfVxuICAgICAgICA8L3Nsb3Q+XG4gICAgICAgIHsjaWYgIWRpc2FibGVkfVxuICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgIG9uOm1vdXNldXB8c3RvcFByb3BhZ2F0aW9uPXsoKSA9PiByZW1vdmUoZ2V0X2xhYmVsKG9wdGlvbikpfVxuICAgICAgICAgICAgb246a2V5ZG93bj17aWZfZW50ZXJfb3Jfc3BhY2UoKCkgPT4gcmVtb3ZlKGdldF9sYWJlbChvcHRpb24pKSl9XG4gICAgICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgICAgIHRpdGxlPVwie3JlbW92ZUJ0blRpdGxlfSB7Z2V0X2xhYmVsKG9wdGlvbil9XCJcbiAgICAgICAgICA+XG4gICAgICAgICAgICA8c2xvdCBuYW1lPVwicmVtb3ZlLWljb25cIj48Q3Jvc3NJY29uIHdpZHRoPVwiMTVweFwiIC8+PC9zbG90PlxuICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICB7L2lmfVxuICAgICAgPC9saT5cbiAgICB7L2VhY2h9XG4gICAgPGxpIHN0eWxlPVwiZGlzcGxheTogY29udGVudHM7XCI+XG4gICAgICA8aW5wdXRcbiAgICAgICAgY2xhc3M9e2lucHV0Q2xhc3N9XG4gICAgICAgIGJpbmQ6dGhpcz17aW5wdXR9XG4gICAgICAgIHthdXRvY29tcGxldGV9XG4gICAgICAgIGJpbmQ6dmFsdWU9e3NlYXJjaFRleHR9XG4gICAgICAgIG9uOm1vdXNldXB8c2VsZnxzdG9wUHJvcGFnYXRpb249e29wZW5fZHJvcGRvd259XG4gICAgICAgIG9uOmtleWRvd249e2hhbmRsZV9rZXlkb3dufVxuICAgICAgICBvbjpmb2N1c1xuICAgICAgICBvbjpmb2N1cz17b3Blbl9kcm9wZG93bn1cbiAgICAgICAge2lkfVxuICAgICAgICB7bmFtZX1cbiAgICAgICAge2Rpc2FibGVkfVxuICAgICAgICB7aW5wdXRtb2RlfVxuICAgICAgICB7cGF0dGVybn1cbiAgICAgICAgcGxhY2Vob2xkZXI9e3NlbGVjdGVkTGFiZWxzLmxlbmd0aCA/IGBgIDogcGxhY2Vob2xkZXJ9XG4gICAgICAgIGFyaWEtaW52YWxpZD17aW52YWxpZCA/IGB0cnVlYCA6IG51bGx9XG4gICAgICAgIG9uOmJsdXJcbiAgICAgICAgb246Y2hhbmdlXG4gICAgICAgIG9uOmNsaWNrXG4gICAgICAgIG9uOmtleWRvd25cbiAgICAgICAgb246a2V5dXBcbiAgICAgICAgb246bW91c2Vkb3duXG4gICAgICAgIG9uOm1vdXNlZW50ZXJcbiAgICAgICAgb246bW91c2VsZWF2ZVxuICAgICAgICBvbjp0b3VjaGNhbmNlbFxuICAgICAgICBvbjp0b3VjaGVuZFxuICAgICAgICBvbjp0b3VjaG1vdmVcbiAgICAgICAgb246dG91Y2hzdGFydFxuICAgICAgLz5cbiAgICAgIDwhLS0gdGhlIGFib3ZlIG9uOiogbGluZXMgZm9yd2FyZCBwb3RlbnRpYWxseSB1c2VmdWwgRE9NIGV2ZW50cyAtLT5cbiAgICA8L2xpPlxuICA8L3VsPlxuICB7I2lmIGxvYWRpbmd9XG4gICAgPHNsb3QgbmFtZT1cInNwaW5uZXJcIj5cbiAgICAgIDxDaXJjbGVTcGlubmVyIC8+XG4gICAgPC9zbG90PlxuICB7L2lmfVxuICB7I2lmIGRpc2FibGVkfVxuICAgIDxzbG90IG5hbWU9XCJkaXNhYmxlZC1pY29uXCI+XG4gICAgICA8RGlzYWJsZWRJY29uIHdpZHRoPVwiMTVweFwiIC8+XG4gICAgPC9zbG90PlxuICB7OmVsc2UgaWYgc2VsZWN0ZWQubGVuZ3RoID4gMH1cbiAgICB7I2lmIG1heFNlbGVjdCAmJiAobWF4U2VsZWN0ID4gMSB8fCBtYXhTZWxlY3RNc2cpfVxuICAgICAgPFdpZ2dsZSBiaW5kOndpZ2dsZSBhbmdsZT17MjB9PlxuICAgICAgICA8c3BhbiBzdHlsZT1cInBhZGRpbmc6IDAgM3B0O1wiPlxuICAgICAgICAgIHttYXhTZWxlY3RNc2c/LihzZWxlY3RlZC5sZW5ndGgsIG1heFNlbGVjdCkgPz9cbiAgICAgICAgICAgIChtYXhTZWxlY3QgPiAxID8gYCR7c2VsZWN0ZWQubGVuZ3RofS8ke21heFNlbGVjdH1gIDogYGApfVxuICAgICAgICA8L3NwYW4+XG4gICAgICA8L1dpZ2dsZT5cbiAgICB7L2lmfVxuICAgIHsjaWYgbWF4U2VsZWN0ICE9PSAxICYmIHNlbGVjdGVkLmxlbmd0aCA+IDF9XG4gICAgICA8YnV0dG9uXG4gICAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgICBjbGFzcz1cInJlbW92ZS1hbGxcIlxuICAgICAgICB0aXRsZT17cmVtb3ZlQWxsVGl0bGV9XG4gICAgICAgIG9uOm1vdXNldXB8c3RvcFByb3BhZ2F0aW9uPXtyZW1vdmVfYWxsfVxuICAgICAgICBvbjprZXlkb3duPXtpZl9lbnRlcl9vcl9zcGFjZShyZW1vdmVfYWxsKX1cbiAgICAgID5cbiAgICAgICAgPHNsb3QgbmFtZT1cInJlbW92ZS1pY29uXCI+PENyb3NzSWNvbiB3aWR0aD1cIjE1cHhcIiAvPjwvc2xvdD5cbiAgICAgIDwvYnV0dG9uPlxuICAgIHsvaWZ9XG4gIHsvaWZ9XG5cbiAgPCEtLSBvbmx5IHJlbmRlciBvcHRpb25zIGRyb3Bkb3duIGlmIG9wdGlvbnMgb3Igc2VhcmNoVGV4dCBpcyBub3QgZW1wdHkgbmVlZGVkIHRvIGF2b2lkIGJyaWVmbHkgZmxhc2hpbmcgZW1wdHkgZHJvcGRvd24gLS0+XG4gIHsjaWYgc2VhcmNoVGV4dCB8fCBvcHRpb25zPy5sZW5ndGggPiAwfVxuICAgIDx1bCBjbGFzczpoaWRkZW49eyFvcGVufSBjbGFzcz1cIm9wdGlvbnMge3VsT3B0aW9uc0NsYXNzfVwiPlxuICAgICAgeyNlYWNoIG1hdGNoaW5nT3B0aW9ucyBhcyBvcHRpb24sIGlkeH1cbiAgICAgICAge0Bjb25zdCB7XG4gICAgICAgICAgbGFiZWwsXG4gICAgICAgICAgZGlzYWJsZWQgPSBudWxsLFxuICAgICAgICAgIHRpdGxlID0gbnVsbCxcbiAgICAgICAgICBzZWxlY3RlZFRpdGxlID0gbnVsbCxcbiAgICAgICAgICBkaXNhYmxlZFRpdGxlID0gZGVmYXVsdERpc2FibGVkVGl0bGUsXG4gICAgICAgIH0gPSBvcHRpb24gaW5zdGFuY2VvZiBPYmplY3QgPyBvcHRpb24gOiB7IGxhYmVsOiBvcHRpb24gfX1cbiAgICAgICAge0Bjb25zdCBhY3RpdmUgPSBhY3RpdmVJbmRleCA9PT0gaWR4fVxuICAgICAgICA8bGlcbiAgICAgICAgICBvbjptb3VzZWRvd258c3RvcFByb3BhZ2F0aW9uXG4gICAgICAgICAgb246bW91c2V1cHxzdG9wUHJvcGFnYXRpb249eyhldmVudCkgPT4ge1xuICAgICAgICAgICAgaWYgKCFkaXNhYmxlZCkgaXNfc2VsZWN0ZWQobGFiZWwpID8gcmVtb3ZlKGxhYmVsKSA6IGFkZChsYWJlbCwgZXZlbnQpXG4gICAgICAgICAgfX1cbiAgICAgICAgICB0aXRsZT17ZGlzYWJsZWRcbiAgICAgICAgICAgID8gZGlzYWJsZWRUaXRsZVxuICAgICAgICAgICAgOiAoaXNfc2VsZWN0ZWQobGFiZWwpICYmIHNlbGVjdGVkVGl0bGUpIHx8IHRpdGxlfVxuICAgICAgICAgIGNsYXNzOnNlbGVjdGVkPXtpc19zZWxlY3RlZChsYWJlbCl9XG4gICAgICAgICAgY2xhc3M6YWN0aXZlXG4gICAgICAgICAgY2xhc3M6ZGlzYWJsZWRcbiAgICAgICAgICBjbGFzcz1cIntsaU9wdGlvbkNsYXNzfSB7YWN0aXZlID8gbGlBY3RpdmVPcHRpb25DbGFzcyA6IGBgfVwiXG4gICAgICAgICAgb246bW91c2VvdmVyPXsoKSA9PiB7XG4gICAgICAgICAgICBpZiAoIWRpc2FibGVkKSBhY3RpdmVJbmRleCA9IGlkeFxuICAgICAgICAgIH19XG4gICAgICAgICAgb246Zm9jdXM9eygpID0+IHtcbiAgICAgICAgICAgIGlmICghZGlzYWJsZWQpIGFjdGl2ZUluZGV4ID0gaWR4XG4gICAgICAgICAgfX1cbiAgICAgICAgICBvbjptb3VzZW91dD17KCkgPT4gKGFjdGl2ZUluZGV4ID0gbnVsbCl9XG4gICAgICAgICAgb246Ymx1cj17KCkgPT4gKGFjdGl2ZUluZGV4ID0gbnVsbCl9XG4gICAgICAgICAgYXJpYS1zZWxlY3RlZD1cImZhbHNlXCJcbiAgICAgICAgPlxuICAgICAgICAgIDxzbG90IG5hbWU9XCJvcHRpb25cIiB7b3B0aW9ufSB7aWR4fT5cbiAgICAgICAgICAgIHsjaWYgcGFyc2VMYWJlbHNBc0h0bWx9XG4gICAgICAgICAgICAgIHtAaHRtbCBnZXRfbGFiZWwob3B0aW9uKX1cbiAgICAgICAgICAgIHs6ZWxzZX1cbiAgICAgICAgICAgICAge2dldF9sYWJlbChvcHRpb24pfVxuICAgICAgICAgICAgey9pZn1cbiAgICAgICAgICA8L3Nsb3Q+XG4gICAgICAgIDwvbGk+XG4gICAgICB7OmVsc2V9XG4gICAgICAgIHsjaWYgYWxsb3dVc2VyT3B0aW9ucyAmJiBzZWFyY2hUZXh0fVxuICAgICAgICAgIDxsaVxuICAgICAgICAgICAgb246bW91c2Vkb3dufHN0b3BQcm9wYWdhdGlvblxuICAgICAgICAgICAgb246bW91c2V1cHxzdG9wUHJvcGFnYXRpb249eyhldmVudCkgPT4gYWRkKHNlYXJjaFRleHQsIGV2ZW50KX1cbiAgICAgICAgICAgIHRpdGxlPXthZGRPcHRpb25Nc2d9XG4gICAgICAgICAgICBjbGFzczphY3RpdmU9e2FkZF9vcHRpb25fbXNnX2lzX2FjdGl2ZX1cbiAgICAgICAgICAgIG9uOm1vdXNlb3Zlcj17KCkgPT4gKGFkZF9vcHRpb25fbXNnX2lzX2FjdGl2ZSA9IHRydWUpfVxuICAgICAgICAgICAgb246Zm9jdXM9eygpID0+IChhZGRfb3B0aW9uX21zZ19pc19hY3RpdmUgPSB0cnVlKX1cbiAgICAgICAgICAgIG9uOm1vdXNlb3V0PXsoKSA9PiAoYWRkX29wdGlvbl9tc2dfaXNfYWN0aXZlID0gZmFsc2UpfVxuICAgICAgICAgICAgb246Ymx1cj17KCkgPT4gKGFkZF9vcHRpb25fbXNnX2lzX2FjdGl2ZSA9IGZhbHNlKX1cbiAgICAgICAgICAgIGFyaWEtc2VsZWN0ZWQ9XCJmYWxzZVwiXG4gICAgICAgICAgPlxuICAgICAgICAgICAge2FkZE9wdGlvbk1zZ31cbiAgICAgICAgICA8L2xpPlxuICAgICAgICB7OmVsc2V9XG4gICAgICAgICAgPHNwYW4+e25vT3B0aW9uc01zZ308L3NwYW4+XG4gICAgICAgIHsvaWZ9XG4gICAgICB7L2VhY2h9XG4gICAgPC91bD5cbiAgey9pZn1cbjwvZGl2PlxuXG48c3R5bGU+XG4gIDp3aGVyZShkaXYubXVsdGlzZWxlY3QpIHtcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGN1cnNvcjogdGV4dDtcbiAgICBib3JkZXI6IHZhcigtLXNtcy1ib3JkZXIsIDFwdCBzb2xpZCBsaWdodGdyYXkpO1xuICAgIGJvcmRlci1yYWRpdXM6IHZhcigtLXNtcy1ib3JkZXItcmFkaXVzLCAzcHQpO1xuICAgIGJhY2tncm91bmQ6IHZhcigtLXNtcy1iZyk7XG4gICAgbWF4LXdpZHRoOiB2YXIoLS1zbXMtbWF4LXdpZHRoKTtcbiAgICBwYWRkaW5nOiB2YXIoLS1zbXMtcGFkZGluZywgMCAzcHQpO1xuICAgIGNvbG9yOiB2YXIoLS1zbXMtdGV4dC1jb2xvcik7XG4gICAgZm9udC1zaXplOiB2YXIoLS1zbXMtZm9udC1zaXplLCBpbmhlcml0KTtcbiAgICBtaW4taGVpZ2h0OiB2YXIoLS1zbXMtbWluLWhlaWdodCwgMTlwdCk7XG4gICAgbWFyZ2luOiB2YXIoLS1zbXMtbWFyZ2luKTtcbiAgfVxuICA6d2hlcmUoZGl2Lm11bHRpc2VsZWN0Lm9wZW4pIHtcbiAgICAvKiBpbmNyZWFzZSB6LWluZGV4IHdoZW4gb3BlbiB0byBlbnN1cmUgdGhlIGRyb3Bkb3duIG9mIG9uZSA8TXVsdGlTZWxlY3QgLz5cbiAgICBkaXNwbGF5cyBhYm92ZSB0aGF0IG9mIGFub3RoZXIgc2xpZ2h0bHkgYmVsb3cgaXQgb24gdGhlIHBhZ2UgKi9cbiAgICB6LWluZGV4OiB2YXIoLS1zbXMtb3Blbi16LWluZGV4LCA0KTtcbiAgfVxuICA6d2hlcmUoZGl2Lm11bHRpc2VsZWN0OmZvY3VzLXdpdGhpbikge1xuICAgIGJvcmRlcjogdmFyKC0tc21zLWZvY3VzLWJvcmRlciwgMXB0IHNvbGlkIHZhcigtLXNtcy1hY3RpdmUtY29sb3IsIGNvcm5mbG93ZXJibHVlKSk7XG4gIH1cbiAgOndoZXJlKGRpdi5tdWx0aXNlbGVjdC5kaXNhYmxlZCkge1xuICAgIGJhY2tncm91bmQ6IHZhcigtLXNtcy1kaXNhYmxlZC1iZywgbGlnaHRncmF5KTtcbiAgICBjdXJzb3I6IG5vdC1hbGxvd2VkO1xuICB9XG5cbiAgOndoZXJlKGRpdi5tdWx0aXNlbGVjdCA+IHVsLnNlbGVjdGVkKSB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBmbGV4OiAxO1xuICAgIHBhZGRpbmc6IDA7XG4gICAgbWFyZ2luOiAwO1xuICAgIGZsZXgtd3JhcDogd3JhcDtcbiAgfVxuICA6d2hlcmUoZGl2Lm11bHRpc2VsZWN0ID4gdWwuc2VsZWN0ZWQgPiBsaSkge1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgYm9yZGVyLXJhZGl1czogM3B0O1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgbWFyZ2luOiAycHQ7XG4gICAgbGluZS1oZWlnaHQ6IG5vcm1hbDtcbiAgICB0cmFuc2l0aW9uOiAwLjNzO1xuICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gICAgYmFja2dyb3VuZDogdmFyKC0tc21zLXNlbGVjdGVkLWJnLCByZ2JhKDAsIDAsIDAsIDAuMTUpKTtcbiAgICBwYWRkaW5nOiB2YXIoLS1zbXMtc2VsZWN0ZWQtbGktcGFkZGluZywgMXB0IDVwdCk7XG4gICAgY29sb3I6IHZhcigtLXNtcy1zZWxlY3RlZC10ZXh0LWNvbG9yLCB2YXIoLS1zbXMtdGV4dC1jb2xvcikpO1xuICB9XG4gIDp3aGVyZShkaXYubXVsdGlzZWxlY3QgYnV0dG9uKSB7XG4gICAgYm9yZGVyLXJhZGl1czogNTAlO1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgdHJhbnNpdGlvbjogMC4ycztcbiAgICBjb2xvcjogaW5oZXJpdDtcbiAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcbiAgICBib3JkZXI6IG5vbmU7XG4gICAgY3Vyc29yOiBwb2ludGVyO1xuICAgIG91dGxpbmU6IG5vbmU7XG4gICAgcGFkZGluZzogMDtcbiAgICBtYXJnaW46IDAgMCAwIDNwdDsgLyogQ1NTIHJlc2V0ICovXG4gIH1cbiAgOndoZXJlKGRpdi5tdWx0aXNlbGVjdCBidXR0b24ucmVtb3ZlLWFsbCkge1xuICAgIG1hcmdpbjogMCAzcHQ7XG4gIH1cbiAgOndoZXJlKHVsLnNlbGVjdGVkID4gbGkgYnV0dG9uOmhvdmVyLCBidXR0b24ucmVtb3ZlLWFsbDpob3ZlciwgYnV0dG9uOmZvY3VzKSB7XG4gICAgY29sb3I6IHZhcigtLXNtcy1idXR0b24taG92ZXItY29sb3IsIGxpZ2h0c2t5Ymx1ZSk7XG4gIH1cblxuICA6d2hlcmUoZGl2Lm11bHRpc2VsZWN0IGlucHV0KSB7XG4gICAgbWFyZ2luOiBhdXRvIDA7IC8qIENTUyByZXNldCAqL1xuICAgIHBhZGRpbmc6IDA7IC8qIENTUyByZXNldCAqL1xuICB9XG4gIDp3aGVyZShkaXYubXVsdGlzZWxlY3QgPiB1bC5zZWxlY3RlZCA+IGxpID4gaW5wdXQpIHtcbiAgICBib3JkZXI6IG5vbmU7XG4gICAgb3V0bGluZTogbm9uZTtcbiAgICBiYWNrZ3JvdW5kOiBub25lO1xuICAgIGZsZXg6IDE7IC8qIHRoaXMgKyBuZXh0IGxpbmUgZml4IGlzc3VlICMxMiBodHRwczovL2dpdC5pby9KaURlMyAqL1xuICAgIG1pbi13aWR0aDogMmVtO1xuICAgIC8qIGVuc3VyZSBpbnB1dCB1c2VzIHRleHQgY29sb3IgYW5kIG5vdCAtLXNtcy1zZWxlY3RlZC10ZXh0LWNvbG9yICovXG4gICAgY29sb3I6IHZhcigtLXNtcy10ZXh0LWNvbG9yKTtcbiAgICBmb250LXNpemU6IGluaGVyaXQ7XG4gICAgY3Vyc29yOiBpbmhlcml0OyAvKiBuZWVkZWQgZm9yIGRpc2FibGVkIHN0YXRlICovXG4gICAgYm9yZGVyLXJhZGl1czogMDsgLyogcmVzZXQgdWwuc2VsZWN0ZWQgPiBsaSAqL1xuICB9XG4gIDp3aGVyZShkaXYubXVsdGlzZWxlY3QgPiB1bC5zZWxlY3RlZCA+IGxpID4gaW5wdXQpOjpwbGFjZWhvbGRlciB7XG4gICAgcGFkZGluZy1sZWZ0OiA1cHQ7XG4gICAgY29sb3I6IHZhcigtLXNtcy1wbGFjZWhvbGRlci1jb2xvcik7XG4gICAgb3BhY2l0eTogdmFyKC0tc21zLXBsYWNlaG9sZGVyLW9wYWNpdHkpO1xuICB9XG4gIDp3aGVyZShkaXYubXVsdGlzZWxlY3QgPiBpbnB1dC5mb3JtLWNvbnRyb2wpIHtcbiAgICB3aWR0aDogMmVtO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcbiAgICBib3JkZXI6IG5vbmU7XG4gICAgb3V0bGluZTogbm9uZTtcbiAgICB6LWluZGV4OiAtMTtcbiAgICBvcGFjaXR5OiAwO1xuICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICB9XG5cbiAgOndoZXJlKGRpdi5tdWx0aXNlbGVjdCA+IHVsLm9wdGlvbnMpIHtcbiAgICBsaXN0LXN0eWxlOiBub25lO1xuICAgIHBhZGRpbmc6IDRwdCAwO1xuICAgIHRvcDogMTAwJTtcbiAgICBsZWZ0OiAwO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICBib3JkZXItcmFkaXVzOiAxZXg7XG4gICAgb3ZlcmZsb3c6IGF1dG87XG4gICAgYmFja2dyb3VuZDogdmFyKC0tc21zLW9wdGlvbnMtYmcsIHdoaXRlKTtcbiAgICBtYXgtaGVpZ2h0OiB2YXIoLS1zbXMtb3B0aW9ucy1tYXgtaGVpZ2h0LCA1MHZoKTtcbiAgICBvdmVyc2Nyb2xsLWJlaGF2aW9yOiB2YXIoLS1zbXMtb3B0aW9ucy1vdmVyc2Nyb2xsLCBub25lKTtcbiAgICBib3gtc2hhZG93OiB2YXIoLS1zbXMtb3B0aW9ucy1zaGFkb3csIDAgMCAxNHB0IC04cHQgYmxhY2spO1xuICAgIHRyYW5zaXRpb246IGFsbCAwLjJzO1xuICB9XG4gIDp3aGVyZShkaXYubXVsdGlzZWxlY3QgPiB1bC5vcHRpb25zLmhpZGRlbikge1xuICAgIHZpc2liaWxpdHk6IGhpZGRlbjtcbiAgICBvcGFjaXR5OiAwO1xuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSg1MHB4KTtcbiAgfVxuICA6d2hlcmUoZGl2Lm11bHRpc2VsZWN0ID4gdWwub3B0aW9ucyA+IGxpKSB7XG4gICAgcGFkZGluZzogM3B0IDJleDtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgc2Nyb2xsLW1hcmdpbjogdmFyKC0tc21zLW9wdGlvbnMtc2Nyb2xsLW1hcmdpbiwgMTAwcHgpO1xuICB9XG4gIC8qIGZvciBub09wdGlvbnNNc2cgKi9cbiAgOndoZXJlKGRpdi5tdWx0aXNlbGVjdCA+IHVsLm9wdGlvbnMgc3Bhbikge1xuICAgIHBhZGRpbmc6IDNwdCAyZXg7XG4gIH1cbiAgOndoZXJlKGRpdi5tdWx0aXNlbGVjdCA+IHVsLm9wdGlvbnMgPiBsaS5zZWxlY3RlZCkge1xuICAgIGJhY2tncm91bmQ6IHZhcigtLXNtcy1saS1zZWxlY3RlZC1iZyk7XG4gICAgY29sb3I6IHZhcigtLXNtcy1saS1zZWxlY3RlZC1jb2xvcik7XG4gIH1cbiAgOndoZXJlKGRpdi5tdWx0aXNlbGVjdCA+IHVsLm9wdGlvbnMgPiBsaS5hY3RpdmUpIHtcbiAgICBiYWNrZ3JvdW5kOiB2YXIoLS1zbXMtbGktYWN0aXZlLWJnLCB2YXIoLS1zbXMtYWN0aXZlLWNvbG9yLCByZ2JhKDAsIDAsIDAsIDAuMTUpKSk7XG4gIH1cbiAgOndoZXJlKGRpdi5tdWx0aXNlbGVjdCA+IHVsLm9wdGlvbnMgPiBsaS5kaXNhYmxlZCkge1xuICAgIGN1cnNvcjogbm90LWFsbG93ZWQ7XG4gICAgYmFja2dyb3VuZDogdmFyKC0tc21zLWxpLWRpc2FibGVkLWJnLCAjZjVmNWY2KTtcbiAgICBjb2xvcjogdmFyKC0tc21zLWxpLWRpc2FibGVkLXRleHQsICNiOGI4YjgpO1xuICB9XG48L3N0eWxlPlxuIiwgImV4cG9ydCB7IGRlZmF1bHQgfSBmcm9tICcuL011bHRpU2VsZWN0LnN2ZWx0ZSc7XG4vLyBnZXQgdGhlIGxhYmVsIGtleSBmcm9tIGFuIG9wdGlvbiBvYmplY3Qgb3IgdGhlIG9wdGlvbiBpdHNlbGYgaWYgaXQncyBhIHN0cmluZyBvciBudW1iZXJcbmV4cG9ydCBjb25zdCBnZXRfbGFiZWwgPSAob3ApID0+IChvcCBpbnN0YW5jZW9mIE9iamVjdCA/IG9wLmxhYmVsIDogb3ApO1xuLy8gZmFsbGJhY2sgb24gbGFiZWwgaWYgb3B0aW9uIGlzIG9iamVjdCBhbmQgdmFsdWUgaXMgdW5kZWZpbmVkXG5leHBvcnQgY29uc3QgZ2V0X3ZhbHVlID0gKG9wKSA9PiBvcCBpbnN0YW5jZW9mIE9iamVjdCA/IG9wLnZhbHVlID8/IG9wLmxhYmVsIDogb3A7XG4vLyBGaXJlZm94IGxhY2tzIHN1cHBvcnQgZm9yIHNjcm9sbEludG9WaWV3SWZOZWVkZWQsIHNlZVxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2phbm9zaC9zdmVsdGUtbXVsdGlzZWxlY3QvaXNzdWVzLzg3XG4vLyB0aGlzIHBvbHlmaWxsIHdhcyBjb3BpZWQgZnJvbVxuLy8gaHR0cHM6Ly9naXRodWIuY29tL251eG9kaW4vbGF6eWZpbGwvYmxvYi9hOGU2My9wb2x5ZmlsbHMvRWxlbWVudC9wcm90b3R5cGUvc2Nyb2xsSW50b1ZpZXdJZk5lZWRlZC5qc1xuaWYgKHR5cGVvZiBFbGVtZW50ICE9PSBgdW5kZWZpbmVkYCAmJlxuICAgICFFbGVtZW50LnByb3RvdHlwZT8uc2Nyb2xsSW50b1ZpZXdJZk5lZWRlZCkge1xuICAgIEVsZW1lbnQucHJvdG90eXBlLnNjcm9sbEludG9WaWV3SWZOZWVkZWQgPSBmdW5jdGlvbiAoY2VudGVySWZOZWVkZWQgPSB0cnVlKSB7XG4gICAgICAgIGNvbnN0IGVsID0gdGhpcztcbiAgICAgICAgbmV3IEludGVyc2VjdGlvbk9ic2VydmVyKGZ1bmN0aW9uIChbZW50cnldKSB7XG4gICAgICAgICAgICBjb25zdCByYXRpbyA9IGVudHJ5LmludGVyc2VjdGlvblJhdGlvO1xuICAgICAgICAgICAgaWYgKHJhdGlvIDwgMSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBsYWNlID0gcmF0aW8gPD0gMCAmJiBjZW50ZXJJZk5lZWRlZCA/IGBjZW50ZXJgIDogYG5lYXJlc3RgO1xuICAgICAgICAgICAgICAgIGVsLnNjcm9sbEludG9WaWV3KHtcbiAgICAgICAgICAgICAgICAgICAgYmxvY2s6IHBsYWNlLFxuICAgICAgICAgICAgICAgICAgICBpbmxpbmU6IHBsYWNlLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5kaXNjb25uZWN0KCk7XG4gICAgICAgIH0pLm9ic2VydmUodGhpcyk7XG4gICAgfTtcbn1cbiIsICI8c2NyaXB0IGxhbmc9XCJ0c1wiPlxuICAgIGltcG9ydCB7IEJ1dHRvbkNvbXBvbmVudCB9IGZyb20gXCJvYnNpZGlhblwiO1xuICAgIGltcG9ydCB0eXBlIEluaXRpYXRpdmVUcmFja2VyIGZyb20gXCJzcmMvbWFpblwiO1xuICAgIGltcG9ydCB7IHNvdXJjZXMgfSBmcm9tIFwiLi4vLi4vc3RvcmVzL2ZpbHRlclwiO1xuXG4gICAgZXhwb3J0IGxldCBwbHVnaW46IEluaXRpYXRpdmVUcmFja2VyO1xuICAgIGNvbnN0IGFsbFNvdXJjZXMgPSBbLi4ubmV3IFNldChwbHVnaW4uYmVzdGlhcnkubWFwKChjKSA9PiBjLnNvdXJjZSkuZmxhdCgpKV1cbiAgICAgICAgLmZpbHRlcigocykgPT4gcylcbiAgICAgICAgLnNvcnQoKTtcbiAgICBjb25zdCBhbGwgPSAobm9kZTogSFRNTEVsZW1lbnQpID0+IHtcbiAgICAgICAgbmV3IEJ1dHRvbkNvbXBvbmVudChub2RlKS5zZXRCdXR0b25UZXh0KFwiU2VsZWN0IEFsbFwiKS5vbkNsaWNrKCgpID0+IHtcbiAgICAgICAgICAgICRzb3VyY2VzID0gW107XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgY29uc3Qgbm9uZSA9IChub2RlOiBIVE1MRWxlbWVudCkgPT4ge1xuICAgICAgICBuZXcgQnV0dG9uQ29tcG9uZW50KG5vZGUpLnNldEJ1dHRvblRleHQoXCJEZXNlbGVjdCBBbGxcIikub25DbGljaygoKSA9PiB7XG4gICAgICAgICAgICAkc291cmNlcyA9IFsuLi5hbGxTb3VyY2VzXTtcbiAgICAgICAgfSk7XG4gICAgfTtcbjwvc2NyaXB0PlxuXG48ZGl2XG4gICAgY2xhc3M9XCJpbml0aWF0aXZlLXRyYWNrZXIgaW50aWF0aXZlLXRyYWNrZXItbW9kYWwgZW5jb3VudGVyLWJ1aWxkZXItbW9kYWwgZmlsdGVyLXNvdXJjZXMtbW9kYWxcIlxuPlxuICAgIDxoMz5Tb3VyY2VzPC9oMz5cbiAgICA8ZGl2IGNsYXNzPVwiYnV0dG9uc1wiPlxuICAgICAgICA8ZGl2IHVzZTphbGwgLz5cbiAgICAgICAgPGRpdiB1c2U6bm9uZSAvPlxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJzb3VyY2VzLWxpc3RcIj5cbiAgICAgICAgeyNlYWNoIGFsbFNvdXJjZXMgYXMgc291cmNlfVxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInNvdXJjZVwiPlxuICAgICAgICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgICAgICAgICB0eXBlPVwiY2hlY2tib3hcIlxuICAgICAgICAgICAgICAgICAgICBuYW1lPXtzb3VyY2V9XG4gICAgICAgICAgICAgICAgICAgIGlkPXtgSURfc291cmNlXyR7c291cmNlfWB9XG4gICAgICAgICAgICAgICAgICAgIGNoZWNrZWQ9eyEkc291cmNlcy5pbmNsdWRlcyhzb3VyY2UpfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPGxhYmVsIGZvcj17YElEX3NvdXJjZV8ke3NvdXJjZX1gfT57c291cmNlfTwvbGFiZWw+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgey9lYWNofVxuICAgIDwvZGl2PlxuPC9kaXY+XG5cbjxzdHlsZSBzY29wZWQ+XG4gICAgLmJ1dHRvbnMge1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICBnYXA6IDFyZW07XG4gICAgICAgIG1hcmdpbi1ib3R0b206IDFyZW07XG4gICAgfVxuXG4gICAgLnNvdXJjZXMtbGlzdCB7XG4gICAgICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgICAgIGdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KGF1dG8tZmlsbCwgbWlubWF4KDIwMHB4LCAxZnIpKTtcbiAgICAgICAgZ2FwOiAxcmVtO1xuICAgIH1cbjwvc3R5bGU+XG4iLCAiaW1wb3J0IHsgZGVyaXZlZCwgZ2V0LCBSZWFkYWJsZSwgV3JpdGFibGUsIHdyaXRhYmxlIH0gZnJvbSBcInN2ZWx0ZS9zdG9yZVwiO1xuXG5jb25zdCBERUZBVUxUX0NSOiBbbnVtYmVyLCBudW1iZXJdID0gWzAsIDMwXTtcblxuZnVuY3Rpb24gY3JlYXRlQ1IoKSB7XG4gICAgY29uc3Qgc3RvcmUgPSB3cml0YWJsZTxbbnVtYmVyLCBudW1iZXJdPihbLi4uREVGQVVMVF9DUl0pO1xuICAgIGNvbnN0IHsgc3Vic2NyaWJlLCBzZXQsIHVwZGF0ZSB9ID0gc3RvcmU7XG4gICAgY29uc3QgaXNEZWZhdWx0ID0gZGVyaXZlZChzdG9yZSwgKGV4aXN0aW5nKSA9PiB7XG4gICAgICAgIGlmIChERUZBVUxUX0NSWzBdID09IGV4aXN0aW5nWzBdICYmIERFRkFVTFRfQ1JbMV0gPT0gZXhpc3RpbmdbMV0pXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICAgIGlzRGVmYXVsdCxcbiAgICAgICAgc3Vic2NyaWJlLFxuICAgICAgICBzZXQ6ICh2YWx1ZTogW251bWJlciwgbnVtYmVyXSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgY3VycmVudCA9IGdldChzdG9yZSk7XG4gICAgICAgICAgICBsZXQgc2V0TWluID0gdHJ1ZSxcbiAgICAgICAgICAgICAgICBzZXRNYXggPSB0cnVlO1xuICAgICAgICAgICAgaWYgKHZhbHVlWzBdID09IGN1cnJlbnRbMF0gfHwgdmFsdWVbMF0gPCAwKSB7XG4gICAgICAgICAgICAgICAgc2V0TWluID0gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh2YWx1ZVsxXSA9PSBjdXJyZW50WzFdIHx8IHZhbHVlWzBdID4gMzApIHtcbiAgICAgICAgICAgICAgICBzZXRNYXggPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghc2V0TWluICYmICFzZXRNYXgpIHJldHVybjtcbiAgICAgICAgICAgIHVwZGF0ZSgoY3IpID0+IHtcbiAgICAgICAgICAgICAgICBjciA9IFsuLi52YWx1ZV07XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNyO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG4gICAgICAgIHJlc2V0OiAoKSA9PiBzZXQoWy4uLkRFRkFVTFRfQ1JdKSxcbiAgICAgICAgdXBkYXRlLFxuICAgICAgICBjb21wYXJlcjogKHZhbHVlOiBbbnVtYmVyLCBudW1iZXJdKSA9PlxuICAgICAgICAgICAgZGVyaXZlZChzdG9yZSwgKHZhbHVlcykgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChnZXQoaXNEZWZhdWx0KSkgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlWzBdID49IHZhbHVlc1swXSAmJiB2YWx1ZVsxXSA8PSB2YWx1ZXNbMV07XG4gICAgICAgICAgICB9KVxuICAgIH07XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVN0cmluZ0FycmF5U3RvcmUoKSB7XG4gICAgbGV0IERFRkFVTFRfU1RSSU5HX0FSUkFZOiBzdHJpbmdbXSA9IFtdO1xuICAgIGNvbnN0IHN0b3JlID0gd3JpdGFibGU8c3RyaW5nW10+KFsuLi5ERUZBVUxUX1NUUklOR19BUlJBWV0pO1xuICAgIGNvbnN0IHsgc3Vic2NyaWJlLCBzZXQsIHVwZGF0ZSB9ID0gc3RvcmU7XG5cbiAgICBjb25zdCBpc0RlZmF1bHQgPSBkZXJpdmVkKHN0b3JlLCAoZXhpc3RpbmcpID0+IHtcbiAgICAgICAgcmV0dXJuICFleGlzdGluZy5sZW5ndGg7XG4gICAgfSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaXNEZWZhdWx0LFxuICAgICAgICBzdWJzY3JpYmUsXG4gICAgICAgIHNldCxcbiAgICAgICAgcmVzZXQ6ICgpID0+IHNldChbLi4uREVGQVVMVF9TVFJJTkdfQVJSQVldKSxcbiAgICAgICAgY29tcGFyZXI6ICh2YWx1ZTogc3RyaW5nKSA9PlxuICAgICAgICAgICAgZGVyaXZlZChzdG9yZSwgKHZhbHVlcykgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBnZXQoaXNEZWZhdWx0KSB8fCB2YWx1ZXMuaW5jbHVkZXModmFsdWUpO1xuICAgICAgICAgICAgfSksXG4gICAgICAgIHVwZGF0ZVxuICAgIH07XG59XG5cbmV4cG9ydCBjb25zdCBjciA9IGNyZWF0ZUNSKCk7XG5leHBvcnQgY29uc3QgYWxpZ25tZW50ID0gY3JlYXRlU3RyaW5nQXJyYXlTdG9yZSgpO1xuZXhwb3J0IGNvbnN0IHR5cGUgPSBjcmVhdGVTdHJpbmdBcnJheVN0b3JlKCk7XG5leHBvcnQgY29uc3Qgc2l6ZSA9IGNyZWF0ZVN0cmluZ0FycmF5U3RvcmUoKTtcbmV4cG9ydCBjb25zdCBzb3VyY2VzID0gY3JlYXRlU3RyaW5nQXJyYXlTdG9yZSgpO1xuZXhwb3J0IGNvbnN0IG5hbWUgPSB3cml0YWJsZTxzdHJpbmc+KCk7XG4iLCAiPHNjcmlwdCBsYW5nPVwidHNcIj5cbiAgICBpbXBvcnQgQ3JlYXR1cmUgZnJvbSBcIi4vQ3JlYXR1cmUuc3ZlbHRlXCI7XG4gICAgaW1wb3J0IHsgZ2V0Q29udGV4dCB9IGZyb20gXCJzdmVsdGVcIjtcbiAgICBpbXBvcnQgRmlsdGVycyBmcm9tIFwiLi9GaWx0ZXJzLnN2ZWx0ZVwiO1xuICAgIGltcG9ydCB0eXBlIHsgU1JETW9uc3RlciB9IGZyb20gXCJAdHlwZXNcIjtcbiAgICBpbXBvcnQgeyBwcmVwYXJlRnV6enlTZWFyY2gsIHByZXBhcmVTaW1wbGVTZWFyY2gsIHNldEljb24gfSBmcm9tIFwib2JzaWRpYW5cIjtcbiAgICBpbXBvcnQgUGFnaW5hdGlvbiBmcm9tIFwiLi9QYWdpbmF0aW9uLnN2ZWx0ZVwiO1xuICAgIGltcG9ydCB7XG4gICAgICAgIGNyLFxuICAgICAgICBhbGlnbm1lbnQsXG4gICAgICAgIHNpemUsXG4gICAgICAgIHR5cGUsXG4gICAgICAgIHNvdXJjZXMsXG4gICAgICAgIG5hbWVcbiAgICB9IGZyb20gXCIuLi8uLi9zdG9yZXMvZmlsdGVyXCI7XG4gICAgaW1wb3J0IHsgY29udmVydEZyYWN0aW9uIH0gZnJvbSBcInNyYy91dGlsc1wiO1xuICAgIGltcG9ydCB7IGdldCB9IGZyb20gXCJzdmVsdGUvc3RvcmVcIjtcblxuICAgIGludGVyZmFjZSBUYWJsZUhlYWRlciB7XG4gICAgICAgIHRleHQ6IHN0cmluZztcbiAgICAgICAgYWN0aXZlOiBib29sZWFuO1xuICAgICAgICBzb3J0QXNjOiAoYTogU1JETW9uc3RlciwgYjogU1JETW9uc3RlcikgPT4gbnVtYmVyO1xuICAgICAgICBzb3J0RGVzYzogKGE6IFNSRE1vbnN0ZXIsIGI6IFNSRE1vbnN0ZXIpID0+IG51bWJlcjtcbiAgICB9XG5cbiAgICBjb25zdCBwbHVnaW4gPSBnZXRDb250ZXh0KFwicGx1Z2luXCIpO1xuXG4gICAgbGV0IHNsaWNlID0gNTA7XG5cbiAgICBsZXQgc29ydERpciA9IHRydWU7IC8vdHJ1ZSA9PSBhc2MsIGZhbHNlID09IGRlc1xuICAgIGNvbnN0IHNvcnQgPSAoZmllbGQ6IFRhYmxlSGVhZGVyKSA9PiB7XG4gICAgICAgIGlmIChmaWVsZC5hY3RpdmUpIHtcbiAgICAgICAgICAgIHNvcnREaXIgPSAhc29ydERpcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGhlYWRlcnMgPSBoZWFkZXJzLm1hcCgoaCkgPT4ge1xuICAgICAgICAgICAgICAgIGguYWN0aXZlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGg7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGZpZWxkLmFjdGl2ZSA9IHRydWU7XG4gICAgICAgICAgICBzb3J0RGlyID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNyZWF0dXJlcy5zb3J0KHNvcnREaXIgPyBmaWVsZC5zb3J0QXNjIDogZmllbGQuc29ydERlc2MpO1xuICAgICAgICBjcmVhdHVyZXMgPSBjcmVhdHVyZXM7XG4gICAgfTtcbiAgICBjb25zdCBzb3J0SWNvbiA9IChub2RlOiBIVE1MRWxlbWVudCkgPT4ge1xuICAgICAgICBzZXRJY29uKG5vZGUsIHNvcnREaXIgPyBcImNoZXZyb24tdXBcIiA6IFwiY2hldnJvbi1kb3duXCIpO1xuICAgIH07XG4gICAgbGV0IGhlYWRlcnM6IFRhYmxlSGVhZGVyW10gPSBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRleHQ6IFwiTmFtZVwiLFxuICAgICAgICAgICAgYWN0aXZlOiB0cnVlLFxuICAgICAgICAgICAgc29ydEFzYzogKGEsIGIpID0+IGEubmFtZS5sb2NhbGVDb21wYXJlKGIubmFtZSksXG4gICAgICAgICAgICBzb3J0RGVzYzogKGEsIGIpID0+IGIubmFtZS5sb2NhbGVDb21wYXJlKGEubmFtZSlcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgdGV4dDogXCJDUlwiLFxuICAgICAgICAgICAgYWN0aXZlOiBmYWxzZSxcbiAgICAgICAgICAgIHNvcnRBc2M6IChhLCBiKSA9PlxuICAgICAgICAgICAgICAgIGNvbnZlcnRGcmFjdGlvbihhLmNyID8/IDApIC0gY29udmVydEZyYWN0aW9uKGIuY3IgPz8gMCksXG4gICAgICAgICAgICBzb3J0RGVzYzogKGEsIGIpID0+XG4gICAgICAgICAgICAgICAgY29udmVydEZyYWN0aW9uKGIuY3IgPz8gMCkgLSBjb252ZXJ0RnJhY3Rpb24oYS5jciA/PyAwKVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICB0ZXh0OiBcIlR5cGVcIixcbiAgICAgICAgICAgIGFjdGl2ZTogZmFsc2UsXG4gICAgICAgICAgICBzb3J0QXNjOiAoYSwgYikgPT4gYS50eXBlPy5sb2NhbGVDb21wYXJlKGIudHlwZSksXG4gICAgICAgICAgICBzb3J0RGVzYzogKGEsIGIpID0+IGIudHlwZT8ubG9jYWxlQ29tcGFyZShhLnR5cGUpXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRleHQ6IFwiU2l6ZVwiLFxuICAgICAgICAgICAgYWN0aXZlOiBmYWxzZSxcbiAgICAgICAgICAgIHNvcnRBc2M6IChhLCBiKSA9PiBhLnNpemU/LmxvY2FsZUNvbXBhcmUoYi5zaXplKSxcbiAgICAgICAgICAgIHNvcnREZXNjOiAoYSwgYikgPT4gYi5zaXplPy5sb2NhbGVDb21wYXJlKGEuc2l6ZSlcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgdGV4dDogXCJBbGlnbm1lbnRcIixcbiAgICAgICAgICAgIGFjdGl2ZTogZmFsc2UsXG4gICAgICAgICAgICBzb3J0QXNjOiAoYSwgYikgPT4gYS5hbGlnbm1lbnQ/LmxvY2FsZUNvbXBhcmUoYi5hbGlnbm1lbnQpLFxuICAgICAgICAgICAgc29ydERlc2M6IChhLCBiKSA9PiBiLmFsaWdubWVudD8ubG9jYWxlQ29tcGFyZShhLmFsaWdubWVudClcbiAgICAgICAgfVxuICAgIF07XG5cbiAgICBsZXQgb3JpZ2luYWwgPSBwbHVnaW4uYmVzdGlhcnkgYXMgU1JETW9uc3RlcltdO1xuXG4gICAgbGV0IGNyZWF0dXJlcyA9IFsuLi5vcmlnaW5hbF07XG5cbiAgICBuYW1lLnN1YnNjcmliZSgobikgPT4ge1xuICAgICAgICBpZiAoIW4gfHwgIW4ubGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25zdCBoZWFkZXIgPSBoZWFkZXJzLmZpbmQoKGgpID0+IGguYWN0aXZlKSA/PyBoZWFkZXJzWzBdO1xuICAgICAgICAgICAgaWYgKCFoZWFkZXIuYWN0aXZlKSBoZWFkZXIuYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgICAgIGNvbnN0IGFjdGl2ZSA9IHNvcnREaXIgPyBoZWFkZXIuc29ydEFzYyA6IGhlYWRlci5zb3J0RGVzYztcbiAgICAgICAgICAgIGNyZWF0dXJlcyA9IFsuLi5vcmlnaW5hbF0uc29ydChhY3RpdmUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3Qgc2VhcmNoID0gcHJlcGFyZVNpbXBsZVNlYXJjaChuKTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdHM6IFNSRE1vbnN0ZXJbXSA9IFtdO1xuICAgICAgICAgICAgZm9yIChjb25zdCBtb25zdGVyIG9mIG9yaWdpbmFsKSB7XG4gICAgICAgICAgICAgICAgaWYgKHNlYXJjaChtb25zdGVyLm5hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdHMucHVzaChtb25zdGVyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjcmVhdHVyZXMgPSByZXN1bHRzO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAkOiBmaWx0ZXJlZCA9IGNyZWF0dXJlc1xuICAgICAgICAuZmlsdGVyKFxuICAgICAgICAgICAgKGMpID0+XG4gICAgICAgICAgICAgICAgZ2V0KGNyLmlzRGVmYXVsdCkgfHxcbiAgICAgICAgICAgICAgICAoY29udmVydEZyYWN0aW9uKGMuY3IpID49ICRjclswXSAmJlxuICAgICAgICAgICAgICAgICAgICBjb252ZXJ0RnJhY3Rpb24oYy5jcikgPD0gJGNyWzFdKVxuICAgICAgICApXG4gICAgICAgIC5maWx0ZXIoXG4gICAgICAgICAgICAoYykgPT5cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICEkc2l6ZS5sZW5ndGggfHxcbiAgICAgICAgICAgICAgICAkc2l6ZVxuICAgICAgICAgICAgICAgICAgICAubWFwKChzKSA9PiBzPy50b0xvd2VyQ2FzZSgpKVxuICAgICAgICAgICAgICAgICAgICAuaW5jbHVkZXMoYy5zaXplPy50b0xvd2VyQ2FzZSgpKVxuICAgICAgICApXG4gICAgICAgIC5maWx0ZXIoXG4gICAgICAgICAgICAoYykgPT5cbiAgICAgICAgICAgICAgICAhJHR5cGUubGVuZ3RoIHx8XG4gICAgICAgICAgICAgICAgJHR5cGVcbiAgICAgICAgICAgICAgICAgICAgLm1hcCgocykgPT4gcz8udG9Mb3dlckNhc2UoKSlcbiAgICAgICAgICAgICAgICAgICAgLmluY2x1ZGVzKGMudHlwZT8udG9Mb3dlckNhc2UoKSlcbiAgICAgICAgKVxuICAgICAgICAuZmlsdGVyKChjKSA9PlxuICAgICAgICAgICAgISRzb3VyY2VzLmxlbmd0aCB8fCB0eXBlb2YgYy5zb3VyY2UgPT0gXCJzdHJpbmdcIlxuICAgICAgICAgICAgICAgID8gISRzb3VyY2VzLmluY2x1ZGVzKGMuc291cmNlIGFzIHN0cmluZylcbiAgICAgICAgICAgICAgICA6ICFjLnNvdXJjZT8uZmluZCgocykgPT4gJHNvdXJjZXMuaW5jbHVkZXMocykpXG4gICAgICAgICk7XG4gICAgbGV0IHBhZ2UgPSAxO1xuICAgICQ6IHBhZ2VzID0gTWF0aC5jZWlsKGZpbHRlcmVkLmxlbmd0aCAvIHNsaWNlKTtcbjwvc2NyaXB0PlxuXG48ZGl2IGNsYXNzPVwiZmlsdGVyc1wiPlxuICAgIDxGaWx0ZXJzIC8+XG48L2Rpdj5cblxuPHRhYmxlPlxuICAgIDx0aGVhZD5cbiAgICAgICAgeyNlYWNoIGhlYWRlcnMgYXMgaGVhZGVyIChoZWFkZXIudGV4dCl9XG4gICAgICAgICAgICA8dGggb246Y2xpY2s9eygpID0+IHNvcnQoaGVhZGVyKX0+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRhYmxlLWhlYWRlclwiPlxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInRhYmxlLWhlYWRlci1jb250ZW50XCI+e2hlYWRlci50ZXh0fTwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgeyNrZXkgc29ydERpcn1cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgdXNlOnNvcnRJY29uIGNsYXNzOmludmlzaWJsZT17IWhlYWRlci5hY3RpdmV9IC8+XG4gICAgICAgICAgICAgICAgICAgIHsva2V5fVxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC90aD5cbiAgICAgICAgey9lYWNofVxuICAgIDwvdGhlYWQ+XG4gICAgPHRib2R5PlxuICAgICAgICB7I2VhY2ggZmlsdGVyZWQuc2xpY2UoKHBhZ2UgLSAxKSAqIHNsaWNlLCBwYWdlICogc2xpY2UpIGFzIGNyZWF0dXJlfVxuICAgICAgICAgICAgPENyZWF0dXJlIHtjcmVhdHVyZX0gLz5cbiAgICAgICAgey9lYWNofVxuICAgIDwvdGJvZHk+XG48L3RhYmxlPlxuXG48UGFnaW5hdGlvblxuICAgIHtzbGljZX1cbiAgICB7cGFnZX1cbiAgICB7cGFnZXN9XG4gICAgb246c2xpY2U9eyhldnQpID0+IChzbGljZSA9IGV2dC5kZXRhaWwpfVxuICAgIG9uOnByZXZpb3VzPXsoKSA9PiAocGFnZSA9IHBhZ2UgLSAxKX1cbiAgICBvbjpuZXh0PXsoKSA9PiAocGFnZSA9IE1hdGgubWluKHBhZ2UgKyAxLCBwYWdlcykpfVxuICAgIG9uOnBhZ2U9eyhldnQpID0+IChwYWdlID0gZXZ0LmRldGFpbCl9XG4vPlxuXG48c3R5bGUgc2NvcGVkPlxuICAgIC5maWx0ZXJzIHtcbiAgICAgICAgbWFyZ2luOiAxcmVtIDA7XG4gICAgfVxuICAgIC50YWJsZS1oZWFkZXIge1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBnYXA6IDAuMjVyZW07XG4gICAgfVxuXG4gICAgLmludmlzaWJsZSB7XG4gICAgICAgIGNvbG9yOiB0cmFuc3BhcmVudDtcbiAgICB9XG5cbiAgICB0YWJsZSB7XG4gICAgICAgIHdpZHRoOiAxMDAlO1xuICAgIH1cbjwvc3R5bGU+XG4iLCAiPHNjcmlwdCBsYW5nPVwidHNcIj5cbiAgICBpbXBvcnQge1xuICAgICAgICBkZWJvdW5jZSxcbiAgICAgICAgRHJvcGRvd25Db21wb25lbnQsXG4gICAgICAgIEV4dHJhQnV0dG9uQ29tcG9uZW50LFxuICAgICAgICBNZW51LFxuICAgICAgICBUZXh0Q29tcG9uZW50XG4gICAgfSBmcm9tIFwib2JzaWRpYW5cIjtcbiAgICBpbXBvcnQgeyBjcmVhdGVFdmVudERpc3BhdGNoZXIgfSBmcm9tIFwic3ZlbHRlXCI7XG5cbiAgICBleHBvcnQgbGV0IHNsaWNlOiBudW1iZXI7XG4gICAgZXhwb3J0IGxldCBwYWdlOiBudW1iZXI7XG4gICAgZXhwb3J0IGxldCBwYWdlczogbnVtYmVyO1xuXG4gICAgY29uc3QgZGlzcGF0Y2ggPSBjcmVhdGVFdmVudERpc3BhdGNoZXIoKTtcblxuICAgIGNvbnN0IHNsaWNlciA9IChub2RlOiBIVE1MRWxlbWVudCkgPT4ge1xuICAgICAgICBuZXcgRHJvcGRvd25Db21wb25lbnQobm9kZSlcbiAgICAgICAgICAgIC5hZGRPcHRpb25zKHtcbiAgICAgICAgICAgICAgICBcIjEwXCI6IFwiMTBcIixcbiAgICAgICAgICAgICAgICBcIjI1XCI6IFwiMjVcIixcbiAgICAgICAgICAgICAgICBcIjUwXCI6IFwiNTBcIixcbiAgICAgICAgICAgICAgICBcIjEwMFwiOiBcIjEwMFwiLFxuICAgICAgICAgICAgICAgIFwiMjAwXCI6IFwiMjAwXCJcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuc2V0VmFsdWUoYCR7c2xpY2V9YClcbiAgICAgICAgICAgIC5vbkNoYW5nZSgodikgPT4gZGlzcGF0Y2goXCJzbGljZVwiLCBOdW1iZXIodikpKTtcbiAgICB9O1xuICAgIGxldCBwcmV2OiBFeHRyYUJ1dHRvbkNvbXBvbmVudDtcbiAgICBjb25zdCBwcmV2aW91cyA9IChub2RlOiBIVE1MRWxlbWVudCkgPT4ge1xuICAgICAgICBwcmV2ID0gbmV3IEV4dHJhQnV0dG9uQ29tcG9uZW50KG5vZGUpXG4gICAgICAgICAgICAuc2V0SWNvbihcImNoZXZyb24tbGVmdFwiKVxuICAgICAgICAgICAgLnNldERpc2FibGVkKHBhZ2UgPT0gMSlcbiAgICAgICAgICAgIC5vbkNsaWNrKCgpID0+IHtcbiAgICAgICAgICAgICAgICBkaXNwYXRjaChcInByZXZpb3VzXCIpO1xuICAgICAgICAgICAgfSk7XG4gICAgfTtcbiAgICBsZXQgbmV4OiBFeHRyYUJ1dHRvbkNvbXBvbmVudDtcbiAgICBjb25zdCBuZXh0ID0gKG5vZGU6IEhUTUxFbGVtZW50KSA9PiB7XG4gICAgICAgIG5leCA9IG5ldyBFeHRyYUJ1dHRvbkNvbXBvbmVudChub2RlKVxuICAgICAgICAgICAgLnNldEljb24oXCJjaGV2cm9uLXJpZ2h0XCIpXG4gICAgICAgICAgICAuc2V0RGlzYWJsZWQocGFnZSA9PSBwYWdlcylcbiAgICAgICAgICAgIC5vbkNsaWNrKCgpID0+IHtcbiAgICAgICAgICAgICAgICBkaXNwYXRjaChcIm5leHRcIik7XG4gICAgICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgJDoga2V5cyA9IFsuLi5BcnJheShwYWdlcykua2V5cygpXS5tYXAoKGspID0+IGsgKyAxKTtcblxuICAgIGNvbnN0IHBhZ2luYXRpb25NZW51ID0gKGV2dDogTW91c2VFdmVudCkgPT4ge1xuICAgICAgICBjb25zdCBtZW51ID0gbmV3IE1lbnUoKTtcbiAgICAgICAgZm9yIChjb25zdCBudW1iZXIgb2Yga2V5cykge1xuICAgICAgICAgICAgbWVudS5hZGRJdGVtKChpdGVtKSA9PiB7XG4gICAgICAgICAgICAgICAgaXRlbS5zZXRUaXRsZShgJHtudW1iZXJ9YCkub25DbGljaygoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoKFwicGFnZVwiLCBudW1iZXIpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgbWVudS5zaG93QXRNb3VzZUV2ZW50KGV2dCk7XG4gICAgfTtcblxuICAgICQ6IHtcbiAgICAgICAgaWYgKG5leCAmJiBwcmV2KSB7XG4gICAgICAgICAgICBuZXguc2V0RGlzYWJsZWQocGFnZSA9PSBwYWdlcyk7XG4gICAgICAgICAgICBwcmV2LnNldERpc2FibGVkKHBhZ2UgPT0gMSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAkOiBkaXNwbGF5ZWQgPSBrZXlzLnJlZHVjZSgoYSwgYykgPT4ge1xuICAgICAgICBpZiAoYyA9PSAxKSB7XG4gICAgICAgICAgICBhLnB1c2goYyk7XG4gICAgICAgIH0gZWxzZSBpZiAocGFnZSA9PSAxICYmIChjID09IDIgfHwgYyA9PSAzKSkge1xuICAgICAgICAgICAgYS5wdXNoKGMpO1xuICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgYyA9PSBwYWdlcyB8fFxuICAgICAgICAgICAgKHBhZ2UgPT0gcGFnZXMgJiYgKGMgPT0gcGFnZXMgLSAxIHx8IGMgPT0gcGFnZXMgLSAyKSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBhLnB1c2goYyk7XG4gICAgICAgIH0gZWxzZSBpZiAoYyA9PSBwYWdlIC0gMSB8fCBjID09IHBhZ2UgfHwgYyA9PSBwYWdlICsgMSkge1xuICAgICAgICAgICAgYS5wdXNoKGMpO1xuICAgICAgICB9IGVsc2UgaWYgKGEubGVuZ3RoID49IDEgJiYgYVthLmxlbmd0aCAtIDFdICE9IG51bGwpIHtcbiAgICAgICAgICAgIGEucHVzaChudWxsKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYTtcbiAgICB9LCBbXSk7XG48L3NjcmlwdD5cblxuPGRpdiBjbGFzcz1cInBhZ2luYXRpb25cIj5cbiAgICA8ZGl2IGNsYXNzPVwic2xpY2VyXCI+XG4gICAgICAgIDxkaXYgdXNlOnNsaWNlciAvPlxuICAgICAgICA8c3Bhbj5wZXIgcGFnZTwvc3Bhbj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwicGFnaW5hdGVkLWNvbnRhaW5lclwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwicHJldmlvdXNcIiB1c2U6cHJldmlvdXMgLz5cbiAgICAgICAgPGRpdiBjbGFzcz1cInBhZ2luYXRlZFwiPlxuICAgICAgICAgICAgeyNlYWNoIGRpc3BsYXllZCBhcyBudW19XG4gICAgICAgICAgICAgICAgeyNpZiBudW0gPT0gbnVsbH1cbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gb246Y2xpY2s9eyhldnQpID0+IHBhZ2luYXRpb25NZW51KGV2dCl9Pi4uLjwvc3Bhbj5cbiAgICAgICAgICAgICAgICB7OmVsc2V9XG4gICAgICAgICAgICAgICAgICAgIDxzcGFuXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz1cImNsaWNrYWJsZS1pY29uXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzOmFjdGl2ZT17bnVtID09IHBhZ2V9XG4gICAgICAgICAgICAgICAgICAgICAgICBvbjpjbGljaz17KCkgPT4gZGlzcGF0Y2goXCJwYWdlXCIsIG51bSl9XG4gICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgIHtudW19XG4gICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICB7L2lmfVxuICAgICAgICAgICAgey9lYWNofVxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cIm5leHRcIiB1c2U6bmV4dCAvPlxuICAgIDwvZGl2PlxuPC9kaXY+XG5cbjxzdHlsZSBzY29wZWQ+XG4gICAgLnBhZ2luYXRpb24ge1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgIGdhcDogMXJlbTtcbiAgICB9XG4gICAgLnBhZ2luYXRlZC1jb250YWluZXIge1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICBnYXA6IDFyZW07XG4gICAgfVxuICAgIC5wYWdpbmF0ZWQge1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICBnYXA6IDFyZW07XG4gICAgfVxuICAgIC5jbGlja2FibGUtaWNvbi5hY3RpdmUge1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1iYWNrZ3JvdW5kLW1vZGlmaWVyLWhvdmVyKTtcbiAgICB9XG4gICAgLnNsaWNlciB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgIGdhcDogMC41cmVtO1xuICAgIH1cbjwvc3R5bGU+XG4iLCAiPHNjcmlwdCBsYW5nPVwidHNcIj5cbiAgICBpbXBvcnQgeyBFeHRyYUJ1dHRvbkNvbXBvbmVudCwgTW9kYWwsIE5vdGljZSwgU2V0dGluZyB9IGZyb20gXCJvYnNpZGlhblwiO1xuXG4gICAgaW1wb3J0IENyZWF0dXJlIGZyb20gXCIuL0NyZWF0dXJlLnN2ZWx0ZVwiO1xuICAgIGltcG9ydCB7IENyZWF0dXJlIGFzIENyZWF0dXJlQ3JlYXRvciB9IGZyb20gXCIuLi8uLi8uLi91dGlscy9jcmVhdHVyZVwiO1xuXG4gICAgaW1wb3J0IHsgZW5jb3VudGVyIH0gZnJvbSBcIi4uLy4uL3N0b3Jlcy9lbmNvdW50ZXJcIjtcbiAgICBpbXBvcnQgeyBTVEFSVF9FTkNPVU5URVIgfSBmcm9tIFwic3JjL3V0aWxzXCI7XG4gICAgaW1wb3J0IHsgZ2V0Q29udGV4dCB9IGZyb20gXCJzdmVsdGVcIjtcblxuICAgIGNvbnN0IHsgcGxheWVycyB9ID0gZW5jb3VudGVyO1xuXG4gICAgY29uc3QgcGx1Z2luID0gZ2V0Q29udGV4dChcInBsdWdpblwiKTtcblxuICAgICQ6IGl0ZW1zID0gWy4uLiRlbmNvdW50ZXIuZW50cmllcygpXTtcblxuICAgIGxldCBzdGFydEljb246IEV4dHJhQnV0dG9uQ29tcG9uZW50O1xuICAgIGNvbnN0IHN0YXJ0ID0gKG5vZGU6IEhUTUxFbGVtZW50KSA9PiB7XG4gICAgICAgIHN0YXJ0SWNvbiA9IG5ldyBFeHRyYUJ1dHRvbkNvbXBvbmVudChub2RlKVxuICAgICAgICAgICAgLnNldEljb24oU1RBUlRfRU5DT1VOVEVSKVxuICAgICAgICAgICAgLm9uQ2xpY2soKCkgPT4ge1xuICAgICAgICAgICAgICAgIHBsdWdpbi52aWV3Lm5ld0VuY291bnRlcih7XG4gICAgICAgICAgICAgICAgICAgIGNyZWF0dXJlczogWy4uLiRlbmNvdW50ZXIuZW50cmllcygpXVxuICAgICAgICAgICAgICAgICAgICAgICAgLm1hcCgoYykgPT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbLi4uQXJyYXkoY1sxXSkua2V5cygpXS5tYXAoKCkgPT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ3JlYXR1cmVDcmVhdG9yLmZyb20oY1swXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAuZmxhdCgpLFxuICAgICAgICAgICAgICAgICAgICBwbGF5ZXJzOiBbLi4uJHBsYXllcnNdLm1hcCgocCkgPT4gcC5uYW1lKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGFwcC53b3Jrc3BhY2UucmV2ZWFsTGVhZihwbHVnaW4udmlldy5sZWFmKTtcbiAgICAgICAgICAgIH0pO1xuICAgIH07XG5cbiAgICAkOiB7XG4gICAgICAgIGlmIChzdGFydEljb24pIHtcbiAgICAgICAgICAgIGlmICghaXRlbXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgc3RhcnRJY29uLnNldERpc2FibGVkKHRydWUpO1xuICAgICAgICAgICAgICAgIHN0YXJ0SWNvbi5zZXRUb29sdGlwKFwiXCIpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzdGFydEljb24uc2V0RGlzYWJsZWQoZmFsc2UpO1xuICAgICAgICAgICAgICAgIHN0YXJ0SWNvbi5zZXRUb29sdGlwKFwiU3RhcnQgRW5jb3VudGVyXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGxldCBzYXZlSWNvbjogRXh0cmFCdXR0b25Db21wb25lbnQ7XG4gICAgY29uc3Qgc2F2ZSA9IChub2RlOiBIVE1MRWxlbWVudCkgPT4ge1xuICAgICAgICBzYXZlSWNvbiA9IG5ldyBFeHRyYUJ1dHRvbkNvbXBvbmVudChub2RlKVxuICAgICAgICAgICAgLnNldEljb24oXCJzYXZlXCIpXG4gICAgICAgICAgICAub25DbGljaygoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgbW9kYWwgPSBuZXcgTW9kYWwoYXBwKTtcbiAgICAgICAgICAgICAgICBtb2RhbC5jb250ZW50RWwuY3JlYXRlRWwoXCJoNFwiLCB7IHRleHQ6IFwiU2F2ZSBFbmNvdW50ZXJcIiB9KTtcbiAgICAgICAgICAgICAgICBsZXQgbmFtZTogc3RyaW5nID0gYEVuY291bnRlciAke1xuICAgICAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyhwbHVnaW4uZGF0YS5lbmNvdW50ZXJzKS5sZW5ndGhcbiAgICAgICAgICAgICAgICB9YDtcbiAgICAgICAgICAgICAgICBuZXcgU2V0dGluZyhtb2RhbC5jb250ZW50RWwpXG4gICAgICAgICAgICAgICAgICAgIC5zZXROYW1lKFwiRW5jb3VudGVyIE5hbWVcIilcbiAgICAgICAgICAgICAgICAgICAgLmFkZFRleHQoKHQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHQuc2V0UGxhY2Vob2xkZXIobmFtZSkub25DaGFuZ2UoKHYpID0+IChuYW1lID0gdikpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBuZXcgU2V0dGluZyhtb2RhbC5jb250ZW50RWwpLmFkZEJ1dHRvbigoYikgPT5cbiAgICAgICAgICAgICAgICAgICAgYi5zZXRCdXR0b25UZXh0KFwiU2F2ZVwiKS5vbkNsaWNrKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuYW1lIGluIHBsdWdpbi5kYXRhLmVuY291bnRlcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgTm90aWNlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIkFuIGVuY291bnRlciBieSB0aGF0IG5hbWUgYWxyZWFkeSBleGlzdHMuXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNyZWF0dXJlcyA9IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5bLi4uJHBsYXllcnNdLm1hcCgocCkgPT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ3JlYXR1cmVDcmVhdG9yLmZyb20ocClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLlsuLi4kZW5jb3VudGVyLmVudHJpZXMoKV1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLm1hcCgoYykgPT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFsuLi5BcnJheShjWzFdKS5rZXlzKCldLm1hcCgoKSA9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENyZWF0dXJlQ3JlYXRvci5mcm9tKGNbMF0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmZsYXQoKVxuICAgICAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsdWdpbi5kYXRhLmVuY291bnRlcnNbbmFtZV0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXR1cmVzOiBbLi4uY3JlYXR1cmVzLm1hcCgoYykgPT4gYy50b0pTT04oKSldLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdW5kOiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvZ0ZpbGU6IG51bGxcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RhbC5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgbW9kYWwub3BlbigpO1xuICAgICAgICAgICAgfSk7XG4gICAgfTtcblxuICAgICQ6IHtcbiAgICAgICAgaWYgKHNhdmVJY29uKSB7XG4gICAgICAgICAgICBpZiAoIWl0ZW1zLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHNhdmVJY29uLnNldERpc2FibGVkKHRydWUpO1xuICAgICAgICAgICAgICAgIHNhdmVJY29uLnNldFRvb2x0aXAoXCJcIik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNhdmVJY29uLnNldERpc2FibGVkKGZhbHNlKTtcbiAgICAgICAgICAgICAgICBzYXZlSWNvbi5zZXRUb29sdGlwKFwiU2F2ZSBFbmNvdW50ZXJcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgZXhwb3J0SWNvbjogRXh0cmFCdXR0b25Db21wb25lbnQ7XG4gICAgY29uc3QgZXhwID0gKG5vZGU6IEhUTUxFbGVtZW50KSA9PiB7XG4gICAgICAgIGV4cG9ydEljb24gPSBuZXcgRXh0cmFCdXR0b25Db21wb25lbnQobm9kZSkuc2V0SWNvbihcImNvZGVcIik7XG4gICAgfTtcbiAgICAkOiB7XG4gICAgICAgIGlmIChleHBvcnRJY29uKSB7XG4gICAgICAgICAgICBpZiAoIWl0ZW1zLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGV4cG9ydEljb24uc2V0RGlzYWJsZWQodHJ1ZSk7XG4gICAgICAgICAgICAgICAgZXhwb3J0SWNvbi5zZXRUb29sdGlwKFwiXCIpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBleHBvcnRJY29uLnNldERpc2FibGVkKGZhbHNlKTtcbiAgICAgICAgICAgICAgICBleHBvcnRJY29uLnNldFRvb2x0aXAoXCJFeHBvcnQgRW5jb3VudGVyIHRvIE5vdGVcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBsb2FkID0gKG5vZGU6IEhUTUxFbGVtZW50KSA9PiB7XG4gICAgICAgIG5ldyBFeHRyYUJ1dHRvbkNvbXBvbmVudChub2RlKVxuICAgICAgICAgICAgLnNldEljb24oXCJpbXBvcnRcIilcbiAgICAgICAgICAgIC5zZXRUb29sdGlwKFwiTG9hZCBFbmNvdW50ZXJcIilcbiAgICAgICAgICAgIC5vbkNsaWNrKCgpID0+IHt9KTtcbiAgICB9O1xuICAgIGNvbnN0IGNsZWFyID0gKG5vZGU6IEhUTUxFbGVtZW50KSA9PiB7XG4gICAgICAgIG5ldyBFeHRyYUJ1dHRvbkNvbXBvbmVudChub2RlKVxuICAgICAgICAgICAgLnNldEljb24oXCJlcmFzZXJcIilcbiAgICAgICAgICAgIC5zZXRUb29sdGlwKFwiQ2xlYXIgRW5jb3VudGVyXCIpO1xuICAgIH07XG48L3NjcmlwdD5cblxuPGRpdiBjbGFzcz1cImVuY291bnRlci1oZWFkZXJcIj5cbiAgICA8aDUgY2xhc3M9XCJidWlsdC1lbmNvdW50ZXJcIj5FbmNvdW50ZXI8L2g1PlxuICAgIDxkaXYgY2xhc3M9XCJlbmNvdW50ZXItY29udHJvbHNcIj5cbiAgICAgICAgPGRpdiB1c2U6c3RhcnQgLz5cbiAgICAgICAgPGRpdiB1c2U6c2F2ZSAvPlxuICAgICAgICA8IS0tIDxkaXYgdXNlOmV4cCAvPiAtLT5cbiAgICAgICAgPCEtLSA8ZGl2IHVzZTpsb2FkIC8+IC0tPlxuXG4gICAgICAgIDxkaXYgdXNlOmNsZWFyIG9uOmNsaWNrPXsoKSA9PiBlbmNvdW50ZXIuZW1wdHkoKX0gLz5cbiAgICA8L2Rpdj5cbjwvZGl2PlxueyNpZiAhaXRlbXMubGVuZ3RofVxuICAgIDxzcGFuPkFkZCBzb21lIGNyZWF0dXJlcyB0byBnZXQgc3RhcnRlZCE8L3NwYW4+XG57OmVsc2V9XG4gICAgPGRpdiBjbGFzcz1cImVuY291bnRlci1jcmVhdHVyZXNcIj5cbiAgICAgICAgeyNlYWNoIGl0ZW1zIGFzIFtjcmVhdHVyZSwgY291bnRdfVxuICAgICAgICAgICAgPENyZWF0dXJlIHtjcmVhdHVyZX0ge2NvdW50fSAvPlxuICAgICAgICB7L2VhY2h9XG4gICAgPC9kaXY+XG57L2lmfVxuXG48c3R5bGUgc2NvcGVkPlxuICAgIC5lbmNvdW50ZXItaGVhZGVyIHtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgIH1cbiAgICAuZW5jb3VudGVyLWNyZWF0dXJlcyB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGdhcDogMC41cmVtO1xuICAgICAgICBmbGV4LWZsb3c6IGNvbHVtbiBub3dyYXA7XG4gICAgfVxuICAgIC5lbmNvdW50ZXItaGVhZGVyIDpnbG9iYWwoLmlzLWRpc2FibGVkKSB7XG4gICAgICAgIGN1cnNvcjogbm90LWFsbG93ZWQ7XG4gICAgfVxuICAgIC5lbmNvdW50ZXItY29udHJvbHMge1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBnYXA6IDAuNXJlbTtcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICB9XG48L3N0eWxlPlxuIiwgIjxzY3JpcHQgbGFuZz1cInRzXCI+XG4gICAgaW1wb3J0IHR5cGUgeyBTUkRNb25zdGVyIH0gZnJvbSBcIkB0eXBlc1wiO1xuICAgIGltcG9ydCB7IEV4dHJhQnV0dG9uQ29tcG9uZW50LCBzZXRJY29uIH0gZnJvbSBcIm9ic2lkaWFuXCI7XG4gICAgaW1wb3J0IHsgY29udmVydEZyYWN0aW9uLCBERUZBVUxUX1VOREVGSU5FRCwgWFBfUEVSX0NSIH0gZnJvbSBcInNyYy91dGlsc1wiO1xuICAgIGltcG9ydCB7IGVuY291bnRlciB9IGZyb20gXCIuLi8uLi9zdG9yZXMvZW5jb3VudGVyXCI7XG4gICAgaW1wb3J0IE51bGxhYmxlIGZyb20gXCIuLi9OdWxsYWJsZS5zdmVsdGVcIjtcblxuICAgIGNvbnN0IHsgcGxheWVycyB9ID0gZW5jb3VudGVyO1xuICAgIGNvbnN0IHsgYXZlcmFnZSB9ID0gcGxheWVycztcblxuICAgIGNvbnN0IHJlbW92ZSA9IChub2RlOiBIVE1MRWxlbWVudCkgPT4ge1xuICAgICAgICBuZXcgRXh0cmFCdXR0b25Db21wb25lbnQobm9kZSkuc2V0SWNvbihcIm1pbnVzLWNpcmNsZVwiKTtcbiAgICB9O1xuICAgIGNvbnN0IGFkZCA9IChub2RlOiBIVE1MRWxlbWVudCkgPT4ge1xuICAgICAgICBuZXcgRXh0cmFCdXR0b25Db21wb25lbnQobm9kZSkuc2V0SWNvbihcInBsdXMtd2l0aC1jaXJjbGVcIik7XG4gICAgfTtcbiAgICBjb25zdCBkZWwgPSAobm9kZTogSFRNTEVsZW1lbnQpID0+IHtcbiAgICAgICAgbmV3IEV4dHJhQnV0dG9uQ29tcG9uZW50KG5vZGUpLnNldEljb24oXCJ0cmFzaC0yXCIpO1xuICAgIH07XG5cbiAgICBleHBvcnQgbGV0IGNvdW50OiBudW1iZXI7XG4gICAgZXhwb3J0IGxldCBjcmVhdHVyZTogU1JETW9uc3RlcjtcbiAgICBjb25zdCBjb252ZXJ0ZWRDUiA9IChjcjogc3RyaW5nIHwgbnVtYmVyKSA9PiB7XG4gICAgICAgIGlmIChjciA9PSB1bmRlZmluZWQpIHJldHVybiBERUZBVUxUX1VOREVGSU5FRDtcbiAgICAgICAgaWYgKGNyID09IFwiMS84XCIpIHtcbiAgICAgICAgICAgIHJldHVybiBcIlx1MjE1QlwiO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjciA9PSBcIjEvNFwiKSB7XG4gICAgICAgICAgICByZXR1cm4gXCJcdTAwQkNcIjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY3IgPT0gXCIxLzJcIikge1xuICAgICAgICAgICAgcmV0dXJuIFwiXHUwMEJEXCI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNyO1xuICAgIH07XG5cbiAgICBjb25zdCBpbnNpZ25pZmljYW50ID0gY29udmVydEZyYWN0aW9uKGNyZWF0dXJlLmNyKSA8ICRhdmVyYWdlIC0gMztcblxuICAgIGNvbnN0IGJhYnkgPSAobm9kZTogSFRNTEVsZW1lbnQpID0+IHNldEljb24obm9kZSwgXCJiYWJ5XCIpO1xuICAgIGNvbnN0IGNoYWxsZW5nZSA9IGNvbnZlcnRGcmFjdGlvbihjcmVhdHVyZS5jcikgPiAkYXZlcmFnZSArIDM7XG5cbiAgICBjb25zdCBza3VsbCA9IChub2RlOiBIVE1MRWxlbWVudCkgPT4gc2V0SWNvbihub2RlLCBcInNrdWxsXCIpO1xuPC9zY3JpcHQ+XG5cbjxkaXYgY2xhc3M9XCJlbmNvdW50ZXItY3JlYXR1cmUtY29udGFpbmVyXCI+XG4gICAgPGRpdiBjbGFzcz1cImVuY291bnRlci1jcmVhdHVyZS1jb250cm9sc1wiPlxuICAgICAgICA8ZGl2IHVzZTpyZW1vdmUgb246Y2xpY2s9eygpID0+IGVuY291bnRlci5yZW1vdmUoY3JlYXR1cmUpfSAvPlxuICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgIHR5cGU9XCJudW1iZXJcIlxuICAgICAgICAgICAgbWluPVwiMVwiXG4gICAgICAgICAgICBiaW5kOnZhbHVlPXtjb3VudH1cbiAgICAgICAgICAgIG9uOmNoYW5nZT17KGV2dCkgPT5cbiAgICAgICAgICAgICAgICBlbmNvdW50ZXIuc2V0KGNyZWF0dXJlLCBOdW1iZXIoZXZ0LmN1cnJlbnRUYXJnZXQudmFsdWUpKX1cbiAgICAgICAgLz5cbiAgICAgICAgPGRpdiB1c2U6YWRkIG9uOmNsaWNrPXsoKSA9PiBlbmNvdW50ZXIuYWRkKGNyZWF0dXJlKX0gLz5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwiZW5jb3VudGVyLWNyZWF0dXJlXCI+XG4gICAgICAgIDxzdHJvbmcgY2xhc3M9XCJlbmNvdW50ZXItY3JlYXR1cmUtbmFtZVwiPlxuICAgICAgICAgICAge2NyZWF0dXJlLm5hbWV9XG4gICAgICAgIDwvc3Ryb25nPlxuICAgICAgICB7I2lmIGluc2lnbmlmaWNhbnR9XG4gICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgY2xhc3M9XCJjb250YWlucy1pY29uXCJcbiAgICAgICAgICAgICAgICB1c2U6YmFieVxuICAgICAgICAgICAgICAgIGFyaWEtbGFiZWw9e2Ake1xuICAgICAgICAgICAgICAgICAgICBjb3VudCA+IDEgPyBcIlRoZXNlIGNyZWF0dXJlcyBhcmVcIiA6IFwiVGhpcyBjcmVhdHVyZSBpc1wiXG4gICAgICAgICAgICAgICAgfSBzaWduaWZpY2FudGx5IHVuZGVyIHRoZSBhdmVyYWdlIHBhcnR5IGxldmVsIGFuZCBtaWdodCBub3QgY29udHJpYnV0ZSBtdWNoIHRvIHRoZSBmaWdodC5gfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgey9pZn1cbiAgICAgICAgeyNpZiBjaGFsbGVuZ2V9XG4gICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgY2xhc3M9XCJjb250YWlucy1pY29uXCJcbiAgICAgICAgICAgICAgICB1c2U6c2t1bGxcbiAgICAgICAgICAgICAgICBhcmlhLWxhYmVsPXtgJHtcbiAgICAgICAgICAgICAgICAgICAgY291bnQgPiAxID8gXCJUaGVzZSBjcmVhdHVyZXMgYXJlXCIgOiBcIlRoaXMgY3JlYXR1cmUgaXNcIlxuICAgICAgICAgICAgICAgIH0gc2lnbmlmaWNhbnRseSBvdmVyIHRoZSBhdmVyYWdlIHBhcnR5IGxldmVsIGFuZCBtaWdodCBwcm92ZSBhIGNoYWxsZW5nZS5gfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgey9pZn1cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwiZW5jb3VudGVyLWNyZWF0dXJlLWNvbnRleHRcIj5cbiAgICAgICAgPHNwYW4+XG4gICAgICAgICAgICA8TnVsbGFibGUgc3RyPXtgJHtjb252ZXJ0ZWRDUihjcmVhdHVyZS5jcil9IENSYH0gLz5cbiAgICAgICAgPC9zcGFuPlxuICAgIDwvZGl2PlxuICAgIDxkaXYgY2xhc3M9XCJlbmNvdW50ZXItY3JlYXR1cmUtY29udGV4dFwiPlxuICAgICAgICA8c3Bhbj5cbiAgICAgICAgICAgIDxOdWxsYWJsZVxuICAgICAgICAgICAgICAgIHN0cj17YCR7XG4gICAgICAgICAgICAgICAgICAgIFhQX1BFUl9DUltjcmVhdHVyZS5jcl0/LnRvTG9jYWxlU3RyaW5nKCkgPz9cbiAgICAgICAgICAgICAgICAgICAgREVGQVVMVF9VTkRFRklORURcbiAgICAgICAgICAgICAgICB9IFhQYH1cbiAgICAgICAgICAgIC8+XG4gICAgICAgIDwvc3Bhbj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwiZW5jb3VudGVyLWNyZWF0dXJlLWNvbnRyb2xzXCI+XG4gICAgICAgIDxkaXYgdXNlOmRlbCBvbjpjbGljaz17KCkgPT4gZW5jb3VudGVyLmRlbGV0ZShjcmVhdHVyZSl9IC8+XG4gICAgPC9kaXY+XG48L2Rpdj5cblxuPHN0eWxlIHNjb3BlZD5cbiAgICAuZW5jb3VudGVyLWNyZWF0dXJlLWNvbnRhaW5lciB7XG4gICAgICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IG1pbi1jb250ZW50IDFmciAxMCUgMTAlIGF1dG87XG4gICAgICAgIGdhcDogMC41cmVtO1xuICAgIH1cbiAgICAuZW5jb3VudGVyLWNyZWF0dXJlIHtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgZ2FwOiAwLjVyZW07XG4gICAgfVxuICAgIC5lbmNvdW50ZXItY3JlYXR1cmUtY29udGV4dCB7XG4gICAgICAgIHRleHQtYWxpZ246IHJpZ2h0O1xuICAgIH1cbiAgICAuZW5jb3VudGVyLWNyZWF0dXJlLWNvbnRyb2xzIHtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICAgICAgZ2FwOiAwLjVyZW07XG4gICAgfVxuICAgIGlucHV0IHtcbiAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICB3aWR0aDogNDBweDtcbiAgICB9XG4gICAgLmNvbnRhaW5zLWljb24ge1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIH1cbjwvc3R5bGU+XG4iLCAiPHNjcmlwdCBsYW5nPVwidHNcIj5cbiAgICBpbXBvcnQgeyBzZXRJY29uLCBTZXR0aW5nIH0gZnJvbSBcIm9ic2lkaWFuXCI7XG5cbiAgICBpbXBvcnQgeyBnZXRDb250ZXh0IH0gZnJvbSBcInN2ZWx0ZVwiO1xuICAgIGltcG9ydCB7IERJU0FCTEUsIEVOQUJMRSB9IGZyb20gXCJzcmMvdXRpbHNcIjtcblxuICAgIGltcG9ydCB7IHBsYXllcnMgfSBmcm9tIFwiLi4vLi4vc3RvcmVzL3BsYXllcnNcIjtcbiAgICBpbXBvcnQgRXhwZXJpZW5jZSBmcm9tIFwiLi9FeHBlcmllbmNlLnN2ZWx0ZVwiO1xuXG4gICAgY29uc3QgeyBwYXJ0eSwgZ2VuZXJpY3MgfSA9IHBsYXllcnM7XG5cbiAgICBjb25zdCBwbHVnaW4gPSBnZXRDb250ZXh0KFwicGx1Z2luXCIpO1xuXG4gICAgY29uc3QgZGVmYXVsdFBhcnR5ID0gcGx1Z2luLmRhdGEuZGVmYXVsdFBhcnR5O1xuICAgIGNvbnN0IHBhcnRpZXMgPSBwbHVnaW4uZGF0YS5wYXJ0aWVzO1xuXG4gICAgcGx1Z2luLmdldFBsYXllcnNGb3JQYXJ0eShkZWZhdWx0UGFydHkpLmZvckVhY2goKHApID0+IHtcbiAgICAgICAgcGxheWVycy5hZGQoe1xuICAgICAgICAgICAgbGV2ZWw6IHAubGV2ZWwsXG4gICAgICAgICAgICBuYW1lOiBwLm5hbWUsXG4gICAgICAgICAgICAuLi5wLmNyZWF0dXJlLFxuICAgICAgICAgICAgaXNQbGF5ZXI6IHRydWUsXG4gICAgICAgICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgICAgICAgY291bnQ6IDFcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICBjb25zdCBwYXJ0eURyb3Bkb3duID0gKG5vZGU6IEhUTUxFbGVtZW50KSA9PiB7XG4gICAgICAgIG5ldyBTZXR0aW5nKG5vZGUpLnNldE5hbWUoXCJTZWxlY3QgYSBwYXJ0eVwiKS5hZGREcm9wZG93bigoZHJvcGRvd24pID0+IHtcbiAgICAgICAgICAgIGRyb3Bkb3duXG4gICAgICAgICAgICAgICAgLmFkZE9wdGlvbihcIm5vbmVcIiwgXCJOb25lXCIpXG4gICAgICAgICAgICAgICAgLmFkZE9wdGlvbnMoXG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5mcm9tRW50cmllcyhwYXJ0aWVzLm1hcCgocCkgPT4gW3AubmFtZSwgcC5uYW1lXSkpXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIC5vbkNoYW5nZSgobmFtZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBwbGF5ZXJzLnN3aXRjaFBhcnR5KFxuICAgICAgICAgICAgICAgICAgICAgICAgcGx1Z2luLmdldFBsYXllcnNGb3JQYXJ0eShuYW1lKS5tYXAoKHApID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXZlbDogcC5sZXZlbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogcC5uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5wLmNyZWF0dXJlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1BsYXllcjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY291bnQ6IDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChkZWZhdWx0UGFydHkpIHtcbiAgICAgICAgICAgICAgICBkcm9wZG93bi5zZXRWYWx1ZShkZWZhdWx0UGFydHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgY29uc3QgZW5hYmxlID0gKG5vZGU6IEhUTUxFbGVtZW50KSA9PiB7XG4gICAgICAgIHNldEljb24obm9kZSwgRU5BQkxFKTtcbiAgICB9O1xuICAgIGNvbnN0IGRpc2FibGUgPSAobm9kZTogSFRNTEVsZW1lbnQpID0+IHtcbiAgICAgICAgc2V0SWNvbihub2RlLCBESVNBQkxFKTtcbiAgICB9O1xuXG4gICAgY29uc3QgYWRkSWNvbiA9IChub2RlOiBIVE1MRWxlbWVudCkgPT4ge1xuICAgICAgICBzZXRJY29uKG5vZGUsIFwicGx1cy13aXRoLWNpcmNsZVwiKTtcbiAgICB9O1xuICAgIGNvbnN0IGFkZCA9ICgpID0+IHtcbiAgICAgICAgcGxheWVycy5hZGQoe1xuICAgICAgICAgICAgaXNQbGF5ZXI6IGZhbHNlLFxuICAgICAgICAgICAgbGV2ZWw6IDEsXG4gICAgICAgICAgICBjb3VudDogMSxcbiAgICAgICAgICAgIGVuYWJsZWQ6IHRydWVcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIGNvbnN0IGNyb3NzSWNvbiA9IChub2RlOiBIVE1MRWxlbWVudCkgPT4ge1xuICAgICAgICBzZXRJY29uKG5vZGUsIFwieFwiKTtcbiAgICB9O1xuXG4gICAgY29uc3QgcmVtb3ZlSWNvbiA9IChub2RlOiBIVE1MRWxlbWVudCkgPT4ge1xuICAgICAgICBzZXRJY29uKG5vZGUsIFwieC1zcXVhcmVcIik7XG4gICAgfTtcbjwvc2NyaXB0PlxuXG48ZGl2IGNsYXNzPVwicGxheWVyLWNvbXBvbmVudC1jb250YWluZXJcIj5cbiAgICA8ZGl2IGNsYXNzPVwicGxheWVycy14cFwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwicGxheWVycy1jb250YWluZXJcIj5cbiAgICAgICAgICAgIDxoNSBjbGFzcz1cInBsYXllci1oZWFkZXJcIj5QbGF5ZXJzPC9oNT5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwYXJ0eVwiPlxuICAgICAgICAgICAgICAgIHsjaWYgcGFydGllcy5sZW5ndGh9XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgdXNlOnBhcnR5RHJvcGRvd24gLz5cbiAgICAgICAgICAgICAgICB7L2lmfVxuICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwbGF5ZXJzXCI+XG4gICAgICAgICAgICAgICAgeyNlYWNoICRwYXJ0eSBhcyBwbGF5ZXIgKHBsYXllci5uYW1lKX1cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInBsYXllclwiIGNsYXNzOmRpc2FibGVkPXshcGxheWVyLmVuYWJsZWR9PlxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJwbGF5ZXItbmFtZVwiPntwbGF5ZXIubmFtZX08L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicGxheWVyLXJpZ2h0XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+e3BsYXllci5sZXZlbH08L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz1cImNsaWNrYWJsZS1pY29uIHNldHRpbmctZWRpdG9yLWV4dHJhLXNldHRpbmctYnV0dG9uXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1sYWJlbD17cGxheWVyLmVuYWJsZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gXCJEaXNhYmxlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogXCJFbmFibGVcIn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb246Y2xpY2s9eygpID0+IHBsYXllcnMudG9nZ2xlRW5hYmxlZChwbGF5ZXIpfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyNpZiBwbGF5ZXIuZW5hYmxlZH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgdXNlOmRpc2FibGUgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgezplbHNlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiB1c2U6ZW5hYmxlIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsvaWZ9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgey9lYWNofVxuICAgICAgICAgICAgICAgIHsjZWFjaCAkZ2VuZXJpY3MgYXMgcGxheWVyLCBpbmRleH1cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInBsYXllclwiIGNsYXNzOmRpc2FibGVkPXshcGxheWVyLmVuYWJsZWR9PlxuICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cIm51bWJlclwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3BsYXllci5jb3VudH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbjppbnB1dD17KGV2dCkgPT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVycy5zZXQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBOdW1iZXIoZXZ0LmN1cnJlbnRUYXJnZXQudmFsdWUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWluPVwiMVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+UGxheWVyKHMpPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiB1c2U6Y3Jvc3NJY29uIC8+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPkxldmVsPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZT1cIm51bWJlclwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3BsYXllci5sZXZlbH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbjppbnB1dD17KGV2dCkgPT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVycy5zZXRMZXZlbChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE51bWJlcihldnQuY3VycmVudFRhcmdldC52YWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW49XCIxXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicGxheWVyLXJpZ2h0XCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz1cImNsaWNrYWJsZS1pY29uIHNldHRpbmctZWRpdG9yLWV4dHJhLXNldHRpbmctYnV0dG9uXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1sYWJlbD17cGxheWVyLmVuYWJsZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gXCJEaXNhYmxlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogXCJFbmFibGVcIn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb246Y2xpY2s9eygpID0+IHBsYXllcnMudG9nZ2xlRW5hYmxlZChwbGF5ZXIpfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyNpZiBwbGF5ZXIuZW5hYmxlZH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgdXNlOmRpc2FibGUgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgezplbHNlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiB1c2U6ZW5hYmxlIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsvaWZ9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPVwiY2xpY2thYmxlLWljb24gc2V0dGluZy1lZGl0b3ItZXh0cmEtc2V0dGluZy1idXR0b25cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbjpjbGljaz17KCkgPT4gcGxheWVycy5yZW1vdmUocGxheWVyKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgdXNlOnJlbW92ZUljb24gLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICB7L2VhY2h9XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImFkZC1wbGF5ZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9XCJjbGlja2FibGUtaWNvbiBzZXR0aW5nLWVkaXRvci1leHRyYS1zZXR0aW5nLWJ1dHRvblwiXG4gICAgICAgICAgICAgICAgICAgICAgICBvbjpjbGljaz17YWRkfVxuICAgICAgICAgICAgICAgICAgICAgICAgdXNlOmFkZEljb25cbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPEV4cGVyaWVuY2UgLz5cbiAgICA8L2Rpdj5cbjwvZGl2PlxuXG48c3R5bGUgc2NvcGVkPlxuICAgIC5wbGF5ZXJzLXhwIHtcbiAgICAgICAgZGlzcGxheTogZ3JpZDtcbiAgICAgICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxZnIgMWZyO1xuICAgIH1cbiAgICAucGxheWVycyB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGZsZXgtZmxvdzogY29sdW1uO1xuICAgICAgICBnYXA6IDAuMjVyZW07XG4gICAgfVxuICAgIC5wbGF5ZXIge1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgfVxuICAgIGlucHV0IHtcbiAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgICB3aWR0aDogNDBweDtcbiAgICB9XG4gICAgLmRpc2FibGVkID4gLnBsYXllci1uYW1lIHtcbiAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBsaW5lLXRocm91Z2g7XG4gICAgfVxuICAgIC5kaXNhYmxlZCB7XG4gICAgICAgIGNvbG9yOiB2YXIoLS10ZXh0LWZhaW50KTtcbiAgICB9XG4gICAgLnBsYXllci1yaWdodCB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgIGdhcDogMC4yNXJlbTtcbiAgICB9XG5cbiAgICAuYWRkLXBsYXllciB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgIGp1c3RpZnktY29udGVudDogZmxleC1lbmQ7XG4gICAgfVxuPC9zdHlsZT5cbiIsICI8c2NyaXB0IGxhbmc9XCJ0c1wiPlxuICAgIGltcG9ydCB7IEVYUEVSSUVOQ0VfVEhSRVNIT0xEUyB9IGZyb20gXCJzcmMvYnVpbGRlci9jb25zdGFudHNcIjtcbiAgICBpbXBvcnQgeyBlbmNvdW50ZXIgfSBmcm9tIFwiLi4vLi4vc3RvcmVzL2VuY291bnRlclwiO1xuICAgIGltcG9ydCB7IHBsYXllcnMgfSBmcm9tIFwiLi4vLi4vc3RvcmVzL3BsYXllcnNcIjtcbiAgICBpbXBvcnQgeyBNT0RJRklFUlNfQllfQ09VTlQsIE1PRElGSUVSX1RIUkVTSE9MRFMgfSBmcm9tIFwiLi4vLi4vY29uc3RhbnRzXCI7XG4gICAgaW1wb3J0IHsgREVGQVVMVF9VTkRFRklORUQsIFhQX1BFUl9DUiB9IGZyb20gXCJzcmMvdXRpbHNcIjtcblxuICAgIGNvbnN0IHsgdGhyZXNob2xkcywgbW9kaWZpZXI6IHBsYXllck1vZGlmaWVyIH0gPSBwbGF5ZXJzO1xuXG4gICAgJDogY291bnQgPSAoWy4uLiRlbmNvdW50ZXIudmFsdWVzKCldID8/IFtdKS5yZWR1Y2UoKGEsIGIpID0+IHtcbiAgICAgICAgcmV0dXJuIGEgKyBiO1xuICAgIH0sIDApO1xuXG4gICAgJDogaW5kZXggPVxuICAgICAgICBNT0RJRklFUl9USFJFU0hPTERTLmxhc3RJbmRleE9mKFxuICAgICAgICAgICAgTU9ESUZJRVJfVEhSRVNIT0xEUy5maWx0ZXIoKHQpID0+IHQgPD0gY291bnQpLnBvcCgpXG4gICAgICAgICkgKyAkcGxheWVyTW9kaWZpZXI7XG4gICAgJDogbW9kaWZpZXIgPSBNT0RJRklFUlNfQllfQ09VTlRbaW5kZXhdO1xuXG4gICAgJDogeHAgPSAoWy4uLiRlbmNvdW50ZXIuZW50cmllcygpXSA/PyBbXSkucmVkdWNlKChhY2MsIGN1cikgPT4ge1xuICAgICAgICBjb25zdCBbbW9uc3RlciwgY291bnRdID0gY3VyO1xuICAgICAgICBpZiAobW9uc3Rlci5jciAmJiBtb25zdGVyLmNyIGluIFhQX1BFUl9DUikge1xuICAgICAgICAgICAgYWNjICs9IFhQX1BFUl9DUlttb25zdGVyLmNyXSAqIGNvdW50O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgfSwgMCk7XG4gICAgJDogYWRqWFAgPSB4cCAqIG1vZGlmaWVyO1xuICAgIGxldCBkaWZmaWN1bHR5OiBzdHJpbmc7XG4gICAgJDoge1xuICAgICAgICBpZiAoIWFkalhQKSBkaWZmaWN1bHR5ID0gREVGQVVMVF9VTkRFRklORUQ7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZGlmZmljdWx0eSA9IFwiVHJpdmlhbFwiO1xuICAgICAgICAgICAgaWYgKGFkalhQID4gJHRocmVzaG9sZHMuRWFzeSkge1xuICAgICAgICAgICAgICAgIGRpZmZpY3VsdHkgPSBcIkVhc3lcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChhZGpYUCA+ICR0aHJlc2hvbGRzLk1lZGl1bSkge1xuICAgICAgICAgICAgICAgIGRpZmZpY3VsdHkgPSBcIk1lZGl1bVwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGFkalhQID4gJHRocmVzaG9sZHMuSGFyZCkge1xuICAgICAgICAgICAgICAgIGRpZmZpY3VsdHkgPSBcIkhhcmRcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChhZGpYUCA+ICR0aHJlc2hvbGRzLkRlYWRseSkge1xuICAgICAgICAgICAgICAgIGRpZmZpY3VsdHkgPSBcIkRlYWRseVwiO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuPC9zY3JpcHQ+XG5cbjxkaXYgY2xhc3M9XCJ4cC1jb250YWluZXJcIj5cbiAgICA8aDU+RXhwZXJpZW5jZTwvaDU+XG4gICAgPGRpdiBjbGFzcz1cInhwXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJlbmNvdW50ZXItZGlmZmljdWx0eVwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImRpZmZpY3VsdHkgY29udGFpbmVyXCI+XG4gICAgICAgICAgICAgICAgPHN0cm9uZyBjbGFzcz1cImhlYWRlclwiPkRpZmZpY3VsdHk8L3N0cm9uZz5cbiAgICAgICAgICAgICAgICA8c3Bhbj5cbiAgICAgICAgICAgICAgICAgICAge2RpZmZpY3VsdHl9XG4gICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwidG90YWwgY29udGFpbmVyXCI+XG4gICAgICAgICAgICAgICAgPHN0cm9uZyBjbGFzcz1cImhlYWRlclwiPlhQPC9zdHJvbmc+XG4gICAgICAgICAgICAgICAgPHNwYW4+XG4gICAgICAgICAgICAgICAgICAgIHt4cCA/IHhwLnRvTG9jYWxlU3RyaW5nKCkgOiBERUZBVUxUX1VOREVGSU5FRH1cbiAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJhZGp1c3RlZCBjb250YWluZXJcIj5cbiAgICAgICAgICAgICAgICA8c3Ryb25nIGNsYXNzPVwiaGVhZGVyXCI+QWRqdXN0ZWQ8L3N0cm9uZz5cbiAgICAgICAgICAgICAgICA8c3Bhbj5cbiAgICAgICAgICAgICAgICAgICAge2FkalhQID8gYWRqWFAudG9Mb2NhbGVTdHJpbmcoKSA6IERFRkFVTFRfVU5ERUZJTkVEfVxuICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInRocmVzaG9sZHNcIj5cbiAgICAgICAgICAgIHsjZWFjaCBFWFBFUklFTkNFX1RIUkVTSE9MRFMgYXMgbGV2ZWx9XG4gICAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgICAgICBjbGFzcz1cImV4cGVyaWVuY2UtdGhyZXNob2xkIHtsZXZlbC50b0xvd2VyQ2FzZSgpfSBjb250YWluZXJcIlxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgPHN0cm9uZyBjbGFzcz1cImV4cGVyaWVuY2UtbmFtZSBoZWFkZXJcIj57bGV2ZWx9PC9zdHJvbmc+XG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZXhwZXJpZW5jZS1hbW91bnRcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIHskdGhyZXNob2xkc1tsZXZlbF0udG9Mb2NhbGVTdHJpbmcoKX0gWFBcbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgey9lYWNofVxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGJyIC8+XG4gICAgPC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cImJ1ZGdldFwiPlxuICAgICAgICA8aDUgY2xhc3M9XCJleHBlcmllbmNlLW5hbWVcIj5EYWlseSBidWRnZXQ8L2g1PlxuICAgICAgICA8c3BhbiBjbGFzcz1cImV4cGVyaWVuY2UtYW1vdW50XCI+XG4gICAgICAgICAgICB7JHRocmVzaG9sZHMuRGFpbHkudG9Mb2NhbGVTdHJpbmcoKX0gWFBcbiAgICAgICAgPC9zcGFuPlxuICAgIDwvZGl2PlxuPC9kaXY+XG5cbjxzdHlsZSBzY29wZWQ+XG4gICAgLnhwLWNvbnRhaW5lciB7XG4gICAgICAgIG1hcmdpbi1sZWZ0OiBhdXRvO1xuICAgIH1cbiAgICAueHAge1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBnYXA6IDFyZW07XG4gICAgfVxuICAgIC50aHJlc2hvbGRzIHtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgZmxleC1mbG93OiBjb2x1bW47XG4gICAgICAgIGdhcDogMC41cmVtO1xuICAgIH1cbiAgICAuZXhwZXJpZW5jZS1hbW91bnQge1xuICAgICAgICBtYXJnaW4tbGVmdDogYXV0bztcbiAgICB9XG4gICAgLmVuY291bnRlci1kaWZmaWN1bHR5IHtcbiAgICAgICAgZGlzcGxheTogZmxleDtcblxuICAgICAgICBmbGV4LWZsb3c6IGNvbHVtbiBub3dyYXA7XG4gICAgICAgIGdhcDogMC41cmVtO1xuICAgICAgICAvKiBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47ICovXG4gICAgICAgIG1hcmdpbi1ib3R0b206IDFyZW07XG4gICAgfVxuICAgIC5jb250YWluZXIge1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBmbGV4LWZsb3c6IGNvbHVtbiBub3dyYXA7XG4gICAgfVxuICAgIC5oZWFkZXIge1xuICAgICAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICAgICAgICBmb250LXdlaWdodDogYm9sZGVyO1xuICAgIH1cbjwvc3R5bGU+XG4iLCAiPHNjcmlwdCBsYW5nPVwidHNcIj5cbiAgICBpbXBvcnQgdHlwZSBJbml0aWF0aXZlVHJhY2tlciBmcm9tIFwic3JjL21haW5cIjtcbiAgICBpbXBvcnQgeyBvbkRlc3Ryb3ksIHNldENvbnRleHQgfSBmcm9tIFwic3ZlbHRlXCI7XG4gICAgaW1wb3J0IHsgcGxheWVycyB9IGZyb20gXCIuLi9zdG9yZXMvcGxheWVyc1wiO1xuXG4gICAgaW1wb3J0IENyZWF0dXJlcyBmcm9tIFwiLi9jcmVhdHVyZXMvQ3JlYXR1cmVzLnN2ZWx0ZVwiO1xuICAgIGltcG9ydCBFbmNvdW50ZXIgZnJvbSBcIi4vZW5jb3VudGVyL0VuY291bnRlci5zdmVsdGVcIjtcbiAgICBpbXBvcnQgUGFydHkgZnJvbSBcIi4vcGFydHkvUGFydHkuc3ZlbHRlXCI7XG5cbiAgICBleHBvcnQgbGV0IHBsdWdpbjogSW5pdGlhdGl2ZVRyYWNrZXI7XG5cbiAgICBzZXRDb250ZXh0KFwicGx1Z2luXCIsIHBsdWdpbik7XG5cbiAgICBvbkRlc3Ryb3koKCkgPT4ge1xuICAgICAgICBwbGF5ZXJzLmVtcHR5KCk7XG4gICAgfSk7XG48L3NjcmlwdD5cblxuPGRpdiBjbGFzcz1cImluaXRpYXRpdmUtdHJhY2tlciBlbmNvdW50ZXItYnVpbGRlciBtYXJrZG93bi1yZW5kZXJlZFwiPlxuICAgIDxQYXJ0eSAvPlxuICAgIDxFbmNvdW50ZXIgLz5cbiAgICA8Q3JlYXR1cmVzIC8+XG48L2Rpdj5cblxuPHN0eWxlPlxuICAgIC5lbmNvdW50ZXItYnVpbGRlciB7XG4gICAgICAgIG1hcmdpbjogMXJlbTtcbiAgICB9XG48L3N0eWxlPlxuIiwgImltcG9ydCB7IEl0ZW1WaWV3LCBXb3Jrc3BhY2VMZWFmIH0gZnJvbSBcIm9ic2lkaWFuXCI7XG5pbXBvcnQgdHlwZSBJbml0aWF0aXZlVHJhY2tlciBmcm9tIFwic3JjL21haW5cIjtcbmltcG9ydCB0eXBlIHsgQ3JlYXR1cmUgfSBmcm9tIFwic3JjL3V0aWxzL2NyZWF0dXJlXCI7XG5pbXBvcnQgeyBQTEFZRVJfVklFV19WSUVXIH0gZnJvbSBcIi4uL3V0aWxzXCI7XG5cbmltcG9ydCBBcHAgZnJvbSBcIi4vcGxheWVyL1BsYXllclZpZXcuc3ZlbHRlXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBsYXllclZpZXcgZXh0ZW5kcyBJdGVtVmlldyB7XG4gICAgX2FwcDogQXBwO1xuICAgIGdldERpc3BsYXlUZXh0KCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBcIlBsYXllciBWaWV3XCI7XG4gICAgfVxuICAgIGdldFZpZXdUeXBlKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBQTEFZRVJfVklFV19WSUVXO1xuICAgIH1cbiAgICBnZXRJY29uKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBcImx1Y2lkZS12aWV3XCI7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBsZWFmOiBXb3Jrc3BhY2VMZWFmLCBwdWJsaWMgcGx1Z2luOiBJbml0aWF0aXZlVHJhY2tlcikge1xuICAgICAgICBzdXBlcihsZWFmKTtcbiAgICB9XG4gICAgYXN5bmMgb25PcGVuKCkge1xuICAgICAgICB0aGlzLl9hcHAgPSBuZXcgQXBwKHtcbiAgICAgICAgICAgIHRhcmdldDogdGhpcy5jb250ZW50RWwsXG4gICAgICAgICAgICBwcm9wczoge31cbiAgICAgICAgfSk7XG4gICAgfVxufVxuIiwgIjxzY3JpcHQgbGFuZz1cInRzXCI+XG4gICAgaW1wb3J0IHsgc2V0SWNvbiB9IGZyb20gXCJvYnNpZGlhblwiO1xuICAgIGltcG9ydCB7IGZhZGUgfSBmcm9tIFwic3ZlbHRlL3RyYW5zaXRpb25cIjtcbiAgICBpbXBvcnQgeyBTeW5jTG9hZGVyIH0gZnJvbSBcInN2ZWx0ZS1sb2FkaW5nLXNwaW5uZXJzXCI7XG5cbiAgICBpbXBvcnQgeyBIUCwgSU5JVElBVElWRSB9IGZyb20gXCJzcmMvdXRpbHNcIjtcbiAgICBpbXBvcnQgdHlwZSB7IENyZWF0dXJlIH0gZnJvbSBcInNyYy91dGlscy9jcmVhdHVyZVwiO1xuICAgIGltcG9ydCB7IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlciB9IGZyb20gXCJzdmVsdGVcIjtcblxuICAgIGltcG9ydCB7IHRyYWNrZXIgfSBmcm9tIFwiLi4vc3RvcmVzL3RyYWNrZXJcIjtcbiAgICBjb25zdCB7IHN0YXRlLCBvcmRlcmVkIH0gPSB0cmFja2VyO1xuICAgIGNvbnN0IGRpc3BhdGNoID0gY3JlYXRlRXZlbnREaXNwYXRjaGVyKCk7XG5cbiAgICBjb25zdCBocEljb24gPSAobm9kZTogSFRNTEVsZW1lbnQpID0+IHtcbiAgICAgICAgc2V0SWNvbihub2RlLCBIUCk7XG4gICAgfTtcbiAgICBjb25zdCBpbmlJY29uID0gKG5vZGU6IEhUTUxFbGVtZW50KSA9PiB7XG4gICAgICAgIHNldEljb24obm9kZSwgSU5JVElBVElWRSk7XG4gICAgfTtcblxuICAgIGNvbnN0IGdldEhwU3RhdHVzID0gKGhwOiBudW1iZXIsIG1heDogbnVtYmVyKSA9PiB7XG4gICAgICAgIGlmICghaHApIHJldHVybiBcIlwiO1xuICAgICAgICBpZiAoaHAgPD0gMCkgcmV0dXJuIFwiRGVmZWF0ZWRcIjtcbiAgICAgICAgaWYgKGhwIDwgbWF4IC8gMikgcmV0dXJuIFwiQmxvb2RpZWRcIjtcbiAgICAgICAgaWYgKGhwIDwgbWF4KSByZXR1cm4gXCJIdXJ0XCI7XG4gICAgICAgIHJldHVybiBcIkhlYWx0aHlcIjtcbiAgICB9O1xuXG4gICAgY29uc3QgYW1JQWN0aXZlID0gKGNyZWF0dXJlOiBDcmVhdHVyZSkgPT4ge1xuICAgICAgICBpZiAoY3JlYXR1cmUuaGlkZGVuKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIGlmIChjcmVhdHVyZS5hY3RpdmUpIHJldHVybiB0cnVlO1xuXG4gICAgICAgIGNvbnN0IGFjdGl2ZSA9ICRvcmRlcmVkLmZpbmRJbmRleCgoYykgPT4gYy5hY3RpdmUpO1xuICAgICAgICBjb25zdCBpbmRleCA9ICRvcmRlcmVkLmluZGV4T2YoY3JlYXR1cmUpO1xuICAgICAgICBpZiAoYWN0aXZlID09IC0xIHx8IGFjdGl2ZSA8IGluZGV4KSByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgY29uc3QgcmVtYWluaW5nID0gJG9yZGVyZWQuc2xpY2UoaW5kZXggKyAxLCBhY3RpdmUgKyAxKTtcbiAgICAgICAgaWYgKHJlbWFpbmluZy5ldmVyeSgoYykgPT4gYy5oaWRkZW4pKSByZXR1cm4gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG5cbiAgICAkOiBhY3RpdmVBbmRWaXNpYmxlID0gJG9yZGVyZWQuZmlsdGVyKChjKSA9PiBjLmVuYWJsZWQgJiYgIWMuaGlkZGVuKTtcblxuICAgIGNvbnN0IG5hbWUgPSAoY3JlYXR1cmU6IENyZWF0dXJlKSA9PiBjcmVhdHVyZS5nZXROYW1lKCk7XG48L3NjcmlwdD5cblxuPHRhYmxlIGNsYXNzPVwiaW5pdGlhdGl2ZS10cmFja2VyLXRhYmxlXCIgdHJhbnNpdGlvbjpmYWRlPlxuICAgIDx0aGVhZCBjbGFzcz1cInRyYWNrZXItdGFibGUtaGVhZGVyXCI+XG4gICAgICAgIDx0aCBzdHlsZT1cIndpZHRoOjUlXCI+PHN0cm9uZyB1c2U6aW5pSWNvbiAvPjwvdGg+XG4gICAgICAgIDx0aCBjbGFzcz1cImxlZnRcIiBzdHlsZT1cIndpZHRoOjMwJVwiPjxzdHJvbmc+TmFtZTwvc3Ryb25nPjwvdGg+XG4gICAgICAgIDx0aCBzdHlsZT1cIndpZHRoOjE1JVwiIGNsYXNzPVwiY2VudGVyXCI+PHN0cm9uZyB1c2U6aHBJY29uIC8+PC90aD5cbiAgICAgICAgPHRoPjxzdHJvbmc+IFN0YXR1c2VzIDwvc3Ryb25nPjwvdGg+XG4gICAgPC90aGVhZD5cbiAgICA8dGJvZHk+XG4gICAgICAgIHsjZWFjaCBhY3RpdmVBbmRWaXNpYmxlIGFzIGNyZWF0dXJlIChjcmVhdHVyZS5pZCl9XG4gICAgICAgICAgICA8dHIgY2xhc3M6YWN0aXZlPXthbUlBY3RpdmUoY3JlYXR1cmUpICYmICRzdGF0ZX0+XG4gICAgICAgICAgICAgICAgPHRkIGNsYXNzPVwiY2VudGVyXCI+e2NyZWF0dXJlLmluaXRpYXRpdmV9PC90ZD5cbiAgICAgICAgICAgICAgICA8dGQ+XG4gICAgICAgICAgICAgICAgICAgIHtuYW1lKGNyZWF0dXJlKX1cbiAgICAgICAgICAgICAgICA8L3RkPlxuICAgICAgICAgICAgICAgIDx0ZFxuICAgICAgICAgICAgICAgICAgICBjbGFzczpjZW50ZXI9e3RydWV9XG4gICAgICAgICAgICAgICAgICAgIGNsYXNzPXtnZXRIcFN0YXR1cyhjcmVhdHVyZS5ocCwgY3JlYXR1cmUubWF4KS50b0xvd2VyQ2FzZSgpfVxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgeyNpZiBjcmVhdHVyZS5wbGF5ZXJ9XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY2VudGVyXCI+e0BodG1sIGNyZWF0dXJlLmhwRGlzcGxheX08L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgezplbHNlfVxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+e2dldEhwU3RhdHVzKGNyZWF0dXJlLmhwLCBjcmVhdHVyZS5tYXgpfTwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgey9pZn1cbiAgICAgICAgICAgICAgICA8L3RkPlxuICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz1cImNlbnRlclwiPlxuICAgICAgICAgICAgICAgICAgICB7Wy4uLmNyZWF0dXJlLnN0YXR1c10ubWFwKChzKSA9PiBzLm5hbWUpLmpvaW4oXCIsIFwiKX1cbiAgICAgICAgICAgICAgICA8L3RkPlxuICAgICAgICAgICAgPC90cj5cbiAgICAgICAgey9lYWNofVxuICAgIDwvdGJvZHk+XG48L3RhYmxlPlxuXG48c3R5bGUgc2NvcGVkPlxuICAgIC5mdWxsLWNlbnRlciB7XG4gICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgIH1cbiAgICAuaW5pdGlhdGl2ZS10cmFja2VyLXRhYmxlIHtcbiAgICAgICAgcGFkZGluZzogMC41cmVtO1xuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICBnYXA6IDAuMjVyZW0gMC41cmVtO1xuICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgbWFyZ2luLWxlZnQ6IDByZW07XG4gICAgICAgIHRhYmxlLWxheW91dDogZml4ZWQ7XG4gICAgICAgIGJvcmRlci1jb2xsYXBzZTogc2VwYXJhdGU7XG4gICAgICAgIGJvcmRlci1zcGFjaW5nOiAwIDJweDtcbiAgICAgICAgZm9udC1zaXplOiBsYXJnZXI7XG4gICAgfVxuICAgIC5sZWZ0IHtcbiAgICAgICAgdGV4dC1hbGlnbjogbGVmdDtcbiAgICB9XG4gICAgLmNlbnRlciB7XG4gICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICB9XG4gICAgLmhlYWx0aHkge1xuICAgICAgICBjb2xvcjogdmFyKC0tdGV4dC1zdWNjZXNzKTtcbiAgICB9XG4gICAgLmh1cnQge1xuICAgICAgICBjb2xvcjogdmFyKC0tdGV4dC13YXJuaW5nKTtcbiAgICB9XG4gICAgLmJsb29kaWVkIHtcbiAgICAgICAgY29sb3I6IHZhcigtLXRleHQtZXJyb3IpO1xuICAgIH1cbiAgICAuZGVmZWF0ZWQge1xuICAgICAgICBjb2xvcjogdmFyKC0tdGV4dC1mYWludCk7XG4gICAgfVxuICAgIC5hY3RpdmUge1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDAsIDAsIDAsIDAuMSk7XG4gICAgfVxuICAgIDpnbG9iYWwoLnRoZW1lLWRhcmspIC5hY3RpdmUge1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMSk7XG4gICAgfVxuPC9zdHlsZT5cbiIsICJmdW5jdGlvbiBub29wKCkgeyB9XG5jb25zdCBpZGVudGl0eSA9IHggPT4geDtcbmZ1bmN0aW9uIGFzc2lnbih0YXIsIHNyYykge1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBmb3IgKGNvbnN0IGsgaW4gc3JjKVxuICAgICAgICB0YXJba10gPSBzcmNba107XG4gICAgcmV0dXJuIHRhcjtcbn1cbmZ1bmN0aW9uIGlzX3Byb21pc2UodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgdmFsdWUudGhlbiA9PT0gJ2Z1bmN0aW9uJztcbn1cbmZ1bmN0aW9uIGFkZF9sb2NhdGlvbihlbGVtZW50LCBmaWxlLCBsaW5lLCBjb2x1bW4sIGNoYXIpIHtcbiAgICBlbGVtZW50Ll9fc3ZlbHRlX21ldGEgPSB7XG4gICAgICAgIGxvYzogeyBmaWxlLCBsaW5lLCBjb2x1bW4sIGNoYXIgfVxuICAgIH07XG59XG5mdW5jdGlvbiBydW4oZm4pIHtcbiAgICByZXR1cm4gZm4oKTtcbn1cbmZ1bmN0aW9uIGJsYW5rX29iamVjdCgpIHtcbiAgICByZXR1cm4gT2JqZWN0LmNyZWF0ZShudWxsKTtcbn1cbmZ1bmN0aW9uIHJ1bl9hbGwoZm5zKSB7XG4gICAgZm5zLmZvckVhY2gocnVuKTtcbn1cbmZ1bmN0aW9uIGlzX2Z1bmN0aW9uKHRoaW5nKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0aGluZyA9PT0gJ2Z1bmN0aW9uJztcbn1cbmZ1bmN0aW9uIHNhZmVfbm90X2VxdWFsKGEsIGIpIHtcbiAgICByZXR1cm4gYSAhPSBhID8gYiA9PSBiIDogYSAhPT0gYiB8fCAoKGEgJiYgdHlwZW9mIGEgPT09ICdvYmplY3QnKSB8fCB0eXBlb2YgYSA9PT0gJ2Z1bmN0aW9uJyk7XG59XG5mdW5jdGlvbiBub3RfZXF1YWwoYSwgYikge1xuICAgIHJldHVybiBhICE9IGEgPyBiID09IGIgOiBhICE9PSBiO1xufVxuZnVuY3Rpb24gaXNfZW1wdHkob2JqKSB7XG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKG9iaikubGVuZ3RoID09PSAwO1xufVxuZnVuY3Rpb24gdmFsaWRhdGVfc3RvcmUoc3RvcmUsIG5hbWUpIHtcbiAgICBpZiAoc3RvcmUgIT0gbnVsbCAmJiB0eXBlb2Ygc3RvcmUuc3Vic2NyaWJlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgJyR7bmFtZX0nIGlzIG5vdCBhIHN0b3JlIHdpdGggYSAnc3Vic2NyaWJlJyBtZXRob2RgKTtcbiAgICB9XG59XG5mdW5jdGlvbiBzdWJzY3JpYmUoc3RvcmUsIC4uLmNhbGxiYWNrcykge1xuICAgIGlmIChzdG9yZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBub29wO1xuICAgIH1cbiAgICBjb25zdCB1bnN1YiA9IHN0b3JlLnN1YnNjcmliZSguLi5jYWxsYmFja3MpO1xuICAgIHJldHVybiB1bnN1Yi51bnN1YnNjcmliZSA/ICgpID0+IHVuc3ViLnVuc3Vic2NyaWJlKCkgOiB1bnN1Yjtcbn1cbmZ1bmN0aW9uIGdldF9zdG9yZV92YWx1ZShzdG9yZSkge1xuICAgIGxldCB2YWx1ZTtcbiAgICBzdWJzY3JpYmUoc3RvcmUsIF8gPT4gdmFsdWUgPSBfKSgpO1xuICAgIHJldHVybiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIGNvbXBvbmVudF9zdWJzY3JpYmUoY29tcG9uZW50LCBzdG9yZSwgY2FsbGJhY2spIHtcbiAgICBjb21wb25lbnQuJCQub25fZGVzdHJveS5wdXNoKHN1YnNjcmliZShzdG9yZSwgY2FsbGJhY2spKTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9zbG90KGRlZmluaXRpb24sIGN0eCwgJCRzY29wZSwgZm4pIHtcbiAgICBpZiAoZGVmaW5pdGlvbikge1xuICAgICAgICBjb25zdCBzbG90X2N0eCA9IGdldF9zbG90X2NvbnRleHQoZGVmaW5pdGlvbiwgY3R4LCAkJHNjb3BlLCBmbik7XG4gICAgICAgIHJldHVybiBkZWZpbml0aW9uWzBdKHNsb3RfY3R4KTtcbiAgICB9XG59XG5mdW5jdGlvbiBnZXRfc2xvdF9jb250ZXh0KGRlZmluaXRpb24sIGN0eCwgJCRzY29wZSwgZm4pIHtcbiAgICByZXR1cm4gZGVmaW5pdGlvblsxXSAmJiBmblxuICAgICAgICA/IGFzc2lnbigkJHNjb3BlLmN0eC5zbGljZSgpLCBkZWZpbml0aW9uWzFdKGZuKGN0eCkpKVxuICAgICAgICA6ICQkc2NvcGUuY3R4O1xufVxuZnVuY3Rpb24gZ2V0X3Nsb3RfY2hhbmdlcyhkZWZpbml0aW9uLCAkJHNjb3BlLCBkaXJ0eSwgZm4pIHtcbiAgICBpZiAoZGVmaW5pdGlvblsyXSAmJiBmbikge1xuICAgICAgICBjb25zdCBsZXRzID0gZGVmaW5pdGlvblsyXShmbihkaXJ0eSkpO1xuICAgICAgICBpZiAoJCRzY29wZS5kaXJ0eSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gbGV0cztcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGxldHMgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICBjb25zdCBtZXJnZWQgPSBbXTtcbiAgICAgICAgICAgIGNvbnN0IGxlbiA9IE1hdGgubWF4KCQkc2NvcGUuZGlydHkubGVuZ3RoLCBsZXRzLmxlbmd0aCk7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgbWVyZ2VkW2ldID0gJCRzY29wZS5kaXJ0eVtpXSB8IGxldHNbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbWVyZ2VkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAkJHNjb3BlLmRpcnR5IHwgbGV0cztcbiAgICB9XG4gICAgcmV0dXJuICQkc2NvcGUuZGlydHk7XG59XG5mdW5jdGlvbiB1cGRhdGVfc2xvdChzbG90LCBzbG90X2RlZmluaXRpb24sIGN0eCwgJCRzY29wZSwgZGlydHksIGdldF9zbG90X2NoYW5nZXNfZm4sIGdldF9zbG90X2NvbnRleHRfZm4pIHtcbiAgICBjb25zdCBzbG90X2NoYW5nZXMgPSBnZXRfc2xvdF9jaGFuZ2VzKHNsb3RfZGVmaW5pdGlvbiwgJCRzY29wZSwgZGlydHksIGdldF9zbG90X2NoYW5nZXNfZm4pO1xuICAgIGlmIChzbG90X2NoYW5nZXMpIHtcbiAgICAgICAgY29uc3Qgc2xvdF9jb250ZXh0ID0gZ2V0X3Nsb3RfY29udGV4dChzbG90X2RlZmluaXRpb24sIGN0eCwgJCRzY29wZSwgZ2V0X3Nsb3RfY29udGV4dF9mbik7XG4gICAgICAgIHNsb3QucChzbG90X2NvbnRleHQsIHNsb3RfY2hhbmdlcyk7XG4gICAgfVxufVxuZnVuY3Rpb24gdXBkYXRlX3Nsb3Rfc3ByZWFkKHNsb3QsIHNsb3RfZGVmaW5pdGlvbiwgY3R4LCAkJHNjb3BlLCBkaXJ0eSwgZ2V0X3Nsb3RfY2hhbmdlc19mbiwgZ2V0X3Nsb3Rfc3ByZWFkX2NoYW5nZXNfZm4sIGdldF9zbG90X2NvbnRleHRfZm4pIHtcbiAgICBjb25zdCBzbG90X2NoYW5nZXMgPSBnZXRfc2xvdF9zcHJlYWRfY2hhbmdlc19mbihkaXJ0eSkgfCBnZXRfc2xvdF9jaGFuZ2VzKHNsb3RfZGVmaW5pdGlvbiwgJCRzY29wZSwgZGlydHksIGdldF9zbG90X2NoYW5nZXNfZm4pO1xuICAgIGlmIChzbG90X2NoYW5nZXMpIHtcbiAgICAgICAgY29uc3Qgc2xvdF9jb250ZXh0ID0gZ2V0X3Nsb3RfY29udGV4dChzbG90X2RlZmluaXRpb24sIGN0eCwgJCRzY29wZSwgZ2V0X3Nsb3RfY29udGV4dF9mbik7XG4gICAgICAgIHNsb3QucChzbG90X2NvbnRleHQsIHNsb3RfY2hhbmdlcyk7XG4gICAgfVxufVxuZnVuY3Rpb24gZXhjbHVkZV9pbnRlcm5hbF9wcm9wcyhwcm9wcykge1xuICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xuICAgIGZvciAoY29uc3QgayBpbiBwcm9wcylcbiAgICAgICAgaWYgKGtbMF0gIT09ICckJylcbiAgICAgICAgICAgIHJlc3VsdFtrXSA9IHByb3BzW2tdO1xuICAgIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBjb21wdXRlX3Jlc3RfcHJvcHMocHJvcHMsIGtleXMpIHtcbiAgICBjb25zdCByZXN0ID0ge307XG4gICAga2V5cyA9IG5ldyBTZXQoa2V5cyk7XG4gICAgZm9yIChjb25zdCBrIGluIHByb3BzKVxuICAgICAgICBpZiAoIWtleXMuaGFzKGspICYmIGtbMF0gIT09ICckJylcbiAgICAgICAgICAgIHJlc3Rba10gPSBwcm9wc1trXTtcbiAgICByZXR1cm4gcmVzdDtcbn1cbmZ1bmN0aW9uIGNvbXB1dGVfc2xvdHMoc2xvdHMpIHtcbiAgICBjb25zdCByZXN1bHQgPSB7fTtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBzbG90cykge1xuICAgICAgICByZXN1bHRba2V5XSA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBvbmNlKGZuKSB7XG4gICAgbGV0IHJhbiA9IGZhbHNlO1xuICAgIHJldHVybiBmdW5jdGlvbiAoLi4uYXJncykge1xuICAgICAgICBpZiAocmFuKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICByYW4gPSB0cnVlO1xuICAgICAgICBmbi5jYWxsKHRoaXMsIC4uLmFyZ3MpO1xuICAgIH07XG59XG5mdW5jdGlvbiBudWxsX3RvX2VtcHR5KHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlID09IG51bGwgPyAnJyA6IHZhbHVlO1xufVxuZnVuY3Rpb24gc2V0X3N0b3JlX3ZhbHVlKHN0b3JlLCByZXQsIHZhbHVlID0gcmV0KSB7XG4gICAgc3RvcmUuc2V0KHZhbHVlKTtcbiAgICByZXR1cm4gcmV0O1xufVxuY29uc3QgaGFzX3Byb3AgPSAob2JqLCBwcm9wKSA9PiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKTtcbmZ1bmN0aW9uIGFjdGlvbl9kZXN0cm95ZXIoYWN0aW9uX3Jlc3VsdCkge1xuICAgIHJldHVybiBhY3Rpb25fcmVzdWx0ICYmIGlzX2Z1bmN0aW9uKGFjdGlvbl9yZXN1bHQuZGVzdHJveSkgPyBhY3Rpb25fcmVzdWx0LmRlc3Ryb3kgOiBub29wO1xufVxuXG5jb25zdCBpc19jbGllbnQgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJztcbmxldCBub3cgPSBpc19jbGllbnRcbiAgICA/ICgpID0+IHdpbmRvdy5wZXJmb3JtYW5jZS5ub3coKVxuICAgIDogKCkgPT4gRGF0ZS5ub3coKTtcbmxldCByYWYgPSBpc19jbGllbnQgPyBjYiA9PiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoY2IpIDogbm9vcDtcbi8vIHVzZWQgaW50ZXJuYWxseSBmb3IgdGVzdGluZ1xuZnVuY3Rpb24gc2V0X25vdyhmbikge1xuICAgIG5vdyA9IGZuO1xufVxuZnVuY3Rpb24gc2V0X3JhZihmbikge1xuICAgIHJhZiA9IGZuO1xufVxuXG5jb25zdCB0YXNrcyA9IG5ldyBTZXQoKTtcbmZ1bmN0aW9uIHJ1bl90YXNrcyhub3cpIHtcbiAgICB0YXNrcy5mb3JFYWNoKHRhc2sgPT4ge1xuICAgICAgICBpZiAoIXRhc2suYyhub3cpKSB7XG4gICAgICAgICAgICB0YXNrcy5kZWxldGUodGFzayk7XG4gICAgICAgICAgICB0YXNrLmYoKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGlmICh0YXNrcy5zaXplICE9PSAwKVxuICAgICAgICByYWYocnVuX3Rhc2tzKTtcbn1cbi8qKlxuICogRm9yIHRlc3RpbmcgcHVycG9zZXMgb25seSFcbiAqL1xuZnVuY3Rpb24gY2xlYXJfbG9vcHMoKSB7XG4gICAgdGFza3MuY2xlYXIoKTtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyB0YXNrIHRoYXQgcnVucyBvbiBlYWNoIHJhZiBmcmFtZVxuICogdW50aWwgaXQgcmV0dXJucyBhIGZhbHN5IHZhbHVlIG9yIGlzIGFib3J0ZWRcbiAqL1xuZnVuY3Rpb24gbG9vcChjYWxsYmFjaykge1xuICAgIGxldCB0YXNrO1xuICAgIGlmICh0YXNrcy5zaXplID09PSAwKVxuICAgICAgICByYWYocnVuX3Rhc2tzKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBwcm9taXNlOiBuZXcgUHJvbWlzZShmdWxmaWxsID0+IHtcbiAgICAgICAgICAgIHRhc2tzLmFkZCh0YXNrID0geyBjOiBjYWxsYmFjaywgZjogZnVsZmlsbCB9KTtcbiAgICAgICAgfSksXG4gICAgICAgIGFib3J0KCkge1xuICAgICAgICAgICAgdGFza3MuZGVsZXRlKHRhc2spO1xuICAgICAgICB9XG4gICAgfTtcbn1cblxuLy8gVHJhY2sgd2hpY2ggbm9kZXMgYXJlIGNsYWltZWQgZHVyaW5nIGh5ZHJhdGlvbi4gVW5jbGFpbWVkIG5vZGVzIGNhbiB0aGVuIGJlIHJlbW92ZWQgZnJvbSB0aGUgRE9NXG4vLyBhdCB0aGUgZW5kIG9mIGh5ZHJhdGlvbiB3aXRob3V0IHRvdWNoaW5nIHRoZSByZW1haW5pbmcgbm9kZXMuXG5sZXQgaXNfaHlkcmF0aW5nID0gZmFsc2U7XG5mdW5jdGlvbiBzdGFydF9oeWRyYXRpbmcoKSB7XG4gICAgaXNfaHlkcmF0aW5nID0gdHJ1ZTtcbn1cbmZ1bmN0aW9uIGVuZF9oeWRyYXRpbmcoKSB7XG4gICAgaXNfaHlkcmF0aW5nID0gZmFsc2U7XG59XG5mdW5jdGlvbiB1cHBlcl9ib3VuZChsb3csIGhpZ2gsIGtleSwgdmFsdWUpIHtcbiAgICAvLyBSZXR1cm4gZmlyc3QgaW5kZXggb2YgdmFsdWUgbGFyZ2VyIHRoYW4gaW5wdXQgdmFsdWUgaW4gdGhlIHJhbmdlIFtsb3csIGhpZ2gpXG4gICAgd2hpbGUgKGxvdyA8IGhpZ2gpIHtcbiAgICAgICAgY29uc3QgbWlkID0gbG93ICsgKChoaWdoIC0gbG93KSA+PiAxKTtcbiAgICAgICAgaWYgKGtleShtaWQpIDw9IHZhbHVlKSB7XG4gICAgICAgICAgICBsb3cgPSBtaWQgKyAxO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaGlnaCA9IG1pZDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbG93O1xufVxuZnVuY3Rpb24gaW5pdF9oeWRyYXRlKHRhcmdldCkge1xuICAgIGlmICh0YXJnZXQuaHlkcmF0ZV9pbml0KVxuICAgICAgICByZXR1cm47XG4gICAgdGFyZ2V0Lmh5ZHJhdGVfaW5pdCA9IHRydWU7XG4gICAgLy8gV2Uga25vdyB0aGF0IGFsbCBjaGlsZHJlbiBoYXZlIGNsYWltX29yZGVyIHZhbHVlcyBzaW5jZSB0aGUgdW5jbGFpbWVkIGhhdmUgYmVlbiBkZXRhY2hlZFxuICAgIGNvbnN0IGNoaWxkcmVuID0gdGFyZ2V0LmNoaWxkTm9kZXM7XG4gICAgLypcbiAgICAqIFJlb3JkZXIgY2xhaW1lZCBjaGlsZHJlbiBvcHRpbWFsbHkuXG4gICAgKiBXZSBjYW4gcmVvcmRlciBjbGFpbWVkIGNoaWxkcmVuIG9wdGltYWxseSBieSBmaW5kaW5nIHRoZSBsb25nZXN0IHN1YnNlcXVlbmNlIG9mXG4gICAgKiBub2RlcyB0aGF0IGFyZSBhbHJlYWR5IGNsYWltZWQgaW4gb3JkZXIgYW5kIG9ubHkgbW92aW5nIHRoZSByZXN0LiBUaGUgbG9uZ2VzdFxuICAgICogc3Vic2VxdWVuY2Ugc3Vic2VxdWVuY2Ugb2Ygbm9kZXMgdGhhdCBhcmUgY2xhaW1lZCBpbiBvcmRlciBjYW4gYmUgZm91bmQgYnlcbiAgICAqIGNvbXB1dGluZyB0aGUgbG9uZ2VzdCBpbmNyZWFzaW5nIHN1YnNlcXVlbmNlIG9mIC5jbGFpbV9vcmRlciB2YWx1ZXMuXG4gICAgKlxuICAgICogVGhpcyBhbGdvcml0aG0gaXMgb3B0aW1hbCBpbiBnZW5lcmF0aW5nIHRoZSBsZWFzdCBhbW91bnQgb2YgcmVvcmRlciBvcGVyYXRpb25zXG4gICAgKiBwb3NzaWJsZS5cbiAgICAqXG4gICAgKiBQcm9vZjpcbiAgICAqIFdlIGtub3cgdGhhdCwgZ2l2ZW4gYSBzZXQgb2YgcmVvcmRlcmluZyBvcGVyYXRpb25zLCB0aGUgbm9kZXMgdGhhdCBkbyBub3QgbW92ZVxuICAgICogYWx3YXlzIGZvcm0gYW4gaW5jcmVhc2luZyBzdWJzZXF1ZW5jZSwgc2luY2UgdGhleSBkbyBub3QgbW92ZSBhbW9uZyBlYWNoIG90aGVyXG4gICAgKiBtZWFuaW5nIHRoYXQgdGhleSBtdXN0IGJlIGFscmVhZHkgb3JkZXJlZCBhbW9uZyBlYWNoIG90aGVyLiBUaHVzLCB0aGUgbWF4aW1hbFxuICAgICogc2V0IG9mIG5vZGVzIHRoYXQgZG8gbm90IG1vdmUgZm9ybSBhIGxvbmdlc3QgaW5jcmVhc2luZyBzdWJzZXF1ZW5jZS5cbiAgICAqL1xuICAgIC8vIENvbXB1dGUgbG9uZ2VzdCBpbmNyZWFzaW5nIHN1YnNlcXVlbmNlXG4gICAgLy8gbTogc3Vic2VxdWVuY2UgbGVuZ3RoIGogPT4gaW5kZXggayBvZiBzbWFsbGVzdCB2YWx1ZSB0aGF0IGVuZHMgYW4gaW5jcmVhc2luZyBzdWJzZXF1ZW5jZSBvZiBsZW5ndGggalxuICAgIGNvbnN0IG0gPSBuZXcgSW50MzJBcnJheShjaGlsZHJlbi5sZW5ndGggKyAxKTtcbiAgICAvLyBQcmVkZWNlc3NvciBpbmRpY2VzICsgMVxuICAgIGNvbnN0IHAgPSBuZXcgSW50MzJBcnJheShjaGlsZHJlbi5sZW5ndGgpO1xuICAgIG1bMF0gPSAtMTtcbiAgICBsZXQgbG9uZ2VzdCA9IDA7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBjdXJyZW50ID0gY2hpbGRyZW5baV0uY2xhaW1fb3JkZXI7XG4gICAgICAgIC8vIEZpbmQgdGhlIGxhcmdlc3Qgc3Vic2VxdWVuY2UgbGVuZ3RoIHN1Y2ggdGhhdCBpdCBlbmRzIGluIGEgdmFsdWUgbGVzcyB0aGFuIG91ciBjdXJyZW50IHZhbHVlXG4gICAgICAgIC8vIHVwcGVyX2JvdW5kIHJldHVybnMgZmlyc3QgZ3JlYXRlciB2YWx1ZSwgc28gd2Ugc3VidHJhY3Qgb25lXG4gICAgICAgIGNvbnN0IHNlcUxlbiA9IHVwcGVyX2JvdW5kKDEsIGxvbmdlc3QgKyAxLCBpZHggPT4gY2hpbGRyZW5bbVtpZHhdXS5jbGFpbV9vcmRlciwgY3VycmVudCkgLSAxO1xuICAgICAgICBwW2ldID0gbVtzZXFMZW5dICsgMTtcbiAgICAgICAgY29uc3QgbmV3TGVuID0gc2VxTGVuICsgMTtcbiAgICAgICAgLy8gV2UgY2FuIGd1YXJhbnRlZSB0aGF0IGN1cnJlbnQgaXMgdGhlIHNtYWxsZXN0IHZhbHVlLiBPdGhlcndpc2UsIHdlIHdvdWxkIGhhdmUgZ2VuZXJhdGVkIGEgbG9uZ2VyIHNlcXVlbmNlLlxuICAgICAgICBtW25ld0xlbl0gPSBpO1xuICAgICAgICBsb25nZXN0ID0gTWF0aC5tYXgobmV3TGVuLCBsb25nZXN0KTtcbiAgICB9XG4gICAgLy8gVGhlIGxvbmdlc3QgaW5jcmVhc2luZyBzdWJzZXF1ZW5jZSBvZiBub2RlcyAoaW5pdGlhbGx5IHJldmVyc2VkKVxuICAgIGNvbnN0IGxpcyA9IFtdO1xuICAgIC8vIFRoZSByZXN0IG9mIHRoZSBub2Rlcywgbm9kZXMgdGhhdCB3aWxsIGJlIG1vdmVkXG4gICAgY29uc3QgdG9Nb3ZlID0gW107XG4gICAgbGV0IGxhc3QgPSBjaGlsZHJlbi5sZW5ndGggLSAxO1xuICAgIGZvciAobGV0IGN1ciA9IG1bbG9uZ2VzdF0gKyAxOyBjdXIgIT0gMDsgY3VyID0gcFtjdXIgLSAxXSkge1xuICAgICAgICBsaXMucHVzaChjaGlsZHJlbltjdXIgLSAxXSk7XG4gICAgICAgIGZvciAoOyBsYXN0ID49IGN1cjsgbGFzdC0tKSB7XG4gICAgICAgICAgICB0b01vdmUucHVzaChjaGlsZHJlbltsYXN0XSk7XG4gICAgICAgIH1cbiAgICAgICAgbGFzdC0tO1xuICAgIH1cbiAgICBmb3IgKDsgbGFzdCA+PSAwOyBsYXN0LS0pIHtcbiAgICAgICAgdG9Nb3ZlLnB1c2goY2hpbGRyZW5bbGFzdF0pO1xuICAgIH1cbiAgICBsaXMucmV2ZXJzZSgpO1xuICAgIC8vIFdlIHNvcnQgdGhlIG5vZGVzIGJlaW5nIG1vdmVkIHRvIGd1YXJhbnRlZSB0aGF0IHRoZWlyIGluc2VydGlvbiBvcmRlciBtYXRjaGVzIHRoZSBjbGFpbSBvcmRlclxuICAgIHRvTW92ZS5zb3J0KChhLCBiKSA9PiBhLmNsYWltX29yZGVyIC0gYi5jbGFpbV9vcmRlcik7XG4gICAgLy8gRmluYWxseSwgd2UgbW92ZSB0aGUgbm9kZXNcbiAgICBmb3IgKGxldCBpID0gMCwgaiA9IDA7IGkgPCB0b01vdmUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgd2hpbGUgKGogPCBsaXMubGVuZ3RoICYmIHRvTW92ZVtpXS5jbGFpbV9vcmRlciA+PSBsaXNbal0uY2xhaW1fb3JkZXIpIHtcbiAgICAgICAgICAgIGorKztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhbmNob3IgPSBqIDwgbGlzLmxlbmd0aCA/IGxpc1tqXSA6IG51bGw7XG4gICAgICAgIHRhcmdldC5pbnNlcnRCZWZvcmUodG9Nb3ZlW2ldLCBhbmNob3IpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGFwcGVuZCh0YXJnZXQsIG5vZGUpIHtcbiAgICBpZiAoaXNfaHlkcmF0aW5nKSB7XG4gICAgICAgIGluaXRfaHlkcmF0ZSh0YXJnZXQpO1xuICAgICAgICBpZiAoKHRhcmdldC5hY3R1YWxfZW5kX2NoaWxkID09PSB1bmRlZmluZWQpIHx8ICgodGFyZ2V0LmFjdHVhbF9lbmRfY2hpbGQgIT09IG51bGwpICYmICh0YXJnZXQuYWN0dWFsX2VuZF9jaGlsZC5wYXJlbnRFbGVtZW50ICE9PSB0YXJnZXQpKSkge1xuICAgICAgICAgICAgdGFyZ2V0LmFjdHVhbF9lbmRfY2hpbGQgPSB0YXJnZXQuZmlyc3RDaGlsZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAobm9kZSAhPT0gdGFyZ2V0LmFjdHVhbF9lbmRfY2hpbGQpIHtcbiAgICAgICAgICAgIHRhcmdldC5pbnNlcnRCZWZvcmUobm9kZSwgdGFyZ2V0LmFjdHVhbF9lbmRfY2hpbGQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGFyZ2V0LmFjdHVhbF9lbmRfY2hpbGQgPSBub2RlLm5leHRTaWJsaW5nO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKG5vZGUucGFyZW50Tm9kZSAhPT0gdGFyZ2V0KSB7XG4gICAgICAgIHRhcmdldC5hcHBlbmRDaGlsZChub2RlKTtcbiAgICB9XG59XG5mdW5jdGlvbiBpbnNlcnQodGFyZ2V0LCBub2RlLCBhbmNob3IpIHtcbiAgICBpZiAoaXNfaHlkcmF0aW5nICYmICFhbmNob3IpIHtcbiAgICAgICAgYXBwZW5kKHRhcmdldCwgbm9kZSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKG5vZGUucGFyZW50Tm9kZSAhPT0gdGFyZ2V0IHx8IChhbmNob3IgJiYgbm9kZS5uZXh0U2libGluZyAhPT0gYW5jaG9yKSkge1xuICAgICAgICB0YXJnZXQuaW5zZXJ0QmVmb3JlKG5vZGUsIGFuY2hvciB8fCBudWxsKTtcbiAgICB9XG59XG5mdW5jdGlvbiBkZXRhY2gobm9kZSkge1xuICAgIG5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChub2RlKTtcbn1cbmZ1bmN0aW9uIGRlc3Ryb3lfZWFjaChpdGVyYXRpb25zLCBkZXRhY2hpbmcpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGl0ZXJhdGlvbnMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKGl0ZXJhdGlvbnNbaV0pXG4gICAgICAgICAgICBpdGVyYXRpb25zW2ldLmQoZGV0YWNoaW5nKTtcbiAgICB9XG59XG5mdW5jdGlvbiBlbGVtZW50KG5hbWUpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChuYW1lKTtcbn1cbmZ1bmN0aW9uIGVsZW1lbnRfaXMobmFtZSwgaXMpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChuYW1lLCB7IGlzIH0pO1xufVxuZnVuY3Rpb24gb2JqZWN0X3dpdGhvdXRfcHJvcGVydGllcyhvYmosIGV4Y2x1ZGUpIHtcbiAgICBjb25zdCB0YXJnZXQgPSB7fTtcbiAgICBmb3IgKGNvbnN0IGsgaW4gb2JqKSB7XG4gICAgICAgIGlmIChoYXNfcHJvcChvYmosIGspXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICAmJiBleGNsdWRlLmluZGV4T2YoaykgPT09IC0xKSB7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICB0YXJnZXRba10gPSBvYmpba107XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldDtcbn1cbmZ1bmN0aW9uIHN2Z19lbGVtZW50KG5hbWUpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsIG5hbWUpO1xufVxuZnVuY3Rpb24gdGV4dChkYXRhKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGRhdGEpO1xufVxuZnVuY3Rpb24gc3BhY2UoKSB7XG4gICAgcmV0dXJuIHRleHQoJyAnKTtcbn1cbmZ1bmN0aW9uIGVtcHR5KCkge1xuICAgIHJldHVybiB0ZXh0KCcnKTtcbn1cbmZ1bmN0aW9uIGxpc3Rlbihub2RlLCBldmVudCwgaGFuZGxlciwgb3B0aW9ucykge1xuICAgIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlciwgb3B0aW9ucyk7XG4gICAgcmV0dXJuICgpID0+IG5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlciwgb3B0aW9ucyk7XG59XG5mdW5jdGlvbiBwcmV2ZW50X2RlZmF1bHQoZm4pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgcmV0dXJuIGZuLmNhbGwodGhpcywgZXZlbnQpO1xuICAgIH07XG59XG5mdW5jdGlvbiBzdG9wX3Byb3BhZ2F0aW9uKGZuKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICByZXR1cm4gZm4uY2FsbCh0aGlzLCBldmVudCk7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIHNlbGYoZm4pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgaWYgKGV2ZW50LnRhcmdldCA9PT0gdGhpcylcbiAgICAgICAgICAgIGZuLmNhbGwodGhpcywgZXZlbnQpO1xuICAgIH07XG59XG5mdW5jdGlvbiBhdHRyKG5vZGUsIGF0dHJpYnV0ZSwgdmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPT0gbnVsbClcbiAgICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUoYXR0cmlidXRlKTtcbiAgICBlbHNlIGlmIChub2RlLmdldEF0dHJpYnV0ZShhdHRyaWJ1dGUpICE9PSB2YWx1ZSlcbiAgICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoYXR0cmlidXRlLCB2YWx1ZSk7XG59XG5mdW5jdGlvbiBzZXRfYXR0cmlidXRlcyhub2RlLCBhdHRyaWJ1dGVzKSB7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGNvbnN0IGRlc2NyaXB0b3JzID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMobm9kZS5fX3Byb3RvX18pO1xuICAgIGZvciAoY29uc3Qga2V5IGluIGF0dHJpYnV0ZXMpIHtcbiAgICAgICAgaWYgKGF0dHJpYnV0ZXNba2V5XSA9PSBudWxsKSB7XG4gICAgICAgICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGtleSA9PT0gJ3N0eWxlJykge1xuICAgICAgICAgICAgbm9kZS5zdHlsZS5jc3NUZXh0ID0gYXR0cmlidXRlc1trZXldO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGtleSA9PT0gJ19fdmFsdWUnKSB7XG4gICAgICAgICAgICBub2RlLnZhbHVlID0gbm9kZVtrZXldID0gYXR0cmlidXRlc1trZXldO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGRlc2NyaXB0b3JzW2tleV0gJiYgZGVzY3JpcHRvcnNba2V5XS5zZXQpIHtcbiAgICAgICAgICAgIG5vZGVba2V5XSA9IGF0dHJpYnV0ZXNba2V5XTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGF0dHIobm9kZSwga2V5LCBhdHRyaWJ1dGVzW2tleV0pO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gc2V0X3N2Z19hdHRyaWJ1dGVzKG5vZGUsIGF0dHJpYnV0ZXMpIHtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBhdHRyaWJ1dGVzKSB7XG4gICAgICAgIGF0dHIobm9kZSwga2V5LCBhdHRyaWJ1dGVzW2tleV0pO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHNldF9jdXN0b21fZWxlbWVudF9kYXRhKG5vZGUsIHByb3AsIHZhbHVlKSB7XG4gICAgaWYgKHByb3AgaW4gbm9kZSkge1xuICAgICAgICBub2RlW3Byb3BdID0gdHlwZW9mIG5vZGVbcHJvcF0gPT09ICdib29sZWFuJyAmJiB2YWx1ZSA9PT0gJycgPyB0cnVlIDogdmFsdWU7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBhdHRyKG5vZGUsIHByb3AsIHZhbHVlKTtcbiAgICB9XG59XG5mdW5jdGlvbiB4bGlua19hdHRyKG5vZGUsIGF0dHJpYnV0ZSwgdmFsdWUpIHtcbiAgICBub2RlLnNldEF0dHJpYnV0ZU5TKCdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rJywgYXR0cmlidXRlLCB2YWx1ZSk7XG59XG5mdW5jdGlvbiBnZXRfYmluZGluZ19ncm91cF92YWx1ZShncm91cCwgX192YWx1ZSwgY2hlY2tlZCkge1xuICAgIGNvbnN0IHZhbHVlID0gbmV3IFNldCgpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZ3JvdXAubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKGdyb3VwW2ldLmNoZWNrZWQpXG4gICAgICAgICAgICB2YWx1ZS5hZGQoZ3JvdXBbaV0uX192YWx1ZSk7XG4gICAgfVxuICAgIGlmICghY2hlY2tlZCkge1xuICAgICAgICB2YWx1ZS5kZWxldGUoX192YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiBBcnJheS5mcm9tKHZhbHVlKTtcbn1cbmZ1bmN0aW9uIHRvX251bWJlcih2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gJycgPyBudWxsIDogK3ZhbHVlO1xufVxuZnVuY3Rpb24gdGltZV9yYW5nZXNfdG9fYXJyYXkocmFuZ2VzKSB7XG4gICAgY29uc3QgYXJyYXkgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJhbmdlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBhcnJheS5wdXNoKHsgc3RhcnQ6IHJhbmdlcy5zdGFydChpKSwgZW5kOiByYW5nZXMuZW5kKGkpIH0pO1xuICAgIH1cbiAgICByZXR1cm4gYXJyYXk7XG59XG5mdW5jdGlvbiBjaGlsZHJlbihlbGVtZW50KSB7XG4gICAgcmV0dXJuIEFycmF5LmZyb20oZWxlbWVudC5jaGlsZE5vZGVzKTtcbn1cbmZ1bmN0aW9uIGNsYWltX25vZGUobm9kZXMsIHByZWRpY2F0ZSwgcHJvY2Vzc05vZGUsIGNyZWF0ZU5vZGUsIGRvbnRVcGRhdGVMYXN0SW5kZXggPSBmYWxzZSkge1xuICAgIC8vIFRyeSB0byBmaW5kIG5vZGVzIGluIGFuIG9yZGVyIHN1Y2ggdGhhdCB3ZSBsZW5ndGhlbiB0aGUgbG9uZ2VzdCBpbmNyZWFzaW5nIHN1YnNlcXVlbmNlXG4gICAgaWYgKG5vZGVzLmNsYWltX2luZm8gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBub2Rlcy5jbGFpbV9pbmZvID0geyBsYXN0X2luZGV4OiAwLCB0b3RhbF9jbGFpbWVkOiAwIH07XG4gICAgfVxuICAgIGNvbnN0IHJlc3VsdE5vZGUgPSAoKCkgPT4ge1xuICAgICAgICAvLyBXZSBmaXJzdCB0cnkgdG8gZmluZCBhbiBlbGVtZW50IGFmdGVyIHRoZSBwcmV2aW91cyBvbmVcbiAgICAgICAgZm9yIChsZXQgaSA9IG5vZGVzLmNsYWltX2luZm8ubGFzdF9pbmRleDsgaSA8IG5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBub2RlID0gbm9kZXNbaV07XG4gICAgICAgICAgICBpZiAocHJlZGljYXRlKG5vZGUpKSB7XG4gICAgICAgICAgICAgICAgcHJvY2Vzc05vZGUobm9kZSk7XG4gICAgICAgICAgICAgICAgbm9kZXMuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICAgIGlmICghZG9udFVwZGF0ZUxhc3RJbmRleCkge1xuICAgICAgICAgICAgICAgICAgICBub2Rlcy5jbGFpbV9pbmZvLmxhc3RfaW5kZXggPSBpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBPdGhlcndpc2UsIHdlIHRyeSB0byBmaW5kIG9uZSBiZWZvcmVcbiAgICAgICAgLy8gV2UgaXRlcmF0ZSBpbiByZXZlcnNlIHNvIHRoYXQgd2UgZG9uJ3QgZ28gdG9vIGZhciBiYWNrXG4gICAgICAgIGZvciAobGV0IGkgPSBub2Rlcy5jbGFpbV9pbmZvLmxhc3RfaW5kZXggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgY29uc3Qgbm9kZSA9IG5vZGVzW2ldO1xuICAgICAgICAgICAgaWYgKHByZWRpY2F0ZShub2RlKSkge1xuICAgICAgICAgICAgICAgIHByb2Nlc3NOb2RlKG5vZGUpO1xuICAgICAgICAgICAgICAgIG5vZGVzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICBpZiAoIWRvbnRVcGRhdGVMYXN0SW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgbm9kZXMuY2xhaW1faW5mby5sYXN0X2luZGV4ID0gaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFNpbmNlIHdlIHNwbGljZWQgYmVmb3JlIHRoZSBsYXN0X2luZGV4LCB3ZSBkZWNyZWFzZSBpdFxuICAgICAgICAgICAgICAgICAgICBub2Rlcy5jbGFpbV9pbmZvLmxhc3RfaW5kZXgtLTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgd2UgY2FuJ3QgZmluZCBhbnkgbWF0Y2hpbmcgbm9kZSwgd2UgY3JlYXRlIGEgbmV3IG9uZVxuICAgICAgICByZXR1cm4gY3JlYXRlTm9kZSgpO1xuICAgIH0pKCk7XG4gICAgcmVzdWx0Tm9kZS5jbGFpbV9vcmRlciA9IG5vZGVzLmNsYWltX2luZm8udG90YWxfY2xhaW1lZDtcbiAgICBub2Rlcy5jbGFpbV9pbmZvLnRvdGFsX2NsYWltZWQgKz0gMTtcbiAgICByZXR1cm4gcmVzdWx0Tm9kZTtcbn1cbmZ1bmN0aW9uIGNsYWltX2VsZW1lbnQobm9kZXMsIG5hbWUsIGF0dHJpYnV0ZXMsIHN2Zykge1xuICAgIHJldHVybiBjbGFpbV9ub2RlKG5vZGVzLCAobm9kZSkgPT4gbm9kZS5ub2RlTmFtZSA9PT0gbmFtZSwgKG5vZGUpID0+IHtcbiAgICAgICAgY29uc3QgcmVtb3ZlID0gW107XG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgbm9kZS5hdHRyaWJ1dGVzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICBjb25zdCBhdHRyaWJ1dGUgPSBub2RlLmF0dHJpYnV0ZXNbal07XG4gICAgICAgICAgICBpZiAoIWF0dHJpYnV0ZXNbYXR0cmlidXRlLm5hbWVdKSB7XG4gICAgICAgICAgICAgICAgcmVtb3ZlLnB1c2goYXR0cmlidXRlLm5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJlbW92ZS5mb3JFYWNoKHYgPT4gbm9kZS5yZW1vdmVBdHRyaWJ1dGUodikpO1xuICAgIH0sICgpID0+IHN2ZyA/IHN2Z19lbGVtZW50KG5hbWUpIDogZWxlbWVudChuYW1lKSk7XG59XG5mdW5jdGlvbiBjbGFpbV90ZXh0KG5vZGVzLCBkYXRhKSB7XG4gICAgcmV0dXJuIGNsYWltX25vZGUobm9kZXMsIChub2RlKSA9PiBub2RlLm5vZGVUeXBlID09PSAzLCAobm9kZSkgPT4ge1xuICAgICAgICBub2RlLmRhdGEgPSAnJyArIGRhdGE7XG4gICAgfSwgKCkgPT4gdGV4dChkYXRhKSwgdHJ1ZSAvLyBUZXh0IG5vZGVzIHNob3VsZCBub3QgdXBkYXRlIGxhc3QgaW5kZXggc2luY2UgaXQgaXMgbGlrZWx5IG5vdCB3b3J0aCBpdCB0byBlbGltaW5hdGUgYW4gaW5jcmVhc2luZyBzdWJzZXF1ZW5jZSBvZiBhY3R1YWwgZWxlbWVudHNcbiAgICApO1xufVxuZnVuY3Rpb24gY2xhaW1fc3BhY2Uobm9kZXMpIHtcbiAgICByZXR1cm4gY2xhaW1fdGV4dChub2RlcywgJyAnKTtcbn1cbmZ1bmN0aW9uIGZpbmRfY29tbWVudChub2RlcywgdGV4dCwgc3RhcnQpIHtcbiAgICBmb3IgKGxldCBpID0gc3RhcnQ7IGkgPCBub2Rlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBjb25zdCBub2RlID0gbm9kZXNbaV07XG4gICAgICAgIGlmIChub2RlLm5vZGVUeXBlID09PSA4IC8qIGNvbW1lbnQgbm9kZSAqLyAmJiBub2RlLnRleHRDb250ZW50LnRyaW0oKSA9PT0gdGV4dCkge1xuICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5vZGVzLmxlbmd0aDtcbn1cbmZ1bmN0aW9uIGNsYWltX2h0bWxfdGFnKG5vZGVzKSB7XG4gICAgLy8gZmluZCBodG1sIG9wZW5pbmcgdGFnXG4gICAgY29uc3Qgc3RhcnRfaW5kZXggPSBmaW5kX2NvbW1lbnQobm9kZXMsICdIVE1MX1RBR19TVEFSVCcsIDApO1xuICAgIGNvbnN0IGVuZF9pbmRleCA9IGZpbmRfY29tbWVudChub2RlcywgJ0hUTUxfVEFHX0VORCcsIHN0YXJ0X2luZGV4KTtcbiAgICBpZiAoc3RhcnRfaW5kZXggPT09IGVuZF9pbmRleCkge1xuICAgICAgICByZXR1cm4gbmV3IEh0bWxUYWcoKTtcbiAgICB9XG4gICAgY29uc3QgaHRtbF90YWdfbm9kZXMgPSBub2Rlcy5zcGxpY2Uoc3RhcnRfaW5kZXgsIGVuZF9pbmRleCArIDEpO1xuICAgIGRldGFjaChodG1sX3RhZ19ub2Rlc1swXSk7XG4gICAgZGV0YWNoKGh0bWxfdGFnX25vZGVzW2h0bWxfdGFnX25vZGVzLmxlbmd0aCAtIDFdKTtcbiAgICByZXR1cm4gbmV3IEh0bWxUYWcoaHRtbF90YWdfbm9kZXMuc2xpY2UoMSwgaHRtbF90YWdfbm9kZXMubGVuZ3RoIC0gMSkpO1xufVxuZnVuY3Rpb24gc2V0X2RhdGEodGV4dCwgZGF0YSkge1xuICAgIGRhdGEgPSAnJyArIGRhdGE7XG4gICAgaWYgKHRleHQud2hvbGVUZXh0ICE9PSBkYXRhKVxuICAgICAgICB0ZXh0LmRhdGEgPSBkYXRhO1xufVxuZnVuY3Rpb24gc2V0X2lucHV0X3ZhbHVlKGlucHV0LCB2YWx1ZSkge1xuICAgIGlucHV0LnZhbHVlID0gdmFsdWUgPT0gbnVsbCA/ICcnIDogdmFsdWU7XG59XG5mdW5jdGlvbiBzZXRfaW5wdXRfdHlwZShpbnB1dCwgdHlwZSkge1xuICAgIHRyeSB7XG4gICAgICAgIGlucHV0LnR5cGUgPSB0eXBlO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICAvLyBkbyBub3RoaW5nXG4gICAgfVxufVxuZnVuY3Rpb24gc2V0X3N0eWxlKG5vZGUsIGtleSwgdmFsdWUsIGltcG9ydGFudCkge1xuICAgIG5vZGUuc3R5bGUuc2V0UHJvcGVydHkoa2V5LCB2YWx1ZSwgaW1wb3J0YW50ID8gJ2ltcG9ydGFudCcgOiAnJyk7XG59XG5mdW5jdGlvbiBzZWxlY3Rfb3B0aW9uKHNlbGVjdCwgdmFsdWUpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNlbGVjdC5vcHRpb25zLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbiA9IHNlbGVjdC5vcHRpb25zW2ldO1xuICAgICAgICBpZiAob3B0aW9uLl9fdmFsdWUgPT09IHZhbHVlKSB7XG4gICAgICAgICAgICBvcHRpb24uc2VsZWN0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gc2VsZWN0X29wdGlvbnMoc2VsZWN0LCB2YWx1ZSkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2VsZWN0Lm9wdGlvbnMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9uID0gc2VsZWN0Lm9wdGlvbnNbaV07XG4gICAgICAgIG9wdGlvbi5zZWxlY3RlZCA9IH52YWx1ZS5pbmRleE9mKG9wdGlvbi5fX3ZhbHVlKTtcbiAgICB9XG59XG5mdW5jdGlvbiBzZWxlY3RfdmFsdWUoc2VsZWN0KSB7XG4gICAgY29uc3Qgc2VsZWN0ZWRfb3B0aW9uID0gc2VsZWN0LnF1ZXJ5U2VsZWN0b3IoJzpjaGVja2VkJykgfHwgc2VsZWN0Lm9wdGlvbnNbMF07XG4gICAgcmV0dXJuIHNlbGVjdGVkX29wdGlvbiAmJiBzZWxlY3RlZF9vcHRpb24uX192YWx1ZTtcbn1cbmZ1bmN0aW9uIHNlbGVjdF9tdWx0aXBsZV92YWx1ZShzZWxlY3QpIHtcbiAgICByZXR1cm4gW10ubWFwLmNhbGwoc2VsZWN0LnF1ZXJ5U2VsZWN0b3JBbGwoJzpjaGVja2VkJyksIG9wdGlvbiA9PiBvcHRpb24uX192YWx1ZSk7XG59XG4vLyB1bmZvcnR1bmF0ZWx5IHRoaXMgY2FuJ3QgYmUgYSBjb25zdGFudCBhcyB0aGF0IHdvdWxkbid0IGJlIHRyZWUtc2hha2VhYmxlXG4vLyBzbyB3ZSBjYWNoZSB0aGUgcmVzdWx0IGluc3RlYWRcbmxldCBjcm9zc29yaWdpbjtcbmZ1bmN0aW9uIGlzX2Nyb3Nzb3JpZ2luKCkge1xuICAgIGlmIChjcm9zc29yaWdpbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNyb3Nzb3JpZ2luID0gZmFsc2U7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LnBhcmVudCkge1xuICAgICAgICAgICAgICAgIHZvaWQgd2luZG93LnBhcmVudC5kb2N1bWVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNyb3Nzb3JpZ2luID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY3Jvc3NvcmlnaW47XG59XG5mdW5jdGlvbiBhZGRfcmVzaXplX2xpc3RlbmVyKG5vZGUsIGZuKSB7XG4gICAgY29uc3QgY29tcHV0ZWRfc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKG5vZGUpO1xuICAgIGlmIChjb21wdXRlZF9zdHlsZS5wb3NpdGlvbiA9PT0gJ3N0YXRpYycpIHtcbiAgICAgICAgbm9kZS5zdHlsZS5wb3NpdGlvbiA9ICdyZWxhdGl2ZSc7XG4gICAgfVxuICAgIGNvbnN0IGlmcmFtZSA9IGVsZW1lbnQoJ2lmcmFtZScpO1xuICAgIGlmcmFtZS5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywgJ2Rpc3BsYXk6IGJsb2NrOyBwb3NpdGlvbjogYWJzb2x1dGU7IHRvcDogMDsgbGVmdDogMDsgd2lkdGg6IDEwMCU7IGhlaWdodDogMTAwJTsgJyArXG4gICAgICAgICdvdmVyZmxvdzogaGlkZGVuOyBib3JkZXI6IDA7IG9wYWNpdHk6IDA7IHBvaW50ZXItZXZlbnRzOiBub25lOyB6LWluZGV4OiAtMTsnKTtcbiAgICBpZnJhbWUuc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7XG4gICAgaWZyYW1lLnRhYkluZGV4ID0gLTE7XG4gICAgY29uc3QgY3Jvc3NvcmlnaW4gPSBpc19jcm9zc29yaWdpbigpO1xuICAgIGxldCB1bnN1YnNjcmliZTtcbiAgICBpZiAoY3Jvc3NvcmlnaW4pIHtcbiAgICAgICAgaWZyYW1lLnNyYyA9IFwiZGF0YTp0ZXh0L2h0bWwsPHNjcmlwdD5vbnJlc2l6ZT1mdW5jdGlvbigpe3BhcmVudC5wb3N0TWVzc2FnZSgwLCcqJyl9PC9zY3JpcHQ+XCI7XG4gICAgICAgIHVuc3Vic2NyaWJlID0gbGlzdGVuKHdpbmRvdywgJ21lc3NhZ2UnLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGlmIChldmVudC5zb3VyY2UgPT09IGlmcmFtZS5jb250ZW50V2luZG93KVxuICAgICAgICAgICAgICAgIGZuKCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgaWZyYW1lLnNyYyA9ICdhYm91dDpibGFuayc7XG4gICAgICAgIGlmcmFtZS5vbmxvYWQgPSAoKSA9PiB7XG4gICAgICAgICAgICB1bnN1YnNjcmliZSA9IGxpc3RlbihpZnJhbWUuY29udGVudFdpbmRvdywgJ3Jlc2l6ZScsIGZuKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgYXBwZW5kKG5vZGUsIGlmcmFtZSk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgaWYgKGNyb3Nzb3JpZ2luKSB7XG4gICAgICAgICAgICB1bnN1YnNjcmliZSgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHVuc3Vic2NyaWJlICYmIGlmcmFtZS5jb250ZW50V2luZG93KSB7XG4gICAgICAgICAgICB1bnN1YnNjcmliZSgpO1xuICAgICAgICB9XG4gICAgICAgIGRldGFjaChpZnJhbWUpO1xuICAgIH07XG59XG5mdW5jdGlvbiB0b2dnbGVfY2xhc3MoZWxlbWVudCwgbmFtZSwgdG9nZ2xlKSB7XG4gICAgZWxlbWVudC5jbGFzc0xpc3RbdG9nZ2xlID8gJ2FkZCcgOiAncmVtb3ZlJ10obmFtZSk7XG59XG5mdW5jdGlvbiBjdXN0b21fZXZlbnQodHlwZSwgZGV0YWlsKSB7XG4gICAgY29uc3QgZSA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdDdXN0b21FdmVudCcpO1xuICAgIGUuaW5pdEN1c3RvbUV2ZW50KHR5cGUsIGZhbHNlLCBmYWxzZSwgZGV0YWlsKTtcbiAgICByZXR1cm4gZTtcbn1cbmZ1bmN0aW9uIHF1ZXJ5X3NlbGVjdG9yX2FsbChzZWxlY3RvciwgcGFyZW50ID0gZG9jdW1lbnQuYm9keSkge1xuICAgIHJldHVybiBBcnJheS5mcm9tKHBhcmVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKSk7XG59XG5jbGFzcyBIdG1sVGFnIHtcbiAgICBjb25zdHJ1Y3RvcihjbGFpbWVkX25vZGVzKSB7XG4gICAgICAgIHRoaXMuZSA9IHRoaXMubiA9IG51bGw7XG4gICAgICAgIHRoaXMubCA9IGNsYWltZWRfbm9kZXM7XG4gICAgfVxuICAgIG0oaHRtbCwgdGFyZ2V0LCBhbmNob3IgPSBudWxsKSB7XG4gICAgICAgIGlmICghdGhpcy5lKSB7XG4gICAgICAgICAgICB0aGlzLmUgPSBlbGVtZW50KHRhcmdldC5ub2RlTmFtZSk7XG4gICAgICAgICAgICB0aGlzLnQgPSB0YXJnZXQ7XG4gICAgICAgICAgICBpZiAodGhpcy5sKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5uID0gdGhpcy5sO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5oKGh0bWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuaShhbmNob3IpO1xuICAgIH1cbiAgICBoKGh0bWwpIHtcbiAgICAgICAgdGhpcy5lLmlubmVySFRNTCA9IGh0bWw7XG4gICAgICAgIHRoaXMubiA9IEFycmF5LmZyb20odGhpcy5lLmNoaWxkTm9kZXMpO1xuICAgIH1cbiAgICBpKGFuY2hvcikge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubi5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgaW5zZXJ0KHRoaXMudCwgdGhpcy5uW2ldLCBhbmNob3IpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHAoaHRtbCkge1xuICAgICAgICB0aGlzLmQoKTtcbiAgICAgICAgdGhpcy5oKGh0bWwpO1xuICAgICAgICB0aGlzLmkodGhpcy5hKTtcbiAgICB9XG4gICAgZCgpIHtcbiAgICAgICAgdGhpcy5uLmZvckVhY2goZGV0YWNoKTtcbiAgICB9XG59XG5mdW5jdGlvbiBhdHRyaWJ1dGVfdG9fb2JqZWN0KGF0dHJpYnV0ZXMpIHtcbiAgICBjb25zdCByZXN1bHQgPSB7fTtcbiAgICBmb3IgKGNvbnN0IGF0dHJpYnV0ZSBvZiBhdHRyaWJ1dGVzKSB7XG4gICAgICAgIHJlc3VsdFthdHRyaWJ1dGUubmFtZV0gPSBhdHRyaWJ1dGUudmFsdWU7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBnZXRfY3VzdG9tX2VsZW1lbnRzX3Nsb3RzKGVsZW1lbnQpIHtcbiAgICBjb25zdCByZXN1bHQgPSB7fTtcbiAgICBlbGVtZW50LmNoaWxkTm9kZXMuZm9yRWFjaCgobm9kZSkgPT4ge1xuICAgICAgICByZXN1bHRbbm9kZS5zbG90IHx8ICdkZWZhdWx0J10gPSB0cnVlO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG59XG5cbmNvbnN0IGFjdGl2ZV9kb2NzID0gbmV3IFNldCgpO1xubGV0IGFjdGl2ZSA9IDA7XG4vLyBodHRwczovL2dpdGh1Yi5jb20vZGFya3NreWFwcC9zdHJpbmctaGFzaC9ibG9iL21hc3Rlci9pbmRleC5qc1xuZnVuY3Rpb24gaGFzaChzdHIpIHtcbiAgICBsZXQgaGFzaCA9IDUzODE7XG4gICAgbGV0IGkgPSBzdHIubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pXG4gICAgICAgIGhhc2ggPSAoKGhhc2ggPDwgNSkgLSBoYXNoKSBeIHN0ci5jaGFyQ29kZUF0KGkpO1xuICAgIHJldHVybiBoYXNoID4+PiAwO1xufVxuZnVuY3Rpb24gY3JlYXRlX3J1bGUobm9kZSwgYSwgYiwgZHVyYXRpb24sIGRlbGF5LCBlYXNlLCBmbiwgdWlkID0gMCkge1xuICAgIGNvbnN0IHN0ZXAgPSAxNi42NjYgLyBkdXJhdGlvbjtcbiAgICBsZXQga2V5ZnJhbWVzID0gJ3tcXG4nO1xuICAgIGZvciAobGV0IHAgPSAwOyBwIDw9IDE7IHAgKz0gc3RlcCkge1xuICAgICAgICBjb25zdCB0ID0gYSArIChiIC0gYSkgKiBlYXNlKHApO1xuICAgICAgICBrZXlmcmFtZXMgKz0gcCAqIDEwMCArIGAleyR7Zm4odCwgMSAtIHQpfX1cXG5gO1xuICAgIH1cbiAgICBjb25zdCBydWxlID0ga2V5ZnJhbWVzICsgYDEwMCUgeyR7Zm4oYiwgMSAtIGIpfX1cXG59YDtcbiAgICBjb25zdCBuYW1lID0gYF9fc3ZlbHRlXyR7aGFzaChydWxlKX1fJHt1aWR9YDtcbiAgICBjb25zdCBkb2MgPSBub2RlLm93bmVyRG9jdW1lbnQ7XG4gICAgYWN0aXZlX2RvY3MuYWRkKGRvYyk7XG4gICAgY29uc3Qgc3R5bGVzaGVldCA9IGRvYy5fX3N2ZWx0ZV9zdHlsZXNoZWV0IHx8IChkb2MuX19zdmVsdGVfc3R5bGVzaGVldCA9IGRvYy5oZWFkLmFwcGVuZENoaWxkKGVsZW1lbnQoJ3N0eWxlJykpLnNoZWV0KTtcbiAgICBjb25zdCBjdXJyZW50X3J1bGVzID0gZG9jLl9fc3ZlbHRlX3J1bGVzIHx8IChkb2MuX19zdmVsdGVfcnVsZXMgPSB7fSk7XG4gICAgaWYgKCFjdXJyZW50X3J1bGVzW25hbWVdKSB7XG4gICAgICAgIGN1cnJlbnRfcnVsZXNbbmFtZV0gPSB0cnVlO1xuICAgICAgICBzdHlsZXNoZWV0Lmluc2VydFJ1bGUoYEBrZXlmcmFtZXMgJHtuYW1lfSAke3J1bGV9YCwgc3R5bGVzaGVldC5jc3NSdWxlcy5sZW5ndGgpO1xuICAgIH1cbiAgICBjb25zdCBhbmltYXRpb24gPSBub2RlLnN0eWxlLmFuaW1hdGlvbiB8fCAnJztcbiAgICBub2RlLnN0eWxlLmFuaW1hdGlvbiA9IGAke2FuaW1hdGlvbiA/IGAke2FuaW1hdGlvbn0sIGAgOiAnJ30ke25hbWV9ICR7ZHVyYXRpb259bXMgbGluZWFyICR7ZGVsYXl9bXMgMSBib3RoYDtcbiAgICBhY3RpdmUgKz0gMTtcbiAgICByZXR1cm4gbmFtZTtcbn1cbmZ1bmN0aW9uIGRlbGV0ZV9ydWxlKG5vZGUsIG5hbWUpIHtcbiAgICBjb25zdCBwcmV2aW91cyA9IChub2RlLnN0eWxlLmFuaW1hdGlvbiB8fCAnJykuc3BsaXQoJywgJyk7XG4gICAgY29uc3QgbmV4dCA9IHByZXZpb3VzLmZpbHRlcihuYW1lXG4gICAgICAgID8gYW5pbSA9PiBhbmltLmluZGV4T2YobmFtZSkgPCAwIC8vIHJlbW92ZSBzcGVjaWZpYyBhbmltYXRpb25cbiAgICAgICAgOiBhbmltID0+IGFuaW0uaW5kZXhPZignX19zdmVsdGUnKSA9PT0gLTEgLy8gcmVtb3ZlIGFsbCBTdmVsdGUgYW5pbWF0aW9uc1xuICAgICk7XG4gICAgY29uc3QgZGVsZXRlZCA9IHByZXZpb3VzLmxlbmd0aCAtIG5leHQubGVuZ3RoO1xuICAgIGlmIChkZWxldGVkKSB7XG4gICAgICAgIG5vZGUuc3R5bGUuYW5pbWF0aW9uID0gbmV4dC5qb2luKCcsICcpO1xuICAgICAgICBhY3RpdmUgLT0gZGVsZXRlZDtcbiAgICAgICAgaWYgKCFhY3RpdmUpXG4gICAgICAgICAgICBjbGVhcl9ydWxlcygpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGNsZWFyX3J1bGVzKCkge1xuICAgIHJhZigoKSA9PiB7XG4gICAgICAgIGlmIChhY3RpdmUpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGFjdGl2ZV9kb2NzLmZvckVhY2goZG9jID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHN0eWxlc2hlZXQgPSBkb2MuX19zdmVsdGVfc3R5bGVzaGVldDtcbiAgICAgICAgICAgIGxldCBpID0gc3R5bGVzaGVldC5jc3NSdWxlcy5sZW5ndGg7XG4gICAgICAgICAgICB3aGlsZSAoaS0tKVxuICAgICAgICAgICAgICAgIHN0eWxlc2hlZXQuZGVsZXRlUnVsZShpKTtcbiAgICAgICAgICAgIGRvYy5fX3N2ZWx0ZV9ydWxlcyA9IHt9O1xuICAgICAgICB9KTtcbiAgICAgICAgYWN0aXZlX2RvY3MuY2xlYXIoKTtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlX2FuaW1hdGlvbihub2RlLCBmcm9tLCBmbiwgcGFyYW1zKSB7XG4gICAgaWYgKCFmcm9tKVxuICAgICAgICByZXR1cm4gbm9vcDtcbiAgICBjb25zdCB0byA9IG5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgaWYgKGZyb20ubGVmdCA9PT0gdG8ubGVmdCAmJiBmcm9tLnJpZ2h0ID09PSB0by5yaWdodCAmJiBmcm9tLnRvcCA9PT0gdG8udG9wICYmIGZyb20uYm90dG9tID09PSB0by5ib3R0b20pXG4gICAgICAgIHJldHVybiBub29wO1xuICAgIGNvbnN0IHsgZGVsYXkgPSAwLCBkdXJhdGlvbiA9IDMwMCwgZWFzaW5nID0gaWRlbnRpdHksIFxuICAgIC8vIEB0cy1pZ25vcmUgdG9kbzogc2hvdWxkIHRoaXMgYmUgc2VwYXJhdGVkIGZyb20gZGVzdHJ1Y3R1cmluZz8gT3Igc3RhcnQvZW5kIGFkZGVkIHRvIHB1YmxpYyBhcGkgYW5kIGRvY3VtZW50YXRpb24/XG4gICAgc3RhcnQ6IHN0YXJ0X3RpbWUgPSBub3coKSArIGRlbGF5LCBcbiAgICAvLyBAdHMtaWdub3JlIHRvZG86XG4gICAgZW5kID0gc3RhcnRfdGltZSArIGR1cmF0aW9uLCB0aWNrID0gbm9vcCwgY3NzIH0gPSBmbihub2RlLCB7IGZyb20sIHRvIH0sIHBhcmFtcyk7XG4gICAgbGV0IHJ1bm5pbmcgPSB0cnVlO1xuICAgIGxldCBzdGFydGVkID0gZmFsc2U7XG4gICAgbGV0IG5hbWU7XG4gICAgZnVuY3Rpb24gc3RhcnQoKSB7XG4gICAgICAgIGlmIChjc3MpIHtcbiAgICAgICAgICAgIG5hbWUgPSBjcmVhdGVfcnVsZShub2RlLCAwLCAxLCBkdXJhdGlvbiwgZGVsYXksIGVhc2luZywgY3NzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWRlbGF5KSB7XG4gICAgICAgICAgICBzdGFydGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBzdG9wKCkge1xuICAgICAgICBpZiAoY3NzKVxuICAgICAgICAgICAgZGVsZXRlX3J1bGUobm9kZSwgbmFtZSk7XG4gICAgICAgIHJ1bm5pbmcgPSBmYWxzZTtcbiAgICB9XG4gICAgbG9vcChub3cgPT4ge1xuICAgICAgICBpZiAoIXN0YXJ0ZWQgJiYgbm93ID49IHN0YXJ0X3RpbWUpIHtcbiAgICAgICAgICAgIHN0YXJ0ZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdGFydGVkICYmIG5vdyA+PSBlbmQpIHtcbiAgICAgICAgICAgIHRpY2soMSwgMCk7XG4gICAgICAgICAgICBzdG9wKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFydW5uaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0YXJ0ZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IHAgPSBub3cgLSBzdGFydF90aW1lO1xuICAgICAgICAgICAgY29uc3QgdCA9IDAgKyAxICogZWFzaW5nKHAgLyBkdXJhdGlvbik7XG4gICAgICAgICAgICB0aWNrKHQsIDEgLSB0KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9KTtcbiAgICBzdGFydCgpO1xuICAgIHRpY2soMCwgMSk7XG4gICAgcmV0dXJuIHN0b3A7XG59XG5mdW5jdGlvbiBmaXhfcG9zaXRpb24obm9kZSkge1xuICAgIGNvbnN0IHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShub2RlKTtcbiAgICBpZiAoc3R5bGUucG9zaXRpb24gIT09ICdhYnNvbHV0ZScgJiYgc3R5bGUucG9zaXRpb24gIT09ICdmaXhlZCcpIHtcbiAgICAgICAgY29uc3QgeyB3aWR0aCwgaGVpZ2h0IH0gPSBzdHlsZTtcbiAgICAgICAgY29uc3QgYSA9IG5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIG5vZGUuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuICAgICAgICBub2RlLnN0eWxlLndpZHRoID0gd2lkdGg7XG4gICAgICAgIG5vZGUuc3R5bGUuaGVpZ2h0ID0gaGVpZ2h0O1xuICAgICAgICBhZGRfdHJhbnNmb3JtKG5vZGUsIGEpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGFkZF90cmFuc2Zvcm0obm9kZSwgYSkge1xuICAgIGNvbnN0IGIgPSBub2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIGlmIChhLmxlZnQgIT09IGIubGVmdCB8fCBhLnRvcCAhPT0gYi50b3ApIHtcbiAgICAgICAgY29uc3Qgc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKG5vZGUpO1xuICAgICAgICBjb25zdCB0cmFuc2Zvcm0gPSBzdHlsZS50cmFuc2Zvcm0gPT09ICdub25lJyA/ICcnIDogc3R5bGUudHJhbnNmb3JtO1xuICAgICAgICBub2RlLnN0eWxlLnRyYW5zZm9ybSA9IGAke3RyYW5zZm9ybX0gdHJhbnNsYXRlKCR7YS5sZWZ0IC0gYi5sZWZ0fXB4LCAke2EudG9wIC0gYi50b3B9cHgpYDtcbiAgICB9XG59XG5cbmxldCBjdXJyZW50X2NvbXBvbmVudDtcbmZ1bmN0aW9uIHNldF9jdXJyZW50X2NvbXBvbmVudChjb21wb25lbnQpIHtcbiAgICBjdXJyZW50X2NvbXBvbmVudCA9IGNvbXBvbmVudDtcbn1cbmZ1bmN0aW9uIGdldF9jdXJyZW50X2NvbXBvbmVudCgpIHtcbiAgICBpZiAoIWN1cnJlbnRfY29tcG9uZW50KVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Z1bmN0aW9uIGNhbGxlZCBvdXRzaWRlIGNvbXBvbmVudCBpbml0aWFsaXphdGlvbicpO1xuICAgIHJldHVybiBjdXJyZW50X2NvbXBvbmVudDtcbn1cbmZ1bmN0aW9uIGJlZm9yZVVwZGF0ZShmbikge1xuICAgIGdldF9jdXJyZW50X2NvbXBvbmVudCgpLiQkLmJlZm9yZV91cGRhdGUucHVzaChmbik7XG59XG5mdW5jdGlvbiBvbk1vdW50KGZuKSB7XG4gICAgZ2V0X2N1cnJlbnRfY29tcG9uZW50KCkuJCQub25fbW91bnQucHVzaChmbik7XG59XG5mdW5jdGlvbiBhZnRlclVwZGF0ZShmbikge1xuICAgIGdldF9jdXJyZW50X2NvbXBvbmVudCgpLiQkLmFmdGVyX3VwZGF0ZS5wdXNoKGZuKTtcbn1cbmZ1bmN0aW9uIG9uRGVzdHJveShmbikge1xuICAgIGdldF9jdXJyZW50X2NvbXBvbmVudCgpLiQkLm9uX2Rlc3Ryb3kucHVzaChmbik7XG59XG5mdW5jdGlvbiBjcmVhdGVFdmVudERpc3BhdGNoZXIoKSB7XG4gICAgY29uc3QgY29tcG9uZW50ID0gZ2V0X2N1cnJlbnRfY29tcG9uZW50KCk7XG4gICAgcmV0dXJuICh0eXBlLCBkZXRhaWwpID0+IHtcbiAgICAgICAgY29uc3QgY2FsbGJhY2tzID0gY29tcG9uZW50LiQkLmNhbGxiYWNrc1t0eXBlXTtcbiAgICAgICAgaWYgKGNhbGxiYWNrcykge1xuICAgICAgICAgICAgLy8gVE9ETyBhcmUgdGhlcmUgc2l0dWF0aW9ucyB3aGVyZSBldmVudHMgY291bGQgYmUgZGlzcGF0Y2hlZFxuICAgICAgICAgICAgLy8gaW4gYSBzZXJ2ZXIgKG5vbi1ET00pIGVudmlyb25tZW50P1xuICAgICAgICAgICAgY29uc3QgZXZlbnQgPSBjdXN0b21fZXZlbnQodHlwZSwgZGV0YWlsKTtcbiAgICAgICAgICAgIGNhbGxiYWNrcy5zbGljZSgpLmZvckVhY2goZm4gPT4ge1xuICAgICAgICAgICAgICAgIGZuLmNhbGwoY29tcG9uZW50LCBldmVudCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG59XG5mdW5jdGlvbiBzZXRDb250ZXh0KGtleSwgY29udGV4dCkge1xuICAgIGdldF9jdXJyZW50X2NvbXBvbmVudCgpLiQkLmNvbnRleHQuc2V0KGtleSwgY29udGV4dCk7XG59XG5mdW5jdGlvbiBnZXRDb250ZXh0KGtleSkge1xuICAgIHJldHVybiBnZXRfY3VycmVudF9jb21wb25lbnQoKS4kJC5jb250ZXh0LmdldChrZXkpO1xufVxuZnVuY3Rpb24gaGFzQ29udGV4dChrZXkpIHtcbiAgICByZXR1cm4gZ2V0X2N1cnJlbnRfY29tcG9uZW50KCkuJCQuY29udGV4dC5oYXMoa2V5KTtcbn1cbi8vIFRPRE8gZmlndXJlIG91dCBpZiB3ZSBzdGlsbCB3YW50IHRvIHN1cHBvcnRcbi8vIHNob3J0aGFuZCBldmVudHMsIG9yIGlmIHdlIHdhbnQgdG8gaW1wbGVtZW50XG4vLyBhIHJlYWwgYnViYmxpbmcgbWVjaGFuaXNtXG5mdW5jdGlvbiBidWJibGUoY29tcG9uZW50LCBldmVudCkge1xuICAgIGNvbnN0IGNhbGxiYWNrcyA9IGNvbXBvbmVudC4kJC5jYWxsYmFja3NbZXZlbnQudHlwZV07XG4gICAgaWYgKGNhbGxiYWNrcykge1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGNhbGxiYWNrcy5zbGljZSgpLmZvckVhY2goZm4gPT4gZm4uY2FsbCh0aGlzLCBldmVudCkpO1xuICAgIH1cbn1cblxuY29uc3QgZGlydHlfY29tcG9uZW50cyA9IFtdO1xuY29uc3QgaW50cm9zID0geyBlbmFibGVkOiBmYWxzZSB9O1xuY29uc3QgYmluZGluZ19jYWxsYmFja3MgPSBbXTtcbmNvbnN0IHJlbmRlcl9jYWxsYmFja3MgPSBbXTtcbmNvbnN0IGZsdXNoX2NhbGxiYWNrcyA9IFtdO1xuY29uc3QgcmVzb2x2ZWRfcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSgpO1xubGV0IHVwZGF0ZV9zY2hlZHVsZWQgPSBmYWxzZTtcbmZ1bmN0aW9uIHNjaGVkdWxlX3VwZGF0ZSgpIHtcbiAgICBpZiAoIXVwZGF0ZV9zY2hlZHVsZWQpIHtcbiAgICAgICAgdXBkYXRlX3NjaGVkdWxlZCA9IHRydWU7XG4gICAgICAgIHJlc29sdmVkX3Byb21pc2UudGhlbihmbHVzaCk7XG4gICAgfVxufVxuZnVuY3Rpb24gdGljaygpIHtcbiAgICBzY2hlZHVsZV91cGRhdGUoKTtcbiAgICByZXR1cm4gcmVzb2x2ZWRfcHJvbWlzZTtcbn1cbmZ1bmN0aW9uIGFkZF9yZW5kZXJfY2FsbGJhY2soZm4pIHtcbiAgICByZW5kZXJfY2FsbGJhY2tzLnB1c2goZm4pO1xufVxuZnVuY3Rpb24gYWRkX2ZsdXNoX2NhbGxiYWNrKGZuKSB7XG4gICAgZmx1c2hfY2FsbGJhY2tzLnB1c2goZm4pO1xufVxubGV0IGZsdXNoaW5nID0gZmFsc2U7XG5jb25zdCBzZWVuX2NhbGxiYWNrcyA9IG5ldyBTZXQoKTtcbmZ1bmN0aW9uIGZsdXNoKCkge1xuICAgIGlmIChmbHVzaGluZylcbiAgICAgICAgcmV0dXJuO1xuICAgIGZsdXNoaW5nID0gdHJ1ZTtcbiAgICBkbyB7XG4gICAgICAgIC8vIGZpcnN0LCBjYWxsIGJlZm9yZVVwZGF0ZSBmdW5jdGlvbnNcbiAgICAgICAgLy8gYW5kIHVwZGF0ZSBjb21wb25lbnRzXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGlydHlfY29tcG9uZW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgY29uc3QgY29tcG9uZW50ID0gZGlydHlfY29tcG9uZW50c1tpXTtcbiAgICAgICAgICAgIHNldF9jdXJyZW50X2NvbXBvbmVudChjb21wb25lbnQpO1xuICAgICAgICAgICAgdXBkYXRlKGNvbXBvbmVudC4kJCk7XG4gICAgICAgIH1cbiAgICAgICAgc2V0X2N1cnJlbnRfY29tcG9uZW50KG51bGwpO1xuICAgICAgICBkaXJ0eV9jb21wb25lbnRzLmxlbmd0aCA9IDA7XG4gICAgICAgIHdoaWxlIChiaW5kaW5nX2NhbGxiYWNrcy5sZW5ndGgpXG4gICAgICAgICAgICBiaW5kaW5nX2NhbGxiYWNrcy5wb3AoKSgpO1xuICAgICAgICAvLyB0aGVuLCBvbmNlIGNvbXBvbmVudHMgYXJlIHVwZGF0ZWQsIGNhbGxcbiAgICAgICAgLy8gYWZ0ZXJVcGRhdGUgZnVuY3Rpb25zLiBUaGlzIG1heSBjYXVzZVxuICAgICAgICAvLyBzdWJzZXF1ZW50IHVwZGF0ZXMuLi5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByZW5kZXJfY2FsbGJhY2tzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICBjb25zdCBjYWxsYmFjayA9IHJlbmRlcl9jYWxsYmFja3NbaV07XG4gICAgICAgICAgICBpZiAoIXNlZW5fY2FsbGJhY2tzLmhhcyhjYWxsYmFjaykpIHtcbiAgICAgICAgICAgICAgICAvLyAuLi5zbyBndWFyZCBhZ2FpbnN0IGluZmluaXRlIGxvb3BzXG4gICAgICAgICAgICAgICAgc2Vlbl9jYWxsYmFja3MuYWRkKGNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJlbmRlcl9jYWxsYmFja3MubGVuZ3RoID0gMDtcbiAgICB9IHdoaWxlIChkaXJ0eV9jb21wb25lbnRzLmxlbmd0aCk7XG4gICAgd2hpbGUgKGZsdXNoX2NhbGxiYWNrcy5sZW5ndGgpIHtcbiAgICAgICAgZmx1c2hfY2FsbGJhY2tzLnBvcCgpKCk7XG4gICAgfVxuICAgIHVwZGF0ZV9zY2hlZHVsZWQgPSBmYWxzZTtcbiAgICBmbHVzaGluZyA9IGZhbHNlO1xuICAgIHNlZW5fY2FsbGJhY2tzLmNsZWFyKCk7XG59XG5mdW5jdGlvbiB1cGRhdGUoJCQpIHtcbiAgICBpZiAoJCQuZnJhZ21lbnQgIT09IG51bGwpIHtcbiAgICAgICAgJCQudXBkYXRlKCk7XG4gICAgICAgIHJ1bl9hbGwoJCQuYmVmb3JlX3VwZGF0ZSk7XG4gICAgICAgIGNvbnN0IGRpcnR5ID0gJCQuZGlydHk7XG4gICAgICAgICQkLmRpcnR5ID0gWy0xXTtcbiAgICAgICAgJCQuZnJhZ21lbnQgJiYgJCQuZnJhZ21lbnQucCgkJC5jdHgsIGRpcnR5KTtcbiAgICAgICAgJCQuYWZ0ZXJfdXBkYXRlLmZvckVhY2goYWRkX3JlbmRlcl9jYWxsYmFjayk7XG4gICAgfVxufVxuXG5sZXQgcHJvbWlzZTtcbmZ1bmN0aW9uIHdhaXQoKSB7XG4gICAgaWYgKCFwcm9taXNlKSB7XG4gICAgICAgIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgICAgcHJvbWlzZS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIHByb21pc2UgPSBudWxsO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHByb21pc2U7XG59XG5mdW5jdGlvbiBkaXNwYXRjaChub2RlLCBkaXJlY3Rpb24sIGtpbmQpIHtcbiAgICBub2RlLmRpc3BhdGNoRXZlbnQoY3VzdG9tX2V2ZW50KGAke2RpcmVjdGlvbiA/ICdpbnRybycgOiAnb3V0cm8nfSR7a2luZH1gKSk7XG59XG5jb25zdCBvdXRyb2luZyA9IG5ldyBTZXQoKTtcbmxldCBvdXRyb3M7XG5mdW5jdGlvbiBncm91cF9vdXRyb3MoKSB7XG4gICAgb3V0cm9zID0ge1xuICAgICAgICByOiAwLFxuICAgICAgICBjOiBbXSxcbiAgICAgICAgcDogb3V0cm9zIC8vIHBhcmVudCBncm91cFxuICAgIH07XG59XG5mdW5jdGlvbiBjaGVja19vdXRyb3MoKSB7XG4gICAgaWYgKCFvdXRyb3Mucikge1xuICAgICAgICBydW5fYWxsKG91dHJvcy5jKTtcbiAgICB9XG4gICAgb3V0cm9zID0gb3V0cm9zLnA7XG59XG5mdW5jdGlvbiB0cmFuc2l0aW9uX2luKGJsb2NrLCBsb2NhbCkge1xuICAgIGlmIChibG9jayAmJiBibG9jay5pKSB7XG4gICAgICAgIG91dHJvaW5nLmRlbGV0ZShibG9jayk7XG4gICAgICAgIGJsb2NrLmkobG9jYWwpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHRyYW5zaXRpb25fb3V0KGJsb2NrLCBsb2NhbCwgZGV0YWNoLCBjYWxsYmFjaykge1xuICAgIGlmIChibG9jayAmJiBibG9jay5vKSB7XG4gICAgICAgIGlmIChvdXRyb2luZy5oYXMoYmxvY2spKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBvdXRyb2luZy5hZGQoYmxvY2spO1xuICAgICAgICBvdXRyb3MuYy5wdXNoKCgpID0+IHtcbiAgICAgICAgICAgIG91dHJvaW5nLmRlbGV0ZShibG9jayk7XG4gICAgICAgICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICBpZiAoZGV0YWNoKVxuICAgICAgICAgICAgICAgICAgICBibG9jay5kKDEpO1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBibG9jay5vKGxvY2FsKTtcbiAgICB9XG59XG5jb25zdCBudWxsX3RyYW5zaXRpb24gPSB7IGR1cmF0aW9uOiAwIH07XG5mdW5jdGlvbiBjcmVhdGVfaW5fdHJhbnNpdGlvbihub2RlLCBmbiwgcGFyYW1zKSB7XG4gICAgbGV0IGNvbmZpZyA9IGZuKG5vZGUsIHBhcmFtcyk7XG4gICAgbGV0IHJ1bm5pbmcgPSBmYWxzZTtcbiAgICBsZXQgYW5pbWF0aW9uX25hbWU7XG4gICAgbGV0IHRhc2s7XG4gICAgbGV0IHVpZCA9IDA7XG4gICAgZnVuY3Rpb24gY2xlYW51cCgpIHtcbiAgICAgICAgaWYgKGFuaW1hdGlvbl9uYW1lKVxuICAgICAgICAgICAgZGVsZXRlX3J1bGUobm9kZSwgYW5pbWF0aW9uX25hbWUpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBnbygpIHtcbiAgICAgICAgY29uc3QgeyBkZWxheSA9IDAsIGR1cmF0aW9uID0gMzAwLCBlYXNpbmcgPSBpZGVudGl0eSwgdGljayA9IG5vb3AsIGNzcyB9ID0gY29uZmlnIHx8IG51bGxfdHJhbnNpdGlvbjtcbiAgICAgICAgaWYgKGNzcylcbiAgICAgICAgICAgIGFuaW1hdGlvbl9uYW1lID0gY3JlYXRlX3J1bGUobm9kZSwgMCwgMSwgZHVyYXRpb24sIGRlbGF5LCBlYXNpbmcsIGNzcywgdWlkKyspO1xuICAgICAgICB0aWNrKDAsIDEpO1xuICAgICAgICBjb25zdCBzdGFydF90aW1lID0gbm93KCkgKyBkZWxheTtcbiAgICAgICAgY29uc3QgZW5kX3RpbWUgPSBzdGFydF90aW1lICsgZHVyYXRpb247XG4gICAgICAgIGlmICh0YXNrKVxuICAgICAgICAgICAgdGFzay5hYm9ydCgpO1xuICAgICAgICBydW5uaW5nID0gdHJ1ZTtcbiAgICAgICAgYWRkX3JlbmRlcl9jYWxsYmFjaygoKSA9PiBkaXNwYXRjaChub2RlLCB0cnVlLCAnc3RhcnQnKSk7XG4gICAgICAgIHRhc2sgPSBsb29wKG5vdyA9PiB7XG4gICAgICAgICAgICBpZiAocnVubmluZykge1xuICAgICAgICAgICAgICAgIGlmIChub3cgPj0gZW5kX3RpbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGljaygxLCAwKTtcbiAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2gobm9kZSwgdHJ1ZSwgJ2VuZCcpO1xuICAgICAgICAgICAgICAgICAgICBjbGVhbnVwKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBydW5uaW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChub3cgPj0gc3RhcnRfdGltZSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0ID0gZWFzaW5nKChub3cgLSBzdGFydF90aW1lKSAvIGR1cmF0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgdGljayh0LCAxIC0gdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJ1bm5pbmc7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBsZXQgc3RhcnRlZCA9IGZhbHNlO1xuICAgIHJldHVybiB7XG4gICAgICAgIHN0YXJ0KCkge1xuICAgICAgICAgICAgaWYgKHN0YXJ0ZWQpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgZGVsZXRlX3J1bGUobm9kZSk7XG4gICAgICAgICAgICBpZiAoaXNfZnVuY3Rpb24oY29uZmlnKSkge1xuICAgICAgICAgICAgICAgIGNvbmZpZyA9IGNvbmZpZygpO1xuICAgICAgICAgICAgICAgIHdhaXQoKS50aGVuKGdvKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGdvKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGludmFsaWRhdGUoKSB7XG4gICAgICAgICAgICBzdGFydGVkID0gZmFsc2U7XG4gICAgICAgIH0sXG4gICAgICAgIGVuZCgpIHtcbiAgICAgICAgICAgIGlmIChydW5uaW5nKSB7XG4gICAgICAgICAgICAgICAgY2xlYW51cCgpO1xuICAgICAgICAgICAgICAgIHJ1bm5pbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG59XG5mdW5jdGlvbiBjcmVhdGVfb3V0X3RyYW5zaXRpb24obm9kZSwgZm4sIHBhcmFtcykge1xuICAgIGxldCBjb25maWcgPSBmbihub2RlLCBwYXJhbXMpO1xuICAgIGxldCBydW5uaW5nID0gdHJ1ZTtcbiAgICBsZXQgYW5pbWF0aW9uX25hbWU7XG4gICAgY29uc3QgZ3JvdXAgPSBvdXRyb3M7XG4gICAgZ3JvdXAuciArPSAxO1xuICAgIGZ1bmN0aW9uIGdvKCkge1xuICAgICAgICBjb25zdCB7IGRlbGF5ID0gMCwgZHVyYXRpb24gPSAzMDAsIGVhc2luZyA9IGlkZW50aXR5LCB0aWNrID0gbm9vcCwgY3NzIH0gPSBjb25maWcgfHwgbnVsbF90cmFuc2l0aW9uO1xuICAgICAgICBpZiAoY3NzKVxuICAgICAgICAgICAgYW5pbWF0aW9uX25hbWUgPSBjcmVhdGVfcnVsZShub2RlLCAxLCAwLCBkdXJhdGlvbiwgZGVsYXksIGVhc2luZywgY3NzKTtcbiAgICAgICAgY29uc3Qgc3RhcnRfdGltZSA9IG5vdygpICsgZGVsYXk7XG4gICAgICAgIGNvbnN0IGVuZF90aW1lID0gc3RhcnRfdGltZSArIGR1cmF0aW9uO1xuICAgICAgICBhZGRfcmVuZGVyX2NhbGxiYWNrKCgpID0+IGRpc3BhdGNoKG5vZGUsIGZhbHNlLCAnc3RhcnQnKSk7XG4gICAgICAgIGxvb3Aobm93ID0+IHtcbiAgICAgICAgICAgIGlmIChydW5uaW5nKSB7XG4gICAgICAgICAgICAgICAgaWYgKG5vdyA+PSBlbmRfdGltZSkge1xuICAgICAgICAgICAgICAgICAgICB0aWNrKDAsIDEpO1xuICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaChub2RlLCBmYWxzZSwgJ2VuZCcpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIS0tZ3JvdXAucikge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhpcyB3aWxsIHJlc3VsdCBpbiBgZW5kKClgIGJlaW5nIGNhbGxlZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNvIHdlIGRvbid0IG5lZWQgdG8gY2xlYW4gdXAgaGVyZVxuICAgICAgICAgICAgICAgICAgICAgICAgcnVuX2FsbChncm91cC5jKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChub3cgPj0gc3RhcnRfdGltZSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0ID0gZWFzaW5nKChub3cgLSBzdGFydF90aW1lKSAvIGR1cmF0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgdGljaygxIC0gdCwgdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJ1bm5pbmc7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoaXNfZnVuY3Rpb24oY29uZmlnKSkge1xuICAgICAgICB3YWl0KCkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICBjb25maWcgPSBjb25maWcoKTtcbiAgICAgICAgICAgIGdvKCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZ28oKTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZW5kKHJlc2V0KSB7XG4gICAgICAgICAgICBpZiAocmVzZXQgJiYgY29uZmlnLnRpY2spIHtcbiAgICAgICAgICAgICAgICBjb25maWcudGljaygxLCAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChydW5uaW5nKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFuaW1hdGlvbl9uYW1lKVxuICAgICAgICAgICAgICAgICAgICBkZWxldGVfcnVsZShub2RlLCBhbmltYXRpb25fbmFtZSk7XG4gICAgICAgICAgICAgICAgcnVubmluZyA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9iaWRpcmVjdGlvbmFsX3RyYW5zaXRpb24obm9kZSwgZm4sIHBhcmFtcywgaW50cm8pIHtcbiAgICBsZXQgY29uZmlnID0gZm4obm9kZSwgcGFyYW1zKTtcbiAgICBsZXQgdCA9IGludHJvID8gMCA6IDE7XG4gICAgbGV0IHJ1bm5pbmdfcHJvZ3JhbSA9IG51bGw7XG4gICAgbGV0IHBlbmRpbmdfcHJvZ3JhbSA9IG51bGw7XG4gICAgbGV0IGFuaW1hdGlvbl9uYW1lID0gbnVsbDtcbiAgICBmdW5jdGlvbiBjbGVhcl9hbmltYXRpb24oKSB7XG4gICAgICAgIGlmIChhbmltYXRpb25fbmFtZSlcbiAgICAgICAgICAgIGRlbGV0ZV9ydWxlKG5vZGUsIGFuaW1hdGlvbl9uYW1lKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gaW5pdChwcm9ncmFtLCBkdXJhdGlvbikge1xuICAgICAgICBjb25zdCBkID0gcHJvZ3JhbS5iIC0gdDtcbiAgICAgICAgZHVyYXRpb24gKj0gTWF0aC5hYnMoZCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBhOiB0LFxuICAgICAgICAgICAgYjogcHJvZ3JhbS5iLFxuICAgICAgICAgICAgZCxcbiAgICAgICAgICAgIGR1cmF0aW9uLFxuICAgICAgICAgICAgc3RhcnQ6IHByb2dyYW0uc3RhcnQsXG4gICAgICAgICAgICBlbmQ6IHByb2dyYW0uc3RhcnQgKyBkdXJhdGlvbixcbiAgICAgICAgICAgIGdyb3VwOiBwcm9ncmFtLmdyb3VwXG4gICAgICAgIH07XG4gICAgfVxuICAgIGZ1bmN0aW9uIGdvKGIpIHtcbiAgICAgICAgY29uc3QgeyBkZWxheSA9IDAsIGR1cmF0aW9uID0gMzAwLCBlYXNpbmcgPSBpZGVudGl0eSwgdGljayA9IG5vb3AsIGNzcyB9ID0gY29uZmlnIHx8IG51bGxfdHJhbnNpdGlvbjtcbiAgICAgICAgY29uc3QgcHJvZ3JhbSA9IHtcbiAgICAgICAgICAgIHN0YXJ0OiBub3coKSArIGRlbGF5LFxuICAgICAgICAgICAgYlxuICAgICAgICB9O1xuICAgICAgICBpZiAoIWIpIHtcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmUgdG9kbzogaW1wcm92ZSB0eXBpbmdzXG4gICAgICAgICAgICBwcm9ncmFtLmdyb3VwID0gb3V0cm9zO1xuICAgICAgICAgICAgb3V0cm9zLnIgKz0gMTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocnVubmluZ19wcm9ncmFtIHx8IHBlbmRpbmdfcHJvZ3JhbSkge1xuICAgICAgICAgICAgcGVuZGluZ19wcm9ncmFtID0gcHJvZ3JhbTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIGlmIHRoaXMgaXMgYW4gaW50cm8sIGFuZCB0aGVyZSdzIGEgZGVsYXksIHdlIG5lZWQgdG8gZG9cbiAgICAgICAgICAgIC8vIGFuIGluaXRpYWwgdGljayBhbmQvb3IgYXBwbHkgQ1NTIGFuaW1hdGlvbiBpbW1lZGlhdGVseVxuICAgICAgICAgICAgaWYgKGNzcykge1xuICAgICAgICAgICAgICAgIGNsZWFyX2FuaW1hdGlvbigpO1xuICAgICAgICAgICAgICAgIGFuaW1hdGlvbl9uYW1lID0gY3JlYXRlX3J1bGUobm9kZSwgdCwgYiwgZHVyYXRpb24sIGRlbGF5LCBlYXNpbmcsIGNzcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYilcbiAgICAgICAgICAgICAgICB0aWNrKDAsIDEpO1xuICAgICAgICAgICAgcnVubmluZ19wcm9ncmFtID0gaW5pdChwcm9ncmFtLCBkdXJhdGlvbik7XG4gICAgICAgICAgICBhZGRfcmVuZGVyX2NhbGxiYWNrKCgpID0+IGRpc3BhdGNoKG5vZGUsIGIsICdzdGFydCcpKTtcbiAgICAgICAgICAgIGxvb3Aobm93ID0+IHtcbiAgICAgICAgICAgICAgICBpZiAocGVuZGluZ19wcm9ncmFtICYmIG5vdyA+IHBlbmRpbmdfcHJvZ3JhbS5zdGFydCkge1xuICAgICAgICAgICAgICAgICAgICBydW5uaW5nX3Byb2dyYW0gPSBpbml0KHBlbmRpbmdfcHJvZ3JhbSwgZHVyYXRpb24pO1xuICAgICAgICAgICAgICAgICAgICBwZW5kaW5nX3Byb2dyYW0gPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaChub2RlLCBydW5uaW5nX3Byb2dyYW0uYiwgJ3N0YXJ0Jyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyX2FuaW1hdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uX25hbWUgPSBjcmVhdGVfcnVsZShub2RlLCB0LCBydW5uaW5nX3Byb2dyYW0uYiwgcnVubmluZ19wcm9ncmFtLmR1cmF0aW9uLCAwLCBlYXNpbmcsIGNvbmZpZy5jc3MpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChydW5uaW5nX3Byb2dyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5vdyA+PSBydW5uaW5nX3Byb2dyYW0uZW5kKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aWNrKHQgPSBydW5uaW5nX3Byb2dyYW0uYiwgMSAtIHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGF0Y2gobm9kZSwgcnVubmluZ19wcm9ncmFtLmIsICdlbmQnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcGVuZGluZ19wcm9ncmFtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2UncmUgZG9uZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChydW5uaW5nX3Byb2dyYW0uYikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpbnRybyBcdTIwMTQgd2UgY2FuIHRpZHkgdXAgaW1tZWRpYXRlbHlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJfYW5pbWF0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBvdXRybyBcdTIwMTQgbmVlZHMgdG8gYmUgY29vcmRpbmF0ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEtLXJ1bm5pbmdfcHJvZ3JhbS5ncm91cC5yKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcnVuX2FsbChydW5uaW5nX3Byb2dyYW0uZ3JvdXAuYyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcnVubmluZ19wcm9ncmFtID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChub3cgPj0gcnVubmluZ19wcm9ncmFtLnN0YXJ0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwID0gbm93IC0gcnVubmluZ19wcm9ncmFtLnN0YXJ0O1xuICAgICAgICAgICAgICAgICAgICAgICAgdCA9IHJ1bm5pbmdfcHJvZ3JhbS5hICsgcnVubmluZ19wcm9ncmFtLmQgKiBlYXNpbmcocCAvIHJ1bm5pbmdfcHJvZ3JhbS5kdXJhdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aWNrKHQsIDEgLSB0KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gISEocnVubmluZ19wcm9ncmFtIHx8IHBlbmRpbmdfcHJvZ3JhbSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBydW4oYikge1xuICAgICAgICAgICAgaWYgKGlzX2Z1bmN0aW9uKGNvbmZpZykpIHtcbiAgICAgICAgICAgICAgICB3YWl0KCkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICAgICAgICAgICAgY29uZmlnID0gY29uZmlnKCk7XG4gICAgICAgICAgICAgICAgICAgIGdvKGIpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZ28oYik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGVuZCgpIHtcbiAgICAgICAgICAgIGNsZWFyX2FuaW1hdGlvbigpO1xuICAgICAgICAgICAgcnVubmluZ19wcm9ncmFtID0gcGVuZGluZ19wcm9ncmFtID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH07XG59XG5cbmZ1bmN0aW9uIGhhbmRsZV9wcm9taXNlKHByb21pc2UsIGluZm8pIHtcbiAgICBjb25zdCB0b2tlbiA9IGluZm8udG9rZW4gPSB7fTtcbiAgICBmdW5jdGlvbiB1cGRhdGUodHlwZSwgaW5kZXgsIGtleSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKGluZm8udG9rZW4gIT09IHRva2VuKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBpbmZvLnJlc29sdmVkID0gdmFsdWU7XG4gICAgICAgIGxldCBjaGlsZF9jdHggPSBpbmZvLmN0eDtcbiAgICAgICAgaWYgKGtleSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjaGlsZF9jdHggPSBjaGlsZF9jdHguc2xpY2UoKTtcbiAgICAgICAgICAgIGNoaWxkX2N0eFtrZXldID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYmxvY2sgPSB0eXBlICYmIChpbmZvLmN1cnJlbnQgPSB0eXBlKShjaGlsZF9jdHgpO1xuICAgICAgICBsZXQgbmVlZHNfZmx1c2ggPSBmYWxzZTtcbiAgICAgICAgaWYgKGluZm8uYmxvY2spIHtcbiAgICAgICAgICAgIGlmIChpbmZvLmJsb2Nrcykge1xuICAgICAgICAgICAgICAgIGluZm8uYmxvY2tzLmZvckVhY2goKGJsb2NrLCBpKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpICE9PSBpbmRleCAmJiBibG9jaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXBfb3V0cm9zKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uX291dChibG9jaywgMSwgMSwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmZvLmJsb2Nrc1tpXSA9PT0gYmxvY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5mby5ibG9ja3NbaV0gPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tfb3V0cm9zKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGluZm8uYmxvY2suZCgxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJsb2NrLmMoKTtcbiAgICAgICAgICAgIHRyYW5zaXRpb25faW4oYmxvY2ssIDEpO1xuICAgICAgICAgICAgYmxvY2subShpbmZvLm1vdW50KCksIGluZm8uYW5jaG9yKTtcbiAgICAgICAgICAgIG5lZWRzX2ZsdXNoID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpbmZvLmJsb2NrID0gYmxvY2s7XG4gICAgICAgIGlmIChpbmZvLmJsb2NrcylcbiAgICAgICAgICAgIGluZm8uYmxvY2tzW2luZGV4XSA9IGJsb2NrO1xuICAgICAgICBpZiAobmVlZHNfZmx1c2gpIHtcbiAgICAgICAgICAgIGZsdXNoKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzX3Byb21pc2UocHJvbWlzZSkpIHtcbiAgICAgICAgY29uc3QgY3VycmVudF9jb21wb25lbnQgPSBnZXRfY3VycmVudF9jb21wb25lbnQoKTtcbiAgICAgICAgcHJvbWlzZS50aGVuKHZhbHVlID0+IHtcbiAgICAgICAgICAgIHNldF9jdXJyZW50X2NvbXBvbmVudChjdXJyZW50X2NvbXBvbmVudCk7XG4gICAgICAgICAgICB1cGRhdGUoaW5mby50aGVuLCAxLCBpbmZvLnZhbHVlLCB2YWx1ZSk7XG4gICAgICAgICAgICBzZXRfY3VycmVudF9jb21wb25lbnQobnVsbCk7XG4gICAgICAgIH0sIGVycm9yID0+IHtcbiAgICAgICAgICAgIHNldF9jdXJyZW50X2NvbXBvbmVudChjdXJyZW50X2NvbXBvbmVudCk7XG4gICAgICAgICAgICB1cGRhdGUoaW5mby5jYXRjaCwgMiwgaW5mby5lcnJvciwgZXJyb3IpO1xuICAgICAgICAgICAgc2V0X2N1cnJlbnRfY29tcG9uZW50KG51bGwpO1xuICAgICAgICAgICAgaWYgKCFpbmZvLmhhc0NhdGNoKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICAvLyBpZiB3ZSBwcmV2aW91c2x5IGhhZCBhIHRoZW4vY2F0Y2ggYmxvY2ssIGRlc3Ryb3kgaXRcbiAgICAgICAgaWYgKGluZm8uY3VycmVudCAhPT0gaW5mby5wZW5kaW5nKSB7XG4gICAgICAgICAgICB1cGRhdGUoaW5mby5wZW5kaW5nLCAwKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBpZiAoaW5mby5jdXJyZW50ICE9PSBpbmZvLnRoZW4pIHtcbiAgICAgICAgICAgIHVwZGF0ZShpbmZvLnRoZW4sIDEsIGluZm8udmFsdWUsIHByb21pc2UpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaW5mby5yZXNvbHZlZCA9IHByb21pc2U7XG4gICAgfVxufVxuZnVuY3Rpb24gdXBkYXRlX2F3YWl0X2Jsb2NrX2JyYW5jaChpbmZvLCBjdHgsIGRpcnR5KSB7XG4gICAgY29uc3QgY2hpbGRfY3R4ID0gY3R4LnNsaWNlKCk7XG4gICAgY29uc3QgeyByZXNvbHZlZCB9ID0gaW5mbztcbiAgICBpZiAoaW5mby5jdXJyZW50ID09PSBpbmZvLnRoZW4pIHtcbiAgICAgICAgY2hpbGRfY3R4W2luZm8udmFsdWVdID0gcmVzb2x2ZWQ7XG4gICAgfVxuICAgIGlmIChpbmZvLmN1cnJlbnQgPT09IGluZm8uY2F0Y2gpIHtcbiAgICAgICAgY2hpbGRfY3R4W2luZm8uZXJyb3JdID0gcmVzb2x2ZWQ7XG4gICAgfVxuICAgIGluZm8uYmxvY2sucChjaGlsZF9jdHgsIGRpcnR5KTtcbn1cblxuY29uc3QgZ2xvYmFscyA9ICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJ1xuICAgID8gd2luZG93XG4gICAgOiB0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAgPyBnbG9iYWxUaGlzXG4gICAgICAgIDogZ2xvYmFsKTtcblxuZnVuY3Rpb24gZGVzdHJveV9ibG9jayhibG9jaywgbG9va3VwKSB7XG4gICAgYmxvY2suZCgxKTtcbiAgICBsb29rdXAuZGVsZXRlKGJsb2NrLmtleSk7XG59XG5mdW5jdGlvbiBvdXRyb19hbmRfZGVzdHJveV9ibG9jayhibG9jaywgbG9va3VwKSB7XG4gICAgdHJhbnNpdGlvbl9vdXQoYmxvY2ssIDEsIDEsICgpID0+IHtcbiAgICAgICAgbG9va3VwLmRlbGV0ZShibG9jay5rZXkpO1xuICAgIH0pO1xufVxuZnVuY3Rpb24gZml4X2FuZF9kZXN0cm95X2Jsb2NrKGJsb2NrLCBsb29rdXApIHtcbiAgICBibG9jay5mKCk7XG4gICAgZGVzdHJveV9ibG9jayhibG9jaywgbG9va3VwKTtcbn1cbmZ1bmN0aW9uIGZpeF9hbmRfb3V0cm9fYW5kX2Rlc3Ryb3lfYmxvY2soYmxvY2ssIGxvb2t1cCkge1xuICAgIGJsb2NrLmYoKTtcbiAgICBvdXRyb19hbmRfZGVzdHJveV9ibG9jayhibG9jaywgbG9va3VwKTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZV9rZXllZF9lYWNoKG9sZF9ibG9ja3MsIGRpcnR5LCBnZXRfa2V5LCBkeW5hbWljLCBjdHgsIGxpc3QsIGxvb2t1cCwgbm9kZSwgZGVzdHJveSwgY3JlYXRlX2VhY2hfYmxvY2ssIG5leHQsIGdldF9jb250ZXh0KSB7XG4gICAgbGV0IG8gPSBvbGRfYmxvY2tzLmxlbmd0aDtcbiAgICBsZXQgbiA9IGxpc3QubGVuZ3RoO1xuICAgIGxldCBpID0gbztcbiAgICBjb25zdCBvbGRfaW5kZXhlcyA9IHt9O1xuICAgIHdoaWxlIChpLS0pXG4gICAgICAgIG9sZF9pbmRleGVzW29sZF9ibG9ja3NbaV0ua2V5XSA9IGk7XG4gICAgY29uc3QgbmV3X2Jsb2NrcyA9IFtdO1xuICAgIGNvbnN0IG5ld19sb29rdXAgPSBuZXcgTWFwKCk7XG4gICAgY29uc3QgZGVsdGFzID0gbmV3IE1hcCgpO1xuICAgIGkgPSBuO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgY29uc3QgY2hpbGRfY3R4ID0gZ2V0X2NvbnRleHQoY3R4LCBsaXN0LCBpKTtcbiAgICAgICAgY29uc3Qga2V5ID0gZ2V0X2tleShjaGlsZF9jdHgpO1xuICAgICAgICBsZXQgYmxvY2sgPSBsb29rdXAuZ2V0KGtleSk7XG4gICAgICAgIGlmICghYmxvY2spIHtcbiAgICAgICAgICAgIGJsb2NrID0gY3JlYXRlX2VhY2hfYmxvY2soa2V5LCBjaGlsZF9jdHgpO1xuICAgICAgICAgICAgYmxvY2suYygpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGR5bmFtaWMpIHtcbiAgICAgICAgICAgIGJsb2NrLnAoY2hpbGRfY3R4LCBkaXJ0eSk7XG4gICAgICAgIH1cbiAgICAgICAgbmV3X2xvb2t1cC5zZXQoa2V5LCBuZXdfYmxvY2tzW2ldID0gYmxvY2spO1xuICAgICAgICBpZiAoa2V5IGluIG9sZF9pbmRleGVzKVxuICAgICAgICAgICAgZGVsdGFzLnNldChrZXksIE1hdGguYWJzKGkgLSBvbGRfaW5kZXhlc1trZXldKSk7XG4gICAgfVxuICAgIGNvbnN0IHdpbGxfbW92ZSA9IG5ldyBTZXQoKTtcbiAgICBjb25zdCBkaWRfbW92ZSA9IG5ldyBTZXQoKTtcbiAgICBmdW5jdGlvbiBpbnNlcnQoYmxvY2spIHtcbiAgICAgICAgdHJhbnNpdGlvbl9pbihibG9jaywgMSk7XG4gICAgICAgIGJsb2NrLm0obm9kZSwgbmV4dCk7XG4gICAgICAgIGxvb2t1cC5zZXQoYmxvY2sua2V5LCBibG9jayk7XG4gICAgICAgIG5leHQgPSBibG9jay5maXJzdDtcbiAgICAgICAgbi0tO1xuICAgIH1cbiAgICB3aGlsZSAobyAmJiBuKSB7XG4gICAgICAgIGNvbnN0IG5ld19ibG9jayA9IG5ld19ibG9ja3NbbiAtIDFdO1xuICAgICAgICBjb25zdCBvbGRfYmxvY2sgPSBvbGRfYmxvY2tzW28gLSAxXTtcbiAgICAgICAgY29uc3QgbmV3X2tleSA9IG5ld19ibG9jay5rZXk7XG4gICAgICAgIGNvbnN0IG9sZF9rZXkgPSBvbGRfYmxvY2sua2V5O1xuICAgICAgICBpZiAobmV3X2Jsb2NrID09PSBvbGRfYmxvY2spIHtcbiAgICAgICAgICAgIC8vIGRvIG5vdGhpbmdcbiAgICAgICAgICAgIG5leHQgPSBuZXdfYmxvY2suZmlyc3Q7XG4gICAgICAgICAgICBvLS07XG4gICAgICAgICAgICBuLS07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIW5ld19sb29rdXAuaGFzKG9sZF9rZXkpKSB7XG4gICAgICAgICAgICAvLyByZW1vdmUgb2xkIGJsb2NrXG4gICAgICAgICAgICBkZXN0cm95KG9sZF9ibG9jaywgbG9va3VwKTtcbiAgICAgICAgICAgIG8tLTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghbG9va3VwLmhhcyhuZXdfa2V5KSB8fCB3aWxsX21vdmUuaGFzKG5ld19rZXkpKSB7XG4gICAgICAgICAgICBpbnNlcnQobmV3X2Jsb2NrKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChkaWRfbW92ZS5oYXMob2xkX2tleSkpIHtcbiAgICAgICAgICAgIG8tLTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChkZWx0YXMuZ2V0KG5ld19rZXkpID4gZGVsdGFzLmdldChvbGRfa2V5KSkge1xuICAgICAgICAgICAgZGlkX21vdmUuYWRkKG5ld19rZXkpO1xuICAgICAgICAgICAgaW5zZXJ0KG5ld19ibG9jayk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB3aWxsX21vdmUuYWRkKG9sZF9rZXkpO1xuICAgICAgICAgICAgby0tO1xuICAgICAgICB9XG4gICAgfVxuICAgIHdoaWxlIChvLS0pIHtcbiAgICAgICAgY29uc3Qgb2xkX2Jsb2NrID0gb2xkX2Jsb2Nrc1tvXTtcbiAgICAgICAgaWYgKCFuZXdfbG9va3VwLmhhcyhvbGRfYmxvY2sua2V5KSlcbiAgICAgICAgICAgIGRlc3Ryb3kob2xkX2Jsb2NrLCBsb29rdXApO1xuICAgIH1cbiAgICB3aGlsZSAobilcbiAgICAgICAgaW5zZXJ0KG5ld19ibG9ja3NbbiAtIDFdKTtcbiAgICByZXR1cm4gbmV3X2Jsb2Nrcztcbn1cbmZ1bmN0aW9uIHZhbGlkYXRlX2VhY2hfa2V5cyhjdHgsIGxpc3QsIGdldF9jb250ZXh0LCBnZXRfa2V5KSB7XG4gICAgY29uc3Qga2V5cyA9IG5ldyBTZXQoKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3Qga2V5ID0gZ2V0X2tleShnZXRfY29udGV4dChjdHgsIGxpc3QsIGkpKTtcbiAgICAgICAgaWYgKGtleXMuaGFzKGtleSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ2Fubm90IGhhdmUgZHVwbGljYXRlIGtleXMgaW4gYSBrZXllZCBlYWNoJyk7XG4gICAgICAgIH1cbiAgICAgICAga2V5cy5hZGQoa2V5KTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGdldF9zcHJlYWRfdXBkYXRlKGxldmVscywgdXBkYXRlcykge1xuICAgIGNvbnN0IHVwZGF0ZSA9IHt9O1xuICAgIGNvbnN0IHRvX251bGxfb3V0ID0ge307XG4gICAgY29uc3QgYWNjb3VudGVkX2ZvciA9IHsgJCRzY29wZTogMSB9O1xuICAgIGxldCBpID0gbGV2ZWxzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIGNvbnN0IG8gPSBsZXZlbHNbaV07XG4gICAgICAgIGNvbnN0IG4gPSB1cGRhdGVzW2ldO1xuICAgICAgICBpZiAobikge1xuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gbykge1xuICAgICAgICAgICAgICAgIGlmICghKGtleSBpbiBuKSlcbiAgICAgICAgICAgICAgICAgICAgdG9fbnVsbF9vdXRba2V5XSA9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBuKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFhY2NvdW50ZWRfZm9yW2tleV0pIHtcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlW2tleV0gPSBuW2tleV07XG4gICAgICAgICAgICAgICAgICAgIGFjY291bnRlZF9mb3Jba2V5XSA9IDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV2ZWxzW2ldID0gbjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIG8pIHtcbiAgICAgICAgICAgICAgICBhY2NvdW50ZWRfZm9yW2tleV0gPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGZvciAoY29uc3Qga2V5IGluIHRvX251bGxfb3V0KSB7XG4gICAgICAgIGlmICghKGtleSBpbiB1cGRhdGUpKVxuICAgICAgICAgICAgdXBkYXRlW2tleV0gPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHJldHVybiB1cGRhdGU7XG59XG5mdW5jdGlvbiBnZXRfc3ByZWFkX29iamVjdChzcHJlYWRfcHJvcHMpIHtcbiAgICByZXR1cm4gdHlwZW9mIHNwcmVhZF9wcm9wcyA9PT0gJ29iamVjdCcgJiYgc3ByZWFkX3Byb3BzICE9PSBudWxsID8gc3ByZWFkX3Byb3BzIDoge307XG59XG5cbi8vIHNvdXJjZTogaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvaW5kaWNlcy5odG1sXG5jb25zdCBib29sZWFuX2F0dHJpYnV0ZXMgPSBuZXcgU2V0KFtcbiAgICAnYWxsb3dmdWxsc2NyZWVuJyxcbiAgICAnYWxsb3dwYXltZW50cmVxdWVzdCcsXG4gICAgJ2FzeW5jJyxcbiAgICAnYXV0b2ZvY3VzJyxcbiAgICAnYXV0b3BsYXknLFxuICAgICdjaGVja2VkJyxcbiAgICAnY29udHJvbHMnLFxuICAgICdkZWZhdWx0JyxcbiAgICAnZGVmZXInLFxuICAgICdkaXNhYmxlZCcsXG4gICAgJ2Zvcm1ub3ZhbGlkYXRlJyxcbiAgICAnaGlkZGVuJyxcbiAgICAnaXNtYXAnLFxuICAgICdsb29wJyxcbiAgICAnbXVsdGlwbGUnLFxuICAgICdtdXRlZCcsXG4gICAgJ25vbW9kdWxlJyxcbiAgICAnbm92YWxpZGF0ZScsXG4gICAgJ29wZW4nLFxuICAgICdwbGF5c2lubGluZScsXG4gICAgJ3JlYWRvbmx5JyxcbiAgICAncmVxdWlyZWQnLFxuICAgICdyZXZlcnNlZCcsXG4gICAgJ3NlbGVjdGVkJ1xuXSk7XG5cbmNvbnN0IGludmFsaWRfYXR0cmlidXRlX25hbWVfY2hhcmFjdGVyID0gL1tcXHMnXCI+Lz1cXHV7RkREMH0tXFx1e0ZERUZ9XFx1e0ZGRkV9XFx1e0ZGRkZ9XFx1ezFGRkZFfVxcdXsxRkZGRn1cXHV7MkZGRkV9XFx1ezJGRkZGfVxcdXszRkZGRX1cXHV7M0ZGRkZ9XFx1ezRGRkZFfVxcdXs0RkZGRn1cXHV7NUZGRkV9XFx1ezVGRkZGfVxcdXs2RkZGRX1cXHV7NkZGRkZ9XFx1ezdGRkZFfVxcdXs3RkZGRn1cXHV7OEZGRkV9XFx1ezhGRkZGfVxcdXs5RkZGRX1cXHV7OUZGRkZ9XFx1e0FGRkZFfVxcdXtBRkZGRn1cXHV7QkZGRkV9XFx1e0JGRkZGfVxcdXtDRkZGRX1cXHV7Q0ZGRkZ9XFx1e0RGRkZFfVxcdXtERkZGRn1cXHV7RUZGRkV9XFx1e0VGRkZGfVxcdXtGRkZGRX1cXHV7RkZGRkZ9XFx1ezEwRkZGRX1cXHV7MTBGRkZGfV0vdTtcbi8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI2F0dHJpYnV0ZXMtMlxuLy8gaHR0cHM6Ly9pbmZyYS5zcGVjLndoYXR3Zy5vcmcvI25vbmNoYXJhY3RlclxuZnVuY3Rpb24gc3ByZWFkKGFyZ3MsIGNsYXNzZXNfdG9fYWRkKSB7XG4gICAgY29uc3QgYXR0cmlidXRlcyA9IE9iamVjdC5hc3NpZ24oe30sIC4uLmFyZ3MpO1xuICAgIGlmIChjbGFzc2VzX3RvX2FkZCkge1xuICAgICAgICBpZiAoYXR0cmlidXRlcy5jbGFzcyA9PSBudWxsKSB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVzLmNsYXNzID0gY2xhc3Nlc190b19hZGQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBhdHRyaWJ1dGVzLmNsYXNzICs9ICcgJyArIGNsYXNzZXNfdG9fYWRkO1xuICAgICAgICB9XG4gICAgfVxuICAgIGxldCBzdHIgPSAnJztcbiAgICBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5mb3JFYWNoKG5hbWUgPT4ge1xuICAgICAgICBpZiAoaW52YWxpZF9hdHRyaWJ1dGVfbmFtZV9jaGFyYWN0ZXIudGVzdChuYW1lKSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBhdHRyaWJ1dGVzW25hbWVdO1xuICAgICAgICBpZiAodmFsdWUgPT09IHRydWUpXG4gICAgICAgICAgICBzdHIgKz0gJyAnICsgbmFtZTtcbiAgICAgICAgZWxzZSBpZiAoYm9vbGVhbl9hdHRyaWJ1dGVzLmhhcyhuYW1lLnRvTG93ZXJDYXNlKCkpKSB7XG4gICAgICAgICAgICBpZiAodmFsdWUpXG4gICAgICAgICAgICAgICAgc3RyICs9ICcgJyArIG5hbWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgc3RyICs9IGAgJHtuYW1lfT1cIiR7dmFsdWV9XCJgO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHN0cjtcbn1cbmNvbnN0IGVzY2FwZWQgPSB7XG4gICAgJ1wiJzogJyZxdW90OycsXG4gICAgXCInXCI6ICcmIzM5OycsXG4gICAgJyYnOiAnJmFtcDsnLFxuICAgICc8JzogJyZsdDsnLFxuICAgICc+JzogJyZndDsnXG59O1xuZnVuY3Rpb24gZXNjYXBlKGh0bWwpIHtcbiAgICByZXR1cm4gU3RyaW5nKGh0bWwpLnJlcGxhY2UoL1tcIicmPD5dL2csIG1hdGNoID0+IGVzY2FwZWRbbWF0Y2hdKTtcbn1cbmZ1bmN0aW9uIGVzY2FwZV9hdHRyaWJ1dGVfdmFsdWUodmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyA/IGVzY2FwZSh2YWx1ZSkgOiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIGVzY2FwZV9vYmplY3Qob2JqKSB7XG4gICAgY29uc3QgcmVzdWx0ID0ge307XG4gICAgZm9yIChjb25zdCBrZXkgaW4gb2JqKSB7XG4gICAgICAgIHJlc3VsdFtrZXldID0gZXNjYXBlX2F0dHJpYnV0ZV92YWx1ZShvYmpba2V5XSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBlYWNoKGl0ZW1zLCBmbikge1xuICAgIGxldCBzdHIgPSAnJztcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGl0ZW1zLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIHN0ciArPSBmbihpdGVtc1tpXSwgaSk7XG4gICAgfVxuICAgIHJldHVybiBzdHI7XG59XG5jb25zdCBtaXNzaW5nX2NvbXBvbmVudCA9IHtcbiAgICAkJHJlbmRlcjogKCkgPT4gJydcbn07XG5mdW5jdGlvbiB2YWxpZGF0ZV9jb21wb25lbnQoY29tcG9uZW50LCBuYW1lKSB7XG4gICAgaWYgKCFjb21wb25lbnQgfHwgIWNvbXBvbmVudC4kJHJlbmRlcikge1xuICAgICAgICBpZiAobmFtZSA9PT0gJ3N2ZWx0ZTpjb21wb25lbnQnKVxuICAgICAgICAgICAgbmFtZSArPSAnIHRoaXM9ey4uLn0nO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYDwke25hbWV9PiBpcyBub3QgYSB2YWxpZCBTU1IgY29tcG9uZW50LiBZb3UgbWF5IG5lZWQgdG8gcmV2aWV3IHlvdXIgYnVpbGQgY29uZmlnIHRvIGVuc3VyZSB0aGF0IGRlcGVuZGVuY2llcyBhcmUgY29tcGlsZWQsIHJhdGhlciB0aGFuIGltcG9ydGVkIGFzIHByZS1jb21waWxlZCBtb2R1bGVzYCk7XG4gICAgfVxuICAgIHJldHVybiBjb21wb25lbnQ7XG59XG5mdW5jdGlvbiBkZWJ1ZyhmaWxlLCBsaW5lLCBjb2x1bW4sIHZhbHVlcykge1xuICAgIGNvbnNvbGUubG9nKGB7QGRlYnVnfSAke2ZpbGUgPyBmaWxlICsgJyAnIDogJyd9KCR7bGluZX06JHtjb2x1bW59KWApOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcbiAgICBjb25zb2xlLmxvZyh2YWx1ZXMpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcbiAgICByZXR1cm4gJyc7XG59XG5sZXQgb25fZGVzdHJveTtcbmZ1bmN0aW9uIGNyZWF0ZV9zc3JfY29tcG9uZW50KGZuKSB7XG4gICAgZnVuY3Rpb24gJCRyZW5kZXIocmVzdWx0LCBwcm9wcywgYmluZGluZ3MsIHNsb3RzLCBjb250ZXh0KSB7XG4gICAgICAgIGNvbnN0IHBhcmVudF9jb21wb25lbnQgPSBjdXJyZW50X2NvbXBvbmVudDtcbiAgICAgICAgY29uc3QgJCQgPSB7XG4gICAgICAgICAgICBvbl9kZXN0cm95LFxuICAgICAgICAgICAgY29udGV4dDogbmV3IE1hcChwYXJlbnRfY29tcG9uZW50ID8gcGFyZW50X2NvbXBvbmVudC4kJC5jb250ZXh0IDogY29udGV4dCB8fCBbXSksXG4gICAgICAgICAgICAvLyB0aGVzZSB3aWxsIGJlIGltbWVkaWF0ZWx5IGRpc2NhcmRlZFxuICAgICAgICAgICAgb25fbW91bnQ6IFtdLFxuICAgICAgICAgICAgYmVmb3JlX3VwZGF0ZTogW10sXG4gICAgICAgICAgICBhZnRlcl91cGRhdGU6IFtdLFxuICAgICAgICAgICAgY2FsbGJhY2tzOiBibGFua19vYmplY3QoKVxuICAgICAgICB9O1xuICAgICAgICBzZXRfY3VycmVudF9jb21wb25lbnQoeyAkJCB9KTtcbiAgICAgICAgY29uc3QgaHRtbCA9IGZuKHJlc3VsdCwgcHJvcHMsIGJpbmRpbmdzLCBzbG90cyk7XG4gICAgICAgIHNldF9jdXJyZW50X2NvbXBvbmVudChwYXJlbnRfY29tcG9uZW50KTtcbiAgICAgICAgcmV0dXJuIGh0bWw7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHJlbmRlcjogKHByb3BzID0ge30sIHsgJCRzbG90cyA9IHt9LCBjb250ZXh0ID0gbmV3IE1hcCgpIH0gPSB7fSkgPT4ge1xuICAgICAgICAgICAgb25fZGVzdHJveSA9IFtdO1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0geyB0aXRsZTogJycsIGhlYWQ6ICcnLCBjc3M6IG5ldyBTZXQoKSB9O1xuICAgICAgICAgICAgY29uc3QgaHRtbCA9ICQkcmVuZGVyKHJlc3VsdCwgcHJvcHMsIHt9LCAkJHNsb3RzLCBjb250ZXh0KTtcbiAgICAgICAgICAgIHJ1bl9hbGwob25fZGVzdHJveSk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGh0bWwsXG4gICAgICAgICAgICAgICAgY3NzOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvZGU6IEFycmF5LmZyb20ocmVzdWx0LmNzcykubWFwKGNzcyA9PiBjc3MuY29kZSkuam9pbignXFxuJyksXG4gICAgICAgICAgICAgICAgICAgIG1hcDogbnVsbCAvLyBUT0RPXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBoZWFkOiByZXN1bHQudGl0bGUgKyByZXN1bHQuaGVhZFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgJCRyZW5kZXJcbiAgICB9O1xufVxuZnVuY3Rpb24gYWRkX2F0dHJpYnV0ZShuYW1lLCB2YWx1ZSwgYm9vbGVhbikge1xuICAgIGlmICh2YWx1ZSA9PSBudWxsIHx8IChib29sZWFuICYmICF2YWx1ZSkpXG4gICAgICAgIHJldHVybiAnJztcbiAgICByZXR1cm4gYCAke25hbWV9JHt2YWx1ZSA9PT0gdHJ1ZSA/ICcnIDogYD0ke3R5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgPyBKU09OLnN0cmluZ2lmeShlc2NhcGUodmFsdWUpKSA6IGBcIiR7dmFsdWV9XCJgfWB9YDtcbn1cbmZ1bmN0aW9uIGFkZF9jbGFzc2VzKGNsYXNzZXMpIHtcbiAgICByZXR1cm4gY2xhc3NlcyA/IGAgY2xhc3M9XCIke2NsYXNzZXN9XCJgIDogJyc7XG59XG5cbmZ1bmN0aW9uIGJpbmQoY29tcG9uZW50LCBuYW1lLCBjYWxsYmFjaykge1xuICAgIGNvbnN0IGluZGV4ID0gY29tcG9uZW50LiQkLnByb3BzW25hbWVdO1xuICAgIGlmIChpbmRleCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbXBvbmVudC4kJC5ib3VuZFtpbmRleF0gPSBjYWxsYmFjaztcbiAgICAgICAgY2FsbGJhY2soY29tcG9uZW50LiQkLmN0eFtpbmRleF0pO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGNyZWF0ZV9jb21wb25lbnQoYmxvY2spIHtcbiAgICBibG9jayAmJiBibG9jay5jKCk7XG59XG5mdW5jdGlvbiBjbGFpbV9jb21wb25lbnQoYmxvY2ssIHBhcmVudF9ub2Rlcykge1xuICAgIGJsb2NrICYmIGJsb2NrLmwocGFyZW50X25vZGVzKTtcbn1cbmZ1bmN0aW9uIG1vdW50X2NvbXBvbmVudChjb21wb25lbnQsIHRhcmdldCwgYW5jaG9yLCBjdXN0b21FbGVtZW50KSB7XG4gICAgY29uc3QgeyBmcmFnbWVudCwgb25fbW91bnQsIG9uX2Rlc3Ryb3ksIGFmdGVyX3VwZGF0ZSB9ID0gY29tcG9uZW50LiQkO1xuICAgIGZyYWdtZW50ICYmIGZyYWdtZW50Lm0odGFyZ2V0LCBhbmNob3IpO1xuICAgIGlmICghY3VzdG9tRWxlbWVudCkge1xuICAgICAgICAvLyBvbk1vdW50IGhhcHBlbnMgYmVmb3JlIHRoZSBpbml0aWFsIGFmdGVyVXBkYXRlXG4gICAgICAgIGFkZF9yZW5kZXJfY2FsbGJhY2soKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbmV3X29uX2Rlc3Ryb3kgPSBvbl9tb3VudC5tYXAocnVuKS5maWx0ZXIoaXNfZnVuY3Rpb24pO1xuICAgICAgICAgICAgaWYgKG9uX2Rlc3Ryb3kpIHtcbiAgICAgICAgICAgICAgICBvbl9kZXN0cm95LnB1c2goLi4ubmV3X29uX2Rlc3Ryb3kpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gRWRnZSBjYXNlIC0gY29tcG9uZW50IHdhcyBkZXN0cm95ZWQgaW1tZWRpYXRlbHksXG4gICAgICAgICAgICAgICAgLy8gbW9zdCBsaWtlbHkgYXMgYSByZXN1bHQgb2YgYSBiaW5kaW5nIGluaXRpYWxpc2luZ1xuICAgICAgICAgICAgICAgIHJ1bl9hbGwobmV3X29uX2Rlc3Ryb3kpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29tcG9uZW50LiQkLm9uX21vdW50ID0gW107XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBhZnRlcl91cGRhdGUuZm9yRWFjaChhZGRfcmVuZGVyX2NhbGxiYWNrKTtcbn1cbmZ1bmN0aW9uIGRlc3Ryb3lfY29tcG9uZW50KGNvbXBvbmVudCwgZGV0YWNoaW5nKSB7XG4gICAgY29uc3QgJCQgPSBjb21wb25lbnQuJCQ7XG4gICAgaWYgKCQkLmZyYWdtZW50ICE9PSBudWxsKSB7XG4gICAgICAgIHJ1bl9hbGwoJCQub25fZGVzdHJveSk7XG4gICAgICAgICQkLmZyYWdtZW50ICYmICQkLmZyYWdtZW50LmQoZGV0YWNoaW5nKTtcbiAgICAgICAgLy8gVE9ETyBudWxsIG91dCBvdGhlciByZWZzLCBpbmNsdWRpbmcgY29tcG9uZW50LiQkIChidXQgbmVlZCB0b1xuICAgICAgICAvLyBwcmVzZXJ2ZSBmaW5hbCBzdGF0ZT8pXG4gICAgICAgICQkLm9uX2Rlc3Ryb3kgPSAkJC5mcmFnbWVudCA9IG51bGw7XG4gICAgICAgICQkLmN0eCA9IFtdO1xuICAgIH1cbn1cbmZ1bmN0aW9uIG1ha2VfZGlydHkoY29tcG9uZW50LCBpKSB7XG4gICAgaWYgKGNvbXBvbmVudC4kJC5kaXJ0eVswXSA9PT0gLTEpIHtcbiAgICAgICAgZGlydHlfY29tcG9uZW50cy5wdXNoKGNvbXBvbmVudCk7XG4gICAgICAgIHNjaGVkdWxlX3VwZGF0ZSgpO1xuICAgICAgICBjb21wb25lbnQuJCQuZGlydHkuZmlsbCgwKTtcbiAgICB9XG4gICAgY29tcG9uZW50LiQkLmRpcnR5WyhpIC8gMzEpIHwgMF0gfD0gKDEgPDwgKGkgJSAzMSkpO1xufVxuZnVuY3Rpb24gaW5pdChjb21wb25lbnQsIG9wdGlvbnMsIGluc3RhbmNlLCBjcmVhdGVfZnJhZ21lbnQsIG5vdF9lcXVhbCwgcHJvcHMsIGRpcnR5ID0gWy0xXSkge1xuICAgIGNvbnN0IHBhcmVudF9jb21wb25lbnQgPSBjdXJyZW50X2NvbXBvbmVudDtcbiAgICBzZXRfY3VycmVudF9jb21wb25lbnQoY29tcG9uZW50KTtcbiAgICBjb25zdCAkJCA9IGNvbXBvbmVudC4kJCA9IHtcbiAgICAgICAgZnJhZ21lbnQ6IG51bGwsXG4gICAgICAgIGN0eDogbnVsbCxcbiAgICAgICAgLy8gc3RhdGVcbiAgICAgICAgcHJvcHMsXG4gICAgICAgIHVwZGF0ZTogbm9vcCxcbiAgICAgICAgbm90X2VxdWFsLFxuICAgICAgICBib3VuZDogYmxhbmtfb2JqZWN0KCksXG4gICAgICAgIC8vIGxpZmVjeWNsZVxuICAgICAgICBvbl9tb3VudDogW10sXG4gICAgICAgIG9uX2Rlc3Ryb3k6IFtdLFxuICAgICAgICBvbl9kaXNjb25uZWN0OiBbXSxcbiAgICAgICAgYmVmb3JlX3VwZGF0ZTogW10sXG4gICAgICAgIGFmdGVyX3VwZGF0ZTogW10sXG4gICAgICAgIGNvbnRleHQ6IG5ldyBNYXAocGFyZW50X2NvbXBvbmVudCA/IHBhcmVudF9jb21wb25lbnQuJCQuY29udGV4dCA6IG9wdGlvbnMuY29udGV4dCB8fCBbXSksXG4gICAgICAgIC8vIGV2ZXJ5dGhpbmcgZWxzZVxuICAgICAgICBjYWxsYmFja3M6IGJsYW5rX29iamVjdCgpLFxuICAgICAgICBkaXJ0eSxcbiAgICAgICAgc2tpcF9ib3VuZDogZmFsc2VcbiAgICB9O1xuICAgIGxldCByZWFkeSA9IGZhbHNlO1xuICAgICQkLmN0eCA9IGluc3RhbmNlXG4gICAgICAgID8gaW5zdGFuY2UoY29tcG9uZW50LCBvcHRpb25zLnByb3BzIHx8IHt9LCAoaSwgcmV0LCAuLi5yZXN0KSA9PiB7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHJlc3QubGVuZ3RoID8gcmVzdFswXSA6IHJldDtcbiAgICAgICAgICAgIGlmICgkJC5jdHggJiYgbm90X2VxdWFsKCQkLmN0eFtpXSwgJCQuY3R4W2ldID0gdmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgaWYgKCEkJC5za2lwX2JvdW5kICYmICQkLmJvdW5kW2ldKVxuICAgICAgICAgICAgICAgICAgICAkJC5ib3VuZFtpXSh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgaWYgKHJlYWR5KVxuICAgICAgICAgICAgICAgICAgICBtYWtlX2RpcnR5KGNvbXBvbmVudCwgaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgICB9KVxuICAgICAgICA6IFtdO1xuICAgICQkLnVwZGF0ZSgpO1xuICAgIHJlYWR5ID0gdHJ1ZTtcbiAgICBydW5fYWxsKCQkLmJlZm9yZV91cGRhdGUpO1xuICAgIC8vIGBmYWxzZWAgYXMgYSBzcGVjaWFsIGNhc2Ugb2Ygbm8gRE9NIGNvbXBvbmVudFxuICAgICQkLmZyYWdtZW50ID0gY3JlYXRlX2ZyYWdtZW50ID8gY3JlYXRlX2ZyYWdtZW50KCQkLmN0eCkgOiBmYWxzZTtcbiAgICBpZiAob3B0aW9ucy50YXJnZXQpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMuaHlkcmF0ZSkge1xuICAgICAgICAgICAgc3RhcnRfaHlkcmF0aW5nKCk7XG4gICAgICAgICAgICBjb25zdCBub2RlcyA9IGNoaWxkcmVuKG9wdGlvbnMudGFyZ2V0KTtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbm9uLW51bGwtYXNzZXJ0aW9uXG4gICAgICAgICAgICAkJC5mcmFnbWVudCAmJiAkJC5mcmFnbWVudC5sKG5vZGVzKTtcbiAgICAgICAgICAgIG5vZGVzLmZvckVhY2goZGV0YWNoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbm9uLW51bGwtYXNzZXJ0aW9uXG4gICAgICAgICAgICAkJC5mcmFnbWVudCAmJiAkJC5mcmFnbWVudC5jKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMuaW50cm8pXG4gICAgICAgICAgICB0cmFuc2l0aW9uX2luKGNvbXBvbmVudC4kJC5mcmFnbWVudCk7XG4gICAgICAgIG1vdW50X2NvbXBvbmVudChjb21wb25lbnQsIG9wdGlvbnMudGFyZ2V0LCBvcHRpb25zLmFuY2hvciwgb3B0aW9ucy5jdXN0b21FbGVtZW50KTtcbiAgICAgICAgZW5kX2h5ZHJhdGluZygpO1xuICAgICAgICBmbHVzaCgpO1xuICAgIH1cbiAgICBzZXRfY3VycmVudF9jb21wb25lbnQocGFyZW50X2NvbXBvbmVudCk7XG59XG5sZXQgU3ZlbHRlRWxlbWVudDtcbmlmICh0eXBlb2YgSFRNTEVsZW1lbnQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBTdmVsdGVFbGVtZW50ID0gY2xhc3MgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gICAgICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgICAgIHRoaXMuYXR0YWNoU2hhZG93KHsgbW9kZTogJ29wZW4nIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgICAgICAgY29uc3QgeyBvbl9tb3VudCB9ID0gdGhpcy4kJDtcbiAgICAgICAgICAgIHRoaXMuJCQub25fZGlzY29ubmVjdCA9IG9uX21vdW50Lm1hcChydW4pLmZpbHRlcihpc19mdW5jdGlvbik7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlIHRvZG86IGltcHJvdmUgdHlwaW5nc1xuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gdGhpcy4kJC5zbG90dGVkKSB7XG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZSB0b2RvOiBpbXByb3ZlIHR5cGluZ3NcbiAgICAgICAgICAgICAgICB0aGlzLmFwcGVuZENoaWxkKHRoaXMuJCQuc2xvdHRlZFtrZXldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2soYXR0ciwgX29sZFZhbHVlLCBuZXdWYWx1ZSkge1xuICAgICAgICAgICAgdGhpc1thdHRyXSA9IG5ld1ZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGRpc2Nvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgICAgICAgcnVuX2FsbCh0aGlzLiQkLm9uX2Rpc2Nvbm5lY3QpO1xuICAgICAgICB9XG4gICAgICAgICRkZXN0cm95KCkge1xuICAgICAgICAgICAgZGVzdHJveV9jb21wb25lbnQodGhpcywgMSk7XG4gICAgICAgICAgICB0aGlzLiRkZXN0cm95ID0gbm9vcDtcbiAgICAgICAgfVxuICAgICAgICAkb24odHlwZSwgY2FsbGJhY2spIHtcbiAgICAgICAgICAgIC8vIFRPRE8gc2hvdWxkIHRoaXMgZGVsZWdhdGUgdG8gYWRkRXZlbnRMaXN0ZW5lcj9cbiAgICAgICAgICAgIGNvbnN0IGNhbGxiYWNrcyA9ICh0aGlzLiQkLmNhbGxiYWNrc1t0eXBlXSB8fCAodGhpcy4kJC5jYWxsYmFja3NbdHlwZV0gPSBbXSkpO1xuICAgICAgICAgICAgY2FsbGJhY2tzLnB1c2goY2FsbGJhY2spO1xuICAgICAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBpbmRleCA9IGNhbGxiYWNrcy5pbmRleE9mKGNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggIT09IC0xKVxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFja3Muc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgJHNldCgkJHByb3BzKSB7XG4gICAgICAgICAgICBpZiAodGhpcy4kJHNldCAmJiAhaXNfZW1wdHkoJCRwcm9wcykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLiQkLnNraXBfYm91bmQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMuJCRzZXQoJCRwcm9wcyk7XG4gICAgICAgICAgICAgICAgdGhpcy4kJC5za2lwX2JvdW5kID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xufVxuLyoqXG4gKiBCYXNlIGNsYXNzIGZvciBTdmVsdGUgY29tcG9uZW50cy4gVXNlZCB3aGVuIGRldj1mYWxzZS5cbiAqL1xuY2xhc3MgU3ZlbHRlQ29tcG9uZW50IHtcbiAgICAkZGVzdHJveSgpIHtcbiAgICAgICAgZGVzdHJveV9jb21wb25lbnQodGhpcywgMSk7XG4gICAgICAgIHRoaXMuJGRlc3Ryb3kgPSBub29wO1xuICAgIH1cbiAgICAkb24odHlwZSwgY2FsbGJhY2spIHtcbiAgICAgICAgY29uc3QgY2FsbGJhY2tzID0gKHRoaXMuJCQuY2FsbGJhY2tzW3R5cGVdIHx8ICh0aGlzLiQkLmNhbGxiYWNrc1t0eXBlXSA9IFtdKSk7XG4gICAgICAgIGNhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gY2FsbGJhY2tzLmluZGV4T2YoY2FsbGJhY2spO1xuICAgICAgICAgICAgaWYgKGluZGV4ICE9PSAtMSlcbiAgICAgICAgICAgICAgICBjYWxsYmFja3Muc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgJHNldCgkJHByb3BzKSB7XG4gICAgICAgIGlmICh0aGlzLiQkc2V0ICYmICFpc19lbXB0eSgkJHByb3BzKSkge1xuICAgICAgICAgICAgdGhpcy4kJC5za2lwX2JvdW5kID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuJCRzZXQoJCRwcm9wcyk7XG4gICAgICAgICAgICB0aGlzLiQkLnNraXBfYm91bmQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gZGlzcGF0Y2hfZGV2KHR5cGUsIGRldGFpbCkge1xuICAgIGRvY3VtZW50LmRpc3BhdGNoRXZlbnQoY3VzdG9tX2V2ZW50KHR5cGUsIE9iamVjdC5hc3NpZ24oeyB2ZXJzaW9uOiAnMy4zOC4zJyB9LCBkZXRhaWwpKSk7XG59XG5mdW5jdGlvbiBhcHBlbmRfZGV2KHRhcmdldCwgbm9kZSkge1xuICAgIGRpc3BhdGNoX2RldignU3ZlbHRlRE9NSW5zZXJ0JywgeyB0YXJnZXQsIG5vZGUgfSk7XG4gICAgYXBwZW5kKHRhcmdldCwgbm9kZSk7XG59XG5mdW5jdGlvbiBpbnNlcnRfZGV2KHRhcmdldCwgbm9kZSwgYW5jaG9yKSB7XG4gICAgZGlzcGF0Y2hfZGV2KCdTdmVsdGVET01JbnNlcnQnLCB7IHRhcmdldCwgbm9kZSwgYW5jaG9yIH0pO1xuICAgIGluc2VydCh0YXJnZXQsIG5vZGUsIGFuY2hvcik7XG59XG5mdW5jdGlvbiBkZXRhY2hfZGV2KG5vZGUpIHtcbiAgICBkaXNwYXRjaF9kZXYoJ1N2ZWx0ZURPTVJlbW92ZScsIHsgbm9kZSB9KTtcbiAgICBkZXRhY2gobm9kZSk7XG59XG5mdW5jdGlvbiBkZXRhY2hfYmV0d2Vlbl9kZXYoYmVmb3JlLCBhZnRlcikge1xuICAgIHdoaWxlIChiZWZvcmUubmV4dFNpYmxpbmcgJiYgYmVmb3JlLm5leHRTaWJsaW5nICE9PSBhZnRlcikge1xuICAgICAgICBkZXRhY2hfZGV2KGJlZm9yZS5uZXh0U2libGluZyk7XG4gICAgfVxufVxuZnVuY3Rpb24gZGV0YWNoX2JlZm9yZV9kZXYoYWZ0ZXIpIHtcbiAgICB3aGlsZSAoYWZ0ZXIucHJldmlvdXNTaWJsaW5nKSB7XG4gICAgICAgIGRldGFjaF9kZXYoYWZ0ZXIucHJldmlvdXNTaWJsaW5nKTtcbiAgICB9XG59XG5mdW5jdGlvbiBkZXRhY2hfYWZ0ZXJfZGV2KGJlZm9yZSkge1xuICAgIHdoaWxlIChiZWZvcmUubmV4dFNpYmxpbmcpIHtcbiAgICAgICAgZGV0YWNoX2RldihiZWZvcmUubmV4dFNpYmxpbmcpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGxpc3Rlbl9kZXYobm9kZSwgZXZlbnQsIGhhbmRsZXIsIG9wdGlvbnMsIGhhc19wcmV2ZW50X2RlZmF1bHQsIGhhc19zdG9wX3Byb3BhZ2F0aW9uKSB7XG4gICAgY29uc3QgbW9kaWZpZXJzID0gb3B0aW9ucyA9PT0gdHJ1ZSA/IFsnY2FwdHVyZSddIDogb3B0aW9ucyA/IEFycmF5LmZyb20oT2JqZWN0LmtleXMob3B0aW9ucykpIDogW107XG4gICAgaWYgKGhhc19wcmV2ZW50X2RlZmF1bHQpXG4gICAgICAgIG1vZGlmaWVycy5wdXNoKCdwcmV2ZW50RGVmYXVsdCcpO1xuICAgIGlmIChoYXNfc3RvcF9wcm9wYWdhdGlvbilcbiAgICAgICAgbW9kaWZpZXJzLnB1c2goJ3N0b3BQcm9wYWdhdGlvbicpO1xuICAgIGRpc3BhdGNoX2RldignU3ZlbHRlRE9NQWRkRXZlbnRMaXN0ZW5lcicsIHsgbm9kZSwgZXZlbnQsIGhhbmRsZXIsIG1vZGlmaWVycyB9KTtcbiAgICBjb25zdCBkaXNwb3NlID0gbGlzdGVuKG5vZGUsIGV2ZW50LCBoYW5kbGVyLCBvcHRpb25zKTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBkaXNwYXRjaF9kZXYoJ1N2ZWx0ZURPTVJlbW92ZUV2ZW50TGlzdGVuZXInLCB7IG5vZGUsIGV2ZW50LCBoYW5kbGVyLCBtb2RpZmllcnMgfSk7XG4gICAgICAgIGRpc3Bvc2UoKTtcbiAgICB9O1xufVxuZnVuY3Rpb24gYXR0cl9kZXYobm9kZSwgYXR0cmlidXRlLCB2YWx1ZSkge1xuICAgIGF0dHIobm9kZSwgYXR0cmlidXRlLCB2YWx1ZSk7XG4gICAgaWYgKHZhbHVlID09IG51bGwpXG4gICAgICAgIGRpc3BhdGNoX2RldignU3ZlbHRlRE9NUmVtb3ZlQXR0cmlidXRlJywgeyBub2RlLCBhdHRyaWJ1dGUgfSk7XG4gICAgZWxzZVxuICAgICAgICBkaXNwYXRjaF9kZXYoJ1N2ZWx0ZURPTVNldEF0dHJpYnV0ZScsIHsgbm9kZSwgYXR0cmlidXRlLCB2YWx1ZSB9KTtcbn1cbmZ1bmN0aW9uIHByb3BfZGV2KG5vZGUsIHByb3BlcnR5LCB2YWx1ZSkge1xuICAgIG5vZGVbcHJvcGVydHldID0gdmFsdWU7XG4gICAgZGlzcGF0Y2hfZGV2KCdTdmVsdGVET01TZXRQcm9wZXJ0eScsIHsgbm9kZSwgcHJvcGVydHksIHZhbHVlIH0pO1xufVxuZnVuY3Rpb24gZGF0YXNldF9kZXYobm9kZSwgcHJvcGVydHksIHZhbHVlKSB7XG4gICAgbm9kZS5kYXRhc2V0W3Byb3BlcnR5XSA9IHZhbHVlO1xuICAgIGRpc3BhdGNoX2RldignU3ZlbHRlRE9NU2V0RGF0YXNldCcsIHsgbm9kZSwgcHJvcGVydHksIHZhbHVlIH0pO1xufVxuZnVuY3Rpb24gc2V0X2RhdGFfZGV2KHRleHQsIGRhdGEpIHtcbiAgICBkYXRhID0gJycgKyBkYXRhO1xuICAgIGlmICh0ZXh0Lndob2xlVGV4dCA9PT0gZGF0YSlcbiAgICAgICAgcmV0dXJuO1xuICAgIGRpc3BhdGNoX2RldignU3ZlbHRlRE9NU2V0RGF0YScsIHsgbm9kZTogdGV4dCwgZGF0YSB9KTtcbiAgICB0ZXh0LmRhdGEgPSBkYXRhO1xufVxuZnVuY3Rpb24gdmFsaWRhdGVfZWFjaF9hcmd1bWVudChhcmcpIHtcbiAgICBpZiAodHlwZW9mIGFyZyAhPT0gJ3N0cmluZycgJiYgIShhcmcgJiYgdHlwZW9mIGFyZyA9PT0gJ29iamVjdCcgJiYgJ2xlbmd0aCcgaW4gYXJnKSkge1xuICAgICAgICBsZXQgbXNnID0gJ3sjZWFjaH0gb25seSBpdGVyYXRlcyBvdmVyIGFycmF5LWxpa2Ugb2JqZWN0cy4nO1xuICAgICAgICBpZiAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBhcmcgJiYgU3ltYm9sLml0ZXJhdG9yIGluIGFyZykge1xuICAgICAgICAgICAgbXNnICs9ICcgWW91IGNhbiB1c2UgYSBzcHJlYWQgdG8gY29udmVydCB0aGlzIGl0ZXJhYmxlIGludG8gYW4gYXJyYXkuJztcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbiAgICB9XG59XG5mdW5jdGlvbiB2YWxpZGF0ZV9zbG90cyhuYW1lLCBzbG90LCBrZXlzKSB7XG4gICAgZm9yIChjb25zdCBzbG90X2tleSBvZiBPYmplY3Qua2V5cyhzbG90KSkge1xuICAgICAgICBpZiAoIX5rZXlzLmluZGV4T2Yoc2xvdF9rZXkpKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYDwke25hbWV9PiByZWNlaXZlZCBhbiB1bmV4cGVjdGVkIHNsb3QgXCIke3Nsb3Rfa2V5fVwiLmApO1xuICAgICAgICB9XG4gICAgfVxufVxuLyoqXG4gKiBCYXNlIGNsYXNzIGZvciBTdmVsdGUgY29tcG9uZW50cyB3aXRoIHNvbWUgbWlub3IgZGV2LWVuaGFuY2VtZW50cy4gVXNlZCB3aGVuIGRldj10cnVlLlxuICovXG5jbGFzcyBTdmVsdGVDb21wb25lbnREZXYgZXh0ZW5kcyBTdmVsdGVDb21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKCFvcHRpb25zIHx8ICghb3B0aW9ucy50YXJnZXQgJiYgIW9wdGlvbnMuJCRpbmxpbmUpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCIndGFyZ2V0JyBpcyBhIHJlcXVpcmVkIG9wdGlvblwiKTtcbiAgICAgICAgfVxuICAgICAgICBzdXBlcigpO1xuICAgIH1cbiAgICAkZGVzdHJveSgpIHtcbiAgICAgICAgc3VwZXIuJGRlc3Ryb3koKTtcbiAgICAgICAgdGhpcy4kZGVzdHJveSA9ICgpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignQ29tcG9uZW50IHdhcyBhbHJlYWR5IGRlc3Ryb3llZCcpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgfTtcbiAgICB9XG4gICAgJGNhcHR1cmVfc3RhdGUoKSB7IH1cbiAgICAkaW5qZWN0X3N0YXRlKCkgeyB9XG59XG4vKipcbiAqIEJhc2UgY2xhc3MgdG8gY3JlYXRlIHN0cm9uZ2x5IHR5cGVkIFN2ZWx0ZSBjb21wb25lbnRzLlxuICogVGhpcyBvbmx5IGV4aXN0cyBmb3IgdHlwaW5nIHB1cnBvc2VzIGFuZCBzaG91bGQgYmUgdXNlZCBpbiBgLmQudHNgIGZpbGVzLlxuICpcbiAqICMjIyBFeGFtcGxlOlxuICpcbiAqIFlvdSBoYXZlIGNvbXBvbmVudCBsaWJyYXJ5IG9uIG5wbSBjYWxsZWQgYGNvbXBvbmVudC1saWJyYXJ5YCwgZnJvbSB3aGljaFxuICogeW91IGV4cG9ydCBhIGNvbXBvbmVudCBjYWxsZWQgYE15Q29tcG9uZW50YC4gRm9yIFN2ZWx0ZStUeXBlU2NyaXB0IHVzZXJzLFxuICogeW91IHdhbnQgdG8gcHJvdmlkZSB0eXBpbmdzLiBUaGVyZWZvcmUgeW91IGNyZWF0ZSBhIGBpbmRleC5kLnRzYDpcbiAqIGBgYHRzXG4gKiBpbXBvcnQgeyBTdmVsdGVDb21wb25lbnRUeXBlZCB9IGZyb20gXCJzdmVsdGVcIjtcbiAqIGV4cG9ydCBjbGFzcyBNeUNvbXBvbmVudCBleHRlbmRzIFN2ZWx0ZUNvbXBvbmVudFR5cGVkPHtmb286IHN0cmluZ30+IHt9XG4gKiBgYGBcbiAqIFR5cGluZyB0aGlzIG1ha2VzIGl0IHBvc3NpYmxlIGZvciBJREVzIGxpa2UgVlMgQ29kZSB3aXRoIHRoZSBTdmVsdGUgZXh0ZW5zaW9uXG4gKiB0byBwcm92aWRlIGludGVsbGlzZW5zZSBhbmQgdG8gdXNlIHRoZSBjb21wb25lbnQgbGlrZSB0aGlzIGluIGEgU3ZlbHRlIGZpbGVcbiAqIHdpdGggVHlwZVNjcmlwdDpcbiAqIGBgYHN2ZWx0ZVxuICogPHNjcmlwdCBsYW5nPVwidHNcIj5cbiAqIFx0aW1wb3J0IHsgTXlDb21wb25lbnQgfSBmcm9tIFwiY29tcG9uZW50LWxpYnJhcnlcIjtcbiAqIDwvc2NyaXB0PlxuICogPE15Q29tcG9uZW50IGZvbz17J2Jhcid9IC8+XG4gKiBgYGBcbiAqXG4gKiAjIyMjIFdoeSBub3QgbWFrZSB0aGlzIHBhcnQgb2YgYFN2ZWx0ZUNvbXBvbmVudChEZXYpYD9cbiAqIEJlY2F1c2VcbiAqIGBgYHRzXG4gKiBjbGFzcyBBU3ViY2xhc3NPZlN2ZWx0ZUNvbXBvbmVudCBleHRlbmRzIFN2ZWx0ZUNvbXBvbmVudDx7Zm9vOiBzdHJpbmd9PiB7fVxuICogY29uc3QgY29tcG9uZW50OiB0eXBlb2YgU3ZlbHRlQ29tcG9uZW50ID0gQVN1YmNsYXNzT2ZTdmVsdGVDb21wb25lbnQ7XG4gKiBgYGBcbiAqIHdpbGwgdGhyb3cgYSB0eXBlIGVycm9yLCBzbyB3ZSBuZWVkIHRvIHNlcGVyYXRlIHRoZSBtb3JlIHN0cmljdGx5IHR5cGVkIGNsYXNzLlxuICovXG5jbGFzcyBTdmVsdGVDb21wb25lbnRUeXBlZCBleHRlbmRzIFN2ZWx0ZUNvbXBvbmVudERldiB7XG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgICAgICBzdXBlcihvcHRpb25zKTtcbiAgICB9XG59XG5mdW5jdGlvbiBsb29wX2d1YXJkKHRpbWVvdXQpIHtcbiAgICBjb25zdCBzdGFydCA9IERhdGUubm93KCk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgaWYgKERhdGUubm93KCkgLSBzdGFydCA+IHRpbWVvdXQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW5maW5pdGUgbG9vcCBkZXRlY3RlZCcpO1xuICAgICAgICB9XG4gICAgfTtcbn1cblxuZXhwb3J0IHsgSHRtbFRhZywgU3ZlbHRlQ29tcG9uZW50LCBTdmVsdGVDb21wb25lbnREZXYsIFN2ZWx0ZUNvbXBvbmVudFR5cGVkLCBTdmVsdGVFbGVtZW50LCBhY3Rpb25fZGVzdHJveWVyLCBhZGRfYXR0cmlidXRlLCBhZGRfY2xhc3NlcywgYWRkX2ZsdXNoX2NhbGxiYWNrLCBhZGRfbG9jYXRpb24sIGFkZF9yZW5kZXJfY2FsbGJhY2ssIGFkZF9yZXNpemVfbGlzdGVuZXIsIGFkZF90cmFuc2Zvcm0sIGFmdGVyVXBkYXRlLCBhcHBlbmQsIGFwcGVuZF9kZXYsIGFzc2lnbiwgYXR0ciwgYXR0cl9kZXYsIGF0dHJpYnV0ZV90b19vYmplY3QsIGJlZm9yZVVwZGF0ZSwgYmluZCwgYmluZGluZ19jYWxsYmFja3MsIGJsYW5rX29iamVjdCwgYnViYmxlLCBjaGVja19vdXRyb3MsIGNoaWxkcmVuLCBjbGFpbV9jb21wb25lbnQsIGNsYWltX2VsZW1lbnQsIGNsYWltX2h0bWxfdGFnLCBjbGFpbV9zcGFjZSwgY2xhaW1fdGV4dCwgY2xlYXJfbG9vcHMsIGNvbXBvbmVudF9zdWJzY3JpYmUsIGNvbXB1dGVfcmVzdF9wcm9wcywgY29tcHV0ZV9zbG90cywgY3JlYXRlRXZlbnREaXNwYXRjaGVyLCBjcmVhdGVfYW5pbWF0aW9uLCBjcmVhdGVfYmlkaXJlY3Rpb25hbF90cmFuc2l0aW9uLCBjcmVhdGVfY29tcG9uZW50LCBjcmVhdGVfaW5fdHJhbnNpdGlvbiwgY3JlYXRlX291dF90cmFuc2l0aW9uLCBjcmVhdGVfc2xvdCwgY3JlYXRlX3Nzcl9jb21wb25lbnQsIGN1cnJlbnRfY29tcG9uZW50LCBjdXN0b21fZXZlbnQsIGRhdGFzZXRfZGV2LCBkZWJ1ZywgZGVzdHJveV9ibG9jaywgZGVzdHJveV9jb21wb25lbnQsIGRlc3Ryb3lfZWFjaCwgZGV0YWNoLCBkZXRhY2hfYWZ0ZXJfZGV2LCBkZXRhY2hfYmVmb3JlX2RldiwgZGV0YWNoX2JldHdlZW5fZGV2LCBkZXRhY2hfZGV2LCBkaXJ0eV9jb21wb25lbnRzLCBkaXNwYXRjaF9kZXYsIGVhY2gsIGVsZW1lbnQsIGVsZW1lbnRfaXMsIGVtcHR5LCBlbmRfaHlkcmF0aW5nLCBlc2NhcGUsIGVzY2FwZV9hdHRyaWJ1dGVfdmFsdWUsIGVzY2FwZV9vYmplY3QsIGVzY2FwZWQsIGV4Y2x1ZGVfaW50ZXJuYWxfcHJvcHMsIGZpeF9hbmRfZGVzdHJveV9ibG9jaywgZml4X2FuZF9vdXRyb19hbmRfZGVzdHJveV9ibG9jaywgZml4X3Bvc2l0aW9uLCBmbHVzaCwgZ2V0Q29udGV4dCwgZ2V0X2JpbmRpbmdfZ3JvdXBfdmFsdWUsIGdldF9jdXJyZW50X2NvbXBvbmVudCwgZ2V0X2N1c3RvbV9lbGVtZW50c19zbG90cywgZ2V0X3Nsb3RfY2hhbmdlcywgZ2V0X3Nsb3RfY29udGV4dCwgZ2V0X3NwcmVhZF9vYmplY3QsIGdldF9zcHJlYWRfdXBkYXRlLCBnZXRfc3RvcmVfdmFsdWUsIGdsb2JhbHMsIGdyb3VwX291dHJvcywgaGFuZGxlX3Byb21pc2UsIGhhc0NvbnRleHQsIGhhc19wcm9wLCBpZGVudGl0eSwgaW5pdCwgaW5zZXJ0LCBpbnNlcnRfZGV2LCBpbnRyb3MsIGludmFsaWRfYXR0cmlidXRlX25hbWVfY2hhcmFjdGVyLCBpc19jbGllbnQsIGlzX2Nyb3Nzb3JpZ2luLCBpc19lbXB0eSwgaXNfZnVuY3Rpb24sIGlzX3Byb21pc2UsIGxpc3RlbiwgbGlzdGVuX2RldiwgbG9vcCwgbG9vcF9ndWFyZCwgbWlzc2luZ19jb21wb25lbnQsIG1vdW50X2NvbXBvbmVudCwgbm9vcCwgbm90X2VxdWFsLCBub3csIG51bGxfdG9fZW1wdHksIG9iamVjdF93aXRob3V0X3Byb3BlcnRpZXMsIG9uRGVzdHJveSwgb25Nb3VudCwgb25jZSwgb3V0cm9fYW5kX2Rlc3Ryb3lfYmxvY2ssIHByZXZlbnRfZGVmYXVsdCwgcHJvcF9kZXYsIHF1ZXJ5X3NlbGVjdG9yX2FsbCwgcmFmLCBydW4sIHJ1bl9hbGwsIHNhZmVfbm90X2VxdWFsLCBzY2hlZHVsZV91cGRhdGUsIHNlbGVjdF9tdWx0aXBsZV92YWx1ZSwgc2VsZWN0X29wdGlvbiwgc2VsZWN0X29wdGlvbnMsIHNlbGVjdF92YWx1ZSwgc2VsZiwgc2V0Q29udGV4dCwgc2V0X2F0dHJpYnV0ZXMsIHNldF9jdXJyZW50X2NvbXBvbmVudCwgc2V0X2N1c3RvbV9lbGVtZW50X2RhdGEsIHNldF9kYXRhLCBzZXRfZGF0YV9kZXYsIHNldF9pbnB1dF90eXBlLCBzZXRfaW5wdXRfdmFsdWUsIHNldF9ub3csIHNldF9yYWYsIHNldF9zdG9yZV92YWx1ZSwgc2V0X3N0eWxlLCBzZXRfc3ZnX2F0dHJpYnV0ZXMsIHNwYWNlLCBzcHJlYWQsIHN0YXJ0X2h5ZHJhdGluZywgc3RvcF9wcm9wYWdhdGlvbiwgc3Vic2NyaWJlLCBzdmdfZWxlbWVudCwgdGV4dCwgdGljaywgdGltZV9yYW5nZXNfdG9fYXJyYXksIHRvX251bWJlciwgdG9nZ2xlX2NsYXNzLCB0cmFuc2l0aW9uX2luLCB0cmFuc2l0aW9uX291dCwgdXBkYXRlX2F3YWl0X2Jsb2NrX2JyYW5jaCwgdXBkYXRlX2tleWVkX2VhY2gsIHVwZGF0ZV9zbG90LCB1cGRhdGVfc2xvdF9zcHJlYWQsIHZhbGlkYXRlX2NvbXBvbmVudCwgdmFsaWRhdGVfZWFjaF9hcmd1bWVudCwgdmFsaWRhdGVfZWFjaF9rZXlzLCB2YWxpZGF0ZV9zbG90cywgdmFsaWRhdGVfc3RvcmUsIHhsaW5rX2F0dHIgfTtcbiIsICI8c2NyaXB0IGxhbmc9XCJ0c1wiPlxyXG4gIGltcG9ydCB0eXBlIHsgU3Bpbm5lclR5cGVzIH0gZnJvbSBcIi4vdHlwZXMvc3Bpbm5lci50eXBlXCI7XHJcbiAgZXhwb3J0IGxldCBjb2xvcjogU3Bpbm5lclR5cGVzW1wiY29sb3JcIl0gPSBcIiNGRjNFMDBcIjtcclxuICBleHBvcnQgbGV0IHVuaXQ6IFNwaW5uZXJUeXBlc1tcInVuaXRcIl0gPSBcInB4XCI7XHJcbiAgZXhwb3J0IGxldCBkdXJhdGlvbjogU3Bpbm5lclR5cGVzW1wiZHVyYXRpb25cIl0gPSBcIjAuNzVzXCI7XHJcbiAgZXhwb3J0IGxldCBzaXplOiBTcGlubmVyVHlwZXNbXCJzaXplXCJdID0gXCI2MFwiO1xyXG48L3NjcmlwdD5cclxuXHJcbjxzdHlsZT5cclxuICAuY2lyY2xlIHtcclxuICAgIGhlaWdodDogdmFyKC0tc2l6ZSk7XHJcbiAgICB3aWR0aDogdmFyKC0tc2l6ZSk7XHJcbiAgICBib3JkZXItY29sb3I6IHZhcigtLWNvbG9yKSB0cmFuc3BhcmVudCB2YXIoLS1jb2xvcikgdmFyKC0tY29sb3IpO1xyXG4gICAgYm9yZGVyLXdpZHRoOiBjYWxjKHZhcigtLXNpemUpIC8gMTUpO1xyXG4gICAgYm9yZGVyLXN0eWxlOiBzb2xpZDtcclxuICAgIGJvcmRlci1pbWFnZTogaW5pdGlhbDtcclxuICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcclxuICAgIGFuaW1hdGlvbjogdmFyKC0tZHVyYXRpb24pIGxpbmVhciAwcyBpbmZpbml0ZSBub3JtYWwgbm9uZSBydW5uaW5nIHJvdGF0ZTtcclxuICB9XHJcbiAgQGtleWZyYW1lcyByb3RhdGUge1xyXG4gICAgMCUge1xyXG4gICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgwKTtcclxuICAgIH1cclxuICAgIDEwMCUge1xyXG4gICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgzNjBkZWcpO1xyXG4gICAgfVxyXG4gIH1cclxuPC9zdHlsZT5cclxuXHJcbjxkaXZcclxuICBjbGFzcz1cImNpcmNsZVwiXHJcbiAgc3R5bGU9XCItLXNpemU6IHtzaXplfXt1bml0fTsgLS1jb2xvcjoge2NvbG9yfTsgLS1kdXJhdGlvbjoge2R1cmF0aW9ufVwiIC8+XHJcbiIsICI8c2NyaXB0IGxhbmc9XCJ0c1wiPlxyXG4gIGV4cG9ydCBsZXQgc2l6ZTogc3RyaW5nIHwgbnVtYmVyID0gXCI2MFwiO1xyXG4gIGV4cG9ydCBsZXQgdW5pdDogc3RyaW5nID0gXCJweFwiO1xyXG4gIGV4cG9ydCBsZXQgY29sb3JPdXRlcjogc3RyaW5nID0gXCIjRkYzRTAwXCI7XHJcbiAgZXhwb3J0IGxldCBjb2xvckNlbnRlcjogc3RyaW5nID0gXCIjNDBCM0ZGXCI7XHJcbiAgZXhwb3J0IGxldCBjb2xvcklubmVyOiBzdHJpbmcgPSBcIiM2NzY3NzhcIjtcclxuICBleHBvcnQgbGV0IGR1cmF0aW9uTXVsdGlwbGllcjogbnVtYmVyID0gMTtcclxuICBleHBvcnQgbGV0IGR1cmF0aW9uT3V0ZXI6IHN0cmluZyA9IGAke2R1cmF0aW9uTXVsdGlwbGllciAqIDJ9c2A7XHJcbiAgZXhwb3J0IGxldCBkdXJhdGlvbklubmVyOiBzdHJpbmcgPSBgJHtkdXJhdGlvbk11bHRpcGxpZXIgKiAxLjV9c2A7XHJcbiAgZXhwb3J0IGxldCBkdXJhdGlvbkNlbnRlcjogc3RyaW5nID0gYCR7ZHVyYXRpb25NdWx0aXBsaWVyICogM31zYDtcclxuPC9zY3JpcHQ+XHJcblxyXG48c3R5bGU+XHJcbiAgLmNpcmNsZSB7XHJcbiAgICB3aWR0aDogdmFyKC0tc2l6ZSk7XHJcbiAgICBoZWlnaHQ6IHZhcigtLXNpemUpO1xyXG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcclxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgIGJvcmRlcjogM3B4IHNvbGlkIHRyYW5zcGFyZW50O1xyXG4gICAgYm9yZGVyLXRvcC1jb2xvcjogdmFyKC0tY29sb3JPdXRlcik7XHJcbiAgICBib3JkZXItcmFkaXVzOiA1MCU7XHJcbiAgICBhbmltYXRpb246IGNpcmNsZVNwaW4gdmFyKC0tZHVyYXRpb25PdXRlcikgbGluZWFyIGluZmluaXRlO1xyXG4gIH1cclxuICAuY2lyY2xlOmJlZm9yZSxcclxuICAuY2lyY2xlOmFmdGVyIHtcclxuICAgIGNvbnRlbnQ6IFwiXCI7XHJcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgYm9yZGVyOiAzcHggc29saWQgdHJhbnNwYXJlbnQ7XHJcbiAgICBib3JkZXItcmFkaXVzOiA1MCU7XHJcbiAgfVxyXG4gIC5jaXJjbGU6YWZ0ZXIge1xyXG4gICAgYm9yZGVyLXRvcC1jb2xvcjogdmFyKC0tY29sb3JJbm5lcik7XHJcbiAgICB0b3A6IDlweDtcclxuICAgIGxlZnQ6IDlweDtcclxuICAgIHJpZ2h0OiA5cHg7XHJcbiAgICBib3R0b206IDlweDtcclxuICAgIGFuaW1hdGlvbjogY2lyY2xlU3BpbiB2YXIoLS1kdXJhdGlvbklubmVyKSBsaW5lYXIgaW5maW5pdGU7XHJcbiAgfVxyXG4gIC5jaXJjbGU6YmVmb3JlIHtcclxuICAgIGJvcmRlci10b3AtY29sb3I6IHZhcigtLWNvbG9yQ2VudGVyKTtcclxuICAgIHRvcDogM3B4O1xyXG4gICAgbGVmdDogM3B4O1xyXG4gICAgcmlnaHQ6IDNweDtcclxuICAgIGJvdHRvbTogM3B4O1xyXG4gICAgYW5pbWF0aW9uOiBjaXJjbGVTcGluIHZhcigtLWR1cmF0aW9uQ2VudGVyKSBsaW5lYXIgaW5maW5pdGU7XHJcbiAgfVxyXG4gIEBrZXlmcmFtZXMgY2lyY2xlU3BpbiB7XHJcbiAgICAwJSB7XHJcbiAgICAgIHRyYW5zZm9ybTogcm90YXRlKDBkZWcpO1xyXG4gICAgfVxyXG4gICAgMTAwJSB7XHJcbiAgICAgIHRyYW5zZm9ybTogcm90YXRlKDM2MGRlZyk7XHJcbiAgICB9XHJcbiAgfVxyXG48L3N0eWxlPlxyXG5cclxuPGRpdlxyXG4gIGNsYXNzPVwiY2lyY2xlXCJcclxuICBzdHlsZT1cIi0tc2l6ZToge3NpemV9e3VuaXR9OyAtLWNvbG9ySW5uZXI6IHtjb2xvcklubmVyfTsgLS1jb2xvckNlbnRlcjoge2NvbG9yQ2VudGVyfTsgLS1jb2xvck91dGVyOiB7Y29sb3JPdXRlcn07IC0tZHVyYXRpb25Jbm5lcjoge2R1cmF0aW9uSW5uZXJ9OyAtLWR1cmF0aW9uQ2VudGVyOiB7ZHVyYXRpb25DZW50ZXJ9OyAtLWR1cmF0aW9uT3V0ZXI6IHtkdXJhdGlvbk91dGVyfTtcIiAvPlxyXG4iLCAiPHNjcmlwdCBsYW5nPVwidHNcIj5cclxuICBleHBvcnQgbGV0IHNpemU6IHN0cmluZyB8IG51bWJlciA9IFwiNjBcIjtcclxuICBleHBvcnQgbGV0IHVuaXQ6IHN0cmluZyA9IFwicHhcIjtcclxuICBleHBvcnQgbGV0IGJhbGxUb3BMZWZ0OiBzdHJpbmcgPSBcIiNGRjNFMDBcIjtcclxuICBleHBvcnQgbGV0IGJhbGxUb3BSaWdodDogc3RyaW5nID0gXCIjRjhCMzM0XCI7XHJcbiAgZXhwb3J0IGxldCBiYWxsQm90dG9tTGVmdDogc3RyaW5nID0gXCIjNDBCM0ZGXCI7XHJcbiAgZXhwb3J0IGxldCBiYWxsQm90dG9tUmlnaHQ6IHN0cmluZyA9IFwiIzY3Njc3OFwiO1xyXG4gIGV4cG9ydCBsZXQgZHVyYXRpb24gPSBcIjEuNXNcIjtcclxuPC9zY3JpcHQ+XHJcblxyXG48c3R5bGU+XHJcbiAgLndyYXBwZXIge1xyXG4gICAgd2lkdGg6IHZhcigtLXNpemUpO1xyXG4gICAgaGVpZ2h0OiB2YXIoLS1zaXplKTtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICBsaW5lLWhlaWdodDogMDtcclxuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XHJcbiAgfVxyXG4gIC5pbm5lciB7XHJcbiAgICB0cmFuc2Zvcm06IHNjYWxlKGNhbGModmFyKC0tZmxvYXRTaXplKSAvIDUyKSk7XHJcbiAgfVxyXG4gIC5iYWxsLWNvbnRhaW5lciB7XHJcbiAgICBhbmltYXRpb246IGJhbGxUd28gdmFyKC0tZHVyYXRpb24pIGluZmluaXRlO1xyXG4gICAgd2lkdGg6IDQ0cHg7XHJcbiAgICBoZWlnaHQ6IDQ0cHg7XHJcbiAgICBmbGV4LXNocmluazogMDtcclxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICB9XHJcbiAgLnNpbmdsZS1iYWxsIHtcclxuICAgIHdpZHRoOiA0NHB4O1xyXG4gICAgaGVpZ2h0OiA0NHB4O1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gIH1cclxuICAuYmFsbCB7XHJcbiAgICB3aWR0aDogMjBweDtcclxuICAgIGhlaWdodDogMjBweDtcclxuICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIGFuaW1hdGlvbjogYmFsbE9uZSB2YXIoLS1kdXJhdGlvbikgaW5maW5pdGUgZWFzZTtcclxuICB9XHJcbiAgLmJhbGwtdG9wLWxlZnQge1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYmFsbFRvcExlZnRDb2xvcik7XHJcbiAgICB0b3A6IDA7XHJcbiAgICBsZWZ0OiAwO1xyXG4gIH1cclxuICAuYmFsbC10b3AtcmlnaHQge1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYmFsbFRvcFJpZ2h0Q29sb3IpO1xyXG4gICAgdG9wOiAwO1xyXG4gICAgbGVmdDogMjRweDtcclxuICB9XHJcbiAgLmJhbGwtYm90dG9tLWxlZnQge1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYmFsbEJvdHRvbUxlZnRDb2xvcik7XHJcbiAgICB0b3A6IDI0cHg7XHJcbiAgICBsZWZ0OiAwO1xyXG4gIH1cclxuICAuYmFsbC1ib3R0b20tcmlnaHQge1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYmFsbEJvdHRvbVJpZ2h0Q29sb3IpO1xyXG4gICAgdG9wOiAyNHB4O1xyXG4gICAgbGVmdDogMjRweDtcclxuICB9XHJcbiAgQGtleWZyYW1lcyBiYWxsT25lIHtcclxuICAgIDAlIHtcclxuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgfVxyXG4gICAgNTAlIHtcclxuICAgICAgdG9wOiAxMnB4O1xyXG4gICAgICBsZWZ0OiAxMnB4O1xyXG4gICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICAgIG9wYWNpdHk6IDAuNTtcclxuICAgIH1cclxuICAgIDEwMCUge1xyXG4gICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICB9XHJcbiAgfVxyXG4gIEBrZXlmcmFtZXMgYmFsbFR3byB7XHJcbiAgICAwJSB7XHJcbiAgICAgIHRyYW5zZm9ybTogcm90YXRlKDBkZWcpIHNjYWxlKDEpO1xyXG4gICAgfVxyXG4gICAgNTAlIHtcclxuICAgICAgdHJhbnNmb3JtOiByb3RhdGUoMzYwZGVnKSBzY2FsZSgxLjMpO1xyXG4gICAgfVxyXG4gICAgMTAwJSB7XHJcbiAgICAgIHRyYW5zZm9ybTogcm90YXRlKDcyMGRlZykgc2NhbGUoMSk7XHJcbiAgICB9XHJcbiAgfVxyXG48L3N0eWxlPlxyXG5cclxuPGRpdlxyXG4gIGNsYXNzPVwid3JhcHBlclwiXHJcbiAgc3R5bGU9XCItLXNpemU6IHtzaXplfXt1bml0fTsgLS1mbG9hdFNpemU6IHtzaXplfTsgLS1iYWxsVG9wTGVmdENvbG9yOiB7YmFsbFRvcExlZnR9OyAtLWJhbGxUb3BSaWdodENvbG9yOiB7YmFsbFRvcFJpZ2h0fTsgLS1iYWxsQm90dG9tTGVmdENvbG9yOiB7YmFsbEJvdHRvbUxlZnR9OyAtLWJhbGxCb3R0b21SaWdodENvbG9yOiB7YmFsbEJvdHRvbVJpZ2h0fTsgLS1kdXJhdGlvbjoge2R1cmF0aW9ufTtcIj5cclxuICA8ZGl2IGNsYXNzPVwiaW5uZXJcIj5cclxuICAgIDxkaXYgY2xhc3M9XCJiYWxsLWNvbnRhaW5lclwiPlxyXG4gICAgICA8ZGl2IGNsYXNzPVwic2luZ2xlLWJhbGxcIj5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwiYmFsbCBiYWxsLXRvcC1sZWZ0XCI+Jm5ic3A7PC9kaXY+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgICA8ZGl2IGNsYXNzPVwiY29udGVuZXJfbWl4dGVcIj5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwiYmFsbCBiYWxsLXRvcC1yaWdodFwiPiZuYnNwOzwvZGl2PlxyXG4gICAgICA8L2Rpdj5cclxuICAgICAgPGRpdiBjbGFzcz1cImNvbnRlbmVyX21peHRlXCI+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cImJhbGwgYmFsbC1ib3R0b20tbGVmdFwiPiZuYnNwOzwvZGl2PlxyXG4gICAgICA8L2Rpdj5cclxuICAgICAgPGRpdiBjbGFzcz1cImNvbnRlbmVyX21peHRlXCI+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cImJhbGwgYmFsbC1ib3R0b20tcmlnaHRcIj4mbmJzcDs8L2Rpdj5cclxuICAgICAgPC9kaXY+XHJcbiAgICA8L2Rpdj5cclxuICA8L2Rpdj5cclxuPC9kaXY+XHJcbiIsIG51bGwsICI8c2NyaXB0IGxhbmc9XCJ0c1wiPlxyXG4gIGltcG9ydCB0eXBlIHsgU3Bpbm5lclR5cGVzIH0gZnJvbSBcIi4vdHlwZXMvc3Bpbm5lci50eXBlXCI7XHJcbiAgaW1wb3J0IHsgcmFuZ2UsIGR1cmF0aW9uVW5pdFJlZ2V4IH0gZnJvbSBcIi4vdXRpbHNcIjtcclxuICBleHBvcnQgbGV0IGNvbG9yOiBTcGlubmVyVHlwZXNbXCJjb2xvclwiXSA9IFwiI0ZGM0UwMFwiO1xyXG4gIGV4cG9ydCBsZXQgdW5pdDogU3Bpbm5lclR5cGVzW1widW5pdFwiXSA9IFwicHhcIjtcclxuICBleHBvcnQgbGV0IGR1cmF0aW9uOiBTcGlubmVyVHlwZXNbXCJkdXJhdGlvblwiXSA9IFwiMi4xc1wiO1xyXG4gIGV4cG9ydCBsZXQgc2l6ZTogU3Bpbm5lclR5cGVzW1wic2l6ZVwiXSA9IFwiNjBcIjtcclxuXHJcbiAgbGV0IGR1cmF0aW9uVW5pdCA9IGR1cmF0aW9uLm1hdGNoKGR1cmF0aW9uVW5pdFJlZ2V4KVswXTtcclxuICBsZXQgZHVyYXRpb25OdW06IGFueSA9IGR1cmF0aW9uLnJlcGxhY2UoZHVyYXRpb25Vbml0UmVnZXgsIFwiXCIpO1xyXG48L3NjcmlwdD5cclxuXHJcbjxzdHlsZT5cclxuICAud3JhcHBlciB7XHJcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICB3aWR0aDogdmFyKC0tc2l6ZSk7XHJcbiAgICBoZWlnaHQ6IHZhcigtLXNpemUpO1xyXG4gIH1cclxuICAuY2lyY2xlIHtcclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIHdpZHRoOiB2YXIoLS1zaXplKTtcclxuICAgIGhlaWdodDogdmFyKC0tc2l6ZSk7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1jb2xvcik7XHJcbiAgICBib3JkZXItcmFkaXVzOiAxMDAlO1xyXG4gICAgb3BhY2l0eTogMC42O1xyXG4gICAgdG9wOiAwO1xyXG4gICAgbGVmdDogMDtcclxuICAgIGFuaW1hdGlvbi1maWxsLW1vZGU6IGJvdGg7XHJcbiAgICBhbmltYXRpb24tbmFtZTogYm91bmNlICFpbXBvcnRhbnQ7XHJcbiAgfVxyXG4gIEBrZXlmcmFtZXMgYm91bmNlIHtcclxuICAgIDAlLFxyXG4gICAgMTAwJSB7XHJcbiAgICAgIHRyYW5zZm9ybTogc2NhbGUoMCk7XHJcbiAgICB9XHJcbiAgICA1MCUge1xyXG4gICAgICB0cmFuc2Zvcm06IHNjYWxlKDEpO1xyXG4gICAgfVxyXG4gIH1cclxuPC9zdHlsZT5cclxuXHJcbjxkaXYgY2xhc3M9XCJ3cmFwcGVyXCIgc3R5bGU9XCItLXNpemU6IHtzaXplfXt1bml0fTsgLS1jb2xvcjoge2NvbG9yfVwiPlxyXG4gIHsjZWFjaCByYW5nZSgyLCAxKSBhcyB2ZXJzaW9ufVxyXG4gICAgPGRpdlxyXG4gICAgICBjbGFzcz1cImNpcmNsZVwiXHJcbiAgICAgIHN0eWxlPVwiYW5pbWF0aW9uOiB7ZHVyYXRpb259IHt2ZXJzaW9uID09PSAxID8gYCR7KGR1cmF0aW9uTnVtIC0gMC4xKSAvIDJ9JHtkdXJhdGlvblVuaXR9YCA6IGAwc2B9IGluZmluaXRlIGVhc2UtaW4tb3V0XCIgLz5cclxuICB7L2VhY2h9XHJcbjwvZGl2PlxyXG4iLCAiPHNjcmlwdD5cclxuICBleHBvcnQgbGV0IHNpemUgPSBcIjQwcHhcIjtcclxuICBleHBvcnQgbGV0IGR1cmF0aW9uID0gXCIzc1wiO1xyXG4gICQ6IHN0eWxlcyA9IFtgd2lkdGg6ICR7c2l6ZX1gLCBgaGVpZ2h0OiAke3NpemV9YF0uam9pbihcIjtcIik7XHJcbjwvc2NyaXB0PlxyXG5cclxuPGRpdiBjbGFzcz1cInNwaW5uZXIgc3Bpbm5lci0tZ29vZ2xlXCIgc3R5bGU9XCItLWR1cmF0aW9uOiB7ZHVyYXRpb259OyB7c3R5bGVzfVwiPjwvZGl2PlxyXG5cclxuPHN0eWxlPlxyXG4gICoge1xyXG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgIHRleHQtaW5kZW50OiAtOTk5OXB4O1xyXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4gICAgYmFja2dyb3VuZDogI2Y4NjtcclxuICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcclxuICAgIHRyYW5zZm9ybTogcm90YXRlWig5MGRlZyk7XHJcbiAgICB0cmFuc2Zvcm0tb3JpZ2luOiA1MCUgNTAlO1xyXG4gICAgYW5pbWF0aW9uOiBwbHVzLWxvYWRlci1iYWNrZ3JvdW5kIHZhcigtLWR1cmF0aW9uKSBpbmZpbml0ZSBlYXNlLWluLW91dDtcclxuICB9XHJcblxyXG4gICo6YWZ0ZXIge1xyXG4gICAgYmFja2dyb3VuZDogI2Y4NjtcclxuICAgIGJvcmRlci1yYWRpdXM6IDUwJSAwIDAgNTAlO1xyXG4gICAgY29udGVudDogXCJcIjtcclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIHJpZ2h0OiA1MCU7XHJcbiAgICB0b3A6IDA7XHJcbiAgICB3aWR0aDogNTAlO1xyXG4gICAgaGVpZ2h0OiAxMDAlO1xyXG4gICAgdHJhbnNmb3JtLW9yaWdpbjogMTAwJSA1MCU7XHJcbiAgICBhbmltYXRpb246IHBsdXMtbG9hZGVyLXRvcCB2YXIoLS1kdXJhdGlvbikgaW5maW5pdGUgbGluZWFyO1xyXG4gIH1cclxuXHJcbiAgKjpiZWZvcmUge1xyXG4gICAgYmFja2dyb3VuZDogI2ZjNjtcclxuICAgIGJvcmRlci1yYWRpdXM6IDUwJSAwIDAgNTAlO1xyXG4gICAgY29udGVudDogXCJcIjtcclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIHJpZ2h0OiA1MCU7XHJcbiAgICB0b3A6IDA7XHJcbiAgICB3aWR0aDogNTAlO1xyXG4gICAgaGVpZ2h0OiAxMDAlO1xyXG4gICAgdHJhbnNmb3JtLW9yaWdpbjogMTAwJSA1MCU7XHJcbiAgICBhbmltYXRpb246IHBsdXMtbG9hZGVyLWJvdHRvbSB2YXIoLS1kdXJhdGlvbikgaW5maW5pdGUgbGluZWFyO1xyXG4gIH1cclxuXHJcbiAgQGtleWZyYW1lcyBwbHVzLWxvYWRlci10b3Age1xyXG4gICAgMi41JSB7XHJcbiAgICAgIGJhY2tncm91bmQ6ICNmODY7XHJcbiAgICAgIHRyYW5zZm9ybTogcm90YXRlWSgwZGVnKTtcclxuICAgICAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogZWFzZS1pbjtcclxuICAgIH1cclxuXHJcbiAgICAxMy43NSUge1xyXG4gICAgICBiYWNrZ3JvdW5kOiAjZmY0MzBkO1xyXG4gICAgICB0cmFuc2Zvcm06IHJvdGF0ZVkoOTBkZWcpO1xyXG4gICAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBzdGVwLXN0YXJ0O1xyXG4gICAgfVxyXG5cclxuICAgIDEzLjc2JSB7XHJcbiAgICAgIGJhY2tncm91bmQ6ICNmZmFlMGQ7XHJcbiAgICAgIHRyYW5zZm9ybTogcm90YXRlWSg5MGRlZyk7XHJcbiAgICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGVhc2Utb3V0O1xyXG4gICAgfVxyXG5cclxuICAgIDI1JSB7XHJcbiAgICAgIGJhY2tncm91bmQ6ICNmYzY7XHJcbiAgICAgIHRyYW5zZm9ybTogcm90YXRlWSgxODBkZWcpO1xyXG4gICAgfVxyXG5cclxuICAgIDI3LjUlIHtcclxuICAgICAgYmFja2dyb3VuZDogI2ZjNjtcclxuICAgICAgdHJhbnNmb3JtOiByb3RhdGVZKDE4MGRlZyk7XHJcbiAgICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGVhc2UtaW47XHJcbiAgICB9XHJcblxyXG4gICAgNDEuMjUlIHtcclxuICAgICAgYmFja2dyb3VuZDogI2ZmYWUwZDtcclxuICAgICAgdHJhbnNmb3JtOiByb3RhdGVZKDkwZGVnKTtcclxuICAgICAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogc3RlcC1zdGFydDtcclxuICAgIH1cclxuXHJcbiAgICA0MS4yNiUge1xyXG4gICAgICBiYWNrZ3JvdW5kOiAjMmNjNjQyO1xyXG4gICAgICB0cmFuc2Zvcm06IHJvdGF0ZVkoOTBkZWcpO1xyXG4gICAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBlYXNlLW91dDtcclxuICAgIH1cclxuXHJcbiAgICA1MCUge1xyXG4gICAgICBiYWNrZ3JvdW5kOiAjNmQ3O1xyXG4gICAgICB0cmFuc2Zvcm06IHJvdGF0ZVkoMGRlZyk7XHJcbiAgICB9XHJcblxyXG4gICAgNTIuNSUge1xyXG4gICAgICBiYWNrZ3JvdW5kOiAjNmQ3O1xyXG4gICAgICB0cmFuc2Zvcm06IHJvdGF0ZVkoMGRlZyk7XHJcbiAgICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGVhc2UtaW47XHJcbiAgICB9XHJcblxyXG4gICAgNjMuNzUlIHtcclxuICAgICAgYmFja2dyb3VuZDogIzJjYzY0MjtcclxuICAgICAgdHJhbnNmb3JtOiByb3RhdGVZKDkwZGVnKTtcclxuICAgICAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogc3RlcC1zdGFydDtcclxuICAgIH1cclxuXHJcbiAgICA2My43NiUge1xyXG4gICAgICBiYWNrZ3JvdW5kOiAjMTM4NmQyO1xyXG4gICAgICB0cmFuc2Zvcm06IHJvdGF0ZVkoOTBkZWcpO1xyXG4gICAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBlYXNlLW91dDtcclxuICAgIH1cclxuXHJcbiAgICA3NSUge1xyXG4gICAgICBiYWNrZ3JvdW5kOiAjNGFlO1xyXG4gICAgICB0cmFuc2Zvcm06IHJvdGF0ZVkoMTgwZGVnKTtcclxuICAgIH1cclxuXHJcbiAgICA3Ny41JSB7XHJcbiAgICAgIGJhY2tncm91bmQ6ICM0YWU7XHJcbiAgICAgIHRyYW5zZm9ybTogcm90YXRlWSgxODBkZWcpO1xyXG4gICAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBlYXNlLWluO1xyXG4gICAgfVxyXG5cclxuICAgIDkxLjI1JSB7XHJcbiAgICAgIGJhY2tncm91bmQ6ICMxMzg2ZDI7XHJcbiAgICAgIHRyYW5zZm9ybTogcm90YXRlWSg5MGRlZyk7XHJcbiAgICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IHN0ZXAtc3RhcnQ7XHJcbiAgICB9XHJcblxyXG4gICAgOTEuMjYlIHtcclxuICAgICAgYmFja2dyb3VuZDogI2ZmNDMwZDtcclxuICAgICAgdHJhbnNmb3JtOiByb3RhdGVZKDkwZGVnKTtcclxuICAgICAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogZWFzZS1pbjtcclxuICAgIH1cclxuXHJcbiAgICAxMDAlIHtcclxuICAgICAgYmFja2dyb3VuZDogI2Y4NjtcclxuICAgICAgdHJhbnNmb3JtOiByb3RhdGVZKDBkZWcpO1xyXG4gICAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBzdGVwLXN0YXJ0O1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgQGtleWZyYW1lcyBwbHVzLWxvYWRlci1ib3R0b20ge1xyXG4gICAgMCUge1xyXG4gICAgICBiYWNrZ3JvdW5kOiAjZmM2O1xyXG4gICAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBzdGVwLXN0YXJ0O1xyXG4gICAgfVxyXG5cclxuICAgIDUwJSB7XHJcbiAgICAgIGJhY2tncm91bmQ6ICNmYzY7XHJcbiAgICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IHN0ZXAtc3RhcnQ7XHJcbiAgICB9XHJcblxyXG4gICAgNzUlIHtcclxuICAgICAgYmFja2dyb3VuZDogIzRhZTtcclxuICAgICAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogc3RlcC1zdGFydDtcclxuICAgIH1cclxuXHJcbiAgICAxMDAlIHtcclxuICAgICAgYmFja2dyb3VuZDogIzRhZTtcclxuICAgICAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogc3RlcC1zdGFydDtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIEBrZXlmcmFtZXMgcGx1cy1sb2FkZXItYmFja2dyb3VuZCB7XHJcbiAgICAwJSB7XHJcbiAgICAgIGJhY2tncm91bmQ6ICNmODY7XHJcbiAgICAgIHRyYW5zZm9ybTogcm90YXRlWigxODBkZWcpO1xyXG4gICAgfVxyXG5cclxuICAgIDI1JSB7XHJcbiAgICAgIGJhY2tncm91bmQ6ICNmODY7XHJcbiAgICAgIHRyYW5zZm9ybTogcm90YXRlWigxODBkZWcpO1xyXG4gICAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBzdGVwLXN0YXJ0O1xyXG4gICAgfVxyXG5cclxuICAgIDI3LjUlIHtcclxuICAgICAgYmFja2dyb3VuZDogIzZkNztcclxuICAgICAgdHJhbnNmb3JtOiByb3RhdGVaKDkwZGVnKTtcclxuICAgIH1cclxuXHJcbiAgICA1MCUge1xyXG4gICAgICBiYWNrZ3JvdW5kOiAjNmQ3O1xyXG4gICAgICB0cmFuc2Zvcm06IHJvdGF0ZVooOTBkZWcpO1xyXG4gICAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBzdGVwLXN0YXJ0O1xyXG4gICAgfVxyXG5cclxuICAgIDUyLjUlIHtcclxuICAgICAgYmFja2dyb3VuZDogIzZkNztcclxuICAgICAgdHJhbnNmb3JtOiByb3RhdGVaKDBkZWcpO1xyXG4gICAgfVxyXG5cclxuICAgIDc1JSB7XHJcbiAgICAgIGJhY2tncm91bmQ6ICM2ZDc7XHJcbiAgICAgIHRyYW5zZm9ybTogcm90YXRlWigwZGVnKTtcclxuICAgICAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogc3RlcC1zdGFydDtcclxuICAgIH1cclxuXHJcbiAgICA3Ny41JSB7XHJcbiAgICAgIGJhY2tncm91bmQ6ICNmODY7XHJcbiAgICAgIHRyYW5zZm9ybTogcm90YXRlWigyNzBkZWcpO1xyXG4gICAgfVxyXG5cclxuICAgIDEwMCUge1xyXG4gICAgICBiYWNrZ3JvdW5kOiAjZjg2O1xyXG4gICAgICB0cmFuc2Zvcm06IHJvdGF0ZVooMjcwZGVnKTtcclxuICAgICAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogc3RlcC1zdGFydDtcclxuICAgIH1cclxuICB9XHJcbjwvc3R5bGU+XHJcbiIsICI8c2NyaXB0IGxhbmc9XCJ0c1wiPlxyXG4gIGltcG9ydCB0eXBlIHsgU3Bpbm5lclR5cGVzIH0gZnJvbSBcIi4vdHlwZXMvc3Bpbm5lci50eXBlXCI7XHJcbiAgZXhwb3J0IGxldCBjb2xvcjogU3Bpbm5lclR5cGVzW1wiY29sb3JcIl0gPSBcIiNGRjNFMDBcIjtcclxuICBleHBvcnQgbGV0IHVuaXQ6IFNwaW5uZXJUeXBlc1tcInVuaXRcIl0gPSBcInB4XCI7XHJcbiAgZXhwb3J0IGxldCBkdXJhdGlvbjogU3Bpbm5lclR5cGVzW1wiZHVyYXRpb25cIl0gPSBcIjFzXCI7XHJcbiAgZXhwb3J0IGxldCBzaXplOiBTcGlubmVyVHlwZXNbXCJzaXplXCJdID0gXCI2MFwiO1xyXG48L3NjcmlwdD5cclxuXHJcbjxzdHlsZT5cclxuICAud3JhcHBlciB7XHJcbiAgICB3aWR0aDogdmFyKC0tc2l6ZSk7XHJcbiAgICBoZWlnaHQ6IHZhcigtLXNpemUpO1xyXG4gIH1cclxuICAuY2lyY2xlIHtcclxuICAgIHdpZHRoOiB2YXIoLS1zaXplKTtcclxuICAgIGhlaWdodDogdmFyKC0tc2l6ZSk7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1jb2xvcik7XHJcbiAgICBhbmltYXRpb24tZHVyYXRpb246IHZhcigtLWR1cmF0aW9uKTtcclxuICAgIGJvcmRlci1yYWRpdXM6IDEwMCU7XHJcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XHJcbiAgICBhbmltYXRpb246IHNjYWxlT3V0IHZhcigtLWR1cmF0aW9uKSBlYXNlLWluLW91dCBpbmZpbml0ZTtcclxuICB9XHJcbiAgQGtleWZyYW1lcyBzY2FsZU91dCB7XHJcbiAgICAwJSB7XHJcbiAgICAgIHRyYW5zZm9ybTogc2NhbGUoMCk7XHJcbiAgICB9XHJcbiAgICAxMDAlIHtcclxuICAgICAgdHJhbnNmb3JtOiBzY2FsZSgxKTtcclxuICAgICAgb3BhY2l0eTogMDtcclxuICAgIH1cclxuICB9XHJcbjwvc3R5bGU+XHJcblxyXG48ZGl2XHJcbiAgY2xhc3M9XCJ3cmFwcGVyXCJcclxuICBzdHlsZT1cIi0tc2l6ZToge3NpemV9e3VuaXR9OyAtLWNvbG9yOiB7Y29sb3J9OyAtLWR1cmF0aW9uOiB7ZHVyYXRpb259OyAtLWR1cmF0aW9uOiB7ZHVyYXRpb259O1wiPlxyXG4gIDxkaXYgY2xhc3M9XCJjaXJjbGVcIiAvPlxyXG48L2Rpdj5cclxuIiwgIjxzY3JpcHQgbGFuZz1cInRzXCI+XHJcbiAgaW1wb3J0IHR5cGUgeyBTcGlubmVyVHlwZXMgfSBmcm9tIFwiLi90eXBlcy9zcGlubmVyLnR5cGVcIjtcclxuICBleHBvcnQgbGV0IGNvbG9yOiBTcGlubmVyVHlwZXNbXCJjb2xvclwiXSA9IFwiI0ZGM0UwMFwiO1xyXG4gIGV4cG9ydCBsZXQgdW5pdDogU3Bpbm5lclR5cGVzW1widW5pdFwiXSA9IFwicHhcIjtcclxuICBleHBvcnQgbGV0IGR1cmF0aW9uOiBTcGlubmVyVHlwZXNbXCJkdXJhdGlvblwiXSA9IFwiNHNcIjtcclxuICBleHBvcnQgbGV0IHNpemU6IFNwaW5uZXJUeXBlc1tcInNpemVcIl0gPSBcIjYwXCI7XHJcbiAgZXhwb3J0IGxldCBzdHJva2UgPSArc2l6ZSAvIDEyICsgdW5pdDtcclxuPC9zY3JpcHQ+XHJcblxyXG48c3R5bGU+XHJcbiAgLndyYXBwZXIge1xyXG4gICAgd2lkdGg6IHZhcigtLXNpemUpO1xyXG4gICAgaGVpZ2h0OiB2YXIoLS1zdHJva2UpO1xyXG4gICAgdHJhbnNmb3JtOiBzY2FsZShjYWxjKHZhcigtLWZsb2F0U2l6ZSkgLyA3NSkpO1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICB9XHJcbiAgLmxpbmUge1xyXG4gICAgd2lkdGg6IHZhcigtLXNpemUpO1xyXG4gICAgaGVpZ2h0OiB2YXIoLS1zdHJva2UpO1xyXG4gICAgYmFja2dyb3VuZDogdmFyKC0tY29sb3IpO1xyXG4gICAgYm9yZGVyLXJhZGl1czogdmFyKC0tc3Ryb2tlKTtcclxuICAgIHRyYW5zZm9ybS1vcmlnaW46IGNlbnRlciBjZW50ZXI7XHJcbiAgICBhbmltYXRpb246IHNwaW5lTGluZSB2YXIoLS1kdXJhdGlvbikgZWFzZSBpbmZpbml0ZTtcclxuICB9XHJcbiAgQGtleWZyYW1lcyBzcGluZUxpbmUge1xyXG4gICAgMCUge1xyXG4gICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgtMjBkZWcpO1xyXG4gICAgICBoZWlnaHQ6IDVweDtcclxuICAgICAgd2lkdGg6IDc1cHg7XHJcbiAgICB9XHJcbiAgICA1JSB7XHJcbiAgICAgIGhlaWdodDogNXB4O1xyXG4gICAgICB3aWR0aDogNzVweDtcclxuICAgIH1cclxuICAgIDMwJSB7XHJcbiAgICAgIHRyYW5zZm9ybTogcm90YXRlKDM4MGRlZyk7XHJcbiAgICAgIGhlaWdodDogNXB4O1xyXG4gICAgICB3aWR0aDogNzVweDtcclxuICAgIH1cclxuICAgIDQwJSB7XHJcbiAgICAgIHRyYW5zZm9ybTogcm90YXRlKDM2MGRlZyk7XHJcbiAgICAgIGhlaWdodDogNXB4O1xyXG4gICAgICB3aWR0aDogNzVweDtcclxuICAgIH1cclxuICAgIDU1JSB7XHJcbiAgICAgIHRyYW5zZm9ybTogcm90YXRlKDBkZWcpO1xyXG4gICAgICBoZWlnaHQ6IDVweDtcclxuICAgICAgd2lkdGg6IDVweDtcclxuICAgIH1cclxuICAgIDY1JSB7XHJcbiAgICAgIHRyYW5zZm9ybTogcm90YXRlKDBkZWcpO1xyXG4gICAgICBoZWlnaHQ6IDVweDtcclxuICAgICAgd2lkdGg6IDg1cHg7XHJcbiAgICB9XHJcbiAgICA2OCUge1xyXG4gICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTtcclxuICAgICAgaGVpZ2h0OiA1cHg7XHJcbiAgICB9XHJcbiAgICA3NSUge1xyXG4gICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTtcclxuICAgICAgaGVpZ2h0OiA1cHg7XHJcbiAgICAgIHdpZHRoOiAxcHg7XHJcbiAgICB9XHJcbiAgICA3OCUge1xyXG4gICAgICBoZWlnaHQ6IDVweDtcclxuICAgICAgd2lkdGg6IDVweDtcclxuICAgIH1cclxuICAgIDkwJSB7XHJcbiAgICAgIGhlaWdodDogNXB4O1xyXG4gICAgICB3aWR0aDogNzVweDtcclxuICAgICAgdHJhbnNmb3JtOiByb3RhdGUoMGRlZyk7XHJcbiAgICB9XHJcbiAgICA5OSUsXHJcbiAgICAxMDAlIHtcclxuICAgICAgaGVpZ2h0OiA1cHg7XHJcbiAgICAgIHdpZHRoOiA3NXB4O1xyXG4gICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgtMjBkZWcpO1xyXG4gICAgfVxyXG4gIH1cclxuPC9zdHlsZT5cclxuXHJcbjxkaXZcclxuICBjbGFzcz1cIndyYXBwZXJcIlxyXG4gIHN0eWxlPVwiLS1zaXplOiB7c2l6ZX17dW5pdH07IC0tY29sb3I6IHtjb2xvcn07IC0tc3Ryb2tlOiB7c3Ryb2tlfTsgLS1mbG9hdFNpemU6IHtzaXplfTsgLS1kdXJhdGlvbjoge2R1cmF0aW9ufVwiPlxyXG4gIDxkaXYgY2xhc3M9XCJsaW5lXCIgLz5cclxuPC9kaXY+XHJcbiIsICI8c2NyaXB0IGxhbmc9XCJ0c1wiPlxyXG4gIGltcG9ydCB0eXBlIHsgU3Bpbm5lclR5cGVzIH0gZnJvbSBcIi4vdHlwZXMvc3Bpbm5lci50eXBlXCI7XHJcbiAgaW1wb3J0IHsgcmFuZ2UsIGR1cmF0aW9uVW5pdFJlZ2V4IH0gZnJvbSBcIi4vdXRpbHNcIjtcclxuICBleHBvcnQgbGV0IGNvbG9yOiBTcGlubmVyVHlwZXNbXCJjb2xvclwiXSA9IFwiI0ZGM0UwMFwiO1xyXG4gIGV4cG9ydCBsZXQgdW5pdDogU3Bpbm5lclR5cGVzW1widW5pdFwiXSA9IFwicHhcIjtcclxuICBleHBvcnQgbGV0IGR1cmF0aW9uOiBTcGlubmVyVHlwZXNbXCJkdXJhdGlvblwiXSA9IFwiMS4yc1wiO1xyXG4gIGV4cG9ydCBsZXQgc2l6ZTogU3Bpbm5lclR5cGVzW1wic2l6ZVwiXSA9IFwiNjBcIjtcclxuXHJcbiAgbGV0IGR1cmF0aW9uVW5pdCA9IGR1cmF0aW9uLm1hdGNoKGR1cmF0aW9uVW5pdFJlZ2V4KVswXTtcclxuICBsZXQgZHVyYXRpb25OdW0gPSBkdXJhdGlvbi5yZXBsYWNlKGR1cmF0aW9uVW5pdFJlZ2V4LCBcIlwiKTtcclxuPC9zY3JpcHQ+XHJcblxyXG48c3R5bGU+XHJcbiAgLndyYXBwZXIge1xyXG4gICAgaGVpZ2h0OiB2YXIoLS1zaXplKTtcclxuICAgIHdpZHRoOiB2YXIoLS1zaXplKTtcclxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICAgIGZvbnQtc2l6ZTogMTBweDtcclxuICB9XHJcbiAgLnJlY3Qge1xyXG4gICAgaGVpZ2h0OiAxMDAlO1xyXG4gICAgd2lkdGg6IDEwJTtcclxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcclxuICAgIG1hcmdpbi1yaWdodDogNHB4O1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tY29sb3IpO1xyXG4gICAgYW5pbWF0aW9uOiBzdHJldGNoIHZhcigtLWR1cmF0aW9uKSBlYXNlLWluLW91dCBpbmZpbml0ZTtcclxuICB9XHJcbiAgQGtleWZyYW1lcyBzdHJldGNoIHtcclxuICAgIDAlLFxyXG4gICAgNDAlLFxyXG4gICAgMTAwJSB7XHJcbiAgICAgIHRyYW5zZm9ybTogc2NhbGVZKDAuNCk7XHJcbiAgICB9XHJcbiAgICAyMCUge1xyXG4gICAgICB0cmFuc2Zvcm06IHNjYWxlWSgxKTtcclxuICAgIH1cclxuICB9XHJcbjwvc3R5bGU+XHJcblxyXG48ZGl2XHJcbiAgY2xhc3M9XCJ3cmFwcGVyXCJcclxuICBzdHlsZT1cIi0tc2l6ZToge3NpemV9e3VuaXR9OyAtLWNvbG9yOiB7Y29sb3J9OyAtLWR1cmF0aW9uOiB7ZHVyYXRpb259XCI+XHJcbiAgeyNlYWNoIHJhbmdlKDUsIDEpIGFzIHZlcnNpb259XHJcbiAgICA8ZGl2XHJcbiAgICAgIGNsYXNzPVwicmVjdFwiXHJcbiAgICAgIHN0eWxlPVwiYW5pbWF0aW9uLWRlbGF5OiB7KHZlcnNpb24gLSAxKSAqICgrZHVyYXRpb25OdW0gLyAxMil9e2R1cmF0aW9uVW5pdH1cIiAvPlxyXG4gIHsvZWFjaH1cclxuPC9kaXY+XHJcbiIsICI8c2NyaXB0IGxhbmc9XCJ0c1wiPlxyXG4gIGltcG9ydCB0eXBlIHsgU3Bpbm5lclR5cGVzIH0gZnJvbSBcIi4vdHlwZXMvc3Bpbm5lci50eXBlXCI7XHJcbiAgaW1wb3J0IHsgY2FsY3VsYXRlUmdiYSwgcmFuZ2UgfSBmcm9tIFwiLi91dGlsc1wiO1xyXG4gIGV4cG9ydCBsZXQgY29sb3I6IFNwaW5uZXJUeXBlc1tcImNvbG9yXCJdID0gXCIjRkYzRTAwXCI7XHJcbiAgZXhwb3J0IGxldCB1bml0OiBTcGlubmVyVHlwZXNbXCJ1bml0XCJdID0gXCJweFwiO1xyXG4gIGV4cG9ydCBsZXQgZHVyYXRpb246IFNwaW5uZXJUeXBlc1tcImR1cmF0aW9uXCJdID0gXCIyLjFzXCI7XHJcbiAgZXhwb3J0IGxldCBzaXplOiBTcGlubmVyVHlwZXNbXCJzaXplXCJdID0gXCI2MFwiO1xyXG4gIGxldCByZ2JhOiBzdHJpbmc7XHJcbiAgJDogcmdiYSA9IGNhbGN1bGF0ZVJnYmEoY29sb3IsIDAuMik7XHJcbjwvc2NyaXB0PlxyXG5cclxuPHN0eWxlPlxyXG4gIC53cmFwcGVyIHtcclxuICAgIGhlaWdodDogY2FsYyh2YXIoLS1zaXplKSAvIDE1KTtcclxuICAgIHdpZHRoOiBjYWxjKHZhcigtLXNpemUpICogMik7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1yZ2JhKTtcclxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgIG92ZXJmbG93OiBoaWRkZW47XHJcbiAgICBiYWNrZ3JvdW5kLWNsaXA6IHBhZGRpbmctYm94O1xyXG4gIH1cclxuICAubGluZXMge1xyXG4gICAgaGVpZ2h0OiBjYWxjKHZhcigtLXNpemUpIC8gMTUpO1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tY29sb3IpO1xyXG4gIH1cclxuXHJcbiAgLnNtYWxsLWxpbmVzIHtcclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIG92ZXJmbG93OiBoaWRkZW47XHJcbiAgICBiYWNrZ3JvdW5kLWNsaXA6IHBhZGRpbmctYm94O1xyXG4gICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICBib3JkZXItcmFkaXVzOiAycHg7XHJcbiAgICB3aWxsLWNoYW5nZTogbGVmdCwgcmlnaHQ7XHJcbiAgICBhbmltYXRpb24tZmlsbC1tb2RlOiBmb3J3YXJkcztcclxuICB9XHJcbiAgLnNtYWxsLWxpbmVzLlxcMzEge1xyXG4gICAgYW5pbWF0aW9uOiB2YXIoLS1kdXJhdGlvbikgY3ViaWMtYmV6aWVyKDAuNjUsIDAuODE1LCAwLjczNSwgMC4zOTUpIDBzXHJcbiAgICAgIGluZmluaXRlIG5vcm1hbCBub25lIHJ1bm5pbmcgbG9uZztcclxuICB9XHJcbiAgLnNtYWxsLWxpbmVzLlxcMzIge1xyXG4gICAgYW5pbWF0aW9uOiB2YXIoLS1kdXJhdGlvbikgY3ViaWMtYmV6aWVyKDAuMTY1LCAwLjg0LCAwLjQ0LCAxKVxyXG4gICAgICBjYWxjKCh2YXIoLS1kdXJhdGlvbikrMC4xKSAvIDIpIGluZmluaXRlIG5vcm1hbCBub25lIHJ1bm5pbmcgc2hvcnQ7XHJcbiAgfVxyXG5cclxuICBAa2V5ZnJhbWVzIGxvbmcge1xyXG4gICAgMCUge1xyXG4gICAgICBsZWZ0OiAtMzUlO1xyXG4gICAgICByaWdodDogMTAwJTtcclxuICAgIH1cclxuICAgIDYwJSB7XHJcbiAgICAgIGxlZnQ6IDEwMCU7XHJcbiAgICAgIHJpZ2h0OiAtOTAlO1xyXG4gICAgfVxyXG4gICAgMTAwJSB7XHJcbiAgICAgIGxlZnQ6IDEwMCU7XHJcbiAgICAgIHJpZ2h0OiAtOTAlO1xyXG4gICAgfVxyXG4gIH1cclxuICBAa2V5ZnJhbWVzIHNob3J0IHtcclxuICAgIDAlIHtcclxuICAgICAgbGVmdDogLTIwMCU7XHJcbiAgICAgIHJpZ2h0OiAxMDAlO1xyXG4gICAgfVxyXG4gICAgNjAlIHtcclxuICAgICAgbGVmdDogMTA3JTtcclxuICAgICAgcmlnaHQ6IC04JTtcclxuICAgIH1cclxuICAgIDEwMCUge1xyXG4gICAgICBsZWZ0OiAxMDclO1xyXG4gICAgICByaWdodDogLTglO1xyXG4gICAgfVxyXG4gIH1cclxuPC9zdHlsZT5cclxuXHJcbjxkaXYgY2xhc3M9XCJ3cmFwcGVyXCIgc3R5bGU9XCItLXNpemU6IHtzaXplfXt1bml0fTsgLS1yZ2JhOntyZ2JhfVwiPlxyXG4gIHsjZWFjaCByYW5nZSgyLCAxKSBhcyB2ZXJzaW9ufVxyXG4gICAgPGRpdlxyXG4gICAgICBjbGFzcz1cImxpbmVzIHNtYWxsLWxpbmVzIHt2ZXJzaW9ufVwiXHJcbiAgICAgIHN0eWxlPVwiLS1jb2xvcjoge2NvbG9yfTsgLS1kdXJhdGlvbjoge2R1cmF0aW9ufTtcIiAvPlxyXG4gIHsvZWFjaH1cclxuPC9kaXY+XHJcbiIsICI8c2NyaXB0IGxhbmc9XCJ0c1wiPlxyXG4gIGltcG9ydCB0eXBlIHsgU3Bpbm5lclR5cGVzIH0gZnJvbSBcIi4vdHlwZXMvc3Bpbm5lci50eXBlXCI7XHJcbiAgaW1wb3J0IHsgcmFuZ2UsIGR1cmF0aW9uVW5pdFJlZ2V4IH0gZnJvbSBcIi4vdXRpbHNcIjtcclxuICBleHBvcnQgbGV0IGNvbG9yOiBTcGlubmVyVHlwZXNbXCJjb2xvclwiXSA9IFwiI0ZGM0UwMFwiO1xyXG4gIGV4cG9ydCBsZXQgdW5pdDogU3Bpbm5lclR5cGVzW1widW5pdFwiXSA9IFwicHhcIjtcclxuICBleHBvcnQgbGV0IGR1cmF0aW9uOiBTcGlubmVyVHlwZXNbXCJkdXJhdGlvblwiXSA9IFwiMXNcIjtcclxuICBleHBvcnQgbGV0IHNpemU6IFNwaW5uZXJUeXBlc1tcInNpemVcIl0gPSBcIjYwXCI7XHJcblxyXG4gIGxldCBkdXJhdGlvblVuaXQgPSBkdXJhdGlvbi5tYXRjaChkdXJhdGlvblVuaXRSZWdleClbMF07XHJcbiAgbGV0IGR1cmF0aW9uTnVtOiBhbnkgPSBkdXJhdGlvbi5yZXBsYWNlKGR1cmF0aW9uVW5pdFJlZ2V4LCBcIlwiKTtcclxuPC9zY3JpcHQ+XHJcblxyXG48c3R5bGU+XHJcbiAgLndyYXBwZXIge1xyXG4gICAgd2lkdGg6IHZhcigtLXNpemUpO1xyXG4gICAgaGVpZ2h0OiB2YXIoLS1zaXplKTtcclxuICB9XHJcbiAgLmNpcmNsZSB7XHJcbiAgICBib3JkZXItcmFkaXVzOiAxMDAlO1xyXG4gICAgYW5pbWF0aW9uLWZpbGwtbW9kZTogYm90aDtcclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIG9wYWNpdHk6IDA7XHJcbiAgICB3aWR0aDogdmFyKC0tc2l6ZSk7XHJcbiAgICBoZWlnaHQ6IHZhcigtLXNpemUpO1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tY29sb3IpO1xyXG4gICAgYW5pbWF0aW9uOiBib3VuY2UgdmFyKC0tZHVyYXRpb24pIGxpbmVhciBpbmZpbml0ZTtcclxuICB9XHJcbiAgQGtleWZyYW1lcyBib3VuY2Uge1xyXG4gICAgMCUge1xyXG4gICAgICBvcGFjaXR5OiAwO1xyXG4gICAgICB0cmFuc2Zvcm06IHNjYWxlKDApO1xyXG4gICAgfVxyXG4gICAgNSUge1xyXG4gICAgICBvcGFjaXR5OiAxO1xyXG4gICAgfVxyXG4gICAgMTAwJSB7XHJcbiAgICAgIG9wYWNpdHk6IDA7XHJcbiAgICAgIHRyYW5zZm9ybTogc2NhbGUoMSk7XHJcbiAgICB9XHJcbiAgfVxyXG48L3N0eWxlPlxyXG5cclxuPGRpdlxyXG4gIGNsYXNzPVwid3JhcHBlclwiXHJcbiAgc3R5bGU9XCItLXNpemU6IHtzaXplfXt1bml0fTsgLS1jb2xvcjoge2NvbG9yfTsgLS1kdXJhdGlvbjoge2R1cmF0aW9ufTtcIj5cclxuICB7I2VhY2ggcmFuZ2UoMywgMSkgYXMgdmVyc2lvbn1cclxuICAgIDxkaXZcclxuICAgICAgY2xhc3M9XCJjaXJjbGVcIlxyXG4gICAgICBzdHlsZT1cImFuaW1hdGlvbi1kZWxheTogeyhkdXJhdGlvbk51bSAvIDMpICogKHZlcnNpb24gLSAxKSArIGR1cmF0aW9uVW5pdH07XCIgLz5cclxuICB7L2VhY2h9XHJcbjwvZGl2PlxyXG4iLCAiPHNjcmlwdCBsYW5nPVwidHNcIj5cclxuICBpbXBvcnQgdHlwZSB7IFNwaW5uZXJUeXBlcyB9IGZyb20gXCIuL3R5cGVzL3NwaW5uZXIudHlwZVwiO1xyXG4gIGltcG9ydCB7IHJhbmdlIH0gZnJvbSBcIi4vdXRpbHNcIjtcclxuICBleHBvcnQgbGV0IGNvbG9yOiBTcGlubmVyVHlwZXNbXCJjb2xvclwiXSA9IFwiI0ZGM0UwMFwiO1xyXG4gIGV4cG9ydCBsZXQgdW5pdDogU3Bpbm5lclR5cGVzW1widW5pdFwiXSA9IFwicHhcIjtcclxuICBleHBvcnQgbGV0IGR1cmF0aW9uOiBTcGlubmVyVHlwZXNbXCJkdXJhdGlvblwiXSA9IFwiMnNcIjtcclxuICBleHBvcnQgbGV0IHNpemU6IFNwaW5uZXJUeXBlc1tcInNpemVcIl0gPSBcIjYwXCI7XHJcbjwvc2NyaXB0PlxyXG5cclxuPHN0eWxlPlxyXG4gIC53cmFwcGVyIHtcclxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgIHdpZHRoOiB2YXIoLS1zaXplKTtcclxuICAgIGhlaWdodDogdmFyKC0tc2l6ZSk7XHJcbiAgfVxyXG4gIC5ib3JkZXIge1xyXG4gICAgYm9yZGVyLWNvbG9yOiB2YXIoLS1jb2xvcik7XHJcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICB0b3A6IDBweDtcclxuICAgIGxlZnQ6IDBweDtcclxuICAgIHdpZHRoOiB2YXIoLS1zaXplKTtcclxuICAgIGhlaWdodDogdmFyKC0tc2l6ZSk7XHJcbiAgICBvcGFjaXR5OiAwLjQ7XHJcbiAgICBwZXJzcGVjdGl2ZTogODAwcHg7XHJcbiAgICBib3JkZXItd2lkdGg6IDZweDtcclxuICAgIGJvcmRlci1zdHlsZTogc29saWQ7XHJcbiAgICBib3JkZXItaW1hZ2U6IGluaXRpYWw7XHJcbiAgICBib3JkZXItcmFkaXVzOiAxMDAlO1xyXG4gIH1cclxuICAuYm9yZGVyLlxcMzEge1xyXG4gICAgYW5pbWF0aW9uOiB2YXIoLS1kdXJhdGlvbikgbGluZWFyIDBzIGluZmluaXRlIG5vcm1hbCBub25lIHJ1bm5pbmcgcmluZ09uZTtcclxuICB9XHJcbiAgLmJvcmRlci5cXDMyIHtcclxuICAgIGFuaW1hdGlvbjogdmFyKC0tZHVyYXRpb24pIGxpbmVhciAwcyBpbmZpbml0ZSBub3JtYWwgbm9uZSBydW5uaW5nIHJpbmdUd287XHJcbiAgfVxyXG5cclxuICBAa2V5ZnJhbWVzIHJpbmdPbmUge1xyXG4gICAgMCUge1xyXG4gICAgICB0cmFuc2Zvcm06IHJvdGF0ZVgoMGRlZykgcm90YXRlWSgwZGVnKSByb3RhdGVaKDBkZWcpO1xyXG4gICAgfVxyXG4gICAgMTAwJSB7XHJcbiAgICAgIHRyYW5zZm9ybTogcm90YXRlWCgzNjBkZWcpIHJvdGF0ZVkoMTgwZGVnKSByb3RhdGVaKDM2MGRlZyk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIEBrZXlmcmFtZXMgcmluZ1R3byB7XHJcbiAgICAwJSB7XHJcbiAgICAgIHRyYW5zZm9ybTogcm90YXRlWCgwZGVnKSByb3RhdGVZKDBkZWcpIHJvdGF0ZVooMGRlZyk7XHJcbiAgICB9XHJcbiAgICAxMDAlIHtcclxuICAgICAgdHJhbnNmb3JtOiByb3RhdGVYKDE4MGRlZykgcm90YXRlWSgzNjBkZWcpIHJvdGF0ZVooMzYwZGVnKTtcclxuICAgIH1cclxuICB9XHJcbjwvc3R5bGU+XHJcblxyXG48ZGl2XHJcbiAgY2xhc3M9XCJ3cmFwcGVyXCJcclxuICBzdHlsZT1cIi0tc2l6ZToge3NpemV9e3VuaXR9OyAtLWNvbG9yOiB7Y29sb3J9OyAtLWR1cmF0aW9uOiB7ZHVyYXRpb259O1wiPlxyXG4gIHsjZWFjaCByYW5nZSgyLCAxKSBhcyB2ZXJzaW9ufVxyXG4gICAgPGRpdiBjbGFzcz1cImJvcmRlciB7dmVyc2lvbn1cIiAvPlxyXG4gIHsvZWFjaH1cclxuPC9kaXY+XHJcbiIsICI8c2NyaXB0IGxhbmc9XCJ0c1wiPlxyXG4gIGltcG9ydCB0eXBlIHsgU3Bpbm5lclR5cGVzIH0gZnJvbSBcIi4vdHlwZXMvc3Bpbm5lci50eXBlXCI7XHJcbiAgaW1wb3J0IHsgcmFuZ2UsIGR1cmF0aW9uVW5pdFJlZ2V4IH0gZnJvbSBcIi4vdXRpbHNcIjtcclxuICBleHBvcnQgbGV0IGNvbG9yOiBTcGlubmVyVHlwZXNbXCJjb2xvclwiXSA9IFwiI0ZGM0UwMFwiO1xyXG4gIGV4cG9ydCBsZXQgdW5pdDogU3Bpbm5lclR5cGVzW1widW5pdFwiXSA9IFwicHhcIjtcclxuICBleHBvcnQgbGV0IGR1cmF0aW9uOiBTcGlubmVyVHlwZXNbXCJkdXJhdGlvblwiXSA9IFwiMC42c1wiO1xyXG4gIGV4cG9ydCBsZXQgc2l6ZTogU3Bpbm5lclR5cGVzW1wic2l6ZVwiXSA9IFwiNjBcIjtcclxuXHJcbiAgbGV0IGR1cmF0aW9uVW5pdCA9IGR1cmF0aW9uLm1hdGNoKGR1cmF0aW9uVW5pdFJlZ2V4KVswXTtcclxuICBsZXQgZHVyYXRpb25OdW0gPSBkdXJhdGlvbi5yZXBsYWNlKGR1cmF0aW9uVW5pdFJlZ2V4LCBcIlwiKTtcclxuPC9zY3JpcHQ+XHJcblxyXG48c3R5bGU+XHJcbiAgLndyYXBwZXIge1xyXG4gICAgaGVpZ2h0OiB2YXIoLS1zaXplKTtcclxuICAgIHdpZHRoOiB2YXIoLS1zaXplKTtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgfVxyXG5cclxuICAuZG90IHtcclxuICAgIGhlaWdodDogdmFyKC0tZG90U2l6ZSk7XHJcbiAgICB3aWR0aDogdmFyKC0tZG90U2l6ZSk7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1jb2xvcik7XHJcbiAgICBtYXJnaW46IDJweDtcclxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcclxuICAgIGJvcmRlci1yYWRpdXM6IDEwMCU7XHJcbiAgICBhbmltYXRpb246IHN5bmMgdmFyKC0tZHVyYXRpb24pIGVhc2UtaW4tb3V0IGluZmluaXRlIGFsdGVybmF0ZSBib3RoIHJ1bm5pbmc7XHJcbiAgfVxyXG5cclxuICBALXdlYmtpdC1rZXlmcmFtZXMgc3luYyB7XHJcbiAgICAzMyUge1xyXG4gICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlWSgxMHB4KTtcclxuICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDEwcHgpO1xyXG4gICAgfVxyXG4gICAgNjYlIHtcclxuICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTEwcHgpO1xyXG4gICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTEwcHgpO1xyXG4gICAgfVxyXG4gICAgMTAwJSB7XHJcbiAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDApO1xyXG4gICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoMCk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIEBrZXlmcmFtZXMgc3luYyB7XHJcbiAgICAzMyUge1xyXG4gICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlWSgxMHB4KTtcclxuICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDEwcHgpO1xyXG4gICAgfVxyXG4gICAgNjYlIHtcclxuICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTEwcHgpO1xyXG4gICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTEwcHgpO1xyXG4gICAgfVxyXG4gICAgMTAwJSB7XHJcbiAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDApO1xyXG4gICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoMCk7XHJcbiAgICB9XHJcbiAgfVxyXG48L3N0eWxlPlxyXG5cclxuPGRpdiBjbGFzcz1cIndyYXBwZXJcIiBzdHlsZT1cIi0tc2l6ZTp7c2l6ZX17dW5pdH07IC0tZHVyYXRpb246IHtkdXJhdGlvbn07XCI+XHJcbiAgeyNlYWNoIHJhbmdlKDMsIDEpIGFzIGl9XHJcbiAgICA8ZGl2XHJcbiAgICAgIGNsYXNzPVwiZG90XCJcclxuICAgICAgc3R5bGU9XCItLWRvdFNpemU6eytzaXplICogMC4yNX17dW5pdH07IC0tY29sb3I6e2NvbG9yfTsgYW5pbWF0aW9uLWRlbGF5OiAge2kgKiAoK2R1cmF0aW9uTnVtIC8gMTApfXtkdXJhdGlvblVuaXR9O1wiIC8+XHJcbiAgey9lYWNofVxyXG48L2Rpdj5cclxuIiwgIjxzY3JpcHQgbGFuZz1cInRzXCI+XHJcbiAgaW1wb3J0IHR5cGUgeyBTcGlubmVyVHlwZXMgfSBmcm9tIFwiLi90eXBlcy9zcGlubmVyLnR5cGVcIjtcclxuICBleHBvcnQgbGV0IGNvbG9yOiBTcGlubmVyVHlwZXNbXCJjb2xvclwiXSA9IFwiI0ZGM0UwMFwiO1xyXG4gIGV4cG9ydCBsZXQgdW5pdDogU3Bpbm5lclR5cGVzW1widW5pdFwiXSA9IFwicHhcIjtcclxuICBleHBvcnQgbGV0IGR1cmF0aW9uOiBTcGlubmVyVHlwZXNbXCJkdXJhdGlvblwiXSA9IFwiM3NcIjtcclxuICBleHBvcnQgbGV0IHNpemU6IFNwaW5uZXJUeXBlc1tcInNpemVcIl0gPSBcIjYwXCI7XHJcbjwvc2NyaXB0PlxyXG5cclxuPHN0eWxlPlxyXG4gIC53cmFwcGVyIHtcclxuICAgIHdpZHRoOiB2YXIoLS1zaXplKTtcclxuICAgIGhlaWdodDogY2FsYyh2YXIoLS1zaXplKSAvIDIpO1xyXG4gICAgb3ZlcmZsb3c6IGhpZGRlbjtcclxuICB9XHJcbiAgLnJhaW5ib3cge1xyXG4gICAgd2lkdGg6IHZhcigtLXNpemUpO1xyXG4gICAgaGVpZ2h0OiB2YXIoLS1zaXplKTtcclxuICAgIGJvcmRlci1sZWZ0LWNvbG9yOiB0cmFuc3BhcmVudDtcclxuICAgIGJvcmRlci1ib3R0b20tY29sb3I6IHRyYW5zcGFyZW50O1xyXG4gICAgYm9yZGVyLXRvcC1jb2xvcjogdmFyKC0tY29sb3IpO1xyXG4gICAgYm9yZGVyLXJpZ2h0LWNvbG9yOiB2YXIoLS1jb2xvcik7XHJcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xyXG4gICAgdHJhbnNmb3JtOiByb3RhdGUoLTIwMGRlZyk7XHJcbiAgICBib3JkZXItcmFkaXVzOiA1MCU7XHJcbiAgICBib3JkZXItc3R5bGU6IHNvbGlkO1xyXG4gICAgYW5pbWF0aW9uOiB2YXIoLS1kdXJhdGlvbikgZWFzZS1pbi1vdXQgMHMgaW5maW5pdGUgbm9ybWFsIG5vbmUgcnVubmluZ1xyXG4gICAgICByb3RhdGU7XHJcbiAgfVxyXG4gIEBrZXlmcmFtZXMgcm90YXRlIHtcclxuICAgIDAlIHtcclxuICAgICAgYm9yZGVyLXdpZHRoOiAxMHB4O1xyXG4gICAgfVxyXG4gICAgMjUlIHtcclxuICAgICAgYm9yZGVyLXdpZHRoOiAzcHg7XHJcbiAgICB9XHJcbiAgICA1MCUge1xyXG4gICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgxMTVkZWcpO1xyXG4gICAgICBib3JkZXItd2lkdGg6IDEwcHg7XHJcbiAgICB9XHJcbiAgICA3NSUge1xyXG4gICAgICBib3JkZXItd2lkdGg6IDNweDtcclxuICAgIH1cclxuICAgIDEwMCUge1xyXG4gICAgICBib3JkZXItd2lkdGg6IDEwcHg7XHJcbiAgICB9XHJcbiAgfVxyXG48L3N0eWxlPlxyXG5cclxuPGRpdlxyXG4gIGNsYXNzPVwid3JhcHBlclwiXHJcbiAgc3R5bGU9XCItLXNpemU6IHtzaXplfXt1bml0fTsgLS1jb2xvcjoge2NvbG9yfTsgLS1kdXJhdGlvbjoge2R1cmF0aW9ufTtcIj5cclxuICA8ZGl2IGNsYXNzPVwicmFpbmJvd1wiIC8+XHJcbjwvZGl2PlxyXG4iLCAiPHNjcmlwdCBsYW5nPVwidHNcIj5cclxuICBpbXBvcnQgdHlwZSB7IFNwaW5uZXJUeXBlcyB9IGZyb20gXCIuL3R5cGVzL3NwaW5uZXIudHlwZVwiO1xyXG4gIGltcG9ydCB7IHJhbmdlLCBkdXJhdGlvblVuaXRSZWdleCB9IGZyb20gXCIuL3V0aWxzXCI7XHJcbiAgZXhwb3J0IGxldCBjb2xvcjogU3Bpbm5lclR5cGVzW1wiY29sb3JcIl0gPSBcIiNGRjNFMDBcIjtcclxuICBleHBvcnQgbGV0IHVuaXQ6IFNwaW5uZXJUeXBlc1tcInVuaXRcIl0gPSBcInB4XCI7XHJcbiAgZXhwb3J0IGxldCBkdXJhdGlvbjogU3Bpbm5lclR5cGVzW1wiZHVyYXRpb25cIl0gPSBcIjEuMjVzXCI7XHJcbiAgZXhwb3J0IGxldCBzaXplOiBTcGlubmVyVHlwZXNbXCJzaXplXCJdID0gXCI2MFwiO1xyXG5cclxuICBsZXQgZHVyYXRpb25Vbml0ID0gZHVyYXRpb24ubWF0Y2goZHVyYXRpb25Vbml0UmVnZXgpWzBdO1xyXG4gIGxldCBkdXJhdGlvbk51bSA9IGR1cmF0aW9uLnJlcGxhY2UoZHVyYXRpb25Vbml0UmVnZXgsIFwiXCIpO1xyXG48L3NjcmlwdD5cclxuXHJcbjxzdHlsZT5cclxuICAud3JhcHBlciB7XHJcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gICAgd2lkdGg6IGNhbGModmFyKC0tc2l6ZSkgKiAyLjUpO1xyXG4gICAgaGVpZ2h0OiB2YXIoLS1zaXplKTtcclxuICAgIG92ZXJmbG93OiBoaWRkZW47XHJcbiAgfVxyXG4gIC5iYXIge1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgdG9wOiBjYWxjKHZhcigtLXNpemUpIC8gMTApO1xyXG4gICAgd2lkdGg6IGNhbGModmFyKC0tc2l6ZSkgLyA1KTtcclxuICAgIGhlaWdodDogY2FsYyh2YXIoLS1zaXplKSAvIDEwKTtcclxuICAgIG1hcmdpbi10b3A6IGNhbGModmFyKC0tc2l6ZSkgLSB2YXIoLS1zaXplKSAvIDEwKTtcclxuICAgIHRyYW5zZm9ybTogc2tld1koMGRlZyk7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB2YXIoLS1jb2xvcik7XHJcbiAgICBhbmltYXRpb246IG1vdGlvbiB2YXIoLS1kdXJhdGlvbikgZWFzZS1pbi1vdXQgaW5maW5pdGU7XHJcbiAgfVxyXG4gIEBrZXlmcmFtZXMgbW90aW9uIHtcclxuICAgIDI1JSB7XHJcbiAgICAgIHRyYW5zZm9ybTogc2tld1koMjVkZWcpO1xyXG4gICAgfVxyXG4gICAgNTAlIHtcclxuICAgICAgaGVpZ2h0OiAxMDAlO1xyXG4gICAgICBtYXJnaW4tdG9wOiAwO1xyXG4gICAgfVxyXG4gICAgNzUlIHtcclxuICAgICAgdHJhbnNmb3JtOiBza2V3WSgtMjVkZWcpO1xyXG4gICAgfVxyXG4gIH1cclxuPC9zdHlsZT5cclxuXHJcbjxkaXZcclxuICBjbGFzcz1cIndyYXBwZXJcIlxyXG4gIHN0eWxlPVwiLS1zaXplOiB7c2l6ZX17dW5pdH07IC0tY29sb3I6IHtjb2xvcn07IC0tZHVyYXRpb246IHtkdXJhdGlvbn07XCI+XHJcbiAgeyNlYWNoIHJhbmdlKDEwLCAwKSBhcyB2ZXJzaW9ufVxyXG4gICAgPGRpdlxyXG4gICAgICBjbGFzcz1cImJhclwiXHJcbiAgICAgIHN0eWxlPVwibGVmdDoge3ZlcnNpb24gKiAoK3NpemUgLyA1ICsgKCtzaXplIC8gMTUgLSArc2l6ZSAvIDEwMCkpICsgdW5pdH07IGFuaW1hdGlvbi1kZWxheToge3ZlcnNpb24gKiAoK2R1cmF0aW9uTnVtIC8gOC4zKX17ZHVyYXRpb25Vbml0fTtcIiAvPlxyXG4gIHsvZWFjaH1cclxuPC9kaXY+XHJcbiIsICI8c2NyaXB0IGxhbmc9XCJ0c1wiPlxyXG4gIGltcG9ydCB0eXBlIHsgU3Bpbm5lclR5cGVzIH0gZnJvbSBcIi4vdHlwZXMvc3Bpbm5lci50eXBlXCI7XHJcbiAgZXhwb3J0IGxldCBjb2xvcjogU3Bpbm5lclR5cGVzW1wiY29sb3JcIl0gPSBcIiNGRjNFMDBcIjtcclxuICBleHBvcnQgbGV0IHVuaXQ6IFNwaW5uZXJUeXBlc1tcInVuaXRcIl0gPSBcInB4XCI7XHJcbiAgZXhwb3J0IGxldCBkdXJhdGlvbjogU3Bpbm5lclR5cGVzW1wiZHVyYXRpb25cIl0gPSBcIjEuMjVzXCI7XHJcbiAgZXhwb3J0IGxldCBzaXplOiBTcGlubmVyVHlwZXNbXCJzaXplXCJdID0gXCI2MFwiO1xyXG48L3NjcmlwdD5cclxuXHJcbjxzdHlsZT5cclxuICAud3JhcHBlciB7XHJcbiAgICB3aWR0aDogY2FsYyh2YXIoLS1zaXplKSAqIDEuMyk7XHJcbiAgICBoZWlnaHQ6IGNhbGModmFyKC0tc2l6ZSkgKiAxLjMpO1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICB9XHJcbiAgLmZpcmV3b3JrIHtcclxuICAgIGJvcmRlcjogY2FsYyh2YXIoLS1zaXplKSAvIDEwKSBkb3R0ZWQgdmFyKC0tY29sb3IpO1xyXG4gICAgd2lkdGg6IHZhcigtLXNpemUpO1xyXG4gICAgaGVpZ2h0OiB2YXIoLS1zaXplKTtcclxuICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcclxuICAgIGFuaW1hdGlvbjogZmlyZSB2YXIoLS1kdXJhdGlvbikgY3ViaWMtYmV6aWVyKDAuMTY1LCAwLjg0LCAwLjQ0LCAxKSBpbmZpbml0ZTtcclxuICB9XHJcblxyXG4gIEBrZXlmcmFtZXMgZmlyZSB7XHJcbiAgICAwJSB7XHJcbiAgICAgIG9wYWNpdHk6IDE7XHJcbiAgICAgIHRyYW5zZm9ybTogc2NhbGUoMC4xKTtcclxuICAgIH1cclxuICAgIDI1JSB7XHJcbiAgICAgIG9wYWNpdHk6IDAuODU7XHJcbiAgICB9XHJcbiAgICAxMDAlIHtcclxuICAgICAgdHJhbnNmb3JtOiBzY2FsZSgxKTtcclxuICAgICAgb3BhY2l0eTogMDtcclxuICAgIH1cclxuICB9XHJcbjwvc3R5bGU+XHJcblxyXG48ZGl2XHJcbiAgY2xhc3M9XCJ3cmFwcGVyXCJcclxuICBzdHlsZT1cIi0tc2l6ZToge3NpemV9e3VuaXR9OyAtLWNvbG9yOiB7Y29sb3J9OyAtLWR1cmF0aW9uOiB7ZHVyYXRpb259O1wiPlxyXG4gIDxkaXYgY2xhc3M9XCJmaXJld29ya1wiIC8+XHJcbjwvZGl2PlxyXG4iLCAiPHNjcmlwdCBsYW5nPVwidHNcIj5cclxuICBpbXBvcnQgdHlwZSB7IFNwaW5uZXJUeXBlcyB9IGZyb20gXCIuL3R5cGVzL3NwaW5uZXIudHlwZVwiO1xyXG4gIGltcG9ydCB7IHJhbmdlLCBkdXJhdGlvblVuaXRSZWdleCB9IGZyb20gXCIuL3V0aWxzXCI7XHJcbiAgZXhwb3J0IGxldCBjb2xvcjogU3Bpbm5lclR5cGVzW1wiY29sb3JcIl0gPSBcIiNGRjNFMDBcIjtcclxuICBleHBvcnQgbGV0IHVuaXQ6IFNwaW5uZXJUeXBlc1tcInVuaXRcIl0gPSBcInB4XCI7XHJcbiAgZXhwb3J0IGxldCBkdXJhdGlvbjogU3Bpbm5lclR5cGVzW1wiZHVyYXRpb25cIl0gPSBcIjEuNXNcIjtcclxuICBleHBvcnQgbGV0IHNpemU6IFNwaW5uZXJUeXBlc1tcInNpemVcIl0gPSBcIjYwXCI7XHJcblxyXG4gIGxldCBkdXJhdGlvblVuaXQgPSBkdXJhdGlvbi5tYXRjaChkdXJhdGlvblVuaXRSZWdleClbMF07XHJcbiAgbGV0IGR1cmF0aW9uTnVtID0gZHVyYXRpb24ucmVwbGFjZShkdXJhdGlvblVuaXRSZWdleCwgXCJcIik7XHJcbjwvc2NyaXB0PlxyXG5cclxuPHN0eWxlPlxyXG4gIC53cmFwcGVyIHtcclxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICB3aWR0aDogdmFyKC0tc2l6ZSk7XHJcbiAgICBoZWlnaHQ6IGNhbGModmFyKC0tc2l6ZSkgLyAyLjUpO1xyXG4gIH1cclxuICAuY3ViZSB7XHJcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICB0b3A6IDBweDtcclxuICAgIHdpZHRoOiBjYWxjKHZhcigtLXNpemUpIC8gNSk7XHJcbiAgICBoZWlnaHQ6IGNhbGModmFyKC0tc2l6ZSkgLyAyLjUpO1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tY29sb3IpO1xyXG4gICAgYW5pbWF0aW9uOiBtb3Rpb24gdmFyKC0tZHVyYXRpb24pIGN1YmljLWJlemllcigwLjg5NSwgMC4wMywgMC42ODUsIDAuMjIpXHJcbiAgICAgIGluZmluaXRlO1xyXG4gIH1cclxuICBAa2V5ZnJhbWVzIG1vdGlvbiB7XHJcbiAgICAwJSB7XHJcbiAgICAgIG9wYWNpdHk6IDE7XHJcbiAgICB9XHJcbiAgICA1MCUge1xyXG4gICAgICBvcGFjaXR5OiAwO1xyXG4gICAgfVxyXG4gICAgMTAwJSB7XHJcbiAgICAgIG9wYWNpdHk6IDE7XHJcbiAgICB9XHJcbiAgfVxyXG48L3N0eWxlPlxyXG5cclxuPGRpdlxyXG4gIGNsYXNzPVwid3JhcHBlclwiXHJcbiAgc3R5bGU9XCItLXNpemU6IHtzaXplfXt1bml0fTsgLS1jb2xvcjoge2NvbG9yfTsgLS1kdXJhdGlvbjoge2R1cmF0aW9ufVwiPlxyXG4gIHsjZWFjaCByYW5nZSgzLCAwKSBhcyB2ZXJzaW9ufVxyXG4gICAgPGRpdlxyXG4gICAgICBjbGFzcz1cImN1YmVcIlxyXG4gICAgICBzdHlsZT1cImFuaW1hdGlvbi1kZWxheToge3ZlcnNpb24gKiAoK2R1cmF0aW9uTnVtIC8gMTApfXtkdXJhdGlvblVuaXR9OyBsZWZ0OiB7dmVyc2lvbiAqICgrc2l6ZSAvIDMgKyArc2l6ZSAvIDE1KSArIHVuaXR9O1wiIC8+XHJcbiAgey9lYWNofVxyXG48L2Rpdj5cclxuIiwgIjxzY3JpcHQgbGFuZz1cInRzXCI+XHJcbiAgaW1wb3J0IHR5cGUgeyBTcGlubmVyVHlwZXMgfSBmcm9tIFwiLi90eXBlcy9zcGlubmVyLnR5cGVcIjtcclxuICBpbXBvcnQgeyByYW5nZSwgZHVyYXRpb25Vbml0UmVnZXggfSBmcm9tIFwiLi91dGlsc1wiO1xyXG4gIGV4cG9ydCBsZXQgY29sb3I6IFNwaW5uZXJUeXBlc1tcImNvbG9yXCJdID0gXCIjRkYzRTAwXCI7XHJcbiAgZXhwb3J0IGxldCB1bml0OiBTcGlubmVyVHlwZXNbXCJ1bml0XCJdID0gXCJweFwiO1xyXG4gIGV4cG9ydCBsZXQgZHVyYXRpb246IFNwaW5uZXJUeXBlc1tcImR1cmF0aW9uXCJdID0gXCIyLjVzXCI7XHJcbiAgZXhwb3J0IGxldCBzaXplOiBTcGlubmVyVHlwZXNbXCJzaXplXCJdID0gXCI2MFwiO1xyXG4gIGxldCBkdXJhdGlvblVuaXQgPSBkdXJhdGlvbi5tYXRjaChkdXJhdGlvblVuaXRSZWdleClbMF07XHJcbiAgbGV0IGR1cmF0aW9uTnVtOiBhbnkgPSBkdXJhdGlvbi5yZXBsYWNlKGR1cmF0aW9uVW5pdFJlZ2V4LCBcIlwiKTtcclxuPC9zY3JpcHQ+XHJcblxyXG48c3R5bGU+XHJcbiAgLndyYXBwZXIge1xyXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgIHdpZHRoOiB2YXIoLS1zaXplKTtcclxuICAgIGhlaWdodDogdmFyKC0tc2l6ZSk7XHJcbiAgfVxyXG4gIC5yaW5nIHtcclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIGJvcmRlcjogMnB4IHNvbGlkIHZhcigtLWNvbG9yKTtcclxuICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcclxuICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xyXG4gICAgYW5pbWF0aW9uOiBtb3Rpb24gdmFyKC0tZHVyYXRpb24pIGVhc2UgaW5maW5pdGU7XHJcbiAgfVxyXG4gIEBrZXlmcmFtZXMgbW90aW9uIHtcclxuICAgIDAlIHtcclxuICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKHZhcigtLW1vdGlvbk9uZSkpO1xyXG4gICAgfVxyXG4gICAgNTAlIHtcclxuICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKHZhcigtLW1vdGlvblR3bykpO1xyXG4gICAgfVxyXG4gICAgMTAwJSB7XHJcbiAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSh2YXIoLS1tb3Rpb25UaHJlZSkpO1xyXG4gICAgfVxyXG4gIH1cclxuPC9zdHlsZT5cclxuXHJcbjxkaXZcclxuICBjbGFzcz1cIndyYXBwZXJcIlxyXG4gIHN0eWxlPVwiLS1zaXplOiB7c2l6ZX17dW5pdH07IC0tY29sb3I6IHtjb2xvcn07IC0tbW90aW9uT25lOiB7LXNpemUgLyA1fXt1bml0fTsgLS1tb3Rpb25Ud286IHsrc2l6ZSAvIDR9e3VuaXR9OyAtLW1vdGlvblRocmVlOiB7LXNpemUgLyA1fXt1bml0fTsgLS1kdXJhdGlvbjoge2R1cmF0aW9ufTtcIj5cclxuICB7I2VhY2ggcmFuZ2UoNiwgMCkgYXMgdmVyc2lvbn1cclxuICAgIDxkaXZcclxuICAgICAgY2xhc3M9XCJyaW5nXCJcclxuICAgICAgc3R5bGU9XCJhbmltYXRpb24tZGVsYXk6IHt2ZXJzaW9uICogKGR1cmF0aW9uTnVtIC8gMjUpfXtkdXJhdGlvblVuaXR9OyB3aWR0aDoge3ZlcnNpb24gKiAoK3NpemUgLyA2KSArIHVuaXR9OyBoZWlnaHQ6IHsodmVyc2lvbiAqICgrc2l6ZSAvIDYpKSAvIDIgKyB1bml0fTsgXCIgLz5cclxuICB7L2VhY2h9XHJcbjwvZGl2PlxyXG4iLCAiPHNjcmlwdCBsYW5nPVwidHNcIj5cclxuICBpbXBvcnQgdHlwZSB7IFNwaW5uZXJUeXBlcyB9IGZyb20gXCIuL3R5cGVzL3NwaW5uZXIudHlwZVwiO1xyXG4gIGltcG9ydCB7IGR1cmF0aW9uVW5pdFJlZ2V4LCByYW5nZSB9IGZyb20gXCIuL3V0aWxzXCI7XHJcbiAgZXhwb3J0IGxldCBjb2xvcjogU3Bpbm5lclR5cGVzW1wiY29sb3JcIl0gPSBcIiNGRjNFMDBcIjtcclxuICBleHBvcnQgbGV0IHVuaXQ6IFNwaW5uZXJUeXBlc1tcInVuaXRcIl0gPSBcInB4XCI7XHJcbiAgZXhwb3J0IGxldCBkdXJhdGlvbjogU3Bpbm5lclR5cGVzW1wiZHVyYXRpb25cIl0gPSBcIjJzXCI7XHJcbiAgZXhwb3J0IGxldCBzaXplOiBTcGlubmVyVHlwZXNbXCJzaXplXCJdID0gXCI2MFwiO1xyXG5cclxuICBsZXQgZHVyYXRpb25Vbml0OiBhbnkgPSBkdXJhdGlvbi5tYXRjaChkdXJhdGlvblVuaXRSZWdleClbMF07XHJcbiAgbGV0IGR1cmF0aW9uTnVtOiBhbnkgPSBkdXJhdGlvbi5yZXBsYWNlKGR1cmF0aW9uVW5pdFJlZ2V4LCBcIlwiKTtcclxuPC9zY3JpcHQ+XHJcblxyXG48c3R5bGU+XHJcbiAgLndyYXBwZXIge1xyXG4gICAgaGVpZ2h0OiB2YXIoLS1zaXplKTtcclxuICAgIHdpZHRoOiB2YXIoLS1zaXplKTtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgfVxyXG4gIC5zcGlubmVyIHtcclxuICAgIGhlaWdodDogdmFyKC0tc2l6ZSk7XHJcbiAgICB3aWR0aDogdmFyKC0tc2l6ZSk7XHJcbiAgICBhbmltYXRpb246IHJvdGF0ZSB2YXIoLS1kdXJhdGlvbikgaW5maW5pdGUgbGluZWFyO1xyXG4gIH1cclxuICAuZG90IHtcclxuICAgIHdpZHRoOiA2MCU7XHJcbiAgICBoZWlnaHQ6IDYwJTtcclxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIHRvcDogMDtcclxuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWNvbG9yKTtcclxuICAgIGJvcmRlci1yYWRpdXM6IDEwMCU7XHJcbiAgICBhbmltYXRpb246IGJvdW5jZSB2YXIoLS1kdXJhdGlvbikgaW5maW5pdGUgZWFzZS1pbi1vdXQ7XHJcbiAgfVxyXG5cclxuICBAa2V5ZnJhbWVzIHJvdGF0ZSB7XHJcbiAgICAxMDAlIHtcclxuICAgICAgdHJhbnNmb3JtOiByb3RhdGUoMzYwZGVnKTtcclxuICAgIH1cclxuICB9XHJcbiAgQGtleWZyYW1lcyBib3VuY2Uge1xyXG4gICAgMCUsXHJcbiAgICAxMDAlIHtcclxuICAgICAgdHJhbnNmb3JtOiBzY2FsZSgwKTtcclxuICAgIH1cclxuICAgIDUwJSB7XHJcbiAgICAgIHRyYW5zZm9ybTogc2NhbGUoMSk7XHJcbiAgICB9XHJcbiAgfVxyXG48L3N0eWxlPlxyXG5cclxuPGRpdlxyXG4gIGNsYXNzPVwid3JhcHBlclwiXHJcbiAgc3R5bGU9XCItLXNpemU6IHtzaXplfXt1bml0fTsgLS1jb2xvcjoge2NvbG9yfTsgLS1kdXJhdGlvbjoge2R1cmF0aW9ufTtcIj5cclxuICA8ZGl2IGNsYXNzPVwic3Bpbm5lclwiPlxyXG4gICAgeyNlYWNoIHJhbmdlKDIsIDApIGFzIHZlcnNpb259XHJcbiAgICAgIDxkaXZcclxuICAgICAgICBjbGFzcz1cImRvdFwiXHJcbiAgICAgICAgc3R5bGU9XCJhbmltYXRpb24tZGVsYXk6IHt2ZXJzaW9uID09PSAxID8gYCR7ZHVyYXRpb25OdW0gLyAyfSR7ZHVyYXRpb25Vbml0fWAgOiAnMHMnfTsgYm90dG9tOiB7dmVyc2lvbiA9PT0gMSA/ICcwJyA6ICcnfTsgdG9wOiB7dmVyc2lvbiA9PT0gMSA/ICdhdXRvJyA6ICcnfTtcIiAvPlxyXG4gICAgey9lYWNofVxyXG4gIDwvZGl2PlxyXG48L2Rpdj5cclxuIiwgIjxzY3JpcHQgbGFuZz1cInRzXCI+XHJcbiAgaW1wb3J0IHR5cGUgeyBTcGlubmVyVHlwZXMgfSBmcm9tIFwiLi90eXBlcy9zcGlubmVyLnR5cGVcIjtcclxuICBleHBvcnQgbGV0IGNvbG9yOiBTcGlubmVyVHlwZXNbXCJjb2xvclwiXSA9IFwiI0ZGM0UwMFwiO1xyXG4gIGV4cG9ydCBsZXQgdW5pdDogU3Bpbm5lclR5cGVzW1widW5pdFwiXSA9IFwicHhcIjtcclxuICBleHBvcnQgbGV0IGR1cmF0aW9uOiBTcGlubmVyVHlwZXNbXCJkdXJhdGlvblwiXSA9IFwiMS43c1wiO1xyXG4gIGV4cG9ydCBsZXQgc2l6ZTogU3Bpbm5lclR5cGVzW1wic2l6ZVwiXSA9IFwiNjBcIjtcclxuPC9zY3JpcHQ+XHJcblxyXG48c3R5bGU+XHJcbiAgLndyYXBwZXIge1xyXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgIHdpZHRoOiB2YXIoLS1zaXplKTtcclxuICAgIGhlaWdodDogdmFyKC0tc2l6ZSk7XHJcbiAgfVxyXG4gIC5zaGFkb3cge1xyXG4gICAgY29sb3I6IHZhcigtLWNvbG9yKTtcclxuICAgIGZvbnQtc2l6ZTogdmFyKC0tc2l6ZSk7XHJcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xyXG4gICAgd2lkdGg6IHZhcigtLXNpemUpO1xyXG4gICAgaGVpZ2h0OiB2YXIoLS1zaXplKTtcclxuICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcclxuICAgIG1hcmdpbjogMjhweCBhdXRvO1xyXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVaKDApO1xyXG4gICAgYW5pbWF0aW9uOiBsb2FkIHZhcigtLWR1cmF0aW9uKSBpbmZpbml0ZSBlYXNlLFxyXG4gICAgICByb3VuZCB2YXIoLS1kdXJhdGlvbikgaW5maW5pdGUgZWFzZTtcclxuICB9XHJcbiAgQGtleWZyYW1lcyBsb2FkIHtcclxuICAgIDAlIHtcclxuICAgICAgYm94LXNoYWRvdzogMCAtMC44M2VtIDAgLTAuNGVtLCAwIC0wLjgzZW0gMCAtMC40MmVtLCAwIC0wLjgzZW0gMCAtMC40NGVtLFxyXG4gICAgICAgIDAgLTAuODNlbSAwIC0wLjQ2ZW0sIDAgLTAuODNlbSAwIC0wLjQ3N2VtO1xyXG4gICAgfVxyXG4gICAgNSUsXHJcbiAgICA5NSUge1xyXG4gICAgICBib3gtc2hhZG93OiAwIC0wLjgzZW0gMCAtMC40ZW0sIDAgLTAuODNlbSAwIC0wLjQyZW0sIDAgLTAuODNlbSAwIC0wLjQ0ZW0sXHJcbiAgICAgICAgMCAtMC44M2VtIDAgLTAuNDZlbSwgMCAtMC44M2VtIDAgLTAuNDc3ZW07XHJcbiAgICB9XHJcbiAgICAxMCUsXHJcbiAgICA1OSUge1xyXG4gICAgICBib3gtc2hhZG93OiAwIC0wLjgzZW0gMCAtMC40ZW0sIC0wLjA4N2VtIC0wLjgyNWVtIDAgLTAuNDJlbSxcclxuICAgICAgICAtMC4xNzNlbSAtMC44MTJlbSAwIC0wLjQ0ZW0sIC0wLjI1NmVtIC0wLjc4OWVtIDAgLTAuNDZlbSxcclxuICAgICAgICAtMC4yOTdlbSAtMC43NzVlbSAwIC0wLjQ3N2VtO1xyXG4gICAgfVxyXG4gICAgMjAlIHtcclxuICAgICAgYm94LXNoYWRvdzogMCAtMC44M2VtIDAgLTAuNGVtLCAtMC4zMzhlbSAtMC43NThlbSAwIC0wLjQyZW0sXHJcbiAgICAgICAgLTAuNTU1ZW0gLTAuNjE3ZW0gMCAtMC40NGVtLCAtMC42NzFlbSAtMC40ODhlbSAwIC0wLjQ2ZW0sXHJcbiAgICAgICAgLTAuNzQ5ZW0gLTAuMzRlbSAwIC0wLjQ3N2VtO1xyXG4gICAgfVxyXG4gICAgMzglIHtcclxuICAgICAgYm94LXNoYWRvdzogMCAtMC44M2VtIDAgLTAuNGVtLCAtMC4zNzdlbSAtMC43NGVtIDAgLTAuNDJlbSxcclxuICAgICAgICAtMC42NDVlbSAtMC41MjJlbSAwIC0wLjQ0ZW0sIC0wLjc3NWVtIC0wLjI5N2VtIDAgLTAuNDZlbSxcclxuICAgICAgICAtMC44MmVtIC0wLjA5ZW0gMCAtMC40NzdlbTtcclxuICAgIH1cclxuICAgIDEwMCUge1xyXG4gICAgICBib3gtc2hhZG93OiAwIC0wLjgzZW0gMCAtMC40ZW0sIDAgLTAuODNlbSAwIC0wLjQyZW0sIDAgLTAuODNlbSAwIC0wLjQ0ZW0sXHJcbiAgICAgICAgMCAtMC44M2VtIDAgLTAuNDZlbSwgMCAtMC44M2VtIDAgLTAuNDc3ZW07XHJcbiAgICB9XHJcbiAgfVxyXG4gIEBrZXlmcmFtZXMgcm91bmQge1xyXG4gICAgMCUge1xyXG4gICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgwZGVnKTtcclxuICAgIH1cclxuICAgIDEwMCUge1xyXG4gICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgzNjBkZWcpO1xyXG4gICAgfVxyXG4gIH1cclxuPC9zdHlsZT5cclxuXHJcbjxkaXZcclxuICBjbGFzcz1cIndyYXBwZXJcIlxyXG4gIHN0eWxlPVwiLS1zaXplOiB7c2l6ZX17dW5pdH07IC0tY29sb3I6IHtjb2xvcn07IC0tZHVyYXRpb246IHtkdXJhdGlvbn07XCI+XHJcbiAgPGRpdiBjbGFzcz1cInNoYWRvd1wiIC8+XHJcbjwvZGl2PlxyXG4iLCAiPHNjcmlwdCBsYW5nPVwidHNcIj5cclxuICBpbXBvcnQgdHlwZSB7IFNwaW5uZXJUeXBlcyB9IGZyb20gXCIuL3R5cGVzL3NwaW5uZXIudHlwZVwiO1xyXG4gIGV4cG9ydCBsZXQgY29sb3I6IFNwaW5uZXJUeXBlc1tcImNvbG9yXCJdID0gXCIjRkYzRTAwXCI7XHJcbiAgZXhwb3J0IGxldCB1bml0OiBTcGlubmVyVHlwZXNbXCJ1bml0XCJdID0gXCJweFwiO1xyXG4gIGV4cG9ydCBsZXQgZHVyYXRpb246IFNwaW5uZXJUeXBlc1tcImR1cmF0aW9uXCJdID0gXCIzc1wiO1xyXG4gIGV4cG9ydCBsZXQgc2l6ZTogU3Bpbm5lclR5cGVzW1wic2l6ZVwiXSA9IFwiNjBcIjtcclxuPC9zY3JpcHQ+XHJcblxyXG48c3R5bGU+XHJcbiAgLnNxdWFyZSB7XHJcbiAgICBoZWlnaHQ6IHZhcigtLXNpemUpO1xyXG4gICAgd2lkdGg6IHZhcigtLXNpemUpO1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tY29sb3IpO1xyXG4gICAgYW5pbWF0aW9uOiBzcXVhcmVEZWxheSB2YXIoLS1kdXJhdGlvbikgMHMgaW5maW5pdGVcclxuICAgICAgY3ViaWMtYmV6aWVyKDAuMDksIDAuNTcsIDAuNDksIDAuOSk7XHJcbiAgICBhbmltYXRpb24tZmlsbC1tb2RlOiBib3RoO1xyXG4gICAgcGVyc3BlY3RpdmU6IDEwMHB4O1xyXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4gIH1cclxuICBAa2V5ZnJhbWVzIHNxdWFyZURlbGF5IHtcclxuICAgIDI1JSB7XHJcbiAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGVYKDE4MGRlZykgcm90YXRlWSgwKTtcclxuICAgICAgdHJhbnNmb3JtOiByb3RhdGVYKDE4MGRlZykgcm90YXRlWSgwKTtcclxuICAgIH1cclxuICAgIDUwJSB7XHJcbiAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGVYKDE4MGRlZykgcm90YXRlWSgxODBkZWcpO1xyXG4gICAgICB0cmFuc2Zvcm06IHJvdGF0ZVgoMTgwZGVnKSByb3RhdGVZKDE4MGRlZyk7XHJcbiAgICB9XHJcbiAgICA3NSUge1xyXG4gICAgICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlWCgwKSByb3RhdGVZKDE4MGRlZyk7XHJcbiAgICAgIHRyYW5zZm9ybTogcm90YXRlWCgwKSByb3RhdGVZKDE4MGRlZyk7XHJcbiAgICB9XHJcbiAgICAxMDAlIHtcclxuICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZVgoMCkgcm90YXRlWSgwKTtcclxuICAgICAgdHJhbnNmb3JtOiByb3RhdGVYKDApIHJvdGF0ZVkoMCk7XHJcbiAgICB9XHJcbiAgfVxyXG48L3N0eWxlPlxyXG5cclxuPGRpdlxyXG4gIGNsYXNzPVwic3F1YXJlXCJcclxuICBzdHlsZT1cIi0tc2l6ZToge3NpemV9e3VuaXR9OyAtLWNvbG9yOiB7Y29sb3J9OyAtLWR1cmF0aW9uOiB7ZHVyYXRpb259O1wiIC8+XHJcbiIsICI8c2NyaXB0IGxhbmc9XCJ0c1wiPlxyXG4gIGltcG9ydCB0eXBlIHsgU3Bpbm5lclR5cGVzIH0gZnJvbSBcIi4vdHlwZXMvc3Bpbm5lci50eXBlXCI7XHJcbiAgZXhwb3J0IGxldCBjb2xvcjogU3Bpbm5lclR5cGVzW1wiY29sb3JcIl0gPSBcIiNGRjNFMDBcIjtcclxuICBleHBvcnQgbGV0IHVuaXQ6IFNwaW5uZXJUeXBlc1tcInVuaXRcIl0gPSBcInB4XCI7XHJcbiAgZXhwb3J0IGxldCBkdXJhdGlvbjogU3Bpbm5lclR5cGVzW1wiZHVyYXRpb25cIl0gPSBcIjAuNnNcIjtcclxuICBleHBvcnQgbGV0IHNpemU6IFNwaW5uZXJUeXBlc1tcInNpemVcIl0gPSBcIjYwXCI7XHJcbiAgbGV0IG1vb25TaXplOiBudW1iZXIgPSArc2l6ZSAvIDc7XHJcbiAgbGV0IHRvcDogbnVtYmVyID0gK3NpemUgLyAyIC0gbW9vblNpemUgLyAyO1xyXG48L3NjcmlwdD5cclxuXHJcbjxzdHlsZT5cclxuICAud3JhcHBlciB7XHJcbiAgICBoZWlnaHQ6IHZhcigtLXNpemUpO1xyXG4gICAgd2lkdGg6IHZhcigtLXNpemUpO1xyXG4gICAgYm9yZGVyLXJhZGl1czogMTAwJTtcclxuICAgIGFuaW1hdGlvbjogbW9vblN0cmV0Y2hEZWxheSB2YXIoLS1kdXJhdGlvbikgMHMgaW5maW5pdGUgbGluZWFyO1xyXG4gICAgYW5pbWF0aW9uLWZpbGwtbW9kZTogZm9yd2FyZHM7XHJcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgfVxyXG4gIC5jaXJjbGUtb25lIHtcclxuICAgIHRvcDogdmFyKC0tbW9vblNpemUpO1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tY29sb3IpO1xyXG4gICAgd2lkdGg6IGNhbGModmFyKC0tc2l6ZSkgLyA3KTtcclxuICAgIGhlaWdodDogY2FsYyh2YXIoLS1zaXplKSAvIDcpO1xyXG4gICAgYm9yZGVyLXJhZGl1czogMTAwJTtcclxuICAgIGFuaW1hdGlvbjogbW9vblN0cmV0Y2hEZWxheSB2YXIoLS1kdXJhdGlvbikgMHMgaW5maW5pdGUgbGluZWFyO1xyXG4gICAgYW5pbWF0aW9uLWZpbGwtbW9kZTogZm9yd2FyZHM7XHJcbiAgICBvcGFjaXR5OiAwLjg7XHJcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgfVxyXG4gIC5jaXJjbGUtdHdvIHtcclxuICAgIG9wYWNpdHk6IDAuMTtcclxuICAgIGJvcmRlcjogY2FsYyh2YXIoLS1zaXplKSAvIDcpIHNvbGlkIHZhcigtLWNvbG9yKTtcclxuICAgIGhlaWdodDogdmFyKC0tc2l6ZSk7XHJcbiAgICB3aWR0aDogdmFyKC0tc2l6ZSk7XHJcbiAgICBib3JkZXItcmFkaXVzOiAxMDAlO1xyXG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcclxuICB9XHJcbiAgQGtleWZyYW1lcyBtb29uU3RyZXRjaERlbGF5IHtcclxuICAgIDEwMCUge1xyXG4gICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgzNjBkZWcpO1xyXG4gICAgfVxyXG4gIH1cclxuPC9zdHlsZT5cclxuXHJcbjxkaXZcclxuICBjbGFzcz1cIndyYXBwZXJcIlxyXG4gIHN0eWxlPVwiLS1zaXplOiB7c2l6ZX17dW5pdH07IC0tY29sb3I6IHtjb2xvcn07IC0tbW9vblNpemU6IHt0b3B9e3VuaXR9OyAtLWR1cmF0aW9uOiB7ZHVyYXRpb259O1wiPlxyXG4gIDxkaXYgY2xhc3M9XCJjaXJjbGUtb25lXCIgLz5cclxuICA8ZGl2IGNsYXNzPVwiY2lyY2xlLXR3b1wiIC8+XHJcbjwvZGl2PlxyXG4iLCAiPHNjcmlwdCBsYW5nPVwidHNcIj5cclxuICBpbXBvcnQgdHlwZSB7IFNwaW5uZXJUeXBlcyB9IGZyb20gXCIuL3R5cGVzL3NwaW5uZXIudHlwZVwiO1xyXG4gIGltcG9ydCB7IGNhbGN1bGF0ZVJnYmEgfSBmcm9tIFwiLi91dGlsc1wiO1xyXG4gIGV4cG9ydCBsZXQgY29sb3I6IFNwaW5uZXJUeXBlc1tcImNvbG9yXCJdID0gXCIjRkYzRTAwXCI7XHJcbiAgZXhwb3J0IGxldCB1bml0OiBTcGlubmVyVHlwZXNbXCJ1bml0XCJdID0gXCJweFwiO1xyXG4gIGV4cG9ydCBsZXQgZHVyYXRpb246IFNwaW5uZXJUeXBlc1tcImR1cmF0aW9uXCJdID0gXCIxLjNzXCI7XHJcbiAgZXhwb3J0IGxldCBzaXplOiBTcGlubmVyVHlwZXNbXCJzaXplXCJdID0gXCI2MFwiO1xyXG4gIGxldCByZ2JhOiBzdHJpbmc7XHJcbiAgJDogcmdiYSA9IGNhbGN1bGF0ZVJnYmEoY29sb3IsIDAuNik7XHJcbjwvc2NyaXB0PlxyXG5cclxuPHN0eWxlPlxyXG4gIC53cmFwcGVyIHtcclxuICAgIGhlaWdodDogdmFyKC0tc2l6ZSk7XHJcbiAgICB3aWR0aDogdmFyKC0tc2l6ZSk7XHJcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gIH1cclxuICAud3JhcHBlciAqIHtcclxuICAgIGxpbmUtaGVpZ2h0OiAwO1xyXG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcclxuICB9XHJcbiAgLnNwaW5uZXItaW5uZXIge1xyXG4gICAgaGVpZ2h0OiB2YXIoLS1zaXplKTtcclxuICAgIHdpZHRoOiB2YXIoLS1zaXplKTtcclxuICAgIHRyYW5zZm9ybTogc2NhbGUoY2FsYyh2YXIoLS1zaXplKSAvIDcwKSk7XHJcbiAgfVxyXG5cclxuICAubWFzayB7XHJcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICBib3JkZXItcmFkaXVzOiAycHg7XHJcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xyXG4gICAgcGVyc3BlY3RpdmU6IDEwMDA7XHJcbiAgICBiYWNrZmFjZS12aXNpYmlsaXR5OiBoaWRkZW47XHJcbiAgfVxyXG5cclxuICAucGxhbmUge1xyXG4gICAgYmFja2dyb3VuZDogdmFyKC0tY29sb3IpO1xyXG4gICAgd2lkdGg6IDQwMCU7XHJcbiAgICBoZWlnaHQ6IDEwMCU7XHJcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICB6LWluZGV4OiAxMDA7XHJcbiAgICBwZXJzcGVjdGl2ZTogMTAwMDtcclxuICAgIGJhY2tmYWNlLXZpc2liaWxpdHk6IGhpZGRlbjtcclxuICB9XHJcblxyXG4gICN0b3AgLnBsYW5lIHtcclxuICAgIHotaW5kZXg6IDIwMDA7XHJcbiAgICBhbmltYXRpb246IHRyYW5zMSB2YXIoLS1kdXJhdGlvbikgZWFzZS1pbiBpbmZpbml0ZSAwcyBiYWNrd2FyZHM7XHJcbiAgfVxyXG4gICNtaWRkbGUgLnBsYW5lIHtcclxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMHB4LCAwLCAwKTtcclxuICAgIGJhY2tncm91bmQ6IHZhcigtLXJnYmEpO1xyXG4gICAgYW5pbWF0aW9uOiB0cmFuczIgdmFyKC0tZHVyYXRpb24pIGxpbmVhciBpbmZpbml0ZSBjYWxjKHZhcigtLWR1cmF0aW9uKSAvIDQpXHJcbiAgICAgIGJhY2t3YXJkcztcclxuICB9XHJcbiAgI2JvdHRvbSAucGxhbmUge1xyXG4gICAgei1pbmRleDogMjAwMDtcclxuICAgIGFuaW1hdGlvbjogdHJhbnMzIHZhcigtLWR1cmF0aW9uKSBlYXNlLW91dCBpbmZpbml0ZVxyXG4gICAgICBjYWxjKHZhcigtLWR1cmF0aW9uKSAvIDIpIGJhY2t3YXJkcztcclxuICB9XHJcbiAgI3RvcCB7XHJcbiAgICB3aWR0aDogNTNweDtcclxuICAgIGhlaWdodDogMjBweDtcclxuICAgIGxlZnQ6IDIwcHg7XHJcbiAgICB0b3A6IDVweDtcclxuICAgIHRyYW5zZm9ybTogc2tldygtMTVkZWcsIDApO1xyXG4gICAgei1pbmRleDogMTAwO1xyXG4gIH1cclxuICAjbWlkZGxlIHtcclxuICAgIHdpZHRoOiAzM3B4O1xyXG4gICAgaGVpZ2h0OiAyMHB4O1xyXG4gICAgbGVmdDogMjBweDtcclxuICAgIHRvcDogMjFweDtcclxuICAgIHRyYW5zZm9ybTogc2tldygtMTVkZWcsIDQwZGVnKTtcclxuICB9XHJcbiAgI2JvdHRvbSB7XHJcbiAgICB3aWR0aDogNTNweDtcclxuICAgIGhlaWdodDogMjBweDtcclxuICAgIHRvcDogMzVweDtcclxuICAgIHRyYW5zZm9ybTogc2tldygtMTVkZWcsIDApO1xyXG4gIH1cclxuXHJcbiAgQGtleWZyYW1lcyB0cmFuczEge1xyXG4gICAgZnJvbSB7XHJcbiAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoNTNweCwgMCwgMCk7XHJcbiAgICB9XHJcbiAgICB0byB7XHJcbiAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoLTI1MHB4LCAwLCAwKTtcclxuICAgIH1cclxuICB9XHJcbiAgQGtleWZyYW1lcyB0cmFuczIge1xyXG4gICAgZnJvbSB7XHJcbiAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoLTE2MHB4LCAwLCAwKTtcclxuICAgIH1cclxuICAgIHRvIHtcclxuICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUzZCg1M3B4LCAwLCAwKTtcclxuICAgIH1cclxuICB9XHJcbiAgQGtleWZyYW1lcyB0cmFuczMge1xyXG4gICAgZnJvbSB7XHJcbiAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoNTNweCwgMCwgMCk7XHJcbiAgICB9XHJcbiAgICB0byB7XHJcbiAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoLTIyMHB4LCAwLCAwKTtcclxuICAgIH1cclxuICB9XHJcbjwvc3R5bGU+XHJcblxyXG48ZGl2XHJcbiAgY2xhc3M9XCJ3cmFwcGVyXCJcclxuICBzdHlsZT1cIi0tc2l6ZToge3NpemV9e3VuaXR9OyAtLWNvbG9yOiB7Y29sb3J9OyAtLXJnYmE6IHtyZ2JhfTsgLS1kdXJhdGlvbjoge2R1cmF0aW9ufTtcIj5cclxuICA8ZGl2IGNsYXNzPVwic3Bpbm5lci1pbm5lclwiPlxyXG4gICAgPGRpdiBpZD1cInRvcFwiIGNsYXNzPVwibWFza1wiPlxyXG4gICAgICA8ZGl2IGNsYXNzPVwicGxhbmVcIiAvPlxyXG4gICAgPC9kaXY+XHJcbiAgICA8ZGl2IGlkPVwibWlkZGxlXCIgY2xhc3M9XCJtYXNrXCI+XHJcbiAgICAgIDxkaXYgY2xhc3M9XCJwbGFuZVwiIC8+XHJcbiAgICA8L2Rpdj5cclxuICAgIDxkaXYgaWQ9XCJib3R0b21cIiBjbGFzcz1cIm1hc2tcIj5cclxuICAgICAgPGRpdiBjbGFzcz1cInBsYW5lXCIgLz5cclxuICAgIDwvZGl2PlxyXG4gIDwvZGl2PlxyXG48L2Rpdj5cclxuIiwgIjxzY3JpcHQgbGFuZz1cInRzXCI+XHJcbiAgaW1wb3J0IHR5cGUgeyBTcGlubmVyVHlwZXMgfSBmcm9tIFwiLi90eXBlcy9zcGlubmVyLnR5cGVcIjtcclxuICBleHBvcnQgbGV0IGNvbG9yOiBTcGlubmVyVHlwZXNbXCJjb2xvclwiXSA9IFwiI0ZGM0UwMFwiO1xyXG4gIGV4cG9ydCBsZXQgdW5pdDogU3Bpbm5lclR5cGVzW1widW5pdFwiXSA9IFwicHhcIjtcclxuICBleHBvcnQgbGV0IGR1cmF0aW9uOiBTcGlubmVyVHlwZXNbXCJkdXJhdGlvblwiXSA9IFwiMS41c1wiO1xyXG4gIGV4cG9ydCBsZXQgc2l6ZTogU3Bpbm5lclR5cGVzW1wic2l6ZVwiXSA9IFwiNjBcIjtcclxuPC9zY3JpcHQ+XHJcblxyXG48c3R5bGU+XHJcbiAgc3BhbiB7XHJcbiAgICB3aWR0aDogdmFyKC0tc2l6ZSk7XHJcbiAgICBoZWlnaHQ6IGNhbGModmFyKC0tc2l6ZSkgLyA0KTtcclxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gIH1cclxuICBkaXYge1xyXG4gICAgd2lkdGg6IGNhbGModmFyKC0tc2l6ZSkgLyA0KTtcclxuICAgIGhlaWdodDogY2FsYyh2YXIoLS1zaXplKSAvIDQpO1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgbGVmdDogMDtcclxuICAgIHRvcDogMDtcclxuICAgIGJvcmRlci1yYWRpdXM6IDJweDtcclxuICAgIGJhY2tncm91bmQ6IHZhcigtLWNvbG9yKTtcclxuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtNTAlKSByb3RhdGUoNDVkZWcpIHNjYWxlKDApO1xyXG4gICAgYW5pbWF0aW9uOiBkaWFtb25kcyB2YXIoLS1kdXJhdGlvbikgbGluZWFyIGluZmluaXRlO1xyXG4gIH1cclxuICBkaXY6bnRoLWNoaWxkKDEpIHtcclxuICAgIGFuaW1hdGlvbi1kZWxheTogY2FsYyh2YXIoLS1kdXJhdGlvbikgKiAyIC8gMyAqIC0xKTtcclxuICB9XHJcbiAgZGl2Om50aC1jaGlsZCgyKSB7XHJcbiAgICBhbmltYXRpb24tZGVsYXk6IGNhbGModmFyKC0tZHVyYXRpb24pICogMiAvIDMgKiAtMik7XHJcbiAgfVxyXG4gIGRpdjpudGgtY2hpbGQoMykge1xyXG4gICAgYW5pbWF0aW9uLWRlbGF5OiBjYWxjKHZhcigtLWR1cmF0aW9uKSAqIDIgLyAzICogLTMpO1xyXG4gIH1cclxuXHJcbiAgQGtleWZyYW1lcyBkaWFtb25kcyB7XHJcbiAgICA1MCUge1xyXG4gICAgICBsZWZ0OiA1MCU7XHJcbiAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtNTAlKSByb3RhdGUoNDVkZWcpIHNjYWxlKDEpO1xyXG4gICAgfVxyXG4gICAgMTAwJSB7XHJcbiAgICAgIGxlZnQ6IDEwMCU7XHJcbiAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtNTAlKSByb3RhdGUoNDVkZWcpIHNjYWxlKDApO1xyXG4gICAgfVxyXG4gIH1cclxuPC9zdHlsZT5cclxuXHJcbjxzcGFuIHN0eWxlPVwiLS1zaXplOiB7c2l6ZX17dW5pdH07IC0tY29sb3I6e2NvbG9yfTsgLS1kdXJhdGlvbjoge2R1cmF0aW9ufTtcIj5cclxuICA8ZGl2IC8+XHJcbiAgPGRpdiAvPlxyXG4gIDxkaXYgLz5cclxuPC9zcGFuPlxyXG4iLCAiPHNjcmlwdCBsYW5nPVwidHNcIj5cclxuICAgIGltcG9ydCB0eXBlIHsgU3Bpbm5lclR5cGVzIH0gZnJvbSBcIi4vdHlwZXMvc3Bpbm5lci50eXBlXCI7XHJcbiAgICBleHBvcnQgbGV0IGNvbG9yOiBTcGlubmVyVHlwZXNbXCJjb2xvclwiXSA9IFwiI0ZGM0UwMFwiO1xyXG4gICAgZXhwb3J0IGxldCB1bml0OiBTcGlubmVyVHlwZXNbXCJ1bml0XCJdID0gXCJweFwiO1xyXG4gICAgZXhwb3J0IGxldCBkdXJhdGlvbjogU3Bpbm5lclR5cGVzW1wiZHVyYXRpb25cIl0gPSBcIjhzXCI7XHJcbiAgICBleHBvcnQgbGV0IHNpemU6IFNwaW5uZXJUeXBlc1tcInNpemVcIl0gPSBcIjYwXCI7XHJcbjwvc2NyaXB0PlxyXG5cclxuPHN0eWxlPlxyXG4gICAgZGl2IHtcclxuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICAgICAgd2lkdGg6IHZhcigtLXNpemUpO1xyXG4gICAgICAgIGhlaWdodDogdmFyKC0tc2l6ZSk7XHJcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XHJcbiAgICAgICAgYm94LXNoYWRvdzogaW5zZXQgMHB4IDBweCAwcHggMnB4IHZhcigtLWNvbG9yKTtcclxuICAgICAgICBib3JkZXItcmFkaXVzOiA1MCU7XHJcbiAgICB9XHJcbiAgICBkaXY6OmJlZm9yZSxcclxuICAgIGRpdjphZnRlciB7XHJcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgICAgIGNvbnRlbnQ6IFwiXCI7XHJcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tY29sb3IpO1xyXG4gICAgfVxyXG4gICAgZGl2OmFmdGVyIHtcclxuICAgICAgICB3aWR0aDogY2FsYyh2YXIoLS1zaXplKSAvIDIuNCk7XHJcbiAgICAgICAgaGVpZ2h0OiAycHg7XHJcbiAgICAgICAgdG9wOiBjYWxjKHZhcigtLXNpemUpIC8gMik7XHJcbiAgICAgICAgbGVmdDogY2FsYyh2YXIoLS1zaXplKSAvIDIpO1xyXG4gICAgICAgIHRyYW5zZm9ybS1vcmlnaW46IDFweCAxcHg7XHJcbiAgICAgICAgYW5pbWF0aW9uOiByb3RhdGUgY2FsYyh2YXIoLS1kdXJhdGlvbikgLyA0KSBsaW5lYXIgaW5maW5pdGU7XHJcbiAgICB9XHJcbiAgICBkaXY6YmVmb3JlIHtcclxuICAgICAgICB3aWR0aDogY2FsYyh2YXIoLS1zaXplKSAvIDMpO1xyXG4gICAgICAgIGhlaWdodDogMnB4O1xyXG4gICAgICAgIHRvcDogY2FsYygodmFyKC0tc2l6ZSkgLyAyKSk7XHJcbiAgICAgICAgbGVmdDogY2FsYygodmFyKC0tc2l6ZSkgLyAyKSk7XHJcbiAgICAgICAgdHJhbnNmb3JtLW9yaWdpbjogMXB4IDFweDtcclxuICAgICAgICBhbmltYXRpb246IHJvdGF0ZSB2YXIoLS1kdXJhdGlvbikgbGluZWFyIGluZmluaXRlO1xyXG4gICAgfVxyXG4gICAgQGtleWZyYW1lcyByb3RhdGUge1xyXG4gICAgICAgIDEwMCUge1xyXG4gICAgICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgzNjBkZWcpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuPC9zdHlsZT5cclxuXHJcbjxkaXYgc3R5bGU9XCItLXNpemU6IHtzaXplfXt1bml0fTsgLS1jb2xvcjp7Y29sb3J9OyAtLWR1cmF0aW9uOntkdXJhdGlvbn1cIiAvPlxyXG4iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsSUFBQUEsb0JBT087OztBQ05QLHNCQUF5Qjs7O0FDQ2xCLElBQU0sYUFBMEI7QUFBQSxFQUNuQztBQUFBLElBQ0ksTUFBTTtBQUFBLElBQ04sYUFDSTtBQUFBLEVBQ1I7QUFBQSxFQUNBO0FBQUEsSUFDSSxNQUFNO0FBQUEsSUFDTixhQUNJO0FBQUEsRUFDUjtBQUFBLEVBQ0E7QUFBQSxJQUNJ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TSxLQUFLLFFBQVEsSUFBSTtBQUFBLEVBQ25ELEdBQUcsRUFBRSxNQUFNLEtBQUssUUFBUSxLQUFLLE1BQU0sS0FBSyxRQUFRLElBQUk7QUFBQSxFQUNwRCxHQUFHLEVBQUUsTUFBTSxLQUFLLFFBQVEsS0FBSyxNQUFNLEtBQUssUUFBUSxLQUFLO0FBQUEsRUFDckQsR0FBRyxFQUFFLE1BQU0sS0FBSyxRQUFRLEtBQUssTUFBTSxLQUFLLFFBQVEsS0FBSztBQUFBLEVBQ3JELEdBQUcsRUFBRSxNQUFNLEtBQUssUUFBUSxLQUFLLE1BQU0sTUFBTSxRQUFRLEtBQUs7QUFBQSxFQUN0RCxHQUFHLEVBQUUsTUFBTSxLQUFLLFFBQVEsS0FBSyxNQUFNLE1BQU0sUUFBUSxLQUFLO0FBQUEsRUFDdEQsR0FBRyxFQUFFLE1BQU0sS0FBSyxRQUFRLE1BQU0sTUFBTSxNQUFNLFFBQVEsS0FBSztBQUFBLEVBQ3ZELElBQUksRUFBRSxNQUFNLEtBQUssUUFBUSxNQUFNLE1BQU0sTUFBTSxRQUFRLEtBQUs7QUFBQSxFQUN4RCxJQUFJLEVBQUUsTUFBTSxLQUFLLFFBQVEsTUFBTSxNQUFNLE1BQU0sUUFBUSxLQUFLO0FBQUEsRUFDeEQsSUFBSSxFQUFFLE1BQU0sS0FBTSxRQUFRLEtBQU0sTUFBTSxLQUFNLFFBQVEsS0FBSztBQUFBLEVBQ3pELElBQUksRUFBRSxNQUFNLE1BQU0sUUFBUSxNQUFNLE1BQU0sTUFBTSxRQUFRLEtBQUs7QUFBQSxFQUN6RCxJQUFJLEVBQUUsTUFBTSxNQUFNLFFBQVEsTUFBTSxNQUFNLE1BQU0sUUFBUSxLQUFLO0FBQUEsRUFDekQsSUFBSSxFQUFFLE1BQU0sTUFBTSxRQUFRLE1BQU0sTUFBTSxNQUFNLFFBQVEsS0FBSztBQUFBLEVBQ3pELElBQUksRUFBRSxNQUFNLE1BQU0sUUFBUSxNQUFNLE1BQU0sTUFBTSxRQUFRLEtBQUs7QUFBQSxFQUN6RCxJQUFJLEVBQUUsTUFBTSxLQUFNLFFBQVEsTUFBTSxNQUFNLE1BQU0sUUFBUSxLQUFLO0FBQUEsRUFDekQsSUFBSSxFQUFFLE1BQU0sTUFB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LE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxRQUNOLGNBQWM7QUFBQSxNQUNmO0FBQUEsSUFDRDtBQUFBLElBQ0EsU0FBUztBQUFBLE1BQ1I7QUFBQSxRQUNDLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxRQUNOLGNBQWM7QUFBQSxNQUNmO0FBQUEsTUFDQTtBQUFBLFFBQ0MsTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFFBQ04sY0FBYztBQUFBLFFBQ2QsYUFBYTtBQUFBLFFBQ2IsY0FBYztBQUFBLE1BQ2Y7QUFBQSxNQUNBO0FBQUEsUUFDQyxNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsUUFDTixjQUFjO0FBQUEsUUFDZCxhQUFhO0FBQUEsUUFDYixjQUFjO0FBQUEsTUFDZjtBQUFBLE1BQ0E7QUFBQSxRQUNDLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxRQUNOLGNBQWM7QUFBQSxRQUNkLGFBQWE7QUFBQSxRQUNiLGNBQWM7QUFBQSxNQUNmO0FBQUEsTUFDQTtBQUFBLFFBQ0MsTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFFBQ04sY0FBYztBQUFBLE1BQ2Y7QUFBQSxNQUNBO0FBQUEsUUFDQyxNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsUUFDTixjQUFjO0FBQUEsUUFDZCxhQUFhO0FBQUEsTUFDZDtBQUFBLElBQ0Q7QUFBQSxJQUNBLG1CQUFtQjtBQUFBLE1BQ2xCO0FBQUEsUUFDQyxNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsUUFDTixjQUFjO0FBQUEsTUFDZjtBQUFBLE1BQ0E7QUFBQSxRQUNDLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxRQUNOLGNBQWM7QUFBQSxNQUNmO0FBQUEsTUFDQTtBQUFBLFFBQ0MsTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFFBQ04sY0FBYztBQUFBLE1BQ2Y7QUFBQSxJQUNEO0FBQUEsRUFDRDtBQUFBLEVBQ0E7QUFBQSxJQUNDLE1BQU07QUFBQSxJQUNOLE1BQU07QUFBQSxJQUNOLFFBQVE7QUFBQSxJQUNSLE1BQU07QUFBQSxJQUNOLFNBQVM7QUFBQSxJ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O0FBQUEsSUFDSixRQUFRO0FBQUEsTUFDUDtBQUFBLFFBQ0MsTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFFBQ04sY0FBYztBQUFBLE1BQ2Y7QUFBQSxJQUNEO0FBQUEsSUFDQSxTQUFTO0FBQUEsTUFDUjtBQUFBLFFBQ0MsTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFFBQ04sY0FBYztBQUFBLE1BQ2Y7QUFBQSxNQUNBO0FBQUEsUUFDQyxNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsUUFDTixjQUFjO0FBQUEsUUFDZCxhQUFhO0FBQUEsUUFDYixjQUFjO0FBQUEsTUFDZjtBQUFBLE1BQ0E7QUFBQSxRQUNDLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxRQUNOLGNBQWM7QUFBQSxRQUNkLGFBQWE7QUFBQSxRQUNiLGNBQWM7QUFBQSxNQUNmO0FBQUEsTUFDQTtBQUFBLFFBQ0MsTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFFBQ04sY0FBYztBQUFBLFFBQ2QsYUFBYTtBQUFBLFFBQ2IsY0FBYztBQUFBLE1BQ2Y7QUFBQSxNQUNBO0FBQUEsUUFDQyxNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsUUFDTixjQUFjO0FBQUEsTUFDZjtBQUFBLE1BQ0E7QUFBQSxRQUNDLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxRQUNOLGNBQWM7QUFBQSxRQUNkLGFBQWE7QUFBQSxNQUNkO0FBQUEsSUFDRDtBQUFBLElBQ0EsbUJBQW1CO0FBQUEsTUFDbEI7QUFBQSxRQUNDLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxRQUNOLGNBQWM7QUFBQSxNQUNmO0FBQUEsTUFDQTtBQUFBLFFBQ0MsTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFFBQ04sY0FBYztBQUFBLE1BQ2Y7QUFBQSxNQUNBO0FBQUEsUUFDQyxNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsUUFDTixjQUFjO0FBQUEsTUFDZjtBQUFBLElBQ0Q7QUFBQSxFQUNEO0FBQUEsRUFDQTtBQUFBLElBQ0MsTUFBTTtBQUFBLElBQ04sTUFBTTtBQUFBLElBQ04sUUFBUTtB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QUFBLFFBQ0MsTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFFBQ04sY0FBYztBQUFBLE1BQ2Y7QUFBQSxNQUNBO0FBQUEsUUFDQyxNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsUUFDTixjQUFjO0FBQUEsUUFDZCxhQUFhO0FBQUEsUUFDYixjQUFjO0FBQUEsTUFDZjtBQUFBLE1BQ0E7QUFBQSxRQUNDLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxRQUNOLGNBQWM7QUFBQSxRQUNkLGFBQWE7QUFBQSxRQUNiLGNBQWM7QUFBQSxNQUNmO0FBQUEsTUFDQTtBQUFBLFFBQ0MsTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFFBQ04sY0FBYztBQUFBLFFBQ2QsYUFBYTtBQUFBLFFBQ2IsY0FBYztBQUFBLE1BQ2Y7QUFBQSxNQUNBO0FBQUEsUUFDQyxNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsUUFDTixjQUFjO0FBQUEsTUFDZjtBQUFBLE1BQ0E7QUFBQSxRQUNDLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxRQUNOLGNBQWM7QUFBQSxRQUNkLGFBQWE7QUFBQSxNQUNkO0FBQUEsTUFDQTtBQUFBLFFBQ0MsTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFFBQ04sY0FBYztBQUFBLFFBQ2QsYUFBYTtBQUFBLE1BQ2Q7QUFBQSxJQUNEO0FBQUEsSUFDQSxtQkFBbUI7QUFBQSxNQUNsQjtBQUFBLFFBQ0MsTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFFBQ04sY0FBYztBQUFBLE1BQ2Y7QUFBQSxNQUNBO0FBQUEsUUFDQyxNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsUUFDTixjQUFjO0FBQUEsTUFDZjtBQUFBLE1BQ0E7QUFBQSxRQUNDLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxRQUNOLGNBQWM7QUFBQSxNQUNmO0FBQUEsSUFDRDtBQUFBLEVBQ0Q7QUFBQSxFQUNBO0FBQUEsSUFDQyxNQUFNO0FBQUEsSUFDTixNQUFNO0FBQUEsSUFDTixRQUFRO0FBQUEsSUFDUixNQUFNO0FBQUEsSUFDTixTQUFTO0FBQUEsSUFD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QSxNQUNBO0FBQUEsUUFDQyxNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsUUFDTixjQUFjO0FBQUEsTUFDZjtBQUFBLElBQ0Q7QUFBQSxJQUNBLFNBQVM7QUFBQSxNQUNSO0FBQUEsUUFDQyxNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsUUFDTixjQUFjO0FBQUEsTUFDZjtBQUFBLE1BQ0E7QUFBQSxRQUNDLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxRQUNOLGNBQWM7QUFBQSxRQUNkLGFBQWE7QUFBQSxRQUNiLGNBQWM7QUFBQSxNQUNmO0FBQUEsTUFDQTtBQUFBLFFBQ0MsTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFFBQ04sY0FBYztBQUFBLFFBQ2QsYUFBYTtBQUFBLFFBQ2IsY0FBYztBQUFBLE1BQ2Y7QUFBQSxNQUNBO0FBQUEsUUFDQyxNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsUUFDTixjQUFjO0FBQUEsUUFDZCxhQUFhO0FBQUEsUUFDYixjQUFjO0FBQUEsTUFDZjtBQUFBLE1BQ0E7QUFBQSxRQUNDLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxRQUNOLGNBQWM7QUFBQSxNQUNmO0FBQUEsTUFDQTtBQUFBLFFBQ0MsTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFFBQ04sY0FBYztBQUFBLFFBQ2QsYUFBYTtBQUFBLE1BQ2Q7QUFBQSxJQUNEO0FBQUEsSUFDQSxtQkFBbUI7QUFBQSxNQUNsQjtBQUFBLFFBQ0MsTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFFBQ04sY0FBYztBQUFBLE1BQ2Y7QUFBQSxNQUNBO0FBQUEsUUFDQyxNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsUUFDTixjQUFjO0FBQUEsTUFDZjtBQUFBLE1BQ0E7QUFBQSxRQUNDLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxRQUNOLGNBQWM7QUFBQSxNQUNmO0FBQUEsSUFDRDtBQUFBLEVBQ0Q7QUFBQSxFQUNBO0FBQUEsSUFDQyxNQUFNO0FBQUEsSUFDTixNQUFNO0FBQUEsSUFDTixRQUFRO0FBQUEsSUFDUixNQUFNO0FBQUEs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QUFBQSxRQUNDLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxRQUNOLGNBQWM7QUFBQSxNQUNmO0FBQUEsTUFDQTtBQUFBLFFBQ0MsTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFFBQ04sY0FBYztBQUFBLE1BQ2Y7QUFBQSxNQUNBO0FBQUEsUUFDQyxNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsUUFDTixjQUFjO0FBQUEsTUFDZjtBQUFBLElBQ0Q7QUFBQSxJQUNBLFNBQVM7QUFBQSxNQUNSO0FBQUEsUUFDQyxNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsUUFDTixjQUFjO0FBQUEsTUFDZjtBQUFBLE1BQ0E7QUFBQSxRQUNDLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxRQUNOLGNBQWM7QUFBQSxRQUNkLGFBQWE7QUFBQSxRQUNiLGNBQWM7QUFBQSxNQUNmO0FBQUEsTUFDQTtBQUFBLFFBQ0MsTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFFBQ04sY0FBYztBQUFBLFFBQ2QsYUFBYTtBQUFBLFFBQ2IsY0FBYztBQUFBLE1BQ2Y7QUFBQSxNQUNBO0FBQUEsUUFDQyxNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsUUFDTixjQUFjO0FBQUEsUUFDZCxhQUFhO0FBQUEsUUFDYixjQUFjO0FBQUEsTUFDZjtBQUFBLE1BQ0E7QUFBQSxRQUNDLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxRQUNOLGNBQWM7QUFBQSxRQUNkLGFBQWE7QUFBQSxRQUNiLGNBQWM7QUFBQSxNQUNmO0FBQUEsTUFDQTtBQUFBLFFBQ0MsTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFFBQ04sY0FBYztBQUFBLE1BQ2Y7QUFBQSxNQUNBO0FBQUEsUUFDQyxNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsUUFDTixjQUFjO0FBQUEsTUFDZjtBQUFBLElBQ0Q7QUFBQSxJQUNBLG1CQUFtQjtBQUFBLE1BQ2xCO0FBQUEsUUFDQyxNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsUUFDTixjQUFjO0FBQUEsTUFDZjtBQUFBLE1BQ0E7QUFBQSxRQUNDLE1B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O0FBQUEsUUFDTixjQUFjO0FBQUEsTUFDZjtBQUFBLE1BQ0E7QUFBQSxRQUNDLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxRQUNOLGNBQWM7QUFBQSxNQUNmO0FBQUEsTUFDQTtBQUFBLFFBQ0MsTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFFBQ04sY0FBYztBQUFBLE1BQ2Y7QUFBQSxNQUNBO0FBQUEsUUFDQyxNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsUUFDTixjQUFjO0FBQUEsTUFDZjtBQUFBLE1BQ0E7QUFBQSxRQUNDLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxRQUNOLGNBQWM7QUFBQSxNQUNmO0FBQUEsSUFDRDtBQUFBLElBQ0EsU0FBUztBQUFBLE1BQ1I7QUFBQSxRQUNDLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxRQUNOLGNBQWM7QUFBQSxNQUNmO0FBQUEsTUFDQTtBQUFBLFFBQ0MsTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFFBQ04sY0FBYztBQUFBLFFBQ2QsYUFBYTtBQUFBLFFBQ2IsY0FBYztBQUFBLE1BQ2Y7QUFBQSxNQUNBO0FBQUEsUUFDQyxNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsUUFDTixjQUFjO0FBQUEsUUFDZCxhQUFhO0FBQUEsUUFDYixjQUFjO0FBQUEsTUFDZjtBQUFBLE1BQ0E7QUFBQSxRQUNDLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxRQUNOLGNBQWM7QUFBQSxNQUNmO0FBQUEsTUFDQTtBQUFBLFFBQ0MsTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFFBQ04sY0FBYztBQUFBLE1BQ2Y7QUFBQSxJQUNEO0FBQUEsSUFDQSxtQkFBbUI7QUFBQSxNQUNsQjtBQUFBLFFBQ0MsTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFFBQ04sY0FBYztBQUFBLE1BQ2Y7QUFBQSxNQUNBO0FBQUEsUUFDQyxNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsUUFDTixjQUFjO0FBQUEsTUFDZjtBQUFBLE1BQ0E7QUFBQSxRQUNDLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxR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LFFBQVEsS0FBSyxNQUFNLEtBQUssUUFBUSxLQUFLO0FBQUEsRUFDbEUsR0FBRyxFQUFFLE9BQU8sS0FBTSxNQUFNLEtBQUssUUFBUSxLQUFLLE1BQU0sS0FBSyxRQUFRLEtBQUs7QUFBQSxFQUNsRSxHQUFHLEVBQUUsT0FBTyxLQUFNLE1BQU0sS0FBSyxRQUFRLEtBQUssTUFBTSxNQUFNLFFBQVEsS0FBSztBQUFBLEVBQ25FLEdBQUcsRUFBRSxPQUFPLEtBQU0sTUFBTSxLQUFLLFFBQVEsS0FBSyxNQUFNLE1BQU0sUUFBUSxLQUFLO0FBQUEsRUFDbkUsR0FBRyxFQUFFLE9BQU8sTUFBTSxNQUFNLEtBQUssUUFBUSxNQUFNLE1BQU0sTUFBTSxRQUFRLEtBQUs7QUFBQSxFQUNwRSxJQUFJLEVBQUUsT0FBTyxLQUFNLE1BQU0sS0FBSyxRQUFRLE1BQU0sTUFBTSxNQUFNLFFBQVEsS0FBSztBQUFBLEVBQ3JFLElBQUksRUFBRSxPQUFPLE9BQU8sTUFBTSxLQUFLLFFBQVEsTUFBTSxNQUFNLE1BQU0sUUFBUSxLQUFLO0FBQUEsRUFDdEUsSUFBSSxFQUFFLE9BQU8sT0FBTyxNQUFNLEtBQU0sUUFBUSxLQUFNLE1BQU0sS0FBTSxRQUFRLEtBQUs7QUFBQSxFQUN2RSxJQUFJLEVBQUUsT0FBTyxPQUFPLE1BQU0sTUFBTSxRQUFRLE1BQU0sTUFBTSxNQUFNLFFBQVEsS0FBSztBQUFBLEVBQ3ZFLElBQUksRUFBRSxPQUFPLE1BQU8sTUFBTSxNQUFNLFFBQVEsTUFBTSxNQUFNLE1BQU0sUUFBUSxLQUFLO0FBQUEsRUFDdkUsSUFBSSxFQUFFLE9BQU8sTUFBTyxNQUFNLE1BQU0sUUFBUSxNQUFNLE1BQU0sTUFBTSxRQUFRLEtBQUs7QUFBQSxFQUN2RSxJQUFJLEVBQUUsT0FBTyxLQUFPLE1BQU0sTUFBTSxRQUFRLE1BQU0sTUFBTSxNQUFNLFFBQVEsS0FBSztBQUFBLEVBQ3ZFLElBQUksRUFBRSxPQUFPLE1BQU8sTUFBTSxLQUFNLFFBQVEsTUFBTSxNQUFNLE1BQU0sUUFBUSxLQUFLO0FBQUEsRUFDdkUsSUFBSSxF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OyIsCiAgIm5hbWVzIjogWyJpbXBvcnRfb2JzaWRpYW4iLCAiaW1wb3J0X29ic2lkaWFuIiwgImltcG9ydF9vYnNpZGlhbiIsICJpbXBvcnRfb2JzaWRpYW4iLCAiZWxlbWVudCIsICJuYW1lIiwgImVsZW1lbnQiLCAic3R5bGUiLCAiZWxlbWVudCIsICJlbGVtZW50IiwgIm5leHQiLCAiZ2V0Q29tcHV0ZWRTdHlsZSIsICJlbGVtZW50IiwgImVsZW1lbnQiLCAiZWxlbWVudCIsICJlbGVtZW50IiwgImVsZW1lbnQiLCAiZ2V0Q29tcHV0ZWRTdHlsZSIsICJ3aW5kb3ciLCAibWluIiwgIm1heCIsICJ0b1BhZGRpbmdPYmplY3QiLCAibmFtZSIsICJwb3BwZXJPZmZzZXRzIiwgIm1pbiIsICJtYXgiLCAib2Zmc2V0IiwgImVmZmVjdCIsICJwb3BwZXIiLCAiZ2V0Q29tcHV0ZWRTdHlsZSIsICJlZmZlY3QiLCAiaW5zdGFuY2UiLCAid2luZG93IiwgImhhc2giLCAiZWxlbWVudCIsICJlbGVtZW50IiwgImVsZW1lbnQiLCAiZ2V0Q29tcHV0ZWRTdHlsZSIsICJlbGVtZW50IiwgImdldENvbXB1dGVkU3R5bGUiLCAiZWxlbWVudCIsICJlbGVtZW50IiwgImNsaXBwaW5nUGFyZW50cyIsICJnZXRDb21wdXRlZFN0eWxlIiwgInJlZmVyZW5jZSIsICJlbGVtZW50IiwgImVsZW1lbnQiLCAicG9wcGVyT2Zmc2V0cyIsICJvZmZzZXQiLCAicGxhY2VtZW50cyIsICJwbGFjZW1lbnQiLCAibmFtZSIsICJwbGFjZW1lbnRzIiwgInBsYWNlbWVudCIsICJfbG9vcCIsICJfaSIsICJjaGVja3MiLCAibmFtZSIsICJvZmZzZXQiLCAibmFtZSIsICJuYW1lIiwgIm5hbWUiLCAicG9wcGVyT2Zmc2V0cyIsICJvZmZzZXQiLCAibWluIiwgIm1heCIsICJlbGVtZW50IiwgImVsZW1lbnQiLCAibW9kaWZpZXIiLCAiZm4iLCAibW9kaWZpZXIiLCAic2VsZiIsICJmbiIsICJtZXJnZWQiLCAiZWxlbWVudCIsICJkZWZhdWx0TW9kaWZpZXJzIiwgImNyZWF0ZVBvcHBlciIsICJyZWZlcmVuY2UiLCAicG9wcGVyIiwgImluc3RhbmNlIiwgIm9wdGlvbnMiLCAibmFtZSIsICJnZXRDb21wdXRlZFN0eWxlIiwgIm1vZGlmaWVyIiwgImZuIiwgInN0YXRlIiwgImVmZmVjdCIsICJub29wRm4iLCAic2l6ZSIsICJuZXh0IiwgImFwcCIsICJmaWxlIiwgImVsZW1lbnQiLCAiZWxlbWVudCIsICJmaWxlIiwgImFwcCIsICJpbXBvcnRfb2JzaWRpYW4iLCAibmFtZSIsICJtb2RpZmllciIsICJmbiIsICJmbiIsICJub3ciLCAibmFtZSIsICJuYW1lIiwgImZuIiwgImVsZW1lbnQiLCAidGV4dCIsICJlbGVtZW50IiwgIm5hbWUiLCAidHlwZSIsICJoYXNoIiwgImZuIiwgIm5hbWUiLCAibmV4dCIsICJlbmQiLCAidGljayIsICJzdGFydCIsICJub3ciLCAiZm4iLCAiZm4iLCAidHlwZSIsICJmbiIsICJmbiIsICJkZXRhY2giLCAiZm4iLCAiaW5pdCIsICJ0aWNrIiwgIm5vdyIsICJjcmVhdGVfZWFjaF9ibG9jayIsICJuZXh0IiwgImluc2VydCIsICJ1cGRhdGUiLCAibmFtZSIsICJpbnN0YW5jZSIsICJjcmVhdGVfZnJhZ21lbnQiLCAiYXBwZW5kX3N0eWxlcyIsICJhdHRyIiwgInR5cGUiLCAic3RhcnQiLCAidXBkYXRlIiwgImZuIiwgInN1YnNjcmliZSIsICJydW4iLCAiYXV0byIsICJpbXBvcnRfb2JzaWRpYW4iLCAiY3R4IiwgIm5hbWUiLCAicGxheWVycyIsICJoaWRlIiwgInRvdGFsWFAiLCAiY3JlYXR1cmVzIiwgImxhYmVsIiwgImN0eCIsICJjcmVhdGVfaWZfYmxvY2tfMSIsICJjcmVhdGVfaWZfYmxvY2siLCAibmFtZSIsICJwbGF5ZXJzIiwgImhpZGUiLCAidG90YWxYUCIsICJjcmVhdHVyZXMiLCAibGFiZWwiLCAiY3R4IiwgImNyZWF0ZV9pZl9ibG9jayIsICJlbmNvdW50ZXIiLCAibmFtZSIsICJwbGF5ZXJzIiwgImhpZGUiLCAiZW1wdHkiLCAiZW5jb3VudGVyIiwgImltcG9ydF9vYnNpZGlhbiIsICJzdWJzY3JpYmUiLCAidXBkYXRlIiwgImNyZWF0dXJlcyIsICJtb2RpZmllciIsICJuYW1lIiwgInBsYXllcnMiLCAibmV4dCIsICJyb3VuZCIsICJzdGF0dXMiLCAibW9kaWZpZXIiLCAiZXJyb3IiLCAiYXBwIiwgInRleHQiLCAibmFtZSIsICJjdHgiLCAiY3JlYXRlX2lmX2Jsb2NrIiwgImNyZWF0dXJlcyIsICJsYWJlbCIsICJpbXBvcnRfb2JzaWRpYW4iLCAiY3R4IiwgImNyZWF0ZV9pZl9ibG9ja18xIiwgImNyZWF0ZV9pZl9ibG9jayIsICJkaXNwYXRjaCIsICJldnQiLCAiaXRlbSIsICJjdHgiLCAiZGlzcGF0Y2giLCAibW9kaWZpZXIiLCAiZGlzcGF0Y2giLCAiZXZ0IiwgIml0ZW0iLCAiY3R4IiwgImRpc3BhdGNoIiwgImN0eCIsICJjcmVhdGVfaWZfYmxvY2tfMiIsICJjcmVhdGVfaWZfYmxvY2tfMSIsICJjcmVhdGVfaWZfYmxvY2siLCAiZGlzcGF0Y2giLCAibmFtZSIsICJvYmoiLCAiZHJhZ2dlZEVsIiwgInByaW50RGVidWciLCAiY2hpbGRyZW4iLCAicmVzZXRTY3JvbGxpbmciLCAic2Nyb2xsSWZOZWVkZWQiLCAiZHJhZ2dlZEVsIiwgImxvb3AiLCAidHlwZSIsICJkeiIsICJ1cGRhdGUiLCAiX2xvb3AiLCAiaSIsICJmbGlwRHVyYXRpb25NcyIsICJmbGlwIiwgImN0eCIsICJkaXNwYXRjaCIsICJjdHgiLCAiY3JlYXRlX2lmX2Jsb2NrXzMiLCAiY3JlYXRlX2lmX2Jsb2NrXzIiLCAiY3JlYXRlX2lmX2Jsb2NrXzEiLCAiY3JlYXRlX2lmX2Jsb2NrIiwgIm5hbWUiLCAicm91bmQiLCAiY3JlYXRlX2lmX2Jsb2NrIiwgImN0eCIsICJuYW1lIiwgImRpc3BhdGNoIiwgImN0eCIsICJkaXNwYXRjaCIsICJlbmNvdW50ZXIiLCAiY3JlYXRlX2lmX2Jsb2NrXzMiLCAiY3JlYXRlX2lmX2Jsb2NrXzIiLCAiY3JlYXRlX2lmX2Jsb2NrXzEiLCAiY3R4IiwgImNyZWF0ZV9pZl9ibG9jayIsICJpbml0IiwgInVwZGF0ZSIsICJpbXBvcnRfb2JzaWRpYW4iLCAiaW1wb3J0X29ic2lkaWFuIiwgImN0eCIsICJjcmVhdGVfaWZfYmxvY2siLCAiZGlzcGF0Y2giLCAiY29uZmlybVdpdGhNb2RhbCIsICJjdHgiLCAiY3JlYXRlX2lmX2Jsb2NrXzEiLCAiY3JlYXRlX2lmX2Jsb2NrIiwgImluaXQiLCAiY3JlYXRlX2lmX2Jsb2NrIiwgImN0eCIsICJkaXNwYXRjaCIsICJjcmVhdHVyZSIsICJjb25maXJtV2l0aE1vZGFsIiwgImFwcCIsICJ0ZXh0IiwgIkNvbmZpcm1Nb2RhbCIsICJjdHgiLCAiZGlzcGF0Y2giLCAiY3R4IiwgImltcG9ydF9vYnNpZGlhbiIsICJzdWJzY3JpYmUiLCAidXBkYXRlIiwgInBsYXllcnMiLCAiY291bnQiLCAic3Vic2NyaWJlIiwgInVwZGF0ZSIsICJjdHgiLCAiY3R4IiwgImNyZWF0ZV9pZl9ibG9jayIsICJjdHgiLCAiZSIsICJsZWZ0IiwgImRpc3BhdGNoIiwgImFjdGl2ZSIsICJjdHgiLCAiY3JlYXRlX2lmX2Jsb2NrXzEiLCAiY3JlYXRlX2lmX2Jsb2NrIiwgImRpc3BhdGNoIiwgIm5hbWUiLCAibWluIiwgIm1heCIsICJhY3RpdmUiLCAib3JkZXIiLCAicG9zIiwgIm9mZnNldCIsICJ2YWx1ZSIsICJjdHgiLCAic2l6ZSIsICJjdHgiLCAiY3R4IiwgImN0eCIsICJzcHJpbmciLCAib3B0cyIsICJub3ciLCAiZm4iLCAiY3R4IiwgImN0eCIsICJjcmVhdGVfaWZfYmxvY2tfOCIsICJjcmVhdGVfaWZfYmxvY2tfNiIsICJjcmVhdGVfaWZfYmxvY2tfNSIsICJjcmVhdGVfaWZfYmxvY2tfMiIsICJjcmVhdGVfaWZfYmxvY2tfMSIsICJjcmVhdGVfaWZfYmxvY2tfNyIsICJjcmVhdGVfaWZfYmxvY2siLCAic2VhcmNoVGV4dCIsICJuYW1lIiwgImRpc3BhdGNoIiwgIm9wdGlvbiIsICJkaXNhYmxlZCIsICJzdWJzY3JpYmUiLCAidXBkYXRlIiwgImNyIiwgImN0eCIsICJjcmVhdGVfaWZfYmxvY2siLCAiY3R4IiwgImFjdGl2ZSIsICJjdHgiLCAiY3JlYXRlX2lmX2Jsb2NrIiwgImRpc3BhdGNoIiwgIm5leHQiLCAiY3R4IiwgImFjdGl2ZSIsICJjdHgiLCAiY3JlYXRlX2lmX2Jsb2NrXzEiLCAiY3JlYXRlX2lmX2Jsb2NrIiwgInBsYXllcnMiLCAiY3IiLCAiY3R4IiwgInBsYXllcnMiLCAic3RhcnQiLCAibmFtZSIsICJjdHgiLCAibW9kaWZpZXIiLCAiY291bnQiLCAiY3R4IiwgImNyZWF0ZV9pZl9ibG9ja18xIiwgImNyZWF0ZV9pZl9ibG9jayIsICJjcmVhdGVfaWZfYmxvY2tfMiIsICJuYW1lIiwgImFkZEljb24iLCAiaW1wb3J0X29ic2lkaWFuIiwgInJlc29sdmVkX3Byb21pc2UiLCAiY3R4IiwgImNyZWF0ZV9pZl9ibG9jayIsICJkaXNwYXRjaCIsICJtYXgiLCAiYWN0aXZlIiwgIm5hbWUiLCAiUGxheWVyVmlldyIsICJtb2RpZmllciIsICJuYW1lIiwgIlBsYXllclZpZXciLCAicGxheWVycyJdCn0K
