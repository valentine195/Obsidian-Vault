/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/dom-to-image/src/dom-to-image.js
var require_dom_to_image = __commonJS({
  "node_modules/dom-to-image/src/dom-to-image.js"(exports, module2) {
    (function(global2) {
      "use strict";
      var util = newUtil();
      var inliner = newInliner();
      var fontFaces = newFontFaces();
      var images = newImages();
      var defaultOptions = {
        imagePlaceholder: void 0,
        cacheBust: false
      };
      var domtoimage2 = {
        toSvg,
        toPng,
        toJpeg,
        toBlob,
        toPixelData,
        impl: {
          fontFaces,
          images,
          util,
          inliner,
          options: {}
        }
      };
      if (typeof module2 !== "undefined")
        module2.exports = domtoimage2;
      else
        global2.domtoimage = domtoimage2;
      function toSvg(node, options) {
        options = options || {};
        copyOptions(options);
        return Promise.resolve(node).then(function(node2) {
          return cloneNode(node2, options.filter, true);
        }).then(embedFonts).then(inlineImages).then(applyOptions).then(function(clone) {
          return makeSvgDataUri(
            clone,
            options.width || util.width(node),
            options.height || util.height(node)
          );
        });
        function applyOptions(clone) {
          if (options.bgcolor)
            clone.style.backgroundColor = options.bgcolor;
          if (options.width)
            clone.style.width = options.width + "px";
          if (options.height)
            clone.style.height = options.height + "px";
          if (options.style)
            Object.keys(options.style).forEach(function(property) {
              clone.style[property] = options.style[property];
            });
          return clone;
        }
      }
      function toPixelData(node, options) {
        return draw(node, options || {}).then(function(canvas) {
          return canvas.getContext("2d").getImageData(
            0,
            0,
            util.width(node),
            util.height(node)
          ).data;
        });
      }
      function toPng(node, options) {
        return draw(node, options || {}).then(function(canvas) {
          return canvas.toDataURL();
        });
      }
      function toJpeg(node, options) {
        options = options || {};
        return draw(node, options).then(function(canvas) {
          return canvas.toDataURL("image/jpeg", options.quality || 1);
        });
      }
      function toBlob(node, options) {
        return draw(node, options || {}).then(util.canvasToBlob);
      }
      function copyOptions(options) {
        if (typeof options.imagePlaceholder === "undefined") {
          domtoimage2.impl.options.imagePlaceholder = defaultOptions.imagePlaceholder;
        } else {
          domtoimage2.impl.options.imagePlaceholder = options.imagePlaceholder;
        }
        if (typeof options.cacheBust === "undefined") {
          domtoimage2.impl.options.cacheBust = defaultOptions.cacheBust;
        } else {
          domtoimage2.impl.options.cacheBust = options.cacheBust;
        }
      }
      function draw(domNode, options) {
        return toSvg(domNode, options).then(util.makeImage).then(util.delay(100)).then(function(image) {
          var canvas = newCanvas(domNode);
          canvas.getContext("2d").drawImage(image, 0, 0);
          return canvas;
        });
        function newCanvas(domNode2) {
          var canvas = document.createElement("canvas");
          canvas.width = options.width || util.width(domNode2);
          canvas.height = options.height || util.height(domNode2);
          if (options.bgcolor) {
            var ctx = canvas.getContext("2d");
            ctx.fillStyle = options.bgcolor;
            ctx.fillRect(0, 0, canvas.width, canvas.height);
          }
          return canvas;
        }
      }
      function cloneNode(node, filter, root) {
        if (!root && filter && !filter(node))
          return Promise.resolve();
        return Promise.resolve(node).then(makeNodeCopy).then(function(clone) {
          return cloneChildren(node, clone, filter);
        }).then(function(clone) {
          return processClone(node, clone);
        });
        function makeNodeCopy(node2) {
          if (node2 instanceof HTMLCanvasElement)
            return util.makeImage(node2.toDataURL());
          return node2.cloneNode(false);
        }
        function cloneChildren(original, clone, filter2) {
          var children2 = original.childNodes;
          if (children2.length === 0)
            return Promise.resolve(clone);
          return cloneChildrenInOrder(clone, util.asArray(children2), filter2).then(function() {
            return clone;
          });
          function cloneChildrenInOrder(parent, children3, filter3) {
            var done = Promise.resolve();
            children3.forEach(function(child) {
              done = done.then(function() {
                return cloneNode(child, filter3);
              }).then(function(childClone) {
                if (childClone)
                  parent.appendChild(childClone);
              });
            });
            return done;
          }
        }
        function processClone(original, clone) {
          if (!(clone instanceof Element))
            return clone;
          return Promise.resolve().then(cloneStyle).then(clonePseudoElements).then(copyUserInput).then(fixSvg).then(function() {
            return clone;
          });
          function cloneStyle() {
            copyStyle(window.getComputedStyle(original), clone.style);
            function copyStyle(source, target) {
              if (source.cssText)
                target.cssText = source.cssText;
              else
                copyProperties(source, target);
              function copyProperties(source2, target2) {
                util.asArray(source2).forEach(function(name) {
                  target2.setProperty(
                    name,
                    source2.getPropertyValue(name),
                    source2.getPropertyPriority(name)
                  );
                });
              }
            }
          }
          function clonePseudoElements() {
            [":before", ":after"].forEach(function(element2) {
              clonePseudoElement(element2);
            });
            function clonePseudoElement(element2) {
              var style = window.getComputedStyle(original, element2);
              var content = style.getPropertyValue("content");
              if (content === "" || content === "none")
                return;
              var className = util.uid();
              clone.className = clone.className + " " + className;
              var styleElement = document.createElement("style");
              styleElement.appendChild(formatPseudoElementStyle(className, element2, style));
              clone.appendChild(styleElement);
              function formatPseudoElementStyle(className2, element3, style2) {
                var selector = "." + className2 + ":" + element3;
                var cssText = style2.cssText ? formatCssText(style2) : formatCssProperties(style2);
                return document.createTextNode(selector + "{" + cssText + "}");
                function formatCssText(style3) {
                  var content2 = style3.getPropertyValue("content");
                  return style3.cssText + " content: " + content2 + ";";
                }
                function formatCssProperties(style3) {
                  return util.asArray(style3).map(formatProperty).join("; ") + ";";
                  function formatProperty(name) {
                    return name + ": " + style3.getPropertyValue(name) + (style3.getPropertyPriority(name) ? " !important" : "");
                  }
                }
              }
            }
          }
          function copyUserInput() {
            if (original instanceof HTMLTextAreaElement)
              clone.innerHTML = original.value;
            if (original instanceof HTMLInputElement)
              clone.setAttribute("value", original.value);
          }
          function fixSvg() {
            if (!(clone instanceof SVGElement))
              return;
            clone.setAttribute("xmlns", "http://www.w3.org/2000/svg");
            if (!(clone instanceof SVGRectElement))
              return;
            ["width", "height"].forEach(function(attribute) {
              var value = clone.getAttribute(attribute);
              if (!value)
                return;
              clone.style.setProperty(attribute, value);
            });
          }
        }
      }
      function embedFonts(node) {
        return fontFaces.resolveAll().then(function(cssText) {
          var styleNode = document.createElement("style");
          node.appendChild(styleNode);
          styleNode.appendChild(document.createTextNode(cssText));
          return node;
        });
      }
      function inlineImages(node) {
        return images.inlineAll(node).then(function() {
          return node;
        });
      }
      function makeSvgDataUri(node, width, height) {
        return Promise.resolve(node).then(function(node2) {
          node2.setAttribute("xmlns", "http://www.w3.org/1999/xhtml");
          return new XMLSerializer().serializeToString(node2);
        }).then(util.escapeXhtml).then(function(xhtml) {
          return '<foreignObject x="0" y="0" width="100%" height="100%">' + xhtml + "</foreignObject>";
        }).then(function(foreignObject) {
          return '<svg xmlns="http://www.w3.org/2000/svg" width="' + width + '" height="' + height + '">' + foreignObject + "</svg>";
        }).then(function(svg) {
          return "data:image/svg+xml;charset=utf-8," + svg;
        });
      }
      function newUtil() {
        return {
          escape,
          parseExtension,
          mimeType,
          dataAsUrl,
          isDataUrl,
          canvasToBlob,
          resolveUrl,
          getAndEncode,
          uid: uid(),
          delay,
          asArray,
          escapeXhtml,
          makeImage,
          width,
          height
        };
        function mimes() {
          var WOFF = "application/font-woff";
          var JPEG = "image/jpeg";
          return {
            "woff": WOFF,
            "woff2": WOFF,
            "ttf": "application/font-truetype",
            "eot": "application/vnd.ms-fontobject",
            "png": "image/png",
            "jpg": JPEG,
            "jpeg": JPEG,
            "gif": "image/gif",
            "tiff": "image/tiff",
            "svg": "image/svg+xml"
          };
        }
        function parseExtension(url) {
          var match = /\.([^\.\/]*?)$/g.exec(url);
          if (match)
            return match[1];
          else
            return "";
        }
        function mimeType(url) {
          var extension = parseExtension(url).toLowerCase();
          return mimes()[extension] || "";
        }
        function isDataUrl(url) {
          return url.search(/^(data:)/) !== -1;
        }
        function toBlob2(canvas) {
          return new Promise(function(resolve) {
            var binaryString = window.atob(canvas.toDataURL().split(",")[1]);
            var length = binaryString.length;
            var binaryArray = new Uint8Array(length);
            for (var i = 0; i < length; i++)
              binaryArray[i] = binaryString.charCodeAt(i);
            resolve(new Blob([binaryArray], {
              type: "image/png"
            }));
          });
        }
        function canvasToBlob(canvas) {
          if (canvas.toBlob)
            return new Promise(function(resolve) {
              canvas.toBlob(resolve);
            });
          return toBlob2(canvas);
        }
        function resolveUrl(url, baseUrl) {
          var doc = document.implementation.createHTMLDocument();
          var base = doc.createElement("base");
          doc.head.appendChild(base);
          var a = doc.createElement("a");
          doc.body.appendChild(a);
          base.href = baseUrl;
          a.href = url;
          return a.href;
        }
        function uid() {
          var index = 0;
          return function() {
            return "u" + fourRandomChars() + index++;
            function fourRandomChars() {
              return ("0000" + (Math.random() * Math.pow(36, 4) << 0).toString(36)).slice(-4);
            }
          };
        }
        function makeImage(uri) {
          return new Promise(function(resolve, reject) {
            var image = new Image();
            image.onload = function() {
              resolve(image);
            };
            image.onerror = reject;
            image.src = uri;
          });
        }
        function getAndEncode(url) {
          var TIMEOUT = 3e4;
          if (domtoimage2.impl.options.cacheBust) {
            url += (/\?/.test(url) ? "&" : "?") + new Date().getTime();
          }
          return new Promise(function(resolve) {
            var request = new XMLHttpRequest();
            request.onreadystatechange = done;
            request.ontimeout = timeout;
            request.responseType = "blob";
            request.timeout = TIMEOUT;
            request.open("GET", url, true);
            request.send();
            var placeholder;
            if (domtoimage2.impl.options.imagePlaceholder) {
              var split = domtoimage2.impl.options.imagePlaceholder.split(/,/);
              if (split && split[1]) {
                placeholder = split[1];
              }
            }
            function done() {
              if (request.readyState !== 4)
                return;
              if (request.status !== 200) {
                if (placeholder) {
                  resolve(placeholder);
                } else {
                  fail("cannot fetch resource: " + url + ", status: " + request.status);
                }
                return;
              }
              var encoder = new FileReader();
              encoder.onloadend = function() {
                var content = encoder.result.split(/,/)[1];
                resolve(content);
              };
              encoder.readAsDataURL(request.response);
            }
            function timeout() {
              if (placeholder) {
                resolve(placeholder);
              } else {
                fail("timeout of " + TIMEOUT + "ms occured while fetching resource: " + url);
              }
            }
            function fail(message) {
              console.error(message);
              resolve("");
            }
          });
        }
        function dataAsUrl(content, type) {
          return "data:" + type + ";base64," + content;
        }
        function escape(string) {
          return string.replace(/([.*+?^${}()|\[\]\/\\])/g, "\\$1");
        }
        function delay(ms) {
          return function(arg) {
            return new Promise(function(resolve) {
              setTimeout(function() {
                resolve(arg);
              }, ms);
            });
          };
        }
        function asArray(arrayLike) {
          var array = [];
          var length = arrayLike.length;
          for (var i = 0; i < length; i++)
            array.push(arrayLike[i]);
          return array;
        }
        function escapeXhtml(string) {
          return string.replace(/#/g, "%23").replace(/\n/g, "%0A");
        }
        function width(node) {
          var leftBorder = px(node, "border-left-width");
          var rightBorder = px(node, "border-right-width");
          return node.scrollWidth + leftBorder + rightBorder;
        }
        function height(node) {
          var topBorder = px(node, "border-top-width");
          var bottomBorder = px(node, "border-bottom-width");
          return node.scrollHeight + topBorder + bottomBorder;
        }
        function px(node, styleProperty) {
          var value = window.getComputedStyle(node).getPropertyValue(styleProperty);
          return parseFloat(value.replace("px", ""));
        }
      }
      function newInliner() {
        var URL_REGEX = /url\(['"]?([^'"]+?)['"]?\)/g;
        return {
          inlineAll,
          shouldProcess,
          impl: {
            readUrls,
            inline
          }
        };
        function shouldProcess(string) {
          return string.search(URL_REGEX) !== -1;
        }
        function readUrls(string) {
          var result = [];
          var match;
          while ((match = URL_REGEX.exec(string)) !== null) {
            result.push(match[1]);
          }
          return result.filter(function(url) {
            return !util.isDataUrl(url);
          });
        }
        function inline(string, url, baseUrl, get) {
          return Promise.resolve(url).then(function(url2) {
            return baseUrl ? util.resolveUrl(url2, baseUrl) : url2;
          }).then(get || util.getAndEncode).then(function(data) {
            return util.dataAsUrl(data, util.mimeType(url));
          }).then(function(dataUrl) {
            return string.replace(urlAsRegex(url), "$1" + dataUrl + "$3");
          });
          function urlAsRegex(url2) {
            return new RegExp(`(url\\(['"]?)(` + util.escape(url2) + `)(['"]?\\))`, "g");
          }
        }
        function inlineAll(string, baseUrl, get) {
          if (nothingToInline())
            return Promise.resolve(string);
          return Promise.resolve(string).then(readUrls).then(function(urls) {
            var done = Promise.resolve(string);
            urls.forEach(function(url) {
              done = done.then(function(string2) {
                return inline(string2, url, baseUrl, get);
              });
            });
            return done;
          });
          function nothingToInline() {
            return !shouldProcess(string);
          }
        }
      }
      function newFontFaces() {
        return {
          resolveAll,
          impl: {
            readAll
          }
        };
        function resolveAll() {
          return readAll(document).then(function(webFonts) {
            return Promise.all(
              webFonts.map(function(webFont) {
                return webFont.resolve();
              })
            );
          }).then(function(cssStrings) {
            return cssStrings.join("\n");
          });
        }
        function readAll() {
          return Promise.resolve(util.asArray(document.styleSheets)).then(getCssRules).then(selectWebFontRules).then(function(rules) {
            return rules.map(newWebFont);
          });
          function selectWebFontRules(cssRules) {
            return cssRules.filter(function(rule) {
              return rule.type === CSSRule.FONT_FACE_RULE;
            }).filter(function(rule) {
              return inliner.shouldProcess(rule.style.getPropertyValue("src"));
            });
          }
          function getCssRules(styleSheets) {
            var cssRules = [];
            styleSheets.forEach(function(sheet) {
              try {
                util.asArray(sheet.cssRules || []).forEach(cssRules.push.bind(cssRules));
              } catch (e) {
                console.log("Error while reading CSS rules from " + sheet.href, e.toString());
              }
            });
            return cssRules;
          }
          function newWebFont(webFontRule) {
            return {
              resolve: function resolve() {
                var baseUrl = (webFontRule.parentStyleSheet || {}).href;
                return inliner.inlineAll(webFontRule.cssText, baseUrl);
              },
              src: function() {
                return webFontRule.style.getPropertyValue("src");
              }
            };
          }
        }
      }
      function newImages() {
        return {
          inlineAll,
          impl: {
            newImage
          }
        };
        function newImage(element2) {
          return {
            inline
          };
          function inline(get) {
            if (util.isDataUrl(element2.src))
              return Promise.resolve();
            return Promise.resolve(element2.src).then(get || util.getAndEncode).then(function(data) {
              return util.dataAsUrl(data, util.mimeType(element2.src));
            }).then(function(dataUrl) {
              return new Promise(function(resolve, reject) {
                element2.onload = resolve;
                element2.onerror = reject;
                element2.src = dataUrl;
              });
            });
          }
        }
        function inlineAll(node) {
          if (!(node instanceof Element))
            return Promise.resolve(node);
          return inlineBackground(node).then(function() {
            if (node instanceof HTMLImageElement)
              return newImage(node).inline();
            else
              return Promise.all(
                util.asArray(node.childNodes).map(function(child) {
                  return inlineAll(child);
                })
              );
          });
          function inlineBackground(node2) {
            var background = node2.style.getPropertyValue("background");
            if (!background)
              return Promise.resolve(node2);
            return inliner.inlineAll(background).then(function(inlined) {
              node2.style.setProperty(
                "background",
                inlined,
                node2.style.getPropertyPriority("background")
              );
            }).then(function() {
              return node2;
            });
          }
        }
      }
    })(exports);
  }
});

// node_modules/fast-copy/dist/fast-copy.js
var require_fast_copy = __commonJS({
  "node_modules/fast-copy/dist/fast-copy.js"(exports, module2) {
    (function(global2, factory) {
      typeof exports === "object" && typeof module2 !== "undefined" ? module2.exports = factory() : typeof define === "function" && define.amd ? define(factory) : (global2 = typeof globalThis !== "undefined" ? globalThis : global2 || self, global2["fast-copy"] = factory());
    })(exports, function() {
      "use strict";
      var toStringFunction = Function.prototype.toString;
      var create = Object.create, defineProperty = Object.defineProperty, getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor, getOwnPropertyNames = Object.getOwnPropertyNames, getOwnPropertySymbols = Object.getOwnPropertySymbols, getPrototypeOf$1 = Object.getPrototypeOf;
      var _a = Object.prototype, hasOwnProperty = _a.hasOwnProperty, propertyIsEnumerable = _a.propertyIsEnumerable;
      var SYMBOL_PROPERTIES = typeof getOwnPropertySymbols === "function";
      var WEAK_MAP = typeof WeakMap === "function";
      var createCache = function() {
        if (WEAK_MAP) {
          return function() {
            return /* @__PURE__ */ new WeakMap();
          };
        }
        var Cache = function() {
          function Cache2() {
            this._keys = [];
            this._values = [];
          }
          Cache2.prototype.has = function(key) {
            return !!~this._keys.indexOf(key);
          };
          Cache2.prototype.get = function(key) {
            return this._values[this._keys.indexOf(key)];
          };
          Cache2.prototype.set = function(key, value) {
            this._keys.push(key);
            this._values.push(value);
          };
          return Cache2;
        }();
        return function() {
          return new Cache();
        };
      }();
      var getCleanClone = function(object, realm) {
        var prototype = object.__proto__ || getPrototypeOf$1(object);
        if (!prototype) {
          return create(null);
        }
        var Constructor = prototype.constructor;
        if (Constructor === realm.Object) {
          return prototype === realm.Object.prototype ? {} : create(prototype);
        }
        if (~toStringFunction.call(Constructor).indexOf("[native code]")) {
          try {
            return new Constructor();
          } catch (_a2) {
          }
        }
        return create(prototype);
      };
      var getObjectCloneLoose = function(object, realm, handleCopy, cache) {
        var clone = getCleanClone(object, realm);
        cache.set(object, clone);
        for (var key in object) {
          if (hasOwnProperty.call(object, key)) {
            clone[key] = handleCopy(object[key], cache);
          }
        }
        if (SYMBOL_PROPERTIES) {
          var symbols = getOwnPropertySymbols(object);
          for (var index = 0, length_1 = symbols.length, symbol = void 0; index < length_1; ++index) {
            symbol = symbols[index];
            if (propertyIsEnumerable.call(object, symbol)) {
              clone[symbol] = handleCopy(object[symbol], cache);
            }
          }
        }
        return clone;
      };
      var getObjectCloneStrict = function(object, realm, handleCopy, cache) {
        var clone = getCleanClone(object, realm);
        cache.set(object, clone);
        var properties = SYMBOL_PROPERTIES ? getOwnPropertyNames(object).concat(getOwnPropertySymbols(object)) : getOwnPropertyNames(object);
        for (var index = 0, length_2 = properties.length, property = void 0, descriptor = void 0; index < length_2; ++index) {
          property = properties[index];
          if (property !== "callee" && property !== "caller") {
            descriptor = getOwnPropertyDescriptor(object, property);
            if (descriptor) {
              if (!descriptor.get && !descriptor.set) {
                descriptor.value = handleCopy(object[property], cache);
              }
              try {
                defineProperty(clone, property, descriptor);
              } catch (error) {
                clone[property] = descriptor.value;
              }
            } else {
              clone[property] = handleCopy(object[property], cache);
            }
          }
        }
        return clone;
      };
      var getRegExpFlags = function(regExp) {
        var flags = "";
        if (regExp.global) {
          flags += "g";
        }
        if (regExp.ignoreCase) {
          flags += "i";
        }
        if (regExp.multiline) {
          flags += "m";
        }
        if (regExp.unicode) {
          flags += "u";
        }
        if (regExp.sticky) {
          flags += "y";
        }
        return flags;
      };
      var isArray = Array.isArray;
      var getPrototypeOf = Object.getPrototypeOf;
      var GLOBAL_THIS = function() {
        if (typeof globalThis !== "undefined") {
          return globalThis;
        }
        if (typeof self !== "undefined") {
          return self;
        }
        if (typeof window !== "undefined") {
          return window;
        }
        if (typeof global !== "undefined") {
          return global;
        }
        if (console && console.error) {
          console.error('Unable to locate global object, returning "this".');
        }
        return this;
      }();
      function copy2(value, options) {
        var isStrict = !!(options && options.isStrict);
        var realm = options && options.realm || GLOBAL_THIS;
        var getObjectClone = isStrict ? getObjectCloneStrict : getObjectCloneLoose;
        var handleCopy = function(value2, cache) {
          if (!value2 || typeof value2 !== "object") {
            return value2;
          }
          if (cache.has(value2)) {
            return cache.get(value2);
          }
          var prototype = value2.__proto__ || getPrototypeOf(value2);
          var Constructor = prototype && prototype.constructor;
          if (!Constructor || Constructor === realm.Object) {
            return getObjectClone(value2, realm, handleCopy, cache);
          }
          var clone;
          if (isArray(value2)) {
            if (isStrict) {
              return getObjectCloneStrict(value2, realm, handleCopy, cache);
            }
            clone = new Constructor();
            cache.set(value2, clone);
            for (var index = 0, length_1 = value2.length; index < length_1; ++index) {
              clone[index] = handleCopy(value2[index], cache);
            }
            return clone;
          }
          if (value2 instanceof realm.Date) {
            return new Constructor(value2.getTime());
          }
          if (value2 instanceof realm.RegExp) {
            clone = new Constructor(value2.source, value2.flags || getRegExpFlags(value2));
            clone.lastIndex = value2.lastIndex;
            return clone;
          }
          if (realm.Map && value2 instanceof realm.Map) {
            clone = new Constructor();
            cache.set(value2, clone);
            value2.forEach(function(value3, key) {
              clone.set(key, handleCopy(value3, cache));
            });
            return clone;
          }
          if (realm.Set && value2 instanceof realm.Set) {
            clone = new Constructor();
            cache.set(value2, clone);
            value2.forEach(function(value3) {
              clone.add(handleCopy(value3, cache));
            });
            return clone;
          }
          if (realm.Blob && value2 instanceof realm.Blob) {
            return value2.slice(0, value2.size, value2.type);
          }
          if (realm.Buffer && realm.Buffer.isBuffer(value2)) {
            clone = realm.Buffer.allocUnsafe ? realm.Buffer.allocUnsafe(value2.length) : new Constructor(value2.length);
            cache.set(value2, clone);
            value2.copy(clone);
            return clone;
          }
          if (realm.ArrayBuffer) {
            if (realm.ArrayBuffer.isView(value2)) {
              clone = new Constructor(value2.buffer.slice(0));
              cache.set(value2, clone);
              return clone;
            }
            if (value2 instanceof realm.ArrayBuffer) {
              clone = value2.slice(0);
              cache.set(value2, clone);
              return clone;
            }
          }
          if (typeof value2.then === "function" || value2 instanceof Error || realm.WeakMap && value2 instanceof realm.WeakMap || realm.WeakSet && value2 instanceof realm.WeakSet) {
            return value2;
          }
          return getObjectClone(value2, realm, handleCopy, cache);
        };
        return handleCopy(value, createCache());
      }
      copy2.default = copy2;
      copy2.strict = function strictCopy(value, options) {
        return copy2(value, {
          isStrict: true,
          realm: options ? options.realm : void 0
        });
      };
      return copy2;
    });
  }
});

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => StatBlockPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian25 = require("obsidian");
var import_dom_to_image = __toESM(require_dom_to_image());

// src/data/srd-bestiary.ts
var BESTIARY = [
  {
    name: "Aboleth",
    size: "Large",
    type: "aberration",
    subtype: "",
    alignment: "lawful evil",
    ac: 17,
    hp: 135,
    hit_dice: "18d10 + 36",
    speed: "10 ft., swim 40 ft.",
    stats: [21, 9, 15, 18, 15, 18],
    saves: [{ constitution: 6 }, { intelligence: 8 }, { wisdom: 6 }],
    skillsaves: [{ history: 12 }, { perception: 10 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 120 ft., passive Perception 20",
    languages: "Deep Speech, telepathy 120 ft.",
    cr: "10",
    traits: [
      {
        name: "Amphibious",
        desc: "The aboleth can breathe air and water.",
        attack_bonus: 0
      },
      {
        name: "Mucous Cloud",
        desc: "While underwater, the aboleth is surrounded by transformative mucus. A creature that touches the aboleth or that hits it with a melee attack while within 5 ft. of it must make a DC 14 Constitution saving throw. On a failure, the creature is diseased for 1d4 hours. The diseased creature can breathe only underwater.",
        attack_bonus: 0
      },
      {
        name: "Probing Telepathy",
        desc: "If a creature communicates telepathically with the aboleth, the aboleth learns the creature's greatest desires if the aboleth can see the creature.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The aboleth makes three tentacle attacks.",
        attack_bonus: 0
      },
      {
        name: "Tentacle",
        desc: "Melee Weapon Attack: +9 to hit, reach 10 ft., one target. Hit: 12 (2d6 + 5) bludgeoning damage. If the target is a creature, it must succeed on a DC 14 Constitution saving throw or become diseased. The disease has no effect for 1 minute and can be removed by any magic that cures disease. After 1 minute, the diseased creature's skin becomes translucent and slimy, the creature can't regain hit points unless it is underwater, and the disease can be removed only by heal or another disease-curing spell of 6th level or higher. When the creature is outside a body of water, it takes 6 (1d12) acid damage every 10 minutes unless moisture is applied to the skin before 10 minutes have passed.",
        attack_bonus: 9,
        damage_dice: "2d6",
        damage_bonus: 5
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +9 to hit, reach 10 ft. one target. Hit: 15 (3d6 + 5) bludgeoning damage.",
        attack_bonus: 9,
        damage_dice: "3d6",
        damage_bonus: 5
      },
      {
        name: "Enslave (3/day)",
        desc: "The aboleth targets one creature it can see within 30 ft. of it. The target must succeed on a DC 14 Wisdom saving throw or be magically charmed by the aboleth until the aboleth dies or until it is on a different plane of existence from the target. The charmed target is under the aboleth's control and can't take reactions, and the aboleth and the target can communicate telepathically with each other over any distance.\\nWhenever the charmed target takes damage, the target can repeat the saving throw. On a success, the effect ends. No more than once every 24 hours, the target can also repeat the saving throw when it is at least 1 mile away from the aboleth.",
        attack_bonus: 0
      }
    ],
    legendary_actions: [
      {
        name: "Detect",
        desc: "The aboleth makes a Wisdom (Perception) check.",
        attack_bonus: 0
      },
      {
        name: "Tail Swipe",
        desc: "The aboleth makes one tail attack.",
        attack_bonus: 0
      },
      {
        name: "Psychic Drain (Costs 2 Actions)",
        desc: "One creature charmed by the aboleth takes 10 (3d6) psychic damage, and the aboleth regains hit points equal to the damage the creature takes.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Acolyte",
    size: "Medium",
    type: "humanoid",
    subtype: "any race",
    alignment: "any alignment",
    ac: 10,
    hp: 9,
    hit_dice: "2d8",
    speed: "30 ft.",
    stats: [10, 10, 10, 10, 14, 11],
    skillsaves: [{ medicine: 4 }, { religion: 2 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 12",
    languages: "any one language (usually Common)",
    cr: "1/4",
    traits: [],
    actions: [
      {
        name: "Club",
        desc: "Melee Weapon Attack: +2 to hit, reach 5 ft., one target. Hit: 2 (1d4) bludgeoning damage.",
        attack_bonus: 2,
        damage_dice: "1d4"
      }
    ],
    spells: [
      "The acolyte is a 1st-level spellcaster. Its spellcasting ability is Wisdom (spell save DC 12, +4 to hit with spell attacks). The acolyte has following cleric spells prepared:",
      { "Cantrips (at will)": "light, sacred flame, thaumaturgy" },
      { "1st level (3 slots)": "bless, cure wounds, sanctuary" }
    ]
  },
  {
    name: "Adult Black Dragon",
    size: "Huge",
    type: "dragon",
    subtype: "",
    alignment: "chaotic evil",
    ac: 19,
    hp: 195,
    hit_dice: "17d12 + 84",
    speed: "40 ft., fly 80 ft., swim 40 ft.",
    stats: [23, 14, 21, 14, 13, 17],
    saves: [
      { dexterity: 7 },
      { constitution: 10 },
      { wisdom: 6 },
      { charisma: 8 }
    ],
    skillsaves: [null, { perception: 11 }, { stealth: 7 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "acid",
    condition_immunities: "",
    senses: "blindsight 60 ft., darkvision 120 ft., passive Perception 21",
    languages: "Common, Draconic",
    cr: "14",
    traits: [
      {
        name: "Amphibious",
        desc: "The dragon can breathe air and water.",
        attack_bonus: 0
      },
      {
        name: "Legendary Resistance (3/Day)",
        desc: "If the dragon fails a saving throw, it can choose to succeed instead.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon can use its Frightful Presence. It then makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +11 to hit, reach 10 ft., one target. Hit: 17 (2d10 + 6) piercing damage plus 4 (1d8) acid damage.",
        attack_bonus: 11,
        damage_dice: "2d10 + 1d8",
        damage_bonus: 6
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +11 to hit, reach 5 ft., one target. Hit: 13 (2d6 + 6) slashing damage.",
        attack_bonus: 11,
        damage_dice: "2d6",
        damage_bonus: 6
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +11 to hit, reach 15 ft., one target. Hit: 15 (2d8 + 6) bludgeoning damage.",
        attack_bonus: 11,
        damage_dice: "2d8",
        damage_bonus: 6
      },
      {
        name: "Frightful Presence",
        desc: "Each creature of the dragon's choice that is within 120 feet of the dragon and aware of it must succeed on a DC 16 Wisdom saving throw or become frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the dragon's Frightful Presence for the next 24 hours.",
        attack_bonus: 0
      },
      {
        name: "Acid Breath (Recharge 5-6)",
        desc: "The dragon exhales acid in a 60-foot line that is 5 feet wide. Each creature in that line must make a DC 18 Dexterity saving throw, taking 54 (12d8) acid damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "12d8"
      }
    ],
    legendary_actions: [
      {
        name: "Detect",
        desc: "The dragon makes a Wisdom (Perception) check.",
        attack_bonus: 0
      },
      {
        name: "Tail Attack",
        desc: "The dragon makes a tail attack.",
        attack_bonus: 0
      },
      {
        name: "Wing Attack (Costs 2 Actions)",
        desc: "The dragon beats its wings. Each creature within 10 ft. of the dragon must succeed on a DC 19 Dexterity saving throw or take 13 (2d6 + 6) bludgeoning damage and be knocked prone. The dragon can then fly up to half its flying speed.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Adult Blue Dracolich",
    size: "Huge",
    type: "undead",
    subtype: "",
    alignment: "lawful evil",
    ac: 19,
    hp: 225,
    hit_dice: "18d12 + 108",
    speed: "40 ft., burrow 30 ft., fly 80 ft.",
    stats: [25, 10, 23, 16, 15, 19],
    skillsaves: [{ perception: 12 }],
    damage_vulnerabilities: "",
    damage_resistances: "necrotic",
    damage_immunities: "lightning, poison",
    condition_immunities: "charmed, exhaustion, frightened, paralyzed, poisoned",
    senses: "blindsight 60 ft., darkvision 120 ft., passive Perception 22",
    languages: "Common, Draconic",
    cr: "17",
    traits: [
      {
        name: "Legendary Resistance (3/Day)",
        desc: "If the dracolich fails a saving throw, it can choose to succeed instead.",
        attack_bonus: 0
      },
      {
        name: "Magic Resistance",
        desc: "The dracolich has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The dracolich can use its Frightful Presence. It then makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +12 to hit, reach 10 ft., one target. Hit: 18 (2d10 + 7) piercing damage plus 5 (1d10) lightning damage.",
        attack_bonus: 12,
        damage_dice: "2d10 + 1d10",
        damage_bonus: 7
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +12 to hit, reach 5 ft., one target. Hit: 14 (2d6 + 7) slashing damage.",
        attack_bonus: 12,
        damage_dice: "2d6",
        damage_bonus: 7
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +12 to hit, reach 15 ft., one target. Hit: 16 (2d8 + 7) bludgeoning damage.",
        attack_bonus: 12,
        damage_dice: "2d8",
        damage_bonus: 7
      },
      {
        name: "Frightful Presence",
        desc: "Each creature of the dracolich's choice that is within 120 feet of the dracolich and aware of it must succeed on a DC 18 Wisdom saving throw or become frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the dracolich's Frightful Presence for the next 24 hours.",
        attack_bonus: 0
      },
      {
        name: "Lightning Breath (Recharge 5-6)",
        desc: "The dracolich exhales lightning in a 90-foot line that is 5 feet wide. Each creature in that line must make a DC 20 Dexterity saving throw, taking 66 (12d10) lightning damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "12d10"
      }
    ],
    legendary_actions: [
      {
        name: "Detect",
        desc: "The dracolich makes a Wisdom (Perception) check.",
        attack_bonus: 0
      },
      {
        name: "Tail Attack",
        desc: "The dracolich makes a tail attack.",
        attack_bonus: 0
      },
      {
        name: "Wing Attack (Costs 2 Actions)",
        desc: "The dracolich beats its tattered wings. Each creature within 10 ft. of the dracolich must succeed on a DC 21 Dexterity saving throw or take 14 (2d6 + 7) bludgeoning damage and be knocked prone. After beating its wings this way, the dracolich can fly up to half its flying speed.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Adult Blue Dragon",
    size: "Huge",
    type: "dragon",
    subtype: "",
    alignment: "lawful evil",
    ac: 19,
    hp: 225,
    hit_dice: "18d12 + 108",
    speed: "40 ft., burrow 30 ft., fly 80 ft.",
    stats: [25, 10, 23, 16, 15, 19],
    saves: [
      { dexterity: 5 },
      { constitution: 11 },
      { wisdom: 7 },
      { charisma: 9 }
    ],
    skillsaves: [null, { perception: 12 }, { stealth: 5 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "lightning",
    condition_immunities: "",
    senses: "blindsight 60 ft., darkvision 120 ft., passive Perception 22",
    languages: "Common, Draconic",
    cr: "16",
    traits: [
      {
        name: "Legendary Resistance (3/Day)",
        desc: "If the dragon fails a saving throw, it can choose to succeed instead.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon can use its Frightful Presence. It then makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +12 to hit, reach 10 ft., one target. Hit: 18 (2d10 + 7) piercing damage plus 5 (1d10) lightning damage.",
        attack_bonus: 12,
        damage_dice: "2d10 + 1d10",
        damage_bonus: 7
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +12 to hit, reach 5 ft., one target. Hit: 14 (2d6 + 7) slashing damage.",
        attack_bonus: 12,
        damage_dice: "2d6",
        damage_bonus: 7
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +12 to hit, reach 15 ft., one target. Hit: 16 (2d8 + 7) bludgeoning damage.",
        attack_bonus: 12,
        damage_dice: "2d8",
        damage_bonus: 7
      },
      {
        name: "Frightful Presence",
        desc: "Each creature of the dragon's choice that is within 120 ft. of the dragon and aware of it must succeed on a DC 17 Wisdom saving throw or become frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the dragon's Frightful Presence for the next 24 hours.",
        attack_bonus: 0
      },
      {
        name: "Lightning Breath (Recharge 5-6)",
        desc: "The dragon exhales lightning in a 90-foot line that is 5 ft. wide. Each creature in that line must make a DC 19 Dexterity saving throw, taking 66 (12d10) lightning damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "12d10"
      }
    ],
    legendary_actions: [
      {
        name: "Detect",
        desc: "The dragon makes a Wisdom (Perception) check.",
        attack_bonus: 0
      },
      {
        name: "Tail Attack",
        desc: "The dragon makes a tail attack.",
        attack_bonus: 0
      },
      {
        name: "Wing Attack (Costs 2 Actions)",
        desc: "The dragon beats its wings. Each creature within 10 ft. of the dragon must succeed on a DC 20 Dexterity saving throw or take 14 (2d6 + 7) bludgeoning damage and be knocked prone. The dragon can then fly up to half its flying speed.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Adult Brass Dragon",
    size: "Huge",
    type: "dragon",
    subtype: "",
    alignment: "chaotic good",
    ac: 18,
    hp: 172,
    hit_dice: "15d12 + 74",
    speed: "40 ft., burrow 40 ft., fly 80 ft.",
    stats: [23, 10, 21, 14, 13, 17],
    saves: [
      { dexterity: 5 },
      { constitution: 10 },
      { wisdom: 6 },
      { charisma: 8 }
    ],
    skillsaves: [
      null,
      { history: 7 },
      { persuasion: 8 },
      { perception: 11 },
      { stealth: 5 }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "fire",
    condition_immunities: "",
    senses: "blindsight 60 ft., darkvision 120 ft., passive Perception 21",
    languages: "Common, Draconic",
    cr: "13",
    traits: [
      {
        name: "Legendary Resistance (3/Day)",
        desc: "If the dragon fails a saving throw, it can choose to succeed instead.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon can use its Frightful Presence. It then makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +11 to hit, reach,.0 ft., one target. Hit: 17 (2d10 + 6) piercing damage.",
        attack_bonus: 11,
        damage_dice: "2d10",
        damage_bonus: 6
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +11 to hit, reach 5 ft., one target. Hit: 13 (2d6 + 6) slashing damage.",
        attack_bonus: 11,
        damage_dice: "2d6",
        damage_bonus: 6
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +11 to hit, reach 15 ft., one target. Hit: 15 (2d8 + 6) bludgeoning damage.",
        attack_bonus: 11,
        damage_dice: "2d8",
        damage_bonus: 6
      },
      {
        name: "Frightful Presence",
        desc: "Each creature of the dragon's choice that is within 120 feet of the dragon and aware of it must succeed on a DC 16 Wisdom saving throw or become frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the dragon's Frightful Presence for the next 24 hours.",
        attack_bonus: 0
      },
      {
        name: "Breath Weapons (Recharge 5-6)",
        desc: "The dragon uses one of the following breath weapons.\\nFire Breath. The dragon exhales fire in an 60-foot line that is 5 feet wide. Each creature in that line must make a DC 18 Dexterity saving throw, taking 45 (13d6) fire damage on a failed save, or half as much damage on a successful one.\\nSleep Breath. The dragon exhales sleep gas in a 60-foot cone. Each creature in that area must succeed on a DC 18 Constitution saving throw or fall unconscious for 10 minutes. This effect ends for a creature if the creature takes damage or someone uses an action to wake it.",
        attack_bonus: 0,
        damage_dice: "13d6"
      }
    ]
  },
  {
    name: "Adult Bronze Dragon",
    size: "Huge",
    type: "dragon",
    subtype: "",
    alignment: "lawful good",
    ac: 19,
    hp: 212,
    hit_dice: "17d12 + 101",
    speed: "40 ft., fly 80 ft., swim 40 ft.",
    stats: [25, 10, 23, 16, 15, 19],
    saves: [
      { dexterity: 5 },
      { constitution: 11 },
      { wisdom: 7 },
      { charisma: 9 }
    ],
    skillsaves: [{ insight: 7 }, { perception: 12 }, { stealth: 5 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "lightning",
    condition_immunities: "",
    senses: "blindsight 60 ft., darkvision 120 ft., passive Perception 22",
    languages: "Common, Draconic",
    cr: "15",
    traits: [
      {
        name: "Amphibious",
        desc: "The dragon can breathe air and water.",
        attack_bonus: 0
      },
      {
        name: "Legendary Resistance (3/Day)",
        desc: "If the dragon fails a saving throw, it can choose to succeed instead.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon can use its Frightful Presence. It then makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +12 to hit, reach 10 ft., one target. Hit: 18 (2d10 + 7) piercing damage.",
        attack_bonus: 12,
        damage_dice: "2d10",
        damage_bonus: 7
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +12 to hit, reach 5 ft., one target. Hit: 14 (2d6 + 7) slashing damage.",
        attack_bonus: 12,
        damage_dice: "2d6",
        damage_bonus: 7
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +12 to hit, reach 15 ft., one target. Hit: 16 (2d8 + 7) bludgeoning damage.",
        attack_bonus: 12,
        damage_dice: "2d8",
        damage_bonus: 7
      },
      {
        name: "Frightful Presence",
        desc: "Each creature of the dragon's choice that is within 120 feet of the dragon and aware of it must succeed on a DC 17 Wisdom saving throw or become frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the dragon's Frightful Presence for the next 24 hours.",
        attack_bonus: 0
      },
      {
        name: "Breath Weapons (Recharge 5-6)",
        desc: "The dragon uses one of the following breath weapons.\\nLightning Breath. The dragon exhales lightning in a 90-foot line that is 5 feet wide. Each creature in that line must make a DC 19 Dexterity saving throw, taking 66 (12d10) lightning damage on a failed save, or half as much damage on a successful one.\\nRepulsion Breath. The dragon exhales repulsion energy in a 30-foot cone. Each creature in that area must succeed on a DC 19 Strength saving throw. On a failed save, the creature is pushed 60 feet away from the dragon.",
        attack_bonus: 0,
        damage_dice: "12d10"
      }
    ],
    legendary_actions: [
      {
        name: "Detect",
        desc: "The dragon makes a Wisdom (Perception) check.",
        attack_bonus: 0
      },
      {
        name: "Tail Attack",
        desc: "The dragon makes a tail attack.",
        attack_bonus: 0
      },
      {
        name: "Wing Attack (Costs 2 Actions)",
        desc: "The dragon beats its wings. Each creature within 10 ft. of the dragon must succeed on a DC 20 Dexterity saving throw or take 14 (2d6 + 7) bludgeoning damage and be knocked prone. The dragon can then fly up to half its flying speed.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Adult Copper Dragon",
    size: "Huge",
    type: "dragon",
    subtype: "",
    alignment: "chaotic good",
    ac: 18,
    hp: 184,
    hit_dice: "16d12 + 80",
    speed: "40 ft., climb 40 ft., fly 80 ft.",
    stats: [23, 12, 21, 18, 15, 17],
    saves: [
      { dexterity: 6 },
      { constitution: 10 },
      { wisdom: 7 },
      { charisma: 8 }
    ],
    skillsaves: [{ deception: 8 }, { perception: 12 }, { stealth: 6 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "acid",
    condition_immunities: "",
    senses: "blindsight 60 ft., darkvision 120 ft., passive Perception 22",
    languages: "Common, Draconic",
    cr: "14",
    traits: [
      {
        name: "Legendary Resistance (3/Day)",
        desc: "If the dragon fails a saving throw, it can choose to succeed instead.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon can use its Frightful Presence. It then makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +11 to hit, reach 10 ft., one target. Hit: 17 (2d10 + 6) piercing damage.",
        attack_bonus: 11,
        damage_dice: "2d10",
        damage_bonus: 6
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +11 to hit, reach 5 ft., one target. Hit: 13 (2d6 + 6) slashing damage.",
        attack_bonus: 11,
        damage_dice: "2d6",
        damage_bonus: 6
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +11 to hit, reach 15 ft., one target. Hit: 15 (2d8 + 6) bludgeoning damage.",
        attack_bonus: 11,
        damage_dice: "2d8",
        damage_bonus: 6
      },
      {
        name: "Frightful Presence",
        desc: "Each creature of the dragon's choice that is within 120 feet of the dragon and aware of it must succeed on a DC 16 Wisdom saving throw or become frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the dragon's Frightful Presence for the next 24 hours.",
        attack_bonus: 0
      },
      {
        name: "Breath Weapons (Recharge 5-6)",
        desc: "The dragon uses one of the following breath weapons.\\nAcid Breath. The dragon exhales acid in an 60-foot line that is 5 feet wide. Each creature in that line must make a DC 18 Dexterity saving throw, taking 54 (12d8) acid damage on a failed save, or half as much damage on a successful one.\\nSlowing Breath. The dragon exhales gas in a 60-foot cone. Each creature in that area must succeed on a DC 18 Constitution saving throw. On a failed save, the creature can't use reactions, its speed is halved, and it can't make more than one attack on its turn. In addition, the creature can use either an action or a bonus action on its turn, but not both. These effects last for 1 minute. The creature can repeat the saving throw at the end of each of its turns, ending the effect on itself with a successful save.",
        attack_bonus: 0,
        damage_dice: "12d8"
      }
    ],
    legendary_actions: [
      {
        name: "Detect",
        desc: "The dragon makes a Wisdom (Perception) check.",
        attack_bonus: 0
      },
      {
        name: "Tail Attack",
        desc: "The dragon makes a tail attack.",
        attack_bonus: 0
      },
      {
        name: "Wing Attack (Costs 2 Actions)",
        desc: "The dragon beats its wings. Each creature within 10 ft. of the dragon must succeed on a DC 19 Dexterity saving throw or take 13 (2d6 + 6) bludgeoning damage and be knocked prone. The dragon can then fly up to half its flying speed.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Adult Gold Dragon",
    size: "Huge",
    type: "dragon",
    subtype: "",
    alignment: "lawful good",
    ac: 19,
    hp: 256,
    hit_dice: "19d12 + 132",
    speed: "40 ft., fly 80 ft., swim 40 ft.",
    stats: [27, 14, 25, 16, 15, 24],
    saves: [
      { dexterity: 8 },
      { constitution: 13 },
      { wisdom: 8 },
      { charisma: 13 }
    ],
    skillsaves: [
      { insight: 8 },
      { persuasion: 13 },
      { perception: 14 },
      { stealth: 8 }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "fire",
    condition_immunities: "",
    senses: "blindsight 60 ft., darkvision 120 ft., passive Perception 24",
    languages: "Common, Draconic",
    cr: "17",
    traits: [
      {
        name: "Amphibious",
        desc: "The dragon can breathe air and water.",
        attack_bonus: 0
      },
      {
        name: "Legendary Resistance (3/Day)",
        desc: "If the dragon fails a saving throw, it can choose to succeed instead.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon can use its Frightful Presence. It then makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +14 to hit, reach 10 ft., one target. Hit: 19 (2d10 + 8) piercing damage.",
        attack_bonus: 14,
        damage_dice: "2d10",
        damage_bonus: 8
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +14 to hit, reach 5 ft., one target. Hit: 15 (2d6 + 8) slashing damage.",
        attack_bonus: 14,
        damage_dice: "2d6",
        damage_bonus: 8
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +14 to hit, reach 15 ft., one target. Hit: 17 (2d8 + 8) bludgeoning damage.",
        attack_bonus: 14,
        damage_dice: "2d8",
        damage_bonus: 8
      },
      {
        name: "Frightful Presence",
        desc: "Each creature of the dragon's choice that is within 120 feet of the dragon and aware of it must succeed on a DC 21 Wisdom saving throw or become frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the dragon's Frightful Presence for the next 24 hours.",
        attack_bonus: 0
      },
      {
        name: "Breath Weapons (Recharge 5-6)",
        desc: "The dragon uses one of the following breath weapons.\\nFire Breath. The dragon exhales fire in a 60-foot cone. Each creature in that area must make a DC 21 Dexterity saving throw, taking 66 (12d10) fire damage on a failed save, or half as much damage on a successful one.\\nWeakening Breath. The dragon exhales gas in a 60-foot cone. Each creature in that area must succeed on a DC 21 Strength saving throw or have disadvantage on Strength-based attack rolls, Strength checks, and Strength saving throws for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success.",
        attack_bonus: 0,
        damage_dice: "12d10"
      }
    ],
    legendary_actions: [
      {
        name: "Detect",
        desc: "The dragon makes a Wisdom (Perception) check.",
        attack_bonus: 0
      },
      {
        name: "Tail Attack",
        desc: "The dragon makes a tail attack.",
        attack_bonus: 0
      },
      {
        name: "Wing Attack (Costs 2 Actions)",
        desc: "The dragon beats its wings. Each creature within 10 ft. of the dragon must succeed on a DC 22 Dexterity saving throw or take 15 (2d6 + 8) bludgeoning damage and be knocked prone. The dragon can then fly up to half its flying speed.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Adult Green Dragon",
    size: "Huge",
    type: "dragon",
    subtype: "",
    alignment: "lawful evil",
    ac: 19,
    hp: 207,
    hit_dice: "18d12 + 90",
    speed: "40 ft., fly 80 ft., swim 40 ft.",
    stats: [23, 12, 21, 18, 15, 17],
    saves: [
      { dexterity: 6 },
      { constitution: 10 },
      { wisdom: 7 },
      { charisma: 8 }
    ],
    skillsaves: [
      { deception: 8 },
      { insight: 7 },
      { persuasion: 8 },
      { perception: 12 },
      { stealth: 6 }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "poison",
    condition_immunities: "poisoned",
    senses: "blindsight 60 ft., darkvision 120 ft., passive Perception 22",
    languages: "Common, Draconic",
    cr: "15",
    traits: [
      {
        name: "Amphibious",
        desc: "The dragon can breathe air and water.",
        attack_bonus: 0
      },
      {
        name: "Legendary Resistance (3/Day)",
        desc: "If the dragon fails a saving throw, it can choose to succeed instead.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon can use its Frightful Presence. It then makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +11 to hit, reach 10 ft., one target. Hit: 17 (2d10 + 6) piercing damage plus 7 (2d6) poison damage.",
        attack_bonus: 11,
        damage_dice: "2d10 + 2d6",
        damage_bonus: 6
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +11 to hit, reach 5 ft., one target. Hit: 13 (2d6 + 6) slashing damage.",
        attack_bonus: 11,
        damage_dice: "2d6",
        damage_bonus: 6
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +11 to hit, reach 15 ft., one target. Hit: 15 (2d8 + 6) bludgeoning damage.",
        attack_bonus: 11,
        damage_dice: "2d8",
        damage_bonus: 6
      },
      {
        name: "Frightful Presence",
        desc: "Each creature of the dragon's choice that is within 120 feet of the dragon and aware of it must succeed on a DC 16 Wisdom saving throw or become frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the dragon's Frightful Presence for the next 24 hours .",
        attack_bonus: 0
      },
      {
        name: "Poison Breath (Recharge 5-6)",
        desc: "The dragon exhales poisonous gas in a 60-foot cone. Each creature in that area must make a DC 18 Constitution saving throw, taking 56 (16d6) poison damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "16d6"
      }
    ],
    legendary_actions: [
      {
        name: "Detect",
        desc: "The dragon makes a Wisdom (Perception) check.",
        attack_bonus: 0
      },
      {
        name: "Tail Attack",
        desc: "The dragon makes a tail attack.",
        attack_bonus: 0
      },
      {
        name: "Wing Attack (Costs 2 Actions)",
        desc: "The dragon beats its wings. Each creature within 10 ft. of the dragon must succeed on a DC 19 Dexterity saving throw or take 13 (2d6 + 6) bludgeoning damage and be knocked prone. The dragon can then fly up to half its flying speed.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Adult Red Dragon",
    size: "Huge",
    type: "dragon",
    subtype: "",
    alignment: "chaotic evil",
    ac: 19,
    hp: 256,
    hit_dice: "19d12 + 132",
    speed: "40 ft., climb 40 ft., fly 80 ft.",
    stats: [27, 10, 25, 16, 13, 21],
    saves: [
      { dexterity: 6 },
      { constitution: 13 },
      { wisdom: 7 },
      { charisma: 11 }
    ],
    skillsaves: [{ perception: 13 }, { stealth: 6 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "fire",
    condition_immunities: "",
    senses: "blindsight 60 ft., darkvision 120 ft., passive Perception 23",
    languages: "Common, Draconic",
    cr: "17",
    traits: [
      {
        name: "Legendary Resistance (3/Day)",
        desc: "If the dragon fails a saving throw, it can choose to succeed instead.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon can use its Frightful Presence. It then makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +14 to hit, reach 10 ft., one target. Hit: 19 (2d10 + 8) piercing damage plus 7 (2d6) fire damage.",
        attack_bonus: 14,
        damage_dice: "2d10 + 2d6",
        damage_bonus: 8
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +14 to hit, reach 5 ft., one target. Hit: 15 (2d6 + 8) slashing damage.",
        attack_bonus: 14,
        damage_dice: "2d6",
        damage_bonus: 8
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +14 to hit, reach 15 ft., one target. Hit: 17 (2d8 + 8) bludgeoning damage.",
        attack_bonus: 14,
        damage_dice: "2d8",
        damage_bonus: 8
      },
      {
        name: "Frightful Presence",
        desc: "Each creature of the dragon's choice that is within 120 ft. of the dragon and aware of it must succeed on a DC 19 Wisdom saving throw or become frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the dragon's Frightful Presence for the next 24 hours.",
        attack_bonus: 0
      },
      {
        name: "Fire Breath (Recharge 5-6)",
        desc: "The dragon exhales fire in a 60-foot cone. Each creature in that area must make a DC 21 Dexterity saving throw, taking 63 (18d6) fire damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "18d6"
      },
      {
        name: "Lair Actions",
        desc: "On initiative count 20 (losing initiative ties), the dragon takes a lair action to cause one of the following effects: the dragon can't use the same effect two rounds in a row:\\n\u2022 Magma erupts from a point on the ground the dragon can see within 120 feet of it, creating a 20-foot-high, 5-foot-radius geyser. Each creature in the geyser's area must make a DC 15 Dexterity saving throw, taking 21 (6d6) fire damage on a failed save, or half as much damage on a successful one.\\n\u2022 A tremor shakes the lair in a 60-foot-radius around the dragon. Each creature other than the dragon on the ground in that area must succeed on a DC 15 Dexterity saving throw or be knocked prone.\\n\u2022 Volcanic gases form a cloud in a 20-foot-radius sphere centered on a point the dragon can see within 120 feet of it. The sphere spreads around corners, and its area is lightly obscured. It lasts until initiative count 20 on the next round. Each creature that starts its turn in the cloud must succeed on a DC 13 Constitution saving throw or be poisoned until the end of its turn. While poisoned in this way, a creature is incapacitated.",
        attack_bonus: 0,
        damage_dice: "6d6"
      }
    ],
    legendary_actions: [
      {
        name: "Detect",
        desc: "The dragon makes a Wisdom (Perception) check.",
        attack_bonus: 0
      },
      {
        name: "Tail Attack",
        desc: "The dragon makes a tail attack.",
        attack_bonus: 0
      },
      {
        name: "Wing Attack (Costs 2 Actions)",
        desc: "The dragon beats its wings. Each creature within 10 ft. of the dragon must succeed on a DC 22 Dexterity saving throw or take 15 (2d6 + 8) bludgeoning damage and be knocked prone. The dragon can then fly up to half its flying speed.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Adult Silver Dragon",
    size: "Huge",
    type: "dragon",
    subtype: "",
    alignment: "lawful good",
    ac: 19,
    hp: 243,
    hit_dice: "18d12 + 126",
    speed: "40 ft., fly 80 ft.",
    stats: [27, 10, 25, 16, 13, 21],
    saves: [
      { dexterity: 5 },
      { constitution: 12 },
      { wisdom: 6 },
      { charisma: 10 }
    ],
    skillsaves: [
      { arcana: 8 },
      { history: 8 },
      { perception: 11 },
      { stealth: 5 }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "cold",
    condition_immunities: "",
    senses: "blindsight 60 ft., darkvision 120 ft., passive Perception 21",
    languages: "Common, Draconic",
    cr: "16",
    traits: [
      {
        name: "Legendary Resistance (3/Day)",
        desc: "If the dragon fails a saving throw, it can choose to succeed instead.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon can use its Frightful Presence. It then makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +13 to hit, reach 10 ft., one target. Hit: 19 (2d10 + 8) piercing damage.",
        attack_bonus: 13,
        damage_dice: "2d10",
        damage_bonus: 8
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +13 to hit, reach 5 ft., one target. Hit: 15 (2d6 + 8) slashing damage.",
        attack_bonus: 13,
        damage_dice: "2d6",
        damage_bonus: 8
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +13 to hit, reach 15 ft., one target. Hit: 17 (2d8 + 8) bludgeoning damage.",
        attack_bonus: 13,
        damage_dice: "2d8",
        damage_bonus: 8
      },
      {
        name: "Frightful Presence",
        desc: "Each creature of the dragon's choice that is within 120 feet of the dragon and aware of it must succeed on a DC 18 Wisdom saving throw or become frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the dragon's Frightful Presence for the next 24 hours.",
        attack_bonus: 0
      },
      {
        name: "Breath Weapons (Recharge 5-6)",
        desc: "The dragon uses one of the following breath weapons.\\nCold Breath. The dragon exhales an icy blast in a 60-foot cone. Each creature in that area must make a DC 20 Constitution saving throw, taking 58 (13d8) cold damage on a failed save, or half as much damage on a successful one.\\nParalyzing Breath. The dragon exhales paralyzing gas in a 60-foot cone. Each creature in that area must succeed on a DC 20 Constitution saving throw or be paralyzed for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success.",
        attack_bonus: 0,
        damage_dice: "13d8"
      }
    ],
    legendary_actions: [
      {
        name: "Detect",
        desc: "The dragon makes a Wisdom (Perception) check.",
        attack_bonus: 0
      },
      {
        name: "Tail Attack",
        desc: "The dragon makes a tail attack.",
        attack_bonus: 0
      },
      {
        name: "Wing Attack (Costs 2 Actions)",
        desc: "The dragon beats its wings. Each creature within 10 ft. of the dragon must succeed on a DC 22 Dexterity saving throw or take 15 (2d6 + 8) bludgeoning damage and be knocked prone. The dragon can then fly up to half its flying speed.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Adult White Dragon",
    size: "Huge",
    type: "dragon",
    subtype: "",
    alignment: "chaotic evil",
    ac: 18,
    hp: 200,
    hit_dice: "16d12 + 96",
    speed: "40 ft., burrow 30 ft., fly 80 ft., swim 40 ft.",
    stats: [22, 10, 22, 8, 12, 12],
    saves: [
      { dexterity: 5 },
      { constitution: 11 },
      { wisdom: 6 },
      { charisma: 6 }
    ],
    skillsaves: [{ perception: 11 }, { stealth: 5 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "cold",
    condition_immunities: "",
    senses: "blindsight 60 ft., darkvision 120 ft., passive Perception 21",
    languages: "Common, Draconic",
    cr: "13",
    traits: [
      {
        name: "Ice Walk",
        desc: "The dragon can move across and climb icy surfaces without needing to make an ability check. Additionally, difficult terrain composed of ice or snow doesn't cost it extra moment.",
        attack_bonus: 0
      },
      {
        name: "Legendary Resistance (3/Day)",
        desc: "If the dragon fails a saving throw, it can choose to succeed instead.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon can use its Frightful Presence. It then makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +11 to hit, reach 10 ft., one target. Hit: 17 (2d10 + 6) piercing damage plus 4 (1d8) cold damage.",
        attack_bonus: 11,
        damage_dice: "2d10 + 1d8",
        damage_bonus: 6
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +11 to hit, reach 5 ft., one target. Hit: 13 (2d6 + 6) slashing damage.",
        attack_bonus: 11,
        damage_dice: "2d6",
        damage_bonus: 6
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +11 to hit, reach 15 ft., one target. Hit: 15 (2d8 + 6) bludgeoning damage.",
        attack_bonus: 11,
        damage_dice: "2d8",
        damage_bonus: 6
      },
      {
        name: "Frightful Presence",
        desc: "Each creature of the dragon's choice that is within 120 ft. of the dragon and aware of it must succeed on a DC 14 Wisdom saving throw or become frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the dragon's Frightful Presence for the next 24 hours.",
        attack_bonus: 0
      },
      {
        name: "Cold Breath (Recharge 5-6)",
        desc: "The dragon exhales an icy blast in a 60-foot cone. Each creature in that area must make a DC 19 Constitution saving throw, taking 54 (12d8) cold damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "12d8"
      }
    ],
    legendary_actions: [
      {
        name: "Detect",
        desc: "The dragon makes a Wisdom (Perception) check.",
        attack_bonus: 0
      },
      {
        name: "Tail Attack",
        desc: "The dragon makes a tail attack.",
        attack_bonus: 0
      },
      {
        name: "Wing Attack (Costs 2 Actions)",
        desc: "The dragon beats its wings. Each creature within 10 ft. of the dragon must succeed on a DC 19 Dexterity saving throw or take 13 (2d6 + 6) bludgeoning damage and be knocked prone. The dragon can then fly up to half its flying speed.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Air Elemental",
    size: "Large",
    type: "elemental",
    subtype: "",
    alignment: "neutral",
    ac: 15,
    hp: 90,
    hit_dice: "12d10 + 24",
    speed: "fly 90 ft. (hover)",
    stats: [14, 20, 14, 6, 10, 6],
    damage_vulnerabilities: "",
    damage_resistances: "lightning; thunder; bludgeoning, piercing, and slashing from nonmagical weapons",
    damage_immunities: "poison",
    condition_immunities: "exhaustion, grappled, paralyzed, petrified, poisoned, prone, restrained, unconscious",
    senses: "darkvision 60 ft., passive Perception 10",
    languages: "Auran",
    cr: "5",
    traits: [
      {
        name: "Air Form",
        desc: "The elemental can enter a hostile creature's space and stop there. It can move through a space as narrow as 1 inch wide without squeezing.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The elemental makes two slam attacks.",
        attack_bonus: 0
      },
      {
        name: "Slam",
        desc: "Melee Weapon Attack: +8 to hit, reach 5 ft., one target. Hit: 14 (2d8 + 5) bludgeoning damage.",
        attack_bonus: 8,
        damage_dice: "2d8",
        damage_bonus: 5
      },
      {
        name: "Whirlwind (Recharge 4-6)",
        desc: "Each creature in the elemental's space must make a DC 13 Strength saving throw. On a failure, a target takes 15 (3d8 + 2) bludgeoning damage and is flung up 20 feet away from the elemental in a random direction and knocked prone. If a thrown target strikes an object, such as a wall or floor, the target takes 3 (1d6) bludgeoning damage for every 10 feet it was thrown. If the target is thrown at another creature, that creature must succeed on a DC 13 Dexterity saving throw or take the same damage and be knocked prone.\\nIf the saving throw is successful, the target takes half the bludgeoning damage and isn't flung away or knocked prone.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Ancient Black Dragon",
    size: "Gargantuan",
    type: "dragon",
    subtype: "",
    alignment: "chaotic evil",
    ac: 22,
    hp: 367,
    hit_dice: "21d20 + 146",
    speed: "40 ft., fly 80 ft., swim 40 ft.",
    stats: [27, 14, 25, 16, 15, 19],
    saves: [
      { dexterity: 9 },
      { constitution: 14 },
      { wisdom: 9 },
      { charisma: 11 }
    ],
    skillsaves: [{ perception: 16 }, { stealth: 9 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "acid",
    condition_immunities: "",
    senses: "blindsight 60 ft., darkvision 120 ft., passive Perception 26",
    languages: "Common, Draconic",
    cr: "21",
    traits: [
      {
        name: "Amphibious",
        desc: "The dragon can breathe air and water.",
        attack_bonus: 0
      },
      {
        name: "Legendary Resistance (3/Day)",
        desc: "If the dragon fails a saving throw, it can choose to succeed instead.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon can use its Frightful Presence. It then makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack:+ 15 to hit, reach 15 ft., one target. Hit: 19 (2d10 + 8) piercing damage plus 9 (2d8) acid damage.",
        attack_bonus: 15,
        damage_dice: "2d10 + 2d8",
        damage_bonus: 8
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +15 to hit, reach 10 ft., one target. Hit: 15 (2d6 + 8) slashing damage.",
        attack_bonus: 15,
        damage_dice: "2d6",
        damage_bonus: 8
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +15 to hit, reach 20 ft ., one target. Hit: 17 (2d8 + 8) bludgeoning damage.",
        attack_bonus: 15,
        damage_dice: "2d8",
        damage_bonus: 8
      },
      {
        name: "Frightful Presence",
        desc: "Each creature of the dragon's choice that is within 120 feet of the dragon and aware of it must succeed on a DC 19 Wisdom saving throw or become frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the dragon's Frightful Presence for the next 24 hours.",
        attack_bonus: 0
      },
      {
        name: "Acid Breath (Recharge 5-6)",
        desc: "The dragon exhales acid in a 90-foot line that is 10 feet wide. Each creature in that line must make a DC 22 Dexterity saving throw, taking 67 (15d8) acid damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0
      }
    ],
    legendary_actions: [
      {
        name: "Detect",
        desc: "The dragon makes a Wisdom (Perception) check.",
        attack_bonus: 0
      },
      {
        name: "Tail Attack",
        desc: "The dragon makes a tail attack.",
        attack_bonus: 0
      },
      {
        name: "Wing Attack (Costs 2 Actions)",
        desc: "The dragon beats its wings. Each creature within 15 ft. of the dragon must succeed on a DC 23 Dexterity saving throw or take 15 (2d6 + 8) bludgeoning damage and be knocked prone. The dragon can then fly up to half its flying speed.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Ancient Blue Dragon",
    size: "Gargantuan",
    type: "dragon",
    subtype: "",
    alignment: "lawful evil",
    ac: 22,
    hp: 481,
    hit_dice: "26d20 + 208",
    speed: "40 ft., burrow 40 ft., fly 80 ft.",
    stats: [29, 10, 27, 18, 17, 21],
    saves: [
      { dexterity: 7 },
      { constitution: 15 },
      { wisdom: 10 },
      { charisma: 12 }
    ],
    skillsaves: [{ perception: 17 }, { stealth: 7 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "lightning",
    condition_immunities: "",
    senses: "blindsight 60 ft., darkvision 120 ft., passive Perception 27",
    languages: "Common, Draconic",
    cr: "23",
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon can use its Frightful Presence. It then makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +16 to hit, reach 15 ft., one target. Hit: 20 (2d10 + 9) piercing damage plus 11 (2d10) lightning damage.",
        attack_bonus: 16,
        damage_dice: "2d10 + 2d10",
        damage_bonus: 9
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +16 to hit, reach 10 ft., one target. Hit: 16 (2d6 + 9) slashing damage.",
        attack_bonus: 16,
        damage_dice: "2d6",
        damage_bonus: 9
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +16 to hit, reach 20 ft., one target. Hit: 18 (2d8 + 9) bludgeoning damage.",
        attack_bonus: 16,
        damage_dice: "2d8",
        damage_bonus: 9
      },
      {
        name: "Frightful Presence",
        desc: "Each creature of the dragon's choice that is within 120 feet of the dragon and aware of it must succeed on a DC 20 Wisdom saving throw or become frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the dragon's Frightful Presence for the next 24 hours.",
        attack_bonus: 0
      },
      {
        name: "Lightning Breath (Recharge 5-6)",
        desc: "The dragon exhales lightning in a 120-foot line that is 10 feet wide. Each creature in that line must make a DC 23 Dexterity saving throw, taking 88 (16d10) lightning damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "16d10"
      }
    ],
    legendary_actions: [
      {
        name: "Detect",
        desc: "The dragon makes a Wisdom (Perception) check.",
        attack_bonus: 0
      },
      {
        name: "Tail Attack",
        desc: "The dragon makes a tail attack.",
        attack_bonus: 0
      },
      {
        name: "Wing Attack (Costs 2 Actions)",
        desc: "The dragon beats its wings. Each creature within 15 ft. of the dragon must succeed on a DC 24 Dexterity saving throw or take 16 (2d6 + 9) bludgeoning damage and be knocked prone. The dragon can then fly up to half its flying speed.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Ancient Brass Dragon",
    size: "Gargantuan",
    type: "dragon",
    subtype: "",
    alignment: "chaotic good",
    ac: 20,
    hp: 297,
    hit_dice: "17d20 + 118",
    speed: "40 ft., burrow 40 ft., fly 80 ft.",
    stats: [27, 10, 25, 16, 15, 19],
    saves: [
      { dexterity: 6 },
      { constitution: 13 },
      { wisdom: 8 },
      { charisma: 10 }
    ],
    skillsaves: [
      { history: 9 },
      { persuasion: 10 },
      { perception: 14 },
      { stealth: 6 }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "fire",
    condition_immunities: "",
    senses: "blindsight 60 ft., darkvision 120 ft., passive Perception 24",
    languages: "Common, Draconic",
    cr: "20",
    traits: [
      {
        name: "Legendary Resistance (3/Day)",
        desc: "If the dragon fails a saving throw, it can choose to succeed instead.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon can use its Frightful Presence. It then makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +14 to hit, reach 15 ft., one target. Hit: 19 (2d10 + 8) piercing damage.",
        attack_bonus: 14,
        damage_dice: "2d10",
        damage_bonus: 8
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +14 to hit, reach 10 ft., one target. Hit: 15 (2d6 + 8) slashing damage.",
        attack_bonus: 14,
        damage_dice: "2d6",
        damage_bonus: 8
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +14 to hit, reach 20 ft., one target. Hit: 17 (2d8 + 8) bludgeoning damage.",
        attack_bonus: 14,
        damage_dice: "2d8",
        damage_bonus: 8
      },
      {
        name: "Frightful Presence",
        desc: "Each creature of the dragon's choice that is within 120 feet of the dragon and aware of it must succeed on a DC 18 Wisdom saving throw or become frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the dragon's Frightful Presence for the next 24 hours.",
        attack_bonus: 0
      },
      {
        name: "Breath Weapons (Recharge 5-6)",
        desc: "The dragon uses one of the following breath weapons:\\nFire Breath. The dragon exhales fire in an 90-foot line that is 10 feet wide. Each creature in that line must make a DC 21 Dexterity saving throw, taking 56 (16d6) fire damage on a failed save, or half as much damage on a successful one.\\nSleep Breath. The dragon exhales sleep gas in a 90-foot cone. Each creature in that area must succeed on a DC 21 Constitution saving throw or fall unconscious for 10 minutes. This effect ends for a creature if the creature takes damage or someone uses an action to wake it.",
        attack_bonus: 0,
        damage_dice: "16d6"
      },
      {
        name: "Change Shape",
        desc: "The dragon magically polymorphs into a humanoid or beast that has a challenge rating no higher than its own, or back into its true form. It reverts to its true form if it dies. Any equipment it is wearing or carrying is absorbed or borne by the new form (the dragon's choice).\\nIn a new form, the dragon retains its alignment, hit points, Hit Dice, ability to speak, proficiencies, Legendary Resistance, lair actions, and Intelligence, Wisdom, and Charisma scores, as well as this action. Its statistics and capabilities are otherwise replaced by those of the new form, except any class features or legendary actions of that form.",
        attack_bonus: 0
      }
    ],
    legendary_actions: [
      {
        name: "Detect",
        desc: "The dragon makes a Wisdom (Perception) check.",
        attack_bonus: 0
      },
      {
        name: "Tail Attack",
        desc: "The dragon makes a tail attack.",
        attack_bonus: 0
      },
      {
        name: "Wing Attack (Costs 2 Actions)",
        desc: "The dragon beats its wings. Each creature within 15 ft. of the dragon must succeed on a DC 22 Dexterity saving throw or take 15 (2d6 + 8) bludgeoning damage and be knocked prone. The dragon can then fly up to half its flying speed.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Ancient Bronze Dragon",
    size: "Gargantuan",
    type: "dragon",
    subtype: "",
    alignment: "lawful good",
    ac: 22,
    hp: 444,
    hit_dice: "24d20 + 192",
    speed: "40 ft., fly 80 ft., swim 40 ft.",
    stats: [29, 10, 27, 18, 17, 21],
    saves: [
      { dexterity: 7 },
      { constitution: 15 },
      { wisdom: 10 },
      { charisma: 12 }
    ],
    skillsaves: [{ insight: 10 }, { perception: 17 }, { stealth: 7 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "lightning",
    condition_immunities: "",
    senses: "blindsight 60 ft., darkvision 120 ft., passive Perception 27",
    languages: "Common, Draconic",
    cr: "22",
    traits: [
      {
        name: "Amphibious",
        desc: "The dragon can breathe air and water.",
        attack_bonus: 0
      },
      {
        name: "Legendary Resistance (3/Day)",
        desc: "If the dragon fails a saving throw, it can choose to succeed instead.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon can use its Frightful Presence. It then makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +16 to hit, reach 15 ft., one target. Hit: 20 (2d10 + 9) piercing damage.",
        attack_bonus: 16,
        damage_dice: "2d10",
        damage_bonus: 9
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +16 to hit, reach 10 ft., one target. Hit: 16 (2d6 + 9) slashing damage.",
        attack_bonus: 16,
        damage_dice: "1d6",
        damage_bonus: 9
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +16 to hit, reach 20 ft., one target. Hit: 18 (2d8 + 9) bludgeoning damage.",
        attack_bonus: 0,
        damage_dice: "2d8",
        damage_bonus: 9
      },
      {
        name: "Frightful Presence",
        desc: "Each creature of the dragon's choice that is within 120 feet of the dragon and aware of it must succeed on a DC 20 Wisdom saving throw or become frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the dragon's Frightful Presence for the next 24 hours.",
        attack_bonus: 0
      },
      {
        name: "Breath Weapons (Recharge 5-6)",
        desc: "The dragon uses one of the following breath weapons.\\nLightning Breath. The dragon exhales lightning in a 120-foot line that is 10 feet wide. Each creature in that line must make a DC 23 Dexterity saving throw, taking 88 (16d10) lightning damage on a failed save, or half as much damage on a successful one.\\nRepulsion Breath. The dragon exhales repulsion energy in a 30-foot cone. Each creature in that area must succeed on a DC 23 Strength saving throw. On a failed save, the creature is pushed 60 feet away from the dragon.",
        attack_bonus: 0,
        damage_dice: "16d10"
      },
      {
        name: "Change Shape",
        desc: "The dragon magically polymorphs into a humanoid or beast that has a challenge rating no higher than its own, or back into its true form. It reverts to its true form if it dies. Any equipment it is wearing or carrying is absorbed or borne by the new form (the dragon's choice).\\nIn a new form, the dragon retains its alignment, hit points, Hit Dice, ability to speak, proficiencies, Legendary Resistance, lair actions, and Intelligence, Wisdom, and Charisma scores, as well as this action. Its statistics and capabilities are otherwise replaced by those of the new form, except any class features or legendary actions of that form.",
        attack_bonus: 0
      }
    ],
    legendary_actions: [
      {
        name: "Detect",
        desc: "The dragon makes a Wisdom (Perception) check.",
        attack_bonus: 0
      },
      {
        name: "Tail Attack",
        desc: "The dragon makes a tail attack.",
        attack_bonus: 0
      },
      {
        name: "Wing Attack (Costs 2 Actions)",
        desc: "The dragon beats its wings. Each creature within 15 ft. of the dragon must succeed on a DC 24 Dexterity saving throw or take 16 (2d6 + 9) bludgeoning damage and be knocked prone. The dragon can then fly up to half its flying speed.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Ancient Copper Dragon",
    size: "Gargantuan",
    type: "dragon",
    subtype: "",
    alignment: "chaotic good",
    ac: 21,
    hp: 350,
    hit_dice: "20d20 + 140",
    speed: "40 ft., climb 40 ft., fly 80 ft.",
    stats: [27, 12, 25, 20, 17, 19],
    saves: [
      { dexterity: 8 },
      { constitution: 14 },
      { wisdom: 10 },
      { charisma: 11 }
    ],
    skillsaves: [{ stealth: 8 }, { perception: 17 }, { deception: 11 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "acid",
    condition_immunities: "",
    senses: "blindsight 60 ft., darkvision 120 ft., passive Perception 27",
    languages: "Common, Draconic",
    cr: "21",
    traits: [
      {
        name: "Legendary Resistance (3/Day)",
        desc: "If the dragon fails a saving throw, it can choose to succeed instead.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon can use its Frightful Presence. It then makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +15 to hit, reach 15 ft., one target. Hit: 19 (2d10 + 8) piercing damage.",
        attack_bonus: 15,
        damage_dice: "2d10",
        damage_bonus: 8
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +15 to hit, reach 10 ft., one target. Hit: 15 (2d6 + 8) slashing damage.",
        attack_bonus: 15,
        damage_dice: "2d6",
        damage_bonus: 8
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +15 to hit, reach 20 ft., one target. Hit: 17 (2d8 + 8) bludgeoning damage.",
        attack_bonus: 15,
        damage_dice: "2d8",
        damage_bonus: 8
      },
      {
        name: "Frightful Presence",
        desc: "Each creature of the dragon's choice that is within 120 feet of the dragon and aware of it must succeed on a DC 19 Wisdom saving throw or become frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the dragon's Frightful Presence for the next 24 hours.",
        attack_bonus: 0
      },
      {
        name: "Breath Weapons (Recharge 5-6)",
        desc: "The dragon uses one of the following breath weapons.\\nAcid Breath. The dragon exhales acid in an 90-foot line that is 10 feet wide. Each creature in that line must make a DC 22 Dexterity saving throw, taking 63 (14d8) acid damage on a failed save, or half as much damage on a successful one.\\nSlowing Breath. The dragon exhales gas in a 90-foot cone. Each creature in that area must succeed on a DC 22 Constitution saving throw. On a failed save, the creature can't use reactions, its speed is halved, and it can't make more than one attack on its turn. In addition, the creature can use either an action or a bonus action on its turn, but not both. These effects last for 1 minute. The creature can repeat the saving throw at the end of each of its turns, ending the effect on itself with a successful save.",
        attack_bonus: 0,
        damage_dice: "14d8"
      },
      {
        name: "Change Shape",
        desc: "The dragon magically polymorphs into a humanoid or beast that has a challenge rating no higher than its own, or back into its true form. It reverts to its true form if it dies. Any equipment it is wearing or carrying is absorbed or borne by the new form (the dragon's choice).\\nIn a new form, the dragon retains its alignment, hit points, Hit Dice, ability to speak, proficiencies, Legendary Resistance, lair actions, and Intelligence, Wisdom, and Charisma scores, as well as this action. Its statistics and capabilities are otherwise replaced by those of the new form, except any class features or legendary actions of that form.",
        attack_bonus: 0
      }
    ],
    legendary_actions: [
      {
        name: "Detect",
        desc: "The dragon makes a Wisdom (Perception) check.",
        attack_bonus: 0
      },
      {
        name: "Tail Attack",
        desc: "The dragon makes a tail attack.",
        attack_bonus: 0
      },
      {
        name: "Wing Attack (Costs 2 Actions)",
        desc: "The dragon beats its wings. Each creature within 15 ft. of the dragon must succeed on a DC 23 Dexterity saving throw or take 15 (2d6 + 8) bludgeoning damage and be knocked prone. The dragon can then fly up to half its flying speed.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Ancient Gold Dragon",
    size: "Gargantuan",
    type: "dragon",
    subtype: "",
    alignment: "lawful good",
    ac: 22,
    hp: 546,
    hit_dice: "28d20 + 252",
    speed: "40 ft., fly 80 ft., swim 40 ft.",
    stats: [30, 14, 29, 18, 17, 28],
    saves: [
      { dexterity: 9 },
      { constitution: 16 },
      { wisdom: 10 },
      { charisma: 16 }
    ],
    skillsaves: [
      { persuasion: 16 },
      { stealth: 9 },
      { perception: 17 },
      { insight: 10 }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "fire",
    condition_immunities: "",
    senses: "blindsight 60 ft., darkvision 120 ft., passive Perception 27",
    languages: "Common, Draconic",
    cr: "24",
    traits: [
      {
        name: "Amphibious",
        desc: "The dragon can breathe air and water.",
        attack_bonus: 0
      },
      {
        name: "Legendary Resistance (3/Day)",
        desc: "If the dragon fails a saving throw, it can choose to succeed instead.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon can use its Frightful Presence. It then makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +17 to hit, reach 15 ft., one target. Hit: 21 (2d10 + 10) piercing damage.",
        attack_bonus: 17,
        damage_dice: "2d10",
        damage_bonus: 10
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +17 to hit, reach 10 ft., one target. Hit: 17 (2d6 + 10) slashing damage.",
        attack_bonus: 17,
        damage_dice: "2d6",
        damage_bonus: 10
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +17 to hit, reach 20 ft., one target. Hit: 19 (2d8 + 10) bludgeoning damage.",
        attack_bonus: 17,
        damage_dice: "2d8",
        damage_bonus: 10
      },
      {
        name: "Frightful Presence",
        desc: "Each creature of the dragon's choice that is within 120 feet of the dragon and aware of it must succeed on a DC 24 Wisdom saving throw or become frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the dragon's Frightful Presence for the next 24 hours.",
        attack_bonus: 0
      },
      {
        name: "Breath Weapons (Recharge 5-6)",
        desc: "The dragon uses one of the following breath weapons.\\nFire Breath. The dragon exhales fire in a 90-foot cone. Each creature in that area must make a DC 24 Dexterity saving throw, taking 71 (13d10) fire damage on a failed save, or half as much damage on a successful one.\\nWeakening Breath. The dragon exhales gas in a 90-foot cone. Each creature in that area must succeed on a DC 24 Strength saving throw or have disadvantage on Strength-based attack rolls, Strength checks, and Strength saving throws for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success.",
        attack_bonus: 0,
        damage_dice: "13d10"
      },
      {
        name: "Change Shape",
        desc: "The dragon magically polymorphs into a humanoid or beast that has a challenge rating no higher than its own, or back into its true form. It reverts to its true form if it dies. Any equipment it is wearing or carrying is absorbed or borne by the new form (the dragon's choice).\\nIn a new form, the dragon retains its alignment, hit points, Hit Dice, ability to speak, proficiencies, Legendary Resistance, lair actions, and Intelligence, Wisdom, and Charisma scores, as well as this action. Its statistics and capabilities are otherwise replaced by those of the new form, except any class features or legendary actions of that form.",
        attack_bonus: 0
      }
    ],
    legendary_actions: [
      {
        name: "Detect",
        desc: "The dragon makes a Wisdom (Perception) check.",
        attack_bonus: 0
      },
      {
        name: "Tail Attack",
        desc: "The dragon makes a tail attack.",
        attack_bonus: 0
      },
      {
        name: "Wing Attack (Costs 2 Actions)",
        desc: "The dragon beats its wings. Each creature within 15 ft. of the dragon must succeed on a DC 25 Dexterity saving throw or take 17 (2d6 + 10) bludgeoning damage and be knocked prone. The dragon can then fly up to half its flying speed.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Ancient Green Dragon",
    size: "Gargantuan",
    type: "dragon",
    subtype: "",
    alignment: "lawful evil",
    ac: 21,
    hp: 385,
    hit_dice: "22d20 + 154",
    speed: "40 ft., fly 80 ft., swim 40 ft.",
    stats: [27, 12, 25, 20, 17, 19],
    saves: [
      { dexterity: 8 },
      { constitution: 14 },
      { wisdom: 10 },
      { charisma: 11 }
    ],
    skillsaves: [
      { deception: 11 },
      { insight: 10 },
      { perception: 17 },
      { persuasion: 11 },
      { stealth: 8 }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "poison",
    condition_immunities: "poisoned",
    senses: "blindsight 60 ft., darkvision 120 ft., passive Perception 27",
    languages: "Common, Draconic",
    cr: "22",
    traits: [
      {
        name: "Amphibious",
        desc: "The dragon can breathe air and water.",
        attack_bonus: 0
      },
      {
        name: "Legendary Resistance (3/Day)",
        desc: "If the dragon fails a saving throw, it can choose to succeed instead.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon can use its Frightful Presence. It then makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +15 to hit, reach 15 ft., one target. Hit: 19 (2d10 + 8) piercing damage plus 10 (3d6) poison damage.",
        attack_bonus: 15,
        damage_dice: "2d10 + 3d6",
        damage_bonus: 9
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +15 to hit, reach 10 ft., one target. Hit: 22 (4d6 + 8) slashing damage.",
        attack_bonus: 15,
        damage_dice: "4d6",
        damage_bonus: 8
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +15 to hit, reach 20 ft., one target. Hit: 17 (2d8 + 8) bludgeoning damage.",
        attack_bonus: 16,
        damage_dice: "2d8",
        damage_bonus: 8
      },
      {
        name: "Frightful Presence",
        desc: "Each creature of the dragon's choice that is within 120 feet of the dragon and aware of it must succeed on a DC 19 Wisdom saving throw or become frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the dragon's Frightful Presence for the next 24 hours.",
        attack_bonus: 0
      },
      {
        name: "Poison Breath (Recharge 5-6)",
        desc: "The dragon exhales poisonous gas in a 90-foot cone. Each creature in that area must make a DC 22 Constitution saving throw, taking 77 (22d6) poison damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "22d6"
      }
    ],
    legendary_actions: [
      {
        name: "Detect",
        desc: "The dragon makes a Wisdom (Perception) check.",
        attack_bonus: 0
      },
      {
        name: "Tail Attack",
        desc: "The dragon makes a tail attack.",
        attack_bonus: 0
      },
      {
        name: "Wing Attack (Costs 2 Actions)",
        desc: "The dragon beats its wings. Each creature within 15 ft. of the dragon must succeed on a DC 23 Dexterity saving throw or take 15 (2d6 + 8) bludgeoning damage and be knocked prone. The dragon can then fly up to half its flying speed.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Ancient Red Dragon",
    size: "Gargantuan",
    type: "dragon",
    subtype: "",
    alignment: "chaotic evil",
    ac: 22,
    hp: 546,
    hit_dice: "28d20 + 252",
    speed: "40 ft., climb 40 ft., fly 80 ft.",
    stats: [30, 10, 29, 18, 15, 23],
    saves: [
      { dexterity: 7 },
      { constitution: 16 },
      { wisdom: 9 },
      { charisma: 13 }
    ],
    skillsaves: [{ perception: 16 }, { stealth: 7 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "fire",
    condition_immunities: "",
    senses: "blindsight 60 ft., darkvision 120 ft., passive Perception 26",
    languages: "Common, Draconic",
    cr: "24",
    traits: [
      {
        name: "Legendary Resistance (3/Day)",
        desc: "If the dragon fails a saving throw, it can choose to succeed instead.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon can use its Frightful Presence. It then makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +17 to hit, reach 15 ft., one target. Hit: 21 (2d10 + 10) piercing damage plus 14 (4d6) fire damage.",
        attack_bonus: 17,
        damage_dice: "2d10 + 4d6",
        damage_bonus: 10
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +17 to hit, reach 10 ft., one target. Hit: 17 (2d6 + 10) slashing damage.",
        attack_bonus: 17,
        damage_dice: "2d6",
        damage_bonus: 10
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +17 to hit, reach 20 ft., one target. Hit: 19 (2d8 + 10) bludgeoning damage.",
        attack_bonus: 17,
        damage_dice: "2d8",
        damage_bonus: 10
      },
      {
        name: "Frightful Presence",
        desc: "Each creature of the dragon's choice that is within 120 feet of the dragon and aware of it must succeed on a DC 21 Wisdom saving throw or become frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the dragon's Frightful Presence for the next 24 hours.",
        attack_bonus: 0
      },
      {
        name: "Fire Breath (Recharge 5-6)",
        desc: "The dragon exhales fire in a 90-foot cone. Each creature in that area must make a DC 24 Dexterity saving throw, taking 91 (26d6) fire damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "26d6"
      }
    ],
    legendary_actions: [
      {
        name: "Detect",
        desc: "The dragon makes a Wisdom (Perception) check.",
        attack_bonus: 0
      },
      {
        name: "Tail Attack",
        desc: "The dragon makes a tail attack.",
        attack_bonus: 0
      },
      {
        name: "Wing Attack (Costs 2 Actions)",
        desc: "The dragon beats its wings. Each creature within 15 ft. of the dragon must succeed on a DC 25 Dexterity saving throw or take 17 (2d6 + 10) bludgeoning damage and be knocked prone. The dragon can then fly up to half its flying speed.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Ancient Silver Dragon",
    size: "Gargantuan",
    type: "dragon",
    subtype: "",
    alignment: "lawful good",
    ac: 22,
    hp: 487,
    hit_dice: "25d20 + 224",
    speed: "40 ft., fly 80 ft.",
    stats: [30, 10, 29, 18, 15, 23],
    saves: [
      { dexterity: 7 },
      { constitution: 16 },
      { wisdom: 9 },
      { charisma: 13 }
    ],
    skillsaves: [
      { arcana: 11 },
      { perception: 16 },
      { history: 11 },
      { stealth: 7 }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "cold",
    condition_immunities: "",
    senses: "blindsight 60 ft., darkvision 120 ft., passive Perception 26",
    languages: "Common, Draconic",
    cr: "23",
    traits: [
      {
        name: "Legendary Resistance (3/Day)",
        desc: "If the dragon fails a saving throw, it can choose to succeed instead.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon can use its Frightful Presence. It then makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +17 to hit, reach 15 ft., one target. Hit: 21 (2d10 + 10) piercing damage.",
        attack_bonus: 17,
        damage_dice: "2d10",
        damage_bonus: 10
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +17 to hit, reach 10 ft., one target. Hit: 17 (2d6 + 10) slashing damage.",
        attack_bonus: 17,
        damage_dice: "2d6",
        damage_bonus: 10
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +17 to hit, reach 20 ft., one target. Hit: 19 (2d8 + 10) bludgeoning damage.",
        attack_bonus: 17,
        damage_dice: "2d8",
        damage_bonus: 10
      },
      {
        name: "Frightful Presence",
        desc: "Each creature of the dragon's choice that is within 120 feet of the dragon and aware of it must succeed on a DC 21 Wisdom saving throw or become frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the dragon's Frightful Presence for the next 24 hours.",
        attack_bonus: 0
      },
      {
        name: "Breath Weapons (Recharge 5-6)",
        desc: "The dragon uses one of the following breath weapons.\\nCold Breath. The dragon exhales an icy blast in a 90-foot cone. Each creature in that area must make a DC 24 Constitution saving throw, taking 67 (15d8) cold damage on a failed save, or half as much damage on a successful one.\\nParalyzing Breath. The dragon exhales paralyzing gas in a 90- foot cone. Each creature in that area must succeed on a DC 24 Constitution saving throw or be paralyzed for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success.",
        attack_bonus: 0,
        damage_dice: "15d8"
      },
      {
        name: "Change Shape",
        desc: "The dragon magically polymorphs into a humanoid or beast that has a challenge rating no higher than its own, or back into its true form. It reverts to its true form if it dies. Any equipment it is wearing or carrying is absorbed or borne by the new form (the dragon's choice).\\nIn a new form, the dragon retains its alignment, hit points, Hit Dice, ability to speak, proficiencies, Legendary Resistance, lair actions, and Intelligence, Wisdom, and Charisma scores, as well as this action. Its statistics and capabilities are otherwise replaced by those of the new form, except any class features or legendary actions of that form.",
        attack_bonus: 0
      }
    ],
    legendary_actions: [
      {
        name: "Detect",
        desc: "The dragon makes a Wisdom (Perception) check.",
        attack_bonus: 0
      },
      {
        name: "Tail Attack",
        desc: "The dragon makes a tail attack.",
        attack_bonus: 0
      },
      {
        name: "Wing Attack (Costs 2 Actions)",
        desc: "The dragon beats its wings. Each creature within 15 ft. of the dragon must succeed on a DC 25 Dexterity saving throw or take 17 (2d6 + 10) bludgeoning damage and be knocked prone. The dragon can then fly up to half its flying speed.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Ancient White Dragon",
    size: "Gargantuan",
    type: "dragon",
    subtype: "",
    alignment: "chaotic evil",
    ac: 20,
    hp: 333,
    hit_dice: "18d20 + 144",
    speed: "40 ft., burrow 40 ft., fly 80 ft., swim 40 ft.",
    stats: [26, 10, 26, 10, 13, 14],
    saves: [
      { dexterity: 6 },
      { constitution: 14 },
      { wisdom: 7 },
      { charisma: 8 }
    ],
    skillsaves: [{ perception: 13 }, { stealth: 6 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "cold",
    condition_immunities: "",
    senses: "blindsight 60 ft., darkvision 120 ft., passive Perception 23",
    languages: "Common, Draconic",
    cr: "20",
    traits: [
      {
        name: "Ice Walk",
        desc: "The dragon can move across and climb icy surfaces without needing to make an ability check. Additionally, difficult terrain composed of ice or snow doesn't cost it extra moment.",
        attack_bonus: 0
      },
      {
        name: "Legendary Resistance (3/Day)",
        desc: "If the dragon fails a saving throw, it can choose to succeed instead.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon can use its Frightful Presence. It then makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +14 to hit, reach 15 ft., one target. Hit: 19 (2d10 + 8) piercing damage plus 9 (2d8) cold damage.",
        attack_bonus: 14,
        damage_dice: "2d10 + 2d8",
        damage_bonus: 8
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +14 to hit, reach 10 ft., one target. Hit: 15 (2d6 + 8) slashing damage.",
        attack_bonus: 14,
        damage_dice: "2d6",
        damage_bonus: 8
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +14 to hit, reach 20 ft., one target. Hit: 17 (2d8 + 8) bludgeoning damage.",
        attack_bonus: 14,
        damage_dice: "2d8",
        damage_bonus: 8
      },
      {
        name: "Frightful Presence",
        desc: "Each creature of the dragon's choice that is within 120 feet of the dragon and aware of it must succeed on a DC 16 Wisdom saving throw or become frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the dragon's Frightful Presence for the next 24 hours .",
        attack_bonus: 0
      },
      {
        name: "Cold Breath (Recharge 5-6)",
        desc: "The dragon exhales an icy blast in a 90-foot cone. Each creature in that area must make a DC 22 Constitution saving throw, taking 72 (l6d8) cold damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "16d8"
      }
    ]
  },
  {
    name: "Androsphinx",
    size: "Large",
    type: "monstrosity",
    subtype: "",
    alignment: "lawful neutral",
    ac: 17,
    hp: 199,
    hit_dice: "19d10 + 94",
    speed: "40 ft., fly 60 ft.",
    stats: [22, 10, 20, 16, 18, 23],
    saves: [
      { dexterity: 6 },
      { constitution: 11 },
      { intelligence: 9 },
      { wisdom: 10 }
    ],
    skillsaves: [{ religion: 15 }, { perception: 10 }, { arcana: 9 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "psychic; bludgeoning, piercing, and slashing from nonmagical weapons",
    condition_immunities: "charmed, frightened",
    senses: "truesight 120 ft., passive Perception 20",
    languages: "Common, Sphinx",
    cr: "17",
    traits: [
      {
        name: "Inscrutable",
        desc: "The sphinx is immune to any effect that would sense its emotions or read its thoughts, as well as any divination spell that it refuses. Wisdom (Insight) checks made to ascertain the sphinx's intentions or sincerity have disadvantage.",
        attack_bonus: 0
      },
      {
        name: "Magic Weapons",
        desc: "The sphinx's weapon attacks are magical.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The sphinx makes two claw attacks.",
        attack_bonus: 0
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +12 to hit, reach 5 ft., one target. Hit: 17 (2d10 + 6) slashing damage.",
        attack_bonus: 12,
        damage_dice: "2d10",
        damage_bonus: 6
      },
      {
        name: "Roar (3/Day)",
        desc: "The sphinx emits a magical roar. Each time it roars before finishing a long rest, the roar is louder and the effect is different, as detailed below. Each creature within 500 feet of the sphinx and able to hear the roar must make a saving throw.\\n\\nFirst Roar. Each creature that fails a DC 18 Wisdom saving throw is frightened for 1 minute. A frightened creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success.\\n\\nSecond Roar. Each creature that fails a DC 18 Wisdom saving throw is deafened and frightened for 1 minute. A frightened creature is paralyzed and can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success.\\n\\nThird Roar. Each creature makes a DC 18 Constitution saving throw. On a failed save, a creature takes 44 (8d10) thunder damage and is knocked prone. On a successful save, the creature takes half as much damage and isn't knocked prone.",
        attack_bonus: 0
      }
    ],
    legendary_actions: [
      {
        name: "Claw Attack",
        desc: "The sphinx makes one claw attack.",
        attack_bonus: 0
      },
      {
        name: "Teleport (Costs 2 Actions)",
        desc: "The sphinx magically teleports, along with any equipment it is wearing or carrying, up to 120 feet to an unoccupied space it can see.",
        attack_bonus: 0
      },
      {
        name: "Cast a Spell (Costs 3 Actions)",
        desc: "The sphinx casts a spell from its list of prepared spells, using a spell slot as normal.",
        attack_bonus: 0
      }
    ],
    spells: [
      "The sphinx is a 12th-level spellcaster. Its spellcasting ability is Wisdom (spell save DC 18, +10 to hit with spell attacks). It requires no material components to cast its spells. The sphinx has the following cleric spells prepared:",
      {
        "Cantrips (at will)": "sacred flame, spare the dying, thaumaturgy"
      },
      {
        "1st level (4 slots)": "command, detect evil and good, detect magic"
      },
      { "2nd level (3 slots)": "lesser restoration, zone of truth" },
      { "3rd level (3 slots)": "dispel magic, tongues" },
      { "4th level (3 slots)": "banishment, freedom of movement" },
      { "5th level (2 slots)": "flame strike, greater restoration" },
      { "6th level (1 slot)": "heroes' feast" }
    ]
  },
  {
    name: "Animated Armor",
    size: "Medium",
    type: "construct",
    subtype: "",
    alignment: "unaligned",
    ac: 18,
    hp: 33,
    hit_dice: "6d8 + 6",
    speed: "25 ft.",
    stats: [14, 11, 13, 1, 3, 1],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "poison, psychic",
    condition_immunities: "blinded, charmed, deafened, exhaustion, frightened, paralyzed, petrified, poisoned",
    senses: "blindsight 60 ft. (blind beyond this radius), passive Perception 6",
    languages: "",
    cr: "1",
    traits: [
      {
        name: "Antimagic Susceptibility",
        desc: "The armor is incapacitated while in the area of an antimagic field. If targeted by dispel magic, the armor must succeed on a Constitution saving throw against the caster's spell save DC or fall unconscious for 1 minute.",
        attack_bonus: 0
      },
      {
        name: "False Appearance",
        desc: "While the armor remains motionless, it is indistinguishable from a normal suit of armor.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The armor makes two melee attacks.",
        attack_bonus: 0
      },
      {
        name: "Slam",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 5 (1d6 + 2) bludgeoning damage.",
        attack_bonus: 4,
        damage_dice: "1d6",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Ankheg",
    size: "Large",
    type: "monstrosity",
    subtype: "",
    alignment: "unaligned",
    ac: 14,
    hp: 39,
    hit_dice: "6d10 + 6",
    speed: "30 ft., burrow 10 ft.",
    stats: [17, 11, 13, 1, 13, 6],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., tremorsense 60 ft., passive Perception 11",
    languages: "",
    cr: "2",
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 10 (2d6 + 3) slashing damage plus 3 (1d6) acid damage. If the target is a Large or smaller creature, it is grappled (escape DC 13). Until this grapple ends, the ankheg can bite only the grappled creature and has advantage on attack rolls to do so.",
        attack_bonus: 5,
        damage_dice: "2d6 + 1d6",
        damage_bonus: 3
      },
      {
        name: "Acid Spray (Recharge 6)",
        desc: "The ankheg spits acid in a line that is 30 ft. long and 5 ft. wide, provided that it has no creature grappled. Each creature in that line must make a DC 13 Dexterity saving throw, taking 10 (3d6) acid damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "3d6"
      }
    ]
  },
  {
    name: "Ape",
    size: "Medium",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 19,
    hit_dice: "3d8 + 5",
    speed: "30 ft., climb 30 ft.",
    stats: [16, 14, 14, 6, 12, 7],
    skillsaves: [{ athletics: 5 }, { perception: 3 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 13",
    languages: "",
    cr: "1/2",
    actions: [
      {
        name: "Multiattack",
        desc: "The ape makes two fist attacks.",
        attack_bonus: 0
      },
      {
        name: "Fist",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 6 (1d6 + 3) bludgeoning damage.",
        attack_bonus: 5,
        damage_dice: "1d6",
        damage_bonus: 3
      },
      {
        name: "Rock",
        desc: "Ranged Weapon Attack: +5 to hit, range 25/50 ft., one target. Hit: 6 (1d6 + 3) bludgeoning damage.",
        attack_bonus: 5,
        damage_dice: "1d6",
        damage_bonus: 3
      }
    ]
  },
  {
    name: "Archmage",
    size: "Medium",
    type: "humanoid",
    subtype: "any race",
    alignment: "any alignment",
    ac: 12,
    hp: 99,
    hit_dice: "18d8 + 18",
    speed: "30 ft.",
    stats: [10, 14, 12, 20, 15, 16],
    saves: [{ intelligence: 9 }, { wisdom: 6 }],
    skillsaves: [{ arcana: 13 }, { history: 13 }],
    damage_vulnerabilities: "",
    damage_resistances: "damage from spells; non magical bludgeoning, piercing, and slashing (from stoneskin)",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 12",
    languages: "any six languages",
    cr: "12",
    traits: [
      {
        name: "Magic Resistance",
        desc: "The archmage has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Dagger",
        desc: "Melee or Ranged Weapon Attack: +6 to hit, reach 5 ft. or range 20/60 ft., one target. Hit: 4 (1d4 + 2) piercing damage.",
        attack_bonus: 6,
        damage_dice: "1d4",
        damage_bonus: 2
      }
    ],
    spells: [
      "The archmage is an 18th-level spellcaster. Its spellcasting ability is Intelligence (spell save DC 17, +9 to hit with spell attacks). The archmage can cast disguise self and invisibility at will and has the following wizard spells prepared:",
      {
        "Cantrips (at will)": "fire bolt, light, mage hand, prestidigitation, shocking grasp"
      },
      {
        "1st level (4 slots)": "detect magic, identify, mage armor*, magic missile"
      },
      {
        "2nd level (3 slots)": "detect thoughts, mirror image, misty step"
      },
      { "3rd level (3 slots)": "counterspell,fly, lightning bolt" },
      { "4th level (3 slots)": "banishment, fire shield, stoneskin*" },
      { "5th level (3 slots)": "cone of cold, scrying, wall of force" },
      { "6th level (1 slot)": "globe of invulnerability" },
      { "7th level (1 slot)": "teleport" },
      { "8th level (1 slot)": "mind blank*" },
      { "9th level (1 slot)": "time stop" },
      "* The archmage casts these spells on itself before combat."
    ]
  },
  {
    name: "Assassin",
    size: "Medium",
    type: "humanoid",
    subtype: "any race",
    alignment: "any non-good alignment",
    ac: 15,
    hp: 78,
    hit_dice: "12d8 + 24",
    speed: "30 ft.",
    stats: [11, 16, 14, 13, 11, 10],
    saves: [{ dexterity: 6 }, { intelligence: 4 }],
    skillsaves: [
      { acrobatics: 6 },
      { deception: 3 },
      { perception: 3 },
      { stealth: 9 }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "poison",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 13",
    languages: "Thieves' cant plus any two languages",
    cr: "8",
    traits: [
      {
        name: "Assassinate",
        desc: "During its first turn, the assassin has advantage on attack rolls against any creature that hasn't taken a turn. Any hit the assassin scores against a surprised creature is a critical hit.",
        attack_bonus: 0
      },
      {
        name: "Evasion",
        desc: "If the assassin is subjected to an effect that allows it to make a Dexterity saving throw to take only half damage, the assassin instead takes no damage if it succeeds on the saving throw, and only half damage if it fails.",
        attack_bonus: 0
      },
      {
        name: "Sneak Attack (1/Turn)",
        desc: "The assassin deals an extra 13 (4d6) damage when it hits a target with a weapon attack and has advantage on the attack roll, or when the target is within 5 ft. of an ally of the assassin that isn't incapacitated and the assassin doesn't have disadvantage on the attack roll.",
        attack_bonus: 0,
        damage_dice: "4d6"
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The assassin makes two shortsword attacks.",
        attack_bonus: 0
      },
      {
        name: "Shortsword",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 6 (1d6 + 3) piercing damage, and the target must make a DC 15 Constitution saving throw, taking 24 (7d6) poison damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 6,
        damage_dice: "1d6",
        damage_bonus: 3
      },
      {
        name: "Light Crossbow",
        desc: "Ranged Weapon Attack: +6 to hit, range 80/320 ft., one target. Hit: 7 (1d8 + 3) piercing damage, and the target must make a DC 15 Constitution saving throw, taking 24 (7d6) poison damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 6,
        damage_dice: "1d8",
        damage_bonus: 3
      }
    ]
  },
  {
    name: "Awakened Shrub",
    size: "Small",
    type: "plant",
    subtype: "",
    alignment: "unaligned",
    ac: 9,
    hp: 10,
    hit_dice: "3d6 + -1",
    speed: "20 ft.",
    stats: [3, 8, 11, 10, 10, 6],
    damage_vulnerabilities: "fire",
    damage_resistances: "piercing",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 10",
    languages: "one language known by its creator",
    cr: "0",
    traits: [
      {
        name: "False Appearance",
        desc: "While the shrub remains motionless, it is indistinguishable from a normal shrub.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Rake",
        desc: "Melee Weapon Attack: +1 to hit, reach 5 ft., one target. Hit: 1 (1d4 \u2014 1) slashing damage.",
        attack_bonus: 1,
        damage_dice: "1d4",
        damage_bonus: -1
      }
    ]
  },
  {
    name: "Awakened Tree",
    size: "Huge",
    type: "plant",
    subtype: "",
    alignment: "unaligned",
    ac: 13,
    hp: 59,
    hit_dice: "7d12 + 13",
    speed: "20 ft.",
    stats: [19, 6, 15, 10, 10, 7],
    damage_vulnerabilities: "fire",
    damage_resistances: "bludgeoning, piercing",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 10",
    languages: "one language known by its creator",
    cr: "2",
    traits: [
      {
        name: "False Appearance",
        desc: "While the tree remains motionless, it is indistinguishable from a normal tree.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Slam",
        desc: "Melee Weapon Attack: +6 to hit, reach 10 ft., one target. Hit: 14 (3d6 + 4) bludgeoning damage.",
        attack_bonus: 6,
        damage_dice: "3d6",
        damage_bonus: 4
      }
    ]
  },
  {
    name: "Axe Beak",
    size: "Large",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 11,
    hp: 19,
    hit_dice: "3d10 + 2",
    speed: "50 ft.",
    stats: [14, 12, 12, 2, 10, 5],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 10",
    languages: "",
    cr: "1/4",
    actions: [
      {
        name: "Beak",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 6 (1d8 + 2) slashing damage.",
        attack_bonus: 4,
        damage_dice: "1d8",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Azer",
    size: "Medium",
    type: "elemental",
    subtype: "",
    alignment: "lawful neutral",
    ac: 17,
    hp: 39,
    hit_dice: "6d8 + 12",
    speed: "30 ft.",
    stats: [17, 12, 15, 12, 13, 10],
    saves: [{ constitution: 4 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "fire, poison",
    condition_immunities: "poisoned",
    senses: "passive Perception 11",
    languages: "Ignan",
    cr: "2",
    traits: [
      {
        name: "Heated Body",
        desc: "A creature that touches the azer or hits it with a melee attack while within 5 ft. of it takes 5 (1d10) fire damage.",
        attack_bonus: 0,
        damage_dice: "1d10"
      },
      {
        name: "Heated Weapons",
        desc: "When the azer hits with a metal melee weapon, it deals an extra 3 (1d6) fire damage (included in the attack).",
        attack_bonus: 0
      },
      {
        name: "Illumination",
        desc: "The azer sheds bright light in a 10-foot radius and dim light for an additional 10 ft..",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Warhammer",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 7 (1d8 + 3) bludgeoning damage, or 8 (1d10 + 3) bludgeoning damage if used with two hands to make a melee attack, plus 3 (1d6) fire damage.",
        attack_bonus: 5,
        damage_dice: "1d8 + 1d6",
        damage_bonus: 3
      }
    ]
  },
  {
    name: "Baboon",
    size: "Small",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 3,
    hit_dice: "1d6 + -1",
    speed: "30 ft., climb 30 ft.",
    stats: [8, 14, 11, 4, 12, 6],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 11",
    languages: "",
    cr: "0",
    traits: [
      {
        name: "Pack Tactics",
        desc: "The baboon has advantage on an attack roll against a creature if at least one of the baboon's allies is within 5 ft. of the creature and the ally isn't incapacitated.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +1 to hit, reach 5 ft., one target. Hit: 1 (1d4 \u2014 1) piercing damage.",
        attack_bonus: 1,
        damage_dice: "1d4",
        damage_bonus: -1
      }
    ]
  },
  {
    name: "Badger",
    size: "Tiny",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 10,
    hp: 3,
    hit_dice: "1d4",
    speed: "20 ft., burrow 5 ft.",
    stats: [4, 11, 12, 2, 12, 5],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 30 ft., passive Perception 11",
    languages: "",
    cr: "0",
    traits: [
      {
        name: "Keen Smell",
        desc: "The badger has advantage on Wisdom (Perception) checks that rely on smell.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +2 to hit, reach 5 ft., one target. Hit: 1 piercing damage.",
        attack_bonus: 2,
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Balor",
    size: "Huge",
    type: "fiend",
    subtype: "demon",
    alignment: "chaotic evil",
    ac: 19,
    hp: 262,
    hit_dice: "21d12 + 125",
    speed: "40 ft., fly 80 ft.",
    stats: [26, 15, 22, 20, 16, 22],
    saves: [
      { strength: 14 },
      { constitution: 12 },
      { wisdom: 9 },
      { charisma: 12 }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "cold, lightning; bludgeoning, piercing, and slashing from nonmagical weapons",
    damage_immunities: "fire, poison",
    condition_immunities: "poisoned",
    senses: "truesight 120 ft., passive Perception 13",
    languages: "Abyssal, telepathy 120 ft.",
    cr: "19",
    traits: [
      {
        name: "Death Throes",
        desc: "When the balor dies, it explodes, and each creature within 30 feet of it must make a DC 20 Dexterity saving throw, taking 70 (20d6) fire damage on a failed save, or half as much damage on a successful one. The explosion ignites flammable objects in that area that aren't being worn or carried, and it destroys the balor's weapons.",
        attack_bonus: 0,
        damage_dice: "20d6"
      },
      {
        name: "Fire Aura",
        desc: "At the start of each of the balor's turns, each creature within 5 feet of it takes 10 (3d6) fire damage, and flammable objects in the aura that aren't being worn or carried ignite. A creature that touches the balor or hits it with a melee attack while within 5 feet of it takes 10 (3d6) fire damage.",
        attack_bonus: 0,
        damage_dice: "3d6"
      },
      {
        name: "Magic Resistance",
        desc: "The balor has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      },
      {
        name: "Magic Weapons",
        desc: "The balor's weapon attacks are magical.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The balor makes two attacks: one with its longsword and one with its whip.",
        attack_bonus: 0
      },
      {
        name: "Longsword",
        desc: "Melee Weapon Attack: +14 to hit, reach 10 ft., one target. Hit: 21 (3d8 + 8) slashing damage plus 13 (3d8) lightning damage. If the balor scores a critical hit, it rolls damage dice three times, instead of twice.",
        attack_bonus: 14,
        damage_dice: "3d8 + 3d8",
        damage_bonus: 8
      },
      {
        name: "Whip",
        desc: "Melee Weapon Attack: +14 to hit, reach 30 ft., one target. Hit: 15 (2d6 + 8) slashing damage plus 10 (3d6) fire damage, and the target must succeed on a DC 20 Strength saving throw or be pulled up to 25 feet toward the balor.",
        attack_bonus: 14,
        damage_dice: "2d6 + 3d6",
        damage_bonus: 8
      },
      {
        name: "Teleport",
        desc: "The balor magically teleports, along with any equipment it is wearing or carrying, up to 120 feet to an unoccupied space it can see.",
        attack_bonus: 0
      },
      {
        name: "Variant: Summon Demon (1/Day)",
        desc: "The demon chooses what to summon and attempts a magical summoning.\\nA balor has a 50 percent chance of summoning 1d8 vrocks, 1d6 hezrous, 1d4 glabrezus, 1d3 nalfeshnees, 1d2 mariliths, or one goristro.\\nA summoned demon appears in an unoccupied space within 60 feet of its summoner, acts as an ally of its summoner, and can't summon other demons. It remains for 1 minute, until it or its summoner dies, or until its summoner dismisses it as an action.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Bandit",
    size: "Medium",
    type: "humanoid",
    subtype: "any race",
    alignment: "any non-lawful alignment",
    ac: 12,
    hp: 11,
    hit_dice: "2d8 + 2",
    speed: "30 ft.",
    stats: [11, 12, 12, 10, 10, 10],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 10",
    languages: "any one language (usually Common)",
    cr: "1/8",
    actions: [
      {
        name: "Scimitar",
        desc: "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 4 (1d6 + 1) slashing damage.",
        attack_bonus: 3,
        damage_dice: "1d6",
        damage_bonus: 1
      },
      {
        name: "Light Crossbow",
        desc: "Ranged Weapon Attack: +3 to hit, range 80 ft./320 ft., one target. Hit: 5 (1d8 + 1) piercing damage.",
        attack_bonus: 3,
        damage_dice: "1d8",
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Bandit Captain",
    size: "Medium",
    type: "humanoid",
    subtype: "any race",
    alignment: "any non-lawful alignment",
    ac: 15,
    hp: 65,
    hit_dice: "10d8 + 20",
    speed: "30 ft.",
    stats: [15, 16, 14, 14, 11, 14],
    saves: [{ strength: 4 }, { dexterity: 5 }, { wisdom: 2 }],
    skillsaves: [{ athletics: 4 }, { deception: 4 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 10",
    languages: "any two languages",
    cr: "2",
    actions: [
      {
        name: "Multiattack",
        desc: "The captain makes three melee attacks: two with its scimitar and one with its dagger. Or the captain makes two ranged attacks with its daggers.",
        attack_bonus: 0
      },
      {
        name: "Scimitar",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 6 (1d6 + 3) slashing damage.",
        attack_bonus: 5,
        damage_dice: "1d6",
        damage_bonus: 3
      },
      {
        name: "Dagger",
        desc: "Melee or Ranged Weapon Attack: +5 to hit, reach 5 ft. or range 20/60 ft., one target. Hit: 5 (1d4 + 3) piercing damage.",
        attack_bonus: 5,
        damage_dice: "1d4",
        damage_bonus: 3
      }
    ],
    reactions: [
      {
        name: "Parry",
        desc: "The captain adds 2 to its AC against one melee attack that would hit it. To do so, the captain must see the attacker and be wielding a melee weapon.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Barbed Devil",
    size: "Medium",
    type: "fiend",
    subtype: "devil",
    alignment: "lawful evil",
    ac: 15,
    hp: 110,
    hit_dice: "13d8 + 51",
    speed: "30 ft.",
    stats: [16, 17, 18, 12, 14, 14],
    saves: [
      { strength: 6 },
      { constitution: 7 },
      { wisdom: 5 },
      { charisma: 5 }
    ],
    skillsaves: [{ deception: 5 }, { insight: 5 }, { perception: 8 }],
    damage_vulnerabilities: "",
    damage_resistances: "cold; bludgeoning, piercing, and slashing from nonmagical weapons that aren't silvered",
    damage_immunities: "fire, poison",
    condition_immunities: "poisoned",
    senses: "darkvision 120 ft., passive Perception 18",
    languages: "Infernal, telepathy 120 ft.",
    cr: "5",
    traits: [
      {
        name: "Barbed Hide",
        desc: "At the start of each of its turns, the barbed devil deals 5 (1d10) piercing damage to any creature grappling it.",
        attack_bonus: 0,
        damage_dice: "1d10"
      },
      {
        name: "Devil's Sight",
        desc: "Magical darkness doesn't impede the devil's darkvision.",
        attack_bonus: 0
      },
      {
        name: "Magic Resistance",
        desc: "The devil has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The devil makes three melee attacks: one with its tail and two with its claws. Alternatively, it can use Hurl Flame twice.",
        attack_bonus: 0
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft ., one target. Hit: 6 (1d6 + 3) piercing damage.",
        attack_bonus: 6,
        damage_dice: "1d6",
        damage_bonus: 3
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 10 (2d6 + 3) piercing damage.",
        attack_bonus: 6,
        damage_dice: "2d6",
        damage_bonus: 3
      },
      {
        name: "Hurl Flame",
        desc: "Ranged Spell Attack: +5 to hit, range 150 ft., one target. Hit: 10 (3d6) fire damage. If the target is a flammable object that isn't being worn or carried, it also catches fire.",
        attack_bonus: 5,
        damage_dice: "3d6"
      }
    ]
  },
  {
    name: "Basilisk",
    size: "Medium",
    type: "monstrosity",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 52,
    hit_dice: "8d8 + 16",
    speed: "20 ft.",
    stats: [16, 8, 15, 2, 8, 7],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 9",
    languages: "",
    cr: "3",
    traits: [
      {
        name: "Petrifying Gaze",
        desc: "If a creature starts its turn within 30 ft. of the basilisk and the two of them can see each other, the basilisk can force the creature to make a DC 12 Constitution saving throw if the basilisk isn't incapacitated. On a failed save, the creature magically begins to turn to stone and is restrained. It must repeat the saving throw at the end of its next turn. On a success, the effect ends. On a failure, the creature is petrified until freed by the greater restoration spell or other magic.\\nA creature that isn't surprised can avert its eyes to avoid the saving throw at the start of its turn. If it does so, it can't see the basilisk until the start of its next turn, when it can avert its eyes again. If it looks at the basilisk in the meantime, it must immediately make the save.\\nIf the basilisk sees its reflection within 30 ft. of it in bright light, it mistakes itself for a rival and targets itself with its gaze.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 10 (2d6 + 3) piercing damage plus 7 (2d6) poison damage.",
        attack_bonus: 5,
        damage_dice: "2d6 + 2d6",
        damage_bonus: 3
      }
    ]
  },
  {
    name: "Bat",
    size: "Tiny",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 1,
    hit_dice: "1d4 + -2",
    speed: "5 ft., fly 30 ft.",
    stats: [2, 15, 8, 2, 12, 4],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "blindsight 60 ft., passive Perception 11",
    languages: "",
    cr: "0",
    traits: [
      {
        name: "Echolocation",
        desc: "The bat can't use its blindsight while deafened.",
        attack_bonus: 0
      },
      {
        name: "Keen Hearing",
        desc: "The bat has advantage on Wisdom (Perception) checks that rely on hearing.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +0 to hit, reach 5 ft., one creature. Hit: 1 piercing damage.",
        attack_bonus: 0,
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Bearded Devil",
    size: "Medium",
    type: "fiend",
    subtype: "devil",
    alignment: "lawful evil",
    ac: 13,
    hp: 52,
    hit_dice: "8d8 + 16",
    speed: "30 ft.",
    stats: [16, 15, 15, 9, 11, 11],
    saves: [{ strength: 5 }, { constitution: 4 }, { wisdom: 2 }],
    damage_vulnerabilities: "",
    damage_resistances: "cold; bludgeoning, piercing, and slashing from nonmagical weapons that aren't silvered",
    damage_immunities: "fire, poison",
    condition_immunities: "poisoned",
    senses: "darkvision 120 ft., passive Perception 10",
    languages: "Infernal, telepathy 120 ft.",
    cr: "3",
    traits: [
      {
        name: "Devil's Sight",
        desc: "Magical darkness doesn't impede the devil's darkvision.",
        attack_bonus: 0
      },
      {
        name: "Magic Resistance",
        desc: "The devil has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      },
      {
        name: "Steadfast",
        desc: "The devil can't be frightened while it can see an allied creature within 30 feet of it.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The devil makes two attacks: one with its beard and one with its glaive.",
        attack_bonus: 0
      },
      {
        name: "Beard",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one creature. Hit: 6 (1d8 + 2) piercing damage, and the target must succeed on a DC 12 Constitution saving throw or be poisoned for 1 minute. While poisoned in this way, the target can't regain hit points. The target can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success.",
        attack_bonus: 5,
        damage_dice: "1d8",
        damage_bonus: 2
      },
      {
        name: "Glaive",
        desc: "Melee Weapon Attack: +5 to hit, reach 10 ft., one target. Hit: 8 (1d10 + 3) slashing damage. If the target is a creature other than an undead or a construct, it must succeed on a DC 12 Constitution saving throw or lose 5 (1d10) hit points at the start of each of its turns due to an infernal wound. Each time the devil hits the wounded target with this attack, the damage dealt by the wound increases by 5 (1d10). Any creature can take an action to stanch the wound with a successful DC 12 Wisdom (Medicine) check. The wound also closes if the target receives magical healing.",
        attack_bonus: 5,
        damage_dice: "1d10",
        damage_bonus: 3
      }
    ]
  },
  {
    name: "Behir",
    size: "Huge",
    type: "monstrosity",
    subtype: "",
    alignment: "neutral evil",
    ac: 17,
    hp: 168,
    hit_dice: "16d12 + 64",
    speed: "50 ft., climb 40 ft.",
    stats: [23, 16, 18, 7, 14, 12],
    skillsaves: [{ perception: 6 }, { stealth: 7 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "lightning",
    condition_immunities: "",
    senses: "darkvision 90 ft., passive Perception 16",
    languages: "Draconic",
    cr: "11",
    actions: [
      {
        name: "Multiattack",
        desc: "The behir makes two attacks: one with its bite and one to constrict.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +10 to hit, reach 10 ft., one target. Hit: 22 (3d10 + 6) piercing damage.",
        attack_bonus: 10,
        damage_dice: "3d10",
        damage_bonus: 6
      },
      {
        name: "Constrict",
        desc: "Melee Weapon Attack: +10 to hit, reach 5 ft., one Large or smaller creature. Hit: 17 (2d10 + 6) bludgeoning damage plus 17 (2d10 + 6) slashing damage. The target is grappled (escape DC 16) if the behir isn't already constricting a creature, and the target is restrained until this grapple ends.",
        attack_bonus: 10,
        damage_dice: "2d10 + 2d10",
        damage_bonus: 6
      },
      {
        name: "Lightning Breath (Recharge 5-6)",
        desc: "The behir exhales a line of lightning that is 20 ft. long and 5 ft. wide. Each creature in that line must make a DC 16 Dexterity saving throw, taking 66 (12d10) lightning damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "12d10"
      },
      {
        name: "Swallow",
        desc: "The behir makes one bite attack against a Medium or smaller target it is grappling. If the attack hits, the target is also swallowed, and the grapple ends. While swallowed, the target is blinded and restrained, it has total cover against attacks and other effects outside the behir, and it takes 21 (6d6) acid damage at the start of each of the behir's turns. A behir can have only one creature swallowed at a time.\\nIf the behir takes 30 damage or more on a single turn from the swallowed creature, the behir must succeed on a DC 14 Constitution saving throw at the end of that turn or regurgitate the creature, which falls prone in a space within 10 ft. of the behir. If the behir dies, a swallowed creature is no longer restrained by it and can escape from the corpse by using 15 ft. of movement, exiting prone.",
        attack_bonus: 0,
        damage_dice: "6d6"
      }
    ]
  },
  {
    name: "Berserker",
    size: "Medium",
    type: "humanoid",
    subtype: "any race",
    alignment: "any chaotic alignment",
    ac: 13,
    hp: 67,
    hit_dice: "9d8 + 26",
    speed: "30 ft.",
    stats: [16, 12, 17, 9, 11, 9],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 10",
    languages: "any one language (usually Common)",
    cr: "2",
    traits: [
      {
        name: "Reckless",
        desc: "At the start of its turn, the berserker can gain advantage on all melee weapon attack rolls during that turn, but attack rolls against it have advantage until the start of its next turn.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Greataxe",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 9 (1d12 + 3) slashing damage.",
        attack_bonus: 5,
        damage_dice: "1d12",
        damage_bonus: 3
      }
    ]
  },
  {
    name: "Black Bear",
    size: "Medium",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 11,
    hp: 19,
    hit_dice: "3d8 + 5",
    speed: "40 ft., climb 30 ft.",
    stats: [15, 10, 14, 2, 12, 7],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 13",
    languages: "",
    cr: "1/2",
    traits: [
      {
        name: "Keen Smell",
        desc: "The bear has advantage on Wisdom (Perception) checks that rely on smell.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The bear makes two attacks: one with its bite and one with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 5 (1d6 + 2) piercing damage.",
        attack_bonus: 3,
        damage_dice: "1d6",
        damage_bonus: 2
      },
      {
        name: "Claws",
        desc: "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 7 (2d4 + 2) slashing damage.",
        attack_bonus: 3,
        damage_dice: "2d4",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Black Dragon Wyrmling",
    size: "Medium",
    type: "dragon",
    subtype: "",
    alignment: "chaotic evil",
    ac: 17,
    hp: 33,
    hit_dice: "6d8 + 6",
    speed: "30 ft., fly 60 ft., swim 30 ft.",
    stats: [15, 14, 13, 10, 11, 13],
    saves: [
      { dexterity: 4 },
      { constitution: 3 },
      { wisdom: 2 },
      { charisma: 3 }
    ],
    skillsaves: [{ perception: 4 }, { stealth: 4 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "acid",
    condition_immunities: "",
    senses: "blindsight 10 ft., darkvision 60 ft., passive Perception 14",
    languages: "Draconic",
    cr: "2",
    traits: [
      {
        name: "Amphibious",
        desc: "The dragon can breathe air and water.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 7 (1d10 + 2) piercing damage plus 2 (1d4) acid damage.",
        attack_bonus: 4,
        damage_dice: "1d10",
        damage_bonus: 2
      },
      {
        name: "Acid Breath (Recharge 5-6)",
        desc: "The dragon exhales acid in a 15-foot line that is 5 feet wide. Each creature in that line must make a DC 11 Dexterity saving throw, taking 22 (Sd8) acid damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "5d8"
      }
    ]
  },
  {
    name: "Black Pudding",
    size: "Large",
    type: "ooze",
    subtype: "",
    alignment: "unaligned",
    ac: 7,
    hp: 85,
    hit_dice: "10d10 + 30",
    speed: "20 ft., climb 20 ft.",
    stats: [16, 5, 16, 1, 6, 1],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "acid, cold, lightning, slashing",
    condition_immunities: "blinded, charmed, deafened, exhaustion, frightened, prone",
    senses: "blindsight 60 ft. (blind beyond this radius), passive Perception 8",
    languages: "",
    cr: "4",
    traits: [
      {
        name: "Amorphous",
        desc: "The pudding can move through a space as narrow as 1 inch wide without squeezing.",
        attack_bonus: 0
      },
      {
        name: "Corrosive Form",
        desc: "A creature that touches the pudding or hits it with a melee attack while within 5 feet of it takes 4 (1d8) acid damage. Any nonmagical weapon made of metal or wood that hits the pudding corrodes. After dealing damage, the weapon takes a permanent and cumulative -1 penalty to damage rolls. If its penalty drops to -5, the weapon is destroyed. Nonmagical ammunition made of metal or wood that hits the pudding is destroyed after dealing damage. The pudding can eat through 2-inch-thick, nonmagical wood or metal in 1 round.",
        attack_bonus: 0,
        damage_dice: "1d8"
      },
      {
        name: "Spider Climb",
        desc: "The pudding can climb difficult surfaces, including upside down on ceilings, without needing to make an ability check.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Pseudopod",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 6 (1d6 + 3) bludgeoning damage plus 18 (4d8) acid damage. In addition, nonmagical armor worn by the target is partly dissolved and takes a permanent and cumulative -1 penalty to the AC it offers. The armor is destroyed if the penalty reduces its AC to 10.",
        attack_bonus: 5,
        damage_dice: "1d6 + 4d8",
        damage_bonus: 3
      }
    ],
    reactions: [
      {
        name: "Split",
        desc: "When a pudding that is Medium or larger is subjected to lightning or slashing damage, it splits into two new puddings if it has at least 10 hit points. Each new pudding has hit points equal to half the original pudding's, rounded down. New puddings are one size smaller than the original pudding.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Blink Dog",
    size: "Medium",
    type: "fey",
    subtype: "",
    alignment: "lawful good",
    ac: 13,
    hp: 22,
    hit_dice: "4d8 + 4",
    speed: "40 ft.",
    stats: [12, 17, 12, 10, 13, 11],
    skillsaves: [{ perception: 3 }, { stealth: 5 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 10",
    languages: "Blink Dog, understands Sylvan but can't speak it",
    cr: "1/4",
    traits: [
      {
        name: "Keen Hearing and Smell",
        desc: "The dog has advantage on Wisdom (Perception) checks that rely on hearing or smell.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 4 (1d6 + 1) piercing damage.",
        attack_bonus: 3,
        damage_dice: "1d6",
        damage_bonus: 1
      },
      {
        name: "Teleport (Recharge 4-6)",
        desc: "The dog magically teleports, along with any equipment it is wearing or carrying, up to 40 ft. to an unoccupied space it can see. Before or after teleporting, the dog can make one bite attack.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Blood Hawk",
    size: "Small",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 7,
    hit_dice: "2d6",
    speed: "10 ft., fly 60 ft.",
    stats: [6, 14, 10, 3, 14, 5],
    skillsaves: [{ perception: 4 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 14",
    languages: "",
    cr: "1/8",
    traits: [
      {
        name: "Keen Sight",
        desc: "The hawk has advantage on Wisdom (Perception) checks that rely on sight.",
        attack_bonus: 0
      },
      {
        name: "Pack Tactics",
        desc: "The hawk has advantage on an attack roll against a creature if at least one of the hawk's allies is within 5 ft. of the creature and the ally isn't incapacitated.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Beak",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 4 (1d4 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d4",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Blue Dragon Wyrmling",
    size: "Medium",
    type: "dragon",
    subtype: "",
    alignment: "lawful evil",
    ac: 17,
    hp: 52,
    hit_dice: "8d8 + 16",
    speed: "30 ft., burrow 15 ft., fly 60 ft.",
    stats: [17, 10, 15, 12, 11, 15],
    saves: [
      { dexterity: 2 },
      { constitution: 4 },
      { wisdom: 2 },
      { charisma: 4 }
    ],
    skillsaves: [{ perception: 4 }, { stealth: 2 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "lightning",
    condition_immunities: "",
    senses: "blindsight 10 ft., darkvision 60 ft., passive Perception 14",
    languages: "Draconic",
    cr: "3",
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 8 (1d10 + 3) piercing damage plus 3 (1d6) lightning damage.",
        attack_bonus: 5,
        damage_dice: "1d10 + 1d6",
        damage_bonus: 3
      },
      {
        name: "Lightning Breath (Recharge 5-6)",
        desc: "The dragon exhales lightning in a 30-foot line that is 5 feet wide. Each creature in that line must make a DC 12 Dexterity saving throw, taking 22 (4d10) lightning damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "4d10"
      }
    ]
  },
  {
    name: "Boar",
    size: "Medium",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 11,
    hp: 11,
    hit_dice: "2d8 + 2",
    speed: "40 ft.",
    stats: [13, 11, 12, 2, 9, 5],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 9",
    languages: "",
    cr: "1/4",
    traits: [
      {
        name: "Charge",
        desc: "If the boar moves at least 20 ft. straight toward a target and then hits it with a tusk attack on the same turn, the target takes an extra 3 (1d6) slashing damage. If the target is a creature, it must succeed on a DC 11 Strength saving throw or be knocked prone.",
        attack_bonus: 0,
        damage_dice: "1d6"
      },
      {
        name: "Relentless (Recharges after a Short or Long Rest)",
        desc: "If the boar takes 7 damage or less that would reduce it to 0 hit points, it is reduced to 1 hit point instead.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Tusk",
        desc: "Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 4 (1d6 + 1) slashing damage.",
        attack_bonus: 3,
        damage_dice: "1d6",
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Bone Devil",
    size: "Large",
    type: "fiend",
    subtype: "devil",
    alignment: "lawful evil",
    ac: 19,
    hp: 142,
    hit_dice: "15d10 + 59",
    speed: "40 ft., fly 40 ft.",
    stats: [18, 16, 18, 13, 14, 16],
    saves: [{ intelligence: 5 }, { wisdom: 6 }, { charisma: 7 }],
    skillsaves: [{ deception: 7 }, { insight: 6 }],
    damage_vulnerabilities: "",
    damage_resistances: "cold; bludgeoning, piercing, and slashing from nonmagical weapons that aren't silvered",
    damage_immunities: "fire, poison",
    condition_immunities: "poisoned",
    senses: "darkvision 120 ft., passive Perception 9",
    languages: "Infernal, telepathy 120 ft.",
    cr: "12",
    traits: [
      {
        name: "Devil's Sight",
        desc: "Magical darkness doesn't impede the devil's darkvision.",
        attack_bonus: 0
      },
      {
        name: "Magic Resistance",
        desc: "The devil has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The devil makes three attacks: two with its claws and one with its sting.",
        attack_bonus: 0
      },
      {
        name: "Multiattack",
        desc: "The devil makes three attacks: two with its claws and one with its sting.",
        attack_bonus: 0
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +8 to hit, reach 10 ft., one target. Hit: 8 (1d8 + 4) slashing damage.",
        attack_bonus: 8,
        damage_dice: "1d8",
        damage_bonus: 4
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +8 to hit, reach 10 ft., one target. Hit: 8 (1d8 + 4) slashing damage.",
        attack_bonus: 8,
        damage_dice: "1d8",
        damage_bonus: 4
      },
      {
        name: "Sting",
        desc: "Melee Weapon Attack: +8 to hit, reach 10 ft., one target. Hit: 13 (2d8 + 4) piercing damage plus 17 (5d6) poison damage, and the target must succeed on a DC 14 Constitution saving throw or become poisoned for 1 minute. The target can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success .",
        attack_bonus: 8,
        damage_dice: "2d8",
        damage_bonus: 4
      },
      {
        name: "Sting",
        desc: "Melee Weapon Attack: +8 to hit, reach 10 ft., one target. Hit: 13 (2d8 + 4) piercing damage plus 17 (5d6) poison damage, and the target must succeed on a DC 14 Constitution saving throw or become poisoned for 1 minute. The target can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success .",
        attack_bonus: 8,
        damage_dice: "2d8",
        damage_bonus: 4
      }
    ]
  },
  {
    name: "Brass Dragon Wyrmling",
    size: "Medium",
    type: "dragon",
    subtype: "",
    alignment: "chaotic good",
    ac: 16,
    hp: 16,
    hit_dice: "3d8 + 2",
    speed: "30 ft., burrow 15 ft., fly 60 ft.",
    stats: [15, 10, 13, 10, 11, 13],
    saves: [
      { dexterity: 2 },
      { constitution: 3 },
      { wisdom: 2 },
      { charisma: 3 }
    ],
    skillsaves: [{ perception: 4 }, { stealth: 2 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "fire",
    condition_immunities: "",
    senses: "blindsight 10 ft., darkvision 60 ft., passive Perception 14",
    languages: "Draconic",
    cr: "1",
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 7 (1d10 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d10",
        damage_bonus: 2
      },
      {
        name: "Breath Weapons (Recharge 5-6)",
        desc: "The dragon uses one of the following breath weapons.\\nFire Breath. The dragon exhales fire in an 20-foot line that is 5 feet wide. Each creature in that line must make a DC 11 Dexterity saving throw, taking 14 (4d6) fire damage on a failed save, or half as much damage on a successful one.\\nSleep Breath. The dragon exhales sleep gas in a 15-foot cone. Each creature in that area must succeed on a DC 11 Constitution saving throw or fall unconscious for 1 minute. This effect ends for a creature if the creature takes damage or someone uses an action to wake it.",
        attack_bonus: 0,
        damage_dice: "4d6"
      }
    ]
  },
  {
    name: "Bronze Dragon Wyrmling",
    size: "Medium",
    type: "dragon",
    subtype: "",
    alignment: "lawful good",
    ac: 17,
    hp: 32,
    hit_dice: "5d8 + 9",
    speed: "30 ft., fly 60 ft., swim 30 ft.",
    stats: [17, 10, 15, 12, 11, 15],
    saves: [
      { dexterity: 2 },
      { constitution: 4 },
      { wisdom: 2 },
      { charisma: 4 }
    ],
    skillsaves: [{ perception: 4 }, { stealth: 2 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "lightning",
    condition_immunities: "",
    senses: "blindsight 10 ft., darkvision 60 ft., passive Perception 14",
    languages: "Draconic",
    cr: "2",
    traits: [
      {
        name: "Amphibious",
        desc: "The dragon can breathe air and water.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 8 (1d10 + 3) piercing damage.",
        attack_bonus: 5,
        damage_dice: "1d10",
        damage_bonus: 3
      },
      {
        name: "Breath Weapons (Recharge 5-6)",
        desc: "The dragon uses one of the following breath weapons.\\nLightning Breath. The dragon exhales lightning in a 40-foot line that is 5 feet wide. Each creature in that line must make a DC 12 Dexterity saving throw, taking 16 (3d10) lightning damage on a failed save, or half as much damage on a successful one.\\nRepulsion Breath. The dragon exhales repulsion energy in a 30-foot cone. Each creature in that area must succeed on a DC 12 Strength saving throw. On a failed save, the creature is pushed 30 feet away from the dragon.",
        attack_bonus: 0,
        damage_dice: "3d10"
      }
    ]
  },
  {
    name: "Brown Bear",
    size: "Large",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 11,
    hp: 34,
    hit_dice: "4d10 + 12",
    speed: "40 ft., climb 30 ft.",
    stats: [19, 10, 16, 2, 13, 7],
    skillsaves: [{ perception: 3 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 13",
    languages: "",
    cr: "1",
    traits: [
      {
        name: "Keen Smell",
        desc: "The bear has advantage on Wisdom (Perception) checks that rely on smell.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The bear makes two attacks: one with its bite and one with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 8 (1d8 + 4) piercing damage.",
        attack_bonus: 5,
        damage_dice: "1d8",
        damage_bonus: 4
      },
      {
        name: "Claws",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 11 (2d6 + 4) slashing damage.",
        attack_bonus: 5,
        damage_dice: "2d6",
        damage_bonus: 4
      }
    ]
  },
  {
    name: "Bugbear",
    size: "Medium",
    type: "humanoid",
    subtype: "goblinoid",
    alignment: "chaotic evil",
    ac: 16,
    hp: 27,
    hit_dice: "5d8 + 4",
    speed: "30 ft.",
    stats: [15, 14, 13, 8, 11, 9],
    skillsaves: [{ stealth: 6 }, { survival: 2 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 10",
    languages: "Common, Goblin",
    cr: "1",
    traits: [
      {
        name: "Brute",
        desc: "A melee weapon deals one extra die of its damage when the bugbear hits with it (included in the attack).",
        attack_bonus: 0
      },
      {
        name: "Surprise Attack",
        desc: "If the bugbear surprises a creature and hits it with an attack during the first round of combat, the target takes an extra 7 (2d6) damage from the attack.",
        attack_bonus: 0,
        damage_dice: "2d6"
      }
    ],
    actions: [
      {
        name: "Morningstar",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 11 (2d8 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "2d8",
        damage_bonus: 2
      },
      {
        name: "Javelin",
        desc: "Melee or Ranged Weapon Attack: +4 to hit, reach 5 ft. or range 30/120 ft., one target. Hit: 9 (2d6 + 2) piercing damage in melee or 5 (1d6 + 2) piercing damage at range.",
        attack_bonus: 4,
        damage_dice: "2d6",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Bulette",
    size: "Large",
    type: "monstrosity",
    subtype: "",
    alignment: "unaligned",
    ac: 17,
    hp: 94,
    hit_dice: "9d10 + 44",
    speed: "40 ft., burrow 40 ft.",
    stats: [19, 11, 21, 2, 10, 5],
    skillsaves: [{ perception: 6 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., tremorsense 60 ft., passive Perception 16",
    languages: "",
    cr: "5",
    traits: [
      {
        name: "Standing Leap",
        desc: "The bulette's long jump is up to 30 ft. and its high jump is up to 15 ft., with or without a running start.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 30 (4d12 + 4) piercing damage.",
        attack_bonus: 7,
        damage_dice: "4d12",
        damage_bonus: 4
      },
      {
        name: "Deadly Leap",
        desc: "If the bulette jumps at least 15 ft. as part of its movement, it can then use this action to land on its ft. in a space that contains one or more other creatures. Each of those creatures must succeed on a DC 16 Strength or Dexterity saving throw (target's choice) or be knocked prone and take 14 (3d6 + 4) bludgeoning damage plus 14 (3d6 + 4) slashing damage. On a successful save, the creature takes only half the damage, isn't knocked prone, and is pushed 5 ft. out of the bulette's space into an unoccupied space of the creature's choice. If no unoccupied space is within range, the creature instead falls prone in the bulette's space.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Camel",
    size: "Large",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 9,
    hp: 15,
    hit_dice: "2d10 + 4",
    speed: "50 ft.",
    stats: [16, 8, 14, 2, 8, 5],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 9",
    languages: "",
    cr: "1/8",
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 2 (1d4) bludgeoning damage.",
        attack_bonus: 5,
        damage_dice: "1d4"
      }
    ]
  },
  {
    name: "Carrion Crawler",
    size: "Large",
    type: "monstrosity",
    subtype: "",
    alignment: "unaligned",
    ac: 13,
    hp: 51,
    hit_dice: "6d10 + 18",
    speed: "30 ft., climb 30 ft.",
    stats: [14, 13, 16, 1, 12, 5],
    skillsaves: [{ perception: 3 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 13",
    languages: "",
    cr: "2",
    traits: [
      {
        name: "Keen Smell",
        desc: "The carrion crawler has advantage on Wisdom (Perception) checks that rely on smell.",
        attack_bonus: 0
      },
      {
        name: "Spider Climb",
        desc: "The carrion crawler can climb difficult surfaces, including upside down on ceilings, without needing to make an ability check.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The carrion crawler makes two attacks: one with its tentacles and one with its bite.",
        attack_bonus: 0
      },
      {
        name: "Tentacles",
        desc: "Melee Weapon Attack: +8 to hit, reach 10 ft., one creature. Hit: 4 (1d4 + 2) poison damage, and the target must succeed on a DC 13 Constitution saving throw or be poisoned for 1 minute. Until this poison ends, the target is paralyzed. The target can repeat the saving throw at the end of each of its turns, ending the poison on itself on a success.",
        attack_bonus: 8,
        damage_dice: "1d4",
        damage_bonus: 2
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 7 (2d4 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "2d4",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Cat",
    size: "Tiny",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 2,
    hit_dice: "1d4 + -1",
    speed: "40 ft., climb 30 ft.",
    stats: [3, 15, 10, 3, 12, 7],
    skillsaves: [{ perception: 3 }, { stealth: 4 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 13",
    languages: "",
    cr: "0",
    traits: [
      {
        name: "Keen Smell",
        desc: "The cat has advantage on Wisdom (Perception) checks that rely on smell.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Claws",
        desc: "Melee Weapon Attack: +0 to hit, reach 5 ft., one target. Hit: 1 slashing damage.",
        attack_bonus: 0,
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Cave Bear",
    size: "Large",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 42,
    hit_dice: "5d10 + 14",
    speed: "40 ft., swim 30 ft.",
    stats: [20, 10, 16, 2, 13, 7],
    skillsaves: [{ perception: 3 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 13",
    languages: "",
    cr: "2",
    traits: [
      {
        name: "Keen Smell",
        desc: "The bear has advantage on Wisdom (Perception) checks that rely on smell.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The bear makes two attacks: one with its bite and one with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 9 (1d8 + 5) piercing damage.",
        attack_bonus: 7,
        damage_dice: "1d8",
        damage_bonus: 5
      },
      {
        name: "Claws",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 12 (2d6 + 5) slashing damage.",
        attack_bonus: 7,
        damage_dice: "2d6",
        damage_bonus: 5
      }
    ]
  },
  {
    name: "Centaur",
    size: "Large",
    type: "monstrosity",
    subtype: "",
    alignment: "neutral good",
    ac: 12,
    hp: 45,
    hit_dice: "6d10 + 12",
    speed: "50 ft.",
    stats: [18, 14, 14, 9, 13, 11],
    skillsaves: [{ athletics: 6 }, { perception: 3 }, { survival: 3 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 13",
    languages: "Elvish, Sylvan",
    cr: "2",
    traits: [
      {
        name: "Charge",
        desc: "If the centaur moves at least 30 ft. straight toward a target and then hits it with a pike attack on the same turn, the target takes an extra 10 (3d6) piercing damage.",
        attack_bonus: 0,
        damage_dice: "3d6"
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The centaur makes two attacks: one with its pike and one with its hooves or two with its longbow.",
        attack_bonus: 0
      },
      {
        name: "Pike",
        desc: "Melee Weapon Attack: +6 to hit, reach 10 ft., one target. Hit: 9 (1d10 + 4) piercing damage.",
        attack_bonus: 6,
        damage_dice: "1d10",
        damage_bonus: 4
      },
      {
        name: "Hooves",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 11 (2d6 + 4) bludgeoning damage.",
        attack_bonus: 6,
        damage_dice: "2d6",
        damage_bonus: 4
      },
      {
        name: "Longbow",
        desc: "Ranged Weapon Attack: +4 to hit, range 150/600 ft., one target. Hit: 6 (1d8 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d8",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Chain Devil",
    size: "Medium",
    type: "fiend",
    subtype: "devil",
    alignment: "lawful evil",
    ac: 16,
    hp: 85,
    hit_dice: "10d8 + 40",
    speed: "30 ft.",
    stats: [18, 15, 18, 11, 12, 14],
    damage_vulnerabilities: "",
    damage_resistances: "cold; bludgeoning, piercing, and slashing from nonmagical weapons that aren't silvered",
    damage_immunities: "fire, poison",
    condition_immunities: "poisoned",
    senses: "darkvision 120 ft., passive Perception 8",
    languages: "Infernal, telepathy 120 ft.",
    cr: "11",
    traits: [
      {
        name: "Devil's Sight",
        desc: "Magical darkness doesn't impede the devil's darkvision.",
        attack_bonus: 0
      },
      {
        name: "Magic Resistance",
        desc: "The devil has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The devil makes two attacks with its chains.",
        attack_bonus: 0
      },
      {
        name: "Chain",
        desc: "Melee Weapon Attack: +8 to hit, reach 10 ft., one target. Hit: 11 (2d6 + 4) slashing damage. The target is grappled (escape DC 14) if the devil isn't already grappling a creature. Until this grapple ends, the target is restrained and takes 7 (2d6) piercing damage at the start of each of its turns.",
        attack_bonus: 8,
        damage_dice: "2d6",
        damage_bonus: 4
      },
      {
        name: "Animate Chains (Recharges after a Short or Long Rest)",
        desc: "Up to four chains the devil can see within 60 feet of it magically sprout razor-edged barbs and animate under the devil's control, provided that the chains aren't being worn or carried.\\nEach animated chain is an object with AC 20, 20 hit points, resistance to piercing damage, and immunity to psychic and thunder damage. When the devil uses Multiattack on its turn, it can use each animated chain to make one additional chain attack. An animated chain can grapple one creature of its own but can't make attacks while grappling. An animated chain reverts to its inanimate state if reduced to 0 hit points or if the devil is incapacitated or dies.",
        attack_bonus: 0
      }
    ],
    reactions: [
      {
        name: "Unnerving Mask",
        desc: "When a creature the devil can see starts its turn within 30 feet of the devil, the devil can create the illusion that it looks like one of the creature's departed loved ones or bitter enemies. If the creature can see the devil, it must succeed on a DC 14 Wisdom saving throw or be frightened until the end of its turn.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Chimera",
    size: "Large",
    type: "monstrosity",
    subtype: "",
    alignment: "chaotic evil",
    ac: 14,
    hp: 114,
    hit_dice: "12d10 + 48",
    speed: "30 ft., fly 60 ft.",
    stats: [19, 11, 19, 3, 14, 10],
    skillsaves: [{ perception: 8 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 18",
    languages: "understands Draconic but can't speak",
    cr: "6",
    actions: [
      {
        name: "Multiattack",
        desc: "The chimera makes three attacks: one with its bite, one with its horns, and one with its claws. When its fire breath is available, it can use the breath in place of its bite or horns.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 11 (2d6 + 4) piercing damage.",
        attack_bonus: 7,
        damage_dice: "2d6",
        damage_bonus: 4
      },
      {
        name: "Horns",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 10 (1d12 + 4) bludgeoning damage.",
        attack_bonus: 7,
        damage_dice: "1d12",
        damage_bonus: 4
      },
      {
        name: "Claws",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 11 (2d6 + 4) slashing damage.",
        attack_bonus: 7,
        damage_dice: "2d6",
        damage_bonus: 4
      },
      {
        name: "Fire Breath (Recharge 5-6)",
        desc: "The dragon head exhales fire in a 15-foot cone. Each creature in that area must make a DC 15 Dexterity saving throw, taking 31 (7d8) fire damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "7d8"
      }
    ]
  },
  {
    name: "Chuul",
    size: "Large",
    type: "aberration",
    subtype: "",
    alignment: "chaotic evil",
    ac: 16,
    hp: 93,
    hit_dice: "11d10 + 32",
    speed: "30 ft., swim 30 ft.",
    stats: [19, 10, 16, 5, 11, 5],
    skillsaves: [{ perception: 4 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "poison",
    condition_immunities: "poisoned",
    senses: "darkvision 60 ft., passive Perception 14",
    languages: "understands Deep Speech but can't speak",
    cr: "4",
    traits: [
      {
        name: "Amphibious",
        desc: "The chuul can breathe air and water.",
        attack_bonus: 0
      },
      {
        name: "Sense Magic",
        desc: "The chuul senses magic within 120 feet of it at will. This trait otherwise works like the detect magic spell but isn't itself magical.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The chuul makes two pincer attacks. If the chuul is grappling a creature, the chuul can also use its tentacles once.",
        attack_bonus: 0
      },
      {
        name: "Pincer",
        desc: "Melee Weapon Attack: +6 to hit, reach 10 ft., one target. Hit: 11 (2d6 + 4) bludgeoning damage. The target is grappled (escape DC 14) if it is a Large or smaller creature and the chuul doesn't have two other creatures grappled.",
        attack_bonus: 6,
        damage_dice: "2d6",
        damage_bonus: 4
      },
      {
        name: "Tentacles",
        desc: "One creature grappled by the chuul must succeed on a DC 13 Constitution saving throw or be poisoned for 1 minute. Until this poison ends, the target is paralyzed. The target can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Clay Golem",
    size: "Large",
    type: "construct",
    subtype: "",
    alignment: "unaligned",
    ac: 14,
    hp: 133,
    hit_dice: "14d10 + 56",
    speed: "20 ft.",
    stats: [20, 9, 18, 3, 8, 1],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "acid, poison, psychic; bludgeoning, piercing, and slashing from nonmagical weapons that aren't adamantine",
    condition_immunities: "charmed, exhaustion, frightened, paralyzed, petrified, poisoned",
    senses: "darkvision 60 ft., passive Perception 9",
    languages: "understands the languages of its creator but can't speak",
    cr: "9",
    traits: [
      {
        name: "Acid Absorption",
        desc: "Whenever the golem is subjected to acid damage, it takes no damage and instead regains a number of hit points equal to the acid damage dealt.",
        attack_bonus: 0
      },
      {
        name: "Berserk",
        desc: "Whenever the golem starts its turn with 60 hit points or fewer, roll a d6. On a 6, the golem goes berserk. On each of its turns while berserk, the golem attacks the nearest creature it can see. If no creature is near enough to move to and attack, the golem attacks an object, with preference for an object smaller than itself. Once the golem goes berserk, it continues to do so until it is destroyed or regains all its hit points.",
        attack_bonus: 0
      },
      {
        name: "Immutable Form",
        desc: "The golem is immune to any spell or effect that would alter its form.",
        attack_bonus: 0
      },
      {
        name: "Magic Resistance",
        desc: "The golem has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      },
      {
        name: "Magic Weapons",
        desc: "The golem's weapon attacks are magical.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The golem makes two slam attacks.",
        attack_bonus: 0
      },
      {
        name: "Slam",
        desc: "Melee Weapon Attack: +8 to hit, reach 5 ft., one target. Hit: 16 (2d10 + 5) bludgeoning damage. If the target is a creature, it must succeed on a DC 15 Constitution saving throw or have its hit point maximum reduced by an amount equal to the damage taken. The target dies if this attack reduces its hit point maximum to 0. The reduction lasts until removed by the greater restoration spell or other magic.",
        attack_bonus: 8,
        damage_dice: "2d10",
        damage_bonus: 5
      },
      {
        name: "Haste (Recharge 5-6)",
        desc: "Until the end of its next turn, the golem magically gains a +2 bonus to its AC, has advantage on Dexterity saving throws, and can use its slam attack as a bonus action.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Cloaker",
    size: "Large",
    type: "aberration",
    subtype: "",
    alignment: "chaotic neutral",
    ac: 14,
    hp: 78,
    hit_dice: "12d10 + 12",
    speed: "10 ft., fly 40 ft.",
    stats: [17, 15, 12, 13, 12, 14],
    skillsaves: [{ stealth: 5 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 11",
    languages: "Deep Speech, Undercommon",
    cr: "8",
    traits: [
      {
        name: "Damage Transfer",
        desc: "While attached to a creature, the cloaker takes only half the damage dealt to it (rounded down). and that creature takes the other half.",
        attack_bonus: 0
      },
      {
        name: "False Appearance",
        desc: "While the cloaker remains motionless without its underside exposed, it is indistinguishable from a dark leather cloak.",
        attack_bonus: 0
      },
      {
        name: "Light Sensitivity",
        desc: "While in bright light, the cloaker has disadvantage on attack rolls and Wisdom (Perception) checks that rely on sight.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The cloaker makes two attacks: one with its bite and one with its tail.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one creature. Hit: 10 (2d6 + 3) piercing damage, and if the target is Large or smaller, the cloaker attaches to it. If the cloaker has advantage against the target, the cloaker attaches to the target's head, and the target is blinded and unable to breathe while the cloaker is attached. While attached, the cloaker can make this attack only against the target and has advantage on the attack roll. The cloaker can detach itself by spending 5 feet of its movement. A creature, including the target, can take its action to detach the cloaker by succeeding on a DC 16 Strength check.",
        attack_bonus: 6,
        damage_dice: "2d6",
        damage_bonus: 3
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +6 to hit, reach 10 ft., one creature. Hit: 7 (1d8 + 3) slashing damage.",
        attack_bonus: 6,
        damage_dice: "1d8",
        damage_bonus: 3
      },
      {
        name: "Moan",
        desc: "Each creature within 60 feet of the cloaker that can hear its moan and that isn't an aberration must succeed on a DC 13 Wisdom saving throw or become frightened until the end of the cloaker's next turn. If a creature's saving throw is successful, the creature is immune to the cloaker's moan for the next 24 hours.",
        attack_bonus: 0
      },
      {
        name: "Phantasms (Recharges after a Short or Long Rest)",
        desc: "The cloaker magically creates three illusory duplicates of itself if it isn't in bright light. The duplicates move with it and mimic its actions, shifting position so as to make it impossible to track which cloaker is the real one. If the cloaker is ever in an area of bright light, the duplicates disappear.\\nWhenever any creature targets the cloaker with an attack or a harmful spell while a duplicate remains, that creature rolls randomly to determine whether it targets the cloaker or one of the duplicates. A creature is unaffected by this magical effect if it can't see or if it relies on senses other than sight.\\nA duplicate has the cloaker's AC and uses its saving throws. If an attack hits a duplicate, or if a duplicate fails a saving throw against an effect that deals damage, the duplicate disappears.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Cloud Giant",
    size: "Huge",
    type: "giant",
    subtype: "",
    alignment: "neutral good (50%) or neutral evil (50%)",
    ac: 14,
    hp: 200,
    hit_dice: "16d12 + 96",
    speed: "40 ft.",
    stats: [27, 10, 22, 12, 16, 16],
    saves: [{ constitution: 10 }, { wisdom: 7 }, { charisma: 7 }],
    skillsaves: [{ insight: 7 }, { perception: 7 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 17",
    languages: "Common, Giant",
    cr: "9",
    traits: [
      {
        name: "Keen Smell",
        desc: "The giant has advantage on Wisdom (Perception) checks that rely on smell.",
        attack_bonus: 0
      },
      {
        name: "Innate Spellcasting",
        desc: "The giant's innate spellcasting ability is Charisma. It can innately cast the following spells, requiring no material components:\\n\\nAt will: detect magic, fog cloud, light\\n3/day each: feather fall, fly, misty step, telekinesis\\n1/day each: control weather, gaseous form",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The giant makes two morningstar attacks.",
        attack_bonus: 0
      },
      {
        name: "Morningstar",
        desc: "Melee Weapon Attack: +12 to hit, reach 10 ft., one target. Hit: 21 (3d8 + 8) piercing damage.",
        attack_bonus: 12,
        damage_dice: "3d8",
        damage_bonus: 8
      },
      {
        name: "Rock",
        desc: "Ranged Weapon Attack: +12 to hit, range 60/240 ft., one target. Hit: 30 (4d10 + 8) bludgeoning damage.",
        attack_bonus: 12,
        damage_dice: "4d10",
        damage_bonus: 8
      }
    ]
  },
  {
    name: "Cockatrice",
    size: "Small",
    type: "monstrosity",
    subtype: "",
    alignment: "unaligned",
    ac: 11,
    hp: 27,
    hit_dice: "6d6 + 6",
    speed: "20 ft., fly 40 ft.",
    stats: [6, 12, 12, 2, 13, 5],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 11",
    languages: "",
    cr: "1/2",
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +3 to hit, reach 5 ft., one creature. Hit: 3 (1d4 + 1) piercing damage, and the target must succeed on a DC 11 Constitution saving throw against being magically petrified. On a failed save, the creature begins to turn to stone and is restrained. It must repeat the saving throw at the end of its next turn. On a success, the effect ends. On a failure, the creature is petrified for 24 hours.",
        attack_bonus: 3,
        damage_dice: "1d4",
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Commoner",
    size: "Medium",
    type: "humanoid",
    subtype: "any race",
    alignment: "any alignment",
    ac: 10,
    hp: 4,
    hit_dice: "1d8 + -1",
    speed: "30 ft.",
    stats: [10, 10, 10, 10, 10, 10],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 10",
    languages: "any one language (usually Common)",
    cr: "0",
    actions: [
      {
        name: "Club",
        desc: "Melee Weapon Attack: +2 to hit, reach 5 ft., one target. Hit: 2 (1d4) bludgeoning damage.",
        attack_bonus: 2,
        damage_dice: "1d4"
      }
    ]
  },
  {
    name: "Constrictor Snake",
    size: "Large",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 13,
    hit_dice: "2d10 + 2",
    speed: "30 ft., swim 30 ft.",
    stats: [15, 14, 12, 1, 10, 3],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "blindsight 10 ft., passive Perception 10",
    languages: "",
    cr: "1/4",
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one creature. Hit: 5 (1d6 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d6",
        damage_bonus: 2
      },
      {
        name: "Constrict",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one creature. Hit: 6 (1d8 + 2) bludgeoning damage, and the target is grappled (escape DC 14). Until this grapple ends, the creature is restrained, and the snake can't constrict another target.",
        attack_bonus: 4,
        damage_dice: "1d8",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Copper Dragon Wyrmling",
    size: "Medium",
    type: "dragon",
    subtype: "",
    alignment: "chaotic good",
    ac: 16,
    hp: 22,
    hit_dice: "4d8 + 4",
    speed: "30 ft., climb 30 ft., fly 60 ft.",
    stats: [15, 12, 13, 14, 11, 13],
    saves: [
      { dexterity: 3 },
      { constitution: 3 },
      { wisdom: 2 },
      { charisma: 3 }
    ],
    skillsaves: [{ perception: 4 }, { stealth: 3 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "acid",
    condition_immunities: "",
    senses: "blindsight 10 ft., darkvision 60 ft., passive Perception 14",
    languages: "Draconic",
    cr: "1",
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 7 (1d10 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d10",
        damage_bonus: 2
      },
      {
        name: "Breath Weapons (Recharge 5-6)",
        desc: "The dragon uses one of the following breath weapons.\\nAcid Breath. The dragon exhales acid in an 20-foot line that is 5 feet wide. Each creature in that line must make a DC 11 Dexterity saving throw, taking 18 (4d8) acid damage on a failed save, or half as much damage on a successful one.\\nSlowing Breath. The dragon exhales gas in a 1 5-foot cone. Each creature in that area must succeed on a DC 11 Constitution saving throw. On a failed save, the creature can't use reactions, its speed is halved, and it can't make more than one attack on its turn. In addition, the creature can use either an action or a bonus action on its turn, but not both. These effects last for 1 minute. The creature can repeat the saving throw at the end of each of its turns, ending the effect on itself with a successful save.",
        attack_bonus: 0,
        damage_dice: "4d8"
      }
    ]
  },
  {
    name: "Couatl",
    size: "Medium",
    type: "celestial",
    subtype: "",
    alignment: "lawful good",
    ac: 19,
    hp: 97,
    hit_dice: "13d8 + 38",
    speed: "30 ft., fly 90 ft.",
    stats: [16, 20, 17, 18, 20, 18],
    saves: [{ constitution: 5 }, { wisdom: 7 }, { charisma: 6 }],
    damage_vulnerabilities: "",
    damage_resistances: "radiant",
    damage_immunities: "psychic; bludgeoning, piercing, and slashing from nonmagical weapons",
    condition_immunities: "",
    senses: "truesight 120 ft., passive Perception 15",
    languages: "all, telepathy 120 ft.",
    cr: "4",
    traits: [
      {
        name: "Innate Spellcasting",
        desc: "The couatl's spellcasting ability is Charisma (spell save DC 14). It can innately cast the following spells, requiring only verbal components:\\n\\nAt will: detect evil and good, detect magic, detect thoughts\\n3/day each: bless, create food and water, cure wounds, lesser restoration, protection from poison, sanctuary, shield\\n1/day each: dream, greater restoration, scrying",
        attack_bonus: 0
      },
      {
        name: "Magic Weapons",
        desc: "The couatl's weapon attacks are magical.",
        attack_bonus: 0
      },
      {
        name: "Shielded Mind",
        desc: "The couatl is immune to scrying and to any effect that would sense its emotions, read its thoughts, or detect its location.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +8 to hit, reach 5 ft., one creature. Hit: 8 (1d6 + 5) piercing damage, and the target must succeed on a DC 13 Constitution saving throw or be poisoned for 24 hours. Until this poison ends, the target is unconscious. Another creature can use an action to shake the target awake.",
        attack_bonus: 8,
        damage_dice: "1d6",
        damage_bonus: 5
      },
      {
        name: "Constrict",
        desc: "Melee Weapon Attack: +6 to hit, reach 10 ft., one Medium or smaller creature. Hit: 10 (2d6 + 3) bludgeoning damage, and the target is grappled (escape DC 15). Until this grapple ends, the target is restrained, and the couatl can't constrict another target.",
        attack_bonus: 6,
        damage_dice: "2d6",
        damage_bonus: 3
      },
      {
        name: "Change Shape",
        desc: "The couatl magically polymorphs into a humanoid or beast that has a challenge rating equal to or less than its own, or back into its true form. It reverts to its true form if it dies. Any equipment it is wearing or carrying is absorbed or borne by the new form (the couatl's choice).\\nIn a new form, the couatl retains its game statistics and ability to speak, but its AC, movement modes, Strength, Dexterity, and other actions are replaced by those of the new form, and it gains any statistics and capabilities (except class features, legendary actions, and lair actions) that the new form has but that it lacks. If the new form has a bite attack, the couatl can use its bite in that form.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Crab",
    size: "Tiny",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 11,
    hp: 2,
    hit_dice: "1d4",
    speed: "20 ft., swim 20 ft.",
    stats: [2, 11, 10, 1, 8, 2],
    skillsaves: [{ stealth: 2 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "blindsight 30 ft., passive Perception 9",
    languages: "",
    cr: "0",
    traits: [
      {
        name: "Amphibious",
        desc: "The crab can breathe air and water.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +0 to hit, reach 5 ft., one target. Hit: 1 bludgeoning damage.",
        attack_bonus: 0,
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Crocodile",
    size: "Large",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 19,
    hit_dice: "3d10 + 2",
    speed: "20 ft., swim 20 ft.",
    stats: [15, 10, 13, 2, 10, 5],
    skillsaves: [{ stealth: 2 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 10",
    languages: "",
    cr: "1/2",
    traits: [
      {
        name: "Hold Breath",
        desc: "The crocodile can hold its breath for 15 minutes.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one creature. Hit: 7 (1d10 + 2) piercing damage, and the target is grappled (escape DC 12). Until this grapple ends, the target is restrained, and the crocodile can't bite another target",
        attack_bonus: 4,
        damage_dice: "1d10",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Cult Fanatic",
    size: "Medium",
    type: "humanoid",
    subtype: "any race",
    alignment: "any non-good alignment",
    ac: 13,
    hp: 22,
    hit_dice: "6d8 + -5",
    speed: "30 ft.",
    stats: [11, 14, 12, 10, 13, 14],
    skillsaves: [{ deception: 4 }, { persuasion: 4 }, { religion: 2 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 11",
    languages: "any one language (usually Common)",
    cr: "2",
    traits: [
      {
        name: "Dark Devotion",
        desc: "The fanatic has advantage on saving throws against being charmed or frightened.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The fanatic makes two melee attacks.",
        attack_bonus: 0
      },
      {
        name: "Dagger",
        desc: "Melee or Ranged Weapon Attack: +4 to hit, reach 5 ft. or range 20/60 ft., one creature. Hit: 4 (1d4 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d4",
        damage_bonus: 2
      }
    ],
    spells: [
      "The fanatic is a 4th-level spellcaster. Its spell casting ability is Wisdom (spell save DC 11, +3 to hit with spell attacks). The fanatic has the following cleric spells prepared:",
      "Cantrips (at will): light, sacred flame, thaumaturgy",
      {
        "1st level (4 slots)": "command, inflict wounds, shield of faith"
      },
      { "2nd level (3 slots)": "hold person, spiritual weapon" }
    ]
  },
  {
    name: "Cultist",
    size: "Medium",
    type: "humanoid",
    subtype: "any race",
    alignment: "any non-good alignment",
    ac: 12,
    hp: 9,
    hit_dice: "2d8",
    speed: "30 ft.",
    stats: [11, 12, 10, 10, 11, 10],
    skillsaves: [{ deception: 2 }, { religion: 2 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 10",
    languages: "any one language (usually Common)",
    cr: "1/8",
    traits: [
      {
        name: "Dark Devotion",
        desc: "The cultist has advantage on saving throws against being charmed or frightened.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Scimitar",
        desc: "Melee Weapon Attack: +3 to hit, reach 5 ft., one creature. Hit: 4 (1d6 + 1) slashing damage.",
        attack_bonus: 3,
        damage_dice: "1d6",
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Darkmantle",
    size: "Small",
    type: "monstrosity",
    subtype: "",
    alignment: "unaligned",
    ac: 11,
    hp: 22,
    hit_dice: "5d6 + 4",
    speed: "10 ft., fly 30 ft.",
    stats: [16, 12, 13, 2, 10, 5],
    skillsaves: [{ stealth: 3 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "blindsight 60 ft., passive Perception 10",
    languages: "",
    cr: "1/2",
    traits: [
      {
        name: "Echolocation",
        desc: "The darkmantle can't use its blindsight while deafened.",
        attack_bonus: 0
      },
      {
        name: "False Appearance",
        desc: "While the darkmantle remains motionless, it is indistinguishable from a cave formation such as a stalactite or stalagmite.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Crush",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one creature. Hit: 6 (1d6 + 3) bludgeoning damage, and the darkmantle attaches to the target. If the target is Medium or smaller and the darkmantle has advantage on the attack roll, it attaches by engulfing the target's head, and the target is also blinded and unable to breathe while the darkmantle is attached in this way.\\nWhile attached to the target, the darkmantle can attack no other creature except the target but has advantage on its attack rolls. The darkmantle's speed also becomes 0, it can't benefit from any bonus to its speed, and it moves with the target.\\nA creature can detach the darkmantle by making a successful DC 13 Strength check as an action. On its turn, the darkmantle can detach itself from the target by using 5 feet of movement.",
        attack_bonus: 5,
        damage_dice: "1d6",
        damage_bonus: 3
      },
      {
        name: "Darkness Aura (1/day)",
        desc: "A 15-foot radius of magical darkness extends out from the darkmantle, moves with it, and spreads around corners. The darkness lasts as long as the darkmantle maintains concentration, up to 10 minutes (as if concentrating on a spell). Darkvision can't penetrate this darkness, and no natural light can illuminate it. If any of the darkness overlaps with an area of light created by a spell of 2nd level or lower, the spell creating the light is dispelled.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Death Dog",
    size: "Medium",
    type: "monstrosity",
    subtype: "",
    alignment: "neutral evil",
    ac: 12,
    hp: 39,
    hit_dice: "6d8 + 12",
    speed: "40 ft.",
    stats: [15, 14, 14, 3, 13, 6],
    skillsaves: [{ perception: 5 }, { stealth: 4 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 120 ft., passive Perception 15",
    languages: "",
    cr: "1",
    traits: [
      {
        name: "Two-Headed",
        desc: "The dog has advantage on Wisdom (Perception) checks and on saving throws against being blinded, charmed, deafened, frightened, stunned, or knocked unconscious.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The dog makes two bite attacks.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 5 (1d6 + 2) piercing damage. If the target is a creature, it must succeed on a DC 12 Constitution saving throw against disease or become poisoned until the disease is cured. Every 24 hours that elapse, the creature must repeat the saving throw, reducing its hit point maximum by 5 (1d10) on a failure. This reduction lasts until the disease is cured. The creature dies if the disease reduces its hit point maximum to 0.",
        attack_bonus: 4,
        damage_dice: "1d6",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Deep Gnome (Svirfneblin)",
    size: "Small",
    type: "humanoid",
    subtype: "gnome",
    alignment: "neutral good",
    ac: 15,
    hp: 16,
    hit_dice: "3d6 + 5",
    speed: "20 ft.",
    stats: [15, 14, 14, 12, 10, 9],
    skillsaves: [{ perception: 2 }, { investigation: 3 }, { stealth: 4 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 120 ft., passive Perception 12",
    languages: "Gnomish, Terran, Undercommon",
    cr: "1/2",
    traits: [
      {
        name: "Stone Camouflage",
        desc: "The gnome has advantage on Dexterity (Stealth) checks made to hide in rocky terrain.",
        attack_bonus: 0
      },
      {
        name: "Gnome Cunning",
        desc: "The gnome has advantage on Intelligence, Wisdom, and Charisma saving throws against magic.",
        attack_bonus: 0
      },
      {
        name: "Innate Spellcasting",
        desc: "The gnome's innate spellcasting ability is Intelligence (spell save DC 11). It can innately cast the following spells, requiring no material components:\\nAt will: nondetection (self only)\\n1/day each: blindness/deafness, blur, disguise self",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "War Pick",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 6 (1d8 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d8",
        damage_bonus: 2
      },
      {
        name: "Poisoned Dart",
        desc: "Ranged Weapon Attack: +4 to hit, range 30/120 ft., one creature. Hit: 4 (1d4 + 2) piercing damage, and the target must succeed on a DC 12 Constitution saving throw or be poisoned for 1 minute. The target can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success",
        attack_bonus: 4,
        damage_dice: "1d4",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Deer",
    size: "Medium",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 13,
    hp: 4,
    hit_dice: "1d8 + -1",
    speed: "50 ft.",
    stats: [11, 16, 11, 2, 14, 5],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 12",
    languages: "",
    cr: "0",
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +2 to hit, reach 5 ft., one target. Hit: 2 (1d4) piercing damage.",
        attack_bonus: 2,
        damage_dice: "1d4"
      }
    ]
  },
  {
    name: "Deva",
    size: "Medium",
    type: "celestial",
    subtype: "",
    alignment: "lawful good",
    ac: 17,
    hp: 136,
    hit_dice: "16d8 + 64",
    speed: "30 ft., fly 90 ft.",
    stats: [18, 18, 18, 17, 20, 20],
    saves: [{ wisdom: 9 }, { charisma: 9 }],
    skillsaves: [{ insight: 9 }, { perception: 9 }],
    damage_vulnerabilities: "",
    damage_resistances: "radiant; bludgeoning, piercing, and slashing from nonmagical weapons",
    damage_immunities: "",
    condition_immunities: "charmed, exhaustion, frightened",
    senses: "darkvision 120 ft., passive Perception 19",
    languages: "all, telepathy 120 ft.",
    cr: "10",
    traits: [
      {
        name: "Angelic Weapons",
        desc: "The deva's weapon attacks are magical. When the deva hits with any weapon, the weapon deals an extra 4d8 radiant damage (included in the attack).",
        attack_bonus: 0
      },
      {
        name: "Innate Spellcasting",
        desc: "The deva's spellcasting ability is Charisma (spell save DC 17). The deva can innately cast the following spells, requiring only verbal components:\\nAt will: detect evil and good\\n1/day each: commune, raise dead",
        attack_bonus: 0
      },
      {
        name: "Magic Resistance",
        desc: "The deva has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The deva makes two melee attacks.",
        attack_bonus: 0
      },
      {
        name: "Mace",
        desc: "Melee Weapon Attack: +8 to hit, reach 5 ft., one target. Hit: 7 (1d6 + 4) bludgeoning damage plus 18 (4d8) radiant damage.",
        attack_bonus: 8,
        damage_dice: "1d6 + 4d8",
        damage_bonus: 4
      },
      {
        name: "Healing Touch (3/Day)",
        desc: "The deva touches another creature. The target magically regains 20 (4d8 + 2) hit points and is freed from any curse, disease, poison, blindness, or deafness.",
        attack_bonus: 0
      },
      {
        name: "Change Shape",
        desc: "The deva magically polymorphs into a humanoid or beast that has a challenge rating equal to or less than its own, or back into its true form. It reverts to its true form if it dies. Any equipment it is wearing or carrying is absorbed or borne by the new form (the deva's choice).\\nIn a new form, the deva retains its game statistics and ability to speak, but its AC, movement modes, Strength, Dexterity, and special senses are replaced by those of the new form, and it gains any statistics and capabilities (except class features, legendary actions, and lair actions) that the new form has but that it lacks.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Dire Wolf",
    size: "Large",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 14,
    hp: 37,
    hit_dice: "5d10 + 9",
    speed: "50 ft.",
    stats: [17, 15, 15, 3, 12, 7],
    skillsaves: [{ perception: 3 }, { stealth: 4 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 13",
    languages: "",
    cr: "1",
    traits: [
      {
        name: "Keen Hearing and Smell",
        desc: "The wolf has advantage on Wisdom (Perception) checks that rely on hearing or smell.",
        attack_bonus: 0
      },
      {
        name: "Pack Tactics",
        desc: "The wolf has advantage on an attack roll against a creature if at least one of the wolf's allies is within 5 ft. of the creature and the ally isn't incapacitated.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 10 (2d6 + 3) piercing damage. If the target is a creature, it must succeed on a DC 13 Strength saving throw or be knocked prone.",
        attack_bonus: 5,
        damage_dice: "2d6",
        damage_bonus: 3
      }
    ]
  },
  {
    name: "Djinni",
    size: "Large",
    type: "elemental",
    subtype: "",
    alignment: "chaotic good",
    ac: 17,
    hp: 161,
    hit_dice: "14d10 + 84",
    speed: "30 ft., fly 90 ft.",
    stats: [21, 15, 22, 15, 16, 20],
    saves: [{ dexterity: 6 }, { wisdom: 7 }, { charisma: 9 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "lightning, thunder",
    condition_immunities: "",
    senses: "darkvision 120 ft., passive Perception 13",
    languages: "Auran",
    cr: "11",
    traits: [
      {
        name: "Elemental Demise",
        desc: "If the djinni dies, its body disintegrates into a warm breeze, leaving behind only equipment the djinni was wearing or carrying.",
        attack_bonus: 0
      },
      {
        name: "Innate Spellcasting",
        desc: "The djinni's innate spellcasting ability is Charisma (spell save DC 17, +9 to hit with spell attacks). It can innately cast the following spells, requiring no material components:\\n\\nAt will: detect evil and good, detect magic, thunderwave 3/day each: create food and water (can create wine instead of water), tongues, wind walk\\n1/day each: conjure elemental (air elemental only), creation, gaseous form, invisibility, major image, plane shift",
        attack_bonus: 0
      },
      {
        name: "Variant: Genie Powers",
        desc: "Genies have a variety of magical capabilities, including spells. A few have even greater powers that allow them to alter their appearance or the nature of reality.\\n\\nDisguises.\\nSome genies can veil themselves in illusion to pass as other similarly shaped creatures. Such genies can innately cast the disguise self spell at will, often with a longer duration than is normal for that spell. Mightier genies can cast the true polymorph spell one to three times per day, possibly with a longer duration than normal. Such genies can change only their own shape, but a rare few can use the spell on other creatures and objects as well.\\nWishes.\\nThe genie power to grant wishes is legendary among mortals. Only the most potent genies, such as those among the nobility, can do so. A particular genie that has this power can grant one to three wishes to a creature that isn't a genie. Once a genie has granted its limit of wishes, it can't grant wishes again for some amount of time (usually 1 year). and cosmic law dictates that the same genie can expend its limit of wishes on a specific creature only once in that creature's existence.\\nTo be granted a wish, a creature within 60 feet of the genie states a desired effect to it. The genie can then cast the wish spell on the creature's behalf to bring about the effect. Depending on the genie's nature, the genie might try to pervert the intent of the wish by exploiting the wish's poor wording. The perversion of the wording is usually crafted to be to the genie's benefit.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The djinni makes three scimitar attacks.",
        attack_bonus: 0
      },
      {
        name: "Scimitar",
        desc: "Melee Weapon Attack: +9 to hit, reach 5 ft., one target. Hit: 12 (2d6 + 5) slashing damage plus 3 (1d6) lightning or thunder damage (djinni's choice).",
        attack_bonus: 9,
        damage_dice: "2d6 + 1d6",
        damage_bonus: 5
      },
      {
        name: "Create Whirlwind",
        desc: "A 5-foot-radius, 30-foot-tall cylinder of swirling air magically forms on a point the djinni can see within 120 feet of it. The whirlwind lasts as long as the djinni maintains concentration (as if concentrating on a spell). Any creature but the djinni that enters the whirlwind must succeed on a DC 18 Strength saving throw or be restrained by it. The djinni can move the whirlwind up to 60 feet as an action, and creatures restrained by the whirlwind move with it. The whirlwind ends if the djinni loses sight of it.\\nA creature can use its action to free a creature restrained by the whirlwind, including itself, by succeeding on a DC 18 Strength check. If the check succeeds, the creature is no longer restrained and moves to the nearest space outside the whirlwind.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Doppelganger",
    size: "Medium",
    type: "monstrosity",
    subtype: "shapechanger",
    alignment: "unaligned",
    ac: 14,
    hp: 52,
    hit_dice: "8d8 + 16",
    speed: "30 ft.",
    stats: [11, 18, 14, 11, 12, 14],
    skillsaves: [{ deception: 6 }, { insight: 3 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "charmed",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 11",
    languages: "Common",
    cr: "3",
    traits: [
      {
        name: "Shapechanger",
        desc: "The doppelganger can use its action to polymorph into a Small or Medium humanoid it has seen, or back into its true form. Its statistics, other than its size, are the same in each form. Any equipment it is wearing or carrying isn't transformed. It reverts to its true form if it dies.",
        attack_bonus: 0
      },
      {
        name: "Ambusher",
        desc: "The doppelganger has advantage on attack rolls against any creature it has surprised.",
        attack_bonus: 0
      },
      {
        name: "Surprise Attack",
        desc: "If the doppelganger surprises a creature and hits it with an attack during the first round of combat, the target takes an extra 10 (3d6) damage from the attack.",
        attack_bonus: 0,
        damage_dice: "3d6"
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The doppelganger makes two melee attacks.",
        attack_bonus: 0
      },
      {
        name: "Slam",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 7 (1d6 + 4) bludgeoning damage.",
        attack_bonus: 6,
        damage_dice: "1d6",
        damage_bonus: 4
      },
      {
        name: "Read Thoughts",
        desc: "The doppelganger magically reads the surface thoughts of one creature within 60 ft. of it. The effect can penetrate barriers, but 3 ft. of wood or dirt, 2 ft. of stone, 2 inches of metal, or a thin sheet of lead blocks it. While the target is in range, the doppelganger can continue reading its thoughts, as long as the doppelganger's concentration isn't broken (as if concentrating on a spell). While reading the target's mind, the doppelganger has advantage on Wisdom (Insight) and Charisma (Deception, Intimidation, and Persuasion) checks against the target.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Draft Horse",
    size: "Large",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 10,
    hp: 19,
    hit_dice: "3d10 + 2",
    speed: "40 ft.",
    stats: [18, 10, 12, 2, 11, 7],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 10",
    languages: "",
    cr: "1/4",
    actions: [
      {
        name: "Hooves",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 9 (2d4 + 4) bludgeoning damage.",
        attack_bonus: 6,
        damage_dice: "2d4",
        damage_bonus: 4
      }
    ]
  },
  {
    name: "Dragon Turtle",
    size: "Gargantuan",
    type: "dragon",
    subtype: "",
    alignment: "neutral",
    ac: 20,
    hp: 341,
    hit_dice: "22d20 + 110",
    speed: "20 ft., swim 40 ft.",
    stats: [25, 10, 20, 10, 12, 12],
    saves: [{ dexterity: 6 }, { constitution: 11 }, { wisdom: 7 }],
    damage_vulnerabilities: "",
    damage_resistances: "fire",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 120 ft., passive Perception 11",
    languages: "Aquan, Draconic",
    cr: "17",
    traits: [
      {
        name: "Amphibious",
        desc: "The dragon turtle can breathe air and water.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon turtle makes three attacks: one with its bite and two with its claws. It can make one tail attack in place of its two claw attacks.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +13 to hit, reach 15 ft., one target. Hit: 26 (3d12 + 7) piercing damage.",
        attack_bonus: 13,
        damage_dice: "3d12",
        damage_bonus: 7
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +13 to hit, reach 10 ft., one target. Hit: 16 (2d8 + 7) slashing damage.",
        attack_bonus: 13,
        damage_dice: "2d8",
        damage_bonus: 7
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +13 to hit, reach 15 ft., one target. Hit: 26 (3d12 + 7) bludgeoning damage. If the target is a creature, it must succeed on a DC 20 Strength saving throw or be pushed up to 10 feet away from the dragon turtle and knocked prone.",
        attack_bonus: 13,
        damage_dice: "3d12",
        damage_bonus: 7
      },
      {
        name: "Steam Breath (Recharge 5-6)",
        desc: "The dragon turtle exhales scalding steam in a 60-foot cone. Each creature in that area must make a DC 18 Constitution saving throw, taking 52 (15d6) fire damage on a failed save, or half as much damage on a successful one. Being underwater doesn't grant resistance against this damage.",
        attack_bonus: 0,
        damage_dice: "15d6"
      }
    ]
  },
  {
    name: "Dretch",
    size: "Small",
    type: "fiend",
    subtype: "demon",
    alignment: "chaotic evil",
    ac: 11,
    hp: 18,
    hit_dice: "4d6 + 4",
    speed: "20 ft.",
    stats: [11, 11, 12, 5, 8, 3],
    damage_vulnerabilities: "",
    damage_resistances: "cold, fire, lightning",
    damage_immunities: "poison",
    condition_immunities: "poisoned",
    senses: "darkvision 60 ft., passive Perception 9",
    languages: "Abyssal, telepathy 60 ft. (works only with creatures that understand Abyssal)",
    cr: "1/4",
    actions: [
      {
        name: "Multiattack",
        desc: "The dretch makes two attacks: one with its bite and one with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +2 to hit, reach 5 ft., one target. Hit: 3 (1d6) piercing damage.",
        attack_bonus: 2,
        damage_dice: "1d6"
      },
      {
        name: "Claws",
        desc: "Melee Weapon Attack: +2 to hit, reach 5 ft., one target. Hit: 5 (2d4) slashing damage.",
        attack_bonus: 2,
        damage_dice: "2d4"
      },
      {
        name: "Fetid Cloud (1/Day)",
        desc: "A 10-foot radius of disgusting green gas extends out from the dretch. The gas spreads around corners, and its area is lightly obscured. It lasts for 1 minute or until a strong wind disperses it. Any creature that starts its turn in that area must succeed on a DC 11 Constitution saving throw or be poisoned until the start of its next turn. While poisoned in this way, the target can take either an action or a bonus action on its turn, not both, and can't take reactions.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Drider",
    size: "Large",
    type: "monstrosity",
    subtype: "",
    alignment: "chaotic evil",
    ac: 19,
    hp: 123,
    hit_dice: "13d10 + 51",
    speed: "30 ft., climb 30 ft.",
    stats: [16, 16, 18, 13, 14, 12],
    skillsaves: [{ perception: 5 }, { stealth: 9 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 120 ft., passive Perception 15",
    languages: "Elvish, Undercommon",
    cr: "6",
    traits: [
      {
        name: "Fey Ancestry",
        desc: "The drider has advantage on saving throws against being charmed, and magic can't put the drider to sleep.",
        attack_bonus: 0
      },
      {
        name: "Innate Spellcasting",
        desc: "The drider's innate spellcasting ability is Wisdom (spell save DC 13). The drider can innately cast the following spells, requiring no material components:\\nAt will: dancing lights\\n1/day each: darkness, faerie fire",
        attack_bonus: 0
      },
      {
        name: "Spider Climb",
        desc: "The drider can climb difficult surfaces, including upside down on ceilings, without needing to make an ability check.",
        attack_bonus: 0
      },
      {
        name: "Sunlight Sensitivity",
        desc: "While in sunlight, the drider has disadvantage on attack rolls, as well as on Wisdom (Perception) checks that rely on sight.",
        attack_bonus: 0
      },
      {
        name: "Web Walker",
        desc: "The drider ignores movement restrictions caused by webbing.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The drider makes three attacks, either with its longsword or its longbow. It can replace one of those attacks with a bite attack.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one creature. Hit: 2 (1d4) piercing damage plus 9 (2d8) poison damage.",
        attack_bonus: 6,
        damage_dice: "1d4",
        damage_bonus: 2
      },
      {
        name: "Longsword",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 7 (1d8 + 3) slashing damage, or 8 (1d10 + 3) slashing damage if used with two hands.",
        attack_bonus: 6,
        damage_dice: "1d8",
        damage_bonus: 3
      },
      {
        name: "Longbow",
        desc: "Ranged Weapon Attack: +6 to hit, range 150/600 ft., one target. Hit: 7 (1d8 + 3) piercing damage plus 4 (1d8) poison damage.",
        attack_bonus: 6,
        damage_dice: "1d8",
        damage_bonus: 3
      }
    ]
  },
  {
    name: "Drow",
    size: "Medium",
    type: "humanoid",
    subtype: "elf",
    alignment: "neutral evil",
    ac: 15,
    hp: 13,
    hit_dice: "3d8 + -1",
    speed: "30 ft.",
    stats: [10, 14, 10, 11, 11, 12],
    skillsaves: [{ perception: 2 }, { stealth: 4 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 120 ft., passive Perception 12",
    languages: "Elvish, Undercommon",
    cr: "1/4",
    traits: [
      {
        name: "Fey Ancestry",
        desc: "The drow has advantage on saving throws against being charmed, and magic can't put the drow to sleep.",
        attack_bonus: 0
      },
      {
        name: "Innate Spellcasting",
        desc: "The drow's spellcasting ability is Charisma (spell save DC 11). It can innately cast the following spells, requiring no material components:\\nAt will: dancing lights\\n1/day each: darkness, faerie fire",
        attack_bonus: 0
      },
      {
        name: "Sunlight Sensitivity",
        desc: "While in sunlight, the drow has disadvantage on attack rolls, as well as on Wisdom (Perception) checks that rely on sight.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Shortsword",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 5 (1d6 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d6",
        damage_bonus: 2
      },
      {
        name: "Hand Crossbow",
        desc: "Ranged Weapon Attack: +4 to hit, range 30/120 ft., one target. Hit: 5 (1d6 + 2) piercing damage, and the target must succeed on a DC 13 Constitution saving throw or be poisoned for 1 hour. If the saving throw fails by 5 or more, the target is also unconscious while poisoned in this way. The target wakes up if it takes damage or if another creature takes an action to shake it awake.",
        attack_bonus: 4,
        damage_dice: "1d6",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Druid",
    size: "Medium",
    type: "humanoid",
    subtype: "any race",
    alignment: "any alignment",
    ac: 11,
    hp: 27,
    hit_dice: "5d8 + 4",
    speed: "30 ft.",
    stats: [10, 12, 13, 12, 15, 11],
    skillsaves: [{ nature: 3 }, { medicine: 4 }, { perception: 4 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 14",
    languages: "Druidic plus any two languages",
    cr: "2",
    traits: [],
    actions: [
      {
        name: "Quarterstaff",
        desc: "Melee Weapon Attack: +2 to hit (+4 to hit with shillelagh), reach 5 ft., one target. Hit: 3 (1d6) bludgeoning damage, or 6 (1d8 + 2) bludgeoning damage with shillelagh or if wielded with two hands.",
        attack_bonus: 2,
        damage_dice: "1d6"
      }
    ],
    spells: [
      "The druid is a 4th-level spellcaster. Its spellcasting ability is Wisdom (spell save DC 12, +4 to hit with spell attacks). It has the following druid spells prepared:",
      { "Cantrips (at will)": "druidcraft, produce flame, shillelagh" },
      {
        "1st level (4 slots)": "entangle, longstrider, speak with animals, thunderwave"
      },
      { "2nd level (3 slots)": "animal messenger, barkskin" }
    ]
  },
  {
    name: "Dryad",
    size: "Medium",
    type: "fey",
    subtype: "",
    alignment: "neutral",
    ac: 11,
    hp: 22,
    hit_dice: "5d8 + -1",
    speed: "30 ft.",
    stats: [10, 12, 11, 14, 15, 18],
    skillsaves: [{ perception: 4 }, { stealth: 5 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 14",
    languages: "Elvish, Sylvan",
    cr: "1",
    traits: [
      {
        name: "Innate Spellcasting",
        desc: "The dryad's innate spellcasting ability is Charisma (spell save DC 14). The dryad can innately cast the following spells, requiring no material components:\\n\\nAt will: druidcraft\\n3/day each: entangle, goodberry\\n1/day each: barkskin, pass without trace, shillelagh",
        attack_bonus: 0
      },
      {
        name: "Magic Resistance",
        desc: "The dryad has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      },
      {
        name: "Speak with Beasts and Plants",
        desc: "The dryad can communicate with beasts and plants as if they shared a language.",
        attack_bonus: 0
      },
      {
        name: "Tree Stride",
        desc: "Once on her turn, the dryad can use 10 ft. of her movement to step magically into one living tree within her reach and emerge from a second living tree within 60 ft. of the first tree, appearing in an unoccupied space within 5 ft. of the second tree. Both trees must be large or bigger.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Club",
        desc: "Melee Weapon Attack: +2 to hit (+6 to hit with shillelagh), reach 5 ft., one target. Hit: 2 (1 d4) bludgeoning damage, or 8 (1d8 + 4) bludgeoning damage with shillelagh.",
        attack_bonus: 2,
        damage_dice: "1d4"
      },
      {
        name: "Fey Charm",
        desc: "The dryad targets one humanoid or beast that she can see within 30 feet of her. If the target can see the dryad, it must succeed on a DC 14 Wisdom saving throw or be magically charmed. The charmed creature regards the dryad as a trusted friend to be heeded and protected. Although the target isn't under the dryad's control, it takes the dryad's requests or actions in the most favorable way it can.\\nEach time the dryad or its allies do anything harmful to the target, it can repeat the saving throw, ending the effect on itself on a success. Otherwise, the effect lasts 24 hours or until the dryad dies, is on a different plane of existence from the target, or ends the effect as a bonus action. If a target's saving throw is successful, the target is immune to the dryad's Fey Charm for the next 24 hours.\\nThe dryad can have no more than one humanoid and up to three beasts charmed at a time.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Duergar",
    size: "Medium",
    type: "humanoid",
    subtype: "dwarf",
    alignment: "lawful evil",
    ac: 16,
    hp: 26,
    hit_dice: "4d8 + 8",
    speed: "25 ft.",
    stats: [14, 11, 14, 11, 10, 9],
    damage_vulnerabilities: "",
    damage_resistances: "poison",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 120 ft., passive Perception 10",
    languages: "Dwarvish, Undercommon",
    cr: "1",
    traits: [
      {
        name: "Duergar Resilience",
        desc: "The duergar has advantage on saving throws against poison, spells, and illusions, as well as to resist being charmed or paralyzed.",
        attack_bonus: 0
      },
      {
        name: "Sunlight Sensitivity",
        desc: "While in sunlight, the duergar has disadvantage on attack rolls, as well as on Wisdom (Perception) checks that rely on sight.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Enlarge (Recharges after a Short or Long Rest)",
        desc: "For 1 minute, the duergar magically increases in size, along with anything it is wearing or carrying. While enlarged, the duergar is Large, doubles its damage dice on Strength-based weapon attacks (included in the attacks), and makes Strength checks and Strength saving throws with advantage. If the duergar lacks the room to become Large, it attains the maximum size possible in the space available.",
        attack_bonus: 0
      },
      {
        name: "War Pick",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 6 (1d8 + 2) piercing damage, or 11 (2d8 + 2) piercing damage while enlarged.",
        attack_bonus: 4,
        damage_dice: "1d8",
        damage_bonus: 2
      },
      {
        name: "Javelin",
        desc: "Melee or Ranged Weapon Attack: +4 to hit, reach 5 ft. or range 30/120 ft., one target. Hit: 5 (1d6 + 2) piercing damage, or 9 (2d6 + 2) piercing damage while enlarged.",
        attack_bonus: 4,
        damage_dice: "1d6",
        damage_bonus: 2
      },
      {
        name: "Invisibility (Recharges after a Short or Long Rest)",
        desc: "The duergar magically turns invisible until it attacks, casts a spell, or uses its Enlarge, or until its concentration is broken, up to 1 hour (as if concentrating on a spell). Any equipment the duergar wears or carries is invisible with it .",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Dust Mephit",
    size: "Small",
    type: "elemental",
    subtype: "",
    alignment: "neutral evil",
    ac: 12,
    hp: 17,
    hit_dice: "5d6 + -1",
    speed: "30 ft., fly 30 ft.",
    stats: [5, 14, 10, 9, 11, 10],
    skillsaves: [{ perception: 2 }, { stealth: 4 }],
    damage_vulnerabilities: "fire",
    damage_resistances: "",
    damage_immunities: "poison",
    condition_immunities: "poisoned",
    senses: "darkvision 60 ft., passive Perception 12",
    languages: "Auran, Terran",
    cr: "1/2",
    traits: [
      {
        name: "Death Burst",
        desc: "When the mephit dies, it explodes in a burst of dust. Each creature within 5 ft. of it must then succeed on a DC 10 Constitution saving throw or be blinded for 1 minute. A blinded creature can repeat the saving throw on each of its turns, ending the effect on itself on a success.",
        attack_bonus: 0
      },
      {
        name: "Innate Spellcasting (1/Day)",
        desc: "The mephit can innately cast sleep, requiring no material components. Its innate spellcasting ability is Charisma.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Claws",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one creature. Hit: 4 (1d4 + 2) slashing damage.",
        attack_bonus: 4,
        damage_dice: "1d4",
        damage_bonus: 2
      },
      {
        name: "Blinding Breath (Recharge 6)",
        desc: "The mephit exhales a 15-foot cone of blinding dust. Each creature in that area must succeed on a DC 10 Dexterity saving throw or be blinded for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success.",
        attack_bonus: 0
      },
      {
        name: "Variant: Summon Mephits (1/Day)",
        desc: "The mephit has a 25 percent chance of summoning 1d4 mephits of its kind. A summoned mephit appears in an unoccupied space within 60 feet of its summoner, acts as an ally of its summoner, and can't summon other mephits. It remains for 1 minute, until it or its summoner dies, or until its summoner dismisses it as an action.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Eagle",
    size: "Small",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 3,
    hit_dice: "1d6 + -1",
    speed: "10 ft., fly 60 ft.",
    stats: [6, 15, 10, 2, 14, 7],
    skillsaves: [{ perception: 4 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 14",
    languages: "",
    cr: "0",
    traits: [
      {
        name: "Keen Sight",
        desc: "The eagle has advantage on Wisdom (Perception) checks that rely on sight.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Talons",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 4 (1d4 + 2) slashing damage.",
        attack_bonus: 4,
        damage_dice: "1d4",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Earth Elemental",
    size: "Large",
    type: "elemental",
    subtype: "",
    alignment: "neutral",
    ac: 17,
    hp: 126,
    hit_dice: "12d10 + 60",
    speed: "30 ft., burrow 30 ft.",
    stats: [20, 8, 20, 5, 10, 5],
    damage_vulnerabilities: "thunder",
    damage_resistances: "bludgeoning, piercing, and slashing from nonmagical weapons",
    damage_immunities: "poison",
    condition_immunities: "exhaustion, paralyzed, petrified, poisoned, unconscious",
    senses: "darkvision 60 ft., tremorsense 60 ft., passive Perception 10",
    languages: "Terran",
    cr: "5",
    traits: [
      {
        name: "Earth Glide",
        desc: "The elemental can burrow through nonmagical, unworked earth and stone. While doing so, the elemental doesn't disturb the material it moves through.",
        attack_bonus: 0
      },
      {
        name: "Siege Monster",
        desc: "The elemental deals double damage to objects and structures.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The elemental makes two slam attacks.",
        attack_bonus: 0
      },
      {
        name: "Slam",
        desc: "Melee Weapon Attack: +8 to hit, reach 10 ft., one target. Hit: 14 (2d8 + 5) bludgeoning damage.",
        attack_bonus: 8,
        damage_dice: "2d8",
        damage_bonus: 5
      }
    ]
  },
  {
    name: "Efreeti",
    size: "Large",
    type: "elemental",
    subtype: "",
    alignment: "lawful evil",
    ac: 17,
    hp: 200,
    hit_dice: "16d10 + 112",
    speed: "40 ft., fly 60 ft.",
    stats: [22, 12, 24, 16, 15, 16],
    saves: [{ intelligence: 7 }, { wisdom: 6 }, { charisma: 7 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "fire",
    condition_immunities: "",
    senses: "darkvision 120 ft., passive Perception 12",
    languages: "Ignan",
    cr: "11",
    traits: [
      {
        name: "Elemental Demise",
        desc: "If the efreeti dies, its body disintegrates in a flash of fire and puff of smoke, leaving behind only equipment the djinni was wearing or carrying.",
        attack_bonus: 0
      },
      {
        name: "Innate Spellcasting",
        desc: "The efreeti's innate spell casting ability is Charisma (spell save DC 15, +7 to hit with spell attacks). It can innately cast the following spells, requiring no material components:\\n\\nAt will: detect magic\\n3/day: enlarge/reduce, tongues\\n1/day each: conjure elemental (fire elemental only), gaseous form, invisibility, major image, plane shift, wall of fire",
        attack_bonus: 0
      },
      {
        name: "Variant: Genie Powers",
        desc: "Genies have a variety of magical capabilities, including spells. A few have even greater powers that allow them to alter their appearance or the nature of reality.\\n\\nDisguises.\\nSome genies can veil themselves in illusion to pass as other similarly shaped creatures. Such genies can innately cast the disguise self spell at will, often with a longer duration than is normal for that spell. Mightier genies can cast the true polymorph spell one to three times per day, possibly with a longer duration than normal. Such genies can change only their own shape, but a rare few can use the spell on other creatures and objects as well.\\nWishes.\\nThe genie power to grant wishes is legendary among mortals. Only the most potent genies, such as those among the nobility, can do so. A particular genie that has this power can grant one to three wishes to a creature that isn't a genie. Once a genie has granted its limit of wishes, it can't grant wishes again for some amount of time (usually 1 year). and cosmic law dictates that the same genie can expend its limit of wishes on a specific creature only once in that creature's existence.\\nTo be granted a wish, a creature within 60 feet of the genie states a desired effect to it. The genie can then cast the wish spell on the creature's behalf to bring about the effect. Depending on the genie's nature, the genie might try to pervert the intent of the wish by exploiting the wish's poor wording. The perversion of the wording is usually crafted to be to the genie's benefit.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The efreeti makes two scimitar attacks or uses its Hurl Flame twice.",
        attack_bonus: 0
      },
      {
        name: "Scimitar",
        desc: "Melee Weapon Attack: +10 to hit, reach 5 ft., one target. Hit: 13 (2d6 + 6) slashing damage plus 7 (2d6) fire damage.",
        attack_bonus: 10,
        damage_dice: "2d6 + 2d6",
        damage_bonus: 6
      },
      {
        name: "Hurl Flame",
        desc: "Ranged Spell Attack: +7 to hit, range 120 ft., one target. Hit: 17 (5d6) fire damage.",
        attack_bonus: 7,
        damage_dice: "5d6"
      }
    ]
  },
  {
    name: "Elephant",
    size: "Huge",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 76,
    hit_dice: "8d12 + 24",
    speed: "40 ft.",
    stats: [22, 9, 17, 3, 11, 6],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 10",
    languages: "",
    cr: "4",
    traits: [
      {
        name: "Trampling Charge",
        desc: "If the elephant moves at least 20 ft. straight toward a creature and then hits it with a gore attack on the same turn, that target must succeed on a DC 12 Strength saving throw or be knocked prone. If the target is prone, the elephant can make one stomp attack against it as a bonus action.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Gore",
        desc: "Melee Weapon Attack: +8 to hit, reach 5 ft., one target. Hit: 19 (3d8 + 6) piercing damage.",
        attack_bonus: 8,
        damage_dice: "3d8",
        damage_bonus: 6
      },
      {
        name: "Stomp",
        desc: "Melee Weapon Attack: +8 to hit, reach 5 ft., one prone creature. Hit: 22 (3d10 + 6) bludgeoning damage.",
        attack_bonus: 8,
        damage_dice: "3d10",
        damage_bonus: 6
      }
    ]
  },
  {
    name: "Elk",
    size: "Large",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 10,
    hp: 13,
    hit_dice: "2d10 + 2",
    speed: "50 ft.",
    stats: [16, 10, 12, 2, 10, 6],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 10",
    languages: "",
    cr: "1/4",
    traits: [
      {
        name: "Charge",
        desc: "If the elk moves at least 20 ft. straight toward a target and then hits it with a ram attack on the same turn, the target takes an extra 7 (2d6) damage. If the target is a creature, it must succeed on a DC 13 Strength saving throw or be knocked prone.",
        attack_bonus: 0,
        damage_dice: "2d6"
      }
    ],
    actions: [
      {
        name: "Ram",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 6 (1d6 + 3) bludgeoning damage.",
        attack_bonus: 0
      },
      {
        name: "Hooves",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one prone creature. Hit: 8 (2d4 + 3) bludgeoning damage.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Erinyes",
    size: "Medium",
    type: "fiend",
    subtype: "devil",
    alignment: "lawful evil",
    ac: 18,
    hp: 153,
    hit_dice: "18d8 + 72",
    speed: "30 ft., fly 60 ft.",
    stats: [18, 16, 18, 14, 14, 18],
    saves: [
      { dexterity: 7 },
      { constitution: 8 },
      { wisdom: 6 },
      { charisma: 8 }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "cold; bludgeoning, piercing, and slashing from nonmagical weapons that aren't silvered",
    damage_immunities: "fire, poison",
    condition_immunities: "poisoned",
    senses: "truesight 120 ft., passive Perception 12",
    languages: "Infernal, telepathy 120 ft.",
    cr: "12",
    traits: [
      {
        name: "Hellish Weapons",
        desc: "The erinyes's weapon attacks are magical and deal an extra 13 (3d8) poison damage on a hit (included in the attacks).",
        attack_bonus: 0
      },
      {
        name: "Magic Resistance",
        desc: "The erinyes has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The erinyes makes three attacks",
        attack_bonus: 0
      },
      {
        name: "Longsword",
        desc: "Melee Weapon Attack: +8 to hit, reach 5 ft., one target. Hit: 8 (1d8 + 4) slashing damage, or 9 (1d10 + 4) slashing damage if used with two hands, plus 13 (3d8) poison damage.",
        attack_bonus: 8,
        damage_dice: "1d8 + 3d8",
        damage_bonus: 4
      },
      {
        name: "Longbow",
        desc: "Ranged Weapon Attack: +7 to hit, range 150/600 ft., one target. Hit: 7 (1d8 + 3) piercing damage plus 13 (3d8) poison damage, and the target must succeed on a DC 14 Constitution saving throw or be poisoned. The poison lasts until it is removed by the lesser restoration spell or similar magic.",
        attack_bonus: 7,
        damage_dice: "1d8 + 3d8",
        damage_bonus: 3
      },
      {
        name: "Variant: Rope of Entanglement",
        desc: "Some erinyes carry a rope of entanglement (detailed in the Dungeon Master's Guide). When such an erinyes uses its Multiattack, the erinyes can use the rope in place of two of the attacks.",
        attack_bonus: 0
      }
    ],
    reactions: [
      {
        name: "Parry",
        desc: "The erinyes adds 4 to its AC against one melee attack that would hit it. To do so, the erinyes must see the attacker and be wielding a melee weapon.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Ettercap",
    size: "Medium",
    type: "monstrosity",
    subtype: "",
    alignment: "neutral evil",
    ac: 13,
    hp: 44,
    hit_dice: "8d8 + 8",
    speed: "30 ft., climb 30 ft.",
    stats: [14, 15, 13, 7, 12, 8],
    skillsaves: [{ perception: 3 }, { stealth: 4 }, { survival: 3 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 13",
    languages: "",
    cr: "2",
    traits: [
      {
        name: "Spider Climb",
        desc: "The ettercap can climb difficult surfaces, including upside down on ceilings, without needing to make an ability check.",
        attack_bonus: 0
      },
      {
        name: "Web Sense",
        desc: "While in contact with a web, the ettercap knows the exact location of any other creature in contact with the same web.",
        attack_bonus: 0
      },
      {
        name: "Web Walker",
        desc: "The ettercap ignores movement restrictions caused by webbing.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The ettercap makes two attacks: one with its bite and one with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one creature. Hit: 6 (1d8 + 2) piercing damage plus 4 (1d8) poison damage. The target must succeed on a DC 11 Constitution saving throw or be poisoned for 1 minute. The creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success.",
        attack_bonus: 4,
        damage_dice: "1d8",
        damage_bonus: 2
      },
      {
        name: "Claws",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 7 (2d4 + 2) slashing damage.",
        attack_bonus: 4,
        damage_dice: "2d4",
        damage_bonus: 2
      },
      {
        name: "Web (Recharge 5-6)",
        desc: "Ranged Weapon Attack: +4 to hit, range 30/60 ft., one Large or smaller creature. Hit: The creature is restrained by webbing. As an action, the restrained creature can make a DC 11 Strength check, escaping from the webbing on a success. The effect ends if the webbing is destroyed. The webbing has AC 10, 5 hit points, is vulnerable to fire damage and immune to bludgeoning damage.",
        attack_bonus: 0
      },
      {
        name: "Variant: Web Garrote",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one Medium or Small creature against which the ettercap has advantage on the attack roll. Hit: 4 (1d4 + 2) bludgeoning damage, and the target is grappled (escape DC 12). Until this grapple ends, the target can't breathe, and the ettercap has advantage on attack rolls against it.",
        attack_bonus: 4,
        damage_dice: "1d4",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Ettin",
    size: "Large",
    type: "giant",
    subtype: "",
    alignment: "chaotic evil",
    ac: 12,
    hp: 85,
    hit_dice: "10d10 + 30",
    speed: "40 ft.",
    stats: [21, 8, 17, 6, 10, 8],
    skillsaves: [{ perception: 4 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 14",
    languages: "Giant, Orc",
    cr: "4",
    traits: [
      {
        name: "Two Heads",
        desc: "The ettin has advantage on Wisdom (Perception) checks and on saving throws against being blinded, charmed, deafened, frightened, stunned, and knocked unconscious.",
        attack_bonus: 0
      },
      {
        name: "Wakeful",
        desc: "When one of the ettin's heads is asleep, its other head is awake.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The ettin makes two attacks: one with its battleaxe and one with its morningstar.",
        attack_bonus: 0
      },
      {
        name: "Battleaxe",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 14 (2d8 + 5) slashing damage.",
        attack_bonus: 7,
        damage_dice: "2d8",
        damage_bonus: 5
      },
      {
        name: "Morningstar",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 14 (2d8 + 5) piercing damage.",
        attack_bonus: 7,
        damage_dice: "2d8",
        damage_bonus: 5
      }
    ]
  },
  {
    name: "Fire Elemental",
    size: "Large",
    type: "elemental",
    subtype: "",
    alignment: "neutral",
    ac: 13,
    hp: 102,
    hit_dice: "12d10 + 36",
    speed: "50 ft.",
    stats: [10, 17, 16, 6, 10, 7],
    damage_vulnerabilities: "",
    damage_resistances: "bludgeoning, piercing, and slashing from nonmagical weapons",
    damage_immunities: "fire, poison",
    condition_immunities: "exhaustion, grappled, paralyzed, petrified, poisoned, prone, restrained, unconscious",
    senses: "darkvision 60 ft., passive Perception 10",
    languages: "Ignan",
    cr: "5",
    traits: [
      {
        name: "Fire Form",
        desc: "The elemental can move through a space as narrow as 1 inch wide without squeezing. A creature that touches the elemental or hits it with a melee attack while within 5 ft. of it takes 5 (1d10) fire damage. In addition, the elemental can enter a hostile creature's space and stop there. The first time it enters a creature's space on a turn, that creature takes 5 (1d10) fire damage and catches fire; until someone takes an action to douse the fire, the creature takes 5 (1d10) fire damage at the start of each of its turns.",
        attack_bonus: 0,
        damage_dice: "5d10"
      },
      {
        name: "Illumination",
        desc: "The elemental sheds bright light in a 30-foot radius and dim light in an additional 30 ft..",
        attack_bonus: 0
      },
      {
        name: "Water Susceptibility",
        desc: "For every 5 ft. the elemental moves in water, or for every gallon of water splashed on it, it takes 1 cold damage.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The elemental makes two touch attacks.",
        attack_bonus: 0
      },
      {
        name: "Touch",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 10 (2d6 + 3) fire damage. If the target is a creature or a flammable object, it ignites. Until a creature takes an action to douse the fire, the target takes 5 (1d10) fire damage at the start of each of its turns.",
        attack_bonus: 6,
        damage_dice: "2d6",
        damage_bonus: 3
      }
    ]
  },
  {
    name: "Fire Giant",
    size: "Huge",
    type: "giant",
    subtype: "",
    alignment: "lawful evil",
    ac: 18,
    hp: 162,
    hit_dice: "13d12 + 77",
    speed: "30 ft.",
    stats: [25, 9, 23, 10, 14, 13],
    saves: [{ dexterity: 3 }, { constitution: 10 }, { charisma: 5 }],
    skillsaves: [{ athletics: 11 }, { perception: 6 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "fire",
    condition_immunities: "",
    senses: "passive Perception 16",
    languages: "Giant",
    cr: "9",
    actions: [
      {
        name: "Multiattack",
        desc: "The giant makes two greatsword attacks.",
        attack_bonus: 0
      },
      {
        name: "Greatsword",
        desc: "Melee Weapon Attack: +11 to hit, reach 10 ft., one target. Hit: 28 (6d6 + 7) slashing damage.",
        attack_bonus: 11,
        damage_dice: "6d6",
        damage_bonus: 7
      },
      {
        name: "Rock",
        desc: "Ranged Weapon Attack: +11 to hit, range 60/240 ft., one target. Hit: 29 (4d10 + 7) bludgeoning damage.",
        attack_bonus: 11,
        damage_dice: "4d10",
        damage_bonus: 7
      }
    ]
  },
  {
    name: "Flesh Golem",
    size: "Medium",
    type: "construct",
    subtype: "",
    alignment: "neutral",
    ac: 9,
    hp: 93,
    hit_dice: "11d8 + 43",
    speed: "30 ft.",
    stats: [19, 9, 18, 6, 10, 5],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "lightning, poison; bludgeoning, piercing, and slashing from nonmagical weapons that aren't adamantine",
    condition_immunities: "charmed, exhaustion, frightened, paralyzed, petrified, poisoned",
    senses: "darkvision 60 ft., passive Perception 10",
    languages: "understands the languages of its creator but can't speak",
    cr: "5",
    traits: [
      {
        name: "Berserk",
        desc: "Whenever the golem starts its turn with 40 hit points or fewer, roll a d6. On a 6, the golem goes berserk. On each of its turns while berserk, the golem attacks the nearest creature it can see. If no creature is near enough to move to and attack, the golem attacks an object, with preference for an object smaller than itself. Once the golem goes berserk, it continues to do so until it is destroyed or regains all its hit points.\\nThe golem's creator, if within 60 feet of the berserk golem, can try to calm it by speaking firmly and persuasively. The golem must be able to hear its creator, who must take an action to make a DC 15 Charisma (Persuasion) check. If the check succeeds, the golem ceases being berserk. If it takes damage while still at 40 hit points or fewer, the golem might go berserk again.",
        attack_bonus: 0
      },
      {
        name: "Aversion of Fire",
        desc: "If the golem takes fire damage, it has disadvantage on attack rolls and ability checks until the end of its next turn.",
        attack_bonus: 0
      },
      {
        name: "Immutable Form",
        desc: "The golem is immune to any spell or effect that would alter its form.",
        attack_bonus: 0
      },
      {
        name: "Lightning Absorption",
        desc: "Whenever the golem is subjected to lightning damage, it takes no damage and instead regains a number of hit points equal to the lightning damage dealt.",
        attack_bonus: 0
      },
      {
        name: "Magic Resistance",
        desc: "The golem has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      },
      {
        name: "Magic Weapons",
        desc: "The golem's weapon attacks are magical.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The golem makes two slam attacks.",
        attack_bonus: 0
      },
      {
        name: "Slam",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 13 (2d8 + 4) bludgeoning damage.",
        attack_bonus: 7,
        damage_dice: "2d8",
        damage_bonus: 4
      }
    ]
  },
  {
    name: "Flying Snake",
    size: "Tiny",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 14,
    hp: 5,
    hit_dice: "2d4",
    speed: "30 ft., fly 60 ft., swim 30 ft.",
    stats: [4, 18, 11, 2, 12, 5],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "blindsight 10 ft., passive Perception 11",
    languages: "",
    cr: "1/8",
    traits: [
      {
        name: "Flyby",
        desc: "The snake doesn't provoke opportunity attacks when it flies out of an enemy's reach.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 1 piercing damage plus 7 (3d4) poison damage.",
        attack_bonus: 6,
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Flying Sword",
    size: "Small",
    type: "construct",
    subtype: "",
    alignment: "unaligned",
    ac: 17,
    hp: 17,
    hit_dice: "5d6 + -1",
    speed: "0 ft., fly 50 ft. It can hover.",
    stats: [12, 15, 11, 1, 5, 1],
    saves: [{ dexterity: 4 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "poison, psychic",
    condition_immunities: "blinded, charmed, deafened, frightened, paralyzed, petrified, poisoned",
    senses: "blindsight 60 ft. (blind beyond this radius), passive Perception 7",
    languages: "",
    cr: "1/4",
    traits: [
      {
        name: "Antimagic Susceptibility",
        desc: "The sword is incapacitated while in the area of an antimagic field. If targeted by dispel magic, the sword must succeed on a Constitution saving throw against the caster's spell save DC or fall unconscious for 1 minute.",
        attack_bonus: 0
      },
      {
        name: "False Appearance",
        desc: "While the sword remains motionless and isn't flying, it is indistinguishable from a normal sword.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Longsword",
        desc: "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 5 (1d8 + 1) slashing damage.",
        attack_bonus: 3,
        damage_dice: "1d8",
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Frog",
    size: "Tiny",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 11,
    hp: 1,
    hit_dice: "1d4 + -2",
    speed: "20 ft., swim 20 ft.",
    stats: [1, 13, 8, 1, 8, 3],
    skillsaves: [{ perception: 1 }, { stealth: 3 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 30 ft., passive Perception 11",
    languages: "",
    cr: "0",
    traits: [
      {
        name: "Amphibious",
        desc: "The frog can breathe air and water",
        attack_bonus: 0
      },
      {
        name: "Standing Leap",
        desc: "The frog's long jump is up to 10 ft. and its high jump is up to 5 ft., with or without a running start.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Frost Giant",
    size: "Huge",
    type: "giant",
    subtype: "",
    alignment: "neutral evil",
    ac: 15,
    hp: 138,
    hit_dice: "12d12 + 60",
    speed: "40 ft.",
    stats: [23, 9, 21, 9, 10, 12],
    saves: [{ constitution: 8 }, { wisdom: 3 }, { charisma: 4 }],
    skillsaves: [{ athletics: 9 }, { perception: 3 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "cold",
    condition_immunities: "",
    senses: "passive Perception 13",
    languages: "Giant",
    cr: "8",
    actions: [
      {
        name: "Multiattack",
        desc: "The giant makes two greataxe attacks.",
        attack_bonus: 0
      },
      {
        name: "Greataxe",
        desc: "Melee Weapon Attack: +9 to hit, reach 10 ft., one target. Hit: 25 (3d12 + 6) slashing damage.",
        attack_bonus: 9,
        damage_dice: "3d12",
        damage_bonus: 6
      },
      {
        name: "Rock",
        desc: "Ranged Weapon Attack: +9 to hit, range 60/240 ft., one target. Hit: 28 (4d10 + 6) bludgeoning damage.",
        attack_bonus: 9,
        damage_dice: "4d10",
        damage_bonus: 6
      }
    ]
  },
  {
    name: "Gargoyle",
    size: "Medium",
    type: "elemental",
    subtype: "",
    alignment: "chaotic evil",
    ac: 15,
    hp: 52,
    hit_dice: "7d8 + 20",
    speed: "30 ft., fly 60 ft.",
    stats: [15, 11, 16, 6, 11, 7],
    damage_vulnerabilities: "",
    damage_resistances: "bludgeoning, piercing, and slashing from nonmagical weapons that aren't adamantine",
    damage_immunities: "poison",
    condition_immunities: "exhaustion, petrified, poisoned",
    senses: "darkvision 60 ft., passive Perception 10",
    languages: "Terran",
    cr: "2",
    traits: [
      {
        name: "False Appearance",
        desc: "While the gargoyle remains motion less, it is indistinguishable from an inanimate statue.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The gargoyle makes two attacks: one with its bite and one with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 5 (1d6 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d6",
        damage_bonus: 2
      },
      {
        name: "Claws",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 5 (1d6 + 2) slashing damage.",
        attack_bonus: 4,
        damage_dice: "1d6",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Gelatinous Cube",
    size: "Large",
    type: "ooze",
    subtype: "",
    alignment: "unaligned",
    ac: 6,
    hp: 84,
    hit_dice: "8d10 + 40",
    speed: "15 ft.",
    stats: [14, 3, 20, 1, 6, 1],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "blinded, charmed, deafened, exhaustion, frightened, prone",
    senses: "blindsight 60 ft. (blind beyond this radius), passive Perception 8",
    languages: "",
    cr: "2",
    traits: [
      {
        name: "Ooze Cube",
        desc: "The cube takes up its entire space. Other creatures can enter the space, but a creature that does so is subjected to the cube's Engulf and has disadvantage on the saving throw.\\nCreatures inside the cube can be seen but have total cover.\\nA creature within 5 feet of the cube can take an action to pull a creature or object out of the cube. Doing so requires a successful DC 12 Strength check, and the creature making the attempt takes 10 (3d6) acid damage.\\nThe cube can hold only one Large creature or up to four Medium or smaller creatures inside it at a time.",
        attack_bonus: 0
      },
      {
        name: "Transparent",
        desc: "Even when the cube is in plain sight, it takes a successful DC 15 Wisdom (Perception) check to spot a cube that has neither moved nor attacked. A creature that tries to enter the cube's space while unaware of the cube is surprised by the cube.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Pseudopod",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one creature. Hit: 10 (3d6) acid damage.",
        attack_bonus: 4,
        damage_dice: "3d6"
      },
      {
        name: "Engulf",
        desc: "The cube moves up to its speed. While doing so, it can enter Large or smaller creatures' spaces. Whenever the cube enters a creature's space, the creature must make a DC 12 Dexterity saving throw.\\nOn a successful save, the creature can choose to be pushed 5 feet back or to the side of the cube. A creature that chooses not to be pushed suffers the consequences of a failed saving throw.\\nOn a failed save, the cube enters the creature's space, and the creature takes 10 (3d6) acid damage and is engulfed. The engulfed creature can't breathe, is restrained, and takes 21 (6d6) acid damage at the start of each of the cube's turns. When the cube moves, the engulfed creature moves with it.\\nAn engulfed creature can try to escape by taking an action to make a DC 12 Strength check. On a success, the creature escapes and enters a space of its choice within 5 feet of the cube.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Ghast",
    size: "Medium",
    type: "undead",
    subtype: "",
    alignment: "chaotic evil",
    ac: 13,
    hp: 36,
    hit_dice: "8d8",
    speed: "30 ft.",
    stats: [16, 17, 10, 11, 10, 8],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "necrotic",
    condition_immunities: "poisoned",
    senses: "darkvision 60 ft., passive Perception 10",
    languages: "Common",
    cr: "2",
    traits: [
      {
        name: "Stench",
        desc: "Any creature that starts its turn within 5 ft. of the ghast must succeed on a DC 10 Constitution saving throw or be poisoned until the start of its next turn. On a successful saving throw, the creature is immune to the ghast's Stench for 24 hours.",
        attack_bonus: 0
      },
      {
        name: "Turn Defiance",
        desc: "The ghast and any ghouls within 30 ft. of it have advantage on saving throws against effects that turn undead.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +3 to hit, reach 5 ft., one creature. Hit: 12 (2d8 + 3) piercing damage.",
        attack_bonus: 3,
        damage_dice: "2d8",
        damage_bonus: 3
      },
      {
        name: "Claws",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 10 (2d6 + 3) slashing damage. If the target is a creature other than an undead, it must succeed on a DC 10 Constitution saving throw or be paralyzed for 1 minute. The target can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success.",
        attack_bonus: 5,
        damage_dice: "2d6",
        damage_bonus: 3
      }
    ]
  },
  {
    name: "Ghost",
    size: "Medium",
    type: "undead",
    subtype: "",
    alignment: "any alignment",
    ac: 11,
    hp: 45,
    hit_dice: "10d8",
    speed: "0 ft., fly 40 ft. It can hover.",
    stats: [7, 13, 10, 10, 12, 17],
    damage_vulnerabilities: "",
    damage_resistances: "acid, fire, lightning, thunder; bludgeoning, piercing, and slashing from nonmagical weapons",
    damage_immunities: "cold, necrotic, poison",
    condition_immunities: "charmed, exhaustion, frightened, grappled, paralyzed, petrified, poisoned, prone, restrained",
    senses: "darkvision 60 ft., passive Perception 11",
    languages: "any languages it knew in life",
    cr: "4",
    traits: [
      {
        name: "Ethereal Sight",
        desc: "The ghost can see 60 ft. into the Ethereal Plane when it is on the Material Plane, and vice versa.",
        attack_bonus: 0
      },
      {
        name: "Incorporeal Movement",
        desc: "The ghost can move through other creatures and objects as if they were difficult terrain. It takes 5 (1d10) force damage if it ends its turn inside an object.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Withering Touch",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 17 (4d6 + 3) necrotic damage.",
        attack_bonus: 5,
        damage_dice: "4d6",
        damage_bonus: 3
      },
      {
        name: "Etherealness",
        desc: "The ghost enters the Ethereal Plane from the Material Plane, or vice versa. It is visible on the Material Plane while it is in the Border Ethereal, and vice versa, yet it can't affect or be affected by anything on the other plane.",
        attack_bonus: 0
      },
      {
        name: "Horrifying Visage",
        desc: "Each non-undead creature within 60 ft. of the ghost that can see it must succeed on a DC 13 Wisdom saving throw or be frightened for 1 minute. If the save fails by 5 or more, the target also ages 1d4 _ 10 years. A frightened target can repeat the saving throw at the end of each of its turns, ending the frightened condition on itself on a success. If a target's saving throw is successful or the effect ends for it, the target is immune to this ghost's Horrifying Visage for the next 24 hours. The aging effect can be reversed with a greater restoration spell, but only within 24 hours of it occurring.",
        attack_bonus: 0
      },
      {
        name: "Possession (Recharge 6)",
        desc: "One humanoid that the ghost can see within 5 ft. of it must succeed on a DC 13 Charisma saving throw or be possessed by the ghost; the ghost then disappears, and the target is incapacitated and loses control of its body. The ghost now controls the body but doesn't deprive the target of awareness. The ghost can't be targeted by any attack, spell, or other effect, except ones that turn undead, and it retains its alignment, Intelligence, Wisdom, Charisma, and immunity to being charmed and frightened. It otherwise uses the possessed target's statistics, but doesn't gain access to the target's knowledge, class features, or proficiencies.\\nThe possession lasts until the body drops to 0 hit points, the ghost ends it as a bonus action, or the ghost is turned or forced out by an effect like the dispel evil and good spell. When the possession ends, the ghost reappears in an unoccupied space within 5 ft. of the body. The target is immune to this ghost's Possession for 24 hours after succeeding on the saving throw or after the possession ends.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Ghoul",
    size: "Medium",
    type: "undead",
    subtype: "",
    alignment: "chaotic evil",
    ac: 12,
    hp: 22,
    hit_dice: "5d8 + -1",
    speed: "30 ft.",
    stats: [13, 15, 10, 7, 10, 6],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "poisoned",
    senses: "darkvision 60 ft., passive Perception 10",
    languages: "Common",
    cr: "1",
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +2 to hit, reach 5 ft., one creature. Hit: 9 (2d6 + 2) piercing damage.",
        attack_bonus: 2,
        damage_dice: "2d6",
        damage_bonus: 2
      },
      {
        name: "Claws",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 7 (2d4 + 2) slashing damage. If the target is a creature other than an elf or undead, it must succeed on a DC 10 Constitution saving throw or be paralyzed for 1 minute. The target can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Giant Ape",
    size: "Huge",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 157,
    hit_dice: "15d12 + 59",
    speed: "40 ft., climb 40 ft.",
    stats: [23, 14, 18, 7, 12, 7],
    skillsaves: [{ athletics: 9 }, { perception: 4 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 14",
    languages: "",
    cr: "7",
    actions: [
      {
        name: "Multiattack",
        desc: "The ape makes two fist attacks.",
        attack_bonus: 0
      },
      {
        name: "Fist",
        desc: "Melee Weapon Attack: +9 to hit, reach 10 ft., one target. Hit: 22 (3d10 + 6) bludgeoning damage.",
        attack_bonus: 9,
        damage_dice: "3d10",
        damage_bonus: 6
      },
      {
        name: "Rock",
        desc: "Ranged Weapon Attack: +9 to hit, range 50/100 ft., one target. Hit: 30 (7d6 + 6) bludgeoning damage.",
        attack_bonus: 9,
        damage_dice: "7d6",
        damage_bonus: 6
      }
    ]
  },
  {
    name: "Giant Badger",
    size: "Medium",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 10,
    hp: 13,
    hit_dice: "2d8 + 4",
    speed: "30 ft., burrow 10 ft.",
    stats: [13, 10, 15, 2, 12, 5],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 30 ft., passive Perception 11",
    languages: "",
    cr: "1/4",
    traits: [
      {
        name: "Keen Smell",
        desc: "The badger has advantage on Wisdom (Perception) checks that rely on smell.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The badger makes two attacks: one with its bite and one with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 4 (1d6 + 1) piercing damage.",
        attack_bonus: 3,
        damage_dice: "1d6",
        damage_bonus: 1
      },
      {
        name: "Claws",
        desc: "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 6 (2d4 + 1) slashing damage.",
        attack_bonus: 3,
        damage_dice: "2d4",
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Giant Bat",
    size: "Large",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 13,
    hp: 22,
    hit_dice: "4d10",
    speed: "10 ft., fly 60 ft.",
    stats: [15, 16, 11, 2, 12, 6],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "blindsight 60 ft., passive Perception 11",
    languages: "",
    cr: "1/4",
    traits: [
      {
        name: "Echolocation",
        desc: "The bat can't use its blindsight while deafened.",
        attack_bonus: 0
      },
      {
        name: "Keen Hearing",
        desc: "The bat has advantage on Wisdom (Perception) checks that rely on hearing.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one creature. Hit: 5 (1d6 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d6",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Giant Boar",
    size: "Large",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 42,
    hit_dice: "5d10 + 14",
    speed: "40 ft.",
    stats: [17, 10, 16, 2, 7, 5],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 8",
    languages: "",
    cr: "2",
    traits: [
      {
        name: "Charge",
        desc: "If the boar moves at least 20 ft. straight toward a target and then hits it with a tusk attack on the same turn, the target takes an extra 7 (2d6) slashing damage. If the target is a creature, it must succeed on a DC 13 Strength saving throw or be knocked prone.",
        attack_bonus: 0,
        damage_dice: "2d6"
      },
      {
        name: "Relentless (Recharges after a Short or Long Rest)",
        desc: "If the boar takes 10 damage or less that would reduce it to 0 hit points, it is reduced to 1 hit point instead.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Tusk",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 10 (2d6 + 3) slashing damage.",
        attack_bonus: 5,
        damage_dice: "2d6",
        damage_bonus: 3
      }
    ]
  },
  {
    name: "Giant Centipede",
    size: "Small",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 13,
    hp: 4,
    hit_dice: "1d6",
    speed: "30 ft., climb 30 ft.",
    stats: [5, 14, 12, 1, 7, 3],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "blindsight 30 ft., passive Perception 8",
    languages: "",
    cr: "1/4",
    actions: [
      {
        name: "Bite",
        desc: "Bite. Melee Weapon Attack: +4 to hit, reach 5 ft., one creature. Hit: 4 (1d4 + 2) piercing damage, and the target must succeed on a DC 11 Constitution saving throw or take 10 (3d6) poison damage. If the poison damage reduces the target to 0 hit points, the target is stable but poisoned for 1 hour, even after regaining hit points, and is paralyzed while poisoned in this way.",
        attack_bonus: 4,
        damage_dice: "1d4",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Giant Constrictor Snake",
    size: "Huge",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 60,
    hit_dice: "8d12 + 8",
    speed: "30 ft., swim 30 ft.",
    stats: [19, 14, 12, 1, 10, 3],
    skillsaves: [{ perception: 2 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "blindsight 10 ft., passive Perception 12",
    languages: "",
    cr: "2",
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +6 to hit, reach 10 ft., one creature. Hit: 11 (2d6 + 4) piercing damage.",
        attack_bonus: 6,
        damage_dice: "2d6",
        damage_bonus: 4
      },
      {
        name: "Constrict",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one creature. Hit: 13 (2d8 + 4) bludgeoning damage, and the target is grappled (escape DC 16). Until this grapple ends, the creature is restrained, and the snake can't constrict another target.",
        attack_bonus: 6,
        damage_dice: "2d8",
        damage_bonus: 4
      }
    ]
  },
  {
    name: "Giant Crab",
    size: "Medium",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 15,
    hp: 13,
    hit_dice: "3d8 + -1",
    speed: "30 ft., swim 30 ft.",
    stats: [13, 15, 11, 1, 9, 3],
    skillsaves: [{ stealth: 4 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "blindsight 30 ft., passive Perception 9",
    languages: "",
    cr: "1/8",
    traits: [
      {
        name: "Amphibious",
        desc: "The crab can breathe air and water.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 4 (1d6 + 1) bludgeoning damage, and the target is grappled (escape DC 11). The crab has two claws, each of which can grapple only one target.",
        attack_bonus: 3,
        damage_dice: "1d6",
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Giant Crocodile",
    size: "Huge",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 14,
    hp: 85,
    hit_dice: "9d12 + 26",
    speed: "30 ft., swim 50 ft.",
    stats: [21, 9, 17, 2, 10, 7],
    skillsaves: [{ stealth: 5 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 10",
    languages: "",
    cr: "5",
    traits: [
      {
        name: "Hold Breath",
        desc: "The crocodile can hold its breath for 30 minutes.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The crocodile makes two attacks: one with its bite and one with its tail.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +8 to hit, reach 5 ft., one target. Hit: 21 (3d10 + 5) piercing damage, and the target is grappled (escape DC 16). Until this grapple ends, the target is restrained, and the crocodile can't bite another target.",
        attack_bonus: 8,
        damage_dice: "3d10",
        damage_bonus: 5
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +8 to hit, reach 10 ft., one target not grappled by the crocodile. Hit: 14 (2d8 + 5) bludgeoning damage. If the target is a creature, it must succeed on a DC 16 Strength saving throw or be knocked prone.",
        attack_bonus: 8,
        damage_dice: "2d8",
        damage_bonus: 5
      }
    ]
  },
  {
    name: "Giant Eagle",
    size: "Large",
    type: "beast",
    subtype: "",
    alignment: "neutral good",
    ac: 13,
    hp: 26,
    hit_dice: "4d10 + 4",
    speed: "10 ft., fly 80 ft.",
    stats: [16, 17, 13, 8, 14, 10],
    skillsaves: [{ perception: 4 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 14",
    languages: "Giant Eagle, understands Common and Auran but can't speak",
    cr: "1",
    traits: [
      {
        name: "Keen Sight",
        desc: "The eagle has advantage on Wisdom (Perception) checks that rely on sight.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The eagle makes two attacks: one with its beak and one with its talons.",
        attack_bonus: 0
      },
      {
        name: "Beak",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 6 (1d6 + 3) piercing damage.",
        attack_bonus: 5,
        damage_dice: "1d6",
        damage_bonus: 3
      },
      {
        name: "Talons",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 10 (2d6 + 3) slashing damage.",
        attack_bonus: 5,
        damage_dice: "2d6",
        damage_bonus: 3
      }
    ]
  },
  {
    name: "Giant Elk",
    size: "Huge",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 15,
    hp: 42,
    hit_dice: "5d12 + 9",
    speed: "60 ft.",
    stats: [19, 16, 14, 7, 14, 10],
    skillsaves: [{ perception: 4 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 14",
    languages: "Giant Elk, understands Common, Elvish, and Sylvan but can't speak",
    cr: "2",
    traits: [
      {
        name: "Charge",
        desc: "If the elk moves at least 20 ft. straight toward a target and then hits it with a ram attack on the same turn, the target takes an extra 7 (2d6) damage. If the target is a creature, it must succeed on a DC 14 Strength saving throw or be knocked prone.",
        attack_bonus: 0,
        damage_dice: "2d6"
      }
    ],
    actions: [
      {
        name: "Ram",
        desc: "Melee Weapon Attack: +6 to hit, reach 10 ft., one target. Hit: 11 (2d6 + 4) bludgeoning damage.",
        attack_bonus: 6,
        damage_dice: "2d6",
        damage_bonus: 4
      },
      {
        name: "Hooves",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one prone creature. Hit: 22 (4d8 + 4) bludgeoning damage.",
        attack_bonus: 6,
        damage_dice: "4d8",
        damage_bonus: 4
      }
    ]
  },
  {
    name: "Giant Fire Beetle",
    size: "Small",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 13,
    hp: 4,
    hit_dice: "1d6",
    speed: "30 ft.",
    stats: [8, 10, 12, 1, 7, 3],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "blindsight 30 ft., passive Perception 8",
    languages: "",
    cr: "0",
    traits: [
      {
        name: "Illumination",
        desc: "The beetle sheds bright light in a 10-foot radius and dim light for an additional 10 ft..",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +1 to hit, reach 5 ft., one target. Hit: 2 (1d6 \u2014 1) slashing damage.",
        attack_bonus: 1,
        damage_dice: "1d6",
        damage_bonus: -1
      }
    ]
  },
  {
    name: "Giant Frog",
    size: "Medium",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 11,
    hp: 18,
    hit_dice: "4d8",
    speed: "30 ft., swim 30 ft.",
    stats: [12, 13, 11, 2, 10, 3],
    skillsaves: [{ perception: 2 }, { stealth: 3 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 30 ft., passive Perception 12",
    languages: "",
    cr: "1/4",
    traits: [
      {
        name: "Amphibious",
        desc: "The frog can breathe air and water",
        attack_bonus: 0
      },
      {
        name: "Standing Leap",
        desc: "The frog's long jump is up to 20 ft. and its high jump is up to 10 ft., with or without a running start.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 4 (1d6 + 1) piercing damage, and the target is grappled (escape DC 11). Until this grapple ends, the target is restrained, and the frog can't bite another target.",
        attack_bonus: 3,
        damage_dice: "1d6",
        damage_bonus: 1
      },
      {
        name: "Swallow",
        desc: "The frog makes one bite attack against a Small or smaller target it is grappling. If the attack hits, the target is swallowed, and the grapple ends. The swallowed target is blinded and restrained, it has total cover against attacks and other effects outside the frog, and it takes 5 (2d4) acid damage at the start of each of the frog's turns. The frog can have only one target swallowed at a time. If the frog dies, a swallowed creature is no longer restrained by it and can escape from the corpse using 5 ft. of movement, exiting prone.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Giant Goat",
    size: "Large",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 11,
    hp: 19,
    hit_dice: "3d10 + 2",
    speed: "40 ft.",
    stats: [17, 11, 12, 3, 12, 6],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 11",
    languages: "",
    cr: "1/2",
    traits: [
      {
        name: "Charge",
        desc: "If the goat moves at least 20 ft. straight toward a target and then hits it with a ram attack on the same turn, the target takes an extra 5 (2d4) bludgeoning damage. If the target is a creature, it must succeed on a DC 13 Strength saving throw or be knocked prone.",
        attack_bonus: 0,
        damage_dice: "2d4"
      },
      {
        name: "Sure-Footed",
        desc: "The goat has advantage on Strength and Dexterity saving throws made against effects that would knock it prone.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Ram",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 8 (2d4 + 3) bludgeoning damage.",
        attack_bonus: 5,
        damage_dice: "2d4",
        damage_bonus: 3
      }
    ]
  },
  {
    name: "Giant Hyena",
    size: "Large",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 45,
    hit_dice: "6d10 + 12",
    speed: "50 ft.",
    stats: [16, 14, 14, 2, 12, 7],
    skillsaves: [{ perception: 3 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 13",
    languages: "",
    cr: "1",
    traits: [
      {
        name: "Rampage",
        desc: "When the hyena reduces a creature to 0 hit points with a melee attack on its turn, the hyena can take a bonus action to move up to half its speed and make a bite attack.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 10 (2d6 + 3) piercing damage.",
        attack_bonus: 5,
        damage_dice: "1d6",
        damage_bonus: 3
      }
    ]
  },
  {
    name: "Giant Lizard",
    size: "Large",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 19,
    hit_dice: "3d10 + 2",
    speed: "30 ft., climb 30 ft.",
    stats: [15, 12, 13, 2, 10, 5],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 30 ft., passive Perception 10",
    languages: "",
    cr: "1/4",
    traits: [
      {
        name: "Variant: Hold Breath",
        desc: "The lizard can hold its breath for 15 minutes. (A lizard that has this trait also has a swimming speed of 30 feet.)",
        attack_bonus: 0
      },
      {
        name: "Variant: Spider Climb",
        desc: "The lizard can climb difficult surfaces, including upside down on ceilings, without needing to make an ability check.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 6 (1d8 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d8",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Giant Octopus",
    size: "Large",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 11,
    hp: 52,
    hit_dice: "8d10 + 8",
    speed: "10 ft., swim 60 ft.",
    stats: [17, 13, 13, 4, 10, 4],
    skillsaves: [{ perception: 4 }, { stealth: 5 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 14",
    languages: "",
    cr: "1",
    traits: [
      {
        name: "Hold Breath",
        desc: "While out of water, the octopus can hold its breath for 1 hour.",
        attack_bonus: 0
      },
      {
        name: "Underwater Camouflage",
        desc: "The octopus has advantage on Dexterity (Stealth) checks made while underwater.",
        attack_bonus: 0
      },
      {
        name: "Water Breathing",
        desc: "The octopus can breathe only underwater.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Tentacles",
        desc: "Melee Weapon Attack: +5 to hit, reach 15 ft., one target. Hit: 10 (2d6 + 3) bludgeoning damage. If the target is a creature, it is grappled (escape DC 16). Until this grapple ends, the target is restrained, and the octopus can't use its tentacles on another target.",
        attack_bonus: 5,
        damage_dice: "2d6",
        damage_bonus: 3
      },
      {
        name: "Ink Cloud (Recharges after a Short or Long Rest)",
        desc: "A 20-foot-radius cloud of ink extends all around the octopus if it is underwater. The area is heavily obscured for 1 minute, although a significant current can disperse the ink. After releasing the ink, the octopus can use the Dash action as a bonus action.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Giant Owl",
    size: "Large",
    type: "beast",
    subtype: "",
    alignment: "neutral",
    ac: 12,
    hp: 19,
    hit_dice: "3d10 + 2",
    speed: "5 ft., fly 60 ft.",
    stats: [13, 15, 12, 8, 13, 10],
    skillsaves: [{ perception: 5 }, { stealth: 4 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 120 ft., passive Perception 15",
    languages: "Giant Owl, understands Common, Elvish, and Sylvan but can't speak",
    cr: "1/4",
    traits: [
      {
        name: "Flyby",
        desc: "The owl doesn't provoke opportunity attacks when it flies out of an enemy's reach.",
        attack_bonus: 0
      },
      {
        name: "Keen Hearing and Sight",
        desc: "The owl has advantage on Wisdom (Perception) checks that rely on hearing or sight.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Talons",
        desc: "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 8 (2d6 + 1) slashing damage.",
        attack_bonus: 3,
        damage_dice: "2d6",
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Giant Poisonous Snake",
    size: "Medium",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 14,
    hp: 11,
    hit_dice: "2d8 + 2",
    speed: "30 ft., swim 30 ft.",
    stats: [10, 18, 13, 2, 10, 3],
    skillsaves: [{ perception: 2 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "blindsight 10 ft., passive Perception 12",
    languages: "",
    cr: "1/4",
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +6 to hit, reach 10 ft., one target. Hit: 6 (1d4 + 4) piercing damage, and the target must make a DC 11 Constitution saving throw, taking 10 (3d6) poison damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 6,
        damage_dice: "1d4",
        damage_bonus: 4
      }
    ]
  },
  {
    name: "Giant Rat",
    size: "Small",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 7,
    hit_dice: "2d6",
    speed: "30 ft.",
    stats: [7, 15, 11, 2, 10, 4],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 10",
    languages: "",
    cr: "1/8",
    traits: [
      {
        name: "Keen Smell",
        desc: "The rat has advantage on Wisdom (Perception) checks that rely on smell.",
        attack_bonus: 0
      },
      {
        name: "Pack Tactics",
        desc: "The rat has advantage on an attack roll against a creature if at least one of the rat's allies is within 5 ft. of the creature and the ally isn't incapacitated.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 4 (1d4 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d4",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Giant Rat (Diseased)",
    size: "Small",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 7,
    hit_dice: "2d6",
    speed: "30 ft.",
    stats: [7, 15, 11, 2, 10, 4],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 10",
    languages: "",
    cr: "1/8",
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 3 (1d4 + 2) piercing damage. If the target is a creature, it must succeed on a DC 10 Constitution saving throw or contract a disease. Until the disease is cured, the target can't regain hit points except by magical means, and the target's hit point maximum decreases by 3 (1d6) every 24 hours. If the target's hit point maximum drops to 0 as a result of this disease, the target dies.",
        attack_bonus: 4,
        damage_dice: "1d4",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Giant Scorpion",
    size: "Large",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 15,
    hp: 52,
    hit_dice: "7d10 + 13",
    speed: "40 ft.",
    stats: [15, 13, 15, 1, 9, 3],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "blindsight 60 ft., passive Perception 9",
    languages: "",
    cr: "3",
    actions: [
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 6 (1d8 + 2) bludgeoning damage, and the target is grappled (escape DC 12). The scorpion has two claws, each of which can grapple only one target.",
        attack_bonus: 4,
        damage_dice: "1d8",
        damage_bonus: 2
      },
      {
        name: "Multiattack",
        desc: "The scorpion makes three attacks: two with its claws and one with its sting.",
        attack_bonus: 0
      },
      {
        name: "Sting",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one creature. Hit: 7 (1d10 + 2) piercing damage, and the target must make a DC 12 Constitution saving throw, taking 22 (4d10) poison damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 4,
        damage_dice: "1d10",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Giant Sea Horse",
    size: "Large",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 13,
    hp: 16,
    hit_dice: "3d10 + -1",
    speed: "0 ft., swim 40 ft.",
    stats: [12, 15, 11, 2, 12, 5],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 11",
    languages: "",
    cr: "1/2",
    traits: [
      {
        name: "Charge",
        desc: "If the sea horse moves at least 20 ft. straight toward a target and then hits it with a ram attack on the same turn, the target takes an extra 7 (2d6) bludgeoning damage. If the target is a creature, it must succeed on a DC 11 Strength saving throw or be knocked prone.",
        attack_bonus: 0,
        damage_dice: "2d6"
      },
      {
        name: "Water Breathing",
        desc: "The sea horse can breathe only underwater.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Ram",
        desc: "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 4 (1d6 + 1) bludgeoning damage.",
        attack_bonus: 3,
        damage_dice: "1d6",
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Giant Shark",
    size: "Huge",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 13,
    hp: 126,
    hit_dice: "11d12 + 54",
    speed: "swim 50 ft.",
    stats: [23, 11, 21, 1, 10, 5],
    skillsaves: [{ perception: 3 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "blindsight 60 ft., passive Perception 13",
    languages: "",
    cr: "5",
    traits: [
      {
        name: "Blood Frenzy",
        desc: "The shark has advantage on melee attack rolls against any creature that doesn't have all its hit points.",
        attack_bonus: 0
      },
      {
        name: "Water Breathing",
        desc: "The shark can breathe only underwater.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Weapon Attack: +9 to hit, reach 5 ft., one target. Hit: 22 (3d10 + 6) piercing damage.",
        attack_bonus: 9,
        damage_dice: "3d10",
        damage_bonus: 6
      }
    ]
  },
  {
    name: "Giant Spider",
    size: "Large",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 14,
    hp: 26,
    hit_dice: "4d10 + 4",
    speed: "30 ft., climb 30 ft.",
    stats: [14, 16, 12, 2, 11, 4],
    skillsaves: [{ stealth: 7 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "blindsight 10 ft., darkvision 60 ft., passive Perception 10",
    languages: "",
    cr: "1",
    traits: [
      {
        name: "Spider Climb",
        desc: "The spider can climb difficult surfaces, including upside down on ceilings, without needing to make an ability check.",
        attack_bonus: 0
      },
      {
        name: "Web Sense",
        desc: "While in contact with a web, the spider knows the exact location of any other creature in contact with the same web.",
        attack_bonus: 0
      },
      {
        name: "Web Walker",
        desc: "The spider ignores movement restrictions caused by webbing.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one creature. Hit: 7 (1d8 + 3) piercing damage, and the target must make a DC 11 Constitution saving throw, taking 9 (2d8) poison damage on a failed save, or half as much damage on a successful one. If the poison damage reduces the target to 0 hit points, the target is stable but poisoned for 1 hour, even after regaining hit points, and is paralyzed while poisoned in this way.",
        attack_bonus: 5,
        damage_dice: "1d8",
        damage_bonus: 3
      },
      {
        name: "Web (Recharge 5-6)",
        desc: "Ranged Weapon Attack: +5 to hit, range 30/60 ft., one creature. Hit: The target is restrained by webbing. As an action, the restrained target can make a DC 12 Strength check, bursting the webbing on a success. The webbing can also be attacked and destroyed (AC 10; hp 5; vulnerability to fire damage; immunity to bludgeoning, poison, and psychic damage).",
        attack_bonus: 5
      }
    ]
  },
  {
    name: "Giant Toad",
    size: "Large",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 11,
    hp: 39,
    hit_dice: "6d10 + 6",
    speed: "20 ft., swim 40 ft.",
    stats: [15, 13, 13, 2, 10, 3],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 30 ft., passive Perception 10",
    languages: "",
    cr: "1",
    traits: [
      {
        name: "Amphibious",
        desc: "The toad can breathe air and water",
        attack_bonus: 0
      },
      {
        name: "Standing Leap",
        desc: "The toad's long jump is up to 20 ft. and its high jump is up to 10 ft., with or without a running start.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 7 (1d10 + 2) piercing damage plus 5 (1d10) poison damage, and the target is grappled (escape DC 13). Until this grapple ends, the target is restrained, and the toad can't bite another target.",
        attack_bonus: 4,
        damage_dice: "1d10",
        damage_bonus: 2
      },
      {
        name: "Swallow",
        desc: "The toad makes one bite attack against a Medium or smaller target it is grappling. If the attack hits, the target is swallowed, and the grapple ends. The swallowed target is blinded and restrained, it has total cover against attacks and other effects outside the toad, and it takes 10 (3d6) acid damage at the start of each of the toad's turns. The toad can have only one target swallowed at a time.\\nIf the toad dies, a swallowed creature is no longer restrained by it and can escape from the corpse using 5 feet of movement, exiting prone.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Giant Vulture",
    size: "Large",
    type: "beast",
    subtype: "",
    alignment: "neutral evil",
    ac: 10,
    hp: 22,
    hit_dice: "3d10 + 5",
    speed: "10 ft., fly 60 ft.",
    stats: [15, 10, 15, 6, 12, 7],
    skillsaves: [{ perception: 3 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 13",
    languages: "understands Common but can't speak",
    cr: "1",
    traits: [
      {
        name: "Keen Sight and Smell",
        desc: "The vulture has advantage on Wisdom (Perception) checks that rely on sight or smell.",
        attack_bonus: 0
      },
      {
        name: "Pack Tactics",
        desc: "The vulture has advantage on an attack roll against a creature if at least one of the vulture's allies is within 5 ft. of the creature and the ally isn't incapacitated.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The vulture makes two attacks: one with its beak and one with its talons.",
        attack_bonus: 0
      },
      {
        name: "Beak",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 7 (2d4 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "2d4",
        damage_bonus: 2
      },
      {
        name: "Talons",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 9 (2d6 + 2) slashing damage.",
        attack_bonus: 4,
        damage_dice: "2d6",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Giant Wasp",
    size: "Medium",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 13,
    hit_dice: "3d8 + -1",
    speed: "10 ft., fly 50 ft., swim 50 ft.",
    stats: [10, 14, 10, 1, 10, 3],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 10",
    languages: "",
    cr: "1/2",
    actions: [
      {
        name: "Sting",
        desc: "Sting. Melee Weapon Attack: +4 to hit, reach 5 ft., one creature. Hit: 5 (1d6 + 2) piercing damage, and the target must make a DC 11 Constitution saving throw, taking 10 (3d6) poison damage on a failed save, or half as much damage on a successful one. If the poison damage reduces the target to 0 hit points, the target is stable but poisoned for 1 hour, even after regaining hit points, and is paralyzed while poisoned in this way.",
        attack_bonus: 4,
        damage_dice: "1d6",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Giant Weasel",
    size: "Medium",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 13,
    hp: 9,
    hit_dice: "2d8",
    speed: "40 ft.",
    stats: [11, 16, 10, 4, 12, 5],
    skillsaves: [{ perception: 3 }, { stealth: 5 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 13",
    languages: "",
    cr: "1/8",
    traits: [
      {
        name: "Keen Hearing and Smell",
        desc: "The weasel has advantage on Wisdom (Perception) checks that rely on hearing or smell.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 5 (1d4 + 3) piercing damage.",
        attack_bonus: 5,
        damage_dice: "1d4",
        damage_bonus: 3
      }
    ]
  },
  {
    name: "Giant Wolf Spider",
    size: "Medium",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 13,
    hp: 11,
    hit_dice: "2d8 + 2",
    speed: "40 ft., climb 40 ft.",
    stats: [12, 16, 13, 3, 12, 4],
    skillsaves: [{ perception: 3 }, { stealth: 7 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "blindsight 10 ft., darkvision 60 ft., passive Perception 13",
    languages: "",
    cr: "1/4",
    traits: [
      {
        name: "Spider Climb",
        desc: "The spider can climb difficult surfaces, including upside down on ceilings, without needing to make an ability check.",
        attack_bonus: 0
      },
      {
        name: "Web Sense",
        desc: "While in contact with a web, the spider knows the exact location of any other creature in contact with the same web.",
        attack_bonus: 0
      },
      {
        name: "Web Walker",
        desc: "The spider ignores movement restrictions caused by webbing.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Weapon Attack: +3 to hit, reach 5 ft., one creature. Hit: 4 (1d6 + 1) piercing damage, and the target must make a DC 11 Constitution saving throw, taking 7 (2d6) poison damage on a failed save, or half as much damage on a successful one. If the poison damage reduces the target to 0 hit points, the target is stable but poisoned for 1 hour, even after regaining hit points, and is paralyzed while poisoned in this way.",
        attack_bonus: 3,
        damage_dice: "1d6",
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Gibbering Mouther",
    size: "Medium",
    type: "aberration",
    subtype: "",
    alignment: "neutral",
    ac: 9,
    hp: 67,
    hit_dice: "9d8 + 26",
    speed: "10 ft., swim 10 ft.",
    stats: [10, 8, 16, 3, 10, 6],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "prone",
    senses: "darkvision 60 ft., passive Perception 10",
    languages: "",
    cr: "2",
    traits: [
      {
        name: "Aberrant Ground",
        desc: "The ground in a 10-foot radius around the mouther is doughlike difficult terrain. Each creature that starts its turn in that area must succeed on a DC 10 Strength saving throw or have its speed reduced to 0 until the start of its next turn.",
        attack_bonus: 0
      },
      {
        name: "Gibbering",
        desc: "The mouther babbles incoherently while it can see any creature and isn't incapacitated. Each creature that starts its turn within 20 feet of the mouther and can hear the gibbering must succeed on a DC 10 Wisdom saving throw. On a failure, the creature can't take reactions until the start of its next turn and rolls a d8 to determine what it does during its turn. On a 1 to 4, the creature does nothing. On a 5 or 6, the creature takes no action or bonus action and uses all its movement to move in a randomly determined direction. On a 7 or 8, the creature makes a melee attack against a randomly determined creature within its reach or does nothing if it can't make such an attack.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The gibbering mouther makes one bite attack and, if it can, uses its Blinding Spittle.",
        attack_bonus: 0
      },
      {
        name: "Bites",
        desc: "Melee Weapon Attack: +2 to hit, reach 5 ft., one creature. Hit: 17 (5d6) piercing damage. If the target is Medium or smaller, it must succeed on a DC 10 Strength saving throw or be knocked prone. If the target is killed by this damage, it is absorbed into the mouther.",
        attack_bonus: 2,
        damage_dice: "5d6"
      },
      {
        name: "Blinding Spittle (Recharge 5-6)",
        desc: "The mouther spits a chemical glob at a point it can see within 15 feet of it. The glob explodes in a blinding flash of light on impact. Each creature within 5 feet of the flash must succeed on a DC 13 Dexterity saving throw or be blinded until the end of the mouther's next turn.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Glabrezu",
    size: "Large",
    type: "fiend",
    subtype: "demon",
    alignment: "chaotic evil",
    ac: 17,
    hp: 157,
    hit_dice: "15d10 + 74",
    speed: "40 ft.",
    stats: [20, 15, 21, 19, 17, 16],
    saves: [
      { strength: 9 },
      { constitution: 9 },
      { wisdom: 7 },
      { charisma: 7 }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "cold, fire, lightning; bludgeoning, piercing, and slashing from nonmagical weapons",
    damage_immunities: "poison",
    condition_immunities: "poisoned",
    senses: "truesight 120 ft., passive Perception 13",
    languages: "Abyssal, telepathy 120 ft.",
    cr: "9",
    traits: [
      {
        name: "Innate Spellcasting",
        desc: "The glabrezu's spellcasting ability is Intelligence (spell save DC 16). The glabrezu can innately cast the following spells, requiring no material components:\\nAt will: darkness, detect magic, dispel magic\\n1/day each: confusion, fly, power word stun",
        attack_bonus: 0
      },
      {
        name: "Magic Resistance",
        desc: "The glabrezu has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The glabrezu makes four attacks: two with its pincers and two with its fists. Alternatively, it makes two attacks with its pincers and casts one spell.",
        attack_bonus: 0
      },
      {
        name: "Pincer",
        desc: "Melee Weapon Attack: +9 to hit, reach 10 ft., one target. Hit: 16 (2d10 + 5) bludgeoning damage. If the target is a Medium or smaller creature, it is grappled (escape DC 15). The glabrezu has two pincers, each of which can grapple only one target.",
        attack_bonus: 9,
        damage_dice: "2d10",
        damage_bonus: 5
      },
      {
        name: "Fist",
        desc: "Melee Weapon Attack: +9 to hit, reach 5 ft., one target. Hit: 7 (2d4 + 2) bludgeoning damage.",
        attack_bonus: 9,
        damage_dice: "2d4",
        damage_bonus: 2
      },
      {
        name: "Variant: Summon Demon (1/Day)",
        desc: "The demon chooses what to summon and attempts a magical summoning.\\nA glabrezu has a 30 percent chance of summoning 1d3 vrocks, 1d2 hezrous, or one glabrezu.\\nA summoned demon appears in an unoccupied space within 60 feet of its summoner, acts as an ally of its summoner, and can't summon other demons. It remains for 1 minute, until it or its summoner dies, or until its summoner dismisses it as an action.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Gladiator",
    size: "Medium",
    type: "humanoid",
    subtype: "any race",
    alignment: "any alignment",
    ac: 16,
    hp: 112,
    hit_dice: "15d8 + 44",
    speed: "30 ft.",
    stats: [18, 15, 16, 10, 12, 15],
    saves: [{ strength: 7 }, { dexterity: 5 }, { constitution: 6 }],
    skillsaves: [{ intimidation: 5 }, { athletics: 10 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 11",
    languages: "any one language (usually Common)",
    cr: "5",
    traits: [
      {
        name: "Brave",
        desc: "The gladiator has advantage on saving throws against being frightened.",
        attack_bonus: 0
      },
      {
        name: "Brute",
        desc: "A melee weapon deals one extra die of its damage when the gladiator hits with it (included in the attack).",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The gladiator makes three melee attacks or two ranged attacks.",
        attack_bonus: 0
      },
      {
        name: "Spear",
        desc: "Melee or Ranged Weapon Attack: +7 to hit, reach 5 ft. and range 20/60 ft., one target. Hit: 11 (2d6 + 4) piercing damage, or 13 (2d8 + 4) piercing damage if used with two hands to make a melee attack.",
        attack_bonus: 7,
        damage_dice: "2d6",
        damage_bonus: 4
      },
      {
        name: "Shield Bash",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one creature. Hit: 9 (2d4 + 4) bludgeoning damage. If the target is a Medium or smaller creature, it must succeed on a DC 15 Strength saving throw or be knocked prone.",
        attack_bonus: 7,
        damage_dice: "2d4",
        damage_bonus: 4
      }
    ],
    reactions: [
      {
        name: "Parry",
        desc: "The gladiator adds 3 to its AC against one melee attack that would hit it. To do so, the gladiator must see the attacker and be wielding a melee weapon.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Gnoll",
    size: "Medium",
    type: "humanoid",
    subtype: "gnoll",
    alignment: "chaotic evil",
    ac: 15,
    hp: 22,
    hit_dice: "5d8 + -1",
    speed: "30 ft.",
    stats: [14, 12, 11, 6, 10, 7],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 10",
    languages: "Gnoll",
    cr: "1/2",
    traits: [
      {
        name: "Rampage",
        desc: "When the gnoll reduces a creature to 0 hit points with a melee attack on its turn, the gnoll can take a bonus action to move up to half its speed and make a bite attack.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one creature. Hit: 4 (1d4 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d4",
        damage_bonus: 2
      },
      {
        name: "Spear",
        desc: "Melee or Ranged Weapon Attack: +4 to hit, reach 5 ft. or range 20/60 ft., one target. Hit: 5 (1d6 + 2) piercing damage, or 6 (1d8 + 2) piercing damage if used with two hands to make a melee attack.",
        attack_bonus: 4,
        damage_dice: "1d6",
        damage_bonus: 2
      },
      {
        name: "Longbow",
        desc: "Ranged Weapon Attack: +3 to hit, range 150/600 ft., one target. Hit: 5 (1d8 + 1) piercing damage.",
        attack_bonus: 3,
        damage_dice: "1d8",
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Goat",
    size: "Medium",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 10,
    hp: 4,
    hit_dice: "1d8 + -1",
    speed: "40 ft.",
    stats: [12, 10, 11, 2, 10, 5],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 10",
    languages: "",
    cr: "0",
    traits: [
      {
        name: "Charge",
        desc: "If the goat moves at least 20 ft. straight toward a target and then hits it with a ram attack on the same turn, the target takes an extra 2 (1d4) bludgeoning damage. If the target is a creature, it must succeed on a DC 10 Strength saving throw or be knocked prone.",
        attack_bonus: 0,
        damage_dice: "1d4"
      },
      {
        name: "Sure-Footed",
        desc: "The goat has advantage on Strength and Dexterity saving throws made against effects that would knock it prone.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Ram",
        desc: "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 3 (1d4 + 1) bludgeoning damage.",
        attack_bonus: 3,
        damage_dice: "1d4",
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Goblin",
    size: "Small",
    type: "humanoid",
    subtype: "goblinoid",
    alignment: "neutral evil",
    ac: 15,
    hp: 7,
    hit_dice: "2d6",
    speed: "30 ft.",
    stats: [8, 14, 10, 10, 8, 8],
    skillsaves: [{ stealth: 6 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 9",
    languages: "Common, Goblin",
    cr: "1/4",
    traits: [
      {
        name: "Nimble Escape",
        desc: "The goblin can take the Disengage or Hide action as a bonus action on each of its turns.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Scimitar",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 5 (1d6 + 2) slashing damage.",
        attack_bonus: 4,
        damage_dice: "1d6",
        damage_bonus: 2
      },
      {
        name: "Shortbow",
        desc: "Ranged Weapon Attack: +4 to hit, range 80/320 ft., one target. Hit: 5 (1d6 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d6",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Gold Dragon Wyrmling",
    size: "Medium",
    type: "dragon",
    subtype: "",
    alignment: "lawful good",
    ac: 17,
    hp: 60,
    hit_dice: "8d8 + 24",
    speed: "30 ft., fly 60 ft., swim 30 ft.",
    stats: [19, 14, 17, 14, 11, 16],
    saves: [
      { dexterity: 4 },
      { constitution: 5 },
      { wisdom: 2 },
      { charisma: 5 }
    ],
    skillsaves: [{ perception: 4 }, { stealth: 4 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "fire",
    condition_immunities: "",
    senses: "blindsight 10 ft., darkvision 60 ft., passive Perception 14",
    languages: "Draconic",
    cr: "3",
    traits: [
      {
        name: "Amphibious",
        desc: "The dragon can breathe air and water.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 9 (1d10 + 4) piercing damage.",
        attack_bonus: 6,
        damage_dice: "1d10",
        damage_bonus: 4
      },
      {
        name: "Breath Weapons (Recharge 5-6)",
        desc: "The dragon uses one of the following breath weapons.\\nFire Breath. The dragon exhales fire in a 15-foot cone. Each creature in that area must make a DC 13 Dexterity saving throw, taking 22 (4d10) fire damage on a failed save, or half as much damage on a successful one.\\nWeakening Breath. The dragon exhales gas in a 15-foot cone. Each creature in that area must succeed on a DC 13 Strength saving throw or have disadvantage on Strength-based attack rolls, Strength checks, and Strength saving throws for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success.",
        attack_bonus: 0,
        damage_dice: "4d10"
      }
    ]
  },
  {
    name: "Gorgon",
    size: "Large",
    type: "monstrosity",
    subtype: "",
    alignment: "unaligned",
    ac: 19,
    hp: 114,
    hit_dice: "12d10 + 48",
    speed: "40 ft.",
    stats: [20, 11, 18, 2, 12, 7],
    skillsaves: [{ perception: 4 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "petrified",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 14",
    languages: "",
    cr: "5",
    traits: [
      {
        name: "Trampling Charge",
        desc: "If the gorgon moves at least 20 feet straight toward a creature and then hits it with a gore attack on the same turn, that target must succeed on a DC 16 Strength saving throw or be knocked prone. If the target is prone, the gorgon can make one attack with its hooves against it as a bonus action.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Gore",
        desc: "Melee Weapon Attack: +8 to hit, reach 5 ft., one target. Hit: 18 (2d12 + 5) piercing damage.",
        attack_bonus: 8,
        damage_dice: "2d12",
        damage_bonus: 5
      },
      {
        name: "Hooves",
        desc: "Melee Weapon Attack: +8 to hit, reach 5 ft., one target. Hit: 16 (2d10 + 5) bludgeoning damage.",
        attack_bonus: 8,
        damage_dice: "2d10",
        damage_bonus: 5
      },
      {
        name: "Petrifying Breath (Recharge 5-6)",
        desc: "The gorgon exhales petrifying gas in a 30-foot cone. Each creature in that area must succeed on a DC 13 Constitution saving throw. On a failed save, a target begins to turn to stone and is restrained. The restrained target must repeat the saving throw at the end of its next turn. On a success, the effect ends on the target. On a failure, the target is petrified until freed by the greater restoration spell or other magic.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Gray Ooze",
    size: "Medium",
    type: "ooze",
    subtype: "",
    alignment: "unaligned",
    ac: 8,
    hp: 22,
    hit_dice: "3d8 + 8",
    speed: "10 ft., climb 10 ft.",
    stats: [12, 6, 16, 1, 6, 2],
    skillsaves: [{ stealth: 2 }],
    damage_vulnerabilities: "",
    damage_resistances: "acid, cold, fire",
    damage_immunities: "",
    condition_immunities: "blinded, charmed, deafened, exhaustion, frightened, prone",
    senses: "blindsight 60 ft. (blind beyond this radius), passive Perception 8",
    languages: "",
    cr: "1/2",
    traits: [
      {
        name: "Amorphous",
        desc: "The ooze can move through a space as narrow as 1 inch wide without squeezing.",
        attack_bonus: 0
      },
      {
        name: "Corrode Metal",
        desc: "Any nonmagical weapon made of metal that hits the ooze corrodes. After dealing damage, the weapon takes a permanent and cumulative -1 penalty to damage rolls. If its penalty drops to -5, the weapon is destroyed. Nonmagical ammunition made of metal that hits the ooze is destroyed after dealing damage.\\nThe ooze can eat through 2-inch-thick, nonmagical metal in 1 round.",
        attack_bonus: 0
      },
      {
        name: "False Appearance",
        desc: "While the ooze remains motionless, it is indistinguishable from an oily pool or wet rock.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Pseudopod",
        desc: "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 4 (1d6 + 1) bludgeoning damage plus 7 (2d6) acid damage, and if the target is wearing nonmagical metal armor, its armor is partly corroded and takes a permanent and cumulative -1 penalty to the AC it offers. The armor is destroyed if the penalty reduces its AC to 10.",
        attack_bonus: 3,
        damage_dice: "1d6",
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Green Dragon Wyrmling",
    size: "Medium",
    type: "dragon",
    subtype: "",
    alignment: "lawful evil",
    ac: 17,
    hp: 38,
    hit_dice: "7d8 + 6",
    speed: "30 ft., fly 60 ft., swim 30 ft.",
    stats: [15, 12, 13, 14, 11, 13],
    saves: [
      { dexterity: 3 },
      { constitution: 3 },
      { wisdom: 2 },
      { charisma: 3 }
    ],
    skillsaves: [{ perception: 4 }, { stealth: 3 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "poison",
    condition_immunities: "poisoned",
    senses: "blindsight 10 ft., darkvision 60 ft., passive Perception 14",
    languages: "Draconic",
    cr: "2",
    traits: [
      {
        name: "Amphibious",
        desc: "The dragon can breathe air and water.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 7 (1d10 + 2) piercing damage plus 3 (1d6) poison damage.",
        attack_bonus: 4,
        damage_dice: "1d10 + 1d6",
        damage_bonus: 3
      },
      {
        name: "Poison Breath (Recharge 5-6)",
        desc: "The dragon exhales poisonous gas in a 15-foot cone. Each creature in that area must make a DC 11 Constitution saving throw, taking 21 (6d6) poison damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "6d6"
      }
    ]
  },
  {
    name: "Green Hag",
    size: "Medium",
    type: "fey",
    subtype: "",
    alignment: "neutral evil",
    ac: 17,
    hp: 82,
    hit_dice: "11d8 + 32",
    speed: "30 ft.",
    stats: [18, 12, 16, 13, 14, 14],
    skillsaves: [
      { arcana: 3 },
      { deception: 4 },
      { perception: 4 },
      { stealth: 3 }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 14",
    languages: "Common, Draconic, Sylvan",
    cr: "3",
    traits: [
      {
        name: "Amphibious",
        desc: "The hag can breathe air and water.",
        attack_bonus: 0
      },
      {
        name: "Innate Spellcasting",
        desc: "The hag's innate spellcasting ability is Charisma (spell save DC 12). She can innately cast the following spells, requiring no material components:\\n\\nAt will: dancing lights, minor illusion, vicious mockery",
        attack_bonus: 0
      },
      {
        name: "Mimicry",
        desc: "The hag can mimic animal sounds and humanoid voices. A creature that hears the sounds can tell they are imitations with a successful DC 14 Wisdom (Insight) check.",
        attack_bonus: 0
      },
      {
        name: "Hag Coven",
        desc: "When hags must work together, they form covens, in spite of their selfish natures. A coven is made up of hags of any type, all of whom are equals within the group. However, each of the hags continues to desire more personal power.\\nA coven consists of three hags so that any arguments between two hags can be settled by the third. If more than three hags ever come together, as might happen if two covens come into conflict, the result is usually chaos.",
        attack_bonus: 0
      },
      {
        name: "Shared Spellcasting (Coven Only)",
        desc: "While all three members of a hag coven are within 30 feet of one another, they can each cast the following spells from the wizard's spell list but must share the spell slots among themselves:\\n\\n\u2022 1st level (4 slots): identify, ray of sickness\\n\u2022 2nd level (3 slots): hold person, locate object\\n\u2022 3rd level (3 slots): bestow curse, counterspell, lightning bolt\\n\u2022 4th level (3 slots): phantasmal killer, polymorph\\n\u2022 5th level (2 slots): contact other plane, scrying\\n\u2022 6th level (1 slot): eye bite\\n\\nFor casting these spells, each hag is a 12th-level spellcaster that uses Intelligence as her spellcasting ability. The spell save DC is 12+the hag's Intelligence modifier, and the spell attack bonus is 4+the hag's Intelligence modifier.",
        attack_bonus: 0
      },
      {
        name: "Hag Eye (Coven Only)",
        desc: "A hag coven can craft a magic item called a hag eye, which is made from a real eye coated in varnish and often fitted to a pendant or other wearable item. The hag eye is usually entrusted to a minion for safekeeping and transport. A hag in the coven can take an action to see what the hag eye sees if the hag eye is on the same plane of existence. A hag eye has AC 10, 1 hit point, and darkvision with a radius of 60 feet. If it is destroyed, each coven member takes 3d10 psychic damage and is blinded for 24 hours.\\nA hag coven can have only one hag eye at a time, and creating a new one requires all three members of the coven to perform a ritual. The ritual takes 1 hour, and the hags can't perform it while blinded. During the ritual, if the hags take any action other than performing the ritual, they must start over.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Claws",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 13 (2d8 + 4) slashing damage.",
        attack_bonus: 6,
        damage_dice: "2d8",
        damage_bonus: 4
      },
      {
        name: "Illusory Appearance",
        desc: "The hag covers herself and anything she is wearing or carrying with a magical illusion that makes her look like another creature of her general size and humanoid shape. The illusion ends if the hag takes a bonus action to end it or if she dies.\\nThe changes wrought by this effect fail to hold up to physical inspection. For example, the hag could appear to have smooth skin, but someone touching her would feel her rough flesh. Otherwise, a creature must take an action to visually inspect the illusion and succeed on a DC 20 Intelligence (Investigation) check to discern that the hag is disguised.",
        attack_bonus: 0
      },
      {
        name: "Invisible Passage",
        desc: "The hag magically turns invisible until she attacks or casts a spell, or until her concentration ends (as if concentrating on a spell). While invisible, she leaves no physical evidence of her passage, so she can be tracked only by magic. Any equipment she wears or carries is invisible with her.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Grick",
    size: "Medium",
    type: "monstrosity",
    subtype: "",
    alignment: "neutral",
    ac: 14,
    hp: 27,
    hit_dice: "6d8",
    speed: "30 ft., climb 30 ft.",
    stats: [14, 14, 11, 3, 14, 5],
    damage_vulnerabilities: "",
    damage_resistances: "bludgeoning, piercing, and slashing damage from nonmagical weapons",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 12",
    languages: "",
    cr: "2",
    traits: [
      {
        name: "Stone Camouflage",
        desc: "The grick has advantage on Dexterity (Stealth) checks made to hide in rocky terrain.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The grick makes one attack with its tentacles. If that attack hits, the grick can make one beak attack against the same target.",
        attack_bonus: 0
      },
      {
        name: "Tentacles",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 9 (2d6 + 2) slashing damage.",
        attack_bonus: 4,
        damage_dice: "2d6",
        damage_bonus: 2
      },
      {
        name: "Beak",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 5 (1d6 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d6",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Griffon",
    size: "Large",
    type: "monstrosity",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 59,
    hit_dice: "7d10 + 20",
    speed: "30 ft., fly 80 ft.",
    stats: [18, 15, 16, 2, 13, 8],
    skillsaves: [{ perception: 5 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 15",
    languages: "",
    cr: "2",
    traits: [
      {
        name: "Keen Sight",
        desc: "The griffon has advantage on Wisdom (Perception) checks that rely on sight.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The griffon makes two attacks: one with its beak and one with its claws.",
        attack_bonus: 0
      },
      {
        name: "Beak",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 8 (1d8 + 4) piercing damage.",
        attack_bonus: 6,
        damage_dice: "1d8",
        damage_bonus: 4
      },
      {
        name: "Claws",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 11 (2d6 + 4) slashing damage.",
        attack_bonus: 6,
        damage_dice: "2d6",
        damage_bonus: 4
      }
    ]
  },
  {
    name: "Grimlock",
    size: "Medium",
    type: "humanoid",
    subtype: "grimlock",
    alignment: "neutral evil",
    ac: 11,
    hp: 11,
    hit_dice: "2d8 + 2",
    speed: "30 ft.",
    stats: [16, 12, 12, 9, 8, 6],
    skillsaves: [{ athletics: 5 }, { perception: 3 }, { stealth: 3 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "blinded",
    condition_immunities: "",
    senses: "blindsight 30 ft. or 10 ft. while deafened (blind beyond this radius), passive Perception 13",
    languages: "Undercommon",
    cr: "1/4",
    traits: [
      {
        name: "Blind Senses",
        desc: "The grimlock can't use its blindsight while deafened and unable to smell.",
        attack_bonus: 0
      },
      {
        name: "Keen Hearing and Smell",
        desc: "The grimlock has advantage on Wisdom (Perception) checks that rely on hearing or smell.",
        attack_bonus: 0
      },
      {
        name: "Stone Camouflage",
        desc: "The grimlock has advantage on Dexterity (Stealth) checks made to hide in rocky terrain.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Spiked Bone Club",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 5 (1d4 + 3) bludgeoning damage plus 2 (1d4) piercing damage.",
        attack_bonus: 5,
        damage_dice: "1d4 + 1d4",
        damage_bonus: 5
      }
    ]
  },
  {
    name: "Guard",
    size: "Medium",
    type: "humanoid",
    subtype: "any race",
    alignment: "any alignment",
    ac: 16,
    hp: 11,
    hit_dice: "2d8 + 2",
    speed: "30 ft.",
    stats: [13, 12, 12, 10, 11, 10],
    skillsaves: [{ perception: 2 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 12",
    languages: "any one language (usually Common)",
    cr: "1/8",
    actions: [
      {
        name: "Spear",
        desc: "Melee or Ranged Weapon Attack: +3 to hit, reach 5 ft. or range 20/60 ft., one target. Hit: 4 (1d6 + 1) piercing damage or 5 (1d8 + 1) piercing damage if used with two hands to make a melee attack.",
        attack_bonus: 3,
        damage_dice: "1d6",
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Guardian Naga",
    size: "Large",
    type: "monstrosity",
    subtype: "",
    alignment: "lawful good",
    ac: 18,
    hp: 127,
    hit_dice: "15d10 + 44",
    speed: "40 ft.",
    stats: [19, 18, 16, 16, 19, 18],
    saves: [
      { dexterity: 8 },
      { constitution: 7 },
      { intelligence: 7 },
      { wisdom: 8 },
      { charisma: 8 }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "poison",
    condition_immunities: "charmed, poisoned",
    senses: "darkvision 60 ft., passive Perception 14",
    languages: "Celestial, Common",
    cr: "10",
    traits: [
      {
        name: "Rejuvenation",
        desc: "If it dies, the naga returns to life in 1d6 days and regains all its hit points. Only a wish spell can prevent this trait from functioning.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +8 to hit, reach 10 ft., one creature. Hit: 8 (1d8 + 4) piercing damage, and the target must make a DC 15 Constitution saving throw, taking 45 (10d8) poison damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 8,
        damage_dice: "1d8",
        damage_bonus: 4
      },
      {
        name: "Spit Poison",
        desc: "Ranged Weapon Attack: +8 to hit, range 15/30 ft., one creature. Hit: The target must make a DC 15 Constitution saving throw, taking 45 (10d8) poison damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 8,
        damage_dice: "10d8"
      }
    ],
    spells: [
      "The naga is an 11th-level spellcaster. Its spellcasting ability is Wisdom (spell save DC 16, +8 to hit with spell attacks), and it needs only verbal components to cast its spells. It has the following cleric spells prepared:",
      { "Cantrips (at will)": "mending, sacred flame, thaumaturgy" },
      { "1st level (4 slots)": "command, cure wounds, shield of faith" },
      { "2nd level (3 slots)": "calm emotions, hold person" },
      { "3rd level (3 slots)": "bestow curse, clairvoyance" },
      { "4th level (3 slots)": "banishment, freedom of movement" },
      { "5th level (2 slots)": "flame strike, geas" },
      { "6th level (1 slot)": "true seeing" }
    ]
  },
  {
    name: "Gynosphinx",
    size: "Large",
    type: "monstrosity",
    subtype: "",
    alignment: "lawful neutral",
    ac: 17,
    hp: 136,
    hit_dice: "16d10 + 48",
    speed: "40 ft., fly 60 ft.",
    stats: [18, 15, 16, 18, 18, 18],
    skillsaves: [
      { arcana: 12 },
      { history: 12 },
      { perception: 8 },
      { religion: 8 }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "bludgeoning, piercing, and slashing from nonmagical weapons",
    damage_immunities: "psychic",
    condition_immunities: "charmed, frightened",
    senses: "truesight 120 ft., passive Perception 18",
    languages: "Common, Sphinx",
    cr: "11",
    traits: [
      {
        name: "Inscrutable",
        desc: "The sphinx is immune to any effect that would sense its emotions or read its thoughts, as well as any divination spell that it refuses. Wisdom (Insight) checks made to ascertain the sphinx's intentions or sincerity have disadvantage.",
        attack_bonus: 0
      },
      {
        name: "Magic Weapons",
        desc: "The sphinx's weapon attacks are magical.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The sphinx makes two claw attacks.",
        attack_bonus: 0
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +9 to hit, reach 5 ft., one target. Hit: 13 (2d8 + 4) slashing damage.",
        attack_bonus: 9,
        damage_dice: "2d8",
        damage_bonus: 4
      }
    ],
    legendary_actions: [
      {
        name: "Claw Attack",
        desc: "The sphinx makes one claw attack.",
        attack_bonus: 0
      },
      {
        name: "Teleport (Costs 2 Actions)",
        desc: "The sphinx magically teleports, along with any equipment it is wearing or carrying, up to 120 feet to an unoccupied space it can see.",
        attack_bonus: 0
      },
      {
        name: "Cast a Spell (Costs 3 Actions)",
        desc: "The sphinx casts a spell from its list of prepared spells, using a spell slot as normal.",
        attack_bonus: 0
      }
    ],
    spells: [
      "The sphinx is a 9th-level spellcaster. Its spellcasting ability is Intelligence (spell save DC 16, +8 to hit with spell attacks). It requires no material components to cast its spells. The sphinx has the following wizard spells prepared:",
      {
        "Cantrips (at will)": "mage hand, minor illusion, prestidigitation"
      },
      { "1st level (4 slots)": "detect magic, identify, shield" },
      { "2nd level (3 slots)": "darkness, locate object, suggestion" },
      { "3rd level (3 slots)": "dispel magic, remove curse, tongues" },
      { "4th level (3 slots)": "banishment, greater invisibility" },
      { "5th level (1 slot)": "legend lore" }
    ]
  },
  {
    name: "Half-Red Dragon Veteran",
    size: "Medium",
    type: "humanoid",
    subtype: "human",
    alignment: "any alignment",
    ac: 18,
    hp: 65,
    hit_dice: "10d8 + 20",
    speed: "30 ft.",
    stats: [16, 13, 14, 10, 11, 10],
    damage_vulnerabilities: "",
    damage_resistances: "fire",
    damage_immunities: "",
    condition_immunities: "",
    senses: "blindsight 10 ft., darkvision 60 ft., passive Perception 12",
    languages: "Common, Draconic",
    cr: "5",
    actions: [
      {
        name: "Multiattack",
        desc: "The veteran makes two longsword attacks. If it has a shortsword drawn, it can also make a shortsword attack.",
        attack_bonus: 0
      },
      {
        name: "Longsword",
        desc: "Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 7 (1d8 + 3) slashing damage, or 8 (1d10 + 3) slashing damage if used with two hands.",
        attack_bonus: 5,
        damage_dice: "1d8",
        damage_bonus: 3
      },
      {
        name: "Shortsword",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 6 (1d6 + 3) piercing damage.",
        attack_bonus: 5,
        damage_dice: "1d6",
        damage_bonus: 3
      },
      {
        name: "Heavy Crossbow",
        desc: "Ranged Weapon Attack: +3 to hit, range 100/400 ft., one target. Hit: 6 (1d10 + 1) piercing damage.",
        attack_bonus: 3,
        damage_dice: "1d10",
        damage_bonus: 1
      },
      {
        name: "Fire Breath (Recharge 5-6)",
        desc: "The veteran exhales fire in a 15-foot cone. Each creature in that area must make a DC 15 Dexterity saving throw, taking 24 (7d6) fire damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "7d6"
      }
    ]
  },
  {
    name: "Harpy",
    size: "Medium",
    type: "monstrosity",
    subtype: "",
    alignment: "chaotic evil",
    ac: 11,
    hp: 38,
    hit_dice: "7d8 + 6",
    speed: "20 ft., fly 40 ft.",
    stats: [12, 13, 12, 7, 10, 13],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 10",
    languages: "Common",
    cr: "1",
    actions: [
      {
        name: "Multiattack",
        desc: "The harpy makes two attacks: one with its claws and one with its club.",
        attack_bonus: 0
      },
      {
        name: "Claws",
        desc: "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 6 (2d4 + 1) slashing damage.",
        attack_bonus: 3,
        damage_dice: "2d4",
        damage_bonus: 1
      },
      {
        name: "Club",
        desc: "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 3 (1d4 + 1) bludgeoning damage.",
        attack_bonus: 3,
        damage_dice: "1d4",
        damage_bonus: 1
      },
      {
        name: "Luring Song",
        desc: "The harpy sings a magical melody. Every humanoid and giant within 300 ft. of the harpy that can hear the song must succeed on a DC 11 Wisdom saving throw or be charmed until the song ends. The harpy must take a bonus action on its subsequent turns to continue singing. It can stop singing at any time. The song ends if the harpy is incapacitated.\\nWhile charmed by the harpy, a target is incapacitated and ignores the songs of other harpies. If the charmed target is more than 5 ft. away from the harpy, the must move on its turn toward the harpy by the most direct route. It doesn't avoid opportunity attacks, but before moving into damaging terrain, such as lava or a pit, and whenever it takes damage from a source other than the harpy, a target can repeat the saving throw. A creature can also repeat the saving throw at the end of each of its turns. If a creature's saving throw is successful, the effect ends on it.\\nA target that successfully saves is immune to this harpy's song for the next 24 hours.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Hawk",
    size: "Tiny",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 13,
    hp: 1,
    hit_dice: "1d4 + -2",
    speed: "10 ft., fly 60 ft.",
    stats: [5, 16, 8, 2, 14, 6],
    skillsaves: [{ perception: 4 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 14",
    languages: "",
    cr: "0",
    traits: [
      {
        name: "Keen Sight",
        desc: "The hawk has advantage on Wisdom (Perception) checks that rely on sight.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Talons",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 1 slashing damage.",
        attack_bonus: 5,
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Hell Hound",
    size: "Medium",
    type: "fiend",
    subtype: "",
    alignment: "lawful evil",
    ac: 15,
    hp: 45,
    hit_dice: "7d8 + 13",
    speed: "50 ft.",
    stats: [17, 12, 14, 6, 13, 6],
    skillsaves: [{ perception: 5 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "fire",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 15",
    languages: "understands Infernal but can't speak it",
    cr: "3",
    traits: [
      {
        name: "Keen Hearing and Smell",
        desc: "The hound has advantage on Wisdom (Perception) checks that rely on hearing or smell.",
        attack_bonus: 0
      },
      {
        name: "Pack Tactics",
        desc: "The hound has advantage on an attack roll against a creature if at least one of the hound's allies is within 5 ft. of the creature and the ally isn't incapacitated.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 7 (1d8 + 3) piercing damage plus 7 (2d6) fire damage.",
        attack_bonus: 5,
        damage_dice: "1d8",
        damage_bonus: 3
      },
      {
        name: "Fire Breath (Recharge 5-6)",
        desc: "The hound exhales fire in a 15-foot cone. Each creature in that area must make a DC 12 Dexterity saving throw, taking 21 (6d6) fire damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "6d6"
      }
    ]
  },
  {
    name: "Hezrou",
    size: "Large",
    type: "fiend",
    subtype: "demon",
    alignment: "chaotic evil",
    ac: 16,
    hp: 136,
    hit_dice: "13d10 + 64",
    speed: "30 ft.",
    stats: [19, 17, 20, 5, 12, 13],
    saves: [{ strength: 7 }, { constitution: 8 }, { wisdom: 4 }],
    damage_vulnerabilities: "",
    damage_resistances: "cold, fire, lightning; bludgeoning, piercing, and slashing from nonmagical weapons",
    damage_immunities: "poison",
    condition_immunities: "poisoned",
    senses: "darkvision 120 ft., passive Perception 11",
    languages: "Abyssal, telepathy 120 ft.",
    cr: "8",
    traits: [
      {
        name: "Magic Resistance",
        desc: "The hezrou has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      },
      {
        name: "Stench",
        desc: "Any creature that starts its turn within 10 feet of the hezrou must succeed on a DC 14 Constitution saving throw or be poisoned until the start of its next turn. On a successful saving throw, the creature is immune to the hezrou's stench for 24 hours.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The hezrou makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 15 (2d10 + 4) piercing damage.",
        attack_bonus: 7,
        damage_dice: "2d10",
        damage_bonus: 4
      },
      {
        name: "Claws",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 11 (2d6 + 4) slashing damage.",
        attack_bonus: 7,
        damage_dice: "2d6",
        damage_bonus: 4
      },
      {
        name: "Variant: Summon Demon (1/Day)",
        desc: "The demon chooses what to summon and attempts a magical summoning.\\nA hezrou has a 30 percent chance of summoning 2d6 dretches or one hezrou.\\nA summoned demon appears in an unoccupied space within 60 feet of its summoner, acts as an ally of its summoner, and can't summon other demons. It remains for 1 minute, until it or its summoner dies, or until its summoner dismisses it as an action.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Hill Giant",
    size: "Huge",
    type: "giant",
    subtype: "",
    alignment: "chaotic evil",
    ac: 13,
    hp: 105,
    hit_dice: "10d12 + 40",
    speed: "40 ft.",
    stats: [21, 8, 19, 5, 9, 6],
    skillsaves: [{ perception: 2 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 12",
    languages: "Giant",
    cr: "5",
    actions: [
      {
        name: "Multiattack",
        desc: "The giant makes two greatclub attacks.",
        attack_bonus: 0
      },
      {
        name: "Greatclub",
        desc: "Melee Weapon Attack: +8 to hit, reach 10 ft., one target. Hit: 18 (3d8 + 5) bludgeoning damage.",
        attack_bonus: 8,
        damage_dice: "3d8",
        damage_bonus: 5
      },
      {
        name: "Rock",
        desc: "Ranged Weapon Attack: +8 to hit, range 60/240 ft., one target. Hit: 21 (3d10 + 5) bludgeoning damage.",
        attack_bonus: 8,
        damage_dice: "3d10",
        damage_bonus: 5
      }
    ]
  },
  {
    name: "Hippogriff",
    size: "Large",
    type: "monstrosity",
    subtype: "",
    alignment: "unaligned",
    ac: 11,
    hp: 19,
    hit_dice: "3d10 + 2",
    speed: "40 ft, fly 60 ft.",
    stats: [17, 13, 13, 2, 12, 8],
    skillsaves: [{ perception: 5 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 15",
    languages: "",
    cr: "1",
    traits: [
      {
        name: "Keen Sight",
        desc: "The hippogriff has advantage on Wisdom (Perception) checks that rely on sight.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The hippogriff makes two attacks: one with its beak and one with its claws.",
        attack_bonus: 0
      },
      {
        name: "Beak",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 8 (1d10 + 3) piercing damage.",
        attack_bonus: 5,
        damage_dice: "1d10",
        damage_bonus: 3
      },
      {
        name: "Claws",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 10 (2d6 + 3) slashing damage.",
        attack_bonus: 5,
        damage_dice: "2d6",
        damage_bonus: 3
      }
    ]
  },
  {
    name: "Hobgoblin",
    size: "Medium",
    type: "humanoid",
    subtype: "goblinoid",
    alignment: "lawful evil",
    ac: 18,
    hp: 11,
    hit_dice: "2d8 + 2",
    speed: "30 ft.",
    stats: [13, 12, 12, 10, 10, 9],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 10",
    languages: "Common, Goblin",
    cr: "1/2",
    traits: [
      {
        name: "Martial Advantage",
        desc: "Once per turn, the hobgoblin can deal an extra 7 (2d6) damage to a creature it hits with a weapon attack if that creature is within 5 ft. of an ally of the hobgoblin that isn't incapacitated.",
        attack_bonus: 0,
        damage_dice: "2d6"
      }
    ],
    actions: [
      {
        name: "Longsword",
        desc: "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 5 (1d8 + 1) slashing damage, or 6 (1d10 + 1) slashing damage if used with two hands.",
        attack_bonus: 3,
        damage_dice: "1d8",
        damage_bonus: 1
      },
      {
        name: "Longbow",
        desc: "Ranged Weapon Attack: +3 to hit, range 150/600 ft., one target. Hit: 5 (1d8 + 1) piercing damage.",
        attack_bonus: 3,
        damage_dice: "1d8",
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Homunculus",
    size: "Tiny",
    type: "construct",
    subtype: "",
    alignment: "neutral",
    ac: 13,
    hp: 5,
    hit_dice: "2d4",
    speed: "20 ft., fly 40 ft.",
    stats: [4, 15, 11, 10, 10, 7],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "poison",
    condition_immunities: "charmed, poisoned",
    senses: "darkvision 60 ft., passive Perception 10",
    languages: "understands the languages of its creator but can't speak",
    cr: "0",
    traits: [
      {
        name: "Telepathic Bond",
        desc: "While the homunculus is on the same plane of existence as its master, it can magically convey what it senses to its master, and the two can communicate telepathically.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one creature. Hit: 1 piercing damage, and the target must succeed on a DC 10 Constitution saving throw or be poisoned for 1 minute. If the saving throw fails by 5 or more, the target is instead poisoned for 5 (1d10) minutes and unconscious while poisoned in this way.",
        attack_bonus: 4,
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Horned Devil",
    size: "Large",
    type: "fiend",
    subtype: "devil",
    alignment: "lawful evil",
    ac: 18,
    hp: 148,
    hit_dice: "17d10 + 54",
    speed: "20 ft., fly 60 ft.",
    stats: [22, 17, 21, 12, 16, 17],
    saves: [
      { strength: 10 },
      { dexterity: 7 },
      { wisdom: 7 },
      { charisma: 7 }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "cold; bludgeoning, piercing, and slashing from nonmagical weapons that aren't silvered",
    damage_immunities: "fire, poison",
    condition_immunities: "poisoned",
    senses: "darkvision 120 ft., passive Perception 13",
    languages: "Infernal, telepathy 120 ft.",
    cr: "11",
    traits: [
      {
        name: "Devil's Sight",
        desc: "Magical darkness doesn't impede the devil's darkvision.",
        attack_bonus: 0
      },
      {
        name: "Magic Resistance",
        desc: "The devil has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The devil makes three melee attacks: two with its fork and one with its tail. It can use Hurl Flame in place of any melee attack.",
        attack_bonus: 0
      },
      {
        name: "Fork",
        desc: "Melee Weapon Attack: +10 to hit, reach 10 ft., one target. Hit: 15 (2d8 + 6) piercing damage.",
        attack_bonus: 10,
        damage_dice: "2d8",
        damage_bonus: 6
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +10 to hit, reach 10 ft., one target. Hit: 10 (1d8 + 6) piercing damage. If the target is a creature other than an undead or a construct, it must succeed on a DC 17 Constitution saving throw or lose 10 (3d6) hit points at the start of each of its turns due to an infernal wound. Each time the devil hits the wounded target with this attack, the damage dealt by the wound increases by 10 (3d6). Any creature can take an action to stanch the wound with a successful DC 12 Wisdom (Medicine) check. The wound also closes if the target receives magical healing.",
        attack_bonus: 10,
        damage_dice: "1d8",
        damage_bonus: 6
      },
      {
        name: "Hurl Flame",
        desc: "Ranged Spell Attack: +7 to hit, range 150 ft., one target. Hit: 14 (4d6) fire damage. If the target is a flammable object that isn't being worn or carried, it also catches fire.",
        attack_bonus: 7,
        damage_dice: "4d6"
      }
    ]
  },
  {
    name: "Hunter Shark",
    size: "Large",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 45,
    hit_dice: "6d10 + 12",
    speed: "swim 40 ft.",
    stats: [18, 13, 15, 1, 10, 4],
    skillsaves: [{ perception: 2 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 30 ft., passive Perception 12",
    languages: "",
    cr: "2",
    traits: [
      {
        name: "Blood Frenzy",
        desc: "The shark has advantage on melee attack rolls against any creature that doesn't have all its hit points.",
        attack_bonus: 0
      },
      {
        name: "Water Breathing",
        desc: "The shark can breathe only underwater.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 13 (2d8 + 4) piercing damage.",
        attack_bonus: 6,
        damage_dice: "2d8",
        damage_bonus: 4
      }
    ]
  },
  {
    name: "Hydra",
    size: "Huge",
    type: "monstrosity",
    subtype: "",
    alignment: "unaligned",
    ac: 15,
    hp: 172,
    hit_dice: "15d12 + 74",
    speed: "30 ft., swim 30 ft.",
    stats: [20, 12, 20, 2, 10, 7],
    skillsaves: [{ perception: 6 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 16",
    languages: "",
    cr: "8",
    traits: [
      {
        name: "Hold Breath",
        desc: "The hydra can hold its breath for 1 hour.",
        attack_bonus: 0
      },
      {
        name: "Multiple Heads",
        desc: "The hydra has five heads. While it has more than one head, the hydra has advantage on saving throws against being blinded, charmed, deafened, frightened, stunned, and knocked unconscious.\\nWhenever the hydra takes 25 or more damage in a single turn, one of its heads dies. If all its heads die, the hydra dies.\\nAt the end of its turn, it grows two heads for each of its heads that died since its last turn, unless it has taken fire damage since its last turn. The hydra regains 10 hit points for each head regrown in this way.",
        attack_bonus: 0
      },
      {
        name: "Reactive Heads",
        desc: "For each head the hydra has beyond one, it gets an extra reaction that can be used only for opportunity attacks.",
        attack_bonus: 0
      },
      {
        name: "Wakeful",
        desc: "While the hydra sleeps, at least one of its heads is awake.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The hydra makes as many bite attacks as it has heads.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +8 to hit, reach 10 ft., one target. Hit: 10 (1d10 + 5) piercing damage.",
        attack_bonus: 8,
        damage_dice: "1d10",
        damage_bonus: 5
      }
    ]
  },
  {
    name: "Hyena",
    size: "Medium",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 11,
    hp: 5,
    hit_dice: "1d8",
    speed: "50 ft.",
    stats: [11, 13, 12, 2, 12, 5],
    skillsaves: [{ perception: 3 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 13",
    languages: "",
    cr: "0",
    traits: [
      {
        name: "Pack Tactics",
        desc: "The hyena has advantage on an attack roll against a creature if at least one of the hyena's allies is within 5 ft. of the creature and the ally isn't incapacitated.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Weapon Attack: +2 to hit, reach 5 ft., one target. Hit: 3 (1d6) piercing damage.",
        attack_bonus: 2,
        damage_dice: "1d6"
      }
    ]
  },
  {
    name: "Ice Devil",
    size: "Large",
    type: "fiend",
    subtype: "devil",
    alignment: "lawful evil",
    ac: 18,
    hp: 180,
    hit_dice: "19d10 + 75",
    speed: "40 ft.",
    stats: [21, 14, 18, 18, 15, 18],
    saves: [
      { dexterity: 7 },
      { constitution: 9 },
      { wisdom: 7 },
      { charisma: 9 }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "bludgeoning, piercing, and slashing from nonmagical weapons that aren't silvered",
    damage_immunities: "fire, poison",
    condition_immunities: "poisoned",
    senses: "blindsight 60 ft., darkvision 120 ft., passive Perception 12",
    languages: "Infernal, telepathy 120 ft.",
    cr: "14",
    traits: [
      {
        name: "Devil's Sight",
        desc: "Magical darkness doesn't impede the devil's darkvision.",
        attack_bonus: 0
      },
      {
        name: "Magic Resistance",
        desc: "The devil has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The devil makes three attacks: one with its bite, one with its claws, and one with its tail.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +10 to hit, reach 5 ft., one target. Hit: 12 (2d6 + 5) piercing damage plus 10 (3d6) cold damage.",
        attack_bonus: 10,
        damage_dice: "2d6 + 3d6",
        damage_bonus: 5
      },
      {
        name: "Claws",
        desc: "Melee Weapon Attack: +10 to hit, reach 5 ft., one target. Hit: 10 (2d4 + 5) slashing damage plus 10 (3d6) cold damage.",
        attack_bonus: 10,
        damage_dice: "2d4 + 3d6",
        damage_bonus: 5
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack:+10 to hit, reach 10 ft., one target. Hit: 12 (2d6 + 5) bludgeoning damage plus 10 (3d6) cold damage.",
        attack_bonus: 10,
        damage_dice: "2d6 + 3d6",
        damage_bonus: 5
      },
      {
        name: "Wall of Ice",
        desc: "The devil magically forms an opaque wall of ice on a solid surface it can see within 60 feet of it. The wall is 1 foot thick and up to 30 feet long and 10 feet high, or it's a hemispherical dome up to 20 feet in diameter.\\nWhen the wall appears, each creature in its space is pushed out of it by the shortest route. The creature chooses which side of the wall to end up on, unless the creature is incapacitated. The creature then makes a DC 17 Dexterity saving throw, taking 35 (10d6) cold damage on a failed save, or half as much damage on a successful one.\\nThe wall lasts for 1 minute or until the devil is incapacitated or dies. The wall can be damaged and breached; each 10-foot section has AC 5, 30 hit points, vulnerability to fire damage, and immunity to acid, cold, necrotic, poison, and psychic damage. If a section is destroyed, it leaves behind a sheet of frigid air in the space the wall occupied. Whenever a creature finishes moving through the frigid air on a turn, willingly or otherwise, the creature must make a DC 17 Constitution saving throw, taking 17 (5d6) cold damage on a failed save, or half as much damage on a successful one. The frigid air dissipates when the rest of the wall vanishes.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Ice Mephit",
    size: "Small",
    type: "elemental",
    subtype: "",
    alignment: "neutral evil",
    ac: 11,
    hp: 21,
    hit_dice: "6d6",
    speed: "30 ft., fly 30 ft.",
    stats: [7, 13, 10, 9, 11, 12],
    skillsaves: [{ perception: 2 }, { stealth: 3 }],
    damage_vulnerabilities: "bludgeoning, fire",
    damage_resistances: "",
    damage_immunities: "cold, poison",
    condition_immunities: "poisoned",
    senses: "darkvision 60 ft., passive Perception 12",
    languages: "Aquan, Auran",
    cr: "1/2",
    traits: [
      {
        name: "Death Burst",
        desc: "When the mephit dies, it explodes in a burst of jagged ice. Each creature within 5 ft. of it must make a DC 10 Dexterity saving throw, taking 4 (1d8) slashing damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "1d8"
      },
      {
        name: "False Appearance",
        desc: "While the mephit remains motionless, it is indistinguishable from an ordinary shard of ice.",
        attack_bonus: 0
      },
      {
        name: "Innate Spellcasting (1/Day)",
        desc: "The mephit can innately cast fog cloud, requiring no material components. Its innate spellcasting ability is Charisma.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Claws",
        desc: "Melee Weapon Attack: +3 to hit, reach 5 ft., one creature. Hit: 3 (1d4 + 1) slashing damage plus 2 (1d4) cold damage.",
        attack_bonus: 3,
        damage_dice: "1d4",
        damage_bonus: 1
      },
      {
        name: "Frost Breath (Recharge 6)",
        desc: "The mephit exhales a 15-foot cone of cold air. Each creature in that area must succeed on a DC 10 Dexterity saving throw, taking 5 (2d4) cold damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0
      },
      {
        name: "Variant: Summon Mephits (1/Day)",
        desc: "The mephit has a 25 percent chance of summoning 1d4 mephits of its kind. A summoned mephit appears in an unoccupied space within 60 feet of its summoner, acts as an ally of its summoner, and can't summon other mephits. It remains for 1 minute, until it or its summoner dies, or until its summoner dismisses it as an action.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Imp",
    size: "Tiny",
    type: "fiend",
    subtype: "devil",
    alignment: "lawful evil",
    ac: 13,
    hp: 10,
    hit_dice: "3d4 + 2",
    speed: "20 ft., fly 40 ft.",
    stats: [6, 17, 13, 11, 12, 14],
    skillsaves: [
      { deception: 4 },
      { insight: 3 },
      { persuasion: 4 },
      { stealth: 5 }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "cold; bludgeoning, piercing, and slashing from nonmagical/nonsilver weapons",
    damage_immunities: "fire, poison",
    condition_immunities: "poisoned",
    senses: "darkvision 120 ft., passive Perception 11",
    languages: "Infernal, Common",
    cr: "1",
    traits: [
      {
        name: "Shapechanger",
        desc: "The imp can use its action to polymorph into a beast form that resembles a rat (speed 20 ft.), a raven (20 ft., fly 60 ft.), or a spider (20 ft., climb 20 ft.), or back into its true form. Its statistics are the same in each form, except for the speed changes noted. Any equipment it is wearing or carrying isn't transformed. It reverts to its true form if it dies.",
        attack_bonus: 0
      },
      {
        name: "Devil's Sight",
        desc: "Magical darkness doesn't impede the imp's darkvision.",
        attack_bonus: 0
      },
      {
        name: "Magic Resistance",
        desc: "The imp has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      },
      {
        name: "Variant: Familiar",
        desc: "The imp can serve another creature as a familiar, forming a telepathic bond with its willing master. While the two are bonded, the master can sense what the quasit senses as long as they are within 1 mile of each other. While the imp is within 10 feet of its master, the master shares the quasit's Magic Resistance trait. At any time and for any reason, the imp can end its service as a familiar, ending the telepathic bond.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Sting (Bite in Beast Form)",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft ., one target. Hit: 5 (1d4 + 3) piercing damage, and the target must make on a DC 11 Constitution saving throw, taking 10 (3d6) poison damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 5,
        damage_dice: "1d4",
        damage_bonus: 3
      },
      {
        name: "Invisibility",
        desc: "The imp magically turns invisible until it attacks, or until its concentration ends (as if concentrating on a spell). Any equipment the imp wears or carries is invisible with it.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Invisible Stalker",
    size: "Medium",
    type: "elemental",
    subtype: "",
    alignment: "neutral",
    ac: 14,
    hp: 104,
    hit_dice: "16d8 + 32",
    speed: "50 ft., fly 50 ft. (hover)",
    stats: [16, 19, 14, 10, 15, 11],
    skillsaves: [{ perception: 8 }, { stealth: 10 }],
    damage_vulnerabilities: "",
    damage_resistances: "bludgeoning, piercing, and slashing from nonmagical weapons",
    damage_immunities: "poison",
    condition_immunities: "exhaustion, grappled, paralyzed, petrified, poisoned, prone, restrained, unconscious",
    senses: "darkvision 60 ft., passive Perception 18",
    languages: "Auran, understands Common but doesn't speak it",
    cr: "6",
    traits: [
      {
        name: "Invisibility",
        desc: "The stalker is invisible.",
        attack_bonus: 0
      },
      {
        name: "Faultless Tracker",
        desc: "The stalker is given a quarry by its summoner. The stalker knows the direction and distance to its quarry as long as the two of them are on the same plane of existence. The stalker also knows the location of its summoner.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The stalker makes two slam attacks.",
        attack_bonus: 0
      },
      {
        name: "Slam",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 10 (2d6 + 3) bludgeoning damage.",
        attack_bonus: 6,
        damage_dice: "2d6",
        damage_bonus: 3
      }
    ]
  },
  {
    name: "Iron Golem",
    size: "Large",
    type: "construct",
    subtype: "",
    alignment: "unaligned",
    ac: 20,
    hp: 210,
    hit_dice: "20d10 + 100",
    speed: "30 ft.",
    stats: [24, 9, 20, 3, 11, 1],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "fire, poison, psychic; bludgeoning, piercing, and slashing from nonmagical weapons that aren't adamantine",
    condition_immunities: "charmed, exhaustion, frightened, paralyzed, petrified, poisoned",
    senses: "darkvision 120 ft., passive Perception 10",
    languages: "understands the languages of its creator but can't speak",
    cr: "16",
    traits: [
      {
        name: "Fire Absorption",
        desc: "Whenever the golem is subjected to fire damage, it takes no damage and instead regains a number of hit points equal to the fire damage dealt.",
        attack_bonus: 0
      },
      {
        name: "Immutable Form",
        desc: "The golem is immune to any spell or effect that would alter its form.",
        attack_bonus: 0
      },
      {
        name: "Magic Resistance",
        desc: "The golem has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      },
      {
        name: "Magic Weapons",
        desc: "The golem's weapon attacks are magical.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The golem makes two melee attacks.",
        attack_bonus: 0
      },
      {
        name: "Slam",
        desc: "Melee Weapon Attack: +13 to hit, reach 5 ft., one target. Hit: 20 (3d8 + 7) bludgeoning damage.",
        attack_bonus: 13,
        damage_dice: "3d8",
        damage_bonus: 7
      },
      {
        name: "Sword",
        desc: "Melee Weapon Attack: +13 to hit, reach 10 ft., one target. Hit: 23 (3d10 + 7) slashing damage.",
        attack_bonus: 13,
        damage_dice: "3d10",
        damage_bonus: 7
      },
      {
        name: "Poison Breath (Recharge 5-6)",
        desc: "The golem exhales poisonous gas in a 15-foot cone. Each creature in that area must make a DC 19 Constitution saving throw, taking 45 (l0d8) poison damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "10d8"
      }
    ]
  },
  {
    name: "Jackal",
    size: "Small",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 3,
    hit_dice: "1d6 + -1",
    speed: "40 ft.",
    stats: [8, 15, 11, 3, 12, 6],
    skillsaves: [{ perception: 3 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 13",
    languages: "",
    cr: "0",
    traits: [
      {
        name: "Keen Hearing and Smell",
        desc: "The jackal has advantage on Wisdom (Perception) checks that rely on hearing or smell.",
        attack_bonus: 0
      },
      {
        name: "Pack Tactics",
        desc: "The jackal has advantage on an attack roll against a creature if at least one of the jackal's allies is within 5 ft. of the creature and the ally isn't incapacitated.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +1 to hit, reach 5 ft., one target. Hit: 1 (1d4 \u2014 1) piercing damage.",
        attack_bonus: 1,
        damage_dice: "1d4",
        damage_bonus: -1
      }
    ]
  },
  {
    name: "Killer Whale",
    size: "Huge",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 90,
    hit_dice: "12d12 + 12",
    speed: "swim 60 ft.",
    stats: [19, 10, 13, 3, 12, 7],
    skillsaves: [{ perception: 3 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "blindsight 120 ft., passive Perception 13",
    languages: "",
    cr: "3",
    traits: [
      {
        name: "Echolocation",
        desc: "The whale can't use its blindsight while deafened.",
        attack_bonus: 0
      },
      {
        name: "Hold Breath",
        desc: "The whale can hold its breath for 30 minutes",
        attack_bonus: 0
      },
      {
        name: "Keen Hearing",
        desc: "The whale has advantage on Wisdom (Perception) checks that rely on hearing.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 21 (5d6 + 4) piercing damage.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Knight",
    size: "Medium",
    type: "humanoid",
    subtype: "any race",
    alignment: "any alignment",
    ac: 18,
    hp: 52,
    hit_dice: "8d8 + 16",
    speed: "30 ft.",
    stats: [16, 11, 14, 11, 11, 15],
    saves: [{ constitution: 4 }, { wisdom: 2 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 10",
    languages: "any one language (usually Common)",
    cr: "3",
    traits: [
      {
        name: "Brave",
        desc: "The knight has advantage on saving throws against being frightened.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The knight makes two melee attacks.",
        attack_bonus: 0
      },
      {
        name: "Greatsword",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 10 (2d6 + 3) slashing damage.",
        attack_bonus: 5,
        damage_dice: "2d6",
        damage_bonus: 3
      },
      {
        name: "Heavy Crossbow",
        desc: "Ranged Weapon Attack: +2 to hit, range 100/400 ft., one target. Hit: 5 (1d10) piercing damage.",
        attack_bonus: 2,
        damage_dice: "1d10"
      },
      {
        name: "Leadership (Recharges after a Short or Long Rest)",
        desc: "For 1 minute, the knight can utter a special command or warning whenever a nonhostile creature that it can see within 30 ft. of it makes an attack roll or a saving throw. The creature can add a d4 to its roll provided it can hear and understand the knight. A creature can benefit from only one Leadership die at a time. This effect ends if the knight is incapacitated.",
        attack_bonus: 0
      }
    ],
    reactions: [
      {
        name: "Parry",
        desc: "The knight adds 2 to its AC against one melee attack that would hit it. To do so, the knight must see the attacker and be wielding a melee weapon.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Kobold",
    size: "Small",
    type: "humanoid",
    subtype: "kobold",
    alignment: "lawful evil",
    ac: 12,
    hp: 5,
    hit_dice: "2d6 + -2",
    speed: "30 ft.",
    stats: [7, 15, 9, 8, 7, 8],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 8",
    languages: "Common, Draconic",
    cr: "1/8",
    traits: [
      {
        name: "Sunlight Sensitivity",
        desc: "While in sunlight, the kobold has disadvantage on attack rolls, as well as on Wisdom (Perception) checks that rely on sight.",
        attack_bonus: 0
      },
      {
        name: "Pack Tactics",
        desc: "The kobold has advantage on an attack roll against a creature if at least one of the kobold's allies is within 5 ft. of the creature and the ally isn't incapacitated.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Dagger",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 4 (1d4 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d4",
        damage_bonus: 2
      },
      {
        name: "Sling",
        desc: "Ranged Weapon Attack: +4 to hit, range 30/120 ft., one target. Hit: 4 (1d4 + 2) bludgeoning damage.",
        attack_bonus: 4,
        damage_dice: "1d4",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Kraken",
    size: "Gargantuan",
    type: "monstrosity",
    subtype: "titan",
    alignment: "chaotic evil",
    ac: 18,
    hp: 472,
    hit_dice: "27d20 + 188",
    speed: "20 ft., swim 60 ft.",
    stats: [30, 11, 25, 22, 18, 20],
    saves: [
      { strength: 17 },
      { dexterity: 7 },
      { constitution: 14 },
      { intelligence: 13 },
      { wisdom: 11 }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "lightning; bludgeoning, piercing, and slashing from nonmagical weapons",
    condition_immunities: "frightened, paralyzed",
    senses: "truesight 120 ft., passive Perception 14",
    languages: "understands Abyssal, Celestial, Infernal, and Primordial but can't speak, telepathy 120 ft.",
    cr: "23",
    traits: [
      {
        name: "Amphibious",
        desc: "The kraken can breathe air and water.",
        attack_bonus: 0
      },
      {
        name: "Freedom of Movement",
        desc: "The kraken ignores difficult terrain, and magical effects can't reduce its speed or cause it to be restrained. It can spend 5 feet of movement to escape from nonmagical restraints or being grappled.",
        attack_bonus: 0
      },
      {
        name: "Siege Monster",
        desc: "The kraken deals double damage to objects and structures.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The kraken makes three tentacle attacks, each of which it can replace with one use of Fling.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 23 (3d8 + 10) piercing damage. If the target is a Large or smaller creature grappled by the kraken, that creature is swallowed, and the grapple ends. While swallowed, the creature is blinded and restrained, it has total cover against attacks and other effects outside the kraken, and it takes 42 (12d6) acid damage at the start of each of the kraken's turns. If the kraken takes 50 damage or more on a single turn from a creature inside it, the kraken must succeed on a DC 25 Constitution saving throw at the end of that turn or regurgitate all swallowed creatures, which fall prone in a space within 10 feet of the kraken. If the kraken dies, a swallowed creature is no longer restrained by it and can escape from the corpse using 15 feet of movement, exiting prone.",
        attack_bonus: 7,
        damage_dice: "3d8",
        damage_bonus: 10
      },
      {
        name: "Tentacle",
        desc: "Melee Weapon Attack: +7 to hit, reach 30 ft., one target. Hit: 20 (3d6 + 10) bludgeoning damage, and the target is grappled (escape DC 18). Until this grapple ends, the target is restrained. The kraken has ten tentacles, each of which can grapple one target.",
        attack_bonus: 7,
        damage_dice: "3d6",
        damage_bonus: 10
      },
      {
        name: "Fling",
        desc: "One Large or smaller object held or creature grappled by the kraken is thrown up to 60 feet in a random direction and knocked prone. If a thrown target strikes a solid surface, the target takes 3 (1d6) bludgeoning damage for every 10 feet it was thrown. If the target is thrown at another creature, that creature must succeed on a DC 18 Dexterity saving throw or take the same damage and be knocked prone.",
        attack_bonus: 0
      },
      {
        name: "Lightning Storm",
        desc: "The kraken magically creates three bolts of lightning, each of which can strike a target the kraken can see within 120 feet of it. A target must make a DC 23 Dexterity saving throw, taking 22 (4d10) lightning damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "4d10"
      }
    ],
    legendary_actions: [
      {
        name: "Tentacle Attack or Fling",
        desc: "The kraken makes one tentacle attack or uses its Fling.",
        attack_bonus: 0
      },
      {
        name: "Lightning Storm (Costs 2 Actions)",
        desc: "The kraken uses Lightning Storm.",
        attack_bonus: 0
      },
      {
        name: "Ink Cloud (Costs 3 Actions)",
        desc: "While underwater, the kraken expels an ink cloud in a 60-foot radius. The cloud spreads around corners, and that area is heavily obscured to creatures other than the kraken. Each creature other than the kraken that ends its turn there must succeed on a DC 23 Constitution saving throw, taking 16 (3d10) poison damage on a failed save, or half as much damage on a successful one. A strong current disperses the cloud, which otherwise disappears at the end of the kraken's next turn.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Lamia",
    size: "Large",
    type: "monstrosity",
    subtype: "",
    alignment: "chaotic evil",
    ac: 13,
    hp: 97,
    hit_dice: "13d10 + 25",
    speed: "30 ft.",
    stats: [16, 13, 15, 14, 15, 16],
    skillsaves: [{ deception: 7 }, { insight: 4 }, { stealth: 3 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 12",
    languages: "Abyssal, Common",
    cr: "4",
    traits: [
      {
        name: "Innate Spellcasting",
        desc: "The lamia's innate spellcasting ability is Charisma (spell save DC 13). It can innately cast the following spells, requiring no material components. At will: disguise self (any humanoid form), major image 3/day each: charm person, mirror image, scrying, suggestion 1/day: geas",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The lamia makes two attacks: one with its claws and one with its dagger or Intoxicating Touch.",
        attack_bonus: 0
      },
      {
        name: "Claws",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 14 (2d10 + 3) slashing damage.",
        attack_bonus: 5,
        damage_dice: "2d10",
        damage_bonus: 3
      },
      {
        name: "Dagger",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 5 (1d4 + 3) piercing damage.",
        attack_bonus: 5,
        damage_dice: "1d4",
        damage_bonus: 3
      },
      {
        name: "Intoxicating Touch",
        desc: "Melee Spell Attack: +5 to hit, reach 5 ft., one creature. Hit: The target is magically cursed for 1 hour. Until the curse ends, the target has disadvantage on Wisdom saving throws and all ability checks.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Lemure",
    size: "Medium",
    type: "fiend",
    subtype: "devil",
    alignment: "lawful evil",
    ac: 7,
    hp: 13,
    hit_dice: "3d8 + -1",
    speed: "15 ft.",
    stats: [10, 5, 11, 1, 11, 3],
    damage_vulnerabilities: "",
    damage_resistances: "cold",
    damage_immunities: "fire, poison",
    condition_immunities: "charmed, frightened, poisoned",
    senses: "darkvision 120 ft., passive Perception 10",
    languages: "understands infernal but can't speak",
    cr: "0",
    traits: [
      {
        name: "Devil's Sight",
        desc: "Magical darkness doesn't impede the lemure's darkvision.",
        attack_bonus: 0
      },
      {
        name: "Hellish Rejuvenation",
        desc: "A lemure that dies in the Nine Hells comes back to life with all its hit points in 1d10 days unless it is killed by a good-aligned creature with a bless spell cast on that creature or its remains are sprinkled with holy water.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Fist",
        desc: "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 2 (1d4) bludgeoning damage",
        attack_bonus: 3,
        damage_dice: "1d4"
      }
    ]
  },
  {
    name: "Lich",
    size: "Medium",
    type: "undead",
    subtype: "",
    alignment: "any evil alignment",
    ac: 17,
    hp: 135,
    hit_dice: "18d8 + 54",
    speed: "30 ft.",
    stats: [11, 16, 16, 20, 14, 16],
    saves: [{ constitution: 10 }, { intelligence: 12 }, { wisdom: 9 }],
    skillsaves: [
      { arcana: 18 },
      { history: 12 },
      { insight: 9 },
      { perception: 9 }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "cold, lightning, necrotic",
    damage_immunities: "poison; bludgeoning, piercing, and slashing from nonmagical weapons",
    condition_immunities: "charmed, exhaustion, frightened, paralyzed, poisoned",
    senses: "truesight 120 ft., passive Perception 19",
    languages: "Common plus up to five other languages",
    cr: "21",
    traits: [
      {
        name: "Legendary Resistance (3/Day)",
        desc: "If the lich fails a saving throw, it can choose to succeed instead.",
        attack_bonus: 0
      },
      {
        name: "Rejuvenation",
        desc: "If it has a phylactery, a destroyed lich gains a new body in 1d10 days, regaining all its hit points and becoming active again. The new body appears within 5 feet of the phylactery.",
        attack_bonus: 0
      },
      {
        name: "Turn Resistance",
        desc: "The lich has advantage on saving throws against any effect that turns undead.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Paralyzing Touch",
        desc: "Melee Spell Attack: +12 to hit, reach 5 ft., one creature. Hit: 10 (3d6) cold damage. The target must succeed on a DC 18 Constitution saving throw or be paralyzed for 1 minute. The target can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success.",
        attack_bonus: 12,
        damage_dice: "3d6"
      }
    ],
    legendary_actions: [
      {
        name: "Cantrip",
        desc: "The lich casts a cantrip.",
        attack_bonus: 0
      },
      {
        name: "Paralyzing Touch (Costs 2 Actions)",
        desc: "The lich uses its Paralyzing Touch.",
        attack_bonus: 0
      },
      {
        name: "Frightening Gaze (Costs 2 Actions)",
        desc: "The lich fixes its gaze on one creature it can see within 10 feet of it. The target must succeed on a DC 18 Wisdom saving throw against this magic or become frightened for 1 minute. The frightened target can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a target's saving throw is successful or the effect ends for it, the target is immune to the lich's gaze for the next 24 hours.",
        attack_bonus: 0
      },
      {
        name: "Disrupt Life (Costs 3 Actions)",
        desc: "Each living creature within 20 feet of the lich must make a DC 18 Constitution saving throw against this magic, taking 21 (6d6) necrotic damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "6d6"
      }
    ],
    spells: [
      "The lich is an 18th-level spellcaster. Its spellcasting ability is Intelligence (spell save DC 20, +12 to hit with spell attacks). The lich has the following wizard spells prepared:",
      {
        "Cantrips (at will)": "mage hand, prestidigitation, ray of frost"
      },
      {
        "1st level (4 slots)": "detect magic, magic missile, shield, thunderwave"
      },
      {
        "2nd level (3 slots)": "detect thoughts, invisibility, Melf's acid arrow, mirror image"
      },
      {
        "3rd level (3 slots)": "animate dead, counterspell, dispel magic, fireball"
      },
      { "4th level (3 slots)": "blight, dimension door" },
      { "5th level (3 slots)": "cloudkill, scrying" },
      { "6th level (1 slot)": "disintegrate, globe of invulnerability" },
      { "7th level (1 slot)": "finger of death, plane shift" },
      { "8th level (1 slot)": "dominate monster, power word stun" },
      { "9th level (1 slot)": "power word kill" }
    ]
  },
  {
    name: "Lion",
    size: "Large",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 26,
    hit_dice: "4d10 + 4",
    speed: "50 ft.",
    stats: [17, 15, 13, 3, 12, 8],
    skillsaves: [{ perception: 3 }, { stealth: 6 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 13",
    languages: "",
    cr: "1",
    traits: [
      {
        name: "Keen Smell",
        desc: "The lion has advantage on Wisdom (Perception) checks that rely on smell.",
        attack_bonus: 0
      },
      {
        name: "Pack Tactics",
        desc: "The lion has advantage on an attack roll against a creature if at least one of the lion's allies is within 5 ft. of the creature and the ally isn't incapacitated.",
        attack_bonus: 0
      },
      {
        name: "Pounce",
        desc: "If the lion moves at least 20 ft. straight toward a creature and then hits it with a claw attack on the same turn, that target must succeed on a DC 13 Strength saving throw or be knocked prone. If the target is prone, the lion can make one bite attack against it as a bonus action.",
        attack_bonus: 0
      },
      {
        name: "Running Leap",
        desc: "With a 10-foot running start, the lion can long jump up to 25 ft..",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 7 (1d8 + 3) piercing damage.",
        attack_bonus: 5,
        damage_dice: "1d8",
        damage_bonus: 3
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 6 (1d6 + 3) slashing damage.",
        attack_bonus: 5,
        damage_dice: "1d6",
        damage_bonus: 3
      }
    ]
  },
  {
    name: "Lizard",
    size: "Tiny",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 10,
    hp: 2,
    hit_dice: "1d4 + -1",
    speed: "20 ft., climb 20 ft.",
    stats: [2, 11, 10, 1, 8, 3],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 30 ft., passive Perception 9",
    languages: "",
    cr: "0",
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +0 to hit, reach 5 ft., one target. Hit: 1 piercing damage.",
        attack_bonus: 0,
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Lizardfolk",
    size: "Medium",
    type: "humanoid",
    subtype: "lizardfolk",
    alignment: "neutral",
    ac: 15,
    hp: 22,
    hit_dice: "4d8 + 4",
    speed: "30 ft., swim 30 ft.",
    stats: [15, 10, 13, 7, 12, 7],
    skillsaves: [{ perception: 3 }, { stealth: 4 }, { survival: 5 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 13",
    languages: "Draconic",
    cr: "1/2",
    traits: [
      {
        name: "Hold Breath",
        desc: "The lizardfolk can hold its breath for 15 minutes.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The lizardfolk makes two melee attacks, each one with a different weapon.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 5 (1d6 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d6",
        damage_bonus: 2
      },
      {
        name: "Heavy Club",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 5 (1d6 + 2) bludgeoning damage.",
        attack_bonus: 4,
        damage_dice: "1d6",
        damage_bonus: 2
      },
      {
        name: "Javelin",
        desc: "Melee or Ranged Weapon Attack: +4 to hit, reach 5 ft. or range 30/120 ft., one target. Hit: 5 (1d6 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d6",
        damage_bonus: 2
      },
      {
        name: "Spiked Shield",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 5 (1d6 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d6",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Mage",
    size: "Medium",
    type: "humanoid",
    subtype: "any race",
    alignment: "any alignment",
    ac: 12,
    hp: 40,
    hit_dice: "9d8 + -1",
    speed: "30 ft.",
    stats: [9, 14, 11, 17, 12, 11],
    saves: [{ intelligence: 6 }, { wisdom: 4 }],
    skillsaves: [{ arcana: 6 }, { history: 6 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 11",
    languages: "any four languages",
    cr: "6",
    traits: [],
    actions: [
      {
        name: "Dagger",
        desc: "Melee or Ranged Weapon Attack: +5 to hit, reach 5 ft. or range 20/60 ft., one target. Hit: 4 (1d4 + 2) piercing damage.",
        attack_bonus: 5,
        damage_dice: "1d4",
        damage_bonus: 2
      }
    ],
    spells: [
      "The mage is a 9th-level spellcaster. Its spellcasting ability is Intelligence (spell save DC 14, +6 to hit with spell attacks). The mage has the following wizard spells prepared:",
      {
        "Cantrips (at will)": "fire bolt, light, mage hand, prestidigitation"
      },
      {
        "1st level (4 slots)": "detect magic, mage armor, magic missile, shield"
      },
      { "2nd level (3 slots)": "misty step, suggestion" },
      { "3rd level (3 slots)": "counterspell, fireball, fly" },
      { "4th level (3 slots)": "greater invisibility, ice storm" },
      { "5th level (1 slot)": "cone of cold" }
    ]
  },
  {
    name: "Magma Mephit",
    size: "Small",
    type: "elemental",
    subtype: "",
    alignment: "neutral evil",
    ac: 11,
    hp: 22,
    hit_dice: "5d6 + 4",
    speed: "30 ft., fly 30 ft.",
    stats: [8, 12, 12, 7, 10, 10],
    skillsaves: [{ stealth: 3 }],
    damage_vulnerabilities: "cold",
    damage_resistances: "",
    damage_immunities: "fire, poison",
    condition_immunities: "poisoned",
    senses: "darkvision 60 ft., passive Perception 10",
    languages: "Ignan, Terran",
    cr: "1/2",
    traits: [
      {
        name: "Death Burst",
        desc: "When the mephit dies, it explodes in a burst of lava. Each creature within 5 ft. of it must make a DC 11 Dexterity saving throw, taking 7 (2d6) fire damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "2d6"
      },
      {
        name: "False Appearance",
        desc: "While the mephit remains motionless, it is indistinguishable from an ordinary mound of magma.",
        attack_bonus: 0
      },
      {
        name: "Innate Spellcasting (1/Day)",
        desc: "The mephit can innately cast heat metal (spell save DC 10), requiring no material components. Its innate spellcasting ability is Charisma.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Claws",
        desc: "Melee Weapon Attack: +3 to hit, reach 5 ft ., one creature. Hit: 3 (1d4 + 1) slashing damage plus 2 (1d4) fire damage.",
        attack_bonus: 3,
        damage_dice: "1d4",
        damage_bonus: 1
      },
      {
        name: "Fire Breath (Recharge 6)",
        desc: "The mephit exhales a 15-foot cone of fire. Each creature in that area must make a DC 11 Dexterity saving throw, taking 7 (2d6) fire damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0
      },
      {
        name: "Variant: Summon Mephits (1/Day)",
        desc: "The mephit has a 25 percent chance of summoning 1d4 mephits of its kind. A summoned mephit appears in an unoccupied space within 60 feet of its summoner, acts as an ally of its summoner, and can't summon other mephits. It remains for 1 minute, until it or its summoner dies, or until its summoner dismisses it as an action.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Magmin",
    size: "Small",
    type: "elemental",
    subtype: "",
    alignment: "chaotic neutral",
    ac: 14,
    hp: 9,
    hit_dice: "2d6 + 2",
    speed: "30 ft.",
    stats: [7, 15, 12, 8, 11, 10],
    damage_vulnerabilities: "",
    damage_resistances: "bludgeoning, piercing, and slashing from nonmagical weapons",
    damage_immunities: "fire",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 10",
    languages: "Ignan",
    cr: "1/2",
    traits: [
      {
        name: "Death Burst",
        desc: "When the magmin dies, it explodes in a burst of fire and magma. Each creature within 10 ft. of it must make a DC 11 Dexterity saving throw, taking 7 (2d6) fire damage on a failed save, or half as much damage on a successful one. Flammable objects that aren't being worn or carried in that area are ignited.",
        attack_bonus: 0,
        damage_dice: "2d6"
      },
      {
        name: "Ignited Illumination",
        desc: "As a bonus action, the magmin can set itself ablaze or extinguish its flames. While ablaze, the magmin sheds bright light in a 10-foot radius and dim light for an additional 10 ft.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Touch",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 7 (2d6) fire damage. If the target is a creature or a flammable object, it ignites. Until a target takes an action to douse the fire, the target takes 3 (1d6) fire damage at the end of each of its turns.",
        attack_bonus: 4,
        damage_dice: "2d6"
      }
    ]
  },
  {
    name: "Mammoth",
    size: "Huge",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 13,
    hp: 126,
    hit_dice: "11d12 + 54",
    speed: "40 ft.",
    stats: [24, 9, 21, 3, 11, 6],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 10",
    languages: "",
    cr: "6",
    traits: [
      {
        name: "Trampling Charge",
        desc: "If the mammoth moves at least 20 ft. straight toward a creature and then hits it with a gore attack on the same turn, that target must succeed on a DC 18 Strength saving throw or be knocked prone. If the target is prone, the mammoth can make one stomp attack against it as a bonus action.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Gore",
        desc: "Melee Weapon Attack: +10 to hit, reach 10 ft., one target. Hit: 25 (4d8 + 7) piercing damage.",
        attack_bonus: 10,
        damage_dice: "4d8",
        damage_bonus: 7
      },
      {
        name: "Stomp",
        desc: "Melee Weapon Attack: +10 to hit, reach 5 ft., one prone creature. Hit: 29 (4d10 + 7) bludgeoning damage.",
        attack_bonus: 10,
        damage_dice: "4d10",
        damage_bonus: 7
      }
    ]
  },
  {
    name: "Manticore",
    size: "Large",
    type: "monstrosity",
    subtype: "",
    alignment: "lawful evil",
    ac: 14,
    hp: 68,
    hit_dice: "8d10 + 24",
    speed: "30 ft., fly 50 ft.",
    stats: [17, 16, 17, 7, 12, 8],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 11",
    languages: "",
    cr: "3",
    traits: [
      {
        name: "Tail Spike Regrowth",
        desc: "The manticore has twenty-four tail spikes. Used spikes regrow when the manticore finishes a long rest.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The manticore makes three attacks: one with its bite and two with its claws or three with its tail spikes.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 7 (1d8 + 3) piercing damage.",
        attack_bonus: 5,
        damage_dice: "1d8",
        damage_bonus: 3
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 6 (1d6 + 3) slashing damage.",
        attack_bonus: 5,
        damage_dice: "1d6",
        damage_bonus: 3
      },
      {
        name: "Tail Spike",
        desc: "Ranged Weapon Attack: +5 to hit, range 100/200 ft., one target. Hit: 7 (1d8 + 3) piercing damage.",
        attack_bonus: 5,
        damage_dice: "1d8",
        damage_bonus: 3
      }
    ]
  },
  {
    name: "Marilith",
    size: "Large",
    type: "fiend",
    subtype: "demon",
    alignment: "chaotic evil",
    ac: 18,
    hp: 189,
    hit_dice: "18d10 + 90",
    speed: "40 ft.",
    stats: [18, 20, 20, 18, 16, 20],
    saves: [
      { strength: 9 },
      { constitution: 10 },
      { wisdom: 8 },
      { charisma: 10 }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "cold, fire, lightning; bludgeoning, piercing, and slashing from nonmagical weapons",
    damage_immunities: "poison",
    condition_immunities: "poisoned",
    senses: "truesight 120 ft., passive Perception 13",
    languages: "Abyssal, telepathy 120 ft.",
    cr: "16",
    traits: [
      {
        name: "Magic Resistance",
        desc: "The marilith has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      },
      {
        name: "Magic Weapons",
        desc: "The marilith's weapon attacks are magical.",
        attack_bonus: 0
      },
      {
        name: "Reactive",
        desc: "The marilith can take one reaction on every turn in combat.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The marilith can make seven attacks: six with its longswords and one with its tail.",
        attack_bonus: 0
      },
      {
        name: "Longsword",
        desc: "Melee Weapon Attack: +9 to hit, reach 5 ft., one target. Hit: 13 (2d8 + 4) slashing damage.",
        attack_bonus: 9,
        damage_dice: "2d8",
        damage_bonus: 4
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +9 to hit, reach 10 ft., one creature. Hit: 15 (2d10 + 4) bludgeoning damage. If the target is Medium or smaller, it is grappled (escape DC 19). Until this grapple ends, the target is restrained, the marilith can automatically hit the target with its tail, and the marilith can't make tail attacks against other targets.",
        attack_bonus: 9,
        damage_dice: "2d10",
        damage_bonus: 4
      },
      {
        name: "Teleport",
        desc: "The marilith magically teleports, along with any equipment it is wearing or carrying, up to 120 feet to an unoccupied space it can see.",
        attack_bonus: 0
      },
      {
        name: "Variant: Summon Demon (1/Day)",
        desc: "The demon chooses what to summon and attempts a magical summoning.\\nA marilith has a 50 percent chance of summoning 1d6 vrocks, 1d4 hezrous, 1d3 glabrezus, 1d2 nalfeshnees, or one marilith.\\nA summoned demon appears in an unoccupied space within 60 feet of its summoner, acts as an ally of its summoner, and can't summon other demons. It remains for 1 minute, until it or its summoner dies, or until its summoner dismisses it as an action.",
        attack_bonus: 0
      }
    ],
    reactions: [
      {
        name: "Parry",
        desc: "The marilith adds 5 to its AC against one melee attack that would hit it. To do so, the marilith must see the attacker and be wielding a melee weapon.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Mastiff",
    size: "Medium",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 5,
    hit_dice: "1d8",
    speed: "40 ft.",
    stats: [13, 14, 12, 3, 12, 7],
    skillsaves: [{ perception: 3 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 13",
    languages: "",
    cr: "1/8",
    traits: [
      {
        name: "Keen Hearing and Smell",
        desc: "The mastiff has advantage on Wisdom (Perception) checks that rely on hearing or smell.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 4 (1d6 + 1) piercing damage. If the target is a creature, it must succeed on a DC 11 Strength saving throw or be knocked prone.",
        attack_bonus: 3,
        damage_dice: "1d6",
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Medusa",
    size: "Medium",
    type: "monstrosity",
    subtype: "",
    alignment: "lawful evil",
    ac: 15,
    hp: 127,
    hit_dice: "17d8 + 50",
    speed: "30 ft.",
    stats: [10, 15, 16, 12, 13, 15],
    skillsaves: [
      { deception: 5 },
      { insight: 4 },
      { perception: 4 },
      { stealth: 5 }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 14",
    languages: "Common",
    cr: "6",
    traits: [
      {
        name: "Petrifying Gaze",
        desc: "When a creature that can see the medusa's eyes starts its turn within 30 ft. of the medusa, the medusa can force it to make a DC 14 Constitution saving throw if the medusa isn't incapacitated and can see the creature. If the saving throw fails by 5 or more, the creature is instantly petrified. Otherwise, a creature that fails the save begins to turn to stone and is restrained. The restrained creature must repeat the saving throw at the end of its next turn, becoming petrified on a failure or ending the effect on a success. The petrification lasts until the creature is freed by the greater restoration spell or other magic.\\nUnless surprised, a creature can avert its eyes to avoid the saving throw at the start of its turn. If the creature does so, it can't see the medusa until the start of its next turn, when it can avert its eyes again. If the creature looks at the medusa in the meantime, it must immediately make the save.\\nIf the medusa sees itself reflected on a polished surface within 30 ft. of it and in an area of bright light, the medusa is, due to its curse, affected by its own gaze.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The medusa makes either three melee attacks \u2014  one with its snake hair and two with its shortsword \u2014 or two ranged attacks with its longbow.",
        attack_bonus: 0
      },
      {
        name: "Snake Hair",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one creature. Hit: 4 (1d4 + 2) piercing damage plus 14 (4d6) poison damage.",
        attack_bonus: 5,
        damage_dice: "1d4",
        damage_bonus: 2
      },
      {
        name: "Shortsword",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 5 (1d6 + 2) piercing damage.",
        attack_bonus: 5,
        damage_dice: "1d6",
        damage_bonus: 2
      },
      {
        name: "Longbow",
        desc: "Ranged Weapon Attack: +5 to hit, range 150/600 ft., one target. Hit: 6 (1d8 + 2) piercing damage plus 7 (2d6) poison damage.",
        attack_bonus: 5,
        damage_dice: "2d6"
      }
    ]
  },
  {
    name: "Merfolk",
    size: "Medium",
    type: "humanoid",
    subtype: "merfolk",
    alignment: "neutral",
    ac: 11,
    hp: 11,
    hit_dice: "2d8 + 2",
    speed: "10 ft., swim 40 ft.",
    stats: [10, 13, 12, 11, 11, 12],
    skillsaves: [{ perception: 2 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 12",
    languages: "Aquan, Common",
    cr: "1/8",
    traits: [
      {
        name: "Amphibious",
        desc: "The merfolk can breathe air and water.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Spear",
        desc: "Melee or Ranged Weapon Attack: +2 to hit, reach 5 ft. or range 20/60 ft., one target. Hit: 3 (1d6) piercing damage, or 4 (1d8) piercing damage if used with two hands to make a melee attack.",
        attack_bonus: 2,
        damage_dice: "1d6"
      }
    ]
  },
  {
    name: "Merrow",
    size: "Large",
    type: "monstrosity",
    subtype: "",
    alignment: "chaotic evil",
    ac: 13,
    hp: 45,
    hit_dice: "6d10 + 12",
    speed: "10 ft., swim 40 ft.",
    stats: [18, 10, 15, 8, 10, 9],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 10",
    languages: "Abyssal, Aquan",
    cr: "2",
    traits: [
      {
        name: "Amphibious",
        desc: "The merrow can breathe air and water.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The merrow makes two attacks: one with its bite and one with its claws or harpoon.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 8 (1d8 + 4) piercing damage.",
        attack_bonus: 6,
        damage_dice: "1d8",
        damage_bonus: 4
      },
      {
        name: "Claws",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 9 (2d4 + 4) slashing damage.",
        attack_bonus: 6,
        damage_dice: "2d4",
        damage_bonus: 4
      },
      {
        name: "Harpoon",
        desc: "Melee or Ranged Weapon Attack: +6 to hit, reach 5 ft. or range 20/60 ft., one target. Hit: 11 (2d6 + 4) piercing damage. If the target is a Huge or smaller creature, it must succeed on a Strength contest against the merrow or be pulled up to 20 feet toward the merrow.",
        attack_bonus: 6,
        damage_dice: "2d6",
        damage_bonus: 4
      }
    ]
  },
  {
    name: "Mimic",
    size: "Medium",
    type: "monstrosity",
    subtype: "shapechanger",
    alignment: "neutral",
    ac: 12,
    hp: 58,
    hit_dice: "9d8 + 17",
    speed: "15 ft.",
    stats: [17, 12, 15, 5, 13, 8],
    skillsaves: [{ stealth: 5 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "acid",
    condition_immunities: "prone",
    senses: "darkvision 60 ft., passive Perception 11",
    languages: "",
    cr: "2",
    traits: [
      {
        name: "Shapechanger",
        desc: "The mimic can use its action to polymorph into an object or back into its true, amorphous form. Its statistics are the same in each form. Any equipment it is wearing or carrying isn 't transformed. It reverts to its true form if it dies.",
        attack_bonus: 0
      },
      {
        name: "Adhesive (Object Form Only)",
        desc: "The mimic adheres to anything that touches it. A Huge or smaller creature adhered to the mimic is also grappled by it (escape DC 13). Ability checks made to escape this grapple have disadvantage.",
        attack_bonus: 0
      },
      {
        name: "False Appearance (Object Form Only)",
        desc: "While the mimic remains motionless, it is indistinguishable from an ordinary object.",
        attack_bonus: 0
      },
      {
        name: "Grappler",
        desc: "The mimic has advantage on attack rolls against any creature grappled by it.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Pseudopod",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 7 (1d8 + 3) bludgeoning damage. If the mimic is in object form, the target is subjected to its Adhesive trait.",
        attack_bonus: 5,
        damage_dice: "1d8",
        damage_bonus: 3
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 7 (1d8 + 3) piercing damage plus 4 (1d8) acid damage.",
        attack_bonus: 5,
        damage_dice: "1d8 + 1d8",
        damage_bonus: 3
      }
    ]
  },
  {
    name: "Minotaur",
    size: "Large",
    type: "monstrosity",
    subtype: "",
    alignment: "chaotic evil",
    ac: 14,
    hp: 76,
    hit_dice: "9d10 + 26",
    speed: "40 ft.",
    stats: [18, 11, 16, 6, 16, 9],
    skillsaves: [{ perception: 7 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 17",
    languages: "Abyssal",
    cr: "3",
    traits: [
      {
        name: "Charge",
        desc: "If the minotaur moves at least 10 ft. straight toward a target and then hits it with a gore attack on the same turn, the target takes an extra 9 (2d8) piercing damage. If the target is a creature, it must succeed on a DC 14 Strength saving throw or be pushed up to 10 ft. away and knocked prone.",
        attack_bonus: 0,
        damage_dice: "2d8"
      },
      {
        name: "Labyrinthine Recall",
        desc: "The minotaur can perfectly recall any path it has traveled.",
        attack_bonus: 0
      },
      {
        name: "Reckless",
        desc: "At the start of its turn, the minotaur can gain advantage on all melee weapon attack rolls it makes during that turn, but attack rolls against it have advantage until the start of its next turn.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Greataxe",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 17 (2d12 + 4) slashing damage.",
        attack_bonus: 6,
        damage_dice: "2d12",
        damage_bonus: 4
      },
      {
        name: "Gore",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 13 (2d8 + 4) piercing damage.",
        attack_bonus: 6,
        damage_dice: "2d8",
        damage_bonus: 4
      }
    ]
  },
  {
    name: "Minotaur Skeleton",
    size: "Large",
    type: "undead",
    subtype: "",
    alignment: "lawful evil",
    ac: 12,
    hp: 67,
    hit_dice: "9d10 + 17",
    speed: "40 ft.",
    stats: [18, 11, 15, 6, 8, 5],
    damage_vulnerabilities: "bludgeoning",
    damage_resistances: "",
    damage_immunities: "poison",
    condition_immunities: "exhaustion, poisoned",
    senses: "darkvision 60 ft., passive Perception 9",
    languages: "understands Abyssal but can't speak",
    cr: "2",
    traits: [
      {
        name: "Charge",
        desc: "If the skeleton moves at least 10 feet straight toward a target and then hits it with a gore attack on the same turn, the target takes an extra 9 (2d8) piercing damage. If the target is a creature, it must succeed on a DC 14 Strength saving throw or be pushed up to 10 feet away and knocked prone.",
        attack_bonus: 0,
        damage_dice: "2d8"
      }
    ],
    actions: [
      {
        name: "Greataxe",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 17 (2d12 + 4) slashing damage.",
        attack_bonus: 6,
        damage_dice: "2d12",
        damage_bonus: 4
      },
      {
        name: "Gore",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 13 (2d8 + 4) piercing damage.",
        attack_bonus: 6,
        damage_dice: "2d8",
        damage_bonus: 4
      }
    ]
  },
  {
    name: "Mule",
    size: "Medium",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 10,
    hp: 11,
    hit_dice: "2d8 + 2",
    speed: "40 ft.",
    stats: [14, 10, 13, 2, 10, 5],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 10",
    languages: "",
    cr: "1/8",
    traits: [
      {
        name: "Beast of Burden",
        desc: "The mule is considered to be a Large animal for the purpose of determining its carrying capacity.",
        attack_bonus: 0
      },
      {
        name: "Sure-Footed",
        desc: "The mule has advantage on Strength and Dexterity saving throws made against effects that would knock it prone.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Hooves",
        desc: "Melee Weapon Attack: +2 to hit, reach 5 ft., one target. Hit: 4 (1d4 + 2) bludgeoning damage.",
        attack_bonus: 4,
        damage_dice: "1d4",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Mummy",
    size: "Medium",
    type: "undead",
    subtype: "",
    alignment: "lawful evil",
    ac: 11,
    hp: 58,
    hit_dice: "9d8 + 17",
    speed: "20 ft.",
    stats: [16, 8, 15, 6, 10, 12],
    saves: [{ wisdom: 2 }],
    damage_vulnerabilities: "fire",
    damage_resistances: "",
    damage_immunities: "bludgeoning, piercing, and slashing from nonmagical weapons",
    condition_immunities: "necrotic, poisoned",
    senses: "darkvision 60 ft., passive Perception 10",
    languages: "the languages it knew in life",
    cr: "3",
    actions: [
      {
        name: "Multiattack",
        desc: "The mummy can use its Dreadful Glare and makes one attack with its rotting fist.",
        attack_bonus: 0
      },
      {
        name: "Rotting Fist",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 10 (2d6 + 3) bludgeoning damage plus 10 (3d6) necrotic damage. If the target is a creature, it must succeed on a DC 12 Constitution saving throw or be cursed with mummy rot. The cursed target can't regain hit points, and its hit point maximum decreases by 10 (3d6) for every 24 hours that elapse. If the curse reduces the target's hit point maximum to 0, the target dies, and its body turns to dust. The curse lasts until removed by the remove curse spell or other magic.",
        attack_bonus: 5,
        damage_dice: "2d6",
        damage_bonus: 3
      },
      {
        name: "Dreadful Glare",
        desc: "The mummy targets one creature it can see within 60 ft. of it. If the target can see the mummy, it must succeed on a DC 11 Wisdom saving throw against this magic or become frightened until the end of the mummy's next turn. If the target fails the saving throw by 5 or more, it is also paralyzed for the same duration. A target that succeeds on the saving throw is immune to the Dreadful Glare of all mummies (but not mummy lords) for the next 24 hours.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Mummy Lord",
    size: "Medium",
    type: "undead",
    subtype: "",
    alignment: "lawful evil",
    ac: 17,
    hp: 97,
    hit_dice: "13d8 + 38",
    speed: "20 ft.",
    stats: [18, 10, 17, 11, 18, 16],
    saves: [
      { constitution: 8 },
      { intelligence: 5 },
      { wisdom: 9 },
      { charisma: 8 }
    ],
    skillsaves: [{ history: 5 }, { religion: 5 }],
    damage_vulnerabilities: "bludgeoning",
    damage_resistances: "",
    damage_immunities: "necrotic, poison; bludgeoning, piercing, and slashing from nonmagical weapons",
    condition_immunities: "charmed, exhaustion, frightened, paralyzed, poisoned",
    senses: "darkvision 60 ft., passive Perception 14",
    languages: "the languages it knew in life",
    cr: "15",
    traits: [
      {
        name: "Magic Resistance",
        desc: "The mummy lord has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      },
      {
        name: "Rejuvenation",
        desc: "A destroyed mummy lord gains a new body in 24 hours if its heart is intact, regaining all its hit points and becoming active again. The new body appears within 5 feet of the mummy lord's heart.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The mummy can use its Dreadful Glare and makes one attack with its rotting fist.",
        attack_bonus: 0
      },
      {
        name: "Rotting Fist",
        desc: "Melee Weapon Attack: +9 to hit, reach 5 ft., one target. Hit: 14 (3d6 + 4) bludgeoning damage plus 21 (6d6) necrotic damage. If the target is a creature, it must succeed on a DC 16 Constitution saving throw or be cursed with mummy rot. The cursed target can't regain hit points, and its hit point maximum decreases by 10 (3d6) for every 24 hours that elapse. If the curse reduces the target's hit point maximum to 0, the target dies, and its body turns to dust. The curse lasts until removed by the remove curse spell or other magic.",
        attack_bonus: 9,
        damage_dice: "3d6 + 6d6",
        damage_bonus: 4
      },
      {
        name: "Dreadful Glare",
        desc: "The mummy lord targets one creature it can see within 60 feet of it. If the target can see the mummy lord, it must succeed on a DC 16 Wisdom saving throw against this magic or become frightened until the end of the mummy's next turn. If the target fails the saving throw by 5 or more, it is also paralyzed for the same duration. A target that succeeds on the saving throw is immune to the Dreadful Glare of all mummies and mummy lords for the next 24 hours.",
        attack_bonus: 0
      }
    ],
    legendary_actions: [
      {
        name: "Attack",
        desc: "The mummy lord makes one attack with its rotting fist or uses its Dreadful Glare.",
        attack_bonus: 0
      },
      {
        name: "Blinding Dust",
        desc: "Blinding dust and sand swirls magically around the mummy lord. Each creature within 5 feet of the mummy lord must succeed on a DC 16 Constitution saving throw or be blinded until the end of the creature's next turn.",
        attack_bonus: 0
      },
      {
        name: "Blasphemous Word (Costs 2 Actions)",
        desc: "The mummy lord utters a blasphemous word. Each non-undead creature within 10 feet of the mummy lord that can hear the magical utterance must succeed on a DC 16 Constitution saving throw or be stunned until the end of the mummy lord's next turn.",
        attack_bonus: 0
      },
      {
        name: "Channel Negative Energy (Costs 2 Actions)",
        desc: "The mummy lord magically unleashes negative energy. Creatures within 60 feet of the mummy lord, including ones behind barriers and around corners, can't regain hit points until the end of the mummy lord's next turn.",
        attack_bonus: 0
      },
      {
        name: "Whirlwind of Sand (Costs 2 Actions)",
        desc: "The mummy lord magically transforms into a whirlwind of sand, moves up to 60 feet, and reverts to its normal form. While in whirlwind form, the mummy lord is immune to all damage, and it can't be grappled, petrified, knocked prone, restrained, or stunned. Equipment worn or carried by the mummy lord remain in its possession.",
        attack_bonus: 0
      }
    ],
    spells: [
      "The mummy lord is a 10th-level spellcaster. Its spellcasting ability is Wisdom (spell save DC 17, +9 to hit with spell attacks). The mummy lord has the following cleric spells prepared:",
      { "Cantrips (at will)": "sacred flame, thaumaturgy" },
      { "1st level (4 slots)": "command, guiding bolt, shield of faith" },
      { "2nd level (3 slots)": "hold person, silence, spiritual weapon" },
      { "3rd level (3 slots)": "animate dead, dispel magic" },
      { "4th level (3 slots)": "divination, guardian of faith" },
      { "5th level (2 slots)": "contagion, insect plague" },
      { "6th level (1 slot)": "harm" }
    ]
  },
  {
    name: "Nalfeshnee",
    size: "Large",
    type: "fiend",
    subtype: "demon",
    alignment: "chaotic evil",
    ac: 18,
    hp: 184,
    hit_dice: "16d10 + 96",
    speed: "20 ft., fly 30 ft.",
    stats: [21, 10, 22, 19, 12, 15],
    saves: [
      { constitution: 11 },
      { intelligence: 9 },
      { wisdom: 6 },
      { charisma: 7 }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "cold, fire, lightning; bludgeoning, piercing, and slashing from nonmagical weapons",
    damage_immunities: "poison",
    condition_immunities: "poisoned",
    senses: "truesight 120 ft., passive Perception 11",
    languages: "Abyssal, telepathy 120 ft.",
    cr: "13",
    traits: [
      {
        name: "Magic Resistance",
        desc: "The nalfeshnee has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The nalfeshnee uses Horror Nimbus if it can.  It then makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +10 to hit, reach 5 ft., one target. Hit: 32 (5d10 + 5) piercing damage.",
        attack_bonus: 10,
        damage_dice: "5d10",
        damage_bonus: 5
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +10 to hit, reach 10 ft., one target. Hit: 15 (3d6 + 5) slashing damage.",
        attack_bonus: 10,
        damage_dice: "3d6",
        damage_bonus: 5
      },
      {
        name: "Horror Nimbus (Recharge 5-6)",
        desc: "The nalfeshnee magically emits scintillating, multicolored light. Each creature within 15 feet of the nalfeshnee that can see the light must succeed on a DC 15 Wisdom saving throw or be frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the nalfeshnee's Horror Nimbus for the next 24 hours.",
        attack_bonus: 0
      },
      {
        name: "Teleport",
        desc: "The nalfeshnee magically teleports, along with any equipment it is wearing or carrying, up to 120 feet to an unoccupied space it can see.",
        attack_bonus: 0
      },
      {
        name: "Variant: Summon Demon (1/Day)",
        desc: "The demon chooses what to summon and attempts a magical summoning.\\nA nalfeshnee has a 50 percent chance of summoning 1d4 vrocks, 1d3 hezrous, 1d2 glabrezus, or one nalfeshnee.\\nA summoned demon appears in an unoccupied space within 60 feet of its summoner, acts as an ally of its summoner, and can't summon other demons. It remains for 1 minute, until it or its summoner dies, or until its summoner dismisses it as an action.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Night Hag",
    size: "Medium",
    type: "fiend",
    subtype: "",
    alignment: "neutral evil",
    ac: 17,
    hp: 112,
    hit_dice: "15d8 + 44",
    speed: "30 ft.",
    stats: [18, 15, 16, 16, 14, 16],
    skillsaves: [
      { deception: 7 },
      { insight: 6 },
      { perception: 6 },
      { stealth: 6 }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "cold, fire; bludgeoning, piercing, and slashing from nonmagical weapons that aren't silvered",
    damage_immunities: "",
    condition_immunities: "charmed",
    senses: "darkvision 120 ft., passive Perception 16",
    languages: "Abyssal, Common, Infernal, Primordial",
    cr: "5",
    traits: [
      {
        name: "Innate Spellcasting",
        desc: "The hag's innate spellcasting ability is Charisma (spell save DC 14, +6 to hit with spell attacks). She can innately cast the following spells, requiring no material components:\\n\\nAt will: detect magic, magic missile\\n2/day each: plane shift (self only), ray of enfeeblement, sleep",
        attack_bonus: 0
      },
      {
        name: "Magic Resistance",
        desc: "The hag has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      },
      {
        name: "Night Hag Items",
        desc: "A night hag carries two very rare magic items that she must craft for herself If either object is lost, the night hag will go to great lengths to retrieve it, as creating a new tool takes time and effort.\\nHeartstone: This lustrous black gem allows a night hag to become ethereal while it is in her possession. The touch of a heartstone also cures any disease. Crafting a heartstone takes 30 days.\\nSoul Bag: When an evil humanoid dies as a result of a night hag's Nightmare Haunting, the hag catches the soul in this black sack made of stitched flesh. A soul bag can hold only one evil soul at a time, and only the night hag who crafted the bag can catch a soul with it. Crafting a soul bag takes 7 days and a humanoid sacrifice (whose flesh is used to make the bag).",
        attack_bonus: 0
      },
      {
        name: "Hag Coven",
        desc: "When hags must work together, they form covens, in spite of their selfish natures. A coven is made up of hags of any type, all of whom are equals within the group. However, each of the hags continues to desire more personal power.\\nA coven consists of three hags so that any arguments between two hags can be settled by the third. If more than three hags ever come together, as might happen if two covens come into conflict, the result is usually chaos.",
        attack_bonus: 0
      },
      {
        name: "Shared Spellcasting (Coven Only)",
        desc: "While all three members of a hag coven are within 30 feet of one another, they can each cast the following spells from the wizard's spell list but must share the spell slots among themselves:\\n\\n\u2022 1st level (4 slots): identify, ray of sickness\\n\u2022 2nd level (3 slots): hold person, locate object\\n\u2022 3rd level (3 slots): bestow curse, counterspell, lightning bolt\\n\u2022 4th level (3 slots): phantasmal killer, polymorph\\n\u2022 5th level (2 slots): contact other plane, scrying\\n\u2022 6th level (1 slot): eye bite\\n\\nFor casting these spells, each hag is a 12th-level spellcaster that uses Intelligence as her spellcasting ability. The spell save DC is 12+the hag's Intelligence modifier, and the spell attack bonus is 4+the hag's Intelligence modifier.",
        attack_bonus: 0
      },
      {
        name: "Hag Eye (Coven Only)",
        desc: "A hag coven can craft a magic item called a hag eye, which is made from a real eye coated in varnish and often fitted to a pendant or other wearable item. The hag eye is usually entrusted to a minion for safekeeping and transport. A hag in the coven can take an action to see what the hag eye sees if the hag eye is on the same plane of existence. A hag eye has AC 10, 1 hit point, and darkvision with a radius of 60 feet. If it is destroyed, each coven member takes 3d10 psychic damage and is blinded for 24 hours.\\nA hag coven can have only one hag eye at a time, and creating a new one requires all three members of the coven to perform a ritual. The ritual takes 1 hour, and the hags can't perform it while blinded. During the ritual, if the hags take any action other than performing the ritual, they must start over.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Claws (Hag Form Only)",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 13 (2d8 + 4) slashing damage.",
        attack_bonus: 7,
        damage_dice: "2d8",
        damage_bonus: 4
      },
      {
        name: "Change Shape",
        desc: "The hag magically polymorphs into a Small or Medium female humanoid, or back into her true form. Her statistics are the same in each form. Any equipment she is wearing or carrying isn't transformed. She reverts to her true form if she dies.",
        attack_bonus: 0
      },
      {
        name: "Etherealness",
        desc: "The hag magically enters the Ethereal Plane from the Material Plane, or vice versa. To do so, the hag must have a heartstone in her possession.",
        attack_bonus: 0
      },
      {
        name: "Nightmare Haunting (1/Day)",
        desc: "While on the Ethereal Plane, the hag magically touches a sleeping humanoid on the Material Plane. A protection from evil and good spell cast on the target prevents this contact, as does a magic circle. As long as the contact persists, the target has dreadful visions. If these visions last for at least 1 hour, the target gains no benefit from its rest, and its hit point maximum is reduced by 5 (1d10). If this effect reduces the target's hit point maximum to 0, the target dies, and if the target was evil, its soul is trapped in the hag's soul bag. The reduction to the target's hit point maximum lasts until removed by the greater restoration spell or similar magic.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Nightmare",
    size: "Large",
    type: "fiend",
    subtype: "",
    alignment: "neutral evil",
    ac: 13,
    hp: 68,
    hit_dice: "8d10 + 24",
    speed: "60 ft., fly 90 ft.",
    stats: [18, 15, 16, 10, 13, 15],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "fire",
    condition_immunities: "",
    senses: "passive Perception 11",
    languages: "understands Abyssal, Common, and Infernal but can't speak",
    cr: "3",
    traits: [
      {
        name: "Confer Fire Resistance",
        desc: "The nightmare can grant resistance to fire damage to anyone riding it.",
        attack_bonus: 0
      },
      {
        name: "Illumination",
        desc: "The nightmare sheds bright light in a 10-foot radius and dim light for an additional 10 feet.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Hooves",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 13 (2d8 + 4) bludgeoning damage plus 7 (2d6) fire damage.",
        attack_bonus: 6,
        damage_dice: "2d8 + 2d6",
        damage_bonus: 4
      },
      {
        name: "Ethereal Stride",
        desc: "The nightmare and up to three willing creatures within 5 feet of it magically enter the Ethereal Plane from the Material Plane, or vice versa.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Noble",
    size: "Medium",
    type: "humanoid",
    subtype: "any race",
    alignment: "any alignment",
    ac: 15,
    hp: 9,
    hit_dice: "2d8",
    speed: "30 ft.",
    stats: [11, 12, 11, 12, 14, 16],
    skillsaves: [{ deception: 5 }, { insight: 4 }, { persuasion: 5 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 12",
    languages: "any two languages",
    cr: "1/8",
    actions: [
      {
        name: "Rapier",
        desc: "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 5 (1d8 + 1) piercing damage.",
        attack_bonus: 3,
        damage_dice: "1d8",
        damage_bonus: 1
      }
    ],
    reactions: [
      {
        name: "Parry",
        desc: "The noble adds 2 to its AC against one melee attack that would hit it. To do so, the noble must see the attacker and be wielding a melee weapon.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Ochre Jelly",
    size: "Large",
    type: "ooze",
    subtype: "",
    alignment: "unaligned",
    ac: 8,
    hp: 45,
    hit_dice: "6d10 + 12",
    speed: "10 ft., climb 10 ft.",
    stats: [15, 6, 14, 2, 6, 1],
    damage_vulnerabilities: "",
    damage_resistances: "acid",
    damage_immunities: "lightning, slashing",
    condition_immunities: "blinded, charmed, deafened, exhaustion, frightened, prone",
    senses: "blindsight 60 ft. (blind beyond this radius), passive Perception 8",
    languages: "",
    cr: "2",
    traits: [
      {
        name: "Amorphous",
        desc: "The jelly can move through a space as narrow as 1 inch wide without squeezing.",
        attack_bonus: 0
      },
      {
        name: "Spider Climb",
        desc: "The jelly can climb difficult surfaces, including upside down on ceilings, without needing to make an ability check.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Pseudopod",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 9 (2d6 + 2) bludgeoning damage plus 3 (1d6) acid damage.",
        attack_bonus: 4,
        damage_dice: "2d6",
        damage_bonus: 2
      }
    ],
    reactions: [
      {
        name: "Split",
        desc: "When a jelly that is Medium or larger is subjected to lightning or slashing damage, it splits into two new jellies if it has at least 10 hit points. Each new jelly has hit points equal to half the original jelly's, rounded down. New jellies are one size smaller than the original jelly.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Octopus",
    size: "Small",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 3,
    hit_dice: "1d6 + -1",
    speed: "5 ft., swim 30 ft.",
    stats: [4, 15, 11, 3, 10, 4],
    skillsaves: [{ perception: 2 }, { stealth: 4 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 30 ft., passive Perception 12",
    languages: "",
    cr: "0",
    traits: [
      {
        name: "Hold Breath",
        desc: "While out of water, the octopus can hold its breath for 30 minutes.",
        attack_bonus: 0
      },
      {
        name: "Underwater Camouflage",
        desc: "The octopus has advantage on Dexterity (Stealth) checks made while underwater.",
        attack_bonus: 0
      },
      {
        name: "Water Breathing",
        desc: "The octopus can breathe only underwater.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Tentacles",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 1 bludgeoning damage, and the target is grappled (escape DC 10). Until this grapple ends, the octopus can't use its tentacles on another target.",
        attack_bonus: 4,
        damage_bonus: 1
      },
      {
        name: "Ink Cloud (Recharges after a Short or Long Rest)",
        desc: "A 5-foot-radius cloud of ink extends all around the octopus if it is underwater. The area is heavily obscured for 1 minute, although a significant current can disperse the ink. After releasing the ink, the octopus can use the Dash action as a bonus action.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Ogre",
    size: "Large",
    type: "giant",
    subtype: "",
    alignment: "chaotic evil",
    ac: 11,
    hp: 59,
    hit_dice: "7d10 + 20",
    speed: "40 ft.",
    stats: [19, 8, 16, 5, 7, 7],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 8",
    languages: "Common, Giant",
    cr: "2",
    actions: [
      {
        name: "Greatclub",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 13 (2d8 + 4) bludgeoning damage.",
        attack_bonus: 6,
        damage_dice: "2d8",
        damage_bonus: 4
      },
      {
        name: "Javelin",
        desc: "Melee or Ranged Weapon Attack: +6 to hit, reach 5 ft. or range 30/120 ft., one target. Hit: 11 (2d6 + 4) piercing damage.",
        attack_bonus: 6,
        damage_dice: "2d6",
        damage_bonus: 4
      }
    ]
  },
  {
    name: "Ogre Zombie",
    size: "Large",
    type: "undead",
    subtype: "",
    alignment: "neutral evil",
    ac: 8,
    hp: 85,
    hit_dice: "9d10 + 35",
    speed: "30 ft.",
    stats: [19, 6, 18, 3, 6, 5],
    saves: [{ wisdom: 0 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "poison",
    condition_immunities: "poisoned",
    senses: "darkvision 60 ft., passive Perception 8",
    languages: "understands Common and Giant but can't speak",
    cr: "2",
    traits: [
      {
        name: "Undead Fortitude",
        desc: "If damage reduces the zombie to 0 hit points, it must make a Constitution saving throw with a DC of 5+the damage taken, unless the damage is radiant or from a critical hit. On a success, the zombie drops to 1 hit point instead.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Morningstar",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 13 (2d8 + 4) bludgeoning damage.",
        attack_bonus: 6,
        damage_dice: "2d8",
        damage_bonus: 4
      }
    ]
  },
  {
    name: "Oni",
    size: "Large",
    type: "giant",
    subtype: "",
    alignment: "lawful evil",
    ac: 16,
    hp: 110,
    hit_dice: "13d10 + 38",
    speed: "30 ft., fly 30 ft.",
    stats: [19, 11, 16, 14, 12, 15],
    saves: [
      { dexterity: 3 },
      { constitution: 6 },
      { wisdom: 4 },
      { charisma: 5 }
    ],
    skillsaves: [{ arcana: 5 }, { deception: 8 }, { perception: 4 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 14",
    languages: "Common, Giant",
    cr: "7",
    traits: [
      {
        name: "Innate Spellcasting",
        desc: "The oni's innate spellcasting ability is Charisma (spell save DC 13). The oni can innately cast the following spells, requiring no material components:\\n\\nAt will: darkness, invisibility\\n1/day each: charm person, cone of cold, gaseous form, sleep",
        attack_bonus: 0
      },
      {
        name: "Magic Weapons",
        desc: "The oni's weapon attacks are magical.",
        attack_bonus: 0
      },
      {
        name: "Regeneration",
        desc: "The oni regains 10 hit points at the start of its turn if it has at least 1 hit point.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The oni makes two attacks, either with its claws or its glaive.",
        attack_bonus: 0
      },
      {
        name: "Claw (Oni Form Only)",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 8 (1d8 + 4) slashing damage.",
        attack_bonus: 7,
        damage_dice: "1d8",
        damage_bonus: 4
      },
      {
        name: "Glaive",
        desc: "Melee Weapon Attack: +7 to hit, reach 10 ft., one target. Hit: 15 (2d10 + 4) slashing damage, or 9 (1d10 + 4) slashing damage in Small or Medium form.",
        attack_bonus: 7,
        damage_dice: "2d10",
        damage_bonus: 4
      },
      {
        name: "Change Shape",
        desc: "The oni magically polymorphs into a Small or Medium humanoid, into a Large giant, or back into its true form. Other than its size, its statistics are the same in each form. The only equipment that is transformed is its glaive, which shrinks so that it can be wielded in humanoid form. If the oni dies, it reverts to its true form, and its glaive reverts to its normal size.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Orc",
    size: "Medium",
    type: "humanoid",
    subtype: "orc",
    alignment: "chaotic evil",
    ac: 13,
    hp: 15,
    hit_dice: "2d8 + 6",
    speed: "30 ft.",
    stats: [16, 12, 16, 7, 11, 10],
    skillsaves: [{ intimidation: 2 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 10",
    languages: "Common, Orc",
    cr: "1/2",
    traits: [
      {
        name: "Aggressive",
        desc: "As a bonus action, the orc can move up to its speed toward a hostile creature that it can see.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Greataxe",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 9 (1d12 + 3) slashing damage.",
        attack_bonus: 5,
        damage_dice: "1d12",
        damage_bonus: 3
      },
      {
        name: "Javelin",
        desc: "Melee or Ranged Weapon Attack: +5 to hit, reach 5 ft. or range 30/120 ft., one target. Hit: 6 (1d6 + 3) piercing damage.",
        attack_bonus: 5,
        damage_dice: "1d6",
        damage_bonus: 3
      }
    ]
  },
  {
    name: "Otyugh",
    size: "Large",
    type: "aberration",
    subtype: "",
    alignment: "neutral",
    ac: 14,
    hp: 114,
    hit_dice: "12d10 + 48",
    speed: "30 ft.",
    stats: [16, 11, 19, 6, 13, 6],
    saves: [{ constitution: 7 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 120 ft., passive Perception 11",
    languages: "Otyugh",
    cr: "5",
    traits: [
      {
        name: "Limited Telepathy",
        desc: "The otyugh can magically transmit simple messages and images to any creature within 120 ft. of it that can understand a language. This form of telepathy doesn't allow the receiving creature to telepathically respond.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The otyugh makes three attacks: one with its bite and two with its tentacles.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 12 (2d8 + 3) piercing damage. If the target is a creature, it must succeed on a DC 15 Constitution saving throw against disease or become poisoned until the disease is cured. Every 24 hours that elapse, the target must repeat the saving throw, reducing its hit point maximum by 5 (1d10) on a failure. The disease is cured on a success. The target dies if the disease reduces its hit point maximum to 0. This reduction to the target's hit point maximum lasts until the disease is cured.",
        attack_bonus: 6,
        damage_dice: "2d8",
        damage_bonus: 3
      },
      {
        name: "Tentacle",
        desc: "Melee Weapon Attack: +6 to hit, reach 10 ft., one target. Hit: 7 (1d8 + 3) bludgeoning damage plus 4 (1d8) piercing damage. If the target is Medium or smaller, it is grappled (escape DC 13) and restrained until the grapple ends. The otyugh has two tentacles, each of which can grapple one target.",
        attack_bonus: 6,
        damage_dice: "1d8",
        damage_bonus: 3
      },
      {
        name: "Tentacle Slam",
        desc: "The otyugh slams creatures grappled by it into each other or a solid surface. Each creature must succeed on a DC 14 Constitution saving throw or take 10 (2d6 + 3) bludgeoning damage and be stunned until the end of the otyugh's next turn. On a successful save, the target takes half the bludgeoning damage and isn't stunned.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Owl",
    size: "Tiny",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 11,
    hp: 1,
    hit_dice: "1d4 + -2",
    speed: "5 ft., fly 60 ft.",
    stats: [3, 13, 8, 2, 12, 7],
    skillsaves: [{ perception: 3 }, { stealth: 3 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 120 ft., passive Perception 13",
    languages: "",
    cr: "0",
    traits: [
      {
        name: "Flyby",
        desc: "The owl doesn't provoke opportunity attacks when it flies out of an enemy's reach.",
        attack_bonus: 0
      },
      {
        name: "Keen Hearing and Sight",
        desc: "The owl has advantage on Wisdom (Perception) checks that rely on hearing or sight.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Talons",
        desc: "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 1 slashing damage.",
        attack_bonus: 3,
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Owlbear",
    size: "Large",
    type: "monstrosity",
    subtype: "",
    alignment: "unaligned",
    ac: 13,
    hp: 59,
    hit_dice: "7d10 + 20",
    speed: "40 ft.",
    stats: [20, 12, 17, 3, 12, 7],
    skillsaves: [{ perception: 3 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 13",
    languages: "",
    cr: "3",
    traits: [
      {
        name: "Keen Sight and Smell",
        desc: "The owlbear has advantage on Wisdom (Perception) checks that rely on sight or smell.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The owlbear makes two attacks: one with its beak and one with its claws.",
        attack_bonus: 0
      },
      {
        name: "Beak",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one creature. Hit: 10 (1d10 + 5) piercing damage.",
        attack_bonus: 7,
        damage_dice: "1d10",
        damage_bonus: 5
      },
      {
        name: "Claws",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 14 (2d8 + 5) slashing damage.",
        attack_bonus: 7,
        damage_dice: "2d8",
        damage_bonus: 5
      }
    ]
  },
  {
    name: "Panther",
    size: "Medium",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 13,
    hit_dice: "3d8 + -1",
    speed: "50 ft., climb 40 ft.",
    stats: [14, 15, 10, 3, 14, 7],
    skillsaves: [{ perception: 4 }, { stealth: 6 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 14",
    languages: "",
    cr: "1/4",
    traits: [
      {
        name: "Keen Smell",
        desc: "The panther has advantage on Wisdom (Perception) checks that rely on smell.",
        attack_bonus: 0
      },
      {
        name: "Pounce",
        desc: "If the panther moves at least 20 ft. straight toward a creature and then hits it with a claw attack on the same turn, that target must succeed on a DC 12 Strength saving throw or be knocked prone. If the target is prone, the panther can make one bite attack against it as a bonus action.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 5 (1d6 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d6",
        damage_bonus: 2
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 4 (1d4 + 2) slashing damage.",
        attack_bonus: 4,
        damage_dice: "1d4",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Pegasus",
    size: "Large",
    type: "celestial",
    subtype: "",
    alignment: "chaotic good",
    ac: 12,
    hp: 59,
    hit_dice: "7d10 + 20",
    speed: "60 ft., fly 90 ft.",
    stats: [18, 15, 16, 10, 15, 13],
    saves: [{ dexterity: 4 }, { wisdom: 4 }, { charisma: 3 }],
    skillsaves: [{ perception: 6 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 16",
    languages: "understands Celestial, Common, Elvish, and Sylvan but can't speak",
    cr: "2",
    actions: [
      {
        name: "Hooves",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 11 (2d6 + 4) bludgeoning damage.",
        attack_bonus: 6,
        damage_dice: "2d6",
        damage_bonus: 4
      }
    ]
  },
  {
    name: "Phase Spider",
    size: "Large",
    type: "monstrosity",
    subtype: "",
    alignment: "unaligned",
    ac: 13,
    hp: 32,
    hit_dice: "5d10 + 4",
    speed: "30 ft., climb 30 ft.",
    stats: [15, 15, 12, 6, 10, 6],
    skillsaves: [{ stealth: 6 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 10",
    languages: "",
    cr: "3",
    traits: [
      {
        name: "Ethereal Jaunt",
        desc: "As a bonus action, the spider can magically shift from the Material Plane to the Ethereal Plane, or vice versa.",
        attack_bonus: 0
      },
      {
        name: "Spider Climb",
        desc: "The spider can climb difficult surfaces, including upside down on ceilings, without needing to make an ability check.",
        attack_bonus: 0
      },
      {
        name: "Web Walker",
        desc: "The spider ignores movement restrictions caused by webbing.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one creature. Hit: 7 (1d10 + 2) piercing damage, and the target must make a DC 11 Constitution saving throw, taking 18 (4d8) poison damage on a failed save, or half as much damage on a successful one. If the poison damage reduces the target to 0 hit points, the target is stable but poisoned for 1 hour, even after regaining hit points, and is paralyzed while poisoned in this way.",
        attack_bonus: 4,
        damage_dice: "1d10",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Pit Fiend",
    size: "Large",
    type: "fiend",
    subtype: "devil",
    alignment: "lawful evil",
    ac: 19,
    hp: 300,
    hit_dice: "24d10 + 168",
    speed: "30 ft., fly 60 ft.",
    stats: [26, 14, 24, 22, 18, 24],
    saves: [{ dexterity: 8 }, { constitution: 13 }, { wisdom: 10 }],
    damage_vulnerabilities: "",
    damage_resistances: "cold; bludgeoning, piercing, and slashing from nonmagical weapons that aren't silvered",
    damage_immunities: "fire, poison",
    condition_immunities: "poisoned",
    senses: "truesight 120 ft., passive Perception 14",
    languages: "Infernal, telepathy 120 ft.",
    cr: "20",
    traits: [
      {
        name: "Fear Aura",
        desc: "Any creature hostile to the pit fiend that starts its turn within 20 feet of the pit fiend must make a DC 21 Wisdom saving throw, unless the pit fiend is incapacitated. On a failed save, the creature is frightened until the start of its next turn. If a creature's saving throw is successful, the creature is immune to the pit fiend's Fear Aura for the next 24 hours.",
        attack_bonus: 0
      },
      {
        name: "Magic Resistance",
        desc: "The pit fiend has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      },
      {
        name: "Magic Weapons",
        desc: "The pit fiend's weapon attacks are magical.",
        attack_bonus: 0
      },
      {
        name: "Innate Spellcasting",
        desc: "The pit fiend's spellcasting ability is Charisma (spell save DC 21). The pit fiend can innately cast the following spells, requiring no material components:\\nAt will: detect magic, fireball\\n3/day each: hold monster, wall of fire",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The pit fiend makes four attacks: one with its bite, one with its claw, one with its mace, and one with its tail.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +14 to hit, reach 5 ft., one target. Hit: 22 (4d6 + 8) piercing damage. The target must succeed on a DC 21 Constitution saving throw or become poisoned. While poisoned in this way, the target can't regain hit points, and it takes 21 (6d6) poison damage at the start of each of its turns. The poisoned target can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success.",
        attack_bonus: 14,
        damage_dice: "4d6",
        damage_bonus: 8
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +14 to hit, reach 10 ft. , one target. Hit: 17 (2d8 + 8) slashing damage.",
        attack_bonus: 14,
        damage_dice: "2d8",
        damage_bonus: 8
      },
      {
        name: "Mace",
        desc: "Melee Weapon Attack: +14 to hit, reach 10ft., one target. Hit: 15 (2d6 + 8) bludgeoning damage plus 21 (6d6) fire damage.",
        attack_bonus: 14,
        damage_dice: "2d6",
        damage_bonus: 8
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +14 to hit, reach 10ft., one target. Hit: 24 (3d1O + 8) bludgeoning damage.",
        attack_bonus: 14,
        damage_dice: "3d10",
        damage_bonus: 8
      }
    ]
  },
  {
    name: "Planetar",
    size: "Large",
    type: "celestial",
    subtype: "",
    alignment: "lawful good",
    ac: 19,
    hp: 200,
    hit_dice: "16d10 + 112",
    speed: "40 ft., fly 120 ft.",
    stats: [24, 20, 24, 19, 22, 25],
    saves: [{ constitution: 12 }, { wisdom: 11 }, { charisma: 12 }],
    skillsaves: [{ perception: 11 }],
    damage_vulnerabilities: "",
    damage_resistances: "radiant; bludgeoning, piercing, and slashing from nonmagical weapons",
    damage_immunities: "",
    condition_immunities: "charmed, exhaustion, frightened",
    senses: "truesight 120 ft., passive Perception 21",
    languages: "all, telepathy 120 ft.",
    cr: "16",
    traits: [
      {
        name: "Angelic Weapons",
        desc: "The planetar's weapon attacks are magical. When the planetar hits with any weapon, the weapon deals an extra 5d8 radiant damage (included in the attack).",
        attack_bonus: 0
      },
      {
        name: "Divine Awareness",
        desc: "The planetar knows if it hears a lie.",
        attack_bonus: 0
      },
      {
        name: "Innate Spellcasting",
        desc: "The planetar's spellcasting ability is Charisma (spell save DC 20). The planetar can innately cast the following spells, requiring no material components:\\nAt will: detect evil and good, invisibility (self only)\\n3/day each: blade barrier, dispel evil and good, flame strike, raise dead\\n1/day each: commune, control weather, insect plague",
        attack_bonus: 0
      },
      {
        name: "Magic Resistance",
        desc: "The planetar has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The planetar makes two melee attacks.",
        attack_bonus: 0
      },
      {
        name: "Greatsword",
        desc: "Melee Weapon Attack: +12 to hit, reach 5 ft., one target. Hit: 21 (4d6 + 7) slashing damage plus 22 (5d8) radiant damage.",
        attack_bonus: 12,
        damage_dice: "4d6 + 5d8",
        damage_bonus: 7
      },
      {
        name: "Healing Touch (4/Day)",
        desc: "The planetar touches another creature. The target magically regains 30 (6d8 + 3) hit points and is freed from any curse, disease, poison, blindness, or deafness.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Plesiosaurus",
    size: "Large",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 13,
    hp: 68,
    hit_dice: "8d10 + 24",
    speed: "20 ft., swim 40 ft.",
    stats: [18, 15, 16, 2, 12, 5],
    skillsaves: [{ perception: 3 }, { stealth: 4 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 13",
    languages: "",
    cr: "2",
    traits: [
      {
        name: "Hold Breath",
        desc: "The plesiosaurus can hold its breath for 1 hour.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +6 to hit, reach 10 ft., one target. Hit: 14 (3d6 + 4) piercing damage.",
        attack_bonus: 6,
        damage_dice: "3d6",
        damage_bonus: 4
      }
    ]
  },
  {
    name: "Poisonous Snake",
    size: "Tiny",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 13,
    hp: 2,
    hit_dice: "1d4 + -1",
    speed: "30 ft., swim 30 ft.",
    stats: [2, 16, 11, 1, 10, 3],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "blindsight 10 ft., passive Perception 10",
    languages: "",
    cr: "1/8",
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 1 piercing damage, and the target must make a DC 10 Constitution saving throw, taking 5 (2d4) poison damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 5,
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Polar Bear",
    size: "Large",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 42,
    hit_dice: "5d10 + 14",
    speed: "40 ft., swim 30 ft.",
    stats: [20, 10, 16, 2, 13, 7],
    skillsaves: [{ perception: 3 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 13",
    languages: "",
    cr: "2",
    traits: [
      {
        name: "Keen Smell",
        desc: "The bear has advantage on Wisdom (Perception) checks that rely on smell.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The bear makes two attacks: one with its bite and one with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 9 (1d8 + 5) piercing damage.",
        attack_bonus: 7,
        damage_dice: "1d8",
        damage_bonus: 5
      },
      {
        name: "Claws",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 12 (2d6 + 5) slashing damage.",
        attack_bonus: 7,
        damage_dice: "2d6",
        damage_bonus: 5
      }
    ]
  },
  {
    name: "Pony",
    size: "Medium",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 10,
    hp: 11,
    hit_dice: "2d8 + 2",
    speed: "40 ft.",
    stats: [15, 10, 13, 2, 11, 7],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 10",
    languages: "",
    cr: "1/8",
    actions: [
      {
        name: "Hooves",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 7 (2d4 + 2) bludgeoning damage.",
        attack_bonus: 4,
        damage_dice: "2d4",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Priest",
    size: "Medium",
    type: "humanoid",
    subtype: "any race",
    alignment: "any alignment",
    ac: 13,
    hp: 27,
    hit_dice: "5d8 + 4",
    speed: "25 ft.",
    stats: [10, 10, 12, 13, 16, 13],
    skillsaves: [{ medicine: 7 }, { persuasion: 3 }, { religion: 4 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 13",
    languages: "any two languages",
    cr: "2",
    traits: [
      {
        name: "Divine Eminence",
        desc: "As a bonus action, the priest can expend a spell slot to cause its melee weapon attacks to magically deal an extra 10 (3d6) radiant damage to a target on a hit. This benefit lasts until the end of the turn. If the priest expends a spell slot of 2nd level or higher, the extra damage increases by 1d6 for each level above 1st.",
        attack_bonus: 0,
        damage_dice: "3d6"
      }
    ],
    actions: [
      {
        name: "Mace",
        desc: "Melee Weapon Attack: +2 to hit, reach 5 ft., one target. Hit: 3 (1d6) bludgeoning damage.",
        attack_bonus: 2,
        damage_dice: "1d6"
      }
    ],
    spells: [
      "The priest is a 5th-level spellcaster. Its spellcasting ability is Wisdom (spell save DC 13, +5 to hit with spell attacks). The priest has the following cleric spells prepared:",
      { "Cantrips (at will)": "light, sacred flame, thaumaturgy" },
      { "1st level (4 slots)": "cure wounds, guiding bolt, sanctuary" },
      { "2nd level (3 slots)": "lesser restoration, spiritual weapon" },
      { "3rd level (2 slots)": "dispel magic, spirit guardians" }
    ]
  },
  {
    name: "Pseudodragon",
    size: "Tiny",
    type: "dragon",
    subtype: "",
    alignment: "neutral good",
    ac: 13,
    hp: 7,
    hit_dice: "2d4 + 2",
    speed: "15 ft., fly 60 ft.",
    stats: [6, 15, 13, 10, 12, 10],
    skillsaves: [{ perception: 3 }, { stealth: 4 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "blindsight 10 ft., darkvision 60 ft., passive Perception 13",
    languages: "understands Common and Draconic but can't speak",
    cr: "1/4",
    traits: [
      {
        name: "Keen Senses",
        desc: "The pseudodragon has advantage on Wisdom (Perception) checks that rely on sight, hearing, or smell.",
        attack_bonus: 0
      },
      {
        name: "Magic Resistance",
        desc: "The pseudodragon has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      },
      {
        name: "Limited Telepathy",
        desc: "The pseudodragon can magically communicate simple ideas, emotions, and images telepathically with any creature within 100 ft. of it that can understand a language.",
        attack_bonus: 0
      },
      {
        name: "Variant: Familiar",
        desc: "The pseudodragon can serve another creature as a familiar, forming a magic, telepathic bond with that willing companion. While the two are bonded, the companion can sense what the pseudodragon senses as long as they are within 1 mile of each other. While the pseudodragon is within 10 feet of its companion, the companion shares the pseudodragon's Magic Resistance trait. At any time and for any reason, the pseudodragon can end its service as a familiar, ending the telepathic bond.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 4 (1d4 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d4",
        damage_bonus: 2
      },
      {
        name: "Sting",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one creature. Hit: 4 (1d4 + 2) piercing damage, and the target must succeed on a DC 11 Constitution saving throw or become poisoned for 1 hour. If the saving throw fails by 5 or more, the target falls unconscious for the same duration, or until it takes damage or another creature uses an action to shake it awake.",
        attack_bonus: 4,
        damage_dice: "1d4",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Purple Worm",
    size: "Gargantuan",
    type: "monstrosity",
    subtype: "",
    alignment: "unaligned",
    ac: 18,
    hp: 247,
    hit_dice: "15d20 + 89",
    speed: "50 ft., burrow 30 ft.",
    stats: [28, 7, 22, 1, 8, 4],
    saves: [{ constitution: 11 }, { wisdom: 4 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "blindsight 30 ft., tremorsense 60 ft., passive Perception 9",
    languages: "",
    cr: "15",
    traits: [
      {
        name: "Tunneler",
        desc: "The worm can burrow through solid rock at half its burrow speed and leaves a 10-foot-diameter tunnel in its wake.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The worm makes two attacks: one with its bite and one with its stinger.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +9 to hit, reach 10 ft., one target. Hit: 22 (3d8 + 9) piercing damage. If the target is a Large or smaller creature, it must succeed on a DC 19 Dexterity saving throw or be swallowed by the worm. A swallowed creature is blinded and restrained, it has total cover against attacks and other effects outside the worm, and it takes 21 (6d6) acid damage at the start of each of the worm's turns.\\nIf the worm takes 30 damage or more on a single turn from a creature inside it, the worm must succeed on a DC 21 Constitution saving throw at the end of that turn or regurgitate all swallowed creatures, which fall prone in a space within 10 feet of the worm. If the worm dies, a swallowed creature is no longer restrained by it and can escape from the corpse by using 20 feet of movement, exiting prone.",
        attack_bonus: 9,
        damage_dice: "3d8",
        damage_bonus: 9
      },
      {
        name: "Tail Stinger",
        desc: "Melee Weapon Attack: +9 to hit, reach 10 ft., one creature. Hit: 19 (3d6 + 9) piercing damage, and the target must make a DC 19 Constitution saving throw, taking 42 (12d6) poison damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 9,
        damage_dice: "3d6",
        damage_bonus: 9
      }
    ]
  },
  {
    name: "Quasit",
    size: "Tiny",
    type: "fiend",
    subtype: "demon",
    alignment: "chaotic evil",
    ac: 13,
    hp: 7,
    hit_dice: "3d4 + -1",
    speed: "40 ft.",
    stats: [5, 17, 10, 7, 10, 10],
    skillsaves: [{ stealth: 5 }],
    damage_vulnerabilities: "",
    damage_resistances: "cold; fire; lightning; bludgeoning, piercing, and slashing from nonmagical weapons",
    damage_immunities: "poison",
    condition_immunities: "poisoned",
    senses: "darkvision 120 ft., passive Perception 10",
    languages: "Abyssal, Common",
    cr: "1",
    traits: [
      {
        name: "Shapechanger",
        desc: "The quasit can use its action to polymorph into a beast form that resembles a bat (speed 10 ft. fly 40 ft.), a centipede (40 ft., climb 40 ft.), or a toad (40 ft., swim 40 ft.), or back into its true form . Its statistics are the same in each form, except for the speed changes noted. Any equipment it is wearing or carrying isn't transformed . It reverts to its true form if it dies.",
        attack_bonus: 0
      },
      {
        name: "Magic Resistance",
        desc: "The quasit has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      },
      {
        name: "Variant: Familiar",
        desc: "The quasit can serve another creature as a familiar, forming a telepathic bond with its willing master. While the two are bonded, the master can sense what the quasit senses as long as they are within 1 mile of each other. While the quasit is within 10 feet of its master, the master shares the quasit's Magic Resistance trait. At any time and for any reason, the quasit can end its service as a familiar, ending the telepathic bond.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Claw (Bite in Beast Form)",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft ., one target. Hit: 5 (1d4 + 3) piercing damage, and the target must succeed on a DC 10 Constitution saving throw or take 5 (2d4) poison damage and become poisoned for 1 minute. The target can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success.",
        attack_bonus: 4,
        damage_dice: "1d4",
        damage_bonus: 3
      },
      {
        name: "Scare (1/day)",
        desc: "One creature of the quasit's choice within 20 ft. of it must succeed on a DC 10 Wisdom saving throw or be frightened for 1 minute. The target can repeat the saving throw at the end of each of its turns, with disadvantage if the quasit is within line of sight, ending the effect on itself on a success.",
        attack_bonus: 0
      },
      {
        name: "Invisibility",
        desc: "The quasit magically turns invisible until it attacks or uses Scare, or until its concentration ends (as if concentrating on a spell). Any equipment the quasit wears or carries is invisible with it.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Quipper",
    size: "Tiny",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 13,
    hp: 1,
    hit_dice: "1d4 + -2",
    speed: "swim 40 ft.",
    stats: [2, 16, 9, 1, 7, 2],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 8",
    languages: "",
    cr: "0",
    traits: [
      {
        name: "Blood Frenzy",
        desc: "The quipper has advantage on melee attack rolls against any creature that doesn't have all its hit points.",
        attack_bonus: 0
      },
      {
        name: "Water Breathing",
        desc: "The quipper can breathe only underwater.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 1 piercing damage.",
        attack_bonus: 5,
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Rakshasa",
    size: "Medium",
    type: "fiend",
    subtype: "",
    alignment: "lawful evil",
    ac: 16,
    hp: 110,
    hit_dice: "13d8 + 51",
    speed: "40 ft.",
    stats: [14, 17, 18, 13, 16, 20],
    skillsaves: [{ deception: 10 }, { insight: 8 }],
    damage_vulnerabilities: "piercing from magic weapons wielded by good creatures",
    damage_resistances: "",
    damage_immunities: "bludgeoning, piercing, and slashing from nonmagical weapons",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 13",
    languages: "Common, Infernal",
    cr: "13",
    traits: [
      {
        name: "Limited Magic Immunity",
        desc: "The rakshasa can't be affected or detected by spells of 6th level or lower unless it wishes to be. It has advantage on saving throws against all other spells and magical effects.",
        attack_bonus: 0
      },
      {
        name: "Innate Spellcasting",
        desc: "The rakshasa's innate spellcasting ability is Charisma (spell save DC 18, +10 to hit with spell attacks). The rakshasa can innately cast the following spells, requiring no material components:\\n\\nAt will: detect thoughts, disguise self, mage hand, minor illusion\\n3/day each: charm person, detect magic, invisibility, major image, suggestion\\n1/day each: dominate person, fly, plane shift, true seeing",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The rakshasa makes two claw attacks",
        attack_bonus: 0
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 9 (2d6 + 2) slashing damage, and the target is cursed if it is a creature. The magical curse takes effect whenever the target takes a short or long rest, filling the target's thoughts with horrible images and dreams. The cursed target gains no benefit from finishing a short or long rest. The curse lasts until it is lifted by a remove curse spell or similar magic.",
        attack_bonus: 7,
        damage_dice: "2d6",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Rat",
    size: "Tiny",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 10,
    hp: 1,
    hit_dice: "1d4 + -2",
    speed: "20 ft.",
    stats: [2, 11, 9, 2, 10, 4],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 30 ft., passive Perception 10",
    languages: "",
    cr: "0",
    traits: [
      {
        name: "Keen Smell",
        desc: "The rat has advantage on Wisdom (Perception) checks that rely on smell.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +0 to hit, reach 5 ft., one target. Hit: 1 piercing damage.",
        attack_bonus: 0,
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Raven",
    size: "Tiny",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 1,
    hit_dice: "1d4 + -2",
    speed: "10 ft., fly 50 ft.",
    stats: [2, 14, 8, 2, 12, 6],
    skillsaves: [{ perception: 3 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 13",
    languages: "",
    cr: "0",
    traits: [
      {
        name: "Mimicry",
        desc: "The raven can mimic simple sounds it has heard, such as a person whispering, a baby crying, or an animal chittering. A creature that hears the sounds can tell they are imitations with a successful DC 10 Wisdom (Insight) check.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Beak",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 1 piercing damage.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Red Dragon Wyrmling",
    size: "Medium",
    type: "dragon",
    subtype: "",
    alignment: "chaotic evil",
    ac: 17,
    hp: 75,
    hit_dice: "10d8 + 30",
    speed: "30 ft., climb 30 ft., fly 60 ft.",
    stats: [19, 10, 17, 12, 11, 15],
    saves: [
      { dexterity: 2 },
      { constitution: 5 },
      { wisdom: 2 },
      { charisma: 4 }
    ],
    skillsaves: [{ perception: 4 }, { stealth: 2 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "fire",
    condition_immunities: "",
    senses: "blindsight 10 ft., darkvision 60 ft., passive Perception 14",
    languages: "Draconic",
    cr: "4",
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 9 (1d10 + 4) piercing damage plus 3 (1d6) fire damage.",
        attack_bonus: 6,
        damage_dice: "1d10 + 1d6",
        damage_bonus: 4
      },
      {
        name: "Fire Breath (Recharge 5-6)",
        desc: "The dragon exhales fire in a 15-foot cone. Each creature in that area must make a DC 13 Dexterity saving throw, taking 24 (7d6) fire damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "7d6"
      }
    ]
  },
  {
    name: "Reef Shark",
    size: "Medium",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 22,
    hit_dice: "4d8 + 4",
    speed: "swim 40 ft.",
    stats: [14, 13, 13, 1, 10, 4],
    skillsaves: [{ perception: 2 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "blindsight 30 ft., passive Perception 12",
    languages: "",
    cr: "1/2",
    traits: [
      {
        name: "Pack Tactics",
        desc: "The shark has advantage on an attack roll against a creature if at least one of the shark's allies is within 5 ft. of the creature and the ally isn't incapacitated.",
        attack_bonus: 0
      },
      {
        name: "Water Breathing",
        desc: "The shark can breathe only underwater.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 6 (1d8 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d8",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Remorhaz",
    size: "Huge",
    type: "monstrosity",
    subtype: "",
    alignment: "unaligned",
    ac: 17,
    hp: 195,
    hit_dice: "17d12 + 84",
    speed: "30 ft., burrow 20 ft.",
    stats: [24, 13, 21, 4, 10, 5],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "cold, fire",
    condition_immunities: "",
    senses: "darkvision 60 ft., tremorsense 60 ft., passive Perception 10",
    languages: "",
    cr: "11",
    traits: [
      {
        name: "Heated Body",
        desc: "A creature that touches the remorhaz or hits it with a melee attack while within 5 feet of it takes 10 (3d6) fire damage.",
        attack_bonus: 0,
        damage_dice: "3d6"
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +11 to hit, reach 10 ft., one target. Hit: 40 (6d10 + 7) piercing damage plus 10 (3d6) fire damage. If the target is a creature, it is grappled (escape DC 17). Until this grapple ends, the target is restrained, and the remorhaz can't bite another target.",
        attack_bonus: 11,
        damage_dice: "6d10 + 3d6",
        damage_bonus: 7
      },
      {
        name: "Swallow",
        desc: "The remorhaz makes one bite attack against a Medium or smaller creature it is grappling. If the attack hits, that creature takes the bite's damage and is swallowed, and the grapple ends. While swallowed, the creature is blinded and restrained, it has total cover against attacks and other effects outside the remorhaz, and it takes 21 (6d6) acid damage at the start of each of the remorhaz's turns.\\nIf the remorhaz takes 30 damage or more on a single turn from a creature inside it, the remorhaz must succeed on a DC 15 Constitution saving throw at the end of that turn or regurgitate all swallowed creatures, which fall prone in a space within 10 feet oft he remorhaz. If the remorhaz dies, a swallowed creature is no longer restrained by it and can escape from the corpse using 15 feet of movement, exiting prone.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Rhinoceros",
    size: "Large",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 11,
    hp: 45,
    hit_dice: "6d10 + 12",
    speed: "40 ft.",
    stats: [21, 8, 15, 2, 12, 6],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 11",
    languages: "",
    cr: "2",
    traits: [
      {
        name: "Charge",
        desc: "If the rhinoceros moves at least 20 ft. straight toward a target and then hits it with a gore attack on the same turn, the target takes an extra 9 (2d8) bludgeoning damage. If the target is a creature, it must succeed on a DC 15 Strength saving throw or be knocked prone.",
        attack_bonus: 0,
        damage_dice: "2d8"
      }
    ],
    actions: [
      {
        name: "Gore",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 14 (2d8 + 5) bludgeoning damage.",
        attack_bonus: 7,
        damage_dice: "2d8",
        damage_bonus: 5
      }
    ]
  },
  {
    name: "Riding Horse",
    size: "Large",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 10,
    hp: 13,
    hit_dice: "2d10 + 2",
    speed: "60 ft.",
    stats: [16, 10, 12, 2, 11, 7],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 10",
    languages: "",
    cr: "1/4",
    actions: [
      {
        name: "Hooves",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 8 (2d4 + 3) bludgeoning damage.",
        attack_bonus: 5,
        damage_dice: "2d4",
        damage_bonus: 3
      }
    ]
  },
  {
    name: "Roc",
    size: "Gargantuan",
    type: "monstrosity",
    subtype: "",
    alignment: "unaligned",
    ac: 15,
    hp: 248,
    hit_dice: "16d20 + 80",
    speed: "20 ft., fly 120 ft.",
    stats: [28, 10, 20, 3, 10, 9],
    saves: [
      { dexterity: 4 },
      { constitution: 9 },
      { wisdom: 4 },
      { charisma: 3 }
    ],
    skillsaves: [{ perception: 4 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 14",
    languages: "",
    cr: "11",
    traits: [
      {
        name: "Keen Sight",
        desc: "The roc has advantage on Wisdom (Perception) checks that rely on sight.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The roc makes two attacks: one with its beak and one with its talons.",
        attack_bonus: 0
      },
      {
        name: "Beak",
        desc: "Melee Weapon Attack: +13 to hit, reach 10 ft., one target. Hit: 27 (4d8 + 9) piercing damage.",
        attack_bonus: 13,
        damage_dice: "4d8",
        damage_bonus: 9
      },
      {
        name: "Talons",
        desc: "Melee Weapon Attack: +13 to hit, reach 5 ft., one target. Hit: 23 (4d6 + 9) slashing damage, and the target is grappled (escape DC 19). Until this grapple ends, the target is restrained, and the roc can't use its talons on another target.",
        attack_bonus: 13,
        damage_dice: "4d6",
        damage_bonus: 9
      }
    ]
  },
  {
    name: "Roper",
    size: "Large",
    type: "monstrosity",
    subtype: "",
    alignment: "neutral evil",
    ac: 20,
    hp: 93,
    hit_dice: "11d10 + 32",
    speed: "10 ft., climb 10 ft.",
    stats: [18, 8, 17, 7, 16, 6],
    skillsaves: [{ perception: 6 }, { stealth: 5 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 16",
    languages: "",
    cr: "5",
    traits: [
      {
        name: "False Appearance",
        desc: "While the roper remains motionless, it is indistinguishable from a normal cave formation, such as a stalagmite.",
        attack_bonus: 0
      },
      {
        name: "Grasping Tendrils",
        desc: "The roper can have up to six tendrils at a time. Each tendril can be attacked (AC 20; 10 hit points; immunity to poison and psychic damage). Destroying a tendril deals no damage to the roper, which can extrude a replacement tendril on its next turn. A tendril can also be broken if a creature takes an action and succeeds on a DC 15 Strength check against it.",
        attack_bonus: 0
      },
      {
        name: "Spider Climb",
        desc: "The roper can climb difficult surfaces, including upside down on ceilings, without needing to make an ability check.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The roper makes four attacks with its tendrils, uses Reel, and makes one attack with its bite.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 22 (4d8 + 4) piercing damage.",
        attack_bonus: 7,
        damage_dice: "4d8",
        damage_bonus: 4
      },
      {
        name: "Tendril",
        desc: "Melee Weapon Attack: +7 to hit, reach 50 ft., one creature. Hit: The target is grappled (escape DC 15). Until the grapple ends, the target is restrained and has disadvantage on Strength checks and Strength saving throws, and the roper can't use the same tendril on another target.",
        attack_bonus: 7
      },
      {
        name: "Reel",
        desc: "The roper pulls each creature grappled by it up to 25 ft. straight toward it.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Rug of Smothering",
    size: "Large",
    type: "construct",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 33,
    hit_dice: "6d10",
    speed: "10 ft.",
    stats: [17, 14, 10, 1, 3, 1],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "poison, psychic",
    condition_immunities: "blinded, charmed, deafened, frightened, paralyzed, petrified, poisoned",
    senses: "blindsight 60 ft. (blind beyond this radius), passive Perception 6",
    languages: "",
    cr: "2",
    traits: [
      {
        name: "Antimagic Susceptibility",
        desc: "The rug is incapacitated while in the area of an antimagic field. If targeted by dispel magic, the rug must succeed on a Constitution saving throw against the caster's spell save DC or fall unconscious for 1 minute.",
        attack_bonus: 0
      },
      {
        name: "Damage Transfer",
        desc: "While it is grappling a creature, the rug takes only half the damage dealt to it, and the creature grappled by the rug takes the other half.",
        attack_bonus: 0
      },
      {
        name: "False Appearance",
        desc: "While the rug remains motionless, it is indistinguishable from a normal rug.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Smother",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one Medium or smaller creature. Hit: The creature is grappled (escape DC 13). Until this grapple ends, the target is restrained, blinded, and at risk of suffocating, and the rug can't smother another target. In addition, at the start of each of the target's turns, the target takes 10 (2d6 + 3) bludgeoning damage.",
        attack_bonus: 0,
        damage_dice: "2d6",
        damage_bonus: 3
      }
    ]
  },
  {
    name: "Rust Monster",
    size: "Medium",
    type: "monstrosity",
    subtype: "",
    alignment: "unaligned",
    ac: 14,
    hp: 27,
    hit_dice: "5d8 + 4",
    speed: "40 ft.",
    stats: [13, 12, 13, 2, 13, 6],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 11",
    languages: "",
    cr: "1/2",
    traits: [
      {
        name: "Iron Scent",
        desc: "The rust monster can pinpoint, by scent, the location of ferrous metal within 30 feet of it.",
        attack_bonus: 0
      },
      {
        name: "Rust Metal",
        desc: "Any nonmagical weapon made of metal that hits the rust monster corrodes. After dealing damage, the weapon takes a permanent and cumulative -1 penalty to damage rolls. If its penalty drops to -5, the weapon is destroyed. Non magical ammunition made of metal that hits the rust monster is destroyed after dealing damage.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 5 (1d8 + 1) piercing damage.",
        attack_bonus: 3,
        damage_dice: "1d8",
        damage_bonus: 1
      },
      {
        name: "Antennae",
        desc: "The rust monster corrodes a nonmagical ferrous metal object it can see within 5 feet of it. If the object isn't being worn or carried, the touch destroys a 1-foot cube of it. If the object is being worn or carried by a creature, the creature can make a DC 11 Dexterity saving throw to avoid the rust monster's touch.\\nIf the object touched is either metal armor or a metal shield being worn or carried, its takes a permanent and cumulative -1 penalty to the AC it offers. Armor reduced to an AC of 10 or a shield that drops to a +0 bonus is destroyed. If the object touched is a held metal weapon, it rusts as described in the Rust Metal trait.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Saber-Toothed Tiger",
    size: "Large",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 52,
    hit_dice: "7d10 + 13",
    speed: "40 ft.",
    stats: [18, 14, 15, 3, 12, 8],
    skillsaves: [{ perception: 3 }, { stealth: 6 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 13",
    languages: "",
    cr: "2",
    traits: [
      {
        name: "Keen Smell",
        desc: "The tiger has advantage on Wisdom (Perception) checks that rely on smell.",
        attack_bonus: 0
      },
      {
        name: "Pounce",
        desc: "If the tiger moves at least 20 ft. straight toward a creature and then hits it with a claw attack on the same turn, that target must succeed on a DC 14 Strength saving throw or be knocked prone. If the target is prone, the tiger can make one bite attack against it as a bonus action.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 10 (1d10 + 5) piercing damage.",
        attack_bonus: 6,
        damage_dice: "1d10",
        damage_bonus: 5
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 12 (2d6 + 5) slashing damage.",
        attack_bonus: 6,
        damage_dice: "2d6",
        damage_bonus: 5
      }
    ]
  },
  {
    name: "Sahuagin",
    size: "Medium",
    type: "humanoid",
    subtype: "sahuagin",
    alignment: "lawful evil",
    ac: 12,
    hp: 22,
    hit_dice: "4d8 + 4",
    speed: "30 ft., swim 40 ft.",
    stats: [13, 11, 12, 12, 13, 9],
    skillsaves: [{ perception: 5 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 120 ft., passive Perception 15",
    languages: "Sahuagin",
    cr: "1/2",
    traits: [
      {
        name: "Blood Frenzy",
        desc: "The sahuagin has advantage on melee attack rolls against any creature that doesn't have all its hit points.",
        attack_bonus: 0
      },
      {
        name: "Limited Amphibiousness",
        desc: "The sahuagin can breathe air and water, but it needs to be submerged at least once every 4 hours to avoid suffocating.",
        attack_bonus: 0
      },
      {
        name: "Shark Telepathy",
        desc: "The sahuagin can magically command any shark within 120 feet of it, using a limited telepathy.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The sahuagin makes two melee attacks: one with its bite and one with its claws or spear.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 3 (1d4 + 1) piercing damage.",
        attack_bonus: 3,
        damage_dice: "1d4",
        damage_bonus: 1
      },
      {
        name: "Claws",
        desc: "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 3 (1d4 + 1) slashing damage.",
        attack_bonus: 3,
        damage_dice: "1d4",
        damage_bonus: 1
      },
      {
        name: "Spear",
        desc: "Melee or Ranged Weapon Attack: +3 to hit, reach 5 ft. or range 20/60 ft., one target. Hit: 4 (1d6 + 1) piercing damage, or 5 (1d8 + 1) piercing damage if used with two hands to make a melee attack.",
        attack_bonus: 3,
        damage_dice: "1d6",
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Salamander",
    size: "Large",
    type: "elemental",
    subtype: "",
    alignment: "neutral evil",
    ac: 15,
    hp: 90,
    hit_dice: "12d10 + 24",
    speed: "30 ft.",
    stats: [18, 14, 15, 11, 10, 12],
    damage_vulnerabilities: "cold",
    damage_resistances: "bludgeoning, piercing, and slashing from nonmagical weapons",
    damage_immunities: "fire",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 10",
    languages: "Ignan",
    cr: "5",
    traits: [
      {
        name: "Heated Body",
        desc: "A creature that touches the salamander or hits it with a melee attack while within 5 ft. of it takes 7 (2d6) fire damage.",
        attack_bonus: 0,
        damage_dice: "2d6"
      },
      {
        name: "Heated Weapons",
        desc: "Any metal melee weapon the salamander wields deals an extra 3 (1d6) fire damage on a hit (included in the attack).",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The salamander makes two attacks: one with its spear and one with its tail.",
        attack_bonus: 0
      },
      {
        name: "Spear",
        desc: "Melee or Ranged Weapon Attack: +7 to hit, reach 5 ft. or range 20 ft./60 ft., one target. Hit: 11 (2d6 + 4) piercing damage, or 13 (2d8 + 4) piercing damage if used with two hands to make a melee attack, plus 3 (1d6) fire damage.",
        attack_bonus: 7,
        damage_dice: "2d6",
        damage_bonus: 4
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +7 to hit, reach 10 ft., one target. Hit: 11 (2d6 + 4) bludgeoning damage plus 7 (2d6) fire damage, and the target is grappled (escape DC 14). Until this grapple ends, the target is restrained, the salamander can automatically hit the target with its tail, and the salamander can't make tail attacks against other targets.",
        attack_bonus: 7,
        damage_dice: "2d6 + 2d6",
        damage_bonus: 4
      }
    ]
  },
  {
    name: "Satyr",
    size: "Medium",
    type: "fey",
    subtype: "",
    alignment: "chaotic neutral",
    ac: 14,
    hp: 31,
    hit_dice: "7d8 + -1",
    speed: "40 ft.",
    stats: [12, 16, 11, 12, 10, 14],
    skillsaves: [{ perception: 2 }, { performance: 6 }, { stealth: 5 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 12",
    languages: "Common, Elvish, Sylvan",
    cr: "1/2",
    traits: [
      {
        name: "Magic Resistance",
        desc: "The satyr has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Ram",
        desc: "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 6 (2d4 + 1) bludgeoning damage.",
        attack_bonus: 3,
        damage_dice: "2d4",
        damage_bonus: 1
      },
      {
        name: "Shortsword",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 6 (1 d6 + 3) piercing damage.",
        attack_bonus: 5,
        damage_dice: "1d6",
        damage_bonus: 3
      },
      {
        name: "Shortbow",
        desc: "Ranged Weapon Attack: +5 to hit, range 80/320 ft., one target. Hit: 6 (1d6 + 3) piercing damage.",
        attack_bonus: 5,
        damage_dice: "1d6",
        damage_bonus: 3
      },
      {
        name: "Variant: Panpipes",
        desc: "Gentle Lullaby. The creature falls asleep and is unconscious for 1 minute. The effect ends if the creature takes damage or if someone takes an action to shake the creature awake.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Scorpion",
    size: "Tiny",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 11,
    hp: 1,
    hit_dice: "1d4 + -2",
    speed: "10 ft.",
    stats: [2, 11, 8, 1, 8, 2],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "blindsight 10 ft., passive Perception 9",
    languages: "",
    cr: "0",
    actions: [
      {
        name: "Sting",
        desc: "Melee Weapon Attack: +2 to hit, reach 5 ft., one creature. Hit: 1 piercing damage, and the target must make a DC 9 Constitution saving throw, taking 4 (1d8) poison damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 2,
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Scout",
    size: "Medium",
    type: "humanoid",
    subtype: "any race",
    alignment: "any alignment",
    ac: 13,
    hp: 16,
    hit_dice: "3d8 + 2",
    speed: "30 ft.",
    stats: [11, 14, 12, 11, 13, 11],
    skillsaves: [
      { nature: 4 },
      { perception: 5 },
      { stealth: 6 },
      { survival: 5 }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 15",
    languages: "any one language (usually Common)",
    cr: "1/2",
    traits: [
      {
        name: "Keen Hearing and Sight",
        desc: "The scout has advantage on Wisdom (Perception) checks that rely on hearing or sight.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The scout makes two melee attacks or two ranged attacks.",
        attack_bonus: 0
      },
      {
        name: "Shortsword",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 5 (1d6 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d6",
        damage_bonus: 2
      },
      {
        name: "Longbow",
        desc: "Ranged Weapon Attack: +4 to hit, ranged 150/600 ft., one target. Hit: 6 (1d8 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d8",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Sea Hag",
    size: "Medium",
    type: "fey",
    subtype: "",
    alignment: "chaotic evil",
    ac: 14,
    hp: 52,
    hit_dice: "7d8 + 20",
    speed: "30 ft., swim 40 ft.",
    stats: [16, 13, 16, 12, 12, 13],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 11",
    languages: "Aquan, Common, Giant",
    cr: "2",
    traits: [
      {
        name: "Amphibious",
        desc: "The hag can breathe air and water.",
        attack_bonus: 0
      },
      {
        name: "Horrific Appearance",
        desc: "Any humanoid that starts its turn within 30 feet of the hag and can see the hag's true form must make a DC 11 Wisdom saving throw. On a failed save, the creature is frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, with disadvantage if the hag is within line of sight, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the hag's Horrific Appearance for the next 24 hours.\\nUnless the target is surprised or the revelation of the hag's true form is sudden, the target can avert its eyes and avoid making the initial saving throw. Until the start of its next turn, a creature that averts its eyes has disadvantage on attack rolls against the hag.",
        attack_bonus: 0
      },
      {
        name: "Hag Coven",
        desc: "When hags must work together, they form covens, in spite of their selfish natures. A coven is made up of hags of any type, all of whom are equals within the group. However, each of the hags continues to desire more personal power.\\nA coven consists of three hags so that any arguments between two hags can be settled by the third. If more than three hags ever come together, as might happen if two covens come into conflict, the result is usually chaos.",
        attack_bonus: 0
      },
      {
        name: "Shared Spellcasting (Coven Only)",
        desc: "While all three members of a hag coven are within 30 feet of one another, they can each cast the following spells from the wizard's spell list but must share the spell slots among themselves:\\n\\n\u2022 1st level (4 slots): identify, ray of sickness\\n\u2022 2nd level (3 slots): hold person, locate object\\n\u2022 3rd level (3 slots): bestow curse, counterspell, lightning bolt\\n\u2022 4th level (3 slots): phantasmal killer, polymorph\\n\u2022 5th level (2 slots): contact other plane, scrying\\n\u2022 6th level (1 slot): eye bite\\n\\nFor casting these spells, each hag is a 12th-level spellcaster that uses Intelligence as her spellcasting ability. The spell save DC is 12+the hag's Intelligence modifier, and the spell attack bonus is 4+the hag's Intelligence modifier.",
        attack_bonus: 0
      },
      {
        name: "Hag Eye (Coven Only)",
        desc: "A hag coven can craft a magic item called a hag eye, which is made from a real eye coated in varnish and often fitted to a pendant or other wearable item. The hag eye is usually entrusted to a minion for safekeeping and transport. A hag in the coven can take an action to see what the hag eye sees if the hag eye is on the same plane of existence. A hag eye has AC 10, 1 hit point, and darkvision with a radius of 60 feet. If it is destroyed, each coven member takes 3d10 psychic damage and is blinded for 24 hours.\\nA hag coven can have only one hag eye at a time, and creating a new one requires all three members of the coven to perform a ritual. The ritual takes 1 hour, and the hags can't perform it while blinded. During the ritual, if the hags take any action other than performing the ritual, they must start over.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Claws",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 10 (2d6 + 3) slashing damage.",
        attack_bonus: 5,
        damage_dice: "2d6",
        damage_bonus: 3
      },
      {
        name: "Death Glare",
        desc: "The hag targets one frightened creature she can see within 30 ft. of her. If the target can see the hag, it must succeed on a DC 11 Wisdom saving throw against this magic or drop to 0 hit points.",
        attack_bonus: 0
      },
      {
        name: "Illusory Appearance",
        desc: "The hag covers herself and anything she is wearing or carrying with a magical illusion that makes her look like an ugly creature of her general size and humanoid shape. The effect ends if the hag takes a bonus action to end it or if she dies.\\nThe changes wrought by this effect fail to hold up to physical inspection. For example, the hag could appear to have no claws, but someone touching her hand might feel the claws. Otherwise, a creature must take an action to visually inspect the illusion and succeed on a DC 16 Intelligence (Investigation) check to discern that the hag is disguised.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Sea Horse",
    size: "Tiny",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 11,
    hp: 1,
    hit_dice: "1d4 + -2",
    speed: "swim 20 ft.",
    stats: [1, 12, 8, 1, 10, 2],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 10",
    languages: "",
    cr: "0",
    traits: [
      {
        name: "Water Breathing",
        desc: "The sea horse can breathe only underwater.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Shadow",
    size: "Medium",
    type: "undead",
    subtype: "",
    alignment: "chaotic evil",
    ac: 12,
    hp: 16,
    hit_dice: "3d8 + 2",
    speed: "40 ft.",
    stats: [6, 14, 13, 6, 10, 8],
    skillsaves: [{ stealth: 4 }],
    damage_vulnerabilities: "radiant",
    damage_resistances: "acid, cold, fire, lightning, thunder; bludgeoning, piercing, and slashing from nonmagical weapons",
    damage_immunities: "necrotic, poison",
    condition_immunities: "exhaustion, frightened, grappled, paralyzed, petrified, poisoned, prone, restrained",
    senses: "darkvision 60 ft., passive Perception 10",
    languages: "",
    cr: "1/2",
    traits: [
      {
        name: "Amorphous",
        desc: "The shadow can move through a space as narrow as 1 inch wide without squeezing.",
        attack_bonus: 0
      },
      {
        name: "Shadow Stealth",
        desc: "While in dim light or darkness, the shadow can take the Hide action as a bonus action. Its stealth bonus is also improved to +6.",
        attack_bonus: 0
      },
      {
        name: "Sunlight Weakness",
        desc: "While in sunlight, the shadow has disadvantage on attack rolls, ability checks, and saving throws.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Strength Drain",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one creature. Hit: 9 (2d6 + 2) necrotic damage, and the target's Strength score is reduced by 1d4. The target dies if this reduces its Strength to 0. Otherwise, the reduction lasts until the target finishes a short or long rest.\\nIf a non-evil humanoid dies from this attack, a new shadow rises from the corpse 1d4 hours later.",
        attack_bonus: 4,
        damage_dice: "2d6",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Shambling Mound",
    size: "Large",
    type: "plant",
    subtype: "",
    alignment: "unaligned",
    ac: 15,
    hp: 136,
    hit_dice: "16d10 + 48",
    speed: "20 ft., swim 20 ft.",
    stats: [18, 8, 16, 5, 10, 5],
    skillsaves: [{ stealth: 2 }],
    damage_vulnerabilities: "",
    damage_resistances: "cold, fire",
    damage_immunities: "lightning",
    condition_immunities: "blinded, deafened, exhaustion",
    senses: "blindsight 60 ft. (blind beyond this radius), passive Perception 10",
    languages: "",
    cr: "5",
    traits: [
      {
        name: "Lightning Absorption",
        desc: "Whenever the shambling mound is subjected to lightning damage, it takes no damage and regains a number of hit points equal to the lightning damage dealt.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The shambling mound makes two slam attacks. If both attacks hit a Medium or smaller target, the target is grappled (escape DC 14), and the shambling mound uses its Engulf on it.",
        attack_bonus: 0
      },
      {
        name: "Slam",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 13 (2d8 + 4) bludgeoning damage.",
        attack_bonus: 7,
        damage_dice: "2d8",
        damage_bonus: 4
      },
      {
        name: "Engulf",
        desc: "The shambling mound engulfs a Medium or smaller creature grappled by it. The engulfed target is blinded, restrained, and unable to breathe, and it must succeed on a DC 14 Constitution saving throw at the start of each of the mound's turns or take 13 (2d8 + 4) bludgeoning damage. If the mound moves, the engulfed target moves with it. The mound can have only one creature engulfed at a time.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Shield Guardian",
    size: "Large",
    type: "construct",
    subtype: "",
    alignment: "unaligned",
    ac: 17,
    hp: 142,
    hit_dice: "15d10 + 59",
    speed: "30 ft.",
    stats: [18, 8, 18, 7, 10, 3],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "poison",
    condition_immunities: "charmed, exhaustion, frightened, paralyzed, poisoned",
    senses: "blindsight 10 ft., darkvision 60 ft., passive Perception 10",
    languages: "understands commands given in any language but can't speak",
    cr: "7",
    traits: [
      {
        name: "Bound",
        desc: "The shield guardian is magically bound to an amulet. As long as the guardian and its amulet are on the same plane of existence, the amulet's wearer can telepathically call the guardian to travel to it, and the guardian knows the distance and direction to the amulet. If the guardian is within 60 feet of the amulet's wearer, half of any damage the wearer takes (rounded up) is transferred to the guardian.",
        attack_bonus: 0
      },
      {
        name: "Regeneration",
        desc: "The shield guardian regains 10 hit points at the start of its turn if it has at least 1 hit. point.",
        attack_bonus: 0
      },
      {
        name: "Spell Storing",
        desc: "A spellcaster who wears the shield guardian's amulet can cause the guardian to store one spell of 4th level or lower. To do so, the wearer must cast the spell on the guardian. The spell has no effect but is stored within the guardian. When commanded to do so by the wearer or when a situation arises that was predefined by the spellcaster, the guardian casts the stored spell with any parameters set by the original caster, requiring no components. When the spell is cast or a new spell is stored, any previously stored spell is lost.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The guardian makes two fist attacks.",
        attack_bonus: 0
      },
      {
        name: "Fist",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 11 (2d6 + 4) bludgeoning damage.",
        attack_bonus: 7,
        damage_dice: "2d6",
        damage_bonus: 4
      }
    ],
    reactions: [
      {
        name: "Shield",
        desc: "When a creature makes an attack against the wearer of the guardian's amulet, the guardian grants a +2 bonus to the wearer's AC if the guardian is within 5 feet of the wearer.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Shrieker",
    size: "Medium",
    type: "plant",
    subtype: "",
    alignment: "unaligned",
    ac: 5,
    hp: 13,
    hit_dice: "3d8 + -1",
    speed: "0 ft.",
    stats: [1, 1, 10, 1, 3, 1],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "blinded, deafened, frightened",
    senses: "blindsight 30 ft. (blind beyond this radius), passive Perception 6",
    languages: "",
    cr: "0",
    traits: [
      {
        name: "False Appearance",
        desc: "While the shrieker remains motionless, it is indistinguishable from an ordinary fungus.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Shriek",
        desc: "When bright light or a creature is within 30 feet of the shrieker, it emits a shriek audible within 300 feet of it. The shrieker continues to shriek until the disturbance moves out of range and for 1d4 of the shrieker's turns afterward",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Silver Dragon Wyrmling",
    size: "Medium",
    type: "dragon",
    subtype: "",
    alignment: "lawful good",
    ac: 17,
    hp: 45,
    hit_dice: "6d8 + 18",
    speed: "30 ft., fly 60 ft.",
    stats: [19, 10, 17, 12, 11, 15],
    saves: [
      { dexterity: 2 },
      { constitution: 5 },
      { wisdom: 2 },
      { charisma: 4 }
    ],
    skillsaves: [{ perception: 4 }, { stealth: 2 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "cold",
    condition_immunities: "",
    senses: "blindsight 10 ft., darkvision 60 ft., passive Perception 14",
    languages: "Draconic",
    cr: "2",
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 9 (1d10 + 4) piercing damage.",
        attack_bonus: 6,
        damage_dice: "1d10",
        damage_bonus: 4
      },
      {
        name: "Breath Weapons (Recharge 5-6)",
        desc: "The dragon uses one of the following breath weapons.\\nCold Breath. The dragon exhales an icy blast in a 15-foot cone. Each creature in that area must make a DC 13 Constitution saving throw, taking 18 (4d8) cold damage on a failed save, or half as much damage on a successful one.\\nParalyzing Breath. The dragon exhales paralyzing gas in a 15-foot cone. Each creature in that area must succeed on a DC 13 Constitution saving throw or be paralyzed for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success.",
        attack_bonus: 0,
        damage_dice: "4d8"
      }
    ]
  },
  {
    name: "Skeleton",
    size: "Medium",
    type: "undead",
    subtype: "",
    alignment: "lawful evil",
    ac: 13,
    hp: 13,
    hit_dice: "2d8 + 4",
    speed: "30 ft.",
    stats: [10, 14, 15, 6, 8, 5],
    damage_vulnerabilities: "bludgeoning",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "poisoned",
    senses: "darkvision 60 ft., passive Perception 9",
    languages: "understands all languages it spoke in life but can't speak",
    cr: "1/4",
    actions: [
      {
        name: "Shortsword",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 5 (1d6 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d6",
        damage_bonus: 2
      },
      {
        name: "Shortbow",
        desc: "Ranged Weapon Attack: +4 to hit, range 80/320 ft., one target. Hit: 5 (1d6 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d6",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Solar",
    size: "Large",
    type: "celestial",
    subtype: "",
    alignment: "lawful good",
    ac: 21,
    hp: 243,
    hit_dice: "18d10 + 144",
    speed: "50 ft., fly 150 ft.",
    stats: [26, 22, 26, 25, 25, 30],
    saves: [{ intelligence: 14 }, { wisdom: 14 }, { charisma: 17 }],
    skillsaves: [{ perception: 14 }],
    damage_vulnerabilities: "",
    damage_resistances: "radiant; bludgeoning, piercing, and slashing from nonmagical weapons",
    damage_immunities: "necrotic, poison",
    condition_immunities: "charmed, exhaustion, frightened, poisoned",
    senses: "truesight 120 ft., passive Perception 24",
    languages: "all, telepathy 120 ft.",
    cr: "21",
    traits: [
      {
        name: "Angelic Weapons",
        desc: "The solar's weapon attacks are magical. When the solar hits with any weapon, the weapon deals an extra 6d8 radiant damage (included in the attack).",
        attack_bonus: 0
      },
      {
        name: "Divine Awareness",
        desc: "The solar knows if it hears a lie.",
        attack_bonus: 0
      },
      {
        name: "Innate Spellcasting",
        desc: "The solar's spell casting ability is Charisma (spell save DC 25). It can innately cast the following spells, requiring no material components:\\nAt will: detect evil and good, invisibility (self only)\\n3/day each: blade barrier, dispel evil and good, resurrection\\n1/day each: commune, control weather",
        attack_bonus: 0
      },
      {
        name: "Magic Resistance",
        desc: "The solar has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The solar makes two greatsword attacks.",
        attack_bonus: 0
      },
      {
        name: "Greatsword",
        desc: "Melee Weapon Attack: +15 to hit, reach 5 ft., one target. Hit: 22 (4d6 + 8) slashing damage plus 27 (6d8) radiant damage.",
        attack_bonus: 15,
        damage_dice: "4d6 + 6d8",
        damage_bonus: 8
      },
      {
        name: "Slaying Longbow",
        desc: "Ranged Weapon Attack: +13 to hit, range 150/600 ft., one target. Hit: 15 (2d8 + 6) piercing damage plus 27 (6d8) radiant damage. If the target is a creature that has 190 hit points or fewer, it must succeed on a DC 15 Constitution saving throw or die.",
        attack_bonus: 13,
        damage_dice: "2d8 + 6d8",
        damage_bonus: 6
      },
      {
        name: "Flying Sword",
        desc: "The solar releases its greatsword to hover magically in an unoccupied space within 5 ft. of it. If the solar can see the sword, the solar can mentally command it as a bonus action to fly up to 50 ft. and either make one attack against a target or return to the solar's hands. If the hovering sword is targeted by any effect, the solar is considered to be holding it. The hovering sword falls if the solar dies.",
        attack_bonus: 0
      },
      {
        name: "Healing Touch (4/Day)",
        desc: "The solar touches another creature. The target magically regains 40 (8d8 + 4) hit points and is freed from any curse, disease, poison, blindness, or deafness.",
        attack_bonus: 0
      }
    ],
    legendary_actions: [
      {
        name: "Teleport",
        desc: "The solar magically teleports, along with any equipment it is wearing or carrying, up to 120 ft. to an unoccupied space it can see.",
        attack_bonus: 0
      },
      {
        name: "Searing Burst (Costs 2 Actions)",
        desc: "The solar emits magical, divine energy. Each creature of its choice in a 10 -foot radius must make a DC 23 Dexterity saving throw, taking 14 (4d6) fire damage plus 14 (4d6) radiant damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0
      },
      {
        name: "Blinding Gaze (Costs 3 Actions)",
        desc: "The solar targets one creature it can see within 30 ft. of it. If the target can see it, the target must succeed on a DC 15 Constitution saving throw or be blinded until magic such as the lesser restoration spell removes the blindness.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Specter",
    size: "Medium",
    type: "undead",
    subtype: "",
    alignment: "chaotic evil",
    ac: 12,
    hp: 22,
    hit_dice: "5d8 + -1",
    speed: "0 ft., fly 50 ft. (hover)",
    stats: [1, 14, 11, 10, 10, 11],
    damage_vulnerabilities: "",
    damage_resistances: "acid, cold, fire, lightning, thunder; bludgeoning, piercing, and slashing from nonmagical weapons",
    damage_immunities: "necrotic, poison",
    condition_immunities: "charmed, exhaustion, grappled, paralyzed, petrified, poisoned, prone, restrained, unconscious",
    senses: "darkvision 60 ft., passive Perception 10",
    languages: "understands all languages it knew in life but can't speak",
    cr: "1",
    traits: [
      {
        name: "Incorporeal Movement",
        desc: "The specter can move through other creatures and objects as if they were difficult terrain. It takes 5 (1d10) force damage if it ends its turn inside an object.",
        attack_bonus: 0
      },
      {
        name: "Sunlight Sensitivity",
        desc: "While in sunlight, the specter has disadvantage on attack rolls, as well as on Wisdom (Perception) checks that rely on sight.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Life Drain",
        desc: "Melee Spell Attack: +4 to hit, reach 5 ft., one creature. Hit: 10 (3d6) necrotic damage. The target must succeed on a DC 10 Constitution saving throw or its hit point maximum is reduced by an amount equal to the damage taken. This reduction lasts until the creature finishes a long rest. The target dies if this effect reduces its hit point maximum to 0.",
        attack_bonus: 4,
        damage_dice: "3d6"
      }
    ]
  },
  {
    name: "Spider",
    size: "Tiny",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 1,
    hit_dice: "1d4 + -2",
    speed: "20 ft., climb 20 ft.",
    stats: [2, 14, 8, 1, 10, 2],
    skillsaves: [{ stealth: 4 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 30 ft., passive Perception 12",
    languages: "",
    cr: "0",
    traits: [
      {
        name: "Spider Climb",
        desc: "The spider can climb difficult surfaces, including upside down on ceilings, without needing to make an ability check.",
        attack_bonus: 0
      },
      {
        name: "Web Sense",
        desc: "While in contact with a web, the spider knows the exact location of any other creature in contact with the same web.",
        attack_bonus: 0
      },
      {
        name: "Web Walker",
        desc: "The spider ignores movement restrictions caused by webbing.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one creature. Hit: 1 piercing damage, and the target must succeed on a DC 9 Constitution saving throw or take 2 (1d4) poison damage.",
        attack_bonus: 4,
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Spirit Naga",
    size: "Large",
    type: "monstrosity",
    subtype: "",
    alignment: "chaotic evil",
    ac: 15,
    hp: 75,
    hit_dice: "10d10 + 20",
    speed: "40 ft.",
    stats: [18, 17, 14, 16, 15, 16],
    saves: [
      { dexterity: 6 },
      { constitution: 5 },
      { wisdom: 5 },
      { charisma: 6 }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "poison",
    condition_immunities: "charmed, poisoned",
    senses: "darkvision 60 ft., passive Perception 12",
    languages: "Abyssal, Common",
    cr: "8",
    traits: [
      {
        name: "Rejuvenation",
        desc: "If it dies, the naga returns to life in 1d6 days and regains all its hit points. Only a wish spell can prevent this trait from functioning.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +7 to hit, reach 10 ft., one creature. Hit: 7 (1d6 + 4) piercing damage, and the target must make a DC 13 Constitution saving throw, taking 31 (7d8) poison damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 7,
        damage_dice: "1d6",
        damage_bonus: 4
      }
    ],
    spells: [
      "The naga is a 10th-level spellcaster. Its spellcasting ability is Intelligence (spell save DC 14, +6 to hit with spell attacks), and it needs only verbal components to cast its spells. It has the following wizard spells prepared:",
      { "Cantrips (at will)": "mage hand, minor illusion, ray of frost" },
      { "1st level (4 slots)": "charm person, detect magic, sleep" },
      { "2nd level (3 slots)": "detect thoughts, hold person" },
      { "3rd level (3 slots)": "lightning bolt, water breathing" },
      { "4th level (3 slots)": "blight, dimension door" },
      { "5th level (2 slots)": "dominate person" }
    ]
  },
  {
    name: "Sprite",
    size: "Tiny",
    type: "fey",
    subtype: "",
    alignment: "neutral good",
    ac: 15,
    hp: 2,
    hit_dice: "1d4 + -1",
    speed: "10 ft., fly 40 ft.",
    stats: [3, 18, 10, 14, 13, 11],
    skillsaves: [{ perception: 3 }, { stealth: 8 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 13",
    languages: "Common, Elvish, Sylvan",
    cr: "1/4",
    actions: [
      {
        name: "Longsword",
        desc: "Melee Weapon Attack: +2 to hit, reach 5 ft., one target. Hit: 1 slashing damage.",
        attack_bonus: 2,
        damage_bonus: 1
      },
      {
        name: "Shortbow",
        desc: "Ranged Weapon Attack: +6 to hit, range 40/160 ft., one target. Hit: 1 piercing damage, and the target must succeed on a DC 10 Constitution saving throw or become poisoned for 1 minute. If its saving throw result is 5 or lower, the poisoned target falls unconscious for the same duration, or until it takes damage or another creature takes an action to shake it awake.",
        attack_bonus: 6,
        damage_bonus: 1
      },
      {
        name: "Heart Sight",
        desc: "The sprite touches a creature and magically knows the creature's current emotional state. If the target fails a DC 10 Charisma saving throw, the sprite also knows the creature's alignment. Celestials, fiends, and undead automatically fail the saving throw.",
        attack_bonus: 0
      },
      {
        name: "Invisibility",
        desc: "The sprite magically turns invisible until it attacks or casts a spell, or until its concentration ends (as if concentrating on a spell). Any equipment the sprite wears or carries is invisible with it.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Spy",
    size: "Medium",
    type: "humanoid",
    subtype: "any race",
    alignment: "any alignment",
    ac: 12,
    hp: 27,
    hit_dice: "6d8",
    speed: "30 ft.",
    stats: [10, 15, 10, 12, 14, 16],
    skillsaves: [
      { deception: 5 },
      { insight: 4 },
      { investigation: 5 },
      { perception: 6 },
      { persuasion: 5 },
      { stealth: 4 }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 16",
    languages: "any two languages",
    cr: "1",
    traits: [
      {
        name: "Cunning Action",
        desc: "On each of its turns, the spy can use a bonus action to take the Dash, Disengage, or Hide action.",
        attack_bonus: 0
      },
      {
        name: "Sneak Attack (1/Turn)",
        desc: "The spy deals an extra 7 (2d6) damage when it hits a target with a weapon attack and has advantage on the attack roll, or when the target is within 5 ft. of an ally of the spy that isn't incapacitated and the spy doesn't have disadvantage on the attack roll.",
        attack_bonus: 0,
        damage_dice: "2d6"
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The spy makes two melee attacks.",
        attack_bonus: 0
      },
      {
        name: "Shortsword",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 5 (1d6 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d6",
        damage_bonus: 2
      },
      {
        name: "Hand Crossbow",
        desc: "Ranged Weapon Attack: +4 to hit, range 30/120 ft., one target. Hit: 5 (1d6 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d6",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Steam Mephit",
    size: "Small",
    type: "elemental",
    subtype: "",
    alignment: "neutral evil",
    ac: 10,
    hp: 21,
    hit_dice: "6d6",
    speed: "30 ft., fly 30 ft.",
    stats: [5, 11, 10, 11, 10, 12],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "fire, poison",
    condition_immunities: "poisoned",
    senses: "darkvision 60 ft., passive Perception 10",
    languages: "Aquan, Ignan",
    cr: "1/4",
    traits: [
      {
        name: "Death Burst",
        desc: "When the mephit dies, it explodes in a cloud of steam. Each creature within 5 ft. of the mephit must succeed on a DC 10 Dexterity saving throw or take 4 (1d8) fire damage.",
        attack_bonus: 0,
        damage_dice: "1d8"
      },
      {
        name: "Innate Spellcasting (1/Day)",
        desc: "The mephit can innately cast blur, requiring no material components. Its innate spellcasting ability is Charisma.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Claws",
        desc: "Melee Weapon Attack: +2 to hit, reach 5 ft., one creature. Hit: 2 (1d4) slashing damage plus 2 (1d4) fire damage.",
        attack_bonus: 2,
        damage_dice: "2d4"
      },
      {
        name: "Steam Breath (Recharge 6)",
        desc: "The mephit exhales a 15-foot cone of scalding steam. Each creature in that area must succeed on a DC 10 Dexterity saving throw, taking 4 (1d8) fire damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0
      },
      {
        name: "Variant: Summon Mephits (1/Day)",
        desc: "The mephit has a 25 percent chance of summoning 1d4 mephits of its kind. A summoned mephit appears in an unoccupied space within 60 feet of its summoner, acts as an ally of its summoner, and can't summon other mephits. It remains for 1 minute, until it or its summoner dies, or until its summoner dismisses it as an action.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Stirge",
    size: "Tiny",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 14,
    hp: 2,
    hit_dice: "1d4 + -1",
    speed: "10 ft., fly 40 ft.",
    stats: [4, 16, 11, 2, 8, 6],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 9",
    languages: "",
    cr: "1/8",
    actions: [
      {
        name: "Blood Drain",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one creature. Hit: 5 (1d4 + 3) piercing damage, and the stirge attaches to the target. While attached, the stirge doesn't attack. Instead, at the start of each of the stirge's turns, the target loses 5 (1d4 + 3) hit points due to blood loss.\\nThe stirge can detach itself by spending 5 feet of its movement. It does so after it drains 10 hit points of blood from the target or the target dies. A creature, including the target, can use its action to detach the stirge.",
        attack_bonus: 5,
        damage_dice: "1d4",
        damage_bonus: 3
      }
    ]
  },
  {
    name: "Stone Giant",
    size: "Huge",
    type: "giant",
    subtype: "",
    alignment: "neutral",
    ac: 17,
    hp: 126,
    hit_dice: "11d12 + 54",
    speed: "40 ft.",
    stats: [23, 15, 20, 10, 12, 9],
    saves: [{ dexterity: 5 }, { constitution: 8 }, { wisdom: 4 }],
    skillsaves: [{ athletics: 12 }, { perception: 4 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 14",
    languages: "Giant",
    cr: "7",
    traits: [
      {
        name: "Stone Camouflage",
        desc: "The giant has advantage on Dexterity (Stealth) checks made to hide in rocky terrain.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The giant makes two greatclub attacks.",
        attack_bonus: 0
      },
      {
        name: "Greatclub",
        desc: "Melee Weapon Attack: +9 to hit, reach 15 ft., one target. Hit: 19 (3d8 + 6) bludgeoning damage.",
        attack_bonus: 9,
        damage_dice: "3d8",
        damage_bonus: 6
      },
      {
        name: "Rock",
        desc: "Ranged Weapon Attack: +9 to hit, range 60/240 ft., one target. Hit: 28 (4d10 + 6) bludgeoning damage. If the target is a creature, it must succeed on a DC 17 Strength saving throw or be knocked prone.",
        attack_bonus: 9,
        damage_dice: "4d10",
        damage_bonus: 6
      }
    ],
    reactions: [
      {
        name: "Rock Catching",
        desc: "If a rock or similar object is hurled at the giant, the giant can, with a successful DC 10 Dexterity saving throw, catch the missile and take no bludgeoning damage from it.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Stone Golem",
    size: "Large",
    type: "construct",
    subtype: "",
    alignment: "unaligned",
    ac: 17,
    hp: 178,
    hit_dice: "17d10 + 84",
    speed: "30 ft.",
    stats: [22, 9, 20, 3, 11, 1],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "poison, psychic; bludgeoning, piercing, and slashing from nonmagical weapons that aren't adamantine",
    condition_immunities: "charmed, exhaustion, frightened, paralyzed, petrified, poisoned",
    senses: "darkvision 120 ft., passive Perception 10",
    languages: "understands the languages of its creator but can't speak",
    cr: "10",
    traits: [
      {
        name: "Immutable Form",
        desc: "The golem is immune to any spell or effect that would alter its form.",
        attack_bonus: 0
      },
      {
        name: "Magic Resistance",
        desc: "The golem has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      },
      {
        name: "Magic Weapons",
        desc: "The golem's weapon attacks are magical.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The golem makes two slam attacks.",
        attack_bonus: 0
      },
      {
        name: "Slam",
        desc: "Melee Weapon Attack: +10 to hit, reach 5 ft., one target. Hit: 19 (3d8 + 6) bludgeoning damage.",
        attack_bonus: 10,
        damage_dice: "3d8",
        damage_bonus: 6
      },
      {
        name: "Slow (Recharge 5-6)",
        desc: "The golem targets one or more creatures it can see within 10 ft. of it. Each target must make a DC 17 Wisdom saving throw against this magic. On a failed save, a target can't use reactions, its speed is halved, and it can't make more than one attack on its turn. In addition, the target can take either an action or a bonus action on its turn, not both. These effects last for 1 minute. A target can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Storm Giant",
    size: "Huge",
    type: "giant",
    subtype: "",
    alignment: "chaotic good",
    ac: 16,
    hp: 230,
    hit_dice: "20d12 + 100",
    speed: "50 ft., swim 50 ft.",
    stats: [29, 14, 20, 16, 18, 18],
    saves: [
      { strength: 14 },
      { constitution: 10 },
      { wisdom: 9 },
      { charisma: 9 }
    ],
    skillsaves: [
      { arcana: 8 },
      { athletics: 14 },
      { history: 8 },
      { perception: 9 }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "cold",
    damage_immunities: "lightning, thunder",
    condition_immunities: "",
    senses: "passive Perception 19",
    languages: "Common, Giant",
    cr: "13",
    traits: [
      {
        name: "Amphibious",
        desc: "The giant can breathe air and water.",
        attack_bonus: 0
      },
      {
        name: "Innate Spellcasting",
        desc: "The giant's innate spellcasting ability is Charisma (spell save DC 17). It can innately cast the following spells, requiring no material components:\\n\\nAt will: detect magic, feather fall, levitate, light\\n3/day each: control weather, water breathing",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The giant makes two greatsword attacks.",
        attack_bonus: 0
      },
      {
        name: "Greatsword",
        desc: "Melee Weapon Attack: +14 to hit, reach 10 ft., one target. Hit: 30 (6d6 + 9) slashing damage.",
        attack_bonus: 14,
        damage_dice: "6d6",
        damage_bonus: 9
      },
      {
        name: "Rock",
        desc: "Ranged Weapon Attack: +14 to hit, range 60/240 ft., one target. Hit: 35 (4d12 + 9) bludgeoning damage.",
        attack_bonus: 14,
        damage_dice: "4d12",
        damage_bonus: 9
      },
      {
        name: "Lightning Strike (Recharge 5-6)",
        desc: "The giant hurls a magical lightning bolt at a point it can see within 500 feet of it. Each creature within 10 feet of that point must make a DC 17 Dexterity saving throw, taking 54 (12d8) lightning damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "12d8"
      }
    ]
  },
  {
    name: "Succubus/Incubus",
    size: "Medium",
    type: "fiend",
    subtype: "shapechanger",
    alignment: "neutral evil",
    ac: 15,
    hp: 66,
    hit_dice: "12d8 + 12",
    speed: "30 ft., fly 60 ft.",
    stats: [8, 17, 13, 15, 12, 20],
    skillsaves: [
      { deception: 9 },
      { insight: 5 },
      { perception: 5 },
      { persuasion: 9 },
      { stealth: 7 }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "cold, fire, lightning, poison; bludgeoning, piercing, and slashing from nonmagical weapons",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 15",
    languages: "Abyssal, Common, Infernal, telepathy 60 ft.",
    cr: "4",
    traits: [
      {
        name: "Telepathic Bond",
        desc: "The fiend ignores the range restriction on its telepathy when communicating with a creature it has charmed. The two don't even need to be on the same plane of existence.",
        attack_bonus: 0
      },
      {
        name: "Shapechanger",
        desc: "The fiend can use its action to polymorph into a Small or Medium humanoid, or back into its true form. Without wings, the fiend loses its flying speed. Other than its size and speed, its statistics are the same in each form. Any equipment it is wearing or carrying isn't transformed. It reverts to its true form if it dies.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Claw (Fiend Form Only)",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 6 (1d6 + 3) slashing damage.",
        attack_bonus: 5,
        damage_dice: "1d6",
        damage_bonus: 3
      },
      {
        name: "Charm",
        desc: "One humanoid the fiend can see within 30 feet of it must succeed on a DC 15 Wisdom saving throw or be magically charmed for 1 day. The charmed target obeys the fiend's verbal or telepathic commands. If the target suffers any harm or receives a suicidal command, it can repeat the saving throw, ending the effect on a success. If the target successfully saves against the effect, or if the effect on it ends, the target is immune to this fiend's Charm for the next 24 hours.\\nThe fiend can have only one target charmed at a time. If it charms another, the effect on the previous target ends.",
        attack_bonus: 0
      },
      {
        name: "Draining Kiss",
        desc: "The fiend kisses a creature charmed by it or a willing creature. The target must make a DC 15 Constitution saving throw against this magic, taking 32 (5d10 + 5) psychic damage on a failed save, or half as much damage on a successful one. The target's hit point maximum is reduced by an amount equal to the damage taken. This reduction lasts until the target finishes a long rest. The target dies if this effect reduces its hit point maximum to 0.",
        attack_bonus: 0,
        damage_dice: "5d10",
        damage_bonus: 5
      },
      {
        name: "Etherealness",
        desc: "The fiend magically enters the Ethereal Plane from the Material Plane, or vice versa.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Swarm of Bats",
    size: "Medium",
    type: "swarm of Tiny beasts",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 22,
    hit_dice: "5d8 + -1",
    speed: "0 ft., fly 30 ft.",
    stats: [5, 15, 10, 2, 12, 4],
    damage_vulnerabilities: "",
    damage_resistances: "bludgeoning, piercing, slashing",
    damage_immunities: "",
    condition_immunities: "charmed, frightened, grappled, paralyzed, petrified, prone, restrained, stunned",
    senses: "blindsight 60 ft., passive Perception 11",
    languages: "",
    cr: "1/4",
    traits: [
      {
        name: "Echolocation",
        desc: "The swarm can't use its blindsight while deafened.",
        attack_bonus: 0
      },
      {
        name: "Keen Hearing",
        desc: "The swarm has advantage on Wisdom (Perception) checks that rely on hearing.",
        attack_bonus: 0
      },
      {
        name: "Swarm",
        desc: "The swarm can occupy another creature's space and vice versa, and the swarm can move through any opening large enough for a Tiny bat. The swarm can't regain hit points or gain temporary hit points.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bites",
        desc: "Melee Weapon Attack: +4 to hit, reach 0 ft., one creature in the swarm's space. Hit: 5 (2d4) piercing damage, or 2 (1d4) piercing damage if the swarm has half of its hit points or fewer.",
        attack_bonus: 4,
        damage_dice: "2d4"
      }
    ]
  },
  {
    name: "Swarm of Beetles",
    size: "Medium",
    type: "swarm of Tiny beasts",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 22,
    hit_dice: "5d8 + -1",
    speed: "20 ft., burrow 5 ft., climb 20 ft.",
    stats: [3, 13, 10, 1, 7, 1],
    damage_vulnerabilities: "",
    damage_resistances: "bludgeoning, piercing, slashing",
    damage_immunities: "",
    condition_immunities: "charmed, frightened, grappled, paralyzed, petrified, prone, restrained, stunned",
    senses: "blindsight 10 ft., passive Perception 8",
    languages: "",
    cr: "1/2",
    traits: [
      {
        name: "Swarm",
        desc: "The swarm can occupy another creature's space and vice versa, and the swarm can move through any opening large enough for a Tiny insect. The swarm can't regain hit points or gain temporary hit points.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bites",
        desc: "Melee Weapon Attack: +3 to hit, reach 0 ft., one target in the swarm's space. Hit: 10 (4d4) piercing damage, or 5 (2d4) piercing damage if the swarm has half of its hit points or fewer.",
        attack_bonus: 3,
        damage_dice: "4d4"
      }
    ]
  },
  {
    name: "Swarm of Centipedes",
    size: "Medium",
    type: "swarm of Tiny beasts",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 22,
    hit_dice: "5d8 + -1",
    speed: "20 ft., climb 20 ft.",
    stats: [3, 13, 10, 1, 7, 1],
    damage_vulnerabilities: "",
    damage_resistances: "bludgeoning, piercing, slashing",
    damage_immunities: "",
    condition_immunities: "charmed, frightened, grappled, paralyzed, petrified, prone, restrained, stunned",
    senses: "blindsight 10 ft., passive Perception 8",
    languages: "",
    cr: "1/2",
    traits: [
      {
        name: "Swarm",
        desc: "The swarm can occupy another creature's space and vice versa, and the swarm can move through any opening large enough for a Tiny insect. The swarm can't regain hit points or gain temporary hit points.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bites",
        desc: "Melee Weapon Attack: +3 to hit, reach 0 ft., one target in the swarm's space. Hit: 10 (4d4) piercing damage, or 5 (2d4) piercing damage if the swarm has half of its hit points or fewer.\\nA creature reduced to 0 hit points by a swarm of centipedes is stable but poisoned for 1 hour, even after regaining hit points, and paralyzed while poisoned in this way.",
        attack_bonus: 3,
        damage_dice: "4d4"
      }
    ]
  },
  {
    name: "Swarm of Insects",
    size: "Medium",
    type: "swarm of Tiny beasts",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 22,
    hit_dice: "5d8 + -1",
    speed: "20 ft., climb 20 ft.",
    stats: [3, 13, 10, 1, 7, 1],
    damage_vulnerabilities: "",
    damage_resistances: "bludgeoning, piercing, slashing",
    damage_immunities: "",
    condition_immunities: "charmed, frightened, grappled, paralyzed, petrified, prone, restrained, stunned",
    senses: "blindsight 10 ft., passive Perception 8",
    languages: "",
    cr: "1/2",
    traits: [
      {
        name: "Swarm",
        desc: "The swarm can occupy another creature's space and vice versa, and the swarm can move through any opening large enough for a Tiny insect. The swarm can't regain hit points or gain temporary hit points.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bites",
        desc: "Melee Weapon Attack: +3 to hit, reach 0 ft., one target in the swarm's space. Hit: 10 (4d4) piercing damage, or 5 (2d4) piercing damage if the swarm has half of its hit points or fewer.",
        attack_bonus: 3,
        damage_dice: "4d4"
      }
    ]
  },
  {
    name: "Swarm of Poisonous Snakes",
    size: "Medium",
    type: "swarm of Tiny beasts",
    subtype: "",
    alignment: "unaligned",
    ac: 14,
    hp: 36,
    hit_dice: "8d8",
    speed: "30 ft., swim 30 ft.",
    stats: [8, 18, 11, 1, 10, 3],
    damage_vulnerabilities: "",
    damage_resistances: "bludgeoning, piercing, slashing",
    damage_immunities: "",
    condition_immunities: "charmed, frightened, grappled, paralyzed, petrified, prone, restrained, stunned",
    senses: "blindsight 10 ft., passive Perception 10",
    languages: "",
    cr: "2",
    traits: [
      {
        name: "Swarm",
        desc: "The swarm can occupy another creature's space and vice versa, and the swarm can move through any opening large enough for a Tiny snake. The swarm can't regain hit points or gain temporary hit points.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bites",
        desc: "Melee Weapon Attack: +6 to hit, reach 0 ft., one creature in the swarm's space. Hit: 7 (2d6) piercing damage, or 3 (1d6) piercing damage if the swarm has half of its hit points or fewer. The target must make a DC 10 Constitution saving throw, taking 14 (4d6) poison damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 6,
        damage_dice: "2d6"
      }
    ]
  },
  {
    name: "Swarm of Quippers",
    size: "Medium",
    type: "swarm of Tiny beasts",
    subtype: "",
    alignment: "unaligned",
    ac: 13,
    hp: 28,
    hit_dice: "8d8 + -8",
    speed: "0 ft., swim 40 ft.",
    stats: [13, 16, 9, 1, 7, 2],
    damage_vulnerabilities: "",
    damage_resistances: "bludgeoning, piercing, slashing",
    damage_immunities: "",
    condition_immunities: "charmed, frightened, grappled, paralyzed, petrified, prone, restrained, stunned",
    senses: "darkvision 60 ft., passive Perception 8",
    languages: "",
    cr: "1",
    traits: [
      {
        name: "Blood Frenzy",
        desc: "The swarm has advantage on melee attack rolls against any creature that doesn't have all its hit points.",
        attack_bonus: 0
      },
      {
        name: "Swarm",
        desc: "The swarm can occupy another creature's space and vice versa, and the swarm can move through any opening large enough for a Tiny quipper. The swarm can't regain hit points or gain temporary hit points.",
        attack_bonus: 0
      },
      {
        name: "Water Breathing",
        desc: "The swarm can breathe only underwater.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bites",
        desc: "Melee Weapon Attack: +5 to hit, reach 0 ft., one creature in the swarm's space. Hit: 14 (4d6) piercing damage, or 7 (2d6) piercing damage if the swarm has half of its hit points or fewer.",
        attack_bonus: 5,
        damage_dice: "4d6"
      }
    ]
  },
  {
    name: "Swarm of Rats",
    size: "Medium",
    type: "swarm of Tiny beasts",
    subtype: "",
    alignment: "unaligned",
    ac: 10,
    hp: 24,
    hit_dice: "7d8 + -8",
    speed: "30 ft.",
    stats: [9, 11, 9, 2, 10, 3],
    damage_vulnerabilities: "",
    damage_resistances: "bludgeoning, piercing, slashing",
    damage_immunities: "",
    condition_immunities: "charmed, frightened, grappled, paralyzed, petrified, prone, restrained, stunned",
    senses: "darkvision 30 ft., passive Perception 10",
    languages: "",
    cr: "1/4",
    traits: [
      {
        name: "Keen Smell",
        desc: "The swarm has advantage on Wisdom (Perception) checks that rely on smell.",
        attack_bonus: 0
      },
      {
        name: "Swarm",
        desc: "The swarm can occupy another creature's space and vice versa, and the swarm can move through any opening large enough for a Tiny rat. The swarm can't regain hit points or gain temporary hit points.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bites",
        desc: "Melee Weapon Attack: +2 to hit, reach 0 ft., one target in the swarm's space. Hit: 7 (2d6) piercing damage, or 3 (1d6) piercing damage if the swarm has half of its hit points or fewer.",
        attack_bonus: 2,
        damage_dice: "2d6"
      }
    ]
  },
  {
    name: "Swarm of Ravens",
    size: "Medium",
    type: "swarm of Tiny beasts",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 24,
    hit_dice: "7d8 + -8",
    speed: "10 ft., fly 50 ft.",
    stats: [6, 14, 8, 3, 12, 6],
    damage_vulnerabilities: "",
    damage_resistances: "bludgeoning, piercing, slashing",
    damage_immunities: "",
    condition_immunities: "charmed, frightened, grappled, paralyzed, petrified, prone, restrained, stunned",
    senses: "passive Perception 15",
    languages: "",
    cr: "1/4",
    traits: [
      {
        name: "Swarm",
        desc: "The swarm can occupy another creature's space and vice versa, and the swarm can move through any opening large enough for a Tiny raven. The swarm can't regain hit points or gain temporary hit points.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Beaks",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target in the swarm's space. Hit: 7 (2d6) piercing damage, or 3 (1d6) piercing damage if the swarm has half of its hit points or fewer.",
        attack_bonus: 4,
        damage_dice: "2d6"
      }
    ]
  },
  {
    name: "Swarm of Spiders",
    size: "Medium",
    type: "swarm of Tiny beasts",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 22,
    hit_dice: "5d8 + -1",
    speed: "20 ft., climb 20 ft.",
    stats: [3, 13, 10, 1, 7, 1],
    damage_vulnerabilities: "",
    damage_resistances: "bludgeoning, piercing, slashing",
    damage_immunities: "",
    condition_immunities: "charmed, frightened, paralyzed, petrified, prone, restrained, stunned",
    senses: "blindsight 10 ft., passive Perception 8",
    languages: "",
    cr: "1/2",
    traits: [
      {
        name: "Swarm",
        desc: "The swarm can occupy another creature's space and vice versa, and the swarm can move through any opening large enough for a Tiny insect. The swarm can't regain hit points or gain temporary hit points.",
        attack_bonus: 0
      },
      {
        name: "Spider Climb",
        desc: "The swarm can climb difficult surfaces, including upside down on ceilings, without needing to make an ability check.",
        attack_bonus: 0
      },
      {
        name: "Web Sense",
        desc: "While in contact with a web, the swarm knows the exact location of any other creature in contact with the same web.",
        attack_bonus: 0
      },
      {
        name: "Web Walker",
        desc: "The swarm ignores movement restrictions caused by webbing.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bites",
        desc: "Melee Weapon Attack: +3 to hit, reach 0 ft., one target in the swarm's space. Hit: 10 (4d4) piercing damage, or 5 (2d4) piercing damage if the swarm has half of its hit points or fewer.",
        attack_bonus: 3,
        damage_dice: "4d4"
      }
    ]
  },
  {
    name: "Swarm of Wasps",
    size: "Medium",
    type: "swarm of Tiny beasts",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 22,
    hit_dice: "5d8 + -1",
    speed: "5 ft., fly 30 ft.",
    stats: [3, 13, 10, 1, 7, 1],
    damage_vulnerabilities: "",
    damage_resistances: "bludgeoning, piercing, slashing",
    damage_immunities: "",
    condition_immunities: "charmed, frightened, grappled, paralyzed, petrified, prone, restrained, stunned",
    senses: "blindsight 10 ft., passive Perception 8",
    languages: "",
    cr: "1/2",
    traits: [
      {
        name: "Swarm",
        desc: "The swarm can occupy another creature's space and vice versa, and the swarm can move through any opening large enough for a Tiny insect. The swarm can't regain hit points or gain temporary hit points.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bites",
        desc: "Melee Weapon Attack: +3 to hit, reach 0 ft., one target in the swarm's space. Hit: 10 (4d4) piercing damage, or 5 (2d4) piercing damage if the swarm has half of its hit points or fewer.",
        attack_bonus: 3,
        damage_dice: "4d4"
      }
    ]
  },
  {
    name: "Tarrasque",
    size: "Gargantuan",
    type: "monstrosity",
    subtype: "titan",
    alignment: "unaligned",
    ac: 25,
    hp: 676,
    hit_dice: "33d20 + 329",
    speed: "40 ft.",
    stats: [30, 11, 30, 3, 11, 11],
    saves: [{ intelligence: 5 }, { wisdom: 9 }, { charisma: 9 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "fire, poison; bludgeoning, piercing, and slashing from nonmagical weapons",
    condition_immunities: "charmed, frightened, paralyzed, poisoned",
    senses: "blindsight 120 ft., passive Perception 10",
    languages: "",
    cr: "30",
    traits: [
      {
        name: "Legendary Resistance (3/Day)",
        desc: "If the tarrasque fails a saving throw, it can choose to succeed instead.",
        attack_bonus: 0
      },
      {
        name: "Magic Resistance",
        desc: "The tarrasque has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      },
      {
        name: "Reflective Carapace",
        desc: "Any time the tarrasque is targeted by a magic missile spell, a line spell, or a spell that requires a ranged attack roll, roll a d6. On a 1 to 5, the tarrasque is unaffected. On a 6, the tarrasque is unaffected, and the effect is reflected back at the caster as though it originated from the tarrasque, turning the caster into the target.",
        attack_bonus: 0
      },
      {
        name: "Siege Monster",
        desc: "The tarrasque deals double damage to objects and structures.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The tarrasque can use its Frightful Presence. It then makes five attacks: one with its bite, two with its claws, one with its horns, and one with its tai l. It can use its Swallow instead of its bite.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +19 to hit, reach 10 ft., one target. Hit: 36 (4d12 + 10) piercing damage. If the target is a creature, it is grappled (escape DC 20). Until this grapple ends, the target is restrained, and the tarrasque can't bite another target.",
        attack_bonus: 19,
        damage_dice: "4d12",
        damage_bonus: 10
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +19 to hit, reach 15 ft., one target. Hit: 28 (4d8 + 10) slashing damage.",
        attack_bonus: 19,
        damage_dice: "4d8",
        damage_bonus: 10
      },
      {
        name: "Horns",
        desc: "Melee Weapon Attack: +19 to hit, reach 10 ft., one target. Hit: 32 (4d10 + 10) piercing damage.",
        attack_bonus: 19,
        damage_dice: "4d10",
        damage_bonus: 10
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +19 to hit, reach 20 ft., one target. Hit: 24 (4d6 + 10) bludgeoning damage. If the target is a creature, it must succeed on a DC 20 Strength saving throw or be knocked prone.",
        attack_bonus: 19,
        damage_dice: "4d6",
        damage_bonus: 10
      },
      {
        name: "Frightful Presence",
        desc: "Each creature of the tarrasque's choice within 120 feet of it and aware of it must succeed on a DC 17 Wisdom saving throw or become frightened for 1 minute. A creature can repeat the saving throw at the end of each of its turns, with disadvantage if the tarrasque is within line of sight, ending the effect on itself on a success. If a creature's saving throw is successful or the effect ends for it, the creature is immune to the tarrasque's Frightful Presence for the next 24 hours.",
        attack_bonus: 0
      },
      {
        name: "Swallow",
        desc: "The tarrasque makes one bite attack against a Large or smaller creature it is grappling. If the attack hits, the target takes the bite's damage, the target is swallowed, and the grapple ends. While swallowed, the creature is blinded and restrained, it has total cover against attacks and other effects outside the tarrasque, and it takes 56 (16d6) acid damage at the start of each of the tarrasque's turns.\\nIf the tarrasque takes 60 damage or more on a single turn from a creature inside it, the tarrasque must succeed on a DC 20 Constitution saving throw at the end of that turn or regurgitate all swallowed creatures, which fall prone in a space within 10 feet of the tarrasque. If the tarrasque dies, a swallowed creature is no longer restrained by it and can escape from the corpse by using 30 feet of movement, exiting prone.",
        attack_bonus: 0
      }
    ],
    legendary_actions: [
      {
        name: "Attack",
        desc: "The tarrasque makes one claw attack or tail attack.",
        attack_bonus: 0
      },
      {
        name: "Move",
        desc: "The tarrasque moves up to half its speed.",
        attack_bonus: 0
      },
      {
        name: "Chomp (Costs 2 Actions)",
        desc: "The tarrasque makes one bite attack or uses its Swallow.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Thug",
    size: "Medium",
    type: "humanoid",
    subtype: "any race",
    alignment: "any non-good alignment",
    ac: 11,
    hp: 32,
    hit_dice: "5d8 + 9",
    speed: "30 ft.",
    stats: [15, 11, 14, 10, 10, 11],
    skillsaves: [{ intimidation: 2 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 10",
    languages: "any one language (usually Common)",
    cr: "1/2",
    traits: [
      {
        name: "Pack Tactics",
        desc: "The thug has advantage on an attack roll against a creature if at least one of the thug's allies is within 5 ft. of the creature and the ally isn't incapacitated.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The thug makes two melee attacks.",
        attack_bonus: 0
      },
      {
        name: "Mace",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one creature. Hit: 5 (1d6 + 2) bludgeoning damage.",
        attack_bonus: 4,
        damage_dice: "1d6",
        damage_bonus: 2
      },
      {
        name: "Heavy Crossbow",
        desc: "Ranged Weapon Attack: +2 to hit, range 100/400 ft., one target. Hit: 5 (1d10) piercing damage.",
        attack_bonus: 2,
        damage_dice: "1d10"
      }
    ]
  },
  {
    name: "Tiger",
    size: "Large",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 12,
    hp: 37,
    hit_dice: "5d10 + 9",
    speed: "40 ft.",
    stats: [17, 15, 14, 3, 12, 8],
    skillsaves: [{ perception: 3 }, { stealth: 6 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 13",
    languages: "",
    cr: "1",
    traits: [
      {
        name: "Keen Smell",
        desc: "The tiger has advantage on Wisdom (Perception) checks that rely on smell.",
        attack_bonus: 0
      },
      {
        name: "Pounce",
        desc: "If the tiger moves at least 20 ft. straight toward a creature and then hits it with a claw attack on the same turn, that target must succeed on a DC 13 Strength saving throw or be knocked prone. If the target is prone, the tiger can make one bite attack against it as a bonus action.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 8 (1d10 + 3) piercing damage.",
        attack_bonus: 5,
        damage_dice: "1d10",
        damage_bonus: 3
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 7 (1d8 + 3) slashing damage.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Treant",
    size: "Huge",
    type: "plant",
    subtype: "",
    alignment: "chaotic good",
    ac: 16,
    hp: 138,
    hit_dice: "12d12 + 60",
    speed: "30 ft.",
    stats: [23, 8, 21, 12, 16, 12],
    damage_vulnerabilities: "fire",
    damage_resistances: "bludgeoning, piercing",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 13",
    languages: "Common, Druidic, Elvish, Sylvan",
    cr: "9",
    traits: [
      {
        name: "False Appearance",
        desc: "While the treant remains motionless, it is indistinguishable from a normal tree.",
        attack_bonus: 0
      },
      {
        name: "Siege Monster",
        desc: "The treant deals double damage to objects and structures.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The treant makes two slam attacks.",
        attack_bonus: 0
      },
      {
        name: "Slam",
        desc: "Melee Weapon Attack: +10 to hit, reach 5 ft., one target. Hit: 16 (3d6 + 6) bludgeoning damage.",
        attack_bonus: 10,
        damage_dice: "3d6",
        damage_bonus: 6
      },
      {
        name: "Rock",
        desc: "Ranged Weapon Attack: +10 to hit, range 60/180 ft., one target. Hit: 28 (4d10 + 6) bludgeoning damage.",
        attack_bonus: 10,
        damage_dice: "4d10",
        damage_bonus: 6
      },
      {
        name: "Animate Trees (1/Day)",
        desc: "The treant magically animates one or two trees it can see within 60 feet of it. These trees have the same statistics as a treant, except they have Intelligence and Charisma scores of 1, they can't speak, and they have only the Slam action option. An animated tree acts as an ally of the treant. The tree remains animate for 1 day or until it dies; until the treant dies or is more than 120 feet from the tree; or until the treant takes a bonus action to turn it back into an inanimate tree. The tree then takes root if possible.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Tribal Warrior",
    size: "Medium",
    type: "humanoid",
    subtype: "any race",
    alignment: "any alignment",
    ac: 12,
    hp: 11,
    hit_dice: "2d8 + 2",
    speed: "30 ft.",
    stats: [13, 11, 12, 8, 11, 8],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 10",
    languages: "any one language",
    cr: "1/8",
    traits: [
      {
        name: "Pack Tactics",
        desc: "The warrior has advantage on an attack roll against a creature if at least one of the warrior's allies is within 5 ft. of the creature and the ally isn't incapacitated.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Spear",
        desc: "Melee or Ranged Weapon Attack: +3 to hit, reach 5 ft. or range 20/60 ft., one target. Hit: 4 (1d6 + 1) piercing damage, or 5 (1d8 + 1) piercing damage if used with two hands to make a melee attack.",
        attack_bonus: 3,
        damage_dice: "1d6",
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Triceratops",
    size: "Huge",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 13,
    hp: 95,
    hit_dice: "10d12 + 30",
    speed: "50 ft.",
    stats: [22, 9, 17, 2, 11, 5],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 10",
    languages: "",
    cr: "5",
    traits: [
      {
        name: "Trampling Charge",
        desc: "If the triceratops moves at least 20 ft. straight toward a creature and then hits it with a gore attack on the same turn, that target must succeed on a DC 13 Strength saving throw or be knocked prone. If the target is prone, the triceratops can make one stomp attack against it as a bonus action.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Gore",
        desc: "Melee Weapon Attack: +9 to hit, reach 5 ft., one target. Hit: 24 (4d8 + 6) piercing damage.",
        attack_bonus: 9,
        damage_dice: "4d8",
        damage_bonus: 6
      },
      {
        name: "Stomp",
        desc: "Melee Weapon Attack: +9 to hit, reach 5 ft., one prone creature. Hit: 22 (3d10 + 6) bludgeoning damage",
        attack_bonus: 9,
        damage_dice: "3d10",
        damage_bonus: 6
      }
    ]
  },
  {
    name: "Troll",
    size: "Large",
    type: "giant",
    subtype: "",
    alignment: "chaotic evil",
    ac: 15,
    hp: 84,
    hit_dice: "8d10 + 40",
    speed: "30 ft.",
    stats: [18, 13, 20, 7, 9, 7],
    skillsaves: [{ perception: 2 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 12",
    languages: "Giant",
    cr: "5",
    traits: [
      {
        name: "Keen Smell",
        desc: "The troll has advantage on Wisdom (Perception) checks that rely on smell.",
        attack_bonus: 0
      },
      {
        name: "Regeneration",
        desc: "The troll regains 10 hit points at the start of its turn. If the troll takes acid or fire damage, this trait doesn't function at the start of the troll's next turn. The troll dies only if it starts its turn with 0 hit points and doesn't regenerate.",
        attack_bonus: 0
      },
      {
        name: "Variant: Loathsome Limbs",
        desc: "Whenever the troll takes at least 15 slashing damage at one time, roll a d20 to determine what else happens to it:\\n1-10: Nothing else happens.\\n11-14: One leg is severed from the troll if it has any legs left.\\n15- 18: One arm is severed from the troll if it has any arms left.\\n19-20: The troll is decapitated, but the troll dies only if it can't regenerate. If it dies, so does the severed head.\\nIf the troll finishes a short or long rest without reattaching a severed limb or head, the part regrows. At that point, the severed part dies. Until then, a severed part acts on the troll's initiative and has its own action and movement. A severed part has AC 13, 10 hit points, and the troll's Regeneration trait.\\nA severed leg is unable to attack and has a speed of 5 feet.\\nA severed arm has a speed of 5 feet and can make one claw attack on its turn, with disadvantage on the attack roll unless the troll can see the arm and its target. Each time the troll loses an arm, it loses a claw attack.\\nIf its head is severed, the troll loses its bite attack and its body is blinded unless the head can see it. The severed head has a speed of 0 feet and the troll's Keen Smell trait. It can make a bite attack but only against a target in its space.\\nThe troll's speed is halved if it's missing a leg. If it loses both legs, it falls prone. If it has both arms, it can crawl. With only one arm, it can still crawl, but its speed is halved. With no arms or legs, its speed is 0, and it can't benefit from bonuses to speed.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The troll makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 7 (1d6 + 4) piercing damage.",
        attack_bonus: 7,
        damage_dice: "1d6",
        damage_bonus: 4
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 11 (2d6 + 4) slashing damage.",
        attack_bonus: 7,
        damage_dice: "2d6",
        damage_bonus: 4
      }
    ]
  },
  {
    name: "Tyrannosaurus Rex",
    size: "Huge",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 13,
    hp: 136,
    hit_dice: "13d12 + 51",
    speed: "50 ft.",
    stats: [25, 10, 19, 2, 12, 9],
    skillsaves: [{ perception: 4 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 14",
    languages: "",
    cr: "8",
    actions: [
      {
        name: "Multiattack",
        desc: "The tyrannosaurus makes two attacks: one with its bite and one with its tail. It can't make both attacks against the same target.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +10 to hit, reach 10 ft., one target. Hit: 33 (4d12 + 7) piercing damage. If the target is a Medium or smaller creature, it is grappled (escape DC 17). Until this grapple ends, the target is restrained, and the tyrannosaurus can't bite another target.",
        attack_bonus: 10,
        damage_dice: "4d12",
        damage_bonus: 7
      },
      {
        name: "Tail",
        desc: "Melee Weapon Attack: +10 to hit, reach 10 ft., one target. Hit: 20 (3d8 + 7) bludgeoning damage.",
        attack_bonus: 10,
        damage_dice: "3d8",
        damage_bonus: 7
      }
    ]
  },
  {
    name: "Unicorn",
    size: "Large",
    type: "celestial",
    subtype: "",
    alignment: "lawful good",
    ac: 12,
    hp: 67,
    hit_dice: "9d10 + 17",
    speed: "50 ft.",
    stats: [18, 14, 15, 11, 17, 16],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "poison",
    condition_immunities: "charmed, paralyzed, poisoned",
    senses: "darkvision 60 ft., passive Perception 13",
    languages: "Celestial, Elvish, Sylvan, telepathy 60 ft.",
    cr: "5",
    traits: [
      {
        name: "Charge",
        desc: "If the unicorn moves at least 20 ft. straight toward a target and then hits it with a horn attack on the same turn, the target takes an extra 9 (2d8) piercing damage. If the target is a creature, it must succeed on a DC 15 Strength saving throw or be knocked prone.",
        attack_bonus: 0,
        damage_dice: "2d8"
      },
      {
        name: "Innate Spellcasting",
        desc: "The unicorn's innate spellcasting ability is Charisma (spell save DC 14). The unicorn can innately cast the following spells, requiring no components:\\n\\nAt will: detect evil and good, druidcraft, pass without trace\\n1/day each: calm emotions, dispel evil and good, entangle",
        attack_bonus: 0
      },
      {
        name: "Magic Resistance",
        desc: "The unicorn has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      },
      {
        name: "Magic Weapons",
        desc: "The unicorn's weapon attacks are magical.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The unicorn makes two attacks: one with its hooves and one with its horn.",
        attack_bonus: 0
      },
      {
        name: "Hooves",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft ., one target. Hit: 11 (2d6 + 4) bludgeoning damage.",
        attack_bonus: 7,
        damage_dice: "2d6",
        damage_bonus: 4
      },
      {
        name: "Horn",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft ., one target. Hit: 8 (1d8 + 4) piercing damage.",
        attack_bonus: 7,
        damage_dice: "1d8",
        damage_bonus: 4
      },
      {
        name: "Healing Touch (3/Day)",
        desc: "The unicorn touches another creature with its horn. The target magically regains 11 (2d8 + 2) hit points. In addition, the touch removes all diseases and neutralizes all poisons afflicting the target.",
        attack_bonus: 0
      },
      {
        name: "Teleport (1/Day)",
        desc: "The unicorn magically teleports itself and up to three willing creatures it can see within 5 ft. of it, along with any equipment they are wearing or carrying, to a location the unicorn is familiar with, up to 1 mile away.",
        attack_bonus: 0
      }
    ],
    legendary_actions: [
      {
        name: "Hooves",
        desc: "The unicorn makes one attack with its hooves.",
        attack_bonus: 0
      },
      {
        name: "Shimmering Shield (Costs 2 Actions)",
        desc: "The unicorn creates a shimmering, magical field around itself or another creature it can see within 60 ft. of it. The target gains a +2 bonus to AC until the end of the unicorn's next turn.",
        attack_bonus: 0
      },
      {
        name: "Heal Self (Costs 3 Actions)",
        desc: "The unicorn magically regains 11 (2d8 + 2) hit points.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Vampire",
    size: "Medium",
    type: "undead",
    subtype: "shapechanger",
    alignment: "lawful evil",
    ac: 16,
    hp: 144,
    hit_dice: "17d8 + 67",
    speed: "30 ft.",
    stats: [18, 18, 18, 17, 15, 18],
    saves: [{ dexterity: 9 }, { wisdom: 7 }, { charisma: 9 }],
    skillsaves: [{ perception: 7 }, { stealth: 9 }],
    damage_vulnerabilities: "",
    damage_resistances: "necrotic; bludgeoning, piercing, and slashing from nonmagical weapons",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 120 ft., passive Perception 17",
    languages: "the languages it knew in life",
    cr: "13",
    traits: [
      {
        name: "Shapechanger",
        desc: "If the vampire isn't in sun light or running water, it can use its action to polymorph into a Tiny bat or a Medium cloud of mist, or back into its true form.\\nWhile in bat form, the vampire can't speak, its walking speed is 5 feet, and it has a flying speed of 30 feet. Its statistics, other than its size and speed, are unchanged. Anything it is wearing transforms with it, but nothing it is carrying does. It reverts to its true form if it dies.\\nWhile in mist form, the vampire can't take any actions, speak, or manipulate objects. It is weightless, has a flying speed of 20 feet, can hover, and can enter a hostile creature's space and stop there. In addition, if air can pass through a space, the mist can do so without squeezing, and it can't pass through water. It has advantage on Strength, Dexterity, and Constitution saving throws, and it is immune to all nonmagical damage, except the damage it takes from sunlight.",
        attack_bonus: 0
      },
      {
        name: "Legendary Resistance (3/Day)",
        desc: "If the vampire fails a saving throw, it can choose to succeed instead.",
        attack_bonus: 0
      },
      {
        name: "Misty Escape",
        desc: "When it drops to 0 hit points outside its resting place, the vampire transforms into a cloud of mist (as in the Shapechanger trait) instead of falling unconscious, provided that it isn't in sunlight or running water. If it can't transform, it is destroyed.\\nWhile it has 0 hit points in mist form, it can't revert to its vampire form, and it must reach its resting place within 2 hours or be destroyed. Once in its resting place, it reverts to its vampire form. It is then paralyzed until it regains at least 1 hit point. After spending 1 hour in its resting place with 0 hit points, it regains 1 hit point.",
        attack_bonus: 0
      },
      {
        name: "Regeneration",
        desc: "The vampire regains 20 hit points at the start of its turn if it has at least 1 hit point and isn't in sunlight or running water. If the vampire takes radiant damage or damage from holy water, this trait doesn't function at the start of the vampire's next turn.",
        attack_bonus: 0
      },
      {
        name: "Spider Climb",
        desc: "The vampire can climb difficult surfaces, including upside down on ceilings, without needing to make an ability check.",
        attack_bonus: 0
      },
      {
        name: "Vampire Weaknesses",
        desc: "The vampire has the following flaws:\\nForbiddance. The vampire can't enter a residence without an invitation from one of the occupants.\\nHarmed by Running Water. The vampire takes 20 acid damage if it ends its turn in running water.\\nStake to the Heart. If a piercing weapon made of wood is driven into the vampire's heart while the vampire is incapacitated in its resting place, the vampire is paralyzed until the stake is removed.\\nSunlight Hypersensitivity. The vampire takes 20 radiant damage when it starts its turn in sunlight. While in sunlight, it has disadvantage on attack rolls and ability checks.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack (Vampire Form Only)",
        desc: "The vampire makes two attacks, only one of which can be a bite attack.",
        attack_bonus: 0
      },
      {
        name: "Unarmed Strike (Vampire Form Only)",
        desc: "Melee Weapon Attack: +9 to hit, reach 5 ft., one creature. Hit: 8 (1d8 + 4) bludgeoning damage. Instead of dealing damage, the vampire can grapple the target (escape DC 18).",
        attack_bonus: 9,
        damage_dice: "1d8",
        damage_bonus: 4
      },
      {
        name: "Bite (Bat or Vampire Form Only)",
        desc: "Melee Weapon Attack: +9 to hit, reach 5 ft., one willing creature, or a creature that is grappled by the vampire, incapacitated, or restrained. Hit: 7 (1d6 + 4) piercing damage plus 10 (3d6) necrotic damage. The target's hit point maximum is reduced by an amount equal to the necrotic damage taken, and the vampire regains hit points equal to that amount. The reduction lasts until the target finishes a long rest. The target dies if this effect reduces its hit point maximum to 0. A humanoid slain in this way and then buried in the ground rises the following night as a vampire spawn under the vampire's control.",
        attack_bonus: 9,
        damage_dice: "1d6 + 3d6",
        damage_bonus: 4
      },
      {
        name: "Charm",
        desc: "The vampire targets one humanoid it can see within 30 ft. of it. If the target can see the vampire, the target must succeed on a DC 17 Wisdom saving throw against this magic or be charmed by the vampire. The charmed target regards the vampire as a trusted friend to be heeded and protected. Although the target isn't under the vampire's control, it takes the vampire's requests or actions in the most favorable way it can, and it is a willing target for the vampire's bit attack.\\nEach time the vampire or the vampire's companions do anything harmful to the target, it can repeat the saving throw, ending the effect on itself on a success. Otherwise, the effect lasts 24 hours or until the vampire is destroyed, is on a different plane of existence than the target, or takes a bonus action to end the effect.",
        attack_bonus: 0
      },
      {
        name: "Children of the Night (1/Day)",
        desc: "The vampire magically calls 2d4 swarms of bats or rats, provided that the sun isn't up. While outdoors, the vampire can call 3d6 wolves instead. The called creatures arrive in 1d4 rounds, acting as allies of the vampire and obeying its spoken commands. The beasts remain for 1 hour, until the vampire dies, or until the vampire dismisses them as a bonus action.",
        attack_bonus: 0
      }
    ],
    legendary_actions: [
      {
        name: "Move",
        desc: "The vampire moves up to its speed without provoking opportunity attacks.",
        attack_bonus: 0
      },
      {
        name: "Unarmed Strike",
        desc: "The vampire makes one unarmed strike.",
        attack_bonus: 0
      },
      {
        name: "Bite (Costs 2 Actions)",
        desc: "The vampire makes one bite attack.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Vampire Spawn",
    size: "Medium",
    type: "undead",
    subtype: "",
    alignment: "neutral evil",
    ac: 15,
    hp: 82,
    hit_dice: "11d8 + 32",
    speed: "30 ft.",
    stats: [16, 16, 16, 11, 10, 12],
    saves: [{ dexterity: 6 }, { wisdom: 3 }],
    skillsaves: [{ perception: 3 }, { stealth: 6 }],
    damage_vulnerabilities: "",
    damage_resistances: "necrotic; bludgeoning, piercing, and slashing from nonmagical weapons",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 13",
    languages: "the languages it knew in life",
    cr: "5",
    traits: [
      {
        name: "Regeneration",
        desc: "The vampire regains 10 hit points at the start of its turn if it has at least 1 hit point and isn't in sunlight or running water. If the vampire takes radiant damage or damage from holy water, this trait doesn't function at the start of the vampire's next turn.",
        attack_bonus: 0
      },
      {
        name: "Spider Climb",
        desc: "The vampire can climb difficult surfaces, including upside down on ceilings, without needing to make an ability check.",
        attack_bonus: 0
      },
      {
        name: "Vampire Weaknesses",
        desc: "The vampire has the following flaws:\\nForbiddance. The vampire can't enter a residence without an invitation from one of the occupants.\\nHarmed by Running Water. The vampire takes 20 acid damage when it ends its turn in running water.\\nStake to the Heart. The vampire is destroyed if a piercing weapon made of wood is driven into its heart while it is incapacitated in its resting place.\\nSunlight Hypersensitivity. The vampire takes 20 radiant damage when it starts its turn in sunlight. While in sunlight, it has disadvantage on attack rolls and ability checks.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The vampire makes two attacks, only one of which can be a bite attack.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one willing creature, or a creature that is grappled by the vampire, incapacitated, or restrained. Hit: 6 (1d6 + 3) piercing damage plus 7 (2d6) necrotic damage. The target's hit point maximum is reduced by an amount equal to the necrotic damage taken, and the vampire regains hit points equal to that amount. The reduction lasts until the target finishes a long rest. The target dies if this effect reduces its hit point maximum to 0.",
        attack_bonus: 61
      },
      {
        name: "Claws",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one creature. Hit: 8 (2d4 + 3) slashing damage. Instead of dealing damage, the vampire can grapple the target (escape DC 13).",
        attack_bonus: 6,
        damage_dice: "2d4",
        damage_bonus: 3
      }
    ]
  },
  {
    name: "Veteran",
    size: "Medium",
    type: "humanoid",
    subtype: "any race",
    alignment: "any alignment",
    ac: 17,
    hp: 58,
    hit_dice: "9d8 + 17",
    speed: "30 ft.",
    stats: [16, 13, 14, 10, 11, 10],
    skillsaves: [{ athletics: 5 }, { perception: 2 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 12",
    languages: "any one language (usually Common)",
    cr: "3",
    actions: [
      {
        name: "Multiattack",
        desc: "The veteran makes two longsword attacks. If it has a shortsword drawn, it can also make a shortsword attack.",
        attack_bonus: 0
      },
      {
        name: "Longsword",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 7 (1d8 + 3) slashing damage, or 8 (1d10 + 3) slashing damage if used with two hands.",
        attack_bonus: 5,
        damage_dice: "1d8",
        damage_bonus: 3
      },
      {
        name: "Shortsword",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 6 (1d6 + 3) piercing damage.",
        attack_bonus: 5,
        damage_dice: "1d6",
        damage_bonus: 3
      },
      {
        name: "Heavy Crossbow",
        desc: "Ranged Weapon Attack: +3 to hit, range 100/400 ft., one target. Hit: 6 (1d10 + 1) piercing damage.",
        attack_bonus: 3,
        damage_dice: "1d10",
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Violet Fungus",
    size: "Medium",
    type: "plant",
    subtype: "",
    alignment: "unaligned",
    ac: 5,
    hp: 18,
    hit_dice: "4d8",
    speed: "5 ft.",
    stats: [3, 1, 10, 1, 3, 1],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "blinded, deafened, frightened",
    senses: "blindsight 30 ft. (blind beyond this radius), passive Perception 6",
    languages: "",
    cr: "1/4",
    traits: [
      {
        name: "False Appearance",
        desc: "While the violet fungus remains motionless, it is indistinguishable from an ordinary fungus.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The fungus makes 1d4 Rotting Touch attacks.",
        attack_bonus: 0
      },
      {
        name: "Rotting Touch",
        desc: "Melee Weapon Attack: +2 to hit, reach 10 ft., one creature. Hit: 4 (1d8) necrotic damage.",
        attack_bonus: 2,
        damage_dice: "1d8"
      }
    ]
  },
  {
    name: "Vrock",
    size: "Large",
    type: "fiend",
    subtype: "demon",
    alignment: "chaotic evil",
    ac: 15,
    hp: 104,
    hit_dice: "11d10 + 43",
    speed: "40 ft., fly 60 ft.",
    stats: [17, 15, 18, 8, 13, 8],
    saves: [{ dexterity: 5 }, { wisdom: 4 }, { charisma: 2 }],
    damage_vulnerabilities: "",
    damage_resistances: "cold, fire, lightning; bludgeoning, piercing, and slashing from nonmagical weapons",
    damage_immunities: "poison",
    condition_immunities: "poisoned",
    senses: "darkvision 120 ft., passive Perception 11",
    languages: "Abyssal, telepathy 120 ft.",
    cr: "6",
    traits: [
      {
        name: "Magic Resistance",
        desc: "The vrock has advantage on saving throws against spells and other magical effects.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The vrock makes two attacks: one with its beak and one with its talons.",
        attack_bonus: 0
      },
      {
        name: "Beak",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 10 (2d6 + 3) piercing damage.",
        attack_bonus: 6,
        damage_dice: "2d6",
        damage_bonus: 3
      },
      {
        name: "Talons",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 14 (2d10 + 3) slashing damage.",
        attack_bonus: 6,
        damage_dice: "2d10",
        damage_bonus: 3
      },
      {
        name: "Spores (Recharge 6)",
        desc: "A 15-foot-radius cloud of toxic spores extends out from the vrock. The spores spread around corners. Each creature in that area must succeed on a DC 14 Constitution saving throw or become poisoned. While poisoned in this way, a target takes 5 (1d10) poison damage at the start of each of its turns. A target can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. Emptying a vial of holy water on the target also ends the effect on it.",
        attack_bonus: 0
      },
      {
        name: "Stunning Screech (1/Day)",
        desc: "The vrock emits a horrific screech. Each creature within 20 feet of it that can hear it and that isn't a demon must succeed on a DC 14 Constitution saving throw or be stunned until the end of the vrock's next turn .",
        attack_bonus: 0
      },
      {
        name: "Variant: Summon Demon (1/Day)",
        desc: "The demon chooses what to summon and attempts a magical summoning.\\nA vrock has a 30 percent chance of summoning 2d4 dretches or one vrock.\\nA summoned demon appears in an unoccupied space within 60 feet of its summoner, acts as an ally of its summoner, and can't summon other demons. It remains for 1 minute, until it or its summoner dies, or until its summoner dismisses it as an action.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Vulture",
    size: "Medium",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 10,
    hp: 5,
    hit_dice: "1d8",
    speed: "10 ft., fly 50 ft.",
    stats: [7, 10, 13, 2, 12, 4],
    skillsaves: [{ perception: 3 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 13",
    languages: "",
    cr: "0",
    traits: [
      {
        name: "Keen Sight and Smell",
        desc: "The vulture has advantage on Wisdom (Perception) checks that rely on sight or smell.",
        attack_bonus: 0
      },
      {
        name: "Pack Tactics",
        desc: "The vulture has advantage on an attack roll against a creature if at least one of the vulture's allies is within 5 ft. of the creature and the ally isn't incapacitated.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Beak",
        desc: "Melee Weapon Attack: +2 to hit, reach 5 ft., one target. Hit: 2 (1d4) piercing damage.",
        attack_bonus: 2,
        damage_dice: "1d4"
      }
    ]
  },
  {
    name: "Warhorse",
    size: "Large",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 11,
    hp: 19,
    hit_dice: "3d10 + 2",
    speed: "60 ft.",
    stats: [18, 12, 13, 2, 12, 7],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 11",
    languages: "",
    cr: "1/2",
    traits: [
      {
        name: "Trampling Charge",
        desc: "If the horse moves at least 20 ft. straight toward a creature and then hits it with a hooves attack on the same turn, that target must succeed on a DC 14 Strength saving throw or be knocked prone. If the target is prone, the horse can make another attack with its hooves against it as a bonus action.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Hooves",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 11 (2d6 + 4) bludgeoning damage.",
        attack_bonus: 6,
        damage_dice: "2d6",
        damage_bonus: 4
      }
    ]
  },
  {
    name: "Warhorse Skeleton",
    size: "Large",
    type: "undead",
    subtype: "",
    alignment: "lawful evil",
    ac: 13,
    hp: 22,
    hit_dice: "3d10 + 5",
    speed: "60 ft.",
    stats: [18, 12, 15, 2, 8, 5],
    damage_vulnerabilities: "bludgeoning",
    damage_resistances: "",
    damage_immunities: "poison",
    condition_immunities: "exhaustion, poisoned",
    senses: "darkvision 60 ft., passive Perception 9",
    languages: "",
    cr: "1/2",
    actions: [
      {
        name: "Hooves",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 11 (2d6 + 4) bludgeoning damage.",
        attack_bonus: 6,
        damage_dice: "2d6",
        damage_bonus: 4
      }
    ]
  },
  {
    name: "Water Elemental",
    size: "Large",
    type: "elemental",
    subtype: "",
    alignment: "neutral",
    ac: 14,
    hp: 114,
    hit_dice: "12d10 + 48",
    speed: "30 ft., swim 90 ft.",
    stats: [18, 14, 18, 5, 10, 8],
    damage_vulnerabilities: "",
    damage_resistances: "acid; bludgeoning, piercing, and slashing from nonmagical weapons",
    damage_immunities: "poison",
    condition_immunities: "exhaustion, grappled, paralyzed, petrified, poisoned, prone, restrained, unconscious",
    senses: "darkvision 60 ft., passive Perception 10",
    languages: "Aquan",
    cr: "5",
    traits: [
      {
        name: "Water Form",
        desc: "The elemental can enter a hostile creature's space and stop there. It can move through a space as narrow as 1 inch wide without squeezing.",
        attack_bonus: 0
      },
      {
        name: "Freeze",
        desc: "If the elemental takes cold damage, it partially freezes; its speed is reduced by 20 ft. until the end of its next turn.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The elemental makes two slam attacks.",
        attack_bonus: 0
      },
      {
        name: "Slam",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 13 (2d8 + 4) bludgeoning damage.",
        attack_bonus: 7,
        damage_dice: "2d8",
        damage_bonus: 4
      },
      {
        name: "Whelm (Recharge 4-6)",
        desc: "Each creature in the elemental's space must make a DC 15 Strength saving throw. On a failure, a target takes 13 (2d8 + 4) bludgeoning damage. If it is Large or smaller, it is also grappled (escape DC 14). Until this grapple ends, the target is restrained and unable to breathe unless it can breathe water. If the saving throw is successful, the target is pushed out of the elemental's space.\\nThe elemental can grapple one Large creature or up to two Medium or smaller creatures at one time. At the start of each of the elemental's turns, each target grappled by it takes 13 (2d8 + 4) bludgeoning damage. A creature within 5 feet of the elemental can pull a creature or object out of it by taking an action to make a DC 14 Strength and succeeding.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Weasel",
    size: "Tiny",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 13,
    hp: 1,
    hit_dice: "1d4 + -2",
    speed: "30 ft.",
    stats: [3, 16, 8, 2, 12, 3],
    skillsaves: [{ perception: 3 }, { stealth: 5 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 13",
    languages: "",
    cr: "0",
    traits: [
      {
        name: "Keen Hearing and Smell",
        desc: "The weasel has advantage on Wisdom (Perception) checks that rely on hearing or smell.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one creature. Hit: 1 piercing damage.",
        attack_bonus: 5,
        damage_bonus: 1
      }
    ]
  },
  {
    name: "Werebear",
    size: "Medium",
    type: "humanoid",
    subtype: "human",
    alignment: "neutral good",
    ac: 10,
    hp: 135,
    hit_dice: "18d8 + 54",
    speed: "30 ft. (40 ft., climb 30 ft. in bear or hybrid form)",
    stats: [19, 10, 17, 11, 12, 12],
    skillsaves: [{ perception: 7 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "bludgeoning, piercing, and slashing damage from nonmagical weapons that aren't silvered",
    condition_immunities: "",
    senses: "passive Perception 17",
    languages: "Common (can't speak in bear form)",
    cr: "5",
    traits: [
      {
        name: "Shapechanger",
        desc: "The werebear can use its action to polymorph into a Large bear-humanoid hybrid or into a Large bear, or back into its true form, which is humanoid. Its statistics, other than its size and AC, are the same in each form. Any equipment it. is wearing or carrying isn't transformed. It reverts to its true form if it dies.",
        attack_bonus: 0
      },
      {
        name: "Keen Smell",
        desc: "The werebear has advantage on WisGlom (Perception) checks that rely on smell.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "In bear form, the werebear makes two claw attacks. In humanoid form, it makes two greataxe attacks. In hybrid form, it can attack like a bear or a humanoid.",
        attack_bonus: 0
      },
      {
        name: "Bite (Bear or Hybrid Form Only)",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 15 (2d10 + 4) piercing damage. If the target is a humanoid, it must succeed on a DC 14 Constitution saving throw or be cursed with were bear lycanthropy.",
        attack_bonus: 7,
        damage_dice: "2d10",
        damage_bonus: 4
      },
      {
        name: "Claw (Bear or Hybrid Form Only)",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 13 (2d8 + 4) slashing damage.",
        attack_bonus: 7,
        damage_dice: "2d8",
        damage_bonus: 4
      },
      {
        name: "Greataxe (Humanoid or Hybrid Form Only)",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 10 (1d12 + 4) slashing damage.",
        attack_bonus: 7,
        damage_dice: "1d12",
        damage_bonus: 4
      }
    ]
  },
  {
    name: "Wereboar",
    size: "Medium",
    type: "humanoid",
    subtype: "human",
    alignment: "neutral evil",
    ac: 10,
    hp: 78,
    hit_dice: "12d8 + 24",
    speed: "30 ft. (40 ft. in boar form)",
    stats: [17, 10, 15, 10, 11, 8],
    skillsaves: [{ perception: 2 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "bludgeoning, piercing, and slashing damage from nonmagical weapons that aren't silvered",
    condition_immunities: "",
    senses: "passive Perception 12",
    languages: "Common (can't speak in boar form)",
    cr: "4",
    traits: [
      {
        name: "Shapechanger",
        desc: "The wereboar can use its action to polymorph into a boar-humanoid hybrid or into a boar, or back into its true form, which is humanoid. Its statistics, other than its AC, are the same in each form. Any equipment it is wearing or carrying isn't transformed. It reverts to its true form if it dies.",
        attack_bonus: 0
      },
      {
        name: "Charge (Boar or Hybrid Form Only)",
        desc: "If the wereboar moves at least 15 feet straight toward a target and then hits it with its tusks on the same turn, the target takes an extra 7 (2d6) slashing damage. If the target is a creature, it must succeed on a DC 13 Strength saving throw or be knocked prone.",
        attack_bonus: 0,
        damage_dice: "2d6"
      },
      {
        name: "Relentless (Recharges after a Short or Long Rest)",
        desc: "If the wereboar takes 14 damage or less that would reduce it to 0 hit points, it is reduced to 1 hit point instead.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack (Humanoid or Hybrid Form Only)",
        desc: "The wereboar makes two attacks, only one of which can be with its tusks.",
        attack_bonus: 0
      },
      {
        name: "Maul (Humanoid or Hybrid Form Only)",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 10 (2d6 + 3) bludgeoning damage.",
        attack_bonus: 5,
        damage_dice: "2d6",
        damage_bonus: 3
      },
      {
        name: "Tusks (Boar or Hybrid Form Only)",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 10 (2d6 + 3) slashing damage. If the target is a humanoid, it must succeed on a DC 12 Constitution saving throw or be cursed with wereboar lycanthropy.",
        attack_bonus: 5,
        damage_dice: "2d6",
        damage_bonus: 3
      }
    ]
  },
  {
    name: "Wererat",
    size: "Medium",
    type: "humanoid",
    subtype: "human",
    alignment: "lawful evil",
    ac: 12,
    hp: 33,
    hit_dice: "6d8 + 6",
    speed: "30 ft.",
    stats: [10, 15, 12, 11, 10, 8],
    skillsaves: [{ perception: 2 }, { stealth: 4 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "bludgeoning, piercing, and slashing damage from nonmagical weapons that aren't silvered",
    condition_immunities: "",
    senses: "darkvision 60 ft. (rat form only), passive Perception 12",
    languages: "Common (can't speak in rat form)",
    cr: "2",
    traits: [
      {
        name: "Shapechanger",
        desc: "The wererat can use its action to polymorph into a rat-humanoid hybrid or into a giant rat, or back into its true form, which is humanoid. Its statistics, other than its size, are the same in each form. Any equipment it is wearing or carrying isn't transformed. It reverts to its true form if it dies.",
        attack_bonus: 0
      },
      {
        name: "Keen Smell",
        desc: "The wererat has advantage on Wisdom (Perception) checks that rely on smell.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack (Humanoid or Hybrid Form Only)",
        desc: "The wererat makes two attacks, only one of which can be a bite.",
        attack_bonus: 0
      },
      {
        name: "Bite (Rat or Hybrid Form Only).",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 4 (1d4 + 2) piercing damage. If the target is a humanoid, it must succeed on a DC 11 Constitution saving throw or be cursed with wererat lycanthropy.",
        attack_bonus: 4,
        damage_dice: "1d4",
        damage_bonus: 2
      },
      {
        name: "Shortsword (Humanoid or Hybrid Form Only)",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 5 (1d6 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d6",
        damage_bonus: 2
      },
      {
        name: "Hand Crossbow (Humanoid or Hybrid Form Only)",
        desc: "Ranged Weapon Attack: +4 to hit, range 30/120 ft., one target. Hit: 5 (1d6 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d6",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Weretiger",
    size: "Medium",
    type: "humanoid",
    subtype: "human",
    alignment: "neutral",
    ac: 12,
    hp: 120,
    hit_dice: "16d8 + 48",
    speed: "30 ft. (40 ft. in tiger form)",
    stats: [17, 15, 16, 10, 13, 11],
    skillsaves: [{ perception: 5 }, { stealth: 4 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "bludgeoning, piercing, and slashing damage from nonmagical weapons that aren't silvered",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 15",
    languages: "Common (can't speak in tiger form)",
    cr: "4",
    traits: [
      {
        name: "Shapechanger",
        desc: "The weretiger can use its action to polymorph into a tiger-humanoid hybrid or into a tiger, or back into its true form, which is humanoid. Its statistics, other than its size, are the same in each form. Any equipment it is wearing or carrying isn't transformed. It reverts to its true form if it dies.",
        attack_bonus: 0
      },
      {
        name: "Keen Hearing and Smell",
        desc: "The weretiger has advantage on Wisdom (Perception) checks that rely on hearing or smell.",
        attack_bonus: 0
      },
      {
        name: "Pounce (Tiger or Hybrid Form Only)",
        desc: "If the weretiger moves at least 15 feet straight toward a creature and then hits it with a claw attack on the same turn, that target must succeed on a DC 14 Strength saving throw or be knocked prone. If the target is prone, the weretiger can make one bite attack against it as a bonus action.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack (Humanoid or Hybrid Form Only)",
        desc: "In humanoid form, the weretiger makes two scimitar attacks or two longbow attacks. In hybrid form, it can attack like a humanoid or make two claw attacks.",
        attack_bonus: 0
      },
      {
        name: "Bite (Tiger or Hybrid Form Only)",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 8 (1d10 + 3) piercing damage. If the target is a humanoid, it must succeed on a DC 13 Constitution saving throw or be cursed with weretiger lycanthropy.",
        attack_bonus: 5,
        damage_dice: "1d10",
        damage_bonus: 3
      },
      {
        name: "Claw (Tiger or Hybrid Form Only)",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 7 (1d8 + 3) slashing damage.",
        attack_bonus: 5,
        damage_dice: "1d8",
        damage_bonus: 3
      },
      {
        name: "Scimitar (Humanoid or Hybrid Form Only)",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 6 (1d6 + 3) slashing damage.",
        attack_bonus: 5,
        damage_dice: "1d6",
        damage_bonus: 3
      },
      {
        name: "Longbow (Humanoid or Hybrid Form Only)",
        desc: "Ranged Weapon Attack: +4 to hit, range 150/600 ft., one target. Hit: 6 (1d8 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d8",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Werewolf",
    size: "Medium",
    type: "humanoid",
    subtype: "human",
    alignment: "chaotic evil",
    ac: 11,
    hp: 58,
    hit_dice: "9d8 + 17",
    speed: "30 ft. (40 ft. in wolf form)",
    stats: [15, 13, 14, 10, 11, 10],
    skillsaves: [{ perception: 4 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "bludgeoning, piercing, and slashing damage from nonmagical weapons that aren't silvered",
    condition_immunities: "",
    senses: "passive Perception 14",
    languages: "Common (can't speak in wolf form)",
    cr: "3",
    traits: [
      {
        name: "Shapechanger",
        desc: "The werewolf can use its action to polymorph into a wolf-humanoid hybrid or into a wolf, or back into its true form, which is humanoid. Its statistics, other than its AC, are the same in each form. Any equipment it is wearing or carrying isn't transformed. It reverts to its true form if it dies.",
        attack_bonus: 0
      },
      {
        name: "Keen Hearing and Smell",
        desc: "The werewolf has advantage on Wisdom (Perception) checks that rely on hearing or smell.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack (Humanoid or Hybrid Form Only)",
        desc: "The werewolf makes two attacks: one with its bite and one with its claws or spear.",
        attack_bonus: 0
      },
      {
        name: "Bite (Wolf or Hybrid Form Only)",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 6 (1d8 + 2) piercing damage. If the target is a humanoid, it must succeed on a DC 12 Constitution saving throw or be cursed with werewolf lycanthropy.",
        attack_bonus: 4,
        damage_dice: "1d8",
        damage_bonus: 2
      },
      {
        name: "Claws (Hybrid Form Only)",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one creature. Hit: 7 (2d4 + 2) slashing damage.",
        attack_bonus: 4,
        damage_dice: "2d4",
        damage_bonus: 2
      },
      {
        name: "Spear (Humanoid Form Only)",
        desc: "Melee or Ranged Weapon Attack: +4 to hit, reach 5 ft. or range 20/60 ft., one creature. Hit: 5 (1d6 + 2) piercing damage, or 6 (1d8 + 2) piercing damage if used with two hands to make a melee attack.",
        attack_bonus: 4,
        damage_dice: "1d6",
        damage_bonus: -2
      }
    ]
  },
  {
    name: "White Dragon Wyrmling",
    size: "Medium",
    type: "dragon",
    subtype: "",
    alignment: "chaotic evil",
    ac: 16,
    hp: 32,
    hit_dice: "5d8 + 9",
    speed: "30 ft., burrow 15 ft., fly 60 ft., swim 30 ft.",
    stats: [14, 10, 14, 5, 10, 11],
    saves: [
      { dexterity: 2 },
      { constitution: 4 },
      { wisdom: 2 },
      { charisma: 2 }
    ],
    skillsaves: [{ perception: 4 }, { stealth: 2 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "cold",
    condition_immunities: "",
    senses: "blindsight 10 ft., darkvision 60 ft., passive Perception 14",
    languages: "Draconic",
    cr: "2",
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 7 (1d10 + 2) piercing damage plus 2 (1d4) cold damage.",
        attack_bonus: 4,
        damage_dice: "1d10 + 1d4",
        damage_bonus: 2
      },
      {
        name: "Cold Breath (Recharge 5-6)",
        desc: "The dragon exhales an icy blast of hail in a 15-foot cone. Each creature in that area must make a DC 12 Constitution saving throw, taking 22 (5d8) cold damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "5d8"
      }
    ]
  },
  {
    name: "Wight",
    size: "Medium",
    type: "undead",
    subtype: "",
    alignment: "neutral evil",
    ac: 14,
    hp: 45,
    hit_dice: "6d8 + 18",
    speed: "30 ft.",
    stats: [15, 14, 16, 10, 13, 15],
    skillsaves: [{ perception: 3 }, { stealth: 4 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "necrotic; bludgeoning, piercing, and slashing from nonmagical weapons that aren't silvered",
    condition_immunities: "poisoned",
    senses: "darkvision 60 ft., passive Perception 13",
    languages: "the languages it knew in life",
    cr: "3",
    traits: [
      {
        name: "Sunlight Sensitivity",
        desc: "While in sunlight, the wight has disadvantage on attack rolls, as well as on Wisdom (Perception) checks that rely on sight.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The wight makes two longsword attacks or two longbow attacks. It can use its Life Drain in place of one longsword attack.",
        attack_bonus: 0
      },
      {
        name: "Life Drain",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one creature. Hit: 5 (1d6 + 2) necrotic damage. The target must succeed on a DC 13 Constitution saving throw or its hit point maximum is reduced by an amount equal to the damage taken. This reduction lasts until the target finishes a long rest. The target dies if this effect reduces its hit point maximum to 0.\\nA humanoid slain by this attack rises 24 hours later as a zombie under the wight's control, unless the humanoid is restored to life or its body is destroyed. The wight can have no more than twelve zombies under its control at one time.",
        attack_bonus: 4,
        damage_dice: "1d6",
        damage_bonus: 2
      },
      {
        name: "Longsword",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 6 (1d8 + 2) slashing damage, or 7 (1d10 + 2) slashing damage if used with two hands.",
        attack_bonus: 4,
        damage_dice: "1d8",
        damage_bonus: 2
      },
      {
        name: "Longbow",
        desc: "Ranged Weapon Attack: +4 to hit, range 150/600 ft., one target. Hit: 6 (1d8 + 2) piercing damage.",
        attack_bonus: 4,
        damage_dice: "1d8",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Will-o'-Wisp",
    size: "Tiny",
    type: "undead",
    subtype: "",
    alignment: "chaotic evil",
    ac: 19,
    hp: 22,
    hit_dice: "9d4 + -1",
    speed: "0 ft., fly 50 ft. (hover)",
    stats: [1, 28, 10, 13, 14, 11],
    damage_vulnerabilities: "",
    damage_resistances: "acid, cold, fire, necrotic, thunder; bludgeoning, piercing, and slashing from nonmagical weapons",
    damage_immunities: "lightning, poison",
    condition_immunities: "exhaustion, grappled, paralyzed, poisoned, prone, restrained, unconscious",
    senses: "darkvision 120 ft., passive Perception 12",
    languages: "the languages it knew in life",
    cr: "2",
    traits: [
      {
        name: "Consume Life",
        desc: "As a bonus action, the will-o'-wisp can target one creature it can see within 5 ft. of it that has 0 hit points and is still alive. The target must succeed on a DC 10 Constitution saving throw against this magic or die. If the target dies, the will-o'-wisp regains 10 (3d6) hit points.",
        attack_bonus: 0
      },
      {
        name: "Ephemeral",
        desc: "The will-o'-wisp can't wear or carry anything.",
        attack_bonus: 0
      },
      {
        name: "Incorporeal Movement",
        desc: "The will-o'-wisp can move through other creatures and objects as if they were difficult terrain. It takes 5 (1d10) force damage if it ends its turn inside an object.",
        attack_bonus: 0
      },
      {
        name: "Variable Illumination",
        desc: "The will-o'-wisp sheds bright light in a 5- to 20-foot radius and dim light for an additional number of ft. equal to the chosen radius. The will-o'-wisp can alter the radius as a bonus action.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Shock",
        desc: "Melee Spell Attack: +4 to hit, reach 5 ft., one creature. Hit: 9 (2d8) lightning damage.",
        attack_bonus: 4,
        damage_dice: "2d8"
      },
      {
        name: "Invisibility",
        desc: "The will-o'-wisp and its light magically become invisible until it attacks or uses its Consume Life, or until its concentration ends (as if concentrating on a spell).",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Winter Wolf",
    size: "Large",
    type: "monstrosity",
    subtype: "",
    alignment: "neutral evil",
    ac: 13,
    hp: 75,
    hit_dice: "10d10 + 20",
    speed: "50 ft.",
    stats: [18, 13, 14, 7, 12, 8],
    skillsaves: [{ perception: 5 }, { stealth: 3 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "cold",
    condition_immunities: "",
    senses: "passive Perception 15",
    languages: "Common, Giant, Winter Wolf",
    cr: "3",
    traits: [
      {
        name: "Keen Hearing and Smell",
        desc: "The wolf has advantage on Wisdom (Perception) checks that rely on hearing or smell.",
        attack_bonus: 0
      },
      {
        name: "Pack Tactics",
        desc: "The wolf has advantage on an attack roll against a creature if at least one of the wolf's allies is within 5 ft. of the creature and the ally isn't incapacitated.",
        attack_bonus: 0
      },
      {
        name: "Snow Camouflage",
        desc: "The wolf has advantage on Dexterity (Stealth) checks made to hide in snowy terrain.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 11 (2d6 + 4) piercing damage. If the target is a creature, it must succeed on a DC 14 Strength saving throw or be knocked prone.",
        attack_bonus: 6,
        damage_dice: "2d6",
        damage_bonus: 4
      },
      {
        name: "Cold Breath (Recharge 5-6)",
        desc: "The wolf exhales a blast of freezing wind in a 15-foot cone. Each creature in that area must make a DC 12 Dexterity saving throw, taking 18 (4d8) cold damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "4d8"
      }
    ]
  },
  {
    name: "Wolf",
    size: "Medium",
    type: "beast",
    subtype: "",
    alignment: "unaligned",
    ac: 13,
    hp: 11,
    hit_dice: "2d8 + 2",
    speed: "40 ft.",
    stats: [12, 15, 12, 3, 12, 6],
    skillsaves: [{ perception: 3 }, { stealth: 4 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "passive Perception 13",
    languages: "",
    cr: "1/4",
    traits: [
      {
        name: "Keen Hearing and Smell",
        desc: "The wolf has advantage on Wisdom (Perception) checks that rely on hearing or smell.",
        attack_bonus: 0
      },
      {
        name: "Pack Tactics",
        desc: "The wolf has advantage on an attack roll against a creature if at least one of the wolf's allies is within 5 ft. of the creature and the ally isn't incapacitated.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +4 to hit, reach 5 ft., one target. Hit: 7 (2d4 + 2) piercing damage. If the target is a creature, it must succeed on a DC 11 Strength saving throw or be knocked prone.",
        attack_bonus: 4,
        damage_dice: "2d4",
        damage_bonus: 2
      }
    ]
  },
  {
    name: "Worg",
    size: "Large",
    type: "monstrosity",
    subtype: "",
    alignment: "neutral evil",
    ac: 13,
    hp: 26,
    hit_dice: "4d10 + 4",
    speed: "50 ft.",
    stats: [16, 13, 13, 7, 11, 8],
    skillsaves: [{ perception: 4 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 14",
    languages: "Goblin, Worg",
    cr: "1/2",
    traits: [
      {
        name: "Keen Hearing and Smell",
        desc: "The worg has advantage on Wisdom (Perception) checks that rely on hearing or smell.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +5 to hit, reach 5 ft., one target. Hit: 10 (2d6 + 3) piercing damage. If the target is a creature, it must succeed on a DC 13 Strength saving throw or be knocked prone.",
        attack_bonus: 5,
        damage_dice: "2d6",
        damage_bonus: 3
      }
    ]
  },
  {
    name: "Wraith",
    size: "Medium",
    type: "undead",
    subtype: "",
    alignment: "neutral evil",
    ac: 13,
    hp: 67,
    hit_dice: "9d8 + 26",
    speed: "0 ft., fly 60 ft. (hover)",
    stats: [6, 16, 16, 12, 14, 15],
    damage_vulnerabilities: "",
    damage_resistances: "acid, cold, fire, lightning, thunder; bludgeoning, piercing, and slashing from nonmagical weapons that aren't silvered",
    damage_immunities: "necrotic, poison",
    condition_immunities: "charmed, exhaustion, grappled, paralyzed, petrified, poisoned, prone, restrained",
    senses: "darkvision 60 ft., passive Perception 12",
    languages: "the languages it knew in life",
    cr: "5",
    traits: [
      {
        name: "Incorporeal Movement",
        desc: "The wraith can move through other creatures and objects as if they were difficult terrain. It takes 5 (1d10) force damage if it ends its turn inside an object.",
        attack_bonus: 0
      },
      {
        name: "Sunlight Sensitivity",
        desc: "While in sunlight, the wraith has disadvantage on attack rolls, as well as on Wisdom (Perception) checks that rely on sight.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Life Drain",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one creature. Hit: 21 (4d8 + 3) necrotic damage. The target must succeed on a DC 14 Constitution saving throw or its hit point maximum is reduced by an amount equal to the damage taken. This reduction lasts until the target finishes a long rest. The target dies if this effect reduces its hit point maximum to 0.",
        attack_bonus: 6,
        damage_dice: "4d8",
        damage_bonus: 3
      },
      {
        name: "Create Specter",
        desc: "The wraith targets a humanoid within 10 feet of it that has been dead for no longer than 1 minute and died violently. The target's spirit rises as a specter in the space of its corpse or in the nearest unoccupied space. The specter is under the wraith's control. The wraith can have no more than seven specters under its control at one time.",
        attack_bonus: 0
      }
    ]
  },
  {
    name: "Wyvern",
    size: "Large",
    type: "dragon",
    subtype: "",
    alignment: "unaligned",
    ac: 13,
    hp: 110,
    hit_dice: "13d10 + 38",
    speed: "20 ft., fly 80 ft.",
    stats: [19, 10, 16, 5, 12, 6],
    skillsaves: [{ perception: 4 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., passive Perception 14",
    languages: "",
    cr: "6",
    actions: [
      {
        name: "Multiattack",
        desc: "The wyvern makes two attacks: one with its bite and one with its stinger. While flying, it can use its claws in place of one other attack.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +7 to hit, reach 10 ft., one creature. Hit: 11 (2d6 + 4) piercing damage.",
        attack_bonus: 7,
        damage_dice: "2d6",
        damage_bonus: 4
      },
      {
        name: "Claws",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 13 (2d8 + 4) slashing damage.",
        attack_bonus: 7,
        damage_dice: "2d8",
        damage_bonus: 4
      },
      {
        name: "Stinger",
        desc: "Melee Weapon Attack: +7 to hit, reach 10 ft., one creature. Hit: 11 (2d6 + 4) piercing damage. The target must make a DC 15 Constitution saving throw, taking 24 (7d6) poison damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 7,
        damage_dice: "2d6",
        damage_bonus: 4
      }
    ]
  },
  {
    name: "Xorn",
    size: "Medium",
    type: "elemental",
    subtype: "",
    alignment: "neutral",
    ac: 19,
    hp: 73,
    hit_dice: "7d8 + 41",
    speed: "20 ft., burrow 20 ft.",
    stats: [17, 10, 22, 11, 10, 11],
    skillsaves: [{ perception: 6 }, { stealth: 3 }],
    damage_vulnerabilities: "",
    damage_resistances: "piercing and slashing from nonmagical weapons that aren't adamantine",
    damage_immunities: "",
    condition_immunities: "",
    senses: "darkvision 60 ft., tremorsense 60 ft., passive Perception 16",
    languages: "Terran",
    cr: "5",
    traits: [
      {
        name: "Earth Glide",
        desc: "The xorn can burrow through nonmagical, unworked earth and stone. While doing so, the xorn doesn't disturb the material it moves through.",
        attack_bonus: 0
      },
      {
        name: "Stone Camouflage",
        desc: "The xorn has advantage on Dexterity (Stealth) checks made to hide in rocky terrain.",
        attack_bonus: 0
      },
      {
        name: "Treasure Sense",
        desc: "The xorn can pinpoint, by scent, the location of precious metals and stones, such as coins and gems, within 60 ft. of it.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The xorn makes three claw attacks and one bite attack.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 13 (3d6 + 3) piercing damage.",
        attack_bonus: 6,
        damage_dice: "3d6",
        damage_bonus: 3
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +6 to hit, reach 5 ft., one target. Hit: 6 (1d6 + 3) slashing damage.",
        attack_bonus: 6,
        damage_dice: "1d6",
        damage_bonus: 3
      }
    ]
  },
  {
    name: "Young Black Dragon",
    size: "Large",
    type: "dragon",
    subtype: "",
    alignment: "chaotic evil",
    ac: 18,
    hp: 127,
    hit_dice: "15d10 + 44",
    speed: "40 ft., fly 80 ft., swim 40 ft.",
    stats: [19, 14, 17, 12, 11, 15],
    saves: [
      { dexterity: 5 },
      { constitution: 6 },
      { wisdom: 3 },
      { charisma: 5 }
    ],
    skillsaves: [{ perception: 6 }, { stealth: 5 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "acid",
    condition_immunities: "",
    senses: "blindsight 30 ft., darkvision 120 ft., passive Perception 16",
    languages: "Common, Draconic",
    cr: "7",
    traits: [
      {
        name: "Amphibious",
        desc: "The dragon can breathe air and water.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +7 to hit, reach 10 ft., one target. Hit: 15 (2d10 + 4) piercing damage plus 4 (1d8) acid damage.",
        attack_bonus: 7,
        damage_dice: "2d10 + 1d8",
        damage_bonus: 4
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 11 (2d6 + 4) slashing damage.",
        attack_bonus: 7,
        damage_dice: "2d6",
        damage_bonus: 4
      },
      {
        name: "Acid Breath (Recharge 5-6)",
        desc: "The dragon exhales acid in a 30-foot line that is 5 feet wide. Each creature in that line must make a DC 14 Dexterity saving throw, taking 49 (11d8) acid damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "11d8"
      }
    ]
  },
  {
    name: "Young Blue Dragon",
    size: "Large",
    type: "dragon",
    subtype: "",
    alignment: "lawful evil",
    ac: 18,
    hp: 152,
    hit_dice: "16d10 + 64",
    speed: "40 ft., burrow 40 ft., fly 80 ft.",
    stats: [21, 10, 19, 14, 13, 17],
    saves: [
      { dexterity: 4 },
      { constitution: 8 },
      { wisdom: 5 },
      { charisma: 7 }
    ],
    skillsaves: [{ perception: 9 }, { stealth: 4 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "lightning",
    condition_immunities: "",
    senses: "blindsight 30 ft., darkvision 120 ft., passive Perception 19",
    languages: "Common, Draconic",
    cr: "9",
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +9 to hit, reach 10 ft., one target. Hit: 16 (2d10 + 5) piercing damage plus 5 (1d10) lightning damage.",
        attack_bonus: 9,
        damage_dice: "2d10 + 1d10",
        damage_bonus: 5
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +9 to hit, reach 5 ft., one target. Hit: 12 (2d6 + 5) slashing damage.",
        attack_bonus: 9,
        damage_dice: "2d6",
        damage_bonus: 5
      },
      {
        name: "Lightning Breath (Recharge 5-6)",
        desc: "The dragon exhales lightning in an 60-foot line that is 5 feet wide. Each creature in that line must make a DC 16 Dexterity saving throw, taking 55 (10d10) lightning damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "10d10"
      }
    ]
  },
  {
    name: "Young Brass Dragon",
    size: "Large",
    type: "dragon",
    subtype: "",
    alignment: "chaotic good",
    ac: 17,
    hp: 110,
    hit_dice: "13d10 + 38",
    speed: "40 ft., burrow 20 ft., fly 80 ft.",
    stats: [19, 10, 17, 12, 11, 15],
    saves: [
      { dexterity: 3 },
      { constitution: 6 },
      { wisdom: 3 },
      { charisma: 5 }
    ],
    skillsaves: [{ perception: 6 }, { persuasion: 5 }, { stealth: 3 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "fire",
    condition_immunities: "",
    senses: "blindsight 30 ft., darkvision 120 ft., passive Perception 16",
    languages: "Common, Draconic",
    cr: "6",
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +7 to hit, reach 10 ft., one target. Hit: 15 (2d10 + 4) piercing damage.",
        attack_bonus: 7,
        damage_dice: "2d10",
        damage_bonus: 4
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 11 (2d6 + 4) slashing damage.",
        attack_bonus: 7,
        damage_dice: "2d6",
        damage_bonus: 4
      },
      {
        name: "Breath Weapons (Recharge 5-6)",
        desc: "The dragon uses one of the following breath weapons.\\nFire Breath. The dragon exhales fire in a 40-foot line that is 5 feet wide. Each creature in that line must make a DC 14 Dexterity saving throw, taking 42 (12d6) fire damage on a failed save, or half as much damage on a successful one.\\nSleep Breath. The dragon exhales sleep gas in a 30-foot cone. Each creature in that area must succeed on a DC 14 Constitution saving throw or fall unconscious for 5 minutes. This effect ends for a creature if the creature takes damage or someone uses an action to wake it.",
        attack_bonus: 0,
        damage_dice: "12d6"
      }
    ]
  },
  {
    name: "Young Bronze Dragon",
    size: "Large",
    type: "dragon",
    subtype: "",
    alignment: "lawful good",
    ac: 18,
    hp: 142,
    hit_dice: "15d10 + 59",
    speed: "40 ft., fly 80 ft., swim 40 ft.",
    stats: [21, 10, 19, 14, 13, 17],
    saves: [
      { dexterity: 3 },
      { constitution: 7 },
      { wisdom: 4 },
      { charisma: 6 }
    ],
    skillsaves: [{ insight: 4 }, { perception: 7 }, { stealth: 3 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "lightning",
    condition_immunities: "",
    senses: "blindsight 30 ft., darkvision 120 ft., passive Perception 17",
    languages: "Common, Draconic",
    cr: "8",
    traits: [
      {
        name: "Amphibious",
        desc: "The dragon can breathe air and water.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +8 to hit, reach 10 ft., one target. Hit: 16 (2d10 + 5) piercing damage.",
        attack_bonus: 8,
        damage_dice: "2d10",
        damage_bonus: 5
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +8 to hit, reach 5 ft., one target. Hit: 12 (2d6 + 5) slashing damage.",
        attack_bonus: 8,
        damage_dice: "2d6",
        damage_bonus: 5
      },
      {
        name: "Breath Weapons (Recharge 5-6)",
        desc: "The dragon uses one of the following breath weapons.\\nLightning Breath. The dragon exhales lightning in a 60-foot line that is 5 feet wide. Each creature in that line must make a DC 15 Dexterity saving throw, taking 55 (10d10) lightning damage on a failed save, or half as much damage on a successful one.\\nRepulsion Breath. The dragon exhales repulsion energy in a 30-foot cone. Each creature in that area must succeed on a DC 15 Strength saving throw. On a failed save, the creature is pushed 40 feet away from the dragon.",
        attack_bonus: 0,
        damage_dice: "10d10"
      }
    ]
  },
  {
    name: "Young Copper Dragon",
    size: "Large",
    type: "dragon",
    subtype: "",
    alignment: "chaotic good",
    ac: 17,
    hp: 119,
    hit_dice: "14d10 + 42",
    speed: "40 ft., climb 40 ft., fly 80 ft.",
    stats: [19, 12, 17, 16, 13, 15],
    saves: [
      { dexterity: 4 },
      { constitution: 6 },
      { wisdom: 4 },
      { charisma: 5 }
    ],
    skillsaves: [{ deception: 5 }, { perception: 7 }, { stealth: 4 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "acid",
    condition_immunities: "",
    senses: "blindsight 30 ft., darkvision 120 ft., passive Perception 17",
    languages: "Common, Draconic",
    cr: "7",
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +7 to hit, reach 10 ft., one target. Hit: 15 (2d10 + 4) piercing damage.",
        attack_bonus: 7,
        damage_dice: "2d10",
        damage_bonus: 4
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 11 (2d6 + 4) slashing damage.",
        attack_bonus: 7,
        damage_dice: "2d6",
        damage_bonus: 4
      },
      {
        name: "Breath Weapons (Recharge 5-6)",
        desc: "The dragon uses one of the following breath weapons.\\nAcid Breath. The dragon exhales acid in an 40-foot line that is 5 feet wide. Each creature in that line must make a DC 14 Dexterity saving throw, taking 40 (9d8) acid damage on a failed save, or half as much damage on a successful one.\\nSlowing Breath. The dragon exhales gas in a 30-foot cone. Each creature in that area must succeed on a DC 14 Constitution saving throw. On a failed save, the creature can't use reactions, its speed is halved, and it can't make more than one attack on its turn. In addition, the creature can use either an action or a bonus action on its turn, but not both. These effects last for 1 minute. The creature can repeat the saving throw at the end of each of its turns, ending the effect on itself with a successful save.",
        attack_bonus: 0,
        damage_dice: "9d8"
      }
    ]
  },
  {
    name: "Young Gold Dragon",
    size: "Large",
    type: "dragon",
    subtype: "",
    alignment: "lawful good",
    ac: 18,
    hp: 178,
    hit_dice: "17d10 + 84",
    speed: "40 ft., fly 80 ft., swim 40 ft.",
    stats: [23, 14, 21, 16, 13, 20],
    saves: [
      { dexterity: 6 },
      { constitution: 9 },
      { wisdom: 5 },
      { charisma: 9 }
    ],
    skillsaves: [
      { insight: 5 },
      { perception: 9 },
      { persuasion: 9 },
      { stealth: 6 }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "fire",
    condition_immunities: "",
    senses: "blindsight 30 ft., darkvision 120 ft., passive Perception 19",
    languages: "Common, Draconic",
    cr: "10",
    traits: [
      {
        name: "Amphibious",
        desc: "The dragon can breathe air and water.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +10 to hit, reach 10 ft., one target. Hit: 17 (2d10 + 6) piercing damage.",
        attack_bonus: 10,
        damage_dice: "2d10",
        damage_bonus: 6
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +10 to hit, reach 5 ft., one target. Hit: 13 (2d6 + 6) slashing damage.",
        attack_bonus: 10,
        damage_dice: "2d6",
        damage_bonus: 6
      },
      {
        name: "Breath Weapons (Recharge 5-6)",
        desc: "The dragon uses one of the following breath weapons.\\nFire Breath. The dragon exhales fire in a 30-foot cone. Each creature in that area must make a DC 17 Dexterity saving throw, taking 55 (10d10) fire damage on a failed save, or half as much damage on a successful one.\\nWeakening Breath. The dragon exhales gas in a 30-foot cone. Each creature in that area must succeed on a DC 17 Strength saving throw or have disadvantage on Strength-based attack rolls, Strength checks, and Strength saving throws for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success.",
        attack_bonus: 0,
        damage_dice: "10d10"
      }
    ]
  },
  {
    name: "Young Green Dragon",
    size: "Large",
    type: "dragon",
    subtype: "",
    alignment: "lawful evil",
    ac: 18,
    hp: 136,
    hit_dice: "16d10 + 48",
    speed: "40 ft., fly 80 ft., swim 40 ft.",
    stats: [19, 12, 17, 16, 13, 15],
    saves: [
      { dexterity: 4 },
      { constitution: 6 },
      { wisdom: 4 },
      { charisma: 5 }
    ],
    skillsaves: [{ deception: 5 }, { perception: 7 }, { stealth: 4 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "poison",
    condition_immunities: "poisoned",
    senses: "blindsight 30 ft., darkvision 120 ft., passive Perception 17",
    languages: "Common, Draconic",
    cr: "8",
    traits: [
      {
        name: "Amphibious",
        desc: "The dragon can breathe air and water.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +7 to hit, reach 10 ft., one target. Hit: 15 (2d10 + 4) piercing damage plus 7 (2d6) poison damage.",
        attack_bonus: 7,
        damage_dice: "2d10 + 2d6",
        damage_bonus: 4
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 11 (2d6 + 4) slashing damage.",
        attack_bonus: 7,
        damage_dice: "2d6",
        damage_bonus: 4
      },
      {
        name: "Poison Breath (Recharge 5-6)",
        desc: "The dragon exhales poisonous gas in a 30-foot cone. Each creature in that area must make a DC 14 Constitution saving throw, taking 42 (12d6) poison damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "12d6"
      }
    ]
  },
  {
    name: "Young Red Dragon",
    size: "Large",
    type: "dragon",
    subtype: "",
    alignment: "chaotic evil",
    ac: 18,
    hp: 178,
    hit_dice: "17d10 + 84",
    speed: "40 ft., climb 40 ft., fly 80 ft.",
    stats: [23, 10, 21, 14, 11, 19],
    saves: [
      { dexterity: 4 },
      { constitution: 9 },
      { wisdom: 4 },
      { charisma: 8 }
    ],
    skillsaves: [{ perception: 8 }, { stealth: 4 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "fire",
    condition_immunities: "",
    senses: "blindsight 30 ft., darkvision 120 ft., passive Perception 18",
    languages: "Common, Draconic",
    cr: "10",
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +10 to hit, reach 10 ft., one target. Hit: 17 (2d10 + 6) piercing damage plus 3 (1d6) fire damage.",
        attack_bonus: 10,
        damage_dice: "2d10 + 1d6",
        damage_bonus: 6
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +10 to hit, reach 5 ft., one target. Hit: 13 (2d6 + 6) slashing damage.",
        attack_bonus: 10,
        damage_dice: "2d6",
        damage_bonus: 6
      },
      {
        name: "Fire Breath (Recharge 5-6)",
        desc: "The dragon exhales fire in a 30-foot cone. Each creature in that area must make a DC 17 Dexterity saving throw, taking 56 (16d6) fire damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "16d6"
      }
    ]
  },
  {
    name: "Young Silver Dragon",
    size: "Large",
    type: "dragon",
    subtype: "",
    alignment: "lawful good",
    ac: 18,
    hp: 168,
    hit_dice: "16d10 + 80",
    speed: "40 ft., fly 80 ft.",
    stats: [23, 10, 21, 14, 11, 19],
    saves: [
      { dexterity: 4 },
      { constitution: 9 },
      { wisdom: 4 },
      { charisma: 8 }
    ],
    skillsaves: [
      { arcana: 6 },
      { history: 6 },
      { perception: 8 },
      { stealth: 4 }
    ],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "cold",
    condition_immunities: "",
    senses: "blindsight 30 ft., darkvision 120 ft., passive Perception 18",
    languages: "Common, Draconic",
    cr: "9",
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +10 to hit, reach 10 ft., one target. Hit: 17 (2d10 + 6) piercing damage.",
        attack_bonus: 10,
        damage_dice: "2d10",
        damage_bonus: 6
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +10 to hit, reach 5 ft., one target. Hit: 13 (2d6 + 6) slashing damage.",
        attack_bonus: 10,
        damage_dice: "2d6",
        damage_bonus: 6
      },
      {
        name: "Breath Weapons (Recharge 5-6)",
        desc: "The dragon uses one of the following breath weapons.\\nCold Breath. The dragon exhales an icy blast in a 30-foot cone. Each creature in that area must make a DC 17 Constitution saving throw, taking 54 (12d8) cold damage on a failed save, or half as much damage on a successful one.\\nParalyzing Breath. The dragon exhales paralyzing gas in a 30-foot cone. Each creature in that area must succeed on a DC 17 Constitution saving throw or be paralyzed for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success.",
        attack_bonus: 0,
        damage_dice: "12d8"
      }
    ]
  },
  {
    name: "Young White Dragon",
    size: "Large",
    type: "dragon",
    subtype: "",
    alignment: "chaotic evil",
    ac: 17,
    hp: 133,
    hit_dice: "14d10 + 56",
    speed: "40 ft., burrow 20 ft., fly 80 ft., swim 40 ft.",
    stats: [18, 10, 18, 6, 11, 12],
    saves: [
      { dexterity: 3 },
      { constitution: 7 },
      { wisdom: 3 },
      { charisma: 4 }
    ],
    skillsaves: [{ perception: 6 }, { stealth: 3 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "cold",
    condition_immunities: "",
    senses: "blindsight 30 ft., darkvision 120 ft., passive Perception 16",
    languages: "Common, Draconic",
    cr: "6",
    traits: [
      {
        name: "Ice Walk",
        desc: "The dragon can move across and climb icy surfaces without needing to make an ability check. Additionally, difficult terrain composed of ice or snow doesn't cost it extra moment.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Multiattack",
        desc: "The dragon makes three attacks: one with its bite and two with its claws.",
        attack_bonus: 0
      },
      {
        name: "Bite",
        desc: "Melee Weapon Attack: +7 to hit, reach 10 ft., one target. Hit: 15 (2d10 + 4) piercing damage plus 4 (1d8) cold damage.",
        attack_bonus: 7,
        damage_dice: "2d10 + 1d8",
        damage_bonus: 4
      },
      {
        name: "Claw",
        desc: "Melee Weapon Attack: +7 to hit, reach 5 ft., one target. Hit: 11 (2d6 + 4) slashing damage.",
        attack_bonus: 7,
        damage_dice: "2d6",
        damage_bonus: 4
      },
      {
        name: "Cold Breath (Recharge 5-6)",
        desc: "The dragon exhales an icy blast in a 30-foot cone. Each creature in that area must make a DC 15 Constitution saving throw, taking 45 (10d8) cold damage on a failed save, or half as much damage on a successful one.",
        attack_bonus: 0,
        damage_dice: "10d8"
      }
    ]
  },
  {
    name: "Zombie",
    size: "Medium",
    type: "undead",
    subtype: "",
    alignment: "neutral evil",
    ac: 8,
    hp: 22,
    hit_dice: "3d8 + 8",
    speed: "20 ft.",
    stats: [13, 6, 16, 3, 6, 5],
    saves: [{ wisdom: 0 }],
    damage_vulnerabilities: "",
    damage_resistances: "",
    damage_immunities: "",
    condition_immunities: "poisoned",
    senses: "darkvision 60 ft., passive Perception 8",
    languages: "understands all languages it spoke in life but can't speak",
    cr: "1/4",
    traits: [
      {
        name: "Undead Fortitude",
        desc: "If damage reduces the zombie to 0 hit points, it must make a Constitution saving throw with a DC of 5+the damage taken, unless the damage is radiant or from a critical hit. On a success, the zombie drops to 1 hit point instead.",
        attack_bonus: 0
      }
    ],
    actions: [
      {
        name: "Slam",
        desc: "Melee Weapon Attack: +3 to hit, reach 5 ft., one target. Hit: 4 (1d6 + 1) bludgeoning damage.",
        attack_bonus: 3,
        damage_dice: "1d6",
        damage_bonus: 1
      }
    ]
  }
];
function getBestiaryByName(disableSRD) {
  return !disableSRD ? BESTIARY_BY_NAME : /* @__PURE__ */ new Map();
}
var BESTIARY_BY_NAME = new Map(
  BESTIARY.map((monster) => {
    return [monster.name, monster];
  })
);

// src/view/statblock.ts
var import_obsidian7 = require("obsidian");

// src/util/util.ts
function toTitleCase(str) {
  return str[0].toUpperCase() + str.slice(1).toLowerCase();
}
function nanoid() {
  return "xyxyxyxyxyxy".replace(/[xy]/g, function(c) {
    var r = Math.random() * 16 | 0, v = c == "x" ? r : r & 3 | 8;
    return v.toString(16);
  });
}
function stringify(property, depth = 0, joiner = " ", parens = true) {
  const ret = [];
  if (depth == 5) {
    return "";
  }
  if (property == null)
    return ``;
  if (typeof property == "string")
    return property;
  if (typeof property == "number")
    return `${property}`;
  if (Array.isArray(property)) {
    ret.push(
      `${parens ? "(" : ""}${property.map((p) => stringify(p, depth++)).join(joiner)}${parens ? ")" : ""}`
    );
  } else if (typeof property == "object") {
    for (const value of Object.values(property)) {
      ret.push(stringify(value, depth++));
    }
  }
  return ret.join(" ");
}
var stringifyWithKeys = (property, depth = 0) => {
  const ret = [];
  if (depth == 5) {
    return "";
  }
  if (!property || property == null)
    return ``;
  if (typeof property == "string")
    return property;
  if (typeof property == "number")
    return `${property}`;
  if (Array.isArray(property)) {
    ret.push(
      `${property.map((p) => stringifyWithKeys(p, depth++)).join(" ")}`
    );
  } else if (typeof property == "object") {
    for (const [key, value] of Object.entries(property)) {
      ret.push(
        stringifyWithKeys(key, depth++),
        stringifyWithKeys(value, depth++)
      );
    }
  }
  return ret.join(" ");
};
function transformTraits(monsterTraits = [], paramsTraits = []) {
  if (!monsterTraits)
    monsterTraits = [];
  if (!paramsTraits)
    paramsTraits = [];
  for (const trait of paramsTraits ?? []) {
    if (!trait)
      continue;
    if (Array.isArray(trait)) {
      let desc = stringifyWithKeys(trait.slice(1));
      monsterTraits = monsterTraits.filter(
        (t) => t.name != trait[0] && t.desc != desc
      );
      monsterTraits.push({
        name: trait[0],
        desc
      });
    } else if (typeof trait == "object" && ("name" in trait || "desc" in trait)) {
      monsterTraits = monsterTraits.filter(
        (t) => t.name != trait.name || t.desc != trait.desc
      );
      monsterTraits.push({
        name: trait.name,
        desc: stringifyWithKeys(trait.desc)
      });
    }
  }
  return monsterTraits;
}

// src/layouts/basic5e.ts
var Statblock5e = [
  {
    type: "inline",
    id: nanoid(),
    properties: [],
    hasRule: true,
    nested: [
      {
        type: "group",
        id: nanoid(),
        properties: ["name", "size", "type", "subtype", "alignment"],
        nested: [
          {
            type: "heading",
            id: nanoid(),
            properties: ["name"],
            conditioned: true
          },
          {
            type: "subheading",
            id: nanoid(),
            properties: ["size", "type", "subtype", "alignment"],
            conditioned: true
          }
        ],
        conditioned: true
      },
      {
        type: "image",
        id: nanoid(),
        properties: ["image"]
      }
    ]
  },
  {
    type: "group",
    id: nanoid(),
    properties: ["ac", "hp", "speed"],
    nested: [
      {
        type: "property",
        id: nanoid(),
        properties: ["ac"],
        display: "Armor Class",
        conditioned: true
      },
      {
        type: "property",
        id: nanoid(),
        properties: ["hp"],
        display: "Hit Points",
        dice: true,
        diceProperty: "hit_dice",
        diceCallback: `return [{ text: monster["hit_dice"] }]`,
        conditioned: true
      },
      {
        type: "property",
        id: nanoid(),
        display: "Speed",
        properties: ["speed"],
        conditioned: true
      }
    ],
    hasRule: true,
    conditioned: true
  },
  {
    type: "table",
    id: nanoid(),
    properties: ["stats"],
    headers: ["Str", "Dex", "Con", "Int", "Wis", "Cha"],
    calculate: true,
    hasRule: true,
    conditioned: true
  },
  {
    type: "table",
    id: nanoid(),
    properties: ["fage_stats"],
    headers: ["Accuracy", "Communication", "Constitution", "Dexterity", "Fighting", "Intelligence", "Perception", "Strength", "Willpower"],
    calculate: false,
    hasRule: true,
    conditioned: true
  },
  {
    type: "group",
    id: nanoid(),
    properties: [
      "saves",
      "skillsaves",
      "damage_immunities",
      "damage_resistances",
      "damage_vulnerabilities",
      "condition_immunities",
      "cr",
      "languages",
      "senses"
    ],
    nested: [
      {
        type: "saves",
        id: nanoid(),
        display: "Saves",
        properties: ["saves"],
        conditioned: true
      },
      {
        type: "saves",
        id: nanoid(),
        display: "Skills",
        properties: ["skillsaves"],
        conditioned: true
      },
      {
        type: "property",
        id: nanoid(),
        display: "Damage Resistances",
        properties: ["damage_resistances"],
        conditioned: true
      },
      {
        type: "property",
        id: nanoid(),
        display: "Damage Immunities",
        properties: ["damage_immunities"],
        conditioned: true
      },
      {
        type: "property",
        id: nanoid(),
        display: "Condition Immunities",
        properties: ["condition_immunities"],
        conditioned: true
      },
      {
        type: "property",
        id: nanoid(),
        display: "Damage Vulnerabilities",
        properties: ["damage_vulnerabilities"],
        conditioned: true
      },
      {
        type: "property",
        id: nanoid(),
        display: "Senses",
        properties: ["senses"],
        conditioned: true
      },
      {
        type: "property",
        id: nanoid(),
        display: "Languages",
        properties: ["languages"],
        fallback: "-"
      },
      {
        type: "inline",
        id: nanoid(),
        properties: [],
        conditioned: true,
        nested: [
          {
            type: "property",
            id: nanoid(),
            display: "Challenge",
            properties: ["cr"],
            callback: `const CR = {
    "0": {
        cr: "0",
        value: 0,
        xp: 0
    },
    "1/8": {
        cr: "1/8",
        value: 0.125,
        xp: 25
    },
    "1/4": {
        cr: "1/4",

        value: 0.25,
        xp: 50
    },
    "1/2": {
        cr: "1/2",
        value: 0.5,
        xp: 100
    },
    "0.125": {
        cr: "1/8",
        value: 0.125,
        xp: 25
    },
    "0.25": {
        cr: "1/4",

        value: 0.25,
        xp: 50
    },
    "0.5": {
        cr: "1/2",
        value: 0.5,
        xp: 100
    },
    "1": {
        cr: "1",
        value: 1,
        xp: 200
    },
    "2": {
        cr: "2",
        value: 2,
        xp: 450
    },
    "3": {
        cr: "3",
        value: 3,
        xp: 700
    },
    "4": {
        cr: "4",
        value: 4,
        xp: 1100
    },
    "5": {
        cr: "5",
        value: 5,
        xp: 1800
    },
    "6": {
        cr: "6",
        value: 6,
        xp: 2300
    },
    "7": {
        cr: "7",
        value: 7,
        xp: 2900
    },
    "8": {
        cr: "8",
        value: 8,
        xp: 3900
    },
    "9": {
        cr: "9",
        value: 9,
        xp: 5000
    },
    "10": {
        cr: "10",
        value: 10,
        xp: 5900
    },
    "11": {
        cr: "11",
        value: 11,
        xp: 7200
    },
    "12": {
        cr: "12",
        value: 12,
        xp: 8400
    },
    "13": {
        cr: "13",
        value: 13,
        xp: 10000
    },
    "14": {
        cr: "14",
        value: 14,
        xp: 11500
    },
    "15": {
        cr: "15",
        value: 15,
        xp: 13000
    },
    "16": {
        cr: "16",
        value: 16,
        xp: 15000
    },
    "17": {
        cr: "17",
        value: 17,
        xp: 18000
    },
    "18": {
        cr: "18",
        value: 18,
        xp: 20000
    },
    "19": {
        cr: "19",
        value: 19,
        xp: 22000
    },
    "20": {
        cr: "20",
        value: 20,
        xp: 25000
    },
    "21": {
        cr: "21",
        value: 21,
        xp: 33000
    },
    "22": {
        cr: "22",
        value: 22,
        xp: 41000
    },
    "23": {
        cr: "23",
        value: 23,
        xp: 50000
    },
    "24": {
        cr: "24",
        value: 24,
        xp: 62000
    },
    "25": {
        cr: "25",
        value: 25,
        xp: 75000
    },
    "26": {
        cr: "26",
        value: 26,
        xp: 90000
    },
    "27": {
        cr: "27",
        value: 27,
        xp: 105000
    },
    "28": {
        cr: "28",
        value: 28,
        xp: 120000
    },
    "29": {
        cr: "29",
        value: 29,
        xp: 135000
    },
    "30": {
        cr: "30",
        value: 30,
        xp: 155000
    }
};                        
if ("cr" in monster && monster.cr in CR) {
    return \`\${CR[
        monster.cr
    ].cr} (\${CR[
        monster.cr
    ].xp.toLocaleString()} XP)\`;
}
return "";`
          },
          {
            type: "property",
            id: nanoid(),
            display: "Proficiency Bonus",
            properties: ["cr"],
            callback: `const CR = {
    "0": {
        cr: "0",
        value: 0,
        xp: 0
    },
    "1/8": {
        cr: "1/8",
        value: 0.125,
        xp: 25
    },
    "1/4": {
        cr: "1/4",

        value: 0.25,
        xp: 50
    },
    "1/2": {
        cr: "1/2",
        value: 0.5,
        xp: 100
    },
    "0.125": {
        cr: "1/8",
        value: 0.125,
        xp: 25
    },
    "0.25": {
        cr: "1/4",

        value: 0.25,
        xp: 50
    },
    "0.5": {
        cr: "1/2",
        value: 0.5,
        xp: 100
    },
    "1": {
        cr: "1",
        value: 1,
        xp: 200
    },
    "2": {
        cr: "2",
        value: 2,
        xp: 450
    },
    "3": {
        cr: "3",
        value: 3,
        xp: 700
    },
    "4": {
        cr: "4",
        value: 4,
        xp: 1100
    },
    "5": {
        cr: "5",
        value: 5,
        xp: 1800
    },
    "6": {
        cr: "6",
        value: 6,
        xp: 2300
    },
    "7": {
        cr: "7",
        value: 7,
        xp: 2900
    },
    "8": {
        cr: "8",
        value: 8,
        xp: 3900
    },
    "9": {
        cr: "9",
        value: 9,
        xp: 5000
    },
    "10": {
        cr: "10",
        value: 10,
        xp: 5900
    },
    "11": {
        cr: "11",
        value: 11,
        xp: 7200
    },
    "12": {
        cr: "12",
        value: 12,
        xp: 8400
    },
    "13": {
        cr: "13",
        value: 13,
        xp: 10000
    },
    "14": {
        cr: "14",
        value: 14,
        xp: 11500
    },
    "15": {
        cr: "15",
        value: 15,
        xp: 13000
    },
    "16": {
        cr: "16",
        value: 16,
        xp: 15000
    },
    "17": {
        cr: "17",
        value: 17,
        xp: 18000
    },
    "18": {
        cr: "18",
        value: 18,
        xp: 20000
    },
    "19": {
        cr: "19",
        value: 19,
        xp: 22000
    },
    "20": {
        cr: "20",
        value: 20,
        xp: 25000
    },
    "21": {
        cr: "21",
        value: 21,
        xp: 33000
    },
    "22": {
        cr: "22",
        value: 22,
        xp: 41000
    },
    "23": {
        cr: "23",
        value: 23,
        xp: 50000
    },
    "24": {
        cr: "24",
        value: 24,
        xp: 62000
    },
    "25": {
        cr: "25",
        value: 25,
        xp: 75000
    },
    "26": {
        cr: "26",
        value: 26,
        xp: 90000
    },
    "27": {
        cr: "27",
        value: 27,
        xp: 105000
    },
    "28": {
        cr: "28",
        value: 28,
        xp: 120000
    },
    "29": {
        cr: "29",
        value: 29,
        xp: 135000
    },
    "30": {
        cr: "30",
        value: 30,
        xp: 155000
    }
};           
if ("cr" in monster && monster.cr in CR) {
    return \`+\${Math.max(
            Math.floor(2 + ((CR[monster.cr]?.value ?? 0) - 1) / 4),
            2
        )}\`;
}
return "";`
          }
        ]
      }
    ],
    conditioned: true,
    hasRule: true
  },
  {
    type: "traits",
    id: nanoid(),
    properties: ["traits"],
    conditioned: true,
    dice: true
  },
  {
    type: "spells",
    id: nanoid(),
    properties: ["spells"],
    conditioned: true,
    dice: true
  },
  {
    type: "text",
    id: nanoid(),
    properties: ["spellsNotes"],
    conditioned: true,
    text: null
  },
  {
    type: "traits",
    id: nanoid(),
    properties: ["actions"],
    heading: "Actions",
    conditioned: true,
    dice: true
  },
  {
    type: "traits",
    id: nanoid(),
    properties: ["bonus_actions"],
    heading: "Bonus Actions",
    conditioned: true,
    dice: true
  },
  {
    type: "traits",
    id: nanoid(),
    properties: ["legendary_actions"],
    heading: "Legendary Actions",
    conditioned: true,
    dice: true
  },
  {
    type: "traits",
    id: nanoid(),
    properties: ["reactions"],
    heading: "Reactions",
    conditioned: true,
    dice: true
  },
  {
    type: "traits",
    id: nanoid(),
    properties: ["lair_actions"],
    heading: "Lair Actions",
    conditioned: true,
    dice: true
  }
];
var Layout5e = {
  blocks: Statblock5e,
  name: "Basic 5e Layout"
};

// src/view/statblock.ts
var import_obsidian8 = require("obsidian");

// node_modules/svelte/internal/index.mjs
function noop() {
}
var identity = (x) => x;
function is_promise(value) {
  return value && typeof value === "object" && typeof value.then === "function";
}
function run(fn2) {
  return fn2();
}
function blank_object() {
  return /* @__PURE__ */ Object.create(null);
}
function run_all(fns) {
  fns.forEach(run);
}
function is_function(thing) {
  return typeof thing === "function";
}
function safe_not_equal(a, b) {
  return a != a ? b == b : a !== b || (a && typeof a === "object" || typeof a === "function");
}
var src_url_equal_anchor;
function src_url_equal(element_src, url) {
  if (!src_url_equal_anchor) {
    src_url_equal_anchor = document.createElement("a");
  }
  src_url_equal_anchor.href = url;
  return element_src === src_url_equal_anchor.href;
}
function is_empty(obj) {
  return Object.keys(obj).length === 0;
}
function null_to_empty(value) {
  return value == null ? "" : value;
}
function action_destroyer(action_result) {
  return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;
}
var is_client = typeof window !== "undefined";
var now = is_client ? () => window.performance.now() : () => Date.now();
var raf = is_client ? (cb) => requestAnimationFrame(cb) : noop;
var tasks = /* @__PURE__ */ new Set();
function run_tasks(now2) {
  tasks.forEach((task) => {
    if (!task.c(now2)) {
      tasks.delete(task);
      task.f();
    }
  });
  if (tasks.size !== 0)
    raf(run_tasks);
}
function loop(callback) {
  let task;
  if (tasks.size === 0)
    raf(run_tasks);
  return {
    promise: new Promise((fulfill) => {
      tasks.add(task = { c: callback, f: fulfill });
    }),
    abort() {
      tasks.delete(task);
    }
  };
}
var is_hydrating = false;
function start_hydrating() {
  is_hydrating = true;
}
function end_hydrating() {
  is_hydrating = false;
}
function append(target, node) {
  target.appendChild(node);
}
function append_styles(target, style_sheet_id, styles) {
  const append_styles_to = get_root_for_style(target);
  if (!append_styles_to.getElementById(style_sheet_id)) {
    const style = element("style");
    style.id = style_sheet_id;
    style.textContent = styles;
    append_stylesheet(append_styles_to, style);
  }
}
function get_root_for_style(node) {
  if (!node)
    return document;
  const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;
  if (root && root.host) {
    return root;
  }
  return node.ownerDocument;
}
function append_empty_stylesheet(node) {
  const style_element = element("style");
  append_stylesheet(get_root_for_style(node), style_element);
  return style_element.sheet;
}
function append_stylesheet(node, style) {
  append(node.head || node, style);
}
function insert(target, node, anchor) {
  target.insertBefore(node, anchor || null);
}
function detach(node) {
  node.parentNode.removeChild(node);
}
function destroy_each(iterations, detaching) {
  for (let i = 0; i < iterations.length; i += 1) {
    if (iterations[i])
      iterations[i].d(detaching);
  }
}
function element(name) {
  return document.createElement(name);
}
function text(data) {
  return document.createTextNode(data);
}
function space() {
  return text(" ");
}
function empty() {
  return text("");
}
function listen(node, event, handler, options) {
  node.addEventListener(event, handler, options);
  return () => node.removeEventListener(event, handler, options);
}
function attr(node, attribute, value) {
  if (value == null)
    node.removeAttribute(attribute);
  else if (node.getAttribute(attribute) !== value)
    node.setAttribute(attribute, value);
}
function children(element2) {
  return Array.from(element2.childNodes);
}
function set_data(text2, data) {
  data = "" + data;
  if (text2.wholeText !== data)
    text2.data = data;
}
function set_style(node, key, value, important) {
  if (value === null) {
    node.style.removeProperty(key);
  } else {
    node.style.setProperty(key, value, important ? "important" : "");
  }
}
function toggle_class(element2, name, toggle) {
  element2.classList[toggle ? "add" : "remove"](name);
}
function custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {
  const e = document.createEvent("CustomEvent");
  e.initCustomEvent(type, bubbles, cancelable, detail);
  return e;
}
var managed_styles = /* @__PURE__ */ new Map();
var active = 0;
function hash(str) {
  let hash4 = 5381;
  let i = str.length;
  while (i--)
    hash4 = (hash4 << 5) - hash4 ^ str.charCodeAt(i);
  return hash4 >>> 0;
}
function create_style_information(doc, node) {
  const info = { stylesheet: append_empty_stylesheet(node), rules: {} };
  managed_styles.set(doc, info);
  return info;
}
function create_rule(node, a, b, duration, delay, ease, fn2, uid = 0) {
  const step = 16.666 / duration;
  let keyframes = "{\n";
  for (let p = 0; p <= 1; p += step) {
    const t = a + (b - a) * ease(p);
    keyframes += p * 100 + `%{${fn2(t, 1 - t)}}
`;
  }
  const rule = keyframes + `100% {${fn2(b, 1 - b)}}
}`;
  const name = `__svelte_${hash(rule)}_${uid}`;
  const doc = get_root_for_style(node);
  const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);
  if (!rules[name]) {
    rules[name] = true;
    stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);
  }
  const animation = node.style.animation || "";
  node.style.animation = `${animation ? `${animation}, ` : ""}${name} ${duration}ms linear ${delay}ms 1 both`;
  active += 1;
  return name;
}
function delete_rule(node, name) {
  const previous = (node.style.animation || "").split(", ");
  const next2 = previous.filter(
    name ? (anim) => anim.indexOf(name) < 0 : (anim) => anim.indexOf("__svelte") === -1
  );
  const deleted = previous.length - next2.length;
  if (deleted) {
    node.style.animation = next2.join(", ");
    active -= deleted;
    if (!active)
      clear_rules();
  }
}
function clear_rules() {
  raf(() => {
    if (active)
      return;
    managed_styles.forEach((info) => {
      const { stylesheet } = info;
      let i = stylesheet.cssRules.length;
      while (i--)
        stylesheet.deleteRule(i);
      info.rules = {};
    });
    managed_styles.clear();
  });
}
function create_animation(node, from, fn2, params) {
  if (!from)
    return noop;
  const to = node.getBoundingClientRect();
  if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)
    return noop;
  const {
    delay = 0,
    duration = 300,
    easing = identity,
    start: start_time = now() + delay,
    end: end2 = start_time + duration,
    tick: tick2 = noop,
    css
  } = fn2(node, { from, to }, params);
  let running = true;
  let started = false;
  let name;
  function start2() {
    if (css) {
      name = create_rule(node, 0, 1, duration, delay, easing, css);
    }
    if (!delay) {
      started = true;
    }
  }
  function stop() {
    if (css)
      delete_rule(node, name);
    running = false;
  }
  loop((now2) => {
    if (!started && now2 >= start_time) {
      started = true;
    }
    if (started && now2 >= end2) {
      tick2(1, 0);
      stop();
    }
    if (!running) {
      return false;
    }
    if (started) {
      const p = now2 - start_time;
      const t = 0 + 1 * easing(p / duration);
      tick2(t, 1 - t);
    }
    return true;
  });
  start2();
  tick2(0, 1);
  return stop;
}
function fix_position(node) {
  const style = getComputedStyle(node);
  if (style.position !== "absolute" && style.position !== "fixed") {
    const { width, height } = style;
    const a = node.getBoundingClientRect();
    node.style.position = "absolute";
    node.style.width = width;
    node.style.height = height;
    add_transform(node, a);
  }
}
function add_transform(node, a) {
  const b = node.getBoundingClientRect();
  if (a.left !== b.left || a.top !== b.top) {
    const style = getComputedStyle(node);
    const transform = style.transform === "none" ? "" : style.transform;
    node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;
  }
}
var current_component;
function set_current_component(component) {
  current_component = component;
}
function get_current_component() {
  if (!current_component)
    throw new Error("Function called outside component initialization");
  return current_component;
}
function onMount(fn2) {
  get_current_component().$$.on_mount.push(fn2);
}
function onDestroy(fn2) {
  get_current_component().$$.on_destroy.push(fn2);
}
function createEventDispatcher() {
  const component = get_current_component();
  return (type, detail, { cancelable = false } = {}) => {
    const callbacks = component.$$.callbacks[type];
    if (callbacks) {
      const event = custom_event(type, detail, { cancelable });
      callbacks.slice().forEach((fn2) => {
        fn2.call(component, event);
      });
      return !event.defaultPrevented;
    }
    return true;
  };
}
function setContext(key, context) {
  get_current_component().$$.context.set(key, context);
  return context;
}
function getContext(key) {
  return get_current_component().$$.context.get(key);
}
function getAllContexts() {
  return get_current_component().$$.context;
}
function bubble(component, event) {
  const callbacks = component.$$.callbacks[event.type];
  if (callbacks) {
    callbacks.slice().forEach((fn2) => fn2.call(this, event));
  }
}
var dirty_components = [];
var binding_callbacks = [];
var render_callbacks = [];
var flush_callbacks = [];
var resolved_promise = Promise.resolve();
var update_scheduled = false;
function schedule_update() {
  if (!update_scheduled) {
    update_scheduled = true;
    resolved_promise.then(flush);
  }
}
function add_render_callback(fn2) {
  render_callbacks.push(fn2);
}
function add_flush_callback(fn2) {
  flush_callbacks.push(fn2);
}
var seen_callbacks = /* @__PURE__ */ new Set();
var flushidx = 0;
function flush() {
  const saved_component = current_component;
  do {
    while (flushidx < dirty_components.length) {
      const component = dirty_components[flushidx];
      flushidx++;
      set_current_component(component);
      update(component.$$);
    }
    set_current_component(null);
    dirty_components.length = 0;
    flushidx = 0;
    while (binding_callbacks.length)
      binding_callbacks.pop()();
    for (let i = 0; i < render_callbacks.length; i += 1) {
      const callback = render_callbacks[i];
      if (!seen_callbacks.has(callback)) {
        seen_callbacks.add(callback);
        callback();
      }
    }
    render_callbacks.length = 0;
  } while (dirty_components.length);
  while (flush_callbacks.length) {
    flush_callbacks.pop()();
  }
  update_scheduled = false;
  seen_callbacks.clear();
  set_current_component(saved_component);
}
function update($$) {
  if ($$.fragment !== null) {
    $$.update();
    run_all($$.before_update);
    const dirty = $$.dirty;
    $$.dirty = [-1];
    $$.fragment && $$.fragment.p($$.ctx, dirty);
    $$.after_update.forEach(add_render_callback);
  }
}
var outroing = /* @__PURE__ */ new Set();
var outros;
function group_outros() {
  outros = {
    r: 0,
    c: [],
    p: outros
  };
}
function check_outros() {
  if (!outros.r) {
    run_all(outros.c);
  }
  outros = outros.p;
}
function transition_in(block, local) {
  if (block && block.i) {
    outroing.delete(block);
    block.i(local);
  }
}
function transition_out(block, local, detach2, callback) {
  if (block && block.o) {
    if (outroing.has(block))
      return;
    outroing.add(block);
    outros.c.push(() => {
      outroing.delete(block);
      if (callback) {
        if (detach2)
          block.d(1);
        callback();
      }
    });
    block.o(local);
  } else if (callback) {
    callback();
  }
}
function handle_promise(promise, info) {
  const token = info.token = {};
  function update2(type, index, key, value) {
    if (info.token !== token)
      return;
    info.resolved = value;
    let child_ctx = info.ctx;
    if (key !== void 0) {
      child_ctx = child_ctx.slice();
      child_ctx[key] = value;
    }
    const block = type && (info.current = type)(child_ctx);
    let needs_flush = false;
    if (info.block) {
      if (info.blocks) {
        info.blocks.forEach((block2, i) => {
          if (i !== index && block2) {
            group_outros();
            transition_out(block2, 1, 1, () => {
              if (info.blocks[i] === block2) {
                info.blocks[i] = null;
              }
            });
            check_outros();
          }
        });
      } else {
        info.block.d(1);
      }
      block.c();
      transition_in(block, 1);
      block.m(info.mount(), info.anchor);
      needs_flush = true;
    }
    info.block = block;
    if (info.blocks)
      info.blocks[index] = block;
    if (needs_flush) {
      flush();
    }
  }
  if (is_promise(promise)) {
    const current_component2 = get_current_component();
    promise.then((value) => {
      set_current_component(current_component2);
      update2(info.then, 1, info.value, value);
      set_current_component(null);
    }, (error) => {
      set_current_component(current_component2);
      update2(info.catch, 2, info.error, error);
      set_current_component(null);
      if (!info.hasCatch) {
        throw error;
      }
    });
    if (info.current !== info.pending) {
      update2(info.pending, 0);
      return true;
    }
  } else {
    if (info.current !== info.then) {
      update2(info.then, 1, info.value, promise);
      return true;
    }
    info.resolved = promise;
  }
}
function update_await_block_branch(info, ctx, dirty) {
  const child_ctx = ctx.slice();
  const { resolved } = info;
  if (info.current === info.then) {
    child_ctx[info.value] = resolved;
  }
  if (info.current === info.catch) {
    child_ctx[info.error] = resolved;
  }
  info.block.p(child_ctx, dirty);
}
var globals = typeof window !== "undefined" ? window : typeof globalThis !== "undefined" ? globalThis : global;
function destroy_block(block, lookup) {
  block.d(1);
  lookup.delete(block.key);
}
function outro_and_destroy_block(block, lookup) {
  transition_out(block, 1, 1, () => {
    lookup.delete(block.key);
  });
}
function fix_and_destroy_block(block, lookup) {
  block.f();
  destroy_block(block, lookup);
}
function fix_and_outro_and_destroy_block(block, lookup) {
  block.f();
  outro_and_destroy_block(block, lookup);
}
function update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block9, next2, get_context) {
  let o = old_blocks.length;
  let n = list.length;
  let i = o;
  const old_indexes = {};
  while (i--)
    old_indexes[old_blocks[i].key] = i;
  const new_blocks = [];
  const new_lookup = /* @__PURE__ */ new Map();
  const deltas = /* @__PURE__ */ new Map();
  i = n;
  while (i--) {
    const child_ctx = get_context(ctx, list, i);
    const key = get_key(child_ctx);
    let block = lookup.get(key);
    if (!block) {
      block = create_each_block9(key, child_ctx);
      block.c();
    } else if (dynamic) {
      block.p(child_ctx, dirty);
    }
    new_lookup.set(key, new_blocks[i] = block);
    if (key in old_indexes)
      deltas.set(key, Math.abs(i - old_indexes[key]));
  }
  const will_move = /* @__PURE__ */ new Set();
  const did_move = /* @__PURE__ */ new Set();
  function insert2(block) {
    transition_in(block, 1);
    block.m(node, next2);
    lookup.set(block.key, block);
    next2 = block.first;
    n--;
  }
  while (o && n) {
    const new_block = new_blocks[n - 1];
    const old_block = old_blocks[o - 1];
    const new_key = new_block.key;
    const old_key = old_block.key;
    if (new_block === old_block) {
      next2 = new_block.first;
      o--;
      n--;
    } else if (!new_lookup.has(old_key)) {
      destroy(old_block, lookup);
      o--;
    } else if (!lookup.has(new_key) || will_move.has(new_key)) {
      insert2(new_block);
    } else if (did_move.has(old_key)) {
      o--;
    } else if (deltas.get(new_key) > deltas.get(old_key)) {
      did_move.add(new_key);
      insert2(new_block);
    } else {
      will_move.add(old_key);
      o--;
    }
  }
  while (o--) {
    const old_block = old_blocks[o];
    if (!new_lookup.has(old_block.key))
      destroy(old_block, lookup);
  }
  while (n)
    insert2(new_blocks[n - 1]);
  return new_blocks;
}
function bind(component, name, callback) {
  const index = component.$$.props[name];
  if (index !== void 0) {
    component.$$.bound[index] = callback;
    callback(component.$$.ctx[index]);
  }
}
function create_component(block) {
  block && block.c();
}
function mount_component(component, target, anchor, customElement) {
  const { fragment, on_mount, on_destroy, after_update } = component.$$;
  fragment && fragment.m(target, anchor);
  if (!customElement) {
    add_render_callback(() => {
      const new_on_destroy = on_mount.map(run).filter(is_function);
      if (on_destroy) {
        on_destroy.push(...new_on_destroy);
      } else {
        run_all(new_on_destroy);
      }
      component.$$.on_mount = [];
    });
  }
  after_update.forEach(add_render_callback);
}
function destroy_component(component, detaching) {
  const $$ = component.$$;
  if ($$.fragment !== null) {
    run_all($$.on_destroy);
    $$.fragment && $$.fragment.d(detaching);
    $$.on_destroy = $$.fragment = null;
    $$.ctx = [];
  }
}
function make_dirty(component, i) {
  if (component.$$.dirty[0] === -1) {
    dirty_components.push(component);
    schedule_update();
    component.$$.dirty.fill(0);
  }
  component.$$.dirty[i / 31 | 0] |= 1 << i % 31;
}
function init(component, options, instance24, create_fragment26, not_equal, props, append_styles2, dirty = [-1]) {
  const parent_component = current_component;
  set_current_component(component);
  const $$ = component.$$ = {
    fragment: null,
    ctx: null,
    props,
    update: noop,
    not_equal,
    bound: blank_object(),
    on_mount: [],
    on_destroy: [],
    on_disconnect: [],
    before_update: [],
    after_update: [],
    context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),
    callbacks: blank_object(),
    dirty,
    skip_bound: false,
    root: options.target || parent_component.$$.root
  };
  append_styles2 && append_styles2($$.root);
  let ready = false;
  $$.ctx = instance24 ? instance24(component, options.props || {}, (i, ret, ...rest) => {
    const value = rest.length ? rest[0] : ret;
    if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
      if (!$$.skip_bound && $$.bound[i])
        $$.bound[i](value);
      if (ready)
        make_dirty(component, i);
    }
    return ret;
  }) : [];
  $$.update();
  ready = true;
  run_all($$.before_update);
  $$.fragment = create_fragment26 ? create_fragment26($$.ctx) : false;
  if (options.target) {
    if (options.hydrate) {
      start_hydrating();
      const nodes = children(options.target);
      $$.fragment && $$.fragment.l(nodes);
      nodes.forEach(detach);
    } else {
      $$.fragment && $$.fragment.c();
    }
    if (options.intro)
      transition_in(component.$$.fragment);
    mount_component(component, options.target, options.anchor, options.customElement);
    end_hydrating();
    flush();
  }
  set_current_component(parent_component);
}
var SvelteElement;
if (typeof HTMLElement === "function") {
  SvelteElement = class extends HTMLElement {
    constructor() {
      super();
      this.attachShadow({ mode: "open" });
    }
    connectedCallback() {
      const { on_mount } = this.$$;
      this.$$.on_disconnect = on_mount.map(run).filter(is_function);
      for (const key in this.$$.slotted) {
        this.appendChild(this.$$.slotted[key]);
      }
    }
    attributeChangedCallback(attr2, _oldValue, newValue) {
      this[attr2] = newValue;
    }
    disconnectedCallback() {
      run_all(this.$$.on_disconnect);
    }
    $destroy() {
      destroy_component(this, 1);
      this.$destroy = noop;
    }
    $on(type, callback) {
      const callbacks = this.$$.callbacks[type] || (this.$$.callbacks[type] = []);
      callbacks.push(callback);
      return () => {
        const index = callbacks.indexOf(callback);
        if (index !== -1)
          callbacks.splice(index, 1);
      };
    }
    $set($$props) {
      if (this.$$set && !is_empty($$props)) {
        this.$$.skip_bound = true;
        this.$$set($$props);
        this.$$.skip_bound = false;
      }
    }
  };
}
var SvelteComponent = class {
  $destroy() {
    destroy_component(this, 1);
    this.$destroy = noop;
  }
  $on(type, callback) {
    const callbacks = this.$$.callbacks[type] || (this.$$.callbacks[type] = []);
    callbacks.push(callback);
    return () => {
      const index = callbacks.indexOf(callback);
      if (index !== -1)
        callbacks.splice(index, 1);
    };
  }
  $set($$props) {
    if (this.$$set && !is_empty($$props)) {
      this.$$.skip_bound = true;
      this.$$set($$props);
      this.$$.skip_bound = false;
    }
  }
};

// src/view/Statblock.svelte
var import_obsidian6 = require("obsidian");
var import_querystring = require("querystring");

// src/data/constants.ts
var SAVE_ICON = `<svg aria-hidden="true" focusable="false" data-prefix="far" data-icon="save" class="svg-inline--fa fa-save fa-w-14" role="img" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><path fill="currentColor" d="M433.941 129.941l-83.882-83.882A48 48 0 0 0 316.118 32H48C21.49 32 0 53.49 0 80v352c0 26.51 21.49 48 48 48h352c26.51 0 48-21.49 48-48V163.882a48 48 0 0 0-14.059-33.941zM272 80v80H144V80h128zm122 352H54a6 6 0 0 1-6-6V86a6 6 0 0 1 6-6h42v104c0 13.255 10.745 24 24 24h176c13.255 0 24-10.745 24-24V83.882l78.243 78.243a6 6 0 0 1 1.757 4.243V426a6 6 0 0 1-6 6zM224 232c-48.523 0-88 39.477-88 88s39.477 88 88 88 88-39.477 88-88-39.477-88-88-88zm0 128c-22.056 0-40-17.944-40-40s17.944-40 40-40 40 17.944 40 40-17.944 40-40 40z"></path></svg>`;
var SAVE_SYMBOL = "statblock-save";
var EXPORT_ICON = `<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="download" class="svg-inline--fa fa-download fa-w-16" role="img" viewBox="0 0 512 512"><path fill="currentColor" d="M216 0h80c13.3 0 24 10.7 24 24v168h87.7c17.8 0 26.7 21.5 14.1 34.1L269.7 378.3c-7.5 7.5-19.8 7.5-27.3 0L90.1 226.1c-12.6-12.6-3.7-34.1 14.1-34.1H192V24c0-13.3 10.7-24 24-24zm296 376v112c0 13.3-10.7 24-24 24H24c-13.3 0-24-10.7-24-24V376c0-13.3 10.7-24 24-24h146.7l49 49c20.1 20.1 52.5 20.1 72.6 0l49-49H488c13.3 0 24 10.7 24 24zm-124 88c0-11-9-20-20-20s-20 9-20 20 9 20 20 20 20-9 20-20zm64 0c0-11-9-20-20-20s-20 9-20 20 9 20 20 20 20-9 20-20z"/></svg>`;
var EXPORT_SYMBOL = "statblock-export-as-png";

// node_modules/svelte/store/index.mjs
var subscriber_queue = [];
function writable(value, start2 = noop) {
  let stop;
  const subscribers = /* @__PURE__ */ new Set();
  function set(new_value) {
    if (safe_not_equal(value, new_value)) {
      value = new_value;
      if (stop) {
        const run_queue = !subscriber_queue.length;
        for (const subscriber of subscribers) {
          subscriber[1]();
          subscriber_queue.push(subscriber, value);
        }
        if (run_queue) {
          for (let i = 0; i < subscriber_queue.length; i += 2) {
            subscriber_queue[i][0](subscriber_queue[i + 1]);
          }
          subscriber_queue.length = 0;
        }
      }
    }
  }
  function update2(fn2) {
    set(fn2(value));
  }
  function subscribe2(run2, invalidate = noop) {
    const subscriber = [run2, invalidate];
    subscribers.add(subscriber);
    if (subscribers.size === 1) {
      stop = start2(set) || noop;
    }
    run2(value);
    return () => {
      subscribers.delete(subscriber);
      if (subscribers.size === 0) {
        stop();
        stop = null;
      }
    };
  }
  return { set, update: update2, subscribe: subscribe2 };
}

// src/view/ui/Bar.svelte
function add_css(target) {
  append_styles(target, "svelte-ilp5y8", ".bar.svelte-ilp5y8{height:5px;background:var(--statblock-bar-color);border:var(--statblock-bar-border-size) solid\n            var(--statblock-bar-border-color);z-index:1;width:auto}");
}
function create_fragment(ctx) {
  let div;
  return {
    c() {
      div = element("div");
      attr(div, "class", "bar svelte-ilp5y8");
    },
    m(target, anchor) {
      insert(target, div, anchor);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(div);
    }
  };
}
var Bar = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, null, create_fragment, safe_not_equal, {}, add_css);
  }
};
var Bar_default = Bar;

// src/view/ui/TextContent.svelte
function add_css2(target) {
  append_styles(target, "svelte-1lnliuc", ".inline.svelte-1lnliuc{display:inline}");
}
function get_each_context(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[5] = list[i];
  return child_ctx;
}
function create_else_block(ctx) {
  let each_1_anchor;
  let each_value = ctx[2](ctx[0]);
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
  }
  return {
    c() {
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      each_1_anchor = empty();
    },
    m(target, anchor) {
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(target, anchor);
      }
      insert(target, each_1_anchor, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & 5) {
        each_value = ctx2[2](ctx2[0]);
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value.length;
      }
    },
    d(detaching) {
      destroy_each(each_blocks, detaching);
      if (detaching)
        detach(each_1_anchor);
    }
  };
}
function create_if_block(ctx) {
  let t;
  return {
    c() {
      t = text(ctx[0]);
    },
    m(target, anchor) {
      insert(target, t, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & 1)
        set_data(t, ctx2[0]);
    },
    d(detaching) {
      if (detaching)
        detach(t);
    }
  };
}
function create_else_block_2(ctx) {
  let t_value = ctx[5].text + "";
  let t;
  return {
    c() {
      t = text(t_value);
    },
    m(target, anchor) {
      insert(target, t, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & 1 && t_value !== (t_value = ctx2[5].text + ""))
        set_data(t, t_value);
    },
    d(detaching) {
      if (detaching)
        detach(t);
    }
  };
}
function create_if_block_1(ctx) {
  let if_block_anchor;
  function select_block_type_2(ctx2, dirty) {
    if (ctx2[5].isAlias)
      return create_if_block_2;
    return create_else_block_1;
  }
  let current_block_type = select_block_type_2(ctx, -1);
  let if_block = current_block_type(ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
    },
    p(ctx2, dirty) {
      if (current_block_type === (current_block_type = select_block_type_2(ctx2, dirty)) && if_block) {
        if_block.p(ctx2, dirty);
      } else {
        if_block.d(1);
        if_block = current_block_type(ctx2);
        if (if_block) {
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      }
    },
    d(detaching) {
      if_block.d(detaching);
      if (detaching)
        detach(if_block_anchor);
    }
  };
}
function create_else_block_1(ctx) {
  let a;
  let t0_value = ctx[5].text + "";
  let t0;
  let t1;
  let a_data_href_value;
  let a_href_value;
  return {
    c() {
      a = element("a");
      t0 = text(t0_value);
      t1 = space();
      attr(a, "data-href", a_data_href_value = ctx[5].href);
      attr(a, "href", a_href_value = ctx[5].href);
      attr(a, "class", "internal-link");
      attr(a, "target", "_blank");
      attr(a, "rel", "noopener");
    },
    m(target, anchor) {
      insert(target, a, anchor);
      append(a, t0);
      append(a, t1);
    },
    p(ctx2, dirty) {
      if (dirty & 1 && t0_value !== (t0_value = ctx2[5].text + ""))
        set_data(t0, t0_value);
      if (dirty & 1 && a_data_href_value !== (a_data_href_value = ctx2[5].href)) {
        attr(a, "data-href", a_data_href_value);
      }
      if (dirty & 1 && a_href_value !== (a_href_value = ctx2[5].href)) {
        attr(a, "href", a_href_value);
      }
    },
    d(detaching) {
      if (detaching)
        detach(a);
    }
  };
}
function create_if_block_2(ctx) {
  let a;
  let t0_value = ctx[5].title + "";
  let t0;
  let t1;
  let a_data_href_value;
  let a_href_value;
  let a_aria_label_value;
  return {
    c() {
      a = element("a");
      t0 = text(t0_value);
      t1 = space();
      attr(a, "data-href", a_data_href_value = ctx[5].href);
      attr(a, "href", a_href_value = ctx[5].href);
      attr(a, "class", "internal-link");
      attr(a, "target", "_blank");
      attr(a, "rel", "noopener");
      attr(a, "aria-label", a_aria_label_value = ctx[5].href);
      attr(a, "aria-label-position", "top");
    },
    m(target, anchor) {
      insert(target, a, anchor);
      append(a, t0);
      append(a, t1);
    },
    p(ctx2, dirty) {
      if (dirty & 1 && t0_value !== (t0_value = ctx2[5].title + ""))
        set_data(t0, t0_value);
      if (dirty & 1 && a_data_href_value !== (a_data_href_value = ctx2[5].href)) {
        attr(a, "data-href", a_data_href_value);
      }
      if (dirty & 1 && a_href_value !== (a_href_value = ctx2[5].href)) {
        attr(a, "href", a_href_value);
      }
      if (dirty & 1 && a_aria_label_value !== (a_aria_label_value = ctx2[5].href)) {
        attr(a, "aria-label", a_aria_label_value);
      }
    },
    d(detaching) {
      if (detaching)
        detach(a);
    }
  };
}
function create_each_block(ctx) {
  let if_block_anchor;
  function select_block_type_1(ctx2, dirty) {
    if (ctx2[5].isLink)
      return create_if_block_1;
    return create_else_block_2;
  }
  let current_block_type = select_block_type_1(ctx, -1);
  let if_block = current_block_type(ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
    },
    p(ctx2, dirty) {
      if (current_block_type === (current_block_type = select_block_type_1(ctx2, dirty)) && if_block) {
        if_block.p(ctx2, dirty);
      } else {
        if_block.d(1);
        if_block = current_block_type(ctx2);
        if (if_block) {
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      }
    },
    d(detaching) {
      if_block.d(detaching);
      if (detaching)
        detach(if_block_anchor);
    }
  };
}
function create_fragment2(ctx) {
  let div;
  function select_block_type(ctx2, dirty) {
    if (!ctx2[1])
      return create_if_block;
    return create_else_block;
  }
  let current_block_type = select_block_type(ctx, -1);
  let if_block = current_block_type(ctx);
  return {
    c() {
      div = element("div");
      if_block.c();
      attr(div, "class", "statblock-rendered-text-content inline svelte-1lnliuc");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if_block.m(div, null);
    },
    p(ctx2, [dirty]) {
      if_block.p(ctx2, dirty);
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(div);
      if_block.d();
    }
  };
}
function instance($$self, $$props, $$invalidate) {
  let { textToRender } = $$props;
  const tryToRenderLinks = getContext("tryToRenderLinks");
  const context = getContext("context");
  const generateLink = (link) => {
    let title = "";
    let aliasIndex = link.indexOf("|");
    if (aliasIndex > 0) {
      title = link.slice(aliasIndex + 1).trim();
      link = link.slice(0, aliasIndex).trim();
    } else {
      title = link.trim().split("#").filter(function(e) {
        return !!e;
      }).join(" > ").trim();
    }
    if (link.endsWith("\\")) {
      link = link.slice(0, link.length - 1);
    }
    return {
      href: link = link.replace(/\u00A0/g, " ").trim(),
      title,
      isAlias: aliasIndex > 0
    };
  };
  const splitByLinks = (text2) => {
    return text2.trim().split(/(<STATBLOCK-LINK>[\s\S]+?<\/STATBLOCK-LINK>)/).filter((s) => s && s.length).map((str) => {
      if (/<STATBLOCK-LINK>([\s\S]+?)<\/STATBLOCK-LINK>/.test(str)) {
        let link = str.match(/<STATBLOCK-LINK>([\s\S]+?)<\/STATBLOCK-LINK>/)[1];
        const { href, title, isAlias } = generateLink(link);
        return {
          isLink: true,
          text: link,
          href,
          isAlias,
          title
        };
      }
      return { isLink: false, text: str };
    });
  };
  $$self.$$set = ($$props2) => {
    if ("textToRender" in $$props2)
      $$invalidate(0, textToRender = $$props2.textToRender);
  };
  return [textToRender, tryToRenderLinks, splitByLinks];
}
var TextContent = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance, create_fragment2, safe_not_equal, { textToRender: 0 }, add_css2);
  }
};
var TextContent_default = TextContent;

// src/view/ui/DiceHolder.svelte
var import_obsidian = require("obsidian");

// src/view/ui/DiceRoll.svelte
function add_css3(target) {
  append_styles(target, "svelte-l05x30", ".roller-result.svelte-l05x30{font-weight:var(--statblock-font-weight)}");
}
function create_else_block2(ctx) {
  let span;
  let rollerEl_action;
  let t;
  let if_block_anchor;
  let mounted;
  let dispose;
  let if_block = (typeof ctx[1] == "number" || ctx[1] && ctx[1].length) && create_if_block_12(ctx);
  return {
    c() {
      span = element("span");
      t = space();
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
      attr(span, "class", "roller-result svelte-l05x30");
    },
    m(target, anchor) {
      insert(target, span, anchor);
      insert(target, t, anchor);
      if (if_block)
        if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
      if (!mounted) {
        dispose = action_destroyer(rollerEl_action = ctx[4].call(null, span));
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (typeof ctx2[1] == "number" || ctx2[1] && ctx2[1].length) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block_12(ctx2);
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
    },
    d(detaching) {
      if (detaching)
        detach(span);
      if (detaching)
        detach(t);
      if (if_block)
        if_block.d(detaching);
      if (detaching)
        detach(if_block_anchor);
      mounted = false;
      dispose();
    }
  };
}
function create_if_block2(ctx) {
  let t;
  return {
    c() {
      t = text(ctx[0]);
    },
    m(target, anchor) {
      insert(target, t, anchor);
    },
    p(ctx2, dirty) {
      if (dirty & 1)
        set_data(t, ctx2[0]);
    },
    d(detaching) {
      if (detaching)
        detach(t);
    }
  };
}
function create_if_block_12(ctx) {
  let span;
  let t0;
  let t1;
  let t2;
  return {
    c() {
      span = element("span");
      t0 = text("(");
      t1 = text(ctx[1]);
      t2 = text(")");
      attr(span, "class", "dice-original");
    },
    m(target, anchor) {
      insert(target, span, anchor);
      append(span, t0);
      append(span, t1);
      append(span, t2);
    },
    p(ctx2, dirty) {
      if (dirty & 2)
        set_data(t1, ctx2[1]);
    },
    d(detaching) {
      if (detaching)
        detach(span);
    }
  };
}
function create_key_block(ctx) {
  let if_block_anchor;
  function select_block_type(ctx2, dirty) {
    if (ctx2[2] || !ctx2[3])
      return create_if_block2;
    return create_else_block2;
  }
  let current_block_type = select_block_type(ctx, -1);
  let if_block = current_block_type(ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
    },
    p(ctx2, dirty) {
      if (current_block_type === (current_block_type = select_block_type(ctx2, dirty)) && if_block) {
        if_block.p(ctx2, dirty);
      } else {
        if_block.d(1);
        if_block = current_block_type(ctx2);
        if (if_block) {
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      }
    },
    d(detaching) {
      if_block.d(detaching);
      if (detaching)
        detach(if_block_anchor);
    }
  };
}
function create_fragment3(ctx) {
  let previous_key = ctx[2];
  let key_block_anchor;
  let key_block = create_key_block(ctx);
  return {
    c() {
      key_block.c();
      key_block_anchor = empty();
    },
    m(target, anchor) {
      key_block.m(target, anchor);
      insert(target, key_block_anchor, anchor);
    },
    p(ctx2, [dirty]) {
      if (dirty & 4 && safe_not_equal(previous_key, previous_key = ctx2[2])) {
        key_block.d(1);
        key_block = create_key_block(ctx2);
        key_block.c();
        key_block.m(key_block_anchor.parentNode, key_block_anchor);
      } else {
        key_block.p(ctx2, dirty);
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(key_block_anchor);
      key_block.d(detaching);
    }
  };
}
function instance2($$self, $$props, $$invalidate) {
  let { text: text2 } = $$props;
  let { original = text2 } = $$props;
  const dice = getContext("dice");
  const plugin = getContext("plugin");
  const render = getContext("render");
  const reset = getContext("reset");
  reset.subscribe(async (v) => {
    if (v)
      await roller.applyResult({
        type: "dice",
        result: defaultValue,
        tooltip: "Average"
      });
  });
  let roller = null;
  let error = false;
  if (!roller && dice) {
    try {
      roller = plugin.getRoller(`${text2}`);
    } catch (e) {
      console.error(e);
      error = true;
    }
  }
  let defaultValue = 0;
  onMount(async () => {
    if (roller) {
      try {
        await roller.roll();
        defaultValue = roller.dice.reduce(
          (a, dice2) => a + (dice2.static ? dice2.result : Math.ceil((dice2.faces.min + dice2.faces.max) / 2 * dice2.rolls)),
          0
        );
        await roller.applyResult({
          type: "dice",
          result: defaultValue,
          tooltip: "Average"
        });
        roller.shouldRender = render;
      } catch (e) {
        $$invalidate(2, error = true);
      }
    }
  });
  const rollerEl = (node) => {
    if (!roller || !roller.containerEl) {
      node.setText(`${original}`);
    } else {
      node.appendChild(roller.containerEl);
    }
  };
  $$self.$$set = ($$props2) => {
    if ("text" in $$props2)
      $$invalidate(0, text2 = $$props2.text);
    if ("original" in $$props2)
      $$invalidate(1, original = $$props2.original);
  };
  return [text2, original, error, dice, rollerEl];
}
var DiceRoll = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance2, create_fragment3, safe_not_equal, { text: 0, original: 1 }, add_css3);
  }
};
var DiceRoll_default = DiceRoll;

// src/view/ui/DiceHolder.svelte
function add_css4(target) {
  append_styles(target, "svelte-12rzfyk", ".property-text.svelte-12rzfyk{display:inline;white-space:pre-line;text-indent:0}.property-text.svelte-12rzfyk{display:inline;margin:0}");
}
function get_each_context2(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[6] = list[i];
  return child_ctx;
}
function create_else_block3(ctx) {
  let each_1_anchor;
  let current;
  let each_value = ctx[1];
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block2(get_each_context2(ctx, each_value, i));
  }
  const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
    each_blocks[i] = null;
  });
  return {
    c() {
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      each_1_anchor = empty();
    },
    m(target, anchor) {
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(target, anchor);
      }
      insert(target, each_1_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty & 3) {
        each_value = ctx2[1];
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context2(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
            transition_in(each_blocks[i], 1);
          } else {
            each_blocks[i] = create_each_block2(child_ctx);
            each_blocks[i].c();
            transition_in(each_blocks[i], 1);
            each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
          }
        }
        group_outros();
        for (i = each_value.length; i < each_blocks.length; i += 1) {
          out(i);
        }
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i = 0; i < each_value.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      current = false;
    },
    d(detaching) {
      destroy_each(each_blocks, detaching);
      if (detaching)
        detach(each_1_anchor);
    }
  };
}
function create_if_block3(ctx) {
  let span;
  let textcontent;
  let current;
  textcontent = new TextContent_default({
    props: { textToRender: ctx[0] }
  });
  return {
    c() {
      span = element("span");
      create_component(textcontent.$$.fragment);
      attr(span, "class", "property-text svelte-12rzfyk");
    },
    m(target, anchor) {
      insert(target, span, anchor);
      mount_component(textcontent, span, null);
      current = true;
    },
    p(ctx2, dirty) {
      const textcontent_changes = {};
      if (dirty & 1)
        textcontent_changes.textToRender = ctx2[0];
      textcontent.$set(textcontent_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(textcontent.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(textcontent.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(span);
      destroy_component(textcontent);
    }
  };
}
function create_else_block_12(ctx) {
  let span;
  let textcontent;
  let t;
  let current;
  textcontent = new TextContent_default({ props: { textToRender: ctx[6] } });
  return {
    c() {
      span = element("span");
      create_component(textcontent.$$.fragment);
      t = space();
      attr(span, "class", "property-text svelte-12rzfyk");
    },
    m(target, anchor) {
      insert(target, span, anchor);
      mount_component(textcontent, span, null);
      append(span, t);
      current = true;
    },
    p(ctx2, dirty) {
      const textcontent_changes = {};
      if (dirty & 2)
        textcontent_changes.textToRender = ctx2[6];
      textcontent.$set(textcontent_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(textcontent.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(textcontent.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(span);
      destroy_component(textcontent);
    }
  };
}
function create_if_block_13(ctx) {
  let diceroll;
  let current;
  diceroll = new DiceRoll_default({
    props: {
      text: ctx[6]?.text ?? ctx[0],
      original: ctx[6]?.original ?? ctx[6]?.text ?? ctx[0]
    }
  });
  return {
    c() {
      create_component(diceroll.$$.fragment);
    },
    m(target, anchor) {
      mount_component(diceroll, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const diceroll_changes = {};
      if (dirty & 3)
        diceroll_changes.text = ctx2[6]?.text ?? ctx2[0];
      if (dirty & 3)
        diceroll_changes.original = ctx2[6]?.original ?? ctx2[6]?.text ?? ctx2[0];
      diceroll.$set(diceroll_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(diceroll.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(diceroll.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(diceroll, detaching);
    }
  };
}
function create_each_block2(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block_13, create_else_block_12];
  const if_blocks = [];
  function select_block_type_1(ctx2, dirty) {
    if (typeof ctx2[6] != "string" && typeof ctx2[6] == "object" && "text" in ctx2[6])
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type_1(ctx, -1);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      insert(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type_1(ctx2, dirty);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if_blocks[current_block_type_index].d(detaching);
      if (detaching)
        detach(if_block_anchor);
    }
  };
}
function create_fragment4(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block3, create_else_block3];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (!ctx2[2])
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx, -1);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      insert(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      if_block.p(ctx2, dirty);
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if_blocks[current_block_type_index].d(detaching);
      if (detaching)
        detach(if_block_anchor);
    }
  };
}
function instance3($$self, $$props, $$invalidate) {
  let { property } = $$props;
  let item = getContext("item");
  let dice = getContext("dice") && item.dice;
  let monster = getContext("monster");
  let plugin = getContext("plugin");
  let split = [property];
  if (dice) {
    if (item.diceProperty && item.diceProperty in monster && typeof monster[item.diceProperty] == "string") {
      split = [{ text: monster[item.diceProperty] }];
    } else if (item.diceCallback) {
      try {
        const frame = document.body.createEl("iframe");
        const funct = frame.contentWindow.Function;
        const func = new funct("monster", "property", item.diceCallback);
        const parsed = func.call(void 0, monster, property) ?? property;
        document.body.removeChild(frame);
        if (Array.isArray(parsed)) {
          split = parsed;
        } else {
          split = [parsed];
        }
      } catch (e) {
        new import_obsidian.Notice(`There was an error executing the provided dice callback for [${item.properties.join(", ")}]

${e.message}`);
        console.error(e);
      }
    } else {
      const parsed = plugin.parseForDice(property);
      if (Array.isArray(parsed)) {
        split = parsed;
      } else {
        split = [parsed];
      }
    }
  }
  $$self.$$set = ($$props2) => {
    if ("property" in $$props2)
      $$invalidate(0, property = $$props2.property);
  };
  return [property, split, dice];
}
var DiceHolder = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance3, create_fragment4, safe_not_equal, { property: 0 }, add_css4);
  }
};
var DiceHolder_default = DiceHolder;

// src/view/ui/MarkdownHolder.svelte
var import_obsidian2 = require("obsidian");
function add_css5(target) {
  append_styles(target, "svelte-4lp5jt", ".statblock-markdown.svelte-4lp5jt{display:inline}.statblock-markdown.svelte-4lp5jt p{display:inline}");
}
function create_fragment5(ctx) {
  let div;
  let markdown_action;
  let mounted;
  let dispose;
  return {
    c() {
      div = element("div");
      attr(div, "class", "statblock-markdown svelte-4lp5jt");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (!mounted) {
        dispose = action_destroyer(markdown_action = ctx[0].call(null, div));
        mounted = true;
      }
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(div);
      mounted = false;
      dispose();
    }
  };
}
function instance4($$self, $$props, $$invalidate) {
  let { property } = $$props;
  property = property.replace(/<STATBLOCK-LINK>/g, "[[").replace(/<\/STATBLOCK-LINK>/g, "]]");
  const context = getContext("context");
  const renderer = getContext("renderer");
  const markdown = (node) => {
    import_obsidian2.MarkdownRenderer.renderMarkdown(property, node, context, renderer);
  };
  $$self.$$set = ($$props2) => {
    if ("property" in $$props2)
      $$invalidate(1, property = $$props2.property);
  };
  return [markdown, property];
}
var MarkdownHolder = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance4, create_fragment5, safe_not_equal, { property: 1 }, add_css5);
  }
};
var MarkdownHolder_default = MarkdownHolder;

// src/view/ui/TextContentHolder.svelte
function create_else_block4(ctx) {
  let diceholder;
  let current;
  diceholder = new DiceHolder_default({ props: { property: ctx[0] } });
  return {
    c() {
      create_component(diceholder.$$.fragment);
    },
    m(target, anchor) {
      mount_component(diceholder, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const diceholder_changes = {};
      if (dirty & 1)
        diceholder_changes.property = ctx2[0];
      diceholder.$set(diceholder_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(diceholder.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(diceholder.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(diceholder, detaching);
    }
  };
}
function create_if_block4(ctx) {
  let markdownholder;
  let current;
  markdownholder = new MarkdownHolder_default({ props: { property: ctx[0] } });
  return {
    c() {
      create_component(markdownholder.$$.fragment);
    },
    m(target, anchor) {
      mount_component(markdownholder, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const markdownholder_changes = {};
      if (dirty & 1)
        markdownholder_changes.property = ctx2[0];
      markdownholder.$set(markdownholder_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(markdownholder.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(markdownholder.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(markdownholder, detaching);
    }
  };
}
function create_fragment6(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block4, create_else_block4];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (ctx2[1])
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx, -1);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      insert(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2, dirty);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if_blocks[current_block_type_index].d(detaching);
      if (detaching)
        detach(if_block_anchor);
    }
  };
}
function instance5($$self, $$props, $$invalidate) {
  let { property } = $$props;
  let { render = false } = $$props;
  $$self.$$set = ($$props2) => {
    if ("property" in $$props2)
      $$invalidate(0, property = $$props2.property);
    if ("render" in $$props2)
      $$invalidate(1, render = $$props2.render);
  };
  return [property, render];
}
var TextContentHolder = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance5, create_fragment6, safe_not_equal, { property: 0, render: 1 });
  }
};
var TextContentHolder_default = TextContentHolder;

// src/view/ui/Traits.svelte
function add_css6(target) {
  append_styles(target, "svelte-17sj2ks", ".property-name.svelte-17sj2ks{margin:0;margin-right:0.25em;display:inline;font-weight:var(--statblock-traits-font-weight);font-style:var(--statblock-traits-font-style)}");
}
function create_if_block5(ctx) {
  let div;
  let textcontent;
  let current;
  textcontent = new TextContent_default({ props: { textToRender: ctx[0] } });
  return {
    c() {
      div = element("div");
      create_component(textcontent.$$.fragment);
      attr(div, "class", "property-name svelte-17sj2ks");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      mount_component(textcontent, div, null);
      current = true;
    },
    p(ctx2, dirty) {
      const textcontent_changes = {};
      if (dirty & 1)
        textcontent_changes.textToRender = ctx2[0];
      textcontent.$set(textcontent_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(textcontent.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(textcontent.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      destroy_component(textcontent);
    }
  };
}
function create_fragment7(ctx) {
  let div;
  let t;
  let textcontentholder;
  let current;
  let if_block = ctx[0] && create_if_block5(ctx);
  textcontentholder = new TextContentHolder_default({
    props: {
      render: ctx[2],
      property: ctx[1]
    }
  });
  return {
    c() {
      div = element("div");
      if (if_block)
        if_block.c();
      t = space();
      create_component(textcontentholder.$$.fragment);
      attr(div, "class", "property");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (if_block)
        if_block.m(div, null);
      append(div, t);
      mount_component(textcontentholder, div, null);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (ctx2[0]) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & 1) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block5(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(div, t);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
      const textcontentholder_changes = {};
      if (dirty & 4)
        textcontentholder_changes.render = ctx2[2];
      if (dirty & 2)
        textcontentholder_changes.property = ctx2[1];
      textcontentholder.$set(textcontentholder_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      transition_in(textcontentholder.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      transition_out(textcontentholder.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      if (if_block)
        if_block.d();
      destroy_component(textcontentholder);
    }
  };
}
function instance6($$self, $$props, $$invalidate) {
  let { name } = $$props;
  let { desc } = $$props;
  let { render = false } = $$props;
  $$self.$$set = ($$props2) => {
    if ("name" in $$props2)
      $$invalidate(0, name = $$props2.name);
    if ("desc" in $$props2)
      $$invalidate(1, desc = $$props2.desc);
    if ("render" in $$props2)
      $$invalidate(2, render = $$props2.render);
  };
  return [name, desc, render];
}
var Traits = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance6, create_fragment7, safe_not_equal, { name: 0, desc: 1, render: 2 }, add_css6);
  }
};
var Traits_default = Traits;

// src/view/ui/Spells.svelte
var import_obsidian3 = require("obsidian");
function add_css7(target) {
  append_styles(target, "svelte-1kk02hm", ".spell-line.svelte-1kk02hm .spells.svelte-1kk02hm{font-style:var(--statblock-spells-font-style)}");
}
function get_each_context3(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[4] = list[i];
  child_ctx[6] = i;
  return child_ctx;
}
function get_each_context_1(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[7] = list[i];
  child_ctx[9] = i;
  return child_ctx;
}
function create_else_block_13(ctx) {
  let traits;
  let current;
  traits = new Traits_default({
    props: { name: "", desc: ctx[4].header }
  });
  return {
    c() {
      create_component(traits.$$.fragment);
    },
    m(target, anchor) {
      mount_component(traits, target, anchor);
      current = true;
    },
    p: noop,
    i(local) {
      if (current)
        return;
      transition_in(traits.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(traits.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(traits, detaching);
    }
  };
}
function create_if_block_14(ctx) {
  let traits;
  let current;
  traits = new Traits_default({
    props: {
      name: "Spellcasting",
      desc: ctx[4].header
    }
  });
  return {
    c() {
      create_component(traits.$$.fragment);
    },
    m(target, anchor) {
      mount_component(traits, target, anchor);
      current = true;
    },
    p: noop,
    i(local) {
      if (current)
        return;
      transition_in(traits.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(traits.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(traits, detaching);
    }
  };
}
function create_else_block5(ctx) {
  let li;
  let span0;
  let textcontentholder0;
  let t;
  let span1;
  let textcontentholder1;
  let current;
  textcontentholder0 = new TextContentHolder_default({
    props: {
      render: ctx[0],
      property: `${ctx[7].level}:`
    }
  });
  textcontentholder1 = new TextContentHolder_default({
    props: {
      render: ctx[0],
      property: ctx[7].spells
    }
  });
  return {
    c() {
      li = element("li");
      span0 = element("span");
      create_component(textcontentholder0.$$.fragment);
      t = space();
      span1 = element("span");
      create_component(textcontentholder1.$$.fragment);
      attr(span0, "class", "spell-level");
      attr(span1, "class", "spells svelte-1kk02hm");
      attr(li, "class", "spell-line svelte-1kk02hm");
    },
    m(target, anchor) {
      insert(target, li, anchor);
      append(li, span0);
      mount_component(textcontentholder0, span0, null);
      append(li, t);
      append(li, span1);
      mount_component(textcontentholder1, span1, null);
      current = true;
    },
    p(ctx2, dirty) {
      const textcontentholder0_changes = {};
      if (dirty & 1)
        textcontentholder0_changes.render = ctx2[0];
      textcontentholder0.$set(textcontentholder0_changes);
      const textcontentholder1_changes = {};
      if (dirty & 1)
        textcontentholder1_changes.render = ctx2[0];
      textcontentholder1.$set(textcontentholder1_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(textcontentholder0.$$.fragment, local);
      transition_in(textcontentholder1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(textcontentholder0.$$.fragment, local);
      transition_out(textcontentholder1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(li);
      destroy_component(textcontentholder0);
      destroy_component(textcontentholder1);
    }
  };
}
function create_if_block6(ctx) {
  let span;
  let textcontentholder;
  let current;
  textcontentholder = new TextContentHolder_default({
    props: {
      render: ctx[0],
      property: ctx[7].spells
    }
  });
  return {
    c() {
      span = element("span");
      create_component(textcontentholder.$$.fragment);
      attr(span, "class", "spell-line");
    },
    m(target, anchor) {
      insert(target, span, anchor);
      mount_component(textcontentholder, span, null);
      current = true;
    },
    p(ctx2, dirty) {
      const textcontentholder_changes = {};
      if (dirty & 1)
        textcontentholder_changes.render = ctx2[0];
      textcontentholder.$set(textcontentholder_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(textcontentholder.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(textcontentholder.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(span);
      destroy_component(textcontentholder);
    }
  };
}
function create_each_block_1(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block6, create_else_block5];
  const if_blocks = [];
  function select_block_type_1(ctx2, dirty) {
    if (!ctx2[7].level)
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type_1(ctx, -1);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      insert(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if_block.p(ctx2, dirty);
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if_blocks[current_block_type_index].d(detaching);
      if (detaching)
        detach(if_block_anchor);
    }
  };
}
function create_each_block3(ctx) {
  let current_block_type_index;
  let if_block;
  let t0;
  let ul;
  let t1;
  let current;
  const if_block_creators = [create_if_block_14, create_else_block_13];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (ctx2[6] === 0)
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx, -1);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  let each_value_1 = ctx[4].spells;
  let each_blocks = [];
  for (let i = 0; i < each_value_1.length; i += 1) {
    each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
  }
  const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
    each_blocks[i] = null;
  });
  return {
    c() {
      if_block.c();
      t0 = space();
      ul = element("ul");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      t1 = space();
      attr(ul, "class", "spell-list");
    },
    m(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      insert(target, t0, anchor);
      insert(target, ul, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(ul, null);
      }
      append(ul, t1);
      current = true;
    },
    p(ctx2, dirty) {
      if_block.p(ctx2, dirty);
      if (dirty & 3) {
        each_value_1 = ctx2[4].spells;
        let i;
        for (i = 0; i < each_value_1.length; i += 1) {
          const child_ctx = get_each_context_1(ctx2, each_value_1, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
            transition_in(each_blocks[i], 1);
          } else {
            each_blocks[i] = create_each_block_1(child_ctx);
            each_blocks[i].c();
            transition_in(each_blocks[i], 1);
            each_blocks[i].m(ul, t1);
          }
        }
        group_outros();
        for (i = each_value_1.length; i < each_blocks.length; i += 1) {
          out(i);
        }
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      for (let i = 0; i < each_value_1.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      current = true;
    },
    o(local) {
      transition_out(if_block);
      each_blocks = each_blocks.filter(Boolean);
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      current = false;
    },
    d(detaching) {
      if_blocks[current_block_type_index].d(detaching);
      if (detaching)
        detach(t0);
      if (detaching)
        detach(ul);
      destroy_each(each_blocks, detaching);
    }
  };
}
function create_fragment8(ctx) {
  let div;
  let current;
  let each_value = ctx[1];
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block3(get_each_context3(ctx, each_value, i));
  }
  const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
    each_blocks[i] = null;
  });
  return {
    c() {
      div = element("div");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      attr(div, "class", "spellcasting");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(div, null);
      }
      current = true;
    },
    p(ctx2, [dirty]) {
      if (dirty & 3) {
        each_value = ctx2[1];
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context3(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
            transition_in(each_blocks[i], 1);
          } else {
            each_blocks[i] = create_each_block3(child_ctx);
            each_blocks[i].c();
            transition_in(each_blocks[i], 1);
            each_blocks[i].m(div, null);
          }
        }
        group_outros();
        for (i = each_value.length; i < each_blocks.length; i += 1) {
          out(i);
        }
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i = 0; i < each_value.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      destroy_each(each_blocks, detaching);
    }
  };
}
function instance7($$self, $$props, $$invalidate) {
  let { render = false } = $$props;
  let { monster } = $$props;
  const ensureColon = (header) => {
    if (/[^a-zA-Z0-9]$/.test(header))
      return header;
    return `${header}:`;
  };
  let spellBlocks = monster.spells.reduce(
    (acc, current) => {
      if (typeof current === "string" && (current.charAt(current.length - 1) == ":" || !current.includes(":"))) {
        const newBlock = { header: ensureColon(current), spells: [] };
        acc.push(newBlock);
        return acc;
      }
      const lastBlock = acc[acc.length - 1];
      let spell;
      if (typeof current == "string") {
        spell = { spells: current };
      } else {
        try {
          spell = {
            level: Object.keys(current).shift(),
            spells: stringify(Object.values(current).shift())
          };
        } catch (e) {
          return acc;
        }
      }
      if (lastBlock) {
        lastBlock.spells.push(spell);
      } else {
        const missingHeaderBlock = {
          header: `${monster.name} knows the following spells:`,
          spells: [spell]
        };
        acc.push(missingHeaderBlock);
      }
      return acc;
    },
    []
  );
  $$self.$$set = ($$props2) => {
    if ("render" in $$props2)
      $$invalidate(0, render = $$props2.render);
    if ("monster" in $$props2)
      $$invalidate(2, monster = $$props2.monster);
  };
  return [render, spellBlocks, monster];
}
var Spells = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance7, create_fragment8, safe_not_equal, { render: 0, monster: 2 }, add_css7);
  }
};
var Spells_default = Spells;

// src/view/ui/Heading.svelte
function add_css8(target) {
  append_styles(target, "svelte-opcuxo", ".flex-container.svelte-opcuxo{display:flex;justify-content:space-between;align-items:center}.heading.svelte-opcuxo{font-family:var(--statblock-heading-font);color:var(--statblock-heading-font-color);font-weight:var(--statblock-heading-font-weight);margin:0px;font-size:var(--statblock-heading-font-size);letter-spacing:1px;font-variant:var(--statblock-heading-font-variant);display:flex;justify-content:space-between;align-items:center;line-height:var(--statblock-heading-line-height)}");
}
function get_each_context4(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[2] = list[i];
  return child_ctx;
}
function create_if_block7(ctx) {
  let div;
  let textcontent;
  let t;
  let current;
  textcontent = new TextContent_default({
    props: {
      textToRender: stringify(ctx[0][ctx[2]])
    }
  });
  return {
    c() {
      div = element("div");
      create_component(textcontent.$$.fragment);
      t = space();
      attr(div, "class", "heading svelte-opcuxo");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      mount_component(textcontent, div, null);
      append(div, t);
      current = true;
    },
    p(ctx2, dirty) {
      const textcontent_changes = {};
      if (dirty & 3)
        textcontent_changes.textToRender = stringify(ctx2[0][ctx2[2]]);
      textcontent.$set(textcontent_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(textcontent.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(textcontent.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      destroy_component(textcontent);
    }
  };
}
function create_each_block4(ctx) {
  let if_block_anchor;
  let current;
  let if_block = ctx[2] in ctx[0] && create_if_block7(ctx);
  return {
    c() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (ctx2[2] in ctx2[0]) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & 3) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block7(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (if_block)
        if_block.d(detaching);
      if (detaching)
        detach(if_block_anchor);
    }
  };
}
function create_fragment9(ctx) {
  let div;
  let current;
  let each_value = ctx[1].properties;
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block4(get_each_context4(ctx, each_value, i));
  }
  const out = (i) => transition_out(each_blocks[i], 1, 1, () => {
    each_blocks[i] = null;
  });
  return {
    c() {
      div = element("div");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      attr(div, "class", "flex-container svelte-opcuxo");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(div, null);
      }
      current = true;
    },
    p(ctx2, [dirty]) {
      if (dirty & 3) {
        each_value = ctx2[1].properties;
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context4(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
            transition_in(each_blocks[i], 1);
          } else {
            each_blocks[i] = create_each_block4(child_ctx);
            each_blocks[i].c();
            transition_in(each_blocks[i], 1);
            each_blocks[i].m(div, null);
          }
        }
        group_outros();
        for (i = each_value.length; i < each_blocks.length; i += 1) {
          out(i);
        }
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      for (let i = 0; i < each_value.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      current = true;
    },
    o(local) {
      each_blocks = each_blocks.filter(Boolean);
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      destroy_each(each_blocks, detaching);
    }
  };
}
function instance8($$self, $$props, $$invalidate) {
  let { monster } = $$props;
  let { item } = $$props;
  $$self.$$set = ($$props2) => {
    if ("monster" in $$props2)
      $$invalidate(0, monster = $$props2.monster);
    if ("item" in $$props2)
      $$invalidate(1, item = $$props2.item);
  };
  return [monster, item];
}
var Heading = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance8, create_fragment9, safe_not_equal, { monster: 0, item: 1 }, add_css8);
  }
};
var Heading_default = Heading;

// src/view/ui/PropertyLine.svelte
var import_obsidian4 = require("obsidian");
function add_css9(target) {
  append_styles(target, "svelte-151kcqm", ".line.svelte-151kcqm{line-height:var(--statblock-property-line-height);display:block;color:var(--statblock-property-font-color)}.property-name.svelte-151kcqm{margin:0;margin-right:0.25em;display:inline;color:var(--statblock-property-name-font-color);font-weight:var(--statblock-property-name-font-weight)}");
}
function create_if_block8(ctx) {
  let div;
  let span;
  let t1;
  let textcontentholder;
  let current;
  textcontentholder = new TextContentHolder_default({
    props: {
      render: ctx[0].markdown,
      property: ctx[1]
    }
  });
  return {
    c() {
      div = element("div");
      span = element("span");
      span.textContent = `${ctx[2]}`;
      t1 = space();
      create_component(textcontentholder.$$.fragment);
      attr(span, "class", "property-name svelte-151kcqm");
      attr(div, "class", "line svelte-151kcqm");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, span);
      append(div, t1);
      mount_component(textcontentholder, div, null);
      current = true;
    },
    p(ctx2, dirty) {
      const textcontentholder_changes = {};
      if (dirty & 1)
        textcontentholder_changes.render = ctx2[0].markdown;
      if (dirty & 2)
        textcontentholder_changes.property = ctx2[1];
      textcontentholder.$set(textcontentholder_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(textcontentholder.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(textcontentholder.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      destroy_component(textcontentholder);
    }
  };
}
function create_fragment10(ctx) {
  let if_block_anchor;
  let current;
  let if_block = (!ctx[0].conditioned || ctx[0].conditioned && `${ctx[1]}`.length) && create_if_block8(ctx);
  return {
    c() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (!ctx2[0].conditioned || ctx2[0].conditioned && `${ctx2[1]}`.length) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & 3) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block8(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (if_block)
        if_block.d(detaching);
      if (detaching)
        detach(if_block_anchor);
    }
  };
}
function instance9($$self, $$props, $$invalidate) {
  let { monster } = $$props;
  let { item } = $$props;
  let property = stringify(monster[item.properties[0]]);
  let display = item.display ?? item.properties[0];
  if (item.callback) {
    try {
      const frame = document.body.createEl("iframe");
      const funct = frame.contentWindow.Function;
      const func = new funct("monster", item.callback);
      property = func.call(void 0, monster) ?? property;
      document.body.removeChild(frame);
    } catch (e) {
      new import_obsidian4.Notice(`There was an error executing the provided callback for [${item.properties.join(", ")}]

${e.message}`);
      console.error(e);
    }
  }
  if (!item.conditioned && !`${property}`.length) {
    property = item.fallback ?? "-";
  }
  $$self.$$set = ($$props2) => {
    if ("monster" in $$props2)
      $$invalidate(3, monster = $$props2.monster);
    if ("item" in $$props2)
      $$invalidate(0, item = $$props2.item);
  };
  return [item, property, display, monster];
}
var PropertyLine = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance9, create_fragment10, safe_not_equal, { monster: 3, item: 0 }, add_css9);
  }
};
var PropertyLine_default = PropertyLine;

// src/view/ui/Rule.svelte
function add_css10(target) {
  append_styles(target, "svelte-sujd32", ".tapered-rule.svelte-sujd32{width:auto;margin:0.5em 0;height:5px;background:-webkit-linear-gradient(\n            0deg,\n            var(--statblock-rule-color) 0%,\n            var(--statblock-rule-color) 50%,\n            var(--statblock-background-color) 95%,\n            var(--statblock-background-color) 100%\n        );clip-path:polygon(0 0, 0 100%, 95% 50%);-webkit-clip-path:polygon(0 0, 0 100%, 95% 50%)}");
}
function create_fragment11(ctx) {
  let div;
  return {
    c() {
      div = element("div");
      attr(div, "class", "tapered-rule svelte-sujd32");
    },
    m(target, anchor) {
      insert(target, div, anchor);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(div);
    }
  };
}
var Rule = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, null, create_fragment11, safe_not_equal, {}, add_css10);
  }
};
var Rule_default = Rule;

// src/view/ui/Saves.svelte
function add_css11(target) {
  append_styles(target, "svelte-sgnocl", ".line.svelte-sgnocl{line-height:var(--statblock-saves-line-height);display:block;color:var(--statblock-font-color)}.property-name.svelte-sgnocl{margin:0;margin-right:0.25em;display:inline;font-weight:bold}.property-text.svelte-sgnocl{display:inline;margin:0}");
}
function create_fragment12(ctx) {
  let div2;
  let div1;
  let span;
  let t0_value = (ctx[0].display ?? toTitleCase(ctx[0].properties[0])) + "";
  let t0;
  let t1;
  let div0;
  let textcontentholder;
  let current;
  textcontentholder = new TextContentHolder_default({
    props: {
      render: ctx[0].markdown,
      property: ctx[1]
    }
  });
  return {
    c() {
      div2 = element("div");
      div1 = element("div");
      span = element("span");
      t0 = text(t0_value);
      t1 = space();
      div0 = element("div");
      create_component(textcontentholder.$$.fragment);
      attr(span, "class", "property-name svelte-sgnocl");
      attr(div0, "class", "property-text svelte-sgnocl");
      attr(div1, "class", "line svelte-sgnocl");
      attr(div2, "class", "info");
    },
    m(target, anchor) {
      insert(target, div2, anchor);
      append(div2, div1);
      append(div1, span);
      append(span, t0);
      append(div1, t1);
      append(div1, div0);
      mount_component(textcontentholder, div0, null);
      current = true;
    },
    p(ctx2, [dirty]) {
      if ((!current || dirty & 1) && t0_value !== (t0_value = (ctx2[0].display ?? toTitleCase(ctx2[0].properties[0])) + ""))
        set_data(t0, t0_value);
      const textcontentholder_changes = {};
      if (dirty & 1)
        textcontentholder_changes.render = ctx2[0].markdown;
      textcontentholder.$set(textcontentholder_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(textcontentholder.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(textcontentholder.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div2);
      destroy_component(textcontentholder);
    }
  };
}
function getMod(value) {
  return `${value > 0 ? "+" : ""}${value}`;
}
function instance10($$self, $$props, $$invalidate) {
  let { monster } = $$props;
  let { item } = $$props;
  let arr = monster[item.properties[0]];
  if (!Array.isArray(arr)) {
    arr = [];
  }
  const saves = arr.map((ability) => {
    if (typeof ability != "object" || ability == null)
      return null;
    let key = Object.keys(ability)[0];
    if (!key)
      return null;
    const value = Object.values(ability)[0];
    if (!value || isNaN(Number(value)))
      return null;
    return `${toTitleCase(key)} ${getMod(value)}`;
  }).filter((m) => m).join(", ");
  let canDice = getContext("dice");
  $$self.$$set = ($$props2) => {
    if ("monster" in $$props2)
      $$invalidate(2, monster = $$props2.monster);
    if ("item" in $$props2)
      $$invalidate(0, item = $$props2.item);
  };
  return [item, saves, monster];
}
var Saves = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance10, create_fragment12, safe_not_equal, { monster: 2, item: 0 }, add_css11);
  }
};
var Saves_default = Saves;

// src/view/ui/SectionHeading.svelte
function add_css12(target) {
  append_styles(target, "svelte-1x5mdf", ".section-header.svelte-1x5mdf{border-bottom:var(--statblock-section-heading-border-size) solid\n            var(--statblock-section-heading-border-color);color:var(--statblock-section-heading-font-color);font-size:var(--statblock-section-heading-font-size);font-variant:var(--statblock-section-heading-font-variant);font-weight:var(--statblock-section-heading-font-weight);letter-spacing:1px;margin:0;margin-bottom:0.3em;break-inside:avoid-column;break-after:avoid-column}");
}
function create_if_block9(ctx) {
  let h3;
  let textcontent;
  let current;
  textcontent = new TextContent_default({
    props: { textToRender: ctx[0] }
  });
  return {
    c() {
      h3 = element("h3");
      create_component(textcontent.$$.fragment);
      attr(h3, "class", "section-header svelte-1x5mdf");
    },
    m(target, anchor) {
      insert(target, h3, anchor);
      mount_component(textcontent, h3, null);
      current = true;
    },
    p(ctx2, dirty) {
      const textcontent_changes = {};
      if (dirty & 1)
        textcontent_changes.textToRender = ctx2[0];
      textcontent.$set(textcontent_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(textcontent.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(textcontent.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(h3);
      destroy_component(textcontent);
    }
  };
}
function create_fragment13(ctx) {
  let if_block_anchor;
  let current;
  let if_block = ctx[0] && ctx[0].length && create_if_block9(ctx);
  return {
    c() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (ctx2[0] && ctx2[0].length) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & 1) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block9(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (if_block)
        if_block.d(detaching);
      if (detaching)
        detach(if_block_anchor);
    }
  };
}
function instance11($$self, $$props, $$invalidate) {
  let { monster } = $$props;
  let { item } = $$props;
  let header;
  if (item.headingProp) {
    if (item.heading in monster) {
      let monsterProp = stringify(monster[item.heading]);
      if (monsterProp.length)
        header = monsterProp;
    }
  } else if (item.heading?.length) {
    header = item.heading;
  }
  $$self.$$set = ($$props2) => {
    if ("monster" in $$props2)
      $$invalidate(1, monster = $$props2.monster);
    if ("item" in $$props2)
      $$invalidate(2, item = $$props2.item);
  };
  return [header, monster, item];
}
var SectionHeading = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance11, create_fragment13, safe_not_equal, { monster: 1, item: 2 }, add_css12);
  }
};
var SectionHeading_default = SectionHeading;

// src/view/ui/Subheading.svelte
function add_css13(target) {
  append_styles(target, "svelte-1186gko", ".subheading.svelte-1186gko{font-weight:var(--statblock-subheading-font-weight);font-style:var(--statblock-subheading-font-style);font-size:var(--statblock-subheading-font-size);margin:0}");
}
function create_if_block10(ctx) {
  let div;
  let textcontent;
  let current;
  textcontent = new TextContent_default({
    props: {
      textToRender: ctx[1].join(ctx[0].separator ?? " ")
    }
  });
  return {
    c() {
      div = element("div");
      create_component(textcontent.$$.fragment);
      attr(div, "class", "subheading svelte-1186gko");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      mount_component(textcontent, div, null);
      current = true;
    },
    p(ctx2, dirty) {
      const textcontent_changes = {};
      if (dirty & 1)
        textcontent_changes.textToRender = ctx2[1].join(ctx2[0].separator ?? " ");
      textcontent.$set(textcontent_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(textcontent.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(textcontent.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      destroy_component(textcontent);
    }
  };
}
function create_fragment14(ctx) {
  let if_block_anchor;
  let current;
  let if_block = ctx[1].length && create_if_block10(ctx);
  return {
    c() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (ctx2[1].length)
        if_block.p(ctx2, dirty);
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (if_block)
        if_block.d(detaching);
      if (detaching)
        detach(if_block_anchor);
    }
  };
}
function instance12($$self, $$props, $$invalidate) {
  let { monster } = $$props;
  let { item } = $$props;
  const subheading = [];
  for (let property of item.properties) {
    if (property in monster) {
      subheading.push(`${stringify(monster[property])}`);
    }
  }
  $$self.$$set = ($$props2) => {
    if ("monster" in $$props2)
      $$invalidate(2, monster = $$props2.monster);
    if ("item" in $$props2)
      $$invalidate(0, item = $$props2.item);
  };
  return [item, subheading, monster];
}
var Subheading = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance12, create_fragment14, safe_not_equal, { monster: 2, item: 0 }, add_css13);
  }
};
var Subheading_default = Subheading;

// src/view/ui/Table.svelte
function add_css14(target) {
  append_styles(target, "svelte-18uixe9", ".statblock-table-header.svelte-18uixe9{font-weight:var(--statblock-table-header-font-weight)}.table.svelte-18uixe9{display:flex;justify-content:space-evenly;align-items:center;flex-wrap:wrap}.table-item.svelte-18uixe9{display:flex;justify-content:center;align-items:center;flex-flow:column nowrap}");
}
function get_each_context5(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[6] = list[i];
  child_ctx[8] = i;
  return child_ctx;
}
function create_if_block11(ctx) {
  let span;
  let t0;
  let t1_value = ctx[2](ctx[6]) + "";
  let t1;
  let t2;
  return {
    c() {
      span = element("span");
      t0 = text("(");
      t1 = text(t1_value);
      t2 = text(")");
    },
    m(target, anchor) {
      insert(target, span, anchor);
      append(span, t0);
      append(span, t1);
      append(span, t2);
    },
    p(ctx2, dirty) {
      if (dirty & 2 && t1_value !== (t1_value = ctx2[2](ctx2[6]) + ""))
        set_data(t1, t1_value);
    },
    d(detaching) {
      if (detaching)
        detach(span);
    }
  };
}
function create_each_block5(ctx) {
  let div;
  let span0;
  let t0_value = `${ctx[3][ctx[8]]}`.toUpperCase() + "";
  let t0;
  let t1;
  let span1;
  let t2_value = ctx[6] + "";
  let t2;
  let t3;
  let t4;
  let if_block = ctx[0].calculate && create_if_block11(ctx);
  return {
    c() {
      div = element("div");
      span0 = element("span");
      t0 = text(t0_value);
      t1 = space();
      span1 = element("span");
      t2 = text(t2_value);
      t3 = space();
      if (if_block)
        if_block.c();
      t4 = space();
      attr(span0, "class", "statblock-table-header svelte-18uixe9");
      attr(div, "class", "table-item svelte-18uixe9");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, span0);
      append(span0, t0);
      append(div, t1);
      append(div, span1);
      append(span1, t2);
      append(span1, t3);
      if (if_block)
        if_block.m(span1, null);
      append(div, t4);
    },
    p(ctx2, dirty) {
      if (dirty & 2 && t2_value !== (t2_value = ctx2[6] + ""))
        set_data(t2, t2_value);
      if (ctx2[0].calculate) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block11(ctx2);
          if_block.c();
          if_block.m(span1, null);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
    },
    d(detaching) {
      if (detaching)
        detach(div);
      if (if_block)
        if_block.d();
    }
  };
}
function create_fragment15(ctx) {
  let div;
  let each_value = ctx[1].slice(0, ctx[3].length);
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block5(get_each_context5(ctx, each_value, i));
  }
  return {
    c() {
      div = element("div");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      attr(div, "class", "table svelte-18uixe9");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(div, null);
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & 15) {
        each_value = ctx2[1].slice(0, ctx2[3].length);
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context5(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block5(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(div, null);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value.length;
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(div);
      destroy_each(each_blocks, detaching);
    }
  };
}
function instance13($$self, $$props, $$invalidate) {
  let { monster } = $$props;
  let { item } = $$props;
  const customMod = new Function("stat", `return ${item.modifier}`);
  function getMod2(stat) {
    let mod = item.modifier == null || !item.modifier.length || item.modifier == "" ? Math.floor(((stat ?? 10) - 10) / 2) : customMod(stat);
    return `${mod >= 0 ? "+" : "-"}${Math.abs(mod)}`;
  }
  let values = monster[item.properties[0]];
  if (!Array.isArray(values)) {
    values = [];
  }
  const headers = item.headers ?? [...Array(values.length > 0 ? values.length : 1).keys()];
  $$self.$$set = ($$props2) => {
    if ("monster" in $$props2)
      $$invalidate(4, monster = $$props2.monster);
    if ("item" in $$props2)
      $$invalidate(0, item = $$props2.item);
  };
  return [item, values, getMod2, headers, monster];
}
var Table = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance13, create_fragment15, safe_not_equal, { monster: 4, item: 0 }, add_css14);
  }
};
var Table_default = Table;

// src/view/ui/Text.svelte
function create_if_block12(ctx) {
  let t;
  let div;
  let textcontentholder;
  let current;
  let if_block = ctx[1].heading && create_if_block_15(ctx);
  textcontentholder = new TextContentHolder_default({
    props: {
      render: ctx[1].markdown,
      property: ctx[2]
    }
  });
  return {
    c() {
      if (if_block)
        if_block.c();
      t = space();
      div = element("div");
      create_component(textcontentholder.$$.fragment);
      attr(div, "class", "line");
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert(target, t, anchor);
      insert(target, div, anchor);
      mount_component(textcontentholder, div, null);
      current = true;
    },
    p(ctx2, dirty) {
      if (ctx2[1].heading) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & 2) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block_15(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(t.parentNode, t);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
      const textcontentholder_changes = {};
      if (dirty & 2)
        textcontentholder_changes.render = ctx2[1].markdown;
      if (dirty & 4)
        textcontentholder_changes.property = ctx2[2];
      textcontentholder.$set(textcontentholder_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      transition_in(textcontentholder.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      transition_out(textcontentholder.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (if_block)
        if_block.d(detaching);
      if (detaching)
        detach(t);
      if (detaching)
        detach(div);
      destroy_component(textcontentholder);
    }
  };
}
function create_if_block_15(ctx) {
  let sectionheading;
  let current;
  sectionheading = new SectionHeading_default({
    props: {
      item: ctx[1],
      monster: ctx[0]
    }
  });
  return {
    c() {
      create_component(sectionheading.$$.fragment);
    },
    m(target, anchor) {
      mount_component(sectionheading, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const sectionheading_changes = {};
      if (dirty & 2)
        sectionheading_changes.item = ctx2[1];
      if (dirty & 1)
        sectionheading_changes.monster = ctx2[0];
      sectionheading.$set(sectionheading_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(sectionheading.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(sectionheading.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(sectionheading, detaching);
    }
  };
}
function create_fragment16(ctx) {
  let if_block_anchor;
  let current;
  let if_block = (!ctx[1].conditioned || ctx[1].conditioned && `${ctx[2]}`.length) && create_if_block12(ctx);
  return {
    c() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (!ctx2[1].conditioned || ctx2[1].conditioned && `${ctx2[2]}`.length) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & 6) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block12(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (if_block)
        if_block.d(detaching);
      if (detaching)
        detach(if_block_anchor);
    }
  };
}
function instance14($$self, $$props, $$invalidate) {
  let { monster } = $$props;
  let { item } = $$props;
  let property = item.text && item.text.length ? item.text : stringify(monster[item.properties[0]]);
  if (!item.conditioned && !`${property}`.length) {
    property = item.fallback ?? "-";
  }
  $$self.$$set = ($$props2) => {
    if ("monster" in $$props2)
      $$invalidate(0, monster = $$props2.monster);
    if ("item" in $$props2)
      $$invalidate(1, item = $$props2.item);
  };
  return [monster, item, property];
}
var Text = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance14, create_fragment16, safe_not_equal, { monster: 0, item: 1 });
  }
};
var Text_default = Text;

// src/view/ui/Image.svelte
var import_obsidian5 = require("obsidian");
function add_css15(target) {
  append_styles(target, "svelte-gdz2l0", ".image.svelte-gdz2l0{width:var(--statblock-image-width);height:var(--statblock-image-height)}.image.pointer.svelte-gdz2l0{cursor:pointer}img.svelte-gdz2l0{object-fit:cover;width:100%;height:100%;border-radius:100%;border:var(--statblock-image-border-size) solid var(--statblock-image-border-color);object-position:center}");
}
function get_each_context6(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[13] = list[i];
  return child_ctx;
}
function create_if_block13(ctx) {
  let await_block_anchor;
  let promise_1;
  let info = {
    ctx,
    current: null,
    token: null,
    hasCatch: false,
    pending: create_pending_block,
    then: create_then_block,
    catch: create_catch_block,
    value: 16
  };
  handle_promise(promise_1 = ctx[3], info);
  return {
    c() {
      await_block_anchor = empty();
      info.block.c();
    },
    m(target, anchor) {
      insert(target, await_block_anchor, anchor);
      info.block.m(target, info.anchor = anchor);
      info.mount = () => await_block_anchor.parentNode;
      info.anchor = await_block_anchor;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      update_await_block_branch(info, ctx, dirty);
    },
    d(detaching) {
      if (detaching)
        detach(await_block_anchor);
      info.block.d(detaching);
      info.token = null;
      info = null;
    }
  };
}
function create_catch_block(ctx) {
  return { c: noop, m: noop, p: noop, d: noop };
}
function create_then_block(ctx) {
  let t;
  let if_block = ctx[16] && create_if_block_16(ctx);
  return {
    c() {
      if (if_block)
        if_block.c();
      t = space();
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert(target, t, anchor);
    },
    p(ctx2, dirty) {
      if (ctx2[16])
        if_block.p(ctx2, dirty);
    },
    d(detaching) {
      if (if_block)
        if_block.d(detaching);
      if (detaching)
        detach(t);
    }
  };
}
function create_if_block_16(ctx) {
  let div;
  let img;
  let img_src_value;
  let img_alt_value;
  let mounted;
  let dispose;
  return {
    c() {
      div = element("div");
      img = element("img");
      if (!src_url_equal(img.src, img_src_value = ctx[16]))
        attr(img, "src", img_src_value);
      attr(img, "alt", img_alt_value = ctx[0].name);
      attr(img, "class", "svelte-gdz2l0");
      attr(div, "class", "image svelte-gdz2l0");
      toggle_class(div, "pointer", ctx[2] != null);
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, img);
      if (!mounted) {
        dispose = [
          listen(div, "click", ctx[6]),
          listen(div, "mouseenter", ctx[7])
        ];
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      if (dirty & 1 && img_alt_value !== (img_alt_value = ctx2[0].name)) {
        attr(img, "alt", img_alt_value);
      }
      if (dirty & 4) {
        toggle_class(div, "pointer", ctx2[2] != null);
      }
    },
    d(detaching) {
      if (detaching)
        detach(div);
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_pending_block(ctx) {
  return { c: noop, m: noop, p: noop, d: noop };
}
function create_each_block6(ctx) {
  let if_block_anchor;
  let if_block = ctx[13] in ctx[0] && create_if_block13(ctx);
  return {
    c() {
      if (if_block)
        if_block.c();
      if_block_anchor = empty();
    },
    m(target, anchor) {
      if (if_block)
        if_block.m(target, anchor);
      insert(target, if_block_anchor, anchor);
    },
    p(ctx2, dirty) {
      if (ctx2[13] in ctx2[0]) {
        if (if_block) {
          if_block.p(ctx2, dirty);
        } else {
          if_block = create_if_block13(ctx2);
          if_block.c();
          if_block.m(if_block_anchor.parentNode, if_block_anchor);
        }
      } else if (if_block) {
        if_block.d(1);
        if_block = null;
      }
    },
    d(detaching) {
      if (if_block)
        if_block.d(detaching);
      if (detaching)
        detach(if_block_anchor);
    }
  };
}
function create_fragment17(ctx) {
  let each_1_anchor;
  let each_value = ctx[1].properties;
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block6(get_each_context6(ctx, each_value, i));
  }
  return {
    c() {
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      each_1_anchor = empty();
    },
    m(target, anchor) {
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(target, anchor);
      }
      insert(target, each_1_anchor, anchor);
    },
    p(ctx2, [dirty]) {
      if (dirty & 63) {
        each_value = ctx2[1].properties;
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context6(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block6(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value.length;
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      destroy_each(each_blocks, detaching);
      if (detaching)
        detach(each_1_anchor);
    }
  };
}
function parseLink(link) {
  return link?.replace(/(\[|\])/g, "");
}
function instance15($$self, $$props, $$invalidate) {
  let { monster } = $$props;
  let { item } = $$props;
  const plugin = getContext("plugin");
  const context = getContext("context");
  let file;
  async function getLink(url) {
    url = decodeURIComponent(url);
    let link;
    try {
      if (/https?:/.test(url)) {
        const [linkpath] = parseLink(url).split("|");
        link = linkpath;
      } else {
        const [linkpath] = parseLink(url).split("|");
        $$invalidate(2, file = plugin.app.metadataCache.getFirstLinkpathDest(linkpath.replace(/<\/?STATBLOCK-LINK>/g, ""), context));
        if (!file)
          throw new Error();
        link = plugin.app.vault.getResourcePath(file);
      }
    } catch (e) {
      console.error(e);
    }
    return link;
  }
  const getImage = async () => {
    if (item.properties.length && item.properties.some((p) => p in monster && typeof monster[p] == "string")) {
      const props = item.properties.filter((p) => p in monster && typeof monster[p] == "string");
      if (props.length > 1) {
        console.log("TTRPG Statblocks: Multiple image properties provided, using first.");
      }
      const path = monster[props[0]];
      return getLink(path);
    }
  };
  let promise = getImage();
  const modifier = import_obsidian5.Platform.isMacOS ? "Meta" : "Control";
  function open(evt) {
    if (!file)
      return;
    const leaf = plugin.app.workspace.getLeaf(evt.getModifierState(modifier) ? "window" : "split");
    leaf.openFile(file);
  }
  function popover(evt) {
    plugin.app.workspace.trigger("link-hover", {}, evt.currentTarget, file.path, context);
  }
  const click_handler = (evt) => open(evt);
  const mouseenter_handler = (evt) => popover(evt);
  $$self.$$set = ($$props2) => {
    if ("monster" in $$props2)
      $$invalidate(0, monster = $$props2.monster);
    if ("item" in $$props2)
      $$invalidate(1, item = $$props2.item);
  };
  return [monster, item, file, promise, open, popover, click_handler, mouseenter_handler];
}
var Image2 = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance15, create_fragment17, safe_not_equal, { monster: 0, item: 1 }, add_css15);
  }
};
var Image_default = Image2;

// src/view/ui/Content.svelte
function add_css16(target) {
  append_styles(target, "svelte-9gi3x8", ".statblock-content.svelte-9gi3x8{font-family:var(--statblock-content-font);font-size:var(--statblock-content-font-size);color:var(--statblock-font-color);background-color:var(--statblock-background-color);padding:0.5em;border:var(--statblock-border-size) var(--statblock-border-color) solid;box-shadow:var(--statblock-box-shadow-x-offset)\n            var(--statblock-box-shadow-y-offset)\n            var(--statblock-box-shadow-blur) var(--statblock-box-shadow-color);margin-left:2px;margin-right:2px;display:flex;gap:1rem}.statblock-content.svelte-9gi3x8>.column{width:var(--statblock-column-width)}@media screen and (max-width: 400px){.statblock-content.svelte-9gi3x8>.column{width:75vw}}.statblock-item-container{margin-bottom:0.25rem}.statblock-detached{position:absolute;top:-9999px}.statblock-item-inline{display:flex;justify-content:space-between}");
}
function create_fragment18(ctx) {
  let div1;
  let div0;
  return {
    c() {
      div1 = element("div");
      div0 = element("div");
      attr(div0, "class", "statblock-content svelte-9gi3x8");
      attr(div1, "class", "statblock-content-container");
      set_style(div1, "--statblock-column-width", ctx[1]);
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      append(div1, div0);
      ctx[6](div0);
    },
    p(ctx2, [dirty]) {
      if (dirty & 2) {
        set_style(div1, "--statblock-column-width", ctx2[1]);
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(div1);
      ctx[6](null);
    }
  };
}
function instance16($$self, $$props, $$invalidate) {
  let maxHeight;
  const dispatch = createEventDispatcher();
  let { statblock } = $$props;
  let { columns = 1 } = $$props;
  let { ready } = $$props;
  let { maxColumns = columns } = $$props;
  const monster = getContext("monster");
  const checkConditioned = (item) => {
    if (item.conditioned == null || !item.conditioned)
      return true;
    if (!item.properties.length)
      return true;
    return item.properties.some((prop) => {
      if (prop in monster) {
        if (Array.isArray(monster[prop]) && monster[prop].length) {
          return true;
        }
        if (typeof monster[prop] === "string" && monster[prop].length) {
          return true;
        }
        if (typeof monster[prop] === "number") {
          return true;
        }
      }
      return false;
    });
  };
  const context = getAllContexts();
  const getElementForStatblockItem = (item, container) => {
    const targets2 = [];
    const target = container ?? createDiv("statblock-item-container");
    context.set("item", item);
    if (!checkConditioned(item)) {
      return [];
    }
    targets2.push(target);
    switch (item.type) {
      case "group": {
        for (const nested of item.nested ?? []) {
          const element2 = getElementForStatblockItem(nested, target);
          targets2.push(...element2);
        }
        break;
      }
      case "heading": {
        const heading = new Heading_default({
          target,
          props: { monster, item },
          context
        });
        heading.$on("save", (e) => dispatch("save", e.detail));
        heading.$on("export", (e) => dispatch("export", e.detail));
        break;
      }
      case "inline": {
        const inline = createDiv("statblock-item-inline");
        for (const nested of item.nested ?? []) {
          getElementForStatblockItem(nested, inline.createDiv("statblock-inline-item"));
        }
        targets2.push(inline);
        break;
      }
      case "image": {
        new Image_default({
          target,
          props: { monster, item },
          context
        });
        break;
      }
      case "property": {
        new PropertyLine_default({
          target,
          props: { monster, item },
          context
        });
        break;
      }
      case "saves": {
        new Saves_default({
          target,
          props: { monster, item },
          context
        });
        break;
      }
      case "spells": {
        const blocks = monster[item.properties[0]];
        if (!Array.isArray(blocks) || !blocks.length)
          return;
        new Spells_default({
          target,
          props: { monster, render: item.markdown },
          context
        });
        break;
      }
      case "subheading": {
        new Subheading_default({
          target,
          props: { monster, item },
          context
        });
        break;
      }
      case "table": {
        new Table_default({
          target,
          props: { monster, item },
          context
        });
        break;
      }
      case "text": {
        new Text_default({ target, props: { monster, item } });
        break;
      }
      case "traits": {
        const blocks = monster[item.properties[0]];
        if (!Array.isArray(blocks) || !blocks.length)
          return [];
        if (item.heading) {
          new SectionHeading_default({
            target,
            props: { monster, item },
            context
          });
        }
        try {
          for (const block of blocks) {
            const prop = createDiv("statblock-item-container");
            new Traits_default({
              target: prop,
              props: {
                name: block.name,
                desc: block.desc,
                render: item.markdown
              },
              context
            });
            targets2.push(prop);
          }
        } catch (e) {
          return [];
        }
        break;
      }
    }
    if (item.hasRule) {
      const rule = createDiv("statblock-item-container");
      new Rule_default({ target: rule });
      targets2.push(rule);
    }
    return targets2;
  };
  const targets = [];
  for (let item of statblock) {
    targets.push(...getElementForStatblockItem(item));
  }
  const buildStatblock = (node) => {
    node.empty();
    let columnEl = node.createDiv("column");
    if (columns == 1) {
      targets.forEach((el) => columnEl.appendChild(el));
      return;
    }
    const temp = document.body.createDiv("statblock-detached");
    const heightmap = /* @__PURE__ */ new Map();
    for (let target of targets) {
      temp.appendChild(target);
      heightmap.set(target, Math.floor(target.clientHeight));
    }
    temp.style.width = columnWidth;
    let split;
    if (monster.forceColumns) {
      split = temp.clientHeight / maxColumns;
    } else if (monster.columns && monster.columns > 0) {
      split = Math.max(temp.clientHeight / monster.columns, temp.clientHeight / columns);
    } else {
      split = Math.max(600, Math.min(temp.clientHeight / columns, maxHeight));
    }
    temp.empty();
    temp.detach();
    for (let target of targets) {
      if (node.childElementCount < columns && columnEl.clientHeight + heightmap.get(target) > split) {
        columnEl = node.createDiv("column");
      }
      columnEl.appendChild(target);
    }
  };
  let content;
  let columnWidth = "400px";
  if (monster.columnWidth) {
    if (typeof monster.columnWidth == "number") {
      columnWidth = `${monster.columnWidth}px`;
    }
    if (typeof monster.columnWidth == "string") {
      columnWidth = monster.columnWidth;
    }
  }
  function div0_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      content = $$value;
      $$invalidate(0, content);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("statblock" in $$props2)
      $$invalidate(2, statblock = $$props2.statblock);
    if ("columns" in $$props2)
      $$invalidate(3, columns = $$props2.columns);
    if ("ready" in $$props2)
      $$invalidate(4, ready = $$props2.ready);
    if ("maxColumns" in $$props2)
      $$invalidate(5, maxColumns = $$props2.maxColumns);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & 17) {
      $: {
        if (ready && content) {
          buildStatblock(content);
        }
      }
    }
  };
  $:
    maxHeight = !isNaN(Number(monster.columnHeight)) && monster.columnHeight > 0 ? monster.columnHeight : Infinity;
  return [content, columnWidth, statblock, columns, ready, maxColumns, div0_binding];
}
var Content = class extends SvelteComponent {
  constructor(options) {
    super();
    init(
      this,
      options,
      instance16,
      create_fragment18,
      safe_not_equal,
      {
        statblock: 2,
        columns: 3,
        ready: 4,
        maxColumns: 5
      },
      add_css16
    );
  }
};
var Content_default = Content;

// src/view/Statblock.svelte
function add_css17(target) {
  append_styles(target, "svelte-1r5gl1g", ".container.svelte-1r5gl1g{display:flex;width:100%;margin:0.25rem 0}.statblock.svelte-1r5gl1g{margin:0 auto;position:relative}.icons.svelte-1r5gl1g{position:absolute;right:0}");
}
function create_if_block14(ctx) {
  let div0;
  let current_block_type_index;
  let if_block;
  let div0_class_value;
  let t;
  let div1;
  let iconsEl_action;
  let current;
  let mounted;
  let dispose;
  const if_block_creators = [create_if_block_17, create_else_block6];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (ctx2[0])
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx, -1);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  return {
    c() {
      div0 = element("div");
      if_block.c();
      t = space();
      div1 = element("div");
      attr(div0, "class", div0_class_value = null_to_empty(ctx[8].join(" ")) + " svelte-1r5gl1g");
      toggle_class(div0, "obsidian-statblock-plugin", true);
      toggle_class(div0, "statblock", true);
      attr(div1, "class", "icons svelte-1r5gl1g");
    },
    m(target, anchor) {
      insert(target, div0, anchor);
      if_blocks[current_block_type_index].m(div0, null);
      insert(target, t, anchor);
      insert(target, div1, anchor);
      current = true;
      if (!mounted) {
        dispose = [
          action_destroyer(iconsEl_action = ctx[6].call(null, div1)),
          listen(div1, "click", ctx[7])
        ];
        mounted = true;
      }
    },
    p(ctx2, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2, dirty);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(div0, null);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div0);
      if_blocks[current_block_type_index].d();
      if (detaching)
        detach(t);
      if (detaching)
        detach(div1);
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_else_block6(ctx) {
  let span;
  return {
    c() {
      span = element("span");
      span.textContent = "Invalid monster.";
    },
    m(target, anchor) {
      insert(target, span, anchor);
    },
    p: noop,
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(span);
    }
  };
}
function create_if_block_17(ctx) {
  let bar0;
  let t0;
  let previous_key = ctx[3];
  let t1;
  let bar1;
  let current;
  bar0 = new Bar_default({});
  let key_block = create_key_block2(ctx);
  bar1 = new Bar_default({});
  return {
    c() {
      create_component(bar0.$$.fragment);
      t0 = space();
      key_block.c();
      t1 = space();
      create_component(bar1.$$.fragment);
    },
    m(target, anchor) {
      mount_component(bar0, target, anchor);
      insert(target, t0, anchor);
      key_block.m(target, anchor);
      insert(target, t1, anchor);
      mount_component(bar1, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      if (dirty & 8 && safe_not_equal(previous_key, previous_key = ctx2[3])) {
        group_outros();
        transition_out(key_block, 1, 1, noop);
        check_outros();
        key_block = create_key_block2(ctx2);
        key_block.c();
        transition_in(key_block, 1);
        key_block.m(t1.parentNode, t1);
      } else {
        key_block.p(ctx2, dirty);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(bar0.$$.fragment, local);
      transition_in(key_block);
      transition_in(bar1.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(bar0.$$.fragment, local);
      transition_out(key_block);
      transition_out(bar1.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(bar0, detaching);
      if (detaching)
        detach(t0);
      key_block.d(detaching);
      if (detaching)
        detach(t1);
      destroy_component(bar1, detaching);
    }
  };
}
function create_key_block2(ctx) {
  let content;
  let current;
  content = new Content_default({
    props: {
      columns: ctx[3],
      maxColumns: ctx[5],
      statblock: ctx[1],
      ready: ctx[4]
    }
  });
  content.$on("save", ctx[15]);
  content.$on("export", ctx[16]);
  return {
    c() {
      create_component(content.$$.fragment);
    },
    m(target, anchor) {
      mount_component(content, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const content_changes = {};
      if (dirty & 8)
        content_changes.columns = ctx2[3];
      if (dirty & 2)
        content_changes.statblock = ctx2[1];
      if (dirty & 16)
        content_changes.ready = ctx2[4];
      content.$set(content_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(content.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(content.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(content, detaching);
    }
  };
}
function create_fragment19(ctx) {
  let div;
  let current;
  let if_block = ctx[4] && create_if_block14(ctx);
  return {
    c() {
      div = element("div");
      if (if_block)
        if_block.c();
      attr(div, "class", "container svelte-1r5gl1g");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (if_block)
        if_block.m(div, null);
      ctx[17](div);
      current = true;
    },
    p(ctx2, [dirty]) {
      if (ctx2[4]) {
        if (if_block) {
          if_block.p(ctx2, dirty);
          if (dirty & 16) {
            transition_in(if_block, 1);
          }
        } else {
          if_block = create_if_block14(ctx2);
          if_block.c();
          transition_in(if_block, 1);
          if_block.m(div, null);
        }
      } else if (if_block) {
        group_outros();
        transition_out(if_block, 1, 1, () => {
          if_block = null;
        });
        check_outros();
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o(local) {
      transition_out(if_block);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      if (if_block)
        if_block.d();
      ctx[17](null);
    }
  };
}
function instance17($$self, $$props, $$invalidate) {
  let monsterColumnWidth;
  let columnWidth;
  const dispatch = createEventDispatcher();
  let { monster } = $$props;
  let { context } = $$props;
  let { plugin } = $$props;
  let { statblock } = $$props;
  let { renderer } = $$props;
  let { layout } = $$props;
  let { canSave = true } = $$props;
  let maxColumns = !isNaN(Number(monster.columns)) && Number(monster.columns) > 0 ? Number(monster.columns) : 2;
  let canExport = monster.export ?? plugin.settings.export;
  let canDice = plugin.canUseDiceRoller && (monster.dice ?? plugin.settings.useDice);
  let canRender = monster.render ?? plugin.settings.renderDice;
  setContext("plugin", plugin);
  setContext("tryToRenderLinks", plugin.settings.tryToRenderLinks);
  setContext("context", context);
  setContext("monster", monster);
  setContext("dice", canDice);
  setContext("render", canRender);
  setContext("renderer", renderer);
  const reset = writable(false);
  setContext("reset", reset);
  let container;
  let columns = maxColumns;
  let ready = false;
  const setColumns = () => {
    if (monster.forceColumns) {
      $$invalidate(3, columns = maxColumns);
      observer.disconnect();
      return;
    }
    const width = container.clientWidth;
    $$invalidate(3, columns = Math.min(Math.max(Math.floor(width / columnWidth), 1), maxColumns));
  };
  const onResize = (0, import_obsidian6.debounce)(
    () => {
      setColumns();
      if (!ready)
        $$invalidate(4, ready = true);
    },
    100,
    false
  );
  const observer = new ResizeObserver(onResize);
  onMount(() => {
    setColumns();
    observer.observe(container);
  });
  onDestroy(() => {
    observer.disconnect();
  });
  const iconsEl = (node) => {
    new import_obsidian6.ExtraButtonComponent(node).setIcon("vertical-three-dots");
  };
  const menu = new import_obsidian6.Menu();
  menu.addItem((item) => item.setIcon(SAVE_SYMBOL).setTitle("Save to Bestiary").setDisabled(!canSave).onClick(() => dispatch("save")));
  menu.addItem((item) => {
    item.setTitle("Copy YAML").setIcon("code").onClick(async () => {
      try {
        await navigator.clipboard.writeText((0, import_obsidian6.stringifyYaml)(monster));
        new import_obsidian6.Notice("Creature YAML copied to clipboard");
      } catch (e) {
        new import_obsidian6.Notice(`There was an issue copying the yaml:

${e.message}`);
      }
    });
  });
  if (canExport)
    menu.addItem((item) => item.setIcon(EXPORT_SYMBOL).setTitle("Export as PNG").onClick(() => dispatch("export")));
  if (canDice)
    menu.addItem((item) => item.setIcon("reset").setTitle("Reset Dice").onClick(() => {
      reset.set(true);
      reset.set(false);
    }));
  const showMenu = (evt) => {
    menu.showAtMouseEvent(evt);
  };
  const name = monster?.name?.toLowerCase().replace(/[^A-Za-z0-9\s]/g, "").replace(/\s+/g, "-") ?? "no-name";
  const layoutName = layout.toLowerCase().replace(/[^A-Za-z0-9\s]/g, "").replace(/\s+/g, "-") ?? "no-layout";
  const classes = [name, layoutName].filter((n) => n?.length);
  function save_handler(event) {
    bubble.call(this, $$self, event);
  }
  function export_handler(event) {
    bubble.call(this, $$self, event);
  }
  function div_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      container = $$value;
      $$invalidate(2, container);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("monster" in $$props2)
      $$invalidate(0, monster = $$props2.monster);
    if ("context" in $$props2)
      $$invalidate(9, context = $$props2.context);
    if ("plugin" in $$props2)
      $$invalidate(10, plugin = $$props2.plugin);
    if ("statblock" in $$props2)
      $$invalidate(1, statblock = $$props2.statblock);
    if ("renderer" in $$props2)
      $$invalidate(11, renderer = $$props2.renderer);
    if ("layout" in $$props2)
      $$invalidate(12, layout = $$props2.layout);
    if ("canSave" in $$props2)
      $$invalidate(13, canSave = $$props2.canSave);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & 1) {
      $:
        $$invalidate(14, monsterColumnWidth = Number(`${monster.columnWidth}`.replace(/\D/g, "")));
    }
    if ($$self.$$.dirty & 16384) {
      $:
        columnWidth = !isNaN(monsterColumnWidth) && monsterColumnWidth > 0 ? monsterColumnWidth : 400;
    }
  };
  return [
    monster,
    statblock,
    container,
    columns,
    ready,
    maxColumns,
    iconsEl,
    showMenu,
    classes,
    context,
    plugin,
    renderer,
    layout,
    canSave,
    monsterColumnWidth,
    save_handler,
    export_handler,
    div_binding
  ];
}
var Statblock = class extends SvelteComponent {
  constructor(options) {
    super();
    init(
      this,
      options,
      instance17,
      create_fragment19,
      safe_not_equal,
      {
        monster: 0,
        context: 9,
        plugin: 10,
        statblock: 1,
        renderer: 11,
        layout: 12,
        canSave: 13
      },
      add_css17
    );
  }
};
var Statblock_default = Statblock;

// src/view/statblock.ts
var import_fast_copy = __toESM(require_fast_copy());
var StatBlockRenderer = class extends import_obsidian8.MarkdownRenderChild {
  constructor(container, monster, plugin, canSave, context, layout = Layout5e) {
    super(container);
    this.loaded = false;
    const statblock = new Statblock_default({
      target: this.containerEl,
      props: {
        context,
        monster,
        statblock: layout.blocks,
        layout: layout.name,
        plugin,
        renderer: this,
        canSave
      }
    });
    statblock.$on("save", async () => {
      if (plugin.bestiary.has(monster.name) && !await confirmWithModal(
        plugin.app,
        "This will overwrite an existing monster in settings. Are you sure?"
      ))
        return;
      plugin.saveMonster({
        ...(0, import_fast_copy.default)(monster),
        source: "Homebrew",
        layout: layout.name
      });
    });
    statblock.$on("export", () => {
      plugin.exportAsPng(
        monster.name,
        this.containerEl.firstElementChild
      );
    });
  }
};
async function confirmWithModal(app, text2, buttons = {
  cta: "Yes",
  secondary: "No"
}) {
  return new Promise((resolve, reject) => {
    const modal = new ConfirmModal(app, text2, buttons);
    modal.onClose = () => {
      resolve(modal.confirmed);
    };
    modal.open();
  });
}
var ConfirmModal = class extends import_obsidian7.Modal {
  constructor(app, text2, buttons) {
    super(app);
    this.text = text2;
    this.buttons = buttons;
    this.confirmed = false;
  }
  async display() {
    new Promise((resolve) => {
      this.contentEl.empty();
      this.contentEl.addClass("confirm-modal");
      this.contentEl.createEl("p", {
        text: this.text
      });
      const buttonEl = this.contentEl.createDiv(
        "fantasy-calendar-confirm-buttons"
      );
      new import_obsidian7.ButtonComponent(buttonEl).setButtonText(this.buttons.cta).setCta().onClick(() => {
        this.confirmed = true;
        this.close();
      });
      new import_obsidian7.ButtonComponent(buttonEl).setButtonText(this.buttons.secondary).onClick(() => {
        this.close();
      });
    });
  }
  onOpen() {
    this.display();
  }
};

// src/settings/settings.ts
var import_obsidian22 = require("obsidian");

// src/settings/StatblockCreator.svelte
var import_obsidian15 = require("obsidian");

// src/settings/add.ts
var import_obsidian9 = require("obsidian");

// src/layouts/types.ts
var TypeNames = [
  ["group", "Group"],
  ["heading", "Heading"],
  ["image", "Image"],
  ["inline", "Inline Group"],
  ["property", "Property Line"],
  ["saves", "Saves"],
  ["spells", "Spells"],
  ["subheading", "Subheading"],
  ["table", "Table"],
  ["text", "Text"],
  ["traits", "Traits"]
];
var MarkdownTypes = [
  "property",
  "traits",
  "spells",
  "text",
  "saves"
];

// src/settings/add.ts
function blockGenerator(type) {
  switch (type) {
    case "inline":
    case "group": {
      return {
        type,
        id: nanoid(),
        properties: [],
        nested: []
      };
    }
    case "heading": {
      return {
        type: "heading",
        id: nanoid(),
        properties: []
      };
    }
    case "property": {
      return {
        type: "property",
        id: nanoid(),
        properties: []
      };
    }
    case "saves": {
      return {
        type: "saves",
        id: nanoid(),
        properties: []
      };
    }
    case "traits": {
      return {
        type: "traits",
        id: nanoid(),
        properties: []
      };
    }
    case "spells": {
      return {
        type: "spells",
        id: nanoid(),
        properties: []
      };
    }
    case "subheading": {
      return {
        type: "subheading",
        id: nanoid(),
        properties: []
      };
    }
    case "image": {
      return {
        type: "image",
        id: nanoid(),
        properties: []
      };
    }
    case "table": {
      return {
        type: "table",
        id: nanoid(),
        properties: [],
        headers: [],
        calculate: true
      };
    }
    case "text": {
      return {
        type: "text",
        id: nanoid(),
        properties: [],
        text: null
      };
    }
  }
}
var generate = async (plugin, evt) => {
  return new Promise((resolve, reject) => {
    const addMenu = new import_obsidian9.Menu(plugin.app).setNoIcon();
    TypeNames.forEach((type) => {
      addMenu.addItem((item) => {
        item.setTitle(type[1]).onClick(() => {
          const gen = blockGenerator(type[0]);
          resolve(gen);
        });
      });
    });
    addMenu.onunload = () => {
      resolve();
    };
    addMenu.showAtMouseEvent(evt);
  });
};

// node_modules/svelte/easing/index.mjs
function cubicOut(t) {
  const f = t - 1;
  return f * f * f + 1;
}

// node_modules/svelte/animate/index.mjs
function flip(node, { from, to }, params = {}) {
  const style = getComputedStyle(node);
  const transform = style.transform === "none" ? "" : style.transform;
  const [ox, oy] = style.transformOrigin.split(" ").map(parseFloat);
  const dx = from.left + from.width * ox / to.width - (to.left + ox);
  const dy = from.top + from.height * oy / to.height - (to.top + oy);
  const { delay = 0, duration = (d) => Math.sqrt(d) * 120, easing = cubicOut } = params;
  return {
    delay,
    duration: is_function(duration) ? duration(Math.sqrt(dx * dx + dy * dy)) : duration,
    easing,
    css: (t, u) => {
      const x = u * dx;
      const y = u * dy;
      const sx = t + u * from.width / to.width;
      const sy = t + u * from.height / to.height;
      return `transform: ${transform} translate(${x}px, ${y}px) scale(${sx}, ${sy});`;
    }
  };
}

// node_modules/svelte-dnd-action/dist/index.mjs
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _typeof(obj) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof(obj);
}
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function _objectWithoutProperties(source, excluded) {
  if (source == null)
    return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key))
        continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}
function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr))
    return _arrayLikeToArray(arr);
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr))
    return arr;
}
function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter);
}
function _iterableToArrayLimit(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null)
    return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i)
        break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null)
        _i["return"]();
    } finally {
      if (_d)
        throw _e;
    }
  }
  return _arr;
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _createForOfIteratorHelper(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (!it) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it)
        o = it;
      var i = 0;
      var F = function() {
      };
      return {
        s: F,
        n: function() {
          if (i >= o.length)
            return {
              done: true
            };
          return {
            done: false,
            value: o[i++]
          };
        },
        e: function(e) {
          throw e;
        },
        f: F
      };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var normalCompletion = true, didErr = false, err;
  return {
    s: function() {
      it = it.call(o);
    },
    n: function() {
      var step = it.next();
      normalCompletion = step.done;
      return step;
    },
    e: function(e) {
      didErr = true;
      err = e;
    },
    f: function() {
      try {
        if (!normalCompletion && it.return != null)
          it.return();
      } finally {
        if (didErr)
          throw err;
      }
    }
  };
}
var FINALIZE_EVENT_NAME = "finalize";
var CONSIDER_EVENT_NAME = "consider";
function dispatchFinalizeEvent(el, items, info) {
  el.dispatchEvent(new CustomEvent(FINALIZE_EVENT_NAME, {
    detail: {
      items,
      info
    }
  }));
}
function dispatchConsiderEvent(el, items, info) {
  el.dispatchEvent(new CustomEvent(CONSIDER_EVENT_NAME, {
    detail: {
      items,
      info
    }
  }));
}
var DRAGGED_ENTERED_EVENT_NAME = "draggedEntered";
var DRAGGED_LEFT_EVENT_NAME = "draggedLeft";
var DRAGGED_OVER_INDEX_EVENT_NAME = "draggedOverIndex";
var DRAGGED_LEFT_DOCUMENT_EVENT_NAME = "draggedLeftDocument";
var DRAGGED_LEFT_TYPES = {
  LEFT_FOR_ANOTHER: "leftForAnother",
  OUTSIDE_OF_ANY: "outsideOfAny"
};
function dispatchDraggedElementEnteredContainer(containerEl, indexObj, draggedEl2) {
  containerEl.dispatchEvent(new CustomEvent(DRAGGED_ENTERED_EVENT_NAME, {
    detail: {
      indexObj,
      draggedEl: draggedEl2
    }
  }));
}
function dispatchDraggedElementLeftContainerForAnother(containerEl, draggedEl2, theOtherDz) {
  containerEl.dispatchEvent(new CustomEvent(DRAGGED_LEFT_EVENT_NAME, {
    detail: {
      draggedEl: draggedEl2,
      type: DRAGGED_LEFT_TYPES.LEFT_FOR_ANOTHER,
      theOtherDz
    }
  }));
}
function dispatchDraggedElementLeftContainerForNone(containerEl, draggedEl2) {
  containerEl.dispatchEvent(new CustomEvent(DRAGGED_LEFT_EVENT_NAME, {
    detail: {
      draggedEl: draggedEl2,
      type: DRAGGED_LEFT_TYPES.OUTSIDE_OF_ANY
    }
  }));
}
function dispatchDraggedElementIsOverIndex(containerEl, indexObj, draggedEl2) {
  containerEl.dispatchEvent(new CustomEvent(DRAGGED_OVER_INDEX_EVENT_NAME, {
    detail: {
      indexObj,
      draggedEl: draggedEl2
    }
  }));
}
function dispatchDraggedLeftDocument(draggedEl2) {
  window.dispatchEvent(new CustomEvent(DRAGGED_LEFT_DOCUMENT_EVENT_NAME, {
    detail: {
      draggedEl: draggedEl2
    }
  }));
}
var TRIGGERS = {
  DRAG_STARTED: "dragStarted",
  DRAGGED_ENTERED: DRAGGED_ENTERED_EVENT_NAME,
  DRAGGED_ENTERED_ANOTHER: "dragEnteredAnother",
  DRAGGED_OVER_INDEX: DRAGGED_OVER_INDEX_EVENT_NAME,
  DRAGGED_LEFT: DRAGGED_LEFT_EVENT_NAME,
  DRAGGED_LEFT_ALL: "draggedLeftAll",
  DROPPED_INTO_ZONE: "droppedIntoZone",
  DROPPED_INTO_ANOTHER: "droppedIntoAnother",
  DROPPED_OUTSIDE_OF_ANY: "droppedOutsideOfAny",
  DRAG_STOPPED: "dragStopped"
};
var SOURCES = {
  POINTER: "pointer",
  KEYBOARD: "keyboard"
};
var SHADOW_ITEM_MARKER_PROPERTY_NAME = "isDndShadowItem";
var SHADOW_ELEMENT_ATTRIBUTE_NAME = "data-is-dnd-shadow-item";
var SHADOW_PLACEHOLDER_ITEM_ID = "id:dnd-shadow-placeholder-0000";
var DRAGGED_ELEMENT_ID = "dnd-action-dragged-el";
var ITEM_ID_KEY = "id";
var activeDndZoneCount = 0;
function incrementActiveDropZoneCount() {
  activeDndZoneCount++;
}
function decrementActiveDropZoneCount() {
  if (activeDndZoneCount === 0) {
    throw new Error("Bug! trying to decrement when there are no dropzones");
  }
  activeDndZoneCount--;
}
var isOnServer = typeof window === "undefined";
var printDebug = function printDebug2() {
};
function getBoundingRectNoTransforms(el) {
  var ta;
  var rect = el.getBoundingClientRect();
  var style = getComputedStyle(el);
  var tx = style.transform;
  if (tx) {
    var sx, sy, dx, dy;
    if (tx.startsWith("matrix3d(")) {
      ta = tx.slice(9, -1).split(/, /);
      sx = +ta[0];
      sy = +ta[5];
      dx = +ta[12];
      dy = +ta[13];
    } else if (tx.startsWith("matrix(")) {
      ta = tx.slice(7, -1).split(/, /);
      sx = +ta[0];
      sy = +ta[3];
      dx = +ta[4];
      dy = +ta[5];
    } else {
      return rect;
    }
    var to = style.transformOrigin;
    var x = rect.x - dx - (1 - sx) * parseFloat(to);
    var y = rect.y - dy - (1 - sy) * parseFloat(to.slice(to.indexOf(" ") + 1));
    var w = sx ? rect.width / sx : el.offsetWidth;
    var h = sy ? rect.height / sy : el.offsetHeight;
    return {
      x,
      y,
      width: w,
      height: h,
      top: y,
      right: x + w,
      bottom: y + h,
      left: x
    };
  } else {
    return rect;
  }
}
function getAbsoluteRectNoTransforms(el) {
  var rect = getBoundingRectNoTransforms(el);
  return {
    top: rect.top + window.scrollY,
    bottom: rect.bottom + window.scrollY,
    left: rect.left + window.scrollX,
    right: rect.right + window.scrollX
  };
}
function getAbsoluteRect(el) {
  var rect = el.getBoundingClientRect();
  return {
    top: rect.top + window.scrollY,
    bottom: rect.bottom + window.scrollY,
    left: rect.left + window.scrollX,
    right: rect.right + window.scrollX
  };
}
function findCenter(rect) {
  return {
    x: (rect.left + rect.right) / 2,
    y: (rect.top + rect.bottom) / 2
  };
}
function calcDistance(pointA, pointB) {
  return Math.sqrt(Math.pow(pointA.x - pointB.x, 2) + Math.pow(pointA.y - pointB.y, 2));
}
function isPointInsideRect(point, rect) {
  return point.y <= rect.bottom && point.y >= rect.top && point.x >= rect.left && point.x <= rect.right;
}
function findCenterOfElement(el) {
  return findCenter(getAbsoluteRect(el));
}
function isCenterOfAInsideB(elA, elB) {
  var centerOfA = findCenterOfElement(elA);
  var rectOfB = getAbsoluteRectNoTransforms(elB);
  return isPointInsideRect(centerOfA, rectOfB);
}
function calcDistanceBetweenCenters(elA, elB) {
  var centerOfA = findCenterOfElement(elA);
  var centerOfB = findCenterOfElement(elB);
  return calcDistance(centerOfA, centerOfB);
}
function isElementOffDocument(el) {
  var rect = getAbsoluteRect(el);
  return rect.right < 0 || rect.left > document.documentElement.scrollWidth || rect.bottom < 0 || rect.top > document.documentElement.scrollHeight;
}
function calcInnerDistancesBetweenPointAndSidesOfElement(point, el) {
  var rect = getAbsoluteRect(el);
  if (!isPointInsideRect(point, rect)) {
    return null;
  }
  return {
    top: point.y - rect.top,
    bottom: rect.bottom - point.y,
    left: point.x - rect.left,
    right: Math.min(rect.right, document.documentElement.clientWidth) - point.x
  };
}
var dzToShadowIndexToRect;
function resetIndexesCache() {
  printDebug(function() {
    return "resetting indexes cache";
  });
  dzToShadowIndexToRect = /* @__PURE__ */ new Map();
}
resetIndexesCache();
function resetIndexesCacheForDz(dz) {
  printDebug(function() {
    return "resetting indexes cache for dz";
  });
  dzToShadowIndexToRect["delete"](dz);
}
function cacheShadowRect(dz) {
  var shadowElIndex = Array.from(dz.children).findIndex(function(child) {
    return child.getAttribute(SHADOW_ELEMENT_ATTRIBUTE_NAME);
  });
  if (shadowElIndex >= 0) {
    if (!dzToShadowIndexToRect.has(dz)) {
      dzToShadowIndexToRect.set(dz, /* @__PURE__ */ new Map());
    }
    dzToShadowIndexToRect.get(dz).set(shadowElIndex, getAbsoluteRectNoTransforms(dz.children[shadowElIndex]));
    return shadowElIndex;
  }
  return void 0;
}
function findWouldBeIndex(floatingAboveEl, collectionBelowEl) {
  if (!isCenterOfAInsideB(floatingAboveEl, collectionBelowEl)) {
    return null;
  }
  var children2 = collectionBelowEl.children;
  if (children2.length === 0) {
    return {
      index: 0,
      isProximityBased: true
    };
  }
  var shadowElIndex = cacheShadowRect(collectionBelowEl);
  for (var i = 0; i < children2.length; i++) {
    if (isCenterOfAInsideB(floatingAboveEl, children2[i])) {
      var cachedShadowRect = dzToShadowIndexToRect.has(collectionBelowEl) && dzToShadowIndexToRect.get(collectionBelowEl).get(i);
      if (cachedShadowRect) {
        if (!isPointInsideRect(findCenterOfElement(floatingAboveEl), cachedShadowRect)) {
          return {
            index: shadowElIndex,
            isProximityBased: false
          };
        }
      }
      return {
        index: i,
        isProximityBased: false
      };
    }
  }
  var minDistanceSoFar = Number.MAX_VALUE;
  var indexOfMin = void 0;
  for (var _i = 0; _i < children2.length; _i++) {
    var distance = calcDistanceBetweenCenters(floatingAboveEl, children2[_i]);
    if (distance < minDistanceSoFar) {
      minDistanceSoFar = distance;
      indexOfMin = _i;
    }
  }
  return {
    index: indexOfMin,
    isProximityBased: true
  };
}
var SCROLL_ZONE_PX = 25;
function makeScroller() {
  var scrollingInfo;
  function resetScrolling2() {
    scrollingInfo = {
      directionObj: void 0,
      stepPx: 0
    };
  }
  resetScrolling2();
  function scrollContainer(containerEl) {
    var _scrollingInfo = scrollingInfo, directionObj = _scrollingInfo.directionObj, stepPx = _scrollingInfo.stepPx;
    if (directionObj) {
      containerEl.scrollBy(directionObj.x * stepPx, directionObj.y * stepPx);
      window.requestAnimationFrame(function() {
        return scrollContainer(containerEl);
      });
    }
  }
  function calcScrollStepPx(distancePx) {
    return SCROLL_ZONE_PX - distancePx;
  }
  function scrollIfNeeded2(pointer, elementToScroll) {
    if (!elementToScroll) {
      return false;
    }
    var distances = calcInnerDistancesBetweenPointAndSidesOfElement(pointer, elementToScroll);
    if (distances === null) {
      resetScrolling2();
      return false;
    }
    var isAlreadyScrolling = !!scrollingInfo.directionObj;
    var scrollingVertically = false, scrollingHorizontally = false;
    if (elementToScroll.scrollHeight > elementToScroll.clientHeight) {
      if (distances.bottom < SCROLL_ZONE_PX) {
        scrollingVertically = true;
        scrollingInfo.directionObj = {
          x: 0,
          y: 1
        };
        scrollingInfo.stepPx = calcScrollStepPx(distances.bottom);
      } else if (distances.top < SCROLL_ZONE_PX) {
        scrollingVertically = true;
        scrollingInfo.directionObj = {
          x: 0,
          y: -1
        };
        scrollingInfo.stepPx = calcScrollStepPx(distances.top);
      }
      if (!isAlreadyScrolling && scrollingVertically) {
        scrollContainer(elementToScroll);
        return true;
      }
    }
    if (elementToScroll.scrollWidth > elementToScroll.clientWidth) {
      if (distances.right < SCROLL_ZONE_PX) {
        scrollingHorizontally = true;
        scrollingInfo.directionObj = {
          x: 1,
          y: 0
        };
        scrollingInfo.stepPx = calcScrollStepPx(distances.right);
      } else if (distances.left < SCROLL_ZONE_PX) {
        scrollingHorizontally = true;
        scrollingInfo.directionObj = {
          x: -1,
          y: 0
        };
        scrollingInfo.stepPx = calcScrollStepPx(distances.left);
      }
      if (!isAlreadyScrolling && scrollingHorizontally) {
        scrollContainer(elementToScroll);
        return true;
      }
    }
    resetScrolling2();
    return false;
  }
  return {
    scrollIfNeeded: scrollIfNeeded2,
    resetScrolling: resetScrolling2
  };
}
function toString(object) {
  return JSON.stringify(object, null, 2);
}
function getDepth(node) {
  if (!node) {
    throw new Error("cannot get depth of a falsy node");
  }
  return _getDepth(node, 0);
}
function _getDepth(node) {
  var countSoFar = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
  if (!node.parentElement) {
    return countSoFar - 1;
  }
  return _getDepth(node.parentElement, countSoFar + 1);
}
function areObjectsShallowEqual(objA, objB) {
  if (Object.keys(objA).length !== Object.keys(objB).length) {
    return false;
  }
  for (var keyA in objA) {
    if (!{}.hasOwnProperty.call(objB, keyA) || objB[keyA] !== objA[keyA]) {
      return false;
    }
  }
  return true;
}
function areArraysShallowEqualSameOrder(arrA, arrB) {
  if (arrA.length !== arrB.length) {
    return false;
  }
  for (var i = 0; i < arrA.length; i++) {
    if (arrA[i] !== arrB[i]) {
      return false;
    }
  }
  return true;
}
var INTERVAL_MS = 200;
var TOLERANCE_PX = 10;
var _makeScroller = makeScroller();
var scrollIfNeeded = _makeScroller.scrollIfNeeded;
var resetScrolling = _makeScroller.resetScrolling;
var next;
function observe(draggedEl2, dropZones) {
  var intervalMs = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : INTERVAL_MS;
  var lastDropZoneFound;
  var lastIndexFound;
  var lastIsDraggedInADropZone = false;
  var lastCentrePositionOfDragged;
  var dropZonesFromDeepToShallow = Array.from(dropZones).sort(function(dz1, dz2) {
    return getDepth(dz2) - getDepth(dz1);
  });
  function andNow() {
    var currentCenterOfDragged = findCenterOfElement(draggedEl2);
    var scrolled = scrollIfNeeded(currentCenterOfDragged, lastDropZoneFound);
    if (!scrolled && lastCentrePositionOfDragged && Math.abs(lastCentrePositionOfDragged.x - currentCenterOfDragged.x) < TOLERANCE_PX && Math.abs(lastCentrePositionOfDragged.y - currentCenterOfDragged.y) < TOLERANCE_PX) {
      next = window.setTimeout(andNow, intervalMs);
      return;
    }
    if (isElementOffDocument(draggedEl2)) {
      printDebug(function() {
        return "off document";
      });
      dispatchDraggedLeftDocument(draggedEl2);
      return;
    }
    lastCentrePositionOfDragged = currentCenterOfDragged;
    var isDraggedInADropZone = false;
    var _iterator = _createForOfIteratorHelper(dropZonesFromDeepToShallow), _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done; ) {
        var dz = _step.value;
        if (scrolled)
          resetIndexesCacheForDz(lastDropZoneFound);
        var indexObj = findWouldBeIndex(draggedEl2, dz);
        if (indexObj === null) {
          continue;
        }
        var index = indexObj.index;
        isDraggedInADropZone = true;
        if (dz !== lastDropZoneFound) {
          lastDropZoneFound && dispatchDraggedElementLeftContainerForAnother(lastDropZoneFound, draggedEl2, dz);
          dispatchDraggedElementEnteredContainer(dz, indexObj, draggedEl2);
          lastDropZoneFound = dz;
        } else if (index !== lastIndexFound) {
          dispatchDraggedElementIsOverIndex(dz, indexObj, draggedEl2);
          lastIndexFound = index;
        }
        break;
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
    if (!isDraggedInADropZone && lastIsDraggedInADropZone && lastDropZoneFound) {
      dispatchDraggedElementLeftContainerForNone(lastDropZoneFound, draggedEl2);
      lastDropZoneFound = void 0;
      lastIndexFound = void 0;
      lastIsDraggedInADropZone = false;
    } else {
      lastIsDraggedInADropZone = true;
    }
    next = window.setTimeout(andNow, intervalMs);
  }
  andNow();
}
function unobserve() {
  printDebug(function() {
    return "unobserving";
  });
  clearTimeout(next);
  resetScrolling();
  resetIndexesCache();
}
var INTERVAL_MS$1 = 300;
var mousePosition;
function updateMousePosition(e) {
  var c = e.touches ? e.touches[0] : e;
  mousePosition = {
    x: c.clientX,
    y: c.clientY
  };
}
var _makeScroller$1 = makeScroller();
var scrollIfNeeded$1 = _makeScroller$1.scrollIfNeeded;
var resetScrolling$1 = _makeScroller$1.resetScrolling;
var next$1;
function loop2() {
  if (mousePosition) {
    var scrolled = scrollIfNeeded$1(mousePosition, document.documentElement);
    if (scrolled)
      resetIndexesCache();
  }
  next$1 = window.setTimeout(loop2, INTERVAL_MS$1);
}
function armWindowScroller() {
  printDebug(function() {
    return "arming window scroller";
  });
  window.addEventListener("mousemove", updateMousePosition);
  window.addEventListener("touchmove", updateMousePosition);
  loop2();
}
function disarmWindowScroller() {
  printDebug(function() {
    return "disarming window scroller";
  });
  window.removeEventListener("mousemove", updateMousePosition);
  window.removeEventListener("touchmove", updateMousePosition);
  mousePosition = void 0;
  window.clearTimeout(next$1);
  resetScrolling$1();
}
function svelteNodeClone(el) {
  var cloned = el.cloneNode(true);
  var values = [];
  var elIsSelect = el.tagName === "SELECT";
  var selects = elIsSelect ? [el] : _toConsumableArray(el.querySelectorAll("select"));
  var _iterator = _createForOfIteratorHelper(selects), _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done; ) {
      var _select = _step.value;
      values.push(_select.value);
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  if (selects.length <= 0) {
    return cloned;
  }
  var clonedSelects = elIsSelect ? [cloned] : _toConsumableArray(cloned.querySelectorAll("select"));
  for (var i = 0; i < clonedSelects.length; i++) {
    var select = clonedSelects[i];
    var value = values[i];
    var optionEl = select.querySelector('option[value="'.concat(value, '"'));
    if (optionEl) {
      optionEl.setAttribute("selected", true);
    }
  }
  return cloned;
}
var TRANSITION_DURATION_SECONDS = 0.2;
function trs(property) {
  return "".concat(property, " ").concat(TRANSITION_DURATION_SECONDS, "s ease");
}
function createDraggedElementFrom(originalElement, positionCenterOnXY) {
  var rect = originalElement.getBoundingClientRect();
  var draggedEl2 = svelteNodeClone(originalElement);
  copyStylesFromTo(originalElement, draggedEl2);
  draggedEl2.id = DRAGGED_ELEMENT_ID;
  draggedEl2.style.position = "fixed";
  var elTopPx = rect.top;
  var elLeftPx = rect.left;
  draggedEl2.style.top = "".concat(elTopPx, "px");
  draggedEl2.style.left = "".concat(elLeftPx, "px");
  if (positionCenterOnXY) {
    var center = findCenter(rect);
    elTopPx -= center.y - positionCenterOnXY.y;
    elLeftPx -= center.x - positionCenterOnXY.x;
    window.setTimeout(function() {
      draggedEl2.style.top = "".concat(elTopPx, "px");
      draggedEl2.style.left = "".concat(elLeftPx, "px");
    }, 0);
  }
  draggedEl2.style.margin = "0";
  draggedEl2.style.boxSizing = "border-box";
  draggedEl2.style.height = "".concat(rect.height, "px");
  draggedEl2.style.width = "".concat(rect.width, "px");
  draggedEl2.style.transition = "".concat(trs("top"), ", ").concat(trs("left"), ", ").concat(trs("background-color"), ", ").concat(trs("opacity"), ", ").concat(trs("color"), " ");
  window.setTimeout(function() {
    return draggedEl2.style.transition += ", ".concat(trs("width"), ", ").concat(trs("height"));
  }, 0);
  draggedEl2.style.zIndex = "9999";
  draggedEl2.style.cursor = "grabbing";
  return draggedEl2;
}
function moveDraggedElementToWasDroppedState(draggedEl2) {
  draggedEl2.style.cursor = "grab";
}
function morphDraggedElementToBeLike(draggedEl2, copyFromEl, currentMouseX, currentMouseY, transformDraggedElement) {
  var newRect = copyFromEl.getBoundingClientRect();
  var draggedElRect = draggedEl2.getBoundingClientRect();
  var widthChange = newRect.width - draggedElRect.width;
  var heightChange = newRect.height - draggedElRect.height;
  if (widthChange || heightChange) {
    var relativeDistanceOfMousePointerFromDraggedSides = {
      left: (currentMouseX - draggedElRect.left) / draggedElRect.width,
      top: (currentMouseY - draggedElRect.top) / draggedElRect.height
    };
    draggedEl2.style.height = "".concat(newRect.height, "px");
    draggedEl2.style.width = "".concat(newRect.width, "px");
    draggedEl2.style.left = "".concat(parseFloat(draggedEl2.style.left) - relativeDistanceOfMousePointerFromDraggedSides.left * widthChange, "px");
    draggedEl2.style.top = "".concat(parseFloat(draggedEl2.style.top) - relativeDistanceOfMousePointerFromDraggedSides.top * heightChange, "px");
  }
  copyStylesFromTo(copyFromEl, draggedEl2);
  transformDraggedElement();
}
function copyStylesFromTo(copyFromEl, copyToEl) {
  var computedStyle = window.getComputedStyle(copyFromEl);
  Array.from(computedStyle).filter(function(s) {
    return s.startsWith("background") || s.startsWith("padding") || s.startsWith("font") || s.startsWith("text") || s.startsWith("align") || s.startsWith("justify") || s.startsWith("display") || s.startsWith("flex") || s.startsWith("border") || s === "opacity" || s === "color" || s === "list-style-type";
  }).forEach(function(s) {
    return copyToEl.style.setProperty(s, computedStyle.getPropertyValue(s), computedStyle.getPropertyPriority(s));
  });
}
function styleDraggable(draggableEl, dragDisabled) {
  draggableEl.draggable = false;
  draggableEl.ondragstart = function() {
    return false;
  };
  if (!dragDisabled) {
    draggableEl.style.userSelect = "none";
    draggableEl.style.WebkitUserSelect = "none";
    draggableEl.style.cursor = "grab";
  } else {
    draggableEl.style.userSelect = "";
    draggableEl.style.WebkitUserSelect = "";
    draggableEl.style.cursor = "";
  }
}
function hideElement(dragTarget) {
  dragTarget.style.display = "none";
  dragTarget.style.position = "fixed";
  dragTarget.style.zIndex = "-5";
}
function decorateShadowEl(shadowEl) {
  shadowEl.style.visibility = "hidden";
  shadowEl.setAttribute(SHADOW_ELEMENT_ATTRIBUTE_NAME, "true");
}
function unDecorateShadowElement(shadowEl) {
  shadowEl.style.visibility = "";
  shadowEl.removeAttribute(SHADOW_ELEMENT_ATTRIBUTE_NAME);
}
function styleActiveDropZones(dropZones) {
  var getStyles = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : function() {
  };
  var getClasses = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : function() {
    return [];
  };
  dropZones.forEach(function(dz) {
    var styles = getStyles(dz);
    Object.keys(styles).forEach(function(style) {
      dz.style[style] = styles[style];
    });
    getClasses(dz).forEach(function(c) {
      return dz.classList.add(c);
    });
  });
}
function styleInactiveDropZones(dropZones) {
  var getStyles = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : function() {
  };
  var getClasses = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : function() {
    return [];
  };
  dropZones.forEach(function(dz) {
    var styles = getStyles(dz);
    Object.keys(styles).forEach(function(style) {
      dz.style[style] = "";
    });
    getClasses(dz).forEach(function(c) {
      return dz.classList.contains(c) && dz.classList.remove(c);
    });
  });
}
function preventShrinking(el) {
  var originalMinHeight = el.style.minHeight;
  el.style.minHeight = window.getComputedStyle(el).getPropertyValue("height");
  var originalMinWidth = el.style.minWidth;
  el.style.minWidth = window.getComputedStyle(el).getPropertyValue("width");
  return function undo() {
    el.style.minHeight = originalMinHeight;
    el.style.minWidth = originalMinWidth;
  };
}
var DEFAULT_DROP_ZONE_TYPE = "--any--";
var MIN_OBSERVATION_INTERVAL_MS = 100;
var MIN_MOVEMENT_BEFORE_DRAG_START_PX = 3;
var DEFAULT_DROP_TARGET_STYLE = {
  outline: "rgba(255, 255, 102, 0.7) solid 2px"
};
var originalDragTarget;
var draggedEl;
var draggedElData;
var draggedElType;
var originDropZone;
var originIndex;
var shadowElData;
var shadowElDropZone;
var dragStartMousePosition;
var currentMousePosition;
var isWorkingOnPreviousDrag = false;
var finalizingPreviousDrag = false;
var unlockOriginDzMinDimensions;
var isDraggedOutsideOfAnyDz = false;
var scheduledForRemovalAfterDrop = [];
var typeToDropZones = /* @__PURE__ */ new Map();
var dzToConfig = /* @__PURE__ */ new Map();
var elToMouseDownListener = /* @__PURE__ */ new WeakMap();
function registerDropZone(dropZoneEl, type) {
  printDebug(function() {
    return "registering drop-zone if absent";
  });
  if (!typeToDropZones.has(type)) {
    typeToDropZones.set(type, /* @__PURE__ */ new Set());
  }
  if (!typeToDropZones.get(type).has(dropZoneEl)) {
    typeToDropZones.get(type).add(dropZoneEl);
    incrementActiveDropZoneCount();
  }
}
function unregisterDropZone(dropZoneEl, type) {
  typeToDropZones.get(type)["delete"](dropZoneEl);
  decrementActiveDropZoneCount();
  if (typeToDropZones.get(type).size === 0) {
    typeToDropZones["delete"](type);
  }
}
function watchDraggedElement() {
  printDebug(function() {
    return "watching dragged element";
  });
  armWindowScroller();
  var dropZones = typeToDropZones.get(draggedElType);
  var _iterator = _createForOfIteratorHelper(dropZones), _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done; ) {
      var dz = _step.value;
      dz.addEventListener(DRAGGED_ENTERED_EVENT_NAME, handleDraggedEntered);
      dz.addEventListener(DRAGGED_LEFT_EVENT_NAME, handleDraggedLeft);
      dz.addEventListener(DRAGGED_OVER_INDEX_EVENT_NAME, handleDraggedIsOverIndex);
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  window.addEventListener(DRAGGED_LEFT_DOCUMENT_EVENT_NAME, handleDrop);
  var observationIntervalMs = Math.max.apply(Math, [MIN_OBSERVATION_INTERVAL_MS].concat(_toConsumableArray(Array.from(dropZones.keys()).map(function(dz2) {
    return dzToConfig.get(dz2).dropAnimationDurationMs;
  }))));
  observe(draggedEl, dropZones, observationIntervalMs * 1.07);
}
function unWatchDraggedElement() {
  printDebug(function() {
    return "unwatching dragged element";
  });
  disarmWindowScroller();
  var dropZones = typeToDropZones.get(draggedElType);
  var _iterator2 = _createForOfIteratorHelper(dropZones), _step2;
  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done; ) {
      var dz = _step2.value;
      dz.removeEventListener(DRAGGED_ENTERED_EVENT_NAME, handleDraggedEntered);
      dz.removeEventListener(DRAGGED_LEFT_EVENT_NAME, handleDraggedLeft);
      dz.removeEventListener(DRAGGED_OVER_INDEX_EVENT_NAME, handleDraggedIsOverIndex);
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
  window.removeEventListener(DRAGGED_LEFT_DOCUMENT_EVENT_NAME, handleDrop);
  unobserve();
}
function findShadowPlaceHolderIdx(items) {
  return items.findIndex(function(item) {
    return item[ITEM_ID_KEY] === SHADOW_PLACEHOLDER_ITEM_ID;
  });
}
function findShadowElementIdx(items) {
  return items.findIndex(function(item) {
    return !!item[SHADOW_ITEM_MARKER_PROPERTY_NAME] && item[ITEM_ID_KEY] !== SHADOW_PLACEHOLDER_ITEM_ID;
  });
}
function handleDraggedEntered(e) {
  printDebug(function() {
    return ["dragged entered", e.currentTarget, e.detail];
  });
  var _dzToConfig$get = dzToConfig.get(e.currentTarget), items = _dzToConfig$get.items, dropFromOthersDisabled = _dzToConfig$get.dropFromOthersDisabled;
  if (dropFromOthersDisabled && e.currentTarget !== originDropZone) {
    printDebug(function() {
      return "ignoring dragged entered because drop is currently disabled";
    });
    return;
  }
  isDraggedOutsideOfAnyDz = false;
  items = items.filter(function(item) {
    return item[ITEM_ID_KEY] !== shadowElData[ITEM_ID_KEY];
  });
  printDebug(function() {
    return "dragged entered items ".concat(toString(items));
  });
  if (originDropZone !== e.currentTarget) {
    var originZoneItems = dzToConfig.get(originDropZone).items;
    var newOriginZoneItems = originZoneItems.filter(function(item) {
      return !item[SHADOW_ITEM_MARKER_PROPERTY_NAME];
    });
    dispatchConsiderEvent(originDropZone, newOriginZoneItems, {
      trigger: TRIGGERS.DRAGGED_ENTERED_ANOTHER,
      id: draggedElData[ITEM_ID_KEY],
      source: SOURCES.POINTER
    });
  } else {
    var shadowPlaceHolderIdx = findShadowPlaceHolderIdx(items);
    if (shadowPlaceHolderIdx !== -1) {
      printDebug(function() {
        return "removing placeholder item from origin dz";
      });
      items.splice(shadowPlaceHolderIdx, 1);
    }
  }
  var _e$detail$indexObj = e.detail.indexObj, index = _e$detail$indexObj.index, isProximityBased = _e$detail$indexObj.isProximityBased;
  var shadowElIdx = isProximityBased && index === e.currentTarget.children.length - 1 ? index + 1 : index;
  shadowElDropZone = e.currentTarget;
  items.splice(shadowElIdx, 0, shadowElData);
  dispatchConsiderEvent(e.currentTarget, items, {
    trigger: TRIGGERS.DRAGGED_ENTERED,
    id: draggedElData[ITEM_ID_KEY],
    source: SOURCES.POINTER
  });
}
function handleDraggedLeft(e) {
  if (!isWorkingOnPreviousDrag)
    return;
  printDebug(function() {
    return ["dragged left", e.currentTarget, e.detail];
  });
  var _dzToConfig$get2 = dzToConfig.get(e.currentTarget), items = _dzToConfig$get2.items, dropFromOthersDisabled = _dzToConfig$get2.dropFromOthersDisabled;
  if (dropFromOthersDisabled && e.currentTarget !== originDropZone && e.currentTarget !== shadowElDropZone) {
    printDebug(function() {
      return "drop is currently disabled";
    });
    return;
  }
  var shadowElIdx = findShadowElementIdx(items);
  var shadowItem = items.splice(shadowElIdx, 1)[0];
  shadowElDropZone = void 0;
  var _e$detail = e.detail, type = _e$detail.type, theOtherDz = _e$detail.theOtherDz;
  if (type === DRAGGED_LEFT_TYPES.OUTSIDE_OF_ANY || type === DRAGGED_LEFT_TYPES.LEFT_FOR_ANOTHER && theOtherDz !== originDropZone && dzToConfig.get(theOtherDz).dropFromOthersDisabled) {
    printDebug(function() {
      return "dragged left all, putting shadow element back in the origin dz";
    });
    isDraggedOutsideOfAnyDz = true;
    shadowElDropZone = originDropZone;
    var originZoneItems = dzToConfig.get(originDropZone).items;
    originZoneItems.splice(originIndex, 0, shadowItem);
    dispatchConsiderEvent(originDropZone, originZoneItems, {
      trigger: TRIGGERS.DRAGGED_LEFT_ALL,
      id: draggedElData[ITEM_ID_KEY],
      source: SOURCES.POINTER
    });
  }
  dispatchConsiderEvent(e.currentTarget, items, {
    trigger: TRIGGERS.DRAGGED_LEFT,
    id: draggedElData[ITEM_ID_KEY],
    source: SOURCES.POINTER
  });
}
function handleDraggedIsOverIndex(e) {
  printDebug(function() {
    return ["dragged is over index", e.currentTarget, e.detail];
  });
  var _dzToConfig$get3 = dzToConfig.get(e.currentTarget), items = _dzToConfig$get3.items, dropFromOthersDisabled = _dzToConfig$get3.dropFromOthersDisabled;
  if (dropFromOthersDisabled && e.currentTarget !== originDropZone) {
    printDebug(function() {
      return "drop is currently disabled";
    });
    return;
  }
  isDraggedOutsideOfAnyDz = false;
  var index = e.detail.indexObj.index;
  var shadowElIdx = findShadowElementIdx(items);
  items.splice(shadowElIdx, 1);
  items.splice(index, 0, shadowElData);
  dispatchConsiderEvent(e.currentTarget, items, {
    trigger: TRIGGERS.DRAGGED_OVER_INDEX,
    id: draggedElData[ITEM_ID_KEY],
    source: SOURCES.POINTER
  });
}
function handleMouseMove(e) {
  e.preventDefault();
  var c = e.touches ? e.touches[0] : e;
  currentMousePosition = {
    x: c.clientX,
    y: c.clientY
  };
  draggedEl.style.transform = "translate3d(".concat(currentMousePosition.x - dragStartMousePosition.x, "px, ").concat(currentMousePosition.y - dragStartMousePosition.y, "px, 0)");
}
function handleDrop() {
  printDebug(function() {
    return "dropped";
  });
  finalizingPreviousDrag = true;
  window.removeEventListener("mousemove", handleMouseMove);
  window.removeEventListener("touchmove", handleMouseMove);
  window.removeEventListener("mouseup", handleDrop);
  window.removeEventListener("touchend", handleDrop);
  unWatchDraggedElement();
  moveDraggedElementToWasDroppedState(draggedEl);
  if (!shadowElDropZone) {
    printDebug(function() {
      return "element was dropped right after it left origin but before entering somewhere else";
    });
    shadowElDropZone = originDropZone;
  }
  printDebug(function() {
    return ["dropped in dz", shadowElDropZone];
  });
  var _dzToConfig$get4 = dzToConfig.get(shadowElDropZone), items = _dzToConfig$get4.items, type = _dzToConfig$get4.type;
  styleInactiveDropZones(typeToDropZones.get(type), function(dz) {
    return dzToConfig.get(dz).dropTargetStyle;
  }, function(dz) {
    return dzToConfig.get(dz).dropTargetClasses;
  });
  var shadowElIdx = findShadowElementIdx(items);
  if (shadowElIdx === -1)
    shadowElIdx = originIndex;
  items = items.map(function(item) {
    return item[SHADOW_ITEM_MARKER_PROPERTY_NAME] ? draggedElData : item;
  });
  function finalizeWithinZone() {
    unlockOriginDzMinDimensions();
    dispatchFinalizeEvent(shadowElDropZone, items, {
      trigger: isDraggedOutsideOfAnyDz ? TRIGGERS.DROPPED_OUTSIDE_OF_ANY : TRIGGERS.DROPPED_INTO_ZONE,
      id: draggedElData[ITEM_ID_KEY],
      source: SOURCES.POINTER
    });
    if (shadowElDropZone !== originDropZone) {
      dispatchFinalizeEvent(originDropZone, dzToConfig.get(originDropZone).items, {
        trigger: TRIGGERS.DROPPED_INTO_ANOTHER,
        id: draggedElData[ITEM_ID_KEY],
        source: SOURCES.POINTER
      });
    }
    unDecorateShadowElement(shadowElDropZone.children[shadowElIdx]);
    cleanupPostDrop();
  }
  animateDraggedToFinalPosition(shadowElIdx, finalizeWithinZone);
}
function animateDraggedToFinalPosition(shadowElIdx, callback) {
  var shadowElRect = getBoundingRectNoTransforms(shadowElDropZone.children[shadowElIdx]);
  var newTransform = {
    x: shadowElRect.left - parseFloat(draggedEl.style.left),
    y: shadowElRect.top - parseFloat(draggedEl.style.top)
  };
  var _dzToConfig$get5 = dzToConfig.get(shadowElDropZone), dropAnimationDurationMs = _dzToConfig$get5.dropAnimationDurationMs;
  var transition = "transform ".concat(dropAnimationDurationMs, "ms ease");
  draggedEl.style.transition = draggedEl.style.transition ? draggedEl.style.transition + "," + transition : transition;
  draggedEl.style.transform = "translate3d(".concat(newTransform.x, "px, ").concat(newTransform.y, "px, 0)");
  window.setTimeout(callback, dropAnimationDurationMs);
}
function scheduleDZForRemovalAfterDrop(dz, destroy) {
  scheduledForRemovalAfterDrop.push({
    dz,
    destroy
  });
  window.requestAnimationFrame(function() {
    hideElement(dz);
    document.body.appendChild(dz);
  });
}
function cleanupPostDrop() {
  draggedEl.remove();
  originalDragTarget.remove();
  if (scheduledForRemovalAfterDrop.length) {
    printDebug(function() {
      return ["will destroy zones that were removed during drag", scheduledForRemovalAfterDrop];
    });
    scheduledForRemovalAfterDrop.forEach(function(_ref) {
      var dz = _ref.dz, destroy = _ref.destroy;
      destroy();
      dz.remove();
    });
    scheduledForRemovalAfterDrop = [];
  }
  draggedEl = void 0;
  originalDragTarget = void 0;
  draggedElData = void 0;
  draggedElType = void 0;
  originDropZone = void 0;
  originIndex = void 0;
  shadowElData = void 0;
  shadowElDropZone = void 0;
  dragStartMousePosition = void 0;
  currentMousePosition = void 0;
  isWorkingOnPreviousDrag = false;
  finalizingPreviousDrag = false;
  unlockOriginDzMinDimensions = void 0;
  isDraggedOutsideOfAnyDz = false;
}
function dndzone(node, options) {
  var initialized = false;
  var config = {
    items: void 0,
    type: void 0,
    flipDurationMs: 0,
    dragDisabled: false,
    morphDisabled: false,
    dropFromOthersDisabled: false,
    dropTargetStyle: DEFAULT_DROP_TARGET_STYLE,
    dropTargetClasses: [],
    transformDraggedElement: function transformDraggedElement() {
    },
    centreDraggedOnCursor: false
  };
  printDebug(function() {
    return ["dndzone good to go options: ".concat(toString(options), ", config: ").concat(toString(config)), {
      node
    }];
  });
  var elToIdx = /* @__PURE__ */ new Map();
  function addMaybeListeners() {
    window.addEventListener("mousemove", handleMouseMoveMaybeDragStart, {
      passive: false
    });
    window.addEventListener("touchmove", handleMouseMoveMaybeDragStart, {
      passive: false,
      capture: false
    });
    window.addEventListener("mouseup", handleFalseAlarm, {
      passive: false
    });
    window.addEventListener("touchend", handleFalseAlarm, {
      passive: false
    });
  }
  function removeMaybeListeners() {
    window.removeEventListener("mousemove", handleMouseMoveMaybeDragStart);
    window.removeEventListener("touchmove", handleMouseMoveMaybeDragStart);
    window.removeEventListener("mouseup", handleFalseAlarm);
    window.removeEventListener("touchend", handleFalseAlarm);
  }
  function handleFalseAlarm() {
    removeMaybeListeners();
    originalDragTarget = void 0;
    dragStartMousePosition = void 0;
    currentMousePosition = void 0;
  }
  function handleMouseMoveMaybeDragStart(e) {
    e.preventDefault();
    var c = e.touches ? e.touches[0] : e;
    currentMousePosition = {
      x: c.clientX,
      y: c.clientY
    };
    if (Math.abs(currentMousePosition.x - dragStartMousePosition.x) >= MIN_MOVEMENT_BEFORE_DRAG_START_PX || Math.abs(currentMousePosition.y - dragStartMousePosition.y) >= MIN_MOVEMENT_BEFORE_DRAG_START_PX) {
      removeMaybeListeners();
      handleDragStart();
    }
  }
  function handleMouseDown(e) {
    if (e.target !== e.currentTarget && (e.target.value !== void 0 || e.target.isContentEditable)) {
      printDebug(function() {
        return "won't initiate drag on a nested input element";
      });
      return;
    }
    if (e.button) {
      printDebug(function() {
        return "ignoring none left click button: ".concat(e.button);
      });
      return;
    }
    if (isWorkingOnPreviousDrag) {
      printDebug(function() {
        return "cannot start a new drag before finalizing previous one";
      });
      return;
    }
    e.stopPropagation();
    var c = e.touches ? e.touches[0] : e;
    dragStartMousePosition = {
      x: c.clientX,
      y: c.clientY
    };
    currentMousePosition = _objectSpread2({}, dragStartMousePosition);
    originalDragTarget = e.currentTarget;
    addMaybeListeners();
  }
  function handleDragStart() {
    printDebug(function() {
      return ["drag start config: ".concat(toString(config)), originalDragTarget];
    });
    isWorkingOnPreviousDrag = true;
    var currentIdx = elToIdx.get(originalDragTarget);
    originIndex = currentIdx;
    originDropZone = originalDragTarget.parentElement;
    var rootNode = originDropZone.getRootNode();
    var originDropZoneRoot = rootNode.body || rootNode;
    var items = config.items, type = config.type, centreDraggedOnCursor = config.centreDraggedOnCursor;
    draggedElData = _objectSpread2({}, items[currentIdx]);
    draggedElType = type;
    shadowElData = _objectSpread2(_objectSpread2({}, draggedElData), {}, _defineProperty({}, SHADOW_ITEM_MARKER_PROPERTY_NAME, true));
    var placeHolderElData = _objectSpread2(_objectSpread2({}, shadowElData), {}, _defineProperty({}, ITEM_ID_KEY, SHADOW_PLACEHOLDER_ITEM_ID));
    draggedEl = createDraggedElementFrom(originalDragTarget, centreDraggedOnCursor && currentMousePosition);
    function keepOriginalElementInDom() {
      if (!draggedEl.parentElement) {
        originDropZoneRoot.appendChild(draggedEl);
        draggedEl.focus();
        watchDraggedElement();
        hideElement(originalDragTarget);
        originDropZoneRoot.appendChild(originalDragTarget);
      } else {
        window.requestAnimationFrame(keepOriginalElementInDom);
      }
    }
    window.requestAnimationFrame(keepOriginalElementInDom);
    styleActiveDropZones(Array.from(typeToDropZones.get(config.type)).filter(function(dz) {
      return dz === originDropZone || !dzToConfig.get(dz).dropFromOthersDisabled;
    }), function(dz) {
      return dzToConfig.get(dz).dropTargetStyle;
    }, function(dz) {
      return dzToConfig.get(dz).dropTargetClasses;
    });
    items.splice(currentIdx, 1, placeHolderElData);
    unlockOriginDzMinDimensions = preventShrinking(originDropZone);
    dispatchConsiderEvent(originDropZone, items, {
      trigger: TRIGGERS.DRAG_STARTED,
      id: draggedElData[ITEM_ID_KEY],
      source: SOURCES.POINTER
    });
    window.addEventListener("mousemove", handleMouseMove, {
      passive: false
    });
    window.addEventListener("touchmove", handleMouseMove, {
      passive: false,
      capture: false
    });
    window.addEventListener("mouseup", handleDrop, {
      passive: false
    });
    window.addEventListener("touchend", handleDrop, {
      passive: false
    });
  }
  function configure(_ref2) {
    var _ref2$items = _ref2.items, items = _ref2$items === void 0 ? void 0 : _ref2$items, _ref2$flipDurationMs = _ref2.flipDurationMs, dropAnimationDurationMs = _ref2$flipDurationMs === void 0 ? 0 : _ref2$flipDurationMs, _ref2$type = _ref2.type, newType = _ref2$type === void 0 ? DEFAULT_DROP_ZONE_TYPE : _ref2$type, _ref2$dragDisabled = _ref2.dragDisabled, dragDisabled = _ref2$dragDisabled === void 0 ? false : _ref2$dragDisabled, _ref2$morphDisabled = _ref2.morphDisabled, morphDisabled = _ref2$morphDisabled === void 0 ? false : _ref2$morphDisabled, _ref2$dropFromOthersD = _ref2.dropFromOthersDisabled, dropFromOthersDisabled = _ref2$dropFromOthersD === void 0 ? false : _ref2$dropFromOthersD, _ref2$dropTargetStyle = _ref2.dropTargetStyle, dropTargetStyle = _ref2$dropTargetStyle === void 0 ? DEFAULT_DROP_TARGET_STYLE : _ref2$dropTargetStyle, _ref2$dropTargetClass = _ref2.dropTargetClasses, dropTargetClasses = _ref2$dropTargetClass === void 0 ? [] : _ref2$dropTargetClass, _ref2$transformDragge = _ref2.transformDraggedElement, transformDraggedElement = _ref2$transformDragge === void 0 ? function() {
    } : _ref2$transformDragge, _ref2$centreDraggedOn = _ref2.centreDraggedOnCursor, centreDraggedOnCursor = _ref2$centreDraggedOn === void 0 ? false : _ref2$centreDraggedOn;
    config.dropAnimationDurationMs = dropAnimationDurationMs;
    if (config.type && newType !== config.type) {
      unregisterDropZone(node, config.type);
    }
    config.type = newType;
    registerDropZone(node, newType);
    config.items = _toConsumableArray(items);
    config.dragDisabled = dragDisabled;
    config.morphDisabled = morphDisabled;
    config.transformDraggedElement = transformDraggedElement;
    config.centreDraggedOnCursor = centreDraggedOnCursor;
    if (initialized && isWorkingOnPreviousDrag && !finalizingPreviousDrag && (!areObjectsShallowEqual(dropTargetStyle, config.dropTargetStyle) || !areArraysShallowEqualSameOrder(dropTargetClasses, config.dropTargetClasses))) {
      styleInactiveDropZones([node], function() {
        return config.dropTargetStyle;
      }, function() {
        return dropTargetClasses;
      });
      styleActiveDropZones([node], function() {
        return dropTargetStyle;
      }, function() {
        return dropTargetClasses;
      });
    }
    config.dropTargetStyle = dropTargetStyle;
    config.dropTargetClasses = _toConsumableArray(dropTargetClasses);
    function getConfigProp(dz, propName) {
      return dzToConfig.get(dz) ? dzToConfig.get(dz)[propName] : config[propName];
    }
    if (initialized && isWorkingOnPreviousDrag && config.dropFromOthersDisabled !== dropFromOthersDisabled) {
      if (dropFromOthersDisabled) {
        styleInactiveDropZones([node], function(dz) {
          return getConfigProp(dz, "dropTargetStyle");
        }, function(dz) {
          return getConfigProp(dz, "dropTargetClasses");
        });
      } else {
        styleActiveDropZones([node], function(dz) {
          return getConfigProp(dz, "dropTargetStyle");
        }, function(dz) {
          return getConfigProp(dz, "dropTargetClasses");
        });
      }
    }
    config.dropFromOthersDisabled = dropFromOthersDisabled;
    dzToConfig.set(node, config);
    var shadowElIdx = findShadowElementIdx(config.items);
    var _loop = function _loop2(idx2) {
      var draggableEl = node.children[idx2];
      styleDraggable(draggableEl, dragDisabled);
      if (idx2 === shadowElIdx) {
        if (!morphDisabled) {
          morphDraggedElementToBeLike(draggedEl, draggableEl, currentMousePosition.x, currentMousePosition.y, function() {
            return config.transformDraggedElement(draggedEl, draggedElData, idx2);
          });
        }
        decorateShadowEl(draggableEl);
        return "continue";
      }
      draggableEl.removeEventListener("mousedown", elToMouseDownListener.get(draggableEl));
      draggableEl.removeEventListener("touchstart", elToMouseDownListener.get(draggableEl));
      if (!dragDisabled) {
        draggableEl.addEventListener("mousedown", handleMouseDown);
        draggableEl.addEventListener("touchstart", handleMouseDown);
        elToMouseDownListener.set(draggableEl, handleMouseDown);
      }
      elToIdx.set(draggableEl, idx2);
      if (!initialized) {
        initialized = true;
      }
    };
    for (var idx = 0; idx < node.children.length; idx++) {
      var _ret = _loop(idx);
      if (_ret === "continue")
        continue;
    }
  }
  configure(options);
  return {
    update: function update2(newOptions) {
      printDebug(function() {
        return "pointer dndzone will update newOptions: ".concat(toString(newOptions));
      });
      configure(newOptions);
    },
    destroy: function destroy() {
      function destroyDz() {
        printDebug(function() {
          return "pointer dndzone will destroy";
        });
        unregisterDropZone(node, dzToConfig.get(node).type);
        dzToConfig["delete"](node);
      }
      if (isWorkingOnPreviousDrag) {
        printDebug(function() {
          return "pointer dndzone will be scheduled for destruction";
        });
        scheduleDZForRemovalAfterDrop(node, destroyDz);
      } else {
        destroyDz();
      }
    }
  };
}
var _ID_TO_INSTRUCTION;
var INSTRUCTION_IDs = {
  DND_ZONE_ACTIVE: "dnd-zone-active",
  DND_ZONE_DRAG_DISABLED: "dnd-zone-drag-disabled"
};
var ID_TO_INSTRUCTION = (_ID_TO_INSTRUCTION = {}, _defineProperty(_ID_TO_INSTRUCTION, INSTRUCTION_IDs.DND_ZONE_ACTIVE, "Tab to one the items and press space-bar or enter to start dragging it"), _defineProperty(_ID_TO_INSTRUCTION, INSTRUCTION_IDs.DND_ZONE_DRAG_DISABLED, "This is a disabled drag and drop list"), _ID_TO_INSTRUCTION);
var ALERT_DIV_ID = "dnd-action-aria-alert";
var alertsDiv;
function initAriaOnBrowser() {
  if (alertsDiv) {
    return;
  }
  alertsDiv = document.createElement("div");
  (function initAlertsDiv() {
    alertsDiv.id = ALERT_DIV_ID;
    alertsDiv.style.position = "fixed";
    alertsDiv.style.bottom = "0";
    alertsDiv.style.left = "0";
    alertsDiv.style.zIndex = "-5";
    alertsDiv.style.opacity = "0";
    alertsDiv.style.height = "0";
    alertsDiv.style.width = "0";
    alertsDiv.setAttribute("role", "alert");
  })();
  document.body.prepend(alertsDiv);
  Object.entries(ID_TO_INSTRUCTION).forEach(function(_ref) {
    var _ref2 = _slicedToArray(_ref, 2), id = _ref2[0], txt = _ref2[1];
    return document.body.prepend(instructionToHiddenDiv(id, txt));
  });
}
function initAria() {
  if (isOnServer)
    return null;
  if (document.readyState === "complete") {
    initAriaOnBrowser();
  } else {
    window.addEventListener("DOMContentLoaded", initAriaOnBrowser);
  }
  return _objectSpread2({}, INSTRUCTION_IDs);
}
function destroyAria() {
  if (isOnServer || !alertsDiv)
    return;
  Object.keys(ID_TO_INSTRUCTION).forEach(function(id) {
    var _document$getElementB;
    return (_document$getElementB = document.getElementById(id)) === null || _document$getElementB === void 0 ? void 0 : _document$getElementB.remove();
  });
  alertsDiv.remove();
  alertsDiv = void 0;
}
function instructionToHiddenDiv(id, txt) {
  var div = document.createElement("div");
  div.id = id;
  div.innerHTML = "<p>".concat(txt, "</p>");
  div.style.display = "none";
  div.style.position = "fixed";
  div.style.zIndex = "-5";
  return div;
}
function alertToScreenReader(txt) {
  if (isOnServer)
    return;
  if (!alertsDiv) {
    initAriaOnBrowser();
  }
  alertsDiv.innerHTML = "";
  var alertText = document.createTextNode(txt);
  alertsDiv.appendChild(alertText);
  alertsDiv.style.display = "none";
  alertsDiv.style.display = "inline";
}
var DEFAULT_DROP_ZONE_TYPE$1 = "--any--";
var DEFAULT_DROP_TARGET_STYLE$1 = {
  outline: "rgba(255, 255, 102, 0.7) solid 2px"
};
var isDragging = false;
var draggedItemType;
var focusedDz;
var focusedDzLabel = "";
var focusedItem;
var focusedItemId;
var focusedItemLabel = "";
var allDragTargets = /* @__PURE__ */ new WeakSet();
var elToKeyDownListeners = /* @__PURE__ */ new WeakMap();
var elToFocusListeners = /* @__PURE__ */ new WeakMap();
var dzToHandles = /* @__PURE__ */ new Map();
var dzToConfig$1 = /* @__PURE__ */ new Map();
var typeToDropZones$1 = /* @__PURE__ */ new Map();
var INSTRUCTION_IDs$1;
function registerDropZone$1(dropZoneEl, type) {
  printDebug(function() {
    return "registering drop-zone if absent";
  });
  if (typeToDropZones$1.size === 0) {
    printDebug(function() {
      return "adding global keydown and click handlers";
    });
    INSTRUCTION_IDs$1 = initAria();
    window.addEventListener("keydown", globalKeyDownHandler);
    window.addEventListener("click", globalClickHandler);
  }
  if (!typeToDropZones$1.has(type)) {
    typeToDropZones$1.set(type, /* @__PURE__ */ new Set());
  }
  if (!typeToDropZones$1.get(type).has(dropZoneEl)) {
    typeToDropZones$1.get(type).add(dropZoneEl);
    incrementActiveDropZoneCount();
  }
}
function unregisterDropZone$1(dropZoneEl, type) {
  printDebug(function() {
    return "unregistering drop-zone";
  });
  if (focusedDz === dropZoneEl) {
    handleDrop$1();
  }
  typeToDropZones$1.get(type)["delete"](dropZoneEl);
  decrementActiveDropZoneCount();
  if (typeToDropZones$1.get(type).size === 0) {
    typeToDropZones$1["delete"](type);
  }
  if (typeToDropZones$1.size === 0) {
    printDebug(function() {
      return "removing global keydown and click handlers";
    });
    window.removeEventListener("keydown", globalKeyDownHandler);
    window.removeEventListener("click", globalClickHandler);
    INSTRUCTION_IDs$1 = void 0;
    destroyAria();
  }
}
function globalKeyDownHandler(e) {
  if (!isDragging)
    return;
  switch (e.key) {
    case "Escape": {
      handleDrop$1();
      break;
    }
  }
}
function globalClickHandler() {
  if (!isDragging)
    return;
  if (!allDragTargets.has(document.activeElement)) {
    printDebug(function() {
      return "clicked outside of any draggable";
    });
    handleDrop$1();
  }
}
function handleZoneFocus(e) {
  printDebug(function() {
    return "zone focus";
  });
  if (!isDragging)
    return;
  var newlyFocusedDz = e.currentTarget;
  if (newlyFocusedDz === focusedDz)
    return;
  focusedDzLabel = newlyFocusedDz.getAttribute("aria-label") || "";
  var _dzToConfig$get = dzToConfig$1.get(focusedDz), originItems = _dzToConfig$get.items;
  var originItem = originItems.find(function(item) {
    return item[ITEM_ID_KEY] === focusedItemId;
  });
  var originIdx = originItems.indexOf(originItem);
  var itemToMove = originItems.splice(originIdx, 1)[0];
  var _dzToConfig$get2 = dzToConfig$1.get(newlyFocusedDz), targetItems = _dzToConfig$get2.items, autoAriaDisabled = _dzToConfig$get2.autoAriaDisabled;
  if (newlyFocusedDz.getBoundingClientRect().top < focusedDz.getBoundingClientRect().top || newlyFocusedDz.getBoundingClientRect().left < focusedDz.getBoundingClientRect().left) {
    targetItems.push(itemToMove);
    if (!autoAriaDisabled) {
      alertToScreenReader("Moved item ".concat(focusedItemLabel, " to the end of the list ").concat(focusedDzLabel));
    }
  } else {
    targetItems.unshift(itemToMove);
    if (!autoAriaDisabled) {
      alertToScreenReader("Moved item ".concat(focusedItemLabel, " to the beginning of the list ").concat(focusedDzLabel));
    }
  }
  var dzFrom = focusedDz;
  dispatchFinalizeEvent(dzFrom, originItems, {
    trigger: TRIGGERS.DROPPED_INTO_ANOTHER,
    id: focusedItemId,
    source: SOURCES.KEYBOARD
  });
  dispatchFinalizeEvent(newlyFocusedDz, targetItems, {
    trigger: TRIGGERS.DROPPED_INTO_ZONE,
    id: focusedItemId,
    source: SOURCES.KEYBOARD
  });
  focusedDz = newlyFocusedDz;
}
function triggerAllDzsUpdate() {
  dzToHandles.forEach(function(_ref, dz) {
    var update2 = _ref.update;
    return update2(dzToConfig$1.get(dz));
  });
}
function handleDrop$1() {
  var dispatchConsider = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
  printDebug(function() {
    return "drop";
  });
  if (!dzToConfig$1.get(focusedDz).autoAriaDisabled) {
    alertToScreenReader("Stopped dragging item ".concat(focusedItemLabel));
  }
  if (allDragTargets.has(document.activeElement)) {
    document.activeElement.blur();
  }
  if (dispatchConsider) {
    dispatchConsiderEvent(focusedDz, dzToConfig$1.get(focusedDz).items, {
      trigger: TRIGGERS.DRAG_STOPPED,
      id: focusedItemId,
      source: SOURCES.KEYBOARD
    });
  }
  styleInactiveDropZones(typeToDropZones$1.get(draggedItemType), function(dz) {
    return dzToConfig$1.get(dz).dropTargetStyle;
  }, function(dz) {
    return dzToConfig$1.get(dz).dropTargetClasses;
  });
  focusedItem = null;
  focusedItemId = null;
  focusedItemLabel = "";
  draggedItemType = null;
  focusedDz = null;
  focusedDzLabel = "";
  isDragging = false;
  triggerAllDzsUpdate();
}
function dndzone$1(node, options) {
  var config = {
    items: void 0,
    type: void 0,
    dragDisabled: false,
    zoneTabIndex: 0,
    dropFromOthersDisabled: false,
    dropTargetStyle: DEFAULT_DROP_TARGET_STYLE$1,
    dropTargetClasses: [],
    autoAriaDisabled: false
  };
  function swap(arr, i, j) {
    if (arr.length <= 1)
      return;
    arr.splice(j, 1, arr.splice(i, 1, arr[j])[0]);
  }
  function handleKeyDown(e) {
    printDebug(function() {
      return ["handling key down", e.key];
    });
    switch (e.key) {
      case "Enter":
      case " ": {
        if ((e.target.disabled !== void 0 || e.target.href || e.target.isContentEditable) && !allDragTargets.has(e.target)) {
          return;
        }
        e.preventDefault();
        e.stopPropagation();
        if (isDragging) {
          handleDrop$1();
        } else {
          handleDragStart(e);
        }
        break;
      }
      case "ArrowDown":
      case "ArrowRight": {
        if (!isDragging)
          return;
        e.preventDefault();
        e.stopPropagation();
        var _dzToConfig$get3 = dzToConfig$1.get(node), items = _dzToConfig$get3.items;
        var children2 = Array.from(node.children);
        var idx = children2.indexOf(e.currentTarget);
        printDebug(function() {
          return ["arrow down", idx];
        });
        if (idx < children2.length - 1) {
          if (!config.autoAriaDisabled) {
            alertToScreenReader("Moved item ".concat(focusedItemLabel, " to position ").concat(idx + 2, " in the list ").concat(focusedDzLabel));
          }
          swap(items, idx, idx + 1);
          dispatchFinalizeEvent(node, items, {
            trigger: TRIGGERS.DROPPED_INTO_ZONE,
            id: focusedItemId,
            source: SOURCES.KEYBOARD
          });
        }
        break;
      }
      case "ArrowUp":
      case "ArrowLeft": {
        if (!isDragging)
          return;
        e.preventDefault();
        e.stopPropagation();
        var _dzToConfig$get4 = dzToConfig$1.get(node), _items = _dzToConfig$get4.items;
        var _children = Array.from(node.children);
        var _idx = _children.indexOf(e.currentTarget);
        printDebug(function() {
          return ["arrow up", _idx];
        });
        if (_idx > 0) {
          if (!config.autoAriaDisabled) {
            alertToScreenReader("Moved item ".concat(focusedItemLabel, " to position ").concat(_idx, " in the list ").concat(focusedDzLabel));
          }
          swap(_items, _idx, _idx - 1);
          dispatchFinalizeEvent(node, _items, {
            trigger: TRIGGERS.DROPPED_INTO_ZONE,
            id: focusedItemId,
            source: SOURCES.KEYBOARD
          });
        }
        break;
      }
    }
  }
  function handleDragStart(e) {
    printDebug(function() {
      return "drag start";
    });
    setCurrentFocusedItem(e.currentTarget);
    focusedDz = node;
    draggedItemType = config.type;
    isDragging = true;
    var dropTargets = Array.from(typeToDropZones$1.get(config.type)).filter(function(dz) {
      return dz === focusedDz || !dzToConfig$1.get(dz).dropFromOthersDisabled;
    });
    styleActiveDropZones(dropTargets, function(dz) {
      return dzToConfig$1.get(dz).dropTargetStyle;
    }, function(dz) {
      return dzToConfig$1.get(dz).dropTargetClasses;
    });
    if (!config.autoAriaDisabled) {
      var msg = "Started dragging item ".concat(focusedItemLabel, ". Use the arrow keys to move it within its list ").concat(focusedDzLabel);
      if (dropTargets.length > 1) {
        msg += ", or tab to another list in order to move the item into it";
      }
      alertToScreenReader(msg);
    }
    dispatchConsiderEvent(node, dzToConfig$1.get(node).items, {
      trigger: TRIGGERS.DRAG_STARTED,
      id: focusedItemId,
      source: SOURCES.KEYBOARD
    });
    triggerAllDzsUpdate();
  }
  function handleClick(e) {
    if (!isDragging)
      return;
    if (e.currentTarget === focusedItem)
      return;
    e.stopPropagation();
    handleDrop$1(false);
    handleDragStart(e);
  }
  function setCurrentFocusedItem(draggableEl) {
    var _dzToConfig$get5 = dzToConfig$1.get(node), items = _dzToConfig$get5.items;
    var children2 = Array.from(node.children);
    var focusedItemIdx = children2.indexOf(draggableEl);
    focusedItem = draggableEl;
    focusedItem.tabIndex = 0;
    focusedItemId = items[focusedItemIdx][ITEM_ID_KEY];
    focusedItemLabel = children2[focusedItemIdx].getAttribute("aria-label") || "";
  }
  function configure(_ref2) {
    var _ref2$items = _ref2.items, items = _ref2$items === void 0 ? [] : _ref2$items, _ref2$type = _ref2.type, newType = _ref2$type === void 0 ? DEFAULT_DROP_ZONE_TYPE$1 : _ref2$type, _ref2$dragDisabled = _ref2.dragDisabled, dragDisabled = _ref2$dragDisabled === void 0 ? false : _ref2$dragDisabled, _ref2$zoneTabIndex = _ref2.zoneTabIndex, zoneTabIndex = _ref2$zoneTabIndex === void 0 ? 0 : _ref2$zoneTabIndex, _ref2$dropFromOthersD = _ref2.dropFromOthersDisabled, dropFromOthersDisabled = _ref2$dropFromOthersD === void 0 ? false : _ref2$dropFromOthersD, _ref2$dropTargetStyle = _ref2.dropTargetStyle, dropTargetStyle = _ref2$dropTargetStyle === void 0 ? DEFAULT_DROP_TARGET_STYLE$1 : _ref2$dropTargetStyle, _ref2$dropTargetClass = _ref2.dropTargetClasses, dropTargetClasses = _ref2$dropTargetClass === void 0 ? [] : _ref2$dropTargetClass, _ref2$autoAriaDisable = _ref2.autoAriaDisabled, autoAriaDisabled = _ref2$autoAriaDisable === void 0 ? false : _ref2$autoAriaDisable;
    config.items = _toConsumableArray(items);
    config.dragDisabled = dragDisabled;
    config.dropFromOthersDisabled = dropFromOthersDisabled;
    config.zoneTabIndex = zoneTabIndex;
    config.dropTargetStyle = dropTargetStyle;
    config.dropTargetClasses = dropTargetClasses;
    config.autoAriaDisabled = autoAriaDisabled;
    if (config.type && newType !== config.type) {
      unregisterDropZone$1(node, config.type);
    }
    config.type = newType;
    registerDropZone$1(node, newType);
    if (!autoAriaDisabled) {
      node.setAttribute("aria-disabled", dragDisabled);
      node.setAttribute("role", "list");
      node.setAttribute("aria-describedby", dragDisabled ? INSTRUCTION_IDs$1.DND_ZONE_DRAG_DISABLED : INSTRUCTION_IDs$1.DND_ZONE_ACTIVE);
    }
    dzToConfig$1.set(node, config);
    if (isDragging) {
      node.tabIndex = node === focusedDz || focusedItem.contains(node) || config.dropFromOthersDisabled || focusedDz && config.type !== dzToConfig$1.get(focusedDz).type ? -1 : 0;
    } else {
      node.tabIndex = config.zoneTabIndex;
    }
    node.addEventListener("focus", handleZoneFocus);
    var _loop = function _loop2(i2) {
      var draggableEl = node.children[i2];
      allDragTargets.add(draggableEl);
      draggableEl.tabIndex = isDragging ? -1 : 0;
      if (!autoAriaDisabled) {
        draggableEl.setAttribute("role", "listitem");
      }
      draggableEl.removeEventListener("keydown", elToKeyDownListeners.get(draggableEl));
      draggableEl.removeEventListener("click", elToFocusListeners.get(draggableEl));
      if (!dragDisabled) {
        draggableEl.addEventListener("keydown", handleKeyDown);
        elToKeyDownListeners.set(draggableEl, handleKeyDown);
        draggableEl.addEventListener("click", handleClick);
        elToFocusListeners.set(draggableEl, handleClick);
      }
      if (isDragging && config.items[i2][ITEM_ID_KEY] === focusedItemId) {
        printDebug(function() {
          return ["focusing on", {
            i: i2,
            focusedItemId
          }];
        });
        focusedItem = draggableEl;
        focusedItem.tabIndex = 0;
        draggableEl.focus();
      }
    };
    for (var i = 0; i < node.children.length; i++) {
      _loop(i);
    }
  }
  configure(options);
  var handles = {
    update: function update2(newOptions) {
      printDebug(function() {
        return "keyboard dndzone will update newOptions: ".concat(toString(newOptions));
      });
      configure(newOptions);
    },
    destroy: function destroy() {
      printDebug(function() {
        return "keyboard dndzone will destroy";
      });
      unregisterDropZone$1(node, config.type);
      dzToConfig$1["delete"](node);
      dzToHandles["delete"](node);
    }
  };
  dzToHandles.set(node, handles);
  return handles;
}
var _excluded = ["items", "flipDurationMs", "type", "dragDisabled", "morphDisabled", "dropFromOthersDisabled", "zoneTabIndex", "dropTargetStyle", "dropTargetClasses", "transformDraggedElement", "autoAriaDisabled", "centreDraggedOnCursor"];
function dndzone$2(node, options) {
  validateOptions(options);
  var pointerZone = dndzone(node, options);
  var keyboardZone = dndzone$1(node, options);
  return {
    update: function update2(newOptions) {
      validateOptions(newOptions);
      pointerZone.update(newOptions);
      keyboardZone.update(newOptions);
    },
    destroy: function destroy() {
      pointerZone.destroy();
      keyboardZone.destroy();
    }
  };
}
function validateOptions(options) {
  var items = options.items, flipDurationMs3 = options.flipDurationMs, type = options.type, dragDisabled = options.dragDisabled, morphDisabled = options.morphDisabled, dropFromOthersDisabled = options.dropFromOthersDisabled, zoneTabIndex = options.zoneTabIndex, dropTargetStyle = options.dropTargetStyle, dropTargetClasses = options.dropTargetClasses, transformDraggedElement = options.transformDraggedElement, autoAriaDisabled = options.autoAriaDisabled, centreDraggedOnCursor = options.centreDraggedOnCursor, rest = _objectWithoutProperties(options, _excluded);
  if (Object.keys(rest).length > 0) {
    console.warn("dndzone will ignore unknown options", rest);
  }
  if (!items) {
    throw new Error("no 'items' key provided to dndzone");
  }
  var itemWithMissingId = items.find(function(item) {
    return !{}.hasOwnProperty.call(item, ITEM_ID_KEY);
  });
  if (itemWithMissingId) {
    throw new Error("missing '".concat(ITEM_ID_KEY, "' property for item ").concat(toString(itemWithMissingId)));
  }
  if (dropTargetClasses && !Array.isArray(dropTargetClasses)) {
    throw new Error("dropTargetClasses should be an array but instead it is a ".concat(_typeof(dropTargetClasses), ", ").concat(toString(dropTargetClasses)));
  }
  if (zoneTabIndex && !isInt(zoneTabIndex)) {
    throw new Error("zoneTabIndex should be a number but instead it is a ".concat(_typeof(zoneTabIndex), ", ").concat(toString(zoneTabIndex)));
  }
}
function isInt(value) {
  return !isNaN(value) && function(x) {
    return (x | 0) === x;
  }(parseFloat(value));
}

// src/settings/ui/PropertyBlock.svelte
var import_obsidian10 = require("obsidian");
function add_css18(target) {
  append_styles(target, "svelte-r3p86y", ".property-block-container.svelte-r3p86y{display:flex;justify-content:space-between;align-items:center}.info.svelte-r3p86y{display:flex;flex-flow:column}.context.svelte-r3p86y{display:flex;align-items:center;gap:0.25rem;color:var(--text-muted)}.context-item.svelte-r3p86y{display:flex;align-items:center}");
}
function create_if_block_4(ctx) {
  let strong;
  let t0;
  let t1_value = ctx[0].headers.join(" | ") + "";
  let t1;
  let t2;
  return {
    c() {
      strong = element("strong");
      t0 = text("(");
      t1 = text(t1_value);
      t2 = text(")");
    },
    m(target, anchor) {
      insert(target, strong, anchor);
      append(strong, t0);
      append(strong, t1);
      append(strong, t2);
    },
    p(ctx2, dirty) {
      if (dirty & 1 && t1_value !== (t1_value = ctx2[0].headers.join(" | ") + ""))
        set_data(t1, t1_value);
    },
    d(detaching) {
      if (detaching)
        detach(strong);
    }
  };
}
function create_if_block_3(ctx) {
  let div;
  let heading_action;
  let mounted;
  let dispose;
  return {
    c() {
      div = element("div");
      attr(div, "class", "context-item heading svelte-r3p86y");
      attr(div, "aria-label", "Has Heading");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (!mounted) {
        dispose = action_destroyer(heading_action = ctx[4].call(null, div));
        mounted = true;
      }
    },
    d(detaching) {
      if (detaching)
        detach(div);
      mounted = false;
      dispose();
    }
  };
}
function create_if_block_22(ctx) {
  let div;
  let conditioned_action;
  let mounted;
  let dispose;
  return {
    c() {
      div = element("div");
      attr(div, "class", "context-item conditioned svelte-r3p86y");
      attr(div, "aria-label", "Conditioned");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (!mounted) {
        dispose = action_destroyer(conditioned_action = ctx[2].call(null, div));
        mounted = true;
      }
    },
    d(detaching) {
      if (detaching)
        detach(div);
      mounted = false;
      dispose();
    }
  };
}
function create_if_block_18(ctx) {
  let div;
  let code_action;
  let mounted;
  let dispose;
  return {
    c() {
      div = element("div");
      attr(div, "class", "context-item callback svelte-r3p86y");
      attr(div, "aria-label", "Has Callback");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (!mounted) {
        dispose = action_destroyer(code_action = ctx[5].call(null, div));
        mounted = true;
      }
    },
    d(detaching) {
      if (detaching)
        detach(div);
      mounted = false;
      dispose();
    }
  };
}
function create_if_block15(ctx) {
  let div;
  let dice_action;
  let mounted;
  let dispose;
  return {
    c() {
      div = element("div");
      attr(div, "class", "context-item dice svelte-r3p86y");
      attr(div, "aria-label", "Will Parse for Dice Rolls");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (!mounted) {
        dispose = action_destroyer(dice_action = ctx[3].call(null, div));
        mounted = true;
      }
    },
    d(detaching) {
      if (detaching)
        detach(div);
      mounted = false;
      dispose();
    }
  };
}
function create_fragment20(ctx) {
  let div2;
  let div1;
  let div0;
  let span;
  let t0_value = ctx[1](ctx[0].type) + "";
  let t0;
  let t1;
  let t2;
  let small0;
  let em;
  let t3_value = ctx[0].properties.join(", ") + "";
  let t3;
  let t4;
  let small1;
  let t5;
  let t6;
  let t7;
  let if_block0 = ctx[0].type == "table" && ctx[0].headers?.length && create_if_block_4(ctx);
  let if_block1 = "heading" in ctx[0] && create_if_block_3(ctx);
  let if_block2 = ctx[0].conditioned && create_if_block_22(ctx);
  let if_block3 = "callback" in ctx[0] && create_if_block_18(ctx);
  let if_block4 = "dice" in ctx[0] && create_if_block15(ctx);
  return {
    c() {
      div2 = element("div");
      div1 = element("div");
      div0 = element("div");
      span = element("span");
      t0 = text(t0_value);
      t1 = space();
      if (if_block0)
        if_block0.c();
      t2 = space();
      small0 = element("small");
      em = element("em");
      t3 = text(t3_value);
      t4 = space();
      small1 = element("small");
      if (if_block1)
        if_block1.c();
      t5 = space();
      if (if_block2)
        if_block2.c();
      t6 = space();
      if (if_block3)
        if_block3.c();
      t7 = space();
      if (if_block4)
        if_block4.c();
      attr(div1, "class", "info svelte-r3p86y");
      attr(small1, "class", "context svelte-r3p86y");
      attr(div2, "class", "property-block-container svelte-r3p86y");
    },
    m(target, anchor) {
      insert(target, div2, anchor);
      append(div2, div1);
      append(div1, div0);
      append(div0, span);
      append(span, t0);
      append(div0, t1);
      if (if_block0)
        if_block0.m(div0, null);
      append(div1, t2);
      append(div1, small0);
      append(small0, em);
      append(em, t3);
      append(div2, t4);
      append(div2, small1);
      if (if_block1)
        if_block1.m(small1, null);
      append(small1, t5);
      if (if_block2)
        if_block2.m(small1, null);
      append(small1, t6);
      if (if_block3)
        if_block3.m(small1, null);
      append(small1, t7);
      if (if_block4)
        if_block4.m(small1, null);
    },
    p(ctx2, [dirty]) {
      if (dirty & 1 && t0_value !== (t0_value = ctx2[1](ctx2[0].type) + ""))
        set_data(t0, t0_value);
      if (ctx2[0].type == "table" && ctx2[0].headers?.length) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
        } else {
          if_block0 = create_if_block_4(ctx2);
          if_block0.c();
          if_block0.m(div0, null);
        }
      } else if (if_block0) {
        if_block0.d(1);
        if_block0 = null;
      }
      if (dirty & 1 && t3_value !== (t3_value = ctx2[0].properties.join(", ") + ""))
        set_data(t3, t3_value);
      if ("heading" in ctx2[0]) {
        if (if_block1) {
        } else {
          if_block1 = create_if_block_3(ctx2);
          if_block1.c();
          if_block1.m(small1, t5);
        }
      } else if (if_block1) {
        if_block1.d(1);
        if_block1 = null;
      }
      if (ctx2[0].conditioned) {
        if (if_block2) {
        } else {
          if_block2 = create_if_block_22(ctx2);
          if_block2.c();
          if_block2.m(small1, t6);
        }
      } else if (if_block2) {
        if_block2.d(1);
        if_block2 = null;
      }
      if ("callback" in ctx2[0]) {
        if (if_block3) {
        } else {
          if_block3 = create_if_block_18(ctx2);
          if_block3.c();
          if_block3.m(small1, t7);
        }
      } else if (if_block3) {
        if_block3.d(1);
        if_block3 = null;
      }
      if ("dice" in ctx2[0]) {
        if (if_block4) {
        } else {
          if_block4 = create_if_block15(ctx2);
          if_block4.c();
          if_block4.m(small1, null);
        }
      } else if (if_block4) {
        if_block4.d(1);
        if_block4 = null;
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(div2);
      if (if_block0)
        if_block0.d();
      if (if_block1)
        if_block1.d();
      if (if_block2)
        if_block2.d();
      if (if_block3)
        if_block3.d();
      if (if_block4)
        if_block4.d();
    }
  };
}
function instance18($$self, $$props, $$invalidate) {
  let { block } = $$props;
  const transform = (text2) => {
    if ("display" in block) {
      return `${block.display} (${text2[0].toUpperCase() + text2.slice(1).toLowerCase()})`;
    }
    return text2[0].toUpperCase() + text2.slice(1).toLowerCase();
  };
  const conditioned = (node) => {
    (0, import_obsidian10.setIcon)(node, "statblock-conditioned");
  };
  const dice = (node) => {
    (0, import_obsidian10.setIcon)(node, "dice-roller-dice");
  };
  const heading = (node) => {
    (0, import_obsidian10.setIcon)(node, "heading-glyph");
  };
  const code = (node) => {
    (0, import_obsidian10.setIcon)(node, "code-glyph");
  };
  $$self.$$set = ($$props2) => {
    if ("block" in $$props2)
      $$invalidate(0, block = $$props2.block);
  };
  return [block, transform, conditioned, dice, heading, code];
}
var PropertyBlock = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance18, create_fragment20, safe_not_equal, { block: 0 }, add_css18);
  }
};
var PropertyBlock_default = PropertyBlock;

// src/settings/ui/Block.svelte
var import_obsidian13 = require("obsidian");

// src/settings/ui/block.ts
var import_fast_copy2 = __toESM(require_fast_copy());
var import_obsidian12 = require("obsidian");

// src/settings/ui/TableHeaders.svelte
var import_obsidian11 = require("obsidian");
function add_css19(target) {
  append_styles(target, "svelte-1blh0v3", ".creator-zone.svelte-1blh0v3{display:flex;justify-content:space-evenly;gap:1rem;flex-flow:row wrap}.header-container.svelte-1blh0v3{display:flex;align-items:center}");
}
function get_each_context7(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[12] = list[i];
  return child_ctx;
}
function create_each_block7(key_1, ctx) {
  let div1;
  let span;
  let t0_value = ctx[12].name + "";
  let t0;
  let t1;
  let div0;
  let del_action;
  let t2;
  let rect;
  let stop_animation = noop;
  let mounted;
  let dispose;
  function click_handler() {
    return ctx[8](ctx[12]);
  }
  return {
    key: key_1,
    first: null,
    c() {
      div1 = element("div");
      span = element("span");
      t0 = text(t0_value);
      t1 = space();
      div0 = element("div");
      t2 = space();
      attr(span, "class", "table-header");
      attr(div1, "class", "header-container svelte-1blh0v3");
      this.first = div1;
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      append(div1, span);
      append(span, t0);
      append(div1, t1);
      append(div1, div0);
      append(div1, t2);
      if (!mounted) {
        dispose = [
          action_destroyer(del_action = ctx[5].call(null, div0)),
          listen(div0, "click", click_handler)
        ];
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (dirty & 1 && t0_value !== (t0_value = ctx[12].name + ""))
        set_data(t0, t0_value);
    },
    r() {
      rect = div1.getBoundingClientRect();
    },
    f() {
      fix_position(div1);
      stop_animation();
    },
    a() {
      stop_animation();
      stop_animation = create_animation(div1, rect, flip, { duration: flipDurationMs });
    },
    d(detaching) {
      if (detaching)
        detach(div1);
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_fragment21(ctx) {
  let div;
  let section;
  let each_blocks = [];
  let each_1_lookup = /* @__PURE__ */ new Map();
  let dndzone_action;
  let mounted;
  let dispose;
  let each_value = ctx[0].filter(ctx[7]);
  const get_key = (ctx2) => ctx2[12].id;
  for (let i = 0; i < each_value.length; i += 1) {
    let child_ctx = get_each_context7(ctx, each_value, i);
    let key = get_key(child_ctx);
    each_1_lookup.set(key, each_blocks[i] = create_each_block7(key, child_ctx));
  }
  return {
    c() {
      div = element("div");
      section = element("section");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      attr(section, "class", "creator-zone svelte-1blh0v3");
      attr(div, "class", "table-header-container");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, section);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(section, null);
      }
      if (!mounted) {
        dispose = [
          action_destroyer(dndzone_action = dndzone$2.call(null, section, {
            items: ctx[0],
            flipDurationMs,
            dragDisabled: ctx[1],
            type: "table_headers"
          })),
          listen(section, "consider", ctx[2]),
          listen(section, "finalize", ctx[3])
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & 17) {
        each_value = ctx2[0].filter(ctx2[7]);
        for (let i = 0; i < each_blocks.length; i += 1)
          each_blocks[i].r();
        each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx2, each_value, each_1_lookup, section, fix_and_destroy_block, create_each_block7, null, get_each_context7);
        for (let i = 0; i < each_blocks.length; i += 1)
          each_blocks[i].a();
      }
      if (dndzone_action && is_function(dndzone_action.update) && dirty & 3)
        dndzone_action.update.call(null, {
          items: ctx2[0],
          flipDurationMs,
          dragDisabled: ctx2[1],
          type: "table_headers"
        });
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(div);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].d();
      }
      mounted = false;
      run_all(dispose);
    }
  };
}
var flipDurationMs = 300;
function instance19($$self, $$props, $$invalidate) {
  const dispatch = createEventDispatcher();
  let { headers } = $$props;
  let items = headers.map((h) => {
    return { name: h, id: nanoid() };
  });
  let dragDisabled = false;
  function handleConsider(e) {
    const { items: newItems, info: { source, trigger } } = e.detail;
    $$invalidate(0, items = [...newItems]);
  }
  function handleFinalize(e) {
    const { items: newItems, info: { source } } = e.detail;
    $$invalidate(0, items = [...newItems]);
    dispatch("sorted", items);
  }
  const grip = (node) => {
    (0, import_obsidian11.setIcon)(node, "dropzone-grip");
  };
  function startDrag(e) {
    e.preventDefault();
    $$invalidate(1, dragDisabled = false);
  }
  const trash = (evt) => {
    $$invalidate(0, items = items.filter((b) => b.id != evt.id));
    dispatch("sorted", items);
  };
  const del = (node) => {
    new import_obsidian11.ExtraButtonComponent(node).setIcon("cross-in-box");
  };
  const func = (x) => x.id !== SHADOW_PLACEHOLDER_ITEM_ID;
  const click_handler = (header) => trash(header);
  $$self.$$set = ($$props2) => {
    if ("headers" in $$props2)
      $$invalidate(6, headers = $$props2.headers);
  };
  return [
    items,
    dragDisabled,
    handleConsider,
    handleFinalize,
    trash,
    del,
    headers,
    func,
    click_handler
  ];
}
var TableHeaders = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance19, create_fragment21, safe_not_equal, { headers: 6 }, add_css19);
  }
};
var TableHeaders_default = TableHeaders;

// src/settings/ui/block.ts
var BlockModal = class extends import_obsidian12.Modal {
  constructor(plugin, block) {
    super(plugin.app);
    this.plugin = plugin;
    this.advanced = this.plugin.settings.showAdvanced;
    if (block)
      this.block = (0, import_fast_copy2.default)(block);
    this.containerEl.addClass("statblock-edit-block");
  }
  get group() {
    return ["group", "inline"].contains(this.block.type);
  }
  onOpen() {
    this.titleEl.setText("Edit Block");
    this.display();
  }
  buildProperties(el) {
    el.empty();
    if (!this.group) {
      if (this.block.type == "subheading") {
        const container = el.createDiv(
          "statblock-additional-container"
        );
        let tempProp = "";
        new import_obsidian12.Setting(container).setHeading().setName("Link Monster Properties").addText(
          (t) => t.setPlaceholder("property").setValue(tempProp).onChange((v) => tempProp = v)
        ).addExtraButton(
          (b) => b.setIcon("plus-with-circle").onClick(() => {
            if (!tempProp || !tempProp.length) {
              new import_obsidian12.Notice(
                "A valid property must be supplied."
              );
              return;
            }
            this.block.properties.push(
              tempProp
            );
            this.buildProperties(el);
          })
        );
        const additional = container.createDiv("additional");
        for (const property of this.block.properties) {
          new import_obsidian12.Setting(additional).setName(property).addExtraButton(
            (b) => b.setIcon("trash").onClick(() => {
              this.block.properties = this.block.properties.filter(
                (p) => p != property
              );
              this.buildProperties(el);
            })
          );
        }
      } else {
        new import_obsidian12.Setting(el).setName("Link Monster Property").addText(
          (t) => t.setValue(this.block.properties[0]).onChange((v) => {
            this.block.properties[0] = v;
          })
        );
      }
      if (this.block.type == "property" || this.block.type == "saves") {
        new import_obsidian12.Setting(this.contentEl).setName("Display Text").setDesc("This text will be used for the property name.").addText((t) => {
          t.setValue(
            this.block.display
          ).onChange(
            (v) => this.block.display = v
          );
        });
      }
      if (this.block.type == "traits" || this.block.type == "text") {
        new import_obsidian12.Setting(this.contentEl).setName("Use Monster Property for Heading").setDesc(
          "The Section heading will be set to the value of the specified property."
        ).addToggle((t) => {
          t.setValue(
            this.block.headingProp
          ).onChange((v) => {
            this.block.headingProp = v;
            this.display();
          });
        });
        new import_obsidian12.Setting(this.contentEl).setName("Section Heading").setDesc(
          this.block.headingProp ? "The section will use this property for the section heading. If the property does not exist or is blank, the section heading will not appear." : "This text will be used for the section heading. Can be left blank."
        ).addText((t) => {
          t.setValue(this.block.heading).onChange(
            (v) => this.block.heading = v
          );
        });
      }
      if (this.block.type == "table") {
        const container = el.createDiv(
          "statblock-additional-container"
        );
        let tempProp = "";
        new import_obsidian12.Setting(container).setHeading().setName("Table Headers").addText(
          (t) => t.setPlaceholder("header").setValue(tempProp).onChange((v) => tempProp = v)
        ).addExtraButton(
          (b) => b.setIcon("plus-with-circle").onClick(() => {
            if (!tempProp || !tempProp.length) {
              new import_obsidian12.Notice(
                "A valid property must be supplied."
              );
              return;
            }
            this.block.headers.push(
              tempProp
            );
            this.buildProperties(el);
          })
        );
        const additional = container.createDiv("additional");
        new TableHeaders_default({
          target: additional,
          props: {
            headers: this.block.headers
          }
        }).$on("sorted", (e) => {
          this.block.headers = [
            ...e.detail?.map((v) => v.name) ?? []
          ];
        });
        new import_obsidian12.Setting(el).setName("Calculate Modifiers").setDesc(
          "The block will not attempt to calculate modifiers for table values."
        ).addToggle((t) => {
          t.setValue(
            this.block.calculate
          ).onChange((v) => {
            this.block.calculate = v;
          });
        });
      }
      if (!this.advanced)
        return;
      if (MarkdownTypes.includes(this.block.type)) {
        new import_obsidian12.Setting(el).setName("Render as Markdown").setDesc(
          createFragment((e) => {
            e.createSpan({
              text: "The block will attempt to render as markdown."
            });
            e.createEl("br");
            e.createEl("strong", {
              text: "Cannot be used with the Dice option."
            });
          })
        ).addToggle((t) => {
          t.setValue(this.block.markdown).onChange(
            (v) => {
              this.block.markdown = v;
              if (v) {
                this.block.dice = false;
                this.display();
              }
            }
          );
        });
      }
      if (this.block.type == "text") {
        new import_obsidian12.Setting(el).setHeading().setName("Text to Show").setDesc(
          createFragment((e) => {
            e.createSpan({ text: "The block will " });
            e.createEl("strong", { text: "always" });
            e.createSpan({
              text: " display the text entered here."
            });
          })
        );
        new import_obsidian12.TextAreaComponent(el).setValue(this.block.text).onChange((v) => {
          this.block.text = v;
        });
      }
      if (this.block.type == "property") {
        new import_obsidian12.Setting(el).setHeading().setName("Callback").setDesc(
          createFragment((e) => {
            e.createSpan({
              text: "The block will run the callback and use the returned string as the property."
            });
            e.createEl("br");
            e.createSpan({
              text: "The callback will receive the "
            });
            e.createEl("code", { text: "monster" });
            e.createSpan({ text: " parameter." });
          })
        );
        new import_obsidian12.TextAreaComponent(el).setValue(this.block.callback).onChange((v) => {
          this.block.callback = v;
        });
      }
      if (this.block.type == "table") {
        new import_obsidian12.Setting(el).setHeading().setName("Ability Modifier Calculation").setDesc(
          createFragment((e) => {
            e.createSpan({
              text: "Allows a custom modifier for the stat."
            });
            e.createEl("br");
            e.createSpan({ text: "Variable " });
            e.createEl("code", { text: "stat" });
            e.createSpan({
              text: "is accessible, use this to calculate the modifier."
            });
          })
        );
        new import_obsidian12.TextAreaComponent(el).setValue(this.block.modifier).onChange((v) => {
          this.block.modifier = v;
        });
      }
    }
  }
  buildSeparator(el) {
    el.empty();
    if (this.block.type == "subheading") {
      new import_obsidian12.Setting(el).setName("Separator").setDesc("Text separating properties").addText((t) => {
        if (this.block.type == "subheading") {
          if (!this.block.separator) {
            this.block.separator = " ";
          }
          t.setValue(this.block.separator).onChange((v) => {
            if (this.block.type == "subheading") {
              this.block.separator = v;
            }
          });
        }
      });
    }
  }
  buildConditions(el) {
    el.empty();
    new import_obsidian12.Setting(el).setName("Conditional").setDesc(
      "The block will not be added if the associated properties are not present."
    ).addToggle((t) => {
      t.setValue(this.block.conditioned).onChange((v) => {
        this.block.conditioned = v;
        this.buildConditions(el);
      });
    });
    if (!this.block.conditioned && !this.group) {
      new import_obsidian12.Setting(el).setName("Fallback").setDesc("If not present, this text will be displayed.").addText((t) => {
        if (!this.block.fallback) {
          this.block.fallback = "-";
        }
        t.setValue(this.block.fallback).onChange((v) => {
          this.block.fallback = v;
        });
      });
    }
    new import_obsidian12.Setting(el).setName("Has Rule").setDesc(
      "If present, the block will have a horizontal rule placed after it."
    ).addToggle((t) => {
      t.setValue(this.block.hasRule).onChange(
        (v) => this.block.hasRule = v
      );
    });
  }
  buildDice(el) {
    el.empty();
    if (!this.group && this.plugin.canUseDiceRoller) {
      new import_obsidian12.Setting(el).setName("Parse for Dice").setDesc(
        "The plugin will attempt to add dice rollers as specified."
      ).addToggle(
        (t) => t.setValue(this.block.dice).onChange((v) => {
          this.block.dice = v;
          this.buildDice(el);
        })
      );
      if (this.block.dice) {
        new import_obsidian12.Setting(el.createDiv()).setName("Link Dice to Property").setDesc(
          "The dice roller will parse this property instead of the original."
        ).addText((t) => {
          t.setValue(this.block.diceProperty).onChange((v) => {
            this.block.diceProperty = v;
          });
        });
      }
    }
    if (!this.advanced)
      return;
    new import_obsidian12.Setting(el).setHeading().setName("Dice Callback").setDesc(
      createFragment((e) => {
        e.createSpan({
          text: "The block will run the callback and use the returned values for the dice strings."
        });
        e.createEl("br");
        e.createSpan({
          text: "The callback will receive the "
        });
        e.createEl("code", { text: "monster" });
        e.createSpan({ text: " and " });
        e.createEl("code", { text: "property" });
        e.createSpan({ text: "parameters." });
      })
    );
    new import_obsidian12.TextAreaComponent(el).setValue(this.block.diceCallback).onChange((v) => {
      this.block.diceCallback = v;
    });
  }
  async display() {
    this.contentEl.empty();
    new import_obsidian12.Setting(this.contentEl).setName("Show Advanced Options").addToggle((t) => {
      t.setValue(
        this.advanced ?? this.plugin.settings.showAdvanced
      ).onChange((v) => {
        this.advanced = v;
        this.display();
      });
    });
    this.buildProperties(this.contentEl.createDiv());
    this.buildSeparator(this.contentEl.createDiv());
    this.buildConditions(this.contentEl.createDiv());
    this.buildDice(this.contentEl.createDiv());
    this.buildButtons(this.contentEl.createDiv());
  }
  buildButtons(el) {
    el.empty();
    new import_obsidian12.Setting(el).addButton(
      (b) => b.setCta().setIcon("checkmark").setTooltip("Save").onClick(() => {
        this.saved = true;
        this.close();
      })
    ).addExtraButton(
      (b) => b.setIcon("cross").setTooltip("Cancel").onClick(() => {
        this.close();
      })
    );
  }
  buildProperty(el) {
  }
};

// src/settings/ui/Block.svelte
function add_css20(target) {
  append_styles(target, "svelte-e4nza4", ".statblock-creator-container.svelte-e4nza4.svelte-e4nza4{display:flex;justify-content:space-between;width:100%;height:100%}body:not(.is-mobile) .statblock-creator-container.svelte-e4nza4:not(:hover)>.icons.svelte-e4nza4{visibility:hidden}.statblock-creator-block.svelte-e4nza4.svelte-e4nza4{width:100%}.icons.svelte-e4nza4.svelte-e4nza4{display:flex;justify-content:flex-end}.statblock-creator-container.svelte-e4nza4 .icons.svelte-e4nza4{align-items:center}.icon.svelte-e4nza4:not(:first-child) .clickable-icon{margin-left:0}");
}
function create_key_block3(ctx) {
  let div;
  let propertyblock;
  let current;
  propertyblock = new PropertyBlock_default({ props: { block: ctx[0] } });
  return {
    c() {
      div = element("div");
      create_component(propertyblock.$$.fragment);
      attr(div, "class", "statblock-creator-block svelte-e4nza4");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      mount_component(propertyblock, div, null);
      current = true;
    },
    p(ctx2, dirty) {
      const propertyblock_changes = {};
      if (dirty & 1)
        propertyblock_changes.block = ctx2[0];
      propertyblock.$set(propertyblock_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(propertyblock.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(propertyblock.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      destroy_component(propertyblock);
    }
  };
}
function create_fragment22(ctx) {
  let div3;
  let previous_key = ctx[0];
  let t0;
  let div2;
  let div0;
  let edit_action;
  let t1;
  let div1;
  let trash_action;
  let current;
  let mounted;
  let dispose;
  let key_block = create_key_block3(ctx);
  return {
    c() {
      div3 = element("div");
      key_block.c();
      t0 = space();
      div2 = element("div");
      div0 = element("div");
      t1 = space();
      div1 = element("div");
      attr(div0, "class", "icon svelte-e4nza4");
      attr(div1, "class", "icon svelte-e4nza4");
      attr(div2, "class", "icons svelte-e4nza4");
      attr(div3, "class", "statblock-creator-container svelte-e4nza4");
    },
    m(target, anchor) {
      insert(target, div3, anchor);
      key_block.m(div3, null);
      append(div3, t0);
      append(div3, div2);
      append(div2, div0);
      append(div2, t1);
      append(div2, div1);
      current = true;
      if (!mounted) {
        dispose = [
          action_destroyer(edit_action = ctx[1].call(null, div0)),
          action_destroyer(trash_action = ctx[2].call(null, div1))
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & 1 && safe_not_equal(previous_key, previous_key = ctx2[0])) {
        group_outros();
        transition_out(key_block, 1, 1, noop);
        check_outros();
        key_block = create_key_block3(ctx2);
        key_block.c();
        transition_in(key_block, 1);
        key_block.m(div3, t0);
      } else {
        key_block.p(ctx2, dirty);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(key_block);
      current = true;
    },
    o(local) {
      transition_out(key_block);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div3);
      key_block.d(detaching);
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance20($$self, $$props, $$invalidate) {
  let { block } = $$props;
  let { plugin } = $$props;
  const dispatch = createEventDispatcher();
  const editBlock = () => {
    const modal = new BlockModal(plugin, block);
    modal.onClose = () => {
      if (!modal.saved)
        return;
      dispatch("edited", modal.block);
    };
    modal.open();
  };
  const edit = (node) => {
    new import_obsidian13.ExtraButtonComponent(node).setIcon("pencil").setTooltip("Edit Block").onClick(() => {
      editBlock();
    });
  };
  const trash = (node) => {
    new import_obsidian13.ExtraButtonComponent(node).setIcon("trash").setTooltip("Delete Block").onClick(() => dispatch("trash", block));
  };
  $$self.$$set = ($$props2) => {
    if ("block" in $$props2)
      $$invalidate(0, block = $$props2.block);
    if ("plugin" in $$props2)
      $$invalidate(3, plugin = $$props2.plugin);
  };
  return [block, edit, trash, plugin];
}
var Block = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance20, create_fragment22, safe_not_equal, { block: 0, plugin: 3 }, add_css20);
  }
};
var Block_default = Block;

// src/settings/ui/Creator.svelte
var import_obsidian14 = require("obsidian");
function add_css21(target) {
  append_styles(target, "svelte-1qfwxfu", "body:not(.is-mobile) .creator-zone.svelte-1qfwxfu:not(.nested){max-width:75vw;max-height:65vh;overflow:auto}.inline.svelte-1qfwxfu{display:flex;justify-content:space-between}.block.svelte-1qfwxfu{display:flex;justify-content:flex-start;align-items:center}.item.svelte-1qfwxfu{display:flex;flex-flow:column;width:100%;padding:2px;margin:2px}.group.svelte-1qfwxfu{display:grid;grid-template-columns:1fr;border:2px dashed grey;min-height:2rem}.dropdown-icon.svelte-1qfwxfu{align-self:flex-start}.inline.svelte-1qfwxfu{display:inline-flex;width:100%;height:100%}.icon.svelte-1qfwxfu{display:flex}");
}
function get_each_context8(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[20] = list[i];
  child_ctx[21] = list;
  child_ctx[22] = i;
  return child_ctx;
}
function create_else_block7(ctx) {
  let div;
  let creator;
  let updating_blocks;
  let updating_plugin;
  let t;
  let previous_key = ctx[20];
  let key_block_anchor;
  let current;
  function creator_blocks_binding(value) {
    ctx[15](value, ctx[20]);
  }
  function creator_plugin_binding(value) {
    ctx[16](value);
  }
  let creator_props = {
    inline: ctx[20].type == "inline"
  };
  if (ctx[20].nested !== void 0) {
    creator_props.blocks = ctx[20].nested;
  }
  if (ctx[1] !== void 0) {
    creator_props.plugin = ctx[1];
  }
  creator = new Creator({ props: creator_props });
  binding_callbacks.push(() => bind(creator, "blocks", creator_blocks_binding));
  binding_callbacks.push(() => bind(creator, "plugin", creator_plugin_binding));
  let key_block = create_key_block4(ctx);
  return {
    c() {
      div = element("div");
      create_component(creator.$$.fragment);
      t = space();
      key_block.c();
      key_block_anchor = empty();
      attr(div, "class", "item svelte-1qfwxfu");
      toggle_class(div, "group", ctx[20].type == "group" || ctx[20].type == "inline");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      mount_component(creator, div, null);
      insert(target, t, anchor);
      key_block.m(target, anchor);
      insert(target, key_block_anchor, anchor);
      current = true;
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      const creator_changes = {};
      if (dirty & 9)
        creator_changes.inline = ctx[20].type == "inline";
      if (!updating_blocks && dirty & 9) {
        updating_blocks = true;
        creator_changes.blocks = ctx[20].nested;
        add_flush_callback(() => updating_blocks = false);
      }
      if (!updating_plugin && dirty & 2) {
        updating_plugin = true;
        creator_changes.plugin = ctx[1];
        add_flush_callback(() => updating_plugin = false);
      }
      creator.$set(creator_changes);
      if (dirty & 9) {
        toggle_class(div, "group", ctx[20].type == "group" || ctx[20].type == "inline");
      }
      if (dirty & 9 && safe_not_equal(previous_key, previous_key = ctx[20])) {
        key_block.d(1);
        key_block = create_key_block4(ctx);
        key_block.c();
        key_block.m(key_block_anchor.parentNode, key_block_anchor);
      } else {
        key_block.p(ctx, dirty);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(creator.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(creator.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      destroy_component(creator);
      if (detaching)
        detach(t);
      if (detaching)
        detach(key_block_anchor);
      key_block.d(detaching);
    }
  };
}
function create_if_block_19(ctx) {
  let div;
  let block;
  let current;
  block = new Block_default({
    props: {
      plugin: ctx[1],
      block: ctx[20]
    }
  });
  block.$on("trash", ctx[13]);
  block.$on("edited", ctx[14]);
  return {
    c() {
      div = element("div");
      create_component(block.$$.fragment);
      attr(div, "class", "item svelte-1qfwxfu");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      mount_component(block, div, null);
      current = true;
    },
    p(ctx2, dirty) {
      const block_changes = {};
      if (dirty & 2)
        block_changes.plugin = ctx2[1];
      if (dirty & 9)
        block_changes.block = ctx2[20];
      block.$set(block_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(block.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(block.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      destroy_component(block);
    }
  };
}
function create_key_block4(ctx) {
  let div;
  let dropdown_action;
  let mounted;
  let dispose;
  return {
    c() {
      div = element("div");
      attr(div, "class", "dropdown-icon svelte-1qfwxfu");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      if (!mounted) {
        dispose = action_destroyer(dropdown_action = ctx[11].call(null, div, ctx[20]));
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (dropdown_action && is_function(dropdown_action.update) && dirty & 9)
        dropdown_action.update.call(null, ctx[20]);
    },
    d(detaching) {
      if (detaching)
        detach(div);
      mounted = false;
      dispose();
    }
  };
}
function create_if_block16(ctx) {
  let div;
  let rule;
  let current;
  rule = new Rule_default({});
  return {
    c() {
      div = element("div");
      create_component(rule.$$.fragment);
      attr(div, "aria-label", "Block Has Rule");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      mount_component(rule, div, null);
      current = true;
    },
    i(local) {
      if (current)
        return;
      transition_in(rule.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(rule.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      destroy_component(rule);
    }
  };
}
function create_each_block8(key_1, ctx) {
  let div3;
  let div2;
  let div1;
  let div0;
  let div0_style_value;
  let grip_action;
  let t0;
  let current_block_type_index;
  let if_block0;
  let t1;
  let t2;
  let rect;
  let stop_animation = noop;
  let current;
  let mounted;
  let dispose;
  const if_block_creators = [create_if_block_19, create_else_block7];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (ctx2[20].type != "group" && ctx2[20].type != "inline")
      return 0;
    return 1;
  }
  current_block_type_index = select_block_type(ctx, -1);
  if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  let if_block1 = ctx[20].hasRule && create_if_block16(ctx);
  return {
    key: key_1,
    first: null,
    c() {
      div3 = element("div");
      div2 = element("div");
      div1 = element("div");
      div0 = element("div");
      t0 = space();
      if_block0.c();
      t1 = space();
      if (if_block1)
        if_block1.c();
      t2 = space();
      attr(div0, "class", "icon svelte-1qfwxfu");
      attr(div0, "style", div0_style_value = ctx[4] ? "cursor: grab" : "cursor: grabbing");
      attr(div1, "class", "block svelte-1qfwxfu");
      attr(div2, "class", "block-container");
      this.first = div3;
    },
    m(target, anchor) {
      insert(target, div3, anchor);
      append(div3, div2);
      append(div2, div1);
      append(div1, div0);
      append(div1, t0);
      if_blocks[current_block_type_index].m(div1, null);
      append(div2, t1);
      if (if_block1)
        if_block1.m(div2, null);
      append(div3, t2);
      current = true;
      if (!mounted) {
        dispose = [
          action_destroyer(grip_action = ctx[7].call(null, div0)),
          listen(div0, "mousedown", ctx[8]),
          listen(div0, "touchstart", ctx[8])
        ];
        mounted = true;
      }
    },
    p(new_ctx, dirty) {
      ctx = new_ctx;
      if (!current || dirty & 16 && div0_style_value !== (div0_style_value = ctx[4] ? "cursor: grab" : "cursor: grabbing")) {
        attr(div0, "style", div0_style_value);
      }
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx, dirty);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block0 = if_blocks[current_block_type_index];
        if (!if_block0) {
          if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
          if_block0.c();
        } else {
          if_block0.p(ctx, dirty);
        }
        transition_in(if_block0, 1);
        if_block0.m(div1, null);
      }
      if (ctx[20].hasRule) {
        if (if_block1) {
          if (dirty & 9) {
            transition_in(if_block1, 1);
          }
        } else {
          if_block1 = create_if_block16(ctx);
          if_block1.c();
          transition_in(if_block1, 1);
          if_block1.m(div2, null);
        }
      } else if (if_block1) {
        group_outros();
        transition_out(if_block1, 1, 1, () => {
          if_block1 = null;
        });
        check_outros();
      }
    },
    r() {
      rect = div3.getBoundingClientRect();
    },
    f() {
      fix_position(div3);
      stop_animation();
    },
    a() {
      stop_animation();
      stop_animation = create_animation(div3, rect, flip, { duration: flipDurationMs2 });
    },
    i(local) {
      if (current)
        return;
      transition_in(if_block0);
      transition_in(if_block1);
      current = true;
    },
    o(local) {
      transition_out(if_block0);
      transition_out(if_block1);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div3);
      if_blocks[current_block_type_index].d();
      if (if_block1)
        if_block1.d();
      mounted = false;
      run_all(dispose);
    }
  };
}
function create_fragment23(ctx) {
  let div;
  let section;
  let each_blocks = [];
  let each_1_lookup = /* @__PURE__ */ new Map();
  let dndzone_action;
  let current;
  let mounted;
  let dispose;
  let each_value = ctx[0].filter(ctx[12]);
  const get_key = (ctx2) => ctx2[20].id;
  for (let i = 0; i < each_value.length; i += 1) {
    let child_ctx = get_each_context8(ctx, each_value, i);
    let key = get_key(child_ctx);
    each_1_lookup.set(key, each_blocks[i] = create_each_block8(key, child_ctx));
  }
  return {
    c() {
      div = element("div");
      section = element("section");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      attr(section, "class", "creator-zone svelte-1qfwxfu");
      toggle_class(section, "inline", ctx[2]);
      attr(div, "class", "creator");
    },
    m(target, anchor) {
      insert(target, div, anchor);
      append(div, section);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].m(section, null);
      }
      current = true;
      if (!mounted) {
        dispose = [
          action_destroyer(dndzone_action = dndzone$2.call(null, section, {
            items: ctx[0],
            flipDurationMs: flipDurationMs2,
            dragDisabled: ctx[4]
          })),
          listen(section, "consider", ctx[5]),
          listen(section, "finalize", ctx[6])
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & 1819) {
        each_value = ctx2[0].filter(ctx2[12]);
        group_outros();
        for (let i = 0; i < each_blocks.length; i += 1)
          each_blocks[i].r();
        each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx2, each_value, each_1_lookup, section, fix_and_outro_and_destroy_block, create_each_block8, null, get_each_context8);
        for (let i = 0; i < each_blocks.length; i += 1)
          each_blocks[i].a();
        check_outros();
      }
      if (dndzone_action && is_function(dndzone_action.update) && dirty & 17)
        dndzone_action.update.call(null, {
          items: ctx2[0],
          flipDurationMs: flipDurationMs2,
          dragDisabled: ctx2[4]
        });
      if (dirty & 4) {
        toggle_class(section, "inline", ctx2[2]);
      }
    },
    i(local) {
      if (current)
        return;
      for (let i = 0; i < each_value.length; i += 1) {
        transition_in(each_blocks[i]);
      }
      current = true;
    },
    o(local) {
      for (let i = 0; i < each_blocks.length; i += 1) {
        transition_out(each_blocks[i]);
      }
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div);
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].d();
      }
      mounted = false;
      run_all(dispose);
    }
  };
}
var flipDurationMs2 = 300;
function instance21($$self, $$props, $$invalidate) {
  const dispatch = createEventDispatcher();
  let { blocks = [] } = $$props;
  let { inline = false } = $$props;
  let { plugin } = $$props;
  let dragDisabled = true;
  function handleConsider(e) {
    const { items: newItems, info: { source, trigger } } = e.detail;
    $$invalidate(0, blocks = [...newItems]);
    if (source === SOURCES.KEYBOARD && trigger === TRIGGERS.DRAG_STOPPED) {
      $$invalidate(4, dragDisabled = true);
    }
  }
  function handleFinalize(e) {
    const { items: newItems, info: { source } } = e.detail;
    $$invalidate(0, blocks = [...newItems]);
    dispatch("sorted", blocks);
    if (source === SOURCES.POINTER) {
      $$invalidate(4, dragDisabled = true);
    }
  }
  const grip = (node) => {
    (0, import_obsidian14.setIcon)(node, "dropzone-grip");
  };
  function startDrag(e) {
    e.preventDefault();
    $$invalidate(4, dragDisabled = false);
  }
  const trash = (evt) => {
    $$invalidate(0, blocks = blocks.filter((b) => b.id != evt.id));
    dispatch("sorted", blocks);
  };
  const edited = (e) => {
    const original = blocks.findIndex((v) => v.id == e.id);
    blocks.splice(original, 1, e);
    $$invalidate(0, blocks);
  };
  const editBlock = (block) => {
    const modal = new BlockModal(plugin, block);
    modal.onClose = () => {
      if (!modal.saved)
        return;
      edited(modal.block);
    };
    modal.open();
  };
  const add = async (block, evt) => {
    if (!("nested" in block))
      return;
    const gen = await generate(plugin, evt);
    if (gen) {
      block.nested = [...block.nested, gen];
      $$invalidate(0, blocks);
      dispatch("sorted", blocks);
    }
  };
  const dropdown = (node, block) => {
    new import_obsidian14.ExtraButtonComponent(node).setIcon("vertical-three-dots");
    node.onclick = (evt) => {
      new import_obsidian14.Menu(plugin.app).addItem((item) => {
        item.setTitle("Add").setIcon("plus-with-circle").onClick((e) => add(block, e));
      }).addItem((item) => item.setTitle("Edit").setIcon("pencil").onClick(() => {
        editBlock(block);
      })).addItem((item) => item.setTitle("Delete").setIcon("trash").onClick(() => trash(block))).showAtMouseEvent(evt);
    };
  };
  const func = (x) => x.id !== SHADOW_PLACEHOLDER_ITEM_ID;
  const trash_handler = (e) => trash(e.detail);
  const edited_handler = (e) => edited(e.detail);
  function creator_blocks_binding(value, block) {
    if ($$self.$$.not_equal(block.nested, value)) {
      block.nested = value;
      $$invalidate(0, blocks);
    }
  }
  function creator_plugin_binding(value) {
    plugin = value;
    $$invalidate(1, plugin);
  }
  $$self.$$set = ($$props2) => {
    if ("blocks" in $$props2)
      $$invalidate(0, blocks = $$props2.blocks);
    if ("inline" in $$props2)
      $$invalidate(2, inline = $$props2.inline);
    if ("plugin" in $$props2)
      $$invalidate(1, plugin = $$props2.plugin);
  };
  return [
    blocks,
    plugin,
    inline,
    SHADOW_PLACEHOLDER_ITEM_ID,
    dragDisabled,
    handleConsider,
    handleFinalize,
    grip,
    startDrag,
    trash,
    edited,
    dropdown,
    func,
    trash_handler,
    edited_handler,
    creator_blocks_binding,
    creator_plugin_binding
  ];
}
var Creator = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance21, create_fragment23, safe_not_equal, { blocks: 0, inline: 2, plugin: 1 }, add_css21);
  }
};
var Creator_default = Creator;

// src/settings/StatblockCreator.svelte
function add_css22(target) {
  append_styles(target, "svelte-fktbyg", ".top.svelte-fktbyg{display:flex;align-items:center;justify-content:space-between}.name.svelte-fktbyg{display:flex;align-items:center}.name.svelte-fktbyg .buttons{display:flex;justify-content:flex-end;align-items:center}.bottom.svelte-fktbyg{display:flex;justify-content:flex-end;align-items:center;margin-top:0.5rem}");
}
function create_key_block5(ctx) {
  let creator;
  let current;
  creator = new Creator_default({
    props: {
      blocks: ctx[2],
      plugin: ctx[1]
    }
  });
  creator.$on("sorted", ctx[3]);
  return {
    c() {
      create_component(creator.$$.fragment);
    },
    m(target, anchor) {
      mount_component(creator, target, anchor);
      current = true;
    },
    p(ctx2, dirty) {
      const creator_changes = {};
      if (dirty & 4)
        creator_changes.blocks = ctx2[2];
      if (dirty & 2)
        creator_changes.plugin = ctx2[1];
      creator.$set(creator_changes);
    },
    i(local) {
      if (current)
        return;
      transition_in(creator.$$.fragment, local);
      current = true;
    },
    o(local) {
      transition_out(creator.$$.fragment, local);
      current = false;
    },
    d(detaching) {
      destroy_component(creator, detaching);
    }
  };
}
function create_fragment24(ctx) {
  let div2;
  let div0;
  let name_action;
  let t0;
  let div1;
  let addButton_action;
  let t1;
  let div3;
  let previous_key = ctx[0];
  let t2;
  let div6;
  let div4;
  let save_action;
  let t3;
  let div5;
  let cancel_action;
  let current;
  let mounted;
  let dispose;
  let key_block = create_key_block5(ctx);
  return {
    c() {
      div2 = element("div");
      div0 = element("div");
      t0 = space();
      div1 = element("div");
      t1 = space();
      div3 = element("div");
      key_block.c();
      t2 = space();
      div6 = element("div");
      div4 = element("div");
      t3 = space();
      div5 = element("div");
      attr(div0, "class", "name svelte-fktbyg");
      attr(div1, "class", "add");
      attr(div2, "class", "top svelte-fktbyg");
      attr(div3, "class", "creator-container");
      attr(div4, "class", "save");
      attr(div5, "class", "cancel");
      attr(div6, "class", "bottom svelte-fktbyg");
    },
    m(target, anchor) {
      insert(target, div2, anchor);
      append(div2, div0);
      append(div2, t0);
      append(div2, div1);
      insert(target, t1, anchor);
      insert(target, div3, anchor);
      key_block.m(div3, null);
      insert(target, t2, anchor);
      insert(target, div6, anchor);
      append(div6, div4);
      append(div6, t3);
      append(div6, div5);
      current = true;
      if (!mounted) {
        dispose = [
          action_destroyer(name_action = ctx[4].call(null, div0)),
          action_destroyer(addButton_action = ctx[8].call(null, div1)),
          listen(div1, "click", ctx[9]),
          action_destroyer(save_action = ctx[5].call(null, div4)),
          action_destroyer(cancel_action = ctx[6].call(null, div5))
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & 1 && safe_not_equal(previous_key, previous_key = ctx2[0])) {
        group_outros();
        transition_out(key_block, 1, 1, noop);
        check_outros();
        key_block = create_key_block5(ctx2);
        key_block.c();
        transition_in(key_block, 1);
        key_block.m(div3, null);
      } else {
        key_block.p(ctx2, dirty);
      }
    },
    i(local) {
      if (current)
        return;
      transition_in(key_block);
      current = true;
    },
    o(local) {
      transition_out(key_block);
      current = false;
    },
    d(detaching) {
      if (detaching)
        detach(div2);
      if (detaching)
        detach(t1);
      if (detaching)
        detach(div3);
      key_block.d(detaching);
      if (detaching)
        detach(t2);
      if (detaching)
        detach(div6);
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance22($$self, $$props, $$invalidate) {
  let items;
  let { layout } = $$props;
  let { plugin } = $$props;
  const getIds = (items2) => {
    return [
      ...items2.map((item) => {
        if ("nested" in item) {
          return [item.id, getIds(item.nested)].flat();
        }
        return [item.id];
      }).flat()
    ];
  };
  const dispatch = createEventDispatcher();
  const handleSorted = (e) => {
    $$invalidate(0, layout.blocks = [...e.detail], layout);
  };
  let editingName = false;
  const name = (node) => {
    node.empty();
    if (editingName) {
      let temp = layout.name;
      new import_obsidian15.TextComponent(node).setValue(temp).onChange((v) => {
        temp = v;
      });
      const buttons = node.createDiv("buttons");
      new import_obsidian15.ExtraButtonComponent(buttons).setIcon("checkmark").setTooltip("Save").onClick(() => {
        editingName = false;
        $$invalidate(0, layout.name = temp, layout);
        name(node);
      });
      new import_obsidian15.ExtraButtonComponent(buttons).setIcon("cross-in-box").setTooltip("Cancel").onClick(() => {
        editingName = false;
        name(node);
      });
    } else {
      node.createEl("h3", { text: layout.name });
      new import_obsidian15.ExtraButtonComponent(node.createDiv("buttons")).setIcon("pencil").setTooltip("Edit Name").onClick(() => {
        editingName = true;
        name(node);
      });
    }
  };
  const save = (node) => {
    new import_obsidian15.ButtonComponent(node).setIcon("checkmark").setCta().setTooltip("Save").onClick(() => {
      dispatch("saved");
    });
  };
  const cancel = (node) => {
    new import_obsidian15.ExtraButtonComponent(node).setIcon("cross").setTooltip("Cancel").onClick(() => {
      dispatch("cancel");
    });
  };
  const add = async (e) => {
    const block = await generate(plugin, e);
    if (block)
      $$invalidate(0, layout.blocks = [...layout.blocks, block], layout);
  };
  const addButton = (node) => {
    new import_obsidian15.ExtraButtonComponent(node).setIcon("plus-with-circle").setTooltip("Add Block");
  };
  const click_handler = (evt) => add(evt);
  $$self.$$set = ($$props2) => {
    if ("layout" in $$props2)
      $$invalidate(0, layout = $$props2.layout);
    if ("plugin" in $$props2)
      $$invalidate(1, plugin = $$props2.plugin);
  };
  $$self.$$.update = () => {
    if ($$self.$$.dirty & 1) {
      $:
        $$invalidate(2, items = layout.blocks);
    }
  };
  return [
    layout,
    plugin,
    items,
    handleSorted,
    name,
    save,
    cancel,
    add,
    addButton,
    click_handler
  ];
}
var StatblockCreator = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance22, create_fragment24, safe_not_equal, { layout: 0, plugin: 1 }, add_css22);
  }
};
var StatblockCreator_default = StatblockCreator;

// src/settings/suggester.ts
var import_obsidian18 = require("obsidian");

// src/settings/modal.ts
var import_obsidian17 = require("obsidian");

// src/settings/EditMonster.svelte
var import_obsidian16 = require("obsidian");
function add_css23(target) {
  append_styles(target, "svelte-1m3i208", ".top-level.svelte-1m3i208.svelte-1m3i208{display:flex;flex-flow:column nowrap}textarea.svelte-1m3i208.svelte-1m3i208{flex-grow:1;height:500px;max-height:50vh}.json.svelte-1m3i208.svelte-1m3i208{margin-bottom:1rem;display:flex;justify-content:flex-start;align-items:center}.json.svelte-1m3i208>div.svelte-1m3i208{border-radius:4px;margin:5px 0px}.active.svelte-1m3i208.svelte-1m3i208{background-color:var(--background-secondary-alt)}.buttons.svelte-1m3i208.svelte-1m3i208{margin-top:1rem;display:flex;justify-content:flex-end;align-items:center}");
}
function create_key_block6(ctx) {
  let textarea;
  let textarea_value_value;
  let mounted;
  let dispose;
  return {
    c() {
      textarea = element("textarea");
      textarea.value = textarea_value_value = ctx[6]();
      attr(textarea, "class", "svelte-1m3i208");
    },
    m(target, anchor) {
      insert(target, textarea, anchor);
      ctx[11](textarea);
      if (!mounted) {
        dispose = listen(textarea, "blur", ctx[12]);
        mounted = true;
      }
    },
    p: noop,
    d(detaching) {
      if (detaching)
        detach(textarea);
      ctx[11](null);
      mounted = false;
      dispose();
    }
  };
}
function create_fragment25(ctx) {
  let div7;
  let h2;
  let t1;
  let div3;
  let div2;
  let div0;
  let yaml_action;
  let t2;
  let div1;
  let json_action;
  let t3;
  let previous_key = ctx[0];
  let t4;
  let div6;
  let div4;
  let save_action;
  let t5;
  let div5;
  let cancel_action;
  let mounted;
  let dispose;
  let key_block = create_key_block6(ctx);
  return {
    c() {
      div7 = element("div");
      h2 = element("h2");
      h2.textContent = "Edit Monster";
      t1 = space();
      div3 = element("div");
      div2 = element("div");
      div0 = element("div");
      t2 = space();
      div1 = element("div");
      t3 = space();
      key_block.c();
      t4 = space();
      div6 = element("div");
      div4 = element("div");
      t5 = space();
      div5 = element("div");
      attr(div0, "class", "svelte-1m3i208");
      toggle_class(div0, "active", !ctx[0]);
      attr(div1, "class", "svelte-1m3i208");
      toggle_class(div1, "active", ctx[0]);
      attr(div2, "class", "json svelte-1m3i208");
      attr(div3, "class", "top-level svelte-1m3i208");
      attr(div6, "class", "buttons svelte-1m3i208");
      attr(div7, "class", "edit-monster-modal");
    },
    m(target, anchor) {
      insert(target, div7, anchor);
      append(div7, h2);
      append(div7, t1);
      append(div7, div3);
      append(div3, div2);
      append(div2, div0);
      append(div2, t2);
      append(div2, div1);
      append(div3, t3);
      key_block.m(div3, null);
      append(div7, t4);
      append(div7, div6);
      append(div6, div4);
      append(div6, t5);
      append(div6, div5);
      if (!mounted) {
        dispose = [
          action_destroyer(yaml_action = ctx[3].call(null, div0)),
          listen(div0, "click", ctx[9]),
          action_destroyer(json_action = ctx[2].call(null, div1)),
          listen(div1, "click", ctx[10]),
          action_destroyer(save_action = ctx[4].call(null, div4)),
          action_destroyer(cancel_action = ctx[5].call(null, div5))
        ];
        mounted = true;
      }
    },
    p(ctx2, [dirty]) {
      if (dirty & 1) {
        toggle_class(div0, "active", !ctx2[0]);
      }
      if (dirty & 1) {
        toggle_class(div1, "active", ctx2[0]);
      }
      if (dirty & 1 && safe_not_equal(previous_key, previous_key = ctx2[0])) {
        key_block.d(1);
        key_block = create_key_block6(ctx2);
        key_block.c();
        key_block.m(div3, null);
      } else {
        key_block.p(ctx2, dirty);
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(div7);
      key_block.d(detaching);
      mounted = false;
      run_all(dispose);
    }
  };
}
function instance23($$self, $$props, $$invalidate) {
  const dispatch = createEventDispatcher();
  let { monster = {} } = $$props;
  let useJson = false;
  let textArea;
  const json = (node) => {
    new import_obsidian16.ExtraButtonComponent(node).setIcon("code-glyph").setTooltip("JSON");
  };
  const yaml = (node) => {
    new import_obsidian16.ExtraButtonComponent(node).setIcon("lines-of-text").setTooltip("YAML");
  };
  const save = (node) => {
    new import_obsidian16.ButtonComponent(node).setIcon("checkmark").setTooltip("Save Changes").onClick(() => {
      if (useJson) {
        try {
          if (useJson) {
            $$invalidate(8, monster = JSON.parse(textArea.value));
          } else {
            $$invalidate(8, monster = (0, import_obsidian16.parseYaml)(textArea.value));
          }
        } catch (e) {
          console.error(e);
          new import_obsidian16.Notice(`There was an error saving the creaturen

${e.message}`);
          return;
        }
      }
      dispatch("save", monster);
    });
  };
  const cancel = (node) => {
    new import_obsidian16.ExtraButtonComponent(node).setIcon("cross").setTooltip("Cancel").onClick(() => {
      dispatch("cancel");
    });
  };
  function getMonsterText() {
    if (useJson)
      return JSON.stringify(monster, null, 2);
    if (!monster || !Object.keys(monster ?? {})?.length)
      return "";
    return (0, import_obsidian16.stringifyYaml)(monster).trim();
  }
  function setMonster() {
    try {
      if (useJson) {
        $$invalidate(8, monster = JSON.parse(textArea.value));
      } else {
        $$invalidate(8, monster = (0, import_obsidian16.parseYaml)(textArea.value));
      }
    } catch (e) {
      console.error(e);
    }
  }
  const click_handler = () => $$invalidate(0, useJson = false);
  const click_handler_1 = () => $$invalidate(0, useJson = true);
  function textarea_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      textArea = $$value;
      $$invalidate(1, textArea);
    });
  }
  const blur_handler = () => setMonster();
  $$self.$$set = ($$props2) => {
    if ("monster" in $$props2)
      $$invalidate(8, monster = $$props2.monster);
  };
  return [
    useJson,
    textArea,
    json,
    yaml,
    save,
    cancel,
    getMonsterText,
    setMonster,
    monster,
    click_handler,
    click_handler_1,
    textarea_binding,
    blur_handler
  ];
}
var EditMonster = class extends SvelteComponent {
  constructor(options) {
    super();
    init(this, options, instance23, create_fragment25, safe_not_equal, { monster: 8 }, add_css23);
  }
};
var EditMonster_default = EditMonster;

// src/settings/modal.ts
var EditMonsterModal = class extends import_obsidian17.Modal {
  constructor(plugin, monster = {}) {
    super(plugin.app);
    this.plugin = plugin;
    this.monster = monster;
  }
  onOpen() {
    this._instance = new EditMonster_default({
      target: this.contentEl,
      props: {
        monster: this.monster
      }
    });
    this._instance.$on("cancel", () => {
      this.close();
    });
    this._instance.$on("save", async ({ detail }) => {
      if (!detail.name) {
        new import_obsidian17.Notice("Creatures must be given a name.");
        return;
      }
      await this.plugin.updateMonster(this.monster, detail);
      this.close();
    });
  }
  onClose() {
  }
  close() {
    if (this._instance)
      this._instance.$destroy();
    super.close();
  }
};

// src/settings/suggester.ts
var ViewMonsterModal = class extends import_obsidian18.Modal {
  constructor(plugin, monster) {
    super(plugin.app);
    this.plugin = plugin;
    this.monster = monster;
  }
  async display() {
    if (!import_obsidian18.Platform.isMobile) {
      this.contentEl.style.maxWidth = "85vw";
    }
    new StatBlockRenderer(
      this.contentEl,
      this.monster,
      this.plugin,
      false,
      null,
      this.plugin.defaultLayout
    );
  }
  onOpen() {
    this.display();
  }
};

// src/settings/settings.ts
var import_fast_copy3 = __toESM(require_fast_copy());

// inline-worker:__inline-worker
function inlineWorker(scriptText) {
  let blob = new Blob([scriptText], { type: "text/javascript" });
  let url = URL.createObjectURL(blob);
  let worker = new Worker(url);
  URL.revokeObjectURL(url);
  return worker;
}

// src/importers/importer.worker.ts
function Worker2() {
  return inlineWorker('var yn=Object.create;var At=Object.defineProperty;var Rn=Object.getOwnPropertyDescriptor;var Cn=Object.getOwnPropertyNames;var En=Object.getPrototypeOf,_n=Object.prototype.hasOwnProperty;var Ne=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports);var An=(t,e,n,r)=>{if(e&&typeof e=="object"||typeof e=="function")for(let i of Cn(e))!_n.call(t,i)&&i!==n&&At(t,i,{get:()=>e[i],enumerable:!(r=Rn(e,i))||r.enumerable});return t};var Tn=(t,e,n)=>(n=t!=null?yn(En(t)):{},An(e||!t||!t.__esModule?At(n,"default",{value:t,enumerable:!0}):n,t));var bt=Ne(Tt=>{Tt.entityMap={lt:"<",gt:">",amp:"&",quot:\'"\',apos:"\'",Agrave:"\\xC0",Aacute:"\\xC1",Acirc:"\\xC2",Atilde:"\\xC3",Auml:"\\xC4",Aring:"\\xC5",AElig:"\\xC6",Ccedil:"\\xC7",Egrave:"\\xC8",Eacute:"\\xC9",Ecirc:"\\xCA",Euml:"\\xCB",Igrave:"\\xCC",Iacute:"\\xCD",Icirc:"\\xCE",Iuml:"\\xCF",ETH:"\\xD0",Ntilde:"\\xD1",Ograve:"\\xD2",Oacute:"\\xD3",Ocirc:"\\xD4",Otilde:"\\xD5",Ouml:"\\xD6",Oslash:"\\xD8",Ugrave:"\\xD9",Uacute:"\\xDA",Ucirc:"\\xDB",Uuml:"\\xDC",Yacute:"\\xDD",THORN:"\\xDE",szlig:"\\xDF",agrave:"\\xE0",aacute:"\\xE1",acirc:"\\xE2",atilde:"\\xE3",auml:"\\xE4",aring:"\\xE5",aelig:"\\xE6",ccedil:"\\xE7",egrave:"\\xE8",eacute:"\\xE9",ecirc:"\\xEA",euml:"\\xEB",igrave:"\\xEC",iacute:"\\xED",icirc:"\\xEE",iuml:"\\xEF",eth:"\\xF0",ntilde:"\\xF1",ograve:"\\xF2",oacute:"\\xF3",ocirc:"\\xF4",otilde:"\\xF5",ouml:"\\xF6",oslash:"\\xF8",ugrave:"\\xF9",uacute:"\\xFA",ucirc:"\\xFB",uuml:"\\xFC",yacute:"\\xFD",thorn:"\\xFE",yuml:"\\xFF",nbsp:"\\xA0",iexcl:"\\xA1",cent:"\\xA2",pound:"\\xA3",curren:"\\xA4",yen:"\\xA5",brvbar:"\\xA6",sect:"\\xA7",uml:"\\xA8",copy:"\\xA9",ordf:"\\xAA",laquo:"\\xAB",not:"\\xAC",shy:"\\xAD\\xAD",reg:"\\xAE",macr:"\\xAF",deg:"\\xB0",plusmn:"\\xB1",sup2:"\\xB2",sup3:"\\xB3",acute:"\\xB4",micro:"\\xB5",para:"\\xB6",middot:"\\xB7",cedil:"\\xB8",sup1:"\\xB9",ordm:"\\xBA",raquo:"\\xBB",frac14:"\\xBC",frac12:"\\xBD",frac34:"\\xBE",iquest:"\\xBF",times:"\\xD7",divide:"\\xF7",forall:"\\u2200",part:"\\u2202",exist:"\\u2203",empty:"\\u2205",nabla:"\\u2207",isin:"\\u2208",notin:"\\u2209",ni:"\\u220B",prod:"\\u220F",sum:"\\u2211",minus:"\\u2212",lowast:"\\u2217",radic:"\\u221A",prop:"\\u221D",infin:"\\u221E",ang:"\\u2220",and:"\\u2227",or:"\\u2228",cap:"\\u2229",cup:"\\u222A",int:"\\u222B",there4:"\\u2234",sim:"\\u223C",cong:"\\u2245",asymp:"\\u2248",ne:"\\u2260",equiv:"\\u2261",le:"\\u2264",ge:"\\u2265",sub:"\\u2282",sup:"\\u2283",nsub:"\\u2284",sube:"\\u2286",supe:"\\u2287",oplus:"\\u2295",otimes:"\\u2297",perp:"\\u22A5",sdot:"\\u22C5",Alpha:"\\u0391",Beta:"\\u0392",Gamma:"\\u0393",Delta:"\\u0394",Epsilon:"\\u0395",Zeta:"\\u0396",Eta:"\\u0397",Theta:"\\u0398",Iota:"\\u0399",Kappa:"\\u039A",Lambda:"\\u039B",Mu:"\\u039C",Nu:"\\u039D",Xi:"\\u039E",Omicron:"\\u039F",Pi:"\\u03A0",Rho:"\\u03A1",Sigma:"\\u03A3",Tau:"\\u03A4",Upsilon:"\\u03A5",Phi:"\\u03A6",Chi:"\\u03A7",Psi:"\\u03A8",Omega:"\\u03A9",alpha:"\\u03B1",beta:"\\u03B2",gamma:"\\u03B3",delta:"\\u03B4",epsilon:"\\u03B5",zeta:"\\u03B6",eta:"\\u03B7",theta:"\\u03B8",iota:"\\u03B9",kappa:"\\u03BA",lambda:"\\u03BB",mu:"\\u03BC",nu:"\\u03BD",xi:"\\u03BE",omicron:"\\u03BF",pi:"\\u03C0",rho:"\\u03C1",sigmaf:"\\u03C2",sigma:"\\u03C3",tau:"\\u03C4",upsilon:"\\u03C5",phi:"\\u03C6",chi:"\\u03C7",psi:"\\u03C8",omega:"\\u03C9",thetasym:"\\u03D1",upsih:"\\u03D2",piv:"\\u03D6",OElig:"\\u0152",oelig:"\\u0153",Scaron:"\\u0160",scaron:"\\u0161",Yuml:"\\u0178",fnof:"\\u0192",circ:"\\u02C6",tilde:"\\u02DC",ensp:"\\u2002",emsp:"\\u2003",thinsp:"\\u2009",zwnj:"\\u200C",zwj:"\\u200D",lrm:"\\u200E",rlm:"\\u200F",ndash:"\\u2013",mdash:"\\u2014",lsquo:"\\u2018",rsquo:"\\u2019",sbquo:"\\u201A",ldquo:"\\u201C",rdquo:"\\u201D",bdquo:"\\u201E",dagger:"\\u2020",Dagger:"\\u2021",bull:"\\u2022",hellip:"\\u2026",permil:"\\u2030",prime:"\\u2032",Prime:"\\u2033",lsaquo:"\\u2039",rsaquo:"\\u203A",oline:"\\u203E",euro:"\\u20AC",trade:"\\u2122",larr:"\\u2190",uarr:"\\u2191",rarr:"\\u2192",darr:"\\u2193",harr:"\\u2194",crarr:"\\u21B5",lceil:"\\u2308",rceil:"\\u2309",lfloor:"\\u230A",rfloor:"\\u230B",loz:"\\u25CA",spades:"\\u2660",clubs:"\\u2663",hearts:"\\u2665",diams:"\\u2666"}});var It=Ne(Le=>{var Ue=/[A-Z_a-z\\xC0-\\xD6\\xD8-\\xF6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/,Nt=new RegExp("[\\\\-\\\\.0-9"+Ue.source.slice(1,-1)+"\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040]"),wt=new RegExp("^"+Ue.source+Nt.source+"*(?::"+Ue.source+Nt.source+"*)?$"),he=0,q=1,ne=2,ge=3,re=4,ie=5,de=6,we=7;function se(t,e){this.message=t,this.locator=e,Error.captureStackTrace&&Error.captureStackTrace(this,se)}se.prototype=new Error;se.prototype.name=se.name;function xt(){}xt.prototype={parse:function(t,e,n){var r=this.domBuilder;r.startDocument(),Mt(e,e={}),bn(t,e,n,r,this.errorHandler),r.endDocument()}};function bn(t,e,n,r,i){function s(A){if(A>65535){A-=65536;var g=55296+(A>>10),ee=56320+(A&1023);return String.fromCharCode(g,ee)}else return String.fromCharCode(A)}function o(A){var g=A.slice(1,-1);return g in n?n[g]:g.charAt(0)==="#"?s(parseInt(g.substr(1).replace("x","0x"))):(i.error("entity not found:"+A),A)}function l(A){if(A>C){var g=t.substring(C,A).replace(/&#?\\w+;/g,o);S&&u(C),r.characters(g,0,A-C),C=A}}function u(A,g){for(;A>=f&&(g=h.exec(t));)a=g.index,f=a+g[0].length,S.lineNumber++;S.columnNumber=A-a+1}for(var a=0,f=0,h=/.*(?:\\r\\n?|\\n)|.*$/g,S=r.locator,_=[{currentNSMap:e}],y={},C=0;;){try{var v=t.indexOf("<",C);if(v<0){if(!t.substr(C).match(/^\\s*$/)){var M=r.doc,P=M.createTextNode(t.substr(C));M.appendChild(P),r.currentElement=P}return}switch(v>C&&l(v),t.charAt(v+1)){case"/":var b=t.indexOf(">",v+3),R=t.substring(v+2,b),w=_.pop();b<0?(R=t.substring(v+2).replace(/[\\s<].*/,""),i.error("end tag name: "+R+" is not complete:"+w.tagName),b=v+1+R.length):R.match(/\\s</)&&(R=R.replace(/[\\s<].*/,""),i.error("end tag name: "+R+" maybe not complete"),b=v+1+R.length);var W=w.localNSMap,d=w.tagName==R,G=d||w.tagName&&w.tagName.toLowerCase()==R.toLowerCase();if(G){if(r.endElement(w.uri,w.localName,R),W)for(var k in W)r.endPrefixMapping(k);d||i.fatalError("end tag name: "+R+" is not match the current start tagName:"+w.tagName)}else _.push(w);b++;break;case"?":S&&u(v),b=xn(t,v,r);break;case"!":S&&u(v),b=$n(t,v,r,i);break;default:S&&u(v);var N=new Ot,L=_[_.length-1].currentNSMap,b=Nn(t,v,N,L,o,i),Y=N.length;if(!N.closed&&Dn(t,b,N.tagName,y)&&(N.closed=!0,n.nbsp||i.warning("unclosed xml attribute")),S&&Y){for(var J=Dt(S,{}),V=0;V<Y;V++){var B=N[V];u(B.offset),B.locator=Dt(S,{})}r.locator=J,$t(N,r,L)&&_.push(N),r.locator=S}else $t(N,r,L)&&_.push(N);N.uri==="http://www.w3.org/1999/xhtml"&&!N.closed?b=wn(t,b,N.tagName,o,r):b++}}catch(A){if(A instanceof se)throw A;i.error("element parse error: "+A),b=-1}b>C?C=b:l(Math.max(v,C)+1)}}function Dt(t,e){return e.lineNumber=t.lineNumber,e.columnNumber=t.columnNumber,e}function Nn(t,e,n,r,i,s){function o(_,y,C){_ in n.attributeNames&&s.fatalError("Attribute "+_+" redefined"),n.addValue(_,y,C)}for(var l,u,a=++e,f=he;;){var h=t.charAt(a);switch(h){case"=":if(f===q)l=t.slice(e,a),f=ge;else if(f===ne)f=ge;else throw new Error("attribute equal must after attrName");break;case"\'":case\'"\':if(f===ge||f===q)if(f===q&&(s.warning(\'attribute value must after "="\'),l=t.slice(e,a)),e=a+1,a=t.indexOf(h,e),a>0)u=t.slice(e,a).replace(/&#?\\w+;/g,i),o(l,u,e-1),f=ie;else throw new Error("attribute value no end \'"+h+"\' match");else if(f==re)u=t.slice(e,a).replace(/&#?\\w+;/g,i),o(l,u,e),s.warning(\'attribute "\'+l+\'" missed start quot(\'+h+")!!"),e=a+1,f=ie;else throw new Error(\'attribute value must after "="\');break;case"/":switch(f){case he:n.setTagName(t.slice(e,a));case ie:case de:case we:f=we,n.closed=!0;case re:case q:case ne:break;default:throw new Error("attribute invalid close char(\'/\')")}break;case"":return s.error("unexpected end of input"),f==he&&n.setTagName(t.slice(e,a)),a;case">":switch(f){case he:n.setTagName(t.slice(e,a));case ie:case de:case we:break;case re:case q:u=t.slice(e,a),u.slice(-1)==="/"&&(n.closed=!0,u=u.slice(0,-1));case ne:f===ne&&(u=l),f==re?(s.warning(\'attribute "\'+u+\'" missed quot(")!\'),o(l,u.replace(/&#?\\w+;/g,i),e)):((r[""]!=="http://www.w3.org/1999/xhtml"||!u.match(/^(?:disabled|checked|selected)$/i))&&s.warning(\'attribute "\'+u+\'" missed value!! "\'+u+\'" instead!!\'),o(u,u,e));break;case ge:throw new Error("attribute value missed!!")}return a;case"\\x80":h=" ";default:if(h<=" ")switch(f){case he:n.setTagName(t.slice(e,a)),f=de;break;case q:l=t.slice(e,a),f=ne;break;case re:var u=t.slice(e,a).replace(/&#?\\w+;/g,i);s.warning(\'attribute "\'+u+\'" missed quot(")!!\'),o(l,u,e);case ie:f=de;break}else switch(f){case ne:var S=n.tagName;(r[""]!=="http://www.w3.org/1999/xhtml"||!l.match(/^(?:disabled|checked|selected)$/i))&&s.warning(\'attribute "\'+l+\'" missed value!! "\'+l+\'" instead2!!\'),o(l,l,e),e=a,f=q;break;case ie:s.warning(\'attribute space is required"\'+l+\'"!!\');case de:f=q,e=a;break;case ge:f=re,e=a;break;case we:throw new Error("elements closed character \'/\' and \'>\' must be connected to")}}a++}}function $t(t,e,n){for(var r=t.tagName,i=null,h=t.length;h--;){var s=t[h],o=s.qName,l=s.value,S=o.indexOf(":");if(S>0)var u=s.prefix=o.slice(0,S),a=o.slice(S+1),f=u==="xmlns"&&a;else a=o,u=null,f=o==="xmlns"&&"";s.localName=a,f!==!1&&(i==null&&(i={},Mt(n,n={})),n[f]=i[f]=l,s.uri="http://www.w3.org/2000/xmlns/",e.startPrefixMapping(f,l))}for(var h=t.length;h--;){s=t[h];var u=s.prefix;u&&(u==="xml"&&(s.uri="http://www.w3.org/XML/1998/namespace"),u!=="xmlns"&&(s.uri=n[u||""]))}var S=r.indexOf(":");S>0?(u=t.prefix=r.slice(0,S),a=t.localName=r.slice(S+1)):(u=null,a=t.localName=r);var _=t.uri=n[u||""];if(e.startElement(_,a,r,t),t.closed){if(e.endElement(_,a,r),i)for(u in i)e.endPrefixMapping(u)}else return t.currentNSMap=n,t.localNSMap=i,!0}function wn(t,e,n,r,i){if(/^(?:script|textarea)$/i.test(n)){var s=t.indexOf("</"+n+">",e),o=t.substring(e+1,s);if(/[&<]/.test(o))return/^script$/i.test(n)?(i.characters(o,0,o.length),s):(o=o.replace(/&#?\\w+;/g,r),i.characters(o,0,o.length),s)}return e+1}function Dn(t,e,n,r){var i=r[n];return i==null&&(i=t.lastIndexOf("</"+n+">"),i<e&&(i=t.lastIndexOf("</"+n)),r[n]=i),i<e}function Mt(t,e){for(var n in t)e[n]=t[n]}function $n(t,e,n,r){var i=t.charAt(e+2);switch(i){case"-":if(t.charAt(e+3)==="-"){var s=t.indexOf("-->",e+4);return s>e?(n.comment(t,e+4,s-e-4),s+3):(r.error("Unclosed comment"),-1)}else return-1;default:if(t.substr(e+3,6)=="CDATA["){var s=t.indexOf("]]>",e+9);return n.startCDATA(),n.characters(t,e+9,s-e-9),n.endCDATA(),s+3}var o=Mn(t,e),l=o.length;if(l>1&&/!doctype/i.test(o[0][0])){var u=o[1][0],a=!1,f=!1;l>3&&(/^public$/i.test(o[2][0])?(a=o[3][0],f=l>4&&o[4][0]):/^system$/i.test(o[2][0])&&(f=o[3][0]));var h=o[l-1];return n.startDTD(u,a,f),n.endDTD(),h.index+h[0].length}}return-1}function xn(t,e,n){var r=t.indexOf("?>",e);if(r){var i=t.substring(e,r).match(/^<\\?(\\S*)\\s*([\\s\\S]*?)\\s*$/);if(i){var s=i[0].length;return n.processingInstruction(i[1],i[2]),r+2}else return-1}return-1}function Ot(){this.attributeNames={}}Ot.prototype={setTagName:function(t){if(!wt.test(t))throw new Error("invalid tagName:"+t);this.tagName=t},addValue:function(t,e,n){if(!wt.test(t))throw new Error("invalid attribute:"+t);this.attributeNames[t]=this.length,this[this.length++]={qName:t,value:e,offset:n}},length:0,getLocalName:function(t){return this[t].localName},getLocator:function(t){return this[t].locator},getQName:function(t){return this[t].qName},getURI:function(t){return this[t].uri},getValue:function(t){return this[t].value}};function Mn(t,e){var n,r=[],i=/\'[^\']+\'|"[^"]+"|[^\\s<>\\/=]+=?|(\\/?\\s*>|<)/g;for(i.lastIndex=e,i.exec(t);n=i.exec(t);)if(r.push(n),n[1])return r}Le.XMLReader=xt;Le.ParseError=se});var Xe=Ne(Ce=>{function ve(t,e){for(var n in t)e[n]=t[n]}function F(t,e){var n=t.prototype;if(!(n instanceof e)){let i=function(){};var r=i;i.prototype=e.prototype,i=new i,ve(n,i),t.prototype=n=i}n.constructor!=t&&(typeof t!="function"&&console.error("unknow Class:"+t),n.constructor=t)}var On="http://www.w3.org/1999/xhtml",U={},j=U.ELEMENT_NODE=1,oe=U.ATTRIBUTE_NODE=2,De=U.TEXT_NODE=3,Wt=U.CDATA_SECTION_NODE=4,Gt=U.ENTITY_REFERENCE_NODE=5,In=U.ENTITY_NODE=6,jt=U.PROCESSING_INSTRUCTION_NODE=7,Bt=U.COMMENT_NODE=8,Vt=U.DOCUMENT_NODE=9,zt=U.DOCUMENT_TYPE_NODE=10,z=U.DOCUMENT_FRAGMENT_NODE=11,Pn=U.NOTATION_NODE=12,O={},$={},Sa=O.INDEX_SIZE_ERR=($[1]="Index size error",1),va=O.DOMSTRING_SIZE_ERR=($[2]="DOMString size error",2),kn=O.HIERARCHY_REQUEST_ERR=($[3]="Hierarchy request error",3),ya=O.WRONG_DOCUMENT_ERR=($[4]="Wrong document",4),Ra=O.INVALID_CHARACTER_ERR=($[5]="Invalid character",5),Ca=O.NO_DATA_ALLOWED_ERR=($[6]="No data allowed",6),Ea=O.NO_MODIFICATION_ALLOWED_ERR=($[7]="No modification allowed",7),Fn=O.NOT_FOUND_ERR=($[8]="Not found",8),_a=O.NOT_SUPPORTED_ERR=($[9]="Not supported",9),Pt=O.INUSE_ATTRIBUTE_ERR=($[10]="Attribute in use",10),Aa=O.INVALID_STATE_ERR=($[11]="Invalid state",11),Ta=O.SYNTAX_ERR=($[12]="Syntax error",12),ba=O.INVALID_MODIFICATION_ERR=($[13]="Invalid modification",13),Na=O.NAMESPACE_ERR=($[14]="Invalid namespace",14),wa=O.INVALID_ACCESS_ERR=($[15]="Invalid access",15);function te(t,e){if(e instanceof Error)var n=e;else n=this,Error.call(this,$[t]),this.message=$[t],Error.captureStackTrace&&Error.captureStackTrace(this,te);return n.code=t,e&&(this.message=this.message+": "+e),n}te.prototype=Error.prototype;ve(O,te);function Z(){}Z.prototype={length:0,item:function(t){return this[t]||null},toString:function(t,e){for(var n=[],r=0;r<this.length;r++)ae(this[r],n,t,e);return n.join("")}};function ce(t,e){this._node=t,this._refresh=e,Ge(this)}function Ge(t){var e=t._node._inc||t._node.ownerDocument._inc;if(t._inc!=e){var n=t._refresh(t._node);nn(t,"length",n.length),ve(n,t),t._inc=e}}ce.prototype.item=function(t){return Ge(this),this[t]};F(ce,Z);function $e(){}function Ht(t,e){for(var n=t.length;n--;)if(t[n]===e)return n}function kt(t,e,n,r){if(r?e[Ht(e,r)]=n:e[e.length++]=n,t){n.ownerElement=t;var i=t.ownerDocument;i&&(r&&Yt(i,t,r),Un(i,t,n))}}function Ft(t,e,n){var r=Ht(e,n);if(r>=0){for(var i=e.length-1;r<i;)e[r]=e[++r];if(e.length=i,t){var s=t.ownerDocument;s&&(Yt(s,t,n),n.ownerElement=null)}}else throw te(Fn,new Error(t.tagName+"@"+n))}$e.prototype={length:0,item:Z.prototype.item,getNamedItem:function(t){for(var e=this.length;e--;){var n=this[e];if(n.nodeName==t)return n}},setNamedItem:function(t){var e=t.ownerElement;if(e&&e!=this._ownerElement)throw new te(Pt);var n=this.getNamedItem(t.nodeName);return kt(this._ownerElement,this,t,n),n},setNamedItemNS:function(t){var e=t.ownerElement,n;if(e&&e!=this._ownerElement)throw new te(Pt);return n=this.getNamedItemNS(t.namespaceURI,t.localName),kt(this._ownerElement,this,t,n),n},removeNamedItem:function(t){var e=this.getNamedItem(t);return Ft(this._ownerElement,this,e),e},removeNamedItemNS:function(t,e){var n=this.getNamedItemNS(t,e);return Ft(this._ownerElement,this,n),n},getNamedItemNS:function(t,e){for(var n=this.length;n--;){var r=this[n];if(r.localName==e&&r.namespaceURI==t)return r}return null}};function Kt(t){if(this._features={},t)for(var e in t)this._features=t[e]}Kt.prototype={hasFeature:function(t,e){var n=this._features[t.toLowerCase()];return!!(n&&(!e||e in n))},createDocument:function(t,e,n){var r=new ye;if(r.implementation=this,r.childNodes=new Z,r.doctype=n,n&&r.appendChild(n),e){var i=r.createElementNS(t,e);r.appendChild(i)}return r},createDocumentType:function(t,e,n){var r=new He;return r.name=t,r.nodeName=t,r.publicId=e,r.systemId=n,r}};function I(){}I.prototype={firstChild:null,lastChild:null,previousSibling:null,nextSibling:null,attributes:null,parentNode:null,childNodes:null,ownerDocument:null,nodeValue:null,namespaceURI:null,prefix:null,localName:null,insertBefore:function(t,e){return qt(this,t,e)},replaceChild:function(t,e){this.insertBefore(t,e),e&&this.removeChild(e)},removeChild:function(t){return Xt(this,t)},appendChild:function(t){return this.insertBefore(t,null)},hasChildNodes:function(){return this.firstChild!=null},cloneNode:function(t){return We(this.ownerDocument||this,this,t)},normalize:function(){for(var t=this.firstChild;t;){var e=t.nextSibling;e&&e.nodeType==De&&t.nodeType==De?(this.removeChild(e),t.appendData(e.data)):(t.normalize(),t=e)}},isSupported:function(t,e){return this.ownerDocument.implementation.hasFeature(t,e)},hasAttributes:function(){return this.attributes.length>0},lookupPrefix:function(t){for(var e=this;e;){var n=e._nsMap;if(n){for(var r in n)if(n[r]==t)return r}e=e.nodeType==oe?e.ownerDocument:e.parentNode}return null},lookupNamespaceURI:function(t){for(var e=this;e;){var n=e._nsMap;if(n&&t in n)return n[t];e=e.nodeType==oe?e.ownerDocument:e.parentNode}return null},isDefaultNamespace:function(t){var e=this.lookupPrefix(t);return e==null}};function Ut(t){return t=="<"&&"&lt;"||t==">"&&"&gt;"||t=="&"&&"&amp;"||t==\'"\'&&"&quot;"||"&#"+t.charCodeAt()+";"}ve(U,I);ve(U,I.prototype);function Se(t,e){if(e(t))return!0;if(t=t.firstChild)do if(Se(t,e))return!0;while(t=t.nextSibling)}function ye(){}function Un(t,e,n){t&&t._inc++;var r=n.namespaceURI;r=="http://www.w3.org/2000/xmlns/"&&(e._nsMap[n.prefix?n.localName:""]=n.value)}function Yt(t,e,n,r){t&&t._inc++;var i=n.namespaceURI;i=="http://www.w3.org/2000/xmlns/"&&delete e._nsMap[n.prefix?n.localName:""]}function je(t,e,n){if(t&&t._inc){t._inc++;var r=e.childNodes;if(n)r[r.length++]=n;else{for(var i=e.firstChild,s=0;i;)r[s++]=i,i=i.nextSibling;r.length=s}}}function Xt(t,e){var n=e.previousSibling,r=e.nextSibling;return n?n.nextSibling=r:t.firstChild=r,r?r.previousSibling=n:t.lastChild=n,je(t.ownerDocument,t),e}function qt(t,e,n){var r=e.parentNode;if(r&&r.removeChild(e),e.nodeType===z){var i=e.firstChild;if(i==null)return e;var s=e.lastChild}else i=s=e;var o=n?n.previousSibling:t.lastChild;i.previousSibling=o,s.nextSibling=n,o?o.nextSibling=i:t.firstChild=i,n==null?t.lastChild=s:n.previousSibling=s;do i.parentNode=t;while(i!==s&&(i=i.nextSibling));return je(t.ownerDocument||t,t),e.nodeType==z&&(e.firstChild=e.lastChild=null),e}function Ln(t,e){var n=e.parentNode;if(n){var r=t.lastChild;n.removeChild(e);var r=t.lastChild}var r=t.lastChild;return e.parentNode=t,e.previousSibling=r,e.nextSibling=null,r?r.nextSibling=e:t.firstChild=e,t.lastChild=e,je(t.ownerDocument,t,e),e}ye.prototype={nodeName:"#document",nodeType:Vt,doctype:null,documentElement:null,_inc:1,insertBefore:function(t,e){if(t.nodeType==z){for(var n=t.firstChild;n;){var r=n.nextSibling;this.insertBefore(n,e),n=r}return t}return this.documentElement==null&&t.nodeType==j&&(this.documentElement=t),qt(this,t,e),t.ownerDocument=this,t},removeChild:function(t){return this.documentElement==t&&(this.documentElement=null),Xt(this,t)},importNode:function(t,e){return tn(this,t,e)},getElementById:function(t){var e=null;return Se(this.documentElement,function(n){if(n.nodeType==j&&n.getAttribute("id")==t)return e=n,!0}),e},getElementsByClassName:function(t){var e=new RegExp("(^|\\\\s)"+t+"(\\\\s|$)");return new ce(this,function(n){var r=[];return Se(n.documentElement,function(i){i!==n&&i.nodeType==j&&e.test(i.getAttribute("class"))&&r.push(i)}),r})},createElement:function(t){var e=new le;e.ownerDocument=this,e.nodeName=t,e.tagName=t,e.childNodes=new Z;var n=e.attributes=new $e;return n._ownerElement=e,e},createDocumentFragment:function(){var t=new Me;return t.ownerDocument=this,t.childNodes=new Z,t},createTextNode:function(t){var e=new Be;return e.ownerDocument=this,e.appendData(t),e},createComment:function(t){var e=new Ve;return e.ownerDocument=this,e.appendData(t),e},createCDATASection:function(t){var e=new ze;return e.ownerDocument=this,e.appendData(t),e},createProcessingInstruction:function(t,e){var n=new Ye;return n.ownerDocument=this,n.tagName=n.target=t,n.nodeValue=n.data=e,n},createAttribute:function(t){var e=new xe;return e.ownerDocument=this,e.name=t,e.nodeName=t,e.localName=t,e.specified=!0,e},createEntityReference:function(t){var e=new Ke;return e.ownerDocument=this,e.nodeName=t,e},createElementNS:function(t,e){var n=new le,r=e.split(":"),i=n.attributes=new $e;return n.childNodes=new Z,n.ownerDocument=this,n.nodeName=e,n.tagName=e,n.namespaceURI=t,r.length==2?(n.prefix=r[0],n.localName=r[1]):n.localName=e,i._ownerElement=n,n},createAttributeNS:function(t,e){var n=new xe,r=e.split(":");return n.ownerDocument=this,n.nodeName=e,n.name=e,n.namespaceURI=t,n.specified=!0,r.length==2?(n.prefix=r[0],n.localName=r[1]):n.localName=e,n}};F(ye,I);function le(){this._nsMap={}}le.prototype={nodeType:j,hasAttribute:function(t){return this.getAttributeNode(t)!=null},getAttribute:function(t){var e=this.getAttributeNode(t);return e&&e.value||""},getAttributeNode:function(t){return this.attributes.getNamedItem(t)},setAttribute:function(t,e){var n=this.ownerDocument.createAttribute(t);n.value=n.nodeValue=""+e,this.setAttributeNode(n)},removeAttribute:function(t){var e=this.getAttributeNode(t);e&&this.removeAttributeNode(e)},appendChild:function(t){return t.nodeType===z?this.insertBefore(t,null):Ln(this,t)},setAttributeNode:function(t){return this.attributes.setNamedItem(t)},setAttributeNodeNS:function(t){return this.attributes.setNamedItemNS(t)},removeAttributeNode:function(t){return this.attributes.removeNamedItem(t.nodeName)},removeAttributeNS:function(t,e){var n=this.getAttributeNodeNS(t,e);n&&this.removeAttributeNode(n)},hasAttributeNS:function(t,e){return this.getAttributeNodeNS(t,e)!=null},getAttributeNS:function(t,e){var n=this.getAttributeNodeNS(t,e);return n&&n.value||""},setAttributeNS:function(t,e,n){var r=this.ownerDocument.createAttributeNS(t,e);r.value=r.nodeValue=""+n,this.setAttributeNode(r)},getAttributeNodeNS:function(t,e){return this.attributes.getNamedItemNS(t,e)},getElementsByTagName:function(t){return new ce(this,function(e){var n=[];return Se(e,function(r){r!==e&&r.nodeType==j&&(t==="*"||r.tagName==t)&&n.push(r)}),n})},getElementsByTagNameNS:function(t,e){return new ce(this,function(n){var r=[];return Se(n,function(i){i!==n&&i.nodeType===j&&(t==="*"||i.namespaceURI===t)&&(e==="*"||i.localName==e)&&r.push(i)}),r})}};ye.prototype.getElementsByTagName=le.prototype.getElementsByTagName;ye.prototype.getElementsByTagNameNS=le.prototype.getElementsByTagNameNS;F(le,I);function xe(){}xe.prototype.nodeType=oe;F(xe,I);function Re(){}Re.prototype={data:"",substringData:function(t,e){return this.data.substring(t,t+e)},appendData:function(t){t=this.data+t,this.nodeValue=this.data=t,this.length=t.length},insertData:function(t,e){this.replaceData(t,0,e)},appendChild:function(t){throw new Error($[kn])},deleteData:function(t,e){this.replaceData(t,e,"")},replaceData:function(t,e,n){var r=this.data.substring(0,t),i=this.data.substring(t+e);n=r+n+i,this.nodeValue=this.data=n,this.length=n.length}};F(Re,I);function Be(){}Be.prototype={nodeName:"#text",nodeType:De,splitText:function(t){var e=this.data,n=e.substring(t);e=e.substring(0,t),this.data=this.nodeValue=e,this.length=e.length;var r=this.ownerDocument.createTextNode(n);return this.parentNode&&this.parentNode.insertBefore(r,this.nextSibling),r}};F(Be,Re);function Ve(){}Ve.prototype={nodeName:"#comment",nodeType:Bt};F(Ve,Re);function ze(){}ze.prototype={nodeName:"#cdata-section",nodeType:Wt};F(ze,Re);function He(){}He.prototype.nodeType=zt;F(He,I);function Zt(){}Zt.prototype.nodeType=Pn;F(Zt,I);function Qt(){}Qt.prototype.nodeType=In;F(Qt,I);function Ke(){}Ke.prototype.nodeType=Gt;F(Ke,I);function Me(){}Me.prototype.nodeName="#document-fragment";Me.prototype.nodeType=z;F(Me,I);function Ye(){}Ye.prototype.nodeType=jt;F(Ye,I);function Jt(){}Jt.prototype.serializeToString=function(t,e,n){return en.call(t,e,n)};I.prototype.toString=en;function en(t,e){var n=[],r=this.nodeType==9&&this.documentElement||this,i=r.prefix,s=r.namespaceURI;if(s&&i==null){var i=r.lookupPrefix(s);if(i==null)var o=[{namespace:s,prefix:null}]}return ae(this,n,t,e,o),n.join("")}function Lt(t,e,n){var r=t.prefix||"",i=t.namespaceURI;if(!r&&!i||r==="xml"&&i==="http://www.w3.org/XML/1998/namespace"||i=="http://www.w3.org/2000/xmlns/")return!1;for(var s=n.length;s--;){var o=n[s];if(o.prefix==r)return o.namespace!=i}return!0}function ae(t,e,n,r,i){if(r)if(t=r(t),t){if(typeof t=="string"){e.push(t);return}}else return;switch(t.nodeType){case j:i||(i=[]);var s=i.length,o=t.attributes,l=o.length,y=t.firstChild,u=t.tagName;n=On===t.namespaceURI||n,e.push("<",u);for(var a=0;a<l;a++){var f=o.item(a);f.prefix=="xmlns"?i.push({prefix:f.localName,namespace:f.value}):f.nodeName=="xmlns"&&i.push({prefix:"",namespace:f.value})}for(var a=0;a<l;a++){var f=o.item(a);if(Lt(f,n,i)){var h=f.prefix||"",S=f.namespaceURI,_=h?" xmlns:"+h:" xmlns";e.push(_,\'="\',S,\'"\'),i.push({prefix:h,namespace:S})}ae(f,e,n,r,i)}if(Lt(t,n,i)){var h=t.prefix||"",S=t.namespaceURI;if(S){var _=h?" xmlns:"+h:" xmlns";e.push(_,\'="\',S,\'"\'),i.push({prefix:h,namespace:S})}}if(y||n&&!/^(?:meta|link|img|br|hr|input)$/i.test(u)){if(e.push(">"),n&&/^script$/i.test(u))for(;y;)y.data?e.push(y.data):ae(y,e,n,r,i),y=y.nextSibling;else for(;y;)ae(y,e,n,r,i),y=y.nextSibling;e.push("</",u,">")}else e.push("/>");return;case Vt:case z:for(var y=t.firstChild;y;)ae(y,e,n,r,i),y=y.nextSibling;return;case oe:return e.push(" ",t.name,\'="\',t.value.replace(/[<&"]/g,Ut),\'"\');case De:return e.push(t.data.replace(/[<&]/g,Ut).replace(/]]>/g,"]]&gt;"));case Wt:return e.push("<![CDATA[",t.data,"]]>");case Bt:return e.push("<!--",t.data,"-->");case zt:var C=t.publicId,v=t.systemId;if(e.push("<!DOCTYPE ",t.name),C)e.push(" PUBLIC ",C),v&&v!="."&&e.push(" ",v),e.push(">");else if(v&&v!=".")e.push(" SYSTEM ",v,">");else{var M=t.internalSubset;M&&e.push(" [",M,"]"),e.push(">")}return;case jt:return e.push("<?",t.target," ",t.data,"?>");case Gt:return e.push("&",t.nodeName,";");default:e.push("??",t.nodeName)}}function tn(t,e,n){var r;switch(e.nodeType){case j:r=e.cloneNode(!1),r.ownerDocument=t;case z:break;case oe:n=!0;break}if(r||(r=e.cloneNode(!1)),r.ownerDocument=t,r.parentNode=null,n)for(var i=e.firstChild;i;)r.appendChild(tn(t,i,n)),i=i.nextSibling;return r}function We(t,e,n){var r=new e.constructor;for(var i in e){var s=e[i];typeof s!="object"&&s!=r[i]&&(r[i]=s)}switch(e.childNodes&&(r.childNodes=new Z),r.ownerDocument=t,r.nodeType){case j:var o=e.attributes,l=r.attributes=new $e,u=o.length;l._ownerElement=r;for(var a=0;a<u;a++)r.setAttributeNode(We(t,o.item(a),!0));break;case oe:n=!0}if(n)for(var f=e.firstChild;f;)r.appendChild(We(t,f,n)),f=f.nextSibling;return r}function nn(t,e,n){t[e]=n}try{if(Object.defineProperty){let t=function(e){switch(e.nodeType){case j:case z:var n=[];for(e=e.firstChild;e;)e.nodeType!==7&&e.nodeType!==8&&n.push(t(e)),e=e.nextSibling;return n.join("");default:return e.nodeValue}};Da=t,Object.defineProperty(ce.prototype,"length",{get:function(){return Ge(this),this.$$length}}),Object.defineProperty(I.prototype,"textContent",{get:function(){return t(this)},set:function(e){switch(this.nodeType){case j:case z:for(;this.firstChild;)this.removeChild(this.firstChild);(e||String(e))&&this.appendChild(this.ownerDocument.createTextNode(e));break;default:this.data=e,this.value=e,this.nodeValue=e}}}),nn=function(e,n,r){e["$$"+n]=r}}}catch(t){}var Da;Ce.Node=I;Ce.DOMException=te;Ce.DOMImplementation=Kt;Ce.XMLSerializer=Jt});var on=Ne(_e=>{function sn(t){this.options=t||{locator:{}}}sn.prototype.parseFromString=function(t,e){var n=this.options,r=new jn,i=n.domBuilder||new Ee,s=n.errorHandler,o=n.locator,l=n.xmlns||{},u=/\\/x?html?$/.test(e),a=u?Gn.entityMap:{lt:"<",gt:">",amp:"&",quot:\'"\',apos:"\'"};return o&&i.setDocumentLocator(o),r.errorHandler=Wn(s,i,o),r.domBuilder=n.domBuilder||i,u&&(l[""]="http://www.w3.org/1999/xhtml"),l.xml=l.xml||"http://www.w3.org/XML/1998/namespace",t&&typeof t=="string"?r.parse(t,l,a):r.errorHandler.error("invalid doc source"),i.doc};function Wn(t,e,n){if(!t){if(e instanceof Ee)return e;t=e}var r={},i=t instanceof Function;n=n||{};function s(o){var l=t[o];!l&&i&&(l=t.length==2?function(u){t(o,u)}:t),r[o]=l&&function(u){l("[xmldom "+o+"]	"+u+qe(n))}||function(){}}return s("warning"),s("error"),s("fatalError"),r}function Ee(){this.cdata=!1}function ue(t,e){e.lineNumber=t.lineNumber,e.columnNumber=t.columnNumber}Ee.prototype={startDocument:function(){this.doc=new Vn().createDocument(null,null,null),this.locator&&(this.doc.documentURI=this.locator.systemId)},startElement:function(t,e,n,r){var i=this.doc,s=i.createElementNS(t,n||e),o=r.length;Oe(this,s),this.currentElement=s,this.locator&&ue(this.locator,s);for(var l=0;l<o;l++){var t=r.getURI(l),u=r.getValue(l),n=r.getQName(l),a=i.createAttributeNS(t,n);this.locator&&ue(r.getLocator(l),a),a.value=a.nodeValue=u,s.setAttributeNode(a)}},endElement:function(t,e,n){var r=this.currentElement,i=r.tagName;this.currentElement=r.parentNode},startPrefixMapping:function(t,e){},endPrefixMapping:function(t){},processingInstruction:function(t,e){var n=this.doc.createProcessingInstruction(t,e);this.locator&&ue(this.locator,n),Oe(this,n)},ignorableWhitespace:function(t,e,n){},characters:function(t,e,n){if(t=rn.apply(this,arguments),t){if(this.cdata)var r=this.doc.createCDATASection(t);else var r=this.doc.createTextNode(t);this.currentElement?this.currentElement.appendChild(r):/^\\s*$/.test(t)&&this.doc.appendChild(r),this.locator&&ue(this.locator,r)}},skippedEntity:function(t){},endDocument:function(){this.doc.normalize()},setDocumentLocator:function(t){(this.locator=t)&&(t.lineNumber=0)},comment:function(t,e,n){t=rn.apply(this,arguments);var r=this.doc.createComment(t);this.locator&&ue(this.locator,r),Oe(this,r)},startCDATA:function(){this.cdata=!0},endCDATA:function(){this.cdata=!1},startDTD:function(t,e,n){var r=this.doc.implementation;if(r&&r.createDocumentType){var i=r.createDocumentType(t,e,n);this.locator&&ue(this.locator,i),Oe(this,i)}},warning:function(t){console.warn("[xmldom warning]	"+t,qe(this.locator))},error:function(t){console.error("[xmldom error]	"+t,qe(this.locator))},fatalError:function(t){throw new Bn(t,this.locator)}};function qe(t){if(t)return`\n@`+(t.systemId||"")+"#[line:"+t.lineNumber+",col:"+t.columnNumber+"]"}function rn(t,e,n){return typeof t=="string"?t.substr(e,n):t.length>=e+n||e?new java.lang.String(t,e,n)+"":t}"endDTD,startEntity,endEntity,attributeDecl,elementDecl,externalEntityDecl,internalEntityDecl,resolveEntity,getExternalSubset,notationDecl,unparsedEntityDecl".replace(/\\w+/g,function(t){Ee.prototype[t]=function(){return null}});function Oe(t,e){t.currentElement?t.currentElement.appendChild(e):t.doc.appendChild(e)}var Gn=bt(),an=It(),jn=an.XMLReader,Bn=an.ParseError,Vn=_e.DOMImplementation=Xe().DOMImplementation;_e.XMLSerializer=Xe().XMLSerializer;_e.DOMParser=sn;_e.__DOMHandler=Ee});var ln=Tn(on());async function un(t){return new Promise((e,n)=>{let r=new FileReader;r.onload=async i=>{let s=i.target.result,l=new ln.DOMParser().parseFromString(s,"application/xml").getElementsByTagName("monster"),u=[];if(!!l.length){for(let a of Array.from(l))try{let f={image:null,name:x(a,"name"),size:qn(a),type:x(a,"type"),subtype:x(a,"subtype"),alignment:x(a,"alignment"),ac:Zn(a),hp:Number(cn(a,"hp")),hit_dice:cn(a,"hit_dice"),speed:x(a,"speed"),stats:[Number(x(a,"str")),Number(x(a,"dex")),Number(x(a,"con")),Number(x(a,"int")),Number(x(a,"wis")),Number(x(a,"cha"))],saves:Yn(a),skillsaves:Hn(a),damage_vulnerabilities:x(a,"vulnerable"),damage_resistances:x(a,"resist"),damage_immunities:x(a,"immune"),condition_immunities:x(a,"conditionImmune"),senses:x(a,"senses"),languages:x(a,"languages"),cr:x(a,"cr"),traits:Ie(a,"trait"),spells:zn(a),actions:Ie(a,"action"),legendary_actions:Ie(a,"legendary"),reactions:Ie(a,"reaction"),source:Qn(a)};u.push(f)}catch(f){console.error(f);continue}e(u)}},r.readAsText(t)})}function x(t,e){let n=t.getElementsByTagName(e);if(n&&n.length)return n[0].textContent}function Ie(t,e){var i;if(!((i=t.getElementsByTagName(e))!=null&&i.length))return[];let n=t.getElementsByTagName(e),r=[];for(let s of Array.from(n)){let o=s.getElementsByTagName("name");if(!o||!o.length||!o[0].textContent||o[0].textContent.includes("Spellcasting"))continue;let l=[],u=s.getElementsByTagName("text");for(let a of Array.from(u))l.push(a.textContent);r.push({name:o[0].textContent,desc:l.join(" ")})}return r}function zn(t){var r;if(!((r=t.getElementsByTagName("trait"))!=null&&r.length))return[];let n=Array.from(t.getElementsByTagName("trait")).find(i=>{var s;return(s=i.getElementsByTagName("name")[0])==null?void 0:s.textContent.includes("Spellcasting")});return n?Array.from(n.getElementsByTagName("text")).map(i=>i.textContent.replace(/(&#8226;|\u2022)/u,"").trim()).filter(i=>i.length):[]}function Hn(t){var r;if(!((r=t.getElementsByTagName("skill"))!=null&&r.length))return[];let e=t.getElementsByTagName("skill")[0].textContent.split(", "),n=[];return e.forEach(i=>{let s=i.split(/\\s[\\+\\-]/);n.push({[s[0]]:Number(s[1])})}),n}var Kn={Str:"strength",Dex:"dexterity",Con:"constitution",Int:"intelligence",Wis:"wisdom",Cha:"charisma"};function Yn(t){var r;if(!((r=t.getElementsByTagName("save"))!=null&&r.length))return[];let e=t.getElementsByTagName("save")[0].textContent.split(", "),n=[];return e.forEach(i=>{let s=i.split(/\\s[\\+\\-]/);n.push({[Kn[s[0]]]:Number(s[1])})}),n}function cn(t,e){var s,o;if(!((s=t.getElementsByTagName("hp"))!=null&&s.length))return"";let n=t.getElementsByTagName("hp")[0].textContent,[,r,i]=(o=n.match(/(\\d+) \\(([\\s\\S]+)\\)/))!=null?o:[,"",""];return{hp:r,hit_dice:i}[e]}var Xn={T:"tiny",S:"small",M:"medium",L:"large",H:"huge",G:"gargantuan"};function qn(t){var e;return t.getElementsByTagName("size")&&(e=Xn[t.getElementsByTagName("size")[0].textContent])!=null?e:""}function Zn(t){var e;if(t.getElementsByTagName("ac")){let[,n]=(e=t.getElementsByTagName("ac")[0])==null?void 0:e.textContent.match(/(\\d+)/);return Number(n)}return 0}function Qn(t){var n,r,i,s,o,l;let e="Unknown";if((n=t.getElementsByTagName("source"))!=null&&n.length)e=t.getElementsByTagName("source")[0].textContent;else if(((r=t.getElementsByTagName("trait"))==null?void 0:r.length)&&Array.from(t.getElementsByTagName("trait")).find(u=>{var a;return((a=u.getElementsByTagName("name"))==null?void 0:a[0].textContent)=="Source"})){let u=Array.from(t.getElementsByTagName("trait")).find(a=>{var f,h;return((h=(f=a.getElementsByTagName("name"))==null?void 0:f[0])==null?void 0:h.textContent)=="Source"});e=(o=(s=(i=u==null?void 0:u.getElementsByTagName("text"))==null?void 0:i[0])==null?void 0:s.textContent)==null?void 0:o.replace(/p. \\d+/,"").trim()}else if((l=t.getElementsByTagName("description"))!=null&&l.length){let u=t.getElementsByTagName("description"),a="Source: ";if(u[0].textContent.includes(a)){let f=u[0].textContent.lastIndexOf(a);e=u[0].textContent.slice(f+a.length).split(/, ?/)[0]}}return e}var Jn={STR:"strength",DEX:"dexterity",CON:"constitution",INT:"intelligence",WIS:"wisdom",CHA:"charisma"};async function fn(t){return new Promise((e,n)=>{let r=new FileReader,i=[];r.onload=async s=>{var o,l,u,a,f,h,S,_,y,C,v,M,P,R,w,W,d,G,k,N,L,b,Y,J,V,B,A,g,ee,E,X,nt,rt,it,st,at,ot,ct,lt,ut,ft,mt,pt,ht,gt,dt,St,vt,yt,Rt,Ct,Et,_t;try{let Pe=JSON.parse(s.target.result),Sn=Object.keys(Pe).filter(ke=>/^Creatures\\./.test(ke));for(let ke of Sn)try{let T=Pe[ke],vn={name:T.Name,source:(o=T.Source)!=null&&o.trim().length?(l=T.Source)==null?void 0:l.trim():"Unknown",type:(f=(a=(u=T.Type)==null?void 0:u.split(/,\\s?/))==null?void 0:a[0])==null?void 0:f.trim(),subtype:"",size:"",alignment:(_=(S=(h=T.Type)==null?void 0:h.split(/,\\s?/))==null?void 0:S[1])==null?void 0:_.trim(),hp:(y=T.HP)==null?void 0:y.Value,hit_dice:(M=(v=(C=T.HP)==null?void 0:C.Notes)==null?void 0:v.replace(/([()])/g,""))==null?void 0:M.trim(),ac:T.AC.Value,speed:(R=(P=T.Speed)==null?void 0:P.join(", "))==null?void 0:R.trim(),stats:Object.values((w=T.Abilities)!=null?w:{}),damage_immunities:(k=(G=(d=(W=T.DamageImmunities)==null?void 0:W.join("; "))==null?void 0:d.toLowerCase())==null?void 0:G.trim())!=null?k:"",damage_resistances:(Y=(b=(L=(N=T.DamageResistances)==null?void 0:N.join(", "))==null?void 0:L.toLowerCase())==null?void 0:b.trim())!=null?Y:"",damage_vulnerabilities:(A=(B=(V=(J=T.DamageVulnerabilities)==null?void 0:J.join(", "))==null?void 0:V.toLowerCase())==null?void 0:B.trim())!=null?A:"",condition_immunities:(X=(E=(ee=(g=T.ConditionImmunities)==null?void 0:g.join(", "))==null?void 0:ee.toLowerCase())==null?void 0:E.trim())!=null?X:"",saves:(rt=(nt=T.Saves)==null?void 0:nt.map(({Name:D,Modifier:Fe})=>({[Jn[D]]:Fe})))!=null?rt:[],skillsaves:(st=(it=T.Skills)==null?void 0:it.map(({Name:D,Modifier:Fe})=>({[D]:Fe})))!=null?st:[],senses:(ct=(ot=(at=T.Senses)==null?void 0:at.join(", "))==null?void 0:ot.trim())!=null?ct:"",languages:(ft=(ut=(lt=T.Languages)==null?void 0:lt.join(", "))==null?void 0:ut.trim())!=null?ft:"",cr:(pt=(mt=T.Challenge)==null?void 0:mt.trim())!=null?pt:"",traits:(gt=(ht=T.Traits)==null?void 0:ht.map(D=>({name:D.Name,desc:D.Content})))!=null?gt:[],actions:(St=(dt=T.Actions)==null?void 0:dt.map(D=>({name:D.Name,desc:D.Content})))!=null?St:[],bonus_actions:(yt=(vt=T.BonusActions)==null?void 0:vt.map(D=>({name:D.Name,desc:D.Content})))!=null?yt:[],reactions:(Ct=(Rt=T.Reactions)==null?void 0:Rt.map(D=>({name:D.Name,desc:D.Content})))!=null?Ct:[],legendary_actions:(_t=(Et=T.LegendaryActions)==null?void 0:Et.map(D=>({name:D.Name,desc:D.Content})))!=null?_t:[],image:null};i.push(vn)}catch(T){continue}e(i)}catch(Pe){n()}},r.readAsText(t)})}async function mn(t){return new Promise((e,n)=>{let r=new FileReader;r.onload=async i=>{var o,l,u,a,f,h,S,_,y,C,v,M,P,R,w,W,d,G,k,N,L,b,Y,J,V;let s=[];try{let B=JSON.parse(i.target.result),A=[];B.creatures?A=B.creatures:A=[B];for(let g of A)try{let ee={image:null,name:g.name,source:"CritterDB",type:g.stats.race,subtype:"",size:g.stats.size,alignment:g.stats.alignment,hp:g.stats.hitPoints,hit_dice:`${Math.floor(g.stats.extraHealthFromConstitution/g.stats.abilityScoreModifiers.constitution)}d${g.stats.hitDieSize} + ${g.stats.extraHealthFromConstitution}`,ac:g.stats.armorClass,speed:g.stats.speed,stats:[g.stats.abilityScores.strength,g.stats.abilityScores.dexterity,g.stats.abilityScores.constitution,g.stats.abilityScores.intelligence,g.stats.abilityScores.wisdom,g.stats.abilityScores.charisma],damage_immunities:(l=(o=g.stats.damageImmunities)==null?void 0:o.join("; ").toLowerCase().trim())!=null?l:"",damage_resistances:(a=(u=g.stats.damageResistances)==null?void 0:u.join(", ").toLowerCase().trim())!=null?a:"",damage_vulnerabilities:(h=(f=g.stats.damageVulnerabilities)==null?void 0:f.join(", ").toLowerCase().trim())!=null?h:"",condition_immunities:(_=(S=g.stats.conditionImmunities)==null?void 0:S.join(", ").toLowerCase().trim())!=null?_:"",saves:(C=(y=g.stats.savingThrows)==null?void 0:y.map(E=>{var X;if(!(!("value"in E)&&!("modifier"in E)))return{[E.ability]:(X=E.value)!=null?X:E.modifier}}).filter(E=>E))!=null?C:[],skillsaves:(M=(v=g.stats.skills)==null?void 0:v.map(E=>{var X;if(!(!("value"in E)&&!("modifier"in E)))return{[E.name]:(X=E.value)!=null?X:E.modifier}}).filter(E=>E))!=null?M:[],senses:(R=(P=g.stats.senses)==null?void 0:P.join(", ").trim())!=null?R:"",languages:(W=(w=g.stats.languages)==null?void 0:w.join(", ").trim())!=null?W:"",cr:(d=g.stats.challengeRating)!=null?d:"",traits:(k=(G=g.stats.additionalAbilities)==null?void 0:G.map(E=>({name:E.name,desc:E.description.replace(/<[^>]*>/g,"")})))!=null?k:[],actions:(L=(N=g.stats.actions)==null?void 0:N.map(E=>({name:E.name,desc:E.description.replace(/<[^>]*>/g,"")})))!=null?L:[],reactions:(Y=(b=g.stats.reactions)==null?void 0:b.map(E=>({name:E.name,desc:E.description.replace(/<[^>]*>/g,"")})))!=null?Y:[],legendary_actions:(V=(J=g.stats.legendaryActions)==null?void 0:J.map(E=>({name:E.name,desc:E.description.replace(/<[^>]*>/g,"")})))!=null?V:[]};s.push(ee)}catch(ee){continue}e(s)}catch(B){n()}},r.readAsText(t)})}function Ae(t,e=0,n=" ",r=!0){let i=[];if(e==5||t==null)return"";if(typeof t=="string")return t;if(typeof t=="number")return`${t}`;if(Array.isArray(t))i.push(`${r?"(":""}${t.map(s=>Ae(s,e++)).join(n)}${r?")":""}`);else if(typeof t=="object")for(let s of Object.values(t))i.push(Ae(s,e++));return i.join(" ")}var er={str:"strength",dex:"dexterity",con:"constitution",wis:"wisdom",int:"intelligence",cha:"charisma"};function H(t){return t?t.replace(/{@condition (.+?)}/g,"$1").replace(/{@item (.+?)}/g,"$1").replace(/{@spell ([\\s\\S]+?)}/g,"$1").replace(/{@recharge (.+?)}/g,"(Recharge $1-6)").replace(/{@recharge}/g,"(Recharge 6)").replace(/{@h}/g,"").replace(/{@damage (.+?)}/g,"$1").replace(/{@atk ms}/g,"Melee Spell Attack").replace(/{@atk rs}/g,"Ranged Spell Attack").replace(/{@atk mw}/g,"Melee Weapon Attack").replace(/{@atk rw}/g,"Ranged Weapon Attack").replace(/{@atk mw,rw}/g,"Melee / Ranged Weapon Attack").replace(/{@creature (.+?)}/g,"$1").replace(/{@skill (.+?)}/g,"$1").replace(/{@dice (.+?)}/g,"$1").replace(/{@hit (\\d+?)}/g,"+$1").replace(/{@dc (\\d+?)}/g,"$1").replace(/{@quickref (.+?)\\|\\|.+?}/,"$1"):""}async function pn(t){return new Promise((e,n)=>{let r=new FileReader;r.onload=async i=>{var s,o,l,u,a,f,h,S,_,y,C,v,M,P;try{let R=JSON.parse(i.target.result),w;"monster"in R?w=R.monster:Array.isArray(R)?w=R:typeof R=="object"?w=[R]:n("Invalid monster JSON provided.");let W=[];for(let d of w)try{let G={image:null,name:d.name,source:mr(d),type:tr(d.type),subtype:"",size:_r[(s=d.size)==null?void 0:s[0]],alignment:lr(d),hp:d.hp&&"average"in d.hp?(o=d.hp)==null?void 0:o.average:null,hit_dice:d.hp&&"formula"in d.hp?(l=d.hp)==null?void 0:l.formula:"",ac:ir(d.ac),speed:ur(d),stats:[d.str,d.dex,d.con,d.int,d.wis,d.cha],damage_immunities:H(fe(d.immune)),damage_resistances:H(fe(d.resist)),damage_vulnerabilities:H(fe(d.vulnerable)),condition_immunities:H(fe(d.conditionImmune)),saves:Object.entries((u=d.save)!=null?u:{}).map(k=>{var L,b;if(!k||!k[1])return;let[,N]=(b=(L=k[1])==null?void 0:L.match(/.*?(\\d+)/))!=null?b:[];if(!!N)return{[er[k[0]]]:N}}).filter(k=>k),skillsaves:ma(d),senses:fr(d),languages:Ae(d.languages,0,", ",!1),cr:nr(d.cr),traits:(f=(a=d.trait)==null?void 0:a.flatMap(Te))!=null?f:[],actions:(S=(h=d.action)==null?void 0:h.flatMap(Te))!=null?S:[],bonus_actions:(y=(_=d.bonus)==null?void 0:_.flatMap(Te))!=null?y:[],reactions:(v=(C=d.reaction)==null?void 0:C.flatMap(Te))!=null?v:[],legendary_actions:(P=(M=d.legendary)==null?void 0:M.flatMap(Te))!=null?P:[],spells:cr(d),spellsNotes:rr(d).join(" ")};W.push(G)}catch(G){console.error(G);continue}e(W)}catch(R){console.error("reject!!!",R),n(R)}},r.readAsText(t)})}function tr(t){if(!!t)return typeof t=="string"?t:t.type}function nr(t){if(!!t)return typeof t=="string"?t:t.cr}function rr(t){let e=[];for(let n in t.spellcasting)e.push(Ae(t.spellcasting[n].footerEntries,0,", ",!1));return e}function fe(t){if(!t)return"";let e=[];for(let n of t){if(typeof n=="string"){e.push(n);continue}if("special"in n){e.push(n.special);continue}if("immune"in n){e.push(`${fe(n.immune)}${n.note?" ":""}${n.note?n.note:""}`);continue}if("resist"in n){e.push(`${fe(n.resist)}${n.note?" ":""}${n.note?n.note:""}`);continue}}return e.join(", ")}function ir(t=[]){var n;let[e]=t;if(!!e){if(typeof e=="number")return e;if(typeof e=="string"){let[r,i]=(n=e.match(/(\\d+)/))!=null?n:[];return i?Number(i):null}if(typeof e=="object")return"special"in e?null:e.ac}}var sr={0:"Cantrips (at will)",1:"1st level",2:"2nd level",3:"3rd level",4:"4th level",5:"5th level",6:"6th level",7:"7th level",8:"8th level",9:"9th level"};function Ze(t){let e=[];for(let n of t){if(typeof n=="string"){e.push(n);continue}!n.hidden&&n.entry&&n.entry.length&&e.push(n.entry)}return H(e.join(", "))}function ar(t){let e=[];for(let n of Object.keys(t)){let r=t[n],i=Number(n.replace(/[^0-9]/,""));e.push([i,Ze(r)])}return e}function or(t){var i,s;let e=[H(((i=t.headerEntries)!=null?i:[]).join(`\n`))];if("spells"in t)try{for(let o in(s=t.spells)!=null?s:{}){let l=t.spells[o],{spells:u}=l,a=`${sr[o]}`;a+="slots"in l?` (${l.slots} slots)`:"";let f=H(u.join(", "));e.push({[a]:f})}}catch(o){throw new Error("There was an error parsing the spells.")}if("will"in t&&t.will.length>0)try{e.push({"At will":Ze(t.will)})}catch(o){throw new Error("There was an error parsing the at-will spells.")}if("ritual"in t&&t.ritual.length>0)try{e.push({Rituals:Ze(t.ritual)})}catch(o){throw new Error("There was an error parsing the ritual spells.")}let n=["rest","daily","weekly","yearly","charges"],r={rest:"/rest each",daily:"/day each",weekly:"/week each",yearly:"/year each",charges:" charges"};for(let o of n)if(o in t){let l=ar(t[o]);for(let u of l.sort((a,f)=>f[0]-a[0]))e.push({[`${u[0]}${r[o]}`]:u[1]})}return e}function cr(t){return!t.spellcasting||!t.spellcasting.length?[]:t.spellcasting.flatMap(or)}function lr(t){return t.alignment?Qe(t.alignment):null}function Qe(t){var n;if(!t)return null;let e=[];if(Array.isArray(t))for(let r of t)e.push(Qe(r));else if(typeof t=="object"){if("special"in t&&t.special!=null)return t.special;if("alignment"in t)return`${((n=t.alignment)!=null?n:[]).map(r=>Qe(r)).join(" ")}${t.chance?` (${t.chance}%)`:""}${t.note?` (${t.note})`:""}`}else{switch(t.toUpperCase()){case"L":return"lawful";case"N":return"neutral";case"NX":return"neutral (law/chaos axis)";case"NY":return"neutral (good/evil axis)";case"C":return"chaotic";case"G":return"good";case"E":return"evil";case"U":return"unaligned";case"A":return"any alignment"}return t}return e.join(" or ")}function ur(t){var l,u;let e=t.speed;if(!e)return"\\u2014";if(typeof e=="number")return`${e}`;function n(a){return typeof a=="number"?a:a.number!=null?a.number:a}function r(a){var f;return typeof a=="number"?"":(f=a==null?void 0:a.condition)!=null?f:""}let i=[],s=["walk","burrow","climb","fly","swim"];for(let a of s){if(a!="walk"&&!(a in e)&&!(a in((l=e.alternate)!=null?l:{})))continue;let f=[];i.push(`${a==="walk"?"":`${a} `}${n((u=e[a])!=null?u:0)} ft. ${r(e[a])}`.trim()),e.alternate&&e.alternate[a]&&e.alternate[a].forEach(h=>{i.push(`${a==="walk"?"":`${a} `}${n(h!=null?h:0)} ft. ${r(h)}`.trim())})}let o=", ";if(e.choose){o="; ";let a=e.choose.from.sort();a.length>1?(`${a.slice(0,a.length-1).join(", ")}${a[a.length-1]}${e.choose.amount}`,e.choose.note&&`${e.choose.note}`):i.push(`${a} ${e.choose.amount} ft.${e.choose.note?` ${e.choose.note}`:""}`)}return i.join(o)}function fr(t){var n,r;if(typeof t.senses=="string")return t.senses;let e=[(r=(n=t.senses)==null?void 0:n.join(", ").trim())!=null?r:""];return t.passive&&e.push(`passive Perception ${t.passive}`),e.join(", ")}function mr(t){var n,r,i;let e=[];return(n=t.source)!=null&&n.length&&e.push((r=c[t.source])!=null?r:t.source),(i=t.otherSources)!=null&&i.length&&e.push(...t.otherSources.map(s=>{var o;return(o=c[s.source])!=null?o:s.source})),e}function Te(t){return t.entries.reduce((n,r)=>{var s;if(typeof r!="string"){let o=(s=r.items)==null?void 0:s.map(l=>typeof l=="string"?{name:l,entries:[]}:"entry"in l?{name:l.name,entries:[l.entry]}:{name:l.name,entries:l.entries});return n.concat(o!=null?o:[])}return n.length>1||n[0].entries.push(r),n},[{name:t.name,entries:[]}]).map(({name:n,entries:r})=>({name:H(n),desc:H(r.join(`\n`))}))}var pr="F",hr="D",gr="T",dr="S",Sr="M",vr="L",yr="H",Rr="G",Cr="C",Er="V",_r={[pr]:"Fine",[hr]:"Diminutive",[gr]:"Tiny",[dr]:"Small",[Sr]:"Medium",[vr]:"Large",[yr]:"Huge",[Rr]:"Gargantuan",[Cr]:"Colossal",[Er]:"Varies"},Ar="CoS",Tr="DMG",br="EEPC",Nr="EET",wr="HotDQ",Dr="LMoP",$r="Mag",xr="MM",Mr="OotA",Or="PHB",Ir="PotA",Pr="RoT",kr="RoTOS",Fr="SCAG",Ur="SKT",Lr="ToA",Wr="ToD",Gr="TTP",jr="TftYP",Br="TftYP-AtG",Vr="TftYP-DiT",zr="TftYP-TFoF",Hr="TftYP-THSoT",Kr="TftYP-TSC",Yr="TftYP-ToH",Xr="TftYP-WPM",qr="VGM",Zr="XGE",Qr="OGA",Jr="MTF",ei="WDH",ti="WDMM",ni="GGR",ri="KKW",ii="LLK",si="GoS",ai="AI",oi="OoW",ci="ESK",li="DIP",ui="HftT",fi="DC",mi="SLW",pi="SDW",hi="BGDIA",gi="LR",di="AL",Si="SAC",vi="ERLW",yi="EFR",Ri="RMBRE",Ci="RMR",Ei="MFF",_i="AWM",Ai="IMR",Ti="SADS",bi="EGW",Ni="ToR",wi="DD",Di="FS",$i="US",xi="MOT",Mi="IDRotF",Oi="TCE",Ii="VRGR",Pi="HoL",ki="Screen",Fi="ScreenWildernessKit",Ui="HF",Li="CM",Wi="WBtW",Gi="CRCotN",Je="AL",ji=`${Je}CurseOfStrahd`,Bi=`${Je}ElementalEvil`,Vi=`${Je}RageOfDemons`,me="PS",zi=`${me}A`,Hi=`${me}I`,Ki=`${me}K`,Yi=`${me}Z`,Xi=`${me}X`,qi=`${me}D`,m="UA",Zi=`${m}Artificer`,Qi=`${m}EladrinAndGith`,Ji=`${m}Eberron`,es=`${m}FeatsForRaces`,ts=`${m}FeatsForSkills`,ns=`${m}FiendishOptions`,rs=`${m}Feats`,is=`${m}GothicHeroes`,ss=`${m}ModernMagic`,as=`${m}StarterSpells`,os=`${m}TheMysticClass`,cs=`${m}ThatOldBlackMagic`,ls=`${m}TheRangerRevised`,us=`${m}WaterborneAdventures`,fs=`${m}VariantRules`,ms=`${m}LightDarkUnderdark`,ps=`${m}RangerAndRogue`,hs=`${m}ATrioOfSubclasses`,gs=`${m}BarbarianPrimalPaths`,ds=`${m}RevisedSubclasses`,Ss=`${m}KitsOfOld`,vs=`${m}BardBardColleges`,ys=`${m}ClericDivineDomains`,Rs=`${m}Druid`,Cs=`${m}RevisedClassOptions`,Es=`${m}Fighter`,_s=`${m}Monk`,As=`${m}Paladin`,Ts=`${m}ModifyingClasses`,bs=`${m}Sorcerer`,Ns=`${m}WarlockAndWizard`,ws=`${m}TheFaithful`,Ds=`${m}WizardRevisited`,$s=`${m}ElfSubraces`,xs=`${m}MassCombat`,Ms=`${m}ThreePillarExperience`,Os=`${m}GreyhawkInitiative`,Is=`${m}ThreeSubclasses`,Ps=`${m}OrderDomain`,ks=`${m}CentaursMinotaurs`,Fs=`${m}GiantSoulSorcerer`,Us=`${m}RacesOfEberron`,Ls=`${m}RacesOfRavnica`,Ws=`${m}WGE`,Gs=`${m}OfShipsAndSea`,js=`${m}Sidekicks`,Bs=`${m}ArtificerRevisited`,Vs=`${m}BarbarianAndMonk`,zs=`${m}SorcererAndWarlock`,Hs=`${m}BardAndPaladin`,Ks=`${m}ClericDruidWizard`,Ys=`${m}FighterRangerRogue`,Xs=`${m}ClassFeatureVariants`,qs=`${m}FighterRogueWizard`,Zs=`${m}PrestigeClassesRunMagic`,Qs=`${m}Ranger`,Js=`${m}2020SubclassesPt1`,ea=`${m}2020SubclassesPt2`,ta=`${m}2020SubclassesPt3`,na=`${m}2020SubclassesPt4`,ra=`${m}2020SubclassesPt5`,ia=`${m}2020SpellsAndMagicTattoos`,sa=`${m}2020PsionicOptionsRevisited`,aa=`${m}2020SubclassesRevisited`,oa=`${m}2020Feats`,ca=`${m}2021GothicLineages`,la=`${m}2021FolkOfTheFeywild`,ua=`${m}2021DraconicOptions`,fa=`${m}2021MagesOfStrixhaven`,et="Adventurers League: ",pe="Plane Shift: ",p="Unearthed Arcana: ",Q="Tales from the Yawning Portal",c={};c[Ar]="Curse of Strahd";c[Tr]="Dungeon Master\'s Guide";c[br]="Elemental Evil Player\'s Companion";c[Nr]="Elemental Evil: Trinkets";c[wr]="Hoard of the Dragon Queen";c[Dr]="Lost Mine of Phandelver";c[$r]="Dragon Magazine";c[xr]="Monster Manual";c[Mr]="Out of the Abyss";c[Or]="Player\'s Handbook";c[Ir]="Princes of the Apocalypse";c[Pr]="The Rise of Tiamat";c[kr]="The Rise of Tiamat Online Supplement";c[Fr]="Sword Coast Adventurer\'s Guide";c[Ur]="Storm King\'s Thunder";c[Lr]="Tomb of Annihilation";c[Wr]="Tyranny of Dragons";c[Gr]="The Tortle Package";c[jr]=Q;c[Br]=`${Q}: Against the Giants`;c[Vr]=`${Q}: Dead in Thay`;c[zr]=`${Q}: The Forge of Fury`;c[Hr]=`${Q}: The Hidden Shrine of Tamoachan`;c[Kr]=`${Q}: The Sunless Citadel`;c[Yr]=`${Q}: Tomb of Horrors`;c[Xr]=`${Q}: White Plume Mountain`;c[qr]="Volo\'s Guide to Monsters";c[Zr]="Xanathar\'s Guide to Everything";c[Qr]="One Grung Above";c[Jr]="Mordenkainen\'s Tome of Foes";c[ei]="Waterdeep: Dragon Heist";c[ti]="Waterdeep: Dungeon of the Mad Mage";c[ni]="Guildmasters\' Guide to Ravnica";c[ri]="Krenko\'s Way";c[ii]="Lost Laboratory of Kwalish";c[si]="Ghosts of Saltmarsh";c[ai]="Acquisitions Incorporated";c[oi]="The Orrery of the Wanderer";c[ci]="Essentials Kit";c[li]="Dragon of Icespire Peak";c[ui]="Hunt for the Thessalhydra";c[fi]="Divine Contention";c[mi]="Storm Lord\'s Wrath";c[pi]="Sleeping Dragon\'s Wake";c[hi]="Baldur\'s Gate: Descent Into Avernus";c[gi]="Locathah Rising";c[di]="Adventurers\' League";c[Si]="Sage Advice Compendium";c[vi]="Eberron: Rising from the Last War";c[yi]="Eberron: Forgotten Relics";c[Ri]="The Lost Dungeon of Rickedness: Big Rick Energy";c[Ci]="Dungeons & Dragons vs. Rick and Morty: Basic Rules";c[Ei]="Mordenkainen\'s Fiendish Folio";c[_i]="Adventure with Muk";c[Ai]="Infernal Machine Rebuild";c[Ti]="Sapphire Anniversary Dice Set";c[bi]="Explorer\'s Guide to Wildemount";c[Ni]="Tide of Retribution";c[wi]="Dangerous Designs";c[Di]="Frozen Sick";c[$i]="Unwelcome Spirits";c[xi]="Mythic Odysseys of Theros";c[Mi]="Icewind Dale: Rime of the Frostmaiden";c[Oi]="Tasha\'s Cauldron of Everything";c[Ii]="Van Richten\'s Guide to Ravenloft";c[Pi]="The House of Lament";c[ki]="Dungeon Master\'s Screen";c[Fi]="Dungeon Master\'s Screen: Wilderness Kit";c[Ui]="Heroes\' Feast";c[Li]="Candlekeep Mysteries";c[ji]=`${et}Curse of Strahd`;c[Bi]=`${et}Elemental Evil`;c[Vi]=`${et}Rage of Demons`;c[zi]=`${pe}Amonkhet`;c[Hi]=`${pe}Innistrad`;c[Ki]=`${pe}Kaladesh`;c[Yi]=`${pe}Zendikar`;c[Xi]=`${pe}Ixalan`;c[qi]=`${pe}Dominaria`;c[Zi]=`${p}Artificer`;c[Qi]=`${p}Eladrin and Gith`;c[Ji]=`${p}Eberron`;c[es]=`${p}Feats for Races`;c[ts]=`${p}Feats for Skills`;c[ns]=`${p}Fiendish Options`;c[rs]=`${p}Feats`;c[is]=`${p}Gothic Heroes`;c[ss]=`${p}Modern Magic`;c[as]=`${p}Starter Spells`;c[os]=`${p}The Mystic Class`;c[cs]=`${p}That Old Black Magic`;c[ls]=`${p}The Ranger, Revised`;c[us]=`${p}Waterborne Adventures`;c[fs]=`${p}Variant Rules`;c[ms]=`${p}Light, Dark, Underdark!`;c[ps]=`${p}Ranger and Rogue`;c[hs]=`${p}A Trio of Subclasses`;c[gs]=`${p}Barbarian Primal Paths`;c[ds]=`${p}Revised Subclasses`;c[Ss]=`${p}Kits of Old`;c[vs]=`${p}Bard: Bard Colleges`;c[ys]=`${p}Cleric: Divine Domains`;c[Rs]=`${p}Druid`;c[Cs]=`${p}Revised Class Options`;c[Es]=`${p}Fighter`;c[_s]=`${p}Monk`;c[As]=`${p}Paladin`;c[Ts]=`${p}Modifying Classes`;c[bs]=`${p}Sorcerer`;c[Ns]=`${p}Warlock and Wizard`;c[ws]=`${p}The Faithful`;c[Ds]=`${p}Wizard Revisited`;c[$s]=`${p}Elf Subraces`;c[xs]=`${p}Mass Combat`;c[Ms]=`${p}Three-Pillar Experience`;c[Os]=`${p}Greyhawk Initiative`;c[Is]=`${p}Three Subclasses`;c[Ps]=`${p}Order Domain`;c[ks]=`${p}Centaurs and Minotaurs`;c[Fs]=`${p}Giant Soul Sorcerer`;c[Us]=`${p}Races of Eberron`;c[Ls]=`${p}Races of Ravnica`;c[Ws]="Wayfinder\'s Guide to Eberron";c[Gs]=`${p}Of Ships and the Sea`;c[js]=`${p}Sidekicks`;c[Bs]=`${p}Artificer Revisited`;c[Vs]=`${p}Barbarian and Monk`;c[zs]=`${p}Sorcerer and Warlock`;c[Hs]=`${p}Bard and Paladin`;c[Ks]=`${p}Cleric, Druid, and Wizard`;c[Ys]=`${p}Fighter, Ranger, and Rogue`;c[Xs]=`${p}Class Feature Variants`;c[qs]=`${p}Fighter, Rogue, and Wizard`;c[Zs]=`${p}Prestige Classes and Rune Magic`;c[Qs]=`${p}Ranger`;c[Js]=`${p}2020 Subclasses, Part 1`;c[ea]=`${p}2020 Subclasses, Part 2`;c[ta]=`${p}2020 Subclasses, Part 3`;c[na]=`${p}2020 Subclasses, Part 4`;c[ra]=`${p}2020 Subclasses, Part 5`;c[ia]=`${p}2020 Spells and Magic Tattoos`;c[sa]=`${p}2020 Psionic Options Revisited`;c[aa]=`${p}2020 Subclasses Revisited`;c[oa]=`${p}2020 Feats`;c[ca]=`${p}2021 Gothic Lineages`;c[la]=`${p}2021 Folk of the Feywild`;c[ua]=`${p}2021 Draconic Options`;c[fa]=`${p}2021 Mages of Strixhaven`;c[Wi]="The Wild Beyond the Witchlight";c[Gi]="Critical Role: Call of the Netherdeep";function ma(t){var i,s,o;let e=t.skill;if(!e)return[];let n=[],r=[];for(let l of Object.keys(e)){if(l=="other"){let f=e[l];for(let h of f){let S=h.oneOf;if(!S)continue;let _=Object.keys(S).sort(),y=_.shift(),C=S[y],[,v]=(i=C==null?void 0:C.match(/.*?(\\d+)/))!=null?i:[];r.push({[`plus one of the following: ${y.charAt(0).toUpperCase()+y.slice(1)}`]:v});for(let M of _.slice(1)){let P=S[M],[,R]=(s=P==null?void 0:P.match(/.*?(\\d+)/))!=null?s:[];!R||r.push({[M]:R})}}continue}let u=e[l],[,a]=(o=u==null?void 0:u.match(/.*?(\\d+)/))!=null?o:[];!a||n.push({[l]:a})}return[...n.filter(l=>l),...r.filter(l=>l)]}var hn={0:{cr:"0",value:0,xp:0},"1/8":{cr:"1/8",value:.125,xp:25},"1/4":{cr:"1/4",value:.25,xp:50},"1/2":{cr:"1/2",value:.5,xp:100},"0.125":{cr:"1/8",value:.125,xp:25},"0.25":{cr:"1/4",value:.25,xp:50},"0.5":{cr:"1/2",value:.5,xp:100},1:{cr:"1",value:1,xp:200},2:{cr:"2",value:2,xp:450},3:{cr:"3",value:3,xp:700},4:{cr:"4",value:4,xp:1100},5:{cr:"5",value:5,xp:1800},6:{cr:"6",value:6,xp:2300},7:{cr:"7",value:7,xp:2900},8:{cr:"8",value:8,xp:3900},9:{cr:"9",value:9,xp:5e3},10:{cr:"10",value:10,xp:5900},11:{cr:"11",value:11,xp:7200},12:{cr:"12",value:12,xp:8400},13:{cr:"13",value:13,xp:1e4},14:{cr:"14",value:14,xp:11500},15:{cr:"15",value:15,xp:13e3},16:{cr:"16",value:16,xp:15e3},17:{cr:"17",value:17,xp:18e3},18:{cr:"18",value:18,xp:2e4},19:{cr:"19",value:19,xp:22e3},20:{cr:"20",value:20,xp:25e3},21:{cr:"21",value:21,xp:33e3},22:{cr:"22",value:22,xp:41e3},23:{cr:"23",value:23,xp:5e4},24:{cr:"24",value:24,xp:62e3},25:{cr:"25",value:25,xp:75e3},26:{cr:"26",value:26,xp:9e4},27:{cr:"27",value:27,xp:105e3},28:{cr:"28",value:28,xp:12e4},29:{cr:"29",value:29,xp:135e3},30:{cr:"30",value:30,xp:155e3}};function K(t){return Math.floor(((t!=null?t:10)-10)/2)}var gn={tiny:4,small:6,medium:8,large:10,huge:12,gargantuan:20},pa={str:"strength",dex:"dexterity",con:"constitution",int:"intelligence",wis:"wisdom",cha:"charisma"},be=class{constructor(e){this.monster=e;this.proficiency=this.getProf(this.monster);this.stats={str:this.monster.strPoints,dex:this.monster.dexPoints,con:this.monster.conPoints,int:this.monster.intPoints,wis:this.monster.wisPoints,cha:this.monster.chaPoints};this.modifiers={str:K(this.stats.str),dex:K(this.stats.dex),con:K(this.stats.con),int:K(this.stats.int),wis:K(this.stats.wis),cha:K(this.stats.cha)}}static parse(e){var i,s,o,l,u,a;let n=new be(e);return{image:null,name:e.name,source:"TetraCube",type:e.type,subtype:"",size:e.size,alignment:e.alignment,hp:(i=n.getHP(e))==null?void 0:i.hp,hit_dice:(s=n.getHP(e))==null?void 0:s.dice,ac:(u=(l=((o=e.ac)!=null?o:[])[0])==null?void 0:l.ac)!=null?u:"",speed:n.getSpeedString(e),stats:[e.strPoints,e.dexPoints,e.conPoints,e.intPoints,e.wisPoints,e.chaPoints],damage_immunities:n.parseImmune(e,"i"),damage_resistances:n.parseImmune(e,"r"),damage_vulnerabilities:n.parseImmune(e,"v"),condition_immunities:n.parseConditions(e),saves:n.getSaves(e),skillsaves:n.getSkills(e),senses:n.getSenses(e),languages:n.getLanguages(e),cr:(a=e.cr)!=null?a:"",traits:n.getTraits(e.abilities),actions:n.getTraits(e.actions),reactions:n.getTraits(e.reactions),legendary_actions:n.getTraits(e.legendaries),spells:n.getSpells(e.abilities)}}getHP(e){var n,r;if(e.customHP||e.hitDice&&/(\\d+) \\((.+)\\)/.test(e.hpText)){let[i,s,o]=(n=e.hpText.match(/(\\d+) \\((.+)\\)/))!=null?n:[];return{hp:s,dice:o}}if(e.hitDice){let i=Number(e.hitDice),s=(r=gn[e.size])!=null?r:gn.medium,o=this.modifiers.con,l=i*s/(2+.5)+o*i,u=o>0?"+":"-",a=o==0?"":` ${u} ${o*i}`;return{hp:l,dice:`${i}d${s}${a}`}}}getSpeedString(e){if(e.customSpeed)return e.speedDesc;let n=[e.speed+" ft."];return e.burrowSpeed>0&&n.push("burrow "+e.burrowSpeed+" ft."),e.climbSpeed>0&&n.push("climb "+e.climbSpeed+" ft."),e.flySpeed>0&&n.push("fly "+e.flySpeed+" ft."+(e.hover?" (hover)":"")),e.swimSpeed>0&&n.push("swim "+e.swimSpeed+" ft."),n.join(", ")}parseImmune(e,n){let r=[];"damagetypes"in e&&Array.isArray(e.damagetypes)&&r.push(...e.damagetypes.filter(s=>s.type==n).map(s=>s.name));let i=[];return"specialdamage"in e&&Array.isArray(e.specialdamage)&&i.push(...e.specialdamage.filter(s=>s.type==n).map(s=>s.name)),[r.join(", "),i.join(", ")].filter(s=>s&&s.length).join("; ")}getLanguages(e){let n=[],r=[],i=[];for(let s=0;s<e.languages.length;s++){let o=e.languages[s];o.speaks||o.speaks==null?r.push(o):i.push(o)}return r.length>0&&n.push([r.slice(0,r.length-2).map(s=>s.name).join(", "),r.slice(-1).map(s=>s.name)].filter(s=>s).join(" and ")),i.length>0&&n.push([i.slice(0,i.length-2).map(s=>s.name).join(", "),i.slice(-1).map(s=>s.name)].filter(s=>s).join(" and ")),e.telepathy>0&&n.push("telepathy "+e.telepathy+" ft."),n.length==0&&n.push("&mdash;"),n.join("; ")}getSenses(e){let n=[];e.blindsight>0&&n.push("blindsight "+e.blindsight+" ft."+(e.blind?" (blind beyond this radius)":"")),e.darkvision>0&&n.push("darkvision "+e.darkvision+" ft."),e.tremorsense>0&&n.push("tremorsense "+e.tremorsense+" ft."),e.truesight>0&&n.push("truesight "+e.truesight+" ft.");let r=e.skills.find(s=>s.name=="perception"),i=10+K(e.wisPoints);return r!=null&&(i+=this.proficiency*("note"in r?2:1)),n.push("passive Perception "+i),n.join(", ")}transformString(e){return e.replace(/(_|\\*|\\s*>\\s*)/g,"").replace(/\\[MON(S)?\\]/g,`${this.monster.shortName&&this.monster.shortName.length?this.monster.shortName:this.monster.name}$1`).replace(/\\[(\\w+)\\]/g,(n,r)=>{if(r=r.toLowerCase(),!(r in this.modifiers))return n;let i=this.modifiers[r];return`${i>=0?"+":""}${i}`}).replace(/\\[(\\w+) (ATK|SAVE)\\s?(?:([+-])\\s?(\\d+))?\\]/g,(n,r,i="ATK",s="+",o=0)=>{if(r=r.toLowerCase(),!(r in this.modifiers))return n;o=s=="+"?Number(o):-Number(o);let l=(i=="ATK"?0:8)+this.modifiers[r]+this.proficiency+o;return`${l>=0?"+":""}${l}`}).replace(/\\[(\\w+)?\\s?(\\d*[dD]\\d+)\\s?(?:([+-])\\s?(\\d+))?\\]/g,(n,r,i,s="+",o=0)=>{var h;r=r.toLowerCase();let[,l=1,u]=(h=i.match(/(\\d*)[dD](\\d+)/))!=null?h:[];if(l||(l=1),!u)return n;o=s=="+"?Number(o):-Number(o),r in this.modifiers&&(o+=this.modifiers[r]);let a=Math.floor((u/2+.5)*l)+o,f=[`${l}d${u}`];return o&&o!=0&&(f.push(o>=0?"+":"-"),f.push(o)),`${a} (${f.join(" ")})`})}getTraits(e){return!e||!e.length?void 0:e.filter(r=>r.name!="Spellcasting").map(r=>({name:r.name,desc:this.transformString(r.desc)}))}getSpells(e){var i;if(!e.abilities||!e.abilities.length)return;let{desc:n}=(i=e.abilities.find(s=>s.name=="Spellcasting"))!=null?i:{};return n?this.transformString(n).trim().split(`\n`).filter(s=>s.length):void 0}getSaves(e){if(!("sthrows"in e)||!Array.isArray(e.sthrows)||!e.sthrows.length)return[];let n=this.proficiency,r=[];for(let i of e.sthrows){let s=i.name,o=K(Number(e[`${s}Points`]));isNaN(o)||r.push({[pa[s]]:o+n})}return r}getSkills(e){if(!("skills"in e)||!Array.isArray(e.skills)||!e.skills.length)return[];let n=[],r=this.proficiency;for(let i of e.skills){let s=i.stat,o=K(Number(e[`${s}Points`]));if(isNaN(o))continue;let l="note"in i;n.push({[i.name]:r+o+o*Number(l)})}return n}getProf(e){var r,i;let n=0;return e.cr=="*"&&(n=e.customProf),"cr"in e&&e.cr in hn&&(n=Math.max(Math.floor(2+(((i=(r=hn[e.cr])==null?void 0:r.value)!=null?i:0)-1)/4),2)),isNaN(Number(n))?0:Number(n)}parseConditions(e){if("conditions"in e&&Array.isArray(e.conditions))return e.conditions.map(n=>n.name).join(", ")}};async function dn(t){return new Promise((e,n)=>{let r=new FileReader,i=[];r.onload=async s=>{try{let o=JSON.parse(s.target.result),l;"monster"in o?l=o.monster:Array.isArray(o)?l=o:typeof o=="object"?l=[o]:n("Invalid monster JSON provided.");let u=[];for(let a of l)try{let f=be.parse(a);u.push(f)}catch(f){console.error(f);continue}e(u)}catch(o){console.error("reject!!!",o),n(o)}},r.readAsText(t)})}var tt=self;tt.onmessage=async t=>{if(!t.data)return;let{files:e,source:n}=t.data,r=[];for(let i of e)switch(n){case"5e":{let s=await pn(i);r.push(...s!=null?s:[]);break}case"critter":{let s=await mn(i);r.push(...s!=null?s:[]);break}case"improved":{let s=await fn(i);r.push(...s!=null?s:[]);break}case"appfile":{let s=await un(i);r.push(...s!=null?s:[]);break}case"tetra":{let s=await dn(i);r.push(...s!=null?s:[]);break}}tt.postMessage({monsters:r})};tt.addEventListener("unhandledrejection",function(t){throw t.reason});\n');
}

// src/importers/importer.ts
var import_obsidian19 = require("obsidian");
var SourcePromptModal = class extends import_obsidian19.Modal {
  constructor() {
    super(...arguments);
    this.saved = false;
  }
  display() {
    this.titleEl.createSpan({ text: "Set Sources" });
    new import_obsidian19.Setting(this.contentEl).setName(
      "A source could not be found for some imported monsters. Do you wish to manually add one?"
    ).addText((t) => {
      t.setPlaceholder("Unknown").onChange((v) => {
        this.source = v;
      });
    });
    this.buildButtons(this.contentEl);
  }
  buildButtons(el) {
    new import_obsidian19.Setting(el).addButton(
      (b) => b.setCta().setIcon("checkmark").setTooltip("Save").onClick(() => {
        this.saved = true;
        this.close();
      })
    ).addExtraButton(
      (b) => b.setIcon("cross").setTooltip("Cancel").onClick(() => {
        this.close();
      })
    );
  }
  onOpen() {
    this.display();
  }
};
var getSourceFromPrompt = async (app) => {
  return new Promise((resolve) => {
    const modal = new SourcePromptModal(app);
    modal.onClose = () => {
      if (!modal.saved)
        resolve(null);
      resolve(modal.source);
    };
    modal.open();
  });
};
var Importer = class {
  constructor(plugin) {
    this.plugin = plugin;
    this.workers = /* @__PURE__ */ new Map();
  }
  async import(files, source) {
    return new Promise((resolve) => {
      const worker = new Worker2();
      const id = nanoid();
      this.workers.set(id, worker);
      worker.onmessage = async (event) => {
        const { monsters } = event.data ?? {
          monsters: []
        };
        if (monsters) {
          new import_obsidian19.Notice(
            `Successfully imported ${monsters.length} Monsters`
          );
          const sourceless = monsters.filter(
            (monster) => monster.source == "Unknown" || !monster.source
          );
          let source2;
          if (sourceless.length && (source2 = await getSourceFromPrompt(this.plugin.app))) {
            sourceless.forEach(
              (monster) => monster.source = source2
            );
          }
        }
        worker.terminate();
        this.workers.delete(id);
        resolve(monsters);
      };
      worker.onerror = (e) => {
        new import_obsidian19.Notice(
          `There was an error importing the file.

${e.message}`
        );
        worker.terminate();
        this.workers.delete(id);
        resolve([]);
      };
      worker.postMessage({ files, source });
    });
  }
};

// src/util/folder.ts
var import_obsidian21 = require("obsidian");

// src/util/generic_suggester.ts
var import_obsidian20 = require("obsidian");

// node_modules/@popperjs/core/lib/enums.js
var top = "top";
var bottom = "bottom";
var right = "right";
var left = "left";
var auto = "auto";
var basePlacements = [top, bottom, right, left];
var start = "start";
var end = "end";
var clippingParents = "clippingParents";
var viewport = "viewport";
var popper = "popper";
var reference = "reference";
var variationPlacements = /* @__PURE__ */ basePlacements.reduce(function(acc, placement) {
  return acc.concat([placement + "-" + start, placement + "-" + end]);
}, []);
var placements = /* @__PURE__ */ [].concat(basePlacements, [auto]).reduce(function(acc, placement) {
  return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
}, []);
var beforeRead = "beforeRead";
var read = "read";
var afterRead = "afterRead";
var beforeMain = "beforeMain";
var main = "main";
var afterMain = "afterMain";
var beforeWrite = "beforeWrite";
var write = "write";
var afterWrite = "afterWrite";
var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

// node_modules/@popperjs/core/lib/dom-utils/getNodeName.js
function getNodeName(element2) {
  return element2 ? (element2.nodeName || "").toLowerCase() : null;
}

// node_modules/@popperjs/core/lib/dom-utils/getWindow.js
function getWindow(node) {
  if (node == null) {
    return window;
  }
  if (node.toString() !== "[object Window]") {
    var ownerDocument = node.ownerDocument;
    return ownerDocument ? ownerDocument.defaultView || window : window;
  }
  return node;
}

// node_modules/@popperjs/core/lib/dom-utils/instanceOf.js
function isElement(node) {
  var OwnElement = getWindow(node).Element;
  return node instanceof OwnElement || node instanceof Element;
}
function isHTMLElement(node) {
  var OwnElement = getWindow(node).HTMLElement;
  return node instanceof OwnElement || node instanceof HTMLElement;
}
function isShadowRoot(node) {
  if (typeof ShadowRoot === "undefined") {
    return false;
  }
  var OwnElement = getWindow(node).ShadowRoot;
  return node instanceof OwnElement || node instanceof ShadowRoot;
}

// node_modules/@popperjs/core/lib/modifiers/applyStyles.js
function applyStyles(_ref) {
  var state = _ref.state;
  Object.keys(state.elements).forEach(function(name) {
    var style = state.styles[name] || {};
    var attributes = state.attributes[name] || {};
    var element2 = state.elements[name];
    if (!isHTMLElement(element2) || !getNodeName(element2)) {
      return;
    }
    Object.assign(element2.style, style);
    Object.keys(attributes).forEach(function(name2) {
      var value = attributes[name2];
      if (value === false) {
        element2.removeAttribute(name2);
      } else {
        element2.setAttribute(name2, value === true ? "" : value);
      }
    });
  });
}
function effect(_ref2) {
  var state = _ref2.state;
  var initialStyles = {
    popper: {
      position: state.options.strategy,
      left: "0",
      top: "0",
      margin: "0"
    },
    arrow: {
      position: "absolute"
    },
    reference: {}
  };
  Object.assign(state.elements.popper.style, initialStyles.popper);
  state.styles = initialStyles;
  if (state.elements.arrow) {
    Object.assign(state.elements.arrow.style, initialStyles.arrow);
  }
  return function() {
    Object.keys(state.elements).forEach(function(name) {
      var element2 = state.elements[name];
      var attributes = state.attributes[name] || {};
      var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]);
      var style = styleProperties.reduce(function(style2, property) {
        style2[property] = "";
        return style2;
      }, {});
      if (!isHTMLElement(element2) || !getNodeName(element2)) {
        return;
      }
      Object.assign(element2.style, style);
      Object.keys(attributes).forEach(function(attribute) {
        element2.removeAttribute(attribute);
      });
    });
  };
}
var applyStyles_default = {
  name: "applyStyles",
  enabled: true,
  phase: "write",
  fn: applyStyles,
  effect,
  requires: ["computeStyles"]
};

// node_modules/@popperjs/core/lib/utils/getBasePlacement.js
function getBasePlacement(placement) {
  return placement.split("-")[0];
}

// node_modules/@popperjs/core/lib/utils/math.js
var max = Math.max;
var min = Math.min;
var round = Math.round;

// node_modules/@popperjs/core/lib/utils/userAgent.js
function getUAString() {
  var uaData = navigator.userAgentData;
  if (uaData != null && uaData.brands) {
    return uaData.brands.map(function(item) {
      return item.brand + "/" + item.version;
    }).join(" ");
  }
  return navigator.userAgent;
}

// node_modules/@popperjs/core/lib/dom-utils/isLayoutViewport.js
function isLayoutViewport() {
  return !/^((?!chrome|android).)*safari/i.test(getUAString());
}

// node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js
function getBoundingClientRect(element2, includeScale, isFixedStrategy) {
  if (includeScale === void 0) {
    includeScale = false;
  }
  if (isFixedStrategy === void 0) {
    isFixedStrategy = false;
  }
  var clientRect = element2.getBoundingClientRect();
  var scaleX = 1;
  var scaleY = 1;
  if (includeScale && isHTMLElement(element2)) {
    scaleX = element2.offsetWidth > 0 ? round(clientRect.width) / element2.offsetWidth || 1 : 1;
    scaleY = element2.offsetHeight > 0 ? round(clientRect.height) / element2.offsetHeight || 1 : 1;
  }
  var _ref = isElement(element2) ? getWindow(element2) : window, visualViewport = _ref.visualViewport;
  var addVisualOffsets = !isLayoutViewport() && isFixedStrategy;
  var x = (clientRect.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX;
  var y = (clientRect.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY;
  var width = clientRect.width / scaleX;
  var height = clientRect.height / scaleY;
  return {
    width,
    height,
    top: y,
    right: x + width,
    bottom: y + height,
    left: x,
    x,
    y
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js
function getLayoutRect(element2) {
  var clientRect = getBoundingClientRect(element2);
  var width = element2.offsetWidth;
  var height = element2.offsetHeight;
  if (Math.abs(clientRect.width - width) <= 1) {
    width = clientRect.width;
  }
  if (Math.abs(clientRect.height - height) <= 1) {
    height = clientRect.height;
  }
  return {
    x: element2.offsetLeft,
    y: element2.offsetTop,
    width,
    height
  };
}

// node_modules/@popperjs/core/lib/dom-utils/contains.js
function contains(parent, child) {
  var rootNode = child.getRootNode && child.getRootNode();
  if (parent.contains(child)) {
    return true;
  } else if (rootNode && isShadowRoot(rootNode)) {
    var next2 = child;
    do {
      if (next2 && parent.isSameNode(next2)) {
        return true;
      }
      next2 = next2.parentNode || next2.host;
    } while (next2);
  }
  return false;
}

// node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js
function getComputedStyle2(element2) {
  return getWindow(element2).getComputedStyle(element2);
}

// node_modules/@popperjs/core/lib/dom-utils/isTableElement.js
function isTableElement(element2) {
  return ["table", "td", "th"].indexOf(getNodeName(element2)) >= 0;
}

// node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js
function getDocumentElement(element2) {
  return ((isElement(element2) ? element2.ownerDocument : element2.document) || window.document).documentElement;
}

// node_modules/@popperjs/core/lib/dom-utils/getParentNode.js
function getParentNode(element2) {
  if (getNodeName(element2) === "html") {
    return element2;
  }
  return element2.assignedSlot || element2.parentNode || (isShadowRoot(element2) ? element2.host : null) || getDocumentElement(element2);
}

// node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js
function getTrueOffsetParent(element2) {
  if (!isHTMLElement(element2) || getComputedStyle2(element2).position === "fixed") {
    return null;
  }
  return element2.offsetParent;
}
function getContainingBlock(element2) {
  var isFirefox = /firefox/i.test(getUAString());
  var isIE = /Trident/i.test(getUAString());
  if (isIE && isHTMLElement(element2)) {
    var elementCss = getComputedStyle2(element2);
    if (elementCss.position === "fixed") {
      return null;
    }
  }
  var currentNode = getParentNode(element2);
  if (isShadowRoot(currentNode)) {
    currentNode = currentNode.host;
  }
  while (isHTMLElement(currentNode) && ["html", "body"].indexOf(getNodeName(currentNode)) < 0) {
    var css = getComputedStyle2(currentNode);
    if (css.transform !== "none" || css.perspective !== "none" || css.contain === "paint" || ["transform", "perspective"].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === "filter" || isFirefox && css.filter && css.filter !== "none") {
      return currentNode;
    } else {
      currentNode = currentNode.parentNode;
    }
  }
  return null;
}
function getOffsetParent(element2) {
  var window2 = getWindow(element2);
  var offsetParent = getTrueOffsetParent(element2);
  while (offsetParent && isTableElement(offsetParent) && getComputedStyle2(offsetParent).position === "static") {
    offsetParent = getTrueOffsetParent(offsetParent);
  }
  if (offsetParent && (getNodeName(offsetParent) === "html" || getNodeName(offsetParent) === "body" && getComputedStyle2(offsetParent).position === "static")) {
    return window2;
  }
  return offsetParent || getContainingBlock(element2) || window2;
}

// node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js
function getMainAxisFromPlacement(placement) {
  return ["top", "bottom"].indexOf(placement) >= 0 ? "x" : "y";
}

// node_modules/@popperjs/core/lib/utils/within.js
function within(min2, value, max2) {
  return max(min2, min(value, max2));
}
function withinMaxClamp(min2, value, max2) {
  var v = within(min2, value, max2);
  return v > max2 ? max2 : v;
}

// node_modules/@popperjs/core/lib/utils/getFreshSideObject.js
function getFreshSideObject() {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  };
}

// node_modules/@popperjs/core/lib/utils/mergePaddingObject.js
function mergePaddingObject(paddingObject) {
  return Object.assign({}, getFreshSideObject(), paddingObject);
}

// node_modules/@popperjs/core/lib/utils/expandToHashMap.js
function expandToHashMap(value, keys) {
  return keys.reduce(function(hashMap, key) {
    hashMap[key] = value;
    return hashMap;
  }, {});
}

// node_modules/@popperjs/core/lib/modifiers/arrow.js
var toPaddingObject = function toPaddingObject2(padding, state) {
  padding = typeof padding === "function" ? padding(Object.assign({}, state.rects, {
    placement: state.placement
  })) : padding;
  return mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
};
function arrow(_ref) {
  var _state$modifiersData$;
  var state = _ref.state, name = _ref.name, options = _ref.options;
  var arrowElement = state.elements.arrow;
  var popperOffsets2 = state.modifiersData.popperOffsets;
  var basePlacement = getBasePlacement(state.placement);
  var axis = getMainAxisFromPlacement(basePlacement);
  var isVertical = [left, right].indexOf(basePlacement) >= 0;
  var len = isVertical ? "height" : "width";
  if (!arrowElement || !popperOffsets2) {
    return;
  }
  var paddingObject = toPaddingObject(options.padding, state);
  var arrowRect = getLayoutRect(arrowElement);
  var minProp = axis === "y" ? top : left;
  var maxProp = axis === "y" ? bottom : right;
  var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets2[axis] - state.rects.popper[len];
  var startDiff = popperOffsets2[axis] - state.rects.reference[axis];
  var arrowOffsetParent = getOffsetParent(arrowElement);
  var clientSize = arrowOffsetParent ? axis === "y" ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
  var centerToReference = endDiff / 2 - startDiff / 2;
  var min2 = paddingObject[minProp];
  var max2 = clientSize - arrowRect[len] - paddingObject[maxProp];
  var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
  var offset2 = within(min2, center, max2);
  var axisProp = axis;
  state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset2, _state$modifiersData$.centerOffset = offset2 - center, _state$modifiersData$);
}
function effect2(_ref2) {
  var state = _ref2.state, options = _ref2.options;
  var _options$element = options.element, arrowElement = _options$element === void 0 ? "[data-popper-arrow]" : _options$element;
  if (arrowElement == null) {
    return;
  }
  if (typeof arrowElement === "string") {
    arrowElement = state.elements.popper.querySelector(arrowElement);
    if (!arrowElement) {
      return;
    }
  }
  if (true) {
    if (!isHTMLElement(arrowElement)) {
      console.error(['Popper: "arrow" element must be an HTMLElement (not an SVGElement).', "To use an SVG arrow, wrap it in an HTMLElement that will be used as", "the arrow."].join(" "));
    }
  }
  if (!contains(state.elements.popper, arrowElement)) {
    if (true) {
      console.error(['Popper: "arrow" modifier\'s `element` must be a child of the popper', "element."].join(" "));
    }
    return;
  }
  state.elements.arrow = arrowElement;
}
var arrow_default = {
  name: "arrow",
  enabled: true,
  phase: "main",
  fn: arrow,
  effect: effect2,
  requires: ["popperOffsets"],
  requiresIfExists: ["preventOverflow"]
};

// node_modules/@popperjs/core/lib/utils/getVariation.js
function getVariation(placement) {
  return placement.split("-")[1];
}

// node_modules/@popperjs/core/lib/modifiers/computeStyles.js
var unsetSides = {
  top: "auto",
  right: "auto",
  bottom: "auto",
  left: "auto"
};
function roundOffsetsByDPR(_ref) {
  var x = _ref.x, y = _ref.y;
  var win = window;
  var dpr = win.devicePixelRatio || 1;
  return {
    x: round(x * dpr) / dpr || 0,
    y: round(y * dpr) / dpr || 0
  };
}
function mapToStyles(_ref2) {
  var _Object$assign2;
  var popper2 = _ref2.popper, popperRect = _ref2.popperRect, placement = _ref2.placement, variation = _ref2.variation, offsets = _ref2.offsets, position = _ref2.position, gpuAcceleration = _ref2.gpuAcceleration, adaptive = _ref2.adaptive, roundOffsets = _ref2.roundOffsets, isFixed = _ref2.isFixed;
  var _offsets$x = offsets.x, x = _offsets$x === void 0 ? 0 : _offsets$x, _offsets$y = offsets.y, y = _offsets$y === void 0 ? 0 : _offsets$y;
  var _ref3 = typeof roundOffsets === "function" ? roundOffsets({
    x,
    y
  }) : {
    x,
    y
  };
  x = _ref3.x;
  y = _ref3.y;
  var hasX = offsets.hasOwnProperty("x");
  var hasY = offsets.hasOwnProperty("y");
  var sideX = left;
  var sideY = top;
  var win = window;
  if (adaptive) {
    var offsetParent = getOffsetParent(popper2);
    var heightProp = "clientHeight";
    var widthProp = "clientWidth";
    if (offsetParent === getWindow(popper2)) {
      offsetParent = getDocumentElement(popper2);
      if (getComputedStyle2(offsetParent).position !== "static" && position === "absolute") {
        heightProp = "scrollHeight";
        widthProp = "scrollWidth";
      }
    }
    offsetParent = offsetParent;
    if (placement === top || (placement === left || placement === right) && variation === end) {
      sideY = bottom;
      var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : offsetParent[heightProp];
      y -= offsetY - popperRect.height;
      y *= gpuAcceleration ? 1 : -1;
    }
    if (placement === left || (placement === top || placement === bottom) && variation === end) {
      sideX = right;
      var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : offsetParent[widthProp];
      x -= offsetX - popperRect.width;
      x *= gpuAcceleration ? 1 : -1;
    }
  }
  var commonStyles = Object.assign({
    position
  }, adaptive && unsetSides);
  var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
    x,
    y
  }) : {
    x,
    y
  };
  x = _ref4.x;
  y = _ref4.y;
  if (gpuAcceleration) {
    var _Object$assign;
    return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? "0" : "", _Object$assign[sideX] = hasX ? "0" : "", _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
  }
  return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : "", _Object$assign2[sideX] = hasX ? x + "px" : "", _Object$assign2.transform = "", _Object$assign2));
}
function computeStyles(_ref5) {
  var state = _ref5.state, options = _ref5.options;
  var _options$gpuAccelerat = options.gpuAcceleration, gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat, _options$adaptive = options.adaptive, adaptive = _options$adaptive === void 0 ? true : _options$adaptive, _options$roundOffsets = options.roundOffsets, roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
  if (true) {
    var transitionProperty = getComputedStyle2(state.elements.popper).transitionProperty || "";
    if (adaptive && ["transform", "top", "right", "bottom", "left"].some(function(property) {
      return transitionProperty.indexOf(property) >= 0;
    })) {
      console.warn(["Popper: Detected CSS transitions on at least one of the following", 'CSS properties: "transform", "top", "right", "bottom", "left".', "\n\n", 'Disable the "computeStyles" modifier\'s `adaptive` option to allow', "for smooth transitions, or remove these properties from the CSS", "transition declaration on the popper element if only transitioning", "opacity or background-color for example.", "\n\n", "We recommend using the popper element as a wrapper around an inner", "element that can have any CSS property transitioned for animations."].join(" "));
    }
  }
  var commonStyles = {
    placement: getBasePlacement(state.placement),
    variation: getVariation(state.placement),
    popper: state.elements.popper,
    popperRect: state.rects.popper,
    gpuAcceleration,
    isFixed: state.options.strategy === "fixed"
  };
  if (state.modifiersData.popperOffsets != null) {
    state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.popperOffsets,
      position: state.options.strategy,
      adaptive,
      roundOffsets
    })));
  }
  if (state.modifiersData.arrow != null) {
    state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.arrow,
      position: "absolute",
      adaptive: false,
      roundOffsets
    })));
  }
  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    "data-popper-placement": state.placement
  });
}
var computeStyles_default = {
  name: "computeStyles",
  enabled: true,
  phase: "beforeWrite",
  fn: computeStyles,
  data: {}
};

// node_modules/@popperjs/core/lib/modifiers/eventListeners.js
var passive = {
  passive: true
};
function effect3(_ref) {
  var state = _ref.state, instance24 = _ref.instance, options = _ref.options;
  var _options$scroll = options.scroll, scroll = _options$scroll === void 0 ? true : _options$scroll, _options$resize = options.resize, resize = _options$resize === void 0 ? true : _options$resize;
  var window2 = getWindow(state.elements.popper);
  var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);
  if (scroll) {
    scrollParents.forEach(function(scrollParent) {
      scrollParent.addEventListener("scroll", instance24.update, passive);
    });
  }
  if (resize) {
    window2.addEventListener("resize", instance24.update, passive);
  }
  return function() {
    if (scroll) {
      scrollParents.forEach(function(scrollParent) {
        scrollParent.removeEventListener("scroll", instance24.update, passive);
      });
    }
    if (resize) {
      window2.removeEventListener("resize", instance24.update, passive);
    }
  };
}
var eventListeners_default = {
  name: "eventListeners",
  enabled: true,
  phase: "write",
  fn: function fn() {
  },
  effect: effect3,
  data: {}
};

// node_modules/@popperjs/core/lib/utils/getOppositePlacement.js
var hash2 = {
  left: "right",
  right: "left",
  bottom: "top",
  top: "bottom"
};
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, function(matched) {
    return hash2[matched];
  });
}

// node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js
var hash3 = {
  start: "end",
  end: "start"
};
function getOppositeVariationPlacement(placement) {
  return placement.replace(/start|end/g, function(matched) {
    return hash3[matched];
  });
}

// node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js
function getWindowScroll(node) {
  var win = getWindow(node);
  var scrollLeft = win.pageXOffset;
  var scrollTop = win.pageYOffset;
  return {
    scrollLeft,
    scrollTop
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js
function getWindowScrollBarX(element2) {
  return getBoundingClientRect(getDocumentElement(element2)).left + getWindowScroll(element2).scrollLeft;
}

// node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js
function getViewportRect(element2, strategy) {
  var win = getWindow(element2);
  var html = getDocumentElement(element2);
  var visualViewport = win.visualViewport;
  var width = html.clientWidth;
  var height = html.clientHeight;
  var x = 0;
  var y = 0;
  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height;
    var layoutViewport = isLayoutViewport();
    if (layoutViewport || !layoutViewport && strategy === "fixed") {
      x = visualViewport.offsetLeft;
      y = visualViewport.offsetTop;
    }
  }
  return {
    width,
    height,
    x: x + getWindowScrollBarX(element2),
    y
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js
function getDocumentRect(element2) {
  var _element$ownerDocumen;
  var html = getDocumentElement(element2);
  var winScroll = getWindowScroll(element2);
  var body = (_element$ownerDocumen = element2.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
  var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
  var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
  var x = -winScroll.scrollLeft + getWindowScrollBarX(element2);
  var y = -winScroll.scrollTop;
  if (getComputedStyle2(body || html).direction === "rtl") {
    x += max(html.clientWidth, body ? body.clientWidth : 0) - width;
  }
  return {
    width,
    height,
    x,
    y
  };
}

// node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js
function isScrollParent(element2) {
  var _getComputedStyle = getComputedStyle2(element2), overflow = _getComputedStyle.overflow, overflowX = _getComputedStyle.overflowX, overflowY = _getComputedStyle.overflowY;
  return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
}

// node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js
function getScrollParent(node) {
  if (["html", "body", "#document"].indexOf(getNodeName(node)) >= 0) {
    return node.ownerDocument.body;
  }
  if (isHTMLElement(node) && isScrollParent(node)) {
    return node;
  }
  return getScrollParent(getParentNode(node));
}

// node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js
function listScrollParents(element2, list) {
  var _element$ownerDocumen;
  if (list === void 0) {
    list = [];
  }
  var scrollParent = getScrollParent(element2);
  var isBody = scrollParent === ((_element$ownerDocumen = element2.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
  var win = getWindow(scrollParent);
  var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
  var updatedList = list.concat(target);
  return isBody ? updatedList : updatedList.concat(listScrollParents(getParentNode(target)));
}

// node_modules/@popperjs/core/lib/utils/rectToClientRect.js
function rectToClientRect(rect) {
  return Object.assign({}, rect, {
    left: rect.x,
    top: rect.y,
    right: rect.x + rect.width,
    bottom: rect.y + rect.height
  });
}

// node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js
function getInnerBoundingClientRect(element2, strategy) {
  var rect = getBoundingClientRect(element2, false, strategy === "fixed");
  rect.top = rect.top + element2.clientTop;
  rect.left = rect.left + element2.clientLeft;
  rect.bottom = rect.top + element2.clientHeight;
  rect.right = rect.left + element2.clientWidth;
  rect.width = element2.clientWidth;
  rect.height = element2.clientHeight;
  rect.x = rect.left;
  rect.y = rect.top;
  return rect;
}
function getClientRectFromMixedType(element2, clippingParent, strategy) {
  return clippingParent === viewport ? rectToClientRect(getViewportRect(element2, strategy)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent, strategy) : rectToClientRect(getDocumentRect(getDocumentElement(element2)));
}
function getClippingParents(element2) {
  var clippingParents2 = listScrollParents(getParentNode(element2));
  var canEscapeClipping = ["absolute", "fixed"].indexOf(getComputedStyle2(element2).position) >= 0;
  var clipperElement = canEscapeClipping && isHTMLElement(element2) ? getOffsetParent(element2) : element2;
  if (!isElement(clipperElement)) {
    return [];
  }
  return clippingParents2.filter(function(clippingParent) {
    return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== "body";
  });
}
function getClippingRect(element2, boundary, rootBoundary, strategy) {
  var mainClippingParents = boundary === "clippingParents" ? getClippingParents(element2) : [].concat(boundary);
  var clippingParents2 = [].concat(mainClippingParents, [rootBoundary]);
  var firstClippingParent = clippingParents2[0];
  var clippingRect = clippingParents2.reduce(function(accRect, clippingParent) {
    var rect = getClientRectFromMixedType(element2, clippingParent, strategy);
    accRect.top = max(rect.top, accRect.top);
    accRect.right = min(rect.right, accRect.right);
    accRect.bottom = min(rect.bottom, accRect.bottom);
    accRect.left = max(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromMixedType(element2, firstClippingParent, strategy));
  clippingRect.width = clippingRect.right - clippingRect.left;
  clippingRect.height = clippingRect.bottom - clippingRect.top;
  clippingRect.x = clippingRect.left;
  clippingRect.y = clippingRect.top;
  return clippingRect;
}

// node_modules/@popperjs/core/lib/utils/computeOffsets.js
function computeOffsets(_ref) {
  var reference2 = _ref.reference, element2 = _ref.element, placement = _ref.placement;
  var basePlacement = placement ? getBasePlacement(placement) : null;
  var variation = placement ? getVariation(placement) : null;
  var commonX = reference2.x + reference2.width / 2 - element2.width / 2;
  var commonY = reference2.y + reference2.height / 2 - element2.height / 2;
  var offsets;
  switch (basePlacement) {
    case top:
      offsets = {
        x: commonX,
        y: reference2.y - element2.height
      };
      break;
    case bottom:
      offsets = {
        x: commonX,
        y: reference2.y + reference2.height
      };
      break;
    case right:
      offsets = {
        x: reference2.x + reference2.width,
        y: commonY
      };
      break;
    case left:
      offsets = {
        x: reference2.x - element2.width,
        y: commonY
      };
      break;
    default:
      offsets = {
        x: reference2.x,
        y: reference2.y
      };
  }
  var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;
  if (mainAxis != null) {
    var len = mainAxis === "y" ? "height" : "width";
    switch (variation) {
      case start:
        offsets[mainAxis] = offsets[mainAxis] - (reference2[len] / 2 - element2[len] / 2);
        break;
      case end:
        offsets[mainAxis] = offsets[mainAxis] + (reference2[len] / 2 - element2[len] / 2);
        break;
      default:
    }
  }
  return offsets;
}

// node_modules/@popperjs/core/lib/utils/detectOverflow.js
function detectOverflow(state, options) {
  if (options === void 0) {
    options = {};
  }
  var _options = options, _options$placement = _options.placement, placement = _options$placement === void 0 ? state.placement : _options$placement, _options$strategy = _options.strategy, strategy = _options$strategy === void 0 ? state.strategy : _options$strategy, _options$boundary = _options.boundary, boundary = _options$boundary === void 0 ? clippingParents : _options$boundary, _options$rootBoundary = _options.rootBoundary, rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary, _options$elementConte = _options.elementContext, elementContext = _options$elementConte === void 0 ? popper : _options$elementConte, _options$altBoundary = _options.altBoundary, altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary, _options$padding = _options.padding, padding = _options$padding === void 0 ? 0 : _options$padding;
  var paddingObject = mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
  var altContext = elementContext === popper ? reference : popper;
  var popperRect = state.rects.popper;
  var element2 = state.elements[altBoundary ? altContext : elementContext];
  var clippingClientRect = getClippingRect(isElement(element2) ? element2 : element2.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary, strategy);
  var referenceClientRect = getBoundingClientRect(state.elements.reference);
  var popperOffsets2 = computeOffsets({
    reference: referenceClientRect,
    element: popperRect,
    strategy: "absolute",
    placement
  });
  var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets2));
  var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect;
  var overflowOffsets = {
    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
    right: elementClientRect.right - clippingClientRect.right + paddingObject.right
  };
  var offsetData = state.modifiersData.offset;
  if (elementContext === popper && offsetData) {
    var offset2 = offsetData[placement];
    Object.keys(overflowOffsets).forEach(function(key) {
      var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
      var axis = [top, bottom].indexOf(key) >= 0 ? "y" : "x";
      overflowOffsets[key] += offset2[axis] * multiply;
    });
  }
  return overflowOffsets;
}

// node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js
function computeAutoPlacement(state, options) {
  if (options === void 0) {
    options = {};
  }
  var _options = options, placement = _options.placement, boundary = _options.boundary, rootBoundary = _options.rootBoundary, padding = _options.padding, flipVariations = _options.flipVariations, _options$allowedAutoP = _options.allowedAutoPlacements, allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
  var variation = getVariation(placement);
  var placements2 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function(placement2) {
    return getVariation(placement2) === variation;
  }) : basePlacements;
  var allowedPlacements = placements2.filter(function(placement2) {
    return allowedAutoPlacements.indexOf(placement2) >= 0;
  });
  if (allowedPlacements.length === 0) {
    allowedPlacements = placements2;
    if (true) {
      console.error(["Popper: The `allowedAutoPlacements` option did not allow any", "placements. Ensure the `placement` option matches the variation", "of the allowed placements.", 'For example, "auto" cannot be used to allow "bottom-start".', 'Use "auto-start" instead.'].join(" "));
    }
  }
  var overflows = allowedPlacements.reduce(function(acc, placement2) {
    acc[placement2] = detectOverflow(state, {
      placement: placement2,
      boundary,
      rootBoundary,
      padding
    })[getBasePlacement(placement2)];
    return acc;
  }, {});
  return Object.keys(overflows).sort(function(a, b) {
    return overflows[a] - overflows[b];
  });
}

// node_modules/@popperjs/core/lib/modifiers/flip.js
function getExpandedFallbackPlacements(placement) {
  if (getBasePlacement(placement) === auto) {
    return [];
  }
  var oppositePlacement = getOppositePlacement(placement);
  return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
}
function flip2(_ref) {
  var state = _ref.state, options = _ref.options, name = _ref.name;
  if (state.modifiersData[name]._skip) {
    return;
  }
  var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis, specifiedFallbackPlacements = options.fallbackPlacements, padding = options.padding, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, _options$flipVariatio = options.flipVariations, flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio, allowedAutoPlacements = options.allowedAutoPlacements;
  var preferredPlacement = state.options.placement;
  var basePlacement = getBasePlacement(preferredPlacement);
  var isBasePlacement = basePlacement === preferredPlacement;
  var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
  var placements2 = [preferredPlacement].concat(fallbackPlacements).reduce(function(acc, placement2) {
    return acc.concat(getBasePlacement(placement2) === auto ? computeAutoPlacement(state, {
      placement: placement2,
      boundary,
      rootBoundary,
      padding,
      flipVariations,
      allowedAutoPlacements
    }) : placement2);
  }, []);
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var checksMap = /* @__PURE__ */ new Map();
  var makeFallbackChecks = true;
  var firstFittingPlacement = placements2[0];
  for (var i = 0; i < placements2.length; i++) {
    var placement = placements2[i];
    var _basePlacement = getBasePlacement(placement);
    var isStartVariation = getVariation(placement) === start;
    var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
    var len = isVertical ? "width" : "height";
    var overflow = detectOverflow(state, {
      placement,
      boundary,
      rootBoundary,
      altBoundary,
      padding
    });
    var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;
    if (referenceRect[len] > popperRect[len]) {
      mainVariationSide = getOppositePlacement(mainVariationSide);
    }
    var altVariationSide = getOppositePlacement(mainVariationSide);
    var checks = [];
    if (checkMainAxis) {
      checks.push(overflow[_basePlacement] <= 0);
    }
    if (checkAltAxis) {
      checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
    }
    if (checks.every(function(check) {
      return check;
    })) {
      firstFittingPlacement = placement;
      makeFallbackChecks = false;
      break;
    }
    checksMap.set(placement, checks);
  }
  if (makeFallbackChecks) {
    var numberOfChecks = flipVariations ? 3 : 1;
    var _loop = function _loop2(_i2) {
      var fittingPlacement = placements2.find(function(placement2) {
        var checks2 = checksMap.get(placement2);
        if (checks2) {
          return checks2.slice(0, _i2).every(function(check) {
            return check;
          });
        }
      });
      if (fittingPlacement) {
        firstFittingPlacement = fittingPlacement;
        return "break";
      }
    };
    for (var _i = numberOfChecks; _i > 0; _i--) {
      var _ret = _loop(_i);
      if (_ret === "break")
        break;
    }
  }
  if (state.placement !== firstFittingPlacement) {
    state.modifiersData[name]._skip = true;
    state.placement = firstFittingPlacement;
    state.reset = true;
  }
}
var flip_default = {
  name: "flip",
  enabled: true,
  phase: "main",
  fn: flip2,
  requiresIfExists: ["offset"],
  data: {
    _skip: false
  }
};

// node_modules/@popperjs/core/lib/modifiers/hide.js
function getSideOffsets(overflow, rect, preventedOffsets) {
  if (preventedOffsets === void 0) {
    preventedOffsets = {
      x: 0,
      y: 0
    };
  }
  return {
    top: overflow.top - rect.height - preventedOffsets.y,
    right: overflow.right - rect.width + preventedOffsets.x,
    bottom: overflow.bottom - rect.height + preventedOffsets.y,
    left: overflow.left - rect.width - preventedOffsets.x
  };
}
function isAnySideFullyClipped(overflow) {
  return [top, right, bottom, left].some(function(side) {
    return overflow[side] >= 0;
  });
}
function hide(_ref) {
  var state = _ref.state, name = _ref.name;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var preventedOffsets = state.modifiersData.preventOverflow;
  var referenceOverflow = detectOverflow(state, {
    elementContext: "reference"
  });
  var popperAltOverflow = detectOverflow(state, {
    altBoundary: true
  });
  var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
  var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
  var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
  var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
  state.modifiersData[name] = {
    referenceClippingOffsets,
    popperEscapeOffsets,
    isReferenceHidden,
    hasPopperEscaped
  };
  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    "data-popper-reference-hidden": isReferenceHidden,
    "data-popper-escaped": hasPopperEscaped
  });
}
var hide_default = {
  name: "hide",
  enabled: true,
  phase: "main",
  requiresIfExists: ["preventOverflow"],
  fn: hide
};

// node_modules/@popperjs/core/lib/modifiers/offset.js
function distanceAndSkiddingToXY(placement, rects, offset2) {
  var basePlacement = getBasePlacement(placement);
  var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;
  var _ref = typeof offset2 === "function" ? offset2(Object.assign({}, rects, {
    placement
  })) : offset2, skidding = _ref[0], distance = _ref[1];
  skidding = skidding || 0;
  distance = (distance || 0) * invertDistance;
  return [left, right].indexOf(basePlacement) >= 0 ? {
    x: distance,
    y: skidding
  } : {
    x: skidding,
    y: distance
  };
}
function offset(_ref2) {
  var state = _ref2.state, options = _ref2.options, name = _ref2.name;
  var _options$offset = options.offset, offset2 = _options$offset === void 0 ? [0, 0] : _options$offset;
  var data = placements.reduce(function(acc, placement) {
    acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset2);
    return acc;
  }, {});
  var _data$state$placement = data[state.placement], x = _data$state$placement.x, y = _data$state$placement.y;
  if (state.modifiersData.popperOffsets != null) {
    state.modifiersData.popperOffsets.x += x;
    state.modifiersData.popperOffsets.y += y;
  }
  state.modifiersData[name] = data;
}
var offset_default = {
  name: "offset",
  enabled: true,
  phase: "main",
  requires: ["popperOffsets"],
  fn: offset
};

// node_modules/@popperjs/core/lib/modifiers/popperOffsets.js
function popperOffsets(_ref) {
  var state = _ref.state, name = _ref.name;
  state.modifiersData[name] = computeOffsets({
    reference: state.rects.reference,
    element: state.rects.popper,
    strategy: "absolute",
    placement: state.placement
  });
}
var popperOffsets_default = {
  name: "popperOffsets",
  enabled: true,
  phase: "read",
  fn: popperOffsets,
  data: {}
};

// node_modules/@popperjs/core/lib/utils/getAltAxis.js
function getAltAxis(axis) {
  return axis === "x" ? "y" : "x";
}

// node_modules/@popperjs/core/lib/modifiers/preventOverflow.js
function preventOverflow(_ref) {
  var state = _ref.state, options = _ref.options, name = _ref.name;
  var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, padding = options.padding, _options$tether = options.tether, tether = _options$tether === void 0 ? true : _options$tether, _options$tetherOffset = options.tetherOffset, tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
  var overflow = detectOverflow(state, {
    boundary,
    rootBoundary,
    padding,
    altBoundary
  });
  var basePlacement = getBasePlacement(state.placement);
  var variation = getVariation(state.placement);
  var isBasePlacement = !variation;
  var mainAxis = getMainAxisFromPlacement(basePlacement);
  var altAxis = getAltAxis(mainAxis);
  var popperOffsets2 = state.modifiersData.popperOffsets;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var tetherOffsetValue = typeof tetherOffset === "function" ? tetherOffset(Object.assign({}, state.rects, {
    placement: state.placement
  })) : tetherOffset;
  var normalizedTetherOffsetValue = typeof tetherOffsetValue === "number" ? {
    mainAxis: tetherOffsetValue,
    altAxis: tetherOffsetValue
  } : Object.assign({
    mainAxis: 0,
    altAxis: 0
  }, tetherOffsetValue);
  var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
  var data = {
    x: 0,
    y: 0
  };
  if (!popperOffsets2) {
    return;
  }
  if (checkMainAxis) {
    var _offsetModifierState$;
    var mainSide = mainAxis === "y" ? top : left;
    var altSide = mainAxis === "y" ? bottom : right;
    var len = mainAxis === "y" ? "height" : "width";
    var offset2 = popperOffsets2[mainAxis];
    var min2 = offset2 + overflow[mainSide];
    var max2 = offset2 - overflow[altSide];
    var additive = tether ? -popperRect[len] / 2 : 0;
    var minLen = variation === start ? referenceRect[len] : popperRect[len];
    var maxLen = variation === start ? -popperRect[len] : -referenceRect[len];
    var arrowElement = state.elements.arrow;
    var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
      width: 0,
      height: 0
    };
    var arrowPaddingObject = state.modifiersData["arrow#persistent"] ? state.modifiersData["arrow#persistent"].padding : getFreshSideObject();
    var arrowPaddingMin = arrowPaddingObject[mainSide];
    var arrowPaddingMax = arrowPaddingObject[altSide];
    var arrowLen = within(0, referenceRect[len], arrowRect[len]);
    var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
    var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
    var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
    var clientOffset = arrowOffsetParent ? mainAxis === "y" ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
    var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
    var tetherMin = offset2 + minOffset - offsetModifierValue - clientOffset;
    var tetherMax = offset2 + maxOffset - offsetModifierValue;
    var preventedOffset = within(tether ? min(min2, tetherMin) : min2, offset2, tether ? max(max2, tetherMax) : max2);
    popperOffsets2[mainAxis] = preventedOffset;
    data[mainAxis] = preventedOffset - offset2;
  }
  if (checkAltAxis) {
    var _offsetModifierState$2;
    var _mainSide = mainAxis === "x" ? top : left;
    var _altSide = mainAxis === "x" ? bottom : right;
    var _offset = popperOffsets2[altAxis];
    var _len = altAxis === "y" ? "height" : "width";
    var _min = _offset + overflow[_mainSide];
    var _max = _offset - overflow[_altSide];
    var isOriginSide = [top, left].indexOf(basePlacement) !== -1;
    var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;
    var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;
    var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;
    var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);
    popperOffsets2[altAxis] = _preventedOffset;
    data[altAxis] = _preventedOffset - _offset;
  }
  state.modifiersData[name] = data;
}
var preventOverflow_default = {
  name: "preventOverflow",
  enabled: true,
  phase: "main",
  fn: preventOverflow,
  requiresIfExists: ["offset"]
};

// node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js
function getHTMLElementScroll(element2) {
  return {
    scrollLeft: element2.scrollLeft,
    scrollTop: element2.scrollTop
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js
function getNodeScroll(node) {
  if (node === getWindow(node) || !isHTMLElement(node)) {
    return getWindowScroll(node);
  } else {
    return getHTMLElementScroll(node);
  }
}

// node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js
function isElementScaled(element2) {
  var rect = element2.getBoundingClientRect();
  var scaleX = round(rect.width) / element2.offsetWidth || 1;
  var scaleY = round(rect.height) / element2.offsetHeight || 1;
  return scaleX !== 1 || scaleY !== 1;
}
function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
  if (isFixed === void 0) {
    isFixed = false;
  }
  var isOffsetParentAnElement = isHTMLElement(offsetParent);
  var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);
  var documentElement = getDocumentElement(offsetParent);
  var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled, isFixed);
  var scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  var offsets = {
    x: 0,
    y: 0
  };
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== "body" || isScrollParent(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isHTMLElement(offsetParent)) {
      offsets = getBoundingClientRect(offsetParent, true);
      offsets.x += offsetParent.clientLeft;
      offsets.y += offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = getWindowScrollBarX(documentElement);
    }
  }
  return {
    x: rect.left + scroll.scrollLeft - offsets.x,
    y: rect.top + scroll.scrollTop - offsets.y,
    width: rect.width,
    height: rect.height
  };
}

// node_modules/@popperjs/core/lib/utils/orderModifiers.js
function order(modifiers) {
  var map = /* @__PURE__ */ new Map();
  var visited = /* @__PURE__ */ new Set();
  var result = [];
  modifiers.forEach(function(modifier) {
    map.set(modifier.name, modifier);
  });
  function sort2(modifier) {
    visited.add(modifier.name);
    var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
    requires.forEach(function(dep) {
      if (!visited.has(dep)) {
        var depModifier = map.get(dep);
        if (depModifier) {
          sort2(depModifier);
        }
      }
    });
    result.push(modifier);
  }
  modifiers.forEach(function(modifier) {
    if (!visited.has(modifier.name)) {
      sort2(modifier);
    }
  });
  return result;
}
function orderModifiers(modifiers) {
  var orderedModifiers = order(modifiers);
  return modifierPhases.reduce(function(acc, phase) {
    return acc.concat(orderedModifiers.filter(function(modifier) {
      return modifier.phase === phase;
    }));
  }, []);
}

// node_modules/@popperjs/core/lib/utils/debounce.js
function debounce2(fn2) {
  var pending;
  return function() {
    if (!pending) {
      pending = new Promise(function(resolve) {
        Promise.resolve().then(function() {
          pending = void 0;
          resolve(fn2());
        });
      });
    }
    return pending;
  };
}

// node_modules/@popperjs/core/lib/utils/format.js
function format(str) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }
  return [].concat(args).reduce(function(p, c) {
    return p.replace(/%s/, c);
  }, str);
}

// node_modules/@popperjs/core/lib/utils/validateModifiers.js
var INVALID_MODIFIER_ERROR = 'Popper: modifier "%s" provided an invalid %s property, expected %s but got %s';
var MISSING_DEPENDENCY_ERROR = 'Popper: modifier "%s" requires "%s", but "%s" modifier is not available';
var VALID_PROPERTIES = ["name", "enabled", "phase", "fn", "effect", "requires", "options"];
function validateModifiers(modifiers) {
  modifiers.forEach(function(modifier) {
    [].concat(Object.keys(modifier), VALID_PROPERTIES).filter(function(value, index, self2) {
      return self2.indexOf(value) === index;
    }).forEach(function(key) {
      switch (key) {
        case "name":
          if (typeof modifier.name !== "string") {
            console.error(format(INVALID_MODIFIER_ERROR, String(modifier.name), '"name"', '"string"', '"' + String(modifier.name) + '"'));
          }
          break;
        case "enabled":
          if (typeof modifier.enabled !== "boolean") {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"enabled"', '"boolean"', '"' + String(modifier.enabled) + '"'));
          }
          break;
        case "phase":
          if (modifierPhases.indexOf(modifier.phase) < 0) {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"phase"', "either " + modifierPhases.join(", "), '"' + String(modifier.phase) + '"'));
          }
          break;
        case "fn":
          if (typeof modifier.fn !== "function") {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"fn"', '"function"', '"' + String(modifier.fn) + '"'));
          }
          break;
        case "effect":
          if (modifier.effect != null && typeof modifier.effect !== "function") {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"effect"', '"function"', '"' + String(modifier.fn) + '"'));
          }
          break;
        case "requires":
          if (modifier.requires != null && !Array.isArray(modifier.requires)) {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requires"', '"array"', '"' + String(modifier.requires) + '"'));
          }
          break;
        case "requiresIfExists":
          if (!Array.isArray(modifier.requiresIfExists)) {
            console.error(format(INVALID_MODIFIER_ERROR, modifier.name, '"requiresIfExists"', '"array"', '"' + String(modifier.requiresIfExists) + '"'));
          }
          break;
        case "options":
        case "data":
          break;
        default:
          console.error('PopperJS: an invalid property has been provided to the "' + modifier.name + '" modifier, valid properties are ' + VALID_PROPERTIES.map(function(s) {
            return '"' + s + '"';
          }).join(", ") + '; but "' + key + '" was provided.');
      }
      modifier.requires && modifier.requires.forEach(function(requirement) {
        if (modifiers.find(function(mod) {
          return mod.name === requirement;
        }) == null) {
          console.error(format(MISSING_DEPENDENCY_ERROR, String(modifier.name), requirement, requirement));
        }
      });
    });
  });
}

// node_modules/@popperjs/core/lib/utils/uniqueBy.js
function uniqueBy(arr, fn2) {
  var identifiers = /* @__PURE__ */ new Set();
  return arr.filter(function(item) {
    var identifier = fn2(item);
    if (!identifiers.has(identifier)) {
      identifiers.add(identifier);
      return true;
    }
  });
}

// node_modules/@popperjs/core/lib/utils/mergeByName.js
function mergeByName(modifiers) {
  var merged = modifiers.reduce(function(merged2, current) {
    var existing = merged2[current.name];
    merged2[current.name] = existing ? Object.assign({}, existing, current, {
      options: Object.assign({}, existing.options, current.options),
      data: Object.assign({}, existing.data, current.data)
    }) : current;
    return merged2;
  }, {});
  return Object.keys(merged).map(function(key) {
    return merged[key];
  });
}

// node_modules/@popperjs/core/lib/createPopper.js
var INVALID_ELEMENT_ERROR = "Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.";
var INFINITE_LOOP_ERROR = "Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.";
var DEFAULT_OPTIONS = {
  placement: "bottom",
  modifiers: [],
  strategy: "absolute"
};
function areValidElements() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  return !args.some(function(element2) {
    return !(element2 && typeof element2.getBoundingClientRect === "function");
  });
}
function popperGenerator(generatorOptions) {
  if (generatorOptions === void 0) {
    generatorOptions = {};
  }
  var _generatorOptions = generatorOptions, _generatorOptions$def = _generatorOptions.defaultModifiers, defaultModifiers2 = _generatorOptions$def === void 0 ? [] : _generatorOptions$def, _generatorOptions$def2 = _generatorOptions.defaultOptions, defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
  return function createPopper2(reference2, popper2, options) {
    if (options === void 0) {
      options = defaultOptions;
    }
    var state = {
      placement: "bottom",
      orderedModifiers: [],
      options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
      modifiersData: {},
      elements: {
        reference: reference2,
        popper: popper2
      },
      attributes: {},
      styles: {}
    };
    var effectCleanupFns = [];
    var isDestroyed = false;
    var instance24 = {
      state,
      setOptions: function setOptions(setOptionsAction) {
        var options2 = typeof setOptionsAction === "function" ? setOptionsAction(state.options) : setOptionsAction;
        cleanupModifierEffects();
        state.options = Object.assign({}, defaultOptions, state.options, options2);
        state.scrollParents = {
          reference: isElement(reference2) ? listScrollParents(reference2) : reference2.contextElement ? listScrollParents(reference2.contextElement) : [],
          popper: listScrollParents(popper2)
        };
        var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers2, state.options.modifiers)));
        state.orderedModifiers = orderedModifiers.filter(function(m) {
          return m.enabled;
        });
        if (true) {
          var modifiers = uniqueBy([].concat(orderedModifiers, state.options.modifiers), function(_ref) {
            var name = _ref.name;
            return name;
          });
          validateModifiers(modifiers);
          if (getBasePlacement(state.options.placement) === auto) {
            var flipModifier = state.orderedModifiers.find(function(_ref2) {
              var name = _ref2.name;
              return name === "flip";
            });
            if (!flipModifier) {
              console.error(['Popper: "auto" placements require the "flip" modifier be', "present and enabled to work."].join(" "));
            }
          }
          var _getComputedStyle = getComputedStyle2(popper2), marginTop = _getComputedStyle.marginTop, marginRight = _getComputedStyle.marginRight, marginBottom = _getComputedStyle.marginBottom, marginLeft = _getComputedStyle.marginLeft;
          if ([marginTop, marginRight, marginBottom, marginLeft].some(function(margin) {
            return parseFloat(margin);
          })) {
            console.warn(['Popper: CSS "margin" styles cannot be used to apply padding', "between the popper and its reference element or boundary.", "To replicate margin, use the `offset` modifier, as well as", "the `padding` option in the `preventOverflow` and `flip`", "modifiers."].join(" "));
          }
        }
        runModifierEffects();
        return instance24.update();
      },
      forceUpdate: function forceUpdate() {
        if (isDestroyed) {
          return;
        }
        var _state$elements = state.elements, reference3 = _state$elements.reference, popper3 = _state$elements.popper;
        if (!areValidElements(reference3, popper3)) {
          if (true) {
            console.error(INVALID_ELEMENT_ERROR);
          }
          return;
        }
        state.rects = {
          reference: getCompositeRect(reference3, getOffsetParent(popper3), state.options.strategy === "fixed"),
          popper: getLayoutRect(popper3)
        };
        state.reset = false;
        state.placement = state.options.placement;
        state.orderedModifiers.forEach(function(modifier) {
          return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
        });
        var __debug_loops__ = 0;
        for (var index = 0; index < state.orderedModifiers.length; index++) {
          if (true) {
            __debug_loops__ += 1;
            if (__debug_loops__ > 100) {
              console.error(INFINITE_LOOP_ERROR);
              break;
            }
          }
          if (state.reset === true) {
            state.reset = false;
            index = -1;
            continue;
          }
          var _state$orderedModifie = state.orderedModifiers[index], fn2 = _state$orderedModifie.fn, _state$orderedModifie2 = _state$orderedModifie.options, _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2, name = _state$orderedModifie.name;
          if (typeof fn2 === "function") {
            state = fn2({
              state,
              options: _options,
              name,
              instance: instance24
            }) || state;
          }
        }
      },
      update: debounce2(function() {
        return new Promise(function(resolve) {
          instance24.forceUpdate();
          resolve(state);
        });
      }),
      destroy: function destroy() {
        cleanupModifierEffects();
        isDestroyed = true;
      }
    };
    if (!areValidElements(reference2, popper2)) {
      if (true) {
        console.error(INVALID_ELEMENT_ERROR);
      }
      return instance24;
    }
    instance24.setOptions(options).then(function(state2) {
      if (!isDestroyed && options.onFirstUpdate) {
        options.onFirstUpdate(state2);
      }
    });
    function runModifierEffects() {
      state.orderedModifiers.forEach(function(_ref3) {
        var name = _ref3.name, _ref3$options = _ref3.options, options2 = _ref3$options === void 0 ? {} : _ref3$options, effect4 = _ref3.effect;
        if (typeof effect4 === "function") {
          var cleanupFn = effect4({
            state,
            name,
            instance: instance24,
            options: options2
          });
          var noopFn = function noopFn2() {
          };
          effectCleanupFns.push(cleanupFn || noopFn);
        }
      });
    }
    function cleanupModifierEffects() {
      effectCleanupFns.forEach(function(fn2) {
        return fn2();
      });
      effectCleanupFns = [];
    }
    return instance24;
  };
}

// node_modules/@popperjs/core/lib/popper.js
var defaultModifiers = [eventListeners_default, popperOffsets_default, computeStyles_default, applyStyles_default, offset_default, flip_default, preventOverflow_default, arrow_default, hide_default];
var createPopper = /* @__PURE__ */ popperGenerator({
  defaultModifiers
});

// src/util/generic_suggester.ts
var Suggester = class {
  constructor(owner, containerEl, scope) {
    this.containerEl = containerEl;
    this.owner = owner;
    containerEl.on(
      "click",
      ".suggestion-item",
      this.onSuggestionClick.bind(this)
    );
    containerEl.on(
      "mousemove",
      ".suggestion-item",
      this.onSuggestionMouseover.bind(this)
    );
    scope.register([], "ArrowUp", () => {
      this.setSelectedItem(this.selectedItem - 1, true);
      return false;
    });
    scope.register([], "ArrowDown", () => {
      this.setSelectedItem(this.selectedItem + 1, true);
      return false;
    });
    scope.register([], "Enter", (evt) => {
      this.useSelectedItem(evt);
      return false;
    });
    scope.register([], "Tab", (evt) => {
      this.chooseSuggestion(evt);
      return false;
    });
  }
  chooseSuggestion(evt) {
    if (!this.items || !this.items.length)
      return;
    const currentValue = this.items[this.selectedItem];
    if (currentValue) {
      this.owner.onChooseSuggestion(currentValue, evt);
    }
  }
  onSuggestionClick(event, el) {
    event.preventDefault();
    if (!this.suggestions || !this.suggestions.length)
      return;
    const item = this.suggestions.indexOf(el);
    this.setSelectedItem(item, false);
    this.useSelectedItem(event);
  }
  onSuggestionMouseover(event, el) {
    if (!this.suggestions || !this.suggestions.length)
      return;
    const item = this.suggestions.indexOf(el);
    this.setSelectedItem(item, false);
  }
  empty() {
    this.containerEl.empty();
  }
  setSuggestions(items) {
    this.containerEl.empty();
    const els = [];
    items.forEach((item) => {
      const suggestionEl = this.containerEl.createDiv("suggestion-item");
      this.owner.renderSuggestion(item, suggestionEl);
      els.push(suggestionEl);
    });
    this.items = items;
    this.suggestions = els;
    this.setSelectedItem(0, false);
  }
  useSelectedItem(event) {
    if (!this.items || !this.items.length)
      return;
    const currentValue = this.items[this.selectedItem];
    if (currentValue) {
      this.owner.selectSuggestion(currentValue, event);
    }
  }
  wrap(value, size) {
    return (value % size + size) % size;
  }
  setSelectedItem(index, scroll) {
    const nIndex = this.wrap(index, this.suggestions.length);
    const prev = this.suggestions[this.selectedItem];
    const next2 = this.suggestions[nIndex];
    if (prev)
      prev.removeClass("is-selected");
    if (next2)
      next2.addClass("is-selected");
    this.selectedItem = nIndex;
    if (scroll && next2) {
      next2.scrollIntoView(false);
    }
  }
};
var SuggestionModal = class extends import_obsidian20.FuzzySuggestModal {
  constructor(app, inputEl, items) {
    super(app);
    this.items = [];
    this.scope = new import_obsidian20.Scope();
    this.emptyStateText = "No match found";
    this.limit = 100;
    this.inputEl = inputEl;
    this.items = items;
    this.suggestEl = createDiv("suggestion-container");
    this.contentEl = this.suggestEl.createDiv("suggestion");
    this.suggester = new Suggester(this, this.contentEl, this.scope);
    this.scope.register([], "Escape", this.onEscape.bind(this));
    this.inputEl.addEventListener("input", this.onInputChanged.bind(this));
    this.inputEl.addEventListener("focus", this.onFocus.bind(this));
    this.inputEl.addEventListener("blur", this.close.bind(this));
    this.suggestEl.on(
      "mousedown",
      ".suggestion-container",
      (event) => {
        event.preventDefault();
      }
    );
  }
  empty() {
    this.suggester.empty();
  }
  onInputChanged() {
    if (this.shouldNotOpen)
      return;
    const inputStr = this.modifyInput(this.inputEl.value);
    const suggestions = this.getSuggestions(inputStr);
    if (suggestions.length > 0) {
      this.suggester.setSuggestions(suggestions.slice(0, this.limit));
    } else {
      this.onNoSuggestion();
    }
    this.open();
  }
  onFocus() {
    this.shouldNotOpen = false;
    this.onInputChanged();
  }
  modifyInput(input) {
    return input;
  }
  onNoSuggestion() {
    this.empty();
    this.renderSuggestion(
      null,
      this.contentEl.createDiv("suggestion-item")
    );
  }
  open() {
    this.app.keymap.pushScope(this.scope);
    document.body.appendChild(this.suggestEl);
    this.popper = createPopper(this.inputEl, this.suggestEl, {
      placement: "bottom-start",
      modifiers: [
        {
          name: "offset",
          options: {
            offset: [0, 10]
          }
        },
        {
          name: "flip",
          options: {
            fallbackPlacements: ["top"]
          }
        }
      ]
    });
  }
  onEscape() {
    this.close();
    this.shouldNotOpen = true;
  }
  close() {
    this.app.keymap.popScope(this.scope);
    this.suggester.setSuggestions([]);
    if (this.popper) {
      this.popper.destroy();
    }
    this.suggestEl.detach();
  }
  createPrompt(prompts) {
    if (!this.promptEl)
      this.promptEl = this.suggestEl.createDiv("prompt-instructions");
    let prompt = this.promptEl.createDiv("prompt-instruction");
    for (let p of prompts) {
      prompt.appendChild(p);
    }
  }
};

// src/util/folder.ts
var FolderSuggestionModal = class extends SuggestionModal {
  constructor(app, input, items) {
    super(app, input.inputEl, items);
    this.folders = [...items];
    this.text = input;
    this.inputEl.addEventListener("input", () => this.getFolder());
  }
  getFolder() {
    const v = this.inputEl.value, folder = this.app.vault.getAbstractFileByPath(v);
    if (folder == this.folder)
      return;
    if (!(folder instanceof import_obsidian21.TFolder))
      return;
    this.folder = folder;
    this.onInputChanged();
  }
  getItemText(item) {
    return item.path;
  }
  onChooseItem(item) {
    this.text.setValue(item.path);
    this.folder = item;
  }
  selectSuggestion({ item }) {
    let link = item.path;
    this.text.setValue(link);
    this.onClose();
    this.close();
  }
  renderSuggestion(result, el) {
    let { item, match: matches } = result || {};
    let content = el.createDiv({
      cls: "suggestion-content"
    });
    if (!item) {
      content.setText(this.emptyStateText);
      content.parentElement.addClass("is-selected");
      return;
    }
    let pathLength = item.path.length - item.name.length;
    const matchElements = matches.matches.map((m) => {
      return createSpan("suggestion-highlight");
    });
    for (let i = pathLength; i < item.path.length; i++) {
      let match = matches.matches.find((m) => m[0] === i);
      if (match) {
        let element2 = matchElements[matches.matches.indexOf(match)];
        content.appendChild(element2);
        element2.appendText(item.path.substring(match[0], match[1]));
        i += match[1] - match[0] - 1;
        continue;
      }
      content.appendText(item.path[i]);
    }
    el.createDiv({
      cls: "suggestion-note",
      text: item.path
    });
  }
  getItems() {
    return this.folders;
  }
};

// src/layouts/fateCore.ts
var StatblockFateCore = [
  {
    type: "inline",
    id: nanoid(),
    properties: [],
    hasRule: true,
    nested: [
      {
        type: "group",
        id: nanoid(),
        properties: ["name", "description", "aspects", "temporaryAspects"],
        nested: [
          {
            type: "heading",
            id: nanoid(),
            properties: ["name"],
            conditioned: true
          },
          {
            type: "text",
            id: nanoid(),
            properties: ["description"],
            conditioned: true,
            markdown: true,
            text: null,
            dice: false
          },
          {
            type: "text",
            id: nanoid(),
            properties: ["aspects"],
            markdown: true,
            text: null,
            dice: false,
            conditioned: true
          },
          {
            type: "text",
            id: nanoid(),
            properties: ["temporaryAspects"],
            markdown: true,
            text: null,
            dice: false,
            conditioned: true
          }
        ],
        conditioned: true
      },
      {
        type: "image",
        id: nanoid(),
        properties: ["image"],
        conditioned: true
      }
    ]
  },
  {
    type: "table",
    id: nanoid(),
    properties: ["stress"],
    headers: ["Physical", "Mental"],
    calculate: false,
    hasRule: true,
    conditioned: true
  },
  {
    type: "traits",
    id: nanoid(),
    properties: ["consequences"],
    conditioned: true,
    heading: "Consequences"
  },
  {
    type: "traits",
    id: nanoid(),
    properties: ["skills"],
    conditioned: true,
    hasRule: false,
    heading: "Skills"
  },
  {
    type: "traits",
    id: nanoid(),
    properties: ["stunts"],
    markdown: true,
    dice: false,
    conditioned: true,
    heading: "Stunts"
  },
  {
    type: "traits",
    id: nanoid(),
    properties: ["items"],
    heading: "Items",
    conditioned: true,
    markdown: true,
    dice: false
  },
  {
    type: "traits",
    id: nanoid(),
    properties: ["extras"],
    heading: "Extras",
    conditioned: true,
    markdown: true,
    dice: false
  }
];
var LayoutFateCore = {
  blocks: StatblockFateCore,
  name: "Basic Fate Core Layout"
};

// src/layouts/index.ts
var DefaultLayouts = [
  Layout5e,
  LayoutFateCore
];

// src/settings/settings.ts
var StatblockSettingTab = class extends import_obsidian22.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
    this.results = [];
    this.displayed = new Set(this.plugin.sources);
    this.importer = new Importer(this.plugin);
  }
  async display() {
    try {
      let { containerEl } = this;
      containerEl.empty();
      containerEl.addClass("statblock-settings");
      containerEl.createEl("h2", { text: "TTRPG Statblock Settings" });
      this.generateTopSettings(containerEl.createDiv());
      this.generateParseSettings(containerEl.createDiv());
      this.generateLayouts(containerEl.createDiv());
      this.generateImports(containerEl.createDiv());
      this.generateMonsters(containerEl.createDiv());
      const div = containerEl.createDiv("coffee");
      div.createEl("a", {
        href: "https://www.buymeacoffee.com/valentine195"
      }).createEl("img", {
        attr: {
          src: "https://img.buymeacoffee.com/button-api/?text=Buy me a coffee&emoji=\u2615&slug=valentine195&button_colour=e3e7ef&font_colour=262626&font_family=Inter&outline_colour=262626&coffee_colour=ff0000"
        }
      });
    } catch (e) {
      console.error(e);
      new import_obsidian22.Notice(
        "There was an error displaying the settings tab for 5e Statblocks."
      );
    }
  }
  generateTopSettings(container) {
    container.empty();
    new import_obsidian22.Setting(container).setHeading().setName("General Settings");
    new import_obsidian22.Setting(container).setName("Enable Export to PNG").setDesc(
      createFragment((e) => {
        e.createSpan({
          text: 'Add "Export to PNG" button by default. Use '
        });
        e.createEl("code", { text: "export: false" });
        e.createSpan({
          text: " to disable per-statblock."
        });
      })
    ).setDisabled(!this.plugin.canUseDiceRoller).addToggle(
      (t) => t.setValue(this.plugin.settings.useDice).onChange(async (v) => {
        this.plugin.settings.useDice = v;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian22.Setting(container).setName("Integrate Dice Roller").setDesc(
      createFragment((e) => {
        if (this.plugin.canUseDiceRoller) {
          e.createSpan({
            text: "Add Dice Roller dice to statblocks by default. Use "
          });
          e.createEl("code", { text: "dice: false" });
          e.createSpan({
            text: " to disable per-statblock."
          });
        } else {
          e.createSpan({
            text: "This setting is only usable with the Dice Roller plugin enabled."
          });
        }
      })
    ).setDisabled(!this.plugin.canUseDiceRoller).addToggle(
      (t) => t.setValue(this.plugin.settings.useDice).onChange(async (v) => {
        this.plugin.settings.useDice = v;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian22.Setting(container).setName("Render Dice Rolls").setDesc(
      createFragment((e) => {
        if (this.plugin.canUseDiceRoller) {
          e.createSpan({
            text: "Roll graphical dice inside statblocks by default. Use "
          });
          e.createEl("code", { text: "render: false" });
          e.createSpan({
            text: " to disable per-statblock."
          });
        } else {
          e.createSpan({
            text: "This setting is only usable with the Dice Roller plugin enabled."
          });
        }
      })
    ).setDisabled(!this.plugin.canUseDiceRoller).addToggle(
      (t) => t.setValue(this.plugin.settings.renderDice).onChange(async (v) => {
        this.plugin.settings.renderDice = v;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian22.Setting(container).setName("Try to Render Wikilinks").setDesc(
      createFragment((e) => {
        e.createSpan({
          text: "The plugin will attempt to detect wikilinks inside Statblocks."
        });
        e.createEl("br");
        e.createEl("strong", {
          text: "Please note: these links will not be added to the graph."
        });
      })
    ).addToggle(
      (t) => t.setValue(this.plugin.settings.tryToRenderLinks).onChange(async (v) => {
        this.plugin.settings.tryToRenderLinks = v;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian22.Setting(container).setName("Disable 5e SRD").setDesc(
      createFragment((e) => {
        e.createSpan({
          text: "Disable the Dungeons & Dragons 5th Edition System Reference Document monsters."
        });
      })
    ).addToggle(
      (t) => t.setValue(this.plugin.settings.disableSRD).onChange(async (v) => {
        this.plugin.settings.disableSRD = v;
        await this.plugin.saveSettings();
      })
    );
  }
  generateParseSettings(containerEl) {
    containerEl.empty();
    const additionalContainer = containerEl.createDiv(
      "statblock-additional-container"
    );
    new import_obsidian22.Setting(additionalContainer).setHeading().setName("Note Parsing");
    new import_obsidian22.Setting(additionalContainer).setName("Parse Frontmatter for Creatures").setDesc(
      createFragment((e) => {
        e.createSpan({
          text: "The plugin will watch the vault for creatures defined in note frontmatter."
        });
        e.createEl("br");
        e.createEl("br");
        e.createSpan({
          text: `The "Parse Frontmatter for Creatures" command can also be used.`
        });
      })
    ).addToggle((t) => {
      t.setValue(this.plugin.settings.autoParse).onChange(
        async (v) => {
          this.plugin.settings.autoParse = v;
          if (v) {
            this.plugin.watcher.start();
          }
          await this.plugin.saveSettings();
        }
      );
    });
    new import_obsidian22.Setting(additionalContainer).setName("Enable Debug Messages").setDesc(
      createFragment((e) => {
        e.createSpan({
          text: "Debug messages will be displayed by the file parser."
        });
      })
    ).addToggle(
      (t) => t.setValue(this.plugin.settings.debug).onChange(async (v) => {
        this.plugin.settings.debug = v;
        this.plugin.watcher.setDebug();
        await this.plugin.saveSettings();
      })
    );
    let path;
    new import_obsidian22.Setting(additionalContainer).setName("Bestiary Folder").setDesc(
      "The plugin will only parse notes inside these folders and their children."
    ).addText(async (text2) => {
      let folders = this.app.vault.getAllLoadedFiles().filter(
        (f) => f instanceof import_obsidian22.TFolder && !this.plugin.settings.paths.includes(f.path)
      );
      text2.setPlaceholder("/");
      const modal = new FolderSuggestionModal(this.app, text2, [
        ...folders
      ]);
      modal.onClose = async () => {
        const v = text2.inputEl.value?.trim() ? text2.inputEl.value.trim() : "/";
        path = (0, import_obsidian22.normalizePath)(v);
      };
      text2.inputEl.onblur = async () => {
        const v = text2.inputEl.value?.trim() ? text2.inputEl.value.trim() : "/";
        path = (0, import_obsidian22.normalizePath)(v);
      };
    }).addExtraButton((b) => {
      b.setIcon("plus-with-circle").onClick(async () => {
        if (!path || !path.length)
          return;
        this.plugin.settings.paths.push((0, import_obsidian22.normalizePath)(path));
        await this.plugin.saveSettings();
        await this.plugin.watcher.reparseVault();
        await this.generateParseSettings(containerEl);
      });
    });
    const paths = additionalContainer.createDiv("additional");
    for (const path2 of this.plugin.settings.paths) {
      new import_obsidian22.Setting(paths).setName(path2).addExtraButton(
        (b) => b.setIcon("trash").onClick(async () => {
          this.plugin.settings.paths = this.plugin.settings.paths.filter((p) => p != path2);
          await this.plugin.saveSettings();
          await this.plugin.watcher.reparseVault();
          await this.generateParseSettings(containerEl);
        })
      );
    }
  }
  generateLayouts(containerEl) {
    containerEl.empty();
    new import_obsidian22.Setting(containerEl).setHeading().setName("Layouts");
    const statblockCreatorContainer = containerEl.createDiv(
      "statblock-additional-container"
    );
    statblockCreatorContainer.createDiv("setting-item").createDiv().appendChild(
      createFragment((el) => {
        el.createSpan({
          text: "New statblock layouts can be created and managed here. A specific statblock can be used for a creature using the "
        });
        el.createEl("code", { text: "statblock" });
        el.createSpan({ text: " parameter." });
      })
    );
    const importFile = new import_obsidian22.Setting(statblockCreatorContainer).setName("Import From JSON").setDesc("Import a custom layout from a JSON file.");
    const inputFile = createEl("input", {
      attr: {
        type: "file",
        name: "layout",
        accept: ".json",
        multiple: true
      }
    });
    inputFile.onchange = async () => {
      const { files } = inputFile;
      if (!files.length)
        return;
      try {
        const { files: files2 } = inputFile;
        if (!files2.length)
          return;
        for (const file of Array.from(files2)) {
          await new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.onload = (event) => {
              try {
                const layout = JSON.parse(
                  event.target.result
                );
                if (!layout) {
                  reject(
                    new Error("Invalid layout imported")
                  );
                  return;
                }
                if (!layout?.name) {
                  reject(
                    new Error(
                      "Invalid layout imported: layout does not have a name"
                    )
                  );
                  return;
                }
                if (!layout?.blocks) {
                  reject(
                    new Error(
                      "Invalid layout imported: no blocks defined in layout."
                    )
                  );
                  return;
                }
                this.plugin.settings.layouts.push(
                  this.getDuplicate(layout)
                );
                resolve();
              } catch (e) {
                reject(e);
              }
            };
            reader.readAsText(file);
          }).catch((e) => {
            new import_obsidian22.Notice(
              `There was an error importing the layout: 

${e}`
            );
            console.error(e);
          });
        }
        await this.plugin.saveSettings();
        this.buildCustomLayouts(layoutContainer);
      } catch (e) {
      }
    };
    importFile.addButton((b) => {
      b.setIcon("upload");
      b.buttonEl.addClass("statblock-file-upload");
      b.buttonEl.appendChild(inputFile);
      b.onClick(() => inputFile.click());
    });
    new import_obsidian22.Setting(statblockCreatorContainer).setName("Add New Layout").addButton(
      (b) => b.setIcon("plus-with-circle").setTooltip("Add New Statblock").onClick(() => {
        const modal = new CreateStatblockModal(this.plugin);
        modal.onClose = async () => {
          if (!modal.saved)
            return;
          this.plugin.settings.layouts.push(
            this.getDuplicate(modal.layout)
          );
          await this.plugin.saveSettings();
          this.buildCustomLayouts(layoutContainer);
        };
        modal.open();
      })
    );
    const statblockAdditional = statblockCreatorContainer.createDiv("additional");
    new import_obsidian22.Setting(statblockAdditional).setName("Default Layout").setDesc(
      "Change the default statblock layout used, if not specified."
    ).addDropdown(async (d) => {
      for (const layout of DefaultLayouts) {
        d.addOption(layout.name, layout.name);
      }
      for (const layout of this.plugin.settings.layouts) {
        d.addOption(layout.name, layout.name);
      }
      if (!this.plugin.settings.default || !this.plugin.settings.layouts.find(
        ({ name }) => name == this.plugin.settings.default
      )) {
        this.plugin.settings.default = Layout5e.name;
        await this.plugin.saveSettings();
      }
      d.setValue(this.plugin.settings.default ?? Layout5e.name);
      d.onChange(async (v) => {
        this.plugin.settings.default = v;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian22.Setting(statblockAdditional).setName("Show Advanced Options").setDesc("Show advanced options when editing layout blocks.").addToggle(
      (t) => t.setValue(this.plugin.settings.showAdvanced).onChange(async (v) => {
        this.plugin.settings.showAdvanced = v;
        await this.plugin.saveSettings();
      })
    );
    const layoutContainer = statblockCreatorContainer.createDiv("additional");
    this.buildCustomLayouts(layoutContainer);
  }
  getDuplicate(layout) {
    if (!this.plugin.settings.layouts.find((l) => l.name == layout.name) && layout.name != Layout5e.name)
      return layout;
    const names = [
      Layout5e.name,
      ...this.plugin.settings.layouts.filter((l) => l.name.contains(`${layout.name} Copy`)).map((l) => l.name)
    ];
    let temp = `${layout.name} Copy`;
    let name = temp;
    let index = 1;
    while (names.includes(name)) {
      name = `${temp} (${index})`;
      index++;
    }
    return {
      blocks: (0, import_fast_copy3.default)(layout.blocks),
      name
    };
  }
  buildCustomLayouts(layoutContainer) {
    layoutContainer.empty();
    for (const layout of DefaultLayouts) {
      new import_obsidian22.Setting(layoutContainer).setName(layout.name).addExtraButton((b) => {
        b.setIcon("duplicate-glyph").setTooltip("Create Copy").onClick(async () => {
          this.plugin.settings.layouts.push(
            this.getDuplicate(layout)
          );
          await this.plugin.saveSettings();
          this.buildCustomLayouts(layoutContainer);
        });
      });
    }
    for (const layout of this.plugin.settings.layouts) {
      new import_obsidian22.Setting(layoutContainer).setName(layout.name).addExtraButton((b) => {
        b.setIcon("pencil").setTooltip("Edit").onClick(() => {
          const modal = new CreateStatblockModal(
            this.plugin,
            layout
          );
          modal.onClose = async () => {
            if (!modal.saved)
              return;
            this.plugin.settings.layouts.splice(
              this.plugin.settings.layouts.indexOf(
                layout
              ),
              1,
              modal.layout
            );
            await this.plugin.saveSettings();
            this.buildCustomLayouts(layoutContainer);
          };
          modal.open();
        });
      }).addExtraButton((b) => {
        b.setIcon("duplicate-glyph").setTooltip("Create Copy").onClick(async () => {
          this.plugin.settings.layouts.push(
            this.getDuplicate(layout)
          );
          await this.plugin.saveSettings();
          this.buildCustomLayouts(layoutContainer);
        });
      }).addExtraButton((b) => {
        b.setIcon("import-glyph").setTooltip("Export as JSON").onClick(() => {
          const link = createEl("a");
          const file = new Blob([JSON.stringify(layout)], {
            type: "json"
          });
          const url = URL.createObjectURL(file);
          link.href = url;
          link.download = `${layout.name}.json`;
          link.click();
          URL.revokeObjectURL(url);
        });
      }).addExtraButton((b) => {
        b.setIcon("trash").setTooltip("Delete").onClick(async () => {
          this.plugin.settings.layouts = this.plugin.settings.layouts.filter(
            (l) => l.name !== layout.name
          );
          await this.plugin.saveSettings();
          this.buildCustomLayouts(layoutContainer);
        });
      });
    }
  }
  generateImports(containerEl) {
    containerEl.empty();
    new import_obsidian22.Setting(containerEl).setHeading().setName("Import Homebrew Creatures");
    const importSettingsContainer = containerEl.createDiv(
      "statblock-additional-container"
    );
    new import_obsidian22.Setting(importSettingsContainer).setDesc(
      "Import creatures from creature files. Monsters are stored by name, so only the last creature by that name will be saved. This is destructive - any saved creature will be overwritten."
    );
    const importAdditional = importSettingsContainer.createDiv("additional");
    const importAppFile = new import_obsidian22.Setting(importAdditional).setName("Import DnDAppFile").setDesc("Only import content that you own.");
    const inputAppFile = createEl("input", {
      attr: {
        type: "file",
        name: "dndappfile",
        accept: ".xml",
        multiple: true
      }
    });
    inputAppFile.onchange = async () => {
      const { files } = inputAppFile;
      if (!files.length)
        return;
      try {
        const { files: files2 } = inputAppFile;
        if (!files2.length)
          return;
        const monsters = await this.importer.import(files2, "appfile");
        if (monsters && monsters.length) {
          await this.plugin.saveMonsters(monsters);
        }
        this.display();
      } catch (e) {
      }
    };
    importAppFile.addButton((b) => {
      b.setButtonText("Choose File(s)").setTooltip(
        "Import DnDAppFile Data"
      );
      b.buttonEl.addClass("statblock-file-upload");
      b.buttonEl.appendChild(inputAppFile);
      b.onClick(() => inputAppFile.click());
    });
    const importImprovedInitiative = new import_obsidian22.Setting(importAdditional).setName("Import Improved Initiative Data").setDesc("Only import content that you own.");
    const inputImprovedInitiative = createEl("input", {
      attr: {
        type: "file",
        name: "improvedinitiative",
        accept: ".json",
        multiple: true
      }
    });
    inputImprovedInitiative.onchange = async () => {
      const { files } = inputImprovedInitiative;
      if (!files.length)
        return;
      try {
        const { files: files2 } = inputImprovedInitiative;
        if (!files2.length)
          return;
        const monsters = await this.importer.import(files2, "improved");
        if (monsters && monsters.length) {
          await this.plugin.saveMonsters(monsters);
        }
        this.display();
      } catch (e) {
      }
    };
    importImprovedInitiative.addButton((b) => {
      b.setButtonText("Choose File(s)").setTooltip(
        "Import Improved Initiative Data"
      );
      b.buttonEl.addClass("statblock-file-upload");
      b.buttonEl.appendChild(inputImprovedInitiative);
      b.onClick(() => inputImprovedInitiative.click());
    });
    const importCritterDB = new import_obsidian22.Setting(importAdditional).setName("Import CritterDB Data").setDesc("Only import content that you own.");
    const inputCritterDB = createEl("input", {
      attr: {
        type: "file",
        name: "critterdb",
        accept: ".json",
        multiple: true
      }
    });
    inputCritterDB.onchange = async () => {
      const { files } = inputCritterDB;
      if (!files.length)
        return;
      try {
        const { files: files2 } = inputCritterDB;
        if (!files2.length)
          return;
        const monsters = await this.importer.import(files2, "critter");
        if (monsters && monsters.length) {
          await this.plugin.saveMonsters(monsters);
        }
        this.display();
      } catch (e) {
      }
    };
    importCritterDB.addButton((b) => {
      b.setButtonText("Choose File(s)").setTooltip(
        "Import CritterDB Data"
      );
      b.buttonEl.addClass("statblock-file-upload");
      b.buttonEl.appendChild(inputCritterDB);
      b.onClick(() => inputCritterDB.click());
    });
    const import5eTools = new import_obsidian22.Setting(importAdditional).setName("Import 5e.tools Data").setDesc("Only import content that you own.");
    const input5eTools = createEl("input", {
      attr: {
        type: "file",
        name: "fivetools",
        accept: ".json",
        multiple: true
      }
    });
    input5eTools.onchange = async () => {
      const { files } = input5eTools;
      if (!files.length)
        return;
      const monsters = await this.importer.import(files, "5e");
      if (monsters && monsters.length) {
        await this.plugin.saveMonsters(monsters);
      }
      this.display();
    };
    import5eTools.addButton((b) => {
      b.setButtonText("Choose File(s)").setTooltip(
        "Import 5e.tools Data"
      );
      b.buttonEl.addClass("statblock-file-upload");
      b.buttonEl.appendChild(input5eTools);
      b.onClick(() => input5eTools.click());
    });
    const importTetra = new import_obsidian22.Setting(importAdditional).setName("Import TetraCube Data").setDesc("Only import content that you own.");
    const inputTetra = createEl("input", {
      attr: {
        type: "file",
        name: "tetra",
        accept: ".json, .monster",
        multiple: true
      }
    });
    inputTetra.onchange = async () => {
      const { files } = inputTetra;
      if (!files.length)
        return;
      const monsters = await this.importer.import(files, "tetra");
      if (monsters && monsters.length) {
        await this.plugin.saveMonsters(monsters);
      }
      this.display();
    };
    importTetra.addButton((b) => {
      b.setButtonText("Choose File(s)").setTooltip(
        "Import TetraCube Data"
      );
      b.buttonEl.addClass("statblock-file-upload");
      b.buttonEl.appendChild(inputTetra);
      b.onClick(() => inputTetra.click());
    });
  }
  generateMonsters(containerEl) {
    containerEl.empty();
    new import_obsidian22.Setting(containerEl).setHeading().setName("Homebrew Creatures");
    const additionalContainer = containerEl.createDiv(
      "statblock-additional-container statblock-monsters"
    );
    new import_obsidian22.Setting(additionalContainer).setName("Add Creature").addButton((b) => {
      b.setIcon("plus-with-circle").onClick(() => {
        const modal = new EditMonsterModal(this.plugin);
        modal.onClose = () => {
          this.generateMonsters(containerEl);
        };
        modal.open();
      });
    });
    const ancestor = this.containerEl.closest(".statblock-settings");
    const { backgroundColor, paddingTop } = getComputedStyle(ancestor);
    const filters = additionalContainer.createDiv({
      cls: "statblock-monster-filter",
      attr: {
        style: `--statblock-filter-offset: ${paddingTop}; --statblock-filter-bg: ${backgroundColor}`
      }
    });
    this.filter = new import_obsidian22.Setting(filters).setClass("statblock-filter-container").addSearch((t) => {
      t.setPlaceholder("Search Monsters").onChange(
        (0, import_obsidian22.debounce)((v) => {
          this.showSearchResults(additional, v);
        }, 100)
      );
    }).addExtraButton((b) => {
      b.setIcon("trash").setTooltip("Delete All Filtered Monsters").onClick(() => {
        const modal = new ConfirmModal2(
          this.results.length,
          this.plugin.app
        );
        modal.onClose = async () => {
          if (modal.saved) {
            await this.plugin.deleteMonsters(
              ...this.results?.map((m) => m.name) ?? []
            );
            this.generateMonsters(containerEl);
          }
        };
        modal.open();
      });
    });
    this.setFilterDesc();
    const sourcesSetting = filters.createEl("details");
    sourcesSetting.createEl("summary", { text: "Filter Sources" });
    const list = sourcesSetting.createEl(
      "ul",
      "contains-task-list task-list-inline markdown-preview-view"
    );
    for (let source of this.plugin.sources) {
      const li = list.createEl("li", "task-list-item");
      li.createEl("input", {
        attr: {
          id: "input_" + source,
          checked: true
        },
        type: "checkbox",
        cls: "task-list-item-checkbox"
      }).onclick = (evt) => {
        const target = evt.target;
        if (target.checked) {
          this.displayed.add(source);
        } else {
          this.displayed.delete(source);
        }
        this.showSearchResults(additional, "");
      };
      li.createEl("label", {
        attr: {
          for: "input_" + source
        },
        text: source
      });
    }
    const additional = additionalContainer.createDiv("additional");
    if (!this.plugin.data.size) {
      additional.createDiv({
        attr: {
          style: "display: flex; justify-content: center; padding-bottom: 18px;"
        }
      }).createSpan({
        text: "No saved creatures! Create one to see it here."
      });
      return;
    }
    setTimeout(() => this.showSearchResults(additional, ""));
  }
  setFilterDesc() {
    this.filter.setDesc(
      createFragment((e) => {
        e.createSpan({
          text: `Managing ${this.plugin.settings.monsters.length} homebrew creature${this.plugin.settings.monsters.length == 1 ? "" : "s"}.`
        });
        e.createEl("p", {
          attr: {
            style: "margin: 0;"
          }
        }).createEl("small", {
          text: `Displaying: ${this.results.length} homebrew creatures.`
        });
      })
    );
  }
  showSearchResults(additional, search) {
    additional.empty();
    for (const item of this.performFuzzySearch(search)) {
      const content = new import_obsidian22.Setting(additional).setName(item.name);
      let desc, needTooltip = false;
      if (Array.isArray(item.source)) {
        let source = item.source.slice(0, 4);
        if (item.source.length > 4) {
          source.push(`and ${item.source.length - 4} more`);
          needTooltip = true;
        }
        desc = stringify(source, 0, ", ", false);
      } else {
        desc = item.source;
      }
      content.setDesc(desc);
      if (needTooltip) {
        content.descEl.setAttr(
          "aria-label",
          stringify(item.source, 0, ", ", false)
        );
      }
      content.addExtraButton((b) => {
        b.setIcon("info").setTooltip("View").onClick(() => {
          const modal = new ViewMonsterModal(
            this.plugin,
            item
          );
          modal.open();
        });
      }).addExtraButton((b) => {
        b.setIcon("pencil").setTooltip("Edit").onClick(() => {
          const modal = new EditMonsterModal(
            this.plugin,
            item
          );
          modal.open();
          modal.onClose = () => {
            this.showSearchResults(additional, search);
          };
        });
      }).addExtraButton((b) => {
        b.setIcon("trash").setTooltip("Delete").onClick(async () => {
          await this.plugin.deleteMonster(item.name);
          this.showSearchResults(additional, search);
        });
      });
    }
    this.setFilterDesc();
  }
  performFuzzySearch(input) {
    const results = [];
    for (const resource of this.plugin.sorted) {
      if (!resource.name && !resource.source)
        continue;
      if (typeof resource.source == "string" && !this.displayed.has(resource.source))
        continue;
      if (Array.isArray(resource.source) && !resource.source.find((s) => this.displayed.has(s)))
        continue;
      const search = (0, import_obsidian22.prepareSimpleSearch)(input);
      let result = search(resource.name);
      if (!result && resource.source != null) {
        result = search(stringify(resource.source));
      }
      if (result) {
        results.push(resource);
      }
    }
    this.results = results.slice(0, 100);
    return this.results;
  }
};
var CreateStatblockModal = class extends import_obsidian22.Modal {
  constructor(plugin, layout = {
    name: "Layout",
    blocks: []
  }) {
    super(plugin.app);
    this.plugin = plugin;
    this.saved = false;
    this.layout = (0, import_fast_copy3.default)(layout);
  }
  onOpen() {
    this.display();
  }
  display() {
    this.titleEl.createSpan({ text: "Create Layout" });
    this.creator = new StatblockCreator_default({
      target: this.contentEl,
      props: {
        layout: this.layout,
        plugin: this.plugin
      }
    });
    this.creator.$on("saved", () => {
      this.saved = true;
      this.close();
    });
    this.creator.$on("cancel", () => {
      this.close();
    });
  }
};
var ConfirmModal2 = class extends import_obsidian22.Modal {
  constructor(filtered, app) {
    super(app);
    this.filtered = filtered;
    this.saved = false;
  }
  onOpen() {
    this.titleEl.setText("Are you sure?");
    this.contentEl.createEl("p", {
      text: `This will delete ${this.filtered} creatures. This cannot be undone.`
    });
    new import_obsidian22.Setting(this.contentEl).setClass("no-border-top").addButton((b) => {
      b.setIcon("checkmark").setCta().onClick(() => {
        this.saved = true;
        this.close();
      });
    }).addExtraButton(
      (b) => b.setIcon("cross").onClick(() => {
        this.saved = true;
        this.close();
      })
    );
  }
};

// src/main.ts
var import_fast_copy4 = __toESM(require_fast_copy());

// node_modules/fast-sort/dist/sort.es.js
var castComparer = function(comparer) {
  return function(a, b, order2) {
    return comparer(a, b, order2) * order2;
  };
};
var throwInvalidConfigErrorIfTrue = function(condition, context) {
  if (condition)
    throw Error("Invalid sort config: " + context);
};
var unpackObjectSorter = function(sortByObj) {
  var _a = sortByObj || {}, asc = _a.asc, desc = _a.desc;
  var order2 = asc ? 1 : -1;
  var sortBy = asc || desc;
  throwInvalidConfigErrorIfTrue(!sortBy, "Expected `asc` or `desc` property");
  throwInvalidConfigErrorIfTrue(asc && desc, "Ambiguous object with `asc` and `desc` config properties");
  var comparer = sortByObj.comparer && castComparer(sortByObj.comparer);
  return { order: order2, sortBy, comparer };
};
var multiPropertySorterProvider = function(defaultComparer2) {
  return function multiPropertySorter(sortBy, sortByArr, depth, order2, comparer, a, b) {
    var valA;
    var valB;
    if (typeof sortBy === "string") {
      valA = a[sortBy];
      valB = b[sortBy];
    } else if (typeof sortBy === "function") {
      valA = sortBy(a);
      valB = sortBy(b);
    } else {
      var objectSorterConfig = unpackObjectSorter(sortBy);
      return multiPropertySorter(objectSorterConfig.sortBy, sortByArr, depth, objectSorterConfig.order, objectSorterConfig.comparer || defaultComparer2, a, b);
    }
    var equality = comparer(valA, valB, order2);
    if ((equality === 0 || valA == null && valB == null) && sortByArr.length > depth) {
      return multiPropertySorter(sortByArr[depth], sortByArr, depth + 1, order2, comparer, a, b);
    }
    return equality;
  };
};
function getSortStrategy(sortBy, comparer, order2) {
  if (sortBy === void 0 || sortBy === true) {
    return function(a, b) {
      return comparer(a, b, order2);
    };
  }
  if (typeof sortBy === "string") {
    throwInvalidConfigErrorIfTrue(sortBy.includes("."), "String syntax not allowed for nested properties.");
    return function(a, b) {
      return comparer(a[sortBy], b[sortBy], order2);
    };
  }
  if (typeof sortBy === "function") {
    return function(a, b) {
      return comparer(sortBy(a), sortBy(b), order2);
    };
  }
  if (Array.isArray(sortBy)) {
    var multiPropSorter_1 = multiPropertySorterProvider(comparer);
    return function(a, b) {
      return multiPropSorter_1(sortBy[0], sortBy, 1, order2, comparer, a, b);
    };
  }
  var objectSorterConfig = unpackObjectSorter(sortBy);
  return getSortStrategy(objectSorterConfig.sortBy, objectSorterConfig.comparer || comparer, objectSorterConfig.order);
}
var sortArray = function(order2, ctx, sortBy, comparer) {
  var _a;
  if (!Array.isArray(ctx)) {
    return ctx;
  }
  if (Array.isArray(sortBy) && sortBy.length < 2) {
    _a = sortBy, sortBy = _a[0];
  }
  return ctx.sort(getSortStrategy(sortBy, comparer, order2));
};
function createNewSortInstance(opts) {
  var comparer = castComparer(opts.comparer);
  return function(_ctx) {
    var ctx = Array.isArray(_ctx) && !opts.inPlaceSorting ? _ctx.slice() : _ctx;
    return {
      asc: function(sortBy) {
        return sortArray(1, ctx, sortBy, comparer);
      },
      desc: function(sortBy) {
        return sortArray(-1, ctx, sortBy, comparer);
      },
      by: function(sortBy) {
        return sortArray(1, ctx, sortBy, comparer);
      }
    };
  };
}
var defaultComparer = function(a, b, order2) {
  if (a == null)
    return order2;
  if (b == null)
    return -order2;
  if (a < b)
    return -1;
  if (a > b)
    return 1;
  return 0;
};
var sort = createNewSortInstance({
  comparer: defaultComparer
});
var inPlaceSort = createNewSortInstance({
  comparer: defaultComparer,
  inPlaceSorting: true
});

// src/watcher/watcher.ts
var import_obsidian23 = require("obsidian");

// src/watcher/watcher.worker.ts
function Worker3() {
  return inlineWorker('var N=Object.create;var E=Object.defineProperty;var Q=Object.getOwnPropertyDescriptor;var z=Object.getOwnPropertyNames;var H=Object.getPrototypeOf,V=Object.prototype.hasOwnProperty;var Y=(n,t)=>()=>(t||n((t={exports:{}}).exports,t),t.exports);var J=(n,t,s,r)=>{if(t&&typeof t=="object"||typeof t=="function")for(let y of z(t))!V.call(n,y)&&y!==s&&E(n,y,{get:()=>t[y],enumerable:!(r=Q(t,y))||r.enumerable});return n};var X=(n,t,s)=>(s=n!=null?N(H(n)):{},J(t||!n||!n.__esModule?E(s,"default",{value:n,enumerable:!0}):s,n));var k=Y((C,P)=>{(function(n,t){typeof C=="object"&&typeof P!="undefined"?P.exports=t():typeof define=="function"&&define.amd?define(t):(n=typeof globalThis!="undefined"?globalThis:n||self,n["fast-copy"]=t())})(C,function(){"use strict";var n=Function.prototype.toString,t=Object.create,s=Object.defineProperty,r=Object.getOwnPropertyDescriptor,y=Object.getOwnPropertyNames,w=Object.getOwnPropertySymbols,B=Object.getPrototypeOf,F=Object.prototype,R=F.hasOwnProperty,v=F.propertyIsEnumerable,S=typeof w=="function",q=typeof WeakMap=="function",W=function(){if(q)return function(){return new WeakMap};var o=function(){function f(){this._keys=[],this._values=[]}return f.prototype.has=function(u){return!!~this._keys.indexOf(u)},f.prototype.get=function(u){return this._values[this._keys.indexOf(u)]},f.prototype.set=function(u,i){this._keys.push(u),this._values.push(i)},f}();return function(){return new o}}(),A=function(o,f){var u=o.__proto__||B(o);if(!u)return t(null);var i=u.constructor;if(i===f.Object)return u===f.Object.prototype?{}:t(u);if(~n.call(i).indexOf("[native code]"))try{return new i}catch(p){}return t(u)},L=function(o,f,u,i){var p=A(o,f);i.set(o,p);for(var d in o)R.call(o,d)&&(p[d]=u(o[d],i));if(S)for(var e=w(o),c=0,l=e.length,g=void 0;c<l;++c)g=e[c],v.call(o,g)&&(p[g]=u(o[g],i));return p},$=function(o,f,u,i){var p=A(o,f);i.set(o,p);for(var d=S?y(o).concat(w(o)):y(o),e=0,c=d.length,l=void 0,g=void 0;e<c;++e)if(l=d[e],l!=="callee"&&l!=="caller")if(g=r(o,l),g){!g.get&&!g.set&&(g.value=u(o[l],i));try{s(p,l,g)}catch(a){p[l]=g.value}}else p[l]=u(o[l],i);return p},T=function(o){var f="";return o.global&&(f+="g"),o.ignoreCase&&(f+="i"),o.multiline&&(f+="m"),o.unicode&&(f+="u"),o.sticky&&(f+="y"),f},D=Array.isArray,G=Object.getPrototypeOf,I=function(){return typeof globalThis!="undefined"?globalThis:typeof self!="undefined"?self:typeof window!="undefined"?window:typeof global!="undefined"?global:(console&&console.error&&console.error(\'Unable to locate global object, returning "this".\'),this)}();function m(o,f){var u=!!(f&&f.isStrict),i=f&&f.realm||I,p=u?$:L,d=function(e,c){if(!e||typeof e!="object")return e;if(c.has(e))return c.get(e);var l=e.__proto__||G(e),g=l&&l.constructor;if(!g||g===i.Object)return p(e,i,d,c);var a;if(D(e)){if(u)return $(e,i,d,c);a=new g,c.set(e,a);for(var O=0,U=e.length;O<U;++O)a[O]=d(e[O],c);return a}if(e instanceof i.Date)return new g(e.getTime());if(e instanceof i.RegExp)return a=new g(e.source,e.flags||T(e)),a.lastIndex=e.lastIndex,a;if(i.Map&&e instanceof i.Map)return a=new g,c.set(e,a),e.forEach(function(_,K){a.set(K,d(_,c))}),a;if(i.Set&&e instanceof i.Set)return a=new g,c.set(e,a),e.forEach(function(_){a.add(d(_,c))}),a;if(i.Blob&&e instanceof i.Blob)return e.slice(0,e.size,e.type);if(i.Buffer&&i.Buffer.isBuffer(e))return a=i.Buffer.allocUnsafe?i.Buffer.allocUnsafe(e.length):new g(e.length),c.set(e,a),e.copy(a),a;if(i.ArrayBuffer){if(i.ArrayBuffer.isView(e))return a=new g(e.buffer.slice(0)),c.set(e,a),a;if(e instanceof i.ArrayBuffer)return a=e.slice(0),c.set(e,a),a}return typeof e.then=="function"||e instanceof Error||i.WeakMap&&e instanceof i.WeakMap||i.WeakSet&&e instanceof i.WeakSet?e:p(e,i,d,c)};return d(o,W())}return m.default=m,m.strict=function(f,u){return m(f,{isStrict:!0,realm:u?u.realm:void 0})},m})});var j=X(k());var M=(n,t=0)=>{let s=[];if(t==5||!n||n==null)return"";if(typeof n=="string")return n;if(typeof n=="number")return`${n}`;if(Array.isArray(n))s.push(`${n.map(r=>M(r,t++)).join(" ")}`);else if(typeof n=="object")for(let[r,y]of Object.entries(n))s.push(M(r,t++),M(y,t++));return s.join(" ")};function b(n=[],t=[]){n||(n=[]),t||(t=[]);for(let s of t!=null?t:[])if(!!s)if(Array.isArray(s)){let r=M(s.slice(1));n=n.filter(y=>y.name!=s[0]&&y.desc!=r),n.push({name:s[0],desc:r})}else typeof s=="object"&&("name"in s||"desc"in s)&&(n=n.filter(r=>r.name!=s.name||r.desc!=s.desc),n.push({name:s.name,desc:M(s.desc)}));return n}var h=self,x=class{constructor(){this.queue=[];this.parsing=!1;h.addEventListener("message",t=>{t.data.type=="queue"&&(this.add(...t.data.paths),this.debug&&console.debug(`TTRPG: Received queue message for ${t.data.paths.length} paths`))}),h.addEventListener("message",t=>{t.data.type=="debug"&&(this.debug=t.data.debug)})}add(...t){this.debug&&console.debug(`TTRPG: Adding ${t.length} paths to queue`),this.queue.push(...t),this.parsing||this.parse()}async parse(){for(this.parsing=!0;this.queue.length;){let t=this.queue.shift();this.debug&&console.debug(`TTRPG: Parsing ${t} for statblocks (${this.queue.length} to go)`);let{file:s,cache:r}=await this.getFileData(t);this.parseFileForCreatures(s,r),h.postMessage({type:"done",path:t})}this.parsing=!1,h.postMessage({type:"save"})}async getFileData(t){return new Promise(s=>{h.addEventListener("message",r=>{r.data.type=="file"&&s(r.data)}),h.postMessage({path:t,type:"get"})})}parseFileForCreatures(t,s){if(!s||!s.frontmatter||!s.frontmatter.statblock||!s.frontmatter.name)return;let r=Object.assign({},(0,j.default)(s.frontmatter),{note:t.path,mtime:t.mtime});r.traits&&(r.traits=b([],r.traits)),r.actions&&(r.actions=b([],r.actions)),r.bonus_actions&&(r.bonus_actions=b([],r.bonus_actions)),r.reactions&&(r.reactions=b([],r.reactions)),r.legendary_actions&&(r.legendary_actions=b([],r.legendary_actions)),this.debug&&console.debug(`TTRPG: Adding ${r.name} to bestiary from ${t.basename}`),h.postMessage({type:"update",monster:r,path:t.path})}};new x;\n');
}

// src/watcher/watcher.ts
var Watcher = class extends import_obsidian23.Component {
  constructor(plugin) {
    super();
    this.plugin = plugin;
    this.watchPaths = /* @__PURE__ */ new Map();
    this.worker = new Worker3();
  }
  get metadataCache() {
    return this.plugin.app.metadataCache;
  }
  get vault() {
    return this.plugin.app.vault;
  }
  setDebug() {
    this.worker.postMessage({
      type: "debug",
      debug: this.plugin.settings.debug
    });
  }
  onload() {
    this.setDebug();
    this.registerEvent(
      this.metadataCache.on("changed", async (file) => {
        if (!this.plugin.settings.autoParse)
          return;
        const { frontmatter } = this.metadataCache.getFileCache(file) ?? {};
        if (!frontmatter || !frontmatter.statblock) {
          if (this.watchPaths.has(file.path)) {
            this.delete(file.path);
          }
          return;
        }
        if (this.plugin.settings.debug)
          console.debug(`TTRPG: Reparsing ${file.name}`);
        this.parsePath(file);
      })
    );
    this.registerEvent(
      this.vault.on("rename", async (abstractFile, oldPath) => {
        if (!this.plugin.settings.autoParse)
          return;
        if (!(abstractFile instanceof import_obsidian23.TFile))
          return;
        if (!this.watchPaths.has(oldPath))
          return;
        if (this.plugin.settings.debug)
          console.debug(
            `TTRPG: Handling rename of ${oldPath} to ${abstractFile.path}`
          );
        await this.delete(oldPath);
        this.parsePath(abstractFile);
      })
    );
    this.registerEvent(
      this.vault.on("delete", (abstractFile) => {
        if (!this.plugin.settings.autoParse)
          return;
        if (!(abstractFile instanceof import_obsidian23.TFile))
          return;
        if (!this.watchPaths.has(abstractFile.path))
          return;
        this.delete(abstractFile.path);
      })
    );
    this.worker.addEventListener(
      "message",
      (event) => {
        if (event.data.type == "get") {
          const { path } = event.data;
          const data = this.getFileInformation(path);
          this.worker.postMessage({
            type: "file",
            path,
            ...data
          });
        }
      }
    );
    this.worker.addEventListener(
      "message",
      async (evt) => {
        if (evt.data.type == "update") {
          const { monster, path } = evt.data;
          let update2 = false;
          if (this.watchPaths.has(path)) {
            const existing = this.watchPaths.get(path);
            this.plugin.deleteMonster(existing);
            update2 = true;
            if (this.plugin.settings.debug)
              console.debug(`TTRPG: Updating ${monster.name}`);
          }
          this.watchPaths.set(path, monster.name);
          this.plugin.saveMonster(monster, false, false);
          if (this.plugin.settings.debug)
            console.debug(
              `TTRPG: ${update2 ? "Updated" : "Added"} ${monster.name}`
            );
        }
      }
    );
    this.worker.addEventListener(
      "message",
      async (evt) => {
        if (evt.data.type == "save") {
          await this.save();
        }
      }
    );
    this.plugin.app.workspace.onLayoutReady(() => {
      for (const [_, monster] of this.plugin.settings.monsters.filter(
        ([_2, monster2]) => monster2.note
      )) {
        if (this.watchPaths.has(monster.note)) {
          this.plugin.deleteMonster(monster.name);
        }
        this.watchPaths.set(monster.note, monster.name);
      }
      if (!this.plugin.settings.autoParse)
        return;
      this.start();
    });
  }
  async save() {
    await this.plugin.saveSettings();
    if (this.startTime) {
      console.info(
        `TTRPG Statblocks: Frontmatter Parsing Complete in ${((Date.now() - this.startTime) / 1e3).toLocaleString()} seconds.`
      );
      this.startTime = 0;
    }
    if (this.announce) {
      new import_obsidian23.Notice("TTRPG Statblocks: Frontmatter Parsing complete.");
      this.announce = false;
    }
  }
  async delete(path) {
    await this.plugin.deleteMonster(this.watchPaths.get(path));
    this.watchPaths.delete(path);
    if (this.plugin.settings.debug)
      console.debug(`TTRPG: Removing '${path}' from bestiary`);
  }
  start(announce = false) {
    this.announce = announce;
    this.startTime = Date.now();
    console.info("TTRPG Statblocks: Starting Frontmatter Parsing.");
    if (!this.plugin.settings.paths?.length) {
      this.plugin.settings.paths = ["/"];
    }
    let isParsing = false;
    for (const path of this.plugin.settings.paths) {
      const folder = this.vault.getAbstractFileByPath(path);
      if (!folder)
        continue;
      isParsing = true;
      this.parsePath(folder);
    }
    if (!isParsing) {
      this.save();
    }
  }
  pathContainsFile(file) {
    if (!this.plugin.settings.paths.length || this.plugin.settings.paths.contains("/"))
      return true;
    for (const path of this.plugin.settings.paths) {
      if (file.path.includes(path))
        return true;
    }
    return false;
  }
  parsePath(folder) {
    if (!this.pathContainsFile(folder))
      return;
    const parsing = /* @__PURE__ */ new Set();
    for (const path of this.getFiles(folder)) {
      parsing.add(path);
    }
    this.startParsing([...parsing]);
  }
  startParsing(paths) {
    if (paths.length) {
      this.worker.postMessage({
        type: "queue",
        paths
      });
    }
  }
  getFileInformation(path) {
    const file = this.plugin.app.vault.getAbstractFileByPath(path);
    if (!(file instanceof import_obsidian23.TFile))
      return {};
    if (this.watchPaths.has(file.path)) {
      const monster = this.plugin.bestiary.get(
        this.watchPaths.get(file.path)
      );
      if (monster && monster.mtime && monster.mtime == file.stat.mtime)
        return {};
    }
    const cache = this.metadataCache.getFileCache(file);
    return {
      cache,
      file: {
        path: file.path,
        basename: file.basename,
        mtime: file.stat.mtime
      }
    };
  }
  getFiles(folder) {
    let files = [];
    if (folder instanceof import_obsidian23.TFolder) {
      for (const child of folder.children) {
        files.push(...this.getFiles(child));
      }
    }
    if (folder instanceof import_obsidian23.TFile) {
      files.push(folder.path);
    }
    return files;
  }
  async reparseVault() {
    for (const monster of this.watchPaths.values()) {
      this.plugin.deleteMonster(monster, false, false);
    }
    this.start(false);
  }
  onunload() {
    this.worker.terminate();
    this.worker = null;
  }
};

// src/suggest/index.ts
var import_obsidian24 = require("obsidian");
var StatblockSuggester = class extends import_obsidian24.EditorSuggest {
  constructor(plugin) {
    super(plugin.app);
    this.plugin = plugin;
  }
  getSuggestions(ctx) {
    return this.plugin.getBestiaryNames().filter((p) => p.toLowerCase().contains(ctx.query.toLowerCase()));
  }
  renderSuggestion(text2, el) {
    el.createSpan({ text: text2 });
  }
  selectSuggestion(value, evt) {
    if (!this.context)
      return;
    const line = this.context.editor.getLine(this.context.end.line).slice(this.context.end.ch);
    const [_, exists] = line.match(/^(\] ?)/) ?? [];
    this.context.editor.replaceRange(
      `${value}`,
      this.context.start,
      {
        ...this.context.end,
        ch: this.context.start.ch + this.context.query.length + (exists?.length ?? 0)
      },
      "statblocks"
    );
    this.context.editor.setCursor(
      this.context.start.line,
      this.context.start.ch + value.length
    );
    this.close();
  }
  onTrigger(cursor, editor, file) {
    const range = editor.getRange({ line: 0, ch: 0 }, cursor);
    if (range.indexOf("```statblock\n") === -1)
      return;
    const split = range.split("\n").reverse();
    let inStatblock = false;
    for (const line2 of split) {
      if (/^```$/.test(line2))
        return;
      if (/^```statblock/.test(line2)) {
        inStatblock = true;
        break;
      }
    }
    if (!inStatblock)
      return;
    const line = editor.getLine(cursor.line);
    if (!/^(monster|creature):/m.test(line.slice(0, cursor.ch)))
      return null;
    const match = line.match(/^(monster|creature): (.+)\n?/);
    if (!match)
      return null;
    const [_, param, query] = match;
    if (!query || this.plugin.getBestiaryNames().find((p) => p.toLowerCase() == query.toLowerCase())) {
      return null;
    }
    const matchData = {
      end: cursor,
      start: {
        ch: param.length + 2,
        line: cursor.line
      },
      query
    };
    return matchData;
  }
};

// src/main.ts
var DEFAULT_DATA = {
  monsters: [],
  layouts: [],
  default: Layout5e.name,
  useDice: true,
  renderDice: false,
  export: true,
  showAdvanced: false,
  version: {
    major: null,
    minor: null,
    patch: null
  },
  paths: ["/"],
  autoParse: false,
  disableSRD: false,
  tryToRenderLinks: true,
  debug: false
};
var StatBlockPlugin = class extends import_obsidian25.Plugin {
  constructor() {
    super(...arguments);
    this.namesHaveChanged = true;
    this.watcher = new Watcher(this);
    this._sorted = [];
  }
  getBestiaryNames() {
    if (this.namesHaveChanged) {
      this.names = [...this.bestiary.keys()];
    }
    return this.names;
  }
  getRoller(str) {
    if (!this.canUseDiceRoller)
      return;
    const roller = this.app.plugins.getPlugin("obsidian-dice-roller").getRollerSync(str, "statblock", true);
    return roller;
  }
  get canUseDiceRoller() {
    if (this.app.plugins.getPlugin("obsidian-dice-roller") != null) {
      if (!this.app.plugins.getPlugin("obsidian-dice-roller").getRollerSync) {
        new import_obsidian25.Notice(
          "Please update Dice Roller to the latest version to use with Initiative Tracker."
        );
      } else {
        return true;
      }
    }
    return false;
  }
  get sorted() {
    if (!this._sorted.length)
      this._sorted = sort(Array.from(this.data.values())).asc(
        (m) => m.name
      );
    return this._sorted;
  }
  get sources() {
    return new Set(
      Array.from(this.data.values()).map((m) => m.source).flat()
    );
  }
  async onload() {
    console.log("TTRPG StatBlocks loaded");
    await this.loadSettings();
    await this.loadMonsterData();
    await this.saveSettings();
    this.watcher.load();
    this.addCommand({
      id: "parse-frontmatter",
      name: "Parse Frontmatter for Creatures",
      callback: () => {
        this.watcher.start(true);
      }
    });
    (0, import_obsidian25.addIcon)(
      "dropzone-grip",
      `<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="grip-lines-vertical" class="svg-inline--fa fa-grip-lines-vertical fa-w-8" role="img" viewBox="0 0 256 512"><path fill="currentColor" d="M96 496V16c0-8.8-7.2-16-16-16H48c-8.8 0-16 7.2-16 16v480c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16zm128 0V16c0-8.8-7.2-16-16-16h-32c-8.8 0-16 7.2-16 16v480c0 8.8 7.2 16 16 16h32c8.8 0 16-7.2 16-16z"/></svg>`
    );
    (0, import_obsidian25.addIcon)(
      "statblock-conditioned",
      `<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="far" data-icon="question-circle" class="svg-inline--fa fa-question-circle fa-w-16" role="img" viewBox="0 0 512 512"><path fill="currentColor" d="M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 448c-110.532 0-200-89.431-200-200 0-110.495 89.472-200 200-200 110.491 0 200 89.471 200 200 0 110.53-89.431 200-200 200zm107.244-255.2c0 67.052-72.421 68.084-72.421 92.863V300c0 6.627-5.373 12-12 12h-45.647c-6.627 0-12-5.373-12-12v-8.659c0-35.745 27.1-50.034 47.579-61.516 17.561-9.845 28.324-16.541 28.324-29.579 0-17.246-21.999-28.693-39.784-28.693-23.189 0-33.894 10.977-48.942 29.969-4.057 5.12-11.46 6.071-16.666 2.124l-27.824-21.098c-5.107-3.872-6.251-11.066-2.644-16.363C184.846 131.491 214.94 112 261.794 112c49.071 0 101.45 38.304 101.45 88.8zM298 368c0 23.159-18.841 42-42 42s-42-18.841-42-42 18.841-42 42-42 42 18.841 42 42z"/></svg>`
    );
    (0, import_obsidian25.addIcon)(
      "dice-roller-dice",
      `<svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="fas" data-icon="dice" class="svg-inline--fa fa-dice fa-w-20" role="img" viewBox="0 0 640 512"><path fill="currentColor" d="M592 192H473.26c12.69 29.59 7.12 65.2-17 89.32L320 417.58V464c0 26.51 21.49 48 48 48h224c26.51 0 48-21.49 48-48V240c0-26.51-21.49-48-48-48zM480 376c-13.25 0-24-10.75-24-24 0-13.26 10.75-24 24-24s24 10.74 24 24c0 13.25-10.75 24-24 24zm-46.37-186.7L258.7 14.37c-19.16-19.16-50.23-19.16-69.39 0L14.37 189.3c-19.16 19.16-19.16 50.23 0 69.39L189.3 433.63c19.16 19.16 50.23 19.16 69.39 0L433.63 258.7c19.16-19.17 19.16-50.24 0-69.4zM96 248c-13.25 0-24-10.75-24-24 0-13.26 10.75-24 24-24s24 10.74 24 24c0 13.25-10.75 24-24 24zm128 128c-13.25 0-24-10.75-24-24 0-13.26 10.75-24 24-24s24 10.74 24 24c0 13.25-10.75 24-24 24zm0-128c-13.25 0-24-10.75-24-24 0-13.26 10.75-24 24-24s24 10.74 24 24c0 13.25-10.75 24-24 24zm0-128c-13.25 0-24-10.75-24-24 0-13.26 10.75-24 24-24s24 10.74 24 24c0 13.25-10.75 24-24 24zm128 128c-13.25 0-24-10.75-24-24 0-13.26 10.75-24 24-24s24 10.74 24 24c0 13.25-10.75 24-24 24z"/></svg>`
    );
    this.addSettingTab(new StatblockSettingTab(this.app, this));
    (0, import_obsidian25.addIcon)(SAVE_SYMBOL, SAVE_ICON);
    (0, import_obsidian25.addIcon)(EXPORT_SYMBOL, EXPORT_ICON);
    this.bestiary = new Map([
      ...getBestiaryByName(this.settings.disableSRD),
      ...this.data
    ]);
    Object.defineProperty(window, "bestiary", {
      value: this.bestiary,
      writable: false,
      configurable: true
    });
    this.registerMarkdownCodeBlockProcessor(
      "statblock",
      this.postprocessor.bind(this)
    );
    this.registerEditorSuggest(new StatblockSuggester(this));
    this.registerEvent(
      this.app.workspace.on("dice-roller:unload", () => {
        this.settings.useDice = false;
      })
    );
  }
  async loadSettings() {
    const settings = await this.loadData();
    if (settings != void 0 && !("version" in settings)) {
      this.settings = { ...DEFAULT_DATA };
      this.settings.monsters = settings;
      await this.loadMonsterData();
      new import_obsidian25.Notice(
        "5e Statblocks is now TTRPG Statblocks. Check out the ReadMe for more information!"
      );
    } else {
      this.settings = {
        ...DEFAULT_DATA,
        ...settings
      };
    }
    const version = this.manifest.version.split(".");
    this.settings.version = {
      major: Number(version[0]),
      minor: Number(version[1]),
      patch: Number(version[2])
    };
  }
  async saveSettings() {
    this.settings.monsters = this._transformData(this.data);
    this.bestiary = new Map([
      ...getBestiaryByName(this.settings.disableSRD),
      ...this.data
    ]);
    await this.saveData(this.settings);
  }
  async loadMonsterData() {
    const data = this.settings.monsters;
    if (!data)
      this.data = /* @__PURE__ */ new Map();
    this.data = new Map(
      data?.map(([name, monster]) => {
        return [name, (0, import_fast_copy4.default)(monster)];
      }) ?? []
    );
  }
  async saveMonster(monster, sortFields = true, save = true) {
    if (!monster.name)
      return;
    this.data.set(monster.name, monster);
    this.bestiary.set(monster.name, monster);
    this.namesHaveChanged = true;
    if (save) {
      await this.saveSettings();
    }
    if (sortFields)
      this._sorted = sort(Array.from(this.data.values())).asc(
        (m) => m.name
      );
  }
  async saveMonsters(monsters) {
    for (let monster of monsters) {
      await this.saveMonster(monster, false, false);
    }
    this._sorted = sort(Array.from(this.data.values())).asc(
      (m) => m.name
    );
    await this.saveSettings();
  }
  async updateMonster(oldMonster, newMonster) {
    this.data.delete(oldMonster.name);
    await this.saveMonster(newMonster);
  }
  async deleteMonsters(...monsters) {
    for (const monster of monsters) {
      if (!this.data.has(monster))
        continue;
      this.data.delete(monster);
      this.bestiary.delete(monster);
      this.namesHaveChanged = true;
    }
    await this.saveSettings();
    this._sorted = sort(Array.from(this.data.values())).asc(
      (m) => m.name
    );
  }
  async deleteMonster(monster, sortFields = true, save = true) {
    if (!this.data.has(monster))
      return;
    this.data.delete(monster);
    this.bestiary.delete(monster);
    if (getBestiaryByName(this.settings.disableSRD).has(monster)) {
      this.bestiary.set(
        monster,
        getBestiaryByName(this.settings.disableSRD).get(monster)
      );
    }
    this.namesHaveChanged = true;
    if (save)
      await this.saveSettings();
    if (sortFields)
      this._sorted = sort(Array.from(this.data.values())).asc(
        (m) => m.name
      );
  }
  _transformData(data) {
    return [...data ?? []].map(([name, monster]) => {
      return [name, (0, import_fast_copy4.default)(monster)];
    });
  }
  onunload() {
    delete window.bestiary;
    this.watcher.unload();
    console.log("TTRPG StatBlocks unloaded");
  }
  exportAsPng(name, containerEl) {
    function filter(node) {
      return !node.hasClass || !node.hasClass("clickable-icon");
    }
    const content = containerEl.querySelector(".statblock-content");
    if (content)
      delete content.style["boxShadow"];
    import_dom_to_image.default.toPng(containerEl, {
      filter,
      style: { height: "100%" }
    }).then((url) => {
      const link = document.createElement("a");
      link.download = name + ".png";
      link.href = url;
      link.click();
      link.detach();
    }).catch((e) => {
      new import_obsidian25.Notice(
        `There was an error creating the image: 

${e.message}`
      );
      console.error(e);
    });
  }
  parseForDice(property) {
    const roller = (str) => {
      let text2;
      let original;
      if (/\w+ [\+\-]\d+/.test(str.trim())) {
        let [, save, sign, number] = str.match(/(\w+ )([\+\-])(\d+)/) ?? [];
        let mult = 1;
        if (sign === "-") {
          mult = -1;
        }
        if (!isNaN(Number(number))) {
          text2 = `1d20+${mult * Number(number)}`;
          original = `${save} ${sign}${number}`;
        }
      } else if (/[\+\-]\d+ to hit/.test(str.trim())) {
        let [, sign, number] = str.match(/([\+\-])(\d+)/) ?? [];
        let mult = 1;
        if (sign === "-") {
          mult = -1;
        }
        if (!isNaN(Number(number))) {
          text2 = `1d20+${mult * Number(number)}`;
          original = str;
        }
      } else if (/\d+\s\(\d+d\d+(?:\s*[+\-]\s*\d+)?\)/.test(str.trim())) {
        let [, base, dice] = str.match(/(\d+)\s\((\d+d\d+(?:\s*[+\-]\s*\d+)?)\)/) ?? [];
        if (!isNaN(Number(base)) && dice) {
          text2 = dice;
        }
      }
      return { text: text2, original };
    };
    const match = (str) => {
      return /\w+ [\+\-]\d+/.test(str.trim()) || /[\+\-]\d+ to hit/.test(str.trim()) || /\d+\s\(\d+d\d+(?:\s*[+\-]\s*\d+)?\)/.test(str.trim());
    };
    return property.split(
      /([\+\-]\d+ to hit|\d+\s\(\d+d\d+(?:\s*[+\-]\s*\d+)?\)|\w+ [\+\-]\d+)/
    ).map((v) => match(v) ? roller(v) : v);
  }
  get defaultLayout() {
    return this.settings.layouts?.find(
      (layout) => layout.name == this.settings.default
    ) ?? Layout5e;
  }
  async postprocessor(source, el, ctx) {
    try {
      source = source.replace(
        /^image: (?:\[\[([\s\S]+?)\]\]|\[[\s\S]*?\]\(([\s\S]+?)\))\n/gm,
        (_, wiki, mark) => {
          if (mark?.length) {
            return `image: ${mark}
`;
          }
          return `image: ${wiki}
`;
        }
      ).replace(
        /\[\[([\s\S]+?)\]\]/g,
        `<STATBLOCK-LINK>$1</STATBLOCK-LINK>`
      ).replace(
        /\[([\s\S]*?)\]\(([\s\S]+?)\)/g,
        (_, alias, path) => {
          if (alias.length) {
            return `<STATBLOCK-LINK>${path}|${alias}</STATBLOCK-LINK>`;
          }
          return `<STATBLOCK-LINK>${path}</STATBLOCK-LINK>`;
        }
      );
      let params = (0, import_obsidian25.parseYaml)(source);
      params = JSON.parse(JSON.stringify(params).replace(/\\#/g, "#"));
      const canSave = params && "name" in params;
      if (!params || !Object.values(params ?? {}).length) {
        params = Object.assign({}, params, { note: ctx.sourcePath });
      }
      if (params.note) {
        const note = Array.isArray(params.note) ? params.note.flat(Infinity).pop() : params.note;
        const file = await this.app.metadataCache.getFirstLinkpathDest(
          `${note}`,
          ctx.sourcePath
        );
        if (file && file instanceof import_obsidian25.TFile) {
          const cache = await this.app.metadataCache.getFileCache(
            file
          );
          Object.assign(params, (0, import_fast_copy4.default)(cache.frontmatter) ?? {});
        }
      }
      const monster = Object.assign(
        {},
        this.bestiary.get(params.monster) ?? this.bestiary.get(params.creature)
      );
      if (monster) {
        let traits = transformTraits(
          monster.traits ?? [],
          params.traits ?? []
        );
        let actions = transformTraits(
          monster.actions ?? [],
          params.actions ?? []
        );
        let bonus_actions = transformTraits(
          monster.bonus_actions ?? [],
          params.bonus_actions ?? []
        );
        let legendary_actions = transformTraits(
          monster.legendary_actions ?? [],
          params.legendary_actions ?? []
        );
        let reactions = transformTraits(
          monster.reactions ?? [],
          params.reactions ?? []
        );
        Object.assign(params, {
          traits,
          actions,
          bonus_actions,
          reactions,
          legendary_actions
        });
      }
      if ("image" in params) {
        if (Array.isArray(params.image)) {
          params.image = params.image.flat(2).join("");
        }
      }
      if ("saves" in params && typeof params.saves == "object" && !Array.isArray(params.saves)) {
        params.saves = Object.entries(params.saves).map(
          (a) => Object.fromEntries([a])
        );
      }
      if ("skillsaves" in params && typeof params.skillsaves == "object" && !Array.isArray(params.skillsaves)) {
        params.skillsaves = Object.entries(params.skillsaves).map(
          (a) => Object.fromEntries([a])
        );
      }
      const toBuild = Object.assign(
        {},
        monster ?? {},
        params ?? {}
      );
      let layout = this.settings.layouts.find(
        (layout2) => layout2.name == toBuild?.layout || layout2.name == toBuild?.statblock
      ) ?? this.defaultLayout;
      el.addClass("statblock-plugin-container");
      el.parentElement?.addClass("statblock-plugin-parent");
      const toBuildWithLinksReplaced = JSON.parse(
        JSON.stringify(toBuild).replace(
          /\[\["(.+?)"\]\]/g,
          `"<STATBLOCK-LINK>$1</STATBLOCK-LINK>"`
        ).replace(/\[\[([^"]+?)\]\]/g, (match, p1) => {
          return `<STATBLOCK-LINK>${p1}</STATBLOCK-LINK>`;
        }).replace(
          /\[([^"]*?)\]\(([^"]+?)\)/g,
          (s, alias, path) => {
            if (alias.length) {
              return `<STATBLOCK-LINK>${path}|${alias}</STATBLOCK-LINK>`;
            }
            return `<STATBLOCK-LINK>${path}</STATBLOCK-LINK>`;
          }
        )
      );
      let statblock = new StatBlockRenderer(
        el,
        toBuildWithLinksReplaced,
        this,
        canSave,
        ctx.sourcePath,
        layout
      );
      ctx.addChild(statblock);
    } catch (e) {
      console.error(`Obsidian Statblock Error:
${e}`);
      let pre = createEl("pre");
      pre.setText(`\`\`\`statblock
There was an error rendering the statblock:
${e.stack.split("\n").filter((line) => !/^at/.test(line?.trim())).join("\n")}
\`\`\``);
    }
  }
  render(creature, el, display) {
    const monster = Object.assign(this.bestiary.get(creature.name) ?? {}, { ...creature });
    if (!monster)
      return null;
    if (display) {
      monster.name = display;
    }
    const toBuildWithLinksReplaced = JSON.parse(
      JSON.stringify(monster).replace(
        /\[\["(.+?)"\]\]/g,
        `"<STATBLOCK-LINK>$1</STATBLOCK-LINK>"`
      ).replace(/\[\[([^"]+?)\]\]/g, (match, p1) => {
        return `<STATBLOCK-LINK>${p1}</STATBLOCK-LINK>`;
      }).replace(
        /\[([^"]*?)\]\(([^"]+?)\)/g,
        (s, alias, path) => {
          if (alias.length) {
            return `<STATBLOCK-LINK>${path}|${alias}</STATBLOCK-LINK>`;
          }
          return `<STATBLOCK-LINK>${path}</STATBLOCK-LINK>`;
        }
      )
    );
    console.log(
      "\u{1F680} ~ file: main.ts ~ line 622 ~ toBuildWithLinksReplaced",
      toBuildWithLinksReplaced
    );
    return new StatBlockRenderer(
      el,
      toBuildWithLinksReplaced,
      this,
      false,
      "",
      this.getLayoutOrDefault(monster)
    );
  }
  getLayoutOrDefault(monster) {
    return this.settings.layouts.find((l) => l.name == monster?.layout) ?? this.defaultLayout;
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLTVlLXN0YXRibG9ja3Mvbm9kZV9tb2R1bGVzL2RvbS10by1pbWFnZS9zcmMvZG9tLXRvLWltYWdlLmpzIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi01ZS1zdGF0YmxvY2tzL25vZGVfbW9kdWxlcy9zcmMvdXRpbHMudHMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLTVlLXN0YXRibG9ja3Mvbm9kZV9tb2R1bGVzL3NyYy9pbmRleC50cyIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4tNWUtc3RhdGJsb2Nrcy9zcmMvbWFpbi50cyIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4tNWUtc3RhdGJsb2Nrcy9zcmMvZGF0YS9zcmQtYmVzdGlhcnkudHMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLTVlLXN0YXRibG9ja3Mvc3JjL3ZpZXcvc3RhdGJsb2NrLnRzIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi01ZS1zdGF0YmxvY2tzL3NyYy91dGlsL3V0aWwudHMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLTVlLXN0YXRibG9ja3Mvc3JjL2xheW91dHMvYmFzaWM1ZS50cyIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4tNWUtc3RhdGJsb2Nrcy9ub2RlX21vZHVsZXMvc3ZlbHRlL2ludGVybmFsL2luZGV4Lm1qcyIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4tNWUtc3RhdGJsb2Nrcy9zcmMvdmlldy9TdGF0YmxvY2suc3ZlbHRlIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi01ZS1zdGF0YmxvY2tzL3NyYy9kYXRhL2NvbnN0YW50cy50cyIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4tNWUtc3RhdGJsb2Nrcy9ub2RlX21vZHVsZXMvc3ZlbHRlL3N0b3JlL2luZGV4Lm1qcyIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4tNWUtc3RhdGJsb2Nrcy9zcmMvdmlldy91aS9CYXIuc3ZlbHRlIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi01ZS1zdGF0YmxvY2tzL3NyYy92aWV3L3VpL1RleHRDb250ZW50LnN2ZWx0ZSIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4tNWUtc3RhdGJsb2Nrcy9zcmMvdmlldy91aS9EaWNlSG9sZGVyLnN2ZWx0ZSIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4tNWUtc3RhdGJsb2Nrcy9zcmMvdmlldy91aS9EaWNlUm9sbC5zdmVsdGUiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLTVlLXN0YXRibG9ja3Mvc3JjL3ZpZXcvdWkvTWFya2Rvd25Ib2xkZXIuc3ZlbHRlIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi01ZS1zdGF0YmxvY2tzL3NyYy92aWV3L3VpL1RleHRDb250ZW50SG9sZGVyLnN2ZWx0ZSIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4tNWUtc3RhdGJsb2Nrcy9zcmMvdmlldy91aS9UcmFpdHMuc3ZlbHRlIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi01ZS1zdGF0YmxvY2tzL3NyYy92aWV3L3VpL1NwZWxscy5zdmVsdGUiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLTVlLXN0YXRibG9ja3Mvc3JjL3ZpZXcvdWkvSGVhZGluZy5zdmVsdGUiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLTVlLXN0YXRibG9ja3Mvc3JjL3ZpZXcvdWkvUHJvcGVydHlMaW5lLnN2ZWx0ZSIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4tNWUtc3RhdGJsb2Nrcy9zcmMvdmlldy91aS9SdWxlLnN2ZWx0ZSIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4tNWUtc3RhdGJsb2Nrcy9zcmMvdmlldy91aS9TYXZlcy5zdmVsdGUiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLTVlLXN0YXRibG9ja3Mvc3JjL3ZpZXcvdWkvU2VjdGlvbkhlYWRpbmcuc3ZlbHRlIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi01ZS1zdGF0YmxvY2tzL3NyYy92aWV3L3VpL1N1YmhlYWRpbmcuc3ZlbHRlIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi01ZS1zdGF0YmxvY2tzL3NyYy92aWV3L3VpL1RhYmxlLnN2ZWx0ZSIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4tNWUtc3RhdGJsb2Nrcy9zcmMvdmlldy91aS9UZXh0LnN2ZWx0ZSIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4tNWUtc3RhdGJsb2Nrcy9zcmMvdmlldy91aS9JbWFnZS5zdmVsdGUiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLTVlLXN0YXRibG9ja3Mvc3JjL3ZpZXcvdWkvQ29udGVudC5zdmVsdGUiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLTVlLXN0YXRibG9ja3Mvc3JjL3NldHRpbmdzL3NldHRpbmdzLnRzIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi01ZS1zdGF0YmxvY2tzL3NyYy9zZXR0aW5ncy9TdGF0YmxvY2tDcmVhdG9yLnN2ZWx0ZSIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4tNWUtc3RhdGJsb2Nrcy9zcmMvc2V0dGluZ3MvYWRkLnRzIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi01ZS1zdGF0YmxvY2tzL3NyYy9sYXlvdXRzL3R5cGVzLnRzIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi01ZS1zdGF0YmxvY2tzL25vZGVfbW9kdWxlcy9zdmVsdGUvZWFzaW5nL2luZGV4Lm1qcyIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4tNWUtc3RhdGJsb2Nrcy9ub2RlX21vZHVsZXMvc3ZlbHRlL2FuaW1hdGUvaW5kZXgubWpzIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi01ZS1zdGF0YmxvY2tzL25vZGVfbW9kdWxlcy9zdmVsdGUtZG5kLWFjdGlvbi9kaXN0L2luZGV4Lm1qcyIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4tNWUtc3RhdGJsb2Nrcy9zcmMvc2V0dGluZ3MvdWkvUHJvcGVydHlCbG9jay5zdmVsdGUiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLTVlLXN0YXRibG9ja3Mvc3JjL3NldHRpbmdzL3VpL0Jsb2NrLnN2ZWx0ZSIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4tNWUtc3RhdGJsb2Nrcy9zcmMvc2V0dGluZ3MvdWkvYmxvY2sudHMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLTVlLXN0YXRibG9ja3Mvc3JjL3NldHRpbmdzL3VpL1RhYmxlSGVhZGVycy5zdmVsdGUiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLTVlLXN0YXRibG9ja3Mvc3JjL3NldHRpbmdzL3VpL0NyZWF0b3Iuc3ZlbHRlIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi01ZS1zdGF0YmxvY2tzL3NyYy9zZXR0aW5ncy9zdWdnZXN0ZXIudHMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLTVlLXN0YXRibG9ja3Mvc3JjL3NldHRpbmdzL21vZGFsLnRzIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi01ZS1zdGF0YmxvY2tzL3NyYy9zZXR0aW5ncy9FZGl0TW9uc3Rlci5zdmVsdGUiLCAiaW5saW5lLXdvcmtlcjpfX2lubGluZS13b3JrZXIiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLTVlLXN0YXRibG9ja3Mvc3JjL2ltcG9ydGVycy9pbXBvcnRlci53b3JrZXIudHMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLTVlLXN0YXRibG9ja3Mvc3JjL2ltcG9ydGVycy9pbXBvcnRlci50cyIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4tNWUtc3RhdGJsb2Nrcy9zcmMvdXRpbC9mb2xkZXIudHMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLTVlLXN0YXRibG9ja3Mvc3JjL3V0aWwvZ2VuZXJpY19zdWdnZXN0ZXIudHMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLTVlLXN0YXRibG9ja3Mvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9lbnVtcy5qcyIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4tNWUtc3RhdGJsb2Nrcy9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXROb2RlTmFtZS5qcyIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4tNWUtc3RhdGJsb2Nrcy9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRXaW5kb3cuanMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLTVlLXN0YXRibG9ja3Mvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvaW5zdGFuY2VPZi5qcyIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4tNWUtc3RhdGJsb2Nrcy9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL21vZGlmaWVycy9hcHBseVN0eWxlcy5qcyIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4tNWUtc3RhdGJsb2Nrcy9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2dldEJhc2VQbGFjZW1lbnQuanMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLTVlLXN0YXRibG9ja3Mvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9tYXRoLmpzIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi01ZS1zdGF0YmxvY2tzL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvdXNlckFnZW50LmpzIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi01ZS1zdGF0YmxvY2tzL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2lzTGF5b3V0Vmlld3BvcnQuanMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLTVlLXN0YXRibG9ja3Mvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0Qm91bmRpbmdDbGllbnRSZWN0LmpzIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi01ZS1zdGF0YmxvY2tzL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldExheW91dFJlY3QuanMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLTVlLXN0YXRibG9ja3Mvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvY29udGFpbnMuanMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLTVlLXN0YXRibG9ja3Mvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0Q29tcHV0ZWRTdHlsZS5qcyIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4tNWUtc3RhdGJsb2Nrcy9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9pc1RhYmxlRWxlbWVudC5qcyIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4tNWUtc3RhdGJsb2Nrcy9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXREb2N1bWVudEVsZW1lbnQuanMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLTVlLXN0YXRibG9ja3Mvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0UGFyZW50Tm9kZS5qcyIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4tNWUtc3RhdGJsb2Nrcy9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRPZmZzZXRQYXJlbnQuanMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLTVlLXN0YXRibG9ja3Mvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9nZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQuanMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLTVlLXN0YXRibG9ja3Mvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy93aXRoaW4uanMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLTVlLXN0YXRibG9ja3Mvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9nZXRGcmVzaFNpZGVPYmplY3QuanMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLTVlLXN0YXRibG9ja3Mvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9tZXJnZVBhZGRpbmdPYmplY3QuanMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLTVlLXN0YXRibG9ja3Mvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9leHBhbmRUb0hhc2hNYXAuanMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLTVlLXN0YXRibG9ja3Mvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9tb2RpZmllcnMvYXJyb3cuanMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLTVlLXN0YXRibG9ja3Mvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9nZXRWYXJpYXRpb24uanMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLTVlLXN0YXRibG9ja3Mvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9tb2RpZmllcnMvY29tcHV0ZVN0eWxlcy5qcyIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4tNWUtc3RhdGJsb2Nrcy9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL21vZGlmaWVycy9ldmVudExpc3RlbmVycy5qcyIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4tNWUtc3RhdGJsb2Nrcy9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2dldE9wcG9zaXRlUGxhY2VtZW50LmpzIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi01ZS1zdGF0YmxvY2tzL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvZ2V0T3Bwb3NpdGVWYXJpYXRpb25QbGFjZW1lbnQuanMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLTVlLXN0YXRibG9ja3Mvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0V2luZG93U2Nyb2xsLmpzIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi01ZS1zdGF0YmxvY2tzL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldFdpbmRvd1Njcm9sbEJhclguanMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLTVlLXN0YXRibG9ja3Mvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvZ2V0Vmlld3BvcnRSZWN0LmpzIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi01ZS1zdGF0YmxvY2tzL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldERvY3VtZW50UmVjdC5qcyIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4tNWUtc3RhdGJsb2Nrcy9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9pc1Njcm9sbFBhcmVudC5qcyIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4tNWUtc3RhdGJsb2Nrcy9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRTY3JvbGxQYXJlbnQuanMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLTVlLXN0YXRibG9ja3Mvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9kb20tdXRpbHMvbGlzdFNjcm9sbFBhcmVudHMuanMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLTVlLXN0YXRibG9ja3Mvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9yZWN0VG9DbGllbnRSZWN0LmpzIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi01ZS1zdGF0YmxvY2tzL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldENsaXBwaW5nUmVjdC5qcyIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4tNWUtc3RhdGJsb2Nrcy9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2NvbXB1dGVPZmZzZXRzLmpzIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi01ZS1zdGF0YmxvY2tzL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvZGV0ZWN0T3ZlcmZsb3cuanMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLTVlLXN0YXRibG9ja3Mvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9jb21wdXRlQXV0b1BsYWNlbWVudC5qcyIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4tNWUtc3RhdGJsb2Nrcy9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL21vZGlmaWVycy9mbGlwLmpzIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi01ZS1zdGF0YmxvY2tzL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvbW9kaWZpZXJzL2hpZGUuanMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLTVlLXN0YXRibG9ja3Mvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi9tb2RpZmllcnMvb2Zmc2V0LmpzIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi01ZS1zdGF0YmxvY2tzL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvbW9kaWZpZXJzL3BvcHBlck9mZnNldHMuanMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLTVlLXN0YXRibG9ja3Mvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9nZXRBbHRBeGlzLmpzIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi01ZS1zdGF0YmxvY2tzL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvbW9kaWZpZXJzL3ByZXZlbnRPdmVyZmxvdy5qcyIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4tNWUtc3RhdGJsb2Nrcy9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXRIVE1MRWxlbWVudFNjcm9sbC5qcyIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4tNWUtc3RhdGJsb2Nrcy9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL2RvbS11dGlscy9nZXROb2RlU2Nyb2xsLmpzIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi01ZS1zdGF0YmxvY2tzL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvZG9tLXV0aWxzL2dldENvbXBvc2l0ZVJlY3QuanMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLTVlLXN0YXRibG9ja3Mvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy9vcmRlck1vZGlmaWVycy5qcyIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4tNWUtc3RhdGJsb2Nrcy9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL2RlYm91bmNlLmpzIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi01ZS1zdGF0YmxvY2tzL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvZm9ybWF0LmpzIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi01ZS1zdGF0YmxvY2tzL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvdXRpbHMvdmFsaWRhdGVNb2RpZmllcnMuanMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLTVlLXN0YXRibG9ja3Mvbm9kZV9tb2R1bGVzL0Bwb3BwZXJqcy9jb3JlL2xpYi91dGlscy91bmlxdWVCeS5qcyIsICIuLi8uLi8uLi8uLi9HaXRIdWIvb2JzaWRpYW4tNWUtc3RhdGJsb2Nrcy9ub2RlX21vZHVsZXMvQHBvcHBlcmpzL2NvcmUvbGliL3V0aWxzL21lcmdlQnlOYW1lLmpzIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi01ZS1zdGF0YmxvY2tzL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvY3JlYXRlUG9wcGVyLmpzIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi01ZS1zdGF0YmxvY2tzL25vZGVfbW9kdWxlcy9AcG9wcGVyanMvY29yZS9saWIvcG9wcGVyLmpzIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi01ZS1zdGF0YmxvY2tzL3NyYy9sYXlvdXRzL2ZhdGVDb3JlLnRzIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi01ZS1zdGF0YmxvY2tzL3NyYy9sYXlvdXRzL2luZGV4LnRzIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi01ZS1zdGF0YmxvY2tzL25vZGVfbW9kdWxlcy9mYXN0LXNvcnQvZGlzdC9zb3J0LmVzLmpzIiwgIi4uLy4uLy4uLy4uL0dpdEh1Yi9vYnNpZGlhbi01ZS1zdGF0YmxvY2tzL3NyYy93YXRjaGVyL3dhdGNoZXIudHMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLTVlLXN0YXRibG9ja3Mvc3JjL3dhdGNoZXIvd2F0Y2hlci53b3JrZXIudHMiLCAiLi4vLi4vLi4vLi4vR2l0SHViL29ic2lkaWFuLTVlLXN0YXRibG9ja3Mvc3JjL3N1Z2dlc3QvaW5kZXgudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbIihmdW5jdGlvbiAoZ2xvYmFsKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgdmFyIHV0aWwgPSBuZXdVdGlsKCk7XG4gICAgdmFyIGlubGluZXIgPSBuZXdJbmxpbmVyKCk7XG4gICAgdmFyIGZvbnRGYWNlcyA9IG5ld0ZvbnRGYWNlcygpO1xuICAgIHZhciBpbWFnZXMgPSBuZXdJbWFnZXMoKTtcblxuICAgIC8vIERlZmF1bHQgaW1wbCBvcHRpb25zXG4gICAgdmFyIGRlZmF1bHRPcHRpb25zID0ge1xuICAgICAgICAvLyBEZWZhdWx0IGlzIHRvIGZhaWwgb24gZXJyb3IsIG5vIHBsYWNlaG9sZGVyXG4gICAgICAgIGltYWdlUGxhY2Vob2xkZXI6IHVuZGVmaW5lZCxcbiAgICAgICAgLy8gRGVmYXVsdCBjYWNoZSBidXN0IGlzIGZhbHNlLCBpdCB3aWxsIHVzZSB0aGUgY2FjaGVcbiAgICAgICAgY2FjaGVCdXN0OiBmYWxzZVxuICAgIH07XG5cbiAgICB2YXIgZG9tdG9pbWFnZSA9IHtcbiAgICAgICAgdG9Tdmc6IHRvU3ZnLFxuICAgICAgICB0b1BuZzogdG9QbmcsXG4gICAgICAgIHRvSnBlZzogdG9KcGVnLFxuICAgICAgICB0b0Jsb2I6IHRvQmxvYixcbiAgICAgICAgdG9QaXhlbERhdGE6IHRvUGl4ZWxEYXRhLFxuICAgICAgICBpbXBsOiB7XG4gICAgICAgICAgICBmb250RmFjZXM6IGZvbnRGYWNlcyxcbiAgICAgICAgICAgIGltYWdlczogaW1hZ2VzLFxuICAgICAgICAgICAgdXRpbDogdXRpbCxcbiAgICAgICAgICAgIGlubGluZXI6IGlubGluZXIsXG4gICAgICAgICAgICBvcHRpb25zOiB7fVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJylcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBkb210b2ltYWdlO1xuICAgIGVsc2VcbiAgICAgICAgZ2xvYmFsLmRvbXRvaW1hZ2UgPSBkb210b2ltYWdlO1xuXG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge05vZGV9IG5vZGUgLSBUaGUgRE9NIE5vZGUgb2JqZWN0IHRvIHJlbmRlclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gUmVuZGVyaW5nIG9wdGlvbnNcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBvcHRpb25zLmZpbHRlciAtIFNob3VsZCByZXR1cm4gdHJ1ZSBpZiBwYXNzZWQgbm9kZSBzaG91bGQgYmUgaW5jbHVkZWQgaW4gdGhlIG91dHB1dFxuICAgICAqICAgICAgICAgIChleGNsdWRpbmcgbm9kZSBtZWFucyBleGNsdWRpbmcgaXQncyBjaGlsZHJlbiBhcyB3ZWxsKS4gTm90IGNhbGxlZCBvbiB0aGUgcm9vdCBub2RlLlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBvcHRpb25zLmJnY29sb3IgLSBjb2xvciBmb3IgdGhlIGJhY2tncm91bmQsIGFueSB2YWxpZCBDU1MgY29sb3IgdmFsdWUuXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IG9wdGlvbnMud2lkdGggLSB3aWR0aCB0byBiZSBhcHBsaWVkIHRvIG5vZGUgYmVmb3JlIHJlbmRlcmluZy5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gb3B0aW9ucy5oZWlnaHQgLSBoZWlnaHQgdG8gYmUgYXBwbGllZCB0byBub2RlIGJlZm9yZSByZW5kZXJpbmcuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMuc3R5bGUgLSBhbiBvYmplY3Qgd2hvc2UgcHJvcGVydGllcyB0byBiZSBjb3BpZWQgdG8gbm9kZSdzIHN0eWxlIGJlZm9yZSByZW5kZXJpbmcuXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IG9wdGlvbnMucXVhbGl0eSAtIGEgTnVtYmVyIGJldHdlZW4gMCBhbmQgMSBpbmRpY2F0aW5nIGltYWdlIHF1YWxpdHkgKGFwcGxpY2FibGUgdG8gSlBFRyBvbmx5KSxcbiAgICAgICAgICAgICAgICBkZWZhdWx0cyB0byAxLjAuXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG9wdGlvbnMuaW1hZ2VQbGFjZWhvbGRlciAtIGRhdGFVUkwgdG8gdXNlIGFzIGEgcGxhY2Vob2xkZXIgZm9yIGZhaWxlZCBpbWFnZXMsIGRlZmF1bHQgYmVoYXZpb3VyIGlzIHRvIGZhaWwgZmFzdCBvbiBpbWFnZXMgd2UgY2FuJ3QgZmV0Y2hcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IG9wdGlvbnMuY2FjaGVCdXN0IC0gc2V0IHRvIHRydWUgdG8gY2FjaGUgYnVzdCBieSBhcHBlbmRpbmcgdGhlIHRpbWUgdG8gdGhlIHJlcXVlc3QgdXJsXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gLSBBIHByb21pc2UgdGhhdCBpcyBmdWxmaWxsZWQgd2l0aCBhIFNWRyBpbWFnZSBkYXRhIFVSTFxuICAgICAqICovXG4gICAgZnVuY3Rpb24gdG9Tdmcobm9kZSwgb3B0aW9ucykge1xuICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICAgICAgY29weU9wdGlvbnMob3B0aW9ucyk7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobm9kZSlcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNsb25lTm9kZShub2RlLCBvcHRpb25zLmZpbHRlciwgdHJ1ZSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLnRoZW4oZW1iZWRGb250cylcbiAgICAgICAgICAgIC50aGVuKGlubGluZUltYWdlcylcbiAgICAgICAgICAgIC50aGVuKGFwcGx5T3B0aW9ucylcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChjbG9uZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtYWtlU3ZnRGF0YVVyaShjbG9uZSxcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy53aWR0aCB8fCB1dGlsLndpZHRoKG5vZGUpLFxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zLmhlaWdodCB8fCB1dGlsLmhlaWdodChub2RlKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICBmdW5jdGlvbiBhcHBseU9wdGlvbnMoY2xvbmUpIHtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmJnY29sb3IpIGNsb25lLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IG9wdGlvbnMuYmdjb2xvcjtcblxuICAgICAgICAgICAgaWYgKG9wdGlvbnMud2lkdGgpIGNsb25lLnN0eWxlLndpZHRoID0gb3B0aW9ucy53aWR0aCArICdweCc7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5oZWlnaHQpIGNsb25lLnN0eWxlLmhlaWdodCA9IG9wdGlvbnMuaGVpZ2h0ICsgJ3B4JztcblxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuc3R5bGUpXG4gICAgICAgICAgICAgICAgT2JqZWN0LmtleXMob3B0aW9ucy5zdHlsZSkuZm9yRWFjaChmdW5jdGlvbiAocHJvcGVydHkpIHtcbiAgICAgICAgICAgICAgICAgICAgY2xvbmUuc3R5bGVbcHJvcGVydHldID0gb3B0aW9ucy5zdHlsZVtwcm9wZXJ0eV07XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJldHVybiBjbG9uZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7Tm9kZX0gbm9kZSAtIFRoZSBET00gTm9kZSBvYmplY3QgdG8gcmVuZGVyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBSZW5kZXJpbmcgb3B0aW9ucywgQHNlZSB7QGxpbmsgdG9Tdmd9XG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gLSBBIHByb21pc2UgdGhhdCBpcyBmdWxmaWxsZWQgd2l0aCBhIFVpbnQ4QXJyYXkgY29udGFpbmluZyBSR0JBIHBpeGVsIGRhdGEuXG4gICAgICogKi9cbiAgICBmdW5jdGlvbiB0b1BpeGVsRGF0YShub2RlLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBkcmF3KG5vZGUsIG9wdGlvbnMgfHwge30pXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoY2FudmFzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpLmdldEltYWdlRGF0YShcbiAgICAgICAgICAgICAgICAgICAgMCxcbiAgICAgICAgICAgICAgICAgICAgMCxcbiAgICAgICAgICAgICAgICAgICAgdXRpbC53aWR0aChub2RlKSxcbiAgICAgICAgICAgICAgICAgICAgdXRpbC5oZWlnaHQobm9kZSlcbiAgICAgICAgICAgICAgICApLmRhdGE7XG4gICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge05vZGV9IG5vZGUgLSBUaGUgRE9NIE5vZGUgb2JqZWN0IHRvIHJlbmRlclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gUmVuZGVyaW5nIG9wdGlvbnMsIEBzZWUge0BsaW5rIHRvU3ZnfVxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IC0gQSBwcm9taXNlIHRoYXQgaXMgZnVsZmlsbGVkIHdpdGggYSBQTkcgaW1hZ2UgZGF0YSBVUkxcbiAgICAgKiAqL1xuICAgIGZ1bmN0aW9uIHRvUG5nKG5vZGUsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIGRyYXcobm9kZSwgb3B0aW9ucyB8fCB7fSlcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChjYW52YXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2FudmFzLnRvRGF0YVVSTCgpO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtOb2RlfSBub2RlIC0gVGhlIERPTSBOb2RlIG9iamVjdCB0byByZW5kZXJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIFJlbmRlcmluZyBvcHRpb25zLCBAc2VlIHtAbGluayB0b1N2Z31cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIEEgcHJvbWlzZSB0aGF0IGlzIGZ1bGZpbGxlZCB3aXRoIGEgSlBFRyBpbWFnZSBkYXRhIFVSTFxuICAgICAqICovXG4gICAgZnVuY3Rpb24gdG9KcGVnKG5vZGUsIG9wdGlvbnMpIHtcbiAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgICAgIHJldHVybiBkcmF3KG5vZGUsIG9wdGlvbnMpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoY2FudmFzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhbnZhcy50b0RhdGFVUkwoJ2ltYWdlL2pwZWcnLCBvcHRpb25zLnF1YWxpdHkgfHwgMS4wKTtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7Tm9kZX0gbm9kZSAtIFRoZSBET00gTm9kZSBvYmplY3QgdG8gcmVuZGVyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBSZW5kZXJpbmcgb3B0aW9ucywgQHNlZSB7QGxpbmsgdG9Tdmd9XG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gLSBBIHByb21pc2UgdGhhdCBpcyBmdWxmaWxsZWQgd2l0aCBhIFBORyBpbWFnZSBibG9iXG4gICAgICogKi9cbiAgICBmdW5jdGlvbiB0b0Jsb2Iobm9kZSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gZHJhdyhub2RlLCBvcHRpb25zIHx8IHt9KVxuICAgICAgICAgICAgLnRoZW4odXRpbC5jYW52YXNUb0Jsb2IpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvcHlPcHRpb25zKG9wdGlvbnMpIHtcbiAgICAgICAgLy8gQ29weSBvcHRpb25zIHRvIGltcGwgb3B0aW9ucyBmb3IgdXNlIGluIGltcGxcbiAgICAgICAgaWYodHlwZW9mKG9wdGlvbnMuaW1hZ2VQbGFjZWhvbGRlcikgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBkb210b2ltYWdlLmltcGwub3B0aW9ucy5pbWFnZVBsYWNlaG9sZGVyID0gZGVmYXVsdE9wdGlvbnMuaW1hZ2VQbGFjZWhvbGRlcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRvbXRvaW1hZ2UuaW1wbC5vcHRpb25zLmltYWdlUGxhY2Vob2xkZXIgPSBvcHRpb25zLmltYWdlUGxhY2Vob2xkZXI7XG4gICAgICAgIH1cblxuICAgICAgICBpZih0eXBlb2Yob3B0aW9ucy5jYWNoZUJ1c3QpID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgZG9tdG9pbWFnZS5pbXBsLm9wdGlvbnMuY2FjaGVCdXN0ID0gZGVmYXVsdE9wdGlvbnMuY2FjaGVCdXN0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZG9tdG9pbWFnZS5pbXBsLm9wdGlvbnMuY2FjaGVCdXN0ID0gb3B0aW9ucy5jYWNoZUJ1c3Q7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkcmF3KGRvbU5vZGUsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRvU3ZnKGRvbU5vZGUsIG9wdGlvbnMpXG4gICAgICAgICAgICAudGhlbih1dGlsLm1ha2VJbWFnZSlcbiAgICAgICAgICAgIC50aGVuKHV0aWwuZGVsYXkoMTAwKSlcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChpbWFnZSkge1xuICAgICAgICAgICAgICAgIHZhciBjYW52YXMgPSBuZXdDYW52YXMoZG9tTm9kZSk7XG4gICAgICAgICAgICAgICAgY2FudmFzLmdldENvbnRleHQoJzJkJykuZHJhd0ltYWdlKGltYWdlLCAwLCAwKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2FudmFzO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgZnVuY3Rpb24gbmV3Q2FudmFzKGRvbU5vZGUpIHtcbiAgICAgICAgICAgIHZhciBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgICAgICAgICAgIGNhbnZhcy53aWR0aCA9IG9wdGlvbnMud2lkdGggfHwgdXRpbC53aWR0aChkb21Ob2RlKTtcbiAgICAgICAgICAgIGNhbnZhcy5oZWlnaHQgPSBvcHRpb25zLmhlaWdodCB8fCB1dGlsLmhlaWdodChkb21Ob2RlKTtcblxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuYmdjb2xvcikge1xuICAgICAgICAgICAgICAgIHZhciBjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICAgICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gb3B0aW9ucy5iZ2NvbG9yO1xuICAgICAgICAgICAgICAgIGN0eC5maWxsUmVjdCgwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gY2FudmFzO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xvbmVOb2RlKG5vZGUsIGZpbHRlciwgcm9vdCkge1xuICAgICAgICBpZiAoIXJvb3QgJiYgZmlsdGVyICYmICFmaWx0ZXIobm9kZSkpIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcblxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG5vZGUpXG4gICAgICAgICAgICAudGhlbihtYWtlTm9kZUNvcHkpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoY2xvbmUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2xvbmVDaGlsZHJlbihub2RlLCBjbG9uZSwgZmlsdGVyKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoY2xvbmUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJvY2Vzc0Nsb25lKG5vZGUsIGNsb25lKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIGZ1bmN0aW9uIG1ha2VOb2RlQ29weShub2RlKSB7XG4gICAgICAgICAgICBpZiAobm9kZSBpbnN0YW5jZW9mIEhUTUxDYW52YXNFbGVtZW50KSByZXR1cm4gdXRpbC5tYWtlSW1hZ2Uobm9kZS50b0RhdGFVUkwoKSk7XG4gICAgICAgICAgICByZXR1cm4gbm9kZS5jbG9uZU5vZGUoZmFsc2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gY2xvbmVDaGlsZHJlbihvcmlnaW5hbCwgY2xvbmUsIGZpbHRlcikge1xuICAgICAgICAgICAgdmFyIGNoaWxkcmVuID0gb3JpZ2luYWwuY2hpbGROb2RlcztcbiAgICAgICAgICAgIGlmIChjaGlsZHJlbi5sZW5ndGggPT09IDApIHJldHVybiBQcm9taXNlLnJlc29sdmUoY2xvbmUpO1xuXG4gICAgICAgICAgICByZXR1cm4gY2xvbmVDaGlsZHJlbkluT3JkZXIoY2xvbmUsIHV0aWwuYXNBcnJheShjaGlsZHJlbiksIGZpbHRlcilcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjbG9uZTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgZnVuY3Rpb24gY2xvbmVDaGlsZHJlbkluT3JkZXIocGFyZW50LCBjaGlsZHJlbiwgZmlsdGVyKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRvbmUgPSBQcm9taXNlLnJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICBjaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICAgICAgICAgICAgICBkb25lID0gZG9uZVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjbG9uZU5vZGUoY2hpbGQsIGZpbHRlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGNoaWxkQ2xvbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hpbGRDbG9uZSkgcGFyZW50LmFwcGVuZENoaWxkKGNoaWxkQ2xvbmUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRvbmU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBwcm9jZXNzQ2xvbmUob3JpZ2luYWwsIGNsb25lKSB7XG4gICAgICAgICAgICBpZiAoIShjbG9uZSBpbnN0YW5jZW9mIEVsZW1lbnQpKSByZXR1cm4gY2xvbmU7XG5cbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKVxuICAgICAgICAgICAgICAgIC50aGVuKGNsb25lU3R5bGUpXG4gICAgICAgICAgICAgICAgLnRoZW4oY2xvbmVQc2V1ZG9FbGVtZW50cylcbiAgICAgICAgICAgICAgICAudGhlbihjb3B5VXNlcklucHV0KVxuICAgICAgICAgICAgICAgIC50aGVuKGZpeFN2ZylcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjbG9uZTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgZnVuY3Rpb24gY2xvbmVTdHlsZSgpIHtcbiAgICAgICAgICAgICAgICBjb3B5U3R5bGUod2luZG93LmdldENvbXB1dGVkU3R5bGUob3JpZ2luYWwpLCBjbG9uZS5zdHlsZSk7XG5cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBjb3B5U3R5bGUoc291cmNlLCB0YXJnZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNvdXJjZS5jc3NUZXh0KSB0YXJnZXQuY3NzVGV4dCA9IHNvdXJjZS5jc3NUZXh0O1xuICAgICAgICAgICAgICAgICAgICBlbHNlIGNvcHlQcm9wZXJ0aWVzKHNvdXJjZSwgdGFyZ2V0KTtcblxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBjb3B5UHJvcGVydGllcyhzb3VyY2UsIHRhcmdldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdXRpbC5hc0FycmF5KHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldC5zZXRQcm9wZXJ0eShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlLmdldFByb3BlcnR5VmFsdWUobmFtZSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZS5nZXRQcm9wZXJ0eVByaW9yaXR5KG5hbWUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBjbG9uZVBzZXVkb0VsZW1lbnRzKCkge1xuICAgICAgICAgICAgICAgIFsnOmJlZm9yZScsICc6YWZ0ZXInXS5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGNsb25lUHNldWRvRWxlbWVudChlbGVtZW50KTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGNsb25lUHNldWRvRWxlbWVudChlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKG9yaWdpbmFsLCBlbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbnRlbnQgPSBzdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCdjb250ZW50Jyk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRlbnQgPT09ICcnIHx8IGNvbnRlbnQgPT09ICdub25lJykgcmV0dXJuO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBjbGFzc05hbWUgPSB1dGlsLnVpZCgpO1xuICAgICAgICAgICAgICAgICAgICBjbG9uZS5jbGFzc05hbWUgPSBjbG9uZS5jbGFzc05hbWUgKyAnICcgKyBjbGFzc05hbWU7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzdHlsZUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICAgICAgICAgICAgICAgICAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZm9ybWF0UHNldWRvRWxlbWVudFN0eWxlKGNsYXNzTmFtZSwgZWxlbWVudCwgc3R5bGUpKTtcbiAgICAgICAgICAgICAgICAgICAgY2xvbmUuYXBwZW5kQ2hpbGQoc3R5bGVFbGVtZW50KTtcblxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBmb3JtYXRQc2V1ZG9FbGVtZW50U3R5bGUoY2xhc3NOYW1lLCBlbGVtZW50LCBzdHlsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNlbGVjdG9yID0gJy4nICsgY2xhc3NOYW1lICsgJzonICsgZWxlbWVudDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjc3NUZXh0ID0gc3R5bGUuY3NzVGV4dCA/IGZvcm1hdENzc1RleHQoc3R5bGUpIDogZm9ybWF0Q3NzUHJvcGVydGllcyhzdHlsZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoc2VsZWN0b3IgKyAneycgKyBjc3NUZXh0ICsgJ30nKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gZm9ybWF0Q3NzVGV4dChzdHlsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb250ZW50ID0gc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgnY29udGVudCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzdHlsZS5jc3NUZXh0ICsgJyBjb250ZW50OiAnICsgY29udGVudCArICc7JztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gZm9ybWF0Q3NzUHJvcGVydGllcyhzdHlsZSkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHV0aWwuYXNBcnJheShzdHlsZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLm1hcChmb3JtYXRQcm9wZXJ0eSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmpvaW4oJzsgJykgKyAnOyc7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBmb3JtYXRQcm9wZXJ0eShuYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuYW1lICsgJzogJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKG5hbWUpICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChzdHlsZS5nZXRQcm9wZXJ0eVByaW9yaXR5KG5hbWUpID8gJyAhaW1wb3J0YW50JyA6ICcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIGNvcHlVc2VySW5wdXQoKSB7XG4gICAgICAgICAgICAgICAgaWYgKG9yaWdpbmFsIGluc3RhbmNlb2YgSFRNTFRleHRBcmVhRWxlbWVudCkgY2xvbmUuaW5uZXJIVE1MID0gb3JpZ2luYWwudmFsdWU7XG4gICAgICAgICAgICAgICAgaWYgKG9yaWdpbmFsIGluc3RhbmNlb2YgSFRNTElucHV0RWxlbWVudCkgY2xvbmUuc2V0QXR0cmlidXRlKFwidmFsdWVcIiwgb3JpZ2luYWwudmFsdWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmdW5jdGlvbiBmaXhTdmcoKSB7XG4gICAgICAgICAgICAgICAgaWYgKCEoY2xvbmUgaW5zdGFuY2VvZiBTVkdFbGVtZW50KSkgcmV0dXJuO1xuICAgICAgICAgICAgICAgIGNsb25lLnNldEF0dHJpYnV0ZSgneG1sbnMnLCAnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnKTtcblxuICAgICAgICAgICAgICAgIGlmICghKGNsb25lIGluc3RhbmNlb2YgU1ZHUmVjdEVsZW1lbnQpKSByZXR1cm47XG4gICAgICAgICAgICAgICAgWyd3aWR0aCcsICdoZWlnaHQnXS5mb3JFYWNoKGZ1bmN0aW9uIChhdHRyaWJ1dGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gY2xvbmUuZ2V0QXR0cmlidXRlKGF0dHJpYnV0ZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghdmFsdWUpIHJldHVybjtcblxuICAgICAgICAgICAgICAgICAgICBjbG9uZS5zdHlsZS5zZXRQcm9wZXJ0eShhdHRyaWJ1dGUsIHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGVtYmVkRm9udHMobm9kZSkge1xuICAgICAgICByZXR1cm4gZm9udEZhY2VzLnJlc29sdmVBbGwoKVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGNzc1RleHQpIHtcbiAgICAgICAgICAgICAgICB2YXIgc3R5bGVOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbiAgICAgICAgICAgICAgICBub2RlLmFwcGVuZENoaWxkKHN0eWxlTm9kZSk7XG4gICAgICAgICAgICAgICAgc3R5bGVOb2RlLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzc1RleHQpKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlubGluZUltYWdlcyhub2RlKSB7XG4gICAgICAgIHJldHVybiBpbWFnZXMuaW5saW5lQWxsKG5vZGUpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYWtlU3ZnRGF0YVVyaShub2RlLCB3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobm9kZSlcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgICAgICAgICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoJ3htbG5zJywgJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWwnKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFhNTFNlcmlhbGl6ZXIoKS5zZXJpYWxpemVUb1N0cmluZyhub2RlKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAudGhlbih1dGlsLmVzY2FwZVhodG1sKVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHhodG1sKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICc8Zm9yZWlnbk9iamVjdCB4PVwiMFwiIHk9XCIwXCIgd2lkdGg9XCIxMDAlXCIgaGVpZ2h0PVwiMTAwJVwiPicgKyB4aHRtbCArICc8L2ZvcmVpZ25PYmplY3Q+JztcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoZm9yZWlnbk9iamVjdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgd2lkdGg9XCInICsgd2lkdGggKyAnXCIgaGVpZ2h0PVwiJyArIGhlaWdodCArICdcIj4nICtcbiAgICAgICAgICAgICAgICAgICAgZm9yZWlnbk9iamVjdCArICc8L3N2Zz4nO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChzdmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2RhdGE6aW1hZ2Uvc3ZnK3htbDtjaGFyc2V0PXV0Zi04LCcgKyBzdmc7XG4gICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBuZXdVdGlsKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZXNjYXBlOiBlc2NhcGUsXG4gICAgICAgICAgICBwYXJzZUV4dGVuc2lvbjogcGFyc2VFeHRlbnNpb24sXG4gICAgICAgICAgICBtaW1lVHlwZTogbWltZVR5cGUsXG4gICAgICAgICAgICBkYXRhQXNVcmw6IGRhdGFBc1VybCxcbiAgICAgICAgICAgIGlzRGF0YVVybDogaXNEYXRhVXJsLFxuICAgICAgICAgICAgY2FudmFzVG9CbG9iOiBjYW52YXNUb0Jsb2IsXG4gICAgICAgICAgICByZXNvbHZlVXJsOiByZXNvbHZlVXJsLFxuICAgICAgICAgICAgZ2V0QW5kRW5jb2RlOiBnZXRBbmRFbmNvZGUsXG4gICAgICAgICAgICB1aWQ6IHVpZCgpLFxuICAgICAgICAgICAgZGVsYXk6IGRlbGF5LFxuICAgICAgICAgICAgYXNBcnJheTogYXNBcnJheSxcbiAgICAgICAgICAgIGVzY2FwZVhodG1sOiBlc2NhcGVYaHRtbCxcbiAgICAgICAgICAgIG1ha2VJbWFnZTogbWFrZUltYWdlLFxuICAgICAgICAgICAgd2lkdGg6IHdpZHRoLFxuICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHRcbiAgICAgICAgfTtcblxuICAgICAgICBmdW5jdGlvbiBtaW1lcygpIHtcbiAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgKiBPbmx5IFdPRkYgYW5kIEVPVCBtaW1lIHR5cGVzIGZvciBmb250cyBhcmUgJ3JlYWwnXG4gICAgICAgICAgICAgKiBzZWUgaHR0cDovL3d3dy5pYW5hLm9yZy9hc3NpZ25tZW50cy9tZWRpYS10eXBlcy9tZWRpYS10eXBlcy54aHRtbFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB2YXIgV09GRiA9ICdhcHBsaWNhdGlvbi9mb250LXdvZmYnO1xuICAgICAgICAgICAgdmFyIEpQRUcgPSAnaW1hZ2UvanBlZyc7XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgJ3dvZmYnOiBXT0ZGLFxuICAgICAgICAgICAgICAgICd3b2ZmMic6IFdPRkYsXG4gICAgICAgICAgICAgICAgJ3R0Zic6ICdhcHBsaWNhdGlvbi9mb250LXRydWV0eXBlJyxcbiAgICAgICAgICAgICAgICAnZW90JzogJ2FwcGxpY2F0aW9uL3ZuZC5tcy1mb250b2JqZWN0JyxcbiAgICAgICAgICAgICAgICAncG5nJzogJ2ltYWdlL3BuZycsXG4gICAgICAgICAgICAgICAgJ2pwZyc6IEpQRUcsXG4gICAgICAgICAgICAgICAgJ2pwZWcnOiBKUEVHLFxuICAgICAgICAgICAgICAgICdnaWYnOiAnaW1hZ2UvZ2lmJyxcbiAgICAgICAgICAgICAgICAndGlmZic6ICdpbWFnZS90aWZmJyxcbiAgICAgICAgICAgICAgICAnc3ZnJzogJ2ltYWdlL3N2Zyt4bWwnXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gcGFyc2VFeHRlbnNpb24odXJsKSB7XG4gICAgICAgICAgICB2YXIgbWF0Y2ggPSAvXFwuKFteXFwuXFwvXSo/KSQvZy5leGVjKHVybCk7XG4gICAgICAgICAgICBpZiAobWF0Y2gpIHJldHVybiBtYXRjaFsxXTtcbiAgICAgICAgICAgIGVsc2UgcmV0dXJuICcnO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gbWltZVR5cGUodXJsKSB7XG4gICAgICAgICAgICB2YXIgZXh0ZW5zaW9uID0gcGFyc2VFeHRlbnNpb24odXJsKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgcmV0dXJuIG1pbWVzKClbZXh0ZW5zaW9uXSB8fCAnJztcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGlzRGF0YVVybCh1cmwpIHtcbiAgICAgICAgICAgIHJldHVybiB1cmwuc2VhcmNoKC9eKGRhdGE6KS8pICE9PSAtMTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHRvQmxvYihjYW52YXMpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICAgICAgICAgIHZhciBiaW5hcnlTdHJpbmcgPSB3aW5kb3cuYXRvYihjYW52YXMudG9EYXRhVVJMKCkuc3BsaXQoJywnKVsxXSk7XG4gICAgICAgICAgICAgICAgdmFyIGxlbmd0aCA9IGJpbmFyeVN0cmluZy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgdmFyIGJpbmFyeUFycmF5ID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoKTtcblxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspXG4gICAgICAgICAgICAgICAgICAgIGJpbmFyeUFycmF5W2ldID0gYmluYXJ5U3RyaW5nLmNoYXJDb2RlQXQoaSk7XG5cbiAgICAgICAgICAgICAgICByZXNvbHZlKG5ldyBCbG9iKFtiaW5hcnlBcnJheV0sIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2ltYWdlL3BuZydcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGNhbnZhc1RvQmxvYihjYW52YXMpIHtcbiAgICAgICAgICAgIGlmIChjYW52YXMudG9CbG9iKVxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICAgICAgICAgICAgICBjYW52YXMudG9CbG9iKHJlc29sdmUpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXR1cm4gdG9CbG9iKGNhbnZhcyk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiByZXNvbHZlVXJsKHVybCwgYmFzZVVybCkge1xuICAgICAgICAgICAgdmFyIGRvYyA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCgpO1xuICAgICAgICAgICAgdmFyIGJhc2UgPSBkb2MuY3JlYXRlRWxlbWVudCgnYmFzZScpO1xuICAgICAgICAgICAgZG9jLmhlYWQuYXBwZW5kQ2hpbGQoYmFzZSk7XG4gICAgICAgICAgICB2YXIgYSA9IGRvYy5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgICAgICAgICBkb2MuYm9keS5hcHBlbmRDaGlsZChhKTtcbiAgICAgICAgICAgIGJhc2UuaHJlZiA9IGJhc2VVcmw7XG4gICAgICAgICAgICBhLmhyZWYgPSB1cmw7XG4gICAgICAgICAgICByZXR1cm4gYS5ocmVmO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gdWlkKCkge1xuICAgICAgICAgICAgdmFyIGluZGV4ID0gMDtcblxuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gJ3UnICsgZm91clJhbmRvbUNoYXJzKCkgKyBpbmRleCsrO1xuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gZm91clJhbmRvbUNoYXJzKCkge1xuICAgICAgICAgICAgICAgICAgICAvKiBzZWUgaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNjI0ODcyMi8yNTE5MzczICovXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoJzAwMDAnICsgKE1hdGgucmFuZG9tKCkgKiBNYXRoLnBvdygzNiwgNCkgPDwgMCkudG9TdHJpbmcoMzYpKS5zbGljZSgtNCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIG1ha2VJbWFnZSh1cmkpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgdmFyIGltYWdlID0gbmV3IEltYWdlKCk7XG4gICAgICAgICAgICAgICAgaW1hZ2Uub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGltYWdlKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGltYWdlLm9uZXJyb3IgPSByZWplY3Q7XG4gICAgICAgICAgICAgICAgaW1hZ2Uuc3JjID0gdXJpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBnZXRBbmRFbmNvZGUodXJsKSB7XG4gICAgICAgICAgICB2YXIgVElNRU9VVCA9IDMwMDAwO1xuICAgICAgICAgICAgaWYoZG9tdG9pbWFnZS5pbXBsLm9wdGlvbnMuY2FjaGVCdXN0KSB7XG4gICAgICAgICAgICAgICAgLy8gQ2FjaGUgYnlwYXNzIHNvIHdlIGRvbnQgaGF2ZSBDT1JTIGlzc3VlcyB3aXRoIGNhY2hlZCBpbWFnZXNcbiAgICAgICAgICAgICAgICAvLyBTb3VyY2U6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL2RvY3MvV2ViL0FQSS9YTUxIdHRwUmVxdWVzdC9Vc2luZ19YTUxIdHRwUmVxdWVzdCNCeXBhc3NpbmdfdGhlX2NhY2hlXG4gICAgICAgICAgICAgICAgdXJsICs9ICgoL1xcPy8pLnRlc3QodXJsKSA/IFwiJlwiIDogXCI/XCIpICsgKG5ldyBEYXRlKCkpLmdldFRpbWUoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblxuICAgICAgICAgICAgICAgIHJlcXVlc3Qub25yZWFkeXN0YXRlY2hhbmdlID0gZG9uZTtcbiAgICAgICAgICAgICAgICByZXF1ZXN0Lm9udGltZW91dCA9IHRpbWVvdXQ7XG4gICAgICAgICAgICAgICAgcmVxdWVzdC5yZXNwb25zZVR5cGUgPSAnYmxvYic7XG4gICAgICAgICAgICAgICAgcmVxdWVzdC50aW1lb3V0ID0gVElNRU9VVDtcbiAgICAgICAgICAgICAgICByZXF1ZXN0Lm9wZW4oJ0dFVCcsIHVybCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgcmVxdWVzdC5zZW5kKCk7XG5cbiAgICAgICAgICAgICAgICB2YXIgcGxhY2Vob2xkZXI7XG4gICAgICAgICAgICAgICAgaWYoZG9tdG9pbWFnZS5pbXBsLm9wdGlvbnMuaW1hZ2VQbGFjZWhvbGRlcikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgc3BsaXQgPSBkb210b2ltYWdlLmltcGwub3B0aW9ucy5pbWFnZVBsYWNlaG9sZGVyLnNwbGl0KC8sLyk7XG4gICAgICAgICAgICAgICAgICAgIGlmKHNwbGl0ICYmIHNwbGl0WzFdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlciA9IHNwbGl0WzFdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gZG9uZSgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlcXVlc3QucmVhZHlTdGF0ZSAhPT0gNCkgcmV0dXJuO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXF1ZXN0LnN0YXR1cyAhPT0gMjAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZihwbGFjZWhvbGRlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUocGxhY2Vob2xkZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmYWlsKCdjYW5ub3QgZmV0Y2ggcmVzb3VyY2U6ICcgKyB1cmwgKyAnLCBzdGF0dXM6ICcgKyByZXF1ZXN0LnN0YXR1cyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHZhciBlbmNvZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgZW5jb2Rlci5vbmxvYWRlbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29udGVudCA9IGVuY29kZXIucmVzdWx0LnNwbGl0KC8sLylbMV07XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGNvbnRlbnQpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBlbmNvZGVyLnJlYWRBc0RhdGFVUkwocmVxdWVzdC5yZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gdGltZW91dCgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYocGxhY2Vob2xkZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUocGxhY2Vob2xkZXIpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZmFpbCgndGltZW91dCBvZiAnICsgVElNRU9VVCArICdtcyBvY2N1cmVkIHdoaWxlIGZldGNoaW5nIHJlc291cmNlOiAnICsgdXJsKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGZhaWwobWVzc2FnZSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCcnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGRhdGFBc1VybChjb250ZW50LCB0eXBlKSB7XG4gICAgICAgICAgICByZXR1cm4gJ2RhdGE6JyArIHR5cGUgKyAnO2Jhc2U2NCwnICsgY29udGVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGVzY2FwZShzdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSgvKFsuKis/XiR7fSgpfFxcW1xcXVxcL1xcXFxdKS9nLCAnXFxcXCQxJyk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBkZWxheShtcykge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGFyZyk7XG4gICAgICAgICAgICAgICAgICAgIH0sIG1zKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBhc0FycmF5KGFycmF5TGlrZSkge1xuICAgICAgICAgICAgdmFyIGFycmF5ID0gW107XG4gICAgICAgICAgICB2YXIgbGVuZ3RoID0gYXJyYXlMaWtlLmxlbmd0aDtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIGFycmF5LnB1c2goYXJyYXlMaWtlW2ldKTtcbiAgICAgICAgICAgIHJldHVybiBhcnJheTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGVzY2FwZVhodG1sKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKC8jL2csICclMjMnKS5yZXBsYWNlKC9cXG4vZywgJyUwQScpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gd2lkdGgobm9kZSkge1xuICAgICAgICAgICAgdmFyIGxlZnRCb3JkZXIgPSBweChub2RlLCAnYm9yZGVyLWxlZnQtd2lkdGgnKTtcbiAgICAgICAgICAgIHZhciByaWdodEJvcmRlciA9IHB4KG5vZGUsICdib3JkZXItcmlnaHQtd2lkdGgnKTtcbiAgICAgICAgICAgIHJldHVybiBub2RlLnNjcm9sbFdpZHRoICsgbGVmdEJvcmRlciArIHJpZ2h0Qm9yZGVyO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gaGVpZ2h0KG5vZGUpIHtcbiAgICAgICAgICAgIHZhciB0b3BCb3JkZXIgPSBweChub2RlLCAnYm9yZGVyLXRvcC13aWR0aCcpO1xuICAgICAgICAgICAgdmFyIGJvdHRvbUJvcmRlciA9IHB4KG5vZGUsICdib3JkZXItYm90dG9tLXdpZHRoJyk7XG4gICAgICAgICAgICByZXR1cm4gbm9kZS5zY3JvbGxIZWlnaHQgKyB0b3BCb3JkZXIgKyBib3R0b21Cb3JkZXI7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBweChub2RlLCBzdHlsZVByb3BlcnR5KSB7XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShub2RlKS5nZXRQcm9wZXJ0eVZhbHVlKHN0eWxlUHJvcGVydHkpO1xuICAgICAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQodmFsdWUucmVwbGFjZSgncHgnLCAnJykpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbmV3SW5saW5lcigpIHtcbiAgICAgICAgdmFyIFVSTF9SRUdFWCA9IC91cmxcXChbJ1wiXT8oW14nXCJdKz8pWydcIl0/XFwpL2c7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGlubGluZUFsbDogaW5saW5lQWxsLFxuICAgICAgICAgICAgc2hvdWxkUHJvY2Vzczogc2hvdWxkUHJvY2VzcyxcbiAgICAgICAgICAgIGltcGw6IHtcbiAgICAgICAgICAgICAgICByZWFkVXJsczogcmVhZFVybHMsXG4gICAgICAgICAgICAgICAgaW5saW5lOiBpbmxpbmVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBmdW5jdGlvbiBzaG91bGRQcm9jZXNzKHN0cmluZykge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZy5zZWFyY2goVVJMX1JFR0VYKSAhPT0gLTE7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiByZWFkVXJscyhzdHJpbmcpIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgICAgICAgIHZhciBtYXRjaDtcbiAgICAgICAgICAgIHdoaWxlICgobWF0Y2ggPSBVUkxfUkVHRVguZXhlYyhzdHJpbmcpKSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKG1hdGNoWzFdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXN1bHQuZmlsdGVyKGZ1bmN0aW9uICh1cmwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gIXV0aWwuaXNEYXRhVXJsKHVybCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGlubGluZShzdHJpbmcsIHVybCwgYmFzZVVybCwgZ2V0KSB7XG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHVybClcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAodXJsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBiYXNlVXJsID8gdXRpbC5yZXNvbHZlVXJsKHVybCwgYmFzZVVybCkgOiB1cmw7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAudGhlbihnZXQgfHwgdXRpbC5nZXRBbmRFbmNvZGUpXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHV0aWwuZGF0YUFzVXJsKGRhdGEsIHV0aWwubWltZVR5cGUodXJsKSk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoZGF0YVVybCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UodXJsQXNSZWdleCh1cmwpLCAnJDEnICsgZGF0YVVybCArICckMycpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBmdW5jdGlvbiB1cmxBc1JlZ2V4KHVybCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmVnRXhwKCcodXJsXFxcXChbXFwnXCJdPykoJyArIHV0aWwuZXNjYXBlKHVybCkgKyAnKShbXFwnXCJdP1xcXFwpKScsICdnJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBpbmxpbmVBbGwoc3RyaW5nLCBiYXNlVXJsLCBnZXQpIHtcbiAgICAgICAgICAgIGlmIChub3RoaW5nVG9JbmxpbmUoKSkgcmV0dXJuIFByb21pc2UucmVzb2x2ZShzdHJpbmcpO1xuXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHN0cmluZylcbiAgICAgICAgICAgICAgICAudGhlbihyZWFkVXJscylcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAodXJscykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZG9uZSA9IFByb21pc2UucmVzb2x2ZShzdHJpbmcpO1xuICAgICAgICAgICAgICAgICAgICB1cmxzLmZvckVhY2goZnVuY3Rpb24gKHVybCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZG9uZSA9IGRvbmUudGhlbihmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlubGluZShzdHJpbmcsIHVybCwgYmFzZVVybCwgZ2V0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRvbmU7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIG5vdGhpbmdUb0lubGluZSgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gIXNob3VsZFByb2Nlc3Moc3RyaW5nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIG5ld0ZvbnRGYWNlcygpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHJlc29sdmVBbGw6IHJlc29sdmVBbGwsXG4gICAgICAgICAgICBpbXBsOiB7XG4gICAgICAgICAgICAgICAgcmVhZEFsbDogcmVhZEFsbFxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGZ1bmN0aW9uIHJlc29sdmVBbGwoKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVhZEFsbChkb2N1bWVudClcbiAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAod2ViRm9udHMpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKFxuICAgICAgICAgICAgICAgICAgICAgICAgd2ViRm9udHMubWFwKGZ1bmN0aW9uICh3ZWJGb250KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHdlYkZvbnQucmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChjc3NTdHJpbmdzKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjc3NTdHJpbmdzLmpvaW4oJ1xcbicpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gcmVhZEFsbCgpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodXRpbC5hc0FycmF5KGRvY3VtZW50LnN0eWxlU2hlZXRzKSlcbiAgICAgICAgICAgICAgICAudGhlbihnZXRDc3NSdWxlcylcbiAgICAgICAgICAgICAgICAudGhlbihzZWxlY3RXZWJGb250UnVsZXMpXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJ1bGVzKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBydWxlcy5tYXAobmV3V2ViRm9udCk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHNlbGVjdFdlYkZvbnRSdWxlcyhjc3NSdWxlcykge1xuICAgICAgICAgICAgICAgIHJldHVybiBjc3NSdWxlc1xuICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChydWxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcnVsZS50eXBlID09PSBDU1NSdWxlLkZPTlRfRkFDRV9SVUxFO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChydWxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaW5saW5lci5zaG91bGRQcm9jZXNzKHJ1bGUuc3R5bGUuZ2V0UHJvcGVydHlWYWx1ZSgnc3JjJykpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0Q3NzUnVsZXMoc3R5bGVTaGVldHMpIHtcbiAgICAgICAgICAgICAgICB2YXIgY3NzUnVsZXMgPSBbXTtcbiAgICAgICAgICAgICAgICBzdHlsZVNoZWV0cy5mb3JFYWNoKGZ1bmN0aW9uIChzaGVldCkge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdXRpbC5hc0FycmF5KHNoZWV0LmNzc1J1bGVzIHx8IFtdKS5mb3JFYWNoKGNzc1J1bGVzLnB1c2guYmluZChjc3NSdWxlcykpO1xuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnRXJyb3Igd2hpbGUgcmVhZGluZyBDU1MgcnVsZXMgZnJvbSAnICsgc2hlZXQuaHJlZiwgZS50b1N0cmluZygpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVybiBjc3NSdWxlcztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZnVuY3Rpb24gbmV3V2ViRm9udCh3ZWJGb250UnVsZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmU6IGZ1bmN0aW9uIHJlc29sdmUoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYmFzZVVybCA9ICh3ZWJGb250UnVsZS5wYXJlbnRTdHlsZVNoZWV0IHx8IHt9KS5ocmVmO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlubGluZXIuaW5saW5lQWxsKHdlYkZvbnRSdWxlLmNzc1RleHQsIGJhc2VVcmwpO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBzcmM6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB3ZWJGb250UnVsZS5zdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCdzcmMnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBuZXdJbWFnZXMoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpbmxpbmVBbGw6IGlubGluZUFsbCxcbiAgICAgICAgICAgIGltcGw6IHtcbiAgICAgICAgICAgICAgICBuZXdJbWFnZTogbmV3SW1hZ2VcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBmdW5jdGlvbiBuZXdJbWFnZShlbGVtZW50KSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGlubGluZTogaW5saW5lXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBmdW5jdGlvbiBpbmxpbmUoZ2V0KSB7XG4gICAgICAgICAgICAgICAgaWYgKHV0aWwuaXNEYXRhVXJsKGVsZW1lbnQuc3JjKSkgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShlbGVtZW50LnNyYylcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oZ2V0IHx8IHV0aWwuZ2V0QW5kRW5jb2RlKVxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHV0aWwuZGF0YUFzVXJsKGRhdGEsIHV0aWwubWltZVR5cGUoZWxlbWVudC5zcmMpKTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKGRhdGFVcmwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5vbmxvYWQgPSByZXNvbHZlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQub25lcnJvciA9IHJlamVjdDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnNyYyA9IGRhdGFVcmw7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBpbmxpbmVBbGwobm9kZSkge1xuICAgICAgICAgICAgaWYgKCEobm9kZSBpbnN0YW5jZW9mIEVsZW1lbnQpKSByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG5vZGUpO1xuXG4gICAgICAgICAgICByZXR1cm4gaW5saW5lQmFja2dyb3VuZChub2RlKVxuICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGUgaW5zdGFuY2VvZiBIVE1MSW1hZ2VFbGVtZW50KVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ld0ltYWdlKG5vZGUpLmlubGluZSgpO1xuICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXRpbC5hc0FycmF5KG5vZGUuY2hpbGROb2RlcykubWFwKGZ1bmN0aW9uIChjaGlsZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaW5saW5lQWxsKGNoaWxkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgZnVuY3Rpb24gaW5saW5lQmFja2dyb3VuZChub2RlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGJhY2tncm91bmQgPSBub2RlLnN0eWxlLmdldFByb3BlcnR5VmFsdWUoJ2JhY2tncm91bmQnKTtcblxuICAgICAgICAgICAgICAgIGlmICghYmFja2dyb3VuZCkgcmV0dXJuIFByb21pc2UucmVzb2x2ZShub2RlKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBpbmxpbmVyLmlubGluZUFsbChiYWNrZ3JvdW5kKVxuICAgICAgICAgICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoaW5saW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5zdHlsZS5zZXRQcm9wZXJ0eShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYmFja2dyb3VuZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5saW5lZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlLnN0eWxlLmdldFByb3BlcnR5UHJpb3JpdHkoJ2JhY2tncm91bmQnKVxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufSkodGhpcyk7XG4iLCAiY29uc3QgeyB0b1N0cmluZzogdG9TdHJpbmdGdW5jdGlvbiB9ID0gRnVuY3Rpb24ucHJvdG90eXBlO1xuY29uc3Qge1xuICBjcmVhdGUsXG4gIGRlZmluZVByb3BlcnR5LFxuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IsXG4gIGdldE93blByb3BlcnR5TmFtZXMsXG4gIGdldE93blByb3BlcnR5U3ltYm9scyxcbiAgZ2V0UHJvdG90eXBlT2YsXG59ID0gT2JqZWN0O1xuY29uc3QgeyBoYXNPd25Qcm9wZXJ0eSwgcHJvcGVydHlJc0VudW1lcmFibGUgfSA9IE9iamVjdC5wcm90b3R5cGU7XG5cbmNvbnN0IFNZTUJPTF9QUk9QRVJUSUVTID0gdHlwZW9mIGdldE93blByb3BlcnR5U3ltYm9scyA9PT0gJ2Z1bmN0aW9uJztcbmNvbnN0IFdFQUtfTUFQID0gdHlwZW9mIFdlYWtNYXAgPT09ICdmdW5jdGlvbic7XG5cbi8qKlxuICogQGZ1bmN0aW9uIGNyZWF0ZUNhY2hlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBnZXQgYSBuZXcgY2FjaGUgb2JqZWN0IHRvIHByZXZlbnQgY2lyY3VsYXIgcmVmZXJlbmNlc1xuICpcbiAqIEByZXR1cm5zIHRoZSBuZXcgY2FjaGUgb2JqZWN0XG4gKi9cbmV4cG9ydCBjb25zdCBjcmVhdGVDYWNoZSA9ICgoKSA9PiB7XG4gIGlmIChXRUFLX01BUCkge1xuICAgIHJldHVybiAoKTogRmFzdENvcHkuQ2FjaGUgPT4gbmV3IFdlYWtNYXAoKTtcbiAgfVxuXG4gIGNsYXNzIENhY2hlIHtcbiAgICBfa2V5czogYW55W10gPSBbXTtcbiAgICBfdmFsdWVzOiBhbnlbXSA9IFtdO1xuXG4gICAgaGFzKGtleTogYW55KSB7XG4gICAgICByZXR1cm4gISF+dGhpcy5fa2V5cy5pbmRleE9mKGtleSk7XG4gICAgfVxuXG4gICAgZ2V0KGtleTogYW55KSB7XG4gICAgICByZXR1cm4gdGhpcy5fdmFsdWVzW3RoaXMuX2tleXMuaW5kZXhPZihrZXkpXTtcbiAgICB9XG5cbiAgICBzZXQoa2V5OiBhbnksIHZhbHVlOiBhbnkpIHtcbiAgICAgIHRoaXMuX2tleXMucHVzaChrZXkpO1xuICAgICAgdGhpcy5fdmFsdWVzLnB1c2godmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiAoKTogRmFzdENvcHkuQ2FjaGUgPT4gbmV3IENhY2hlKCk7XG59KSgpO1xuXG4vKipcbiAqIEBmdW5jdGlvbiBnZXRDbGVhbkNsb25lXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBnZXQgYW4gZW1wdHkgdmVyc2lvbiBvZiB0aGUgb2JqZWN0IHdpdGggdGhlIHNhbWUgcHJvdG90eXBlIGl0IGhhc1xuICpcbiAqIEBwYXJhbSBvYmplY3QgdGhlIG9iamVjdCB0byBidWlsZCBhIGNsZWFuIGNsb25lIGZyb21cbiAqIEBwYXJhbSByZWFsbSB0aGUgcmVhbG0gdGhlIG9iamVjdCByZXNpZGVzIGluXG4gKiBAcmV0dXJucyB0aGUgZW1wdHkgY2xvbmVkIG9iamVjdFxuICovXG5leHBvcnQgY29uc3QgZ2V0Q2xlYW5DbG9uZSA9IChvYmplY3Q6IGFueSwgcmVhbG06IEZhc3RDb3B5LlJlYWxtKTogYW55ID0+IHtcbiAgY29uc3QgcHJvdG90eXBlID0gb2JqZWN0Ll9fcHJvdG9fXyB8fCBnZXRQcm90b3R5cGVPZihvYmplY3QpO1xuXG4gIGlmICghcHJvdG90eXBlKSB7XG4gICAgcmV0dXJuIGNyZWF0ZShudWxsKTtcbiAgfVxuXG4gIGNvbnN0IENvbnN0cnVjdG9yID0gcHJvdG90eXBlLmNvbnN0cnVjdG9yO1xuXG4gIGlmIChDb25zdHJ1Y3RvciA9PT0gcmVhbG0uT2JqZWN0KSB7XG4gICAgcmV0dXJuIHByb3RvdHlwZSA9PT0gcmVhbG0uT2JqZWN0LnByb3RvdHlwZSA/IHt9IDogY3JlYXRlKHByb3RvdHlwZSk7XG4gIH1cblxuICBpZiAofnRvU3RyaW5nRnVuY3Rpb24uY2FsbChDb25zdHJ1Y3RvcikuaW5kZXhPZignW25hdGl2ZSBjb2RlXScpKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBuZXcgQ29uc3RydWN0b3IoKTtcbiAgICB9IGNhdGNoIHt9XG4gIH1cblxuICByZXR1cm4gY3JlYXRlKHByb3RvdHlwZSk7XG59O1xuXG4vKipcbiAqIEBmdW5jdGlvbiBnZXRPYmplY3RDbG9uZUxvb3NlXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBnZXQgYSBjb3B5IG9mIHRoZSBvYmplY3QgYmFzZWQgb24gbG9vc2UgcnVsZXMsIG1lYW5pbmcgYWxsIGVudW1lcmFibGUga2V5c1xuICogYW5kIHN5bWJvbHMgYXJlIGNvcGllZCwgYnV0IHByb3BlcnR5IGRlc2NyaXB0b3JzIGFyZSBub3QgY29uc2lkZXJlZFxuICpcbiAqIEBwYXJhbSBvYmplY3QgdGhlIG9iamVjdCB0byBjbG9uZVxuICogQHBhcmFtIHJlYWxtIHRoZSByZWFsbSB0aGUgb2JqZWN0IHJlc2lkZXMgaW5cbiAqIEBwYXJhbSBoYW5kbGVDb3B5IHRoZSBmdW5jdGlvbiB0aGF0IGhhbmRsZXMgY29weWluZyB0aGUgb2JqZWN0XG4gKiBAcmV0dXJucyB0aGUgY29waWVkIG9iamVjdFxuICovXG5leHBvcnQgY29uc3QgZ2V0T2JqZWN0Q2xvbmVMb29zZTogRmFzdENvcHkuT2JqZWN0Q2xvbmVyID0gKFxuICBvYmplY3Q6IGFueSxcbiAgcmVhbG06IEZhc3RDb3B5LlJlYWxtLFxuICBoYW5kbGVDb3B5OiBGYXN0Q29weS5Db3BpZXIsXG4gIGNhY2hlOiBGYXN0Q29weS5DYWNoZSxcbik6IGFueSA9PiB7XG4gIGNvbnN0IGNsb25lOiBhbnkgPSBnZXRDbGVhbkNsb25lKG9iamVjdCwgcmVhbG0pO1xuXG4gIC8vIHNldCBpbiB0aGUgY2FjaGUgaW1tZWRpYXRlbHkgdG8gYmUgYWJsZSB0byByZXVzZSB0aGUgb2JqZWN0IHJlY3Vyc2l2ZWx5XG4gIGNhY2hlLnNldChvYmplY3QsIGNsb25lKTtcblxuICBmb3IgKGNvbnN0IGtleSBpbiBvYmplY3QpIHtcbiAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkpIHtcbiAgICAgIGNsb25lW2tleV0gPSBoYW5kbGVDb3B5KG9iamVjdFtrZXldLCBjYWNoZSk7XG4gICAgfVxuICB9XG5cbiAgaWYgKFNZTUJPTF9QUk9QRVJUSUVTKSB7XG4gICAgY29uc3Qgc3ltYm9sczogc3ltYm9sW10gPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTtcblxuICAgIGZvciAoXG4gICAgICBsZXQgaW5kZXggPSAwLCBsZW5ndGggPSBzeW1ib2xzLmxlbmd0aCwgc3ltYm9sO1xuICAgICAgaW5kZXggPCBsZW5ndGg7XG4gICAgICArK2luZGV4XG4gICAgKSB7XG4gICAgICBzeW1ib2wgPSBzeW1ib2xzW2luZGV4XTtcblxuICAgICAgaWYgKHByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwob2JqZWN0LCBzeW1ib2wpKSB7XG4gICAgICAgIGNsb25lW3N5bWJvbF0gPSBoYW5kbGVDb3B5KG9iamVjdFtzeW1ib2xdLCBjYWNoZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGNsb25lO1xufTtcblxuLyoqXG4gKiBAZnVuY3Rpb24gZ2V0T2JqZWN0Q2xvbmVTdHJpY3RcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIGdldCBhIGNvcHkgb2YgdGhlIG9iamVjdCBiYXNlZCBvbiBzdHJpY3QgcnVsZXMsIG1lYW5pbmcgYWxsIGtleXMgYW5kIHN5bWJvbHNcbiAqIGFyZSBjb3BpZWQgYmFzZWQgb24gdGhlIG9yaWdpbmFsIHByb3BlcnR5IGRlc2NyaXB0b3JzXG4gKlxuICogQHBhcmFtIG9iamVjdCB0aGUgb2JqZWN0IHRvIGNsb25lXG4gKiBAcGFyYW0gcmVhbG0gdGhlIHJlYWxtIHRoZSBvYmplY3QgcmVzaWRlcyBpblxuICogQHBhcmFtIGhhbmRsZUNvcHkgdGhlIGZ1bmN0aW9uIHRoYXQgaGFuZGxlcyBjb3B5aW5nIHRoZSBvYmplY3RcbiAqIEByZXR1cm5zIHRoZSBjb3BpZWQgb2JqZWN0XG4gKi9cbmV4cG9ydCBjb25zdCBnZXRPYmplY3RDbG9uZVN0cmljdDogRmFzdENvcHkuT2JqZWN0Q2xvbmVyID0gKFxuICBvYmplY3Q6IGFueSxcbiAgcmVhbG06IEZhc3RDb3B5LlJlYWxtLFxuICBoYW5kbGVDb3B5OiBGYXN0Q29weS5Db3BpZXIsXG4gIGNhY2hlOiBGYXN0Q29weS5DYWNoZSxcbik6IGFueSA9PiB7XG4gIGNvbnN0IGNsb25lOiBhbnkgPSBnZXRDbGVhbkNsb25lKG9iamVjdCwgcmVhbG0pO1xuXG4gIC8vIHNldCBpbiB0aGUgY2FjaGUgaW1tZWRpYXRlbHkgdG8gYmUgYWJsZSB0byByZXVzZSB0aGUgb2JqZWN0IHJlY3Vyc2l2ZWx5XG4gIGNhY2hlLnNldChvYmplY3QsIGNsb25lKTtcblxuICBjb25zdCBwcm9wZXJ0aWVzOiAoc3RyaW5nIHwgc3ltYm9sKVtdID0gU1lNQk9MX1BST1BFUlRJRVNcbiAgICA/IGdldE93blByb3BlcnR5TmFtZXMob2JqZWN0KS5jb25jYXQoXG4gICAgICAgIGdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpIGFzIHVua25vd24gYXMgc3RyaW5nW10sXG4gICAgICApXG4gICAgOiBnZXRPd25Qcm9wZXJ0eU5hbWVzKG9iamVjdCk7XG5cbiAgZm9yIChcbiAgICBsZXQgaW5kZXggPSAwLCBsZW5ndGggPSBwcm9wZXJ0aWVzLmxlbmd0aCwgcHJvcGVydHksIGRlc2NyaXB0b3I7XG4gICAgaW5kZXggPCBsZW5ndGg7XG4gICAgKytpbmRleFxuICApIHtcbiAgICBwcm9wZXJ0eSA9IHByb3BlcnRpZXNbaW5kZXhdO1xuXG4gICAgaWYgKHByb3BlcnR5ICE9PSAnY2FsbGVlJyAmJiBwcm9wZXJ0eSAhPT0gJ2NhbGxlcicpIHtcbiAgICAgIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBwcm9wZXJ0eSk7XG5cbiAgICAgIGlmIChkZXNjcmlwdG9yKSB7XG4gICAgICAgIC8vIE9ubHkgY2xvbmUgdGhlIHZhbHVlIGlmIGFjdHVhbGx5IGEgdmFsdWUsIG5vdCBhIGdldHRlciAvIHNldHRlci5cbiAgICAgICAgaWYgKCFkZXNjcmlwdG9yLmdldCAmJiAhZGVzY3JpcHRvci5zZXQpIHtcbiAgICAgICAgICBkZXNjcmlwdG9yLnZhbHVlID0gaGFuZGxlQ29weShvYmplY3RbcHJvcGVydHldLCBjYWNoZSk7XG4gICAgICAgIH1cblxuICAgICAgICB0cnkge1xuICAgICAgICAgIGRlZmluZVByb3BlcnR5KGNsb25lLCBwcm9wZXJ0eSwgZGVzY3JpcHRvcik7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgLy8gVGVlIGFib3ZlIGNhbiBmYWlsIG9uIG5vZGUgaW4gZWRnZSBjYXNlcywgc28gZmFsbCBiYWNrIHRvIHRoZSBsb29zZSBhc3NpZ25tZW50LlxuICAgICAgICAgIGNsb25lW3Byb3BlcnR5XSA9IGRlc2NyaXB0b3IudmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEluIGV4dHJhIGVkZ2UgY2FzZXMgd2hlcmUgdGhlIHByb3BlcnR5IGRlc2NyaXB0b3IgY2Fubm90IGJlIHJldHJpdmVkLCBmYWxsIGJhY2sgdG9cbiAgICAgICAgLy8gdGhlIGxvb3NlIGFzc2lnbm1lbnQuXG4gICAgICAgIGNsb25lW3Byb3BlcnR5XSA9IGhhbmRsZUNvcHkob2JqZWN0W3Byb3BlcnR5XSwgY2FjaGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjbG9uZTtcbn07XG5cbi8qKlxuICogQGZ1bmN0aW9uIGdldFJlZ0V4cEZsYWdzXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBnZXQgdGhlIGZsYWdzIHRvIGFwcGx5IHRvIHRoZSBjb3BpZWQgcmVnZXhwXG4gKlxuICogQHBhcmFtIHJlZ0V4cCB0aGUgcmVnZXhwIHRvIGdldCB0aGUgZmxhZ3Mgb2ZcbiAqIEByZXR1cm5zIHRoZSBmbGFncyBmb3IgdGhlIHJlZ2V4cFxuICovXG5leHBvcnQgY29uc3QgZ2V0UmVnRXhwRmxhZ3MgPSAocmVnRXhwOiBSZWdFeHApOiBzdHJpbmcgPT4ge1xuICBsZXQgZmxhZ3MgPSAnJztcblxuICBpZiAocmVnRXhwLmdsb2JhbCkge1xuICAgIGZsYWdzICs9ICdnJztcbiAgfVxuXG4gIGlmIChyZWdFeHAuaWdub3JlQ2FzZSkge1xuICAgIGZsYWdzICs9ICdpJztcbiAgfVxuXG4gIGlmIChyZWdFeHAubXVsdGlsaW5lKSB7XG4gICAgZmxhZ3MgKz0gJ20nO1xuICB9XG5cbiAgaWYgKHJlZ0V4cC51bmljb2RlKSB7XG4gICAgZmxhZ3MgKz0gJ3UnO1xuICB9XG5cbiAgaWYgKHJlZ0V4cC5zdGlja3kpIHtcbiAgICBmbGFncyArPSAneSc7XG4gIH1cblxuICByZXR1cm4gZmxhZ3M7XG59O1xuIiwgIi8vIHV0aWxzXG5pbXBvcnQge1xuICBjcmVhdGVDYWNoZSxcbiAgZ2V0T2JqZWN0Q2xvbmVMb29zZSxcbiAgZ2V0T2JqZWN0Q2xvbmVTdHJpY3QsXG4gIGdldFJlZ0V4cEZsYWdzLFxufSBmcm9tICcuL3V0aWxzJztcblxuY29uc3QgeyBpc0FycmF5IH0gPSBBcnJheTtcbmNvbnN0IHsgZ2V0UHJvdG90eXBlT2YgfSA9IE9iamVjdDtcblxuY29uc3QgR0xPQkFMX1RISVM6IEZhc3RDb3B5LlJlYWxtID0gKGZ1bmN0aW9uICgpIHtcbiAgaWYgKHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBnbG9iYWxUaGlzO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBzZWxmO1xuICB9XG5cbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIHdpbmRvdztcbiAgfVxuXG4gIGlmICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBnbG9iYWw7XG4gIH1cblxuICBpZiAoY29uc29sZSAmJiBjb25zb2xlLmVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignVW5hYmxlIHRvIGxvY2F0ZSBnbG9iYWwgb2JqZWN0LCByZXR1cm5pbmcgXCJ0aGlzXCIuJyk7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn0pKCk7XG5cbi8qKlxuICogQGZ1bmN0aW9uIGNvcHlcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIGNvcHkgYW4gdmFsdWUgZGVlcGx5IGFzIG11Y2ggYXMgcG9zc2libGVcbiAqXG4gKiBJZiBgc3RyaWN0YCBpcyBhcHBsaWVkLCB0aGVuIGFsbCBwcm9wZXJ0aWVzIChpbmNsdWRpbmcgbm9uLWVudW1lcmFibGUgb25lcylcbiAqIGFyZSBjb3BpZWQgd2l0aCB0aGVpciBvcmlnaW5hbCBwcm9wZXJ0eSBkZXNjcmlwdG9ycyBvbiBib3RoIG9iamVjdHMgYW5kIGFycmF5cy5cbiAqXG4gKiBUaGUgdmFsdWUgaXMgY29tcGFyZWQgdG8gdGhlIGdsb2JhbCBjb25zdHJ1Y3RvcnMgaW4gdGhlIGByZWFsbWAgcHJvdmlkZWQsXG4gKiBhbmQgdGhlIG5hdGl2ZSBjb25zdHJ1Y3RvciBpcyBhbHdheXMgdXNlZCB0byBlbnN1cmUgdGhhdCBleHRlbnNpb25zIG9mIG5hdGl2ZVxuICogb2JqZWN0cyAoYWxsb3dzIGluIEVTMjAxNSspIGFyZSBtYWludGFpbmVkLlxuICpcbiAqIEBwYXJhbSB2YWx1ZSB0aGUgdmFsdWUgdG8gY29weVxuICogQHBhcmFtIFtvcHRpb25zXSB0aGUgb3B0aW9ucyBmb3IgY29weWluZyB3aXRoXG4gKiBAcGFyYW0gW29wdGlvbnMuaXNTdHJpY3RdIHNob3VsZCB0aGUgY29weSBiZSBzdHJpY3RcbiAqIEBwYXJhbSBbb3B0aW9ucy5yZWFsbV0gdGhlIHJlYWxtICh0aGlzKSB2YWx1ZSB0aGUgdmFsdWUgaXMgY29waWVkIGZyb21cbiAqIEByZXR1cm5zIHRoZSBjb3BpZWQgdmFsdWVcbiAqL1xuZnVuY3Rpb24gY29weTxWYWx1ZT4odmFsdWU6IFZhbHVlLCBvcHRpb25zPzogRmFzdENvcHkuT3B0aW9ucyk6IFZhbHVlIHtcbiAgLy8gbWFudWFsbHkgY29hbGVzY2VkIGluc3RlYWQgb2YgZGVmYXVsdCBwYXJhbWV0ZXJzIGZvciBwZXJmb3JtYW5jZVxuICBjb25zdCBpc1N0cmljdCA9ICEhKG9wdGlvbnMgJiYgb3B0aW9ucy5pc1N0cmljdCk7XG4gIGNvbnN0IHJlYWxtID0gKG9wdGlvbnMgJiYgb3B0aW9ucy5yZWFsbSkgfHwgR0xPQkFMX1RISVM7XG4gIGNvbnN0IGdldE9iamVjdENsb25lID0gaXNTdHJpY3QgPyBnZXRPYmplY3RDbG9uZVN0cmljdCA6IGdldE9iamVjdENsb25lTG9vc2U7XG5cbiAgLyoqXG4gICAqIEBmdW5jdGlvbiBoYW5kbGVDb3B5XG4gICAqXG4gICAqIEBkZXNjcmlwdGlvblxuICAgKiBjb3B5IHRoZSB2YWx1ZSByZWN1cnNpdmVseSBiYXNlZCBvbiBpdHMgdHlwZVxuICAgKlxuICAgKiBAcGFyYW0gdmFsdWUgdGhlIHZhbHVlIHRvIGNvcHlcbiAgICogQHJldHVybnMgdGhlIGNvcGllZCB2YWx1ZVxuICAgKi9cbiAgY29uc3QgaGFuZGxlQ29weTogRmFzdENvcHkuQ29waWVyID0gKFxuICAgIHZhbHVlOiBhbnksXG4gICAgY2FjaGU6IEZhc3RDb3B5LkNhY2hlLFxuICApOiBhbnkgPT4ge1xuICAgIGlmICghdmFsdWUgfHwgdHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0Jykge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIGlmIChjYWNoZS5oYXModmFsdWUpKSB7XG4gICAgICByZXR1cm4gY2FjaGUuZ2V0KHZhbHVlKTtcbiAgICB9XG5cbiAgICBjb25zdCBwcm90b3R5cGUgPSB2YWx1ZS5fX3Byb3RvX18gfHwgZ2V0UHJvdG90eXBlT2YodmFsdWUpO1xuICAgIGNvbnN0IENvbnN0cnVjdG9yID0gcHJvdG90eXBlICYmIHByb3RvdHlwZS5jb25zdHJ1Y3RvcjtcblxuICAgIC8vIHBsYWluIG9iamVjdHNcbiAgICBpZiAoIUNvbnN0cnVjdG9yIHx8IENvbnN0cnVjdG9yID09PSByZWFsbS5PYmplY3QpIHtcbiAgICAgIHJldHVybiBnZXRPYmplY3RDbG9uZSh2YWx1ZSwgcmVhbG0sIGhhbmRsZUNvcHksIGNhY2hlKTtcbiAgICB9XG5cbiAgICBsZXQgY2xvbmU6IGFueTtcblxuICAgIC8vIGFycmF5c1xuICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgLy8gaWYgc3RyaWN0LCBpbmNsdWRlIG5vbi1zdGFuZGFyZCBwcm9wZXJ0aWVzXG4gICAgICBpZiAoaXNTdHJpY3QpIHtcbiAgICAgICAgcmV0dXJuIGdldE9iamVjdENsb25lU3RyaWN0KHZhbHVlLCByZWFsbSwgaGFuZGxlQ29weSwgY2FjaGUpO1xuICAgICAgfVxuXG4gICAgICBjbG9uZSA9IG5ldyBDb25zdHJ1Y3RvcigpO1xuICAgICAgY2FjaGUuc2V0KHZhbHVlLCBjbG9uZSk7XG5cbiAgICAgIGZvciAoXG4gICAgICAgIGxldCBpbmRleDogbnVtYmVyID0gMCwgbGVuZ3RoID0gdmFsdWUubGVuZ3RoO1xuICAgICAgICBpbmRleCA8IGxlbmd0aDtcbiAgICAgICAgKytpbmRleFxuICAgICAgKSB7XG4gICAgICAgIGNsb25lW2luZGV4XSA9IGhhbmRsZUNvcHkodmFsdWVbaW5kZXhdLCBjYWNoZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjbG9uZTtcbiAgICB9XG5cbiAgICAvLyBkYXRlc1xuICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIHJlYWxtLkRhdGUpIHtcbiAgICAgIHJldHVybiBuZXcgQ29uc3RydWN0b3IodmFsdWUuZ2V0VGltZSgpKTtcbiAgICB9XG5cbiAgICAvLyByZWdleHBzXG4gICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgcmVhbG0uUmVnRXhwKSB7XG4gICAgICBjbG9uZSA9IG5ldyBDb25zdHJ1Y3RvcihcbiAgICAgICAgdmFsdWUuc291cmNlLFxuICAgICAgICB2YWx1ZS5mbGFncyB8fCBnZXRSZWdFeHBGbGFncyh2YWx1ZSksXG4gICAgICApO1xuXG4gICAgICBjbG9uZS5sYXN0SW5kZXggPSB2YWx1ZS5sYXN0SW5kZXg7XG5cbiAgICAgIHJldHVybiBjbG9uZTtcbiAgICB9XG5cbiAgICAvLyBtYXBzXG4gICAgaWYgKHJlYWxtLk1hcCAmJiB2YWx1ZSBpbnN0YW5jZW9mIHJlYWxtLk1hcCkge1xuICAgICAgY2xvbmUgPSBuZXcgQ29uc3RydWN0b3IoKTtcbiAgICAgIGNhY2hlLnNldCh2YWx1ZSwgY2xvbmUpO1xuXG4gICAgICB2YWx1ZS5mb3JFYWNoKCh2YWx1ZTogYW55LCBrZXk6IGFueSkgPT4ge1xuICAgICAgICBjbG9uZS5zZXQoa2V5LCBoYW5kbGVDb3B5KHZhbHVlLCBjYWNoZSkpO1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBjbG9uZTtcbiAgICB9XG5cbiAgICAvLyBzZXRzXG4gICAgaWYgKHJlYWxtLlNldCAmJiB2YWx1ZSBpbnN0YW5jZW9mIHJlYWxtLlNldCkge1xuICAgICAgY2xvbmUgPSBuZXcgQ29uc3RydWN0b3IoKTtcbiAgICAgIGNhY2hlLnNldCh2YWx1ZSwgY2xvbmUpO1xuXG4gICAgICB2YWx1ZS5mb3JFYWNoKCh2YWx1ZTogYW55KSA9PiB7XG4gICAgICAgIGNsb25lLmFkZChoYW5kbGVDb3B5KHZhbHVlLCBjYWNoZSkpO1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBjbG9uZTtcbiAgICB9XG5cbiAgICAvLyBibG9ic1xuICAgIGlmIChyZWFsbS5CbG9iICYmIHZhbHVlIGluc3RhbmNlb2YgcmVhbG0uQmxvYikge1xuICAgICAgcmV0dXJuIHZhbHVlLnNsaWNlKDAsIHZhbHVlLnNpemUsIHZhbHVlLnR5cGUpO1xuICAgIH1cblxuICAgIC8vIGJ1ZmZlcnMgKG5vZGUtb25seSlcbiAgICBpZiAocmVhbG0uQnVmZmVyICYmIHJlYWxtLkJ1ZmZlci5pc0J1ZmZlcih2YWx1ZSkpIHtcbiAgICAgIGNsb25lID0gcmVhbG0uQnVmZmVyLmFsbG9jVW5zYWZlXG4gICAgICAgID8gcmVhbG0uQnVmZmVyLmFsbG9jVW5zYWZlKHZhbHVlLmxlbmd0aClcbiAgICAgICAgOiBuZXcgQ29uc3RydWN0b3IodmFsdWUubGVuZ3RoKTtcblxuICAgICAgY2FjaGUuc2V0KHZhbHVlLCBjbG9uZSk7XG4gICAgICB2YWx1ZS5jb3B5KGNsb25lKTtcblxuICAgICAgcmV0dXJuIGNsb25lO1xuICAgIH1cblxuICAgIC8vIGFycmF5YnVmZmVycyAvIGRhdGF2aWV3c1xuICAgIGlmIChyZWFsbS5BcnJheUJ1ZmZlcikge1xuICAgICAgLy8gZGF0YXZpZXdzXG4gICAgICBpZiAocmVhbG0uQXJyYXlCdWZmZXIuaXNWaWV3KHZhbHVlKSkge1xuICAgICAgICBjbG9uZSA9IG5ldyBDb25zdHJ1Y3Rvcih2YWx1ZS5idWZmZXIuc2xpY2UoMCkpO1xuICAgICAgICBjYWNoZS5zZXQodmFsdWUsIGNsb25lKTtcbiAgICAgICAgcmV0dXJuIGNsb25lO1xuICAgICAgfVxuXG4gICAgICAvLyBhcnJheWJ1ZmZlcnNcbiAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIHJlYWxtLkFycmF5QnVmZmVyKSB7XG4gICAgICAgIGNsb25lID0gdmFsdWUuc2xpY2UoMCk7XG4gICAgICAgIGNhY2hlLnNldCh2YWx1ZSwgY2xvbmUpO1xuICAgICAgICByZXR1cm4gY2xvbmU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gaWYgdGhlIHZhbHVlIGNhbm5vdCAvIHNob3VsZCBub3QgYmUgY2xvbmVkLCBkb24ndFxuICAgIGlmIChcbiAgICAgIC8vIHByb21pc2UtbGlrZVxuICAgICAgdHlwZW9mIHZhbHVlLnRoZW4gPT09ICdmdW5jdGlvbicgfHxcbiAgICAgIC8vIGVycm9yc1xuICAgICAgdmFsdWUgaW5zdGFuY2VvZiBFcnJvciB8fFxuICAgICAgLy8gd2Vha21hcHNcbiAgICAgIChyZWFsbS5XZWFrTWFwICYmIHZhbHVlIGluc3RhbmNlb2YgcmVhbG0uV2Vha01hcCkgfHxcbiAgICAgIC8vIHdlYWtzZXRzXG4gICAgICAocmVhbG0uV2Vha1NldCAmJiB2YWx1ZSBpbnN0YW5jZW9mIHJlYWxtLldlYWtTZXQpXG4gICAgKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgLy8gYXNzdW1lIGFueXRoaW5nIGxlZnQgaXMgYSBjdXN0b20gY29uc3RydWN0b3JcbiAgICByZXR1cm4gZ2V0T2JqZWN0Q2xvbmUodmFsdWUsIHJlYWxtLCBoYW5kbGVDb3B5LCBjYWNoZSk7XG4gIH07XG5cbiAgcmV0dXJuIGhhbmRsZUNvcHkodmFsdWUsIGNyZWF0ZUNhY2hlKCkpO1xufVxuXG4vLyBBZGRpbmcgcmVmZXJlbmNlIHRvIGFsbG93IHVzYWdlIGluIENvbW1vbkpTIGxpYnJhcmllcyBjb21waWxlZCB1c2luZyBUU0MsIHdoaWNoXG4vLyBleHBlY3RzIHRoZXJlIHRvIGJlIGEgZGVmYXVsdCBwcm9wZXJ0eSBvbiB0aGUgZXhwb3J0ZWQgdmFsdWUuIFNlZVxuLy8gWyMzN10oaHR0cHM6Ly9naXRodWIuY29tL3BsYW50dGhlaWRlYS9mYXN0LWNvcHkvaXNzdWVzLzM3KSBmb3IgZGV0YWlscy5cbmNvcHkuZGVmYXVsdCA9IGNvcHk7XG5cbi8qKlxuICogQGZ1bmN0aW9uIHN0cmljdENvcHlcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIGNvcHkgdGhlIHZhbHVlIHdpdGggYHN0cmljdGAgb3B0aW9uIHByZS1hcHBsaWVkXG4gKlxuICogQHBhcmFtIHZhbHVlIHRoZSB2YWx1ZSB0byBjb3B5XG4gKiBAcGFyYW0gW29wdGlvbnNdIHRoZSBvcHRpb25zIGZvciBjb3B5aW5nIHdpdGhcbiAqIEBwYXJhbSBbb3B0aW9ucy5yZWFsbV0gdGhlIHJlYWxtICh0aGlzKSB2YWx1ZSB0aGUgdmFsdWUgaXMgY29waWVkIGZyb21cbiAqIEByZXR1cm5zIHRoZSBjb3BpZWQgdmFsdWVcbiAqL1xuY29weS5zdHJpY3QgPSBmdW5jdGlvbiBzdHJpY3RDb3B5KHZhbHVlOiBhbnksIG9wdGlvbnM/OiBGYXN0Q29weS5PcHRpb25zKSB7XG4gIHJldHVybiBjb3B5KHZhbHVlLCB7XG4gICAgaXNTdHJpY3Q6IHRydWUsXG4gICAgcmVhbG06IG9wdGlvbnMgPyBvcHRpb25zLnJlYWxtIDogdm9pZCAwLFxuICB9KTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNvcHk7XG4iLCAiaW1wb3J0IHtcbiAgICBhZGRJY29uLFxuICAgIE1hcmtkb3duUG9zdFByb2Nlc3NvckNvbnRleHQsXG4gICAgTm90aWNlLFxuICAgIHBhcnNlWWFtbCxcbiAgICBQbHVnaW4sXG4gICAgVEZpbGVcbn0gZnJvbSBcIm9ic2lkaWFuXCI7XG5pbXBvcnQgZG9tdG9pbWFnZSBmcm9tIFwiZG9tLXRvLWltYWdlXCI7XG5cbmltcG9ydCB7IGdldEJlc3RpYXJ5QnlOYW1lIH0gZnJvbSBcIi4vZGF0YS9zcmQtYmVzdGlhcnlcIjtcbmltcG9ydCBTdGF0QmxvY2tSZW5kZXJlciBmcm9tIFwiLi92aWV3L3N0YXRibG9ja1wiO1xuaW1wb3J0IHsgdHJhbnNmb3JtVHJhaXRzIH0gZnJvbSBcIi4vdXRpbC91dGlsXCI7XG5pbXBvcnQge1xuICAgIEVYUE9SVF9JQ09OLFxuICAgIEVYUE9SVF9TWU1CT0wsXG4gICAgU0FWRV9JQ09OLFxuICAgIFNBVkVfU1lNQk9MXG59IGZyb20gXCIuL2RhdGEvY29uc3RhbnRzXCI7XG5pbXBvcnQgdHlwZSB7IE1vbnN0ZXIsIFN0YXRibG9ja1BhcmFtZXRlcnMgfSBmcm9tIFwiQHR5cGVzXCI7XG5pbXBvcnQgU3RhdGJsb2NrU2V0dGluZ1RhYiBmcm9tIFwiLi9zZXR0aW5ncy9zZXR0aW5nc1wiO1xuaW1wb3J0IGZhc3RDb3B5IGZyb20gXCJmYXN0LWNvcHlcIjtcblxuaW1wb3J0IHsgc29ydCB9IGZyb20gXCJmYXN0LXNvcnRcIjtcbmltcG9ydCB0eXBlIHsgUGx1Z2lucyB9IGZyb20gXCIuLi8uLi9vYnNpZGlhbi1vdmVybG9hZFwiO1xuaW1wb3J0IHR5cGUgeyBIb21lYnJld0NyZWF0dXJlIH0gZnJvbSBcIi4uLy4uL29ic2lkaWFuLWluaXRpYXRpdmUtdHJhY2tlci9AdHlwZXNcIjtcbmltcG9ydCB7IFdhdGNoZXIgfSBmcm9tIFwiLi93YXRjaGVyL3dhdGNoZXJcIjtcbmltcG9ydCB0eXBlIHsgTGF5b3V0IH0gZnJvbSBcIi4vbGF5b3V0cy90eXBlc1wiO1xuaW1wb3J0IHsgTGF5b3V0NWUgfSBmcm9tIFwiLi9sYXlvdXRzL2Jhc2ljNWVcIjtcbmltcG9ydCB7IFN0YXRibG9ja1N1Z2dlc3RlciB9IGZyb20gXCIuL3N1Z2dlc3RcIjtcblxuZGVjbGFyZSBtb2R1bGUgXCJvYnNpZGlhblwiIHtcbiAgICBpbnRlcmZhY2UgQXBwIHtcbiAgICAgICAgcGx1Z2luczoge1xuICAgICAgICAgICAgZ2V0UGx1Z2luPFQgZXh0ZW5kcyBrZXlvZiBQbHVnaW5zPihwbHVnaW46IFQpOiBQbHVnaW5zW1RdO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBpbnRlcmZhY2UgV29ya3NwYWNlIHtcbiAgICAgICAgb24oXG4gICAgICAgICAgICBuYW1lOiBcImRpY2Utcm9sbGVyOnJlbmRlcmVkLXJlc3VsdFwiLFxuICAgICAgICAgICAgY2FsbGJhY2s6IChyZXN1bHQ6IG51bWJlcikgPT4gdm9pZFxuICAgICAgICApOiBFdmVudFJlZjtcbiAgICAgICAgb24obmFtZTogXCJkaWNlLXJvbGxlcjp1bmxvYWRcIiwgY2FsbGJhY2s6ICgpID0+IHZvaWQpOiBFdmVudFJlZjtcbiAgICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU3RhdGJsb2NrRGF0YSB7XG4gICAgbW9uc3RlcnM6IEFycmF5PFtzdHJpbmcsIE1vbnN0ZXJdPjtcbiAgICBsYXlvdXRzOiBMYXlvdXRbXTtcbiAgICBkZWZhdWx0OiBzdHJpbmc7XG4gICAgdXNlRGljZTogYm9vbGVhbjtcbiAgICByZW5kZXJEaWNlOiBib29sZWFuO1xuICAgIGV4cG9ydDogYm9vbGVhbjtcbiAgICBzaG93QWR2YW5jZWQ6IGJvb2xlYW47XG4gICAgdmVyc2lvbjoge1xuICAgICAgICBtYWpvcjogbnVtYmVyO1xuICAgICAgICBtaW5vcjogbnVtYmVyO1xuICAgICAgICBwYXRjaDogbnVtYmVyO1xuICAgIH07XG4gICAgcGF0aHM6IHN0cmluZ1tdO1xuICAgIGF1dG9QYXJzZTogYm9vbGVhbjtcbiAgICBkaXNhYmxlU1JEOiBib29sZWFuO1xuICAgIHRyeVRvUmVuZGVyTGlua3M6IGJvb2xlYW47XG4gICAgZGVidWc6IGJvb2xlYW47XG59XG5cbmNvbnN0IERFRkFVTFRfREFUQTogU3RhdGJsb2NrRGF0YSA9IHtcbiAgICBtb25zdGVyczogW10sXG4gICAgbGF5b3V0czogW10sXG4gICAgZGVmYXVsdDogTGF5b3V0NWUubmFtZSxcbiAgICB1c2VEaWNlOiB0cnVlLFxuICAgIHJlbmRlckRpY2U6IGZhbHNlLFxuICAgIGV4cG9ydDogdHJ1ZSxcbiAgICBzaG93QWR2YW5jZWQ6IGZhbHNlLFxuICAgIHZlcnNpb246IHtcbiAgICAgICAgbWFqb3I6IG51bGwsXG4gICAgICAgIG1pbm9yOiBudWxsLFxuICAgICAgICBwYXRjaDogbnVsbFxuICAgIH0sXG4gICAgcGF0aHM6IFtcIi9cIl0sXG4gICAgYXV0b1BhcnNlOiBmYWxzZSxcbiAgICBkaXNhYmxlU1JEOiBmYWxzZSxcbiAgICB0cnlUb1JlbmRlckxpbmtzOiB0cnVlLFxuICAgIGRlYnVnOiBmYWxzZVxufTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3RhdEJsb2NrUGx1Z2luIGV4dGVuZHMgUGx1Z2luIHtcbiAgICBzZXR0aW5nczogU3RhdGJsb2NrRGF0YTtcbiAgICBkYXRhOiBNYXA8c3RyaW5nLCBNb25zdGVyPjtcbiAgICBiZXN0aWFyeTogTWFwPHN0cmluZywgTW9uc3Rlcj47XG5cbiAgICBwcml2YXRlIG5hbWVzSGF2ZUNoYW5nZWQgPSB0cnVlO1xuICAgIHByaXZhdGUgbmFtZXM6IHN0cmluZ1tdO1xuXG4gICAgZ2V0QmVzdGlhcnlOYW1lcygpIHtcbiAgICAgICAgaWYgKHRoaXMubmFtZXNIYXZlQ2hhbmdlZCkge1xuICAgICAgICAgICAgdGhpcy5uYW1lcyA9IFsuLi50aGlzLmJlc3RpYXJ5LmtleXMoKV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMubmFtZXM7XG4gICAgfVxuXG4gICAgd2F0Y2hlciA9IG5ldyBXYXRjaGVyKHRoaXMpO1xuICAgIHByaXZhdGUgX3NvcnRlZDogTW9uc3RlcltdID0gW107XG5cbiAgICBnZXRSb2xsZXIoc3RyOiBzdHJpbmcpIHtcbiAgICAgICAgaWYgKCF0aGlzLmNhblVzZURpY2VSb2xsZXIpIHJldHVybjtcbiAgICAgICAgY29uc3Qgcm9sbGVyID0gdGhpcy5hcHAucGx1Z2luc1xuICAgICAgICAgICAgLmdldFBsdWdpbihcIm9ic2lkaWFuLWRpY2Utcm9sbGVyXCIpXG4gICAgICAgICAgICAuZ2V0Um9sbGVyU3luYyhzdHIsIFwic3RhdGJsb2NrXCIsIHRydWUpO1xuICAgICAgICByZXR1cm4gcm9sbGVyO1xuICAgIH1cbiAgICBnZXQgY2FuVXNlRGljZVJvbGxlcigpIHtcbiAgICAgICAgaWYgKHRoaXMuYXBwLnBsdWdpbnMuZ2V0UGx1Z2luKFwib2JzaWRpYW4tZGljZS1yb2xsZXJcIikgIT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICF0aGlzLmFwcC5wbHVnaW5zLmdldFBsdWdpbihcIm9ic2lkaWFuLWRpY2Utcm9sbGVyXCIpXG4gICAgICAgICAgICAgICAgICAgIC5nZXRSb2xsZXJTeW5jXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBuZXcgTm90aWNlKFxuICAgICAgICAgICAgICAgICAgICBcIlBsZWFzZSB1cGRhdGUgRGljZSBSb2xsZXIgdG8gdGhlIGxhdGVzdCB2ZXJzaW9uIHRvIHVzZSB3aXRoIEluaXRpYXRpdmUgVHJhY2tlci5cIlxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBnZXQgc29ydGVkKCkge1xuICAgICAgICBpZiAoIXRoaXMuX3NvcnRlZC5sZW5ndGgpXG4gICAgICAgICAgICB0aGlzLl9zb3J0ZWQgPSBzb3J0PE1vbnN0ZXI+KEFycmF5LmZyb20odGhpcy5kYXRhLnZhbHVlcygpKSkuYXNjKFxuICAgICAgICAgICAgICAgIChtKSA9PiBtLm5hbWVcbiAgICAgICAgICAgICk7XG4gICAgICAgIHJldHVybiB0aGlzLl9zb3J0ZWQ7XG4gICAgfVxuICAgIGdldCBzb3VyY2VzKCkge1xuICAgICAgICByZXR1cm4gbmV3IFNldChcbiAgICAgICAgICAgIEFycmF5LmZyb20odGhpcy5kYXRhLnZhbHVlcygpKVxuICAgICAgICAgICAgICAgIC5tYXAoKG0pID0+IG0uc291cmNlKVxuICAgICAgICAgICAgICAgIC5mbGF0KClcbiAgICAgICAgKTtcbiAgICB9XG4gICAgYXN5bmMgb25sb2FkKCkge1xuICAgICAgICBjb25zb2xlLmxvZyhcIlRUUlBHIFN0YXRCbG9ja3MgbG9hZGVkXCIpO1xuXG4gICAgICAgIGF3YWl0IHRoaXMubG9hZFNldHRpbmdzKCk7XG4gICAgICAgIGF3YWl0IHRoaXMubG9hZE1vbnN0ZXJEYXRhKCk7XG5cbiAgICAgICAgYXdhaXQgdGhpcy5zYXZlU2V0dGluZ3MoKTtcblxuICAgICAgICB0aGlzLndhdGNoZXIubG9hZCgpO1xuXG4gICAgICAgIHRoaXMuYWRkQ29tbWFuZCh7XG4gICAgICAgICAgICBpZDogXCJwYXJzZS1mcm9udG1hdHRlclwiLFxuICAgICAgICAgICAgbmFtZTogXCJQYXJzZSBGcm9udG1hdHRlciBmb3IgQ3JlYXR1cmVzXCIsXG4gICAgICAgICAgICBjYWxsYmFjazogKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMud2F0Y2hlci5zdGFydCh0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgYWRkSWNvbihcbiAgICAgICAgICAgIFwiZHJvcHpvbmUtZ3JpcFwiLFxuICAgICAgICAgICAgYDxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiIGZvY3VzYWJsZT1cImZhbHNlXCIgZGF0YS1wcmVmaXg9XCJmYXNcIiBkYXRhLWljb249XCJncmlwLWxpbmVzLXZlcnRpY2FsXCIgY2xhc3M9XCJzdmctaW5saW5lLS1mYSBmYS1ncmlwLWxpbmVzLXZlcnRpY2FsIGZhLXctOFwiIHJvbGU9XCJpbWdcIiB2aWV3Qm94PVwiMCAwIDI1NiA1MTJcIj48cGF0aCBmaWxsPVwiY3VycmVudENvbG9yXCIgZD1cIk05NiA0OTZWMTZjMC04LjgtNy4yLTE2LTE2LTE2SDQ4Yy04LjggMC0xNiA3LjItMTYgMTZ2NDgwYzAgOC44IDcuMiAxNiAxNiAxNmgzMmM4LjggMCAxNi03LjIgMTYtMTZ6bTEyOCAwVjE2YzAtOC44LTcuMi0xNi0xNi0xNmgtMzJjLTguOCAwLTE2IDcuMi0xNiAxNnY0ODBjMCA4LjggNy4yIDE2IDE2IDE2aDMyYzguOCAwIDE2LTcuMiAxNi0xNnpcIi8+PC9zdmc+YFxuICAgICAgICAgICAgLyogIGA8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiBhcmlhLWhpZGRlbj1cInRydWVcIiBmb2N1c2FibGU9XCJmYWxzZVwiIGRhdGEtcHJlZml4PVwiZmFzXCIgZGF0YS1pY29uPVwiZ3JpcC12ZXJ0aWNhbFwiIGNsYXNzPVwic3ZnLWlubGluZS0tZmEgZmEtZ3JpcC12ZXJ0aWNhbCBmYS13LTEwXCIgcm9sZT1cImltZ1wiIHZpZXdCb3g9XCIwIDAgMzIwIDUxMlwiPjxwYXRoIGZpbGw9XCJjdXJyZW50Q29sb3JcIiBkPVwiTTk2IDMySDMyQzE0LjMzIDMyIDAgNDYuMzMgMCA2NHY2NGMwIDE3LjY3IDE0LjMzIDMyIDMyIDMyaDY0YzE3LjY3IDAgMzItMTQuMzMgMzItMzJWNjRjMC0xNy42Ny0xNC4zMy0zMi0zMi0zMnptMCAxNjBIMzJjLTE3LjY3IDAtMzIgMTQuMzMtMzIgMzJ2NjRjMCAxNy42NyAxNC4zMyAzMiAzMiAzMmg2NGMxNy42NyAwIDMyLTE0LjMzIDMyLTMydi02NGMwLTE3LjY3LTE0LjMzLTMyLTMyLTMyem0wIDE2MEgzMmMtMTcuNjcgMC0zMiAxNC4zMy0zMiAzMnY2NGMwIDE3LjY3IDE0LjMzIDMyIDMyIDMyaDY0YzE3LjY3IDAgMzItMTQuMzMgMzItMzJ2LTY0YzAtMTcuNjctMTQuMzMtMzItMzItMzJ6TTI4OCAzMmgtNjRjLTE3LjY3IDAtMzIgMTQuMzMtMzIgMzJ2NjRjMCAxNy42NyAxNC4zMyAzMiAzMiAzMmg2NGMxNy42NyAwIDMyLTE0LjMzIDMyLTMyVjY0YzAtMTcuNjctMTQuMzMtMzItMzItMzJ6bTAgMTYwaC02NGMtMTcuNjcgMC0zMiAxNC4zMy0zMiAzMnY2NGMwIDE3LjY3IDE0LjMzIDMyIDMyIDMyaDY0YzE3LjY3IDAgMzItMTQuMzMgMzItMzJ2LTY0YzAtMTcuNjctMTQuMzMtMzItMzItMzJ6bTAgMTYwaC02NGMtMTcuNjcgMC0zMiAxNC4zMy0zMiAzMnY2NGMwIDE3LjY3IDE0LjMzIDMyIDMyIDMyaDY0YzE3LjY3IDAgMzItMTQuMzMgMzItMzJ2LTY0YzAtMTcuNjctMTQuMzMtMzItMzItMzJ6XCIvPjwvc3ZnPmAqL1xuICAgICAgICApO1xuICAgICAgICBhZGRJY29uKFxuICAgICAgICAgICAgXCJzdGF0YmxvY2stY29uZGl0aW9uZWRcIixcbiAgICAgICAgICAgIGA8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiBhcmlhLWhpZGRlbj1cInRydWVcIiBmb2N1c2FibGU9XCJmYWxzZVwiIGRhdGEtcHJlZml4PVwiZmFyXCIgZGF0YS1pY29uPVwicXVlc3Rpb24tY2lyY2xlXCIgY2xhc3M9XCJzdmctaW5saW5lLS1mYSBmYS1xdWVzdGlvbi1jaXJjbGUgZmEtdy0xNlwiIHJvbGU9XCJpbWdcIiB2aWV3Qm94PVwiMCAwIDUxMiA1MTJcIj48cGF0aCBmaWxsPVwiY3VycmVudENvbG9yXCIgZD1cIk0yNTYgOEMxMTkuMDQzIDggOCAxMTkuMDgzIDggMjU2YzAgMTM2Ljk5NyAxMTEuMDQzIDI0OCAyNDggMjQ4czI0OC0xMTEuMDAzIDI0OC0yNDhDNTA0IDExOS4wODMgMzkyLjk1NyA4IDI1NiA4em0wIDQ0OGMtMTEwLjUzMiAwLTIwMC04OS40MzEtMjAwLTIwMCAwLTExMC40OTUgODkuNDcyLTIwMCAyMDAtMjAwIDExMC40OTEgMCAyMDAgODkuNDcxIDIwMCAyMDAgMCAxMTAuNTMtODkuNDMxIDIwMC0yMDAgMjAwem0xMDcuMjQ0LTI1NS4yYzAgNjcuMDUyLTcyLjQyMSA2OC4wODQtNzIuNDIxIDkyLjg2M1YzMDBjMCA2LjYyNy01LjM3MyAxMi0xMiAxMmgtNDUuNjQ3Yy02LjYyNyAwLTEyLTUuMzczLTEyLTEydi04LjY1OWMwLTM1Ljc0NSAyNy4xLTUwLjAzNCA0Ny41NzktNjEuNTE2IDE3LjU2MS05Ljg0NSAyOC4zMjQtMTYuNTQxIDI4LjMyNC0yOS41NzkgMC0xNy4yNDYtMjEuOTk5LTI4LjY5My0zOS43ODQtMjguNjkzLTIzLjE4OSAwLTMzLjg5NCAxMC45NzctNDguOTQyIDI5Ljk2OS00LjA1NyA1LjEyLTExLjQ2IDYuMDcxLTE2LjY2NiAyLjEyNGwtMjcuODI0LTIxLjA5OGMtNS4xMDctMy44NzItNi4yNTEtMTEuMDY2LTIuNjQ0LTE2LjM2M0MxODQuODQ2IDEzMS40OTEgMjE0Ljk0IDExMiAyNjEuNzk0IDExMmM0OS4wNzEgMCAxMDEuNDUgMzguMzA0IDEwMS40NSA4OC44ek0yOTggMzY4YzAgMjMuMTU5LTE4Ljg0MSA0Mi00MiA0MnMtNDItMTguODQxLTQyLTQyIDE4Ljg0MS00MiA0Mi00MiA0MiAxOC44NDEgNDIgNDJ6XCIvPjwvc3ZnPmBcbiAgICAgICAgKTtcbiAgICAgICAgYWRkSWNvbihcbiAgICAgICAgICAgIFwiZGljZS1yb2xsZXItZGljZVwiLFxuICAgICAgICAgICAgYDxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiIGZvY3VzYWJsZT1cImZhbHNlXCIgZGF0YS1wcmVmaXg9XCJmYXNcIiBkYXRhLWljb249XCJkaWNlXCIgY2xhc3M9XCJzdmctaW5saW5lLS1mYSBmYS1kaWNlIGZhLXctMjBcIiByb2xlPVwiaW1nXCIgdmlld0JveD1cIjAgMCA2NDAgNTEyXCI+PHBhdGggZmlsbD1cImN1cnJlbnRDb2xvclwiIGQ9XCJNNTkyIDE5Mkg0NzMuMjZjMTIuNjkgMjkuNTkgNy4xMiA2NS4yLTE3IDg5LjMyTDMyMCA0MTcuNThWNDY0YzAgMjYuNTEgMjEuNDkgNDggNDggNDhoMjI0YzI2LjUxIDAgNDgtMjEuNDkgNDgtNDhWMjQwYzAtMjYuNTEtMjEuNDktNDgtNDgtNDh6TTQ4MCAzNzZjLTEzLjI1IDAtMjQtMTAuNzUtMjQtMjQgMC0xMy4yNiAxMC43NS0yNCAyNC0yNHMyNCAxMC43NCAyNCAyNGMwIDEzLjI1LTEwLjc1IDI0LTI0IDI0em0tNDYuMzctMTg2LjdMMjU4LjcgMTQuMzdjLTE5LjE2LTE5LjE2LTUwLjIzLTE5LjE2LTY5LjM5IDBMMTQuMzcgMTg5LjNjLTE5LjE2IDE5LjE2LTE5LjE2IDUwLjIzIDAgNjkuMzlMMTg5LjMgNDMzLjYzYzE5LjE2IDE5LjE2IDUwLjIzIDE5LjE2IDY5LjM5IDBMNDMzLjYzIDI1OC43YzE5LjE2LTE5LjE3IDE5LjE2LTUwLjI0IDAtNjkuNHpNOTYgMjQ4Yy0xMy4yNSAwLTI0LTEwLjc1LTI0LTI0IDAtMTMuMjYgMTAuNzUtMjQgMjQtMjRzMjQgMTAuNzQgMjQgMjRjMCAxMy4yNS0xMC43NSAyNC0yNCAyNHptMTI4IDEyOGMtMTMuMjUgMC0yNC0xMC43NS0yNC0yNCAwLTEzLjI2IDEwLjc1LTI0IDI0LTI0czI0IDEwLjc0IDI0IDI0YzAgMTMuMjUtMTAuNzUgMjQtMjQgMjR6bTAtMTI4Yy0xMy4yNSAwLTI0LTEwLjc1LTI0LTI0IDAtMTMuMjYgMTAuNzUtMjQgMjQtMjRzMjQgMTAuNzQgMjQgMjRjMCAxMy4yNS0xMC43NSAyNC0yNCAyNHptMC0xMjhjLTEzLjI1IDAtMjQtMTAuNzUtMjQtMjQgMC0xMy4yNiAxMC43NS0yNCAyNC0yNHMyNCAxMC43NCAyNCAyNGMwIDEzLjI1LTEwLjc1IDI0LTI0IDI0em0xMjggMTI4Yy0xMy4yNSAwLTI0LTEwLjc1LTI0LTI0IDAtMTMuMjYgMTAuNzUtMjQgMjQtMjRzMjQgMTAuNzQgMjQgMjRjMCAxMy4yNS0xMC43NSAyNC0yNCAyNHpcIi8+PC9zdmc+YFxuICAgICAgICApO1xuXG4gICAgICAgIHRoaXMuYWRkU2V0dGluZ1RhYihuZXcgU3RhdGJsb2NrU2V0dGluZ1RhYih0aGlzLmFwcCwgdGhpcykpO1xuXG4gICAgICAgIGFkZEljb24oU0FWRV9TWU1CT0wsIFNBVkVfSUNPTik7XG4gICAgICAgIGFkZEljb24oRVhQT1JUX1NZTUJPTCwgRVhQT1JUX0lDT04pO1xuXG4gICAgICAgIHRoaXMuYmVzdGlhcnkgPSBuZXcgTWFwKFtcbiAgICAgICAgICAgIC4uLmdldEJlc3RpYXJ5QnlOYW1lKHRoaXMuc2V0dGluZ3MuZGlzYWJsZVNSRCksXG4gICAgICAgICAgICAuLi50aGlzLmRhdGFcbiAgICAgICAgXSk7XG5cbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdywgXCJiZXN0aWFyeVwiLCB7XG4gICAgICAgICAgICB2YWx1ZTogdGhpcy5iZXN0aWFyeSxcbiAgICAgICAgICAgIHdyaXRhYmxlOiBmYWxzZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLnJlZ2lzdGVyTWFya2Rvd25Db2RlQmxvY2tQcm9jZXNzb3IoXG4gICAgICAgICAgICBcInN0YXRibG9ja1wiLFxuICAgICAgICAgICAgdGhpcy5wb3N0cHJvY2Vzc29yLmJpbmQodGhpcylcbiAgICAgICAgKTtcblxuICAgICAgICB0aGlzLnJlZ2lzdGVyRWRpdG9yU3VnZ2VzdChuZXcgU3RhdGJsb2NrU3VnZ2VzdGVyKHRoaXMpKTtcblxuICAgICAgICB0aGlzLnJlZ2lzdGVyRXZlbnQoXG4gICAgICAgICAgICB0aGlzLmFwcC53b3Jrc3BhY2Uub24oXCJkaWNlLXJvbGxlcjp1bmxvYWRcIiwgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0dGluZ3MudXNlRGljZSA9IGZhbHNlO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICB9XG4gICAgYXN5bmMgbG9hZFNldHRpbmdzKCkge1xuICAgICAgICBjb25zdCBzZXR0aW5ncyA9IGF3YWl0IHRoaXMubG9hZERhdGEoKTtcblxuICAgICAgICBpZiAoc2V0dGluZ3MgIT0gdW5kZWZpbmVkICYmICEoXCJ2ZXJzaW9uXCIgaW4gc2V0dGluZ3MpKSB7XG4gICAgICAgICAgICAvLzEuWCBzZXR0aW5ncztcbiAgICAgICAgICAgIHRoaXMuc2V0dGluZ3MgPSB7IC4uLkRFRkFVTFRfREFUQSB9O1xuICAgICAgICAgICAgdGhpcy5zZXR0aW5ncy5tb25zdGVycyA9IHNldHRpbmdzO1xuXG4gICAgICAgICAgICBhd2FpdCB0aGlzLmxvYWRNb25zdGVyRGF0YSgpO1xuXG4gICAgICAgICAgICBuZXcgTm90aWNlKFxuICAgICAgICAgICAgICAgIFwiNWUgU3RhdGJsb2NrcyBpcyBub3cgVFRSUEcgU3RhdGJsb2Nrcy4gQ2hlY2sgb3V0IHRoZSBSZWFkTWUgZm9yIG1vcmUgaW5mb3JtYXRpb24hXCJcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNldHRpbmdzID0ge1xuICAgICAgICAgICAgICAgIC4uLkRFRkFVTFRfREFUQSxcbiAgICAgICAgICAgICAgICAuLi5zZXR0aW5nc1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB2ZXJzaW9uID0gdGhpcy5tYW5pZmVzdC52ZXJzaW9uLnNwbGl0KFwiLlwiKTtcbiAgICAgICAgdGhpcy5zZXR0aW5ncy52ZXJzaW9uID0ge1xuICAgICAgICAgICAgbWFqb3I6IE51bWJlcih2ZXJzaW9uWzBdKSxcbiAgICAgICAgICAgIG1pbm9yOiBOdW1iZXIodmVyc2lvblsxXSksXG4gICAgICAgICAgICBwYXRjaDogTnVtYmVyKHZlcnNpb25bMl0pXG4gICAgICAgIH07XG4gICAgfVxuICAgIGFzeW5jIHNhdmVTZXR0aW5ncygpIHtcbiAgICAgICAgdGhpcy5zZXR0aW5ncy5tb25zdGVycyA9IHRoaXMuX3RyYW5zZm9ybURhdGEodGhpcy5kYXRhKTtcbiAgICAgICAgdGhpcy5iZXN0aWFyeSA9IG5ldyBNYXAoW1xuICAgICAgICAgICAgLi4uZ2V0QmVzdGlhcnlCeU5hbWUodGhpcy5zZXR0aW5ncy5kaXNhYmxlU1JEKSxcbiAgICAgICAgICAgIC4uLnRoaXMuZGF0YVxuICAgICAgICBdKTtcblxuICAgICAgICBhd2FpdCB0aGlzLnNhdmVEYXRhKHRoaXMuc2V0dGluZ3MpO1xuICAgIH1cbiAgICBhc3luYyBsb2FkTW9uc3RlckRhdGEoKSB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSB0aGlzLnNldHRpbmdzLm1vbnN0ZXJzO1xuXG4gICAgICAgIGlmICghZGF0YSkgdGhpcy5kYXRhID0gbmV3IE1hcCgpO1xuXG4gICAgICAgIHRoaXMuZGF0YSA9IG5ldyBNYXAoXG4gICAgICAgICAgICBkYXRhPy5tYXAoKFtuYW1lLCBtb25zdGVyXSkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiBbbmFtZSwgZmFzdENvcHkobW9uc3RlcildO1xuICAgICAgICAgICAgfSkgPz8gW11cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBhc3luYyBzYXZlTW9uc3RlcihcbiAgICAgICAgbW9uc3RlcjogTW9uc3RlcixcbiAgICAgICAgc29ydEZpZWxkczogYm9vbGVhbiA9IHRydWUsXG4gICAgICAgIHNhdmU6IGJvb2xlYW4gPSB0cnVlXG4gICAgKSB7XG4gICAgICAgIGlmICghbW9uc3Rlci5uYW1lKSByZXR1cm47XG4gICAgICAgIHRoaXMuZGF0YS5zZXQobW9uc3Rlci5uYW1lLCBtb25zdGVyKTtcbiAgICAgICAgdGhpcy5iZXN0aWFyeS5zZXQobW9uc3Rlci5uYW1lLCBtb25zdGVyKTtcbiAgICAgICAgdGhpcy5uYW1lc0hhdmVDaGFuZ2VkID0gdHJ1ZTtcblxuICAgICAgICBpZiAoc2F2ZSkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzb3J0RmllbGRzKVxuICAgICAgICAgICAgdGhpcy5fc29ydGVkID0gc29ydDxNb25zdGVyPihBcnJheS5mcm9tKHRoaXMuZGF0YS52YWx1ZXMoKSkpLmFzYyhcbiAgICAgICAgICAgICAgICAobSkgPT4gbS5uYW1lXG4gICAgICAgICAgICApO1xuICAgIH1cbiAgICBhc3luYyBzYXZlTW9uc3RlcnMobW9uc3RlcnM6IE1vbnN0ZXJbXSkge1xuICAgICAgICBmb3IgKGxldCBtb25zdGVyIG9mIG1vbnN0ZXJzKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnNhdmVNb25zdGVyKG1vbnN0ZXIsIGZhbHNlLCBmYWxzZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fc29ydGVkID0gc29ydDxNb25zdGVyPihBcnJheS5mcm9tKHRoaXMuZGF0YS52YWx1ZXMoKSkpLmFzYyhcbiAgICAgICAgICAgIChtKSA9PiBtLm5hbWVcbiAgICAgICAgKTtcbiAgICAgICAgYXdhaXQgdGhpcy5zYXZlU2V0dGluZ3MoKTtcbiAgICB9XG5cbiAgICBhc3luYyB1cGRhdGVNb25zdGVyKG9sZE1vbnN0ZXI6IE1vbnN0ZXIsIG5ld01vbnN0ZXI6IE1vbnN0ZXIpIHtcbiAgICAgICAgdGhpcy5kYXRhLmRlbGV0ZShvbGRNb25zdGVyLm5hbWUpO1xuICAgICAgICBhd2FpdCB0aGlzLnNhdmVNb25zdGVyKG5ld01vbnN0ZXIpO1xuICAgIH1cblxuICAgIGFzeW5jIGRlbGV0ZU1vbnN0ZXJzKC4uLm1vbnN0ZXJzOiBzdHJpbmdbXSkge1xuICAgICAgICBmb3IgKGNvbnN0IG1vbnN0ZXIgb2YgbW9uc3RlcnMpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5kYXRhLmhhcyhtb25zdGVyKSkgY29udGludWU7XG4gICAgICAgICAgICB0aGlzLmRhdGEuZGVsZXRlKG1vbnN0ZXIpO1xuICAgICAgICAgICAgdGhpcy5iZXN0aWFyeS5kZWxldGUobW9uc3Rlcik7XG4gICAgICAgICAgICB0aGlzLm5hbWVzSGF2ZUNoYW5nZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGF3YWl0IHRoaXMuc2F2ZVNldHRpbmdzKCk7XG5cbiAgICAgICAgdGhpcy5fc29ydGVkID0gc29ydDxNb25zdGVyPihBcnJheS5mcm9tKHRoaXMuZGF0YS52YWx1ZXMoKSkpLmFzYyhcbiAgICAgICAgICAgIChtKSA9PiBtLm5hbWVcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBhc3luYyBkZWxldGVNb25zdGVyKG1vbnN0ZXI6IHN0cmluZywgc29ydEZpZWxkcyA9IHRydWUsIHNhdmUgPSB0cnVlKSB7XG4gICAgICAgIGlmICghdGhpcy5kYXRhLmhhcyhtb25zdGVyKSkgcmV0dXJuO1xuICAgICAgICB0aGlzLmRhdGEuZGVsZXRlKG1vbnN0ZXIpO1xuICAgICAgICB0aGlzLmJlc3RpYXJ5LmRlbGV0ZShtb25zdGVyKTtcblxuICAgICAgICBpZiAoZ2V0QmVzdGlhcnlCeU5hbWUodGhpcy5zZXR0aW5ncy5kaXNhYmxlU1JEKS5oYXMobW9uc3RlcikpIHtcbiAgICAgICAgICAgIHRoaXMuYmVzdGlhcnkuc2V0KFxuICAgICAgICAgICAgICAgIG1vbnN0ZXIsXG4gICAgICAgICAgICAgICAgZ2V0QmVzdGlhcnlCeU5hbWUodGhpcy5zZXR0aW5ncy5kaXNhYmxlU1JEKS5nZXQobW9uc3RlcilcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5uYW1lc0hhdmVDaGFuZ2VkID0gdHJ1ZTtcblxuICAgICAgICBpZiAoc2F2ZSkgYXdhaXQgdGhpcy5zYXZlU2V0dGluZ3MoKTtcblxuICAgICAgICBpZiAoc29ydEZpZWxkcylcbiAgICAgICAgICAgIHRoaXMuX3NvcnRlZCA9IHNvcnQ8TW9uc3Rlcj4oQXJyYXkuZnJvbSh0aGlzLmRhdGEudmFsdWVzKCkpKS5hc2MoXG4gICAgICAgICAgICAgICAgKG0pID0+IG0ubmFtZVxuICAgICAgICAgICAgKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIF90cmFuc2Zvcm1EYXRhKFxuICAgICAgICBkYXRhOiBNYXA8c3RyaW5nLCBNb25zdGVyPlxuICAgICk6IEFycmF5PFtzdHJpbmcsIE1vbnN0ZXJdPiB7XG4gICAgICAgIHJldHVybiBbLi4uKGRhdGEgPz8gW10pXS5tYXAoKFtuYW1lLCBtb25zdGVyXSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIFtuYW1lLCBmYXN0Q29weShtb25zdGVyKV07XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBvbnVubG9hZCgpIHtcbiAgICAgICAgLy9AdHMtaWdub3JlXG4gICAgICAgIGRlbGV0ZSB3aW5kb3cuYmVzdGlhcnk7XG4gICAgICAgIHRoaXMud2F0Y2hlci51bmxvYWQoKTtcbiAgICAgICAgY29uc29sZS5sb2coXCJUVFJQRyBTdGF0QmxvY2tzIHVubG9hZGVkXCIpO1xuICAgIH1cblxuICAgIGV4cG9ydEFzUG5nKG5hbWU6IHN0cmluZywgY29udGFpbmVyRWw6IEVsZW1lbnQpIHtcbiAgICAgICAgZnVuY3Rpb24gZmlsdGVyKG5vZGU6IEhUTUxFbGVtZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gIW5vZGUuaGFzQ2xhc3MgfHwgIW5vZGUuaGFzQ2xhc3MoXCJjbGlja2FibGUtaWNvblwiKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjb250ZW50ID1cbiAgICAgICAgICAgIGNvbnRhaW5lckVsLnF1ZXJ5U2VsZWN0b3I8SFRNTERpdkVsZW1lbnQ+KFwiLnN0YXRibG9jay1jb250ZW50XCIpO1xuICAgICAgICBpZiAoY29udGVudCkgZGVsZXRlIGNvbnRlbnQuc3R5bGVbXCJib3hTaGFkb3dcIl07XG4gICAgICAgIGRvbXRvaW1hZ2VcbiAgICAgICAgICAgIC50b1BuZyhjb250YWluZXJFbCwge1xuICAgICAgICAgICAgICAgIGZpbHRlcjogZmlsdGVyLFxuICAgICAgICAgICAgICAgIHN0eWxlOiB7IGhlaWdodDogXCIxMDAlXCIgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC50aGVuKCh1cmwpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFcIik7XG4gICAgICAgICAgICAgICAgbGluay5kb3dubG9hZCA9IG5hbWUgKyBcIi5wbmdcIjtcbiAgICAgICAgICAgICAgICBsaW5rLmhyZWYgPSB1cmw7XG4gICAgICAgICAgICAgICAgbGluay5jbGljaygpO1xuICAgICAgICAgICAgICAgIGxpbmsuZGV0YWNoKCk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmNhdGNoKChlKSA9PiB7XG4gICAgICAgICAgICAgICAgbmV3IE5vdGljZShcbiAgICAgICAgICAgICAgICAgICAgYFRoZXJlIHdhcyBhbiBlcnJvciBjcmVhdGluZyB0aGUgaW1hZ2U6IFxcblxcbiR7ZS5tZXNzYWdlfWBcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwYXJzZUZvckRpY2UocHJvcGVydHk6IHN0cmluZykge1xuICAgICAgICBjb25zdCByb2xsZXIgPSAoc3RyOiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgIGxldCB0ZXh0OiBzdHJpbmc7XG4gICAgICAgICAgICBsZXQgb3JpZ2luYWw6IHN0cmluZztcbiAgICAgICAgICAgIGlmICgvXFx3KyBbXFwrXFwtXVxcZCsvLnRlc3Qoc3RyLnRyaW0oKSkpIHtcbiAgICAgICAgICAgICAgICBsZXQgWywgc2F2ZSwgc2lnbiwgbnVtYmVyXSA9XG4gICAgICAgICAgICAgICAgICAgIHN0ci5tYXRjaCgvKFxcdysgKShbXFwrXFwtXSkoXFxkKykvKSA/PyBbXTtcbiAgICAgICAgICAgICAgICBsZXQgbXVsdCA9IDE7XG4gICAgICAgICAgICAgICAgaWYgKHNpZ24gPT09IFwiLVwiKSB7XG4gICAgICAgICAgICAgICAgICAgIG11bHQgPSAtMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFpc05hTihOdW1iZXIobnVtYmVyKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGV4dCA9IGAxZDIwKyR7bXVsdCAqIE51bWJlcihudW1iZXIpfWA7XG4gICAgICAgICAgICAgICAgICAgIG9yaWdpbmFsID0gYCR7c2F2ZX0gJHtzaWdufSR7bnVtYmVyfWA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmICgvW1xcK1xcLV1cXGQrIHRvIGhpdC8udGVzdChzdHIudHJpbSgpKSkge1xuICAgICAgICAgICAgICAgIGxldCBbLCBzaWduLCBudW1iZXJdID0gc3RyLm1hdGNoKC8oW1xcK1xcLV0pKFxcZCspLykgPz8gW107XG5cbiAgICAgICAgICAgICAgICBsZXQgbXVsdCA9IDE7XG4gICAgICAgICAgICAgICAgaWYgKHNpZ24gPT09IFwiLVwiKSB7XG4gICAgICAgICAgICAgICAgICAgIG11bHQgPSAtMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFpc05hTihOdW1iZXIobnVtYmVyKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGV4dCA9IGAxZDIwKyR7bXVsdCAqIE51bWJlcihudW1iZXIpfWA7XG4gICAgICAgICAgICAgICAgICAgIG9yaWdpbmFsID0gc3RyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoL1xcZCtcXHNcXChcXGQrZFxcZCsoPzpcXHMqWytcXC1dXFxzKlxcZCspP1xcKS8udGVzdChzdHIudHJpbSgpKSkge1xuICAgICAgICAgICAgICAgIGxldCBbLCBiYXNlLCBkaWNlXSA9XG4gICAgICAgICAgICAgICAgICAgIHN0ci5tYXRjaCgvKFxcZCspXFxzXFwoKFxcZCtkXFxkKyg/OlxccypbK1xcLV1cXHMqXFxkKyk/KVxcKS8pID8/IFtdO1xuICAgICAgICAgICAgICAgIGlmICghaXNOYU4oTnVtYmVyKGJhc2UpKSAmJiBkaWNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRleHQgPSBkaWNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB7IHRleHQsIG9yaWdpbmFsIH07XG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgbWF0Y2ggPSAoc3RyOiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgL1xcdysgW1xcK1xcLV1cXGQrLy50ZXN0KHN0ci50cmltKCkpIHx8XG4gICAgICAgICAgICAgICAgL1tcXCtcXC1dXFxkKyB0byBoaXQvLnRlc3Qoc3RyLnRyaW0oKSkgfHxcbiAgICAgICAgICAgICAgICAvXFxkK1xcc1xcKFxcZCtkXFxkKyg/OlxccypbK1xcLV1cXHMqXFxkKyk/XFwpLy50ZXN0KHN0ci50cmltKCkpXG4gICAgICAgICAgICApO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBwcm9wZXJ0eVxuICAgICAgICAgICAgLnNwbGl0KFxuICAgICAgICAgICAgICAgIC8oW1xcK1xcLV1cXGQrIHRvIGhpdHxcXGQrXFxzXFwoXFxkK2RcXGQrKD86XFxzKlsrXFwtXVxccypcXGQrKT9cXCl8XFx3KyBbXFwrXFwtXVxcZCspL1xuICAgICAgICAgICAgKVxuICAgICAgICAgICAgLm1hcCgodikgPT4gKG1hdGNoKHYpID8gcm9sbGVyKHYpIDogdikpO1xuICAgIH1cblxuICAgIGdldCBkZWZhdWx0TGF5b3V0KCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgdGhpcy5zZXR0aW5ncy5sYXlvdXRzPy5maW5kKFxuICAgICAgICAgICAgICAgIChsYXlvdXQpID0+IGxheW91dC5uYW1lID09IHRoaXMuc2V0dGluZ3MuZGVmYXVsdFxuICAgICAgICAgICAgKSA/PyBMYXlvdXQ1ZVxuICAgICAgICApO1xuICAgIH1cblxuICAgIGFzeW5jIHBvc3Rwcm9jZXNzb3IoXG4gICAgICAgIHNvdXJjZTogc3RyaW5nLFxuICAgICAgICBlbDogSFRNTEVsZW1lbnQsXG4gICAgICAgIGN0eDogTWFya2Rvd25Qb3N0UHJvY2Vzc29yQ29udGV4dFxuICAgICkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLyoqIFJlcGxhY2UgTGlua3MgKi9cbiAgICAgICAgICAgIHNvdXJjZSA9IHNvdXJjZVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKFxuICAgICAgICAgICAgICAgICAgICAvXmltYWdlOiAoPzpcXFtcXFsoW1xcc1xcU10rPylcXF1cXF18XFxbW1xcc1xcU10qP1xcXVxcKChbXFxzXFxTXSs/KVxcKSlcXG4vZ20sXG4gICAgICAgICAgICAgICAgICAgIChfLCB3aWtpOiBzdHJpbmcsIG1hcms6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hcms/Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBgaW1hZ2U6ICR7bWFya31cXG5gO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGBpbWFnZTogJHt3aWtpfVxcbmA7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoXG4gICAgICAgICAgICAgICAgICAgIC9cXFtcXFsoW1xcc1xcU10rPylcXF1cXF0vZyxcbiAgICAgICAgICAgICAgICAgICAgYDxTVEFUQkxPQ0stTElOSz4kMTwvU1RBVEJMT0NLLUxJTks+YFxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAucmVwbGFjZShcbiAgICAgICAgICAgICAgICAgICAgL1xcWyhbXFxzXFxTXSo/KVxcXVxcKChbXFxzXFxTXSs/KVxcKS9nLFxuICAgICAgICAgICAgICAgICAgICAoXywgYWxpYXM6IHN0cmluZywgcGF0aDogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWxpYXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGA8U1RBVEJMT0NLLUxJTks+JHtwYXRofXwke2FsaWFzfTwvU1RBVEJMT0NLLUxJTks+YDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBgPFNUQVRCTE9DSy1MSU5LPiR7cGF0aH08L1NUQVRCTE9DSy1MSU5LPmA7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAvKiogR2V0IFBhcmFtZXRlcnMgKi9cbiAgICAgICAgICAgIGxldCBwYXJhbXM6IFN0YXRibG9ja1BhcmFtZXRlcnMgPSBwYXJzZVlhbWwoc291cmNlKTtcblxuICAgICAgICAgICAgLy9yZXBsYWNlIGVzY2FwZXNcbiAgICAgICAgICAgIHBhcmFtcyA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkocGFyYW1zKS5yZXBsYWNlKC9cXFxcIy9nLCBcIiNcIikpO1xuICAgICAgICAgICAgY29uc3QgY2FuU2F2ZSA9IHBhcmFtcyAmJiBcIm5hbWVcIiBpbiBwYXJhbXM7XG5cbiAgICAgICAgICAgIGlmICghcGFyYW1zIHx8ICFPYmplY3QudmFsdWVzKHBhcmFtcyA/PyB7fSkubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgcGFyYW1zID0gT2JqZWN0LmFzc2lnbih7fSwgcGFyYW1zLCB7IG5vdGU6IGN0eC5zb3VyY2VQYXRoIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHBhcmFtcy5ub3RlKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgbm90ZSA9IEFycmF5LmlzQXJyYXkocGFyYW1zLm5vdGUpXG4gICAgICAgICAgICAgICAgICAgID8gKDxzdHJpbmdbXT5wYXJhbXMubm90ZSkuZmxhdChJbmZpbml0eSkucG9wKClcbiAgICAgICAgICAgICAgICAgICAgOiBwYXJhbXMubm90ZTtcbiAgICAgICAgICAgICAgICBjb25zdCBmaWxlID0gYXdhaXQgdGhpcy5hcHAubWV0YWRhdGFDYWNoZS5nZXRGaXJzdExpbmtwYXRoRGVzdChcbiAgICAgICAgICAgICAgICAgICAgYCR7bm90ZX1gLFxuICAgICAgICAgICAgICAgICAgICBjdHguc291cmNlUGF0aFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgaWYgKGZpbGUgJiYgZmlsZSBpbnN0YW5jZW9mIFRGaWxlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNhY2hlID0gYXdhaXQgdGhpcy5hcHAubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUoXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxlXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24ocGFyYW1zLCBmYXN0Q29weShjYWNoZS5mcm9udG1hdHRlcikgPz8ge30pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IG1vbnN0ZXI6IE1vbnN0ZXIgPSBPYmplY3QuYXNzaWduKFxuICAgICAgICAgICAgICAgIHt9LFxuICAgICAgICAgICAgICAgIHRoaXMuYmVzdGlhcnkuZ2V0KHBhcmFtcy5tb25zdGVyKSA/P1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmJlc3RpYXJ5LmdldChwYXJhbXMuY3JlYXR1cmUpXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgLy9UT0RPOiBUaGUgdHJhaXRzIGFyZSBicmVha2luZyBiZWNhdXNlIGl0IGV4cGVjdHMgeyBuYW1lLCBkZXNjIH0sIG5vdCBhcnJheS5cbiAgICAgICAgICAgIGlmIChtb25zdGVyKSB7XG4gICAgICAgICAgICAgICAgbGV0IHRyYWl0cyA9IHRyYW5zZm9ybVRyYWl0cyhcbiAgICAgICAgICAgICAgICAgICAgbW9uc3Rlci50cmFpdHMgPz8gW10sXG4gICAgICAgICAgICAgICAgICAgIHBhcmFtcy50cmFpdHMgPz8gW11cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGxldCBhY3Rpb25zID0gdHJhbnNmb3JtVHJhaXRzKFxuICAgICAgICAgICAgICAgICAgICBtb25zdGVyLmFjdGlvbnMgPz8gW10sXG4gICAgICAgICAgICAgICAgICAgIHBhcmFtcy5hY3Rpb25zID8/IFtdXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBsZXQgYm9udXNfYWN0aW9ucyA9IHRyYW5zZm9ybVRyYWl0cyhcbiAgICAgICAgICAgICAgICAgICAgbW9uc3Rlci5ib251c19hY3Rpb25zID8/IFtdLFxuICAgICAgICAgICAgICAgICAgICBwYXJhbXMuYm9udXNfYWN0aW9ucyA/PyBbXVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgbGV0IGxlZ2VuZGFyeV9hY3Rpb25zID0gdHJhbnNmb3JtVHJhaXRzKFxuICAgICAgICAgICAgICAgICAgICBtb25zdGVyLmxlZ2VuZGFyeV9hY3Rpb25zID8/IFtdLFxuICAgICAgICAgICAgICAgICAgICBwYXJhbXMubGVnZW5kYXJ5X2FjdGlvbnMgPz8gW11cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGxldCByZWFjdGlvbnMgPSB0cmFuc2Zvcm1UcmFpdHMoXG4gICAgICAgICAgICAgICAgICAgIG1vbnN0ZXIucmVhY3Rpb25zID8/IFtdLFxuICAgICAgICAgICAgICAgICAgICBwYXJhbXMucmVhY3Rpb25zID8/IFtdXG4gICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24ocGFyYW1zLCB7XG4gICAgICAgICAgICAgICAgICAgIHRyYWl0cyxcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9ucyxcbiAgICAgICAgICAgICAgICAgICAgYm9udXNfYWN0aW9ucyxcbiAgICAgICAgICAgICAgICAgICAgcmVhY3Rpb25zLFxuICAgICAgICAgICAgICAgICAgICBsZWdlbmRhcnlfYWN0aW9uc1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoXCJpbWFnZVwiIGluIHBhcmFtcykge1xuICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHBhcmFtcy5pbWFnZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1zLmltYWdlID0gcGFyYW1zLmltYWdlLmZsYXQoMikuam9pbihcIlwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICBcInNhdmVzXCIgaW4gcGFyYW1zICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIHBhcmFtcy5zYXZlcyA9PSBcIm9iamVjdFwiICYmXG4gICAgICAgICAgICAgICAgIUFycmF5LmlzQXJyYXkocGFyYW1zLnNhdmVzKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgcGFyYW1zLnNhdmVzID0gT2JqZWN0LmVudHJpZXMocGFyYW1zLnNhdmVzKS5tYXAoKGEpID0+XG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5mcm9tRW50cmllcyhbYV0pXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICBcInNraWxsc2F2ZXNcIiBpbiBwYXJhbXMgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgcGFyYW1zLnNraWxsc2F2ZXMgPT0gXCJvYmplY3RcIiAmJlxuICAgICAgICAgICAgICAgICFBcnJheS5pc0FycmF5KHBhcmFtcy5za2lsbHNhdmVzKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgcGFyYW1zLnNraWxsc2F2ZXMgPSBPYmplY3QuZW50cmllcyhwYXJhbXMuc2tpbGxzYXZlcykubWFwKChhKSA9PlxuICAgICAgICAgICAgICAgICAgICBPYmplY3QuZnJvbUVudHJpZXMoW2FdKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB0b0J1aWxkOiBNb25zdGVyID0gT2JqZWN0LmFzc2lnbihcbiAgICAgICAgICAgICAgICB7fSxcbiAgICAgICAgICAgICAgICBtb25zdGVyID8/IHt9LFxuICAgICAgICAgICAgICAgIHBhcmFtcyA/PyB7fVxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgbGV0IGxheW91dCA9XG4gICAgICAgICAgICAgICAgdGhpcy5zZXR0aW5ncy5sYXlvdXRzLmZpbmQoXG4gICAgICAgICAgICAgICAgICAgIChsYXlvdXQpID0+XG4gICAgICAgICAgICAgICAgICAgICAgICBsYXlvdXQubmFtZSA9PSB0b0J1aWxkPy5sYXlvdXQgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxheW91dC5uYW1lID09IHRvQnVpbGQ/LnN0YXRibG9ja1xuICAgICAgICAgICAgICAgICkgPz8gdGhpcy5kZWZhdWx0TGF5b3V0O1xuXG4gICAgICAgICAgICBlbC5hZGRDbGFzcyhcInN0YXRibG9jay1wbHVnaW4tY29udGFpbmVyXCIpO1xuICAgICAgICAgICAgZWwucGFyZW50RWxlbWVudD8uYWRkQ2xhc3MoXCJzdGF0YmxvY2stcGx1Z2luLXBhcmVudFwiKTtcbiAgICAgICAgICAgIGNvbnN0IHRvQnVpbGRXaXRoTGlua3NSZXBsYWNlZCA9IEpTT04ucGFyc2UoXG4gICAgICAgICAgICAgICAgSlNPTi5zdHJpbmdpZnkodG9CdWlsZClcbiAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoXG4gICAgICAgICAgICAgICAgICAgICAgICAvXFxbXFxbXCIoLis/KVwiXFxdXFxdL2csXG4gICAgICAgICAgICAgICAgICAgICAgICBgXCI8U1RBVEJMT0NLLUxJTks+JDE8L1NUQVRCTE9DSy1MSU5LPlwiYFxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXFtcXFsoW15cIl0rPylcXF1cXF0vZywgKG1hdGNoLCBwMSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGA8U1RBVEJMT0NLLUxJTks+JHtwMX08L1NUQVRCTE9DSy1MSU5LPmA7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKFxuICAgICAgICAgICAgICAgICAgICAgICAgL1xcWyhbXlwiXSo/KVxcXVxcKChbXlwiXSs/KVxcKS9nLFxuICAgICAgICAgICAgICAgICAgICAgICAgKHMsIGFsaWFzOiBzdHJpbmcsIHBhdGg6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbGlhcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGA8U1RBVEJMT0NLLUxJTks+JHtwYXRofXwke2FsaWFzfTwvU1RBVEJMT0NLLUxJTks+YDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGA8U1RBVEJMT0NLLUxJTks+JHtwYXRofTwvU1RBVEJMT0NLLUxJTks+YDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgbGV0IHN0YXRibG9jayA9IG5ldyBTdGF0QmxvY2tSZW5kZXJlcihcbiAgICAgICAgICAgICAgICBlbCxcbiAgICAgICAgICAgICAgICB0b0J1aWxkV2l0aExpbmtzUmVwbGFjZWQsXG4gICAgICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgICAgICBjYW5TYXZlLFxuICAgICAgICAgICAgICAgIGN0eC5zb3VyY2VQYXRoLFxuICAgICAgICAgICAgICAgIGxheW91dFxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgY3R4LmFkZENoaWxkKHN0YXRibG9jayk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYE9ic2lkaWFuIFN0YXRibG9jayBFcnJvcjpcXG4ke2V9YCk7XG4gICAgICAgICAgICBsZXQgcHJlID0gY3JlYXRlRWwoXCJwcmVcIik7XG4gICAgICAgICAgICBwcmUuc2V0VGV4dChgXFxgXFxgXFxgc3RhdGJsb2NrXG5UaGVyZSB3YXMgYW4gZXJyb3IgcmVuZGVyaW5nIHRoZSBzdGF0YmxvY2s6XG4ke2Uuc3RhY2tcbiAgICAuc3BsaXQoXCJcXG5cIilcbiAgICAuZmlsdGVyKChsaW5lOiBzdHJpbmcpID0+ICEvXmF0Ly50ZXN0KGxpbmU/LnRyaW0oKSkpXG4gICAgLmpvaW4oXCJcXG5cIil9XG5cXGBcXGBcXGBgKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlbmRlcihjcmVhdHVyZTogSG9tZWJyZXdDcmVhdHVyZSwgZWw6IEhUTUxFbGVtZW50LCBkaXNwbGF5Pzogc3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IG1vbnN0ZXI6IE1vbnN0ZXIgPSBPYmplY3QuYXNzaWduPFxuICAgICAgICAgICAgUGFydGlhbDxNb25zdGVyPixcbiAgICAgICAgICAgIEhvbWVicmV3Q3JlYXR1cmVcbiAgICAgICAgPih0aGlzLmJlc3RpYXJ5LmdldChjcmVhdHVyZS5uYW1lKSA/PyB7fSwgeyAuLi5jcmVhdHVyZSB9KSBhcyBNb25zdGVyO1xuICAgICAgICBpZiAoIW1vbnN0ZXIpIHJldHVybiBudWxsO1xuICAgICAgICBpZiAoZGlzcGxheSkge1xuICAgICAgICAgICAgbW9uc3Rlci5uYW1lID0gZGlzcGxheTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0b0J1aWxkV2l0aExpbmtzUmVwbGFjZWQgPSBKU09OLnBhcnNlKFxuICAgICAgICAgICAgSlNPTi5zdHJpbmdpZnkobW9uc3RlcilcbiAgICAgICAgICAgICAgICAucmVwbGFjZShcbiAgICAgICAgICAgICAgICAgICAgL1xcW1xcW1wiKC4rPylcIlxcXVxcXS9nLFxuICAgICAgICAgICAgICAgICAgICBgXCI8U1RBVEJMT0NLLUxJTks+JDE8L1NUQVRCTE9DSy1MSU5LPlwiYFxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFxbXFxbKFteXCJdKz8pXFxdXFxdL2csIChtYXRjaCwgcDEpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGA8U1RBVEJMT0NLLUxJTks+JHtwMX08L1NUQVRCTE9DSy1MSU5LPmA7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAucmVwbGFjZShcbiAgICAgICAgICAgICAgICAgICAgL1xcWyhbXlwiXSo/KVxcXVxcKChbXlwiXSs/KVxcKS9nLFxuICAgICAgICAgICAgICAgICAgICAocywgYWxpYXM6IHN0cmluZywgcGF0aDogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWxpYXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGA8U1RBVEJMT0NLLUxJTks+JHtwYXRofXwke2FsaWFzfTwvU1RBVEJMT0NLLUxJTks+YDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBgPFNUQVRCTE9DSy1MSU5LPiR7cGF0aH08L1NUQVRCTE9DSy1MSU5LPmA7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgICAgIGNvbnNvbGUubG9nKFxuICAgICAgICAgICAgXCJcdUQ4M0RcdURFODAgfiBmaWxlOiBtYWluLnRzIH4gbGluZSA2MjIgfiB0b0J1aWxkV2l0aExpbmtzUmVwbGFjZWRcIixcbiAgICAgICAgICAgIHRvQnVpbGRXaXRoTGlua3NSZXBsYWNlZFxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gbmV3IFN0YXRCbG9ja1JlbmRlcmVyKFxuICAgICAgICAgICAgZWwsXG4gICAgICAgICAgICB0b0J1aWxkV2l0aExpbmtzUmVwbGFjZWQsXG4gICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBcIlwiLFxuICAgICAgICAgICAgdGhpcy5nZXRMYXlvdXRPckRlZmF1bHQobW9uc3RlcilcbiAgICAgICAgKTtcbiAgICB9XG4gICAgZ2V0TGF5b3V0T3JEZWZhdWx0KG1vbnN0ZXI6IE1vbnN0ZXIpOiBMYXlvdXQge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgdGhpcy5zZXR0aW5ncy5sYXlvdXRzLmZpbmQoKGwpID0+IGwubmFtZSA9PSBtb25zdGVyPy5sYXlvdXQpID8/XG4gICAgICAgICAgICB0aGlzLmRlZmF1bHRMYXlvdXRcbiAgICAgICAgKTtcbiAgICB9XG59XG4iLCAiLyoqIFwiT1BFTiBHQU1FIExJQ0VOU0UgVmVyc2lvbiAxLjBhXCJcbiAqICdUaGUgZm9sbG93aW5nIHRleHQgaXMgdGhlIHByb3BlcnR5IG9mIFdpemFyZHMgb2YgdGhlIENvYXN0LCBJbmMuIGFuZCBpcyBDb3B5cmlnaHQgMjAwMCBXaXphcmRzIG9mIHRoZSBDb2FzdCwgSW5jIChcIldpemFyZHNcIikuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuJ1xuICogICcxLiBEZWZpbml0aW9uczogKGEpXCJDb250cmlidXRvcnNcIiBtZWFucyB0aGUgY29weXJpZ2h0IGFuZC9vciB0cmFkZW1hcmsgb3duZXJzIHdobyBoYXZlIGNvbnRyaWJ1dGVkIE9wZW4gR2FtZSBDb250ZW50OyAoYilcIkRlcml2YXRpdmUgTWF0ZXJpYWxcIiBtZWFucyBjb3B5cmlnaHRlZCBtYXRlcmlhbCBpbmNsdWRpbmcgZGVyaXZhdGl2ZSB3b3JrcyBhbmQgdHJhbnNsYXRpb25zIChpbmNsdWRpbmcgaW50byBvdGhlciBjb21wdXRlciBsYW5ndWFnZXMpLCBwb3RhdGlvbiwgbW9kaWZpY2F0aW9uLCBjb3JyZWN0aW9uLCBhZGRpdGlvbiwgZXh0ZW5zaW9uLCB1cGdyYWRlLCBpbXByb3ZlbWVudCwgY29tcGlsYXRpb24sIGFicmlkZ21lbnQgb3Igb3RoZXIgZm9ybSBpbiB3aGljaCBhbiBleGlzdGluZyB3b3JrIG1heSBiZSByZWNhc3QsIHRyYW5zZm9ybWVkIG9yIGFkYXB0ZWQ7IChjKSBcIkRpc3RyaWJ1dGVcIiBtZWFucyB0byByZXByb2R1Y2UsIGxpY2Vuc2UsIHJlbnQsIGxlYXNlLCBzZWxsLCBicm9hZGNhc3QsIHB1YmxpY2x5IGRpc3BsYXksIHRyYW5zbWl0IG9yIG90aGVyd2lzZSBkaXN0cmlidXRlOyAoZClcIk9wZW4gR2FtZSBDb250ZW50XCIgbWVhbnMgdGhlIGdhbWUgbWVjaGFuaWMgYW5kIGluY2x1ZGVzIHRoZSBtZXRob2RzLCBwcm9jZWR1cmVzLCBwcm9jZXNzZXMgYW5kIHJvdXRpbmVzIHRvIHRoZSBleHRlbnQgc3VjaCBjb250ZW50IGRvZXMgbm90IGVtYm9keSB0aGUgUHJvZHVjdCBJZGVudGl0eSBhbmQgaXMgYW4gZW5oYW5jZW1lbnQgb3ZlciB0aGUgcHJpb3IgYXJ0IGFuZCBhbnkgYWRkaXRpb25hbCBjb250ZW50IGNsZWFybHkgaWRlbnRpZmllZCBhcyBPcGVuIEdhbWUgQ29udGVudCBieSB0aGUgQ29udHJpYnV0b3IsIGFuZCBtZWFucyBhbnkgd29yayBjb3ZlcmVkIGJ5IHRoaXMgTGljZW5zZSwgaW5jbHVkaW5nIHRyYW5zbGF0aW9ucyBhbmQgZGVyaXZhdGl2ZSB3b3JrcyB1bmRlciBjb3B5cmlnaHQgbGF3LCBidXQgc3BlY2lmaWNhbGx5IGV4Y2x1ZGVzIFByb2R1Y3QgSWRlbnRpdHkuIChlKSBcIlByb2R1Y3QgSWRlbnRpdHlcIiBtZWFucyBwcm9kdWN0IGFuZCBwcm9kdWN0IGxpbmUgbmFtZXMsIGxvZ29zIGFuZCBpZGVudGlmeWluZyBtYXJrcyBpbmNsdWRpbmcgdHJhZGUgZHJlc3M7IGFydGlmYWN0czsgY3JlYXR1cmVzIGNoYXJhY3RlcnM7IHN0b3JpZXMsIHN0b3J5bGluZXMsIHBsb3RzLCB0aGVtYXRpYyBlbGVtZW50cywgZGlhbG9ndWUsIGluY2lkZW50cywgbGFuZ3VhZ2UsIGFydHdvcmssIHN5bWJvbHMsIGRlc2lnbnMsIGRlcGljdGlvbnMsIGxpa2VuZXNzZXMsIGZvcm1hdHMsIHBvc2VzLCBjb25jZXB0cywgdGhlbWVzIGFuZCBncmFwaGljLCBwaG90b2dyYXBoaWMgYW5kIG90aGVyIHZpc3VhbCBvciBhdWRpbyByZXByZXNlbnRhdGlvbnM7IG5hbWVzIGFuZCBkZXNjcmlwdGlvbnMgb2YgY2hhcmFjdGVycywgc3BlbGxzLCBlbmNoYW50bWVudHMsIHBlcnNvbmFsaXRpZXMsIHRlYW1zLCBwZXJzb25hcywgbGlrZW5lc3NlcyBhbmQgc3BlY2lhbCBhYmlsaXRpZXM7IHBsYWNlcywgbG9jYXRpb25zLCBlbnZpcm9ubWVudHMsIGNyZWF0dXJlcywgZXF1aXBtZW50LCBtYWdpY2FsIG9yIHN1cGVybmF0dXJhbCBhYmlsaXRpZXMgb3IgZWZmZWN0cywgbG9nb3MsIHN5bWJvbHMsIG9yIGdyYXBoaWMgZGVzaWduczsgYW5kIGFueSBvdGhlciB0cmFkZW1hcmsgb3IgcmVnaXN0ZXJlZCB0cmFkZW1hcmsgY2xlYXJseSBpZGVudGlmaWVkIGFzIFByb2R1Y3QgaWRlbnRpdHkgYnkgdGhlIG93bmVyIG9mIHRoZSBQcm9kdWN0IElkZW50aXR5LCBhbmQgd2hpY2ggc3BlY2lmaWNhbGx5IGV4Y2x1ZGVzIHRoZSBPcGVuIEdhbWUgQ29udGVudDsgKGYpIFwiVHJhZGVtYXJrXCIgbWVhbnMgdGhlIGxvZ29zLCBuYW1lcywgbWFyaywgc2lnbiwgbW90dG8sIGRlc2lnbnMgdGhhdCBhcmUgdXNlZCBieSBhIENvbnRyaWJ1dG9yIHRvIGlkZW50aWZ5IGl0c2VsZiBvciBpdHMgcHJvZHVjdHMgb3IgdGhlIGFzc29jaWF0ZWQgcHJvZHVjdHMgY29udHJpYnV0ZWQgdG8gdGhlIE9wZW4gR2FtZSBMaWNlbnNlIGJ5IHRoZSBDb250cmlidXRvciAoZykgXCJVc2VcIiwgXCJVc2VkXCIgb3IgXCJVc2luZ1wiIG1lYW5zIHRvIHVzZSwgRGlzdHJpYnV0ZSwgY29weSwgZWRpdCwgZm9ybWF0LCBtb2RpZnksIHRyYW5zbGF0ZSBhbmQgb3RoZXJ3aXNlIGNyZWF0ZSBEZXJpdmF0aXZlIE1hdGVyaWFsIG9mIE9wZW4gR2FtZSBDb250ZW50LiAoaCkgXCJZb3VcIiBvciBcIllvdXJcIiBtZWFucyB0aGUgbGljZW5zZWUgaW4gdGVybXMgb2YgdGhpcyBhZ3JlZW1lbnQuJ1xuICogIFwiMi4gVGhlIExpY2Vuc2U6IFRoaXMgTGljZW5zZSBhcHBsaWVzIHRvIGFueSBPcGVuIEdhbWUgQ29udGVudCB0aGF0IGNvbnRhaW5zIGEgbm90aWNlIGluZGljYXRpbmcgdGhhdCB0aGUgT3BlbiBHYW1lIENvbnRlbnQgbWF5IG9ubHkgYmUgVXNlZCB1bmRlciBhbmQgaW4gdGVybXMgb2YgdGhpcyBMaWNlbnNlLiBZb3UgbXVzdCBhZmZpeCBzdWNoIGEgbm90aWNlIHRvIGFueSBPcGVuIEdhbWUgQ29udGVudCB0aGF0IHlvdSBVc2UuIE5vIHRlcm1zIG1heSBiZSBhZGRlZCB0byBvciBzdWJ0cmFjdGVkIGZyb20gdGhpcyBMaWNlbnNlIGV4Y2VwdCBhcyBkZXNjcmliZWQgYnkgdGhlIExpY2Vuc2UgaXRzZWxmLiBObyBvdGhlciB0ZXJtcyBvciBjb25kaXRpb25zIG1heSBiZSBhcHBsaWVkIHRvIGFueSBPcGVuIEdhbWUgQ29udGVudCBkaXN0cmlidXRlZCB1c2luZyB0aGlzIExpY2Vuc2UuXCJcbiAqICBcIjMuT2ZmZXIgYW5kIEFjY2VwdGFuY2U6IEJ5IFVzaW5nIHRoZSBPcGVuIEdhbWUgQ29udGVudCBZb3UgaW5kaWNhdGUgWW91ciBhY2NlcHRhbmNlIG9mIHRoZSB0ZXJtcyBvZiB0aGlzIExpY2Vuc2UuXCJcbiAqICBcIjQuIEdyYW50IGFuZCBDb25zaWRlcmF0aW9uOiBJbiBjb25zaWRlcmF0aW9uIGZvciBhZ3JlZWluZyB0byB1c2UgdGhpcyBMaWNlbnNlLCB0aGUgQ29udHJpYnV0b3JzIGdyYW50IFlvdSBhIHBlcnBldHVhbCwgd29ybGR3aWRlLCByb3lhbHR5LWZyZWUsIG5vbi1leGNsdXNpdmUgbGljZW5zZSB3aXRoIHRoZSBleGFjdCB0ZXJtcyBvZiB0aGlzIExpY2Vuc2UgdG8gVXNlLCB0aGUgT3BlbiBHYW1lIENvbnRlbnQuXCJcbiAqICBcIjUuUmVwcmVzZW50YXRpb24gb2YgQXV0aG9yaXR5IHRvIENvbnRyaWJ1dGU6IElmIFlvdSBhcmUgY29udHJpYnV0aW5nIG9yaWdpbmFsIG1hdGVyaWFsIGFzIE9wZW4gR2FtZSBDb250ZW50LCBZb3UgcmVwcmVzZW50IHRoYXQgWW91ciBDb250cmlidXRpb25zIGFyZSBZb3VyIG9yaWdpbmFsIGNyZWF0aW9uIGFuZC9vciBZb3UgaGF2ZSBzdWZmaWNpZW50IHJpZ2h0cyB0byBncmFudCB0aGUgcmlnaHRzIGNvbnZleWVkIGJ5IHRoaXMgTGljZW5zZS5cIlxuICogIFwiNi5Ob3RpY2Ugb2YgTGljZW5zZSBDb3B5cmlnaHQ6IFlvdSBtdXN0IHVwZGF0ZSB0aGUgQ09QWVJJR0hUIE5PVElDRSBwb3J0aW9uIG9mIHRoaXMgTGljZW5zZSB0byBpbmNsdWRlIHRoZSBleGFjdCB0ZXh0IG9mIHRoZSBDT1BZUklHSFQgTk9USUNFIG9mIGFueSBPcGVuIEdhbWUgQ29udGVudCBZb3UgYXJlIGNvcHlpbmcsIG1vZGlmeWluZyBvciBkaXN0cmlidXRpbmcsIGFuZCBZb3UgbXVzdCBhZGQgdGhlIHRpdGxlLCB0aGUgY29weXJpZ2h0IGRhdGUsIGFuZCB0aGUgY29weXJpZ2h0IGhvbGRlcidzIG5hbWUgdG8gdGhlIENPUFlSSUdIVCBOT1RJQ0Ugb2YgYW55IG9yaWdpbmFsIE9wZW4gR2FtZSBDb250ZW50IHlvdSBEaXN0cmlidXRlLlwiXG4gKiAgXCI3LiBVc2Ugb2YgUHJvZHVjdCBJZGVudGl0eTogWW91IGFncmVlIG5vdCB0byBVc2UgYW55IFByb2R1Y3QgSWRlbnRpdHksIGluY2x1ZGluZyBhcyBhbiBpbmRpY2F0aW9uIGFzIHRvIGNvbXBhdGliaWxpdHksIGV4Y2VwdCBhcyBleHByZXNzbHkgbGljZW5zZWQgaW4gYW5vdGhlciwgaW5kZXBlbmRlbnQgQWdyZWVtZW50IHdpdGggdGhlIG93bmVyIG9mIGVhY2ggZWxlbWVudCBvZiB0aGF0IFByb2R1Y3QgSWRlbnRpdHkuIFlvdSBhZ3JlZSBub3QgdG8gaW5kaWNhdGUgY29tcGF0aWJpbGl0eSBvciBjby1hZGFwdGFiaWxpdHkgd2l0aCBhbnkgVHJhZGVtYXJrIG9yIFJlZ2lzdGVyZWQgVHJhZGVtYXJrIGluIGNvbmp1bmN0aW9uIHdpdGggYSB3b3JrIGNvbnRhaW5pbmcgT3BlbiBHYW1lIENvbnRlbnQgZXhjZXB0IGFzIGV4cHJlc3NseSBsaWNlbnNlZCBpbiBhbm90aGVyLCBpbmRlcGVuZGVudCBBZ3JlZW1lbnQgd2l0aCB0aGUgb3duZXIgb2Ygc3VjaCBUcmFkZW1hcmsgb3IgUmVnaXN0ZXJlZCBUcmFkZW1hcmsuIFRoZSB1c2Ugb2YgYW55IFByb2R1Y3QgSWRlbnRpdHkgaW4gT3BlbiBHYW1lIENvbnRlbnQgZG9lcyBub3QgY29uc3RpdHV0ZSBhIGNoYWxsZW5nZSB0byB0aGUgb3duZXJzaGlwIG9mIHRoYXQgUHJvZHVjdCBJZGVudGl0eS4gVGhlIG93bmVyIG9mIGFueSBQcm9kdWN0IElkZW50aXR5IHVzZWQgaW4gT3BlbiBHYW1lIENvbnRlbnQgc2hhbGwgcmV0YWluIGFsbCByaWdodHMsIHRpdGxlIGFuZCBpbnRlcmVzdCBpbiBhbmQgdG8gdGhhdCBQcm9kdWN0IElkZW50aXR5LlwiXG4gKiAgXCI4LiBJZGVudGlmaWNhdGlvbjogSWYgeW91IGRpc3RyaWJ1dGUgT3BlbiBHYW1lIENvbnRlbnQgWW91IG11c3QgY2xlYXJseSBpbmRpY2F0ZSB3aGljaCBwb3J0aW9ucyBvZiB0aGUgd29yayB0aGF0IHlvdSBhcmUgZGlzdHJpYnV0aW5nIGFyZSBPcGVuIEdhbWUgQ29udGVudC5cIlxuICogIFwiOS4gVXBkYXRpbmcgdGhlIExpY2Vuc2U6IFdpemFyZHMgb3IgaXRzIGRlc2lnbmF0ZWQgQWdlbnRzIG1heSBwdWJsaXNoIHVwZGF0ZWQgdmVyc2lvbnMgb2YgdGhpcyBMaWNlbnNlLiBZb3UgbWF5IHVzZSBhbnkgYXV0aG9yaXplZCB2ZXJzaW9uIG9mIHRoaXMgTGljZW5zZSB0byBjb3B5LCBtb2RpZnkgYW5kIGRpc3RyaWJ1dGUgYW55IE9wZW4gR2FtZSBDb250ZW50IG9yaWdpbmFsbHkgZGlzdHJpYnV0ZWQgdW5kZXIgYW55IHZlcnNpb24gb2YgdGhpcyBMaWNlbnNlLlwiXG4gKiAgXCIxMCBDb3B5IG9mIHRoaXMgTGljZW5zZTogWW91IE1VU1QgaW5jbHVkZSBhIGNvcHkgb2YgdGhpcyBMaWNlbnNlIHdpdGggZXZlcnkgY29weSBvZiB0aGUgT3BlbiBHYW1lIENvbnRlbnQgWW91IERpc3RyaWJ1dGUuXCJcbiAqICBcIjExLiBVc2Ugb2YgQ29udHJpYnV0b3IgQ3JlZGl0czogWW91IG1heSBub3QgbWFya2V0IG9yIGFkdmVydGlzZSB0aGUgT3BlbiBHYW1lIENvbnRlbnQgdXNpbmcgdGhlIG5hbWUgb2YgYW55IENvbnRyaWJ1dG9yIHVubGVzcyBZb3UgaGF2ZSB3cml0dGVuIHBlcm1pc3Npb24gZnJvbSB0aGUgQ29udHJpYnV0b3IgdG8gZG8gc28uXCJcbiAqICBcIjEyIEluYWJpbGl0eSB0byBDb21wbHk6IElmIGl0IGlzIGltcG9zc2libGUgZm9yIFlvdSB0byBjb21wbHkgd2l0aCBhbnkgb2YgdGhlIHRlcm1zIG9mIHRoaXMgTGljZW5zZSB3aXRoIHJlc3BlY3QgdG8gc29tZSBvciBhbGwgb2YgdGhlIE9wZW4gR2FtZSBDb250ZW50IGR1ZSB0byBzdGF0dXRlLCBqdWRpY2lhbCBvcmRlciwgb3IgZ292ZXJubWVudGFsIHJlZ3VsYXRpb24gdGhlbiBZb3UgbWF5IG5vdCBVc2UgYW55IE9wZW4gR2FtZSBNYXRlcmlhbCBzbyBhZmZlY3RlZC5cIlxuICogIFwiMTMgVGVybWluYXRpb246IFRoaXMgTGljZW5zZSB3aWxsIHRlcm1pbmF0ZSBhdXRvbWF0aWNhbGx5IGlmIFlvdSBmYWlsIHRvIGNvbXBseSB3aXRoIGFsbCB0ZXJtcyBoZXJlaW4gYW5kIGZhaWwgdG8gY3VyZSBzdWNoIGJyZWFjaCB3aXRoaW4gMzAgZGF5cyBvZiBiZWNvbWluZyBhd2FyZSBvZiB0aGUgYnJlYWNoLiBBbGwgc3VibGljZW5zZXMgc2hhbGwgc3Vydml2ZSB0aGUgdGVybWluYXRpb24gb2YgdGhpcyBMaWNlbnNlLlwiXG4gKiAgXCIxNCBSZWZvcm1hdGlvbjogSWYgYW55IHByb3Zpc2lvbiBvZiB0aGlzIExpY2Vuc2UgaXMgaGVsZCB0byBiZSB1bmVuZm9yY2VhYmxlLCBzdWNoIHByb3Zpc2lvbiBzaGFsbCBiZSByZWZvcm1lZCBvbmx5IHRvIHRoZSBleHRlbnQgbmVjZXNzYXJ5IHRvIG1ha2UgaXQgZW5mb3JjZWFibGUuXCJcbiAqICBcIjE1IENPUFlSSUdIVCBOT1RJQ0UgT3BlbiBHYW1lIExpY2Vuc2UgdiAxLjAgQ29weXJpZ2h0IDIwMDAsIFdpemFyZHMgb2YgdGhlIENvYXN0LCBJbmMuXCJcbiAqL1xuXG5pbXBvcnQgdHlwZSB7IE1vbnN0ZXIgfSBmcm9tIFwiQHR5cGVzXCI7XG5cbmV4cG9ydCBjb25zdCBCRVNUSUFSWTogTW9uc3RlcltdID0gW1xuICAgIHtcbiAgICAgICAgbmFtZTogXCJBYm9sZXRoXCIsXG4gICAgICAgIHNpemU6IFwiTGFyZ2VcIixcbiAgICAgICAgdHlwZTogXCJhYmVycmF0aW9uXCIsXG4gICAgICAgIHN1YnR5cGU6IFwiXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJsYXdmdWwgZXZpbFwiLFxuICAgICAgICBhYzogMTcsXG4gICAgICAgIGhwOiAxMzUsXG4gICAgICAgIGhpdF9kaWNlOiBcIjE4ZDEwICsgMzZcIixcbiAgICAgICAgc3BlZWQ6IFwiMTAgZnQuLCBzd2ltIDQwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzIxLCA5LCAxNSwgMTgsIDE1LCAxOF0sXG4gICAgICAgIHNhdmVzOiBbeyBjb25zdGl0dXRpb246IDYgfSwgeyBpbnRlbGxpZ2VuY2U6IDggfSwgeyB3aXNkb206IDYgfV0sXG4gICAgICAgIHNraWxsc2F2ZXM6IFt7IGhpc3Rvcnk6IDEyIH0sIHsgcGVyY2VwdGlvbjogMTAgfV0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBzZW5zZXM6IFwiZGFya3Zpc2lvbiAxMjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMjBcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcIkRlZXAgU3BlZWNoLCB0ZWxlcGF0aHkgMTIwIGZ0LlwiLFxuICAgICAgICBjcjogXCIxMFwiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkFtcGhpYmlvdXNcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBhYm9sZXRoIGNhbiBicmVhdGhlIGFpciBhbmQgd2F0ZXIuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTXVjb3VzIENsb3VkXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJXaGlsZSB1bmRlcndhdGVyLCB0aGUgYWJvbGV0aCBpcyBzdXJyb3VuZGVkIGJ5IHRyYW5zZm9ybWF0aXZlIG11Y3VzLiBBIGNyZWF0dXJlIHRoYXQgdG91Y2hlcyB0aGUgYWJvbGV0aCBvciB0aGF0IGhpdHMgaXQgd2l0aCBhIG1lbGVlIGF0dGFjayB3aGlsZSB3aXRoaW4gNSBmdC4gb2YgaXQgbXVzdCBtYWtlIGEgREMgMTQgQ29uc3RpdHV0aW9uIHNhdmluZyB0aHJvdy4gT24gYSBmYWlsdXJlLCB0aGUgY3JlYXR1cmUgaXMgZGlzZWFzZWQgZm9yIDFkNCBob3Vycy4gVGhlIGRpc2Vhc2VkIGNyZWF0dXJlIGNhbiBicmVhdGhlIG9ubHkgdW5kZXJ3YXRlci5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJQcm9iaW5nIFRlbGVwYXRoeVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiSWYgYSBjcmVhdHVyZSBjb21tdW5pY2F0ZXMgdGVsZXBhdGhpY2FsbHkgd2l0aCB0aGUgYWJvbGV0aCwgdGhlIGFib2xldGggbGVhcm5zIHRoZSBjcmVhdHVyZSdzIGdyZWF0ZXN0IGRlc2lyZXMgaWYgdGhlIGFib2xldGggY2FuIHNlZSB0aGUgY3JlYXR1cmUuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgYWJvbGV0aCBtYWtlcyB0aHJlZSB0ZW50YWNsZSBhdHRhY2tzLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlRlbnRhY2xlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArOSB0byBoaXQsIHJlYWNoIDEwIGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxMiAoMmQ2ICsgNSkgYmx1ZGdlb25pbmcgZGFtYWdlLiBJZiB0aGUgdGFyZ2V0IGlzIGEgY3JlYXR1cmUsIGl0IG11c3Qgc3VjY2VlZCBvbiBhIERDIDE0IENvbnN0aXR1dGlvbiBzYXZpbmcgdGhyb3cgb3IgYmVjb21lIGRpc2Vhc2VkLiBUaGUgZGlzZWFzZSBoYXMgbm8gZWZmZWN0IGZvciAxIG1pbnV0ZSBhbmQgY2FuIGJlIHJlbW92ZWQgYnkgYW55IG1hZ2ljIHRoYXQgY3VyZXMgZGlzZWFzZS4gQWZ0ZXIgMSBtaW51dGUsIHRoZSBkaXNlYXNlZCBjcmVhdHVyZSdzIHNraW4gYmVjb21lcyB0cmFuc2x1Y2VudCBhbmQgc2xpbXksIHRoZSBjcmVhdHVyZSBjYW4ndCByZWdhaW4gaGl0IHBvaW50cyB1bmxlc3MgaXQgaXMgdW5kZXJ3YXRlciwgYW5kIHRoZSBkaXNlYXNlIGNhbiBiZSByZW1vdmVkIG9ubHkgYnkgaGVhbCBvciBhbm90aGVyIGRpc2Vhc2UtY3VyaW5nIHNwZWxsIG9mIDZ0aCBsZXZlbCBvciBoaWdoZXIuIFdoZW4gdGhlIGNyZWF0dXJlIGlzIG91dHNpZGUgYSBib2R5IG9mIHdhdGVyLCBpdCB0YWtlcyA2ICgxZDEyKSBhY2lkIGRhbWFnZSBldmVyeSAxMCBtaW51dGVzIHVubGVzcyBtb2lzdHVyZSBpcyBhcHBsaWVkIHRvIHRoZSBza2luIGJlZm9yZSAxMCBtaW51dGVzIGhhdmUgcGFzc2VkLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogOSxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIyZDZcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJUYWlsXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArOSB0byBoaXQsIHJlYWNoIDEwIGZ0LiBvbmUgdGFyZ2V0LiBIaXQ6IDE1ICgzZDYgKyA1KSBibHVkZ2VvbmluZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA5LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjNkNlwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogNVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkVuc2xhdmUgKDMvZGF5KVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGFib2xldGggdGFyZ2V0cyBvbmUgY3JlYXR1cmUgaXQgY2FuIHNlZSB3aXRoaW4gMzAgZnQuIG9mIGl0LiBUaGUgdGFyZ2V0IG11c3Qgc3VjY2VlZCBvbiBhIERDIDE0IFdpc2RvbSBzYXZpbmcgdGhyb3cgb3IgYmUgbWFnaWNhbGx5IGNoYXJtZWQgYnkgdGhlIGFib2xldGggdW50aWwgdGhlIGFib2xldGggZGllcyBvciB1bnRpbCBpdCBpcyBvbiBhIGRpZmZlcmVudCBwbGFuZSBvZiBleGlzdGVuY2UgZnJvbSB0aGUgdGFyZ2V0LiBUaGUgY2hhcm1lZCB0YXJnZXQgaXMgdW5kZXIgdGhlIGFib2xldGgncyBjb250cm9sIGFuZCBjYW4ndCB0YWtlIHJlYWN0aW9ucywgYW5kIHRoZSBhYm9sZXRoIGFuZCB0aGUgdGFyZ2V0IGNhbiBjb21tdW5pY2F0ZSB0ZWxlcGF0aGljYWxseSB3aXRoIGVhY2ggb3RoZXIgb3ZlciBhbnkgZGlzdGFuY2UuXFxcXG5XaGVuZXZlciB0aGUgY2hhcm1lZCB0YXJnZXQgdGFrZXMgZGFtYWdlLCB0aGUgdGFyZ2V0IGNhbiByZXBlYXQgdGhlIHNhdmluZyB0aHJvdy4gT24gYSBzdWNjZXNzLCB0aGUgZWZmZWN0IGVuZHMuIE5vIG1vcmUgdGhhbiBvbmNlIGV2ZXJ5IDI0IGhvdXJzLCB0aGUgdGFyZ2V0IGNhbiBhbHNvIHJlcGVhdCB0aGUgc2F2aW5nIHRocm93IHdoZW4gaXQgaXMgYXQgbGVhc3QgMSBtaWxlIGF3YXkgZnJvbSB0aGUgYWJvbGV0aC5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgbGVnZW5kYXJ5X2FjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkRldGVjdFwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGFib2xldGggbWFrZXMgYSBXaXNkb20gKFBlcmNlcHRpb24pIGNoZWNrLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlRhaWwgU3dpcGVcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBhYm9sZXRoIG1ha2VzIG9uZSB0YWlsIGF0dGFjay5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJQc3ljaGljIERyYWluIChDb3N0cyAyIEFjdGlvbnMpXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJPbmUgY3JlYXR1cmUgY2hhcm1lZCBieSB0aGUgYWJvbGV0aCB0YWtlcyAxMCAoM2Q2KSBwc3ljaGljIGRhbWFnZSwgYW5kIHRoZSBhYm9sZXRoIHJlZ2FpbnMgaGl0IHBvaW50cyBlcXVhbCB0byB0aGUgZGFtYWdlIHRoZSBjcmVhdHVyZSB0YWtlcy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIkFjb2x5dGVcIixcbiAgICAgICAgc2l6ZTogXCJNZWRpdW1cIixcbiAgICAgICAgdHlwZTogXCJodW1hbm9pZFwiLFxuICAgICAgICBzdWJ0eXBlOiBcImFueSByYWNlXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJhbnkgYWxpZ25tZW50XCIsXG4gICAgICAgIGFjOiAxMCxcbiAgICAgICAgaHA6IDksXG4gICAgICAgIGhpdF9kaWNlOiBcIjJkOFwiLFxuICAgICAgICBzcGVlZDogXCIzMCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsxMCwgMTAsIDEwLCAxMCwgMTQsIDExXSxcbiAgICAgICAgc2tpbGxzYXZlczogW3sgbWVkaWNpbmU6IDQgfSwgeyByZWxpZ2lvbjogMiB9XSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIHNlbnNlczogXCJwYXNzaXZlIFBlcmNlcHRpb24gMTJcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcImFueSBvbmUgbGFuZ3VhZ2UgKHVzdWFsbHkgQ29tbW9uKVwiLFxuICAgICAgICBjcjogXCIxLzRcIixcbiAgICAgICAgdHJhaXRzOiBbXSxcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQ2x1YlwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzIgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAyICgxZDQpIGJsdWRnZW9uaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMWQ0XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgc3BlbGxzOiBbXG4gICAgICAgICAgICBcIlRoZSBhY29seXRlIGlzIGEgMXN0LWxldmVsIHNwZWxsY2FzdGVyLiBJdHMgc3BlbGxjYXN0aW5nIGFiaWxpdHkgaXMgV2lzZG9tIChzcGVsbCBzYXZlIERDIDEyLCArNCB0byBoaXQgd2l0aCBzcGVsbCBhdHRhY2tzKS4gVGhlIGFjb2x5dGUgaGFzIGZvbGxvd2luZyBjbGVyaWMgc3BlbGxzIHByZXBhcmVkOlwiLFxuICAgICAgICAgICAgeyBcIkNhbnRyaXBzIChhdCB3aWxsKVwiOiBcImxpZ2h0LCBzYWNyZWQgZmxhbWUsIHRoYXVtYXR1cmd5XCIgfSxcbiAgICAgICAgICAgIHsgXCIxc3QgbGV2ZWwgKDMgc2xvdHMpXCI6IFwiYmxlc3MsIGN1cmUgd291bmRzLCBzYW5jdHVhcnlcIiB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJBZHVsdCBCbGFjayBEcmFnb25cIixcbiAgICAgICAgc2l6ZTogXCJIdWdlXCIsXG4gICAgICAgIHR5cGU6IFwiZHJhZ29uXCIsXG4gICAgICAgIHN1YnR5cGU6IFwiXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJjaGFvdGljIGV2aWxcIixcbiAgICAgICAgYWM6IDE5LFxuICAgICAgICBocDogMTk1LFxuICAgICAgICBoaXRfZGljZTogXCIxN2QxMiArIDg0XCIsXG4gICAgICAgIHNwZWVkOiBcIjQwIGZ0LiwgZmx5IDgwIGZ0Liwgc3dpbSA0MCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsyMywgMTQsIDIxLCAxNCwgMTMsIDE3XSxcbiAgICAgICAgc2F2ZXM6IFtcbiAgICAgICAgICAgIHsgZGV4dGVyaXR5OiA3IH0sXG4gICAgICAgICAgICB7IGNvbnN0aXR1dGlvbjogMTAgfSxcbiAgICAgICAgICAgIHsgd2lzZG9tOiA2IH0sXG4gICAgICAgICAgICB7IGNoYXJpc21hOiA4IH1cbiAgICAgICAgXSxcbiAgICAgICAgc2tpbGxzYXZlczogW251bGwsIHsgcGVyY2VwdGlvbjogMTEgfSwgeyBzdGVhbHRoOiA3IH1dLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcImFjaWRcIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIHNlbnNlczogXCJibGluZHNpZ2h0IDYwIGZ0LiwgZGFya3Zpc2lvbiAxMjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMjFcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcIkNvbW1vbiwgRHJhY29uaWNcIixcbiAgICAgICAgY3I6IFwiMTRcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJBbXBoaWJpb3VzXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZHJhZ29uIGNhbiBicmVhdGhlIGFpciBhbmQgd2F0ZXIuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTGVnZW5kYXJ5IFJlc2lzdGFuY2UgKDMvRGF5KVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiSWYgdGhlIGRyYWdvbiBmYWlscyBhIHNhdmluZyB0aHJvdywgaXQgY2FuIGNob29zZSB0byBzdWNjZWVkIGluc3RlYWQuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZHJhZ29uIGNhbiB1c2UgaXRzIEZyaWdodGZ1bCBQcmVzZW5jZS4gSXQgdGhlbiBtYWtlcyB0aHJlZSBhdHRhY2tzOiBvbmUgd2l0aCBpdHMgYml0ZSBhbmQgdHdvIHdpdGggaXRzIGNsYXdzLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkJpdGVcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICsxMSB0byBoaXQsIHJlYWNoIDEwIGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxNyAoMmQxMCArIDYpIHBpZXJjaW5nIGRhbWFnZSBwbHVzIDQgKDFkOCkgYWNpZCBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAxMSxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIyZDEwICsgMWQ4XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiA2XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQ2xhd1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzExIHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTMgKDJkNiArIDYpIHNsYXNoaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDExLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjJkNlwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogNlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlRhaWxcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICsxMSB0byBoaXQsIHJlYWNoIDE1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxNSAoMmQ4ICsgNikgYmx1ZGdlb25pbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMTEsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMmQ4XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiA2XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiRnJpZ2h0ZnVsIFByZXNlbmNlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJFYWNoIGNyZWF0dXJlIG9mIHRoZSBkcmFnb24ncyBjaG9pY2UgdGhhdCBpcyB3aXRoaW4gMTIwIGZlZXQgb2YgdGhlIGRyYWdvbiBhbmQgYXdhcmUgb2YgaXQgbXVzdCBzdWNjZWVkIG9uIGEgREMgMTYgV2lzZG9tIHNhdmluZyB0aHJvdyBvciBiZWNvbWUgZnJpZ2h0ZW5lZCBmb3IgMSBtaW51dGUuIEEgY3JlYXR1cmUgY2FuIHJlcGVhdCB0aGUgc2F2aW5nIHRocm93IGF0IHRoZSBlbmQgb2YgZWFjaCBvZiBpdHMgdHVybnMsIGVuZGluZyB0aGUgZWZmZWN0IG9uIGl0c2VsZiBvbiBhIHN1Y2Nlc3MuIElmIGEgY3JlYXR1cmUncyBzYXZpbmcgdGhyb3cgaXMgc3VjY2Vzc2Z1bCBvciB0aGUgZWZmZWN0IGVuZHMgZm9yIGl0LCB0aGUgY3JlYXR1cmUgaXMgaW1tdW5lIHRvIHRoZSBkcmFnb24ncyBGcmlnaHRmdWwgUHJlc2VuY2UgZm9yIHRoZSBuZXh0IDI0IGhvdXJzLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkFjaWQgQnJlYXRoIChSZWNoYXJnZSA1LTYpXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZHJhZ29uIGV4aGFsZXMgYWNpZCBpbiBhIDYwLWZvb3QgbGluZSB0aGF0IGlzIDUgZmVldCB3aWRlLiBFYWNoIGNyZWF0dXJlIGluIHRoYXQgbGluZSBtdXN0IG1ha2UgYSBEQyAxOCBEZXh0ZXJpdHkgc2F2aW5nIHRocm93LCB0YWtpbmcgNTQgKDEyZDgpIGFjaWQgZGFtYWdlIG9uIGEgZmFpbGVkIHNhdmUsIG9yIGhhbGYgYXMgbXVjaCBkYW1hZ2Ugb24gYSBzdWNjZXNzZnVsIG9uZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDAsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMTJkOFwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGxlZ2VuZGFyeV9hY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJEZXRlY3RcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBkcmFnb24gbWFrZXMgYSBXaXNkb20gKFBlcmNlcHRpb24pIGNoZWNrLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlRhaWwgQXR0YWNrXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZHJhZ29uIG1ha2VzIGEgdGFpbCBhdHRhY2suXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiV2luZyBBdHRhY2sgKENvc3RzIDIgQWN0aW9ucylcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBkcmFnb24gYmVhdHMgaXRzIHdpbmdzLiBFYWNoIGNyZWF0dXJlIHdpdGhpbiAxMCBmdC4gb2YgdGhlIGRyYWdvbiBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxOSBEZXh0ZXJpdHkgc2F2aW5nIHRocm93IG9yIHRha2UgMTMgKDJkNiArIDYpIGJsdWRnZW9uaW5nIGRhbWFnZSBhbmQgYmUga25vY2tlZCBwcm9uZS4gVGhlIGRyYWdvbiBjYW4gdGhlbiBmbHkgdXAgdG8gaGFsZiBpdHMgZmx5aW5nIHNwZWVkLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiQWR1bHQgQmx1ZSBEcmFjb2xpY2hcIixcbiAgICAgICAgc2l6ZTogXCJIdWdlXCIsXG4gICAgICAgIHR5cGU6IFwidW5kZWFkXCIsXG4gICAgICAgIHN1YnR5cGU6IFwiXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJsYXdmdWwgZXZpbFwiLFxuICAgICAgICBhYzogMTksXG4gICAgICAgIGhwOiAyMjUsXG4gICAgICAgIGhpdF9kaWNlOiBcIjE4ZDEyICsgMTA4XCIsXG4gICAgICAgIHNwZWVkOiBcIjQwIGZ0LiwgYnVycm93IDMwIGZ0LiwgZmx5IDgwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzI1LCAxMCwgMjMsIDE2LCAxNSwgMTldLFxuICAgICAgICBza2lsbHNhdmVzOiBbeyBwZXJjZXB0aW9uOiAxMiB9XSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIm5lY3JvdGljXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcImxpZ2h0bmluZywgcG9pc29uXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOlxuICAgICAgICAgICAgXCJjaGFybWVkLCBleGhhdXN0aW9uLCBmcmlnaHRlbmVkLCBwYXJhbHl6ZWQsIHBvaXNvbmVkXCIsXG4gICAgICAgIHNlbnNlczogXCJibGluZHNpZ2h0IDYwIGZ0LiwgZGFya3Zpc2lvbiAxMjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMjJcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcIkNvbW1vbiwgRHJhY29uaWNcIixcbiAgICAgICAgY3I6IFwiMTdcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJMZWdlbmRhcnkgUmVzaXN0YW5jZSAoMy9EYXkpXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJJZiB0aGUgZHJhY29saWNoIGZhaWxzIGEgc2F2aW5nIHRocm93LCBpdCBjYW4gY2hvb3NlIHRvIHN1Y2NlZWQgaW5zdGVhZC5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJNYWdpYyBSZXNpc3RhbmNlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZHJhY29saWNoIGhhcyBhZHZhbnRhZ2Ugb24gc2F2aW5nIHRocm93cyBhZ2FpbnN0IHNwZWxscyBhbmQgb3RoZXIgbWFnaWNhbCBlZmZlY3RzLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJNdWx0aWF0dGFja1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGRyYWNvbGljaCBjYW4gdXNlIGl0cyBGcmlnaHRmdWwgUHJlc2VuY2UuIEl0IHRoZW4gbWFrZXMgdGhyZWUgYXR0YWNrczogb25lIHdpdGggaXRzIGJpdGUgYW5kIHR3byB3aXRoIGl0cyBjbGF3cy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJCaXRlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMTIgdG8gaGl0LCByZWFjaCAxMCBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTggKDJkMTAgKyA3KSBwaWVyY2luZyBkYW1hZ2UgcGx1cyA1ICgxZDEwKSBsaWdodG5pbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMTIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMmQxMCArIDFkMTBcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJDbGF3XCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMTIgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxNCAoMmQ2ICsgNykgc2xhc2hpbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMTIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMmQ2XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiA3XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiVGFpbFwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzEyIHRvIGhpdCwgcmVhY2ggMTUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDE2ICgyZDggKyA3KSBibHVkZ2VvbmluZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAxMixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIyZDhcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJGcmlnaHRmdWwgUHJlc2VuY2VcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIkVhY2ggY3JlYXR1cmUgb2YgdGhlIGRyYWNvbGljaCdzIGNob2ljZSB0aGF0IGlzIHdpdGhpbiAxMjAgZmVldCBvZiB0aGUgZHJhY29saWNoIGFuZCBhd2FyZSBvZiBpdCBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxOCBXaXNkb20gc2F2aW5nIHRocm93IG9yIGJlY29tZSBmcmlnaHRlbmVkIGZvciAxIG1pbnV0ZS4gQSBjcmVhdHVyZSBjYW4gcmVwZWF0IHRoZSBzYXZpbmcgdGhyb3cgYXQgdGhlIGVuZCBvZiBlYWNoIG9mIGl0cyB0dXJucywgZW5kaW5nIHRoZSBlZmZlY3Qgb24gaXRzZWxmIG9uIGEgc3VjY2Vzcy4gSWYgYSBjcmVhdHVyZSdzIHNhdmluZyB0aHJvdyBpcyBzdWNjZXNzZnVsIG9yIHRoZSBlZmZlY3QgZW5kcyBmb3IgaXQsIHRoZSBjcmVhdHVyZSBpcyBpbW11bmUgdG8gdGhlIGRyYWNvbGljaCdzIEZyaWdodGZ1bCBQcmVzZW5jZSBmb3IgdGhlIG5leHQgMjQgaG91cnMuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTGlnaHRuaW5nIEJyZWF0aCAoUmVjaGFyZ2UgNS02KVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGRyYWNvbGljaCBleGhhbGVzIGxpZ2h0bmluZyBpbiBhIDkwLWZvb3QgbGluZSB0aGF0IGlzIDUgZmVldCB3aWRlLiBFYWNoIGNyZWF0dXJlIGluIHRoYXQgbGluZSBtdXN0IG1ha2UgYSBEQyAyMCBEZXh0ZXJpdHkgc2F2aW5nIHRocm93LCB0YWtpbmcgNjYgKDEyZDEwKSBsaWdodG5pbmcgZGFtYWdlIG9uIGEgZmFpbGVkIHNhdmUsIG9yIGhhbGYgYXMgbXVjaCBkYW1hZ2Ugb24gYSBzdWNjZXNzZnVsIG9uZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDAsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMTJkMTBcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBsZWdlbmRhcnlfYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiRGV0ZWN0XCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZHJhY29saWNoIG1ha2VzIGEgV2lzZG9tIChQZXJjZXB0aW9uKSBjaGVjay5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJUYWlsIEF0dGFja1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGRyYWNvbGljaCBtYWtlcyBhIHRhaWwgYXR0YWNrLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIldpbmcgQXR0YWNrIChDb3N0cyAyIEFjdGlvbnMpXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZHJhY29saWNoIGJlYXRzIGl0cyB0YXR0ZXJlZCB3aW5ncy4gRWFjaCBjcmVhdHVyZSB3aXRoaW4gMTAgZnQuIG9mIHRoZSBkcmFjb2xpY2ggbXVzdCBzdWNjZWVkIG9uIGEgREMgMjEgRGV4dGVyaXR5IHNhdmluZyB0aHJvdyBvciB0YWtlIDE0ICgyZDYgKyA3KSBibHVkZ2VvbmluZyBkYW1hZ2UgYW5kIGJlIGtub2NrZWQgcHJvbmUuIEFmdGVyIGJlYXRpbmcgaXRzIHdpbmdzIHRoaXMgd2F5LCB0aGUgZHJhY29saWNoIGNhbiBmbHkgdXAgdG8gaGFsZiBpdHMgZmx5aW5nIHNwZWVkLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiQWR1bHQgQmx1ZSBEcmFnb25cIixcbiAgICAgICAgc2l6ZTogXCJIdWdlXCIsXG4gICAgICAgIHR5cGU6IFwiZHJhZ29uXCIsXG4gICAgICAgIHN1YnR5cGU6IFwiXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJsYXdmdWwgZXZpbFwiLFxuICAgICAgICBhYzogMTksXG4gICAgICAgIGhwOiAyMjUsXG4gICAgICAgIGhpdF9kaWNlOiBcIjE4ZDEyICsgMTA4XCIsXG4gICAgICAgIHNwZWVkOiBcIjQwIGZ0LiwgYnVycm93IDMwIGZ0LiwgZmx5IDgwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzI1LCAxMCwgMjMsIDE2LCAxNSwgMTldLFxuICAgICAgICBzYXZlczogW1xuICAgICAgICAgICAgeyBkZXh0ZXJpdHk6IDUgfSxcbiAgICAgICAgICAgIHsgY29uc3RpdHV0aW9uOiAxMSB9LFxuICAgICAgICAgICAgeyB3aXNkb206IDcgfSxcbiAgICAgICAgICAgIHsgY2hhcmlzbWE6IDkgfVxuICAgICAgICBdLFxuICAgICAgICBza2lsbHNhdmVzOiBbbnVsbCwgeyBwZXJjZXB0aW9uOiAxMiB9LCB7IHN0ZWFsdGg6IDUgfV0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwibGlnaHRuaW5nXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBzZW5zZXM6IFwiYmxpbmRzaWdodCA2MCBmdC4sIGRhcmt2aXNpb24gMTIwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDIyXCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJDb21tb24sIERyYWNvbmljXCIsXG4gICAgICAgIGNyOiBcIjE2XCIsXG4gICAgICAgIHRyYWl0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTGVnZW5kYXJ5IFJlc2lzdGFuY2UgKDMvRGF5KVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiSWYgdGhlIGRyYWdvbiBmYWlscyBhIHNhdmluZyB0aHJvdywgaXQgY2FuIGNob29zZSB0byBzdWNjZWVkIGluc3RlYWQuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZHJhZ29uIGNhbiB1c2UgaXRzIEZyaWdodGZ1bCBQcmVzZW5jZS4gSXQgdGhlbiBtYWtlcyB0aHJlZSBhdHRhY2tzOiBvbmUgd2l0aCBpdHMgYml0ZSBhbmQgdHdvIHdpdGggaXRzIGNsYXdzLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkJpdGVcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICsxMiB0byBoaXQsIHJlYWNoIDEwIGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxOCAoMmQxMCArIDcpIHBpZXJjaW5nIGRhbWFnZSBwbHVzIDUgKDFkMTApIGxpZ2h0bmluZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAxMixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIyZDEwICsgMWQxMFwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogN1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkNsYXdcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICsxMiB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDE0ICgyZDYgKyA3KSBzbGFzaGluZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAxMixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIyZDZcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJUYWlsXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMTIgdG8gaGl0LCByZWFjaCAxNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTYgKDJkOCArIDcpIGJsdWRnZW9uaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDEyLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjJkOFwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogN1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkZyaWdodGZ1bCBQcmVzZW5jZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiRWFjaCBjcmVhdHVyZSBvZiB0aGUgZHJhZ29uJ3MgY2hvaWNlIHRoYXQgaXMgd2l0aGluIDEyMCBmdC4gb2YgdGhlIGRyYWdvbiBhbmQgYXdhcmUgb2YgaXQgbXVzdCBzdWNjZWVkIG9uIGEgREMgMTcgV2lzZG9tIHNhdmluZyB0aHJvdyBvciBiZWNvbWUgZnJpZ2h0ZW5lZCBmb3IgMSBtaW51dGUuIEEgY3JlYXR1cmUgY2FuIHJlcGVhdCB0aGUgc2F2aW5nIHRocm93IGF0IHRoZSBlbmQgb2YgZWFjaCBvZiBpdHMgdHVybnMsIGVuZGluZyB0aGUgZWZmZWN0IG9uIGl0c2VsZiBvbiBhIHN1Y2Nlc3MuIElmIGEgY3JlYXR1cmUncyBzYXZpbmcgdGhyb3cgaXMgc3VjY2Vzc2Z1bCBvciB0aGUgZWZmZWN0IGVuZHMgZm9yIGl0LCB0aGUgY3JlYXR1cmUgaXMgaW1tdW5lIHRvIHRoZSBkcmFnb24ncyBGcmlnaHRmdWwgUHJlc2VuY2UgZm9yIHRoZSBuZXh0IDI0IGhvdXJzLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkxpZ2h0bmluZyBCcmVhdGggKFJlY2hhcmdlIDUtNilcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBkcmFnb24gZXhoYWxlcyBsaWdodG5pbmcgaW4gYSA5MC1mb290IGxpbmUgdGhhdCBpcyA1IGZ0LiB3aWRlLiBFYWNoIGNyZWF0dXJlIGluIHRoYXQgbGluZSBtdXN0IG1ha2UgYSBEQyAxOSBEZXh0ZXJpdHkgc2F2aW5nIHRocm93LCB0YWtpbmcgNjYgKDEyZDEwKSBsaWdodG5pbmcgZGFtYWdlIG9uIGEgZmFpbGVkIHNhdmUsIG9yIGhhbGYgYXMgbXVjaCBkYW1hZ2Ugb24gYSBzdWNjZXNzZnVsIG9uZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDAsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMTJkMTBcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBsZWdlbmRhcnlfYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiRGV0ZWN0XCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZHJhZ29uIG1ha2VzIGEgV2lzZG9tIChQZXJjZXB0aW9uKSBjaGVjay5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJUYWlsIEF0dGFja1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGRyYWdvbiBtYWtlcyBhIHRhaWwgYXR0YWNrLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIldpbmcgQXR0YWNrIChDb3N0cyAyIEFjdGlvbnMpXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZHJhZ29uIGJlYXRzIGl0cyB3aW5ncy4gRWFjaCBjcmVhdHVyZSB3aXRoaW4gMTAgZnQuIG9mIHRoZSBkcmFnb24gbXVzdCBzdWNjZWVkIG9uIGEgREMgMjAgRGV4dGVyaXR5IHNhdmluZyB0aHJvdyBvciB0YWtlIDE0ICgyZDYgKyA3KSBibHVkZ2VvbmluZyBkYW1hZ2UgYW5kIGJlIGtub2NrZWQgcHJvbmUuIFRoZSBkcmFnb24gY2FuIHRoZW4gZmx5IHVwIHRvIGhhbGYgaXRzIGZseWluZyBzcGVlZC5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIkFkdWx0IEJyYXNzIERyYWdvblwiLFxuICAgICAgICBzaXplOiBcIkh1Z2VcIixcbiAgICAgICAgdHlwZTogXCJkcmFnb25cIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcImNoYW90aWMgZ29vZFwiLFxuICAgICAgICBhYzogMTgsXG4gICAgICAgIGhwOiAxNzIsXG4gICAgICAgIGhpdF9kaWNlOiBcIjE1ZDEyICsgNzRcIixcbiAgICAgICAgc3BlZWQ6IFwiNDAgZnQuLCBidXJyb3cgNDAgZnQuLCBmbHkgODAgZnQuXCIsXG4gICAgICAgIHN0YXRzOiBbMjMsIDEwLCAyMSwgMTQsIDEzLCAxN10sXG4gICAgICAgIHNhdmVzOiBbXG4gICAgICAgICAgICB7IGRleHRlcml0eTogNSB9LFxuICAgICAgICAgICAgeyBjb25zdGl0dXRpb246IDEwIH0sXG4gICAgICAgICAgICB7IHdpc2RvbTogNiB9LFxuICAgICAgICAgICAgeyBjaGFyaXNtYTogOCB9XG4gICAgICAgIF0sXG4gICAgICAgIHNraWxsc2F2ZXM6IFtcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICB7IGhpc3Rvcnk6IDcgfSxcbiAgICAgICAgICAgIHsgcGVyc3Vhc2lvbjogOCB9LFxuICAgICAgICAgICAgeyBwZXJjZXB0aW9uOiAxMSB9LFxuICAgICAgICAgICAgeyBzdGVhbHRoOiA1IH1cbiAgICAgICAgXSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczogXCJmaXJlXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBzZW5zZXM6IFwiYmxpbmRzaWdodCA2MCBmdC4sIGRhcmt2aXNpb24gMTIwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDIxXCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJDb21tb24sIERyYWNvbmljXCIsXG4gICAgICAgIGNyOiBcIjEzXCIsXG4gICAgICAgIHRyYWl0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTGVnZW5kYXJ5IFJlc2lzdGFuY2UgKDMvRGF5KVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiSWYgdGhlIGRyYWdvbiBmYWlscyBhIHNhdmluZyB0aHJvdywgaXQgY2FuIGNob29zZSB0byBzdWNjZWVkIGluc3RlYWQuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZHJhZ29uIGNhbiB1c2UgaXRzIEZyaWdodGZ1bCBQcmVzZW5jZS4gSXQgdGhlbiBtYWtlcyB0aHJlZSBhdHRhY2tzOiBvbmUgd2l0aCBpdHMgYml0ZSBhbmQgdHdvIHdpdGggaXRzIGNsYXdzLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkJpdGVcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICsxMSB0byBoaXQsIHJlYWNoLC4wIGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxNyAoMmQxMCArIDYpIHBpZXJjaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDExLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjJkMTBcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDZcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJDbGF3XCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMTEgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxMyAoMmQ2ICsgNikgc2xhc2hpbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMTEsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMmQ2XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiA2XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiVGFpbFwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzExIHRvIGhpdCwgcmVhY2ggMTUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDE1ICgyZDggKyA2KSBibHVkZ2VvbmluZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAxMSxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIyZDhcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDZcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJGcmlnaHRmdWwgUHJlc2VuY2VcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIkVhY2ggY3JlYXR1cmUgb2YgdGhlIGRyYWdvbidzIGNob2ljZSB0aGF0IGlzIHdpdGhpbiAxMjAgZmVldCBvZiB0aGUgZHJhZ29uIGFuZCBhd2FyZSBvZiBpdCBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxNiBXaXNkb20gc2F2aW5nIHRocm93IG9yIGJlY29tZSBmcmlnaHRlbmVkIGZvciAxIG1pbnV0ZS4gQSBjcmVhdHVyZSBjYW4gcmVwZWF0IHRoZSBzYXZpbmcgdGhyb3cgYXQgdGhlIGVuZCBvZiBlYWNoIG9mIGl0cyB0dXJucywgZW5kaW5nIHRoZSBlZmZlY3Qgb24gaXRzZWxmIG9uIGEgc3VjY2Vzcy4gSWYgYSBjcmVhdHVyZSdzIHNhdmluZyB0aHJvdyBpcyBzdWNjZXNzZnVsIG9yIHRoZSBlZmZlY3QgZW5kcyBmb3IgaXQsIHRoZSBjcmVhdHVyZSBpcyBpbW11bmUgdG8gdGhlIGRyYWdvbidzIEZyaWdodGZ1bCBQcmVzZW5jZSBmb3IgdGhlIG5leHQgMjQgaG91cnMuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQnJlYXRoIFdlYXBvbnMgKFJlY2hhcmdlIDUtNilcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBkcmFnb24gdXNlcyBvbmUgb2YgdGhlIGZvbGxvd2luZyBicmVhdGggd2VhcG9ucy5cXFxcbkZpcmUgQnJlYXRoLiBUaGUgZHJhZ29uIGV4aGFsZXMgZmlyZSBpbiBhbiA2MC1mb290IGxpbmUgdGhhdCBpcyA1IGZlZXQgd2lkZS4gRWFjaCBjcmVhdHVyZSBpbiB0aGF0IGxpbmUgbXVzdCBtYWtlIGEgREMgMTggRGV4dGVyaXR5IHNhdmluZyB0aHJvdywgdGFraW5nIDQ1ICgxM2Q2KSBmaXJlIGRhbWFnZSBvbiBhIGZhaWxlZCBzYXZlLCBvciBoYWxmIGFzIG11Y2ggZGFtYWdlIG9uIGEgc3VjY2Vzc2Z1bCBvbmUuXFxcXG5TbGVlcCBCcmVhdGguIFRoZSBkcmFnb24gZXhoYWxlcyBzbGVlcCBnYXMgaW4gYSA2MC1mb290IGNvbmUuIEVhY2ggY3JlYXR1cmUgaW4gdGhhdCBhcmVhIG11c3Qgc3VjY2VlZCBvbiBhIERDIDE4IENvbnN0aXR1dGlvbiBzYXZpbmcgdGhyb3cgb3IgZmFsbCB1bmNvbnNjaW91cyBmb3IgMTAgbWludXRlcy4gVGhpcyBlZmZlY3QgZW5kcyBmb3IgYSBjcmVhdHVyZSBpZiB0aGUgY3JlYXR1cmUgdGFrZXMgZGFtYWdlIG9yIHNvbWVvbmUgdXNlcyBhbiBhY3Rpb24gdG8gd2FrZSBpdC5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDAsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMTNkNlwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJBZHVsdCBCcm9uemUgRHJhZ29uXCIsXG4gICAgICAgIHNpemU6IFwiSHVnZVwiLFxuICAgICAgICB0eXBlOiBcImRyYWdvblwiLFxuICAgICAgICBzdWJ0eXBlOiBcIlwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwibGF3ZnVsIGdvb2RcIixcbiAgICAgICAgYWM6IDE5LFxuICAgICAgICBocDogMjEyLFxuICAgICAgICBoaXRfZGljZTogXCIxN2QxMiArIDEwMVwiLFxuICAgICAgICBzcGVlZDogXCI0MCBmdC4sIGZseSA4MCBmdC4sIHN3aW0gNDAgZnQuXCIsXG4gICAgICAgIHN0YXRzOiBbMjUsIDEwLCAyMywgMTYsIDE1LCAxOV0sXG4gICAgICAgIHNhdmVzOiBbXG4gICAgICAgICAgICB7IGRleHRlcml0eTogNSB9LFxuICAgICAgICAgICAgeyBjb25zdGl0dXRpb246IDExIH0sXG4gICAgICAgICAgICB7IHdpc2RvbTogNyB9LFxuICAgICAgICAgICAgeyBjaGFyaXNtYTogOSB9XG4gICAgICAgIF0sXG4gICAgICAgIHNraWxsc2F2ZXM6IFt7IGluc2lnaHQ6IDcgfSwgeyBwZXJjZXB0aW9uOiAxMiB9LCB7IHN0ZWFsdGg6IDUgfV0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwibGlnaHRuaW5nXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBzZW5zZXM6IFwiYmxpbmRzaWdodCA2MCBmdC4sIGRhcmt2aXNpb24gMTIwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDIyXCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJDb21tb24sIERyYWNvbmljXCIsXG4gICAgICAgIGNyOiBcIjE1XCIsXG4gICAgICAgIHRyYWl0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQW1waGliaW91c1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGRyYWdvbiBjYW4gYnJlYXRoZSBhaXIgYW5kIHdhdGVyLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkxlZ2VuZGFyeSBSZXNpc3RhbmNlICgzL0RheSlcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIklmIHRoZSBkcmFnb24gZmFpbHMgYSBzYXZpbmcgdGhyb3csIGl0IGNhbiBjaG9vc2UgdG8gc3VjY2VlZCBpbnN0ZWFkLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJNdWx0aWF0dGFja1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGRyYWdvbiBjYW4gdXNlIGl0cyBGcmlnaHRmdWwgUHJlc2VuY2UuIEl0IHRoZW4gbWFrZXMgdGhyZWUgYXR0YWNrczogb25lIHdpdGggaXRzIGJpdGUgYW5kIHR3byB3aXRoIGl0cyBjbGF3cy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJCaXRlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMTIgdG8gaGl0LCByZWFjaCAxMCBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTggKDJkMTAgKyA3KSBwaWVyY2luZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAxMixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIyZDEwXCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiA3XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQ2xhd1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzEyIHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTQgKDJkNiArIDcpIHNsYXNoaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDEyLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjJkNlwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogN1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlRhaWxcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICsxMiB0byBoaXQsIHJlYWNoIDE1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxNiAoMmQ4ICsgNykgYmx1ZGdlb25pbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMTIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMmQ4XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiA3XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiRnJpZ2h0ZnVsIFByZXNlbmNlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJFYWNoIGNyZWF0dXJlIG9mIHRoZSBkcmFnb24ncyBjaG9pY2UgdGhhdCBpcyB3aXRoaW4gMTIwIGZlZXQgb2YgdGhlIGRyYWdvbiBhbmQgYXdhcmUgb2YgaXQgbXVzdCBzdWNjZWVkIG9uIGEgREMgMTcgV2lzZG9tIHNhdmluZyB0aHJvdyBvciBiZWNvbWUgZnJpZ2h0ZW5lZCBmb3IgMSBtaW51dGUuIEEgY3JlYXR1cmUgY2FuIHJlcGVhdCB0aGUgc2F2aW5nIHRocm93IGF0IHRoZSBlbmQgb2YgZWFjaCBvZiBpdHMgdHVybnMsIGVuZGluZyB0aGUgZWZmZWN0IG9uIGl0c2VsZiBvbiBhIHN1Y2Nlc3MuIElmIGEgY3JlYXR1cmUncyBzYXZpbmcgdGhyb3cgaXMgc3VjY2Vzc2Z1bCBvciB0aGUgZWZmZWN0IGVuZHMgZm9yIGl0LCB0aGUgY3JlYXR1cmUgaXMgaW1tdW5lIHRvIHRoZSBkcmFnb24ncyBGcmlnaHRmdWwgUHJlc2VuY2UgZm9yIHRoZSBuZXh0IDI0IGhvdXJzLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkJyZWF0aCBXZWFwb25zIChSZWNoYXJnZSA1LTYpXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZHJhZ29uIHVzZXMgb25lIG9mIHRoZSBmb2xsb3dpbmcgYnJlYXRoIHdlYXBvbnMuXFxcXG5MaWdodG5pbmcgQnJlYXRoLiBUaGUgZHJhZ29uIGV4aGFsZXMgbGlnaHRuaW5nIGluIGEgOTAtZm9vdCBsaW5lIHRoYXQgaXMgNSBmZWV0IHdpZGUuIEVhY2ggY3JlYXR1cmUgaW4gdGhhdCBsaW5lIG11c3QgbWFrZSBhIERDIDE5IERleHRlcml0eSBzYXZpbmcgdGhyb3csIHRha2luZyA2NiAoMTJkMTApIGxpZ2h0bmluZyBkYW1hZ2Ugb24gYSBmYWlsZWQgc2F2ZSwgb3IgaGFsZiBhcyBtdWNoIGRhbWFnZSBvbiBhIHN1Y2Nlc3NmdWwgb25lLlxcXFxuUmVwdWxzaW9uIEJyZWF0aC4gVGhlIGRyYWdvbiBleGhhbGVzIHJlcHVsc2lvbiBlbmVyZ3kgaW4gYSAzMC1mb290IGNvbmUuIEVhY2ggY3JlYXR1cmUgaW4gdGhhdCBhcmVhIG11c3Qgc3VjY2VlZCBvbiBhIERDIDE5IFN0cmVuZ3RoIHNhdmluZyB0aHJvdy4gT24gYSBmYWlsZWQgc2F2ZSwgdGhlIGNyZWF0dXJlIGlzIHB1c2hlZCA2MCBmZWV0IGF3YXkgZnJvbSB0aGUgZHJhZ29uLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIxMmQxMFwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGxlZ2VuZGFyeV9hY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJEZXRlY3RcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBkcmFnb24gbWFrZXMgYSBXaXNkb20gKFBlcmNlcHRpb24pIGNoZWNrLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlRhaWwgQXR0YWNrXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZHJhZ29uIG1ha2VzIGEgdGFpbCBhdHRhY2suXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiV2luZyBBdHRhY2sgKENvc3RzIDIgQWN0aW9ucylcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBkcmFnb24gYmVhdHMgaXRzIHdpbmdzLiBFYWNoIGNyZWF0dXJlIHdpdGhpbiAxMCBmdC4gb2YgdGhlIGRyYWdvbiBtdXN0IHN1Y2NlZWQgb24gYSBEQyAyMCBEZXh0ZXJpdHkgc2F2aW5nIHRocm93IG9yIHRha2UgMTQgKDJkNiArIDcpIGJsdWRnZW9uaW5nIGRhbWFnZSBhbmQgYmUga25vY2tlZCBwcm9uZS4gVGhlIGRyYWdvbiBjYW4gdGhlbiBmbHkgdXAgdG8gaGFsZiBpdHMgZmx5aW5nIHNwZWVkLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiQWR1bHQgQ29wcGVyIERyYWdvblwiLFxuICAgICAgICBzaXplOiBcIkh1Z2VcIixcbiAgICAgICAgdHlwZTogXCJkcmFnb25cIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcImNoYW90aWMgZ29vZFwiLFxuICAgICAgICBhYzogMTgsXG4gICAgICAgIGhwOiAxODQsXG4gICAgICAgIGhpdF9kaWNlOiBcIjE2ZDEyICsgODBcIixcbiAgICAgICAgc3BlZWQ6IFwiNDAgZnQuLCBjbGltYiA0MCBmdC4sIGZseSA4MCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsyMywgMTIsIDIxLCAxOCwgMTUsIDE3XSxcbiAgICAgICAgc2F2ZXM6IFtcbiAgICAgICAgICAgIHsgZGV4dGVyaXR5OiA2IH0sXG4gICAgICAgICAgICB7IGNvbnN0aXR1dGlvbjogMTAgfSxcbiAgICAgICAgICAgIHsgd2lzZG9tOiA3IH0sXG4gICAgICAgICAgICB7IGNoYXJpc21hOiA4IH1cbiAgICAgICAgXSxcbiAgICAgICAgc2tpbGxzYXZlczogW3sgZGVjZXB0aW9uOiA4IH0sIHsgcGVyY2VwdGlvbjogMTIgfSwgeyBzdGVhbHRoOiA2IH1dLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcImFjaWRcIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIHNlbnNlczogXCJibGluZHNpZ2h0IDYwIGZ0LiwgZGFya3Zpc2lvbiAxMjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMjJcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcIkNvbW1vbiwgRHJhY29uaWNcIixcbiAgICAgICAgY3I6IFwiMTRcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJMZWdlbmRhcnkgUmVzaXN0YW5jZSAoMy9EYXkpXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJJZiB0aGUgZHJhZ29uIGZhaWxzIGEgc2F2aW5nIHRocm93LCBpdCBjYW4gY2hvb3NlIHRvIHN1Y2NlZWQgaW5zdGVhZC5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBkcmFnb24gY2FuIHVzZSBpdHMgRnJpZ2h0ZnVsIFByZXNlbmNlLiBJdCB0aGVuIG1ha2VzIHRocmVlIGF0dGFja3M6IG9uZSB3aXRoIGl0cyBiaXRlIGFuZCB0d28gd2l0aCBpdHMgY2xhd3MuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQml0ZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzExIHRvIGhpdCwgcmVhY2ggMTAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDE3ICgyZDEwICsgNikgcGllcmNpbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMTEsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMmQxMFwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogNlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkNsYXdcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICsxMSB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDEzICgyZDYgKyA2KSBzbGFzaGluZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAxMSxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIyZDZcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDZcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJUYWlsXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMTEgdG8gaGl0LCByZWFjaCAxNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTUgKDJkOCArIDYpIGJsdWRnZW9uaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDExLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjJkOFwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogNlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkZyaWdodGZ1bCBQcmVzZW5jZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiRWFjaCBjcmVhdHVyZSBvZiB0aGUgZHJhZ29uJ3MgY2hvaWNlIHRoYXQgaXMgd2l0aGluIDEyMCBmZWV0IG9mIHRoZSBkcmFnb24gYW5kIGF3YXJlIG9mIGl0IG11c3Qgc3VjY2VlZCBvbiBhIERDIDE2IFdpc2RvbSBzYXZpbmcgdGhyb3cgb3IgYmVjb21lIGZyaWdodGVuZWQgZm9yIDEgbWludXRlLiBBIGNyZWF0dXJlIGNhbiByZXBlYXQgdGhlIHNhdmluZyB0aHJvdyBhdCB0aGUgZW5kIG9mIGVhY2ggb2YgaXRzIHR1cm5zLCBlbmRpbmcgdGhlIGVmZmVjdCBvbiBpdHNlbGYgb24gYSBzdWNjZXNzLiBJZiBhIGNyZWF0dXJlJ3Mgc2F2aW5nIHRocm93IGlzIHN1Y2Nlc3NmdWwgb3IgdGhlIGVmZmVjdCBlbmRzIGZvciBpdCwgdGhlIGNyZWF0dXJlIGlzIGltbXVuZSB0byB0aGUgZHJhZ29uJ3MgRnJpZ2h0ZnVsIFByZXNlbmNlIGZvciB0aGUgbmV4dCAyNCBob3Vycy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJCcmVhdGggV2VhcG9ucyAoUmVjaGFyZ2UgNS02KVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGRyYWdvbiB1c2VzIG9uZSBvZiB0aGUgZm9sbG93aW5nIGJyZWF0aCB3ZWFwb25zLlxcXFxuQWNpZCBCcmVhdGguIFRoZSBkcmFnb24gZXhoYWxlcyBhY2lkIGluIGFuIDYwLWZvb3QgbGluZSB0aGF0IGlzIDUgZmVldCB3aWRlLiBFYWNoIGNyZWF0dXJlIGluIHRoYXQgbGluZSBtdXN0IG1ha2UgYSBEQyAxOCBEZXh0ZXJpdHkgc2F2aW5nIHRocm93LCB0YWtpbmcgNTQgKDEyZDgpIGFjaWQgZGFtYWdlIG9uIGEgZmFpbGVkIHNhdmUsIG9yIGhhbGYgYXMgbXVjaCBkYW1hZ2Ugb24gYSBzdWNjZXNzZnVsIG9uZS5cXFxcblNsb3dpbmcgQnJlYXRoLiBUaGUgZHJhZ29uIGV4aGFsZXMgZ2FzIGluIGEgNjAtZm9vdCBjb25lLiBFYWNoIGNyZWF0dXJlIGluIHRoYXQgYXJlYSBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxOCBDb25zdGl0dXRpb24gc2F2aW5nIHRocm93LiBPbiBhIGZhaWxlZCBzYXZlLCB0aGUgY3JlYXR1cmUgY2FuJ3QgdXNlIHJlYWN0aW9ucywgaXRzIHNwZWVkIGlzIGhhbHZlZCwgYW5kIGl0IGNhbid0IG1ha2UgbW9yZSB0aGFuIG9uZSBhdHRhY2sgb24gaXRzIHR1cm4uIEluIGFkZGl0aW9uLCB0aGUgY3JlYXR1cmUgY2FuIHVzZSBlaXRoZXIgYW4gYWN0aW9uIG9yIGEgYm9udXMgYWN0aW9uIG9uIGl0cyB0dXJuLCBidXQgbm90IGJvdGguIFRoZXNlIGVmZmVjdHMgbGFzdCBmb3IgMSBtaW51dGUuIFRoZSBjcmVhdHVyZSBjYW4gcmVwZWF0IHRoZSBzYXZpbmcgdGhyb3cgYXQgdGhlIGVuZCBvZiBlYWNoIG9mIGl0cyB0dXJucywgZW5kaW5nIHRoZSBlZmZlY3Qgb24gaXRzZWxmIHdpdGggYSBzdWNjZXNzZnVsIHNhdmUuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjEyZDhcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBsZWdlbmRhcnlfYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiRGV0ZWN0XCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZHJhZ29uIG1ha2VzIGEgV2lzZG9tIChQZXJjZXB0aW9uKSBjaGVjay5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJUYWlsIEF0dGFja1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGRyYWdvbiBtYWtlcyBhIHRhaWwgYXR0YWNrLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIldpbmcgQXR0YWNrIChDb3N0cyAyIEFjdGlvbnMpXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZHJhZ29uIGJlYXRzIGl0cyB3aW5ncy4gRWFjaCBjcmVhdHVyZSB3aXRoaW4gMTAgZnQuIG9mIHRoZSBkcmFnb24gbXVzdCBzdWNjZWVkIG9uIGEgREMgMTkgRGV4dGVyaXR5IHNhdmluZyB0aHJvdyBvciB0YWtlIDEzICgyZDYgKyA2KSBibHVkZ2VvbmluZyBkYW1hZ2UgYW5kIGJlIGtub2NrZWQgcHJvbmUuIFRoZSBkcmFnb24gY2FuIHRoZW4gZmx5IHVwIHRvIGhhbGYgaXRzIGZseWluZyBzcGVlZC5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIkFkdWx0IEdvbGQgRHJhZ29uXCIsXG4gICAgICAgIHNpemU6IFwiSHVnZVwiLFxuICAgICAgICB0eXBlOiBcImRyYWdvblwiLFxuICAgICAgICBzdWJ0eXBlOiBcIlwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwibGF3ZnVsIGdvb2RcIixcbiAgICAgICAgYWM6IDE5LFxuICAgICAgICBocDogMjU2LFxuICAgICAgICBoaXRfZGljZTogXCIxOWQxMiArIDEzMlwiLFxuICAgICAgICBzcGVlZDogXCI0MCBmdC4sIGZseSA4MCBmdC4sIHN3aW0gNDAgZnQuXCIsXG4gICAgICAgIHN0YXRzOiBbMjcsIDE0LCAyNSwgMTYsIDE1LCAyNF0sXG4gICAgICAgIHNhdmVzOiBbXG4gICAgICAgICAgICB7IGRleHRlcml0eTogOCB9LFxuICAgICAgICAgICAgeyBjb25zdGl0dXRpb246IDEzIH0sXG4gICAgICAgICAgICB7IHdpc2RvbTogOCB9LFxuICAgICAgICAgICAgeyBjaGFyaXNtYTogMTMgfVxuICAgICAgICBdLFxuICAgICAgICBza2lsbHNhdmVzOiBbXG4gICAgICAgICAgICB7IGluc2lnaHQ6IDggfSxcbiAgICAgICAgICAgIHsgcGVyc3Vhc2lvbjogMTMgfSxcbiAgICAgICAgICAgIHsgcGVyY2VwdGlvbjogMTQgfSxcbiAgICAgICAgICAgIHsgc3RlYWx0aDogOCB9XG4gICAgICAgIF0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwiZmlyZVwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcbiAgICAgICAgc2Vuc2VzOiBcImJsaW5kc2lnaHQgNjAgZnQuLCBkYXJrdmlzaW9uIDEyMCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAyNFwiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiQ29tbW9uLCBEcmFjb25pY1wiLFxuICAgICAgICBjcjogXCIxN1wiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkFtcGhpYmlvdXNcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBkcmFnb24gY2FuIGJyZWF0aGUgYWlyIGFuZCB3YXRlci5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJMZWdlbmRhcnkgUmVzaXN0YW5jZSAoMy9EYXkpXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJJZiB0aGUgZHJhZ29uIGZhaWxzIGEgc2F2aW5nIHRocm93LCBpdCBjYW4gY2hvb3NlIHRvIHN1Y2NlZWQgaW5zdGVhZC5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBkcmFnb24gY2FuIHVzZSBpdHMgRnJpZ2h0ZnVsIFByZXNlbmNlLiBJdCB0aGVuIG1ha2VzIHRocmVlIGF0dGFja3M6IG9uZSB3aXRoIGl0cyBiaXRlIGFuZCB0d28gd2l0aCBpdHMgY2xhd3MuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQml0ZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzE0IHRvIGhpdCwgcmVhY2ggMTAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDE5ICgyZDEwICsgOCkgcGllcmNpbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMTQsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMmQxMFwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogOFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkNsYXdcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICsxNCB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDE1ICgyZDYgKyA4KSBzbGFzaGluZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAxNCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIyZDZcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDhcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJUYWlsXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMTQgdG8gaGl0LCByZWFjaCAxNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTcgKDJkOCArIDgpIGJsdWRnZW9uaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDE0LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjJkOFwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogOFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkZyaWdodGZ1bCBQcmVzZW5jZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiRWFjaCBjcmVhdHVyZSBvZiB0aGUgZHJhZ29uJ3MgY2hvaWNlIHRoYXQgaXMgd2l0aGluIDEyMCBmZWV0IG9mIHRoZSBkcmFnb24gYW5kIGF3YXJlIG9mIGl0IG11c3Qgc3VjY2VlZCBvbiBhIERDIDIxIFdpc2RvbSBzYXZpbmcgdGhyb3cgb3IgYmVjb21lIGZyaWdodGVuZWQgZm9yIDEgbWludXRlLiBBIGNyZWF0dXJlIGNhbiByZXBlYXQgdGhlIHNhdmluZyB0aHJvdyBhdCB0aGUgZW5kIG9mIGVhY2ggb2YgaXRzIHR1cm5zLCBlbmRpbmcgdGhlIGVmZmVjdCBvbiBpdHNlbGYgb24gYSBzdWNjZXNzLiBJZiBhIGNyZWF0dXJlJ3Mgc2F2aW5nIHRocm93IGlzIHN1Y2Nlc3NmdWwgb3IgdGhlIGVmZmVjdCBlbmRzIGZvciBpdCwgdGhlIGNyZWF0dXJlIGlzIGltbXVuZSB0byB0aGUgZHJhZ29uJ3MgRnJpZ2h0ZnVsIFByZXNlbmNlIGZvciB0aGUgbmV4dCAyNCBob3Vycy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJCcmVhdGggV2VhcG9ucyAoUmVjaGFyZ2UgNS02KVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGRyYWdvbiB1c2VzIG9uZSBvZiB0aGUgZm9sbG93aW5nIGJyZWF0aCB3ZWFwb25zLlxcXFxuRmlyZSBCcmVhdGguIFRoZSBkcmFnb24gZXhoYWxlcyBmaXJlIGluIGEgNjAtZm9vdCBjb25lLiBFYWNoIGNyZWF0dXJlIGluIHRoYXQgYXJlYSBtdXN0IG1ha2UgYSBEQyAyMSBEZXh0ZXJpdHkgc2F2aW5nIHRocm93LCB0YWtpbmcgNjYgKDEyZDEwKSBmaXJlIGRhbWFnZSBvbiBhIGZhaWxlZCBzYXZlLCBvciBoYWxmIGFzIG11Y2ggZGFtYWdlIG9uIGEgc3VjY2Vzc2Z1bCBvbmUuXFxcXG5XZWFrZW5pbmcgQnJlYXRoLiBUaGUgZHJhZ29uIGV4aGFsZXMgZ2FzIGluIGEgNjAtZm9vdCBjb25lLiBFYWNoIGNyZWF0dXJlIGluIHRoYXQgYXJlYSBtdXN0IHN1Y2NlZWQgb24gYSBEQyAyMSBTdHJlbmd0aCBzYXZpbmcgdGhyb3cgb3IgaGF2ZSBkaXNhZHZhbnRhZ2Ugb24gU3RyZW5ndGgtYmFzZWQgYXR0YWNrIHJvbGxzLCBTdHJlbmd0aCBjaGVja3MsIGFuZCBTdHJlbmd0aCBzYXZpbmcgdGhyb3dzIGZvciAxIG1pbnV0ZS4gQSBjcmVhdHVyZSBjYW4gcmVwZWF0IHRoZSBzYXZpbmcgdGhyb3cgYXQgdGhlIGVuZCBvZiBlYWNoIG9mIGl0cyB0dXJucywgZW5kaW5nIHRoZSBlZmZlY3Qgb24gaXRzZWxmIG9uIGEgc3VjY2Vzcy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDAsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMTJkMTBcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBsZWdlbmRhcnlfYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiRGV0ZWN0XCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZHJhZ29uIG1ha2VzIGEgV2lzZG9tIChQZXJjZXB0aW9uKSBjaGVjay5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJUYWlsIEF0dGFja1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGRyYWdvbiBtYWtlcyBhIHRhaWwgYXR0YWNrLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIldpbmcgQXR0YWNrIChDb3N0cyAyIEFjdGlvbnMpXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZHJhZ29uIGJlYXRzIGl0cyB3aW5ncy4gRWFjaCBjcmVhdHVyZSB3aXRoaW4gMTAgZnQuIG9mIHRoZSBkcmFnb24gbXVzdCBzdWNjZWVkIG9uIGEgREMgMjIgRGV4dGVyaXR5IHNhdmluZyB0aHJvdyBvciB0YWtlIDE1ICgyZDYgKyA4KSBibHVkZ2VvbmluZyBkYW1hZ2UgYW5kIGJlIGtub2NrZWQgcHJvbmUuIFRoZSBkcmFnb24gY2FuIHRoZW4gZmx5IHVwIHRvIGhhbGYgaXRzIGZseWluZyBzcGVlZC5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIkFkdWx0IEdyZWVuIERyYWdvblwiLFxuICAgICAgICBzaXplOiBcIkh1Z2VcIixcbiAgICAgICAgdHlwZTogXCJkcmFnb25cIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcImxhd2Z1bCBldmlsXCIsXG4gICAgICAgIGFjOiAxOSxcbiAgICAgICAgaHA6IDIwNyxcbiAgICAgICAgaGl0X2RpY2U6IFwiMThkMTIgKyA5MFwiLFxuICAgICAgICBzcGVlZDogXCI0MCBmdC4sIGZseSA4MCBmdC4sIHN3aW0gNDAgZnQuXCIsXG4gICAgICAgIHN0YXRzOiBbMjMsIDEyLCAyMSwgMTgsIDE1LCAxN10sXG4gICAgICAgIHNhdmVzOiBbXG4gICAgICAgICAgICB7IGRleHRlcml0eTogNiB9LFxuICAgICAgICAgICAgeyBjb25zdGl0dXRpb246IDEwIH0sXG4gICAgICAgICAgICB7IHdpc2RvbTogNyB9LFxuICAgICAgICAgICAgeyBjaGFyaXNtYTogOCB9XG4gICAgICAgIF0sXG4gICAgICAgIHNraWxsc2F2ZXM6IFtcbiAgICAgICAgICAgIHsgZGVjZXB0aW9uOiA4IH0sXG4gICAgICAgICAgICB7IGluc2lnaHQ6IDcgfSxcbiAgICAgICAgICAgIHsgcGVyc3Vhc2lvbjogOCB9LFxuICAgICAgICAgICAgeyBwZXJjZXB0aW9uOiAxMiB9LFxuICAgICAgICAgICAgeyBzdGVhbHRoOiA2IH1cbiAgICAgICAgXSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczogXCJwb2lzb25cIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwicG9pc29uZWRcIixcbiAgICAgICAgc2Vuc2VzOiBcImJsaW5kc2lnaHQgNjAgZnQuLCBkYXJrdmlzaW9uIDEyMCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAyMlwiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiQ29tbW9uLCBEcmFjb25pY1wiLFxuICAgICAgICBjcjogXCIxNVwiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkFtcGhpYmlvdXNcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBkcmFnb24gY2FuIGJyZWF0aGUgYWlyIGFuZCB3YXRlci5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJMZWdlbmRhcnkgUmVzaXN0YW5jZSAoMy9EYXkpXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJJZiB0aGUgZHJhZ29uIGZhaWxzIGEgc2F2aW5nIHRocm93LCBpdCBjYW4gY2hvb3NlIHRvIHN1Y2NlZWQgaW5zdGVhZC5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBkcmFnb24gY2FuIHVzZSBpdHMgRnJpZ2h0ZnVsIFByZXNlbmNlLiBJdCB0aGVuIG1ha2VzIHRocmVlIGF0dGFja3M6IG9uZSB3aXRoIGl0cyBiaXRlIGFuZCB0d28gd2l0aCBpdHMgY2xhd3MuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQml0ZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzExIHRvIGhpdCwgcmVhY2ggMTAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDE3ICgyZDEwICsgNikgcGllcmNpbmcgZGFtYWdlIHBsdXMgNyAoMmQ2KSBwb2lzb24gZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMTEsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMmQxMCArIDJkNlwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogNlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkNsYXdcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICsxMSB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDEzICgyZDYgKyA2KSBzbGFzaGluZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAxMSxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIyZDZcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDZcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJUYWlsXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMTEgdG8gaGl0LCByZWFjaCAxNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTUgKDJkOCArIDYpIGJsdWRnZW9uaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDExLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjJkOFwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogNlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkZyaWdodGZ1bCBQcmVzZW5jZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiRWFjaCBjcmVhdHVyZSBvZiB0aGUgZHJhZ29uJ3MgY2hvaWNlIHRoYXQgaXMgd2l0aGluIDEyMCBmZWV0IG9mIHRoZSBkcmFnb24gYW5kIGF3YXJlIG9mIGl0IG11c3Qgc3VjY2VlZCBvbiBhIERDIDE2IFdpc2RvbSBzYXZpbmcgdGhyb3cgb3IgYmVjb21lIGZyaWdodGVuZWQgZm9yIDEgbWludXRlLiBBIGNyZWF0dXJlIGNhbiByZXBlYXQgdGhlIHNhdmluZyB0aHJvdyBhdCB0aGUgZW5kIG9mIGVhY2ggb2YgaXRzIHR1cm5zLCBlbmRpbmcgdGhlIGVmZmVjdCBvbiBpdHNlbGYgb24gYSBzdWNjZXNzLiBJZiBhIGNyZWF0dXJlJ3Mgc2F2aW5nIHRocm93IGlzIHN1Y2Nlc3NmdWwgb3IgdGhlIGVmZmVjdCBlbmRzIGZvciBpdCwgdGhlIGNyZWF0dXJlIGlzIGltbXVuZSB0byB0aGUgZHJhZ29uJ3MgRnJpZ2h0ZnVsIFByZXNlbmNlIGZvciB0aGUgbmV4dCAyNCBob3VycyAuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiUG9pc29uIEJyZWF0aCAoUmVjaGFyZ2UgNS02KVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGRyYWdvbiBleGhhbGVzIHBvaXNvbm91cyBnYXMgaW4gYSA2MC1mb290IGNvbmUuIEVhY2ggY3JlYXR1cmUgaW4gdGhhdCBhcmVhIG11c3QgbWFrZSBhIERDIDE4IENvbnN0aXR1dGlvbiBzYXZpbmcgdGhyb3csIHRha2luZyA1NiAoMTZkNikgcG9pc29uIGRhbWFnZSBvbiBhIGZhaWxlZCBzYXZlLCBvciBoYWxmIGFzIG11Y2ggZGFtYWdlIG9uIGEgc3VjY2Vzc2Z1bCBvbmUuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjE2ZDZcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBsZWdlbmRhcnlfYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiRGV0ZWN0XCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZHJhZ29uIG1ha2VzIGEgV2lzZG9tIChQZXJjZXB0aW9uKSBjaGVjay5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJUYWlsIEF0dGFja1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGRyYWdvbiBtYWtlcyBhIHRhaWwgYXR0YWNrLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIldpbmcgQXR0YWNrIChDb3N0cyAyIEFjdGlvbnMpXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZHJhZ29uIGJlYXRzIGl0cyB3aW5ncy4gRWFjaCBjcmVhdHVyZSB3aXRoaW4gMTAgZnQuIG9mIHRoZSBkcmFnb24gbXVzdCBzdWNjZWVkIG9uIGEgREMgMTkgRGV4dGVyaXR5IHNhdmluZyB0aHJvdyBvciB0YWtlIDEzICgyZDYgKyA2KSBibHVkZ2VvbmluZyBkYW1hZ2UgYW5kIGJlIGtub2NrZWQgcHJvbmUuIFRoZSBkcmFnb24gY2FuIHRoZW4gZmx5IHVwIHRvIGhhbGYgaXRzIGZseWluZyBzcGVlZC5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIkFkdWx0IFJlZCBEcmFnb25cIixcbiAgICAgICAgc2l6ZTogXCJIdWdlXCIsXG4gICAgICAgIHR5cGU6IFwiZHJhZ29uXCIsXG4gICAgICAgIHN1YnR5cGU6IFwiXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJjaGFvdGljIGV2aWxcIixcbiAgICAgICAgYWM6IDE5LFxuICAgICAgICBocDogMjU2LFxuICAgICAgICBoaXRfZGljZTogXCIxOWQxMiArIDEzMlwiLFxuICAgICAgICBzcGVlZDogXCI0MCBmdC4sIGNsaW1iIDQwIGZ0LiwgZmx5IDgwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzI3LCAxMCwgMjUsIDE2LCAxMywgMjFdLFxuICAgICAgICBzYXZlczogW1xuICAgICAgICAgICAgeyBkZXh0ZXJpdHk6IDYgfSxcbiAgICAgICAgICAgIHsgY29uc3RpdHV0aW9uOiAxMyB9LFxuICAgICAgICAgICAgeyB3aXNkb206IDcgfSxcbiAgICAgICAgICAgIHsgY2hhcmlzbWE6IDExIH1cbiAgICAgICAgXSxcbiAgICAgICAgc2tpbGxzYXZlczogW3sgcGVyY2VwdGlvbjogMTMgfSwgeyBzdGVhbHRoOiA2IH1dLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcImZpcmVcIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIHNlbnNlczogXCJibGluZHNpZ2h0IDYwIGZ0LiwgZGFya3Zpc2lvbiAxMjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMjNcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcIkNvbW1vbiwgRHJhY29uaWNcIixcbiAgICAgICAgY3I6IFwiMTdcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJMZWdlbmRhcnkgUmVzaXN0YW5jZSAoMy9EYXkpXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJJZiB0aGUgZHJhZ29uIGZhaWxzIGEgc2F2aW5nIHRocm93LCBpdCBjYW4gY2hvb3NlIHRvIHN1Y2NlZWQgaW5zdGVhZC5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBkcmFnb24gY2FuIHVzZSBpdHMgRnJpZ2h0ZnVsIFByZXNlbmNlLiBJdCB0aGVuIG1ha2VzIHRocmVlIGF0dGFja3M6IG9uZSB3aXRoIGl0cyBiaXRlIGFuZCB0d28gd2l0aCBpdHMgY2xhd3MuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQml0ZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzE0IHRvIGhpdCwgcmVhY2ggMTAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDE5ICgyZDEwICsgOCkgcGllcmNpbmcgZGFtYWdlIHBsdXMgNyAoMmQ2KSBmaXJlIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDE0LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjJkMTAgKyAyZDZcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDhcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJDbGF3XCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMTQgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxNSAoMmQ2ICsgOCkgc2xhc2hpbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMTQsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMmQ2XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiA4XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiVGFpbFwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzE0IHRvIGhpdCwgcmVhY2ggMTUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDE3ICgyZDggKyA4KSBibHVkZ2VvbmluZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAxNCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIyZDhcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDhcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJGcmlnaHRmdWwgUHJlc2VuY2VcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIkVhY2ggY3JlYXR1cmUgb2YgdGhlIGRyYWdvbidzIGNob2ljZSB0aGF0IGlzIHdpdGhpbiAxMjAgZnQuIG9mIHRoZSBkcmFnb24gYW5kIGF3YXJlIG9mIGl0IG11c3Qgc3VjY2VlZCBvbiBhIERDIDE5IFdpc2RvbSBzYXZpbmcgdGhyb3cgb3IgYmVjb21lIGZyaWdodGVuZWQgZm9yIDEgbWludXRlLiBBIGNyZWF0dXJlIGNhbiByZXBlYXQgdGhlIHNhdmluZyB0aHJvdyBhdCB0aGUgZW5kIG9mIGVhY2ggb2YgaXRzIHR1cm5zLCBlbmRpbmcgdGhlIGVmZmVjdCBvbiBpdHNlbGYgb24gYSBzdWNjZXNzLiBJZiBhIGNyZWF0dXJlJ3Mgc2F2aW5nIHRocm93IGlzIHN1Y2Nlc3NmdWwgb3IgdGhlIGVmZmVjdCBlbmRzIGZvciBpdCwgdGhlIGNyZWF0dXJlIGlzIGltbXVuZSB0byB0aGUgZHJhZ29uJ3MgRnJpZ2h0ZnVsIFByZXNlbmNlIGZvciB0aGUgbmV4dCAyNCBob3Vycy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJGaXJlIEJyZWF0aCAoUmVjaGFyZ2UgNS02KVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGRyYWdvbiBleGhhbGVzIGZpcmUgaW4gYSA2MC1mb290IGNvbmUuIEVhY2ggY3JlYXR1cmUgaW4gdGhhdCBhcmVhIG11c3QgbWFrZSBhIERDIDIxIERleHRlcml0eSBzYXZpbmcgdGhyb3csIHRha2luZyA2MyAoMThkNikgZmlyZSBkYW1hZ2Ugb24gYSBmYWlsZWQgc2F2ZSwgb3IgaGFsZiBhcyBtdWNoIGRhbWFnZSBvbiBhIHN1Y2Nlc3NmdWwgb25lLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIxOGQ2XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJMYWlyIEFjdGlvbnNcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk9uIGluaXRpYXRpdmUgY291bnQgMjAgKGxvc2luZyBpbml0aWF0aXZlIHRpZXMpLCB0aGUgZHJhZ29uIHRha2VzIGEgbGFpciBhY3Rpb24gdG8gY2F1c2Ugb25lIG9mIHRoZSBmb2xsb3dpbmcgZWZmZWN0czogdGhlIGRyYWdvbiBjYW4ndCB1c2UgdGhlIHNhbWUgZWZmZWN0IHR3byByb3VuZHMgaW4gYSByb3c6XFxcXG5cdTIwMjIgTWFnbWEgZXJ1cHRzIGZyb20gYSBwb2ludCBvbiB0aGUgZ3JvdW5kIHRoZSBkcmFnb24gY2FuIHNlZSB3aXRoaW4gMTIwIGZlZXQgb2YgaXQsIGNyZWF0aW5nIGEgMjAtZm9vdC1oaWdoLCA1LWZvb3QtcmFkaXVzIGdleXNlci4gRWFjaCBjcmVhdHVyZSBpbiB0aGUgZ2V5c2VyJ3MgYXJlYSBtdXN0IG1ha2UgYSBEQyAxNSBEZXh0ZXJpdHkgc2F2aW5nIHRocm93LCB0YWtpbmcgMjEgKDZkNikgZmlyZSBkYW1hZ2Ugb24gYSBmYWlsZWQgc2F2ZSwgb3IgaGFsZiBhcyBtdWNoIGRhbWFnZSBvbiBhIHN1Y2Nlc3NmdWwgb25lLlxcXFxuXHUyMDIyIEEgdHJlbW9yIHNoYWtlcyB0aGUgbGFpciBpbiBhIDYwLWZvb3QtcmFkaXVzIGFyb3VuZCB0aGUgZHJhZ29uLiBFYWNoIGNyZWF0dXJlIG90aGVyIHRoYW4gdGhlIGRyYWdvbiBvbiB0aGUgZ3JvdW5kIGluIHRoYXQgYXJlYSBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxNSBEZXh0ZXJpdHkgc2F2aW5nIHRocm93IG9yIGJlIGtub2NrZWQgcHJvbmUuXFxcXG5cdTIwMjIgVm9sY2FuaWMgZ2FzZXMgZm9ybSBhIGNsb3VkIGluIGEgMjAtZm9vdC1yYWRpdXMgc3BoZXJlIGNlbnRlcmVkIG9uIGEgcG9pbnQgdGhlIGRyYWdvbiBjYW4gc2VlIHdpdGhpbiAxMjAgZmVldCBvZiBpdC4gVGhlIHNwaGVyZSBzcHJlYWRzIGFyb3VuZCBjb3JuZXJzLCBhbmQgaXRzIGFyZWEgaXMgbGlnaHRseSBvYnNjdXJlZC4gSXQgbGFzdHMgdW50aWwgaW5pdGlhdGl2ZSBjb3VudCAyMCBvbiB0aGUgbmV4dCByb3VuZC4gRWFjaCBjcmVhdHVyZSB0aGF0IHN0YXJ0cyBpdHMgdHVybiBpbiB0aGUgY2xvdWQgbXVzdCBzdWNjZWVkIG9uIGEgREMgMTMgQ29uc3RpdHV0aW9uIHNhdmluZyB0aHJvdyBvciBiZSBwb2lzb25lZCB1bnRpbCB0aGUgZW5kIG9mIGl0cyB0dXJuLiBXaGlsZSBwb2lzb25lZCBpbiB0aGlzIHdheSwgYSBjcmVhdHVyZSBpcyBpbmNhcGFjaXRhdGVkLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCI2ZDZcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBsZWdlbmRhcnlfYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiRGV0ZWN0XCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZHJhZ29uIG1ha2VzIGEgV2lzZG9tIChQZXJjZXB0aW9uKSBjaGVjay5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJUYWlsIEF0dGFja1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGRyYWdvbiBtYWtlcyBhIHRhaWwgYXR0YWNrLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIldpbmcgQXR0YWNrIChDb3N0cyAyIEFjdGlvbnMpXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZHJhZ29uIGJlYXRzIGl0cyB3aW5ncy4gRWFjaCBjcmVhdHVyZSB3aXRoaW4gMTAgZnQuIG9mIHRoZSBkcmFnb24gbXVzdCBzdWNjZWVkIG9uIGEgREMgMjIgRGV4dGVyaXR5IHNhdmluZyB0aHJvdyBvciB0YWtlIDE1ICgyZDYgKyA4KSBibHVkZ2VvbmluZyBkYW1hZ2UgYW5kIGJlIGtub2NrZWQgcHJvbmUuIFRoZSBkcmFnb24gY2FuIHRoZW4gZmx5IHVwIHRvIGhhbGYgaXRzIGZseWluZyBzcGVlZC5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIkFkdWx0IFNpbHZlciBEcmFnb25cIixcbiAgICAgICAgc2l6ZTogXCJIdWdlXCIsXG4gICAgICAgIHR5cGU6IFwiZHJhZ29uXCIsXG4gICAgICAgIHN1YnR5cGU6IFwiXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJsYXdmdWwgZ29vZFwiLFxuICAgICAgICBhYzogMTksXG4gICAgICAgIGhwOiAyNDMsXG4gICAgICAgIGhpdF9kaWNlOiBcIjE4ZDEyICsgMTI2XCIsXG4gICAgICAgIHNwZWVkOiBcIjQwIGZ0LiwgZmx5IDgwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzI3LCAxMCwgMjUsIDE2LCAxMywgMjFdLFxuICAgICAgICBzYXZlczogW1xuICAgICAgICAgICAgeyBkZXh0ZXJpdHk6IDUgfSxcbiAgICAgICAgICAgIHsgY29uc3RpdHV0aW9uOiAxMiB9LFxuICAgICAgICAgICAgeyB3aXNkb206IDYgfSxcbiAgICAgICAgICAgIHsgY2hhcmlzbWE6IDEwIH1cbiAgICAgICAgXSxcbiAgICAgICAgc2tpbGxzYXZlczogW1xuICAgICAgICAgICAgeyBhcmNhbmE6IDggfSxcbiAgICAgICAgICAgIHsgaGlzdG9yeTogOCB9LFxuICAgICAgICAgICAgeyBwZXJjZXB0aW9uOiAxMSB9LFxuICAgICAgICAgICAgeyBzdGVhbHRoOiA1IH1cbiAgICAgICAgXSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczogXCJjb2xkXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBzZW5zZXM6IFwiYmxpbmRzaWdodCA2MCBmdC4sIGRhcmt2aXNpb24gMTIwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDIxXCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJDb21tb24sIERyYWNvbmljXCIsXG4gICAgICAgIGNyOiBcIjE2XCIsXG4gICAgICAgIHRyYWl0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTGVnZW5kYXJ5IFJlc2lzdGFuY2UgKDMvRGF5KVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiSWYgdGhlIGRyYWdvbiBmYWlscyBhIHNhdmluZyB0aHJvdywgaXQgY2FuIGNob29zZSB0byBzdWNjZWVkIGluc3RlYWQuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZHJhZ29uIGNhbiB1c2UgaXRzIEZyaWdodGZ1bCBQcmVzZW5jZS4gSXQgdGhlbiBtYWtlcyB0aHJlZSBhdHRhY2tzOiBvbmUgd2l0aCBpdHMgYml0ZSBhbmQgdHdvIHdpdGggaXRzIGNsYXdzLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkJpdGVcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICsxMyB0byBoaXQsIHJlYWNoIDEwIGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxOSAoMmQxMCArIDgpIHBpZXJjaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDEzLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjJkMTBcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDhcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJDbGF3XCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMTMgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxNSAoMmQ2ICsgOCkgc2xhc2hpbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMTMsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMmQ2XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiA4XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiVGFpbFwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzEzIHRvIGhpdCwgcmVhY2ggMTUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDE3ICgyZDggKyA4KSBibHVkZ2VvbmluZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAxMyxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIyZDhcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDhcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJGcmlnaHRmdWwgUHJlc2VuY2VcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIkVhY2ggY3JlYXR1cmUgb2YgdGhlIGRyYWdvbidzIGNob2ljZSB0aGF0IGlzIHdpdGhpbiAxMjAgZmVldCBvZiB0aGUgZHJhZ29uIGFuZCBhd2FyZSBvZiBpdCBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxOCBXaXNkb20gc2F2aW5nIHRocm93IG9yIGJlY29tZSBmcmlnaHRlbmVkIGZvciAxIG1pbnV0ZS4gQSBjcmVhdHVyZSBjYW4gcmVwZWF0IHRoZSBzYXZpbmcgdGhyb3cgYXQgdGhlIGVuZCBvZiBlYWNoIG9mIGl0cyB0dXJucywgZW5kaW5nIHRoZSBlZmZlY3Qgb24gaXRzZWxmIG9uIGEgc3VjY2Vzcy4gSWYgYSBjcmVhdHVyZSdzIHNhdmluZyB0aHJvdyBpcyBzdWNjZXNzZnVsIG9yIHRoZSBlZmZlY3QgZW5kcyBmb3IgaXQsIHRoZSBjcmVhdHVyZSBpcyBpbW11bmUgdG8gdGhlIGRyYWdvbidzIEZyaWdodGZ1bCBQcmVzZW5jZSBmb3IgdGhlIG5leHQgMjQgaG91cnMuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQnJlYXRoIFdlYXBvbnMgKFJlY2hhcmdlIDUtNilcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBkcmFnb24gdXNlcyBvbmUgb2YgdGhlIGZvbGxvd2luZyBicmVhdGggd2VhcG9ucy5cXFxcbkNvbGQgQnJlYXRoLiBUaGUgZHJhZ29uIGV4aGFsZXMgYW4gaWN5IGJsYXN0IGluIGEgNjAtZm9vdCBjb25lLiBFYWNoIGNyZWF0dXJlIGluIHRoYXQgYXJlYSBtdXN0IG1ha2UgYSBEQyAyMCBDb25zdGl0dXRpb24gc2F2aW5nIHRocm93LCB0YWtpbmcgNTggKDEzZDgpIGNvbGQgZGFtYWdlIG9uIGEgZmFpbGVkIHNhdmUsIG9yIGhhbGYgYXMgbXVjaCBkYW1hZ2Ugb24gYSBzdWNjZXNzZnVsIG9uZS5cXFxcblBhcmFseXppbmcgQnJlYXRoLiBUaGUgZHJhZ29uIGV4aGFsZXMgcGFyYWx5emluZyBnYXMgaW4gYSA2MC1mb290IGNvbmUuIEVhY2ggY3JlYXR1cmUgaW4gdGhhdCBhcmVhIG11c3Qgc3VjY2VlZCBvbiBhIERDIDIwIENvbnN0aXR1dGlvbiBzYXZpbmcgdGhyb3cgb3IgYmUgcGFyYWx5emVkIGZvciAxIG1pbnV0ZS4gQSBjcmVhdHVyZSBjYW4gcmVwZWF0IHRoZSBzYXZpbmcgdGhyb3cgYXQgdGhlIGVuZCBvZiBlYWNoIG9mIGl0cyB0dXJucywgZW5kaW5nIHRoZSBlZmZlY3Qgb24gaXRzZWxmIG9uIGEgc3VjY2Vzcy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDAsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMTNkOFwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGxlZ2VuZGFyeV9hY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJEZXRlY3RcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBkcmFnb24gbWFrZXMgYSBXaXNkb20gKFBlcmNlcHRpb24pIGNoZWNrLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlRhaWwgQXR0YWNrXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZHJhZ29uIG1ha2VzIGEgdGFpbCBhdHRhY2suXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiV2luZyBBdHRhY2sgKENvc3RzIDIgQWN0aW9ucylcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBkcmFnb24gYmVhdHMgaXRzIHdpbmdzLiBFYWNoIGNyZWF0dXJlIHdpdGhpbiAxMCBmdC4gb2YgdGhlIGRyYWdvbiBtdXN0IHN1Y2NlZWQgb24gYSBEQyAyMiBEZXh0ZXJpdHkgc2F2aW5nIHRocm93IG9yIHRha2UgMTUgKDJkNiArIDgpIGJsdWRnZW9uaW5nIGRhbWFnZSBhbmQgYmUga25vY2tlZCBwcm9uZS4gVGhlIGRyYWdvbiBjYW4gdGhlbiBmbHkgdXAgdG8gaGFsZiBpdHMgZmx5aW5nIHNwZWVkLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiQWR1bHQgV2hpdGUgRHJhZ29uXCIsXG4gICAgICAgIHNpemU6IFwiSHVnZVwiLFxuICAgICAgICB0eXBlOiBcImRyYWdvblwiLFxuICAgICAgICBzdWJ0eXBlOiBcIlwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwiY2hhb3RpYyBldmlsXCIsXG4gICAgICAgIGFjOiAxOCxcbiAgICAgICAgaHA6IDIwMCxcbiAgICAgICAgaGl0X2RpY2U6IFwiMTZkMTIgKyA5NlwiLFxuICAgICAgICBzcGVlZDogXCI0MCBmdC4sIGJ1cnJvdyAzMCBmdC4sIGZseSA4MCBmdC4sIHN3aW0gNDAgZnQuXCIsXG4gICAgICAgIHN0YXRzOiBbMjIsIDEwLCAyMiwgOCwgMTIsIDEyXSxcbiAgICAgICAgc2F2ZXM6IFtcbiAgICAgICAgICAgIHsgZGV4dGVyaXR5OiA1IH0sXG4gICAgICAgICAgICB7IGNvbnN0aXR1dGlvbjogMTEgfSxcbiAgICAgICAgICAgIHsgd2lzZG9tOiA2IH0sXG4gICAgICAgICAgICB7IGNoYXJpc21hOiA2IH1cbiAgICAgICAgXSxcbiAgICAgICAgc2tpbGxzYXZlczogW3sgcGVyY2VwdGlvbjogMTEgfSwgeyBzdGVhbHRoOiA1IH1dLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcImNvbGRcIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIHNlbnNlczogXCJibGluZHNpZ2h0IDYwIGZ0LiwgZGFya3Zpc2lvbiAxMjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMjFcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcIkNvbW1vbiwgRHJhY29uaWNcIixcbiAgICAgICAgY3I6IFwiMTNcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJJY2UgV2Fsa1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGRyYWdvbiBjYW4gbW92ZSBhY3Jvc3MgYW5kIGNsaW1iIGljeSBzdXJmYWNlcyB3aXRob3V0IG5lZWRpbmcgdG8gbWFrZSBhbiBhYmlsaXR5IGNoZWNrLiBBZGRpdGlvbmFsbHksIGRpZmZpY3VsdCB0ZXJyYWluIGNvbXBvc2VkIG9mIGljZSBvciBzbm93IGRvZXNuJ3QgY29zdCBpdCBleHRyYSBtb21lbnQuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTGVnZW5kYXJ5IFJlc2lzdGFuY2UgKDMvRGF5KVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiSWYgdGhlIGRyYWdvbiBmYWlscyBhIHNhdmluZyB0aHJvdywgaXQgY2FuIGNob29zZSB0byBzdWNjZWVkIGluc3RlYWQuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZHJhZ29uIGNhbiB1c2UgaXRzIEZyaWdodGZ1bCBQcmVzZW5jZS4gSXQgdGhlbiBtYWtlcyB0aHJlZSBhdHRhY2tzOiBvbmUgd2l0aCBpdHMgYml0ZSBhbmQgdHdvIHdpdGggaXRzIGNsYXdzLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkJpdGVcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICsxMSB0byBoaXQsIHJlYWNoIDEwIGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxNyAoMmQxMCArIDYpIHBpZXJjaW5nIGRhbWFnZSBwbHVzIDQgKDFkOCkgY29sZCBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAxMSxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIyZDEwICsgMWQ4XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiA2XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQ2xhd1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzExIHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTMgKDJkNiArIDYpIHNsYXNoaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDExLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjJkNlwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogNlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlRhaWxcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICsxMSB0byBoaXQsIHJlYWNoIDE1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxNSAoMmQ4ICsgNikgYmx1ZGdlb25pbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMTEsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMmQ4XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiA2XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiRnJpZ2h0ZnVsIFByZXNlbmNlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJFYWNoIGNyZWF0dXJlIG9mIHRoZSBkcmFnb24ncyBjaG9pY2UgdGhhdCBpcyB3aXRoaW4gMTIwIGZ0LiBvZiB0aGUgZHJhZ29uIGFuZCBhd2FyZSBvZiBpdCBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxNCBXaXNkb20gc2F2aW5nIHRocm93IG9yIGJlY29tZSBmcmlnaHRlbmVkIGZvciAxIG1pbnV0ZS4gQSBjcmVhdHVyZSBjYW4gcmVwZWF0IHRoZSBzYXZpbmcgdGhyb3cgYXQgdGhlIGVuZCBvZiBlYWNoIG9mIGl0cyB0dXJucywgZW5kaW5nIHRoZSBlZmZlY3Qgb24gaXRzZWxmIG9uIGEgc3VjY2Vzcy4gSWYgYSBjcmVhdHVyZSdzIHNhdmluZyB0aHJvdyBpcyBzdWNjZXNzZnVsIG9yIHRoZSBlZmZlY3QgZW5kcyBmb3IgaXQsIHRoZSBjcmVhdHVyZSBpcyBpbW11bmUgdG8gdGhlIGRyYWdvbidzIEZyaWdodGZ1bCBQcmVzZW5jZSBmb3IgdGhlIG5leHQgMjQgaG91cnMuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQ29sZCBCcmVhdGggKFJlY2hhcmdlIDUtNilcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBkcmFnb24gZXhoYWxlcyBhbiBpY3kgYmxhc3QgaW4gYSA2MC1mb290IGNvbmUuIEVhY2ggY3JlYXR1cmUgaW4gdGhhdCBhcmVhIG11c3QgbWFrZSBhIERDIDE5IENvbnN0aXR1dGlvbiBzYXZpbmcgdGhyb3csIHRha2luZyA1NCAoMTJkOCkgY29sZCBkYW1hZ2Ugb24gYSBmYWlsZWQgc2F2ZSwgb3IgaGFsZiBhcyBtdWNoIGRhbWFnZSBvbiBhIHN1Y2Nlc3NmdWwgb25lLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIxMmQ4XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgbGVnZW5kYXJ5X2FjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkRldGVjdFwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGRyYWdvbiBtYWtlcyBhIFdpc2RvbSAoUGVyY2VwdGlvbikgY2hlY2suXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiVGFpbCBBdHRhY2tcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBkcmFnb24gbWFrZXMgYSB0YWlsIGF0dGFjay5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJXaW5nIEF0dGFjayAoQ29zdHMgMiBBY3Rpb25zKVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGRyYWdvbiBiZWF0cyBpdHMgd2luZ3MuIEVhY2ggY3JlYXR1cmUgd2l0aGluIDEwIGZ0LiBvZiB0aGUgZHJhZ29uIG11c3Qgc3VjY2VlZCBvbiBhIERDIDE5IERleHRlcml0eSBzYXZpbmcgdGhyb3cgb3IgdGFrZSAxMyAoMmQ2ICsgNikgYmx1ZGdlb25pbmcgZGFtYWdlIGFuZCBiZSBrbm9ja2VkIHByb25lLiBUaGUgZHJhZ29uIGNhbiB0aGVuIGZseSB1cCB0byBoYWxmIGl0cyBmbHlpbmcgc3BlZWQuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJBaXIgRWxlbWVudGFsXCIsXG4gICAgICAgIHNpemU6IFwiTGFyZ2VcIixcbiAgICAgICAgdHlwZTogXCJlbGVtZW50YWxcIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcIm5ldXRyYWxcIixcbiAgICAgICAgYWM6IDE1LFxuICAgICAgICBocDogOTAsXG4gICAgICAgIGhpdF9kaWNlOiBcIjEyZDEwICsgMjRcIixcbiAgICAgICAgc3BlZWQ6IFwiZmx5IDkwIGZ0LiAoaG92ZXIpXCIsXG4gICAgICAgIHN0YXRzOiBbMTQsIDIwLCAxNCwgNiwgMTAsIDZdLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6XG4gICAgICAgICAgICBcImxpZ2h0bmluZzsgdGh1bmRlcjsgYmx1ZGdlb25pbmcsIHBpZXJjaW5nLCBhbmQgc2xhc2hpbmcgZnJvbSBub25tYWdpY2FsIHdlYXBvbnNcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwicG9pc29uXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOlxuICAgICAgICAgICAgXCJleGhhdXN0aW9uLCBncmFwcGxlZCwgcGFyYWx5emVkLCBwZXRyaWZpZWQsIHBvaXNvbmVkLCBwcm9uZSwgcmVzdHJhaW5lZCwgdW5jb25zY2lvdXNcIixcbiAgICAgICAgc2Vuc2VzOiBcImRhcmt2aXNpb24gNjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTBcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcIkF1cmFuXCIsXG4gICAgICAgIGNyOiBcIjVcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJBaXIgRm9ybVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGVsZW1lbnRhbCBjYW4gZW50ZXIgYSBob3N0aWxlIGNyZWF0dXJlJ3Mgc3BhY2UgYW5kIHN0b3AgdGhlcmUuIEl0IGNhbiBtb3ZlIHRocm91Z2ggYSBzcGFjZSBhcyBuYXJyb3cgYXMgMSBpbmNoIHdpZGUgd2l0aG91dCBzcXVlZXppbmcuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZWxlbWVudGFsIG1ha2VzIHR3byBzbGFtIGF0dGFja3MuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiU2xhbVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzggdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxNCAoMmQ4ICsgNSkgYmx1ZGdlb25pbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogOCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIyZDhcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJXaGlybHdpbmQgKFJlY2hhcmdlIDQtNilcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIkVhY2ggY3JlYXR1cmUgaW4gdGhlIGVsZW1lbnRhbCdzIHNwYWNlIG11c3QgbWFrZSBhIERDIDEzIFN0cmVuZ3RoIHNhdmluZyB0aHJvdy4gT24gYSBmYWlsdXJlLCBhIHRhcmdldCB0YWtlcyAxNSAoM2Q4ICsgMikgYmx1ZGdlb25pbmcgZGFtYWdlIGFuZCBpcyBmbHVuZyB1cCAyMCBmZWV0IGF3YXkgZnJvbSB0aGUgZWxlbWVudGFsIGluIGEgcmFuZG9tIGRpcmVjdGlvbiBhbmQga25vY2tlZCBwcm9uZS4gSWYgYSB0aHJvd24gdGFyZ2V0IHN0cmlrZXMgYW4gb2JqZWN0LCBzdWNoIGFzIGEgd2FsbCBvciBmbG9vciwgdGhlIHRhcmdldCB0YWtlcyAzICgxZDYpIGJsdWRnZW9uaW5nIGRhbWFnZSBmb3IgZXZlcnkgMTAgZmVldCBpdCB3YXMgdGhyb3duLiBJZiB0aGUgdGFyZ2V0IGlzIHRocm93biBhdCBhbm90aGVyIGNyZWF0dXJlLCB0aGF0IGNyZWF0dXJlIG11c3Qgc3VjY2VlZCBvbiBhIERDIDEzIERleHRlcml0eSBzYXZpbmcgdGhyb3cgb3IgdGFrZSB0aGUgc2FtZSBkYW1hZ2UgYW5kIGJlIGtub2NrZWQgcHJvbmUuXFxcXG5JZiB0aGUgc2F2aW5nIHRocm93IGlzIHN1Y2Nlc3NmdWwsIHRoZSB0YXJnZXQgdGFrZXMgaGFsZiB0aGUgYmx1ZGdlb25pbmcgZGFtYWdlIGFuZCBpc24ndCBmbHVuZyBhd2F5IG9yIGtub2NrZWQgcHJvbmUuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJBbmNpZW50IEJsYWNrIERyYWdvblwiLFxuICAgICAgICBzaXplOiBcIkdhcmdhbnR1YW5cIixcbiAgICAgICAgdHlwZTogXCJkcmFnb25cIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcImNoYW90aWMgZXZpbFwiLFxuICAgICAgICBhYzogMjIsXG4gICAgICAgIGhwOiAzNjcsXG4gICAgICAgIGhpdF9kaWNlOiBcIjIxZDIwICsgMTQ2XCIsXG4gICAgICAgIHNwZWVkOiBcIjQwIGZ0LiwgZmx5IDgwIGZ0Liwgc3dpbSA0MCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsyNywgMTQsIDI1LCAxNiwgMTUsIDE5XSxcbiAgICAgICAgc2F2ZXM6IFtcbiAgICAgICAgICAgIHsgZGV4dGVyaXR5OiA5IH0sXG4gICAgICAgICAgICB7IGNvbnN0aXR1dGlvbjogMTQgfSxcbiAgICAgICAgICAgIHsgd2lzZG9tOiA5IH0sXG4gICAgICAgICAgICB7IGNoYXJpc21hOiAxMSB9XG4gICAgICAgIF0sXG4gICAgICAgIHNraWxsc2F2ZXM6IFt7IHBlcmNlcHRpb246IDE2IH0sIHsgc3RlYWx0aDogOSB9XSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczogXCJhY2lkXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBzZW5zZXM6IFwiYmxpbmRzaWdodCA2MCBmdC4sIGRhcmt2aXNpb24gMTIwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDI2XCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJDb21tb24sIERyYWNvbmljXCIsXG4gICAgICAgIGNyOiBcIjIxXCIsXG4gICAgICAgIHRyYWl0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQW1waGliaW91c1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGRyYWdvbiBjYW4gYnJlYXRoZSBhaXIgYW5kIHdhdGVyLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkxlZ2VuZGFyeSBSZXNpc3RhbmNlICgzL0RheSlcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIklmIHRoZSBkcmFnb24gZmFpbHMgYSBzYXZpbmcgdGhyb3csIGl0IGNhbiBjaG9vc2UgdG8gc3VjY2VlZCBpbnN0ZWFkLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJNdWx0aWF0dGFja1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGRyYWdvbiBjYW4gdXNlIGl0cyBGcmlnaHRmdWwgUHJlc2VuY2UuIEl0IHRoZW4gbWFrZXMgdGhyZWUgYXR0YWNrczogb25lIHdpdGggaXRzIGJpdGUgYW5kIHR3byB3aXRoIGl0cyBjbGF3cy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJCaXRlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOisgMTUgdG8gaGl0LCByZWFjaCAxNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTkgKDJkMTAgKyA4KSBwaWVyY2luZyBkYW1hZ2UgcGx1cyA5ICgyZDgpIGFjaWQgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMTUsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMmQxMCArIDJkOFwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogOFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkNsYXdcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICsxNSB0byBoaXQsIHJlYWNoIDEwIGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxNSAoMmQ2ICsgOCkgc2xhc2hpbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMTUsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMmQ2XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiA4XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiVGFpbFwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzE1IHRvIGhpdCwgcmVhY2ggMjAgZnQgLiwgb25lIHRhcmdldC4gSGl0OiAxNyAoMmQ4ICsgOCkgYmx1ZGdlb25pbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMTUsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMmQ4XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiA4XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiRnJpZ2h0ZnVsIFByZXNlbmNlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJFYWNoIGNyZWF0dXJlIG9mIHRoZSBkcmFnb24ncyBjaG9pY2UgdGhhdCBpcyB3aXRoaW4gMTIwIGZlZXQgb2YgdGhlIGRyYWdvbiBhbmQgYXdhcmUgb2YgaXQgbXVzdCBzdWNjZWVkIG9uIGEgREMgMTkgV2lzZG9tIHNhdmluZyB0aHJvdyBvciBiZWNvbWUgZnJpZ2h0ZW5lZCBmb3IgMSBtaW51dGUuIEEgY3JlYXR1cmUgY2FuIHJlcGVhdCB0aGUgc2F2aW5nIHRocm93IGF0IHRoZSBlbmQgb2YgZWFjaCBvZiBpdHMgdHVybnMsIGVuZGluZyB0aGUgZWZmZWN0IG9uIGl0c2VsZiBvbiBhIHN1Y2Nlc3MuIElmIGEgY3JlYXR1cmUncyBzYXZpbmcgdGhyb3cgaXMgc3VjY2Vzc2Z1bCBvciB0aGUgZWZmZWN0IGVuZHMgZm9yIGl0LCB0aGUgY3JlYXR1cmUgaXMgaW1tdW5lIHRvIHRoZSBkcmFnb24ncyBGcmlnaHRmdWwgUHJlc2VuY2UgZm9yIHRoZSBuZXh0IDI0IGhvdXJzLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkFjaWQgQnJlYXRoIChSZWNoYXJnZSA1LTYpXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZHJhZ29uIGV4aGFsZXMgYWNpZCBpbiBhIDkwLWZvb3QgbGluZSB0aGF0IGlzIDEwIGZlZXQgd2lkZS4gRWFjaCBjcmVhdHVyZSBpbiB0aGF0IGxpbmUgbXVzdCBtYWtlIGEgREMgMjIgRGV4dGVyaXR5IHNhdmluZyB0aHJvdywgdGFraW5nIDY3ICgxNWQ4KSBhY2lkIGRhbWFnZSBvbiBhIGZhaWxlZCBzYXZlLCBvciBoYWxmIGFzIG11Y2ggZGFtYWdlIG9uIGEgc3VjY2Vzc2Z1bCBvbmUuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGxlZ2VuZGFyeV9hY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJEZXRlY3RcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBkcmFnb24gbWFrZXMgYSBXaXNkb20gKFBlcmNlcHRpb24pIGNoZWNrLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlRhaWwgQXR0YWNrXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZHJhZ29uIG1ha2VzIGEgdGFpbCBhdHRhY2suXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiV2luZyBBdHRhY2sgKENvc3RzIDIgQWN0aW9ucylcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBkcmFnb24gYmVhdHMgaXRzIHdpbmdzLiBFYWNoIGNyZWF0dXJlIHdpdGhpbiAxNSBmdC4gb2YgdGhlIGRyYWdvbiBtdXN0IHN1Y2NlZWQgb24gYSBEQyAyMyBEZXh0ZXJpdHkgc2F2aW5nIHRocm93IG9yIHRha2UgMTUgKDJkNiArIDgpIGJsdWRnZW9uaW5nIGRhbWFnZSBhbmQgYmUga25vY2tlZCBwcm9uZS4gVGhlIGRyYWdvbiBjYW4gdGhlbiBmbHkgdXAgdG8gaGFsZiBpdHMgZmx5aW5nIHNwZWVkLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiQW5jaWVudCBCbHVlIERyYWdvblwiLFxuICAgICAgICBzaXplOiBcIkdhcmdhbnR1YW5cIixcbiAgICAgICAgdHlwZTogXCJkcmFnb25cIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcImxhd2Z1bCBldmlsXCIsXG4gICAgICAgIGFjOiAyMixcbiAgICAgICAgaHA6IDQ4MSxcbiAgICAgICAgaGl0X2RpY2U6IFwiMjZkMjAgKyAyMDhcIixcbiAgICAgICAgc3BlZWQ6IFwiNDAgZnQuLCBidXJyb3cgNDAgZnQuLCBmbHkgODAgZnQuXCIsXG4gICAgICAgIHN0YXRzOiBbMjksIDEwLCAyNywgMTgsIDE3LCAyMV0sXG4gICAgICAgIHNhdmVzOiBbXG4gICAgICAgICAgICB7IGRleHRlcml0eTogNyB9LFxuICAgICAgICAgICAgeyBjb25zdGl0dXRpb246IDE1IH0sXG4gICAgICAgICAgICB7IHdpc2RvbTogMTAgfSxcbiAgICAgICAgICAgIHsgY2hhcmlzbWE6IDEyIH1cbiAgICAgICAgXSxcbiAgICAgICAgc2tpbGxzYXZlczogW3sgcGVyY2VwdGlvbjogMTcgfSwgeyBzdGVhbHRoOiA3IH1dLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcImxpZ2h0bmluZ1wiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcbiAgICAgICAgc2Vuc2VzOiBcImJsaW5kc2lnaHQgNjAgZnQuLCBkYXJrdmlzaW9uIDEyMCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAyN1wiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiQ29tbW9uLCBEcmFjb25pY1wiLFxuICAgICAgICBjcjogXCIyM1wiLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJNdWx0aWF0dGFja1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGRyYWdvbiBjYW4gdXNlIGl0cyBGcmlnaHRmdWwgUHJlc2VuY2UuIEl0IHRoZW4gbWFrZXMgdGhyZWUgYXR0YWNrczogb25lIHdpdGggaXRzIGJpdGUgYW5kIHR3byB3aXRoIGl0cyBjbGF3cy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJCaXRlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMTYgdG8gaGl0LCByZWFjaCAxNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMjAgKDJkMTAgKyA5KSBwaWVyY2luZyBkYW1hZ2UgcGx1cyAxMSAoMmQxMCkgbGlnaHRuaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDE2LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjJkMTAgKyAyZDEwXCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiA5XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQ2xhd1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzE2IHRvIGhpdCwgcmVhY2ggMTAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDE2ICgyZDYgKyA5KSBzbGFzaGluZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAxNixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIyZDZcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDlcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJUYWlsXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMTYgdG8gaGl0LCByZWFjaCAyMCBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTggKDJkOCArIDkpIGJsdWRnZW9uaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDE2LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjJkOFwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogOVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkZyaWdodGZ1bCBQcmVzZW5jZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiRWFjaCBjcmVhdHVyZSBvZiB0aGUgZHJhZ29uJ3MgY2hvaWNlIHRoYXQgaXMgd2l0aGluIDEyMCBmZWV0IG9mIHRoZSBkcmFnb24gYW5kIGF3YXJlIG9mIGl0IG11c3Qgc3VjY2VlZCBvbiBhIERDIDIwIFdpc2RvbSBzYXZpbmcgdGhyb3cgb3IgYmVjb21lIGZyaWdodGVuZWQgZm9yIDEgbWludXRlLiBBIGNyZWF0dXJlIGNhbiByZXBlYXQgdGhlIHNhdmluZyB0aHJvdyBhdCB0aGUgZW5kIG9mIGVhY2ggb2YgaXRzIHR1cm5zLCBlbmRpbmcgdGhlIGVmZmVjdCBvbiBpdHNlbGYgb24gYSBzdWNjZXNzLiBJZiBhIGNyZWF0dXJlJ3Mgc2F2aW5nIHRocm93IGlzIHN1Y2Nlc3NmdWwgb3IgdGhlIGVmZmVjdCBlbmRzIGZvciBpdCwgdGhlIGNyZWF0dXJlIGlzIGltbXVuZSB0byB0aGUgZHJhZ29uJ3MgRnJpZ2h0ZnVsIFByZXNlbmNlIGZvciB0aGUgbmV4dCAyNCBob3Vycy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJMaWdodG5pbmcgQnJlYXRoIChSZWNoYXJnZSA1LTYpXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZHJhZ29uIGV4aGFsZXMgbGlnaHRuaW5nIGluIGEgMTIwLWZvb3QgbGluZSB0aGF0IGlzIDEwIGZlZXQgd2lkZS4gRWFjaCBjcmVhdHVyZSBpbiB0aGF0IGxpbmUgbXVzdCBtYWtlIGEgREMgMjMgRGV4dGVyaXR5IHNhdmluZyB0aHJvdywgdGFraW5nIDg4ICgxNmQxMCkgbGlnaHRuaW5nIGRhbWFnZSBvbiBhIGZhaWxlZCBzYXZlLCBvciBoYWxmIGFzIG11Y2ggZGFtYWdlIG9uIGEgc3VjY2Vzc2Z1bCBvbmUuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjE2ZDEwXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgbGVnZW5kYXJ5X2FjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkRldGVjdFwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGRyYWdvbiBtYWtlcyBhIFdpc2RvbSAoUGVyY2VwdGlvbikgY2hlY2suXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiVGFpbCBBdHRhY2tcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBkcmFnb24gbWFrZXMgYSB0YWlsIGF0dGFjay5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJXaW5nIEF0dGFjayAoQ29zdHMgMiBBY3Rpb25zKVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGRyYWdvbiBiZWF0cyBpdHMgd2luZ3MuIEVhY2ggY3JlYXR1cmUgd2l0aGluIDE1IGZ0LiBvZiB0aGUgZHJhZ29uIG11c3Qgc3VjY2VlZCBvbiBhIERDIDI0IERleHRlcml0eSBzYXZpbmcgdGhyb3cgb3IgdGFrZSAxNiAoMmQ2ICsgOSkgYmx1ZGdlb25pbmcgZGFtYWdlIGFuZCBiZSBrbm9ja2VkIHByb25lLiBUaGUgZHJhZ29uIGNhbiB0aGVuIGZseSB1cCB0byBoYWxmIGl0cyBmbHlpbmcgc3BlZWQuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJBbmNpZW50IEJyYXNzIERyYWdvblwiLFxuICAgICAgICBzaXplOiBcIkdhcmdhbnR1YW5cIixcbiAgICAgICAgdHlwZTogXCJkcmFnb25cIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcImNoYW90aWMgZ29vZFwiLFxuICAgICAgICBhYzogMjAsXG4gICAgICAgIGhwOiAyOTcsXG4gICAgICAgIGhpdF9kaWNlOiBcIjE3ZDIwICsgMTE4XCIsXG4gICAgICAgIHNwZWVkOiBcIjQwIGZ0LiwgYnVycm93IDQwIGZ0LiwgZmx5IDgwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzI3LCAxMCwgMjUsIDE2LCAxNSwgMTldLFxuICAgICAgICBzYXZlczogW1xuICAgICAgICAgICAgeyBkZXh0ZXJpdHk6IDYgfSxcbiAgICAgICAgICAgIHsgY29uc3RpdHV0aW9uOiAxMyB9LFxuICAgICAgICAgICAgeyB3aXNkb206IDggfSxcbiAgICAgICAgICAgIHsgY2hhcmlzbWE6IDEwIH1cbiAgICAgICAgXSxcbiAgICAgICAgc2tpbGxzYXZlczogW1xuICAgICAgICAgICAgeyBoaXN0b3J5OiA5IH0sXG4gICAgICAgICAgICB7IHBlcnN1YXNpb246IDEwIH0sXG4gICAgICAgICAgICB7IHBlcmNlcHRpb246IDE0IH0sXG4gICAgICAgICAgICB7IHN0ZWFsdGg6IDYgfVxuICAgICAgICBdLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcImZpcmVcIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIHNlbnNlczogXCJibGluZHNpZ2h0IDYwIGZ0LiwgZGFya3Zpc2lvbiAxMjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMjRcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcIkNvbW1vbiwgRHJhY29uaWNcIixcbiAgICAgICAgY3I6IFwiMjBcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJMZWdlbmRhcnkgUmVzaXN0YW5jZSAoMy9EYXkpXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJJZiB0aGUgZHJhZ29uIGZhaWxzIGEgc2F2aW5nIHRocm93LCBpdCBjYW4gY2hvb3NlIHRvIHN1Y2NlZWQgaW5zdGVhZC5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBkcmFnb24gY2FuIHVzZSBpdHMgRnJpZ2h0ZnVsIFByZXNlbmNlLiBJdCB0aGVuIG1ha2VzIHRocmVlIGF0dGFja3M6IG9uZSB3aXRoIGl0cyBiaXRlIGFuZCB0d28gd2l0aCBpdHMgY2xhd3MuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQml0ZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzE0IHRvIGhpdCwgcmVhY2ggMTUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDE5ICgyZDEwICsgOCkgcGllcmNpbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMTQsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMmQxMFwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogOFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkNsYXdcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICsxNCB0byBoaXQsIHJlYWNoIDEwIGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxNSAoMmQ2ICsgOCkgc2xhc2hpbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMTQsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMmQ2XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiA4XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiVGFpbFwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzE0IHRvIGhpdCwgcmVhY2ggMjAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDE3ICgyZDggKyA4KSBibHVkZ2VvbmluZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAxNCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIyZDhcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDhcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJGcmlnaHRmdWwgUHJlc2VuY2VcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIkVhY2ggY3JlYXR1cmUgb2YgdGhlIGRyYWdvbidzIGNob2ljZSB0aGF0IGlzIHdpdGhpbiAxMjAgZmVldCBvZiB0aGUgZHJhZ29uIGFuZCBhd2FyZSBvZiBpdCBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxOCBXaXNkb20gc2F2aW5nIHRocm93IG9yIGJlY29tZSBmcmlnaHRlbmVkIGZvciAxIG1pbnV0ZS4gQSBjcmVhdHVyZSBjYW4gcmVwZWF0IHRoZSBzYXZpbmcgdGhyb3cgYXQgdGhlIGVuZCBvZiBlYWNoIG9mIGl0cyB0dXJucywgZW5kaW5nIHRoZSBlZmZlY3Qgb24gaXRzZWxmIG9uIGEgc3VjY2Vzcy4gSWYgYSBjcmVhdHVyZSdzIHNhdmluZyB0aHJvdyBpcyBzdWNjZXNzZnVsIG9yIHRoZSBlZmZlY3QgZW5kcyBmb3IgaXQsIHRoZSBjcmVhdHVyZSBpcyBpbW11bmUgdG8gdGhlIGRyYWdvbidzIEZyaWdodGZ1bCBQcmVzZW5jZSBmb3IgdGhlIG5leHQgMjQgaG91cnMuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQnJlYXRoIFdlYXBvbnMgKFJlY2hhcmdlIDUtNilcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBkcmFnb24gdXNlcyBvbmUgb2YgdGhlIGZvbGxvd2luZyBicmVhdGggd2VhcG9uczpcXFxcbkZpcmUgQnJlYXRoLiBUaGUgZHJhZ29uIGV4aGFsZXMgZmlyZSBpbiBhbiA5MC1mb290IGxpbmUgdGhhdCBpcyAxMCBmZWV0IHdpZGUuIEVhY2ggY3JlYXR1cmUgaW4gdGhhdCBsaW5lIG11c3QgbWFrZSBhIERDIDIxIERleHRlcml0eSBzYXZpbmcgdGhyb3csIHRha2luZyA1NiAoMTZkNikgZmlyZSBkYW1hZ2Ugb24gYSBmYWlsZWQgc2F2ZSwgb3IgaGFsZiBhcyBtdWNoIGRhbWFnZSBvbiBhIHN1Y2Nlc3NmdWwgb25lLlxcXFxuU2xlZXAgQnJlYXRoLiBUaGUgZHJhZ29uIGV4aGFsZXMgc2xlZXAgZ2FzIGluIGEgOTAtZm9vdCBjb25lLiBFYWNoIGNyZWF0dXJlIGluIHRoYXQgYXJlYSBtdXN0IHN1Y2NlZWQgb24gYSBEQyAyMSBDb25zdGl0dXRpb24gc2F2aW5nIHRocm93IG9yIGZhbGwgdW5jb25zY2lvdXMgZm9yIDEwIG1pbnV0ZXMuIFRoaXMgZWZmZWN0IGVuZHMgZm9yIGEgY3JlYXR1cmUgaWYgdGhlIGNyZWF0dXJlIHRha2VzIGRhbWFnZSBvciBzb21lb25lIHVzZXMgYW4gYWN0aW9uIHRvIHdha2UgaXQuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjE2ZDZcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkNoYW5nZSBTaGFwZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGRyYWdvbiBtYWdpY2FsbHkgcG9seW1vcnBocyBpbnRvIGEgaHVtYW5vaWQgb3IgYmVhc3QgdGhhdCBoYXMgYSBjaGFsbGVuZ2UgcmF0aW5nIG5vIGhpZ2hlciB0aGFuIGl0cyBvd24sIG9yIGJhY2sgaW50byBpdHMgdHJ1ZSBmb3JtLiBJdCByZXZlcnRzIHRvIGl0cyB0cnVlIGZvcm0gaWYgaXQgZGllcy4gQW55IGVxdWlwbWVudCBpdCBpcyB3ZWFyaW5nIG9yIGNhcnJ5aW5nIGlzIGFic29yYmVkIG9yIGJvcm5lIGJ5IHRoZSBuZXcgZm9ybSAodGhlIGRyYWdvbidzIGNob2ljZSkuXFxcXG5JbiBhIG5ldyBmb3JtLCB0aGUgZHJhZ29uIHJldGFpbnMgaXRzIGFsaWdubWVudCwgaGl0IHBvaW50cywgSGl0IERpY2UsIGFiaWxpdHkgdG8gc3BlYWssIHByb2ZpY2llbmNpZXMsIExlZ2VuZGFyeSBSZXNpc3RhbmNlLCBsYWlyIGFjdGlvbnMsIGFuZCBJbnRlbGxpZ2VuY2UsIFdpc2RvbSwgYW5kIENoYXJpc21hIHNjb3JlcywgYXMgd2VsbCBhcyB0aGlzIGFjdGlvbi4gSXRzIHN0YXRpc3RpY3MgYW5kIGNhcGFiaWxpdGllcyBhcmUgb3RoZXJ3aXNlIHJlcGxhY2VkIGJ5IHRob3NlIG9mIHRoZSBuZXcgZm9ybSwgZXhjZXB0IGFueSBjbGFzcyBmZWF0dXJlcyBvciBsZWdlbmRhcnkgYWN0aW9ucyBvZiB0aGF0IGZvcm0uXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGxlZ2VuZGFyeV9hY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJEZXRlY3RcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBkcmFnb24gbWFrZXMgYSBXaXNkb20gKFBlcmNlcHRpb24pIGNoZWNrLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlRhaWwgQXR0YWNrXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZHJhZ29uIG1ha2VzIGEgdGFpbCBhdHRhY2suXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiV2luZyBBdHRhY2sgKENvc3RzIDIgQWN0aW9ucylcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBkcmFnb24gYmVhdHMgaXRzIHdpbmdzLiBFYWNoIGNyZWF0dXJlIHdpdGhpbiAxNSBmdC4gb2YgdGhlIGRyYWdvbiBtdXN0IHN1Y2NlZWQgb24gYSBEQyAyMiBEZXh0ZXJpdHkgc2F2aW5nIHRocm93IG9yIHRha2UgMTUgKDJkNiArIDgpIGJsdWRnZW9uaW5nIGRhbWFnZSBhbmQgYmUga25vY2tlZCBwcm9uZS4gVGhlIGRyYWdvbiBjYW4gdGhlbiBmbHkgdXAgdG8gaGFsZiBpdHMgZmx5aW5nIHNwZWVkLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiQW5jaWVudCBCcm9uemUgRHJhZ29uXCIsXG4gICAgICAgIHNpemU6IFwiR2FyZ2FudHVhblwiLFxuICAgICAgICB0eXBlOiBcImRyYWdvblwiLFxuICAgICAgICBzdWJ0eXBlOiBcIlwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwibGF3ZnVsIGdvb2RcIixcbiAgICAgICAgYWM6IDIyLFxuICAgICAgICBocDogNDQ0LFxuICAgICAgICBoaXRfZGljZTogXCIyNGQyMCArIDE5MlwiLFxuICAgICAgICBzcGVlZDogXCI0MCBmdC4sIGZseSA4MCBmdC4sIHN3aW0gNDAgZnQuXCIsXG4gICAgICAgIHN0YXRzOiBbMjksIDEwLCAyNywgMTgsIDE3LCAyMV0sXG4gICAgICAgIHNhdmVzOiBbXG4gICAgICAgICAgICB7IGRleHRlcml0eTogNyB9LFxuICAgICAgICAgICAgeyBjb25zdGl0dXRpb246IDE1IH0sXG4gICAgICAgICAgICB7IHdpc2RvbTogMTAgfSxcbiAgICAgICAgICAgIHsgY2hhcmlzbWE6IDEyIH1cbiAgICAgICAgXSxcbiAgICAgICAgc2tpbGxzYXZlczogW3sgaW5zaWdodDogMTAgfSwgeyBwZXJjZXB0aW9uOiAxNyB9LCB7IHN0ZWFsdGg6IDcgfV0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwibGlnaHRuaW5nXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBzZW5zZXM6IFwiYmxpbmRzaWdodCA2MCBmdC4sIGRhcmt2aXNpb24gMTIwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDI3XCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJDb21tb24sIERyYWNvbmljXCIsXG4gICAgICAgIGNyOiBcIjIyXCIsXG4gICAgICAgIHRyYWl0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQW1waGliaW91c1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGRyYWdvbiBjYW4gYnJlYXRoZSBhaXIgYW5kIHdhdGVyLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkxlZ2VuZGFyeSBSZXNpc3RhbmNlICgzL0RheSlcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIklmIHRoZSBkcmFnb24gZmFpbHMgYSBzYXZpbmcgdGhyb3csIGl0IGNhbiBjaG9vc2UgdG8gc3VjY2VlZCBpbnN0ZWFkLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJNdWx0aWF0dGFja1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGRyYWdvbiBjYW4gdXNlIGl0cyBGcmlnaHRmdWwgUHJlc2VuY2UuIEl0IHRoZW4gbWFrZXMgdGhyZWUgYXR0YWNrczogb25lIHdpdGggaXRzIGJpdGUgYW5kIHR3byB3aXRoIGl0cyBjbGF3cy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJCaXRlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMTYgdG8gaGl0LCByZWFjaCAxNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMjAgKDJkMTAgKyA5KSBwaWVyY2luZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAxNixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIyZDEwXCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiA5XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQ2xhd1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzE2IHRvIGhpdCwgcmVhY2ggMTAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDE2ICgyZDYgKyA5KSBzbGFzaGluZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAxNixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIxZDZcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDlcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJUYWlsXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMTYgdG8gaGl0LCByZWFjaCAyMCBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTggKDJkOCArIDkpIGJsdWRnZW9uaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDAsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMmQ4XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiA5XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiRnJpZ2h0ZnVsIFByZXNlbmNlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJFYWNoIGNyZWF0dXJlIG9mIHRoZSBkcmFnb24ncyBjaG9pY2UgdGhhdCBpcyB3aXRoaW4gMTIwIGZlZXQgb2YgdGhlIGRyYWdvbiBhbmQgYXdhcmUgb2YgaXQgbXVzdCBzdWNjZWVkIG9uIGEgREMgMjAgV2lzZG9tIHNhdmluZyB0aHJvdyBvciBiZWNvbWUgZnJpZ2h0ZW5lZCBmb3IgMSBtaW51dGUuIEEgY3JlYXR1cmUgY2FuIHJlcGVhdCB0aGUgc2F2aW5nIHRocm93IGF0IHRoZSBlbmQgb2YgZWFjaCBvZiBpdHMgdHVybnMsIGVuZGluZyB0aGUgZWZmZWN0IG9uIGl0c2VsZiBvbiBhIHN1Y2Nlc3MuIElmIGEgY3JlYXR1cmUncyBzYXZpbmcgdGhyb3cgaXMgc3VjY2Vzc2Z1bCBvciB0aGUgZWZmZWN0IGVuZHMgZm9yIGl0LCB0aGUgY3JlYXR1cmUgaXMgaW1tdW5lIHRvIHRoZSBkcmFnb24ncyBGcmlnaHRmdWwgUHJlc2VuY2UgZm9yIHRoZSBuZXh0IDI0IGhvdXJzLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkJyZWF0aCBXZWFwb25zIChSZWNoYXJnZSA1LTYpXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZHJhZ29uIHVzZXMgb25lIG9mIHRoZSBmb2xsb3dpbmcgYnJlYXRoIHdlYXBvbnMuXFxcXG5MaWdodG5pbmcgQnJlYXRoLiBUaGUgZHJhZ29uIGV4aGFsZXMgbGlnaHRuaW5nIGluIGEgMTIwLWZvb3QgbGluZSB0aGF0IGlzIDEwIGZlZXQgd2lkZS4gRWFjaCBjcmVhdHVyZSBpbiB0aGF0IGxpbmUgbXVzdCBtYWtlIGEgREMgMjMgRGV4dGVyaXR5IHNhdmluZyB0aHJvdywgdGFraW5nIDg4ICgxNmQxMCkgbGlnaHRuaW5nIGRhbWFnZSBvbiBhIGZhaWxlZCBzYXZlLCBvciBoYWxmIGFzIG11Y2ggZGFtYWdlIG9uIGEgc3VjY2Vzc2Z1bCBvbmUuXFxcXG5SZXB1bHNpb24gQnJlYXRoLiBUaGUgZHJhZ29uIGV4aGFsZXMgcmVwdWxzaW9uIGVuZXJneSBpbiBhIDMwLWZvb3QgY29uZS4gRWFjaCBjcmVhdHVyZSBpbiB0aGF0IGFyZWEgbXVzdCBzdWNjZWVkIG9uIGEgREMgMjMgU3RyZW5ndGggc2F2aW5nIHRocm93LiBPbiBhIGZhaWxlZCBzYXZlLCB0aGUgY3JlYXR1cmUgaXMgcHVzaGVkIDYwIGZlZXQgYXdheSBmcm9tIHRoZSBkcmFnb24uXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjE2ZDEwXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJDaGFuZ2UgU2hhcGVcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBkcmFnb24gbWFnaWNhbGx5IHBvbHltb3JwaHMgaW50byBhIGh1bWFub2lkIG9yIGJlYXN0IHRoYXQgaGFzIGEgY2hhbGxlbmdlIHJhdGluZyBubyBoaWdoZXIgdGhhbiBpdHMgb3duLCBvciBiYWNrIGludG8gaXRzIHRydWUgZm9ybS4gSXQgcmV2ZXJ0cyB0byBpdHMgdHJ1ZSBmb3JtIGlmIGl0IGRpZXMuIEFueSBlcXVpcG1lbnQgaXQgaXMgd2VhcmluZyBvciBjYXJyeWluZyBpcyBhYnNvcmJlZCBvciBib3JuZSBieSB0aGUgbmV3IGZvcm0gKHRoZSBkcmFnb24ncyBjaG9pY2UpLlxcXFxuSW4gYSBuZXcgZm9ybSwgdGhlIGRyYWdvbiByZXRhaW5zIGl0cyBhbGlnbm1lbnQsIGhpdCBwb2ludHMsIEhpdCBEaWNlLCBhYmlsaXR5IHRvIHNwZWFrLCBwcm9maWNpZW5jaWVzLCBMZWdlbmRhcnkgUmVzaXN0YW5jZSwgbGFpciBhY3Rpb25zLCBhbmQgSW50ZWxsaWdlbmNlLCBXaXNkb20sIGFuZCBDaGFyaXNtYSBzY29yZXMsIGFzIHdlbGwgYXMgdGhpcyBhY3Rpb24uIEl0cyBzdGF0aXN0aWNzIGFuZCBjYXBhYmlsaXRpZXMgYXJlIG90aGVyd2lzZSByZXBsYWNlZCBieSB0aG9zZSBvZiB0aGUgbmV3IGZvcm0sIGV4Y2VwdCBhbnkgY2xhc3MgZmVhdHVyZXMgb3IgbGVnZW5kYXJ5IGFjdGlvbnMgb2YgdGhhdCBmb3JtLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBsZWdlbmRhcnlfYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiRGV0ZWN0XCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZHJhZ29uIG1ha2VzIGEgV2lzZG9tIChQZXJjZXB0aW9uKSBjaGVjay5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJUYWlsIEF0dGFja1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGRyYWdvbiBtYWtlcyBhIHRhaWwgYXR0YWNrLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIldpbmcgQXR0YWNrIChDb3N0cyAyIEFjdGlvbnMpXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZHJhZ29uIGJlYXRzIGl0cyB3aW5ncy4gRWFjaCBjcmVhdHVyZSB3aXRoaW4gMTUgZnQuIG9mIHRoZSBkcmFnb24gbXVzdCBzdWNjZWVkIG9uIGEgREMgMjQgRGV4dGVyaXR5IHNhdmluZyB0aHJvdyBvciB0YWtlIDE2ICgyZDYgKyA5KSBibHVkZ2VvbmluZyBkYW1hZ2UgYW5kIGJlIGtub2NrZWQgcHJvbmUuIFRoZSBkcmFnb24gY2FuIHRoZW4gZmx5IHVwIHRvIGhhbGYgaXRzIGZseWluZyBzcGVlZC5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIkFuY2llbnQgQ29wcGVyIERyYWdvblwiLFxuICAgICAgICBzaXplOiBcIkdhcmdhbnR1YW5cIixcbiAgICAgICAgdHlwZTogXCJkcmFnb25cIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcImNoYW90aWMgZ29vZFwiLFxuICAgICAgICBhYzogMjEsXG4gICAgICAgIGhwOiAzNTAsXG4gICAgICAgIGhpdF9kaWNlOiBcIjIwZDIwICsgMTQwXCIsXG4gICAgICAgIHNwZWVkOiBcIjQwIGZ0LiwgY2xpbWIgNDAgZnQuLCBmbHkgODAgZnQuXCIsXG4gICAgICAgIHN0YXRzOiBbMjcsIDEyLCAyNSwgMjAsIDE3LCAxOV0sXG4gICAgICAgIHNhdmVzOiBbXG4gICAgICAgICAgICB7IGRleHRlcml0eTogOCB9LFxuICAgICAgICAgICAgeyBjb25zdGl0dXRpb246IDE0IH0sXG4gICAgICAgICAgICB7IHdpc2RvbTogMTAgfSxcbiAgICAgICAgICAgIHsgY2hhcmlzbWE6IDExIH1cbiAgICAgICAgXSxcbiAgICAgICAgc2tpbGxzYXZlczogW3sgc3RlYWx0aDogOCB9LCB7IHBlcmNlcHRpb246IDE3IH0sIHsgZGVjZXB0aW9uOiAxMSB9XSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczogXCJhY2lkXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBzZW5zZXM6IFwiYmxpbmRzaWdodCA2MCBmdC4sIGRhcmt2aXNpb24gMTIwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDI3XCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJDb21tb24sIERyYWNvbmljXCIsXG4gICAgICAgIGNyOiBcIjIxXCIsXG4gICAgICAgIHRyYWl0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTGVnZW5kYXJ5IFJlc2lzdGFuY2UgKDMvRGF5KVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiSWYgdGhlIGRyYWdvbiBmYWlscyBhIHNhdmluZyB0aHJvdywgaXQgY2FuIGNob29zZSB0byBzdWNjZWVkIGluc3RlYWQuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZHJhZ29uIGNhbiB1c2UgaXRzIEZyaWdodGZ1bCBQcmVzZW5jZS4gSXQgdGhlbiBtYWtlcyB0aHJlZSBhdHRhY2tzOiBvbmUgd2l0aCBpdHMgYml0ZSBhbmQgdHdvIHdpdGggaXRzIGNsYXdzLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkJpdGVcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICsxNSB0byBoaXQsIHJlYWNoIDE1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxOSAoMmQxMCArIDgpIHBpZXJjaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDE1LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjJkMTBcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDhcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJDbGF3XCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMTUgdG8gaGl0LCByZWFjaCAxMCBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTUgKDJkNiArIDgpIHNsYXNoaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDE1LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjJkNlwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogOFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlRhaWxcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICsxNSB0byBoaXQsIHJlYWNoIDIwIGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxNyAoMmQ4ICsgOCkgYmx1ZGdlb25pbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMTUsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMmQ4XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiA4XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiRnJpZ2h0ZnVsIFByZXNlbmNlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJFYWNoIGNyZWF0dXJlIG9mIHRoZSBkcmFnb24ncyBjaG9pY2UgdGhhdCBpcyB3aXRoaW4gMTIwIGZlZXQgb2YgdGhlIGRyYWdvbiBhbmQgYXdhcmUgb2YgaXQgbXVzdCBzdWNjZWVkIG9uIGEgREMgMTkgV2lzZG9tIHNhdmluZyB0aHJvdyBvciBiZWNvbWUgZnJpZ2h0ZW5lZCBmb3IgMSBtaW51dGUuIEEgY3JlYXR1cmUgY2FuIHJlcGVhdCB0aGUgc2F2aW5nIHRocm93IGF0IHRoZSBlbmQgb2YgZWFjaCBvZiBpdHMgdHVybnMsIGVuZGluZyB0aGUgZWZmZWN0IG9uIGl0c2VsZiBvbiBhIHN1Y2Nlc3MuIElmIGEgY3JlYXR1cmUncyBzYXZpbmcgdGhyb3cgaXMgc3VjY2Vzc2Z1bCBvciB0aGUgZWZmZWN0IGVuZHMgZm9yIGl0LCB0aGUgY3JlYXR1cmUgaXMgaW1tdW5lIHRvIHRoZSBkcmFnb24ncyBGcmlnaHRmdWwgUHJlc2VuY2UgZm9yIHRoZSBuZXh0IDI0IGhvdXJzLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkJyZWF0aCBXZWFwb25zIChSZWNoYXJnZSA1LTYpXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZHJhZ29uIHVzZXMgb25lIG9mIHRoZSBmb2xsb3dpbmcgYnJlYXRoIHdlYXBvbnMuXFxcXG5BY2lkIEJyZWF0aC4gVGhlIGRyYWdvbiBleGhhbGVzIGFjaWQgaW4gYW4gOTAtZm9vdCBsaW5lIHRoYXQgaXMgMTAgZmVldCB3aWRlLiBFYWNoIGNyZWF0dXJlIGluIHRoYXQgbGluZSBtdXN0IG1ha2UgYSBEQyAyMiBEZXh0ZXJpdHkgc2F2aW5nIHRocm93LCB0YWtpbmcgNjMgKDE0ZDgpIGFjaWQgZGFtYWdlIG9uIGEgZmFpbGVkIHNhdmUsIG9yIGhhbGYgYXMgbXVjaCBkYW1hZ2Ugb24gYSBzdWNjZXNzZnVsIG9uZS5cXFxcblNsb3dpbmcgQnJlYXRoLiBUaGUgZHJhZ29uIGV4aGFsZXMgZ2FzIGluIGEgOTAtZm9vdCBjb25lLiBFYWNoIGNyZWF0dXJlIGluIHRoYXQgYXJlYSBtdXN0IHN1Y2NlZWQgb24gYSBEQyAyMiBDb25zdGl0dXRpb24gc2F2aW5nIHRocm93LiBPbiBhIGZhaWxlZCBzYXZlLCB0aGUgY3JlYXR1cmUgY2FuJ3QgdXNlIHJlYWN0aW9ucywgaXRzIHNwZWVkIGlzIGhhbHZlZCwgYW5kIGl0IGNhbid0IG1ha2UgbW9yZSB0aGFuIG9uZSBhdHRhY2sgb24gaXRzIHR1cm4uIEluIGFkZGl0aW9uLCB0aGUgY3JlYXR1cmUgY2FuIHVzZSBlaXRoZXIgYW4gYWN0aW9uIG9yIGEgYm9udXMgYWN0aW9uIG9uIGl0cyB0dXJuLCBidXQgbm90IGJvdGguIFRoZXNlIGVmZmVjdHMgbGFzdCBmb3IgMSBtaW51dGUuIFRoZSBjcmVhdHVyZSBjYW4gcmVwZWF0IHRoZSBzYXZpbmcgdGhyb3cgYXQgdGhlIGVuZCBvZiBlYWNoIG9mIGl0cyB0dXJucywgZW5kaW5nIHRoZSBlZmZlY3Qgb24gaXRzZWxmIHdpdGggYSBzdWNjZXNzZnVsIHNhdmUuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjE0ZDhcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkNoYW5nZSBTaGFwZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGRyYWdvbiBtYWdpY2FsbHkgcG9seW1vcnBocyBpbnRvIGEgaHVtYW5vaWQgb3IgYmVhc3QgdGhhdCBoYXMgYSBjaGFsbGVuZ2UgcmF0aW5nIG5vIGhpZ2hlciB0aGFuIGl0cyBvd24sIG9yIGJhY2sgaW50byBpdHMgdHJ1ZSBmb3JtLiBJdCByZXZlcnRzIHRvIGl0cyB0cnVlIGZvcm0gaWYgaXQgZGllcy4gQW55IGVxdWlwbWVudCBpdCBpcyB3ZWFyaW5nIG9yIGNhcnJ5aW5nIGlzIGFic29yYmVkIG9yIGJvcm5lIGJ5IHRoZSBuZXcgZm9ybSAodGhlIGRyYWdvbidzIGNob2ljZSkuXFxcXG5JbiBhIG5ldyBmb3JtLCB0aGUgZHJhZ29uIHJldGFpbnMgaXRzIGFsaWdubWVudCwgaGl0IHBvaW50cywgSGl0IERpY2UsIGFiaWxpdHkgdG8gc3BlYWssIHByb2ZpY2llbmNpZXMsIExlZ2VuZGFyeSBSZXNpc3RhbmNlLCBsYWlyIGFjdGlvbnMsIGFuZCBJbnRlbGxpZ2VuY2UsIFdpc2RvbSwgYW5kIENoYXJpc21hIHNjb3JlcywgYXMgd2VsbCBhcyB0aGlzIGFjdGlvbi4gSXRzIHN0YXRpc3RpY3MgYW5kIGNhcGFiaWxpdGllcyBhcmUgb3RoZXJ3aXNlIHJlcGxhY2VkIGJ5IHRob3NlIG9mIHRoZSBuZXcgZm9ybSwgZXhjZXB0IGFueSBjbGFzcyBmZWF0dXJlcyBvciBsZWdlbmRhcnkgYWN0aW9ucyBvZiB0aGF0IGZvcm0uXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGxlZ2VuZGFyeV9hY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJEZXRlY3RcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBkcmFnb24gbWFrZXMgYSBXaXNkb20gKFBlcmNlcHRpb24pIGNoZWNrLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlRhaWwgQXR0YWNrXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZHJhZ29uIG1ha2VzIGEgdGFpbCBhdHRhY2suXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiV2luZyBBdHRhY2sgKENvc3RzIDIgQWN0aW9ucylcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBkcmFnb24gYmVhdHMgaXRzIHdpbmdzLiBFYWNoIGNyZWF0dXJlIHdpdGhpbiAxNSBmdC4gb2YgdGhlIGRyYWdvbiBtdXN0IHN1Y2NlZWQgb24gYSBEQyAyMyBEZXh0ZXJpdHkgc2F2aW5nIHRocm93IG9yIHRha2UgMTUgKDJkNiArIDgpIGJsdWRnZW9uaW5nIGRhbWFnZSBhbmQgYmUga25vY2tlZCBwcm9uZS4gVGhlIGRyYWdvbiBjYW4gdGhlbiBmbHkgdXAgdG8gaGFsZiBpdHMgZmx5aW5nIHNwZWVkLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiQW5jaWVudCBHb2xkIERyYWdvblwiLFxuICAgICAgICBzaXplOiBcIkdhcmdhbnR1YW5cIixcbiAgICAgICAgdHlwZTogXCJkcmFnb25cIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcImxhd2Z1bCBnb29kXCIsXG4gICAgICAgIGFjOiAyMixcbiAgICAgICAgaHA6IDU0NixcbiAgICAgICAgaGl0X2RpY2U6IFwiMjhkMjAgKyAyNTJcIixcbiAgICAgICAgc3BlZWQ6IFwiNDAgZnQuLCBmbHkgODAgZnQuLCBzd2ltIDQwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzMwLCAxNCwgMjksIDE4LCAxNywgMjhdLFxuICAgICAgICBzYXZlczogW1xuICAgICAgICAgICAgeyBkZXh0ZXJpdHk6IDkgfSxcbiAgICAgICAgICAgIHsgY29uc3RpdHV0aW9uOiAxNiB9LFxuICAgICAgICAgICAgeyB3aXNkb206IDEwIH0sXG4gICAgICAgICAgICB7IGNoYXJpc21hOiAxNiB9XG4gICAgICAgIF0sXG4gICAgICAgIHNraWxsc2F2ZXM6IFtcbiAgICAgICAgICAgIHsgcGVyc3Vhc2lvbjogMTYgfSxcbiAgICAgICAgICAgIHsgc3RlYWx0aDogOSB9LFxuICAgICAgICAgICAgeyBwZXJjZXB0aW9uOiAxNyB9LFxuICAgICAgICAgICAgeyBpbnNpZ2h0OiAxMCB9XG4gICAgICAgIF0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwiZmlyZVwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcbiAgICAgICAgc2Vuc2VzOiBcImJsaW5kc2lnaHQgNjAgZnQuLCBkYXJrdmlzaW9uIDEyMCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAyN1wiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiQ29tbW9uLCBEcmFjb25pY1wiLFxuICAgICAgICBjcjogXCIyNFwiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkFtcGhpYmlvdXNcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBkcmFnb24gY2FuIGJyZWF0aGUgYWlyIGFuZCB3YXRlci5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJMZWdlbmRhcnkgUmVzaXN0YW5jZSAoMy9EYXkpXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJJZiB0aGUgZHJhZ29uIGZhaWxzIGEgc2F2aW5nIHRocm93LCBpdCBjYW4gY2hvb3NlIHRvIHN1Y2NlZWQgaW5zdGVhZC5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBkcmFnb24gY2FuIHVzZSBpdHMgRnJpZ2h0ZnVsIFByZXNlbmNlLiBJdCB0aGVuIG1ha2VzIHRocmVlIGF0dGFja3M6IG9uZSB3aXRoIGl0cyBiaXRlIGFuZCB0d28gd2l0aCBpdHMgY2xhd3MuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQml0ZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzE3IHRvIGhpdCwgcmVhY2ggMTUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDIxICgyZDEwICsgMTApIHBpZXJjaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDE3LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjJkMTBcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDEwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQ2xhd1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzE3IHRvIGhpdCwgcmVhY2ggMTAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDE3ICgyZDYgKyAxMCkgc2xhc2hpbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMTcsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMmQ2XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiAxMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlRhaWxcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICsxNyB0byBoaXQsIHJlYWNoIDIwIGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxOSAoMmQ4ICsgMTApIGJsdWRnZW9uaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDE3LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjJkOFwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogMTBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJGcmlnaHRmdWwgUHJlc2VuY2VcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIkVhY2ggY3JlYXR1cmUgb2YgdGhlIGRyYWdvbidzIGNob2ljZSB0aGF0IGlzIHdpdGhpbiAxMjAgZmVldCBvZiB0aGUgZHJhZ29uIGFuZCBhd2FyZSBvZiBpdCBtdXN0IHN1Y2NlZWQgb24gYSBEQyAyNCBXaXNkb20gc2F2aW5nIHRocm93IG9yIGJlY29tZSBmcmlnaHRlbmVkIGZvciAxIG1pbnV0ZS4gQSBjcmVhdHVyZSBjYW4gcmVwZWF0IHRoZSBzYXZpbmcgdGhyb3cgYXQgdGhlIGVuZCBvZiBlYWNoIG9mIGl0cyB0dXJucywgZW5kaW5nIHRoZSBlZmZlY3Qgb24gaXRzZWxmIG9uIGEgc3VjY2Vzcy4gSWYgYSBjcmVhdHVyZSdzIHNhdmluZyB0aHJvdyBpcyBzdWNjZXNzZnVsIG9yIHRoZSBlZmZlY3QgZW5kcyBmb3IgaXQsIHRoZSBjcmVhdHVyZSBpcyBpbW11bmUgdG8gdGhlIGRyYWdvbidzIEZyaWdodGZ1bCBQcmVzZW5jZSBmb3IgdGhlIG5leHQgMjQgaG91cnMuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQnJlYXRoIFdlYXBvbnMgKFJlY2hhcmdlIDUtNilcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBkcmFnb24gdXNlcyBvbmUgb2YgdGhlIGZvbGxvd2luZyBicmVhdGggd2VhcG9ucy5cXFxcbkZpcmUgQnJlYXRoLiBUaGUgZHJhZ29uIGV4aGFsZXMgZmlyZSBpbiBhIDkwLWZvb3QgY29uZS4gRWFjaCBjcmVhdHVyZSBpbiB0aGF0IGFyZWEgbXVzdCBtYWtlIGEgREMgMjQgRGV4dGVyaXR5IHNhdmluZyB0aHJvdywgdGFraW5nIDcxICgxM2QxMCkgZmlyZSBkYW1hZ2Ugb24gYSBmYWlsZWQgc2F2ZSwgb3IgaGFsZiBhcyBtdWNoIGRhbWFnZSBvbiBhIHN1Y2Nlc3NmdWwgb25lLlxcXFxuV2Vha2VuaW5nIEJyZWF0aC4gVGhlIGRyYWdvbiBleGhhbGVzIGdhcyBpbiBhIDkwLWZvb3QgY29uZS4gRWFjaCBjcmVhdHVyZSBpbiB0aGF0IGFyZWEgbXVzdCBzdWNjZWVkIG9uIGEgREMgMjQgU3RyZW5ndGggc2F2aW5nIHRocm93IG9yIGhhdmUgZGlzYWR2YW50YWdlIG9uIFN0cmVuZ3RoLWJhc2VkIGF0dGFjayByb2xscywgU3RyZW5ndGggY2hlY2tzLCBhbmQgU3RyZW5ndGggc2F2aW5nIHRocm93cyBmb3IgMSBtaW51dGUuIEEgY3JlYXR1cmUgY2FuIHJlcGVhdCB0aGUgc2F2aW5nIHRocm93IGF0IHRoZSBlbmQgb2YgZWFjaCBvZiBpdHMgdHVybnMsIGVuZGluZyB0aGUgZWZmZWN0IG9uIGl0c2VsZiBvbiBhIHN1Y2Nlc3MuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjEzZDEwXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJDaGFuZ2UgU2hhcGVcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBkcmFnb24gbWFnaWNhbGx5IHBvbHltb3JwaHMgaW50byBhIGh1bWFub2lkIG9yIGJlYXN0IHRoYXQgaGFzIGEgY2hhbGxlbmdlIHJhdGluZyBubyBoaWdoZXIgdGhhbiBpdHMgb3duLCBvciBiYWNrIGludG8gaXRzIHRydWUgZm9ybS4gSXQgcmV2ZXJ0cyB0byBpdHMgdHJ1ZSBmb3JtIGlmIGl0IGRpZXMuIEFueSBlcXVpcG1lbnQgaXQgaXMgd2VhcmluZyBvciBjYXJyeWluZyBpcyBhYnNvcmJlZCBvciBib3JuZSBieSB0aGUgbmV3IGZvcm0gKHRoZSBkcmFnb24ncyBjaG9pY2UpLlxcXFxuSW4gYSBuZXcgZm9ybSwgdGhlIGRyYWdvbiByZXRhaW5zIGl0cyBhbGlnbm1lbnQsIGhpdCBwb2ludHMsIEhpdCBEaWNlLCBhYmlsaXR5IHRvIHNwZWFrLCBwcm9maWNpZW5jaWVzLCBMZWdlbmRhcnkgUmVzaXN0YW5jZSwgbGFpciBhY3Rpb25zLCBhbmQgSW50ZWxsaWdlbmNlLCBXaXNkb20sIGFuZCBDaGFyaXNtYSBzY29yZXMsIGFzIHdlbGwgYXMgdGhpcyBhY3Rpb24uIEl0cyBzdGF0aXN0aWNzIGFuZCBjYXBhYmlsaXRpZXMgYXJlIG90aGVyd2lzZSByZXBsYWNlZCBieSB0aG9zZSBvZiB0aGUgbmV3IGZvcm0sIGV4Y2VwdCBhbnkgY2xhc3MgZmVhdHVyZXMgb3IgbGVnZW5kYXJ5IGFjdGlvbnMgb2YgdGhhdCBmb3JtLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBsZWdlbmRhcnlfYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiRGV0ZWN0XCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZHJhZ29uIG1ha2VzIGEgV2lzZG9tIChQZXJjZXB0aW9uKSBjaGVjay5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJUYWlsIEF0dGFja1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGRyYWdvbiBtYWtlcyBhIHRhaWwgYXR0YWNrLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIldpbmcgQXR0YWNrIChDb3N0cyAyIEFjdGlvbnMpXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZHJhZ29uIGJlYXRzIGl0cyB3aW5ncy4gRWFjaCBjcmVhdHVyZSB3aXRoaW4gMTUgZnQuIG9mIHRoZSBkcmFnb24gbXVzdCBzdWNjZWVkIG9uIGEgREMgMjUgRGV4dGVyaXR5IHNhdmluZyB0aHJvdyBvciB0YWtlIDE3ICgyZDYgKyAxMCkgYmx1ZGdlb25pbmcgZGFtYWdlIGFuZCBiZSBrbm9ja2VkIHByb25lLiBUaGUgZHJhZ29uIGNhbiB0aGVuIGZseSB1cCB0byBoYWxmIGl0cyBmbHlpbmcgc3BlZWQuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJBbmNpZW50IEdyZWVuIERyYWdvblwiLFxuICAgICAgICBzaXplOiBcIkdhcmdhbnR1YW5cIixcbiAgICAgICAgdHlwZTogXCJkcmFnb25cIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcImxhd2Z1bCBldmlsXCIsXG4gICAgICAgIGFjOiAyMSxcbiAgICAgICAgaHA6IDM4NSxcbiAgICAgICAgaGl0X2RpY2U6IFwiMjJkMjAgKyAxNTRcIixcbiAgICAgICAgc3BlZWQ6IFwiNDAgZnQuLCBmbHkgODAgZnQuLCBzd2ltIDQwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzI3LCAxMiwgMjUsIDIwLCAxNywgMTldLFxuICAgICAgICBzYXZlczogW1xuICAgICAgICAgICAgeyBkZXh0ZXJpdHk6IDggfSxcbiAgICAgICAgICAgIHsgY29uc3RpdHV0aW9uOiAxNCB9LFxuICAgICAgICAgICAgeyB3aXNkb206IDEwIH0sXG4gICAgICAgICAgICB7IGNoYXJpc21hOiAxMSB9XG4gICAgICAgIF0sXG4gICAgICAgIHNraWxsc2F2ZXM6IFtcbiAgICAgICAgICAgIHsgZGVjZXB0aW9uOiAxMSB9LFxuICAgICAgICAgICAgeyBpbnNpZ2h0OiAxMCB9LFxuICAgICAgICAgICAgeyBwZXJjZXB0aW9uOiAxNyB9LFxuICAgICAgICAgICAgeyBwZXJzdWFzaW9uOiAxMSB9LFxuICAgICAgICAgICAgeyBzdGVhbHRoOiA4IH1cbiAgICAgICAgXSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczogXCJwb2lzb25cIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwicG9pc29uZWRcIixcbiAgICAgICAgc2Vuc2VzOiBcImJsaW5kc2lnaHQgNjAgZnQuLCBkYXJrdmlzaW9uIDEyMCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAyN1wiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiQ29tbW9uLCBEcmFjb25pY1wiLFxuICAgICAgICBjcjogXCIyMlwiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkFtcGhpYmlvdXNcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBkcmFnb24gY2FuIGJyZWF0aGUgYWlyIGFuZCB3YXRlci5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJMZWdlbmRhcnkgUmVzaXN0YW5jZSAoMy9EYXkpXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJJZiB0aGUgZHJhZ29uIGZhaWxzIGEgc2F2aW5nIHRocm93LCBpdCBjYW4gY2hvb3NlIHRvIHN1Y2NlZWQgaW5zdGVhZC5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBkcmFnb24gY2FuIHVzZSBpdHMgRnJpZ2h0ZnVsIFByZXNlbmNlLiBJdCB0aGVuIG1ha2VzIHRocmVlIGF0dGFja3M6IG9uZSB3aXRoIGl0cyBiaXRlIGFuZCB0d28gd2l0aCBpdHMgY2xhd3MuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQml0ZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzE1IHRvIGhpdCwgcmVhY2ggMTUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDE5ICgyZDEwICsgOCkgcGllcmNpbmcgZGFtYWdlIHBsdXMgMTAgKDNkNikgcG9pc29uIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDE1LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjJkMTAgKyAzZDZcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDlcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJDbGF3XCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMTUgdG8gaGl0LCByZWFjaCAxMCBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMjIgKDRkNiArIDgpIHNsYXNoaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDE1LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjRkNlwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogOFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlRhaWxcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICsxNSB0byBoaXQsIHJlYWNoIDIwIGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxNyAoMmQ4ICsgOCkgYmx1ZGdlb25pbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMTYsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMmQ4XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiA4XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiRnJpZ2h0ZnVsIFByZXNlbmNlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJFYWNoIGNyZWF0dXJlIG9mIHRoZSBkcmFnb24ncyBjaG9pY2UgdGhhdCBpcyB3aXRoaW4gMTIwIGZlZXQgb2YgdGhlIGRyYWdvbiBhbmQgYXdhcmUgb2YgaXQgbXVzdCBzdWNjZWVkIG9uIGEgREMgMTkgV2lzZG9tIHNhdmluZyB0aHJvdyBvciBiZWNvbWUgZnJpZ2h0ZW5lZCBmb3IgMSBtaW51dGUuIEEgY3JlYXR1cmUgY2FuIHJlcGVhdCB0aGUgc2F2aW5nIHRocm93IGF0IHRoZSBlbmQgb2YgZWFjaCBvZiBpdHMgdHVybnMsIGVuZGluZyB0aGUgZWZmZWN0IG9uIGl0c2VsZiBvbiBhIHN1Y2Nlc3MuIElmIGEgY3JlYXR1cmUncyBzYXZpbmcgdGhyb3cgaXMgc3VjY2Vzc2Z1bCBvciB0aGUgZWZmZWN0IGVuZHMgZm9yIGl0LCB0aGUgY3JlYXR1cmUgaXMgaW1tdW5lIHRvIHRoZSBkcmFnb24ncyBGcmlnaHRmdWwgUHJlc2VuY2UgZm9yIHRoZSBuZXh0IDI0IGhvdXJzLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlBvaXNvbiBCcmVhdGggKFJlY2hhcmdlIDUtNilcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBkcmFnb24gZXhoYWxlcyBwb2lzb25vdXMgZ2FzIGluIGEgOTAtZm9vdCBjb25lLiBFYWNoIGNyZWF0dXJlIGluIHRoYXQgYXJlYSBtdXN0IG1ha2UgYSBEQyAyMiBDb25zdGl0dXRpb24gc2F2aW5nIHRocm93LCB0YWtpbmcgNzcgKDIyZDYpIHBvaXNvbiBkYW1hZ2Ugb24gYSBmYWlsZWQgc2F2ZSwgb3IgaGFsZiBhcyBtdWNoIGRhbWFnZSBvbiBhIHN1Y2Nlc3NmdWwgb25lLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIyMmQ2XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgbGVnZW5kYXJ5X2FjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkRldGVjdFwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGRyYWdvbiBtYWtlcyBhIFdpc2RvbSAoUGVyY2VwdGlvbikgY2hlY2suXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiVGFpbCBBdHRhY2tcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBkcmFnb24gbWFrZXMgYSB0YWlsIGF0dGFjay5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJXaW5nIEF0dGFjayAoQ29zdHMgMiBBY3Rpb25zKVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGRyYWdvbiBiZWF0cyBpdHMgd2luZ3MuIEVhY2ggY3JlYXR1cmUgd2l0aGluIDE1IGZ0LiBvZiB0aGUgZHJhZ29uIG11c3Qgc3VjY2VlZCBvbiBhIERDIDIzIERleHRlcml0eSBzYXZpbmcgdGhyb3cgb3IgdGFrZSAxNSAoMmQ2ICsgOCkgYmx1ZGdlb25pbmcgZGFtYWdlIGFuZCBiZSBrbm9ja2VkIHByb25lLiBUaGUgZHJhZ29uIGNhbiB0aGVuIGZseSB1cCB0byBoYWxmIGl0cyBmbHlpbmcgc3BlZWQuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJBbmNpZW50IFJlZCBEcmFnb25cIixcbiAgICAgICAgc2l6ZTogXCJHYXJnYW50dWFuXCIsXG4gICAgICAgIHR5cGU6IFwiZHJhZ29uXCIsXG4gICAgICAgIHN1YnR5cGU6IFwiXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJjaGFvdGljIGV2aWxcIixcbiAgICAgICAgYWM6IDIyLFxuICAgICAgICBocDogNTQ2LFxuICAgICAgICBoaXRfZGljZTogXCIyOGQyMCArIDI1MlwiLFxuICAgICAgICBzcGVlZDogXCI0MCBmdC4sIGNsaW1iIDQwIGZ0LiwgZmx5IDgwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzMwLCAxMCwgMjksIDE4LCAxNSwgMjNdLFxuICAgICAgICBzYXZlczogW1xuICAgICAgICAgICAgeyBkZXh0ZXJpdHk6IDcgfSxcbiAgICAgICAgICAgIHsgY29uc3RpdHV0aW9uOiAxNiB9LFxuICAgICAgICAgICAgeyB3aXNkb206IDkgfSxcbiAgICAgICAgICAgIHsgY2hhcmlzbWE6IDEzIH1cbiAgICAgICAgXSxcbiAgICAgICAgc2tpbGxzYXZlczogW3sgcGVyY2VwdGlvbjogMTYgfSwgeyBzdGVhbHRoOiA3IH1dLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcImZpcmVcIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIHNlbnNlczogXCJibGluZHNpZ2h0IDYwIGZ0LiwgZGFya3Zpc2lvbiAxMjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMjZcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcIkNvbW1vbiwgRHJhY29uaWNcIixcbiAgICAgICAgY3I6IFwiMjRcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJMZWdlbmRhcnkgUmVzaXN0YW5jZSAoMy9EYXkpXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJJZiB0aGUgZHJhZ29uIGZhaWxzIGEgc2F2aW5nIHRocm93LCBpdCBjYW4gY2hvb3NlIHRvIHN1Y2NlZWQgaW5zdGVhZC5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBkcmFnb24gY2FuIHVzZSBpdHMgRnJpZ2h0ZnVsIFByZXNlbmNlLiBJdCB0aGVuIG1ha2VzIHRocmVlIGF0dGFja3M6IG9uZSB3aXRoIGl0cyBiaXRlIGFuZCB0d28gd2l0aCBpdHMgY2xhd3MuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQml0ZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzE3IHRvIGhpdCwgcmVhY2ggMTUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDIxICgyZDEwICsgMTApIHBpZXJjaW5nIGRhbWFnZSBwbHVzIDE0ICg0ZDYpIGZpcmUgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMTcsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMmQxMCArIDRkNlwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogMTBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJDbGF3XCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMTcgdG8gaGl0LCByZWFjaCAxMCBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTcgKDJkNiArIDEwKSBzbGFzaGluZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAxNyxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIyZDZcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDEwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiVGFpbFwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzE3IHRvIGhpdCwgcmVhY2ggMjAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDE5ICgyZDggKyAxMCkgYmx1ZGdlb25pbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMTcsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMmQ4XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiAxMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkZyaWdodGZ1bCBQcmVzZW5jZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiRWFjaCBjcmVhdHVyZSBvZiB0aGUgZHJhZ29uJ3MgY2hvaWNlIHRoYXQgaXMgd2l0aGluIDEyMCBmZWV0IG9mIHRoZSBkcmFnb24gYW5kIGF3YXJlIG9mIGl0IG11c3Qgc3VjY2VlZCBvbiBhIERDIDIxIFdpc2RvbSBzYXZpbmcgdGhyb3cgb3IgYmVjb21lIGZyaWdodGVuZWQgZm9yIDEgbWludXRlLiBBIGNyZWF0dXJlIGNhbiByZXBlYXQgdGhlIHNhdmluZyB0aHJvdyBhdCB0aGUgZW5kIG9mIGVhY2ggb2YgaXRzIHR1cm5zLCBlbmRpbmcgdGhlIGVmZmVjdCBvbiBpdHNlbGYgb24gYSBzdWNjZXNzLiBJZiBhIGNyZWF0dXJlJ3Mgc2F2aW5nIHRocm93IGlzIHN1Y2Nlc3NmdWwgb3IgdGhlIGVmZmVjdCBlbmRzIGZvciBpdCwgdGhlIGNyZWF0dXJlIGlzIGltbXVuZSB0byB0aGUgZHJhZ29uJ3MgRnJpZ2h0ZnVsIFByZXNlbmNlIGZvciB0aGUgbmV4dCAyNCBob3Vycy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJGaXJlIEJyZWF0aCAoUmVjaGFyZ2UgNS02KVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGRyYWdvbiBleGhhbGVzIGZpcmUgaW4gYSA5MC1mb290IGNvbmUuIEVhY2ggY3JlYXR1cmUgaW4gdGhhdCBhcmVhIG11c3QgbWFrZSBhIERDIDI0IERleHRlcml0eSBzYXZpbmcgdGhyb3csIHRha2luZyA5MSAoMjZkNikgZmlyZSBkYW1hZ2Ugb24gYSBmYWlsZWQgc2F2ZSwgb3IgaGFsZiBhcyBtdWNoIGRhbWFnZSBvbiBhIHN1Y2Nlc3NmdWwgb25lLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIyNmQ2XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgbGVnZW5kYXJ5X2FjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkRldGVjdFwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGRyYWdvbiBtYWtlcyBhIFdpc2RvbSAoUGVyY2VwdGlvbikgY2hlY2suXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiVGFpbCBBdHRhY2tcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBkcmFnb24gbWFrZXMgYSB0YWlsIGF0dGFjay5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJXaW5nIEF0dGFjayAoQ29zdHMgMiBBY3Rpb25zKVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGRyYWdvbiBiZWF0cyBpdHMgd2luZ3MuIEVhY2ggY3JlYXR1cmUgd2l0aGluIDE1IGZ0LiBvZiB0aGUgZHJhZ29uIG11c3Qgc3VjY2VlZCBvbiBhIERDIDI1IERleHRlcml0eSBzYXZpbmcgdGhyb3cgb3IgdGFrZSAxNyAoMmQ2ICsgMTApIGJsdWRnZW9uaW5nIGRhbWFnZSBhbmQgYmUga25vY2tlZCBwcm9uZS4gVGhlIGRyYWdvbiBjYW4gdGhlbiBmbHkgdXAgdG8gaGFsZiBpdHMgZmx5aW5nIHNwZWVkLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiQW5jaWVudCBTaWx2ZXIgRHJhZ29uXCIsXG4gICAgICAgIHNpemU6IFwiR2FyZ2FudHVhblwiLFxuICAgICAgICB0eXBlOiBcImRyYWdvblwiLFxuICAgICAgICBzdWJ0eXBlOiBcIlwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwibGF3ZnVsIGdvb2RcIixcbiAgICAgICAgYWM6IDIyLFxuICAgICAgICBocDogNDg3LFxuICAgICAgICBoaXRfZGljZTogXCIyNWQyMCArIDIyNFwiLFxuICAgICAgICBzcGVlZDogXCI0MCBmdC4sIGZseSA4MCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFszMCwgMTAsIDI5LCAxOCwgMTUsIDIzXSxcbiAgICAgICAgc2F2ZXM6IFtcbiAgICAgICAgICAgIHsgZGV4dGVyaXR5OiA3IH0sXG4gICAgICAgICAgICB7IGNvbnN0aXR1dGlvbjogMTYgfSxcbiAgICAgICAgICAgIHsgd2lzZG9tOiA5IH0sXG4gICAgICAgICAgICB7IGNoYXJpc21hOiAxMyB9XG4gICAgICAgIF0sXG4gICAgICAgIHNraWxsc2F2ZXM6IFtcbiAgICAgICAgICAgIHsgYXJjYW5hOiAxMSB9LFxuICAgICAgICAgICAgeyBwZXJjZXB0aW9uOiAxNiB9LFxuICAgICAgICAgICAgeyBoaXN0b3J5OiAxMSB9LFxuICAgICAgICAgICAgeyBzdGVhbHRoOiA3IH1cbiAgICAgICAgXSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczogXCJjb2xkXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBzZW5zZXM6IFwiYmxpbmRzaWdodCA2MCBmdC4sIGRhcmt2aXNpb24gMTIwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDI2XCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJDb21tb24sIERyYWNvbmljXCIsXG4gICAgICAgIGNyOiBcIjIzXCIsXG4gICAgICAgIHRyYWl0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTGVnZW5kYXJ5IFJlc2lzdGFuY2UgKDMvRGF5KVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiSWYgdGhlIGRyYWdvbiBmYWlscyBhIHNhdmluZyB0aHJvdywgaXQgY2FuIGNob29zZSB0byBzdWNjZWVkIGluc3RlYWQuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZHJhZ29uIGNhbiB1c2UgaXRzIEZyaWdodGZ1bCBQcmVzZW5jZS4gSXQgdGhlbiBtYWtlcyB0aHJlZSBhdHRhY2tzOiBvbmUgd2l0aCBpdHMgYml0ZSBhbmQgdHdvIHdpdGggaXRzIGNsYXdzLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkJpdGVcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICsxNyB0byBoaXQsIHJlYWNoIDE1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAyMSAoMmQxMCArIDEwKSBwaWVyY2luZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAxNyxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIyZDEwXCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiAxMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkNsYXdcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICsxNyB0byBoaXQsIHJlYWNoIDEwIGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxNyAoMmQ2ICsgMTApIHNsYXNoaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDE3LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjJkNlwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogMTBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJUYWlsXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMTcgdG8gaGl0LCByZWFjaCAyMCBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTkgKDJkOCArIDEwKSBibHVkZ2VvbmluZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAxNyxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIyZDhcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDEwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiRnJpZ2h0ZnVsIFByZXNlbmNlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJFYWNoIGNyZWF0dXJlIG9mIHRoZSBkcmFnb24ncyBjaG9pY2UgdGhhdCBpcyB3aXRoaW4gMTIwIGZlZXQgb2YgdGhlIGRyYWdvbiBhbmQgYXdhcmUgb2YgaXQgbXVzdCBzdWNjZWVkIG9uIGEgREMgMjEgV2lzZG9tIHNhdmluZyB0aHJvdyBvciBiZWNvbWUgZnJpZ2h0ZW5lZCBmb3IgMSBtaW51dGUuIEEgY3JlYXR1cmUgY2FuIHJlcGVhdCB0aGUgc2F2aW5nIHRocm93IGF0IHRoZSBlbmQgb2YgZWFjaCBvZiBpdHMgdHVybnMsIGVuZGluZyB0aGUgZWZmZWN0IG9uIGl0c2VsZiBvbiBhIHN1Y2Nlc3MuIElmIGEgY3JlYXR1cmUncyBzYXZpbmcgdGhyb3cgaXMgc3VjY2Vzc2Z1bCBvciB0aGUgZWZmZWN0IGVuZHMgZm9yIGl0LCB0aGUgY3JlYXR1cmUgaXMgaW1tdW5lIHRvIHRoZSBkcmFnb24ncyBGcmlnaHRmdWwgUHJlc2VuY2UgZm9yIHRoZSBuZXh0IDI0IGhvdXJzLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkJyZWF0aCBXZWFwb25zIChSZWNoYXJnZSA1LTYpXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZHJhZ29uIHVzZXMgb25lIG9mIHRoZSBmb2xsb3dpbmcgYnJlYXRoIHdlYXBvbnMuXFxcXG5Db2xkIEJyZWF0aC4gVGhlIGRyYWdvbiBleGhhbGVzIGFuIGljeSBibGFzdCBpbiBhIDkwLWZvb3QgY29uZS4gRWFjaCBjcmVhdHVyZSBpbiB0aGF0IGFyZWEgbXVzdCBtYWtlIGEgREMgMjQgQ29uc3RpdHV0aW9uIHNhdmluZyB0aHJvdywgdGFraW5nIDY3ICgxNWQ4KSBjb2xkIGRhbWFnZSBvbiBhIGZhaWxlZCBzYXZlLCBvciBoYWxmIGFzIG11Y2ggZGFtYWdlIG9uIGEgc3VjY2Vzc2Z1bCBvbmUuXFxcXG5QYXJhbHl6aW5nIEJyZWF0aC4gVGhlIGRyYWdvbiBleGhhbGVzIHBhcmFseXppbmcgZ2FzIGluIGEgOTAtIGZvb3QgY29uZS4gRWFjaCBjcmVhdHVyZSBpbiB0aGF0IGFyZWEgbXVzdCBzdWNjZWVkIG9uIGEgREMgMjQgQ29uc3RpdHV0aW9uIHNhdmluZyB0aHJvdyBvciBiZSBwYXJhbHl6ZWQgZm9yIDEgbWludXRlLiBBIGNyZWF0dXJlIGNhbiByZXBlYXQgdGhlIHNhdmluZyB0aHJvdyBhdCB0aGUgZW5kIG9mIGVhY2ggb2YgaXRzIHR1cm5zLCBlbmRpbmcgdGhlIGVmZmVjdCBvbiBpdHNlbGYgb24gYSBzdWNjZXNzLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIxNWQ4XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJDaGFuZ2UgU2hhcGVcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBkcmFnb24gbWFnaWNhbGx5IHBvbHltb3JwaHMgaW50byBhIGh1bWFub2lkIG9yIGJlYXN0IHRoYXQgaGFzIGEgY2hhbGxlbmdlIHJhdGluZyBubyBoaWdoZXIgdGhhbiBpdHMgb3duLCBvciBiYWNrIGludG8gaXRzIHRydWUgZm9ybS4gSXQgcmV2ZXJ0cyB0byBpdHMgdHJ1ZSBmb3JtIGlmIGl0IGRpZXMuIEFueSBlcXVpcG1lbnQgaXQgaXMgd2VhcmluZyBvciBjYXJyeWluZyBpcyBhYnNvcmJlZCBvciBib3JuZSBieSB0aGUgbmV3IGZvcm0gKHRoZSBkcmFnb24ncyBjaG9pY2UpLlxcXFxuSW4gYSBuZXcgZm9ybSwgdGhlIGRyYWdvbiByZXRhaW5zIGl0cyBhbGlnbm1lbnQsIGhpdCBwb2ludHMsIEhpdCBEaWNlLCBhYmlsaXR5IHRvIHNwZWFrLCBwcm9maWNpZW5jaWVzLCBMZWdlbmRhcnkgUmVzaXN0YW5jZSwgbGFpciBhY3Rpb25zLCBhbmQgSW50ZWxsaWdlbmNlLCBXaXNkb20sIGFuZCBDaGFyaXNtYSBzY29yZXMsIGFzIHdlbGwgYXMgdGhpcyBhY3Rpb24uIEl0cyBzdGF0aXN0aWNzIGFuZCBjYXBhYmlsaXRpZXMgYXJlIG90aGVyd2lzZSByZXBsYWNlZCBieSB0aG9zZSBvZiB0aGUgbmV3IGZvcm0sIGV4Y2VwdCBhbnkgY2xhc3MgZmVhdHVyZXMgb3IgbGVnZW5kYXJ5IGFjdGlvbnMgb2YgdGhhdCBmb3JtLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBsZWdlbmRhcnlfYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiRGV0ZWN0XCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZHJhZ29uIG1ha2VzIGEgV2lzZG9tIChQZXJjZXB0aW9uKSBjaGVjay5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJUYWlsIEF0dGFja1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGRyYWdvbiBtYWtlcyBhIHRhaWwgYXR0YWNrLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIldpbmcgQXR0YWNrIChDb3N0cyAyIEFjdGlvbnMpXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZHJhZ29uIGJlYXRzIGl0cyB3aW5ncy4gRWFjaCBjcmVhdHVyZSB3aXRoaW4gMTUgZnQuIG9mIHRoZSBkcmFnb24gbXVzdCBzdWNjZWVkIG9uIGEgREMgMjUgRGV4dGVyaXR5IHNhdmluZyB0aHJvdyBvciB0YWtlIDE3ICgyZDYgKyAxMCkgYmx1ZGdlb25pbmcgZGFtYWdlIGFuZCBiZSBrbm9ja2VkIHByb25lLiBUaGUgZHJhZ29uIGNhbiB0aGVuIGZseSB1cCB0byBoYWxmIGl0cyBmbHlpbmcgc3BlZWQuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJBbmNpZW50IFdoaXRlIERyYWdvblwiLFxuICAgICAgICBzaXplOiBcIkdhcmdhbnR1YW5cIixcbiAgICAgICAgdHlwZTogXCJkcmFnb25cIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcImNoYW90aWMgZXZpbFwiLFxuICAgICAgICBhYzogMjAsXG4gICAgICAgIGhwOiAzMzMsXG4gICAgICAgIGhpdF9kaWNlOiBcIjE4ZDIwICsgMTQ0XCIsXG4gICAgICAgIHNwZWVkOiBcIjQwIGZ0LiwgYnVycm93IDQwIGZ0LiwgZmx5IDgwIGZ0Liwgc3dpbSA0MCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsyNiwgMTAsIDI2LCAxMCwgMTMsIDE0XSxcbiAgICAgICAgc2F2ZXM6IFtcbiAgICAgICAgICAgIHsgZGV4dGVyaXR5OiA2IH0sXG4gICAgICAgICAgICB7IGNvbnN0aXR1dGlvbjogMTQgfSxcbiAgICAgICAgICAgIHsgd2lzZG9tOiA3IH0sXG4gICAgICAgICAgICB7IGNoYXJpc21hOiA4IH1cbiAgICAgICAgXSxcbiAgICAgICAgc2tpbGxzYXZlczogW3sgcGVyY2VwdGlvbjogMTMgfSwgeyBzdGVhbHRoOiA2IH1dLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcImNvbGRcIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIHNlbnNlczogXCJibGluZHNpZ2h0IDYwIGZ0LiwgZGFya3Zpc2lvbiAxMjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMjNcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcIkNvbW1vbiwgRHJhY29uaWNcIixcbiAgICAgICAgY3I6IFwiMjBcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJJY2UgV2Fsa1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGRyYWdvbiBjYW4gbW92ZSBhY3Jvc3MgYW5kIGNsaW1iIGljeSBzdXJmYWNlcyB3aXRob3V0IG5lZWRpbmcgdG8gbWFrZSBhbiBhYmlsaXR5IGNoZWNrLiBBZGRpdGlvbmFsbHksIGRpZmZpY3VsdCB0ZXJyYWluIGNvbXBvc2VkIG9mIGljZSBvciBzbm93IGRvZXNuJ3QgY29zdCBpdCBleHRyYSBtb21lbnQuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTGVnZW5kYXJ5IFJlc2lzdGFuY2UgKDMvRGF5KVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiSWYgdGhlIGRyYWdvbiBmYWlscyBhIHNhdmluZyB0aHJvdywgaXQgY2FuIGNob29zZSB0byBzdWNjZWVkIGluc3RlYWQuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZHJhZ29uIGNhbiB1c2UgaXRzIEZyaWdodGZ1bCBQcmVzZW5jZS4gSXQgdGhlbiBtYWtlcyB0aHJlZSBhdHRhY2tzOiBvbmUgd2l0aCBpdHMgYml0ZSBhbmQgdHdvIHdpdGggaXRzIGNsYXdzLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkJpdGVcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICsxNCB0byBoaXQsIHJlYWNoIDE1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxOSAoMmQxMCArIDgpIHBpZXJjaW5nIGRhbWFnZSBwbHVzIDkgKDJkOCkgY29sZCBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAxNCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIyZDEwICsgMmQ4XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiA4XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQ2xhd1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzE0IHRvIGhpdCwgcmVhY2ggMTAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDE1ICgyZDYgKyA4KSBzbGFzaGluZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAxNCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIyZDZcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDhcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJUYWlsXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMTQgdG8gaGl0LCByZWFjaCAyMCBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTcgKDJkOCArIDgpIGJsdWRnZW9uaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDE0LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjJkOFwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogOFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkZyaWdodGZ1bCBQcmVzZW5jZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiRWFjaCBjcmVhdHVyZSBvZiB0aGUgZHJhZ29uJ3MgY2hvaWNlIHRoYXQgaXMgd2l0aGluIDEyMCBmZWV0IG9mIHRoZSBkcmFnb24gYW5kIGF3YXJlIG9mIGl0IG11c3Qgc3VjY2VlZCBvbiBhIERDIDE2IFdpc2RvbSBzYXZpbmcgdGhyb3cgb3IgYmVjb21lIGZyaWdodGVuZWQgZm9yIDEgbWludXRlLiBBIGNyZWF0dXJlIGNhbiByZXBlYXQgdGhlIHNhdmluZyB0aHJvdyBhdCB0aGUgZW5kIG9mIGVhY2ggb2YgaXRzIHR1cm5zLCBlbmRpbmcgdGhlIGVmZmVjdCBvbiBpdHNlbGYgb24gYSBzdWNjZXNzLiBJZiBhIGNyZWF0dXJlJ3Mgc2F2aW5nIHRocm93IGlzIHN1Y2Nlc3NmdWwgb3IgdGhlIGVmZmVjdCBlbmRzIGZvciBpdCwgdGhlIGNyZWF0dXJlIGlzIGltbXVuZSB0byB0aGUgZHJhZ29uJ3MgRnJpZ2h0ZnVsIFByZXNlbmNlIGZvciB0aGUgbmV4dCAyNCBob3VycyAuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQ29sZCBCcmVhdGggKFJlY2hhcmdlIDUtNilcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBkcmFnb24gZXhoYWxlcyBhbiBpY3kgYmxhc3QgaW4gYSA5MC1mb290IGNvbmUuIEVhY2ggY3JlYXR1cmUgaW4gdGhhdCBhcmVhIG11c3QgbWFrZSBhIERDIDIyIENvbnN0aXR1dGlvbiBzYXZpbmcgdGhyb3csIHRha2luZyA3MiAobDZkOCkgY29sZCBkYW1hZ2Ugb24gYSBmYWlsZWQgc2F2ZSwgb3IgaGFsZiBhcyBtdWNoIGRhbWFnZSBvbiBhIHN1Y2Nlc3NmdWwgb25lLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIxNmQ4XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIkFuZHJvc3BoaW54XCIsXG4gICAgICAgIHNpemU6IFwiTGFyZ2VcIixcbiAgICAgICAgdHlwZTogXCJtb25zdHJvc2l0eVwiLFxuICAgICAgICBzdWJ0eXBlOiBcIlwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwibGF3ZnVsIG5ldXRyYWxcIixcbiAgICAgICAgYWM6IDE3LFxuICAgICAgICBocDogMTk5LFxuICAgICAgICBoaXRfZGljZTogXCIxOWQxMCArIDk0XCIsXG4gICAgICAgIHNwZWVkOiBcIjQwIGZ0LiwgZmx5IDYwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzIyLCAxMCwgMjAsIDE2LCAxOCwgMjNdLFxuICAgICAgICBzYXZlczogW1xuICAgICAgICAgICAgeyBkZXh0ZXJpdHk6IDYgfSxcbiAgICAgICAgICAgIHsgY29uc3RpdHV0aW9uOiAxMSB9LFxuICAgICAgICAgICAgeyBpbnRlbGxpZ2VuY2U6IDkgfSxcbiAgICAgICAgICAgIHsgd2lzZG9tOiAxMCB9XG4gICAgICAgIF0sXG4gICAgICAgIHNraWxsc2F2ZXM6IFt7IHJlbGlnaW9uOiAxNSB9LCB7IHBlcmNlcHRpb246IDEwIH0sIHsgYXJjYW5hOiA5IH1dLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOlxuICAgICAgICAgICAgXCJwc3ljaGljOyBibHVkZ2VvbmluZywgcGllcmNpbmcsIGFuZCBzbGFzaGluZyBmcm9tIG5vbm1hZ2ljYWwgd2VhcG9uc1wiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJjaGFybWVkLCBmcmlnaHRlbmVkXCIsXG4gICAgICAgIHNlbnNlczogXCJ0cnVlc2lnaHQgMTIwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDIwXCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJDb21tb24sIFNwaGlueFwiLFxuICAgICAgICBjcjogXCIxN1wiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkluc2NydXRhYmxlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgc3BoaW54IGlzIGltbXVuZSB0byBhbnkgZWZmZWN0IHRoYXQgd291bGQgc2Vuc2UgaXRzIGVtb3Rpb25zIG9yIHJlYWQgaXRzIHRob3VnaHRzLCBhcyB3ZWxsIGFzIGFueSBkaXZpbmF0aW9uIHNwZWxsIHRoYXQgaXQgcmVmdXNlcy4gV2lzZG9tIChJbnNpZ2h0KSBjaGVja3MgbWFkZSB0byBhc2NlcnRhaW4gdGhlIHNwaGlueCdzIGludGVudGlvbnMgb3Igc2luY2VyaXR5IGhhdmUgZGlzYWR2YW50YWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk1hZ2ljIFdlYXBvbnNcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBzcGhpbngncyB3ZWFwb24gYXR0YWNrcyBhcmUgbWFnaWNhbC5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBzcGhpbnggbWFrZXMgdHdvIGNsYXcgYXR0YWNrcy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJDbGF3XCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMTIgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxNyAoMmQxMCArIDYpIHNsYXNoaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDEyLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjJkMTBcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDZcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJSb2FyICgzL0RheSlcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBzcGhpbnggZW1pdHMgYSBtYWdpY2FsIHJvYXIuIEVhY2ggdGltZSBpdCByb2FycyBiZWZvcmUgZmluaXNoaW5nIGEgbG9uZyByZXN0LCB0aGUgcm9hciBpcyBsb3VkZXIgYW5kIHRoZSBlZmZlY3QgaXMgZGlmZmVyZW50LCBhcyBkZXRhaWxlZCBiZWxvdy4gRWFjaCBjcmVhdHVyZSB3aXRoaW4gNTAwIGZlZXQgb2YgdGhlIHNwaGlueCBhbmQgYWJsZSB0byBoZWFyIHRoZSByb2FyIG11c3QgbWFrZSBhIHNhdmluZyB0aHJvdy5cXFxcblxcXFxuRmlyc3QgUm9hci4gRWFjaCBjcmVhdHVyZSB0aGF0IGZhaWxzIGEgREMgMTggV2lzZG9tIHNhdmluZyB0aHJvdyBpcyBmcmlnaHRlbmVkIGZvciAxIG1pbnV0ZS4gQSBmcmlnaHRlbmVkIGNyZWF0dXJlIGNhbiByZXBlYXQgdGhlIHNhdmluZyB0aHJvdyBhdCB0aGUgZW5kIG9mIGVhY2ggb2YgaXRzIHR1cm5zLCBlbmRpbmcgdGhlIGVmZmVjdCBvbiBpdHNlbGYgb24gYSBzdWNjZXNzLlxcXFxuXFxcXG5TZWNvbmQgUm9hci4gRWFjaCBjcmVhdHVyZSB0aGF0IGZhaWxzIGEgREMgMTggV2lzZG9tIHNhdmluZyB0aHJvdyBpcyBkZWFmZW5lZCBhbmQgZnJpZ2h0ZW5lZCBmb3IgMSBtaW51dGUuIEEgZnJpZ2h0ZW5lZCBjcmVhdHVyZSBpcyBwYXJhbHl6ZWQgYW5kIGNhbiByZXBlYXQgdGhlIHNhdmluZyB0aHJvdyBhdCB0aGUgZW5kIG9mIGVhY2ggb2YgaXRzIHR1cm5zLCBlbmRpbmcgdGhlIGVmZmVjdCBvbiBpdHNlbGYgb24gYSBzdWNjZXNzLlxcXFxuXFxcXG5UaGlyZCBSb2FyLiBFYWNoIGNyZWF0dXJlIG1ha2VzIGEgREMgMTggQ29uc3RpdHV0aW9uIHNhdmluZyB0aHJvdy4gT24gYSBmYWlsZWQgc2F2ZSwgYSBjcmVhdHVyZSB0YWtlcyA0NCAoOGQxMCkgdGh1bmRlciBkYW1hZ2UgYW5kIGlzIGtub2NrZWQgcHJvbmUuIE9uIGEgc3VjY2Vzc2Z1bCBzYXZlLCB0aGUgY3JlYXR1cmUgdGFrZXMgaGFsZiBhcyBtdWNoIGRhbWFnZSBhbmQgaXNuJ3Qga25vY2tlZCBwcm9uZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgbGVnZW5kYXJ5X2FjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkNsYXcgQXR0YWNrXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgc3BoaW54IG1ha2VzIG9uZSBjbGF3IGF0dGFjay5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJUZWxlcG9ydCAoQ29zdHMgMiBBY3Rpb25zKVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIHNwaGlueCBtYWdpY2FsbHkgdGVsZXBvcnRzLCBhbG9uZyB3aXRoIGFueSBlcXVpcG1lbnQgaXQgaXMgd2VhcmluZyBvciBjYXJyeWluZywgdXAgdG8gMTIwIGZlZXQgdG8gYW4gdW5vY2N1cGllZCBzcGFjZSBpdCBjYW4gc2VlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkNhc3QgYSBTcGVsbCAoQ29zdHMgMyBBY3Rpb25zKVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIHNwaGlueCBjYXN0cyBhIHNwZWxsIGZyb20gaXRzIGxpc3Qgb2YgcHJlcGFyZWQgc3BlbGxzLCB1c2luZyBhIHNwZWxsIHNsb3QgYXMgbm9ybWFsLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBzcGVsbHM6IFtcbiAgICAgICAgICAgIFwiVGhlIHNwaGlueCBpcyBhIDEydGgtbGV2ZWwgc3BlbGxjYXN0ZXIuIEl0cyBzcGVsbGNhc3RpbmcgYWJpbGl0eSBpcyBXaXNkb20gKHNwZWxsIHNhdmUgREMgMTgsICsxMCB0byBoaXQgd2l0aCBzcGVsbCBhdHRhY2tzKS4gSXQgcmVxdWlyZXMgbm8gbWF0ZXJpYWwgY29tcG9uZW50cyB0byBjYXN0IGl0cyBzcGVsbHMuIFRoZSBzcGhpbnggaGFzIHRoZSBmb2xsb3dpbmcgY2xlcmljIHNwZWxscyBwcmVwYXJlZDpcIixcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIkNhbnRyaXBzIChhdCB3aWxsKVwiOlxuICAgICAgICAgICAgICAgICAgICBcInNhY3JlZCBmbGFtZSwgc3BhcmUgdGhlIGR5aW5nLCB0aGF1bWF0dXJneVwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwiMXN0IGxldmVsICg0IHNsb3RzKVwiOlxuICAgICAgICAgICAgICAgICAgICBcImNvbW1hbmQsIGRldGVjdCBldmlsIGFuZCBnb29kLCBkZXRlY3QgbWFnaWNcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHsgXCIybmQgbGV2ZWwgKDMgc2xvdHMpXCI6IFwibGVzc2VyIHJlc3RvcmF0aW9uLCB6b25lIG9mIHRydXRoXCIgfSxcbiAgICAgICAgICAgIHsgXCIzcmQgbGV2ZWwgKDMgc2xvdHMpXCI6IFwiZGlzcGVsIG1hZ2ljLCB0b25ndWVzXCIgfSxcbiAgICAgICAgICAgIHsgXCI0dGggbGV2ZWwgKDMgc2xvdHMpXCI6IFwiYmFuaXNobWVudCwgZnJlZWRvbSBvZiBtb3ZlbWVudFwiIH0sXG4gICAgICAgICAgICB7IFwiNXRoIGxldmVsICgyIHNsb3RzKVwiOiBcImZsYW1lIHN0cmlrZSwgZ3JlYXRlciByZXN0b3JhdGlvblwiIH0sXG4gICAgICAgICAgICB7IFwiNnRoIGxldmVsICgxIHNsb3QpXCI6IFwiaGVyb2VzJyBmZWFzdFwiIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIkFuaW1hdGVkIEFybW9yXCIsXG4gICAgICAgIHNpemU6IFwiTWVkaXVtXCIsXG4gICAgICAgIHR5cGU6IFwiY29uc3RydWN0XCIsXG4gICAgICAgIHN1YnR5cGU6IFwiXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcbiAgICAgICAgYWM6IDE4LFxuICAgICAgICBocDogMzMsXG4gICAgICAgIGhpdF9kaWNlOiBcIjZkOCArIDZcIixcbiAgICAgICAgc3BlZWQ6IFwiMjUgZnQuXCIsXG4gICAgICAgIHN0YXRzOiBbMTQsIDExLCAxMywgMSwgMywgMV0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwicG9pc29uLCBwc3ljaGljXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOlxuICAgICAgICAgICAgXCJibGluZGVkLCBjaGFybWVkLCBkZWFmZW5lZCwgZXhoYXVzdGlvbiwgZnJpZ2h0ZW5lZCwgcGFyYWx5emVkLCBwZXRyaWZpZWQsIHBvaXNvbmVkXCIsXG4gICAgICAgIHNlbnNlczogXCJibGluZHNpZ2h0IDYwIGZ0LiAoYmxpbmQgYmV5b25kIHRoaXMgcmFkaXVzKSwgcGFzc2l2ZSBQZXJjZXB0aW9uIDZcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcIlwiLFxuICAgICAgICBjcjogXCIxXCIsXG4gICAgICAgIHRyYWl0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQW50aW1hZ2ljIFN1c2NlcHRpYmlsaXR5XCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgYXJtb3IgaXMgaW5jYXBhY2l0YXRlZCB3aGlsZSBpbiB0aGUgYXJlYSBvZiBhbiBhbnRpbWFnaWMgZmllbGQuIElmIHRhcmdldGVkIGJ5IGRpc3BlbCBtYWdpYywgdGhlIGFybW9yIG11c3Qgc3VjY2VlZCBvbiBhIENvbnN0aXR1dGlvbiBzYXZpbmcgdGhyb3cgYWdhaW5zdCB0aGUgY2FzdGVyJ3Mgc3BlbGwgc2F2ZSBEQyBvciBmYWxsIHVuY29uc2Npb3VzIGZvciAxIG1pbnV0ZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJGYWxzZSBBcHBlYXJhbmNlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJXaGlsZSB0aGUgYXJtb3IgcmVtYWlucyBtb3Rpb25sZXNzLCBpdCBpcyBpbmRpc3Rpbmd1aXNoYWJsZSBmcm9tIGEgbm9ybWFsIHN1aXQgb2YgYXJtb3IuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgYXJtb3IgbWFrZXMgdHdvIG1lbGVlIGF0dGFja3MuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiU2xhbVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzQgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiA1ICgxZDYgKyAyKSBibHVkZ2VvbmluZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA0LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjFkNlwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogMlxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiQW5raGVnXCIsXG4gICAgICAgIHNpemU6IFwiTGFyZ2VcIixcbiAgICAgICAgdHlwZTogXCJtb25zdHJvc2l0eVwiLFxuICAgICAgICBzdWJ0eXBlOiBcIlwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwidW5hbGlnbmVkXCIsXG4gICAgICAgIGFjOiAxNCxcbiAgICAgICAgaHA6IDM5LFxuICAgICAgICBoaXRfZGljZTogXCI2ZDEwICsgNlwiLFxuICAgICAgICBzcGVlZDogXCIzMCBmdC4sIGJ1cnJvdyAxMCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsxNywgMTEsIDEzLCAxLCAxMywgNl0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBzZW5zZXM6IFwiZGFya3Zpc2lvbiA2MCBmdC4sIHRyZW1vcnNlbnNlIDYwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDExXCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJcIixcbiAgICAgICAgY3I6IFwiMlwiLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJCaXRlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNSB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDEwICgyZDYgKyAzKSBzbGFzaGluZyBkYW1hZ2UgcGx1cyAzICgxZDYpIGFjaWQgZGFtYWdlLiBJZiB0aGUgdGFyZ2V0IGlzIGEgTGFyZ2Ugb3Igc21hbGxlciBjcmVhdHVyZSwgaXQgaXMgZ3JhcHBsZWQgKGVzY2FwZSBEQyAxMykuIFVudGlsIHRoaXMgZ3JhcHBsZSBlbmRzLCB0aGUgYW5raGVnIGNhbiBiaXRlIG9ubHkgdGhlIGdyYXBwbGVkIGNyZWF0dXJlIGFuZCBoYXMgYWR2YW50YWdlIG9uIGF0dGFjayByb2xscyB0byBkbyBzby5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDUsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMmQ2ICsgMWQ2XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiAzXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQWNpZCBTcHJheSAoUmVjaGFyZ2UgNilcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBhbmtoZWcgc3BpdHMgYWNpZCBpbiBhIGxpbmUgdGhhdCBpcyAzMCBmdC4gbG9uZyBhbmQgNSBmdC4gd2lkZSwgcHJvdmlkZWQgdGhhdCBpdCBoYXMgbm8gY3JlYXR1cmUgZ3JhcHBsZWQuIEVhY2ggY3JlYXR1cmUgaW4gdGhhdCBsaW5lIG11c3QgbWFrZSBhIERDIDEzIERleHRlcml0eSBzYXZpbmcgdGhyb3csIHRha2luZyAxMCAoM2Q2KSBhY2lkIGRhbWFnZSBvbiBhIGZhaWxlZCBzYXZlLCBvciBoYWxmIGFzIG11Y2ggZGFtYWdlIG9uIGEgc3VjY2Vzc2Z1bCBvbmUuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjNkNlwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJBcGVcIixcbiAgICAgICAgc2l6ZTogXCJNZWRpdW1cIixcbiAgICAgICAgdHlwZTogXCJiZWFzdFwiLFxuICAgICAgICBzdWJ0eXBlOiBcIlwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwidW5hbGlnbmVkXCIsXG4gICAgICAgIGFjOiAxMixcbiAgICAgICAgaHA6IDE5LFxuICAgICAgICBoaXRfZGljZTogXCIzZDggKyA1XCIsXG4gICAgICAgIHNwZWVkOiBcIjMwIGZ0LiwgY2xpbWIgMzAgZnQuXCIsXG4gICAgICAgIHN0YXRzOiBbMTYsIDE0LCAxNCwgNiwgMTIsIDddLFxuICAgICAgICBza2lsbHNhdmVzOiBbeyBhdGhsZXRpY3M6IDUgfSwgeyBwZXJjZXB0aW9uOiAzIH1dLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcbiAgICAgICAgc2Vuc2VzOiBcInBhc3NpdmUgUGVyY2VwdGlvbiAxM1wiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiXCIsXG4gICAgICAgIGNyOiBcIjEvMlwiLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJNdWx0aWF0dGFja1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGFwZSBtYWtlcyB0d28gZmlzdCBhdHRhY2tzLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkZpc3RcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs1IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogNiAoMWQ2ICsgMykgYmx1ZGdlb25pbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNSxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIxZDZcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDNcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJSb2NrXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJSYW5nZWQgV2VhcG9uIEF0dGFjazogKzUgdG8gaGl0LCByYW5nZSAyNS81MCBmdC4sIG9uZSB0YXJnZXQuIEhpdDogNiAoMWQ2ICsgMykgYmx1ZGdlb25pbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNSxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIxZDZcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDNcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIkFyY2htYWdlXCIsXG4gICAgICAgIHNpemU6IFwiTWVkaXVtXCIsXG4gICAgICAgIHR5cGU6IFwiaHVtYW5vaWRcIixcbiAgICAgICAgc3VidHlwZTogXCJhbnkgcmFjZVwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwiYW55IGFsaWdubWVudFwiLFxuICAgICAgICBhYzogMTIsXG4gICAgICAgIGhwOiA5OSxcbiAgICAgICAgaGl0X2RpY2U6IFwiMThkOCArIDE4XCIsXG4gICAgICAgIHNwZWVkOiBcIjMwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzEwLCAxNCwgMTIsIDIwLCAxNSwgMTZdLFxuICAgICAgICBzYXZlczogW3sgaW50ZWxsaWdlbmNlOiA5IH0sIHsgd2lzZG9tOiA2IH1dLFxuICAgICAgICBza2lsbHNhdmVzOiBbeyBhcmNhbmE6IDEzIH0sIHsgaGlzdG9yeTogMTMgfV0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczpcbiAgICAgICAgICAgIFwiZGFtYWdlIGZyb20gc3BlbGxzOyBub24gbWFnaWNhbCBibHVkZ2VvbmluZywgcGllcmNpbmcsIGFuZCBzbGFzaGluZyAoZnJvbSBzdG9uZXNraW4pXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcbiAgICAgICAgc2Vuc2VzOiBcInBhc3NpdmUgUGVyY2VwdGlvbiAxMlwiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiYW55IHNpeCBsYW5ndWFnZXNcIixcbiAgICAgICAgY3I6IFwiMTJcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJNYWdpYyBSZXNpc3RhbmNlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgYXJjaG1hZ2UgaGFzIGFkdmFudGFnZSBvbiBzYXZpbmcgdGhyb3dzIGFnYWluc3Qgc3BlbGxzIGFuZCBvdGhlciBtYWdpY2FsIGVmZmVjdHMuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkRhZ2dlclwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgb3IgUmFuZ2VkIFdlYXBvbiBBdHRhY2s6ICs2IHRvIGhpdCwgcmVhY2ggNSBmdC4gb3IgcmFuZ2UgMjAvNjAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDQgKDFkNCArIDIpIHBpZXJjaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDYsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMWQ0XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiAyXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIHNwZWxsczogW1xuICAgICAgICAgICAgXCJUaGUgYXJjaG1hZ2UgaXMgYW4gMTh0aC1sZXZlbCBzcGVsbGNhc3Rlci4gSXRzIHNwZWxsY2FzdGluZyBhYmlsaXR5IGlzIEludGVsbGlnZW5jZSAoc3BlbGwgc2F2ZSBEQyAxNywgKzkgdG8gaGl0IHdpdGggc3BlbGwgYXR0YWNrcykuIFRoZSBhcmNobWFnZSBjYW4gY2FzdCBkaXNndWlzZSBzZWxmIGFuZCBpbnZpc2liaWxpdHkgYXQgd2lsbCBhbmQgaGFzIHRoZSBmb2xsb3dpbmcgd2l6YXJkIHNwZWxscyBwcmVwYXJlZDpcIixcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIkNhbnRyaXBzIChhdCB3aWxsKVwiOlxuICAgICAgICAgICAgICAgICAgICBcImZpcmUgYm9sdCwgbGlnaHQsIG1hZ2UgaGFuZCwgcHJlc3RpZGlnaXRhdGlvbiwgc2hvY2tpbmcgZ3Jhc3BcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIjFzdCBsZXZlbCAoNCBzbG90cylcIjpcbiAgICAgICAgICAgICAgICAgICAgXCJkZXRlY3QgbWFnaWMsIGlkZW50aWZ5LCBtYWdlIGFybW9yKiwgbWFnaWMgbWlzc2lsZVwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwiMm5kIGxldmVsICgzIHNsb3RzKVwiOlxuICAgICAgICAgICAgICAgICAgICBcImRldGVjdCB0aG91Z2h0cywgbWlycm9yIGltYWdlLCBtaXN0eSBzdGVwXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7IFwiM3JkIGxldmVsICgzIHNsb3RzKVwiOiBcImNvdW50ZXJzcGVsbCxmbHksIGxpZ2h0bmluZyBib2x0XCIgfSxcbiAgICAgICAgICAgIHsgXCI0dGggbGV2ZWwgKDMgc2xvdHMpXCI6IFwiYmFuaXNobWVudCwgZmlyZSBzaGllbGQsIHN0b25lc2tpbipcIiB9LFxuICAgICAgICAgICAgeyBcIjV0aCBsZXZlbCAoMyBzbG90cylcIjogXCJjb25lIG9mIGNvbGQsIHNjcnlpbmcsIHdhbGwgb2YgZm9yY2VcIiB9LFxuICAgICAgICAgICAgeyBcIjZ0aCBsZXZlbCAoMSBzbG90KVwiOiBcImdsb2JlIG9mIGludnVsbmVyYWJpbGl0eVwiIH0sXG4gICAgICAgICAgICB7IFwiN3RoIGxldmVsICgxIHNsb3QpXCI6IFwidGVsZXBvcnRcIiB9LFxuICAgICAgICAgICAgeyBcIjh0aCBsZXZlbCAoMSBzbG90KVwiOiBcIm1pbmQgYmxhbmsqXCIgfSxcbiAgICAgICAgICAgIHsgXCI5dGggbGV2ZWwgKDEgc2xvdClcIjogXCJ0aW1lIHN0b3BcIiB9LFxuICAgICAgICAgICAgXCIqIFRoZSBhcmNobWFnZSBjYXN0cyB0aGVzZSBzcGVsbHMgb24gaXRzZWxmIGJlZm9yZSBjb21iYXQuXCJcbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIkFzc2Fzc2luXCIsXG4gICAgICAgIHNpemU6IFwiTWVkaXVtXCIsXG4gICAgICAgIHR5cGU6IFwiaHVtYW5vaWRcIixcbiAgICAgICAgc3VidHlwZTogXCJhbnkgcmFjZVwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwiYW55IG5vbi1nb29kIGFsaWdubWVudFwiLFxuICAgICAgICBhYzogMTUsXG4gICAgICAgIGhwOiA3OCxcbiAgICAgICAgaGl0X2RpY2U6IFwiMTJkOCArIDI0XCIsXG4gICAgICAgIHNwZWVkOiBcIjMwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzExLCAxNiwgMTQsIDEzLCAxMSwgMTBdLFxuICAgICAgICBzYXZlczogW3sgZGV4dGVyaXR5OiA2IH0sIHsgaW50ZWxsaWdlbmNlOiA0IH1dLFxuICAgICAgICBza2lsbHNhdmVzOiBbXG4gICAgICAgICAgICB7IGFjcm9iYXRpY3M6IDYgfSxcbiAgICAgICAgICAgIHsgZGVjZXB0aW9uOiAzIH0sXG4gICAgICAgICAgICB7IHBlcmNlcHRpb246IDMgfSxcbiAgICAgICAgICAgIHsgc3RlYWx0aDogOSB9XG4gICAgICAgIF0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJwb2lzb25cIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBzZW5zZXM6IFwicGFzc2l2ZSBQZXJjZXB0aW9uIDEzXCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJUaGlldmVzJyBjYW50IHBsdXMgYW55IHR3byBsYW5ndWFnZXNcIixcbiAgICAgICAgY3I6IFwiOFwiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkFzc2Fzc2luYXRlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJEdXJpbmcgaXRzIGZpcnN0IHR1cm4sIHRoZSBhc3Nhc3NpbiBoYXMgYWR2YW50YWdlIG9uIGF0dGFjayByb2xscyBhZ2FpbnN0IGFueSBjcmVhdHVyZSB0aGF0IGhhc24ndCB0YWtlbiBhIHR1cm4uIEFueSBoaXQgdGhlIGFzc2Fzc2luIHNjb3JlcyBhZ2FpbnN0IGEgc3VycHJpc2VkIGNyZWF0dXJlIGlzIGEgY3JpdGljYWwgaGl0LlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkV2YXNpb25cIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIklmIHRoZSBhc3Nhc3NpbiBpcyBzdWJqZWN0ZWQgdG8gYW4gZWZmZWN0IHRoYXQgYWxsb3dzIGl0IHRvIG1ha2UgYSBEZXh0ZXJpdHkgc2F2aW5nIHRocm93IHRvIHRha2Ugb25seSBoYWxmIGRhbWFnZSwgdGhlIGFzc2Fzc2luIGluc3RlYWQgdGFrZXMgbm8gZGFtYWdlIGlmIGl0IHN1Y2NlZWRzIG9uIHRoZSBzYXZpbmcgdGhyb3csIGFuZCBvbmx5IGhhbGYgZGFtYWdlIGlmIGl0IGZhaWxzLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlNuZWFrIEF0dGFjayAoMS9UdXJuKVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGFzc2Fzc2luIGRlYWxzIGFuIGV4dHJhIDEzICg0ZDYpIGRhbWFnZSB3aGVuIGl0IGhpdHMgYSB0YXJnZXQgd2l0aCBhIHdlYXBvbiBhdHRhY2sgYW5kIGhhcyBhZHZhbnRhZ2Ugb24gdGhlIGF0dGFjayByb2xsLCBvciB3aGVuIHRoZSB0YXJnZXQgaXMgd2l0aGluIDUgZnQuIG9mIGFuIGFsbHkgb2YgdGhlIGFzc2Fzc2luIHRoYXQgaXNuJ3QgaW5jYXBhY2l0YXRlZCBhbmQgdGhlIGFzc2Fzc2luIGRvZXNuJ3QgaGF2ZSBkaXNhZHZhbnRhZ2Ugb24gdGhlIGF0dGFjayByb2xsLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCI0ZDZcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJNdWx0aWF0dGFja1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGFzc2Fzc2luIG1ha2VzIHR3byBzaG9ydHN3b3JkIGF0dGFja3MuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiU2hvcnRzd29yZFwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzYgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiA2ICgxZDYgKyAzKSBwaWVyY2luZyBkYW1hZ2UsIGFuZCB0aGUgdGFyZ2V0IG11c3QgbWFrZSBhIERDIDE1IENvbnN0aXR1dGlvbiBzYXZpbmcgdGhyb3csIHRha2luZyAyNCAoN2Q2KSBwb2lzb24gZGFtYWdlIG9uIGEgZmFpbGVkIHNhdmUsIG9yIGhhbGYgYXMgbXVjaCBkYW1hZ2Ugb24gYSBzdWNjZXNzZnVsIG9uZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDYsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMWQ2XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiAzXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTGlnaHQgQ3Jvc3Nib3dcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlJhbmdlZCBXZWFwb24gQXR0YWNrOiArNiB0byBoaXQsIHJhbmdlIDgwLzMyMCBmdC4sIG9uZSB0YXJnZXQuIEhpdDogNyAoMWQ4ICsgMykgcGllcmNpbmcgZGFtYWdlLCBhbmQgdGhlIHRhcmdldCBtdXN0IG1ha2UgYSBEQyAxNSBDb25zdGl0dXRpb24gc2F2aW5nIHRocm93LCB0YWtpbmcgMjQgKDdkNikgcG9pc29uIGRhbWFnZSBvbiBhIGZhaWxlZCBzYXZlLCBvciBoYWxmIGFzIG11Y2ggZGFtYWdlIG9uIGEgc3VjY2Vzc2Z1bCBvbmUuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA2LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjFkOFwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogM1xuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiQXdha2VuZWQgU2hydWJcIixcbiAgICAgICAgc2l6ZTogXCJTbWFsbFwiLFxuICAgICAgICB0eXBlOiBcInBsYW50XCIsXG4gICAgICAgIHN1YnR5cGU6IFwiXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcbiAgICAgICAgYWM6IDksXG4gICAgICAgIGhwOiAxMCxcbiAgICAgICAgaGl0X2RpY2U6IFwiM2Q2ICsgLTFcIixcbiAgICAgICAgc3BlZWQ6IFwiMjAgZnQuXCIsXG4gICAgICAgIHN0YXRzOiBbMywgOCwgMTEsIDEwLCAxMCwgNl0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiZmlyZVwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwicGllcmNpbmdcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBzZW5zZXM6IFwicGFzc2l2ZSBQZXJjZXB0aW9uIDEwXCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJvbmUgbGFuZ3VhZ2Uga25vd24gYnkgaXRzIGNyZWF0b3JcIixcbiAgICAgICAgY3I6IFwiMFwiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkZhbHNlIEFwcGVhcmFuY2VcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIldoaWxlIHRoZSBzaHJ1YiByZW1haW5zIG1vdGlvbmxlc3MsIGl0IGlzIGluZGlzdGluZ3Vpc2hhYmxlIGZyb20gYSBub3JtYWwgc2hydWIuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlJha2VcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICsxIHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMSAoMWQ0IFx1MjAxNCAxKSBzbGFzaGluZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAxLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjFkNFwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogLTFcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIkF3YWtlbmVkIFRyZWVcIixcbiAgICAgICAgc2l6ZTogXCJIdWdlXCIsXG4gICAgICAgIHR5cGU6IFwicGxhbnRcIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcInVuYWxpZ25lZFwiLFxuICAgICAgICBhYzogMTMsXG4gICAgICAgIGhwOiA1OSxcbiAgICAgICAgaGl0X2RpY2U6IFwiN2QxMiArIDEzXCIsXG4gICAgICAgIHNwZWVkOiBcIjIwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzE5LCA2LCAxNSwgMTAsIDEwLCA3XSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJmaXJlXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJibHVkZ2VvbmluZywgcGllcmNpbmdcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBzZW5zZXM6IFwicGFzc2l2ZSBQZXJjZXB0aW9uIDEwXCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJvbmUgbGFuZ3VhZ2Uga25vd24gYnkgaXRzIGNyZWF0b3JcIixcbiAgICAgICAgY3I6IFwiMlwiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkZhbHNlIEFwcGVhcmFuY2VcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIldoaWxlIHRoZSB0cmVlIHJlbWFpbnMgbW90aW9ubGVzcywgaXQgaXMgaW5kaXN0aW5ndWlzaGFibGUgZnJvbSBhIG5vcm1hbCB0cmVlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJTbGFtXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNiB0byBoaXQsIHJlYWNoIDEwIGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxNCAoM2Q2ICsgNCkgYmx1ZGdlb25pbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIzZDZcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDRcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIkF4ZSBCZWFrXCIsXG4gICAgICAgIHNpemU6IFwiTGFyZ2VcIixcbiAgICAgICAgdHlwZTogXCJiZWFzdFwiLFxuICAgICAgICBzdWJ0eXBlOiBcIlwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwidW5hbGlnbmVkXCIsXG4gICAgICAgIGFjOiAxMSxcbiAgICAgICAgaHA6IDE5LFxuICAgICAgICBoaXRfZGljZTogXCIzZDEwICsgMlwiLFxuICAgICAgICBzcGVlZDogXCI1MCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsxNCwgMTIsIDEyLCAyLCAxMCwgNV0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBzZW5zZXM6IFwicGFzc2l2ZSBQZXJjZXB0aW9uIDEwXCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJcIixcbiAgICAgICAgY3I6IFwiMS80XCIsXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkJlYWtcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs0IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogNiAoMWQ4ICsgMikgc2xhc2hpbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIxZDhcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIkF6ZXJcIixcbiAgICAgICAgc2l6ZTogXCJNZWRpdW1cIixcbiAgICAgICAgdHlwZTogXCJlbGVtZW50YWxcIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcImxhd2Z1bCBuZXV0cmFsXCIsXG4gICAgICAgIGFjOiAxNyxcbiAgICAgICAgaHA6IDM5LFxuICAgICAgICBoaXRfZGljZTogXCI2ZDggKyAxMlwiLFxuICAgICAgICBzcGVlZDogXCIzMCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsxNywgMTIsIDE1LCAxMiwgMTMsIDEwXSxcbiAgICAgICAgc2F2ZXM6IFt7IGNvbnN0aXR1dGlvbjogNCB9XSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczogXCJmaXJlLCBwb2lzb25cIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwicG9pc29uZWRcIixcbiAgICAgICAgc2Vuc2VzOiBcInBhc3NpdmUgUGVyY2VwdGlvbiAxMVwiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiSWduYW5cIixcbiAgICAgICAgY3I6IFwiMlwiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkhlYXRlZCBCb2R5XCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJBIGNyZWF0dXJlIHRoYXQgdG91Y2hlcyB0aGUgYXplciBvciBoaXRzIGl0IHdpdGggYSBtZWxlZSBhdHRhY2sgd2hpbGUgd2l0aGluIDUgZnQuIG9mIGl0IHRha2VzIDUgKDFkMTApIGZpcmUgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIxZDEwXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJIZWF0ZWQgV2VhcG9uc1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiV2hlbiB0aGUgYXplciBoaXRzIHdpdGggYSBtZXRhbCBtZWxlZSB3ZWFwb24sIGl0IGRlYWxzIGFuIGV4dHJhIDMgKDFkNikgZmlyZSBkYW1hZ2UgKGluY2x1ZGVkIGluIHRoZSBhdHRhY2spLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIklsbHVtaW5hdGlvblwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGF6ZXIgc2hlZHMgYnJpZ2h0IGxpZ2h0IGluIGEgMTAtZm9vdCByYWRpdXMgYW5kIGRpbSBsaWdodCBmb3IgYW4gYWRkaXRpb25hbCAxMCBmdC4uXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIldhcmhhbW1lclwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzUgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiA3ICgxZDggKyAzKSBibHVkZ2VvbmluZyBkYW1hZ2UsIG9yIDggKDFkMTAgKyAzKSBibHVkZ2VvbmluZyBkYW1hZ2UgaWYgdXNlZCB3aXRoIHR3byBoYW5kcyB0byBtYWtlIGEgbWVsZWUgYXR0YWNrLCBwbHVzIDMgKDFkNikgZmlyZSBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA1LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjFkOCArIDFkNlwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogM1xuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiQmFib29uXCIsXG4gICAgICAgIHNpemU6IFwiU21hbGxcIixcbiAgICAgICAgdHlwZTogXCJiZWFzdFwiLFxuICAgICAgICBzdWJ0eXBlOiBcIlwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwidW5hbGlnbmVkXCIsXG4gICAgICAgIGFjOiAxMixcbiAgICAgICAgaHA6IDMsXG4gICAgICAgIGhpdF9kaWNlOiBcIjFkNiArIC0xXCIsXG4gICAgICAgIHNwZWVkOiBcIjMwIGZ0LiwgY2xpbWIgMzAgZnQuXCIsXG4gICAgICAgIHN0YXRzOiBbOCwgMTQsIDExLCA0LCAxMiwgNl0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBzZW5zZXM6IFwicGFzc2l2ZSBQZXJjZXB0aW9uIDExXCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJcIixcbiAgICAgICAgY3I6IFwiMFwiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlBhY2sgVGFjdGljc1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGJhYm9vbiBoYXMgYWR2YW50YWdlIG9uIGFuIGF0dGFjayByb2xsIGFnYWluc3QgYSBjcmVhdHVyZSBpZiBhdCBsZWFzdCBvbmUgb2YgdGhlIGJhYm9vbidzIGFsbGllcyBpcyB3aXRoaW4gNSBmdC4gb2YgdGhlIGNyZWF0dXJlIGFuZCB0aGUgYWxseSBpc24ndCBpbmNhcGFjaXRhdGVkLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJCaXRlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMSB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDEgKDFkNCBcdTIwMTQgMSkgcGllcmNpbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMSxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIxZDRcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IC0xXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJCYWRnZXJcIixcbiAgICAgICAgc2l6ZTogXCJUaW55XCIsXG4gICAgICAgIHR5cGU6IFwiYmVhc3RcIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcInVuYWxpZ25lZFwiLFxuICAgICAgICBhYzogMTAsXG4gICAgICAgIGhwOiAzLFxuICAgICAgICBoaXRfZGljZTogXCIxZDRcIixcbiAgICAgICAgc3BlZWQ6IFwiMjAgZnQuLCBidXJyb3cgNSBmdC5cIixcbiAgICAgICAgc3RhdHM6IFs0LCAxMSwgMTIsIDIsIDEyLCA1XSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIHNlbnNlczogXCJkYXJrdmlzaW9uIDMwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDExXCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJcIixcbiAgICAgICAgY3I6IFwiMFwiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIktlZW4gU21lbGxcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBiYWRnZXIgaGFzIGFkdmFudGFnZSBvbiBXaXNkb20gKFBlcmNlcHRpb24pIGNoZWNrcyB0aGF0IHJlbHkgb24gc21lbGwuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkJpdGVcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICsyIHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMSBwaWVyY2luZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAyLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogMVxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiQmFsb3JcIixcbiAgICAgICAgc2l6ZTogXCJIdWdlXCIsXG4gICAgICAgIHR5cGU6IFwiZmllbmRcIixcbiAgICAgICAgc3VidHlwZTogXCJkZW1vblwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwiY2hhb3RpYyBldmlsXCIsXG4gICAgICAgIGFjOiAxOSxcbiAgICAgICAgaHA6IDI2MixcbiAgICAgICAgaGl0X2RpY2U6IFwiMjFkMTIgKyAxMjVcIixcbiAgICAgICAgc3BlZWQ6IFwiNDAgZnQuLCBmbHkgODAgZnQuXCIsXG4gICAgICAgIHN0YXRzOiBbMjYsIDE1LCAyMiwgMjAsIDE2LCAyMl0sXG4gICAgICAgIHNhdmVzOiBbXG4gICAgICAgICAgICB7IHN0cmVuZ3RoOiAxNCB9LFxuICAgICAgICAgICAgeyBjb25zdGl0dXRpb246IDEyIH0sXG4gICAgICAgICAgICB7IHdpc2RvbTogOSB9LFxuICAgICAgICAgICAgeyBjaGFyaXNtYTogMTIgfVxuICAgICAgICBdLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6XG4gICAgICAgICAgICBcImNvbGQsIGxpZ2h0bmluZzsgYmx1ZGdlb25pbmcsIHBpZXJjaW5nLCBhbmQgc2xhc2hpbmcgZnJvbSBub25tYWdpY2FsIHdlYXBvbnNcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwiZmlyZSwgcG9pc29uXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOiBcInBvaXNvbmVkXCIsXG4gICAgICAgIHNlbnNlczogXCJ0cnVlc2lnaHQgMTIwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDEzXCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJBYnlzc2FsLCB0ZWxlcGF0aHkgMTIwIGZ0LlwiLFxuICAgICAgICBjcjogXCIxOVwiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkRlYXRoIFRocm9lc1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiV2hlbiB0aGUgYmFsb3IgZGllcywgaXQgZXhwbG9kZXMsIGFuZCBlYWNoIGNyZWF0dXJlIHdpdGhpbiAzMCBmZWV0IG9mIGl0IG11c3QgbWFrZSBhIERDIDIwIERleHRlcml0eSBzYXZpbmcgdGhyb3csIHRha2luZyA3MCAoMjBkNikgZmlyZSBkYW1hZ2Ugb24gYSBmYWlsZWQgc2F2ZSwgb3IgaGFsZiBhcyBtdWNoIGRhbWFnZSBvbiBhIHN1Y2Nlc3NmdWwgb25lLiBUaGUgZXhwbG9zaW9uIGlnbml0ZXMgZmxhbW1hYmxlIG9iamVjdHMgaW4gdGhhdCBhcmVhIHRoYXQgYXJlbid0IGJlaW5nIHdvcm4gb3IgY2FycmllZCwgYW5kIGl0IGRlc3Ryb3lzIHRoZSBiYWxvcidzIHdlYXBvbnMuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjIwZDZcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkZpcmUgQXVyYVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiQXQgdGhlIHN0YXJ0IG9mIGVhY2ggb2YgdGhlIGJhbG9yJ3MgdHVybnMsIGVhY2ggY3JlYXR1cmUgd2l0aGluIDUgZmVldCBvZiBpdCB0YWtlcyAxMCAoM2Q2KSBmaXJlIGRhbWFnZSwgYW5kIGZsYW1tYWJsZSBvYmplY3RzIGluIHRoZSBhdXJhIHRoYXQgYXJlbid0IGJlaW5nIHdvcm4gb3IgY2FycmllZCBpZ25pdGUuIEEgY3JlYXR1cmUgdGhhdCB0b3VjaGVzIHRoZSBiYWxvciBvciBoaXRzIGl0IHdpdGggYSBtZWxlZSBhdHRhY2sgd2hpbGUgd2l0aGluIDUgZmVldCBvZiBpdCB0YWtlcyAxMCAoM2Q2KSBmaXJlIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDAsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiM2Q2XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJNYWdpYyBSZXNpc3RhbmNlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgYmFsb3IgaGFzIGFkdmFudGFnZSBvbiBzYXZpbmcgdGhyb3dzIGFnYWluc3Qgc3BlbGxzIGFuZCBvdGhlciBtYWdpY2FsIGVmZmVjdHMuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTWFnaWMgV2VhcG9uc1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGJhbG9yJ3Mgd2VhcG9uIGF0dGFja3MgYXJlIG1hZ2ljYWwuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgYmFsb3IgbWFrZXMgdHdvIGF0dGFja3M6IG9uZSB3aXRoIGl0cyBsb25nc3dvcmQgYW5kIG9uZSB3aXRoIGl0cyB3aGlwLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkxvbmdzd29yZFwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzE0IHRvIGhpdCwgcmVhY2ggMTAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDIxICgzZDggKyA4KSBzbGFzaGluZyBkYW1hZ2UgcGx1cyAxMyAoM2Q4KSBsaWdodG5pbmcgZGFtYWdlLiBJZiB0aGUgYmFsb3Igc2NvcmVzIGEgY3JpdGljYWwgaGl0LCBpdCByb2xscyBkYW1hZ2UgZGljZSB0aHJlZSB0aW1lcywgaW5zdGVhZCBvZiB0d2ljZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDE0LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjNkOCArIDNkOFwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogOFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIldoaXBcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICsxNCB0byBoaXQsIHJlYWNoIDMwIGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxNSAoMmQ2ICsgOCkgc2xhc2hpbmcgZGFtYWdlIHBsdXMgMTAgKDNkNikgZmlyZSBkYW1hZ2UsIGFuZCB0aGUgdGFyZ2V0IG11c3Qgc3VjY2VlZCBvbiBhIERDIDIwIFN0cmVuZ3RoIHNhdmluZyB0aHJvdyBvciBiZSBwdWxsZWQgdXAgdG8gMjUgZmVldCB0b3dhcmQgdGhlIGJhbG9yLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMTQsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMmQ2ICsgM2Q2XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiA4XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiVGVsZXBvcnRcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBiYWxvciBtYWdpY2FsbHkgdGVsZXBvcnRzLCBhbG9uZyB3aXRoIGFueSBlcXVpcG1lbnQgaXQgaXMgd2VhcmluZyBvciBjYXJyeWluZywgdXAgdG8gMTIwIGZlZXQgdG8gYW4gdW5vY2N1cGllZCBzcGFjZSBpdCBjYW4gc2VlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlZhcmlhbnQ6IFN1bW1vbiBEZW1vbiAoMS9EYXkpXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZGVtb24gY2hvb3NlcyB3aGF0IHRvIHN1bW1vbiBhbmQgYXR0ZW1wdHMgYSBtYWdpY2FsIHN1bW1vbmluZy5cXFxcbkEgYmFsb3IgaGFzIGEgNTAgcGVyY2VudCBjaGFuY2Ugb2Ygc3VtbW9uaW5nIDFkOCB2cm9ja3MsIDFkNiBoZXpyb3VzLCAxZDQgZ2xhYnJlenVzLCAxZDMgbmFsZmVzaG5lZXMsIDFkMiBtYXJpbGl0aHMsIG9yIG9uZSBnb3Jpc3Ryby5cXFxcbkEgc3VtbW9uZWQgZGVtb24gYXBwZWFycyBpbiBhbiB1bm9jY3VwaWVkIHNwYWNlIHdpdGhpbiA2MCBmZWV0IG9mIGl0cyBzdW1tb25lciwgYWN0cyBhcyBhbiBhbGx5IG9mIGl0cyBzdW1tb25lciwgYW5kIGNhbid0IHN1bW1vbiBvdGhlciBkZW1vbnMuIEl0IHJlbWFpbnMgZm9yIDEgbWludXRlLCB1bnRpbCBpdCBvciBpdHMgc3VtbW9uZXIgZGllcywgb3IgdW50aWwgaXRzIHN1bW1vbmVyIGRpc21pc3NlcyBpdCBhcyBhbiBhY3Rpb24uXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJCYW5kaXRcIixcbiAgICAgICAgc2l6ZTogXCJNZWRpdW1cIixcbiAgICAgICAgdHlwZTogXCJodW1hbm9pZFwiLFxuICAgICAgICBzdWJ0eXBlOiBcImFueSByYWNlXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJhbnkgbm9uLWxhd2Z1bCBhbGlnbm1lbnRcIixcbiAgICAgICAgYWM6IDEyLFxuICAgICAgICBocDogMTEsXG4gICAgICAgIGhpdF9kaWNlOiBcIjJkOCArIDJcIixcbiAgICAgICAgc3BlZWQ6IFwiMzAgZnQuXCIsXG4gICAgICAgIHN0YXRzOiBbMTEsIDEyLCAxMiwgMTAsIDEwLCAxMF0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBzZW5zZXM6IFwicGFzc2l2ZSBQZXJjZXB0aW9uIDEwXCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJhbnkgb25lIGxhbmd1YWdlICh1c3VhbGx5IENvbW1vbilcIixcbiAgICAgICAgY3I6IFwiMS84XCIsXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlNjaW1pdGFyXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMyB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDQgKDFkNiArIDEpIHNsYXNoaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDMsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMWQ2XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiAxXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTGlnaHQgQ3Jvc3Nib3dcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlJhbmdlZCBXZWFwb24gQXR0YWNrOiArMyB0byBoaXQsIHJhbmdlIDgwIGZ0Li8zMjAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDUgKDFkOCArIDEpIHBpZXJjaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDMsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMWQ4XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiAxXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJCYW5kaXQgQ2FwdGFpblwiLFxuICAgICAgICBzaXplOiBcIk1lZGl1bVwiLFxuICAgICAgICB0eXBlOiBcImh1bWFub2lkXCIsXG4gICAgICAgIHN1YnR5cGU6IFwiYW55IHJhY2VcIixcbiAgICAgICAgYWxpZ25tZW50OiBcImFueSBub24tbGF3ZnVsIGFsaWdubWVudFwiLFxuICAgICAgICBhYzogMTUsXG4gICAgICAgIGhwOiA2NSxcbiAgICAgICAgaGl0X2RpY2U6IFwiMTBkOCArIDIwXCIsXG4gICAgICAgIHNwZWVkOiBcIjMwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzE1LCAxNiwgMTQsIDE0LCAxMSwgMTRdLFxuICAgICAgICBzYXZlczogW3sgc3RyZW5ndGg6IDQgfSwgeyBkZXh0ZXJpdHk6IDUgfSwgeyB3aXNkb206IDIgfV0sXG4gICAgICAgIHNraWxsc2F2ZXM6IFt7IGF0aGxldGljczogNCB9LCB7IGRlY2VwdGlvbjogNCB9XSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIHNlbnNlczogXCJwYXNzaXZlIFBlcmNlcHRpb24gMTBcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcImFueSB0d28gbGFuZ3VhZ2VzXCIsXG4gICAgICAgIGNyOiBcIjJcIixcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBjYXB0YWluIG1ha2VzIHRocmVlIG1lbGVlIGF0dGFja3M6IHR3byB3aXRoIGl0cyBzY2ltaXRhciBhbmQgb25lIHdpdGggaXRzIGRhZ2dlci4gT3IgdGhlIGNhcHRhaW4gbWFrZXMgdHdvIHJhbmdlZCBhdHRhY2tzIHdpdGggaXRzIGRhZ2dlcnMuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiU2NpbWl0YXJcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs1IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogNiAoMWQ2ICsgMykgc2xhc2hpbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNSxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIxZDZcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDNcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJEYWdnZXJcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIG9yIFJhbmdlZCBXZWFwb24gQXR0YWNrOiArNSB0byBoaXQsIHJlYWNoIDUgZnQuIG9yIHJhbmdlIDIwLzYwIGZ0Liwgb25lIHRhcmdldC4gSGl0OiA1ICgxZDQgKyAzKSBwaWVyY2luZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA1LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjFkNFwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogM1xuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICByZWFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlBhcnJ5XCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgY2FwdGFpbiBhZGRzIDIgdG8gaXRzIEFDIGFnYWluc3Qgb25lIG1lbGVlIGF0dGFjayB0aGF0IHdvdWxkIGhpdCBpdC4gVG8gZG8gc28sIHRoZSBjYXB0YWluIG11c3Qgc2VlIHRoZSBhdHRhY2tlciBhbmQgYmUgd2llbGRpbmcgYSBtZWxlZSB3ZWFwb24uXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJCYXJiZWQgRGV2aWxcIixcbiAgICAgICAgc2l6ZTogXCJNZWRpdW1cIixcbiAgICAgICAgdHlwZTogXCJmaWVuZFwiLFxuICAgICAgICBzdWJ0eXBlOiBcImRldmlsXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJsYXdmdWwgZXZpbFwiLFxuICAgICAgICBhYzogMTUsXG4gICAgICAgIGhwOiAxMTAsXG4gICAgICAgIGhpdF9kaWNlOiBcIjEzZDggKyA1MVwiLFxuICAgICAgICBzcGVlZDogXCIzMCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsxNiwgMTcsIDE4LCAxMiwgMTQsIDE0XSxcbiAgICAgICAgc2F2ZXM6IFtcbiAgICAgICAgICAgIHsgc3RyZW5ndGg6IDYgfSxcbiAgICAgICAgICAgIHsgY29uc3RpdHV0aW9uOiA3IH0sXG4gICAgICAgICAgICB7IHdpc2RvbTogNSB9LFxuICAgICAgICAgICAgeyBjaGFyaXNtYTogNSB9XG4gICAgICAgIF0sXG4gICAgICAgIHNraWxsc2F2ZXM6IFt7IGRlY2VwdGlvbjogNSB9LCB7IGluc2lnaHQ6IDUgfSwgeyBwZXJjZXB0aW9uOiA4IH1dLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6XG4gICAgICAgICAgICBcImNvbGQ7IGJsdWRnZW9uaW5nLCBwaWVyY2luZywgYW5kIHNsYXNoaW5nIGZyb20gbm9ubWFnaWNhbCB3ZWFwb25zIHRoYXQgYXJlbid0IHNpbHZlcmVkXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcImZpcmUsIHBvaXNvblwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJwb2lzb25lZFwiLFxuICAgICAgICBzZW5zZXM6IFwiZGFya3Zpc2lvbiAxMjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMThcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcIkluZmVybmFsLCB0ZWxlcGF0aHkgMTIwIGZ0LlwiLFxuICAgICAgICBjcjogXCI1XCIsXG4gICAgICAgIHRyYWl0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQmFyYmVkIEhpZGVcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIkF0IHRoZSBzdGFydCBvZiBlYWNoIG9mIGl0cyB0dXJucywgdGhlIGJhcmJlZCBkZXZpbCBkZWFscyA1ICgxZDEwKSBwaWVyY2luZyBkYW1hZ2UgdG8gYW55IGNyZWF0dXJlIGdyYXBwbGluZyBpdC5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDAsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMWQxMFwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiRGV2aWwncyBTaWdodFwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWFnaWNhbCBkYXJrbmVzcyBkb2Vzbid0IGltcGVkZSB0aGUgZGV2aWwncyBkYXJrdmlzaW9uLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk1hZ2ljIFJlc2lzdGFuY2VcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBkZXZpbCBoYXMgYWR2YW50YWdlIG9uIHNhdmluZyB0aHJvd3MgYWdhaW5zdCBzcGVsbHMgYW5kIG90aGVyIG1hZ2ljYWwgZWZmZWN0cy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBkZXZpbCBtYWtlcyB0aHJlZSBtZWxlZSBhdHRhY2tzOiBvbmUgd2l0aCBpdHMgdGFpbCBhbmQgdHdvIHdpdGggaXRzIGNsYXdzLiBBbHRlcm5hdGl2ZWx5LCBpdCBjYW4gdXNlIEh1cmwgRmxhbWUgdHdpY2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQ2xhd1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzYgdG8gaGl0LCByZWFjaCA1IGZ0IC4sIG9uZSB0YXJnZXQuIEhpdDogNiAoMWQ2ICsgMykgcGllcmNpbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIxZDZcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDNcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJUYWlsXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNiB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDEwICgyZDYgKyAzKSBwaWVyY2luZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA2LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjJkNlwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogM1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkh1cmwgRmxhbWVcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlJhbmdlZCBTcGVsbCBBdHRhY2s6ICs1IHRvIGhpdCwgcmFuZ2UgMTUwIGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxMCAoM2Q2KSBmaXJlIGRhbWFnZS4gSWYgdGhlIHRhcmdldCBpcyBhIGZsYW1tYWJsZSBvYmplY3QgdGhhdCBpc24ndCBiZWluZyB3b3JuIG9yIGNhcnJpZWQsIGl0IGFsc28gY2F0Y2hlcyBmaXJlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNSxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIzZDZcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiQmFzaWxpc2tcIixcbiAgICAgICAgc2l6ZTogXCJNZWRpdW1cIixcbiAgICAgICAgdHlwZTogXCJtb25zdHJvc2l0eVwiLFxuICAgICAgICBzdWJ0eXBlOiBcIlwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwidW5hbGlnbmVkXCIsXG4gICAgICAgIGFjOiAxMixcbiAgICAgICAgaHA6IDUyLFxuICAgICAgICBoaXRfZGljZTogXCI4ZDggKyAxNlwiLFxuICAgICAgICBzcGVlZDogXCIyMCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsxNiwgOCwgMTUsIDIsIDgsIDddLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcbiAgICAgICAgc2Vuc2VzOiBcImRhcmt2aXNpb24gNjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gOVwiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiXCIsXG4gICAgICAgIGNyOiBcIjNcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJQZXRyaWZ5aW5nIEdhemVcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIklmIGEgY3JlYXR1cmUgc3RhcnRzIGl0cyB0dXJuIHdpdGhpbiAzMCBmdC4gb2YgdGhlIGJhc2lsaXNrIGFuZCB0aGUgdHdvIG9mIHRoZW0gY2FuIHNlZSBlYWNoIG90aGVyLCB0aGUgYmFzaWxpc2sgY2FuIGZvcmNlIHRoZSBjcmVhdHVyZSB0byBtYWtlIGEgREMgMTIgQ29uc3RpdHV0aW9uIHNhdmluZyB0aHJvdyBpZiB0aGUgYmFzaWxpc2sgaXNuJ3QgaW5jYXBhY2l0YXRlZC4gT24gYSBmYWlsZWQgc2F2ZSwgdGhlIGNyZWF0dXJlIG1hZ2ljYWxseSBiZWdpbnMgdG8gdHVybiB0byBzdG9uZSBhbmQgaXMgcmVzdHJhaW5lZC4gSXQgbXVzdCByZXBlYXQgdGhlIHNhdmluZyB0aHJvdyBhdCB0aGUgZW5kIG9mIGl0cyBuZXh0IHR1cm4uIE9uIGEgc3VjY2VzcywgdGhlIGVmZmVjdCBlbmRzLiBPbiBhIGZhaWx1cmUsIHRoZSBjcmVhdHVyZSBpcyBwZXRyaWZpZWQgdW50aWwgZnJlZWQgYnkgdGhlIGdyZWF0ZXIgcmVzdG9yYXRpb24gc3BlbGwgb3Igb3RoZXIgbWFnaWMuXFxcXG5BIGNyZWF0dXJlIHRoYXQgaXNuJ3Qgc3VycHJpc2VkIGNhbiBhdmVydCBpdHMgZXllcyB0byBhdm9pZCB0aGUgc2F2aW5nIHRocm93IGF0IHRoZSBzdGFydCBvZiBpdHMgdHVybi4gSWYgaXQgZG9lcyBzbywgaXQgY2FuJ3Qgc2VlIHRoZSBiYXNpbGlzayB1bnRpbCB0aGUgc3RhcnQgb2YgaXRzIG5leHQgdHVybiwgd2hlbiBpdCBjYW4gYXZlcnQgaXRzIGV5ZXMgYWdhaW4uIElmIGl0IGxvb2tzIGF0IHRoZSBiYXNpbGlzayBpbiB0aGUgbWVhbnRpbWUsIGl0IG11c3QgaW1tZWRpYXRlbHkgbWFrZSB0aGUgc2F2ZS5cXFxcbklmIHRoZSBiYXNpbGlzayBzZWVzIGl0cyByZWZsZWN0aW9uIHdpdGhpbiAzMCBmdC4gb2YgaXQgaW4gYnJpZ2h0IGxpZ2h0LCBpdCBtaXN0YWtlcyBpdHNlbGYgZm9yIGEgcml2YWwgYW5kIHRhcmdldHMgaXRzZWxmIHdpdGggaXRzIGdhemUuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkJpdGVcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs1IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTAgKDJkNiArIDMpIHBpZXJjaW5nIGRhbWFnZSBwbHVzIDcgKDJkNikgcG9pc29uIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDUsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMmQ2ICsgMmQ2XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiAzXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJCYXRcIixcbiAgICAgICAgc2l6ZTogXCJUaW55XCIsXG4gICAgICAgIHR5cGU6IFwiYmVhc3RcIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcInVuYWxpZ25lZFwiLFxuICAgICAgICBhYzogMTIsXG4gICAgICAgIGhwOiAxLFxuICAgICAgICBoaXRfZGljZTogXCIxZDQgKyAtMlwiLFxuICAgICAgICBzcGVlZDogXCI1IGZ0LiwgZmx5IDMwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzIsIDE1LCA4LCAyLCAxMiwgNF0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBzZW5zZXM6IFwiYmxpbmRzaWdodCA2MCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxMVwiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiXCIsXG4gICAgICAgIGNyOiBcIjBcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJFY2hvbG9jYXRpb25cIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBiYXQgY2FuJ3QgdXNlIGl0cyBibGluZHNpZ2h0IHdoaWxlIGRlYWZlbmVkLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIktlZW4gSGVhcmluZ1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGJhdCBoYXMgYWR2YW50YWdlIG9uIFdpc2RvbSAoUGVyY2VwdGlvbikgY2hlY2tzIHRoYXQgcmVseSBvbiBoZWFyaW5nLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJCaXRlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMCB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgY3JlYXR1cmUuIEhpdDogMSBwaWVyY2luZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogMVxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiQmVhcmRlZCBEZXZpbFwiLFxuICAgICAgICBzaXplOiBcIk1lZGl1bVwiLFxuICAgICAgICB0eXBlOiBcImZpZW5kXCIsXG4gICAgICAgIHN1YnR5cGU6IFwiZGV2aWxcIixcbiAgICAgICAgYWxpZ25tZW50OiBcImxhd2Z1bCBldmlsXCIsXG4gICAgICAgIGFjOiAxMyxcbiAgICAgICAgaHA6IDUyLFxuICAgICAgICBoaXRfZGljZTogXCI4ZDggKyAxNlwiLFxuICAgICAgICBzcGVlZDogXCIzMCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsxNiwgMTUsIDE1LCA5LCAxMSwgMTFdLFxuICAgICAgICBzYXZlczogW3sgc3RyZW5ndGg6IDUgfSwgeyBjb25zdGl0dXRpb246IDQgfSwgeyB3aXNkb206IDIgfV0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczpcbiAgICAgICAgICAgIFwiY29sZDsgYmx1ZGdlb25pbmcsIHBpZXJjaW5nLCBhbmQgc2xhc2hpbmcgZnJvbSBub25tYWdpY2FsIHdlYXBvbnMgdGhhdCBhcmVuJ3Qgc2lsdmVyZWRcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwiZmlyZSwgcG9pc29uXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOiBcInBvaXNvbmVkXCIsXG4gICAgICAgIHNlbnNlczogXCJkYXJrdmlzaW9uIDEyMCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxMFwiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiSW5mZXJuYWwsIHRlbGVwYXRoeSAxMjAgZnQuXCIsXG4gICAgICAgIGNyOiBcIjNcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJEZXZpbCdzIFNpZ2h0XCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNYWdpY2FsIGRhcmtuZXNzIGRvZXNuJ3QgaW1wZWRlIHRoZSBkZXZpbCdzIGRhcmt2aXNpb24uXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTWFnaWMgUmVzaXN0YW5jZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGRldmlsIGhhcyBhZHZhbnRhZ2Ugb24gc2F2aW5nIHRocm93cyBhZ2FpbnN0IHNwZWxscyBhbmQgb3RoZXIgbWFnaWNhbCBlZmZlY3RzLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlN0ZWFkZmFzdFwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGRldmlsIGNhbid0IGJlIGZyaWdodGVuZWQgd2hpbGUgaXQgY2FuIHNlZSBhbiBhbGxpZWQgY3JlYXR1cmUgd2l0aGluIDMwIGZlZXQgb2YgaXQuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZGV2aWwgbWFrZXMgdHdvIGF0dGFja3M6IG9uZSB3aXRoIGl0cyBiZWFyZCBhbmQgb25lIHdpdGggaXRzIGdsYWl2ZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJCZWFyZFwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzUgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIGNyZWF0dXJlLiBIaXQ6IDYgKDFkOCArIDIpIHBpZXJjaW5nIGRhbWFnZSwgYW5kIHRoZSB0YXJnZXQgbXVzdCBzdWNjZWVkIG9uIGEgREMgMTIgQ29uc3RpdHV0aW9uIHNhdmluZyB0aHJvdyBvciBiZSBwb2lzb25lZCBmb3IgMSBtaW51dGUuIFdoaWxlIHBvaXNvbmVkIGluIHRoaXMgd2F5LCB0aGUgdGFyZ2V0IGNhbid0IHJlZ2FpbiBoaXQgcG9pbnRzLiBUaGUgdGFyZ2V0IGNhbiByZXBlYXQgdGhlIHNhdmluZyB0aHJvdyBhdCB0aGUgZW5kIG9mIGVhY2ggb2YgaXRzIHR1cm5zLCBlbmRpbmcgdGhlIGVmZmVjdCBvbiBpdHNlbGYgb24gYSBzdWNjZXNzLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNSxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIxZDhcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJHbGFpdmVcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs1IHRvIGhpdCwgcmVhY2ggMTAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDggKDFkMTAgKyAzKSBzbGFzaGluZyBkYW1hZ2UuIElmIHRoZSB0YXJnZXQgaXMgYSBjcmVhdHVyZSBvdGhlciB0aGFuIGFuIHVuZGVhZCBvciBhIGNvbnN0cnVjdCwgaXQgbXVzdCBzdWNjZWVkIG9uIGEgREMgMTIgQ29uc3RpdHV0aW9uIHNhdmluZyB0aHJvdyBvciBsb3NlIDUgKDFkMTApIGhpdCBwb2ludHMgYXQgdGhlIHN0YXJ0IG9mIGVhY2ggb2YgaXRzIHR1cm5zIGR1ZSB0byBhbiBpbmZlcm5hbCB3b3VuZC4gRWFjaCB0aW1lIHRoZSBkZXZpbCBoaXRzIHRoZSB3b3VuZGVkIHRhcmdldCB3aXRoIHRoaXMgYXR0YWNrLCB0aGUgZGFtYWdlIGRlYWx0IGJ5IHRoZSB3b3VuZCBpbmNyZWFzZXMgYnkgNSAoMWQxMCkuIEFueSBjcmVhdHVyZSBjYW4gdGFrZSBhbiBhY3Rpb24gdG8gc3RhbmNoIHRoZSB3b3VuZCB3aXRoIGEgc3VjY2Vzc2Z1bCBEQyAxMiBXaXNkb20gKE1lZGljaW5lKSBjaGVjay4gVGhlIHdvdW5kIGFsc28gY2xvc2VzIGlmIHRoZSB0YXJnZXQgcmVjZWl2ZXMgbWFnaWNhbCBoZWFsaW5nLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNSxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIxZDEwXCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiAzXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJCZWhpclwiLFxuICAgICAgICBzaXplOiBcIkh1Z2VcIixcbiAgICAgICAgdHlwZTogXCJtb25zdHJvc2l0eVwiLFxuICAgICAgICBzdWJ0eXBlOiBcIlwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwibmV1dHJhbCBldmlsXCIsXG4gICAgICAgIGFjOiAxNyxcbiAgICAgICAgaHA6IDE2OCxcbiAgICAgICAgaGl0X2RpY2U6IFwiMTZkMTIgKyA2NFwiLFxuICAgICAgICBzcGVlZDogXCI1MCBmdC4sIGNsaW1iIDQwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzIzLCAxNiwgMTgsIDcsIDE0LCAxMl0sXG4gICAgICAgIHNraWxsc2F2ZXM6IFt7IHBlcmNlcHRpb246IDYgfSwgeyBzdGVhbHRoOiA3IH1dLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcImxpZ2h0bmluZ1wiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcbiAgICAgICAgc2Vuc2VzOiBcImRhcmt2aXNpb24gOTAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTZcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcIkRyYWNvbmljXCIsXG4gICAgICAgIGNyOiBcIjExXCIsXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgYmVoaXIgbWFrZXMgdHdvIGF0dGFja3M6IG9uZSB3aXRoIGl0cyBiaXRlIGFuZCBvbmUgdG8gY29uc3RyaWN0LlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkJpdGVcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICsxMCB0byBoaXQsIHJlYWNoIDEwIGZ0Liwgb25lIHRhcmdldC4gSGl0OiAyMiAoM2QxMCArIDYpIHBpZXJjaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDEwLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjNkMTBcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDZcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJDb25zdHJpY3RcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICsxMCB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgTGFyZ2Ugb3Igc21hbGxlciBjcmVhdHVyZS4gSGl0OiAxNyAoMmQxMCArIDYpIGJsdWRnZW9uaW5nIGRhbWFnZSBwbHVzIDE3ICgyZDEwICsgNikgc2xhc2hpbmcgZGFtYWdlLiBUaGUgdGFyZ2V0IGlzIGdyYXBwbGVkIChlc2NhcGUgREMgMTYpIGlmIHRoZSBiZWhpciBpc24ndCBhbHJlYWR5IGNvbnN0cmljdGluZyBhIGNyZWF0dXJlLCBhbmQgdGhlIHRhcmdldCBpcyByZXN0cmFpbmVkIHVudGlsIHRoaXMgZ3JhcHBsZSBlbmRzLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMTAsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMmQxMCArIDJkMTBcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDZcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJMaWdodG5pbmcgQnJlYXRoIChSZWNoYXJnZSA1LTYpXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgYmVoaXIgZXhoYWxlcyBhIGxpbmUgb2YgbGlnaHRuaW5nIHRoYXQgaXMgMjAgZnQuIGxvbmcgYW5kIDUgZnQuIHdpZGUuIEVhY2ggY3JlYXR1cmUgaW4gdGhhdCBsaW5lIG11c3QgbWFrZSBhIERDIDE2IERleHRlcml0eSBzYXZpbmcgdGhyb3csIHRha2luZyA2NiAoMTJkMTApIGxpZ2h0bmluZyBkYW1hZ2Ugb24gYSBmYWlsZWQgc2F2ZSwgb3IgaGFsZiBhcyBtdWNoIGRhbWFnZSBvbiBhIHN1Y2Nlc3NmdWwgb25lLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIxMmQxMFwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiU3dhbGxvd1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGJlaGlyIG1ha2VzIG9uZSBiaXRlIGF0dGFjayBhZ2FpbnN0IGEgTWVkaXVtIG9yIHNtYWxsZXIgdGFyZ2V0IGl0IGlzIGdyYXBwbGluZy4gSWYgdGhlIGF0dGFjayBoaXRzLCB0aGUgdGFyZ2V0IGlzIGFsc28gc3dhbGxvd2VkLCBhbmQgdGhlIGdyYXBwbGUgZW5kcy4gV2hpbGUgc3dhbGxvd2VkLCB0aGUgdGFyZ2V0IGlzIGJsaW5kZWQgYW5kIHJlc3RyYWluZWQsIGl0IGhhcyB0b3RhbCBjb3ZlciBhZ2FpbnN0IGF0dGFja3MgYW5kIG90aGVyIGVmZmVjdHMgb3V0c2lkZSB0aGUgYmVoaXIsIGFuZCBpdCB0YWtlcyAyMSAoNmQ2KSBhY2lkIGRhbWFnZSBhdCB0aGUgc3RhcnQgb2YgZWFjaCBvZiB0aGUgYmVoaXIncyB0dXJucy4gQSBiZWhpciBjYW4gaGF2ZSBvbmx5IG9uZSBjcmVhdHVyZSBzd2FsbG93ZWQgYXQgYSB0aW1lLlxcXFxuSWYgdGhlIGJlaGlyIHRha2VzIDMwIGRhbWFnZSBvciBtb3JlIG9uIGEgc2luZ2xlIHR1cm4gZnJvbSB0aGUgc3dhbGxvd2VkIGNyZWF0dXJlLCB0aGUgYmVoaXIgbXVzdCBzdWNjZWVkIG9uIGEgREMgMTQgQ29uc3RpdHV0aW9uIHNhdmluZyB0aHJvdyBhdCB0aGUgZW5kIG9mIHRoYXQgdHVybiBvciByZWd1cmdpdGF0ZSB0aGUgY3JlYXR1cmUsIHdoaWNoIGZhbGxzIHByb25lIGluIGEgc3BhY2Ugd2l0aGluIDEwIGZ0LiBvZiB0aGUgYmVoaXIuIElmIHRoZSBiZWhpciBkaWVzLCBhIHN3YWxsb3dlZCBjcmVhdHVyZSBpcyBubyBsb25nZXIgcmVzdHJhaW5lZCBieSBpdCBhbmQgY2FuIGVzY2FwZSBmcm9tIHRoZSBjb3Jwc2UgYnkgdXNpbmcgMTUgZnQuIG9mIG1vdmVtZW50LCBleGl0aW5nIHByb25lLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCI2ZDZcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiQmVyc2Vya2VyXCIsXG4gICAgICAgIHNpemU6IFwiTWVkaXVtXCIsXG4gICAgICAgIHR5cGU6IFwiaHVtYW5vaWRcIixcbiAgICAgICAgc3VidHlwZTogXCJhbnkgcmFjZVwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwiYW55IGNoYW90aWMgYWxpZ25tZW50XCIsXG4gICAgICAgIGFjOiAxMyxcbiAgICAgICAgaHA6IDY3LFxuICAgICAgICBoaXRfZGljZTogXCI5ZDggKyAyNlwiLFxuICAgICAgICBzcGVlZDogXCIzMCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsxNiwgMTIsIDE3LCA5LCAxMSwgOV0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBzZW5zZXM6IFwicGFzc2l2ZSBQZXJjZXB0aW9uIDEwXCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJhbnkgb25lIGxhbmd1YWdlICh1c3VhbGx5IENvbW1vbilcIixcbiAgICAgICAgY3I6IFwiMlwiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlJlY2tsZXNzXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJBdCB0aGUgc3RhcnQgb2YgaXRzIHR1cm4sIHRoZSBiZXJzZXJrZXIgY2FuIGdhaW4gYWR2YW50YWdlIG9uIGFsbCBtZWxlZSB3ZWFwb24gYXR0YWNrIHJvbGxzIGR1cmluZyB0aGF0IHR1cm4sIGJ1dCBhdHRhY2sgcm9sbHMgYWdhaW5zdCBpdCBoYXZlIGFkdmFudGFnZSB1bnRpbCB0aGUgc3RhcnQgb2YgaXRzIG5leHQgdHVybi5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiR3JlYXRheGVcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs1IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogOSAoMWQxMiArIDMpIHNsYXNoaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDUsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMWQxMlwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogM1xuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiQmxhY2sgQmVhclwiLFxuICAgICAgICBzaXplOiBcIk1lZGl1bVwiLFxuICAgICAgICB0eXBlOiBcImJlYXN0XCIsXG4gICAgICAgIHN1YnR5cGU6IFwiXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcbiAgICAgICAgYWM6IDExLFxuICAgICAgICBocDogMTksXG4gICAgICAgIGhpdF9kaWNlOiBcIjNkOCArIDVcIixcbiAgICAgICAgc3BlZWQ6IFwiNDAgZnQuLCBjbGltYiAzMCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsxNSwgMTAsIDE0LCAyLCAxMiwgN10sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBzZW5zZXM6IFwicGFzc2l2ZSBQZXJjZXB0aW9uIDEzXCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJcIixcbiAgICAgICAgY3I6IFwiMS8yXCIsXG4gICAgICAgIHRyYWl0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiS2VlbiBTbWVsbFwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGJlYXIgaGFzIGFkdmFudGFnZSBvbiBXaXNkb20gKFBlcmNlcHRpb24pIGNoZWNrcyB0aGF0IHJlbHkgb24gc21lbGwuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgYmVhciBtYWtlcyB0d28gYXR0YWNrczogb25lIHdpdGggaXRzIGJpdGUgYW5kIG9uZSB3aXRoIGl0cyBjbGF3cy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJCaXRlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMyB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDUgKDFkNiArIDIpIHBpZXJjaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDMsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMWQ2XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiAyXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQ2xhd3NcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICszIHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogNyAoMmQ0ICsgMikgc2xhc2hpbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMyxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIyZDRcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIkJsYWNrIERyYWdvbiBXeXJtbGluZ1wiLFxuICAgICAgICBzaXplOiBcIk1lZGl1bVwiLFxuICAgICAgICB0eXBlOiBcImRyYWdvblwiLFxuICAgICAgICBzdWJ0eXBlOiBcIlwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwiY2hhb3RpYyBldmlsXCIsXG4gICAgICAgIGFjOiAxNyxcbiAgICAgICAgaHA6IDMzLFxuICAgICAgICBoaXRfZGljZTogXCI2ZDggKyA2XCIsXG4gICAgICAgIHNwZWVkOiBcIjMwIGZ0LiwgZmx5IDYwIGZ0Liwgc3dpbSAzMCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsxNSwgMTQsIDEzLCAxMCwgMTEsIDEzXSxcbiAgICAgICAgc2F2ZXM6IFtcbiAgICAgICAgICAgIHsgZGV4dGVyaXR5OiA0IH0sXG4gICAgICAgICAgICB7IGNvbnN0aXR1dGlvbjogMyB9LFxuICAgICAgICAgICAgeyB3aXNkb206IDIgfSxcbiAgICAgICAgICAgIHsgY2hhcmlzbWE6IDMgfVxuICAgICAgICBdLFxuICAgICAgICBza2lsbHNhdmVzOiBbeyBwZXJjZXB0aW9uOiA0IH0sIHsgc3RlYWx0aDogNCB9XSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczogXCJhY2lkXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBzZW5zZXM6IFwiYmxpbmRzaWdodCAxMCBmdC4sIGRhcmt2aXNpb24gNjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTRcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcIkRyYWNvbmljXCIsXG4gICAgICAgIGNyOiBcIjJcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJBbXBoaWJpb3VzXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZHJhZ29uIGNhbiBicmVhdGhlIGFpciBhbmQgd2F0ZXIuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkJpdGVcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs0IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogNyAoMWQxMCArIDIpIHBpZXJjaW5nIGRhbWFnZSBwbHVzIDIgKDFkNCkgYWNpZCBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA0LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjFkMTBcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJBY2lkIEJyZWF0aCAoUmVjaGFyZ2UgNS02KVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGRyYWdvbiBleGhhbGVzIGFjaWQgaW4gYSAxNS1mb290IGxpbmUgdGhhdCBpcyA1IGZlZXQgd2lkZS4gRWFjaCBjcmVhdHVyZSBpbiB0aGF0IGxpbmUgbXVzdCBtYWtlIGEgREMgMTEgRGV4dGVyaXR5IHNhdmluZyB0aHJvdywgdGFraW5nIDIyIChTZDgpIGFjaWQgZGFtYWdlIG9uIGEgZmFpbGVkIHNhdmUsIG9yIGhhbGYgYXMgbXVjaCBkYW1hZ2Ugb24gYSBzdWNjZXNzZnVsIG9uZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDAsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiNWQ4XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIkJsYWNrIFB1ZGRpbmdcIixcbiAgICAgICAgc2l6ZTogXCJMYXJnZVwiLFxuICAgICAgICB0eXBlOiBcIm9vemVcIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcInVuYWxpZ25lZFwiLFxuICAgICAgICBhYzogNyxcbiAgICAgICAgaHA6IDg1LFxuICAgICAgICBoaXRfZGljZTogXCIxMGQxMCArIDMwXCIsXG4gICAgICAgIHNwZWVkOiBcIjIwIGZ0LiwgY2xpbWIgMjAgZnQuXCIsXG4gICAgICAgIHN0YXRzOiBbMTYsIDUsIDE2LCAxLCA2LCAxXSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczogXCJhY2lkLCBjb2xkLCBsaWdodG5pbmcsIHNsYXNoaW5nXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOlxuICAgICAgICAgICAgXCJibGluZGVkLCBjaGFybWVkLCBkZWFmZW5lZCwgZXhoYXVzdGlvbiwgZnJpZ2h0ZW5lZCwgcHJvbmVcIixcbiAgICAgICAgc2Vuc2VzOiBcImJsaW5kc2lnaHQgNjAgZnQuIChibGluZCBiZXlvbmQgdGhpcyByYWRpdXMpLCBwYXNzaXZlIFBlcmNlcHRpb24gOFwiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiXCIsXG4gICAgICAgIGNyOiBcIjRcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJBbW9ycGhvdXNcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBwdWRkaW5nIGNhbiBtb3ZlIHRocm91Z2ggYSBzcGFjZSBhcyBuYXJyb3cgYXMgMSBpbmNoIHdpZGUgd2l0aG91dCBzcXVlZXppbmcuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQ29ycm9zaXZlIEZvcm1cIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIkEgY3JlYXR1cmUgdGhhdCB0b3VjaGVzIHRoZSBwdWRkaW5nIG9yIGhpdHMgaXQgd2l0aCBhIG1lbGVlIGF0dGFjayB3aGlsZSB3aXRoaW4gNSBmZWV0IG9mIGl0IHRha2VzIDQgKDFkOCkgYWNpZCBkYW1hZ2UuIEFueSBub25tYWdpY2FsIHdlYXBvbiBtYWRlIG9mIG1ldGFsIG9yIHdvb2QgdGhhdCBoaXRzIHRoZSBwdWRkaW5nIGNvcnJvZGVzLiBBZnRlciBkZWFsaW5nIGRhbWFnZSwgdGhlIHdlYXBvbiB0YWtlcyBhIHBlcm1hbmVudCBhbmQgY3VtdWxhdGl2ZSAtMSBwZW5hbHR5IHRvIGRhbWFnZSByb2xscy4gSWYgaXRzIHBlbmFsdHkgZHJvcHMgdG8gLTUsIHRoZSB3ZWFwb24gaXMgZGVzdHJveWVkLiBOb25tYWdpY2FsIGFtbXVuaXRpb24gbWFkZSBvZiBtZXRhbCBvciB3b29kIHRoYXQgaGl0cyB0aGUgcHVkZGluZyBpcyBkZXN0cm95ZWQgYWZ0ZXIgZGVhbGluZyBkYW1hZ2UuIFRoZSBwdWRkaW5nIGNhbiBlYXQgdGhyb3VnaCAyLWluY2gtdGhpY2ssIG5vbm1hZ2ljYWwgd29vZCBvciBtZXRhbCBpbiAxIHJvdW5kLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIxZDhcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlNwaWRlciBDbGltYlwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIHB1ZGRpbmcgY2FuIGNsaW1iIGRpZmZpY3VsdCBzdXJmYWNlcywgaW5jbHVkaW5nIHVwc2lkZSBkb3duIG9uIGNlaWxpbmdzLCB3aXRob3V0IG5lZWRpbmcgdG8gbWFrZSBhbiBhYmlsaXR5IGNoZWNrLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJQc2V1ZG9wb2RcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs1IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogNiAoMWQ2ICsgMykgYmx1ZGdlb25pbmcgZGFtYWdlIHBsdXMgMTggKDRkOCkgYWNpZCBkYW1hZ2UuIEluIGFkZGl0aW9uLCBub25tYWdpY2FsIGFybW9yIHdvcm4gYnkgdGhlIHRhcmdldCBpcyBwYXJ0bHkgZGlzc29sdmVkIGFuZCB0YWtlcyBhIHBlcm1hbmVudCBhbmQgY3VtdWxhdGl2ZSAtMSBwZW5hbHR5IHRvIHRoZSBBQyBpdCBvZmZlcnMuIFRoZSBhcm1vciBpcyBkZXN0cm95ZWQgaWYgdGhlIHBlbmFsdHkgcmVkdWNlcyBpdHMgQUMgdG8gMTAuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA1LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjFkNiArIDRkOFwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogM1xuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICByZWFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlNwbGl0XCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJXaGVuIGEgcHVkZGluZyB0aGF0IGlzIE1lZGl1bSBvciBsYXJnZXIgaXMgc3ViamVjdGVkIHRvIGxpZ2h0bmluZyBvciBzbGFzaGluZyBkYW1hZ2UsIGl0IHNwbGl0cyBpbnRvIHR3byBuZXcgcHVkZGluZ3MgaWYgaXQgaGFzIGF0IGxlYXN0IDEwIGhpdCBwb2ludHMuIEVhY2ggbmV3IHB1ZGRpbmcgaGFzIGhpdCBwb2ludHMgZXF1YWwgdG8gaGFsZiB0aGUgb3JpZ2luYWwgcHVkZGluZydzLCByb3VuZGVkIGRvd24uIE5ldyBwdWRkaW5ncyBhcmUgb25lIHNpemUgc21hbGxlciB0aGFuIHRoZSBvcmlnaW5hbCBwdWRkaW5nLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiQmxpbmsgRG9nXCIsXG4gICAgICAgIHNpemU6IFwiTWVkaXVtXCIsXG4gICAgICAgIHR5cGU6IFwiZmV5XCIsXG4gICAgICAgIHN1YnR5cGU6IFwiXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJsYXdmdWwgZ29vZFwiLFxuICAgICAgICBhYzogMTMsXG4gICAgICAgIGhwOiAyMixcbiAgICAgICAgaGl0X2RpY2U6IFwiNGQ4ICsgNFwiLFxuICAgICAgICBzcGVlZDogXCI0MCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsxMiwgMTcsIDEyLCAxMCwgMTMsIDExXSxcbiAgICAgICAgc2tpbGxzYXZlczogW3sgcGVyY2VwdGlvbjogMyB9LCB7IHN0ZWFsdGg6IDUgfV0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBzZW5zZXM6IFwicGFzc2l2ZSBQZXJjZXB0aW9uIDEwXCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJCbGluayBEb2csIHVuZGVyc3RhbmRzIFN5bHZhbiBidXQgY2FuJ3Qgc3BlYWsgaXRcIixcbiAgICAgICAgY3I6IFwiMS80XCIsXG4gICAgICAgIHRyYWl0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiS2VlbiBIZWFyaW5nIGFuZCBTbWVsbFwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGRvZyBoYXMgYWR2YW50YWdlIG9uIFdpc2RvbSAoUGVyY2VwdGlvbikgY2hlY2tzIHRoYXQgcmVseSBvbiBoZWFyaW5nIG9yIHNtZWxsLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJCaXRlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMyB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDQgKDFkNiArIDEpIHBpZXJjaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDMsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMWQ2XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiAxXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiVGVsZXBvcnQgKFJlY2hhcmdlIDQtNilcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBkb2cgbWFnaWNhbGx5IHRlbGVwb3J0cywgYWxvbmcgd2l0aCBhbnkgZXF1aXBtZW50IGl0IGlzIHdlYXJpbmcgb3IgY2FycnlpbmcsIHVwIHRvIDQwIGZ0LiB0byBhbiB1bm9jY3VwaWVkIHNwYWNlIGl0IGNhbiBzZWUuIEJlZm9yZSBvciBhZnRlciB0ZWxlcG9ydGluZywgdGhlIGRvZyBjYW4gbWFrZSBvbmUgYml0ZSBhdHRhY2suXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJCbG9vZCBIYXdrXCIsXG4gICAgICAgIHNpemU6IFwiU21hbGxcIixcbiAgICAgICAgdHlwZTogXCJiZWFzdFwiLFxuICAgICAgICBzdWJ0eXBlOiBcIlwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwidW5hbGlnbmVkXCIsXG4gICAgICAgIGFjOiAxMixcbiAgICAgICAgaHA6IDcsXG4gICAgICAgIGhpdF9kaWNlOiBcIjJkNlwiLFxuICAgICAgICBzcGVlZDogXCIxMCBmdC4sIGZseSA2MCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFs2LCAxNCwgMTAsIDMsIDE0LCA1XSxcbiAgICAgICAgc2tpbGxzYXZlczogW3sgcGVyY2VwdGlvbjogNCB9XSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIHNlbnNlczogXCJwYXNzaXZlIFBlcmNlcHRpb24gMTRcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcIlwiLFxuICAgICAgICBjcjogXCIxLzhcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJLZWVuIFNpZ2h0XCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgaGF3ayBoYXMgYWR2YW50YWdlIG9uIFdpc2RvbSAoUGVyY2VwdGlvbikgY2hlY2tzIHRoYXQgcmVseSBvbiBzaWdodC5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJQYWNrIFRhY3RpY3NcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBoYXdrIGhhcyBhZHZhbnRhZ2Ugb24gYW4gYXR0YWNrIHJvbGwgYWdhaW5zdCBhIGNyZWF0dXJlIGlmIGF0IGxlYXN0IG9uZSBvZiB0aGUgaGF3aydzIGFsbGllcyBpcyB3aXRoaW4gNSBmdC4gb2YgdGhlIGNyZWF0dXJlIGFuZCB0aGUgYWxseSBpc24ndCBpbmNhcGFjaXRhdGVkLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJCZWFrXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNCB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDQgKDFkNCArIDIpIHBpZXJjaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDQsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMWQ0XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiAyXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJCbHVlIERyYWdvbiBXeXJtbGluZ1wiLFxuICAgICAgICBzaXplOiBcIk1lZGl1bVwiLFxuICAgICAgICB0eXBlOiBcImRyYWdvblwiLFxuICAgICAgICBzdWJ0eXBlOiBcIlwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwibGF3ZnVsIGV2aWxcIixcbiAgICAgICAgYWM6IDE3LFxuICAgICAgICBocDogNTIsXG4gICAgICAgIGhpdF9kaWNlOiBcIjhkOCArIDE2XCIsXG4gICAgICAgIHNwZWVkOiBcIjMwIGZ0LiwgYnVycm93IDE1IGZ0LiwgZmx5IDYwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzE3LCAxMCwgMTUsIDEyLCAxMSwgMTVdLFxuICAgICAgICBzYXZlczogW1xuICAgICAgICAgICAgeyBkZXh0ZXJpdHk6IDIgfSxcbiAgICAgICAgICAgIHsgY29uc3RpdHV0aW9uOiA0IH0sXG4gICAgICAgICAgICB7IHdpc2RvbTogMiB9LFxuICAgICAgICAgICAgeyBjaGFyaXNtYTogNCB9XG4gICAgICAgIF0sXG4gICAgICAgIHNraWxsc2F2ZXM6IFt7IHBlcmNlcHRpb246IDQgfSwgeyBzdGVhbHRoOiAyIH1dLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcImxpZ2h0bmluZ1wiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcbiAgICAgICAgc2Vuc2VzOiBcImJsaW5kc2lnaHQgMTAgZnQuLCBkYXJrdmlzaW9uIDYwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDE0XCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJEcmFjb25pY1wiLFxuICAgICAgICBjcjogXCIzXCIsXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkJpdGVcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs1IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogOCAoMWQxMCArIDMpIHBpZXJjaW5nIGRhbWFnZSBwbHVzIDMgKDFkNikgbGlnaHRuaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDUsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMWQxMCArIDFkNlwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogM1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkxpZ2h0bmluZyBCcmVhdGggKFJlY2hhcmdlIDUtNilcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBkcmFnb24gZXhoYWxlcyBsaWdodG5pbmcgaW4gYSAzMC1mb290IGxpbmUgdGhhdCBpcyA1IGZlZXQgd2lkZS4gRWFjaCBjcmVhdHVyZSBpbiB0aGF0IGxpbmUgbXVzdCBtYWtlIGEgREMgMTIgRGV4dGVyaXR5IHNhdmluZyB0aHJvdywgdGFraW5nIDIyICg0ZDEwKSBsaWdodG5pbmcgZGFtYWdlIG9uIGEgZmFpbGVkIHNhdmUsIG9yIGhhbGYgYXMgbXVjaCBkYW1hZ2Ugb24gYSBzdWNjZXNzZnVsIG9uZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDAsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiNGQxMFwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJCb2FyXCIsXG4gICAgICAgIHNpemU6IFwiTWVkaXVtXCIsXG4gICAgICAgIHR5cGU6IFwiYmVhc3RcIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcInVuYWxpZ25lZFwiLFxuICAgICAgICBhYzogMTEsXG4gICAgICAgIGhwOiAxMSxcbiAgICAgICAgaGl0X2RpY2U6IFwiMmQ4ICsgMlwiLFxuICAgICAgICBzcGVlZDogXCI0MCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsxMywgMTEsIDEyLCAyLCA5LCA1XSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIHNlbnNlczogXCJwYXNzaXZlIFBlcmNlcHRpb24gOVwiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiXCIsXG4gICAgICAgIGNyOiBcIjEvNFwiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkNoYXJnZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiSWYgdGhlIGJvYXIgbW92ZXMgYXQgbGVhc3QgMjAgZnQuIHN0cmFpZ2h0IHRvd2FyZCBhIHRhcmdldCBhbmQgdGhlbiBoaXRzIGl0IHdpdGggYSB0dXNrIGF0dGFjayBvbiB0aGUgc2FtZSB0dXJuLCB0aGUgdGFyZ2V0IHRha2VzIGFuIGV4dHJhIDMgKDFkNikgc2xhc2hpbmcgZGFtYWdlLiBJZiB0aGUgdGFyZ2V0IGlzIGEgY3JlYXR1cmUsIGl0IG11c3Qgc3VjY2VlZCBvbiBhIERDIDExIFN0cmVuZ3RoIHNhdmluZyB0aHJvdyBvciBiZSBrbm9ja2VkIHByb25lLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIxZDZcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlJlbGVudGxlc3MgKFJlY2hhcmdlcyBhZnRlciBhIFNob3J0IG9yIExvbmcgUmVzdClcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIklmIHRoZSBib2FyIHRha2VzIDcgZGFtYWdlIG9yIGxlc3MgdGhhdCB3b3VsZCByZWR1Y2UgaXQgdG8gMCBoaXQgcG9pbnRzLCBpdCBpcyByZWR1Y2VkIHRvIDEgaGl0IHBvaW50IGluc3RlYWQuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlR1c2tcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIldlYXBvbiBBdHRhY2s6ICszIHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogNCAoMWQ2ICsgMSkgc2xhc2hpbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMyxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIxZDZcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDFcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIkJvbmUgRGV2aWxcIixcbiAgICAgICAgc2l6ZTogXCJMYXJnZVwiLFxuICAgICAgICB0eXBlOiBcImZpZW5kXCIsXG4gICAgICAgIHN1YnR5cGU6IFwiZGV2aWxcIixcbiAgICAgICAgYWxpZ25tZW50OiBcImxhd2Z1bCBldmlsXCIsXG4gICAgICAgIGFjOiAxOSxcbiAgICAgICAgaHA6IDE0MixcbiAgICAgICAgaGl0X2RpY2U6IFwiMTVkMTAgKyA1OVwiLFxuICAgICAgICBzcGVlZDogXCI0MCBmdC4sIGZseSA0MCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsxOCwgMTYsIDE4LCAxMywgMTQsIDE2XSxcbiAgICAgICAgc2F2ZXM6IFt7IGludGVsbGlnZW5jZTogNSB9LCB7IHdpc2RvbTogNiB9LCB7IGNoYXJpc21hOiA3IH1dLFxuICAgICAgICBza2lsbHNhdmVzOiBbeyBkZWNlcHRpb246IDcgfSwgeyBpbnNpZ2h0OiA2IH1dLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6XG4gICAgICAgICAgICBcImNvbGQ7IGJsdWRnZW9uaW5nLCBwaWVyY2luZywgYW5kIHNsYXNoaW5nIGZyb20gbm9ubWFnaWNhbCB3ZWFwb25zIHRoYXQgYXJlbid0IHNpbHZlcmVkXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcImZpcmUsIHBvaXNvblwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJwb2lzb25lZFwiLFxuICAgICAgICBzZW5zZXM6IFwiZGFya3Zpc2lvbiAxMjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gOVwiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiSW5mZXJuYWwsIHRlbGVwYXRoeSAxMjAgZnQuXCIsXG4gICAgICAgIGNyOiBcIjEyXCIsXG4gICAgICAgIHRyYWl0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiRGV2aWwncyBTaWdodFwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWFnaWNhbCBkYXJrbmVzcyBkb2Vzbid0IGltcGVkZSB0aGUgZGV2aWwncyBkYXJrdmlzaW9uLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk1hZ2ljIFJlc2lzdGFuY2VcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBkZXZpbCBoYXMgYWR2YW50YWdlIG9uIHNhdmluZyB0aHJvd3MgYWdhaW5zdCBzcGVsbHMgYW5kIG90aGVyIG1hZ2ljYWwgZWZmZWN0cy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBkZXZpbCBtYWtlcyB0aHJlZSBhdHRhY2tzOiB0d28gd2l0aCBpdHMgY2xhd3MgYW5kIG9uZSB3aXRoIGl0cyBzdGluZy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJNdWx0aWF0dGFja1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGRldmlsIG1ha2VzIHRocmVlIGF0dGFja3M6IHR3byB3aXRoIGl0cyBjbGF3cyBhbmQgb25lIHdpdGggaXRzIHN0aW5nLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkNsYXdcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs4IHRvIGhpdCwgcmVhY2ggMTAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDggKDFkOCArIDQpIHNsYXNoaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDgsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMWQ4XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiA0XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQ2xhd1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzggdG8gaGl0LCByZWFjaCAxMCBmdC4sIG9uZSB0YXJnZXQuIEhpdDogOCAoMWQ4ICsgNCkgc2xhc2hpbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogOCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIxZDhcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDRcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJTdGluZ1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzggdG8gaGl0LCByZWFjaCAxMCBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTMgKDJkOCArIDQpIHBpZXJjaW5nIGRhbWFnZSBwbHVzIDE3ICg1ZDYpIHBvaXNvbiBkYW1hZ2UsIGFuZCB0aGUgdGFyZ2V0IG11c3Qgc3VjY2VlZCBvbiBhIERDIDE0IENvbnN0aXR1dGlvbiBzYXZpbmcgdGhyb3cgb3IgYmVjb21lIHBvaXNvbmVkIGZvciAxIG1pbnV0ZS4gVGhlIHRhcmdldCBjYW4gcmVwZWF0IHRoZSBzYXZpbmcgdGhyb3cgYXQgdGhlIGVuZCBvZiBlYWNoIG9mIGl0cyB0dXJucywgZW5kaW5nIHRoZSBlZmZlY3Qgb24gaXRzZWxmIG9uIGEgc3VjY2VzcyAuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA4LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjJkOFwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogNFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlN0aW5nXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArOCB0byBoaXQsIHJlYWNoIDEwIGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxMyAoMmQ4ICsgNCkgcGllcmNpbmcgZGFtYWdlIHBsdXMgMTcgKDVkNikgcG9pc29uIGRhbWFnZSwgYW5kIHRoZSB0YXJnZXQgbXVzdCBzdWNjZWVkIG9uIGEgREMgMTQgQ29uc3RpdHV0aW9uIHNhdmluZyB0aHJvdyBvciBiZWNvbWUgcG9pc29uZWQgZm9yIDEgbWludXRlLiBUaGUgdGFyZ2V0IGNhbiByZXBlYXQgdGhlIHNhdmluZyB0aHJvdyBhdCB0aGUgZW5kIG9mIGVhY2ggb2YgaXRzIHR1cm5zLCBlbmRpbmcgdGhlIGVmZmVjdCBvbiBpdHNlbGYgb24gYSBzdWNjZXNzIC5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDgsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMmQ4XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiA0XG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJCcmFzcyBEcmFnb24gV3lybWxpbmdcIixcbiAgICAgICAgc2l6ZTogXCJNZWRpdW1cIixcbiAgICAgICAgdHlwZTogXCJkcmFnb25cIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcImNoYW90aWMgZ29vZFwiLFxuICAgICAgICBhYzogMTYsXG4gICAgICAgIGhwOiAxNixcbiAgICAgICAgaGl0X2RpY2U6IFwiM2Q4ICsgMlwiLFxuICAgICAgICBzcGVlZDogXCIzMCBmdC4sIGJ1cnJvdyAxNSBmdC4sIGZseSA2MCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsxNSwgMTAsIDEzLCAxMCwgMTEsIDEzXSxcbiAgICAgICAgc2F2ZXM6IFtcbiAgICAgICAgICAgIHsgZGV4dGVyaXR5OiAyIH0sXG4gICAgICAgICAgICB7IGNvbnN0aXR1dGlvbjogMyB9LFxuICAgICAgICAgICAgeyB3aXNkb206IDIgfSxcbiAgICAgICAgICAgIHsgY2hhcmlzbWE6IDMgfVxuICAgICAgICBdLFxuICAgICAgICBza2lsbHNhdmVzOiBbeyBwZXJjZXB0aW9uOiA0IH0sIHsgc3RlYWx0aDogMiB9XSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczogXCJmaXJlXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBzZW5zZXM6IFwiYmxpbmRzaWdodCAxMCBmdC4sIGRhcmt2aXNpb24gNjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTRcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcIkRyYWNvbmljXCIsXG4gICAgICAgIGNyOiBcIjFcIixcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQml0ZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzQgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiA3ICgxZDEwICsgMikgcGllcmNpbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIxZDEwXCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiAyXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQnJlYXRoIFdlYXBvbnMgKFJlY2hhcmdlIDUtNilcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBkcmFnb24gdXNlcyBvbmUgb2YgdGhlIGZvbGxvd2luZyBicmVhdGggd2VhcG9ucy5cXFxcbkZpcmUgQnJlYXRoLiBUaGUgZHJhZ29uIGV4aGFsZXMgZmlyZSBpbiBhbiAyMC1mb290IGxpbmUgdGhhdCBpcyA1IGZlZXQgd2lkZS4gRWFjaCBjcmVhdHVyZSBpbiB0aGF0IGxpbmUgbXVzdCBtYWtlIGEgREMgMTEgRGV4dGVyaXR5IHNhdmluZyB0aHJvdywgdGFraW5nIDE0ICg0ZDYpIGZpcmUgZGFtYWdlIG9uIGEgZmFpbGVkIHNhdmUsIG9yIGhhbGYgYXMgbXVjaCBkYW1hZ2Ugb24gYSBzdWNjZXNzZnVsIG9uZS5cXFxcblNsZWVwIEJyZWF0aC4gVGhlIGRyYWdvbiBleGhhbGVzIHNsZWVwIGdhcyBpbiBhIDE1LWZvb3QgY29uZS4gRWFjaCBjcmVhdHVyZSBpbiB0aGF0IGFyZWEgbXVzdCBzdWNjZWVkIG9uIGEgREMgMTEgQ29uc3RpdHV0aW9uIHNhdmluZyB0aHJvdyBvciBmYWxsIHVuY29uc2Npb3VzIGZvciAxIG1pbnV0ZS4gVGhpcyBlZmZlY3QgZW5kcyBmb3IgYSBjcmVhdHVyZSBpZiB0aGUgY3JlYXR1cmUgdGFrZXMgZGFtYWdlIG9yIHNvbWVvbmUgdXNlcyBhbiBhY3Rpb24gdG8gd2FrZSBpdC5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDAsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiNGQ2XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIkJyb256ZSBEcmFnb24gV3lybWxpbmdcIixcbiAgICAgICAgc2l6ZTogXCJNZWRpdW1cIixcbiAgICAgICAgdHlwZTogXCJkcmFnb25cIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcImxhd2Z1bCBnb29kXCIsXG4gICAgICAgIGFjOiAxNyxcbiAgICAgICAgaHA6IDMyLFxuICAgICAgICBoaXRfZGljZTogXCI1ZDggKyA5XCIsXG4gICAgICAgIHNwZWVkOiBcIjMwIGZ0LiwgZmx5IDYwIGZ0Liwgc3dpbSAzMCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsxNywgMTAsIDE1LCAxMiwgMTEsIDE1XSxcbiAgICAgICAgc2F2ZXM6IFtcbiAgICAgICAgICAgIHsgZGV4dGVyaXR5OiAyIH0sXG4gICAgICAgICAgICB7IGNvbnN0aXR1dGlvbjogNCB9LFxuICAgICAgICAgICAgeyB3aXNkb206IDIgfSxcbiAgICAgICAgICAgIHsgY2hhcmlzbWE6IDQgfVxuICAgICAgICBdLFxuICAgICAgICBza2lsbHNhdmVzOiBbeyBwZXJjZXB0aW9uOiA0IH0sIHsgc3RlYWx0aDogMiB9XSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczogXCJsaWdodG5pbmdcIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIHNlbnNlczogXCJibGluZHNpZ2h0IDEwIGZ0LiwgZGFya3Zpc2lvbiA2MCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxNFwiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiRHJhY29uaWNcIixcbiAgICAgICAgY3I6IFwiMlwiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkFtcGhpYmlvdXNcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBkcmFnb24gY2FuIGJyZWF0aGUgYWlyIGFuZCB3YXRlci5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQml0ZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzUgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiA4ICgxZDEwICsgMykgcGllcmNpbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNSxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIxZDEwXCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiAzXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQnJlYXRoIFdlYXBvbnMgKFJlY2hhcmdlIDUtNilcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBkcmFnb24gdXNlcyBvbmUgb2YgdGhlIGZvbGxvd2luZyBicmVhdGggd2VhcG9ucy5cXFxcbkxpZ2h0bmluZyBCcmVhdGguIFRoZSBkcmFnb24gZXhoYWxlcyBsaWdodG5pbmcgaW4gYSA0MC1mb290IGxpbmUgdGhhdCBpcyA1IGZlZXQgd2lkZS4gRWFjaCBjcmVhdHVyZSBpbiB0aGF0IGxpbmUgbXVzdCBtYWtlIGEgREMgMTIgRGV4dGVyaXR5IHNhdmluZyB0aHJvdywgdGFraW5nIDE2ICgzZDEwKSBsaWdodG5pbmcgZGFtYWdlIG9uIGEgZmFpbGVkIHNhdmUsIG9yIGhhbGYgYXMgbXVjaCBkYW1hZ2Ugb24gYSBzdWNjZXNzZnVsIG9uZS5cXFxcblJlcHVsc2lvbiBCcmVhdGguIFRoZSBkcmFnb24gZXhoYWxlcyByZXB1bHNpb24gZW5lcmd5IGluIGEgMzAtZm9vdCBjb25lLiBFYWNoIGNyZWF0dXJlIGluIHRoYXQgYXJlYSBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxMiBTdHJlbmd0aCBzYXZpbmcgdGhyb3cuIE9uIGEgZmFpbGVkIHNhdmUsIHRoZSBjcmVhdHVyZSBpcyBwdXNoZWQgMzAgZmVldCBhd2F5IGZyb20gdGhlIGRyYWdvbi5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDAsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiM2QxMFwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJCcm93biBCZWFyXCIsXG4gICAgICAgIHNpemU6IFwiTGFyZ2VcIixcbiAgICAgICAgdHlwZTogXCJiZWFzdFwiLFxuICAgICAgICBzdWJ0eXBlOiBcIlwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwidW5hbGlnbmVkXCIsXG4gICAgICAgIGFjOiAxMSxcbiAgICAgICAgaHA6IDM0LFxuICAgICAgICBoaXRfZGljZTogXCI0ZDEwICsgMTJcIixcbiAgICAgICAgc3BlZWQ6IFwiNDAgZnQuLCBjbGltYiAzMCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsxOSwgMTAsIDE2LCAyLCAxMywgN10sXG4gICAgICAgIHNraWxsc2F2ZXM6IFt7IHBlcmNlcHRpb246IDMgfV0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBzZW5zZXM6IFwicGFzc2l2ZSBQZXJjZXB0aW9uIDEzXCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJcIixcbiAgICAgICAgY3I6IFwiMVwiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIktlZW4gU21lbGxcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBiZWFyIGhhcyBhZHZhbnRhZ2Ugb24gV2lzZG9tIChQZXJjZXB0aW9uKSBjaGVja3MgdGhhdCByZWx5IG9uIHNtZWxsLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJNdWx0aWF0dGFja1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGJlYXIgbWFrZXMgdHdvIGF0dGFja3M6IG9uZSB3aXRoIGl0cyBiaXRlIGFuZCBvbmUgd2l0aCBpdHMgY2xhd3MuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQml0ZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiV2VhcG9uIEF0dGFjazogKzUgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiA4ICgxZDggKyA0KSBwaWVyY2luZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA1LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjFkOFwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogNFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkNsYXdzXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNSB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDExICgyZDYgKyA0KSBzbGFzaGluZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA1LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjJkNlwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogNFxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiQnVnYmVhclwiLFxuICAgICAgICBzaXplOiBcIk1lZGl1bVwiLFxuICAgICAgICB0eXBlOiBcImh1bWFub2lkXCIsXG4gICAgICAgIHN1YnR5cGU6IFwiZ29ibGlub2lkXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJjaGFvdGljIGV2aWxcIixcbiAgICAgICAgYWM6IDE2LFxuICAgICAgICBocDogMjcsXG4gICAgICAgIGhpdF9kaWNlOiBcIjVkOCArIDRcIixcbiAgICAgICAgc3BlZWQ6IFwiMzAgZnQuXCIsXG4gICAgICAgIHN0YXRzOiBbMTUsIDE0LCAxMywgOCwgMTEsIDldLFxuICAgICAgICBza2lsbHNhdmVzOiBbeyBzdGVhbHRoOiA2IH0sIHsgc3Vydml2YWw6IDIgfV0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBzZW5zZXM6IFwiZGFya3Zpc2lvbiA2MCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxMFwiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiQ29tbW9uLCBHb2JsaW5cIixcbiAgICAgICAgY3I6IFwiMVwiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkJydXRlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJBIG1lbGVlIHdlYXBvbiBkZWFscyBvbmUgZXh0cmEgZGllIG9mIGl0cyBkYW1hZ2Ugd2hlbiB0aGUgYnVnYmVhciBoaXRzIHdpdGggaXQgKGluY2x1ZGVkIGluIHRoZSBhdHRhY2spLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlN1cnByaXNlIEF0dGFja1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiSWYgdGhlIGJ1Z2JlYXIgc3VycHJpc2VzIGEgY3JlYXR1cmUgYW5kIGhpdHMgaXQgd2l0aCBhbiBhdHRhY2sgZHVyaW5nIHRoZSBmaXJzdCByb3VuZCBvZiBjb21iYXQsIHRoZSB0YXJnZXQgdGFrZXMgYW4gZXh0cmEgNyAoMmQ2KSBkYW1hZ2UgZnJvbSB0aGUgYXR0YWNrLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIyZDZcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJNb3JuaW5nc3RhclwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzQgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxMSAoMmQ4ICsgMikgcGllcmNpbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIyZDhcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJKYXZlbGluXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBvciBSYW5nZWQgV2VhcG9uIEF0dGFjazogKzQgdG8gaGl0LCByZWFjaCA1IGZ0LiBvciByYW5nZSAzMC8xMjAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDkgKDJkNiArIDIpIHBpZXJjaW5nIGRhbWFnZSBpbiBtZWxlZSBvciA1ICgxZDYgKyAyKSBwaWVyY2luZyBkYW1hZ2UgYXQgcmFuZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA0LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjJkNlwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogMlxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiQnVsZXR0ZVwiLFxuICAgICAgICBzaXplOiBcIkxhcmdlXCIsXG4gICAgICAgIHR5cGU6IFwibW9uc3Ryb3NpdHlcIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcInVuYWxpZ25lZFwiLFxuICAgICAgICBhYzogMTcsXG4gICAgICAgIGhwOiA5NCxcbiAgICAgICAgaGl0X2RpY2U6IFwiOWQxMCArIDQ0XCIsXG4gICAgICAgIHNwZWVkOiBcIjQwIGZ0LiwgYnVycm93IDQwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzE5LCAxMSwgMjEsIDIsIDEwLCA1XSxcbiAgICAgICAgc2tpbGxzYXZlczogW3sgcGVyY2VwdGlvbjogNiB9XSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIHNlbnNlczogXCJkYXJrdmlzaW9uIDYwIGZ0LiwgdHJlbW9yc2Vuc2UgNjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTZcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcIlwiLFxuICAgICAgICBjcjogXCI1XCIsXG4gICAgICAgIHRyYWl0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RhbmRpbmcgTGVhcFwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGJ1bGV0dGUncyBsb25nIGp1bXAgaXMgdXAgdG8gMzAgZnQuIGFuZCBpdHMgaGlnaCBqdW1wIGlzIHVwIHRvIDE1IGZ0Liwgd2l0aCBvciB3aXRob3V0IGEgcnVubmluZyBzdGFydC5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQml0ZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzcgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAzMCAoNGQxMiArIDQpIHBpZXJjaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDcsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiNGQxMlwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogNFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkRlYWRseSBMZWFwXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJJZiB0aGUgYnVsZXR0ZSBqdW1wcyBhdCBsZWFzdCAxNSBmdC4gYXMgcGFydCBvZiBpdHMgbW92ZW1lbnQsIGl0IGNhbiB0aGVuIHVzZSB0aGlzIGFjdGlvbiB0byBsYW5kIG9uIGl0cyBmdC4gaW4gYSBzcGFjZSB0aGF0IGNvbnRhaW5zIG9uZSBvciBtb3JlIG90aGVyIGNyZWF0dXJlcy4gRWFjaCBvZiB0aG9zZSBjcmVhdHVyZXMgbXVzdCBzdWNjZWVkIG9uIGEgREMgMTYgU3RyZW5ndGggb3IgRGV4dGVyaXR5IHNhdmluZyB0aHJvdyAodGFyZ2V0J3MgY2hvaWNlKSBvciBiZSBrbm9ja2VkIHByb25lIGFuZCB0YWtlIDE0ICgzZDYgKyA0KSBibHVkZ2VvbmluZyBkYW1hZ2UgcGx1cyAxNCAoM2Q2ICsgNCkgc2xhc2hpbmcgZGFtYWdlLiBPbiBhIHN1Y2Nlc3NmdWwgc2F2ZSwgdGhlIGNyZWF0dXJlIHRha2VzIG9ubHkgaGFsZiB0aGUgZGFtYWdlLCBpc24ndCBrbm9ja2VkIHByb25lLCBhbmQgaXMgcHVzaGVkIDUgZnQuIG91dCBvZiB0aGUgYnVsZXR0ZSdzIHNwYWNlIGludG8gYW4gdW5vY2N1cGllZCBzcGFjZSBvZiB0aGUgY3JlYXR1cmUncyBjaG9pY2UuIElmIG5vIHVub2NjdXBpZWQgc3BhY2UgaXMgd2l0aGluIHJhbmdlLCB0aGUgY3JlYXR1cmUgaW5zdGVhZCBmYWxscyBwcm9uZSBpbiB0aGUgYnVsZXR0ZSdzIHNwYWNlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiQ2FtZWxcIixcbiAgICAgICAgc2l6ZTogXCJMYXJnZVwiLFxuICAgICAgICB0eXBlOiBcImJlYXN0XCIsXG4gICAgICAgIHN1YnR5cGU6IFwiXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcbiAgICAgICAgYWM6IDksXG4gICAgICAgIGhwOiAxNSxcbiAgICAgICAgaGl0X2RpY2U6IFwiMmQxMCArIDRcIixcbiAgICAgICAgc3BlZWQ6IFwiNTAgZnQuXCIsXG4gICAgICAgIHN0YXRzOiBbMTYsIDgsIDE0LCAyLCA4LCA1XSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIHNlbnNlczogXCJwYXNzaXZlIFBlcmNlcHRpb24gOVwiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiXCIsXG4gICAgICAgIGNyOiBcIjEvOFwiLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJCaXRlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNSB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDIgKDFkNCkgYmx1ZGdlb25pbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNSxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIxZDRcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiQ2FycmlvbiBDcmF3bGVyXCIsXG4gICAgICAgIHNpemU6IFwiTGFyZ2VcIixcbiAgICAgICAgdHlwZTogXCJtb25zdHJvc2l0eVwiLFxuICAgICAgICBzdWJ0eXBlOiBcIlwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwidW5hbGlnbmVkXCIsXG4gICAgICAgIGFjOiAxMyxcbiAgICAgICAgaHA6IDUxLFxuICAgICAgICBoaXRfZGljZTogXCI2ZDEwICsgMThcIixcbiAgICAgICAgc3BlZWQ6IFwiMzAgZnQuLCBjbGltYiAzMCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsxNCwgMTMsIDE2LCAxLCAxMiwgNV0sXG4gICAgICAgIHNraWxsc2F2ZXM6IFt7IHBlcmNlcHRpb246IDMgfV0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBzZW5zZXM6IFwiZGFya3Zpc2lvbiA2MCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxM1wiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiXCIsXG4gICAgICAgIGNyOiBcIjJcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJLZWVuIFNtZWxsXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgY2FycmlvbiBjcmF3bGVyIGhhcyBhZHZhbnRhZ2Ugb24gV2lzZG9tIChQZXJjZXB0aW9uKSBjaGVja3MgdGhhdCByZWx5IG9uIHNtZWxsLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlNwaWRlciBDbGltYlwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGNhcnJpb24gY3Jhd2xlciBjYW4gY2xpbWIgZGlmZmljdWx0IHN1cmZhY2VzLCBpbmNsdWRpbmcgdXBzaWRlIGRvd24gb24gY2VpbGluZ3MsIHdpdGhvdXQgbmVlZGluZyB0byBtYWtlIGFuIGFiaWxpdHkgY2hlY2suXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgY2FycmlvbiBjcmF3bGVyIG1ha2VzIHR3byBhdHRhY2tzOiBvbmUgd2l0aCBpdHMgdGVudGFjbGVzIGFuZCBvbmUgd2l0aCBpdHMgYml0ZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJUZW50YWNsZXNcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs4IHRvIGhpdCwgcmVhY2ggMTAgZnQuLCBvbmUgY3JlYXR1cmUuIEhpdDogNCAoMWQ0ICsgMikgcG9pc29uIGRhbWFnZSwgYW5kIHRoZSB0YXJnZXQgbXVzdCBzdWNjZWVkIG9uIGEgREMgMTMgQ29uc3RpdHV0aW9uIHNhdmluZyB0aHJvdyBvciBiZSBwb2lzb25lZCBmb3IgMSBtaW51dGUuIFVudGlsIHRoaXMgcG9pc29uIGVuZHMsIHRoZSB0YXJnZXQgaXMgcGFyYWx5emVkLiBUaGUgdGFyZ2V0IGNhbiByZXBlYXQgdGhlIHNhdmluZyB0aHJvdyBhdCB0aGUgZW5kIG9mIGVhY2ggb2YgaXRzIHR1cm5zLCBlbmRpbmcgdGhlIHBvaXNvbiBvbiBpdHNlbGYgb24gYSBzdWNjZXNzLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogOCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIxZDRcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJCaXRlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNCB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDcgKDJkNCArIDIpIHBpZXJjaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDQsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMmQ0XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiAyXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJDYXRcIixcbiAgICAgICAgc2l6ZTogXCJUaW55XCIsXG4gICAgICAgIHR5cGU6IFwiYmVhc3RcIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcInVuYWxpZ25lZFwiLFxuICAgICAgICBhYzogMTIsXG4gICAgICAgIGhwOiAyLFxuICAgICAgICBoaXRfZGljZTogXCIxZDQgKyAtMVwiLFxuICAgICAgICBzcGVlZDogXCI0MCBmdC4sIGNsaW1iIDMwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzMsIDE1LCAxMCwgMywgMTIsIDddLFxuICAgICAgICBza2lsbHNhdmVzOiBbeyBwZXJjZXB0aW9uOiAzIH0sIHsgc3RlYWx0aDogNCB9XSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIHNlbnNlczogXCJwYXNzaXZlIFBlcmNlcHRpb24gMTNcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcIlwiLFxuICAgICAgICBjcjogXCIwXCIsXG4gICAgICAgIHRyYWl0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiS2VlbiBTbWVsbFwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGNhdCBoYXMgYWR2YW50YWdlIG9uIFdpc2RvbSAoUGVyY2VwdGlvbikgY2hlY2tzIHRoYXQgcmVseSBvbiBzbWVsbC5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQ2xhd3NcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICswIHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMSBzbGFzaGluZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogMVxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiQ2F2ZSBCZWFyXCIsXG4gICAgICAgIHNpemU6IFwiTGFyZ2VcIixcbiAgICAgICAgdHlwZTogXCJiZWFzdFwiLFxuICAgICAgICBzdWJ0eXBlOiBcIlwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwidW5hbGlnbmVkXCIsXG4gICAgICAgIGFjOiAxMixcbiAgICAgICAgaHA6IDQyLFxuICAgICAgICBoaXRfZGljZTogXCI1ZDEwICsgMTRcIixcbiAgICAgICAgc3BlZWQ6IFwiNDAgZnQuLCBzd2ltIDMwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzIwLCAxMCwgMTYsIDIsIDEzLCA3XSxcbiAgICAgICAgc2tpbGxzYXZlczogW3sgcGVyY2VwdGlvbjogMyB9XSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIHNlbnNlczogXCJkYXJrdmlzaW9uIDYwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDEzXCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJcIixcbiAgICAgICAgY3I6IFwiMlwiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIktlZW4gU21lbGxcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBiZWFyIGhhcyBhZHZhbnRhZ2Ugb24gV2lzZG9tIChQZXJjZXB0aW9uKSBjaGVja3MgdGhhdCByZWx5IG9uIHNtZWxsLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJNdWx0aWF0dGFja1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGJlYXIgbWFrZXMgdHdvIGF0dGFja3M6IG9uZSB3aXRoIGl0cyBiaXRlIGFuZCBvbmUgd2l0aCBpdHMgY2xhd3MuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQml0ZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzcgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiA5ICgxZDggKyA1KSBwaWVyY2luZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA3LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjFkOFwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogNVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkNsYXdzXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNyB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDEyICgyZDYgKyA1KSBzbGFzaGluZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA3LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjJkNlwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogNVxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiQ2VudGF1clwiLFxuICAgICAgICBzaXplOiBcIkxhcmdlXCIsXG4gICAgICAgIHR5cGU6IFwibW9uc3Ryb3NpdHlcIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcIm5ldXRyYWwgZ29vZFwiLFxuICAgICAgICBhYzogMTIsXG4gICAgICAgIGhwOiA0NSxcbiAgICAgICAgaGl0X2RpY2U6IFwiNmQxMCArIDEyXCIsXG4gICAgICAgIHNwZWVkOiBcIjUwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzE4LCAxNCwgMTQsIDksIDEzLCAxMV0sXG4gICAgICAgIHNraWxsc2F2ZXM6IFt7IGF0aGxldGljczogNiB9LCB7IHBlcmNlcHRpb246IDMgfSwgeyBzdXJ2aXZhbDogMyB9XSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIHNlbnNlczogXCJwYXNzaXZlIFBlcmNlcHRpb24gMTNcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcIkVsdmlzaCwgU3lsdmFuXCIsXG4gICAgICAgIGNyOiBcIjJcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJDaGFyZ2VcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIklmIHRoZSBjZW50YXVyIG1vdmVzIGF0IGxlYXN0IDMwIGZ0LiBzdHJhaWdodCB0b3dhcmQgYSB0YXJnZXQgYW5kIHRoZW4gaGl0cyBpdCB3aXRoIGEgcGlrZSBhdHRhY2sgb24gdGhlIHNhbWUgdHVybiwgdGhlIHRhcmdldCB0YWtlcyBhbiBleHRyYSAxMCAoM2Q2KSBwaWVyY2luZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjNkNlwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgY2VudGF1ciBtYWtlcyB0d28gYXR0YWNrczogb25lIHdpdGggaXRzIHBpa2UgYW5kIG9uZSB3aXRoIGl0cyBob292ZXMgb3IgdHdvIHdpdGggaXRzIGxvbmdib3cuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiUGlrZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzYgdG8gaGl0LCByZWFjaCAxMCBmdC4sIG9uZSB0YXJnZXQuIEhpdDogOSAoMWQxMCArIDQpIHBpZXJjaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDYsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMWQxMFwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogNFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkhvb3Zlc1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzYgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxMSAoMmQ2ICsgNCkgYmx1ZGdlb25pbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIyZDZcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDRcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJMb25nYm93XCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJSYW5nZWQgV2VhcG9uIEF0dGFjazogKzQgdG8gaGl0LCByYW5nZSAxNTAvNjAwIGZ0Liwgb25lIHRhcmdldC4gSGl0OiA2ICgxZDggKyAyKSBwaWVyY2luZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA0LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjFkOFwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogMlxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiQ2hhaW4gRGV2aWxcIixcbiAgICAgICAgc2l6ZTogXCJNZWRpdW1cIixcbiAgICAgICAgdHlwZTogXCJmaWVuZFwiLFxuICAgICAgICBzdWJ0eXBlOiBcImRldmlsXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJsYXdmdWwgZXZpbFwiLFxuICAgICAgICBhYzogMTYsXG4gICAgICAgIGhwOiA4NSxcbiAgICAgICAgaGl0X2RpY2U6IFwiMTBkOCArIDQwXCIsXG4gICAgICAgIHNwZWVkOiBcIjMwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzE4LCAxNSwgMTgsIDExLCAxMiwgMTRdLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6XG4gICAgICAgICAgICBcImNvbGQ7IGJsdWRnZW9uaW5nLCBwaWVyY2luZywgYW5kIHNsYXNoaW5nIGZyb20gbm9ubWFnaWNhbCB3ZWFwb25zIHRoYXQgYXJlbid0IHNpbHZlcmVkXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcImZpcmUsIHBvaXNvblwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJwb2lzb25lZFwiLFxuICAgICAgICBzZW5zZXM6IFwiZGFya3Zpc2lvbiAxMjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gOFwiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiSW5mZXJuYWwsIHRlbGVwYXRoeSAxMjAgZnQuXCIsXG4gICAgICAgIGNyOiBcIjExXCIsXG4gICAgICAgIHRyYWl0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiRGV2aWwncyBTaWdodFwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWFnaWNhbCBkYXJrbmVzcyBkb2Vzbid0IGltcGVkZSB0aGUgZGV2aWwncyBkYXJrdmlzaW9uLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk1hZ2ljIFJlc2lzdGFuY2VcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBkZXZpbCBoYXMgYWR2YW50YWdlIG9uIHNhdmluZyB0aHJvd3MgYWdhaW5zdCBzcGVsbHMgYW5kIG90aGVyIG1hZ2ljYWwgZWZmZWN0cy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBkZXZpbCBtYWtlcyB0d28gYXR0YWNrcyB3aXRoIGl0cyBjaGFpbnMuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQ2hhaW5cIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs4IHRvIGhpdCwgcmVhY2ggMTAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDExICgyZDYgKyA0KSBzbGFzaGluZyBkYW1hZ2UuIFRoZSB0YXJnZXQgaXMgZ3JhcHBsZWQgKGVzY2FwZSBEQyAxNCkgaWYgdGhlIGRldmlsIGlzbid0IGFscmVhZHkgZ3JhcHBsaW5nIGEgY3JlYXR1cmUuIFVudGlsIHRoaXMgZ3JhcHBsZSBlbmRzLCB0aGUgdGFyZ2V0IGlzIHJlc3RyYWluZWQgYW5kIHRha2VzIDcgKDJkNikgcGllcmNpbmcgZGFtYWdlIGF0IHRoZSBzdGFydCBvZiBlYWNoIG9mIGl0cyB0dXJucy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDgsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMmQ2XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiA0XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQW5pbWF0ZSBDaGFpbnMgKFJlY2hhcmdlcyBhZnRlciBhIFNob3J0IG9yIExvbmcgUmVzdClcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlVwIHRvIGZvdXIgY2hhaW5zIHRoZSBkZXZpbCBjYW4gc2VlIHdpdGhpbiA2MCBmZWV0IG9mIGl0IG1hZ2ljYWxseSBzcHJvdXQgcmF6b3ItZWRnZWQgYmFyYnMgYW5kIGFuaW1hdGUgdW5kZXIgdGhlIGRldmlsJ3MgY29udHJvbCwgcHJvdmlkZWQgdGhhdCB0aGUgY2hhaW5zIGFyZW4ndCBiZWluZyB3b3JuIG9yIGNhcnJpZWQuXFxcXG5FYWNoIGFuaW1hdGVkIGNoYWluIGlzIGFuIG9iamVjdCB3aXRoIEFDIDIwLCAyMCBoaXQgcG9pbnRzLCByZXNpc3RhbmNlIHRvIHBpZXJjaW5nIGRhbWFnZSwgYW5kIGltbXVuaXR5IHRvIHBzeWNoaWMgYW5kIHRodW5kZXIgZGFtYWdlLiBXaGVuIHRoZSBkZXZpbCB1c2VzIE11bHRpYXR0YWNrIG9uIGl0cyB0dXJuLCBpdCBjYW4gdXNlIGVhY2ggYW5pbWF0ZWQgY2hhaW4gdG8gbWFrZSBvbmUgYWRkaXRpb25hbCBjaGFpbiBhdHRhY2suIEFuIGFuaW1hdGVkIGNoYWluIGNhbiBncmFwcGxlIG9uZSBjcmVhdHVyZSBvZiBpdHMgb3duIGJ1dCBjYW4ndCBtYWtlIGF0dGFja3Mgd2hpbGUgZ3JhcHBsaW5nLiBBbiBhbmltYXRlZCBjaGFpbiByZXZlcnRzIHRvIGl0cyBpbmFuaW1hdGUgc3RhdGUgaWYgcmVkdWNlZCB0byAwIGhpdCBwb2ludHMgb3IgaWYgdGhlIGRldmlsIGlzIGluY2FwYWNpdGF0ZWQgb3IgZGllcy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgcmVhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJVbm5lcnZpbmcgTWFza1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiV2hlbiBhIGNyZWF0dXJlIHRoZSBkZXZpbCBjYW4gc2VlIHN0YXJ0cyBpdHMgdHVybiB3aXRoaW4gMzAgZmVldCBvZiB0aGUgZGV2aWwsIHRoZSBkZXZpbCBjYW4gY3JlYXRlIHRoZSBpbGx1c2lvbiB0aGF0IGl0IGxvb2tzIGxpa2Ugb25lIG9mIHRoZSBjcmVhdHVyZSdzIGRlcGFydGVkIGxvdmVkIG9uZXMgb3IgYml0dGVyIGVuZW1pZXMuIElmIHRoZSBjcmVhdHVyZSBjYW4gc2VlIHRoZSBkZXZpbCwgaXQgbXVzdCBzdWNjZWVkIG9uIGEgREMgMTQgV2lzZG9tIHNhdmluZyB0aHJvdyBvciBiZSBmcmlnaHRlbmVkIHVudGlsIHRoZSBlbmQgb2YgaXRzIHR1cm4uXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJDaGltZXJhXCIsXG4gICAgICAgIHNpemU6IFwiTGFyZ2VcIixcbiAgICAgICAgdHlwZTogXCJtb25zdHJvc2l0eVwiLFxuICAgICAgICBzdWJ0eXBlOiBcIlwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwiY2hhb3RpYyBldmlsXCIsXG4gICAgICAgIGFjOiAxNCxcbiAgICAgICAgaHA6IDExNCxcbiAgICAgICAgaGl0X2RpY2U6IFwiMTJkMTAgKyA0OFwiLFxuICAgICAgICBzcGVlZDogXCIzMCBmdC4sIGZseSA2MCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsxOSwgMTEsIDE5LCAzLCAxNCwgMTBdLFxuICAgICAgICBza2lsbHNhdmVzOiBbeyBwZXJjZXB0aW9uOiA4IH1dLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcbiAgICAgICAgc2Vuc2VzOiBcImRhcmt2aXNpb24gNjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMThcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcInVuZGVyc3RhbmRzIERyYWNvbmljIGJ1dCBjYW4ndCBzcGVha1wiLFxuICAgICAgICBjcjogXCI2XCIsXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgY2hpbWVyYSBtYWtlcyB0aHJlZSBhdHRhY2tzOiBvbmUgd2l0aCBpdHMgYml0ZSwgb25lIHdpdGggaXRzIGhvcm5zLCBhbmQgb25lIHdpdGggaXRzIGNsYXdzLiBXaGVuIGl0cyBmaXJlIGJyZWF0aCBpcyBhdmFpbGFibGUsIGl0IGNhbiB1c2UgdGhlIGJyZWF0aCBpbiBwbGFjZSBvZiBpdHMgYml0ZSBvciBob3Jucy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJCaXRlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNyB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDExICgyZDYgKyA0KSBwaWVyY2luZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA3LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjJkNlwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogNFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkhvcm5zXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNyB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDEwICgxZDEyICsgNCkgYmx1ZGdlb25pbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNyxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIxZDEyXCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiA0XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQ2xhd3NcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs3IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTEgKDJkNiArIDQpIHNsYXNoaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDcsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMmQ2XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiA0XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiRmlyZSBCcmVhdGggKFJlY2hhcmdlIDUtNilcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBkcmFnb24gaGVhZCBleGhhbGVzIGZpcmUgaW4gYSAxNS1mb290IGNvbmUuIEVhY2ggY3JlYXR1cmUgaW4gdGhhdCBhcmVhIG11c3QgbWFrZSBhIERDIDE1IERleHRlcml0eSBzYXZpbmcgdGhyb3csIHRha2luZyAzMSAoN2Q4KSBmaXJlIGRhbWFnZSBvbiBhIGZhaWxlZCBzYXZlLCBvciBoYWxmIGFzIG11Y2ggZGFtYWdlIG9uIGEgc3VjY2Vzc2Z1bCBvbmUuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjdkOFwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJDaHV1bFwiLFxuICAgICAgICBzaXplOiBcIkxhcmdlXCIsXG4gICAgICAgIHR5cGU6IFwiYWJlcnJhdGlvblwiLFxuICAgICAgICBzdWJ0eXBlOiBcIlwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwiY2hhb3RpYyBldmlsXCIsXG4gICAgICAgIGFjOiAxNixcbiAgICAgICAgaHA6IDkzLFxuICAgICAgICBoaXRfZGljZTogXCIxMWQxMCArIDMyXCIsXG4gICAgICAgIHNwZWVkOiBcIjMwIGZ0Liwgc3dpbSAzMCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsxOSwgMTAsIDE2LCA1LCAxMSwgNV0sXG4gICAgICAgIHNraWxsc2F2ZXM6IFt7IHBlcmNlcHRpb246IDQgfV0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwicG9pc29uXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOiBcInBvaXNvbmVkXCIsXG4gICAgICAgIHNlbnNlczogXCJkYXJrdmlzaW9uIDYwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDE0XCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJ1bmRlcnN0YW5kcyBEZWVwIFNwZWVjaCBidXQgY2FuJ3Qgc3BlYWtcIixcbiAgICAgICAgY3I6IFwiNFwiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkFtcGhpYmlvdXNcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBjaHV1bCBjYW4gYnJlYXRoZSBhaXIgYW5kIHdhdGVyLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlNlbnNlIE1hZ2ljXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgY2h1dWwgc2Vuc2VzIG1hZ2ljIHdpdGhpbiAxMjAgZmVldCBvZiBpdCBhdCB3aWxsLiBUaGlzIHRyYWl0IG90aGVyd2lzZSB3b3JrcyBsaWtlIHRoZSBkZXRlY3QgbWFnaWMgc3BlbGwgYnV0IGlzbid0IGl0c2VsZiBtYWdpY2FsLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJNdWx0aWF0dGFja1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGNodXVsIG1ha2VzIHR3byBwaW5jZXIgYXR0YWNrcy4gSWYgdGhlIGNodXVsIGlzIGdyYXBwbGluZyBhIGNyZWF0dXJlLCB0aGUgY2h1dWwgY2FuIGFsc28gdXNlIGl0cyB0ZW50YWNsZXMgb25jZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJQaW5jZXJcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs2IHRvIGhpdCwgcmVhY2ggMTAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDExICgyZDYgKyA0KSBibHVkZ2VvbmluZyBkYW1hZ2UuIFRoZSB0YXJnZXQgaXMgZ3JhcHBsZWQgKGVzY2FwZSBEQyAxNCkgaWYgaXQgaXMgYSBMYXJnZSBvciBzbWFsbGVyIGNyZWF0dXJlIGFuZCB0aGUgY2h1dWwgZG9lc24ndCBoYXZlIHR3byBvdGhlciBjcmVhdHVyZXMgZ3JhcHBsZWQuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA2LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjJkNlwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogNFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlRlbnRhY2xlc1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiT25lIGNyZWF0dXJlIGdyYXBwbGVkIGJ5IHRoZSBjaHV1bCBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxMyBDb25zdGl0dXRpb24gc2F2aW5nIHRocm93IG9yIGJlIHBvaXNvbmVkIGZvciAxIG1pbnV0ZS4gVW50aWwgdGhpcyBwb2lzb24gZW5kcywgdGhlIHRhcmdldCBpcyBwYXJhbHl6ZWQuIFRoZSB0YXJnZXQgY2FuIHJlcGVhdCB0aGUgc2F2aW5nIHRocm93IGF0IHRoZSBlbmQgb2YgZWFjaCBvZiBpdHMgdHVybnMsIGVuZGluZyB0aGUgZWZmZWN0IG9uIGl0c2VsZiBvbiBhIHN1Y2Nlc3MuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJDbGF5IEdvbGVtXCIsXG4gICAgICAgIHNpemU6IFwiTGFyZ2VcIixcbiAgICAgICAgdHlwZTogXCJjb25zdHJ1Y3RcIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcInVuYWxpZ25lZFwiLFxuICAgICAgICBhYzogMTQsXG4gICAgICAgIGhwOiAxMzMsXG4gICAgICAgIGhpdF9kaWNlOiBcIjE0ZDEwICsgNTZcIixcbiAgICAgICAgc3BlZWQ6IFwiMjAgZnQuXCIsXG4gICAgICAgIHN0YXRzOiBbMjAsIDksIDE4LCAzLCA4LCAxXSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczpcbiAgICAgICAgICAgIFwiYWNpZCwgcG9pc29uLCBwc3ljaGljOyBibHVkZ2VvbmluZywgcGllcmNpbmcsIGFuZCBzbGFzaGluZyBmcm9tIG5vbm1hZ2ljYWwgd2VhcG9ucyB0aGF0IGFyZW4ndCBhZGFtYW50aW5lXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOlxuICAgICAgICAgICAgXCJjaGFybWVkLCBleGhhdXN0aW9uLCBmcmlnaHRlbmVkLCBwYXJhbHl6ZWQsIHBldHJpZmllZCwgcG9pc29uZWRcIixcbiAgICAgICAgc2Vuc2VzOiBcImRhcmt2aXNpb24gNjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gOVwiLFxuICAgICAgICBsYW5ndWFnZXM6IFwidW5kZXJzdGFuZHMgdGhlIGxhbmd1YWdlcyBvZiBpdHMgY3JlYXRvciBidXQgY2FuJ3Qgc3BlYWtcIixcbiAgICAgICAgY3I6IFwiOVwiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkFjaWQgQWJzb3JwdGlvblwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiV2hlbmV2ZXIgdGhlIGdvbGVtIGlzIHN1YmplY3RlZCB0byBhY2lkIGRhbWFnZSwgaXQgdGFrZXMgbm8gZGFtYWdlIGFuZCBpbnN0ZWFkIHJlZ2FpbnMgYSBudW1iZXIgb2YgaGl0IHBvaW50cyBlcXVhbCB0byB0aGUgYWNpZCBkYW1hZ2UgZGVhbHQuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQmVyc2Vya1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiV2hlbmV2ZXIgdGhlIGdvbGVtIHN0YXJ0cyBpdHMgdHVybiB3aXRoIDYwIGhpdCBwb2ludHMgb3IgZmV3ZXIsIHJvbGwgYSBkNi4gT24gYSA2LCB0aGUgZ29sZW0gZ29lcyBiZXJzZXJrLiBPbiBlYWNoIG9mIGl0cyB0dXJucyB3aGlsZSBiZXJzZXJrLCB0aGUgZ29sZW0gYXR0YWNrcyB0aGUgbmVhcmVzdCBjcmVhdHVyZSBpdCBjYW4gc2VlLiBJZiBubyBjcmVhdHVyZSBpcyBuZWFyIGVub3VnaCB0byBtb3ZlIHRvIGFuZCBhdHRhY2ssIHRoZSBnb2xlbSBhdHRhY2tzIGFuIG9iamVjdCwgd2l0aCBwcmVmZXJlbmNlIGZvciBhbiBvYmplY3Qgc21hbGxlciB0aGFuIGl0c2VsZi4gT25jZSB0aGUgZ29sZW0gZ29lcyBiZXJzZXJrLCBpdCBjb250aW51ZXMgdG8gZG8gc28gdW50aWwgaXQgaXMgZGVzdHJveWVkIG9yIHJlZ2FpbnMgYWxsIGl0cyBoaXQgcG9pbnRzLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkltbXV0YWJsZSBGb3JtXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZ29sZW0gaXMgaW1tdW5lIHRvIGFueSBzcGVsbCBvciBlZmZlY3QgdGhhdCB3b3VsZCBhbHRlciBpdHMgZm9ybS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJNYWdpYyBSZXNpc3RhbmNlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZ29sZW0gaGFzIGFkdmFudGFnZSBvbiBzYXZpbmcgdGhyb3dzIGFnYWluc3Qgc3BlbGxzIGFuZCBvdGhlciBtYWdpY2FsIGVmZmVjdHMuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTWFnaWMgV2VhcG9uc1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGdvbGVtJ3Mgd2VhcG9uIGF0dGFja3MgYXJlIG1hZ2ljYWwuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZ29sZW0gbWFrZXMgdHdvIHNsYW0gYXR0YWNrcy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJTbGFtXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArOCB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDE2ICgyZDEwICsgNSkgYmx1ZGdlb25pbmcgZGFtYWdlLiBJZiB0aGUgdGFyZ2V0IGlzIGEgY3JlYXR1cmUsIGl0IG11c3Qgc3VjY2VlZCBvbiBhIERDIDE1IENvbnN0aXR1dGlvbiBzYXZpbmcgdGhyb3cgb3IgaGF2ZSBpdHMgaGl0IHBvaW50IG1heGltdW0gcmVkdWNlZCBieSBhbiBhbW91bnQgZXF1YWwgdG8gdGhlIGRhbWFnZSB0YWtlbi4gVGhlIHRhcmdldCBkaWVzIGlmIHRoaXMgYXR0YWNrIHJlZHVjZXMgaXRzIGhpdCBwb2ludCBtYXhpbXVtIHRvIDAuIFRoZSByZWR1Y3Rpb24gbGFzdHMgdW50aWwgcmVtb3ZlZCBieSB0aGUgZ3JlYXRlciByZXN0b3JhdGlvbiBzcGVsbCBvciBvdGhlciBtYWdpYy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDgsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMmQxMFwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogNVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkhhc3RlIChSZWNoYXJnZSA1LTYpXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJVbnRpbCB0aGUgZW5kIG9mIGl0cyBuZXh0IHR1cm4sIHRoZSBnb2xlbSBtYWdpY2FsbHkgZ2FpbnMgYSArMiBib251cyB0byBpdHMgQUMsIGhhcyBhZHZhbnRhZ2Ugb24gRGV4dGVyaXR5IHNhdmluZyB0aHJvd3MsIGFuZCBjYW4gdXNlIGl0cyBzbGFtIGF0dGFjayBhcyBhIGJvbnVzIGFjdGlvbi5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIkNsb2FrZXJcIixcbiAgICAgICAgc2l6ZTogXCJMYXJnZVwiLFxuICAgICAgICB0eXBlOiBcImFiZXJyYXRpb25cIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcImNoYW90aWMgbmV1dHJhbFwiLFxuICAgICAgICBhYzogMTQsXG4gICAgICAgIGhwOiA3OCxcbiAgICAgICAgaGl0X2RpY2U6IFwiMTJkMTAgKyAxMlwiLFxuICAgICAgICBzcGVlZDogXCIxMCBmdC4sIGZseSA0MCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsxNywgMTUsIDEyLCAxMywgMTIsIDE0XSxcbiAgICAgICAgc2tpbGxzYXZlczogW3sgc3RlYWx0aDogNSB9XSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIHNlbnNlczogXCJkYXJrdmlzaW9uIDYwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDExXCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJEZWVwIFNwZWVjaCwgVW5kZXJjb21tb25cIixcbiAgICAgICAgY3I6IFwiOFwiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkRhbWFnZSBUcmFuc2ZlclwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiV2hpbGUgYXR0YWNoZWQgdG8gYSBjcmVhdHVyZSwgdGhlIGNsb2FrZXIgdGFrZXMgb25seSBoYWxmIHRoZSBkYW1hZ2UgZGVhbHQgdG8gaXQgKHJvdW5kZWQgZG93bikuIGFuZCB0aGF0IGNyZWF0dXJlIHRha2VzIHRoZSBvdGhlciBoYWxmLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkZhbHNlIEFwcGVhcmFuY2VcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIldoaWxlIHRoZSBjbG9ha2VyIHJlbWFpbnMgbW90aW9ubGVzcyB3aXRob3V0IGl0cyB1bmRlcnNpZGUgZXhwb3NlZCwgaXQgaXMgaW5kaXN0aW5ndWlzaGFibGUgZnJvbSBhIGRhcmsgbGVhdGhlciBjbG9hay5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJMaWdodCBTZW5zaXRpdml0eVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiV2hpbGUgaW4gYnJpZ2h0IGxpZ2h0LCB0aGUgY2xvYWtlciBoYXMgZGlzYWR2YW50YWdlIG9uIGF0dGFjayByb2xscyBhbmQgV2lzZG9tIChQZXJjZXB0aW9uKSBjaGVja3MgdGhhdCByZWx5IG9uIHNpZ2h0LlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJNdWx0aWF0dGFja1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGNsb2FrZXIgbWFrZXMgdHdvIGF0dGFja3M6IG9uZSB3aXRoIGl0cyBiaXRlIGFuZCBvbmUgd2l0aCBpdHMgdGFpbC5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJCaXRlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNiB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgY3JlYXR1cmUuIEhpdDogMTAgKDJkNiArIDMpIHBpZXJjaW5nIGRhbWFnZSwgYW5kIGlmIHRoZSB0YXJnZXQgaXMgTGFyZ2Ugb3Igc21hbGxlciwgdGhlIGNsb2FrZXIgYXR0YWNoZXMgdG8gaXQuIElmIHRoZSBjbG9ha2VyIGhhcyBhZHZhbnRhZ2UgYWdhaW5zdCB0aGUgdGFyZ2V0LCB0aGUgY2xvYWtlciBhdHRhY2hlcyB0byB0aGUgdGFyZ2V0J3MgaGVhZCwgYW5kIHRoZSB0YXJnZXQgaXMgYmxpbmRlZCBhbmQgdW5hYmxlIHRvIGJyZWF0aGUgd2hpbGUgdGhlIGNsb2FrZXIgaXMgYXR0YWNoZWQuIFdoaWxlIGF0dGFjaGVkLCB0aGUgY2xvYWtlciBjYW4gbWFrZSB0aGlzIGF0dGFjayBvbmx5IGFnYWluc3QgdGhlIHRhcmdldCBhbmQgaGFzIGFkdmFudGFnZSBvbiB0aGUgYXR0YWNrIHJvbGwuIFRoZSBjbG9ha2VyIGNhbiBkZXRhY2ggaXRzZWxmIGJ5IHNwZW5kaW5nIDUgZmVldCBvZiBpdHMgbW92ZW1lbnQuIEEgY3JlYXR1cmUsIGluY2x1ZGluZyB0aGUgdGFyZ2V0LCBjYW4gdGFrZSBpdHMgYWN0aW9uIHRvIGRldGFjaCB0aGUgY2xvYWtlciBieSBzdWNjZWVkaW5nIG9uIGEgREMgMTYgU3RyZW5ndGggY2hlY2suXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA2LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjJkNlwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogM1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlRhaWxcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs2IHRvIGhpdCwgcmVhY2ggMTAgZnQuLCBvbmUgY3JlYXR1cmUuIEhpdDogNyAoMWQ4ICsgMykgc2xhc2hpbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIxZDhcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDNcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJNb2FuXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJFYWNoIGNyZWF0dXJlIHdpdGhpbiA2MCBmZWV0IG9mIHRoZSBjbG9ha2VyIHRoYXQgY2FuIGhlYXIgaXRzIG1vYW4gYW5kIHRoYXQgaXNuJ3QgYW4gYWJlcnJhdGlvbiBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxMyBXaXNkb20gc2F2aW5nIHRocm93IG9yIGJlY29tZSBmcmlnaHRlbmVkIHVudGlsIHRoZSBlbmQgb2YgdGhlIGNsb2FrZXIncyBuZXh0IHR1cm4uIElmIGEgY3JlYXR1cmUncyBzYXZpbmcgdGhyb3cgaXMgc3VjY2Vzc2Z1bCwgdGhlIGNyZWF0dXJlIGlzIGltbXVuZSB0byB0aGUgY2xvYWtlcidzIG1vYW4gZm9yIHRoZSBuZXh0IDI0IGhvdXJzLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlBoYW50YXNtcyAoUmVjaGFyZ2VzIGFmdGVyIGEgU2hvcnQgb3IgTG9uZyBSZXN0KVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGNsb2FrZXIgbWFnaWNhbGx5IGNyZWF0ZXMgdGhyZWUgaWxsdXNvcnkgZHVwbGljYXRlcyBvZiBpdHNlbGYgaWYgaXQgaXNuJ3QgaW4gYnJpZ2h0IGxpZ2h0LiBUaGUgZHVwbGljYXRlcyBtb3ZlIHdpdGggaXQgYW5kIG1pbWljIGl0cyBhY3Rpb25zLCBzaGlmdGluZyBwb3NpdGlvbiBzbyBhcyB0byBtYWtlIGl0IGltcG9zc2libGUgdG8gdHJhY2sgd2hpY2ggY2xvYWtlciBpcyB0aGUgcmVhbCBvbmUuIElmIHRoZSBjbG9ha2VyIGlzIGV2ZXIgaW4gYW4gYXJlYSBvZiBicmlnaHQgbGlnaHQsIHRoZSBkdXBsaWNhdGVzIGRpc2FwcGVhci5cXFxcbldoZW5ldmVyIGFueSBjcmVhdHVyZSB0YXJnZXRzIHRoZSBjbG9ha2VyIHdpdGggYW4gYXR0YWNrIG9yIGEgaGFybWZ1bCBzcGVsbCB3aGlsZSBhIGR1cGxpY2F0ZSByZW1haW5zLCB0aGF0IGNyZWF0dXJlIHJvbGxzIHJhbmRvbWx5IHRvIGRldGVybWluZSB3aGV0aGVyIGl0IHRhcmdldHMgdGhlIGNsb2FrZXIgb3Igb25lIG9mIHRoZSBkdXBsaWNhdGVzLiBBIGNyZWF0dXJlIGlzIHVuYWZmZWN0ZWQgYnkgdGhpcyBtYWdpY2FsIGVmZmVjdCBpZiBpdCBjYW4ndCBzZWUgb3IgaWYgaXQgcmVsaWVzIG9uIHNlbnNlcyBvdGhlciB0aGFuIHNpZ2h0LlxcXFxuQSBkdXBsaWNhdGUgaGFzIHRoZSBjbG9ha2VyJ3MgQUMgYW5kIHVzZXMgaXRzIHNhdmluZyB0aHJvd3MuIElmIGFuIGF0dGFjayBoaXRzIGEgZHVwbGljYXRlLCBvciBpZiBhIGR1cGxpY2F0ZSBmYWlscyBhIHNhdmluZyB0aHJvdyBhZ2FpbnN0IGFuIGVmZmVjdCB0aGF0IGRlYWxzIGRhbWFnZSwgdGhlIGR1cGxpY2F0ZSBkaXNhcHBlYXJzLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiQ2xvdWQgR2lhbnRcIixcbiAgICAgICAgc2l6ZTogXCJIdWdlXCIsXG4gICAgICAgIHR5cGU6IFwiZ2lhbnRcIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcIm5ldXRyYWwgZ29vZCAoNTAlKSBvciBuZXV0cmFsIGV2aWwgKDUwJSlcIixcbiAgICAgICAgYWM6IDE0LFxuICAgICAgICBocDogMjAwLFxuICAgICAgICBoaXRfZGljZTogXCIxNmQxMiArIDk2XCIsXG4gICAgICAgIHNwZWVkOiBcIjQwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzI3LCAxMCwgMjIsIDEyLCAxNiwgMTZdLFxuICAgICAgICBzYXZlczogW3sgY29uc3RpdHV0aW9uOiAxMCB9LCB7IHdpc2RvbTogNyB9LCB7IGNoYXJpc21hOiA3IH1dLFxuICAgICAgICBza2lsbHNhdmVzOiBbeyBpbnNpZ2h0OiA3IH0sIHsgcGVyY2VwdGlvbjogNyB9XSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIHNlbnNlczogXCJwYXNzaXZlIFBlcmNlcHRpb24gMTdcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcIkNvbW1vbiwgR2lhbnRcIixcbiAgICAgICAgY3I6IFwiOVwiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIktlZW4gU21lbGxcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBnaWFudCBoYXMgYWR2YW50YWdlIG9uIFdpc2RvbSAoUGVyY2VwdGlvbikgY2hlY2tzIHRoYXQgcmVseSBvbiBzbWVsbC5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJJbm5hdGUgU3BlbGxjYXN0aW5nXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZ2lhbnQncyBpbm5hdGUgc3BlbGxjYXN0aW5nIGFiaWxpdHkgaXMgQ2hhcmlzbWEuIEl0IGNhbiBpbm5hdGVseSBjYXN0IHRoZSBmb2xsb3dpbmcgc3BlbGxzLCByZXF1aXJpbmcgbm8gbWF0ZXJpYWwgY29tcG9uZW50czpcXFxcblxcXFxuQXQgd2lsbDogZGV0ZWN0IG1hZ2ljLCBmb2cgY2xvdWQsIGxpZ2h0XFxcXG4zL2RheSBlYWNoOiBmZWF0aGVyIGZhbGwsIGZseSwgbWlzdHkgc3RlcCwgdGVsZWtpbmVzaXNcXFxcbjEvZGF5IGVhY2g6IGNvbnRyb2wgd2VhdGhlciwgZ2FzZW91cyBmb3JtXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZ2lhbnQgbWFrZXMgdHdvIG1vcm5pbmdzdGFyIGF0dGFja3MuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTW9ybmluZ3N0YXJcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICsxMiB0byBoaXQsIHJlYWNoIDEwIGZ0Liwgb25lIHRhcmdldC4gSGl0OiAyMSAoM2Q4ICsgOCkgcGllcmNpbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMTIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiM2Q4XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiA4XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiUm9ja1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiUmFuZ2VkIFdlYXBvbiBBdHRhY2s6ICsxMiB0byBoaXQsIHJhbmdlIDYwLzI0MCBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMzAgKDRkMTAgKyA4KSBibHVkZ2VvbmluZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAxMixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCI0ZDEwXCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiA4XG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJDb2NrYXRyaWNlXCIsXG4gICAgICAgIHNpemU6IFwiU21hbGxcIixcbiAgICAgICAgdHlwZTogXCJtb25zdHJvc2l0eVwiLFxuICAgICAgICBzdWJ0eXBlOiBcIlwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwidW5hbGlnbmVkXCIsXG4gICAgICAgIGFjOiAxMSxcbiAgICAgICAgaHA6IDI3LFxuICAgICAgICBoaXRfZGljZTogXCI2ZDYgKyA2XCIsXG4gICAgICAgIHNwZWVkOiBcIjIwIGZ0LiwgZmx5IDQwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzYsIDEyLCAxMiwgMiwgMTMsIDVdLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcbiAgICAgICAgc2Vuc2VzOiBcImRhcmt2aXNpb24gNjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTFcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcIlwiLFxuICAgICAgICBjcjogXCIxLzJcIixcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQml0ZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzMgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIGNyZWF0dXJlLiBIaXQ6IDMgKDFkNCArIDEpIHBpZXJjaW5nIGRhbWFnZSwgYW5kIHRoZSB0YXJnZXQgbXVzdCBzdWNjZWVkIG9uIGEgREMgMTEgQ29uc3RpdHV0aW9uIHNhdmluZyB0aHJvdyBhZ2FpbnN0IGJlaW5nIG1hZ2ljYWxseSBwZXRyaWZpZWQuIE9uIGEgZmFpbGVkIHNhdmUsIHRoZSBjcmVhdHVyZSBiZWdpbnMgdG8gdHVybiB0byBzdG9uZSBhbmQgaXMgcmVzdHJhaW5lZC4gSXQgbXVzdCByZXBlYXQgdGhlIHNhdmluZyB0aHJvdyBhdCB0aGUgZW5kIG9mIGl0cyBuZXh0IHR1cm4uIE9uIGEgc3VjY2VzcywgdGhlIGVmZmVjdCBlbmRzLiBPbiBhIGZhaWx1cmUsIHRoZSBjcmVhdHVyZSBpcyBwZXRyaWZpZWQgZm9yIDI0IGhvdXJzLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMyxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIxZDRcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDFcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIkNvbW1vbmVyXCIsXG4gICAgICAgIHNpemU6IFwiTWVkaXVtXCIsXG4gICAgICAgIHR5cGU6IFwiaHVtYW5vaWRcIixcbiAgICAgICAgc3VidHlwZTogXCJhbnkgcmFjZVwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwiYW55IGFsaWdubWVudFwiLFxuICAgICAgICBhYzogMTAsXG4gICAgICAgIGhwOiA0LFxuICAgICAgICBoaXRfZGljZTogXCIxZDggKyAtMVwiLFxuICAgICAgICBzcGVlZDogXCIzMCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsxMCwgMTAsIDEwLCAxMCwgMTAsIDEwXSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIHNlbnNlczogXCJwYXNzaXZlIFBlcmNlcHRpb24gMTBcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcImFueSBvbmUgbGFuZ3VhZ2UgKHVzdWFsbHkgQ29tbW9uKVwiLFxuICAgICAgICBjcjogXCIwXCIsXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkNsdWJcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICsyIHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMiAoMWQ0KSBibHVkZ2VvbmluZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAyLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjFkNFwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJDb25zdHJpY3RvciBTbmFrZVwiLFxuICAgICAgICBzaXplOiBcIkxhcmdlXCIsXG4gICAgICAgIHR5cGU6IFwiYmVhc3RcIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcInVuYWxpZ25lZFwiLFxuICAgICAgICBhYzogMTIsXG4gICAgICAgIGhwOiAxMyxcbiAgICAgICAgaGl0X2RpY2U6IFwiMmQxMCArIDJcIixcbiAgICAgICAgc3BlZWQ6IFwiMzAgZnQuLCBzd2ltIDMwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzE1LCAxNCwgMTIsIDEsIDEwLCAzXSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIHNlbnNlczogXCJibGluZHNpZ2h0IDEwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDEwXCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJcIixcbiAgICAgICAgY3I6IFwiMS80XCIsXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkJpdGVcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs0IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSBjcmVhdHVyZS4gSGl0OiA1ICgxZDYgKyAyKSBwaWVyY2luZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA0LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjFkNlwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogMlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkNvbnN0cmljdFwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzQgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIGNyZWF0dXJlLiBIaXQ6IDYgKDFkOCArIDIpIGJsdWRnZW9uaW5nIGRhbWFnZSwgYW5kIHRoZSB0YXJnZXQgaXMgZ3JhcHBsZWQgKGVzY2FwZSBEQyAxNCkuIFVudGlsIHRoaXMgZ3JhcHBsZSBlbmRzLCB0aGUgY3JlYXR1cmUgaXMgcmVzdHJhaW5lZCwgYW5kIHRoZSBzbmFrZSBjYW4ndCBjb25zdHJpY3QgYW5vdGhlciB0YXJnZXQuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA0LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjFkOFwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogMlxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiQ29wcGVyIERyYWdvbiBXeXJtbGluZ1wiLFxuICAgICAgICBzaXplOiBcIk1lZGl1bVwiLFxuICAgICAgICB0eXBlOiBcImRyYWdvblwiLFxuICAgICAgICBzdWJ0eXBlOiBcIlwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwiY2hhb3RpYyBnb29kXCIsXG4gICAgICAgIGFjOiAxNixcbiAgICAgICAgaHA6IDIyLFxuICAgICAgICBoaXRfZGljZTogXCI0ZDggKyA0XCIsXG4gICAgICAgIHNwZWVkOiBcIjMwIGZ0LiwgY2xpbWIgMzAgZnQuLCBmbHkgNjAgZnQuXCIsXG4gICAgICAgIHN0YXRzOiBbMTUsIDEyLCAxMywgMTQsIDExLCAxM10sXG4gICAgICAgIHNhdmVzOiBbXG4gICAgICAgICAgICB7IGRleHRlcml0eTogMyB9LFxuICAgICAgICAgICAgeyBjb25zdGl0dXRpb246IDMgfSxcbiAgICAgICAgICAgIHsgd2lzZG9tOiAyIH0sXG4gICAgICAgICAgICB7IGNoYXJpc21hOiAzIH1cbiAgICAgICAgXSxcbiAgICAgICAgc2tpbGxzYXZlczogW3sgcGVyY2VwdGlvbjogNCB9LCB7IHN0ZWFsdGg6IDMgfV0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwiYWNpZFwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcbiAgICAgICAgc2Vuc2VzOiBcImJsaW5kc2lnaHQgMTAgZnQuLCBkYXJrdmlzaW9uIDYwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDE0XCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJEcmFjb25pY1wiLFxuICAgICAgICBjcjogXCIxXCIsXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkJpdGVcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs0IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogNyAoMWQxMCArIDIpIHBpZXJjaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDQsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMWQxMFwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogMlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkJyZWF0aCBXZWFwb25zIChSZWNoYXJnZSA1LTYpXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZHJhZ29uIHVzZXMgb25lIG9mIHRoZSBmb2xsb3dpbmcgYnJlYXRoIHdlYXBvbnMuXFxcXG5BY2lkIEJyZWF0aC4gVGhlIGRyYWdvbiBleGhhbGVzIGFjaWQgaW4gYW4gMjAtZm9vdCBsaW5lIHRoYXQgaXMgNSBmZWV0IHdpZGUuIEVhY2ggY3JlYXR1cmUgaW4gdGhhdCBsaW5lIG11c3QgbWFrZSBhIERDIDExIERleHRlcml0eSBzYXZpbmcgdGhyb3csIHRha2luZyAxOCAoNGQ4KSBhY2lkIGRhbWFnZSBvbiBhIGZhaWxlZCBzYXZlLCBvciBoYWxmIGFzIG11Y2ggZGFtYWdlIG9uIGEgc3VjY2Vzc2Z1bCBvbmUuXFxcXG5TbG93aW5nIEJyZWF0aC4gVGhlIGRyYWdvbiBleGhhbGVzIGdhcyBpbiBhIDEgNS1mb290IGNvbmUuIEVhY2ggY3JlYXR1cmUgaW4gdGhhdCBhcmVhIG11c3Qgc3VjY2VlZCBvbiBhIERDIDExIENvbnN0aXR1dGlvbiBzYXZpbmcgdGhyb3cuIE9uIGEgZmFpbGVkIHNhdmUsIHRoZSBjcmVhdHVyZSBjYW4ndCB1c2UgcmVhY3Rpb25zLCBpdHMgc3BlZWQgaXMgaGFsdmVkLCBhbmQgaXQgY2FuJ3QgbWFrZSBtb3JlIHRoYW4gb25lIGF0dGFjayBvbiBpdHMgdHVybi4gSW4gYWRkaXRpb24sIHRoZSBjcmVhdHVyZSBjYW4gdXNlIGVpdGhlciBhbiBhY3Rpb24gb3IgYSBib251cyBhY3Rpb24gb24gaXRzIHR1cm4sIGJ1dCBub3QgYm90aC4gVGhlc2UgZWZmZWN0cyBsYXN0IGZvciAxIG1pbnV0ZS4gVGhlIGNyZWF0dXJlIGNhbiByZXBlYXQgdGhlIHNhdmluZyB0aHJvdyBhdCB0aGUgZW5kIG9mIGVhY2ggb2YgaXRzIHR1cm5zLCBlbmRpbmcgdGhlIGVmZmVjdCBvbiBpdHNlbGYgd2l0aCBhIHN1Y2Nlc3NmdWwgc2F2ZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDAsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiNGQ4XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIkNvdWF0bFwiLFxuICAgICAgICBzaXplOiBcIk1lZGl1bVwiLFxuICAgICAgICB0eXBlOiBcImNlbGVzdGlhbFwiLFxuICAgICAgICBzdWJ0eXBlOiBcIlwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwibGF3ZnVsIGdvb2RcIixcbiAgICAgICAgYWM6IDE5LFxuICAgICAgICBocDogOTcsXG4gICAgICAgIGhpdF9kaWNlOiBcIjEzZDggKyAzOFwiLFxuICAgICAgICBzcGVlZDogXCIzMCBmdC4sIGZseSA5MCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsxNiwgMjAsIDE3LCAxOCwgMjAsIDE4XSxcbiAgICAgICAgc2F2ZXM6IFt7IGNvbnN0aXR1dGlvbjogNSB9LCB7IHdpc2RvbTogNyB9LCB7IGNoYXJpc21hOiA2IH1dLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwicmFkaWFudFwiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczpcbiAgICAgICAgICAgIFwicHN5Y2hpYzsgYmx1ZGdlb25pbmcsIHBpZXJjaW5nLCBhbmQgc2xhc2hpbmcgZnJvbSBub25tYWdpY2FsIHdlYXBvbnNcIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIHNlbnNlczogXCJ0cnVlc2lnaHQgMTIwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDE1XCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJhbGwsIHRlbGVwYXRoeSAxMjAgZnQuXCIsXG4gICAgICAgIGNyOiBcIjRcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJJbm5hdGUgU3BlbGxjYXN0aW5nXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgY291YXRsJ3Mgc3BlbGxjYXN0aW5nIGFiaWxpdHkgaXMgQ2hhcmlzbWEgKHNwZWxsIHNhdmUgREMgMTQpLiBJdCBjYW4gaW5uYXRlbHkgY2FzdCB0aGUgZm9sbG93aW5nIHNwZWxscywgcmVxdWlyaW5nIG9ubHkgdmVyYmFsIGNvbXBvbmVudHM6XFxcXG5cXFxcbkF0IHdpbGw6IGRldGVjdCBldmlsIGFuZCBnb29kLCBkZXRlY3QgbWFnaWMsIGRldGVjdCB0aG91Z2h0c1xcXFxuMy9kYXkgZWFjaDogYmxlc3MsIGNyZWF0ZSBmb29kIGFuZCB3YXRlciwgY3VyZSB3b3VuZHMsIGxlc3NlciByZXN0b3JhdGlvbiwgcHJvdGVjdGlvbiBmcm9tIHBvaXNvbiwgc2FuY3R1YXJ5LCBzaGllbGRcXFxcbjEvZGF5IGVhY2g6IGRyZWFtLCBncmVhdGVyIHJlc3RvcmF0aW9uLCBzY3J5aW5nXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTWFnaWMgV2VhcG9uc1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGNvdWF0bCdzIHdlYXBvbiBhdHRhY2tzIGFyZSBtYWdpY2FsLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlNoaWVsZGVkIE1pbmRcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBjb3VhdGwgaXMgaW1tdW5lIHRvIHNjcnlpbmcgYW5kIHRvIGFueSBlZmZlY3QgdGhhdCB3b3VsZCBzZW5zZSBpdHMgZW1vdGlvbnMsIHJlYWQgaXRzIHRob3VnaHRzLCBvciBkZXRlY3QgaXRzIGxvY2F0aW9uLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJCaXRlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArOCB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgY3JlYXR1cmUuIEhpdDogOCAoMWQ2ICsgNSkgcGllcmNpbmcgZGFtYWdlLCBhbmQgdGhlIHRhcmdldCBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxMyBDb25zdGl0dXRpb24gc2F2aW5nIHRocm93IG9yIGJlIHBvaXNvbmVkIGZvciAyNCBob3Vycy4gVW50aWwgdGhpcyBwb2lzb24gZW5kcywgdGhlIHRhcmdldCBpcyB1bmNvbnNjaW91cy4gQW5vdGhlciBjcmVhdHVyZSBjYW4gdXNlIGFuIGFjdGlvbiB0byBzaGFrZSB0aGUgdGFyZ2V0IGF3YWtlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogOCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIxZDZcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJDb25zdHJpY3RcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs2IHRvIGhpdCwgcmVhY2ggMTAgZnQuLCBvbmUgTWVkaXVtIG9yIHNtYWxsZXIgY3JlYXR1cmUuIEhpdDogMTAgKDJkNiArIDMpIGJsdWRnZW9uaW5nIGRhbWFnZSwgYW5kIHRoZSB0YXJnZXQgaXMgZ3JhcHBsZWQgKGVzY2FwZSBEQyAxNSkuIFVudGlsIHRoaXMgZ3JhcHBsZSBlbmRzLCB0aGUgdGFyZ2V0IGlzIHJlc3RyYWluZWQsIGFuZCB0aGUgY291YXRsIGNhbid0IGNvbnN0cmljdCBhbm90aGVyIHRhcmdldC5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDYsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMmQ2XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiAzXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQ2hhbmdlIFNoYXBlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgY291YXRsIG1hZ2ljYWxseSBwb2x5bW9ycGhzIGludG8gYSBodW1hbm9pZCBvciBiZWFzdCB0aGF0IGhhcyBhIGNoYWxsZW5nZSByYXRpbmcgZXF1YWwgdG8gb3IgbGVzcyB0aGFuIGl0cyBvd24sIG9yIGJhY2sgaW50byBpdHMgdHJ1ZSBmb3JtLiBJdCByZXZlcnRzIHRvIGl0cyB0cnVlIGZvcm0gaWYgaXQgZGllcy4gQW55IGVxdWlwbWVudCBpdCBpcyB3ZWFyaW5nIG9yIGNhcnJ5aW5nIGlzIGFic29yYmVkIG9yIGJvcm5lIGJ5IHRoZSBuZXcgZm9ybSAodGhlIGNvdWF0bCdzIGNob2ljZSkuXFxcXG5JbiBhIG5ldyBmb3JtLCB0aGUgY291YXRsIHJldGFpbnMgaXRzIGdhbWUgc3RhdGlzdGljcyBhbmQgYWJpbGl0eSB0byBzcGVhaywgYnV0IGl0cyBBQywgbW92ZW1lbnQgbW9kZXMsIFN0cmVuZ3RoLCBEZXh0ZXJpdHksIGFuZCBvdGhlciBhY3Rpb25zIGFyZSByZXBsYWNlZCBieSB0aG9zZSBvZiB0aGUgbmV3IGZvcm0sIGFuZCBpdCBnYWlucyBhbnkgc3RhdGlzdGljcyBhbmQgY2FwYWJpbGl0aWVzIChleGNlcHQgY2xhc3MgZmVhdHVyZXMsIGxlZ2VuZGFyeSBhY3Rpb25zLCBhbmQgbGFpciBhY3Rpb25zKSB0aGF0IHRoZSBuZXcgZm9ybSBoYXMgYnV0IHRoYXQgaXQgbGFja3MuIElmIHRoZSBuZXcgZm9ybSBoYXMgYSBiaXRlIGF0dGFjaywgdGhlIGNvdWF0bCBjYW4gdXNlIGl0cyBiaXRlIGluIHRoYXQgZm9ybS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIkNyYWJcIixcbiAgICAgICAgc2l6ZTogXCJUaW55XCIsXG4gICAgICAgIHR5cGU6IFwiYmVhc3RcIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcInVuYWxpZ25lZFwiLFxuICAgICAgICBhYzogMTEsXG4gICAgICAgIGhwOiAyLFxuICAgICAgICBoaXRfZGljZTogXCIxZDRcIixcbiAgICAgICAgc3BlZWQ6IFwiMjAgZnQuLCBzd2ltIDIwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzIsIDExLCAxMCwgMSwgOCwgMl0sXG4gICAgICAgIHNraWxsc2F2ZXM6IFt7IHN0ZWFsdGg6IDIgfV0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBzZW5zZXM6IFwiYmxpbmRzaWdodCAzMCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiA5XCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJcIixcbiAgICAgICAgY3I6IFwiMFwiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkFtcGhpYmlvdXNcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBjcmFiIGNhbiBicmVhdGhlIGFpciBhbmQgd2F0ZXIuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkNsYXdcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICswIHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMSBibHVkZ2VvbmluZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogMVxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiQ3JvY29kaWxlXCIsXG4gICAgICAgIHNpemU6IFwiTGFyZ2VcIixcbiAgICAgICAgdHlwZTogXCJiZWFzdFwiLFxuICAgICAgICBzdWJ0eXBlOiBcIlwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwidW5hbGlnbmVkXCIsXG4gICAgICAgIGFjOiAxMixcbiAgICAgICAgaHA6IDE5LFxuICAgICAgICBoaXRfZGljZTogXCIzZDEwICsgMlwiLFxuICAgICAgICBzcGVlZDogXCIyMCBmdC4sIHN3aW0gMjAgZnQuXCIsXG4gICAgICAgIHN0YXRzOiBbMTUsIDEwLCAxMywgMiwgMTAsIDVdLFxuICAgICAgICBza2lsbHNhdmVzOiBbeyBzdGVhbHRoOiAyIH1dLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcbiAgICAgICAgc2Vuc2VzOiBcInBhc3NpdmUgUGVyY2VwdGlvbiAxMFwiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiXCIsXG4gICAgICAgIGNyOiBcIjEvMlwiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkhvbGQgQnJlYXRoXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgY3JvY29kaWxlIGNhbiBob2xkIGl0cyBicmVhdGggZm9yIDE1IG1pbnV0ZXMuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkJpdGVcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs0IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSBjcmVhdHVyZS4gSGl0OiA3ICgxZDEwICsgMikgcGllcmNpbmcgZGFtYWdlLCBhbmQgdGhlIHRhcmdldCBpcyBncmFwcGxlZCAoZXNjYXBlIERDIDEyKS4gVW50aWwgdGhpcyBncmFwcGxlIGVuZHMsIHRoZSB0YXJnZXQgaXMgcmVzdHJhaW5lZCwgYW5kIHRoZSBjcm9jb2RpbGUgY2FuJ3QgYml0ZSBhbm90aGVyIHRhcmdldFwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIxZDEwXCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiAyXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJDdWx0IEZhbmF0aWNcIixcbiAgICAgICAgc2l6ZTogXCJNZWRpdW1cIixcbiAgICAgICAgdHlwZTogXCJodW1hbm9pZFwiLFxuICAgICAgICBzdWJ0eXBlOiBcImFueSByYWNlXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJhbnkgbm9uLWdvb2QgYWxpZ25tZW50XCIsXG4gICAgICAgIGFjOiAxMyxcbiAgICAgICAgaHA6IDIyLFxuICAgICAgICBoaXRfZGljZTogXCI2ZDggKyAtNVwiLFxuICAgICAgICBzcGVlZDogXCIzMCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsxMSwgMTQsIDEyLCAxMCwgMTMsIDE0XSxcbiAgICAgICAgc2tpbGxzYXZlczogW3sgZGVjZXB0aW9uOiA0IH0sIHsgcGVyc3Vhc2lvbjogNCB9LCB7IHJlbGlnaW9uOiAyIH1dLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcbiAgICAgICAgc2Vuc2VzOiBcInBhc3NpdmUgUGVyY2VwdGlvbiAxMVwiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiYW55IG9uZSBsYW5ndWFnZSAodXN1YWxseSBDb21tb24pXCIsXG4gICAgICAgIGNyOiBcIjJcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJEYXJrIERldm90aW9uXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZmFuYXRpYyBoYXMgYWR2YW50YWdlIG9uIHNhdmluZyB0aHJvd3MgYWdhaW5zdCBiZWluZyBjaGFybWVkIG9yIGZyaWdodGVuZWQuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZmFuYXRpYyBtYWtlcyB0d28gbWVsZWUgYXR0YWNrcy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJEYWdnZXJcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIG9yIFJhbmdlZCBXZWFwb24gQXR0YWNrOiArNCB0byBoaXQsIHJlYWNoIDUgZnQuIG9yIHJhbmdlIDIwLzYwIGZ0Liwgb25lIGNyZWF0dXJlLiBIaXQ6IDQgKDFkNCArIDIpIHBpZXJjaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDQsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMWQ0XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiAyXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIHNwZWxsczogW1xuICAgICAgICAgICAgXCJUaGUgZmFuYXRpYyBpcyBhIDR0aC1sZXZlbCBzcGVsbGNhc3Rlci4gSXRzIHNwZWxsIGNhc3RpbmcgYWJpbGl0eSBpcyBXaXNkb20gKHNwZWxsIHNhdmUgREMgMTEsICszIHRvIGhpdCB3aXRoIHNwZWxsIGF0dGFja3MpLiBUaGUgZmFuYXRpYyBoYXMgdGhlIGZvbGxvd2luZyBjbGVyaWMgc3BlbGxzIHByZXBhcmVkOlwiLFxuICAgICAgICAgICAgXCJDYW50cmlwcyAoYXQgd2lsbCk6IGxpZ2h0LCBzYWNyZWQgZmxhbWUsIHRoYXVtYXR1cmd5XCIsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCIxc3QgbGV2ZWwgKDQgc2xvdHMpXCI6XG4gICAgICAgICAgICAgICAgICAgIFwiY29tbWFuZCwgaW5mbGljdCB3b3VuZHMsIHNoaWVsZCBvZiBmYWl0aFwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeyBcIjJuZCBsZXZlbCAoMyBzbG90cylcIjogXCJob2xkIHBlcnNvbiwgc3Bpcml0dWFsIHdlYXBvblwiIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIkN1bHRpc3RcIixcbiAgICAgICAgc2l6ZTogXCJNZWRpdW1cIixcbiAgICAgICAgdHlwZTogXCJodW1hbm9pZFwiLFxuICAgICAgICBzdWJ0eXBlOiBcImFueSByYWNlXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJhbnkgbm9uLWdvb2QgYWxpZ25tZW50XCIsXG4gICAgICAgIGFjOiAxMixcbiAgICAgICAgaHA6IDksXG4gICAgICAgIGhpdF9kaWNlOiBcIjJkOFwiLFxuICAgICAgICBzcGVlZDogXCIzMCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsxMSwgMTIsIDEwLCAxMCwgMTEsIDEwXSxcbiAgICAgICAgc2tpbGxzYXZlczogW3sgZGVjZXB0aW9uOiAyIH0sIHsgcmVsaWdpb246IDIgfV0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBzZW5zZXM6IFwicGFzc2l2ZSBQZXJjZXB0aW9uIDEwXCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJhbnkgb25lIGxhbmd1YWdlICh1c3VhbGx5IENvbW1vbilcIixcbiAgICAgICAgY3I6IFwiMS84XCIsXG4gICAgICAgIHRyYWl0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiRGFyayBEZXZvdGlvblwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGN1bHRpc3QgaGFzIGFkdmFudGFnZSBvbiBzYXZpbmcgdGhyb3dzIGFnYWluc3QgYmVpbmcgY2hhcm1lZCBvciBmcmlnaHRlbmVkLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJTY2ltaXRhclwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzMgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIGNyZWF0dXJlLiBIaXQ6IDQgKDFkNiArIDEpIHNsYXNoaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDMsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMWQ2XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiAxXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJEYXJrbWFudGxlXCIsXG4gICAgICAgIHNpemU6IFwiU21hbGxcIixcbiAgICAgICAgdHlwZTogXCJtb25zdHJvc2l0eVwiLFxuICAgICAgICBzdWJ0eXBlOiBcIlwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwidW5hbGlnbmVkXCIsXG4gICAgICAgIGFjOiAxMSxcbiAgICAgICAgaHA6IDIyLFxuICAgICAgICBoaXRfZGljZTogXCI1ZDYgKyA0XCIsXG4gICAgICAgIHNwZWVkOiBcIjEwIGZ0LiwgZmx5IDMwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzE2LCAxMiwgMTMsIDIsIDEwLCA1XSxcbiAgICAgICAgc2tpbGxzYXZlczogW3sgc3RlYWx0aDogMyB9XSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIHNlbnNlczogXCJibGluZHNpZ2h0IDYwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDEwXCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJcIixcbiAgICAgICAgY3I6IFwiMS8yXCIsXG4gICAgICAgIHRyYWl0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiRWNob2xvY2F0aW9uXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZGFya21hbnRsZSBjYW4ndCB1c2UgaXRzIGJsaW5kc2lnaHQgd2hpbGUgZGVhZmVuZWQuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiRmFsc2UgQXBwZWFyYW5jZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiV2hpbGUgdGhlIGRhcmttYW50bGUgcmVtYWlucyBtb3Rpb25sZXNzLCBpdCBpcyBpbmRpc3Rpbmd1aXNoYWJsZSBmcm9tIGEgY2F2ZSBmb3JtYXRpb24gc3VjaCBhcyBhIHN0YWxhY3RpdGUgb3Igc3RhbGFnbWl0ZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQ3J1c2hcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs1IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSBjcmVhdHVyZS4gSGl0OiA2ICgxZDYgKyAzKSBibHVkZ2VvbmluZyBkYW1hZ2UsIGFuZCB0aGUgZGFya21hbnRsZSBhdHRhY2hlcyB0byB0aGUgdGFyZ2V0LiBJZiB0aGUgdGFyZ2V0IGlzIE1lZGl1bSBvciBzbWFsbGVyIGFuZCB0aGUgZGFya21hbnRsZSBoYXMgYWR2YW50YWdlIG9uIHRoZSBhdHRhY2sgcm9sbCwgaXQgYXR0YWNoZXMgYnkgZW5ndWxmaW5nIHRoZSB0YXJnZXQncyBoZWFkLCBhbmQgdGhlIHRhcmdldCBpcyBhbHNvIGJsaW5kZWQgYW5kIHVuYWJsZSB0byBicmVhdGhlIHdoaWxlIHRoZSBkYXJrbWFudGxlIGlzIGF0dGFjaGVkIGluIHRoaXMgd2F5LlxcXFxuV2hpbGUgYXR0YWNoZWQgdG8gdGhlIHRhcmdldCwgdGhlIGRhcmttYW50bGUgY2FuIGF0dGFjayBubyBvdGhlciBjcmVhdHVyZSBleGNlcHQgdGhlIHRhcmdldCBidXQgaGFzIGFkdmFudGFnZSBvbiBpdHMgYXR0YWNrIHJvbGxzLiBUaGUgZGFya21hbnRsZSdzIHNwZWVkIGFsc28gYmVjb21lcyAwLCBpdCBjYW4ndCBiZW5lZml0IGZyb20gYW55IGJvbnVzIHRvIGl0cyBzcGVlZCwgYW5kIGl0IG1vdmVzIHdpdGggdGhlIHRhcmdldC5cXFxcbkEgY3JlYXR1cmUgY2FuIGRldGFjaCB0aGUgZGFya21hbnRsZSBieSBtYWtpbmcgYSBzdWNjZXNzZnVsIERDIDEzIFN0cmVuZ3RoIGNoZWNrIGFzIGFuIGFjdGlvbi4gT24gaXRzIHR1cm4sIHRoZSBkYXJrbWFudGxlIGNhbiBkZXRhY2ggaXRzZWxmIGZyb20gdGhlIHRhcmdldCBieSB1c2luZyA1IGZlZXQgb2YgbW92ZW1lbnQuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA1LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjFkNlwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogM1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkRhcmtuZXNzIEF1cmEgKDEvZGF5KVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiQSAxNS1mb290IHJhZGl1cyBvZiBtYWdpY2FsIGRhcmtuZXNzIGV4dGVuZHMgb3V0IGZyb20gdGhlIGRhcmttYW50bGUsIG1vdmVzIHdpdGggaXQsIGFuZCBzcHJlYWRzIGFyb3VuZCBjb3JuZXJzLiBUaGUgZGFya25lc3MgbGFzdHMgYXMgbG9uZyBhcyB0aGUgZGFya21hbnRsZSBtYWludGFpbnMgY29uY2VudHJhdGlvbiwgdXAgdG8gMTAgbWludXRlcyAoYXMgaWYgY29uY2VudHJhdGluZyBvbiBhIHNwZWxsKS4gRGFya3Zpc2lvbiBjYW4ndCBwZW5ldHJhdGUgdGhpcyBkYXJrbmVzcywgYW5kIG5vIG5hdHVyYWwgbGlnaHQgY2FuIGlsbHVtaW5hdGUgaXQuIElmIGFueSBvZiB0aGUgZGFya25lc3Mgb3ZlcmxhcHMgd2l0aCBhbiBhcmVhIG9mIGxpZ2h0IGNyZWF0ZWQgYnkgYSBzcGVsbCBvZiAybmQgbGV2ZWwgb3IgbG93ZXIsIHRoZSBzcGVsbCBjcmVhdGluZyB0aGUgbGlnaHQgaXMgZGlzcGVsbGVkLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiRGVhdGggRG9nXCIsXG4gICAgICAgIHNpemU6IFwiTWVkaXVtXCIsXG4gICAgICAgIHR5cGU6IFwibW9uc3Ryb3NpdHlcIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcIm5ldXRyYWwgZXZpbFwiLFxuICAgICAgICBhYzogMTIsXG4gICAgICAgIGhwOiAzOSxcbiAgICAgICAgaGl0X2RpY2U6IFwiNmQ4ICsgMTJcIixcbiAgICAgICAgc3BlZWQ6IFwiNDAgZnQuXCIsXG4gICAgICAgIHN0YXRzOiBbMTUsIDE0LCAxNCwgMywgMTMsIDZdLFxuICAgICAgICBza2lsbHNhdmVzOiBbeyBwZXJjZXB0aW9uOiA1IH0sIHsgc3RlYWx0aDogNCB9XSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIHNlbnNlczogXCJkYXJrdmlzaW9uIDEyMCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxNVwiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiXCIsXG4gICAgICAgIGNyOiBcIjFcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJUd28tSGVhZGVkXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZG9nIGhhcyBhZHZhbnRhZ2Ugb24gV2lzZG9tIChQZXJjZXB0aW9uKSBjaGVja3MgYW5kIG9uIHNhdmluZyB0aHJvd3MgYWdhaW5zdCBiZWluZyBibGluZGVkLCBjaGFybWVkLCBkZWFmZW5lZCwgZnJpZ2h0ZW5lZCwgc3R1bm5lZCwgb3Iga25vY2tlZCB1bmNvbnNjaW91cy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBkb2cgbWFrZXMgdHdvIGJpdGUgYXR0YWNrcy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJCaXRlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNCB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDUgKDFkNiArIDIpIHBpZXJjaW5nIGRhbWFnZS4gSWYgdGhlIHRhcmdldCBpcyBhIGNyZWF0dXJlLCBpdCBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxMiBDb25zdGl0dXRpb24gc2F2aW5nIHRocm93IGFnYWluc3QgZGlzZWFzZSBvciBiZWNvbWUgcG9pc29uZWQgdW50aWwgdGhlIGRpc2Vhc2UgaXMgY3VyZWQuIEV2ZXJ5IDI0IGhvdXJzIHRoYXQgZWxhcHNlLCB0aGUgY3JlYXR1cmUgbXVzdCByZXBlYXQgdGhlIHNhdmluZyB0aHJvdywgcmVkdWNpbmcgaXRzIGhpdCBwb2ludCBtYXhpbXVtIGJ5IDUgKDFkMTApIG9uIGEgZmFpbHVyZS4gVGhpcyByZWR1Y3Rpb24gbGFzdHMgdW50aWwgdGhlIGRpc2Vhc2UgaXMgY3VyZWQuIFRoZSBjcmVhdHVyZSBkaWVzIGlmIHRoZSBkaXNlYXNlIHJlZHVjZXMgaXRzIGhpdCBwb2ludCBtYXhpbXVtIHRvIDAuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA0LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjFkNlwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogMlxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiRGVlcCBHbm9tZSAoU3ZpcmZuZWJsaW4pXCIsXG4gICAgICAgIHNpemU6IFwiU21hbGxcIixcbiAgICAgICAgdHlwZTogXCJodW1hbm9pZFwiLFxuICAgICAgICBzdWJ0eXBlOiBcImdub21lXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJuZXV0cmFsIGdvb2RcIixcbiAgICAgICAgYWM6IDE1LFxuICAgICAgICBocDogMTYsXG4gICAgICAgIGhpdF9kaWNlOiBcIjNkNiArIDVcIixcbiAgICAgICAgc3BlZWQ6IFwiMjAgZnQuXCIsXG4gICAgICAgIHN0YXRzOiBbMTUsIDE0LCAxNCwgMTIsIDEwLCA5XSxcbiAgICAgICAgc2tpbGxzYXZlczogW3sgcGVyY2VwdGlvbjogMiB9LCB7IGludmVzdGlnYXRpb246IDMgfSwgeyBzdGVhbHRoOiA0IH1dLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcbiAgICAgICAgc2Vuc2VzOiBcImRhcmt2aXNpb24gMTIwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDEyXCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJHbm9taXNoLCBUZXJyYW4sIFVuZGVyY29tbW9uXCIsXG4gICAgICAgIGNyOiBcIjEvMlwiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlN0b25lIENhbW91ZmxhZ2VcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBnbm9tZSBoYXMgYWR2YW50YWdlIG9uIERleHRlcml0eSAoU3RlYWx0aCkgY2hlY2tzIG1hZGUgdG8gaGlkZSBpbiByb2NreSB0ZXJyYWluLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkdub21lIEN1bm5pbmdcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBnbm9tZSBoYXMgYWR2YW50YWdlIG9uIEludGVsbGlnZW5jZSwgV2lzZG9tLCBhbmQgQ2hhcmlzbWEgc2F2aW5nIHRocm93cyBhZ2FpbnN0IG1hZ2ljLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIklubmF0ZSBTcGVsbGNhc3RpbmdcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBnbm9tZSdzIGlubmF0ZSBzcGVsbGNhc3RpbmcgYWJpbGl0eSBpcyBJbnRlbGxpZ2VuY2UgKHNwZWxsIHNhdmUgREMgMTEpLiBJdCBjYW4gaW5uYXRlbHkgY2FzdCB0aGUgZm9sbG93aW5nIHNwZWxscywgcmVxdWlyaW5nIG5vIG1hdGVyaWFsIGNvbXBvbmVudHM6XFxcXG5BdCB3aWxsOiBub25kZXRlY3Rpb24gKHNlbGYgb25seSlcXFxcbjEvZGF5IGVhY2g6IGJsaW5kbmVzcy9kZWFmbmVzcywgYmx1ciwgZGlzZ3Vpc2Ugc2VsZlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJXYXIgUGlja1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzQgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiA2ICgxZDggKyAyKSBwaWVyY2luZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA0LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjFkOFwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogMlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlBvaXNvbmVkIERhcnRcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlJhbmdlZCBXZWFwb24gQXR0YWNrOiArNCB0byBoaXQsIHJhbmdlIDMwLzEyMCBmdC4sIG9uZSBjcmVhdHVyZS4gSGl0OiA0ICgxZDQgKyAyKSBwaWVyY2luZyBkYW1hZ2UsIGFuZCB0aGUgdGFyZ2V0IG11c3Qgc3VjY2VlZCBvbiBhIERDIDEyIENvbnN0aXR1dGlvbiBzYXZpbmcgdGhyb3cgb3IgYmUgcG9pc29uZWQgZm9yIDEgbWludXRlLiBUaGUgdGFyZ2V0IGNhbiByZXBlYXQgdGhlIHNhdmluZyB0aHJvdyBhdCB0aGUgZW5kIG9mIGVhY2ggb2YgaXRzIHR1cm5zLCBlbmRpbmcgdGhlIGVmZmVjdCBvbiBpdHNlbGYgb24gYSBzdWNjZXNzXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA0LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjFkNFwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogMlxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiRGVlclwiLFxuICAgICAgICBzaXplOiBcIk1lZGl1bVwiLFxuICAgICAgICB0eXBlOiBcImJlYXN0XCIsXG4gICAgICAgIHN1YnR5cGU6IFwiXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcbiAgICAgICAgYWM6IDEzLFxuICAgICAgICBocDogNCxcbiAgICAgICAgaGl0X2RpY2U6IFwiMWQ4ICsgLTFcIixcbiAgICAgICAgc3BlZWQ6IFwiNTAgZnQuXCIsXG4gICAgICAgIHN0YXRzOiBbMTEsIDE2LCAxMSwgMiwgMTQsIDVdLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcbiAgICAgICAgc2Vuc2VzOiBcInBhc3NpdmUgUGVyY2VwdGlvbiAxMlwiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiXCIsXG4gICAgICAgIGNyOiBcIjBcIixcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQml0ZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzIgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAyICgxZDQpIHBpZXJjaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMWQ0XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIkRldmFcIixcbiAgICAgICAgc2l6ZTogXCJNZWRpdW1cIixcbiAgICAgICAgdHlwZTogXCJjZWxlc3RpYWxcIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcImxhd2Z1bCBnb29kXCIsXG4gICAgICAgIGFjOiAxNyxcbiAgICAgICAgaHA6IDEzNixcbiAgICAgICAgaGl0X2RpY2U6IFwiMTZkOCArIDY0XCIsXG4gICAgICAgIHNwZWVkOiBcIjMwIGZ0LiwgZmx5IDkwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzE4LCAxOCwgMTgsIDE3LCAyMCwgMjBdLFxuICAgICAgICBzYXZlczogW3sgd2lzZG9tOiA5IH0sIHsgY2hhcmlzbWE6IDkgfV0sXG4gICAgICAgIHNraWxsc2F2ZXM6IFt7IGluc2lnaHQ6IDkgfSwgeyBwZXJjZXB0aW9uOiA5IH1dLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6XG4gICAgICAgICAgICBcInJhZGlhbnQ7IGJsdWRnZW9uaW5nLCBwaWVyY2luZywgYW5kIHNsYXNoaW5nIGZyb20gbm9ubWFnaWNhbCB3ZWFwb25zXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJjaGFybWVkLCBleGhhdXN0aW9uLCBmcmlnaHRlbmVkXCIsXG4gICAgICAgIHNlbnNlczogXCJkYXJrdmlzaW9uIDEyMCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxOVwiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiYWxsLCB0ZWxlcGF0aHkgMTIwIGZ0LlwiLFxuICAgICAgICBjcjogXCIxMFwiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkFuZ2VsaWMgV2VhcG9uc1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGRldmEncyB3ZWFwb24gYXR0YWNrcyBhcmUgbWFnaWNhbC4gV2hlbiB0aGUgZGV2YSBoaXRzIHdpdGggYW55IHdlYXBvbiwgdGhlIHdlYXBvbiBkZWFscyBhbiBleHRyYSA0ZDggcmFkaWFudCBkYW1hZ2UgKGluY2x1ZGVkIGluIHRoZSBhdHRhY2spLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIklubmF0ZSBTcGVsbGNhc3RpbmdcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBkZXZhJ3Mgc3BlbGxjYXN0aW5nIGFiaWxpdHkgaXMgQ2hhcmlzbWEgKHNwZWxsIHNhdmUgREMgMTcpLiBUaGUgZGV2YSBjYW4gaW5uYXRlbHkgY2FzdCB0aGUgZm9sbG93aW5nIHNwZWxscywgcmVxdWlyaW5nIG9ubHkgdmVyYmFsIGNvbXBvbmVudHM6XFxcXG5BdCB3aWxsOiBkZXRlY3QgZXZpbCBhbmQgZ29vZFxcXFxuMS9kYXkgZWFjaDogY29tbXVuZSwgcmFpc2UgZGVhZFwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk1hZ2ljIFJlc2lzdGFuY2VcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBkZXZhIGhhcyBhZHZhbnRhZ2Ugb24gc2F2aW5nIHRocm93cyBhZ2FpbnN0IHNwZWxscyBhbmQgb3RoZXIgbWFnaWNhbCBlZmZlY3RzLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJNdWx0aWF0dGFja1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGRldmEgbWFrZXMgdHdvIG1lbGVlIGF0dGFja3MuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTWFjZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzggdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiA3ICgxZDYgKyA0KSBibHVkZ2VvbmluZyBkYW1hZ2UgcGx1cyAxOCAoNGQ4KSByYWRpYW50IGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDgsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMWQ2ICsgNGQ4XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiA0XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiSGVhbGluZyBUb3VjaCAoMy9EYXkpXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZGV2YSB0b3VjaGVzIGFub3RoZXIgY3JlYXR1cmUuIFRoZSB0YXJnZXQgbWFnaWNhbGx5IHJlZ2FpbnMgMjAgKDRkOCArIDIpIGhpdCBwb2ludHMgYW5kIGlzIGZyZWVkIGZyb20gYW55IGN1cnNlLCBkaXNlYXNlLCBwb2lzb24sIGJsaW5kbmVzcywgb3IgZGVhZm5lc3MuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQ2hhbmdlIFNoYXBlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZGV2YSBtYWdpY2FsbHkgcG9seW1vcnBocyBpbnRvIGEgaHVtYW5vaWQgb3IgYmVhc3QgdGhhdCBoYXMgYSBjaGFsbGVuZ2UgcmF0aW5nIGVxdWFsIHRvIG9yIGxlc3MgdGhhbiBpdHMgb3duLCBvciBiYWNrIGludG8gaXRzIHRydWUgZm9ybS4gSXQgcmV2ZXJ0cyB0byBpdHMgdHJ1ZSBmb3JtIGlmIGl0IGRpZXMuIEFueSBlcXVpcG1lbnQgaXQgaXMgd2VhcmluZyBvciBjYXJyeWluZyBpcyBhYnNvcmJlZCBvciBib3JuZSBieSB0aGUgbmV3IGZvcm0gKHRoZSBkZXZhJ3MgY2hvaWNlKS5cXFxcbkluIGEgbmV3IGZvcm0sIHRoZSBkZXZhIHJldGFpbnMgaXRzIGdhbWUgc3RhdGlzdGljcyBhbmQgYWJpbGl0eSB0byBzcGVhaywgYnV0IGl0cyBBQywgbW92ZW1lbnQgbW9kZXMsIFN0cmVuZ3RoLCBEZXh0ZXJpdHksIGFuZCBzcGVjaWFsIHNlbnNlcyBhcmUgcmVwbGFjZWQgYnkgdGhvc2Ugb2YgdGhlIG5ldyBmb3JtLCBhbmQgaXQgZ2FpbnMgYW55IHN0YXRpc3RpY3MgYW5kIGNhcGFiaWxpdGllcyAoZXhjZXB0IGNsYXNzIGZlYXR1cmVzLCBsZWdlbmRhcnkgYWN0aW9ucywgYW5kIGxhaXIgYWN0aW9ucykgdGhhdCB0aGUgbmV3IGZvcm0gaGFzIGJ1dCB0aGF0IGl0IGxhY2tzLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiRGlyZSBXb2xmXCIsXG4gICAgICAgIHNpemU6IFwiTGFyZ2VcIixcbiAgICAgICAgdHlwZTogXCJiZWFzdFwiLFxuICAgICAgICBzdWJ0eXBlOiBcIlwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwidW5hbGlnbmVkXCIsXG4gICAgICAgIGFjOiAxNCxcbiAgICAgICAgaHA6IDM3LFxuICAgICAgICBoaXRfZGljZTogXCI1ZDEwICsgOVwiLFxuICAgICAgICBzcGVlZDogXCI1MCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsxNywgMTUsIDE1LCAzLCAxMiwgN10sXG4gICAgICAgIHNraWxsc2F2ZXM6IFt7IHBlcmNlcHRpb246IDMgfSwgeyBzdGVhbHRoOiA0IH1dLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcbiAgICAgICAgc2Vuc2VzOiBcInBhc3NpdmUgUGVyY2VwdGlvbiAxM1wiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiXCIsXG4gICAgICAgIGNyOiBcIjFcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJLZWVuIEhlYXJpbmcgYW5kIFNtZWxsXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgd29sZiBoYXMgYWR2YW50YWdlIG9uIFdpc2RvbSAoUGVyY2VwdGlvbikgY2hlY2tzIHRoYXQgcmVseSBvbiBoZWFyaW5nIG9yIHNtZWxsLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlBhY2sgVGFjdGljc1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIHdvbGYgaGFzIGFkdmFudGFnZSBvbiBhbiBhdHRhY2sgcm9sbCBhZ2FpbnN0IGEgY3JlYXR1cmUgaWYgYXQgbGVhc3Qgb25lIG9mIHRoZSB3b2xmJ3MgYWxsaWVzIGlzIHdpdGhpbiA1IGZ0LiBvZiB0aGUgY3JlYXR1cmUgYW5kIHRoZSBhbGx5IGlzbid0IGluY2FwYWNpdGF0ZWQuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkJpdGVcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs1IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTAgKDJkNiArIDMpIHBpZXJjaW5nIGRhbWFnZS4gSWYgdGhlIHRhcmdldCBpcyBhIGNyZWF0dXJlLCBpdCBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxMyBTdHJlbmd0aCBzYXZpbmcgdGhyb3cgb3IgYmUga25vY2tlZCBwcm9uZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDUsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMmQ2XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiAzXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJEamlubmlcIixcbiAgICAgICAgc2l6ZTogXCJMYXJnZVwiLFxuICAgICAgICB0eXBlOiBcImVsZW1lbnRhbFwiLFxuICAgICAgICBzdWJ0eXBlOiBcIlwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwiY2hhb3RpYyBnb29kXCIsXG4gICAgICAgIGFjOiAxNyxcbiAgICAgICAgaHA6IDE2MSxcbiAgICAgICAgaGl0X2RpY2U6IFwiMTRkMTAgKyA4NFwiLFxuICAgICAgICBzcGVlZDogXCIzMCBmdC4sIGZseSA5MCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsyMSwgMTUsIDIyLCAxNSwgMTYsIDIwXSxcbiAgICAgICAgc2F2ZXM6IFt7IGRleHRlcml0eTogNiB9LCB7IHdpc2RvbTogNyB9LCB7IGNoYXJpc21hOiA5IH1dLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcImxpZ2h0bmluZywgdGh1bmRlclwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcbiAgICAgICAgc2Vuc2VzOiBcImRhcmt2aXNpb24gMTIwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDEzXCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJBdXJhblwiLFxuICAgICAgICBjcjogXCIxMVwiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkVsZW1lbnRhbCBEZW1pc2VcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIklmIHRoZSBkamlubmkgZGllcywgaXRzIGJvZHkgZGlzaW50ZWdyYXRlcyBpbnRvIGEgd2FybSBicmVlemUsIGxlYXZpbmcgYmVoaW5kIG9ubHkgZXF1aXBtZW50IHRoZSBkamlubmkgd2FzIHdlYXJpbmcgb3IgY2FycnlpbmcuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiSW5uYXRlIFNwZWxsY2FzdGluZ1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGRqaW5uaSdzIGlubmF0ZSBzcGVsbGNhc3RpbmcgYWJpbGl0eSBpcyBDaGFyaXNtYSAoc3BlbGwgc2F2ZSBEQyAxNywgKzkgdG8gaGl0IHdpdGggc3BlbGwgYXR0YWNrcykuIEl0IGNhbiBpbm5hdGVseSBjYXN0IHRoZSBmb2xsb3dpbmcgc3BlbGxzLCByZXF1aXJpbmcgbm8gbWF0ZXJpYWwgY29tcG9uZW50czpcXFxcblxcXFxuQXQgd2lsbDogZGV0ZWN0IGV2aWwgYW5kIGdvb2QsIGRldGVjdCBtYWdpYywgdGh1bmRlcndhdmUgMy9kYXkgZWFjaDogY3JlYXRlIGZvb2QgYW5kIHdhdGVyIChjYW4gY3JlYXRlIHdpbmUgaW5zdGVhZCBvZiB3YXRlciksIHRvbmd1ZXMsIHdpbmQgd2Fsa1xcXFxuMS9kYXkgZWFjaDogY29uanVyZSBlbGVtZW50YWwgKGFpciBlbGVtZW50YWwgb25seSksIGNyZWF0aW9uLCBnYXNlb3VzIGZvcm0sIGludmlzaWJpbGl0eSwgbWFqb3IgaW1hZ2UsIHBsYW5lIHNoaWZ0XCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiVmFyaWFudDogR2VuaWUgUG93ZXJzXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJHZW5pZXMgaGF2ZSBhIHZhcmlldHkgb2YgbWFnaWNhbCBjYXBhYmlsaXRpZXMsIGluY2x1ZGluZyBzcGVsbHMuIEEgZmV3IGhhdmUgZXZlbiBncmVhdGVyIHBvd2VycyB0aGF0IGFsbG93IHRoZW0gdG8gYWx0ZXIgdGhlaXIgYXBwZWFyYW5jZSBvciB0aGUgbmF0dXJlIG9mIHJlYWxpdHkuXFxcXG5cXFxcbkRpc2d1aXNlcy5cXFxcblNvbWUgZ2VuaWVzIGNhbiB2ZWlsIHRoZW1zZWx2ZXMgaW4gaWxsdXNpb24gdG8gcGFzcyBhcyBvdGhlciBzaW1pbGFybHkgc2hhcGVkIGNyZWF0dXJlcy4gU3VjaCBnZW5pZXMgY2FuIGlubmF0ZWx5IGNhc3QgdGhlIGRpc2d1aXNlIHNlbGYgc3BlbGwgYXQgd2lsbCwgb2Z0ZW4gd2l0aCBhIGxvbmdlciBkdXJhdGlvbiB0aGFuIGlzIG5vcm1hbCBmb3IgdGhhdCBzcGVsbC4gTWlnaHRpZXIgZ2VuaWVzIGNhbiBjYXN0IHRoZSB0cnVlIHBvbHltb3JwaCBzcGVsbCBvbmUgdG8gdGhyZWUgdGltZXMgcGVyIGRheSwgcG9zc2libHkgd2l0aCBhIGxvbmdlciBkdXJhdGlvbiB0aGFuIG5vcm1hbC4gU3VjaCBnZW5pZXMgY2FuIGNoYW5nZSBvbmx5IHRoZWlyIG93biBzaGFwZSwgYnV0IGEgcmFyZSBmZXcgY2FuIHVzZSB0aGUgc3BlbGwgb24gb3RoZXIgY3JlYXR1cmVzIGFuZCBvYmplY3RzIGFzIHdlbGwuXFxcXG5XaXNoZXMuXFxcXG5UaGUgZ2VuaWUgcG93ZXIgdG8gZ3JhbnQgd2lzaGVzIGlzIGxlZ2VuZGFyeSBhbW9uZyBtb3J0YWxzLiBPbmx5IHRoZSBtb3N0IHBvdGVudCBnZW5pZXMsIHN1Y2ggYXMgdGhvc2UgYW1vbmcgdGhlIG5vYmlsaXR5LCBjYW4gZG8gc28uIEEgcGFydGljdWxhciBnZW5pZSB0aGF0IGhhcyB0aGlzIHBvd2VyIGNhbiBncmFudCBvbmUgdG8gdGhyZWUgd2lzaGVzIHRvIGEgY3JlYXR1cmUgdGhhdCBpc24ndCBhIGdlbmllLiBPbmNlIGEgZ2VuaWUgaGFzIGdyYW50ZWQgaXRzIGxpbWl0IG9mIHdpc2hlcywgaXQgY2FuJ3QgZ3JhbnQgd2lzaGVzIGFnYWluIGZvciBzb21lIGFtb3VudCBvZiB0aW1lICh1c3VhbGx5IDEgeWVhcikuIGFuZCBjb3NtaWMgbGF3IGRpY3RhdGVzIHRoYXQgdGhlIHNhbWUgZ2VuaWUgY2FuIGV4cGVuZCBpdHMgbGltaXQgb2Ygd2lzaGVzIG9uIGEgc3BlY2lmaWMgY3JlYXR1cmUgb25seSBvbmNlIGluIHRoYXQgY3JlYXR1cmUncyBleGlzdGVuY2UuXFxcXG5UbyBiZSBncmFudGVkIGEgd2lzaCwgYSBjcmVhdHVyZSB3aXRoaW4gNjAgZmVldCBvZiB0aGUgZ2VuaWUgc3RhdGVzIGEgZGVzaXJlZCBlZmZlY3QgdG8gaXQuIFRoZSBnZW5pZSBjYW4gdGhlbiBjYXN0IHRoZSB3aXNoIHNwZWxsIG9uIHRoZSBjcmVhdHVyZSdzIGJlaGFsZiB0byBicmluZyBhYm91dCB0aGUgZWZmZWN0LiBEZXBlbmRpbmcgb24gdGhlIGdlbmllJ3MgbmF0dXJlLCB0aGUgZ2VuaWUgbWlnaHQgdHJ5IHRvIHBlcnZlcnQgdGhlIGludGVudCBvZiB0aGUgd2lzaCBieSBleHBsb2l0aW5nIHRoZSB3aXNoJ3MgcG9vciB3b3JkaW5nLiBUaGUgcGVydmVyc2lvbiBvZiB0aGUgd29yZGluZyBpcyB1c3VhbGx5IGNyYWZ0ZWQgdG8gYmUgdG8gdGhlIGdlbmllJ3MgYmVuZWZpdC5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBkamlubmkgbWFrZXMgdGhyZWUgc2NpbWl0YXIgYXR0YWNrcy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJTY2ltaXRhclwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzkgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxMiAoMmQ2ICsgNSkgc2xhc2hpbmcgZGFtYWdlIHBsdXMgMyAoMWQ2KSBsaWdodG5pbmcgb3IgdGh1bmRlciBkYW1hZ2UgKGRqaW5uaSdzIGNob2ljZSkuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA5LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjJkNiArIDFkNlwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogNVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkNyZWF0ZSBXaGlybHdpbmRcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIkEgNS1mb290LXJhZGl1cywgMzAtZm9vdC10YWxsIGN5bGluZGVyIG9mIHN3aXJsaW5nIGFpciBtYWdpY2FsbHkgZm9ybXMgb24gYSBwb2ludCB0aGUgZGppbm5pIGNhbiBzZWUgd2l0aGluIDEyMCBmZWV0IG9mIGl0LiBUaGUgd2hpcmx3aW5kIGxhc3RzIGFzIGxvbmcgYXMgdGhlIGRqaW5uaSBtYWludGFpbnMgY29uY2VudHJhdGlvbiAoYXMgaWYgY29uY2VudHJhdGluZyBvbiBhIHNwZWxsKS4gQW55IGNyZWF0dXJlIGJ1dCB0aGUgZGppbm5pIHRoYXQgZW50ZXJzIHRoZSB3aGlybHdpbmQgbXVzdCBzdWNjZWVkIG9uIGEgREMgMTggU3RyZW5ndGggc2F2aW5nIHRocm93IG9yIGJlIHJlc3RyYWluZWQgYnkgaXQuIFRoZSBkamlubmkgY2FuIG1vdmUgdGhlIHdoaXJsd2luZCB1cCB0byA2MCBmZWV0IGFzIGFuIGFjdGlvbiwgYW5kIGNyZWF0dXJlcyByZXN0cmFpbmVkIGJ5IHRoZSB3aGlybHdpbmQgbW92ZSB3aXRoIGl0LiBUaGUgd2hpcmx3aW5kIGVuZHMgaWYgdGhlIGRqaW5uaSBsb3NlcyBzaWdodCBvZiBpdC5cXFxcbkEgY3JlYXR1cmUgY2FuIHVzZSBpdHMgYWN0aW9uIHRvIGZyZWUgYSBjcmVhdHVyZSByZXN0cmFpbmVkIGJ5IHRoZSB3aGlybHdpbmQsIGluY2x1ZGluZyBpdHNlbGYsIGJ5IHN1Y2NlZWRpbmcgb24gYSBEQyAxOCBTdHJlbmd0aCBjaGVjay4gSWYgdGhlIGNoZWNrIHN1Y2NlZWRzLCB0aGUgY3JlYXR1cmUgaXMgbm8gbG9uZ2VyIHJlc3RyYWluZWQgYW5kIG1vdmVzIHRvIHRoZSBuZWFyZXN0IHNwYWNlIG91dHNpZGUgdGhlIHdoaXJsd2luZC5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIkRvcHBlbGdhbmdlclwiLFxuICAgICAgICBzaXplOiBcIk1lZGl1bVwiLFxuICAgICAgICB0eXBlOiBcIm1vbnN0cm9zaXR5XCIsXG4gICAgICAgIHN1YnR5cGU6IFwic2hhcGVjaGFuZ2VyXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcbiAgICAgICAgYWM6IDE0LFxuICAgICAgICBocDogNTIsXG4gICAgICAgIGhpdF9kaWNlOiBcIjhkOCArIDE2XCIsXG4gICAgICAgIHNwZWVkOiBcIjMwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzExLCAxOCwgMTQsIDExLCAxMiwgMTRdLFxuICAgICAgICBza2lsbHNhdmVzOiBbeyBkZWNlcHRpb246IDYgfSwgeyBpbnNpZ2h0OiAzIH1dLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcImNoYXJtZWRcIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIHNlbnNlczogXCJkYXJrdmlzaW9uIDYwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDExXCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJDb21tb25cIixcbiAgICAgICAgY3I6IFwiM1wiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlNoYXBlY2hhbmdlclwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGRvcHBlbGdhbmdlciBjYW4gdXNlIGl0cyBhY3Rpb24gdG8gcG9seW1vcnBoIGludG8gYSBTbWFsbCBvciBNZWRpdW0gaHVtYW5vaWQgaXQgaGFzIHNlZW4sIG9yIGJhY2sgaW50byBpdHMgdHJ1ZSBmb3JtLiBJdHMgc3RhdGlzdGljcywgb3RoZXIgdGhhbiBpdHMgc2l6ZSwgYXJlIHRoZSBzYW1lIGluIGVhY2ggZm9ybS4gQW55IGVxdWlwbWVudCBpdCBpcyB3ZWFyaW5nIG9yIGNhcnJ5aW5nIGlzbid0IHRyYW5zZm9ybWVkLiBJdCByZXZlcnRzIHRvIGl0cyB0cnVlIGZvcm0gaWYgaXQgZGllcy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJBbWJ1c2hlclwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGRvcHBlbGdhbmdlciBoYXMgYWR2YW50YWdlIG9uIGF0dGFjayByb2xscyBhZ2FpbnN0IGFueSBjcmVhdHVyZSBpdCBoYXMgc3VycHJpc2VkLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlN1cnByaXNlIEF0dGFja1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiSWYgdGhlIGRvcHBlbGdhbmdlciBzdXJwcmlzZXMgYSBjcmVhdHVyZSBhbmQgaGl0cyBpdCB3aXRoIGFuIGF0dGFjayBkdXJpbmcgdGhlIGZpcnN0IHJvdW5kIG9mIGNvbWJhdCwgdGhlIHRhcmdldCB0YWtlcyBhbiBleHRyYSAxMCAoM2Q2KSBkYW1hZ2UgZnJvbSB0aGUgYXR0YWNrLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIzZDZcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJNdWx0aWF0dGFja1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGRvcHBlbGdhbmdlciBtYWtlcyB0d28gbWVsZWUgYXR0YWNrcy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJTbGFtXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNiB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDcgKDFkNiArIDQpIGJsdWRnZW9uaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDYsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMWQ2XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiA0XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiUmVhZCBUaG91Z2h0c1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGRvcHBlbGdhbmdlciBtYWdpY2FsbHkgcmVhZHMgdGhlIHN1cmZhY2UgdGhvdWdodHMgb2Ygb25lIGNyZWF0dXJlIHdpdGhpbiA2MCBmdC4gb2YgaXQuIFRoZSBlZmZlY3QgY2FuIHBlbmV0cmF0ZSBiYXJyaWVycywgYnV0IDMgZnQuIG9mIHdvb2Qgb3IgZGlydCwgMiBmdC4gb2Ygc3RvbmUsIDIgaW5jaGVzIG9mIG1ldGFsLCBvciBhIHRoaW4gc2hlZXQgb2YgbGVhZCBibG9ja3MgaXQuIFdoaWxlIHRoZSB0YXJnZXQgaXMgaW4gcmFuZ2UsIHRoZSBkb3BwZWxnYW5nZXIgY2FuIGNvbnRpbnVlIHJlYWRpbmcgaXRzIHRob3VnaHRzLCBhcyBsb25nIGFzIHRoZSBkb3BwZWxnYW5nZXIncyBjb25jZW50cmF0aW9uIGlzbid0IGJyb2tlbiAoYXMgaWYgY29uY2VudHJhdGluZyBvbiBhIHNwZWxsKS4gV2hpbGUgcmVhZGluZyB0aGUgdGFyZ2V0J3MgbWluZCwgdGhlIGRvcHBlbGdhbmdlciBoYXMgYWR2YW50YWdlIG9uIFdpc2RvbSAoSW5zaWdodCkgYW5kIENoYXJpc21hIChEZWNlcHRpb24sIEludGltaWRhdGlvbiwgYW5kIFBlcnN1YXNpb24pIGNoZWNrcyBhZ2FpbnN0IHRoZSB0YXJnZXQuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJEcmFmdCBIb3JzZVwiLFxuICAgICAgICBzaXplOiBcIkxhcmdlXCIsXG4gICAgICAgIHR5cGU6IFwiYmVhc3RcIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcInVuYWxpZ25lZFwiLFxuICAgICAgICBhYzogMTAsXG4gICAgICAgIGhwOiAxOSxcbiAgICAgICAgaGl0X2RpY2U6IFwiM2QxMCArIDJcIixcbiAgICAgICAgc3BlZWQ6IFwiNDAgZnQuXCIsXG4gICAgICAgIHN0YXRzOiBbMTgsIDEwLCAxMiwgMiwgMTEsIDddLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcbiAgICAgICAgc2Vuc2VzOiBcInBhc3NpdmUgUGVyY2VwdGlvbiAxMFwiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiXCIsXG4gICAgICAgIGNyOiBcIjEvNFwiLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJIb292ZXNcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs2IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogOSAoMmQ0ICsgNCkgYmx1ZGdlb25pbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIyZDRcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDRcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIkRyYWdvbiBUdXJ0bGVcIixcbiAgICAgICAgc2l6ZTogXCJHYXJnYW50dWFuXCIsXG4gICAgICAgIHR5cGU6IFwiZHJhZ29uXCIsXG4gICAgICAgIHN1YnR5cGU6IFwiXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJuZXV0cmFsXCIsXG4gICAgICAgIGFjOiAyMCxcbiAgICAgICAgaHA6IDM0MSxcbiAgICAgICAgaGl0X2RpY2U6IFwiMjJkMjAgKyAxMTBcIixcbiAgICAgICAgc3BlZWQ6IFwiMjAgZnQuLCBzd2ltIDQwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzI1LCAxMCwgMjAsIDEwLCAxMiwgMTJdLFxuICAgICAgICBzYXZlczogW3sgZGV4dGVyaXR5OiA2IH0sIHsgY29uc3RpdHV0aW9uOiAxMSB9LCB7IHdpc2RvbTogNyB9XSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOiBcImZpcmVcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBzZW5zZXM6IFwiZGFya3Zpc2lvbiAxMjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTFcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcIkFxdWFuLCBEcmFjb25pY1wiLFxuICAgICAgICBjcjogXCIxN1wiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkFtcGhpYmlvdXNcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBkcmFnb24gdHVydGxlIGNhbiBicmVhdGhlIGFpciBhbmQgd2F0ZXIuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZHJhZ29uIHR1cnRsZSBtYWtlcyB0aHJlZSBhdHRhY2tzOiBvbmUgd2l0aCBpdHMgYml0ZSBhbmQgdHdvIHdpdGggaXRzIGNsYXdzLiBJdCBjYW4gbWFrZSBvbmUgdGFpbCBhdHRhY2sgaW4gcGxhY2Ugb2YgaXRzIHR3byBjbGF3IGF0dGFja3MuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQml0ZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzEzIHRvIGhpdCwgcmVhY2ggMTUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDI2ICgzZDEyICsgNykgcGllcmNpbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMTMsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiM2QxMlwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogN1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkNsYXdcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICsxMyB0byBoaXQsIHJlYWNoIDEwIGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxNiAoMmQ4ICsgNykgc2xhc2hpbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMTMsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMmQ4XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiA3XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiVGFpbFwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzEzIHRvIGhpdCwgcmVhY2ggMTUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDI2ICgzZDEyICsgNykgYmx1ZGdlb25pbmcgZGFtYWdlLiBJZiB0aGUgdGFyZ2V0IGlzIGEgY3JlYXR1cmUsIGl0IG11c3Qgc3VjY2VlZCBvbiBhIERDIDIwIFN0cmVuZ3RoIHNhdmluZyB0aHJvdyBvciBiZSBwdXNoZWQgdXAgdG8gMTAgZmVldCBhd2F5IGZyb20gdGhlIGRyYWdvbiB0dXJ0bGUgYW5kIGtub2NrZWQgcHJvbmUuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAxMyxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIzZDEyXCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiA3XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RlYW0gQnJlYXRoIChSZWNoYXJnZSA1LTYpXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZHJhZ29uIHR1cnRsZSBleGhhbGVzIHNjYWxkaW5nIHN0ZWFtIGluIGEgNjAtZm9vdCBjb25lLiBFYWNoIGNyZWF0dXJlIGluIHRoYXQgYXJlYSBtdXN0IG1ha2UgYSBEQyAxOCBDb25zdGl0dXRpb24gc2F2aW5nIHRocm93LCB0YWtpbmcgNTIgKDE1ZDYpIGZpcmUgZGFtYWdlIG9uIGEgZmFpbGVkIHNhdmUsIG9yIGhhbGYgYXMgbXVjaCBkYW1hZ2Ugb24gYSBzdWNjZXNzZnVsIG9uZS4gQmVpbmcgdW5kZXJ3YXRlciBkb2Vzbid0IGdyYW50IHJlc2lzdGFuY2UgYWdhaW5zdCB0aGlzIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDAsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMTVkNlwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJEcmV0Y2hcIixcbiAgICAgICAgc2l6ZTogXCJTbWFsbFwiLFxuICAgICAgICB0eXBlOiBcImZpZW5kXCIsXG4gICAgICAgIHN1YnR5cGU6IFwiZGVtb25cIixcbiAgICAgICAgYWxpZ25tZW50OiBcImNoYW90aWMgZXZpbFwiLFxuICAgICAgICBhYzogMTEsXG4gICAgICAgIGhwOiAxOCxcbiAgICAgICAgaGl0X2RpY2U6IFwiNGQ2ICsgNFwiLFxuICAgICAgICBzcGVlZDogXCIyMCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsxMSwgMTEsIDEyLCA1LCA4LCAzXSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOiBcImNvbGQsIGZpcmUsIGxpZ2h0bmluZ1wiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczogXCJwb2lzb25cIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwicG9pc29uZWRcIixcbiAgICAgICAgc2Vuc2VzOiBcImRhcmt2aXNpb24gNjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gOVwiLFxuICAgICAgICBsYW5ndWFnZXM6XG4gICAgICAgICAgICBcIkFieXNzYWwsIHRlbGVwYXRoeSA2MCBmdC4gKHdvcmtzIG9ubHkgd2l0aCBjcmVhdHVyZXMgdGhhdCB1bmRlcnN0YW5kIEFieXNzYWwpXCIsXG4gICAgICAgIGNyOiBcIjEvNFwiLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJNdWx0aWF0dGFja1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGRyZXRjaCBtYWtlcyB0d28gYXR0YWNrczogb25lIHdpdGggaXRzIGJpdGUgYW5kIG9uZSB3aXRoIGl0cyBjbGF3cy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJCaXRlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMiB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDMgKDFkNikgcGllcmNpbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIxZDZcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkNsYXdzXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMiB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDUgKDJkNCkgc2xhc2hpbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIyZDRcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkZldGlkIENsb3VkICgxL0RheSlcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIkEgMTAtZm9vdCByYWRpdXMgb2YgZGlzZ3VzdGluZyBncmVlbiBnYXMgZXh0ZW5kcyBvdXQgZnJvbSB0aGUgZHJldGNoLiBUaGUgZ2FzIHNwcmVhZHMgYXJvdW5kIGNvcm5lcnMsIGFuZCBpdHMgYXJlYSBpcyBsaWdodGx5IG9ic2N1cmVkLiBJdCBsYXN0cyBmb3IgMSBtaW51dGUgb3IgdW50aWwgYSBzdHJvbmcgd2luZCBkaXNwZXJzZXMgaXQuIEFueSBjcmVhdHVyZSB0aGF0IHN0YXJ0cyBpdHMgdHVybiBpbiB0aGF0IGFyZWEgbXVzdCBzdWNjZWVkIG9uIGEgREMgMTEgQ29uc3RpdHV0aW9uIHNhdmluZyB0aHJvdyBvciBiZSBwb2lzb25lZCB1bnRpbCB0aGUgc3RhcnQgb2YgaXRzIG5leHQgdHVybi4gV2hpbGUgcG9pc29uZWQgaW4gdGhpcyB3YXksIHRoZSB0YXJnZXQgY2FuIHRha2UgZWl0aGVyIGFuIGFjdGlvbiBvciBhIGJvbnVzIGFjdGlvbiBvbiBpdHMgdHVybiwgbm90IGJvdGgsIGFuZCBjYW4ndCB0YWtlIHJlYWN0aW9ucy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIkRyaWRlclwiLFxuICAgICAgICBzaXplOiBcIkxhcmdlXCIsXG4gICAgICAgIHR5cGU6IFwibW9uc3Ryb3NpdHlcIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcImNoYW90aWMgZXZpbFwiLFxuICAgICAgICBhYzogMTksXG4gICAgICAgIGhwOiAxMjMsXG4gICAgICAgIGhpdF9kaWNlOiBcIjEzZDEwICsgNTFcIixcbiAgICAgICAgc3BlZWQ6IFwiMzAgZnQuLCBjbGltYiAzMCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsxNiwgMTYsIDE4LCAxMywgMTQsIDEyXSxcbiAgICAgICAgc2tpbGxzYXZlczogW3sgcGVyY2VwdGlvbjogNSB9LCB7IHN0ZWFsdGg6IDkgfV0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBzZW5zZXM6IFwiZGFya3Zpc2lvbiAxMjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTVcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcIkVsdmlzaCwgVW5kZXJjb21tb25cIixcbiAgICAgICAgY3I6IFwiNlwiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkZleSBBbmNlc3RyeVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGRyaWRlciBoYXMgYWR2YW50YWdlIG9uIHNhdmluZyB0aHJvd3MgYWdhaW5zdCBiZWluZyBjaGFybWVkLCBhbmQgbWFnaWMgY2FuJ3QgcHV0IHRoZSBkcmlkZXIgdG8gc2xlZXAuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiSW5uYXRlIFNwZWxsY2FzdGluZ1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGRyaWRlcidzIGlubmF0ZSBzcGVsbGNhc3RpbmcgYWJpbGl0eSBpcyBXaXNkb20gKHNwZWxsIHNhdmUgREMgMTMpLiBUaGUgZHJpZGVyIGNhbiBpbm5hdGVseSBjYXN0IHRoZSBmb2xsb3dpbmcgc3BlbGxzLCByZXF1aXJpbmcgbm8gbWF0ZXJpYWwgY29tcG9uZW50czpcXFxcbkF0IHdpbGw6IGRhbmNpbmcgbGlnaHRzXFxcXG4xL2RheSBlYWNoOiBkYXJrbmVzcywgZmFlcmllIGZpcmVcIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJTcGlkZXIgQ2xpbWJcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBkcmlkZXIgY2FuIGNsaW1iIGRpZmZpY3VsdCBzdXJmYWNlcywgaW5jbHVkaW5nIHVwc2lkZSBkb3duIG9uIGNlaWxpbmdzLCB3aXRob3V0IG5lZWRpbmcgdG8gbWFrZSBhbiBhYmlsaXR5IGNoZWNrLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlN1bmxpZ2h0IFNlbnNpdGl2aXR5XCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJXaGlsZSBpbiBzdW5saWdodCwgdGhlIGRyaWRlciBoYXMgZGlzYWR2YW50YWdlIG9uIGF0dGFjayByb2xscywgYXMgd2VsbCBhcyBvbiBXaXNkb20gKFBlcmNlcHRpb24pIGNoZWNrcyB0aGF0IHJlbHkgb24gc2lnaHQuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiV2ViIFdhbGtlclwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGRyaWRlciBpZ25vcmVzIG1vdmVtZW50IHJlc3RyaWN0aW9ucyBjYXVzZWQgYnkgd2ViYmluZy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBkcmlkZXIgbWFrZXMgdGhyZWUgYXR0YWNrcywgZWl0aGVyIHdpdGggaXRzIGxvbmdzd29yZCBvciBpdHMgbG9uZ2Jvdy4gSXQgY2FuIHJlcGxhY2Ugb25lIG9mIHRob3NlIGF0dGFja3Mgd2l0aCBhIGJpdGUgYXR0YWNrLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkJpdGVcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs2IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSBjcmVhdHVyZS4gSGl0OiAyICgxZDQpIHBpZXJjaW5nIGRhbWFnZSBwbHVzIDkgKDJkOCkgcG9pc29uIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDYsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMWQ0XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiAyXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTG9uZ3N3b3JkXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNiB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDcgKDFkOCArIDMpIHNsYXNoaW5nIGRhbWFnZSwgb3IgOCAoMWQxMCArIDMpIHNsYXNoaW5nIGRhbWFnZSBpZiB1c2VkIHdpdGggdHdvIGhhbmRzLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIxZDhcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDNcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJMb25nYm93XCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJSYW5nZWQgV2VhcG9uIEF0dGFjazogKzYgdG8gaGl0LCByYW5nZSAxNTAvNjAwIGZ0Liwgb25lIHRhcmdldC4gSGl0OiA3ICgxZDggKyAzKSBwaWVyY2luZyBkYW1hZ2UgcGx1cyA0ICgxZDgpIHBvaXNvbiBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA2LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjFkOFwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogM1xuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiRHJvd1wiLFxuICAgICAgICBzaXplOiBcIk1lZGl1bVwiLFxuICAgICAgICB0eXBlOiBcImh1bWFub2lkXCIsXG4gICAgICAgIHN1YnR5cGU6IFwiZWxmXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJuZXV0cmFsIGV2aWxcIixcbiAgICAgICAgYWM6IDE1LFxuICAgICAgICBocDogMTMsXG4gICAgICAgIGhpdF9kaWNlOiBcIjNkOCArIC0xXCIsXG4gICAgICAgIHNwZWVkOiBcIjMwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzEwLCAxNCwgMTAsIDExLCAxMSwgMTJdLFxuICAgICAgICBza2lsbHNhdmVzOiBbeyBwZXJjZXB0aW9uOiAyIH0sIHsgc3RlYWx0aDogNCB9XSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIHNlbnNlczogXCJkYXJrdmlzaW9uIDEyMCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxMlwiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiRWx2aXNoLCBVbmRlcmNvbW1vblwiLFxuICAgICAgICBjcjogXCIxLzRcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJGZXkgQW5jZXN0cnlcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBkcm93IGhhcyBhZHZhbnRhZ2Ugb24gc2F2aW5nIHRocm93cyBhZ2FpbnN0IGJlaW5nIGNoYXJtZWQsIGFuZCBtYWdpYyBjYW4ndCBwdXQgdGhlIGRyb3cgdG8gc2xlZXAuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiSW5uYXRlIFNwZWxsY2FzdGluZ1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGRyb3cncyBzcGVsbGNhc3RpbmcgYWJpbGl0eSBpcyBDaGFyaXNtYSAoc3BlbGwgc2F2ZSBEQyAxMSkuIEl0IGNhbiBpbm5hdGVseSBjYXN0IHRoZSBmb2xsb3dpbmcgc3BlbGxzLCByZXF1aXJpbmcgbm8gbWF0ZXJpYWwgY29tcG9uZW50czpcXFxcbkF0IHdpbGw6IGRhbmNpbmcgbGlnaHRzXFxcXG4xL2RheSBlYWNoOiBkYXJrbmVzcywgZmFlcmllIGZpcmVcIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJTdW5saWdodCBTZW5zaXRpdml0eVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiV2hpbGUgaW4gc3VubGlnaHQsIHRoZSBkcm93IGhhcyBkaXNhZHZhbnRhZ2Ugb24gYXR0YWNrIHJvbGxzLCBhcyB3ZWxsIGFzIG9uIFdpc2RvbSAoUGVyY2VwdGlvbikgY2hlY2tzIHRoYXQgcmVseSBvbiBzaWdodC5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiU2hvcnRzd29yZFwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzQgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiA1ICgxZDYgKyAyKSBwaWVyY2luZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA0LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjFkNlwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogMlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkhhbmQgQ3Jvc3Nib3dcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlJhbmdlZCBXZWFwb24gQXR0YWNrOiArNCB0byBoaXQsIHJhbmdlIDMwLzEyMCBmdC4sIG9uZSB0YXJnZXQuIEhpdDogNSAoMWQ2ICsgMikgcGllcmNpbmcgZGFtYWdlLCBhbmQgdGhlIHRhcmdldCBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxMyBDb25zdGl0dXRpb24gc2F2aW5nIHRocm93IG9yIGJlIHBvaXNvbmVkIGZvciAxIGhvdXIuIElmIHRoZSBzYXZpbmcgdGhyb3cgZmFpbHMgYnkgNSBvciBtb3JlLCB0aGUgdGFyZ2V0IGlzIGFsc28gdW5jb25zY2lvdXMgd2hpbGUgcG9pc29uZWQgaW4gdGhpcyB3YXkuIFRoZSB0YXJnZXQgd2FrZXMgdXAgaWYgaXQgdGFrZXMgZGFtYWdlIG9yIGlmIGFub3RoZXIgY3JlYXR1cmUgdGFrZXMgYW4gYWN0aW9uIHRvIHNoYWtlIGl0IGF3YWtlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIxZDZcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIkRydWlkXCIsXG4gICAgICAgIHNpemU6IFwiTWVkaXVtXCIsXG4gICAgICAgIHR5cGU6IFwiaHVtYW5vaWRcIixcbiAgICAgICAgc3VidHlwZTogXCJhbnkgcmFjZVwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwiYW55IGFsaWdubWVudFwiLFxuICAgICAgICBhYzogMTEsXG4gICAgICAgIGhwOiAyNyxcbiAgICAgICAgaGl0X2RpY2U6IFwiNWQ4ICsgNFwiLFxuICAgICAgICBzcGVlZDogXCIzMCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsxMCwgMTIsIDEzLCAxMiwgMTUsIDExXSxcbiAgICAgICAgc2tpbGxzYXZlczogW3sgbmF0dXJlOiAzIH0sIHsgbWVkaWNpbmU6IDQgfSwgeyBwZXJjZXB0aW9uOiA0IH1dLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcbiAgICAgICAgc2Vuc2VzOiBcInBhc3NpdmUgUGVyY2VwdGlvbiAxNFwiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiRHJ1aWRpYyBwbHVzIGFueSB0d28gbGFuZ3VhZ2VzXCIsXG4gICAgICAgIGNyOiBcIjJcIixcbiAgICAgICAgdHJhaXRzOiBbXSxcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiUXVhcnRlcnN0YWZmXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMiB0byBoaXQgKCs0IHRvIGhpdCB3aXRoIHNoaWxsZWxhZ2gpLCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAzICgxZDYpIGJsdWRnZW9uaW5nIGRhbWFnZSwgb3IgNiAoMWQ4ICsgMikgYmx1ZGdlb25pbmcgZGFtYWdlIHdpdGggc2hpbGxlbGFnaCBvciBpZiB3aWVsZGVkIHdpdGggdHdvIGhhbmRzLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIxZDZcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBzcGVsbHM6IFtcbiAgICAgICAgICAgIFwiVGhlIGRydWlkIGlzIGEgNHRoLWxldmVsIHNwZWxsY2FzdGVyLiBJdHMgc3BlbGxjYXN0aW5nIGFiaWxpdHkgaXMgV2lzZG9tIChzcGVsbCBzYXZlIERDIDEyLCArNCB0byBoaXQgd2l0aCBzcGVsbCBhdHRhY2tzKS4gSXQgaGFzIHRoZSBmb2xsb3dpbmcgZHJ1aWQgc3BlbGxzIHByZXBhcmVkOlwiLFxuICAgICAgICAgICAgeyBcIkNhbnRyaXBzIChhdCB3aWxsKVwiOiBcImRydWlkY3JhZnQsIHByb2R1Y2UgZmxhbWUsIHNoaWxsZWxhZ2hcIiB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwiMXN0IGxldmVsICg0IHNsb3RzKVwiOlxuICAgICAgICAgICAgICAgICAgICBcImVudGFuZ2xlLCBsb25nc3RyaWRlciwgc3BlYWsgd2l0aCBhbmltYWxzLCB0aHVuZGVyd2F2ZVwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeyBcIjJuZCBsZXZlbCAoMyBzbG90cylcIjogXCJhbmltYWwgbWVzc2VuZ2VyLCBiYXJrc2tpblwiIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIkRyeWFkXCIsXG4gICAgICAgIHNpemU6IFwiTWVkaXVtXCIsXG4gICAgICAgIHR5cGU6IFwiZmV5XCIsXG4gICAgICAgIHN1YnR5cGU6IFwiXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJuZXV0cmFsXCIsXG4gICAgICAgIGFjOiAxMSxcbiAgICAgICAgaHA6IDIyLFxuICAgICAgICBoaXRfZGljZTogXCI1ZDggKyAtMVwiLFxuICAgICAgICBzcGVlZDogXCIzMCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsxMCwgMTIsIDExLCAxNCwgMTUsIDE4XSxcbiAgICAgICAgc2tpbGxzYXZlczogW3sgcGVyY2VwdGlvbjogNCB9LCB7IHN0ZWFsdGg6IDUgfV0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBzZW5zZXM6IFwiZGFya3Zpc2lvbiA2MCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxNFwiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiRWx2aXNoLCBTeWx2YW5cIixcbiAgICAgICAgY3I6IFwiMVwiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIklubmF0ZSBTcGVsbGNhc3RpbmdcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBkcnlhZCdzIGlubmF0ZSBzcGVsbGNhc3RpbmcgYWJpbGl0eSBpcyBDaGFyaXNtYSAoc3BlbGwgc2F2ZSBEQyAxNCkuIFRoZSBkcnlhZCBjYW4gaW5uYXRlbHkgY2FzdCB0aGUgZm9sbG93aW5nIHNwZWxscywgcmVxdWlyaW5nIG5vIG1hdGVyaWFsIGNvbXBvbmVudHM6XFxcXG5cXFxcbkF0IHdpbGw6IGRydWlkY3JhZnRcXFxcbjMvZGF5IGVhY2g6IGVudGFuZ2xlLCBnb29kYmVycnlcXFxcbjEvZGF5IGVhY2g6IGJhcmtza2luLCBwYXNzIHdpdGhvdXQgdHJhY2UsIHNoaWxsZWxhZ2hcIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJNYWdpYyBSZXNpc3RhbmNlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZHJ5YWQgaGFzIGFkdmFudGFnZSBvbiBzYXZpbmcgdGhyb3dzIGFnYWluc3Qgc3BlbGxzIGFuZCBvdGhlciBtYWdpY2FsIGVmZmVjdHMuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiU3BlYWsgd2l0aCBCZWFzdHMgYW5kIFBsYW50c1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGRyeWFkIGNhbiBjb21tdW5pY2F0ZSB3aXRoIGJlYXN0cyBhbmQgcGxhbnRzIGFzIGlmIHRoZXkgc2hhcmVkIGEgbGFuZ3VhZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiVHJlZSBTdHJpZGVcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk9uY2Ugb24gaGVyIHR1cm4sIHRoZSBkcnlhZCBjYW4gdXNlIDEwIGZ0LiBvZiBoZXIgbW92ZW1lbnQgdG8gc3RlcCBtYWdpY2FsbHkgaW50byBvbmUgbGl2aW5nIHRyZWUgd2l0aGluIGhlciByZWFjaCBhbmQgZW1lcmdlIGZyb20gYSBzZWNvbmQgbGl2aW5nIHRyZWUgd2l0aGluIDYwIGZ0LiBvZiB0aGUgZmlyc3QgdHJlZSwgYXBwZWFyaW5nIGluIGFuIHVub2NjdXBpZWQgc3BhY2Ugd2l0aGluIDUgZnQuIG9mIHRoZSBzZWNvbmQgdHJlZS4gQm90aCB0cmVlcyBtdXN0IGJlIGxhcmdlIG9yIGJpZ2dlci5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQ2x1YlwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzIgdG8gaGl0ICgrNiB0byBoaXQgd2l0aCBzaGlsbGVsYWdoKSwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMiAoMSBkNCkgYmx1ZGdlb25pbmcgZGFtYWdlLCBvciA4ICgxZDggKyA0KSBibHVkZ2VvbmluZyBkYW1hZ2Ugd2l0aCBzaGlsbGVsYWdoLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIxZDRcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkZleSBDaGFybVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGRyeWFkIHRhcmdldHMgb25lIGh1bWFub2lkIG9yIGJlYXN0IHRoYXQgc2hlIGNhbiBzZWUgd2l0aGluIDMwIGZlZXQgb2YgaGVyLiBJZiB0aGUgdGFyZ2V0IGNhbiBzZWUgdGhlIGRyeWFkLCBpdCBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxNCBXaXNkb20gc2F2aW5nIHRocm93IG9yIGJlIG1hZ2ljYWxseSBjaGFybWVkLiBUaGUgY2hhcm1lZCBjcmVhdHVyZSByZWdhcmRzIHRoZSBkcnlhZCBhcyBhIHRydXN0ZWQgZnJpZW5kIHRvIGJlIGhlZWRlZCBhbmQgcHJvdGVjdGVkLiBBbHRob3VnaCB0aGUgdGFyZ2V0IGlzbid0IHVuZGVyIHRoZSBkcnlhZCdzIGNvbnRyb2wsIGl0IHRha2VzIHRoZSBkcnlhZCdzIHJlcXVlc3RzIG9yIGFjdGlvbnMgaW4gdGhlIG1vc3QgZmF2b3JhYmxlIHdheSBpdCBjYW4uXFxcXG5FYWNoIHRpbWUgdGhlIGRyeWFkIG9yIGl0cyBhbGxpZXMgZG8gYW55dGhpbmcgaGFybWZ1bCB0byB0aGUgdGFyZ2V0LCBpdCBjYW4gcmVwZWF0IHRoZSBzYXZpbmcgdGhyb3csIGVuZGluZyB0aGUgZWZmZWN0IG9uIGl0c2VsZiBvbiBhIHN1Y2Nlc3MuIE90aGVyd2lzZSwgdGhlIGVmZmVjdCBsYXN0cyAyNCBob3VycyBvciB1bnRpbCB0aGUgZHJ5YWQgZGllcywgaXMgb24gYSBkaWZmZXJlbnQgcGxhbmUgb2YgZXhpc3RlbmNlIGZyb20gdGhlIHRhcmdldCwgb3IgZW5kcyB0aGUgZWZmZWN0IGFzIGEgYm9udXMgYWN0aW9uLiBJZiBhIHRhcmdldCdzIHNhdmluZyB0aHJvdyBpcyBzdWNjZXNzZnVsLCB0aGUgdGFyZ2V0IGlzIGltbXVuZSB0byB0aGUgZHJ5YWQncyBGZXkgQ2hhcm0gZm9yIHRoZSBuZXh0IDI0IGhvdXJzLlxcXFxuVGhlIGRyeWFkIGNhbiBoYXZlIG5vIG1vcmUgdGhhbiBvbmUgaHVtYW5vaWQgYW5kIHVwIHRvIHRocmVlIGJlYXN0cyBjaGFybWVkIGF0IGEgdGltZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIkR1ZXJnYXJcIixcbiAgICAgICAgc2l6ZTogXCJNZWRpdW1cIixcbiAgICAgICAgdHlwZTogXCJodW1hbm9pZFwiLFxuICAgICAgICBzdWJ0eXBlOiBcImR3YXJmXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJsYXdmdWwgZXZpbFwiLFxuICAgICAgICBhYzogMTYsXG4gICAgICAgIGhwOiAyNixcbiAgICAgICAgaGl0X2RpY2U6IFwiNGQ4ICsgOFwiLFxuICAgICAgICBzcGVlZDogXCIyNSBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsxNCwgMTEsIDE0LCAxMSwgMTAsIDldLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwicG9pc29uXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcbiAgICAgICAgc2Vuc2VzOiBcImRhcmt2aXNpb24gMTIwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDEwXCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJEd2FydmlzaCwgVW5kZXJjb21tb25cIixcbiAgICAgICAgY3I6IFwiMVwiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkR1ZXJnYXIgUmVzaWxpZW5jZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGR1ZXJnYXIgaGFzIGFkdmFudGFnZSBvbiBzYXZpbmcgdGhyb3dzIGFnYWluc3QgcG9pc29uLCBzcGVsbHMsIGFuZCBpbGx1c2lvbnMsIGFzIHdlbGwgYXMgdG8gcmVzaXN0IGJlaW5nIGNoYXJtZWQgb3IgcGFyYWx5emVkLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlN1bmxpZ2h0IFNlbnNpdGl2aXR5XCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJXaGlsZSBpbiBzdW5saWdodCwgdGhlIGR1ZXJnYXIgaGFzIGRpc2FkdmFudGFnZSBvbiBhdHRhY2sgcm9sbHMsIGFzIHdlbGwgYXMgb24gV2lzZG9tIChQZXJjZXB0aW9uKSBjaGVja3MgdGhhdCByZWx5IG9uIHNpZ2h0LlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJFbmxhcmdlIChSZWNoYXJnZXMgYWZ0ZXIgYSBTaG9ydCBvciBMb25nIFJlc3QpXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJGb3IgMSBtaW51dGUsIHRoZSBkdWVyZ2FyIG1hZ2ljYWxseSBpbmNyZWFzZXMgaW4gc2l6ZSwgYWxvbmcgd2l0aCBhbnl0aGluZyBpdCBpcyB3ZWFyaW5nIG9yIGNhcnJ5aW5nLiBXaGlsZSBlbmxhcmdlZCwgdGhlIGR1ZXJnYXIgaXMgTGFyZ2UsIGRvdWJsZXMgaXRzIGRhbWFnZSBkaWNlIG9uIFN0cmVuZ3RoLWJhc2VkIHdlYXBvbiBhdHRhY2tzIChpbmNsdWRlZCBpbiB0aGUgYXR0YWNrcyksIGFuZCBtYWtlcyBTdHJlbmd0aCBjaGVja3MgYW5kIFN0cmVuZ3RoIHNhdmluZyB0aHJvd3Mgd2l0aCBhZHZhbnRhZ2UuIElmIHRoZSBkdWVyZ2FyIGxhY2tzIHRoZSByb29tIHRvIGJlY29tZSBMYXJnZSwgaXQgYXR0YWlucyB0aGUgbWF4aW11bSBzaXplIHBvc3NpYmxlIGluIHRoZSBzcGFjZSBhdmFpbGFibGUuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiV2FyIFBpY2tcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs0IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogNiAoMWQ4ICsgMikgcGllcmNpbmcgZGFtYWdlLCBvciAxMSAoMmQ4ICsgMikgcGllcmNpbmcgZGFtYWdlIHdoaWxlIGVubGFyZ2VkLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIxZDhcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJKYXZlbGluXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBvciBSYW5nZWQgV2VhcG9uIEF0dGFjazogKzQgdG8gaGl0LCByZWFjaCA1IGZ0LiBvciByYW5nZSAzMC8xMjAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDUgKDFkNiArIDIpIHBpZXJjaW5nIGRhbWFnZSwgb3IgOSAoMmQ2ICsgMikgcGllcmNpbmcgZGFtYWdlIHdoaWxlIGVubGFyZ2VkLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIxZDZcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJJbnZpc2liaWxpdHkgKFJlY2hhcmdlcyBhZnRlciBhIFNob3J0IG9yIExvbmcgUmVzdClcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBkdWVyZ2FyIG1hZ2ljYWxseSB0dXJucyBpbnZpc2libGUgdW50aWwgaXQgYXR0YWNrcywgY2FzdHMgYSBzcGVsbCwgb3IgdXNlcyBpdHMgRW5sYXJnZSwgb3IgdW50aWwgaXRzIGNvbmNlbnRyYXRpb24gaXMgYnJva2VuLCB1cCB0byAxIGhvdXIgKGFzIGlmIGNvbmNlbnRyYXRpbmcgb24gYSBzcGVsbCkuIEFueSBlcXVpcG1lbnQgdGhlIGR1ZXJnYXIgd2VhcnMgb3IgY2FycmllcyBpcyBpbnZpc2libGUgd2l0aCBpdCAuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJEdXN0IE1lcGhpdFwiLFxuICAgICAgICBzaXplOiBcIlNtYWxsXCIsXG4gICAgICAgIHR5cGU6IFwiZWxlbWVudGFsXCIsXG4gICAgICAgIHN1YnR5cGU6IFwiXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJuZXV0cmFsIGV2aWxcIixcbiAgICAgICAgYWM6IDEyLFxuICAgICAgICBocDogMTcsXG4gICAgICAgIGhpdF9kaWNlOiBcIjVkNiArIC0xXCIsXG4gICAgICAgIHNwZWVkOiBcIjMwIGZ0LiwgZmx5IDMwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzUsIDE0LCAxMCwgOSwgMTEsIDEwXSxcbiAgICAgICAgc2tpbGxzYXZlczogW3sgcGVyY2VwdGlvbjogMiB9LCB7IHN0ZWFsdGg6IDQgfV0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiZmlyZVwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcInBvaXNvblwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJwb2lzb25lZFwiLFxuICAgICAgICBzZW5zZXM6IFwiZGFya3Zpc2lvbiA2MCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxMlwiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiQXVyYW4sIFRlcnJhblwiLFxuICAgICAgICBjcjogXCIxLzJcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJEZWF0aCBCdXJzdFwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiV2hlbiB0aGUgbWVwaGl0IGRpZXMsIGl0IGV4cGxvZGVzIGluIGEgYnVyc3Qgb2YgZHVzdC4gRWFjaCBjcmVhdHVyZSB3aXRoaW4gNSBmdC4gb2YgaXQgbXVzdCB0aGVuIHN1Y2NlZWQgb24gYSBEQyAxMCBDb25zdGl0dXRpb24gc2F2aW5nIHRocm93IG9yIGJlIGJsaW5kZWQgZm9yIDEgbWludXRlLiBBIGJsaW5kZWQgY3JlYXR1cmUgY2FuIHJlcGVhdCB0aGUgc2F2aW5nIHRocm93IG9uIGVhY2ggb2YgaXRzIHR1cm5zLCBlbmRpbmcgdGhlIGVmZmVjdCBvbiBpdHNlbGYgb24gYSBzdWNjZXNzLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIklubmF0ZSBTcGVsbGNhc3RpbmcgKDEvRGF5KVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIG1lcGhpdCBjYW4gaW5uYXRlbHkgY2FzdCBzbGVlcCwgcmVxdWlyaW5nIG5vIG1hdGVyaWFsIGNvbXBvbmVudHMuIEl0cyBpbm5hdGUgc3BlbGxjYXN0aW5nIGFiaWxpdHkgaXMgQ2hhcmlzbWEuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkNsYXdzXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNCB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgY3JlYXR1cmUuIEhpdDogNCAoMWQ0ICsgMikgc2xhc2hpbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIxZDRcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJCbGluZGluZyBCcmVhdGggKFJlY2hhcmdlIDYpXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgbWVwaGl0IGV4aGFsZXMgYSAxNS1mb290IGNvbmUgb2YgYmxpbmRpbmcgZHVzdC4gRWFjaCBjcmVhdHVyZSBpbiB0aGF0IGFyZWEgbXVzdCBzdWNjZWVkIG9uIGEgREMgMTAgRGV4dGVyaXR5IHNhdmluZyB0aHJvdyBvciBiZSBibGluZGVkIGZvciAxIG1pbnV0ZS4gQSBjcmVhdHVyZSBjYW4gcmVwZWF0IHRoZSBzYXZpbmcgdGhyb3cgYXQgdGhlIGVuZCBvZiBlYWNoIG9mIGl0cyB0dXJucywgZW5kaW5nIHRoZSBlZmZlY3Qgb24gaXRzZWxmIG9uIGEgc3VjY2Vzcy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJWYXJpYW50OiBTdW1tb24gTWVwaGl0cyAoMS9EYXkpXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgbWVwaGl0IGhhcyBhIDI1IHBlcmNlbnQgY2hhbmNlIG9mIHN1bW1vbmluZyAxZDQgbWVwaGl0cyBvZiBpdHMga2luZC4gQSBzdW1tb25lZCBtZXBoaXQgYXBwZWFycyBpbiBhbiB1bm9jY3VwaWVkIHNwYWNlIHdpdGhpbiA2MCBmZWV0IG9mIGl0cyBzdW1tb25lciwgYWN0cyBhcyBhbiBhbGx5IG9mIGl0cyBzdW1tb25lciwgYW5kIGNhbid0IHN1bW1vbiBvdGhlciBtZXBoaXRzLiBJdCByZW1haW5zIGZvciAxIG1pbnV0ZSwgdW50aWwgaXQgb3IgaXRzIHN1bW1vbmVyIGRpZXMsIG9yIHVudGlsIGl0cyBzdW1tb25lciBkaXNtaXNzZXMgaXQgYXMgYW4gYWN0aW9uLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiRWFnbGVcIixcbiAgICAgICAgc2l6ZTogXCJTbWFsbFwiLFxuICAgICAgICB0eXBlOiBcImJlYXN0XCIsXG4gICAgICAgIHN1YnR5cGU6IFwiXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcbiAgICAgICAgYWM6IDEyLFxuICAgICAgICBocDogMyxcbiAgICAgICAgaGl0X2RpY2U6IFwiMWQ2ICsgLTFcIixcbiAgICAgICAgc3BlZWQ6IFwiMTAgZnQuLCBmbHkgNjAgZnQuXCIsXG4gICAgICAgIHN0YXRzOiBbNiwgMTUsIDEwLCAyLCAxNCwgN10sXG4gICAgICAgIHNraWxsc2F2ZXM6IFt7IHBlcmNlcHRpb246IDQgfV0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBzZW5zZXM6IFwicGFzc2l2ZSBQZXJjZXB0aW9uIDE0XCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJcIixcbiAgICAgICAgY3I6IFwiMFwiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIktlZW4gU2lnaHRcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBlYWdsZSBoYXMgYWR2YW50YWdlIG9uIFdpc2RvbSAoUGVyY2VwdGlvbikgY2hlY2tzIHRoYXQgcmVseSBvbiBzaWdodC5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiVGFsb25zXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNCB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDQgKDFkNCArIDIpIHNsYXNoaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDQsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMWQ0XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiAyXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJFYXJ0aCBFbGVtZW50YWxcIixcbiAgICAgICAgc2l6ZTogXCJMYXJnZVwiLFxuICAgICAgICB0eXBlOiBcImVsZW1lbnRhbFwiLFxuICAgICAgICBzdWJ0eXBlOiBcIlwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwibmV1dHJhbFwiLFxuICAgICAgICBhYzogMTcsXG4gICAgICAgIGhwOiAxMjYsXG4gICAgICAgIGhpdF9kaWNlOiBcIjEyZDEwICsgNjBcIixcbiAgICAgICAgc3BlZWQ6IFwiMzAgZnQuLCBidXJyb3cgMzAgZnQuXCIsXG4gICAgICAgIHN0YXRzOiBbMjAsIDgsIDIwLCA1LCAxMCwgNV0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwidGh1bmRlclwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6XG4gICAgICAgICAgICBcImJsdWRnZW9uaW5nLCBwaWVyY2luZywgYW5kIHNsYXNoaW5nIGZyb20gbm9ubWFnaWNhbCB3ZWFwb25zXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcInBvaXNvblwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczpcbiAgICAgICAgICAgIFwiZXhoYXVzdGlvbiwgcGFyYWx5emVkLCBwZXRyaWZpZWQsIHBvaXNvbmVkLCB1bmNvbnNjaW91c1wiLFxuICAgICAgICBzZW5zZXM6IFwiZGFya3Zpc2lvbiA2MCBmdC4sIHRyZW1vcnNlbnNlIDYwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDEwXCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJUZXJyYW5cIixcbiAgICAgICAgY3I6IFwiNVwiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkVhcnRoIEdsaWRlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZWxlbWVudGFsIGNhbiBidXJyb3cgdGhyb3VnaCBub25tYWdpY2FsLCB1bndvcmtlZCBlYXJ0aCBhbmQgc3RvbmUuIFdoaWxlIGRvaW5nIHNvLCB0aGUgZWxlbWVudGFsIGRvZXNuJ3QgZGlzdHVyYiB0aGUgbWF0ZXJpYWwgaXQgbW92ZXMgdGhyb3VnaC5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJTaWVnZSBNb25zdGVyXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZWxlbWVudGFsIGRlYWxzIGRvdWJsZSBkYW1hZ2UgdG8gb2JqZWN0cyBhbmQgc3RydWN0dXJlcy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBlbGVtZW50YWwgbWFrZXMgdHdvIHNsYW0gYXR0YWNrcy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJTbGFtXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArOCB0byBoaXQsIHJlYWNoIDEwIGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxNCAoMmQ4ICsgNSkgYmx1ZGdlb25pbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogOCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIyZDhcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDVcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIkVmcmVldGlcIixcbiAgICAgICAgc2l6ZTogXCJMYXJnZVwiLFxuICAgICAgICB0eXBlOiBcImVsZW1lbnRhbFwiLFxuICAgICAgICBzdWJ0eXBlOiBcIlwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwibGF3ZnVsIGV2aWxcIixcbiAgICAgICAgYWM6IDE3LFxuICAgICAgICBocDogMjAwLFxuICAgICAgICBoaXRfZGljZTogXCIxNmQxMCArIDExMlwiLFxuICAgICAgICBzcGVlZDogXCI0MCBmdC4sIGZseSA2MCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsyMiwgMTIsIDI0LCAxNiwgMTUsIDE2XSxcbiAgICAgICAgc2F2ZXM6IFt7IGludGVsbGlnZW5jZTogNyB9LCB7IHdpc2RvbTogNiB9LCB7IGNoYXJpc21hOiA3IH1dLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcImZpcmVcIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIHNlbnNlczogXCJkYXJrdmlzaW9uIDEyMCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxMlwiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiSWduYW5cIixcbiAgICAgICAgY3I6IFwiMTFcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJFbGVtZW50YWwgRGVtaXNlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJJZiB0aGUgZWZyZWV0aSBkaWVzLCBpdHMgYm9keSBkaXNpbnRlZ3JhdGVzIGluIGEgZmxhc2ggb2YgZmlyZSBhbmQgcHVmZiBvZiBzbW9rZSwgbGVhdmluZyBiZWhpbmQgb25seSBlcXVpcG1lbnQgdGhlIGRqaW5uaSB3YXMgd2VhcmluZyBvciBjYXJyeWluZy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJJbm5hdGUgU3BlbGxjYXN0aW5nXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZWZyZWV0aSdzIGlubmF0ZSBzcGVsbCBjYXN0aW5nIGFiaWxpdHkgaXMgQ2hhcmlzbWEgKHNwZWxsIHNhdmUgREMgMTUsICs3IHRvIGhpdCB3aXRoIHNwZWxsIGF0dGFja3MpLiBJdCBjYW4gaW5uYXRlbHkgY2FzdCB0aGUgZm9sbG93aW5nIHNwZWxscywgcmVxdWlyaW5nIG5vIG1hdGVyaWFsIGNvbXBvbmVudHM6XFxcXG5cXFxcbkF0IHdpbGw6IGRldGVjdCBtYWdpY1xcXFxuMy9kYXk6IGVubGFyZ2UvcmVkdWNlLCB0b25ndWVzXFxcXG4xL2RheSBlYWNoOiBjb25qdXJlIGVsZW1lbnRhbCAoZmlyZSBlbGVtZW50YWwgb25seSksIGdhc2VvdXMgZm9ybSwgaW52aXNpYmlsaXR5LCBtYWpvciBpbWFnZSwgcGxhbmUgc2hpZnQsIHdhbGwgb2YgZmlyZVwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlZhcmlhbnQ6IEdlbmllIFBvd2Vyc1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiR2VuaWVzIGhhdmUgYSB2YXJpZXR5IG9mIG1hZ2ljYWwgY2FwYWJpbGl0aWVzLCBpbmNsdWRpbmcgc3BlbGxzLiBBIGZldyBoYXZlIGV2ZW4gZ3JlYXRlciBwb3dlcnMgdGhhdCBhbGxvdyB0aGVtIHRvIGFsdGVyIHRoZWlyIGFwcGVhcmFuY2Ugb3IgdGhlIG5hdHVyZSBvZiByZWFsaXR5LlxcXFxuXFxcXG5EaXNndWlzZXMuXFxcXG5Tb21lIGdlbmllcyBjYW4gdmVpbCB0aGVtc2VsdmVzIGluIGlsbHVzaW9uIHRvIHBhc3MgYXMgb3RoZXIgc2ltaWxhcmx5IHNoYXBlZCBjcmVhdHVyZXMuIFN1Y2ggZ2VuaWVzIGNhbiBpbm5hdGVseSBjYXN0IHRoZSBkaXNndWlzZSBzZWxmIHNwZWxsIGF0IHdpbGwsIG9mdGVuIHdpdGggYSBsb25nZXIgZHVyYXRpb24gdGhhbiBpcyBub3JtYWwgZm9yIHRoYXQgc3BlbGwuIE1pZ2h0aWVyIGdlbmllcyBjYW4gY2FzdCB0aGUgdHJ1ZSBwb2x5bW9ycGggc3BlbGwgb25lIHRvIHRocmVlIHRpbWVzIHBlciBkYXksIHBvc3NpYmx5IHdpdGggYSBsb25nZXIgZHVyYXRpb24gdGhhbiBub3JtYWwuIFN1Y2ggZ2VuaWVzIGNhbiBjaGFuZ2Ugb25seSB0aGVpciBvd24gc2hhcGUsIGJ1dCBhIHJhcmUgZmV3IGNhbiB1c2UgdGhlIHNwZWxsIG9uIG90aGVyIGNyZWF0dXJlcyBhbmQgb2JqZWN0cyBhcyB3ZWxsLlxcXFxuV2lzaGVzLlxcXFxuVGhlIGdlbmllIHBvd2VyIHRvIGdyYW50IHdpc2hlcyBpcyBsZWdlbmRhcnkgYW1vbmcgbW9ydGFscy4gT25seSB0aGUgbW9zdCBwb3RlbnQgZ2VuaWVzLCBzdWNoIGFzIHRob3NlIGFtb25nIHRoZSBub2JpbGl0eSwgY2FuIGRvIHNvLiBBIHBhcnRpY3VsYXIgZ2VuaWUgdGhhdCBoYXMgdGhpcyBwb3dlciBjYW4gZ3JhbnQgb25lIHRvIHRocmVlIHdpc2hlcyB0byBhIGNyZWF0dXJlIHRoYXQgaXNuJ3QgYSBnZW5pZS4gT25jZSBhIGdlbmllIGhhcyBncmFudGVkIGl0cyBsaW1pdCBvZiB3aXNoZXMsIGl0IGNhbid0IGdyYW50IHdpc2hlcyBhZ2FpbiBmb3Igc29tZSBhbW91bnQgb2YgdGltZSAodXN1YWxseSAxIHllYXIpLiBhbmQgY29zbWljIGxhdyBkaWN0YXRlcyB0aGF0IHRoZSBzYW1lIGdlbmllIGNhbiBleHBlbmQgaXRzIGxpbWl0IG9mIHdpc2hlcyBvbiBhIHNwZWNpZmljIGNyZWF0dXJlIG9ubHkgb25jZSBpbiB0aGF0IGNyZWF0dXJlJ3MgZXhpc3RlbmNlLlxcXFxuVG8gYmUgZ3JhbnRlZCBhIHdpc2gsIGEgY3JlYXR1cmUgd2l0aGluIDYwIGZlZXQgb2YgdGhlIGdlbmllIHN0YXRlcyBhIGRlc2lyZWQgZWZmZWN0IHRvIGl0LiBUaGUgZ2VuaWUgY2FuIHRoZW4gY2FzdCB0aGUgd2lzaCBzcGVsbCBvbiB0aGUgY3JlYXR1cmUncyBiZWhhbGYgdG8gYnJpbmcgYWJvdXQgdGhlIGVmZmVjdC4gRGVwZW5kaW5nIG9uIHRoZSBnZW5pZSdzIG5hdHVyZSwgdGhlIGdlbmllIG1pZ2h0IHRyeSB0byBwZXJ2ZXJ0IHRoZSBpbnRlbnQgb2YgdGhlIHdpc2ggYnkgZXhwbG9pdGluZyB0aGUgd2lzaCdzIHBvb3Igd29yZGluZy4gVGhlIHBlcnZlcnNpb24gb2YgdGhlIHdvcmRpbmcgaXMgdXN1YWxseSBjcmFmdGVkIHRvIGJlIHRvIHRoZSBnZW5pZSdzIGJlbmVmaXQuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZWZyZWV0aSBtYWtlcyB0d28gc2NpbWl0YXIgYXR0YWNrcyBvciB1c2VzIGl0cyBIdXJsIEZsYW1lIHR3aWNlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlNjaW1pdGFyXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMTAgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxMyAoMmQ2ICsgNikgc2xhc2hpbmcgZGFtYWdlIHBsdXMgNyAoMmQ2KSBmaXJlIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDEwLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjJkNiArIDJkNlwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogNlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkh1cmwgRmxhbWVcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlJhbmdlZCBTcGVsbCBBdHRhY2s6ICs3IHRvIGhpdCwgcmFuZ2UgMTIwIGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxNyAoNWQ2KSBmaXJlIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDcsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiNWQ2XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIkVsZXBoYW50XCIsXG4gICAgICAgIHNpemU6IFwiSHVnZVwiLFxuICAgICAgICB0eXBlOiBcImJlYXN0XCIsXG4gICAgICAgIHN1YnR5cGU6IFwiXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcbiAgICAgICAgYWM6IDEyLFxuICAgICAgICBocDogNzYsXG4gICAgICAgIGhpdF9kaWNlOiBcIjhkMTIgKyAyNFwiLFxuICAgICAgICBzcGVlZDogXCI0MCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsyMiwgOSwgMTcsIDMsIDExLCA2XSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIHNlbnNlczogXCJwYXNzaXZlIFBlcmNlcHRpb24gMTBcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcIlwiLFxuICAgICAgICBjcjogXCI0XCIsXG4gICAgICAgIHRyYWl0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiVHJhbXBsaW5nIENoYXJnZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiSWYgdGhlIGVsZXBoYW50IG1vdmVzIGF0IGxlYXN0IDIwIGZ0LiBzdHJhaWdodCB0b3dhcmQgYSBjcmVhdHVyZSBhbmQgdGhlbiBoaXRzIGl0IHdpdGggYSBnb3JlIGF0dGFjayBvbiB0aGUgc2FtZSB0dXJuLCB0aGF0IHRhcmdldCBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxMiBTdHJlbmd0aCBzYXZpbmcgdGhyb3cgb3IgYmUga25vY2tlZCBwcm9uZS4gSWYgdGhlIHRhcmdldCBpcyBwcm9uZSwgdGhlIGVsZXBoYW50IGNhbiBtYWtlIG9uZSBzdG9tcCBhdHRhY2sgYWdhaW5zdCBpdCBhcyBhIGJvbnVzIGFjdGlvbi5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiR29yZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzggdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxOSAoM2Q4ICsgNikgcGllcmNpbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogOCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIzZDhcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDZcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJTdG9tcFwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzggdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHByb25lIGNyZWF0dXJlLiBIaXQ6IDIyICgzZDEwICsgNikgYmx1ZGdlb25pbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogOCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIzZDEwXCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiA2XG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJFbGtcIixcbiAgICAgICAgc2l6ZTogXCJMYXJnZVwiLFxuICAgICAgICB0eXBlOiBcImJlYXN0XCIsXG4gICAgICAgIHN1YnR5cGU6IFwiXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcbiAgICAgICAgYWM6IDEwLFxuICAgICAgICBocDogMTMsXG4gICAgICAgIGhpdF9kaWNlOiBcIjJkMTAgKyAyXCIsXG4gICAgICAgIHNwZWVkOiBcIjUwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzE2LCAxMCwgMTIsIDIsIDEwLCA2XSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIHNlbnNlczogXCJwYXNzaXZlIFBlcmNlcHRpb24gMTBcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcIlwiLFxuICAgICAgICBjcjogXCIxLzRcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJDaGFyZ2VcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIklmIHRoZSBlbGsgbW92ZXMgYXQgbGVhc3QgMjAgZnQuIHN0cmFpZ2h0IHRvd2FyZCBhIHRhcmdldCBhbmQgdGhlbiBoaXRzIGl0IHdpdGggYSByYW0gYXR0YWNrIG9uIHRoZSBzYW1lIHR1cm4sIHRoZSB0YXJnZXQgdGFrZXMgYW4gZXh0cmEgNyAoMmQ2KSBkYW1hZ2UuIElmIHRoZSB0YXJnZXQgaXMgYSBjcmVhdHVyZSwgaXQgbXVzdCBzdWNjZWVkIG9uIGEgREMgMTMgU3RyZW5ndGggc2F2aW5nIHRocm93IG9yIGJlIGtub2NrZWQgcHJvbmUuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjJkNlwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlJhbVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzUgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiA2ICgxZDYgKyAzKSBibHVkZ2VvbmluZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiSG9vdmVzXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNSB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgcHJvbmUgY3JlYXR1cmUuIEhpdDogOCAoMmQ0ICsgMykgYmx1ZGdlb25pbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiRXJpbnllc1wiLFxuICAgICAgICBzaXplOiBcIk1lZGl1bVwiLFxuICAgICAgICB0eXBlOiBcImZpZW5kXCIsXG4gICAgICAgIHN1YnR5cGU6IFwiZGV2aWxcIixcbiAgICAgICAgYWxpZ25tZW50OiBcImxhd2Z1bCBldmlsXCIsXG4gICAgICAgIGFjOiAxOCxcbiAgICAgICAgaHA6IDE1MyxcbiAgICAgICAgaGl0X2RpY2U6IFwiMThkOCArIDcyXCIsXG4gICAgICAgIHNwZWVkOiBcIjMwIGZ0LiwgZmx5IDYwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzE4LCAxNiwgMTgsIDE0LCAxNCwgMThdLFxuICAgICAgICBzYXZlczogW1xuICAgICAgICAgICAgeyBkZXh0ZXJpdHk6IDcgfSxcbiAgICAgICAgICAgIHsgY29uc3RpdHV0aW9uOiA4IH0sXG4gICAgICAgICAgICB7IHdpc2RvbTogNiB9LFxuICAgICAgICAgICAgeyBjaGFyaXNtYTogOCB9XG4gICAgICAgIF0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczpcbiAgICAgICAgICAgIFwiY29sZDsgYmx1ZGdlb25pbmcsIHBpZXJjaW5nLCBhbmQgc2xhc2hpbmcgZnJvbSBub25tYWdpY2FsIHdlYXBvbnMgdGhhdCBhcmVuJ3Qgc2lsdmVyZWRcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwiZmlyZSwgcG9pc29uXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOiBcInBvaXNvbmVkXCIsXG4gICAgICAgIHNlbnNlczogXCJ0cnVlc2lnaHQgMTIwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDEyXCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJJbmZlcm5hbCwgdGVsZXBhdGh5IDEyMCBmdC5cIixcbiAgICAgICAgY3I6IFwiMTJcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJIZWxsaXNoIFdlYXBvbnNcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBlcmlueWVzJ3Mgd2VhcG9uIGF0dGFja3MgYXJlIG1hZ2ljYWwgYW5kIGRlYWwgYW4gZXh0cmEgMTMgKDNkOCkgcG9pc29uIGRhbWFnZSBvbiBhIGhpdCAoaW5jbHVkZWQgaW4gdGhlIGF0dGFja3MpLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk1hZ2ljIFJlc2lzdGFuY2VcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBlcmlueWVzIGhhcyBhZHZhbnRhZ2Ugb24gc2F2aW5nIHRocm93cyBhZ2FpbnN0IHNwZWxscyBhbmQgb3RoZXIgbWFnaWNhbCBlZmZlY3RzLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJNdWx0aWF0dGFja1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGVyaW55ZXMgbWFrZXMgdGhyZWUgYXR0YWNrc1wiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkxvbmdzd29yZFwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzggdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiA4ICgxZDggKyA0KSBzbGFzaGluZyBkYW1hZ2UsIG9yIDkgKDFkMTAgKyA0KSBzbGFzaGluZyBkYW1hZ2UgaWYgdXNlZCB3aXRoIHR3byBoYW5kcywgcGx1cyAxMyAoM2Q4KSBwb2lzb24gZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogOCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIxZDggKyAzZDhcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDRcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJMb25nYm93XCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJSYW5nZWQgV2VhcG9uIEF0dGFjazogKzcgdG8gaGl0LCByYW5nZSAxNTAvNjAwIGZ0Liwgb25lIHRhcmdldC4gSGl0OiA3ICgxZDggKyAzKSBwaWVyY2luZyBkYW1hZ2UgcGx1cyAxMyAoM2Q4KSBwb2lzb24gZGFtYWdlLCBhbmQgdGhlIHRhcmdldCBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxNCBDb25zdGl0dXRpb24gc2F2aW5nIHRocm93IG9yIGJlIHBvaXNvbmVkLiBUaGUgcG9pc29uIGxhc3RzIHVudGlsIGl0IGlzIHJlbW92ZWQgYnkgdGhlIGxlc3NlciByZXN0b3JhdGlvbiBzcGVsbCBvciBzaW1pbGFyIG1hZ2ljLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNyxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIxZDggKyAzZDhcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDNcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJWYXJpYW50OiBSb3BlIG9mIEVudGFuZ2xlbWVudFwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiU29tZSBlcmlueWVzIGNhcnJ5IGEgcm9wZSBvZiBlbnRhbmdsZW1lbnQgKGRldGFpbGVkIGluIHRoZSBEdW5nZW9uIE1hc3RlcidzIEd1aWRlKS4gV2hlbiBzdWNoIGFuIGVyaW55ZXMgdXNlcyBpdHMgTXVsdGlhdHRhY2ssIHRoZSBlcmlueWVzIGNhbiB1c2UgdGhlIHJvcGUgaW4gcGxhY2Ugb2YgdHdvIG9mIHRoZSBhdHRhY2tzLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICByZWFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlBhcnJ5XCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZXJpbnllcyBhZGRzIDQgdG8gaXRzIEFDIGFnYWluc3Qgb25lIG1lbGVlIGF0dGFjayB0aGF0IHdvdWxkIGhpdCBpdC4gVG8gZG8gc28sIHRoZSBlcmlueWVzIG11c3Qgc2VlIHRoZSBhdHRhY2tlciBhbmQgYmUgd2llbGRpbmcgYSBtZWxlZSB3ZWFwb24uXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJFdHRlcmNhcFwiLFxuICAgICAgICBzaXplOiBcIk1lZGl1bVwiLFxuICAgICAgICB0eXBlOiBcIm1vbnN0cm9zaXR5XCIsXG4gICAgICAgIHN1YnR5cGU6IFwiXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJuZXV0cmFsIGV2aWxcIixcbiAgICAgICAgYWM6IDEzLFxuICAgICAgICBocDogNDQsXG4gICAgICAgIGhpdF9kaWNlOiBcIjhkOCArIDhcIixcbiAgICAgICAgc3BlZWQ6IFwiMzAgZnQuLCBjbGltYiAzMCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsxNCwgMTUsIDEzLCA3LCAxMiwgOF0sXG4gICAgICAgIHNraWxsc2F2ZXM6IFt7IHBlcmNlcHRpb246IDMgfSwgeyBzdGVhbHRoOiA0IH0sIHsgc3Vydml2YWw6IDMgfV0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBzZW5zZXM6IFwiZGFya3Zpc2lvbiA2MCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxM1wiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiXCIsXG4gICAgICAgIGNyOiBcIjJcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJTcGlkZXIgQ2xpbWJcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBldHRlcmNhcCBjYW4gY2xpbWIgZGlmZmljdWx0IHN1cmZhY2VzLCBpbmNsdWRpbmcgdXBzaWRlIGRvd24gb24gY2VpbGluZ3MsIHdpdGhvdXQgbmVlZGluZyB0byBtYWtlIGFuIGFiaWxpdHkgY2hlY2suXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiV2ViIFNlbnNlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJXaGlsZSBpbiBjb250YWN0IHdpdGggYSB3ZWIsIHRoZSBldHRlcmNhcCBrbm93cyB0aGUgZXhhY3QgbG9jYXRpb24gb2YgYW55IG90aGVyIGNyZWF0dXJlIGluIGNvbnRhY3Qgd2l0aCB0aGUgc2FtZSB3ZWIuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiV2ViIFdhbGtlclwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGV0dGVyY2FwIGlnbm9yZXMgbW92ZW1lbnQgcmVzdHJpY3Rpb25zIGNhdXNlZCBieSB3ZWJiaW5nLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJNdWx0aWF0dGFja1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGV0dGVyY2FwIG1ha2VzIHR3byBhdHRhY2tzOiBvbmUgd2l0aCBpdHMgYml0ZSBhbmQgb25lIHdpdGggaXRzIGNsYXdzLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkJpdGVcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs0IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSBjcmVhdHVyZS4gSGl0OiA2ICgxZDggKyAyKSBwaWVyY2luZyBkYW1hZ2UgcGx1cyA0ICgxZDgpIHBvaXNvbiBkYW1hZ2UuIFRoZSB0YXJnZXQgbXVzdCBzdWNjZWVkIG9uIGEgREMgMTEgQ29uc3RpdHV0aW9uIHNhdmluZyB0aHJvdyBvciBiZSBwb2lzb25lZCBmb3IgMSBtaW51dGUuIFRoZSBjcmVhdHVyZSBjYW4gcmVwZWF0IHRoZSBzYXZpbmcgdGhyb3cgYXQgdGhlIGVuZCBvZiBlYWNoIG9mIGl0cyB0dXJucywgZW5kaW5nIHRoZSBlZmZlY3Qgb24gaXRzZWxmIG9uIGEgc3VjY2Vzcy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDQsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMWQ4XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiAyXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQ2xhd3NcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs0IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogNyAoMmQ0ICsgMikgc2xhc2hpbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIyZDRcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJXZWIgKFJlY2hhcmdlIDUtNilcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlJhbmdlZCBXZWFwb24gQXR0YWNrOiArNCB0byBoaXQsIHJhbmdlIDMwLzYwIGZ0Liwgb25lIExhcmdlIG9yIHNtYWxsZXIgY3JlYXR1cmUuIEhpdDogVGhlIGNyZWF0dXJlIGlzIHJlc3RyYWluZWQgYnkgd2ViYmluZy4gQXMgYW4gYWN0aW9uLCB0aGUgcmVzdHJhaW5lZCBjcmVhdHVyZSBjYW4gbWFrZSBhIERDIDExIFN0cmVuZ3RoIGNoZWNrLCBlc2NhcGluZyBmcm9tIHRoZSB3ZWJiaW5nIG9uIGEgc3VjY2Vzcy4gVGhlIGVmZmVjdCBlbmRzIGlmIHRoZSB3ZWJiaW5nIGlzIGRlc3Ryb3llZC4gVGhlIHdlYmJpbmcgaGFzIEFDIDEwLCA1IGhpdCBwb2ludHMsIGlzIHZ1bG5lcmFibGUgdG8gZmlyZSBkYW1hZ2UgYW5kIGltbXVuZSB0byBibHVkZ2VvbmluZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiVmFyaWFudDogV2ViIEdhcnJvdGVcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs0IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSBNZWRpdW0gb3IgU21hbGwgY3JlYXR1cmUgYWdhaW5zdCB3aGljaCB0aGUgZXR0ZXJjYXAgaGFzIGFkdmFudGFnZSBvbiB0aGUgYXR0YWNrIHJvbGwuIEhpdDogNCAoMWQ0ICsgMikgYmx1ZGdlb25pbmcgZGFtYWdlLCBhbmQgdGhlIHRhcmdldCBpcyBncmFwcGxlZCAoZXNjYXBlIERDIDEyKS4gVW50aWwgdGhpcyBncmFwcGxlIGVuZHMsIHRoZSB0YXJnZXQgY2FuJ3QgYnJlYXRoZSwgYW5kIHRoZSBldHRlcmNhcCBoYXMgYWR2YW50YWdlIG9uIGF0dGFjayByb2xscyBhZ2FpbnN0IGl0LlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIxZDRcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIkV0dGluXCIsXG4gICAgICAgIHNpemU6IFwiTGFyZ2VcIixcbiAgICAgICAgdHlwZTogXCJnaWFudFwiLFxuICAgICAgICBzdWJ0eXBlOiBcIlwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwiY2hhb3RpYyBldmlsXCIsXG4gICAgICAgIGFjOiAxMixcbiAgICAgICAgaHA6IDg1LFxuICAgICAgICBoaXRfZGljZTogXCIxMGQxMCArIDMwXCIsXG4gICAgICAgIHNwZWVkOiBcIjQwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzIxLCA4LCAxNywgNiwgMTAsIDhdLFxuICAgICAgICBza2lsbHNhdmVzOiBbeyBwZXJjZXB0aW9uOiA0IH1dLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcbiAgICAgICAgc2Vuc2VzOiBcImRhcmt2aXNpb24gNjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTRcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcIkdpYW50LCBPcmNcIixcbiAgICAgICAgY3I6IFwiNFwiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlR3byBIZWFkc1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGV0dGluIGhhcyBhZHZhbnRhZ2Ugb24gV2lzZG9tIChQZXJjZXB0aW9uKSBjaGVja3MgYW5kIG9uIHNhdmluZyB0aHJvd3MgYWdhaW5zdCBiZWluZyBibGluZGVkLCBjaGFybWVkLCBkZWFmZW5lZCwgZnJpZ2h0ZW5lZCwgc3R1bm5lZCwgYW5kIGtub2NrZWQgdW5jb25zY2lvdXMuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiV2FrZWZ1bFwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiV2hlbiBvbmUgb2YgdGhlIGV0dGluJ3MgaGVhZHMgaXMgYXNsZWVwLCBpdHMgb3RoZXIgaGVhZCBpcyBhd2FrZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBldHRpbiBtYWtlcyB0d28gYXR0YWNrczogb25lIHdpdGggaXRzIGJhdHRsZWF4ZSBhbmQgb25lIHdpdGggaXRzIG1vcm5pbmdzdGFyLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkJhdHRsZWF4ZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzcgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxNCAoMmQ4ICsgNSkgc2xhc2hpbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNyxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIyZDhcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJNb3JuaW5nc3RhclwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzcgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxNCAoMmQ4ICsgNSkgcGllcmNpbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNyxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIyZDhcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDVcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIkZpcmUgRWxlbWVudGFsXCIsXG4gICAgICAgIHNpemU6IFwiTGFyZ2VcIixcbiAgICAgICAgdHlwZTogXCJlbGVtZW50YWxcIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcIm5ldXRyYWxcIixcbiAgICAgICAgYWM6IDEzLFxuICAgICAgICBocDogMTAyLFxuICAgICAgICBoaXRfZGljZTogXCIxMmQxMCArIDM2XCIsXG4gICAgICAgIHNwZWVkOiBcIjUwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzEwLCAxNywgMTYsIDYsIDEwLCA3XSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOlxuICAgICAgICAgICAgXCJibHVkZ2VvbmluZywgcGllcmNpbmcsIGFuZCBzbGFzaGluZyBmcm9tIG5vbm1hZ2ljYWwgd2VhcG9uc1wiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczogXCJmaXJlLCBwb2lzb25cIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6XG4gICAgICAgICAgICBcImV4aGF1c3Rpb24sIGdyYXBwbGVkLCBwYXJhbHl6ZWQsIHBldHJpZmllZCwgcG9pc29uZWQsIHByb25lLCByZXN0cmFpbmVkLCB1bmNvbnNjaW91c1wiLFxuICAgICAgICBzZW5zZXM6IFwiZGFya3Zpc2lvbiA2MCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxMFwiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiSWduYW5cIixcbiAgICAgICAgY3I6IFwiNVwiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkZpcmUgRm9ybVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGVsZW1lbnRhbCBjYW4gbW92ZSB0aHJvdWdoIGEgc3BhY2UgYXMgbmFycm93IGFzIDEgaW5jaCB3aWRlIHdpdGhvdXQgc3F1ZWV6aW5nLiBBIGNyZWF0dXJlIHRoYXQgdG91Y2hlcyB0aGUgZWxlbWVudGFsIG9yIGhpdHMgaXQgd2l0aCBhIG1lbGVlIGF0dGFjayB3aGlsZSB3aXRoaW4gNSBmdC4gb2YgaXQgdGFrZXMgNSAoMWQxMCkgZmlyZSBkYW1hZ2UuIEluIGFkZGl0aW9uLCB0aGUgZWxlbWVudGFsIGNhbiBlbnRlciBhIGhvc3RpbGUgY3JlYXR1cmUncyBzcGFjZSBhbmQgc3RvcCB0aGVyZS4gVGhlIGZpcnN0IHRpbWUgaXQgZW50ZXJzIGEgY3JlYXR1cmUncyBzcGFjZSBvbiBhIHR1cm4sIHRoYXQgY3JlYXR1cmUgdGFrZXMgNSAoMWQxMCkgZmlyZSBkYW1hZ2UgYW5kIGNhdGNoZXMgZmlyZTsgdW50aWwgc29tZW9uZSB0YWtlcyBhbiBhY3Rpb24gdG8gZG91c2UgdGhlIGZpcmUsIHRoZSBjcmVhdHVyZSB0YWtlcyA1ICgxZDEwKSBmaXJlIGRhbWFnZSBhdCB0aGUgc3RhcnQgb2YgZWFjaCBvZiBpdHMgdHVybnMuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjVkMTBcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIklsbHVtaW5hdGlvblwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGVsZW1lbnRhbCBzaGVkcyBicmlnaHQgbGlnaHQgaW4gYSAzMC1mb290IHJhZGl1cyBhbmQgZGltIGxpZ2h0IGluIGFuIGFkZGl0aW9uYWwgMzAgZnQuLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIldhdGVyIFN1c2NlcHRpYmlsaXR5XCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJGb3IgZXZlcnkgNSBmdC4gdGhlIGVsZW1lbnRhbCBtb3ZlcyBpbiB3YXRlciwgb3IgZm9yIGV2ZXJ5IGdhbGxvbiBvZiB3YXRlciBzcGxhc2hlZCBvbiBpdCwgaXQgdGFrZXMgMSBjb2xkIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBlbGVtZW50YWwgbWFrZXMgdHdvIHRvdWNoIGF0dGFja3MuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiVG91Y2hcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs2IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTAgKDJkNiArIDMpIGZpcmUgZGFtYWdlLiBJZiB0aGUgdGFyZ2V0IGlzIGEgY3JlYXR1cmUgb3IgYSBmbGFtbWFibGUgb2JqZWN0LCBpdCBpZ25pdGVzLiBVbnRpbCBhIGNyZWF0dXJlIHRha2VzIGFuIGFjdGlvbiB0byBkb3VzZSB0aGUgZmlyZSwgdGhlIHRhcmdldCB0YWtlcyA1ICgxZDEwKSBmaXJlIGRhbWFnZSBhdCB0aGUgc3RhcnQgb2YgZWFjaCBvZiBpdHMgdHVybnMuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA2LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjJkNlwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogM1xuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiRmlyZSBHaWFudFwiLFxuICAgICAgICBzaXplOiBcIkh1Z2VcIixcbiAgICAgICAgdHlwZTogXCJnaWFudFwiLFxuICAgICAgICBzdWJ0eXBlOiBcIlwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwibGF3ZnVsIGV2aWxcIixcbiAgICAgICAgYWM6IDE4LFxuICAgICAgICBocDogMTYyLFxuICAgICAgICBoaXRfZGljZTogXCIxM2QxMiArIDc3XCIsXG4gICAgICAgIHNwZWVkOiBcIjMwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzI1LCA5LCAyMywgMTAsIDE0LCAxM10sXG4gICAgICAgIHNhdmVzOiBbeyBkZXh0ZXJpdHk6IDMgfSwgeyBjb25zdGl0dXRpb246IDEwIH0sIHsgY2hhcmlzbWE6IDUgfV0sXG4gICAgICAgIHNraWxsc2F2ZXM6IFt7IGF0aGxldGljczogMTEgfSwgeyBwZXJjZXB0aW9uOiA2IH1dLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcImZpcmVcIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIHNlbnNlczogXCJwYXNzaXZlIFBlcmNlcHRpb24gMTZcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcIkdpYW50XCIsXG4gICAgICAgIGNyOiBcIjlcIixcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBnaWFudCBtYWtlcyB0d28gZ3JlYXRzd29yZCBhdHRhY2tzLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkdyZWF0c3dvcmRcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICsxMSB0byBoaXQsIHJlYWNoIDEwIGZ0Liwgb25lIHRhcmdldC4gSGl0OiAyOCAoNmQ2ICsgNykgc2xhc2hpbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMTEsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiNmQ2XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiA3XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiUm9ja1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiUmFuZ2VkIFdlYXBvbiBBdHRhY2s6ICsxMSB0byBoaXQsIHJhbmdlIDYwLzI0MCBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMjkgKDRkMTAgKyA3KSBibHVkZ2VvbmluZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAxMSxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCI0ZDEwXCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiA3XG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJGbGVzaCBHb2xlbVwiLFxuICAgICAgICBzaXplOiBcIk1lZGl1bVwiLFxuICAgICAgICB0eXBlOiBcImNvbnN0cnVjdFwiLFxuICAgICAgICBzdWJ0eXBlOiBcIlwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwibmV1dHJhbFwiLFxuICAgICAgICBhYzogOSxcbiAgICAgICAgaHA6IDkzLFxuICAgICAgICBoaXRfZGljZTogXCIxMWQ4ICsgNDNcIixcbiAgICAgICAgc3BlZWQ6IFwiMzAgZnQuXCIsXG4gICAgICAgIHN0YXRzOiBbMTksIDksIDE4LCA2LCAxMCwgNV0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6XG4gICAgICAgICAgICBcImxpZ2h0bmluZywgcG9pc29uOyBibHVkZ2VvbmluZywgcGllcmNpbmcsIGFuZCBzbGFzaGluZyBmcm9tIG5vbm1hZ2ljYWwgd2VhcG9ucyB0aGF0IGFyZW4ndCBhZGFtYW50aW5lXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOlxuICAgICAgICAgICAgXCJjaGFybWVkLCBleGhhdXN0aW9uLCBmcmlnaHRlbmVkLCBwYXJhbHl6ZWQsIHBldHJpZmllZCwgcG9pc29uZWRcIixcbiAgICAgICAgc2Vuc2VzOiBcImRhcmt2aXNpb24gNjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTBcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcInVuZGVyc3RhbmRzIHRoZSBsYW5ndWFnZXMgb2YgaXRzIGNyZWF0b3IgYnV0IGNhbid0IHNwZWFrXCIsXG4gICAgICAgIGNyOiBcIjVcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJCZXJzZXJrXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJXaGVuZXZlciB0aGUgZ29sZW0gc3RhcnRzIGl0cyB0dXJuIHdpdGggNDAgaGl0IHBvaW50cyBvciBmZXdlciwgcm9sbCBhIGQ2LiBPbiBhIDYsIHRoZSBnb2xlbSBnb2VzIGJlcnNlcmsuIE9uIGVhY2ggb2YgaXRzIHR1cm5zIHdoaWxlIGJlcnNlcmssIHRoZSBnb2xlbSBhdHRhY2tzIHRoZSBuZWFyZXN0IGNyZWF0dXJlIGl0IGNhbiBzZWUuIElmIG5vIGNyZWF0dXJlIGlzIG5lYXIgZW5vdWdoIHRvIG1vdmUgdG8gYW5kIGF0dGFjaywgdGhlIGdvbGVtIGF0dGFja3MgYW4gb2JqZWN0LCB3aXRoIHByZWZlcmVuY2UgZm9yIGFuIG9iamVjdCBzbWFsbGVyIHRoYW4gaXRzZWxmLiBPbmNlIHRoZSBnb2xlbSBnb2VzIGJlcnNlcmssIGl0IGNvbnRpbnVlcyB0byBkbyBzbyB1bnRpbCBpdCBpcyBkZXN0cm95ZWQgb3IgcmVnYWlucyBhbGwgaXRzIGhpdCBwb2ludHMuXFxcXG5UaGUgZ29sZW0ncyBjcmVhdG9yLCBpZiB3aXRoaW4gNjAgZmVldCBvZiB0aGUgYmVyc2VyayBnb2xlbSwgY2FuIHRyeSB0byBjYWxtIGl0IGJ5IHNwZWFraW5nIGZpcm1seSBhbmQgcGVyc3Vhc2l2ZWx5LiBUaGUgZ29sZW0gbXVzdCBiZSBhYmxlIHRvIGhlYXIgaXRzIGNyZWF0b3IsIHdobyBtdXN0IHRha2UgYW4gYWN0aW9uIHRvIG1ha2UgYSBEQyAxNSBDaGFyaXNtYSAoUGVyc3Vhc2lvbikgY2hlY2suIElmIHRoZSBjaGVjayBzdWNjZWVkcywgdGhlIGdvbGVtIGNlYXNlcyBiZWluZyBiZXJzZXJrLiBJZiBpdCB0YWtlcyBkYW1hZ2Ugd2hpbGUgc3RpbGwgYXQgNDAgaGl0IHBvaW50cyBvciBmZXdlciwgdGhlIGdvbGVtIG1pZ2h0IGdvIGJlcnNlcmsgYWdhaW4uXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQXZlcnNpb24gb2YgRmlyZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiSWYgdGhlIGdvbGVtIHRha2VzIGZpcmUgZGFtYWdlLCBpdCBoYXMgZGlzYWR2YW50YWdlIG9uIGF0dGFjayByb2xscyBhbmQgYWJpbGl0eSBjaGVja3MgdW50aWwgdGhlIGVuZCBvZiBpdHMgbmV4dCB0dXJuLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkltbXV0YWJsZSBGb3JtXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZ29sZW0gaXMgaW1tdW5lIHRvIGFueSBzcGVsbCBvciBlZmZlY3QgdGhhdCB3b3VsZCBhbHRlciBpdHMgZm9ybS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJMaWdodG5pbmcgQWJzb3JwdGlvblwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiV2hlbmV2ZXIgdGhlIGdvbGVtIGlzIHN1YmplY3RlZCB0byBsaWdodG5pbmcgZGFtYWdlLCBpdCB0YWtlcyBubyBkYW1hZ2UgYW5kIGluc3RlYWQgcmVnYWlucyBhIG51bWJlciBvZiBoaXQgcG9pbnRzIGVxdWFsIHRvIHRoZSBsaWdodG5pbmcgZGFtYWdlIGRlYWx0LlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk1hZ2ljIFJlc2lzdGFuY2VcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBnb2xlbSBoYXMgYWR2YW50YWdlIG9uIHNhdmluZyB0aHJvd3MgYWdhaW5zdCBzcGVsbHMgYW5kIG90aGVyIG1hZ2ljYWwgZWZmZWN0cy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJNYWdpYyBXZWFwb25zXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZ29sZW0ncyB3ZWFwb24gYXR0YWNrcyBhcmUgbWFnaWNhbC5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBnb2xlbSBtYWtlcyB0d28gc2xhbSBhdHRhY2tzLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlNsYW1cIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs3IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTMgKDJkOCArIDQpIGJsdWRnZW9uaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDcsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMmQ4XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiA0XG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJGbHlpbmcgU25ha2VcIixcbiAgICAgICAgc2l6ZTogXCJUaW55XCIsXG4gICAgICAgIHR5cGU6IFwiYmVhc3RcIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcInVuYWxpZ25lZFwiLFxuICAgICAgICBhYzogMTQsXG4gICAgICAgIGhwOiA1LFxuICAgICAgICBoaXRfZGljZTogXCIyZDRcIixcbiAgICAgICAgc3BlZWQ6IFwiMzAgZnQuLCBmbHkgNjAgZnQuLCBzd2ltIDMwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzQsIDE4LCAxMSwgMiwgMTIsIDVdLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcbiAgICAgICAgc2Vuc2VzOiBcImJsaW5kc2lnaHQgMTAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTFcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcIlwiLFxuICAgICAgICBjcjogXCIxLzhcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJGbHlieVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIHNuYWtlIGRvZXNuJ3QgcHJvdm9rZSBvcHBvcnR1bml0eSBhdHRhY2tzIHdoZW4gaXQgZmxpZXMgb3V0IG9mIGFuIGVuZW15J3MgcmVhY2guXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkJpdGVcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs2IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMSBwaWVyY2luZyBkYW1hZ2UgcGx1cyA3ICgzZDQpIHBvaXNvbiBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA2LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogMVxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiRmx5aW5nIFN3b3JkXCIsXG4gICAgICAgIHNpemU6IFwiU21hbGxcIixcbiAgICAgICAgdHlwZTogXCJjb25zdHJ1Y3RcIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcInVuYWxpZ25lZFwiLFxuICAgICAgICBhYzogMTcsXG4gICAgICAgIGhwOiAxNyxcbiAgICAgICAgaGl0X2RpY2U6IFwiNWQ2ICsgLTFcIixcbiAgICAgICAgc3BlZWQ6IFwiMCBmdC4sIGZseSA1MCBmdC4gSXQgY2FuIGhvdmVyLlwiLFxuICAgICAgICBzdGF0czogWzEyLCAxNSwgMTEsIDEsIDUsIDFdLFxuICAgICAgICBzYXZlczogW3sgZGV4dGVyaXR5OiA0IH1dLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcInBvaXNvbiwgcHN5Y2hpY1wiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczpcbiAgICAgICAgICAgIFwiYmxpbmRlZCwgY2hhcm1lZCwgZGVhZmVuZWQsIGZyaWdodGVuZWQsIHBhcmFseXplZCwgcGV0cmlmaWVkLCBwb2lzb25lZFwiLFxuICAgICAgICBzZW5zZXM6IFwiYmxpbmRzaWdodCA2MCBmdC4gKGJsaW5kIGJleW9uZCB0aGlzIHJhZGl1cyksIHBhc3NpdmUgUGVyY2VwdGlvbiA3XCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJcIixcbiAgICAgICAgY3I6IFwiMS80XCIsXG4gICAgICAgIHRyYWl0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQW50aW1hZ2ljIFN1c2NlcHRpYmlsaXR5XCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgc3dvcmQgaXMgaW5jYXBhY2l0YXRlZCB3aGlsZSBpbiB0aGUgYXJlYSBvZiBhbiBhbnRpbWFnaWMgZmllbGQuIElmIHRhcmdldGVkIGJ5IGRpc3BlbCBtYWdpYywgdGhlIHN3b3JkIG11c3Qgc3VjY2VlZCBvbiBhIENvbnN0aXR1dGlvbiBzYXZpbmcgdGhyb3cgYWdhaW5zdCB0aGUgY2FzdGVyJ3Mgc3BlbGwgc2F2ZSBEQyBvciBmYWxsIHVuY29uc2Npb3VzIGZvciAxIG1pbnV0ZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJGYWxzZSBBcHBlYXJhbmNlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJXaGlsZSB0aGUgc3dvcmQgcmVtYWlucyBtb3Rpb25sZXNzIGFuZCBpc24ndCBmbHlpbmcsIGl0IGlzIGluZGlzdGluZ3Vpc2hhYmxlIGZyb20gYSBub3JtYWwgc3dvcmQuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkxvbmdzd29yZFwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzMgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiA1ICgxZDggKyAxKSBzbGFzaGluZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAzLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjFkOFwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogMVxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiRnJvZ1wiLFxuICAgICAgICBzaXplOiBcIlRpbnlcIixcbiAgICAgICAgdHlwZTogXCJiZWFzdFwiLFxuICAgICAgICBzdWJ0eXBlOiBcIlwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwidW5hbGlnbmVkXCIsXG4gICAgICAgIGFjOiAxMSxcbiAgICAgICAgaHA6IDEsXG4gICAgICAgIGhpdF9kaWNlOiBcIjFkNCArIC0yXCIsXG4gICAgICAgIHNwZWVkOiBcIjIwIGZ0Liwgc3dpbSAyMCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsxLCAxMywgOCwgMSwgOCwgM10sXG4gICAgICAgIHNraWxsc2F2ZXM6IFt7IHBlcmNlcHRpb246IDEgfSwgeyBzdGVhbHRoOiAzIH1dLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcbiAgICAgICAgc2Vuc2VzOiBcImRhcmt2aXNpb24gMzAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTFcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcIlwiLFxuICAgICAgICBjcjogXCIwXCIsXG4gICAgICAgIHRyYWl0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQW1waGliaW91c1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGZyb2cgY2FuIGJyZWF0aGUgYWlyIGFuZCB3YXRlclwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlN0YW5kaW5nIExlYXBcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBmcm9nJ3MgbG9uZyBqdW1wIGlzIHVwIHRvIDEwIGZ0LiBhbmQgaXRzIGhpZ2gganVtcCBpcyB1cCB0byA1IGZ0Liwgd2l0aCBvciB3aXRob3V0IGEgcnVubmluZyBzdGFydC5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIkZyb3N0IEdpYW50XCIsXG4gICAgICAgIHNpemU6IFwiSHVnZVwiLFxuICAgICAgICB0eXBlOiBcImdpYW50XCIsXG4gICAgICAgIHN1YnR5cGU6IFwiXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJuZXV0cmFsIGV2aWxcIixcbiAgICAgICAgYWM6IDE1LFxuICAgICAgICBocDogMTM4LFxuICAgICAgICBoaXRfZGljZTogXCIxMmQxMiArIDYwXCIsXG4gICAgICAgIHNwZWVkOiBcIjQwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzIzLCA5LCAyMSwgOSwgMTAsIDEyXSxcbiAgICAgICAgc2F2ZXM6IFt7IGNvbnN0aXR1dGlvbjogOCB9LCB7IHdpc2RvbTogMyB9LCB7IGNoYXJpc21hOiA0IH1dLFxuICAgICAgICBza2lsbHNhdmVzOiBbeyBhdGhsZXRpY3M6IDkgfSwgeyBwZXJjZXB0aW9uOiAzIH1dLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcImNvbGRcIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIHNlbnNlczogXCJwYXNzaXZlIFBlcmNlcHRpb24gMTNcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcIkdpYW50XCIsXG4gICAgICAgIGNyOiBcIjhcIixcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBnaWFudCBtYWtlcyB0d28gZ3JlYXRheGUgYXR0YWNrcy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJHcmVhdGF4ZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzkgdG8gaGl0LCByZWFjaCAxMCBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMjUgKDNkMTIgKyA2KSBzbGFzaGluZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA5LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjNkMTJcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDZcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJSb2NrXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJSYW5nZWQgV2VhcG9uIEF0dGFjazogKzkgdG8gaGl0LCByYW5nZSA2MC8yNDAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDI4ICg0ZDEwICsgNikgYmx1ZGdlb25pbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogOSxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCI0ZDEwXCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiA2XG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJHYXJnb3lsZVwiLFxuICAgICAgICBzaXplOiBcIk1lZGl1bVwiLFxuICAgICAgICB0eXBlOiBcImVsZW1lbnRhbFwiLFxuICAgICAgICBzdWJ0eXBlOiBcIlwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwiY2hhb3RpYyBldmlsXCIsXG4gICAgICAgIGFjOiAxNSxcbiAgICAgICAgaHA6IDUyLFxuICAgICAgICBoaXRfZGljZTogXCI3ZDggKyAyMFwiLFxuICAgICAgICBzcGVlZDogXCIzMCBmdC4sIGZseSA2MCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsxNSwgMTEsIDE2LCA2LCAxMSwgN10sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczpcbiAgICAgICAgICAgIFwiYmx1ZGdlb25pbmcsIHBpZXJjaW5nLCBhbmQgc2xhc2hpbmcgZnJvbSBub25tYWdpY2FsIHdlYXBvbnMgdGhhdCBhcmVuJ3QgYWRhbWFudGluZVwiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczogXCJwb2lzb25cIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiZXhoYXVzdGlvbiwgcGV0cmlmaWVkLCBwb2lzb25lZFwiLFxuICAgICAgICBzZW5zZXM6IFwiZGFya3Zpc2lvbiA2MCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxMFwiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiVGVycmFuXCIsXG4gICAgICAgIGNyOiBcIjJcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJGYWxzZSBBcHBlYXJhbmNlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJXaGlsZSB0aGUgZ2FyZ295bGUgcmVtYWlucyBtb3Rpb24gbGVzcywgaXQgaXMgaW5kaXN0aW5ndWlzaGFibGUgZnJvbSBhbiBpbmFuaW1hdGUgc3RhdHVlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJNdWx0aWF0dGFja1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGdhcmdveWxlIG1ha2VzIHR3byBhdHRhY2tzOiBvbmUgd2l0aCBpdHMgYml0ZSBhbmQgb25lIHdpdGggaXRzIGNsYXdzLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkJpdGVcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs0IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogNSAoMWQ2ICsgMikgcGllcmNpbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIxZDZcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJDbGF3c1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzQgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiA1ICgxZDYgKyAyKSBzbGFzaGluZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA0LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjFkNlwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogMlxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiR2VsYXRpbm91cyBDdWJlXCIsXG4gICAgICAgIHNpemU6IFwiTGFyZ2VcIixcbiAgICAgICAgdHlwZTogXCJvb3plXCIsXG4gICAgICAgIHN1YnR5cGU6IFwiXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcbiAgICAgICAgYWM6IDYsXG4gICAgICAgIGhwOiA4NCxcbiAgICAgICAgaGl0X2RpY2U6IFwiOGQxMCArIDQwXCIsXG4gICAgICAgIHNwZWVkOiBcIjE1IGZ0LlwiLFxuICAgICAgICBzdGF0czogWzE0LCAzLCAyMCwgMSwgNiwgMV0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOlxuICAgICAgICAgICAgXCJibGluZGVkLCBjaGFybWVkLCBkZWFmZW5lZCwgZXhoYXVzdGlvbiwgZnJpZ2h0ZW5lZCwgcHJvbmVcIixcbiAgICAgICAgc2Vuc2VzOiBcImJsaW5kc2lnaHQgNjAgZnQuIChibGluZCBiZXlvbmQgdGhpcyByYWRpdXMpLCBwYXNzaXZlIFBlcmNlcHRpb24gOFwiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiXCIsXG4gICAgICAgIGNyOiBcIjJcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJPb3plIEN1YmVcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBjdWJlIHRha2VzIHVwIGl0cyBlbnRpcmUgc3BhY2UuIE90aGVyIGNyZWF0dXJlcyBjYW4gZW50ZXIgdGhlIHNwYWNlLCBidXQgYSBjcmVhdHVyZSB0aGF0IGRvZXMgc28gaXMgc3ViamVjdGVkIHRvIHRoZSBjdWJlJ3MgRW5ndWxmIGFuZCBoYXMgZGlzYWR2YW50YWdlIG9uIHRoZSBzYXZpbmcgdGhyb3cuXFxcXG5DcmVhdHVyZXMgaW5zaWRlIHRoZSBjdWJlIGNhbiBiZSBzZWVuIGJ1dCBoYXZlIHRvdGFsIGNvdmVyLlxcXFxuQSBjcmVhdHVyZSB3aXRoaW4gNSBmZWV0IG9mIHRoZSBjdWJlIGNhbiB0YWtlIGFuIGFjdGlvbiB0byBwdWxsIGEgY3JlYXR1cmUgb3Igb2JqZWN0IG91dCBvZiB0aGUgY3ViZS4gRG9pbmcgc28gcmVxdWlyZXMgYSBzdWNjZXNzZnVsIERDIDEyIFN0cmVuZ3RoIGNoZWNrLCBhbmQgdGhlIGNyZWF0dXJlIG1ha2luZyB0aGUgYXR0ZW1wdCB0YWtlcyAxMCAoM2Q2KSBhY2lkIGRhbWFnZS5cXFxcblRoZSBjdWJlIGNhbiBob2xkIG9ubHkgb25lIExhcmdlIGNyZWF0dXJlIG9yIHVwIHRvIGZvdXIgTWVkaXVtIG9yIHNtYWxsZXIgY3JlYXR1cmVzIGluc2lkZSBpdCBhdCBhIHRpbWUuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiVHJhbnNwYXJlbnRcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIkV2ZW4gd2hlbiB0aGUgY3ViZSBpcyBpbiBwbGFpbiBzaWdodCwgaXQgdGFrZXMgYSBzdWNjZXNzZnVsIERDIDE1IFdpc2RvbSAoUGVyY2VwdGlvbikgY2hlY2sgdG8gc3BvdCBhIGN1YmUgdGhhdCBoYXMgbmVpdGhlciBtb3ZlZCBub3IgYXR0YWNrZWQuIEEgY3JlYXR1cmUgdGhhdCB0cmllcyB0byBlbnRlciB0aGUgY3ViZSdzIHNwYWNlIHdoaWxlIHVuYXdhcmUgb2YgdGhlIGN1YmUgaXMgc3VycHJpc2VkIGJ5IHRoZSBjdWJlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJQc2V1ZG9wb2RcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs0IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSBjcmVhdHVyZS4gSGl0OiAxMCAoM2Q2KSBhY2lkIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDQsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiM2Q2XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJFbmd1bGZcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBjdWJlIG1vdmVzIHVwIHRvIGl0cyBzcGVlZC4gV2hpbGUgZG9pbmcgc28sIGl0IGNhbiBlbnRlciBMYXJnZSBvciBzbWFsbGVyIGNyZWF0dXJlcycgc3BhY2VzLiBXaGVuZXZlciB0aGUgY3ViZSBlbnRlcnMgYSBjcmVhdHVyZSdzIHNwYWNlLCB0aGUgY3JlYXR1cmUgbXVzdCBtYWtlIGEgREMgMTIgRGV4dGVyaXR5IHNhdmluZyB0aHJvdy5cXFxcbk9uIGEgc3VjY2Vzc2Z1bCBzYXZlLCB0aGUgY3JlYXR1cmUgY2FuIGNob29zZSB0byBiZSBwdXNoZWQgNSBmZWV0IGJhY2sgb3IgdG8gdGhlIHNpZGUgb2YgdGhlIGN1YmUuIEEgY3JlYXR1cmUgdGhhdCBjaG9vc2VzIG5vdCB0byBiZSBwdXNoZWQgc3VmZmVycyB0aGUgY29uc2VxdWVuY2VzIG9mIGEgZmFpbGVkIHNhdmluZyB0aHJvdy5cXFxcbk9uIGEgZmFpbGVkIHNhdmUsIHRoZSBjdWJlIGVudGVycyB0aGUgY3JlYXR1cmUncyBzcGFjZSwgYW5kIHRoZSBjcmVhdHVyZSB0YWtlcyAxMCAoM2Q2KSBhY2lkIGRhbWFnZSBhbmQgaXMgZW5ndWxmZWQuIFRoZSBlbmd1bGZlZCBjcmVhdHVyZSBjYW4ndCBicmVhdGhlLCBpcyByZXN0cmFpbmVkLCBhbmQgdGFrZXMgMjEgKDZkNikgYWNpZCBkYW1hZ2UgYXQgdGhlIHN0YXJ0IG9mIGVhY2ggb2YgdGhlIGN1YmUncyB0dXJucy4gV2hlbiB0aGUgY3ViZSBtb3ZlcywgdGhlIGVuZ3VsZmVkIGNyZWF0dXJlIG1vdmVzIHdpdGggaXQuXFxcXG5BbiBlbmd1bGZlZCBjcmVhdHVyZSBjYW4gdHJ5IHRvIGVzY2FwZSBieSB0YWtpbmcgYW4gYWN0aW9uIHRvIG1ha2UgYSBEQyAxMiBTdHJlbmd0aCBjaGVjay4gT24gYSBzdWNjZXNzLCB0aGUgY3JlYXR1cmUgZXNjYXBlcyBhbmQgZW50ZXJzIGEgc3BhY2Ugb2YgaXRzIGNob2ljZSB3aXRoaW4gNSBmZWV0IG9mIHRoZSBjdWJlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiR2hhc3RcIixcbiAgICAgICAgc2l6ZTogXCJNZWRpdW1cIixcbiAgICAgICAgdHlwZTogXCJ1bmRlYWRcIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcImNoYW90aWMgZXZpbFwiLFxuICAgICAgICBhYzogMTMsXG4gICAgICAgIGhwOiAzNixcbiAgICAgICAgaGl0X2RpY2U6IFwiOGQ4XCIsXG4gICAgICAgIHNwZWVkOiBcIjMwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzE2LCAxNywgMTAsIDExLCAxMCwgOF0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwibmVjcm90aWNcIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwicG9pc29uZWRcIixcbiAgICAgICAgc2Vuc2VzOiBcImRhcmt2aXNpb24gNjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTBcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcIkNvbW1vblwiLFxuICAgICAgICBjcjogXCIyXCIsXG4gICAgICAgIHRyYWl0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RlbmNoXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJBbnkgY3JlYXR1cmUgdGhhdCBzdGFydHMgaXRzIHR1cm4gd2l0aGluIDUgZnQuIG9mIHRoZSBnaGFzdCBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxMCBDb25zdGl0dXRpb24gc2F2aW5nIHRocm93IG9yIGJlIHBvaXNvbmVkIHVudGlsIHRoZSBzdGFydCBvZiBpdHMgbmV4dCB0dXJuLiBPbiBhIHN1Y2Nlc3NmdWwgc2F2aW5nIHRocm93LCB0aGUgY3JlYXR1cmUgaXMgaW1tdW5lIHRvIHRoZSBnaGFzdCdzIFN0ZW5jaCBmb3IgMjQgaG91cnMuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiVHVybiBEZWZpYW5jZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGdoYXN0IGFuZCBhbnkgZ2hvdWxzIHdpdGhpbiAzMCBmdC4gb2YgaXQgaGF2ZSBhZHZhbnRhZ2Ugb24gc2F2aW5nIHRocm93cyBhZ2FpbnN0IGVmZmVjdHMgdGhhdCB0dXJuIHVuZGVhZC5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQml0ZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzMgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIGNyZWF0dXJlLiBIaXQ6IDEyICgyZDggKyAzKSBwaWVyY2luZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAzLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjJkOFwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogM1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkNsYXdzXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNSB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDEwICgyZDYgKyAzKSBzbGFzaGluZyBkYW1hZ2UuIElmIHRoZSB0YXJnZXQgaXMgYSBjcmVhdHVyZSBvdGhlciB0aGFuIGFuIHVuZGVhZCwgaXQgbXVzdCBzdWNjZWVkIG9uIGEgREMgMTAgQ29uc3RpdHV0aW9uIHNhdmluZyB0aHJvdyBvciBiZSBwYXJhbHl6ZWQgZm9yIDEgbWludXRlLiBUaGUgdGFyZ2V0IGNhbiByZXBlYXQgdGhlIHNhdmluZyB0aHJvdyBhdCB0aGUgZW5kIG9mIGVhY2ggb2YgaXRzIHR1cm5zLCBlbmRpbmcgdGhlIGVmZmVjdCBvbiBpdHNlbGYgb24gYSBzdWNjZXNzLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNSxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIyZDZcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDNcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIkdob3N0XCIsXG4gICAgICAgIHNpemU6IFwiTWVkaXVtXCIsXG4gICAgICAgIHR5cGU6IFwidW5kZWFkXCIsXG4gICAgICAgIHN1YnR5cGU6IFwiXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJhbnkgYWxpZ25tZW50XCIsXG4gICAgICAgIGFjOiAxMSxcbiAgICAgICAgaHA6IDQ1LFxuICAgICAgICBoaXRfZGljZTogXCIxMGQ4XCIsXG4gICAgICAgIHNwZWVkOiBcIjAgZnQuLCBmbHkgNDAgZnQuIEl0IGNhbiBob3Zlci5cIixcbiAgICAgICAgc3RhdHM6IFs3LCAxMywgMTAsIDEwLCAxMiwgMTddLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6XG4gICAgICAgICAgICBcImFjaWQsIGZpcmUsIGxpZ2h0bmluZywgdGh1bmRlcjsgYmx1ZGdlb25pbmcsIHBpZXJjaW5nLCBhbmQgc2xhc2hpbmcgZnJvbSBub25tYWdpY2FsIHdlYXBvbnNcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwiY29sZCwgbmVjcm90aWMsIHBvaXNvblwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczpcbiAgICAgICAgICAgIFwiY2hhcm1lZCwgZXhoYXVzdGlvbiwgZnJpZ2h0ZW5lZCwgZ3JhcHBsZWQsIHBhcmFseXplZCwgcGV0cmlmaWVkLCBwb2lzb25lZCwgcHJvbmUsIHJlc3RyYWluZWRcIixcbiAgICAgICAgc2Vuc2VzOiBcImRhcmt2aXNpb24gNjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTFcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcImFueSBsYW5ndWFnZXMgaXQga25ldyBpbiBsaWZlXCIsXG4gICAgICAgIGNyOiBcIjRcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJFdGhlcmVhbCBTaWdodFwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGdob3N0IGNhbiBzZWUgNjAgZnQuIGludG8gdGhlIEV0aGVyZWFsIFBsYW5lIHdoZW4gaXQgaXMgb24gdGhlIE1hdGVyaWFsIFBsYW5lLCBhbmQgdmljZSB2ZXJzYS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJJbmNvcnBvcmVhbCBNb3ZlbWVudFwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGdob3N0IGNhbiBtb3ZlIHRocm91Z2ggb3RoZXIgY3JlYXR1cmVzIGFuZCBvYmplY3RzIGFzIGlmIHRoZXkgd2VyZSBkaWZmaWN1bHQgdGVycmFpbi4gSXQgdGFrZXMgNSAoMWQxMCkgZm9yY2UgZGFtYWdlIGlmIGl0IGVuZHMgaXRzIHR1cm4gaW5zaWRlIGFuIG9iamVjdC5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiV2l0aGVyaW5nIFRvdWNoXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNSB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDE3ICg0ZDYgKyAzKSBuZWNyb3RpYyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA1LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjRkNlwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogM1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkV0aGVyZWFsbmVzc1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGdob3N0IGVudGVycyB0aGUgRXRoZXJlYWwgUGxhbmUgZnJvbSB0aGUgTWF0ZXJpYWwgUGxhbmUsIG9yIHZpY2UgdmVyc2EuIEl0IGlzIHZpc2libGUgb24gdGhlIE1hdGVyaWFsIFBsYW5lIHdoaWxlIGl0IGlzIGluIHRoZSBCb3JkZXIgRXRoZXJlYWwsIGFuZCB2aWNlIHZlcnNhLCB5ZXQgaXQgY2FuJ3QgYWZmZWN0IG9yIGJlIGFmZmVjdGVkIGJ5IGFueXRoaW5nIG9uIHRoZSBvdGhlciBwbGFuZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJIb3JyaWZ5aW5nIFZpc2FnZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiRWFjaCBub24tdW5kZWFkIGNyZWF0dXJlIHdpdGhpbiA2MCBmdC4gb2YgdGhlIGdob3N0IHRoYXQgY2FuIHNlZSBpdCBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxMyBXaXNkb20gc2F2aW5nIHRocm93IG9yIGJlIGZyaWdodGVuZWQgZm9yIDEgbWludXRlLiBJZiB0aGUgc2F2ZSBmYWlscyBieSA1IG9yIG1vcmUsIHRoZSB0YXJnZXQgYWxzbyBhZ2VzIDFkNCBfIDEwIHllYXJzLiBBIGZyaWdodGVuZWQgdGFyZ2V0IGNhbiByZXBlYXQgdGhlIHNhdmluZyB0aHJvdyBhdCB0aGUgZW5kIG9mIGVhY2ggb2YgaXRzIHR1cm5zLCBlbmRpbmcgdGhlIGZyaWdodGVuZWQgY29uZGl0aW9uIG9uIGl0c2VsZiBvbiBhIHN1Y2Nlc3MuIElmIGEgdGFyZ2V0J3Mgc2F2aW5nIHRocm93IGlzIHN1Y2Nlc3NmdWwgb3IgdGhlIGVmZmVjdCBlbmRzIGZvciBpdCwgdGhlIHRhcmdldCBpcyBpbW11bmUgdG8gdGhpcyBnaG9zdCdzIEhvcnJpZnlpbmcgVmlzYWdlIGZvciB0aGUgbmV4dCAyNCBob3Vycy4gVGhlIGFnaW5nIGVmZmVjdCBjYW4gYmUgcmV2ZXJzZWQgd2l0aCBhIGdyZWF0ZXIgcmVzdG9yYXRpb24gc3BlbGwsIGJ1dCBvbmx5IHdpdGhpbiAyNCBob3VycyBvZiBpdCBvY2N1cnJpbmcuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiUG9zc2Vzc2lvbiAoUmVjaGFyZ2UgNilcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk9uZSBodW1hbm9pZCB0aGF0IHRoZSBnaG9zdCBjYW4gc2VlIHdpdGhpbiA1IGZ0LiBvZiBpdCBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxMyBDaGFyaXNtYSBzYXZpbmcgdGhyb3cgb3IgYmUgcG9zc2Vzc2VkIGJ5IHRoZSBnaG9zdDsgdGhlIGdob3N0IHRoZW4gZGlzYXBwZWFycywgYW5kIHRoZSB0YXJnZXQgaXMgaW5jYXBhY2l0YXRlZCBhbmQgbG9zZXMgY29udHJvbCBvZiBpdHMgYm9keS4gVGhlIGdob3N0IG5vdyBjb250cm9scyB0aGUgYm9keSBidXQgZG9lc24ndCBkZXByaXZlIHRoZSB0YXJnZXQgb2YgYXdhcmVuZXNzLiBUaGUgZ2hvc3QgY2FuJ3QgYmUgdGFyZ2V0ZWQgYnkgYW55IGF0dGFjaywgc3BlbGwsIG9yIG90aGVyIGVmZmVjdCwgZXhjZXB0IG9uZXMgdGhhdCB0dXJuIHVuZGVhZCwgYW5kIGl0IHJldGFpbnMgaXRzIGFsaWdubWVudCwgSW50ZWxsaWdlbmNlLCBXaXNkb20sIENoYXJpc21hLCBhbmQgaW1tdW5pdHkgdG8gYmVpbmcgY2hhcm1lZCBhbmQgZnJpZ2h0ZW5lZC4gSXQgb3RoZXJ3aXNlIHVzZXMgdGhlIHBvc3Nlc3NlZCB0YXJnZXQncyBzdGF0aXN0aWNzLCBidXQgZG9lc24ndCBnYWluIGFjY2VzcyB0byB0aGUgdGFyZ2V0J3Mga25vd2xlZGdlLCBjbGFzcyBmZWF0dXJlcywgb3IgcHJvZmljaWVuY2llcy5cXFxcblRoZSBwb3NzZXNzaW9uIGxhc3RzIHVudGlsIHRoZSBib2R5IGRyb3BzIHRvIDAgaGl0IHBvaW50cywgdGhlIGdob3N0IGVuZHMgaXQgYXMgYSBib251cyBhY3Rpb24sIG9yIHRoZSBnaG9zdCBpcyB0dXJuZWQgb3IgZm9yY2VkIG91dCBieSBhbiBlZmZlY3QgbGlrZSB0aGUgZGlzcGVsIGV2aWwgYW5kIGdvb2Qgc3BlbGwuIFdoZW4gdGhlIHBvc3Nlc3Npb24gZW5kcywgdGhlIGdob3N0IHJlYXBwZWFycyBpbiBhbiB1bm9jY3VwaWVkIHNwYWNlIHdpdGhpbiA1IGZ0LiBvZiB0aGUgYm9keS4gVGhlIHRhcmdldCBpcyBpbW11bmUgdG8gdGhpcyBnaG9zdCdzIFBvc3Nlc3Npb24gZm9yIDI0IGhvdXJzIGFmdGVyIHN1Y2NlZWRpbmcgb24gdGhlIHNhdmluZyB0aHJvdyBvciBhZnRlciB0aGUgcG9zc2Vzc2lvbiBlbmRzLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiR2hvdWxcIixcbiAgICAgICAgc2l6ZTogXCJNZWRpdW1cIixcbiAgICAgICAgdHlwZTogXCJ1bmRlYWRcIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcImNoYW90aWMgZXZpbFwiLFxuICAgICAgICBhYzogMTIsXG4gICAgICAgIGhwOiAyMixcbiAgICAgICAgaGl0X2RpY2U6IFwiNWQ4ICsgLTFcIixcbiAgICAgICAgc3BlZWQ6IFwiMzAgZnQuXCIsXG4gICAgICAgIHN0YXRzOiBbMTMsIDE1LCAxMCwgNywgMTAsIDZdLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJwb2lzb25lZFwiLFxuICAgICAgICBzZW5zZXM6IFwiZGFya3Zpc2lvbiA2MCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxMFwiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiQ29tbW9uXCIsXG4gICAgICAgIGNyOiBcIjFcIixcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQml0ZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzIgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIGNyZWF0dXJlLiBIaXQ6IDkgKDJkNiArIDIpIHBpZXJjaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMmQ2XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiAyXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQ2xhd3NcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs0IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogNyAoMmQ0ICsgMikgc2xhc2hpbmcgZGFtYWdlLiBJZiB0aGUgdGFyZ2V0IGlzIGEgY3JlYXR1cmUgb3RoZXIgdGhhbiBhbiBlbGYgb3IgdW5kZWFkLCBpdCBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxMCBDb25zdGl0dXRpb24gc2F2aW5nIHRocm93IG9yIGJlIHBhcmFseXplZCBmb3IgMSBtaW51dGUuIFRoZSB0YXJnZXQgY2FuIHJlcGVhdCB0aGUgc2F2aW5nIHRocm93IGF0IHRoZSBlbmQgb2YgZWFjaCBvZiBpdHMgdHVybnMsIGVuZGluZyB0aGUgZWZmZWN0IG9uIGl0c2VsZiBvbiBhIHN1Y2Nlc3MuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJHaWFudCBBcGVcIixcbiAgICAgICAgc2l6ZTogXCJIdWdlXCIsXG4gICAgICAgIHR5cGU6IFwiYmVhc3RcIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcInVuYWxpZ25lZFwiLFxuICAgICAgICBhYzogMTIsXG4gICAgICAgIGhwOiAxNTcsXG4gICAgICAgIGhpdF9kaWNlOiBcIjE1ZDEyICsgNTlcIixcbiAgICAgICAgc3BlZWQ6IFwiNDAgZnQuLCBjbGltYiA0MCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsyMywgMTQsIDE4LCA3LCAxMiwgN10sXG4gICAgICAgIHNraWxsc2F2ZXM6IFt7IGF0aGxldGljczogOSB9LCB7IHBlcmNlcHRpb246IDQgfV0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBzZW5zZXM6IFwicGFzc2l2ZSBQZXJjZXB0aW9uIDE0XCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJcIixcbiAgICAgICAgY3I6IFwiN1wiLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJNdWx0aWF0dGFja1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGFwZSBtYWtlcyB0d28gZmlzdCBhdHRhY2tzLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkZpc3RcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs5IHRvIGhpdCwgcmVhY2ggMTAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDIyICgzZDEwICsgNikgYmx1ZGdlb25pbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogOSxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIzZDEwXCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiA2XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiUm9ja1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiUmFuZ2VkIFdlYXBvbiBBdHRhY2s6ICs5IHRvIGhpdCwgcmFuZ2UgNTAvMTAwIGZ0Liwgb25lIHRhcmdldC4gSGl0OiAzMCAoN2Q2ICsgNikgYmx1ZGdlb25pbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogOSxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCI3ZDZcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDZcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIkdpYW50IEJhZGdlclwiLFxuICAgICAgICBzaXplOiBcIk1lZGl1bVwiLFxuICAgICAgICB0eXBlOiBcImJlYXN0XCIsXG4gICAgICAgIHN1YnR5cGU6IFwiXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcbiAgICAgICAgYWM6IDEwLFxuICAgICAgICBocDogMTMsXG4gICAgICAgIGhpdF9kaWNlOiBcIjJkOCArIDRcIixcbiAgICAgICAgc3BlZWQ6IFwiMzAgZnQuLCBidXJyb3cgMTAgZnQuXCIsXG4gICAgICAgIHN0YXRzOiBbMTMsIDEwLCAxNSwgMiwgMTIsIDVdLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcbiAgICAgICAgc2Vuc2VzOiBcImRhcmt2aXNpb24gMzAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTFcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcIlwiLFxuICAgICAgICBjcjogXCIxLzRcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJLZWVuIFNtZWxsXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgYmFkZ2VyIGhhcyBhZHZhbnRhZ2Ugb24gV2lzZG9tIChQZXJjZXB0aW9uKSBjaGVja3MgdGhhdCByZWx5IG9uIHNtZWxsLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJNdWx0aWF0dGFja1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGJhZGdlciBtYWtlcyB0d28gYXR0YWNrczogb25lIHdpdGggaXRzIGJpdGUgYW5kIG9uZSB3aXRoIGl0cyBjbGF3cy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJCaXRlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMyB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDQgKDFkNiArIDEpIHBpZXJjaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDMsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMWQ2XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiAxXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQ2xhd3NcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICszIHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogNiAoMmQ0ICsgMSkgc2xhc2hpbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMyxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIyZDRcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDFcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIkdpYW50IEJhdFwiLFxuICAgICAgICBzaXplOiBcIkxhcmdlXCIsXG4gICAgICAgIHR5cGU6IFwiYmVhc3RcIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcInVuYWxpZ25lZFwiLFxuICAgICAgICBhYzogMTMsXG4gICAgICAgIGhwOiAyMixcbiAgICAgICAgaGl0X2RpY2U6IFwiNGQxMFwiLFxuICAgICAgICBzcGVlZDogXCIxMCBmdC4sIGZseSA2MCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsxNSwgMTYsIDExLCAyLCAxMiwgNl0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBzZW5zZXM6IFwiYmxpbmRzaWdodCA2MCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxMVwiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiXCIsXG4gICAgICAgIGNyOiBcIjEvNFwiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkVjaG9sb2NhdGlvblwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGJhdCBjYW4ndCB1c2UgaXRzIGJsaW5kc2lnaHQgd2hpbGUgZGVhZmVuZWQuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiS2VlbiBIZWFyaW5nXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgYmF0IGhhcyBhZHZhbnRhZ2Ugb24gV2lzZG9tIChQZXJjZXB0aW9uKSBjaGVja3MgdGhhdCByZWx5IG9uIGhlYXJpbmcuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkJpdGVcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs0IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSBjcmVhdHVyZS4gSGl0OiA1ICgxZDYgKyAyKSBwaWVyY2luZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA0LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjFkNlwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogMlxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiR2lhbnQgQm9hclwiLFxuICAgICAgICBzaXplOiBcIkxhcmdlXCIsXG4gICAgICAgIHR5cGU6IFwiYmVhc3RcIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcInVuYWxpZ25lZFwiLFxuICAgICAgICBhYzogMTIsXG4gICAgICAgIGhwOiA0MixcbiAgICAgICAgaGl0X2RpY2U6IFwiNWQxMCArIDE0XCIsXG4gICAgICAgIHNwZWVkOiBcIjQwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzE3LCAxMCwgMTYsIDIsIDcsIDVdLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcbiAgICAgICAgc2Vuc2VzOiBcInBhc3NpdmUgUGVyY2VwdGlvbiA4XCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJcIixcbiAgICAgICAgY3I6IFwiMlwiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkNoYXJnZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiSWYgdGhlIGJvYXIgbW92ZXMgYXQgbGVhc3QgMjAgZnQuIHN0cmFpZ2h0IHRvd2FyZCBhIHRhcmdldCBhbmQgdGhlbiBoaXRzIGl0IHdpdGggYSB0dXNrIGF0dGFjayBvbiB0aGUgc2FtZSB0dXJuLCB0aGUgdGFyZ2V0IHRha2VzIGFuIGV4dHJhIDcgKDJkNikgc2xhc2hpbmcgZGFtYWdlLiBJZiB0aGUgdGFyZ2V0IGlzIGEgY3JlYXR1cmUsIGl0IG11c3Qgc3VjY2VlZCBvbiBhIERDIDEzIFN0cmVuZ3RoIHNhdmluZyB0aHJvdyBvciBiZSBrbm9ja2VkIHByb25lLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIyZDZcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlJlbGVudGxlc3MgKFJlY2hhcmdlcyBhZnRlciBhIFNob3J0IG9yIExvbmcgUmVzdClcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIklmIHRoZSBib2FyIHRha2VzIDEwIGRhbWFnZSBvciBsZXNzIHRoYXQgd291bGQgcmVkdWNlIGl0IHRvIDAgaGl0IHBvaW50cywgaXQgaXMgcmVkdWNlZCB0byAxIGhpdCBwb2ludCBpbnN0ZWFkLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJUdXNrXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNSB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDEwICgyZDYgKyAzKSBzbGFzaGluZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA1LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjJkNlwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogM1xuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiR2lhbnQgQ2VudGlwZWRlXCIsXG4gICAgICAgIHNpemU6IFwiU21hbGxcIixcbiAgICAgICAgdHlwZTogXCJiZWFzdFwiLFxuICAgICAgICBzdWJ0eXBlOiBcIlwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwidW5hbGlnbmVkXCIsXG4gICAgICAgIGFjOiAxMyxcbiAgICAgICAgaHA6IDQsXG4gICAgICAgIGhpdF9kaWNlOiBcIjFkNlwiLFxuICAgICAgICBzcGVlZDogXCIzMCBmdC4sIGNsaW1iIDMwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzUsIDE0LCAxMiwgMSwgNywgM10sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBzZW5zZXM6IFwiYmxpbmRzaWdodCAzMCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiA4XCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJcIixcbiAgICAgICAgY3I6IFwiMS80XCIsXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkJpdGVcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIkJpdGUuIE1lbGVlIFdlYXBvbiBBdHRhY2s6ICs0IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSBjcmVhdHVyZS4gSGl0OiA0ICgxZDQgKyAyKSBwaWVyY2luZyBkYW1hZ2UsIGFuZCB0aGUgdGFyZ2V0IG11c3Qgc3VjY2VlZCBvbiBhIERDIDExIENvbnN0aXR1dGlvbiBzYXZpbmcgdGhyb3cgb3IgdGFrZSAxMCAoM2Q2KSBwb2lzb24gZGFtYWdlLiBJZiB0aGUgcG9pc29uIGRhbWFnZSByZWR1Y2VzIHRoZSB0YXJnZXQgdG8gMCBoaXQgcG9pbnRzLCB0aGUgdGFyZ2V0IGlzIHN0YWJsZSBidXQgcG9pc29uZWQgZm9yIDEgaG91ciwgZXZlbiBhZnRlciByZWdhaW5pbmcgaGl0IHBvaW50cywgYW5kIGlzIHBhcmFseXplZCB3aGlsZSBwb2lzb25lZCBpbiB0aGlzIHdheS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDQsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMWQ0XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiAyXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJHaWFudCBDb25zdHJpY3RvciBTbmFrZVwiLFxuICAgICAgICBzaXplOiBcIkh1Z2VcIixcbiAgICAgICAgdHlwZTogXCJiZWFzdFwiLFxuICAgICAgICBzdWJ0eXBlOiBcIlwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwidW5hbGlnbmVkXCIsXG4gICAgICAgIGFjOiAxMixcbiAgICAgICAgaHA6IDYwLFxuICAgICAgICBoaXRfZGljZTogXCI4ZDEyICsgOFwiLFxuICAgICAgICBzcGVlZDogXCIzMCBmdC4sIHN3aW0gMzAgZnQuXCIsXG4gICAgICAgIHN0YXRzOiBbMTksIDE0LCAxMiwgMSwgMTAsIDNdLFxuICAgICAgICBza2lsbHNhdmVzOiBbeyBwZXJjZXB0aW9uOiAyIH1dLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcbiAgICAgICAgc2Vuc2VzOiBcImJsaW5kc2lnaHQgMTAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTJcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcIlwiLFxuICAgICAgICBjcjogXCIyXCIsXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkJpdGVcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs2IHRvIGhpdCwgcmVhY2ggMTAgZnQuLCBvbmUgY3JlYXR1cmUuIEhpdDogMTEgKDJkNiArIDQpIHBpZXJjaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDYsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMmQ2XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiA0XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQ29uc3RyaWN0XCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNiB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgY3JlYXR1cmUuIEhpdDogMTMgKDJkOCArIDQpIGJsdWRnZW9uaW5nIGRhbWFnZSwgYW5kIHRoZSB0YXJnZXQgaXMgZ3JhcHBsZWQgKGVzY2FwZSBEQyAxNikuIFVudGlsIHRoaXMgZ3JhcHBsZSBlbmRzLCB0aGUgY3JlYXR1cmUgaXMgcmVzdHJhaW5lZCwgYW5kIHRoZSBzbmFrZSBjYW4ndCBjb25zdHJpY3QgYW5vdGhlciB0YXJnZXQuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA2LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjJkOFwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogNFxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiR2lhbnQgQ3JhYlwiLFxuICAgICAgICBzaXplOiBcIk1lZGl1bVwiLFxuICAgICAgICB0eXBlOiBcImJlYXN0XCIsXG4gICAgICAgIHN1YnR5cGU6IFwiXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcbiAgICAgICAgYWM6IDE1LFxuICAgICAgICBocDogMTMsXG4gICAgICAgIGhpdF9kaWNlOiBcIjNkOCArIC0xXCIsXG4gICAgICAgIHNwZWVkOiBcIjMwIGZ0Liwgc3dpbSAzMCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsxMywgMTUsIDExLCAxLCA5LCAzXSxcbiAgICAgICAgc2tpbGxzYXZlczogW3sgc3RlYWx0aDogNCB9XSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIHNlbnNlczogXCJibGluZHNpZ2h0IDMwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDlcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcIlwiLFxuICAgICAgICBjcjogXCIxLzhcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJBbXBoaWJpb3VzXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgY3JhYiBjYW4gYnJlYXRoZSBhaXIgYW5kIHdhdGVyLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJDbGF3XCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMyB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDQgKDFkNiArIDEpIGJsdWRnZW9uaW5nIGRhbWFnZSwgYW5kIHRoZSB0YXJnZXQgaXMgZ3JhcHBsZWQgKGVzY2FwZSBEQyAxMSkuIFRoZSBjcmFiIGhhcyB0d28gY2xhd3MsIGVhY2ggb2Ygd2hpY2ggY2FuIGdyYXBwbGUgb25seSBvbmUgdGFyZ2V0LlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMyxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIxZDZcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDFcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIkdpYW50IENyb2NvZGlsZVwiLFxuICAgICAgICBzaXplOiBcIkh1Z2VcIixcbiAgICAgICAgdHlwZTogXCJiZWFzdFwiLFxuICAgICAgICBzdWJ0eXBlOiBcIlwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwidW5hbGlnbmVkXCIsXG4gICAgICAgIGFjOiAxNCxcbiAgICAgICAgaHA6IDg1LFxuICAgICAgICBoaXRfZGljZTogXCI5ZDEyICsgMjZcIixcbiAgICAgICAgc3BlZWQ6IFwiMzAgZnQuLCBzd2ltIDUwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzIxLCA5LCAxNywgMiwgMTAsIDddLFxuICAgICAgICBza2lsbHNhdmVzOiBbeyBzdGVhbHRoOiA1IH1dLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcbiAgICAgICAgc2Vuc2VzOiBcInBhc3NpdmUgUGVyY2VwdGlvbiAxMFwiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiXCIsXG4gICAgICAgIGNyOiBcIjVcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJIb2xkIEJyZWF0aFwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGNyb2NvZGlsZSBjYW4gaG9sZCBpdHMgYnJlYXRoIGZvciAzMCBtaW51dGVzLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJNdWx0aWF0dGFja1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGNyb2NvZGlsZSBtYWtlcyB0d28gYXR0YWNrczogb25lIHdpdGggaXRzIGJpdGUgYW5kIG9uZSB3aXRoIGl0cyB0YWlsLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkJpdGVcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs4IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMjEgKDNkMTAgKyA1KSBwaWVyY2luZyBkYW1hZ2UsIGFuZCB0aGUgdGFyZ2V0IGlzIGdyYXBwbGVkIChlc2NhcGUgREMgMTYpLiBVbnRpbCB0aGlzIGdyYXBwbGUgZW5kcywgdGhlIHRhcmdldCBpcyByZXN0cmFpbmVkLCBhbmQgdGhlIGNyb2NvZGlsZSBjYW4ndCBiaXRlIGFub3RoZXIgdGFyZ2V0LlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogOCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIzZDEwXCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiA1XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiVGFpbFwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzggdG8gaGl0LCByZWFjaCAxMCBmdC4sIG9uZSB0YXJnZXQgbm90IGdyYXBwbGVkIGJ5IHRoZSBjcm9jb2RpbGUuIEhpdDogMTQgKDJkOCArIDUpIGJsdWRnZW9uaW5nIGRhbWFnZS4gSWYgdGhlIHRhcmdldCBpcyBhIGNyZWF0dXJlLCBpdCBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxNiBTdHJlbmd0aCBzYXZpbmcgdGhyb3cgb3IgYmUga25vY2tlZCBwcm9uZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDgsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMmQ4XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiA1XG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJHaWFudCBFYWdsZVwiLFxuICAgICAgICBzaXplOiBcIkxhcmdlXCIsXG4gICAgICAgIHR5cGU6IFwiYmVhc3RcIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcIm5ldXRyYWwgZ29vZFwiLFxuICAgICAgICBhYzogMTMsXG4gICAgICAgIGhwOiAyNixcbiAgICAgICAgaGl0X2RpY2U6IFwiNGQxMCArIDRcIixcbiAgICAgICAgc3BlZWQ6IFwiMTAgZnQuLCBmbHkgODAgZnQuXCIsXG4gICAgICAgIHN0YXRzOiBbMTYsIDE3LCAxMywgOCwgMTQsIDEwXSxcbiAgICAgICAgc2tpbGxzYXZlczogW3sgcGVyY2VwdGlvbjogNCB9XSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIHNlbnNlczogXCJwYXNzaXZlIFBlcmNlcHRpb24gMTRcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcIkdpYW50IEVhZ2xlLCB1bmRlcnN0YW5kcyBDb21tb24gYW5kIEF1cmFuIGJ1dCBjYW4ndCBzcGVha1wiLFxuICAgICAgICBjcjogXCIxXCIsXG4gICAgICAgIHRyYWl0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiS2VlbiBTaWdodFwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGVhZ2xlIGhhcyBhZHZhbnRhZ2Ugb24gV2lzZG9tIChQZXJjZXB0aW9uKSBjaGVja3MgdGhhdCByZWx5IG9uIHNpZ2h0LlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJNdWx0aWF0dGFja1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGVhZ2xlIG1ha2VzIHR3byBhdHRhY2tzOiBvbmUgd2l0aCBpdHMgYmVhayBhbmQgb25lIHdpdGggaXRzIHRhbG9ucy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJCZWFrXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNSB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDYgKDFkNiArIDMpIHBpZXJjaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDUsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMWQ2XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiAzXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiVGFsb25zXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNSB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDEwICgyZDYgKyAzKSBzbGFzaGluZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA1LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjJkNlwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogM1xuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiR2lhbnQgRWxrXCIsXG4gICAgICAgIHNpemU6IFwiSHVnZVwiLFxuICAgICAgICB0eXBlOiBcImJlYXN0XCIsXG4gICAgICAgIHN1YnR5cGU6IFwiXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcbiAgICAgICAgYWM6IDE1LFxuICAgICAgICBocDogNDIsXG4gICAgICAgIGhpdF9kaWNlOiBcIjVkMTIgKyA5XCIsXG4gICAgICAgIHNwZWVkOiBcIjYwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzE5LCAxNiwgMTQsIDcsIDE0LCAxMF0sXG4gICAgICAgIHNraWxsc2F2ZXM6IFt7IHBlcmNlcHRpb246IDQgfV0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBzZW5zZXM6IFwicGFzc2l2ZSBQZXJjZXB0aW9uIDE0XCIsXG4gICAgICAgIGxhbmd1YWdlczpcbiAgICAgICAgICAgIFwiR2lhbnQgRWxrLCB1bmRlcnN0YW5kcyBDb21tb24sIEVsdmlzaCwgYW5kIFN5bHZhbiBidXQgY2FuJ3Qgc3BlYWtcIixcbiAgICAgICAgY3I6IFwiMlwiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkNoYXJnZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiSWYgdGhlIGVsayBtb3ZlcyBhdCBsZWFzdCAyMCBmdC4gc3RyYWlnaHQgdG93YXJkIGEgdGFyZ2V0IGFuZCB0aGVuIGhpdHMgaXQgd2l0aCBhIHJhbSBhdHRhY2sgb24gdGhlIHNhbWUgdHVybiwgdGhlIHRhcmdldCB0YWtlcyBhbiBleHRyYSA3ICgyZDYpIGRhbWFnZS4gSWYgdGhlIHRhcmdldCBpcyBhIGNyZWF0dXJlLCBpdCBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxNCBTdHJlbmd0aCBzYXZpbmcgdGhyb3cgb3IgYmUga25vY2tlZCBwcm9uZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDAsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMmQ2XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiUmFtXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNiB0byBoaXQsIHJlYWNoIDEwIGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxMSAoMmQ2ICsgNCkgYmx1ZGdlb25pbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIyZDZcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDRcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJIb292ZXNcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs2IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSBwcm9uZSBjcmVhdHVyZS4gSGl0OiAyMiAoNGQ4ICsgNCkgYmx1ZGdlb25pbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCI0ZDhcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDRcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIkdpYW50IEZpcmUgQmVldGxlXCIsXG4gICAgICAgIHNpemU6IFwiU21hbGxcIixcbiAgICAgICAgdHlwZTogXCJiZWFzdFwiLFxuICAgICAgICBzdWJ0eXBlOiBcIlwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwidW5hbGlnbmVkXCIsXG4gICAgICAgIGFjOiAxMyxcbiAgICAgICAgaHA6IDQsXG4gICAgICAgIGhpdF9kaWNlOiBcIjFkNlwiLFxuICAgICAgICBzcGVlZDogXCIzMCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFs4LCAxMCwgMTIsIDEsIDcsIDNdLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcbiAgICAgICAgc2Vuc2VzOiBcImJsaW5kc2lnaHQgMzAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gOFwiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiXCIsXG4gICAgICAgIGNyOiBcIjBcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJJbGx1bWluYXRpb25cIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBiZWV0bGUgc2hlZHMgYnJpZ2h0IGxpZ2h0IGluIGEgMTAtZm9vdCByYWRpdXMgYW5kIGRpbSBsaWdodCBmb3IgYW4gYWRkaXRpb25hbCAxMCBmdC4uXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkJpdGVcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICsxIHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMiAoMWQ2IFx1MjAxNCAxKSBzbGFzaGluZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAxLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjFkNlwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogLTFcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIkdpYW50IEZyb2dcIixcbiAgICAgICAgc2l6ZTogXCJNZWRpdW1cIixcbiAgICAgICAgdHlwZTogXCJiZWFzdFwiLFxuICAgICAgICBzdWJ0eXBlOiBcIlwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwidW5hbGlnbmVkXCIsXG4gICAgICAgIGFjOiAxMSxcbiAgICAgICAgaHA6IDE4LFxuICAgICAgICBoaXRfZGljZTogXCI0ZDhcIixcbiAgICAgICAgc3BlZWQ6IFwiMzAgZnQuLCBzd2ltIDMwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzEyLCAxMywgMTEsIDIsIDEwLCAzXSxcbiAgICAgICAgc2tpbGxzYXZlczogW3sgcGVyY2VwdGlvbjogMiB9LCB7IHN0ZWFsdGg6IDMgfV0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBzZW5zZXM6IFwiZGFya3Zpc2lvbiAzMCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxMlwiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiXCIsXG4gICAgICAgIGNyOiBcIjEvNFwiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkFtcGhpYmlvdXNcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBmcm9nIGNhbiBicmVhdGhlIGFpciBhbmQgd2F0ZXJcIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJTdGFuZGluZyBMZWFwXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZnJvZydzIGxvbmcganVtcCBpcyB1cCB0byAyMCBmdC4gYW5kIGl0cyBoaWdoIGp1bXAgaXMgdXAgdG8gMTAgZnQuLCB3aXRoIG9yIHdpdGhvdXQgYSBydW5uaW5nIHN0YXJ0LlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJCaXRlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMyB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDQgKDFkNiArIDEpIHBpZXJjaW5nIGRhbWFnZSwgYW5kIHRoZSB0YXJnZXQgaXMgZ3JhcHBsZWQgKGVzY2FwZSBEQyAxMSkuIFVudGlsIHRoaXMgZ3JhcHBsZSBlbmRzLCB0aGUgdGFyZ2V0IGlzIHJlc3RyYWluZWQsIGFuZCB0aGUgZnJvZyBjYW4ndCBiaXRlIGFub3RoZXIgdGFyZ2V0LlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMyxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIxZDZcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDFcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJTd2FsbG93XCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZnJvZyBtYWtlcyBvbmUgYml0ZSBhdHRhY2sgYWdhaW5zdCBhIFNtYWxsIG9yIHNtYWxsZXIgdGFyZ2V0IGl0IGlzIGdyYXBwbGluZy4gSWYgdGhlIGF0dGFjayBoaXRzLCB0aGUgdGFyZ2V0IGlzIHN3YWxsb3dlZCwgYW5kIHRoZSBncmFwcGxlIGVuZHMuIFRoZSBzd2FsbG93ZWQgdGFyZ2V0IGlzIGJsaW5kZWQgYW5kIHJlc3RyYWluZWQsIGl0IGhhcyB0b3RhbCBjb3ZlciBhZ2FpbnN0IGF0dGFja3MgYW5kIG90aGVyIGVmZmVjdHMgb3V0c2lkZSB0aGUgZnJvZywgYW5kIGl0IHRha2VzIDUgKDJkNCkgYWNpZCBkYW1hZ2UgYXQgdGhlIHN0YXJ0IG9mIGVhY2ggb2YgdGhlIGZyb2cncyB0dXJucy4gVGhlIGZyb2cgY2FuIGhhdmUgb25seSBvbmUgdGFyZ2V0IHN3YWxsb3dlZCBhdCBhIHRpbWUuIElmIHRoZSBmcm9nIGRpZXMsIGEgc3dhbGxvd2VkIGNyZWF0dXJlIGlzIG5vIGxvbmdlciByZXN0cmFpbmVkIGJ5IGl0IGFuZCBjYW4gZXNjYXBlIGZyb20gdGhlIGNvcnBzZSB1c2luZyA1IGZ0LiBvZiBtb3ZlbWVudCwgZXhpdGluZyBwcm9uZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIkdpYW50IEdvYXRcIixcbiAgICAgICAgc2l6ZTogXCJMYXJnZVwiLFxuICAgICAgICB0eXBlOiBcImJlYXN0XCIsXG4gICAgICAgIHN1YnR5cGU6IFwiXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcbiAgICAgICAgYWM6IDExLFxuICAgICAgICBocDogMTksXG4gICAgICAgIGhpdF9kaWNlOiBcIjNkMTAgKyAyXCIsXG4gICAgICAgIHNwZWVkOiBcIjQwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzE3LCAxMSwgMTIsIDMsIDEyLCA2XSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIHNlbnNlczogXCJwYXNzaXZlIFBlcmNlcHRpb24gMTFcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcIlwiLFxuICAgICAgICBjcjogXCIxLzJcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJDaGFyZ2VcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIklmIHRoZSBnb2F0IG1vdmVzIGF0IGxlYXN0IDIwIGZ0LiBzdHJhaWdodCB0b3dhcmQgYSB0YXJnZXQgYW5kIHRoZW4gaGl0cyBpdCB3aXRoIGEgcmFtIGF0dGFjayBvbiB0aGUgc2FtZSB0dXJuLCB0aGUgdGFyZ2V0IHRha2VzIGFuIGV4dHJhIDUgKDJkNCkgYmx1ZGdlb25pbmcgZGFtYWdlLiBJZiB0aGUgdGFyZ2V0IGlzIGEgY3JlYXR1cmUsIGl0IG11c3Qgc3VjY2VlZCBvbiBhIERDIDEzIFN0cmVuZ3RoIHNhdmluZyB0aHJvdyBvciBiZSBrbm9ja2VkIHByb25lLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIyZDRcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlN1cmUtRm9vdGVkXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZ29hdCBoYXMgYWR2YW50YWdlIG9uIFN0cmVuZ3RoIGFuZCBEZXh0ZXJpdHkgc2F2aW5nIHRocm93cyBtYWRlIGFnYWluc3QgZWZmZWN0cyB0aGF0IHdvdWxkIGtub2NrIGl0IHByb25lLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJSYW1cIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs1IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogOCAoMmQ0ICsgMykgYmx1ZGdlb25pbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNSxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIyZDRcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDNcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIkdpYW50IEh5ZW5hXCIsXG4gICAgICAgIHNpemU6IFwiTGFyZ2VcIixcbiAgICAgICAgdHlwZTogXCJiZWFzdFwiLFxuICAgICAgICBzdWJ0eXBlOiBcIlwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwidW5hbGlnbmVkXCIsXG4gICAgICAgIGFjOiAxMixcbiAgICAgICAgaHA6IDQ1LFxuICAgICAgICBoaXRfZGljZTogXCI2ZDEwICsgMTJcIixcbiAgICAgICAgc3BlZWQ6IFwiNTAgZnQuXCIsXG4gICAgICAgIHN0YXRzOiBbMTYsIDE0LCAxNCwgMiwgMTIsIDddLFxuICAgICAgICBza2lsbHNhdmVzOiBbeyBwZXJjZXB0aW9uOiAzIH1dLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcbiAgICAgICAgc2Vuc2VzOiBcInBhc3NpdmUgUGVyY2VwdGlvbiAxM1wiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiXCIsXG4gICAgICAgIGNyOiBcIjFcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJSYW1wYWdlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJXaGVuIHRoZSBoeWVuYSByZWR1Y2VzIGEgY3JlYXR1cmUgdG8gMCBoaXQgcG9pbnRzIHdpdGggYSBtZWxlZSBhdHRhY2sgb24gaXRzIHR1cm4sIHRoZSBoeWVuYSBjYW4gdGFrZSBhIGJvbnVzIGFjdGlvbiB0byBtb3ZlIHVwIHRvIGhhbGYgaXRzIHNwZWVkIGFuZCBtYWtlIGEgYml0ZSBhdHRhY2suXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkJpdGVcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs1IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTAgKDJkNiArIDMpIHBpZXJjaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDUsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMWQ2XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiAzXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJHaWFudCBMaXphcmRcIixcbiAgICAgICAgc2l6ZTogXCJMYXJnZVwiLFxuICAgICAgICB0eXBlOiBcImJlYXN0XCIsXG4gICAgICAgIHN1YnR5cGU6IFwiXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcbiAgICAgICAgYWM6IDEyLFxuICAgICAgICBocDogMTksXG4gICAgICAgIGhpdF9kaWNlOiBcIjNkMTAgKyAyXCIsXG4gICAgICAgIHNwZWVkOiBcIjMwIGZ0LiwgY2xpbWIgMzAgZnQuXCIsXG4gICAgICAgIHN0YXRzOiBbMTUsIDEyLCAxMywgMiwgMTAsIDVdLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcbiAgICAgICAgc2Vuc2VzOiBcImRhcmt2aXNpb24gMzAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTBcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcIlwiLFxuICAgICAgICBjcjogXCIxLzRcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJWYXJpYW50OiBIb2xkIEJyZWF0aFwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGxpemFyZCBjYW4gaG9sZCBpdHMgYnJlYXRoIGZvciAxNSBtaW51dGVzLiAoQSBsaXphcmQgdGhhdCBoYXMgdGhpcyB0cmFpdCBhbHNvIGhhcyBhIHN3aW1taW5nIHNwZWVkIG9mIDMwIGZlZXQuKVwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlZhcmlhbnQ6IFNwaWRlciBDbGltYlwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGxpemFyZCBjYW4gY2xpbWIgZGlmZmljdWx0IHN1cmZhY2VzLCBpbmNsdWRpbmcgdXBzaWRlIGRvd24gb24gY2VpbGluZ3MsIHdpdGhvdXQgbmVlZGluZyB0byBtYWtlIGFuIGFiaWxpdHkgY2hlY2suXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkJpdGVcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs0IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogNiAoMWQ4ICsgMikgcGllcmNpbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIxZDhcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIkdpYW50IE9jdG9wdXNcIixcbiAgICAgICAgc2l6ZTogXCJMYXJnZVwiLFxuICAgICAgICB0eXBlOiBcImJlYXN0XCIsXG4gICAgICAgIHN1YnR5cGU6IFwiXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcbiAgICAgICAgYWM6IDExLFxuICAgICAgICBocDogNTIsXG4gICAgICAgIGhpdF9kaWNlOiBcIjhkMTAgKyA4XCIsXG4gICAgICAgIHNwZWVkOiBcIjEwIGZ0Liwgc3dpbSA2MCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsxNywgMTMsIDEzLCA0LCAxMCwgNF0sXG4gICAgICAgIHNraWxsc2F2ZXM6IFt7IHBlcmNlcHRpb246IDQgfSwgeyBzdGVhbHRoOiA1IH1dLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcbiAgICAgICAgc2Vuc2VzOiBcImRhcmt2aXNpb24gNjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTRcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcIlwiLFxuICAgICAgICBjcjogXCIxXCIsXG4gICAgICAgIHRyYWl0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiSG9sZCBCcmVhdGhcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIldoaWxlIG91dCBvZiB3YXRlciwgdGhlIG9jdG9wdXMgY2FuIGhvbGQgaXRzIGJyZWF0aCBmb3IgMSBob3VyLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlVuZGVyd2F0ZXIgQ2Ftb3VmbGFnZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIG9jdG9wdXMgaGFzIGFkdmFudGFnZSBvbiBEZXh0ZXJpdHkgKFN0ZWFsdGgpIGNoZWNrcyBtYWRlIHdoaWxlIHVuZGVyd2F0ZXIuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiV2F0ZXIgQnJlYXRoaW5nXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgb2N0b3B1cyBjYW4gYnJlYXRoZSBvbmx5IHVuZGVyd2F0ZXIuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlRlbnRhY2xlc1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzUgdG8gaGl0LCByZWFjaCAxNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTAgKDJkNiArIDMpIGJsdWRnZW9uaW5nIGRhbWFnZS4gSWYgdGhlIHRhcmdldCBpcyBhIGNyZWF0dXJlLCBpdCBpcyBncmFwcGxlZCAoZXNjYXBlIERDIDE2KS4gVW50aWwgdGhpcyBncmFwcGxlIGVuZHMsIHRoZSB0YXJnZXQgaXMgcmVzdHJhaW5lZCwgYW5kIHRoZSBvY3RvcHVzIGNhbid0IHVzZSBpdHMgdGVudGFjbGVzIG9uIGFub3RoZXIgdGFyZ2V0LlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNSxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIyZDZcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDNcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJJbmsgQ2xvdWQgKFJlY2hhcmdlcyBhZnRlciBhIFNob3J0IG9yIExvbmcgUmVzdClcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIkEgMjAtZm9vdC1yYWRpdXMgY2xvdWQgb2YgaW5rIGV4dGVuZHMgYWxsIGFyb3VuZCB0aGUgb2N0b3B1cyBpZiBpdCBpcyB1bmRlcndhdGVyLiBUaGUgYXJlYSBpcyBoZWF2aWx5IG9ic2N1cmVkIGZvciAxIG1pbnV0ZSwgYWx0aG91Z2ggYSBzaWduaWZpY2FudCBjdXJyZW50IGNhbiBkaXNwZXJzZSB0aGUgaW5rLiBBZnRlciByZWxlYXNpbmcgdGhlIGluaywgdGhlIG9jdG9wdXMgY2FuIHVzZSB0aGUgRGFzaCBhY3Rpb24gYXMgYSBib251cyBhY3Rpb24uXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJHaWFudCBPd2xcIixcbiAgICAgICAgc2l6ZTogXCJMYXJnZVwiLFxuICAgICAgICB0eXBlOiBcImJlYXN0XCIsXG4gICAgICAgIHN1YnR5cGU6IFwiXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJuZXV0cmFsXCIsXG4gICAgICAgIGFjOiAxMixcbiAgICAgICAgaHA6IDE5LFxuICAgICAgICBoaXRfZGljZTogXCIzZDEwICsgMlwiLFxuICAgICAgICBzcGVlZDogXCI1IGZ0LiwgZmx5IDYwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzEzLCAxNSwgMTIsIDgsIDEzLCAxMF0sXG4gICAgICAgIHNraWxsc2F2ZXM6IFt7IHBlcmNlcHRpb246IDUgfSwgeyBzdGVhbHRoOiA0IH1dLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcbiAgICAgICAgc2Vuc2VzOiBcImRhcmt2aXNpb24gMTIwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDE1XCIsXG4gICAgICAgIGxhbmd1YWdlczpcbiAgICAgICAgICAgIFwiR2lhbnQgT3dsLCB1bmRlcnN0YW5kcyBDb21tb24sIEVsdmlzaCwgYW5kIFN5bHZhbiBidXQgY2FuJ3Qgc3BlYWtcIixcbiAgICAgICAgY3I6IFwiMS80XCIsXG4gICAgICAgIHRyYWl0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiRmx5YnlcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBvd2wgZG9lc24ndCBwcm92b2tlIG9wcG9ydHVuaXR5IGF0dGFja3Mgd2hlbiBpdCBmbGllcyBvdXQgb2YgYW4gZW5lbXkncyByZWFjaC5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJLZWVuIEhlYXJpbmcgYW5kIFNpZ2h0XCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgb3dsIGhhcyBhZHZhbnRhZ2Ugb24gV2lzZG9tIChQZXJjZXB0aW9uKSBjaGVja3MgdGhhdCByZWx5IG9uIGhlYXJpbmcgb3Igc2lnaHQuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlRhbG9uc1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzMgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiA4ICgyZDYgKyAxKSBzbGFzaGluZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAzLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjJkNlwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogMVxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiR2lhbnQgUG9pc29ub3VzIFNuYWtlXCIsXG4gICAgICAgIHNpemU6IFwiTWVkaXVtXCIsXG4gICAgICAgIHR5cGU6IFwiYmVhc3RcIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcInVuYWxpZ25lZFwiLFxuICAgICAgICBhYzogMTQsXG4gICAgICAgIGhwOiAxMSxcbiAgICAgICAgaGl0X2RpY2U6IFwiMmQ4ICsgMlwiLFxuICAgICAgICBzcGVlZDogXCIzMCBmdC4sIHN3aW0gMzAgZnQuXCIsXG4gICAgICAgIHN0YXRzOiBbMTAsIDE4LCAxMywgMiwgMTAsIDNdLFxuICAgICAgICBza2lsbHNhdmVzOiBbeyBwZXJjZXB0aW9uOiAyIH1dLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcbiAgICAgICAgc2Vuc2VzOiBcImJsaW5kc2lnaHQgMTAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTJcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcIlwiLFxuICAgICAgICBjcjogXCIxLzRcIixcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQml0ZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzYgdG8gaGl0LCByZWFjaCAxMCBmdC4sIG9uZSB0YXJnZXQuIEhpdDogNiAoMWQ0ICsgNCkgcGllcmNpbmcgZGFtYWdlLCBhbmQgdGhlIHRhcmdldCBtdXN0IG1ha2UgYSBEQyAxMSBDb25zdGl0dXRpb24gc2F2aW5nIHRocm93LCB0YWtpbmcgMTAgKDNkNikgcG9pc29uIGRhbWFnZSBvbiBhIGZhaWxlZCBzYXZlLCBvciBoYWxmIGFzIG11Y2ggZGFtYWdlIG9uIGEgc3VjY2Vzc2Z1bCBvbmUuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA2LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjFkNFwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogNFxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiR2lhbnQgUmF0XCIsXG4gICAgICAgIHNpemU6IFwiU21hbGxcIixcbiAgICAgICAgdHlwZTogXCJiZWFzdFwiLFxuICAgICAgICBzdWJ0eXBlOiBcIlwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwidW5hbGlnbmVkXCIsXG4gICAgICAgIGFjOiAxMixcbiAgICAgICAgaHA6IDcsXG4gICAgICAgIGhpdF9kaWNlOiBcIjJkNlwiLFxuICAgICAgICBzcGVlZDogXCIzMCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFs3LCAxNSwgMTEsIDIsIDEwLCA0XSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIHNlbnNlczogXCJkYXJrdmlzaW9uIDYwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDEwXCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJcIixcbiAgICAgICAgY3I6IFwiMS84XCIsXG4gICAgICAgIHRyYWl0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiS2VlbiBTbWVsbFwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIHJhdCBoYXMgYWR2YW50YWdlIG9uIFdpc2RvbSAoUGVyY2VwdGlvbikgY2hlY2tzIHRoYXQgcmVseSBvbiBzbWVsbC5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJQYWNrIFRhY3RpY3NcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSByYXQgaGFzIGFkdmFudGFnZSBvbiBhbiBhdHRhY2sgcm9sbCBhZ2FpbnN0IGEgY3JlYXR1cmUgaWYgYXQgbGVhc3Qgb25lIG9mIHRoZSByYXQncyBhbGxpZXMgaXMgd2l0aGluIDUgZnQuIG9mIHRoZSBjcmVhdHVyZSBhbmQgdGhlIGFsbHkgaXNuJ3QgaW5jYXBhY2l0YXRlZC5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQml0ZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzQgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiA0ICgxZDQgKyAyKSBwaWVyY2luZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA0LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjFkNFwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogMlxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiR2lhbnQgUmF0IChEaXNlYXNlZClcIixcbiAgICAgICAgc2l6ZTogXCJTbWFsbFwiLFxuICAgICAgICB0eXBlOiBcImJlYXN0XCIsXG4gICAgICAgIHN1YnR5cGU6IFwiXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcbiAgICAgICAgYWM6IDEyLFxuICAgICAgICBocDogNyxcbiAgICAgICAgaGl0X2RpY2U6IFwiMmQ2XCIsXG4gICAgICAgIHNwZWVkOiBcIjMwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzcsIDE1LCAxMSwgMiwgMTAsIDRdLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcbiAgICAgICAgc2Vuc2VzOiBcImRhcmt2aXNpb24gNjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTBcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcIlwiLFxuICAgICAgICBjcjogXCIxLzhcIixcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQml0ZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzQgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAzICgxZDQgKyAyKSBwaWVyY2luZyBkYW1hZ2UuIElmIHRoZSB0YXJnZXQgaXMgYSBjcmVhdHVyZSwgaXQgbXVzdCBzdWNjZWVkIG9uIGEgREMgMTAgQ29uc3RpdHV0aW9uIHNhdmluZyB0aHJvdyBvciBjb250cmFjdCBhIGRpc2Vhc2UuIFVudGlsIHRoZSBkaXNlYXNlIGlzIGN1cmVkLCB0aGUgdGFyZ2V0IGNhbid0IHJlZ2FpbiBoaXQgcG9pbnRzIGV4Y2VwdCBieSBtYWdpY2FsIG1lYW5zLCBhbmQgdGhlIHRhcmdldCdzIGhpdCBwb2ludCBtYXhpbXVtIGRlY3JlYXNlcyBieSAzICgxZDYpIGV2ZXJ5IDI0IGhvdXJzLiBJZiB0aGUgdGFyZ2V0J3MgaGl0IHBvaW50IG1heGltdW0gZHJvcHMgdG8gMCBhcyBhIHJlc3VsdCBvZiB0aGlzIGRpc2Vhc2UsIHRoZSB0YXJnZXQgZGllcy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDQsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMWQ0XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiAyXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJHaWFudCBTY29ycGlvblwiLFxuICAgICAgICBzaXplOiBcIkxhcmdlXCIsXG4gICAgICAgIHR5cGU6IFwiYmVhc3RcIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcInVuYWxpZ25lZFwiLFxuICAgICAgICBhYzogMTUsXG4gICAgICAgIGhwOiA1MixcbiAgICAgICAgaGl0X2RpY2U6IFwiN2QxMCArIDEzXCIsXG4gICAgICAgIHNwZWVkOiBcIjQwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzE1LCAxMywgMTUsIDEsIDksIDNdLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcbiAgICAgICAgc2Vuc2VzOiBcImJsaW5kc2lnaHQgNjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gOVwiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiXCIsXG4gICAgICAgIGNyOiBcIjNcIixcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQ2xhd1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzQgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiA2ICgxZDggKyAyKSBibHVkZ2VvbmluZyBkYW1hZ2UsIGFuZCB0aGUgdGFyZ2V0IGlzIGdyYXBwbGVkIChlc2NhcGUgREMgMTIpLiBUaGUgc2NvcnBpb24gaGFzIHR3byBjbGF3cywgZWFjaCBvZiB3aGljaCBjYW4gZ3JhcHBsZSBvbmx5IG9uZSB0YXJnZXQuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA0LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjFkOFwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogMlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgc2NvcnBpb24gbWFrZXMgdGhyZWUgYXR0YWNrczogdHdvIHdpdGggaXRzIGNsYXdzIGFuZCBvbmUgd2l0aCBpdHMgc3RpbmcuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RpbmdcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs0IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSBjcmVhdHVyZS4gSGl0OiA3ICgxZDEwICsgMikgcGllcmNpbmcgZGFtYWdlLCBhbmQgdGhlIHRhcmdldCBtdXN0IG1ha2UgYSBEQyAxMiBDb25zdGl0dXRpb24gc2F2aW5nIHRocm93LCB0YWtpbmcgMjIgKDRkMTApIHBvaXNvbiBkYW1hZ2Ugb24gYSBmYWlsZWQgc2F2ZSwgb3IgaGFsZiBhcyBtdWNoIGRhbWFnZSBvbiBhIHN1Y2Nlc3NmdWwgb25lLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIxZDEwXCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiAyXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJHaWFudCBTZWEgSG9yc2VcIixcbiAgICAgICAgc2l6ZTogXCJMYXJnZVwiLFxuICAgICAgICB0eXBlOiBcImJlYXN0XCIsXG4gICAgICAgIHN1YnR5cGU6IFwiXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcbiAgICAgICAgYWM6IDEzLFxuICAgICAgICBocDogMTYsXG4gICAgICAgIGhpdF9kaWNlOiBcIjNkMTAgKyAtMVwiLFxuICAgICAgICBzcGVlZDogXCIwIGZ0Liwgc3dpbSA0MCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsxMiwgMTUsIDExLCAyLCAxMiwgNV0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBzZW5zZXM6IFwicGFzc2l2ZSBQZXJjZXB0aW9uIDExXCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJcIixcbiAgICAgICAgY3I6IFwiMS8yXCIsXG4gICAgICAgIHRyYWl0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQ2hhcmdlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJJZiB0aGUgc2VhIGhvcnNlIG1vdmVzIGF0IGxlYXN0IDIwIGZ0LiBzdHJhaWdodCB0b3dhcmQgYSB0YXJnZXQgYW5kIHRoZW4gaGl0cyBpdCB3aXRoIGEgcmFtIGF0dGFjayBvbiB0aGUgc2FtZSB0dXJuLCB0aGUgdGFyZ2V0IHRha2VzIGFuIGV4dHJhIDcgKDJkNikgYmx1ZGdlb25pbmcgZGFtYWdlLiBJZiB0aGUgdGFyZ2V0IGlzIGEgY3JlYXR1cmUsIGl0IG11c3Qgc3VjY2VlZCBvbiBhIERDIDExIFN0cmVuZ3RoIHNhdmluZyB0aHJvdyBvciBiZSBrbm9ja2VkIHByb25lLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIyZDZcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIldhdGVyIEJyZWF0aGluZ1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIHNlYSBob3JzZSBjYW4gYnJlYXRoZSBvbmx5IHVuZGVyd2F0ZXIuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlJhbVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzMgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiA0ICgxZDYgKyAxKSBibHVkZ2VvbmluZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAzLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjFkNlwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogMVxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiR2lhbnQgU2hhcmtcIixcbiAgICAgICAgc2l6ZTogXCJIdWdlXCIsXG4gICAgICAgIHR5cGU6IFwiYmVhc3RcIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcInVuYWxpZ25lZFwiLFxuICAgICAgICBhYzogMTMsXG4gICAgICAgIGhwOiAxMjYsXG4gICAgICAgIGhpdF9kaWNlOiBcIjExZDEyICsgNTRcIixcbiAgICAgICAgc3BlZWQ6IFwic3dpbSA1MCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsyMywgMTEsIDIxLCAxLCAxMCwgNV0sXG4gICAgICAgIHNraWxsc2F2ZXM6IFt7IHBlcmNlcHRpb246IDMgfV0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBzZW5zZXM6IFwiYmxpbmRzaWdodCA2MCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxM1wiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiXCIsXG4gICAgICAgIGNyOiBcIjVcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJCbG9vZCBGcmVuenlcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBzaGFyayBoYXMgYWR2YW50YWdlIG9uIG1lbGVlIGF0dGFjayByb2xscyBhZ2FpbnN0IGFueSBjcmVhdHVyZSB0aGF0IGRvZXNuJ3QgaGF2ZSBhbGwgaXRzIGhpdCBwb2ludHMuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiV2F0ZXIgQnJlYXRoaW5nXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgc2hhcmsgY2FuIGJyZWF0aGUgb25seSB1bmRlcndhdGVyLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJCaXRlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJXZWFwb24gQXR0YWNrOiArOSB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDIyICgzZDEwICsgNikgcGllcmNpbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogOSxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIzZDEwXCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiA2XG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJHaWFudCBTcGlkZXJcIixcbiAgICAgICAgc2l6ZTogXCJMYXJnZVwiLFxuICAgICAgICB0eXBlOiBcImJlYXN0XCIsXG4gICAgICAgIHN1YnR5cGU6IFwiXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcbiAgICAgICAgYWM6IDE0LFxuICAgICAgICBocDogMjYsXG4gICAgICAgIGhpdF9kaWNlOiBcIjRkMTAgKyA0XCIsXG4gICAgICAgIHNwZWVkOiBcIjMwIGZ0LiwgY2xpbWIgMzAgZnQuXCIsXG4gICAgICAgIHN0YXRzOiBbMTQsIDE2LCAxMiwgMiwgMTEsIDRdLFxuICAgICAgICBza2lsbHNhdmVzOiBbeyBzdGVhbHRoOiA3IH1dLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcbiAgICAgICAgc2Vuc2VzOiBcImJsaW5kc2lnaHQgMTAgZnQuLCBkYXJrdmlzaW9uIDYwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDEwXCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJcIixcbiAgICAgICAgY3I6IFwiMVwiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlNwaWRlciBDbGltYlwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIHNwaWRlciBjYW4gY2xpbWIgZGlmZmljdWx0IHN1cmZhY2VzLCBpbmNsdWRpbmcgdXBzaWRlIGRvd24gb24gY2VpbGluZ3MsIHdpdGhvdXQgbmVlZGluZyB0byBtYWtlIGFuIGFiaWxpdHkgY2hlY2suXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiV2ViIFNlbnNlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJXaGlsZSBpbiBjb250YWN0IHdpdGggYSB3ZWIsIHRoZSBzcGlkZXIga25vd3MgdGhlIGV4YWN0IGxvY2F0aW9uIG9mIGFueSBvdGhlciBjcmVhdHVyZSBpbiBjb250YWN0IHdpdGggdGhlIHNhbWUgd2ViLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIldlYiBXYWxrZXJcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBzcGlkZXIgaWdub3JlcyBtb3ZlbWVudCByZXN0cmljdGlvbnMgY2F1c2VkIGJ5IHdlYmJpbmcuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkJpdGVcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs1IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSBjcmVhdHVyZS4gSGl0OiA3ICgxZDggKyAzKSBwaWVyY2luZyBkYW1hZ2UsIGFuZCB0aGUgdGFyZ2V0IG11c3QgbWFrZSBhIERDIDExIENvbnN0aXR1dGlvbiBzYXZpbmcgdGhyb3csIHRha2luZyA5ICgyZDgpIHBvaXNvbiBkYW1hZ2Ugb24gYSBmYWlsZWQgc2F2ZSwgb3IgaGFsZiBhcyBtdWNoIGRhbWFnZSBvbiBhIHN1Y2Nlc3NmdWwgb25lLiBJZiB0aGUgcG9pc29uIGRhbWFnZSByZWR1Y2VzIHRoZSB0YXJnZXQgdG8gMCBoaXQgcG9pbnRzLCB0aGUgdGFyZ2V0IGlzIHN0YWJsZSBidXQgcG9pc29uZWQgZm9yIDEgaG91ciwgZXZlbiBhZnRlciByZWdhaW5pbmcgaGl0IHBvaW50cywgYW5kIGlzIHBhcmFseXplZCB3aGlsZSBwb2lzb25lZCBpbiB0aGlzIHdheS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDUsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMWQ4XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiAzXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiV2ViIChSZWNoYXJnZSA1LTYpXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJSYW5nZWQgV2VhcG9uIEF0dGFjazogKzUgdG8gaGl0LCByYW5nZSAzMC82MCBmdC4sIG9uZSBjcmVhdHVyZS4gSGl0OiBUaGUgdGFyZ2V0IGlzIHJlc3RyYWluZWQgYnkgd2ViYmluZy4gQXMgYW4gYWN0aW9uLCB0aGUgcmVzdHJhaW5lZCB0YXJnZXQgY2FuIG1ha2UgYSBEQyAxMiBTdHJlbmd0aCBjaGVjaywgYnVyc3RpbmcgdGhlIHdlYmJpbmcgb24gYSBzdWNjZXNzLiBUaGUgd2ViYmluZyBjYW4gYWxzbyBiZSBhdHRhY2tlZCBhbmQgZGVzdHJveWVkIChBQyAxMDsgaHAgNTsgdnVsbmVyYWJpbGl0eSB0byBmaXJlIGRhbWFnZTsgaW1tdW5pdHkgdG8gYmx1ZGdlb25pbmcsIHBvaXNvbiwgYW5kIHBzeWNoaWMgZGFtYWdlKS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDVcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIkdpYW50IFRvYWRcIixcbiAgICAgICAgc2l6ZTogXCJMYXJnZVwiLFxuICAgICAgICB0eXBlOiBcImJlYXN0XCIsXG4gICAgICAgIHN1YnR5cGU6IFwiXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcbiAgICAgICAgYWM6IDExLFxuICAgICAgICBocDogMzksXG4gICAgICAgIGhpdF9kaWNlOiBcIjZkMTAgKyA2XCIsXG4gICAgICAgIHNwZWVkOiBcIjIwIGZ0Liwgc3dpbSA0MCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsxNSwgMTMsIDEzLCAyLCAxMCwgM10sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBzZW5zZXM6IFwiZGFya3Zpc2lvbiAzMCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxMFwiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiXCIsXG4gICAgICAgIGNyOiBcIjFcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJBbXBoaWJpb3VzXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgdG9hZCBjYW4gYnJlYXRoZSBhaXIgYW5kIHdhdGVyXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RhbmRpbmcgTGVhcFwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIHRvYWQncyBsb25nIGp1bXAgaXMgdXAgdG8gMjAgZnQuIGFuZCBpdHMgaGlnaCBqdW1wIGlzIHVwIHRvIDEwIGZ0Liwgd2l0aCBvciB3aXRob3V0IGEgcnVubmluZyBzdGFydC5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQml0ZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzQgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiA3ICgxZDEwICsgMikgcGllcmNpbmcgZGFtYWdlIHBsdXMgNSAoMWQxMCkgcG9pc29uIGRhbWFnZSwgYW5kIHRoZSB0YXJnZXQgaXMgZ3JhcHBsZWQgKGVzY2FwZSBEQyAxMykuIFVudGlsIHRoaXMgZ3JhcHBsZSBlbmRzLCB0aGUgdGFyZ2V0IGlzIHJlc3RyYWluZWQsIGFuZCB0aGUgdG9hZCBjYW4ndCBiaXRlIGFub3RoZXIgdGFyZ2V0LlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIxZDEwXCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiAyXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiU3dhbGxvd1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIHRvYWQgbWFrZXMgb25lIGJpdGUgYXR0YWNrIGFnYWluc3QgYSBNZWRpdW0gb3Igc21hbGxlciB0YXJnZXQgaXQgaXMgZ3JhcHBsaW5nLiBJZiB0aGUgYXR0YWNrIGhpdHMsIHRoZSB0YXJnZXQgaXMgc3dhbGxvd2VkLCBhbmQgdGhlIGdyYXBwbGUgZW5kcy4gVGhlIHN3YWxsb3dlZCB0YXJnZXQgaXMgYmxpbmRlZCBhbmQgcmVzdHJhaW5lZCwgaXQgaGFzIHRvdGFsIGNvdmVyIGFnYWluc3QgYXR0YWNrcyBhbmQgb3RoZXIgZWZmZWN0cyBvdXRzaWRlIHRoZSB0b2FkLCBhbmQgaXQgdGFrZXMgMTAgKDNkNikgYWNpZCBkYW1hZ2UgYXQgdGhlIHN0YXJ0IG9mIGVhY2ggb2YgdGhlIHRvYWQncyB0dXJucy4gVGhlIHRvYWQgY2FuIGhhdmUgb25seSBvbmUgdGFyZ2V0IHN3YWxsb3dlZCBhdCBhIHRpbWUuXFxcXG5JZiB0aGUgdG9hZCBkaWVzLCBhIHN3YWxsb3dlZCBjcmVhdHVyZSBpcyBubyBsb25nZXIgcmVzdHJhaW5lZCBieSBpdCBhbmQgY2FuIGVzY2FwZSBmcm9tIHRoZSBjb3Jwc2UgdXNpbmcgNSBmZWV0IG9mIG1vdmVtZW50LCBleGl0aW5nIHByb25lLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiR2lhbnQgVnVsdHVyZVwiLFxuICAgICAgICBzaXplOiBcIkxhcmdlXCIsXG4gICAgICAgIHR5cGU6IFwiYmVhc3RcIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcIm5ldXRyYWwgZXZpbFwiLFxuICAgICAgICBhYzogMTAsXG4gICAgICAgIGhwOiAyMixcbiAgICAgICAgaGl0X2RpY2U6IFwiM2QxMCArIDVcIixcbiAgICAgICAgc3BlZWQ6IFwiMTAgZnQuLCBmbHkgNjAgZnQuXCIsXG4gICAgICAgIHN0YXRzOiBbMTUsIDEwLCAxNSwgNiwgMTIsIDddLFxuICAgICAgICBza2lsbHNhdmVzOiBbeyBwZXJjZXB0aW9uOiAzIH1dLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcbiAgICAgICAgc2Vuc2VzOiBcInBhc3NpdmUgUGVyY2VwdGlvbiAxM1wiLFxuICAgICAgICBsYW5ndWFnZXM6IFwidW5kZXJzdGFuZHMgQ29tbW9uIGJ1dCBjYW4ndCBzcGVha1wiLFxuICAgICAgICBjcjogXCIxXCIsXG4gICAgICAgIHRyYWl0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiS2VlbiBTaWdodCBhbmQgU21lbGxcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSB2dWx0dXJlIGhhcyBhZHZhbnRhZ2Ugb24gV2lzZG9tIChQZXJjZXB0aW9uKSBjaGVja3MgdGhhdCByZWx5IG9uIHNpZ2h0IG9yIHNtZWxsLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlBhY2sgVGFjdGljc1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIHZ1bHR1cmUgaGFzIGFkdmFudGFnZSBvbiBhbiBhdHRhY2sgcm9sbCBhZ2FpbnN0IGEgY3JlYXR1cmUgaWYgYXQgbGVhc3Qgb25lIG9mIHRoZSB2dWx0dXJlJ3MgYWxsaWVzIGlzIHdpdGhpbiA1IGZ0LiBvZiB0aGUgY3JlYXR1cmUgYW5kIHRoZSBhbGx5IGlzbid0IGluY2FwYWNpdGF0ZWQuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgdnVsdHVyZSBtYWtlcyB0d28gYXR0YWNrczogb25lIHdpdGggaXRzIGJlYWsgYW5kIG9uZSB3aXRoIGl0cyB0YWxvbnMuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQmVha1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzQgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiA3ICgyZDQgKyAyKSBwaWVyY2luZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA0LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjJkNFwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogMlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlRhbG9uc1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzQgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiA5ICgyZDYgKyAyKSBzbGFzaGluZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA0LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjJkNlwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogMlxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiR2lhbnQgV2FzcFwiLFxuICAgICAgICBzaXplOiBcIk1lZGl1bVwiLFxuICAgICAgICB0eXBlOiBcImJlYXN0XCIsXG4gICAgICAgIHN1YnR5cGU6IFwiXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcbiAgICAgICAgYWM6IDEyLFxuICAgICAgICBocDogMTMsXG4gICAgICAgIGhpdF9kaWNlOiBcIjNkOCArIC0xXCIsXG4gICAgICAgIHNwZWVkOiBcIjEwIGZ0LiwgZmx5IDUwIGZ0Liwgc3dpbSA1MCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsxMCwgMTQsIDEwLCAxLCAxMCwgM10sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBzZW5zZXM6IFwicGFzc2l2ZSBQZXJjZXB0aW9uIDEwXCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJcIixcbiAgICAgICAgY3I6IFwiMS8yXCIsXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlN0aW5nXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJTdGluZy4gTWVsZWUgV2VhcG9uIEF0dGFjazogKzQgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIGNyZWF0dXJlLiBIaXQ6IDUgKDFkNiArIDIpIHBpZXJjaW5nIGRhbWFnZSwgYW5kIHRoZSB0YXJnZXQgbXVzdCBtYWtlIGEgREMgMTEgQ29uc3RpdHV0aW9uIHNhdmluZyB0aHJvdywgdGFraW5nIDEwICgzZDYpIHBvaXNvbiBkYW1hZ2Ugb24gYSBmYWlsZWQgc2F2ZSwgb3IgaGFsZiBhcyBtdWNoIGRhbWFnZSBvbiBhIHN1Y2Nlc3NmdWwgb25lLiBJZiB0aGUgcG9pc29uIGRhbWFnZSByZWR1Y2VzIHRoZSB0YXJnZXQgdG8gMCBoaXQgcG9pbnRzLCB0aGUgdGFyZ2V0IGlzIHN0YWJsZSBidXQgcG9pc29uZWQgZm9yIDEgaG91ciwgZXZlbiBhZnRlciByZWdhaW5pbmcgaGl0IHBvaW50cywgYW5kIGlzIHBhcmFseXplZCB3aGlsZSBwb2lzb25lZCBpbiB0aGlzIHdheS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDQsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMWQ2XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiAyXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJHaWFudCBXZWFzZWxcIixcbiAgICAgICAgc2l6ZTogXCJNZWRpdW1cIixcbiAgICAgICAgdHlwZTogXCJiZWFzdFwiLFxuICAgICAgICBzdWJ0eXBlOiBcIlwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwidW5hbGlnbmVkXCIsXG4gICAgICAgIGFjOiAxMyxcbiAgICAgICAgaHA6IDksXG4gICAgICAgIGhpdF9kaWNlOiBcIjJkOFwiLFxuICAgICAgICBzcGVlZDogXCI0MCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsxMSwgMTYsIDEwLCA0LCAxMiwgNV0sXG4gICAgICAgIHNraWxsc2F2ZXM6IFt7IHBlcmNlcHRpb246IDMgfSwgeyBzdGVhbHRoOiA1IH1dLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcbiAgICAgICAgc2Vuc2VzOiBcImRhcmt2aXNpb24gNjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTNcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcIlwiLFxuICAgICAgICBjcjogXCIxLzhcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJLZWVuIEhlYXJpbmcgYW5kIFNtZWxsXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgd2Vhc2VsIGhhcyBhZHZhbnRhZ2Ugb24gV2lzZG9tIChQZXJjZXB0aW9uKSBjaGVja3MgdGhhdCByZWx5IG9uIGhlYXJpbmcgb3Igc21lbGwuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkJpdGVcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIldlYXBvbiBBdHRhY2s6ICs1IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogNSAoMWQ0ICsgMykgcGllcmNpbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNSxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIxZDRcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDNcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIkdpYW50IFdvbGYgU3BpZGVyXCIsXG4gICAgICAgIHNpemU6IFwiTWVkaXVtXCIsXG4gICAgICAgIHR5cGU6IFwiYmVhc3RcIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcInVuYWxpZ25lZFwiLFxuICAgICAgICBhYzogMTMsXG4gICAgICAgIGhwOiAxMSxcbiAgICAgICAgaGl0X2RpY2U6IFwiMmQ4ICsgMlwiLFxuICAgICAgICBzcGVlZDogXCI0MCBmdC4sIGNsaW1iIDQwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzEyLCAxNiwgMTMsIDMsIDEyLCA0XSxcbiAgICAgICAgc2tpbGxzYXZlczogW3sgcGVyY2VwdGlvbjogMyB9LCB7IHN0ZWFsdGg6IDcgfV0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBzZW5zZXM6IFwiYmxpbmRzaWdodCAxMCBmdC4sIGRhcmt2aXNpb24gNjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTNcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcIlwiLFxuICAgICAgICBjcjogXCIxLzRcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJTcGlkZXIgQ2xpbWJcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBzcGlkZXIgY2FuIGNsaW1iIGRpZmZpY3VsdCBzdXJmYWNlcywgaW5jbHVkaW5nIHVwc2lkZSBkb3duIG9uIGNlaWxpbmdzLCB3aXRob3V0IG5lZWRpbmcgdG8gbWFrZSBhbiBhYmlsaXR5IGNoZWNrLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIldlYiBTZW5zZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiV2hpbGUgaW4gY29udGFjdCB3aXRoIGEgd2ViLCB0aGUgc3BpZGVyIGtub3dzIHRoZSBleGFjdCBsb2NhdGlvbiBvZiBhbnkgb3RoZXIgY3JlYXR1cmUgaW4gY29udGFjdCB3aXRoIHRoZSBzYW1lIHdlYi5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJXZWIgV2Fsa2VyXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgc3BpZGVyIGlnbm9yZXMgbW92ZW1lbnQgcmVzdHJpY3Rpb25zIGNhdXNlZCBieSB3ZWJiaW5nLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJCaXRlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJXZWFwb24gQXR0YWNrOiArMyB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgY3JlYXR1cmUuIEhpdDogNCAoMWQ2ICsgMSkgcGllcmNpbmcgZGFtYWdlLCBhbmQgdGhlIHRhcmdldCBtdXN0IG1ha2UgYSBEQyAxMSBDb25zdGl0dXRpb24gc2F2aW5nIHRocm93LCB0YWtpbmcgNyAoMmQ2KSBwb2lzb24gZGFtYWdlIG9uIGEgZmFpbGVkIHNhdmUsIG9yIGhhbGYgYXMgbXVjaCBkYW1hZ2Ugb24gYSBzdWNjZXNzZnVsIG9uZS4gSWYgdGhlIHBvaXNvbiBkYW1hZ2UgcmVkdWNlcyB0aGUgdGFyZ2V0IHRvIDAgaGl0IHBvaW50cywgdGhlIHRhcmdldCBpcyBzdGFibGUgYnV0IHBvaXNvbmVkIGZvciAxIGhvdXIsIGV2ZW4gYWZ0ZXIgcmVnYWluaW5nIGhpdCBwb2ludHMsIGFuZCBpcyBwYXJhbHl6ZWQgd2hpbGUgcG9pc29uZWQgaW4gdGhpcyB3YXkuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAzLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjFkNlwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogMVxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiR2liYmVyaW5nIE1vdXRoZXJcIixcbiAgICAgICAgc2l6ZTogXCJNZWRpdW1cIixcbiAgICAgICAgdHlwZTogXCJhYmVycmF0aW9uXCIsXG4gICAgICAgIHN1YnR5cGU6IFwiXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJuZXV0cmFsXCIsXG4gICAgICAgIGFjOiA5LFxuICAgICAgICBocDogNjcsXG4gICAgICAgIGhpdF9kaWNlOiBcIjlkOCArIDI2XCIsXG4gICAgICAgIHNwZWVkOiBcIjEwIGZ0Liwgc3dpbSAxMCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsxMCwgOCwgMTYsIDMsIDEwLCA2XSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwicHJvbmVcIixcbiAgICAgICAgc2Vuc2VzOiBcImRhcmt2aXNpb24gNjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTBcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcIlwiLFxuICAgICAgICBjcjogXCIyXCIsXG4gICAgICAgIHRyYWl0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQWJlcnJhbnQgR3JvdW5kXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZ3JvdW5kIGluIGEgMTAtZm9vdCByYWRpdXMgYXJvdW5kIHRoZSBtb3V0aGVyIGlzIGRvdWdobGlrZSBkaWZmaWN1bHQgdGVycmFpbi4gRWFjaCBjcmVhdHVyZSB0aGF0IHN0YXJ0cyBpdHMgdHVybiBpbiB0aGF0IGFyZWEgbXVzdCBzdWNjZWVkIG9uIGEgREMgMTAgU3RyZW5ndGggc2F2aW5nIHRocm93IG9yIGhhdmUgaXRzIHNwZWVkIHJlZHVjZWQgdG8gMCB1bnRpbCB0aGUgc3RhcnQgb2YgaXRzIG5leHQgdHVybi5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJHaWJiZXJpbmdcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBtb3V0aGVyIGJhYmJsZXMgaW5jb2hlcmVudGx5IHdoaWxlIGl0IGNhbiBzZWUgYW55IGNyZWF0dXJlIGFuZCBpc24ndCBpbmNhcGFjaXRhdGVkLiBFYWNoIGNyZWF0dXJlIHRoYXQgc3RhcnRzIGl0cyB0dXJuIHdpdGhpbiAyMCBmZWV0IG9mIHRoZSBtb3V0aGVyIGFuZCBjYW4gaGVhciB0aGUgZ2liYmVyaW5nIG11c3Qgc3VjY2VlZCBvbiBhIERDIDEwIFdpc2RvbSBzYXZpbmcgdGhyb3cuIE9uIGEgZmFpbHVyZSwgdGhlIGNyZWF0dXJlIGNhbid0IHRha2UgcmVhY3Rpb25zIHVudGlsIHRoZSBzdGFydCBvZiBpdHMgbmV4dCB0dXJuIGFuZCByb2xscyBhIGQ4IHRvIGRldGVybWluZSB3aGF0IGl0IGRvZXMgZHVyaW5nIGl0cyB0dXJuLiBPbiBhIDEgdG8gNCwgdGhlIGNyZWF0dXJlIGRvZXMgbm90aGluZy4gT24gYSA1IG9yIDYsIHRoZSBjcmVhdHVyZSB0YWtlcyBubyBhY3Rpb24gb3IgYm9udXMgYWN0aW9uIGFuZCB1c2VzIGFsbCBpdHMgbW92ZW1lbnQgdG8gbW92ZSBpbiBhIHJhbmRvbWx5IGRldGVybWluZWQgZGlyZWN0aW9uLiBPbiBhIDcgb3IgOCwgdGhlIGNyZWF0dXJlIG1ha2VzIGEgbWVsZWUgYXR0YWNrIGFnYWluc3QgYSByYW5kb21seSBkZXRlcm1pbmVkIGNyZWF0dXJlIHdpdGhpbiBpdHMgcmVhY2ggb3IgZG9lcyBub3RoaW5nIGlmIGl0IGNhbid0IG1ha2Ugc3VjaCBhbiBhdHRhY2suXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZ2liYmVyaW5nIG1vdXRoZXIgbWFrZXMgb25lIGJpdGUgYXR0YWNrIGFuZCwgaWYgaXQgY2FuLCB1c2VzIGl0cyBCbGluZGluZyBTcGl0dGxlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkJpdGVzXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMiB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgY3JlYXR1cmUuIEhpdDogMTcgKDVkNikgcGllcmNpbmcgZGFtYWdlLiBJZiB0aGUgdGFyZ2V0IGlzIE1lZGl1bSBvciBzbWFsbGVyLCBpdCBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxMCBTdHJlbmd0aCBzYXZpbmcgdGhyb3cgb3IgYmUga25vY2tlZCBwcm9uZS4gSWYgdGhlIHRhcmdldCBpcyBraWxsZWQgYnkgdGhpcyBkYW1hZ2UsIGl0IGlzIGFic29yYmVkIGludG8gdGhlIG1vdXRoZXIuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAyLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjVkNlwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQmxpbmRpbmcgU3BpdHRsZSAoUmVjaGFyZ2UgNS02KVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIG1vdXRoZXIgc3BpdHMgYSBjaGVtaWNhbCBnbG9iIGF0IGEgcG9pbnQgaXQgY2FuIHNlZSB3aXRoaW4gMTUgZmVldCBvZiBpdC4gVGhlIGdsb2IgZXhwbG9kZXMgaW4gYSBibGluZGluZyBmbGFzaCBvZiBsaWdodCBvbiBpbXBhY3QuIEVhY2ggY3JlYXR1cmUgd2l0aGluIDUgZmVldCBvZiB0aGUgZmxhc2ggbXVzdCBzdWNjZWVkIG9uIGEgREMgMTMgRGV4dGVyaXR5IHNhdmluZyB0aHJvdyBvciBiZSBibGluZGVkIHVudGlsIHRoZSBlbmQgb2YgdGhlIG1vdXRoZXIncyBuZXh0IHR1cm4uXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJHbGFicmV6dVwiLFxuICAgICAgICBzaXplOiBcIkxhcmdlXCIsXG4gICAgICAgIHR5cGU6IFwiZmllbmRcIixcbiAgICAgICAgc3VidHlwZTogXCJkZW1vblwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwiY2hhb3RpYyBldmlsXCIsXG4gICAgICAgIGFjOiAxNyxcbiAgICAgICAgaHA6IDE1NyxcbiAgICAgICAgaGl0X2RpY2U6IFwiMTVkMTAgKyA3NFwiLFxuICAgICAgICBzcGVlZDogXCI0MCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsyMCwgMTUsIDIxLCAxOSwgMTcsIDE2XSxcbiAgICAgICAgc2F2ZXM6IFtcbiAgICAgICAgICAgIHsgc3RyZW5ndGg6IDkgfSxcbiAgICAgICAgICAgIHsgY29uc3RpdHV0aW9uOiA5IH0sXG4gICAgICAgICAgICB7IHdpc2RvbTogNyB9LFxuICAgICAgICAgICAgeyBjaGFyaXNtYTogNyB9XG4gICAgICAgIF0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczpcbiAgICAgICAgICAgIFwiY29sZCwgZmlyZSwgbGlnaHRuaW5nOyBibHVkZ2VvbmluZywgcGllcmNpbmcsIGFuZCBzbGFzaGluZyBmcm9tIG5vbm1hZ2ljYWwgd2VhcG9uc1wiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczogXCJwb2lzb25cIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwicG9pc29uZWRcIixcbiAgICAgICAgc2Vuc2VzOiBcInRydWVzaWdodCAxMjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTNcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcIkFieXNzYWwsIHRlbGVwYXRoeSAxMjAgZnQuXCIsXG4gICAgICAgIGNyOiBcIjlcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJJbm5hdGUgU3BlbGxjYXN0aW5nXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZ2xhYnJlenUncyBzcGVsbGNhc3RpbmcgYWJpbGl0eSBpcyBJbnRlbGxpZ2VuY2UgKHNwZWxsIHNhdmUgREMgMTYpLiBUaGUgZ2xhYnJlenUgY2FuIGlubmF0ZWx5IGNhc3QgdGhlIGZvbGxvd2luZyBzcGVsbHMsIHJlcXVpcmluZyBubyBtYXRlcmlhbCBjb21wb25lbnRzOlxcXFxuQXQgd2lsbDogZGFya25lc3MsIGRldGVjdCBtYWdpYywgZGlzcGVsIG1hZ2ljXFxcXG4xL2RheSBlYWNoOiBjb25mdXNpb24sIGZseSwgcG93ZXIgd29yZCBzdHVuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTWFnaWMgUmVzaXN0YW5jZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGdsYWJyZXp1IGhhcyBhZHZhbnRhZ2Ugb24gc2F2aW5nIHRocm93cyBhZ2FpbnN0IHNwZWxscyBhbmQgb3RoZXIgbWFnaWNhbCBlZmZlY3RzLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJNdWx0aWF0dGFja1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGdsYWJyZXp1IG1ha2VzIGZvdXIgYXR0YWNrczogdHdvIHdpdGggaXRzIHBpbmNlcnMgYW5kIHR3byB3aXRoIGl0cyBmaXN0cy4gQWx0ZXJuYXRpdmVseSwgaXQgbWFrZXMgdHdvIGF0dGFja3Mgd2l0aCBpdHMgcGluY2VycyBhbmQgY2FzdHMgb25lIHNwZWxsLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlBpbmNlclwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzkgdG8gaGl0LCByZWFjaCAxMCBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTYgKDJkMTAgKyA1KSBibHVkZ2VvbmluZyBkYW1hZ2UuIElmIHRoZSB0YXJnZXQgaXMgYSBNZWRpdW0gb3Igc21hbGxlciBjcmVhdHVyZSwgaXQgaXMgZ3JhcHBsZWQgKGVzY2FwZSBEQyAxNSkuIFRoZSBnbGFicmV6dSBoYXMgdHdvIHBpbmNlcnMsIGVhY2ggb2Ygd2hpY2ggY2FuIGdyYXBwbGUgb25seSBvbmUgdGFyZ2V0LlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogOSxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIyZDEwXCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiA1XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiRmlzdFwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzkgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiA3ICgyZDQgKyAyKSBibHVkZ2VvbmluZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA5LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjJkNFwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogMlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlZhcmlhbnQ6IFN1bW1vbiBEZW1vbiAoMS9EYXkpXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZGVtb24gY2hvb3NlcyB3aGF0IHRvIHN1bW1vbiBhbmQgYXR0ZW1wdHMgYSBtYWdpY2FsIHN1bW1vbmluZy5cXFxcbkEgZ2xhYnJlenUgaGFzIGEgMzAgcGVyY2VudCBjaGFuY2Ugb2Ygc3VtbW9uaW5nIDFkMyB2cm9ja3MsIDFkMiBoZXpyb3VzLCBvciBvbmUgZ2xhYnJlenUuXFxcXG5BIHN1bW1vbmVkIGRlbW9uIGFwcGVhcnMgaW4gYW4gdW5vY2N1cGllZCBzcGFjZSB3aXRoaW4gNjAgZmVldCBvZiBpdHMgc3VtbW9uZXIsIGFjdHMgYXMgYW4gYWxseSBvZiBpdHMgc3VtbW9uZXIsIGFuZCBjYW4ndCBzdW1tb24gb3RoZXIgZGVtb25zLiBJdCByZW1haW5zIGZvciAxIG1pbnV0ZSwgdW50aWwgaXQgb3IgaXRzIHN1bW1vbmVyIGRpZXMsIG9yIHVudGlsIGl0cyBzdW1tb25lciBkaXNtaXNzZXMgaXQgYXMgYW4gYWN0aW9uLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiR2xhZGlhdG9yXCIsXG4gICAgICAgIHNpemU6IFwiTWVkaXVtXCIsXG4gICAgICAgIHR5cGU6IFwiaHVtYW5vaWRcIixcbiAgICAgICAgc3VidHlwZTogXCJhbnkgcmFjZVwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwiYW55IGFsaWdubWVudFwiLFxuICAgICAgICBhYzogMTYsXG4gICAgICAgIGhwOiAxMTIsXG4gICAgICAgIGhpdF9kaWNlOiBcIjE1ZDggKyA0NFwiLFxuICAgICAgICBzcGVlZDogXCIzMCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsxOCwgMTUsIDE2LCAxMCwgMTIsIDE1XSxcbiAgICAgICAgc2F2ZXM6IFt7IHN0cmVuZ3RoOiA3IH0sIHsgZGV4dGVyaXR5OiA1IH0sIHsgY29uc3RpdHV0aW9uOiA2IH1dLFxuICAgICAgICBza2lsbHNhdmVzOiBbeyBpbnRpbWlkYXRpb246IDUgfSwgeyBhdGhsZXRpY3M6IDEwIH1dLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcbiAgICAgICAgc2Vuc2VzOiBcInBhc3NpdmUgUGVyY2VwdGlvbiAxMVwiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiYW55IG9uZSBsYW5ndWFnZSAodXN1YWxseSBDb21tb24pXCIsXG4gICAgICAgIGNyOiBcIjVcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJCcmF2ZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGdsYWRpYXRvciBoYXMgYWR2YW50YWdlIG9uIHNhdmluZyB0aHJvd3MgYWdhaW5zdCBiZWluZyBmcmlnaHRlbmVkLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkJydXRlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJBIG1lbGVlIHdlYXBvbiBkZWFscyBvbmUgZXh0cmEgZGllIG9mIGl0cyBkYW1hZ2Ugd2hlbiB0aGUgZ2xhZGlhdG9yIGhpdHMgd2l0aCBpdCAoaW5jbHVkZWQgaW4gdGhlIGF0dGFjaykuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZ2xhZGlhdG9yIG1ha2VzIHRocmVlIG1lbGVlIGF0dGFja3Mgb3IgdHdvIHJhbmdlZCBhdHRhY2tzLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlNwZWFyXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBvciBSYW5nZWQgV2VhcG9uIEF0dGFjazogKzcgdG8gaGl0LCByZWFjaCA1IGZ0LiBhbmQgcmFuZ2UgMjAvNjAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDExICgyZDYgKyA0KSBwaWVyY2luZyBkYW1hZ2UsIG9yIDEzICgyZDggKyA0KSBwaWVyY2luZyBkYW1hZ2UgaWYgdXNlZCB3aXRoIHR3byBoYW5kcyB0byBtYWtlIGEgbWVsZWUgYXR0YWNrLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNyxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIyZDZcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDRcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJTaGllbGQgQmFzaFwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzcgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIGNyZWF0dXJlLiBIaXQ6IDkgKDJkNCArIDQpIGJsdWRnZW9uaW5nIGRhbWFnZS4gSWYgdGhlIHRhcmdldCBpcyBhIE1lZGl1bSBvciBzbWFsbGVyIGNyZWF0dXJlLCBpdCBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxNSBTdHJlbmd0aCBzYXZpbmcgdGhyb3cgb3IgYmUga25vY2tlZCBwcm9uZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDcsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMmQ0XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiA0XG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIHJlYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiUGFycnlcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBnbGFkaWF0b3IgYWRkcyAzIHRvIGl0cyBBQyBhZ2FpbnN0IG9uZSBtZWxlZSBhdHRhY2sgdGhhdCB3b3VsZCBoaXQgaXQuIFRvIGRvIHNvLCB0aGUgZ2xhZGlhdG9yIG11c3Qgc2VlIHRoZSBhdHRhY2tlciBhbmQgYmUgd2llbGRpbmcgYSBtZWxlZSB3ZWFwb24uXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJHbm9sbFwiLFxuICAgICAgICBzaXplOiBcIk1lZGl1bVwiLFxuICAgICAgICB0eXBlOiBcImh1bWFub2lkXCIsXG4gICAgICAgIHN1YnR5cGU6IFwiZ25vbGxcIixcbiAgICAgICAgYWxpZ25tZW50OiBcImNoYW90aWMgZXZpbFwiLFxuICAgICAgICBhYzogMTUsXG4gICAgICAgIGhwOiAyMixcbiAgICAgICAgaGl0X2RpY2U6IFwiNWQ4ICsgLTFcIixcbiAgICAgICAgc3BlZWQ6IFwiMzAgZnQuXCIsXG4gICAgICAgIHN0YXRzOiBbMTQsIDEyLCAxMSwgNiwgMTAsIDddLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcbiAgICAgICAgc2Vuc2VzOiBcImRhcmt2aXNpb24gNjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTBcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcIkdub2xsXCIsXG4gICAgICAgIGNyOiBcIjEvMlwiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlJhbXBhZ2VcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIldoZW4gdGhlIGdub2xsIHJlZHVjZXMgYSBjcmVhdHVyZSB0byAwIGhpdCBwb2ludHMgd2l0aCBhIG1lbGVlIGF0dGFjayBvbiBpdHMgdHVybiwgdGhlIGdub2xsIGNhbiB0YWtlIGEgYm9udXMgYWN0aW9uIHRvIG1vdmUgdXAgdG8gaGFsZiBpdHMgc3BlZWQgYW5kIG1ha2UgYSBiaXRlIGF0dGFjay5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQml0ZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzQgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIGNyZWF0dXJlLiBIaXQ6IDQgKDFkNCArIDIpIHBpZXJjaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDQsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMWQ0XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiAyXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiU3BlYXJcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIG9yIFJhbmdlZCBXZWFwb24gQXR0YWNrOiArNCB0byBoaXQsIHJlYWNoIDUgZnQuIG9yIHJhbmdlIDIwLzYwIGZ0Liwgb25lIHRhcmdldC4gSGl0OiA1ICgxZDYgKyAyKSBwaWVyY2luZyBkYW1hZ2UsIG9yIDYgKDFkOCArIDIpIHBpZXJjaW5nIGRhbWFnZSBpZiB1c2VkIHdpdGggdHdvIGhhbmRzIHRvIG1ha2UgYSBtZWxlZSBhdHRhY2suXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA0LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjFkNlwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogMlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkxvbmdib3dcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlJhbmdlZCBXZWFwb24gQXR0YWNrOiArMyB0byBoaXQsIHJhbmdlIDE1MC82MDAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDUgKDFkOCArIDEpIHBpZXJjaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDMsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMWQ4XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiAxXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJHb2F0XCIsXG4gICAgICAgIHNpemU6IFwiTWVkaXVtXCIsXG4gICAgICAgIHR5cGU6IFwiYmVhc3RcIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcInVuYWxpZ25lZFwiLFxuICAgICAgICBhYzogMTAsXG4gICAgICAgIGhwOiA0LFxuICAgICAgICBoaXRfZGljZTogXCIxZDggKyAtMVwiLFxuICAgICAgICBzcGVlZDogXCI0MCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsxMiwgMTAsIDExLCAyLCAxMCwgNV0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBzZW5zZXM6IFwicGFzc2l2ZSBQZXJjZXB0aW9uIDEwXCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJcIixcbiAgICAgICAgY3I6IFwiMFwiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkNoYXJnZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiSWYgdGhlIGdvYXQgbW92ZXMgYXQgbGVhc3QgMjAgZnQuIHN0cmFpZ2h0IHRvd2FyZCBhIHRhcmdldCBhbmQgdGhlbiBoaXRzIGl0IHdpdGggYSByYW0gYXR0YWNrIG9uIHRoZSBzYW1lIHR1cm4sIHRoZSB0YXJnZXQgdGFrZXMgYW4gZXh0cmEgMiAoMWQ0KSBibHVkZ2VvbmluZyBkYW1hZ2UuIElmIHRoZSB0YXJnZXQgaXMgYSBjcmVhdHVyZSwgaXQgbXVzdCBzdWNjZWVkIG9uIGEgREMgMTAgU3RyZW5ndGggc2F2aW5nIHRocm93IG9yIGJlIGtub2NrZWQgcHJvbmUuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjFkNFwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiU3VyZS1Gb290ZWRcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBnb2F0IGhhcyBhZHZhbnRhZ2Ugb24gU3RyZW5ndGggYW5kIERleHRlcml0eSBzYXZpbmcgdGhyb3dzIG1hZGUgYWdhaW5zdCBlZmZlY3RzIHRoYXQgd291bGQga25vY2sgaXQgcHJvbmUuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlJhbVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzMgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAzICgxZDQgKyAxKSBibHVkZ2VvbmluZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAzLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjFkNFwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogMVxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiR29ibGluXCIsXG4gICAgICAgIHNpemU6IFwiU21hbGxcIixcbiAgICAgICAgdHlwZTogXCJodW1hbm9pZFwiLFxuICAgICAgICBzdWJ0eXBlOiBcImdvYmxpbm9pZFwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwibmV1dHJhbCBldmlsXCIsXG4gICAgICAgIGFjOiAxNSxcbiAgICAgICAgaHA6IDcsXG4gICAgICAgIGhpdF9kaWNlOiBcIjJkNlwiLFxuICAgICAgICBzcGVlZDogXCIzMCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFs4LCAxNCwgMTAsIDEwLCA4LCA4XSxcbiAgICAgICAgc2tpbGxzYXZlczogW3sgc3RlYWx0aDogNiB9XSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIHNlbnNlczogXCJkYXJrdmlzaW9uIDYwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDlcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcIkNvbW1vbiwgR29ibGluXCIsXG4gICAgICAgIGNyOiBcIjEvNFwiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk5pbWJsZSBFc2NhcGVcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBnb2JsaW4gY2FuIHRha2UgdGhlIERpc2VuZ2FnZSBvciBIaWRlIGFjdGlvbiBhcyBhIGJvbnVzIGFjdGlvbiBvbiBlYWNoIG9mIGl0cyB0dXJucy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiU2NpbWl0YXJcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs0IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogNSAoMWQ2ICsgMikgc2xhc2hpbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIxZDZcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJTaG9ydGJvd1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiUmFuZ2VkIFdlYXBvbiBBdHRhY2s6ICs0IHRvIGhpdCwgcmFuZ2UgODAvMzIwIGZ0Liwgb25lIHRhcmdldC4gSGl0OiA1ICgxZDYgKyAyKSBwaWVyY2luZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA0LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjFkNlwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogMlxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiR29sZCBEcmFnb24gV3lybWxpbmdcIixcbiAgICAgICAgc2l6ZTogXCJNZWRpdW1cIixcbiAgICAgICAgdHlwZTogXCJkcmFnb25cIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcImxhd2Z1bCBnb29kXCIsXG4gICAgICAgIGFjOiAxNyxcbiAgICAgICAgaHA6IDYwLFxuICAgICAgICBoaXRfZGljZTogXCI4ZDggKyAyNFwiLFxuICAgICAgICBzcGVlZDogXCIzMCBmdC4sIGZseSA2MCBmdC4sIHN3aW0gMzAgZnQuXCIsXG4gICAgICAgIHN0YXRzOiBbMTksIDE0LCAxNywgMTQsIDExLCAxNl0sXG4gICAgICAgIHNhdmVzOiBbXG4gICAgICAgICAgICB7IGRleHRlcml0eTogNCB9LFxuICAgICAgICAgICAgeyBjb25zdGl0dXRpb246IDUgfSxcbiAgICAgICAgICAgIHsgd2lzZG9tOiAyIH0sXG4gICAgICAgICAgICB7IGNoYXJpc21hOiA1IH1cbiAgICAgICAgXSxcbiAgICAgICAgc2tpbGxzYXZlczogW3sgcGVyY2VwdGlvbjogNCB9LCB7IHN0ZWFsdGg6IDQgfV0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwiZmlyZVwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcbiAgICAgICAgc2Vuc2VzOiBcImJsaW5kc2lnaHQgMTAgZnQuLCBkYXJrdmlzaW9uIDYwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDE0XCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJEcmFjb25pY1wiLFxuICAgICAgICBjcjogXCIzXCIsXG4gICAgICAgIHRyYWl0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQW1waGliaW91c1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGRyYWdvbiBjYW4gYnJlYXRoZSBhaXIgYW5kIHdhdGVyLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJCaXRlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNiB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDkgKDFkMTAgKyA0KSBwaWVyY2luZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA2LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjFkMTBcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDRcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJCcmVhdGggV2VhcG9ucyAoUmVjaGFyZ2UgNS02KVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGRyYWdvbiB1c2VzIG9uZSBvZiB0aGUgZm9sbG93aW5nIGJyZWF0aCB3ZWFwb25zLlxcXFxuRmlyZSBCcmVhdGguIFRoZSBkcmFnb24gZXhoYWxlcyBmaXJlIGluIGEgMTUtZm9vdCBjb25lLiBFYWNoIGNyZWF0dXJlIGluIHRoYXQgYXJlYSBtdXN0IG1ha2UgYSBEQyAxMyBEZXh0ZXJpdHkgc2F2aW5nIHRocm93LCB0YWtpbmcgMjIgKDRkMTApIGZpcmUgZGFtYWdlIG9uIGEgZmFpbGVkIHNhdmUsIG9yIGhhbGYgYXMgbXVjaCBkYW1hZ2Ugb24gYSBzdWNjZXNzZnVsIG9uZS5cXFxcbldlYWtlbmluZyBCcmVhdGguIFRoZSBkcmFnb24gZXhoYWxlcyBnYXMgaW4gYSAxNS1mb290IGNvbmUuIEVhY2ggY3JlYXR1cmUgaW4gdGhhdCBhcmVhIG11c3Qgc3VjY2VlZCBvbiBhIERDIDEzIFN0cmVuZ3RoIHNhdmluZyB0aHJvdyBvciBoYXZlIGRpc2FkdmFudGFnZSBvbiBTdHJlbmd0aC1iYXNlZCBhdHRhY2sgcm9sbHMsIFN0cmVuZ3RoIGNoZWNrcywgYW5kIFN0cmVuZ3RoIHNhdmluZyB0aHJvd3MgZm9yIDEgbWludXRlLiBBIGNyZWF0dXJlIGNhbiByZXBlYXQgdGhlIHNhdmluZyB0aHJvdyBhdCB0aGUgZW5kIG9mIGVhY2ggb2YgaXRzIHR1cm5zLCBlbmRpbmcgdGhlIGVmZmVjdCBvbiBpdHNlbGYgb24gYSBzdWNjZXNzLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCI0ZDEwXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIkdvcmdvblwiLFxuICAgICAgICBzaXplOiBcIkxhcmdlXCIsXG4gICAgICAgIHR5cGU6IFwibW9uc3Ryb3NpdHlcIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcInVuYWxpZ25lZFwiLFxuICAgICAgICBhYzogMTksXG4gICAgICAgIGhwOiAxMTQsXG4gICAgICAgIGhpdF9kaWNlOiBcIjEyZDEwICsgNDhcIixcbiAgICAgICAgc3BlZWQ6IFwiNDAgZnQuXCIsXG4gICAgICAgIHN0YXRzOiBbMjAsIDExLCAxOCwgMiwgMTIsIDddLFxuICAgICAgICBza2lsbHNhdmVzOiBbeyBwZXJjZXB0aW9uOiA0IH1dLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcInBldHJpZmllZFwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcbiAgICAgICAgc2Vuc2VzOiBcImRhcmt2aXNpb24gNjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTRcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcIlwiLFxuICAgICAgICBjcjogXCI1XCIsXG4gICAgICAgIHRyYWl0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiVHJhbXBsaW5nIENoYXJnZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiSWYgdGhlIGdvcmdvbiBtb3ZlcyBhdCBsZWFzdCAyMCBmZWV0IHN0cmFpZ2h0IHRvd2FyZCBhIGNyZWF0dXJlIGFuZCB0aGVuIGhpdHMgaXQgd2l0aCBhIGdvcmUgYXR0YWNrIG9uIHRoZSBzYW1lIHR1cm4sIHRoYXQgdGFyZ2V0IG11c3Qgc3VjY2VlZCBvbiBhIERDIDE2IFN0cmVuZ3RoIHNhdmluZyB0aHJvdyBvciBiZSBrbm9ja2VkIHByb25lLiBJZiB0aGUgdGFyZ2V0IGlzIHByb25lLCB0aGUgZ29yZ29uIGNhbiBtYWtlIG9uZSBhdHRhY2sgd2l0aCBpdHMgaG9vdmVzIGFnYWluc3QgaXQgYXMgYSBib251cyBhY3Rpb24uXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkdvcmVcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs4IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTggKDJkMTIgKyA1KSBwaWVyY2luZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA4LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjJkMTJcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJIb292ZXNcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs4IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTYgKDJkMTAgKyA1KSBibHVkZ2VvbmluZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA4LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjJkMTBcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJQZXRyaWZ5aW5nIEJyZWF0aCAoUmVjaGFyZ2UgNS02KVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGdvcmdvbiBleGhhbGVzIHBldHJpZnlpbmcgZ2FzIGluIGEgMzAtZm9vdCBjb25lLiBFYWNoIGNyZWF0dXJlIGluIHRoYXQgYXJlYSBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxMyBDb25zdGl0dXRpb24gc2F2aW5nIHRocm93LiBPbiBhIGZhaWxlZCBzYXZlLCBhIHRhcmdldCBiZWdpbnMgdG8gdHVybiB0byBzdG9uZSBhbmQgaXMgcmVzdHJhaW5lZC4gVGhlIHJlc3RyYWluZWQgdGFyZ2V0IG11c3QgcmVwZWF0IHRoZSBzYXZpbmcgdGhyb3cgYXQgdGhlIGVuZCBvZiBpdHMgbmV4dCB0dXJuLiBPbiBhIHN1Y2Nlc3MsIHRoZSBlZmZlY3QgZW5kcyBvbiB0aGUgdGFyZ2V0LiBPbiBhIGZhaWx1cmUsIHRoZSB0YXJnZXQgaXMgcGV0cmlmaWVkIHVudGlsIGZyZWVkIGJ5IHRoZSBncmVhdGVyIHJlc3RvcmF0aW9uIHNwZWxsIG9yIG90aGVyIG1hZ2ljLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiR3JheSBPb3plXCIsXG4gICAgICAgIHNpemU6IFwiTWVkaXVtXCIsXG4gICAgICAgIHR5cGU6IFwib296ZVwiLFxuICAgICAgICBzdWJ0eXBlOiBcIlwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwidW5hbGlnbmVkXCIsXG4gICAgICAgIGFjOiA4LFxuICAgICAgICBocDogMjIsXG4gICAgICAgIGhpdF9kaWNlOiBcIjNkOCArIDhcIixcbiAgICAgICAgc3BlZWQ6IFwiMTAgZnQuLCBjbGltYiAxMCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsxMiwgNiwgMTYsIDEsIDYsIDJdLFxuICAgICAgICBza2lsbHNhdmVzOiBbeyBzdGVhbHRoOiAyIH1dLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiYWNpZCwgY29sZCwgZmlyZVwiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6XG4gICAgICAgICAgICBcImJsaW5kZWQsIGNoYXJtZWQsIGRlYWZlbmVkLCBleGhhdXN0aW9uLCBmcmlnaHRlbmVkLCBwcm9uZVwiLFxuICAgICAgICBzZW5zZXM6IFwiYmxpbmRzaWdodCA2MCBmdC4gKGJsaW5kIGJleW9uZCB0aGlzIHJhZGl1cyksIHBhc3NpdmUgUGVyY2VwdGlvbiA4XCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJcIixcbiAgICAgICAgY3I6IFwiMS8yXCIsXG4gICAgICAgIHRyYWl0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQW1vcnBob3VzXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgb296ZSBjYW4gbW92ZSB0aHJvdWdoIGEgc3BhY2UgYXMgbmFycm93IGFzIDEgaW5jaCB3aWRlIHdpdGhvdXQgc3F1ZWV6aW5nLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkNvcnJvZGUgTWV0YWxcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIkFueSBub25tYWdpY2FsIHdlYXBvbiBtYWRlIG9mIG1ldGFsIHRoYXQgaGl0cyB0aGUgb296ZSBjb3Jyb2Rlcy4gQWZ0ZXIgZGVhbGluZyBkYW1hZ2UsIHRoZSB3ZWFwb24gdGFrZXMgYSBwZXJtYW5lbnQgYW5kIGN1bXVsYXRpdmUgLTEgcGVuYWx0eSB0byBkYW1hZ2Ugcm9sbHMuIElmIGl0cyBwZW5hbHR5IGRyb3BzIHRvIC01LCB0aGUgd2VhcG9uIGlzIGRlc3Ryb3llZC4gTm9ubWFnaWNhbCBhbW11bml0aW9uIG1hZGUgb2YgbWV0YWwgdGhhdCBoaXRzIHRoZSBvb3plIGlzIGRlc3Ryb3llZCBhZnRlciBkZWFsaW5nIGRhbWFnZS5cXFxcblRoZSBvb3plIGNhbiBlYXQgdGhyb3VnaCAyLWluY2gtdGhpY2ssIG5vbm1hZ2ljYWwgbWV0YWwgaW4gMSByb3VuZC5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJGYWxzZSBBcHBlYXJhbmNlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJXaGlsZSB0aGUgb296ZSByZW1haW5zIG1vdGlvbmxlc3MsIGl0IGlzIGluZGlzdGluZ3Vpc2hhYmxlIGZyb20gYW4gb2lseSBwb29sIG9yIHdldCByb2NrLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJQc2V1ZG9wb2RcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICszIHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogNCAoMWQ2ICsgMSkgYmx1ZGdlb25pbmcgZGFtYWdlIHBsdXMgNyAoMmQ2KSBhY2lkIGRhbWFnZSwgYW5kIGlmIHRoZSB0YXJnZXQgaXMgd2VhcmluZyBub25tYWdpY2FsIG1ldGFsIGFybW9yLCBpdHMgYXJtb3IgaXMgcGFydGx5IGNvcnJvZGVkIGFuZCB0YWtlcyBhIHBlcm1hbmVudCBhbmQgY3VtdWxhdGl2ZSAtMSBwZW5hbHR5IHRvIHRoZSBBQyBpdCBvZmZlcnMuIFRoZSBhcm1vciBpcyBkZXN0cm95ZWQgaWYgdGhlIHBlbmFsdHkgcmVkdWNlcyBpdHMgQUMgdG8gMTAuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAzLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjFkNlwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogMVxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiR3JlZW4gRHJhZ29uIFd5cm1saW5nXCIsXG4gICAgICAgIHNpemU6IFwiTWVkaXVtXCIsXG4gICAgICAgIHR5cGU6IFwiZHJhZ29uXCIsXG4gICAgICAgIHN1YnR5cGU6IFwiXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJsYXdmdWwgZXZpbFwiLFxuICAgICAgICBhYzogMTcsXG4gICAgICAgIGhwOiAzOCxcbiAgICAgICAgaGl0X2RpY2U6IFwiN2Q4ICsgNlwiLFxuICAgICAgICBzcGVlZDogXCIzMCBmdC4sIGZseSA2MCBmdC4sIHN3aW0gMzAgZnQuXCIsXG4gICAgICAgIHN0YXRzOiBbMTUsIDEyLCAxMywgMTQsIDExLCAxM10sXG4gICAgICAgIHNhdmVzOiBbXG4gICAgICAgICAgICB7IGRleHRlcml0eTogMyB9LFxuICAgICAgICAgICAgeyBjb25zdGl0dXRpb246IDMgfSxcbiAgICAgICAgICAgIHsgd2lzZG9tOiAyIH0sXG4gICAgICAgICAgICB7IGNoYXJpc21hOiAzIH1cbiAgICAgICAgXSxcbiAgICAgICAgc2tpbGxzYXZlczogW3sgcGVyY2VwdGlvbjogNCB9LCB7IHN0ZWFsdGg6IDMgfV0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwicG9pc29uXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOiBcInBvaXNvbmVkXCIsXG4gICAgICAgIHNlbnNlczogXCJibGluZHNpZ2h0IDEwIGZ0LiwgZGFya3Zpc2lvbiA2MCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxNFwiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiRHJhY29uaWNcIixcbiAgICAgICAgY3I6IFwiMlwiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkFtcGhpYmlvdXNcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBkcmFnb24gY2FuIGJyZWF0aGUgYWlyIGFuZCB3YXRlci5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQml0ZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzQgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiA3ICgxZDEwICsgMikgcGllcmNpbmcgZGFtYWdlIHBsdXMgMyAoMWQ2KSBwb2lzb24gZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIxZDEwICsgMWQ2XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiAzXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiUG9pc29uIEJyZWF0aCAoUmVjaGFyZ2UgNS02KVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGRyYWdvbiBleGhhbGVzIHBvaXNvbm91cyBnYXMgaW4gYSAxNS1mb290IGNvbmUuIEVhY2ggY3JlYXR1cmUgaW4gdGhhdCBhcmVhIG11c3QgbWFrZSBhIERDIDExIENvbnN0aXR1dGlvbiBzYXZpbmcgdGhyb3csIHRha2luZyAyMSAoNmQ2KSBwb2lzb24gZGFtYWdlIG9uIGEgZmFpbGVkIHNhdmUsIG9yIGhhbGYgYXMgbXVjaCBkYW1hZ2Ugb24gYSBzdWNjZXNzZnVsIG9uZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDAsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiNmQ2XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIkdyZWVuIEhhZ1wiLFxuICAgICAgICBzaXplOiBcIk1lZGl1bVwiLFxuICAgICAgICB0eXBlOiBcImZleVwiLFxuICAgICAgICBzdWJ0eXBlOiBcIlwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwibmV1dHJhbCBldmlsXCIsXG4gICAgICAgIGFjOiAxNyxcbiAgICAgICAgaHA6IDgyLFxuICAgICAgICBoaXRfZGljZTogXCIxMWQ4ICsgMzJcIixcbiAgICAgICAgc3BlZWQ6IFwiMzAgZnQuXCIsXG4gICAgICAgIHN0YXRzOiBbMTgsIDEyLCAxNiwgMTMsIDE0LCAxNF0sXG4gICAgICAgIHNraWxsc2F2ZXM6IFtcbiAgICAgICAgICAgIHsgYXJjYW5hOiAzIH0sXG4gICAgICAgICAgICB7IGRlY2VwdGlvbjogNCB9LFxuICAgICAgICAgICAgeyBwZXJjZXB0aW9uOiA0IH0sXG4gICAgICAgICAgICB7IHN0ZWFsdGg6IDMgfVxuICAgICAgICBdLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcbiAgICAgICAgc2Vuc2VzOiBcImRhcmt2aXNpb24gNjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTRcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcIkNvbW1vbiwgRHJhY29uaWMsIFN5bHZhblwiLFxuICAgICAgICBjcjogXCIzXCIsXG4gICAgICAgIHRyYWl0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQW1waGliaW91c1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGhhZyBjYW4gYnJlYXRoZSBhaXIgYW5kIHdhdGVyLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIklubmF0ZSBTcGVsbGNhc3RpbmdcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBoYWcncyBpbm5hdGUgc3BlbGxjYXN0aW5nIGFiaWxpdHkgaXMgQ2hhcmlzbWEgKHNwZWxsIHNhdmUgREMgMTIpLiBTaGUgY2FuIGlubmF0ZWx5IGNhc3QgdGhlIGZvbGxvd2luZyBzcGVsbHMsIHJlcXVpcmluZyBubyBtYXRlcmlhbCBjb21wb25lbnRzOlxcXFxuXFxcXG5BdCB3aWxsOiBkYW5jaW5nIGxpZ2h0cywgbWlub3IgaWxsdXNpb24sIHZpY2lvdXMgbW9ja2VyeVwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk1pbWljcnlcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBoYWcgY2FuIG1pbWljIGFuaW1hbCBzb3VuZHMgYW5kIGh1bWFub2lkIHZvaWNlcy4gQSBjcmVhdHVyZSB0aGF0IGhlYXJzIHRoZSBzb3VuZHMgY2FuIHRlbGwgdGhleSBhcmUgaW1pdGF0aW9ucyB3aXRoIGEgc3VjY2Vzc2Z1bCBEQyAxNCBXaXNkb20gKEluc2lnaHQpIGNoZWNrLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkhhZyBDb3ZlblwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiV2hlbiBoYWdzIG11c3Qgd29yayB0b2dldGhlciwgdGhleSBmb3JtIGNvdmVucywgaW4gc3BpdGUgb2YgdGhlaXIgc2VsZmlzaCBuYXR1cmVzLiBBIGNvdmVuIGlzIG1hZGUgdXAgb2YgaGFncyBvZiBhbnkgdHlwZSwgYWxsIG9mIHdob20gYXJlIGVxdWFscyB3aXRoaW4gdGhlIGdyb3VwLiBIb3dldmVyLCBlYWNoIG9mIHRoZSBoYWdzIGNvbnRpbnVlcyB0byBkZXNpcmUgbW9yZSBwZXJzb25hbCBwb3dlci5cXFxcbkEgY292ZW4gY29uc2lzdHMgb2YgdGhyZWUgaGFncyBzbyB0aGF0IGFueSBhcmd1bWVudHMgYmV0d2VlbiB0d28gaGFncyBjYW4gYmUgc2V0dGxlZCBieSB0aGUgdGhpcmQuIElmIG1vcmUgdGhhbiB0aHJlZSBoYWdzIGV2ZXIgY29tZSB0b2dldGhlciwgYXMgbWlnaHQgaGFwcGVuIGlmIHR3byBjb3ZlbnMgY29tZSBpbnRvIGNvbmZsaWN0LCB0aGUgcmVzdWx0IGlzIHVzdWFsbHkgY2hhb3MuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiU2hhcmVkIFNwZWxsY2FzdGluZyAoQ292ZW4gT25seSlcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIldoaWxlIGFsbCB0aHJlZSBtZW1iZXJzIG9mIGEgaGFnIGNvdmVuIGFyZSB3aXRoaW4gMzAgZmVldCBvZiBvbmUgYW5vdGhlciwgdGhleSBjYW4gZWFjaCBjYXN0IHRoZSBmb2xsb3dpbmcgc3BlbGxzIGZyb20gdGhlIHdpemFyZCdzIHNwZWxsIGxpc3QgYnV0IG11c3Qgc2hhcmUgdGhlIHNwZWxsIHNsb3RzIGFtb25nIHRoZW1zZWx2ZXM6XFxcXG5cXFxcblx1MjAyMiAxc3QgbGV2ZWwgKDQgc2xvdHMpOiBpZGVudGlmeSwgcmF5IG9mIHNpY2tuZXNzXFxcXG5cdTIwMjIgMm5kIGxldmVsICgzIHNsb3RzKTogaG9sZCBwZXJzb24sIGxvY2F0ZSBvYmplY3RcXFxcblx1MjAyMiAzcmQgbGV2ZWwgKDMgc2xvdHMpOiBiZXN0b3cgY3Vyc2UsIGNvdW50ZXJzcGVsbCwgbGlnaHRuaW5nIGJvbHRcXFxcblx1MjAyMiA0dGggbGV2ZWwgKDMgc2xvdHMpOiBwaGFudGFzbWFsIGtpbGxlciwgcG9seW1vcnBoXFxcXG5cdTIwMjIgNXRoIGxldmVsICgyIHNsb3RzKTogY29udGFjdCBvdGhlciBwbGFuZSwgc2NyeWluZ1xcXFxuXHUyMDIyIDZ0aCBsZXZlbCAoMSBzbG90KTogZXllIGJpdGVcXFxcblxcXFxuRm9yIGNhc3RpbmcgdGhlc2Ugc3BlbGxzLCBlYWNoIGhhZyBpcyBhIDEydGgtbGV2ZWwgc3BlbGxjYXN0ZXIgdGhhdCB1c2VzIEludGVsbGlnZW5jZSBhcyBoZXIgc3BlbGxjYXN0aW5nIGFiaWxpdHkuIFRoZSBzcGVsbCBzYXZlIERDIGlzIDEyK3RoZSBoYWcncyBJbnRlbGxpZ2VuY2UgbW9kaWZpZXIsIGFuZCB0aGUgc3BlbGwgYXR0YWNrIGJvbnVzIGlzIDQrdGhlIGhhZydzIEludGVsbGlnZW5jZSBtb2RpZmllci5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJIYWcgRXllIChDb3ZlbiBPbmx5KVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiQSBoYWcgY292ZW4gY2FuIGNyYWZ0IGEgbWFnaWMgaXRlbSBjYWxsZWQgYSBoYWcgZXllLCB3aGljaCBpcyBtYWRlIGZyb20gYSByZWFsIGV5ZSBjb2F0ZWQgaW4gdmFybmlzaCBhbmQgb2Z0ZW4gZml0dGVkIHRvIGEgcGVuZGFudCBvciBvdGhlciB3ZWFyYWJsZSBpdGVtLiBUaGUgaGFnIGV5ZSBpcyB1c3VhbGx5IGVudHJ1c3RlZCB0byBhIG1pbmlvbiBmb3Igc2FmZWtlZXBpbmcgYW5kIHRyYW5zcG9ydC4gQSBoYWcgaW4gdGhlIGNvdmVuIGNhbiB0YWtlIGFuIGFjdGlvbiB0byBzZWUgd2hhdCB0aGUgaGFnIGV5ZSBzZWVzIGlmIHRoZSBoYWcgZXllIGlzIG9uIHRoZSBzYW1lIHBsYW5lIG9mIGV4aXN0ZW5jZS4gQSBoYWcgZXllIGhhcyBBQyAxMCwgMSBoaXQgcG9pbnQsIGFuZCBkYXJrdmlzaW9uIHdpdGggYSByYWRpdXMgb2YgNjAgZmVldC4gSWYgaXQgaXMgZGVzdHJveWVkLCBlYWNoIGNvdmVuIG1lbWJlciB0YWtlcyAzZDEwIHBzeWNoaWMgZGFtYWdlIGFuZCBpcyBibGluZGVkIGZvciAyNCBob3Vycy5cXFxcbkEgaGFnIGNvdmVuIGNhbiBoYXZlIG9ubHkgb25lIGhhZyBleWUgYXQgYSB0aW1lLCBhbmQgY3JlYXRpbmcgYSBuZXcgb25lIHJlcXVpcmVzIGFsbCB0aHJlZSBtZW1iZXJzIG9mIHRoZSBjb3ZlbiB0byBwZXJmb3JtIGEgcml0dWFsLiBUaGUgcml0dWFsIHRha2VzIDEgaG91ciwgYW5kIHRoZSBoYWdzIGNhbid0IHBlcmZvcm0gaXQgd2hpbGUgYmxpbmRlZC4gRHVyaW5nIHRoZSByaXR1YWwsIGlmIHRoZSBoYWdzIHRha2UgYW55IGFjdGlvbiBvdGhlciB0aGFuIHBlcmZvcm1pbmcgdGhlIHJpdHVhbCwgdGhleSBtdXN0IHN0YXJ0IG92ZXIuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkNsYXdzXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNiB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDEzICgyZDggKyA0KSBzbGFzaGluZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA2LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjJkOFwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogNFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIklsbHVzb3J5IEFwcGVhcmFuY2VcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBoYWcgY292ZXJzIGhlcnNlbGYgYW5kIGFueXRoaW5nIHNoZSBpcyB3ZWFyaW5nIG9yIGNhcnJ5aW5nIHdpdGggYSBtYWdpY2FsIGlsbHVzaW9uIHRoYXQgbWFrZXMgaGVyIGxvb2sgbGlrZSBhbm90aGVyIGNyZWF0dXJlIG9mIGhlciBnZW5lcmFsIHNpemUgYW5kIGh1bWFub2lkIHNoYXBlLiBUaGUgaWxsdXNpb24gZW5kcyBpZiB0aGUgaGFnIHRha2VzIGEgYm9udXMgYWN0aW9uIHRvIGVuZCBpdCBvciBpZiBzaGUgZGllcy5cXFxcblRoZSBjaGFuZ2VzIHdyb3VnaHQgYnkgdGhpcyBlZmZlY3QgZmFpbCB0byBob2xkIHVwIHRvIHBoeXNpY2FsIGluc3BlY3Rpb24uIEZvciBleGFtcGxlLCB0aGUgaGFnIGNvdWxkIGFwcGVhciB0byBoYXZlIHNtb290aCBza2luLCBidXQgc29tZW9uZSB0b3VjaGluZyBoZXIgd291bGQgZmVlbCBoZXIgcm91Z2ggZmxlc2guIE90aGVyd2lzZSwgYSBjcmVhdHVyZSBtdXN0IHRha2UgYW4gYWN0aW9uIHRvIHZpc3VhbGx5IGluc3BlY3QgdGhlIGlsbHVzaW9uIGFuZCBzdWNjZWVkIG9uIGEgREMgMjAgSW50ZWxsaWdlbmNlIChJbnZlc3RpZ2F0aW9uKSBjaGVjayB0byBkaXNjZXJuIHRoYXQgdGhlIGhhZyBpcyBkaXNndWlzZWQuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiSW52aXNpYmxlIFBhc3NhZ2VcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBoYWcgbWFnaWNhbGx5IHR1cm5zIGludmlzaWJsZSB1bnRpbCBzaGUgYXR0YWNrcyBvciBjYXN0cyBhIHNwZWxsLCBvciB1bnRpbCBoZXIgY29uY2VudHJhdGlvbiBlbmRzIChhcyBpZiBjb25jZW50cmF0aW5nIG9uIGEgc3BlbGwpLiBXaGlsZSBpbnZpc2libGUsIHNoZSBsZWF2ZXMgbm8gcGh5c2ljYWwgZXZpZGVuY2Ugb2YgaGVyIHBhc3NhZ2UsIHNvIHNoZSBjYW4gYmUgdHJhY2tlZCBvbmx5IGJ5IG1hZ2ljLiBBbnkgZXF1aXBtZW50IHNoZSB3ZWFycyBvciBjYXJyaWVzIGlzIGludmlzaWJsZSB3aXRoIGhlci5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIkdyaWNrXCIsXG4gICAgICAgIHNpemU6IFwiTWVkaXVtXCIsXG4gICAgICAgIHR5cGU6IFwibW9uc3Ryb3NpdHlcIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcIm5ldXRyYWxcIixcbiAgICAgICAgYWM6IDE0LFxuICAgICAgICBocDogMjcsXG4gICAgICAgIGhpdF9kaWNlOiBcIjZkOFwiLFxuICAgICAgICBzcGVlZDogXCIzMCBmdC4sIGNsaW1iIDMwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzE0LCAxNCwgMTEsIDMsIDE0LCA1XSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOlxuICAgICAgICAgICAgXCJibHVkZ2VvbmluZywgcGllcmNpbmcsIGFuZCBzbGFzaGluZyBkYW1hZ2UgZnJvbSBub25tYWdpY2FsIHdlYXBvbnNcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBzZW5zZXM6IFwiZGFya3Zpc2lvbiA2MCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxMlwiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiXCIsXG4gICAgICAgIGNyOiBcIjJcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJTdG9uZSBDYW1vdWZsYWdlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZ3JpY2sgaGFzIGFkdmFudGFnZSBvbiBEZXh0ZXJpdHkgKFN0ZWFsdGgpIGNoZWNrcyBtYWRlIHRvIGhpZGUgaW4gcm9ja3kgdGVycmFpbi5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBncmljayBtYWtlcyBvbmUgYXR0YWNrIHdpdGggaXRzIHRlbnRhY2xlcy4gSWYgdGhhdCBhdHRhY2sgaGl0cywgdGhlIGdyaWNrIGNhbiBtYWtlIG9uZSBiZWFrIGF0dGFjayBhZ2FpbnN0IHRoZSBzYW1lIHRhcmdldC5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJUZW50YWNsZXNcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs0IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogOSAoMmQ2ICsgMikgc2xhc2hpbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIyZDZcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJCZWFrXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNCB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDUgKDFkNiArIDIpIHBpZXJjaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDQsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMWQ2XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiAyXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJHcmlmZm9uXCIsXG4gICAgICAgIHNpemU6IFwiTGFyZ2VcIixcbiAgICAgICAgdHlwZTogXCJtb25zdHJvc2l0eVwiLFxuICAgICAgICBzdWJ0eXBlOiBcIlwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwidW5hbGlnbmVkXCIsXG4gICAgICAgIGFjOiAxMixcbiAgICAgICAgaHA6IDU5LFxuICAgICAgICBoaXRfZGljZTogXCI3ZDEwICsgMjBcIixcbiAgICAgICAgc3BlZWQ6IFwiMzAgZnQuLCBmbHkgODAgZnQuXCIsXG4gICAgICAgIHN0YXRzOiBbMTgsIDE1LCAxNiwgMiwgMTMsIDhdLFxuICAgICAgICBza2lsbHNhdmVzOiBbeyBwZXJjZXB0aW9uOiA1IH1dLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcbiAgICAgICAgc2Vuc2VzOiBcImRhcmt2aXNpb24gNjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTVcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcIlwiLFxuICAgICAgICBjcjogXCIyXCIsXG4gICAgICAgIHRyYWl0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiS2VlbiBTaWdodFwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGdyaWZmb24gaGFzIGFkdmFudGFnZSBvbiBXaXNkb20gKFBlcmNlcHRpb24pIGNoZWNrcyB0aGF0IHJlbHkgb24gc2lnaHQuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZ3JpZmZvbiBtYWtlcyB0d28gYXR0YWNrczogb25lIHdpdGggaXRzIGJlYWsgYW5kIG9uZSB3aXRoIGl0cyBjbGF3cy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJCZWFrXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNiB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDggKDFkOCArIDQpIHBpZXJjaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDYsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMWQ4XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiA0XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQ2xhd3NcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs2IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTEgKDJkNiArIDQpIHNsYXNoaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDYsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMmQ2XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiA0XG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJHcmltbG9ja1wiLFxuICAgICAgICBzaXplOiBcIk1lZGl1bVwiLFxuICAgICAgICB0eXBlOiBcImh1bWFub2lkXCIsXG4gICAgICAgIHN1YnR5cGU6IFwiZ3JpbWxvY2tcIixcbiAgICAgICAgYWxpZ25tZW50OiBcIm5ldXRyYWwgZXZpbFwiLFxuICAgICAgICBhYzogMTEsXG4gICAgICAgIGhwOiAxMSxcbiAgICAgICAgaGl0X2RpY2U6IFwiMmQ4ICsgMlwiLFxuICAgICAgICBzcGVlZDogXCIzMCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsxNiwgMTIsIDEyLCA5LCA4LCA2XSxcbiAgICAgICAgc2tpbGxzYXZlczogW3sgYXRobGV0aWNzOiA1IH0sIHsgcGVyY2VwdGlvbjogMyB9LCB7IHN0ZWFsdGg6IDMgfV0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwiYmxpbmRlZFwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcbiAgICAgICAgc2Vuc2VzOiBcImJsaW5kc2lnaHQgMzAgZnQuIG9yIDEwIGZ0LiB3aGlsZSBkZWFmZW5lZCAoYmxpbmQgYmV5b25kIHRoaXMgcmFkaXVzKSwgcGFzc2l2ZSBQZXJjZXB0aW9uIDEzXCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJVbmRlcmNvbW1vblwiLFxuICAgICAgICBjcjogXCIxLzRcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJCbGluZCBTZW5zZXNcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBncmltbG9jayBjYW4ndCB1c2UgaXRzIGJsaW5kc2lnaHQgd2hpbGUgZGVhZmVuZWQgYW5kIHVuYWJsZSB0byBzbWVsbC5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJLZWVuIEhlYXJpbmcgYW5kIFNtZWxsXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZ3JpbWxvY2sgaGFzIGFkdmFudGFnZSBvbiBXaXNkb20gKFBlcmNlcHRpb24pIGNoZWNrcyB0aGF0IHJlbHkgb24gaGVhcmluZyBvciBzbWVsbC5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJTdG9uZSBDYW1vdWZsYWdlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZ3JpbWxvY2sgaGFzIGFkdmFudGFnZSBvbiBEZXh0ZXJpdHkgKFN0ZWFsdGgpIGNoZWNrcyBtYWRlIHRvIGhpZGUgaW4gcm9ja3kgdGVycmFpbi5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiU3Bpa2VkIEJvbmUgQ2x1YlwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzUgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiA1ICgxZDQgKyAzKSBibHVkZ2VvbmluZyBkYW1hZ2UgcGx1cyAyICgxZDQpIHBpZXJjaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDUsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMWQ0ICsgMWQ0XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiA1XG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJHdWFyZFwiLFxuICAgICAgICBzaXplOiBcIk1lZGl1bVwiLFxuICAgICAgICB0eXBlOiBcImh1bWFub2lkXCIsXG4gICAgICAgIHN1YnR5cGU6IFwiYW55IHJhY2VcIixcbiAgICAgICAgYWxpZ25tZW50OiBcImFueSBhbGlnbm1lbnRcIixcbiAgICAgICAgYWM6IDE2LFxuICAgICAgICBocDogMTEsXG4gICAgICAgIGhpdF9kaWNlOiBcIjJkOCArIDJcIixcbiAgICAgICAgc3BlZWQ6IFwiMzAgZnQuXCIsXG4gICAgICAgIHN0YXRzOiBbMTMsIDEyLCAxMiwgMTAsIDExLCAxMF0sXG4gICAgICAgIHNraWxsc2F2ZXM6IFt7IHBlcmNlcHRpb246IDIgfV0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBzZW5zZXM6IFwicGFzc2l2ZSBQZXJjZXB0aW9uIDEyXCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJhbnkgb25lIGxhbmd1YWdlICh1c3VhbGx5IENvbW1vbilcIixcbiAgICAgICAgY3I6IFwiMS84XCIsXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlNwZWFyXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBvciBSYW5nZWQgV2VhcG9uIEF0dGFjazogKzMgdG8gaGl0LCByZWFjaCA1IGZ0LiBvciByYW5nZSAyMC82MCBmdC4sIG9uZSB0YXJnZXQuIEhpdDogNCAoMWQ2ICsgMSkgcGllcmNpbmcgZGFtYWdlIG9yIDUgKDFkOCArIDEpIHBpZXJjaW5nIGRhbWFnZSBpZiB1c2VkIHdpdGggdHdvIGhhbmRzIHRvIG1ha2UgYSBtZWxlZSBhdHRhY2suXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAzLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjFkNlwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogMVxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiR3VhcmRpYW4gTmFnYVwiLFxuICAgICAgICBzaXplOiBcIkxhcmdlXCIsXG4gICAgICAgIHR5cGU6IFwibW9uc3Ryb3NpdHlcIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcImxhd2Z1bCBnb29kXCIsXG4gICAgICAgIGFjOiAxOCxcbiAgICAgICAgaHA6IDEyNyxcbiAgICAgICAgaGl0X2RpY2U6IFwiMTVkMTAgKyA0NFwiLFxuICAgICAgICBzcGVlZDogXCI0MCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsxOSwgMTgsIDE2LCAxNiwgMTksIDE4XSxcbiAgICAgICAgc2F2ZXM6IFtcbiAgICAgICAgICAgIHsgZGV4dGVyaXR5OiA4IH0sXG4gICAgICAgICAgICB7IGNvbnN0aXR1dGlvbjogNyB9LFxuICAgICAgICAgICAgeyBpbnRlbGxpZ2VuY2U6IDcgfSxcbiAgICAgICAgICAgIHsgd2lzZG9tOiA4IH0sXG4gICAgICAgICAgICB7IGNoYXJpc21hOiA4IH1cbiAgICAgICAgXSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczogXCJwb2lzb25cIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiY2hhcm1lZCwgcG9pc29uZWRcIixcbiAgICAgICAgc2Vuc2VzOiBcImRhcmt2aXNpb24gNjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTRcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcIkNlbGVzdGlhbCwgQ29tbW9uXCIsXG4gICAgICAgIGNyOiBcIjEwXCIsXG4gICAgICAgIHRyYWl0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiUmVqdXZlbmF0aW9uXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJJZiBpdCBkaWVzLCB0aGUgbmFnYSByZXR1cm5zIHRvIGxpZmUgaW4gMWQ2IGRheXMgYW5kIHJlZ2FpbnMgYWxsIGl0cyBoaXQgcG9pbnRzLiBPbmx5IGEgd2lzaCBzcGVsbCBjYW4gcHJldmVudCB0aGlzIHRyYWl0IGZyb20gZnVuY3Rpb25pbmcuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkJpdGVcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs4IHRvIGhpdCwgcmVhY2ggMTAgZnQuLCBvbmUgY3JlYXR1cmUuIEhpdDogOCAoMWQ4ICsgNCkgcGllcmNpbmcgZGFtYWdlLCBhbmQgdGhlIHRhcmdldCBtdXN0IG1ha2UgYSBEQyAxNSBDb25zdGl0dXRpb24gc2F2aW5nIHRocm93LCB0YWtpbmcgNDUgKDEwZDgpIHBvaXNvbiBkYW1hZ2Ugb24gYSBmYWlsZWQgc2F2ZSwgb3IgaGFsZiBhcyBtdWNoIGRhbWFnZSBvbiBhIHN1Y2Nlc3NmdWwgb25lLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogOCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIxZDhcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDRcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJTcGl0IFBvaXNvblwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiUmFuZ2VkIFdlYXBvbiBBdHRhY2s6ICs4IHRvIGhpdCwgcmFuZ2UgMTUvMzAgZnQuLCBvbmUgY3JlYXR1cmUuIEhpdDogVGhlIHRhcmdldCBtdXN0IG1ha2UgYSBEQyAxNSBDb25zdGl0dXRpb24gc2F2aW5nIHRocm93LCB0YWtpbmcgNDUgKDEwZDgpIHBvaXNvbiBkYW1hZ2Ugb24gYSBmYWlsZWQgc2F2ZSwgb3IgaGFsZiBhcyBtdWNoIGRhbWFnZSBvbiBhIHN1Y2Nlc3NmdWwgb25lLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogOCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIxMGQ4XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgc3BlbGxzOiBbXG4gICAgICAgICAgICBcIlRoZSBuYWdhIGlzIGFuIDExdGgtbGV2ZWwgc3BlbGxjYXN0ZXIuIEl0cyBzcGVsbGNhc3RpbmcgYWJpbGl0eSBpcyBXaXNkb20gKHNwZWxsIHNhdmUgREMgMTYsICs4IHRvIGhpdCB3aXRoIHNwZWxsIGF0dGFja3MpLCBhbmQgaXQgbmVlZHMgb25seSB2ZXJiYWwgY29tcG9uZW50cyB0byBjYXN0IGl0cyBzcGVsbHMuIEl0IGhhcyB0aGUgZm9sbG93aW5nIGNsZXJpYyBzcGVsbHMgcHJlcGFyZWQ6XCIsXG4gICAgICAgICAgICB7IFwiQ2FudHJpcHMgKGF0IHdpbGwpXCI6IFwibWVuZGluZywgc2FjcmVkIGZsYW1lLCB0aGF1bWF0dXJneVwiIH0sXG4gICAgICAgICAgICB7IFwiMXN0IGxldmVsICg0IHNsb3RzKVwiOiBcImNvbW1hbmQsIGN1cmUgd291bmRzLCBzaGllbGQgb2YgZmFpdGhcIiB9LFxuICAgICAgICAgICAgeyBcIjJuZCBsZXZlbCAoMyBzbG90cylcIjogXCJjYWxtIGVtb3Rpb25zLCBob2xkIHBlcnNvblwiIH0sXG4gICAgICAgICAgICB7IFwiM3JkIGxldmVsICgzIHNsb3RzKVwiOiBcImJlc3RvdyBjdXJzZSwgY2xhaXJ2b3lhbmNlXCIgfSxcbiAgICAgICAgICAgIHsgXCI0dGggbGV2ZWwgKDMgc2xvdHMpXCI6IFwiYmFuaXNobWVudCwgZnJlZWRvbSBvZiBtb3ZlbWVudFwiIH0sXG4gICAgICAgICAgICB7IFwiNXRoIGxldmVsICgyIHNsb3RzKVwiOiBcImZsYW1lIHN0cmlrZSwgZ2Vhc1wiIH0sXG4gICAgICAgICAgICB7IFwiNnRoIGxldmVsICgxIHNsb3QpXCI6IFwidHJ1ZSBzZWVpbmdcIiB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJHeW5vc3BoaW54XCIsXG4gICAgICAgIHNpemU6IFwiTGFyZ2VcIixcbiAgICAgICAgdHlwZTogXCJtb25zdHJvc2l0eVwiLFxuICAgICAgICBzdWJ0eXBlOiBcIlwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwibGF3ZnVsIG5ldXRyYWxcIixcbiAgICAgICAgYWM6IDE3LFxuICAgICAgICBocDogMTM2LFxuICAgICAgICBoaXRfZGljZTogXCIxNmQxMCArIDQ4XCIsXG4gICAgICAgIHNwZWVkOiBcIjQwIGZ0LiwgZmx5IDYwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzE4LCAxNSwgMTYsIDE4LCAxOCwgMThdLFxuICAgICAgICBza2lsbHNhdmVzOiBbXG4gICAgICAgICAgICB7IGFyY2FuYTogMTIgfSxcbiAgICAgICAgICAgIHsgaGlzdG9yeTogMTIgfSxcbiAgICAgICAgICAgIHsgcGVyY2VwdGlvbjogOCB9LFxuICAgICAgICAgICAgeyByZWxpZ2lvbjogOCB9XG4gICAgICAgIF0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczpcbiAgICAgICAgICAgIFwiYmx1ZGdlb25pbmcsIHBpZXJjaW5nLCBhbmQgc2xhc2hpbmcgZnJvbSBub25tYWdpY2FsIHdlYXBvbnNcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwicHN5Y2hpY1wiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJjaGFybWVkLCBmcmlnaHRlbmVkXCIsXG4gICAgICAgIHNlbnNlczogXCJ0cnVlc2lnaHQgMTIwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDE4XCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJDb21tb24sIFNwaGlueFwiLFxuICAgICAgICBjcjogXCIxMVwiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkluc2NydXRhYmxlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgc3BoaW54IGlzIGltbXVuZSB0byBhbnkgZWZmZWN0IHRoYXQgd291bGQgc2Vuc2UgaXRzIGVtb3Rpb25zIG9yIHJlYWQgaXRzIHRob3VnaHRzLCBhcyB3ZWxsIGFzIGFueSBkaXZpbmF0aW9uIHNwZWxsIHRoYXQgaXQgcmVmdXNlcy4gV2lzZG9tIChJbnNpZ2h0KSBjaGVja3MgbWFkZSB0byBhc2NlcnRhaW4gdGhlIHNwaGlueCdzIGludGVudGlvbnMgb3Igc2luY2VyaXR5IGhhdmUgZGlzYWR2YW50YWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk1hZ2ljIFdlYXBvbnNcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBzcGhpbngncyB3ZWFwb24gYXR0YWNrcyBhcmUgbWFnaWNhbC5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBzcGhpbnggbWFrZXMgdHdvIGNsYXcgYXR0YWNrcy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJDbGF3XCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArOSB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDEzICgyZDggKyA0KSBzbGFzaGluZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA5LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjJkOFwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogNFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBsZWdlbmRhcnlfYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQ2xhdyBBdHRhY2tcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBzcGhpbnggbWFrZXMgb25lIGNsYXcgYXR0YWNrLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlRlbGVwb3J0IChDb3N0cyAyIEFjdGlvbnMpXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgc3BoaW54IG1hZ2ljYWxseSB0ZWxlcG9ydHMsIGFsb25nIHdpdGggYW55IGVxdWlwbWVudCBpdCBpcyB3ZWFyaW5nIG9yIGNhcnJ5aW5nLCB1cCB0byAxMjAgZmVldCB0byBhbiB1bm9jY3VwaWVkIHNwYWNlIGl0IGNhbiBzZWUuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQ2FzdCBhIFNwZWxsIChDb3N0cyAzIEFjdGlvbnMpXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgc3BoaW54IGNhc3RzIGEgc3BlbGwgZnJvbSBpdHMgbGlzdCBvZiBwcmVwYXJlZCBzcGVsbHMsIHVzaW5nIGEgc3BlbGwgc2xvdCBhcyBub3JtYWwuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIHNwZWxsczogW1xuICAgICAgICAgICAgXCJUaGUgc3BoaW54IGlzIGEgOXRoLWxldmVsIHNwZWxsY2FzdGVyLiBJdHMgc3BlbGxjYXN0aW5nIGFiaWxpdHkgaXMgSW50ZWxsaWdlbmNlIChzcGVsbCBzYXZlIERDIDE2LCArOCB0byBoaXQgd2l0aCBzcGVsbCBhdHRhY2tzKS4gSXQgcmVxdWlyZXMgbm8gbWF0ZXJpYWwgY29tcG9uZW50cyB0byBjYXN0IGl0cyBzcGVsbHMuIFRoZSBzcGhpbnggaGFzIHRoZSBmb2xsb3dpbmcgd2l6YXJkIHNwZWxscyBwcmVwYXJlZDpcIixcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIkNhbnRyaXBzIChhdCB3aWxsKVwiOlxuICAgICAgICAgICAgICAgICAgICBcIm1hZ2UgaGFuZCwgbWlub3IgaWxsdXNpb24sIHByZXN0aWRpZ2l0YXRpb25cIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHsgXCIxc3QgbGV2ZWwgKDQgc2xvdHMpXCI6IFwiZGV0ZWN0IG1hZ2ljLCBpZGVudGlmeSwgc2hpZWxkXCIgfSxcbiAgICAgICAgICAgIHsgXCIybmQgbGV2ZWwgKDMgc2xvdHMpXCI6IFwiZGFya25lc3MsIGxvY2F0ZSBvYmplY3QsIHN1Z2dlc3Rpb25cIiB9LFxuICAgICAgICAgICAgeyBcIjNyZCBsZXZlbCAoMyBzbG90cylcIjogXCJkaXNwZWwgbWFnaWMsIHJlbW92ZSBjdXJzZSwgdG9uZ3Vlc1wiIH0sXG4gICAgICAgICAgICB7IFwiNHRoIGxldmVsICgzIHNsb3RzKVwiOiBcImJhbmlzaG1lbnQsIGdyZWF0ZXIgaW52aXNpYmlsaXR5XCIgfSxcbiAgICAgICAgICAgIHsgXCI1dGggbGV2ZWwgKDEgc2xvdClcIjogXCJsZWdlbmQgbG9yZVwiIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIkhhbGYtUmVkIERyYWdvbiBWZXRlcmFuXCIsXG4gICAgICAgIHNpemU6IFwiTWVkaXVtXCIsXG4gICAgICAgIHR5cGU6IFwiaHVtYW5vaWRcIixcbiAgICAgICAgc3VidHlwZTogXCJodW1hblwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwiYW55IGFsaWdubWVudFwiLFxuICAgICAgICBhYzogMTgsXG4gICAgICAgIGhwOiA2NSxcbiAgICAgICAgaGl0X2RpY2U6IFwiMTBkOCArIDIwXCIsXG4gICAgICAgIHNwZWVkOiBcIjMwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzE2LCAxMywgMTQsIDEwLCAxMSwgMTBdLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiZmlyZVwiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIHNlbnNlczogXCJibGluZHNpZ2h0IDEwIGZ0LiwgZGFya3Zpc2lvbiA2MCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxMlwiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiQ29tbW9uLCBEcmFjb25pY1wiLFxuICAgICAgICBjcjogXCI1XCIsXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgdmV0ZXJhbiBtYWtlcyB0d28gbG9uZ3N3b3JkIGF0dGFja3MuIElmIGl0IGhhcyBhIHNob3J0c3dvcmQgZHJhd24sIGl0IGNhbiBhbHNvIG1ha2UgYSBzaG9ydHN3b3JkIGF0dGFjay5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJMb25nc3dvcmRcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIldlYXBvbiBBdHRhY2s6ICs1IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogNyAoMWQ4ICsgMykgc2xhc2hpbmcgZGFtYWdlLCBvciA4ICgxZDEwICsgMykgc2xhc2hpbmcgZGFtYWdlIGlmIHVzZWQgd2l0aCB0d28gaGFuZHMuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA1LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjFkOFwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogM1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlNob3J0c3dvcmRcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs1IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogNiAoMWQ2ICsgMykgcGllcmNpbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNSxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIxZDZcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDNcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJIZWF2eSBDcm9zc2Jvd1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiUmFuZ2VkIFdlYXBvbiBBdHRhY2s6ICszIHRvIGhpdCwgcmFuZ2UgMTAwLzQwMCBmdC4sIG9uZSB0YXJnZXQuIEhpdDogNiAoMWQxMCArIDEpIHBpZXJjaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDMsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMWQxMFwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogMVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkZpcmUgQnJlYXRoIChSZWNoYXJnZSA1LTYpXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgdmV0ZXJhbiBleGhhbGVzIGZpcmUgaW4gYSAxNS1mb290IGNvbmUuIEVhY2ggY3JlYXR1cmUgaW4gdGhhdCBhcmVhIG11c3QgbWFrZSBhIERDIDE1IERleHRlcml0eSBzYXZpbmcgdGhyb3csIHRha2luZyAyNCAoN2Q2KSBmaXJlIGRhbWFnZSBvbiBhIGZhaWxlZCBzYXZlLCBvciBoYWxmIGFzIG11Y2ggZGFtYWdlIG9uIGEgc3VjY2Vzc2Z1bCBvbmUuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjdkNlwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJIYXJweVwiLFxuICAgICAgICBzaXplOiBcIk1lZGl1bVwiLFxuICAgICAgICB0eXBlOiBcIm1vbnN0cm9zaXR5XCIsXG4gICAgICAgIHN1YnR5cGU6IFwiXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJjaGFvdGljIGV2aWxcIixcbiAgICAgICAgYWM6IDExLFxuICAgICAgICBocDogMzgsXG4gICAgICAgIGhpdF9kaWNlOiBcIjdkOCArIDZcIixcbiAgICAgICAgc3BlZWQ6IFwiMjAgZnQuLCBmbHkgNDAgZnQuXCIsXG4gICAgICAgIHN0YXRzOiBbMTIsIDEzLCAxMiwgNywgMTAsIDEzXSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIHNlbnNlczogXCJwYXNzaXZlIFBlcmNlcHRpb24gMTBcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcIkNvbW1vblwiLFxuICAgICAgICBjcjogXCIxXCIsXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgaGFycHkgbWFrZXMgdHdvIGF0dGFja3M6IG9uZSB3aXRoIGl0cyBjbGF3cyBhbmQgb25lIHdpdGggaXRzIGNsdWIuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQ2xhd3NcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICszIHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogNiAoMmQ0ICsgMSkgc2xhc2hpbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMyxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIyZDRcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDFcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJDbHViXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMyB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDMgKDFkNCArIDEpIGJsdWRnZW9uaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDMsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMWQ0XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiAxXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTHVyaW5nIFNvbmdcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBoYXJweSBzaW5ncyBhIG1hZ2ljYWwgbWVsb2R5LiBFdmVyeSBodW1hbm9pZCBhbmQgZ2lhbnQgd2l0aGluIDMwMCBmdC4gb2YgdGhlIGhhcnB5IHRoYXQgY2FuIGhlYXIgdGhlIHNvbmcgbXVzdCBzdWNjZWVkIG9uIGEgREMgMTEgV2lzZG9tIHNhdmluZyB0aHJvdyBvciBiZSBjaGFybWVkIHVudGlsIHRoZSBzb25nIGVuZHMuIFRoZSBoYXJweSBtdXN0IHRha2UgYSBib251cyBhY3Rpb24gb24gaXRzIHN1YnNlcXVlbnQgdHVybnMgdG8gY29udGludWUgc2luZ2luZy4gSXQgY2FuIHN0b3Agc2luZ2luZyBhdCBhbnkgdGltZS4gVGhlIHNvbmcgZW5kcyBpZiB0aGUgaGFycHkgaXMgaW5jYXBhY2l0YXRlZC5cXFxcbldoaWxlIGNoYXJtZWQgYnkgdGhlIGhhcnB5LCBhIHRhcmdldCBpcyBpbmNhcGFjaXRhdGVkIGFuZCBpZ25vcmVzIHRoZSBzb25ncyBvZiBvdGhlciBoYXJwaWVzLiBJZiB0aGUgY2hhcm1lZCB0YXJnZXQgaXMgbW9yZSB0aGFuIDUgZnQuIGF3YXkgZnJvbSB0aGUgaGFycHksIHRoZSBtdXN0IG1vdmUgb24gaXRzIHR1cm4gdG93YXJkIHRoZSBoYXJweSBieSB0aGUgbW9zdCBkaXJlY3Qgcm91dGUuIEl0IGRvZXNuJ3QgYXZvaWQgb3Bwb3J0dW5pdHkgYXR0YWNrcywgYnV0IGJlZm9yZSBtb3ZpbmcgaW50byBkYW1hZ2luZyB0ZXJyYWluLCBzdWNoIGFzIGxhdmEgb3IgYSBwaXQsIGFuZCB3aGVuZXZlciBpdCB0YWtlcyBkYW1hZ2UgZnJvbSBhIHNvdXJjZSBvdGhlciB0aGFuIHRoZSBoYXJweSwgYSB0YXJnZXQgY2FuIHJlcGVhdCB0aGUgc2F2aW5nIHRocm93LiBBIGNyZWF0dXJlIGNhbiBhbHNvIHJlcGVhdCB0aGUgc2F2aW5nIHRocm93IGF0IHRoZSBlbmQgb2YgZWFjaCBvZiBpdHMgdHVybnMuIElmIGEgY3JlYXR1cmUncyBzYXZpbmcgdGhyb3cgaXMgc3VjY2Vzc2Z1bCwgdGhlIGVmZmVjdCBlbmRzIG9uIGl0LlxcXFxuQSB0YXJnZXQgdGhhdCBzdWNjZXNzZnVsbHkgc2F2ZXMgaXMgaW1tdW5lIHRvIHRoaXMgaGFycHkncyBzb25nIGZvciB0aGUgbmV4dCAyNCBob3Vycy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIkhhd2tcIixcbiAgICAgICAgc2l6ZTogXCJUaW55XCIsXG4gICAgICAgIHR5cGU6IFwiYmVhc3RcIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcInVuYWxpZ25lZFwiLFxuICAgICAgICBhYzogMTMsXG4gICAgICAgIGhwOiAxLFxuICAgICAgICBoaXRfZGljZTogXCIxZDQgKyAtMlwiLFxuICAgICAgICBzcGVlZDogXCIxMCBmdC4sIGZseSA2MCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFs1LCAxNiwgOCwgMiwgMTQsIDZdLFxuICAgICAgICBza2lsbHNhdmVzOiBbeyBwZXJjZXB0aW9uOiA0IH1dLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcbiAgICAgICAgc2Vuc2VzOiBcInBhc3NpdmUgUGVyY2VwdGlvbiAxNFwiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiXCIsXG4gICAgICAgIGNyOiBcIjBcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJLZWVuIFNpZ2h0XCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgaGF3ayBoYXMgYWR2YW50YWdlIG9uIFdpc2RvbSAoUGVyY2VwdGlvbikgY2hlY2tzIHRoYXQgcmVseSBvbiBzaWdodC5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiVGFsb25zXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNSB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDEgc2xhc2hpbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNSxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDFcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIkhlbGwgSG91bmRcIixcbiAgICAgICAgc2l6ZTogXCJNZWRpdW1cIixcbiAgICAgICAgdHlwZTogXCJmaWVuZFwiLFxuICAgICAgICBzdWJ0eXBlOiBcIlwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwibGF3ZnVsIGV2aWxcIixcbiAgICAgICAgYWM6IDE1LFxuICAgICAgICBocDogNDUsXG4gICAgICAgIGhpdF9kaWNlOiBcIjdkOCArIDEzXCIsXG4gICAgICAgIHNwZWVkOiBcIjUwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzE3LCAxMiwgMTQsIDYsIDEzLCA2XSxcbiAgICAgICAgc2tpbGxzYXZlczogW3sgcGVyY2VwdGlvbjogNSB9XSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczogXCJmaXJlXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBzZW5zZXM6IFwiZGFya3Zpc2lvbiA2MCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxNVwiLFxuICAgICAgICBsYW5ndWFnZXM6IFwidW5kZXJzdGFuZHMgSW5mZXJuYWwgYnV0IGNhbid0IHNwZWFrIGl0XCIsXG4gICAgICAgIGNyOiBcIjNcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJLZWVuIEhlYXJpbmcgYW5kIFNtZWxsXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgaG91bmQgaGFzIGFkdmFudGFnZSBvbiBXaXNkb20gKFBlcmNlcHRpb24pIGNoZWNrcyB0aGF0IHJlbHkgb24gaGVhcmluZyBvciBzbWVsbC5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJQYWNrIFRhY3RpY3NcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBob3VuZCBoYXMgYWR2YW50YWdlIG9uIGFuIGF0dGFjayByb2xsIGFnYWluc3QgYSBjcmVhdHVyZSBpZiBhdCBsZWFzdCBvbmUgb2YgdGhlIGhvdW5kJ3MgYWxsaWVzIGlzIHdpdGhpbiA1IGZ0LiBvZiB0aGUgY3JlYXR1cmUgYW5kIHRoZSBhbGx5IGlzbid0IGluY2FwYWNpdGF0ZWQuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkJpdGVcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs1IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogNyAoMWQ4ICsgMykgcGllcmNpbmcgZGFtYWdlIHBsdXMgNyAoMmQ2KSBmaXJlIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDUsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMWQ4XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiAzXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiRmlyZSBCcmVhdGggKFJlY2hhcmdlIDUtNilcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBob3VuZCBleGhhbGVzIGZpcmUgaW4gYSAxNS1mb290IGNvbmUuIEVhY2ggY3JlYXR1cmUgaW4gdGhhdCBhcmVhIG11c3QgbWFrZSBhIERDIDEyIERleHRlcml0eSBzYXZpbmcgdGhyb3csIHRha2luZyAyMSAoNmQ2KSBmaXJlIGRhbWFnZSBvbiBhIGZhaWxlZCBzYXZlLCBvciBoYWxmIGFzIG11Y2ggZGFtYWdlIG9uIGEgc3VjY2Vzc2Z1bCBvbmUuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjZkNlwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJIZXpyb3VcIixcbiAgICAgICAgc2l6ZTogXCJMYXJnZVwiLFxuICAgICAgICB0eXBlOiBcImZpZW5kXCIsXG4gICAgICAgIHN1YnR5cGU6IFwiZGVtb25cIixcbiAgICAgICAgYWxpZ25tZW50OiBcImNoYW90aWMgZXZpbFwiLFxuICAgICAgICBhYzogMTYsXG4gICAgICAgIGhwOiAxMzYsXG4gICAgICAgIGhpdF9kaWNlOiBcIjEzZDEwICsgNjRcIixcbiAgICAgICAgc3BlZWQ6IFwiMzAgZnQuXCIsXG4gICAgICAgIHN0YXRzOiBbMTksIDE3LCAyMCwgNSwgMTIsIDEzXSxcbiAgICAgICAgc2F2ZXM6IFt7IHN0cmVuZ3RoOiA3IH0sIHsgY29uc3RpdHV0aW9uOiA4IH0sIHsgd2lzZG9tOiA0IH1dLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6XG4gICAgICAgICAgICBcImNvbGQsIGZpcmUsIGxpZ2h0bmluZzsgYmx1ZGdlb25pbmcsIHBpZXJjaW5nLCBhbmQgc2xhc2hpbmcgZnJvbSBub25tYWdpY2FsIHdlYXBvbnNcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwicG9pc29uXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOiBcInBvaXNvbmVkXCIsXG4gICAgICAgIHNlbnNlczogXCJkYXJrdmlzaW9uIDEyMCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxMVwiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiQWJ5c3NhbCwgdGVsZXBhdGh5IDEyMCBmdC5cIixcbiAgICAgICAgY3I6IFwiOFwiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk1hZ2ljIFJlc2lzdGFuY2VcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBoZXpyb3UgaGFzIGFkdmFudGFnZSBvbiBzYXZpbmcgdGhyb3dzIGFnYWluc3Qgc3BlbGxzIGFuZCBvdGhlciBtYWdpY2FsIGVmZmVjdHMuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RlbmNoXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJBbnkgY3JlYXR1cmUgdGhhdCBzdGFydHMgaXRzIHR1cm4gd2l0aGluIDEwIGZlZXQgb2YgdGhlIGhlenJvdSBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxNCBDb25zdGl0dXRpb24gc2F2aW5nIHRocm93IG9yIGJlIHBvaXNvbmVkIHVudGlsIHRoZSBzdGFydCBvZiBpdHMgbmV4dCB0dXJuLiBPbiBhIHN1Y2Nlc3NmdWwgc2F2aW5nIHRocm93LCB0aGUgY3JlYXR1cmUgaXMgaW1tdW5lIHRvIHRoZSBoZXpyb3UncyBzdGVuY2ggZm9yIDI0IGhvdXJzLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJNdWx0aWF0dGFja1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGhlenJvdSBtYWtlcyB0aHJlZSBhdHRhY2tzOiBvbmUgd2l0aCBpdHMgYml0ZSBhbmQgdHdvIHdpdGggaXRzIGNsYXdzLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkJpdGVcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs3IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTUgKDJkMTAgKyA0KSBwaWVyY2luZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA3LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjJkMTBcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDRcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJDbGF3c1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzcgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxMSAoMmQ2ICsgNCkgc2xhc2hpbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNyxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIyZDZcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDRcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJWYXJpYW50OiBTdW1tb24gRGVtb24gKDEvRGF5KVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGRlbW9uIGNob29zZXMgd2hhdCB0byBzdW1tb24gYW5kIGF0dGVtcHRzIGEgbWFnaWNhbCBzdW1tb25pbmcuXFxcXG5BIGhlenJvdSBoYXMgYSAzMCBwZXJjZW50IGNoYW5jZSBvZiBzdW1tb25pbmcgMmQ2IGRyZXRjaGVzIG9yIG9uZSBoZXpyb3UuXFxcXG5BIHN1bW1vbmVkIGRlbW9uIGFwcGVhcnMgaW4gYW4gdW5vY2N1cGllZCBzcGFjZSB3aXRoaW4gNjAgZmVldCBvZiBpdHMgc3VtbW9uZXIsIGFjdHMgYXMgYW4gYWxseSBvZiBpdHMgc3VtbW9uZXIsIGFuZCBjYW4ndCBzdW1tb24gb3RoZXIgZGVtb25zLiBJdCByZW1haW5zIGZvciAxIG1pbnV0ZSwgdW50aWwgaXQgb3IgaXRzIHN1bW1vbmVyIGRpZXMsIG9yIHVudGlsIGl0cyBzdW1tb25lciBkaXNtaXNzZXMgaXQgYXMgYW4gYWN0aW9uLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiSGlsbCBHaWFudFwiLFxuICAgICAgICBzaXplOiBcIkh1Z2VcIixcbiAgICAgICAgdHlwZTogXCJnaWFudFwiLFxuICAgICAgICBzdWJ0eXBlOiBcIlwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwiY2hhb3RpYyBldmlsXCIsXG4gICAgICAgIGFjOiAxMyxcbiAgICAgICAgaHA6IDEwNSxcbiAgICAgICAgaGl0X2RpY2U6IFwiMTBkMTIgKyA0MFwiLFxuICAgICAgICBzcGVlZDogXCI0MCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsyMSwgOCwgMTksIDUsIDksIDZdLFxuICAgICAgICBza2lsbHNhdmVzOiBbeyBwZXJjZXB0aW9uOiAyIH1dLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcbiAgICAgICAgc2Vuc2VzOiBcInBhc3NpdmUgUGVyY2VwdGlvbiAxMlwiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiR2lhbnRcIixcbiAgICAgICAgY3I6IFwiNVwiLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJNdWx0aWF0dGFja1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGdpYW50IG1ha2VzIHR3byBncmVhdGNsdWIgYXR0YWNrcy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJHcmVhdGNsdWJcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs4IHRvIGhpdCwgcmVhY2ggMTAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDE4ICgzZDggKyA1KSBibHVkZ2VvbmluZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA4LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjNkOFwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogNVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlJvY2tcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlJhbmdlZCBXZWFwb24gQXR0YWNrOiArOCB0byBoaXQsIHJhbmdlIDYwLzI0MCBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMjEgKDNkMTAgKyA1KSBibHVkZ2VvbmluZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA4LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjNkMTBcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDVcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIkhpcHBvZ3JpZmZcIixcbiAgICAgICAgc2l6ZTogXCJMYXJnZVwiLFxuICAgICAgICB0eXBlOiBcIm1vbnN0cm9zaXR5XCIsXG4gICAgICAgIHN1YnR5cGU6IFwiXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcbiAgICAgICAgYWM6IDExLFxuICAgICAgICBocDogMTksXG4gICAgICAgIGhpdF9kaWNlOiBcIjNkMTAgKyAyXCIsXG4gICAgICAgIHNwZWVkOiBcIjQwIGZ0LCBmbHkgNjAgZnQuXCIsXG4gICAgICAgIHN0YXRzOiBbMTcsIDEzLCAxMywgMiwgMTIsIDhdLFxuICAgICAgICBza2lsbHNhdmVzOiBbeyBwZXJjZXB0aW9uOiA1IH1dLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcbiAgICAgICAgc2Vuc2VzOiBcInBhc3NpdmUgUGVyY2VwdGlvbiAxNVwiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiXCIsXG4gICAgICAgIGNyOiBcIjFcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJLZWVuIFNpZ2h0XCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgaGlwcG9ncmlmZiBoYXMgYWR2YW50YWdlIG9uIFdpc2RvbSAoUGVyY2VwdGlvbikgY2hlY2tzIHRoYXQgcmVseSBvbiBzaWdodC5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBoaXBwb2dyaWZmIG1ha2VzIHR3byBhdHRhY2tzOiBvbmUgd2l0aCBpdHMgYmVhayBhbmQgb25lIHdpdGggaXRzIGNsYXdzLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkJlYWtcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs1IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogOCAoMWQxMCArIDMpIHBpZXJjaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDUsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMWQxMFwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogM1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkNsYXdzXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNSB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDEwICgyZDYgKyAzKSBzbGFzaGluZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA1LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjJkNlwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogM1xuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiSG9iZ29ibGluXCIsXG4gICAgICAgIHNpemU6IFwiTWVkaXVtXCIsXG4gICAgICAgIHR5cGU6IFwiaHVtYW5vaWRcIixcbiAgICAgICAgc3VidHlwZTogXCJnb2JsaW5vaWRcIixcbiAgICAgICAgYWxpZ25tZW50OiBcImxhd2Z1bCBldmlsXCIsXG4gICAgICAgIGFjOiAxOCxcbiAgICAgICAgaHA6IDExLFxuICAgICAgICBoaXRfZGljZTogXCIyZDggKyAyXCIsXG4gICAgICAgIHNwZWVkOiBcIjMwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzEzLCAxMiwgMTIsIDEwLCAxMCwgOV0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBzZW5zZXM6IFwiZGFya3Zpc2lvbiA2MCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxMFwiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiQ29tbW9uLCBHb2JsaW5cIixcbiAgICAgICAgY3I6IFwiMS8yXCIsXG4gICAgICAgIHRyYWl0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTWFydGlhbCBBZHZhbnRhZ2VcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk9uY2UgcGVyIHR1cm4sIHRoZSBob2Jnb2JsaW4gY2FuIGRlYWwgYW4gZXh0cmEgNyAoMmQ2KSBkYW1hZ2UgdG8gYSBjcmVhdHVyZSBpdCBoaXRzIHdpdGggYSB3ZWFwb24gYXR0YWNrIGlmIHRoYXQgY3JlYXR1cmUgaXMgd2l0aGluIDUgZnQuIG9mIGFuIGFsbHkgb2YgdGhlIGhvYmdvYmxpbiB0aGF0IGlzbid0IGluY2FwYWNpdGF0ZWQuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjJkNlwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkxvbmdzd29yZFwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzMgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiA1ICgxZDggKyAxKSBzbGFzaGluZyBkYW1hZ2UsIG9yIDYgKDFkMTAgKyAxKSBzbGFzaGluZyBkYW1hZ2UgaWYgdXNlZCB3aXRoIHR3byBoYW5kcy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDMsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMWQ4XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiAxXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTG9uZ2Jvd1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiUmFuZ2VkIFdlYXBvbiBBdHRhY2s6ICszIHRvIGhpdCwgcmFuZ2UgMTUwLzYwMCBmdC4sIG9uZSB0YXJnZXQuIEhpdDogNSAoMWQ4ICsgMSkgcGllcmNpbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMyxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIxZDhcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDFcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIkhvbXVuY3VsdXNcIixcbiAgICAgICAgc2l6ZTogXCJUaW55XCIsXG4gICAgICAgIHR5cGU6IFwiY29uc3RydWN0XCIsXG4gICAgICAgIHN1YnR5cGU6IFwiXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJuZXV0cmFsXCIsXG4gICAgICAgIGFjOiAxMyxcbiAgICAgICAgaHA6IDUsXG4gICAgICAgIGhpdF9kaWNlOiBcIjJkNFwiLFxuICAgICAgICBzcGVlZDogXCIyMCBmdC4sIGZseSA0MCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFs0LCAxNSwgMTEsIDEwLCAxMCwgN10sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwicG9pc29uXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOiBcImNoYXJtZWQsIHBvaXNvbmVkXCIsXG4gICAgICAgIHNlbnNlczogXCJkYXJrdmlzaW9uIDYwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDEwXCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJ1bmRlcnN0YW5kcyB0aGUgbGFuZ3VhZ2VzIG9mIGl0cyBjcmVhdG9yIGJ1dCBjYW4ndCBzcGVha1wiLFxuICAgICAgICBjcjogXCIwXCIsXG4gICAgICAgIHRyYWl0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiVGVsZXBhdGhpYyBCb25kXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJXaGlsZSB0aGUgaG9tdW5jdWx1cyBpcyBvbiB0aGUgc2FtZSBwbGFuZSBvZiBleGlzdGVuY2UgYXMgaXRzIG1hc3RlciwgaXQgY2FuIG1hZ2ljYWxseSBjb252ZXkgd2hhdCBpdCBzZW5zZXMgdG8gaXRzIG1hc3RlciwgYW5kIHRoZSB0d28gY2FuIGNvbW11bmljYXRlIHRlbGVwYXRoaWNhbGx5LlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJCaXRlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNCB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgY3JlYXR1cmUuIEhpdDogMSBwaWVyY2luZyBkYW1hZ2UsIGFuZCB0aGUgdGFyZ2V0IG11c3Qgc3VjY2VlZCBvbiBhIERDIDEwIENvbnN0aXR1dGlvbiBzYXZpbmcgdGhyb3cgb3IgYmUgcG9pc29uZWQgZm9yIDEgbWludXRlLiBJZiB0aGUgc2F2aW5nIHRocm93IGZhaWxzIGJ5IDUgb3IgbW9yZSwgdGhlIHRhcmdldCBpcyBpbnN0ZWFkIHBvaXNvbmVkIGZvciA1ICgxZDEwKSBtaW51dGVzIGFuZCB1bmNvbnNjaW91cyB3aGlsZSBwb2lzb25lZCBpbiB0aGlzIHdheS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDQsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiAxXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJIb3JuZWQgRGV2aWxcIixcbiAgICAgICAgc2l6ZTogXCJMYXJnZVwiLFxuICAgICAgICB0eXBlOiBcImZpZW5kXCIsXG4gICAgICAgIHN1YnR5cGU6IFwiZGV2aWxcIixcbiAgICAgICAgYWxpZ25tZW50OiBcImxhd2Z1bCBldmlsXCIsXG4gICAgICAgIGFjOiAxOCxcbiAgICAgICAgaHA6IDE0OCxcbiAgICAgICAgaGl0X2RpY2U6IFwiMTdkMTAgKyA1NFwiLFxuICAgICAgICBzcGVlZDogXCIyMCBmdC4sIGZseSA2MCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsyMiwgMTcsIDIxLCAxMiwgMTYsIDE3XSxcbiAgICAgICAgc2F2ZXM6IFtcbiAgICAgICAgICAgIHsgc3RyZW5ndGg6IDEwIH0sXG4gICAgICAgICAgICB7IGRleHRlcml0eTogNyB9LFxuICAgICAgICAgICAgeyB3aXNkb206IDcgfSxcbiAgICAgICAgICAgIHsgY2hhcmlzbWE6IDcgfVxuICAgICAgICBdLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6XG4gICAgICAgICAgICBcImNvbGQ7IGJsdWRnZW9uaW5nLCBwaWVyY2luZywgYW5kIHNsYXNoaW5nIGZyb20gbm9ubWFnaWNhbCB3ZWFwb25zIHRoYXQgYXJlbid0IHNpbHZlcmVkXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcImZpcmUsIHBvaXNvblwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJwb2lzb25lZFwiLFxuICAgICAgICBzZW5zZXM6IFwiZGFya3Zpc2lvbiAxMjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTNcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcIkluZmVybmFsLCB0ZWxlcGF0aHkgMTIwIGZ0LlwiLFxuICAgICAgICBjcjogXCIxMVwiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkRldmlsJ3MgU2lnaHRcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1hZ2ljYWwgZGFya25lc3MgZG9lc24ndCBpbXBlZGUgdGhlIGRldmlsJ3MgZGFya3Zpc2lvbi5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJNYWdpYyBSZXNpc3RhbmNlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZGV2aWwgaGFzIGFkdmFudGFnZSBvbiBzYXZpbmcgdGhyb3dzIGFnYWluc3Qgc3BlbGxzIGFuZCBvdGhlciBtYWdpY2FsIGVmZmVjdHMuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZGV2aWwgbWFrZXMgdGhyZWUgbWVsZWUgYXR0YWNrczogdHdvIHdpdGggaXRzIGZvcmsgYW5kIG9uZSB3aXRoIGl0cyB0YWlsLiBJdCBjYW4gdXNlIEh1cmwgRmxhbWUgaW4gcGxhY2Ugb2YgYW55IG1lbGVlIGF0dGFjay5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJGb3JrXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMTAgdG8gaGl0LCByZWFjaCAxMCBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTUgKDJkOCArIDYpIHBpZXJjaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDEwLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjJkOFwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogNlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlRhaWxcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICsxMCB0byBoaXQsIHJlYWNoIDEwIGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxMCAoMWQ4ICsgNikgcGllcmNpbmcgZGFtYWdlLiBJZiB0aGUgdGFyZ2V0IGlzIGEgY3JlYXR1cmUgb3RoZXIgdGhhbiBhbiB1bmRlYWQgb3IgYSBjb25zdHJ1Y3QsIGl0IG11c3Qgc3VjY2VlZCBvbiBhIERDIDE3IENvbnN0aXR1dGlvbiBzYXZpbmcgdGhyb3cgb3IgbG9zZSAxMCAoM2Q2KSBoaXQgcG9pbnRzIGF0IHRoZSBzdGFydCBvZiBlYWNoIG9mIGl0cyB0dXJucyBkdWUgdG8gYW4gaW5mZXJuYWwgd291bmQuIEVhY2ggdGltZSB0aGUgZGV2aWwgaGl0cyB0aGUgd291bmRlZCB0YXJnZXQgd2l0aCB0aGlzIGF0dGFjaywgdGhlIGRhbWFnZSBkZWFsdCBieSB0aGUgd291bmQgaW5jcmVhc2VzIGJ5IDEwICgzZDYpLiBBbnkgY3JlYXR1cmUgY2FuIHRha2UgYW4gYWN0aW9uIHRvIHN0YW5jaCB0aGUgd291bmQgd2l0aCBhIHN1Y2Nlc3NmdWwgREMgMTIgV2lzZG9tIChNZWRpY2luZSkgY2hlY2suIFRoZSB3b3VuZCBhbHNvIGNsb3NlcyBpZiB0aGUgdGFyZ2V0IHJlY2VpdmVzIG1hZ2ljYWwgaGVhbGluZy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDEwLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjFkOFwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogNlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkh1cmwgRmxhbWVcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlJhbmdlZCBTcGVsbCBBdHRhY2s6ICs3IHRvIGhpdCwgcmFuZ2UgMTUwIGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxNCAoNGQ2KSBmaXJlIGRhbWFnZS4gSWYgdGhlIHRhcmdldCBpcyBhIGZsYW1tYWJsZSBvYmplY3QgdGhhdCBpc24ndCBiZWluZyB3b3JuIG9yIGNhcnJpZWQsIGl0IGFsc28gY2F0Y2hlcyBmaXJlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNyxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCI0ZDZcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiSHVudGVyIFNoYXJrXCIsXG4gICAgICAgIHNpemU6IFwiTGFyZ2VcIixcbiAgICAgICAgdHlwZTogXCJiZWFzdFwiLFxuICAgICAgICBzdWJ0eXBlOiBcIlwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwidW5hbGlnbmVkXCIsXG4gICAgICAgIGFjOiAxMixcbiAgICAgICAgaHA6IDQ1LFxuICAgICAgICBoaXRfZGljZTogXCI2ZDEwICsgMTJcIixcbiAgICAgICAgc3BlZWQ6IFwic3dpbSA0MCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsxOCwgMTMsIDE1LCAxLCAxMCwgNF0sXG4gICAgICAgIHNraWxsc2F2ZXM6IFt7IHBlcmNlcHRpb246IDIgfV0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBzZW5zZXM6IFwiZGFya3Zpc2lvbiAzMCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxMlwiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiXCIsXG4gICAgICAgIGNyOiBcIjJcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJCbG9vZCBGcmVuenlcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBzaGFyayBoYXMgYWR2YW50YWdlIG9uIG1lbGVlIGF0dGFjayByb2xscyBhZ2FpbnN0IGFueSBjcmVhdHVyZSB0aGF0IGRvZXNuJ3QgaGF2ZSBhbGwgaXRzIGhpdCBwb2ludHMuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiV2F0ZXIgQnJlYXRoaW5nXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgc2hhcmsgY2FuIGJyZWF0aGUgb25seSB1bmRlcndhdGVyLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJCaXRlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNiB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDEzICgyZDggKyA0KSBwaWVyY2luZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA2LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjJkOFwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogNFxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiSHlkcmFcIixcbiAgICAgICAgc2l6ZTogXCJIdWdlXCIsXG4gICAgICAgIHR5cGU6IFwibW9uc3Ryb3NpdHlcIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcInVuYWxpZ25lZFwiLFxuICAgICAgICBhYzogMTUsXG4gICAgICAgIGhwOiAxNzIsXG4gICAgICAgIGhpdF9kaWNlOiBcIjE1ZDEyICsgNzRcIixcbiAgICAgICAgc3BlZWQ6IFwiMzAgZnQuLCBzd2ltIDMwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzIwLCAxMiwgMjAsIDIsIDEwLCA3XSxcbiAgICAgICAgc2tpbGxzYXZlczogW3sgcGVyY2VwdGlvbjogNiB9XSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIHNlbnNlczogXCJkYXJrdmlzaW9uIDYwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDE2XCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJcIixcbiAgICAgICAgY3I6IFwiOFwiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkhvbGQgQnJlYXRoXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgaHlkcmEgY2FuIGhvbGQgaXRzIGJyZWF0aCBmb3IgMSBob3VyLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk11bHRpcGxlIEhlYWRzXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgaHlkcmEgaGFzIGZpdmUgaGVhZHMuIFdoaWxlIGl0IGhhcyBtb3JlIHRoYW4gb25lIGhlYWQsIHRoZSBoeWRyYSBoYXMgYWR2YW50YWdlIG9uIHNhdmluZyB0aHJvd3MgYWdhaW5zdCBiZWluZyBibGluZGVkLCBjaGFybWVkLCBkZWFmZW5lZCwgZnJpZ2h0ZW5lZCwgc3R1bm5lZCwgYW5kIGtub2NrZWQgdW5jb25zY2lvdXMuXFxcXG5XaGVuZXZlciB0aGUgaHlkcmEgdGFrZXMgMjUgb3IgbW9yZSBkYW1hZ2UgaW4gYSBzaW5nbGUgdHVybiwgb25lIG9mIGl0cyBoZWFkcyBkaWVzLiBJZiBhbGwgaXRzIGhlYWRzIGRpZSwgdGhlIGh5ZHJhIGRpZXMuXFxcXG5BdCB0aGUgZW5kIG9mIGl0cyB0dXJuLCBpdCBncm93cyB0d28gaGVhZHMgZm9yIGVhY2ggb2YgaXRzIGhlYWRzIHRoYXQgZGllZCBzaW5jZSBpdHMgbGFzdCB0dXJuLCB1bmxlc3MgaXQgaGFzIHRha2VuIGZpcmUgZGFtYWdlIHNpbmNlIGl0cyBsYXN0IHR1cm4uIFRoZSBoeWRyYSByZWdhaW5zIDEwIGhpdCBwb2ludHMgZm9yIGVhY2ggaGVhZCByZWdyb3duIGluIHRoaXMgd2F5LlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlJlYWN0aXZlIEhlYWRzXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJGb3IgZWFjaCBoZWFkIHRoZSBoeWRyYSBoYXMgYmV5b25kIG9uZSwgaXQgZ2V0cyBhbiBleHRyYSByZWFjdGlvbiB0aGF0IGNhbiBiZSB1c2VkIG9ubHkgZm9yIG9wcG9ydHVuaXR5IGF0dGFja3MuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiV2FrZWZ1bFwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiV2hpbGUgdGhlIGh5ZHJhIHNsZWVwcywgYXQgbGVhc3Qgb25lIG9mIGl0cyBoZWFkcyBpcyBhd2FrZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBoeWRyYSBtYWtlcyBhcyBtYW55IGJpdGUgYXR0YWNrcyBhcyBpdCBoYXMgaGVhZHMuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQml0ZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzggdG8gaGl0LCByZWFjaCAxMCBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTAgKDFkMTAgKyA1KSBwaWVyY2luZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA4LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjFkMTBcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDVcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIkh5ZW5hXCIsXG4gICAgICAgIHNpemU6IFwiTWVkaXVtXCIsXG4gICAgICAgIHR5cGU6IFwiYmVhc3RcIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcInVuYWxpZ25lZFwiLFxuICAgICAgICBhYzogMTEsXG4gICAgICAgIGhwOiA1LFxuICAgICAgICBoaXRfZGljZTogXCIxZDhcIixcbiAgICAgICAgc3BlZWQ6IFwiNTAgZnQuXCIsXG4gICAgICAgIHN0YXRzOiBbMTEsIDEzLCAxMiwgMiwgMTIsIDVdLFxuICAgICAgICBza2lsbHNhdmVzOiBbeyBwZXJjZXB0aW9uOiAzIH1dLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcbiAgICAgICAgc2Vuc2VzOiBcInBhc3NpdmUgUGVyY2VwdGlvbiAxM1wiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiXCIsXG4gICAgICAgIGNyOiBcIjBcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJQYWNrIFRhY3RpY3NcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBoeWVuYSBoYXMgYWR2YW50YWdlIG9uIGFuIGF0dGFjayByb2xsIGFnYWluc3QgYSBjcmVhdHVyZSBpZiBhdCBsZWFzdCBvbmUgb2YgdGhlIGh5ZW5hJ3MgYWxsaWVzIGlzIHdpdGhpbiA1IGZ0LiBvZiB0aGUgY3JlYXR1cmUgYW5kIHRoZSBhbGx5IGlzbid0IGluY2FwYWNpdGF0ZWQuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkJpdGVcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIldlYXBvbiBBdHRhY2s6ICsyIHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMyAoMWQ2KSBwaWVyY2luZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAyLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjFkNlwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJJY2UgRGV2aWxcIixcbiAgICAgICAgc2l6ZTogXCJMYXJnZVwiLFxuICAgICAgICB0eXBlOiBcImZpZW5kXCIsXG4gICAgICAgIHN1YnR5cGU6IFwiZGV2aWxcIixcbiAgICAgICAgYWxpZ25tZW50OiBcImxhd2Z1bCBldmlsXCIsXG4gICAgICAgIGFjOiAxOCxcbiAgICAgICAgaHA6IDE4MCxcbiAgICAgICAgaGl0X2RpY2U6IFwiMTlkMTAgKyA3NVwiLFxuICAgICAgICBzcGVlZDogXCI0MCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsyMSwgMTQsIDE4LCAxOCwgMTUsIDE4XSxcbiAgICAgICAgc2F2ZXM6IFtcbiAgICAgICAgICAgIHsgZGV4dGVyaXR5OiA3IH0sXG4gICAgICAgICAgICB7IGNvbnN0aXR1dGlvbjogOSB9LFxuICAgICAgICAgICAgeyB3aXNkb206IDcgfSxcbiAgICAgICAgICAgIHsgY2hhcmlzbWE6IDkgfVxuICAgICAgICBdLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6XG4gICAgICAgICAgICBcImJsdWRnZW9uaW5nLCBwaWVyY2luZywgYW5kIHNsYXNoaW5nIGZyb20gbm9ubWFnaWNhbCB3ZWFwb25zIHRoYXQgYXJlbid0IHNpbHZlcmVkXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcImZpcmUsIHBvaXNvblwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJwb2lzb25lZFwiLFxuICAgICAgICBzZW5zZXM6IFwiYmxpbmRzaWdodCA2MCBmdC4sIGRhcmt2aXNpb24gMTIwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDEyXCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJJbmZlcm5hbCwgdGVsZXBhdGh5IDEyMCBmdC5cIixcbiAgICAgICAgY3I6IFwiMTRcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJEZXZpbCdzIFNpZ2h0XCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNYWdpY2FsIGRhcmtuZXNzIGRvZXNuJ3QgaW1wZWRlIHRoZSBkZXZpbCdzIGRhcmt2aXNpb24uXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTWFnaWMgUmVzaXN0YW5jZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGRldmlsIGhhcyBhZHZhbnRhZ2Ugb24gc2F2aW5nIHRocm93cyBhZ2FpbnN0IHNwZWxscyBhbmQgb3RoZXIgbWFnaWNhbCBlZmZlY3RzLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJNdWx0aWF0dGFja1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGRldmlsIG1ha2VzIHRocmVlIGF0dGFja3M6IG9uZSB3aXRoIGl0cyBiaXRlLCBvbmUgd2l0aCBpdHMgY2xhd3MsIGFuZCBvbmUgd2l0aCBpdHMgdGFpbC5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJCaXRlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMTAgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxMiAoMmQ2ICsgNSkgcGllcmNpbmcgZGFtYWdlIHBsdXMgMTAgKDNkNikgY29sZCBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAxMCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIyZDYgKyAzZDZcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJDbGF3c1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzEwIHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTAgKDJkNCArIDUpIHNsYXNoaW5nIGRhbWFnZSBwbHVzIDEwICgzZDYpIGNvbGQgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMTAsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMmQ0ICsgM2Q2XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiA1XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiVGFpbFwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazorMTAgdG8gaGl0LCByZWFjaCAxMCBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTIgKDJkNiArIDUpIGJsdWRnZW9uaW5nIGRhbWFnZSBwbHVzIDEwICgzZDYpIGNvbGQgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMTAsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMmQ2ICsgM2Q2XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiA1XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiV2FsbCBvZiBJY2VcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBkZXZpbCBtYWdpY2FsbHkgZm9ybXMgYW4gb3BhcXVlIHdhbGwgb2YgaWNlIG9uIGEgc29saWQgc3VyZmFjZSBpdCBjYW4gc2VlIHdpdGhpbiA2MCBmZWV0IG9mIGl0LiBUaGUgd2FsbCBpcyAxIGZvb3QgdGhpY2sgYW5kIHVwIHRvIDMwIGZlZXQgbG9uZyBhbmQgMTAgZmVldCBoaWdoLCBvciBpdCdzIGEgaGVtaXNwaGVyaWNhbCBkb21lIHVwIHRvIDIwIGZlZXQgaW4gZGlhbWV0ZXIuXFxcXG5XaGVuIHRoZSB3YWxsIGFwcGVhcnMsIGVhY2ggY3JlYXR1cmUgaW4gaXRzIHNwYWNlIGlzIHB1c2hlZCBvdXQgb2YgaXQgYnkgdGhlIHNob3J0ZXN0IHJvdXRlLiBUaGUgY3JlYXR1cmUgY2hvb3NlcyB3aGljaCBzaWRlIG9mIHRoZSB3YWxsIHRvIGVuZCB1cCBvbiwgdW5sZXNzIHRoZSBjcmVhdHVyZSBpcyBpbmNhcGFjaXRhdGVkLiBUaGUgY3JlYXR1cmUgdGhlbiBtYWtlcyBhIERDIDE3IERleHRlcml0eSBzYXZpbmcgdGhyb3csIHRha2luZyAzNSAoMTBkNikgY29sZCBkYW1hZ2Ugb24gYSBmYWlsZWQgc2F2ZSwgb3IgaGFsZiBhcyBtdWNoIGRhbWFnZSBvbiBhIHN1Y2Nlc3NmdWwgb25lLlxcXFxuVGhlIHdhbGwgbGFzdHMgZm9yIDEgbWludXRlIG9yIHVudGlsIHRoZSBkZXZpbCBpcyBpbmNhcGFjaXRhdGVkIG9yIGRpZXMuIFRoZSB3YWxsIGNhbiBiZSBkYW1hZ2VkIGFuZCBicmVhY2hlZDsgZWFjaCAxMC1mb290IHNlY3Rpb24gaGFzIEFDIDUsIDMwIGhpdCBwb2ludHMsIHZ1bG5lcmFiaWxpdHkgdG8gZmlyZSBkYW1hZ2UsIGFuZCBpbW11bml0eSB0byBhY2lkLCBjb2xkLCBuZWNyb3RpYywgcG9pc29uLCBhbmQgcHN5Y2hpYyBkYW1hZ2UuIElmIGEgc2VjdGlvbiBpcyBkZXN0cm95ZWQsIGl0IGxlYXZlcyBiZWhpbmQgYSBzaGVldCBvZiBmcmlnaWQgYWlyIGluIHRoZSBzcGFjZSB0aGUgd2FsbCBvY2N1cGllZC4gV2hlbmV2ZXIgYSBjcmVhdHVyZSBmaW5pc2hlcyBtb3ZpbmcgdGhyb3VnaCB0aGUgZnJpZ2lkIGFpciBvbiBhIHR1cm4sIHdpbGxpbmdseSBvciBvdGhlcndpc2UsIHRoZSBjcmVhdHVyZSBtdXN0IG1ha2UgYSBEQyAxNyBDb25zdGl0dXRpb24gc2F2aW5nIHRocm93LCB0YWtpbmcgMTcgKDVkNikgY29sZCBkYW1hZ2Ugb24gYSBmYWlsZWQgc2F2ZSwgb3IgaGFsZiBhcyBtdWNoIGRhbWFnZSBvbiBhIHN1Y2Nlc3NmdWwgb25lLiBUaGUgZnJpZ2lkIGFpciBkaXNzaXBhdGVzIHdoZW4gdGhlIHJlc3Qgb2YgdGhlIHdhbGwgdmFuaXNoZXMuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJJY2UgTWVwaGl0XCIsXG4gICAgICAgIHNpemU6IFwiU21hbGxcIixcbiAgICAgICAgdHlwZTogXCJlbGVtZW50YWxcIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcIm5ldXRyYWwgZXZpbFwiLFxuICAgICAgICBhYzogMTEsXG4gICAgICAgIGhwOiAyMSxcbiAgICAgICAgaGl0X2RpY2U6IFwiNmQ2XCIsXG4gICAgICAgIHNwZWVkOiBcIjMwIGZ0LiwgZmx5IDMwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzcsIDEzLCAxMCwgOSwgMTEsIDEyXSxcbiAgICAgICAgc2tpbGxzYXZlczogW3sgcGVyY2VwdGlvbjogMiB9LCB7IHN0ZWFsdGg6IDMgfV0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiYmx1ZGdlb25pbmcsIGZpcmVcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczogXCJjb2xkLCBwb2lzb25cIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwicG9pc29uZWRcIixcbiAgICAgICAgc2Vuc2VzOiBcImRhcmt2aXNpb24gNjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTJcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcIkFxdWFuLCBBdXJhblwiLFxuICAgICAgICBjcjogXCIxLzJcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJEZWF0aCBCdXJzdFwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiV2hlbiB0aGUgbWVwaGl0IGRpZXMsIGl0IGV4cGxvZGVzIGluIGEgYnVyc3Qgb2YgamFnZ2VkIGljZS4gRWFjaCBjcmVhdHVyZSB3aXRoaW4gNSBmdC4gb2YgaXQgbXVzdCBtYWtlIGEgREMgMTAgRGV4dGVyaXR5IHNhdmluZyB0aHJvdywgdGFraW5nIDQgKDFkOCkgc2xhc2hpbmcgZGFtYWdlIG9uIGEgZmFpbGVkIHNhdmUsIG9yIGhhbGYgYXMgbXVjaCBkYW1hZ2Ugb24gYSBzdWNjZXNzZnVsIG9uZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDAsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMWQ4XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJGYWxzZSBBcHBlYXJhbmNlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJXaGlsZSB0aGUgbWVwaGl0IHJlbWFpbnMgbW90aW9ubGVzcywgaXQgaXMgaW5kaXN0aW5ndWlzaGFibGUgZnJvbSBhbiBvcmRpbmFyeSBzaGFyZCBvZiBpY2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiSW5uYXRlIFNwZWxsY2FzdGluZyAoMS9EYXkpXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgbWVwaGl0IGNhbiBpbm5hdGVseSBjYXN0IGZvZyBjbG91ZCwgcmVxdWlyaW5nIG5vIG1hdGVyaWFsIGNvbXBvbmVudHMuIEl0cyBpbm5hdGUgc3BlbGxjYXN0aW5nIGFiaWxpdHkgaXMgQ2hhcmlzbWEuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkNsYXdzXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMyB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgY3JlYXR1cmUuIEhpdDogMyAoMWQ0ICsgMSkgc2xhc2hpbmcgZGFtYWdlIHBsdXMgMiAoMWQ0KSBjb2xkIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDMsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMWQ0XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiAxXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiRnJvc3QgQnJlYXRoIChSZWNoYXJnZSA2KVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIG1lcGhpdCBleGhhbGVzIGEgMTUtZm9vdCBjb25lIG9mIGNvbGQgYWlyLiBFYWNoIGNyZWF0dXJlIGluIHRoYXQgYXJlYSBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxMCBEZXh0ZXJpdHkgc2F2aW5nIHRocm93LCB0YWtpbmcgNSAoMmQ0KSBjb2xkIGRhbWFnZSBvbiBhIGZhaWxlZCBzYXZlLCBvciBoYWxmIGFzIG11Y2ggZGFtYWdlIG9uIGEgc3VjY2Vzc2Z1bCBvbmUuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiVmFyaWFudDogU3VtbW9uIE1lcGhpdHMgKDEvRGF5KVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIG1lcGhpdCBoYXMgYSAyNSBwZXJjZW50IGNoYW5jZSBvZiBzdW1tb25pbmcgMWQ0IG1lcGhpdHMgb2YgaXRzIGtpbmQuIEEgc3VtbW9uZWQgbWVwaGl0IGFwcGVhcnMgaW4gYW4gdW5vY2N1cGllZCBzcGFjZSB3aXRoaW4gNjAgZmVldCBvZiBpdHMgc3VtbW9uZXIsIGFjdHMgYXMgYW4gYWxseSBvZiBpdHMgc3VtbW9uZXIsIGFuZCBjYW4ndCBzdW1tb24gb3RoZXIgbWVwaGl0cy4gSXQgcmVtYWlucyBmb3IgMSBtaW51dGUsIHVudGlsIGl0IG9yIGl0cyBzdW1tb25lciBkaWVzLCBvciB1bnRpbCBpdHMgc3VtbW9uZXIgZGlzbWlzc2VzIGl0IGFzIGFuIGFjdGlvbi5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIkltcFwiLFxuICAgICAgICBzaXplOiBcIlRpbnlcIixcbiAgICAgICAgdHlwZTogXCJmaWVuZFwiLFxuICAgICAgICBzdWJ0eXBlOiBcImRldmlsXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJsYXdmdWwgZXZpbFwiLFxuICAgICAgICBhYzogMTMsXG4gICAgICAgIGhwOiAxMCxcbiAgICAgICAgaGl0X2RpY2U6IFwiM2Q0ICsgMlwiLFxuICAgICAgICBzcGVlZDogXCIyMCBmdC4sIGZseSA0MCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFs2LCAxNywgMTMsIDExLCAxMiwgMTRdLFxuICAgICAgICBza2lsbHNhdmVzOiBbXG4gICAgICAgICAgICB7IGRlY2VwdGlvbjogNCB9LFxuICAgICAgICAgICAgeyBpbnNpZ2h0OiAzIH0sXG4gICAgICAgICAgICB7IHBlcnN1YXNpb246IDQgfSxcbiAgICAgICAgICAgIHsgc3RlYWx0aDogNSB9XG4gICAgICAgIF0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczpcbiAgICAgICAgICAgIFwiY29sZDsgYmx1ZGdlb25pbmcsIHBpZXJjaW5nLCBhbmQgc2xhc2hpbmcgZnJvbSBub25tYWdpY2FsL25vbnNpbHZlciB3ZWFwb25zXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcImZpcmUsIHBvaXNvblwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJwb2lzb25lZFwiLFxuICAgICAgICBzZW5zZXM6IFwiZGFya3Zpc2lvbiAxMjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTFcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcIkluZmVybmFsLCBDb21tb25cIixcbiAgICAgICAgY3I6IFwiMVwiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlNoYXBlY2hhbmdlclwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGltcCBjYW4gdXNlIGl0cyBhY3Rpb24gdG8gcG9seW1vcnBoIGludG8gYSBiZWFzdCBmb3JtIHRoYXQgcmVzZW1ibGVzIGEgcmF0IChzcGVlZCAyMCBmdC4pLCBhIHJhdmVuICgyMCBmdC4sIGZseSA2MCBmdC4pLCBvciBhIHNwaWRlciAoMjAgZnQuLCBjbGltYiAyMCBmdC4pLCBvciBiYWNrIGludG8gaXRzIHRydWUgZm9ybS4gSXRzIHN0YXRpc3RpY3MgYXJlIHRoZSBzYW1lIGluIGVhY2ggZm9ybSwgZXhjZXB0IGZvciB0aGUgc3BlZWQgY2hhbmdlcyBub3RlZC4gQW55IGVxdWlwbWVudCBpdCBpcyB3ZWFyaW5nIG9yIGNhcnJ5aW5nIGlzbid0IHRyYW5zZm9ybWVkLiBJdCByZXZlcnRzIHRvIGl0cyB0cnVlIGZvcm0gaWYgaXQgZGllcy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJEZXZpbCdzIFNpZ2h0XCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNYWdpY2FsIGRhcmtuZXNzIGRvZXNuJ3QgaW1wZWRlIHRoZSBpbXAncyBkYXJrdmlzaW9uLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk1hZ2ljIFJlc2lzdGFuY2VcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBpbXAgaGFzIGFkdmFudGFnZSBvbiBzYXZpbmcgdGhyb3dzIGFnYWluc3Qgc3BlbGxzIGFuZCBvdGhlciBtYWdpY2FsIGVmZmVjdHMuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiVmFyaWFudDogRmFtaWxpYXJcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBpbXAgY2FuIHNlcnZlIGFub3RoZXIgY3JlYXR1cmUgYXMgYSBmYW1pbGlhciwgZm9ybWluZyBhIHRlbGVwYXRoaWMgYm9uZCB3aXRoIGl0cyB3aWxsaW5nIG1hc3Rlci4gV2hpbGUgdGhlIHR3byBhcmUgYm9uZGVkLCB0aGUgbWFzdGVyIGNhbiBzZW5zZSB3aGF0IHRoZSBxdWFzaXQgc2Vuc2VzIGFzIGxvbmcgYXMgdGhleSBhcmUgd2l0aGluIDEgbWlsZSBvZiBlYWNoIG90aGVyLiBXaGlsZSB0aGUgaW1wIGlzIHdpdGhpbiAxMCBmZWV0IG9mIGl0cyBtYXN0ZXIsIHRoZSBtYXN0ZXIgc2hhcmVzIHRoZSBxdWFzaXQncyBNYWdpYyBSZXNpc3RhbmNlIHRyYWl0LiBBdCBhbnkgdGltZSBhbmQgZm9yIGFueSByZWFzb24sIHRoZSBpbXAgY2FuIGVuZCBpdHMgc2VydmljZSBhcyBhIGZhbWlsaWFyLCBlbmRpbmcgdGhlIHRlbGVwYXRoaWMgYm9uZC5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RpbmcgKEJpdGUgaW4gQmVhc3QgRm9ybSlcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs1IHRvIGhpdCwgcmVhY2ggNSBmdCAuLCBvbmUgdGFyZ2V0LiBIaXQ6IDUgKDFkNCArIDMpIHBpZXJjaW5nIGRhbWFnZSwgYW5kIHRoZSB0YXJnZXQgbXVzdCBtYWtlIG9uIGEgREMgMTEgQ29uc3RpdHV0aW9uIHNhdmluZyB0aHJvdywgdGFraW5nIDEwICgzZDYpIHBvaXNvbiBkYW1hZ2Ugb24gYSBmYWlsZWQgc2F2ZSwgb3IgaGFsZiBhcyBtdWNoIGRhbWFnZSBvbiBhIHN1Y2Nlc3NmdWwgb25lLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNSxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIxZDRcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDNcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJJbnZpc2liaWxpdHlcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBpbXAgbWFnaWNhbGx5IHR1cm5zIGludmlzaWJsZSB1bnRpbCBpdCBhdHRhY2tzLCBvciB1bnRpbCBpdHMgY29uY2VudHJhdGlvbiBlbmRzIChhcyBpZiBjb25jZW50cmF0aW5nIG9uIGEgc3BlbGwpLiBBbnkgZXF1aXBtZW50IHRoZSBpbXAgd2VhcnMgb3IgY2FycmllcyBpcyBpbnZpc2libGUgd2l0aCBpdC5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIkludmlzaWJsZSBTdGFsa2VyXCIsXG4gICAgICAgIHNpemU6IFwiTWVkaXVtXCIsXG4gICAgICAgIHR5cGU6IFwiZWxlbWVudGFsXCIsXG4gICAgICAgIHN1YnR5cGU6IFwiXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJuZXV0cmFsXCIsXG4gICAgICAgIGFjOiAxNCxcbiAgICAgICAgaHA6IDEwNCxcbiAgICAgICAgaGl0X2RpY2U6IFwiMTZkOCArIDMyXCIsXG4gICAgICAgIHNwZWVkOiBcIjUwIGZ0LiwgZmx5IDUwIGZ0LiAoaG92ZXIpXCIsXG4gICAgICAgIHN0YXRzOiBbMTYsIDE5LCAxNCwgMTAsIDE1LCAxMV0sXG4gICAgICAgIHNraWxsc2F2ZXM6IFt7IHBlcmNlcHRpb246IDggfSwgeyBzdGVhbHRoOiAxMCB9XSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOlxuICAgICAgICAgICAgXCJibHVkZ2VvbmluZywgcGllcmNpbmcsIGFuZCBzbGFzaGluZyBmcm9tIG5vbm1hZ2ljYWwgd2VhcG9uc1wiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczogXCJwb2lzb25cIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6XG4gICAgICAgICAgICBcImV4aGF1c3Rpb24sIGdyYXBwbGVkLCBwYXJhbHl6ZWQsIHBldHJpZmllZCwgcG9pc29uZWQsIHByb25lLCByZXN0cmFpbmVkLCB1bmNvbnNjaW91c1wiLFxuICAgICAgICBzZW5zZXM6IFwiZGFya3Zpc2lvbiA2MCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxOFwiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiQXVyYW4sIHVuZGVyc3RhbmRzIENvbW1vbiBidXQgZG9lc24ndCBzcGVhayBpdFwiLFxuICAgICAgICBjcjogXCI2XCIsXG4gICAgICAgIHRyYWl0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiSW52aXNpYmlsaXR5XCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgc3RhbGtlciBpcyBpbnZpc2libGUuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiRmF1bHRsZXNzIFRyYWNrZXJcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBzdGFsa2VyIGlzIGdpdmVuIGEgcXVhcnJ5IGJ5IGl0cyBzdW1tb25lci4gVGhlIHN0YWxrZXIga25vd3MgdGhlIGRpcmVjdGlvbiBhbmQgZGlzdGFuY2UgdG8gaXRzIHF1YXJyeSBhcyBsb25nIGFzIHRoZSB0d28gb2YgdGhlbSBhcmUgb24gdGhlIHNhbWUgcGxhbmUgb2YgZXhpc3RlbmNlLiBUaGUgc3RhbGtlciBhbHNvIGtub3dzIHRoZSBsb2NhdGlvbiBvZiBpdHMgc3VtbW9uZXIuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgc3RhbGtlciBtYWtlcyB0d28gc2xhbSBhdHRhY2tzLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlNsYW1cIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs2IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTAgKDJkNiArIDMpIGJsdWRnZW9uaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDYsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMmQ2XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiAzXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJJcm9uIEdvbGVtXCIsXG4gICAgICAgIHNpemU6IFwiTGFyZ2VcIixcbiAgICAgICAgdHlwZTogXCJjb25zdHJ1Y3RcIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcInVuYWxpZ25lZFwiLFxuICAgICAgICBhYzogMjAsXG4gICAgICAgIGhwOiAyMTAsXG4gICAgICAgIGhpdF9kaWNlOiBcIjIwZDEwICsgMTAwXCIsXG4gICAgICAgIHNwZWVkOiBcIjMwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzI0LCA5LCAyMCwgMywgMTEsIDFdLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOlxuICAgICAgICAgICAgXCJmaXJlLCBwb2lzb24sIHBzeWNoaWM7IGJsdWRnZW9uaW5nLCBwaWVyY2luZywgYW5kIHNsYXNoaW5nIGZyb20gbm9ubWFnaWNhbCB3ZWFwb25zIHRoYXQgYXJlbid0IGFkYW1hbnRpbmVcIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6XG4gICAgICAgICAgICBcImNoYXJtZWQsIGV4aGF1c3Rpb24sIGZyaWdodGVuZWQsIHBhcmFseXplZCwgcGV0cmlmaWVkLCBwb2lzb25lZFwiLFxuICAgICAgICBzZW5zZXM6IFwiZGFya3Zpc2lvbiAxMjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTBcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcInVuZGVyc3RhbmRzIHRoZSBsYW5ndWFnZXMgb2YgaXRzIGNyZWF0b3IgYnV0IGNhbid0IHNwZWFrXCIsXG4gICAgICAgIGNyOiBcIjE2XCIsXG4gICAgICAgIHRyYWl0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiRmlyZSBBYnNvcnB0aW9uXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJXaGVuZXZlciB0aGUgZ29sZW0gaXMgc3ViamVjdGVkIHRvIGZpcmUgZGFtYWdlLCBpdCB0YWtlcyBubyBkYW1hZ2UgYW5kIGluc3RlYWQgcmVnYWlucyBhIG51bWJlciBvZiBoaXQgcG9pbnRzIGVxdWFsIHRvIHRoZSBmaXJlIGRhbWFnZSBkZWFsdC5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJJbW11dGFibGUgRm9ybVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGdvbGVtIGlzIGltbXVuZSB0byBhbnkgc3BlbGwgb3IgZWZmZWN0IHRoYXQgd291bGQgYWx0ZXIgaXRzIGZvcm0uXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTWFnaWMgUmVzaXN0YW5jZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGdvbGVtIGhhcyBhZHZhbnRhZ2Ugb24gc2F2aW5nIHRocm93cyBhZ2FpbnN0IHNwZWxscyBhbmQgb3RoZXIgbWFnaWNhbCBlZmZlY3RzLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk1hZ2ljIFdlYXBvbnNcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBnb2xlbSdzIHdlYXBvbiBhdHRhY2tzIGFyZSBtYWdpY2FsLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJNdWx0aWF0dGFja1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGdvbGVtIG1ha2VzIHR3byBtZWxlZSBhdHRhY2tzLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlNsYW1cIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICsxMyB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDIwICgzZDggKyA3KSBibHVkZ2VvbmluZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAxMyxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIzZDhcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJTd29yZFwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzEzIHRvIGhpdCwgcmVhY2ggMTAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDIzICgzZDEwICsgNykgc2xhc2hpbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMTMsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiM2QxMFwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogN1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlBvaXNvbiBCcmVhdGggKFJlY2hhcmdlIDUtNilcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBnb2xlbSBleGhhbGVzIHBvaXNvbm91cyBnYXMgaW4gYSAxNS1mb290IGNvbmUuIEVhY2ggY3JlYXR1cmUgaW4gdGhhdCBhcmVhIG11c3QgbWFrZSBhIERDIDE5IENvbnN0aXR1dGlvbiBzYXZpbmcgdGhyb3csIHRha2luZyA0NSAobDBkOCkgcG9pc29uIGRhbWFnZSBvbiBhIGZhaWxlZCBzYXZlLCBvciBoYWxmIGFzIG11Y2ggZGFtYWdlIG9uIGEgc3VjY2Vzc2Z1bCBvbmUuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjEwZDhcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiSmFja2FsXCIsXG4gICAgICAgIHNpemU6IFwiU21hbGxcIixcbiAgICAgICAgdHlwZTogXCJiZWFzdFwiLFxuICAgICAgICBzdWJ0eXBlOiBcIlwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwidW5hbGlnbmVkXCIsXG4gICAgICAgIGFjOiAxMixcbiAgICAgICAgaHA6IDMsXG4gICAgICAgIGhpdF9kaWNlOiBcIjFkNiArIC0xXCIsXG4gICAgICAgIHNwZWVkOiBcIjQwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzgsIDE1LCAxMSwgMywgMTIsIDZdLFxuICAgICAgICBza2lsbHNhdmVzOiBbeyBwZXJjZXB0aW9uOiAzIH1dLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcbiAgICAgICAgc2Vuc2VzOiBcInBhc3NpdmUgUGVyY2VwdGlvbiAxM1wiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiXCIsXG4gICAgICAgIGNyOiBcIjBcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJLZWVuIEhlYXJpbmcgYW5kIFNtZWxsXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgamFja2FsIGhhcyBhZHZhbnRhZ2Ugb24gV2lzZG9tIChQZXJjZXB0aW9uKSBjaGVja3MgdGhhdCByZWx5IG9uIGhlYXJpbmcgb3Igc21lbGwuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiUGFjayBUYWN0aWNzXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgamFja2FsIGhhcyBhZHZhbnRhZ2Ugb24gYW4gYXR0YWNrIHJvbGwgYWdhaW5zdCBhIGNyZWF0dXJlIGlmIGF0IGxlYXN0IG9uZSBvZiB0aGUgamFja2FsJ3MgYWxsaWVzIGlzIHdpdGhpbiA1IGZ0LiBvZiB0aGUgY3JlYXR1cmUgYW5kIHRoZSBhbGx5IGlzbid0IGluY2FwYWNpdGF0ZWQuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkJpdGVcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICsxIHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMSAoMWQ0IFx1MjAxNCAxKSBwaWVyY2luZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAxLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjFkNFwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogLTFcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIktpbGxlciBXaGFsZVwiLFxuICAgICAgICBzaXplOiBcIkh1Z2VcIixcbiAgICAgICAgdHlwZTogXCJiZWFzdFwiLFxuICAgICAgICBzdWJ0eXBlOiBcIlwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwidW5hbGlnbmVkXCIsXG4gICAgICAgIGFjOiAxMixcbiAgICAgICAgaHA6IDkwLFxuICAgICAgICBoaXRfZGljZTogXCIxMmQxMiArIDEyXCIsXG4gICAgICAgIHNwZWVkOiBcInN3aW0gNjAgZnQuXCIsXG4gICAgICAgIHN0YXRzOiBbMTksIDEwLCAxMywgMywgMTIsIDddLFxuICAgICAgICBza2lsbHNhdmVzOiBbeyBwZXJjZXB0aW9uOiAzIH1dLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcbiAgICAgICAgc2Vuc2VzOiBcImJsaW5kc2lnaHQgMTIwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDEzXCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJcIixcbiAgICAgICAgY3I6IFwiM1wiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkVjaG9sb2NhdGlvblwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIHdoYWxlIGNhbid0IHVzZSBpdHMgYmxpbmRzaWdodCB3aGlsZSBkZWFmZW5lZC5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJIb2xkIEJyZWF0aFwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIHdoYWxlIGNhbiBob2xkIGl0cyBicmVhdGggZm9yIDMwIG1pbnV0ZXNcIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJLZWVuIEhlYXJpbmdcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSB3aGFsZSBoYXMgYWR2YW50YWdlIG9uIFdpc2RvbSAoUGVyY2VwdGlvbikgY2hlY2tzIHRoYXQgcmVseSBvbiBoZWFyaW5nLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJCaXRlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNiB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDIxICg1ZDYgKyA0KSBwaWVyY2luZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJLbmlnaHRcIixcbiAgICAgICAgc2l6ZTogXCJNZWRpdW1cIixcbiAgICAgICAgdHlwZTogXCJodW1hbm9pZFwiLFxuICAgICAgICBzdWJ0eXBlOiBcImFueSByYWNlXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJhbnkgYWxpZ25tZW50XCIsXG4gICAgICAgIGFjOiAxOCxcbiAgICAgICAgaHA6IDUyLFxuICAgICAgICBoaXRfZGljZTogXCI4ZDggKyAxNlwiLFxuICAgICAgICBzcGVlZDogXCIzMCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsxNiwgMTEsIDE0LCAxMSwgMTEsIDE1XSxcbiAgICAgICAgc2F2ZXM6IFt7IGNvbnN0aXR1dGlvbjogNCB9LCB7IHdpc2RvbTogMiB9XSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIHNlbnNlczogXCJwYXNzaXZlIFBlcmNlcHRpb24gMTBcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcImFueSBvbmUgbGFuZ3VhZ2UgKHVzdWFsbHkgQ29tbW9uKVwiLFxuICAgICAgICBjcjogXCIzXCIsXG4gICAgICAgIHRyYWl0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQnJhdmVcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBrbmlnaHQgaGFzIGFkdmFudGFnZSBvbiBzYXZpbmcgdGhyb3dzIGFnYWluc3QgYmVpbmcgZnJpZ2h0ZW5lZC5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBrbmlnaHQgbWFrZXMgdHdvIG1lbGVlIGF0dGFja3MuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiR3JlYXRzd29yZFwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzUgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxMCAoMmQ2ICsgMykgc2xhc2hpbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNSxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIyZDZcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDNcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJIZWF2eSBDcm9zc2Jvd1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiUmFuZ2VkIFdlYXBvbiBBdHRhY2s6ICsyIHRvIGhpdCwgcmFuZ2UgMTAwLzQwMCBmdC4sIG9uZSB0YXJnZXQuIEhpdDogNSAoMWQxMCkgcGllcmNpbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIxZDEwXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJMZWFkZXJzaGlwIChSZWNoYXJnZXMgYWZ0ZXIgYSBTaG9ydCBvciBMb25nIFJlc3QpXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJGb3IgMSBtaW51dGUsIHRoZSBrbmlnaHQgY2FuIHV0dGVyIGEgc3BlY2lhbCBjb21tYW5kIG9yIHdhcm5pbmcgd2hlbmV2ZXIgYSBub25ob3N0aWxlIGNyZWF0dXJlIHRoYXQgaXQgY2FuIHNlZSB3aXRoaW4gMzAgZnQuIG9mIGl0IG1ha2VzIGFuIGF0dGFjayByb2xsIG9yIGEgc2F2aW5nIHRocm93LiBUaGUgY3JlYXR1cmUgY2FuIGFkZCBhIGQ0IHRvIGl0cyByb2xsIHByb3ZpZGVkIGl0IGNhbiBoZWFyIGFuZCB1bmRlcnN0YW5kIHRoZSBrbmlnaHQuIEEgY3JlYXR1cmUgY2FuIGJlbmVmaXQgZnJvbSBvbmx5IG9uZSBMZWFkZXJzaGlwIGRpZSBhdCBhIHRpbWUuIFRoaXMgZWZmZWN0IGVuZHMgaWYgdGhlIGtuaWdodCBpcyBpbmNhcGFjaXRhdGVkLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICByZWFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlBhcnJ5XCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUga25pZ2h0IGFkZHMgMiB0byBpdHMgQUMgYWdhaW5zdCBvbmUgbWVsZWUgYXR0YWNrIHRoYXQgd291bGQgaGl0IGl0LiBUbyBkbyBzbywgdGhlIGtuaWdodCBtdXN0IHNlZSB0aGUgYXR0YWNrZXIgYW5kIGJlIHdpZWxkaW5nIGEgbWVsZWUgd2VhcG9uLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiS29ib2xkXCIsXG4gICAgICAgIHNpemU6IFwiU21hbGxcIixcbiAgICAgICAgdHlwZTogXCJodW1hbm9pZFwiLFxuICAgICAgICBzdWJ0eXBlOiBcImtvYm9sZFwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwibGF3ZnVsIGV2aWxcIixcbiAgICAgICAgYWM6IDEyLFxuICAgICAgICBocDogNSxcbiAgICAgICAgaGl0X2RpY2U6IFwiMmQ2ICsgLTJcIixcbiAgICAgICAgc3BlZWQ6IFwiMzAgZnQuXCIsXG4gICAgICAgIHN0YXRzOiBbNywgMTUsIDksIDgsIDcsIDhdLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcbiAgICAgICAgc2Vuc2VzOiBcImRhcmt2aXNpb24gNjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gOFwiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiQ29tbW9uLCBEcmFjb25pY1wiLFxuICAgICAgICBjcjogXCIxLzhcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJTdW5saWdodCBTZW5zaXRpdml0eVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiV2hpbGUgaW4gc3VubGlnaHQsIHRoZSBrb2JvbGQgaGFzIGRpc2FkdmFudGFnZSBvbiBhdHRhY2sgcm9sbHMsIGFzIHdlbGwgYXMgb24gV2lzZG9tIChQZXJjZXB0aW9uKSBjaGVja3MgdGhhdCByZWx5IG9uIHNpZ2h0LlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlBhY2sgVGFjdGljc1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGtvYm9sZCBoYXMgYWR2YW50YWdlIG9uIGFuIGF0dGFjayByb2xsIGFnYWluc3QgYSBjcmVhdHVyZSBpZiBhdCBsZWFzdCBvbmUgb2YgdGhlIGtvYm9sZCdzIGFsbGllcyBpcyB3aXRoaW4gNSBmdC4gb2YgdGhlIGNyZWF0dXJlIGFuZCB0aGUgYWxseSBpc24ndCBpbmNhcGFjaXRhdGVkLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJEYWdnZXJcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs0IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogNCAoMWQ0ICsgMikgcGllcmNpbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIxZDRcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJTbGluZ1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiUmFuZ2VkIFdlYXBvbiBBdHRhY2s6ICs0IHRvIGhpdCwgcmFuZ2UgMzAvMTIwIGZ0Liwgb25lIHRhcmdldC4gSGl0OiA0ICgxZDQgKyAyKSBibHVkZ2VvbmluZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA0LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjFkNFwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogMlxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiS3Jha2VuXCIsXG4gICAgICAgIHNpemU6IFwiR2FyZ2FudHVhblwiLFxuICAgICAgICB0eXBlOiBcIm1vbnN0cm9zaXR5XCIsXG4gICAgICAgIHN1YnR5cGU6IFwidGl0YW5cIixcbiAgICAgICAgYWxpZ25tZW50OiBcImNoYW90aWMgZXZpbFwiLFxuICAgICAgICBhYzogMTgsXG4gICAgICAgIGhwOiA0NzIsXG4gICAgICAgIGhpdF9kaWNlOiBcIjI3ZDIwICsgMTg4XCIsXG4gICAgICAgIHNwZWVkOiBcIjIwIGZ0Liwgc3dpbSA2MCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFszMCwgMTEsIDI1LCAyMiwgMTgsIDIwXSxcbiAgICAgICAgc2F2ZXM6IFtcbiAgICAgICAgICAgIHsgc3RyZW5ndGg6IDE3IH0sXG4gICAgICAgICAgICB7IGRleHRlcml0eTogNyB9LFxuICAgICAgICAgICAgeyBjb25zdGl0dXRpb246IDE0IH0sXG4gICAgICAgICAgICB7IGludGVsbGlnZW5jZTogMTMgfSxcbiAgICAgICAgICAgIHsgd2lzZG9tOiAxMSB9XG4gICAgICAgIF0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6XG4gICAgICAgICAgICBcImxpZ2h0bmluZzsgYmx1ZGdlb25pbmcsIHBpZXJjaW5nLCBhbmQgc2xhc2hpbmcgZnJvbSBub25tYWdpY2FsIHdlYXBvbnNcIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiZnJpZ2h0ZW5lZCwgcGFyYWx5emVkXCIsXG4gICAgICAgIHNlbnNlczogXCJ0cnVlc2lnaHQgMTIwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDE0XCIsXG4gICAgICAgIGxhbmd1YWdlczpcbiAgICAgICAgICAgIFwidW5kZXJzdGFuZHMgQWJ5c3NhbCwgQ2VsZXN0aWFsLCBJbmZlcm5hbCwgYW5kIFByaW1vcmRpYWwgYnV0IGNhbid0IHNwZWFrLCB0ZWxlcGF0aHkgMTIwIGZ0LlwiLFxuICAgICAgICBjcjogXCIyM1wiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkFtcGhpYmlvdXNcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBrcmFrZW4gY2FuIGJyZWF0aGUgYWlyIGFuZCB3YXRlci5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJGcmVlZG9tIG9mIE1vdmVtZW50XCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUga3Jha2VuIGlnbm9yZXMgZGlmZmljdWx0IHRlcnJhaW4sIGFuZCBtYWdpY2FsIGVmZmVjdHMgY2FuJ3QgcmVkdWNlIGl0cyBzcGVlZCBvciBjYXVzZSBpdCB0byBiZSByZXN0cmFpbmVkLiBJdCBjYW4gc3BlbmQgNSBmZWV0IG9mIG1vdmVtZW50IHRvIGVzY2FwZSBmcm9tIG5vbm1hZ2ljYWwgcmVzdHJhaW50cyBvciBiZWluZyBncmFwcGxlZC5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJTaWVnZSBNb25zdGVyXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUga3Jha2VuIGRlYWxzIGRvdWJsZSBkYW1hZ2UgdG8gb2JqZWN0cyBhbmQgc3RydWN0dXJlcy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBrcmFrZW4gbWFrZXMgdGhyZWUgdGVudGFjbGUgYXR0YWNrcywgZWFjaCBvZiB3aGljaCBpdCBjYW4gcmVwbGFjZSB3aXRoIG9uZSB1c2Ugb2YgRmxpbmcuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQml0ZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzcgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAyMyAoM2Q4ICsgMTApIHBpZXJjaW5nIGRhbWFnZS4gSWYgdGhlIHRhcmdldCBpcyBhIExhcmdlIG9yIHNtYWxsZXIgY3JlYXR1cmUgZ3JhcHBsZWQgYnkgdGhlIGtyYWtlbiwgdGhhdCBjcmVhdHVyZSBpcyBzd2FsbG93ZWQsIGFuZCB0aGUgZ3JhcHBsZSBlbmRzLiBXaGlsZSBzd2FsbG93ZWQsIHRoZSBjcmVhdHVyZSBpcyBibGluZGVkIGFuZCByZXN0cmFpbmVkLCBpdCBoYXMgdG90YWwgY292ZXIgYWdhaW5zdCBhdHRhY2tzIGFuZCBvdGhlciBlZmZlY3RzIG91dHNpZGUgdGhlIGtyYWtlbiwgYW5kIGl0IHRha2VzIDQyICgxMmQ2KSBhY2lkIGRhbWFnZSBhdCB0aGUgc3RhcnQgb2YgZWFjaCBvZiB0aGUga3Jha2VuJ3MgdHVybnMuIElmIHRoZSBrcmFrZW4gdGFrZXMgNTAgZGFtYWdlIG9yIG1vcmUgb24gYSBzaW5nbGUgdHVybiBmcm9tIGEgY3JlYXR1cmUgaW5zaWRlIGl0LCB0aGUga3Jha2VuIG11c3Qgc3VjY2VlZCBvbiBhIERDIDI1IENvbnN0aXR1dGlvbiBzYXZpbmcgdGhyb3cgYXQgdGhlIGVuZCBvZiB0aGF0IHR1cm4gb3IgcmVndXJnaXRhdGUgYWxsIHN3YWxsb3dlZCBjcmVhdHVyZXMsIHdoaWNoIGZhbGwgcHJvbmUgaW4gYSBzcGFjZSB3aXRoaW4gMTAgZmVldCBvZiB0aGUga3Jha2VuLiBJZiB0aGUga3Jha2VuIGRpZXMsIGEgc3dhbGxvd2VkIGNyZWF0dXJlIGlzIG5vIGxvbmdlciByZXN0cmFpbmVkIGJ5IGl0IGFuZCBjYW4gZXNjYXBlIGZyb20gdGhlIGNvcnBzZSB1c2luZyAxNSBmZWV0IG9mIG1vdmVtZW50LCBleGl0aW5nIHByb25lLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNyxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIzZDhcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDEwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiVGVudGFjbGVcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs3IHRvIGhpdCwgcmVhY2ggMzAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDIwICgzZDYgKyAxMCkgYmx1ZGdlb25pbmcgZGFtYWdlLCBhbmQgdGhlIHRhcmdldCBpcyBncmFwcGxlZCAoZXNjYXBlIERDIDE4KS4gVW50aWwgdGhpcyBncmFwcGxlIGVuZHMsIHRoZSB0YXJnZXQgaXMgcmVzdHJhaW5lZC4gVGhlIGtyYWtlbiBoYXMgdGVuIHRlbnRhY2xlcywgZWFjaCBvZiB3aGljaCBjYW4gZ3JhcHBsZSBvbmUgdGFyZ2V0LlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNyxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIzZDZcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDEwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiRmxpbmdcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk9uZSBMYXJnZSBvciBzbWFsbGVyIG9iamVjdCBoZWxkIG9yIGNyZWF0dXJlIGdyYXBwbGVkIGJ5IHRoZSBrcmFrZW4gaXMgdGhyb3duIHVwIHRvIDYwIGZlZXQgaW4gYSByYW5kb20gZGlyZWN0aW9uIGFuZCBrbm9ja2VkIHByb25lLiBJZiBhIHRocm93biB0YXJnZXQgc3RyaWtlcyBhIHNvbGlkIHN1cmZhY2UsIHRoZSB0YXJnZXQgdGFrZXMgMyAoMWQ2KSBibHVkZ2VvbmluZyBkYW1hZ2UgZm9yIGV2ZXJ5IDEwIGZlZXQgaXQgd2FzIHRocm93bi4gSWYgdGhlIHRhcmdldCBpcyB0aHJvd24gYXQgYW5vdGhlciBjcmVhdHVyZSwgdGhhdCBjcmVhdHVyZSBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxOCBEZXh0ZXJpdHkgc2F2aW5nIHRocm93IG9yIHRha2UgdGhlIHNhbWUgZGFtYWdlIGFuZCBiZSBrbm9ja2VkIHByb25lLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkxpZ2h0bmluZyBTdG9ybVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGtyYWtlbiBtYWdpY2FsbHkgY3JlYXRlcyB0aHJlZSBib2x0cyBvZiBsaWdodG5pbmcsIGVhY2ggb2Ygd2hpY2ggY2FuIHN0cmlrZSBhIHRhcmdldCB0aGUga3Jha2VuIGNhbiBzZWUgd2l0aGluIDEyMCBmZWV0IG9mIGl0LiBBIHRhcmdldCBtdXN0IG1ha2UgYSBEQyAyMyBEZXh0ZXJpdHkgc2F2aW5nIHRocm93LCB0YWtpbmcgMjIgKDRkMTApIGxpZ2h0bmluZyBkYW1hZ2Ugb24gYSBmYWlsZWQgc2F2ZSwgb3IgaGFsZiBhcyBtdWNoIGRhbWFnZSBvbiBhIHN1Y2Nlc3NmdWwgb25lLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCI0ZDEwXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgbGVnZW5kYXJ5X2FjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlRlbnRhY2xlIEF0dGFjayBvciBGbGluZ1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGtyYWtlbiBtYWtlcyBvbmUgdGVudGFjbGUgYXR0YWNrIG9yIHVzZXMgaXRzIEZsaW5nLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkxpZ2h0bmluZyBTdG9ybSAoQ29zdHMgMiBBY3Rpb25zKVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGtyYWtlbiB1c2VzIExpZ2h0bmluZyBTdG9ybS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJJbmsgQ2xvdWQgKENvc3RzIDMgQWN0aW9ucylcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIldoaWxlIHVuZGVyd2F0ZXIsIHRoZSBrcmFrZW4gZXhwZWxzIGFuIGluayBjbG91ZCBpbiBhIDYwLWZvb3QgcmFkaXVzLiBUaGUgY2xvdWQgc3ByZWFkcyBhcm91bmQgY29ybmVycywgYW5kIHRoYXQgYXJlYSBpcyBoZWF2aWx5IG9ic2N1cmVkIHRvIGNyZWF0dXJlcyBvdGhlciB0aGFuIHRoZSBrcmFrZW4uIEVhY2ggY3JlYXR1cmUgb3RoZXIgdGhhbiB0aGUga3Jha2VuIHRoYXQgZW5kcyBpdHMgdHVybiB0aGVyZSBtdXN0IHN1Y2NlZWQgb24gYSBEQyAyMyBDb25zdGl0dXRpb24gc2F2aW5nIHRocm93LCB0YWtpbmcgMTYgKDNkMTApIHBvaXNvbiBkYW1hZ2Ugb24gYSBmYWlsZWQgc2F2ZSwgb3IgaGFsZiBhcyBtdWNoIGRhbWFnZSBvbiBhIHN1Y2Nlc3NmdWwgb25lLiBBIHN0cm9uZyBjdXJyZW50IGRpc3BlcnNlcyB0aGUgY2xvdWQsIHdoaWNoIG90aGVyd2lzZSBkaXNhcHBlYXJzIGF0IHRoZSBlbmQgb2YgdGhlIGtyYWtlbidzIG5leHQgdHVybi5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIkxhbWlhXCIsXG4gICAgICAgIHNpemU6IFwiTGFyZ2VcIixcbiAgICAgICAgdHlwZTogXCJtb25zdHJvc2l0eVwiLFxuICAgICAgICBzdWJ0eXBlOiBcIlwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwiY2hhb3RpYyBldmlsXCIsXG4gICAgICAgIGFjOiAxMyxcbiAgICAgICAgaHA6IDk3LFxuICAgICAgICBoaXRfZGljZTogXCIxM2QxMCArIDI1XCIsXG4gICAgICAgIHNwZWVkOiBcIjMwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzE2LCAxMywgMTUsIDE0LCAxNSwgMTZdLFxuICAgICAgICBza2lsbHNhdmVzOiBbeyBkZWNlcHRpb246IDcgfSwgeyBpbnNpZ2h0OiA0IH0sIHsgc3RlYWx0aDogMyB9XSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIHNlbnNlczogXCJkYXJrdmlzaW9uIDYwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDEyXCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJBYnlzc2FsLCBDb21tb25cIixcbiAgICAgICAgY3I6IFwiNFwiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIklubmF0ZSBTcGVsbGNhc3RpbmdcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBsYW1pYSdzIGlubmF0ZSBzcGVsbGNhc3RpbmcgYWJpbGl0eSBpcyBDaGFyaXNtYSAoc3BlbGwgc2F2ZSBEQyAxMykuIEl0IGNhbiBpbm5hdGVseSBjYXN0IHRoZSBmb2xsb3dpbmcgc3BlbGxzLCByZXF1aXJpbmcgbm8gbWF0ZXJpYWwgY29tcG9uZW50cy4gQXQgd2lsbDogZGlzZ3Vpc2Ugc2VsZiAoYW55IGh1bWFub2lkIGZvcm0pLCBtYWpvciBpbWFnZSAzL2RheSBlYWNoOiBjaGFybSBwZXJzb24sIG1pcnJvciBpbWFnZSwgc2NyeWluZywgc3VnZ2VzdGlvbiAxL2RheTogZ2Vhc1wiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJNdWx0aWF0dGFja1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGxhbWlhIG1ha2VzIHR3byBhdHRhY2tzOiBvbmUgd2l0aCBpdHMgY2xhd3MgYW5kIG9uZSB3aXRoIGl0cyBkYWdnZXIgb3IgSW50b3hpY2F0aW5nIFRvdWNoLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkNsYXdzXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNSB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDE0ICgyZDEwICsgMykgc2xhc2hpbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNSxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIyZDEwXCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiAzXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiRGFnZ2VyXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNSB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDUgKDFkNCArIDMpIHBpZXJjaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDUsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMWQ0XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiAzXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiSW50b3hpY2F0aW5nIFRvdWNoXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBTcGVsbCBBdHRhY2s6ICs1IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSBjcmVhdHVyZS4gSGl0OiBUaGUgdGFyZ2V0IGlzIG1hZ2ljYWxseSBjdXJzZWQgZm9yIDEgaG91ci4gVW50aWwgdGhlIGN1cnNlIGVuZHMsIHRoZSB0YXJnZXQgaGFzIGRpc2FkdmFudGFnZSBvbiBXaXNkb20gc2F2aW5nIHRocm93cyBhbmQgYWxsIGFiaWxpdHkgY2hlY2tzLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiTGVtdXJlXCIsXG4gICAgICAgIHNpemU6IFwiTWVkaXVtXCIsXG4gICAgICAgIHR5cGU6IFwiZmllbmRcIixcbiAgICAgICAgc3VidHlwZTogXCJkZXZpbFwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwibGF3ZnVsIGV2aWxcIixcbiAgICAgICAgYWM6IDcsXG4gICAgICAgIGhwOiAxMyxcbiAgICAgICAgaGl0X2RpY2U6IFwiM2Q4ICsgLTFcIixcbiAgICAgICAgc3BlZWQ6IFwiMTUgZnQuXCIsXG4gICAgICAgIHN0YXRzOiBbMTAsIDUsIDExLCAxLCAxMSwgM10sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJjb2xkXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcImZpcmUsIHBvaXNvblwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJjaGFybWVkLCBmcmlnaHRlbmVkLCBwb2lzb25lZFwiLFxuICAgICAgICBzZW5zZXM6IFwiZGFya3Zpc2lvbiAxMjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTBcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcInVuZGVyc3RhbmRzIGluZmVybmFsIGJ1dCBjYW4ndCBzcGVha1wiLFxuICAgICAgICBjcjogXCIwXCIsXG4gICAgICAgIHRyYWl0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiRGV2aWwncyBTaWdodFwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWFnaWNhbCBkYXJrbmVzcyBkb2Vzbid0IGltcGVkZSB0aGUgbGVtdXJlJ3MgZGFya3Zpc2lvbi5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJIZWxsaXNoIFJlanV2ZW5hdGlvblwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiQSBsZW11cmUgdGhhdCBkaWVzIGluIHRoZSBOaW5lIEhlbGxzIGNvbWVzIGJhY2sgdG8gbGlmZSB3aXRoIGFsbCBpdHMgaGl0IHBvaW50cyBpbiAxZDEwIGRheXMgdW5sZXNzIGl0IGlzIGtpbGxlZCBieSBhIGdvb2QtYWxpZ25lZCBjcmVhdHVyZSB3aXRoIGEgYmxlc3Mgc3BlbGwgY2FzdCBvbiB0aGF0IGNyZWF0dXJlIG9yIGl0cyByZW1haW5zIGFyZSBzcHJpbmtsZWQgd2l0aCBob2x5IHdhdGVyLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJGaXN0XCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMyB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDIgKDFkNCkgYmx1ZGdlb25pbmcgZGFtYWdlXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAzLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjFkNFwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJMaWNoXCIsXG4gICAgICAgIHNpemU6IFwiTWVkaXVtXCIsXG4gICAgICAgIHR5cGU6IFwidW5kZWFkXCIsXG4gICAgICAgIHN1YnR5cGU6IFwiXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJhbnkgZXZpbCBhbGlnbm1lbnRcIixcbiAgICAgICAgYWM6IDE3LFxuICAgICAgICBocDogMTM1LFxuICAgICAgICBoaXRfZGljZTogXCIxOGQ4ICsgNTRcIixcbiAgICAgICAgc3BlZWQ6IFwiMzAgZnQuXCIsXG4gICAgICAgIHN0YXRzOiBbMTEsIDE2LCAxNiwgMjAsIDE0LCAxNl0sXG4gICAgICAgIHNhdmVzOiBbeyBjb25zdGl0dXRpb246IDEwIH0sIHsgaW50ZWxsaWdlbmNlOiAxMiB9LCB7IHdpc2RvbTogOSB9XSxcbiAgICAgICAgc2tpbGxzYXZlczogW1xuICAgICAgICAgICAgeyBhcmNhbmE6IDE4IH0sXG4gICAgICAgICAgICB7IGhpc3Rvcnk6IDEyIH0sXG4gICAgICAgICAgICB7IGluc2lnaHQ6IDkgfSxcbiAgICAgICAgICAgIHsgcGVyY2VwdGlvbjogOSB9XG4gICAgICAgIF0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJjb2xkLCBsaWdodG5pbmcsIG5lY3JvdGljXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOlxuICAgICAgICAgICAgXCJwb2lzb247IGJsdWRnZW9uaW5nLCBwaWVyY2luZywgYW5kIHNsYXNoaW5nIGZyb20gbm9ubWFnaWNhbCB3ZWFwb25zXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOlxuICAgICAgICAgICAgXCJjaGFybWVkLCBleGhhdXN0aW9uLCBmcmlnaHRlbmVkLCBwYXJhbHl6ZWQsIHBvaXNvbmVkXCIsXG4gICAgICAgIHNlbnNlczogXCJ0cnVlc2lnaHQgMTIwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDE5XCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJDb21tb24gcGx1cyB1cCB0byBmaXZlIG90aGVyIGxhbmd1YWdlc1wiLFxuICAgICAgICBjcjogXCIyMVwiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkxlZ2VuZGFyeSBSZXNpc3RhbmNlICgzL0RheSlcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIklmIHRoZSBsaWNoIGZhaWxzIGEgc2F2aW5nIHRocm93LCBpdCBjYW4gY2hvb3NlIHRvIHN1Y2NlZWQgaW5zdGVhZC5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJSZWp1dmVuYXRpb25cIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIklmIGl0IGhhcyBhIHBoeWxhY3RlcnksIGEgZGVzdHJveWVkIGxpY2ggZ2FpbnMgYSBuZXcgYm9keSBpbiAxZDEwIGRheXMsIHJlZ2FpbmluZyBhbGwgaXRzIGhpdCBwb2ludHMgYW5kIGJlY29taW5nIGFjdGl2ZSBhZ2Fpbi4gVGhlIG5ldyBib2R5IGFwcGVhcnMgd2l0aGluIDUgZmVldCBvZiB0aGUgcGh5bGFjdGVyeS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJUdXJuIFJlc2lzdGFuY2VcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBsaWNoIGhhcyBhZHZhbnRhZ2Ugb24gc2F2aW5nIHRocm93cyBhZ2FpbnN0IGFueSBlZmZlY3QgdGhhdCB0dXJucyB1bmRlYWQuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlBhcmFseXppbmcgVG91Y2hcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFNwZWxsIEF0dGFjazogKzEyIHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSBjcmVhdHVyZS4gSGl0OiAxMCAoM2Q2KSBjb2xkIGRhbWFnZS4gVGhlIHRhcmdldCBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxOCBDb25zdGl0dXRpb24gc2F2aW5nIHRocm93IG9yIGJlIHBhcmFseXplZCBmb3IgMSBtaW51dGUuIFRoZSB0YXJnZXQgY2FuIHJlcGVhdCB0aGUgc2F2aW5nIHRocm93IGF0IHRoZSBlbmQgb2YgZWFjaCBvZiBpdHMgdHVybnMsIGVuZGluZyB0aGUgZWZmZWN0IG9uIGl0c2VsZiBvbiBhIHN1Y2Nlc3MuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAxMixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIzZDZcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBsZWdlbmRhcnlfYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQ2FudHJpcFwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGxpY2ggY2FzdHMgYSBjYW50cmlwLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlBhcmFseXppbmcgVG91Y2ggKENvc3RzIDIgQWN0aW9ucylcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBsaWNoIHVzZXMgaXRzIFBhcmFseXppbmcgVG91Y2guXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiRnJpZ2h0ZW5pbmcgR2F6ZSAoQ29zdHMgMiBBY3Rpb25zKVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGxpY2ggZml4ZXMgaXRzIGdhemUgb24gb25lIGNyZWF0dXJlIGl0IGNhbiBzZWUgd2l0aGluIDEwIGZlZXQgb2YgaXQuIFRoZSB0YXJnZXQgbXVzdCBzdWNjZWVkIG9uIGEgREMgMTggV2lzZG9tIHNhdmluZyB0aHJvdyBhZ2FpbnN0IHRoaXMgbWFnaWMgb3IgYmVjb21lIGZyaWdodGVuZWQgZm9yIDEgbWludXRlLiBUaGUgZnJpZ2h0ZW5lZCB0YXJnZXQgY2FuIHJlcGVhdCB0aGUgc2F2aW5nIHRocm93IGF0IHRoZSBlbmQgb2YgZWFjaCBvZiBpdHMgdHVybnMsIGVuZGluZyB0aGUgZWZmZWN0IG9uIGl0c2VsZiBvbiBhIHN1Y2Nlc3MuIElmIGEgdGFyZ2V0J3Mgc2F2aW5nIHRocm93IGlzIHN1Y2Nlc3NmdWwgb3IgdGhlIGVmZmVjdCBlbmRzIGZvciBpdCwgdGhlIHRhcmdldCBpcyBpbW11bmUgdG8gdGhlIGxpY2gncyBnYXplIGZvciB0aGUgbmV4dCAyNCBob3Vycy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJEaXNydXB0IExpZmUgKENvc3RzIDMgQWN0aW9ucylcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIkVhY2ggbGl2aW5nIGNyZWF0dXJlIHdpdGhpbiAyMCBmZWV0IG9mIHRoZSBsaWNoIG11c3QgbWFrZSBhIERDIDE4IENvbnN0aXR1dGlvbiBzYXZpbmcgdGhyb3cgYWdhaW5zdCB0aGlzIG1hZ2ljLCB0YWtpbmcgMjEgKDZkNikgbmVjcm90aWMgZGFtYWdlIG9uIGEgZmFpbGVkIHNhdmUsIG9yIGhhbGYgYXMgbXVjaCBkYW1hZ2Ugb24gYSBzdWNjZXNzZnVsIG9uZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDAsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiNmQ2XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgc3BlbGxzOiBbXG4gICAgICAgICAgICBcIlRoZSBsaWNoIGlzIGFuIDE4dGgtbGV2ZWwgc3BlbGxjYXN0ZXIuIEl0cyBzcGVsbGNhc3RpbmcgYWJpbGl0eSBpcyBJbnRlbGxpZ2VuY2UgKHNwZWxsIHNhdmUgREMgMjAsICsxMiB0byBoaXQgd2l0aCBzcGVsbCBhdHRhY2tzKS4gVGhlIGxpY2ggaGFzIHRoZSBmb2xsb3dpbmcgd2l6YXJkIHNwZWxscyBwcmVwYXJlZDpcIixcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIkNhbnRyaXBzIChhdCB3aWxsKVwiOlxuICAgICAgICAgICAgICAgICAgICBcIm1hZ2UgaGFuZCwgcHJlc3RpZGlnaXRhdGlvbiwgcmF5IG9mIGZyb3N0XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCIxc3QgbGV2ZWwgKDQgc2xvdHMpXCI6XG4gICAgICAgICAgICAgICAgICAgIFwiZGV0ZWN0IG1hZ2ljLCBtYWdpYyBtaXNzaWxlLCBzaGllbGQsIHRodW5kZXJ3YXZlXCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCIybmQgbGV2ZWwgKDMgc2xvdHMpXCI6XG4gICAgICAgICAgICAgICAgICAgIFwiZGV0ZWN0IHRob3VnaHRzLCBpbnZpc2liaWxpdHksIE1lbGYncyBhY2lkIGFycm93LCBtaXJyb3IgaW1hZ2VcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIjNyZCBsZXZlbCAoMyBzbG90cylcIjpcbiAgICAgICAgICAgICAgICAgICAgXCJhbmltYXRlIGRlYWQsIGNvdW50ZXJzcGVsbCwgZGlzcGVsIG1hZ2ljLCBmaXJlYmFsbFwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeyBcIjR0aCBsZXZlbCAoMyBzbG90cylcIjogXCJibGlnaHQsIGRpbWVuc2lvbiBkb29yXCIgfSxcbiAgICAgICAgICAgIHsgXCI1dGggbGV2ZWwgKDMgc2xvdHMpXCI6IFwiY2xvdWRraWxsLCBzY3J5aW5nXCIgfSxcbiAgICAgICAgICAgIHsgXCI2dGggbGV2ZWwgKDEgc2xvdClcIjogXCJkaXNpbnRlZ3JhdGUsIGdsb2JlIG9mIGludnVsbmVyYWJpbGl0eVwiIH0sXG4gICAgICAgICAgICB7IFwiN3RoIGxldmVsICgxIHNsb3QpXCI6IFwiZmluZ2VyIG9mIGRlYXRoLCBwbGFuZSBzaGlmdFwiIH0sXG4gICAgICAgICAgICB7IFwiOHRoIGxldmVsICgxIHNsb3QpXCI6IFwiZG9taW5hdGUgbW9uc3RlciwgcG93ZXIgd29yZCBzdHVuXCIgfSxcbiAgICAgICAgICAgIHsgXCI5dGggbGV2ZWwgKDEgc2xvdClcIjogXCJwb3dlciB3b3JkIGtpbGxcIiB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJMaW9uXCIsXG4gICAgICAgIHNpemU6IFwiTGFyZ2VcIixcbiAgICAgICAgdHlwZTogXCJiZWFzdFwiLFxuICAgICAgICBzdWJ0eXBlOiBcIlwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwidW5hbGlnbmVkXCIsXG4gICAgICAgIGFjOiAxMixcbiAgICAgICAgaHA6IDI2LFxuICAgICAgICBoaXRfZGljZTogXCI0ZDEwICsgNFwiLFxuICAgICAgICBzcGVlZDogXCI1MCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsxNywgMTUsIDEzLCAzLCAxMiwgOF0sXG4gICAgICAgIHNraWxsc2F2ZXM6IFt7IHBlcmNlcHRpb246IDMgfSwgeyBzdGVhbHRoOiA2IH1dLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcbiAgICAgICAgc2Vuc2VzOiBcInBhc3NpdmUgUGVyY2VwdGlvbiAxM1wiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiXCIsXG4gICAgICAgIGNyOiBcIjFcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJLZWVuIFNtZWxsXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgbGlvbiBoYXMgYWR2YW50YWdlIG9uIFdpc2RvbSAoUGVyY2VwdGlvbikgY2hlY2tzIHRoYXQgcmVseSBvbiBzbWVsbC5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJQYWNrIFRhY3RpY3NcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBsaW9uIGhhcyBhZHZhbnRhZ2Ugb24gYW4gYXR0YWNrIHJvbGwgYWdhaW5zdCBhIGNyZWF0dXJlIGlmIGF0IGxlYXN0IG9uZSBvZiB0aGUgbGlvbidzIGFsbGllcyBpcyB3aXRoaW4gNSBmdC4gb2YgdGhlIGNyZWF0dXJlIGFuZCB0aGUgYWxseSBpc24ndCBpbmNhcGFjaXRhdGVkLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlBvdW5jZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiSWYgdGhlIGxpb24gbW92ZXMgYXQgbGVhc3QgMjAgZnQuIHN0cmFpZ2h0IHRvd2FyZCBhIGNyZWF0dXJlIGFuZCB0aGVuIGhpdHMgaXQgd2l0aCBhIGNsYXcgYXR0YWNrIG9uIHRoZSBzYW1lIHR1cm4sIHRoYXQgdGFyZ2V0IG11c3Qgc3VjY2VlZCBvbiBhIERDIDEzIFN0cmVuZ3RoIHNhdmluZyB0aHJvdyBvciBiZSBrbm9ja2VkIHByb25lLiBJZiB0aGUgdGFyZ2V0IGlzIHByb25lLCB0aGUgbGlvbiBjYW4gbWFrZSBvbmUgYml0ZSBhdHRhY2sgYWdhaW5zdCBpdCBhcyBhIGJvbnVzIGFjdGlvbi5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJSdW5uaW5nIExlYXBcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIldpdGggYSAxMC1mb290IHJ1bm5pbmcgc3RhcnQsIHRoZSBsaW9uIGNhbiBsb25nIGp1bXAgdXAgdG8gMjUgZnQuLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJCaXRlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNSB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDcgKDFkOCArIDMpIHBpZXJjaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDUsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMWQ4XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiAzXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQ2xhd1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzUgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiA2ICgxZDYgKyAzKSBzbGFzaGluZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA1LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjFkNlwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogM1xuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiTGl6YXJkXCIsXG4gICAgICAgIHNpemU6IFwiVGlueVwiLFxuICAgICAgICB0eXBlOiBcImJlYXN0XCIsXG4gICAgICAgIHN1YnR5cGU6IFwiXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcbiAgICAgICAgYWM6IDEwLFxuICAgICAgICBocDogMixcbiAgICAgICAgaGl0X2RpY2U6IFwiMWQ0ICsgLTFcIixcbiAgICAgICAgc3BlZWQ6IFwiMjAgZnQuLCBjbGltYiAyMCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsyLCAxMSwgMTAsIDEsIDgsIDNdLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcbiAgICAgICAgc2Vuc2VzOiBcImRhcmt2aXNpb24gMzAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gOVwiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiXCIsXG4gICAgICAgIGNyOiBcIjBcIixcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQml0ZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzAgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxIHBpZXJjaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDAsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiAxXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJMaXphcmRmb2xrXCIsXG4gICAgICAgIHNpemU6IFwiTWVkaXVtXCIsXG4gICAgICAgIHR5cGU6IFwiaHVtYW5vaWRcIixcbiAgICAgICAgc3VidHlwZTogXCJsaXphcmRmb2xrXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJuZXV0cmFsXCIsXG4gICAgICAgIGFjOiAxNSxcbiAgICAgICAgaHA6IDIyLFxuICAgICAgICBoaXRfZGljZTogXCI0ZDggKyA0XCIsXG4gICAgICAgIHNwZWVkOiBcIjMwIGZ0Liwgc3dpbSAzMCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsxNSwgMTAsIDEzLCA3LCAxMiwgN10sXG4gICAgICAgIHNraWxsc2F2ZXM6IFt7IHBlcmNlcHRpb246IDMgfSwgeyBzdGVhbHRoOiA0IH0sIHsgc3Vydml2YWw6IDUgfV0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBzZW5zZXM6IFwicGFzc2l2ZSBQZXJjZXB0aW9uIDEzXCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJEcmFjb25pY1wiLFxuICAgICAgICBjcjogXCIxLzJcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJIb2xkIEJyZWF0aFwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGxpemFyZGZvbGsgY2FuIGhvbGQgaXRzIGJyZWF0aCBmb3IgMTUgbWludXRlcy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBsaXphcmRmb2xrIG1ha2VzIHR3byBtZWxlZSBhdHRhY2tzLCBlYWNoIG9uZSB3aXRoIGEgZGlmZmVyZW50IHdlYXBvbi5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJCaXRlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNCB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDUgKDFkNiArIDIpIHBpZXJjaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDQsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMWQ2XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiAyXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiSGVhdnkgQ2x1YlwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzQgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiA1ICgxZDYgKyAyKSBibHVkZ2VvbmluZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA0LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjFkNlwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogMlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkphdmVsaW5cIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIG9yIFJhbmdlZCBXZWFwb24gQXR0YWNrOiArNCB0byBoaXQsIHJlYWNoIDUgZnQuIG9yIHJhbmdlIDMwLzEyMCBmdC4sIG9uZSB0YXJnZXQuIEhpdDogNSAoMWQ2ICsgMikgcGllcmNpbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIxZDZcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJTcGlrZWQgU2hpZWxkXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNCB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDUgKDFkNiArIDIpIHBpZXJjaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDQsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMWQ2XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiAyXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJNYWdlXCIsXG4gICAgICAgIHNpemU6IFwiTWVkaXVtXCIsXG4gICAgICAgIHR5cGU6IFwiaHVtYW5vaWRcIixcbiAgICAgICAgc3VidHlwZTogXCJhbnkgcmFjZVwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwiYW55IGFsaWdubWVudFwiLFxuICAgICAgICBhYzogMTIsXG4gICAgICAgIGhwOiA0MCxcbiAgICAgICAgaGl0X2RpY2U6IFwiOWQ4ICsgLTFcIixcbiAgICAgICAgc3BlZWQ6IFwiMzAgZnQuXCIsXG4gICAgICAgIHN0YXRzOiBbOSwgMTQsIDExLCAxNywgMTIsIDExXSxcbiAgICAgICAgc2F2ZXM6IFt7IGludGVsbGlnZW5jZTogNiB9LCB7IHdpc2RvbTogNCB9XSxcbiAgICAgICAgc2tpbGxzYXZlczogW3sgYXJjYW5hOiA2IH0sIHsgaGlzdG9yeTogNiB9XSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIHNlbnNlczogXCJwYXNzaXZlIFBlcmNlcHRpb24gMTFcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcImFueSBmb3VyIGxhbmd1YWdlc1wiLFxuICAgICAgICBjcjogXCI2XCIsXG4gICAgICAgIHRyYWl0czogW10sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkRhZ2dlclwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgb3IgUmFuZ2VkIFdlYXBvbiBBdHRhY2s6ICs1IHRvIGhpdCwgcmVhY2ggNSBmdC4gb3IgcmFuZ2UgMjAvNjAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDQgKDFkNCArIDIpIHBpZXJjaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDUsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMWQ0XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiAyXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIHNwZWxsczogW1xuICAgICAgICAgICAgXCJUaGUgbWFnZSBpcyBhIDl0aC1sZXZlbCBzcGVsbGNhc3Rlci4gSXRzIHNwZWxsY2FzdGluZyBhYmlsaXR5IGlzIEludGVsbGlnZW5jZSAoc3BlbGwgc2F2ZSBEQyAxNCwgKzYgdG8gaGl0IHdpdGggc3BlbGwgYXR0YWNrcykuIFRoZSBtYWdlIGhhcyB0aGUgZm9sbG93aW5nIHdpemFyZCBzcGVsbHMgcHJlcGFyZWQ6XCIsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJDYW50cmlwcyAoYXQgd2lsbClcIjpcbiAgICAgICAgICAgICAgICAgICAgXCJmaXJlIGJvbHQsIGxpZ2h0LCBtYWdlIGhhbmQsIHByZXN0aWRpZ2l0YXRpb25cIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcIjFzdCBsZXZlbCAoNCBzbG90cylcIjpcbiAgICAgICAgICAgICAgICAgICAgXCJkZXRlY3QgbWFnaWMsIG1hZ2UgYXJtb3IsIG1hZ2ljIG1pc3NpbGUsIHNoaWVsZFwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgeyBcIjJuZCBsZXZlbCAoMyBzbG90cylcIjogXCJtaXN0eSBzdGVwLCBzdWdnZXN0aW9uXCIgfSxcbiAgICAgICAgICAgIHsgXCIzcmQgbGV2ZWwgKDMgc2xvdHMpXCI6IFwiY291bnRlcnNwZWxsLCBmaXJlYmFsbCwgZmx5XCIgfSxcbiAgICAgICAgICAgIHsgXCI0dGggbGV2ZWwgKDMgc2xvdHMpXCI6IFwiZ3JlYXRlciBpbnZpc2liaWxpdHksIGljZSBzdG9ybVwiIH0sXG4gICAgICAgICAgICB7IFwiNXRoIGxldmVsICgxIHNsb3QpXCI6IFwiY29uZSBvZiBjb2xkXCIgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiTWFnbWEgTWVwaGl0XCIsXG4gICAgICAgIHNpemU6IFwiU21hbGxcIixcbiAgICAgICAgdHlwZTogXCJlbGVtZW50YWxcIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcIm5ldXRyYWwgZXZpbFwiLFxuICAgICAgICBhYzogMTEsXG4gICAgICAgIGhwOiAyMixcbiAgICAgICAgaGl0X2RpY2U6IFwiNWQ2ICsgNFwiLFxuICAgICAgICBzcGVlZDogXCIzMCBmdC4sIGZseSAzMCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFs4LCAxMiwgMTIsIDcsIDEwLCAxMF0sXG4gICAgICAgIHNraWxsc2F2ZXM6IFt7IHN0ZWFsdGg6IDMgfV0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiY29sZFwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcImZpcmUsIHBvaXNvblwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJwb2lzb25lZFwiLFxuICAgICAgICBzZW5zZXM6IFwiZGFya3Zpc2lvbiA2MCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxMFwiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiSWduYW4sIFRlcnJhblwiLFxuICAgICAgICBjcjogXCIxLzJcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJEZWF0aCBCdXJzdFwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiV2hlbiB0aGUgbWVwaGl0IGRpZXMsIGl0IGV4cGxvZGVzIGluIGEgYnVyc3Qgb2YgbGF2YS4gRWFjaCBjcmVhdHVyZSB3aXRoaW4gNSBmdC4gb2YgaXQgbXVzdCBtYWtlIGEgREMgMTEgRGV4dGVyaXR5IHNhdmluZyB0aHJvdywgdGFraW5nIDcgKDJkNikgZmlyZSBkYW1hZ2Ugb24gYSBmYWlsZWQgc2F2ZSwgb3IgaGFsZiBhcyBtdWNoIGRhbWFnZSBvbiBhIHN1Y2Nlc3NmdWwgb25lLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIyZDZcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkZhbHNlIEFwcGVhcmFuY2VcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIldoaWxlIHRoZSBtZXBoaXQgcmVtYWlucyBtb3Rpb25sZXNzLCBpdCBpcyBpbmRpc3Rpbmd1aXNoYWJsZSBmcm9tIGFuIG9yZGluYXJ5IG1vdW5kIG9mIG1hZ21hLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIklubmF0ZSBTcGVsbGNhc3RpbmcgKDEvRGF5KVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIG1lcGhpdCBjYW4gaW5uYXRlbHkgY2FzdCBoZWF0IG1ldGFsIChzcGVsbCBzYXZlIERDIDEwKSwgcmVxdWlyaW5nIG5vIG1hdGVyaWFsIGNvbXBvbmVudHMuIEl0cyBpbm5hdGUgc3BlbGxjYXN0aW5nIGFiaWxpdHkgaXMgQ2hhcmlzbWEuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkNsYXdzXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMyB0byBoaXQsIHJlYWNoIDUgZnQgLiwgb25lIGNyZWF0dXJlLiBIaXQ6IDMgKDFkNCArIDEpIHNsYXNoaW5nIGRhbWFnZSBwbHVzIDIgKDFkNCkgZmlyZSBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAzLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjFkNFwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogMVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkZpcmUgQnJlYXRoIChSZWNoYXJnZSA2KVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIG1lcGhpdCBleGhhbGVzIGEgMTUtZm9vdCBjb25lIG9mIGZpcmUuIEVhY2ggY3JlYXR1cmUgaW4gdGhhdCBhcmVhIG11c3QgbWFrZSBhIERDIDExIERleHRlcml0eSBzYXZpbmcgdGhyb3csIHRha2luZyA3ICgyZDYpIGZpcmUgZGFtYWdlIG9uIGEgZmFpbGVkIHNhdmUsIG9yIGhhbGYgYXMgbXVjaCBkYW1hZ2Ugb24gYSBzdWNjZXNzZnVsIG9uZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJWYXJpYW50OiBTdW1tb24gTWVwaGl0cyAoMS9EYXkpXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgbWVwaGl0IGhhcyBhIDI1IHBlcmNlbnQgY2hhbmNlIG9mIHN1bW1vbmluZyAxZDQgbWVwaGl0cyBvZiBpdHMga2luZC4gQSBzdW1tb25lZCBtZXBoaXQgYXBwZWFycyBpbiBhbiB1bm9jY3VwaWVkIHNwYWNlIHdpdGhpbiA2MCBmZWV0IG9mIGl0cyBzdW1tb25lciwgYWN0cyBhcyBhbiBhbGx5IG9mIGl0cyBzdW1tb25lciwgYW5kIGNhbid0IHN1bW1vbiBvdGhlciBtZXBoaXRzLiBJdCByZW1haW5zIGZvciAxIG1pbnV0ZSwgdW50aWwgaXQgb3IgaXRzIHN1bW1vbmVyIGRpZXMsIG9yIHVudGlsIGl0cyBzdW1tb25lciBkaXNtaXNzZXMgaXQgYXMgYW4gYWN0aW9uLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiTWFnbWluXCIsXG4gICAgICAgIHNpemU6IFwiU21hbGxcIixcbiAgICAgICAgdHlwZTogXCJlbGVtZW50YWxcIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcImNoYW90aWMgbmV1dHJhbFwiLFxuICAgICAgICBhYzogMTQsXG4gICAgICAgIGhwOiA5LFxuICAgICAgICBoaXRfZGljZTogXCIyZDYgKyAyXCIsXG4gICAgICAgIHNwZWVkOiBcIjMwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzcsIDE1LCAxMiwgOCwgMTEsIDEwXSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOlxuICAgICAgICAgICAgXCJibHVkZ2VvbmluZywgcGllcmNpbmcsIGFuZCBzbGFzaGluZyBmcm9tIG5vbm1hZ2ljYWwgd2VhcG9uc1wiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczogXCJmaXJlXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBzZW5zZXM6IFwiZGFya3Zpc2lvbiA2MCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxMFwiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiSWduYW5cIixcbiAgICAgICAgY3I6IFwiMS8yXCIsXG4gICAgICAgIHRyYWl0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiRGVhdGggQnVyc3RcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIldoZW4gdGhlIG1hZ21pbiBkaWVzLCBpdCBleHBsb2RlcyBpbiBhIGJ1cnN0IG9mIGZpcmUgYW5kIG1hZ21hLiBFYWNoIGNyZWF0dXJlIHdpdGhpbiAxMCBmdC4gb2YgaXQgbXVzdCBtYWtlIGEgREMgMTEgRGV4dGVyaXR5IHNhdmluZyB0aHJvdywgdGFraW5nIDcgKDJkNikgZmlyZSBkYW1hZ2Ugb24gYSBmYWlsZWQgc2F2ZSwgb3IgaGFsZiBhcyBtdWNoIGRhbWFnZSBvbiBhIHN1Y2Nlc3NmdWwgb25lLiBGbGFtbWFibGUgb2JqZWN0cyB0aGF0IGFyZW4ndCBiZWluZyB3b3JuIG9yIGNhcnJpZWQgaW4gdGhhdCBhcmVhIGFyZSBpZ25pdGVkLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIyZDZcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIklnbml0ZWQgSWxsdW1pbmF0aW9uXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJBcyBhIGJvbnVzIGFjdGlvbiwgdGhlIG1hZ21pbiBjYW4gc2V0IGl0c2VsZiBhYmxhemUgb3IgZXh0aW5ndWlzaCBpdHMgZmxhbWVzLiBXaGlsZSBhYmxhemUsIHRoZSBtYWdtaW4gc2hlZHMgYnJpZ2h0IGxpZ2h0IGluIGEgMTAtZm9vdCByYWRpdXMgYW5kIGRpbSBsaWdodCBmb3IgYW4gYWRkaXRpb25hbCAxMCBmdC5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiVG91Y2hcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs0IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogNyAoMmQ2KSBmaXJlIGRhbWFnZS4gSWYgdGhlIHRhcmdldCBpcyBhIGNyZWF0dXJlIG9yIGEgZmxhbW1hYmxlIG9iamVjdCwgaXQgaWduaXRlcy4gVW50aWwgYSB0YXJnZXQgdGFrZXMgYW4gYWN0aW9uIHRvIGRvdXNlIHRoZSBmaXJlLCB0aGUgdGFyZ2V0IHRha2VzIDMgKDFkNikgZmlyZSBkYW1hZ2UgYXQgdGhlIGVuZCBvZiBlYWNoIG9mIGl0cyB0dXJucy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDQsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMmQ2XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIk1hbW1vdGhcIixcbiAgICAgICAgc2l6ZTogXCJIdWdlXCIsXG4gICAgICAgIHR5cGU6IFwiYmVhc3RcIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcInVuYWxpZ25lZFwiLFxuICAgICAgICBhYzogMTMsXG4gICAgICAgIGhwOiAxMjYsXG4gICAgICAgIGhpdF9kaWNlOiBcIjExZDEyICsgNTRcIixcbiAgICAgICAgc3BlZWQ6IFwiNDAgZnQuXCIsXG4gICAgICAgIHN0YXRzOiBbMjQsIDksIDIxLCAzLCAxMSwgNl0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBzZW5zZXM6IFwicGFzc2l2ZSBQZXJjZXB0aW9uIDEwXCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJcIixcbiAgICAgICAgY3I6IFwiNlwiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlRyYW1wbGluZyBDaGFyZ2VcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIklmIHRoZSBtYW1tb3RoIG1vdmVzIGF0IGxlYXN0IDIwIGZ0LiBzdHJhaWdodCB0b3dhcmQgYSBjcmVhdHVyZSBhbmQgdGhlbiBoaXRzIGl0IHdpdGggYSBnb3JlIGF0dGFjayBvbiB0aGUgc2FtZSB0dXJuLCB0aGF0IHRhcmdldCBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxOCBTdHJlbmd0aCBzYXZpbmcgdGhyb3cgb3IgYmUga25vY2tlZCBwcm9uZS4gSWYgdGhlIHRhcmdldCBpcyBwcm9uZSwgdGhlIG1hbW1vdGggY2FuIG1ha2Ugb25lIHN0b21wIGF0dGFjayBhZ2FpbnN0IGl0IGFzIGEgYm9udXMgYWN0aW9uLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJHb3JlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMTAgdG8gaGl0LCByZWFjaCAxMCBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMjUgKDRkOCArIDcpIHBpZXJjaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDEwLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjRkOFwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogN1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlN0b21wXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMTAgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHByb25lIGNyZWF0dXJlLiBIaXQ6IDI5ICg0ZDEwICsgNykgYmx1ZGdlb25pbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMTAsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiNGQxMFwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogN1xuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiTWFudGljb3JlXCIsXG4gICAgICAgIHNpemU6IFwiTGFyZ2VcIixcbiAgICAgICAgdHlwZTogXCJtb25zdHJvc2l0eVwiLFxuICAgICAgICBzdWJ0eXBlOiBcIlwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwibGF3ZnVsIGV2aWxcIixcbiAgICAgICAgYWM6IDE0LFxuICAgICAgICBocDogNjgsXG4gICAgICAgIGhpdF9kaWNlOiBcIjhkMTAgKyAyNFwiLFxuICAgICAgICBzcGVlZDogXCIzMCBmdC4sIGZseSA1MCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsxNywgMTYsIDE3LCA3LCAxMiwgOF0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBzZW5zZXM6IFwiZGFya3Zpc2lvbiA2MCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxMVwiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiXCIsXG4gICAgICAgIGNyOiBcIjNcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJUYWlsIFNwaWtlIFJlZ3Jvd3RoXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgbWFudGljb3JlIGhhcyB0d2VudHktZm91ciB0YWlsIHNwaWtlcy4gVXNlZCBzcGlrZXMgcmVncm93IHdoZW4gdGhlIG1hbnRpY29yZSBmaW5pc2hlcyBhIGxvbmcgcmVzdC5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBtYW50aWNvcmUgbWFrZXMgdGhyZWUgYXR0YWNrczogb25lIHdpdGggaXRzIGJpdGUgYW5kIHR3byB3aXRoIGl0cyBjbGF3cyBvciB0aHJlZSB3aXRoIGl0cyB0YWlsIHNwaWtlcy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJCaXRlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNSB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDcgKDFkOCArIDMpIHBpZXJjaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDUsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMWQ4XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiAzXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQ2xhd1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzUgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiA2ICgxZDYgKyAzKSBzbGFzaGluZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA1LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjFkNlwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogM1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlRhaWwgU3Bpa2VcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlJhbmdlZCBXZWFwb24gQXR0YWNrOiArNSB0byBoaXQsIHJhbmdlIDEwMC8yMDAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDcgKDFkOCArIDMpIHBpZXJjaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDUsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMWQ4XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiAzXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJNYXJpbGl0aFwiLFxuICAgICAgICBzaXplOiBcIkxhcmdlXCIsXG4gICAgICAgIHR5cGU6IFwiZmllbmRcIixcbiAgICAgICAgc3VidHlwZTogXCJkZW1vblwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwiY2hhb3RpYyBldmlsXCIsXG4gICAgICAgIGFjOiAxOCxcbiAgICAgICAgaHA6IDE4OSxcbiAgICAgICAgaGl0X2RpY2U6IFwiMThkMTAgKyA5MFwiLFxuICAgICAgICBzcGVlZDogXCI0MCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsxOCwgMjAsIDIwLCAxOCwgMTYsIDIwXSxcbiAgICAgICAgc2F2ZXM6IFtcbiAgICAgICAgICAgIHsgc3RyZW5ndGg6IDkgfSxcbiAgICAgICAgICAgIHsgY29uc3RpdHV0aW9uOiAxMCB9LFxuICAgICAgICAgICAgeyB3aXNkb206IDggfSxcbiAgICAgICAgICAgIHsgY2hhcmlzbWE6IDEwIH1cbiAgICAgICAgXSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOlxuICAgICAgICAgICAgXCJjb2xkLCBmaXJlLCBsaWdodG5pbmc7IGJsdWRnZW9uaW5nLCBwaWVyY2luZywgYW5kIHNsYXNoaW5nIGZyb20gbm9ubWFnaWNhbCB3ZWFwb25zXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcInBvaXNvblwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJwb2lzb25lZFwiLFxuICAgICAgICBzZW5zZXM6IFwidHJ1ZXNpZ2h0IDEyMCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxM1wiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiQWJ5c3NhbCwgdGVsZXBhdGh5IDEyMCBmdC5cIixcbiAgICAgICAgY3I6IFwiMTZcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJNYWdpYyBSZXNpc3RhbmNlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgbWFyaWxpdGggaGFzIGFkdmFudGFnZSBvbiBzYXZpbmcgdGhyb3dzIGFnYWluc3Qgc3BlbGxzIGFuZCBvdGhlciBtYWdpY2FsIGVmZmVjdHMuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTWFnaWMgV2VhcG9uc1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIG1hcmlsaXRoJ3Mgd2VhcG9uIGF0dGFja3MgYXJlIG1hZ2ljYWwuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiUmVhY3RpdmVcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBtYXJpbGl0aCBjYW4gdGFrZSBvbmUgcmVhY3Rpb24gb24gZXZlcnkgdHVybiBpbiBjb21iYXQuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgbWFyaWxpdGggY2FuIG1ha2Ugc2V2ZW4gYXR0YWNrczogc2l4IHdpdGggaXRzIGxvbmdzd29yZHMgYW5kIG9uZSB3aXRoIGl0cyB0YWlsLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkxvbmdzd29yZFwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzkgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxMyAoMmQ4ICsgNCkgc2xhc2hpbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogOSxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIyZDhcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDRcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJUYWlsXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArOSB0byBoaXQsIHJlYWNoIDEwIGZ0Liwgb25lIGNyZWF0dXJlLiBIaXQ6IDE1ICgyZDEwICsgNCkgYmx1ZGdlb25pbmcgZGFtYWdlLiBJZiB0aGUgdGFyZ2V0IGlzIE1lZGl1bSBvciBzbWFsbGVyLCBpdCBpcyBncmFwcGxlZCAoZXNjYXBlIERDIDE5KS4gVW50aWwgdGhpcyBncmFwcGxlIGVuZHMsIHRoZSB0YXJnZXQgaXMgcmVzdHJhaW5lZCwgdGhlIG1hcmlsaXRoIGNhbiBhdXRvbWF0aWNhbGx5IGhpdCB0aGUgdGFyZ2V0IHdpdGggaXRzIHRhaWwsIGFuZCB0aGUgbWFyaWxpdGggY2FuJ3QgbWFrZSB0YWlsIGF0dGFja3MgYWdhaW5zdCBvdGhlciB0YXJnZXRzLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogOSxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIyZDEwXCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiA0XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiVGVsZXBvcnRcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBtYXJpbGl0aCBtYWdpY2FsbHkgdGVsZXBvcnRzLCBhbG9uZyB3aXRoIGFueSBlcXVpcG1lbnQgaXQgaXMgd2VhcmluZyBvciBjYXJyeWluZywgdXAgdG8gMTIwIGZlZXQgdG8gYW4gdW5vY2N1cGllZCBzcGFjZSBpdCBjYW4gc2VlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlZhcmlhbnQ6IFN1bW1vbiBEZW1vbiAoMS9EYXkpXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZGVtb24gY2hvb3NlcyB3aGF0IHRvIHN1bW1vbiBhbmQgYXR0ZW1wdHMgYSBtYWdpY2FsIHN1bW1vbmluZy5cXFxcbkEgbWFyaWxpdGggaGFzIGEgNTAgcGVyY2VudCBjaGFuY2Ugb2Ygc3VtbW9uaW5nIDFkNiB2cm9ja3MsIDFkNCBoZXpyb3VzLCAxZDMgZ2xhYnJlenVzLCAxZDIgbmFsZmVzaG5lZXMsIG9yIG9uZSBtYXJpbGl0aC5cXFxcbkEgc3VtbW9uZWQgZGVtb24gYXBwZWFycyBpbiBhbiB1bm9jY3VwaWVkIHNwYWNlIHdpdGhpbiA2MCBmZWV0IG9mIGl0cyBzdW1tb25lciwgYWN0cyBhcyBhbiBhbGx5IG9mIGl0cyBzdW1tb25lciwgYW5kIGNhbid0IHN1bW1vbiBvdGhlciBkZW1vbnMuIEl0IHJlbWFpbnMgZm9yIDEgbWludXRlLCB1bnRpbCBpdCBvciBpdHMgc3VtbW9uZXIgZGllcywgb3IgdW50aWwgaXRzIHN1bW1vbmVyIGRpc21pc3NlcyBpdCBhcyBhbiBhY3Rpb24uXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIHJlYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiUGFycnlcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBtYXJpbGl0aCBhZGRzIDUgdG8gaXRzIEFDIGFnYWluc3Qgb25lIG1lbGVlIGF0dGFjayB0aGF0IHdvdWxkIGhpdCBpdC4gVG8gZG8gc28sIHRoZSBtYXJpbGl0aCBtdXN0IHNlZSB0aGUgYXR0YWNrZXIgYW5kIGJlIHdpZWxkaW5nIGEgbWVsZWUgd2VhcG9uLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiTWFzdGlmZlwiLFxuICAgICAgICBzaXplOiBcIk1lZGl1bVwiLFxuICAgICAgICB0eXBlOiBcImJlYXN0XCIsXG4gICAgICAgIHN1YnR5cGU6IFwiXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcbiAgICAgICAgYWM6IDEyLFxuICAgICAgICBocDogNSxcbiAgICAgICAgaGl0X2RpY2U6IFwiMWQ4XCIsXG4gICAgICAgIHNwZWVkOiBcIjQwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzEzLCAxNCwgMTIsIDMsIDEyLCA3XSxcbiAgICAgICAgc2tpbGxzYXZlczogW3sgcGVyY2VwdGlvbjogMyB9XSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIHNlbnNlczogXCJwYXNzaXZlIFBlcmNlcHRpb24gMTNcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcIlwiLFxuICAgICAgICBjcjogXCIxLzhcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJLZWVuIEhlYXJpbmcgYW5kIFNtZWxsXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgbWFzdGlmZiBoYXMgYWR2YW50YWdlIG9uIFdpc2RvbSAoUGVyY2VwdGlvbikgY2hlY2tzIHRoYXQgcmVseSBvbiBoZWFyaW5nIG9yIHNtZWxsLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJCaXRlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMyB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDQgKDFkNiArIDEpIHBpZXJjaW5nIGRhbWFnZS4gSWYgdGhlIHRhcmdldCBpcyBhIGNyZWF0dXJlLCBpdCBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxMSBTdHJlbmd0aCBzYXZpbmcgdGhyb3cgb3IgYmUga25vY2tlZCBwcm9uZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDMsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMWQ2XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiAxXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJNZWR1c2FcIixcbiAgICAgICAgc2l6ZTogXCJNZWRpdW1cIixcbiAgICAgICAgdHlwZTogXCJtb25zdHJvc2l0eVwiLFxuICAgICAgICBzdWJ0eXBlOiBcIlwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwibGF3ZnVsIGV2aWxcIixcbiAgICAgICAgYWM6IDE1LFxuICAgICAgICBocDogMTI3LFxuICAgICAgICBoaXRfZGljZTogXCIxN2Q4ICsgNTBcIixcbiAgICAgICAgc3BlZWQ6IFwiMzAgZnQuXCIsXG4gICAgICAgIHN0YXRzOiBbMTAsIDE1LCAxNiwgMTIsIDEzLCAxNV0sXG4gICAgICAgIHNraWxsc2F2ZXM6IFtcbiAgICAgICAgICAgIHsgZGVjZXB0aW9uOiA1IH0sXG4gICAgICAgICAgICB7IGluc2lnaHQ6IDQgfSxcbiAgICAgICAgICAgIHsgcGVyY2VwdGlvbjogNCB9LFxuICAgICAgICAgICAgeyBzdGVhbHRoOiA1IH1cbiAgICAgICAgXSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIHNlbnNlczogXCJkYXJrdmlzaW9uIDYwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDE0XCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJDb21tb25cIixcbiAgICAgICAgY3I6IFwiNlwiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlBldHJpZnlpbmcgR2F6ZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiV2hlbiBhIGNyZWF0dXJlIHRoYXQgY2FuIHNlZSB0aGUgbWVkdXNhJ3MgZXllcyBzdGFydHMgaXRzIHR1cm4gd2l0aGluIDMwIGZ0LiBvZiB0aGUgbWVkdXNhLCB0aGUgbWVkdXNhIGNhbiBmb3JjZSBpdCB0byBtYWtlIGEgREMgMTQgQ29uc3RpdHV0aW9uIHNhdmluZyB0aHJvdyBpZiB0aGUgbWVkdXNhIGlzbid0IGluY2FwYWNpdGF0ZWQgYW5kIGNhbiBzZWUgdGhlIGNyZWF0dXJlLiBJZiB0aGUgc2F2aW5nIHRocm93IGZhaWxzIGJ5IDUgb3IgbW9yZSwgdGhlIGNyZWF0dXJlIGlzIGluc3RhbnRseSBwZXRyaWZpZWQuIE90aGVyd2lzZSwgYSBjcmVhdHVyZSB0aGF0IGZhaWxzIHRoZSBzYXZlIGJlZ2lucyB0byB0dXJuIHRvIHN0b25lIGFuZCBpcyByZXN0cmFpbmVkLiBUaGUgcmVzdHJhaW5lZCBjcmVhdHVyZSBtdXN0IHJlcGVhdCB0aGUgc2F2aW5nIHRocm93IGF0IHRoZSBlbmQgb2YgaXRzIG5leHQgdHVybiwgYmVjb21pbmcgcGV0cmlmaWVkIG9uIGEgZmFpbHVyZSBvciBlbmRpbmcgdGhlIGVmZmVjdCBvbiBhIHN1Y2Nlc3MuIFRoZSBwZXRyaWZpY2F0aW9uIGxhc3RzIHVudGlsIHRoZSBjcmVhdHVyZSBpcyBmcmVlZCBieSB0aGUgZ3JlYXRlciByZXN0b3JhdGlvbiBzcGVsbCBvciBvdGhlciBtYWdpYy5cXFxcblVubGVzcyBzdXJwcmlzZWQsIGEgY3JlYXR1cmUgY2FuIGF2ZXJ0IGl0cyBleWVzIHRvIGF2b2lkIHRoZSBzYXZpbmcgdGhyb3cgYXQgdGhlIHN0YXJ0IG9mIGl0cyB0dXJuLiBJZiB0aGUgY3JlYXR1cmUgZG9lcyBzbywgaXQgY2FuJ3Qgc2VlIHRoZSBtZWR1c2EgdW50aWwgdGhlIHN0YXJ0IG9mIGl0cyBuZXh0IHR1cm4sIHdoZW4gaXQgY2FuIGF2ZXJ0IGl0cyBleWVzIGFnYWluLiBJZiB0aGUgY3JlYXR1cmUgbG9va3MgYXQgdGhlIG1lZHVzYSBpbiB0aGUgbWVhbnRpbWUsIGl0IG11c3QgaW1tZWRpYXRlbHkgbWFrZSB0aGUgc2F2ZS5cXFxcbklmIHRoZSBtZWR1c2Egc2VlcyBpdHNlbGYgcmVmbGVjdGVkIG9uIGEgcG9saXNoZWQgc3VyZmFjZSB3aXRoaW4gMzAgZnQuIG9mIGl0IGFuZCBpbiBhbiBhcmVhIG9mIGJyaWdodCBsaWdodCwgdGhlIG1lZHVzYSBpcywgZHVlIHRvIGl0cyBjdXJzZSwgYWZmZWN0ZWQgYnkgaXRzIG93biBnYXplLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJNdWx0aWF0dGFja1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIG1lZHVzYSBtYWtlcyBlaXRoZXIgdGhyZWUgbWVsZWUgYXR0YWNrcyBcdTIwMTQgIG9uZSB3aXRoIGl0cyBzbmFrZSBoYWlyIGFuZCB0d28gd2l0aCBpdHMgc2hvcnRzd29yZCBcdTIwMTQgb3IgdHdvIHJhbmdlZCBhdHRhY2tzIHdpdGggaXRzIGxvbmdib3cuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiU25ha2UgSGFpclwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzUgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIGNyZWF0dXJlLiBIaXQ6IDQgKDFkNCArIDIpIHBpZXJjaW5nIGRhbWFnZSBwbHVzIDE0ICg0ZDYpIHBvaXNvbiBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA1LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjFkNFwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogMlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlNob3J0c3dvcmRcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs1IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogNSAoMWQ2ICsgMikgcGllcmNpbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNSxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIxZDZcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJMb25nYm93XCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJSYW5nZWQgV2VhcG9uIEF0dGFjazogKzUgdG8gaGl0LCByYW5nZSAxNTAvNjAwIGZ0Liwgb25lIHRhcmdldC4gSGl0OiA2ICgxZDggKyAyKSBwaWVyY2luZyBkYW1hZ2UgcGx1cyA3ICgyZDYpIHBvaXNvbiBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA1LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjJkNlwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJNZXJmb2xrXCIsXG4gICAgICAgIHNpemU6IFwiTWVkaXVtXCIsXG4gICAgICAgIHR5cGU6IFwiaHVtYW5vaWRcIixcbiAgICAgICAgc3VidHlwZTogXCJtZXJmb2xrXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJuZXV0cmFsXCIsXG4gICAgICAgIGFjOiAxMSxcbiAgICAgICAgaHA6IDExLFxuICAgICAgICBoaXRfZGljZTogXCIyZDggKyAyXCIsXG4gICAgICAgIHNwZWVkOiBcIjEwIGZ0Liwgc3dpbSA0MCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsxMCwgMTMsIDEyLCAxMSwgMTEsIDEyXSxcbiAgICAgICAgc2tpbGxzYXZlczogW3sgcGVyY2VwdGlvbjogMiB9XSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIHNlbnNlczogXCJwYXNzaXZlIFBlcmNlcHRpb24gMTJcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcIkFxdWFuLCBDb21tb25cIixcbiAgICAgICAgY3I6IFwiMS84XCIsXG4gICAgICAgIHRyYWl0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQW1waGliaW91c1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIG1lcmZvbGsgY2FuIGJyZWF0aGUgYWlyIGFuZCB3YXRlci5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiU3BlYXJcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIG9yIFJhbmdlZCBXZWFwb24gQXR0YWNrOiArMiB0byBoaXQsIHJlYWNoIDUgZnQuIG9yIHJhbmdlIDIwLzYwIGZ0Liwgb25lIHRhcmdldC4gSGl0OiAzICgxZDYpIHBpZXJjaW5nIGRhbWFnZSwgb3IgNCAoMWQ4KSBwaWVyY2luZyBkYW1hZ2UgaWYgdXNlZCB3aXRoIHR3byBoYW5kcyB0byBtYWtlIGEgbWVsZWUgYXR0YWNrLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIxZDZcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiTWVycm93XCIsXG4gICAgICAgIHNpemU6IFwiTGFyZ2VcIixcbiAgICAgICAgdHlwZTogXCJtb25zdHJvc2l0eVwiLFxuICAgICAgICBzdWJ0eXBlOiBcIlwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwiY2hhb3RpYyBldmlsXCIsXG4gICAgICAgIGFjOiAxMyxcbiAgICAgICAgaHA6IDQ1LFxuICAgICAgICBoaXRfZGljZTogXCI2ZDEwICsgMTJcIixcbiAgICAgICAgc3BlZWQ6IFwiMTAgZnQuLCBzd2ltIDQwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzE4LCAxMCwgMTUsIDgsIDEwLCA5XSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIHNlbnNlczogXCJkYXJrdmlzaW9uIDYwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDEwXCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJBYnlzc2FsLCBBcXVhblwiLFxuICAgICAgICBjcjogXCIyXCIsXG4gICAgICAgIHRyYWl0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQW1waGliaW91c1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIG1lcnJvdyBjYW4gYnJlYXRoZSBhaXIgYW5kIHdhdGVyLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJNdWx0aWF0dGFja1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIG1lcnJvdyBtYWtlcyB0d28gYXR0YWNrczogb25lIHdpdGggaXRzIGJpdGUgYW5kIG9uZSB3aXRoIGl0cyBjbGF3cyBvciBoYXJwb29uLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkJpdGVcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs2IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogOCAoMWQ4ICsgNCkgcGllcmNpbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIxZDhcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDRcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJDbGF3c1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzYgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiA5ICgyZDQgKyA0KSBzbGFzaGluZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA2LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjJkNFwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogNFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkhhcnBvb25cIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIG9yIFJhbmdlZCBXZWFwb24gQXR0YWNrOiArNiB0byBoaXQsIHJlYWNoIDUgZnQuIG9yIHJhbmdlIDIwLzYwIGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxMSAoMmQ2ICsgNCkgcGllcmNpbmcgZGFtYWdlLiBJZiB0aGUgdGFyZ2V0IGlzIGEgSHVnZSBvciBzbWFsbGVyIGNyZWF0dXJlLCBpdCBtdXN0IHN1Y2NlZWQgb24gYSBTdHJlbmd0aCBjb250ZXN0IGFnYWluc3QgdGhlIG1lcnJvdyBvciBiZSBwdWxsZWQgdXAgdG8gMjAgZmVldCB0b3dhcmQgdGhlIG1lcnJvdy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDYsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMmQ2XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiA0XG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJNaW1pY1wiLFxuICAgICAgICBzaXplOiBcIk1lZGl1bVwiLFxuICAgICAgICB0eXBlOiBcIm1vbnN0cm9zaXR5XCIsXG4gICAgICAgIHN1YnR5cGU6IFwic2hhcGVjaGFuZ2VyXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJuZXV0cmFsXCIsXG4gICAgICAgIGFjOiAxMixcbiAgICAgICAgaHA6IDU4LFxuICAgICAgICBoaXRfZGljZTogXCI5ZDggKyAxN1wiLFxuICAgICAgICBzcGVlZDogXCIxNSBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsxNywgMTIsIDE1LCA1LCAxMywgOF0sXG4gICAgICAgIHNraWxsc2F2ZXM6IFt7IHN0ZWFsdGg6IDUgfV0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwiYWNpZFwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJwcm9uZVwiLFxuICAgICAgICBzZW5zZXM6IFwiZGFya3Zpc2lvbiA2MCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxMVwiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiXCIsXG4gICAgICAgIGNyOiBcIjJcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJTaGFwZWNoYW5nZXJcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBtaW1pYyBjYW4gdXNlIGl0cyBhY3Rpb24gdG8gcG9seW1vcnBoIGludG8gYW4gb2JqZWN0IG9yIGJhY2sgaW50byBpdHMgdHJ1ZSwgYW1vcnBob3VzIGZvcm0uIEl0cyBzdGF0aXN0aWNzIGFyZSB0aGUgc2FtZSBpbiBlYWNoIGZvcm0uIEFueSBlcXVpcG1lbnQgaXQgaXMgd2VhcmluZyBvciBjYXJyeWluZyBpc24gJ3QgdHJhbnNmb3JtZWQuIEl0IHJldmVydHMgdG8gaXRzIHRydWUgZm9ybSBpZiBpdCBkaWVzLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkFkaGVzaXZlIChPYmplY3QgRm9ybSBPbmx5KVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIG1pbWljIGFkaGVyZXMgdG8gYW55dGhpbmcgdGhhdCB0b3VjaGVzIGl0LiBBIEh1Z2Ugb3Igc21hbGxlciBjcmVhdHVyZSBhZGhlcmVkIHRvIHRoZSBtaW1pYyBpcyBhbHNvIGdyYXBwbGVkIGJ5IGl0IChlc2NhcGUgREMgMTMpLiBBYmlsaXR5IGNoZWNrcyBtYWRlIHRvIGVzY2FwZSB0aGlzIGdyYXBwbGUgaGF2ZSBkaXNhZHZhbnRhZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiRmFsc2UgQXBwZWFyYW5jZSAoT2JqZWN0IEZvcm0gT25seSlcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIldoaWxlIHRoZSBtaW1pYyByZW1haW5zIG1vdGlvbmxlc3MsIGl0IGlzIGluZGlzdGluZ3Vpc2hhYmxlIGZyb20gYW4gb3JkaW5hcnkgb2JqZWN0LlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkdyYXBwbGVyXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgbWltaWMgaGFzIGFkdmFudGFnZSBvbiBhdHRhY2sgcm9sbHMgYWdhaW5zdCBhbnkgY3JlYXR1cmUgZ3JhcHBsZWQgYnkgaXQuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlBzZXVkb3BvZFwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzUgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiA3ICgxZDggKyAzKSBibHVkZ2VvbmluZyBkYW1hZ2UuIElmIHRoZSBtaW1pYyBpcyBpbiBvYmplY3QgZm9ybSwgdGhlIHRhcmdldCBpcyBzdWJqZWN0ZWQgdG8gaXRzIEFkaGVzaXZlIHRyYWl0LlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNSxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIxZDhcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDNcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJCaXRlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNSB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDcgKDFkOCArIDMpIHBpZXJjaW5nIGRhbWFnZSBwbHVzIDQgKDFkOCkgYWNpZCBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA1LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjFkOCArIDFkOFwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogM1xuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiTWlub3RhdXJcIixcbiAgICAgICAgc2l6ZTogXCJMYXJnZVwiLFxuICAgICAgICB0eXBlOiBcIm1vbnN0cm9zaXR5XCIsXG4gICAgICAgIHN1YnR5cGU6IFwiXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJjaGFvdGljIGV2aWxcIixcbiAgICAgICAgYWM6IDE0LFxuICAgICAgICBocDogNzYsXG4gICAgICAgIGhpdF9kaWNlOiBcIjlkMTAgKyAyNlwiLFxuICAgICAgICBzcGVlZDogXCI0MCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsxOCwgMTEsIDE2LCA2LCAxNiwgOV0sXG4gICAgICAgIHNraWxsc2F2ZXM6IFt7IHBlcmNlcHRpb246IDcgfV0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBzZW5zZXM6IFwiZGFya3Zpc2lvbiA2MCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxN1wiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiQWJ5c3NhbFwiLFxuICAgICAgICBjcjogXCIzXCIsXG4gICAgICAgIHRyYWl0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQ2hhcmdlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJJZiB0aGUgbWlub3RhdXIgbW92ZXMgYXQgbGVhc3QgMTAgZnQuIHN0cmFpZ2h0IHRvd2FyZCBhIHRhcmdldCBhbmQgdGhlbiBoaXRzIGl0IHdpdGggYSBnb3JlIGF0dGFjayBvbiB0aGUgc2FtZSB0dXJuLCB0aGUgdGFyZ2V0IHRha2VzIGFuIGV4dHJhIDkgKDJkOCkgcGllcmNpbmcgZGFtYWdlLiBJZiB0aGUgdGFyZ2V0IGlzIGEgY3JlYXR1cmUsIGl0IG11c3Qgc3VjY2VlZCBvbiBhIERDIDE0IFN0cmVuZ3RoIHNhdmluZyB0aHJvdyBvciBiZSBwdXNoZWQgdXAgdG8gMTAgZnQuIGF3YXkgYW5kIGtub2NrZWQgcHJvbmUuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjJkOFwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTGFieXJpbnRoaW5lIFJlY2FsbFwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIG1pbm90YXVyIGNhbiBwZXJmZWN0bHkgcmVjYWxsIGFueSBwYXRoIGl0IGhhcyB0cmF2ZWxlZC5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJSZWNrbGVzc1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiQXQgdGhlIHN0YXJ0IG9mIGl0cyB0dXJuLCB0aGUgbWlub3RhdXIgY2FuIGdhaW4gYWR2YW50YWdlIG9uIGFsbCBtZWxlZSB3ZWFwb24gYXR0YWNrIHJvbGxzIGl0IG1ha2VzIGR1cmluZyB0aGF0IHR1cm4sIGJ1dCBhdHRhY2sgcm9sbHMgYWdhaW5zdCBpdCBoYXZlIGFkdmFudGFnZSB1bnRpbCB0aGUgc3RhcnQgb2YgaXRzIG5leHQgdHVybi5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiR3JlYXRheGVcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs2IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTcgKDJkMTIgKyA0KSBzbGFzaGluZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA2LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjJkMTJcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDRcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJHb3JlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNiB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDEzICgyZDggKyA0KSBwaWVyY2luZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA2LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjJkOFwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogNFxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiTWlub3RhdXIgU2tlbGV0b25cIixcbiAgICAgICAgc2l6ZTogXCJMYXJnZVwiLFxuICAgICAgICB0eXBlOiBcInVuZGVhZFwiLFxuICAgICAgICBzdWJ0eXBlOiBcIlwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwibGF3ZnVsIGV2aWxcIixcbiAgICAgICAgYWM6IDEyLFxuICAgICAgICBocDogNjcsXG4gICAgICAgIGhpdF9kaWNlOiBcIjlkMTAgKyAxN1wiLFxuICAgICAgICBzcGVlZDogXCI0MCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsxOCwgMTEsIDE1LCA2LCA4LCA1XSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJibHVkZ2VvbmluZ1wiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcInBvaXNvblwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJleGhhdXN0aW9uLCBwb2lzb25lZFwiLFxuICAgICAgICBzZW5zZXM6IFwiZGFya3Zpc2lvbiA2MCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiA5XCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJ1bmRlcnN0YW5kcyBBYnlzc2FsIGJ1dCBjYW4ndCBzcGVha1wiLFxuICAgICAgICBjcjogXCIyXCIsXG4gICAgICAgIHRyYWl0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQ2hhcmdlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJJZiB0aGUgc2tlbGV0b24gbW92ZXMgYXQgbGVhc3QgMTAgZmVldCBzdHJhaWdodCB0b3dhcmQgYSB0YXJnZXQgYW5kIHRoZW4gaGl0cyBpdCB3aXRoIGEgZ29yZSBhdHRhY2sgb24gdGhlIHNhbWUgdHVybiwgdGhlIHRhcmdldCB0YWtlcyBhbiBleHRyYSA5ICgyZDgpIHBpZXJjaW5nIGRhbWFnZS4gSWYgdGhlIHRhcmdldCBpcyBhIGNyZWF0dXJlLCBpdCBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxNCBTdHJlbmd0aCBzYXZpbmcgdGhyb3cgb3IgYmUgcHVzaGVkIHVwIHRvIDEwIGZlZXQgYXdheSBhbmQga25vY2tlZCBwcm9uZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDAsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMmQ4XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiR3JlYXRheGVcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs2IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTcgKDJkMTIgKyA0KSBzbGFzaGluZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA2LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjJkMTJcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDRcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJHb3JlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNiB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDEzICgyZDggKyA0KSBwaWVyY2luZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA2LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjJkOFwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogNFxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiTXVsZVwiLFxuICAgICAgICBzaXplOiBcIk1lZGl1bVwiLFxuICAgICAgICB0eXBlOiBcImJlYXN0XCIsXG4gICAgICAgIHN1YnR5cGU6IFwiXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcbiAgICAgICAgYWM6IDEwLFxuICAgICAgICBocDogMTEsXG4gICAgICAgIGhpdF9kaWNlOiBcIjJkOCArIDJcIixcbiAgICAgICAgc3BlZWQ6IFwiNDAgZnQuXCIsXG4gICAgICAgIHN0YXRzOiBbMTQsIDEwLCAxMywgMiwgMTAsIDVdLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcbiAgICAgICAgc2Vuc2VzOiBcInBhc3NpdmUgUGVyY2VwdGlvbiAxMFwiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiXCIsXG4gICAgICAgIGNyOiBcIjEvOFwiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkJlYXN0IG9mIEJ1cmRlblwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIG11bGUgaXMgY29uc2lkZXJlZCB0byBiZSBhIExhcmdlIGFuaW1hbCBmb3IgdGhlIHB1cnBvc2Ugb2YgZGV0ZXJtaW5pbmcgaXRzIGNhcnJ5aW5nIGNhcGFjaXR5LlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlN1cmUtRm9vdGVkXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgbXVsZSBoYXMgYWR2YW50YWdlIG9uIFN0cmVuZ3RoIGFuZCBEZXh0ZXJpdHkgc2F2aW5nIHRocm93cyBtYWRlIGFnYWluc3QgZWZmZWN0cyB0aGF0IHdvdWxkIGtub2NrIGl0IHByb25lLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJIb292ZXNcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICsyIHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogNCAoMWQ0ICsgMikgYmx1ZGdlb25pbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIxZDRcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIk11bW15XCIsXG4gICAgICAgIHNpemU6IFwiTWVkaXVtXCIsXG4gICAgICAgIHR5cGU6IFwidW5kZWFkXCIsXG4gICAgICAgIHN1YnR5cGU6IFwiXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJsYXdmdWwgZXZpbFwiLFxuICAgICAgICBhYzogMTEsXG4gICAgICAgIGhwOiA1OCxcbiAgICAgICAgaGl0X2RpY2U6IFwiOWQ4ICsgMTdcIixcbiAgICAgICAgc3BlZWQ6IFwiMjAgZnQuXCIsXG4gICAgICAgIHN0YXRzOiBbMTYsIDgsIDE1LCA2LCAxMCwgMTJdLFxuICAgICAgICBzYXZlczogW3sgd2lzZG9tOiAyIH1dLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcImZpcmVcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczpcbiAgICAgICAgICAgIFwiYmx1ZGdlb25pbmcsIHBpZXJjaW5nLCBhbmQgc2xhc2hpbmcgZnJvbSBub25tYWdpY2FsIHdlYXBvbnNcIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwibmVjcm90aWMsIHBvaXNvbmVkXCIsXG4gICAgICAgIHNlbnNlczogXCJkYXJrdmlzaW9uIDYwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDEwXCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJ0aGUgbGFuZ3VhZ2VzIGl0IGtuZXcgaW4gbGlmZVwiLFxuICAgICAgICBjcjogXCIzXCIsXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgbXVtbXkgY2FuIHVzZSBpdHMgRHJlYWRmdWwgR2xhcmUgYW5kIG1ha2VzIG9uZSBhdHRhY2sgd2l0aCBpdHMgcm90dGluZyBmaXN0LlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlJvdHRpbmcgRmlzdFwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzUgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxMCAoMmQ2ICsgMykgYmx1ZGdlb25pbmcgZGFtYWdlIHBsdXMgMTAgKDNkNikgbmVjcm90aWMgZGFtYWdlLiBJZiB0aGUgdGFyZ2V0IGlzIGEgY3JlYXR1cmUsIGl0IG11c3Qgc3VjY2VlZCBvbiBhIERDIDEyIENvbnN0aXR1dGlvbiBzYXZpbmcgdGhyb3cgb3IgYmUgY3Vyc2VkIHdpdGggbXVtbXkgcm90LiBUaGUgY3Vyc2VkIHRhcmdldCBjYW4ndCByZWdhaW4gaGl0IHBvaW50cywgYW5kIGl0cyBoaXQgcG9pbnQgbWF4aW11bSBkZWNyZWFzZXMgYnkgMTAgKDNkNikgZm9yIGV2ZXJ5IDI0IGhvdXJzIHRoYXQgZWxhcHNlLiBJZiB0aGUgY3Vyc2UgcmVkdWNlcyB0aGUgdGFyZ2V0J3MgaGl0IHBvaW50IG1heGltdW0gdG8gMCwgdGhlIHRhcmdldCBkaWVzLCBhbmQgaXRzIGJvZHkgdHVybnMgdG8gZHVzdC4gVGhlIGN1cnNlIGxhc3RzIHVudGlsIHJlbW92ZWQgYnkgdGhlIHJlbW92ZSBjdXJzZSBzcGVsbCBvciBvdGhlciBtYWdpYy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDUsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMmQ2XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiAzXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiRHJlYWRmdWwgR2xhcmVcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBtdW1teSB0YXJnZXRzIG9uZSBjcmVhdHVyZSBpdCBjYW4gc2VlIHdpdGhpbiA2MCBmdC4gb2YgaXQuIElmIHRoZSB0YXJnZXQgY2FuIHNlZSB0aGUgbXVtbXksIGl0IG11c3Qgc3VjY2VlZCBvbiBhIERDIDExIFdpc2RvbSBzYXZpbmcgdGhyb3cgYWdhaW5zdCB0aGlzIG1hZ2ljIG9yIGJlY29tZSBmcmlnaHRlbmVkIHVudGlsIHRoZSBlbmQgb2YgdGhlIG11bW15J3MgbmV4dCB0dXJuLiBJZiB0aGUgdGFyZ2V0IGZhaWxzIHRoZSBzYXZpbmcgdGhyb3cgYnkgNSBvciBtb3JlLCBpdCBpcyBhbHNvIHBhcmFseXplZCBmb3IgdGhlIHNhbWUgZHVyYXRpb24uIEEgdGFyZ2V0IHRoYXQgc3VjY2VlZHMgb24gdGhlIHNhdmluZyB0aHJvdyBpcyBpbW11bmUgdG8gdGhlIERyZWFkZnVsIEdsYXJlIG9mIGFsbCBtdW1taWVzIChidXQgbm90IG11bW15IGxvcmRzKSBmb3IgdGhlIG5leHQgMjQgaG91cnMuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJNdW1teSBMb3JkXCIsXG4gICAgICAgIHNpemU6IFwiTWVkaXVtXCIsXG4gICAgICAgIHR5cGU6IFwidW5kZWFkXCIsXG4gICAgICAgIHN1YnR5cGU6IFwiXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJsYXdmdWwgZXZpbFwiLFxuICAgICAgICBhYzogMTcsXG4gICAgICAgIGhwOiA5NyxcbiAgICAgICAgaGl0X2RpY2U6IFwiMTNkOCArIDM4XCIsXG4gICAgICAgIHNwZWVkOiBcIjIwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzE4LCAxMCwgMTcsIDExLCAxOCwgMTZdLFxuICAgICAgICBzYXZlczogW1xuICAgICAgICAgICAgeyBjb25zdGl0dXRpb246IDggfSxcbiAgICAgICAgICAgIHsgaW50ZWxsaWdlbmNlOiA1IH0sXG4gICAgICAgICAgICB7IHdpc2RvbTogOSB9LFxuICAgICAgICAgICAgeyBjaGFyaXNtYTogOCB9XG4gICAgICAgIF0sXG4gICAgICAgIHNraWxsc2F2ZXM6IFt7IGhpc3Rvcnk6IDUgfSwgeyByZWxpZ2lvbjogNSB9XSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJibHVkZ2VvbmluZ1wiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOlxuICAgICAgICAgICAgXCJuZWNyb3RpYywgcG9pc29uOyBibHVkZ2VvbmluZywgcGllcmNpbmcsIGFuZCBzbGFzaGluZyBmcm9tIG5vbm1hZ2ljYWwgd2VhcG9uc1wiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczpcbiAgICAgICAgICAgIFwiY2hhcm1lZCwgZXhoYXVzdGlvbiwgZnJpZ2h0ZW5lZCwgcGFyYWx5emVkLCBwb2lzb25lZFwiLFxuICAgICAgICBzZW5zZXM6IFwiZGFya3Zpc2lvbiA2MCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxNFwiLFxuICAgICAgICBsYW5ndWFnZXM6IFwidGhlIGxhbmd1YWdlcyBpdCBrbmV3IGluIGxpZmVcIixcbiAgICAgICAgY3I6IFwiMTVcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJNYWdpYyBSZXNpc3RhbmNlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgbXVtbXkgbG9yZCBoYXMgYWR2YW50YWdlIG9uIHNhdmluZyB0aHJvd3MgYWdhaW5zdCBzcGVsbHMgYW5kIG90aGVyIG1hZ2ljYWwgZWZmZWN0cy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJSZWp1dmVuYXRpb25cIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIkEgZGVzdHJveWVkIG11bW15IGxvcmQgZ2FpbnMgYSBuZXcgYm9keSBpbiAyNCBob3VycyBpZiBpdHMgaGVhcnQgaXMgaW50YWN0LCByZWdhaW5pbmcgYWxsIGl0cyBoaXQgcG9pbnRzIGFuZCBiZWNvbWluZyBhY3RpdmUgYWdhaW4uIFRoZSBuZXcgYm9keSBhcHBlYXJzIHdpdGhpbiA1IGZlZXQgb2YgdGhlIG11bW15IGxvcmQncyBoZWFydC5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBtdW1teSBjYW4gdXNlIGl0cyBEcmVhZGZ1bCBHbGFyZSBhbmQgbWFrZXMgb25lIGF0dGFjayB3aXRoIGl0cyByb3R0aW5nIGZpc3QuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiUm90dGluZyBGaXN0XCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArOSB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDE0ICgzZDYgKyA0KSBibHVkZ2VvbmluZyBkYW1hZ2UgcGx1cyAyMSAoNmQ2KSBuZWNyb3RpYyBkYW1hZ2UuIElmIHRoZSB0YXJnZXQgaXMgYSBjcmVhdHVyZSwgaXQgbXVzdCBzdWNjZWVkIG9uIGEgREMgMTYgQ29uc3RpdHV0aW9uIHNhdmluZyB0aHJvdyBvciBiZSBjdXJzZWQgd2l0aCBtdW1teSByb3QuIFRoZSBjdXJzZWQgdGFyZ2V0IGNhbid0IHJlZ2FpbiBoaXQgcG9pbnRzLCBhbmQgaXRzIGhpdCBwb2ludCBtYXhpbXVtIGRlY3JlYXNlcyBieSAxMCAoM2Q2KSBmb3IgZXZlcnkgMjQgaG91cnMgdGhhdCBlbGFwc2UuIElmIHRoZSBjdXJzZSByZWR1Y2VzIHRoZSB0YXJnZXQncyBoaXQgcG9pbnQgbWF4aW11bSB0byAwLCB0aGUgdGFyZ2V0IGRpZXMsIGFuZCBpdHMgYm9keSB0dXJucyB0byBkdXN0LiBUaGUgY3Vyc2UgbGFzdHMgdW50aWwgcmVtb3ZlZCBieSB0aGUgcmVtb3ZlIGN1cnNlIHNwZWxsIG9yIG90aGVyIG1hZ2ljLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogOSxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIzZDYgKyA2ZDZcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDRcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJEcmVhZGZ1bCBHbGFyZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIG11bW15IGxvcmQgdGFyZ2V0cyBvbmUgY3JlYXR1cmUgaXQgY2FuIHNlZSB3aXRoaW4gNjAgZmVldCBvZiBpdC4gSWYgdGhlIHRhcmdldCBjYW4gc2VlIHRoZSBtdW1teSBsb3JkLCBpdCBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxNiBXaXNkb20gc2F2aW5nIHRocm93IGFnYWluc3QgdGhpcyBtYWdpYyBvciBiZWNvbWUgZnJpZ2h0ZW5lZCB1bnRpbCB0aGUgZW5kIG9mIHRoZSBtdW1teSdzIG5leHQgdHVybi4gSWYgdGhlIHRhcmdldCBmYWlscyB0aGUgc2F2aW5nIHRocm93IGJ5IDUgb3IgbW9yZSwgaXQgaXMgYWxzbyBwYXJhbHl6ZWQgZm9yIHRoZSBzYW1lIGR1cmF0aW9uLiBBIHRhcmdldCB0aGF0IHN1Y2NlZWRzIG9uIHRoZSBzYXZpbmcgdGhyb3cgaXMgaW1tdW5lIHRvIHRoZSBEcmVhZGZ1bCBHbGFyZSBvZiBhbGwgbXVtbWllcyBhbmQgbXVtbXkgbG9yZHMgZm9yIHRoZSBuZXh0IDI0IGhvdXJzLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBsZWdlbmRhcnlfYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQXR0YWNrXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgbXVtbXkgbG9yZCBtYWtlcyBvbmUgYXR0YWNrIHdpdGggaXRzIHJvdHRpbmcgZmlzdCBvciB1c2VzIGl0cyBEcmVhZGZ1bCBHbGFyZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJCbGluZGluZyBEdXN0XCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJCbGluZGluZyBkdXN0IGFuZCBzYW5kIHN3aXJscyBtYWdpY2FsbHkgYXJvdW5kIHRoZSBtdW1teSBsb3JkLiBFYWNoIGNyZWF0dXJlIHdpdGhpbiA1IGZlZXQgb2YgdGhlIG11bW15IGxvcmQgbXVzdCBzdWNjZWVkIG9uIGEgREMgMTYgQ29uc3RpdHV0aW9uIHNhdmluZyB0aHJvdyBvciBiZSBibGluZGVkIHVudGlsIHRoZSBlbmQgb2YgdGhlIGNyZWF0dXJlJ3MgbmV4dCB0dXJuLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkJsYXNwaGVtb3VzIFdvcmQgKENvc3RzIDIgQWN0aW9ucylcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBtdW1teSBsb3JkIHV0dGVycyBhIGJsYXNwaGVtb3VzIHdvcmQuIEVhY2ggbm9uLXVuZGVhZCBjcmVhdHVyZSB3aXRoaW4gMTAgZmVldCBvZiB0aGUgbXVtbXkgbG9yZCB0aGF0IGNhbiBoZWFyIHRoZSBtYWdpY2FsIHV0dGVyYW5jZSBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxNiBDb25zdGl0dXRpb24gc2F2aW5nIHRocm93IG9yIGJlIHN0dW5uZWQgdW50aWwgdGhlIGVuZCBvZiB0aGUgbXVtbXkgbG9yZCdzIG5leHQgdHVybi5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJDaGFubmVsIE5lZ2F0aXZlIEVuZXJneSAoQ29zdHMgMiBBY3Rpb25zKVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIG11bW15IGxvcmQgbWFnaWNhbGx5IHVubGVhc2hlcyBuZWdhdGl2ZSBlbmVyZ3kuIENyZWF0dXJlcyB3aXRoaW4gNjAgZmVldCBvZiB0aGUgbXVtbXkgbG9yZCwgaW5jbHVkaW5nIG9uZXMgYmVoaW5kIGJhcnJpZXJzIGFuZCBhcm91bmQgY29ybmVycywgY2FuJ3QgcmVnYWluIGhpdCBwb2ludHMgdW50aWwgdGhlIGVuZCBvZiB0aGUgbXVtbXkgbG9yZCdzIG5leHQgdHVybi5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJXaGlybHdpbmQgb2YgU2FuZCAoQ29zdHMgMiBBY3Rpb25zKVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIG11bW15IGxvcmQgbWFnaWNhbGx5IHRyYW5zZm9ybXMgaW50byBhIHdoaXJsd2luZCBvZiBzYW5kLCBtb3ZlcyB1cCB0byA2MCBmZWV0LCBhbmQgcmV2ZXJ0cyB0byBpdHMgbm9ybWFsIGZvcm0uIFdoaWxlIGluIHdoaXJsd2luZCBmb3JtLCB0aGUgbXVtbXkgbG9yZCBpcyBpbW11bmUgdG8gYWxsIGRhbWFnZSwgYW5kIGl0IGNhbid0IGJlIGdyYXBwbGVkLCBwZXRyaWZpZWQsIGtub2NrZWQgcHJvbmUsIHJlc3RyYWluZWQsIG9yIHN0dW5uZWQuIEVxdWlwbWVudCB3b3JuIG9yIGNhcnJpZWQgYnkgdGhlIG11bW15IGxvcmQgcmVtYWluIGluIGl0cyBwb3NzZXNzaW9uLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBzcGVsbHM6IFtcbiAgICAgICAgICAgIFwiVGhlIG11bW15IGxvcmQgaXMgYSAxMHRoLWxldmVsIHNwZWxsY2FzdGVyLiBJdHMgc3BlbGxjYXN0aW5nIGFiaWxpdHkgaXMgV2lzZG9tIChzcGVsbCBzYXZlIERDIDE3LCArOSB0byBoaXQgd2l0aCBzcGVsbCBhdHRhY2tzKS4gVGhlIG11bW15IGxvcmQgaGFzIHRoZSBmb2xsb3dpbmcgY2xlcmljIHNwZWxscyBwcmVwYXJlZDpcIixcbiAgICAgICAgICAgIHsgXCJDYW50cmlwcyAoYXQgd2lsbClcIjogXCJzYWNyZWQgZmxhbWUsIHRoYXVtYXR1cmd5XCIgfSxcbiAgICAgICAgICAgIHsgXCIxc3QgbGV2ZWwgKDQgc2xvdHMpXCI6IFwiY29tbWFuZCwgZ3VpZGluZyBib2x0LCBzaGllbGQgb2YgZmFpdGhcIiB9LFxuICAgICAgICAgICAgeyBcIjJuZCBsZXZlbCAoMyBzbG90cylcIjogXCJob2xkIHBlcnNvbiwgc2lsZW5jZSwgc3Bpcml0dWFsIHdlYXBvblwiIH0sXG4gICAgICAgICAgICB7IFwiM3JkIGxldmVsICgzIHNsb3RzKVwiOiBcImFuaW1hdGUgZGVhZCwgZGlzcGVsIG1hZ2ljXCIgfSxcbiAgICAgICAgICAgIHsgXCI0dGggbGV2ZWwgKDMgc2xvdHMpXCI6IFwiZGl2aW5hdGlvbiwgZ3VhcmRpYW4gb2YgZmFpdGhcIiB9LFxuICAgICAgICAgICAgeyBcIjV0aCBsZXZlbCAoMiBzbG90cylcIjogXCJjb250YWdpb24sIGluc2VjdCBwbGFndWVcIiB9LFxuICAgICAgICAgICAgeyBcIjZ0aCBsZXZlbCAoMSBzbG90KVwiOiBcImhhcm1cIiB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJOYWxmZXNobmVlXCIsXG4gICAgICAgIHNpemU6IFwiTGFyZ2VcIixcbiAgICAgICAgdHlwZTogXCJmaWVuZFwiLFxuICAgICAgICBzdWJ0eXBlOiBcImRlbW9uXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJjaGFvdGljIGV2aWxcIixcbiAgICAgICAgYWM6IDE4LFxuICAgICAgICBocDogMTg0LFxuICAgICAgICBoaXRfZGljZTogXCIxNmQxMCArIDk2XCIsXG4gICAgICAgIHNwZWVkOiBcIjIwIGZ0LiwgZmx5IDMwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzIxLCAxMCwgMjIsIDE5LCAxMiwgMTVdLFxuICAgICAgICBzYXZlczogW1xuICAgICAgICAgICAgeyBjb25zdGl0dXRpb246IDExIH0sXG4gICAgICAgICAgICB7IGludGVsbGlnZW5jZTogOSB9LFxuICAgICAgICAgICAgeyB3aXNkb206IDYgfSxcbiAgICAgICAgICAgIHsgY2hhcmlzbWE6IDcgfVxuICAgICAgICBdLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6XG4gICAgICAgICAgICBcImNvbGQsIGZpcmUsIGxpZ2h0bmluZzsgYmx1ZGdlb25pbmcsIHBpZXJjaW5nLCBhbmQgc2xhc2hpbmcgZnJvbSBub25tYWdpY2FsIHdlYXBvbnNcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwicG9pc29uXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOiBcInBvaXNvbmVkXCIsXG4gICAgICAgIHNlbnNlczogXCJ0cnVlc2lnaHQgMTIwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDExXCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJBYnlzc2FsLCB0ZWxlcGF0aHkgMTIwIGZ0LlwiLFxuICAgICAgICBjcjogXCIxM1wiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk1hZ2ljIFJlc2lzdGFuY2VcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBuYWxmZXNobmVlIGhhcyBhZHZhbnRhZ2Ugb24gc2F2aW5nIHRocm93cyBhZ2FpbnN0IHNwZWxscyBhbmQgb3RoZXIgbWFnaWNhbCBlZmZlY3RzLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJNdWx0aWF0dGFja1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIG5hbGZlc2huZWUgdXNlcyBIb3Jyb3IgTmltYnVzIGlmIGl0IGNhbi4gIEl0IHRoZW4gbWFrZXMgdGhyZWUgYXR0YWNrczogb25lIHdpdGggaXRzIGJpdGUgYW5kIHR3byB3aXRoIGl0cyBjbGF3cy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJCaXRlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMTAgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAzMiAoNWQxMCArIDUpIHBpZXJjaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDEwLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjVkMTBcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJDbGF3XCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMTAgdG8gaGl0LCByZWFjaCAxMCBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTUgKDNkNiArIDUpIHNsYXNoaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDEwLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjNkNlwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogNVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkhvcnJvciBOaW1idXMgKFJlY2hhcmdlIDUtNilcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBuYWxmZXNobmVlIG1hZ2ljYWxseSBlbWl0cyBzY2ludGlsbGF0aW5nLCBtdWx0aWNvbG9yZWQgbGlnaHQuIEVhY2ggY3JlYXR1cmUgd2l0aGluIDE1IGZlZXQgb2YgdGhlIG5hbGZlc2huZWUgdGhhdCBjYW4gc2VlIHRoZSBsaWdodCBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxNSBXaXNkb20gc2F2aW5nIHRocm93IG9yIGJlIGZyaWdodGVuZWQgZm9yIDEgbWludXRlLiBBIGNyZWF0dXJlIGNhbiByZXBlYXQgdGhlIHNhdmluZyB0aHJvdyBhdCB0aGUgZW5kIG9mIGVhY2ggb2YgaXRzIHR1cm5zLCBlbmRpbmcgdGhlIGVmZmVjdCBvbiBpdHNlbGYgb24gYSBzdWNjZXNzLiBJZiBhIGNyZWF0dXJlJ3Mgc2F2aW5nIHRocm93IGlzIHN1Y2Nlc3NmdWwgb3IgdGhlIGVmZmVjdCBlbmRzIGZvciBpdCwgdGhlIGNyZWF0dXJlIGlzIGltbXVuZSB0byB0aGUgbmFsZmVzaG5lZSdzIEhvcnJvciBOaW1idXMgZm9yIHRoZSBuZXh0IDI0IGhvdXJzLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlRlbGVwb3J0XCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgbmFsZmVzaG5lZSBtYWdpY2FsbHkgdGVsZXBvcnRzLCBhbG9uZyB3aXRoIGFueSBlcXVpcG1lbnQgaXQgaXMgd2VhcmluZyBvciBjYXJyeWluZywgdXAgdG8gMTIwIGZlZXQgdG8gYW4gdW5vY2N1cGllZCBzcGFjZSBpdCBjYW4gc2VlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlZhcmlhbnQ6IFN1bW1vbiBEZW1vbiAoMS9EYXkpXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZGVtb24gY2hvb3NlcyB3aGF0IHRvIHN1bW1vbiBhbmQgYXR0ZW1wdHMgYSBtYWdpY2FsIHN1bW1vbmluZy5cXFxcbkEgbmFsZmVzaG5lZSBoYXMgYSA1MCBwZXJjZW50IGNoYW5jZSBvZiBzdW1tb25pbmcgMWQ0IHZyb2NrcywgMWQzIGhlenJvdXMsIDFkMiBnbGFicmV6dXMsIG9yIG9uZSBuYWxmZXNobmVlLlxcXFxuQSBzdW1tb25lZCBkZW1vbiBhcHBlYXJzIGluIGFuIHVub2NjdXBpZWQgc3BhY2Ugd2l0aGluIDYwIGZlZXQgb2YgaXRzIHN1bW1vbmVyLCBhY3RzIGFzIGFuIGFsbHkgb2YgaXRzIHN1bW1vbmVyLCBhbmQgY2FuJ3Qgc3VtbW9uIG90aGVyIGRlbW9ucy4gSXQgcmVtYWlucyBmb3IgMSBtaW51dGUsIHVudGlsIGl0IG9yIGl0cyBzdW1tb25lciBkaWVzLCBvciB1bnRpbCBpdHMgc3VtbW9uZXIgZGlzbWlzc2VzIGl0IGFzIGFuIGFjdGlvbi5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIk5pZ2h0IEhhZ1wiLFxuICAgICAgICBzaXplOiBcIk1lZGl1bVwiLFxuICAgICAgICB0eXBlOiBcImZpZW5kXCIsXG4gICAgICAgIHN1YnR5cGU6IFwiXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJuZXV0cmFsIGV2aWxcIixcbiAgICAgICAgYWM6IDE3LFxuICAgICAgICBocDogMTEyLFxuICAgICAgICBoaXRfZGljZTogXCIxNWQ4ICsgNDRcIixcbiAgICAgICAgc3BlZWQ6IFwiMzAgZnQuXCIsXG4gICAgICAgIHN0YXRzOiBbMTgsIDE1LCAxNiwgMTYsIDE0LCAxNl0sXG4gICAgICAgIHNraWxsc2F2ZXM6IFtcbiAgICAgICAgICAgIHsgZGVjZXB0aW9uOiA3IH0sXG4gICAgICAgICAgICB7IGluc2lnaHQ6IDYgfSxcbiAgICAgICAgICAgIHsgcGVyY2VwdGlvbjogNiB9LFxuICAgICAgICAgICAgeyBzdGVhbHRoOiA2IH1cbiAgICAgICAgXSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOlxuICAgICAgICAgICAgXCJjb2xkLCBmaXJlOyBibHVkZ2VvbmluZywgcGllcmNpbmcsIGFuZCBzbGFzaGluZyBmcm9tIG5vbm1hZ2ljYWwgd2VhcG9ucyB0aGF0IGFyZW4ndCBzaWx2ZXJlZFwiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiY2hhcm1lZFwiLFxuICAgICAgICBzZW5zZXM6IFwiZGFya3Zpc2lvbiAxMjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTZcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcIkFieXNzYWwsIENvbW1vbiwgSW5mZXJuYWwsIFByaW1vcmRpYWxcIixcbiAgICAgICAgY3I6IFwiNVwiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIklubmF0ZSBTcGVsbGNhc3RpbmdcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBoYWcncyBpbm5hdGUgc3BlbGxjYXN0aW5nIGFiaWxpdHkgaXMgQ2hhcmlzbWEgKHNwZWxsIHNhdmUgREMgMTQsICs2IHRvIGhpdCB3aXRoIHNwZWxsIGF0dGFja3MpLiBTaGUgY2FuIGlubmF0ZWx5IGNhc3QgdGhlIGZvbGxvd2luZyBzcGVsbHMsIHJlcXVpcmluZyBubyBtYXRlcmlhbCBjb21wb25lbnRzOlxcXFxuXFxcXG5BdCB3aWxsOiBkZXRlY3QgbWFnaWMsIG1hZ2ljIG1pc3NpbGVcXFxcbjIvZGF5IGVhY2g6IHBsYW5lIHNoaWZ0IChzZWxmIG9ubHkpLCByYXkgb2YgZW5mZWVibGVtZW50LCBzbGVlcFwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk1hZ2ljIFJlc2lzdGFuY2VcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBoYWcgaGFzIGFkdmFudGFnZSBvbiBzYXZpbmcgdGhyb3dzIGFnYWluc3Qgc3BlbGxzIGFuZCBvdGhlciBtYWdpY2FsIGVmZmVjdHMuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTmlnaHQgSGFnIEl0ZW1zXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJBIG5pZ2h0IGhhZyBjYXJyaWVzIHR3byB2ZXJ5IHJhcmUgbWFnaWMgaXRlbXMgdGhhdCBzaGUgbXVzdCBjcmFmdCBmb3IgaGVyc2VsZiBJZiBlaXRoZXIgb2JqZWN0IGlzIGxvc3QsIHRoZSBuaWdodCBoYWcgd2lsbCBnbyB0byBncmVhdCBsZW5ndGhzIHRvIHJldHJpZXZlIGl0LCBhcyBjcmVhdGluZyBhIG5ldyB0b29sIHRha2VzIHRpbWUgYW5kIGVmZm9ydC5cXFxcbkhlYXJ0c3RvbmU6IFRoaXMgbHVzdHJvdXMgYmxhY2sgZ2VtIGFsbG93cyBhIG5pZ2h0IGhhZyB0byBiZWNvbWUgZXRoZXJlYWwgd2hpbGUgaXQgaXMgaW4gaGVyIHBvc3Nlc3Npb24uIFRoZSB0b3VjaCBvZiBhIGhlYXJ0c3RvbmUgYWxzbyBjdXJlcyBhbnkgZGlzZWFzZS4gQ3JhZnRpbmcgYSBoZWFydHN0b25lIHRha2VzIDMwIGRheXMuXFxcXG5Tb3VsIEJhZzogV2hlbiBhbiBldmlsIGh1bWFub2lkIGRpZXMgYXMgYSByZXN1bHQgb2YgYSBuaWdodCBoYWcncyBOaWdodG1hcmUgSGF1bnRpbmcsIHRoZSBoYWcgY2F0Y2hlcyB0aGUgc291bCBpbiB0aGlzIGJsYWNrIHNhY2sgbWFkZSBvZiBzdGl0Y2hlZCBmbGVzaC4gQSBzb3VsIGJhZyBjYW4gaG9sZCBvbmx5IG9uZSBldmlsIHNvdWwgYXQgYSB0aW1lLCBhbmQgb25seSB0aGUgbmlnaHQgaGFnIHdobyBjcmFmdGVkIHRoZSBiYWcgY2FuIGNhdGNoIGEgc291bCB3aXRoIGl0LiBDcmFmdGluZyBhIHNvdWwgYmFnIHRha2VzIDcgZGF5cyBhbmQgYSBodW1hbm9pZCBzYWNyaWZpY2UgKHdob3NlIGZsZXNoIGlzIHVzZWQgdG8gbWFrZSB0aGUgYmFnKS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJIYWcgQ292ZW5cIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIldoZW4gaGFncyBtdXN0IHdvcmsgdG9nZXRoZXIsIHRoZXkgZm9ybSBjb3ZlbnMsIGluIHNwaXRlIG9mIHRoZWlyIHNlbGZpc2ggbmF0dXJlcy4gQSBjb3ZlbiBpcyBtYWRlIHVwIG9mIGhhZ3Mgb2YgYW55IHR5cGUsIGFsbCBvZiB3aG9tIGFyZSBlcXVhbHMgd2l0aGluIHRoZSBncm91cC4gSG93ZXZlciwgZWFjaCBvZiB0aGUgaGFncyBjb250aW51ZXMgdG8gZGVzaXJlIG1vcmUgcGVyc29uYWwgcG93ZXIuXFxcXG5BIGNvdmVuIGNvbnNpc3RzIG9mIHRocmVlIGhhZ3Mgc28gdGhhdCBhbnkgYXJndW1lbnRzIGJldHdlZW4gdHdvIGhhZ3MgY2FuIGJlIHNldHRsZWQgYnkgdGhlIHRoaXJkLiBJZiBtb3JlIHRoYW4gdGhyZWUgaGFncyBldmVyIGNvbWUgdG9nZXRoZXIsIGFzIG1pZ2h0IGhhcHBlbiBpZiB0d28gY292ZW5zIGNvbWUgaW50byBjb25mbGljdCwgdGhlIHJlc3VsdCBpcyB1c3VhbGx5IGNoYW9zLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlNoYXJlZCBTcGVsbGNhc3RpbmcgKENvdmVuIE9ubHkpXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJXaGlsZSBhbGwgdGhyZWUgbWVtYmVycyBvZiBhIGhhZyBjb3ZlbiBhcmUgd2l0aGluIDMwIGZlZXQgb2Ygb25lIGFub3RoZXIsIHRoZXkgY2FuIGVhY2ggY2FzdCB0aGUgZm9sbG93aW5nIHNwZWxscyBmcm9tIHRoZSB3aXphcmQncyBzcGVsbCBsaXN0IGJ1dCBtdXN0IHNoYXJlIHRoZSBzcGVsbCBzbG90cyBhbW9uZyB0aGVtc2VsdmVzOlxcXFxuXFxcXG5cdTIwMjIgMXN0IGxldmVsICg0IHNsb3RzKTogaWRlbnRpZnksIHJheSBvZiBzaWNrbmVzc1xcXFxuXHUyMDIyIDJuZCBsZXZlbCAoMyBzbG90cyk6IGhvbGQgcGVyc29uLCBsb2NhdGUgb2JqZWN0XFxcXG5cdTIwMjIgM3JkIGxldmVsICgzIHNsb3RzKTogYmVzdG93IGN1cnNlLCBjb3VudGVyc3BlbGwsIGxpZ2h0bmluZyBib2x0XFxcXG5cdTIwMjIgNHRoIGxldmVsICgzIHNsb3RzKTogcGhhbnRhc21hbCBraWxsZXIsIHBvbHltb3JwaFxcXFxuXHUyMDIyIDV0aCBsZXZlbCAoMiBzbG90cyk6IGNvbnRhY3Qgb3RoZXIgcGxhbmUsIHNjcnlpbmdcXFxcblx1MjAyMiA2dGggbGV2ZWwgKDEgc2xvdCk6IGV5ZSBiaXRlXFxcXG5cXFxcbkZvciBjYXN0aW5nIHRoZXNlIHNwZWxscywgZWFjaCBoYWcgaXMgYSAxMnRoLWxldmVsIHNwZWxsY2FzdGVyIHRoYXQgdXNlcyBJbnRlbGxpZ2VuY2UgYXMgaGVyIHNwZWxsY2FzdGluZyBhYmlsaXR5LiBUaGUgc3BlbGwgc2F2ZSBEQyBpcyAxMit0aGUgaGFnJ3MgSW50ZWxsaWdlbmNlIG1vZGlmaWVyLCBhbmQgdGhlIHNwZWxsIGF0dGFjayBib251cyBpcyA0K3RoZSBoYWcncyBJbnRlbGxpZ2VuY2UgbW9kaWZpZXIuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiSGFnIEV5ZSAoQ292ZW4gT25seSlcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIkEgaGFnIGNvdmVuIGNhbiBjcmFmdCBhIG1hZ2ljIGl0ZW0gY2FsbGVkIGEgaGFnIGV5ZSwgd2hpY2ggaXMgbWFkZSBmcm9tIGEgcmVhbCBleWUgY29hdGVkIGluIHZhcm5pc2ggYW5kIG9mdGVuIGZpdHRlZCB0byBhIHBlbmRhbnQgb3Igb3RoZXIgd2VhcmFibGUgaXRlbS4gVGhlIGhhZyBleWUgaXMgdXN1YWxseSBlbnRydXN0ZWQgdG8gYSBtaW5pb24gZm9yIHNhZmVrZWVwaW5nIGFuZCB0cmFuc3BvcnQuIEEgaGFnIGluIHRoZSBjb3ZlbiBjYW4gdGFrZSBhbiBhY3Rpb24gdG8gc2VlIHdoYXQgdGhlIGhhZyBleWUgc2VlcyBpZiB0aGUgaGFnIGV5ZSBpcyBvbiB0aGUgc2FtZSBwbGFuZSBvZiBleGlzdGVuY2UuIEEgaGFnIGV5ZSBoYXMgQUMgMTAsIDEgaGl0IHBvaW50LCBhbmQgZGFya3Zpc2lvbiB3aXRoIGEgcmFkaXVzIG9mIDYwIGZlZXQuIElmIGl0IGlzIGRlc3Ryb3llZCwgZWFjaCBjb3ZlbiBtZW1iZXIgdGFrZXMgM2QxMCBwc3ljaGljIGRhbWFnZSBhbmQgaXMgYmxpbmRlZCBmb3IgMjQgaG91cnMuXFxcXG5BIGhhZyBjb3ZlbiBjYW4gaGF2ZSBvbmx5IG9uZSBoYWcgZXllIGF0IGEgdGltZSwgYW5kIGNyZWF0aW5nIGEgbmV3IG9uZSByZXF1aXJlcyBhbGwgdGhyZWUgbWVtYmVycyBvZiB0aGUgY292ZW4gdG8gcGVyZm9ybSBhIHJpdHVhbC4gVGhlIHJpdHVhbCB0YWtlcyAxIGhvdXIsIGFuZCB0aGUgaGFncyBjYW4ndCBwZXJmb3JtIGl0IHdoaWxlIGJsaW5kZWQuIER1cmluZyB0aGUgcml0dWFsLCBpZiB0aGUgaGFncyB0YWtlIGFueSBhY3Rpb24gb3RoZXIgdGhhbiBwZXJmb3JtaW5nIHRoZSByaXR1YWwsIHRoZXkgbXVzdCBzdGFydCBvdmVyLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJDbGF3cyAoSGFnIEZvcm0gT25seSlcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs3IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTMgKDJkOCArIDQpIHNsYXNoaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDcsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMmQ4XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiA0XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQ2hhbmdlIFNoYXBlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgaGFnIG1hZ2ljYWxseSBwb2x5bW9ycGhzIGludG8gYSBTbWFsbCBvciBNZWRpdW0gZmVtYWxlIGh1bWFub2lkLCBvciBiYWNrIGludG8gaGVyIHRydWUgZm9ybS4gSGVyIHN0YXRpc3RpY3MgYXJlIHRoZSBzYW1lIGluIGVhY2ggZm9ybS4gQW55IGVxdWlwbWVudCBzaGUgaXMgd2VhcmluZyBvciBjYXJyeWluZyBpc24ndCB0cmFuc2Zvcm1lZC4gU2hlIHJldmVydHMgdG8gaGVyIHRydWUgZm9ybSBpZiBzaGUgZGllcy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJFdGhlcmVhbG5lc3NcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBoYWcgbWFnaWNhbGx5IGVudGVycyB0aGUgRXRoZXJlYWwgUGxhbmUgZnJvbSB0aGUgTWF0ZXJpYWwgUGxhbmUsIG9yIHZpY2UgdmVyc2EuIFRvIGRvIHNvLCB0aGUgaGFnIG11c3QgaGF2ZSBhIGhlYXJ0c3RvbmUgaW4gaGVyIHBvc3Nlc3Npb24uXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTmlnaHRtYXJlIEhhdW50aW5nICgxL0RheSlcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIldoaWxlIG9uIHRoZSBFdGhlcmVhbCBQbGFuZSwgdGhlIGhhZyBtYWdpY2FsbHkgdG91Y2hlcyBhIHNsZWVwaW5nIGh1bWFub2lkIG9uIHRoZSBNYXRlcmlhbCBQbGFuZS4gQSBwcm90ZWN0aW9uIGZyb20gZXZpbCBhbmQgZ29vZCBzcGVsbCBjYXN0IG9uIHRoZSB0YXJnZXQgcHJldmVudHMgdGhpcyBjb250YWN0LCBhcyBkb2VzIGEgbWFnaWMgY2lyY2xlLiBBcyBsb25nIGFzIHRoZSBjb250YWN0IHBlcnNpc3RzLCB0aGUgdGFyZ2V0IGhhcyBkcmVhZGZ1bCB2aXNpb25zLiBJZiB0aGVzZSB2aXNpb25zIGxhc3QgZm9yIGF0IGxlYXN0IDEgaG91ciwgdGhlIHRhcmdldCBnYWlucyBubyBiZW5lZml0IGZyb20gaXRzIHJlc3QsIGFuZCBpdHMgaGl0IHBvaW50IG1heGltdW0gaXMgcmVkdWNlZCBieSA1ICgxZDEwKS4gSWYgdGhpcyBlZmZlY3QgcmVkdWNlcyB0aGUgdGFyZ2V0J3MgaGl0IHBvaW50IG1heGltdW0gdG8gMCwgdGhlIHRhcmdldCBkaWVzLCBhbmQgaWYgdGhlIHRhcmdldCB3YXMgZXZpbCwgaXRzIHNvdWwgaXMgdHJhcHBlZCBpbiB0aGUgaGFnJ3Mgc291bCBiYWcuIFRoZSByZWR1Y3Rpb24gdG8gdGhlIHRhcmdldCdzIGhpdCBwb2ludCBtYXhpbXVtIGxhc3RzIHVudGlsIHJlbW92ZWQgYnkgdGhlIGdyZWF0ZXIgcmVzdG9yYXRpb24gc3BlbGwgb3Igc2ltaWxhciBtYWdpYy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIk5pZ2h0bWFyZVwiLFxuICAgICAgICBzaXplOiBcIkxhcmdlXCIsXG4gICAgICAgIHR5cGU6IFwiZmllbmRcIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcIm5ldXRyYWwgZXZpbFwiLFxuICAgICAgICBhYzogMTMsXG4gICAgICAgIGhwOiA2OCxcbiAgICAgICAgaGl0X2RpY2U6IFwiOGQxMCArIDI0XCIsXG4gICAgICAgIHNwZWVkOiBcIjYwIGZ0LiwgZmx5IDkwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzE4LCAxNSwgMTYsIDEwLCAxMywgMTVdLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcImZpcmVcIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIHNlbnNlczogXCJwYXNzaXZlIFBlcmNlcHRpb24gMTFcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcInVuZGVyc3RhbmRzIEFieXNzYWwsIENvbW1vbiwgYW5kIEluZmVybmFsIGJ1dCBjYW4ndCBzcGVha1wiLFxuICAgICAgICBjcjogXCIzXCIsXG4gICAgICAgIHRyYWl0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQ29uZmVyIEZpcmUgUmVzaXN0YW5jZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIG5pZ2h0bWFyZSBjYW4gZ3JhbnQgcmVzaXN0YW5jZSB0byBmaXJlIGRhbWFnZSB0byBhbnlvbmUgcmlkaW5nIGl0LlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIklsbHVtaW5hdGlvblwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIG5pZ2h0bWFyZSBzaGVkcyBicmlnaHQgbGlnaHQgaW4gYSAxMC1mb290IHJhZGl1cyBhbmQgZGltIGxpZ2h0IGZvciBhbiBhZGRpdGlvbmFsIDEwIGZlZXQuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkhvb3Zlc1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzYgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxMyAoMmQ4ICsgNCkgYmx1ZGdlb25pbmcgZGFtYWdlIHBsdXMgNyAoMmQ2KSBmaXJlIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDYsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMmQ4ICsgMmQ2XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiA0XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiRXRoZXJlYWwgU3RyaWRlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgbmlnaHRtYXJlIGFuZCB1cCB0byB0aHJlZSB3aWxsaW5nIGNyZWF0dXJlcyB3aXRoaW4gNSBmZWV0IG9mIGl0IG1hZ2ljYWxseSBlbnRlciB0aGUgRXRoZXJlYWwgUGxhbmUgZnJvbSB0aGUgTWF0ZXJpYWwgUGxhbmUsIG9yIHZpY2UgdmVyc2EuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJOb2JsZVwiLFxuICAgICAgICBzaXplOiBcIk1lZGl1bVwiLFxuICAgICAgICB0eXBlOiBcImh1bWFub2lkXCIsXG4gICAgICAgIHN1YnR5cGU6IFwiYW55IHJhY2VcIixcbiAgICAgICAgYWxpZ25tZW50OiBcImFueSBhbGlnbm1lbnRcIixcbiAgICAgICAgYWM6IDE1LFxuICAgICAgICBocDogOSxcbiAgICAgICAgaGl0X2RpY2U6IFwiMmQ4XCIsXG4gICAgICAgIHNwZWVkOiBcIjMwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzExLCAxMiwgMTEsIDEyLCAxNCwgMTZdLFxuICAgICAgICBza2lsbHNhdmVzOiBbeyBkZWNlcHRpb246IDUgfSwgeyBpbnNpZ2h0OiA0IH0sIHsgcGVyc3Vhc2lvbjogNSB9XSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIHNlbnNlczogXCJwYXNzaXZlIFBlcmNlcHRpb24gMTJcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcImFueSB0d28gbGFuZ3VhZ2VzXCIsXG4gICAgICAgIGNyOiBcIjEvOFwiLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJSYXBpZXJcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICszIHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogNSAoMWQ4ICsgMSkgcGllcmNpbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMyxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIxZDhcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDFcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgcmVhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJQYXJyeVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIG5vYmxlIGFkZHMgMiB0byBpdHMgQUMgYWdhaW5zdCBvbmUgbWVsZWUgYXR0YWNrIHRoYXQgd291bGQgaGl0IGl0LiBUbyBkbyBzbywgdGhlIG5vYmxlIG11c3Qgc2VlIHRoZSBhdHRhY2tlciBhbmQgYmUgd2llbGRpbmcgYSBtZWxlZSB3ZWFwb24uXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJPY2hyZSBKZWxseVwiLFxuICAgICAgICBzaXplOiBcIkxhcmdlXCIsXG4gICAgICAgIHR5cGU6IFwib296ZVwiLFxuICAgICAgICBzdWJ0eXBlOiBcIlwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwidW5hbGlnbmVkXCIsXG4gICAgICAgIGFjOiA4LFxuICAgICAgICBocDogNDUsXG4gICAgICAgIGhpdF9kaWNlOiBcIjZkMTAgKyAxMlwiLFxuICAgICAgICBzcGVlZDogXCIxMCBmdC4sIGNsaW1iIDEwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzE1LCA2LCAxNCwgMiwgNiwgMV0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJhY2lkXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcImxpZ2h0bmluZywgc2xhc2hpbmdcIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6XG4gICAgICAgICAgICBcImJsaW5kZWQsIGNoYXJtZWQsIGRlYWZlbmVkLCBleGhhdXN0aW9uLCBmcmlnaHRlbmVkLCBwcm9uZVwiLFxuICAgICAgICBzZW5zZXM6IFwiYmxpbmRzaWdodCA2MCBmdC4gKGJsaW5kIGJleW9uZCB0aGlzIHJhZGl1cyksIHBhc3NpdmUgUGVyY2VwdGlvbiA4XCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJcIixcbiAgICAgICAgY3I6IFwiMlwiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkFtb3JwaG91c1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGplbGx5IGNhbiBtb3ZlIHRocm91Z2ggYSBzcGFjZSBhcyBuYXJyb3cgYXMgMSBpbmNoIHdpZGUgd2l0aG91dCBzcXVlZXppbmcuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiU3BpZGVyIENsaW1iXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgamVsbHkgY2FuIGNsaW1iIGRpZmZpY3VsdCBzdXJmYWNlcywgaW5jbHVkaW5nIHVwc2lkZSBkb3duIG9uIGNlaWxpbmdzLCB3aXRob3V0IG5lZWRpbmcgdG8gbWFrZSBhbiBhYmlsaXR5IGNoZWNrLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJQc2V1ZG9wb2RcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs0IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogOSAoMmQ2ICsgMikgYmx1ZGdlb25pbmcgZGFtYWdlIHBsdXMgMyAoMWQ2KSBhY2lkIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDQsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMmQ2XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiAyXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIHJlYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiU3BsaXRcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIldoZW4gYSBqZWxseSB0aGF0IGlzIE1lZGl1bSBvciBsYXJnZXIgaXMgc3ViamVjdGVkIHRvIGxpZ2h0bmluZyBvciBzbGFzaGluZyBkYW1hZ2UsIGl0IHNwbGl0cyBpbnRvIHR3byBuZXcgamVsbGllcyBpZiBpdCBoYXMgYXQgbGVhc3QgMTAgaGl0IHBvaW50cy4gRWFjaCBuZXcgamVsbHkgaGFzIGhpdCBwb2ludHMgZXF1YWwgdG8gaGFsZiB0aGUgb3JpZ2luYWwgamVsbHkncywgcm91bmRlZCBkb3duLiBOZXcgamVsbGllcyBhcmUgb25lIHNpemUgc21hbGxlciB0aGFuIHRoZSBvcmlnaW5hbCBqZWxseS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIk9jdG9wdXNcIixcbiAgICAgICAgc2l6ZTogXCJTbWFsbFwiLFxuICAgICAgICB0eXBlOiBcImJlYXN0XCIsXG4gICAgICAgIHN1YnR5cGU6IFwiXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcbiAgICAgICAgYWM6IDEyLFxuICAgICAgICBocDogMyxcbiAgICAgICAgaGl0X2RpY2U6IFwiMWQ2ICsgLTFcIixcbiAgICAgICAgc3BlZWQ6IFwiNSBmdC4sIHN3aW0gMzAgZnQuXCIsXG4gICAgICAgIHN0YXRzOiBbNCwgMTUsIDExLCAzLCAxMCwgNF0sXG4gICAgICAgIHNraWxsc2F2ZXM6IFt7IHBlcmNlcHRpb246IDIgfSwgeyBzdGVhbHRoOiA0IH1dLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcbiAgICAgICAgc2Vuc2VzOiBcImRhcmt2aXNpb24gMzAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTJcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcIlwiLFxuICAgICAgICBjcjogXCIwXCIsXG4gICAgICAgIHRyYWl0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiSG9sZCBCcmVhdGhcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIldoaWxlIG91dCBvZiB3YXRlciwgdGhlIG9jdG9wdXMgY2FuIGhvbGQgaXRzIGJyZWF0aCBmb3IgMzAgbWludXRlcy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJVbmRlcndhdGVyIENhbW91ZmxhZ2VcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBvY3RvcHVzIGhhcyBhZHZhbnRhZ2Ugb24gRGV4dGVyaXR5IChTdGVhbHRoKSBjaGVja3MgbWFkZSB3aGlsZSB1bmRlcndhdGVyLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIldhdGVyIEJyZWF0aGluZ1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIG9jdG9wdXMgY2FuIGJyZWF0aGUgb25seSB1bmRlcndhdGVyLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJUZW50YWNsZXNcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs0IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMSBibHVkZ2VvbmluZyBkYW1hZ2UsIGFuZCB0aGUgdGFyZ2V0IGlzIGdyYXBwbGVkIChlc2NhcGUgREMgMTApLiBVbnRpbCB0aGlzIGdyYXBwbGUgZW5kcywgdGhlIG9jdG9wdXMgY2FuJ3QgdXNlIGl0cyB0ZW50YWNsZXMgb24gYW5vdGhlciB0YXJnZXQuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA0LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogMVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkluayBDbG91ZCAoUmVjaGFyZ2VzIGFmdGVyIGEgU2hvcnQgb3IgTG9uZyBSZXN0KVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiQSA1LWZvb3QtcmFkaXVzIGNsb3VkIG9mIGluayBleHRlbmRzIGFsbCBhcm91bmQgdGhlIG9jdG9wdXMgaWYgaXQgaXMgdW5kZXJ3YXRlci4gVGhlIGFyZWEgaXMgaGVhdmlseSBvYnNjdXJlZCBmb3IgMSBtaW51dGUsIGFsdGhvdWdoIGEgc2lnbmlmaWNhbnQgY3VycmVudCBjYW4gZGlzcGVyc2UgdGhlIGluay4gQWZ0ZXIgcmVsZWFzaW5nIHRoZSBpbmssIHRoZSBvY3RvcHVzIGNhbiB1c2UgdGhlIERhc2ggYWN0aW9uIGFzIGEgYm9udXMgYWN0aW9uLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiT2dyZVwiLFxuICAgICAgICBzaXplOiBcIkxhcmdlXCIsXG4gICAgICAgIHR5cGU6IFwiZ2lhbnRcIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcImNoYW90aWMgZXZpbFwiLFxuICAgICAgICBhYzogMTEsXG4gICAgICAgIGhwOiA1OSxcbiAgICAgICAgaGl0X2RpY2U6IFwiN2QxMCArIDIwXCIsXG4gICAgICAgIHNwZWVkOiBcIjQwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzE5LCA4LCAxNiwgNSwgNywgN10sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBzZW5zZXM6IFwiZGFya3Zpc2lvbiA2MCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiA4XCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJDb21tb24sIEdpYW50XCIsXG4gICAgICAgIGNyOiBcIjJcIixcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiR3JlYXRjbHViXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNiB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDEzICgyZDggKyA0KSBibHVkZ2VvbmluZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA2LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjJkOFwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogNFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkphdmVsaW5cIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIG9yIFJhbmdlZCBXZWFwb24gQXR0YWNrOiArNiB0byBoaXQsIHJlYWNoIDUgZnQuIG9yIHJhbmdlIDMwLzEyMCBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTEgKDJkNiArIDQpIHBpZXJjaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDYsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMmQ2XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiA0XG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJPZ3JlIFpvbWJpZVwiLFxuICAgICAgICBzaXplOiBcIkxhcmdlXCIsXG4gICAgICAgIHR5cGU6IFwidW5kZWFkXCIsXG4gICAgICAgIHN1YnR5cGU6IFwiXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJuZXV0cmFsIGV2aWxcIixcbiAgICAgICAgYWM6IDgsXG4gICAgICAgIGhwOiA4NSxcbiAgICAgICAgaGl0X2RpY2U6IFwiOWQxMCArIDM1XCIsXG4gICAgICAgIHNwZWVkOiBcIjMwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzE5LCA2LCAxOCwgMywgNiwgNV0sXG4gICAgICAgIHNhdmVzOiBbeyB3aXNkb206IDAgfV0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwicG9pc29uXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOiBcInBvaXNvbmVkXCIsXG4gICAgICAgIHNlbnNlczogXCJkYXJrdmlzaW9uIDYwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDhcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcInVuZGVyc3RhbmRzIENvbW1vbiBhbmQgR2lhbnQgYnV0IGNhbid0IHNwZWFrXCIsXG4gICAgICAgIGNyOiBcIjJcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJVbmRlYWQgRm9ydGl0dWRlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJJZiBkYW1hZ2UgcmVkdWNlcyB0aGUgem9tYmllIHRvIDAgaGl0IHBvaW50cywgaXQgbXVzdCBtYWtlIGEgQ29uc3RpdHV0aW9uIHNhdmluZyB0aHJvdyB3aXRoIGEgREMgb2YgNSt0aGUgZGFtYWdlIHRha2VuLCB1bmxlc3MgdGhlIGRhbWFnZSBpcyByYWRpYW50IG9yIGZyb20gYSBjcml0aWNhbCBoaXQuIE9uIGEgc3VjY2VzcywgdGhlIHpvbWJpZSBkcm9wcyB0byAxIGhpdCBwb2ludCBpbnN0ZWFkLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJNb3JuaW5nc3RhclwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzYgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxMyAoMmQ4ICsgNCkgYmx1ZGdlb25pbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIyZDhcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDRcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIk9uaVwiLFxuICAgICAgICBzaXplOiBcIkxhcmdlXCIsXG4gICAgICAgIHR5cGU6IFwiZ2lhbnRcIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcImxhd2Z1bCBldmlsXCIsXG4gICAgICAgIGFjOiAxNixcbiAgICAgICAgaHA6IDExMCxcbiAgICAgICAgaGl0X2RpY2U6IFwiMTNkMTAgKyAzOFwiLFxuICAgICAgICBzcGVlZDogXCIzMCBmdC4sIGZseSAzMCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsxOSwgMTEsIDE2LCAxNCwgMTIsIDE1XSxcbiAgICAgICAgc2F2ZXM6IFtcbiAgICAgICAgICAgIHsgZGV4dGVyaXR5OiAzIH0sXG4gICAgICAgICAgICB7IGNvbnN0aXR1dGlvbjogNiB9LFxuICAgICAgICAgICAgeyB3aXNkb206IDQgfSxcbiAgICAgICAgICAgIHsgY2hhcmlzbWE6IDUgfVxuICAgICAgICBdLFxuICAgICAgICBza2lsbHNhdmVzOiBbeyBhcmNhbmE6IDUgfSwgeyBkZWNlcHRpb246IDggfSwgeyBwZXJjZXB0aW9uOiA0IH1dLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcbiAgICAgICAgc2Vuc2VzOiBcImRhcmt2aXNpb24gNjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTRcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcIkNvbW1vbiwgR2lhbnRcIixcbiAgICAgICAgY3I6IFwiN1wiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIklubmF0ZSBTcGVsbGNhc3RpbmdcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBvbmkncyBpbm5hdGUgc3BlbGxjYXN0aW5nIGFiaWxpdHkgaXMgQ2hhcmlzbWEgKHNwZWxsIHNhdmUgREMgMTMpLiBUaGUgb25pIGNhbiBpbm5hdGVseSBjYXN0IHRoZSBmb2xsb3dpbmcgc3BlbGxzLCByZXF1aXJpbmcgbm8gbWF0ZXJpYWwgY29tcG9uZW50czpcXFxcblxcXFxuQXQgd2lsbDogZGFya25lc3MsIGludmlzaWJpbGl0eVxcXFxuMS9kYXkgZWFjaDogY2hhcm0gcGVyc29uLCBjb25lIG9mIGNvbGQsIGdhc2VvdXMgZm9ybSwgc2xlZXBcIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJNYWdpYyBXZWFwb25zXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgb25pJ3Mgd2VhcG9uIGF0dGFja3MgYXJlIG1hZ2ljYWwuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiUmVnZW5lcmF0aW9uXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgb25pIHJlZ2FpbnMgMTAgaGl0IHBvaW50cyBhdCB0aGUgc3RhcnQgb2YgaXRzIHR1cm4gaWYgaXQgaGFzIGF0IGxlYXN0IDEgaGl0IHBvaW50LlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJNdWx0aWF0dGFja1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIG9uaSBtYWtlcyB0d28gYXR0YWNrcywgZWl0aGVyIHdpdGggaXRzIGNsYXdzIG9yIGl0cyBnbGFpdmUuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQ2xhdyAoT25pIEZvcm0gT25seSlcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs3IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogOCAoMWQ4ICsgNCkgc2xhc2hpbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNyxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIxZDhcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDRcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJHbGFpdmVcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs3IHRvIGhpdCwgcmVhY2ggMTAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDE1ICgyZDEwICsgNCkgc2xhc2hpbmcgZGFtYWdlLCBvciA5ICgxZDEwICsgNCkgc2xhc2hpbmcgZGFtYWdlIGluIFNtYWxsIG9yIE1lZGl1bSBmb3JtLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNyxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIyZDEwXCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiA0XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQ2hhbmdlIFNoYXBlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgb25pIG1hZ2ljYWxseSBwb2x5bW9ycGhzIGludG8gYSBTbWFsbCBvciBNZWRpdW0gaHVtYW5vaWQsIGludG8gYSBMYXJnZSBnaWFudCwgb3IgYmFjayBpbnRvIGl0cyB0cnVlIGZvcm0uIE90aGVyIHRoYW4gaXRzIHNpemUsIGl0cyBzdGF0aXN0aWNzIGFyZSB0aGUgc2FtZSBpbiBlYWNoIGZvcm0uIFRoZSBvbmx5IGVxdWlwbWVudCB0aGF0IGlzIHRyYW5zZm9ybWVkIGlzIGl0cyBnbGFpdmUsIHdoaWNoIHNocmlua3Mgc28gdGhhdCBpdCBjYW4gYmUgd2llbGRlZCBpbiBodW1hbm9pZCBmb3JtLiBJZiB0aGUgb25pIGRpZXMsIGl0IHJldmVydHMgdG8gaXRzIHRydWUgZm9ybSwgYW5kIGl0cyBnbGFpdmUgcmV2ZXJ0cyB0byBpdHMgbm9ybWFsIHNpemUuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJPcmNcIixcbiAgICAgICAgc2l6ZTogXCJNZWRpdW1cIixcbiAgICAgICAgdHlwZTogXCJodW1hbm9pZFwiLFxuICAgICAgICBzdWJ0eXBlOiBcIm9yY1wiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwiY2hhb3RpYyBldmlsXCIsXG4gICAgICAgIGFjOiAxMyxcbiAgICAgICAgaHA6IDE1LFxuICAgICAgICBoaXRfZGljZTogXCIyZDggKyA2XCIsXG4gICAgICAgIHNwZWVkOiBcIjMwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzE2LCAxMiwgMTYsIDcsIDExLCAxMF0sXG4gICAgICAgIHNraWxsc2F2ZXM6IFt7IGludGltaWRhdGlvbjogMiB9XSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIHNlbnNlczogXCJkYXJrdmlzaW9uIDYwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDEwXCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJDb21tb24sIE9yY1wiLFxuICAgICAgICBjcjogXCIxLzJcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJBZ2dyZXNzaXZlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJBcyBhIGJvbnVzIGFjdGlvbiwgdGhlIG9yYyBjYW4gbW92ZSB1cCB0byBpdHMgc3BlZWQgdG93YXJkIGEgaG9zdGlsZSBjcmVhdHVyZSB0aGF0IGl0IGNhbiBzZWUuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkdyZWF0YXhlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNSB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDkgKDFkMTIgKyAzKSBzbGFzaGluZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA1LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjFkMTJcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDNcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJKYXZlbGluXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBvciBSYW5nZWQgV2VhcG9uIEF0dGFjazogKzUgdG8gaGl0LCByZWFjaCA1IGZ0LiBvciByYW5nZSAzMC8xMjAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDYgKDFkNiArIDMpIHBpZXJjaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDUsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMWQ2XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiAzXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJPdHl1Z2hcIixcbiAgICAgICAgc2l6ZTogXCJMYXJnZVwiLFxuICAgICAgICB0eXBlOiBcImFiZXJyYXRpb25cIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcIm5ldXRyYWxcIixcbiAgICAgICAgYWM6IDE0LFxuICAgICAgICBocDogMTE0LFxuICAgICAgICBoaXRfZGljZTogXCIxMmQxMCArIDQ4XCIsXG4gICAgICAgIHNwZWVkOiBcIjMwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzE2LCAxMSwgMTksIDYsIDEzLCA2XSxcbiAgICAgICAgc2F2ZXM6IFt7IGNvbnN0aXR1dGlvbjogNyB9XSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIHNlbnNlczogXCJkYXJrdmlzaW9uIDEyMCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxMVwiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiT3R5dWdoXCIsXG4gICAgICAgIGNyOiBcIjVcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJMaW1pdGVkIFRlbGVwYXRoeVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIG90eXVnaCBjYW4gbWFnaWNhbGx5IHRyYW5zbWl0IHNpbXBsZSBtZXNzYWdlcyBhbmQgaW1hZ2VzIHRvIGFueSBjcmVhdHVyZSB3aXRoaW4gMTIwIGZ0LiBvZiBpdCB0aGF0IGNhbiB1bmRlcnN0YW5kIGEgbGFuZ3VhZ2UuIFRoaXMgZm9ybSBvZiB0ZWxlcGF0aHkgZG9lc24ndCBhbGxvdyB0aGUgcmVjZWl2aW5nIGNyZWF0dXJlIHRvIHRlbGVwYXRoaWNhbGx5IHJlc3BvbmQuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgb3R5dWdoIG1ha2VzIHRocmVlIGF0dGFja3M6IG9uZSB3aXRoIGl0cyBiaXRlIGFuZCB0d28gd2l0aCBpdHMgdGVudGFjbGVzLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkJpdGVcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs2IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTIgKDJkOCArIDMpIHBpZXJjaW5nIGRhbWFnZS4gSWYgdGhlIHRhcmdldCBpcyBhIGNyZWF0dXJlLCBpdCBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxNSBDb25zdGl0dXRpb24gc2F2aW5nIHRocm93IGFnYWluc3QgZGlzZWFzZSBvciBiZWNvbWUgcG9pc29uZWQgdW50aWwgdGhlIGRpc2Vhc2UgaXMgY3VyZWQuIEV2ZXJ5IDI0IGhvdXJzIHRoYXQgZWxhcHNlLCB0aGUgdGFyZ2V0IG11c3QgcmVwZWF0IHRoZSBzYXZpbmcgdGhyb3csIHJlZHVjaW5nIGl0cyBoaXQgcG9pbnQgbWF4aW11bSBieSA1ICgxZDEwKSBvbiBhIGZhaWx1cmUuIFRoZSBkaXNlYXNlIGlzIGN1cmVkIG9uIGEgc3VjY2Vzcy4gVGhlIHRhcmdldCBkaWVzIGlmIHRoZSBkaXNlYXNlIHJlZHVjZXMgaXRzIGhpdCBwb2ludCBtYXhpbXVtIHRvIDAuIFRoaXMgcmVkdWN0aW9uIHRvIHRoZSB0YXJnZXQncyBoaXQgcG9pbnQgbWF4aW11bSBsYXN0cyB1bnRpbCB0aGUgZGlzZWFzZSBpcyBjdXJlZC5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDYsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMmQ4XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiAzXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiVGVudGFjbGVcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs2IHRvIGhpdCwgcmVhY2ggMTAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDcgKDFkOCArIDMpIGJsdWRnZW9uaW5nIGRhbWFnZSBwbHVzIDQgKDFkOCkgcGllcmNpbmcgZGFtYWdlLiBJZiB0aGUgdGFyZ2V0IGlzIE1lZGl1bSBvciBzbWFsbGVyLCBpdCBpcyBncmFwcGxlZCAoZXNjYXBlIERDIDEzKSBhbmQgcmVzdHJhaW5lZCB1bnRpbCB0aGUgZ3JhcHBsZSBlbmRzLiBUaGUgb3R5dWdoIGhhcyB0d28gdGVudGFjbGVzLCBlYWNoIG9mIHdoaWNoIGNhbiBncmFwcGxlIG9uZSB0YXJnZXQuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA2LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjFkOFwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogM1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlRlbnRhY2xlIFNsYW1cIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBvdHl1Z2ggc2xhbXMgY3JlYXR1cmVzIGdyYXBwbGVkIGJ5IGl0IGludG8gZWFjaCBvdGhlciBvciBhIHNvbGlkIHN1cmZhY2UuIEVhY2ggY3JlYXR1cmUgbXVzdCBzdWNjZWVkIG9uIGEgREMgMTQgQ29uc3RpdHV0aW9uIHNhdmluZyB0aHJvdyBvciB0YWtlIDEwICgyZDYgKyAzKSBibHVkZ2VvbmluZyBkYW1hZ2UgYW5kIGJlIHN0dW5uZWQgdW50aWwgdGhlIGVuZCBvZiB0aGUgb3R5dWdoJ3MgbmV4dCB0dXJuLiBPbiBhIHN1Y2Nlc3NmdWwgc2F2ZSwgdGhlIHRhcmdldCB0YWtlcyBoYWxmIHRoZSBibHVkZ2VvbmluZyBkYW1hZ2UgYW5kIGlzbid0IHN0dW5uZWQuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJPd2xcIixcbiAgICAgICAgc2l6ZTogXCJUaW55XCIsXG4gICAgICAgIHR5cGU6IFwiYmVhc3RcIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcInVuYWxpZ25lZFwiLFxuICAgICAgICBhYzogMTEsXG4gICAgICAgIGhwOiAxLFxuICAgICAgICBoaXRfZGljZTogXCIxZDQgKyAtMlwiLFxuICAgICAgICBzcGVlZDogXCI1IGZ0LiwgZmx5IDYwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzMsIDEzLCA4LCAyLCAxMiwgN10sXG4gICAgICAgIHNraWxsc2F2ZXM6IFt7IHBlcmNlcHRpb246IDMgfSwgeyBzdGVhbHRoOiAzIH1dLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcbiAgICAgICAgc2Vuc2VzOiBcImRhcmt2aXNpb24gMTIwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDEzXCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJcIixcbiAgICAgICAgY3I6IFwiMFwiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkZseWJ5XCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgb3dsIGRvZXNuJ3QgcHJvdm9rZSBvcHBvcnR1bml0eSBhdHRhY2tzIHdoZW4gaXQgZmxpZXMgb3V0IG9mIGFuIGVuZW15J3MgcmVhY2guXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiS2VlbiBIZWFyaW5nIGFuZCBTaWdodFwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIG93bCBoYXMgYWR2YW50YWdlIG9uIFdpc2RvbSAoUGVyY2VwdGlvbikgY2hlY2tzIHRoYXQgcmVseSBvbiBoZWFyaW5nIG9yIHNpZ2h0LlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJUYWxvbnNcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICszIHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMSBzbGFzaGluZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAzLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogMVxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiT3dsYmVhclwiLFxuICAgICAgICBzaXplOiBcIkxhcmdlXCIsXG4gICAgICAgIHR5cGU6IFwibW9uc3Ryb3NpdHlcIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcInVuYWxpZ25lZFwiLFxuICAgICAgICBhYzogMTMsXG4gICAgICAgIGhwOiA1OSxcbiAgICAgICAgaGl0X2RpY2U6IFwiN2QxMCArIDIwXCIsXG4gICAgICAgIHNwZWVkOiBcIjQwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzIwLCAxMiwgMTcsIDMsIDEyLCA3XSxcbiAgICAgICAgc2tpbGxzYXZlczogW3sgcGVyY2VwdGlvbjogMyB9XSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIHNlbnNlczogXCJkYXJrdmlzaW9uIDYwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDEzXCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJcIixcbiAgICAgICAgY3I6IFwiM1wiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIktlZW4gU2lnaHQgYW5kIFNtZWxsXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgb3dsYmVhciBoYXMgYWR2YW50YWdlIG9uIFdpc2RvbSAoUGVyY2VwdGlvbikgY2hlY2tzIHRoYXQgcmVseSBvbiBzaWdodCBvciBzbWVsbC5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBvd2xiZWFyIG1ha2VzIHR3byBhdHRhY2tzOiBvbmUgd2l0aCBpdHMgYmVhayBhbmQgb25lIHdpdGggaXRzIGNsYXdzLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkJlYWtcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs3IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSBjcmVhdHVyZS4gSGl0OiAxMCAoMWQxMCArIDUpIHBpZXJjaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDcsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMWQxMFwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogNVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkNsYXdzXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNyB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDE0ICgyZDggKyA1KSBzbGFzaGluZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA3LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjJkOFwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogNVxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiUGFudGhlclwiLFxuICAgICAgICBzaXplOiBcIk1lZGl1bVwiLFxuICAgICAgICB0eXBlOiBcImJlYXN0XCIsXG4gICAgICAgIHN1YnR5cGU6IFwiXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcbiAgICAgICAgYWM6IDEyLFxuICAgICAgICBocDogMTMsXG4gICAgICAgIGhpdF9kaWNlOiBcIjNkOCArIC0xXCIsXG4gICAgICAgIHNwZWVkOiBcIjUwIGZ0LiwgY2xpbWIgNDAgZnQuXCIsXG4gICAgICAgIHN0YXRzOiBbMTQsIDE1LCAxMCwgMywgMTQsIDddLFxuICAgICAgICBza2lsbHNhdmVzOiBbeyBwZXJjZXB0aW9uOiA0IH0sIHsgc3RlYWx0aDogNiB9XSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIHNlbnNlczogXCJwYXNzaXZlIFBlcmNlcHRpb24gMTRcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcIlwiLFxuICAgICAgICBjcjogXCIxLzRcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJLZWVuIFNtZWxsXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgcGFudGhlciBoYXMgYWR2YW50YWdlIG9uIFdpc2RvbSAoUGVyY2VwdGlvbikgY2hlY2tzIHRoYXQgcmVseSBvbiBzbWVsbC5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJQb3VuY2VcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIklmIHRoZSBwYW50aGVyIG1vdmVzIGF0IGxlYXN0IDIwIGZ0LiBzdHJhaWdodCB0b3dhcmQgYSBjcmVhdHVyZSBhbmQgdGhlbiBoaXRzIGl0IHdpdGggYSBjbGF3IGF0dGFjayBvbiB0aGUgc2FtZSB0dXJuLCB0aGF0IHRhcmdldCBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxMiBTdHJlbmd0aCBzYXZpbmcgdGhyb3cgb3IgYmUga25vY2tlZCBwcm9uZS4gSWYgdGhlIHRhcmdldCBpcyBwcm9uZSwgdGhlIHBhbnRoZXIgY2FuIG1ha2Ugb25lIGJpdGUgYXR0YWNrIGFnYWluc3QgaXQgYXMgYSBib251cyBhY3Rpb24uXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkJpdGVcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs0IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogNSAoMWQ2ICsgMikgcGllcmNpbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIxZDZcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJDbGF3XCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNCB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDQgKDFkNCArIDIpIHNsYXNoaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDQsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMWQ0XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiAyXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJQZWdhc3VzXCIsXG4gICAgICAgIHNpemU6IFwiTGFyZ2VcIixcbiAgICAgICAgdHlwZTogXCJjZWxlc3RpYWxcIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcImNoYW90aWMgZ29vZFwiLFxuICAgICAgICBhYzogMTIsXG4gICAgICAgIGhwOiA1OSxcbiAgICAgICAgaGl0X2RpY2U6IFwiN2QxMCArIDIwXCIsXG4gICAgICAgIHNwZWVkOiBcIjYwIGZ0LiwgZmx5IDkwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzE4LCAxNSwgMTYsIDEwLCAxNSwgMTNdLFxuICAgICAgICBzYXZlczogW3sgZGV4dGVyaXR5OiA0IH0sIHsgd2lzZG9tOiA0IH0sIHsgY2hhcmlzbWE6IDMgfV0sXG4gICAgICAgIHNraWxsc2F2ZXM6IFt7IHBlcmNlcHRpb246IDYgfV0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBzZW5zZXM6IFwicGFzc2l2ZSBQZXJjZXB0aW9uIDE2XCIsXG4gICAgICAgIGxhbmd1YWdlczpcbiAgICAgICAgICAgIFwidW5kZXJzdGFuZHMgQ2VsZXN0aWFsLCBDb21tb24sIEVsdmlzaCwgYW5kIFN5bHZhbiBidXQgY2FuJ3Qgc3BlYWtcIixcbiAgICAgICAgY3I6IFwiMlwiLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJIb292ZXNcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs2IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTEgKDJkNiArIDQpIGJsdWRnZW9uaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDYsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMmQ2XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiA0XG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJQaGFzZSBTcGlkZXJcIixcbiAgICAgICAgc2l6ZTogXCJMYXJnZVwiLFxuICAgICAgICB0eXBlOiBcIm1vbnN0cm9zaXR5XCIsXG4gICAgICAgIHN1YnR5cGU6IFwiXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcbiAgICAgICAgYWM6IDEzLFxuICAgICAgICBocDogMzIsXG4gICAgICAgIGhpdF9kaWNlOiBcIjVkMTAgKyA0XCIsXG4gICAgICAgIHNwZWVkOiBcIjMwIGZ0LiwgY2xpbWIgMzAgZnQuXCIsXG4gICAgICAgIHN0YXRzOiBbMTUsIDE1LCAxMiwgNiwgMTAsIDZdLFxuICAgICAgICBza2lsbHNhdmVzOiBbeyBzdGVhbHRoOiA2IH1dLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcbiAgICAgICAgc2Vuc2VzOiBcImRhcmt2aXNpb24gNjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTBcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcIlwiLFxuICAgICAgICBjcjogXCIzXCIsXG4gICAgICAgIHRyYWl0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiRXRoZXJlYWwgSmF1bnRcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIkFzIGEgYm9udXMgYWN0aW9uLCB0aGUgc3BpZGVyIGNhbiBtYWdpY2FsbHkgc2hpZnQgZnJvbSB0aGUgTWF0ZXJpYWwgUGxhbmUgdG8gdGhlIEV0aGVyZWFsIFBsYW5lLCBvciB2aWNlIHZlcnNhLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlNwaWRlciBDbGltYlwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIHNwaWRlciBjYW4gY2xpbWIgZGlmZmljdWx0IHN1cmZhY2VzLCBpbmNsdWRpbmcgdXBzaWRlIGRvd24gb24gY2VpbGluZ3MsIHdpdGhvdXQgbmVlZGluZyB0byBtYWtlIGFuIGFiaWxpdHkgY2hlY2suXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiV2ViIFdhbGtlclwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIHNwaWRlciBpZ25vcmVzIG1vdmVtZW50IHJlc3RyaWN0aW9ucyBjYXVzZWQgYnkgd2ViYmluZy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQml0ZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzQgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIGNyZWF0dXJlLiBIaXQ6IDcgKDFkMTAgKyAyKSBwaWVyY2luZyBkYW1hZ2UsIGFuZCB0aGUgdGFyZ2V0IG11c3QgbWFrZSBhIERDIDExIENvbnN0aXR1dGlvbiBzYXZpbmcgdGhyb3csIHRha2luZyAxOCAoNGQ4KSBwb2lzb24gZGFtYWdlIG9uIGEgZmFpbGVkIHNhdmUsIG9yIGhhbGYgYXMgbXVjaCBkYW1hZ2Ugb24gYSBzdWNjZXNzZnVsIG9uZS4gSWYgdGhlIHBvaXNvbiBkYW1hZ2UgcmVkdWNlcyB0aGUgdGFyZ2V0IHRvIDAgaGl0IHBvaW50cywgdGhlIHRhcmdldCBpcyBzdGFibGUgYnV0IHBvaXNvbmVkIGZvciAxIGhvdXIsIGV2ZW4gYWZ0ZXIgcmVnYWluaW5nIGhpdCBwb2ludHMsIGFuZCBpcyBwYXJhbHl6ZWQgd2hpbGUgcG9pc29uZWQgaW4gdGhpcyB3YXkuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA0LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjFkMTBcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIlBpdCBGaWVuZFwiLFxuICAgICAgICBzaXplOiBcIkxhcmdlXCIsXG4gICAgICAgIHR5cGU6IFwiZmllbmRcIixcbiAgICAgICAgc3VidHlwZTogXCJkZXZpbFwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwibGF3ZnVsIGV2aWxcIixcbiAgICAgICAgYWM6IDE5LFxuICAgICAgICBocDogMzAwLFxuICAgICAgICBoaXRfZGljZTogXCIyNGQxMCArIDE2OFwiLFxuICAgICAgICBzcGVlZDogXCIzMCBmdC4sIGZseSA2MCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsyNiwgMTQsIDI0LCAyMiwgMTgsIDI0XSxcbiAgICAgICAgc2F2ZXM6IFt7IGRleHRlcml0eTogOCB9LCB7IGNvbnN0aXR1dGlvbjogMTMgfSwgeyB3aXNkb206IDEwIH1dLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6XG4gICAgICAgICAgICBcImNvbGQ7IGJsdWRnZW9uaW5nLCBwaWVyY2luZywgYW5kIHNsYXNoaW5nIGZyb20gbm9ubWFnaWNhbCB3ZWFwb25zIHRoYXQgYXJlbid0IHNpbHZlcmVkXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcImZpcmUsIHBvaXNvblwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJwb2lzb25lZFwiLFxuICAgICAgICBzZW5zZXM6IFwidHJ1ZXNpZ2h0IDEyMCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxNFwiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiSW5mZXJuYWwsIHRlbGVwYXRoeSAxMjAgZnQuXCIsXG4gICAgICAgIGNyOiBcIjIwXCIsXG4gICAgICAgIHRyYWl0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiRmVhciBBdXJhXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJBbnkgY3JlYXR1cmUgaG9zdGlsZSB0byB0aGUgcGl0IGZpZW5kIHRoYXQgc3RhcnRzIGl0cyB0dXJuIHdpdGhpbiAyMCBmZWV0IG9mIHRoZSBwaXQgZmllbmQgbXVzdCBtYWtlIGEgREMgMjEgV2lzZG9tIHNhdmluZyB0aHJvdywgdW5sZXNzIHRoZSBwaXQgZmllbmQgaXMgaW5jYXBhY2l0YXRlZC4gT24gYSBmYWlsZWQgc2F2ZSwgdGhlIGNyZWF0dXJlIGlzIGZyaWdodGVuZWQgdW50aWwgdGhlIHN0YXJ0IG9mIGl0cyBuZXh0IHR1cm4uIElmIGEgY3JlYXR1cmUncyBzYXZpbmcgdGhyb3cgaXMgc3VjY2Vzc2Z1bCwgdGhlIGNyZWF0dXJlIGlzIGltbXVuZSB0byB0aGUgcGl0IGZpZW5kJ3MgRmVhciBBdXJhIGZvciB0aGUgbmV4dCAyNCBob3Vycy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJNYWdpYyBSZXNpc3RhbmNlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgcGl0IGZpZW5kIGhhcyBhZHZhbnRhZ2Ugb24gc2F2aW5nIHRocm93cyBhZ2FpbnN0IHNwZWxscyBhbmQgb3RoZXIgbWFnaWNhbCBlZmZlY3RzLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk1hZ2ljIFdlYXBvbnNcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBwaXQgZmllbmQncyB3ZWFwb24gYXR0YWNrcyBhcmUgbWFnaWNhbC5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJJbm5hdGUgU3BlbGxjYXN0aW5nXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgcGl0IGZpZW5kJ3Mgc3BlbGxjYXN0aW5nIGFiaWxpdHkgaXMgQ2hhcmlzbWEgKHNwZWxsIHNhdmUgREMgMjEpLiBUaGUgcGl0IGZpZW5kIGNhbiBpbm5hdGVseSBjYXN0IHRoZSBmb2xsb3dpbmcgc3BlbGxzLCByZXF1aXJpbmcgbm8gbWF0ZXJpYWwgY29tcG9uZW50czpcXFxcbkF0IHdpbGw6IGRldGVjdCBtYWdpYywgZmlyZWJhbGxcXFxcbjMvZGF5IGVhY2g6IGhvbGQgbW9uc3Rlciwgd2FsbCBvZiBmaXJlXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgcGl0IGZpZW5kIG1ha2VzIGZvdXIgYXR0YWNrczogb25lIHdpdGggaXRzIGJpdGUsIG9uZSB3aXRoIGl0cyBjbGF3LCBvbmUgd2l0aCBpdHMgbWFjZSwgYW5kIG9uZSB3aXRoIGl0cyB0YWlsLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkJpdGVcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICsxNCB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDIyICg0ZDYgKyA4KSBwaWVyY2luZyBkYW1hZ2UuIFRoZSB0YXJnZXQgbXVzdCBzdWNjZWVkIG9uIGEgREMgMjEgQ29uc3RpdHV0aW9uIHNhdmluZyB0aHJvdyBvciBiZWNvbWUgcG9pc29uZWQuIFdoaWxlIHBvaXNvbmVkIGluIHRoaXMgd2F5LCB0aGUgdGFyZ2V0IGNhbid0IHJlZ2FpbiBoaXQgcG9pbnRzLCBhbmQgaXQgdGFrZXMgMjEgKDZkNikgcG9pc29uIGRhbWFnZSBhdCB0aGUgc3RhcnQgb2YgZWFjaCBvZiBpdHMgdHVybnMuIFRoZSBwb2lzb25lZCB0YXJnZXQgY2FuIHJlcGVhdCB0aGUgc2F2aW5nIHRocm93IGF0IHRoZSBlbmQgb2YgZWFjaCBvZiBpdHMgdHVybnMsIGVuZGluZyB0aGUgZWZmZWN0IG9uIGl0c2VsZiBvbiBhIHN1Y2Nlc3MuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAxNCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCI0ZDZcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDhcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJDbGF3XCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMTQgdG8gaGl0LCByZWFjaCAxMCBmdC4gLCBvbmUgdGFyZ2V0LiBIaXQ6IDE3ICgyZDggKyA4KSBzbGFzaGluZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAxNCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIyZDhcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDhcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJNYWNlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMTQgdG8gaGl0LCByZWFjaCAxMGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxNSAoMmQ2ICsgOCkgYmx1ZGdlb25pbmcgZGFtYWdlIHBsdXMgMjEgKDZkNikgZmlyZSBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAxNCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIyZDZcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDhcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJUYWlsXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMTQgdG8gaGl0LCByZWFjaCAxMGZ0Liwgb25lIHRhcmdldC4gSGl0OiAyNCAoM2QxTyArIDgpIGJsdWRnZW9uaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDE0LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjNkMTBcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDhcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIlBsYW5ldGFyXCIsXG4gICAgICAgIHNpemU6IFwiTGFyZ2VcIixcbiAgICAgICAgdHlwZTogXCJjZWxlc3RpYWxcIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcImxhd2Z1bCBnb29kXCIsXG4gICAgICAgIGFjOiAxOSxcbiAgICAgICAgaHA6IDIwMCxcbiAgICAgICAgaGl0X2RpY2U6IFwiMTZkMTAgKyAxMTJcIixcbiAgICAgICAgc3BlZWQ6IFwiNDAgZnQuLCBmbHkgMTIwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzI0LCAyMCwgMjQsIDE5LCAyMiwgMjVdLFxuICAgICAgICBzYXZlczogW3sgY29uc3RpdHV0aW9uOiAxMiB9LCB7IHdpc2RvbTogMTEgfSwgeyBjaGFyaXNtYTogMTIgfV0sXG4gICAgICAgIHNraWxsc2F2ZXM6IFt7IHBlcmNlcHRpb246IDExIH1dLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6XG4gICAgICAgICAgICBcInJhZGlhbnQ7IGJsdWRnZW9uaW5nLCBwaWVyY2luZywgYW5kIHNsYXNoaW5nIGZyb20gbm9ubWFnaWNhbCB3ZWFwb25zXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJjaGFybWVkLCBleGhhdXN0aW9uLCBmcmlnaHRlbmVkXCIsXG4gICAgICAgIHNlbnNlczogXCJ0cnVlc2lnaHQgMTIwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDIxXCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJhbGwsIHRlbGVwYXRoeSAxMjAgZnQuXCIsXG4gICAgICAgIGNyOiBcIjE2XCIsXG4gICAgICAgIHRyYWl0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQW5nZWxpYyBXZWFwb25zXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgcGxhbmV0YXIncyB3ZWFwb24gYXR0YWNrcyBhcmUgbWFnaWNhbC4gV2hlbiB0aGUgcGxhbmV0YXIgaGl0cyB3aXRoIGFueSB3ZWFwb24sIHRoZSB3ZWFwb24gZGVhbHMgYW4gZXh0cmEgNWQ4IHJhZGlhbnQgZGFtYWdlIChpbmNsdWRlZCBpbiB0aGUgYXR0YWNrKS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJEaXZpbmUgQXdhcmVuZXNzXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgcGxhbmV0YXIga25vd3MgaWYgaXQgaGVhcnMgYSBsaWUuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiSW5uYXRlIFNwZWxsY2FzdGluZ1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIHBsYW5ldGFyJ3Mgc3BlbGxjYXN0aW5nIGFiaWxpdHkgaXMgQ2hhcmlzbWEgKHNwZWxsIHNhdmUgREMgMjApLiBUaGUgcGxhbmV0YXIgY2FuIGlubmF0ZWx5IGNhc3QgdGhlIGZvbGxvd2luZyBzcGVsbHMsIHJlcXVpcmluZyBubyBtYXRlcmlhbCBjb21wb25lbnRzOlxcXFxuQXQgd2lsbDogZGV0ZWN0IGV2aWwgYW5kIGdvb2QsIGludmlzaWJpbGl0eSAoc2VsZiBvbmx5KVxcXFxuMy9kYXkgZWFjaDogYmxhZGUgYmFycmllciwgZGlzcGVsIGV2aWwgYW5kIGdvb2QsIGZsYW1lIHN0cmlrZSwgcmFpc2UgZGVhZFxcXFxuMS9kYXkgZWFjaDogY29tbXVuZSwgY29udHJvbCB3ZWF0aGVyLCBpbnNlY3QgcGxhZ3VlXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTWFnaWMgUmVzaXN0YW5jZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIHBsYW5ldGFyIGhhcyBhZHZhbnRhZ2Ugb24gc2F2aW5nIHRocm93cyBhZ2FpbnN0IHNwZWxscyBhbmQgb3RoZXIgbWFnaWNhbCBlZmZlY3RzLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJNdWx0aWF0dGFja1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIHBsYW5ldGFyIG1ha2VzIHR3byBtZWxlZSBhdHRhY2tzLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkdyZWF0c3dvcmRcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICsxMiB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDIxICg0ZDYgKyA3KSBzbGFzaGluZyBkYW1hZ2UgcGx1cyAyMiAoNWQ4KSByYWRpYW50IGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDEyLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjRkNiArIDVkOFwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogN1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkhlYWxpbmcgVG91Y2ggKDQvRGF5KVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIHBsYW5ldGFyIHRvdWNoZXMgYW5vdGhlciBjcmVhdHVyZS4gVGhlIHRhcmdldCBtYWdpY2FsbHkgcmVnYWlucyAzMCAoNmQ4ICsgMykgaGl0IHBvaW50cyBhbmQgaXMgZnJlZWQgZnJvbSBhbnkgY3Vyc2UsIGRpc2Vhc2UsIHBvaXNvbiwgYmxpbmRuZXNzLCBvciBkZWFmbmVzcy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIlBsZXNpb3NhdXJ1c1wiLFxuICAgICAgICBzaXplOiBcIkxhcmdlXCIsXG4gICAgICAgIHR5cGU6IFwiYmVhc3RcIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcInVuYWxpZ25lZFwiLFxuICAgICAgICBhYzogMTMsXG4gICAgICAgIGhwOiA2OCxcbiAgICAgICAgaGl0X2RpY2U6IFwiOGQxMCArIDI0XCIsXG4gICAgICAgIHNwZWVkOiBcIjIwIGZ0Liwgc3dpbSA0MCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsxOCwgMTUsIDE2LCAyLCAxMiwgNV0sXG4gICAgICAgIHNraWxsc2F2ZXM6IFt7IHBlcmNlcHRpb246IDMgfSwgeyBzdGVhbHRoOiA0IH1dLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcbiAgICAgICAgc2Vuc2VzOiBcInBhc3NpdmUgUGVyY2VwdGlvbiAxM1wiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiXCIsXG4gICAgICAgIGNyOiBcIjJcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJIb2xkIEJyZWF0aFwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIHBsZXNpb3NhdXJ1cyBjYW4gaG9sZCBpdHMgYnJlYXRoIGZvciAxIGhvdXIuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkJpdGVcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs2IHRvIGhpdCwgcmVhY2ggMTAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDE0ICgzZDYgKyA0KSBwaWVyY2luZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA2LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjNkNlwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogNFxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiUG9pc29ub3VzIFNuYWtlXCIsXG4gICAgICAgIHNpemU6IFwiVGlueVwiLFxuICAgICAgICB0eXBlOiBcImJlYXN0XCIsXG4gICAgICAgIHN1YnR5cGU6IFwiXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcbiAgICAgICAgYWM6IDEzLFxuICAgICAgICBocDogMixcbiAgICAgICAgaGl0X2RpY2U6IFwiMWQ0ICsgLTFcIixcbiAgICAgICAgc3BlZWQ6IFwiMzAgZnQuLCBzd2ltIDMwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzIsIDE2LCAxMSwgMSwgMTAsIDNdLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcbiAgICAgICAgc2Vuc2VzOiBcImJsaW5kc2lnaHQgMTAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTBcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcIlwiLFxuICAgICAgICBjcjogXCIxLzhcIixcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQml0ZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzUgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxIHBpZXJjaW5nIGRhbWFnZSwgYW5kIHRoZSB0YXJnZXQgbXVzdCBtYWtlIGEgREMgMTAgQ29uc3RpdHV0aW9uIHNhdmluZyB0aHJvdywgdGFraW5nIDUgKDJkNCkgcG9pc29uIGRhbWFnZSBvbiBhIGZhaWxlZCBzYXZlLCBvciBoYWxmIGFzIG11Y2ggZGFtYWdlIG9uIGEgc3VjY2Vzc2Z1bCBvbmUuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA1LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogMVxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiUG9sYXIgQmVhclwiLFxuICAgICAgICBzaXplOiBcIkxhcmdlXCIsXG4gICAgICAgIHR5cGU6IFwiYmVhc3RcIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcInVuYWxpZ25lZFwiLFxuICAgICAgICBhYzogMTIsXG4gICAgICAgIGhwOiA0MixcbiAgICAgICAgaGl0X2RpY2U6IFwiNWQxMCArIDE0XCIsXG4gICAgICAgIHNwZWVkOiBcIjQwIGZ0Liwgc3dpbSAzMCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsyMCwgMTAsIDE2LCAyLCAxMywgN10sXG4gICAgICAgIHNraWxsc2F2ZXM6IFt7IHBlcmNlcHRpb246IDMgfV0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBzZW5zZXM6IFwicGFzc2l2ZSBQZXJjZXB0aW9uIDEzXCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJcIixcbiAgICAgICAgY3I6IFwiMlwiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIktlZW4gU21lbGxcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBiZWFyIGhhcyBhZHZhbnRhZ2Ugb24gV2lzZG9tIChQZXJjZXB0aW9uKSBjaGVja3MgdGhhdCByZWx5IG9uIHNtZWxsLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJNdWx0aWF0dGFja1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGJlYXIgbWFrZXMgdHdvIGF0dGFja3M6IG9uZSB3aXRoIGl0cyBiaXRlIGFuZCBvbmUgd2l0aCBpdHMgY2xhd3MuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQml0ZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzcgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiA5ICgxZDggKyA1KSBwaWVyY2luZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA3LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjFkOFwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogNVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkNsYXdzXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNyB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDEyICgyZDYgKyA1KSBzbGFzaGluZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA3LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjJkNlwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogNVxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiUG9ueVwiLFxuICAgICAgICBzaXplOiBcIk1lZGl1bVwiLFxuICAgICAgICB0eXBlOiBcImJlYXN0XCIsXG4gICAgICAgIHN1YnR5cGU6IFwiXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcbiAgICAgICAgYWM6IDEwLFxuICAgICAgICBocDogMTEsXG4gICAgICAgIGhpdF9kaWNlOiBcIjJkOCArIDJcIixcbiAgICAgICAgc3BlZWQ6IFwiNDAgZnQuXCIsXG4gICAgICAgIHN0YXRzOiBbMTUsIDEwLCAxMywgMiwgMTEsIDddLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcbiAgICAgICAgc2Vuc2VzOiBcInBhc3NpdmUgUGVyY2VwdGlvbiAxMFwiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiXCIsXG4gICAgICAgIGNyOiBcIjEvOFwiLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJIb292ZXNcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs0IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogNyAoMmQ0ICsgMikgYmx1ZGdlb25pbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIyZDRcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIlByaWVzdFwiLFxuICAgICAgICBzaXplOiBcIk1lZGl1bVwiLFxuICAgICAgICB0eXBlOiBcImh1bWFub2lkXCIsXG4gICAgICAgIHN1YnR5cGU6IFwiYW55IHJhY2VcIixcbiAgICAgICAgYWxpZ25tZW50OiBcImFueSBhbGlnbm1lbnRcIixcbiAgICAgICAgYWM6IDEzLFxuICAgICAgICBocDogMjcsXG4gICAgICAgIGhpdF9kaWNlOiBcIjVkOCArIDRcIixcbiAgICAgICAgc3BlZWQ6IFwiMjUgZnQuXCIsXG4gICAgICAgIHN0YXRzOiBbMTAsIDEwLCAxMiwgMTMsIDE2LCAxM10sXG4gICAgICAgIHNraWxsc2F2ZXM6IFt7IG1lZGljaW5lOiA3IH0sIHsgcGVyc3Vhc2lvbjogMyB9LCB7IHJlbGlnaW9uOiA0IH1dLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcbiAgICAgICAgc2Vuc2VzOiBcInBhc3NpdmUgUGVyY2VwdGlvbiAxM1wiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiYW55IHR3byBsYW5ndWFnZXNcIixcbiAgICAgICAgY3I6IFwiMlwiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkRpdmluZSBFbWluZW5jZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiQXMgYSBib251cyBhY3Rpb24sIHRoZSBwcmllc3QgY2FuIGV4cGVuZCBhIHNwZWxsIHNsb3QgdG8gY2F1c2UgaXRzIG1lbGVlIHdlYXBvbiBhdHRhY2tzIHRvIG1hZ2ljYWxseSBkZWFsIGFuIGV4dHJhIDEwICgzZDYpIHJhZGlhbnQgZGFtYWdlIHRvIGEgdGFyZ2V0IG9uIGEgaGl0LiBUaGlzIGJlbmVmaXQgbGFzdHMgdW50aWwgdGhlIGVuZCBvZiB0aGUgdHVybi4gSWYgdGhlIHByaWVzdCBleHBlbmRzIGEgc3BlbGwgc2xvdCBvZiAybmQgbGV2ZWwgb3IgaGlnaGVyLCB0aGUgZXh0cmEgZGFtYWdlIGluY3JlYXNlcyBieSAxZDYgZm9yIGVhY2ggbGV2ZWwgYWJvdmUgMXN0LlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIzZDZcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJNYWNlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMiB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDMgKDFkNikgYmx1ZGdlb25pbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIxZDZcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBzcGVsbHM6IFtcbiAgICAgICAgICAgIFwiVGhlIHByaWVzdCBpcyBhIDV0aC1sZXZlbCBzcGVsbGNhc3Rlci4gSXRzIHNwZWxsY2FzdGluZyBhYmlsaXR5IGlzIFdpc2RvbSAoc3BlbGwgc2F2ZSBEQyAxMywgKzUgdG8gaGl0IHdpdGggc3BlbGwgYXR0YWNrcykuIFRoZSBwcmllc3QgaGFzIHRoZSBmb2xsb3dpbmcgY2xlcmljIHNwZWxscyBwcmVwYXJlZDpcIixcbiAgICAgICAgICAgIHsgXCJDYW50cmlwcyAoYXQgd2lsbClcIjogXCJsaWdodCwgc2FjcmVkIGZsYW1lLCB0aGF1bWF0dXJneVwiIH0sXG4gICAgICAgICAgICB7IFwiMXN0IGxldmVsICg0IHNsb3RzKVwiOiBcImN1cmUgd291bmRzLCBndWlkaW5nIGJvbHQsIHNhbmN0dWFyeVwiIH0sXG4gICAgICAgICAgICB7IFwiMm5kIGxldmVsICgzIHNsb3RzKVwiOiBcImxlc3NlciByZXN0b3JhdGlvbiwgc3Bpcml0dWFsIHdlYXBvblwiIH0sXG4gICAgICAgICAgICB7IFwiM3JkIGxldmVsICgyIHNsb3RzKVwiOiBcImRpc3BlbCBtYWdpYywgc3Bpcml0IGd1YXJkaWFuc1wiIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIlBzZXVkb2RyYWdvblwiLFxuICAgICAgICBzaXplOiBcIlRpbnlcIixcbiAgICAgICAgdHlwZTogXCJkcmFnb25cIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcIm5ldXRyYWwgZ29vZFwiLFxuICAgICAgICBhYzogMTMsXG4gICAgICAgIGhwOiA3LFxuICAgICAgICBoaXRfZGljZTogXCIyZDQgKyAyXCIsXG4gICAgICAgIHNwZWVkOiBcIjE1IGZ0LiwgZmx5IDYwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzYsIDE1LCAxMywgMTAsIDEyLCAxMF0sXG4gICAgICAgIHNraWxsc2F2ZXM6IFt7IHBlcmNlcHRpb246IDMgfSwgeyBzdGVhbHRoOiA0IH1dLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcbiAgICAgICAgc2Vuc2VzOiBcImJsaW5kc2lnaHQgMTAgZnQuLCBkYXJrdmlzaW9uIDYwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDEzXCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJ1bmRlcnN0YW5kcyBDb21tb24gYW5kIERyYWNvbmljIGJ1dCBjYW4ndCBzcGVha1wiLFxuICAgICAgICBjcjogXCIxLzRcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJLZWVuIFNlbnNlc1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIHBzZXVkb2RyYWdvbiBoYXMgYWR2YW50YWdlIG9uIFdpc2RvbSAoUGVyY2VwdGlvbikgY2hlY2tzIHRoYXQgcmVseSBvbiBzaWdodCwgaGVhcmluZywgb3Igc21lbGwuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTWFnaWMgUmVzaXN0YW5jZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIHBzZXVkb2RyYWdvbiBoYXMgYWR2YW50YWdlIG9uIHNhdmluZyB0aHJvd3MgYWdhaW5zdCBzcGVsbHMgYW5kIG90aGVyIG1hZ2ljYWwgZWZmZWN0cy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJMaW1pdGVkIFRlbGVwYXRoeVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIHBzZXVkb2RyYWdvbiBjYW4gbWFnaWNhbGx5IGNvbW11bmljYXRlIHNpbXBsZSBpZGVhcywgZW1vdGlvbnMsIGFuZCBpbWFnZXMgdGVsZXBhdGhpY2FsbHkgd2l0aCBhbnkgY3JlYXR1cmUgd2l0aGluIDEwMCBmdC4gb2YgaXQgdGhhdCBjYW4gdW5kZXJzdGFuZCBhIGxhbmd1YWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlZhcmlhbnQ6IEZhbWlsaWFyXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgcHNldWRvZHJhZ29uIGNhbiBzZXJ2ZSBhbm90aGVyIGNyZWF0dXJlIGFzIGEgZmFtaWxpYXIsIGZvcm1pbmcgYSBtYWdpYywgdGVsZXBhdGhpYyBib25kIHdpdGggdGhhdCB3aWxsaW5nIGNvbXBhbmlvbi4gV2hpbGUgdGhlIHR3byBhcmUgYm9uZGVkLCB0aGUgY29tcGFuaW9uIGNhbiBzZW5zZSB3aGF0IHRoZSBwc2V1ZG9kcmFnb24gc2Vuc2VzIGFzIGxvbmcgYXMgdGhleSBhcmUgd2l0aGluIDEgbWlsZSBvZiBlYWNoIG90aGVyLiBXaGlsZSB0aGUgcHNldWRvZHJhZ29uIGlzIHdpdGhpbiAxMCBmZWV0IG9mIGl0cyBjb21wYW5pb24sIHRoZSBjb21wYW5pb24gc2hhcmVzIHRoZSBwc2V1ZG9kcmFnb24ncyBNYWdpYyBSZXNpc3RhbmNlIHRyYWl0LiBBdCBhbnkgdGltZSBhbmQgZm9yIGFueSByZWFzb24sIHRoZSBwc2V1ZG9kcmFnb24gY2FuIGVuZCBpdHMgc2VydmljZSBhcyBhIGZhbWlsaWFyLCBlbmRpbmcgdGhlIHRlbGVwYXRoaWMgYm9uZC5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQml0ZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzQgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiA0ICgxZDQgKyAyKSBwaWVyY2luZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA0LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjFkNFwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogMlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlN0aW5nXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNCB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgY3JlYXR1cmUuIEhpdDogNCAoMWQ0ICsgMikgcGllcmNpbmcgZGFtYWdlLCBhbmQgdGhlIHRhcmdldCBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxMSBDb25zdGl0dXRpb24gc2F2aW5nIHRocm93IG9yIGJlY29tZSBwb2lzb25lZCBmb3IgMSBob3VyLiBJZiB0aGUgc2F2aW5nIHRocm93IGZhaWxzIGJ5IDUgb3IgbW9yZSwgdGhlIHRhcmdldCBmYWxscyB1bmNvbnNjaW91cyBmb3IgdGhlIHNhbWUgZHVyYXRpb24sIG9yIHVudGlsIGl0IHRha2VzIGRhbWFnZSBvciBhbm90aGVyIGNyZWF0dXJlIHVzZXMgYW4gYWN0aW9uIHRvIHNoYWtlIGl0IGF3YWtlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIxZDRcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIlB1cnBsZSBXb3JtXCIsXG4gICAgICAgIHNpemU6IFwiR2FyZ2FudHVhblwiLFxuICAgICAgICB0eXBlOiBcIm1vbnN0cm9zaXR5XCIsXG4gICAgICAgIHN1YnR5cGU6IFwiXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcbiAgICAgICAgYWM6IDE4LFxuICAgICAgICBocDogMjQ3LFxuICAgICAgICBoaXRfZGljZTogXCIxNWQyMCArIDg5XCIsXG4gICAgICAgIHNwZWVkOiBcIjUwIGZ0LiwgYnVycm93IDMwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzI4LCA3LCAyMiwgMSwgOCwgNF0sXG4gICAgICAgIHNhdmVzOiBbeyBjb25zdGl0dXRpb246IDExIH0sIHsgd2lzZG9tOiA0IH1dLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcbiAgICAgICAgc2Vuc2VzOiBcImJsaW5kc2lnaHQgMzAgZnQuLCB0cmVtb3JzZW5zZSA2MCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiA5XCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJcIixcbiAgICAgICAgY3I6IFwiMTVcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJUdW5uZWxlclwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIHdvcm0gY2FuIGJ1cnJvdyB0aHJvdWdoIHNvbGlkIHJvY2sgYXQgaGFsZiBpdHMgYnVycm93IHNwZWVkIGFuZCBsZWF2ZXMgYSAxMC1mb290LWRpYW1ldGVyIHR1bm5lbCBpbiBpdHMgd2FrZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSB3b3JtIG1ha2VzIHR3byBhdHRhY2tzOiBvbmUgd2l0aCBpdHMgYml0ZSBhbmQgb25lIHdpdGggaXRzIHN0aW5nZXIuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQml0ZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzkgdG8gaGl0LCByZWFjaCAxMCBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMjIgKDNkOCArIDkpIHBpZXJjaW5nIGRhbWFnZS4gSWYgdGhlIHRhcmdldCBpcyBhIExhcmdlIG9yIHNtYWxsZXIgY3JlYXR1cmUsIGl0IG11c3Qgc3VjY2VlZCBvbiBhIERDIDE5IERleHRlcml0eSBzYXZpbmcgdGhyb3cgb3IgYmUgc3dhbGxvd2VkIGJ5IHRoZSB3b3JtLiBBIHN3YWxsb3dlZCBjcmVhdHVyZSBpcyBibGluZGVkIGFuZCByZXN0cmFpbmVkLCBpdCBoYXMgdG90YWwgY292ZXIgYWdhaW5zdCBhdHRhY2tzIGFuZCBvdGhlciBlZmZlY3RzIG91dHNpZGUgdGhlIHdvcm0sIGFuZCBpdCB0YWtlcyAyMSAoNmQ2KSBhY2lkIGRhbWFnZSBhdCB0aGUgc3RhcnQgb2YgZWFjaCBvZiB0aGUgd29ybSdzIHR1cm5zLlxcXFxuSWYgdGhlIHdvcm0gdGFrZXMgMzAgZGFtYWdlIG9yIG1vcmUgb24gYSBzaW5nbGUgdHVybiBmcm9tIGEgY3JlYXR1cmUgaW5zaWRlIGl0LCB0aGUgd29ybSBtdXN0IHN1Y2NlZWQgb24gYSBEQyAyMSBDb25zdGl0dXRpb24gc2F2aW5nIHRocm93IGF0IHRoZSBlbmQgb2YgdGhhdCB0dXJuIG9yIHJlZ3VyZ2l0YXRlIGFsbCBzd2FsbG93ZWQgY3JlYXR1cmVzLCB3aGljaCBmYWxsIHByb25lIGluIGEgc3BhY2Ugd2l0aGluIDEwIGZlZXQgb2YgdGhlIHdvcm0uIElmIHRoZSB3b3JtIGRpZXMsIGEgc3dhbGxvd2VkIGNyZWF0dXJlIGlzIG5vIGxvbmdlciByZXN0cmFpbmVkIGJ5IGl0IGFuZCBjYW4gZXNjYXBlIGZyb20gdGhlIGNvcnBzZSBieSB1c2luZyAyMCBmZWV0IG9mIG1vdmVtZW50LCBleGl0aW5nIHByb25lLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogOSxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIzZDhcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDlcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJUYWlsIFN0aW5nZXJcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs5IHRvIGhpdCwgcmVhY2ggMTAgZnQuLCBvbmUgY3JlYXR1cmUuIEhpdDogMTkgKDNkNiArIDkpIHBpZXJjaW5nIGRhbWFnZSwgYW5kIHRoZSB0YXJnZXQgbXVzdCBtYWtlIGEgREMgMTkgQ29uc3RpdHV0aW9uIHNhdmluZyB0aHJvdywgdGFraW5nIDQyICgxMmQ2KSBwb2lzb24gZGFtYWdlIG9uIGEgZmFpbGVkIHNhdmUsIG9yIGhhbGYgYXMgbXVjaCBkYW1hZ2Ugb24gYSBzdWNjZXNzZnVsIG9uZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDksXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiM2Q2XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiA5XG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJRdWFzaXRcIixcbiAgICAgICAgc2l6ZTogXCJUaW55XCIsXG4gICAgICAgIHR5cGU6IFwiZmllbmRcIixcbiAgICAgICAgc3VidHlwZTogXCJkZW1vblwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwiY2hhb3RpYyBldmlsXCIsXG4gICAgICAgIGFjOiAxMyxcbiAgICAgICAgaHA6IDcsXG4gICAgICAgIGhpdF9kaWNlOiBcIjNkNCArIC0xXCIsXG4gICAgICAgIHNwZWVkOiBcIjQwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzUsIDE3LCAxMCwgNywgMTAsIDEwXSxcbiAgICAgICAgc2tpbGxzYXZlczogW3sgc3RlYWx0aDogNSB9XSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOlxuICAgICAgICAgICAgXCJjb2xkOyBmaXJlOyBsaWdodG5pbmc7IGJsdWRnZW9uaW5nLCBwaWVyY2luZywgYW5kIHNsYXNoaW5nIGZyb20gbm9ubWFnaWNhbCB3ZWFwb25zXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcInBvaXNvblwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJwb2lzb25lZFwiLFxuICAgICAgICBzZW5zZXM6IFwiZGFya3Zpc2lvbiAxMjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTBcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcIkFieXNzYWwsIENvbW1vblwiLFxuICAgICAgICBjcjogXCIxXCIsXG4gICAgICAgIHRyYWl0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiU2hhcGVjaGFuZ2VyXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgcXVhc2l0IGNhbiB1c2UgaXRzIGFjdGlvbiB0byBwb2x5bW9ycGggaW50byBhIGJlYXN0IGZvcm0gdGhhdCByZXNlbWJsZXMgYSBiYXQgKHNwZWVkIDEwIGZ0LiBmbHkgNDAgZnQuKSwgYSBjZW50aXBlZGUgKDQwIGZ0LiwgY2xpbWIgNDAgZnQuKSwgb3IgYSB0b2FkICg0MCBmdC4sIHN3aW0gNDAgZnQuKSwgb3IgYmFjayBpbnRvIGl0cyB0cnVlIGZvcm0gLiBJdHMgc3RhdGlzdGljcyBhcmUgdGhlIHNhbWUgaW4gZWFjaCBmb3JtLCBleGNlcHQgZm9yIHRoZSBzcGVlZCBjaGFuZ2VzIG5vdGVkLiBBbnkgZXF1aXBtZW50IGl0IGlzIHdlYXJpbmcgb3IgY2FycnlpbmcgaXNuJ3QgdHJhbnNmb3JtZWQgLiBJdCByZXZlcnRzIHRvIGl0cyB0cnVlIGZvcm0gaWYgaXQgZGllcy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJNYWdpYyBSZXNpc3RhbmNlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgcXVhc2l0IGhhcyBhZHZhbnRhZ2Ugb24gc2F2aW5nIHRocm93cyBhZ2FpbnN0IHNwZWxscyBhbmQgb3RoZXIgbWFnaWNhbCBlZmZlY3RzLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlZhcmlhbnQ6IEZhbWlsaWFyXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgcXVhc2l0IGNhbiBzZXJ2ZSBhbm90aGVyIGNyZWF0dXJlIGFzIGEgZmFtaWxpYXIsIGZvcm1pbmcgYSB0ZWxlcGF0aGljIGJvbmQgd2l0aCBpdHMgd2lsbGluZyBtYXN0ZXIuIFdoaWxlIHRoZSB0d28gYXJlIGJvbmRlZCwgdGhlIG1hc3RlciBjYW4gc2Vuc2Ugd2hhdCB0aGUgcXVhc2l0IHNlbnNlcyBhcyBsb25nIGFzIHRoZXkgYXJlIHdpdGhpbiAxIG1pbGUgb2YgZWFjaCBvdGhlci4gV2hpbGUgdGhlIHF1YXNpdCBpcyB3aXRoaW4gMTAgZmVldCBvZiBpdHMgbWFzdGVyLCB0aGUgbWFzdGVyIHNoYXJlcyB0aGUgcXVhc2l0J3MgTWFnaWMgUmVzaXN0YW5jZSB0cmFpdC4gQXQgYW55IHRpbWUgYW5kIGZvciBhbnkgcmVhc29uLCB0aGUgcXVhc2l0IGNhbiBlbmQgaXRzIHNlcnZpY2UgYXMgYSBmYW1pbGlhciwgZW5kaW5nIHRoZSB0ZWxlcGF0aGljIGJvbmQuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkNsYXcgKEJpdGUgaW4gQmVhc3QgRm9ybSlcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs0IHRvIGhpdCwgcmVhY2ggNSBmdCAuLCBvbmUgdGFyZ2V0LiBIaXQ6IDUgKDFkNCArIDMpIHBpZXJjaW5nIGRhbWFnZSwgYW5kIHRoZSB0YXJnZXQgbXVzdCBzdWNjZWVkIG9uIGEgREMgMTAgQ29uc3RpdHV0aW9uIHNhdmluZyB0aHJvdyBvciB0YWtlIDUgKDJkNCkgcG9pc29uIGRhbWFnZSBhbmQgYmVjb21lIHBvaXNvbmVkIGZvciAxIG1pbnV0ZS4gVGhlIHRhcmdldCBjYW4gcmVwZWF0IHRoZSBzYXZpbmcgdGhyb3cgYXQgdGhlIGVuZCBvZiBlYWNoIG9mIGl0cyB0dXJucywgZW5kaW5nIHRoZSBlZmZlY3Qgb24gaXRzZWxmIG9uIGEgc3VjY2Vzcy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDQsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMWQ0XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiAzXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiU2NhcmUgKDEvZGF5KVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiT25lIGNyZWF0dXJlIG9mIHRoZSBxdWFzaXQncyBjaG9pY2Ugd2l0aGluIDIwIGZ0LiBvZiBpdCBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxMCBXaXNkb20gc2F2aW5nIHRocm93IG9yIGJlIGZyaWdodGVuZWQgZm9yIDEgbWludXRlLiBUaGUgdGFyZ2V0IGNhbiByZXBlYXQgdGhlIHNhdmluZyB0aHJvdyBhdCB0aGUgZW5kIG9mIGVhY2ggb2YgaXRzIHR1cm5zLCB3aXRoIGRpc2FkdmFudGFnZSBpZiB0aGUgcXVhc2l0IGlzIHdpdGhpbiBsaW5lIG9mIHNpZ2h0LCBlbmRpbmcgdGhlIGVmZmVjdCBvbiBpdHNlbGYgb24gYSBzdWNjZXNzLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkludmlzaWJpbGl0eVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIHF1YXNpdCBtYWdpY2FsbHkgdHVybnMgaW52aXNpYmxlIHVudGlsIGl0IGF0dGFja3Mgb3IgdXNlcyBTY2FyZSwgb3IgdW50aWwgaXRzIGNvbmNlbnRyYXRpb24gZW5kcyAoYXMgaWYgY29uY2VudHJhdGluZyBvbiBhIHNwZWxsKS4gQW55IGVxdWlwbWVudCB0aGUgcXVhc2l0IHdlYXJzIG9yIGNhcnJpZXMgaXMgaW52aXNpYmxlIHdpdGggaXQuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJRdWlwcGVyXCIsXG4gICAgICAgIHNpemU6IFwiVGlueVwiLFxuICAgICAgICB0eXBlOiBcImJlYXN0XCIsXG4gICAgICAgIHN1YnR5cGU6IFwiXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcbiAgICAgICAgYWM6IDEzLFxuICAgICAgICBocDogMSxcbiAgICAgICAgaGl0X2RpY2U6IFwiMWQ0ICsgLTJcIixcbiAgICAgICAgc3BlZWQ6IFwic3dpbSA0MCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsyLCAxNiwgOSwgMSwgNywgMl0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBzZW5zZXM6IFwiZGFya3Zpc2lvbiA2MCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiA4XCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJcIixcbiAgICAgICAgY3I6IFwiMFwiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkJsb29kIEZyZW56eVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIHF1aXBwZXIgaGFzIGFkdmFudGFnZSBvbiBtZWxlZSBhdHRhY2sgcm9sbHMgYWdhaW5zdCBhbnkgY3JlYXR1cmUgdGhhdCBkb2Vzbid0IGhhdmUgYWxsIGl0cyBoaXQgcG9pbnRzLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIldhdGVyIEJyZWF0aGluZ1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIHF1aXBwZXIgY2FuIGJyZWF0aGUgb25seSB1bmRlcndhdGVyLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJCaXRlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNSB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDEgcGllcmNpbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNSxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDFcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIlJha3NoYXNhXCIsXG4gICAgICAgIHNpemU6IFwiTWVkaXVtXCIsXG4gICAgICAgIHR5cGU6IFwiZmllbmRcIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcImxhd2Z1bCBldmlsXCIsXG4gICAgICAgIGFjOiAxNixcbiAgICAgICAgaHA6IDExMCxcbiAgICAgICAgaGl0X2RpY2U6IFwiMTNkOCArIDUxXCIsXG4gICAgICAgIHNwZWVkOiBcIjQwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzE0LCAxNywgMTgsIDEzLCAxNiwgMjBdLFxuICAgICAgICBza2lsbHNhdmVzOiBbeyBkZWNlcHRpb246IDEwIH0sIHsgaW5zaWdodDogOCB9XSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczpcbiAgICAgICAgICAgIFwicGllcmNpbmcgZnJvbSBtYWdpYyB3ZWFwb25zIHdpZWxkZWQgYnkgZ29vZCBjcmVhdHVyZXNcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczpcbiAgICAgICAgICAgIFwiYmx1ZGdlb25pbmcsIHBpZXJjaW5nLCBhbmQgc2xhc2hpbmcgZnJvbSBub25tYWdpY2FsIHdlYXBvbnNcIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIHNlbnNlczogXCJkYXJrdmlzaW9uIDYwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDEzXCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJDb21tb24sIEluZmVybmFsXCIsXG4gICAgICAgIGNyOiBcIjEzXCIsXG4gICAgICAgIHRyYWl0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTGltaXRlZCBNYWdpYyBJbW11bml0eVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIHJha3NoYXNhIGNhbid0IGJlIGFmZmVjdGVkIG9yIGRldGVjdGVkIGJ5IHNwZWxscyBvZiA2dGggbGV2ZWwgb3IgbG93ZXIgdW5sZXNzIGl0IHdpc2hlcyB0byBiZS4gSXQgaGFzIGFkdmFudGFnZSBvbiBzYXZpbmcgdGhyb3dzIGFnYWluc3QgYWxsIG90aGVyIHNwZWxscyBhbmQgbWFnaWNhbCBlZmZlY3RzLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIklubmF0ZSBTcGVsbGNhc3RpbmdcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSByYWtzaGFzYSdzIGlubmF0ZSBzcGVsbGNhc3RpbmcgYWJpbGl0eSBpcyBDaGFyaXNtYSAoc3BlbGwgc2F2ZSBEQyAxOCwgKzEwIHRvIGhpdCB3aXRoIHNwZWxsIGF0dGFja3MpLiBUaGUgcmFrc2hhc2EgY2FuIGlubmF0ZWx5IGNhc3QgdGhlIGZvbGxvd2luZyBzcGVsbHMsIHJlcXVpcmluZyBubyBtYXRlcmlhbCBjb21wb25lbnRzOlxcXFxuXFxcXG5BdCB3aWxsOiBkZXRlY3QgdGhvdWdodHMsIGRpc2d1aXNlIHNlbGYsIG1hZ2UgaGFuZCwgbWlub3IgaWxsdXNpb25cXFxcbjMvZGF5IGVhY2g6IGNoYXJtIHBlcnNvbiwgZGV0ZWN0IG1hZ2ljLCBpbnZpc2liaWxpdHksIG1ham9yIGltYWdlLCBzdWdnZXN0aW9uXFxcXG4xL2RheSBlYWNoOiBkb21pbmF0ZSBwZXJzb24sIGZseSwgcGxhbmUgc2hpZnQsIHRydWUgc2VlaW5nXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgcmFrc2hhc2EgbWFrZXMgdHdvIGNsYXcgYXR0YWNrc1wiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkNsYXdcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs3IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogOSAoMmQ2ICsgMikgc2xhc2hpbmcgZGFtYWdlLCBhbmQgdGhlIHRhcmdldCBpcyBjdXJzZWQgaWYgaXQgaXMgYSBjcmVhdHVyZS4gVGhlIG1hZ2ljYWwgY3Vyc2UgdGFrZXMgZWZmZWN0IHdoZW5ldmVyIHRoZSB0YXJnZXQgdGFrZXMgYSBzaG9ydCBvciBsb25nIHJlc3QsIGZpbGxpbmcgdGhlIHRhcmdldCdzIHRob3VnaHRzIHdpdGggaG9ycmlibGUgaW1hZ2VzIGFuZCBkcmVhbXMuIFRoZSBjdXJzZWQgdGFyZ2V0IGdhaW5zIG5vIGJlbmVmaXQgZnJvbSBmaW5pc2hpbmcgYSBzaG9ydCBvciBsb25nIHJlc3QuIFRoZSBjdXJzZSBsYXN0cyB1bnRpbCBpdCBpcyBsaWZ0ZWQgYnkgYSByZW1vdmUgY3Vyc2Ugc3BlbGwgb3Igc2ltaWxhciBtYWdpYy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDcsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMmQ2XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiAyXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJSYXRcIixcbiAgICAgICAgc2l6ZTogXCJUaW55XCIsXG4gICAgICAgIHR5cGU6IFwiYmVhc3RcIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcInVuYWxpZ25lZFwiLFxuICAgICAgICBhYzogMTAsXG4gICAgICAgIGhwOiAxLFxuICAgICAgICBoaXRfZGljZTogXCIxZDQgKyAtMlwiLFxuICAgICAgICBzcGVlZDogXCIyMCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsyLCAxMSwgOSwgMiwgMTAsIDRdLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcbiAgICAgICAgc2Vuc2VzOiBcImRhcmt2aXNpb24gMzAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTBcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcIlwiLFxuICAgICAgICBjcjogXCIwXCIsXG4gICAgICAgIHRyYWl0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiS2VlbiBTbWVsbFwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIHJhdCBoYXMgYWR2YW50YWdlIG9uIFdpc2RvbSAoUGVyY2VwdGlvbikgY2hlY2tzIHRoYXQgcmVseSBvbiBzbWVsbC5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQml0ZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzAgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxIHBpZXJjaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDAsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiAxXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJSYXZlblwiLFxuICAgICAgICBzaXplOiBcIlRpbnlcIixcbiAgICAgICAgdHlwZTogXCJiZWFzdFwiLFxuICAgICAgICBzdWJ0eXBlOiBcIlwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwidW5hbGlnbmVkXCIsXG4gICAgICAgIGFjOiAxMixcbiAgICAgICAgaHA6IDEsXG4gICAgICAgIGhpdF9kaWNlOiBcIjFkNCArIC0yXCIsXG4gICAgICAgIHNwZWVkOiBcIjEwIGZ0LiwgZmx5IDUwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzIsIDE0LCA4LCAyLCAxMiwgNl0sXG4gICAgICAgIHNraWxsc2F2ZXM6IFt7IHBlcmNlcHRpb246IDMgfV0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBzZW5zZXM6IFwicGFzc2l2ZSBQZXJjZXB0aW9uIDEzXCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJcIixcbiAgICAgICAgY3I6IFwiMFwiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk1pbWljcnlcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSByYXZlbiBjYW4gbWltaWMgc2ltcGxlIHNvdW5kcyBpdCBoYXMgaGVhcmQsIHN1Y2ggYXMgYSBwZXJzb24gd2hpc3BlcmluZywgYSBiYWJ5IGNyeWluZywgb3IgYW4gYW5pbWFsIGNoaXR0ZXJpbmcuIEEgY3JlYXR1cmUgdGhhdCBoZWFycyB0aGUgc291bmRzIGNhbiB0ZWxsIHRoZXkgYXJlIGltaXRhdGlvbnMgd2l0aCBhIHN1Y2Nlc3NmdWwgREMgMTAgV2lzZG9tIChJbnNpZ2h0KSBjaGVjay5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQmVha1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzQgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxIHBpZXJjaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIlJlZCBEcmFnb24gV3lybWxpbmdcIixcbiAgICAgICAgc2l6ZTogXCJNZWRpdW1cIixcbiAgICAgICAgdHlwZTogXCJkcmFnb25cIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcImNoYW90aWMgZXZpbFwiLFxuICAgICAgICBhYzogMTcsXG4gICAgICAgIGhwOiA3NSxcbiAgICAgICAgaGl0X2RpY2U6IFwiMTBkOCArIDMwXCIsXG4gICAgICAgIHNwZWVkOiBcIjMwIGZ0LiwgY2xpbWIgMzAgZnQuLCBmbHkgNjAgZnQuXCIsXG4gICAgICAgIHN0YXRzOiBbMTksIDEwLCAxNywgMTIsIDExLCAxNV0sXG4gICAgICAgIHNhdmVzOiBbXG4gICAgICAgICAgICB7IGRleHRlcml0eTogMiB9LFxuICAgICAgICAgICAgeyBjb25zdGl0dXRpb246IDUgfSxcbiAgICAgICAgICAgIHsgd2lzZG9tOiAyIH0sXG4gICAgICAgICAgICB7IGNoYXJpc21hOiA0IH1cbiAgICAgICAgXSxcbiAgICAgICAgc2tpbGxzYXZlczogW3sgcGVyY2VwdGlvbjogNCB9LCB7IHN0ZWFsdGg6IDIgfV0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwiZmlyZVwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcbiAgICAgICAgc2Vuc2VzOiBcImJsaW5kc2lnaHQgMTAgZnQuLCBkYXJrdmlzaW9uIDYwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDE0XCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJEcmFjb25pY1wiLFxuICAgICAgICBjcjogXCI0XCIsXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkJpdGVcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs2IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogOSAoMWQxMCArIDQpIHBpZXJjaW5nIGRhbWFnZSBwbHVzIDMgKDFkNikgZmlyZSBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA2LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjFkMTAgKyAxZDZcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDRcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJGaXJlIEJyZWF0aCAoUmVjaGFyZ2UgNS02KVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGRyYWdvbiBleGhhbGVzIGZpcmUgaW4gYSAxNS1mb290IGNvbmUuIEVhY2ggY3JlYXR1cmUgaW4gdGhhdCBhcmVhIG11c3QgbWFrZSBhIERDIDEzIERleHRlcml0eSBzYXZpbmcgdGhyb3csIHRha2luZyAyNCAoN2Q2KSBmaXJlIGRhbWFnZSBvbiBhIGZhaWxlZCBzYXZlLCBvciBoYWxmIGFzIG11Y2ggZGFtYWdlIG9uIGEgc3VjY2Vzc2Z1bCBvbmUuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjdkNlwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJSZWVmIFNoYXJrXCIsXG4gICAgICAgIHNpemU6IFwiTWVkaXVtXCIsXG4gICAgICAgIHR5cGU6IFwiYmVhc3RcIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcInVuYWxpZ25lZFwiLFxuICAgICAgICBhYzogMTIsXG4gICAgICAgIGhwOiAyMixcbiAgICAgICAgaGl0X2RpY2U6IFwiNGQ4ICsgNFwiLFxuICAgICAgICBzcGVlZDogXCJzd2ltIDQwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzE0LCAxMywgMTMsIDEsIDEwLCA0XSxcbiAgICAgICAgc2tpbGxzYXZlczogW3sgcGVyY2VwdGlvbjogMiB9XSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIHNlbnNlczogXCJibGluZHNpZ2h0IDMwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDEyXCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJcIixcbiAgICAgICAgY3I6IFwiMS8yXCIsXG4gICAgICAgIHRyYWl0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiUGFjayBUYWN0aWNzXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgc2hhcmsgaGFzIGFkdmFudGFnZSBvbiBhbiBhdHRhY2sgcm9sbCBhZ2FpbnN0IGEgY3JlYXR1cmUgaWYgYXQgbGVhc3Qgb25lIG9mIHRoZSBzaGFyaydzIGFsbGllcyBpcyB3aXRoaW4gNSBmdC4gb2YgdGhlIGNyZWF0dXJlIGFuZCB0aGUgYWxseSBpc24ndCBpbmNhcGFjaXRhdGVkLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIldhdGVyIEJyZWF0aGluZ1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIHNoYXJrIGNhbiBicmVhdGhlIG9ubHkgdW5kZXJ3YXRlci5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQml0ZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzQgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiA2ICgxZDggKyAyKSBwaWVyY2luZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA0LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjFkOFwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogMlxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiUmVtb3JoYXpcIixcbiAgICAgICAgc2l6ZTogXCJIdWdlXCIsXG4gICAgICAgIHR5cGU6IFwibW9uc3Ryb3NpdHlcIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcInVuYWxpZ25lZFwiLFxuICAgICAgICBhYzogMTcsXG4gICAgICAgIGhwOiAxOTUsXG4gICAgICAgIGhpdF9kaWNlOiBcIjE3ZDEyICsgODRcIixcbiAgICAgICAgc3BlZWQ6IFwiMzAgZnQuLCBidXJyb3cgMjAgZnQuXCIsXG4gICAgICAgIHN0YXRzOiBbMjQsIDEzLCAyMSwgNCwgMTAsIDVdLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcImNvbGQsIGZpcmVcIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIHNlbnNlczogXCJkYXJrdmlzaW9uIDYwIGZ0LiwgdHJlbW9yc2Vuc2UgNjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTBcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcIlwiLFxuICAgICAgICBjcjogXCIxMVwiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkhlYXRlZCBCb2R5XCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJBIGNyZWF0dXJlIHRoYXQgdG91Y2hlcyB0aGUgcmVtb3JoYXogb3IgaGl0cyBpdCB3aXRoIGEgbWVsZWUgYXR0YWNrIHdoaWxlIHdpdGhpbiA1IGZlZXQgb2YgaXQgdGFrZXMgMTAgKDNkNikgZmlyZSBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjNkNlwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkJpdGVcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICsxMSB0byBoaXQsIHJlYWNoIDEwIGZ0Liwgb25lIHRhcmdldC4gSGl0OiA0MCAoNmQxMCArIDcpIHBpZXJjaW5nIGRhbWFnZSBwbHVzIDEwICgzZDYpIGZpcmUgZGFtYWdlLiBJZiB0aGUgdGFyZ2V0IGlzIGEgY3JlYXR1cmUsIGl0IGlzIGdyYXBwbGVkIChlc2NhcGUgREMgMTcpLiBVbnRpbCB0aGlzIGdyYXBwbGUgZW5kcywgdGhlIHRhcmdldCBpcyByZXN0cmFpbmVkLCBhbmQgdGhlIHJlbW9yaGF6IGNhbid0IGJpdGUgYW5vdGhlciB0YXJnZXQuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAxMSxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCI2ZDEwICsgM2Q2XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiA3XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiU3dhbGxvd1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIHJlbW9yaGF6IG1ha2VzIG9uZSBiaXRlIGF0dGFjayBhZ2FpbnN0IGEgTWVkaXVtIG9yIHNtYWxsZXIgY3JlYXR1cmUgaXQgaXMgZ3JhcHBsaW5nLiBJZiB0aGUgYXR0YWNrIGhpdHMsIHRoYXQgY3JlYXR1cmUgdGFrZXMgdGhlIGJpdGUncyBkYW1hZ2UgYW5kIGlzIHN3YWxsb3dlZCwgYW5kIHRoZSBncmFwcGxlIGVuZHMuIFdoaWxlIHN3YWxsb3dlZCwgdGhlIGNyZWF0dXJlIGlzIGJsaW5kZWQgYW5kIHJlc3RyYWluZWQsIGl0IGhhcyB0b3RhbCBjb3ZlciBhZ2FpbnN0IGF0dGFja3MgYW5kIG90aGVyIGVmZmVjdHMgb3V0c2lkZSB0aGUgcmVtb3JoYXosIGFuZCBpdCB0YWtlcyAyMSAoNmQ2KSBhY2lkIGRhbWFnZSBhdCB0aGUgc3RhcnQgb2YgZWFjaCBvZiB0aGUgcmVtb3JoYXoncyB0dXJucy5cXFxcbklmIHRoZSByZW1vcmhheiB0YWtlcyAzMCBkYW1hZ2Ugb3IgbW9yZSBvbiBhIHNpbmdsZSB0dXJuIGZyb20gYSBjcmVhdHVyZSBpbnNpZGUgaXQsIHRoZSByZW1vcmhheiBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxNSBDb25zdGl0dXRpb24gc2F2aW5nIHRocm93IGF0IHRoZSBlbmQgb2YgdGhhdCB0dXJuIG9yIHJlZ3VyZ2l0YXRlIGFsbCBzd2FsbG93ZWQgY3JlYXR1cmVzLCB3aGljaCBmYWxsIHByb25lIGluIGEgc3BhY2Ugd2l0aGluIDEwIGZlZXQgb2Z0IGhlIHJlbW9yaGF6LiBJZiB0aGUgcmVtb3JoYXogZGllcywgYSBzd2FsbG93ZWQgY3JlYXR1cmUgaXMgbm8gbG9uZ2VyIHJlc3RyYWluZWQgYnkgaXQgYW5kIGNhbiBlc2NhcGUgZnJvbSB0aGUgY29ycHNlIHVzaW5nIDE1IGZlZXQgb2YgbW92ZW1lbnQsIGV4aXRpbmcgcHJvbmUuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJSaGlub2Nlcm9zXCIsXG4gICAgICAgIHNpemU6IFwiTGFyZ2VcIixcbiAgICAgICAgdHlwZTogXCJiZWFzdFwiLFxuICAgICAgICBzdWJ0eXBlOiBcIlwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwidW5hbGlnbmVkXCIsXG4gICAgICAgIGFjOiAxMSxcbiAgICAgICAgaHA6IDQ1LFxuICAgICAgICBoaXRfZGljZTogXCI2ZDEwICsgMTJcIixcbiAgICAgICAgc3BlZWQ6IFwiNDAgZnQuXCIsXG4gICAgICAgIHN0YXRzOiBbMjEsIDgsIDE1LCAyLCAxMiwgNl0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBzZW5zZXM6IFwicGFzc2l2ZSBQZXJjZXB0aW9uIDExXCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJcIixcbiAgICAgICAgY3I6IFwiMlwiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkNoYXJnZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiSWYgdGhlIHJoaW5vY2Vyb3MgbW92ZXMgYXQgbGVhc3QgMjAgZnQuIHN0cmFpZ2h0IHRvd2FyZCBhIHRhcmdldCBhbmQgdGhlbiBoaXRzIGl0IHdpdGggYSBnb3JlIGF0dGFjayBvbiB0aGUgc2FtZSB0dXJuLCB0aGUgdGFyZ2V0IHRha2VzIGFuIGV4dHJhIDkgKDJkOCkgYmx1ZGdlb25pbmcgZGFtYWdlLiBJZiB0aGUgdGFyZ2V0IGlzIGEgY3JlYXR1cmUsIGl0IG11c3Qgc3VjY2VlZCBvbiBhIERDIDE1IFN0cmVuZ3RoIHNhdmluZyB0aHJvdyBvciBiZSBrbm9ja2VkIHByb25lLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIyZDhcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJHb3JlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNyB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDE0ICgyZDggKyA1KSBibHVkZ2VvbmluZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA3LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjJkOFwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogNVxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiUmlkaW5nIEhvcnNlXCIsXG4gICAgICAgIHNpemU6IFwiTGFyZ2VcIixcbiAgICAgICAgdHlwZTogXCJiZWFzdFwiLFxuICAgICAgICBzdWJ0eXBlOiBcIlwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwidW5hbGlnbmVkXCIsXG4gICAgICAgIGFjOiAxMCxcbiAgICAgICAgaHA6IDEzLFxuICAgICAgICBoaXRfZGljZTogXCIyZDEwICsgMlwiLFxuICAgICAgICBzcGVlZDogXCI2MCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsxNiwgMTAsIDEyLCAyLCAxMSwgN10sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBzZW5zZXM6IFwicGFzc2l2ZSBQZXJjZXB0aW9uIDEwXCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJcIixcbiAgICAgICAgY3I6IFwiMS80XCIsXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkhvb3Zlc1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzUgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiA4ICgyZDQgKyAzKSBibHVkZ2VvbmluZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA1LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjJkNFwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogM1xuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiUm9jXCIsXG4gICAgICAgIHNpemU6IFwiR2FyZ2FudHVhblwiLFxuICAgICAgICB0eXBlOiBcIm1vbnN0cm9zaXR5XCIsXG4gICAgICAgIHN1YnR5cGU6IFwiXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcbiAgICAgICAgYWM6IDE1LFxuICAgICAgICBocDogMjQ4LFxuICAgICAgICBoaXRfZGljZTogXCIxNmQyMCArIDgwXCIsXG4gICAgICAgIHNwZWVkOiBcIjIwIGZ0LiwgZmx5IDEyMCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsyOCwgMTAsIDIwLCAzLCAxMCwgOV0sXG4gICAgICAgIHNhdmVzOiBbXG4gICAgICAgICAgICB7IGRleHRlcml0eTogNCB9LFxuICAgICAgICAgICAgeyBjb25zdGl0dXRpb246IDkgfSxcbiAgICAgICAgICAgIHsgd2lzZG9tOiA0IH0sXG4gICAgICAgICAgICB7IGNoYXJpc21hOiAzIH1cbiAgICAgICAgXSxcbiAgICAgICAgc2tpbGxzYXZlczogW3sgcGVyY2VwdGlvbjogNCB9XSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIHNlbnNlczogXCJwYXNzaXZlIFBlcmNlcHRpb24gMTRcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcIlwiLFxuICAgICAgICBjcjogXCIxMVwiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIktlZW4gU2lnaHRcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSByb2MgaGFzIGFkdmFudGFnZSBvbiBXaXNkb20gKFBlcmNlcHRpb24pIGNoZWNrcyB0aGF0IHJlbHkgb24gc2lnaHQuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgcm9jIG1ha2VzIHR3byBhdHRhY2tzOiBvbmUgd2l0aCBpdHMgYmVhayBhbmQgb25lIHdpdGggaXRzIHRhbG9ucy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJCZWFrXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMTMgdG8gaGl0LCByZWFjaCAxMCBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMjcgKDRkOCArIDkpIHBpZXJjaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDEzLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjRkOFwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogOVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlRhbG9uc1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzEzIHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMjMgKDRkNiArIDkpIHNsYXNoaW5nIGRhbWFnZSwgYW5kIHRoZSB0YXJnZXQgaXMgZ3JhcHBsZWQgKGVzY2FwZSBEQyAxOSkuIFVudGlsIHRoaXMgZ3JhcHBsZSBlbmRzLCB0aGUgdGFyZ2V0IGlzIHJlc3RyYWluZWQsIGFuZCB0aGUgcm9jIGNhbid0IHVzZSBpdHMgdGFsb25zIG9uIGFub3RoZXIgdGFyZ2V0LlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMTMsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiNGQ2XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiA5XG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJSb3BlclwiLFxuICAgICAgICBzaXplOiBcIkxhcmdlXCIsXG4gICAgICAgIHR5cGU6IFwibW9uc3Ryb3NpdHlcIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcIm5ldXRyYWwgZXZpbFwiLFxuICAgICAgICBhYzogMjAsXG4gICAgICAgIGhwOiA5MyxcbiAgICAgICAgaGl0X2RpY2U6IFwiMTFkMTAgKyAzMlwiLFxuICAgICAgICBzcGVlZDogXCIxMCBmdC4sIGNsaW1iIDEwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzE4LCA4LCAxNywgNywgMTYsIDZdLFxuICAgICAgICBza2lsbHNhdmVzOiBbeyBwZXJjZXB0aW9uOiA2IH0sIHsgc3RlYWx0aDogNSB9XSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIHNlbnNlczogXCJkYXJrdmlzaW9uIDYwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDE2XCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJcIixcbiAgICAgICAgY3I6IFwiNVwiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkZhbHNlIEFwcGVhcmFuY2VcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIldoaWxlIHRoZSByb3BlciByZW1haW5zIG1vdGlvbmxlc3MsIGl0IGlzIGluZGlzdGluZ3Vpc2hhYmxlIGZyb20gYSBub3JtYWwgY2F2ZSBmb3JtYXRpb24sIHN1Y2ggYXMgYSBzdGFsYWdtaXRlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkdyYXNwaW5nIFRlbmRyaWxzXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgcm9wZXIgY2FuIGhhdmUgdXAgdG8gc2l4IHRlbmRyaWxzIGF0IGEgdGltZS4gRWFjaCB0ZW5kcmlsIGNhbiBiZSBhdHRhY2tlZCAoQUMgMjA7IDEwIGhpdCBwb2ludHM7IGltbXVuaXR5IHRvIHBvaXNvbiBhbmQgcHN5Y2hpYyBkYW1hZ2UpLiBEZXN0cm95aW5nIGEgdGVuZHJpbCBkZWFscyBubyBkYW1hZ2UgdG8gdGhlIHJvcGVyLCB3aGljaCBjYW4gZXh0cnVkZSBhIHJlcGxhY2VtZW50IHRlbmRyaWwgb24gaXRzIG5leHQgdHVybi4gQSB0ZW5kcmlsIGNhbiBhbHNvIGJlIGJyb2tlbiBpZiBhIGNyZWF0dXJlIHRha2VzIGFuIGFjdGlvbiBhbmQgc3VjY2VlZHMgb24gYSBEQyAxNSBTdHJlbmd0aCBjaGVjayBhZ2FpbnN0IGl0LlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlNwaWRlciBDbGltYlwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIHJvcGVyIGNhbiBjbGltYiBkaWZmaWN1bHQgc3VyZmFjZXMsIGluY2x1ZGluZyB1cHNpZGUgZG93biBvbiBjZWlsaW5ncywgd2l0aG91dCBuZWVkaW5nIHRvIG1ha2UgYW4gYWJpbGl0eSBjaGVjay5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSByb3BlciBtYWtlcyBmb3VyIGF0dGFja3Mgd2l0aCBpdHMgdGVuZHJpbHMsIHVzZXMgUmVlbCwgYW5kIG1ha2VzIG9uZSBhdHRhY2sgd2l0aCBpdHMgYml0ZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJCaXRlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNyB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDIyICg0ZDggKyA0KSBwaWVyY2luZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA3LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjRkOFwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogNFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlRlbmRyaWxcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs3IHRvIGhpdCwgcmVhY2ggNTAgZnQuLCBvbmUgY3JlYXR1cmUuIEhpdDogVGhlIHRhcmdldCBpcyBncmFwcGxlZCAoZXNjYXBlIERDIDE1KS4gVW50aWwgdGhlIGdyYXBwbGUgZW5kcywgdGhlIHRhcmdldCBpcyByZXN0cmFpbmVkIGFuZCBoYXMgZGlzYWR2YW50YWdlIG9uIFN0cmVuZ3RoIGNoZWNrcyBhbmQgU3RyZW5ndGggc2F2aW5nIHRocm93cywgYW5kIHRoZSByb3BlciBjYW4ndCB1c2UgdGhlIHNhbWUgdGVuZHJpbCBvbiBhbm90aGVyIHRhcmdldC5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJSZWVsXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgcm9wZXIgcHVsbHMgZWFjaCBjcmVhdHVyZSBncmFwcGxlZCBieSBpdCB1cCB0byAyNSBmdC4gc3RyYWlnaHQgdG93YXJkIGl0LlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiUnVnIG9mIFNtb3RoZXJpbmdcIixcbiAgICAgICAgc2l6ZTogXCJMYXJnZVwiLFxuICAgICAgICB0eXBlOiBcImNvbnN0cnVjdFwiLFxuICAgICAgICBzdWJ0eXBlOiBcIlwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwidW5hbGlnbmVkXCIsXG4gICAgICAgIGFjOiAxMixcbiAgICAgICAgaHA6IDMzLFxuICAgICAgICBoaXRfZGljZTogXCI2ZDEwXCIsXG4gICAgICAgIHNwZWVkOiBcIjEwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzE3LCAxNCwgMTAsIDEsIDMsIDFdLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcInBvaXNvbiwgcHN5Y2hpY1wiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczpcbiAgICAgICAgICAgIFwiYmxpbmRlZCwgY2hhcm1lZCwgZGVhZmVuZWQsIGZyaWdodGVuZWQsIHBhcmFseXplZCwgcGV0cmlmaWVkLCBwb2lzb25lZFwiLFxuICAgICAgICBzZW5zZXM6IFwiYmxpbmRzaWdodCA2MCBmdC4gKGJsaW5kIGJleW9uZCB0aGlzIHJhZGl1cyksIHBhc3NpdmUgUGVyY2VwdGlvbiA2XCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJcIixcbiAgICAgICAgY3I6IFwiMlwiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkFudGltYWdpYyBTdXNjZXB0aWJpbGl0eVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIHJ1ZyBpcyBpbmNhcGFjaXRhdGVkIHdoaWxlIGluIHRoZSBhcmVhIG9mIGFuIGFudGltYWdpYyBmaWVsZC4gSWYgdGFyZ2V0ZWQgYnkgZGlzcGVsIG1hZ2ljLCB0aGUgcnVnIG11c3Qgc3VjY2VlZCBvbiBhIENvbnN0aXR1dGlvbiBzYXZpbmcgdGhyb3cgYWdhaW5zdCB0aGUgY2FzdGVyJ3Mgc3BlbGwgc2F2ZSBEQyBvciBmYWxsIHVuY29uc2Npb3VzIGZvciAxIG1pbnV0ZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJEYW1hZ2UgVHJhbnNmZXJcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIldoaWxlIGl0IGlzIGdyYXBwbGluZyBhIGNyZWF0dXJlLCB0aGUgcnVnIHRha2VzIG9ubHkgaGFsZiB0aGUgZGFtYWdlIGRlYWx0IHRvIGl0LCBhbmQgdGhlIGNyZWF0dXJlIGdyYXBwbGVkIGJ5IHRoZSBydWcgdGFrZXMgdGhlIG90aGVyIGhhbGYuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiRmFsc2UgQXBwZWFyYW5jZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiV2hpbGUgdGhlIHJ1ZyByZW1haW5zIG1vdGlvbmxlc3MsIGl0IGlzIGluZGlzdGluZ3Vpc2hhYmxlIGZyb20gYSBub3JtYWwgcnVnLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJTbW90aGVyXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNSB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgTWVkaXVtIG9yIHNtYWxsZXIgY3JlYXR1cmUuIEhpdDogVGhlIGNyZWF0dXJlIGlzIGdyYXBwbGVkIChlc2NhcGUgREMgMTMpLiBVbnRpbCB0aGlzIGdyYXBwbGUgZW5kcywgdGhlIHRhcmdldCBpcyByZXN0cmFpbmVkLCBibGluZGVkLCBhbmQgYXQgcmlzayBvZiBzdWZmb2NhdGluZywgYW5kIHRoZSBydWcgY2FuJ3Qgc21vdGhlciBhbm90aGVyIHRhcmdldC4gSW4gYWRkaXRpb24sIGF0IHRoZSBzdGFydCBvZiBlYWNoIG9mIHRoZSB0YXJnZXQncyB0dXJucywgdGhlIHRhcmdldCB0YWtlcyAxMCAoMmQ2ICsgMykgYmx1ZGdlb25pbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIyZDZcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDNcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIlJ1c3QgTW9uc3RlclwiLFxuICAgICAgICBzaXplOiBcIk1lZGl1bVwiLFxuICAgICAgICB0eXBlOiBcIm1vbnN0cm9zaXR5XCIsXG4gICAgICAgIHN1YnR5cGU6IFwiXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcbiAgICAgICAgYWM6IDE0LFxuICAgICAgICBocDogMjcsXG4gICAgICAgIGhpdF9kaWNlOiBcIjVkOCArIDRcIixcbiAgICAgICAgc3BlZWQ6IFwiNDAgZnQuXCIsXG4gICAgICAgIHN0YXRzOiBbMTMsIDEyLCAxMywgMiwgMTMsIDZdLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcbiAgICAgICAgc2Vuc2VzOiBcImRhcmt2aXNpb24gNjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTFcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcIlwiLFxuICAgICAgICBjcjogXCIxLzJcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJJcm9uIFNjZW50XCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgcnVzdCBtb25zdGVyIGNhbiBwaW5wb2ludCwgYnkgc2NlbnQsIHRoZSBsb2NhdGlvbiBvZiBmZXJyb3VzIG1ldGFsIHdpdGhpbiAzMCBmZWV0IG9mIGl0LlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlJ1c3QgTWV0YWxcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIkFueSBub25tYWdpY2FsIHdlYXBvbiBtYWRlIG9mIG1ldGFsIHRoYXQgaGl0cyB0aGUgcnVzdCBtb25zdGVyIGNvcnJvZGVzLiBBZnRlciBkZWFsaW5nIGRhbWFnZSwgdGhlIHdlYXBvbiB0YWtlcyBhIHBlcm1hbmVudCBhbmQgY3VtdWxhdGl2ZSAtMSBwZW5hbHR5IHRvIGRhbWFnZSByb2xscy4gSWYgaXRzIHBlbmFsdHkgZHJvcHMgdG8gLTUsIHRoZSB3ZWFwb24gaXMgZGVzdHJveWVkLiBOb24gbWFnaWNhbCBhbW11bml0aW9uIG1hZGUgb2YgbWV0YWwgdGhhdCBoaXRzIHRoZSBydXN0IG1vbnN0ZXIgaXMgZGVzdHJveWVkIGFmdGVyIGRlYWxpbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJCaXRlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMyB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDUgKDFkOCArIDEpIHBpZXJjaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDMsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMWQ4XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiAxXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQW50ZW5uYWVcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBydXN0IG1vbnN0ZXIgY29ycm9kZXMgYSBub25tYWdpY2FsIGZlcnJvdXMgbWV0YWwgb2JqZWN0IGl0IGNhbiBzZWUgd2l0aGluIDUgZmVldCBvZiBpdC4gSWYgdGhlIG9iamVjdCBpc24ndCBiZWluZyB3b3JuIG9yIGNhcnJpZWQsIHRoZSB0b3VjaCBkZXN0cm95cyBhIDEtZm9vdCBjdWJlIG9mIGl0LiBJZiB0aGUgb2JqZWN0IGlzIGJlaW5nIHdvcm4gb3IgY2FycmllZCBieSBhIGNyZWF0dXJlLCB0aGUgY3JlYXR1cmUgY2FuIG1ha2UgYSBEQyAxMSBEZXh0ZXJpdHkgc2F2aW5nIHRocm93IHRvIGF2b2lkIHRoZSBydXN0IG1vbnN0ZXIncyB0b3VjaC5cXFxcbklmIHRoZSBvYmplY3QgdG91Y2hlZCBpcyBlaXRoZXIgbWV0YWwgYXJtb3Igb3IgYSBtZXRhbCBzaGllbGQgYmVpbmcgd29ybiBvciBjYXJyaWVkLCBpdHMgdGFrZXMgYSBwZXJtYW5lbnQgYW5kIGN1bXVsYXRpdmUgLTEgcGVuYWx0eSB0byB0aGUgQUMgaXQgb2ZmZXJzLiBBcm1vciByZWR1Y2VkIHRvIGFuIEFDIG9mIDEwIG9yIGEgc2hpZWxkIHRoYXQgZHJvcHMgdG8gYSArMCBib251cyBpcyBkZXN0cm95ZWQuIElmIHRoZSBvYmplY3QgdG91Y2hlZCBpcyBhIGhlbGQgbWV0YWwgd2VhcG9uLCBpdCBydXN0cyBhcyBkZXNjcmliZWQgaW4gdGhlIFJ1c3QgTWV0YWwgdHJhaXQuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJTYWJlci1Ub290aGVkIFRpZ2VyXCIsXG4gICAgICAgIHNpemU6IFwiTGFyZ2VcIixcbiAgICAgICAgdHlwZTogXCJiZWFzdFwiLFxuICAgICAgICBzdWJ0eXBlOiBcIlwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwidW5hbGlnbmVkXCIsXG4gICAgICAgIGFjOiAxMixcbiAgICAgICAgaHA6IDUyLFxuICAgICAgICBoaXRfZGljZTogXCI3ZDEwICsgMTNcIixcbiAgICAgICAgc3BlZWQ6IFwiNDAgZnQuXCIsXG4gICAgICAgIHN0YXRzOiBbMTgsIDE0LCAxNSwgMywgMTIsIDhdLFxuICAgICAgICBza2lsbHNhdmVzOiBbeyBwZXJjZXB0aW9uOiAzIH0sIHsgc3RlYWx0aDogNiB9XSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIHNlbnNlczogXCJwYXNzaXZlIFBlcmNlcHRpb24gMTNcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcIlwiLFxuICAgICAgICBjcjogXCIyXCIsXG4gICAgICAgIHRyYWl0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiS2VlbiBTbWVsbFwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIHRpZ2VyIGhhcyBhZHZhbnRhZ2Ugb24gV2lzZG9tIChQZXJjZXB0aW9uKSBjaGVja3MgdGhhdCByZWx5IG9uIHNtZWxsLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlBvdW5jZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiSWYgdGhlIHRpZ2VyIG1vdmVzIGF0IGxlYXN0IDIwIGZ0LiBzdHJhaWdodCB0b3dhcmQgYSBjcmVhdHVyZSBhbmQgdGhlbiBoaXRzIGl0IHdpdGggYSBjbGF3IGF0dGFjayBvbiB0aGUgc2FtZSB0dXJuLCB0aGF0IHRhcmdldCBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxNCBTdHJlbmd0aCBzYXZpbmcgdGhyb3cgb3IgYmUga25vY2tlZCBwcm9uZS4gSWYgdGhlIHRhcmdldCBpcyBwcm9uZSwgdGhlIHRpZ2VyIGNhbiBtYWtlIG9uZSBiaXRlIGF0dGFjayBhZ2FpbnN0IGl0IGFzIGEgYm9udXMgYWN0aW9uLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJCaXRlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNiB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDEwICgxZDEwICsgNSkgcGllcmNpbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIxZDEwXCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiA1XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQ2xhd1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzYgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxMiAoMmQ2ICsgNSkgc2xhc2hpbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIyZDZcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDVcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIlNhaHVhZ2luXCIsXG4gICAgICAgIHNpemU6IFwiTWVkaXVtXCIsXG4gICAgICAgIHR5cGU6IFwiaHVtYW5vaWRcIixcbiAgICAgICAgc3VidHlwZTogXCJzYWh1YWdpblwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwibGF3ZnVsIGV2aWxcIixcbiAgICAgICAgYWM6IDEyLFxuICAgICAgICBocDogMjIsXG4gICAgICAgIGhpdF9kaWNlOiBcIjRkOCArIDRcIixcbiAgICAgICAgc3BlZWQ6IFwiMzAgZnQuLCBzd2ltIDQwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzEzLCAxMSwgMTIsIDEyLCAxMywgOV0sXG4gICAgICAgIHNraWxsc2F2ZXM6IFt7IHBlcmNlcHRpb246IDUgfV0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBzZW5zZXM6IFwiZGFya3Zpc2lvbiAxMjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTVcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcIlNhaHVhZ2luXCIsXG4gICAgICAgIGNyOiBcIjEvMlwiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkJsb29kIEZyZW56eVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIHNhaHVhZ2luIGhhcyBhZHZhbnRhZ2Ugb24gbWVsZWUgYXR0YWNrIHJvbGxzIGFnYWluc3QgYW55IGNyZWF0dXJlIHRoYXQgZG9lc24ndCBoYXZlIGFsbCBpdHMgaGl0IHBvaW50cy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJMaW1pdGVkIEFtcGhpYmlvdXNuZXNzXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgc2FodWFnaW4gY2FuIGJyZWF0aGUgYWlyIGFuZCB3YXRlciwgYnV0IGl0IG5lZWRzIHRvIGJlIHN1Ym1lcmdlZCBhdCBsZWFzdCBvbmNlIGV2ZXJ5IDQgaG91cnMgdG8gYXZvaWQgc3VmZm9jYXRpbmcuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiU2hhcmsgVGVsZXBhdGh5XCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgc2FodWFnaW4gY2FuIG1hZ2ljYWxseSBjb21tYW5kIGFueSBzaGFyayB3aXRoaW4gMTIwIGZlZXQgb2YgaXQsIHVzaW5nIGEgbGltaXRlZCB0ZWxlcGF0aHkuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgc2FodWFnaW4gbWFrZXMgdHdvIG1lbGVlIGF0dGFja3M6IG9uZSB3aXRoIGl0cyBiaXRlIGFuZCBvbmUgd2l0aCBpdHMgY2xhd3Mgb3Igc3BlYXIuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQml0ZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzMgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAzICgxZDQgKyAxKSBwaWVyY2luZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAzLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjFkNFwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogMVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkNsYXdzXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMyB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDMgKDFkNCArIDEpIHNsYXNoaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDMsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMWQ0XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiAxXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiU3BlYXJcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIG9yIFJhbmdlZCBXZWFwb24gQXR0YWNrOiArMyB0byBoaXQsIHJlYWNoIDUgZnQuIG9yIHJhbmdlIDIwLzYwIGZ0Liwgb25lIHRhcmdldC4gSGl0OiA0ICgxZDYgKyAxKSBwaWVyY2luZyBkYW1hZ2UsIG9yIDUgKDFkOCArIDEpIHBpZXJjaW5nIGRhbWFnZSBpZiB1c2VkIHdpdGggdHdvIGhhbmRzIHRvIG1ha2UgYSBtZWxlZSBhdHRhY2suXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAzLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjFkNlwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogMVxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiU2FsYW1hbmRlclwiLFxuICAgICAgICBzaXplOiBcIkxhcmdlXCIsXG4gICAgICAgIHR5cGU6IFwiZWxlbWVudGFsXCIsXG4gICAgICAgIHN1YnR5cGU6IFwiXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJuZXV0cmFsIGV2aWxcIixcbiAgICAgICAgYWM6IDE1LFxuICAgICAgICBocDogOTAsXG4gICAgICAgIGhpdF9kaWNlOiBcIjEyZDEwICsgMjRcIixcbiAgICAgICAgc3BlZWQ6IFwiMzAgZnQuXCIsXG4gICAgICAgIHN0YXRzOiBbMTgsIDE0LCAxNSwgMTEsIDEwLCAxMl0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiY29sZFwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6XG4gICAgICAgICAgICBcImJsdWRnZW9uaW5nLCBwaWVyY2luZywgYW5kIHNsYXNoaW5nIGZyb20gbm9ubWFnaWNhbCB3ZWFwb25zXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcImZpcmVcIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIHNlbnNlczogXCJkYXJrdmlzaW9uIDYwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDEwXCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJJZ25hblwiLFxuICAgICAgICBjcjogXCI1XCIsXG4gICAgICAgIHRyYWl0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiSGVhdGVkIEJvZHlcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIkEgY3JlYXR1cmUgdGhhdCB0b3VjaGVzIHRoZSBzYWxhbWFuZGVyIG9yIGhpdHMgaXQgd2l0aCBhIG1lbGVlIGF0dGFjayB3aGlsZSB3aXRoaW4gNSBmdC4gb2YgaXQgdGFrZXMgNyAoMmQ2KSBmaXJlIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDAsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMmQ2XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJIZWF0ZWQgV2VhcG9uc1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiQW55IG1ldGFsIG1lbGVlIHdlYXBvbiB0aGUgc2FsYW1hbmRlciB3aWVsZHMgZGVhbHMgYW4gZXh0cmEgMyAoMWQ2KSBmaXJlIGRhbWFnZSBvbiBhIGhpdCAoaW5jbHVkZWQgaW4gdGhlIGF0dGFjaykuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgc2FsYW1hbmRlciBtYWtlcyB0d28gYXR0YWNrczogb25lIHdpdGggaXRzIHNwZWFyIGFuZCBvbmUgd2l0aCBpdHMgdGFpbC5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJTcGVhclwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgb3IgUmFuZ2VkIFdlYXBvbiBBdHRhY2s6ICs3IHRvIGhpdCwgcmVhY2ggNSBmdC4gb3IgcmFuZ2UgMjAgZnQuLzYwIGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxMSAoMmQ2ICsgNCkgcGllcmNpbmcgZGFtYWdlLCBvciAxMyAoMmQ4ICsgNCkgcGllcmNpbmcgZGFtYWdlIGlmIHVzZWQgd2l0aCB0d28gaGFuZHMgdG8gbWFrZSBhIG1lbGVlIGF0dGFjaywgcGx1cyAzICgxZDYpIGZpcmUgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNyxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIyZDZcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDRcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJUYWlsXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNyB0byBoaXQsIHJlYWNoIDEwIGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxMSAoMmQ2ICsgNCkgYmx1ZGdlb25pbmcgZGFtYWdlIHBsdXMgNyAoMmQ2KSBmaXJlIGRhbWFnZSwgYW5kIHRoZSB0YXJnZXQgaXMgZ3JhcHBsZWQgKGVzY2FwZSBEQyAxNCkuIFVudGlsIHRoaXMgZ3JhcHBsZSBlbmRzLCB0aGUgdGFyZ2V0IGlzIHJlc3RyYWluZWQsIHRoZSBzYWxhbWFuZGVyIGNhbiBhdXRvbWF0aWNhbGx5IGhpdCB0aGUgdGFyZ2V0IHdpdGggaXRzIHRhaWwsIGFuZCB0aGUgc2FsYW1hbmRlciBjYW4ndCBtYWtlIHRhaWwgYXR0YWNrcyBhZ2FpbnN0IG90aGVyIHRhcmdldHMuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA3LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjJkNiArIDJkNlwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogNFxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiU2F0eXJcIixcbiAgICAgICAgc2l6ZTogXCJNZWRpdW1cIixcbiAgICAgICAgdHlwZTogXCJmZXlcIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcImNoYW90aWMgbmV1dHJhbFwiLFxuICAgICAgICBhYzogMTQsXG4gICAgICAgIGhwOiAzMSxcbiAgICAgICAgaGl0X2RpY2U6IFwiN2Q4ICsgLTFcIixcbiAgICAgICAgc3BlZWQ6IFwiNDAgZnQuXCIsXG4gICAgICAgIHN0YXRzOiBbMTIsIDE2LCAxMSwgMTIsIDEwLCAxNF0sXG4gICAgICAgIHNraWxsc2F2ZXM6IFt7IHBlcmNlcHRpb246IDIgfSwgeyBwZXJmb3JtYW5jZTogNiB9LCB7IHN0ZWFsdGg6IDUgfV0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBzZW5zZXM6IFwicGFzc2l2ZSBQZXJjZXB0aW9uIDEyXCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJDb21tb24sIEVsdmlzaCwgU3lsdmFuXCIsXG4gICAgICAgIGNyOiBcIjEvMlwiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk1hZ2ljIFJlc2lzdGFuY2VcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBzYXR5ciBoYXMgYWR2YW50YWdlIG9uIHNhdmluZyB0aHJvd3MgYWdhaW5zdCBzcGVsbHMgYW5kIG90aGVyIG1hZ2ljYWwgZWZmZWN0cy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiUmFtXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMyB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDYgKDJkNCArIDEpIGJsdWRnZW9uaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDMsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMmQ0XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiAxXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiU2hvcnRzd29yZFwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzUgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiA2ICgxIGQ2ICsgMykgcGllcmNpbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNSxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIxZDZcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDNcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJTaG9ydGJvd1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiUmFuZ2VkIFdlYXBvbiBBdHRhY2s6ICs1IHRvIGhpdCwgcmFuZ2UgODAvMzIwIGZ0Liwgb25lIHRhcmdldC4gSGl0OiA2ICgxZDYgKyAzKSBwaWVyY2luZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA1LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjFkNlwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogM1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlZhcmlhbnQ6IFBhbnBpcGVzXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJHZW50bGUgTHVsbGFieS4gVGhlIGNyZWF0dXJlIGZhbGxzIGFzbGVlcCBhbmQgaXMgdW5jb25zY2lvdXMgZm9yIDEgbWludXRlLiBUaGUgZWZmZWN0IGVuZHMgaWYgdGhlIGNyZWF0dXJlIHRha2VzIGRhbWFnZSBvciBpZiBzb21lb25lIHRha2VzIGFuIGFjdGlvbiB0byBzaGFrZSB0aGUgY3JlYXR1cmUgYXdha2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJTY29ycGlvblwiLFxuICAgICAgICBzaXplOiBcIlRpbnlcIixcbiAgICAgICAgdHlwZTogXCJiZWFzdFwiLFxuICAgICAgICBzdWJ0eXBlOiBcIlwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwidW5hbGlnbmVkXCIsXG4gICAgICAgIGFjOiAxMSxcbiAgICAgICAgaHA6IDEsXG4gICAgICAgIGhpdF9kaWNlOiBcIjFkNCArIC0yXCIsXG4gICAgICAgIHNwZWVkOiBcIjEwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzIsIDExLCA4LCAxLCA4LCAyXSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIHNlbnNlczogXCJibGluZHNpZ2h0IDEwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDlcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcIlwiLFxuICAgICAgICBjcjogXCIwXCIsXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlN0aW5nXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMiB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgY3JlYXR1cmUuIEhpdDogMSBwaWVyY2luZyBkYW1hZ2UsIGFuZCB0aGUgdGFyZ2V0IG11c3QgbWFrZSBhIERDIDkgQ29uc3RpdHV0aW9uIHNhdmluZyB0aHJvdywgdGFraW5nIDQgKDFkOCkgcG9pc29uIGRhbWFnZSBvbiBhIGZhaWxlZCBzYXZlLCBvciBoYWxmIGFzIG11Y2ggZGFtYWdlIG9uIGEgc3VjY2Vzc2Z1bCBvbmUuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAyLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogMVxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiU2NvdXRcIixcbiAgICAgICAgc2l6ZTogXCJNZWRpdW1cIixcbiAgICAgICAgdHlwZTogXCJodW1hbm9pZFwiLFxuICAgICAgICBzdWJ0eXBlOiBcImFueSByYWNlXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJhbnkgYWxpZ25tZW50XCIsXG4gICAgICAgIGFjOiAxMyxcbiAgICAgICAgaHA6IDE2LFxuICAgICAgICBoaXRfZGljZTogXCIzZDggKyAyXCIsXG4gICAgICAgIHNwZWVkOiBcIjMwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzExLCAxNCwgMTIsIDExLCAxMywgMTFdLFxuICAgICAgICBza2lsbHNhdmVzOiBbXG4gICAgICAgICAgICB7IG5hdHVyZTogNCB9LFxuICAgICAgICAgICAgeyBwZXJjZXB0aW9uOiA1IH0sXG4gICAgICAgICAgICB7IHN0ZWFsdGg6IDYgfSxcbiAgICAgICAgICAgIHsgc3Vydml2YWw6IDUgfVxuICAgICAgICBdLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcbiAgICAgICAgc2Vuc2VzOiBcInBhc3NpdmUgUGVyY2VwdGlvbiAxNVwiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiYW55IG9uZSBsYW5ndWFnZSAodXN1YWxseSBDb21tb24pXCIsXG4gICAgICAgIGNyOiBcIjEvMlwiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIktlZW4gSGVhcmluZyBhbmQgU2lnaHRcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBzY291dCBoYXMgYWR2YW50YWdlIG9uIFdpc2RvbSAoUGVyY2VwdGlvbikgY2hlY2tzIHRoYXQgcmVseSBvbiBoZWFyaW5nIG9yIHNpZ2h0LlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJNdWx0aWF0dGFja1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIHNjb3V0IG1ha2VzIHR3byBtZWxlZSBhdHRhY2tzIG9yIHR3byByYW5nZWQgYXR0YWNrcy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJTaG9ydHN3b3JkXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNCB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDUgKDFkNiArIDIpIHBpZXJjaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDQsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMWQ2XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiAyXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTG9uZ2Jvd1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiUmFuZ2VkIFdlYXBvbiBBdHRhY2s6ICs0IHRvIGhpdCwgcmFuZ2VkIDE1MC82MDAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDYgKDFkOCArIDIpIHBpZXJjaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDQsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMWQ4XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiAyXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJTZWEgSGFnXCIsXG4gICAgICAgIHNpemU6IFwiTWVkaXVtXCIsXG4gICAgICAgIHR5cGU6IFwiZmV5XCIsXG4gICAgICAgIHN1YnR5cGU6IFwiXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJjaGFvdGljIGV2aWxcIixcbiAgICAgICAgYWM6IDE0LFxuICAgICAgICBocDogNTIsXG4gICAgICAgIGhpdF9kaWNlOiBcIjdkOCArIDIwXCIsXG4gICAgICAgIHNwZWVkOiBcIjMwIGZ0Liwgc3dpbSA0MCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsxNiwgMTMsIDE2LCAxMiwgMTIsIDEzXSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIHNlbnNlczogXCJkYXJrdmlzaW9uIDYwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDExXCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJBcXVhbiwgQ29tbW9uLCBHaWFudFwiLFxuICAgICAgICBjcjogXCIyXCIsXG4gICAgICAgIHRyYWl0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQW1waGliaW91c1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGhhZyBjYW4gYnJlYXRoZSBhaXIgYW5kIHdhdGVyLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkhvcnJpZmljIEFwcGVhcmFuY2VcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIkFueSBodW1hbm9pZCB0aGF0IHN0YXJ0cyBpdHMgdHVybiB3aXRoaW4gMzAgZmVldCBvZiB0aGUgaGFnIGFuZCBjYW4gc2VlIHRoZSBoYWcncyB0cnVlIGZvcm0gbXVzdCBtYWtlIGEgREMgMTEgV2lzZG9tIHNhdmluZyB0aHJvdy4gT24gYSBmYWlsZWQgc2F2ZSwgdGhlIGNyZWF0dXJlIGlzIGZyaWdodGVuZWQgZm9yIDEgbWludXRlLiBBIGNyZWF0dXJlIGNhbiByZXBlYXQgdGhlIHNhdmluZyB0aHJvdyBhdCB0aGUgZW5kIG9mIGVhY2ggb2YgaXRzIHR1cm5zLCB3aXRoIGRpc2FkdmFudGFnZSBpZiB0aGUgaGFnIGlzIHdpdGhpbiBsaW5lIG9mIHNpZ2h0LCBlbmRpbmcgdGhlIGVmZmVjdCBvbiBpdHNlbGYgb24gYSBzdWNjZXNzLiBJZiBhIGNyZWF0dXJlJ3Mgc2F2aW5nIHRocm93IGlzIHN1Y2Nlc3NmdWwgb3IgdGhlIGVmZmVjdCBlbmRzIGZvciBpdCwgdGhlIGNyZWF0dXJlIGlzIGltbXVuZSB0byB0aGUgaGFnJ3MgSG9ycmlmaWMgQXBwZWFyYW5jZSBmb3IgdGhlIG5leHQgMjQgaG91cnMuXFxcXG5Vbmxlc3MgdGhlIHRhcmdldCBpcyBzdXJwcmlzZWQgb3IgdGhlIHJldmVsYXRpb24gb2YgdGhlIGhhZydzIHRydWUgZm9ybSBpcyBzdWRkZW4sIHRoZSB0YXJnZXQgY2FuIGF2ZXJ0IGl0cyBleWVzIGFuZCBhdm9pZCBtYWtpbmcgdGhlIGluaXRpYWwgc2F2aW5nIHRocm93LiBVbnRpbCB0aGUgc3RhcnQgb2YgaXRzIG5leHQgdHVybiwgYSBjcmVhdHVyZSB0aGF0IGF2ZXJ0cyBpdHMgZXllcyBoYXMgZGlzYWR2YW50YWdlIG9uIGF0dGFjayByb2xscyBhZ2FpbnN0IHRoZSBoYWcuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiSGFnIENvdmVuXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJXaGVuIGhhZ3MgbXVzdCB3b3JrIHRvZ2V0aGVyLCB0aGV5IGZvcm0gY292ZW5zLCBpbiBzcGl0ZSBvZiB0aGVpciBzZWxmaXNoIG5hdHVyZXMuIEEgY292ZW4gaXMgbWFkZSB1cCBvZiBoYWdzIG9mIGFueSB0eXBlLCBhbGwgb2Ygd2hvbSBhcmUgZXF1YWxzIHdpdGhpbiB0aGUgZ3JvdXAuIEhvd2V2ZXIsIGVhY2ggb2YgdGhlIGhhZ3MgY29udGludWVzIHRvIGRlc2lyZSBtb3JlIHBlcnNvbmFsIHBvd2VyLlxcXFxuQSBjb3ZlbiBjb25zaXN0cyBvZiB0aHJlZSBoYWdzIHNvIHRoYXQgYW55IGFyZ3VtZW50cyBiZXR3ZWVuIHR3byBoYWdzIGNhbiBiZSBzZXR0bGVkIGJ5IHRoZSB0aGlyZC4gSWYgbW9yZSB0aGFuIHRocmVlIGhhZ3MgZXZlciBjb21lIHRvZ2V0aGVyLCBhcyBtaWdodCBoYXBwZW4gaWYgdHdvIGNvdmVucyBjb21lIGludG8gY29uZmxpY3QsIHRoZSByZXN1bHQgaXMgdXN1YWxseSBjaGFvcy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJTaGFyZWQgU3BlbGxjYXN0aW5nIChDb3ZlbiBPbmx5KVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiV2hpbGUgYWxsIHRocmVlIG1lbWJlcnMgb2YgYSBoYWcgY292ZW4gYXJlIHdpdGhpbiAzMCBmZWV0IG9mIG9uZSBhbm90aGVyLCB0aGV5IGNhbiBlYWNoIGNhc3QgdGhlIGZvbGxvd2luZyBzcGVsbHMgZnJvbSB0aGUgd2l6YXJkJ3Mgc3BlbGwgbGlzdCBidXQgbXVzdCBzaGFyZSB0aGUgc3BlbGwgc2xvdHMgYW1vbmcgdGhlbXNlbHZlczpcXFxcblxcXFxuXHUyMDIyIDFzdCBsZXZlbCAoNCBzbG90cyk6IGlkZW50aWZ5LCByYXkgb2Ygc2lja25lc3NcXFxcblx1MjAyMiAybmQgbGV2ZWwgKDMgc2xvdHMpOiBob2xkIHBlcnNvbiwgbG9jYXRlIG9iamVjdFxcXFxuXHUyMDIyIDNyZCBsZXZlbCAoMyBzbG90cyk6IGJlc3RvdyBjdXJzZSwgY291bnRlcnNwZWxsLCBsaWdodG5pbmcgYm9sdFxcXFxuXHUyMDIyIDR0aCBsZXZlbCAoMyBzbG90cyk6IHBoYW50YXNtYWwga2lsbGVyLCBwb2x5bW9ycGhcXFxcblx1MjAyMiA1dGggbGV2ZWwgKDIgc2xvdHMpOiBjb250YWN0IG90aGVyIHBsYW5lLCBzY3J5aW5nXFxcXG5cdTIwMjIgNnRoIGxldmVsICgxIHNsb3QpOiBleWUgYml0ZVxcXFxuXFxcXG5Gb3IgY2FzdGluZyB0aGVzZSBzcGVsbHMsIGVhY2ggaGFnIGlzIGEgMTJ0aC1sZXZlbCBzcGVsbGNhc3RlciB0aGF0IHVzZXMgSW50ZWxsaWdlbmNlIGFzIGhlciBzcGVsbGNhc3RpbmcgYWJpbGl0eS4gVGhlIHNwZWxsIHNhdmUgREMgaXMgMTIrdGhlIGhhZydzIEludGVsbGlnZW5jZSBtb2RpZmllciwgYW5kIHRoZSBzcGVsbCBhdHRhY2sgYm9udXMgaXMgNCt0aGUgaGFnJ3MgSW50ZWxsaWdlbmNlIG1vZGlmaWVyLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkhhZyBFeWUgKENvdmVuIE9ubHkpXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJBIGhhZyBjb3ZlbiBjYW4gY3JhZnQgYSBtYWdpYyBpdGVtIGNhbGxlZCBhIGhhZyBleWUsIHdoaWNoIGlzIG1hZGUgZnJvbSBhIHJlYWwgZXllIGNvYXRlZCBpbiB2YXJuaXNoIGFuZCBvZnRlbiBmaXR0ZWQgdG8gYSBwZW5kYW50IG9yIG90aGVyIHdlYXJhYmxlIGl0ZW0uIFRoZSBoYWcgZXllIGlzIHVzdWFsbHkgZW50cnVzdGVkIHRvIGEgbWluaW9uIGZvciBzYWZla2VlcGluZyBhbmQgdHJhbnNwb3J0LiBBIGhhZyBpbiB0aGUgY292ZW4gY2FuIHRha2UgYW4gYWN0aW9uIHRvIHNlZSB3aGF0IHRoZSBoYWcgZXllIHNlZXMgaWYgdGhlIGhhZyBleWUgaXMgb24gdGhlIHNhbWUgcGxhbmUgb2YgZXhpc3RlbmNlLiBBIGhhZyBleWUgaGFzIEFDIDEwLCAxIGhpdCBwb2ludCwgYW5kIGRhcmt2aXNpb24gd2l0aCBhIHJhZGl1cyBvZiA2MCBmZWV0LiBJZiBpdCBpcyBkZXN0cm95ZWQsIGVhY2ggY292ZW4gbWVtYmVyIHRha2VzIDNkMTAgcHN5Y2hpYyBkYW1hZ2UgYW5kIGlzIGJsaW5kZWQgZm9yIDI0IGhvdXJzLlxcXFxuQSBoYWcgY292ZW4gY2FuIGhhdmUgb25seSBvbmUgaGFnIGV5ZSBhdCBhIHRpbWUsIGFuZCBjcmVhdGluZyBhIG5ldyBvbmUgcmVxdWlyZXMgYWxsIHRocmVlIG1lbWJlcnMgb2YgdGhlIGNvdmVuIHRvIHBlcmZvcm0gYSByaXR1YWwuIFRoZSByaXR1YWwgdGFrZXMgMSBob3VyLCBhbmQgdGhlIGhhZ3MgY2FuJ3QgcGVyZm9ybSBpdCB3aGlsZSBibGluZGVkLiBEdXJpbmcgdGhlIHJpdHVhbCwgaWYgdGhlIGhhZ3MgdGFrZSBhbnkgYWN0aW9uIG90aGVyIHRoYW4gcGVyZm9ybWluZyB0aGUgcml0dWFsLCB0aGV5IG11c3Qgc3RhcnQgb3Zlci5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQ2xhd3NcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs1IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTAgKDJkNiArIDMpIHNsYXNoaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDUsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMmQ2XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiAzXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiRGVhdGggR2xhcmVcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBoYWcgdGFyZ2V0cyBvbmUgZnJpZ2h0ZW5lZCBjcmVhdHVyZSBzaGUgY2FuIHNlZSB3aXRoaW4gMzAgZnQuIG9mIGhlci4gSWYgdGhlIHRhcmdldCBjYW4gc2VlIHRoZSBoYWcsIGl0IG11c3Qgc3VjY2VlZCBvbiBhIERDIDExIFdpc2RvbSBzYXZpbmcgdGhyb3cgYWdhaW5zdCB0aGlzIG1hZ2ljIG9yIGRyb3AgdG8gMCBoaXQgcG9pbnRzLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIklsbHVzb3J5IEFwcGVhcmFuY2VcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBoYWcgY292ZXJzIGhlcnNlbGYgYW5kIGFueXRoaW5nIHNoZSBpcyB3ZWFyaW5nIG9yIGNhcnJ5aW5nIHdpdGggYSBtYWdpY2FsIGlsbHVzaW9uIHRoYXQgbWFrZXMgaGVyIGxvb2sgbGlrZSBhbiB1Z2x5IGNyZWF0dXJlIG9mIGhlciBnZW5lcmFsIHNpemUgYW5kIGh1bWFub2lkIHNoYXBlLiBUaGUgZWZmZWN0IGVuZHMgaWYgdGhlIGhhZyB0YWtlcyBhIGJvbnVzIGFjdGlvbiB0byBlbmQgaXQgb3IgaWYgc2hlIGRpZXMuXFxcXG5UaGUgY2hhbmdlcyB3cm91Z2h0IGJ5IHRoaXMgZWZmZWN0IGZhaWwgdG8gaG9sZCB1cCB0byBwaHlzaWNhbCBpbnNwZWN0aW9uLiBGb3IgZXhhbXBsZSwgdGhlIGhhZyBjb3VsZCBhcHBlYXIgdG8gaGF2ZSBubyBjbGF3cywgYnV0IHNvbWVvbmUgdG91Y2hpbmcgaGVyIGhhbmQgbWlnaHQgZmVlbCB0aGUgY2xhd3MuIE90aGVyd2lzZSwgYSBjcmVhdHVyZSBtdXN0IHRha2UgYW4gYWN0aW9uIHRvIHZpc3VhbGx5IGluc3BlY3QgdGhlIGlsbHVzaW9uIGFuZCBzdWNjZWVkIG9uIGEgREMgMTYgSW50ZWxsaWdlbmNlIChJbnZlc3RpZ2F0aW9uKSBjaGVjayB0byBkaXNjZXJuIHRoYXQgdGhlIGhhZyBpcyBkaXNndWlzZWQuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJTZWEgSG9yc2VcIixcbiAgICAgICAgc2l6ZTogXCJUaW55XCIsXG4gICAgICAgIHR5cGU6IFwiYmVhc3RcIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcInVuYWxpZ25lZFwiLFxuICAgICAgICBhYzogMTEsXG4gICAgICAgIGhwOiAxLFxuICAgICAgICBoaXRfZGljZTogXCIxZDQgKyAtMlwiLFxuICAgICAgICBzcGVlZDogXCJzd2ltIDIwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzEsIDEyLCA4LCAxLCAxMCwgMl0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBzZW5zZXM6IFwicGFzc2l2ZSBQZXJjZXB0aW9uIDEwXCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJcIixcbiAgICAgICAgY3I6IFwiMFwiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIldhdGVyIEJyZWF0aGluZ1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIHNlYSBob3JzZSBjYW4gYnJlYXRoZSBvbmx5IHVuZGVyd2F0ZXIuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJTaGFkb3dcIixcbiAgICAgICAgc2l6ZTogXCJNZWRpdW1cIixcbiAgICAgICAgdHlwZTogXCJ1bmRlYWRcIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcImNoYW90aWMgZXZpbFwiLFxuICAgICAgICBhYzogMTIsXG4gICAgICAgIGhwOiAxNixcbiAgICAgICAgaGl0X2RpY2U6IFwiM2Q4ICsgMlwiLFxuICAgICAgICBzcGVlZDogXCI0MCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFs2LCAxNCwgMTMsIDYsIDEwLCA4XSxcbiAgICAgICAgc2tpbGxzYXZlczogW3sgc3RlYWx0aDogNCB9XSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJyYWRpYW50XCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczpcbiAgICAgICAgICAgIFwiYWNpZCwgY29sZCwgZmlyZSwgbGlnaHRuaW5nLCB0aHVuZGVyOyBibHVkZ2VvbmluZywgcGllcmNpbmcsIGFuZCBzbGFzaGluZyBmcm9tIG5vbm1hZ2ljYWwgd2VhcG9uc1wiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczogXCJuZWNyb3RpYywgcG9pc29uXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOlxuICAgICAgICAgICAgXCJleGhhdXN0aW9uLCBmcmlnaHRlbmVkLCBncmFwcGxlZCwgcGFyYWx5emVkLCBwZXRyaWZpZWQsIHBvaXNvbmVkLCBwcm9uZSwgcmVzdHJhaW5lZFwiLFxuICAgICAgICBzZW5zZXM6IFwiZGFya3Zpc2lvbiA2MCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxMFwiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiXCIsXG4gICAgICAgIGNyOiBcIjEvMlwiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkFtb3JwaG91c1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIHNoYWRvdyBjYW4gbW92ZSB0aHJvdWdoIGEgc3BhY2UgYXMgbmFycm93IGFzIDEgaW5jaCB3aWRlIHdpdGhvdXQgc3F1ZWV6aW5nLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlNoYWRvdyBTdGVhbHRoXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJXaGlsZSBpbiBkaW0gbGlnaHQgb3IgZGFya25lc3MsIHRoZSBzaGFkb3cgY2FuIHRha2UgdGhlIEhpZGUgYWN0aW9uIGFzIGEgYm9udXMgYWN0aW9uLiBJdHMgc3RlYWx0aCBib251cyBpcyBhbHNvIGltcHJvdmVkIHRvICs2LlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlN1bmxpZ2h0IFdlYWtuZXNzXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJXaGlsZSBpbiBzdW5saWdodCwgdGhlIHNoYWRvdyBoYXMgZGlzYWR2YW50YWdlIG9uIGF0dGFjayByb2xscywgYWJpbGl0eSBjaGVja3MsIGFuZCBzYXZpbmcgdGhyb3dzLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJTdHJlbmd0aCBEcmFpblwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzQgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIGNyZWF0dXJlLiBIaXQ6IDkgKDJkNiArIDIpIG5lY3JvdGljIGRhbWFnZSwgYW5kIHRoZSB0YXJnZXQncyBTdHJlbmd0aCBzY29yZSBpcyByZWR1Y2VkIGJ5IDFkNC4gVGhlIHRhcmdldCBkaWVzIGlmIHRoaXMgcmVkdWNlcyBpdHMgU3RyZW5ndGggdG8gMC4gT3RoZXJ3aXNlLCB0aGUgcmVkdWN0aW9uIGxhc3RzIHVudGlsIHRoZSB0YXJnZXQgZmluaXNoZXMgYSBzaG9ydCBvciBsb25nIHJlc3QuXFxcXG5JZiBhIG5vbi1ldmlsIGh1bWFub2lkIGRpZXMgZnJvbSB0aGlzIGF0dGFjaywgYSBuZXcgc2hhZG93IHJpc2VzIGZyb20gdGhlIGNvcnBzZSAxZDQgaG91cnMgbGF0ZXIuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA0LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjJkNlwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogMlxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiU2hhbWJsaW5nIE1vdW5kXCIsXG4gICAgICAgIHNpemU6IFwiTGFyZ2VcIixcbiAgICAgICAgdHlwZTogXCJwbGFudFwiLFxuICAgICAgICBzdWJ0eXBlOiBcIlwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwidW5hbGlnbmVkXCIsXG4gICAgICAgIGFjOiAxNSxcbiAgICAgICAgaHA6IDEzNixcbiAgICAgICAgaGl0X2RpY2U6IFwiMTZkMTAgKyA0OFwiLFxuICAgICAgICBzcGVlZDogXCIyMCBmdC4sIHN3aW0gMjAgZnQuXCIsXG4gICAgICAgIHN0YXRzOiBbMTgsIDgsIDE2LCA1LCAxMCwgNV0sXG4gICAgICAgIHNraWxsc2F2ZXM6IFt7IHN0ZWFsdGg6IDIgfV0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJjb2xkLCBmaXJlXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcImxpZ2h0bmluZ1wiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJibGluZGVkLCBkZWFmZW5lZCwgZXhoYXVzdGlvblwiLFxuICAgICAgICBzZW5zZXM6IFwiYmxpbmRzaWdodCA2MCBmdC4gKGJsaW5kIGJleW9uZCB0aGlzIHJhZGl1cyksIHBhc3NpdmUgUGVyY2VwdGlvbiAxMFwiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiXCIsXG4gICAgICAgIGNyOiBcIjVcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJMaWdodG5pbmcgQWJzb3JwdGlvblwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiV2hlbmV2ZXIgdGhlIHNoYW1ibGluZyBtb3VuZCBpcyBzdWJqZWN0ZWQgdG8gbGlnaHRuaW5nIGRhbWFnZSwgaXQgdGFrZXMgbm8gZGFtYWdlIGFuZCByZWdhaW5zIGEgbnVtYmVyIG9mIGhpdCBwb2ludHMgZXF1YWwgdG8gdGhlIGxpZ2h0bmluZyBkYW1hZ2UgZGVhbHQuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgc2hhbWJsaW5nIG1vdW5kIG1ha2VzIHR3byBzbGFtIGF0dGFja3MuIElmIGJvdGggYXR0YWNrcyBoaXQgYSBNZWRpdW0gb3Igc21hbGxlciB0YXJnZXQsIHRoZSB0YXJnZXQgaXMgZ3JhcHBsZWQgKGVzY2FwZSBEQyAxNCksIGFuZCB0aGUgc2hhbWJsaW5nIG1vdW5kIHVzZXMgaXRzIEVuZ3VsZiBvbiBpdC5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJTbGFtXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNyB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDEzICgyZDggKyA0KSBibHVkZ2VvbmluZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA3LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjJkOFwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogNFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkVuZ3VsZlwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIHNoYW1ibGluZyBtb3VuZCBlbmd1bGZzIGEgTWVkaXVtIG9yIHNtYWxsZXIgY3JlYXR1cmUgZ3JhcHBsZWQgYnkgaXQuIFRoZSBlbmd1bGZlZCB0YXJnZXQgaXMgYmxpbmRlZCwgcmVzdHJhaW5lZCwgYW5kIHVuYWJsZSB0byBicmVhdGhlLCBhbmQgaXQgbXVzdCBzdWNjZWVkIG9uIGEgREMgMTQgQ29uc3RpdHV0aW9uIHNhdmluZyB0aHJvdyBhdCB0aGUgc3RhcnQgb2YgZWFjaCBvZiB0aGUgbW91bmQncyB0dXJucyBvciB0YWtlIDEzICgyZDggKyA0KSBibHVkZ2VvbmluZyBkYW1hZ2UuIElmIHRoZSBtb3VuZCBtb3ZlcywgdGhlIGVuZ3VsZmVkIHRhcmdldCBtb3ZlcyB3aXRoIGl0LiBUaGUgbW91bmQgY2FuIGhhdmUgb25seSBvbmUgY3JlYXR1cmUgZW5ndWxmZWQgYXQgYSB0aW1lLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiU2hpZWxkIEd1YXJkaWFuXCIsXG4gICAgICAgIHNpemU6IFwiTGFyZ2VcIixcbiAgICAgICAgdHlwZTogXCJjb25zdHJ1Y3RcIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcInVuYWxpZ25lZFwiLFxuICAgICAgICBhYzogMTcsXG4gICAgICAgIGhwOiAxNDIsXG4gICAgICAgIGhpdF9kaWNlOiBcIjE1ZDEwICsgNTlcIixcbiAgICAgICAgc3BlZWQ6IFwiMzAgZnQuXCIsXG4gICAgICAgIHN0YXRzOiBbMTgsIDgsIDE4LCA3LCAxMCwgM10sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwicG9pc29uXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOlxuICAgICAgICAgICAgXCJjaGFybWVkLCBleGhhdXN0aW9uLCBmcmlnaHRlbmVkLCBwYXJhbHl6ZWQsIHBvaXNvbmVkXCIsXG4gICAgICAgIHNlbnNlczogXCJibGluZHNpZ2h0IDEwIGZ0LiwgZGFya3Zpc2lvbiA2MCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxMFwiLFxuICAgICAgICBsYW5ndWFnZXM6IFwidW5kZXJzdGFuZHMgY29tbWFuZHMgZ2l2ZW4gaW4gYW55IGxhbmd1YWdlIGJ1dCBjYW4ndCBzcGVha1wiLFxuICAgICAgICBjcjogXCI3XCIsXG4gICAgICAgIHRyYWl0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQm91bmRcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBzaGllbGQgZ3VhcmRpYW4gaXMgbWFnaWNhbGx5IGJvdW5kIHRvIGFuIGFtdWxldC4gQXMgbG9uZyBhcyB0aGUgZ3VhcmRpYW4gYW5kIGl0cyBhbXVsZXQgYXJlIG9uIHRoZSBzYW1lIHBsYW5lIG9mIGV4aXN0ZW5jZSwgdGhlIGFtdWxldCdzIHdlYXJlciBjYW4gdGVsZXBhdGhpY2FsbHkgY2FsbCB0aGUgZ3VhcmRpYW4gdG8gdHJhdmVsIHRvIGl0LCBhbmQgdGhlIGd1YXJkaWFuIGtub3dzIHRoZSBkaXN0YW5jZSBhbmQgZGlyZWN0aW9uIHRvIHRoZSBhbXVsZXQuIElmIHRoZSBndWFyZGlhbiBpcyB3aXRoaW4gNjAgZmVldCBvZiB0aGUgYW11bGV0J3Mgd2VhcmVyLCBoYWxmIG9mIGFueSBkYW1hZ2UgdGhlIHdlYXJlciB0YWtlcyAocm91bmRlZCB1cCkgaXMgdHJhbnNmZXJyZWQgdG8gdGhlIGd1YXJkaWFuLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlJlZ2VuZXJhdGlvblwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIHNoaWVsZCBndWFyZGlhbiByZWdhaW5zIDEwIGhpdCBwb2ludHMgYXQgdGhlIHN0YXJ0IG9mIGl0cyB0dXJuIGlmIGl0IGhhcyBhdCBsZWFzdCAxIGhpdC4gcG9pbnQuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiU3BlbGwgU3RvcmluZ1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiQSBzcGVsbGNhc3RlciB3aG8gd2VhcnMgdGhlIHNoaWVsZCBndWFyZGlhbidzIGFtdWxldCBjYW4gY2F1c2UgdGhlIGd1YXJkaWFuIHRvIHN0b3JlIG9uZSBzcGVsbCBvZiA0dGggbGV2ZWwgb3IgbG93ZXIuIFRvIGRvIHNvLCB0aGUgd2VhcmVyIG11c3QgY2FzdCB0aGUgc3BlbGwgb24gdGhlIGd1YXJkaWFuLiBUaGUgc3BlbGwgaGFzIG5vIGVmZmVjdCBidXQgaXMgc3RvcmVkIHdpdGhpbiB0aGUgZ3VhcmRpYW4uIFdoZW4gY29tbWFuZGVkIHRvIGRvIHNvIGJ5IHRoZSB3ZWFyZXIgb3Igd2hlbiBhIHNpdHVhdGlvbiBhcmlzZXMgdGhhdCB3YXMgcHJlZGVmaW5lZCBieSB0aGUgc3BlbGxjYXN0ZXIsIHRoZSBndWFyZGlhbiBjYXN0cyB0aGUgc3RvcmVkIHNwZWxsIHdpdGggYW55IHBhcmFtZXRlcnMgc2V0IGJ5IHRoZSBvcmlnaW5hbCBjYXN0ZXIsIHJlcXVpcmluZyBubyBjb21wb25lbnRzLiBXaGVuIHRoZSBzcGVsbCBpcyBjYXN0IG9yIGEgbmV3IHNwZWxsIGlzIHN0b3JlZCwgYW55IHByZXZpb3VzbHkgc3RvcmVkIHNwZWxsIGlzIGxvc3QuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZ3VhcmRpYW4gbWFrZXMgdHdvIGZpc3QgYXR0YWNrcy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJGaXN0XCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNyB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDExICgyZDYgKyA0KSBibHVkZ2VvbmluZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA3LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjJkNlwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogNFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICByZWFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlNoaWVsZFwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiV2hlbiBhIGNyZWF0dXJlIG1ha2VzIGFuIGF0dGFjayBhZ2FpbnN0IHRoZSB3ZWFyZXIgb2YgdGhlIGd1YXJkaWFuJ3MgYW11bGV0LCB0aGUgZ3VhcmRpYW4gZ3JhbnRzIGEgKzIgYm9udXMgdG8gdGhlIHdlYXJlcidzIEFDIGlmIHRoZSBndWFyZGlhbiBpcyB3aXRoaW4gNSBmZWV0IG9mIHRoZSB3ZWFyZXIuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJTaHJpZWtlclwiLFxuICAgICAgICBzaXplOiBcIk1lZGl1bVwiLFxuICAgICAgICB0eXBlOiBcInBsYW50XCIsXG4gICAgICAgIHN1YnR5cGU6IFwiXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcbiAgICAgICAgYWM6IDUsXG4gICAgICAgIGhwOiAxMyxcbiAgICAgICAgaGl0X2RpY2U6IFwiM2Q4ICsgLTFcIixcbiAgICAgICAgc3BlZWQ6IFwiMCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsxLCAxLCAxMCwgMSwgMywgMV0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOiBcImJsaW5kZWQsIGRlYWZlbmVkLCBmcmlnaHRlbmVkXCIsXG4gICAgICAgIHNlbnNlczogXCJibGluZHNpZ2h0IDMwIGZ0LiAoYmxpbmQgYmV5b25kIHRoaXMgcmFkaXVzKSwgcGFzc2l2ZSBQZXJjZXB0aW9uIDZcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcIlwiLFxuICAgICAgICBjcjogXCIwXCIsXG4gICAgICAgIHRyYWl0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiRmFsc2UgQXBwZWFyYW5jZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiV2hpbGUgdGhlIHNocmlla2VyIHJlbWFpbnMgbW90aW9ubGVzcywgaXQgaXMgaW5kaXN0aW5ndWlzaGFibGUgZnJvbSBhbiBvcmRpbmFyeSBmdW5ndXMuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlNocmlla1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiV2hlbiBicmlnaHQgbGlnaHQgb3IgYSBjcmVhdHVyZSBpcyB3aXRoaW4gMzAgZmVldCBvZiB0aGUgc2hyaWVrZXIsIGl0IGVtaXRzIGEgc2hyaWVrIGF1ZGlibGUgd2l0aGluIDMwMCBmZWV0IG9mIGl0LiBUaGUgc2hyaWVrZXIgY29udGludWVzIHRvIHNocmllayB1bnRpbCB0aGUgZGlzdHVyYmFuY2UgbW92ZXMgb3V0IG9mIHJhbmdlIGFuZCBmb3IgMWQ0IG9mIHRoZSBzaHJpZWtlcidzIHR1cm5zIGFmdGVyd2FyZFwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiU2lsdmVyIERyYWdvbiBXeXJtbGluZ1wiLFxuICAgICAgICBzaXplOiBcIk1lZGl1bVwiLFxuICAgICAgICB0eXBlOiBcImRyYWdvblwiLFxuICAgICAgICBzdWJ0eXBlOiBcIlwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwibGF3ZnVsIGdvb2RcIixcbiAgICAgICAgYWM6IDE3LFxuICAgICAgICBocDogNDUsXG4gICAgICAgIGhpdF9kaWNlOiBcIjZkOCArIDE4XCIsXG4gICAgICAgIHNwZWVkOiBcIjMwIGZ0LiwgZmx5IDYwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzE5LCAxMCwgMTcsIDEyLCAxMSwgMTVdLFxuICAgICAgICBzYXZlczogW1xuICAgICAgICAgICAgeyBkZXh0ZXJpdHk6IDIgfSxcbiAgICAgICAgICAgIHsgY29uc3RpdHV0aW9uOiA1IH0sXG4gICAgICAgICAgICB7IHdpc2RvbTogMiB9LFxuICAgICAgICAgICAgeyBjaGFyaXNtYTogNCB9XG4gICAgICAgIF0sXG4gICAgICAgIHNraWxsc2F2ZXM6IFt7IHBlcmNlcHRpb246IDQgfSwgeyBzdGVhbHRoOiAyIH1dLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcImNvbGRcIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIHNlbnNlczogXCJibGluZHNpZ2h0IDEwIGZ0LiwgZGFya3Zpc2lvbiA2MCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxNFwiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiRHJhY29uaWNcIixcbiAgICAgICAgY3I6IFwiMlwiLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJCaXRlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNiB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDkgKDFkMTAgKyA0KSBwaWVyY2luZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA2LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjFkMTBcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDRcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJCcmVhdGggV2VhcG9ucyAoUmVjaGFyZ2UgNS02KVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGRyYWdvbiB1c2VzIG9uZSBvZiB0aGUgZm9sbG93aW5nIGJyZWF0aCB3ZWFwb25zLlxcXFxuQ29sZCBCcmVhdGguIFRoZSBkcmFnb24gZXhoYWxlcyBhbiBpY3kgYmxhc3QgaW4gYSAxNS1mb290IGNvbmUuIEVhY2ggY3JlYXR1cmUgaW4gdGhhdCBhcmVhIG11c3QgbWFrZSBhIERDIDEzIENvbnN0aXR1dGlvbiBzYXZpbmcgdGhyb3csIHRha2luZyAxOCAoNGQ4KSBjb2xkIGRhbWFnZSBvbiBhIGZhaWxlZCBzYXZlLCBvciBoYWxmIGFzIG11Y2ggZGFtYWdlIG9uIGEgc3VjY2Vzc2Z1bCBvbmUuXFxcXG5QYXJhbHl6aW5nIEJyZWF0aC4gVGhlIGRyYWdvbiBleGhhbGVzIHBhcmFseXppbmcgZ2FzIGluIGEgMTUtZm9vdCBjb25lLiBFYWNoIGNyZWF0dXJlIGluIHRoYXQgYXJlYSBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxMyBDb25zdGl0dXRpb24gc2F2aW5nIHRocm93IG9yIGJlIHBhcmFseXplZCBmb3IgMSBtaW51dGUuIEEgY3JlYXR1cmUgY2FuIHJlcGVhdCB0aGUgc2F2aW5nIHRocm93IGF0IHRoZSBlbmQgb2YgZWFjaCBvZiBpdHMgdHVybnMsIGVuZGluZyB0aGUgZWZmZWN0IG9uIGl0c2VsZiBvbiBhIHN1Y2Nlc3MuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjRkOFwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJTa2VsZXRvblwiLFxuICAgICAgICBzaXplOiBcIk1lZGl1bVwiLFxuICAgICAgICB0eXBlOiBcInVuZGVhZFwiLFxuICAgICAgICBzdWJ0eXBlOiBcIlwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwibGF3ZnVsIGV2aWxcIixcbiAgICAgICAgYWM6IDEzLFxuICAgICAgICBocDogMTMsXG4gICAgICAgIGhpdF9kaWNlOiBcIjJkOCArIDRcIixcbiAgICAgICAgc3BlZWQ6IFwiMzAgZnQuXCIsXG4gICAgICAgIHN0YXRzOiBbMTAsIDE0LCAxNSwgNiwgOCwgNV0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiYmx1ZGdlb25pbmdcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwicG9pc29uZWRcIixcbiAgICAgICAgc2Vuc2VzOiBcImRhcmt2aXNpb24gNjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gOVwiLFxuICAgICAgICBsYW5ndWFnZXM6IFwidW5kZXJzdGFuZHMgYWxsIGxhbmd1YWdlcyBpdCBzcG9rZSBpbiBsaWZlIGJ1dCBjYW4ndCBzcGVha1wiLFxuICAgICAgICBjcjogXCIxLzRcIixcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiU2hvcnRzd29yZFwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzQgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiA1ICgxZDYgKyAyKSBwaWVyY2luZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA0LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjFkNlwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogMlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlNob3J0Ym93XCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJSYW5nZWQgV2VhcG9uIEF0dGFjazogKzQgdG8gaGl0LCByYW5nZSA4MC8zMjAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDUgKDFkNiArIDIpIHBpZXJjaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDQsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMWQ2XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiAyXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJTb2xhclwiLFxuICAgICAgICBzaXplOiBcIkxhcmdlXCIsXG4gICAgICAgIHR5cGU6IFwiY2VsZXN0aWFsXCIsXG4gICAgICAgIHN1YnR5cGU6IFwiXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJsYXdmdWwgZ29vZFwiLFxuICAgICAgICBhYzogMjEsXG4gICAgICAgIGhwOiAyNDMsXG4gICAgICAgIGhpdF9kaWNlOiBcIjE4ZDEwICsgMTQ0XCIsXG4gICAgICAgIHNwZWVkOiBcIjUwIGZ0LiwgZmx5IDE1MCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsyNiwgMjIsIDI2LCAyNSwgMjUsIDMwXSxcbiAgICAgICAgc2F2ZXM6IFt7IGludGVsbGlnZW5jZTogMTQgfSwgeyB3aXNkb206IDE0IH0sIHsgY2hhcmlzbWE6IDE3IH1dLFxuICAgICAgICBza2lsbHNhdmVzOiBbeyBwZXJjZXB0aW9uOiAxNCB9XSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOlxuICAgICAgICAgICAgXCJyYWRpYW50OyBibHVkZ2VvbmluZywgcGllcmNpbmcsIGFuZCBzbGFzaGluZyBmcm9tIG5vbm1hZ2ljYWwgd2VhcG9uc1wiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczogXCJuZWNyb3RpYywgcG9pc29uXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOiBcImNoYXJtZWQsIGV4aGF1c3Rpb24sIGZyaWdodGVuZWQsIHBvaXNvbmVkXCIsXG4gICAgICAgIHNlbnNlczogXCJ0cnVlc2lnaHQgMTIwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDI0XCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJhbGwsIHRlbGVwYXRoeSAxMjAgZnQuXCIsXG4gICAgICAgIGNyOiBcIjIxXCIsXG4gICAgICAgIHRyYWl0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQW5nZWxpYyBXZWFwb25zXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgc29sYXIncyB3ZWFwb24gYXR0YWNrcyBhcmUgbWFnaWNhbC4gV2hlbiB0aGUgc29sYXIgaGl0cyB3aXRoIGFueSB3ZWFwb24sIHRoZSB3ZWFwb24gZGVhbHMgYW4gZXh0cmEgNmQ4IHJhZGlhbnQgZGFtYWdlIChpbmNsdWRlZCBpbiB0aGUgYXR0YWNrKS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJEaXZpbmUgQXdhcmVuZXNzXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgc29sYXIga25vd3MgaWYgaXQgaGVhcnMgYSBsaWUuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiSW5uYXRlIFNwZWxsY2FzdGluZ1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIHNvbGFyJ3Mgc3BlbGwgY2FzdGluZyBhYmlsaXR5IGlzIENoYXJpc21hIChzcGVsbCBzYXZlIERDIDI1KS4gSXQgY2FuIGlubmF0ZWx5IGNhc3QgdGhlIGZvbGxvd2luZyBzcGVsbHMsIHJlcXVpcmluZyBubyBtYXRlcmlhbCBjb21wb25lbnRzOlxcXFxuQXQgd2lsbDogZGV0ZWN0IGV2aWwgYW5kIGdvb2QsIGludmlzaWJpbGl0eSAoc2VsZiBvbmx5KVxcXFxuMy9kYXkgZWFjaDogYmxhZGUgYmFycmllciwgZGlzcGVsIGV2aWwgYW5kIGdvb2QsIHJlc3VycmVjdGlvblxcXFxuMS9kYXkgZWFjaDogY29tbXVuZSwgY29udHJvbCB3ZWF0aGVyXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTWFnaWMgUmVzaXN0YW5jZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIHNvbGFyIGhhcyBhZHZhbnRhZ2Ugb24gc2F2aW5nIHRocm93cyBhZ2FpbnN0IHNwZWxscyBhbmQgb3RoZXIgbWFnaWNhbCBlZmZlY3RzLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJNdWx0aWF0dGFja1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIHNvbGFyIG1ha2VzIHR3byBncmVhdHN3b3JkIGF0dGFja3MuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiR3JlYXRzd29yZFwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzE1IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMjIgKDRkNiArIDgpIHNsYXNoaW5nIGRhbWFnZSBwbHVzIDI3ICg2ZDgpIHJhZGlhbnQgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMTUsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiNGQ2ICsgNmQ4XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiA4XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiU2xheWluZyBMb25nYm93XCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJSYW5nZWQgV2VhcG9uIEF0dGFjazogKzEzIHRvIGhpdCwgcmFuZ2UgMTUwLzYwMCBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTUgKDJkOCArIDYpIHBpZXJjaW5nIGRhbWFnZSBwbHVzIDI3ICg2ZDgpIHJhZGlhbnQgZGFtYWdlLiBJZiB0aGUgdGFyZ2V0IGlzIGEgY3JlYXR1cmUgdGhhdCBoYXMgMTkwIGhpdCBwb2ludHMgb3IgZmV3ZXIsIGl0IG11c3Qgc3VjY2VlZCBvbiBhIERDIDE1IENvbnN0aXR1dGlvbiBzYXZpbmcgdGhyb3cgb3IgZGllLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMTMsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMmQ4ICsgNmQ4XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiA2XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiRmx5aW5nIFN3b3JkXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgc29sYXIgcmVsZWFzZXMgaXRzIGdyZWF0c3dvcmQgdG8gaG92ZXIgbWFnaWNhbGx5IGluIGFuIHVub2NjdXBpZWQgc3BhY2Ugd2l0aGluIDUgZnQuIG9mIGl0LiBJZiB0aGUgc29sYXIgY2FuIHNlZSB0aGUgc3dvcmQsIHRoZSBzb2xhciBjYW4gbWVudGFsbHkgY29tbWFuZCBpdCBhcyBhIGJvbnVzIGFjdGlvbiB0byBmbHkgdXAgdG8gNTAgZnQuIGFuZCBlaXRoZXIgbWFrZSBvbmUgYXR0YWNrIGFnYWluc3QgYSB0YXJnZXQgb3IgcmV0dXJuIHRvIHRoZSBzb2xhcidzIGhhbmRzLiBJZiB0aGUgaG92ZXJpbmcgc3dvcmQgaXMgdGFyZ2V0ZWQgYnkgYW55IGVmZmVjdCwgdGhlIHNvbGFyIGlzIGNvbnNpZGVyZWQgdG8gYmUgaG9sZGluZyBpdC4gVGhlIGhvdmVyaW5nIHN3b3JkIGZhbGxzIGlmIHRoZSBzb2xhciBkaWVzLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkhlYWxpbmcgVG91Y2ggKDQvRGF5KVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIHNvbGFyIHRvdWNoZXMgYW5vdGhlciBjcmVhdHVyZS4gVGhlIHRhcmdldCBtYWdpY2FsbHkgcmVnYWlucyA0MCAoOGQ4ICsgNCkgaGl0IHBvaW50cyBhbmQgaXMgZnJlZWQgZnJvbSBhbnkgY3Vyc2UsIGRpc2Vhc2UsIHBvaXNvbiwgYmxpbmRuZXNzLCBvciBkZWFmbmVzcy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgbGVnZW5kYXJ5X2FjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlRlbGVwb3J0XCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgc29sYXIgbWFnaWNhbGx5IHRlbGVwb3J0cywgYWxvbmcgd2l0aCBhbnkgZXF1aXBtZW50IGl0IGlzIHdlYXJpbmcgb3IgY2FycnlpbmcsIHVwIHRvIDEyMCBmdC4gdG8gYW4gdW5vY2N1cGllZCBzcGFjZSBpdCBjYW4gc2VlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlNlYXJpbmcgQnVyc3QgKENvc3RzIDIgQWN0aW9ucylcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBzb2xhciBlbWl0cyBtYWdpY2FsLCBkaXZpbmUgZW5lcmd5LiBFYWNoIGNyZWF0dXJlIG9mIGl0cyBjaG9pY2UgaW4gYSAxMCAtZm9vdCByYWRpdXMgbXVzdCBtYWtlIGEgREMgMjMgRGV4dGVyaXR5IHNhdmluZyB0aHJvdywgdGFraW5nIDE0ICg0ZDYpIGZpcmUgZGFtYWdlIHBsdXMgMTQgKDRkNikgcmFkaWFudCBkYW1hZ2Ugb24gYSBmYWlsZWQgc2F2ZSwgb3IgaGFsZiBhcyBtdWNoIGRhbWFnZSBvbiBhIHN1Y2Nlc3NmdWwgb25lLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkJsaW5kaW5nIEdhemUgKENvc3RzIDMgQWN0aW9ucylcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBzb2xhciB0YXJnZXRzIG9uZSBjcmVhdHVyZSBpdCBjYW4gc2VlIHdpdGhpbiAzMCBmdC4gb2YgaXQuIElmIHRoZSB0YXJnZXQgY2FuIHNlZSBpdCwgdGhlIHRhcmdldCBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxNSBDb25zdGl0dXRpb24gc2F2aW5nIHRocm93IG9yIGJlIGJsaW5kZWQgdW50aWwgbWFnaWMgc3VjaCBhcyB0aGUgbGVzc2VyIHJlc3RvcmF0aW9uIHNwZWxsIHJlbW92ZXMgdGhlIGJsaW5kbmVzcy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIlNwZWN0ZXJcIixcbiAgICAgICAgc2l6ZTogXCJNZWRpdW1cIixcbiAgICAgICAgdHlwZTogXCJ1bmRlYWRcIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcImNoYW90aWMgZXZpbFwiLFxuICAgICAgICBhYzogMTIsXG4gICAgICAgIGhwOiAyMixcbiAgICAgICAgaGl0X2RpY2U6IFwiNWQ4ICsgLTFcIixcbiAgICAgICAgc3BlZWQ6IFwiMCBmdC4sIGZseSA1MCBmdC4gKGhvdmVyKVwiLFxuICAgICAgICBzdGF0czogWzEsIDE0LCAxMSwgMTAsIDEwLCAxMV0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczpcbiAgICAgICAgICAgIFwiYWNpZCwgY29sZCwgZmlyZSwgbGlnaHRuaW5nLCB0aHVuZGVyOyBibHVkZ2VvbmluZywgcGllcmNpbmcsIGFuZCBzbGFzaGluZyBmcm9tIG5vbm1hZ2ljYWwgd2VhcG9uc1wiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczogXCJuZWNyb3RpYywgcG9pc29uXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOlxuICAgICAgICAgICAgXCJjaGFybWVkLCBleGhhdXN0aW9uLCBncmFwcGxlZCwgcGFyYWx5emVkLCBwZXRyaWZpZWQsIHBvaXNvbmVkLCBwcm9uZSwgcmVzdHJhaW5lZCwgdW5jb25zY2lvdXNcIixcbiAgICAgICAgc2Vuc2VzOiBcImRhcmt2aXNpb24gNjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTBcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcInVuZGVyc3RhbmRzIGFsbCBsYW5ndWFnZXMgaXQga25ldyBpbiBsaWZlIGJ1dCBjYW4ndCBzcGVha1wiLFxuICAgICAgICBjcjogXCIxXCIsXG4gICAgICAgIHRyYWl0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiSW5jb3Jwb3JlYWwgTW92ZW1lbnRcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBzcGVjdGVyIGNhbiBtb3ZlIHRocm91Z2ggb3RoZXIgY3JlYXR1cmVzIGFuZCBvYmplY3RzIGFzIGlmIHRoZXkgd2VyZSBkaWZmaWN1bHQgdGVycmFpbi4gSXQgdGFrZXMgNSAoMWQxMCkgZm9yY2UgZGFtYWdlIGlmIGl0IGVuZHMgaXRzIHR1cm4gaW5zaWRlIGFuIG9iamVjdC5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJTdW5saWdodCBTZW5zaXRpdml0eVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiV2hpbGUgaW4gc3VubGlnaHQsIHRoZSBzcGVjdGVyIGhhcyBkaXNhZHZhbnRhZ2Ugb24gYXR0YWNrIHJvbGxzLCBhcyB3ZWxsIGFzIG9uIFdpc2RvbSAoUGVyY2VwdGlvbikgY2hlY2tzIHRoYXQgcmVseSBvbiBzaWdodC5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTGlmZSBEcmFpblwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgU3BlbGwgQXR0YWNrOiArNCB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgY3JlYXR1cmUuIEhpdDogMTAgKDNkNikgbmVjcm90aWMgZGFtYWdlLiBUaGUgdGFyZ2V0IG11c3Qgc3VjY2VlZCBvbiBhIERDIDEwIENvbnN0aXR1dGlvbiBzYXZpbmcgdGhyb3cgb3IgaXRzIGhpdCBwb2ludCBtYXhpbXVtIGlzIHJlZHVjZWQgYnkgYW4gYW1vdW50IGVxdWFsIHRvIHRoZSBkYW1hZ2UgdGFrZW4uIFRoaXMgcmVkdWN0aW9uIGxhc3RzIHVudGlsIHRoZSBjcmVhdHVyZSBmaW5pc2hlcyBhIGxvbmcgcmVzdC4gVGhlIHRhcmdldCBkaWVzIGlmIHRoaXMgZWZmZWN0IHJlZHVjZXMgaXRzIGhpdCBwb2ludCBtYXhpbXVtIHRvIDAuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA0LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjNkNlwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJTcGlkZXJcIixcbiAgICAgICAgc2l6ZTogXCJUaW55XCIsXG4gICAgICAgIHR5cGU6IFwiYmVhc3RcIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcInVuYWxpZ25lZFwiLFxuICAgICAgICBhYzogMTIsXG4gICAgICAgIGhwOiAxLFxuICAgICAgICBoaXRfZGljZTogXCIxZDQgKyAtMlwiLFxuICAgICAgICBzcGVlZDogXCIyMCBmdC4sIGNsaW1iIDIwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzIsIDE0LCA4LCAxLCAxMCwgMl0sXG4gICAgICAgIHNraWxsc2F2ZXM6IFt7IHN0ZWFsdGg6IDQgfV0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBzZW5zZXM6IFwiZGFya3Zpc2lvbiAzMCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxMlwiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiXCIsXG4gICAgICAgIGNyOiBcIjBcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJTcGlkZXIgQ2xpbWJcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBzcGlkZXIgY2FuIGNsaW1iIGRpZmZpY3VsdCBzdXJmYWNlcywgaW5jbHVkaW5nIHVwc2lkZSBkb3duIG9uIGNlaWxpbmdzLCB3aXRob3V0IG5lZWRpbmcgdG8gbWFrZSBhbiBhYmlsaXR5IGNoZWNrLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIldlYiBTZW5zZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiV2hpbGUgaW4gY29udGFjdCB3aXRoIGEgd2ViLCB0aGUgc3BpZGVyIGtub3dzIHRoZSBleGFjdCBsb2NhdGlvbiBvZiBhbnkgb3RoZXIgY3JlYXR1cmUgaW4gY29udGFjdCB3aXRoIHRoZSBzYW1lIHdlYi5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJXZWIgV2Fsa2VyXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgc3BpZGVyIGlnbm9yZXMgbW92ZW1lbnQgcmVzdHJpY3Rpb25zIGNhdXNlZCBieSB3ZWJiaW5nLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJCaXRlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNCB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgY3JlYXR1cmUuIEhpdDogMSBwaWVyY2luZyBkYW1hZ2UsIGFuZCB0aGUgdGFyZ2V0IG11c3Qgc3VjY2VlZCBvbiBhIERDIDkgQ29uc3RpdHV0aW9uIHNhdmluZyB0aHJvdyBvciB0YWtlIDIgKDFkNCkgcG9pc29uIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDQsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiAxXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJTcGlyaXQgTmFnYVwiLFxuICAgICAgICBzaXplOiBcIkxhcmdlXCIsXG4gICAgICAgIHR5cGU6IFwibW9uc3Ryb3NpdHlcIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcImNoYW90aWMgZXZpbFwiLFxuICAgICAgICBhYzogMTUsXG4gICAgICAgIGhwOiA3NSxcbiAgICAgICAgaGl0X2RpY2U6IFwiMTBkMTAgKyAyMFwiLFxuICAgICAgICBzcGVlZDogXCI0MCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsxOCwgMTcsIDE0LCAxNiwgMTUsIDE2XSxcbiAgICAgICAgc2F2ZXM6IFtcbiAgICAgICAgICAgIHsgZGV4dGVyaXR5OiA2IH0sXG4gICAgICAgICAgICB7IGNvbnN0aXR1dGlvbjogNSB9LFxuICAgICAgICAgICAgeyB3aXNkb206IDUgfSxcbiAgICAgICAgICAgIHsgY2hhcmlzbWE6IDYgfVxuICAgICAgICBdLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcInBvaXNvblwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJjaGFybWVkLCBwb2lzb25lZFwiLFxuICAgICAgICBzZW5zZXM6IFwiZGFya3Zpc2lvbiA2MCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxMlwiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiQWJ5c3NhbCwgQ29tbW9uXCIsXG4gICAgICAgIGNyOiBcIjhcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJSZWp1dmVuYXRpb25cIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIklmIGl0IGRpZXMsIHRoZSBuYWdhIHJldHVybnMgdG8gbGlmZSBpbiAxZDYgZGF5cyBhbmQgcmVnYWlucyBhbGwgaXRzIGhpdCBwb2ludHMuIE9ubHkgYSB3aXNoIHNwZWxsIGNhbiBwcmV2ZW50IHRoaXMgdHJhaXQgZnJvbSBmdW5jdGlvbmluZy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQml0ZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzcgdG8gaGl0LCByZWFjaCAxMCBmdC4sIG9uZSBjcmVhdHVyZS4gSGl0OiA3ICgxZDYgKyA0KSBwaWVyY2luZyBkYW1hZ2UsIGFuZCB0aGUgdGFyZ2V0IG11c3QgbWFrZSBhIERDIDEzIENvbnN0aXR1dGlvbiBzYXZpbmcgdGhyb3csIHRha2luZyAzMSAoN2Q4KSBwb2lzb24gZGFtYWdlIG9uIGEgZmFpbGVkIHNhdmUsIG9yIGhhbGYgYXMgbXVjaCBkYW1hZ2Ugb24gYSBzdWNjZXNzZnVsIG9uZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDcsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMWQ2XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiA0XG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIHNwZWxsczogW1xuICAgICAgICAgICAgXCJUaGUgbmFnYSBpcyBhIDEwdGgtbGV2ZWwgc3BlbGxjYXN0ZXIuIEl0cyBzcGVsbGNhc3RpbmcgYWJpbGl0eSBpcyBJbnRlbGxpZ2VuY2UgKHNwZWxsIHNhdmUgREMgMTQsICs2IHRvIGhpdCB3aXRoIHNwZWxsIGF0dGFja3MpLCBhbmQgaXQgbmVlZHMgb25seSB2ZXJiYWwgY29tcG9uZW50cyB0byBjYXN0IGl0cyBzcGVsbHMuIEl0IGhhcyB0aGUgZm9sbG93aW5nIHdpemFyZCBzcGVsbHMgcHJlcGFyZWQ6XCIsXG4gICAgICAgICAgICB7IFwiQ2FudHJpcHMgKGF0IHdpbGwpXCI6IFwibWFnZSBoYW5kLCBtaW5vciBpbGx1c2lvbiwgcmF5IG9mIGZyb3N0XCIgfSxcbiAgICAgICAgICAgIHsgXCIxc3QgbGV2ZWwgKDQgc2xvdHMpXCI6IFwiY2hhcm0gcGVyc29uLCBkZXRlY3QgbWFnaWMsIHNsZWVwXCIgfSxcbiAgICAgICAgICAgIHsgXCIybmQgbGV2ZWwgKDMgc2xvdHMpXCI6IFwiZGV0ZWN0IHRob3VnaHRzLCBob2xkIHBlcnNvblwiIH0sXG4gICAgICAgICAgICB7IFwiM3JkIGxldmVsICgzIHNsb3RzKVwiOiBcImxpZ2h0bmluZyBib2x0LCB3YXRlciBicmVhdGhpbmdcIiB9LFxuICAgICAgICAgICAgeyBcIjR0aCBsZXZlbCAoMyBzbG90cylcIjogXCJibGlnaHQsIGRpbWVuc2lvbiBkb29yXCIgfSxcbiAgICAgICAgICAgIHsgXCI1dGggbGV2ZWwgKDIgc2xvdHMpXCI6IFwiZG9taW5hdGUgcGVyc29uXCIgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiU3ByaXRlXCIsXG4gICAgICAgIHNpemU6IFwiVGlueVwiLFxuICAgICAgICB0eXBlOiBcImZleVwiLFxuICAgICAgICBzdWJ0eXBlOiBcIlwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwibmV1dHJhbCBnb29kXCIsXG4gICAgICAgIGFjOiAxNSxcbiAgICAgICAgaHA6IDIsXG4gICAgICAgIGhpdF9kaWNlOiBcIjFkNCArIC0xXCIsXG4gICAgICAgIHNwZWVkOiBcIjEwIGZ0LiwgZmx5IDQwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzMsIDE4LCAxMCwgMTQsIDEzLCAxMV0sXG4gICAgICAgIHNraWxsc2F2ZXM6IFt7IHBlcmNlcHRpb246IDMgfSwgeyBzdGVhbHRoOiA4IH1dLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcbiAgICAgICAgc2Vuc2VzOiBcInBhc3NpdmUgUGVyY2VwdGlvbiAxM1wiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiQ29tbW9uLCBFbHZpc2gsIFN5bHZhblwiLFxuICAgICAgICBjcjogXCIxLzRcIixcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTG9uZ3N3b3JkXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMiB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDEgc2xhc2hpbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDFcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJTaG9ydGJvd1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiUmFuZ2VkIFdlYXBvbiBBdHRhY2s6ICs2IHRvIGhpdCwgcmFuZ2UgNDAvMTYwIGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxIHBpZXJjaW5nIGRhbWFnZSwgYW5kIHRoZSB0YXJnZXQgbXVzdCBzdWNjZWVkIG9uIGEgREMgMTAgQ29uc3RpdHV0aW9uIHNhdmluZyB0aHJvdyBvciBiZWNvbWUgcG9pc29uZWQgZm9yIDEgbWludXRlLiBJZiBpdHMgc2F2aW5nIHRocm93IHJlc3VsdCBpcyA1IG9yIGxvd2VyLCB0aGUgcG9pc29uZWQgdGFyZ2V0IGZhbGxzIHVuY29uc2Npb3VzIGZvciB0aGUgc2FtZSBkdXJhdGlvbiwgb3IgdW50aWwgaXQgdGFrZXMgZGFtYWdlIG9yIGFub3RoZXIgY3JlYXR1cmUgdGFrZXMgYW4gYWN0aW9uIHRvIHNoYWtlIGl0IGF3YWtlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDFcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJIZWFydCBTaWdodFwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIHNwcml0ZSB0b3VjaGVzIGEgY3JlYXR1cmUgYW5kIG1hZ2ljYWxseSBrbm93cyB0aGUgY3JlYXR1cmUncyBjdXJyZW50IGVtb3Rpb25hbCBzdGF0ZS4gSWYgdGhlIHRhcmdldCBmYWlscyBhIERDIDEwIENoYXJpc21hIHNhdmluZyB0aHJvdywgdGhlIHNwcml0ZSBhbHNvIGtub3dzIHRoZSBjcmVhdHVyZSdzIGFsaWdubWVudC4gQ2VsZXN0aWFscywgZmllbmRzLCBhbmQgdW5kZWFkIGF1dG9tYXRpY2FsbHkgZmFpbCB0aGUgc2F2aW5nIHRocm93LlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkludmlzaWJpbGl0eVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIHNwcml0ZSBtYWdpY2FsbHkgdHVybnMgaW52aXNpYmxlIHVudGlsIGl0IGF0dGFja3Mgb3IgY2FzdHMgYSBzcGVsbCwgb3IgdW50aWwgaXRzIGNvbmNlbnRyYXRpb24gZW5kcyAoYXMgaWYgY29uY2VudHJhdGluZyBvbiBhIHNwZWxsKS4gQW55IGVxdWlwbWVudCB0aGUgc3ByaXRlIHdlYXJzIG9yIGNhcnJpZXMgaXMgaW52aXNpYmxlIHdpdGggaXQuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJTcHlcIixcbiAgICAgICAgc2l6ZTogXCJNZWRpdW1cIixcbiAgICAgICAgdHlwZTogXCJodW1hbm9pZFwiLFxuICAgICAgICBzdWJ0eXBlOiBcImFueSByYWNlXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJhbnkgYWxpZ25tZW50XCIsXG4gICAgICAgIGFjOiAxMixcbiAgICAgICAgaHA6IDI3LFxuICAgICAgICBoaXRfZGljZTogXCI2ZDhcIixcbiAgICAgICAgc3BlZWQ6IFwiMzAgZnQuXCIsXG4gICAgICAgIHN0YXRzOiBbMTAsIDE1LCAxMCwgMTIsIDE0LCAxNl0sXG4gICAgICAgIHNraWxsc2F2ZXM6IFtcbiAgICAgICAgICAgIHsgZGVjZXB0aW9uOiA1IH0sXG4gICAgICAgICAgICB7IGluc2lnaHQ6IDQgfSxcbiAgICAgICAgICAgIHsgaW52ZXN0aWdhdGlvbjogNSB9LFxuICAgICAgICAgICAgeyBwZXJjZXB0aW9uOiA2IH0sXG4gICAgICAgICAgICB7IHBlcnN1YXNpb246IDUgfSxcbiAgICAgICAgICAgIHsgc3RlYWx0aDogNCB9XG4gICAgICAgIF0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBzZW5zZXM6IFwicGFzc2l2ZSBQZXJjZXB0aW9uIDE2XCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJhbnkgdHdvIGxhbmd1YWdlc1wiLFxuICAgICAgICBjcjogXCIxXCIsXG4gICAgICAgIHRyYWl0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQ3VubmluZyBBY3Rpb25cIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk9uIGVhY2ggb2YgaXRzIHR1cm5zLCB0aGUgc3B5IGNhbiB1c2UgYSBib251cyBhY3Rpb24gdG8gdGFrZSB0aGUgRGFzaCwgRGlzZW5nYWdlLCBvciBIaWRlIGFjdGlvbi5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJTbmVhayBBdHRhY2sgKDEvVHVybilcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBzcHkgZGVhbHMgYW4gZXh0cmEgNyAoMmQ2KSBkYW1hZ2Ugd2hlbiBpdCBoaXRzIGEgdGFyZ2V0IHdpdGggYSB3ZWFwb24gYXR0YWNrIGFuZCBoYXMgYWR2YW50YWdlIG9uIHRoZSBhdHRhY2sgcm9sbCwgb3Igd2hlbiB0aGUgdGFyZ2V0IGlzIHdpdGhpbiA1IGZ0LiBvZiBhbiBhbGx5IG9mIHRoZSBzcHkgdGhhdCBpc24ndCBpbmNhcGFjaXRhdGVkIGFuZCB0aGUgc3B5IGRvZXNuJ3QgaGF2ZSBkaXNhZHZhbnRhZ2Ugb24gdGhlIGF0dGFjayByb2xsLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIyZDZcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJNdWx0aWF0dGFja1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIHNweSBtYWtlcyB0d28gbWVsZWUgYXR0YWNrcy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJTaG9ydHN3b3JkXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNCB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDUgKDFkNiArIDIpIHBpZXJjaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDQsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMWQ2XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiAyXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiSGFuZCBDcm9zc2Jvd1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiUmFuZ2VkIFdlYXBvbiBBdHRhY2s6ICs0IHRvIGhpdCwgcmFuZ2UgMzAvMTIwIGZ0Liwgb25lIHRhcmdldC4gSGl0OiA1ICgxZDYgKyAyKSBwaWVyY2luZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA0LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjFkNlwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogMlxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiU3RlYW0gTWVwaGl0XCIsXG4gICAgICAgIHNpemU6IFwiU21hbGxcIixcbiAgICAgICAgdHlwZTogXCJlbGVtZW50YWxcIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcIm5ldXRyYWwgZXZpbFwiLFxuICAgICAgICBhYzogMTAsXG4gICAgICAgIGhwOiAyMSxcbiAgICAgICAgaGl0X2RpY2U6IFwiNmQ2XCIsXG4gICAgICAgIHNwZWVkOiBcIjMwIGZ0LiwgZmx5IDMwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzUsIDExLCAxMCwgMTEsIDEwLCAxMl0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwiZmlyZSwgcG9pc29uXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOiBcInBvaXNvbmVkXCIsXG4gICAgICAgIHNlbnNlczogXCJkYXJrdmlzaW9uIDYwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDEwXCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJBcXVhbiwgSWduYW5cIixcbiAgICAgICAgY3I6IFwiMS80XCIsXG4gICAgICAgIHRyYWl0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiRGVhdGggQnVyc3RcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIldoZW4gdGhlIG1lcGhpdCBkaWVzLCBpdCBleHBsb2RlcyBpbiBhIGNsb3VkIG9mIHN0ZWFtLiBFYWNoIGNyZWF0dXJlIHdpdGhpbiA1IGZ0LiBvZiB0aGUgbWVwaGl0IG11c3Qgc3VjY2VlZCBvbiBhIERDIDEwIERleHRlcml0eSBzYXZpbmcgdGhyb3cgb3IgdGFrZSA0ICgxZDgpIGZpcmUgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIxZDhcIlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIklubmF0ZSBTcGVsbGNhc3RpbmcgKDEvRGF5KVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIG1lcGhpdCBjYW4gaW5uYXRlbHkgY2FzdCBibHVyLCByZXF1aXJpbmcgbm8gbWF0ZXJpYWwgY29tcG9uZW50cy4gSXRzIGlubmF0ZSBzcGVsbGNhc3RpbmcgYWJpbGl0eSBpcyBDaGFyaXNtYS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQ2xhd3NcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICsyIHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSBjcmVhdHVyZS4gSGl0OiAyICgxZDQpIHNsYXNoaW5nIGRhbWFnZSBwbHVzIDIgKDFkNCkgZmlyZSBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAyLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjJkNFwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RlYW0gQnJlYXRoIChSZWNoYXJnZSA2KVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIG1lcGhpdCBleGhhbGVzIGEgMTUtZm9vdCBjb25lIG9mIHNjYWxkaW5nIHN0ZWFtLiBFYWNoIGNyZWF0dXJlIGluIHRoYXQgYXJlYSBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxMCBEZXh0ZXJpdHkgc2F2aW5nIHRocm93LCB0YWtpbmcgNCAoMWQ4KSBmaXJlIGRhbWFnZSBvbiBhIGZhaWxlZCBzYXZlLCBvciBoYWxmIGFzIG11Y2ggZGFtYWdlIG9uIGEgc3VjY2Vzc2Z1bCBvbmUuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiVmFyaWFudDogU3VtbW9uIE1lcGhpdHMgKDEvRGF5KVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIG1lcGhpdCBoYXMgYSAyNSBwZXJjZW50IGNoYW5jZSBvZiBzdW1tb25pbmcgMWQ0IG1lcGhpdHMgb2YgaXRzIGtpbmQuIEEgc3VtbW9uZWQgbWVwaGl0IGFwcGVhcnMgaW4gYW4gdW5vY2N1cGllZCBzcGFjZSB3aXRoaW4gNjAgZmVldCBvZiBpdHMgc3VtbW9uZXIsIGFjdHMgYXMgYW4gYWxseSBvZiBpdHMgc3VtbW9uZXIsIGFuZCBjYW4ndCBzdW1tb24gb3RoZXIgbWVwaGl0cy4gSXQgcmVtYWlucyBmb3IgMSBtaW51dGUsIHVudGlsIGl0IG9yIGl0cyBzdW1tb25lciBkaWVzLCBvciB1bnRpbCBpdHMgc3VtbW9uZXIgZGlzbWlzc2VzIGl0IGFzIGFuIGFjdGlvbi5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIlN0aXJnZVwiLFxuICAgICAgICBzaXplOiBcIlRpbnlcIixcbiAgICAgICAgdHlwZTogXCJiZWFzdFwiLFxuICAgICAgICBzdWJ0eXBlOiBcIlwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwidW5hbGlnbmVkXCIsXG4gICAgICAgIGFjOiAxNCxcbiAgICAgICAgaHA6IDIsXG4gICAgICAgIGhpdF9kaWNlOiBcIjFkNCArIC0xXCIsXG4gICAgICAgIHNwZWVkOiBcIjEwIGZ0LiwgZmx5IDQwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzQsIDE2LCAxMSwgMiwgOCwgNl0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBzZW5zZXM6IFwiZGFya3Zpc2lvbiA2MCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiA5XCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJcIixcbiAgICAgICAgY3I6IFwiMS84XCIsXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkJsb29kIERyYWluXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNSB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgY3JlYXR1cmUuIEhpdDogNSAoMWQ0ICsgMykgcGllcmNpbmcgZGFtYWdlLCBhbmQgdGhlIHN0aXJnZSBhdHRhY2hlcyB0byB0aGUgdGFyZ2V0LiBXaGlsZSBhdHRhY2hlZCwgdGhlIHN0aXJnZSBkb2Vzbid0IGF0dGFjay4gSW5zdGVhZCwgYXQgdGhlIHN0YXJ0IG9mIGVhY2ggb2YgdGhlIHN0aXJnZSdzIHR1cm5zLCB0aGUgdGFyZ2V0IGxvc2VzIDUgKDFkNCArIDMpIGhpdCBwb2ludHMgZHVlIHRvIGJsb29kIGxvc3MuXFxcXG5UaGUgc3RpcmdlIGNhbiBkZXRhY2ggaXRzZWxmIGJ5IHNwZW5kaW5nIDUgZmVldCBvZiBpdHMgbW92ZW1lbnQuIEl0IGRvZXMgc28gYWZ0ZXIgaXQgZHJhaW5zIDEwIGhpdCBwb2ludHMgb2YgYmxvb2QgZnJvbSB0aGUgdGFyZ2V0IG9yIHRoZSB0YXJnZXQgZGllcy4gQSBjcmVhdHVyZSwgaW5jbHVkaW5nIHRoZSB0YXJnZXQsIGNhbiB1c2UgaXRzIGFjdGlvbiB0byBkZXRhY2ggdGhlIHN0aXJnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDUsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMWQ0XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiAzXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJTdG9uZSBHaWFudFwiLFxuICAgICAgICBzaXplOiBcIkh1Z2VcIixcbiAgICAgICAgdHlwZTogXCJnaWFudFwiLFxuICAgICAgICBzdWJ0eXBlOiBcIlwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwibmV1dHJhbFwiLFxuICAgICAgICBhYzogMTcsXG4gICAgICAgIGhwOiAxMjYsXG4gICAgICAgIGhpdF9kaWNlOiBcIjExZDEyICsgNTRcIixcbiAgICAgICAgc3BlZWQ6IFwiNDAgZnQuXCIsXG4gICAgICAgIHN0YXRzOiBbMjMsIDE1LCAyMCwgMTAsIDEyLCA5XSxcbiAgICAgICAgc2F2ZXM6IFt7IGRleHRlcml0eTogNSB9LCB7IGNvbnN0aXR1dGlvbjogOCB9LCB7IHdpc2RvbTogNCB9XSxcbiAgICAgICAgc2tpbGxzYXZlczogW3sgYXRobGV0aWNzOiAxMiB9LCB7IHBlcmNlcHRpb246IDQgfV0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBzZW5zZXM6IFwiZGFya3Zpc2lvbiA2MCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxNFwiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiR2lhbnRcIixcbiAgICAgICAgY3I6IFwiN1wiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlN0b25lIENhbW91ZmxhZ2VcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBnaWFudCBoYXMgYWR2YW50YWdlIG9uIERleHRlcml0eSAoU3RlYWx0aCkgY2hlY2tzIG1hZGUgdG8gaGlkZSBpbiByb2NreSB0ZXJyYWluLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJNdWx0aWF0dGFja1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGdpYW50IG1ha2VzIHR3byBncmVhdGNsdWIgYXR0YWNrcy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJHcmVhdGNsdWJcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs5IHRvIGhpdCwgcmVhY2ggMTUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDE5ICgzZDggKyA2KSBibHVkZ2VvbmluZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA5LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjNkOFwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogNlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlJvY2tcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlJhbmdlZCBXZWFwb24gQXR0YWNrOiArOSB0byBoaXQsIHJhbmdlIDYwLzI0MCBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMjggKDRkMTAgKyA2KSBibHVkZ2VvbmluZyBkYW1hZ2UuIElmIHRoZSB0YXJnZXQgaXMgYSBjcmVhdHVyZSwgaXQgbXVzdCBzdWNjZWVkIG9uIGEgREMgMTcgU3RyZW5ndGggc2F2aW5nIHRocm93IG9yIGJlIGtub2NrZWQgcHJvbmUuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA5LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjRkMTBcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDZcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgcmVhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJSb2NrIENhdGNoaW5nXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJJZiBhIHJvY2sgb3Igc2ltaWxhciBvYmplY3QgaXMgaHVybGVkIGF0IHRoZSBnaWFudCwgdGhlIGdpYW50IGNhbiwgd2l0aCBhIHN1Y2Nlc3NmdWwgREMgMTAgRGV4dGVyaXR5IHNhdmluZyB0aHJvdywgY2F0Y2ggdGhlIG1pc3NpbGUgYW5kIHRha2Ugbm8gYmx1ZGdlb25pbmcgZGFtYWdlIGZyb20gaXQuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJTdG9uZSBHb2xlbVwiLFxuICAgICAgICBzaXplOiBcIkxhcmdlXCIsXG4gICAgICAgIHR5cGU6IFwiY29uc3RydWN0XCIsXG4gICAgICAgIHN1YnR5cGU6IFwiXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcbiAgICAgICAgYWM6IDE3LFxuICAgICAgICBocDogMTc4LFxuICAgICAgICBoaXRfZGljZTogXCIxN2QxMCArIDg0XCIsXG4gICAgICAgIHNwZWVkOiBcIjMwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzIyLCA5LCAyMCwgMywgMTEsIDFdLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOlxuICAgICAgICAgICAgXCJwb2lzb24sIHBzeWNoaWM7IGJsdWRnZW9uaW5nLCBwaWVyY2luZywgYW5kIHNsYXNoaW5nIGZyb20gbm9ubWFnaWNhbCB3ZWFwb25zIHRoYXQgYXJlbid0IGFkYW1hbnRpbmVcIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6XG4gICAgICAgICAgICBcImNoYXJtZWQsIGV4aGF1c3Rpb24sIGZyaWdodGVuZWQsIHBhcmFseXplZCwgcGV0cmlmaWVkLCBwb2lzb25lZFwiLFxuICAgICAgICBzZW5zZXM6IFwiZGFya3Zpc2lvbiAxMjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTBcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcInVuZGVyc3RhbmRzIHRoZSBsYW5ndWFnZXMgb2YgaXRzIGNyZWF0b3IgYnV0IGNhbid0IHNwZWFrXCIsXG4gICAgICAgIGNyOiBcIjEwXCIsXG4gICAgICAgIHRyYWl0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiSW1tdXRhYmxlIEZvcm1cIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBnb2xlbSBpcyBpbW11bmUgdG8gYW55IHNwZWxsIG9yIGVmZmVjdCB0aGF0IHdvdWxkIGFsdGVyIGl0cyBmb3JtLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk1hZ2ljIFJlc2lzdGFuY2VcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBnb2xlbSBoYXMgYWR2YW50YWdlIG9uIHNhdmluZyB0aHJvd3MgYWdhaW5zdCBzcGVsbHMgYW5kIG90aGVyIG1hZ2ljYWwgZWZmZWN0cy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJNYWdpYyBXZWFwb25zXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZ29sZW0ncyB3ZWFwb24gYXR0YWNrcyBhcmUgbWFnaWNhbC5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBnb2xlbSBtYWtlcyB0d28gc2xhbSBhdHRhY2tzLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlNsYW1cIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICsxMCB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDE5ICgzZDggKyA2KSBibHVkZ2VvbmluZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAxMCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIzZDhcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDZcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJTbG93IChSZWNoYXJnZSA1LTYpXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZ29sZW0gdGFyZ2V0cyBvbmUgb3IgbW9yZSBjcmVhdHVyZXMgaXQgY2FuIHNlZSB3aXRoaW4gMTAgZnQuIG9mIGl0LiBFYWNoIHRhcmdldCBtdXN0IG1ha2UgYSBEQyAxNyBXaXNkb20gc2F2aW5nIHRocm93IGFnYWluc3QgdGhpcyBtYWdpYy4gT24gYSBmYWlsZWQgc2F2ZSwgYSB0YXJnZXQgY2FuJ3QgdXNlIHJlYWN0aW9ucywgaXRzIHNwZWVkIGlzIGhhbHZlZCwgYW5kIGl0IGNhbid0IG1ha2UgbW9yZSB0aGFuIG9uZSBhdHRhY2sgb24gaXRzIHR1cm4uIEluIGFkZGl0aW9uLCB0aGUgdGFyZ2V0IGNhbiB0YWtlIGVpdGhlciBhbiBhY3Rpb24gb3IgYSBib251cyBhY3Rpb24gb24gaXRzIHR1cm4sIG5vdCBib3RoLiBUaGVzZSBlZmZlY3RzIGxhc3QgZm9yIDEgbWludXRlLiBBIHRhcmdldCBjYW4gcmVwZWF0IHRoZSBzYXZpbmcgdGhyb3cgYXQgdGhlIGVuZCBvZiBlYWNoIG9mIGl0cyB0dXJucywgZW5kaW5nIHRoZSBlZmZlY3Qgb24gaXRzZWxmIG9uIGEgc3VjY2Vzcy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIlN0b3JtIEdpYW50XCIsXG4gICAgICAgIHNpemU6IFwiSHVnZVwiLFxuICAgICAgICB0eXBlOiBcImdpYW50XCIsXG4gICAgICAgIHN1YnR5cGU6IFwiXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJjaGFvdGljIGdvb2RcIixcbiAgICAgICAgYWM6IDE2LFxuICAgICAgICBocDogMjMwLFxuICAgICAgICBoaXRfZGljZTogXCIyMGQxMiArIDEwMFwiLFxuICAgICAgICBzcGVlZDogXCI1MCBmdC4sIHN3aW0gNTAgZnQuXCIsXG4gICAgICAgIHN0YXRzOiBbMjksIDE0LCAyMCwgMTYsIDE4LCAxOF0sXG4gICAgICAgIHNhdmVzOiBbXG4gICAgICAgICAgICB7IHN0cmVuZ3RoOiAxNCB9LFxuICAgICAgICAgICAgeyBjb25zdGl0dXRpb246IDEwIH0sXG4gICAgICAgICAgICB7IHdpc2RvbTogOSB9LFxuICAgICAgICAgICAgeyBjaGFyaXNtYTogOSB9XG4gICAgICAgIF0sXG4gICAgICAgIHNraWxsc2F2ZXM6IFtcbiAgICAgICAgICAgIHsgYXJjYW5hOiA4IH0sXG4gICAgICAgICAgICB7IGF0aGxldGljczogMTQgfSxcbiAgICAgICAgICAgIHsgaGlzdG9yeTogOCB9LFxuICAgICAgICAgICAgeyBwZXJjZXB0aW9uOiA5IH1cbiAgICAgICAgXSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOiBcImNvbGRcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwibGlnaHRuaW5nLCB0aHVuZGVyXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBzZW5zZXM6IFwicGFzc2l2ZSBQZXJjZXB0aW9uIDE5XCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJDb21tb24sIEdpYW50XCIsXG4gICAgICAgIGNyOiBcIjEzXCIsXG4gICAgICAgIHRyYWl0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQW1waGliaW91c1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGdpYW50IGNhbiBicmVhdGhlIGFpciBhbmQgd2F0ZXIuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiSW5uYXRlIFNwZWxsY2FzdGluZ1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGdpYW50J3MgaW5uYXRlIHNwZWxsY2FzdGluZyBhYmlsaXR5IGlzIENoYXJpc21hIChzcGVsbCBzYXZlIERDIDE3KS4gSXQgY2FuIGlubmF0ZWx5IGNhc3QgdGhlIGZvbGxvd2luZyBzcGVsbHMsIHJlcXVpcmluZyBubyBtYXRlcmlhbCBjb21wb25lbnRzOlxcXFxuXFxcXG5BdCB3aWxsOiBkZXRlY3QgbWFnaWMsIGZlYXRoZXIgZmFsbCwgbGV2aXRhdGUsIGxpZ2h0XFxcXG4zL2RheSBlYWNoOiBjb250cm9sIHdlYXRoZXIsIHdhdGVyIGJyZWF0aGluZ1wiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJNdWx0aWF0dGFja1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGdpYW50IG1ha2VzIHR3byBncmVhdHN3b3JkIGF0dGFja3MuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiR3JlYXRzd29yZFwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzE0IHRvIGhpdCwgcmVhY2ggMTAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDMwICg2ZDYgKyA5KSBzbGFzaGluZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAxNCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCI2ZDZcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDlcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJSb2NrXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJSYW5nZWQgV2VhcG9uIEF0dGFjazogKzE0IHRvIGhpdCwgcmFuZ2UgNjAvMjQwIGZ0Liwgb25lIHRhcmdldC4gSGl0OiAzNSAoNGQxMiArIDkpIGJsdWRnZW9uaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDE0LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjRkMTJcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDlcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJMaWdodG5pbmcgU3RyaWtlIChSZWNoYXJnZSA1LTYpXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZ2lhbnQgaHVybHMgYSBtYWdpY2FsIGxpZ2h0bmluZyBib2x0IGF0IGEgcG9pbnQgaXQgY2FuIHNlZSB3aXRoaW4gNTAwIGZlZXQgb2YgaXQuIEVhY2ggY3JlYXR1cmUgd2l0aGluIDEwIGZlZXQgb2YgdGhhdCBwb2ludCBtdXN0IG1ha2UgYSBEQyAxNyBEZXh0ZXJpdHkgc2F2aW5nIHRocm93LCB0YWtpbmcgNTQgKDEyZDgpIGxpZ2h0bmluZyBkYW1hZ2Ugb24gYSBmYWlsZWQgc2F2ZSwgb3IgaGFsZiBhcyBtdWNoIGRhbWFnZSBvbiBhIHN1Y2Nlc3NmdWwgb25lLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIxMmQ4XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIlN1Y2N1YnVzL0luY3VidXNcIixcbiAgICAgICAgc2l6ZTogXCJNZWRpdW1cIixcbiAgICAgICAgdHlwZTogXCJmaWVuZFwiLFxuICAgICAgICBzdWJ0eXBlOiBcInNoYXBlY2hhbmdlclwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwibmV1dHJhbCBldmlsXCIsXG4gICAgICAgIGFjOiAxNSxcbiAgICAgICAgaHA6IDY2LFxuICAgICAgICBoaXRfZGljZTogXCIxMmQ4ICsgMTJcIixcbiAgICAgICAgc3BlZWQ6IFwiMzAgZnQuLCBmbHkgNjAgZnQuXCIsXG4gICAgICAgIHN0YXRzOiBbOCwgMTcsIDEzLCAxNSwgMTIsIDIwXSxcbiAgICAgICAgc2tpbGxzYXZlczogW1xuICAgICAgICAgICAgeyBkZWNlcHRpb246IDkgfSxcbiAgICAgICAgICAgIHsgaW5zaWdodDogNSB9LFxuICAgICAgICAgICAgeyBwZXJjZXB0aW9uOiA1IH0sXG4gICAgICAgICAgICB7IHBlcnN1YXNpb246IDkgfSxcbiAgICAgICAgICAgIHsgc3RlYWx0aDogNyB9XG4gICAgICAgIF0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczpcbiAgICAgICAgICAgIFwiY29sZCwgZmlyZSwgbGlnaHRuaW5nLCBwb2lzb247IGJsdWRnZW9uaW5nLCBwaWVyY2luZywgYW5kIHNsYXNoaW5nIGZyb20gbm9ubWFnaWNhbCB3ZWFwb25zXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcbiAgICAgICAgc2Vuc2VzOiBcImRhcmt2aXNpb24gNjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTVcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcIkFieXNzYWwsIENvbW1vbiwgSW5mZXJuYWwsIHRlbGVwYXRoeSA2MCBmdC5cIixcbiAgICAgICAgY3I6IFwiNFwiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlRlbGVwYXRoaWMgQm9uZFwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGZpZW5kIGlnbm9yZXMgdGhlIHJhbmdlIHJlc3RyaWN0aW9uIG9uIGl0cyB0ZWxlcGF0aHkgd2hlbiBjb21tdW5pY2F0aW5nIHdpdGggYSBjcmVhdHVyZSBpdCBoYXMgY2hhcm1lZC4gVGhlIHR3byBkb24ndCBldmVuIG5lZWQgdG8gYmUgb24gdGhlIHNhbWUgcGxhbmUgb2YgZXhpc3RlbmNlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlNoYXBlY2hhbmdlclwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGZpZW5kIGNhbiB1c2UgaXRzIGFjdGlvbiB0byBwb2x5bW9ycGggaW50byBhIFNtYWxsIG9yIE1lZGl1bSBodW1hbm9pZCwgb3IgYmFjayBpbnRvIGl0cyB0cnVlIGZvcm0uIFdpdGhvdXQgd2luZ3MsIHRoZSBmaWVuZCBsb3NlcyBpdHMgZmx5aW5nIHNwZWVkLiBPdGhlciB0aGFuIGl0cyBzaXplIGFuZCBzcGVlZCwgaXRzIHN0YXRpc3RpY3MgYXJlIHRoZSBzYW1lIGluIGVhY2ggZm9ybS4gQW55IGVxdWlwbWVudCBpdCBpcyB3ZWFyaW5nIG9yIGNhcnJ5aW5nIGlzbid0IHRyYW5zZm9ybWVkLiBJdCByZXZlcnRzIHRvIGl0cyB0cnVlIGZvcm0gaWYgaXQgZGllcy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQ2xhdyAoRmllbmQgRm9ybSBPbmx5KVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzUgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiA2ICgxZDYgKyAzKSBzbGFzaGluZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA1LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjFkNlwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogM1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkNoYXJtXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJPbmUgaHVtYW5vaWQgdGhlIGZpZW5kIGNhbiBzZWUgd2l0aGluIDMwIGZlZXQgb2YgaXQgbXVzdCBzdWNjZWVkIG9uIGEgREMgMTUgV2lzZG9tIHNhdmluZyB0aHJvdyBvciBiZSBtYWdpY2FsbHkgY2hhcm1lZCBmb3IgMSBkYXkuIFRoZSBjaGFybWVkIHRhcmdldCBvYmV5cyB0aGUgZmllbmQncyB2ZXJiYWwgb3IgdGVsZXBhdGhpYyBjb21tYW5kcy4gSWYgdGhlIHRhcmdldCBzdWZmZXJzIGFueSBoYXJtIG9yIHJlY2VpdmVzIGEgc3VpY2lkYWwgY29tbWFuZCwgaXQgY2FuIHJlcGVhdCB0aGUgc2F2aW5nIHRocm93LCBlbmRpbmcgdGhlIGVmZmVjdCBvbiBhIHN1Y2Nlc3MuIElmIHRoZSB0YXJnZXQgc3VjY2Vzc2Z1bGx5IHNhdmVzIGFnYWluc3QgdGhlIGVmZmVjdCwgb3IgaWYgdGhlIGVmZmVjdCBvbiBpdCBlbmRzLCB0aGUgdGFyZ2V0IGlzIGltbXVuZSB0byB0aGlzIGZpZW5kJ3MgQ2hhcm0gZm9yIHRoZSBuZXh0IDI0IGhvdXJzLlxcXFxuVGhlIGZpZW5kIGNhbiBoYXZlIG9ubHkgb25lIHRhcmdldCBjaGFybWVkIGF0IGEgdGltZS4gSWYgaXQgY2hhcm1zIGFub3RoZXIsIHRoZSBlZmZlY3Qgb24gdGhlIHByZXZpb3VzIHRhcmdldCBlbmRzLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkRyYWluaW5nIEtpc3NcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBmaWVuZCBraXNzZXMgYSBjcmVhdHVyZSBjaGFybWVkIGJ5IGl0IG9yIGEgd2lsbGluZyBjcmVhdHVyZS4gVGhlIHRhcmdldCBtdXN0IG1ha2UgYSBEQyAxNSBDb25zdGl0dXRpb24gc2F2aW5nIHRocm93IGFnYWluc3QgdGhpcyBtYWdpYywgdGFraW5nIDMyICg1ZDEwICsgNSkgcHN5Y2hpYyBkYW1hZ2Ugb24gYSBmYWlsZWQgc2F2ZSwgb3IgaGFsZiBhcyBtdWNoIGRhbWFnZSBvbiBhIHN1Y2Nlc3NmdWwgb25lLiBUaGUgdGFyZ2V0J3MgaGl0IHBvaW50IG1heGltdW0gaXMgcmVkdWNlZCBieSBhbiBhbW91bnQgZXF1YWwgdG8gdGhlIGRhbWFnZSB0YWtlbi4gVGhpcyByZWR1Y3Rpb24gbGFzdHMgdW50aWwgdGhlIHRhcmdldCBmaW5pc2hlcyBhIGxvbmcgcmVzdC4gVGhlIHRhcmdldCBkaWVzIGlmIHRoaXMgZWZmZWN0IHJlZHVjZXMgaXRzIGhpdCBwb2ludCBtYXhpbXVtIHRvIDAuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjVkMTBcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJFdGhlcmVhbG5lc3NcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBmaWVuZCBtYWdpY2FsbHkgZW50ZXJzIHRoZSBFdGhlcmVhbCBQbGFuZSBmcm9tIHRoZSBNYXRlcmlhbCBQbGFuZSwgb3IgdmljZSB2ZXJzYS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIlN3YXJtIG9mIEJhdHNcIixcbiAgICAgICAgc2l6ZTogXCJNZWRpdW1cIixcbiAgICAgICAgdHlwZTogXCJzd2FybSBvZiBUaW55IGJlYXN0c1wiLFxuICAgICAgICBzdWJ0eXBlOiBcIlwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwidW5hbGlnbmVkXCIsXG4gICAgICAgIGFjOiAxMixcbiAgICAgICAgaHA6IDIyLFxuICAgICAgICBoaXRfZGljZTogXCI1ZDggKyAtMVwiLFxuICAgICAgICBzcGVlZDogXCIwIGZ0LiwgZmx5IDMwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzUsIDE1LCAxMCwgMiwgMTIsIDRdLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiYmx1ZGdlb25pbmcsIHBpZXJjaW5nLCBzbGFzaGluZ1wiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6XG4gICAgICAgICAgICBcImNoYXJtZWQsIGZyaWdodGVuZWQsIGdyYXBwbGVkLCBwYXJhbHl6ZWQsIHBldHJpZmllZCwgcHJvbmUsIHJlc3RyYWluZWQsIHN0dW5uZWRcIixcbiAgICAgICAgc2Vuc2VzOiBcImJsaW5kc2lnaHQgNjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTFcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcIlwiLFxuICAgICAgICBjcjogXCIxLzRcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJFY2hvbG9jYXRpb25cIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBzd2FybSBjYW4ndCB1c2UgaXRzIGJsaW5kc2lnaHQgd2hpbGUgZGVhZmVuZWQuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiS2VlbiBIZWFyaW5nXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgc3dhcm0gaGFzIGFkdmFudGFnZSBvbiBXaXNkb20gKFBlcmNlcHRpb24pIGNoZWNrcyB0aGF0IHJlbHkgb24gaGVhcmluZy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJTd2FybVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIHN3YXJtIGNhbiBvY2N1cHkgYW5vdGhlciBjcmVhdHVyZSdzIHNwYWNlIGFuZCB2aWNlIHZlcnNhLCBhbmQgdGhlIHN3YXJtIGNhbiBtb3ZlIHRocm91Z2ggYW55IG9wZW5pbmcgbGFyZ2UgZW5vdWdoIGZvciBhIFRpbnkgYmF0LiBUaGUgc3dhcm0gY2FuJ3QgcmVnYWluIGhpdCBwb2ludHMgb3IgZ2FpbiB0ZW1wb3JhcnkgaGl0IHBvaW50cy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQml0ZXNcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs0IHRvIGhpdCwgcmVhY2ggMCBmdC4sIG9uZSBjcmVhdHVyZSBpbiB0aGUgc3dhcm0ncyBzcGFjZS4gSGl0OiA1ICgyZDQpIHBpZXJjaW5nIGRhbWFnZSwgb3IgMiAoMWQ0KSBwaWVyY2luZyBkYW1hZ2UgaWYgdGhlIHN3YXJtIGhhcyBoYWxmIG9mIGl0cyBoaXQgcG9pbnRzIG9yIGZld2VyLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIyZDRcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiU3dhcm0gb2YgQmVldGxlc1wiLFxuICAgICAgICBzaXplOiBcIk1lZGl1bVwiLFxuICAgICAgICB0eXBlOiBcInN3YXJtIG9mIFRpbnkgYmVhc3RzXCIsXG4gICAgICAgIHN1YnR5cGU6IFwiXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcbiAgICAgICAgYWM6IDEyLFxuICAgICAgICBocDogMjIsXG4gICAgICAgIGhpdF9kaWNlOiBcIjVkOCArIC0xXCIsXG4gICAgICAgIHNwZWVkOiBcIjIwIGZ0LiwgYnVycm93IDUgZnQuLCBjbGltYiAyMCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFszLCAxMywgMTAsIDEsIDcsIDFdLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiYmx1ZGdlb25pbmcsIHBpZXJjaW5nLCBzbGFzaGluZ1wiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6XG4gICAgICAgICAgICBcImNoYXJtZWQsIGZyaWdodGVuZWQsIGdyYXBwbGVkLCBwYXJhbHl6ZWQsIHBldHJpZmllZCwgcHJvbmUsIHJlc3RyYWluZWQsIHN0dW5uZWRcIixcbiAgICAgICAgc2Vuc2VzOiBcImJsaW5kc2lnaHQgMTAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gOFwiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiXCIsXG4gICAgICAgIGNyOiBcIjEvMlwiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlN3YXJtXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgc3dhcm0gY2FuIG9jY3VweSBhbm90aGVyIGNyZWF0dXJlJ3Mgc3BhY2UgYW5kIHZpY2UgdmVyc2EsIGFuZCB0aGUgc3dhcm0gY2FuIG1vdmUgdGhyb3VnaCBhbnkgb3BlbmluZyBsYXJnZSBlbm91Z2ggZm9yIGEgVGlueSBpbnNlY3QuIFRoZSBzd2FybSBjYW4ndCByZWdhaW4gaGl0IHBvaW50cyBvciBnYWluIHRlbXBvcmFyeSBoaXQgcG9pbnRzLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJCaXRlc1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzMgdG8gaGl0LCByZWFjaCAwIGZ0Liwgb25lIHRhcmdldCBpbiB0aGUgc3dhcm0ncyBzcGFjZS4gSGl0OiAxMCAoNGQ0KSBwaWVyY2luZyBkYW1hZ2UsIG9yIDUgKDJkNCkgcGllcmNpbmcgZGFtYWdlIGlmIHRoZSBzd2FybSBoYXMgaGFsZiBvZiBpdHMgaGl0IHBvaW50cyBvciBmZXdlci5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDMsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiNGQ0XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIlN3YXJtIG9mIENlbnRpcGVkZXNcIixcbiAgICAgICAgc2l6ZTogXCJNZWRpdW1cIixcbiAgICAgICAgdHlwZTogXCJzd2FybSBvZiBUaW55IGJlYXN0c1wiLFxuICAgICAgICBzdWJ0eXBlOiBcIlwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwidW5hbGlnbmVkXCIsXG4gICAgICAgIGFjOiAxMixcbiAgICAgICAgaHA6IDIyLFxuICAgICAgICBoaXRfZGljZTogXCI1ZDggKyAtMVwiLFxuICAgICAgICBzcGVlZDogXCIyMCBmdC4sIGNsaW1iIDIwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzMsIDEzLCAxMCwgMSwgNywgMV0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJibHVkZ2VvbmluZywgcGllcmNpbmcsIHNsYXNoaW5nXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczpcbiAgICAgICAgICAgIFwiY2hhcm1lZCwgZnJpZ2h0ZW5lZCwgZ3JhcHBsZWQsIHBhcmFseXplZCwgcGV0cmlmaWVkLCBwcm9uZSwgcmVzdHJhaW5lZCwgc3R1bm5lZFwiLFxuICAgICAgICBzZW5zZXM6IFwiYmxpbmRzaWdodCAxMCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiA4XCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJcIixcbiAgICAgICAgY3I6IFwiMS8yXCIsXG4gICAgICAgIHRyYWl0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiU3dhcm1cIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBzd2FybSBjYW4gb2NjdXB5IGFub3RoZXIgY3JlYXR1cmUncyBzcGFjZSBhbmQgdmljZSB2ZXJzYSwgYW5kIHRoZSBzd2FybSBjYW4gbW92ZSB0aHJvdWdoIGFueSBvcGVuaW5nIGxhcmdlIGVub3VnaCBmb3IgYSBUaW55IGluc2VjdC4gVGhlIHN3YXJtIGNhbid0IHJlZ2FpbiBoaXQgcG9pbnRzIG9yIGdhaW4gdGVtcG9yYXJ5IGhpdCBwb2ludHMuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkJpdGVzXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMyB0byBoaXQsIHJlYWNoIDAgZnQuLCBvbmUgdGFyZ2V0IGluIHRoZSBzd2FybSdzIHNwYWNlLiBIaXQ6IDEwICg0ZDQpIHBpZXJjaW5nIGRhbWFnZSwgb3IgNSAoMmQ0KSBwaWVyY2luZyBkYW1hZ2UgaWYgdGhlIHN3YXJtIGhhcyBoYWxmIG9mIGl0cyBoaXQgcG9pbnRzIG9yIGZld2VyLlxcXFxuQSBjcmVhdHVyZSByZWR1Y2VkIHRvIDAgaGl0IHBvaW50cyBieSBhIHN3YXJtIG9mIGNlbnRpcGVkZXMgaXMgc3RhYmxlIGJ1dCBwb2lzb25lZCBmb3IgMSBob3VyLCBldmVuIGFmdGVyIHJlZ2FpbmluZyBoaXQgcG9pbnRzLCBhbmQgcGFyYWx5emVkIHdoaWxlIHBvaXNvbmVkIGluIHRoaXMgd2F5LlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMyxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCI0ZDRcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiU3dhcm0gb2YgSW5zZWN0c1wiLFxuICAgICAgICBzaXplOiBcIk1lZGl1bVwiLFxuICAgICAgICB0eXBlOiBcInN3YXJtIG9mIFRpbnkgYmVhc3RzXCIsXG4gICAgICAgIHN1YnR5cGU6IFwiXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcbiAgICAgICAgYWM6IDEyLFxuICAgICAgICBocDogMjIsXG4gICAgICAgIGhpdF9kaWNlOiBcIjVkOCArIC0xXCIsXG4gICAgICAgIHNwZWVkOiBcIjIwIGZ0LiwgY2xpbWIgMjAgZnQuXCIsXG4gICAgICAgIHN0YXRzOiBbMywgMTMsIDEwLCAxLCA3LCAxXSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOiBcImJsdWRnZW9uaW5nLCBwaWVyY2luZywgc2xhc2hpbmdcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOlxuICAgICAgICAgICAgXCJjaGFybWVkLCBmcmlnaHRlbmVkLCBncmFwcGxlZCwgcGFyYWx5emVkLCBwZXRyaWZpZWQsIHByb25lLCByZXN0cmFpbmVkLCBzdHVubmVkXCIsXG4gICAgICAgIHNlbnNlczogXCJibGluZHNpZ2h0IDEwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDhcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcIlwiLFxuICAgICAgICBjcjogXCIxLzJcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJTd2FybVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIHN3YXJtIGNhbiBvY2N1cHkgYW5vdGhlciBjcmVhdHVyZSdzIHNwYWNlIGFuZCB2aWNlIHZlcnNhLCBhbmQgdGhlIHN3YXJtIGNhbiBtb3ZlIHRocm91Z2ggYW55IG9wZW5pbmcgbGFyZ2UgZW5vdWdoIGZvciBhIFRpbnkgaW5zZWN0LiBUaGUgc3dhcm0gY2FuJ3QgcmVnYWluIGhpdCBwb2ludHMgb3IgZ2FpbiB0ZW1wb3JhcnkgaGl0IHBvaW50cy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQml0ZXNcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICszIHRvIGhpdCwgcmVhY2ggMCBmdC4sIG9uZSB0YXJnZXQgaW4gdGhlIHN3YXJtJ3Mgc3BhY2UuIEhpdDogMTAgKDRkNCkgcGllcmNpbmcgZGFtYWdlLCBvciA1ICgyZDQpIHBpZXJjaW5nIGRhbWFnZSBpZiB0aGUgc3dhcm0gaGFzIGhhbGYgb2YgaXRzIGhpdCBwb2ludHMgb3IgZmV3ZXIuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAzLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjRkNFwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJTd2FybSBvZiBQb2lzb25vdXMgU25ha2VzXCIsXG4gICAgICAgIHNpemU6IFwiTWVkaXVtXCIsXG4gICAgICAgIHR5cGU6IFwic3dhcm0gb2YgVGlueSBiZWFzdHNcIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcInVuYWxpZ25lZFwiLFxuICAgICAgICBhYzogMTQsXG4gICAgICAgIGhwOiAzNixcbiAgICAgICAgaGl0X2RpY2U6IFwiOGQ4XCIsXG4gICAgICAgIHNwZWVkOiBcIjMwIGZ0Liwgc3dpbSAzMCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFs4LCAxOCwgMTEsIDEsIDEwLCAzXSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOiBcImJsdWRnZW9uaW5nLCBwaWVyY2luZywgc2xhc2hpbmdcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOlxuICAgICAgICAgICAgXCJjaGFybWVkLCBmcmlnaHRlbmVkLCBncmFwcGxlZCwgcGFyYWx5emVkLCBwZXRyaWZpZWQsIHByb25lLCByZXN0cmFpbmVkLCBzdHVubmVkXCIsXG4gICAgICAgIHNlbnNlczogXCJibGluZHNpZ2h0IDEwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDEwXCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJcIixcbiAgICAgICAgY3I6IFwiMlwiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlN3YXJtXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgc3dhcm0gY2FuIG9jY3VweSBhbm90aGVyIGNyZWF0dXJlJ3Mgc3BhY2UgYW5kIHZpY2UgdmVyc2EsIGFuZCB0aGUgc3dhcm0gY2FuIG1vdmUgdGhyb3VnaCBhbnkgb3BlbmluZyBsYXJnZSBlbm91Z2ggZm9yIGEgVGlueSBzbmFrZS4gVGhlIHN3YXJtIGNhbid0IHJlZ2FpbiBoaXQgcG9pbnRzIG9yIGdhaW4gdGVtcG9yYXJ5IGhpdCBwb2ludHMuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkJpdGVzXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNiB0byBoaXQsIHJlYWNoIDAgZnQuLCBvbmUgY3JlYXR1cmUgaW4gdGhlIHN3YXJtJ3Mgc3BhY2UuIEhpdDogNyAoMmQ2KSBwaWVyY2luZyBkYW1hZ2UsIG9yIDMgKDFkNikgcGllcmNpbmcgZGFtYWdlIGlmIHRoZSBzd2FybSBoYXMgaGFsZiBvZiBpdHMgaGl0IHBvaW50cyBvciBmZXdlci4gVGhlIHRhcmdldCBtdXN0IG1ha2UgYSBEQyAxMCBDb25zdGl0dXRpb24gc2F2aW5nIHRocm93LCB0YWtpbmcgMTQgKDRkNikgcG9pc29uIGRhbWFnZSBvbiBhIGZhaWxlZCBzYXZlLCBvciBoYWxmIGFzIG11Y2ggZGFtYWdlIG9uIGEgc3VjY2Vzc2Z1bCBvbmUuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA2LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjJkNlwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJTd2FybSBvZiBRdWlwcGVyc1wiLFxuICAgICAgICBzaXplOiBcIk1lZGl1bVwiLFxuICAgICAgICB0eXBlOiBcInN3YXJtIG9mIFRpbnkgYmVhc3RzXCIsXG4gICAgICAgIHN1YnR5cGU6IFwiXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcbiAgICAgICAgYWM6IDEzLFxuICAgICAgICBocDogMjgsXG4gICAgICAgIGhpdF9kaWNlOiBcIjhkOCArIC04XCIsXG4gICAgICAgIHNwZWVkOiBcIjAgZnQuLCBzd2ltIDQwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzEzLCAxNiwgOSwgMSwgNywgMl0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJibHVkZ2VvbmluZywgcGllcmNpbmcsIHNsYXNoaW5nXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczpcbiAgICAgICAgICAgIFwiY2hhcm1lZCwgZnJpZ2h0ZW5lZCwgZ3JhcHBsZWQsIHBhcmFseXplZCwgcGV0cmlmaWVkLCBwcm9uZSwgcmVzdHJhaW5lZCwgc3R1bm5lZFwiLFxuICAgICAgICBzZW5zZXM6IFwiZGFya3Zpc2lvbiA2MCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiA4XCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJcIixcbiAgICAgICAgY3I6IFwiMVwiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkJsb29kIEZyZW56eVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIHN3YXJtIGhhcyBhZHZhbnRhZ2Ugb24gbWVsZWUgYXR0YWNrIHJvbGxzIGFnYWluc3QgYW55IGNyZWF0dXJlIHRoYXQgZG9lc24ndCBoYXZlIGFsbCBpdHMgaGl0IHBvaW50cy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJTd2FybVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIHN3YXJtIGNhbiBvY2N1cHkgYW5vdGhlciBjcmVhdHVyZSdzIHNwYWNlIGFuZCB2aWNlIHZlcnNhLCBhbmQgdGhlIHN3YXJtIGNhbiBtb3ZlIHRocm91Z2ggYW55IG9wZW5pbmcgbGFyZ2UgZW5vdWdoIGZvciBhIFRpbnkgcXVpcHBlci4gVGhlIHN3YXJtIGNhbid0IHJlZ2FpbiBoaXQgcG9pbnRzIG9yIGdhaW4gdGVtcG9yYXJ5IGhpdCBwb2ludHMuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiV2F0ZXIgQnJlYXRoaW5nXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgc3dhcm0gY2FuIGJyZWF0aGUgb25seSB1bmRlcndhdGVyLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJCaXRlc1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzUgdG8gaGl0LCByZWFjaCAwIGZ0Liwgb25lIGNyZWF0dXJlIGluIHRoZSBzd2FybSdzIHNwYWNlLiBIaXQ6IDE0ICg0ZDYpIHBpZXJjaW5nIGRhbWFnZSwgb3IgNyAoMmQ2KSBwaWVyY2luZyBkYW1hZ2UgaWYgdGhlIHN3YXJtIGhhcyBoYWxmIG9mIGl0cyBoaXQgcG9pbnRzIG9yIGZld2VyLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNSxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCI0ZDZcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiU3dhcm0gb2YgUmF0c1wiLFxuICAgICAgICBzaXplOiBcIk1lZGl1bVwiLFxuICAgICAgICB0eXBlOiBcInN3YXJtIG9mIFRpbnkgYmVhc3RzXCIsXG4gICAgICAgIHN1YnR5cGU6IFwiXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcbiAgICAgICAgYWM6IDEwLFxuICAgICAgICBocDogMjQsXG4gICAgICAgIGhpdF9kaWNlOiBcIjdkOCArIC04XCIsXG4gICAgICAgIHNwZWVkOiBcIjMwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzksIDExLCA5LCAyLCAxMCwgM10sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJibHVkZ2VvbmluZywgcGllcmNpbmcsIHNsYXNoaW5nXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczpcbiAgICAgICAgICAgIFwiY2hhcm1lZCwgZnJpZ2h0ZW5lZCwgZ3JhcHBsZWQsIHBhcmFseXplZCwgcGV0cmlmaWVkLCBwcm9uZSwgcmVzdHJhaW5lZCwgc3R1bm5lZFwiLFxuICAgICAgICBzZW5zZXM6IFwiZGFya3Zpc2lvbiAzMCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxMFwiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiXCIsXG4gICAgICAgIGNyOiBcIjEvNFwiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIktlZW4gU21lbGxcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBzd2FybSBoYXMgYWR2YW50YWdlIG9uIFdpc2RvbSAoUGVyY2VwdGlvbikgY2hlY2tzIHRoYXQgcmVseSBvbiBzbWVsbC5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJTd2FybVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIHN3YXJtIGNhbiBvY2N1cHkgYW5vdGhlciBjcmVhdHVyZSdzIHNwYWNlIGFuZCB2aWNlIHZlcnNhLCBhbmQgdGhlIHN3YXJtIGNhbiBtb3ZlIHRocm91Z2ggYW55IG9wZW5pbmcgbGFyZ2UgZW5vdWdoIGZvciBhIFRpbnkgcmF0LiBUaGUgc3dhcm0gY2FuJ3QgcmVnYWluIGhpdCBwb2ludHMgb3IgZ2FpbiB0ZW1wb3JhcnkgaGl0IHBvaW50cy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQml0ZXNcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICsyIHRvIGhpdCwgcmVhY2ggMCBmdC4sIG9uZSB0YXJnZXQgaW4gdGhlIHN3YXJtJ3Mgc3BhY2UuIEhpdDogNyAoMmQ2KSBwaWVyY2luZyBkYW1hZ2UsIG9yIDMgKDFkNikgcGllcmNpbmcgZGFtYWdlIGlmIHRoZSBzd2FybSBoYXMgaGFsZiBvZiBpdHMgaGl0IHBvaW50cyBvciBmZXdlci5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMmQ2XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIlN3YXJtIG9mIFJhdmVuc1wiLFxuICAgICAgICBzaXplOiBcIk1lZGl1bVwiLFxuICAgICAgICB0eXBlOiBcInN3YXJtIG9mIFRpbnkgYmVhc3RzXCIsXG4gICAgICAgIHN1YnR5cGU6IFwiXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcbiAgICAgICAgYWM6IDEyLFxuICAgICAgICBocDogMjQsXG4gICAgICAgIGhpdF9kaWNlOiBcIjdkOCArIC04XCIsXG4gICAgICAgIHNwZWVkOiBcIjEwIGZ0LiwgZmx5IDUwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzYsIDE0LCA4LCAzLCAxMiwgNl0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJibHVkZ2VvbmluZywgcGllcmNpbmcsIHNsYXNoaW5nXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczpcbiAgICAgICAgICAgIFwiY2hhcm1lZCwgZnJpZ2h0ZW5lZCwgZ3JhcHBsZWQsIHBhcmFseXplZCwgcGV0cmlmaWVkLCBwcm9uZSwgcmVzdHJhaW5lZCwgc3R1bm5lZFwiLFxuICAgICAgICBzZW5zZXM6IFwicGFzc2l2ZSBQZXJjZXB0aW9uIDE1XCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJcIixcbiAgICAgICAgY3I6IFwiMS80XCIsXG4gICAgICAgIHRyYWl0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiU3dhcm1cIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBzd2FybSBjYW4gb2NjdXB5IGFub3RoZXIgY3JlYXR1cmUncyBzcGFjZSBhbmQgdmljZSB2ZXJzYSwgYW5kIHRoZSBzd2FybSBjYW4gbW92ZSB0aHJvdWdoIGFueSBvcGVuaW5nIGxhcmdlIGVub3VnaCBmb3IgYSBUaW55IHJhdmVuLiBUaGUgc3dhcm0gY2FuJ3QgcmVnYWluIGhpdCBwb2ludHMgb3IgZ2FpbiB0ZW1wb3JhcnkgaGl0IHBvaW50cy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQmVha3NcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs0IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQgaW4gdGhlIHN3YXJtJ3Mgc3BhY2UuIEhpdDogNyAoMmQ2KSBwaWVyY2luZyBkYW1hZ2UsIG9yIDMgKDFkNikgcGllcmNpbmcgZGFtYWdlIGlmIHRoZSBzd2FybSBoYXMgaGFsZiBvZiBpdHMgaGl0IHBvaW50cyBvciBmZXdlci5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDQsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMmQ2XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIlN3YXJtIG9mIFNwaWRlcnNcIixcbiAgICAgICAgc2l6ZTogXCJNZWRpdW1cIixcbiAgICAgICAgdHlwZTogXCJzd2FybSBvZiBUaW55IGJlYXN0c1wiLFxuICAgICAgICBzdWJ0eXBlOiBcIlwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwidW5hbGlnbmVkXCIsXG4gICAgICAgIGFjOiAxMixcbiAgICAgICAgaHA6IDIyLFxuICAgICAgICBoaXRfZGljZTogXCI1ZDggKyAtMVwiLFxuICAgICAgICBzcGVlZDogXCIyMCBmdC4sIGNsaW1iIDIwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzMsIDEzLCAxMCwgMSwgNywgMV0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJibHVkZ2VvbmluZywgcGllcmNpbmcsIHNsYXNoaW5nXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczpcbiAgICAgICAgICAgIFwiY2hhcm1lZCwgZnJpZ2h0ZW5lZCwgcGFyYWx5emVkLCBwZXRyaWZpZWQsIHByb25lLCByZXN0cmFpbmVkLCBzdHVubmVkXCIsXG4gICAgICAgIHNlbnNlczogXCJibGluZHNpZ2h0IDEwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDhcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcIlwiLFxuICAgICAgICBjcjogXCIxLzJcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJTd2FybVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIHN3YXJtIGNhbiBvY2N1cHkgYW5vdGhlciBjcmVhdHVyZSdzIHNwYWNlIGFuZCB2aWNlIHZlcnNhLCBhbmQgdGhlIHN3YXJtIGNhbiBtb3ZlIHRocm91Z2ggYW55IG9wZW5pbmcgbGFyZ2UgZW5vdWdoIGZvciBhIFRpbnkgaW5zZWN0LiBUaGUgc3dhcm0gY2FuJ3QgcmVnYWluIGhpdCBwb2ludHMgb3IgZ2FpbiB0ZW1wb3JhcnkgaGl0IHBvaW50cy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJTcGlkZXIgQ2xpbWJcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBzd2FybSBjYW4gY2xpbWIgZGlmZmljdWx0IHN1cmZhY2VzLCBpbmNsdWRpbmcgdXBzaWRlIGRvd24gb24gY2VpbGluZ3MsIHdpdGhvdXQgbmVlZGluZyB0byBtYWtlIGFuIGFiaWxpdHkgY2hlY2suXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiV2ViIFNlbnNlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJXaGlsZSBpbiBjb250YWN0IHdpdGggYSB3ZWIsIHRoZSBzd2FybSBrbm93cyB0aGUgZXhhY3QgbG9jYXRpb24gb2YgYW55IG90aGVyIGNyZWF0dXJlIGluIGNvbnRhY3Qgd2l0aCB0aGUgc2FtZSB3ZWIuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiV2ViIFdhbGtlclwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIHN3YXJtIGlnbm9yZXMgbW92ZW1lbnQgcmVzdHJpY3Rpb25zIGNhdXNlZCBieSB3ZWJiaW5nLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJCaXRlc1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzMgdG8gaGl0LCByZWFjaCAwIGZ0Liwgb25lIHRhcmdldCBpbiB0aGUgc3dhcm0ncyBzcGFjZS4gSGl0OiAxMCAoNGQ0KSBwaWVyY2luZyBkYW1hZ2UsIG9yIDUgKDJkNCkgcGllcmNpbmcgZGFtYWdlIGlmIHRoZSBzd2FybSBoYXMgaGFsZiBvZiBpdHMgaGl0IHBvaW50cyBvciBmZXdlci5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDMsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiNGQ0XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIlN3YXJtIG9mIFdhc3BzXCIsXG4gICAgICAgIHNpemU6IFwiTWVkaXVtXCIsXG4gICAgICAgIHR5cGU6IFwic3dhcm0gb2YgVGlueSBiZWFzdHNcIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcInVuYWxpZ25lZFwiLFxuICAgICAgICBhYzogMTIsXG4gICAgICAgIGhwOiAyMixcbiAgICAgICAgaGl0X2RpY2U6IFwiNWQ4ICsgLTFcIixcbiAgICAgICAgc3BlZWQ6IFwiNSBmdC4sIGZseSAzMCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFszLCAxMywgMTAsIDEsIDcsIDFdLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiYmx1ZGdlb25pbmcsIHBpZXJjaW5nLCBzbGFzaGluZ1wiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6XG4gICAgICAgICAgICBcImNoYXJtZWQsIGZyaWdodGVuZWQsIGdyYXBwbGVkLCBwYXJhbHl6ZWQsIHBldHJpZmllZCwgcHJvbmUsIHJlc3RyYWluZWQsIHN0dW5uZWRcIixcbiAgICAgICAgc2Vuc2VzOiBcImJsaW5kc2lnaHQgMTAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gOFwiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiXCIsXG4gICAgICAgIGNyOiBcIjEvMlwiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlN3YXJtXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgc3dhcm0gY2FuIG9jY3VweSBhbm90aGVyIGNyZWF0dXJlJ3Mgc3BhY2UgYW5kIHZpY2UgdmVyc2EsIGFuZCB0aGUgc3dhcm0gY2FuIG1vdmUgdGhyb3VnaCBhbnkgb3BlbmluZyBsYXJnZSBlbm91Z2ggZm9yIGEgVGlueSBpbnNlY3QuIFRoZSBzd2FybSBjYW4ndCByZWdhaW4gaGl0IHBvaW50cyBvciBnYWluIHRlbXBvcmFyeSBoaXQgcG9pbnRzLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJCaXRlc1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzMgdG8gaGl0LCByZWFjaCAwIGZ0Liwgb25lIHRhcmdldCBpbiB0aGUgc3dhcm0ncyBzcGFjZS4gSGl0OiAxMCAoNGQ0KSBwaWVyY2luZyBkYW1hZ2UsIG9yIDUgKDJkNCkgcGllcmNpbmcgZGFtYWdlIGlmIHRoZSBzd2FybSBoYXMgaGFsZiBvZiBpdHMgaGl0IHBvaW50cyBvciBmZXdlci5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDMsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiNGQ0XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIlRhcnJhc3F1ZVwiLFxuICAgICAgICBzaXplOiBcIkdhcmdhbnR1YW5cIixcbiAgICAgICAgdHlwZTogXCJtb25zdHJvc2l0eVwiLFxuICAgICAgICBzdWJ0eXBlOiBcInRpdGFuXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcbiAgICAgICAgYWM6IDI1LFxuICAgICAgICBocDogNjc2LFxuICAgICAgICBoaXRfZGljZTogXCIzM2QyMCArIDMyOVwiLFxuICAgICAgICBzcGVlZDogXCI0MCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFszMCwgMTEsIDMwLCAzLCAxMSwgMTFdLFxuICAgICAgICBzYXZlczogW3sgaW50ZWxsaWdlbmNlOiA1IH0sIHsgd2lzZG9tOiA5IH0sIHsgY2hhcmlzbWE6IDkgfV0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6XG4gICAgICAgICAgICBcImZpcmUsIHBvaXNvbjsgYmx1ZGdlb25pbmcsIHBpZXJjaW5nLCBhbmQgc2xhc2hpbmcgZnJvbSBub25tYWdpY2FsIHdlYXBvbnNcIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiY2hhcm1lZCwgZnJpZ2h0ZW5lZCwgcGFyYWx5emVkLCBwb2lzb25lZFwiLFxuICAgICAgICBzZW5zZXM6IFwiYmxpbmRzaWdodCAxMjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTBcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcIlwiLFxuICAgICAgICBjcjogXCIzMFwiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkxlZ2VuZGFyeSBSZXNpc3RhbmNlICgzL0RheSlcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIklmIHRoZSB0YXJyYXNxdWUgZmFpbHMgYSBzYXZpbmcgdGhyb3csIGl0IGNhbiBjaG9vc2UgdG8gc3VjY2VlZCBpbnN0ZWFkLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk1hZ2ljIFJlc2lzdGFuY2VcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSB0YXJyYXNxdWUgaGFzIGFkdmFudGFnZSBvbiBzYXZpbmcgdGhyb3dzIGFnYWluc3Qgc3BlbGxzIGFuZCBvdGhlciBtYWdpY2FsIGVmZmVjdHMuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiUmVmbGVjdGl2ZSBDYXJhcGFjZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiQW55IHRpbWUgdGhlIHRhcnJhc3F1ZSBpcyB0YXJnZXRlZCBieSBhIG1hZ2ljIG1pc3NpbGUgc3BlbGwsIGEgbGluZSBzcGVsbCwgb3IgYSBzcGVsbCB0aGF0IHJlcXVpcmVzIGEgcmFuZ2VkIGF0dGFjayByb2xsLCByb2xsIGEgZDYuIE9uIGEgMSB0byA1LCB0aGUgdGFycmFzcXVlIGlzIHVuYWZmZWN0ZWQuIE9uIGEgNiwgdGhlIHRhcnJhc3F1ZSBpcyB1bmFmZmVjdGVkLCBhbmQgdGhlIGVmZmVjdCBpcyByZWZsZWN0ZWQgYmFjayBhdCB0aGUgY2FzdGVyIGFzIHRob3VnaCBpdCBvcmlnaW5hdGVkIGZyb20gdGhlIHRhcnJhc3F1ZSwgdHVybmluZyB0aGUgY2FzdGVyIGludG8gdGhlIHRhcmdldC5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJTaWVnZSBNb25zdGVyXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgdGFycmFzcXVlIGRlYWxzIGRvdWJsZSBkYW1hZ2UgdG8gb2JqZWN0cyBhbmQgc3RydWN0dXJlcy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSB0YXJyYXNxdWUgY2FuIHVzZSBpdHMgRnJpZ2h0ZnVsIFByZXNlbmNlLiBJdCB0aGVuIG1ha2VzIGZpdmUgYXR0YWNrczogb25lIHdpdGggaXRzIGJpdGUsIHR3byB3aXRoIGl0cyBjbGF3cywgb25lIHdpdGggaXRzIGhvcm5zLCBhbmQgb25lIHdpdGggaXRzIHRhaSBsLiBJdCBjYW4gdXNlIGl0cyBTd2FsbG93IGluc3RlYWQgb2YgaXRzIGJpdGUuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQml0ZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzE5IHRvIGhpdCwgcmVhY2ggMTAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDM2ICg0ZDEyICsgMTApIHBpZXJjaW5nIGRhbWFnZS4gSWYgdGhlIHRhcmdldCBpcyBhIGNyZWF0dXJlLCBpdCBpcyBncmFwcGxlZCAoZXNjYXBlIERDIDIwKS4gVW50aWwgdGhpcyBncmFwcGxlIGVuZHMsIHRoZSB0YXJnZXQgaXMgcmVzdHJhaW5lZCwgYW5kIHRoZSB0YXJyYXNxdWUgY2FuJ3QgYml0ZSBhbm90aGVyIHRhcmdldC5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDE5LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjRkMTJcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDEwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQ2xhd1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzE5IHRvIGhpdCwgcmVhY2ggMTUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDI4ICg0ZDggKyAxMCkgc2xhc2hpbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMTksXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiNGQ4XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiAxMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkhvcm5zXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMTkgdG8gaGl0LCByZWFjaCAxMCBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMzIgKDRkMTAgKyAxMCkgcGllcmNpbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMTksXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiNGQxMFwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogMTBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJUYWlsXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMTkgdG8gaGl0LCByZWFjaCAyMCBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMjQgKDRkNiArIDEwKSBibHVkZ2VvbmluZyBkYW1hZ2UuIElmIHRoZSB0YXJnZXQgaXMgYSBjcmVhdHVyZSwgaXQgbXVzdCBzdWNjZWVkIG9uIGEgREMgMjAgU3RyZW5ndGggc2F2aW5nIHRocm93IG9yIGJlIGtub2NrZWQgcHJvbmUuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAxOSxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCI0ZDZcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDEwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiRnJpZ2h0ZnVsIFByZXNlbmNlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJFYWNoIGNyZWF0dXJlIG9mIHRoZSB0YXJyYXNxdWUncyBjaG9pY2Ugd2l0aGluIDEyMCBmZWV0IG9mIGl0IGFuZCBhd2FyZSBvZiBpdCBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxNyBXaXNkb20gc2F2aW5nIHRocm93IG9yIGJlY29tZSBmcmlnaHRlbmVkIGZvciAxIG1pbnV0ZS4gQSBjcmVhdHVyZSBjYW4gcmVwZWF0IHRoZSBzYXZpbmcgdGhyb3cgYXQgdGhlIGVuZCBvZiBlYWNoIG9mIGl0cyB0dXJucywgd2l0aCBkaXNhZHZhbnRhZ2UgaWYgdGhlIHRhcnJhc3F1ZSBpcyB3aXRoaW4gbGluZSBvZiBzaWdodCwgZW5kaW5nIHRoZSBlZmZlY3Qgb24gaXRzZWxmIG9uIGEgc3VjY2Vzcy4gSWYgYSBjcmVhdHVyZSdzIHNhdmluZyB0aHJvdyBpcyBzdWNjZXNzZnVsIG9yIHRoZSBlZmZlY3QgZW5kcyBmb3IgaXQsIHRoZSBjcmVhdHVyZSBpcyBpbW11bmUgdG8gdGhlIHRhcnJhc3F1ZSdzIEZyaWdodGZ1bCBQcmVzZW5jZSBmb3IgdGhlIG5leHQgMjQgaG91cnMuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiU3dhbGxvd1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIHRhcnJhc3F1ZSBtYWtlcyBvbmUgYml0ZSBhdHRhY2sgYWdhaW5zdCBhIExhcmdlIG9yIHNtYWxsZXIgY3JlYXR1cmUgaXQgaXMgZ3JhcHBsaW5nLiBJZiB0aGUgYXR0YWNrIGhpdHMsIHRoZSB0YXJnZXQgdGFrZXMgdGhlIGJpdGUncyBkYW1hZ2UsIHRoZSB0YXJnZXQgaXMgc3dhbGxvd2VkLCBhbmQgdGhlIGdyYXBwbGUgZW5kcy4gV2hpbGUgc3dhbGxvd2VkLCB0aGUgY3JlYXR1cmUgaXMgYmxpbmRlZCBhbmQgcmVzdHJhaW5lZCwgaXQgaGFzIHRvdGFsIGNvdmVyIGFnYWluc3QgYXR0YWNrcyBhbmQgb3RoZXIgZWZmZWN0cyBvdXRzaWRlIHRoZSB0YXJyYXNxdWUsIGFuZCBpdCB0YWtlcyA1NiAoMTZkNikgYWNpZCBkYW1hZ2UgYXQgdGhlIHN0YXJ0IG9mIGVhY2ggb2YgdGhlIHRhcnJhc3F1ZSdzIHR1cm5zLlxcXFxuSWYgdGhlIHRhcnJhc3F1ZSB0YWtlcyA2MCBkYW1hZ2Ugb3IgbW9yZSBvbiBhIHNpbmdsZSB0dXJuIGZyb20gYSBjcmVhdHVyZSBpbnNpZGUgaXQsIHRoZSB0YXJyYXNxdWUgbXVzdCBzdWNjZWVkIG9uIGEgREMgMjAgQ29uc3RpdHV0aW9uIHNhdmluZyB0aHJvdyBhdCB0aGUgZW5kIG9mIHRoYXQgdHVybiBvciByZWd1cmdpdGF0ZSBhbGwgc3dhbGxvd2VkIGNyZWF0dXJlcywgd2hpY2ggZmFsbCBwcm9uZSBpbiBhIHNwYWNlIHdpdGhpbiAxMCBmZWV0IG9mIHRoZSB0YXJyYXNxdWUuIElmIHRoZSB0YXJyYXNxdWUgZGllcywgYSBzd2FsbG93ZWQgY3JlYXR1cmUgaXMgbm8gbG9uZ2VyIHJlc3RyYWluZWQgYnkgaXQgYW5kIGNhbiBlc2NhcGUgZnJvbSB0aGUgY29ycHNlIGJ5IHVzaW5nIDMwIGZlZXQgb2YgbW92ZW1lbnQsIGV4aXRpbmcgcHJvbmUuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGxlZ2VuZGFyeV9hY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJBdHRhY2tcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSB0YXJyYXNxdWUgbWFrZXMgb25lIGNsYXcgYXR0YWNrIG9yIHRhaWwgYXR0YWNrLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk1vdmVcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSB0YXJyYXNxdWUgbW92ZXMgdXAgdG8gaGFsZiBpdHMgc3BlZWQuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQ2hvbXAgKENvc3RzIDIgQWN0aW9ucylcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSB0YXJyYXNxdWUgbWFrZXMgb25lIGJpdGUgYXR0YWNrIG9yIHVzZXMgaXRzIFN3YWxsb3cuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJUaHVnXCIsXG4gICAgICAgIHNpemU6IFwiTWVkaXVtXCIsXG4gICAgICAgIHR5cGU6IFwiaHVtYW5vaWRcIixcbiAgICAgICAgc3VidHlwZTogXCJhbnkgcmFjZVwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwiYW55IG5vbi1nb29kIGFsaWdubWVudFwiLFxuICAgICAgICBhYzogMTEsXG4gICAgICAgIGhwOiAzMixcbiAgICAgICAgaGl0X2RpY2U6IFwiNWQ4ICsgOVwiLFxuICAgICAgICBzcGVlZDogXCIzMCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsxNSwgMTEsIDE0LCAxMCwgMTAsIDExXSxcbiAgICAgICAgc2tpbGxzYXZlczogW3sgaW50aW1pZGF0aW9uOiAyIH1dLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcbiAgICAgICAgc2Vuc2VzOiBcInBhc3NpdmUgUGVyY2VwdGlvbiAxMFwiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiYW55IG9uZSBsYW5ndWFnZSAodXN1YWxseSBDb21tb24pXCIsXG4gICAgICAgIGNyOiBcIjEvMlwiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlBhY2sgVGFjdGljc1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIHRodWcgaGFzIGFkdmFudGFnZSBvbiBhbiBhdHRhY2sgcm9sbCBhZ2FpbnN0IGEgY3JlYXR1cmUgaWYgYXQgbGVhc3Qgb25lIG9mIHRoZSB0aHVnJ3MgYWxsaWVzIGlzIHdpdGhpbiA1IGZ0LiBvZiB0aGUgY3JlYXR1cmUgYW5kIHRoZSBhbGx5IGlzbid0IGluY2FwYWNpdGF0ZWQuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgdGh1ZyBtYWtlcyB0d28gbWVsZWUgYXR0YWNrcy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJNYWNlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNCB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgY3JlYXR1cmUuIEhpdDogNSAoMWQ2ICsgMikgYmx1ZGdlb25pbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIxZDZcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJIZWF2eSBDcm9zc2Jvd1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiUmFuZ2VkIFdlYXBvbiBBdHRhY2s6ICsyIHRvIGhpdCwgcmFuZ2UgMTAwLzQwMCBmdC4sIG9uZSB0YXJnZXQuIEhpdDogNSAoMWQxMCkgcGllcmNpbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIxZDEwXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIlRpZ2VyXCIsXG4gICAgICAgIHNpemU6IFwiTGFyZ2VcIixcbiAgICAgICAgdHlwZTogXCJiZWFzdFwiLFxuICAgICAgICBzdWJ0eXBlOiBcIlwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwidW5hbGlnbmVkXCIsXG4gICAgICAgIGFjOiAxMixcbiAgICAgICAgaHA6IDM3LFxuICAgICAgICBoaXRfZGljZTogXCI1ZDEwICsgOVwiLFxuICAgICAgICBzcGVlZDogXCI0MCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsxNywgMTUsIDE0LCAzLCAxMiwgOF0sXG4gICAgICAgIHNraWxsc2F2ZXM6IFt7IHBlcmNlcHRpb246IDMgfSwgeyBzdGVhbHRoOiA2IH1dLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcbiAgICAgICAgc2Vuc2VzOiBcImRhcmt2aXNpb24gNjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTNcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcIlwiLFxuICAgICAgICBjcjogXCIxXCIsXG4gICAgICAgIHRyYWl0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiS2VlbiBTbWVsbFwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIHRpZ2VyIGhhcyBhZHZhbnRhZ2Ugb24gV2lzZG9tIChQZXJjZXB0aW9uKSBjaGVja3MgdGhhdCByZWx5IG9uIHNtZWxsLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlBvdW5jZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiSWYgdGhlIHRpZ2VyIG1vdmVzIGF0IGxlYXN0IDIwIGZ0LiBzdHJhaWdodCB0b3dhcmQgYSBjcmVhdHVyZSBhbmQgdGhlbiBoaXRzIGl0IHdpdGggYSBjbGF3IGF0dGFjayBvbiB0aGUgc2FtZSB0dXJuLCB0aGF0IHRhcmdldCBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxMyBTdHJlbmd0aCBzYXZpbmcgdGhyb3cgb3IgYmUga25vY2tlZCBwcm9uZS4gSWYgdGhlIHRhcmdldCBpcyBwcm9uZSwgdGhlIHRpZ2VyIGNhbiBtYWtlIG9uZSBiaXRlIGF0dGFjayBhZ2FpbnN0IGl0IGFzIGEgYm9udXMgYWN0aW9uLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJCaXRlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNSB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDggKDFkMTAgKyAzKSBwaWVyY2luZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA1LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjFkMTBcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDNcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJDbGF3XCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNSB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDcgKDFkOCArIDMpIHNsYXNoaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIlRyZWFudFwiLFxuICAgICAgICBzaXplOiBcIkh1Z2VcIixcbiAgICAgICAgdHlwZTogXCJwbGFudFwiLFxuICAgICAgICBzdWJ0eXBlOiBcIlwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwiY2hhb3RpYyBnb29kXCIsXG4gICAgICAgIGFjOiAxNixcbiAgICAgICAgaHA6IDEzOCxcbiAgICAgICAgaGl0X2RpY2U6IFwiMTJkMTIgKyA2MFwiLFxuICAgICAgICBzcGVlZDogXCIzMCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsyMywgOCwgMjEsIDEyLCAxNiwgMTJdLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcImZpcmVcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOiBcImJsdWRnZW9uaW5nLCBwaWVyY2luZ1wiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIHNlbnNlczogXCJwYXNzaXZlIFBlcmNlcHRpb24gMTNcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcIkNvbW1vbiwgRHJ1aWRpYywgRWx2aXNoLCBTeWx2YW5cIixcbiAgICAgICAgY3I6IFwiOVwiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkZhbHNlIEFwcGVhcmFuY2VcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIldoaWxlIHRoZSB0cmVhbnQgcmVtYWlucyBtb3Rpb25sZXNzLCBpdCBpcyBpbmRpc3Rpbmd1aXNoYWJsZSBmcm9tIGEgbm9ybWFsIHRyZWUuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiU2llZ2UgTW9uc3RlclwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIHRyZWFudCBkZWFscyBkb3VibGUgZGFtYWdlIHRvIG9iamVjdHMgYW5kIHN0cnVjdHVyZXMuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgdHJlYW50IG1ha2VzIHR3byBzbGFtIGF0dGFja3MuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiU2xhbVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzEwIHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTYgKDNkNiArIDYpIGJsdWRnZW9uaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDEwLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjNkNlwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogNlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlJvY2tcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlJhbmdlZCBXZWFwb24gQXR0YWNrOiArMTAgdG8gaGl0LCByYW5nZSA2MC8xODAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDI4ICg0ZDEwICsgNikgYmx1ZGdlb25pbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMTAsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiNGQxMFwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogNlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkFuaW1hdGUgVHJlZXMgKDEvRGF5KVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIHRyZWFudCBtYWdpY2FsbHkgYW5pbWF0ZXMgb25lIG9yIHR3byB0cmVlcyBpdCBjYW4gc2VlIHdpdGhpbiA2MCBmZWV0IG9mIGl0LiBUaGVzZSB0cmVlcyBoYXZlIHRoZSBzYW1lIHN0YXRpc3RpY3MgYXMgYSB0cmVhbnQsIGV4Y2VwdCB0aGV5IGhhdmUgSW50ZWxsaWdlbmNlIGFuZCBDaGFyaXNtYSBzY29yZXMgb2YgMSwgdGhleSBjYW4ndCBzcGVhaywgYW5kIHRoZXkgaGF2ZSBvbmx5IHRoZSBTbGFtIGFjdGlvbiBvcHRpb24uIEFuIGFuaW1hdGVkIHRyZWUgYWN0cyBhcyBhbiBhbGx5IG9mIHRoZSB0cmVhbnQuIFRoZSB0cmVlIHJlbWFpbnMgYW5pbWF0ZSBmb3IgMSBkYXkgb3IgdW50aWwgaXQgZGllczsgdW50aWwgdGhlIHRyZWFudCBkaWVzIG9yIGlzIG1vcmUgdGhhbiAxMjAgZmVldCBmcm9tIHRoZSB0cmVlOyBvciB1bnRpbCB0aGUgdHJlYW50IHRha2VzIGEgYm9udXMgYWN0aW9uIHRvIHR1cm4gaXQgYmFjayBpbnRvIGFuIGluYW5pbWF0ZSB0cmVlLiBUaGUgdHJlZSB0aGVuIHRha2VzIHJvb3QgaWYgcG9zc2libGUuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJUcmliYWwgV2FycmlvclwiLFxuICAgICAgICBzaXplOiBcIk1lZGl1bVwiLFxuICAgICAgICB0eXBlOiBcImh1bWFub2lkXCIsXG4gICAgICAgIHN1YnR5cGU6IFwiYW55IHJhY2VcIixcbiAgICAgICAgYWxpZ25tZW50OiBcImFueSBhbGlnbm1lbnRcIixcbiAgICAgICAgYWM6IDEyLFxuICAgICAgICBocDogMTEsXG4gICAgICAgIGhpdF9kaWNlOiBcIjJkOCArIDJcIixcbiAgICAgICAgc3BlZWQ6IFwiMzAgZnQuXCIsXG4gICAgICAgIHN0YXRzOiBbMTMsIDExLCAxMiwgOCwgMTEsIDhdLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcbiAgICAgICAgc2Vuc2VzOiBcInBhc3NpdmUgUGVyY2VwdGlvbiAxMFwiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiYW55IG9uZSBsYW5ndWFnZVwiLFxuICAgICAgICBjcjogXCIxLzhcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJQYWNrIFRhY3RpY3NcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSB3YXJyaW9yIGhhcyBhZHZhbnRhZ2Ugb24gYW4gYXR0YWNrIHJvbGwgYWdhaW5zdCBhIGNyZWF0dXJlIGlmIGF0IGxlYXN0IG9uZSBvZiB0aGUgd2FycmlvcidzIGFsbGllcyBpcyB3aXRoaW4gNSBmdC4gb2YgdGhlIGNyZWF0dXJlIGFuZCB0aGUgYWxseSBpc24ndCBpbmNhcGFjaXRhdGVkLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJTcGVhclwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgb3IgUmFuZ2VkIFdlYXBvbiBBdHRhY2s6ICszIHRvIGhpdCwgcmVhY2ggNSBmdC4gb3IgcmFuZ2UgMjAvNjAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDQgKDFkNiArIDEpIHBpZXJjaW5nIGRhbWFnZSwgb3IgNSAoMWQ4ICsgMSkgcGllcmNpbmcgZGFtYWdlIGlmIHVzZWQgd2l0aCB0d28gaGFuZHMgdG8gbWFrZSBhIG1lbGVlIGF0dGFjay5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDMsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMWQ2XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiAxXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJUcmljZXJhdG9wc1wiLFxuICAgICAgICBzaXplOiBcIkh1Z2VcIixcbiAgICAgICAgdHlwZTogXCJiZWFzdFwiLFxuICAgICAgICBzdWJ0eXBlOiBcIlwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwidW5hbGlnbmVkXCIsXG4gICAgICAgIGFjOiAxMyxcbiAgICAgICAgaHA6IDk1LFxuICAgICAgICBoaXRfZGljZTogXCIxMGQxMiArIDMwXCIsXG4gICAgICAgIHNwZWVkOiBcIjUwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzIyLCA5LCAxNywgMiwgMTEsIDVdLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcbiAgICAgICAgc2Vuc2VzOiBcInBhc3NpdmUgUGVyY2VwdGlvbiAxMFwiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiXCIsXG4gICAgICAgIGNyOiBcIjVcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJUcmFtcGxpbmcgQ2hhcmdlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJJZiB0aGUgdHJpY2VyYXRvcHMgbW92ZXMgYXQgbGVhc3QgMjAgZnQuIHN0cmFpZ2h0IHRvd2FyZCBhIGNyZWF0dXJlIGFuZCB0aGVuIGhpdHMgaXQgd2l0aCBhIGdvcmUgYXR0YWNrIG9uIHRoZSBzYW1lIHR1cm4sIHRoYXQgdGFyZ2V0IG11c3Qgc3VjY2VlZCBvbiBhIERDIDEzIFN0cmVuZ3RoIHNhdmluZyB0aHJvdyBvciBiZSBrbm9ja2VkIHByb25lLiBJZiB0aGUgdGFyZ2V0IGlzIHByb25lLCB0aGUgdHJpY2VyYXRvcHMgY2FuIG1ha2Ugb25lIHN0b21wIGF0dGFjayBhZ2FpbnN0IGl0IGFzIGEgYm9udXMgYWN0aW9uLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJHb3JlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArOSB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDI0ICg0ZDggKyA2KSBwaWVyY2luZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA5LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjRkOFwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogNlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlN0b21wXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArOSB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgcHJvbmUgY3JlYXR1cmUuIEhpdDogMjIgKDNkMTAgKyA2KSBibHVkZ2VvbmluZyBkYW1hZ2VcIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDksXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiM2QxMFwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogNlxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiVHJvbGxcIixcbiAgICAgICAgc2l6ZTogXCJMYXJnZVwiLFxuICAgICAgICB0eXBlOiBcImdpYW50XCIsXG4gICAgICAgIHN1YnR5cGU6IFwiXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJjaGFvdGljIGV2aWxcIixcbiAgICAgICAgYWM6IDE1LFxuICAgICAgICBocDogODQsXG4gICAgICAgIGhpdF9kaWNlOiBcIjhkMTAgKyA0MFwiLFxuICAgICAgICBzcGVlZDogXCIzMCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsxOCwgMTMsIDIwLCA3LCA5LCA3XSxcbiAgICAgICAgc2tpbGxzYXZlczogW3sgcGVyY2VwdGlvbjogMiB9XSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIHNlbnNlczogXCJkYXJrdmlzaW9uIDYwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDEyXCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJHaWFudFwiLFxuICAgICAgICBjcjogXCI1XCIsXG4gICAgICAgIHRyYWl0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiS2VlbiBTbWVsbFwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIHRyb2xsIGhhcyBhZHZhbnRhZ2Ugb24gV2lzZG9tIChQZXJjZXB0aW9uKSBjaGVja3MgdGhhdCByZWx5IG9uIHNtZWxsLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlJlZ2VuZXJhdGlvblwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIHRyb2xsIHJlZ2FpbnMgMTAgaGl0IHBvaW50cyBhdCB0aGUgc3RhcnQgb2YgaXRzIHR1cm4uIElmIHRoZSB0cm9sbCB0YWtlcyBhY2lkIG9yIGZpcmUgZGFtYWdlLCB0aGlzIHRyYWl0IGRvZXNuJ3QgZnVuY3Rpb24gYXQgdGhlIHN0YXJ0IG9mIHRoZSB0cm9sbCdzIG5leHQgdHVybi4gVGhlIHRyb2xsIGRpZXMgb25seSBpZiBpdCBzdGFydHMgaXRzIHR1cm4gd2l0aCAwIGhpdCBwb2ludHMgYW5kIGRvZXNuJ3QgcmVnZW5lcmF0ZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJWYXJpYW50OiBMb2F0aHNvbWUgTGltYnNcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIldoZW5ldmVyIHRoZSB0cm9sbCB0YWtlcyBhdCBsZWFzdCAxNSBzbGFzaGluZyBkYW1hZ2UgYXQgb25lIHRpbWUsIHJvbGwgYSBkMjAgdG8gZGV0ZXJtaW5lIHdoYXQgZWxzZSBoYXBwZW5zIHRvIGl0OlxcXFxuMS0xMDogTm90aGluZyBlbHNlIGhhcHBlbnMuXFxcXG4xMS0xNDogT25lIGxlZyBpcyBzZXZlcmVkIGZyb20gdGhlIHRyb2xsIGlmIGl0IGhhcyBhbnkgbGVncyBsZWZ0LlxcXFxuMTUtIDE4OiBPbmUgYXJtIGlzIHNldmVyZWQgZnJvbSB0aGUgdHJvbGwgaWYgaXQgaGFzIGFueSBhcm1zIGxlZnQuXFxcXG4xOS0yMDogVGhlIHRyb2xsIGlzIGRlY2FwaXRhdGVkLCBidXQgdGhlIHRyb2xsIGRpZXMgb25seSBpZiBpdCBjYW4ndCByZWdlbmVyYXRlLiBJZiBpdCBkaWVzLCBzbyBkb2VzIHRoZSBzZXZlcmVkIGhlYWQuXFxcXG5JZiB0aGUgdHJvbGwgZmluaXNoZXMgYSBzaG9ydCBvciBsb25nIHJlc3Qgd2l0aG91dCByZWF0dGFjaGluZyBhIHNldmVyZWQgbGltYiBvciBoZWFkLCB0aGUgcGFydCByZWdyb3dzLiBBdCB0aGF0IHBvaW50LCB0aGUgc2V2ZXJlZCBwYXJ0IGRpZXMuIFVudGlsIHRoZW4sIGEgc2V2ZXJlZCBwYXJ0IGFjdHMgb24gdGhlIHRyb2xsJ3MgaW5pdGlhdGl2ZSBhbmQgaGFzIGl0cyBvd24gYWN0aW9uIGFuZCBtb3ZlbWVudC4gQSBzZXZlcmVkIHBhcnQgaGFzIEFDIDEzLCAxMCBoaXQgcG9pbnRzLCBhbmQgdGhlIHRyb2xsJ3MgUmVnZW5lcmF0aW9uIHRyYWl0LlxcXFxuQSBzZXZlcmVkIGxlZyBpcyB1bmFibGUgdG8gYXR0YWNrIGFuZCBoYXMgYSBzcGVlZCBvZiA1IGZlZXQuXFxcXG5BIHNldmVyZWQgYXJtIGhhcyBhIHNwZWVkIG9mIDUgZmVldCBhbmQgY2FuIG1ha2Ugb25lIGNsYXcgYXR0YWNrIG9uIGl0cyB0dXJuLCB3aXRoIGRpc2FkdmFudGFnZSBvbiB0aGUgYXR0YWNrIHJvbGwgdW5sZXNzIHRoZSB0cm9sbCBjYW4gc2VlIHRoZSBhcm0gYW5kIGl0cyB0YXJnZXQuIEVhY2ggdGltZSB0aGUgdHJvbGwgbG9zZXMgYW4gYXJtLCBpdCBsb3NlcyBhIGNsYXcgYXR0YWNrLlxcXFxuSWYgaXRzIGhlYWQgaXMgc2V2ZXJlZCwgdGhlIHRyb2xsIGxvc2VzIGl0cyBiaXRlIGF0dGFjayBhbmQgaXRzIGJvZHkgaXMgYmxpbmRlZCB1bmxlc3MgdGhlIGhlYWQgY2FuIHNlZSBpdC4gVGhlIHNldmVyZWQgaGVhZCBoYXMgYSBzcGVlZCBvZiAwIGZlZXQgYW5kIHRoZSB0cm9sbCdzIEtlZW4gU21lbGwgdHJhaXQuIEl0IGNhbiBtYWtlIGEgYml0ZSBhdHRhY2sgYnV0IG9ubHkgYWdhaW5zdCBhIHRhcmdldCBpbiBpdHMgc3BhY2UuXFxcXG5UaGUgdHJvbGwncyBzcGVlZCBpcyBoYWx2ZWQgaWYgaXQncyBtaXNzaW5nIGEgbGVnLiBJZiBpdCBsb3NlcyBib3RoIGxlZ3MsIGl0IGZhbGxzIHByb25lLiBJZiBpdCBoYXMgYm90aCBhcm1zLCBpdCBjYW4gY3Jhd2wuIFdpdGggb25seSBvbmUgYXJtLCBpdCBjYW4gc3RpbGwgY3Jhd2wsIGJ1dCBpdHMgc3BlZWQgaXMgaGFsdmVkLiBXaXRoIG5vIGFybXMgb3IgbGVncywgaXRzIHNwZWVkIGlzIDAsIGFuZCBpdCBjYW4ndCBiZW5lZml0IGZyb20gYm9udXNlcyB0byBzcGVlZC5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSB0cm9sbCBtYWtlcyB0aHJlZSBhdHRhY2tzOiBvbmUgd2l0aCBpdHMgYml0ZSBhbmQgdHdvIHdpdGggaXRzIGNsYXdzLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkJpdGVcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs3IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogNyAoMWQ2ICsgNCkgcGllcmNpbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNyxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIxZDZcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDRcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJDbGF3XCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNyB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDExICgyZDYgKyA0KSBzbGFzaGluZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA3LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjJkNlwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogNFxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiVHlyYW5ub3NhdXJ1cyBSZXhcIixcbiAgICAgICAgc2l6ZTogXCJIdWdlXCIsXG4gICAgICAgIHR5cGU6IFwiYmVhc3RcIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcInVuYWxpZ25lZFwiLFxuICAgICAgICBhYzogMTMsXG4gICAgICAgIGhwOiAxMzYsXG4gICAgICAgIGhpdF9kaWNlOiBcIjEzZDEyICsgNTFcIixcbiAgICAgICAgc3BlZWQ6IFwiNTAgZnQuXCIsXG4gICAgICAgIHN0YXRzOiBbMjUsIDEwLCAxOSwgMiwgMTIsIDldLFxuICAgICAgICBza2lsbHNhdmVzOiBbeyBwZXJjZXB0aW9uOiA0IH1dLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcbiAgICAgICAgc2Vuc2VzOiBcInBhc3NpdmUgUGVyY2VwdGlvbiAxNFwiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiXCIsXG4gICAgICAgIGNyOiBcIjhcIixcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSB0eXJhbm5vc2F1cnVzIG1ha2VzIHR3byBhdHRhY2tzOiBvbmUgd2l0aCBpdHMgYml0ZSBhbmQgb25lIHdpdGggaXRzIHRhaWwuIEl0IGNhbid0IG1ha2UgYm90aCBhdHRhY2tzIGFnYWluc3QgdGhlIHNhbWUgdGFyZ2V0LlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkJpdGVcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICsxMCB0byBoaXQsIHJlYWNoIDEwIGZ0Liwgb25lIHRhcmdldC4gSGl0OiAzMyAoNGQxMiArIDcpIHBpZXJjaW5nIGRhbWFnZS4gSWYgdGhlIHRhcmdldCBpcyBhIE1lZGl1bSBvciBzbWFsbGVyIGNyZWF0dXJlLCBpdCBpcyBncmFwcGxlZCAoZXNjYXBlIERDIDE3KS4gVW50aWwgdGhpcyBncmFwcGxlIGVuZHMsIHRoZSB0YXJnZXQgaXMgcmVzdHJhaW5lZCwgYW5kIHRoZSB0eXJhbm5vc2F1cnVzIGNhbid0IGJpdGUgYW5vdGhlciB0YXJnZXQuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAxMCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCI0ZDEyXCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiA3XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiVGFpbFwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzEwIHRvIGhpdCwgcmVhY2ggMTAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDIwICgzZDggKyA3KSBibHVkZ2VvbmluZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAxMCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIzZDhcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDdcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIlVuaWNvcm5cIixcbiAgICAgICAgc2l6ZTogXCJMYXJnZVwiLFxuICAgICAgICB0eXBlOiBcImNlbGVzdGlhbFwiLFxuICAgICAgICBzdWJ0eXBlOiBcIlwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwibGF3ZnVsIGdvb2RcIixcbiAgICAgICAgYWM6IDEyLFxuICAgICAgICBocDogNjcsXG4gICAgICAgIGhpdF9kaWNlOiBcIjlkMTAgKyAxN1wiLFxuICAgICAgICBzcGVlZDogXCI1MCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsxOCwgMTQsIDE1LCAxMSwgMTcsIDE2XSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczogXCJwb2lzb25cIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiY2hhcm1lZCwgcGFyYWx5emVkLCBwb2lzb25lZFwiLFxuICAgICAgICBzZW5zZXM6IFwiZGFya3Zpc2lvbiA2MCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxM1wiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiQ2VsZXN0aWFsLCBFbHZpc2gsIFN5bHZhbiwgdGVsZXBhdGh5IDYwIGZ0LlwiLFxuICAgICAgICBjcjogXCI1XCIsXG4gICAgICAgIHRyYWl0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQ2hhcmdlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJJZiB0aGUgdW5pY29ybiBtb3ZlcyBhdCBsZWFzdCAyMCBmdC4gc3RyYWlnaHQgdG93YXJkIGEgdGFyZ2V0IGFuZCB0aGVuIGhpdHMgaXQgd2l0aCBhIGhvcm4gYXR0YWNrIG9uIHRoZSBzYW1lIHR1cm4sIHRoZSB0YXJnZXQgdGFrZXMgYW4gZXh0cmEgOSAoMmQ4KSBwaWVyY2luZyBkYW1hZ2UuIElmIHRoZSB0YXJnZXQgaXMgYSBjcmVhdHVyZSwgaXQgbXVzdCBzdWNjZWVkIG9uIGEgREMgMTUgU3RyZW5ndGggc2F2aW5nIHRocm93IG9yIGJlIGtub2NrZWQgcHJvbmUuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjJkOFwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiSW5uYXRlIFNwZWxsY2FzdGluZ1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIHVuaWNvcm4ncyBpbm5hdGUgc3BlbGxjYXN0aW5nIGFiaWxpdHkgaXMgQ2hhcmlzbWEgKHNwZWxsIHNhdmUgREMgMTQpLiBUaGUgdW5pY29ybiBjYW4gaW5uYXRlbHkgY2FzdCB0aGUgZm9sbG93aW5nIHNwZWxscywgcmVxdWlyaW5nIG5vIGNvbXBvbmVudHM6XFxcXG5cXFxcbkF0IHdpbGw6IGRldGVjdCBldmlsIGFuZCBnb29kLCBkcnVpZGNyYWZ0LCBwYXNzIHdpdGhvdXQgdHJhY2VcXFxcbjEvZGF5IGVhY2g6IGNhbG0gZW1vdGlvbnMsIGRpc3BlbCBldmlsIGFuZCBnb29kLCBlbnRhbmdsZVwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk1hZ2ljIFJlc2lzdGFuY2VcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSB1bmljb3JuIGhhcyBhZHZhbnRhZ2Ugb24gc2F2aW5nIHRocm93cyBhZ2FpbnN0IHNwZWxscyBhbmQgb3RoZXIgbWFnaWNhbCBlZmZlY3RzLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk1hZ2ljIFdlYXBvbnNcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSB1bmljb3JuJ3Mgd2VhcG9uIGF0dGFja3MgYXJlIG1hZ2ljYWwuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgdW5pY29ybiBtYWtlcyB0d28gYXR0YWNrczogb25lIHdpdGggaXRzIGhvb3ZlcyBhbmQgb25lIHdpdGggaXRzIGhvcm4uXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiSG9vdmVzXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNyB0byBoaXQsIHJlYWNoIDUgZnQgLiwgb25lIHRhcmdldC4gSGl0OiAxMSAoMmQ2ICsgNCkgYmx1ZGdlb25pbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNyxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIyZDZcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDRcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJIb3JuXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNyB0byBoaXQsIHJlYWNoIDUgZnQgLiwgb25lIHRhcmdldC4gSGl0OiA4ICgxZDggKyA0KSBwaWVyY2luZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA3LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjFkOFwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogNFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkhlYWxpbmcgVG91Y2ggKDMvRGF5KVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIHVuaWNvcm4gdG91Y2hlcyBhbm90aGVyIGNyZWF0dXJlIHdpdGggaXRzIGhvcm4uIFRoZSB0YXJnZXQgbWFnaWNhbGx5IHJlZ2FpbnMgMTEgKDJkOCArIDIpIGhpdCBwb2ludHMuIEluIGFkZGl0aW9uLCB0aGUgdG91Y2ggcmVtb3ZlcyBhbGwgZGlzZWFzZXMgYW5kIG5ldXRyYWxpemVzIGFsbCBwb2lzb25zIGFmZmxpY3RpbmcgdGhlIHRhcmdldC5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJUZWxlcG9ydCAoMS9EYXkpXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgdW5pY29ybiBtYWdpY2FsbHkgdGVsZXBvcnRzIGl0c2VsZiBhbmQgdXAgdG8gdGhyZWUgd2lsbGluZyBjcmVhdHVyZXMgaXQgY2FuIHNlZSB3aXRoaW4gNSBmdC4gb2YgaXQsIGFsb25nIHdpdGggYW55IGVxdWlwbWVudCB0aGV5IGFyZSB3ZWFyaW5nIG9yIGNhcnJ5aW5nLCB0byBhIGxvY2F0aW9uIHRoZSB1bmljb3JuIGlzIGZhbWlsaWFyIHdpdGgsIHVwIHRvIDEgbWlsZSBhd2F5LlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBsZWdlbmRhcnlfYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiSG9vdmVzXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgdW5pY29ybiBtYWtlcyBvbmUgYXR0YWNrIHdpdGggaXRzIGhvb3Zlcy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJTaGltbWVyaW5nIFNoaWVsZCAoQ29zdHMgMiBBY3Rpb25zKVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIHVuaWNvcm4gY3JlYXRlcyBhIHNoaW1tZXJpbmcsIG1hZ2ljYWwgZmllbGQgYXJvdW5kIGl0c2VsZiBvciBhbm90aGVyIGNyZWF0dXJlIGl0IGNhbiBzZWUgd2l0aGluIDYwIGZ0LiBvZiBpdC4gVGhlIHRhcmdldCBnYWlucyBhICsyIGJvbnVzIHRvIEFDIHVudGlsIHRoZSBlbmQgb2YgdGhlIHVuaWNvcm4ncyBuZXh0IHR1cm4uXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiSGVhbCBTZWxmIChDb3N0cyAzIEFjdGlvbnMpXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgdW5pY29ybiBtYWdpY2FsbHkgcmVnYWlucyAxMSAoMmQ4ICsgMikgaGl0IHBvaW50cy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIlZhbXBpcmVcIixcbiAgICAgICAgc2l6ZTogXCJNZWRpdW1cIixcbiAgICAgICAgdHlwZTogXCJ1bmRlYWRcIixcbiAgICAgICAgc3VidHlwZTogXCJzaGFwZWNoYW5nZXJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcImxhd2Z1bCBldmlsXCIsXG4gICAgICAgIGFjOiAxNixcbiAgICAgICAgaHA6IDE0NCxcbiAgICAgICAgaGl0X2RpY2U6IFwiMTdkOCArIDY3XCIsXG4gICAgICAgIHNwZWVkOiBcIjMwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzE4LCAxOCwgMTgsIDE3LCAxNSwgMThdLFxuICAgICAgICBzYXZlczogW3sgZGV4dGVyaXR5OiA5IH0sIHsgd2lzZG9tOiA3IH0sIHsgY2hhcmlzbWE6IDkgfV0sXG4gICAgICAgIHNraWxsc2F2ZXM6IFt7IHBlcmNlcHRpb246IDcgfSwgeyBzdGVhbHRoOiA5IH1dLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6XG4gICAgICAgICAgICBcIm5lY3JvdGljOyBibHVkZ2VvbmluZywgcGllcmNpbmcsIGFuZCBzbGFzaGluZyBmcm9tIG5vbm1hZ2ljYWwgd2VhcG9uc1wiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIHNlbnNlczogXCJkYXJrdmlzaW9uIDEyMCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxN1wiLFxuICAgICAgICBsYW5ndWFnZXM6IFwidGhlIGxhbmd1YWdlcyBpdCBrbmV3IGluIGxpZmVcIixcbiAgICAgICAgY3I6IFwiMTNcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJTaGFwZWNoYW5nZXJcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIklmIHRoZSB2YW1waXJlIGlzbid0IGluIHN1biBsaWdodCBvciBydW5uaW5nIHdhdGVyLCBpdCBjYW4gdXNlIGl0cyBhY3Rpb24gdG8gcG9seW1vcnBoIGludG8gYSBUaW55IGJhdCBvciBhIE1lZGl1bSBjbG91ZCBvZiBtaXN0LCBvciBiYWNrIGludG8gaXRzIHRydWUgZm9ybS5cXFxcbldoaWxlIGluIGJhdCBmb3JtLCB0aGUgdmFtcGlyZSBjYW4ndCBzcGVhaywgaXRzIHdhbGtpbmcgc3BlZWQgaXMgNSBmZWV0LCBhbmQgaXQgaGFzIGEgZmx5aW5nIHNwZWVkIG9mIDMwIGZlZXQuIEl0cyBzdGF0aXN0aWNzLCBvdGhlciB0aGFuIGl0cyBzaXplIGFuZCBzcGVlZCwgYXJlIHVuY2hhbmdlZC4gQW55dGhpbmcgaXQgaXMgd2VhcmluZyB0cmFuc2Zvcm1zIHdpdGggaXQsIGJ1dCBub3RoaW5nIGl0IGlzIGNhcnJ5aW5nIGRvZXMuIEl0IHJldmVydHMgdG8gaXRzIHRydWUgZm9ybSBpZiBpdCBkaWVzLlxcXFxuV2hpbGUgaW4gbWlzdCBmb3JtLCB0aGUgdmFtcGlyZSBjYW4ndCB0YWtlIGFueSBhY3Rpb25zLCBzcGVhaywgb3IgbWFuaXB1bGF0ZSBvYmplY3RzLiBJdCBpcyB3ZWlnaHRsZXNzLCBoYXMgYSBmbHlpbmcgc3BlZWQgb2YgMjAgZmVldCwgY2FuIGhvdmVyLCBhbmQgY2FuIGVudGVyIGEgaG9zdGlsZSBjcmVhdHVyZSdzIHNwYWNlIGFuZCBzdG9wIHRoZXJlLiBJbiBhZGRpdGlvbiwgaWYgYWlyIGNhbiBwYXNzIHRocm91Z2ggYSBzcGFjZSwgdGhlIG1pc3QgY2FuIGRvIHNvIHdpdGhvdXQgc3F1ZWV6aW5nLCBhbmQgaXQgY2FuJ3QgcGFzcyB0aHJvdWdoIHdhdGVyLiBJdCBoYXMgYWR2YW50YWdlIG9uIFN0cmVuZ3RoLCBEZXh0ZXJpdHksIGFuZCBDb25zdGl0dXRpb24gc2F2aW5nIHRocm93cywgYW5kIGl0IGlzIGltbXVuZSB0byBhbGwgbm9ubWFnaWNhbCBkYW1hZ2UsIGV4Y2VwdCB0aGUgZGFtYWdlIGl0IHRha2VzIGZyb20gc3VubGlnaHQuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTGVnZW5kYXJ5IFJlc2lzdGFuY2UgKDMvRGF5KVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiSWYgdGhlIHZhbXBpcmUgZmFpbHMgYSBzYXZpbmcgdGhyb3csIGl0IGNhbiBjaG9vc2UgdG8gc3VjY2VlZCBpbnN0ZWFkLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk1pc3R5IEVzY2FwZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiV2hlbiBpdCBkcm9wcyB0byAwIGhpdCBwb2ludHMgb3V0c2lkZSBpdHMgcmVzdGluZyBwbGFjZSwgdGhlIHZhbXBpcmUgdHJhbnNmb3JtcyBpbnRvIGEgY2xvdWQgb2YgbWlzdCAoYXMgaW4gdGhlIFNoYXBlY2hhbmdlciB0cmFpdCkgaW5zdGVhZCBvZiBmYWxsaW5nIHVuY29uc2Npb3VzLCBwcm92aWRlZCB0aGF0IGl0IGlzbid0IGluIHN1bmxpZ2h0IG9yIHJ1bm5pbmcgd2F0ZXIuIElmIGl0IGNhbid0IHRyYW5zZm9ybSwgaXQgaXMgZGVzdHJveWVkLlxcXFxuV2hpbGUgaXQgaGFzIDAgaGl0IHBvaW50cyBpbiBtaXN0IGZvcm0sIGl0IGNhbid0IHJldmVydCB0byBpdHMgdmFtcGlyZSBmb3JtLCBhbmQgaXQgbXVzdCByZWFjaCBpdHMgcmVzdGluZyBwbGFjZSB3aXRoaW4gMiBob3VycyBvciBiZSBkZXN0cm95ZWQuIE9uY2UgaW4gaXRzIHJlc3RpbmcgcGxhY2UsIGl0IHJldmVydHMgdG8gaXRzIHZhbXBpcmUgZm9ybS4gSXQgaXMgdGhlbiBwYXJhbHl6ZWQgdW50aWwgaXQgcmVnYWlucyBhdCBsZWFzdCAxIGhpdCBwb2ludC4gQWZ0ZXIgc3BlbmRpbmcgMSBob3VyIGluIGl0cyByZXN0aW5nIHBsYWNlIHdpdGggMCBoaXQgcG9pbnRzLCBpdCByZWdhaW5zIDEgaGl0IHBvaW50LlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlJlZ2VuZXJhdGlvblwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIHZhbXBpcmUgcmVnYWlucyAyMCBoaXQgcG9pbnRzIGF0IHRoZSBzdGFydCBvZiBpdHMgdHVybiBpZiBpdCBoYXMgYXQgbGVhc3QgMSBoaXQgcG9pbnQgYW5kIGlzbid0IGluIHN1bmxpZ2h0IG9yIHJ1bm5pbmcgd2F0ZXIuIElmIHRoZSB2YW1waXJlIHRha2VzIHJhZGlhbnQgZGFtYWdlIG9yIGRhbWFnZSBmcm9tIGhvbHkgd2F0ZXIsIHRoaXMgdHJhaXQgZG9lc24ndCBmdW5jdGlvbiBhdCB0aGUgc3RhcnQgb2YgdGhlIHZhbXBpcmUncyBuZXh0IHR1cm4uXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiU3BpZGVyIENsaW1iXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgdmFtcGlyZSBjYW4gY2xpbWIgZGlmZmljdWx0IHN1cmZhY2VzLCBpbmNsdWRpbmcgdXBzaWRlIGRvd24gb24gY2VpbGluZ3MsIHdpdGhvdXQgbmVlZGluZyB0byBtYWtlIGFuIGFiaWxpdHkgY2hlY2suXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiVmFtcGlyZSBXZWFrbmVzc2VzXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgdmFtcGlyZSBoYXMgdGhlIGZvbGxvd2luZyBmbGF3czpcXFxcbkZvcmJpZGRhbmNlLiBUaGUgdmFtcGlyZSBjYW4ndCBlbnRlciBhIHJlc2lkZW5jZSB3aXRob3V0IGFuIGludml0YXRpb24gZnJvbSBvbmUgb2YgdGhlIG9jY3VwYW50cy5cXFxcbkhhcm1lZCBieSBSdW5uaW5nIFdhdGVyLiBUaGUgdmFtcGlyZSB0YWtlcyAyMCBhY2lkIGRhbWFnZSBpZiBpdCBlbmRzIGl0cyB0dXJuIGluIHJ1bm5pbmcgd2F0ZXIuXFxcXG5TdGFrZSB0byB0aGUgSGVhcnQuIElmIGEgcGllcmNpbmcgd2VhcG9uIG1hZGUgb2Ygd29vZCBpcyBkcml2ZW4gaW50byB0aGUgdmFtcGlyZSdzIGhlYXJ0IHdoaWxlIHRoZSB2YW1waXJlIGlzIGluY2FwYWNpdGF0ZWQgaW4gaXRzIHJlc3RpbmcgcGxhY2UsIHRoZSB2YW1waXJlIGlzIHBhcmFseXplZCB1bnRpbCB0aGUgc3Rha2UgaXMgcmVtb3ZlZC5cXFxcblN1bmxpZ2h0IEh5cGVyc2Vuc2l0aXZpdHkuIFRoZSB2YW1waXJlIHRha2VzIDIwIHJhZGlhbnQgZGFtYWdlIHdoZW4gaXQgc3RhcnRzIGl0cyB0dXJuIGluIHN1bmxpZ2h0LiBXaGlsZSBpbiBzdW5saWdodCwgaXQgaGFzIGRpc2FkdmFudGFnZSBvbiBhdHRhY2sgcm9sbHMgYW5kIGFiaWxpdHkgY2hlY2tzLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJNdWx0aWF0dGFjayAoVmFtcGlyZSBGb3JtIE9ubHkpXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgdmFtcGlyZSBtYWtlcyB0d28gYXR0YWNrcywgb25seSBvbmUgb2Ygd2hpY2ggY2FuIGJlIGEgYml0ZSBhdHRhY2suXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiVW5hcm1lZCBTdHJpa2UgKFZhbXBpcmUgRm9ybSBPbmx5KVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzkgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIGNyZWF0dXJlLiBIaXQ6IDggKDFkOCArIDQpIGJsdWRnZW9uaW5nIGRhbWFnZS4gSW5zdGVhZCBvZiBkZWFsaW5nIGRhbWFnZSwgdGhlIHZhbXBpcmUgY2FuIGdyYXBwbGUgdGhlIHRhcmdldCAoZXNjYXBlIERDIDE4KS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDksXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMWQ4XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiA0XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQml0ZSAoQmF0IG9yIFZhbXBpcmUgRm9ybSBPbmx5KVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzkgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHdpbGxpbmcgY3JlYXR1cmUsIG9yIGEgY3JlYXR1cmUgdGhhdCBpcyBncmFwcGxlZCBieSB0aGUgdmFtcGlyZSwgaW5jYXBhY2l0YXRlZCwgb3IgcmVzdHJhaW5lZC4gSGl0OiA3ICgxZDYgKyA0KSBwaWVyY2luZyBkYW1hZ2UgcGx1cyAxMCAoM2Q2KSBuZWNyb3RpYyBkYW1hZ2UuIFRoZSB0YXJnZXQncyBoaXQgcG9pbnQgbWF4aW11bSBpcyByZWR1Y2VkIGJ5IGFuIGFtb3VudCBlcXVhbCB0byB0aGUgbmVjcm90aWMgZGFtYWdlIHRha2VuLCBhbmQgdGhlIHZhbXBpcmUgcmVnYWlucyBoaXQgcG9pbnRzIGVxdWFsIHRvIHRoYXQgYW1vdW50LiBUaGUgcmVkdWN0aW9uIGxhc3RzIHVudGlsIHRoZSB0YXJnZXQgZmluaXNoZXMgYSBsb25nIHJlc3QuIFRoZSB0YXJnZXQgZGllcyBpZiB0aGlzIGVmZmVjdCByZWR1Y2VzIGl0cyBoaXQgcG9pbnQgbWF4aW11bSB0byAwLiBBIGh1bWFub2lkIHNsYWluIGluIHRoaXMgd2F5IGFuZCB0aGVuIGJ1cmllZCBpbiB0aGUgZ3JvdW5kIHJpc2VzIHRoZSBmb2xsb3dpbmcgbmlnaHQgYXMgYSB2YW1waXJlIHNwYXduIHVuZGVyIHRoZSB2YW1waXJlJ3MgY29udHJvbC5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDksXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMWQ2ICsgM2Q2XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiA0XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQ2hhcm1cIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSB2YW1waXJlIHRhcmdldHMgb25lIGh1bWFub2lkIGl0IGNhbiBzZWUgd2l0aGluIDMwIGZ0LiBvZiBpdC4gSWYgdGhlIHRhcmdldCBjYW4gc2VlIHRoZSB2YW1waXJlLCB0aGUgdGFyZ2V0IG11c3Qgc3VjY2VlZCBvbiBhIERDIDE3IFdpc2RvbSBzYXZpbmcgdGhyb3cgYWdhaW5zdCB0aGlzIG1hZ2ljIG9yIGJlIGNoYXJtZWQgYnkgdGhlIHZhbXBpcmUuIFRoZSBjaGFybWVkIHRhcmdldCByZWdhcmRzIHRoZSB2YW1waXJlIGFzIGEgdHJ1c3RlZCBmcmllbmQgdG8gYmUgaGVlZGVkIGFuZCBwcm90ZWN0ZWQuIEFsdGhvdWdoIHRoZSB0YXJnZXQgaXNuJ3QgdW5kZXIgdGhlIHZhbXBpcmUncyBjb250cm9sLCBpdCB0YWtlcyB0aGUgdmFtcGlyZSdzIHJlcXVlc3RzIG9yIGFjdGlvbnMgaW4gdGhlIG1vc3QgZmF2b3JhYmxlIHdheSBpdCBjYW4sIGFuZCBpdCBpcyBhIHdpbGxpbmcgdGFyZ2V0IGZvciB0aGUgdmFtcGlyZSdzIGJpdCBhdHRhY2suXFxcXG5FYWNoIHRpbWUgdGhlIHZhbXBpcmUgb3IgdGhlIHZhbXBpcmUncyBjb21wYW5pb25zIGRvIGFueXRoaW5nIGhhcm1mdWwgdG8gdGhlIHRhcmdldCwgaXQgY2FuIHJlcGVhdCB0aGUgc2F2aW5nIHRocm93LCBlbmRpbmcgdGhlIGVmZmVjdCBvbiBpdHNlbGYgb24gYSBzdWNjZXNzLiBPdGhlcndpc2UsIHRoZSBlZmZlY3QgbGFzdHMgMjQgaG91cnMgb3IgdW50aWwgdGhlIHZhbXBpcmUgaXMgZGVzdHJveWVkLCBpcyBvbiBhIGRpZmZlcmVudCBwbGFuZSBvZiBleGlzdGVuY2UgdGhhbiB0aGUgdGFyZ2V0LCBvciB0YWtlcyBhIGJvbnVzIGFjdGlvbiB0byBlbmQgdGhlIGVmZmVjdC5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJDaGlsZHJlbiBvZiB0aGUgTmlnaHQgKDEvRGF5KVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIHZhbXBpcmUgbWFnaWNhbGx5IGNhbGxzIDJkNCBzd2FybXMgb2YgYmF0cyBvciByYXRzLCBwcm92aWRlZCB0aGF0IHRoZSBzdW4gaXNuJ3QgdXAuIFdoaWxlIG91dGRvb3JzLCB0aGUgdmFtcGlyZSBjYW4gY2FsbCAzZDYgd29sdmVzIGluc3RlYWQuIFRoZSBjYWxsZWQgY3JlYXR1cmVzIGFycml2ZSBpbiAxZDQgcm91bmRzLCBhY3RpbmcgYXMgYWxsaWVzIG9mIHRoZSB2YW1waXJlIGFuZCBvYmV5aW5nIGl0cyBzcG9rZW4gY29tbWFuZHMuIFRoZSBiZWFzdHMgcmVtYWluIGZvciAxIGhvdXIsIHVudGlsIHRoZSB2YW1waXJlIGRpZXMsIG9yIHVudGlsIHRoZSB2YW1waXJlIGRpc21pc3NlcyB0aGVtIGFzIGEgYm9udXMgYWN0aW9uLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBsZWdlbmRhcnlfYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTW92ZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIHZhbXBpcmUgbW92ZXMgdXAgdG8gaXRzIHNwZWVkIHdpdGhvdXQgcHJvdm9raW5nIG9wcG9ydHVuaXR5IGF0dGFja3MuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiVW5hcm1lZCBTdHJpa2VcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSB2YW1waXJlIG1ha2VzIG9uZSB1bmFybWVkIHN0cmlrZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJCaXRlIChDb3N0cyAyIEFjdGlvbnMpXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgdmFtcGlyZSBtYWtlcyBvbmUgYml0ZSBhdHRhY2suXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJWYW1waXJlIFNwYXduXCIsXG4gICAgICAgIHNpemU6IFwiTWVkaXVtXCIsXG4gICAgICAgIHR5cGU6IFwidW5kZWFkXCIsXG4gICAgICAgIHN1YnR5cGU6IFwiXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJuZXV0cmFsIGV2aWxcIixcbiAgICAgICAgYWM6IDE1LFxuICAgICAgICBocDogODIsXG4gICAgICAgIGhpdF9kaWNlOiBcIjExZDggKyAzMlwiLFxuICAgICAgICBzcGVlZDogXCIzMCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsxNiwgMTYsIDE2LCAxMSwgMTAsIDEyXSxcbiAgICAgICAgc2F2ZXM6IFt7IGRleHRlcml0eTogNiB9LCB7IHdpc2RvbTogMyB9XSxcbiAgICAgICAgc2tpbGxzYXZlczogW3sgcGVyY2VwdGlvbjogMyB9LCB7IHN0ZWFsdGg6IDYgfV0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczpcbiAgICAgICAgICAgIFwibmVjcm90aWM7IGJsdWRnZW9uaW5nLCBwaWVyY2luZywgYW5kIHNsYXNoaW5nIGZyb20gbm9ubWFnaWNhbCB3ZWFwb25zXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcbiAgICAgICAgc2Vuc2VzOiBcImRhcmt2aXNpb24gNjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTNcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcInRoZSBsYW5ndWFnZXMgaXQga25ldyBpbiBsaWZlXCIsXG4gICAgICAgIGNyOiBcIjVcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJSZWdlbmVyYXRpb25cIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSB2YW1waXJlIHJlZ2FpbnMgMTAgaGl0IHBvaW50cyBhdCB0aGUgc3RhcnQgb2YgaXRzIHR1cm4gaWYgaXQgaGFzIGF0IGxlYXN0IDEgaGl0IHBvaW50IGFuZCBpc24ndCBpbiBzdW5saWdodCBvciBydW5uaW5nIHdhdGVyLiBJZiB0aGUgdmFtcGlyZSB0YWtlcyByYWRpYW50IGRhbWFnZSBvciBkYW1hZ2UgZnJvbSBob2x5IHdhdGVyLCB0aGlzIHRyYWl0IGRvZXNuJ3QgZnVuY3Rpb24gYXQgdGhlIHN0YXJ0IG9mIHRoZSB2YW1waXJlJ3MgbmV4dCB0dXJuLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlNwaWRlciBDbGltYlwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIHZhbXBpcmUgY2FuIGNsaW1iIGRpZmZpY3VsdCBzdXJmYWNlcywgaW5jbHVkaW5nIHVwc2lkZSBkb3duIG9uIGNlaWxpbmdzLCB3aXRob3V0IG5lZWRpbmcgdG8gbWFrZSBhbiBhYmlsaXR5IGNoZWNrLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlZhbXBpcmUgV2Vha25lc3Nlc1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIHZhbXBpcmUgaGFzIHRoZSBmb2xsb3dpbmcgZmxhd3M6XFxcXG5Gb3JiaWRkYW5jZS4gVGhlIHZhbXBpcmUgY2FuJ3QgZW50ZXIgYSByZXNpZGVuY2Ugd2l0aG91dCBhbiBpbnZpdGF0aW9uIGZyb20gb25lIG9mIHRoZSBvY2N1cGFudHMuXFxcXG5IYXJtZWQgYnkgUnVubmluZyBXYXRlci4gVGhlIHZhbXBpcmUgdGFrZXMgMjAgYWNpZCBkYW1hZ2Ugd2hlbiBpdCBlbmRzIGl0cyB0dXJuIGluIHJ1bm5pbmcgd2F0ZXIuXFxcXG5TdGFrZSB0byB0aGUgSGVhcnQuIFRoZSB2YW1waXJlIGlzIGRlc3Ryb3llZCBpZiBhIHBpZXJjaW5nIHdlYXBvbiBtYWRlIG9mIHdvb2QgaXMgZHJpdmVuIGludG8gaXRzIGhlYXJ0IHdoaWxlIGl0IGlzIGluY2FwYWNpdGF0ZWQgaW4gaXRzIHJlc3RpbmcgcGxhY2UuXFxcXG5TdW5saWdodCBIeXBlcnNlbnNpdGl2aXR5LiBUaGUgdmFtcGlyZSB0YWtlcyAyMCByYWRpYW50IGRhbWFnZSB3aGVuIGl0IHN0YXJ0cyBpdHMgdHVybiBpbiBzdW5saWdodC4gV2hpbGUgaW4gc3VubGlnaHQsIGl0IGhhcyBkaXNhZHZhbnRhZ2Ugb24gYXR0YWNrIHJvbGxzIGFuZCBhYmlsaXR5IGNoZWNrcy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSB2YW1waXJlIG1ha2VzIHR3byBhdHRhY2tzLCBvbmx5IG9uZSBvZiB3aGljaCBjYW4gYmUgYSBiaXRlIGF0dGFjay5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJCaXRlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNiB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgd2lsbGluZyBjcmVhdHVyZSwgb3IgYSBjcmVhdHVyZSB0aGF0IGlzIGdyYXBwbGVkIGJ5IHRoZSB2YW1waXJlLCBpbmNhcGFjaXRhdGVkLCBvciByZXN0cmFpbmVkLiBIaXQ6IDYgKDFkNiArIDMpIHBpZXJjaW5nIGRhbWFnZSBwbHVzIDcgKDJkNikgbmVjcm90aWMgZGFtYWdlLiBUaGUgdGFyZ2V0J3MgaGl0IHBvaW50IG1heGltdW0gaXMgcmVkdWNlZCBieSBhbiBhbW91bnQgZXF1YWwgdG8gdGhlIG5lY3JvdGljIGRhbWFnZSB0YWtlbiwgYW5kIHRoZSB2YW1waXJlIHJlZ2FpbnMgaGl0IHBvaW50cyBlcXVhbCB0byB0aGF0IGFtb3VudC4gVGhlIHJlZHVjdGlvbiBsYXN0cyB1bnRpbCB0aGUgdGFyZ2V0IGZpbmlzaGVzIGEgbG9uZyByZXN0LiBUaGUgdGFyZ2V0IGRpZXMgaWYgdGhpcyBlZmZlY3QgcmVkdWNlcyBpdHMgaGl0IHBvaW50IG1heGltdW0gdG8gMC5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDYxXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQ2xhd3NcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs2IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSBjcmVhdHVyZS4gSGl0OiA4ICgyZDQgKyAzKSBzbGFzaGluZyBkYW1hZ2UuIEluc3RlYWQgb2YgZGVhbGluZyBkYW1hZ2UsIHRoZSB2YW1waXJlIGNhbiBncmFwcGxlIHRoZSB0YXJnZXQgKGVzY2FwZSBEQyAxMykuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA2LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjJkNFwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogM1xuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiVmV0ZXJhblwiLFxuICAgICAgICBzaXplOiBcIk1lZGl1bVwiLFxuICAgICAgICB0eXBlOiBcImh1bWFub2lkXCIsXG4gICAgICAgIHN1YnR5cGU6IFwiYW55IHJhY2VcIixcbiAgICAgICAgYWxpZ25tZW50OiBcImFueSBhbGlnbm1lbnRcIixcbiAgICAgICAgYWM6IDE3LFxuICAgICAgICBocDogNTgsXG4gICAgICAgIGhpdF9kaWNlOiBcIjlkOCArIDE3XCIsXG4gICAgICAgIHNwZWVkOiBcIjMwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzE2LCAxMywgMTQsIDEwLCAxMSwgMTBdLFxuICAgICAgICBza2lsbHNhdmVzOiBbeyBhdGhsZXRpY3M6IDUgfSwgeyBwZXJjZXB0aW9uOiAyIH1dLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcbiAgICAgICAgc2Vuc2VzOiBcInBhc3NpdmUgUGVyY2VwdGlvbiAxMlwiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiYW55IG9uZSBsYW5ndWFnZSAodXN1YWxseSBDb21tb24pXCIsXG4gICAgICAgIGNyOiBcIjNcIixcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSB2ZXRlcmFuIG1ha2VzIHR3byBsb25nc3dvcmQgYXR0YWNrcy4gSWYgaXQgaGFzIGEgc2hvcnRzd29yZCBkcmF3biwgaXQgY2FuIGFsc28gbWFrZSBhIHNob3J0c3dvcmQgYXR0YWNrLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkxvbmdzd29yZFwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzUgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiA3ICgxZDggKyAzKSBzbGFzaGluZyBkYW1hZ2UsIG9yIDggKDFkMTAgKyAzKSBzbGFzaGluZyBkYW1hZ2UgaWYgdXNlZCB3aXRoIHR3byBoYW5kcy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDUsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMWQ4XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiAzXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiU2hvcnRzd29yZFwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzUgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiA2ICgxZDYgKyAzKSBwaWVyY2luZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA1LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjFkNlwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogM1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkhlYXZ5IENyb3NzYm93XCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJSYW5nZWQgV2VhcG9uIEF0dGFjazogKzMgdG8gaGl0LCByYW5nZSAxMDAvNDAwIGZ0Liwgb25lIHRhcmdldC4gSGl0OiA2ICgxZDEwICsgMSkgcGllcmNpbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMyxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIxZDEwXCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiAxXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJWaW9sZXQgRnVuZ3VzXCIsXG4gICAgICAgIHNpemU6IFwiTWVkaXVtXCIsXG4gICAgICAgIHR5cGU6IFwicGxhbnRcIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcInVuYWxpZ25lZFwiLFxuICAgICAgICBhYzogNSxcbiAgICAgICAgaHA6IDE4LFxuICAgICAgICBoaXRfZGljZTogXCI0ZDhcIixcbiAgICAgICAgc3BlZWQ6IFwiNSBmdC5cIixcbiAgICAgICAgc3RhdHM6IFszLCAxLCAxMCwgMSwgMywgMV0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOiBcImJsaW5kZWQsIGRlYWZlbmVkLCBmcmlnaHRlbmVkXCIsXG4gICAgICAgIHNlbnNlczogXCJibGluZHNpZ2h0IDMwIGZ0LiAoYmxpbmQgYmV5b25kIHRoaXMgcmFkaXVzKSwgcGFzc2l2ZSBQZXJjZXB0aW9uIDZcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcIlwiLFxuICAgICAgICBjcjogXCIxLzRcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJGYWxzZSBBcHBlYXJhbmNlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJXaGlsZSB0aGUgdmlvbGV0IGZ1bmd1cyByZW1haW5zIG1vdGlvbmxlc3MsIGl0IGlzIGluZGlzdGluZ3Vpc2hhYmxlIGZyb20gYW4gb3JkaW5hcnkgZnVuZ3VzLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJNdWx0aWF0dGFja1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGZ1bmd1cyBtYWtlcyAxZDQgUm90dGluZyBUb3VjaCBhdHRhY2tzLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlJvdHRpbmcgVG91Y2hcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICsyIHRvIGhpdCwgcmVhY2ggMTAgZnQuLCBvbmUgY3JlYXR1cmUuIEhpdDogNCAoMWQ4KSBuZWNyb3RpYyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAyLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjFkOFwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJWcm9ja1wiLFxuICAgICAgICBzaXplOiBcIkxhcmdlXCIsXG4gICAgICAgIHR5cGU6IFwiZmllbmRcIixcbiAgICAgICAgc3VidHlwZTogXCJkZW1vblwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwiY2hhb3RpYyBldmlsXCIsXG4gICAgICAgIGFjOiAxNSxcbiAgICAgICAgaHA6IDEwNCxcbiAgICAgICAgaGl0X2RpY2U6IFwiMTFkMTAgKyA0M1wiLFxuICAgICAgICBzcGVlZDogXCI0MCBmdC4sIGZseSA2MCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsxNywgMTUsIDE4LCA4LCAxMywgOF0sXG4gICAgICAgIHNhdmVzOiBbeyBkZXh0ZXJpdHk6IDUgfSwgeyB3aXNkb206IDQgfSwgeyBjaGFyaXNtYTogMiB9XSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOlxuICAgICAgICAgICAgXCJjb2xkLCBmaXJlLCBsaWdodG5pbmc7IGJsdWRnZW9uaW5nLCBwaWVyY2luZywgYW5kIHNsYXNoaW5nIGZyb20gbm9ubWFnaWNhbCB3ZWFwb25zXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcInBvaXNvblwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJwb2lzb25lZFwiLFxuICAgICAgICBzZW5zZXM6IFwiZGFya3Zpc2lvbiAxMjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTFcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcIkFieXNzYWwsIHRlbGVwYXRoeSAxMjAgZnQuXCIsXG4gICAgICAgIGNyOiBcIjZcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJNYWdpYyBSZXNpc3RhbmNlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgdnJvY2sgaGFzIGFkdmFudGFnZSBvbiBzYXZpbmcgdGhyb3dzIGFnYWluc3Qgc3BlbGxzIGFuZCBvdGhlciBtYWdpY2FsIGVmZmVjdHMuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgdnJvY2sgbWFrZXMgdHdvIGF0dGFja3M6IG9uZSB3aXRoIGl0cyBiZWFrIGFuZCBvbmUgd2l0aCBpdHMgdGFsb25zLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkJlYWtcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs2IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTAgKDJkNiArIDMpIHBpZXJjaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDYsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMmQ2XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiAzXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiVGFsb25zXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNiB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDE0ICgyZDEwICsgMykgc2xhc2hpbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIyZDEwXCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiAzXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiU3BvcmVzIChSZWNoYXJnZSA2KVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiQSAxNS1mb290LXJhZGl1cyBjbG91ZCBvZiB0b3hpYyBzcG9yZXMgZXh0ZW5kcyBvdXQgZnJvbSB0aGUgdnJvY2suIFRoZSBzcG9yZXMgc3ByZWFkIGFyb3VuZCBjb3JuZXJzLiBFYWNoIGNyZWF0dXJlIGluIHRoYXQgYXJlYSBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxNCBDb25zdGl0dXRpb24gc2F2aW5nIHRocm93IG9yIGJlY29tZSBwb2lzb25lZC4gV2hpbGUgcG9pc29uZWQgaW4gdGhpcyB3YXksIGEgdGFyZ2V0IHRha2VzIDUgKDFkMTApIHBvaXNvbiBkYW1hZ2UgYXQgdGhlIHN0YXJ0IG9mIGVhY2ggb2YgaXRzIHR1cm5zLiBBIHRhcmdldCBjYW4gcmVwZWF0IHRoZSBzYXZpbmcgdGhyb3cgYXQgdGhlIGVuZCBvZiBlYWNoIG9mIGl0cyB0dXJucywgZW5kaW5nIHRoZSBlZmZlY3Qgb24gaXRzZWxmIG9uIGEgc3VjY2Vzcy4gRW1wdHlpbmcgYSB2aWFsIG9mIGhvbHkgd2F0ZXIgb24gdGhlIHRhcmdldCBhbHNvIGVuZHMgdGhlIGVmZmVjdCBvbiBpdC5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJTdHVubmluZyBTY3JlZWNoICgxL0RheSlcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSB2cm9jayBlbWl0cyBhIGhvcnJpZmljIHNjcmVlY2guIEVhY2ggY3JlYXR1cmUgd2l0aGluIDIwIGZlZXQgb2YgaXQgdGhhdCBjYW4gaGVhciBpdCBhbmQgdGhhdCBpc24ndCBhIGRlbW9uIG11c3Qgc3VjY2VlZCBvbiBhIERDIDE0IENvbnN0aXR1dGlvbiBzYXZpbmcgdGhyb3cgb3IgYmUgc3R1bm5lZCB1bnRpbCB0aGUgZW5kIG9mIHRoZSB2cm9jaydzIG5leHQgdHVybiAuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiVmFyaWFudDogU3VtbW9uIERlbW9uICgxL0RheSlcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBkZW1vbiBjaG9vc2VzIHdoYXQgdG8gc3VtbW9uIGFuZCBhdHRlbXB0cyBhIG1hZ2ljYWwgc3VtbW9uaW5nLlxcXFxuQSB2cm9jayBoYXMgYSAzMCBwZXJjZW50IGNoYW5jZSBvZiBzdW1tb25pbmcgMmQ0IGRyZXRjaGVzIG9yIG9uZSB2cm9jay5cXFxcbkEgc3VtbW9uZWQgZGVtb24gYXBwZWFycyBpbiBhbiB1bm9jY3VwaWVkIHNwYWNlIHdpdGhpbiA2MCBmZWV0IG9mIGl0cyBzdW1tb25lciwgYWN0cyBhcyBhbiBhbGx5IG9mIGl0cyBzdW1tb25lciwgYW5kIGNhbid0IHN1bW1vbiBvdGhlciBkZW1vbnMuIEl0IHJlbWFpbnMgZm9yIDEgbWludXRlLCB1bnRpbCBpdCBvciBpdHMgc3VtbW9uZXIgZGllcywgb3IgdW50aWwgaXRzIHN1bW1vbmVyIGRpc21pc3NlcyBpdCBhcyBhbiBhY3Rpb24uXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJWdWx0dXJlXCIsXG4gICAgICAgIHNpemU6IFwiTWVkaXVtXCIsXG4gICAgICAgIHR5cGU6IFwiYmVhc3RcIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcInVuYWxpZ25lZFwiLFxuICAgICAgICBhYzogMTAsXG4gICAgICAgIGhwOiA1LFxuICAgICAgICBoaXRfZGljZTogXCIxZDhcIixcbiAgICAgICAgc3BlZWQ6IFwiMTAgZnQuLCBmbHkgNTAgZnQuXCIsXG4gICAgICAgIHN0YXRzOiBbNywgMTAsIDEzLCAyLCAxMiwgNF0sXG4gICAgICAgIHNraWxsc2F2ZXM6IFt7IHBlcmNlcHRpb246IDMgfV0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBzZW5zZXM6IFwicGFzc2l2ZSBQZXJjZXB0aW9uIDEzXCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJcIixcbiAgICAgICAgY3I6IFwiMFwiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIktlZW4gU2lnaHQgYW5kIFNtZWxsXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgdnVsdHVyZSBoYXMgYWR2YW50YWdlIG9uIFdpc2RvbSAoUGVyY2VwdGlvbikgY2hlY2tzIHRoYXQgcmVseSBvbiBzaWdodCBvciBzbWVsbC5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJQYWNrIFRhY3RpY3NcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSB2dWx0dXJlIGhhcyBhZHZhbnRhZ2Ugb24gYW4gYXR0YWNrIHJvbGwgYWdhaW5zdCBhIGNyZWF0dXJlIGlmIGF0IGxlYXN0IG9uZSBvZiB0aGUgdnVsdHVyZSdzIGFsbGllcyBpcyB3aXRoaW4gNSBmdC4gb2YgdGhlIGNyZWF0dXJlIGFuZCB0aGUgYWxseSBpc24ndCBpbmNhcGFjaXRhdGVkLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJCZWFrXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMiB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDIgKDFkNCkgcGllcmNpbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIxZDRcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiV2FyaG9yc2VcIixcbiAgICAgICAgc2l6ZTogXCJMYXJnZVwiLFxuICAgICAgICB0eXBlOiBcImJlYXN0XCIsXG4gICAgICAgIHN1YnR5cGU6IFwiXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcbiAgICAgICAgYWM6IDExLFxuICAgICAgICBocDogMTksXG4gICAgICAgIGhpdF9kaWNlOiBcIjNkMTAgKyAyXCIsXG4gICAgICAgIHNwZWVkOiBcIjYwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzE4LCAxMiwgMTMsIDIsIDEyLCA3XSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIHNlbnNlczogXCJwYXNzaXZlIFBlcmNlcHRpb24gMTFcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcIlwiLFxuICAgICAgICBjcjogXCIxLzJcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJUcmFtcGxpbmcgQ2hhcmdlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJJZiB0aGUgaG9yc2UgbW92ZXMgYXQgbGVhc3QgMjAgZnQuIHN0cmFpZ2h0IHRvd2FyZCBhIGNyZWF0dXJlIGFuZCB0aGVuIGhpdHMgaXQgd2l0aCBhIGhvb3ZlcyBhdHRhY2sgb24gdGhlIHNhbWUgdHVybiwgdGhhdCB0YXJnZXQgbXVzdCBzdWNjZWVkIG9uIGEgREMgMTQgU3RyZW5ndGggc2F2aW5nIHRocm93IG9yIGJlIGtub2NrZWQgcHJvbmUuIElmIHRoZSB0YXJnZXQgaXMgcHJvbmUsIHRoZSBob3JzZSBjYW4gbWFrZSBhbm90aGVyIGF0dGFjayB3aXRoIGl0cyBob292ZXMgYWdhaW5zdCBpdCBhcyBhIGJvbnVzIGFjdGlvbi5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiSG9vdmVzXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNiB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDExICgyZDYgKyA0KSBibHVkZ2VvbmluZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA2LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjJkNlwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogNFxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiV2FyaG9yc2UgU2tlbGV0b25cIixcbiAgICAgICAgc2l6ZTogXCJMYXJnZVwiLFxuICAgICAgICB0eXBlOiBcInVuZGVhZFwiLFxuICAgICAgICBzdWJ0eXBlOiBcIlwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwibGF3ZnVsIGV2aWxcIixcbiAgICAgICAgYWM6IDEzLFxuICAgICAgICBocDogMjIsXG4gICAgICAgIGhpdF9kaWNlOiBcIjNkMTAgKyA1XCIsXG4gICAgICAgIHNwZWVkOiBcIjYwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzE4LCAxMiwgMTUsIDIsIDgsIDVdLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcImJsdWRnZW9uaW5nXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwicG9pc29uXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOiBcImV4aGF1c3Rpb24sIHBvaXNvbmVkXCIsXG4gICAgICAgIHNlbnNlczogXCJkYXJrdmlzaW9uIDYwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDlcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcIlwiLFxuICAgICAgICBjcjogXCIxLzJcIixcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiSG9vdmVzXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNiB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDExICgyZDYgKyA0KSBibHVkZ2VvbmluZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA2LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjJkNlwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogNFxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiV2F0ZXIgRWxlbWVudGFsXCIsXG4gICAgICAgIHNpemU6IFwiTGFyZ2VcIixcbiAgICAgICAgdHlwZTogXCJlbGVtZW50YWxcIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcIm5ldXRyYWxcIixcbiAgICAgICAgYWM6IDE0LFxuICAgICAgICBocDogMTE0LFxuICAgICAgICBoaXRfZGljZTogXCIxMmQxMCArIDQ4XCIsXG4gICAgICAgIHNwZWVkOiBcIjMwIGZ0Liwgc3dpbSA5MCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsxOCwgMTQsIDE4LCA1LCAxMCwgOF0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczpcbiAgICAgICAgICAgIFwiYWNpZDsgYmx1ZGdlb25pbmcsIHBpZXJjaW5nLCBhbmQgc2xhc2hpbmcgZnJvbSBub25tYWdpY2FsIHdlYXBvbnNcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwicG9pc29uXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOlxuICAgICAgICAgICAgXCJleGhhdXN0aW9uLCBncmFwcGxlZCwgcGFyYWx5emVkLCBwZXRyaWZpZWQsIHBvaXNvbmVkLCBwcm9uZSwgcmVzdHJhaW5lZCwgdW5jb25zY2lvdXNcIixcbiAgICAgICAgc2Vuc2VzOiBcImRhcmt2aXNpb24gNjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTBcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcIkFxdWFuXCIsXG4gICAgICAgIGNyOiBcIjVcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJXYXRlciBGb3JtXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZWxlbWVudGFsIGNhbiBlbnRlciBhIGhvc3RpbGUgY3JlYXR1cmUncyBzcGFjZSBhbmQgc3RvcCB0aGVyZS4gSXQgY2FuIG1vdmUgdGhyb3VnaCBhIHNwYWNlIGFzIG5hcnJvdyBhcyAxIGluY2ggd2lkZSB3aXRob3V0IHNxdWVlemluZy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJGcmVlemVcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIklmIHRoZSBlbGVtZW50YWwgdGFrZXMgY29sZCBkYW1hZ2UsIGl0IHBhcnRpYWxseSBmcmVlemVzOyBpdHMgc3BlZWQgaXMgcmVkdWNlZCBieSAyMCBmdC4gdW50aWwgdGhlIGVuZCBvZiBpdHMgbmV4dCB0dXJuLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJNdWx0aWF0dGFja1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGVsZW1lbnRhbCBtYWtlcyB0d28gc2xhbSBhdHRhY2tzLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlNsYW1cIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs3IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTMgKDJkOCArIDQpIGJsdWRnZW9uaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDcsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMmQ4XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiA0XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiV2hlbG0gKFJlY2hhcmdlIDQtNilcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIkVhY2ggY3JlYXR1cmUgaW4gdGhlIGVsZW1lbnRhbCdzIHNwYWNlIG11c3QgbWFrZSBhIERDIDE1IFN0cmVuZ3RoIHNhdmluZyB0aHJvdy4gT24gYSBmYWlsdXJlLCBhIHRhcmdldCB0YWtlcyAxMyAoMmQ4ICsgNCkgYmx1ZGdlb25pbmcgZGFtYWdlLiBJZiBpdCBpcyBMYXJnZSBvciBzbWFsbGVyLCBpdCBpcyBhbHNvIGdyYXBwbGVkIChlc2NhcGUgREMgMTQpLiBVbnRpbCB0aGlzIGdyYXBwbGUgZW5kcywgdGhlIHRhcmdldCBpcyByZXN0cmFpbmVkIGFuZCB1bmFibGUgdG8gYnJlYXRoZSB1bmxlc3MgaXQgY2FuIGJyZWF0aGUgd2F0ZXIuIElmIHRoZSBzYXZpbmcgdGhyb3cgaXMgc3VjY2Vzc2Z1bCwgdGhlIHRhcmdldCBpcyBwdXNoZWQgb3V0IG9mIHRoZSBlbGVtZW50YWwncyBzcGFjZS5cXFxcblRoZSBlbGVtZW50YWwgY2FuIGdyYXBwbGUgb25lIExhcmdlIGNyZWF0dXJlIG9yIHVwIHRvIHR3byBNZWRpdW0gb3Igc21hbGxlciBjcmVhdHVyZXMgYXQgb25lIHRpbWUuIEF0IHRoZSBzdGFydCBvZiBlYWNoIG9mIHRoZSBlbGVtZW50YWwncyB0dXJucywgZWFjaCB0YXJnZXQgZ3JhcHBsZWQgYnkgaXQgdGFrZXMgMTMgKDJkOCArIDQpIGJsdWRnZW9uaW5nIGRhbWFnZS4gQSBjcmVhdHVyZSB3aXRoaW4gNSBmZWV0IG9mIHRoZSBlbGVtZW50YWwgY2FuIHB1bGwgYSBjcmVhdHVyZSBvciBvYmplY3Qgb3V0IG9mIGl0IGJ5IHRha2luZyBhbiBhY3Rpb24gdG8gbWFrZSBhIERDIDE0IFN0cmVuZ3RoIGFuZCBzdWNjZWVkaW5nLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiV2Vhc2VsXCIsXG4gICAgICAgIHNpemU6IFwiVGlueVwiLFxuICAgICAgICB0eXBlOiBcImJlYXN0XCIsXG4gICAgICAgIHN1YnR5cGU6IFwiXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcbiAgICAgICAgYWM6IDEzLFxuICAgICAgICBocDogMSxcbiAgICAgICAgaGl0X2RpY2U6IFwiMWQ0ICsgLTJcIixcbiAgICAgICAgc3BlZWQ6IFwiMzAgZnQuXCIsXG4gICAgICAgIHN0YXRzOiBbMywgMTYsIDgsIDIsIDEyLCAzXSxcbiAgICAgICAgc2tpbGxzYXZlczogW3sgcGVyY2VwdGlvbjogMyB9LCB7IHN0ZWFsdGg6IDUgfV0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBzZW5zZXM6IFwicGFzc2l2ZSBQZXJjZXB0aW9uIDEzXCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJcIixcbiAgICAgICAgY3I6IFwiMFwiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIktlZW4gSGVhcmluZyBhbmQgU21lbGxcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSB3ZWFzZWwgaGFzIGFkdmFudGFnZSBvbiBXaXNkb20gKFBlcmNlcHRpb24pIGNoZWNrcyB0aGF0IHJlbHkgb24gaGVhcmluZyBvciBzbWVsbC5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQml0ZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzUgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIGNyZWF0dXJlLiBIaXQ6IDEgcGllcmNpbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNSxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDFcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIldlcmViZWFyXCIsXG4gICAgICAgIHNpemU6IFwiTWVkaXVtXCIsXG4gICAgICAgIHR5cGU6IFwiaHVtYW5vaWRcIixcbiAgICAgICAgc3VidHlwZTogXCJodW1hblwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwibmV1dHJhbCBnb29kXCIsXG4gICAgICAgIGFjOiAxMCxcbiAgICAgICAgaHA6IDEzNSxcbiAgICAgICAgaGl0X2RpY2U6IFwiMThkOCArIDU0XCIsXG4gICAgICAgIHNwZWVkOiBcIjMwIGZ0LiAoNDAgZnQuLCBjbGltYiAzMCBmdC4gaW4gYmVhciBvciBoeWJyaWQgZm9ybSlcIixcbiAgICAgICAgc3RhdHM6IFsxOSwgMTAsIDE3LCAxMSwgMTIsIDEyXSxcbiAgICAgICAgc2tpbGxzYXZlczogW3sgcGVyY2VwdGlvbjogNyB9XSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczpcbiAgICAgICAgICAgIFwiYmx1ZGdlb25pbmcsIHBpZXJjaW5nLCBhbmQgc2xhc2hpbmcgZGFtYWdlIGZyb20gbm9ubWFnaWNhbCB3ZWFwb25zIHRoYXQgYXJlbid0IHNpbHZlcmVkXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBzZW5zZXM6IFwicGFzc2l2ZSBQZXJjZXB0aW9uIDE3XCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJDb21tb24gKGNhbid0IHNwZWFrIGluIGJlYXIgZm9ybSlcIixcbiAgICAgICAgY3I6IFwiNVwiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlNoYXBlY2hhbmdlclwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIHdlcmViZWFyIGNhbiB1c2UgaXRzIGFjdGlvbiB0byBwb2x5bW9ycGggaW50byBhIExhcmdlIGJlYXItaHVtYW5vaWQgaHlicmlkIG9yIGludG8gYSBMYXJnZSBiZWFyLCBvciBiYWNrIGludG8gaXRzIHRydWUgZm9ybSwgd2hpY2ggaXMgaHVtYW5vaWQuIEl0cyBzdGF0aXN0aWNzLCBvdGhlciB0aGFuIGl0cyBzaXplIGFuZCBBQywgYXJlIHRoZSBzYW1lIGluIGVhY2ggZm9ybS4gQW55IGVxdWlwbWVudCBpdC4gaXMgd2VhcmluZyBvciBjYXJyeWluZyBpc24ndCB0cmFuc2Zvcm1lZC4gSXQgcmV2ZXJ0cyB0byBpdHMgdHJ1ZSBmb3JtIGlmIGl0IGRpZXMuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiS2VlbiBTbWVsbFwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIHdlcmViZWFyIGhhcyBhZHZhbnRhZ2Ugb24gV2lzR2xvbSAoUGVyY2VwdGlvbikgY2hlY2tzIHRoYXQgcmVseSBvbiBzbWVsbC5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIkluIGJlYXIgZm9ybSwgdGhlIHdlcmViZWFyIG1ha2VzIHR3byBjbGF3IGF0dGFja3MuIEluIGh1bWFub2lkIGZvcm0sIGl0IG1ha2VzIHR3byBncmVhdGF4ZSBhdHRhY2tzLiBJbiBoeWJyaWQgZm9ybSwgaXQgY2FuIGF0dGFjayBsaWtlIGEgYmVhciBvciBhIGh1bWFub2lkLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkJpdGUgKEJlYXIgb3IgSHlicmlkIEZvcm0gT25seSlcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs3IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTUgKDJkMTAgKyA0KSBwaWVyY2luZyBkYW1hZ2UuIElmIHRoZSB0YXJnZXQgaXMgYSBodW1hbm9pZCwgaXQgbXVzdCBzdWNjZWVkIG9uIGEgREMgMTQgQ29uc3RpdHV0aW9uIHNhdmluZyB0aHJvdyBvciBiZSBjdXJzZWQgd2l0aCB3ZXJlIGJlYXIgbHljYW50aHJvcHkuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA3LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjJkMTBcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDRcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJDbGF3IChCZWFyIG9yIEh5YnJpZCBGb3JtIE9ubHkpXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNyB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDEzICgyZDggKyA0KSBzbGFzaGluZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA3LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjJkOFwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogNFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkdyZWF0YXhlIChIdW1hbm9pZCBvciBIeWJyaWQgRm9ybSBPbmx5KVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzcgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxMCAoMWQxMiArIDQpIHNsYXNoaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDcsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMWQxMlwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogNFxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiV2VyZWJvYXJcIixcbiAgICAgICAgc2l6ZTogXCJNZWRpdW1cIixcbiAgICAgICAgdHlwZTogXCJodW1hbm9pZFwiLFxuICAgICAgICBzdWJ0eXBlOiBcImh1bWFuXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJuZXV0cmFsIGV2aWxcIixcbiAgICAgICAgYWM6IDEwLFxuICAgICAgICBocDogNzgsXG4gICAgICAgIGhpdF9kaWNlOiBcIjEyZDggKyAyNFwiLFxuICAgICAgICBzcGVlZDogXCIzMCBmdC4gKDQwIGZ0LiBpbiBib2FyIGZvcm0pXCIsXG4gICAgICAgIHN0YXRzOiBbMTcsIDEwLCAxNSwgMTAsIDExLCA4XSxcbiAgICAgICAgc2tpbGxzYXZlczogW3sgcGVyY2VwdGlvbjogMiB9XSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczpcbiAgICAgICAgICAgIFwiYmx1ZGdlb25pbmcsIHBpZXJjaW5nLCBhbmQgc2xhc2hpbmcgZGFtYWdlIGZyb20gbm9ubWFnaWNhbCB3ZWFwb25zIHRoYXQgYXJlbid0IHNpbHZlcmVkXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBzZW5zZXM6IFwicGFzc2l2ZSBQZXJjZXB0aW9uIDEyXCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJDb21tb24gKGNhbid0IHNwZWFrIGluIGJvYXIgZm9ybSlcIixcbiAgICAgICAgY3I6IFwiNFwiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlNoYXBlY2hhbmdlclwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIHdlcmVib2FyIGNhbiB1c2UgaXRzIGFjdGlvbiB0byBwb2x5bW9ycGggaW50byBhIGJvYXItaHVtYW5vaWQgaHlicmlkIG9yIGludG8gYSBib2FyLCBvciBiYWNrIGludG8gaXRzIHRydWUgZm9ybSwgd2hpY2ggaXMgaHVtYW5vaWQuIEl0cyBzdGF0aXN0aWNzLCBvdGhlciB0aGFuIGl0cyBBQywgYXJlIHRoZSBzYW1lIGluIGVhY2ggZm9ybS4gQW55IGVxdWlwbWVudCBpdCBpcyB3ZWFyaW5nIG9yIGNhcnJ5aW5nIGlzbid0IHRyYW5zZm9ybWVkLiBJdCByZXZlcnRzIHRvIGl0cyB0cnVlIGZvcm0gaWYgaXQgZGllcy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJDaGFyZ2UgKEJvYXIgb3IgSHlicmlkIEZvcm0gT25seSlcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIklmIHRoZSB3ZXJlYm9hciBtb3ZlcyBhdCBsZWFzdCAxNSBmZWV0IHN0cmFpZ2h0IHRvd2FyZCBhIHRhcmdldCBhbmQgdGhlbiBoaXRzIGl0IHdpdGggaXRzIHR1c2tzIG9uIHRoZSBzYW1lIHR1cm4sIHRoZSB0YXJnZXQgdGFrZXMgYW4gZXh0cmEgNyAoMmQ2KSBzbGFzaGluZyBkYW1hZ2UuIElmIHRoZSB0YXJnZXQgaXMgYSBjcmVhdHVyZSwgaXQgbXVzdCBzdWNjZWVkIG9uIGEgREMgMTMgU3RyZW5ndGggc2F2aW5nIHRocm93IG9yIGJlIGtub2NrZWQgcHJvbmUuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjJkNlwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiUmVsZW50bGVzcyAoUmVjaGFyZ2VzIGFmdGVyIGEgU2hvcnQgb3IgTG9uZyBSZXN0KVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiSWYgdGhlIHdlcmVib2FyIHRha2VzIDE0IGRhbWFnZSBvciBsZXNzIHRoYXQgd291bGQgcmVkdWNlIGl0IHRvIDAgaGl0IHBvaW50cywgaXQgaXMgcmVkdWNlZCB0byAxIGhpdCBwb2ludCBpbnN0ZWFkLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJNdWx0aWF0dGFjayAoSHVtYW5vaWQgb3IgSHlicmlkIEZvcm0gT25seSlcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSB3ZXJlYm9hciBtYWtlcyB0d28gYXR0YWNrcywgb25seSBvbmUgb2Ygd2hpY2ggY2FuIGJlIHdpdGggaXRzIHR1c2tzLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk1hdWwgKEh1bWFub2lkIG9yIEh5YnJpZCBGb3JtIE9ubHkpXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNSB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDEwICgyZDYgKyAzKSBibHVkZ2VvbmluZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA1LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjJkNlwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogM1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlR1c2tzIChCb2FyIG9yIEh5YnJpZCBGb3JtIE9ubHkpXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNSB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDEwICgyZDYgKyAzKSBzbGFzaGluZyBkYW1hZ2UuIElmIHRoZSB0YXJnZXQgaXMgYSBodW1hbm9pZCwgaXQgbXVzdCBzdWNjZWVkIG9uIGEgREMgMTIgQ29uc3RpdHV0aW9uIHNhdmluZyB0aHJvdyBvciBiZSBjdXJzZWQgd2l0aCB3ZXJlYm9hciBseWNhbnRocm9weS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDUsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMmQ2XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiAzXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJXZXJlcmF0XCIsXG4gICAgICAgIHNpemU6IFwiTWVkaXVtXCIsXG4gICAgICAgIHR5cGU6IFwiaHVtYW5vaWRcIixcbiAgICAgICAgc3VidHlwZTogXCJodW1hblwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwibGF3ZnVsIGV2aWxcIixcbiAgICAgICAgYWM6IDEyLFxuICAgICAgICBocDogMzMsXG4gICAgICAgIGhpdF9kaWNlOiBcIjZkOCArIDZcIixcbiAgICAgICAgc3BlZWQ6IFwiMzAgZnQuXCIsXG4gICAgICAgIHN0YXRzOiBbMTAsIDE1LCAxMiwgMTEsIDEwLCA4XSxcbiAgICAgICAgc2tpbGxzYXZlczogW3sgcGVyY2VwdGlvbjogMiB9LCB7IHN0ZWFsdGg6IDQgfV0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6XG4gICAgICAgICAgICBcImJsdWRnZW9uaW5nLCBwaWVyY2luZywgYW5kIHNsYXNoaW5nIGRhbWFnZSBmcm9tIG5vbm1hZ2ljYWwgd2VhcG9ucyB0aGF0IGFyZW4ndCBzaWx2ZXJlZFwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcbiAgICAgICAgc2Vuc2VzOiBcImRhcmt2aXNpb24gNjAgZnQuIChyYXQgZm9ybSBvbmx5KSwgcGFzc2l2ZSBQZXJjZXB0aW9uIDEyXCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJDb21tb24gKGNhbid0IHNwZWFrIGluIHJhdCBmb3JtKVwiLFxuICAgICAgICBjcjogXCIyXCIsXG4gICAgICAgIHRyYWl0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiU2hhcGVjaGFuZ2VyXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgd2VyZXJhdCBjYW4gdXNlIGl0cyBhY3Rpb24gdG8gcG9seW1vcnBoIGludG8gYSByYXQtaHVtYW5vaWQgaHlicmlkIG9yIGludG8gYSBnaWFudCByYXQsIG9yIGJhY2sgaW50byBpdHMgdHJ1ZSBmb3JtLCB3aGljaCBpcyBodW1hbm9pZC4gSXRzIHN0YXRpc3RpY3MsIG90aGVyIHRoYW4gaXRzIHNpemUsIGFyZSB0aGUgc2FtZSBpbiBlYWNoIGZvcm0uIEFueSBlcXVpcG1lbnQgaXQgaXMgd2VhcmluZyBvciBjYXJyeWluZyBpc24ndCB0cmFuc2Zvcm1lZC4gSXQgcmV2ZXJ0cyB0byBpdHMgdHJ1ZSBmb3JtIGlmIGl0IGRpZXMuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiS2VlbiBTbWVsbFwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIHdlcmVyYXQgaGFzIGFkdmFudGFnZSBvbiBXaXNkb20gKFBlcmNlcHRpb24pIGNoZWNrcyB0aGF0IHJlbHkgb24gc21lbGwuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk11bHRpYXR0YWNrIChIdW1hbm9pZCBvciBIeWJyaWQgRm9ybSBPbmx5KVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIHdlcmVyYXQgbWFrZXMgdHdvIGF0dGFja3MsIG9ubHkgb25lIG9mIHdoaWNoIGNhbiBiZSBhIGJpdGUuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQml0ZSAoUmF0IG9yIEh5YnJpZCBGb3JtIE9ubHkpLlwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzQgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiA0ICgxZDQgKyAyKSBwaWVyY2luZyBkYW1hZ2UuIElmIHRoZSB0YXJnZXQgaXMgYSBodW1hbm9pZCwgaXQgbXVzdCBzdWNjZWVkIG9uIGEgREMgMTEgQ29uc3RpdHV0aW9uIHNhdmluZyB0aHJvdyBvciBiZSBjdXJzZWQgd2l0aCB3ZXJlcmF0IGx5Y2FudGhyb3B5LlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIxZDRcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJTaG9ydHN3b3JkIChIdW1hbm9pZCBvciBIeWJyaWQgRm9ybSBPbmx5KVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzQgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiA1ICgxZDYgKyAyKSBwaWVyY2luZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA0LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjFkNlwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogMlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkhhbmQgQ3Jvc3Nib3cgKEh1bWFub2lkIG9yIEh5YnJpZCBGb3JtIE9ubHkpXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJSYW5nZWQgV2VhcG9uIEF0dGFjazogKzQgdG8gaGl0LCByYW5nZSAzMC8xMjAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDUgKDFkNiArIDIpIHBpZXJjaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDQsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMWQ2XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiAyXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJXZXJldGlnZXJcIixcbiAgICAgICAgc2l6ZTogXCJNZWRpdW1cIixcbiAgICAgICAgdHlwZTogXCJodW1hbm9pZFwiLFxuICAgICAgICBzdWJ0eXBlOiBcImh1bWFuXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJuZXV0cmFsXCIsXG4gICAgICAgIGFjOiAxMixcbiAgICAgICAgaHA6IDEyMCxcbiAgICAgICAgaGl0X2RpY2U6IFwiMTZkOCArIDQ4XCIsXG4gICAgICAgIHNwZWVkOiBcIjMwIGZ0LiAoNDAgZnQuIGluIHRpZ2VyIGZvcm0pXCIsXG4gICAgICAgIHN0YXRzOiBbMTcsIDE1LCAxNiwgMTAsIDEzLCAxMV0sXG4gICAgICAgIHNraWxsc2F2ZXM6IFt7IHBlcmNlcHRpb246IDUgfSwgeyBzdGVhbHRoOiA0IH1dLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOlxuICAgICAgICAgICAgXCJibHVkZ2VvbmluZywgcGllcmNpbmcsIGFuZCBzbGFzaGluZyBkYW1hZ2UgZnJvbSBub25tYWdpY2FsIHdlYXBvbnMgdGhhdCBhcmVuJ3Qgc2lsdmVyZWRcIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIHNlbnNlczogXCJkYXJrdmlzaW9uIDYwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDE1XCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJDb21tb24gKGNhbid0IHNwZWFrIGluIHRpZ2VyIGZvcm0pXCIsXG4gICAgICAgIGNyOiBcIjRcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJTaGFwZWNoYW5nZXJcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSB3ZXJldGlnZXIgY2FuIHVzZSBpdHMgYWN0aW9uIHRvIHBvbHltb3JwaCBpbnRvIGEgdGlnZXItaHVtYW5vaWQgaHlicmlkIG9yIGludG8gYSB0aWdlciwgb3IgYmFjayBpbnRvIGl0cyB0cnVlIGZvcm0sIHdoaWNoIGlzIGh1bWFub2lkLiBJdHMgc3RhdGlzdGljcywgb3RoZXIgdGhhbiBpdHMgc2l6ZSwgYXJlIHRoZSBzYW1lIGluIGVhY2ggZm9ybS4gQW55IGVxdWlwbWVudCBpdCBpcyB3ZWFyaW5nIG9yIGNhcnJ5aW5nIGlzbid0IHRyYW5zZm9ybWVkLiBJdCByZXZlcnRzIHRvIGl0cyB0cnVlIGZvcm0gaWYgaXQgZGllcy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJLZWVuIEhlYXJpbmcgYW5kIFNtZWxsXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgd2VyZXRpZ2VyIGhhcyBhZHZhbnRhZ2Ugb24gV2lzZG9tIChQZXJjZXB0aW9uKSBjaGVja3MgdGhhdCByZWx5IG9uIGhlYXJpbmcgb3Igc21lbGwuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiUG91bmNlIChUaWdlciBvciBIeWJyaWQgRm9ybSBPbmx5KVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiSWYgdGhlIHdlcmV0aWdlciBtb3ZlcyBhdCBsZWFzdCAxNSBmZWV0IHN0cmFpZ2h0IHRvd2FyZCBhIGNyZWF0dXJlIGFuZCB0aGVuIGhpdHMgaXQgd2l0aCBhIGNsYXcgYXR0YWNrIG9uIHRoZSBzYW1lIHR1cm4sIHRoYXQgdGFyZ2V0IG11c3Qgc3VjY2VlZCBvbiBhIERDIDE0IFN0cmVuZ3RoIHNhdmluZyB0aHJvdyBvciBiZSBrbm9ja2VkIHByb25lLiBJZiB0aGUgdGFyZ2V0IGlzIHByb25lLCB0aGUgd2VyZXRpZ2VyIGNhbiBtYWtlIG9uZSBiaXRlIGF0dGFjayBhZ2FpbnN0IGl0IGFzIGEgYm9udXMgYWN0aW9uLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJNdWx0aWF0dGFjayAoSHVtYW5vaWQgb3IgSHlicmlkIEZvcm0gT25seSlcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIkluIGh1bWFub2lkIGZvcm0sIHRoZSB3ZXJldGlnZXIgbWFrZXMgdHdvIHNjaW1pdGFyIGF0dGFja3Mgb3IgdHdvIGxvbmdib3cgYXR0YWNrcy4gSW4gaHlicmlkIGZvcm0sIGl0IGNhbiBhdHRhY2sgbGlrZSBhIGh1bWFub2lkIG9yIG1ha2UgdHdvIGNsYXcgYXR0YWNrcy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJCaXRlIChUaWdlciBvciBIeWJyaWQgRm9ybSBPbmx5KVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzUgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiA4ICgxZDEwICsgMykgcGllcmNpbmcgZGFtYWdlLiBJZiB0aGUgdGFyZ2V0IGlzIGEgaHVtYW5vaWQsIGl0IG11c3Qgc3VjY2VlZCBvbiBhIERDIDEzIENvbnN0aXR1dGlvbiBzYXZpbmcgdGhyb3cgb3IgYmUgY3Vyc2VkIHdpdGggd2VyZXRpZ2VyIGx5Y2FudGhyb3B5LlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNSxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIxZDEwXCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiAzXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQ2xhdyAoVGlnZXIgb3IgSHlicmlkIEZvcm0gT25seSlcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs1IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogNyAoMWQ4ICsgMykgc2xhc2hpbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNSxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIxZDhcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDNcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJTY2ltaXRhciAoSHVtYW5vaWQgb3IgSHlicmlkIEZvcm0gT25seSlcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs1IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogNiAoMWQ2ICsgMykgc2xhc2hpbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNSxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIxZDZcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDNcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJMb25nYm93IChIdW1hbm9pZCBvciBIeWJyaWQgRm9ybSBPbmx5KVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiUmFuZ2VkIFdlYXBvbiBBdHRhY2s6ICs0IHRvIGhpdCwgcmFuZ2UgMTUwLzYwMCBmdC4sIG9uZSB0YXJnZXQuIEhpdDogNiAoMWQ4ICsgMikgcGllcmNpbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIxZDhcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIldlcmV3b2xmXCIsXG4gICAgICAgIHNpemU6IFwiTWVkaXVtXCIsXG4gICAgICAgIHR5cGU6IFwiaHVtYW5vaWRcIixcbiAgICAgICAgc3VidHlwZTogXCJodW1hblwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwiY2hhb3RpYyBldmlsXCIsXG4gICAgICAgIGFjOiAxMSxcbiAgICAgICAgaHA6IDU4LFxuICAgICAgICBoaXRfZGljZTogXCI5ZDggKyAxN1wiLFxuICAgICAgICBzcGVlZDogXCIzMCBmdC4gKDQwIGZ0LiBpbiB3b2xmIGZvcm0pXCIsXG4gICAgICAgIHN0YXRzOiBbMTUsIDEzLCAxNCwgMTAsIDExLCAxMF0sXG4gICAgICAgIHNraWxsc2F2ZXM6IFt7IHBlcmNlcHRpb246IDQgfV0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6XG4gICAgICAgICAgICBcImJsdWRnZW9uaW5nLCBwaWVyY2luZywgYW5kIHNsYXNoaW5nIGRhbWFnZSBmcm9tIG5vbm1hZ2ljYWwgd2VhcG9ucyB0aGF0IGFyZW4ndCBzaWx2ZXJlZFwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcbiAgICAgICAgc2Vuc2VzOiBcInBhc3NpdmUgUGVyY2VwdGlvbiAxNFwiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiQ29tbW9uIChjYW4ndCBzcGVhayBpbiB3b2xmIGZvcm0pXCIsXG4gICAgICAgIGNyOiBcIjNcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJTaGFwZWNoYW5nZXJcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSB3ZXJld29sZiBjYW4gdXNlIGl0cyBhY3Rpb24gdG8gcG9seW1vcnBoIGludG8gYSB3b2xmLWh1bWFub2lkIGh5YnJpZCBvciBpbnRvIGEgd29sZiwgb3IgYmFjayBpbnRvIGl0cyB0cnVlIGZvcm0sIHdoaWNoIGlzIGh1bWFub2lkLiBJdHMgc3RhdGlzdGljcywgb3RoZXIgdGhhbiBpdHMgQUMsIGFyZSB0aGUgc2FtZSBpbiBlYWNoIGZvcm0uIEFueSBlcXVpcG1lbnQgaXQgaXMgd2VhcmluZyBvciBjYXJyeWluZyBpc24ndCB0cmFuc2Zvcm1lZC4gSXQgcmV2ZXJ0cyB0byBpdHMgdHJ1ZSBmb3JtIGlmIGl0IGRpZXMuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiS2VlbiBIZWFyaW5nIGFuZCBTbWVsbFwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIHdlcmV3b2xmIGhhcyBhZHZhbnRhZ2Ugb24gV2lzZG9tIChQZXJjZXB0aW9uKSBjaGVja3MgdGhhdCByZWx5IG9uIGhlYXJpbmcgb3Igc21lbGwuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk11bHRpYXR0YWNrIChIdW1hbm9pZCBvciBIeWJyaWQgRm9ybSBPbmx5KVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIHdlcmV3b2xmIG1ha2VzIHR3byBhdHRhY2tzOiBvbmUgd2l0aCBpdHMgYml0ZSBhbmQgb25lIHdpdGggaXRzIGNsYXdzIG9yIHNwZWFyLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkJpdGUgKFdvbGYgb3IgSHlicmlkIEZvcm0gT25seSlcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs0IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogNiAoMWQ4ICsgMikgcGllcmNpbmcgZGFtYWdlLiBJZiB0aGUgdGFyZ2V0IGlzIGEgaHVtYW5vaWQsIGl0IG11c3Qgc3VjY2VlZCBvbiBhIERDIDEyIENvbnN0aXR1dGlvbiBzYXZpbmcgdGhyb3cgb3IgYmUgY3Vyc2VkIHdpdGggd2VyZXdvbGYgbHljYW50aHJvcHkuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA0LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjFkOFwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogMlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkNsYXdzIChIeWJyaWQgRm9ybSBPbmx5KVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzQgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIGNyZWF0dXJlLiBIaXQ6IDcgKDJkNCArIDIpIHNsYXNoaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDQsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMmQ0XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiAyXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiU3BlYXIgKEh1bWFub2lkIEZvcm0gT25seSlcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIG9yIFJhbmdlZCBXZWFwb24gQXR0YWNrOiArNCB0byBoaXQsIHJlYWNoIDUgZnQuIG9yIHJhbmdlIDIwLzYwIGZ0Liwgb25lIGNyZWF0dXJlLiBIaXQ6IDUgKDFkNiArIDIpIHBpZXJjaW5nIGRhbWFnZSwgb3IgNiAoMWQ4ICsgMikgcGllcmNpbmcgZGFtYWdlIGlmIHVzZWQgd2l0aCB0d28gaGFuZHMgdG8gbWFrZSBhIG1lbGVlIGF0dGFjay5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDQsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMWQ2XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiAtMlxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiV2hpdGUgRHJhZ29uIFd5cm1saW5nXCIsXG4gICAgICAgIHNpemU6IFwiTWVkaXVtXCIsXG4gICAgICAgIHR5cGU6IFwiZHJhZ29uXCIsXG4gICAgICAgIHN1YnR5cGU6IFwiXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJjaGFvdGljIGV2aWxcIixcbiAgICAgICAgYWM6IDE2LFxuICAgICAgICBocDogMzIsXG4gICAgICAgIGhpdF9kaWNlOiBcIjVkOCArIDlcIixcbiAgICAgICAgc3BlZWQ6IFwiMzAgZnQuLCBidXJyb3cgMTUgZnQuLCBmbHkgNjAgZnQuLCBzd2ltIDMwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzE0LCAxMCwgMTQsIDUsIDEwLCAxMV0sXG4gICAgICAgIHNhdmVzOiBbXG4gICAgICAgICAgICB7IGRleHRlcml0eTogMiB9LFxuICAgICAgICAgICAgeyBjb25zdGl0dXRpb246IDQgfSxcbiAgICAgICAgICAgIHsgd2lzZG9tOiAyIH0sXG4gICAgICAgICAgICB7IGNoYXJpc21hOiAyIH1cbiAgICAgICAgXSxcbiAgICAgICAgc2tpbGxzYXZlczogW3sgcGVyY2VwdGlvbjogNCB9LCB7IHN0ZWFsdGg6IDIgfV0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwiY29sZFwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcbiAgICAgICAgc2Vuc2VzOiBcImJsaW5kc2lnaHQgMTAgZnQuLCBkYXJrdmlzaW9uIDYwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDE0XCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJEcmFjb25pY1wiLFxuICAgICAgICBjcjogXCIyXCIsXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkJpdGVcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs0IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogNyAoMWQxMCArIDIpIHBpZXJjaW5nIGRhbWFnZSBwbHVzIDIgKDFkNCkgY29sZCBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA0LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjFkMTAgKyAxZDRcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJDb2xkIEJyZWF0aCAoUmVjaGFyZ2UgNS02KVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGRyYWdvbiBleGhhbGVzIGFuIGljeSBibGFzdCBvZiBoYWlsIGluIGEgMTUtZm9vdCBjb25lLiBFYWNoIGNyZWF0dXJlIGluIHRoYXQgYXJlYSBtdXN0IG1ha2UgYSBEQyAxMiBDb25zdGl0dXRpb24gc2F2aW5nIHRocm93LCB0YWtpbmcgMjIgKDVkOCkgY29sZCBkYW1hZ2Ugb24gYSBmYWlsZWQgc2F2ZSwgb3IgaGFsZiBhcyBtdWNoIGRhbWFnZSBvbiBhIHN1Y2Nlc3NmdWwgb25lLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCI1ZDhcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiV2lnaHRcIixcbiAgICAgICAgc2l6ZTogXCJNZWRpdW1cIixcbiAgICAgICAgdHlwZTogXCJ1bmRlYWRcIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcIm5ldXRyYWwgZXZpbFwiLFxuICAgICAgICBhYzogMTQsXG4gICAgICAgIGhwOiA0NSxcbiAgICAgICAgaGl0X2RpY2U6IFwiNmQ4ICsgMThcIixcbiAgICAgICAgc3BlZWQ6IFwiMzAgZnQuXCIsXG4gICAgICAgIHN0YXRzOiBbMTUsIDE0LCAxNiwgMTAsIDEzLCAxNV0sXG4gICAgICAgIHNraWxsc2F2ZXM6IFt7IHBlcmNlcHRpb246IDMgfSwgeyBzdGVhbHRoOiA0IH1dLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOlxuICAgICAgICAgICAgXCJuZWNyb3RpYzsgYmx1ZGdlb25pbmcsIHBpZXJjaW5nLCBhbmQgc2xhc2hpbmcgZnJvbSBub25tYWdpY2FsIHdlYXBvbnMgdGhhdCBhcmVuJ3Qgc2lsdmVyZWRcIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwicG9pc29uZWRcIixcbiAgICAgICAgc2Vuc2VzOiBcImRhcmt2aXNpb24gNjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTNcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcInRoZSBsYW5ndWFnZXMgaXQga25ldyBpbiBsaWZlXCIsXG4gICAgICAgIGNyOiBcIjNcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJTdW5saWdodCBTZW5zaXRpdml0eVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiV2hpbGUgaW4gc3VubGlnaHQsIHRoZSB3aWdodCBoYXMgZGlzYWR2YW50YWdlIG9uIGF0dGFjayByb2xscywgYXMgd2VsbCBhcyBvbiBXaXNkb20gKFBlcmNlcHRpb24pIGNoZWNrcyB0aGF0IHJlbHkgb24gc2lnaHQuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgd2lnaHQgbWFrZXMgdHdvIGxvbmdzd29yZCBhdHRhY2tzIG9yIHR3byBsb25nYm93IGF0dGFja3MuIEl0IGNhbiB1c2UgaXRzIExpZmUgRHJhaW4gaW4gcGxhY2Ugb2Ygb25lIGxvbmdzd29yZCBhdHRhY2suXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTGlmZSBEcmFpblwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzQgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIGNyZWF0dXJlLiBIaXQ6IDUgKDFkNiArIDIpIG5lY3JvdGljIGRhbWFnZS4gVGhlIHRhcmdldCBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxMyBDb25zdGl0dXRpb24gc2F2aW5nIHRocm93IG9yIGl0cyBoaXQgcG9pbnQgbWF4aW11bSBpcyByZWR1Y2VkIGJ5IGFuIGFtb3VudCBlcXVhbCB0byB0aGUgZGFtYWdlIHRha2VuLiBUaGlzIHJlZHVjdGlvbiBsYXN0cyB1bnRpbCB0aGUgdGFyZ2V0IGZpbmlzaGVzIGEgbG9uZyByZXN0LiBUaGUgdGFyZ2V0IGRpZXMgaWYgdGhpcyBlZmZlY3QgcmVkdWNlcyBpdHMgaGl0IHBvaW50IG1heGltdW0gdG8gMC5cXFxcbkEgaHVtYW5vaWQgc2xhaW4gYnkgdGhpcyBhdHRhY2sgcmlzZXMgMjQgaG91cnMgbGF0ZXIgYXMgYSB6b21iaWUgdW5kZXIgdGhlIHdpZ2h0J3MgY29udHJvbCwgdW5sZXNzIHRoZSBodW1hbm9pZCBpcyByZXN0b3JlZCB0byBsaWZlIG9yIGl0cyBib2R5IGlzIGRlc3Ryb3llZC4gVGhlIHdpZ2h0IGNhbiBoYXZlIG5vIG1vcmUgdGhhbiB0d2VsdmUgem9tYmllcyB1bmRlciBpdHMgY29udHJvbCBhdCBvbmUgdGltZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDQsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMWQ2XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiAyXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTG9uZ3N3b3JkXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNCB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDYgKDFkOCArIDIpIHNsYXNoaW5nIGRhbWFnZSwgb3IgNyAoMWQxMCArIDIpIHNsYXNoaW5nIGRhbWFnZSBpZiB1c2VkIHdpdGggdHdvIGhhbmRzLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIxZDhcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJMb25nYm93XCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJSYW5nZWQgV2VhcG9uIEF0dGFjazogKzQgdG8gaGl0LCByYW5nZSAxNTAvNjAwIGZ0Liwgb25lIHRhcmdldC4gSGl0OiA2ICgxZDggKyAyKSBwaWVyY2luZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA0LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjFkOFwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogMlxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiV2lsbC1vJy1XaXNwXCIsXG4gICAgICAgIHNpemU6IFwiVGlueVwiLFxuICAgICAgICB0eXBlOiBcInVuZGVhZFwiLFxuICAgICAgICBzdWJ0eXBlOiBcIlwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwiY2hhb3RpYyBldmlsXCIsXG4gICAgICAgIGFjOiAxOSxcbiAgICAgICAgaHA6IDIyLFxuICAgICAgICBoaXRfZGljZTogXCI5ZDQgKyAtMVwiLFxuICAgICAgICBzcGVlZDogXCIwIGZ0LiwgZmx5IDUwIGZ0LiAoaG92ZXIpXCIsXG4gICAgICAgIHN0YXRzOiBbMSwgMjgsIDEwLCAxMywgMTQsIDExXSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOlxuICAgICAgICAgICAgXCJhY2lkLCBjb2xkLCBmaXJlLCBuZWNyb3RpYywgdGh1bmRlcjsgYmx1ZGdlb25pbmcsIHBpZXJjaW5nLCBhbmQgc2xhc2hpbmcgZnJvbSBub25tYWdpY2FsIHdlYXBvbnNcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwibGlnaHRuaW5nLCBwb2lzb25cIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6XG4gICAgICAgICAgICBcImV4aGF1c3Rpb24sIGdyYXBwbGVkLCBwYXJhbHl6ZWQsIHBvaXNvbmVkLCBwcm9uZSwgcmVzdHJhaW5lZCwgdW5jb25zY2lvdXNcIixcbiAgICAgICAgc2Vuc2VzOiBcImRhcmt2aXNpb24gMTIwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDEyXCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJ0aGUgbGFuZ3VhZ2VzIGl0IGtuZXcgaW4gbGlmZVwiLFxuICAgICAgICBjcjogXCIyXCIsXG4gICAgICAgIHRyYWl0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQ29uc3VtZSBMaWZlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJBcyBhIGJvbnVzIGFjdGlvbiwgdGhlIHdpbGwtbyctd2lzcCBjYW4gdGFyZ2V0IG9uZSBjcmVhdHVyZSBpdCBjYW4gc2VlIHdpdGhpbiA1IGZ0LiBvZiBpdCB0aGF0IGhhcyAwIGhpdCBwb2ludHMgYW5kIGlzIHN0aWxsIGFsaXZlLiBUaGUgdGFyZ2V0IG11c3Qgc3VjY2VlZCBvbiBhIERDIDEwIENvbnN0aXR1dGlvbiBzYXZpbmcgdGhyb3cgYWdhaW5zdCB0aGlzIG1hZ2ljIG9yIGRpZS4gSWYgdGhlIHRhcmdldCBkaWVzLCB0aGUgd2lsbC1vJy13aXNwIHJlZ2FpbnMgMTAgKDNkNikgaGl0IHBvaW50cy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJFcGhlbWVyYWxcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSB3aWxsLW8nLXdpc3AgY2FuJ3Qgd2VhciBvciBjYXJyeSBhbnl0aGluZy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJJbmNvcnBvcmVhbCBNb3ZlbWVudFwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIHdpbGwtbyctd2lzcCBjYW4gbW92ZSB0aHJvdWdoIG90aGVyIGNyZWF0dXJlcyBhbmQgb2JqZWN0cyBhcyBpZiB0aGV5IHdlcmUgZGlmZmljdWx0IHRlcnJhaW4uIEl0IHRha2VzIDUgKDFkMTApIGZvcmNlIGRhbWFnZSBpZiBpdCBlbmRzIGl0cyB0dXJuIGluc2lkZSBhbiBvYmplY3QuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiVmFyaWFibGUgSWxsdW1pbmF0aW9uXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgd2lsbC1vJy13aXNwIHNoZWRzIGJyaWdodCBsaWdodCBpbiBhIDUtIHRvIDIwLWZvb3QgcmFkaXVzIGFuZCBkaW0gbGlnaHQgZm9yIGFuIGFkZGl0aW9uYWwgbnVtYmVyIG9mIGZ0LiBlcXVhbCB0byB0aGUgY2hvc2VuIHJhZGl1cy4gVGhlIHdpbGwtbyctd2lzcCBjYW4gYWx0ZXIgdGhlIHJhZGl1cyBhcyBhIGJvbnVzIGFjdGlvbi5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiU2hvY2tcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFNwZWxsIEF0dGFjazogKzQgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIGNyZWF0dXJlLiBIaXQ6IDkgKDJkOCkgbGlnaHRuaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDQsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMmQ4XCJcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJJbnZpc2liaWxpdHlcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSB3aWxsLW8nLXdpc3AgYW5kIGl0cyBsaWdodCBtYWdpY2FsbHkgYmVjb21lIGludmlzaWJsZSB1bnRpbCBpdCBhdHRhY2tzIG9yIHVzZXMgaXRzIENvbnN1bWUgTGlmZSwgb3IgdW50aWwgaXRzIGNvbmNlbnRyYXRpb24gZW5kcyAoYXMgaWYgY29uY2VudHJhdGluZyBvbiBhIHNwZWxsKS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIldpbnRlciBXb2xmXCIsXG4gICAgICAgIHNpemU6IFwiTGFyZ2VcIixcbiAgICAgICAgdHlwZTogXCJtb25zdHJvc2l0eVwiLFxuICAgICAgICBzdWJ0eXBlOiBcIlwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwibmV1dHJhbCBldmlsXCIsXG4gICAgICAgIGFjOiAxMyxcbiAgICAgICAgaHA6IDc1LFxuICAgICAgICBoaXRfZGljZTogXCIxMGQxMCArIDIwXCIsXG4gICAgICAgIHNwZWVkOiBcIjUwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzE4LCAxMywgMTQsIDcsIDEyLCA4XSxcbiAgICAgICAgc2tpbGxzYXZlczogW3sgcGVyY2VwdGlvbjogNSB9LCB7IHN0ZWFsdGg6IDMgfV0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwiY29sZFwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcbiAgICAgICAgc2Vuc2VzOiBcInBhc3NpdmUgUGVyY2VwdGlvbiAxNVwiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiQ29tbW9uLCBHaWFudCwgV2ludGVyIFdvbGZcIixcbiAgICAgICAgY3I6IFwiM1wiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIktlZW4gSGVhcmluZyBhbmQgU21lbGxcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSB3b2xmIGhhcyBhZHZhbnRhZ2Ugb24gV2lzZG9tIChQZXJjZXB0aW9uKSBjaGVja3MgdGhhdCByZWx5IG9uIGhlYXJpbmcgb3Igc21lbGwuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiUGFjayBUYWN0aWNzXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgd29sZiBoYXMgYWR2YW50YWdlIG9uIGFuIGF0dGFjayByb2xsIGFnYWluc3QgYSBjcmVhdHVyZSBpZiBhdCBsZWFzdCBvbmUgb2YgdGhlIHdvbGYncyBhbGxpZXMgaXMgd2l0aGluIDUgZnQuIG9mIHRoZSBjcmVhdHVyZSBhbmQgdGhlIGFsbHkgaXNuJ3QgaW5jYXBhY2l0YXRlZC5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJTbm93IENhbW91ZmxhZ2VcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSB3b2xmIGhhcyBhZHZhbnRhZ2Ugb24gRGV4dGVyaXR5IChTdGVhbHRoKSBjaGVja3MgbWFkZSB0byBoaWRlIGluIHNub3d5IHRlcnJhaW4uXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkJpdGVcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs2IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTEgKDJkNiArIDQpIHBpZXJjaW5nIGRhbWFnZS4gSWYgdGhlIHRhcmdldCBpcyBhIGNyZWF0dXJlLCBpdCBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxNCBTdHJlbmd0aCBzYXZpbmcgdGhyb3cgb3IgYmUga25vY2tlZCBwcm9uZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDYsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMmQ2XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiA0XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQ29sZCBCcmVhdGggKFJlY2hhcmdlIDUtNilcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSB3b2xmIGV4aGFsZXMgYSBibGFzdCBvZiBmcmVlemluZyB3aW5kIGluIGEgMTUtZm9vdCBjb25lLiBFYWNoIGNyZWF0dXJlIGluIHRoYXQgYXJlYSBtdXN0IG1ha2UgYSBEQyAxMiBEZXh0ZXJpdHkgc2F2aW5nIHRocm93LCB0YWtpbmcgMTggKDRkOCkgY29sZCBkYW1hZ2Ugb24gYSBmYWlsZWQgc2F2ZSwgb3IgaGFsZiBhcyBtdWNoIGRhbWFnZSBvbiBhIHN1Y2Nlc3NmdWwgb25lLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCI0ZDhcIlxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfSxcbiAgICB7XG4gICAgICAgIG5hbWU6IFwiV29sZlwiLFxuICAgICAgICBzaXplOiBcIk1lZGl1bVwiLFxuICAgICAgICB0eXBlOiBcImJlYXN0XCIsXG4gICAgICAgIHN1YnR5cGU6IFwiXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcbiAgICAgICAgYWM6IDEzLFxuICAgICAgICBocDogMTEsXG4gICAgICAgIGhpdF9kaWNlOiBcIjJkOCArIDJcIixcbiAgICAgICAgc3BlZWQ6IFwiNDAgZnQuXCIsXG4gICAgICAgIHN0YXRzOiBbMTIsIDE1LCAxMiwgMywgMTIsIDZdLFxuICAgICAgICBza2lsbHNhdmVzOiBbeyBwZXJjZXB0aW9uOiAzIH0sIHsgc3RlYWx0aDogNCB9XSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIHNlbnNlczogXCJwYXNzaXZlIFBlcmNlcHRpb24gMTNcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcIlwiLFxuICAgICAgICBjcjogXCIxLzRcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJLZWVuIEhlYXJpbmcgYW5kIFNtZWxsXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgd29sZiBoYXMgYWR2YW50YWdlIG9uIFdpc2RvbSAoUGVyY2VwdGlvbikgY2hlY2tzIHRoYXQgcmVseSBvbiBoZWFyaW5nIG9yIHNtZWxsLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlBhY2sgVGFjdGljc1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIHdvbGYgaGFzIGFkdmFudGFnZSBvbiBhbiBhdHRhY2sgcm9sbCBhZ2FpbnN0IGEgY3JlYXR1cmUgaWYgYXQgbGVhc3Qgb25lIG9mIHRoZSB3b2xmJ3MgYWxsaWVzIGlzIHdpdGhpbiA1IGZ0LiBvZiB0aGUgY3JlYXR1cmUgYW5kIHRoZSBhbGx5IGlzbid0IGluY2FwYWNpdGF0ZWQuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkJpdGVcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs0IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogNyAoMmQ0ICsgMikgcGllcmNpbmcgZGFtYWdlLiBJZiB0aGUgdGFyZ2V0IGlzIGEgY3JlYXR1cmUsIGl0IG11c3Qgc3VjY2VlZCBvbiBhIERDIDExIFN0cmVuZ3RoIHNhdmluZyB0aHJvdyBvciBiZSBrbm9ja2VkIHByb25lLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIyZDRcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIldvcmdcIixcbiAgICAgICAgc2l6ZTogXCJMYXJnZVwiLFxuICAgICAgICB0eXBlOiBcIm1vbnN0cm9zaXR5XCIsXG4gICAgICAgIHN1YnR5cGU6IFwiXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJuZXV0cmFsIGV2aWxcIixcbiAgICAgICAgYWM6IDEzLFxuICAgICAgICBocDogMjYsXG4gICAgICAgIGhpdF9kaWNlOiBcIjRkMTAgKyA0XCIsXG4gICAgICAgIHNwZWVkOiBcIjUwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzE2LCAxMywgMTMsIDcsIDExLCA4XSxcbiAgICAgICAgc2tpbGxzYXZlczogW3sgcGVyY2VwdGlvbjogNCB9XSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIHNlbnNlczogXCJkYXJrdmlzaW9uIDYwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDE0XCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJHb2JsaW4sIFdvcmdcIixcbiAgICAgICAgY3I6IFwiMS8yXCIsXG4gICAgICAgIHRyYWl0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiS2VlbiBIZWFyaW5nIGFuZCBTbWVsbFwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIHdvcmcgaGFzIGFkdmFudGFnZSBvbiBXaXNkb20gKFBlcmNlcHRpb24pIGNoZWNrcyB0aGF0IHJlbHkgb24gaGVhcmluZyBvciBzbWVsbC5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQml0ZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzUgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxMCAoMmQ2ICsgMykgcGllcmNpbmcgZGFtYWdlLiBJZiB0aGUgdGFyZ2V0IGlzIGEgY3JlYXR1cmUsIGl0IG11c3Qgc3VjY2VlZCBvbiBhIERDIDEzIFN0cmVuZ3RoIHNhdmluZyB0aHJvdyBvciBiZSBrbm9ja2VkIHByb25lLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNSxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIyZDZcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDNcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIldyYWl0aFwiLFxuICAgICAgICBzaXplOiBcIk1lZGl1bVwiLFxuICAgICAgICB0eXBlOiBcInVuZGVhZFwiLFxuICAgICAgICBzdWJ0eXBlOiBcIlwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwibmV1dHJhbCBldmlsXCIsXG4gICAgICAgIGFjOiAxMyxcbiAgICAgICAgaHA6IDY3LFxuICAgICAgICBoaXRfZGljZTogXCI5ZDggKyAyNlwiLFxuICAgICAgICBzcGVlZDogXCIwIGZ0LiwgZmx5IDYwIGZ0LiAoaG92ZXIpXCIsXG4gICAgICAgIHN0YXRzOiBbNiwgMTYsIDE2LCAxMiwgMTQsIDE1XSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOlxuICAgICAgICAgICAgXCJhY2lkLCBjb2xkLCBmaXJlLCBsaWdodG5pbmcsIHRodW5kZXI7IGJsdWRnZW9uaW5nLCBwaWVyY2luZywgYW5kIHNsYXNoaW5nIGZyb20gbm9ubWFnaWNhbCB3ZWFwb25zIHRoYXQgYXJlbid0IHNpbHZlcmVkXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcIm5lY3JvdGljLCBwb2lzb25cIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6XG4gICAgICAgICAgICBcImNoYXJtZWQsIGV4aGF1c3Rpb24sIGdyYXBwbGVkLCBwYXJhbHl6ZWQsIHBldHJpZmllZCwgcG9pc29uZWQsIHByb25lLCByZXN0cmFpbmVkXCIsXG4gICAgICAgIHNlbnNlczogXCJkYXJrdmlzaW9uIDYwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDEyXCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJ0aGUgbGFuZ3VhZ2VzIGl0IGtuZXcgaW4gbGlmZVwiLFxuICAgICAgICBjcjogXCI1XCIsXG4gICAgICAgIHRyYWl0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiSW5jb3Jwb3JlYWwgTW92ZW1lbnRcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSB3cmFpdGggY2FuIG1vdmUgdGhyb3VnaCBvdGhlciBjcmVhdHVyZXMgYW5kIG9iamVjdHMgYXMgaWYgdGhleSB3ZXJlIGRpZmZpY3VsdCB0ZXJyYWluLiBJdCB0YWtlcyA1ICgxZDEwKSBmb3JjZSBkYW1hZ2UgaWYgaXQgZW5kcyBpdHMgdHVybiBpbnNpZGUgYW4gb2JqZWN0LlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlN1bmxpZ2h0IFNlbnNpdGl2aXR5XCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJXaGlsZSBpbiBzdW5saWdodCwgdGhlIHdyYWl0aCBoYXMgZGlzYWR2YW50YWdlIG9uIGF0dGFjayByb2xscywgYXMgd2VsbCBhcyBvbiBXaXNkb20gKFBlcmNlcHRpb24pIGNoZWNrcyB0aGF0IHJlbHkgb24gc2lnaHQuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkxpZmUgRHJhaW5cIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs2IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSBjcmVhdHVyZS4gSGl0OiAyMSAoNGQ4ICsgMykgbmVjcm90aWMgZGFtYWdlLiBUaGUgdGFyZ2V0IG11c3Qgc3VjY2VlZCBvbiBhIERDIDE0IENvbnN0aXR1dGlvbiBzYXZpbmcgdGhyb3cgb3IgaXRzIGhpdCBwb2ludCBtYXhpbXVtIGlzIHJlZHVjZWQgYnkgYW4gYW1vdW50IGVxdWFsIHRvIHRoZSBkYW1hZ2UgdGFrZW4uIFRoaXMgcmVkdWN0aW9uIGxhc3RzIHVudGlsIHRoZSB0YXJnZXQgZmluaXNoZXMgYSBsb25nIHJlc3QuIFRoZSB0YXJnZXQgZGllcyBpZiB0aGlzIGVmZmVjdCByZWR1Y2VzIGl0cyBoaXQgcG9pbnQgbWF4aW11bSB0byAwLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCI0ZDhcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDNcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJDcmVhdGUgU3BlY3RlclwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIHdyYWl0aCB0YXJnZXRzIGEgaHVtYW5vaWQgd2l0aGluIDEwIGZlZXQgb2YgaXQgdGhhdCBoYXMgYmVlbiBkZWFkIGZvciBubyBsb25nZXIgdGhhbiAxIG1pbnV0ZSBhbmQgZGllZCB2aW9sZW50bHkuIFRoZSB0YXJnZXQncyBzcGlyaXQgcmlzZXMgYXMgYSBzcGVjdGVyIGluIHRoZSBzcGFjZSBvZiBpdHMgY29ycHNlIG9yIGluIHRoZSBuZWFyZXN0IHVub2NjdXBpZWQgc3BhY2UuIFRoZSBzcGVjdGVyIGlzIHVuZGVyIHRoZSB3cmFpdGgncyBjb250cm9sLiBUaGUgd3JhaXRoIGNhbiBoYXZlIG5vIG1vcmUgdGhhbiBzZXZlbiBzcGVjdGVycyB1bmRlciBpdHMgY29udHJvbCBhdCBvbmUgdGltZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIld5dmVyblwiLFxuICAgICAgICBzaXplOiBcIkxhcmdlXCIsXG4gICAgICAgIHR5cGU6IFwiZHJhZ29uXCIsXG4gICAgICAgIHN1YnR5cGU6IFwiXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJ1bmFsaWduZWRcIixcbiAgICAgICAgYWM6IDEzLFxuICAgICAgICBocDogMTEwLFxuICAgICAgICBoaXRfZGljZTogXCIxM2QxMCArIDM4XCIsXG4gICAgICAgIHNwZWVkOiBcIjIwIGZ0LiwgZmx5IDgwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzE5LCAxMCwgMTYsIDUsIDEyLCA2XSxcbiAgICAgICAgc2tpbGxzYXZlczogW3sgcGVyY2VwdGlvbjogNCB9XSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIHNlbnNlczogXCJkYXJrdmlzaW9uIDYwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDE0XCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJcIixcbiAgICAgICAgY3I6IFwiNlwiLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJNdWx0aWF0dGFja1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIHd5dmVybiBtYWtlcyB0d28gYXR0YWNrczogb25lIHdpdGggaXRzIGJpdGUgYW5kIG9uZSB3aXRoIGl0cyBzdGluZ2VyLiBXaGlsZSBmbHlpbmcsIGl0IGNhbiB1c2UgaXRzIGNsYXdzIGluIHBsYWNlIG9mIG9uZSBvdGhlciBhdHRhY2suXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQml0ZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzcgdG8gaGl0LCByZWFjaCAxMCBmdC4sIG9uZSBjcmVhdHVyZS4gSGl0OiAxMSAoMmQ2ICsgNCkgcGllcmNpbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNyxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIyZDZcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDRcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJDbGF3c1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzcgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxMyAoMmQ4ICsgNCkgc2xhc2hpbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNyxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIyZDhcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDRcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJTdGluZ2VyXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNyB0byBoaXQsIHJlYWNoIDEwIGZ0Liwgb25lIGNyZWF0dXJlLiBIaXQ6IDExICgyZDYgKyA0KSBwaWVyY2luZyBkYW1hZ2UuIFRoZSB0YXJnZXQgbXVzdCBtYWtlIGEgREMgMTUgQ29uc3RpdHV0aW9uIHNhdmluZyB0aHJvdywgdGFraW5nIDI0ICg3ZDYpIHBvaXNvbiBkYW1hZ2Ugb24gYSBmYWlsZWQgc2F2ZSwgb3IgaGFsZiBhcyBtdWNoIGRhbWFnZSBvbiBhIHN1Y2Nlc3NmdWwgb25lLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNyxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIyZDZcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDRcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIlhvcm5cIixcbiAgICAgICAgc2l6ZTogXCJNZWRpdW1cIixcbiAgICAgICAgdHlwZTogXCJlbGVtZW50YWxcIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcIm5ldXRyYWxcIixcbiAgICAgICAgYWM6IDE5LFxuICAgICAgICBocDogNzMsXG4gICAgICAgIGhpdF9kaWNlOiBcIjdkOCArIDQxXCIsXG4gICAgICAgIHNwZWVkOiBcIjIwIGZ0LiwgYnVycm93IDIwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzE3LCAxMCwgMjIsIDExLCAxMCwgMTFdLFxuICAgICAgICBza2lsbHNhdmVzOiBbeyBwZXJjZXB0aW9uOiA2IH0sIHsgc3RlYWx0aDogMyB9XSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOlxuICAgICAgICAgICAgXCJwaWVyY2luZyBhbmQgc2xhc2hpbmcgZnJvbSBub25tYWdpY2FsIHdlYXBvbnMgdGhhdCBhcmVuJ3QgYWRhbWFudGluZVwiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczogXCJcIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIHNlbnNlczogXCJkYXJrdmlzaW9uIDYwIGZ0LiwgdHJlbW9yc2Vuc2UgNjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTZcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcIlRlcnJhblwiLFxuICAgICAgICBjcjogXCI1XCIsXG4gICAgICAgIHRyYWl0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiRWFydGggR2xpZGVcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSB4b3JuIGNhbiBidXJyb3cgdGhyb3VnaCBub25tYWdpY2FsLCB1bndvcmtlZCBlYXJ0aCBhbmQgc3RvbmUuIFdoaWxlIGRvaW5nIHNvLCB0aGUgeG9ybiBkb2Vzbid0IGRpc3R1cmIgdGhlIG1hdGVyaWFsIGl0IG1vdmVzIHRocm91Z2guXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiU3RvbmUgQ2Ftb3VmbGFnZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIHhvcm4gaGFzIGFkdmFudGFnZSBvbiBEZXh0ZXJpdHkgKFN0ZWFsdGgpIGNoZWNrcyBtYWRlIHRvIGhpZGUgaW4gcm9ja3kgdGVycmFpbi5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJUcmVhc3VyZSBTZW5zZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIHhvcm4gY2FuIHBpbnBvaW50LCBieSBzY2VudCwgdGhlIGxvY2F0aW9uIG9mIHByZWNpb3VzIG1ldGFscyBhbmQgc3RvbmVzLCBzdWNoIGFzIGNvaW5zIGFuZCBnZW1zLCB3aXRoaW4gNjAgZnQuIG9mIGl0LlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJNdWx0aWF0dGFja1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIHhvcm4gbWFrZXMgdGhyZWUgY2xhdyBhdHRhY2tzIGFuZCBvbmUgYml0ZSBhdHRhY2suXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQml0ZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzYgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxMyAoM2Q2ICsgMykgcGllcmNpbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIzZDZcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDNcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJDbGF3XCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNiB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDYgKDFkNiArIDMpIHNsYXNoaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDYsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMWQ2XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiAzXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJZb3VuZyBCbGFjayBEcmFnb25cIixcbiAgICAgICAgc2l6ZTogXCJMYXJnZVwiLFxuICAgICAgICB0eXBlOiBcImRyYWdvblwiLFxuICAgICAgICBzdWJ0eXBlOiBcIlwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwiY2hhb3RpYyBldmlsXCIsXG4gICAgICAgIGFjOiAxOCxcbiAgICAgICAgaHA6IDEyNyxcbiAgICAgICAgaGl0X2RpY2U6IFwiMTVkMTAgKyA0NFwiLFxuICAgICAgICBzcGVlZDogXCI0MCBmdC4sIGZseSA4MCBmdC4sIHN3aW0gNDAgZnQuXCIsXG4gICAgICAgIHN0YXRzOiBbMTksIDE0LCAxNywgMTIsIDExLCAxNV0sXG4gICAgICAgIHNhdmVzOiBbXG4gICAgICAgICAgICB7IGRleHRlcml0eTogNSB9LFxuICAgICAgICAgICAgeyBjb25zdGl0dXRpb246IDYgfSxcbiAgICAgICAgICAgIHsgd2lzZG9tOiAzIH0sXG4gICAgICAgICAgICB7IGNoYXJpc21hOiA1IH1cbiAgICAgICAgXSxcbiAgICAgICAgc2tpbGxzYXZlczogW3sgcGVyY2VwdGlvbjogNiB9LCB7IHN0ZWFsdGg6IDUgfV0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwiYWNpZFwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcbiAgICAgICAgc2Vuc2VzOiBcImJsaW5kc2lnaHQgMzAgZnQuLCBkYXJrdmlzaW9uIDEyMCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxNlwiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiQ29tbW9uLCBEcmFjb25pY1wiLFxuICAgICAgICBjcjogXCI3XCIsXG4gICAgICAgIHRyYWl0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQW1waGliaW91c1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGRyYWdvbiBjYW4gYnJlYXRoZSBhaXIgYW5kIHdhdGVyLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJNdWx0aWF0dGFja1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGRyYWdvbiBtYWtlcyB0aHJlZSBhdHRhY2tzOiBvbmUgd2l0aCBpdHMgYml0ZSBhbmQgdHdvIHdpdGggaXRzIGNsYXdzLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkJpdGVcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs3IHRvIGhpdCwgcmVhY2ggMTAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDE1ICgyZDEwICsgNCkgcGllcmNpbmcgZGFtYWdlIHBsdXMgNCAoMWQ4KSBhY2lkIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDcsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMmQxMCArIDFkOFwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogNFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkNsYXdcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs3IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTEgKDJkNiArIDQpIHNsYXNoaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDcsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMmQ2XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiA0XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQWNpZCBCcmVhdGggKFJlY2hhcmdlIDUtNilcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBkcmFnb24gZXhoYWxlcyBhY2lkIGluIGEgMzAtZm9vdCBsaW5lIHRoYXQgaXMgNSBmZWV0IHdpZGUuIEVhY2ggY3JlYXR1cmUgaW4gdGhhdCBsaW5lIG11c3QgbWFrZSBhIERDIDE0IERleHRlcml0eSBzYXZpbmcgdGhyb3csIHRha2luZyA0OSAoMTFkOCkgYWNpZCBkYW1hZ2Ugb24gYSBmYWlsZWQgc2F2ZSwgb3IgaGFsZiBhcyBtdWNoIGRhbWFnZSBvbiBhIHN1Y2Nlc3NmdWwgb25lLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIxMWQ4XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIllvdW5nIEJsdWUgRHJhZ29uXCIsXG4gICAgICAgIHNpemU6IFwiTGFyZ2VcIixcbiAgICAgICAgdHlwZTogXCJkcmFnb25cIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcImxhd2Z1bCBldmlsXCIsXG4gICAgICAgIGFjOiAxOCxcbiAgICAgICAgaHA6IDE1MixcbiAgICAgICAgaGl0X2RpY2U6IFwiMTZkMTAgKyA2NFwiLFxuICAgICAgICBzcGVlZDogXCI0MCBmdC4sIGJ1cnJvdyA0MCBmdC4sIGZseSA4MCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsyMSwgMTAsIDE5LCAxNCwgMTMsIDE3XSxcbiAgICAgICAgc2F2ZXM6IFtcbiAgICAgICAgICAgIHsgZGV4dGVyaXR5OiA0IH0sXG4gICAgICAgICAgICB7IGNvbnN0aXR1dGlvbjogOCB9LFxuICAgICAgICAgICAgeyB3aXNkb206IDUgfSxcbiAgICAgICAgICAgIHsgY2hhcmlzbWE6IDcgfVxuICAgICAgICBdLFxuICAgICAgICBza2lsbHNhdmVzOiBbeyBwZXJjZXB0aW9uOiA5IH0sIHsgc3RlYWx0aDogNCB9XSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczogXCJsaWdodG5pbmdcIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIHNlbnNlczogXCJibGluZHNpZ2h0IDMwIGZ0LiwgZGFya3Zpc2lvbiAxMjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTlcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcIkNvbW1vbiwgRHJhY29uaWNcIixcbiAgICAgICAgY3I6IFwiOVwiLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJNdWx0aWF0dGFja1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGRyYWdvbiBtYWtlcyB0aHJlZSBhdHRhY2tzOiBvbmUgd2l0aCBpdHMgYml0ZSBhbmQgdHdvIHdpdGggaXRzIGNsYXdzLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkJpdGVcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs5IHRvIGhpdCwgcmVhY2ggMTAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDE2ICgyZDEwICsgNSkgcGllcmNpbmcgZGFtYWdlIHBsdXMgNSAoMWQxMCkgbGlnaHRuaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDksXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMmQxMCArIDFkMTBcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJDbGF3XCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArOSB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDEyICgyZDYgKyA1KSBzbGFzaGluZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA5LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjJkNlwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogNVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkxpZ2h0bmluZyBCcmVhdGggKFJlY2hhcmdlIDUtNilcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBkcmFnb24gZXhoYWxlcyBsaWdodG5pbmcgaW4gYW4gNjAtZm9vdCBsaW5lIHRoYXQgaXMgNSBmZWV0IHdpZGUuIEVhY2ggY3JlYXR1cmUgaW4gdGhhdCBsaW5lIG11c3QgbWFrZSBhIERDIDE2IERleHRlcml0eSBzYXZpbmcgdGhyb3csIHRha2luZyA1NSAoMTBkMTApIGxpZ2h0bmluZyBkYW1hZ2Ugb24gYSBmYWlsZWQgc2F2ZSwgb3IgaGFsZiBhcyBtdWNoIGRhbWFnZSBvbiBhIHN1Y2Nlc3NmdWwgb25lLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIxMGQxMFwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJZb3VuZyBCcmFzcyBEcmFnb25cIixcbiAgICAgICAgc2l6ZTogXCJMYXJnZVwiLFxuICAgICAgICB0eXBlOiBcImRyYWdvblwiLFxuICAgICAgICBzdWJ0eXBlOiBcIlwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwiY2hhb3RpYyBnb29kXCIsXG4gICAgICAgIGFjOiAxNyxcbiAgICAgICAgaHA6IDExMCxcbiAgICAgICAgaGl0X2RpY2U6IFwiMTNkMTAgKyAzOFwiLFxuICAgICAgICBzcGVlZDogXCI0MCBmdC4sIGJ1cnJvdyAyMCBmdC4sIGZseSA4MCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsxOSwgMTAsIDE3LCAxMiwgMTEsIDE1XSxcbiAgICAgICAgc2F2ZXM6IFtcbiAgICAgICAgICAgIHsgZGV4dGVyaXR5OiAzIH0sXG4gICAgICAgICAgICB7IGNvbnN0aXR1dGlvbjogNiB9LFxuICAgICAgICAgICAgeyB3aXNkb206IDMgfSxcbiAgICAgICAgICAgIHsgY2hhcmlzbWE6IDUgfVxuICAgICAgICBdLFxuICAgICAgICBza2lsbHNhdmVzOiBbeyBwZXJjZXB0aW9uOiA2IH0sIHsgcGVyc3Vhc2lvbjogNSB9LCB7IHN0ZWFsdGg6IDMgfV0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwiZmlyZVwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcbiAgICAgICAgc2Vuc2VzOiBcImJsaW5kc2lnaHQgMzAgZnQuLCBkYXJrdmlzaW9uIDEyMCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxNlwiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiQ29tbW9uLCBEcmFjb25pY1wiLFxuICAgICAgICBjcjogXCI2XCIsXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZHJhZ29uIG1ha2VzIHRocmVlIGF0dGFja3M6IG9uZSB3aXRoIGl0cyBiaXRlIGFuZCB0d28gd2l0aCBpdHMgY2xhd3MuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQml0ZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzcgdG8gaGl0LCByZWFjaCAxMCBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTUgKDJkMTAgKyA0KSBwaWVyY2luZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA3LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjJkMTBcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDRcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJDbGF3XCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNyB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDExICgyZDYgKyA0KSBzbGFzaGluZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA3LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjJkNlwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogNFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkJyZWF0aCBXZWFwb25zIChSZWNoYXJnZSA1LTYpXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZHJhZ29uIHVzZXMgb25lIG9mIHRoZSBmb2xsb3dpbmcgYnJlYXRoIHdlYXBvbnMuXFxcXG5GaXJlIEJyZWF0aC4gVGhlIGRyYWdvbiBleGhhbGVzIGZpcmUgaW4gYSA0MC1mb290IGxpbmUgdGhhdCBpcyA1IGZlZXQgd2lkZS4gRWFjaCBjcmVhdHVyZSBpbiB0aGF0IGxpbmUgbXVzdCBtYWtlIGEgREMgMTQgRGV4dGVyaXR5IHNhdmluZyB0aHJvdywgdGFraW5nIDQyICgxMmQ2KSBmaXJlIGRhbWFnZSBvbiBhIGZhaWxlZCBzYXZlLCBvciBoYWxmIGFzIG11Y2ggZGFtYWdlIG9uIGEgc3VjY2Vzc2Z1bCBvbmUuXFxcXG5TbGVlcCBCcmVhdGguIFRoZSBkcmFnb24gZXhoYWxlcyBzbGVlcCBnYXMgaW4gYSAzMC1mb290IGNvbmUuIEVhY2ggY3JlYXR1cmUgaW4gdGhhdCBhcmVhIG11c3Qgc3VjY2VlZCBvbiBhIERDIDE0IENvbnN0aXR1dGlvbiBzYXZpbmcgdGhyb3cgb3IgZmFsbCB1bmNvbnNjaW91cyBmb3IgNSBtaW51dGVzLiBUaGlzIGVmZmVjdCBlbmRzIGZvciBhIGNyZWF0dXJlIGlmIHRoZSBjcmVhdHVyZSB0YWtlcyBkYW1hZ2Ugb3Igc29tZW9uZSB1c2VzIGFuIGFjdGlvbiB0byB3YWtlIGl0LlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIxMmQ2XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIllvdW5nIEJyb256ZSBEcmFnb25cIixcbiAgICAgICAgc2l6ZTogXCJMYXJnZVwiLFxuICAgICAgICB0eXBlOiBcImRyYWdvblwiLFxuICAgICAgICBzdWJ0eXBlOiBcIlwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwibGF3ZnVsIGdvb2RcIixcbiAgICAgICAgYWM6IDE4LFxuICAgICAgICBocDogMTQyLFxuICAgICAgICBoaXRfZGljZTogXCIxNWQxMCArIDU5XCIsXG4gICAgICAgIHNwZWVkOiBcIjQwIGZ0LiwgZmx5IDgwIGZ0Liwgc3dpbSA0MCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsyMSwgMTAsIDE5LCAxNCwgMTMsIDE3XSxcbiAgICAgICAgc2F2ZXM6IFtcbiAgICAgICAgICAgIHsgZGV4dGVyaXR5OiAzIH0sXG4gICAgICAgICAgICB7IGNvbnN0aXR1dGlvbjogNyB9LFxuICAgICAgICAgICAgeyB3aXNkb206IDQgfSxcbiAgICAgICAgICAgIHsgY2hhcmlzbWE6IDYgfVxuICAgICAgICBdLFxuICAgICAgICBza2lsbHNhdmVzOiBbeyBpbnNpZ2h0OiA0IH0sIHsgcGVyY2VwdGlvbjogNyB9LCB7IHN0ZWFsdGg6IDMgfV0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwibGlnaHRuaW5nXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBzZW5zZXM6IFwiYmxpbmRzaWdodCAzMCBmdC4sIGRhcmt2aXNpb24gMTIwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDE3XCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJDb21tb24sIERyYWNvbmljXCIsXG4gICAgICAgIGNyOiBcIjhcIixcbiAgICAgICAgdHJhaXRzOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJBbXBoaWJpb3VzXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZHJhZ29uIGNhbiBicmVhdGhlIGFpciBhbmQgd2F0ZXIuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZHJhZ29uIG1ha2VzIHRocmVlIGF0dGFja3M6IG9uZSB3aXRoIGl0cyBiaXRlIGFuZCB0d28gd2l0aCBpdHMgY2xhd3MuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQml0ZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzggdG8gaGl0LCByZWFjaCAxMCBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTYgKDJkMTAgKyA1KSBwaWVyY2luZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA4LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjJkMTBcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDVcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJDbGF3XCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArOCB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDEyICgyZDYgKyA1KSBzbGFzaGluZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA4LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjJkNlwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogNVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkJyZWF0aCBXZWFwb25zIChSZWNoYXJnZSA1LTYpXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZHJhZ29uIHVzZXMgb25lIG9mIHRoZSBmb2xsb3dpbmcgYnJlYXRoIHdlYXBvbnMuXFxcXG5MaWdodG5pbmcgQnJlYXRoLiBUaGUgZHJhZ29uIGV4aGFsZXMgbGlnaHRuaW5nIGluIGEgNjAtZm9vdCBsaW5lIHRoYXQgaXMgNSBmZWV0IHdpZGUuIEVhY2ggY3JlYXR1cmUgaW4gdGhhdCBsaW5lIG11c3QgbWFrZSBhIERDIDE1IERleHRlcml0eSBzYXZpbmcgdGhyb3csIHRha2luZyA1NSAoMTBkMTApIGxpZ2h0bmluZyBkYW1hZ2Ugb24gYSBmYWlsZWQgc2F2ZSwgb3IgaGFsZiBhcyBtdWNoIGRhbWFnZSBvbiBhIHN1Y2Nlc3NmdWwgb25lLlxcXFxuUmVwdWxzaW9uIEJyZWF0aC4gVGhlIGRyYWdvbiBleGhhbGVzIHJlcHVsc2lvbiBlbmVyZ3kgaW4gYSAzMC1mb290IGNvbmUuIEVhY2ggY3JlYXR1cmUgaW4gdGhhdCBhcmVhIG11c3Qgc3VjY2VlZCBvbiBhIERDIDE1IFN0cmVuZ3RoIHNhdmluZyB0aHJvdy4gT24gYSBmYWlsZWQgc2F2ZSwgdGhlIGNyZWF0dXJlIGlzIHB1c2hlZCA0MCBmZWV0IGF3YXkgZnJvbSB0aGUgZHJhZ29uLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIxMGQxMFwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJZb3VuZyBDb3BwZXIgRHJhZ29uXCIsXG4gICAgICAgIHNpemU6IFwiTGFyZ2VcIixcbiAgICAgICAgdHlwZTogXCJkcmFnb25cIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcImNoYW90aWMgZ29vZFwiLFxuICAgICAgICBhYzogMTcsXG4gICAgICAgIGhwOiAxMTksXG4gICAgICAgIGhpdF9kaWNlOiBcIjE0ZDEwICsgNDJcIixcbiAgICAgICAgc3BlZWQ6IFwiNDAgZnQuLCBjbGltYiA0MCBmdC4sIGZseSA4MCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsxOSwgMTIsIDE3LCAxNiwgMTMsIDE1XSxcbiAgICAgICAgc2F2ZXM6IFtcbiAgICAgICAgICAgIHsgZGV4dGVyaXR5OiA0IH0sXG4gICAgICAgICAgICB7IGNvbnN0aXR1dGlvbjogNiB9LFxuICAgICAgICAgICAgeyB3aXNkb206IDQgfSxcbiAgICAgICAgICAgIHsgY2hhcmlzbWE6IDUgfVxuICAgICAgICBdLFxuICAgICAgICBza2lsbHNhdmVzOiBbeyBkZWNlcHRpb246IDUgfSwgeyBwZXJjZXB0aW9uOiA3IH0sIHsgc3RlYWx0aDogNCB9XSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczogXCJhY2lkXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBzZW5zZXM6IFwiYmxpbmRzaWdodCAzMCBmdC4sIGRhcmt2aXNpb24gMTIwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDE3XCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJDb21tb24sIERyYWNvbmljXCIsXG4gICAgICAgIGNyOiBcIjdcIixcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBkcmFnb24gbWFrZXMgdGhyZWUgYXR0YWNrczogb25lIHdpdGggaXRzIGJpdGUgYW5kIHR3byB3aXRoIGl0cyBjbGF3cy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJCaXRlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNyB0byBoaXQsIHJlYWNoIDEwIGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxNSAoMmQxMCArIDQpIHBpZXJjaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDcsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMmQxMFwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogNFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkNsYXdcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs3IHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTEgKDJkNiArIDQpIHNsYXNoaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDcsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMmQ2XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiA0XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQnJlYXRoIFdlYXBvbnMgKFJlY2hhcmdlIDUtNilcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBkcmFnb24gdXNlcyBvbmUgb2YgdGhlIGZvbGxvd2luZyBicmVhdGggd2VhcG9ucy5cXFxcbkFjaWQgQnJlYXRoLiBUaGUgZHJhZ29uIGV4aGFsZXMgYWNpZCBpbiBhbiA0MC1mb290IGxpbmUgdGhhdCBpcyA1IGZlZXQgd2lkZS4gRWFjaCBjcmVhdHVyZSBpbiB0aGF0IGxpbmUgbXVzdCBtYWtlIGEgREMgMTQgRGV4dGVyaXR5IHNhdmluZyB0aHJvdywgdGFraW5nIDQwICg5ZDgpIGFjaWQgZGFtYWdlIG9uIGEgZmFpbGVkIHNhdmUsIG9yIGhhbGYgYXMgbXVjaCBkYW1hZ2Ugb24gYSBzdWNjZXNzZnVsIG9uZS5cXFxcblNsb3dpbmcgQnJlYXRoLiBUaGUgZHJhZ29uIGV4aGFsZXMgZ2FzIGluIGEgMzAtZm9vdCBjb25lLiBFYWNoIGNyZWF0dXJlIGluIHRoYXQgYXJlYSBtdXN0IHN1Y2NlZWQgb24gYSBEQyAxNCBDb25zdGl0dXRpb24gc2F2aW5nIHRocm93LiBPbiBhIGZhaWxlZCBzYXZlLCB0aGUgY3JlYXR1cmUgY2FuJ3QgdXNlIHJlYWN0aW9ucywgaXRzIHNwZWVkIGlzIGhhbHZlZCwgYW5kIGl0IGNhbid0IG1ha2UgbW9yZSB0aGFuIG9uZSBhdHRhY2sgb24gaXRzIHR1cm4uIEluIGFkZGl0aW9uLCB0aGUgY3JlYXR1cmUgY2FuIHVzZSBlaXRoZXIgYW4gYWN0aW9uIG9yIGEgYm9udXMgYWN0aW9uIG9uIGl0cyB0dXJuLCBidXQgbm90IGJvdGguIFRoZXNlIGVmZmVjdHMgbGFzdCBmb3IgMSBtaW51dGUuIFRoZSBjcmVhdHVyZSBjYW4gcmVwZWF0IHRoZSBzYXZpbmcgdGhyb3cgYXQgdGhlIGVuZCBvZiBlYWNoIG9mIGl0cyB0dXJucywgZW5kaW5nIHRoZSBlZmZlY3Qgb24gaXRzZWxmIHdpdGggYSBzdWNjZXNzZnVsIHNhdmUuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjlkOFwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJZb3VuZyBHb2xkIERyYWdvblwiLFxuICAgICAgICBzaXplOiBcIkxhcmdlXCIsXG4gICAgICAgIHR5cGU6IFwiZHJhZ29uXCIsXG4gICAgICAgIHN1YnR5cGU6IFwiXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJsYXdmdWwgZ29vZFwiLFxuICAgICAgICBhYzogMTgsXG4gICAgICAgIGhwOiAxNzgsXG4gICAgICAgIGhpdF9kaWNlOiBcIjE3ZDEwICsgODRcIixcbiAgICAgICAgc3BlZWQ6IFwiNDAgZnQuLCBmbHkgODAgZnQuLCBzd2ltIDQwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzIzLCAxNCwgMjEsIDE2LCAxMywgMjBdLFxuICAgICAgICBzYXZlczogW1xuICAgICAgICAgICAgeyBkZXh0ZXJpdHk6IDYgfSxcbiAgICAgICAgICAgIHsgY29uc3RpdHV0aW9uOiA5IH0sXG4gICAgICAgICAgICB7IHdpc2RvbTogNSB9LFxuICAgICAgICAgICAgeyBjaGFyaXNtYTogOSB9XG4gICAgICAgIF0sXG4gICAgICAgIHNraWxsc2F2ZXM6IFtcbiAgICAgICAgICAgIHsgaW5zaWdodDogNSB9LFxuICAgICAgICAgICAgeyBwZXJjZXB0aW9uOiA5IH0sXG4gICAgICAgICAgICB7IHBlcnN1YXNpb246IDkgfSxcbiAgICAgICAgICAgIHsgc3RlYWx0aDogNiB9XG4gICAgICAgIF0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwiZmlyZVwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcbiAgICAgICAgc2Vuc2VzOiBcImJsaW5kc2lnaHQgMzAgZnQuLCBkYXJrdmlzaW9uIDEyMCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxOVwiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiQ29tbW9uLCBEcmFjb25pY1wiLFxuICAgICAgICBjcjogXCIxMFwiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkFtcGhpYmlvdXNcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBkcmFnb24gY2FuIGJyZWF0aGUgYWlyIGFuZCB3YXRlci5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBkcmFnb24gbWFrZXMgdGhyZWUgYXR0YWNrczogb25lIHdpdGggaXRzIGJpdGUgYW5kIHR3byB3aXRoIGl0cyBjbGF3cy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJCaXRlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMTAgdG8gaGl0LCByZWFjaCAxMCBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTcgKDJkMTAgKyA2KSBwaWVyY2luZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAxMCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIyZDEwXCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiA2XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQ2xhd1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzEwIHRvIGhpdCwgcmVhY2ggNSBmdC4sIG9uZSB0YXJnZXQuIEhpdDogMTMgKDJkNiArIDYpIHNsYXNoaW5nIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDEwLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjJkNlwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogNlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkJyZWF0aCBXZWFwb25zIChSZWNoYXJnZSA1LTYpXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZHJhZ29uIHVzZXMgb25lIG9mIHRoZSBmb2xsb3dpbmcgYnJlYXRoIHdlYXBvbnMuXFxcXG5GaXJlIEJyZWF0aC4gVGhlIGRyYWdvbiBleGhhbGVzIGZpcmUgaW4gYSAzMC1mb290IGNvbmUuIEVhY2ggY3JlYXR1cmUgaW4gdGhhdCBhcmVhIG11c3QgbWFrZSBhIERDIDE3IERleHRlcml0eSBzYXZpbmcgdGhyb3csIHRha2luZyA1NSAoMTBkMTApIGZpcmUgZGFtYWdlIG9uIGEgZmFpbGVkIHNhdmUsIG9yIGhhbGYgYXMgbXVjaCBkYW1hZ2Ugb24gYSBzdWNjZXNzZnVsIG9uZS5cXFxcbldlYWtlbmluZyBCcmVhdGguIFRoZSBkcmFnb24gZXhoYWxlcyBnYXMgaW4gYSAzMC1mb290IGNvbmUuIEVhY2ggY3JlYXR1cmUgaW4gdGhhdCBhcmVhIG11c3Qgc3VjY2VlZCBvbiBhIERDIDE3IFN0cmVuZ3RoIHNhdmluZyB0aHJvdyBvciBoYXZlIGRpc2FkdmFudGFnZSBvbiBTdHJlbmd0aC1iYXNlZCBhdHRhY2sgcm9sbHMsIFN0cmVuZ3RoIGNoZWNrcywgYW5kIFN0cmVuZ3RoIHNhdmluZyB0aHJvd3MgZm9yIDEgbWludXRlLiBBIGNyZWF0dXJlIGNhbiByZXBlYXQgdGhlIHNhdmluZyB0aHJvdyBhdCB0aGUgZW5kIG9mIGVhY2ggb2YgaXRzIHR1cm5zLCBlbmRpbmcgdGhlIGVmZmVjdCBvbiBpdHNlbGYgb24gYSBzdWNjZXNzLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIxMGQxMFwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJZb3VuZyBHcmVlbiBEcmFnb25cIixcbiAgICAgICAgc2l6ZTogXCJMYXJnZVwiLFxuICAgICAgICB0eXBlOiBcImRyYWdvblwiLFxuICAgICAgICBzdWJ0eXBlOiBcIlwiLFxuICAgICAgICBhbGlnbm1lbnQ6IFwibGF3ZnVsIGV2aWxcIixcbiAgICAgICAgYWM6IDE4LFxuICAgICAgICBocDogMTM2LFxuICAgICAgICBoaXRfZGljZTogXCIxNmQxMCArIDQ4XCIsXG4gICAgICAgIHNwZWVkOiBcIjQwIGZ0LiwgZmx5IDgwIGZ0Liwgc3dpbSA0MCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsxOSwgMTIsIDE3LCAxNiwgMTMsIDE1XSxcbiAgICAgICAgc2F2ZXM6IFtcbiAgICAgICAgICAgIHsgZGV4dGVyaXR5OiA0IH0sXG4gICAgICAgICAgICB7IGNvbnN0aXR1dGlvbjogNiB9LFxuICAgICAgICAgICAgeyB3aXNkb206IDQgfSxcbiAgICAgICAgICAgIHsgY2hhcmlzbWE6IDUgfVxuICAgICAgICBdLFxuICAgICAgICBza2lsbHNhdmVzOiBbeyBkZWNlcHRpb246IDUgfSwgeyBwZXJjZXB0aW9uOiA3IH0sIHsgc3RlYWx0aDogNCB9XSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczogXCJwb2lzb25cIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwicG9pc29uZWRcIixcbiAgICAgICAgc2Vuc2VzOiBcImJsaW5kc2lnaHQgMzAgZnQuLCBkYXJrdmlzaW9uIDEyMCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxN1wiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiQ29tbW9uLCBEcmFjb25pY1wiLFxuICAgICAgICBjcjogXCI4XCIsXG4gICAgICAgIHRyYWl0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQW1waGliaW91c1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGRyYWdvbiBjYW4gYnJlYXRoZSBhaXIgYW5kIHdhdGVyLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJNdWx0aWF0dGFja1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGRyYWdvbiBtYWtlcyB0aHJlZSBhdHRhY2tzOiBvbmUgd2l0aCBpdHMgYml0ZSBhbmQgdHdvIHdpdGggaXRzIGNsYXdzLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkJpdGVcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICs3IHRvIGhpdCwgcmVhY2ggMTAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDE1ICgyZDEwICsgNCkgcGllcmNpbmcgZGFtYWdlIHBsdXMgNyAoMmQ2KSBwb2lzb24gZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNyxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIyZDEwICsgMmQ2XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiA0XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQ2xhd1wiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzcgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxMSAoMmQ2ICsgNCkgc2xhc2hpbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogNyxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIyZDZcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDRcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJQb2lzb24gQnJlYXRoIChSZWNoYXJnZSA1LTYpXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZHJhZ29uIGV4aGFsZXMgcG9pc29ub3VzIGdhcyBpbiBhIDMwLWZvb3QgY29uZS4gRWFjaCBjcmVhdHVyZSBpbiB0aGF0IGFyZWEgbXVzdCBtYWtlIGEgREMgMTQgQ29uc3RpdHV0aW9uIHNhdmluZyB0aHJvdywgdGFraW5nIDQyICgxMmQ2KSBwb2lzb24gZGFtYWdlIG9uIGEgZmFpbGVkIHNhdmUsIG9yIGhhbGYgYXMgbXVjaCBkYW1hZ2Ugb24gYSBzdWNjZXNzZnVsIG9uZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDAsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMTJkNlwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJZb3VuZyBSZWQgRHJhZ29uXCIsXG4gICAgICAgIHNpemU6IFwiTGFyZ2VcIixcbiAgICAgICAgdHlwZTogXCJkcmFnb25cIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcImNoYW90aWMgZXZpbFwiLFxuICAgICAgICBhYzogMTgsXG4gICAgICAgIGhwOiAxNzgsXG4gICAgICAgIGhpdF9kaWNlOiBcIjE3ZDEwICsgODRcIixcbiAgICAgICAgc3BlZWQ6IFwiNDAgZnQuLCBjbGltYiA0MCBmdC4sIGZseSA4MCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsyMywgMTAsIDIxLCAxNCwgMTEsIDE5XSxcbiAgICAgICAgc2F2ZXM6IFtcbiAgICAgICAgICAgIHsgZGV4dGVyaXR5OiA0IH0sXG4gICAgICAgICAgICB7IGNvbnN0aXR1dGlvbjogOSB9LFxuICAgICAgICAgICAgeyB3aXNkb206IDQgfSxcbiAgICAgICAgICAgIHsgY2hhcmlzbWE6IDggfVxuICAgICAgICBdLFxuICAgICAgICBza2lsbHNhdmVzOiBbeyBwZXJjZXB0aW9uOiA4IH0sIHsgc3RlYWx0aDogNCB9XSxcbiAgICAgICAgZGFtYWdlX3Z1bG5lcmFiaWxpdGllczogXCJcIixcbiAgICAgICAgZGFtYWdlX3Jlc2lzdGFuY2VzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfaW1tdW5pdGllczogXCJmaXJlXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOiBcIlwiLFxuICAgICAgICBzZW5zZXM6IFwiYmxpbmRzaWdodCAzMCBmdC4sIGRhcmt2aXNpb24gMTIwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDE4XCIsXG4gICAgICAgIGxhbmd1YWdlczogXCJDb21tb24sIERyYWNvbmljXCIsXG4gICAgICAgIGNyOiBcIjEwXCIsXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZHJhZ29uIG1ha2VzIHRocmVlIGF0dGFja3M6IG9uZSB3aXRoIGl0cyBiaXRlIGFuZCB0d28gd2l0aCBpdHMgY2xhd3MuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQml0ZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzEwIHRvIGhpdCwgcmVhY2ggMTAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDE3ICgyZDEwICsgNikgcGllcmNpbmcgZGFtYWdlIHBsdXMgMyAoMWQ2KSBmaXJlIGRhbWFnZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDEwLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjJkMTAgKyAxZDZcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDZcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJDbGF3XCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArMTAgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxMyAoMmQ2ICsgNikgc2xhc2hpbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMTAsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMmQ2XCIsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2JvbnVzOiA2XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiRmlyZSBCcmVhdGggKFJlY2hhcmdlIDUtNilcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBkcmFnb24gZXhoYWxlcyBmaXJlIGluIGEgMzAtZm9vdCBjb25lLiBFYWNoIGNyZWF0dXJlIGluIHRoYXQgYXJlYSBtdXN0IG1ha2UgYSBEQyAxNyBEZXh0ZXJpdHkgc2F2aW5nIHRocm93LCB0YWtpbmcgNTYgKDE2ZDYpIGZpcmUgZGFtYWdlIG9uIGEgZmFpbGVkIHNhdmUsIG9yIGhhbGYgYXMgbXVjaCBkYW1hZ2Ugb24gYSBzdWNjZXNzZnVsIG9uZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDAsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMTZkNlwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJZb3VuZyBTaWx2ZXIgRHJhZ29uXCIsXG4gICAgICAgIHNpemU6IFwiTGFyZ2VcIixcbiAgICAgICAgdHlwZTogXCJkcmFnb25cIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcImxhd2Z1bCBnb29kXCIsXG4gICAgICAgIGFjOiAxOCxcbiAgICAgICAgaHA6IDE2OCxcbiAgICAgICAgaGl0X2RpY2U6IFwiMTZkMTAgKyA4MFwiLFxuICAgICAgICBzcGVlZDogXCI0MCBmdC4sIGZseSA4MCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsyMywgMTAsIDIxLCAxNCwgMTEsIDE5XSxcbiAgICAgICAgc2F2ZXM6IFtcbiAgICAgICAgICAgIHsgZGV4dGVyaXR5OiA0IH0sXG4gICAgICAgICAgICB7IGNvbnN0aXR1dGlvbjogOSB9LFxuICAgICAgICAgICAgeyB3aXNkb206IDQgfSxcbiAgICAgICAgICAgIHsgY2hhcmlzbWE6IDggfVxuICAgICAgICBdLFxuICAgICAgICBza2lsbHNhdmVzOiBbXG4gICAgICAgICAgICB7IGFyY2FuYTogNiB9LFxuICAgICAgICAgICAgeyBoaXN0b3J5OiA2IH0sXG4gICAgICAgICAgICB7IHBlcmNlcHRpb246IDggfSxcbiAgICAgICAgICAgIHsgc3RlYWx0aDogNCB9XG4gICAgICAgIF0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwiY29sZFwiLFxuICAgICAgICBjb25kaXRpb25faW1tdW5pdGllczogXCJcIixcbiAgICAgICAgc2Vuc2VzOiBcImJsaW5kc2lnaHQgMzAgZnQuLCBkYXJrdmlzaW9uIDEyMCBmdC4sIHBhc3NpdmUgUGVyY2VwdGlvbiAxOFwiLFxuICAgICAgICBsYW5ndWFnZXM6IFwiQ29tbW9uLCBEcmFjb25pY1wiLFxuICAgICAgICBjcjogXCI5XCIsXG4gICAgICAgIGFjdGlvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIk11bHRpYXR0YWNrXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZHJhZ29uIG1ha2VzIHRocmVlIGF0dGFja3M6IG9uZSB3aXRoIGl0cyBiaXRlIGFuZCB0d28gd2l0aCBpdHMgY2xhd3MuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiQml0ZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzEwIHRvIGhpdCwgcmVhY2ggMTAgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDE3ICgyZDEwICsgNikgcGllcmNpbmcgZGFtYWdlLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMTAsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMmQxMFwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogNlxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkNsYXdcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIk1lbGVlIFdlYXBvbiBBdHRhY2s6ICsxMCB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDEzICgyZDYgKyA2KSBzbGFzaGluZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAxMCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIyZDZcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDZcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJCcmVhdGggV2VhcG9ucyAoUmVjaGFyZ2UgNS02KVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiVGhlIGRyYWdvbiB1c2VzIG9uZSBvZiB0aGUgZm9sbG93aW5nIGJyZWF0aCB3ZWFwb25zLlxcXFxuQ29sZCBCcmVhdGguIFRoZSBkcmFnb24gZXhoYWxlcyBhbiBpY3kgYmxhc3QgaW4gYSAzMC1mb290IGNvbmUuIEVhY2ggY3JlYXR1cmUgaW4gdGhhdCBhcmVhIG11c3QgbWFrZSBhIERDIDE3IENvbnN0aXR1dGlvbiBzYXZpbmcgdGhyb3csIHRha2luZyA1NCAoMTJkOCkgY29sZCBkYW1hZ2Ugb24gYSBmYWlsZWQgc2F2ZSwgb3IgaGFsZiBhcyBtdWNoIGRhbWFnZSBvbiBhIHN1Y2Nlc3NmdWwgb25lLlxcXFxuUGFyYWx5emluZyBCcmVhdGguIFRoZSBkcmFnb24gZXhoYWxlcyBwYXJhbHl6aW5nIGdhcyBpbiBhIDMwLWZvb3QgY29uZS4gRWFjaCBjcmVhdHVyZSBpbiB0aGF0IGFyZWEgbXVzdCBzdWNjZWVkIG9uIGEgREMgMTcgQ29uc3RpdHV0aW9uIHNhdmluZyB0aHJvdyBvciBiZSBwYXJhbHl6ZWQgZm9yIDEgbWludXRlLiBBIGNyZWF0dXJlIGNhbiByZXBlYXQgdGhlIHNhdmluZyB0aHJvdyBhdCB0aGUgZW5kIG9mIGVhY2ggb2YgaXRzIHR1cm5zLCBlbmRpbmcgdGhlIGVmZmVjdCBvbiBpdHNlbGYgb24gYSBzdWNjZXNzLlwiLFxuICAgICAgICAgICAgICAgIGF0dGFja19ib251czogMCxcbiAgICAgICAgICAgICAgICBkYW1hZ2VfZGljZTogXCIxMmQ4XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG4gICAge1xuICAgICAgICBuYW1lOiBcIllvdW5nIFdoaXRlIERyYWdvblwiLFxuICAgICAgICBzaXplOiBcIkxhcmdlXCIsXG4gICAgICAgIHR5cGU6IFwiZHJhZ29uXCIsXG4gICAgICAgIHN1YnR5cGU6IFwiXCIsXG4gICAgICAgIGFsaWdubWVudDogXCJjaGFvdGljIGV2aWxcIixcbiAgICAgICAgYWM6IDE3LFxuICAgICAgICBocDogMTMzLFxuICAgICAgICBoaXRfZGljZTogXCIxNGQxMCArIDU2XCIsXG4gICAgICAgIHNwZWVkOiBcIjQwIGZ0LiwgYnVycm93IDIwIGZ0LiwgZmx5IDgwIGZ0Liwgc3dpbSA0MCBmdC5cIixcbiAgICAgICAgc3RhdHM6IFsxOCwgMTAsIDE4LCA2LCAxMSwgMTJdLFxuICAgICAgICBzYXZlczogW1xuICAgICAgICAgICAgeyBkZXh0ZXJpdHk6IDMgfSxcbiAgICAgICAgICAgIHsgY29uc3RpdHV0aW9uOiA3IH0sXG4gICAgICAgICAgICB7IHdpc2RvbTogMyB9LFxuICAgICAgICAgICAgeyBjaGFyaXNtYTogNCB9XG4gICAgICAgIF0sXG4gICAgICAgIHNraWxsc2F2ZXM6IFt7IHBlcmNlcHRpb246IDYgfSwgeyBzdGVhbHRoOiAzIH1dLFxuICAgICAgICBkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOiBcIlwiLFxuICAgICAgICBkYW1hZ2VfcmVzaXN0YW5jZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9pbW11bml0aWVzOiBcImNvbGRcIixcbiAgICAgICAgY29uZGl0aW9uX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIHNlbnNlczogXCJibGluZHNpZ2h0IDMwIGZ0LiwgZGFya3Zpc2lvbiAxMjAgZnQuLCBwYXNzaXZlIFBlcmNlcHRpb24gMTZcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcIkNvbW1vbiwgRHJhY29uaWNcIixcbiAgICAgICAgY3I6IFwiNlwiLFxuICAgICAgICB0cmFpdHM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkljZSBXYWxrXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZHJhZ29uIGNhbiBtb3ZlIGFjcm9zcyBhbmQgY2xpbWIgaWN5IHN1cmZhY2VzIHdpdGhvdXQgbmVlZGluZyB0byBtYWtlIGFuIGFiaWxpdHkgY2hlY2suIEFkZGl0aW9uYWxseSwgZGlmZmljdWx0IHRlcnJhaW4gY29tcG9zZWQgb2YgaWNlIG9yIHNub3cgZG9lc24ndCBjb3N0IGl0IGV4dHJhIG1vbWVudC5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiTXVsdGlhdHRhY2tcIixcbiAgICAgICAgICAgICAgICBkZXNjOiBcIlRoZSBkcmFnb24gbWFrZXMgdGhyZWUgYXR0YWNrczogb25lIHdpdGggaXRzIGJpdGUgYW5kIHR3byB3aXRoIGl0cyBjbGF3cy5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJCaXRlXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNyB0byBoaXQsIHJlYWNoIDEwIGZ0Liwgb25lIHRhcmdldC4gSGl0OiAxNSAoMmQxMCArIDQpIHBpZXJjaW5nIGRhbWFnZSBwbHVzIDQgKDFkOCkgY29sZCBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA3LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjJkMTAgKyAxZDhcIixcbiAgICAgICAgICAgICAgICBkYW1hZ2VfYm9udXM6IDRcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJDbGF3XCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJNZWxlZSBXZWFwb24gQXR0YWNrOiArNyB0byBoaXQsIHJlYWNoIDUgZnQuLCBvbmUgdGFyZ2V0LiBIaXQ6IDExICgyZDYgKyA0KSBzbGFzaGluZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiA3LFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjJkNlwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogNFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcIkNvbGQgQnJlYXRoIChSZWNoYXJnZSA1LTYpXCIsXG4gICAgICAgICAgICAgICAgZGVzYzogXCJUaGUgZHJhZ29uIGV4aGFsZXMgYW4gaWN5IGJsYXN0IGluIGEgMzAtZm9vdCBjb25lLiBFYWNoIGNyZWF0dXJlIGluIHRoYXQgYXJlYSBtdXN0IG1ha2UgYSBEQyAxNSBDb25zdGl0dXRpb24gc2F2aW5nIHRocm93LCB0YWtpbmcgNDUgKDEwZDgpIGNvbGQgZGFtYWdlIG9uIGEgZmFpbGVkIHNhdmUsIG9yIGhhbGYgYXMgbXVjaCBkYW1hZ2Ugb24gYSBzdWNjZXNzZnVsIG9uZS5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDAsXG4gICAgICAgICAgICAgICAgZGFtYWdlX2RpY2U6IFwiMTBkOFwiXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9LFxuICAgIHtcbiAgICAgICAgbmFtZTogXCJab21iaWVcIixcbiAgICAgICAgc2l6ZTogXCJNZWRpdW1cIixcbiAgICAgICAgdHlwZTogXCJ1bmRlYWRcIixcbiAgICAgICAgc3VidHlwZTogXCJcIixcbiAgICAgICAgYWxpZ25tZW50OiBcIm5ldXRyYWwgZXZpbFwiLFxuICAgICAgICBhYzogOCxcbiAgICAgICAgaHA6IDIyLFxuICAgICAgICBoaXRfZGljZTogXCIzZDggKyA4XCIsXG4gICAgICAgIHNwZWVkOiBcIjIwIGZ0LlwiLFxuICAgICAgICBzdGF0czogWzEzLCA2LCAxNiwgMywgNiwgNV0sXG4gICAgICAgIHNhdmVzOiBbeyB3aXNkb206IDAgfV0sXG4gICAgICAgIGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6IFwiXCIsXG4gICAgICAgIGRhbWFnZV9yZXNpc3RhbmNlczogXCJcIixcbiAgICAgICAgZGFtYWdlX2ltbXVuaXRpZXM6IFwiXCIsXG4gICAgICAgIGNvbmRpdGlvbl9pbW11bml0aWVzOiBcInBvaXNvbmVkXCIsXG4gICAgICAgIHNlbnNlczogXCJkYXJrdmlzaW9uIDYwIGZ0LiwgcGFzc2l2ZSBQZXJjZXB0aW9uIDhcIixcbiAgICAgICAgbGFuZ3VhZ2VzOiBcInVuZGVyc3RhbmRzIGFsbCBsYW5ndWFnZXMgaXQgc3Bva2UgaW4gbGlmZSBidXQgY2FuJ3Qgc3BlYWtcIixcbiAgICAgICAgY3I6IFwiMS80XCIsXG4gICAgICAgIHRyYWl0czogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiVW5kZWFkIEZvcnRpdHVkZVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiSWYgZGFtYWdlIHJlZHVjZXMgdGhlIHpvbWJpZSB0byAwIGhpdCBwb2ludHMsIGl0IG11c3QgbWFrZSBhIENvbnN0aXR1dGlvbiBzYXZpbmcgdGhyb3cgd2l0aCBhIERDIG9mIDUrdGhlIGRhbWFnZSB0YWtlbiwgdW5sZXNzIHRoZSBkYW1hZ2UgaXMgcmFkaWFudCBvciBmcm9tIGEgY3JpdGljYWwgaGl0LiBPbiBhIHN1Y2Nlc3MsIHRoZSB6b21iaWUgZHJvcHMgdG8gMSBoaXQgcG9pbnQgaW5zdGVhZC5cIixcbiAgICAgICAgICAgICAgICBhdHRhY2tfYm9udXM6IDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwiU2xhbVwiLFxuICAgICAgICAgICAgICAgIGRlc2M6IFwiTWVsZWUgV2VhcG9uIEF0dGFjazogKzMgdG8gaGl0LCByZWFjaCA1IGZ0Liwgb25lIHRhcmdldC4gSGl0OiA0ICgxZDYgKyAxKSBibHVkZ2VvbmluZyBkYW1hZ2UuXCIsXG4gICAgICAgICAgICAgICAgYXR0YWNrX2JvbnVzOiAzLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9kaWNlOiBcIjFkNlwiLFxuICAgICAgICAgICAgICAgIGRhbWFnZV9ib251czogMVxuICAgICAgICAgICAgfVxuICAgICAgICBdXG4gICAgfVxuXTtcblxuLyogZXhwb3J0IGNvbnN0IEJFU1RJQVJZX0JZX05BTUUgPSBPYmplY3QuZnJvbUVudHJpZXMoXG4gICAgQkVTVElBUlkubWFwKChtb25zdGVyKSA9PiBbbW9uc3Rlci5uYW1lLCBtb25zdGVyXSlcbik7ICovXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRCZXN0aWFyeUJ5TmFtZSAoZGlzYWJsZVNSRDogYm9vbGVhbikge1xuICAgIHJldHVybiAhZGlzYWJsZVNSRCA/IEJFU1RJQVJZX0JZX05BTUUgOiBuZXcgTWFwKCk7XG59XG5cbmNvbnN0IEJFU1RJQVJZX0JZX05BTUU6IE1hcDxzdHJpbmcsIE1vbnN0ZXI+ID0gbmV3IE1hcChcbiAgICBCRVNUSUFSWS5tYXAoKG1vbnN0ZXIpID0+IHtcbiAgICAgICAgLyogICAgICAgICBjb25zdCBzdGF0YmxvY2s6IFN0YXRibG9ja01vbnN0ZXIgPSBPYmplY3QuYXNzaWduKHt9LCBtb25zdGVyLCB7XG4gICAgICAgICAgICB0cmFpdHM6IG5ldyBNYXAoKSxcbiAgICAgICAgICAgIGFjdGlvbnM6IG5ldyBNYXAoKSxcbiAgICAgICAgICAgIHJlYWN0aW9uczogbmV3IE1hcCgpLFxuICAgICAgICAgICAgbGVnZW5kYXJ5X2FjdGlvbnM6IG5ldyBNYXAoKVxuICAgICAgICB9KTtcbiAgICAgICAgc3RhdGJsb2NrLnRyYWl0cyA9IHRyYWl0TWFwRnJvbShtb25zdGVyLnRyYWl0cyk7XG4gICAgICAgIHN0YXRibG9jay5hY3Rpb25zID0gdHJhaXRNYXBGcm9tKG1vbnN0ZXIuYWN0aW9ucyk7XG4gICAgICAgIHN0YXRibG9jay5yZWFjdGlvbnMgPSB0cmFpdE1hcEZyb20obW9uc3Rlci5yZWFjdGlvbnMpO1xuICAgICAgICBzdGF0YmxvY2subGVnZW5kYXJ5X2FjdGlvbnMgPSB0cmFpdE1hcEZyb20obW9uc3Rlci5sZWdlbmRhcnlfYWN0aW9ucyk7ICovXG5cbiAgICAgICAgcmV0dXJuIFttb25zdGVyLm5hbWUsIG1vbnN0ZXJdO1xuICAgIH0pXG4pO1xuIiwgImltcG9ydCB7IEFwcCwgQnV0dG9uQ29tcG9uZW50LCBNb2RhbCB9IGZyb20gXCJvYnNpZGlhblwiO1xuaW1wb3J0IHsgTGF5b3V0NWUgfSBmcm9tIFwic3JjL2xheW91dHMvYmFzaWM1ZVwiO1xuaW1wb3J0IHsgTWFya2Rvd25SZW5kZXJDaGlsZCB9IGZyb20gXCJvYnNpZGlhblwiO1xuaW1wb3J0IHR5cGUgeyBNb25zdGVyIH0gZnJvbSBcIkB0eXBlc1wiO1xuXG5pbXBvcnQgU3RhdGJsb2NrIGZyb20gXCIuL1N0YXRibG9jay5zdmVsdGVcIjtcbmltcG9ydCB0eXBlIFN0YXRCbG9ja1BsdWdpbiBmcm9tIFwic3JjL21haW5cIjtcblxuaW1wb3J0IGZhc3RDb3B5IGZyb20gXCJmYXN0LWNvcHlcIjtcbmltcG9ydCB0eXBlIHsgTGF5b3V0IH0gZnJvbSBcInNyYy9sYXlvdXRzL3R5cGVzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFN0YXRCbG9ja1JlbmRlcmVyIGV4dGVuZHMgTWFya2Rvd25SZW5kZXJDaGlsZCB7XG4gICAgdG9wQmFyOiBIVE1MRGl2RWxlbWVudDtcbiAgICBib3R0b21CYXI6IEhUTUxEaXZFbGVtZW50O1xuICAgIGxvYWRlZDogYm9vbGVhbiA9IGZhbHNlO1xuICAgIHN0YXRibG9ja0VsOiBIVE1MRGl2RWxlbWVudDtcbiAgICBjb250ZW50RWw6IEhUTUxEaXZFbGVtZW50O1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBjb250YWluZXI6IEhUTUxFbGVtZW50LFxuICAgICAgICBtb25zdGVyOiBNb25zdGVyLFxuICAgICAgICBwbHVnaW46IFN0YXRCbG9ja1BsdWdpbixcbiAgICAgICAgY2FuU2F2ZTogYm9vbGVhbixcbiAgICAgICAgY29udGV4dDogc3RyaW5nLFxuICAgICAgICBsYXlvdXQ6IExheW91dCA9IExheW91dDVlXG4gICAgKSB7XG4gICAgICAgIHN1cGVyKGNvbnRhaW5lcik7XG5cbiAgICAgICAgY29uc3Qgc3RhdGJsb2NrID0gbmV3IFN0YXRibG9jayh7XG4gICAgICAgICAgICB0YXJnZXQ6IHRoaXMuY29udGFpbmVyRWwsXG4gICAgICAgICAgICBwcm9wczoge1xuICAgICAgICAgICAgICAgIGNvbnRleHQsXG4gICAgICAgICAgICAgICAgbW9uc3RlcixcbiAgICAgICAgICAgICAgICBzdGF0YmxvY2s6IGxheW91dC5ibG9ja3MsXG4gICAgICAgICAgICAgICAgbGF5b3V0OiBsYXlvdXQubmFtZSxcbiAgICAgICAgICAgICAgICBwbHVnaW4sXG4gICAgICAgICAgICAgICAgcmVuZGVyZXI6IHRoaXMsXG4gICAgICAgICAgICAgICAgY2FuU2F2ZVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgc3RhdGJsb2NrLiRvbihcInNhdmVcIiwgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIHBsdWdpbi5iZXN0aWFyeS5oYXMobW9uc3Rlci5uYW1lKSAmJlxuICAgICAgICAgICAgICAgICEoYXdhaXQgY29uZmlybVdpdGhNb2RhbChcbiAgICAgICAgICAgICAgICAgICAgcGx1Z2luLmFwcCxcbiAgICAgICAgICAgICAgICAgICAgXCJUaGlzIHdpbGwgb3ZlcndyaXRlIGFuIGV4aXN0aW5nIG1vbnN0ZXIgaW4gc2V0dGluZ3MuIEFyZSB5b3Ugc3VyZT9cIlxuICAgICAgICAgICAgICAgICkpXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgcGx1Z2luLnNhdmVNb25zdGVyKHtcbiAgICAgICAgICAgICAgICAuLi5mYXN0Q29weShtb25zdGVyKSxcbiAgICAgICAgICAgICAgICBzb3VyY2U6IFwiSG9tZWJyZXdcIixcbiAgICAgICAgICAgICAgICBsYXlvdXQ6IGxheW91dC5uYW1lXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgc3RhdGJsb2NrLiRvbihcImV4cG9ydFwiLCAoKSA9PiB7XG4gICAgICAgICAgICBwbHVnaW4uZXhwb3J0QXNQbmcoXG4gICAgICAgICAgICAgICAgbW9uc3Rlci5uYW1lLFxuICAgICAgICAgICAgICAgIHRoaXMuY29udGFpbmVyRWwuZmlyc3RFbGVtZW50Q2hpbGRcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNvbmZpcm1XaXRoTW9kYWwoXG4gICAgYXBwOiBBcHAsXG4gICAgdGV4dDogc3RyaW5nLFxuICAgIGJ1dHRvbnM6IHsgY3RhOiBzdHJpbmc7IHNlY29uZGFyeTogc3RyaW5nIH0gPSB7XG4gICAgICAgIGN0YTogXCJZZXNcIixcbiAgICAgICAgc2Vjb25kYXJ5OiBcIk5vXCJcbiAgICB9XG4pOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBjb25zdCBtb2RhbCA9IG5ldyBDb25maXJtTW9kYWwoYXBwLCB0ZXh0LCBidXR0b25zKTtcbiAgICAgICAgbW9kYWwub25DbG9zZSA9ICgpID0+IHtcbiAgICAgICAgICAgIHJlc29sdmUobW9kYWwuY29uZmlybWVkKTtcbiAgICAgICAgfTtcbiAgICAgICAgbW9kYWwub3BlbigpO1xuICAgIH0pO1xufVxuXG5leHBvcnQgY2xhc3MgQ29uZmlybU1vZGFsIGV4dGVuZHMgTW9kYWwge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBhcHA6IEFwcCxcbiAgICAgICAgcHVibGljIHRleHQ6IHN0cmluZyxcbiAgICAgICAgcHVibGljIGJ1dHRvbnM6IHsgY3RhOiBzdHJpbmc7IHNlY29uZGFyeTogc3RyaW5nIH1cbiAgICApIHtcbiAgICAgICAgc3VwZXIoYXBwKTtcbiAgICB9XG4gICAgY29uZmlybWVkOiBib29sZWFuID0gZmFsc2U7XG4gICAgYXN5bmMgZGlzcGxheSgpIHtcbiAgICAgICAgbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgICAgICAgIHRoaXMuY29udGVudEVsLmVtcHR5KCk7XG4gICAgICAgICAgICB0aGlzLmNvbnRlbnRFbC5hZGRDbGFzcyhcImNvbmZpcm0tbW9kYWxcIik7XG4gICAgICAgICAgICB0aGlzLmNvbnRlbnRFbC5jcmVhdGVFbChcInBcIiwge1xuICAgICAgICAgICAgICAgIHRleHQ6IHRoaXMudGV4dFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb25zdCBidXR0b25FbCA9IHRoaXMuY29udGVudEVsLmNyZWF0ZURpdihcbiAgICAgICAgICAgICAgICBcImZhbnRhc3ktY2FsZW5kYXItY29uZmlybS1idXR0b25zXCJcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBuZXcgQnV0dG9uQ29tcG9uZW50KGJ1dHRvbkVsKVxuICAgICAgICAgICAgICAgIC5zZXRCdXR0b25UZXh0KHRoaXMuYnV0dG9ucy5jdGEpXG4gICAgICAgICAgICAgICAgLnNldEN0YSgpXG4gICAgICAgICAgICAgICAgLm9uQ2xpY2soKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbmZpcm1lZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIG5ldyBCdXR0b25Db21wb25lbnQoYnV0dG9uRWwpXG4gICAgICAgICAgICAgICAgLnNldEJ1dHRvblRleHQodGhpcy5idXR0b25zLnNlY29uZGFyeSlcbiAgICAgICAgICAgICAgICAub25DbGljaygoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIG9uT3BlbigpIHtcbiAgICAgICAgdGhpcy5kaXNwbGF5KCk7XG4gICAgfVxufVxuIiwgImltcG9ydCB0eXBlIHsgVHJhaXQgfSBmcm9tIFwiQHR5cGVzXCI7XG5leHBvcnQgZnVuY3Rpb24gdG9UaXRsZUNhc2Uoc3RyOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiBzdHJbMF0udG9VcHBlckNhc2UoKSArIHN0ci5zbGljZSgxKS50b0xvd2VyQ2FzZSgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbmFub2lkKCkge1xuICAgIHJldHVybiBcInh5eHl4eXh5eHl4eVwiLnJlcGxhY2UoL1t4eV0vZywgZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgdmFyIHIgPSAoTWF0aC5yYW5kb20oKSAqIDE2KSB8IDAsXG4gICAgICAgICAgICB2ID0gYyA9PSBcInhcIiA/IHIgOiAociAmIDB4MykgfCAweDg7XG4gICAgICAgIHJldHVybiB2LnRvU3RyaW5nKDE2KTtcbiAgICB9KTtcbn1cblxuLyoqIEdldCBNb2RpZmllciBmb3IgQWJpbGl0eSBTY29yZSAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldE1vZChhcmcwOiBudW1iZXIpIHtcbiAgICBsZXQgbW9kID0gTWF0aC5mbG9vcigoKGFyZzAgPz8gMTApIC0gMTApIC8gMik7XG4gICAgcmV0dXJuIGAke21vZCA+PSAwID8gXCIrXCIgOiBcIi1cIn0ke01hdGguYWJzKG1vZCl9YDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRyYWl0TWFwRnJvbSh0cmFpdHM6IFRyYWl0W10gPSBbXSk6IE1hcDxzdHJpbmcsIFRyYWl0PiB7XG4gICAgcmV0dXJuIG5ldyBNYXAodHJhaXRzLm1hcCgodCkgPT4gW3QubmFtZSwgdF0pKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN0cmluZ2lmeShcbiAgICBwcm9wZXJ0eTogUmVjb3JkPHN0cmluZywgYW55PiB8IHN0cmluZyB8IGFueVtdIHwgbnVtYmVyIHwgYm9vbGVhbixcbiAgICBkZXB0aDogbnVtYmVyID0gMCxcbiAgICBqb2luZXI6IHN0cmluZyA9IFwiIFwiLFxuICAgIHBhcmVucyA9IHRydWVcbik6IHN0cmluZyB7XG4gICAgY29uc3QgcmV0ID0gW107XG4gICAgaWYgKGRlcHRoID09IDUpIHtcbiAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgfVxuICAgIGlmIChwcm9wZXJ0eSA9PSBudWxsKSByZXR1cm4gYGA7XG4gICAgaWYgKHR5cGVvZiBwcm9wZXJ0eSA9PSBcInN0cmluZ1wiKSByZXR1cm4gcHJvcGVydHk7XG4gICAgaWYgKHR5cGVvZiBwcm9wZXJ0eSA9PSBcIm51bWJlclwiKSByZXR1cm4gYCR7cHJvcGVydHl9YDtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShwcm9wZXJ0eSkpIHtcbiAgICAgICAgcmV0LnB1c2goXG4gICAgICAgICAgICBgJHtwYXJlbnMgPyBcIihcIiA6IFwiXCJ9JHtwcm9wZXJ0eVxuICAgICAgICAgICAgICAgIC5tYXAoKHApID0+IHN0cmluZ2lmeShwLCBkZXB0aCsrKSlcbiAgICAgICAgICAgICAgICAuam9pbihqb2luZXIpfSR7cGFyZW5zID8gXCIpXCIgOiBcIlwifWBcbiAgICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBwcm9wZXJ0eSA9PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIGZvciAoY29uc3QgdmFsdWUgb2YgT2JqZWN0LnZhbHVlcyhwcm9wZXJ0eSkpIHtcbiAgICAgICAgICAgIHJldC5wdXNoKHN0cmluZ2lmeSh2YWx1ZSwgZGVwdGgrKykpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXQuam9pbihcIiBcIik7XG59XG5leHBvcnQgY29uc3Qgc3RyaW5naWZ5V2l0aEtleXMgPSAoXG4gICAgcHJvcGVydHk6IFJlY29yZDxzdHJpbmcsIGFueT4gfCBzdHJpbmcgfCBhbnlbXSB8IG51bWJlciB8IGJvb2xlYW4sXG4gICAgZGVwdGg6IG51bWJlciA9IDBcbik6IHN0cmluZyA9PiB7XG4gICAgY29uc3QgcmV0ID0gW107XG4gICAgaWYgKGRlcHRoID09IDUpIHtcbiAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgfVxuICAgIGlmICghcHJvcGVydHkgfHwgcHJvcGVydHkgPT0gbnVsbCkgcmV0dXJuIGBgO1xuICAgIGlmICh0eXBlb2YgcHJvcGVydHkgPT0gXCJzdHJpbmdcIikgcmV0dXJuIHByb3BlcnR5O1xuICAgIGlmICh0eXBlb2YgcHJvcGVydHkgPT0gXCJudW1iZXJcIikgcmV0dXJuIGAke3Byb3BlcnR5fWA7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkocHJvcGVydHkpKSB7XG4gICAgICAgIHJldC5wdXNoKFxuICAgICAgICAgICAgYCR7cHJvcGVydHkubWFwKChwKSA9PiBzdHJpbmdpZnlXaXRoS2V5cyhwLCBkZXB0aCsrKSkuam9pbihcIiBcIil9YFxuICAgICAgICApO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHByb3BlcnR5ID09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMocHJvcGVydHkpKSB7XG4gICAgICAgICAgICByZXQucHVzaChcbiAgICAgICAgICAgICAgICBzdHJpbmdpZnlXaXRoS2V5cyhrZXksIGRlcHRoKyspLFxuICAgICAgICAgICAgICAgIHN0cmluZ2lmeVdpdGhLZXlzKHZhbHVlLCBkZXB0aCsrKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmV0LmpvaW4oXCIgXCIpO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIHRyYW5zZm9ybVRyYWl0cyhcbiAgICBtb25zdGVyVHJhaXRzOiBUcmFpdFtdID0gW10sXG4gICAgcGFyYW1zVHJhaXRzOiB7IGRlc2M6IHN0cmluZzsgbmFtZTogc3RyaW5nIH1bXSB8IFtzdHJpbmcsIHN0cmluZ11bXSA9IFtdXG4pIHtcbiAgICBpZiAoIW1vbnN0ZXJUcmFpdHMpIG1vbnN0ZXJUcmFpdHMgPSBbXTtcbiAgICBpZiAoIXBhcmFtc1RyYWl0cykgcGFyYW1zVHJhaXRzID0gW107XG4gICAgZm9yIChjb25zdCB0cmFpdCBvZiBwYXJhbXNUcmFpdHMgPz8gW10pIHtcbiAgICAgICAgaWYgKCF0cmFpdCkgY29udGludWU7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHRyYWl0KSkge1xuICAgICAgICAgICAgbGV0IGRlc2MgPSBzdHJpbmdpZnlXaXRoS2V5cyh0cmFpdC5zbGljZSgxKSk7XG4gICAgICAgICAgICBtb25zdGVyVHJhaXRzID0gbW9uc3RlclRyYWl0cy5maWx0ZXIoXG4gICAgICAgICAgICAgICAgKHQpID0+IHQubmFtZSAhPSB0cmFpdFswXSAmJiB0LmRlc2MgIT0gZGVzY1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIG1vbnN0ZXJUcmFpdHMucHVzaCh7XG4gICAgICAgICAgICAgICAgbmFtZTogdHJhaXRbMF0sXG4gICAgICAgICAgICAgICAgZGVzY1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgICB0eXBlb2YgdHJhaXQgPT0gXCJvYmplY3RcIiAmJlxuICAgICAgICAgICAgKFwibmFtZVwiIGluIHRyYWl0IHx8IFwiZGVzY1wiIGluIHRyYWl0KVxuICAgICAgICApIHtcbiAgICAgICAgICAgIG1vbnN0ZXJUcmFpdHMgPSBtb25zdGVyVHJhaXRzLmZpbHRlcihcbiAgICAgICAgICAgICAgICAodCkgPT4gdC5uYW1lICE9IHRyYWl0Lm5hbWUgfHwgdC5kZXNjICE9IHRyYWl0LmRlc2NcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBtb25zdGVyVHJhaXRzLnB1c2goe1xuICAgICAgICAgICAgICAgIG5hbWU6IHRyYWl0Lm5hbWUsXG4gICAgICAgICAgICAgICAgZGVzYzogc3RyaW5naWZ5V2l0aEtleXModHJhaXQuZGVzYylcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBtb25zdGVyVHJhaXRzO1xufVxuIiwgImltcG9ydCB7IG5hbm9pZCB9IGZyb20gXCJzcmMvdXRpbC91dGlsXCI7XG5pbXBvcnQgdHlwZSB7IExheW91dCwgU3RhdGJsb2NrSXRlbSB9IGZyb20gXCIuL3R5cGVzXCI7XG5cbmV4cG9ydCBjb25zdCBTdGF0YmxvY2s1ZTogU3RhdGJsb2NrSXRlbVtdID0gW1xuICAgIHtcbiAgICAgICAgdHlwZTogXCJpbmxpbmVcIixcbiAgICAgICAgaWQ6IG5hbm9pZCgpLFxuICAgICAgICBwcm9wZXJ0aWVzOiBbXSxcbiAgICAgICAgaGFzUnVsZTogdHJ1ZSxcbiAgICAgICAgbmVzdGVkOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJncm91cFwiLFxuICAgICAgICAgICAgICAgIGlkOiBuYW5vaWQoKSxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOiBbXCJuYW1lXCIsIFwic2l6ZVwiLCBcInR5cGVcIiwgXCJzdWJ0eXBlXCIsIFwiYWxpZ25tZW50XCJdLFxuICAgICAgICAgICAgICAgIG5lc3RlZDogW1xuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImhlYWRpbmdcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBuYW5vaWQoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6IFtcIm5hbWVcIl0sXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25kaXRpb25lZDogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInN1YmhlYWRpbmdcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBuYW5vaWQoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6IFtcInNpemVcIiwgXCJ0eXBlXCIsIFwic3VidHlwZVwiLCBcImFsaWdubWVudFwiXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmRpdGlvbmVkOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIGNvbmRpdGlvbmVkOiB0cnVlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHR5cGU6IFwiaW1hZ2VcIixcbiAgICAgICAgICAgICAgICBpZDogbmFub2lkKCksXG4gICAgICAgICAgICAgICAgcHJvcGVydGllczogW1wiaW1hZ2VcIl1cbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH0sXG5cbiAgICB7XG4gICAgICAgIHR5cGU6IFwiZ3JvdXBcIixcbiAgICAgICAgaWQ6IG5hbm9pZCgpLFxuICAgICAgICBwcm9wZXJ0aWVzOiBbXCJhY1wiLCBcImhwXCIsIFwic3BlZWRcIl0sXG4gICAgICAgIG5lc3RlZDogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHR5cGU6IFwicHJvcGVydHlcIixcbiAgICAgICAgICAgICAgICBpZDogbmFub2lkKCksXG4gICAgICAgICAgICAgICAgcHJvcGVydGllczogW1wiYWNcIl0sXG4gICAgICAgICAgICAgICAgZGlzcGxheTogXCJBcm1vciBDbGFzc1wiLFxuICAgICAgICAgICAgICAgIGNvbmRpdGlvbmVkOiB0cnVlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHR5cGU6IFwicHJvcGVydHlcIixcbiAgICAgICAgICAgICAgICBpZDogbmFub2lkKCksXG4gICAgICAgICAgICAgICAgcHJvcGVydGllczogW1wiaHBcIl0sXG4gICAgICAgICAgICAgICAgZGlzcGxheTogXCJIaXQgUG9pbnRzXCIsXG4gICAgICAgICAgICAgICAgZGljZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBkaWNlUHJvcGVydHk6IFwiaGl0X2RpY2VcIixcbiAgICAgICAgICAgICAgICBkaWNlQ2FsbGJhY2s6IGByZXR1cm4gW3sgdGV4dDogbW9uc3RlcltcImhpdF9kaWNlXCJdIH1dYCxcbiAgICAgICAgICAgICAgICBjb25kaXRpb25lZDogdHJ1ZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcInByb3BlcnR5XCIsXG4gICAgICAgICAgICAgICAgaWQ6IG5hbm9pZCgpLFxuICAgICAgICAgICAgICAgIGRpc3BsYXk6IFwiU3BlZWRcIixcbiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOiBbXCJzcGVlZFwiXSxcbiAgICAgICAgICAgICAgICBjb25kaXRpb25lZDogdHJ1ZVxuICAgICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBoYXNSdWxlOiB0cnVlLFxuICAgICAgICBjb25kaXRpb25lZDogdHJ1ZVxuICAgIH0sXG5cbiAgICB7XG4gICAgICAgIHR5cGU6IFwidGFibGVcIixcbiAgICAgICAgaWQ6IG5hbm9pZCgpLFxuICAgICAgICBwcm9wZXJ0aWVzOiBbXCJzdGF0c1wiXSxcbiAgICAgICAgaGVhZGVyczogW1wiU3RyXCIsIFwiRGV4XCIsIFwiQ29uXCIsIFwiSW50XCIsIFwiV2lzXCIsIFwiQ2hhXCJdLFxuICAgICAgICBjYWxjdWxhdGU6IHRydWUsXG4gICAgICAgIGhhc1J1bGU6IHRydWUsXG4gICAgICAgIGNvbmRpdGlvbmVkOiB0cnVlXG4gICAgfSxcbiAgICB7XG4gICAgICAgIHR5cGU6IFwidGFibGVcIixcbiAgICAgICAgaWQ6IG5hbm9pZCgpLFxuICAgICAgICBwcm9wZXJ0aWVzOiBbXCJmYWdlX3N0YXRzXCJdLFxuICAgICAgICBoZWFkZXJzOiBbXCJBY2N1cmFjeVwiLCBcIkNvbW11bmljYXRpb25cIiwgXCJDb25zdGl0dXRpb25cIiwgXCJEZXh0ZXJpdHlcIiwgXCJGaWdodGluZ1wiLCBcIkludGVsbGlnZW5jZVwiLCBcIlBlcmNlcHRpb25cIiwgXCJTdHJlbmd0aFwiLCBcIldpbGxwb3dlclwiXSxcbiAgICAgICAgY2FsY3VsYXRlOiBmYWxzZSxcbiAgICAgICAgaGFzUnVsZTogdHJ1ZSxcbiAgICAgICAgY29uZGl0aW9uZWQ6IHRydWVcbiAgICB9LFxuXG4gICAge1xuICAgICAgICB0eXBlOiBcImdyb3VwXCIsXG4gICAgICAgIGlkOiBuYW5vaWQoKSxcbiAgICAgICAgcHJvcGVydGllczogW1xuICAgICAgICAgICAgXCJzYXZlc1wiLFxuICAgICAgICAgICAgXCJza2lsbHNhdmVzXCIsXG4gICAgICAgICAgICBcImRhbWFnZV9pbW11bml0aWVzXCIsXG4gICAgICAgICAgICBcImRhbWFnZV9yZXNpc3RhbmNlc1wiLFxuICAgICAgICAgICAgXCJkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzXCIsXG4gICAgICAgICAgICBcImNvbmRpdGlvbl9pbW11bml0aWVzXCIsXG4gICAgICAgICAgICBcImNyXCIsXG4gICAgICAgICAgICBcImxhbmd1YWdlc1wiLFxuICAgICAgICAgICAgXCJzZW5zZXNcIlxuICAgICAgICBdLFxuICAgICAgICBuZXN0ZWQ6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcInNhdmVzXCIsXG4gICAgICAgICAgICAgICAgaWQ6IG5hbm9pZCgpLFxuICAgICAgICAgICAgICAgIGRpc3BsYXk6IFwiU2F2ZXNcIixcbiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOiBbXCJzYXZlc1wiXSxcbiAgICAgICAgICAgICAgICBjb25kaXRpb25lZDogdHJ1ZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcInNhdmVzXCIsXG4gICAgICAgICAgICAgICAgaWQ6IG5hbm9pZCgpLFxuICAgICAgICAgICAgICAgIGRpc3BsYXk6IFwiU2tpbGxzXCIsXG4gICAgICAgICAgICAgICAgcHJvcGVydGllczogW1wic2tpbGxzYXZlc1wiXSxcbiAgICAgICAgICAgICAgICBjb25kaXRpb25lZDogdHJ1ZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcInByb3BlcnR5XCIsXG4gICAgICAgICAgICAgICAgaWQ6IG5hbm9pZCgpLFxuICAgICAgICAgICAgICAgIGRpc3BsYXk6IFwiRGFtYWdlIFJlc2lzdGFuY2VzXCIsXG4gICAgICAgICAgICAgICAgcHJvcGVydGllczogW1wiZGFtYWdlX3Jlc2lzdGFuY2VzXCJdLFxuICAgICAgICAgICAgICAgIGNvbmRpdGlvbmVkOiB0cnVlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHR5cGU6IFwicHJvcGVydHlcIixcbiAgICAgICAgICAgICAgICBpZDogbmFub2lkKCksXG4gICAgICAgICAgICAgICAgZGlzcGxheTogXCJEYW1hZ2UgSW1tdW5pdGllc1wiLFxuICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6IFtcImRhbWFnZV9pbW11bml0aWVzXCJdLFxuICAgICAgICAgICAgICAgIGNvbmRpdGlvbmVkOiB0cnVlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHR5cGU6IFwicHJvcGVydHlcIixcbiAgICAgICAgICAgICAgICBpZDogbmFub2lkKCksXG4gICAgICAgICAgICAgICAgZGlzcGxheTogXCJDb25kaXRpb24gSW1tdW5pdGllc1wiLFxuICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6IFtcImNvbmRpdGlvbl9pbW11bml0aWVzXCJdLFxuICAgICAgICAgICAgICAgIGNvbmRpdGlvbmVkOiB0cnVlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHR5cGU6IFwicHJvcGVydHlcIixcbiAgICAgICAgICAgICAgICBpZDogbmFub2lkKCksXG4gICAgICAgICAgICAgICAgZGlzcGxheTogXCJEYW1hZ2UgVnVsbmVyYWJpbGl0aWVzXCIsXG4gICAgICAgICAgICAgICAgcHJvcGVydGllczogW1wiZGFtYWdlX3Z1bG5lcmFiaWxpdGllc1wiXSxcbiAgICAgICAgICAgICAgICBjb25kaXRpb25lZDogdHJ1ZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcInByb3BlcnR5XCIsXG4gICAgICAgICAgICAgICAgaWQ6IG5hbm9pZCgpLFxuICAgICAgICAgICAgICAgIGRpc3BsYXk6IFwiU2Vuc2VzXCIsXG4gICAgICAgICAgICAgICAgcHJvcGVydGllczogW1wic2Vuc2VzXCJdLFxuICAgICAgICAgICAgICAgIGNvbmRpdGlvbmVkOiB0cnVlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHR5cGU6IFwicHJvcGVydHlcIixcbiAgICAgICAgICAgICAgICBpZDogbmFub2lkKCksXG4gICAgICAgICAgICAgICAgZGlzcGxheTogXCJMYW5ndWFnZXNcIixcbiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOiBbXCJsYW5ndWFnZXNcIl0sXG4gICAgICAgICAgICAgICAgZmFsbGJhY2s6IFwiLVwiXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHR5cGU6IFwiaW5saW5lXCIsXG4gICAgICAgICAgICAgICAgaWQ6IG5hbm9pZCgpLFxuICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6IFtdLFxuICAgICAgICAgICAgICAgIGNvbmRpdGlvbmVkOiB0cnVlLFxuICAgICAgICAgICAgICAgIG5lc3RlZDogW1xuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInByb3BlcnR5XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogbmFub2lkKCksXG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBcIkNoYWxsZW5nZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvcGVydGllczogW1wiY3JcIl0sXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjazogYGNvbnN0IENSID0ge1xuICAgIFwiMFwiOiB7XG4gICAgICAgIGNyOiBcIjBcIixcbiAgICAgICAgdmFsdWU6IDAsXG4gICAgICAgIHhwOiAwXG4gICAgfSxcbiAgICBcIjEvOFwiOiB7XG4gICAgICAgIGNyOiBcIjEvOFwiLFxuICAgICAgICB2YWx1ZTogMC4xMjUsXG4gICAgICAgIHhwOiAyNVxuICAgIH0sXG4gICAgXCIxLzRcIjoge1xuICAgICAgICBjcjogXCIxLzRcIixcblxuICAgICAgICB2YWx1ZTogMC4yNSxcbiAgICAgICAgeHA6IDUwXG4gICAgfSxcbiAgICBcIjEvMlwiOiB7XG4gICAgICAgIGNyOiBcIjEvMlwiLFxuICAgICAgICB2YWx1ZTogMC41LFxuICAgICAgICB4cDogMTAwXG4gICAgfSxcbiAgICBcIjAuMTI1XCI6IHtcbiAgICAgICAgY3I6IFwiMS84XCIsXG4gICAgICAgIHZhbHVlOiAwLjEyNSxcbiAgICAgICAgeHA6IDI1XG4gICAgfSxcbiAgICBcIjAuMjVcIjoge1xuICAgICAgICBjcjogXCIxLzRcIixcblxuICAgICAgICB2YWx1ZTogMC4yNSxcbiAgICAgICAgeHA6IDUwXG4gICAgfSxcbiAgICBcIjAuNVwiOiB7XG4gICAgICAgIGNyOiBcIjEvMlwiLFxuICAgICAgICB2YWx1ZTogMC41LFxuICAgICAgICB4cDogMTAwXG4gICAgfSxcbiAgICBcIjFcIjoge1xuICAgICAgICBjcjogXCIxXCIsXG4gICAgICAgIHZhbHVlOiAxLFxuICAgICAgICB4cDogMjAwXG4gICAgfSxcbiAgICBcIjJcIjoge1xuICAgICAgICBjcjogXCIyXCIsXG4gICAgICAgIHZhbHVlOiAyLFxuICAgICAgICB4cDogNDUwXG4gICAgfSxcbiAgICBcIjNcIjoge1xuICAgICAgICBjcjogXCIzXCIsXG4gICAgICAgIHZhbHVlOiAzLFxuICAgICAgICB4cDogNzAwXG4gICAgfSxcbiAgICBcIjRcIjoge1xuICAgICAgICBjcjogXCI0XCIsXG4gICAgICAgIHZhbHVlOiA0LFxuICAgICAgICB4cDogMTEwMFxuICAgIH0sXG4gICAgXCI1XCI6IHtcbiAgICAgICAgY3I6IFwiNVwiLFxuICAgICAgICB2YWx1ZTogNSxcbiAgICAgICAgeHA6IDE4MDBcbiAgICB9LFxuICAgIFwiNlwiOiB7XG4gICAgICAgIGNyOiBcIjZcIixcbiAgICAgICAgdmFsdWU6IDYsXG4gICAgICAgIHhwOiAyMzAwXG4gICAgfSxcbiAgICBcIjdcIjoge1xuICAgICAgICBjcjogXCI3XCIsXG4gICAgICAgIHZhbHVlOiA3LFxuICAgICAgICB4cDogMjkwMFxuICAgIH0sXG4gICAgXCI4XCI6IHtcbiAgICAgICAgY3I6IFwiOFwiLFxuICAgICAgICB2YWx1ZTogOCxcbiAgICAgICAgeHA6IDM5MDBcbiAgICB9LFxuICAgIFwiOVwiOiB7XG4gICAgICAgIGNyOiBcIjlcIixcbiAgICAgICAgdmFsdWU6IDksXG4gICAgICAgIHhwOiA1MDAwXG4gICAgfSxcbiAgICBcIjEwXCI6IHtcbiAgICAgICAgY3I6IFwiMTBcIixcbiAgICAgICAgdmFsdWU6IDEwLFxuICAgICAgICB4cDogNTkwMFxuICAgIH0sXG4gICAgXCIxMVwiOiB7XG4gICAgICAgIGNyOiBcIjExXCIsXG4gICAgICAgIHZhbHVlOiAxMSxcbiAgICAgICAgeHA6IDcyMDBcbiAgICB9LFxuICAgIFwiMTJcIjoge1xuICAgICAgICBjcjogXCIxMlwiLFxuICAgICAgICB2YWx1ZTogMTIsXG4gICAgICAgIHhwOiA4NDAwXG4gICAgfSxcbiAgICBcIjEzXCI6IHtcbiAgICAgICAgY3I6IFwiMTNcIixcbiAgICAgICAgdmFsdWU6IDEzLFxuICAgICAgICB4cDogMTAwMDBcbiAgICB9LFxuICAgIFwiMTRcIjoge1xuICAgICAgICBjcjogXCIxNFwiLFxuICAgICAgICB2YWx1ZTogMTQsXG4gICAgICAgIHhwOiAxMTUwMFxuICAgIH0sXG4gICAgXCIxNVwiOiB7XG4gICAgICAgIGNyOiBcIjE1XCIsXG4gICAgICAgIHZhbHVlOiAxNSxcbiAgICAgICAgeHA6IDEzMDAwXG4gICAgfSxcbiAgICBcIjE2XCI6IHtcbiAgICAgICAgY3I6IFwiMTZcIixcbiAgICAgICAgdmFsdWU6IDE2LFxuICAgICAgICB4cDogMTUwMDBcbiAgICB9LFxuICAgIFwiMTdcIjoge1xuICAgICAgICBjcjogXCIxN1wiLFxuICAgICAgICB2YWx1ZTogMTcsXG4gICAgICAgIHhwOiAxODAwMFxuICAgIH0sXG4gICAgXCIxOFwiOiB7XG4gICAgICAgIGNyOiBcIjE4XCIsXG4gICAgICAgIHZhbHVlOiAxOCxcbiAgICAgICAgeHA6IDIwMDAwXG4gICAgfSxcbiAgICBcIjE5XCI6IHtcbiAgICAgICAgY3I6IFwiMTlcIixcbiAgICAgICAgdmFsdWU6IDE5LFxuICAgICAgICB4cDogMjIwMDBcbiAgICB9LFxuICAgIFwiMjBcIjoge1xuICAgICAgICBjcjogXCIyMFwiLFxuICAgICAgICB2YWx1ZTogMjAsXG4gICAgICAgIHhwOiAyNTAwMFxuICAgIH0sXG4gICAgXCIyMVwiOiB7XG4gICAgICAgIGNyOiBcIjIxXCIsXG4gICAgICAgIHZhbHVlOiAyMSxcbiAgICAgICAgeHA6IDMzMDAwXG4gICAgfSxcbiAgICBcIjIyXCI6IHtcbiAgICAgICAgY3I6IFwiMjJcIixcbiAgICAgICAgdmFsdWU6IDIyLFxuICAgICAgICB4cDogNDEwMDBcbiAgICB9LFxuICAgIFwiMjNcIjoge1xuICAgICAgICBjcjogXCIyM1wiLFxuICAgICAgICB2YWx1ZTogMjMsXG4gICAgICAgIHhwOiA1MDAwMFxuICAgIH0sXG4gICAgXCIyNFwiOiB7XG4gICAgICAgIGNyOiBcIjI0XCIsXG4gICAgICAgIHZhbHVlOiAyNCxcbiAgICAgICAgeHA6IDYyMDAwXG4gICAgfSxcbiAgICBcIjI1XCI6IHtcbiAgICAgICAgY3I6IFwiMjVcIixcbiAgICAgICAgdmFsdWU6IDI1LFxuICAgICAgICB4cDogNzUwMDBcbiAgICB9LFxuICAgIFwiMjZcIjoge1xuICAgICAgICBjcjogXCIyNlwiLFxuICAgICAgICB2YWx1ZTogMjYsXG4gICAgICAgIHhwOiA5MDAwMFxuICAgIH0sXG4gICAgXCIyN1wiOiB7XG4gICAgICAgIGNyOiBcIjI3XCIsXG4gICAgICAgIHZhbHVlOiAyNyxcbiAgICAgICAgeHA6IDEwNTAwMFxuICAgIH0sXG4gICAgXCIyOFwiOiB7XG4gICAgICAgIGNyOiBcIjI4XCIsXG4gICAgICAgIHZhbHVlOiAyOCxcbiAgICAgICAgeHA6IDEyMDAwMFxuICAgIH0sXG4gICAgXCIyOVwiOiB7XG4gICAgICAgIGNyOiBcIjI5XCIsXG4gICAgICAgIHZhbHVlOiAyOSxcbiAgICAgICAgeHA6IDEzNTAwMFxuICAgIH0sXG4gICAgXCIzMFwiOiB7XG4gICAgICAgIGNyOiBcIjMwXCIsXG4gICAgICAgIHZhbHVlOiAzMCxcbiAgICAgICAgeHA6IDE1NTAwMFxuICAgIH1cbn07ICAgICAgICAgICAgICAgICAgICAgICAgXG5pZiAoXCJjclwiIGluIG1vbnN0ZXIgJiYgbW9uc3Rlci5jciBpbiBDUikge1xuICAgIHJldHVybiBcXGBcXCR7Q1JbXG4gICAgICAgIG1vbnN0ZXIuY3JcbiAgICBdLmNyfSAoXFwke0NSW1xuICAgICAgICBtb25zdGVyLmNyXG4gICAgXS54cC50b0xvY2FsZVN0cmluZygpfSBYUClcXGA7XG59XG5yZXR1cm4gXCJcIjtgXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwicHJvcGVydHlcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBuYW5vaWQoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IFwiUHJvZmljaWVuY3kgQm9udXNcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6IFtcImNyXCJdLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2s6IGBjb25zdCBDUiA9IHtcbiAgICBcIjBcIjoge1xuICAgICAgICBjcjogXCIwXCIsXG4gICAgICAgIHZhbHVlOiAwLFxuICAgICAgICB4cDogMFxuICAgIH0sXG4gICAgXCIxLzhcIjoge1xuICAgICAgICBjcjogXCIxLzhcIixcbiAgICAgICAgdmFsdWU6IDAuMTI1LFxuICAgICAgICB4cDogMjVcbiAgICB9LFxuICAgIFwiMS80XCI6IHtcbiAgICAgICAgY3I6IFwiMS80XCIsXG5cbiAgICAgICAgdmFsdWU6IDAuMjUsXG4gICAgICAgIHhwOiA1MFxuICAgIH0sXG4gICAgXCIxLzJcIjoge1xuICAgICAgICBjcjogXCIxLzJcIixcbiAgICAgICAgdmFsdWU6IDAuNSxcbiAgICAgICAgeHA6IDEwMFxuICAgIH0sXG4gICAgXCIwLjEyNVwiOiB7XG4gICAgICAgIGNyOiBcIjEvOFwiLFxuICAgICAgICB2YWx1ZTogMC4xMjUsXG4gICAgICAgIHhwOiAyNVxuICAgIH0sXG4gICAgXCIwLjI1XCI6IHtcbiAgICAgICAgY3I6IFwiMS80XCIsXG5cbiAgICAgICAgdmFsdWU6IDAuMjUsXG4gICAgICAgIHhwOiA1MFxuICAgIH0sXG4gICAgXCIwLjVcIjoge1xuICAgICAgICBjcjogXCIxLzJcIixcbiAgICAgICAgdmFsdWU6IDAuNSxcbiAgICAgICAgeHA6IDEwMFxuICAgIH0sXG4gICAgXCIxXCI6IHtcbiAgICAgICAgY3I6IFwiMVwiLFxuICAgICAgICB2YWx1ZTogMSxcbiAgICAgICAgeHA6IDIwMFxuICAgIH0sXG4gICAgXCIyXCI6IHtcbiAgICAgICAgY3I6IFwiMlwiLFxuICAgICAgICB2YWx1ZTogMixcbiAgICAgICAgeHA6IDQ1MFxuICAgIH0sXG4gICAgXCIzXCI6IHtcbiAgICAgICAgY3I6IFwiM1wiLFxuICAgICAgICB2YWx1ZTogMyxcbiAgICAgICAgeHA6IDcwMFxuICAgIH0sXG4gICAgXCI0XCI6IHtcbiAgICAgICAgY3I6IFwiNFwiLFxuICAgICAgICB2YWx1ZTogNCxcbiAgICAgICAgeHA6IDExMDBcbiAgICB9LFxuICAgIFwiNVwiOiB7XG4gICAgICAgIGNyOiBcIjVcIixcbiAgICAgICAgdmFsdWU6IDUsXG4gICAgICAgIHhwOiAxODAwXG4gICAgfSxcbiAgICBcIjZcIjoge1xuICAgICAgICBjcjogXCI2XCIsXG4gICAgICAgIHZhbHVlOiA2LFxuICAgICAgICB4cDogMjMwMFxuICAgIH0sXG4gICAgXCI3XCI6IHtcbiAgICAgICAgY3I6IFwiN1wiLFxuICAgICAgICB2YWx1ZTogNyxcbiAgICAgICAgeHA6IDI5MDBcbiAgICB9LFxuICAgIFwiOFwiOiB7XG4gICAgICAgIGNyOiBcIjhcIixcbiAgICAgICAgdmFsdWU6IDgsXG4gICAgICAgIHhwOiAzOTAwXG4gICAgfSxcbiAgICBcIjlcIjoge1xuICAgICAgICBjcjogXCI5XCIsXG4gICAgICAgIHZhbHVlOiA5LFxuICAgICAgICB4cDogNTAwMFxuICAgIH0sXG4gICAgXCIxMFwiOiB7XG4gICAgICAgIGNyOiBcIjEwXCIsXG4gICAgICAgIHZhbHVlOiAxMCxcbiAgICAgICAgeHA6IDU5MDBcbiAgICB9LFxuICAgIFwiMTFcIjoge1xuICAgICAgICBjcjogXCIxMVwiLFxuICAgICAgICB2YWx1ZTogMTEsXG4gICAgICAgIHhwOiA3MjAwXG4gICAgfSxcbiAgICBcIjEyXCI6IHtcbiAgICAgICAgY3I6IFwiMTJcIixcbiAgICAgICAgdmFsdWU6IDEyLFxuICAgICAgICB4cDogODQwMFxuICAgIH0sXG4gICAgXCIxM1wiOiB7XG4gICAgICAgIGNyOiBcIjEzXCIsXG4gICAgICAgIHZhbHVlOiAxMyxcbiAgICAgICAgeHA6IDEwMDAwXG4gICAgfSxcbiAgICBcIjE0XCI6IHtcbiAgICAgICAgY3I6IFwiMTRcIixcbiAgICAgICAgdmFsdWU6IDE0LFxuICAgICAgICB4cDogMTE1MDBcbiAgICB9LFxuICAgIFwiMTVcIjoge1xuICAgICAgICBjcjogXCIxNVwiLFxuICAgICAgICB2YWx1ZTogMTUsXG4gICAgICAgIHhwOiAxMzAwMFxuICAgIH0sXG4gICAgXCIxNlwiOiB7XG4gICAgICAgIGNyOiBcIjE2XCIsXG4gICAgICAgIHZhbHVlOiAxNixcbiAgICAgICAgeHA6IDE1MDAwXG4gICAgfSxcbiAgICBcIjE3XCI6IHtcbiAgICAgICAgY3I6IFwiMTdcIixcbiAgICAgICAgdmFsdWU6IDE3LFxuICAgICAgICB4cDogMTgwMDBcbiAgICB9LFxuICAgIFwiMThcIjoge1xuICAgICAgICBjcjogXCIxOFwiLFxuICAgICAgICB2YWx1ZTogMTgsXG4gICAgICAgIHhwOiAyMDAwMFxuICAgIH0sXG4gICAgXCIxOVwiOiB7XG4gICAgICAgIGNyOiBcIjE5XCIsXG4gICAgICAgIHZhbHVlOiAxOSxcbiAgICAgICAgeHA6IDIyMDAwXG4gICAgfSxcbiAgICBcIjIwXCI6IHtcbiAgICAgICAgY3I6IFwiMjBcIixcbiAgICAgICAgdmFsdWU6IDIwLFxuICAgICAgICB4cDogMjUwMDBcbiAgICB9LFxuICAgIFwiMjFcIjoge1xuICAgICAgICBjcjogXCIyMVwiLFxuICAgICAgICB2YWx1ZTogMjEsXG4gICAgICAgIHhwOiAzMzAwMFxuICAgIH0sXG4gICAgXCIyMlwiOiB7XG4gICAgICAgIGNyOiBcIjIyXCIsXG4gICAgICAgIHZhbHVlOiAyMixcbiAgICAgICAgeHA6IDQxMDAwXG4gICAgfSxcbiAgICBcIjIzXCI6IHtcbiAgICAgICAgY3I6IFwiMjNcIixcbiAgICAgICAgdmFsdWU6IDIzLFxuICAgICAgICB4cDogNTAwMDBcbiAgICB9LFxuICAgIFwiMjRcIjoge1xuICAgICAgICBjcjogXCIyNFwiLFxuICAgICAgICB2YWx1ZTogMjQsXG4gICAgICAgIHhwOiA2MjAwMFxuICAgIH0sXG4gICAgXCIyNVwiOiB7XG4gICAgICAgIGNyOiBcIjI1XCIsXG4gICAgICAgIHZhbHVlOiAyNSxcbiAgICAgICAgeHA6IDc1MDAwXG4gICAgfSxcbiAgICBcIjI2XCI6IHtcbiAgICAgICAgY3I6IFwiMjZcIixcbiAgICAgICAgdmFsdWU6IDI2LFxuICAgICAgICB4cDogOTAwMDBcbiAgICB9LFxuICAgIFwiMjdcIjoge1xuICAgICAgICBjcjogXCIyN1wiLFxuICAgICAgICB2YWx1ZTogMjcsXG4gICAgICAgIHhwOiAxMDUwMDBcbiAgICB9LFxuICAgIFwiMjhcIjoge1xuICAgICAgICBjcjogXCIyOFwiLFxuICAgICAgICB2YWx1ZTogMjgsXG4gICAgICAgIHhwOiAxMjAwMDBcbiAgICB9LFxuICAgIFwiMjlcIjoge1xuICAgICAgICBjcjogXCIyOVwiLFxuICAgICAgICB2YWx1ZTogMjksXG4gICAgICAgIHhwOiAxMzUwMDBcbiAgICB9LFxuICAgIFwiMzBcIjoge1xuICAgICAgICBjcjogXCIzMFwiLFxuICAgICAgICB2YWx1ZTogMzAsXG4gICAgICAgIHhwOiAxNTUwMDBcbiAgICB9XG59OyAgICAgICAgICAgXG5pZiAoXCJjclwiIGluIG1vbnN0ZXIgJiYgbW9uc3Rlci5jciBpbiBDUikge1xuICAgIHJldHVybiBcXGArXFwke01hdGgubWF4KFxuICAgICAgICAgICAgTWF0aC5mbG9vcigyICsgKChDUlttb25zdGVyLmNyXT8udmFsdWUgPz8gMCkgLSAxKSAvIDQpLFxuICAgICAgICAgICAgMlxuICAgICAgICApfVxcYDtcbn1cbnJldHVybiBcIlwiO2BcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgY29uZGl0aW9uZWQ6IHRydWUsXG4gICAgICAgIGhhc1J1bGU6IHRydWVcbiAgICB9LFxuXG4gICAge1xuICAgICAgICB0eXBlOiBcInRyYWl0c1wiLFxuICAgICAgICBpZDogbmFub2lkKCksXG4gICAgICAgIHByb3BlcnRpZXM6IFtcInRyYWl0c1wiXSxcbiAgICAgICAgY29uZGl0aW9uZWQ6IHRydWUsXG4gICAgICAgIGRpY2U6IHRydWVcbiAgICB9LFxuICAgIHtcbiAgICAgICAgdHlwZTogXCJzcGVsbHNcIixcbiAgICAgICAgaWQ6IG5hbm9pZCgpLFxuICAgICAgICBwcm9wZXJ0aWVzOiBbXCJzcGVsbHNcIl0sXG4gICAgICAgIGNvbmRpdGlvbmVkOiB0cnVlLFxuXG4gICAgICAgIGRpY2U6IHRydWVcbiAgICB9LFxuICAgIHtcbiAgICAgICAgdHlwZTogXCJ0ZXh0XCIsXG4gICAgICAgIGlkOiBuYW5vaWQoKSxcbiAgICAgICAgcHJvcGVydGllczogW1wic3BlbGxzTm90ZXNcIl0sXG4gICAgICAgIGNvbmRpdGlvbmVkOiB0cnVlLFxuXG4gICAgICAgIHRleHQ6IG51bGxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgdHlwZTogXCJ0cmFpdHNcIixcbiAgICAgICAgaWQ6IG5hbm9pZCgpLFxuICAgICAgICBwcm9wZXJ0aWVzOiBbXCJhY3Rpb25zXCJdLFxuICAgICAgICBoZWFkaW5nOiBcIkFjdGlvbnNcIixcbiAgICAgICAgY29uZGl0aW9uZWQ6IHRydWUsXG5cbiAgICAgICAgZGljZTogdHJ1ZVxuICAgIH0sXG4gICAge1xuICAgICAgICB0eXBlOiBcInRyYWl0c1wiLFxuICAgICAgICBpZDogbmFub2lkKCksXG4gICAgICAgIHByb3BlcnRpZXM6IFtcImJvbnVzX2FjdGlvbnNcIl0sXG4gICAgICAgIGhlYWRpbmc6IFwiQm9udXMgQWN0aW9uc1wiLFxuICAgICAgICBjb25kaXRpb25lZDogdHJ1ZSxcblxuICAgICAgICBkaWNlOiB0cnVlXG4gICAgfSxcbiAgICB7XG4gICAgICAgIHR5cGU6IFwidHJhaXRzXCIsXG4gICAgICAgIGlkOiBuYW5vaWQoKSxcbiAgICAgICAgcHJvcGVydGllczogW1wibGVnZW5kYXJ5X2FjdGlvbnNcIl0sXG4gICAgICAgIGhlYWRpbmc6IFwiTGVnZW5kYXJ5IEFjdGlvbnNcIixcbiAgICAgICAgY29uZGl0aW9uZWQ6IHRydWUsXG5cbiAgICAgICAgZGljZTogdHJ1ZVxuICAgIH0sXG4gICAge1xuICAgICAgICB0eXBlOiBcInRyYWl0c1wiLFxuICAgICAgICBpZDogbmFub2lkKCksXG4gICAgICAgIHByb3BlcnRpZXM6IFtcInJlYWN0aW9uc1wiXSxcbiAgICAgICAgaGVhZGluZzogXCJSZWFjdGlvbnNcIixcbiAgICAgICAgY29uZGl0aW9uZWQ6IHRydWUsXG5cbiAgICAgICAgZGljZTogdHJ1ZVxuICAgIH0sXG4gICAge1xuICAgICAgICB0eXBlOiBcInRyYWl0c1wiLFxuICAgICAgICBpZDogbmFub2lkKCksXG4gICAgICAgIHByb3BlcnRpZXM6IFtcImxhaXJfYWN0aW9uc1wiXSxcbiAgICAgICAgaGVhZGluZzogXCJMYWlyIEFjdGlvbnNcIixcbiAgICAgICAgY29uZGl0aW9uZWQ6IHRydWUsXG5cbiAgICAgICAgZGljZTogdHJ1ZVxuICAgIH1cbl07XG5cbmV4cG9ydCBjb25zdCBMYXlvdXQ1ZTogTGF5b3V0ID0ge1xuICAgIGJsb2NrczogU3RhdGJsb2NrNWUsXG4gICAgbmFtZTogXCJCYXNpYyA1ZSBMYXlvdXRcIlxufTtcbiIsICJmdW5jdGlvbiBub29wKCkgeyB9XG5jb25zdCBpZGVudGl0eSA9IHggPT4geDtcbmZ1bmN0aW9uIGFzc2lnbih0YXIsIHNyYykge1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBmb3IgKGNvbnN0IGsgaW4gc3JjKVxuICAgICAgICB0YXJba10gPSBzcmNba107XG4gICAgcmV0dXJuIHRhcjtcbn1cbmZ1bmN0aW9uIGlzX3Byb21pc2UodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgdmFsdWUudGhlbiA9PT0gJ2Z1bmN0aW9uJztcbn1cbmZ1bmN0aW9uIGFkZF9sb2NhdGlvbihlbGVtZW50LCBmaWxlLCBsaW5lLCBjb2x1bW4sIGNoYXIpIHtcbiAgICBlbGVtZW50Ll9fc3ZlbHRlX21ldGEgPSB7XG4gICAgICAgIGxvYzogeyBmaWxlLCBsaW5lLCBjb2x1bW4sIGNoYXIgfVxuICAgIH07XG59XG5mdW5jdGlvbiBydW4oZm4pIHtcbiAgICByZXR1cm4gZm4oKTtcbn1cbmZ1bmN0aW9uIGJsYW5rX29iamVjdCgpIHtcbiAgICByZXR1cm4gT2JqZWN0LmNyZWF0ZShudWxsKTtcbn1cbmZ1bmN0aW9uIHJ1bl9hbGwoZm5zKSB7XG4gICAgZm5zLmZvckVhY2gocnVuKTtcbn1cbmZ1bmN0aW9uIGlzX2Z1bmN0aW9uKHRoaW5nKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0aGluZyA9PT0gJ2Z1bmN0aW9uJztcbn1cbmZ1bmN0aW9uIHNhZmVfbm90X2VxdWFsKGEsIGIpIHtcbiAgICByZXR1cm4gYSAhPSBhID8gYiA9PSBiIDogYSAhPT0gYiB8fCAoKGEgJiYgdHlwZW9mIGEgPT09ICdvYmplY3QnKSB8fCB0eXBlb2YgYSA9PT0gJ2Z1bmN0aW9uJyk7XG59XG5sZXQgc3JjX3VybF9lcXVhbF9hbmNob3I7XG5mdW5jdGlvbiBzcmNfdXJsX2VxdWFsKGVsZW1lbnRfc3JjLCB1cmwpIHtcbiAgICBpZiAoIXNyY191cmxfZXF1YWxfYW5jaG9yKSB7XG4gICAgICAgIHNyY191cmxfZXF1YWxfYW5jaG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgIH1cbiAgICBzcmNfdXJsX2VxdWFsX2FuY2hvci5ocmVmID0gdXJsO1xuICAgIHJldHVybiBlbGVtZW50X3NyYyA9PT0gc3JjX3VybF9lcXVhbF9hbmNob3IuaHJlZjtcbn1cbmZ1bmN0aW9uIG5vdF9lcXVhbChhLCBiKSB7XG4gICAgcmV0dXJuIGEgIT0gYSA/IGIgPT0gYiA6IGEgIT09IGI7XG59XG5mdW5jdGlvbiBpc19lbXB0eShvYmopIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMob2JqKS5sZW5ndGggPT09IDA7XG59XG5mdW5jdGlvbiB2YWxpZGF0ZV9zdG9yZShzdG9yZSwgbmFtZSkge1xuICAgIGlmIChzdG9yZSAhPSBudWxsICYmIHR5cGVvZiBzdG9yZS5zdWJzY3JpYmUgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAnJHtuYW1lfScgaXMgbm90IGEgc3RvcmUgd2l0aCBhICdzdWJzY3JpYmUnIG1ldGhvZGApO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHN1YnNjcmliZShzdG9yZSwgLi4uY2FsbGJhY2tzKSB7XG4gICAgaWYgKHN0b3JlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIG5vb3A7XG4gICAgfVxuICAgIGNvbnN0IHVuc3ViID0gc3RvcmUuc3Vic2NyaWJlKC4uLmNhbGxiYWNrcyk7XG4gICAgcmV0dXJuIHVuc3ViLnVuc3Vic2NyaWJlID8gKCkgPT4gdW5zdWIudW5zdWJzY3JpYmUoKSA6IHVuc3ViO1xufVxuZnVuY3Rpb24gZ2V0X3N0b3JlX3ZhbHVlKHN0b3JlKSB7XG4gICAgbGV0IHZhbHVlO1xuICAgIHN1YnNjcmliZShzdG9yZSwgXyA9PiB2YWx1ZSA9IF8pKCk7XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuZnVuY3Rpb24gY29tcG9uZW50X3N1YnNjcmliZShjb21wb25lbnQsIHN0b3JlLCBjYWxsYmFjaykge1xuICAgIGNvbXBvbmVudC4kJC5vbl9kZXN0cm95LnB1c2goc3Vic2NyaWJlKHN0b3JlLCBjYWxsYmFjaykpO1xufVxuZnVuY3Rpb24gY3JlYXRlX3Nsb3QoZGVmaW5pdGlvbiwgY3R4LCAkJHNjb3BlLCBmbikge1xuICAgIGlmIChkZWZpbml0aW9uKSB7XG4gICAgICAgIGNvbnN0IHNsb3RfY3R4ID0gZ2V0X3Nsb3RfY29udGV4dChkZWZpbml0aW9uLCBjdHgsICQkc2NvcGUsIGZuKTtcbiAgICAgICAgcmV0dXJuIGRlZmluaXRpb25bMF0oc2xvdF9jdHgpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGdldF9zbG90X2NvbnRleHQoZGVmaW5pdGlvbiwgY3R4LCAkJHNjb3BlLCBmbikge1xuICAgIHJldHVybiBkZWZpbml0aW9uWzFdICYmIGZuXG4gICAgICAgID8gYXNzaWduKCQkc2NvcGUuY3R4LnNsaWNlKCksIGRlZmluaXRpb25bMV0oZm4oY3R4KSkpXG4gICAgICAgIDogJCRzY29wZS5jdHg7XG59XG5mdW5jdGlvbiBnZXRfc2xvdF9jaGFuZ2VzKGRlZmluaXRpb24sICQkc2NvcGUsIGRpcnR5LCBmbikge1xuICAgIGlmIChkZWZpbml0aW9uWzJdICYmIGZuKSB7XG4gICAgICAgIGNvbnN0IGxldHMgPSBkZWZpbml0aW9uWzJdKGZuKGRpcnR5KSk7XG4gICAgICAgIGlmICgkJHNjb3BlLmRpcnR5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBsZXRzO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgbGV0cyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIGNvbnN0IG1lcmdlZCA9IFtdO1xuICAgICAgICAgICAgY29uc3QgbGVuID0gTWF0aC5tYXgoJCRzY29wZS5kaXJ0eS5sZW5ndGgsIGxldHMubGVuZ3RoKTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICBtZXJnZWRbaV0gPSAkJHNjb3BlLmRpcnR5W2ldIHwgbGV0c1tpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtZXJnZWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICQkc2NvcGUuZGlydHkgfCBsZXRzO1xuICAgIH1cbiAgICByZXR1cm4gJCRzY29wZS5kaXJ0eTtcbn1cbmZ1bmN0aW9uIHVwZGF0ZV9zbG90X2Jhc2Uoc2xvdCwgc2xvdF9kZWZpbml0aW9uLCBjdHgsICQkc2NvcGUsIHNsb3RfY2hhbmdlcywgZ2V0X3Nsb3RfY29udGV4dF9mbikge1xuICAgIGlmIChzbG90X2NoYW5nZXMpIHtcbiAgICAgICAgY29uc3Qgc2xvdF9jb250ZXh0ID0gZ2V0X3Nsb3RfY29udGV4dChzbG90X2RlZmluaXRpb24sIGN0eCwgJCRzY29wZSwgZ2V0X3Nsb3RfY29udGV4dF9mbik7XG4gICAgICAgIHNsb3QucChzbG90X2NvbnRleHQsIHNsb3RfY2hhbmdlcyk7XG4gICAgfVxufVxuZnVuY3Rpb24gdXBkYXRlX3Nsb3Qoc2xvdCwgc2xvdF9kZWZpbml0aW9uLCBjdHgsICQkc2NvcGUsIGRpcnR5LCBnZXRfc2xvdF9jaGFuZ2VzX2ZuLCBnZXRfc2xvdF9jb250ZXh0X2ZuKSB7XG4gICAgY29uc3Qgc2xvdF9jaGFuZ2VzID0gZ2V0X3Nsb3RfY2hhbmdlcyhzbG90X2RlZmluaXRpb24sICQkc2NvcGUsIGRpcnR5LCBnZXRfc2xvdF9jaGFuZ2VzX2ZuKTtcbiAgICB1cGRhdGVfc2xvdF9iYXNlKHNsb3QsIHNsb3RfZGVmaW5pdGlvbiwgY3R4LCAkJHNjb3BlLCBzbG90X2NoYW5nZXMsIGdldF9zbG90X2NvbnRleHRfZm4pO1xufVxuZnVuY3Rpb24gZ2V0X2FsbF9kaXJ0eV9mcm9tX3Njb3BlKCQkc2NvcGUpIHtcbiAgICBpZiAoJCRzY29wZS5jdHgubGVuZ3RoID4gMzIpIHtcbiAgICAgICAgY29uc3QgZGlydHkgPSBbXTtcbiAgICAgICAgY29uc3QgbGVuZ3RoID0gJCRzY29wZS5jdHgubGVuZ3RoIC8gMzI7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGRpcnR5W2ldID0gLTE7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRpcnR5O1xuICAgIH1cbiAgICByZXR1cm4gLTE7XG59XG5mdW5jdGlvbiBleGNsdWRlX2ludGVybmFsX3Byb3BzKHByb3BzKSB7XG4gICAgY29uc3QgcmVzdWx0ID0ge307XG4gICAgZm9yIChjb25zdCBrIGluIHByb3BzKVxuICAgICAgICBpZiAoa1swXSAhPT0gJyQnKVxuICAgICAgICAgICAgcmVzdWx0W2tdID0gcHJvcHNba107XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIGNvbXB1dGVfcmVzdF9wcm9wcyhwcm9wcywga2V5cykge1xuICAgIGNvbnN0IHJlc3QgPSB7fTtcbiAgICBrZXlzID0gbmV3IFNldChrZXlzKTtcbiAgICBmb3IgKGNvbnN0IGsgaW4gcHJvcHMpXG4gICAgICAgIGlmICgha2V5cy5oYXMoaykgJiYga1swXSAhPT0gJyQnKVxuICAgICAgICAgICAgcmVzdFtrXSA9IHByb3BzW2tdO1xuICAgIHJldHVybiByZXN0O1xufVxuZnVuY3Rpb24gY29tcHV0ZV9zbG90cyhzbG90cykge1xuICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xuICAgIGZvciAoY29uc3Qga2V5IGluIHNsb3RzKSB7XG4gICAgICAgIHJlc3VsdFtrZXldID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIG9uY2UoZm4pIHtcbiAgICBsZXQgcmFuID0gZmFsc2U7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICguLi5hcmdzKSB7XG4gICAgICAgIGlmIChyYW4pXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIHJhbiA9IHRydWU7XG4gICAgICAgIGZuLmNhbGwodGhpcywgLi4uYXJncyk7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIG51bGxfdG9fZW1wdHkodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgPT0gbnVsbCA/ICcnIDogdmFsdWU7XG59XG5mdW5jdGlvbiBzZXRfc3RvcmVfdmFsdWUoc3RvcmUsIHJldCwgdmFsdWUpIHtcbiAgICBzdG9yZS5zZXQodmFsdWUpO1xuICAgIHJldHVybiByZXQ7XG59XG5jb25zdCBoYXNfcHJvcCA9IChvYmosIHByb3ApID0+IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApO1xuZnVuY3Rpb24gYWN0aW9uX2Rlc3Ryb3llcihhY3Rpb25fcmVzdWx0KSB7XG4gICAgcmV0dXJuIGFjdGlvbl9yZXN1bHQgJiYgaXNfZnVuY3Rpb24oYWN0aW9uX3Jlc3VsdC5kZXN0cm95KSA/IGFjdGlvbl9yZXN1bHQuZGVzdHJveSA6IG5vb3A7XG59XG5cbmNvbnN0IGlzX2NsaWVudCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnO1xubGV0IG5vdyA9IGlzX2NsaWVudFxuICAgID8gKCkgPT4gd2luZG93LnBlcmZvcm1hbmNlLm5vdygpXG4gICAgOiAoKSA9PiBEYXRlLm5vdygpO1xubGV0IHJhZiA9IGlzX2NsaWVudCA/IGNiID0+IHJlcXVlc3RBbmltYXRpb25GcmFtZShjYikgOiBub29wO1xuLy8gdXNlZCBpbnRlcm5hbGx5IGZvciB0ZXN0aW5nXG5mdW5jdGlvbiBzZXRfbm93KGZuKSB7XG4gICAgbm93ID0gZm47XG59XG5mdW5jdGlvbiBzZXRfcmFmKGZuKSB7XG4gICAgcmFmID0gZm47XG59XG5cbmNvbnN0IHRhc2tzID0gbmV3IFNldCgpO1xuZnVuY3Rpb24gcnVuX3Rhc2tzKG5vdykge1xuICAgIHRhc2tzLmZvckVhY2godGFzayA9PiB7XG4gICAgICAgIGlmICghdGFzay5jKG5vdykpIHtcbiAgICAgICAgICAgIHRhc2tzLmRlbGV0ZSh0YXNrKTtcbiAgICAgICAgICAgIHRhc2suZigpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgaWYgKHRhc2tzLnNpemUgIT09IDApXG4gICAgICAgIHJhZihydW5fdGFza3MpO1xufVxuLyoqXG4gKiBGb3IgdGVzdGluZyBwdXJwb3NlcyBvbmx5IVxuICovXG5mdW5jdGlvbiBjbGVhcl9sb29wcygpIHtcbiAgICB0YXNrcy5jbGVhcigpO1xufVxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IHRhc2sgdGhhdCBydW5zIG9uIGVhY2ggcmFmIGZyYW1lXG4gKiB1bnRpbCBpdCByZXR1cm5zIGEgZmFsc3kgdmFsdWUgb3IgaXMgYWJvcnRlZFxuICovXG5mdW5jdGlvbiBsb29wKGNhbGxiYWNrKSB7XG4gICAgbGV0IHRhc2s7XG4gICAgaWYgKHRhc2tzLnNpemUgPT09IDApXG4gICAgICAgIHJhZihydW5fdGFza3MpO1xuICAgIHJldHVybiB7XG4gICAgICAgIHByb21pc2U6IG5ldyBQcm9taXNlKGZ1bGZpbGwgPT4ge1xuICAgICAgICAgICAgdGFza3MuYWRkKHRhc2sgPSB7IGM6IGNhbGxiYWNrLCBmOiBmdWxmaWxsIH0pO1xuICAgICAgICB9KSxcbiAgICAgICAgYWJvcnQoKSB7XG4gICAgICAgICAgICB0YXNrcy5kZWxldGUodGFzayk7XG4gICAgICAgIH1cbiAgICB9O1xufVxuXG4vLyBUcmFjayB3aGljaCBub2RlcyBhcmUgY2xhaW1lZCBkdXJpbmcgaHlkcmF0aW9uLiBVbmNsYWltZWQgbm9kZXMgY2FuIHRoZW4gYmUgcmVtb3ZlZCBmcm9tIHRoZSBET01cbi8vIGF0IHRoZSBlbmQgb2YgaHlkcmF0aW9uIHdpdGhvdXQgdG91Y2hpbmcgdGhlIHJlbWFpbmluZyBub2Rlcy5cbmxldCBpc19oeWRyYXRpbmcgPSBmYWxzZTtcbmZ1bmN0aW9uIHN0YXJ0X2h5ZHJhdGluZygpIHtcbiAgICBpc19oeWRyYXRpbmcgPSB0cnVlO1xufVxuZnVuY3Rpb24gZW5kX2h5ZHJhdGluZygpIHtcbiAgICBpc19oeWRyYXRpbmcgPSBmYWxzZTtcbn1cbmZ1bmN0aW9uIHVwcGVyX2JvdW5kKGxvdywgaGlnaCwga2V5LCB2YWx1ZSkge1xuICAgIC8vIFJldHVybiBmaXJzdCBpbmRleCBvZiB2YWx1ZSBsYXJnZXIgdGhhbiBpbnB1dCB2YWx1ZSBpbiB0aGUgcmFuZ2UgW2xvdywgaGlnaClcbiAgICB3aGlsZSAobG93IDwgaGlnaCkge1xuICAgICAgICBjb25zdCBtaWQgPSBsb3cgKyAoKGhpZ2ggLSBsb3cpID4+IDEpO1xuICAgICAgICBpZiAoa2V5KG1pZCkgPD0gdmFsdWUpIHtcbiAgICAgICAgICAgIGxvdyA9IG1pZCArIDE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBoaWdoID0gbWlkO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBsb3c7XG59XG5mdW5jdGlvbiBpbml0X2h5ZHJhdGUodGFyZ2V0KSB7XG4gICAgaWYgKHRhcmdldC5oeWRyYXRlX2luaXQpXG4gICAgICAgIHJldHVybjtcbiAgICB0YXJnZXQuaHlkcmF0ZV9pbml0ID0gdHJ1ZTtcbiAgICAvLyBXZSBrbm93IHRoYXQgYWxsIGNoaWxkcmVuIGhhdmUgY2xhaW1fb3JkZXIgdmFsdWVzIHNpbmNlIHRoZSB1bmNsYWltZWQgaGF2ZSBiZWVuIGRldGFjaGVkIGlmIHRhcmdldCBpcyBub3QgPGhlYWQ+XG4gICAgbGV0IGNoaWxkcmVuID0gdGFyZ2V0LmNoaWxkTm9kZXM7XG4gICAgLy8gSWYgdGFyZ2V0IGlzIDxoZWFkPiwgdGhlcmUgbWF5IGJlIGNoaWxkcmVuIHdpdGhvdXQgY2xhaW1fb3JkZXJcbiAgICBpZiAodGFyZ2V0Lm5vZGVOYW1lID09PSAnSEVBRCcpIHtcbiAgICAgICAgY29uc3QgbXlDaGlsZHJlbiA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBub2RlID0gY2hpbGRyZW5baV07XG4gICAgICAgICAgICBpZiAobm9kZS5jbGFpbV9vcmRlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgbXlDaGlsZHJlbi5wdXNoKG5vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNoaWxkcmVuID0gbXlDaGlsZHJlbjtcbiAgICB9XG4gICAgLypcbiAgICAqIFJlb3JkZXIgY2xhaW1lZCBjaGlsZHJlbiBvcHRpbWFsbHkuXG4gICAgKiBXZSBjYW4gcmVvcmRlciBjbGFpbWVkIGNoaWxkcmVuIG9wdGltYWxseSBieSBmaW5kaW5nIHRoZSBsb25nZXN0IHN1YnNlcXVlbmNlIG9mXG4gICAgKiBub2RlcyB0aGF0IGFyZSBhbHJlYWR5IGNsYWltZWQgaW4gb3JkZXIgYW5kIG9ubHkgbW92aW5nIHRoZSByZXN0LiBUaGUgbG9uZ2VzdFxuICAgICogc3Vic2VxdWVuY2Ugc3Vic2VxdWVuY2Ugb2Ygbm9kZXMgdGhhdCBhcmUgY2xhaW1lZCBpbiBvcmRlciBjYW4gYmUgZm91bmQgYnlcbiAgICAqIGNvbXB1dGluZyB0aGUgbG9uZ2VzdCBpbmNyZWFzaW5nIHN1YnNlcXVlbmNlIG9mIC5jbGFpbV9vcmRlciB2YWx1ZXMuXG4gICAgKlxuICAgICogVGhpcyBhbGdvcml0aG0gaXMgb3B0aW1hbCBpbiBnZW5lcmF0aW5nIHRoZSBsZWFzdCBhbW91bnQgb2YgcmVvcmRlciBvcGVyYXRpb25zXG4gICAgKiBwb3NzaWJsZS5cbiAgICAqXG4gICAgKiBQcm9vZjpcbiAgICAqIFdlIGtub3cgdGhhdCwgZ2l2ZW4gYSBzZXQgb2YgcmVvcmRlcmluZyBvcGVyYXRpb25zLCB0aGUgbm9kZXMgdGhhdCBkbyBub3QgbW92ZVxuICAgICogYWx3YXlzIGZvcm0gYW4gaW5jcmVhc2luZyBzdWJzZXF1ZW5jZSwgc2luY2UgdGhleSBkbyBub3QgbW92ZSBhbW9uZyBlYWNoIG90aGVyXG4gICAgKiBtZWFuaW5nIHRoYXQgdGhleSBtdXN0IGJlIGFscmVhZHkgb3JkZXJlZCBhbW9uZyBlYWNoIG90aGVyLiBUaHVzLCB0aGUgbWF4aW1hbFxuICAgICogc2V0IG9mIG5vZGVzIHRoYXQgZG8gbm90IG1vdmUgZm9ybSBhIGxvbmdlc3QgaW5jcmVhc2luZyBzdWJzZXF1ZW5jZS5cbiAgICAqL1xuICAgIC8vIENvbXB1dGUgbG9uZ2VzdCBpbmNyZWFzaW5nIHN1YnNlcXVlbmNlXG4gICAgLy8gbTogc3Vic2VxdWVuY2UgbGVuZ3RoIGogPT4gaW5kZXggayBvZiBzbWFsbGVzdCB2YWx1ZSB0aGF0IGVuZHMgYW4gaW5jcmVhc2luZyBzdWJzZXF1ZW5jZSBvZiBsZW5ndGggalxuICAgIGNvbnN0IG0gPSBuZXcgSW50MzJBcnJheShjaGlsZHJlbi5sZW5ndGggKyAxKTtcbiAgICAvLyBQcmVkZWNlc3NvciBpbmRpY2VzICsgMVxuICAgIGNvbnN0IHAgPSBuZXcgSW50MzJBcnJheShjaGlsZHJlbi5sZW5ndGgpO1xuICAgIG1bMF0gPSAtMTtcbiAgICBsZXQgbG9uZ2VzdCA9IDA7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBjdXJyZW50ID0gY2hpbGRyZW5baV0uY2xhaW1fb3JkZXI7XG4gICAgICAgIC8vIEZpbmQgdGhlIGxhcmdlc3Qgc3Vic2VxdWVuY2UgbGVuZ3RoIHN1Y2ggdGhhdCBpdCBlbmRzIGluIGEgdmFsdWUgbGVzcyB0aGFuIG91ciBjdXJyZW50IHZhbHVlXG4gICAgICAgIC8vIHVwcGVyX2JvdW5kIHJldHVybnMgZmlyc3QgZ3JlYXRlciB2YWx1ZSwgc28gd2Ugc3VidHJhY3Qgb25lXG4gICAgICAgIC8vIHdpdGggZmFzdCBwYXRoIGZvciB3aGVuIHdlIGFyZSBvbiB0aGUgY3VycmVudCBsb25nZXN0IHN1YnNlcXVlbmNlXG4gICAgICAgIGNvbnN0IHNlcUxlbiA9ICgobG9uZ2VzdCA+IDAgJiYgY2hpbGRyZW5bbVtsb25nZXN0XV0uY2xhaW1fb3JkZXIgPD0gY3VycmVudCkgPyBsb25nZXN0ICsgMSA6IHVwcGVyX2JvdW5kKDEsIGxvbmdlc3QsIGlkeCA9PiBjaGlsZHJlblttW2lkeF1dLmNsYWltX29yZGVyLCBjdXJyZW50KSkgLSAxO1xuICAgICAgICBwW2ldID0gbVtzZXFMZW5dICsgMTtcbiAgICAgICAgY29uc3QgbmV3TGVuID0gc2VxTGVuICsgMTtcbiAgICAgICAgLy8gV2UgY2FuIGd1YXJhbnRlZSB0aGF0IGN1cnJlbnQgaXMgdGhlIHNtYWxsZXN0IHZhbHVlLiBPdGhlcndpc2UsIHdlIHdvdWxkIGhhdmUgZ2VuZXJhdGVkIGEgbG9uZ2VyIHNlcXVlbmNlLlxuICAgICAgICBtW25ld0xlbl0gPSBpO1xuICAgICAgICBsb25nZXN0ID0gTWF0aC5tYXgobmV3TGVuLCBsb25nZXN0KTtcbiAgICB9XG4gICAgLy8gVGhlIGxvbmdlc3QgaW5jcmVhc2luZyBzdWJzZXF1ZW5jZSBvZiBub2RlcyAoaW5pdGlhbGx5IHJldmVyc2VkKVxuICAgIGNvbnN0IGxpcyA9IFtdO1xuICAgIC8vIFRoZSByZXN0IG9mIHRoZSBub2Rlcywgbm9kZXMgdGhhdCB3aWxsIGJlIG1vdmVkXG4gICAgY29uc3QgdG9Nb3ZlID0gW107XG4gICAgbGV0IGxhc3QgPSBjaGlsZHJlbi5sZW5ndGggLSAxO1xuICAgIGZvciAobGV0IGN1ciA9IG1bbG9uZ2VzdF0gKyAxOyBjdXIgIT0gMDsgY3VyID0gcFtjdXIgLSAxXSkge1xuICAgICAgICBsaXMucHVzaChjaGlsZHJlbltjdXIgLSAxXSk7XG4gICAgICAgIGZvciAoOyBsYXN0ID49IGN1cjsgbGFzdC0tKSB7XG4gICAgICAgICAgICB0b01vdmUucHVzaChjaGlsZHJlbltsYXN0XSk7XG4gICAgICAgIH1cbiAgICAgICAgbGFzdC0tO1xuICAgIH1cbiAgICBmb3IgKDsgbGFzdCA+PSAwOyBsYXN0LS0pIHtcbiAgICAgICAgdG9Nb3ZlLnB1c2goY2hpbGRyZW5bbGFzdF0pO1xuICAgIH1cbiAgICBsaXMucmV2ZXJzZSgpO1xuICAgIC8vIFdlIHNvcnQgdGhlIG5vZGVzIGJlaW5nIG1vdmVkIHRvIGd1YXJhbnRlZSB0aGF0IHRoZWlyIGluc2VydGlvbiBvcmRlciBtYXRjaGVzIHRoZSBjbGFpbSBvcmRlclxuICAgIHRvTW92ZS5zb3J0KChhLCBiKSA9PiBhLmNsYWltX29yZGVyIC0gYi5jbGFpbV9vcmRlcik7XG4gICAgLy8gRmluYWxseSwgd2UgbW92ZSB0aGUgbm9kZXNcbiAgICBmb3IgKGxldCBpID0gMCwgaiA9IDA7IGkgPCB0b01vdmUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgd2hpbGUgKGogPCBsaXMubGVuZ3RoICYmIHRvTW92ZVtpXS5jbGFpbV9vcmRlciA+PSBsaXNbal0uY2xhaW1fb3JkZXIpIHtcbiAgICAgICAgICAgIGorKztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhbmNob3IgPSBqIDwgbGlzLmxlbmd0aCA/IGxpc1tqXSA6IG51bGw7XG4gICAgICAgIHRhcmdldC5pbnNlcnRCZWZvcmUodG9Nb3ZlW2ldLCBhbmNob3IpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGFwcGVuZCh0YXJnZXQsIG5vZGUpIHtcbiAgICB0YXJnZXQuYXBwZW5kQ2hpbGQobm9kZSk7XG59XG5mdW5jdGlvbiBhcHBlbmRfc3R5bGVzKHRhcmdldCwgc3R5bGVfc2hlZXRfaWQsIHN0eWxlcykge1xuICAgIGNvbnN0IGFwcGVuZF9zdHlsZXNfdG8gPSBnZXRfcm9vdF9mb3Jfc3R5bGUodGFyZ2V0KTtcbiAgICBpZiAoIWFwcGVuZF9zdHlsZXNfdG8uZ2V0RWxlbWVudEJ5SWQoc3R5bGVfc2hlZXRfaWQpKSB7XG4gICAgICAgIGNvbnN0IHN0eWxlID0gZWxlbWVudCgnc3R5bGUnKTtcbiAgICAgICAgc3R5bGUuaWQgPSBzdHlsZV9zaGVldF9pZDtcbiAgICAgICAgc3R5bGUudGV4dENvbnRlbnQgPSBzdHlsZXM7XG4gICAgICAgIGFwcGVuZF9zdHlsZXNoZWV0KGFwcGVuZF9zdHlsZXNfdG8sIHN0eWxlKTtcbiAgICB9XG59XG5mdW5jdGlvbiBnZXRfcm9vdF9mb3Jfc3R5bGUobm9kZSkge1xuICAgIGlmICghbm9kZSlcbiAgICAgICAgcmV0dXJuIGRvY3VtZW50O1xuICAgIGNvbnN0IHJvb3QgPSBub2RlLmdldFJvb3ROb2RlID8gbm9kZS5nZXRSb290Tm9kZSgpIDogbm9kZS5vd25lckRvY3VtZW50O1xuICAgIGlmIChyb290ICYmIHJvb3QuaG9zdCkge1xuICAgICAgICByZXR1cm4gcm9vdDtcbiAgICB9XG4gICAgcmV0dXJuIG5vZGUub3duZXJEb2N1bWVudDtcbn1cbmZ1bmN0aW9uIGFwcGVuZF9lbXB0eV9zdHlsZXNoZWV0KG5vZGUpIHtcbiAgICBjb25zdCBzdHlsZV9lbGVtZW50ID0gZWxlbWVudCgnc3R5bGUnKTtcbiAgICBhcHBlbmRfc3R5bGVzaGVldChnZXRfcm9vdF9mb3Jfc3R5bGUobm9kZSksIHN0eWxlX2VsZW1lbnQpO1xuICAgIHJldHVybiBzdHlsZV9lbGVtZW50LnNoZWV0O1xufVxuZnVuY3Rpb24gYXBwZW5kX3N0eWxlc2hlZXQobm9kZSwgc3R5bGUpIHtcbiAgICBhcHBlbmQobm9kZS5oZWFkIHx8IG5vZGUsIHN0eWxlKTtcbn1cbmZ1bmN0aW9uIGFwcGVuZF9oeWRyYXRpb24odGFyZ2V0LCBub2RlKSB7XG4gICAgaWYgKGlzX2h5ZHJhdGluZykge1xuICAgICAgICBpbml0X2h5ZHJhdGUodGFyZ2V0KTtcbiAgICAgICAgaWYgKCh0YXJnZXQuYWN0dWFsX2VuZF9jaGlsZCA9PT0gdW5kZWZpbmVkKSB8fCAoKHRhcmdldC5hY3R1YWxfZW5kX2NoaWxkICE9PSBudWxsKSAmJiAodGFyZ2V0LmFjdHVhbF9lbmRfY2hpbGQucGFyZW50RWxlbWVudCAhPT0gdGFyZ2V0KSkpIHtcbiAgICAgICAgICAgIHRhcmdldC5hY3R1YWxfZW5kX2NoaWxkID0gdGFyZ2V0LmZpcnN0Q2hpbGQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gU2tpcCBub2RlcyBvZiB1bmRlZmluZWQgb3JkZXJpbmdcbiAgICAgICAgd2hpbGUgKCh0YXJnZXQuYWN0dWFsX2VuZF9jaGlsZCAhPT0gbnVsbCkgJiYgKHRhcmdldC5hY3R1YWxfZW5kX2NoaWxkLmNsYWltX29yZGVyID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgICAgICB0YXJnZXQuYWN0dWFsX2VuZF9jaGlsZCA9IHRhcmdldC5hY3R1YWxfZW5kX2NoaWxkLm5leHRTaWJsaW5nO1xuICAgICAgICB9XG4gICAgICAgIGlmIChub2RlICE9PSB0YXJnZXQuYWN0dWFsX2VuZF9jaGlsZCkge1xuICAgICAgICAgICAgLy8gV2Ugb25seSBpbnNlcnQgaWYgdGhlIG9yZGVyaW5nIG9mIHRoaXMgbm9kZSBzaG91bGQgYmUgbW9kaWZpZWQgb3IgdGhlIHBhcmVudCBub2RlIGlzIG5vdCB0YXJnZXRcbiAgICAgICAgICAgIGlmIChub2RlLmNsYWltX29yZGVyICE9PSB1bmRlZmluZWQgfHwgbm9kZS5wYXJlbnROb2RlICE9PSB0YXJnZXQpIHtcbiAgICAgICAgICAgICAgICB0YXJnZXQuaW5zZXJ0QmVmb3JlKG5vZGUsIHRhcmdldC5hY3R1YWxfZW5kX2NoaWxkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRhcmdldC5hY3R1YWxfZW5kX2NoaWxkID0gbm9kZS5uZXh0U2libGluZztcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmIChub2RlLnBhcmVudE5vZGUgIT09IHRhcmdldCB8fCBub2RlLm5leHRTaWJsaW5nICE9PSBudWxsKSB7XG4gICAgICAgIHRhcmdldC5hcHBlbmRDaGlsZChub2RlKTtcbiAgICB9XG59XG5mdW5jdGlvbiBpbnNlcnQodGFyZ2V0LCBub2RlLCBhbmNob3IpIHtcbiAgICB0YXJnZXQuaW5zZXJ0QmVmb3JlKG5vZGUsIGFuY2hvciB8fCBudWxsKTtcbn1cbmZ1bmN0aW9uIGluc2VydF9oeWRyYXRpb24odGFyZ2V0LCBub2RlLCBhbmNob3IpIHtcbiAgICBpZiAoaXNfaHlkcmF0aW5nICYmICFhbmNob3IpIHtcbiAgICAgICAgYXBwZW5kX2h5ZHJhdGlvbih0YXJnZXQsIG5vZGUpO1xuICAgIH1cbiAgICBlbHNlIGlmIChub2RlLnBhcmVudE5vZGUgIT09IHRhcmdldCB8fCBub2RlLm5leHRTaWJsaW5nICE9IGFuY2hvcikge1xuICAgICAgICB0YXJnZXQuaW5zZXJ0QmVmb3JlKG5vZGUsIGFuY2hvciB8fCBudWxsKTtcbiAgICB9XG59XG5mdW5jdGlvbiBkZXRhY2gobm9kZSkge1xuICAgIG5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChub2RlKTtcbn1cbmZ1bmN0aW9uIGRlc3Ryb3lfZWFjaChpdGVyYXRpb25zLCBkZXRhY2hpbmcpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGl0ZXJhdGlvbnMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKGl0ZXJhdGlvbnNbaV0pXG4gICAgICAgICAgICBpdGVyYXRpb25zW2ldLmQoZGV0YWNoaW5nKTtcbiAgICB9XG59XG5mdW5jdGlvbiBlbGVtZW50KG5hbWUpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChuYW1lKTtcbn1cbmZ1bmN0aW9uIGVsZW1lbnRfaXMobmFtZSwgaXMpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChuYW1lLCB7IGlzIH0pO1xufVxuZnVuY3Rpb24gb2JqZWN0X3dpdGhvdXRfcHJvcGVydGllcyhvYmosIGV4Y2x1ZGUpIHtcbiAgICBjb25zdCB0YXJnZXQgPSB7fTtcbiAgICBmb3IgKGNvbnN0IGsgaW4gb2JqKSB7XG4gICAgICAgIGlmIChoYXNfcHJvcChvYmosIGspXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICAmJiBleGNsdWRlLmluZGV4T2YoaykgPT09IC0xKSB7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICB0YXJnZXRba10gPSBvYmpba107XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldDtcbn1cbmZ1bmN0aW9uIHN2Z19lbGVtZW50KG5hbWUpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsIG5hbWUpO1xufVxuZnVuY3Rpb24gdGV4dChkYXRhKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGRhdGEpO1xufVxuZnVuY3Rpb24gc3BhY2UoKSB7XG4gICAgcmV0dXJuIHRleHQoJyAnKTtcbn1cbmZ1bmN0aW9uIGVtcHR5KCkge1xuICAgIHJldHVybiB0ZXh0KCcnKTtcbn1cbmZ1bmN0aW9uIGxpc3Rlbihub2RlLCBldmVudCwgaGFuZGxlciwgb3B0aW9ucykge1xuICAgIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlciwgb3B0aW9ucyk7XG4gICAgcmV0dXJuICgpID0+IG5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlciwgb3B0aW9ucyk7XG59XG5mdW5jdGlvbiBwcmV2ZW50X2RlZmF1bHQoZm4pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgcmV0dXJuIGZuLmNhbGwodGhpcywgZXZlbnQpO1xuICAgIH07XG59XG5mdW5jdGlvbiBzdG9wX3Byb3BhZ2F0aW9uKGZuKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICByZXR1cm4gZm4uY2FsbCh0aGlzLCBldmVudCk7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIHNlbGYoZm4pIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgaWYgKGV2ZW50LnRhcmdldCA9PT0gdGhpcylcbiAgICAgICAgICAgIGZuLmNhbGwodGhpcywgZXZlbnQpO1xuICAgIH07XG59XG5mdW5jdGlvbiB0cnVzdGVkKGZuKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGlmIChldmVudC5pc1RydXN0ZWQpXG4gICAgICAgICAgICBmbi5jYWxsKHRoaXMsIGV2ZW50KTtcbiAgICB9O1xufVxuZnVuY3Rpb24gYXR0cihub2RlLCBhdHRyaWJ1dGUsIHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlID09IG51bGwpXG4gICAgICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKGF0dHJpYnV0ZSk7XG4gICAgZWxzZSBpZiAobm9kZS5nZXRBdHRyaWJ1dGUoYXR0cmlidXRlKSAhPT0gdmFsdWUpXG4gICAgICAgIG5vZGUuc2V0QXR0cmlidXRlKGF0dHJpYnV0ZSwgdmFsdWUpO1xufVxuZnVuY3Rpb24gc2V0X2F0dHJpYnV0ZXMobm9kZSwgYXR0cmlidXRlcykge1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBjb25zdCBkZXNjcmlwdG9ycyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKG5vZGUuX19wcm90b19fKTtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBhdHRyaWJ1dGVzKSB7XG4gICAgICAgIGlmIChhdHRyaWJ1dGVzW2tleV0gPT0gbnVsbCkge1xuICAgICAgICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChrZXkgPT09ICdzdHlsZScpIHtcbiAgICAgICAgICAgIG5vZGUuc3R5bGUuY3NzVGV4dCA9IGF0dHJpYnV0ZXNba2V5XTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChrZXkgPT09ICdfX3ZhbHVlJykge1xuICAgICAgICAgICAgbm9kZS52YWx1ZSA9IG5vZGVba2V5XSA9IGF0dHJpYnV0ZXNba2V5XTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChkZXNjcmlwdG9yc1trZXldICYmIGRlc2NyaXB0b3JzW2tleV0uc2V0KSB7XG4gICAgICAgICAgICBub2RlW2tleV0gPSBhdHRyaWJ1dGVzW2tleV07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBhdHRyKG5vZGUsIGtleSwgYXR0cmlidXRlc1trZXldKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIHNldF9zdmdfYXR0cmlidXRlcyhub2RlLCBhdHRyaWJ1dGVzKSB7XG4gICAgZm9yIChjb25zdCBrZXkgaW4gYXR0cmlidXRlcykge1xuICAgICAgICBhdHRyKG5vZGUsIGtleSwgYXR0cmlidXRlc1trZXldKTtcbiAgICB9XG59XG5mdW5jdGlvbiBzZXRfY3VzdG9tX2VsZW1lbnRfZGF0YShub2RlLCBwcm9wLCB2YWx1ZSkge1xuICAgIGlmIChwcm9wIGluIG5vZGUpIHtcbiAgICAgICAgbm9kZVtwcm9wXSA9IHR5cGVvZiBub2RlW3Byb3BdID09PSAnYm9vbGVhbicgJiYgdmFsdWUgPT09ICcnID8gdHJ1ZSA6IHZhbHVlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgYXR0cihub2RlLCBwcm9wLCB2YWx1ZSk7XG4gICAgfVxufVxuZnVuY3Rpb24geGxpbmtfYXR0cihub2RlLCBhdHRyaWJ1dGUsIHZhbHVlKSB7XG4gICAgbm9kZS5zZXRBdHRyaWJ1dGVOUygnaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluaycsIGF0dHJpYnV0ZSwgdmFsdWUpO1xufVxuZnVuY3Rpb24gZ2V0X2JpbmRpbmdfZ3JvdXBfdmFsdWUoZ3JvdXAsIF9fdmFsdWUsIGNoZWNrZWQpIHtcbiAgICBjb25zdCB2YWx1ZSA9IG5ldyBTZXQoKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGdyb3VwLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGlmIChncm91cFtpXS5jaGVja2VkKVxuICAgICAgICAgICAgdmFsdWUuYWRkKGdyb3VwW2ldLl9fdmFsdWUpO1xuICAgIH1cbiAgICBpZiAoIWNoZWNrZWQpIHtcbiAgICAgICAgdmFsdWUuZGVsZXRlKF9fdmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gQXJyYXkuZnJvbSh2YWx1ZSk7XG59XG5mdW5jdGlvbiB0b19udW1iZXIodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09ICcnID8gbnVsbCA6ICt2YWx1ZTtcbn1cbmZ1bmN0aW9uIHRpbWVfcmFuZ2VzX3RvX2FycmF5KHJhbmdlcykge1xuICAgIGNvbnN0IGFycmF5ID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCByYW5nZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgYXJyYXkucHVzaCh7IHN0YXJ0OiByYW5nZXMuc3RhcnQoaSksIGVuZDogcmFuZ2VzLmVuZChpKSB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5O1xufVxuZnVuY3Rpb24gY2hpbGRyZW4oZWxlbWVudCkge1xuICAgIHJldHVybiBBcnJheS5mcm9tKGVsZW1lbnQuY2hpbGROb2Rlcyk7XG59XG5mdW5jdGlvbiBpbml0X2NsYWltX2luZm8obm9kZXMpIHtcbiAgICBpZiAobm9kZXMuY2xhaW1faW5mbyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG5vZGVzLmNsYWltX2luZm8gPSB7IGxhc3RfaW5kZXg6IDAsIHRvdGFsX2NsYWltZWQ6IDAgfTtcbiAgICB9XG59XG5mdW5jdGlvbiBjbGFpbV9ub2RlKG5vZGVzLCBwcmVkaWNhdGUsIHByb2Nlc3NOb2RlLCBjcmVhdGVOb2RlLCBkb250VXBkYXRlTGFzdEluZGV4ID0gZmFsc2UpIHtcbiAgICAvLyBUcnkgdG8gZmluZCBub2RlcyBpbiBhbiBvcmRlciBzdWNoIHRoYXQgd2UgbGVuZ3RoZW4gdGhlIGxvbmdlc3QgaW5jcmVhc2luZyBzdWJzZXF1ZW5jZVxuICAgIGluaXRfY2xhaW1faW5mbyhub2Rlcyk7XG4gICAgY29uc3QgcmVzdWx0Tm9kZSA9ICgoKSA9PiB7XG4gICAgICAgIC8vIFdlIGZpcnN0IHRyeSB0byBmaW5kIGFuIGVsZW1lbnQgYWZ0ZXIgdGhlIHByZXZpb3VzIG9uZVxuICAgICAgICBmb3IgKGxldCBpID0gbm9kZXMuY2xhaW1faW5mby5sYXN0X2luZGV4OyBpIDwgbm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IG5vZGUgPSBub2Rlc1tpXTtcbiAgICAgICAgICAgIGlmIChwcmVkaWNhdGUobm9kZSkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXBsYWNlbWVudCA9IHByb2Nlc3NOb2RlKG5vZGUpO1xuICAgICAgICAgICAgICAgIGlmIChyZXBsYWNlbWVudCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGVzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGVzW2ldID0gcmVwbGFjZW1lbnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICghZG9udFVwZGF0ZUxhc3RJbmRleCkge1xuICAgICAgICAgICAgICAgICAgICBub2Rlcy5jbGFpbV9pbmZvLmxhc3RfaW5kZXggPSBpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBPdGhlcndpc2UsIHdlIHRyeSB0byBmaW5kIG9uZSBiZWZvcmVcbiAgICAgICAgLy8gV2UgaXRlcmF0ZSBpbiByZXZlcnNlIHNvIHRoYXQgd2UgZG9uJ3QgZ28gdG9vIGZhciBiYWNrXG4gICAgICAgIGZvciAobGV0IGkgPSBub2Rlcy5jbGFpbV9pbmZvLmxhc3RfaW5kZXggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgICAgICAgY29uc3Qgbm9kZSA9IG5vZGVzW2ldO1xuICAgICAgICAgICAgaWYgKHByZWRpY2F0ZShub2RlKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlcGxhY2VtZW50ID0gcHJvY2Vzc05vZGUobm9kZSk7XG4gICAgICAgICAgICAgICAgaWYgKHJlcGxhY2VtZW50ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgbm9kZXMuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbm9kZXNbaV0gPSByZXBsYWNlbWVudDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKCFkb250VXBkYXRlTGFzdEluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGVzLmNsYWltX2luZm8ubGFzdF9pbmRleCA9IGk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHJlcGxhY2VtZW50ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gU2luY2Ugd2Ugc3BsaWNlZCBiZWZvcmUgdGhlIGxhc3RfaW5kZXgsIHdlIGRlY3JlYXNlIGl0XG4gICAgICAgICAgICAgICAgICAgIG5vZGVzLmNsYWltX2luZm8ubGFzdF9pbmRleC0tO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBJZiB3ZSBjYW4ndCBmaW5kIGFueSBtYXRjaGluZyBub2RlLCB3ZSBjcmVhdGUgYSBuZXcgb25lXG4gICAgICAgIHJldHVybiBjcmVhdGVOb2RlKCk7XG4gICAgfSkoKTtcbiAgICByZXN1bHROb2RlLmNsYWltX29yZGVyID0gbm9kZXMuY2xhaW1faW5mby50b3RhbF9jbGFpbWVkO1xuICAgIG5vZGVzLmNsYWltX2luZm8udG90YWxfY2xhaW1lZCArPSAxO1xuICAgIHJldHVybiByZXN1bHROb2RlO1xufVxuZnVuY3Rpb24gY2xhaW1fZWxlbWVudF9iYXNlKG5vZGVzLCBuYW1lLCBhdHRyaWJ1dGVzLCBjcmVhdGVfZWxlbWVudCkge1xuICAgIHJldHVybiBjbGFpbV9ub2RlKG5vZGVzLCAobm9kZSkgPT4gbm9kZS5ub2RlTmFtZSA9PT0gbmFtZSwgKG5vZGUpID0+IHtcbiAgICAgICAgY29uc3QgcmVtb3ZlID0gW107XG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgbm9kZS5hdHRyaWJ1dGVzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICBjb25zdCBhdHRyaWJ1dGUgPSBub2RlLmF0dHJpYnV0ZXNbal07XG4gICAgICAgICAgICBpZiAoIWF0dHJpYnV0ZXNbYXR0cmlidXRlLm5hbWVdKSB7XG4gICAgICAgICAgICAgICAgcmVtb3ZlLnB1c2goYXR0cmlidXRlLm5hbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJlbW92ZS5mb3JFYWNoKHYgPT4gbm9kZS5yZW1vdmVBdHRyaWJ1dGUodikpO1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH0sICgpID0+IGNyZWF0ZV9lbGVtZW50KG5hbWUpKTtcbn1cbmZ1bmN0aW9uIGNsYWltX2VsZW1lbnQobm9kZXMsIG5hbWUsIGF0dHJpYnV0ZXMpIHtcbiAgICByZXR1cm4gY2xhaW1fZWxlbWVudF9iYXNlKG5vZGVzLCBuYW1lLCBhdHRyaWJ1dGVzLCBlbGVtZW50KTtcbn1cbmZ1bmN0aW9uIGNsYWltX3N2Z19lbGVtZW50KG5vZGVzLCBuYW1lLCBhdHRyaWJ1dGVzKSB7XG4gICAgcmV0dXJuIGNsYWltX2VsZW1lbnRfYmFzZShub2RlcywgbmFtZSwgYXR0cmlidXRlcywgc3ZnX2VsZW1lbnQpO1xufVxuZnVuY3Rpb24gY2xhaW1fdGV4dChub2RlcywgZGF0YSkge1xuICAgIHJldHVybiBjbGFpbV9ub2RlKG5vZGVzLCAobm9kZSkgPT4gbm9kZS5ub2RlVHlwZSA9PT0gMywgKG5vZGUpID0+IHtcbiAgICAgICAgY29uc3QgZGF0YVN0ciA9ICcnICsgZGF0YTtcbiAgICAgICAgaWYgKG5vZGUuZGF0YS5zdGFydHNXaXRoKGRhdGFTdHIpKSB7XG4gICAgICAgICAgICBpZiAobm9kZS5kYXRhLmxlbmd0aCAhPT0gZGF0YVN0ci5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbm9kZS5zcGxpdFRleHQoZGF0YVN0ci5sZW5ndGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbm9kZS5kYXRhID0gZGF0YVN0cjtcbiAgICAgICAgfVxuICAgIH0sICgpID0+IHRleHQoZGF0YSksIHRydWUgLy8gVGV4dCBub2RlcyBzaG91bGQgbm90IHVwZGF0ZSBsYXN0IGluZGV4IHNpbmNlIGl0IGlzIGxpa2VseSBub3Qgd29ydGggaXQgdG8gZWxpbWluYXRlIGFuIGluY3JlYXNpbmcgc3Vic2VxdWVuY2Ugb2YgYWN0dWFsIGVsZW1lbnRzXG4gICAgKTtcbn1cbmZ1bmN0aW9uIGNsYWltX3NwYWNlKG5vZGVzKSB7XG4gICAgcmV0dXJuIGNsYWltX3RleHQobm9kZXMsICcgJyk7XG59XG5mdW5jdGlvbiBmaW5kX2NvbW1lbnQobm9kZXMsIHRleHQsIHN0YXJ0KSB7XG4gICAgZm9yIChsZXQgaSA9IHN0YXJ0OyBpIDwgbm9kZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgY29uc3Qgbm9kZSA9IG5vZGVzW2ldO1xuICAgICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gOCAvKiBjb21tZW50IG5vZGUgKi8gJiYgbm9kZS50ZXh0Q29udGVudC50cmltKCkgPT09IHRleHQpIHtcbiAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBub2Rlcy5sZW5ndGg7XG59XG5mdW5jdGlvbiBjbGFpbV9odG1sX3RhZyhub2RlcywgaXNfc3ZnKSB7XG4gICAgLy8gZmluZCBodG1sIG9wZW5pbmcgdGFnXG4gICAgY29uc3Qgc3RhcnRfaW5kZXggPSBmaW5kX2NvbW1lbnQobm9kZXMsICdIVE1MX1RBR19TVEFSVCcsIDApO1xuICAgIGNvbnN0IGVuZF9pbmRleCA9IGZpbmRfY29tbWVudChub2RlcywgJ0hUTUxfVEFHX0VORCcsIHN0YXJ0X2luZGV4KTtcbiAgICBpZiAoc3RhcnRfaW5kZXggPT09IGVuZF9pbmRleCkge1xuICAgICAgICByZXR1cm4gbmV3IEh0bWxUYWdIeWRyYXRpb24odW5kZWZpbmVkLCBpc19zdmcpO1xuICAgIH1cbiAgICBpbml0X2NsYWltX2luZm8obm9kZXMpO1xuICAgIGNvbnN0IGh0bWxfdGFnX25vZGVzID0gbm9kZXMuc3BsaWNlKHN0YXJ0X2luZGV4LCBlbmRfaW5kZXggLSBzdGFydF9pbmRleCArIDEpO1xuICAgIGRldGFjaChodG1sX3RhZ19ub2Rlc1swXSk7XG4gICAgZGV0YWNoKGh0bWxfdGFnX25vZGVzW2h0bWxfdGFnX25vZGVzLmxlbmd0aCAtIDFdKTtcbiAgICBjb25zdCBjbGFpbWVkX25vZGVzID0gaHRtbF90YWdfbm9kZXMuc2xpY2UoMSwgaHRtbF90YWdfbm9kZXMubGVuZ3RoIC0gMSk7XG4gICAgZm9yIChjb25zdCBuIG9mIGNsYWltZWRfbm9kZXMpIHtcbiAgICAgICAgbi5jbGFpbV9vcmRlciA9IG5vZGVzLmNsYWltX2luZm8udG90YWxfY2xhaW1lZDtcbiAgICAgICAgbm9kZXMuY2xhaW1faW5mby50b3RhbF9jbGFpbWVkICs9IDE7XG4gICAgfVxuICAgIHJldHVybiBuZXcgSHRtbFRhZ0h5ZHJhdGlvbihjbGFpbWVkX25vZGVzLCBpc19zdmcpO1xufVxuZnVuY3Rpb24gc2V0X2RhdGEodGV4dCwgZGF0YSkge1xuICAgIGRhdGEgPSAnJyArIGRhdGE7XG4gICAgaWYgKHRleHQud2hvbGVUZXh0ICE9PSBkYXRhKVxuICAgICAgICB0ZXh0LmRhdGEgPSBkYXRhO1xufVxuZnVuY3Rpb24gc2V0X2lucHV0X3ZhbHVlKGlucHV0LCB2YWx1ZSkge1xuICAgIGlucHV0LnZhbHVlID0gdmFsdWUgPT0gbnVsbCA/ICcnIDogdmFsdWU7XG59XG5mdW5jdGlvbiBzZXRfaW5wdXRfdHlwZShpbnB1dCwgdHlwZSkge1xuICAgIHRyeSB7XG4gICAgICAgIGlucHV0LnR5cGUgPSB0eXBlO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICAvLyBkbyBub3RoaW5nXG4gICAgfVxufVxuZnVuY3Rpb24gc2V0X3N0eWxlKG5vZGUsIGtleSwgdmFsdWUsIGltcG9ydGFudCkge1xuICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICBub2RlLnN0eWxlLnJlbW92ZVByb3BlcnR5KGtleSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBub2RlLnN0eWxlLnNldFByb3BlcnR5KGtleSwgdmFsdWUsIGltcG9ydGFudCA/ICdpbXBvcnRhbnQnIDogJycpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHNlbGVjdF9vcHRpb24oc2VsZWN0LCB2YWx1ZSkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2VsZWN0Lm9wdGlvbnMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9uID0gc2VsZWN0Lm9wdGlvbnNbaV07XG4gICAgICAgIGlmIChvcHRpb24uX192YWx1ZSA9PT0gdmFsdWUpIHtcbiAgICAgICAgICAgIG9wdGlvbi5zZWxlY3RlZCA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9XG4gICAgc2VsZWN0LnNlbGVjdGVkSW5kZXggPSAtMTsgLy8gbm8gb3B0aW9uIHNob3VsZCBiZSBzZWxlY3RlZFxufVxuZnVuY3Rpb24gc2VsZWN0X29wdGlvbnMoc2VsZWN0LCB2YWx1ZSkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2VsZWN0Lm9wdGlvbnMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgY29uc3Qgb3B0aW9uID0gc2VsZWN0Lm9wdGlvbnNbaV07XG4gICAgICAgIG9wdGlvbi5zZWxlY3RlZCA9IH52YWx1ZS5pbmRleE9mKG9wdGlvbi5fX3ZhbHVlKTtcbiAgICB9XG59XG5mdW5jdGlvbiBzZWxlY3RfdmFsdWUoc2VsZWN0KSB7XG4gICAgY29uc3Qgc2VsZWN0ZWRfb3B0aW9uID0gc2VsZWN0LnF1ZXJ5U2VsZWN0b3IoJzpjaGVja2VkJykgfHwgc2VsZWN0Lm9wdGlvbnNbMF07XG4gICAgcmV0dXJuIHNlbGVjdGVkX29wdGlvbiAmJiBzZWxlY3RlZF9vcHRpb24uX192YWx1ZTtcbn1cbmZ1bmN0aW9uIHNlbGVjdF9tdWx0aXBsZV92YWx1ZShzZWxlY3QpIHtcbiAgICByZXR1cm4gW10ubWFwLmNhbGwoc2VsZWN0LnF1ZXJ5U2VsZWN0b3JBbGwoJzpjaGVja2VkJyksIG9wdGlvbiA9PiBvcHRpb24uX192YWx1ZSk7XG59XG4vLyB1bmZvcnR1bmF0ZWx5IHRoaXMgY2FuJ3QgYmUgYSBjb25zdGFudCBhcyB0aGF0IHdvdWxkbid0IGJlIHRyZWUtc2hha2VhYmxlXG4vLyBzbyB3ZSBjYWNoZSB0aGUgcmVzdWx0IGluc3RlYWRcbmxldCBjcm9zc29yaWdpbjtcbmZ1bmN0aW9uIGlzX2Nyb3Nzb3JpZ2luKCkge1xuICAgIGlmIChjcm9zc29yaWdpbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNyb3Nzb3JpZ2luID0gZmFsc2U7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LnBhcmVudCkge1xuICAgICAgICAgICAgICAgIHZvaWQgd2luZG93LnBhcmVudC5kb2N1bWVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNyb3Nzb3JpZ2luID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY3Jvc3NvcmlnaW47XG59XG5mdW5jdGlvbiBhZGRfcmVzaXplX2xpc3RlbmVyKG5vZGUsIGZuKSB7XG4gICAgY29uc3QgY29tcHV0ZWRfc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKG5vZGUpO1xuICAgIGlmIChjb21wdXRlZF9zdHlsZS5wb3NpdGlvbiA9PT0gJ3N0YXRpYycpIHtcbiAgICAgICAgbm9kZS5zdHlsZS5wb3NpdGlvbiA9ICdyZWxhdGl2ZSc7XG4gICAgfVxuICAgIGNvbnN0IGlmcmFtZSA9IGVsZW1lbnQoJ2lmcmFtZScpO1xuICAgIGlmcmFtZS5zZXRBdHRyaWJ1dGUoJ3N0eWxlJywgJ2Rpc3BsYXk6IGJsb2NrOyBwb3NpdGlvbjogYWJzb2x1dGU7IHRvcDogMDsgbGVmdDogMDsgd2lkdGg6IDEwMCU7IGhlaWdodDogMTAwJTsgJyArXG4gICAgICAgICdvdmVyZmxvdzogaGlkZGVuOyBib3JkZXI6IDA7IG9wYWNpdHk6IDA7IHBvaW50ZXItZXZlbnRzOiBub25lOyB6LWluZGV4OiAtMTsnKTtcbiAgICBpZnJhbWUuc2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicsICd0cnVlJyk7XG4gICAgaWZyYW1lLnRhYkluZGV4ID0gLTE7XG4gICAgY29uc3QgY3Jvc3NvcmlnaW4gPSBpc19jcm9zc29yaWdpbigpO1xuICAgIGxldCB1bnN1YnNjcmliZTtcbiAgICBpZiAoY3Jvc3NvcmlnaW4pIHtcbiAgICAgICAgaWZyYW1lLnNyYyA9IFwiZGF0YTp0ZXh0L2h0bWwsPHNjcmlwdD5vbnJlc2l6ZT1mdW5jdGlvbigpe3BhcmVudC5wb3N0TWVzc2FnZSgwLCcqJyl9PC9zY3JpcHQ+XCI7XG4gICAgICAgIHVuc3Vic2NyaWJlID0gbGlzdGVuKHdpbmRvdywgJ21lc3NhZ2UnLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGlmIChldmVudC5zb3VyY2UgPT09IGlmcmFtZS5jb250ZW50V2luZG93KVxuICAgICAgICAgICAgICAgIGZuKCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgaWZyYW1lLnNyYyA9ICdhYm91dDpibGFuayc7XG4gICAgICAgIGlmcmFtZS5vbmxvYWQgPSAoKSA9PiB7XG4gICAgICAgICAgICB1bnN1YnNjcmliZSA9IGxpc3RlbihpZnJhbWUuY29udGVudFdpbmRvdywgJ3Jlc2l6ZScsIGZuKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgYXBwZW5kKG5vZGUsIGlmcmFtZSk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgaWYgKGNyb3Nzb3JpZ2luKSB7XG4gICAgICAgICAgICB1bnN1YnNjcmliZSgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHVuc3Vic2NyaWJlICYmIGlmcmFtZS5jb250ZW50V2luZG93KSB7XG4gICAgICAgICAgICB1bnN1YnNjcmliZSgpO1xuICAgICAgICB9XG4gICAgICAgIGRldGFjaChpZnJhbWUpO1xuICAgIH07XG59XG5mdW5jdGlvbiB0b2dnbGVfY2xhc3MoZWxlbWVudCwgbmFtZSwgdG9nZ2xlKSB7XG4gICAgZWxlbWVudC5jbGFzc0xpc3RbdG9nZ2xlID8gJ2FkZCcgOiAncmVtb3ZlJ10obmFtZSk7XG59XG5mdW5jdGlvbiBjdXN0b21fZXZlbnQodHlwZSwgZGV0YWlsLCB7IGJ1YmJsZXMgPSBmYWxzZSwgY2FuY2VsYWJsZSA9IGZhbHNlIH0gPSB7fSkge1xuICAgIGNvbnN0IGUgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnQ3VzdG9tRXZlbnQnKTtcbiAgICBlLmluaXRDdXN0b21FdmVudCh0eXBlLCBidWJibGVzLCBjYW5jZWxhYmxlLCBkZXRhaWwpO1xuICAgIHJldHVybiBlO1xufVxuZnVuY3Rpb24gcXVlcnlfc2VsZWN0b3JfYWxsKHNlbGVjdG9yLCBwYXJlbnQgPSBkb2N1bWVudC5ib2R5KSB7XG4gICAgcmV0dXJuIEFycmF5LmZyb20ocGFyZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpKTtcbn1cbmNsYXNzIEh0bWxUYWcge1xuICAgIGNvbnN0cnVjdG9yKGlzX3N2ZyA9IGZhbHNlKSB7XG4gICAgICAgIHRoaXMuaXNfc3ZnID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaXNfc3ZnID0gaXNfc3ZnO1xuICAgICAgICB0aGlzLmUgPSB0aGlzLm4gPSBudWxsO1xuICAgIH1cbiAgICBjKGh0bWwpIHtcbiAgICAgICAgdGhpcy5oKGh0bWwpO1xuICAgIH1cbiAgICBtKGh0bWwsIHRhcmdldCwgYW5jaG9yID0gbnVsbCkge1xuICAgICAgICBpZiAoIXRoaXMuZSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNfc3ZnKVxuICAgICAgICAgICAgICAgIHRoaXMuZSA9IHN2Z19lbGVtZW50KHRhcmdldC5ub2RlTmFtZSk7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgdGhpcy5lID0gZWxlbWVudCh0YXJnZXQubm9kZU5hbWUpO1xuICAgICAgICAgICAgdGhpcy50ID0gdGFyZ2V0O1xuICAgICAgICAgICAgdGhpcy5jKGh0bWwpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaShhbmNob3IpO1xuICAgIH1cbiAgICBoKGh0bWwpIHtcbiAgICAgICAgdGhpcy5lLmlubmVySFRNTCA9IGh0bWw7XG4gICAgICAgIHRoaXMubiA9IEFycmF5LmZyb20odGhpcy5lLmNoaWxkTm9kZXMpO1xuICAgIH1cbiAgICBpKGFuY2hvcikge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubi5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgaW5zZXJ0KHRoaXMudCwgdGhpcy5uW2ldLCBhbmNob3IpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHAoaHRtbCkge1xuICAgICAgICB0aGlzLmQoKTtcbiAgICAgICAgdGhpcy5oKGh0bWwpO1xuICAgICAgICB0aGlzLmkodGhpcy5hKTtcbiAgICB9XG4gICAgZCgpIHtcbiAgICAgICAgdGhpcy5uLmZvckVhY2goZGV0YWNoKTtcbiAgICB9XG59XG5jbGFzcyBIdG1sVGFnSHlkcmF0aW9uIGV4dGVuZHMgSHRtbFRhZyB7XG4gICAgY29uc3RydWN0b3IoY2xhaW1lZF9ub2RlcywgaXNfc3ZnID0gZmFsc2UpIHtcbiAgICAgICAgc3VwZXIoaXNfc3ZnKTtcbiAgICAgICAgdGhpcy5lID0gdGhpcy5uID0gbnVsbDtcbiAgICAgICAgdGhpcy5sID0gY2xhaW1lZF9ub2RlcztcbiAgICB9XG4gICAgYyhodG1sKSB7XG4gICAgICAgIGlmICh0aGlzLmwpIHtcbiAgICAgICAgICAgIHRoaXMubiA9IHRoaXMubDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHN1cGVyLmMoaHRtbCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaShhbmNob3IpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLm4ubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIGluc2VydF9oeWRyYXRpb24odGhpcy50LCB0aGlzLm5baV0sIGFuY2hvcik7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBhdHRyaWJ1dGVfdG9fb2JqZWN0KGF0dHJpYnV0ZXMpIHtcbiAgICBjb25zdCByZXN1bHQgPSB7fTtcbiAgICBmb3IgKGNvbnN0IGF0dHJpYnV0ZSBvZiBhdHRyaWJ1dGVzKSB7XG4gICAgICAgIHJlc3VsdFthdHRyaWJ1dGUubmFtZV0gPSBhdHRyaWJ1dGUudmFsdWU7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBnZXRfY3VzdG9tX2VsZW1lbnRzX3Nsb3RzKGVsZW1lbnQpIHtcbiAgICBjb25zdCByZXN1bHQgPSB7fTtcbiAgICBlbGVtZW50LmNoaWxkTm9kZXMuZm9yRWFjaCgobm9kZSkgPT4ge1xuICAgICAgICByZXN1bHRbbm9kZS5zbG90IHx8ICdkZWZhdWx0J10gPSB0cnVlO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG59XG5cbi8vIHdlIG5lZWQgdG8gc3RvcmUgdGhlIGluZm9ybWF0aW9uIGZvciBtdWx0aXBsZSBkb2N1bWVudHMgYmVjYXVzZSBhIFN2ZWx0ZSBhcHBsaWNhdGlvbiBjb3VsZCBhbHNvIGNvbnRhaW4gaWZyYW1lc1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL3N2ZWx0ZWpzL3N2ZWx0ZS9pc3N1ZXMvMzYyNFxuY29uc3QgbWFuYWdlZF9zdHlsZXMgPSBuZXcgTWFwKCk7XG5sZXQgYWN0aXZlID0gMDtcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9kYXJrc2t5YXBwL3N0cmluZy1oYXNoL2Jsb2IvbWFzdGVyL2luZGV4LmpzXG5mdW5jdGlvbiBoYXNoKHN0cikge1xuICAgIGxldCBoYXNoID0gNTM4MTtcbiAgICBsZXQgaSA9IHN0ci5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSlcbiAgICAgICAgaGFzaCA9ICgoaGFzaCA8PCA1KSAtIGhhc2gpIF4gc3RyLmNoYXJDb2RlQXQoaSk7XG4gICAgcmV0dXJuIGhhc2ggPj4+IDA7XG59XG5mdW5jdGlvbiBjcmVhdGVfc3R5bGVfaW5mb3JtYXRpb24oZG9jLCBub2RlKSB7XG4gICAgY29uc3QgaW5mbyA9IHsgc3R5bGVzaGVldDogYXBwZW5kX2VtcHR5X3N0eWxlc2hlZXQobm9kZSksIHJ1bGVzOiB7fSB9O1xuICAgIG1hbmFnZWRfc3R5bGVzLnNldChkb2MsIGluZm8pO1xuICAgIHJldHVybiBpbmZvO1xufVxuZnVuY3Rpb24gY3JlYXRlX3J1bGUobm9kZSwgYSwgYiwgZHVyYXRpb24sIGRlbGF5LCBlYXNlLCBmbiwgdWlkID0gMCkge1xuICAgIGNvbnN0IHN0ZXAgPSAxNi42NjYgLyBkdXJhdGlvbjtcbiAgICBsZXQga2V5ZnJhbWVzID0gJ3tcXG4nO1xuICAgIGZvciAobGV0IHAgPSAwOyBwIDw9IDE7IHAgKz0gc3RlcCkge1xuICAgICAgICBjb25zdCB0ID0gYSArIChiIC0gYSkgKiBlYXNlKHApO1xuICAgICAgICBrZXlmcmFtZXMgKz0gcCAqIDEwMCArIGAleyR7Zm4odCwgMSAtIHQpfX1cXG5gO1xuICAgIH1cbiAgICBjb25zdCBydWxlID0ga2V5ZnJhbWVzICsgYDEwMCUgeyR7Zm4oYiwgMSAtIGIpfX1cXG59YDtcbiAgICBjb25zdCBuYW1lID0gYF9fc3ZlbHRlXyR7aGFzaChydWxlKX1fJHt1aWR9YDtcbiAgICBjb25zdCBkb2MgPSBnZXRfcm9vdF9mb3Jfc3R5bGUobm9kZSk7XG4gICAgY29uc3QgeyBzdHlsZXNoZWV0LCBydWxlcyB9ID0gbWFuYWdlZF9zdHlsZXMuZ2V0KGRvYykgfHwgY3JlYXRlX3N0eWxlX2luZm9ybWF0aW9uKGRvYywgbm9kZSk7XG4gICAgaWYgKCFydWxlc1tuYW1lXSkge1xuICAgICAgICBydWxlc1tuYW1lXSA9IHRydWU7XG4gICAgICAgIHN0eWxlc2hlZXQuaW5zZXJ0UnVsZShgQGtleWZyYW1lcyAke25hbWV9ICR7cnVsZX1gLCBzdHlsZXNoZWV0LmNzc1J1bGVzLmxlbmd0aCk7XG4gICAgfVxuICAgIGNvbnN0IGFuaW1hdGlvbiA9IG5vZGUuc3R5bGUuYW5pbWF0aW9uIHx8ICcnO1xuICAgIG5vZGUuc3R5bGUuYW5pbWF0aW9uID0gYCR7YW5pbWF0aW9uID8gYCR7YW5pbWF0aW9ufSwgYCA6ICcnfSR7bmFtZX0gJHtkdXJhdGlvbn1tcyBsaW5lYXIgJHtkZWxheX1tcyAxIGJvdGhgO1xuICAgIGFjdGl2ZSArPSAxO1xuICAgIHJldHVybiBuYW1lO1xufVxuZnVuY3Rpb24gZGVsZXRlX3J1bGUobm9kZSwgbmFtZSkge1xuICAgIGNvbnN0IHByZXZpb3VzID0gKG5vZGUuc3R5bGUuYW5pbWF0aW9uIHx8ICcnKS5zcGxpdCgnLCAnKTtcbiAgICBjb25zdCBuZXh0ID0gcHJldmlvdXMuZmlsdGVyKG5hbWVcbiAgICAgICAgPyBhbmltID0+IGFuaW0uaW5kZXhPZihuYW1lKSA8IDAgLy8gcmVtb3ZlIHNwZWNpZmljIGFuaW1hdGlvblxuICAgICAgICA6IGFuaW0gPT4gYW5pbS5pbmRleE9mKCdfX3N2ZWx0ZScpID09PSAtMSAvLyByZW1vdmUgYWxsIFN2ZWx0ZSBhbmltYXRpb25zXG4gICAgKTtcbiAgICBjb25zdCBkZWxldGVkID0gcHJldmlvdXMubGVuZ3RoIC0gbmV4dC5sZW5ndGg7XG4gICAgaWYgKGRlbGV0ZWQpIHtcbiAgICAgICAgbm9kZS5zdHlsZS5hbmltYXRpb24gPSBuZXh0LmpvaW4oJywgJyk7XG4gICAgICAgIGFjdGl2ZSAtPSBkZWxldGVkO1xuICAgICAgICBpZiAoIWFjdGl2ZSlcbiAgICAgICAgICAgIGNsZWFyX3J1bGVzKCk7XG4gICAgfVxufVxuZnVuY3Rpb24gY2xlYXJfcnVsZXMoKSB7XG4gICAgcmFmKCgpID0+IHtcbiAgICAgICAgaWYgKGFjdGl2ZSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgbWFuYWdlZF9zdHlsZXMuZm9yRWFjaChpbmZvID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHsgc3R5bGVzaGVldCB9ID0gaW5mbztcbiAgICAgICAgICAgIGxldCBpID0gc3R5bGVzaGVldC5jc3NSdWxlcy5sZW5ndGg7XG4gICAgICAgICAgICB3aGlsZSAoaS0tKVxuICAgICAgICAgICAgICAgIHN0eWxlc2hlZXQuZGVsZXRlUnVsZShpKTtcbiAgICAgICAgICAgIGluZm8ucnVsZXMgPSB7fTtcbiAgICAgICAgfSk7XG4gICAgICAgIG1hbmFnZWRfc3R5bGVzLmNsZWFyKCk7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZV9hbmltYXRpb24obm9kZSwgZnJvbSwgZm4sIHBhcmFtcykge1xuICAgIGlmICghZnJvbSlcbiAgICAgICAgcmV0dXJuIG5vb3A7XG4gICAgY29uc3QgdG8gPSBub2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIGlmIChmcm9tLmxlZnQgPT09IHRvLmxlZnQgJiYgZnJvbS5yaWdodCA9PT0gdG8ucmlnaHQgJiYgZnJvbS50b3AgPT09IHRvLnRvcCAmJiBmcm9tLmJvdHRvbSA9PT0gdG8uYm90dG9tKVxuICAgICAgICByZXR1cm4gbm9vcDtcbiAgICBjb25zdCB7IGRlbGF5ID0gMCwgZHVyYXRpb24gPSAzMDAsIGVhc2luZyA9IGlkZW50aXR5LCBcbiAgICAvLyBAdHMtaWdub3JlIHRvZG86IHNob3VsZCB0aGlzIGJlIHNlcGFyYXRlZCBmcm9tIGRlc3RydWN0dXJpbmc/IE9yIHN0YXJ0L2VuZCBhZGRlZCB0byBwdWJsaWMgYXBpIGFuZCBkb2N1bWVudGF0aW9uP1xuICAgIHN0YXJ0OiBzdGFydF90aW1lID0gbm93KCkgKyBkZWxheSwgXG4gICAgLy8gQHRzLWlnbm9yZSB0b2RvOlxuICAgIGVuZCA9IHN0YXJ0X3RpbWUgKyBkdXJhdGlvbiwgdGljayA9IG5vb3AsIGNzcyB9ID0gZm4obm9kZSwgeyBmcm9tLCB0byB9LCBwYXJhbXMpO1xuICAgIGxldCBydW5uaW5nID0gdHJ1ZTtcbiAgICBsZXQgc3RhcnRlZCA9IGZhbHNlO1xuICAgIGxldCBuYW1lO1xuICAgIGZ1bmN0aW9uIHN0YXJ0KCkge1xuICAgICAgICBpZiAoY3NzKSB7XG4gICAgICAgICAgICBuYW1lID0gY3JlYXRlX3J1bGUobm9kZSwgMCwgMSwgZHVyYXRpb24sIGRlbGF5LCBlYXNpbmcsIGNzcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFkZWxheSkge1xuICAgICAgICAgICAgc3RhcnRlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gc3RvcCgpIHtcbiAgICAgICAgaWYgKGNzcylcbiAgICAgICAgICAgIGRlbGV0ZV9ydWxlKG5vZGUsIG5hbWUpO1xuICAgICAgICBydW5uaW5nID0gZmFsc2U7XG4gICAgfVxuICAgIGxvb3Aobm93ID0+IHtcbiAgICAgICAgaWYgKCFzdGFydGVkICYmIG5vdyA+PSBzdGFydF90aW1lKSB7XG4gICAgICAgICAgICBzdGFydGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RhcnRlZCAmJiBub3cgPj0gZW5kKSB7XG4gICAgICAgICAgICB0aWNrKDEsIDApO1xuICAgICAgICAgICAgc3RvcCgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghcnVubmluZykge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdGFydGVkKSB7XG4gICAgICAgICAgICBjb25zdCBwID0gbm93IC0gc3RhcnRfdGltZTtcbiAgICAgICAgICAgIGNvbnN0IHQgPSAwICsgMSAqIGVhc2luZyhwIC8gZHVyYXRpb24pO1xuICAgICAgICAgICAgdGljayh0LCAxIC0gdCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSk7XG4gICAgc3RhcnQoKTtcbiAgICB0aWNrKDAsIDEpO1xuICAgIHJldHVybiBzdG9wO1xufVxuZnVuY3Rpb24gZml4X3Bvc2l0aW9uKG5vZGUpIHtcbiAgICBjb25zdCBzdHlsZSA9IGdldENvbXB1dGVkU3R5bGUobm9kZSk7XG4gICAgaWYgKHN0eWxlLnBvc2l0aW9uICE9PSAnYWJzb2x1dGUnICYmIHN0eWxlLnBvc2l0aW9uICE9PSAnZml4ZWQnKSB7XG4gICAgICAgIGNvbnN0IHsgd2lkdGgsIGhlaWdodCB9ID0gc3R5bGU7XG4gICAgICAgIGNvbnN0IGEgPSBub2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICBub2RlLnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcbiAgICAgICAgbm9kZS5zdHlsZS53aWR0aCA9IHdpZHRoO1xuICAgICAgICBub2RlLnN0eWxlLmhlaWdodCA9IGhlaWdodDtcbiAgICAgICAgYWRkX3RyYW5zZm9ybShub2RlLCBhKTtcbiAgICB9XG59XG5mdW5jdGlvbiBhZGRfdHJhbnNmb3JtKG5vZGUsIGEpIHtcbiAgICBjb25zdCBiID0gbm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBpZiAoYS5sZWZ0ICE9PSBiLmxlZnQgfHwgYS50b3AgIT09IGIudG9wKSB7XG4gICAgICAgIGNvbnN0IHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShub2RlKTtcbiAgICAgICAgY29uc3QgdHJhbnNmb3JtID0gc3R5bGUudHJhbnNmb3JtID09PSAnbm9uZScgPyAnJyA6IHN0eWxlLnRyYW5zZm9ybTtcbiAgICAgICAgbm9kZS5zdHlsZS50cmFuc2Zvcm0gPSBgJHt0cmFuc2Zvcm19IHRyYW5zbGF0ZSgke2EubGVmdCAtIGIubGVmdH1weCwgJHthLnRvcCAtIGIudG9wfXB4KWA7XG4gICAgfVxufVxuXG5sZXQgY3VycmVudF9jb21wb25lbnQ7XG5mdW5jdGlvbiBzZXRfY3VycmVudF9jb21wb25lbnQoY29tcG9uZW50KSB7XG4gICAgY3VycmVudF9jb21wb25lbnQgPSBjb21wb25lbnQ7XG59XG5mdW5jdGlvbiBnZXRfY3VycmVudF9jb21wb25lbnQoKSB7XG4gICAgaWYgKCFjdXJyZW50X2NvbXBvbmVudClcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGdW5jdGlvbiBjYWxsZWQgb3V0c2lkZSBjb21wb25lbnQgaW5pdGlhbGl6YXRpb24nKTtcbiAgICByZXR1cm4gY3VycmVudF9jb21wb25lbnQ7XG59XG5mdW5jdGlvbiBiZWZvcmVVcGRhdGUoZm4pIHtcbiAgICBnZXRfY3VycmVudF9jb21wb25lbnQoKS4kJC5iZWZvcmVfdXBkYXRlLnB1c2goZm4pO1xufVxuZnVuY3Rpb24gb25Nb3VudChmbikge1xuICAgIGdldF9jdXJyZW50X2NvbXBvbmVudCgpLiQkLm9uX21vdW50LnB1c2goZm4pO1xufVxuZnVuY3Rpb24gYWZ0ZXJVcGRhdGUoZm4pIHtcbiAgICBnZXRfY3VycmVudF9jb21wb25lbnQoKS4kJC5hZnRlcl91cGRhdGUucHVzaChmbik7XG59XG5mdW5jdGlvbiBvbkRlc3Ryb3koZm4pIHtcbiAgICBnZXRfY3VycmVudF9jb21wb25lbnQoKS4kJC5vbl9kZXN0cm95LnB1c2goZm4pO1xufVxuZnVuY3Rpb24gY3JlYXRlRXZlbnREaXNwYXRjaGVyKCkge1xuICAgIGNvbnN0IGNvbXBvbmVudCA9IGdldF9jdXJyZW50X2NvbXBvbmVudCgpO1xuICAgIHJldHVybiAodHlwZSwgZGV0YWlsLCB7IGNhbmNlbGFibGUgPSBmYWxzZSB9ID0ge30pID0+IHtcbiAgICAgICAgY29uc3QgY2FsbGJhY2tzID0gY29tcG9uZW50LiQkLmNhbGxiYWNrc1t0eXBlXTtcbiAgICAgICAgaWYgKGNhbGxiYWNrcykge1xuICAgICAgICAgICAgLy8gVE9ETyBhcmUgdGhlcmUgc2l0dWF0aW9ucyB3aGVyZSBldmVudHMgY291bGQgYmUgZGlzcGF0Y2hlZFxuICAgICAgICAgICAgLy8gaW4gYSBzZXJ2ZXIgKG5vbi1ET00pIGVudmlyb25tZW50P1xuICAgICAgICAgICAgY29uc3QgZXZlbnQgPSBjdXN0b21fZXZlbnQodHlwZSwgZGV0YWlsLCB7IGNhbmNlbGFibGUgfSk7XG4gICAgICAgICAgICBjYWxsYmFja3Muc2xpY2UoKS5mb3JFYWNoKGZuID0+IHtcbiAgICAgICAgICAgICAgICBmbi5jYWxsKGNvbXBvbmVudCwgZXZlbnQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gIWV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbn1cbmZ1bmN0aW9uIHNldENvbnRleHQoa2V5LCBjb250ZXh0KSB7XG4gICAgZ2V0X2N1cnJlbnRfY29tcG9uZW50KCkuJCQuY29udGV4dC5zZXQoa2V5LCBjb250ZXh0KTtcbiAgICByZXR1cm4gY29udGV4dDtcbn1cbmZ1bmN0aW9uIGdldENvbnRleHQoa2V5KSB7XG4gICAgcmV0dXJuIGdldF9jdXJyZW50X2NvbXBvbmVudCgpLiQkLmNvbnRleHQuZ2V0KGtleSk7XG59XG5mdW5jdGlvbiBnZXRBbGxDb250ZXh0cygpIHtcbiAgICByZXR1cm4gZ2V0X2N1cnJlbnRfY29tcG9uZW50KCkuJCQuY29udGV4dDtcbn1cbmZ1bmN0aW9uIGhhc0NvbnRleHQoa2V5KSB7XG4gICAgcmV0dXJuIGdldF9jdXJyZW50X2NvbXBvbmVudCgpLiQkLmNvbnRleHQuaGFzKGtleSk7XG59XG4vLyBUT0RPIGZpZ3VyZSBvdXQgaWYgd2Ugc3RpbGwgd2FudCB0byBzdXBwb3J0XG4vLyBzaG9ydGhhbmQgZXZlbnRzLCBvciBpZiB3ZSB3YW50IHRvIGltcGxlbWVudFxuLy8gYSByZWFsIGJ1YmJsaW5nIG1lY2hhbmlzbVxuZnVuY3Rpb24gYnViYmxlKGNvbXBvbmVudCwgZXZlbnQpIHtcbiAgICBjb25zdCBjYWxsYmFja3MgPSBjb21wb25lbnQuJCQuY2FsbGJhY2tzW2V2ZW50LnR5cGVdO1xuICAgIGlmIChjYWxsYmFja3MpIHtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBjYWxsYmFja3Muc2xpY2UoKS5mb3JFYWNoKGZuID0+IGZuLmNhbGwodGhpcywgZXZlbnQpKTtcbiAgICB9XG59XG5cbmNvbnN0IGRpcnR5X2NvbXBvbmVudHMgPSBbXTtcbmNvbnN0IGludHJvcyA9IHsgZW5hYmxlZDogZmFsc2UgfTtcbmNvbnN0IGJpbmRpbmdfY2FsbGJhY2tzID0gW107XG5jb25zdCByZW5kZXJfY2FsbGJhY2tzID0gW107XG5jb25zdCBmbHVzaF9jYWxsYmFja3MgPSBbXTtcbmNvbnN0IHJlc29sdmVkX3Byb21pc2UgPSBQcm9taXNlLnJlc29sdmUoKTtcbmxldCB1cGRhdGVfc2NoZWR1bGVkID0gZmFsc2U7XG5mdW5jdGlvbiBzY2hlZHVsZV91cGRhdGUoKSB7XG4gICAgaWYgKCF1cGRhdGVfc2NoZWR1bGVkKSB7XG4gICAgICAgIHVwZGF0ZV9zY2hlZHVsZWQgPSB0cnVlO1xuICAgICAgICByZXNvbHZlZF9wcm9taXNlLnRoZW4oZmx1c2gpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHRpY2soKSB7XG4gICAgc2NoZWR1bGVfdXBkYXRlKCk7XG4gICAgcmV0dXJuIHJlc29sdmVkX3Byb21pc2U7XG59XG5mdW5jdGlvbiBhZGRfcmVuZGVyX2NhbGxiYWNrKGZuKSB7XG4gICAgcmVuZGVyX2NhbGxiYWNrcy5wdXNoKGZuKTtcbn1cbmZ1bmN0aW9uIGFkZF9mbHVzaF9jYWxsYmFjayhmbikge1xuICAgIGZsdXNoX2NhbGxiYWNrcy5wdXNoKGZuKTtcbn1cbi8vIGZsdXNoKCkgY2FsbHMgY2FsbGJhY2tzIGluIHRoaXMgb3JkZXI6XG4vLyAxLiBBbGwgYmVmb3JlVXBkYXRlIGNhbGxiYWNrcywgaW4gb3JkZXI6IHBhcmVudHMgYmVmb3JlIGNoaWxkcmVuXG4vLyAyLiBBbGwgYmluZDp0aGlzIGNhbGxiYWNrcywgaW4gcmV2ZXJzZSBvcmRlcjogY2hpbGRyZW4gYmVmb3JlIHBhcmVudHMuXG4vLyAzLiBBbGwgYWZ0ZXJVcGRhdGUgY2FsbGJhY2tzLCBpbiBvcmRlcjogcGFyZW50cyBiZWZvcmUgY2hpbGRyZW4uIEVYQ0VQVFxuLy8gICAgZm9yIGFmdGVyVXBkYXRlcyBjYWxsZWQgZHVyaW5nIHRoZSBpbml0aWFsIG9uTW91bnQsIHdoaWNoIGFyZSBjYWxsZWQgaW5cbi8vICAgIHJldmVyc2Ugb3JkZXI6IGNoaWxkcmVuIGJlZm9yZSBwYXJlbnRzLlxuLy8gU2luY2UgY2FsbGJhY2tzIG1pZ2h0IHVwZGF0ZSBjb21wb25lbnQgdmFsdWVzLCB3aGljaCBjb3VsZCB0cmlnZ2VyIGFub3RoZXJcbi8vIGNhbGwgdG8gZmx1c2goKSwgdGhlIGZvbGxvd2luZyBzdGVwcyBndWFyZCBhZ2FpbnN0IHRoaXM6XG4vLyAxLiBEdXJpbmcgYmVmb3JlVXBkYXRlLCBhbnkgdXBkYXRlZCBjb21wb25lbnRzIHdpbGwgYmUgYWRkZWQgdG8gdGhlXG4vLyAgICBkaXJ0eV9jb21wb25lbnRzIGFycmF5IGFuZCB3aWxsIGNhdXNlIGEgcmVlbnRyYW50IGNhbGwgdG8gZmx1c2goKS4gQmVjYXVzZVxuLy8gICAgdGhlIGZsdXNoIGluZGV4IGlzIGtlcHQgb3V0c2lkZSB0aGUgZnVuY3Rpb24sIHRoZSByZWVudHJhbnQgY2FsbCB3aWxsIHBpY2tcbi8vICAgIHVwIHdoZXJlIHRoZSBlYXJsaWVyIGNhbGwgbGVmdCBvZmYgYW5kIGdvIHRocm91Z2ggYWxsIGRpcnR5IGNvbXBvbmVudHMuIFRoZVxuLy8gICAgY3VycmVudF9jb21wb25lbnQgdmFsdWUgaXMgc2F2ZWQgYW5kIHJlc3RvcmVkIHNvIHRoYXQgdGhlIHJlZW50cmFudCBjYWxsIHdpbGxcbi8vICAgIG5vdCBpbnRlcmZlcmUgd2l0aCB0aGUgXCJwYXJlbnRcIiBmbHVzaCgpIGNhbGwuXG4vLyAyLiBiaW5kOnRoaXMgY2FsbGJhY2tzIGNhbm5vdCB0cmlnZ2VyIG5ldyBmbHVzaCgpIGNhbGxzLlxuLy8gMy4gRHVyaW5nIGFmdGVyVXBkYXRlLCBhbnkgdXBkYXRlZCBjb21wb25lbnRzIHdpbGwgTk9UIGhhdmUgdGhlaXIgYWZ0ZXJVcGRhdGVcbi8vICAgIGNhbGxiYWNrIGNhbGxlZCBhIHNlY29uZCB0aW1lOyB0aGUgc2Vlbl9jYWxsYmFja3Mgc2V0LCBvdXRzaWRlIHRoZSBmbHVzaCgpXG4vLyAgICBmdW5jdGlvbiwgZ3VhcmFudGVlcyB0aGlzIGJlaGF2aW9yLlxuY29uc3Qgc2Vlbl9jYWxsYmFja3MgPSBuZXcgU2V0KCk7XG5sZXQgZmx1c2hpZHggPSAwOyAvLyBEbyAqbm90KiBtb3ZlIHRoaXMgaW5zaWRlIHRoZSBmbHVzaCgpIGZ1bmN0aW9uXG5mdW5jdGlvbiBmbHVzaCgpIHtcbiAgICBjb25zdCBzYXZlZF9jb21wb25lbnQgPSBjdXJyZW50X2NvbXBvbmVudDtcbiAgICBkbyB7XG4gICAgICAgIC8vIGZpcnN0LCBjYWxsIGJlZm9yZVVwZGF0ZSBmdW5jdGlvbnNcbiAgICAgICAgLy8gYW5kIHVwZGF0ZSBjb21wb25lbnRzXG4gICAgICAgIHdoaWxlIChmbHVzaGlkeCA8IGRpcnR5X2NvbXBvbmVudHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25zdCBjb21wb25lbnQgPSBkaXJ0eV9jb21wb25lbnRzW2ZsdXNoaWR4XTtcbiAgICAgICAgICAgIGZsdXNoaWR4Kys7XG4gICAgICAgICAgICBzZXRfY3VycmVudF9jb21wb25lbnQoY29tcG9uZW50KTtcbiAgICAgICAgICAgIHVwZGF0ZShjb21wb25lbnQuJCQpO1xuICAgICAgICB9XG4gICAgICAgIHNldF9jdXJyZW50X2NvbXBvbmVudChudWxsKTtcbiAgICAgICAgZGlydHlfY29tcG9uZW50cy5sZW5ndGggPSAwO1xuICAgICAgICBmbHVzaGlkeCA9IDA7XG4gICAgICAgIHdoaWxlIChiaW5kaW5nX2NhbGxiYWNrcy5sZW5ndGgpXG4gICAgICAgICAgICBiaW5kaW5nX2NhbGxiYWNrcy5wb3AoKSgpO1xuICAgICAgICAvLyB0aGVuLCBvbmNlIGNvbXBvbmVudHMgYXJlIHVwZGF0ZWQsIGNhbGxcbiAgICAgICAgLy8gYWZ0ZXJVcGRhdGUgZnVuY3Rpb25zLiBUaGlzIG1heSBjYXVzZVxuICAgICAgICAvLyBzdWJzZXF1ZW50IHVwZGF0ZXMuLi5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByZW5kZXJfY2FsbGJhY2tzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICBjb25zdCBjYWxsYmFjayA9IHJlbmRlcl9jYWxsYmFja3NbaV07XG4gICAgICAgICAgICBpZiAoIXNlZW5fY2FsbGJhY2tzLmhhcyhjYWxsYmFjaykpIHtcbiAgICAgICAgICAgICAgICAvLyAuLi5zbyBndWFyZCBhZ2FpbnN0IGluZmluaXRlIGxvb3BzXG4gICAgICAgICAgICAgICAgc2Vlbl9jYWxsYmFja3MuYWRkKGNhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJlbmRlcl9jYWxsYmFja3MubGVuZ3RoID0gMDtcbiAgICB9IHdoaWxlIChkaXJ0eV9jb21wb25lbnRzLmxlbmd0aCk7XG4gICAgd2hpbGUgKGZsdXNoX2NhbGxiYWNrcy5sZW5ndGgpIHtcbiAgICAgICAgZmx1c2hfY2FsbGJhY2tzLnBvcCgpKCk7XG4gICAgfVxuICAgIHVwZGF0ZV9zY2hlZHVsZWQgPSBmYWxzZTtcbiAgICBzZWVuX2NhbGxiYWNrcy5jbGVhcigpO1xuICAgIHNldF9jdXJyZW50X2NvbXBvbmVudChzYXZlZF9jb21wb25lbnQpO1xufVxuZnVuY3Rpb24gdXBkYXRlKCQkKSB7XG4gICAgaWYgKCQkLmZyYWdtZW50ICE9PSBudWxsKSB7XG4gICAgICAgICQkLnVwZGF0ZSgpO1xuICAgICAgICBydW5fYWxsKCQkLmJlZm9yZV91cGRhdGUpO1xuICAgICAgICBjb25zdCBkaXJ0eSA9ICQkLmRpcnR5O1xuICAgICAgICAkJC5kaXJ0eSA9IFstMV07XG4gICAgICAgICQkLmZyYWdtZW50ICYmICQkLmZyYWdtZW50LnAoJCQuY3R4LCBkaXJ0eSk7XG4gICAgICAgICQkLmFmdGVyX3VwZGF0ZS5mb3JFYWNoKGFkZF9yZW5kZXJfY2FsbGJhY2spO1xuICAgIH1cbn1cblxubGV0IHByb21pc2U7XG5mdW5jdGlvbiB3YWl0KCkge1xuICAgIGlmICghcHJvbWlzZSkge1xuICAgICAgICBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgICAgIHByb21pc2UudGhlbigoKSA9PiB7XG4gICAgICAgICAgICBwcm9taXNlID0gbnVsbDtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBwcm9taXNlO1xufVxuZnVuY3Rpb24gZGlzcGF0Y2gobm9kZSwgZGlyZWN0aW9uLCBraW5kKSB7XG4gICAgbm9kZS5kaXNwYXRjaEV2ZW50KGN1c3RvbV9ldmVudChgJHtkaXJlY3Rpb24gPyAnaW50cm8nIDogJ291dHJvJ30ke2tpbmR9YCkpO1xufVxuY29uc3Qgb3V0cm9pbmcgPSBuZXcgU2V0KCk7XG5sZXQgb3V0cm9zO1xuZnVuY3Rpb24gZ3JvdXBfb3V0cm9zKCkge1xuICAgIG91dHJvcyA9IHtcbiAgICAgICAgcjogMCxcbiAgICAgICAgYzogW10sXG4gICAgICAgIHA6IG91dHJvcyAvLyBwYXJlbnQgZ3JvdXBcbiAgICB9O1xufVxuZnVuY3Rpb24gY2hlY2tfb3V0cm9zKCkge1xuICAgIGlmICghb3V0cm9zLnIpIHtcbiAgICAgICAgcnVuX2FsbChvdXRyb3MuYyk7XG4gICAgfVxuICAgIG91dHJvcyA9IG91dHJvcy5wO1xufVxuZnVuY3Rpb24gdHJhbnNpdGlvbl9pbihibG9jaywgbG9jYWwpIHtcbiAgICBpZiAoYmxvY2sgJiYgYmxvY2suaSkge1xuICAgICAgICBvdXRyb2luZy5kZWxldGUoYmxvY2spO1xuICAgICAgICBibG9jay5pKGxvY2FsKTtcbiAgICB9XG59XG5mdW5jdGlvbiB0cmFuc2l0aW9uX291dChibG9jaywgbG9jYWwsIGRldGFjaCwgY2FsbGJhY2spIHtcbiAgICBpZiAoYmxvY2sgJiYgYmxvY2subykge1xuICAgICAgICBpZiAob3V0cm9pbmcuaGFzKGJsb2NrKSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgb3V0cm9pbmcuYWRkKGJsb2NrKTtcbiAgICAgICAgb3V0cm9zLmMucHVzaCgoKSA9PiB7XG4gICAgICAgICAgICBvdXRyb2luZy5kZWxldGUoYmxvY2spO1xuICAgICAgICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGRldGFjaClcbiAgICAgICAgICAgICAgICAgICAgYmxvY2suZCgxKTtcbiAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgYmxvY2subyhsb2NhbCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgIGNhbGxiYWNrKCk7XG4gICAgfVxufVxuY29uc3QgbnVsbF90cmFuc2l0aW9uID0geyBkdXJhdGlvbjogMCB9O1xuZnVuY3Rpb24gY3JlYXRlX2luX3RyYW5zaXRpb24obm9kZSwgZm4sIHBhcmFtcykge1xuICAgIGxldCBjb25maWcgPSBmbihub2RlLCBwYXJhbXMpO1xuICAgIGxldCBydW5uaW5nID0gZmFsc2U7XG4gICAgbGV0IGFuaW1hdGlvbl9uYW1lO1xuICAgIGxldCB0YXNrO1xuICAgIGxldCB1aWQgPSAwO1xuICAgIGZ1bmN0aW9uIGNsZWFudXAoKSB7XG4gICAgICAgIGlmIChhbmltYXRpb25fbmFtZSlcbiAgICAgICAgICAgIGRlbGV0ZV9ydWxlKG5vZGUsIGFuaW1hdGlvbl9uYW1lKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ28oKSB7XG4gICAgICAgIGNvbnN0IHsgZGVsYXkgPSAwLCBkdXJhdGlvbiA9IDMwMCwgZWFzaW5nID0gaWRlbnRpdHksIHRpY2sgPSBub29wLCBjc3MgfSA9IGNvbmZpZyB8fCBudWxsX3RyYW5zaXRpb247XG4gICAgICAgIGlmIChjc3MpXG4gICAgICAgICAgICBhbmltYXRpb25fbmFtZSA9IGNyZWF0ZV9ydWxlKG5vZGUsIDAsIDEsIGR1cmF0aW9uLCBkZWxheSwgZWFzaW5nLCBjc3MsIHVpZCsrKTtcbiAgICAgICAgdGljaygwLCAxKTtcbiAgICAgICAgY29uc3Qgc3RhcnRfdGltZSA9IG5vdygpICsgZGVsYXk7XG4gICAgICAgIGNvbnN0IGVuZF90aW1lID0gc3RhcnRfdGltZSArIGR1cmF0aW9uO1xuICAgICAgICBpZiAodGFzaylcbiAgICAgICAgICAgIHRhc2suYWJvcnQoKTtcbiAgICAgICAgcnVubmluZyA9IHRydWU7XG4gICAgICAgIGFkZF9yZW5kZXJfY2FsbGJhY2soKCkgPT4gZGlzcGF0Y2gobm9kZSwgdHJ1ZSwgJ3N0YXJ0JykpO1xuICAgICAgICB0YXNrID0gbG9vcChub3cgPT4ge1xuICAgICAgICAgICAgaWYgKHJ1bm5pbmcpIHtcbiAgICAgICAgICAgICAgICBpZiAobm93ID49IGVuZF90aW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIHRpY2soMSwgMCk7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoKG5vZGUsIHRydWUsICdlbmQnKTtcbiAgICAgICAgICAgICAgICAgICAgY2xlYW51cCgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcnVubmluZyA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobm93ID49IHN0YXJ0X3RpbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdCA9IGVhc2luZygobm93IC0gc3RhcnRfdGltZSkgLyBkdXJhdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIHRpY2sodCwgMSAtIHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBydW5uaW5nO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgbGV0IHN0YXJ0ZWQgPSBmYWxzZTtcbiAgICByZXR1cm4ge1xuICAgICAgICBzdGFydCgpIHtcbiAgICAgICAgICAgIGlmIChzdGFydGVkKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIHN0YXJ0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgZGVsZXRlX3J1bGUobm9kZSk7XG4gICAgICAgICAgICBpZiAoaXNfZnVuY3Rpb24oY29uZmlnKSkge1xuICAgICAgICAgICAgICAgIGNvbmZpZyA9IGNvbmZpZygpO1xuICAgICAgICAgICAgICAgIHdhaXQoKS50aGVuKGdvKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGdvKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGludmFsaWRhdGUoKSB7XG4gICAgICAgICAgICBzdGFydGVkID0gZmFsc2U7XG4gICAgICAgIH0sXG4gICAgICAgIGVuZCgpIHtcbiAgICAgICAgICAgIGlmIChydW5uaW5nKSB7XG4gICAgICAgICAgICAgICAgY2xlYW51cCgpO1xuICAgICAgICAgICAgICAgIHJ1bm5pbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG59XG5mdW5jdGlvbiBjcmVhdGVfb3V0X3RyYW5zaXRpb24obm9kZSwgZm4sIHBhcmFtcykge1xuICAgIGxldCBjb25maWcgPSBmbihub2RlLCBwYXJhbXMpO1xuICAgIGxldCBydW5uaW5nID0gdHJ1ZTtcbiAgICBsZXQgYW5pbWF0aW9uX25hbWU7XG4gICAgY29uc3QgZ3JvdXAgPSBvdXRyb3M7XG4gICAgZ3JvdXAuciArPSAxO1xuICAgIGZ1bmN0aW9uIGdvKCkge1xuICAgICAgICBjb25zdCB7IGRlbGF5ID0gMCwgZHVyYXRpb24gPSAzMDAsIGVhc2luZyA9IGlkZW50aXR5LCB0aWNrID0gbm9vcCwgY3NzIH0gPSBjb25maWcgfHwgbnVsbF90cmFuc2l0aW9uO1xuICAgICAgICBpZiAoY3NzKVxuICAgICAgICAgICAgYW5pbWF0aW9uX25hbWUgPSBjcmVhdGVfcnVsZShub2RlLCAxLCAwLCBkdXJhdGlvbiwgZGVsYXksIGVhc2luZywgY3NzKTtcbiAgICAgICAgY29uc3Qgc3RhcnRfdGltZSA9IG5vdygpICsgZGVsYXk7XG4gICAgICAgIGNvbnN0IGVuZF90aW1lID0gc3RhcnRfdGltZSArIGR1cmF0aW9uO1xuICAgICAgICBhZGRfcmVuZGVyX2NhbGxiYWNrKCgpID0+IGRpc3BhdGNoKG5vZGUsIGZhbHNlLCAnc3RhcnQnKSk7XG4gICAgICAgIGxvb3Aobm93ID0+IHtcbiAgICAgICAgICAgIGlmIChydW5uaW5nKSB7XG4gICAgICAgICAgICAgICAgaWYgKG5vdyA+PSBlbmRfdGltZSkge1xuICAgICAgICAgICAgICAgICAgICB0aWNrKDAsIDEpO1xuICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaChub2RlLCBmYWxzZSwgJ2VuZCcpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIS0tZ3JvdXAucikge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGhpcyB3aWxsIHJlc3VsdCBpbiBgZW5kKClgIGJlaW5nIGNhbGxlZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNvIHdlIGRvbid0IG5lZWQgdG8gY2xlYW4gdXAgaGVyZVxuICAgICAgICAgICAgICAgICAgICAgICAgcnVuX2FsbChncm91cC5jKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChub3cgPj0gc3RhcnRfdGltZSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0ID0gZWFzaW5nKChub3cgLSBzdGFydF90aW1lKSAvIGR1cmF0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgdGljaygxIC0gdCwgdCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJ1bm5pbmc7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoaXNfZnVuY3Rpb24oY29uZmlnKSkge1xuICAgICAgICB3YWl0KCkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICBjb25maWcgPSBjb25maWcoKTtcbiAgICAgICAgICAgIGdvKCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZ28oKTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgZW5kKHJlc2V0KSB7XG4gICAgICAgICAgICBpZiAocmVzZXQgJiYgY29uZmlnLnRpY2spIHtcbiAgICAgICAgICAgICAgICBjb25maWcudGljaygxLCAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChydW5uaW5nKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFuaW1hdGlvbl9uYW1lKVxuICAgICAgICAgICAgICAgICAgICBkZWxldGVfcnVsZShub2RlLCBhbmltYXRpb25fbmFtZSk7XG4gICAgICAgICAgICAgICAgcnVubmluZyA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZV9iaWRpcmVjdGlvbmFsX3RyYW5zaXRpb24obm9kZSwgZm4sIHBhcmFtcywgaW50cm8pIHtcbiAgICBsZXQgY29uZmlnID0gZm4obm9kZSwgcGFyYW1zKTtcbiAgICBsZXQgdCA9IGludHJvID8gMCA6IDE7XG4gICAgbGV0IHJ1bm5pbmdfcHJvZ3JhbSA9IG51bGw7XG4gICAgbGV0IHBlbmRpbmdfcHJvZ3JhbSA9IG51bGw7XG4gICAgbGV0IGFuaW1hdGlvbl9uYW1lID0gbnVsbDtcbiAgICBmdW5jdGlvbiBjbGVhcl9hbmltYXRpb24oKSB7XG4gICAgICAgIGlmIChhbmltYXRpb25fbmFtZSlcbiAgICAgICAgICAgIGRlbGV0ZV9ydWxlKG5vZGUsIGFuaW1hdGlvbl9uYW1lKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gaW5pdChwcm9ncmFtLCBkdXJhdGlvbikge1xuICAgICAgICBjb25zdCBkID0gKHByb2dyYW0uYiAtIHQpO1xuICAgICAgICBkdXJhdGlvbiAqPSBNYXRoLmFicyhkKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGE6IHQsXG4gICAgICAgICAgICBiOiBwcm9ncmFtLmIsXG4gICAgICAgICAgICBkLFxuICAgICAgICAgICAgZHVyYXRpb24sXG4gICAgICAgICAgICBzdGFydDogcHJvZ3JhbS5zdGFydCxcbiAgICAgICAgICAgIGVuZDogcHJvZ3JhbS5zdGFydCArIGR1cmF0aW9uLFxuICAgICAgICAgICAgZ3JvdXA6IHByb2dyYW0uZ3JvdXBcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZ28oYikge1xuICAgICAgICBjb25zdCB7IGRlbGF5ID0gMCwgZHVyYXRpb24gPSAzMDAsIGVhc2luZyA9IGlkZW50aXR5LCB0aWNrID0gbm9vcCwgY3NzIH0gPSBjb25maWcgfHwgbnVsbF90cmFuc2l0aW9uO1xuICAgICAgICBjb25zdCBwcm9ncmFtID0ge1xuICAgICAgICAgICAgc3RhcnQ6IG5vdygpICsgZGVsYXksXG4gICAgICAgICAgICBiXG4gICAgICAgIH07XG4gICAgICAgIGlmICghYikge1xuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZSB0b2RvOiBpbXByb3ZlIHR5cGluZ3NcbiAgICAgICAgICAgIHByb2dyYW0uZ3JvdXAgPSBvdXRyb3M7XG4gICAgICAgICAgICBvdXRyb3MuciArPSAxO1xuICAgICAgICB9XG4gICAgICAgIGlmIChydW5uaW5nX3Byb2dyYW0gfHwgcGVuZGluZ19wcm9ncmFtKSB7XG4gICAgICAgICAgICBwZW5kaW5nX3Byb2dyYW0gPSBwcm9ncmFtO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gaWYgdGhpcyBpcyBhbiBpbnRybywgYW5kIHRoZXJlJ3MgYSBkZWxheSwgd2UgbmVlZCB0byBkb1xuICAgICAgICAgICAgLy8gYW4gaW5pdGlhbCB0aWNrIGFuZC9vciBhcHBseSBDU1MgYW5pbWF0aW9uIGltbWVkaWF0ZWx5XG4gICAgICAgICAgICBpZiAoY3NzKSB7XG4gICAgICAgICAgICAgICAgY2xlYXJfYW5pbWF0aW9uKCk7XG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uX25hbWUgPSBjcmVhdGVfcnVsZShub2RlLCB0LCBiLCBkdXJhdGlvbiwgZGVsYXksIGVhc2luZywgY3NzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChiKVxuICAgICAgICAgICAgICAgIHRpY2soMCwgMSk7XG4gICAgICAgICAgICBydW5uaW5nX3Byb2dyYW0gPSBpbml0KHByb2dyYW0sIGR1cmF0aW9uKTtcbiAgICAgICAgICAgIGFkZF9yZW5kZXJfY2FsbGJhY2soKCkgPT4gZGlzcGF0Y2gobm9kZSwgYiwgJ3N0YXJ0JykpO1xuICAgICAgICAgICAgbG9vcChub3cgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChwZW5kaW5nX3Byb2dyYW0gJiYgbm93ID4gcGVuZGluZ19wcm9ncmFtLnN0YXJ0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJ1bm5pbmdfcHJvZ3JhbSA9IGluaXQocGVuZGluZ19wcm9ncmFtLCBkdXJhdGlvbik7XG4gICAgICAgICAgICAgICAgICAgIHBlbmRpbmdfcHJvZ3JhbSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BhdGNoKG5vZGUsIHJ1bm5pbmdfcHJvZ3JhbS5iLCAnc3RhcnQnKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNzcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJfYW5pbWF0aW9uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBhbmltYXRpb25fbmFtZSA9IGNyZWF0ZV9ydWxlKG5vZGUsIHQsIHJ1bm5pbmdfcHJvZ3JhbS5iLCBydW5uaW5nX3Byb2dyYW0uZHVyYXRpb24sIDAsIGVhc2luZywgY29uZmlnLmNzcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHJ1bm5pbmdfcHJvZ3JhbSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAobm93ID49IHJ1bm5pbmdfcHJvZ3JhbS5lbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpY2sodCA9IHJ1bm5pbmdfcHJvZ3JhbS5iLCAxIC0gdCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNwYXRjaChub2RlLCBydW5uaW5nX3Byb2dyYW0uYiwgJ2VuZCcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFwZW5kaW5nX3Byb2dyYW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB3ZSdyZSBkb25lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJ1bm5pbmdfcHJvZ3JhbS5iKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGludHJvIFx1MjAxNCB3ZSBjYW4gdGlkeSB1cCBpbW1lZGlhdGVseVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGVhcl9hbmltYXRpb24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG91dHJvIFx1MjAxNCBuZWVkcyB0byBiZSBjb29yZGluYXRlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIS0tcnVubmluZ19wcm9ncmFtLmdyb3VwLnIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBydW5fYWxsKHJ1bm5pbmdfcHJvZ3JhbS5ncm91cC5jKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBydW5uaW5nX3Byb2dyYW0gPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKG5vdyA+PSBydW5uaW5nX3Byb2dyYW0uc3RhcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHAgPSBub3cgLSBydW5uaW5nX3Byb2dyYW0uc3RhcnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ID0gcnVubmluZ19wcm9ncmFtLmEgKyBydW5uaW5nX3Byb2dyYW0uZCAqIGVhc2luZyhwIC8gcnVubmluZ19wcm9ncmFtLmR1cmF0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpY2sodCwgMSAtIHQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiAhIShydW5uaW5nX3Byb2dyYW0gfHwgcGVuZGluZ19wcm9ncmFtKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHJ1bihiKSB7XG4gICAgICAgICAgICBpZiAoaXNfZnVuY3Rpb24oY29uZmlnKSkge1xuICAgICAgICAgICAgICAgIHdhaXQoKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICAgICAgICAgICAgICBjb25maWcgPSBjb25maWcoKTtcbiAgICAgICAgICAgICAgICAgICAgZ28oYik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBnbyhiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZW5kKCkge1xuICAgICAgICAgICAgY2xlYXJfYW5pbWF0aW9uKCk7XG4gICAgICAgICAgICBydW5uaW5nX3Byb2dyYW0gPSBwZW5kaW5nX3Byb2dyYW0gPSBudWxsO1xuICAgICAgICB9XG4gICAgfTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlX3Byb21pc2UocHJvbWlzZSwgaW5mbykge1xuICAgIGNvbnN0IHRva2VuID0gaW5mby50b2tlbiA9IHt9O1xuICAgIGZ1bmN0aW9uIHVwZGF0ZSh0eXBlLCBpbmRleCwga2V5LCB2YWx1ZSkge1xuICAgICAgICBpZiAoaW5mby50b2tlbiAhPT0gdG9rZW4pXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGluZm8ucmVzb2x2ZWQgPSB2YWx1ZTtcbiAgICAgICAgbGV0IGNoaWxkX2N0eCA9IGluZm8uY3R4O1xuICAgICAgICBpZiAoa2V5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGNoaWxkX2N0eCA9IGNoaWxkX2N0eC5zbGljZSgpO1xuICAgICAgICAgICAgY2hpbGRfY3R4W2tleV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBibG9jayA9IHR5cGUgJiYgKGluZm8uY3VycmVudCA9IHR5cGUpKGNoaWxkX2N0eCk7XG4gICAgICAgIGxldCBuZWVkc19mbHVzaCA9IGZhbHNlO1xuICAgICAgICBpZiAoaW5mby5ibG9jaykge1xuICAgICAgICAgICAgaWYgKGluZm8uYmxvY2tzKSB7XG4gICAgICAgICAgICAgICAgaW5mby5ibG9ja3MuZm9yRWFjaCgoYmxvY2ssIGkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGkgIT09IGluZGV4ICYmIGJsb2NrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBncm91cF9vdXRyb3MoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb25fb3V0KGJsb2NrLCAxLCAxLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluZm8uYmxvY2tzW2ldID09PSBibG9jaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmZvLmJsb2Nrc1tpXSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjaGVja19vdXRyb3MoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaW5mby5ibG9jay5kKDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYmxvY2suYygpO1xuICAgICAgICAgICAgdHJhbnNpdGlvbl9pbihibG9jaywgMSk7XG4gICAgICAgICAgICBibG9jay5tKGluZm8ubW91bnQoKSwgaW5mby5hbmNob3IpO1xuICAgICAgICAgICAgbmVlZHNfZmx1c2ggPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGluZm8uYmxvY2sgPSBibG9jaztcbiAgICAgICAgaWYgKGluZm8uYmxvY2tzKVxuICAgICAgICAgICAgaW5mby5ibG9ja3NbaW5kZXhdID0gYmxvY2s7XG4gICAgICAgIGlmIChuZWVkc19mbHVzaCkge1xuICAgICAgICAgICAgZmx1c2goKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXNfcHJvbWlzZShwcm9taXNlKSkge1xuICAgICAgICBjb25zdCBjdXJyZW50X2NvbXBvbmVudCA9IGdldF9jdXJyZW50X2NvbXBvbmVudCgpO1xuICAgICAgICBwcm9taXNlLnRoZW4odmFsdWUgPT4ge1xuICAgICAgICAgICAgc2V0X2N1cnJlbnRfY29tcG9uZW50KGN1cnJlbnRfY29tcG9uZW50KTtcbiAgICAgICAgICAgIHVwZGF0ZShpbmZvLnRoZW4sIDEsIGluZm8udmFsdWUsIHZhbHVlKTtcbiAgICAgICAgICAgIHNldF9jdXJyZW50X2NvbXBvbmVudChudWxsKTtcbiAgICAgICAgfSwgZXJyb3IgPT4ge1xuICAgICAgICAgICAgc2V0X2N1cnJlbnRfY29tcG9uZW50KGN1cnJlbnRfY29tcG9uZW50KTtcbiAgICAgICAgICAgIHVwZGF0ZShpbmZvLmNhdGNoLCAyLCBpbmZvLmVycm9yLCBlcnJvcik7XG4gICAgICAgICAgICBzZXRfY3VycmVudF9jb21wb25lbnQobnVsbCk7XG4gICAgICAgICAgICBpZiAoIWluZm8uaGFzQ2F0Y2gpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIC8vIGlmIHdlIHByZXZpb3VzbHkgaGFkIGEgdGhlbi9jYXRjaCBibG9jaywgZGVzdHJveSBpdFxuICAgICAgICBpZiAoaW5mby5jdXJyZW50ICE9PSBpbmZvLnBlbmRpbmcpIHtcbiAgICAgICAgICAgIHVwZGF0ZShpbmZvLnBlbmRpbmcsIDApO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGlmIChpbmZvLmN1cnJlbnQgIT09IGluZm8udGhlbikge1xuICAgICAgICAgICAgdXBkYXRlKGluZm8udGhlbiwgMSwgaW5mby52YWx1ZSwgcHJvbWlzZSk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpbmZvLnJlc29sdmVkID0gcHJvbWlzZTtcbiAgICB9XG59XG5mdW5jdGlvbiB1cGRhdGVfYXdhaXRfYmxvY2tfYnJhbmNoKGluZm8sIGN0eCwgZGlydHkpIHtcbiAgICBjb25zdCBjaGlsZF9jdHggPSBjdHguc2xpY2UoKTtcbiAgICBjb25zdCB7IHJlc29sdmVkIH0gPSBpbmZvO1xuICAgIGlmIChpbmZvLmN1cnJlbnQgPT09IGluZm8udGhlbikge1xuICAgICAgICBjaGlsZF9jdHhbaW5mby52YWx1ZV0gPSByZXNvbHZlZDtcbiAgICB9XG4gICAgaWYgKGluZm8uY3VycmVudCA9PT0gaW5mby5jYXRjaCkge1xuICAgICAgICBjaGlsZF9jdHhbaW5mby5lcnJvcl0gPSByZXNvbHZlZDtcbiAgICB9XG4gICAgaW5mby5ibG9jay5wKGNoaWxkX2N0eCwgZGlydHkpO1xufVxuXG5jb25zdCBnbG9iYWxzID0gKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnXG4gICAgPyB3aW5kb3dcbiAgICA6IHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICA/IGdsb2JhbFRoaXNcbiAgICAgICAgOiBnbG9iYWwpO1xuXG5mdW5jdGlvbiBkZXN0cm95X2Jsb2NrKGJsb2NrLCBsb29rdXApIHtcbiAgICBibG9jay5kKDEpO1xuICAgIGxvb2t1cC5kZWxldGUoYmxvY2sua2V5KTtcbn1cbmZ1bmN0aW9uIG91dHJvX2FuZF9kZXN0cm95X2Jsb2NrKGJsb2NrLCBsb29rdXApIHtcbiAgICB0cmFuc2l0aW9uX291dChibG9jaywgMSwgMSwgKCkgPT4ge1xuICAgICAgICBsb29rdXAuZGVsZXRlKGJsb2NrLmtleSk7XG4gICAgfSk7XG59XG5mdW5jdGlvbiBmaXhfYW5kX2Rlc3Ryb3lfYmxvY2soYmxvY2ssIGxvb2t1cCkge1xuICAgIGJsb2NrLmYoKTtcbiAgICBkZXN0cm95X2Jsb2NrKGJsb2NrLCBsb29rdXApO1xufVxuZnVuY3Rpb24gZml4X2FuZF9vdXRyb19hbmRfZGVzdHJveV9ibG9jayhibG9jaywgbG9va3VwKSB7XG4gICAgYmxvY2suZigpO1xuICAgIG91dHJvX2FuZF9kZXN0cm95X2Jsb2NrKGJsb2NrLCBsb29rdXApO1xufVxuZnVuY3Rpb24gdXBkYXRlX2tleWVkX2VhY2gob2xkX2Jsb2NrcywgZGlydHksIGdldF9rZXksIGR5bmFtaWMsIGN0eCwgbGlzdCwgbG9va3VwLCBub2RlLCBkZXN0cm95LCBjcmVhdGVfZWFjaF9ibG9jaywgbmV4dCwgZ2V0X2NvbnRleHQpIHtcbiAgICBsZXQgbyA9IG9sZF9ibG9ja3MubGVuZ3RoO1xuICAgIGxldCBuID0gbGlzdC5sZW5ndGg7XG4gICAgbGV0IGkgPSBvO1xuICAgIGNvbnN0IG9sZF9pbmRleGVzID0ge307XG4gICAgd2hpbGUgKGktLSlcbiAgICAgICAgb2xkX2luZGV4ZXNbb2xkX2Jsb2Nrc1tpXS5rZXldID0gaTtcbiAgICBjb25zdCBuZXdfYmxvY2tzID0gW107XG4gICAgY29uc3QgbmV3X2xvb2t1cCA9IG5ldyBNYXAoKTtcbiAgICBjb25zdCBkZWx0YXMgPSBuZXcgTWFwKCk7XG4gICAgaSA9IG47XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgICBjb25zdCBjaGlsZF9jdHggPSBnZXRfY29udGV4dChjdHgsIGxpc3QsIGkpO1xuICAgICAgICBjb25zdCBrZXkgPSBnZXRfa2V5KGNoaWxkX2N0eCk7XG4gICAgICAgIGxldCBibG9jayA9IGxvb2t1cC5nZXQoa2V5KTtcbiAgICAgICAgaWYgKCFibG9jaykge1xuICAgICAgICAgICAgYmxvY2sgPSBjcmVhdGVfZWFjaF9ibG9jayhrZXksIGNoaWxkX2N0eCk7XG4gICAgICAgICAgICBibG9jay5jKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZHluYW1pYykge1xuICAgICAgICAgICAgYmxvY2sucChjaGlsZF9jdHgsIGRpcnR5KTtcbiAgICAgICAgfVxuICAgICAgICBuZXdfbG9va3VwLnNldChrZXksIG5ld19ibG9ja3NbaV0gPSBibG9jayk7XG4gICAgICAgIGlmIChrZXkgaW4gb2xkX2luZGV4ZXMpXG4gICAgICAgICAgICBkZWx0YXMuc2V0KGtleSwgTWF0aC5hYnMoaSAtIG9sZF9pbmRleGVzW2tleV0pKTtcbiAgICB9XG4gICAgY29uc3Qgd2lsbF9tb3ZlID0gbmV3IFNldCgpO1xuICAgIGNvbnN0IGRpZF9tb3ZlID0gbmV3IFNldCgpO1xuICAgIGZ1bmN0aW9uIGluc2VydChibG9jaykge1xuICAgICAgICB0cmFuc2l0aW9uX2luKGJsb2NrLCAxKTtcbiAgICAgICAgYmxvY2subShub2RlLCBuZXh0KTtcbiAgICAgICAgbG9va3VwLnNldChibG9jay5rZXksIGJsb2NrKTtcbiAgICAgICAgbmV4dCA9IGJsb2NrLmZpcnN0O1xuICAgICAgICBuLS07XG4gICAgfVxuICAgIHdoaWxlIChvICYmIG4pIHtcbiAgICAgICAgY29uc3QgbmV3X2Jsb2NrID0gbmV3X2Jsb2Nrc1tuIC0gMV07XG4gICAgICAgIGNvbnN0IG9sZF9ibG9jayA9IG9sZF9ibG9ja3NbbyAtIDFdO1xuICAgICAgICBjb25zdCBuZXdfa2V5ID0gbmV3X2Jsb2NrLmtleTtcbiAgICAgICAgY29uc3Qgb2xkX2tleSA9IG9sZF9ibG9jay5rZXk7XG4gICAgICAgIGlmIChuZXdfYmxvY2sgPT09IG9sZF9ibG9jaykge1xuICAgICAgICAgICAgLy8gZG8gbm90aGluZ1xuICAgICAgICAgICAgbmV4dCA9IG5ld19ibG9jay5maXJzdDtcbiAgICAgICAgICAgIG8tLTtcbiAgICAgICAgICAgIG4tLTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghbmV3X2xvb2t1cC5oYXMob2xkX2tleSkpIHtcbiAgICAgICAgICAgIC8vIHJlbW92ZSBvbGQgYmxvY2tcbiAgICAgICAgICAgIGRlc3Ryb3kob2xkX2Jsb2NrLCBsb29rdXApO1xuICAgICAgICAgICAgby0tO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCFsb29rdXAuaGFzKG5ld19rZXkpIHx8IHdpbGxfbW92ZS5oYXMobmV3X2tleSkpIHtcbiAgICAgICAgICAgIGluc2VydChuZXdfYmxvY2spO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGRpZF9tb3ZlLmhhcyhvbGRfa2V5KSkge1xuICAgICAgICAgICAgby0tO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGRlbHRhcy5nZXQobmV3X2tleSkgPiBkZWx0YXMuZ2V0KG9sZF9rZXkpKSB7XG4gICAgICAgICAgICBkaWRfbW92ZS5hZGQobmV3X2tleSk7XG4gICAgICAgICAgICBpbnNlcnQobmV3X2Jsb2NrKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHdpbGxfbW92ZS5hZGQob2xkX2tleSk7XG4gICAgICAgICAgICBvLS07XG4gICAgICAgIH1cbiAgICB9XG4gICAgd2hpbGUgKG8tLSkge1xuICAgICAgICBjb25zdCBvbGRfYmxvY2sgPSBvbGRfYmxvY2tzW29dO1xuICAgICAgICBpZiAoIW5ld19sb29rdXAuaGFzKG9sZF9ibG9jay5rZXkpKVxuICAgICAgICAgICAgZGVzdHJveShvbGRfYmxvY2ssIGxvb2t1cCk7XG4gICAgfVxuICAgIHdoaWxlIChuKVxuICAgICAgICBpbnNlcnQobmV3X2Jsb2Nrc1tuIC0gMV0pO1xuICAgIHJldHVybiBuZXdfYmxvY2tzO1xufVxuZnVuY3Rpb24gdmFsaWRhdGVfZWFjaF9rZXlzKGN0eCwgbGlzdCwgZ2V0X2NvbnRleHQsIGdldF9rZXkpIHtcbiAgICBjb25zdCBrZXlzID0gbmV3IFNldCgpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBrZXkgPSBnZXRfa2V5KGdldF9jb250ZXh0KGN0eCwgbGlzdCwgaSkpO1xuICAgICAgICBpZiAoa2V5cy5oYXMoa2V5KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3QgaGF2ZSBkdXBsaWNhdGUga2V5cyBpbiBhIGtleWVkIGVhY2gnKTtcbiAgICAgICAgfVxuICAgICAgICBrZXlzLmFkZChrZXkpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZ2V0X3NwcmVhZF91cGRhdGUobGV2ZWxzLCB1cGRhdGVzKSB7XG4gICAgY29uc3QgdXBkYXRlID0ge307XG4gICAgY29uc3QgdG9fbnVsbF9vdXQgPSB7fTtcbiAgICBjb25zdCBhY2NvdW50ZWRfZm9yID0geyAkJHNjb3BlOiAxIH07XG4gICAgbGV0IGkgPSBsZXZlbHMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgY29uc3QgbyA9IGxldmVsc1tpXTtcbiAgICAgICAgY29uc3QgbiA9IHVwZGF0ZXNbaV07XG4gICAgICAgIGlmIChuKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBvKSB7XG4gICAgICAgICAgICAgICAgaWYgKCEoa2V5IGluIG4pKVxuICAgICAgICAgICAgICAgICAgICB0b19udWxsX291dFtrZXldID0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIG4pIHtcbiAgICAgICAgICAgICAgICBpZiAoIWFjY291bnRlZF9mb3Jba2V5XSkge1xuICAgICAgICAgICAgICAgICAgICB1cGRhdGVba2V5XSA9IG5ba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgYWNjb3VudGVkX2ZvcltrZXldID0gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXZlbHNbaV0gPSBuO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gbykge1xuICAgICAgICAgICAgICAgIGFjY291bnRlZF9mb3Jba2V5XSA9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZm9yIChjb25zdCBrZXkgaW4gdG9fbnVsbF9vdXQpIHtcbiAgICAgICAgaWYgKCEoa2V5IGluIHVwZGF0ZSkpXG4gICAgICAgICAgICB1cGRhdGVba2V5XSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgcmV0dXJuIHVwZGF0ZTtcbn1cbmZ1bmN0aW9uIGdldF9zcHJlYWRfb2JqZWN0KHNwcmVhZF9wcm9wcykge1xuICAgIHJldHVybiB0eXBlb2Ygc3ByZWFkX3Byb3BzID09PSAnb2JqZWN0JyAmJiBzcHJlYWRfcHJvcHMgIT09IG51bGwgPyBzcHJlYWRfcHJvcHMgOiB7fTtcbn1cblxuLy8gc291cmNlOiBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9pbmRpY2VzLmh0bWxcbmNvbnN0IGJvb2xlYW5fYXR0cmlidXRlcyA9IG5ldyBTZXQoW1xuICAgICdhbGxvd2Z1bGxzY3JlZW4nLFxuICAgICdhbGxvd3BheW1lbnRyZXF1ZXN0JyxcbiAgICAnYXN5bmMnLFxuICAgICdhdXRvZm9jdXMnLFxuICAgICdhdXRvcGxheScsXG4gICAgJ2NoZWNrZWQnLFxuICAgICdjb250cm9scycsXG4gICAgJ2RlZmF1bHQnLFxuICAgICdkZWZlcicsXG4gICAgJ2Rpc2FibGVkJyxcbiAgICAnZm9ybW5vdmFsaWRhdGUnLFxuICAgICdoaWRkZW4nLFxuICAgICdpc21hcCcsXG4gICAgJ2xvb3AnLFxuICAgICdtdWx0aXBsZScsXG4gICAgJ211dGVkJyxcbiAgICAnbm9tb2R1bGUnLFxuICAgICdub3ZhbGlkYXRlJyxcbiAgICAnb3BlbicsXG4gICAgJ3BsYXlzaW5saW5lJyxcbiAgICAncmVhZG9ubHknLFxuICAgICdyZXF1aXJlZCcsXG4gICAgJ3JldmVyc2VkJyxcbiAgICAnc2VsZWN0ZWQnXG5dKTtcblxuY29uc3Qgdm9pZF9lbGVtZW50X25hbWVzID0gL14oPzphcmVhfGJhc2V8YnJ8Y29sfGNvbW1hbmR8ZW1iZWR8aHJ8aW1nfGlucHV0fGtleWdlbnxsaW5rfG1ldGF8cGFyYW18c291cmNlfHRyYWNrfHdicikkLztcbmZ1bmN0aW9uIGlzX3ZvaWQobmFtZSkge1xuICAgIHJldHVybiB2b2lkX2VsZW1lbnRfbmFtZXMudGVzdChuYW1lKSB8fCBuYW1lLnRvTG93ZXJDYXNlKCkgPT09ICchZG9jdHlwZSc7XG59XG5cbmNvbnN0IGludmFsaWRfYXR0cmlidXRlX25hbWVfY2hhcmFjdGVyID0gL1tcXHMnXCI+Lz1cXHV7RkREMH0tXFx1e0ZERUZ9XFx1e0ZGRkV9XFx1e0ZGRkZ9XFx1ezFGRkZFfVxcdXsxRkZGRn1cXHV7MkZGRkV9XFx1ezJGRkZGfVxcdXszRkZGRX1cXHV7M0ZGRkZ9XFx1ezRGRkZFfVxcdXs0RkZGRn1cXHV7NUZGRkV9XFx1ezVGRkZGfVxcdXs2RkZGRX1cXHV7NkZGRkZ9XFx1ezdGRkZFfVxcdXs3RkZGRn1cXHV7OEZGRkV9XFx1ezhGRkZGfVxcdXs5RkZGRX1cXHV7OUZGRkZ9XFx1e0FGRkZFfVxcdXtBRkZGRn1cXHV7QkZGRkV9XFx1e0JGRkZGfVxcdXtDRkZGRX1cXHV7Q0ZGRkZ9XFx1e0RGRkZFfVxcdXtERkZGRn1cXHV7RUZGRkV9XFx1e0VGRkZGfVxcdXtGRkZGRX1cXHV7RkZGRkZ9XFx1ezEwRkZGRX1cXHV7MTBGRkZGfV0vdTtcbi8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI2F0dHJpYnV0ZXMtMlxuLy8gaHR0cHM6Ly9pbmZyYS5zcGVjLndoYXR3Zy5vcmcvI25vbmNoYXJhY3RlclxuZnVuY3Rpb24gc3ByZWFkKGFyZ3MsIGF0dHJzX3RvX2FkZCkge1xuICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBPYmplY3QuYXNzaWduKHt9LCAuLi5hcmdzKTtcbiAgICBpZiAoYXR0cnNfdG9fYWRkKSB7XG4gICAgICAgIGNvbnN0IGNsYXNzZXNfdG9fYWRkID0gYXR0cnNfdG9fYWRkLmNsYXNzZXM7XG4gICAgICAgIGNvbnN0IHN0eWxlc190b19hZGQgPSBhdHRyc190b19hZGQuc3R5bGVzO1xuICAgICAgICBpZiAoY2xhc3Nlc190b19hZGQpIHtcbiAgICAgICAgICAgIGlmIChhdHRyaWJ1dGVzLmNsYXNzID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzLmNsYXNzID0gY2xhc3Nlc190b19hZGQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzLmNsYXNzICs9ICcgJyArIGNsYXNzZXNfdG9fYWRkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChzdHlsZXNfdG9fYWRkKSB7XG4gICAgICAgICAgICBpZiAoYXR0cmlidXRlcy5zdHlsZSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgYXR0cmlidXRlcy5zdHlsZSA9IHN0eWxlX29iamVjdF90b19zdHJpbmcoc3R5bGVzX3RvX2FkZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzLnN0eWxlID0gc3R5bGVfb2JqZWN0X3RvX3N0cmluZyhtZXJnZV9zc3Jfc3R5bGVzKGF0dHJpYnV0ZXMuc3R5bGUsIHN0eWxlc190b19hZGQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBsZXQgc3RyID0gJyc7XG4gICAgT2JqZWN0LmtleXMoYXR0cmlidXRlcykuZm9yRWFjaChuYW1lID0+IHtcbiAgICAgICAgaWYgKGludmFsaWRfYXR0cmlidXRlX25hbWVfY2hhcmFjdGVyLnRlc3QobmFtZSkpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNvbnN0IHZhbHVlID0gYXR0cmlidXRlc1tuYW1lXTtcbiAgICAgICAgaWYgKHZhbHVlID09PSB0cnVlKVxuICAgICAgICAgICAgc3RyICs9ICcgJyArIG5hbWU7XG4gICAgICAgIGVsc2UgaWYgKGJvb2xlYW5fYXR0cmlidXRlcy5oYXMobmFtZS50b0xvd2VyQ2FzZSgpKSkge1xuICAgICAgICAgICAgaWYgKHZhbHVlKVxuICAgICAgICAgICAgICAgIHN0ciArPSAnICcgKyBuYW1lO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgICAgIHN0ciArPSBgICR7bmFtZX09XCIke3ZhbHVlfVwiYDtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBzdHI7XG59XG5mdW5jdGlvbiBtZXJnZV9zc3Jfc3R5bGVzKHN0eWxlX2F0dHJpYnV0ZSwgc3R5bGVfZGlyZWN0aXZlKSB7XG4gICAgY29uc3Qgc3R5bGVfb2JqZWN0ID0ge307XG4gICAgZm9yIChjb25zdCBpbmRpdmlkdWFsX3N0eWxlIG9mIHN0eWxlX2F0dHJpYnV0ZS5zcGxpdCgnOycpKSB7XG4gICAgICAgIGNvbnN0IGNvbG9uX2luZGV4ID0gaW5kaXZpZHVhbF9zdHlsZS5pbmRleE9mKCc6Jyk7XG4gICAgICAgIGNvbnN0IG5hbWUgPSBpbmRpdmlkdWFsX3N0eWxlLnNsaWNlKDAsIGNvbG9uX2luZGV4KS50cmltKCk7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gaW5kaXZpZHVhbF9zdHlsZS5zbGljZShjb2xvbl9pbmRleCArIDEpLnRyaW0oKTtcbiAgICAgICAgaWYgKCFuYW1lKVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIHN0eWxlX29iamVjdFtuYW1lXSA9IHZhbHVlO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IG5hbWUgaW4gc3R5bGVfZGlyZWN0aXZlKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gc3R5bGVfZGlyZWN0aXZlW25hbWVdO1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIHN0eWxlX29iamVjdFtuYW1lXSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZGVsZXRlIHN0eWxlX29iamVjdFtuYW1lXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc3R5bGVfb2JqZWN0O1xufVxuY29uc3QgQVRUUl9SRUdFWCA9IC9bJlwiXS9nO1xuY29uc3QgQ09OVEVOVF9SRUdFWCA9IC9bJjxdL2c7XG4vKipcbiAqIE5vdGU6IHRoaXMgbWV0aG9kIGlzIHBlcmZvcm1hbmNlIHNlbnNpdGl2ZSBhbmQgaGFzIGJlZW4gb3B0aW1pemVkXG4gKiBodHRwczovL2dpdGh1Yi5jb20vc3ZlbHRlanMvc3ZlbHRlL3B1bGwvNTcwMVxuICovXG5mdW5jdGlvbiBlc2NhcGUodmFsdWUsIGlzX2F0dHIgPSBmYWxzZSkge1xuICAgIGNvbnN0IHN0ciA9IFN0cmluZyh2YWx1ZSk7XG4gICAgY29uc3QgcGF0dGVybiA9IGlzX2F0dHIgPyBBVFRSX1JFR0VYIDogQ09OVEVOVF9SRUdFWDtcbiAgICBwYXR0ZXJuLmxhc3RJbmRleCA9IDA7XG4gICAgbGV0IGVzY2FwZWQgPSAnJztcbiAgICBsZXQgbGFzdCA9IDA7XG4gICAgd2hpbGUgKHBhdHRlcm4udGVzdChzdHIpKSB7XG4gICAgICAgIGNvbnN0IGkgPSBwYXR0ZXJuLmxhc3RJbmRleCAtIDE7XG4gICAgICAgIGNvbnN0IGNoID0gc3RyW2ldO1xuICAgICAgICBlc2NhcGVkICs9IHN0ci5zdWJzdHJpbmcobGFzdCwgaSkgKyAoY2ggPT09ICcmJyA/ICcmYW1wOycgOiAoY2ggPT09ICdcIicgPyAnJnF1b3Q7JyA6ICcmbHQ7JykpO1xuICAgICAgICBsYXN0ID0gaSArIDE7XG4gICAgfVxuICAgIHJldHVybiBlc2NhcGVkICsgc3RyLnN1YnN0cmluZyhsYXN0KTtcbn1cbmZ1bmN0aW9uIGVzY2FwZV9hdHRyaWJ1dGVfdmFsdWUodmFsdWUpIHtcbiAgICAvLyBrZWVwIGJvb2xlYW5zLCBudWxsLCBhbmQgdW5kZWZpbmVkIGZvciB0aGUgc2FrZSBvZiBgc3ByZWFkYFxuICAgIGNvbnN0IHNob3VsZF9lc2NhcGUgPSB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnIHx8ICh2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKTtcbiAgICByZXR1cm4gc2hvdWxkX2VzY2FwZSA/IGVzY2FwZSh2YWx1ZSwgdHJ1ZSkgOiB2YWx1ZTtcbn1cbmZ1bmN0aW9uIGVzY2FwZV9vYmplY3Qob2JqKSB7XG4gICAgY29uc3QgcmVzdWx0ID0ge307XG4gICAgZm9yIChjb25zdCBrZXkgaW4gb2JqKSB7XG4gICAgICAgIHJlc3VsdFtrZXldID0gZXNjYXBlX2F0dHJpYnV0ZV92YWx1ZShvYmpba2V5XSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBlYWNoKGl0ZW1zLCBmbikge1xuICAgIGxldCBzdHIgPSAnJztcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGl0ZW1zLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIHN0ciArPSBmbihpdGVtc1tpXSwgaSk7XG4gICAgfVxuICAgIHJldHVybiBzdHI7XG59XG5jb25zdCBtaXNzaW5nX2NvbXBvbmVudCA9IHtcbiAgICAkJHJlbmRlcjogKCkgPT4gJydcbn07XG5mdW5jdGlvbiB2YWxpZGF0ZV9jb21wb25lbnQoY29tcG9uZW50LCBuYW1lKSB7XG4gICAgaWYgKCFjb21wb25lbnQgfHwgIWNvbXBvbmVudC4kJHJlbmRlcikge1xuICAgICAgICBpZiAobmFtZSA9PT0gJ3N2ZWx0ZTpjb21wb25lbnQnKVxuICAgICAgICAgICAgbmFtZSArPSAnIHRoaXM9ey4uLn0nO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYDwke25hbWV9PiBpcyBub3QgYSB2YWxpZCBTU1IgY29tcG9uZW50LiBZb3UgbWF5IG5lZWQgdG8gcmV2aWV3IHlvdXIgYnVpbGQgY29uZmlnIHRvIGVuc3VyZSB0aGF0IGRlcGVuZGVuY2llcyBhcmUgY29tcGlsZWQsIHJhdGhlciB0aGFuIGltcG9ydGVkIGFzIHByZS1jb21waWxlZCBtb2R1bGVzYCk7XG4gICAgfVxuICAgIHJldHVybiBjb21wb25lbnQ7XG59XG5mdW5jdGlvbiBkZWJ1ZyhmaWxlLCBsaW5lLCBjb2x1bW4sIHZhbHVlcykge1xuICAgIGNvbnNvbGUubG9nKGB7QGRlYnVnfSAke2ZpbGUgPyBmaWxlICsgJyAnIDogJyd9KCR7bGluZX06JHtjb2x1bW59KWApOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcbiAgICBjb25zb2xlLmxvZyh2YWx1ZXMpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcbiAgICByZXR1cm4gJyc7XG59XG5sZXQgb25fZGVzdHJveTtcbmZ1bmN0aW9uIGNyZWF0ZV9zc3JfY29tcG9uZW50KGZuKSB7XG4gICAgZnVuY3Rpb24gJCRyZW5kZXIocmVzdWx0LCBwcm9wcywgYmluZGluZ3MsIHNsb3RzLCBjb250ZXh0KSB7XG4gICAgICAgIGNvbnN0IHBhcmVudF9jb21wb25lbnQgPSBjdXJyZW50X2NvbXBvbmVudDtcbiAgICAgICAgY29uc3QgJCQgPSB7XG4gICAgICAgICAgICBvbl9kZXN0cm95LFxuICAgICAgICAgICAgY29udGV4dDogbmV3IE1hcChjb250ZXh0IHx8IChwYXJlbnRfY29tcG9uZW50ID8gcGFyZW50X2NvbXBvbmVudC4kJC5jb250ZXh0IDogW10pKSxcbiAgICAgICAgICAgIC8vIHRoZXNlIHdpbGwgYmUgaW1tZWRpYXRlbHkgZGlzY2FyZGVkXG4gICAgICAgICAgICBvbl9tb3VudDogW10sXG4gICAgICAgICAgICBiZWZvcmVfdXBkYXRlOiBbXSxcbiAgICAgICAgICAgIGFmdGVyX3VwZGF0ZTogW10sXG4gICAgICAgICAgICBjYWxsYmFja3M6IGJsYW5rX29iamVjdCgpXG4gICAgICAgIH07XG4gICAgICAgIHNldF9jdXJyZW50X2NvbXBvbmVudCh7ICQkIH0pO1xuICAgICAgICBjb25zdCBodG1sID0gZm4ocmVzdWx0LCBwcm9wcywgYmluZGluZ3MsIHNsb3RzKTtcbiAgICAgICAgc2V0X2N1cnJlbnRfY29tcG9uZW50KHBhcmVudF9jb21wb25lbnQpO1xuICAgICAgICByZXR1cm4gaHRtbDtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcmVuZGVyOiAocHJvcHMgPSB7fSwgeyAkJHNsb3RzID0ge30sIGNvbnRleHQgPSBuZXcgTWFwKCkgfSA9IHt9KSA9PiB7XG4gICAgICAgICAgICBvbl9kZXN0cm95ID0gW107XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSB7IHRpdGxlOiAnJywgaGVhZDogJycsIGNzczogbmV3IFNldCgpIH07XG4gICAgICAgICAgICBjb25zdCBodG1sID0gJCRyZW5kZXIocmVzdWx0LCBwcm9wcywge30sICQkc2xvdHMsIGNvbnRleHQpO1xuICAgICAgICAgICAgcnVuX2FsbChvbl9kZXN0cm95KTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgaHRtbCxcbiAgICAgICAgICAgICAgICBjc3M6IHtcbiAgICAgICAgICAgICAgICAgICAgY29kZTogQXJyYXkuZnJvbShyZXN1bHQuY3NzKS5tYXAoY3NzID0+IGNzcy5jb2RlKS5qb2luKCdcXG4nKSxcbiAgICAgICAgICAgICAgICAgICAgbWFwOiBudWxsIC8vIFRPRE9cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGhlYWQ6IHJlc3VsdC50aXRsZSArIHJlc3VsdC5oZWFkXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICAkJHJlbmRlclxuICAgIH07XG59XG5mdW5jdGlvbiBhZGRfYXR0cmlidXRlKG5hbWUsIHZhbHVlLCBib29sZWFuKSB7XG4gICAgaWYgKHZhbHVlID09IG51bGwgfHwgKGJvb2xlYW4gJiYgIXZhbHVlKSlcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIGNvbnN0IGFzc2lnbm1lbnQgPSAoYm9vbGVhbiAmJiB2YWx1ZSA9PT0gdHJ1ZSkgPyAnJyA6IGA9XCIke2VzY2FwZSh2YWx1ZSwgdHJ1ZSl9XCJgO1xuICAgIHJldHVybiBgICR7bmFtZX0ke2Fzc2lnbm1lbnR9YDtcbn1cbmZ1bmN0aW9uIGFkZF9jbGFzc2VzKGNsYXNzZXMpIHtcbiAgICByZXR1cm4gY2xhc3NlcyA/IGAgY2xhc3M9XCIke2NsYXNzZXN9XCJgIDogJyc7XG59XG5mdW5jdGlvbiBzdHlsZV9vYmplY3RfdG9fc3RyaW5nKHN0eWxlX29iamVjdCkge1xuICAgIHJldHVybiBPYmplY3Qua2V5cyhzdHlsZV9vYmplY3QpXG4gICAgICAgIC5maWx0ZXIoa2V5ID0+IHN0eWxlX29iamVjdFtrZXldKVxuICAgICAgICAubWFwKGtleSA9PiBgJHtrZXl9OiAke3N0eWxlX29iamVjdFtrZXldfTtgKVxuICAgICAgICAuam9pbignICcpO1xufVxuZnVuY3Rpb24gYWRkX3N0eWxlcyhzdHlsZV9vYmplY3QpIHtcbiAgICBjb25zdCBzdHlsZXMgPSBzdHlsZV9vYmplY3RfdG9fc3RyaW5nKHN0eWxlX29iamVjdCk7XG4gICAgcmV0dXJuIHN0eWxlcyA/IGAgc3R5bGU9XCIke3N0eWxlc31cImAgOiAnJztcbn1cblxuZnVuY3Rpb24gYmluZChjb21wb25lbnQsIG5hbWUsIGNhbGxiYWNrKSB7XG4gICAgY29uc3QgaW5kZXggPSBjb21wb25lbnQuJCQucHJvcHNbbmFtZV07XG4gICAgaWYgKGluZGV4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29tcG9uZW50LiQkLmJvdW5kW2luZGV4XSA9IGNhbGxiYWNrO1xuICAgICAgICBjYWxsYmFjayhjb21wb25lbnQuJCQuY3R4W2luZGV4XSk7XG4gICAgfVxufVxuZnVuY3Rpb24gY3JlYXRlX2NvbXBvbmVudChibG9jaykge1xuICAgIGJsb2NrICYmIGJsb2NrLmMoKTtcbn1cbmZ1bmN0aW9uIGNsYWltX2NvbXBvbmVudChibG9jaywgcGFyZW50X25vZGVzKSB7XG4gICAgYmxvY2sgJiYgYmxvY2subChwYXJlbnRfbm9kZXMpO1xufVxuZnVuY3Rpb24gbW91bnRfY29tcG9uZW50KGNvbXBvbmVudCwgdGFyZ2V0LCBhbmNob3IsIGN1c3RvbUVsZW1lbnQpIHtcbiAgICBjb25zdCB7IGZyYWdtZW50LCBvbl9tb3VudCwgb25fZGVzdHJveSwgYWZ0ZXJfdXBkYXRlIH0gPSBjb21wb25lbnQuJCQ7XG4gICAgZnJhZ21lbnQgJiYgZnJhZ21lbnQubSh0YXJnZXQsIGFuY2hvcik7XG4gICAgaWYgKCFjdXN0b21FbGVtZW50KSB7XG4gICAgICAgIC8vIG9uTW91bnQgaGFwcGVucyBiZWZvcmUgdGhlIGluaXRpYWwgYWZ0ZXJVcGRhdGVcbiAgICAgICAgYWRkX3JlbmRlcl9jYWxsYmFjaygoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBuZXdfb25fZGVzdHJveSA9IG9uX21vdW50Lm1hcChydW4pLmZpbHRlcihpc19mdW5jdGlvbik7XG4gICAgICAgICAgICBpZiAob25fZGVzdHJveSkge1xuICAgICAgICAgICAgICAgIG9uX2Rlc3Ryb3kucHVzaCguLi5uZXdfb25fZGVzdHJveSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBFZGdlIGNhc2UgLSBjb21wb25lbnQgd2FzIGRlc3Ryb3llZCBpbW1lZGlhdGVseSxcbiAgICAgICAgICAgICAgICAvLyBtb3N0IGxpa2VseSBhcyBhIHJlc3VsdCBvZiBhIGJpbmRpbmcgaW5pdGlhbGlzaW5nXG4gICAgICAgICAgICAgICAgcnVuX2FsbChuZXdfb25fZGVzdHJveSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb21wb25lbnQuJCQub25fbW91bnQgPSBbXTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGFmdGVyX3VwZGF0ZS5mb3JFYWNoKGFkZF9yZW5kZXJfY2FsbGJhY2spO1xufVxuZnVuY3Rpb24gZGVzdHJveV9jb21wb25lbnQoY29tcG9uZW50LCBkZXRhY2hpbmcpIHtcbiAgICBjb25zdCAkJCA9IGNvbXBvbmVudC4kJDtcbiAgICBpZiAoJCQuZnJhZ21lbnQgIT09IG51bGwpIHtcbiAgICAgICAgcnVuX2FsbCgkJC5vbl9kZXN0cm95KTtcbiAgICAgICAgJCQuZnJhZ21lbnQgJiYgJCQuZnJhZ21lbnQuZChkZXRhY2hpbmcpO1xuICAgICAgICAvLyBUT0RPIG51bGwgb3V0IG90aGVyIHJlZnMsIGluY2x1ZGluZyBjb21wb25lbnQuJCQgKGJ1dCBuZWVkIHRvXG4gICAgICAgIC8vIHByZXNlcnZlIGZpbmFsIHN0YXRlPylcbiAgICAgICAgJCQub25fZGVzdHJveSA9ICQkLmZyYWdtZW50ID0gbnVsbDtcbiAgICAgICAgJCQuY3R4ID0gW107XG4gICAgfVxufVxuZnVuY3Rpb24gbWFrZV9kaXJ0eShjb21wb25lbnQsIGkpIHtcbiAgICBpZiAoY29tcG9uZW50LiQkLmRpcnR5WzBdID09PSAtMSkge1xuICAgICAgICBkaXJ0eV9jb21wb25lbnRzLnB1c2goY29tcG9uZW50KTtcbiAgICAgICAgc2NoZWR1bGVfdXBkYXRlKCk7XG4gICAgICAgIGNvbXBvbmVudC4kJC5kaXJ0eS5maWxsKDApO1xuICAgIH1cbiAgICBjb21wb25lbnQuJCQuZGlydHlbKGkgLyAzMSkgfCAwXSB8PSAoMSA8PCAoaSAlIDMxKSk7XG59XG5mdW5jdGlvbiBpbml0KGNvbXBvbmVudCwgb3B0aW9ucywgaW5zdGFuY2UsIGNyZWF0ZV9mcmFnbWVudCwgbm90X2VxdWFsLCBwcm9wcywgYXBwZW5kX3N0eWxlcywgZGlydHkgPSBbLTFdKSB7XG4gICAgY29uc3QgcGFyZW50X2NvbXBvbmVudCA9IGN1cnJlbnRfY29tcG9uZW50O1xuICAgIHNldF9jdXJyZW50X2NvbXBvbmVudChjb21wb25lbnQpO1xuICAgIGNvbnN0ICQkID0gY29tcG9uZW50LiQkID0ge1xuICAgICAgICBmcmFnbWVudDogbnVsbCxcbiAgICAgICAgY3R4OiBudWxsLFxuICAgICAgICAvLyBzdGF0ZVxuICAgICAgICBwcm9wcyxcbiAgICAgICAgdXBkYXRlOiBub29wLFxuICAgICAgICBub3RfZXF1YWwsXG4gICAgICAgIGJvdW5kOiBibGFua19vYmplY3QoKSxcbiAgICAgICAgLy8gbGlmZWN5Y2xlXG4gICAgICAgIG9uX21vdW50OiBbXSxcbiAgICAgICAgb25fZGVzdHJveTogW10sXG4gICAgICAgIG9uX2Rpc2Nvbm5lY3Q6IFtdLFxuICAgICAgICBiZWZvcmVfdXBkYXRlOiBbXSxcbiAgICAgICAgYWZ0ZXJfdXBkYXRlOiBbXSxcbiAgICAgICAgY29udGV4dDogbmV3IE1hcChvcHRpb25zLmNvbnRleHQgfHwgKHBhcmVudF9jb21wb25lbnQgPyBwYXJlbnRfY29tcG9uZW50LiQkLmNvbnRleHQgOiBbXSkpLFxuICAgICAgICAvLyBldmVyeXRoaW5nIGVsc2VcbiAgICAgICAgY2FsbGJhY2tzOiBibGFua19vYmplY3QoKSxcbiAgICAgICAgZGlydHksXG4gICAgICAgIHNraXBfYm91bmQ6IGZhbHNlLFxuICAgICAgICByb290OiBvcHRpb25zLnRhcmdldCB8fCBwYXJlbnRfY29tcG9uZW50LiQkLnJvb3RcbiAgICB9O1xuICAgIGFwcGVuZF9zdHlsZXMgJiYgYXBwZW5kX3N0eWxlcygkJC5yb290KTtcbiAgICBsZXQgcmVhZHkgPSBmYWxzZTtcbiAgICAkJC5jdHggPSBpbnN0YW5jZVxuICAgICAgICA/IGluc3RhbmNlKGNvbXBvbmVudCwgb3B0aW9ucy5wcm9wcyB8fCB7fSwgKGksIHJldCwgLi4ucmVzdCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSByZXN0Lmxlbmd0aCA/IHJlc3RbMF0gOiByZXQ7XG4gICAgICAgICAgICBpZiAoJCQuY3R4ICYmIG5vdF9lcXVhbCgkJC5jdHhbaV0sICQkLmN0eFtpXSA9IHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIGlmICghJCQuc2tpcF9ib3VuZCAmJiAkJC5ib3VuZFtpXSlcbiAgICAgICAgICAgICAgICAgICAgJCQuYm91bmRbaV0odmFsdWUpO1xuICAgICAgICAgICAgICAgIGlmIChyZWFkeSlcbiAgICAgICAgICAgICAgICAgICAgbWFrZV9kaXJ0eShjb21wb25lbnQsIGkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgICAgfSlcbiAgICAgICAgOiBbXTtcbiAgICAkJC51cGRhdGUoKTtcbiAgICByZWFkeSA9IHRydWU7XG4gICAgcnVuX2FsbCgkJC5iZWZvcmVfdXBkYXRlKTtcbiAgICAvLyBgZmFsc2VgIGFzIGEgc3BlY2lhbCBjYXNlIG9mIG5vIERPTSBjb21wb25lbnRcbiAgICAkJC5mcmFnbWVudCA9IGNyZWF0ZV9mcmFnbWVudCA/IGNyZWF0ZV9mcmFnbWVudCgkJC5jdHgpIDogZmFsc2U7XG4gICAgaWYgKG9wdGlvbnMudGFyZ2V0KSB7XG4gICAgICAgIGlmIChvcHRpb25zLmh5ZHJhdGUpIHtcbiAgICAgICAgICAgIHN0YXJ0X2h5ZHJhdGluZygpO1xuICAgICAgICAgICAgY29uc3Qgbm9kZXMgPSBjaGlsZHJlbihvcHRpb25zLnRhcmdldCk7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5vbi1udWxsLWFzc2VydGlvblxuICAgICAgICAgICAgJCQuZnJhZ21lbnQgJiYgJCQuZnJhZ21lbnQubChub2Rlcyk7XG4gICAgICAgICAgICBub2Rlcy5mb3JFYWNoKGRldGFjaCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLW5vbi1udWxsLWFzc2VydGlvblxuICAgICAgICAgICAgJCQuZnJhZ21lbnQgJiYgJCQuZnJhZ21lbnQuYygpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLmludHJvKVxuICAgICAgICAgICAgdHJhbnNpdGlvbl9pbihjb21wb25lbnQuJCQuZnJhZ21lbnQpO1xuICAgICAgICBtb3VudF9jb21wb25lbnQoY29tcG9uZW50LCBvcHRpb25zLnRhcmdldCwgb3B0aW9ucy5hbmNob3IsIG9wdGlvbnMuY3VzdG9tRWxlbWVudCk7XG4gICAgICAgIGVuZF9oeWRyYXRpbmcoKTtcbiAgICAgICAgZmx1c2goKTtcbiAgICB9XG4gICAgc2V0X2N1cnJlbnRfY29tcG9uZW50KHBhcmVudF9jb21wb25lbnQpO1xufVxubGV0IFN2ZWx0ZUVsZW1lbnQ7XG5pZiAodHlwZW9mIEhUTUxFbGVtZW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgU3ZlbHRlRWxlbWVudCA9IGNsYXNzIGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICAgICAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgICAgIHN1cGVyKCk7XG4gICAgICAgICAgICB0aGlzLmF0dGFjaFNoYWRvdyh7IG1vZGU6ICdvcGVuJyB9KTtcbiAgICAgICAgfVxuICAgICAgICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgb25fbW91bnQgfSA9IHRoaXMuJCQ7XG4gICAgICAgICAgICB0aGlzLiQkLm9uX2Rpc2Nvbm5lY3QgPSBvbl9tb3VudC5tYXAocnVuKS5maWx0ZXIoaXNfZnVuY3Rpb24pO1xuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZSB0b2RvOiBpbXByb3ZlIHR5cGluZ3NcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IGluIHRoaXMuJCQuc2xvdHRlZCkge1xuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmUgdG9kbzogaW1wcm92ZSB0eXBpbmdzXG4gICAgICAgICAgICAgICAgdGhpcy5hcHBlbmRDaGlsZCh0aGlzLiQkLnNsb3R0ZWRba2V5XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKGF0dHIsIF9vbGRWYWx1ZSwgbmV3VmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXNbYXR0cl0gPSBuZXdWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBkaXNjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICAgICAgICAgIHJ1bl9hbGwodGhpcy4kJC5vbl9kaXNjb25uZWN0KTtcbiAgICAgICAgfVxuICAgICAgICAkZGVzdHJveSgpIHtcbiAgICAgICAgICAgIGRlc3Ryb3lfY29tcG9uZW50KHRoaXMsIDEpO1xuICAgICAgICAgICAgdGhpcy4kZGVzdHJveSA9IG5vb3A7XG4gICAgICAgIH1cbiAgICAgICAgJG9uKHR5cGUsIGNhbGxiYWNrKSB7XG4gICAgICAgICAgICAvLyBUT0RPIHNob3VsZCB0aGlzIGRlbGVnYXRlIHRvIGFkZEV2ZW50TGlzdGVuZXI/XG4gICAgICAgICAgICBjb25zdCBjYWxsYmFja3MgPSAodGhpcy4kJC5jYWxsYmFja3NbdHlwZV0gfHwgKHRoaXMuJCQuY2FsbGJhY2tzW3R5cGVdID0gW10pKTtcbiAgICAgICAgICAgIGNhbGxiYWNrcy5wdXNoKGNhbGxiYWNrKTtcbiAgICAgICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgaW5kZXggPSBjYWxsYmFja3MuaW5kZXhPZihjYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgaWYgKGluZGV4ICE9PSAtMSlcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2tzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgICRzZXQoJCRwcm9wcykge1xuICAgICAgICAgICAgaWYgKHRoaXMuJCRzZXQgJiYgIWlzX2VtcHR5KCQkcHJvcHMpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy4kJC5za2lwX2JvdW5kID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLiQkc2V0KCQkcHJvcHMpO1xuICAgICAgICAgICAgICAgIHRoaXMuJCQuc2tpcF9ib3VuZCA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbn1cbi8qKlxuICogQmFzZSBjbGFzcyBmb3IgU3ZlbHRlIGNvbXBvbmVudHMuIFVzZWQgd2hlbiBkZXY9ZmFsc2UuXG4gKi9cbmNsYXNzIFN2ZWx0ZUNvbXBvbmVudCB7XG4gICAgJGRlc3Ryb3koKSB7XG4gICAgICAgIGRlc3Ryb3lfY29tcG9uZW50KHRoaXMsIDEpO1xuICAgICAgICB0aGlzLiRkZXN0cm95ID0gbm9vcDtcbiAgICB9XG4gICAgJG9uKHR5cGUsIGNhbGxiYWNrKSB7XG4gICAgICAgIGNvbnN0IGNhbGxiYWNrcyA9ICh0aGlzLiQkLmNhbGxiYWNrc1t0eXBlXSB8fCAodGhpcy4kJC5jYWxsYmFja3NbdHlwZV0gPSBbXSkpO1xuICAgICAgICBjYWxsYmFja3MucHVzaChjYWxsYmFjayk7XG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBpbmRleCA9IGNhbGxiYWNrcy5pbmRleE9mKGNhbGxiYWNrKTtcbiAgICAgICAgICAgIGlmIChpbmRleCAhPT0gLTEpXG4gICAgICAgICAgICAgICAgY2FsbGJhY2tzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIH07XG4gICAgfVxuICAgICRzZXQoJCRwcm9wcykge1xuICAgICAgICBpZiAodGhpcy4kJHNldCAmJiAhaXNfZW1wdHkoJCRwcm9wcykpIHtcbiAgICAgICAgICAgIHRoaXMuJCQuc2tpcF9ib3VuZCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLiQkc2V0KCQkcHJvcHMpO1xuICAgICAgICAgICAgdGhpcy4kJC5za2lwX2JvdW5kID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRpc3BhdGNoX2Rldih0eXBlLCBkZXRhaWwpIHtcbiAgICBkb2N1bWVudC5kaXNwYXRjaEV2ZW50KGN1c3RvbV9ldmVudCh0eXBlLCBPYmplY3QuYXNzaWduKHsgdmVyc2lvbjogJzMuNDkuMCcgfSwgZGV0YWlsKSwgeyBidWJibGVzOiB0cnVlIH0pKTtcbn1cbmZ1bmN0aW9uIGFwcGVuZF9kZXYodGFyZ2V0LCBub2RlKSB7XG4gICAgZGlzcGF0Y2hfZGV2KCdTdmVsdGVET01JbnNlcnQnLCB7IHRhcmdldCwgbm9kZSB9KTtcbiAgICBhcHBlbmQodGFyZ2V0LCBub2RlKTtcbn1cbmZ1bmN0aW9uIGFwcGVuZF9oeWRyYXRpb25fZGV2KHRhcmdldCwgbm9kZSkge1xuICAgIGRpc3BhdGNoX2RldignU3ZlbHRlRE9NSW5zZXJ0JywgeyB0YXJnZXQsIG5vZGUgfSk7XG4gICAgYXBwZW5kX2h5ZHJhdGlvbih0YXJnZXQsIG5vZGUpO1xufVxuZnVuY3Rpb24gaW5zZXJ0X2Rldih0YXJnZXQsIG5vZGUsIGFuY2hvcikge1xuICAgIGRpc3BhdGNoX2RldignU3ZlbHRlRE9NSW5zZXJ0JywgeyB0YXJnZXQsIG5vZGUsIGFuY2hvciB9KTtcbiAgICBpbnNlcnQodGFyZ2V0LCBub2RlLCBhbmNob3IpO1xufVxuZnVuY3Rpb24gaW5zZXJ0X2h5ZHJhdGlvbl9kZXYodGFyZ2V0LCBub2RlLCBhbmNob3IpIHtcbiAgICBkaXNwYXRjaF9kZXYoJ1N2ZWx0ZURPTUluc2VydCcsIHsgdGFyZ2V0LCBub2RlLCBhbmNob3IgfSk7XG4gICAgaW5zZXJ0X2h5ZHJhdGlvbih0YXJnZXQsIG5vZGUsIGFuY2hvcik7XG59XG5mdW5jdGlvbiBkZXRhY2hfZGV2KG5vZGUpIHtcbiAgICBkaXNwYXRjaF9kZXYoJ1N2ZWx0ZURPTVJlbW92ZScsIHsgbm9kZSB9KTtcbiAgICBkZXRhY2gobm9kZSk7XG59XG5mdW5jdGlvbiBkZXRhY2hfYmV0d2Vlbl9kZXYoYmVmb3JlLCBhZnRlcikge1xuICAgIHdoaWxlIChiZWZvcmUubmV4dFNpYmxpbmcgJiYgYmVmb3JlLm5leHRTaWJsaW5nICE9PSBhZnRlcikge1xuICAgICAgICBkZXRhY2hfZGV2KGJlZm9yZS5uZXh0U2libGluZyk7XG4gICAgfVxufVxuZnVuY3Rpb24gZGV0YWNoX2JlZm9yZV9kZXYoYWZ0ZXIpIHtcbiAgICB3aGlsZSAoYWZ0ZXIucHJldmlvdXNTaWJsaW5nKSB7XG4gICAgICAgIGRldGFjaF9kZXYoYWZ0ZXIucHJldmlvdXNTaWJsaW5nKTtcbiAgICB9XG59XG5mdW5jdGlvbiBkZXRhY2hfYWZ0ZXJfZGV2KGJlZm9yZSkge1xuICAgIHdoaWxlIChiZWZvcmUubmV4dFNpYmxpbmcpIHtcbiAgICAgICAgZGV0YWNoX2RldihiZWZvcmUubmV4dFNpYmxpbmcpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGxpc3Rlbl9kZXYobm9kZSwgZXZlbnQsIGhhbmRsZXIsIG9wdGlvbnMsIGhhc19wcmV2ZW50X2RlZmF1bHQsIGhhc19zdG9wX3Byb3BhZ2F0aW9uKSB7XG4gICAgY29uc3QgbW9kaWZpZXJzID0gb3B0aW9ucyA9PT0gdHJ1ZSA/IFsnY2FwdHVyZSddIDogb3B0aW9ucyA/IEFycmF5LmZyb20oT2JqZWN0LmtleXMob3B0aW9ucykpIDogW107XG4gICAgaWYgKGhhc19wcmV2ZW50X2RlZmF1bHQpXG4gICAgICAgIG1vZGlmaWVycy5wdXNoKCdwcmV2ZW50RGVmYXVsdCcpO1xuICAgIGlmIChoYXNfc3RvcF9wcm9wYWdhdGlvbilcbiAgICAgICAgbW9kaWZpZXJzLnB1c2goJ3N0b3BQcm9wYWdhdGlvbicpO1xuICAgIGRpc3BhdGNoX2RldignU3ZlbHRlRE9NQWRkRXZlbnRMaXN0ZW5lcicsIHsgbm9kZSwgZXZlbnQsIGhhbmRsZXIsIG1vZGlmaWVycyB9KTtcbiAgICBjb25zdCBkaXNwb3NlID0gbGlzdGVuKG5vZGUsIGV2ZW50LCBoYW5kbGVyLCBvcHRpb25zKTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBkaXNwYXRjaF9kZXYoJ1N2ZWx0ZURPTVJlbW92ZUV2ZW50TGlzdGVuZXInLCB7IG5vZGUsIGV2ZW50LCBoYW5kbGVyLCBtb2RpZmllcnMgfSk7XG4gICAgICAgIGRpc3Bvc2UoKTtcbiAgICB9O1xufVxuZnVuY3Rpb24gYXR0cl9kZXYobm9kZSwgYXR0cmlidXRlLCB2YWx1ZSkge1xuICAgIGF0dHIobm9kZSwgYXR0cmlidXRlLCB2YWx1ZSk7XG4gICAgaWYgKHZhbHVlID09IG51bGwpXG4gICAgICAgIGRpc3BhdGNoX2RldignU3ZlbHRlRE9NUmVtb3ZlQXR0cmlidXRlJywgeyBub2RlLCBhdHRyaWJ1dGUgfSk7XG4gICAgZWxzZVxuICAgICAgICBkaXNwYXRjaF9kZXYoJ1N2ZWx0ZURPTVNldEF0dHJpYnV0ZScsIHsgbm9kZSwgYXR0cmlidXRlLCB2YWx1ZSB9KTtcbn1cbmZ1bmN0aW9uIHByb3BfZGV2KG5vZGUsIHByb3BlcnR5LCB2YWx1ZSkge1xuICAgIG5vZGVbcHJvcGVydHldID0gdmFsdWU7XG4gICAgZGlzcGF0Y2hfZGV2KCdTdmVsdGVET01TZXRQcm9wZXJ0eScsIHsgbm9kZSwgcHJvcGVydHksIHZhbHVlIH0pO1xufVxuZnVuY3Rpb24gZGF0YXNldF9kZXYobm9kZSwgcHJvcGVydHksIHZhbHVlKSB7XG4gICAgbm9kZS5kYXRhc2V0W3Byb3BlcnR5XSA9IHZhbHVlO1xuICAgIGRpc3BhdGNoX2RldignU3ZlbHRlRE9NU2V0RGF0YXNldCcsIHsgbm9kZSwgcHJvcGVydHksIHZhbHVlIH0pO1xufVxuZnVuY3Rpb24gc2V0X2RhdGFfZGV2KHRleHQsIGRhdGEpIHtcbiAgICBkYXRhID0gJycgKyBkYXRhO1xuICAgIGlmICh0ZXh0Lndob2xlVGV4dCA9PT0gZGF0YSlcbiAgICAgICAgcmV0dXJuO1xuICAgIGRpc3BhdGNoX2RldignU3ZlbHRlRE9NU2V0RGF0YScsIHsgbm9kZTogdGV4dCwgZGF0YSB9KTtcbiAgICB0ZXh0LmRhdGEgPSBkYXRhO1xufVxuZnVuY3Rpb24gdmFsaWRhdGVfZWFjaF9hcmd1bWVudChhcmcpIHtcbiAgICBpZiAodHlwZW9mIGFyZyAhPT0gJ3N0cmluZycgJiYgIShhcmcgJiYgdHlwZW9mIGFyZyA9PT0gJ29iamVjdCcgJiYgJ2xlbmd0aCcgaW4gYXJnKSkge1xuICAgICAgICBsZXQgbXNnID0gJ3sjZWFjaH0gb25seSBpdGVyYXRlcyBvdmVyIGFycmF5LWxpa2Ugb2JqZWN0cy4nO1xuICAgICAgICBpZiAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBhcmcgJiYgU3ltYm9sLml0ZXJhdG9yIGluIGFyZykge1xuICAgICAgICAgICAgbXNnICs9ICcgWW91IGNhbiB1c2UgYSBzcHJlYWQgdG8gY29udmVydCB0aGlzIGl0ZXJhYmxlIGludG8gYW4gYXJyYXkuJztcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbiAgICB9XG59XG5mdW5jdGlvbiB2YWxpZGF0ZV9zbG90cyhuYW1lLCBzbG90LCBrZXlzKSB7XG4gICAgZm9yIChjb25zdCBzbG90X2tleSBvZiBPYmplY3Qua2V5cyhzbG90KSkge1xuICAgICAgICBpZiAoIX5rZXlzLmluZGV4T2Yoc2xvdF9rZXkpKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYDwke25hbWV9PiByZWNlaXZlZCBhbiB1bmV4cGVjdGVkIHNsb3QgXCIke3Nsb3Rfa2V5fVwiLmApO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gdmFsaWRhdGVfZHluYW1pY19lbGVtZW50KHRhZykge1xuICAgIGNvbnN0IGlzX3N0cmluZyA9IHR5cGVvZiB0YWcgPT09ICdzdHJpbmcnO1xuICAgIGlmICh0YWcgJiYgIWlzX3N0cmluZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJzxzdmVsdGU6ZWxlbWVudD4gZXhwZWN0cyBcInRoaXNcIiBhdHRyaWJ1dGUgdG8gYmUgYSBzdHJpbmcuJyk7XG4gICAgfVxufVxuZnVuY3Rpb24gdmFsaWRhdGVfdm9pZF9keW5hbWljX2VsZW1lbnQodGFnKSB7XG4gICAgaWYgKHRhZyAmJiBpc192b2lkKHRhZykpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGA8c3ZlbHRlOmVsZW1lbnQgdGhpcz1cIiR7dGFnfVwiPiBpcyBzZWxmLWNsb3NpbmcgYW5kIGNhbm5vdCBoYXZlIGNvbnRlbnQuYCk7XG4gICAgfVxufVxuLyoqXG4gKiBCYXNlIGNsYXNzIGZvciBTdmVsdGUgY29tcG9uZW50cyB3aXRoIHNvbWUgbWlub3IgZGV2LWVuaGFuY2VtZW50cy4gVXNlZCB3aGVuIGRldj10cnVlLlxuICovXG5jbGFzcyBTdmVsdGVDb21wb25lbnREZXYgZXh0ZW5kcyBTdmVsdGVDb21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKCFvcHRpb25zIHx8ICghb3B0aW9ucy50YXJnZXQgJiYgIW9wdGlvbnMuJCRpbmxpbmUpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCIndGFyZ2V0JyBpcyBhIHJlcXVpcmVkIG9wdGlvblwiKTtcbiAgICAgICAgfVxuICAgICAgICBzdXBlcigpO1xuICAgIH1cbiAgICAkZGVzdHJveSgpIHtcbiAgICAgICAgc3VwZXIuJGRlc3Ryb3koKTtcbiAgICAgICAgdGhpcy4kZGVzdHJveSA9ICgpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignQ29tcG9uZW50IHdhcyBhbHJlYWR5IGRlc3Ryb3llZCcpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgfTtcbiAgICB9XG4gICAgJGNhcHR1cmVfc3RhdGUoKSB7IH1cbiAgICAkaW5qZWN0X3N0YXRlKCkgeyB9XG59XG4vKipcbiAqIEJhc2UgY2xhc3MgdG8gY3JlYXRlIHN0cm9uZ2x5IHR5cGVkIFN2ZWx0ZSBjb21wb25lbnRzLlxuICogVGhpcyBvbmx5IGV4aXN0cyBmb3IgdHlwaW5nIHB1cnBvc2VzIGFuZCBzaG91bGQgYmUgdXNlZCBpbiBgLmQudHNgIGZpbGVzLlxuICpcbiAqICMjIyBFeGFtcGxlOlxuICpcbiAqIFlvdSBoYXZlIGNvbXBvbmVudCBsaWJyYXJ5IG9uIG5wbSBjYWxsZWQgYGNvbXBvbmVudC1saWJyYXJ5YCwgZnJvbSB3aGljaFxuICogeW91IGV4cG9ydCBhIGNvbXBvbmVudCBjYWxsZWQgYE15Q29tcG9uZW50YC4gRm9yIFN2ZWx0ZStUeXBlU2NyaXB0IHVzZXJzLFxuICogeW91IHdhbnQgdG8gcHJvdmlkZSB0eXBpbmdzLiBUaGVyZWZvcmUgeW91IGNyZWF0ZSBhIGBpbmRleC5kLnRzYDpcbiAqIGBgYHRzXG4gKiBpbXBvcnQgeyBTdmVsdGVDb21wb25lbnRUeXBlZCB9IGZyb20gXCJzdmVsdGVcIjtcbiAqIGV4cG9ydCBjbGFzcyBNeUNvbXBvbmVudCBleHRlbmRzIFN2ZWx0ZUNvbXBvbmVudFR5cGVkPHtmb286IHN0cmluZ30+IHt9XG4gKiBgYGBcbiAqIFR5cGluZyB0aGlzIG1ha2VzIGl0IHBvc3NpYmxlIGZvciBJREVzIGxpa2UgVlMgQ29kZSB3aXRoIHRoZSBTdmVsdGUgZXh0ZW5zaW9uXG4gKiB0byBwcm92aWRlIGludGVsbGlzZW5zZSBhbmQgdG8gdXNlIHRoZSBjb21wb25lbnQgbGlrZSB0aGlzIGluIGEgU3ZlbHRlIGZpbGVcbiAqIHdpdGggVHlwZVNjcmlwdDpcbiAqIGBgYHN2ZWx0ZVxuICogPHNjcmlwdCBsYW5nPVwidHNcIj5cbiAqIFx0aW1wb3J0IHsgTXlDb21wb25lbnQgfSBmcm9tIFwiY29tcG9uZW50LWxpYnJhcnlcIjtcbiAqIDwvc2NyaXB0PlxuICogPE15Q29tcG9uZW50IGZvbz17J2Jhcid9IC8+XG4gKiBgYGBcbiAqXG4gKiAjIyMjIFdoeSBub3QgbWFrZSB0aGlzIHBhcnQgb2YgYFN2ZWx0ZUNvbXBvbmVudChEZXYpYD9cbiAqIEJlY2F1c2VcbiAqIGBgYHRzXG4gKiBjbGFzcyBBU3ViY2xhc3NPZlN2ZWx0ZUNvbXBvbmVudCBleHRlbmRzIFN2ZWx0ZUNvbXBvbmVudDx7Zm9vOiBzdHJpbmd9PiB7fVxuICogY29uc3QgY29tcG9uZW50OiB0eXBlb2YgU3ZlbHRlQ29tcG9uZW50ID0gQVN1YmNsYXNzT2ZTdmVsdGVDb21wb25lbnQ7XG4gKiBgYGBcbiAqIHdpbGwgdGhyb3cgYSB0eXBlIGVycm9yLCBzbyB3ZSBuZWVkIHRvIHNlcGFyYXRlIHRoZSBtb3JlIHN0cmljdGx5IHR5cGVkIGNsYXNzLlxuICovXG5jbGFzcyBTdmVsdGVDb21wb25lbnRUeXBlZCBleHRlbmRzIFN2ZWx0ZUNvbXBvbmVudERldiB7XG4gICAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgICAgICBzdXBlcihvcHRpb25zKTtcbiAgICB9XG59XG5mdW5jdGlvbiBsb29wX2d1YXJkKHRpbWVvdXQpIHtcbiAgICBjb25zdCBzdGFydCA9IERhdGUubm93KCk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgaWYgKERhdGUubm93KCkgLSBzdGFydCA+IHRpbWVvdXQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW5maW5pdGUgbG9vcCBkZXRlY3RlZCcpO1xuICAgICAgICB9XG4gICAgfTtcbn1cblxuZXhwb3J0IHsgSHRtbFRhZywgSHRtbFRhZ0h5ZHJhdGlvbiwgU3ZlbHRlQ29tcG9uZW50LCBTdmVsdGVDb21wb25lbnREZXYsIFN2ZWx0ZUNvbXBvbmVudFR5cGVkLCBTdmVsdGVFbGVtZW50LCBhY3Rpb25fZGVzdHJveWVyLCBhZGRfYXR0cmlidXRlLCBhZGRfY2xhc3NlcywgYWRkX2ZsdXNoX2NhbGxiYWNrLCBhZGRfbG9jYXRpb24sIGFkZF9yZW5kZXJfY2FsbGJhY2ssIGFkZF9yZXNpemVfbGlzdGVuZXIsIGFkZF9zdHlsZXMsIGFkZF90cmFuc2Zvcm0sIGFmdGVyVXBkYXRlLCBhcHBlbmQsIGFwcGVuZF9kZXYsIGFwcGVuZF9lbXB0eV9zdHlsZXNoZWV0LCBhcHBlbmRfaHlkcmF0aW9uLCBhcHBlbmRfaHlkcmF0aW9uX2RldiwgYXBwZW5kX3N0eWxlcywgYXNzaWduLCBhdHRyLCBhdHRyX2RldiwgYXR0cmlidXRlX3RvX29iamVjdCwgYmVmb3JlVXBkYXRlLCBiaW5kLCBiaW5kaW5nX2NhbGxiYWNrcywgYmxhbmtfb2JqZWN0LCBidWJibGUsIGNoZWNrX291dHJvcywgY2hpbGRyZW4sIGNsYWltX2NvbXBvbmVudCwgY2xhaW1fZWxlbWVudCwgY2xhaW1faHRtbF90YWcsIGNsYWltX3NwYWNlLCBjbGFpbV9zdmdfZWxlbWVudCwgY2xhaW1fdGV4dCwgY2xlYXJfbG9vcHMsIGNvbXBvbmVudF9zdWJzY3JpYmUsIGNvbXB1dGVfcmVzdF9wcm9wcywgY29tcHV0ZV9zbG90cywgY3JlYXRlRXZlbnREaXNwYXRjaGVyLCBjcmVhdGVfYW5pbWF0aW9uLCBjcmVhdGVfYmlkaXJlY3Rpb25hbF90cmFuc2l0aW9uLCBjcmVhdGVfY29tcG9uZW50LCBjcmVhdGVfaW5fdHJhbnNpdGlvbiwgY3JlYXRlX291dF90cmFuc2l0aW9uLCBjcmVhdGVfc2xvdCwgY3JlYXRlX3Nzcl9jb21wb25lbnQsIGN1cnJlbnRfY29tcG9uZW50LCBjdXN0b21fZXZlbnQsIGRhdGFzZXRfZGV2LCBkZWJ1ZywgZGVzdHJveV9ibG9jaywgZGVzdHJveV9jb21wb25lbnQsIGRlc3Ryb3lfZWFjaCwgZGV0YWNoLCBkZXRhY2hfYWZ0ZXJfZGV2LCBkZXRhY2hfYmVmb3JlX2RldiwgZGV0YWNoX2JldHdlZW5fZGV2LCBkZXRhY2hfZGV2LCBkaXJ0eV9jb21wb25lbnRzLCBkaXNwYXRjaF9kZXYsIGVhY2gsIGVsZW1lbnQsIGVsZW1lbnRfaXMsIGVtcHR5LCBlbmRfaHlkcmF0aW5nLCBlc2NhcGUsIGVzY2FwZV9hdHRyaWJ1dGVfdmFsdWUsIGVzY2FwZV9vYmplY3QsIGV4Y2x1ZGVfaW50ZXJuYWxfcHJvcHMsIGZpeF9hbmRfZGVzdHJveV9ibG9jaywgZml4X2FuZF9vdXRyb19hbmRfZGVzdHJveV9ibG9jaywgZml4X3Bvc2l0aW9uLCBmbHVzaCwgZ2V0QWxsQ29udGV4dHMsIGdldENvbnRleHQsIGdldF9hbGxfZGlydHlfZnJvbV9zY29wZSwgZ2V0X2JpbmRpbmdfZ3JvdXBfdmFsdWUsIGdldF9jdXJyZW50X2NvbXBvbmVudCwgZ2V0X2N1c3RvbV9lbGVtZW50c19zbG90cywgZ2V0X3Jvb3RfZm9yX3N0eWxlLCBnZXRfc2xvdF9jaGFuZ2VzLCBnZXRfc3ByZWFkX29iamVjdCwgZ2V0X3NwcmVhZF91cGRhdGUsIGdldF9zdG9yZV92YWx1ZSwgZ2xvYmFscywgZ3JvdXBfb3V0cm9zLCBoYW5kbGVfcHJvbWlzZSwgaGFzQ29udGV4dCwgaGFzX3Byb3AsIGlkZW50aXR5LCBpbml0LCBpbnNlcnQsIGluc2VydF9kZXYsIGluc2VydF9oeWRyYXRpb24sIGluc2VydF9oeWRyYXRpb25fZGV2LCBpbnRyb3MsIGludmFsaWRfYXR0cmlidXRlX25hbWVfY2hhcmFjdGVyLCBpc19jbGllbnQsIGlzX2Nyb3Nzb3JpZ2luLCBpc19lbXB0eSwgaXNfZnVuY3Rpb24sIGlzX3Byb21pc2UsIGlzX3ZvaWQsIGxpc3RlbiwgbGlzdGVuX2RldiwgbG9vcCwgbG9vcF9ndWFyZCwgbWVyZ2Vfc3NyX3N0eWxlcywgbWlzc2luZ19jb21wb25lbnQsIG1vdW50X2NvbXBvbmVudCwgbm9vcCwgbm90X2VxdWFsLCBub3csIG51bGxfdG9fZW1wdHksIG9iamVjdF93aXRob3V0X3Byb3BlcnRpZXMsIG9uRGVzdHJveSwgb25Nb3VudCwgb25jZSwgb3V0cm9fYW5kX2Rlc3Ryb3lfYmxvY2ssIHByZXZlbnRfZGVmYXVsdCwgcHJvcF9kZXYsIHF1ZXJ5X3NlbGVjdG9yX2FsbCwgcmFmLCBydW4sIHJ1bl9hbGwsIHNhZmVfbm90X2VxdWFsLCBzY2hlZHVsZV91cGRhdGUsIHNlbGVjdF9tdWx0aXBsZV92YWx1ZSwgc2VsZWN0X29wdGlvbiwgc2VsZWN0X29wdGlvbnMsIHNlbGVjdF92YWx1ZSwgc2VsZiwgc2V0Q29udGV4dCwgc2V0X2F0dHJpYnV0ZXMsIHNldF9jdXJyZW50X2NvbXBvbmVudCwgc2V0X2N1c3RvbV9lbGVtZW50X2RhdGEsIHNldF9kYXRhLCBzZXRfZGF0YV9kZXYsIHNldF9pbnB1dF90eXBlLCBzZXRfaW5wdXRfdmFsdWUsIHNldF9ub3csIHNldF9yYWYsIHNldF9zdG9yZV92YWx1ZSwgc2V0X3N0eWxlLCBzZXRfc3ZnX2F0dHJpYnV0ZXMsIHNwYWNlLCBzcHJlYWQsIHNyY191cmxfZXF1YWwsIHN0YXJ0X2h5ZHJhdGluZywgc3RvcF9wcm9wYWdhdGlvbiwgc3Vic2NyaWJlLCBzdmdfZWxlbWVudCwgdGV4dCwgdGljaywgdGltZV9yYW5nZXNfdG9fYXJyYXksIHRvX251bWJlciwgdG9nZ2xlX2NsYXNzLCB0cmFuc2l0aW9uX2luLCB0cmFuc2l0aW9uX291dCwgdHJ1c3RlZCwgdXBkYXRlX2F3YWl0X2Jsb2NrX2JyYW5jaCwgdXBkYXRlX2tleWVkX2VhY2gsIHVwZGF0ZV9zbG90LCB1cGRhdGVfc2xvdF9iYXNlLCB2YWxpZGF0ZV9jb21wb25lbnQsIHZhbGlkYXRlX2R5bmFtaWNfZWxlbWVudCwgdmFsaWRhdGVfZWFjaF9hcmd1bWVudCwgdmFsaWRhdGVfZWFjaF9rZXlzLCB2YWxpZGF0ZV9zbG90cywgdmFsaWRhdGVfc3RvcmUsIHZhbGlkYXRlX3ZvaWRfZHluYW1pY19lbGVtZW50LCB4bGlua19hdHRyIH07XG4iLCAiPHNjcmlwdCBsYW5nPVwidHNcIj5cbiAgICBpbXBvcnQgdHlwZSB7IE1vbnN0ZXIgfSBmcm9tIFwiQHR5cGVzXCI7XG4gICAgaW1wb3J0IHtcbiAgICAgICAgZGVib3VuY2UsXG4gICAgICAgIEV4dHJhQnV0dG9uQ29tcG9uZW50LFxuICAgICAgICBNZW51LFxuICAgICAgICBOb3RpY2UsXG4gICAgICAgIHN0cmluZ2lmeVlhbWxcbiAgICB9IGZyb20gXCJvYnNpZGlhblwiO1xuICAgIGltcG9ydCB7IHN0cmluZ2lmeSB9IGZyb20gXCJxdWVyeXN0cmluZ1wiO1xuICAgIGltcG9ydCB7IEVYUE9SVF9TWU1CT0wsIFNBVkVfU1lNQk9MIH0gZnJvbSBcInNyYy9kYXRhL2NvbnN0YW50c1wiO1xuICAgIGltcG9ydCB0eXBlIHsgU3RhdGJsb2NrSXRlbSB9IGZyb20gXCJzcmMvbGF5b3V0cy90eXBlc1wiO1xuICAgIGltcG9ydCB0eXBlIFN0YXRCbG9ja1BsdWdpbiBmcm9tIFwic3JjL21haW5cIjtcbiAgICBpbXBvcnQge1xuICAgICAgICBjcmVhdGVFdmVudERpc3BhdGNoZXIsXG4gICAgICAgIG9uRGVzdHJveSxcbiAgICAgICAgb25Nb3VudCxcbiAgICAgICAgc2V0Q29udGV4dFxuICAgIH0gZnJvbSBcInN2ZWx0ZVwiO1xuICAgIGltcG9ydCB7IFdyaXRhYmxlLCB3cml0YWJsZSB9IGZyb20gXCJzdmVsdGUvc3RvcmVcIjtcbiAgICBpbXBvcnQgdHlwZSBTdGF0QmxvY2tSZW5kZXJlciBmcm9tIFwiLi9zdGF0YmxvY2tcIjtcblxuICAgIGltcG9ydCBCYXIgZnJvbSBcIi4vdWkvQmFyLnN2ZWx0ZVwiO1xuICAgIGltcG9ydCBDb250ZW50IGZyb20gXCIuL3VpL0NvbnRlbnQuc3ZlbHRlXCI7XG5cbiAgICBjb25zdCBkaXNwYXRjaCA9IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlcigpO1xuXG4gICAgZXhwb3J0IGxldCBtb25zdGVyOiBNb25zdGVyO1xuICAgIGV4cG9ydCBsZXQgY29udGV4dDogc3RyaW5nO1xuICAgIGV4cG9ydCBsZXQgcGx1Z2luOiBTdGF0QmxvY2tQbHVnaW47XG4gICAgZXhwb3J0IGxldCBzdGF0YmxvY2s6IFN0YXRibG9ja0l0ZW1bXTtcbiAgICBleHBvcnQgbGV0IHJlbmRlcmVyOiBTdGF0QmxvY2tSZW5kZXJlcjtcbiAgICBleHBvcnQgbGV0IGxheW91dDogc3RyaW5nO1xuICAgIGV4cG9ydCBsZXQgY2FuU2F2ZTogYm9vbGVhbiA9IHRydWU7XG5cbiAgICBsZXQgbWF4Q29sdW1ucyA9XG4gICAgICAgICFpc05hTihOdW1iZXIobW9uc3Rlci5jb2x1bW5zKSkgJiYgTnVtYmVyKG1vbnN0ZXIuY29sdW1ucykgPiAwXG4gICAgICAgICAgICA/IE51bWJlcihtb25zdGVyLmNvbHVtbnMpXG4gICAgICAgICAgICA6IDI7XG5cbiAgICAkOiBtb25zdGVyQ29sdW1uV2lkdGggPSBOdW1iZXIoYCR7bW9uc3Rlci5jb2x1bW5XaWR0aH1gLnJlcGxhY2UoL1xcRC9nLCBcIlwiKSk7XG4gICAgJDogY29sdW1uV2lkdGggPVxuICAgICAgICAhaXNOYU4obW9uc3RlckNvbHVtbldpZHRoKSAmJiBtb25zdGVyQ29sdW1uV2lkdGggPiAwXG4gICAgICAgICAgICA/IG1vbnN0ZXJDb2x1bW5XaWR0aFxuICAgICAgICAgICAgOiA0MDA7XG5cbiAgICBsZXQgY2FuRXhwb3J0ID0gbW9uc3Rlci5leHBvcnQgPz8gcGx1Z2luLnNldHRpbmdzLmV4cG9ydDtcbiAgICBsZXQgY2FuRGljZSA9XG4gICAgICAgIHBsdWdpbi5jYW5Vc2VEaWNlUm9sbGVyICYmIChtb25zdGVyLmRpY2UgPz8gcGx1Z2luLnNldHRpbmdzLnVzZURpY2UpO1xuICAgIGxldCBjYW5SZW5kZXIgPSBtb25zdGVyLnJlbmRlciA/PyBwbHVnaW4uc2V0dGluZ3MucmVuZGVyRGljZTtcblxuICAgIHNldENvbnRleHQ8U3RhdEJsb2NrUGx1Z2luPihcInBsdWdpblwiLCBwbHVnaW4pO1xuICAgIHNldENvbnRleHQ8Ym9vbGVhbj4oXCJ0cnlUb1JlbmRlckxpbmtzXCIsIHBsdWdpbi5zZXR0aW5ncy50cnlUb1JlbmRlckxpbmtzKTtcbiAgICBzZXRDb250ZXh0PHN0cmluZz4oXCJjb250ZXh0XCIsIGNvbnRleHQpO1xuICAgIHNldENvbnRleHQ8TW9uc3Rlcj4oXCJtb25zdGVyXCIsIG1vbnN0ZXIpO1xuICAgIHNldENvbnRleHQ8Ym9vbGVhbj4oXCJkaWNlXCIsIGNhbkRpY2UpO1xuICAgIHNldENvbnRleHQ8Ym9vbGVhbj4oXCJyZW5kZXJcIiwgY2FuUmVuZGVyKTtcbiAgICBzZXRDb250ZXh0PFN0YXRCbG9ja1JlbmRlcmVyPihcInJlbmRlcmVyXCIsIHJlbmRlcmVyKTtcblxuICAgIGNvbnN0IHJlc2V0ID0gd3JpdGFibGU8Ym9vbGVhbj4oZmFsc2UpO1xuICAgIHNldENvbnRleHQ8V3JpdGFibGU8Ym9vbGVhbj4+KFwicmVzZXRcIiwgcmVzZXQpO1xuXG4gICAgbGV0IGNvbnRhaW5lcjogSFRNTEVsZW1lbnQ7XG4gICAgbGV0IGNvbHVtbnM6IG51bWJlciA9IG1heENvbHVtbnM7XG4gICAgbGV0IHJlYWR5ID0gZmFsc2U7XG5cbiAgICBjb25zdCBzZXRDb2x1bW5zID0gKCkgPT4ge1xuICAgICAgICBpZiAobW9uc3Rlci5mb3JjZUNvbHVtbnMpIHtcbiAgICAgICAgICAgIGNvbHVtbnMgPSBtYXhDb2x1bW5zO1xuICAgICAgICAgICAgb2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHdpZHRoID0gY29udGFpbmVyLmNsaWVudFdpZHRoO1xuICAgICAgICBjb2x1bW5zID0gTWF0aC5taW4oXG4gICAgICAgICAgICBNYXRoLm1heChNYXRoLmZsb29yKHdpZHRoIC8gY29sdW1uV2lkdGgpLCAxKSxcbiAgICAgICAgICAgIG1heENvbHVtbnNcbiAgICAgICAgKTtcbiAgICB9O1xuICAgIGNvbnN0IG9uUmVzaXplID0gZGVib3VuY2UoXG4gICAgICAgICgpID0+IHtcbiAgICAgICAgICAgIHNldENvbHVtbnMoKTtcbiAgICAgICAgICAgIGlmICghcmVhZHkpIHJlYWR5ID0gdHJ1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgMTAwLFxuICAgICAgICBmYWxzZVxuICAgICk7XG4gICAgY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgUmVzaXplT2JzZXJ2ZXIob25SZXNpemUpO1xuXG4gICAgb25Nb3VudCgoKSA9PiB7XG4gICAgICAgIHNldENvbHVtbnMoKTtcbiAgICAgICAgb2JzZXJ2ZXIub2JzZXJ2ZShjb250YWluZXIpO1xuICAgIH0pO1xuXG4gICAgb25EZXN0cm95KCgpID0+IHtcbiAgICAgICAgb2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICAgIH0pO1xuXG4gICAgY29uc3QgaWNvbnNFbCA9IChub2RlOiBIVE1MRWxlbWVudCkgPT4ge1xuICAgICAgICBuZXcgRXh0cmFCdXR0b25Db21wb25lbnQobm9kZSkuc2V0SWNvbihcInZlcnRpY2FsLXRocmVlLWRvdHNcIik7XG4gICAgfTtcbiAgICBjb25zdCBtZW51ID0gbmV3IE1lbnUoKTtcbiAgICBtZW51LmFkZEl0ZW0oKGl0ZW0pID0+XG4gICAgICAgIGl0ZW1cbiAgICAgICAgICAgIC5zZXRJY29uKFNBVkVfU1lNQk9MKVxuICAgICAgICAgICAgLnNldFRpdGxlKFwiU2F2ZSB0byBCZXN0aWFyeVwiKVxuICAgICAgICAgICAgLnNldERpc2FibGVkKCFjYW5TYXZlKVxuICAgICAgICAgICAgLm9uQ2xpY2soKCkgPT4gZGlzcGF0Y2goXCJzYXZlXCIpKVxuICAgICk7XG4gICAgbWVudS5hZGRJdGVtKChpdGVtKSA9PiB7XG4gICAgICAgIGl0ZW0uc2V0VGl0bGUoXCJDb3B5IFlBTUxcIilcbiAgICAgICAgICAgIC5zZXRJY29uKFwiY29kZVwiKVxuICAgICAgICAgICAgLm9uQ2xpY2soYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IG5hdmlnYXRvci5jbGlwYm9hcmQud3JpdGVUZXh0KHN0cmluZ2lmeVlhbWwobW9uc3RlcikpO1xuICAgICAgICAgICAgICAgICAgICBuZXcgTm90aWNlKFwiQ3JlYXR1cmUgWUFNTCBjb3BpZWQgdG8gY2xpcGJvYXJkXCIpO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3IE5vdGljZShcbiAgICAgICAgICAgICAgICAgICAgICAgIGBUaGVyZSB3YXMgYW4gaXNzdWUgY29weWluZyB0aGUgeWFtbDpcXG5cXG4ke2UubWVzc2FnZX1gXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgaWYgKGNhbkV4cG9ydClcbiAgICAgICAgbWVudS5hZGRJdGVtKChpdGVtKSA9PlxuICAgICAgICAgICAgaXRlbVxuICAgICAgICAgICAgICAgIC5zZXRJY29uKEVYUE9SVF9TWU1CT0wpXG4gICAgICAgICAgICAgICAgLnNldFRpdGxlKFwiRXhwb3J0IGFzIFBOR1wiKVxuICAgICAgICAgICAgICAgIC5vbkNsaWNrKCgpID0+IGRpc3BhdGNoKFwiZXhwb3J0XCIpKVxuICAgICAgICApO1xuICAgIGlmIChjYW5EaWNlKVxuICAgICAgICBtZW51LmFkZEl0ZW0oKGl0ZW0pID0+XG4gICAgICAgICAgICBpdGVtXG4gICAgICAgICAgICAgICAgLnNldEljb24oXCJyZXNldFwiKVxuICAgICAgICAgICAgICAgIC5zZXRUaXRsZShcIlJlc2V0IERpY2VcIilcbiAgICAgICAgICAgICAgICAub25DbGljaygoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJlc2V0LnNldCh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgcmVzZXQuc2V0KGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICApO1xuICAgIGNvbnN0IHNob3dNZW51ID0gKGV2dDogTW91c2VFdmVudCkgPT4ge1xuICAgICAgICBtZW51LnNob3dBdE1vdXNlRXZlbnQoZXZ0KTtcbiAgICB9O1xuXG4gICAgY29uc3QgbmFtZSA9XG4gICAgICAgIG1vbnN0ZXI/Lm5hbWVcbiAgICAgICAgICAgID8udG9Mb3dlckNhc2UoKVxuICAgICAgICAgICAgLnJlcGxhY2UoL1teQS1aYS16MC05XFxzXS9nLCBcIlwiKVxuICAgICAgICAgICAgLnJlcGxhY2UoL1xccysvZywgXCItXCIpID8/IFwibm8tbmFtZVwiO1xuICAgIGNvbnN0IGxheW91dE5hbWUgPVxuICAgICAgICBsYXlvdXRcbiAgICAgICAgICAgIC50b0xvd2VyQ2FzZSgpXG4gICAgICAgICAgICAucmVwbGFjZSgvW15BLVphLXowLTlcXHNdL2csIFwiXCIpXG4gICAgICAgICAgICAucmVwbGFjZSgvXFxzKy9nLCBcIi1cIikgPz8gXCJuby1sYXlvdXRcIjtcbiAgICBjb25zdCBjbGFzc2VzID0gW25hbWUsIGxheW91dE5hbWVdLmZpbHRlcigobikgPT4gbj8ubGVuZ3RoKTtcbjwvc2NyaXB0PlxuXG48ZGl2IGNsYXNzPVwiY29udGFpbmVyXCIgYmluZDp0aGlzPXtjb250YWluZXJ9PlxuICAgIHsjaWYgcmVhZHl9XG4gICAgICAgIDxkaXZcbiAgICAgICAgICAgIGNsYXNzOm9ic2lkaWFuLXN0YXRibG9jay1wbHVnaW49e3RydWV9XG4gICAgICAgICAgICBjbGFzczpzdGF0YmxvY2s9e3RydWV9XG4gICAgICAgICAgICBjbGFzcz17Y2xhc3Nlcy5qb2luKFwiIFwiKX1cbiAgICAgICAgPlxuICAgICAgICAgICAgeyNpZiBtb25zdGVyfVxuICAgICAgICAgICAgICAgIDxCYXIgLz5cbiAgICAgICAgICAgICAgICB7I2tleSBjb2x1bW5zfVxuICAgICAgICAgICAgICAgICAgICA8Q29udGVudFxuICAgICAgICAgICAgICAgICAgICAgICAge2NvbHVtbnN9XG4gICAgICAgICAgICAgICAgICAgICAgICB7bWF4Q29sdW1uc31cbiAgICAgICAgICAgICAgICAgICAgICAgIHtzdGF0YmxvY2t9XG4gICAgICAgICAgICAgICAgICAgICAgICB7cmVhZHl9XG4gICAgICAgICAgICAgICAgICAgICAgICBvbjpzYXZlXG4gICAgICAgICAgICAgICAgICAgICAgICBvbjpleHBvcnRcbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICB7L2tleX1cbiAgICAgICAgICAgICAgICA8QmFyIC8+XG4gICAgICAgICAgICB7OmVsc2V9XG4gICAgICAgICAgICAgICAgPHNwYW4+SW52YWxpZCBtb25zdGVyLjwvc3Bhbj5cbiAgICAgICAgICAgIHsvaWZ9XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8IS0tIHsjaWYgaWNvbnN9IC0tPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiaWNvbnNcIiB1c2U6aWNvbnNFbCBvbjpjbGljaz17c2hvd01lbnV9IC8+XG4gICAgICAgIDwhLS0gey9pZn0gLS0+XG4gICAgey9pZn1cbjwvZGl2PlxuXG48c3R5bGU+XG4gICAgLmNvbnRhaW5lciB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICBtYXJnaW46IDAuMjVyZW0gMDtcbiAgICB9XG4gICAgLnN0YXRibG9jayB7XG4gICAgICAgIG1hcmdpbjogMCBhdXRvO1xuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gICAgfVxuXG4gICAgLmljb25zIHtcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICByaWdodDogMDtcbiAgICB9XG48L3N0eWxlPlxuIiwgImludGVyZmFjZSBDUiB7XG4gICAgY3I6IHN0cmluZztcbiAgICB2YWx1ZTogbnVtYmVyO1xuICAgIHhwOiBudW1iZXI7XG59XG5cbmV4cG9ydCBjb25zdCBDUjogeyBba2V5OiBzdHJpbmddOiBDUiB9ID0ge1xuICAgIFwiMFwiOiB7XG4gICAgICAgIGNyOiBcIjBcIixcbiAgICAgICAgdmFsdWU6IDAsXG4gICAgICAgIHhwOiAwXG4gICAgfSxcbiAgICBcIjEvOFwiOiB7XG4gICAgICAgIGNyOiBcIjEvOFwiLFxuICAgICAgICB2YWx1ZTogMC4xMjUsXG4gICAgICAgIHhwOiAyNVxuICAgIH0sXG4gICAgXCIxLzRcIjoge1xuICAgICAgICBjcjogXCIxLzRcIixcblxuICAgICAgICB2YWx1ZTogMC4yNSxcbiAgICAgICAgeHA6IDUwXG4gICAgfSxcbiAgICBcIjEvMlwiOiB7XG4gICAgICAgIGNyOiBcIjEvMlwiLFxuICAgICAgICB2YWx1ZTogMC41LFxuICAgICAgICB4cDogMTAwXG4gICAgfSxcbiAgICBcIjAuMTI1XCI6IHtcbiAgICAgICAgY3I6IFwiMS84XCIsXG4gICAgICAgIHZhbHVlOiAwLjEyNSxcbiAgICAgICAgeHA6IDI1XG4gICAgfSxcbiAgICBcIjAuMjVcIjoge1xuICAgICAgICBjcjogXCIxLzRcIixcblxuICAgICAgICB2YWx1ZTogMC4yNSxcbiAgICAgICAgeHA6IDUwXG4gICAgfSxcbiAgICBcIjAuNVwiOiB7XG4gICAgICAgIGNyOiBcIjEvMlwiLFxuICAgICAgICB2YWx1ZTogMC41LFxuICAgICAgICB4cDogMTAwXG4gICAgfSxcbiAgICBcIjFcIjoge1xuICAgICAgICBjcjogXCIxXCIsXG4gICAgICAgIHZhbHVlOiAxLFxuICAgICAgICB4cDogMjAwXG4gICAgfSxcbiAgICBcIjJcIjoge1xuICAgICAgICBjcjogXCIyXCIsXG4gICAgICAgIHZhbHVlOiAyLFxuICAgICAgICB4cDogNDUwXG4gICAgfSxcbiAgICBcIjNcIjoge1xuICAgICAgICBjcjogXCIzXCIsXG4gICAgICAgIHZhbHVlOiAzLFxuICAgICAgICB4cDogNzAwXG4gICAgfSxcbiAgICBcIjRcIjoge1xuICAgICAgICBjcjogXCI0XCIsXG4gICAgICAgIHZhbHVlOiA0LFxuICAgICAgICB4cDogMTEwMFxuICAgIH0sXG4gICAgXCI1XCI6IHtcbiAgICAgICAgY3I6IFwiNVwiLFxuICAgICAgICB2YWx1ZTogNSxcbiAgICAgICAgeHA6IDE4MDBcbiAgICB9LFxuICAgIFwiNlwiOiB7XG4gICAgICAgIGNyOiBcIjZcIixcbiAgICAgICAgdmFsdWU6IDYsXG4gICAgICAgIHhwOiAyMzAwXG4gICAgfSxcbiAgICBcIjdcIjoge1xuICAgICAgICBjcjogXCI3XCIsXG4gICAgICAgIHZhbHVlOiA3LFxuICAgICAgICB4cDogMjkwMFxuICAgIH0sXG4gICAgXCI4XCI6IHtcbiAgICAgICAgY3I6IFwiOFwiLFxuICAgICAgICB2YWx1ZTogOCxcbiAgICAgICAgeHA6IDM5MDBcbiAgICB9LFxuICAgIFwiOVwiOiB7XG4gICAgICAgIGNyOiBcIjlcIixcbiAgICAgICAgdmFsdWU6IDksXG4gICAgICAgIHhwOiA1MDAwXG4gICAgfSxcbiAgICBcIjEwXCI6IHtcbiAgICAgICAgY3I6IFwiMTBcIixcbiAgICAgICAgdmFsdWU6IDEwLFxuICAgICAgICB4cDogNTkwMFxuICAgIH0sXG4gICAgXCIxMVwiOiB7XG4gICAgICAgIGNyOiBcIjExXCIsXG4gICAgICAgIHZhbHVlOiAxMSxcbiAgICAgICAgeHA6IDcyMDBcbiAgICB9LFxuICAgIFwiMTJcIjoge1xuICAgICAgICBjcjogXCIxMlwiLFxuICAgICAgICB2YWx1ZTogMTIsXG4gICAgICAgIHhwOiA4NDAwXG4gICAgfSxcbiAgICBcIjEzXCI6IHtcbiAgICAgICAgY3I6IFwiMTNcIixcbiAgICAgICAgdmFsdWU6IDEzLFxuICAgICAgICB4cDogMTAwMDBcbiAgICB9LFxuICAgIFwiMTRcIjoge1xuICAgICAgICBjcjogXCIxNFwiLFxuICAgICAgICB2YWx1ZTogMTQsXG4gICAgICAgIHhwOiAxMTUwMFxuICAgIH0sXG4gICAgXCIxNVwiOiB7XG4gICAgICAgIGNyOiBcIjE1XCIsXG4gICAgICAgIHZhbHVlOiAxNSxcbiAgICAgICAgeHA6IDEzMDAwXG4gICAgfSxcbiAgICBcIjE2XCI6IHtcbiAgICAgICAgY3I6IFwiMTZcIixcbiAgICAgICAgdmFsdWU6IDE2LFxuICAgICAgICB4cDogMTUwMDBcbiAgICB9LFxuICAgIFwiMTdcIjoge1xuICAgICAgICBjcjogXCIxN1wiLFxuICAgICAgICB2YWx1ZTogMTcsXG4gICAgICAgIHhwOiAxODAwMFxuICAgIH0sXG4gICAgXCIxOFwiOiB7XG4gICAgICAgIGNyOiBcIjE4XCIsXG4gICAgICAgIHZhbHVlOiAxOCxcbiAgICAgICAgeHA6IDIwMDAwXG4gICAgfSxcbiAgICBcIjE5XCI6IHtcbiAgICAgICAgY3I6IFwiMTlcIixcbiAgICAgICAgdmFsdWU6IDE5LFxuICAgICAgICB4cDogMjIwMDBcbiAgICB9LFxuICAgIFwiMjBcIjoge1xuICAgICAgICBjcjogXCIyMFwiLFxuICAgICAgICB2YWx1ZTogMjAsXG4gICAgICAgIHhwOiAyNTAwMFxuICAgIH0sXG4gICAgXCIyMVwiOiB7XG4gICAgICAgIGNyOiBcIjIxXCIsXG4gICAgICAgIHZhbHVlOiAyMSxcbiAgICAgICAgeHA6IDMzMDAwXG4gICAgfSxcbiAgICBcIjIyXCI6IHtcbiAgICAgICAgY3I6IFwiMjJcIixcbiAgICAgICAgdmFsdWU6IDIyLFxuICAgICAgICB4cDogNDEwMDBcbiAgICB9LFxuICAgIFwiMjNcIjoge1xuICAgICAgICBjcjogXCIyM1wiLFxuICAgICAgICB2YWx1ZTogMjMsXG4gICAgICAgIHhwOiA1MDAwMFxuICAgIH0sXG4gICAgXCIyNFwiOiB7XG4gICAgICAgIGNyOiBcIjI0XCIsXG4gICAgICAgIHZhbHVlOiAyNCxcbiAgICAgICAgeHA6IDYyMDAwXG4gICAgfSxcbiAgICBcIjI1XCI6IHtcbiAgICAgICAgY3I6IFwiMjVcIixcbiAgICAgICAgdmFsdWU6IDI1LFxuICAgICAgICB4cDogNzUwMDBcbiAgICB9LFxuICAgIFwiMjZcIjoge1xuICAgICAgICBjcjogXCIyNlwiLFxuICAgICAgICB2YWx1ZTogMjYsXG4gICAgICAgIHhwOiA5MDAwMFxuICAgIH0sXG4gICAgXCIyN1wiOiB7XG4gICAgICAgIGNyOiBcIjI3XCIsXG4gICAgICAgIHZhbHVlOiAyNyxcbiAgICAgICAgeHA6IDEwNTAwMFxuICAgIH0sXG4gICAgXCIyOFwiOiB7XG4gICAgICAgIGNyOiBcIjI4XCIsXG4gICAgICAgIHZhbHVlOiAyOCxcbiAgICAgICAgeHA6IDEyMDAwMFxuICAgIH0sXG4gICAgXCIyOVwiOiB7XG4gICAgICAgIGNyOiBcIjI5XCIsXG4gICAgICAgIHZhbHVlOiAyOSxcbiAgICAgICAgeHA6IDEzNTAwMFxuICAgIH0sXG4gICAgXCIzMFwiOiB7XG4gICAgICAgIGNyOiBcIjMwXCIsXG4gICAgICAgIHZhbHVlOiAzMCxcbiAgICAgICAgeHA6IDE1NTAwMFxuICAgIH1cbn07XG5cbmV4cG9ydCBjb25zdCBEaWNlQnlTaXplOiB7IFtrZXk6IHN0cmluZ106IG51bWJlciB9ID0ge1xuICAgIHRpbnk6IDQsXG4gICAgc21hbGw6IDYsXG4gICAgbWVkaXVtOiA4LFxuICAgIGxhcmdlOiAxMCxcbiAgICBodWdlOiAxMixcbiAgICBnYXJnYW50dWFuOiAyMFxufTtcblxuZXhwb3J0IGNvbnN0IEFiaWxpdHlBbGlhc2VzOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9ID0ge1xuICAgIHN0cjogXCJTdHJcIixcbiAgICBzdHJlbmd0aDogXCJTdHJcIixcblxuICAgIGRleDogXCJEZXhcIixcbiAgICBkZXh0ZXJpdHk6IFwiRGV4XCIsXG5cbiAgICBjb246IFwiQ29uXCIsXG4gICAgY29uc3RpdHV0aW9uOiBcIkNvblwiLFxuXG4gICAgaW50OiBcIkludFwiLFxuICAgIGludGVsbGlnZW5jZTogXCJJbnRcIixcblxuICAgIHdpczogXCJXaXNcIixcbiAgICB3aXNkb206IFwiV2lzXCIsXG5cbiAgICBjaGE6IFwiQ2hhXCIsXG4gICAgY2hhcmlzbWE6IFwiQ2hhXCJcbn07XG5cbmV4cG9ydCBjb25zdCBTQVZFX0lDT04gPSBgPHN2ZyBhcmlhLWhpZGRlbj1cInRydWVcIiBmb2N1c2FibGU9XCJmYWxzZVwiIGRhdGEtcHJlZml4PVwiZmFyXCIgZGF0YS1pY29uPVwic2F2ZVwiIGNsYXNzPVwic3ZnLWlubGluZS0tZmEgZmEtc2F2ZSBmYS13LTE0XCIgcm9sZT1cImltZ1wiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDQ0OCA1MTJcIj48cGF0aCBmaWxsPVwiY3VycmVudENvbG9yXCIgZD1cIk00MzMuOTQxIDEyOS45NDFsLTgzLjg4Mi04My44ODJBNDggNDggMCAwIDAgMzE2LjExOCAzMkg0OEMyMS40OSAzMiAwIDUzLjQ5IDAgODB2MzUyYzAgMjYuNTEgMjEuNDkgNDggNDggNDhoMzUyYzI2LjUxIDAgNDgtMjEuNDkgNDgtNDhWMTYzLjg4MmE0OCA0OCAwIDAgMC0xNC4wNTktMzMuOTQxek0yNzIgODB2ODBIMTQ0VjgwaDEyOHptMTIyIDM1Mkg1NGE2IDYgMCAwIDEtNi02Vjg2YTYgNiAwIDAgMSA2LTZoNDJ2MTA0YzAgMTMuMjU1IDEwLjc0NSAyNCAyNCAyNGgxNzZjMTMuMjU1IDAgMjQtMTAuNzQ1IDI0LTI0VjgzLjg4Mmw3OC4yNDMgNzguMjQzYTYgNiAwIDAgMSAxLjc1NyA0LjI0M1Y0MjZhNiA2IDAgMCAxLTYgNnpNMjI0IDIzMmMtNDguNTIzIDAtODggMzkuNDc3LTg4IDg4czM5LjQ3NyA4OCA4OCA4OCA4OC0zOS40NzcgODgtODgtMzkuNDc3LTg4LTg4LTg4em0wIDEyOGMtMjIuMDU2IDAtNDAtMTcuOTQ0LTQwLTQwczE3Ljk0NC00MCA0MC00MCA0MCAxNy45NDQgNDAgNDAtMTcuOTQ0IDQwLTQwIDQwelwiPjwvcGF0aD48L3N2Zz5gO1xuZXhwb3J0IGNvbnN0IFNBVkVfU1lNQk9MID0gXCJzdGF0YmxvY2stc2F2ZVwiO1xuXG5leHBvcnQgY29uc3QgRVhQT1JUX0lDT04gPSBgPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCIgZm9jdXNhYmxlPVwiZmFsc2VcIiBkYXRhLXByZWZpeD1cImZhc1wiIGRhdGEtaWNvbj1cImRvd25sb2FkXCIgY2xhc3M9XCJzdmctaW5saW5lLS1mYSBmYS1kb3dubG9hZCBmYS13LTE2XCIgcm9sZT1cImltZ1wiIHZpZXdCb3g9XCIwIDAgNTEyIDUxMlwiPjxwYXRoIGZpbGw9XCJjdXJyZW50Q29sb3JcIiBkPVwiTTIxNiAwaDgwYzEzLjMgMCAyNCAxMC43IDI0IDI0djE2OGg4Ny43YzE3LjggMCAyNi43IDIxLjUgMTQuMSAzNC4xTDI2OS43IDM3OC4zYy03LjUgNy41LTE5LjggNy41LTI3LjMgMEw5MC4xIDIyNi4xYy0xMi42LTEyLjYtMy43LTM0LjEgMTQuMS0zNC4xSDE5MlYyNGMwLTEzLjMgMTAuNy0yNCAyNC0yNHptMjk2IDM3NnYxMTJjMCAxMy4zLTEwLjcgMjQtMjQgMjRIMjRjLTEzLjMgMC0yNC0xMC43LTI0LTI0VjM3NmMwLTEzLjMgMTAuNy0yNCAyNC0yNGgxNDYuN2w0OSA0OWMyMC4xIDIwLjEgNTIuNSAyMC4xIDcyLjYgMGw0OS00OUg0ODhjMTMuMyAwIDI0IDEwLjcgMjQgMjR6bS0xMjQgODhjMC0xMS05LTIwLTIwLTIwcy0yMCA5LTIwIDIwIDkgMjAgMjAgMjAgMjAtOSAyMC0yMHptNjQgMGMwLTExLTktMjAtMjAtMjBzLTIwIDktMjAgMjAgOSAyMCAyMCAyMCAyMC05IDIwLTIwelwiLz48L3N2Zz5gO1xuZXhwb3J0IGNvbnN0IEVYUE9SVF9TWU1CT0wgPSBcInN0YXRibG9jay1leHBvcnQtYXMtcG5nXCI7XG4iLCAiaW1wb3J0IHsgbm9vcCwgc2FmZV9ub3RfZXF1YWwsIHN1YnNjcmliZSwgcnVuX2FsbCwgaXNfZnVuY3Rpb24gfSBmcm9tICcuLi9pbnRlcm5hbC9pbmRleC5tanMnO1xuZXhwb3J0IHsgZ2V0X3N0b3JlX3ZhbHVlIGFzIGdldCB9IGZyb20gJy4uL2ludGVybmFsL2luZGV4Lm1qcyc7XG5cbmNvbnN0IHN1YnNjcmliZXJfcXVldWUgPSBbXTtcbi8qKlxuICogQ3JlYXRlcyBhIGBSZWFkYWJsZWAgc3RvcmUgdGhhdCBhbGxvd3MgcmVhZGluZyBieSBzdWJzY3JpcHRpb24uXG4gKiBAcGFyYW0gdmFsdWUgaW5pdGlhbCB2YWx1ZVxuICogQHBhcmFtIHtTdGFydFN0b3BOb3RpZmllcn1zdGFydCBzdGFydCBhbmQgc3RvcCBub3RpZmljYXRpb25zIGZvciBzdWJzY3JpcHRpb25zXG4gKi9cbmZ1bmN0aW9uIHJlYWRhYmxlKHZhbHVlLCBzdGFydCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHN1YnNjcmliZTogd3JpdGFibGUodmFsdWUsIHN0YXJ0KS5zdWJzY3JpYmVcbiAgICB9O1xufVxuLyoqXG4gKiBDcmVhdGUgYSBgV3JpdGFibGVgIHN0b3JlIHRoYXQgYWxsb3dzIGJvdGggdXBkYXRpbmcgYW5kIHJlYWRpbmcgYnkgc3Vic2NyaXB0aW9uLlxuICogQHBhcmFtIHsqPX12YWx1ZSBpbml0aWFsIHZhbHVlXG4gKiBAcGFyYW0ge1N0YXJ0U3RvcE5vdGlmaWVyPX1zdGFydCBzdGFydCBhbmQgc3RvcCBub3RpZmljYXRpb25zIGZvciBzdWJzY3JpcHRpb25zXG4gKi9cbmZ1bmN0aW9uIHdyaXRhYmxlKHZhbHVlLCBzdGFydCA9IG5vb3ApIHtcbiAgICBsZXQgc3RvcDtcbiAgICBjb25zdCBzdWJzY3JpYmVycyA9IG5ldyBTZXQoKTtcbiAgICBmdW5jdGlvbiBzZXQobmV3X3ZhbHVlKSB7XG4gICAgICAgIGlmIChzYWZlX25vdF9lcXVhbCh2YWx1ZSwgbmV3X3ZhbHVlKSkge1xuICAgICAgICAgICAgdmFsdWUgPSBuZXdfdmFsdWU7XG4gICAgICAgICAgICBpZiAoc3RvcCkgeyAvLyBzdG9yZSBpcyByZWFkeVxuICAgICAgICAgICAgICAgIGNvbnN0IHJ1bl9xdWV1ZSA9ICFzdWJzY3JpYmVyX3F1ZXVlLmxlbmd0aDtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHN1YnNjcmliZXIgb2Ygc3Vic2NyaWJlcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlclsxXSgpO1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyX3F1ZXVlLnB1c2goc3Vic2NyaWJlciwgdmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocnVuX3F1ZXVlKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3Vic2NyaWJlcl9xdWV1ZS5sZW5ndGg7IGkgKz0gMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlcl9xdWV1ZVtpXVswXShzdWJzY3JpYmVyX3F1ZXVlW2kgKyAxXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlcl9xdWV1ZS5sZW5ndGggPSAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiB1cGRhdGUoZm4pIHtcbiAgICAgICAgc2V0KGZuKHZhbHVlKSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHN1YnNjcmliZShydW4sIGludmFsaWRhdGUgPSBub29wKSB7XG4gICAgICAgIGNvbnN0IHN1YnNjcmliZXIgPSBbcnVuLCBpbnZhbGlkYXRlXTtcbiAgICAgICAgc3Vic2NyaWJlcnMuYWRkKHN1YnNjcmliZXIpO1xuICAgICAgICBpZiAoc3Vic2NyaWJlcnMuc2l6ZSA9PT0gMSkge1xuICAgICAgICAgICAgc3RvcCA9IHN0YXJ0KHNldCkgfHwgbm9vcDtcbiAgICAgICAgfVxuICAgICAgICBydW4odmFsdWUpO1xuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgc3Vic2NyaWJlcnMuZGVsZXRlKHN1YnNjcmliZXIpO1xuICAgICAgICAgICAgaWYgKHN1YnNjcmliZXJzLnNpemUgPT09IDApIHtcbiAgICAgICAgICAgICAgICBzdG9wKCk7XG4gICAgICAgICAgICAgICAgc3RvcCA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiB7IHNldCwgdXBkYXRlLCBzdWJzY3JpYmUgfTtcbn1cbmZ1bmN0aW9uIGRlcml2ZWQoc3RvcmVzLCBmbiwgaW5pdGlhbF92YWx1ZSkge1xuICAgIGNvbnN0IHNpbmdsZSA9ICFBcnJheS5pc0FycmF5KHN0b3Jlcyk7XG4gICAgY29uc3Qgc3RvcmVzX2FycmF5ID0gc2luZ2xlXG4gICAgICAgID8gW3N0b3Jlc11cbiAgICAgICAgOiBzdG9yZXM7XG4gICAgY29uc3QgYXV0byA9IGZuLmxlbmd0aCA8IDI7XG4gICAgcmV0dXJuIHJlYWRhYmxlKGluaXRpYWxfdmFsdWUsIChzZXQpID0+IHtcbiAgICAgICAgbGV0IGluaXRlZCA9IGZhbHNlO1xuICAgICAgICBjb25zdCB2YWx1ZXMgPSBbXTtcbiAgICAgICAgbGV0IHBlbmRpbmcgPSAwO1xuICAgICAgICBsZXQgY2xlYW51cCA9IG5vb3A7XG4gICAgICAgIGNvbnN0IHN5bmMgPSAoKSA9PiB7XG4gICAgICAgICAgICBpZiAocGVuZGluZykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNsZWFudXAoKTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGZuKHNpbmdsZSA/IHZhbHVlc1swXSA6IHZhbHVlcywgc2V0KTtcbiAgICAgICAgICAgIGlmIChhdXRvKSB7XG4gICAgICAgICAgICAgICAgc2V0KHJlc3VsdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjbGVhbnVwID0gaXNfZnVuY3Rpb24ocmVzdWx0KSA/IHJlc3VsdCA6IG5vb3A7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHVuc3Vic2NyaWJlcnMgPSBzdG9yZXNfYXJyYXkubWFwKChzdG9yZSwgaSkgPT4gc3Vic2NyaWJlKHN0b3JlLCAodmFsdWUpID0+IHtcbiAgICAgICAgICAgIHZhbHVlc1tpXSA9IHZhbHVlO1xuICAgICAgICAgICAgcGVuZGluZyAmPSB+KDEgPDwgaSk7XG4gICAgICAgICAgICBpZiAoaW5pdGVkKSB7XG4gICAgICAgICAgICAgICAgc3luYygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCAoKSA9PiB7XG4gICAgICAgICAgICBwZW5kaW5nIHw9ICgxIDw8IGkpO1xuICAgICAgICB9KSk7XG4gICAgICAgIGluaXRlZCA9IHRydWU7XG4gICAgICAgIHN5bmMoKTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIHN0b3AoKSB7XG4gICAgICAgICAgICBydW5fYWxsKHVuc3Vic2NyaWJlcnMpO1xuICAgICAgICAgICAgY2xlYW51cCgpO1xuICAgICAgICB9O1xuICAgIH0pO1xufVxuXG5leHBvcnQgeyBkZXJpdmVkLCByZWFkYWJsZSwgd3JpdGFibGUgfTtcbiIsICI8ZGl2IGNsYXNzPVwiYmFyXCIgLz5cblxuPHN0eWxlPlxuICAgIC5iYXIge1xuICAgICAgICBoZWlnaHQ6IDVweDtcbiAgICAgICAgYmFja2dyb3VuZDogdmFyKC0tc3RhdGJsb2NrLWJhci1jb2xvcik7XG4gICAgICAgIGJvcmRlcjogdmFyKC0tc3RhdGJsb2NrLWJhci1ib3JkZXItc2l6ZSkgc29saWRcbiAgICAgICAgICAgIHZhcigtLXN0YXRibG9jay1iYXItYm9yZGVyLWNvbG9yKTtcbiAgICAgICAgei1pbmRleDogMTtcbiAgICAgICAgd2lkdGg6IGF1dG87XG4gICAgfVxuPC9zdHlsZT5cbiIsICI8c2NyaXB0IGxhbmc9XCJ0c1wiPlxuICAgIC8vTm90ZTogQWxsIGZpbmFsIHJlbmRlcmVkIHRleHQgc2hvdWxkIGJlIHdyYXBwZWQgaW4gdGhpcyBlbGVtZW50LlxuICAgIGltcG9ydCB7IGdldENvbnRleHQgfSBmcm9tIFwic3ZlbHRlXCI7XG5cbiAgICBleHBvcnQgbGV0IHRleHRUb1JlbmRlcjogc3RyaW5nO1xuICAgIC8qIGV4cG9ydCBsZXQgaW5saW5lOiBib29sZWFuOyAqL1xuXG4gICAgY29uc3QgdHJ5VG9SZW5kZXJMaW5rcyA9IGdldENvbnRleHQ8Ym9vbGVhbj4oXCJ0cnlUb1JlbmRlckxpbmtzXCIpO1xuICAgIGNvbnN0IGNvbnRleHQgPSBnZXRDb250ZXh0PHN0cmluZz4oXCJjb250ZXh0XCIpO1xuXG4gICAgdHlwZSBTcGxpdExpbmsgPVxuICAgICAgICB8IHsgdGV4dDogc3RyaW5nOyBpc0xpbms6IGZhbHNlIH1cbiAgICAgICAgfCB7XG4gICAgICAgICAgICAgIHRleHQ6IHN0cmluZztcbiAgICAgICAgICAgICAgaXNMaW5rOiB0cnVlO1xuICAgICAgICAgICAgICBocmVmOiBzdHJpbmc7XG4gICAgICAgICAgICAgIHRpdGxlOiBzdHJpbmc7XG4gICAgICAgICAgICAgIGlzQWxpYXM6IGJvb2xlYW47XG4gICAgICAgICAgfTtcblxuICAgIGNvbnN0IGdlbmVyYXRlTGluayA9IChsaW5rOiBzdHJpbmcpID0+IHtcbiAgICAgICAgbGV0IHRpdGxlID0gXCJcIjtcbiAgICAgICAgbGV0IGFsaWFzSW5kZXggPSBsaW5rLmluZGV4T2YoXCJ8XCIpO1xuXG4gICAgICAgIGlmIChhbGlhc0luZGV4ID4gMCkge1xuICAgICAgICAgICAgdGl0bGUgPSBsaW5rLnNsaWNlKGFsaWFzSW5kZXggKyAxKS50cmltKCk7XG4gICAgICAgICAgICBsaW5rID0gbGluay5zbGljZSgwLCBhbGlhc0luZGV4KS50cmltKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aXRsZSA9IGxpbmtcbiAgICAgICAgICAgICAgICAudHJpbSgpXG4gICAgICAgICAgICAgICAgLnNwbGl0KFwiI1wiKVxuICAgICAgICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICEhZTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5qb2luKFwiID4gXCIpXG4gICAgICAgICAgICAgICAgLnRyaW0oKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobGluay5lbmRzV2l0aChcIlxcXFxcIikpIHtcbiAgICAgICAgICAgIGxpbmsgPSBsaW5rLnNsaWNlKDAsIGxpbmsubGVuZ3RoIC0gMSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGhyZWY6IChsaW5rID0gbGluay5yZXBsYWNlKC9cXHUwMEEwL2csIFwiIFwiKS50cmltKCkpLFxuICAgICAgICAgICAgdGl0bGUsXG4gICAgICAgICAgICBpc0FsaWFzOiBhbGlhc0luZGV4ID4gMFxuICAgICAgICB9O1xuICAgIH07XG5cbiAgICBjb25zdCBzcGxpdEJ5TGlua3MgPSAodGV4dDogU3RyaW5nKTogU3BsaXRMaW5rW10gPT4ge1xuICAgICAgICByZXR1cm4gdGV4dFxuICAgICAgICAgICAgLnRyaW0oKVxuICAgICAgICAgICAgLnNwbGl0KC8oPFNUQVRCTE9DSy1MSU5LPltcXHNcXFNdKz88XFwvU1RBVEJMT0NLLUxJTks+KS8pXG4gICAgICAgICAgICAuZmlsdGVyKChzKSA9PiBzICYmIHMubGVuZ3RoKVxuICAgICAgICAgICAgLm1hcCgoc3RyKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKC88U1RBVEJMT0NLLUxJTks+KFtcXHNcXFNdKz8pPFxcL1NUQVRCTE9DSy1MSU5LPi8udGVzdChzdHIpKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBsaW5rID0gc3RyLm1hdGNoKFxuICAgICAgICAgICAgICAgICAgICAgICAgLzxTVEFUQkxPQ0stTElOSz4oW1xcc1xcU10rPyk8XFwvU1RBVEJMT0NLLUxJTks+L1xuICAgICAgICAgICAgICAgICAgICApWzFdO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB7IGhyZWYsIHRpdGxlLCBpc0FsaWFzIH0gPSBnZW5lcmF0ZUxpbmsobGluayk7XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzTGluazogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IGxpbmssXG4gICAgICAgICAgICAgICAgICAgICAgICBocmVmLFxuICAgICAgICAgICAgICAgICAgICAgICAgaXNBbGlhcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB7IGlzTGluazogZmFsc2UsIHRleHQ6IHN0ciB9O1xuICAgICAgICAgICAgfSk7XG4gICAgfTtcbjwvc2NyaXB0PlxuXG48ZGl2IGNsYXNzPVwic3RhdGJsb2NrLXJlbmRlcmVkLXRleHQtY29udGVudCBpbmxpbmVcIj5cbiAgICB7I2lmICF0cnlUb1JlbmRlckxpbmtzfVxuICAgICAgICB7dGV4dFRvUmVuZGVyfVxuICAgIHs6ZWxzZX1cbiAgICAgICAgeyNlYWNoIHNwbGl0QnlMaW5rcyh0ZXh0VG9SZW5kZXIpIGFzIHNwbGl0fVxuICAgICAgICAgICAgeyNpZiBzcGxpdC5pc0xpbmt9XG4gICAgICAgICAgICAgICAgeyNpZiBzcGxpdC5pc0FsaWFzfVxuICAgICAgICAgICAgICAgICAgICA8IS0tIHN2ZWx0ZS1pZ25vcmUgYTExeS11bmtub3duLWFyaWEtYXR0cmlidXRlIC0tPlxuICAgICAgICAgICAgICAgICAgICA8YVxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1ocmVmPXtzcGxpdC5ocmVmfVxuICAgICAgICAgICAgICAgICAgICAgICAgaHJlZj17c3BsaXQuaHJlZn1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPVwiaW50ZXJuYWwtbGlua1wiXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQ9XCJfYmxhbmtcIlxuICAgICAgICAgICAgICAgICAgICAgICAgcmVsPVwibm9vcGVuZXJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1sYWJlbD17c3BsaXQuaHJlZn1cbiAgICAgICAgICAgICAgICAgICAgICAgIGFyaWEtbGFiZWwtcG9zaXRpb249XCJ0b3BcIlxuICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICB7c3BsaXQudGl0bGV9XG4gICAgICAgICAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICAgICAgICB7OmVsc2V9XG4gICAgICAgICAgICAgICAgICAgIDxhXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLWhyZWY9e3NwbGl0LmhyZWZ9XG4gICAgICAgICAgICAgICAgICAgICAgICBocmVmPXtzcGxpdC5ocmVmfVxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9XCJpbnRlcm5hbC1saW5rXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldD1cIl9ibGFua1wiXG4gICAgICAgICAgICAgICAgICAgICAgICByZWw9XCJub29wZW5lclwiXG4gICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgIHtzcGxpdC50ZXh0fVxuICAgICAgICAgICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICAgICAgey9pZn1cbiAgICAgICAgICAgIHs6ZWxzZX1cbiAgICAgICAgICAgICAgICB7c3BsaXQudGV4dH1cbiAgICAgICAgICAgIHsvaWZ9XG4gICAgICAgIHsvZWFjaH1cbiAgICB7L2lmfVxuPC9kaXY+XG5cbjxzdHlsZT5cbiAgICAuaW5saW5lIHtcbiAgICAgICAgZGlzcGxheTogaW5saW5lO1xuICAgIH1cbjwvc3R5bGU+XG4iLCAiPHNjcmlwdCBsYW5nPVwidHNcIj5cbiAgICBpbXBvcnQgdHlwZSB7IE1vbnN0ZXIgfSBmcm9tIFwiQHR5cGVzXCI7XG4gICAgaW1wb3J0IHsgTm90aWNlIH0gZnJvbSBcIm9ic2lkaWFuXCI7XG4gICAgaW1wb3J0IHR5cGUgeyBTdGF0YmxvY2tJdGVtIH0gZnJvbSBcInNyYy9sYXlvdXRzL3R5cGVzXCI7XG4gICAgaW1wb3J0IHR5cGUgU3RhdEJsb2NrUGx1Z2luIGZyb20gXCJzcmMvbWFpblwiO1xuXG4gICAgaW1wb3J0IHsgZ2V0Q29udGV4dCB9IGZyb20gXCJzdmVsdGVcIjtcblxuICAgIGltcG9ydCBEaWNlUm9sbCBmcm9tIFwiLi9EaWNlUm9sbC5zdmVsdGVcIjtcbiAgICBpbXBvcnQgVGV4dENvbnRlbnQgZnJvbSBcIi4vVGV4dENvbnRlbnQuc3ZlbHRlXCI7XG4gICAgZXhwb3J0IGxldCBwcm9wZXJ0eTogc3RyaW5nO1xuXG4gICAgbGV0IGl0ZW0gPSBnZXRDb250ZXh0PFN0YXRibG9ja0l0ZW0+KFwiaXRlbVwiKTtcblxuICAgIGxldCBkaWNlID0gZ2V0Q29udGV4dDxib29sZWFuPihcImRpY2VcIikgJiYgaXRlbS5kaWNlO1xuICAgIGxldCBtb25zdGVyID0gZ2V0Q29udGV4dDxNb25zdGVyPihcIm1vbnN0ZXJcIik7XG4gICAgbGV0IHBsdWdpbiA9IGdldENvbnRleHQ8U3RhdEJsb2NrUGx1Z2luPihcInBsdWdpblwiKTtcblxuICAgIGxldCBzcGxpdDogQXJyYXk8eyB0ZXh0OiBzdHJpbmc7IG9yaWdpbmFsPzogc3RyaW5nIH0gfCBzdHJpbmc+ID0gW3Byb3BlcnR5XTtcbiAgICBpZiAoZGljZSkge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgICBpdGVtLmRpY2VQcm9wZXJ0eSAmJlxuICAgICAgICAgICAgaXRlbS5kaWNlUHJvcGVydHkgaW4gbW9uc3RlciAmJlxuICAgICAgICAgICAgdHlwZW9mIG1vbnN0ZXJbaXRlbS5kaWNlUHJvcGVydHldID09IFwic3RyaW5nXCJcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBzcGxpdCA9IFt7IHRleHQ6IG1vbnN0ZXJbaXRlbS5kaWNlUHJvcGVydHldIGFzIHN0cmluZyB9XTtcbiAgICAgICAgfSBlbHNlIGlmIChpdGVtLmRpY2VDYWxsYmFjaykge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCBmcmFtZSA9IGRvY3VtZW50LmJvZHkuY3JlYXRlRWwoXCJpZnJhbWVcIik7XG4gICAgICAgICAgICAgICAgY29uc3QgZnVuY3QgPSAoZnJhbWUuY29udGVudFdpbmRvdyBhcyBhbnkpLkZ1bmN0aW9uO1xuICAgICAgICAgICAgICAgIGNvbnN0IGZ1bmMgPSBuZXcgZnVuY3QoXG4gICAgICAgICAgICAgICAgICAgIFwibW9uc3RlclwiLFxuICAgICAgICAgICAgICAgICAgICBcInByb3BlcnR5XCIsXG4gICAgICAgICAgICAgICAgICAgIGl0ZW0uZGljZUNhbGxiYWNrXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBjb25zdCBwYXJzZWQgPVxuICAgICAgICAgICAgICAgICAgICBmdW5jLmNhbGwodW5kZWZpbmVkLCBtb25zdGVyLCBwcm9wZXJ0eSkgPz8gcHJvcGVydHk7XG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChmcmFtZSk7XG4gICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkocGFyc2VkKSkge1xuICAgICAgICAgICAgICAgICAgICBzcGxpdCA9IHBhcnNlZDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzcGxpdCA9IFtwYXJzZWRdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICBuZXcgTm90aWNlKFxuICAgICAgICAgICAgICAgICAgICBgVGhlcmUgd2FzIGFuIGVycm9yIGV4ZWN1dGluZyB0aGUgcHJvdmlkZWQgZGljZSBjYWxsYmFjayBmb3IgWyR7aXRlbS5wcm9wZXJ0aWVzLmpvaW4oXG4gICAgICAgICAgICAgICAgICAgICAgICBcIiwgXCJcbiAgICAgICAgICAgICAgICAgICAgKX1dXFxuXFxuJHtlLm1lc3NhZ2V9YFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHBhcnNlZCA9IHBsdWdpbi5wYXJzZUZvckRpY2UocHJvcGVydHkpO1xuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkocGFyc2VkKSkge1xuICAgICAgICAgICAgICAgIHNwbGl0ID0gcGFyc2VkO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzcGxpdCA9IFtwYXJzZWRdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuPC9zY3JpcHQ+XG5cbnsjaWYgIWRpY2V9XG4gICAgPHNwYW4gY2xhc3M9XCJwcm9wZXJ0eS10ZXh0XCI+XG4gICAgICAgIDxUZXh0Q29udGVudCB0ZXh0VG9SZW5kZXI9e3Byb3BlcnR5fSAvPlxuICAgIDwvc3Bhbj5cbns6ZWxzZX1cbiAgICB7I2VhY2ggc3BsaXQgYXMgdGVzdH1cbiAgICAgICAgeyNpZiB0eXBlb2YgdGVzdCAhPSBcInN0cmluZ1wiICYmIHR5cGVvZiB0ZXN0ID09IFwib2JqZWN0XCIgJiYgXCJ0ZXh0XCIgaW4gdGVzdH1cbiAgICAgICAgICAgIDxEaWNlUm9sbFxuICAgICAgICAgICAgICAgIHRleHQ9e3Rlc3Q/LnRleHQgPz8gcHJvcGVydHl9XG4gICAgICAgICAgICAgICAgb3JpZ2luYWw9e3Rlc3Q/Lm9yaWdpbmFsID8/IHRlc3Q/LnRleHQgPz8gcHJvcGVydHl9XG4gICAgICAgICAgICAvPlxuICAgICAgICB7OmVsc2V9XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cInByb3BlcnR5LXRleHRcIj5cbiAgICAgICAgICAgICAgICA8VGV4dENvbnRlbnQgdGV4dFRvUmVuZGVyPXt0ZXN0fSAvPlxuICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICB7L2lmfVxuICAgIHsvZWFjaH1cbnsvaWZ9XG5cbjxzdHlsZT5cbiAgICAucHJvcGVydHktdGV4dCB7XG4gICAgICAgIGRpc3BsYXk6IGlubGluZTtcbiAgICAgICAgd2hpdGUtc3BhY2U6IHByZS1saW5lO1xuICAgICAgICB0ZXh0LWluZGVudDogMDtcbiAgICB9XG4gICAgLnByb3BlcnR5LXRleHQge1xuICAgICAgICBkaXNwbGF5OiBpbmxpbmU7XG4gICAgICAgIG1hcmdpbjogMDtcbiAgICB9XG48L3N0eWxlPlxuIiwgIjxzY3JpcHQgbGFuZz1cInRzXCI+XG4gICAgaW1wb3J0IHR5cGUgU3RhdEJsb2NrUGx1Z2luIGZyb20gXCJzcmMvbWFpblwiO1xuXG4gICAgaW1wb3J0IHsgZ2V0Q29udGV4dCwgb25Nb3VudCB9IGZyb20gXCJzdmVsdGVcIjtcbiAgICBpbXBvcnQgdHlwZSB7IFdyaXRhYmxlIH0gZnJvbSBcInN2ZWx0ZS9zdG9yZVwiO1xuICAgIGltcG9ydCB0eXBlIHsgU3RhY2tSb2xsZXIgfSBmcm9tIFwiLi4vLi4vLi4vLi4vb2JzaWRpYW4tZGljZS1yb2xsZXIvc3JjL3JvbGxlci9kaWNlXCI7XG5cbiAgICBleHBvcnQgbGV0IHRleHQ6IHN0cmluZztcbiAgICBleHBvcnQgbGV0IG9yaWdpbmFsOiBzdHJpbmcgfCBudW1iZXIgPSB0ZXh0O1xuXG4gICAgY29uc3QgZGljZSA9IGdldENvbnRleHQ8Ym9vbGVhbj4oXCJkaWNlXCIpO1xuXG4gICAgY29uc3QgcGx1Z2luID0gZ2V0Q29udGV4dDxTdGF0QmxvY2tQbHVnaW4+KFwicGx1Z2luXCIpO1xuICAgIGNvbnN0IHJlbmRlciA9IGdldENvbnRleHQ8Ym9vbGVhbj4oXCJyZW5kZXJcIik7XG5cbiAgICBjb25zdCByZXNldCA9IGdldENvbnRleHQ8V3JpdGFibGU8Ym9vbGVhbj4+KFwicmVzZXRcIik7XG5cbiAgICByZXNldC5zdWJzY3JpYmUoYXN5bmMgKHYpID0+IHtcbiAgICAgICAgaWYgKHYpXG4gICAgICAgICAgICBhd2FpdCByb2xsZXIuYXBwbHlSZXN1bHQoe1xuICAgICAgICAgICAgICAgIHR5cGU6IFwiZGljZVwiLFxuICAgICAgICAgICAgICAgIHJlc3VsdDogZGVmYXVsdFZhbHVlLFxuICAgICAgICAgICAgICAgIHRvb2x0aXA6IFwiQXZlcmFnZVwiXG4gICAgICAgICAgICB9KTtcbiAgICB9KTtcblxuICAgIGxldCByb2xsZXI6IFN0YWNrUm9sbGVyID0gbnVsbDtcbiAgICBsZXQgZXJyb3IgPSBmYWxzZTtcbiAgICBpZiAoIXJvbGxlciAmJiBkaWNlKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByb2xsZXIgPSBwbHVnaW4uZ2V0Um9sbGVyKGAke3RleHR9YCkgYXMgU3RhY2tSb2xsZXI7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICAgICAgICBlcnJvciA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgZGVmYXVsdFZhbHVlID0gMDtcbiAgICBvbk1vdW50KGFzeW5jICgpID0+IHtcbiAgICAgICAgaWYgKHJvbGxlcikge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBhd2FpdCByb2xsZXIucm9sbCgpO1xuICAgICAgICAgICAgICAgIGRlZmF1bHRWYWx1ZSA9IHJvbGxlci5kaWNlLnJlZHVjZShcbiAgICAgICAgICAgICAgICAgICAgKGEsIGRpY2UpID0+XG4gICAgICAgICAgICAgICAgICAgICAgICBhICtcbiAgICAgICAgICAgICAgICAgICAgICAgIChkaWNlLnN0YXRpY1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gZGljZS5yZXN1bHRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IE1hdGguY2VpbChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoKGRpY2UuZmFjZXMubWluICsgZGljZS5mYWNlcy5tYXgpIC8gMikgKlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaWNlLnJvbGxzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICApKSxcbiAgICAgICAgICAgICAgICAgICAgMFxuICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICBhd2FpdCByb2xsZXIuYXBwbHlSZXN1bHQoe1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImRpY2VcIixcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0OiBkZWZhdWx0VmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIHRvb2x0aXA6IFwiQXZlcmFnZVwiXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcm9sbGVyLnNob3VsZFJlbmRlciA9IHJlbmRlcjtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICBlcnJvciA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIGNvbnN0IHJvbGxlckVsID0gKG5vZGU6IEhUTUxFbGVtZW50KSA9PiB7XG4gICAgICAgIGlmICghcm9sbGVyIHx8ICFyb2xsZXIuY29udGFpbmVyRWwpIHtcbiAgICAgICAgICAgIG5vZGUuc2V0VGV4dChgJHtvcmlnaW5hbH1gKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5vZGUuYXBwZW5kQ2hpbGQocm9sbGVyLmNvbnRhaW5lckVsKTtcbiAgICAgICAgfVxuICAgIH07XG48L3NjcmlwdD5cblxueyNrZXkgZXJyb3J9XG4gICAgeyNpZiBlcnJvciB8fCAhZGljZX1cbiAgICAgICAge3RleHR9XG4gICAgezplbHNlfVxuICAgICAgICA8c3BhbiBjbGFzcz1cInJvbGxlci1yZXN1bHRcIiB1c2U6cm9sbGVyRWwgLz5cbiAgICAgICAgeyNpZiB0eXBlb2Ygb3JpZ2luYWwgPT0gXCJudW1iZXJcIiB8fCAob3JpZ2luYWwgJiYgb3JpZ2luYWwubGVuZ3RoKX1cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZGljZS1vcmlnaW5hbFwiPih7b3JpZ2luYWx9KTwvc3Bhbj5cbiAgICAgICAgey9pZn1cbiAgICB7L2lmfVxuey9rZXl9XG5cbjxzdHlsZT5cbiAgICAucm9sbGVyLXJlc3VsdCB7XG4gICAgICAgIGZvbnQtd2VpZ2h0OiB2YXIoLS1zdGF0YmxvY2stZm9udC13ZWlnaHQpO1xuICAgIH1cbjwvc3R5bGU+XG4iLCAiPHNjcmlwdCBsYW5nPVwidHNcIj5cbiAgICBpbXBvcnQgeyBNYXJrZG93blJlbmRlcmVyIH0gZnJvbSBcIm9ic2lkaWFuXCI7XG5cbiAgICBpbXBvcnQgeyBnZXRDb250ZXh0IH0gZnJvbSBcInN2ZWx0ZVwiO1xuICAgIGltcG9ydCB0eXBlIFN0YXRCbG9ja1JlbmRlcmVyIGZyb20gXCIuLi9zdGF0YmxvY2tcIjtcblxuICAgIGV4cG9ydCBsZXQgcHJvcGVydHk6IHN0cmluZztcbiAgICBwcm9wZXJ0eSA9IHByb3BlcnR5XG4gICAgICAgIC5yZXBsYWNlKC88U1RBVEJMT0NLLUxJTks+L2csIFwiW1tcIilcbiAgICAgICAgLnJlcGxhY2UoLzxcXC9TVEFUQkxPQ0stTElOSz4vZywgXCJdXVwiKTtcblxuICAgIGNvbnN0IGNvbnRleHQgPSBnZXRDb250ZXh0PHN0cmluZz4oXCJjb250ZXh0XCIpO1xuICAgIGNvbnN0IHJlbmRlcmVyID0gZ2V0Q29udGV4dDxTdGF0QmxvY2tSZW5kZXJlcj4oXCJyZW5kZXJlclwiKTtcblxuICAgIGNvbnN0IG1hcmtkb3duID0gKG5vZGU6IEhUTUxFbGVtZW50KSA9PiB7XG4gICAgICAgIE1hcmtkb3duUmVuZGVyZXIucmVuZGVyTWFya2Rvd24ocHJvcGVydHksIG5vZGUsIGNvbnRleHQsIHJlbmRlcmVyKTtcbiAgICB9O1xuPC9zY3JpcHQ+XG5cbjxkaXYgY2xhc3M9XCJzdGF0YmxvY2stbWFya2Rvd25cIiB1c2U6bWFya2Rvd24gLz5cblxuPHN0eWxlPlxuICAgIC5zdGF0YmxvY2stbWFya2Rvd24ge1xuICAgICAgICBkaXNwbGF5OiBpbmxpbmU7XG4gICAgfVxuICAgIC5zdGF0YmxvY2stbWFya2Rvd24gOmdsb2JhbChwKSB7XG4gICAgICAgIGRpc3BsYXk6IGlubGluZTtcbiAgICB9XG48L3N0eWxlPlxuIiwgIjxzY3JpcHQgbGFuZz1cInRzXCI+XG4gICAgaW1wb3J0IERpY2VIb2xkZXIgZnJvbSBcIi4vRGljZUhvbGRlci5zdmVsdGVcIjtcbiAgICBpbXBvcnQgTWFya2Rvd25Ib2xkZXIgZnJvbSBcIi4vTWFya2Rvd25Ib2xkZXIuc3ZlbHRlXCI7XG5cbiAgICBleHBvcnQgbGV0IHByb3BlcnR5OiBzdHJpbmc7XG4gICAgZXhwb3J0IGxldCByZW5kZXI6IGJvb2xlYW4gPSBmYWxzZTtcbjwvc2NyaXB0PlxuXG57I2lmIHJlbmRlcn1cbiAgICA8TWFya2Rvd25Ib2xkZXIge3Byb3BlcnR5fSAvPlxuezplbHNlfVxuICAgIDxEaWNlSG9sZGVyIHtwcm9wZXJ0eX0gLz5cbnsvaWZ9XG4iLCAiPHNjcmlwdCBsYW5nPVwidHNcIj5cbiAgICBpbXBvcnQgVGV4dENvbnRlbnQgZnJvbSBcIi4vVGV4dENvbnRlbnQuc3ZlbHRlXCI7XG5cbiAgICBpbXBvcnQgVGV4dENvbnRlbnRIb2xkZXIgZnJvbSBcIi4vVGV4dENvbnRlbnRIb2xkZXIuc3ZlbHRlXCI7XG5cbiAgICBleHBvcnQgbGV0IG5hbWU6IHN0cmluZztcbiAgICBleHBvcnQgbGV0IGRlc2M6IHN0cmluZztcbiAgICBleHBvcnQgbGV0IHJlbmRlcjogYm9vbGVhbiA9IGZhbHNlO1xuPC9zY3JpcHQ+XG5cbjxkaXYgY2xhc3M9XCJwcm9wZXJ0eVwiPlxuICAgIHsjaWYgbmFtZX1cbiAgICAgICAgPGRpdiBjbGFzcz1cInByb3BlcnR5LW5hbWVcIj5cbiAgICAgICAgICAgIDxUZXh0Q29udGVudCB0ZXh0VG9SZW5kZXI9e25hbWV9IC8+XG4gICAgICAgIDwvZGl2PlxuICAgIHsvaWZ9XG5cbiAgICA8VGV4dENvbnRlbnRIb2xkZXIge3JlbmRlcn0gcHJvcGVydHk9e2Rlc2N9IC8+XG48L2Rpdj5cblxuPHN0eWxlPlxuICAgIC5wcm9wZXJ0eS1uYW1lIHtcbiAgICAgICAgbWFyZ2luOiAwO1xuICAgICAgICBtYXJnaW4tcmlnaHQ6IDAuMjVlbTtcbiAgICAgICAgZGlzcGxheTogaW5saW5lO1xuICAgICAgICBmb250LXdlaWdodDogdmFyKC0tc3RhdGJsb2NrLXRyYWl0cy1mb250LXdlaWdodCk7XG4gICAgICAgIGZvbnQtc3R5bGU6IHZhcigtLXN0YXRibG9jay10cmFpdHMtZm9udC1zdHlsZSk7XG4gICAgfVxuPC9zdHlsZT5cbiIsICI8c2NyaXB0IGxhbmc9XCJ0c1wiPlxuICAgIGltcG9ydCB0eXBlIHsgTW9uc3RlciB9IGZyb20gXCJAdHlwZXNcIjtcbiAgICBpbXBvcnQgeyBzdHJpbmdpZnlZYW1sIH0gZnJvbSBcIm9ic2lkaWFuXCI7XG4gICAgaW1wb3J0IHsgc3RyaW5naWZ5IH0gZnJvbSBcInNyYy91dGlsL3V0aWxcIjtcbiAgICBpbXBvcnQgVGV4dENvbnRlbnRIb2xkZXIgZnJvbSBcIi4vVGV4dENvbnRlbnRIb2xkZXIuc3ZlbHRlXCI7XG4gICAgaW1wb3J0IFRyYWl0cyBmcm9tIFwiLi9UcmFpdHMuc3ZlbHRlXCI7XG5cbiAgICBleHBvcnQgbGV0IHJlbmRlciA9IGZhbHNlO1xuICAgIGV4cG9ydCBsZXQgbW9uc3RlcjogTW9uc3RlcjtcbiAgICBjb25zdCBlbnN1cmVDb2xvbiA9IChoZWFkZXI6IHN0cmluZykgPT4ge1xuICAgICAgICBpZiAoL1teYS16QS1aMC05XSQvLnRlc3QoaGVhZGVyKSkgcmV0dXJuIGhlYWRlcjtcbiAgICAgICAgcmV0dXJuIGAke2hlYWRlcn06YDtcbiAgICB9O1xuICAgIHR5cGUgU3BlbGwgPSB7IGxldmVsPzogc3RyaW5nOyBzcGVsbHM6IHN0cmluZyB9O1xuICAgIHR5cGUgU3BlbGxCbG9jayA9IHsgaGVhZGVyOiBzdHJpbmc7IHNwZWxsczogQXJyYXk8U3BlbGw+IH07XG4gICAgbGV0IHNwZWxsQmxvY2tzOiBBcnJheTxTcGVsbEJsb2NrPiA9IG1vbnN0ZXIuc3BlbGxzLnJlZHVjZShcbiAgICAgICAgKGFjYywgY3VycmVudCkgPT4ge1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIHR5cGVvZiBjdXJyZW50ID09PSBcInN0cmluZ1wiICYmXG4gICAgICAgICAgICAgICAgKGN1cnJlbnQuY2hhckF0KGN1cnJlbnQubGVuZ3RoIC0gMSkgPT0gXCI6XCIgfHxcbiAgICAgICAgICAgICAgICAgICAgIWN1cnJlbnQuaW5jbHVkZXMoXCI6XCIpKVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbmV3QmxvY2s6IFNwZWxsQmxvY2sgPSB7XG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcjogZW5zdXJlQ29sb24oY3VycmVudCksXG4gICAgICAgICAgICAgICAgICAgIHNwZWxsczogW11cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGFjYy5wdXNoKG5ld0Jsb2NrKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgbGFzdEJsb2NrOiBTcGVsbEJsb2NrID0gYWNjW2FjYy5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgIGxldCBzcGVsbDogU3BlbGw7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGN1cnJlbnQgPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgIHNwZWxsID0geyBzcGVsbHM6IGN1cnJlbnQgfTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgc3BlbGwgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXZlbDogT2JqZWN0LmtleXMoY3VycmVudCkuc2hpZnQoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNwZWxsczogc3RyaW5naWZ5KE9iamVjdC52YWx1ZXMoY3VycmVudCkuc2hpZnQoKSlcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhY2M7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGxhc3RCbG9jaykge1xuICAgICAgICAgICAgICAgIGxhc3RCbG9jay5zcGVsbHMucHVzaChzcGVsbCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IG1pc3NpbmdIZWFkZXJCbG9jazogU3BlbGxCbG9jayA9IHtcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVyOiBgJHttb25zdGVyLm5hbWV9IGtub3dzIHRoZSBmb2xsb3dpbmcgc3BlbGxzOmAsXG4gICAgICAgICAgICAgICAgICAgIHNwZWxsczogW3NwZWxsXVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgYWNjLnB1c2gobWlzc2luZ0hlYWRlckJsb2NrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBhY2M7XG4gICAgICAgIH0sXG4gICAgICAgIFtdXG4gICAgKTtcbjwvc2NyaXB0PlxuXG48ZGl2IGNsYXNzPVwic3BlbGxjYXN0aW5nXCI+XG4gICAgeyNlYWNoIHNwZWxsQmxvY2tzIGFzIGJsb2NrLCBibG9ja0luZGV4fVxuICAgICAgICB7I2lmIGJsb2NrSW5kZXggPT09IDB9XG4gICAgICAgICAgICA8VHJhaXRzIG5hbWU9e1wiU3BlbGxjYXN0aW5nXCJ9IGRlc2M9e2Jsb2NrLmhlYWRlcn0gLz5cbiAgICAgICAgezplbHNlfVxuICAgICAgICAgICAgPFRyYWl0cyBuYW1lPXtcIlwifSBkZXNjPXtibG9jay5oZWFkZXJ9IC8+XG4gICAgICAgIHsvaWZ9XG4gICAgICAgIDx1bCBjbGFzcz1cInNwZWxsLWxpc3RcIj5cbiAgICAgICAgICAgIHsjZWFjaCBibG9jay5zcGVsbHMgYXMgc3BlbGxJdGVtLCBpbmRleH1cbiAgICAgICAgICAgICAgICB7I2lmICFzcGVsbEl0ZW0ubGV2ZWx9XG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwic3BlbGwtbGluZVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPFRleHRDb250ZW50SG9sZGVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3JlbmRlcn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eT17c3BlbGxJdGVtLnNwZWxsc31cbiAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICB7OmVsc2V9XG4gICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz1cInNwZWxsLWxpbmVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwic3BlbGwtbGV2ZWxcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VGV4dENvbnRlbnRIb2xkZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3JlbmRlcn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcGVydHk9e2Ake3NwZWxsSXRlbS5sZXZlbH06YH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0ge3NwZWxsSXRlbS5zcGxpdChcIjpcIikuc2hpZnQoKX06IC0tPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJzcGVsbHNcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VGV4dENvbnRlbnRIb2xkZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3JlbmRlcn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcGVydHk9e3NwZWxsSXRlbS5zcGVsbHN9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIHtzcGVsbEl0ZW0uc3BsaXQoXCI6XCIpLnBvcCgpfSAtLT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICB7L2lmfVxuICAgICAgICAgICAgey9lYWNofVxuICAgICAgICA8L3VsPlxuICAgIHsvZWFjaH1cbjwvZGl2PlxuXG48c3R5bGU+XG4gICAgLnNwZWxsLWxpbmUgLnNwZWxscyB7XG4gICAgICAgIGZvbnQtc3R5bGU6IHZhcigtLXN0YXRibG9jay1zcGVsbHMtZm9udC1zdHlsZSk7XG4gICAgfVxuPC9zdHlsZT5cbiIsICI8c2NyaXB0IGxhbmc9XCJ0c1wiPlxuICAgIGltcG9ydCB0eXBlIHsgTW9uc3RlciB9IGZyb20gXCJAdHlwZXNcIjtcbiAgICBpbXBvcnQgdHlwZSB7IEhlYWRpbmdJdGVtIH0gZnJvbSBcInNyYy9sYXlvdXRzL3R5cGVzXCI7XG4gICAgaW1wb3J0IHsgc3RyaW5naWZ5IH0gZnJvbSBcInNyYy91dGlsL3V0aWxcIjtcbiAgICBpbXBvcnQgVGV4dENvbnRlbnQgZnJvbSBcIi4vVGV4dENvbnRlbnQuc3ZlbHRlXCI7XG5cbiAgICBleHBvcnQgbGV0IG1vbnN0ZXI6IE1vbnN0ZXI7XG4gICAgZXhwb3J0IGxldCBpdGVtOiBIZWFkaW5nSXRlbTtcbjwvc2NyaXB0PlxuXG48ZGl2IGNsYXNzPVwiZmxleC1jb250YWluZXJcIj5cbiAgICB7I2VhY2ggaXRlbS5wcm9wZXJ0aWVzIGFzIHByb3BlcnR5fVxuICAgICAgICB7I2lmIHByb3BlcnR5IGluIG1vbnN0ZXJ9XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiaGVhZGluZ1wiPlxuICAgICAgICAgICAgICAgIDxUZXh0Q29udGVudCB0ZXh0VG9SZW5kZXI9e3N0cmluZ2lmeShtb25zdGVyW3Byb3BlcnR5XSl9IC8+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgey9pZn1cbiAgICB7L2VhY2h9XG48L2Rpdj5cblxuPHN0eWxlPlxuICAgIC5mbGV4LWNvbnRhaW5lciB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICB9XG4gICAgLmhlYWRpbmcge1xuICAgICAgICBmb250LWZhbWlseTogdmFyKC0tc3RhdGJsb2NrLWhlYWRpbmctZm9udCk7XG4gICAgICAgIGNvbG9yOiB2YXIoLS1zdGF0YmxvY2staGVhZGluZy1mb250LWNvbG9yKTtcbiAgICAgICAgZm9udC13ZWlnaHQ6IHZhcigtLXN0YXRibG9jay1oZWFkaW5nLWZvbnQtd2VpZ2h0KTtcbiAgICAgICAgbWFyZ2luOiAwcHg7XG4gICAgICAgIGZvbnQtc2l6ZTogdmFyKC0tc3RhdGJsb2NrLWhlYWRpbmctZm9udC1zaXplKTtcbiAgICAgICAgbGV0dGVyLXNwYWNpbmc6IDFweDtcbiAgICAgICAgZm9udC12YXJpYW50OiB2YXIoLS1zdGF0YmxvY2staGVhZGluZy1mb250LXZhcmlhbnQpO1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgIGxpbmUtaGVpZ2h0OiB2YXIoLS1zdGF0YmxvY2staGVhZGluZy1saW5lLWhlaWdodCk7XG4gICAgfVxuPC9zdHlsZT5cbiIsICI8c2NyaXB0IGxhbmc9XCJ0c1wiPlxuICAgIGltcG9ydCB0eXBlIHsgTW9uc3RlciB9IGZyb20gXCJAdHlwZXNcIjtcbiAgICBpbXBvcnQgeyBOb3RpY2UgfSBmcm9tIFwib2JzaWRpYW5cIjtcbiAgICBpbXBvcnQgdHlwZSB7IFByb3BlcnR5SXRlbSB9IGZyb20gXCJzcmMvbGF5b3V0cy90eXBlc1wiO1xuICAgIGltcG9ydCB0eXBlIFN0YXRCbG9ja1BsdWdpbiBmcm9tIFwic3JjL21haW5cIjtcbiAgICBpbXBvcnQgeyBnZXRDb250ZXh0IH0gZnJvbSBcInN2ZWx0ZVwiO1xuICAgIGltcG9ydCB7IHN0cmluZ2lmeSB9IGZyb20gXCJzcmMvdXRpbC91dGlsXCI7XG4gICAgaW1wb3J0IFRleHRDb250ZW50SG9sZGVyIGZyb20gXCIuL1RleHRDb250ZW50SG9sZGVyLnN2ZWx0ZVwiO1xuXG4gICAgZXhwb3J0IGxldCBtb25zdGVyOiBNb25zdGVyO1xuICAgIGV4cG9ydCBsZXQgaXRlbTogUHJvcGVydHlJdGVtO1xuXG4gICAgbGV0IHByb3BlcnR5ID0gc3RyaW5naWZ5KG1vbnN0ZXJbaXRlbS5wcm9wZXJ0aWVzWzBdXSk7XG4gICAgbGV0IGRpc3BsYXkgPSBpdGVtLmRpc3BsYXkgPz8gaXRlbS5wcm9wZXJ0aWVzWzBdO1xuXG4gICAgaWYgKGl0ZW0uY2FsbGJhY2spIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGZyYW1lID0gZG9jdW1lbnQuYm9keS5jcmVhdGVFbChcImlmcmFtZVwiKTtcbiAgICAgICAgICAgIGNvbnN0IGZ1bmN0ID0gKGZyYW1lLmNvbnRlbnRXaW5kb3cgYXMgYW55KS5GdW5jdGlvbjtcbiAgICAgICAgICAgIGNvbnN0IGZ1bmMgPSBuZXcgZnVuY3QoXCJtb25zdGVyXCIsIGl0ZW0uY2FsbGJhY2spO1xuICAgICAgICAgICAgcHJvcGVydHkgPSBmdW5jLmNhbGwodW5kZWZpbmVkLCBtb25zdGVyKSA/PyBwcm9wZXJ0eTtcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoZnJhbWUpO1xuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBuZXcgTm90aWNlKFxuICAgICAgICAgICAgICAgIGBUaGVyZSB3YXMgYW4gZXJyb3IgZXhlY3V0aW5nIHRoZSBwcm92aWRlZCBjYWxsYmFjayBmb3IgWyR7aXRlbS5wcm9wZXJ0aWVzLmpvaW4oXG4gICAgICAgICAgICAgICAgICAgIFwiLCBcIlxuICAgICAgICAgICAgICAgICl9XVxcblxcbiR7ZS5tZXNzYWdlfWBcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICghaXRlbS5jb25kaXRpb25lZCAmJiAhYCR7cHJvcGVydHl9YC5sZW5ndGgpIHtcbiAgICAgICAgcHJvcGVydHkgPSBpdGVtLmZhbGxiYWNrID8/IFwiLVwiO1xuICAgIH1cbjwvc2NyaXB0PlxuXG57I2lmICFpdGVtLmNvbmRpdGlvbmVkIHx8IChpdGVtLmNvbmRpdGlvbmVkICYmIGAke3Byb3BlcnR5fWAubGVuZ3RoKX1cbiAgICA8ZGl2IGNsYXNzPVwibGluZVwiPlxuICAgICAgICA8c3BhbiBjbGFzcz1cInByb3BlcnR5LW5hbWVcIj57ZGlzcGxheX08L3NwYW4+XG4gICAgICAgIDxUZXh0Q29udGVudEhvbGRlciByZW5kZXI9e2l0ZW0ubWFya2Rvd259IHtwcm9wZXJ0eX0gLz5cbiAgICA8L2Rpdj5cbnsvaWZ9XG5cbjxzdHlsZT5cbiAgICAubGluZSB7XG4gICAgICAgIGxpbmUtaGVpZ2h0OiB2YXIoLS1zdGF0YmxvY2stcHJvcGVydHktbGluZS1oZWlnaHQpO1xuICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgY29sb3I6IHZhcigtLXN0YXRibG9jay1wcm9wZXJ0eS1mb250LWNvbG9yKTtcbiAgICB9XG4gICAgLnByb3BlcnR5LW5hbWUge1xuICAgICAgICBtYXJnaW46IDA7XG4gICAgICAgIG1hcmdpbi1yaWdodDogMC4yNWVtO1xuICAgICAgICBkaXNwbGF5OiBpbmxpbmU7XG4gICAgICAgIGNvbG9yOiB2YXIoLS1zdGF0YmxvY2stcHJvcGVydHktbmFtZS1mb250LWNvbG9yKTtcbiAgICAgICAgZm9udC13ZWlnaHQ6IHZhcigtLXN0YXRibG9jay1wcm9wZXJ0eS1uYW1lLWZvbnQtd2VpZ2h0KTtcbiAgICB9XG48L3N0eWxlPlxuIiwgIjxkaXYgY2xhc3M9XCJ0YXBlcmVkLXJ1bGVcIiAvPlxuXG48c3R5bGU+XG4gICAgLnRhcGVyZWQtcnVsZSB7XG4gICAgICAgIHdpZHRoOiBhdXRvO1xuICAgICAgICBtYXJnaW46IDAuNWVtIDA7XG4gICAgICAgIGhlaWdodDogNXB4O1xuICAgICAgICBiYWNrZ3JvdW5kOiAtd2Via2l0LWxpbmVhci1ncmFkaWVudChcbiAgICAgICAgICAgIDBkZWcsXG4gICAgICAgICAgICB2YXIoLS1zdGF0YmxvY2stcnVsZS1jb2xvcikgMCUsXG4gICAgICAgICAgICB2YXIoLS1zdGF0YmxvY2stcnVsZS1jb2xvcikgNTAlLFxuICAgICAgICAgICAgdmFyKC0tc3RhdGJsb2NrLWJhY2tncm91bmQtY29sb3IpIDk1JSxcbiAgICAgICAgICAgIHZhcigtLXN0YXRibG9jay1iYWNrZ3JvdW5kLWNvbG9yKSAxMDAlXG4gICAgICAgICk7XG4gICAgICAgIGNsaXAtcGF0aDogcG9seWdvbigwIDAsIDAgMTAwJSwgOTUlIDUwJSk7XG4gICAgICAgIC13ZWJraXQtY2xpcC1wYXRoOiBwb2x5Z29uKDAgMCwgMCAxMDAlLCA5NSUgNTAlKTtcbiAgICB9XG48L3N0eWxlPlxuIiwgIjxzY3JpcHQgbGFuZz1cInRzXCI+XG4gICAgaW1wb3J0IHR5cGUgeyBNb25zdGVyIH0gZnJvbSBcIkB0eXBlc1wiO1xuICAgIGltcG9ydCB0eXBlIHsgU2F2ZXNJdGVtIH0gZnJvbSBcInNyYy9sYXlvdXRzL3R5cGVzXCI7XG4gICAgaW1wb3J0IHsgdG9UaXRsZUNhc2UgfSBmcm9tIFwic3JjL3V0aWwvdXRpbFwiO1xuICAgIGltcG9ydCB7IGdldENvbnRleHQgfSBmcm9tIFwic3ZlbHRlXCI7XG4gICAgaW1wb3J0IFRleHRDb250ZW50SG9sZGVyIGZyb20gXCIuL1RleHRDb250ZW50SG9sZGVyLnN2ZWx0ZVwiO1xuXG4gICAgZXhwb3J0IGxldCBtb25zdGVyOiBNb25zdGVyO1xuICAgIGV4cG9ydCBsZXQgaXRlbTogU2F2ZXNJdGVtO1xuXG4gICAgZnVuY3Rpb24gZ2V0TW9kKHZhbHVlOiBudW1iZXIpIHtcbiAgICAgICAgcmV0dXJuIGAke3ZhbHVlID4gMCA/IFwiK1wiIDogXCJcIn0ke3ZhbHVlfWA7XG4gICAgfVxuXG4gICAgbGV0IGFycjogYW55W10gPSBtb25zdGVyW2l0ZW0ucHJvcGVydGllc1swXV0gYXMgYW55W107XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGFycikpIHtcbiAgICAgICAgYXJyID0gW107XG4gICAgfVxuXG4gICAgY29uc3Qgc2F2ZXMgPSBhcnJcbiAgICAgICAgLm1hcCgoYWJpbGl0eSkgPT4ge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBhYmlsaXR5ICE9IFwib2JqZWN0XCIgfHwgYWJpbGl0eSA9PSBudWxsKSByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIGxldCBrZXkgPSBPYmplY3Qua2V5cyhhYmlsaXR5KVswXTtcbiAgICAgICAgICAgIGlmICgha2V5KSByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gT2JqZWN0LnZhbHVlcyhhYmlsaXR5KVswXTtcbiAgICAgICAgICAgIGlmICghdmFsdWUgfHwgaXNOYU4oTnVtYmVyKHZhbHVlKSkpIHJldHVybiBudWxsO1xuICAgICAgICAgICAgcmV0dXJuIGAke3RvVGl0bGVDYXNlKGtleSl9ICR7Z2V0TW9kKHZhbHVlIGFzIG51bWJlcil9YDtcbiAgICAgICAgfSlcbiAgICAgICAgLmZpbHRlcigobSkgPT4gbSlcbiAgICAgICAgLmpvaW4oXCIsIFwiKTtcblxuICAgIGxldCBjYW5EaWNlID0gZ2V0Q29udGV4dDxib29sZWFuPihcImRpY2VcIik7XG48L3NjcmlwdD5cblxuPGRpdiBjbGFzcz1cImluZm9cIj5cbiAgICA8ZGl2IGNsYXNzPVwibGluZVwiPlxuICAgICAgICA8c3BhbiBjbGFzcz1cInByb3BlcnR5LW5hbWVcIlxuICAgICAgICAgICAgPntpdGVtLmRpc3BsYXkgPz8gdG9UaXRsZUNhc2UoaXRlbS5wcm9wZXJ0aWVzWzBdKX08L3NwYW5cbiAgICAgICAgPlxuICAgICAgICA8ZGl2IGNsYXNzPVwicHJvcGVydHktdGV4dFwiPlxuICAgICAgICAgICAgPFRleHRDb250ZW50SG9sZGVyIHJlbmRlcj17aXRlbS5tYXJrZG93bn0gcHJvcGVydHk9e3NhdmVzfSAvPlxuICAgICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbjwvZGl2PlxuXG48c3R5bGU+XG4gICAgLmxpbmUge1xuICAgICAgICBsaW5lLWhlaWdodDogdmFyKC0tc3RhdGJsb2NrLXNhdmVzLWxpbmUtaGVpZ2h0KTtcbiAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICAgIGNvbG9yOiB2YXIoLS1zdGF0YmxvY2stZm9udC1jb2xvcik7XG4gICAgfVxuICAgIC5wcm9wZXJ0eS1uYW1lIHtcbiAgICAgICAgbWFyZ2luOiAwO1xuICAgICAgICBtYXJnaW4tcmlnaHQ6IDAuMjVlbTtcbiAgICAgICAgZGlzcGxheTogaW5saW5lO1xuICAgICAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICB9XG4gICAgLnByb3BlcnR5LXRleHQge1xuICAgICAgICBkaXNwbGF5OiBpbmxpbmU7XG4gICAgICAgIG1hcmdpbjogMDtcbiAgICB9XG48L3N0eWxlPlxuIiwgIjxzY3JpcHQgbGFuZz1cInRzXCI+XG4gICAgaW1wb3J0IHR5cGUgeyBNb25zdGVyIH0gZnJvbSBcIkB0eXBlc1wiO1xuICAgIGltcG9ydCB0eXBlIHsgVGV4dEl0ZW0sIFRyYWl0c0l0ZW0gfSBmcm9tIFwic3JjL2xheW91dHMvdHlwZXNcIjtcbiAgICBpbXBvcnQgeyBzdHJpbmdpZnkgfSBmcm9tIFwic3JjL3V0aWwvdXRpbFwiO1xuICAgIGltcG9ydCBUZXh0Q29udGVudCBmcm9tIFwiLi9UZXh0Q29udGVudC5zdmVsdGVcIjtcblxuICAgIGV4cG9ydCBsZXQgbW9uc3RlcjogTW9uc3RlcjtcbiAgICBleHBvcnQgbGV0IGl0ZW06IFRyYWl0c0l0ZW0gfCBUZXh0SXRlbTtcblxuICAgIGxldCBoZWFkZXI6IHN0cmluZztcblxuICAgIGlmIChpdGVtLmhlYWRpbmdQcm9wKSB7XG4gICAgICAgIGlmIChpdGVtLmhlYWRpbmcgaW4gbW9uc3Rlcikge1xuICAgICAgICAgICAgbGV0IG1vbnN0ZXJQcm9wID0gc3RyaW5naWZ5KG1vbnN0ZXJbaXRlbS5oZWFkaW5nIGFzIGtleW9mIE1vbnN0ZXJdKTtcbiAgICAgICAgICAgIGlmIChtb25zdGVyUHJvcC5sZW5ndGgpIGhlYWRlciA9IG1vbnN0ZXJQcm9wO1xuICAgICAgICB9XG4gICAgfSBlbHNlIGlmIChpdGVtLmhlYWRpbmc/Lmxlbmd0aCkge1xuICAgICAgICBoZWFkZXIgPSBpdGVtLmhlYWRpbmc7XG4gICAgfVxuPC9zY3JpcHQ+XG5cbnsjaWYgaGVhZGVyICYmIGhlYWRlci5sZW5ndGh9XG4gICAgPGgzIGNsYXNzPVwic2VjdGlvbi1oZWFkZXJcIj5cbiAgICAgICAgPFRleHRDb250ZW50IHRleHRUb1JlbmRlcj17aGVhZGVyfSAvPlxuICAgIDwvaDM+XG57L2lmfVxuXG48c3R5bGU+XG4gICAgLnNlY3Rpb24taGVhZGVyIHtcbiAgICAgICAgYm9yZGVyLWJvdHRvbTogdmFyKC0tc3RhdGJsb2NrLXNlY3Rpb24taGVhZGluZy1ib3JkZXItc2l6ZSkgc29saWRcbiAgICAgICAgICAgIHZhcigtLXN0YXRibG9jay1zZWN0aW9uLWhlYWRpbmctYm9yZGVyLWNvbG9yKTtcbiAgICAgICAgY29sb3I6IHZhcigtLXN0YXRibG9jay1zZWN0aW9uLWhlYWRpbmctZm9udC1jb2xvcik7XG4gICAgICAgIGZvbnQtc2l6ZTogdmFyKC0tc3RhdGJsb2NrLXNlY3Rpb24taGVhZGluZy1mb250LXNpemUpO1xuICAgICAgICBmb250LXZhcmlhbnQ6IHZhcigtLXN0YXRibG9jay1zZWN0aW9uLWhlYWRpbmctZm9udC12YXJpYW50KTtcbiAgICAgICAgZm9udC13ZWlnaHQ6IHZhcigtLXN0YXRibG9jay1zZWN0aW9uLWhlYWRpbmctZm9udC13ZWlnaHQpO1xuICAgICAgICBsZXR0ZXItc3BhY2luZzogMXB4O1xuICAgICAgICBtYXJnaW46IDA7XG4gICAgICAgIG1hcmdpbi1ib3R0b206IDAuM2VtO1xuICAgICAgICBicmVhay1pbnNpZGU6IGF2b2lkLWNvbHVtbjtcbiAgICAgICAgYnJlYWstYWZ0ZXI6IGF2b2lkLWNvbHVtbjtcbiAgICB9XG48L3N0eWxlPlxuIiwgIjxzY3JpcHQgbGFuZz1cInRzXCI+XG4gICAgaW1wb3J0IHR5cGUgeyBNb25zdGVyIH0gZnJvbSBcIkB0eXBlc1wiO1xuICAgIGltcG9ydCB0eXBlIHsgU3ViSGVhZGluZ0l0ZW0gfSBmcm9tIFwic3JjL2xheW91dHMvdHlwZXNcIjtcbiAgICBpbXBvcnQgeyBzdHJpbmdpZnkgfSBmcm9tIFwic3JjL3V0aWwvdXRpbFwiO1xuICAgIGltcG9ydCBUZXh0Q29udGVudCBmcm9tIFwiLi9UZXh0Q29udGVudC5zdmVsdGVcIjtcblxuICAgIGV4cG9ydCBsZXQgbW9uc3RlcjogTW9uc3RlcjtcbiAgICBleHBvcnQgbGV0IGl0ZW06IFN1YkhlYWRpbmdJdGVtO1xuICAgIGNvbnN0IHN1YmhlYWRpbmc6IHN0cmluZ1tdID0gW107XG5cbiAgICBmb3IgKGxldCBwcm9wZXJ0eSBvZiBpdGVtLnByb3BlcnRpZXMpIHtcbiAgICAgICAgaWYgKHByb3BlcnR5IGluIG1vbnN0ZXIpIHtcbiAgICAgICAgICAgIHN1YmhlYWRpbmcucHVzaChgJHtzdHJpbmdpZnkobW9uc3Rlcltwcm9wZXJ0eV0pfWApO1xuICAgICAgICB9XG4gICAgfVxuPC9zY3JpcHQ+XG5cbnsjaWYgc3ViaGVhZGluZy5sZW5ndGh9XG4gICAgPGRpdiBjbGFzcz1cInN1YmhlYWRpbmdcIj5cbiAgICAgICAgPFRleHRDb250ZW50IHRleHRUb1JlbmRlcj17c3ViaGVhZGluZy5qb2luKGl0ZW0uc2VwYXJhdG9yID8/IFwiIFwiKX0gLz5cbiAgICA8L2Rpdj5cbnsvaWZ9XG5cbjxzdHlsZT5cbiAgICAuc3ViaGVhZGluZyB7XG4gICAgICAgIGZvbnQtd2VpZ2h0OiB2YXIoLS1zdGF0YmxvY2stc3ViaGVhZGluZy1mb250LXdlaWdodCk7XG4gICAgICAgIGZvbnQtc3R5bGU6IHZhcigtLXN0YXRibG9jay1zdWJoZWFkaW5nLWZvbnQtc3R5bGUpO1xuICAgICAgICBmb250LXNpemU6IHZhcigtLXN0YXRibG9jay1zdWJoZWFkaW5nLWZvbnQtc2l6ZSk7XG4gICAgICAgIG1hcmdpbjogMDtcbiAgICB9XG48L3N0eWxlPlxuIiwgIjxzY3JpcHQgbGFuZz1cInRzXCI+XG4gICAgaW1wb3J0IHR5cGUgeyBNb25zdGVyIH0gZnJvbSBcIkB0eXBlc1wiO1xuICAgIGltcG9ydCB0eXBlIHsgVGFibGVJdGVtIH0gZnJvbSBcInNyYy9sYXlvdXRzL3R5cGVzXCI7XG5cbiAgICBleHBvcnQgbGV0IG1vbnN0ZXI6IE1vbnN0ZXI7XG4gICAgZXhwb3J0IGxldCBpdGVtOiBUYWJsZUl0ZW07XG5cbiAgICBjb25zdCBjdXN0b21Nb2QgPSBuZXcgRnVuY3Rpb24oJ3N0YXQnLCBgcmV0dXJuICR7aXRlbS5tb2RpZmllcn1gKTtcblxuICAgIGZ1bmN0aW9uIGdldE1vZChzdGF0OiBudW1iZXIpIHsgICAgICAgIFxuICAgICAgICBsZXQgbW9kID0gaXRlbS5tb2RpZmllciA9PSBudWxsIHx8ICFpdGVtLm1vZGlmaWVyLmxlbmd0aCB8fCBpdGVtLm1vZGlmaWVyID09IFwiXCI/IFxuICAgICAgICAgICAgTWF0aC5mbG9vcigoKHN0YXQgPz8gMTApIC0gMTApIC8gMikgOiBcbiAgICAgICAgICAgIGN1c3RvbU1vZChzdGF0KTtcbiAgICAgICAgcmV0dXJuIGAke21vZCA+PSAwID8gXCIrXCIgOiBcIi1cIn0ke01hdGguYWJzKG1vZCl9YDtcbiAgICB9XG5cbiAgICBsZXQgdmFsdWVzOiBhbnlbXSA9IG1vbnN0ZXJbaXRlbS5wcm9wZXJ0aWVzWzBdXSBhcyBhbnlbXTtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkodmFsdWVzKSkge1xuICAgICAgICB2YWx1ZXMgPSBbXTtcbiAgICB9XG5cbiAgICBjb25zdCBoZWFkZXJzID0gaXRlbS5oZWFkZXJzID8/IFtcbiAgICAgICAgLi4uQXJyYXkodmFsdWVzLmxlbmd0aCA+IDAgPyB2YWx1ZXMubGVuZ3RoIDogMSkua2V5cygpXG4gICAgXTtcbjwvc2NyaXB0PlxuXG48ZGl2IGNsYXNzPVwidGFibGVcIj5cbiAgICB7I2VhY2ggdmFsdWVzLnNsaWNlKDAsIGhlYWRlcnMubGVuZ3RoKSBhcyB2YWx1ZSwgaW5kZXh9XG4gICAgICAgIDxkaXYgY2xhc3M9XCJ0YWJsZS1pdGVtXCI+XG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cInN0YXRibG9jay10YWJsZS1oZWFkZXJcIj5cbiAgICAgICAgICAgICAgICB7YCR7aGVhZGVyc1tpbmRleF19YC50b1VwcGVyQ2FzZSgpfVxuICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgPHNwYW4+XG4gICAgICAgICAgICAgICAge3ZhbHVlfVxuICAgICAgICAgICAgICAgIHsjaWYgaXRlbS5jYWxjdWxhdGV9XG4gICAgICAgICAgICAgICAgICAgIDxzcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgKHtnZXRNb2QodmFsdWUpfSlcbiAgICAgICAgICAgICAgICAgICAgPC9zcGFuPlxuICAgICAgICAgICAgICAgIHsvaWZ9XG4gICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgIDwvZGl2PlxuICAgIHsvZWFjaH1cbjwvZGl2PlxuXG48c3R5bGU+XG4gICAgLnN0YXRibG9jay10YWJsZS1oZWFkZXIge1xuICAgICAgICBmb250LXdlaWdodDogdmFyKC0tc3RhdGJsb2NrLXRhYmxlLWhlYWRlci1mb250LXdlaWdodCk7XG4gICAgfVxuICAgIC50YWJsZSB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtZXZlbmx5O1xuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICBmbGV4LXdyYXA6IHdyYXA7XG4gICAgfVxuICAgIC50YWJsZS1pdGVtIHtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgIGZsZXgtZmxvdzogY29sdW1uIG5vd3JhcDtcbiAgICB9XG48L3N0eWxlPlxuIiwgIjxzY3JpcHQgbGFuZz1cInRzXCI+XG4gICAgaW1wb3J0IHR5cGUgeyBNb25zdGVyIH0gZnJvbSBcIkB0eXBlc1wiO1xuICAgIGltcG9ydCB0eXBlIHsgVGV4dEl0ZW0gfSBmcm9tIFwic3JjL2xheW91dHMvdHlwZXNcIjtcbiAgICBpbXBvcnQgeyBzdHJpbmdpZnkgfSBmcm9tIFwic3JjL3V0aWwvdXRpbFwiO1xuXG4gICAgaW1wb3J0IFNlY3Rpb25IZWFkaW5nIGZyb20gXCIuL1NlY3Rpb25IZWFkaW5nLnN2ZWx0ZVwiO1xuICAgIGltcG9ydCBUZXh0Q29udGVudEhvbGRlciBmcm9tIFwiLi9UZXh0Q29udGVudEhvbGRlci5zdmVsdGVcIjtcblxuICAgIGV4cG9ydCBsZXQgbW9uc3RlcjogTW9uc3RlcjtcbiAgICBleHBvcnQgbGV0IGl0ZW06IFRleHRJdGVtO1xuXG4gICAgbGV0IHByb3BlcnR5ID1cbiAgICAgICAgaXRlbS50ZXh0ICYmIGl0ZW0udGV4dC5sZW5ndGhcbiAgICAgICAgICAgID8gaXRlbS50ZXh0XG4gICAgICAgICAgICA6IHN0cmluZ2lmeShtb25zdGVyW2l0ZW0ucHJvcGVydGllc1swXV0pO1xuXG4gICAgaWYgKCFpdGVtLmNvbmRpdGlvbmVkICYmICFgJHtwcm9wZXJ0eX1gLmxlbmd0aCkge1xuICAgICAgICBwcm9wZXJ0eSA9IGl0ZW0uZmFsbGJhY2sgPz8gXCItXCI7XG4gICAgfVxuPC9zY3JpcHQ+XG5cbnsjaWYgIWl0ZW0uY29uZGl0aW9uZWQgfHwgKGl0ZW0uY29uZGl0aW9uZWQgJiYgYCR7cHJvcGVydHl9YC5sZW5ndGgpfVxuICAgIHsjaWYgaXRlbS5oZWFkaW5nfVxuICAgICAgICA8U2VjdGlvbkhlYWRpbmcge2l0ZW19IHttb25zdGVyfSAvPlxuICAgIHsvaWZ9XG4gICAgPGRpdiBjbGFzcz1cImxpbmVcIj5cbiAgICAgICAgPFRleHRDb250ZW50SG9sZGVyIHJlbmRlcj17aXRlbS5tYXJrZG93bn0ge3Byb3BlcnR5fSAvPlxuICAgIDwvZGl2Plxuey9pZn1cblxuPHN0eWxlPjwvc3R5bGU+XG4iLCAiPHNjcmlwdCBsYW5nPVwidHNcIj5cbiAgICBpbXBvcnQgdHlwZSB7IE1vbnN0ZXIgfSBmcm9tIFwiQHR5cGVzXCI7XG4gICAgaW1wb3J0IHR5cGUgeyBJbWFnZUl0ZW0gfSBmcm9tIFwic3JjL2xheW91dHMvdHlwZXNcIjtcbiAgICBpbXBvcnQgdHlwZSBTdGF0QmxvY2tQbHVnaW4gZnJvbSBcInNyYy9tYWluXCI7XG4gICAgaW1wb3J0IHsgZ2V0Q29udGV4dCB9IGZyb20gXCJzdmVsdGVcIjtcbiAgICBpbXBvcnQge1xuICAgICAgICBBcHAsXG4gICAgICAgIEhvdmVyUG9wb3ZlcixcbiAgICAgICAgTWFya2Rvd25QcmV2aWV3VmlldyxcbiAgICAgICAgTWFya2Rvd25WaWV3LFxuICAgICAgICBQbGF0Zm9ybSxcbiAgICAgICAgVEZpbGUsXG4gICAgICAgIFdvcmtzcGFjZUxlYWZcbiAgICB9IGZyb20gXCJvYnNpZGlhblwiO1xuXG4gICAgZXhwb3J0IGxldCBtb25zdGVyOiBNb25zdGVyO1xuICAgIGV4cG9ydCBsZXQgaXRlbTogSW1hZ2VJdGVtO1xuXG4gICAgY29uc3QgcGx1Z2luID0gZ2V0Q29udGV4dDxTdGF0QmxvY2tQbHVnaW4+KFwicGx1Z2luXCIpO1xuICAgIGNvbnN0IGNvbnRleHQgPSBnZXRDb250ZXh0PHN0cmluZz4oXCJjb250ZXh0XCIpO1xuXG4gICAgZnVuY3Rpb24gcGFyc2VMaW5rKGxpbms6IHN0cmluZykge1xuICAgICAgICByZXR1cm4gbGluaz8ucmVwbGFjZSgvKFxcW3xcXF0pL2csIFwiXCIpO1xuICAgIH1cbiAgICBsZXQgZmlsZTogVEZpbGU7XG4gICAgYXN5bmMgZnVuY3Rpb24gZ2V0TGluayh1cmw6IHN0cmluZykge1xuICAgICAgICB1cmwgPSBkZWNvZGVVUklDb21wb25lbnQodXJsKTtcbiAgICAgICAgbGV0IGxpbms6IHN0cmluZztcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmICgvaHR0cHM/Oi8udGVzdCh1cmwpKSB7XG4gICAgICAgICAgICAgICAgLy91cmxcbiAgICAgICAgICAgICAgICBjb25zdCBbbGlua3BhdGhdID0gcGFyc2VMaW5rKHVybCkuc3BsaXQoXCJ8XCIpO1xuICAgICAgICAgICAgICAgIGxpbmsgPSBsaW5rcGF0aDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgW2xpbmtwYXRoXSA9IHBhcnNlTGluayh1cmwpLnNwbGl0KFwifFwiKTtcblxuICAgICAgICAgICAgICAgIGZpbGUgPSBwbHVnaW4uYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0Rmlyc3RMaW5rcGF0aERlc3QoXG4gICAgICAgICAgICAgICAgICAgIGxpbmtwYXRoLnJlcGxhY2UoLzxcXC8/U1RBVEJMT0NLLUxJTks+L2csIFwiXCIpLFxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0XG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBpZiAoIWZpbGUpIHRocm93IG5ldyBFcnJvcigpO1xuICAgICAgICAgICAgICAgIGxpbmsgPSBwbHVnaW4uYXBwLnZhdWx0LmdldFJlc291cmNlUGF0aChmaWxlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbGluaztcbiAgICB9XG4gICAgY29uc3QgZ2V0SW1hZ2UgPSBhc3luYyAoKTogUHJvbWlzZTxzdHJpbmc+ID0+IHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgaXRlbS5wcm9wZXJ0aWVzLmxlbmd0aCAmJlxuICAgICAgICAgICAgaXRlbS5wcm9wZXJ0aWVzLnNvbWUoXG4gICAgICAgICAgICAgICAgKHApID0+IHAgaW4gbW9uc3RlciAmJiB0eXBlb2YgbW9uc3RlcltwXSA9PSBcInN0cmluZ1wiXG4gICAgICAgICAgICApXG4gICAgICAgICkge1xuICAgICAgICAgICAgY29uc3QgcHJvcHMgPSBpdGVtLnByb3BlcnRpZXMuZmlsdGVyKFxuICAgICAgICAgICAgICAgIChwKSA9PiBwIGluIG1vbnN0ZXIgJiYgdHlwZW9mIG1vbnN0ZXJbcF0gPT0gXCJzdHJpbmdcIlxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGlmIChwcm9wcy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXG4gICAgICAgICAgICAgICAgICAgIFwiVFRSUEcgU3RhdGJsb2NrczogTXVsdGlwbGUgaW1hZ2UgcHJvcGVydGllcyBwcm92aWRlZCwgdXNpbmcgZmlyc3QuXCJcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcGF0aCA9IG1vbnN0ZXJbcHJvcHNbMF1dIGFzIHN0cmluZztcblxuICAgICAgICAgICAgcmV0dXJuIGdldExpbmsocGF0aCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIGxldCBwcm9taXNlID0gZ2V0SW1hZ2UoKTtcblxuICAgIGNvbnN0IG1vZGlmaWVyID0gUGxhdGZvcm0uaXNNYWNPUyA/IFwiTWV0YVwiIDogXCJDb250cm9sXCI7XG4gICAgZnVuY3Rpb24gb3BlbihldnQ6IE1vdXNlRXZlbnQpIHtcbiAgICAgICAgaWYgKCFmaWxlKSByZXR1cm47XG4gICAgICAgIGNvbnN0IGxlYWYgPSBwbHVnaW4uYXBwLndvcmtzcGFjZS5nZXRMZWFmKFxuICAgICAgICAgICAgZXZ0LmdldE1vZGlmaWVyU3RhdGUobW9kaWZpZXIpID8gXCJ3aW5kb3dcIiA6IFwic3BsaXRcIlxuICAgICAgICApO1xuICAgICAgICBsZWFmLm9wZW5GaWxlKGZpbGUpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBwb3BvdmVyKGV2dDogTW91c2VFdmVudCAmIHsgY3VycmVudFRhcmdldDogSFRNTERpdkVsZW1lbnQgfSkge1xuICAgICAgICBwbHVnaW4uYXBwLndvcmtzcGFjZS50cmlnZ2VyKFxuICAgICAgICAgICAgXCJsaW5rLWhvdmVyXCIsXG4gICAgICAgICAgICB7fSxcbiAgICAgICAgICAgIGV2dC5jdXJyZW50VGFyZ2V0LFxuICAgICAgICAgICAgZmlsZS5wYXRoLFxuICAgICAgICAgICAgY29udGV4dFxuICAgICAgICApO1xuICAgIH1cbjwvc2NyaXB0PlxuXG57I2VhY2ggaXRlbS5wcm9wZXJ0aWVzIGFzIHByb3BlcnR5fVxuICAgIHsjaWYgcHJvcGVydHkgaW4gbW9uc3Rlcn1cbiAgICAgICAgeyNhd2FpdCBwcm9taXNlIHRoZW4gaW1hZ2V9XG4gICAgICAgICAgICB7I2lmIGltYWdlfVxuICAgICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICAgICAgY2xhc3M9XCJpbWFnZVwiXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzOnBvaW50ZXI9e2ZpbGUgIT0gbnVsbH1cbiAgICAgICAgICAgICAgICAgICAgb246Y2xpY2s9eyhldnQpID0+IG9wZW4oZXZ0KX1cbiAgICAgICAgICAgICAgICAgICAgb246bW91c2VlbnRlcj17KGV2dCkgPT4gcG9wb3ZlcihldnQpfVxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9e2ltYWdlfSBhbHQ9e21vbnN0ZXIubmFtZX0gLz5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIHsvaWZ9XG4gICAgICAgIHsvYXdhaXR9XG4gICAgey9pZn1cbnsvZWFjaH1cblxuPHN0eWxlPlxuICAgIC5pbWFnZSB7XG4gICAgICAgIHdpZHRoOiB2YXIoLS1zdGF0YmxvY2staW1hZ2Utd2lkdGgpO1xuICAgICAgICBoZWlnaHQ6IHZhcigtLXN0YXRibG9jay1pbWFnZS1oZWlnaHQpO1xuICAgIH1cbiAgICAuaW1hZ2UucG9pbnRlciB7XG4gICAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICB9XG4gICAgaW1nIHtcbiAgICAgICAgb2JqZWN0LWZpdDogY292ZXI7XG4gICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDEwMCU7XG4gICAgICAgIGJvcmRlcjogdmFyKC0tc3RhdGJsb2NrLWltYWdlLWJvcmRlci1zaXplKSBzb2xpZCB2YXIoLS1zdGF0YmxvY2staW1hZ2UtYm9yZGVyLWNvbG9yKTtcbiAgICAgICAgb2JqZWN0LXBvc2l0aW9uOiBjZW50ZXI7XG4gICAgfVxuPC9zdHlsZT5cbiIsICI8c2NyaXB0IGxhbmc9XCJ0c1wiPlxuICAgIGltcG9ydCB0eXBlIHsgTW9uc3RlciwgVHJhaXQgfSBmcm9tIFwiQHR5cGVzXCI7XG5cbiAgICBpbXBvcnQgVHJhaXRzIGZyb20gXCIuL1RyYWl0cy5zdmVsdGVcIjtcbiAgICBpbXBvcnQgU3BlbGxzIGZyb20gXCIuL1NwZWxscy5zdmVsdGVcIjtcbiAgICBpbXBvcnQgSGVhZGluZyBmcm9tIFwiLi9IZWFkaW5nLnN2ZWx0ZVwiO1xuICAgIGltcG9ydCBQcm9wZXJ0eUxpbmUgZnJvbSBcIi4vUHJvcGVydHlMaW5lLnN2ZWx0ZVwiO1xuICAgIGltcG9ydCBSdWxlIGZyb20gXCIuL1J1bGUuc3ZlbHRlXCI7XG4gICAgaW1wb3J0IFNhdmVzIGZyb20gXCIuL1NhdmVzLnN2ZWx0ZVwiO1xuICAgIGltcG9ydCBTZWN0aW9uSGVhZGluZyBmcm9tIFwiLi9TZWN0aW9uSGVhZGluZy5zdmVsdGVcIjtcbiAgICBpbXBvcnQgU3ViaGVhZGluZyBmcm9tIFwiLi9TdWJoZWFkaW5nLnN2ZWx0ZVwiO1xuICAgIGltcG9ydCBUYWJsZSBmcm9tIFwiLi9UYWJsZS5zdmVsdGVcIjtcbiAgICBpbXBvcnQgVGV4dCBmcm9tIFwiLi9UZXh0LnN2ZWx0ZVwiO1xuICAgIGltcG9ydCB7XG4gICAgICAgIG9uTW91bnQsXG4gICAgICAgIGNyZWF0ZUV2ZW50RGlzcGF0Y2hlcixcbiAgICAgICAgZ2V0QWxsQ29udGV4dHMsXG4gICAgICAgIGdldENvbnRleHRcbiAgICB9IGZyb20gXCJzdmVsdGVcIjtcbiAgICBpbXBvcnQgSW1hZ2UgZnJvbSBcIi4vSW1hZ2Uuc3ZlbHRlXCI7XG4gICAgaW1wb3J0IHR5cGUgeyBTdGF0YmxvY2tJdGVtIH0gZnJvbSBcInNyYy9sYXlvdXRzL3R5cGVzXCI7XG5cbiAgICBjb25zdCBkaXNwYXRjaCA9IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlcigpO1xuXG4gICAgZXhwb3J0IGxldCBzdGF0YmxvY2s6IFN0YXRibG9ja0l0ZW1bXTtcbiAgICBleHBvcnQgbGV0IGNvbHVtbnM6IG51bWJlciA9IDE7XG4gICAgZXhwb3J0IGxldCByZWFkeTogYm9vbGVhbjtcbiAgICBleHBvcnQgbGV0IG1heENvbHVtbnM6IG51bWJlciA9IGNvbHVtbnM7XG5cbiAgICBjb25zdCBtb25zdGVyID0gZ2V0Q29udGV4dDxNb25zdGVyPihcIm1vbnN0ZXJcIik7XG5cbiAgICBjb25zdCBjaGVja0NvbmRpdGlvbmVkID0gKGl0ZW06IFN0YXRibG9ja0l0ZW0pID0+IHtcbiAgICAgICAgaWYgKGl0ZW0uY29uZGl0aW9uZWQgPT0gbnVsbCB8fCAhaXRlbS5jb25kaXRpb25lZCkgcmV0dXJuIHRydWU7XG4gICAgICAgIGlmICghaXRlbS5wcm9wZXJ0aWVzLmxlbmd0aCkgcmV0dXJuIHRydWU7XG4gICAgICAgIHJldHVybiBpdGVtLnByb3BlcnRpZXMuc29tZSgocHJvcCkgPT4ge1xuICAgICAgICAgICAgaWYgKHByb3AgaW4gbW9uc3Rlcikge1xuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgQXJyYXkuaXNBcnJheShtb25zdGVyW3Byb3BdKSAmJlxuICAgICAgICAgICAgICAgICAgICAobW9uc3Rlcltwcm9wXSBhcyBBcnJheTxhbnk+KS5sZW5ndGhcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgdHlwZW9mIG1vbnN0ZXJbcHJvcF0gPT09IFwic3RyaW5nXCIgJiZcbiAgICAgICAgICAgICAgICAgICAgKG1vbnN0ZXJbcHJvcF0gYXMgc3RyaW5nKS5sZW5ndGhcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbW9uc3Rlcltwcm9wXSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBjb25zdCBjb250ZXh0ID0gZ2V0QWxsQ29udGV4dHMoKTtcblxuICAgIGNvbnN0IGdldEVsZW1lbnRGb3JTdGF0YmxvY2tJdGVtID0gKFxuICAgICAgICBpdGVtOiBTdGF0YmxvY2tJdGVtLFxuICAgICAgICBjb250YWluZXI/OiBIVE1MRGl2RWxlbWVudFxuICAgICk6IEhUTUxEaXZFbGVtZW50W10gPT4ge1xuICAgICAgICBjb25zdCB0YXJnZXRzOiBIVE1MRGl2RWxlbWVudFtdID0gW107XG4gICAgICAgIGNvbnN0IHRhcmdldCA9IGNvbnRhaW5lciA/PyBjcmVhdGVEaXYoXCJzdGF0YmxvY2staXRlbS1jb250YWluZXJcIik7XG4gICAgICAgIGNvbnRleHQuc2V0KFwiaXRlbVwiLCBpdGVtKTtcbiAgICAgICAgaWYgKCFjaGVja0NvbmRpdGlvbmVkKGl0ZW0pKSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICAgICAgdGFyZ2V0cy5wdXNoKHRhcmdldCk7XG4gICAgICAgIHN3aXRjaCAoaXRlbS50eXBlKSB7XG4gICAgICAgICAgICBjYXNlIFwiZ3JvdXBcIjoge1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgbmVzdGVkIG9mIGl0ZW0ubmVzdGVkID8/IFtdKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGVsZW1lbnQgPSBnZXRFbGVtZW50Rm9yU3RhdGJsb2NrSXRlbShuZXN0ZWQsIHRhcmdldCk7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldHMucHVzaCguLi5lbGVtZW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIFwiaGVhZGluZ1wiOiB7XG4gICAgICAgICAgICAgICAgY29uc3QgaGVhZGluZyA9IG5ldyBIZWFkaW5nKHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LFxuICAgICAgICAgICAgICAgICAgICBwcm9wczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgbW9uc3RlcixcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGhlYWRpbmcuJG9uKFwic2F2ZVwiLCAoZSkgPT4gZGlzcGF0Y2goXCJzYXZlXCIsIGUuZGV0YWlsKSk7XG4gICAgICAgICAgICAgICAgaGVhZGluZy4kb24oXCJleHBvcnRcIiwgKGUpID0+IGRpc3BhdGNoKFwiZXhwb3J0XCIsIGUuZGV0YWlsKSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIFwiaW5saW5lXCI6IHtcbiAgICAgICAgICAgICAgICBjb25zdCBpbmxpbmUgPSBjcmVhdGVEaXYoXCJzdGF0YmxvY2staXRlbS1pbmxpbmVcIik7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBuZXN0ZWQgb2YgaXRlbS5uZXN0ZWQgPz8gW10pIHtcbiAgICAgICAgICAgICAgICAgICAgZ2V0RWxlbWVudEZvclN0YXRibG9ja0l0ZW0oXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXN0ZWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmxpbmUuY3JlYXRlRGl2KFwic3RhdGJsb2NrLWlubGluZS1pdGVtXCIpXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRhcmdldHMucHVzaChpbmxpbmUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSBcImltYWdlXCI6IHtcbiAgICAgICAgICAgICAgICBuZXcgSW1hZ2Uoe1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXQsXG4gICAgICAgICAgICAgICAgICAgIHByb3BzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtb25zdGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIFwicHJvcGVydHlcIjoge1xuICAgICAgICAgICAgICAgIG5ldyBQcm9wZXJ0eUxpbmUoe1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXQsXG4gICAgICAgICAgICAgICAgICAgIHByb3BzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtb25zdGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIFwic2F2ZXNcIjoge1xuICAgICAgICAgICAgICAgIG5ldyBTYXZlcyh7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldCxcbiAgICAgICAgICAgICAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vbnN0ZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHRcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgXCJzcGVsbHNcIjoge1xuICAgICAgICAgICAgICAgIGNvbnN0IGJsb2NrczogVHJhaXRbXSA9IG1vbnN0ZXJbaXRlbS5wcm9wZXJ0aWVzWzBdXSBhcyBUcmFpdFtdO1xuICAgICAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShibG9ja3MpIHx8ICFibG9ja3MubGVuZ3RoKSByZXR1cm47XG5cbiAgICAgICAgICAgICAgICBuZXcgU3BlbGxzKHtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LFxuICAgICAgICAgICAgICAgICAgICBwcm9wczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgbW9uc3RlcixcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlcjogaXRlbS5tYXJrZG93blxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIFwic3ViaGVhZGluZ1wiOiB7XG4gICAgICAgICAgICAgICAgbmV3IFN1YmhlYWRpbmcoe1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXQsXG4gICAgICAgICAgICAgICAgICAgIHByb3BzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtb25zdGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIFwidGFibGVcIjoge1xuICAgICAgICAgICAgICAgIG5ldyBUYWJsZSh7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldCxcbiAgICAgICAgICAgICAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vbnN0ZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHRcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgXCJ0ZXh0XCI6IHtcbiAgICAgICAgICAgICAgICBuZXcgVGV4dCh7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldCxcbiAgICAgICAgICAgICAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vbnN0ZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgXCJ0cmFpdHNcIjoge1xuICAgICAgICAgICAgICAgIGNvbnN0IGJsb2NrczogVHJhaXRbXSA9IG1vbnN0ZXJbaXRlbS5wcm9wZXJ0aWVzWzBdXSBhcyBUcmFpdFtdO1xuICAgICAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShibG9ja3MpIHx8ICFibG9ja3MubGVuZ3RoKSByZXR1cm4gW107XG5cbiAgICAgICAgICAgICAgICBpZiAoaXRlbS5oZWFkaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIG5ldyBTZWN0aW9uSGVhZGluZyh7XG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9wczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vbnN0ZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbVxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRleHRcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgYmxvY2sgb2YgYmxvY2tzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwcm9wID0gY3JlYXRlRGl2KFwic3RhdGJsb2NrLWl0ZW0tY29udGFpbmVyXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFRyYWl0cyh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiBwcm9wLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IGJsb2NrLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2M6IGJsb2NrLmRlc2MsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlcjogaXRlbS5tYXJrZG93blxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRzLnB1c2gocHJvcCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGl0ZW0uaGFzUnVsZSkge1xuICAgICAgICAgICAgY29uc3QgcnVsZSA9IGNyZWF0ZURpdihcInN0YXRibG9jay1pdGVtLWNvbnRhaW5lclwiKTtcbiAgICAgICAgICAgIG5ldyBSdWxlKHtcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IHJ1bGVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGFyZ2V0cy5wdXNoKHJ1bGUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0YXJnZXRzO1xuICAgIH07XG4gICAgJDogbWF4SGVpZ2h0ID1cbiAgICAgICAgIWlzTmFOKE51bWJlcihtb25zdGVyLmNvbHVtbkhlaWdodCkpICYmIG1vbnN0ZXIuY29sdW1uSGVpZ2h0ID4gMFxuICAgICAgICAgICAgPyBtb25zdGVyLmNvbHVtbkhlaWdodFxuICAgICAgICAgICAgOiBJbmZpbml0eTtcblxuICAgIGNvbnN0IHRhcmdldHM6IEhUTUxFbGVtZW50W10gPSBbXTtcbiAgICBmb3IgKGxldCBpdGVtIG9mIHN0YXRibG9jaykge1xuICAgICAgICB0YXJnZXRzLnB1c2goLi4uZ2V0RWxlbWVudEZvclN0YXRibG9ja0l0ZW0oaXRlbSkpO1xuICAgIH1cbiAgICBjb25zdCBidWlsZFN0YXRibG9jayA9IChub2RlOiBIVE1MRWxlbWVudCkgPT4ge1xuICAgICAgICBub2RlLmVtcHR5KCk7XG5cbiAgICAgICAgbGV0IGNvbHVtbkVsID0gbm9kZS5jcmVhdGVEaXYoXCJjb2x1bW5cIik7XG4gICAgICAgIGlmIChjb2x1bW5zID09IDEpIHtcbiAgICAgICAgICAgIHRhcmdldHMuZm9yRWFjaCgoZWwpID0+IGNvbHVtbkVsLmFwcGVuZENoaWxkKGVsKSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB0ZW1wID0gZG9jdW1lbnQuYm9keS5jcmVhdGVEaXYoXCJzdGF0YmxvY2stZGV0YWNoZWRcIik7XG4gICAgICAgIGNvbnN0IGhlaWdodG1hcDogTWFwPEhUTUxFbGVtZW50LCBudW1iZXI+ID0gbmV3IE1hcCgpO1xuICAgICAgICBmb3IgKGxldCB0YXJnZXQgb2YgdGFyZ2V0cykge1xuICAgICAgICAgICAgdGVtcC5hcHBlbmRDaGlsZCh0YXJnZXQpO1xuICAgICAgICAgICAgaGVpZ2h0bWFwLnNldCh0YXJnZXQsIE1hdGguZmxvb3IodGFyZ2V0LmNsaWVudEhlaWdodCkpO1xuICAgICAgICB9XG4gICAgICAgIHRlbXAuc3R5bGUud2lkdGggPSBjb2x1bW5XaWR0aDtcblxuICAgICAgICBsZXQgc3BsaXQ6IG51bWJlcjtcblxuICAgICAgICBpZiAobW9uc3Rlci5mb3JjZUNvbHVtbnMpIHtcbiAgICAgICAgICAgIHNwbGl0ID0gdGVtcC5jbGllbnRIZWlnaHQgLyBtYXhDb2x1bW5zO1xuICAgICAgICB9IGVsc2UgaWYgKG1vbnN0ZXIuY29sdW1ucyAmJiBtb25zdGVyLmNvbHVtbnMgPiAwKSB7XG4gICAgICAgICAgICBzcGxpdCA9IE1hdGgubWF4KFxuICAgICAgICAgICAgICAgIHRlbXAuY2xpZW50SGVpZ2h0IC8gbW9uc3Rlci5jb2x1bW5zLFxuICAgICAgICAgICAgICAgIHRlbXAuY2xpZW50SGVpZ2h0IC8gY29sdW1uc1xuICAgICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNwbGl0ID0gTWF0aC5tYXgoXG4gICAgICAgICAgICAgICAgNjAwLFxuICAgICAgICAgICAgICAgIE1hdGgubWluKHRlbXAuY2xpZW50SGVpZ2h0IC8gY29sdW1ucywgbWF4SGVpZ2h0KVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRlbXAuZW1wdHkoKTtcbiAgICAgICAgdGVtcC5kZXRhY2goKTtcblxuICAgICAgICBmb3IgKGxldCB0YXJnZXQgb2YgdGFyZ2V0cykge1xuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIG5vZGUuY2hpbGRFbGVtZW50Q291bnQgPCBjb2x1bW5zICYmXG4gICAgICAgICAgICAgICAgY29sdW1uRWwuY2xpZW50SGVpZ2h0ICsgaGVpZ2h0bWFwLmdldCh0YXJnZXQpID4gc3BsaXRcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIGNvbHVtbkVsID0gbm9kZS5jcmVhdGVEaXYoXCJjb2x1bW5cIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb2x1bW5FbC5hcHBlbmRDaGlsZCh0YXJnZXQpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIGxldCBjb250ZW50OiBIVE1MRWxlbWVudDtcblxuICAgICQ6IHtcbiAgICAgICAgaWYgKHJlYWR5ICYmIGNvbnRlbnQpIHtcbiAgICAgICAgICAgIGJ1aWxkU3RhdGJsb2NrKGNvbnRlbnQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGxldCBjb2x1bW5XaWR0aCA9IFwiNDAwcHhcIjtcblxuICAgIGlmIChtb25zdGVyLmNvbHVtbldpZHRoKSB7XG4gICAgICAgIGlmICh0eXBlb2YgbW9uc3Rlci5jb2x1bW5XaWR0aCA9PSBcIm51bWJlclwiKSB7XG4gICAgICAgICAgICBjb2x1bW5XaWR0aCA9IGAke21vbnN0ZXIuY29sdW1uV2lkdGh9cHhgO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgbW9uc3Rlci5jb2x1bW5XaWR0aCA9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBjb2x1bW5XaWR0aCA9IG1vbnN0ZXIuY29sdW1uV2lkdGg7XG4gICAgICAgIH1cbiAgICB9XG48L3NjcmlwdD5cblxuPGRpdlxuICAgIGNsYXNzPVwic3RhdGJsb2NrLWNvbnRlbnQtY29udGFpbmVyXCJcbiAgICBzdHlsZT1cIi0tc3RhdGJsb2NrLWNvbHVtbi13aWR0aDoge2NvbHVtbldpZHRofTtcIlxuPlxuICAgIDxkaXYgY2xhc3M9XCJzdGF0YmxvY2stY29udGVudFwiIGJpbmQ6dGhpcz17Y29udGVudH0gLz5cbjwvZGl2PlxuXG48c3R5bGU+XG4gICAgLnN0YXRibG9jay1jb250ZW50IHtcbiAgICAgICAgZm9udC1mYW1pbHk6IHZhcigtLXN0YXRibG9jay1jb250ZW50LWZvbnQpO1xuICAgICAgICBmb250LXNpemU6IHZhcigtLXN0YXRibG9jay1jb250ZW50LWZvbnQtc2l6ZSk7XG4gICAgICAgIGNvbG9yOiB2YXIoLS1zdGF0YmxvY2stZm9udC1jb2xvcik7XG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLXN0YXRibG9jay1iYWNrZ3JvdW5kLWNvbG9yKTtcbiAgICAgICAgcGFkZGluZzogMC41ZW07XG4gICAgICAgIGJvcmRlcjogdmFyKC0tc3RhdGJsb2NrLWJvcmRlci1zaXplKSB2YXIoLS1zdGF0YmxvY2stYm9yZGVyLWNvbG9yKSBzb2xpZDtcbiAgICAgICAgYm94LXNoYWRvdzogdmFyKC0tc3RhdGJsb2NrLWJveC1zaGFkb3cteC1vZmZzZXQpXG4gICAgICAgICAgICB2YXIoLS1zdGF0YmxvY2stYm94LXNoYWRvdy15LW9mZnNldClcbiAgICAgICAgICAgIHZhcigtLXN0YXRibG9jay1ib3gtc2hhZG93LWJsdXIpIHZhcigtLXN0YXRibG9jay1ib3gtc2hhZG93LWNvbG9yKTtcbiAgICAgICAgbWFyZ2luLWxlZnQ6IDJweDtcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiAycHg7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGdhcDogMXJlbTtcbiAgICB9XG4gICAgLnN0YXRibG9jay1jb250ZW50ID4gOmdsb2JhbCguY29sdW1uKSB7XG4gICAgICAgIHdpZHRoOiB2YXIoLS1zdGF0YmxvY2stY29sdW1uLXdpZHRoKTtcbiAgICB9XG5cbiAgICBAbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA0MDBweCkge1xuICAgICAgICAuc3RhdGJsb2NrLWNvbnRlbnQgPiA6Z2xvYmFsKC5jb2x1bW4pIHtcbiAgICAgICAgICAgIHdpZHRoOiA3NXZ3O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgOmdsb2JhbCguc3RhdGJsb2NrLWl0ZW0tY29udGFpbmVyKSB7XG4gICAgICAgIG1hcmdpbi1ib3R0b206IDAuMjVyZW07XG4gICAgfVxuXG4gICAgOmdsb2JhbCguc3RhdGJsb2NrLWRldGFjaGVkKSB7XG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgdG9wOiAtOTk5OXB4O1xuICAgIH1cblxuICAgIDpnbG9iYWwoLnN0YXRibG9jay1pdGVtLWlubGluZSkge1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gICAgfVxuPC9zdHlsZT5cbiIsICJpbXBvcnQge1xuICAgIEFwcCxcbiAgICBkZWJvdW5jZSxcbiAgICBNb2RhbCxcbiAgICBub3JtYWxpemVQYXRoLFxuICAgIE5vdGljZSxcbiAgICBQbHVnaW5TZXR0aW5nVGFiLFxuICAgIHByZXBhcmVTaW1wbGVTZWFyY2gsXG4gICAgU2V0dGluZyxcbiAgICBUZXh0Q29tcG9uZW50LFxuICAgIFRGb2xkZXJcbn0gZnJvbSBcIm9ic2lkaWFuXCI7XG5cbmltcG9ydCB0eXBlIFN0YXRCbG9ja1BsdWdpbiBmcm9tIFwic3JjL21haW5cIjtcbmltcG9ydCBTdGF0YmxvY2tDcmVhdG9yIGZyb20gXCIuL1N0YXRibG9ja0NyZWF0b3Iuc3ZlbHRlXCI7XG5cbmltcG9ydCB7IFZpZXdNb25zdGVyTW9kYWwgfSBmcm9tIFwic3JjL3NldHRpbmdzL3N1Z2dlc3RlclwiO1xuXG5pbXBvcnQgZmFzdENvcHkgZnJvbSBcImZhc3QtY29weVwiO1xuXG5pbXBvcnQgSW1wb3J0ZXIgZnJvbSBcInNyYy9pbXBvcnRlcnMvaW1wb3J0ZXJcIjtcbmltcG9ydCB7IEZvbGRlclN1Z2dlc3Rpb25Nb2RhbCB9IGZyb20gXCJzcmMvdXRpbC9mb2xkZXJcIjtcbmltcG9ydCB7IEVkaXRNb25zdGVyTW9kYWwgfSBmcm9tIFwiLi9tb2RhbFwiO1xuaW1wb3J0IHsgTGF5b3V0NWUgfSBmcm9tIFwic3JjL2xheW91dHMvYmFzaWM1ZVwiO1xuaW1wb3J0IHR5cGUgeyBMYXlvdXQgfSBmcm9tIFwic3JjL2xheW91dHMvdHlwZXNcIjtcbmltcG9ydCB7IERlZmF1bHRMYXlvdXRzIH0gZnJvbSBcInNyYy9sYXlvdXRzXCI7XG5pbXBvcnQgdHlwZSB7IE1vbnN0ZXIgfSBmcm9tIFwiQHR5cGVzXCI7XG5pbXBvcnQgeyBzdHJpbmdpZnkgfSBmcm9tIFwic3JjL3V0aWwvdXRpbFwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTdGF0YmxvY2tTZXR0aW5nVGFiIGV4dGVuZHMgUGx1Z2luU2V0dGluZ1RhYiB7XG4gICAgaW1wb3J0ZXI6IEltcG9ydGVyO1xuICAgIHJlc3VsdHM6IE1vbnN0ZXJbXSA9IFtdO1xuICAgIGZpbHRlcjogU2V0dGluZztcbiAgICBjb25zdHJ1Y3RvcihhcHA6IEFwcCwgcHJpdmF0ZSBwbHVnaW46IFN0YXRCbG9ja1BsdWdpbikge1xuICAgICAgICBzdXBlcihhcHAsIHBsdWdpbik7XG4gICAgICAgIHRoaXMuaW1wb3J0ZXIgPSBuZXcgSW1wb3J0ZXIodGhpcy5wbHVnaW4pO1xuICAgIH1cblxuICAgIGFzeW5jIGRpc3BsYXkoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBsZXQgeyBjb250YWluZXJFbCB9ID0gdGhpcztcblxuICAgICAgICAgICAgY29udGFpbmVyRWwuZW1wdHkoKTtcblxuICAgICAgICAgICAgY29udGFpbmVyRWwuYWRkQ2xhc3MoXCJzdGF0YmxvY2stc2V0dGluZ3NcIik7XG5cbiAgICAgICAgICAgIGNvbnRhaW5lckVsLmNyZWF0ZUVsKFwiaDJcIiwgeyB0ZXh0OiBcIlRUUlBHIFN0YXRibG9jayBTZXR0aW5nc1wiIH0pO1xuXG4gICAgICAgICAgICB0aGlzLmdlbmVyYXRlVG9wU2V0dGluZ3MoY29udGFpbmVyRWwuY3JlYXRlRGl2KCkpO1xuICAgICAgICAgICAgdGhpcy5nZW5lcmF0ZVBhcnNlU2V0dGluZ3MoY29udGFpbmVyRWwuY3JlYXRlRGl2KCkpO1xuXG4gICAgICAgICAgICB0aGlzLmdlbmVyYXRlTGF5b3V0cyhjb250YWluZXJFbC5jcmVhdGVEaXYoKSk7XG5cbiAgICAgICAgICAgIHRoaXMuZ2VuZXJhdGVJbXBvcnRzKGNvbnRhaW5lckVsLmNyZWF0ZURpdigpKTtcblxuICAgICAgICAgICAgdGhpcy5nZW5lcmF0ZU1vbnN0ZXJzKGNvbnRhaW5lckVsLmNyZWF0ZURpdigpKTtcblxuICAgICAgICAgICAgY29uc3QgZGl2ID0gY29udGFpbmVyRWwuY3JlYXRlRGl2KFwiY29mZmVlXCIpO1xuICAgICAgICAgICAgZGl2LmNyZWF0ZUVsKFwiYVwiLCB7XG4gICAgICAgICAgICAgICAgaHJlZjogXCJodHRwczovL3d3dy5idXltZWFjb2ZmZWUuY29tL3ZhbGVudGluZTE5NVwiXG4gICAgICAgICAgICB9KS5jcmVhdGVFbChcImltZ1wiLCB7XG4gICAgICAgICAgICAgICAgYXR0cjoge1xuICAgICAgICAgICAgICAgICAgICBzcmM6IFwiaHR0cHM6Ly9pbWcuYnV5bWVhY29mZmVlLmNvbS9idXR0b24tYXBpLz90ZXh0PUJ1eSBtZSBhIGNvZmZlZSZlbW9qaT1cdTI2MTUmc2x1Zz12YWxlbnRpbmUxOTUmYnV0dG9uX2NvbG91cj1lM2U3ZWYmZm9udF9jb2xvdXI9MjYyNjI2JmZvbnRfZmFtaWx5PUludGVyJm91dGxpbmVfY29sb3VyPTI2MjYyNiZjb2ZmZWVfY29sb3VyPWZmMDAwMFwiXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICAgICAgICBuZXcgTm90aWNlKFxuICAgICAgICAgICAgICAgIFwiVGhlcmUgd2FzIGFuIGVycm9yIGRpc3BsYXlpbmcgdGhlIHNldHRpbmdzIHRhYiBmb3IgNWUgU3RhdGJsb2Nrcy5cIlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdlbmVyYXRlVG9wU2V0dGluZ3MoY29udGFpbmVyOiBIVE1MRGl2RWxlbWVudCkge1xuICAgICAgICBjb250YWluZXIuZW1wdHkoKTtcbiAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyKS5zZXRIZWFkaW5nKCkuc2V0TmFtZShcIkdlbmVyYWwgU2V0dGluZ3NcIik7XG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lcilcbiAgICAgICAgICAgIC5zZXROYW1lKFwiRW5hYmxlIEV4cG9ydCB0byBQTkdcIilcbiAgICAgICAgICAgIC5zZXREZXNjKFxuICAgICAgICAgICAgICAgIGNyZWF0ZUZyYWdtZW50KChlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGUuY3JlYXRlU3Bhbih7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiAnQWRkIFwiRXhwb3J0IHRvIFBOR1wiIGJ1dHRvbiBieSBkZWZhdWx0LiBVc2UgJ1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgZS5jcmVhdGVFbChcImNvZGVcIiwgeyB0ZXh0OiBcImV4cG9ydDogZmFsc2VcIiB9KTtcbiAgICAgICAgICAgICAgICAgICAgZS5jcmVhdGVTcGFuKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IFwiIHRvIGRpc2FibGUgcGVyLXN0YXRibG9jay5cIlxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgLnNldERpc2FibGVkKCF0aGlzLnBsdWdpbi5jYW5Vc2VEaWNlUm9sbGVyKVxuICAgICAgICAgICAgLmFkZFRvZ2dsZSgodCkgPT5cbiAgICAgICAgICAgICAgICB0LnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLnVzZURpY2UpLm9uQ2hhbmdlKGFzeW5jICh2KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLnVzZURpY2UgPSB2O1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKTtcbiAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyKVxuICAgICAgICAgICAgLnNldE5hbWUoXCJJbnRlZ3JhdGUgRGljZSBSb2xsZXJcIilcbiAgICAgICAgICAgIC5zZXREZXNjKFxuICAgICAgICAgICAgICAgIGNyZWF0ZUZyYWdtZW50KChlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnBsdWdpbi5jYW5Vc2VEaWNlUm9sbGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlLmNyZWF0ZVNwYW4oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IFwiQWRkIERpY2UgUm9sbGVyIGRpY2UgdG8gc3RhdGJsb2NrcyBieSBkZWZhdWx0LiBVc2UgXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgZS5jcmVhdGVFbChcImNvZGVcIiwgeyB0ZXh0OiBcImRpY2U6IGZhbHNlXCIgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBlLmNyZWF0ZVNwYW4oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IFwiIHRvIGRpc2FibGUgcGVyLXN0YXRibG9jay5cIlxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlLmNyZWF0ZVNwYW4oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IFwiVGhpcyBzZXR0aW5nIGlzIG9ubHkgdXNhYmxlIHdpdGggdGhlIERpY2UgUm9sbGVyIHBsdWdpbiBlbmFibGVkLlwiXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAuc2V0RGlzYWJsZWQoIXRoaXMucGx1Z2luLmNhblVzZURpY2VSb2xsZXIpXG4gICAgICAgICAgICAuYWRkVG9nZ2xlKCh0KSA9PlxuICAgICAgICAgICAgICAgIHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MudXNlRGljZSkub25DaGFuZ2UoYXN5bmMgKHYpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MudXNlRGljZSA9IHY7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApO1xuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXIpXG4gICAgICAgICAgICAuc2V0TmFtZShcIlJlbmRlciBEaWNlIFJvbGxzXCIpXG4gICAgICAgICAgICAuc2V0RGVzYyhcbiAgICAgICAgICAgICAgICBjcmVhdGVGcmFnbWVudCgoZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5wbHVnaW4uY2FuVXNlRGljZVJvbGxlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZS5jcmVhdGVTcGFuKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBcIlJvbGwgZ3JhcGhpY2FsIGRpY2UgaW5zaWRlIHN0YXRibG9ja3MgYnkgZGVmYXVsdC4gVXNlIFwiXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGUuY3JlYXRlRWwoXCJjb2RlXCIsIHsgdGV4dDogXCJyZW5kZXI6IGZhbHNlXCIgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBlLmNyZWF0ZVNwYW4oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IFwiIHRvIGRpc2FibGUgcGVyLXN0YXRibG9jay5cIlxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlLmNyZWF0ZVNwYW4oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IFwiVGhpcyBzZXR0aW5nIGlzIG9ubHkgdXNhYmxlIHdpdGggdGhlIERpY2UgUm9sbGVyIHBsdWdpbiBlbmFibGVkLlwiXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAuc2V0RGlzYWJsZWQoIXRoaXMucGx1Z2luLmNhblVzZURpY2VSb2xsZXIpXG4gICAgICAgICAgICAuYWRkVG9nZ2xlKCh0KSA9PlxuICAgICAgICAgICAgICAgIHRcbiAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLnJlbmRlckRpY2UpXG4gICAgICAgICAgICAgICAgICAgIC5vbkNoYW5nZShhc3luYyAodikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MucmVuZGVyRGljZSA9IHY7XG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICk7XG4gICAgICAgIG5ldyBTZXR0aW5nKGNvbnRhaW5lcilcbiAgICAgICAgICAgIC5zZXROYW1lKFwiVHJ5IHRvIFJlbmRlciBXaWtpbGlua3NcIilcbiAgICAgICAgICAgIC5zZXREZXNjKFxuICAgICAgICAgICAgICAgIGNyZWF0ZUZyYWdtZW50KChlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGUuY3JlYXRlU3Bhbih7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBcIlRoZSBwbHVnaW4gd2lsbCBhdHRlbXB0IHRvIGRldGVjdCB3aWtpbGlua3MgaW5zaWRlIFN0YXRibG9ja3MuXCJcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGUuY3JlYXRlRWwoXCJiclwiKTtcbiAgICAgICAgICAgICAgICAgICAgZS5jcmVhdGVFbChcInN0cm9uZ1wiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBcIlBsZWFzZSBub3RlOiB0aGVzZSBsaW5rcyB3aWxsIG5vdCBiZSBhZGRlZCB0byB0aGUgZ3JhcGguXCJcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIC5hZGRUb2dnbGUoKHQpID0+XG4gICAgICAgICAgICAgICAgdFxuICAgICAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MudHJ5VG9SZW5kZXJMaW5rcylcbiAgICAgICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy50cnlUb1JlbmRlckxpbmtzID0gdjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKTtcbiAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyKVxuICAgICAgICAgICAgLnNldE5hbWUoXCJEaXNhYmxlIDVlIFNSRFwiKVxuICAgICAgICAgICAgLnNldERlc2MoXG4gICAgICAgICAgICAgICAgY3JlYXRlRnJhZ21lbnQoKGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZS5jcmVhdGVTcGFuKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IFwiRGlzYWJsZSB0aGUgRHVuZ2VvbnMgJiBEcmFnb25zIDV0aCBFZGl0aW9uIFN5c3RlbSBSZWZlcmVuY2UgRG9jdW1lbnQgbW9uc3RlcnMuXCJcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIC5hZGRUb2dnbGUoKHQpID0+XG4gICAgICAgICAgICAgICAgdFxuICAgICAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuZGlzYWJsZVNSRClcbiAgICAgICAgICAgICAgICAgICAgLm9uQ2hhbmdlKGFzeW5jICh2KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5kaXNhYmxlU1JEID0gdjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKTtcbiAgICB9XG4gICAgZ2VuZXJhdGVQYXJzZVNldHRpbmdzKGNvbnRhaW5lckVsOiBIVE1MRGl2RWxlbWVudCkge1xuICAgICAgICBjb250YWluZXJFbC5lbXB0eSgpO1xuICAgICAgICBjb25zdCBhZGRpdGlvbmFsQ29udGFpbmVyID0gY29udGFpbmVyRWwuY3JlYXRlRGl2KFxuICAgICAgICAgICAgXCJzdGF0YmxvY2stYWRkaXRpb25hbC1jb250YWluZXJcIlxuICAgICAgICApO1xuICAgICAgICBuZXcgU2V0dGluZyhhZGRpdGlvbmFsQ29udGFpbmVyKS5zZXRIZWFkaW5nKCkuc2V0TmFtZShcIk5vdGUgUGFyc2luZ1wiKTtcbiAgICAgICAgbmV3IFNldHRpbmcoYWRkaXRpb25hbENvbnRhaW5lcilcbiAgICAgICAgICAgIC5zZXROYW1lKFwiUGFyc2UgRnJvbnRtYXR0ZXIgZm9yIENyZWF0dXJlc1wiKVxuICAgICAgICAgICAgLnNldERlc2MoXG4gICAgICAgICAgICAgICAgY3JlYXRlRnJhZ21lbnQoKGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZS5jcmVhdGVTcGFuKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IFwiVGhlIHBsdWdpbiB3aWxsIHdhdGNoIHRoZSB2YXVsdCBmb3IgY3JlYXR1cmVzIGRlZmluZWQgaW4gbm90ZSBmcm9udG1hdHRlci5cIlxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgZS5jcmVhdGVFbChcImJyXCIpO1xuICAgICAgICAgICAgICAgICAgICBlLmNyZWF0ZUVsKFwiYnJcIik7XG4gICAgICAgICAgICAgICAgICAgIGUuY3JlYXRlU3Bhbih7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBgVGhlIFwiUGFyc2UgRnJvbnRtYXR0ZXIgZm9yIENyZWF0dXJlc1wiIGNvbW1hbmQgY2FuIGFsc28gYmUgdXNlZC5gXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAuYWRkVG9nZ2xlKCh0KSA9PiB7XG4gICAgICAgICAgICAgICAgdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5hdXRvUGFyc2UpLm9uQ2hhbmdlKFxuICAgICAgICAgICAgICAgICAgICBhc3luYyAodikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MuYXV0b1BhcnNlID0gdjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4ud2F0Y2hlci5zdGFydCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIG5ldyBTZXR0aW5nKGFkZGl0aW9uYWxDb250YWluZXIpXG4gICAgICAgICAgICAuc2V0TmFtZShcIkVuYWJsZSBEZWJ1ZyBNZXNzYWdlc1wiKVxuICAgICAgICAgICAgLnNldERlc2MoXG4gICAgICAgICAgICAgICAgY3JlYXRlRnJhZ21lbnQoKGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZS5jcmVhdGVTcGFuKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IFwiRGVidWcgbWVzc2FnZXMgd2lsbCBiZSBkaXNwbGF5ZWQgYnkgdGhlIGZpbGUgcGFyc2VyLlwiXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAuYWRkVG9nZ2xlKCh0KSA9PlxuICAgICAgICAgICAgICAgIHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuZGVidWcpLm9uQ2hhbmdlKGFzeW5jICh2KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmRlYnVnID0gdjtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4ud2F0Y2hlci5zZXREZWJ1ZygpO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKTtcbiAgICAgICAgbGV0IHBhdGg6IHN0cmluZztcbiAgICAgICAgbmV3IFNldHRpbmcoYWRkaXRpb25hbENvbnRhaW5lcilcbiAgICAgICAgICAgIC5zZXROYW1lKFwiQmVzdGlhcnkgRm9sZGVyXCIpXG4gICAgICAgICAgICAuc2V0RGVzYyhcbiAgICAgICAgICAgICAgICBcIlRoZSBwbHVnaW4gd2lsbCBvbmx5IHBhcnNlIG5vdGVzIGluc2lkZSB0aGVzZSBmb2xkZXJzIGFuZCB0aGVpciBjaGlsZHJlbi5cIlxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgLmFkZFRleHQoYXN5bmMgKHRleHQpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgZm9sZGVycyA9IHRoaXMuYXBwLnZhdWx0XG4gICAgICAgICAgICAgICAgICAgIC5nZXRBbGxMb2FkZWRGaWxlcygpXG4gICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoXG4gICAgICAgICAgICAgICAgICAgICAgICAoZikgPT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmIGluc3RhbmNlb2YgVEZvbGRlciAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICF0aGlzLnBsdWdpbi5zZXR0aW5ncy5wYXRocy5pbmNsdWRlcyhmLnBhdGgpXG4gICAgICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICB0ZXh0LnNldFBsYWNlaG9sZGVyKFwiL1wiKTtcbiAgICAgICAgICAgICAgICBjb25zdCBtb2RhbCA9IG5ldyBGb2xkZXJTdWdnZXN0aW9uTW9kYWwodGhpcy5hcHAsIHRleHQsIFtcbiAgICAgICAgICAgICAgICAgICAgLi4uKGZvbGRlcnMgYXMgVEZvbGRlcltdKVxuICAgICAgICAgICAgICAgIF0pO1xuXG4gICAgICAgICAgICAgICAgbW9kYWwub25DbG9zZSA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdiA9IHRleHQuaW5wdXRFbC52YWx1ZT8udHJpbSgpXG4gICAgICAgICAgICAgICAgICAgICAgICA/IHRleHQuaW5wdXRFbC52YWx1ZS50cmltKClcbiAgICAgICAgICAgICAgICAgICAgICAgIDogXCIvXCI7XG4gICAgICAgICAgICAgICAgICAgIHBhdGggPSBub3JtYWxpemVQYXRoKHYpO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICB0ZXh0LmlucHV0RWwub25ibHVyID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB2ID0gdGV4dC5pbnB1dEVsLnZhbHVlPy50cmltKClcbiAgICAgICAgICAgICAgICAgICAgICAgID8gdGV4dC5pbnB1dEVsLnZhbHVlLnRyaW0oKVxuICAgICAgICAgICAgICAgICAgICAgICAgOiBcIi9cIjtcbiAgICAgICAgICAgICAgICAgICAgcGF0aCA9IG5vcm1hbGl6ZVBhdGgodik7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuYWRkRXh0cmFCdXR0b24oKGIpID0+IHtcbiAgICAgICAgICAgICAgICBiLnNldEljb24oXCJwbHVzLXdpdGgtY2lyY2xlXCIpLm9uQ2xpY2soYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXBhdGggfHwgIXBhdGgubGVuZ3RoKSByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLnBhdGhzLnB1c2gobm9ybWFsaXplUGF0aChwYXRoKSk7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi53YXRjaGVyLnJlcGFyc2VWYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmdlbmVyYXRlUGFyc2VTZXR0aW5ncyhjb250YWluZXJFbCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCBwYXRocyA9IGFkZGl0aW9uYWxDb250YWluZXIuY3JlYXRlRGl2KFwiYWRkaXRpb25hbFwiKTtcbiAgICAgICAgZm9yIChjb25zdCBwYXRoIG9mIHRoaXMucGx1Z2luLnNldHRpbmdzLnBhdGhzKSB7XG4gICAgICAgICAgICBuZXcgU2V0dGluZyhwYXRocykuc2V0TmFtZShwYXRoKS5hZGRFeHRyYUJ1dHRvbigoYikgPT5cbiAgICAgICAgICAgICAgICBiLnNldEljb24oXCJ0cmFzaFwiKS5vbkNsaWNrKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MucGF0aHMgPVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MucGF0aHMuZmlsdGVyKChwKSA9PiBwICE9IHBhdGgpO1xuXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi53YXRjaGVyLnJlcGFyc2VWYXVsdCgpO1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmdlbmVyYXRlUGFyc2VTZXR0aW5ncyhjb250YWluZXJFbCk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2VuZXJhdGVMYXlvdXRzKGNvbnRhaW5lckVsOiBIVE1MRGl2RWxlbWVudCkge1xuICAgICAgICBjb250YWluZXJFbC5lbXB0eSgpO1xuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbCkuc2V0SGVhZGluZygpLnNldE5hbWUoXCJMYXlvdXRzXCIpO1xuXG4gICAgICAgIGNvbnN0IHN0YXRibG9ja0NyZWF0b3JDb250YWluZXIgPSBjb250YWluZXJFbC5jcmVhdGVEaXYoXG4gICAgICAgICAgICBcInN0YXRibG9jay1hZGRpdGlvbmFsLWNvbnRhaW5lclwiXG4gICAgICAgICk7XG4gICAgICAgIHN0YXRibG9ja0NyZWF0b3JDb250YWluZXJcbiAgICAgICAgICAgIC5jcmVhdGVEaXYoXCJzZXR0aW5nLWl0ZW1cIilcbiAgICAgICAgICAgIC5jcmVhdGVEaXYoKVxuICAgICAgICAgICAgLmFwcGVuZENoaWxkKFxuICAgICAgICAgICAgICAgIGNyZWF0ZUZyYWdtZW50KChlbCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBlbC5jcmVhdGVTcGFuKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IFwiTmV3IHN0YXRibG9jayBsYXlvdXRzIGNhbiBiZSBjcmVhdGVkIGFuZCBtYW5hZ2VkIGhlcmUuIEEgc3BlY2lmaWMgc3RhdGJsb2NrIGNhbiBiZSB1c2VkIGZvciBhIGNyZWF0dXJlIHVzaW5nIHRoZSBcIlxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgZWwuY3JlYXRlRWwoXCJjb2RlXCIsIHsgdGV4dDogXCJzdGF0YmxvY2tcIiB9KTtcbiAgICAgICAgICAgICAgICAgICAgZWwuY3JlYXRlU3Bhbih7IHRleHQ6IFwiIHBhcmFtZXRlci5cIiB9KTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKTtcbiAgICAgICAgY29uc3QgaW1wb3J0RmlsZSA9IG5ldyBTZXR0aW5nKHN0YXRibG9ja0NyZWF0b3JDb250YWluZXIpXG4gICAgICAgICAgICAuc2V0TmFtZShcIkltcG9ydCBGcm9tIEpTT05cIilcbiAgICAgICAgICAgIC5zZXREZXNjKFwiSW1wb3J0IGEgY3VzdG9tIGxheW91dCBmcm9tIGEgSlNPTiBmaWxlLlwiKTtcbiAgICAgICAgY29uc3QgaW5wdXRGaWxlID0gY3JlYXRlRWwoXCJpbnB1dFwiLCB7XG4gICAgICAgICAgICBhdHRyOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJmaWxlXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJsYXlvdXRcIixcbiAgICAgICAgICAgICAgICBhY2NlcHQ6IFwiLmpzb25cIixcbiAgICAgICAgICAgICAgICBtdWx0aXBsZTogdHJ1ZVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgaW5wdXRGaWxlLm9uY2hhbmdlID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgeyBmaWxlcyB9ID0gaW5wdXRGaWxlO1xuICAgICAgICAgICAgaWYgKCFmaWxlcy5sZW5ndGgpIHJldHVybjtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBmaWxlcyB9ID0gaW5wdXRGaWxlO1xuICAgICAgICAgICAgICAgIGlmICghZmlsZXMubGVuZ3RoKSByZXR1cm47XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBmaWxlIG9mIEFycmF5LmZyb20oZmlsZXMpKSB7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IG5ldyBQcm9taXNlPHZvaWQ+KChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRlci5vbmxvYWQgPSAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBsYXlvdXQgPSBKU09OLnBhcnNlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQudGFyZ2V0LnJlc3VsdCBhcyBzdHJpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFsYXlvdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgRXJyb3IoXCJJbnZhbGlkIGxheW91dCBpbXBvcnRlZFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWxheW91dD8ubmFtZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJJbnZhbGlkIGxheW91dCBpbXBvcnRlZDogbGF5b3V0IGRvZXMgbm90IGhhdmUgYSBuYW1lXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbGF5b3V0Py5ibG9ja3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiSW52YWxpZCBsYXlvdXQgaW1wb3J0ZWQ6IG5vIGJsb2NrcyBkZWZpbmVkIGluIGxheW91dC5cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MubGF5b3V0cy5wdXNoKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5nZXREdXBsaWNhdGUobGF5b3V0KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRlci5yZWFkQXNUZXh0KGZpbGUpO1xuICAgICAgICAgICAgICAgICAgICB9KS5jYXRjaCgoZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IE5vdGljZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBgVGhlcmUgd2FzIGFuIGVycm9yIGltcG9ydGluZyB0aGUgbGF5b3V0OiBcXG5cXG4ke2V9YFxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmJ1aWxkQ3VzdG9tTGF5b3V0cyhsYXlvdXRDb250YWluZXIpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgICAgfTtcblxuICAgICAgICBpbXBvcnRGaWxlLmFkZEJ1dHRvbigoYikgPT4ge1xuICAgICAgICAgICAgYi5zZXRJY29uKFwidXBsb2FkXCIpO1xuICAgICAgICAgICAgYi5idXR0b25FbC5hZGRDbGFzcyhcInN0YXRibG9jay1maWxlLXVwbG9hZFwiKTtcbiAgICAgICAgICAgIGIuYnV0dG9uRWwuYXBwZW5kQ2hpbGQoaW5wdXRGaWxlKTtcbiAgICAgICAgICAgIGIub25DbGljaygoKSA9PiBpbnB1dEZpbGUuY2xpY2soKSk7XG4gICAgICAgIH0pO1xuICAgICAgICBuZXcgU2V0dGluZyhzdGF0YmxvY2tDcmVhdG9yQ29udGFpbmVyKVxuICAgICAgICAgICAgLnNldE5hbWUoXCJBZGQgTmV3IExheW91dFwiKVxuICAgICAgICAgICAgLmFkZEJ1dHRvbigoYikgPT5cbiAgICAgICAgICAgICAgICBiXG4gICAgICAgICAgICAgICAgICAgIC5zZXRJY29uKFwicGx1cy13aXRoLWNpcmNsZVwiKVxuICAgICAgICAgICAgICAgICAgICAuc2V0VG9vbHRpcChcIkFkZCBOZXcgU3RhdGJsb2NrXCIpXG4gICAgICAgICAgICAgICAgICAgIC5vbkNsaWNrKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1vZGFsID0gbmV3IENyZWF0ZVN0YXRibG9ja01vZGFsKHRoaXMucGx1Z2luKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGFsLm9uQ2xvc2UgPSBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFtb2RhbC5zYXZlZCkgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmxheW91dHMucHVzaChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5nZXREdXBsaWNhdGUobW9kYWwubGF5b3V0KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5idWlsZEN1c3RvbUxheW91dHMobGF5b3V0Q29udGFpbmVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RhbC5vcGVuKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApO1xuXG4gICAgICAgIGNvbnN0IHN0YXRibG9ja0FkZGl0aW9uYWwgPVxuICAgICAgICAgICAgc3RhdGJsb2NrQ3JlYXRvckNvbnRhaW5lci5jcmVhdGVEaXYoXCJhZGRpdGlvbmFsXCIpO1xuICAgICAgICBuZXcgU2V0dGluZyhzdGF0YmxvY2tBZGRpdGlvbmFsKVxuICAgICAgICAgICAgLnNldE5hbWUoXCJEZWZhdWx0IExheW91dFwiKVxuICAgICAgICAgICAgLnNldERlc2MoXG4gICAgICAgICAgICAgICAgXCJDaGFuZ2UgdGhlIGRlZmF1bHQgc3RhdGJsb2NrIGxheW91dCB1c2VkLCBpZiBub3Qgc3BlY2lmaWVkLlwiXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAuYWRkRHJvcGRvd24oYXN5bmMgKGQpID0+IHtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGxheW91dCBvZiBEZWZhdWx0TGF5b3V0cykge1xuICAgICAgICAgICAgICAgICAgICBkLmFkZE9wdGlvbihsYXlvdXQubmFtZSwgbGF5b3V0Lm5hbWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGxheW91dCBvZiB0aGlzLnBsdWdpbi5zZXR0aW5ncy5sYXlvdXRzKSB7XG4gICAgICAgICAgICAgICAgICAgIGQuYWRkT3B0aW9uKGxheW91dC5uYW1lLCBsYXlvdXQubmFtZSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAhdGhpcy5wbHVnaW4uc2V0dGluZ3MuZGVmYXVsdCB8fFxuICAgICAgICAgICAgICAgICAgICAhdGhpcy5wbHVnaW4uc2V0dGluZ3MubGF5b3V0cy5maW5kKFxuICAgICAgICAgICAgICAgICAgICAgICAgKHsgbmFtZSB9KSA9PiBuYW1lID09IHRoaXMucGx1Z2luLnNldHRpbmdzLmRlZmF1bHRcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5kZWZhdWx0ID0gTGF5b3V0NWUubmFtZTtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5kZWZhdWx0ID8/IExheW91dDVlLm5hbWUpO1xuXG4gICAgICAgICAgICAgICAgZC5vbkNoYW5nZShhc3luYyAodikgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5kZWZhdWx0ID0gdjtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgbmV3IFNldHRpbmcoc3RhdGJsb2NrQWRkaXRpb25hbClcbiAgICAgICAgICAgIC5zZXROYW1lKFwiU2hvdyBBZHZhbmNlZCBPcHRpb25zXCIpXG4gICAgICAgICAgICAuc2V0RGVzYyhcIlNob3cgYWR2YW5jZWQgb3B0aW9ucyB3aGVuIGVkaXRpbmcgbGF5b3V0IGJsb2Nrcy5cIilcbiAgICAgICAgICAgIC5hZGRUb2dnbGUoKHQpID0+XG4gICAgICAgICAgICAgICAgdFxuICAgICAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3Muc2hvd0FkdmFuY2VkKVxuICAgICAgICAgICAgICAgICAgICAub25DaGFuZ2UoYXN5bmMgKHYpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLnNob3dBZHZhbmNlZCA9IHY7XG4gICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgY29uc3QgbGF5b3V0Q29udGFpbmVyID1cbiAgICAgICAgICAgIHN0YXRibG9ja0NyZWF0b3JDb250YWluZXIuY3JlYXRlRGl2KFwiYWRkaXRpb25hbFwiKTtcblxuICAgICAgICB0aGlzLmJ1aWxkQ3VzdG9tTGF5b3V0cyhsYXlvdXRDb250YWluZXIpO1xuICAgIH1cbiAgICBnZXREdXBsaWNhdGUobGF5b3V0OiBMYXlvdXQpIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgIXRoaXMucGx1Z2luLnNldHRpbmdzLmxheW91dHMuZmluZCgobCkgPT4gbC5uYW1lID09IGxheW91dC5uYW1lKSAmJlxuICAgICAgICAgICAgbGF5b3V0Lm5hbWUgIT0gTGF5b3V0NWUubmFtZVxuICAgICAgICApXG4gICAgICAgICAgICByZXR1cm4gbGF5b3V0O1xuICAgICAgICBjb25zdCBuYW1lcyA9IFtcbiAgICAgICAgICAgIExheW91dDVlLm5hbWUsXG4gICAgICAgICAgICAuLi50aGlzLnBsdWdpbi5zZXR0aW5ncy5sYXlvdXRzXG4gICAgICAgICAgICAgICAgLmZpbHRlcigobCkgPT4gbC5uYW1lLmNvbnRhaW5zKGAke2xheW91dC5uYW1lfSBDb3B5YCkpXG4gICAgICAgICAgICAgICAgLm1hcCgobCkgPT4gbC5uYW1lKVxuICAgICAgICBdO1xuXG4gICAgICAgIGxldCB0ZW1wID0gYCR7bGF5b3V0Lm5hbWV9IENvcHlgO1xuXG4gICAgICAgIGxldCBuYW1lID0gdGVtcDtcbiAgICAgICAgbGV0IGluZGV4ID0gMTtcbiAgICAgICAgd2hpbGUgKG5hbWVzLmluY2x1ZGVzKG5hbWUpKSB7XG4gICAgICAgICAgICBuYW1lID0gYCR7dGVtcH0gKCR7aW5kZXh9KWA7XG4gICAgICAgICAgICBpbmRleCsrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBibG9ja3M6IGZhc3RDb3B5KGxheW91dC5ibG9ja3MpLFxuICAgICAgICAgICAgbmFtZTogbmFtZVxuICAgICAgICB9O1xuICAgIH1cbiAgICBidWlsZEN1c3RvbUxheW91dHMobGF5b3V0Q29udGFpbmVyOiBIVE1MRGl2RWxlbWVudCkge1xuICAgICAgICBsYXlvdXRDb250YWluZXIuZW1wdHkoKTtcblxuICAgICAgICBmb3IgKGNvbnN0IGxheW91dCBvZiBEZWZhdWx0TGF5b3V0cykge1xuICAgICAgICAgICAgbmV3IFNldHRpbmcobGF5b3V0Q29udGFpbmVyKVxuICAgICAgICAgICAgICAgIC5zZXROYW1lKGxheW91dC5uYW1lKVxuICAgICAgICAgICAgICAgIC5hZGRFeHRyYUJ1dHRvbigoYikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBiLnNldEljb24oXCJkdXBsaWNhdGUtZ2x5cGhcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRUb29sdGlwKFwiQ3JlYXRlIENvcHlcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5vbkNsaWNrKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5sYXlvdXRzLnB1c2goXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ2V0RHVwbGljYXRlKGxheW91dClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYnVpbGRDdXN0b21MYXlvdXRzKGxheW91dENvbnRhaW5lcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoY29uc3QgbGF5b3V0IG9mIHRoaXMucGx1Z2luLnNldHRpbmdzLmxheW91dHMpIHtcbiAgICAgICAgICAgIG5ldyBTZXR0aW5nKGxheW91dENvbnRhaW5lcilcbiAgICAgICAgICAgICAgICAuc2V0TmFtZShsYXlvdXQubmFtZSlcbiAgICAgICAgICAgICAgICAuYWRkRXh0cmFCdXR0b24oKGIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgYi5zZXRJY29uKFwicGVuY2lsXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2V0VG9vbHRpcChcIkVkaXRcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5vbkNsaWNrKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtb2RhbCA9IG5ldyBDcmVhdGVTdGF0YmxvY2tNb2RhbChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheW91dFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kYWwub25DbG9zZSA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFtb2RhbC5zYXZlZCkgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5sYXlvdXRzLnNwbGljZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLnNldHRpbmdzLmxheW91dHMuaW5kZXhPZihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXlvdXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kYWwubGF5b3V0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJ1aWxkQ3VzdG9tTGF5b3V0cyhsYXlvdXRDb250YWluZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kYWwub3BlbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuYWRkRXh0cmFCdXR0b24oKGIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgYi5zZXRJY29uKFwiZHVwbGljYXRlLWdseXBoXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2V0VG9vbHRpcChcIkNyZWF0ZSBDb3B5XCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAub25DbGljayhhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MubGF5b3V0cy5wdXNoKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdldER1cGxpY2F0ZShsYXlvdXQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJ1aWxkQ3VzdG9tTGF5b3V0cyhsYXlvdXRDb250YWluZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuYWRkRXh0cmFCdXR0b24oKGIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgYi5zZXRJY29uKFwiaW1wb3J0LWdseXBoXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2V0VG9vbHRpcChcIkV4cG9ydCBhcyBKU09OXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAub25DbGljaygoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbGluayA9IGNyZWF0ZUVsKFwiYVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBmaWxlID0gbmV3IEJsb2IoW0pTT04uc3RyaW5naWZ5KGxheW91dCldLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwianNvblwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdXJsID0gVVJMLmNyZWF0ZU9iamVjdFVSTChmaWxlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5rLmhyZWYgPSB1cmw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluay5kb3dubG9hZCA9IGAke2xheW91dC5uYW1lfS5qc29uYDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5rLmNsaWNrKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgVVJMLnJldm9rZU9iamVjdFVSTCh1cmwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgICAgIC5hZGRFeHRyYUJ1dHRvbigoYikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBiLnNldEljb24oXCJ0cmFzaFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnNldFRvb2x0aXAoXCJEZWxldGVcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5vbkNsaWNrKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zZXR0aW5ncy5sYXlvdXRzID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MubGF5b3V0cy5maWx0ZXIoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAobCkgPT4gbC5uYW1lICE9PSBsYXlvdXQubmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5idWlsZEN1c3RvbUxheW91dHMobGF5b3V0Q29udGFpbmVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2VuZXJhdGVJbXBvcnRzKGNvbnRhaW5lckVsOiBIVE1MRGl2RWxlbWVudCkge1xuICAgICAgICBjb250YWluZXJFbC5lbXB0eSgpO1xuICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXJFbClcbiAgICAgICAgICAgIC5zZXRIZWFkaW5nKClcbiAgICAgICAgICAgIC5zZXROYW1lKFwiSW1wb3J0IEhvbWVicmV3IENyZWF0dXJlc1wiKTtcbiAgICAgICAgY29uc3QgaW1wb3J0U2V0dGluZ3NDb250YWluZXIgPSBjb250YWluZXJFbC5jcmVhdGVEaXYoXG4gICAgICAgICAgICBcInN0YXRibG9jay1hZGRpdGlvbmFsLWNvbnRhaW5lclwiXG4gICAgICAgICk7XG5cbiAgICAgICAgbmV3IFNldHRpbmcoaW1wb3J0U2V0dGluZ3NDb250YWluZXIpLnNldERlc2MoXG4gICAgICAgICAgICBcIkltcG9ydCBjcmVhdHVyZXMgZnJvbSBjcmVhdHVyZSBmaWxlcy4gTW9uc3RlcnMgYXJlIHN0b3JlZCBieSBuYW1lLCBzbyBvbmx5IHRoZSBsYXN0IGNyZWF0dXJlIGJ5IHRoYXQgbmFtZSB3aWxsIGJlIHNhdmVkLiBUaGlzIGlzIGRlc3RydWN0aXZlIC0gYW55IHNhdmVkIGNyZWF0dXJlIHdpbGwgYmUgb3ZlcndyaXR0ZW4uXCJcbiAgICAgICAgKTtcblxuICAgICAgICBjb25zdCBpbXBvcnRBZGRpdGlvbmFsID1cbiAgICAgICAgICAgIGltcG9ydFNldHRpbmdzQ29udGFpbmVyLmNyZWF0ZURpdihcImFkZGl0aW9uYWxcIik7XG4gICAgICAgIGNvbnN0IGltcG9ydEFwcEZpbGUgPSBuZXcgU2V0dGluZyhpbXBvcnRBZGRpdGlvbmFsKVxuICAgICAgICAgICAgLnNldE5hbWUoXCJJbXBvcnQgRG5EQXBwRmlsZVwiKVxuICAgICAgICAgICAgLnNldERlc2MoXCJPbmx5IGltcG9ydCBjb250ZW50IHRoYXQgeW91IG93bi5cIik7XG4gICAgICAgIGNvbnN0IGlucHV0QXBwRmlsZSA9IGNyZWF0ZUVsKFwiaW5wdXRcIiwge1xuICAgICAgICAgICAgYXR0cjoge1xuICAgICAgICAgICAgICAgIHR5cGU6IFwiZmlsZVwiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwiZG5kYXBwZmlsZVwiLFxuICAgICAgICAgICAgICAgIGFjY2VwdDogXCIueG1sXCIsXG4gICAgICAgICAgICAgICAgbXVsdGlwbGU6IHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgaW5wdXRBcHBGaWxlLm9uY2hhbmdlID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgeyBmaWxlcyB9ID0gaW5wdXRBcHBGaWxlO1xuICAgICAgICAgICAgaWYgKCFmaWxlcy5sZW5ndGgpIHJldHVybjtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBmaWxlcyB9ID0gaW5wdXRBcHBGaWxlO1xuICAgICAgICAgICAgICAgIGlmICghZmlsZXMubGVuZ3RoKSByZXR1cm47XG4gICAgICAgICAgICAgICAgY29uc3QgbW9uc3RlcnMgPSBhd2FpdCB0aGlzLmltcG9ydGVyLmltcG9ydChmaWxlcywgXCJhcHBmaWxlXCIpO1xuICAgICAgICAgICAgICAgIGlmIChtb25zdGVycyAmJiBtb25zdGVycy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZU1vbnN0ZXJzKG1vbnN0ZXJzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5kaXNwbGF5KCk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICB9O1xuXG4gICAgICAgIGltcG9ydEFwcEZpbGUuYWRkQnV0dG9uKChiKSA9PiB7XG4gICAgICAgICAgICBiLnNldEJ1dHRvblRleHQoXCJDaG9vc2UgRmlsZShzKVwiKS5zZXRUb29sdGlwKFxuICAgICAgICAgICAgICAgIFwiSW1wb3J0IERuREFwcEZpbGUgRGF0YVwiXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgYi5idXR0b25FbC5hZGRDbGFzcyhcInN0YXRibG9jay1maWxlLXVwbG9hZFwiKTtcbiAgICAgICAgICAgIGIuYnV0dG9uRWwuYXBwZW5kQ2hpbGQoaW5wdXRBcHBGaWxlKTtcbiAgICAgICAgICAgIGIub25DbGljaygoKSA9PiBpbnB1dEFwcEZpbGUuY2xpY2soKSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IGltcG9ydEltcHJvdmVkSW5pdGlhdGl2ZSA9IG5ldyBTZXR0aW5nKGltcG9ydEFkZGl0aW9uYWwpXG4gICAgICAgICAgICAuc2V0TmFtZShcIkltcG9ydCBJbXByb3ZlZCBJbml0aWF0aXZlIERhdGFcIilcbiAgICAgICAgICAgIC5zZXREZXNjKFwiT25seSBpbXBvcnQgY29udGVudCB0aGF0IHlvdSBvd24uXCIpO1xuICAgICAgICBjb25zdCBpbnB1dEltcHJvdmVkSW5pdGlhdGl2ZSA9IGNyZWF0ZUVsKFwiaW5wdXRcIiwge1xuICAgICAgICAgICAgYXR0cjoge1xuICAgICAgICAgICAgICAgIHR5cGU6IFwiZmlsZVwiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwiaW1wcm92ZWRpbml0aWF0aXZlXCIsXG4gICAgICAgICAgICAgICAgYWNjZXB0OiBcIi5qc29uXCIsXG4gICAgICAgICAgICAgICAgbXVsdGlwbGU6IHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgaW5wdXRJbXByb3ZlZEluaXRpYXRpdmUub25jaGFuZ2UgPSBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB7IGZpbGVzIH0gPSBpbnB1dEltcHJvdmVkSW5pdGlhdGl2ZTtcbiAgICAgICAgICAgIGlmICghZmlsZXMubGVuZ3RoKSByZXR1cm47XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgZmlsZXMgfSA9IGlucHV0SW1wcm92ZWRJbml0aWF0aXZlO1xuICAgICAgICAgICAgICAgIGlmICghZmlsZXMubGVuZ3RoKSByZXR1cm47XG4gICAgICAgICAgICAgICAgY29uc3QgbW9uc3RlcnMgPSBhd2FpdCB0aGlzLmltcG9ydGVyLmltcG9ydChmaWxlcywgXCJpbXByb3ZlZFwiKTtcbiAgICAgICAgICAgICAgICBpZiAobW9uc3RlcnMgJiYgbW9uc3RlcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVNb25zdGVycyhtb25zdGVycyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuZGlzcGxheSgpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgICAgfTtcblxuICAgICAgICBpbXBvcnRJbXByb3ZlZEluaXRpYXRpdmUuYWRkQnV0dG9uKChiKSA9PiB7XG4gICAgICAgICAgICBiLnNldEJ1dHRvblRleHQoXCJDaG9vc2UgRmlsZShzKVwiKS5zZXRUb29sdGlwKFxuICAgICAgICAgICAgICAgIFwiSW1wb3J0IEltcHJvdmVkIEluaXRpYXRpdmUgRGF0YVwiXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgYi5idXR0b25FbC5hZGRDbGFzcyhcInN0YXRibG9jay1maWxlLXVwbG9hZFwiKTtcbiAgICAgICAgICAgIGIuYnV0dG9uRWwuYXBwZW5kQ2hpbGQoaW5wdXRJbXByb3ZlZEluaXRpYXRpdmUpO1xuICAgICAgICAgICAgYi5vbkNsaWNrKCgpID0+IGlucHV0SW1wcm92ZWRJbml0aWF0aXZlLmNsaWNrKCkpO1xuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCBpbXBvcnRDcml0dGVyREIgPSBuZXcgU2V0dGluZyhpbXBvcnRBZGRpdGlvbmFsKVxuICAgICAgICAgICAgLnNldE5hbWUoXCJJbXBvcnQgQ3JpdHRlckRCIERhdGFcIilcbiAgICAgICAgICAgIC5zZXREZXNjKFwiT25seSBpbXBvcnQgY29udGVudCB0aGF0IHlvdSBvd24uXCIpO1xuICAgICAgICBjb25zdCBpbnB1dENyaXR0ZXJEQiA9IGNyZWF0ZUVsKFwiaW5wdXRcIiwge1xuICAgICAgICAgICAgYXR0cjoge1xuICAgICAgICAgICAgICAgIHR5cGU6IFwiZmlsZVwiLFxuICAgICAgICAgICAgICAgIG5hbWU6IFwiY3JpdHRlcmRiXCIsXG4gICAgICAgICAgICAgICAgYWNjZXB0OiBcIi5qc29uXCIsXG4gICAgICAgICAgICAgICAgbXVsdGlwbGU6IHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgaW5wdXRDcml0dGVyREIub25jaGFuZ2UgPSBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB7IGZpbGVzIH0gPSBpbnB1dENyaXR0ZXJEQjtcbiAgICAgICAgICAgIGlmICghZmlsZXMubGVuZ3RoKSByZXR1cm47XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgZmlsZXMgfSA9IGlucHV0Q3JpdHRlckRCO1xuICAgICAgICAgICAgICAgIGlmICghZmlsZXMubGVuZ3RoKSByZXR1cm47XG4gICAgICAgICAgICAgICAgY29uc3QgbW9uc3RlcnMgPSBhd2FpdCB0aGlzLmltcG9ydGVyLmltcG9ydChmaWxlcywgXCJjcml0dGVyXCIpO1xuICAgICAgICAgICAgICAgIGlmIChtb25zdGVycyAmJiBtb25zdGVycy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZU1vbnN0ZXJzKG1vbnN0ZXJzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5kaXNwbGF5KCk7XG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICB9O1xuXG4gICAgICAgIGltcG9ydENyaXR0ZXJEQi5hZGRCdXR0b24oKGIpID0+IHtcbiAgICAgICAgICAgIGIuc2V0QnV0dG9uVGV4dChcIkNob29zZSBGaWxlKHMpXCIpLnNldFRvb2x0aXAoXG4gICAgICAgICAgICAgICAgXCJJbXBvcnQgQ3JpdHRlckRCIERhdGFcIlxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGIuYnV0dG9uRWwuYWRkQ2xhc3MoXCJzdGF0YmxvY2stZmlsZS11cGxvYWRcIik7XG4gICAgICAgICAgICBiLmJ1dHRvbkVsLmFwcGVuZENoaWxkKGlucHV0Q3JpdHRlckRCKTtcbiAgICAgICAgICAgIGIub25DbGljaygoKSA9PiBpbnB1dENyaXR0ZXJEQi5jbGljaygpKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgaW1wb3J0NWVUb29scyA9IG5ldyBTZXR0aW5nKGltcG9ydEFkZGl0aW9uYWwpXG4gICAgICAgICAgICAuc2V0TmFtZShcIkltcG9ydCA1ZS50b29scyBEYXRhXCIpXG4gICAgICAgICAgICAuc2V0RGVzYyhcIk9ubHkgaW1wb3J0IGNvbnRlbnQgdGhhdCB5b3Ugb3duLlwiKTtcbiAgICAgICAgY29uc3QgaW5wdXQ1ZVRvb2xzID0gY3JlYXRlRWwoXCJpbnB1dFwiLCB7XG4gICAgICAgICAgICBhdHRyOiB7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJmaWxlXCIsXG4gICAgICAgICAgICAgICAgbmFtZTogXCJmaXZldG9vbHNcIixcbiAgICAgICAgICAgICAgICBhY2NlcHQ6IFwiLmpzb25cIixcbiAgICAgICAgICAgICAgICBtdWx0aXBsZTogdHJ1ZVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBpbnB1dDVlVG9vbHMub25jaGFuZ2UgPSBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB7IGZpbGVzIH0gPSBpbnB1dDVlVG9vbHM7XG4gICAgICAgICAgICBpZiAoIWZpbGVzLmxlbmd0aCkgcmV0dXJuO1xuICAgICAgICAgICAgY29uc3QgbW9uc3RlcnMgPSBhd2FpdCB0aGlzLmltcG9ydGVyLmltcG9ydChmaWxlcywgXCI1ZVwiKTtcbiAgICAgICAgICAgIGlmIChtb25zdGVycyAmJiBtb25zdGVycy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlTW9uc3RlcnMobW9uc3RlcnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5kaXNwbGF5KCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgaW1wb3J0NWVUb29scy5hZGRCdXR0b24oKGIpID0+IHtcbiAgICAgICAgICAgIGIuc2V0QnV0dG9uVGV4dChcIkNob29zZSBGaWxlKHMpXCIpLnNldFRvb2x0aXAoXG4gICAgICAgICAgICAgICAgXCJJbXBvcnQgNWUudG9vbHMgRGF0YVwiXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgYi5idXR0b25FbC5hZGRDbGFzcyhcInN0YXRibG9jay1maWxlLXVwbG9hZFwiKTtcbiAgICAgICAgICAgIGIuYnV0dG9uRWwuYXBwZW5kQ2hpbGQoaW5wdXQ1ZVRvb2xzKTtcbiAgICAgICAgICAgIGIub25DbGljaygoKSA9PiBpbnB1dDVlVG9vbHMuY2xpY2soKSk7XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBpbXBvcnRUZXRyYSA9IG5ldyBTZXR0aW5nKGltcG9ydEFkZGl0aW9uYWwpXG4gICAgICAgICAgICAuc2V0TmFtZShcIkltcG9ydCBUZXRyYUN1YmUgRGF0YVwiKVxuICAgICAgICAgICAgLnNldERlc2MoXCJPbmx5IGltcG9ydCBjb250ZW50IHRoYXQgeW91IG93bi5cIik7XG4gICAgICAgIGNvbnN0IGlucHV0VGV0cmEgPSBjcmVhdGVFbChcImlucHV0XCIsIHtcbiAgICAgICAgICAgIGF0dHI6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcImZpbGVcIixcbiAgICAgICAgICAgICAgICBuYW1lOiBcInRldHJhXCIsXG4gICAgICAgICAgICAgICAgYWNjZXB0OiBcIi5qc29uLCAubW9uc3RlclwiLFxuICAgICAgICAgICAgICAgIG11bHRpcGxlOiB0cnVlXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBpbnB1dFRldHJhLm9uY2hhbmdlID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgeyBmaWxlcyB9ID0gaW5wdXRUZXRyYTtcbiAgICAgICAgICAgIGlmICghZmlsZXMubGVuZ3RoKSByZXR1cm47XG4gICAgICAgICAgICBjb25zdCBtb25zdGVycyA9IGF3YWl0IHRoaXMuaW1wb3J0ZXIuaW1wb3J0KGZpbGVzLCBcInRldHJhXCIpO1xuICAgICAgICAgICAgaWYgKG1vbnN0ZXJzICYmIG1vbnN0ZXJzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnNhdmVNb25zdGVycyhtb25zdGVycyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmRpc3BsYXkoKTtcbiAgICAgICAgfTtcbiAgICAgICAgaW1wb3J0VGV0cmEuYWRkQnV0dG9uKChiKSA9PiB7XG4gICAgICAgICAgICBiLnNldEJ1dHRvblRleHQoXCJDaG9vc2UgRmlsZShzKVwiKS5zZXRUb29sdGlwKFxuICAgICAgICAgICAgICAgIFwiSW1wb3J0IFRldHJhQ3ViZSBEYXRhXCJcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBiLmJ1dHRvbkVsLmFkZENsYXNzKFwic3RhdGJsb2NrLWZpbGUtdXBsb2FkXCIpO1xuICAgICAgICAgICAgYi5idXR0b25FbC5hcHBlbmRDaGlsZChpbnB1dFRldHJhKTtcbiAgICAgICAgICAgIGIub25DbGljaygoKSA9PiBpbnB1dFRldHJhLmNsaWNrKCkpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZ2VuZXJhdGVNb25zdGVycyhjb250YWluZXJFbDogSFRNTERpdkVsZW1lbnQpIHtcbiAgICAgICAgY29udGFpbmVyRWwuZW1wdHkoKTtcbiAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyRWwpLnNldEhlYWRpbmcoKS5zZXROYW1lKFwiSG9tZWJyZXcgQ3JlYXR1cmVzXCIpO1xuICAgICAgICBjb25zdCBhZGRpdGlvbmFsQ29udGFpbmVyID0gY29udGFpbmVyRWwuY3JlYXRlRGl2KFxuICAgICAgICAgICAgXCJzdGF0YmxvY2stYWRkaXRpb25hbC1jb250YWluZXIgc3RhdGJsb2NrLW1vbnN0ZXJzXCJcbiAgICAgICAgKTtcbiAgICAgICAgbmV3IFNldHRpbmcoYWRkaXRpb25hbENvbnRhaW5lcilcbiAgICAgICAgICAgIC5zZXROYW1lKFwiQWRkIENyZWF0dXJlXCIpXG4gICAgICAgICAgICAuYWRkQnV0dG9uKChiKSA9PiB7XG4gICAgICAgICAgICAgICAgYi5zZXRJY29uKFwicGx1cy13aXRoLWNpcmNsZVwiKS5vbkNsaWNrKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbW9kYWwgPSBuZXcgRWRpdE1vbnN0ZXJNb2RhbCh0aGlzLnBsdWdpbik7XG4gICAgICAgICAgICAgICAgICAgIG1vZGFsLm9uQ2xvc2UgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdlbmVyYXRlTW9uc3RlcnMoY29udGFpbmVyRWwpO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBtb2RhbC5vcGVuKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCBhbmNlc3RvciA9IHRoaXMuY29udGFpbmVyRWwuY2xvc2VzdChcIi5zdGF0YmxvY2stc2V0dGluZ3NcIik7XG4gICAgICAgIGNvbnN0IHsgYmFja2dyb3VuZENvbG9yLCBwYWRkaW5nVG9wIH0gPSBnZXRDb21wdXRlZFN0eWxlKGFuY2VzdG9yKTtcblxuICAgICAgICBjb25zdCBmaWx0ZXJzID0gYWRkaXRpb25hbENvbnRhaW5lci5jcmVhdGVEaXYoe1xuICAgICAgICAgICAgY2xzOiBcInN0YXRibG9jay1tb25zdGVyLWZpbHRlclwiLFxuICAgICAgICAgICAgYXR0cjoge1xuICAgICAgICAgICAgICAgIHN0eWxlOiBgLS1zdGF0YmxvY2stZmlsdGVyLW9mZnNldDogJHtwYWRkaW5nVG9wfTsgLS1zdGF0YmxvY2stZmlsdGVyLWJnOiAke2JhY2tncm91bmRDb2xvcn1gXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmZpbHRlciA9IG5ldyBTZXR0aW5nKGZpbHRlcnMpXG4gICAgICAgICAgICAuc2V0Q2xhc3MoXCJzdGF0YmxvY2stZmlsdGVyLWNvbnRhaW5lclwiKVxuXG4gICAgICAgICAgICAuYWRkU2VhcmNoKCh0KSA9PiB7XG4gICAgICAgICAgICAgICAgdC5zZXRQbGFjZWhvbGRlcihcIlNlYXJjaCBNb25zdGVyc1wiKS5vbkNoYW5nZShcbiAgICAgICAgICAgICAgICAgICAgZGVib3VuY2UoKHYpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2hvd1NlYXJjaFJlc3VsdHMoYWRkaXRpb25hbCwgdik7XG4gICAgICAgICAgICAgICAgICAgIH0sIDEwMClcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5hZGRFeHRyYUJ1dHRvbigoYikgPT4ge1xuICAgICAgICAgICAgICAgIGIuc2V0SWNvbihcInRyYXNoXCIpXG4gICAgICAgICAgICAgICAgICAgIC5zZXRUb29sdGlwKFwiRGVsZXRlIEFsbCBGaWx0ZXJlZCBNb25zdGVyc1wiKVxuICAgICAgICAgICAgICAgICAgICAub25DbGljaygoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtb2RhbCA9IG5ldyBDb25maXJtTW9kYWwoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXN1bHRzLmxlbmd0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5hcHBcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RhbC5vbkNsb3NlID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtb2RhbC5zYXZlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5kZWxldGVNb25zdGVycyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLih0aGlzLnJlc3VsdHM/Lm1hcCgobSkgPT4gbS5uYW1lKSA/PyBbXSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5nZW5lcmF0ZU1vbnN0ZXJzKGNvbnRhaW5lckVsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgbW9kYWwub3BlbigpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB0aGlzLnNldEZpbHRlckRlc2MoKTtcbiAgICAgICAgY29uc3Qgc291cmNlc1NldHRpbmcgPSBmaWx0ZXJzLmNyZWF0ZUVsKFwiZGV0YWlsc1wiKTtcbiAgICAgICAgc291cmNlc1NldHRpbmcuY3JlYXRlRWwoXCJzdW1tYXJ5XCIsIHsgdGV4dDogXCJGaWx0ZXIgU291cmNlc1wiIH0pO1xuICAgICAgICBjb25zdCBsaXN0ID0gc291cmNlc1NldHRpbmcuY3JlYXRlRWwoXG4gICAgICAgICAgICBcInVsXCIsXG4gICAgICAgICAgICBcImNvbnRhaW5zLXRhc2stbGlzdCB0YXNrLWxpc3QtaW5saW5lIG1hcmtkb3duLXByZXZpZXctdmlld1wiXG4gICAgICAgICk7XG5cbiAgICAgICAgZm9yIChsZXQgc291cmNlIG9mIHRoaXMucGx1Z2luLnNvdXJjZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IGxpID0gbGlzdC5jcmVhdGVFbChcImxpXCIsIFwidGFzay1saXN0LWl0ZW1cIik7XG4gICAgICAgICAgICBsaS5jcmVhdGVFbChcImlucHV0XCIsIHtcbiAgICAgICAgICAgICAgICBhdHRyOiB7XG4gICAgICAgICAgICAgICAgICAgIGlkOiBcImlucHV0X1wiICsgc291cmNlLFxuICAgICAgICAgICAgICAgICAgICBjaGVja2VkOiB0cnVlXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB0eXBlOiBcImNoZWNrYm94XCIsXG4gICAgICAgICAgICAgICAgY2xzOiBcInRhc2stbGlzdC1pdGVtLWNoZWNrYm94XCJcbiAgICAgICAgICAgIH0pLm9uY2xpY2sgPSAoZXZ0KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgdGFyZ2V0ID0gZXZ0LnRhcmdldCBhcyBIVE1MSW5wdXRFbGVtZW50O1xuICAgICAgICAgICAgICAgIGlmICh0YXJnZXQuY2hlY2tlZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3BsYXllZC5hZGQoc291cmNlKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3BsYXllZC5kZWxldGUoc291cmNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5zaG93U2VhcmNoUmVzdWx0cyhhZGRpdGlvbmFsLCBcIlwiKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBsaS5jcmVhdGVFbChcImxhYmVsXCIsIHtcbiAgICAgICAgICAgICAgICBhdHRyOiB7XG4gICAgICAgICAgICAgICAgICAgIGZvcjogXCJpbnB1dF9cIiArIHNvdXJjZVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdGV4dDogc291cmNlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhZGRpdGlvbmFsID0gYWRkaXRpb25hbENvbnRhaW5lci5jcmVhdGVEaXYoXCJhZGRpdGlvbmFsXCIpO1xuICAgICAgICBpZiAoIXRoaXMucGx1Z2luLmRhdGEuc2l6ZSkge1xuICAgICAgICAgICAgYWRkaXRpb25hbFxuICAgICAgICAgICAgICAgIC5jcmVhdGVEaXYoe1xuICAgICAgICAgICAgICAgICAgICBhdHRyOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdHlsZTogXCJkaXNwbGF5OiBmbGV4OyBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsgcGFkZGluZy1ib3R0b206IDE4cHg7XCJcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmNyZWF0ZVNwYW4oe1xuICAgICAgICAgICAgICAgICAgICB0ZXh0OiBcIk5vIHNhdmVkIGNyZWF0dXJlcyEgQ3JlYXRlIG9uZSB0byBzZWUgaXQgaGVyZS5cIlxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy5zaG93U2VhcmNoUmVzdWx0cyhhZGRpdGlvbmFsLCBcIlwiKSk7XG4gICAgfVxuICAgIHNldEZpbHRlckRlc2MoKSB7XG4gICAgICAgIHRoaXMuZmlsdGVyLnNldERlc2MoXG4gICAgICAgICAgICBjcmVhdGVGcmFnbWVudCgoZSkgPT4ge1xuICAgICAgICAgICAgICAgIGUuY3JlYXRlU3Bhbih7XG4gICAgICAgICAgICAgICAgICAgIHRleHQ6IGBNYW5hZ2luZyAke1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MubW9uc3RlcnMubGVuZ3RoXG4gICAgICAgICAgICAgICAgICAgIH0gaG9tZWJyZXcgY3JlYXR1cmUke1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MubW9uc3RlcnMubGVuZ3RoID09IDEgPyBcIlwiIDogXCJzXCJcbiAgICAgICAgICAgICAgICAgICAgfS5gXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgZS5jcmVhdGVFbChcInBcIiwge1xuICAgICAgICAgICAgICAgICAgICBhdHRyOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdHlsZTogXCJtYXJnaW46IDA7XCJcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pLmNyZWF0ZUVsKFwic21hbGxcIiwge1xuICAgICAgICAgICAgICAgICAgICB0ZXh0OiBgRGlzcGxheWluZzogJHt0aGlzLnJlc3VsdHMubGVuZ3RofSBob21lYnJldyBjcmVhdHVyZXMuYFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICB9XG4gICAgc2hvd1NlYXJjaFJlc3VsdHMoYWRkaXRpb25hbDogSFRNTERpdkVsZW1lbnQsIHNlYXJjaDogc3RyaW5nKSB7XG4gICAgICAgIGFkZGl0aW9uYWwuZW1wdHkoKTtcbiAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIHRoaXMucGVyZm9ybUZ1enp5U2VhcmNoKHNlYXJjaCkpIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbnRlbnQgPSBuZXcgU2V0dGluZyhhZGRpdGlvbmFsKS5zZXROYW1lKGl0ZW0ubmFtZSk7XG4gICAgICAgICAgICBsZXQgZGVzYzogc3RyaW5nLFxuICAgICAgICAgICAgICAgIG5lZWRUb29sdGlwID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShpdGVtLnNvdXJjZSkpIHtcbiAgICAgICAgICAgICAgICBsZXQgc291cmNlID0gaXRlbS5zb3VyY2Uuc2xpY2UoMCwgNCk7XG4gICAgICAgICAgICAgICAgaWYgKGl0ZW0uc291cmNlLmxlbmd0aCA+IDQpIHtcbiAgICAgICAgICAgICAgICAgICAgc291cmNlLnB1c2goYGFuZCAke2l0ZW0uc291cmNlLmxlbmd0aCAtIDR9IG1vcmVgKTtcbiAgICAgICAgICAgICAgICAgICAgbmVlZFRvb2x0aXAgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkZXNjID0gc3RyaW5naWZ5KHNvdXJjZSwgMCwgXCIsIFwiLCBmYWxzZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGRlc2MgPSBpdGVtLnNvdXJjZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnRlbnQuc2V0RGVzYyhkZXNjKTtcbiAgICAgICAgICAgIGlmIChuZWVkVG9vbHRpcCkge1xuICAgICAgICAgICAgICAgIGNvbnRlbnQuZGVzY0VsLnNldEF0dHIoXG4gICAgICAgICAgICAgICAgICAgIFwiYXJpYS1sYWJlbFwiLFxuICAgICAgICAgICAgICAgICAgICBzdHJpbmdpZnkoaXRlbS5zb3VyY2UsIDAsIFwiLCBcIiwgZmFsc2UpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnRlbnRcbiAgICAgICAgICAgICAgICAuYWRkRXh0cmFCdXR0b24oKGIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgYi5zZXRJY29uKFwiaW5mb1wiKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnNldFRvb2x0aXAoXCJWaWV3XCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAub25DbGljaygoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbW9kYWwgPSBuZXcgVmlld01vbnN0ZXJNb2RhbChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGFsLm9wZW4oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmFkZEV4dHJhQnV0dG9uKChiKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGIuc2V0SWNvbihcInBlbmNpbFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnNldFRvb2x0aXAoXCJFZGl0XCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAub25DbGljaygoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbW9kYWwgPSBuZXcgRWRpdE1vbnN0ZXJNb2RhbChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wbHVnaW4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGFsLm9wZW4oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RhbC5vbkNsb3NlID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNob3dTZWFyY2hSZXN1bHRzKGFkZGl0aW9uYWwsIHNlYXJjaCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmFkZEV4dHJhQnV0dG9uKChiKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGIuc2V0SWNvbihcInRyYXNoXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2V0VG9vbHRpcChcIkRlbGV0ZVwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgLm9uQ2xpY2soYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLmRlbGV0ZU1vbnN0ZXIoaXRlbS5uYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNob3dTZWFyY2hSZXN1bHRzKGFkZGl0aW9uYWwsIHNlYXJjaCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNldEZpbHRlckRlc2MoKTtcbiAgICB9XG4gICAgZGlzcGxheWVkOiBTZXQ8c3RyaW5nPiA9IG5ldyBTZXQodGhpcy5wbHVnaW4uc291cmNlcyk7XG4gICAgcGVyZm9ybUZ1enp5U2VhcmNoKGlucHV0OiBzdHJpbmcpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0czogTW9uc3RlcltdID0gW107XG4gICAgICAgIGZvciAoY29uc3QgcmVzb3VyY2Ugb2YgdGhpcy5wbHVnaW4uc29ydGVkKSB7XG4gICAgICAgICAgICBpZiAoIXJlc291cmNlLm5hbWUgJiYgIXJlc291cmNlLnNvdXJjZSkgY29udGludWU7XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgdHlwZW9mIHJlc291cmNlLnNvdXJjZSA9PSBcInN0cmluZ1wiICYmXG4gICAgICAgICAgICAgICAgIXRoaXMuZGlzcGxheWVkLmhhcyhyZXNvdXJjZS5zb3VyY2UpXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgQXJyYXkuaXNBcnJheShyZXNvdXJjZS5zb3VyY2UpICYmXG4gICAgICAgICAgICAgICAgIXJlc291cmNlLnNvdXJjZS5maW5kKChzKSA9PiB0aGlzLmRpc3BsYXllZC5oYXMocykpXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgY29udGludWU7XG5cbiAgICAgICAgICAgIGNvbnN0IHNlYXJjaCA9IHByZXBhcmVTaW1wbGVTZWFyY2goaW5wdXQpO1xuICAgICAgICAgICAgbGV0IHJlc3VsdCA9IHNlYXJjaChyZXNvdXJjZS5uYW1lKTtcbiAgICAgICAgICAgIGlmICghcmVzdWx0ICYmIHJlc291cmNlLnNvdXJjZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gc2VhcmNoKHN0cmluZ2lmeShyZXNvdXJjZS5zb3VyY2UpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICByZXN1bHRzLnB1c2gocmVzb3VyY2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMucmVzdWx0cyA9IHJlc3VsdHMuc2xpY2UoMCwgMTAwKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVzdWx0cztcbiAgICB9XG59XG5cbmNsYXNzIENyZWF0ZVN0YXRibG9ja01vZGFsIGV4dGVuZHMgTW9kYWwge1xuICAgIGNyZWF0b3I6IFN0YXRibG9ja0NyZWF0b3I7XG4gICAgbGF5b3V0OiBMYXlvdXQ7XG4gICAgc2F2ZWQ6IGJvb2xlYW4gPSBmYWxzZTtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHVibGljIHBsdWdpbjogU3RhdEJsb2NrUGx1Z2luLFxuICAgICAgICBsYXlvdXQ6IExheW91dCA9IHtcbiAgICAgICAgICAgIG5hbWU6IFwiTGF5b3V0XCIsXG4gICAgICAgICAgICBibG9ja3M6IFtdXG4gICAgICAgIH1cbiAgICApIHtcbiAgICAgICAgc3VwZXIocGx1Z2luLmFwcCk7XG4gICAgICAgIHRoaXMubGF5b3V0ID0gZmFzdENvcHkobGF5b3V0KTtcbiAgICB9XG5cbiAgICBvbk9wZW4oKSB7XG4gICAgICAgIHRoaXMuZGlzcGxheSgpO1xuICAgIH1cblxuICAgIGRpc3BsYXkoKSB7XG4gICAgICAgIHRoaXMudGl0bGVFbC5jcmVhdGVTcGFuKHsgdGV4dDogXCJDcmVhdGUgTGF5b3V0XCIgfSk7XG4gICAgICAgIHRoaXMuY3JlYXRvciA9IG5ldyBTdGF0YmxvY2tDcmVhdG9yKHtcbiAgICAgICAgICAgIHRhcmdldDogdGhpcy5jb250ZW50RWwsXG4gICAgICAgICAgICBwcm9wczoge1xuICAgICAgICAgICAgICAgIGxheW91dDogdGhpcy5sYXlvdXQsXG4gICAgICAgICAgICAgICAgcGx1Z2luOiB0aGlzLnBsdWdpblxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmNyZWF0b3IuJG9uKFwic2F2ZWRcIiwgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5zYXZlZCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmNyZWF0b3IuJG9uKFwiY2FuY2VsXCIsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG5jbGFzcyBDb25maXJtTW9kYWwgZXh0ZW5kcyBNb2RhbCB7XG4gICAgc2F2ZWQ6IGJvb2xlYW4gPSBmYWxzZTtcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgZmlsdGVyZWQ6IG51bWJlciwgYXBwOiBBcHApIHtcbiAgICAgICAgc3VwZXIoYXBwKTtcbiAgICB9XG4gICAgb25PcGVuKCkge1xuICAgICAgICB0aGlzLnRpdGxlRWwuc2V0VGV4dChcIkFyZSB5b3Ugc3VyZT9cIik7XG4gICAgICAgIHRoaXMuY29udGVudEVsLmNyZWF0ZUVsKFwicFwiLCB7XG4gICAgICAgICAgICB0ZXh0OiBgVGhpcyB3aWxsIGRlbGV0ZSAke3RoaXMuZmlsdGVyZWR9IGNyZWF0dXJlcy4gVGhpcyBjYW5ub3QgYmUgdW5kb25lLmBcbiAgICAgICAgfSk7XG4gICAgICAgIG5ldyBTZXR0aW5nKHRoaXMuY29udGVudEVsKVxuICAgICAgICAgICAgLnNldENsYXNzKFwibm8tYm9yZGVyLXRvcFwiKVxuICAgICAgICAgICAgLmFkZEJ1dHRvbigoYikgPT4ge1xuICAgICAgICAgICAgICAgIGIuc2V0SWNvbihcImNoZWNrbWFya1wiKVxuICAgICAgICAgICAgICAgICAgICAuc2V0Q3RhKClcbiAgICAgICAgICAgICAgICAgICAgLm9uQ2xpY2soKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zYXZlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5hZGRFeHRyYUJ1dHRvbigoYikgPT5cbiAgICAgICAgICAgICAgICBiLnNldEljb24oXCJjcm9zc1wiKS5vbkNsaWNrKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zYXZlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKTtcbiAgICB9XG59XG4iLCAiPHNjcmlwdCBsYW5nPVwidHNcIj5cbiAgICBpbXBvcnQge1xuICAgICAgICBCdXR0b25Db21wb25lbnQsXG4gICAgICAgIEV4dHJhQnV0dG9uQ29tcG9uZW50LFxuICAgICAgICBUZXh0Q29tcG9uZW50XG4gICAgfSBmcm9tIFwib2JzaWRpYW5cIjtcbiAgICBpbXBvcnQgdHlwZSB7IExheW91dCwgU3RhdGJsb2NrSXRlbSB9IGZyb20gXCJzcmMvbGF5b3V0cy90eXBlc1wiO1xuXG4gICAgaW1wb3J0IHR5cGUgU3RhdEJsb2NrUGx1Z2luIGZyb20gXCJzcmMvbWFpblwiO1xuICAgIGltcG9ydCB7IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlciB9IGZyb20gXCJzdmVsdGVcIjtcblxuICAgIGltcG9ydCB7IGdlbmVyYXRlIH0gZnJvbSBcIi4vYWRkXCI7XG4gICAgaW1wb3J0IENyZWF0b3IgZnJvbSBcIi4vdWkvQ3JlYXRvci5zdmVsdGVcIjtcblxuICAgIGV4cG9ydCBsZXQgbGF5b3V0OiBMYXlvdXQ7XG4gICAgZXhwb3J0IGxldCBwbHVnaW46IFN0YXRCbG9ja1BsdWdpbjtcblxuICAgICQ6IGl0ZW1zID0gbGF5b3V0LmJsb2NrcztcbiAgICBjb25zdCBnZXRJZHMgPSAoaXRlbXM6IFN0YXRibG9ja0l0ZW1bXSk6IHN0cmluZ1tdID0+IHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIC4uLml0ZW1zXG4gICAgICAgICAgICAgICAgLm1hcCgoaXRlbSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoXCJuZXN0ZWRcIiBpbiBpdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW2l0ZW0uaWQsIGdldElkcyhpdGVtLm5lc3RlZCldLmZsYXQoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gW2l0ZW0uaWRdO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmZsYXQoKVxuICAgICAgICBdO1xuICAgIH07XG5cbiAgICBjb25zdCBkaXNwYXRjaCA9IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlcigpO1xuXG4gICAgY29uc3QgaGFuZGxlU29ydGVkID0gKGU6IEN1c3RvbUV2ZW50PFN0YXRibG9ja0l0ZW1bXT4pID0+IHtcbiAgICAgICAgbGF5b3V0LmJsb2NrcyA9IFsuLi5lLmRldGFpbF07XG4gICAgfTtcblxuICAgIGxldCBlZGl0aW5nTmFtZSA9IGZhbHNlO1xuICAgIGNvbnN0IG5hbWUgPSAobm9kZTogSFRNTEVsZW1lbnQpID0+IHtcbiAgICAgICAgbm9kZS5lbXB0eSgpO1xuICAgICAgICBpZiAoZWRpdGluZ05hbWUpIHtcbiAgICAgICAgICAgIGxldCB0ZW1wID0gbGF5b3V0Lm5hbWU7XG4gICAgICAgICAgICBuZXcgVGV4dENvbXBvbmVudChub2RlKS5zZXRWYWx1ZSh0ZW1wKS5vbkNoYW5nZSgodikgPT4ge1xuICAgICAgICAgICAgICAgIHRlbXAgPSB2O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb25zdCBidXR0b25zID0gbm9kZS5jcmVhdGVEaXYoXCJidXR0b25zXCIpO1xuICAgICAgICAgICAgbmV3IEV4dHJhQnV0dG9uQ29tcG9uZW50KGJ1dHRvbnMpXG4gICAgICAgICAgICAgICAgLnNldEljb24oXCJjaGVja21hcmtcIilcbiAgICAgICAgICAgICAgICAuc2V0VG9vbHRpcChcIlNhdmVcIilcbiAgICAgICAgICAgICAgICAub25DbGljaygoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGVkaXRpbmdOYW1lID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGxheW91dC5uYW1lID0gdGVtcDtcbiAgICAgICAgICAgICAgICAgICAgbmFtZShub2RlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIG5ldyBFeHRyYUJ1dHRvbkNvbXBvbmVudChidXR0b25zKVxuICAgICAgICAgICAgICAgIC5zZXRJY29uKFwiY3Jvc3MtaW4tYm94XCIpXG4gICAgICAgICAgICAgICAgLnNldFRvb2x0aXAoXCJDYW5jZWxcIilcbiAgICAgICAgICAgICAgICAub25DbGljaygoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGVkaXRpbmdOYW1lID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIG5hbWUobm9kZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBub2RlLmNyZWF0ZUVsKFwiaDNcIiwgeyB0ZXh0OiBsYXlvdXQubmFtZSB9KTtcbiAgICAgICAgICAgIG5ldyBFeHRyYUJ1dHRvbkNvbXBvbmVudChub2RlLmNyZWF0ZURpdihcImJ1dHRvbnNcIikpXG4gICAgICAgICAgICAgICAgLnNldEljb24oXCJwZW5jaWxcIilcbiAgICAgICAgICAgICAgICAuc2V0VG9vbHRpcChcIkVkaXQgTmFtZVwiKVxuICAgICAgICAgICAgICAgIC5vbkNsaWNrKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZWRpdGluZ05hbWUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBuYW1lKG5vZGUpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIGNvbnN0IHNhdmUgPSAobm9kZTogSFRNTERpdkVsZW1lbnQpID0+IHtcbiAgICAgICAgbmV3IEJ1dHRvbkNvbXBvbmVudChub2RlKVxuICAgICAgICAgICAgLnNldEljb24oXCJjaGVja21hcmtcIilcbiAgICAgICAgICAgIC5zZXRDdGEoKVxuICAgICAgICAgICAgLnNldFRvb2x0aXAoXCJTYXZlXCIpXG4gICAgICAgICAgICAub25DbGljaygoKSA9PiB7XG4gICAgICAgICAgICAgICAgZGlzcGF0Y2goXCJzYXZlZFwiKTtcbiAgICAgICAgICAgIH0pO1xuICAgIH07XG4gICAgY29uc3QgY2FuY2VsID0gKG5vZGU6IEhUTUxEaXZFbGVtZW50KSA9PiB7XG4gICAgICAgIG5ldyBFeHRyYUJ1dHRvbkNvbXBvbmVudChub2RlKVxuICAgICAgICAgICAgLnNldEljb24oXCJjcm9zc1wiKVxuICAgICAgICAgICAgLnNldFRvb2x0aXAoXCJDYW5jZWxcIilcbiAgICAgICAgICAgIC5vbkNsaWNrKCgpID0+IHtcbiAgICAgICAgICAgICAgICBkaXNwYXRjaChcImNhbmNlbFwiKTtcbiAgICAgICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBjb25zdCBhZGQgPSBhc3luYyAoZTogTW91c2VFdmVudCkgPT4ge1xuICAgICAgICBjb25zdCBibG9jayA9IGF3YWl0IGdlbmVyYXRlKHBsdWdpbiwgZSk7XG4gICAgICAgIGlmIChibG9jaykgbGF5b3V0LmJsb2NrcyA9IFsuLi5sYXlvdXQuYmxvY2tzLCBibG9ja107XG4gICAgfTtcbiAgICBjb25zdCBhZGRCdXR0b24gPSAobm9kZTogSFRNTERpdkVsZW1lbnQpID0+IHtcbiAgICAgICAgbmV3IEV4dHJhQnV0dG9uQ29tcG9uZW50KG5vZGUpXG4gICAgICAgICAgICAuc2V0SWNvbihcInBsdXMtd2l0aC1jaXJjbGVcIilcbiAgICAgICAgICAgIC5zZXRUb29sdGlwKFwiQWRkIEJsb2NrXCIpO1xuICAgIH07XG48L3NjcmlwdD5cblxuPGRpdiBjbGFzcz1cInRvcFwiPlxuICAgIDxkaXYgY2xhc3M9XCJuYW1lXCIgdXNlOm5hbWUgLz5cbiAgICA8ZGl2IGNsYXNzPVwiYWRkXCIgdXNlOmFkZEJ1dHRvbiBvbjpjbGljaz17KGV2dCkgPT4gYWRkKGV2dCl9IC8+XG48L2Rpdj5cbjxkaXYgY2xhc3M9XCJjcmVhdG9yLWNvbnRhaW5lclwiPlxuICAgIHsja2V5IGxheW91dH1cbiAgICAgICAgPENyZWF0b3IgYmxvY2tzPXtpdGVtc30ge3BsdWdpbn0gb246c29ydGVkPXtoYW5kbGVTb3J0ZWR9IC8+XG4gICAgey9rZXl9XG48L2Rpdj5cbjxkaXYgY2xhc3M9XCJib3R0b21cIj5cbiAgICA8ZGl2IGNsYXNzPVwic2F2ZVwiIHVzZTpzYXZlIC8+XG4gICAgPGRpdiBjbGFzcz1cImNhbmNlbFwiIHVzZTpjYW5jZWwgLz5cbjwvZGl2PlxuXG48c3R5bGU+XG4gICAgLnRvcCB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICB9XG4gICAgLm5hbWUge1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICAvKiBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47ICovXG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgfVxuICAgIC5uYW1lIDpnbG9iYWwoLmJ1dHRvbnMpIHtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICB9XG4gICAgLmJvdHRvbSB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGp1c3RpZnktY29udGVudDogZmxleC1lbmQ7XG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgIG1hcmdpbi10b3A6IDAuNXJlbTtcbiAgICB9XG48L3N0eWxlPlxuIiwgImltcG9ydCB0eXBlIFN0YXRCbG9ja1BsdWdpbiBmcm9tIFwic3JjL21haW5cIjtcbmltcG9ydCB7IE1lbnUgfSBmcm9tIFwib2JzaWRpYW5cIjtcbmltcG9ydCB7XG4gICAgdHlwZSBTdGF0YmxvY2tJdGVtTWFwLFxuICAgIHR5cGUgU3RhdGJsb2NrSXRlbSxcbiAgICBUeXBlTmFtZXNcbn0gZnJvbSBcInNyYy9sYXlvdXRzL3R5cGVzXCI7XG5pbXBvcnQgeyBuYW5vaWQgfSBmcm9tIFwic3JjL3V0aWwvdXRpbFwiO1xuXG5mdW5jdGlvbiBibG9ja0dlbmVyYXRvcjxUIGV4dGVuZHMga2V5b2YgU3RhdGJsb2NrSXRlbU1hcD4oXG4gICAgdHlwZTogVFxuKTogU3RhdGJsb2NrSXRlbU1hcFtUXTtcbmZ1bmN0aW9uIGJsb2NrR2VuZXJhdG9yKHR5cGU6IHN0cmluZyk6IFN0YXRibG9ja0l0ZW0ge1xuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlIFwiaW5saW5lXCI6XG4gICAgICAgIGNhc2UgXCJncm91cFwiOiB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHR5cGU6IHR5cGUsXG4gICAgICAgICAgICAgICAgaWQ6IG5hbm9pZCgpLFxuICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6IFtdLFxuICAgICAgICAgICAgICAgIG5lc3RlZDogW11cbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcImhlYWRpbmdcIjoge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcImhlYWRpbmdcIixcbiAgICAgICAgICAgICAgICBpZDogbmFub2lkKCksXG4gICAgICAgICAgICAgICAgcHJvcGVydGllczogW11cbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcInByb3BlcnR5XCI6IHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJwcm9wZXJ0eVwiLFxuICAgICAgICAgICAgICAgIGlkOiBuYW5vaWQoKSxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOiBbXVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwic2F2ZXNcIjoge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcInNhdmVzXCIsXG4gICAgICAgICAgICAgICAgaWQ6IG5hbm9pZCgpLFxuICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6IFtdXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgXCJ0cmFpdHNcIjoge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcInRyYWl0c1wiLFxuICAgICAgICAgICAgICAgIGlkOiBuYW5vaWQoKSxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOiBbXVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwic3BlbGxzXCI6IHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJzcGVsbHNcIixcbiAgICAgICAgICAgICAgICBpZDogbmFub2lkKCksXG4gICAgICAgICAgICAgICAgcHJvcGVydGllczogW11cbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcInN1YmhlYWRpbmdcIjoge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcInN1YmhlYWRpbmdcIixcbiAgICAgICAgICAgICAgICBpZDogbmFub2lkKCksXG4gICAgICAgICAgICAgICAgcHJvcGVydGllczogW11cbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBcImltYWdlXCI6IHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJpbWFnZVwiLFxuICAgICAgICAgICAgICAgIGlkOiBuYW5vaWQoKSxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOiBbXVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwidGFibGVcIjoge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcInRhYmxlXCIsXG4gICAgICAgICAgICAgICAgaWQ6IG5hbm9pZCgpLFxuICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6IFtdLFxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IFtdLFxuICAgICAgICAgICAgICAgIGNhbGN1bGF0ZTogdHJ1ZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFwidGV4dFwiOiB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHR5cGU6IFwidGV4dFwiLFxuICAgICAgICAgICAgICAgIGlkOiBuYW5vaWQoKSxcbiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOiBbXSxcbiAgICAgICAgICAgICAgICB0ZXh0OiBudWxsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgY29uc3QgZ2VuZXJhdGUgPSBhc3luYyAoXG4gICAgcGx1Z2luOiBTdGF0QmxvY2tQbHVnaW4sXG4gICAgZXZ0OiBNb3VzZUV2ZW50XG4pOiBQcm9taXNlPFN0YXRibG9ja0l0ZW0gfCB2b2lkPiA9PiB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgY29uc3QgYWRkTWVudSA9IG5ldyBNZW51KHBsdWdpbi5hcHApLnNldE5vSWNvbigpO1xuICAgICAgICBUeXBlTmFtZXMuZm9yRWFjaCgodHlwZSkgPT4ge1xuICAgICAgICAgICAgYWRkTWVudS5hZGRJdGVtKChpdGVtKSA9PiB7XG4gICAgICAgICAgICAgICAgaXRlbS5zZXRUaXRsZSh0eXBlWzFdKS5vbkNsaWNrKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZ2VuID0gYmxvY2tHZW5lcmF0b3IodHlwZVswXSk7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoZ2VuKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgYWRkTWVudS5vbnVubG9hZCA9ICgpID0+IHtcbiAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgfTtcblxuICAgICAgICBhZGRNZW51LnNob3dBdE1vdXNlRXZlbnQoZXZ0KTtcbiAgICB9KTtcbn07XG4iLCAiaW1wb3J0IHR5cGUgeyBNb25zdGVyIH0gZnJvbSBcIkB0eXBlc1wiO1xuXG5leHBvcnQgY29uc3QgU3RhdGJsb2NrSXRlbVR5cGVzID0gW1xuICAgIFwidHJhaXRzXCIsXG4gICAgXCJoZWFkaW5nXCIsXG4gICAgXCJzdWJoZWFkaW5nXCIsXG4gICAgXCJwcm9wZXJ0eVwiLFxuICAgIFwidGFibGVcIixcbiAgICBcInNhdmVzXCIsXG4gICAgXCJzcGVsbHNcIixcbiAgICBcImlubGluZVwiLFxuICAgIFwiZ3JvdXBcIixcbiAgICBcImltYWdlXCIsXG4gICAgXCJ0ZXh0XCJcbl0gYXMgY29uc3Q7XG5cbmV4cG9ydCBjb25zdCBUeXBlTmFtZXM6IEFycmF5PFt0eXBlb2YgU3RhdGJsb2NrSXRlbVR5cGVzW251bWJlcl0sIHN0cmluZ10+ID0gW1xuICAgIFtcImdyb3VwXCIsIFwiR3JvdXBcIl0sXG4gICAgW1wiaGVhZGluZ1wiLCBcIkhlYWRpbmdcIl0sXG4gICAgW1wiaW1hZ2VcIiwgXCJJbWFnZVwiXSxcbiAgICBbXCJpbmxpbmVcIiwgXCJJbmxpbmUgR3JvdXBcIl0sXG4gICAgW1wicHJvcGVydHlcIiwgXCJQcm9wZXJ0eSBMaW5lXCJdLFxuICAgIFtcInNhdmVzXCIsIFwiU2F2ZXNcIl0sXG4gICAgW1wic3BlbGxzXCIsIFwiU3BlbGxzXCJdLFxuICAgIFtcInN1YmhlYWRpbmdcIiwgXCJTdWJoZWFkaW5nXCJdLFxuICAgIFtcInRhYmxlXCIsIFwiVGFibGVcIl0sXG4gICAgW1widGV4dFwiLCBcIlRleHRcIl0sXG4gICAgW1widHJhaXRzXCIsIFwiVHJhaXRzXCJdXG5dO1xuXG5leHBvcnQgdHlwZSBTdGF0YmxvY2tJdGVtVHlwZSA9IHR5cGVvZiBTdGF0YmxvY2tJdGVtVHlwZXNbbnVtYmVyXTtcblxuZXhwb3J0IHR5cGUgQ29tbW9uUHJvcHMgPSB7XG4gICAgdHlwZTogU3RhdGJsb2NrSXRlbVR5cGU7XG4gICAgaWQ6IHN0cmluZztcbiAgICBwcm9wZXJ0aWVzOiBBcnJheTxrZXlvZiBNb25zdGVyPjtcbiAgICBjb25kaXRpb25lZD86IGJvb2xlYW47XG4gICAgZmFsbGJhY2s/OiBzdHJpbmc7XG4gICAgaGFzUnVsZT86IGJvb2xlYW47XG4gICAgZGljZT86IGJvb2xlYW47XG4gICAgZGljZVByb3BlcnR5Pzoga2V5b2YgTW9uc3RlcjtcbiAgICBkaWNlVGV4dD86IHN0cmluZztcbiAgICBkaWNlQ2FsbGJhY2s/OiBzdHJpbmc7XG59O1xuXG5leHBvcnQgY29uc3QgTWFya2Rvd25UeXBlcyA9IFtcbiAgICBcInByb3BlcnR5XCIsXG4gICAgXCJ0cmFpdHNcIixcbiAgICBcInNwZWxsc1wiLFxuICAgIFwidGV4dFwiLFxuICAgIFwic2F2ZXNcIlxuXSBhcyBjb25zdDtcblxudHlwZSBHZW5lcmljVGV4dFByb3AgPSB7XG4gICAgbWFya2Rvd24/OiBib29sZWFuO1xufTtcblxudHlwZSBHcm91cFByb3BzID0ge1xuICAgIHR5cGU6IFwiZ3JvdXBcIjtcbiAgICBuZXN0ZWQ6IFN0YXRibG9ja0l0ZW1bXTtcbn07XG50eXBlIEhlYWRpbmdQcm9wcyA9IHtcbiAgICB0eXBlOiBcImhlYWRpbmdcIjtcbn07XG50eXBlIElubGluZVByb3BzID0ge1xuICAgIHR5cGU6IFwiaW5saW5lXCI7XG4gICAgbmVzdGVkOiBTdGF0YmxvY2tJdGVtW107XG59O1xudHlwZSBQcm9wZXJ0eVByb3BzID0ge1xuICAgIHR5cGU6IFwicHJvcGVydHlcIjtcbiAgICBjYWxsYmFjaz86IHN0cmluZztcbiAgICBkaXNwbGF5Pzogc3RyaW5nO1xufTtcbnR5cGUgU2F2ZXNQcm9wcyA9IHtcbiAgICB0eXBlOiBcInNhdmVzXCI7XG4gICAgZGlzcGxheT86IHN0cmluZztcbn07XG50eXBlIFNwZWxsc1Byb3BzID0ge1xuICAgIHR5cGU6IFwic3BlbGxzXCI7XG59O1xudHlwZSBTdWJIZWFkaW5nUHJvcHMgPSB7XG4gICAgdHlwZTogXCJzdWJoZWFkaW5nXCI7XG4gICAgc2VwYXJhdG9yOiBzdHJpbmc7XG59O1xudHlwZSBUYWJsZVByb3BzID0ge1xuICAgIHR5cGU6IFwidGFibGVcIjtcbiAgICBoZWFkZXJzOiBzdHJpbmdbXTtcbiAgICBjYWxjdWxhdGU6IGJvb2xlYW47XG4gICAgbW9kaWZpZXI/OiBzdHJpbmc7XG59O1xudHlwZSBUcmFpdHNQcm9wcyA9IHtcbiAgICB0eXBlOiBcInRyYWl0c1wiO1xuICAgIGhlYWRpbmc/OiBzdHJpbmc7XG4gICAgaGVhZGluZ1Byb3A/OiBib29sZWFuO1xufTtcbnR5cGUgSW1hZ2VQcm9wcyA9IHtcbiAgICB0eXBlOiBcImltYWdlXCI7XG4gICAgaGVhZGluZz86IHN0cmluZztcbn07XG50eXBlIFRleHRQcm9wcyA9IHtcbiAgICB0eXBlOiBcInRleHRcIjtcbiAgICBoZWFkaW5nPzogc3RyaW5nO1xuICAgIGhlYWRpbmdQcm9wPzogYm9vbGVhbjtcbiAgICB0ZXh0OiBzdHJpbmc7XG59O1xuXG5leHBvcnQgdHlwZSBHcm91cEl0ZW0gPSBDb21tb25Qcm9wcyAmIEdyb3VwUHJvcHM7XG5leHBvcnQgdHlwZSBIZWFkaW5nSXRlbSA9IENvbW1vblByb3BzICYgSGVhZGluZ1Byb3BzO1xuZXhwb3J0IHR5cGUgSW5saW5lSXRlbSA9IENvbW1vblByb3BzICYgSW5saW5lUHJvcHM7XG5leHBvcnQgdHlwZSBQcm9wZXJ0eUl0ZW0gPSBDb21tb25Qcm9wcyAmIFByb3BlcnR5UHJvcHMgJiBHZW5lcmljVGV4dFByb3A7XG5leHBvcnQgdHlwZSBTYXZlc0l0ZW0gPSBDb21tb25Qcm9wcyAmIFNhdmVzUHJvcHMgJiBHZW5lcmljVGV4dFByb3A7XG5leHBvcnQgdHlwZSBUcmFpdHNJdGVtID0gQ29tbW9uUHJvcHMgJiBUcmFpdHNQcm9wcyAmIEdlbmVyaWNUZXh0UHJvcDtcbmV4cG9ydCB0eXBlIFNwZWxsc0l0ZW0gPSBDb21tb25Qcm9wcyAmIFNwZWxsc1Byb3BzICYgR2VuZXJpY1RleHRQcm9wO1xuZXhwb3J0IHR5cGUgU3ViSGVhZGluZ0l0ZW0gPSBDb21tb25Qcm9wcyAmIFN1YkhlYWRpbmdQcm9wcztcbmV4cG9ydCB0eXBlIFRhYmxlSXRlbSA9IENvbW1vblByb3BzICYgVGFibGVQcm9wcztcbmV4cG9ydCB0eXBlIEltYWdlSXRlbSA9IENvbW1vblByb3BzICYgSW1hZ2VQcm9wcztcbmV4cG9ydCB0eXBlIFRleHRJdGVtID0gQ29tbW9uUHJvcHMgJiBUZXh0UHJvcHMgJiBHZW5lcmljVGV4dFByb3A7XG5cbmV4cG9ydCB0eXBlIFN0YXRibG9ja0l0ZW0gPVxuICAgIHwgR3JvdXBJdGVtXG4gICAgfCBIZWFkaW5nSXRlbVxuICAgIHwgSW5saW5lSXRlbVxuICAgIHwgUHJvcGVydHlJdGVtXG4gICAgfCBTYXZlc0l0ZW1cbiAgICB8IFRyYWl0c0l0ZW1cbiAgICB8IFNwZWxsc0l0ZW1cbiAgICB8IFN1YkhlYWRpbmdJdGVtXG4gICAgfCBUYWJsZUl0ZW1cbiAgICB8IEltYWdlSXRlbVxuICAgIHwgVGV4dEl0ZW07XG5cbmV4cG9ydCBpbnRlcmZhY2UgU3RhdGJsb2NrSXRlbU1hcFxuICAgIGV4dGVuZHMgUmVjb3JkPHR5cGVvZiBTdGF0YmxvY2tJdGVtVHlwZXNbbnVtYmVyXSwgU3RhdGJsb2NrSXRlbT4ge1xuICAgIGdyb3VwOiBHcm91cEl0ZW07XG4gICAgaGVhZGluZzogSGVhZGluZ0l0ZW07XG4gICAgaW5saW5lOiBJbmxpbmVJdGVtO1xuICAgIHByb3BlcnR5OiBQcm9wZXJ0eUl0ZW07XG4gICAgc2F2ZXM6IFNhdmVzSXRlbTtcbiAgICB0cmFpdHM6IFRyYWl0c0l0ZW07XG4gICAgc3BlbGxzOiBTcGVsbHNJdGVtO1xuICAgIHN1YmhlYWRpbmc6IFN1YkhlYWRpbmdJdGVtO1xuICAgIHRhYmxlOiBUYWJsZUl0ZW07XG4gICAgaW1hZ2U6IEltYWdlSXRlbTtcbiAgICB0ZXh0OiBUZXh0SXRlbTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBMYXlvdXQge1xuICAgIG5hbWU6IHN0cmluZztcbiAgICBibG9ja3M6IFN0YXRibG9ja0l0ZW1bXTtcbn1cbiIsICJleHBvcnQgeyBpZGVudGl0eSBhcyBsaW5lYXIgfSBmcm9tICcuLi9pbnRlcm5hbC9pbmRleC5tanMnO1xuXG4vKlxuQWRhcHRlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXR0ZGVzbFxuRGlzdHJpYnV0ZWQgdW5kZXIgTUlUIExpY2Vuc2UgaHR0cHM6Ly9naXRodWIuY29tL21hdHRkZXNsL2Vhc2VzL2Jsb2IvbWFzdGVyL0xJQ0VOU0UubWRcbiovXG5mdW5jdGlvbiBiYWNrSW5PdXQodCkge1xuICAgIGNvbnN0IHMgPSAxLjcwMTU4ICogMS41MjU7XG4gICAgaWYgKCh0ICo9IDIpIDwgMSlcbiAgICAgICAgcmV0dXJuIDAuNSAqICh0ICogdCAqICgocyArIDEpICogdCAtIHMpKTtcbiAgICByZXR1cm4gMC41ICogKCh0IC09IDIpICogdCAqICgocyArIDEpICogdCArIHMpICsgMik7XG59XG5mdW5jdGlvbiBiYWNrSW4odCkge1xuICAgIGNvbnN0IHMgPSAxLjcwMTU4O1xuICAgIHJldHVybiB0ICogdCAqICgocyArIDEpICogdCAtIHMpO1xufVxuZnVuY3Rpb24gYmFja091dCh0KSB7XG4gICAgY29uc3QgcyA9IDEuNzAxNTg7XG4gICAgcmV0dXJuIC0tdCAqIHQgKiAoKHMgKyAxKSAqIHQgKyBzKSArIDE7XG59XG5mdW5jdGlvbiBib3VuY2VPdXQodCkge1xuICAgIGNvbnN0IGEgPSA0LjAgLyAxMS4wO1xuICAgIGNvbnN0IGIgPSA4LjAgLyAxMS4wO1xuICAgIGNvbnN0IGMgPSA5LjAgLyAxMC4wO1xuICAgIGNvbnN0IGNhID0gNDM1Ni4wIC8gMzYxLjA7XG4gICAgY29uc3QgY2IgPSAzNTQ0Mi4wIC8gMTgwNS4wO1xuICAgIGNvbnN0IGNjID0gMTYwNjEuMCAvIDE4MDUuMDtcbiAgICBjb25zdCB0MiA9IHQgKiB0O1xuICAgIHJldHVybiB0IDwgYVxuICAgICAgICA/IDcuNTYyNSAqIHQyXG4gICAgICAgIDogdCA8IGJcbiAgICAgICAgICAgID8gOS4wNzUgKiB0MiAtIDkuOSAqIHQgKyAzLjRcbiAgICAgICAgICAgIDogdCA8IGNcbiAgICAgICAgICAgICAgICA/IGNhICogdDIgLSBjYiAqIHQgKyBjY1xuICAgICAgICAgICAgICAgIDogMTAuOCAqIHQgKiB0IC0gMjAuNTIgKiB0ICsgMTAuNzI7XG59XG5mdW5jdGlvbiBib3VuY2VJbk91dCh0KSB7XG4gICAgcmV0dXJuIHQgPCAwLjVcbiAgICAgICAgPyAwLjUgKiAoMS4wIC0gYm91bmNlT3V0KDEuMCAtIHQgKiAyLjApKVxuICAgICAgICA6IDAuNSAqIGJvdW5jZU91dCh0ICogMi4wIC0gMS4wKSArIDAuNTtcbn1cbmZ1bmN0aW9uIGJvdW5jZUluKHQpIHtcbiAgICByZXR1cm4gMS4wIC0gYm91bmNlT3V0KDEuMCAtIHQpO1xufVxuZnVuY3Rpb24gY2lyY0luT3V0KHQpIHtcbiAgICBpZiAoKHQgKj0gMikgPCAxKVxuICAgICAgICByZXR1cm4gLTAuNSAqIChNYXRoLnNxcnQoMSAtIHQgKiB0KSAtIDEpO1xuICAgIHJldHVybiAwLjUgKiAoTWF0aC5zcXJ0KDEgLSAodCAtPSAyKSAqIHQpICsgMSk7XG59XG5mdW5jdGlvbiBjaXJjSW4odCkge1xuICAgIHJldHVybiAxLjAgLSBNYXRoLnNxcnQoMS4wIC0gdCAqIHQpO1xufVxuZnVuY3Rpb24gY2lyY091dCh0KSB7XG4gICAgcmV0dXJuIE1hdGguc3FydCgxIC0gLS10ICogdCk7XG59XG5mdW5jdGlvbiBjdWJpY0luT3V0KHQpIHtcbiAgICByZXR1cm4gdCA8IDAuNSA/IDQuMCAqIHQgKiB0ICogdCA6IDAuNSAqIE1hdGgucG93KDIuMCAqIHQgLSAyLjAsIDMuMCkgKyAxLjA7XG59XG5mdW5jdGlvbiBjdWJpY0luKHQpIHtcbiAgICByZXR1cm4gdCAqIHQgKiB0O1xufVxuZnVuY3Rpb24gY3ViaWNPdXQodCkge1xuICAgIGNvbnN0IGYgPSB0IC0gMS4wO1xuICAgIHJldHVybiBmICogZiAqIGYgKyAxLjA7XG59XG5mdW5jdGlvbiBlbGFzdGljSW5PdXQodCkge1xuICAgIHJldHVybiB0IDwgMC41XG4gICAgICAgID8gMC41ICpcbiAgICAgICAgICAgIE1hdGguc2luKCgoKzEzLjAgKiBNYXRoLlBJKSAvIDIpICogMi4wICogdCkgKlxuICAgICAgICAgICAgTWF0aC5wb3coMi4wLCAxMC4wICogKDIuMCAqIHQgLSAxLjApKVxuICAgICAgICA6IDAuNSAqXG4gICAgICAgICAgICBNYXRoLnNpbigoKC0xMy4wICogTWF0aC5QSSkgLyAyKSAqICgyLjAgKiB0IC0gMS4wICsgMS4wKSkgKlxuICAgICAgICAgICAgTWF0aC5wb3coMi4wLCAtMTAuMCAqICgyLjAgKiB0IC0gMS4wKSkgK1xuICAgICAgICAgICAgMS4wO1xufVxuZnVuY3Rpb24gZWxhc3RpY0luKHQpIHtcbiAgICByZXR1cm4gTWF0aC5zaW4oKDEzLjAgKiB0ICogTWF0aC5QSSkgLyAyKSAqIE1hdGgucG93KDIuMCwgMTAuMCAqICh0IC0gMS4wKSk7XG59XG5mdW5jdGlvbiBlbGFzdGljT3V0KHQpIHtcbiAgICByZXR1cm4gKE1hdGguc2luKCgtMTMuMCAqICh0ICsgMS4wKSAqIE1hdGguUEkpIC8gMikgKiBNYXRoLnBvdygyLjAsIC0xMC4wICogdCkgKyAxLjApO1xufVxuZnVuY3Rpb24gZXhwb0luT3V0KHQpIHtcbiAgICByZXR1cm4gdCA9PT0gMC4wIHx8IHQgPT09IDEuMFxuICAgICAgICA/IHRcbiAgICAgICAgOiB0IDwgMC41XG4gICAgICAgICAgICA/ICswLjUgKiBNYXRoLnBvdygyLjAsIDIwLjAgKiB0IC0gMTAuMClcbiAgICAgICAgICAgIDogLTAuNSAqIE1hdGgucG93KDIuMCwgMTAuMCAtIHQgKiAyMC4wKSArIDEuMDtcbn1cbmZ1bmN0aW9uIGV4cG9Jbih0KSB7XG4gICAgcmV0dXJuIHQgPT09IDAuMCA/IHQgOiBNYXRoLnBvdygyLjAsIDEwLjAgKiAodCAtIDEuMCkpO1xufVxuZnVuY3Rpb24gZXhwb091dCh0KSB7XG4gICAgcmV0dXJuIHQgPT09IDEuMCA/IHQgOiAxLjAgLSBNYXRoLnBvdygyLjAsIC0xMC4wICogdCk7XG59XG5mdW5jdGlvbiBxdWFkSW5PdXQodCkge1xuICAgIHQgLz0gMC41O1xuICAgIGlmICh0IDwgMSlcbiAgICAgICAgcmV0dXJuIDAuNSAqIHQgKiB0O1xuICAgIHQtLTtcbiAgICByZXR1cm4gLTAuNSAqICh0ICogKHQgLSAyKSAtIDEpO1xufVxuZnVuY3Rpb24gcXVhZEluKHQpIHtcbiAgICByZXR1cm4gdCAqIHQ7XG59XG5mdW5jdGlvbiBxdWFkT3V0KHQpIHtcbiAgICByZXR1cm4gLXQgKiAodCAtIDIuMCk7XG59XG5mdW5jdGlvbiBxdWFydEluT3V0KHQpIHtcbiAgICByZXR1cm4gdCA8IDAuNVxuICAgICAgICA/ICs4LjAgKiBNYXRoLnBvdyh0LCA0LjApXG4gICAgICAgIDogLTguMCAqIE1hdGgucG93KHQgLSAxLjAsIDQuMCkgKyAxLjA7XG59XG5mdW5jdGlvbiBxdWFydEluKHQpIHtcbiAgICByZXR1cm4gTWF0aC5wb3codCwgNC4wKTtcbn1cbmZ1bmN0aW9uIHF1YXJ0T3V0KHQpIHtcbiAgICByZXR1cm4gTWF0aC5wb3codCAtIDEuMCwgMy4wKSAqICgxLjAgLSB0KSArIDEuMDtcbn1cbmZ1bmN0aW9uIHF1aW50SW5PdXQodCkge1xuICAgIGlmICgodCAqPSAyKSA8IDEpXG4gICAgICAgIHJldHVybiAwLjUgKiB0ICogdCAqIHQgKiB0ICogdDtcbiAgICByZXR1cm4gMC41ICogKCh0IC09IDIpICogdCAqIHQgKiB0ICogdCArIDIpO1xufVxuZnVuY3Rpb24gcXVpbnRJbih0KSB7XG4gICAgcmV0dXJuIHQgKiB0ICogdCAqIHQgKiB0O1xufVxuZnVuY3Rpb24gcXVpbnRPdXQodCkge1xuICAgIHJldHVybiAtLXQgKiB0ICogdCAqIHQgKiB0ICsgMTtcbn1cbmZ1bmN0aW9uIHNpbmVJbk91dCh0KSB7XG4gICAgcmV0dXJuIC0wLjUgKiAoTWF0aC5jb3MoTWF0aC5QSSAqIHQpIC0gMSk7XG59XG5mdW5jdGlvbiBzaW5lSW4odCkge1xuICAgIGNvbnN0IHYgPSBNYXRoLmNvcyh0ICogTWF0aC5QSSAqIDAuNSk7XG4gICAgaWYgKE1hdGguYWJzKHYpIDwgMWUtMTQpXG4gICAgICAgIHJldHVybiAxO1xuICAgIGVsc2VcbiAgICAgICAgcmV0dXJuIDEgLSB2O1xufVxuZnVuY3Rpb24gc2luZU91dCh0KSB7XG4gICAgcmV0dXJuIE1hdGguc2luKCh0ICogTWF0aC5QSSkgLyAyKTtcbn1cblxuZXhwb3J0IHsgYmFja0luLCBiYWNrSW5PdXQsIGJhY2tPdXQsIGJvdW5jZUluLCBib3VuY2VJbk91dCwgYm91bmNlT3V0LCBjaXJjSW4sIGNpcmNJbk91dCwgY2lyY091dCwgY3ViaWNJbiwgY3ViaWNJbk91dCwgY3ViaWNPdXQsIGVsYXN0aWNJbiwgZWxhc3RpY0luT3V0LCBlbGFzdGljT3V0LCBleHBvSW4sIGV4cG9Jbk91dCwgZXhwb091dCwgcXVhZEluLCBxdWFkSW5PdXQsIHF1YWRPdXQsIHF1YXJ0SW4sIHF1YXJ0SW5PdXQsIHF1YXJ0T3V0LCBxdWludEluLCBxdWludEluT3V0LCBxdWludE91dCwgc2luZUluLCBzaW5lSW5PdXQsIHNpbmVPdXQgfTtcbiIsICJpbXBvcnQgeyBjdWJpY091dCB9IGZyb20gJy4uL2Vhc2luZy9pbmRleC5tanMnO1xuaW1wb3J0IHsgaXNfZnVuY3Rpb24gfSBmcm9tICcuLi9pbnRlcm5hbC9pbmRleC5tanMnO1xuXG5mdW5jdGlvbiBmbGlwKG5vZGUsIHsgZnJvbSwgdG8gfSwgcGFyYW1zID0ge30pIHtcbiAgICBjb25zdCBzdHlsZSA9IGdldENvbXB1dGVkU3R5bGUobm9kZSk7XG4gICAgY29uc3QgdHJhbnNmb3JtID0gc3R5bGUudHJhbnNmb3JtID09PSAnbm9uZScgPyAnJyA6IHN0eWxlLnRyYW5zZm9ybTtcbiAgICBjb25zdCBbb3gsIG95XSA9IHN0eWxlLnRyYW5zZm9ybU9yaWdpbi5zcGxpdCgnICcpLm1hcChwYXJzZUZsb2F0KTtcbiAgICBjb25zdCBkeCA9IChmcm9tLmxlZnQgKyBmcm9tLndpZHRoICogb3ggLyB0by53aWR0aCkgLSAodG8ubGVmdCArIG94KTtcbiAgICBjb25zdCBkeSA9IChmcm9tLnRvcCArIGZyb20uaGVpZ2h0ICogb3kgLyB0by5oZWlnaHQpIC0gKHRvLnRvcCArIG95KTtcbiAgICBjb25zdCB7IGRlbGF5ID0gMCwgZHVyYXRpb24gPSAoZCkgPT4gTWF0aC5zcXJ0KGQpICogMTIwLCBlYXNpbmcgPSBjdWJpY091dCB9ID0gcGFyYW1zO1xuICAgIHJldHVybiB7XG4gICAgICAgIGRlbGF5LFxuICAgICAgICBkdXJhdGlvbjogaXNfZnVuY3Rpb24oZHVyYXRpb24pID8gZHVyYXRpb24oTWF0aC5zcXJ0KGR4ICogZHggKyBkeSAqIGR5KSkgOiBkdXJhdGlvbixcbiAgICAgICAgZWFzaW5nLFxuICAgICAgICBjc3M6ICh0LCB1KSA9PiB7XG4gICAgICAgICAgICBjb25zdCB4ID0gdSAqIGR4O1xuICAgICAgICAgICAgY29uc3QgeSA9IHUgKiBkeTtcbiAgICAgICAgICAgIGNvbnN0IHN4ID0gdCArIHUgKiBmcm9tLndpZHRoIC8gdG8ud2lkdGg7XG4gICAgICAgICAgICBjb25zdCBzeSA9IHQgKyB1ICogZnJvbS5oZWlnaHQgLyB0by5oZWlnaHQ7XG4gICAgICAgICAgICByZXR1cm4gYHRyYW5zZm9ybTogJHt0cmFuc2Zvcm19IHRyYW5zbGF0ZSgke3h9cHgsICR7eX1weCkgc2NhbGUoJHtzeH0sICR7c3l9KTtgO1xuICAgICAgICB9XG4gICAgfTtcbn1cblxuZXhwb3J0IHsgZmxpcCB9O1xuIiwgImZ1bmN0aW9uIG93bktleXMob2JqZWN0LCBlbnVtZXJhYmxlT25seSkge1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7XG5cbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTtcbiAgICBlbnVtZXJhYmxlT25seSAmJiAoc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHtcbiAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iamVjdCwgc3ltKS5lbnVtZXJhYmxlO1xuICAgIH0pKSwga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpO1xuICB9XG5cbiAgcmV0dXJuIGtleXM7XG59XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQyKHRhcmdldCkge1xuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBzb3VyY2UgPSBudWxsICE9IGFyZ3VtZW50c1tpXSA/IGFyZ3VtZW50c1tpXSA6IHt9O1xuICAgIGkgJSAyID8gb3duS2V5cyhPYmplY3Qoc291cmNlKSwgITApLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7XG4gICAgfSkgOiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSkgOiBvd25LZXlzKE9iamVjdChzb3VyY2UpKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgXCJAYmFiZWwvaGVscGVycyAtIHR5cGVvZlwiO1xuXG4gIHJldHVybiBfdHlwZW9mID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgXCJzeW1ib2xcIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKG9iaikge1xuICAgIHJldHVybiB0eXBlb2Ygb2JqO1xuICB9IDogZnVuY3Rpb24gKG9iaikge1xuICAgIHJldHVybiBvYmogJiYgXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7XG4gIH0sIF90eXBlb2Yob2JqKTtcbn1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSB7fTtcbiAgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICB2YXIga2V5LCBpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0gc291cmNlS2V5c1tpXTtcbiAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcblxuICB2YXIgdGFyZ2V0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCk7XG5cbiAgdmFyIGtleSwgaTtcblxuICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgIHZhciBzb3VyY2VTeW1ib2xLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IHNvdXJjZVN5bWJvbEtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGtleSA9IHNvdXJjZVN5bWJvbEtleXNbaV07XG4gICAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoc291cmNlLCBrZXkpKSBjb250aW51ZTtcbiAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7XG4gIHJldHVybiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyLCBpKSB8fCBfbm9uSXRlcmFibGVSZXN0KCk7XG59XG5cbmZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHtcbiAgcmV0dXJuIF9hcnJheVdpdGhvdXRIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyKSB8fCBfbm9uSXRlcmFibGVTcHJlYWQoKTtcbn1cblxuZnVuY3Rpb24gX2FycmF5V2l0aG91dEhvbGVzKGFycikge1xuICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkoYXJyKTtcbn1cblxuZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikge1xuICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyO1xufVxuXG5mdW5jdGlvbiBfaXRlcmFibGVUb0FycmF5KGl0ZXIpIHtcbiAgaWYgKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgaXRlcltTeW1ib2wuaXRlcmF0b3JdICE9IG51bGwgfHwgaXRlcltcIkBAaXRlcmF0b3JcIl0gIT0gbnVsbCkgcmV0dXJuIEFycmF5LmZyb20oaXRlcik7XG59XG5cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHtcbiAgdmFyIF9pID0gYXJyID09IG51bGwgPyBudWxsIDogdHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBhcnJbU3ltYm9sLml0ZXJhdG9yXSB8fCBhcnJbXCJAQGl0ZXJhdG9yXCJdO1xuXG4gIGlmIChfaSA9PSBudWxsKSByZXR1cm47XG4gIHZhciBfYXJyID0gW107XG4gIHZhciBfbiA9IHRydWU7XG4gIHZhciBfZCA9IGZhbHNlO1xuXG4gIHZhciBfcywgX2U7XG5cbiAgdHJ5IHtcbiAgICBmb3IgKF9pID0gX2kuY2FsbChhcnIpOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7XG4gICAgICBfYXJyLnB1c2goX3MudmFsdWUpO1xuXG4gICAgICBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBfZCA9IHRydWU7XG4gICAgX2UgPSBlcnI7XG4gIH0gZmluYWxseSB7XG4gICAgdHJ5IHtcbiAgICAgIGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0gIT0gbnVsbCkgX2lbXCJyZXR1cm5cIl0oKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaWYgKF9kKSB0aHJvdyBfZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gX2Fycjtcbn1cblxuZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KG8sIG1pbkxlbikge1xuICBpZiAoIW8pIHJldHVybjtcbiAgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTtcbiAgdmFyIG4gPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobykuc2xpY2UoOCwgLTEpO1xuICBpZiAobiA9PT0gXCJPYmplY3RcIiAmJiBvLmNvbnN0cnVjdG9yKSBuID0gby5jb25zdHJ1Y3Rvci5uYW1lO1xuICBpZiAobiA9PT0gXCJNYXBcIiB8fCBuID09PSBcIlNldFwiKSByZXR1cm4gQXJyYXkuZnJvbShvKTtcbiAgaWYgKG4gPT09IFwiQXJndW1lbnRzXCIgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QobikpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pO1xufVxuXG5mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikge1xuICBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDtcblxuICBmb3IgKHZhciBpID0gMCwgYXJyMiA9IG5ldyBBcnJheShsZW4pOyBpIDwgbGVuOyBpKyspIGFycjJbaV0gPSBhcnJbaV07XG5cbiAgcmV0dXJuIGFycjI7XG59XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVNwcmVhZCgpIHtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBzcHJlYWQgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7XG59XG5cbmZ1bmN0aW9uIF9ub25JdGVyYWJsZVJlc3QoKSB7XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7XG59XG5cbmZ1bmN0aW9uIF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKG8sIGFsbG93QXJyYXlMaWtlKSB7XG4gIHZhciBpdCA9IHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdIHx8IG9bXCJAQGl0ZXJhdG9yXCJdO1xuXG4gIGlmICghaXQpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShvKSB8fCAoaXQgPSBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobykpIHx8IGFsbG93QXJyYXlMaWtlICYmIG8gJiYgdHlwZW9mIG8ubGVuZ3RoID09PSBcIm51bWJlclwiKSB7XG4gICAgICBpZiAoaXQpIG8gPSBpdDtcbiAgICAgIHZhciBpID0gMDtcblxuICAgICAgdmFyIEYgPSBmdW5jdGlvbiAoKSB7fTtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgczogRixcbiAgICAgICAgbjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmIChpID49IG8ubGVuZ3RoKSByZXR1cm4ge1xuICAgICAgICAgICAgZG9uZTogdHJ1ZVxuICAgICAgICAgIH07XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRvbmU6IGZhbHNlLFxuICAgICAgICAgICAgdmFsdWU6IG9baSsrXVxuICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIGU6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfSxcbiAgICAgICAgZjogRlxuICAgICAgfTtcbiAgICB9XG5cbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGl0ZXJhdGUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlLlxcbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC5cIik7XG4gIH1cblxuICB2YXIgbm9ybWFsQ29tcGxldGlvbiA9IHRydWUsXG4gICAgICBkaWRFcnIgPSBmYWxzZSxcbiAgICAgIGVycjtcbiAgcmV0dXJuIHtcbiAgICBzOiBmdW5jdGlvbiAoKSB7XG4gICAgICBpdCA9IGl0LmNhbGwobyk7XG4gICAgfSxcbiAgICBuOiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgc3RlcCA9IGl0Lm5leHQoKTtcbiAgICAgIG5vcm1hbENvbXBsZXRpb24gPSBzdGVwLmRvbmU7XG4gICAgICByZXR1cm4gc3RlcDtcbiAgICB9LFxuICAgIGU6IGZ1bmN0aW9uIChlKSB7XG4gICAgICBkaWRFcnIgPSB0cnVlO1xuICAgICAgZXJyID0gZTtcbiAgICB9LFxuICAgIGY6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmICghbm9ybWFsQ29tcGxldGlvbiAmJiBpdC5yZXR1cm4gIT0gbnVsbCkgaXQucmV0dXJuKCk7XG4gICAgICB9IGZpbmFsbHkge1xuICAgICAgICBpZiAoZGlkRXJyKSB0aHJvdyBlcnI7XG4gICAgICB9XG4gICAgfVxuICB9O1xufVxuXG4vLyBleHRlcm5hbCBldmVudHNcbnZhciBGSU5BTElaRV9FVkVOVF9OQU1FID0gXCJmaW5hbGl6ZVwiO1xudmFyIENPTlNJREVSX0VWRU5UX05BTUUgPSBcImNvbnNpZGVyXCI7XG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IEluZm9cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSB0cmlnZ2VyXG4gKiBAcHJvcGVydHkge3N0cmluZ30gaWRcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBzb3VyY2VcbiAqIEBwYXJhbSB7Tm9kZX0gZWxcbiAqIEBwYXJhbSB7QXJyYXl9IGl0ZW1zXG4gKiBAcGFyYW0ge0luZm99IGluZm9cbiAqL1xuXG5mdW5jdGlvbiBkaXNwYXRjaEZpbmFsaXplRXZlbnQoZWwsIGl0ZW1zLCBpbmZvKSB7XG4gIGVsLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KEZJTkFMSVpFX0VWRU5UX05BTUUsIHtcbiAgICBkZXRhaWw6IHtcbiAgICAgIGl0ZW1zOiBpdGVtcyxcbiAgICAgIGluZm86IGluZm9cbiAgICB9XG4gIH0pKTtcbn1cbi8qKlxuICogRGlzcGF0Y2hlcyBhIGNvbnNpZGVyIGV2ZW50XG4gKiBAcGFyYW0ge05vZGV9IGVsXG4gKiBAcGFyYW0ge0FycmF5fSBpdGVtc1xuICogQHBhcmFtIHtJbmZvfSBpbmZvXG4gKi9cblxuZnVuY3Rpb24gZGlzcGF0Y2hDb25zaWRlckV2ZW50KGVsLCBpdGVtcywgaW5mbykge1xuICBlbC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudChDT05TSURFUl9FVkVOVF9OQU1FLCB7XG4gICAgZGV0YWlsOiB7XG4gICAgICBpdGVtczogaXRlbXMsXG4gICAgICBpbmZvOiBpbmZvXG4gICAgfVxuICB9KSk7XG59IC8vIGludGVybmFsIGV2ZW50c1xuXG52YXIgRFJBR0dFRF9FTlRFUkVEX0VWRU5UX05BTUUgPSBcImRyYWdnZWRFbnRlcmVkXCI7XG52YXIgRFJBR0dFRF9MRUZUX0VWRU5UX05BTUUgPSBcImRyYWdnZWRMZWZ0XCI7XG52YXIgRFJBR0dFRF9PVkVSX0lOREVYX0VWRU5UX05BTUUgPSBcImRyYWdnZWRPdmVySW5kZXhcIjtcbnZhciBEUkFHR0VEX0xFRlRfRE9DVU1FTlRfRVZFTlRfTkFNRSA9IFwiZHJhZ2dlZExlZnREb2N1bWVudFwiO1xudmFyIERSQUdHRURfTEVGVF9UWVBFUyA9IHtcbiAgTEVGVF9GT1JfQU5PVEhFUjogXCJsZWZ0Rm9yQW5vdGhlclwiLFxuICBPVVRTSURFX09GX0FOWTogXCJvdXRzaWRlT2ZBbnlcIlxufTtcbmZ1bmN0aW9uIGRpc3BhdGNoRHJhZ2dlZEVsZW1lbnRFbnRlcmVkQ29udGFpbmVyKGNvbnRhaW5lckVsLCBpbmRleE9iaiwgZHJhZ2dlZEVsKSB7XG4gIGNvbnRhaW5lckVsLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KERSQUdHRURfRU5URVJFRF9FVkVOVF9OQU1FLCB7XG4gICAgZGV0YWlsOiB7XG4gICAgICBpbmRleE9iajogaW5kZXhPYmosXG4gICAgICBkcmFnZ2VkRWw6IGRyYWdnZWRFbFxuICAgIH1cbiAgfSkpO1xufVxuLyoqXG4gKiBAcGFyYW0gY29udGFpbmVyRWwgLSB0aGUgZHJvcHpvbmUgdGhlIGVsZW1lbnQgbGVmdFxuICogQHBhcmFtIGRyYWdnZWRFbCAtIHRoZSBkcmFnZ2VkIGVsZW1lbnRcbiAqIEBwYXJhbSB0aGVPdGhlckR6IC0gdGhlIG5ldyBkcm9wem9uZSB0aGUgZWxlbWVudCBlbnRlcmVkXG4gKi9cblxuZnVuY3Rpb24gZGlzcGF0Y2hEcmFnZ2VkRWxlbWVudExlZnRDb250YWluZXJGb3JBbm90aGVyKGNvbnRhaW5lckVsLCBkcmFnZ2VkRWwsIHRoZU90aGVyRHopIHtcbiAgY29udGFpbmVyRWwuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoRFJBR0dFRF9MRUZUX0VWRU5UX05BTUUsIHtcbiAgICBkZXRhaWw6IHtcbiAgICAgIGRyYWdnZWRFbDogZHJhZ2dlZEVsLFxuICAgICAgdHlwZTogRFJBR0dFRF9MRUZUX1RZUEVTLkxFRlRfRk9SX0FOT1RIRVIsXG4gICAgICB0aGVPdGhlckR6OiB0aGVPdGhlckR6XG4gICAgfVxuICB9KSk7XG59XG5mdW5jdGlvbiBkaXNwYXRjaERyYWdnZWRFbGVtZW50TGVmdENvbnRhaW5lckZvck5vbmUoY29udGFpbmVyRWwsIGRyYWdnZWRFbCkge1xuICBjb250YWluZXJFbC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudChEUkFHR0VEX0xFRlRfRVZFTlRfTkFNRSwge1xuICAgIGRldGFpbDoge1xuICAgICAgZHJhZ2dlZEVsOiBkcmFnZ2VkRWwsXG4gICAgICB0eXBlOiBEUkFHR0VEX0xFRlRfVFlQRVMuT1VUU0lERV9PRl9BTllcbiAgICB9XG4gIH0pKTtcbn1cbmZ1bmN0aW9uIGRpc3BhdGNoRHJhZ2dlZEVsZW1lbnRJc092ZXJJbmRleChjb250YWluZXJFbCwgaW5kZXhPYmosIGRyYWdnZWRFbCkge1xuICBjb250YWluZXJFbC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudChEUkFHR0VEX09WRVJfSU5ERVhfRVZFTlRfTkFNRSwge1xuICAgIGRldGFpbDoge1xuICAgICAgaW5kZXhPYmo6IGluZGV4T2JqLFxuICAgICAgZHJhZ2dlZEVsOiBkcmFnZ2VkRWxcbiAgICB9XG4gIH0pKTtcbn1cbmZ1bmN0aW9uIGRpc3BhdGNoRHJhZ2dlZExlZnREb2N1bWVudChkcmFnZ2VkRWwpIHtcbiAgd2luZG93LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KERSQUdHRURfTEVGVF9ET0NVTUVOVF9FVkVOVF9OQU1FLCB7XG4gICAgZGV0YWlsOiB7XG4gICAgICBkcmFnZ2VkRWw6IGRyYWdnZWRFbFxuICAgIH1cbiAgfSkpO1xufVxuXG52YXIgVFJJR0dFUlMgPSB7XG4gIERSQUdfU1RBUlRFRDogXCJkcmFnU3RhcnRlZFwiLFxuICBEUkFHR0VEX0VOVEVSRUQ6IERSQUdHRURfRU5URVJFRF9FVkVOVF9OQU1FLFxuICBEUkFHR0VEX0VOVEVSRURfQU5PVEhFUjogXCJkcmFnRW50ZXJlZEFub3RoZXJcIixcbiAgRFJBR0dFRF9PVkVSX0lOREVYOiBEUkFHR0VEX09WRVJfSU5ERVhfRVZFTlRfTkFNRSxcbiAgRFJBR0dFRF9MRUZUOiBEUkFHR0VEX0xFRlRfRVZFTlRfTkFNRSxcbiAgRFJBR0dFRF9MRUZUX0FMTDogXCJkcmFnZ2VkTGVmdEFsbFwiLFxuICBEUk9QUEVEX0lOVE9fWk9ORTogXCJkcm9wcGVkSW50b1pvbmVcIixcbiAgRFJPUFBFRF9JTlRPX0FOT1RIRVI6IFwiZHJvcHBlZEludG9Bbm90aGVyXCIsXG4gIERST1BQRURfT1VUU0lERV9PRl9BTlk6IFwiZHJvcHBlZE91dHNpZGVPZkFueVwiLFxuICBEUkFHX1NUT1BQRUQ6IFwiZHJhZ1N0b3BwZWRcIlxufTtcbnZhciBTT1VSQ0VTID0ge1xuICBQT0lOVEVSOiBcInBvaW50ZXJcIixcbiAgS0VZQk9BUkQ6IFwia2V5Ym9hcmRcIlxufTtcbnZhciBTSEFET1dfSVRFTV9NQVJLRVJfUFJPUEVSVFlfTkFNRSA9IFwiaXNEbmRTaGFkb3dJdGVtXCI7XG52YXIgU0hBRE9XX0VMRU1FTlRfQVRUUklCVVRFX05BTUUgPSBcImRhdGEtaXMtZG5kLXNoYWRvdy1pdGVtXCI7XG52YXIgU0hBRE9XX1BMQUNFSE9MREVSX0lURU1fSUQgPSBcImlkOmRuZC1zaGFkb3ctcGxhY2Vob2xkZXItMDAwMFwiO1xudmFyIERSQUdHRURfRUxFTUVOVF9JRCA9IFwiZG5kLWFjdGlvbi1kcmFnZ2VkLWVsXCI7XG52YXIgSVRFTV9JRF9LRVkgPSBcImlkXCI7XG52YXIgYWN0aXZlRG5kWm9uZUNvdW50ID0gMDtcbmZ1bmN0aW9uIGluY3JlbWVudEFjdGl2ZURyb3Bab25lQ291bnQoKSB7XG4gIGFjdGl2ZURuZFpvbmVDb3VudCsrO1xufVxuZnVuY3Rpb24gZGVjcmVtZW50QWN0aXZlRHJvcFpvbmVDb3VudCgpIHtcbiAgaWYgKGFjdGl2ZURuZFpvbmVDb3VudCA9PT0gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkJ1ZyEgdHJ5aW5nIHRvIGRlY3JlbWVudCB3aGVuIHRoZXJlIGFyZSBubyBkcm9wem9uZXNcIik7XG4gIH1cblxuICBhY3RpdmVEbmRab25lQ291bnQtLTtcbn1cbi8qKlxuICogQWxsb3dzIHVzaW5nIGFub3RoZXIga2V5IGluc3RlYWQgb2YgXCJpZFwiIGluIHRoZSBpdGVtcyBkYXRhLiBUaGlzIGlzIGdsb2JhbCBhbmQgYXBwbGllcyB0byBhbGwgZG5kem9uZXMuXG4gKiBIYXMgdG8gYmUgY2FsbGVkIHdoZW4gdGhlcmUgYXJlIG5vIHJlbmRlcmVkIGRuZHpvbmVzIHdoYXRzb2V2ZXIuXG4gKiBAcGFyYW0ge1N0cmluZ30gbmV3S2V5TmFtZVxuICogQHRocm93cyB7RXJyb3J9IGlmIGl0IHdhcyBjYWxsZWQgd2hlbiB0aGVyZSBhcmUgcmVuZGVyZWQgZG5kem9uZXMgb3IgaWYgaXQgaXMgZ2l2ZW4gdGhlIHdyb25nIHR5cGUgKG5vdCBhIHN0cmluZylcbiAqL1xuXG5mdW5jdGlvbiBvdmVycmlkZUl0ZW1JZEtleU5hbWVCZWZvcmVJbml0aWFsaXNpbmdEbmRab25lcyhuZXdLZXlOYW1lKSB7XG4gIGlmIChhY3RpdmVEbmRab25lQ291bnQgPiAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiY2FuIG9ubHkgb3ZlcnJpZGUgdGhlIGlkIGtleSBiZWZvcmUgaW5pdGlhbGlzaW5nIGFueSBkbmR6b25lXCIpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBuZXdLZXlOYW1lICE9PSBcInN0cmluZ1wiKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiaXRlbSBpZCBrZXkgaGFzIHRvIGJlIGEgc3RyaW5nXCIpO1xuICB9XG5cbiAgcHJpbnREZWJ1ZyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIFtcIm92ZXJyaWRpbmcgaXRlbSBpZCBrZXkgbmFtZVwiLCBuZXdLZXlOYW1lXTtcbiAgfSk7XG4gIElURU1fSURfS0VZID0gbmV3S2V5TmFtZTtcbn1cbnZhciBpc09uU2VydmVyID0gdHlwZW9mIHdpbmRvdyA9PT0gXCJ1bmRlZmluZWRcIjtcbnZhciBwcmludERlYnVnID0gZnVuY3Rpb24gcHJpbnREZWJ1ZygpIHt9O1xuLyoqXG4gKiBBbGxvd3MgdGhlIHVzZXIgdG8gc2hvdy9oaWRlIGNvbnNvbGUgZGVidWcgb3V0cHV0XG4gKiAqIEBwYXJhbSB7Qm9vbGVhbn0gaXNEZWJ1Z1xuICovXG5cbmZ1bmN0aW9uIHNldERlYnVnTW9kZShpc0RlYnVnKSB7XG4gIGlmIChpc0RlYnVnKSB7XG4gICAgcHJpbnREZWJ1ZyA9IGZ1bmN0aW9uIHByaW50RGVidWcoZ2VuZXJhdGVNZXNzYWdlKSB7XG4gICAgICB2YXIgbG9nRnVuY3Rpb24gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IGNvbnNvbGUuZGVidWc7XG4gICAgICB2YXIgbWVzc2FnZSA9IGdlbmVyYXRlTWVzc2FnZSgpO1xuXG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShtZXNzYWdlKSkge1xuICAgICAgICBsb2dGdW5jdGlvbi5hcHBseSh2b2lkIDAsIF90b0NvbnN1bWFibGVBcnJheShtZXNzYWdlKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsb2dGdW5jdGlvbihtZXNzYWdlKTtcbiAgICAgIH1cbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHByaW50RGVidWcgPSBmdW5jdGlvbiBwcmludERlYnVnKCkge307XG4gIH1cbn1cblxuLy8gVGhpcyBpcyBiYXNlZCBvZmYgaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMjc3NDU0MzgvaG93LXRvLWNvbXB1dGUtZ2V0Ym91bmRpbmdjbGllbnRyZWN0LXdpdGhvdXQtY29uc2lkZXJpbmctdHJhbnNmb3Jtcy81Nzg3NjYwMSM1Nzg3NjYwMVxuLy8gSXQgcmVtb3ZlcyB0aGUgdHJhbnNmb3JtcyB0aGF0IGFyZSBwb3RlbnRpYWxseSBhcHBsaWVkIGJ5IHRoZSBmbGlwIGFuaW1hdGlvbnNcblxuLyoqXG4gKiBHZXRzIHRoZSBib3VuZGluZyByZWN0IGJ1dCByZW1vdmVzIHRyYW5zZm9ybXMgKGV4OiBmbGlwIGFuaW1hdGlvbilcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsXG4gKiBAcmV0dXJuIHt7dG9wOiBudW1iZXIsIGxlZnQ6IG51bWJlciwgYm90dG9tOiBudW1iZXIsIHJpZ2h0OiBudW1iZXJ9fVxuICovXG5mdW5jdGlvbiBnZXRCb3VuZGluZ1JlY3ROb1RyYW5zZm9ybXMoZWwpIHtcbiAgdmFyIHRhO1xuICB2YXIgcmVjdCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICB2YXIgc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKGVsKTtcbiAgdmFyIHR4ID0gc3R5bGUudHJhbnNmb3JtO1xuXG4gIGlmICh0eCkge1xuICAgIHZhciBzeCwgc3ksIGR4LCBkeTtcblxuICAgIGlmICh0eC5zdGFydHNXaXRoKFwibWF0cml4M2QoXCIpKSB7XG4gICAgICB0YSA9IHR4LnNsaWNlKDksIC0xKS5zcGxpdCgvLCAvKTtcbiAgICAgIHN4ID0gK3RhWzBdO1xuICAgICAgc3kgPSArdGFbNV07XG4gICAgICBkeCA9ICt0YVsxMl07XG4gICAgICBkeSA9ICt0YVsxM107XG4gICAgfSBlbHNlIGlmICh0eC5zdGFydHNXaXRoKFwibWF0cml4KFwiKSkge1xuICAgICAgdGEgPSB0eC5zbGljZSg3LCAtMSkuc3BsaXQoLywgLyk7XG4gICAgICBzeCA9ICt0YVswXTtcbiAgICAgIHN5ID0gK3RhWzNdO1xuICAgICAgZHggPSArdGFbNF07XG4gICAgICBkeSA9ICt0YVs1XTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHJlY3Q7XG4gICAgfVxuXG4gICAgdmFyIHRvID0gc3R5bGUudHJhbnNmb3JtT3JpZ2luO1xuICAgIHZhciB4ID0gcmVjdC54IC0gZHggLSAoMSAtIHN4KSAqIHBhcnNlRmxvYXQodG8pO1xuICAgIHZhciB5ID0gcmVjdC55IC0gZHkgLSAoMSAtIHN5KSAqIHBhcnNlRmxvYXQodG8uc2xpY2UodG8uaW5kZXhPZihcIiBcIikgKyAxKSk7XG4gICAgdmFyIHcgPSBzeCA/IHJlY3Qud2lkdGggLyBzeCA6IGVsLm9mZnNldFdpZHRoO1xuICAgIHZhciBoID0gc3kgPyByZWN0LmhlaWdodCAvIHN5IDogZWwub2Zmc2V0SGVpZ2h0O1xuICAgIHJldHVybiB7XG4gICAgICB4OiB4LFxuICAgICAgeTogeSxcbiAgICAgIHdpZHRoOiB3LFxuICAgICAgaGVpZ2h0OiBoLFxuICAgICAgdG9wOiB5LFxuICAgICAgcmlnaHQ6IHggKyB3LFxuICAgICAgYm90dG9tOiB5ICsgaCxcbiAgICAgIGxlZnQ6IHhcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiByZWN0O1xuICB9XG59XG4vKipcbiAqIEdldHMgdGhlIGFic29sdXRlIGJvdW5kaW5nIHJlY3QgKGFjY291bnRzIGZvciB0aGUgd2luZG93J3Mgc2Nyb2xsIHBvc2l0aW9uIGFuZCByZW1vdmVzIHRyYW5zZm9ybXMpXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbFxuICogQHJldHVybiB7e3RvcDogbnVtYmVyLCBsZWZ0OiBudW1iZXIsIGJvdHRvbTogbnVtYmVyLCByaWdodDogbnVtYmVyfX1cbiAqL1xuXG5mdW5jdGlvbiBnZXRBYnNvbHV0ZVJlY3ROb1RyYW5zZm9ybXMoZWwpIHtcbiAgdmFyIHJlY3QgPSBnZXRCb3VuZGluZ1JlY3ROb1RyYW5zZm9ybXMoZWwpO1xuICByZXR1cm4ge1xuICAgIHRvcDogcmVjdC50b3AgKyB3aW5kb3cuc2Nyb2xsWSxcbiAgICBib3R0b206IHJlY3QuYm90dG9tICsgd2luZG93LnNjcm9sbFksXG4gICAgbGVmdDogcmVjdC5sZWZ0ICsgd2luZG93LnNjcm9sbFgsXG4gICAgcmlnaHQ6IHJlY3QucmlnaHQgKyB3aW5kb3cuc2Nyb2xsWFxuICB9O1xufVxuLyoqXG4gKiBHZXRzIHRoZSBhYnNvbHV0ZSBib3VuZGluZyByZWN0IChhY2NvdW50cyBmb3IgdGhlIHdpbmRvdydzIHNjcm9sbCBwb3NpdGlvbilcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsXG4gKiBAcmV0dXJuIHt7dG9wOiBudW1iZXIsIGxlZnQ6IG51bWJlciwgYm90dG9tOiBudW1iZXIsIHJpZ2h0OiBudW1iZXJ9fVxuICovXG5cbmZ1bmN0aW9uIGdldEFic29sdXRlUmVjdChlbCkge1xuICB2YXIgcmVjdCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICByZXR1cm4ge1xuICAgIHRvcDogcmVjdC50b3AgKyB3aW5kb3cuc2Nyb2xsWSxcbiAgICBib3R0b206IHJlY3QuYm90dG9tICsgd2luZG93LnNjcm9sbFksXG4gICAgbGVmdDogcmVjdC5sZWZ0ICsgd2luZG93LnNjcm9sbFgsXG4gICAgcmlnaHQ6IHJlY3QucmlnaHQgKyB3aW5kb3cuc2Nyb2xsWFxuICB9O1xufVxuLyoqXG4gKiBmaW5kcyB0aGUgY2VudGVyIDopXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBSZWN0XG4gKiBAcHJvcGVydHkge251bWJlcn0gdG9wXG4gKiBAcHJvcGVydHkge251bWJlcn0gYm90dG9tXG4gKiBAcHJvcGVydHkge251bWJlcn0gbGVmdFxuICogQHByb3BlcnR5IHtudW1iZXJ9IHJpZ2h0XG4gKiBAcGFyYW0ge1JlY3R9IHJlY3RcbiAqIEByZXR1cm4ge3t4OiBudW1iZXIsIHk6IG51bWJlcn19XG4gKi9cblxuZnVuY3Rpb24gZmluZENlbnRlcihyZWN0KSB7XG4gIHJldHVybiB7XG4gICAgeDogKHJlY3QubGVmdCArIHJlY3QucmlnaHQpIC8gMixcbiAgICB5OiAocmVjdC50b3AgKyByZWN0LmJvdHRvbSkgLyAyXG4gIH07XG59XG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IFBvaW50XG4gKiBAcHJvcGVydHkge251bWJlcn0geFxuICogQHByb3BlcnR5IHtudW1iZXJ9IHlcbiAqIEBwYXJhbSB7UG9pbnR9IHBvaW50QVxuICogQHBhcmFtIHtQb2ludH0gcG9pbnRCXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cblxuZnVuY3Rpb24gY2FsY0Rpc3RhbmNlKHBvaW50QSwgcG9pbnRCKSB7XG4gIHJldHVybiBNYXRoLnNxcnQoTWF0aC5wb3cocG9pbnRBLnggLSBwb2ludEIueCwgMikgKyBNYXRoLnBvdyhwb2ludEEueSAtIHBvaW50Qi55LCAyKSk7XG59XG4vKipcbiAqIEBwYXJhbSB7UG9pbnR9IHBvaW50XG4gKiBAcGFyYW0ge1JlY3R9IHJlY3RcbiAqIEByZXR1cm4ge2Jvb2xlYW58Ym9vbGVhbn1cbiAqL1xuXG5cbmZ1bmN0aW9uIGlzUG9pbnRJbnNpZGVSZWN0KHBvaW50LCByZWN0KSB7XG4gIHJldHVybiBwb2ludC55IDw9IHJlY3QuYm90dG9tICYmIHBvaW50LnkgPj0gcmVjdC50b3AgJiYgcG9pbnQueCA+PSByZWN0LmxlZnQgJiYgcG9pbnQueCA8PSByZWN0LnJpZ2h0O1xufVxuLyoqXG4gKiBmaW5kIHRoZSBhYnNvbHV0ZSBjb29yZGluYXRlcyBvZiB0aGUgY2VudGVyIG9mIGEgZG9tIGVsZW1lbnRcbiAqIEBwYXJhbSBlbCB7SFRNTEVsZW1lbnR9XG4gKiBAcmV0dXJucyB7e3g6IG51bWJlciwgeTogbnVtYmVyfX1cbiAqL1xuXG5mdW5jdGlvbiBmaW5kQ2VudGVyT2ZFbGVtZW50KGVsKSB7XG4gIHJldHVybiBmaW5kQ2VudGVyKGdldEFic29sdXRlUmVjdChlbCkpO1xufVxuLyoqXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbEFcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsQlxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuXG5mdW5jdGlvbiBpc0NlbnRlck9mQUluc2lkZUIoZWxBLCBlbEIpIHtcbiAgdmFyIGNlbnRlck9mQSA9IGZpbmRDZW50ZXJPZkVsZW1lbnQoZWxBKTtcbiAgdmFyIHJlY3RPZkIgPSBnZXRBYnNvbHV0ZVJlY3ROb1RyYW5zZm9ybXMoZWxCKTtcbiAgcmV0dXJuIGlzUG9pbnRJbnNpZGVSZWN0KGNlbnRlck9mQSwgcmVjdE9mQik7XG59XG4vKipcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR8Q2hpbGROb2RlfSBlbEFcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR8Q2hpbGROb2RlfSBlbEJcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqL1xuXG5mdW5jdGlvbiBjYWxjRGlzdGFuY2VCZXR3ZWVuQ2VudGVycyhlbEEsIGVsQikge1xuICB2YXIgY2VudGVyT2ZBID0gZmluZENlbnRlck9mRWxlbWVudChlbEEpO1xuICB2YXIgY2VudGVyT2ZCID0gZmluZENlbnRlck9mRWxlbWVudChlbEIpO1xuICByZXR1cm4gY2FsY0Rpc3RhbmNlKGNlbnRlck9mQSwgY2VudGVyT2ZCKTtcbn1cbi8qKlxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWwgLSB0aGUgZWxlbWVudCB0byBjaGVja1xuICogQHJldHVybnMge2Jvb2xlYW59IC0gdHJ1ZSBpZiB0aGUgZWxlbWVudCBpbiBpdHMgZW50aXJldHkgaXMgb2ZmIHNjcmVlbiBpbmNsdWRpbmcgdGhlIHNjcm9sbGFibGUgYXJlYSAodGhlIG5vcm1hbCBkb20gZXZlbnRzIGxvb2sgYXQgdGhlIG1vdXNlIHJhdGhlciB0aGFuIHRoZSBlbGVtZW50KVxuICovXG5cbmZ1bmN0aW9uIGlzRWxlbWVudE9mZkRvY3VtZW50KGVsKSB7XG4gIHZhciByZWN0ID0gZ2V0QWJzb2x1dGVSZWN0KGVsKTtcbiAgcmV0dXJuIHJlY3QucmlnaHQgPCAwIHx8IHJlY3QubGVmdCA+IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxXaWR0aCB8fCByZWN0LmJvdHRvbSA8IDAgfHwgcmVjdC50b3AgPiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsSGVpZ2h0O1xufVxuLyoqXG4gKiBJZiB0aGUgcG9pbnQgaXMgaW5zaWRlIHRoZSBlbGVtZW50IHJldHVybnMgaXRzIGRpc3RhbmNlcyBmcm9tIHRoZSBzaWRlcywgb3RoZXJ3aXNlIHJldHVybnMgbnVsbFxuICogQHBhcmFtIHtQb2ludH0gcG9pbnRcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsXG4gKiBAcmV0dXJuIHtudWxsfHt0b3A6IG51bWJlciwgbGVmdDogbnVtYmVyLCBib3R0b206IG51bWJlciwgcmlnaHQ6IG51bWJlcn19XG4gKi9cblxuZnVuY3Rpb24gY2FsY0lubmVyRGlzdGFuY2VzQmV0d2VlblBvaW50QW5kU2lkZXNPZkVsZW1lbnQocG9pbnQsIGVsKSB7XG4gIHZhciByZWN0ID0gZ2V0QWJzb2x1dGVSZWN0KGVsKTtcblxuICBpZiAoIWlzUG9pbnRJbnNpZGVSZWN0KHBvaW50LCByZWN0KSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB0b3A6IHBvaW50LnkgLSByZWN0LnRvcCxcbiAgICBib3R0b206IHJlY3QuYm90dG9tIC0gcG9pbnQueSxcbiAgICBsZWZ0OiBwb2ludC54IC0gcmVjdC5sZWZ0LFxuICAgIC8vIFRPRE8gLSBmaWd1cmUgb3V0IHdoYXQgaXMgc28gc3BlY2lhbCBhYm91dCByaWdodCAod2h5IHRoZSByZWN0IGlzIHRvbyBiaWcpXG4gICAgcmlnaHQ6IE1hdGgubWluKHJlY3QucmlnaHQsIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCkgLSBwb2ludC54XG4gIH07XG59XG5cbnZhciBkelRvU2hhZG93SW5kZXhUb1JlY3Q7XG4vKipcbiAqIFJlc2V0cyB0aGUgY2FjaGUgdGhhdCBhbGxvd3MgZm9yIHNtYXJ0ZXIgXCJ3b3VsZCBiZSBpbmRleFwiIHJlc29sdXRpb24uIFNob3VsZCBiZSBjYWxsZWQgYWZ0ZXIgZXZlcnkgZHJhZyBvcGVyYXRpb25cbiAqL1xuXG5mdW5jdGlvbiByZXNldEluZGV4ZXNDYWNoZSgpIHtcbiAgcHJpbnREZWJ1ZyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIFwicmVzZXR0aW5nIGluZGV4ZXMgY2FjaGVcIjtcbiAgfSk7XG4gIGR6VG9TaGFkb3dJbmRleFRvUmVjdCA9IG5ldyBNYXAoKTtcbn1cbnJlc2V0SW5kZXhlc0NhY2hlKCk7XG4vKipcbiAqIFJlc2V0cyB0aGUgY2FjaGUgdGhhdCBhbGxvd3MgZm9yIHNtYXJ0ZXIgXCJ3b3VsZCBiZSBpbmRleFwiIHJlc29sdXRpb24gZm9yIGEgc3BlY2lmaWMgZHJvcHpvbmUsIHNob3VsZCBiZSBjYWxsZWQgYWZ0ZXIgdGhlIHpvbmUgd2FzIHNjcm9sbGVkXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBkelxuICovXG5cbmZ1bmN0aW9uIHJlc2V0SW5kZXhlc0NhY2hlRm9yRHooZHopIHtcbiAgcHJpbnREZWJ1ZyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIFwicmVzZXR0aW5nIGluZGV4ZXMgY2FjaGUgZm9yIGR6XCI7XG4gIH0pO1xuICBkelRvU2hhZG93SW5kZXhUb1JlY3RbXCJkZWxldGVcIl0oZHopO1xufVxuLyoqXG4gKiBDYWNoZXMgdGhlIGNvb3JkaW5hdGVzIG9mIHRoZSBzaGFkb3cgZWxlbWVudCB3aGVuIGl0J3MgaW4gYSBjZXJ0YWluIGluZGV4IGluIGEgY2VydGFpbiBkcm9wem9uZS5cbiAqIEhlbHBmdWwgaW4gb3JkZXIgdG8gZGV0ZXJtaW5lIFwid291bGQgYmUgaW5kZXhcIiBtb3JlIGVmZmVjdGl2ZWx5XG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBkelxuICogQHJldHVybiB7bnVtYmVyfSAtIHRoZSBzaGFkb3cgZWxlbWVudCBpbmRleFxuICovXG5cbmZ1bmN0aW9uIGNhY2hlU2hhZG93UmVjdChkeikge1xuICB2YXIgc2hhZG93RWxJbmRleCA9IEFycmF5LmZyb20oZHouY2hpbGRyZW4pLmZpbmRJbmRleChmdW5jdGlvbiAoY2hpbGQpIHtcbiAgICByZXR1cm4gY2hpbGQuZ2V0QXR0cmlidXRlKFNIQURPV19FTEVNRU5UX0FUVFJJQlVURV9OQU1FKTtcbiAgfSk7XG5cbiAgaWYgKHNoYWRvd0VsSW5kZXggPj0gMCkge1xuICAgIGlmICghZHpUb1NoYWRvd0luZGV4VG9SZWN0LmhhcyhkeikpIHtcbiAgICAgIGR6VG9TaGFkb3dJbmRleFRvUmVjdC5zZXQoZHosIG5ldyBNYXAoKSk7XG4gICAgfVxuXG4gICAgZHpUb1NoYWRvd0luZGV4VG9SZWN0LmdldChkeikuc2V0KHNoYWRvd0VsSW5kZXgsIGdldEFic29sdXRlUmVjdE5vVHJhbnNmb3Jtcyhkei5jaGlsZHJlbltzaGFkb3dFbEluZGV4XSkpO1xuICAgIHJldHVybiBzaGFkb3dFbEluZGV4O1xuICB9XG5cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gSW5kZXhcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBpbmRleCAtIHRoZSB3b3VsZCBiZSBpbmRleFxuICogQHByb3BlcnR5IHtib29sZWFufSBpc1Byb3hpbWl0eUJhc2VkIC0gZmFsc2UgaWYgdGhlIGVsZW1lbnQgaXMgYWN0dWFsbHkgb3ZlciB0aGUgaW5kZXgsIHRydWUgaWYgaXQgaXMgbm90IG92ZXIgaXQgYnV0IHRoaXMgaW5kZXggaXMgdGhlIGNsb3Nlc3RcbiAqL1xuXG4vKipcbiAqIEZpbmQgdGhlIGluZGV4IGZvciB0aGUgZHJhZ2dlZCBlbGVtZW50IGluIHRoZSBsaXN0IGl0IGlzIGRyYWdnZWQgb3ZlclxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZmxvYXRpbmdBYm92ZUVsXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBjb2xsZWN0aW9uQmVsb3dFbFxuICogQHJldHVybnMge0luZGV4fG51bGx9IC0gIGlmIHRoZSBlbGVtZW50IGlzIG92ZXIgdGhlIGNvbnRhaW5lciB0aGUgSW5kZXggb2JqZWN0IG90aGVyd2lzZSBudWxsXG4gKi9cblxuXG5mdW5jdGlvbiBmaW5kV291bGRCZUluZGV4KGZsb2F0aW5nQWJvdmVFbCwgY29sbGVjdGlvbkJlbG93RWwpIHtcbiAgaWYgKCFpc0NlbnRlck9mQUluc2lkZUIoZmxvYXRpbmdBYm92ZUVsLCBjb2xsZWN0aW9uQmVsb3dFbCkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHZhciBjaGlsZHJlbiA9IGNvbGxlY3Rpb25CZWxvd0VsLmNoaWxkcmVuOyAvLyB0aGUgY29udGFpbmVyIGlzIGVtcHR5LCBmbG9hdGluZyBlbGVtZW50IHNob3VsZCBiZSB0aGUgZmlyc3RcblxuICBpZiAoY2hpbGRyZW4ubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGluZGV4OiAwLFxuICAgICAgaXNQcm94aW1pdHlCYXNlZDogdHJ1ZVxuICAgIH07XG4gIH1cblxuICB2YXIgc2hhZG93RWxJbmRleCA9IGNhY2hlU2hhZG93UmVjdChjb2xsZWN0aW9uQmVsb3dFbCk7IC8vIHRoZSBzZWFyY2ggY291bGQgYmUgbW9yZSBlZmZpY2llbnQgYnV0IGtlZXBpbmcgaXQgc2ltcGxlIGZvciBub3dcbiAgLy8gYSBwb3NzaWJsZSBpbXByb3ZlbWVudDogcGFzcyBpbiB0aGUgbGFzdEluZGV4IGl0IHdhcyBmb3VuZCBpbiBhbmQgY2hlY2sgdGhlcmUgZmlyc3QsIHRoZW4gZXhwYW5kIGZyb20gdGhlcmVcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGlzQ2VudGVyT2ZBSW5zaWRlQihmbG9hdGluZ0Fib3ZlRWwsIGNoaWxkcmVuW2ldKSkge1xuICAgICAgdmFyIGNhY2hlZFNoYWRvd1JlY3QgPSBkelRvU2hhZG93SW5kZXhUb1JlY3QuaGFzKGNvbGxlY3Rpb25CZWxvd0VsKSAmJiBkelRvU2hhZG93SW5kZXhUb1JlY3QuZ2V0KGNvbGxlY3Rpb25CZWxvd0VsKS5nZXQoaSk7XG5cbiAgICAgIGlmIChjYWNoZWRTaGFkb3dSZWN0KSB7XG4gICAgICAgIGlmICghaXNQb2ludEluc2lkZVJlY3QoZmluZENlbnRlck9mRWxlbWVudChmbG9hdGluZ0Fib3ZlRWwpLCBjYWNoZWRTaGFkb3dSZWN0KSkge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpbmRleDogc2hhZG93RWxJbmRleCxcbiAgICAgICAgICAgIGlzUHJveGltaXR5QmFzZWQ6IGZhbHNlXG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBpbmRleDogaSxcbiAgICAgICAgaXNQcm94aW1pdHlCYXNlZDogZmFsc2VcbiAgICAgIH07XG4gICAgfVxuICB9IC8vIHRoaXMgY2FuIGhhcHBlbiBpZiB0aGVyZSBpcyBzcGFjZSBhcm91bmQgdGhlIGNoaWxkcmVuIHNvIHRoZSBmbG9hdGluZyBlbGVtZW50IGhhc1xuICAvL2VudGVyZWQgdGhlIGNvbnRhaW5lciBidXQgbm90IGFueSBvZiB0aGUgY2hpbGRyZW4sIGluIHRoaXMgY2FzZSB3ZSB3aWxsIGZpbmQgdGhlIG5lYXJlc3QgY2hpbGRcblxuXG4gIHZhciBtaW5EaXN0YW5jZVNvRmFyID0gTnVtYmVyLk1BWF9WQUxVRTtcbiAgdmFyIGluZGV4T2ZNaW4gPSB1bmRlZmluZWQ7IC8vIHdlIGFyZSBjaGVja2luZyBhbGwgb2YgdGhlbSBiZWNhdXNlIHdlIGRvbid0IGtub3cgd2hldGhlciB3ZSBhcmUgZGVhbGluZyB3aXRoIGEgaG9yaXpvbnRhbCBvciB2ZXJ0aWNhbCBjb250YWluZXIgYW5kIHdoZXJlIHRoZSBmbG9hdGluZyBlbGVtZW50IGVudGVyZWQgZnJvbVxuXG4gIGZvciAodmFyIF9pID0gMDsgX2kgPCBjaGlsZHJlbi5sZW5ndGg7IF9pKyspIHtcbiAgICB2YXIgZGlzdGFuY2UgPSBjYWxjRGlzdGFuY2VCZXR3ZWVuQ2VudGVycyhmbG9hdGluZ0Fib3ZlRWwsIGNoaWxkcmVuW19pXSk7XG5cbiAgICBpZiAoZGlzdGFuY2UgPCBtaW5EaXN0YW5jZVNvRmFyKSB7XG4gICAgICBtaW5EaXN0YW5jZVNvRmFyID0gZGlzdGFuY2U7XG4gICAgICBpbmRleE9mTWluID0gX2k7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBpbmRleDogaW5kZXhPZk1pbixcbiAgICBpc1Byb3hpbWl0eUJhc2VkOiB0cnVlXG4gIH07XG59XG5cbnZhciBTQ1JPTExfWk9ORV9QWCA9IDI1O1xuZnVuY3Rpb24gbWFrZVNjcm9sbGVyKCkge1xuICB2YXIgc2Nyb2xsaW5nSW5mbztcblxuICBmdW5jdGlvbiByZXNldFNjcm9sbGluZygpIHtcbiAgICBzY3JvbGxpbmdJbmZvID0ge1xuICAgICAgZGlyZWN0aW9uT2JqOiB1bmRlZmluZWQsXG4gICAgICBzdGVwUHg6IDBcbiAgICB9O1xuICB9XG5cbiAgcmVzZXRTY3JvbGxpbmcoKTsgLy8gZGlyZWN0aW9uT2JqIHt4OiAwfDF8LTEsIHk6MHwxfC0xfSAtIDEgbWVhbnMgZG93biBpbiB5IGFuZCByaWdodCBpbiB4XG5cbiAgZnVuY3Rpb24gc2Nyb2xsQ29udGFpbmVyKGNvbnRhaW5lckVsKSB7XG4gICAgdmFyIF9zY3JvbGxpbmdJbmZvID0gc2Nyb2xsaW5nSW5mbyxcbiAgICAgICAgZGlyZWN0aW9uT2JqID0gX3Njcm9sbGluZ0luZm8uZGlyZWN0aW9uT2JqLFxuICAgICAgICBzdGVwUHggPSBfc2Nyb2xsaW5nSW5mby5zdGVwUHg7XG5cbiAgICBpZiAoZGlyZWN0aW9uT2JqKSB7XG4gICAgICBjb250YWluZXJFbC5zY3JvbGxCeShkaXJlY3Rpb25PYmoueCAqIHN0ZXBQeCwgZGlyZWN0aW9uT2JqLnkgKiBzdGVwUHgpO1xuICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBzY3JvbGxDb250YWluZXIoY29udGFpbmVyRWwpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY2FsY1Njcm9sbFN0ZXBQeChkaXN0YW5jZVB4KSB7XG4gICAgcmV0dXJuIFNDUk9MTF9aT05FX1BYIC0gZGlzdGFuY2VQeDtcbiAgfVxuICAvKipcbiAgICogSWYgdGhlIHBvaW50ZXIgaXMgbmV4dCB0byB0aGUgc2lkZXMgb2YgdGhlIGVsZW1lbnQgdG8gc2Nyb2xsLCB3aWxsIHRyaWdnZXIgc2Nyb2xsaW5nXG4gICAqIENhbiBiZSBjYWxsZWQgcmVwZWF0ZWRseSB3aXRoIHVwZGF0ZWQgcG9pbnRlciBhbmQgZWxlbWVudFRvU2Nyb2xsIHZhbHVlcyB3aXRob3V0IGlzc3Vlc1xuICAgKiBAcmV0dXJuIHtib29sZWFufSAtIHRydWUgaWYgc2Nyb2xsaW5nIHdhcyBuZWVkZWRcbiAgICovXG5cblxuICBmdW5jdGlvbiBzY3JvbGxJZk5lZWRlZChwb2ludGVyLCBlbGVtZW50VG9TY3JvbGwpIHtcbiAgICBpZiAoIWVsZW1lbnRUb1Njcm9sbCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHZhciBkaXN0YW5jZXMgPSBjYWxjSW5uZXJEaXN0YW5jZXNCZXR3ZWVuUG9pbnRBbmRTaWRlc09mRWxlbWVudChwb2ludGVyLCBlbGVtZW50VG9TY3JvbGwpO1xuXG4gICAgaWYgKGRpc3RhbmNlcyA9PT0gbnVsbCkge1xuICAgICAgcmVzZXRTY3JvbGxpbmcoKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgaXNBbHJlYWR5U2Nyb2xsaW5nID0gISFzY3JvbGxpbmdJbmZvLmRpcmVjdGlvbk9iajtcbiAgICB2YXIgc2Nyb2xsaW5nVmVydGljYWxseSA9IGZhbHNlLFxuICAgICAgICBzY3JvbGxpbmdIb3Jpem9udGFsbHkgPSBmYWxzZTsgLy8gdmVydGljYWxcblxuICAgIGlmIChlbGVtZW50VG9TY3JvbGwuc2Nyb2xsSGVpZ2h0ID4gZWxlbWVudFRvU2Nyb2xsLmNsaWVudEhlaWdodCkge1xuICAgICAgaWYgKGRpc3RhbmNlcy5ib3R0b20gPCBTQ1JPTExfWk9ORV9QWCkge1xuICAgICAgICBzY3JvbGxpbmdWZXJ0aWNhbGx5ID0gdHJ1ZTtcbiAgICAgICAgc2Nyb2xsaW5nSW5mby5kaXJlY3Rpb25PYmogPSB7XG4gICAgICAgICAgeDogMCxcbiAgICAgICAgICB5OiAxXG4gICAgICAgIH07XG4gICAgICAgIHNjcm9sbGluZ0luZm8uc3RlcFB4ID0gY2FsY1Njcm9sbFN0ZXBQeChkaXN0YW5jZXMuYm90dG9tKTtcbiAgICAgIH0gZWxzZSBpZiAoZGlzdGFuY2VzLnRvcCA8IFNDUk9MTF9aT05FX1BYKSB7XG4gICAgICAgIHNjcm9sbGluZ1ZlcnRpY2FsbHkgPSB0cnVlO1xuICAgICAgICBzY3JvbGxpbmdJbmZvLmRpcmVjdGlvbk9iaiA9IHtcbiAgICAgICAgICB4OiAwLFxuICAgICAgICAgIHk6IC0xXG4gICAgICAgIH07XG4gICAgICAgIHNjcm9sbGluZ0luZm8uc3RlcFB4ID0gY2FsY1Njcm9sbFN0ZXBQeChkaXN0YW5jZXMudG9wKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc0FscmVhZHlTY3JvbGxpbmcgJiYgc2Nyb2xsaW5nVmVydGljYWxseSkge1xuICAgICAgICBzY3JvbGxDb250YWluZXIoZWxlbWVudFRvU2Nyb2xsKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfSAvLyBob3Jpem9udGFsXG5cblxuICAgIGlmIChlbGVtZW50VG9TY3JvbGwuc2Nyb2xsV2lkdGggPiBlbGVtZW50VG9TY3JvbGwuY2xpZW50V2lkdGgpIHtcbiAgICAgIGlmIChkaXN0YW5jZXMucmlnaHQgPCBTQ1JPTExfWk9ORV9QWCkge1xuICAgICAgICBzY3JvbGxpbmdIb3Jpem9udGFsbHkgPSB0cnVlO1xuICAgICAgICBzY3JvbGxpbmdJbmZvLmRpcmVjdGlvbk9iaiA9IHtcbiAgICAgICAgICB4OiAxLFxuICAgICAgICAgIHk6IDBcbiAgICAgICAgfTtcbiAgICAgICAgc2Nyb2xsaW5nSW5mby5zdGVwUHggPSBjYWxjU2Nyb2xsU3RlcFB4KGRpc3RhbmNlcy5yaWdodCk7XG4gICAgICB9IGVsc2UgaWYgKGRpc3RhbmNlcy5sZWZ0IDwgU0NST0xMX1pPTkVfUFgpIHtcbiAgICAgICAgc2Nyb2xsaW5nSG9yaXpvbnRhbGx5ID0gdHJ1ZTtcbiAgICAgICAgc2Nyb2xsaW5nSW5mby5kaXJlY3Rpb25PYmogPSB7XG4gICAgICAgICAgeDogLTEsXG4gICAgICAgICAgeTogMFxuICAgICAgICB9O1xuICAgICAgICBzY3JvbGxpbmdJbmZvLnN0ZXBQeCA9IGNhbGNTY3JvbGxTdGVwUHgoZGlzdGFuY2VzLmxlZnQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzQWxyZWFkeVNjcm9sbGluZyAmJiBzY3JvbGxpbmdIb3Jpem9udGFsbHkpIHtcbiAgICAgICAgc2Nyb2xsQ29udGFpbmVyKGVsZW1lbnRUb1Njcm9sbCk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJlc2V0U2Nyb2xsaW5nKCk7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBzY3JvbGxJZk5lZWRlZDogc2Nyb2xsSWZOZWVkZWQsXG4gICAgcmVzZXRTY3JvbGxpbmc6IHJlc2V0U2Nyb2xsaW5nXG4gIH07XG59XG5cbi8qKlxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiB0b1N0cmluZyhvYmplY3QpIHtcbiAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KG9iamVjdCwgbnVsbCwgMik7XG59XG4vKipcbiAqIEZpbmRzIHRoZSBkZXB0aCBvZiB0aGUgZ2l2ZW4gbm9kZSBpbiB0aGUgRE9NIHRyZWVcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IG5vZGVcbiAqIEByZXR1cm4ge251bWJlcn0gLSB0aGUgZGVwdGggb2YgdGhlIG5vZGVcbiAqL1xuXG5mdW5jdGlvbiBnZXREZXB0aChub2RlKSB7XG4gIGlmICghbm9kZSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcImNhbm5vdCBnZXQgZGVwdGggb2YgYSBmYWxzeSBub2RlXCIpO1xuICB9XG5cbiAgcmV0dXJuIF9nZXREZXB0aChub2RlLCAwKTtcbn1cblxuZnVuY3Rpb24gX2dldERlcHRoKG5vZGUpIHtcbiAgdmFyIGNvdW50U29GYXIgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDA7XG5cbiAgaWYgKCFub2RlLnBhcmVudEVsZW1lbnQpIHtcbiAgICByZXR1cm4gY291bnRTb0ZhciAtIDE7XG4gIH1cblxuICByZXR1cm4gX2dldERlcHRoKG5vZGUucGFyZW50RWxlbWVudCwgY291bnRTb0ZhciArIDEpO1xufVxuLyoqXG4gKiBBIHNpbXBsZSB1dGlsIHRvIHNoYWxsb3cgY29tcGFyZSBvYmplY3RzIHF1aWNrbHksIGl0IGRvZXNuJ3QgdmFsaWRhdGUgdGhlIGFyZ3VtZW50cyBzbyBwYXNzIG9iamVjdHMgaW5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpBXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqQlxuICogQHJldHVybiB7Ym9vbGVhbn0gLSB0cnVlIGlmIG9iakEgYW5kIG9iakIgYXJlIHNoYWxsb3cgZXF1YWxcbiAqL1xuXG5cbmZ1bmN0aW9uIGFyZU9iamVjdHNTaGFsbG93RXF1YWwob2JqQSwgb2JqQikge1xuICBpZiAoT2JqZWN0LmtleXMob2JqQSkubGVuZ3RoICE9PSBPYmplY3Qua2V5cyhvYmpCKS5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBmb3IgKHZhciBrZXlBIGluIG9iakEpIHtcbiAgICBpZiAoIXt9Lmhhc093blByb3BlcnR5LmNhbGwob2JqQiwga2V5QSkgfHwgb2JqQltrZXlBXSAhPT0gb2JqQVtrZXlBXSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuLyoqXG4gKiBTaGFsbG93IGNvbXBhcmVzIHR3byBhcnJheXNcbiAqIEBwYXJhbSBhcnJBXG4gKiBAcGFyYW0gYXJyQlxuICogQHJldHVybiB7Ym9vbGVhbn0gLSB3aGV0aGVyIHRoZSBhcnJheXMgYXJlIHNoYWxsb3cgZXF1YWxcbiAqL1xuXG5mdW5jdGlvbiBhcmVBcnJheXNTaGFsbG93RXF1YWxTYW1lT3JkZXIoYXJyQSwgYXJyQikge1xuICBpZiAoYXJyQS5sZW5ndGggIT09IGFyckIubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJBLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGFyckFbaV0gIT09IGFyckJbaV0pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxudmFyIElOVEVSVkFMX01TID0gMjAwO1xudmFyIFRPTEVSQU5DRV9QWCA9IDEwO1xuXG52YXIgX21ha2VTY3JvbGxlciA9IG1ha2VTY3JvbGxlcigpLFxuICAgIHNjcm9sbElmTmVlZGVkID0gX21ha2VTY3JvbGxlci5zY3JvbGxJZk5lZWRlZCxcbiAgICByZXNldFNjcm9sbGluZyA9IF9tYWtlU2Nyb2xsZXIucmVzZXRTY3JvbGxpbmc7XG5cbnZhciBuZXh0O1xuLyoqXG4gKiBUcmFja3MgdGhlIGRyYWdnZWQgZWxlbWVudHMgYW5kIHBlcmZvcm1zIHRoZSBzaWRlIGVmZmVjdHMgd2hlbiBpdCBpcyBkcmFnZ2VkIG92ZXIgYSBkcm9wIHpvbmUgKGJhc2ljYWxseSBkaXNwYXRjaGluZyBjdXN0b20tZXZlbnRzIHNjcm9sbGluZylcbiAqIEBwYXJhbSB7U2V0PEhUTUxFbGVtZW50Pn0gZHJvcFpvbmVzXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBkcmFnZ2VkRWxcbiAqIEBwYXJhbSB7bnVtYmVyfSBbaW50ZXJ2YWxNcyA9IElOVEVSVkFMX01TXVxuICovXG5cbmZ1bmN0aW9uIG9ic2VydmUoZHJhZ2dlZEVsLCBkcm9wWm9uZXMpIHtcbiAgdmFyIGludGVydmFsTXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IElOVEVSVkFMX01TO1xuICAvLyBpbml0aWFsaXphdGlvblxuICB2YXIgbGFzdERyb3Bab25lRm91bmQ7XG4gIHZhciBsYXN0SW5kZXhGb3VuZDtcbiAgdmFyIGxhc3RJc0RyYWdnZWRJbkFEcm9wWm9uZSA9IGZhbHNlO1xuICB2YXIgbGFzdENlbnRyZVBvc2l0aW9uT2ZEcmFnZ2VkOyAvLyBXZSBhcmUgc29ydGluZyB0byBtYWtlIHN1cmUgdGhhdCBpbiBjYXNlIG9mIG5lc3RlZCB6b25lcyBvZiB0aGUgc2FtZSB0eXBlIHRoZSBvbmUgXCJvbiB0b3BcIiBpcyBjb25zaWRlcmVkIGZpcnN0XG5cbiAgdmFyIGRyb3Bab25lc0Zyb21EZWVwVG9TaGFsbG93ID0gQXJyYXkuZnJvbShkcm9wWm9uZXMpLnNvcnQoZnVuY3Rpb24gKGR6MSwgZHoyKSB7XG4gICAgcmV0dXJuIGdldERlcHRoKGR6MikgLSBnZXREZXB0aChkejEpO1xuICB9KTtcbiAgLyoqXG4gICAqIFRoZSBtYWluIGZ1bmN0aW9uIGluIHRoaXMgbW9kdWxlLiBUcmFja3Mgd2hlcmUgZXZlcnl0aGluZyBpcy8gc2hvdWxkIGJlIGEgdGFrZSB0aGUgYWN0aW9uc1xuICAgKi9cblxuICBmdW5jdGlvbiBhbmROb3coKSB7XG4gICAgdmFyIGN1cnJlbnRDZW50ZXJPZkRyYWdnZWQgPSBmaW5kQ2VudGVyT2ZFbGVtZW50KGRyYWdnZWRFbCk7XG4gICAgdmFyIHNjcm9sbGVkID0gc2Nyb2xsSWZOZWVkZWQoY3VycmVudENlbnRlck9mRHJhZ2dlZCwgbGFzdERyb3Bab25lRm91bmQpOyAvLyB3ZSBvbmx5IHdhbnQgdG8gbWFrZSBhIG5ldyBkZWNpc2lvbiBhZnRlciB0aGUgZWxlbWVudCB3YXMgbW92ZWQgYSBiaXQgdG8gcHJldmVudCBmbGlja2VyaW5nXG5cbiAgICBpZiAoIXNjcm9sbGVkICYmIGxhc3RDZW50cmVQb3NpdGlvbk9mRHJhZ2dlZCAmJiBNYXRoLmFicyhsYXN0Q2VudHJlUG9zaXRpb25PZkRyYWdnZWQueCAtIGN1cnJlbnRDZW50ZXJPZkRyYWdnZWQueCkgPCBUT0xFUkFOQ0VfUFggJiYgTWF0aC5hYnMobGFzdENlbnRyZVBvc2l0aW9uT2ZEcmFnZ2VkLnkgLSBjdXJyZW50Q2VudGVyT2ZEcmFnZ2VkLnkpIDwgVE9MRVJBTkNFX1BYKSB7XG4gICAgICBuZXh0ID0gd2luZG93LnNldFRpbWVvdXQoYW5kTm93LCBpbnRlcnZhbE1zKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoaXNFbGVtZW50T2ZmRG9jdW1lbnQoZHJhZ2dlZEVsKSkge1xuICAgICAgcHJpbnREZWJ1ZyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBcIm9mZiBkb2N1bWVudFwiO1xuICAgICAgfSk7XG4gICAgICBkaXNwYXRjaERyYWdnZWRMZWZ0RG9jdW1lbnQoZHJhZ2dlZEVsKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsYXN0Q2VudHJlUG9zaXRpb25PZkRyYWdnZWQgPSBjdXJyZW50Q2VudGVyT2ZEcmFnZ2VkOyAvLyB0aGlzIGlzIGEgc2ltcGxlIGFsZ29yaXRobSwgcG90ZW50aWFsIGltcHJvdmVtZW50OiBmaXJzdCBsb29rIGF0IGxhc3REcm9wWm9uZUZvdW5kXG5cbiAgICB2YXIgaXNEcmFnZ2VkSW5BRHJvcFpvbmUgPSBmYWxzZTtcblxuICAgIHZhciBfaXRlcmF0b3IgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihkcm9wWm9uZXNGcm9tRGVlcFRvU2hhbGxvdyksXG4gICAgICAgIF9zdGVwO1xuXG4gICAgdHJ5IHtcbiAgICAgIGZvciAoX2l0ZXJhdG9yLnMoKTsgIShfc3RlcCA9IF9pdGVyYXRvci5uKCkpLmRvbmU7KSB7XG4gICAgICAgIHZhciBkeiA9IF9zdGVwLnZhbHVlO1xuICAgICAgICBpZiAoc2Nyb2xsZWQpIHJlc2V0SW5kZXhlc0NhY2hlRm9yRHoobGFzdERyb3Bab25lRm91bmQpO1xuICAgICAgICB2YXIgaW5kZXhPYmogPSBmaW5kV291bGRCZUluZGV4KGRyYWdnZWRFbCwgZHopO1xuXG4gICAgICAgIGlmIChpbmRleE9iaiA9PT0gbnVsbCkge1xuICAgICAgICAgIC8vIGl0IGlzIG5vdCBpbnNpZGVcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBpbmRleCA9IGluZGV4T2JqLmluZGV4O1xuICAgICAgICBpc0RyYWdnZWRJbkFEcm9wWm9uZSA9IHRydWU7IC8vIHRoZSBlbGVtZW50IGlzIG92ZXIgYSBjb250YWluZXJcblxuICAgICAgICBpZiAoZHogIT09IGxhc3REcm9wWm9uZUZvdW5kKSB7XG4gICAgICAgICAgbGFzdERyb3Bab25lRm91bmQgJiYgZGlzcGF0Y2hEcmFnZ2VkRWxlbWVudExlZnRDb250YWluZXJGb3JBbm90aGVyKGxhc3REcm9wWm9uZUZvdW5kLCBkcmFnZ2VkRWwsIGR6KTtcbiAgICAgICAgICBkaXNwYXRjaERyYWdnZWRFbGVtZW50RW50ZXJlZENvbnRhaW5lcihkeiwgaW5kZXhPYmosIGRyYWdnZWRFbCk7XG4gICAgICAgICAgbGFzdERyb3Bab25lRm91bmQgPSBkejtcbiAgICAgICAgfSBlbHNlIGlmIChpbmRleCAhPT0gbGFzdEluZGV4Rm91bmQpIHtcbiAgICAgICAgICBkaXNwYXRjaERyYWdnZWRFbGVtZW50SXNPdmVySW5kZXgoZHosIGluZGV4T2JqLCBkcmFnZ2VkRWwpO1xuICAgICAgICAgIGxhc3RJbmRleEZvdW5kID0gaW5kZXg7XG4gICAgICAgIH0gLy8gd2UgaGFuZGxlIGxvb3Bpbmcgd2l0aCB0aGUgJ2NvbnRpbnVlJyBzdGF0ZW1lbnQgYWJvdmVcblxuXG4gICAgICAgIGJyZWFrO1xuICAgICAgfSAvLyB0aGUgZmlyc3QgdGltZSB0aGUgZHJhZ2dlZCBlbGVtZW50IGlzIG5vdCBpbiBhbnkgZHJvcHpvbmUgd2UgbmVlZCB0byBub3RpZnkgdGhlIGxhc3QgZHJvcHpvbmUgaXQgd2FzIGluXG5cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIF9pdGVyYXRvci5lKGVycik7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIF9pdGVyYXRvci5mKCk7XG4gICAgfVxuXG4gICAgaWYgKCFpc0RyYWdnZWRJbkFEcm9wWm9uZSAmJiBsYXN0SXNEcmFnZ2VkSW5BRHJvcFpvbmUgJiYgbGFzdERyb3Bab25lRm91bmQpIHtcbiAgICAgIGRpc3BhdGNoRHJhZ2dlZEVsZW1lbnRMZWZ0Q29udGFpbmVyRm9yTm9uZShsYXN0RHJvcFpvbmVGb3VuZCwgZHJhZ2dlZEVsKTtcbiAgICAgIGxhc3REcm9wWm9uZUZvdW5kID0gdW5kZWZpbmVkO1xuICAgICAgbGFzdEluZGV4Rm91bmQgPSB1bmRlZmluZWQ7XG4gICAgICBsYXN0SXNEcmFnZ2VkSW5BRHJvcFpvbmUgPSBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGFzdElzRHJhZ2dlZEluQURyb3Bab25lID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBuZXh0ID0gd2luZG93LnNldFRpbWVvdXQoYW5kTm93LCBpbnRlcnZhbE1zKTtcbiAgfVxuXG4gIGFuZE5vdygpO1xufSAvLyBhc3N1bXB0aW9uIC0gd2UgY2FuIG9ubHkgb2JzZXJ2ZSBvbmUgZHJhZ2dlZCBlbGVtZW50IGF0IGEgdGltZSwgdGhpcyBjb3VsZCBiZSBjaGFuZ2VkIGluIHRoZSBmdXR1cmVcblxuZnVuY3Rpb24gdW5vYnNlcnZlKCkge1xuICBwcmludERlYnVnKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gXCJ1bm9ic2VydmluZ1wiO1xuICB9KTtcbiAgY2xlYXJUaW1lb3V0KG5leHQpO1xuICByZXNldFNjcm9sbGluZygpO1xuICByZXNldEluZGV4ZXNDYWNoZSgpO1xufVxuXG52YXIgSU5URVJWQUxfTVMkMSA9IDMwMDtcbnZhciBtb3VzZVBvc2l0aW9uO1xuLyoqXG4gKiBEbyBub3QgdXNlIHRoaXMhIGl0IGlzIHZpc2libGUgZm9yIHRlc3Rpbmcgb25seSB1bnRpbCB3ZSBnZXQgb3ZlciB0aGUgaXNzdWUgQ3lwcmVzcyBub3QgdHJpZ2dlcmluZyB0aGUgbW91c2Vtb3ZlIGxpc3RlbmVyc1xuICogLy8gVE9ETyAtIG1ha2UgcHJpdmF0ZSAocmVtb3ZlIGV4cG9ydClcbiAqIEBwYXJhbSB7e2NsaWVudFg6IG51bWJlciwgY2xpZW50WTogbnVtYmVyfX0gZVxuICovXG5cbmZ1bmN0aW9uIHVwZGF0ZU1vdXNlUG9zaXRpb24oZSkge1xuICB2YXIgYyA9IGUudG91Y2hlcyA/IGUudG91Y2hlc1swXSA6IGU7XG4gIG1vdXNlUG9zaXRpb24gPSB7XG4gICAgeDogYy5jbGllbnRYLFxuICAgIHk6IGMuY2xpZW50WVxuICB9O1xufVxuXG52YXIgX21ha2VTY3JvbGxlciQxID0gbWFrZVNjcm9sbGVyKCksXG4gICAgc2Nyb2xsSWZOZWVkZWQkMSA9IF9tYWtlU2Nyb2xsZXIkMS5zY3JvbGxJZk5lZWRlZCxcbiAgICByZXNldFNjcm9sbGluZyQxID0gX21ha2VTY3JvbGxlciQxLnJlc2V0U2Nyb2xsaW5nO1xuXG52YXIgbmV4dCQxO1xuXG5mdW5jdGlvbiBsb29wKCkge1xuICBpZiAobW91c2VQb3NpdGlvbikge1xuICAgIHZhciBzY3JvbGxlZCA9IHNjcm9sbElmTmVlZGVkJDEobW91c2VQb3NpdGlvbiwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KTtcbiAgICBpZiAoc2Nyb2xsZWQpIHJlc2V0SW5kZXhlc0NhY2hlKCk7XG4gIH1cblxuICBuZXh0JDEgPSB3aW5kb3cuc2V0VGltZW91dChsb29wLCBJTlRFUlZBTF9NUyQxKTtcbn1cbi8qKlxuICogd2lsbCBzdGFydCB3YXRjaGluZyB0aGUgbW91c2UgcG9pbnRlciBhbmQgc2Nyb2xsIHRoZSB3aW5kb3cgaWYgaXQgZ29lcyBuZXh0IHRvIHRoZSBlZGdlc1xuICovXG5cblxuZnVuY3Rpb24gYXJtV2luZG93U2Nyb2xsZXIoKSB7XG4gIHByaW50RGVidWcoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBcImFybWluZyB3aW5kb3cgc2Nyb2xsZXJcIjtcbiAgfSk7XG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIHVwZGF0ZU1vdXNlUG9zaXRpb24pO1xuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNobW92ZVwiLCB1cGRhdGVNb3VzZVBvc2l0aW9uKTtcbiAgbG9vcCgpO1xufVxuLyoqXG4gKiB3aWxsIHN0b3Agd2F0Y2hpbmcgdGhlIG1vdXNlIHBvaW50ZXIgYW5kIHdvbid0IHNjcm9sbCB0aGUgd2luZG93IGFueW1vcmVcbiAqL1xuXG5mdW5jdGlvbiBkaXNhcm1XaW5kb3dTY3JvbGxlcigpIHtcbiAgcHJpbnREZWJ1ZyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIFwiZGlzYXJtaW5nIHdpbmRvdyBzY3JvbGxlclwiO1xuICB9KTtcbiAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgdXBkYXRlTW91c2VQb3NpdGlvbik7XG4gIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwidG91Y2htb3ZlXCIsIHVwZGF0ZU1vdXNlUG9zaXRpb24pO1xuICBtb3VzZVBvc2l0aW9uID0gdW5kZWZpbmVkO1xuICB3aW5kb3cuY2xlYXJUaW1lb3V0KG5leHQkMSk7XG4gIHJlc2V0U2Nyb2xsaW5nJDEoKTtcbn1cblxuLyoqXG4gKiBGaXhlcyBzdmVsdGUgaXNzdWUgd2hlbiBjbG9uaW5nIG5vZGUgY29udGFpbmluZyAob3IgYmVpbmcpIDxzZWxlY3Q+IHdoaWNoIHdpbGwgbG9vc2UgaXQncyB2YWx1ZS5cbiAqIFNpbmNlIHN2ZWx0ZSBtYW5hZ2VzIHNlbGVjdCB2YWx1ZSBpbnRlcm5hbGx5LlxuICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vc3ZlbHRlanMvc3ZlbHRlL2lzc3Vlcy82NzE3XG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9pc2FhY0hhZ29lbC9zdmVsdGUtZG5kLWFjdGlvbi9pc3N1ZXMvMzA2XG4gKiBcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsIFxuICogQHJldHVybnMgXG4gKi9cbmZ1bmN0aW9uIHN2ZWx0ZU5vZGVDbG9uZShlbCkge1xuICB2YXIgY2xvbmVkID0gZWwuY2xvbmVOb2RlKHRydWUpO1xuICB2YXIgdmFsdWVzID0gW107XG4gIHZhciBlbElzU2VsZWN0ID0gZWwudGFnTmFtZSA9PT0gXCJTRUxFQ1RcIjtcbiAgdmFyIHNlbGVjdHMgPSBlbElzU2VsZWN0ID8gW2VsXSA6IF90b0NvbnN1bWFibGVBcnJheShlbC5xdWVyeVNlbGVjdG9yQWxsKCdzZWxlY3QnKSk7XG5cbiAgdmFyIF9pdGVyYXRvciA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKHNlbGVjdHMpLFxuICAgICAgX3N0ZXA7XG5cbiAgdHJ5IHtcbiAgICBmb3IgKF9pdGVyYXRvci5zKCk7ICEoX3N0ZXAgPSBfaXRlcmF0b3IubigpKS5kb25lOykge1xuICAgICAgdmFyIF9zZWxlY3QgPSBfc3RlcC52YWx1ZTtcbiAgICAgIHZhbHVlcy5wdXNoKF9zZWxlY3QudmFsdWUpO1xuICAgIH1cbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgX2l0ZXJhdG9yLmUoZXJyKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBfaXRlcmF0b3IuZigpO1xuICB9XG5cbiAgaWYgKHNlbGVjdHMubGVuZ3RoIDw9IDApIHtcbiAgICByZXR1cm4gY2xvbmVkO1xuICB9XG5cbiAgdmFyIGNsb25lZFNlbGVjdHMgPSBlbElzU2VsZWN0ID8gW2Nsb25lZF0gOiBfdG9Db25zdW1hYmxlQXJyYXkoY2xvbmVkLnF1ZXJ5U2VsZWN0b3JBbGwoJ3NlbGVjdCcpKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGNsb25lZFNlbGVjdHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc2VsZWN0ID0gY2xvbmVkU2VsZWN0c1tpXTtcbiAgICB2YXIgdmFsdWUgPSB2YWx1ZXNbaV07XG4gICAgdmFyIG9wdGlvbkVsID0gc2VsZWN0LnF1ZXJ5U2VsZWN0b3IoXCJvcHRpb25bdmFsdWU9XFxcIlwiLmNvbmNhdCh2YWx1ZSwgXCJcXFwiXCIpKTtcblxuICAgIGlmIChvcHRpb25FbCkge1xuICAgICAgb3B0aW9uRWwuc2V0QXR0cmlidXRlKCdzZWxlY3RlZCcsIHRydWUpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjbG9uZWQ7XG59XG5cbnZhciBUUkFOU0lUSU9OX0RVUkFUSU9OX1NFQ09ORFMgPSAwLjI7XG4vKipcbiAqIHByaXZhdGUgaGVscGVyIGZ1bmN0aW9uIC0gY3JlYXRlcyBhIHRyYW5zaXRpb24gc3RyaW5nIGZvciBhIHByb3BlcnR5XG4gKiBAcGFyYW0ge3N0cmluZ30gcHJvcGVydHlcbiAqIEByZXR1cm4ge3N0cmluZ30gLSB0aGUgdHJhbnNpdGlvbiBzdHJpbmdcbiAqL1xuXG5mdW5jdGlvbiB0cnMocHJvcGVydHkpIHtcbiAgcmV0dXJuIFwiXCIuY29uY2F0KHByb3BlcnR5LCBcIiBcIikuY29uY2F0KFRSQU5TSVRJT05fRFVSQVRJT05fU0VDT05EUywgXCJzIGVhc2VcIik7XG59XG4vKipcbiAqIGNsb25lcyB0aGUgZ2l2ZW4gZWxlbWVudCBhbmQgYXBwbGllcyBwcm9wZXIgc3R5bGVzIGFuZCB0cmFuc2l0aW9ucyB0byB0aGUgZHJhZ2dlZCBlbGVtZW50XG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBvcmlnaW5hbEVsZW1lbnRcbiAqIEBwYXJhbSB7UG9pbnR9IFtwb3NpdGlvbkNlbnRlck9uWFldXG4gKiBAcmV0dXJuIHtOb2RlfSAtIHRoZSBjbG9uZWQsIHN0eWxlZCBlbGVtZW50XG4gKi9cblxuXG5mdW5jdGlvbiBjcmVhdGVEcmFnZ2VkRWxlbWVudEZyb20ob3JpZ2luYWxFbGVtZW50LCBwb3NpdGlvbkNlbnRlck9uWFkpIHtcbiAgdmFyIHJlY3QgPSBvcmlnaW5hbEVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIHZhciBkcmFnZ2VkRWwgPSBzdmVsdGVOb2RlQ2xvbmUob3JpZ2luYWxFbGVtZW50KTtcbiAgY29weVN0eWxlc0Zyb21UbyhvcmlnaW5hbEVsZW1lbnQsIGRyYWdnZWRFbCk7XG4gIGRyYWdnZWRFbC5pZCA9IERSQUdHRURfRUxFTUVOVF9JRDtcbiAgZHJhZ2dlZEVsLnN0eWxlLnBvc2l0aW9uID0gXCJmaXhlZFwiO1xuICB2YXIgZWxUb3BQeCA9IHJlY3QudG9wO1xuICB2YXIgZWxMZWZ0UHggPSByZWN0LmxlZnQ7XG4gIGRyYWdnZWRFbC5zdHlsZS50b3AgPSBcIlwiLmNvbmNhdChlbFRvcFB4LCBcInB4XCIpO1xuICBkcmFnZ2VkRWwuc3R5bGUubGVmdCA9IFwiXCIuY29uY2F0KGVsTGVmdFB4LCBcInB4XCIpO1xuXG4gIGlmIChwb3NpdGlvbkNlbnRlck9uWFkpIHtcbiAgICB2YXIgY2VudGVyID0gZmluZENlbnRlcihyZWN0KTtcbiAgICBlbFRvcFB4IC09IGNlbnRlci55IC0gcG9zaXRpb25DZW50ZXJPblhZLnk7XG4gICAgZWxMZWZ0UHggLT0gY2VudGVyLnggLSBwb3NpdGlvbkNlbnRlck9uWFkueDtcbiAgICB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBkcmFnZ2VkRWwuc3R5bGUudG9wID0gXCJcIi5jb25jYXQoZWxUb3BQeCwgXCJweFwiKTtcbiAgICAgIGRyYWdnZWRFbC5zdHlsZS5sZWZ0ID0gXCJcIi5jb25jYXQoZWxMZWZ0UHgsIFwicHhcIik7XG4gICAgfSwgMCk7XG4gIH1cblxuICBkcmFnZ2VkRWwuc3R5bGUubWFyZ2luID0gXCIwXCI7IC8vIHdlIGNhbid0IGhhdmUgcmVsYXRpdmUgb3IgYXV0b21hdGljIGhlaWdodCBhbmQgd2lkdGggb3IgaXQgd2lsbCBicmVhayB0aGUgaWxsdXNpb25cblxuICBkcmFnZ2VkRWwuc3R5bGUuYm94U2l6aW5nID0gXCJib3JkZXItYm94XCI7XG4gIGRyYWdnZWRFbC5zdHlsZS5oZWlnaHQgPSBcIlwiLmNvbmNhdChyZWN0LmhlaWdodCwgXCJweFwiKTtcbiAgZHJhZ2dlZEVsLnN0eWxlLndpZHRoID0gXCJcIi5jb25jYXQocmVjdC53aWR0aCwgXCJweFwiKTtcbiAgZHJhZ2dlZEVsLnN0eWxlLnRyYW5zaXRpb24gPSBcIlwiLmNvbmNhdCh0cnMoXCJ0b3BcIiksIFwiLCBcIikuY29uY2F0KHRycyhcImxlZnRcIiksIFwiLCBcIikuY29uY2F0KHRycyhcImJhY2tncm91bmQtY29sb3JcIiksIFwiLCBcIikuY29uY2F0KHRycyhcIm9wYWNpdHlcIiksIFwiLCBcIikuY29uY2F0KHRycyhcImNvbG9yXCIpLCBcIiBcIik7IC8vIHRoaXMgaXMgYSB3b3JrYXJvdW5kIGZvciBhIHN0cmFuZ2UgYnJvd3NlciBidWcgdGhhdCBjYXVzZXMgdGhlIHJpZ2h0IGJvcmRlciB0byBkaXNhcHBlYXIgd2hlbiBhbGwgdGhlIHRyYW5zaXRpb25zIGFyZSBhZGRlZCBhdCB0aGUgc2FtZSB0aW1lXG5cbiAgd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBkcmFnZ2VkRWwuc3R5bGUudHJhbnNpdGlvbiArPSBcIiwgXCIuY29uY2F0KHRycyhcIndpZHRoXCIpLCBcIiwgXCIpLmNvbmNhdCh0cnMoXCJoZWlnaHRcIikpO1xuICB9LCAwKTtcbiAgZHJhZ2dlZEVsLnN0eWxlLnpJbmRleCA9IFwiOTk5OVwiO1xuICBkcmFnZ2VkRWwuc3R5bGUuY3Vyc29yID0gXCJncmFiYmluZ1wiO1xuICByZXR1cm4gZHJhZ2dlZEVsO1xufVxuLyoqXG4gKiBzdHlsZXMgdGhlIGRyYWdnZWQgZWxlbWVudCB0byBhICdkcm9wcGVkJyBzdGF0ZVxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZHJhZ2dlZEVsXG4gKi9cblxuZnVuY3Rpb24gbW92ZURyYWdnZWRFbGVtZW50VG9XYXNEcm9wcGVkU3RhdGUoZHJhZ2dlZEVsKSB7XG4gIGRyYWdnZWRFbC5zdHlsZS5jdXJzb3IgPSBcImdyYWJcIjtcbn1cbi8qKlxuICogTW9ycGhzIHRoZSBkcmFnZ2VkIGVsZW1lbnQgc3R5bGUsIG1haW50YWlucyB0aGUgbW91c2UgcG9pbnRlciB3aXRoaW4gdGhlIGVsZW1lbnRcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGRyYWdnZWRFbFxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gY29weUZyb21FbCAtIHRoZSBlbGVtZW50IHRoZSBkcmFnZ2VkIGVsZW1lbnQgc2hvdWxkIGxvb2sgbGlrZSwgdHlwaWNhbGx5IHRoZSBzaGFkb3cgZWxlbWVudFxuICogQHBhcmFtIHtudW1iZXJ9IGN1cnJlbnRNb3VzZVhcbiAqIEBwYXJhbSB7bnVtYmVyfSBjdXJyZW50TW91c2VZXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSB0cmFuc2Zvcm1EcmFnZ2VkRWxlbWVudCAtIGZ1bmN0aW9uIHRvIHRyYW5zZm9ybSB0aGUgZHJhZ2dlZCBlbGVtZW50LCBkb2VzIG5vdGhpbmcgYnkgZGVmYXVsdC5cbiAqL1xuXG5mdW5jdGlvbiBtb3JwaERyYWdnZWRFbGVtZW50VG9CZUxpa2UoZHJhZ2dlZEVsLCBjb3B5RnJvbUVsLCBjdXJyZW50TW91c2VYLCBjdXJyZW50TW91c2VZLCB0cmFuc2Zvcm1EcmFnZ2VkRWxlbWVudCkge1xuICB2YXIgbmV3UmVjdCA9IGNvcHlGcm9tRWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIHZhciBkcmFnZ2VkRWxSZWN0ID0gZHJhZ2dlZEVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICB2YXIgd2lkdGhDaGFuZ2UgPSBuZXdSZWN0LndpZHRoIC0gZHJhZ2dlZEVsUmVjdC53aWR0aDtcbiAgdmFyIGhlaWdodENoYW5nZSA9IG5ld1JlY3QuaGVpZ2h0IC0gZHJhZ2dlZEVsUmVjdC5oZWlnaHQ7XG5cbiAgaWYgKHdpZHRoQ2hhbmdlIHx8IGhlaWdodENoYW5nZSkge1xuICAgIHZhciByZWxhdGl2ZURpc3RhbmNlT2ZNb3VzZVBvaW50ZXJGcm9tRHJhZ2dlZFNpZGVzID0ge1xuICAgICAgbGVmdDogKGN1cnJlbnRNb3VzZVggLSBkcmFnZ2VkRWxSZWN0LmxlZnQpIC8gZHJhZ2dlZEVsUmVjdC53aWR0aCxcbiAgICAgIHRvcDogKGN1cnJlbnRNb3VzZVkgLSBkcmFnZ2VkRWxSZWN0LnRvcCkgLyBkcmFnZ2VkRWxSZWN0LmhlaWdodFxuICAgIH07XG4gICAgZHJhZ2dlZEVsLnN0eWxlLmhlaWdodCA9IFwiXCIuY29uY2F0KG5ld1JlY3QuaGVpZ2h0LCBcInB4XCIpO1xuICAgIGRyYWdnZWRFbC5zdHlsZS53aWR0aCA9IFwiXCIuY29uY2F0KG5ld1JlY3Qud2lkdGgsIFwicHhcIik7XG4gICAgZHJhZ2dlZEVsLnN0eWxlLmxlZnQgPSBcIlwiLmNvbmNhdChwYXJzZUZsb2F0KGRyYWdnZWRFbC5zdHlsZS5sZWZ0KSAtIHJlbGF0aXZlRGlzdGFuY2VPZk1vdXNlUG9pbnRlckZyb21EcmFnZ2VkU2lkZXMubGVmdCAqIHdpZHRoQ2hhbmdlLCBcInB4XCIpO1xuICAgIGRyYWdnZWRFbC5zdHlsZS50b3AgPSBcIlwiLmNvbmNhdChwYXJzZUZsb2F0KGRyYWdnZWRFbC5zdHlsZS50b3ApIC0gcmVsYXRpdmVEaXN0YW5jZU9mTW91c2VQb2ludGVyRnJvbURyYWdnZWRTaWRlcy50b3AgKiBoZWlnaHRDaGFuZ2UsIFwicHhcIik7XG4gIH0gLy8vIG90aGVyIHByb3BlcnRpZXNcblxuXG4gIGNvcHlTdHlsZXNGcm9tVG8oY29weUZyb21FbCwgZHJhZ2dlZEVsKTtcbiAgdHJhbnNmb3JtRHJhZ2dlZEVsZW1lbnQoKTtcbn1cbi8qKlxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gY29weUZyb21FbFxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gY29weVRvRWxcbiAqL1xuXG5mdW5jdGlvbiBjb3B5U3R5bGVzRnJvbVRvKGNvcHlGcm9tRWwsIGNvcHlUb0VsKSB7XG4gIHZhciBjb21wdXRlZFN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoY29weUZyb21FbCk7XG4gIEFycmF5LmZyb20oY29tcHV0ZWRTdHlsZSkuZmlsdGVyKGZ1bmN0aW9uIChzKSB7XG4gICAgcmV0dXJuIHMuc3RhcnRzV2l0aChcImJhY2tncm91bmRcIikgfHwgcy5zdGFydHNXaXRoKFwicGFkZGluZ1wiKSB8fCBzLnN0YXJ0c1dpdGgoXCJmb250XCIpIHx8IHMuc3RhcnRzV2l0aChcInRleHRcIikgfHwgcy5zdGFydHNXaXRoKFwiYWxpZ25cIikgfHwgcy5zdGFydHNXaXRoKFwianVzdGlmeVwiKSB8fCBzLnN0YXJ0c1dpdGgoXCJkaXNwbGF5XCIpIHx8IHMuc3RhcnRzV2l0aChcImZsZXhcIikgfHwgcy5zdGFydHNXaXRoKFwiYm9yZGVyXCIpIHx8IHMgPT09IFwib3BhY2l0eVwiIHx8IHMgPT09IFwiY29sb3JcIiB8fCBzID09PSBcImxpc3Qtc3R5bGUtdHlwZVwiO1xuICB9KS5mb3JFYWNoKGZ1bmN0aW9uIChzKSB7XG4gICAgcmV0dXJuIGNvcHlUb0VsLnN0eWxlLnNldFByb3BlcnR5KHMsIGNvbXB1dGVkU3R5bGUuZ2V0UHJvcGVydHlWYWx1ZShzKSwgY29tcHV0ZWRTdHlsZS5nZXRQcm9wZXJ0eVByaW9yaXR5KHMpKTtcbiAgfSk7XG59XG4vKipcbiAqIG1ha2VzIHRoZSBlbGVtZW50IGNvbXBhdGlibGUgd2l0aCBiZWluZyBkcmFnZ2FibGVcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGRyYWdnYWJsZUVsXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGRyYWdEaXNhYmxlZFxuICovXG5cblxuZnVuY3Rpb24gc3R5bGVEcmFnZ2FibGUoZHJhZ2dhYmxlRWwsIGRyYWdEaXNhYmxlZCkge1xuICBkcmFnZ2FibGVFbC5kcmFnZ2FibGUgPSBmYWxzZTtcblxuICBkcmFnZ2FibGVFbC5vbmRyYWdzdGFydCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH07XG5cbiAgaWYgKCFkcmFnRGlzYWJsZWQpIHtcbiAgICBkcmFnZ2FibGVFbC5zdHlsZS51c2VyU2VsZWN0ID0gXCJub25lXCI7XG4gICAgZHJhZ2dhYmxlRWwuc3R5bGUuV2Via2l0VXNlclNlbGVjdCA9IFwibm9uZVwiO1xuICAgIGRyYWdnYWJsZUVsLnN0eWxlLmN1cnNvciA9IFwiZ3JhYlwiO1xuICB9IGVsc2Uge1xuICAgIGRyYWdnYWJsZUVsLnN0eWxlLnVzZXJTZWxlY3QgPSBcIlwiO1xuICAgIGRyYWdnYWJsZUVsLnN0eWxlLldlYmtpdFVzZXJTZWxlY3QgPSBcIlwiO1xuICAgIGRyYWdnYWJsZUVsLnN0eWxlLmN1cnNvciA9IFwiXCI7XG4gIH1cbn1cbi8qKlxuICogSGlkZXMgdGhlIHByb3ZpZGVkIGVsZW1lbnQgc28gdGhhdCBpdCBjYW4gc3RheSBpbiB0aGUgZG9tIHdpdGhvdXQgaW50ZXJydXB0aW5nXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBkcmFnVGFyZ2V0XG4gKi9cblxuZnVuY3Rpb24gaGlkZUVsZW1lbnQoZHJhZ1RhcmdldCkge1xuICBkcmFnVGFyZ2V0LnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgZHJhZ1RhcmdldC5zdHlsZS5wb3NpdGlvbiA9IFwiZml4ZWRcIjtcbiAgZHJhZ1RhcmdldC5zdHlsZS56SW5kZXggPSBcIi01XCI7XG59XG4vKipcbiAqIHN0eWxlcyB0aGUgc2hhZG93IGVsZW1lbnRcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHNoYWRvd0VsXG4gKi9cblxuZnVuY3Rpb24gZGVjb3JhdGVTaGFkb3dFbChzaGFkb3dFbCkge1xuICBzaGFkb3dFbC5zdHlsZS52aXNpYmlsaXR5ID0gXCJoaWRkZW5cIjtcbiAgc2hhZG93RWwuc2V0QXR0cmlidXRlKFNIQURPV19FTEVNRU5UX0FUVFJJQlVURV9OQU1FLCBcInRydWVcIik7XG59XG4vKipcbiAqIHVuZG8gdGhlIHN0eWxlcyB0aGUgc2hhZG93IGVsZW1lbnRcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHNoYWRvd0VsXG4gKi9cblxuZnVuY3Rpb24gdW5EZWNvcmF0ZVNoYWRvd0VsZW1lbnQoc2hhZG93RWwpIHtcbiAgc2hhZG93RWwuc3R5bGUudmlzaWJpbGl0eSA9IFwiXCI7XG4gIHNoYWRvd0VsLnJlbW92ZUF0dHJpYnV0ZShTSEFET1dfRUxFTUVOVF9BVFRSSUJVVEVfTkFNRSk7XG59XG4vKipcbiAqIHdpbGwgbWFyayB0aGUgZ2l2ZW4gZHJvcHpvbmVzIGFzIHZpc3VhbGx5IGFjdGl2ZVxuICogQHBhcmFtIHtBcnJheTxIVE1MRWxlbWVudD59IGRyb3Bab25lc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gZ2V0U3R5bGVzIC0gbWFwcyBhIGRyb3B6b25lIHRvIGEgc3R5bGVzIG9iamVjdCAoc28gdGhlIHN0eWxlcyBjYW4gYmUgcmVtb3ZlZClcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGdldENsYXNzZXMgLSBtYXBzIGEgZHJvcHpvbmUgdG8gYSBjbGFzc0xpc3RcbiAqL1xuXG5mdW5jdGlvbiBzdHlsZUFjdGl2ZURyb3Bab25lcyhkcm9wWm9uZXMpIHtcbiAgdmFyIGdldFN0eWxlcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZnVuY3Rpb24gKCkge307XG4gIHZhciBnZXRDbGFzc2VzID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9O1xuICBkcm9wWm9uZXMuZm9yRWFjaChmdW5jdGlvbiAoZHopIHtcbiAgICB2YXIgc3R5bGVzID0gZ2V0U3R5bGVzKGR6KTtcbiAgICBPYmplY3Qua2V5cyhzdHlsZXMpLmZvckVhY2goZnVuY3Rpb24gKHN0eWxlKSB7XG4gICAgICBkei5zdHlsZVtzdHlsZV0gPSBzdHlsZXNbc3R5bGVdO1xuICAgIH0pO1xuICAgIGdldENsYXNzZXMoZHopLmZvckVhY2goZnVuY3Rpb24gKGMpIHtcbiAgICAgIHJldHVybiBkei5jbGFzc0xpc3QuYWRkKGMpO1xuICAgIH0pO1xuICB9KTtcbn1cbi8qKlxuICogd2lsbCByZW1vdmUgdGhlICdhY3RpdmUnIHN0eWxpbmcgZnJvbSBnaXZlbiBkcm9wem9uZXNcbiAqIEBwYXJhbSB7QXJyYXk8SFRNTEVsZW1lbnQ+fSBkcm9wWm9uZXNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGdldFN0eWxlcyAtIG1hcHMgYSBkcm9wem9uZSB0byBhIHN0eWxlcyBvYmplY3RcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGdldENsYXNzZXMgLSBtYXBzIGEgZHJvcHpvbmUgdG8gYSBjbGFzc0xpc3RcbiAqL1xuXG5mdW5jdGlvbiBzdHlsZUluYWN0aXZlRHJvcFpvbmVzKGRyb3Bab25lcykge1xuICB2YXIgZ2V0U3R5bGVzID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBmdW5jdGlvbiAoKSB7fTtcbiAgdmFyIGdldENsYXNzZXMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gW107XG4gIH07XG4gIGRyb3Bab25lcy5mb3JFYWNoKGZ1bmN0aW9uIChkeikge1xuICAgIHZhciBzdHlsZXMgPSBnZXRTdHlsZXMoZHopO1xuICAgIE9iamVjdC5rZXlzKHN0eWxlcykuZm9yRWFjaChmdW5jdGlvbiAoc3R5bGUpIHtcbiAgICAgIGR6LnN0eWxlW3N0eWxlXSA9IFwiXCI7XG4gICAgfSk7XG4gICAgZ2V0Q2xhc3NlcyhkeikuZm9yRWFjaChmdW5jdGlvbiAoYykge1xuICAgICAgcmV0dXJuIGR6LmNsYXNzTGlzdC5jb250YWlucyhjKSAmJiBkei5jbGFzc0xpc3QucmVtb3ZlKGMpO1xuICAgIH0pO1xuICB9KTtcbn1cbi8qKlxuICogd2lsbCBwcmV2ZW50IHRoZSBwcm92aWRlZCBlbGVtZW50IGZyb20gc2hyaW5raW5nIGJ5IHNldHRpbmcgaXRzIG1pbldpZHRoIGFuZCBtaW5IZWlnaHQgdG8gdGhlIGN1cnJlbnQgd2lkdGggYW5kIGhlaWdodCB2YWx1ZXNcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsXG4gKiBAcmV0dXJuIHtmdW5jdGlvbigpOiB2b2lkfSAtIHJ1biB0aGlzIGZ1bmN0aW9uIHRvIHVuZG8gdGhlIG9wZXJhdGlvbiBhbmQgcmVzdG9yZSB0aGUgb3JpZ2luYWwgdmFsdWVzXG4gKi9cblxuZnVuY3Rpb24gcHJldmVudFNocmlua2luZyhlbCkge1xuICB2YXIgb3JpZ2luYWxNaW5IZWlnaHQgPSBlbC5zdHlsZS5taW5IZWlnaHQ7XG4gIGVsLnN0eWxlLm1pbkhlaWdodCA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsKS5nZXRQcm9wZXJ0eVZhbHVlKFwiaGVpZ2h0XCIpO1xuICB2YXIgb3JpZ2luYWxNaW5XaWR0aCA9IGVsLnN0eWxlLm1pbldpZHRoO1xuICBlbC5zdHlsZS5taW5XaWR0aCA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsKS5nZXRQcm9wZXJ0eVZhbHVlKFwid2lkdGhcIik7XG4gIHJldHVybiBmdW5jdGlvbiB1bmRvKCkge1xuICAgIGVsLnN0eWxlLm1pbkhlaWdodCA9IG9yaWdpbmFsTWluSGVpZ2h0O1xuICAgIGVsLnN0eWxlLm1pbldpZHRoID0gb3JpZ2luYWxNaW5XaWR0aDtcbiAgfTtcbn1cblxudmFyIERFRkFVTFRfRFJPUF9aT05FX1RZUEUgPSBcIi0tYW55LS1cIjtcbnZhciBNSU5fT0JTRVJWQVRJT05fSU5URVJWQUxfTVMgPSAxMDA7XG52YXIgTUlOX01PVkVNRU5UX0JFRk9SRV9EUkFHX1NUQVJUX1BYID0gMztcbnZhciBERUZBVUxUX0RST1BfVEFSR0VUX1NUWUxFID0ge1xuICBvdXRsaW5lOiBcInJnYmEoMjU1LCAyNTUsIDEwMiwgMC43KSBzb2xpZCAycHhcIlxufTtcbnZhciBvcmlnaW5hbERyYWdUYXJnZXQ7XG52YXIgZHJhZ2dlZEVsO1xudmFyIGRyYWdnZWRFbERhdGE7XG52YXIgZHJhZ2dlZEVsVHlwZTtcbnZhciBvcmlnaW5Ecm9wWm9uZTtcbnZhciBvcmlnaW5JbmRleDtcbnZhciBzaGFkb3dFbERhdGE7XG52YXIgc2hhZG93RWxEcm9wWm9uZTtcbnZhciBkcmFnU3RhcnRNb3VzZVBvc2l0aW9uO1xudmFyIGN1cnJlbnRNb3VzZVBvc2l0aW9uO1xudmFyIGlzV29ya2luZ09uUHJldmlvdXNEcmFnID0gZmFsc2U7XG52YXIgZmluYWxpemluZ1ByZXZpb3VzRHJhZyA9IGZhbHNlO1xudmFyIHVubG9ja09yaWdpbkR6TWluRGltZW5zaW9ucztcbnZhciBpc0RyYWdnZWRPdXRzaWRlT2ZBbnlEeiA9IGZhbHNlO1xudmFyIHNjaGVkdWxlZEZvclJlbW92YWxBZnRlckRyb3AgPSBbXTsgLy8gYSBtYXAgZnJvbSB0eXBlIHRvIGEgc2V0IG9mIGRyb3Atem9uZXNcblxudmFyIHR5cGVUb0Ryb3Bab25lcyA9IG5ldyBNYXAoKTsgLy8gaW1wb3J0YW50IC0gdGhpcyBpcyBuZWVkZWQgYmVjYXVzZSBvdGhlcndpc2UgdGhlIGNvbmZpZyB0aGF0IHdvdWxkIGJlIHVzZWQgZm9yIGV2ZXJ5b25lIGlzIHRoZSBjb25maWcgb2YgdGhlIGVsZW1lbnQgdGhhdCBjcmVhdGVkIHRoZSBldmVudCBsaXN0ZW5lcnNcblxudmFyIGR6VG9Db25maWcgPSBuZXcgTWFwKCk7IC8vIHRoaXMgaXMgbmVlZGVkIGluIG9yZGVyIHRvIGJlIGFibGUgdG8gY2xlYW51cCBvbGQgbGlzdGVuZXJzIGFuZCBhdm9pZCBzdGFsZSBjbG9zdXJlcyBpc3N1ZXMgKGFzIHRoZSBsaXN0ZW5lciBpcyBkZWZpbmVkIHdpdGhpbiBlYWNoIHpvbmUpXG5cbnZhciBlbFRvTW91c2VEb3duTGlzdGVuZXIgPSBuZXcgV2Vha01hcCgpO1xuLyogZHJvcC16b25lcyByZWdpc3RyYXRpb24gbWFuYWdlbWVudCAqL1xuXG5mdW5jdGlvbiByZWdpc3RlckRyb3Bab25lKGRyb3Bab25lRWwsIHR5cGUpIHtcbiAgcHJpbnREZWJ1ZyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIFwicmVnaXN0ZXJpbmcgZHJvcC16b25lIGlmIGFic2VudFwiO1xuICB9KTtcblxuICBpZiAoIXR5cGVUb0Ryb3Bab25lcy5oYXModHlwZSkpIHtcbiAgICB0eXBlVG9Ecm9wWm9uZXMuc2V0KHR5cGUsIG5ldyBTZXQoKSk7XG4gIH1cblxuICBpZiAoIXR5cGVUb0Ryb3Bab25lcy5nZXQodHlwZSkuaGFzKGRyb3Bab25lRWwpKSB7XG4gICAgdHlwZVRvRHJvcFpvbmVzLmdldCh0eXBlKS5hZGQoZHJvcFpvbmVFbCk7XG4gICAgaW5jcmVtZW50QWN0aXZlRHJvcFpvbmVDb3VudCgpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHVucmVnaXN0ZXJEcm9wWm9uZShkcm9wWm9uZUVsLCB0eXBlKSB7XG4gIHR5cGVUb0Ryb3Bab25lcy5nZXQodHlwZSlbXCJkZWxldGVcIl0oZHJvcFpvbmVFbCk7XG4gIGRlY3JlbWVudEFjdGl2ZURyb3Bab25lQ291bnQoKTtcblxuICBpZiAodHlwZVRvRHJvcFpvbmVzLmdldCh0eXBlKS5zaXplID09PSAwKSB7XG4gICAgdHlwZVRvRHJvcFpvbmVzW1wiZGVsZXRlXCJdKHR5cGUpO1xuICB9XG59XG4vKiBmdW5jdGlvbnMgdG8gbWFuYWdlIG9ic2VydmluZyB0aGUgZHJhZ2dlZCBlbGVtZW50IGFuZCB0cmlnZ2VyIGN1c3RvbSBkcmFnLWV2ZW50cyAqL1xuXG5cbmZ1bmN0aW9uIHdhdGNoRHJhZ2dlZEVsZW1lbnQoKSB7XG4gIHByaW50RGVidWcoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBcIndhdGNoaW5nIGRyYWdnZWQgZWxlbWVudFwiO1xuICB9KTtcbiAgYXJtV2luZG93U2Nyb2xsZXIoKTtcbiAgdmFyIGRyb3Bab25lcyA9IHR5cGVUb0Ryb3Bab25lcy5nZXQoZHJhZ2dlZEVsVHlwZSk7XG5cbiAgdmFyIF9pdGVyYXRvciA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGRyb3Bab25lcyksXG4gICAgICBfc3RlcDtcblxuICB0cnkge1xuICAgIGZvciAoX2l0ZXJhdG9yLnMoKTsgIShfc3RlcCA9IF9pdGVyYXRvci5uKCkpLmRvbmU7KSB7XG4gICAgICB2YXIgZHogPSBfc3RlcC52YWx1ZTtcbiAgICAgIGR6LmFkZEV2ZW50TGlzdGVuZXIoRFJBR0dFRF9FTlRFUkVEX0VWRU5UX05BTUUsIGhhbmRsZURyYWdnZWRFbnRlcmVkKTtcbiAgICAgIGR6LmFkZEV2ZW50TGlzdGVuZXIoRFJBR0dFRF9MRUZUX0VWRU5UX05BTUUsIGhhbmRsZURyYWdnZWRMZWZ0KTtcbiAgICAgIGR6LmFkZEV2ZW50TGlzdGVuZXIoRFJBR0dFRF9PVkVSX0lOREVYX0VWRU5UX05BTUUsIGhhbmRsZURyYWdnZWRJc092ZXJJbmRleCk7XG4gICAgfVxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBfaXRlcmF0b3IuZShlcnIpO1xuICB9IGZpbmFsbHkge1xuICAgIF9pdGVyYXRvci5mKCk7XG4gIH1cblxuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihEUkFHR0VEX0xFRlRfRE9DVU1FTlRfRVZFTlRfTkFNRSwgaGFuZGxlRHJvcCk7IC8vIGl0IGlzIGltcG9ydGFudCB0aGF0IHdlIGRvbid0IGhhdmUgYW4gaW50ZXJ2YWwgdGhhdCBpcyBmYXN0ZXIgdGhhbiB0aGUgZmxpcCBkdXJhdGlvbiBiZWNhdXNlIGl0IGNhbiBjYXVzZSBlbGVtZW50cyB0byBqdW1wIGJhY2ggYW5kIGZvcnRoXG5cbiAgdmFyIG9ic2VydmF0aW9uSW50ZXJ2YWxNcyA9IE1hdGgubWF4LmFwcGx5KE1hdGgsIFtNSU5fT0JTRVJWQVRJT05fSU5URVJWQUxfTVNdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoQXJyYXkuZnJvbShkcm9wWm9uZXMua2V5cygpKS5tYXAoZnVuY3Rpb24gKGR6KSB7XG4gICAgcmV0dXJuIGR6VG9Db25maWcuZ2V0KGR6KS5kcm9wQW5pbWF0aW9uRHVyYXRpb25NcztcbiAgfSkpKSk7XG4gIG9ic2VydmUoZHJhZ2dlZEVsLCBkcm9wWm9uZXMsIG9ic2VydmF0aW9uSW50ZXJ2YWxNcyAqIDEuMDcpO1xufVxuXG5mdW5jdGlvbiB1bldhdGNoRHJhZ2dlZEVsZW1lbnQoKSB7XG4gIHByaW50RGVidWcoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBcInVud2F0Y2hpbmcgZHJhZ2dlZCBlbGVtZW50XCI7XG4gIH0pO1xuICBkaXNhcm1XaW5kb3dTY3JvbGxlcigpO1xuICB2YXIgZHJvcFpvbmVzID0gdHlwZVRvRHJvcFpvbmVzLmdldChkcmFnZ2VkRWxUeXBlKTtcblxuICB2YXIgX2l0ZXJhdG9yMiA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGRyb3Bab25lcyksXG4gICAgICBfc3RlcDI7XG5cbiAgdHJ5IHtcbiAgICBmb3IgKF9pdGVyYXRvcjIucygpOyAhKF9zdGVwMiA9IF9pdGVyYXRvcjIubigpKS5kb25lOykge1xuICAgICAgdmFyIGR6ID0gX3N0ZXAyLnZhbHVlO1xuICAgICAgZHoucmVtb3ZlRXZlbnRMaXN0ZW5lcihEUkFHR0VEX0VOVEVSRURfRVZFTlRfTkFNRSwgaGFuZGxlRHJhZ2dlZEVudGVyZWQpO1xuICAgICAgZHoucmVtb3ZlRXZlbnRMaXN0ZW5lcihEUkFHR0VEX0xFRlRfRVZFTlRfTkFNRSwgaGFuZGxlRHJhZ2dlZExlZnQpO1xuICAgICAgZHoucmVtb3ZlRXZlbnRMaXN0ZW5lcihEUkFHR0VEX09WRVJfSU5ERVhfRVZFTlRfTkFNRSwgaGFuZGxlRHJhZ2dlZElzT3ZlckluZGV4KTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIF9pdGVyYXRvcjIuZShlcnIpO1xuICB9IGZpbmFsbHkge1xuICAgIF9pdGVyYXRvcjIuZigpO1xuICB9XG5cbiAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoRFJBR0dFRF9MRUZUX0RPQ1VNRU5UX0VWRU5UX05BTUUsIGhhbmRsZURyb3ApO1xuICB1bm9ic2VydmUoKTtcbn0gLy8gZmluZHMgdGhlIGluaXRpYWwgcGxhY2Vob2xkZXIgdGhhdCBpcyBwbGFjZWQgdGhlcmUgb24gZHJhZyBzdGFydFxuXG5cbmZ1bmN0aW9uIGZpbmRTaGFkb3dQbGFjZUhvbGRlcklkeChpdGVtcykge1xuICByZXR1cm4gaXRlbXMuZmluZEluZGV4KGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgcmV0dXJuIGl0ZW1bSVRFTV9JRF9LRVldID09PSBTSEFET1dfUExBQ0VIT0xERVJfSVRFTV9JRDtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGZpbmRTaGFkb3dFbGVtZW50SWR4KGl0ZW1zKSB7XG4gIC8vIGNoZWNraW5nIHRoYXQgdGhlIGlkIGlzIG5vdCB0aGUgcGxhY2Vob2xkZXIncyBmb3IgRHJhZ3VsYSBsaWtlIHVzZWNhc2VzXG4gIHJldHVybiBpdGVtcy5maW5kSW5kZXgoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICByZXR1cm4gISFpdGVtW1NIQURPV19JVEVNX01BUktFUl9QUk9QRVJUWV9OQU1FXSAmJiBpdGVtW0lURU1fSURfS0VZXSAhPT0gU0hBRE9XX1BMQUNFSE9MREVSX0lURU1fSUQ7XG4gIH0pO1xufVxuLyogY3VzdG9tIGRyYWctZXZlbnRzIGhhbmRsZXJzICovXG5cblxuZnVuY3Rpb24gaGFuZGxlRHJhZ2dlZEVudGVyZWQoZSkge1xuICBwcmludERlYnVnKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gW1wiZHJhZ2dlZCBlbnRlcmVkXCIsIGUuY3VycmVudFRhcmdldCwgZS5kZXRhaWxdO1xuICB9KTtcblxuICB2YXIgX2R6VG9Db25maWckZ2V0ID0gZHpUb0NvbmZpZy5nZXQoZS5jdXJyZW50VGFyZ2V0KSxcbiAgICAgIGl0ZW1zID0gX2R6VG9Db25maWckZ2V0Lml0ZW1zLFxuICAgICAgZHJvcEZyb21PdGhlcnNEaXNhYmxlZCA9IF9kelRvQ29uZmlnJGdldC5kcm9wRnJvbU90aGVyc0Rpc2FibGVkO1xuXG4gIGlmIChkcm9wRnJvbU90aGVyc0Rpc2FibGVkICYmIGUuY3VycmVudFRhcmdldCAhPT0gb3JpZ2luRHJvcFpvbmUpIHtcbiAgICBwcmludERlYnVnKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBcImlnbm9yaW5nIGRyYWdnZWQgZW50ZXJlZCBiZWNhdXNlIGRyb3AgaXMgY3VycmVudGx5IGRpc2FibGVkXCI7XG4gICAgfSk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaXNEcmFnZ2VkT3V0c2lkZU9mQW55RHogPSBmYWxzZTsgLy8gdGhpcyBkZWFscyB3aXRoIGFub3RoZXIgcmFjZSBjb25kaXRpb24uIGluIHJhcmUgb2NjYXNpb25zIChzdXBlciByYXBpZCBvcGVyYXRpb25zKSB0aGUgbGlzdCBoYXNuJ3QgdXBkYXRlZCB5ZXRcblxuICBpdGVtcyA9IGl0ZW1zLmZpbHRlcihmdW5jdGlvbiAoaXRlbSkge1xuICAgIHJldHVybiBpdGVtW0lURU1fSURfS0VZXSAhPT0gc2hhZG93RWxEYXRhW0lURU1fSURfS0VZXTtcbiAgfSk7XG4gIHByaW50RGVidWcoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBcImRyYWdnZWQgZW50ZXJlZCBpdGVtcyBcIi5jb25jYXQodG9TdHJpbmcoaXRlbXMpKTtcbiAgfSk7XG5cbiAgaWYgKG9yaWdpbkRyb3Bab25lICE9PSBlLmN1cnJlbnRUYXJnZXQpIHtcbiAgICB2YXIgb3JpZ2luWm9uZUl0ZW1zID0gZHpUb0NvbmZpZy5nZXQob3JpZ2luRHJvcFpvbmUpLml0ZW1zO1xuICAgIHZhciBuZXdPcmlnaW5ab25lSXRlbXMgPSBvcmlnaW5ab25lSXRlbXMuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICByZXR1cm4gIWl0ZW1bU0hBRE9XX0lURU1fTUFSS0VSX1BST1BFUlRZX05BTUVdO1xuICAgIH0pO1xuICAgIGRpc3BhdGNoQ29uc2lkZXJFdmVudChvcmlnaW5Ecm9wWm9uZSwgbmV3T3JpZ2luWm9uZUl0ZW1zLCB7XG4gICAgICB0cmlnZ2VyOiBUUklHR0VSUy5EUkFHR0VEX0VOVEVSRURfQU5PVEhFUixcbiAgICAgIGlkOiBkcmFnZ2VkRWxEYXRhW0lURU1fSURfS0VZXSxcbiAgICAgIHNvdXJjZTogU09VUkNFUy5QT0lOVEVSXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHNoYWRvd1BsYWNlSG9sZGVySWR4ID0gZmluZFNoYWRvd1BsYWNlSG9sZGVySWR4KGl0ZW1zKTtcblxuICAgIGlmIChzaGFkb3dQbGFjZUhvbGRlcklkeCAhPT0gLTEpIHtcbiAgICAgIC8vIG9ubHkgaGFwcGVucyByaWdodCBhZnRlciBkcmFnIHN0YXJ0LCBvbiB0aGUgZmlyc3QgZHJhZyBlbnRlcmVkIGV2ZW50XG4gICAgICBwcmludERlYnVnKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIFwicmVtb3ZpbmcgcGxhY2Vob2xkZXIgaXRlbSBmcm9tIG9yaWdpbiBkelwiO1xuICAgICAgfSk7XG4gICAgICBpdGVtcy5zcGxpY2Uoc2hhZG93UGxhY2VIb2xkZXJJZHgsIDEpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBfZSRkZXRhaWwkaW5kZXhPYmogPSBlLmRldGFpbC5pbmRleE9iaixcbiAgICAgIGluZGV4ID0gX2UkZGV0YWlsJGluZGV4T2JqLmluZGV4LFxuICAgICAgaXNQcm94aW1pdHlCYXNlZCA9IF9lJGRldGFpbCRpbmRleE9iai5pc1Byb3hpbWl0eUJhc2VkO1xuICB2YXIgc2hhZG93RWxJZHggPSBpc1Byb3hpbWl0eUJhc2VkICYmIGluZGV4ID09PSBlLmN1cnJlbnRUYXJnZXQuY2hpbGRyZW4ubGVuZ3RoIC0gMSA/IGluZGV4ICsgMSA6IGluZGV4O1xuICBzaGFkb3dFbERyb3Bab25lID0gZS5jdXJyZW50VGFyZ2V0O1xuICBpdGVtcy5zcGxpY2Uoc2hhZG93RWxJZHgsIDAsIHNoYWRvd0VsRGF0YSk7XG4gIGRpc3BhdGNoQ29uc2lkZXJFdmVudChlLmN1cnJlbnRUYXJnZXQsIGl0ZW1zLCB7XG4gICAgdHJpZ2dlcjogVFJJR0dFUlMuRFJBR0dFRF9FTlRFUkVELFxuICAgIGlkOiBkcmFnZ2VkRWxEYXRhW0lURU1fSURfS0VZXSxcbiAgICBzb3VyY2U6IFNPVVJDRVMuUE9JTlRFUlxuICB9KTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlRHJhZ2dlZExlZnQoZSkge1xuICAvLyBkZWFsaW5nIHdpdGggYSByYXJlIHJhY2UgY29uZGl0aW9uIG9uIGV4dHJlbWVseSByYXBpZCBjbGlja2luZyBhbmQgZHJvcHBpbmdcbiAgaWYgKCFpc1dvcmtpbmdPblByZXZpb3VzRHJhZykgcmV0dXJuO1xuICBwcmludERlYnVnKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gW1wiZHJhZ2dlZCBsZWZ0XCIsIGUuY3VycmVudFRhcmdldCwgZS5kZXRhaWxdO1xuICB9KTtcblxuICB2YXIgX2R6VG9Db25maWckZ2V0MiA9IGR6VG9Db25maWcuZ2V0KGUuY3VycmVudFRhcmdldCksXG4gICAgICBpdGVtcyA9IF9kelRvQ29uZmlnJGdldDIuaXRlbXMsXG4gICAgICBkcm9wRnJvbU90aGVyc0Rpc2FibGVkID0gX2R6VG9Db25maWckZ2V0Mi5kcm9wRnJvbU90aGVyc0Rpc2FibGVkO1xuXG4gIGlmIChkcm9wRnJvbU90aGVyc0Rpc2FibGVkICYmIGUuY3VycmVudFRhcmdldCAhPT0gb3JpZ2luRHJvcFpvbmUgJiYgZS5jdXJyZW50VGFyZ2V0ICE9PSBzaGFkb3dFbERyb3Bab25lKSB7XG4gICAgcHJpbnREZWJ1ZyhmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gXCJkcm9wIGlzIGN1cnJlbnRseSBkaXNhYmxlZFwiO1xuICAgIH0pO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBzaGFkb3dFbElkeCA9IGZpbmRTaGFkb3dFbGVtZW50SWR4KGl0ZW1zKTtcbiAgdmFyIHNoYWRvd0l0ZW0gPSBpdGVtcy5zcGxpY2Uoc2hhZG93RWxJZHgsIDEpWzBdO1xuICBzaGFkb3dFbERyb3Bab25lID0gdW5kZWZpbmVkO1xuICB2YXIgX2UkZGV0YWlsID0gZS5kZXRhaWwsXG4gICAgICB0eXBlID0gX2UkZGV0YWlsLnR5cGUsXG4gICAgICB0aGVPdGhlckR6ID0gX2UkZGV0YWlsLnRoZU90aGVyRHo7XG5cbiAgaWYgKHR5cGUgPT09IERSQUdHRURfTEVGVF9UWVBFUy5PVVRTSURFX09GX0FOWSB8fCB0eXBlID09PSBEUkFHR0VEX0xFRlRfVFlQRVMuTEVGVF9GT1JfQU5PVEhFUiAmJiB0aGVPdGhlckR6ICE9PSBvcmlnaW5Ecm9wWm9uZSAmJiBkelRvQ29uZmlnLmdldCh0aGVPdGhlckR6KS5kcm9wRnJvbU90aGVyc0Rpc2FibGVkKSB7XG4gICAgcHJpbnREZWJ1ZyhmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gXCJkcmFnZ2VkIGxlZnQgYWxsLCBwdXR0aW5nIHNoYWRvdyBlbGVtZW50IGJhY2sgaW4gdGhlIG9yaWdpbiBkelwiO1xuICAgIH0pO1xuICAgIGlzRHJhZ2dlZE91dHNpZGVPZkFueUR6ID0gdHJ1ZTtcbiAgICBzaGFkb3dFbERyb3Bab25lID0gb3JpZ2luRHJvcFpvbmU7XG4gICAgdmFyIG9yaWdpblpvbmVJdGVtcyA9IGR6VG9Db25maWcuZ2V0KG9yaWdpbkRyb3Bab25lKS5pdGVtcztcbiAgICBvcmlnaW5ab25lSXRlbXMuc3BsaWNlKG9yaWdpbkluZGV4LCAwLCBzaGFkb3dJdGVtKTtcbiAgICBkaXNwYXRjaENvbnNpZGVyRXZlbnQob3JpZ2luRHJvcFpvbmUsIG9yaWdpblpvbmVJdGVtcywge1xuICAgICAgdHJpZ2dlcjogVFJJR0dFUlMuRFJBR0dFRF9MRUZUX0FMTCxcbiAgICAgIGlkOiBkcmFnZ2VkRWxEYXRhW0lURU1fSURfS0VZXSxcbiAgICAgIHNvdXJjZTogU09VUkNFUy5QT0lOVEVSXG4gICAgfSk7XG4gIH0gLy8gZm9yIHRoZSBvcmlnaW4gZHosIHdoZW4gdGhlIGRyYWdnZWQgaXMgb3V0c2lkZSBvZiBhbnksIHRoaXMgd2lsbCBiZSBmaXJlZCBpbiBhZGRpdGlvbiB0byB0aGUgcHJldmlvdXMuIHRoaXMgaXMgZm9yIHNpbXBsaWNpdHlcblxuXG4gIGRpc3BhdGNoQ29uc2lkZXJFdmVudChlLmN1cnJlbnRUYXJnZXQsIGl0ZW1zLCB7XG4gICAgdHJpZ2dlcjogVFJJR0dFUlMuRFJBR0dFRF9MRUZULFxuICAgIGlkOiBkcmFnZ2VkRWxEYXRhW0lURU1fSURfS0VZXSxcbiAgICBzb3VyY2U6IFNPVVJDRVMuUE9JTlRFUlxuICB9KTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlRHJhZ2dlZElzT3ZlckluZGV4KGUpIHtcbiAgcHJpbnREZWJ1ZyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIFtcImRyYWdnZWQgaXMgb3ZlciBpbmRleFwiLCBlLmN1cnJlbnRUYXJnZXQsIGUuZGV0YWlsXTtcbiAgfSk7XG5cbiAgdmFyIF9kelRvQ29uZmlnJGdldDMgPSBkelRvQ29uZmlnLmdldChlLmN1cnJlbnRUYXJnZXQpLFxuICAgICAgaXRlbXMgPSBfZHpUb0NvbmZpZyRnZXQzLml0ZW1zLFxuICAgICAgZHJvcEZyb21PdGhlcnNEaXNhYmxlZCA9IF9kelRvQ29uZmlnJGdldDMuZHJvcEZyb21PdGhlcnNEaXNhYmxlZDtcblxuICBpZiAoZHJvcEZyb21PdGhlcnNEaXNhYmxlZCAmJiBlLmN1cnJlbnRUYXJnZXQgIT09IG9yaWdpbkRyb3Bab25lKSB7XG4gICAgcHJpbnREZWJ1ZyhmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gXCJkcm9wIGlzIGN1cnJlbnRseSBkaXNhYmxlZFwiO1xuICAgIH0pO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlzRHJhZ2dlZE91dHNpZGVPZkFueUR6ID0gZmFsc2U7XG4gIHZhciBpbmRleCA9IGUuZGV0YWlsLmluZGV4T2JqLmluZGV4O1xuICB2YXIgc2hhZG93RWxJZHggPSBmaW5kU2hhZG93RWxlbWVudElkeChpdGVtcyk7XG4gIGl0ZW1zLnNwbGljZShzaGFkb3dFbElkeCwgMSk7XG4gIGl0ZW1zLnNwbGljZShpbmRleCwgMCwgc2hhZG93RWxEYXRhKTtcbiAgZGlzcGF0Y2hDb25zaWRlckV2ZW50KGUuY3VycmVudFRhcmdldCwgaXRlbXMsIHtcbiAgICB0cmlnZ2VyOiBUUklHR0VSUy5EUkFHR0VEX09WRVJfSU5ERVgsXG4gICAgaWQ6IGRyYWdnZWRFbERhdGFbSVRFTV9JRF9LRVldLFxuICAgIHNvdXJjZTogU09VUkNFUy5QT0lOVEVSXG4gIH0pO1xufSAvLyBHbG9iYWwgbW91c2UvdG91Y2gtZXZlbnRzIGhhbmRsZXJzXG5cblxuZnVuY3Rpb24gaGFuZGxlTW91c2VNb3ZlKGUpIHtcbiAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICB2YXIgYyA9IGUudG91Y2hlcyA/IGUudG91Y2hlc1swXSA6IGU7XG4gIGN1cnJlbnRNb3VzZVBvc2l0aW9uID0ge1xuICAgIHg6IGMuY2xpZW50WCxcbiAgICB5OiBjLmNsaWVudFlcbiAgfTtcbiAgZHJhZ2dlZEVsLnN0eWxlLnRyYW5zZm9ybSA9IFwidHJhbnNsYXRlM2QoXCIuY29uY2F0KGN1cnJlbnRNb3VzZVBvc2l0aW9uLnggLSBkcmFnU3RhcnRNb3VzZVBvc2l0aW9uLngsIFwicHgsIFwiKS5jb25jYXQoY3VycmVudE1vdXNlUG9zaXRpb24ueSAtIGRyYWdTdGFydE1vdXNlUG9zaXRpb24ueSwgXCJweCwgMClcIik7XG59XG5cbmZ1bmN0aW9uIGhhbmRsZURyb3AoKSB7XG4gIHByaW50RGVidWcoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBcImRyb3BwZWRcIjtcbiAgfSk7XG4gIGZpbmFsaXppbmdQcmV2aW91c0RyYWcgPSB0cnVlOyAvLyBjbGVhbnVwXG5cbiAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgaGFuZGxlTW91c2VNb3ZlKTtcbiAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0b3VjaG1vdmVcIiwgaGFuZGxlTW91c2VNb3ZlKTtcbiAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIGhhbmRsZURyb3ApO1xuICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRvdWNoZW5kXCIsIGhhbmRsZURyb3ApO1xuICB1bldhdGNoRHJhZ2dlZEVsZW1lbnQoKTtcbiAgbW92ZURyYWdnZWRFbGVtZW50VG9XYXNEcm9wcGVkU3RhdGUoZHJhZ2dlZEVsKTtcblxuICBpZiAoIXNoYWRvd0VsRHJvcFpvbmUpIHtcbiAgICBwcmludERlYnVnKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBcImVsZW1lbnQgd2FzIGRyb3BwZWQgcmlnaHQgYWZ0ZXIgaXQgbGVmdCBvcmlnaW4gYnV0IGJlZm9yZSBlbnRlcmluZyBzb21ld2hlcmUgZWxzZVwiO1xuICAgIH0pO1xuICAgIHNoYWRvd0VsRHJvcFpvbmUgPSBvcmlnaW5Ecm9wWm9uZTtcbiAgfVxuXG4gIHByaW50RGVidWcoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBbXCJkcm9wcGVkIGluIGR6XCIsIHNoYWRvd0VsRHJvcFpvbmVdO1xuICB9KTtcblxuICB2YXIgX2R6VG9Db25maWckZ2V0NCA9IGR6VG9Db25maWcuZ2V0KHNoYWRvd0VsRHJvcFpvbmUpLFxuICAgICAgaXRlbXMgPSBfZHpUb0NvbmZpZyRnZXQ0Lml0ZW1zLFxuICAgICAgdHlwZSA9IF9kelRvQ29uZmlnJGdldDQudHlwZTtcblxuICBzdHlsZUluYWN0aXZlRHJvcFpvbmVzKHR5cGVUb0Ryb3Bab25lcy5nZXQodHlwZSksIGZ1bmN0aW9uIChkeikge1xuICAgIHJldHVybiBkelRvQ29uZmlnLmdldChkeikuZHJvcFRhcmdldFN0eWxlO1xuICB9LCBmdW5jdGlvbiAoZHopIHtcbiAgICByZXR1cm4gZHpUb0NvbmZpZy5nZXQoZHopLmRyb3BUYXJnZXRDbGFzc2VzO1xuICB9KTtcbiAgdmFyIHNoYWRvd0VsSWR4ID0gZmluZFNoYWRvd0VsZW1lbnRJZHgoaXRlbXMpOyAvLyB0aGUgaGFuZGxlciBtaWdodCByZW1vdmUgdGhlIHNoYWRvdyBlbGVtZW50LCBleDogZHJhZ3VsYSBsaWtlIGNvcHkgb24gZHJhZ1xuXG4gIGlmIChzaGFkb3dFbElkeCA9PT0gLTEpIHNoYWRvd0VsSWR4ID0gb3JpZ2luSW5kZXg7XG4gIGl0ZW1zID0gaXRlbXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgcmV0dXJuIGl0ZW1bU0hBRE9XX0lURU1fTUFSS0VSX1BST1BFUlRZX05BTUVdID8gZHJhZ2dlZEVsRGF0YSA6IGl0ZW07XG4gIH0pO1xuXG4gIGZ1bmN0aW9uIGZpbmFsaXplV2l0aGluWm9uZSgpIHtcbiAgICB1bmxvY2tPcmlnaW5Eek1pbkRpbWVuc2lvbnMoKTtcbiAgICBkaXNwYXRjaEZpbmFsaXplRXZlbnQoc2hhZG93RWxEcm9wWm9uZSwgaXRlbXMsIHtcbiAgICAgIHRyaWdnZXI6IGlzRHJhZ2dlZE91dHNpZGVPZkFueUR6ID8gVFJJR0dFUlMuRFJPUFBFRF9PVVRTSURFX09GX0FOWSA6IFRSSUdHRVJTLkRST1BQRURfSU5UT19aT05FLFxuICAgICAgaWQ6IGRyYWdnZWRFbERhdGFbSVRFTV9JRF9LRVldLFxuICAgICAgc291cmNlOiBTT1VSQ0VTLlBPSU5URVJcbiAgICB9KTtcblxuICAgIGlmIChzaGFkb3dFbERyb3Bab25lICE9PSBvcmlnaW5Ecm9wWm9uZSkge1xuICAgICAgLy8gbGV0dGluZyB0aGUgb3JpZ2luIGRyb3Agem9uZSBrbm93IHRoZSBlbGVtZW50IHdhcyBwZXJtYW5lbnRseSB0YWtlbiBhd2F5XG4gICAgICBkaXNwYXRjaEZpbmFsaXplRXZlbnQob3JpZ2luRHJvcFpvbmUsIGR6VG9Db25maWcuZ2V0KG9yaWdpbkRyb3Bab25lKS5pdGVtcywge1xuICAgICAgICB0cmlnZ2VyOiBUUklHR0VSUy5EUk9QUEVEX0lOVE9fQU5PVEhFUixcbiAgICAgICAgaWQ6IGRyYWdnZWRFbERhdGFbSVRFTV9JRF9LRVldLFxuICAgICAgICBzb3VyY2U6IFNPVVJDRVMuUE9JTlRFUlxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgdW5EZWNvcmF0ZVNoYWRvd0VsZW1lbnQoc2hhZG93RWxEcm9wWm9uZS5jaGlsZHJlbltzaGFkb3dFbElkeF0pO1xuICAgIGNsZWFudXBQb3N0RHJvcCgpO1xuICB9XG5cbiAgYW5pbWF0ZURyYWdnZWRUb0ZpbmFsUG9zaXRpb24oc2hhZG93RWxJZHgsIGZpbmFsaXplV2l0aGluWm9uZSk7XG59IC8vIGhlbHBlciBmdW5jdGlvbiBmb3IgaGFuZGxlRHJvcFxuXG5cbmZ1bmN0aW9uIGFuaW1hdGVEcmFnZ2VkVG9GaW5hbFBvc2l0aW9uKHNoYWRvd0VsSWR4LCBjYWxsYmFjaykge1xuICB2YXIgc2hhZG93RWxSZWN0ID0gZ2V0Qm91bmRpbmdSZWN0Tm9UcmFuc2Zvcm1zKHNoYWRvd0VsRHJvcFpvbmUuY2hpbGRyZW5bc2hhZG93RWxJZHhdKTtcbiAgdmFyIG5ld1RyYW5zZm9ybSA9IHtcbiAgICB4OiBzaGFkb3dFbFJlY3QubGVmdCAtIHBhcnNlRmxvYXQoZHJhZ2dlZEVsLnN0eWxlLmxlZnQpLFxuICAgIHk6IHNoYWRvd0VsUmVjdC50b3AgLSBwYXJzZUZsb2F0KGRyYWdnZWRFbC5zdHlsZS50b3ApXG4gIH07XG5cbiAgdmFyIF9kelRvQ29uZmlnJGdldDUgPSBkelRvQ29uZmlnLmdldChzaGFkb3dFbERyb3Bab25lKSxcbiAgICAgIGRyb3BBbmltYXRpb25EdXJhdGlvbk1zID0gX2R6VG9Db25maWckZ2V0NS5kcm9wQW5pbWF0aW9uRHVyYXRpb25NcztcblxuICB2YXIgdHJhbnNpdGlvbiA9IFwidHJhbnNmb3JtIFwiLmNvbmNhdChkcm9wQW5pbWF0aW9uRHVyYXRpb25NcywgXCJtcyBlYXNlXCIpO1xuICBkcmFnZ2VkRWwuc3R5bGUudHJhbnNpdGlvbiA9IGRyYWdnZWRFbC5zdHlsZS50cmFuc2l0aW9uID8gZHJhZ2dlZEVsLnN0eWxlLnRyYW5zaXRpb24gKyBcIixcIiArIHRyYW5zaXRpb24gOiB0cmFuc2l0aW9uO1xuICBkcmFnZ2VkRWwuc3R5bGUudHJhbnNmb3JtID0gXCJ0cmFuc2xhdGUzZChcIi5jb25jYXQobmV3VHJhbnNmb3JtLngsIFwicHgsIFwiKS5jb25jYXQobmV3VHJhbnNmb3JtLnksIFwicHgsIDApXCIpO1xuICB3aW5kb3cuc2V0VGltZW91dChjYWxsYmFjaywgZHJvcEFuaW1hdGlvbkR1cmF0aW9uTXMpO1xufVxuXG5mdW5jdGlvbiBzY2hlZHVsZURaRm9yUmVtb3ZhbEFmdGVyRHJvcChkeiwgZGVzdHJveSkge1xuICBzY2hlZHVsZWRGb3JSZW1vdmFsQWZ0ZXJEcm9wLnB1c2goe1xuICAgIGR6OiBkeixcbiAgICBkZXN0cm95OiBkZXN0cm95XG4gIH0pO1xuICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICBoaWRlRWxlbWVudChkeik7XG4gICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChkeik7XG4gIH0pO1xufVxuLyogY2xlYW51cCAqL1xuXG5cbmZ1bmN0aW9uIGNsZWFudXBQb3N0RHJvcCgpIHtcbiAgZHJhZ2dlZEVsLnJlbW92ZSgpO1xuICBvcmlnaW5hbERyYWdUYXJnZXQucmVtb3ZlKCk7XG5cbiAgaWYgKHNjaGVkdWxlZEZvclJlbW92YWxBZnRlckRyb3AubGVuZ3RoKSB7XG4gICAgcHJpbnREZWJ1ZyhmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gW1wid2lsbCBkZXN0cm95IHpvbmVzIHRoYXQgd2VyZSByZW1vdmVkIGR1cmluZyBkcmFnXCIsIHNjaGVkdWxlZEZvclJlbW92YWxBZnRlckRyb3BdO1xuICAgIH0pO1xuICAgIHNjaGVkdWxlZEZvclJlbW92YWxBZnRlckRyb3AuZm9yRWFjaChmdW5jdGlvbiAoX3JlZikge1xuICAgICAgdmFyIGR6ID0gX3JlZi5keixcbiAgICAgICAgICBkZXN0cm95ID0gX3JlZi5kZXN0cm95O1xuICAgICAgZGVzdHJveSgpO1xuICAgICAgZHoucmVtb3ZlKCk7XG4gICAgfSk7XG4gICAgc2NoZWR1bGVkRm9yUmVtb3ZhbEFmdGVyRHJvcCA9IFtdO1xuICB9XG5cbiAgZHJhZ2dlZEVsID0gdW5kZWZpbmVkO1xuICBvcmlnaW5hbERyYWdUYXJnZXQgPSB1bmRlZmluZWQ7XG4gIGRyYWdnZWRFbERhdGEgPSB1bmRlZmluZWQ7XG4gIGRyYWdnZWRFbFR5cGUgPSB1bmRlZmluZWQ7XG4gIG9yaWdpbkRyb3Bab25lID0gdW5kZWZpbmVkO1xuICBvcmlnaW5JbmRleCA9IHVuZGVmaW5lZDtcbiAgc2hhZG93RWxEYXRhID0gdW5kZWZpbmVkO1xuICBzaGFkb3dFbERyb3Bab25lID0gdW5kZWZpbmVkO1xuICBkcmFnU3RhcnRNb3VzZVBvc2l0aW9uID0gdW5kZWZpbmVkO1xuICBjdXJyZW50TW91c2VQb3NpdGlvbiA9IHVuZGVmaW5lZDtcbiAgaXNXb3JraW5nT25QcmV2aW91c0RyYWcgPSBmYWxzZTtcbiAgZmluYWxpemluZ1ByZXZpb3VzRHJhZyA9IGZhbHNlO1xuICB1bmxvY2tPcmlnaW5Eek1pbkRpbWVuc2lvbnMgPSB1bmRlZmluZWQ7XG4gIGlzRHJhZ2dlZE91dHNpZGVPZkFueUR6ID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGRuZHpvbmUobm9kZSwgb3B0aW9ucykge1xuICB2YXIgaW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgdmFyIGNvbmZpZyA9IHtcbiAgICBpdGVtczogdW5kZWZpbmVkLFxuICAgIHR5cGU6IHVuZGVmaW5lZCxcbiAgICBmbGlwRHVyYXRpb25NczogMCxcbiAgICBkcmFnRGlzYWJsZWQ6IGZhbHNlLFxuICAgIG1vcnBoRGlzYWJsZWQ6IGZhbHNlLFxuICAgIGRyb3BGcm9tT3RoZXJzRGlzYWJsZWQ6IGZhbHNlLFxuICAgIGRyb3BUYXJnZXRTdHlsZTogREVGQVVMVF9EUk9QX1RBUkdFVF9TVFlMRSxcbiAgICBkcm9wVGFyZ2V0Q2xhc3NlczogW10sXG4gICAgdHJhbnNmb3JtRHJhZ2dlZEVsZW1lbnQ6IGZ1bmN0aW9uIHRyYW5zZm9ybURyYWdnZWRFbGVtZW50KCkge30sXG4gICAgY2VudHJlRHJhZ2dlZE9uQ3Vyc29yOiBmYWxzZVxuICB9O1xuICBwcmludERlYnVnKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gW1wiZG5kem9uZSBnb29kIHRvIGdvIG9wdGlvbnM6IFwiLmNvbmNhdCh0b1N0cmluZyhvcHRpb25zKSwgXCIsIGNvbmZpZzogXCIpLmNvbmNhdCh0b1N0cmluZyhjb25maWcpKSwge1xuICAgICAgbm9kZTogbm9kZVxuICAgIH1dO1xuICB9KTtcbiAgdmFyIGVsVG9JZHggPSBuZXcgTWFwKCk7XG5cbiAgZnVuY3Rpb24gYWRkTWF5YmVMaXN0ZW5lcnMoKSB7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgaGFuZGxlTW91c2VNb3ZlTWF5YmVEcmFnU3RhcnQsIHtcbiAgICAgIHBhc3NpdmU6IGZhbHNlXG4gICAgfSk7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJ0b3VjaG1vdmVcIiwgaGFuZGxlTW91c2VNb3ZlTWF5YmVEcmFnU3RhcnQsIHtcbiAgICAgIHBhc3NpdmU6IGZhbHNlLFxuICAgICAgY2FwdHVyZTogZmFsc2VcbiAgICB9KTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNldXBcIiwgaGFuZGxlRmFsc2VBbGFybSwge1xuICAgICAgcGFzc2l2ZTogZmFsc2VcbiAgICB9KTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInRvdWNoZW5kXCIsIGhhbmRsZUZhbHNlQWxhcm0sIHtcbiAgICAgIHBhc3NpdmU6IGZhbHNlXG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiByZW1vdmVNYXliZUxpc3RlbmVycygpIHtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1vdXNlbW92ZVwiLCBoYW5kbGVNb3VzZU1vdmVNYXliZURyYWdTdGFydCk7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0b3VjaG1vdmVcIiwgaGFuZGxlTW91c2VNb3ZlTWF5YmVEcmFnU3RhcnQpO1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCBoYW5kbGVGYWxzZUFsYXJtKTtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInRvdWNoZW5kXCIsIGhhbmRsZUZhbHNlQWxhcm0pO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlRmFsc2VBbGFybSgpIHtcbiAgICByZW1vdmVNYXliZUxpc3RlbmVycygpO1xuICAgIG9yaWdpbmFsRHJhZ1RhcmdldCA9IHVuZGVmaW5lZDtcbiAgICBkcmFnU3RhcnRNb3VzZVBvc2l0aW9uID0gdW5kZWZpbmVkO1xuICAgIGN1cnJlbnRNb3VzZVBvc2l0aW9uID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlTW91c2VNb3ZlTWF5YmVEcmFnU3RhcnQoZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB2YXIgYyA9IGUudG91Y2hlcyA/IGUudG91Y2hlc1swXSA6IGU7XG4gICAgY3VycmVudE1vdXNlUG9zaXRpb24gPSB7XG4gICAgICB4OiBjLmNsaWVudFgsXG4gICAgICB5OiBjLmNsaWVudFlcbiAgICB9O1xuXG4gICAgaWYgKE1hdGguYWJzKGN1cnJlbnRNb3VzZVBvc2l0aW9uLnggLSBkcmFnU3RhcnRNb3VzZVBvc2l0aW9uLngpID49IE1JTl9NT1ZFTUVOVF9CRUZPUkVfRFJBR19TVEFSVF9QWCB8fCBNYXRoLmFicyhjdXJyZW50TW91c2VQb3NpdGlvbi55IC0gZHJhZ1N0YXJ0TW91c2VQb3NpdGlvbi55KSA+PSBNSU5fTU9WRU1FTlRfQkVGT1JFX0RSQUdfU1RBUlRfUFgpIHtcbiAgICAgIHJlbW92ZU1heWJlTGlzdGVuZXJzKCk7XG4gICAgICBoYW5kbGVEcmFnU3RhcnQoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVNb3VzZURvd24oZSkge1xuICAgIC8vIG9uIHNhZmFyaSBjbGlja2luZyBvbiBhIHNlbGVjdCBlbGVtZW50IGRvZXNuJ3QgZmlyZSBtb3VzZXVwIGF0IHRoZSBlbmQgb2YgdGhlIGNsaWNrIGFuZCBpbiBnZW5lcmFsIHRoaXMgbWFrZXMgbW9yZSBzZW5zZVxuICAgIGlmIChlLnRhcmdldCAhPT0gZS5jdXJyZW50VGFyZ2V0ICYmIChlLnRhcmdldC52YWx1ZSAhPT0gdW5kZWZpbmVkIHx8IGUudGFyZ2V0LmlzQ29udGVudEVkaXRhYmxlKSkge1xuICAgICAgcHJpbnREZWJ1ZyhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBcIndvbid0IGluaXRpYXRlIGRyYWcgb24gYSBuZXN0ZWQgaW5wdXQgZWxlbWVudFwiO1xuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBwcmV2ZW50cyByZXNwb25kaW5nIHRvIGFueSBidXR0b24gYnV0IGxlZnQgY2xpY2sgd2hpY2ggZXF1YWxzIDAgKHdoaWNoIGlzIGZhbHN5KVxuXG5cbiAgICBpZiAoZS5idXR0b24pIHtcbiAgICAgIHByaW50RGVidWcoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gXCJpZ25vcmluZyBub25lIGxlZnQgY2xpY2sgYnV0dG9uOiBcIi5jb25jYXQoZS5idXR0b24pO1xuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGlzV29ya2luZ09uUHJldmlvdXNEcmFnKSB7XG4gICAgICBwcmludERlYnVnKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIFwiY2Fubm90IHN0YXJ0IGEgbmV3IGRyYWcgYmVmb3JlIGZpbmFsaXppbmcgcHJldmlvdXMgb25lXCI7XG4gICAgICB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIHZhciBjID0gZS50b3VjaGVzID8gZS50b3VjaGVzWzBdIDogZTtcbiAgICBkcmFnU3RhcnRNb3VzZVBvc2l0aW9uID0ge1xuICAgICAgeDogYy5jbGllbnRYLFxuICAgICAgeTogYy5jbGllbnRZXG4gICAgfTtcbiAgICBjdXJyZW50TW91c2VQb3NpdGlvbiA9IF9vYmplY3RTcHJlYWQyKHt9LCBkcmFnU3RhcnRNb3VzZVBvc2l0aW9uKTtcbiAgICBvcmlnaW5hbERyYWdUYXJnZXQgPSBlLmN1cnJlbnRUYXJnZXQ7XG4gICAgYWRkTWF5YmVMaXN0ZW5lcnMoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZURyYWdTdGFydCgpIHtcbiAgICBwcmludERlYnVnKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBbXCJkcmFnIHN0YXJ0IGNvbmZpZzogXCIuY29uY2F0KHRvU3RyaW5nKGNvbmZpZykpLCBvcmlnaW5hbERyYWdUYXJnZXRdO1xuICAgIH0pO1xuICAgIGlzV29ya2luZ09uUHJldmlvdXNEcmFnID0gdHJ1ZTsgLy8gaW5pdGlhbGlzaW5nIGdsb2JhbHNcblxuICAgIHZhciBjdXJyZW50SWR4ID0gZWxUb0lkeC5nZXQob3JpZ2luYWxEcmFnVGFyZ2V0KTtcbiAgICBvcmlnaW5JbmRleCA9IGN1cnJlbnRJZHg7XG4gICAgb3JpZ2luRHJvcFpvbmUgPSBvcmlnaW5hbERyYWdUYXJnZXQucGFyZW50RWxlbWVudDtcbiAgICAvKiogQHR5cGUge1NoYWRvd1Jvb3QgfCBIVE1MRG9jdW1lbnR9ICovXG5cbiAgICB2YXIgcm9vdE5vZGUgPSBvcmlnaW5Ecm9wWm9uZS5nZXRSb290Tm9kZSgpO1xuICAgIHZhciBvcmlnaW5Ecm9wWm9uZVJvb3QgPSByb290Tm9kZS5ib2R5IHx8IHJvb3ROb2RlO1xuICAgIHZhciBpdGVtcyA9IGNvbmZpZy5pdGVtcyxcbiAgICAgICAgdHlwZSA9IGNvbmZpZy50eXBlLFxuICAgICAgICBjZW50cmVEcmFnZ2VkT25DdXJzb3IgPSBjb25maWcuY2VudHJlRHJhZ2dlZE9uQ3Vyc29yO1xuICAgIGRyYWdnZWRFbERhdGEgPSBfb2JqZWN0U3ByZWFkMih7fSwgaXRlbXNbY3VycmVudElkeF0pO1xuICAgIGRyYWdnZWRFbFR5cGUgPSB0eXBlO1xuICAgIHNoYWRvd0VsRGF0YSA9IF9vYmplY3RTcHJlYWQyKF9vYmplY3RTcHJlYWQyKHt9LCBkcmFnZ2VkRWxEYXRhKSwge30sIF9kZWZpbmVQcm9wZXJ0eSh7fSwgU0hBRE9XX0lURU1fTUFSS0VSX1BST1BFUlRZX05BTUUsIHRydWUpKTsgLy8gVGhlIGluaXRpYWwgc2hhZG93IGVsZW1lbnQuIFdlIG5lZWQgYSBkaWZmZXJlbnQgaWQgYXQgZmlyc3QgaW4gb3JkZXIgdG8gYXZvaWQgY29uZmxpY3RzIGFuZCB0aW1pbmcgaXNzdWVzXG5cbiAgICB2YXIgcGxhY2VIb2xkZXJFbERhdGEgPSBfb2JqZWN0U3ByZWFkMihfb2JqZWN0U3ByZWFkMih7fSwgc2hhZG93RWxEYXRhKSwge30sIF9kZWZpbmVQcm9wZXJ0eSh7fSwgSVRFTV9JRF9LRVksIFNIQURPV19QTEFDRUhPTERFUl9JVEVNX0lEKSk7IC8vIGNyZWF0aW5nIHRoZSBkcmFnZ2FibGUgZWxlbWVudFxuXG5cbiAgICBkcmFnZ2VkRWwgPSBjcmVhdGVEcmFnZ2VkRWxlbWVudEZyb20ob3JpZ2luYWxEcmFnVGFyZ2V0LCBjZW50cmVEcmFnZ2VkT25DdXJzb3IgJiYgY3VycmVudE1vdXNlUG9zaXRpb24pOyAvLyBXZSB3aWxsIGtlZXAgdGhlIG9yaWdpbmFsIGRvbSBub2RlIGluIHRoZSBkb20gYmVjYXVzZSB0b3VjaCBldmVudHMga2VlcCBmaXJpbmcgb24gaXQsIHdlIHdhbnQgdG8gcmUtYWRkIGl0IGFmdGVyIHRoZSBmcmFtZXdvcmsgcmVtb3ZlcyBpdFxuXG4gICAgZnVuY3Rpb24ga2VlcE9yaWdpbmFsRWxlbWVudEluRG9tKCkge1xuICAgICAgaWYgKCFkcmFnZ2VkRWwucGFyZW50RWxlbWVudCkge1xuICAgICAgICBvcmlnaW5Ecm9wWm9uZVJvb3QuYXBwZW5kQ2hpbGQoZHJhZ2dlZEVsKTsgLy8gdG8gcHJldmVudCB0aGUgb3V0bGluZSBmcm9tIGRpc2FwcGVhcmluZ1xuXG4gICAgICAgIGRyYWdnZWRFbC5mb2N1cygpO1xuICAgICAgICB3YXRjaERyYWdnZWRFbGVtZW50KCk7XG4gICAgICAgIGhpZGVFbGVtZW50KG9yaWdpbmFsRHJhZ1RhcmdldCk7XG4gICAgICAgIG9yaWdpbkRyb3Bab25lUm9vdC5hcHBlbmRDaGlsZChvcmlnaW5hbERyYWdUYXJnZXQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShrZWVwT3JpZ2luYWxFbGVtZW50SW5Eb20pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoa2VlcE9yaWdpbmFsRWxlbWVudEluRG9tKTtcbiAgICBzdHlsZUFjdGl2ZURyb3Bab25lcyhBcnJheS5mcm9tKHR5cGVUb0Ryb3Bab25lcy5nZXQoY29uZmlnLnR5cGUpKS5maWx0ZXIoZnVuY3Rpb24gKGR6KSB7XG4gICAgICByZXR1cm4gZHogPT09IG9yaWdpbkRyb3Bab25lIHx8ICFkelRvQ29uZmlnLmdldChkeikuZHJvcEZyb21PdGhlcnNEaXNhYmxlZDtcbiAgICB9KSwgZnVuY3Rpb24gKGR6KSB7XG4gICAgICByZXR1cm4gZHpUb0NvbmZpZy5nZXQoZHopLmRyb3BUYXJnZXRTdHlsZTtcbiAgICB9LCBmdW5jdGlvbiAoZHopIHtcbiAgICAgIHJldHVybiBkelRvQ29uZmlnLmdldChkeikuZHJvcFRhcmdldENsYXNzZXM7XG4gICAgfSk7IC8vIHJlbW92aW5nIHRoZSBvcmlnaW5hbCBlbGVtZW50IGJ5IHJlbW92aW5nIGl0cyBkYXRhIGVudHJ5XG5cbiAgICBpdGVtcy5zcGxpY2UoY3VycmVudElkeCwgMSwgcGxhY2VIb2xkZXJFbERhdGEpO1xuICAgIHVubG9ja09yaWdpbkR6TWluRGltZW5zaW9ucyA9IHByZXZlbnRTaHJpbmtpbmcob3JpZ2luRHJvcFpvbmUpO1xuICAgIGRpc3BhdGNoQ29uc2lkZXJFdmVudChvcmlnaW5Ecm9wWm9uZSwgaXRlbXMsIHtcbiAgICAgIHRyaWdnZXI6IFRSSUdHRVJTLkRSQUdfU1RBUlRFRCxcbiAgICAgIGlkOiBkcmFnZ2VkRWxEYXRhW0lURU1fSURfS0VZXSxcbiAgICAgIHNvdXJjZTogU09VUkNFUy5QT0lOVEVSXG4gICAgfSk7IC8vIGhhbmRpbmcgb3ZlciB0byBnbG9iYWwgaGFuZGxlcnMgLSBzdGFydGluZyB0byB3YXRjaCB0aGUgZWxlbWVudFxuXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgaGFuZGxlTW91c2VNb3ZlLCB7XG4gICAgICBwYXNzaXZlOiBmYWxzZVxuICAgIH0pO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwidG91Y2htb3ZlXCIsIGhhbmRsZU1vdXNlTW92ZSwge1xuICAgICAgcGFzc2l2ZTogZmFsc2UsXG4gICAgICBjYXB0dXJlOiBmYWxzZVxuICAgIH0pO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCBoYW5kbGVEcm9wLCB7XG4gICAgICBwYXNzaXZlOiBmYWxzZVxuICAgIH0pO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hlbmRcIiwgaGFuZGxlRHJvcCwge1xuICAgICAgcGFzc2l2ZTogZmFsc2VcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbmZpZ3VyZShfcmVmMikge1xuICAgIHZhciBfcmVmMiRpdGVtcyA9IF9yZWYyLml0ZW1zLFxuICAgICAgICBpdGVtcyA9IF9yZWYyJGl0ZW1zID09PSB2b2lkIDAgPyB1bmRlZmluZWQgOiBfcmVmMiRpdGVtcyxcbiAgICAgICAgX3JlZjIkZmxpcER1cmF0aW9uTXMgPSBfcmVmMi5mbGlwRHVyYXRpb25NcyxcbiAgICAgICAgZHJvcEFuaW1hdGlvbkR1cmF0aW9uTXMgPSBfcmVmMiRmbGlwRHVyYXRpb25NcyA9PT0gdm9pZCAwID8gMCA6IF9yZWYyJGZsaXBEdXJhdGlvbk1zLFxuICAgICAgICBfcmVmMiR0eXBlID0gX3JlZjIudHlwZSxcbiAgICAgICAgbmV3VHlwZSA9IF9yZWYyJHR5cGUgPT09IHZvaWQgMCA/IERFRkFVTFRfRFJPUF9aT05FX1RZUEUgOiBfcmVmMiR0eXBlLFxuICAgICAgICBfcmVmMiRkcmFnRGlzYWJsZWQgPSBfcmVmMi5kcmFnRGlzYWJsZWQsXG4gICAgICAgIGRyYWdEaXNhYmxlZCA9IF9yZWYyJGRyYWdEaXNhYmxlZCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmMiRkcmFnRGlzYWJsZWQsXG4gICAgICAgIF9yZWYyJG1vcnBoRGlzYWJsZWQgPSBfcmVmMi5tb3JwaERpc2FibGVkLFxuICAgICAgICBtb3JwaERpc2FibGVkID0gX3JlZjIkbW9ycGhEaXNhYmxlZCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmMiRtb3JwaERpc2FibGVkLFxuICAgICAgICBfcmVmMiRkcm9wRnJvbU90aGVyc0QgPSBfcmVmMi5kcm9wRnJvbU90aGVyc0Rpc2FibGVkLFxuICAgICAgICBkcm9wRnJvbU90aGVyc0Rpc2FibGVkID0gX3JlZjIkZHJvcEZyb21PdGhlcnNEID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYyJGRyb3BGcm9tT3RoZXJzRCxcbiAgICAgICAgX3JlZjIkZHJvcFRhcmdldFN0eWxlID0gX3JlZjIuZHJvcFRhcmdldFN0eWxlLFxuICAgICAgICBkcm9wVGFyZ2V0U3R5bGUgPSBfcmVmMiRkcm9wVGFyZ2V0U3R5bGUgPT09IHZvaWQgMCA/IERFRkFVTFRfRFJPUF9UQVJHRVRfU1RZTEUgOiBfcmVmMiRkcm9wVGFyZ2V0U3R5bGUsXG4gICAgICAgIF9yZWYyJGRyb3BUYXJnZXRDbGFzcyA9IF9yZWYyLmRyb3BUYXJnZXRDbGFzc2VzLFxuICAgICAgICBkcm9wVGFyZ2V0Q2xhc3NlcyA9IF9yZWYyJGRyb3BUYXJnZXRDbGFzcyA9PT0gdm9pZCAwID8gW10gOiBfcmVmMiRkcm9wVGFyZ2V0Q2xhc3MsXG4gICAgICAgIF9yZWYyJHRyYW5zZm9ybURyYWdnZSA9IF9yZWYyLnRyYW5zZm9ybURyYWdnZWRFbGVtZW50LFxuICAgICAgICB0cmFuc2Zvcm1EcmFnZ2VkRWxlbWVudCA9IF9yZWYyJHRyYW5zZm9ybURyYWdnZSA9PT0gdm9pZCAwID8gZnVuY3Rpb24gKCkge30gOiBfcmVmMiR0cmFuc2Zvcm1EcmFnZ2UsXG4gICAgICAgIF9yZWYyJGNlbnRyZURyYWdnZWRPbiA9IF9yZWYyLmNlbnRyZURyYWdnZWRPbkN1cnNvcixcbiAgICAgICAgY2VudHJlRHJhZ2dlZE9uQ3Vyc29yID0gX3JlZjIkY2VudHJlRHJhZ2dlZE9uID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYyJGNlbnRyZURyYWdnZWRPbjtcbiAgICBjb25maWcuZHJvcEFuaW1hdGlvbkR1cmF0aW9uTXMgPSBkcm9wQW5pbWF0aW9uRHVyYXRpb25NcztcblxuICAgIGlmIChjb25maWcudHlwZSAmJiBuZXdUeXBlICE9PSBjb25maWcudHlwZSkge1xuICAgICAgdW5yZWdpc3RlckRyb3Bab25lKG5vZGUsIGNvbmZpZy50eXBlKTtcbiAgICB9XG5cbiAgICBjb25maWcudHlwZSA9IG5ld1R5cGU7XG4gICAgcmVnaXN0ZXJEcm9wWm9uZShub2RlLCBuZXdUeXBlKTtcbiAgICBjb25maWcuaXRlbXMgPSBfdG9Db25zdW1hYmxlQXJyYXkoaXRlbXMpO1xuICAgIGNvbmZpZy5kcmFnRGlzYWJsZWQgPSBkcmFnRGlzYWJsZWQ7XG4gICAgY29uZmlnLm1vcnBoRGlzYWJsZWQgPSBtb3JwaERpc2FibGVkO1xuICAgIGNvbmZpZy50cmFuc2Zvcm1EcmFnZ2VkRWxlbWVudCA9IHRyYW5zZm9ybURyYWdnZWRFbGVtZW50O1xuICAgIGNvbmZpZy5jZW50cmVEcmFnZ2VkT25DdXJzb3IgPSBjZW50cmVEcmFnZ2VkT25DdXJzb3I7IC8vIHJlYWx0aW1lIHVwZGF0ZSBmb3IgZHJvcFRhcmdldFN0eWxlXG5cbiAgICBpZiAoaW5pdGlhbGl6ZWQgJiYgaXNXb3JraW5nT25QcmV2aW91c0RyYWcgJiYgIWZpbmFsaXppbmdQcmV2aW91c0RyYWcgJiYgKCFhcmVPYmplY3RzU2hhbGxvd0VxdWFsKGRyb3BUYXJnZXRTdHlsZSwgY29uZmlnLmRyb3BUYXJnZXRTdHlsZSkgfHwgIWFyZUFycmF5c1NoYWxsb3dFcXVhbFNhbWVPcmRlcihkcm9wVGFyZ2V0Q2xhc3NlcywgY29uZmlnLmRyb3BUYXJnZXRDbGFzc2VzKSkpIHtcbiAgICAgIHN0eWxlSW5hY3RpdmVEcm9wWm9uZXMoW25vZGVdLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBjb25maWcuZHJvcFRhcmdldFN0eWxlO1xuICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gZHJvcFRhcmdldENsYXNzZXM7XG4gICAgICB9KTtcbiAgICAgIHN0eWxlQWN0aXZlRHJvcFpvbmVzKFtub2RlXSwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gZHJvcFRhcmdldFN0eWxlO1xuICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gZHJvcFRhcmdldENsYXNzZXM7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBjb25maWcuZHJvcFRhcmdldFN0eWxlID0gZHJvcFRhcmdldFN0eWxlO1xuICAgIGNvbmZpZy5kcm9wVGFyZ2V0Q2xhc3NlcyA9IF90b0NvbnN1bWFibGVBcnJheShkcm9wVGFyZ2V0Q2xhc3Nlcyk7IC8vIHJlYWx0aW1lIHVwZGF0ZSBmb3IgZHJvcEZyb21PdGhlcnNEaXNhYmxlZFxuXG4gICAgZnVuY3Rpb24gZ2V0Q29uZmlnUHJvcChkeiwgcHJvcE5hbWUpIHtcbiAgICAgIHJldHVybiBkelRvQ29uZmlnLmdldChkeikgPyBkelRvQ29uZmlnLmdldChkeilbcHJvcE5hbWVdIDogY29uZmlnW3Byb3BOYW1lXTtcbiAgICB9XG5cbiAgICBpZiAoaW5pdGlhbGl6ZWQgJiYgaXNXb3JraW5nT25QcmV2aW91c0RyYWcgJiYgY29uZmlnLmRyb3BGcm9tT3RoZXJzRGlzYWJsZWQgIT09IGRyb3BGcm9tT3RoZXJzRGlzYWJsZWQpIHtcbiAgICAgIGlmIChkcm9wRnJvbU90aGVyc0Rpc2FibGVkKSB7XG4gICAgICAgIHN0eWxlSW5hY3RpdmVEcm9wWm9uZXMoW25vZGVdLCBmdW5jdGlvbiAoZHopIHtcbiAgICAgICAgICByZXR1cm4gZ2V0Q29uZmlnUHJvcChkeiwgXCJkcm9wVGFyZ2V0U3R5bGVcIik7XG4gICAgICAgIH0sIGZ1bmN0aW9uIChkeikge1xuICAgICAgICAgIHJldHVybiBnZXRDb25maWdQcm9wKGR6LCBcImRyb3BUYXJnZXRDbGFzc2VzXCIpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0eWxlQWN0aXZlRHJvcFpvbmVzKFtub2RlXSwgZnVuY3Rpb24gKGR6KSB7XG4gICAgICAgICAgcmV0dXJuIGdldENvbmZpZ1Byb3AoZHosIFwiZHJvcFRhcmdldFN0eWxlXCIpO1xuICAgICAgICB9LCBmdW5jdGlvbiAoZHopIHtcbiAgICAgICAgICByZXR1cm4gZ2V0Q29uZmlnUHJvcChkeiwgXCJkcm9wVGFyZ2V0Q2xhc3Nlc1wiKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uZmlnLmRyb3BGcm9tT3RoZXJzRGlzYWJsZWQgPSBkcm9wRnJvbU90aGVyc0Rpc2FibGVkO1xuICAgIGR6VG9Db25maWcuc2V0KG5vZGUsIGNvbmZpZyk7XG4gICAgdmFyIHNoYWRvd0VsSWR4ID0gZmluZFNoYWRvd0VsZW1lbnRJZHgoY29uZmlnLml0ZW1zKTtcblxuICAgIHZhciBfbG9vcCA9IGZ1bmN0aW9uIF9sb29wKGlkeCkge1xuICAgICAgdmFyIGRyYWdnYWJsZUVsID0gbm9kZS5jaGlsZHJlbltpZHhdO1xuICAgICAgc3R5bGVEcmFnZ2FibGUoZHJhZ2dhYmxlRWwsIGRyYWdEaXNhYmxlZCk7XG5cbiAgICAgIGlmIChpZHggPT09IHNoYWRvd0VsSWR4KSB7XG4gICAgICAgIGlmICghbW9ycGhEaXNhYmxlZCkge1xuICAgICAgICAgIG1vcnBoRHJhZ2dlZEVsZW1lbnRUb0JlTGlrZShkcmFnZ2VkRWwsIGRyYWdnYWJsZUVsLCBjdXJyZW50TW91c2VQb3NpdGlvbi54LCBjdXJyZW50TW91c2VQb3NpdGlvbi55LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gY29uZmlnLnRyYW5zZm9ybURyYWdnZWRFbGVtZW50KGRyYWdnZWRFbCwgZHJhZ2dlZEVsRGF0YSwgaWR4KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRlY29yYXRlU2hhZG93RWwoZHJhZ2dhYmxlRWwpO1xuICAgICAgICByZXR1cm4gXCJjb250aW51ZVwiO1xuICAgICAgfVxuXG4gICAgICBkcmFnZ2FibGVFbC5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIGVsVG9Nb3VzZURvd25MaXN0ZW5lci5nZXQoZHJhZ2dhYmxlRWwpKTtcbiAgICAgIGRyYWdnYWJsZUVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0b3VjaHN0YXJ0XCIsIGVsVG9Nb3VzZURvd25MaXN0ZW5lci5nZXQoZHJhZ2dhYmxlRWwpKTtcblxuICAgICAgaWYgKCFkcmFnRGlzYWJsZWQpIHtcbiAgICAgICAgZHJhZ2dhYmxlRWwuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLCBoYW5kbGVNb3VzZURvd24pO1xuICAgICAgICBkcmFnZ2FibGVFbC5hZGRFdmVudExpc3RlbmVyKFwidG91Y2hzdGFydFwiLCBoYW5kbGVNb3VzZURvd24pO1xuICAgICAgICBlbFRvTW91c2VEb3duTGlzdGVuZXIuc2V0KGRyYWdnYWJsZUVsLCBoYW5kbGVNb3VzZURvd24pO1xuICAgICAgfSAvLyB1cGRhdGluZyB0aGUgaWR4XG5cblxuICAgICAgZWxUb0lkeC5zZXQoZHJhZ2dhYmxlRWwsIGlkeCk7XG5cbiAgICAgIGlmICghaW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgaW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBmb3IgKHZhciBpZHggPSAwOyBpZHggPCBub2RlLmNoaWxkcmVuLmxlbmd0aDsgaWR4KyspIHtcbiAgICAgIHZhciBfcmV0ID0gX2xvb3AoaWR4KTtcblxuICAgICAgaWYgKF9yZXQgPT09IFwiY29udGludWVcIikgY29udGludWU7XG4gICAgfVxuICB9XG5cbiAgY29uZmlndXJlKG9wdGlvbnMpO1xuICByZXR1cm4ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKG5ld09wdGlvbnMpIHtcbiAgICAgIHByaW50RGVidWcoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gXCJwb2ludGVyIGRuZHpvbmUgd2lsbCB1cGRhdGUgbmV3T3B0aW9uczogXCIuY29uY2F0KHRvU3RyaW5nKG5ld09wdGlvbnMpKTtcbiAgICAgIH0pO1xuICAgICAgY29uZmlndXJlKG5ld09wdGlvbnMpO1xuICAgIH0sXG4gICAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgIGZ1bmN0aW9uIGRlc3Ryb3lEeigpIHtcbiAgICAgICAgcHJpbnREZWJ1ZyhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIFwicG9pbnRlciBkbmR6b25lIHdpbGwgZGVzdHJveVwiO1xuICAgICAgICB9KTtcbiAgICAgICAgdW5yZWdpc3RlckRyb3Bab25lKG5vZGUsIGR6VG9Db25maWcuZ2V0KG5vZGUpLnR5cGUpO1xuICAgICAgICBkelRvQ29uZmlnW1wiZGVsZXRlXCJdKG5vZGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNXb3JraW5nT25QcmV2aW91c0RyYWcpIHtcbiAgICAgICAgcHJpbnREZWJ1ZyhmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIFwicG9pbnRlciBkbmR6b25lIHdpbGwgYmUgc2NoZWR1bGVkIGZvciBkZXN0cnVjdGlvblwiO1xuICAgICAgICB9KTtcbiAgICAgICAgc2NoZWR1bGVEWkZvclJlbW92YWxBZnRlckRyb3Aobm9kZSwgZGVzdHJveUR6KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRlc3Ryb3lEeigpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cblxudmFyIF9JRF9UT19JTlNUUlVDVElPTjtcbnZhciBJTlNUUlVDVElPTl9JRHMgPSB7XG4gIERORF9aT05FX0FDVElWRTogXCJkbmQtem9uZS1hY3RpdmVcIixcbiAgRE5EX1pPTkVfRFJBR19ESVNBQkxFRDogXCJkbmQtem9uZS1kcmFnLWRpc2FibGVkXCJcbn07XG52YXIgSURfVE9fSU5TVFJVQ1RJT04gPSAoX0lEX1RPX0lOU1RSVUNUSU9OID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfSURfVE9fSU5TVFJVQ1RJT04sIElOU1RSVUNUSU9OX0lEcy5ETkRfWk9ORV9BQ1RJVkUsIFwiVGFiIHRvIG9uZSB0aGUgaXRlbXMgYW5kIHByZXNzIHNwYWNlLWJhciBvciBlbnRlciB0byBzdGFydCBkcmFnZ2luZyBpdFwiKSwgX2RlZmluZVByb3BlcnR5KF9JRF9UT19JTlNUUlVDVElPTiwgSU5TVFJVQ1RJT05fSURzLkRORF9aT05FX0RSQUdfRElTQUJMRUQsIFwiVGhpcyBpcyBhIGRpc2FibGVkIGRyYWcgYW5kIGRyb3AgbGlzdFwiKSwgX0lEX1RPX0lOU1RSVUNUSU9OKTtcbnZhciBBTEVSVF9ESVZfSUQgPSBcImRuZC1hY3Rpb24tYXJpYS1hbGVydFwiO1xudmFyIGFsZXJ0c0RpdjtcblxuZnVuY3Rpb24gaW5pdEFyaWFPbkJyb3dzZXIoKSB7XG4gIGlmIChhbGVydHNEaXYpIHtcbiAgICAvLyBpdCBpcyBhbHJlYWR5IGluaXRpYWxpemVkXG4gICAgcmV0dXJuO1xuICB9IC8vIHNldHRpbmcgdGhlIGR5bmFtaWMgYWxlcnRzXG5cblxuICBhbGVydHNEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXG4gIChmdW5jdGlvbiBpbml0QWxlcnRzRGl2KCkge1xuICAgIGFsZXJ0c0Rpdi5pZCA9IEFMRVJUX0RJVl9JRDsgLy8gdGFiIGluZGV4IC0xIG1ha2VzIHRoZSBhbGVydCBiZSByZWFkIHR3aWNlIG9uIGNocm9tZSBmb3Igc29tZSByZWFzb25cbiAgICAvL2FsZXJ0c0Rpdi50YWJJbmRleCA9IC0xO1xuXG4gICAgYWxlcnRzRGl2LnN0eWxlLnBvc2l0aW9uID0gXCJmaXhlZFwiO1xuICAgIGFsZXJ0c0Rpdi5zdHlsZS5ib3R0b20gPSBcIjBcIjtcbiAgICBhbGVydHNEaXYuc3R5bGUubGVmdCA9IFwiMFwiO1xuICAgIGFsZXJ0c0Rpdi5zdHlsZS56SW5kZXggPSBcIi01XCI7XG4gICAgYWxlcnRzRGl2LnN0eWxlLm9wYWNpdHkgPSBcIjBcIjtcbiAgICBhbGVydHNEaXYuc3R5bGUuaGVpZ2h0ID0gXCIwXCI7XG4gICAgYWxlcnRzRGl2LnN0eWxlLndpZHRoID0gXCIwXCI7XG4gICAgYWxlcnRzRGl2LnNldEF0dHJpYnV0ZShcInJvbGVcIiwgXCJhbGVydFwiKTtcbiAgfSkoKTtcblxuICBkb2N1bWVudC5ib2R5LnByZXBlbmQoYWxlcnRzRGl2KTsgLy8gc2V0dGluZyB0aGUgaW5zdHJ1Y3Rpb25zXG5cbiAgT2JqZWN0LmVudHJpZXMoSURfVE9fSU5TVFJVQ1RJT04pLmZvckVhY2goZnVuY3Rpb24gKF9yZWYpIHtcbiAgICB2YXIgX3JlZjIgPSBfc2xpY2VkVG9BcnJheShfcmVmLCAyKSxcbiAgICAgICAgaWQgPSBfcmVmMlswXSxcbiAgICAgICAgdHh0ID0gX3JlZjJbMV07XG5cbiAgICByZXR1cm4gZG9jdW1lbnQuYm9keS5wcmVwZW5kKGluc3RydWN0aW9uVG9IaWRkZW5EaXYoaWQsIHR4dCkpO1xuICB9KTtcbn1cbi8qKlxuICogSW5pdGlhbGl6ZXMgdGhlIHN0YXRpYyBhcmlhIGluc3RydWN0aW9ucyBzbyB0aGV5IGNhbiBiZSBhdHRhY2hlZCB0byB6b25lc1xuICogQHJldHVybiB7e0RORF9aT05FX0FDVElWRTogc3RyaW5nLCBETkRfWk9ORV9EUkFHX0RJU0FCTEVEOiBzdHJpbmd9IHwgbnVsbH0gLSB0aGUgSURzIGZvciBzdGF0aWMgYXJpYSBpbnN0cnVjdGlvbiAodG8gYmUgdXNlZCB2aWEgYXJpYS1kZXNjcmliZWRieSkgb3IgbnVsbCBvbiB0aGUgc2VydmVyXG4gKi9cblxuXG5mdW5jdGlvbiBpbml0QXJpYSgpIHtcbiAgaWYgKGlzT25TZXJ2ZXIpIHJldHVybiBudWxsO1xuXG4gIGlmIChkb2N1bWVudC5yZWFkeVN0YXRlID09PSBcImNvbXBsZXRlXCIpIHtcbiAgICBpbml0QXJpYU9uQnJvd3NlcigpO1xuICB9IGVsc2Uge1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLCBpbml0QXJpYU9uQnJvd3Nlcik7XG4gIH1cblxuICByZXR1cm4gX29iamVjdFNwcmVhZDIoe30sIElOU1RSVUNUSU9OX0lEcyk7XG59XG4vKipcbiAqIFJlbW92ZXMgYWxsIHRoZSBhcnRpZmFjdHMgKGRvbSBlbGVtZW50cykgYWRkZWQgYnkgdGhpcyBtb2R1bGVcbiAqL1xuXG5mdW5jdGlvbiBkZXN0cm95QXJpYSgpIHtcbiAgaWYgKGlzT25TZXJ2ZXIgfHwgIWFsZXJ0c0RpdikgcmV0dXJuO1xuICBPYmplY3Qua2V5cyhJRF9UT19JTlNUUlVDVElPTikuZm9yRWFjaChmdW5jdGlvbiAoaWQpIHtcbiAgICB2YXIgX2RvY3VtZW50JGdldEVsZW1lbnRCO1xuXG4gICAgcmV0dXJuIChfZG9jdW1lbnQkZ2V0RWxlbWVudEIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZCkpID09PSBudWxsIHx8IF9kb2N1bWVudCRnZXRFbGVtZW50QiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2RvY3VtZW50JGdldEVsZW1lbnRCLnJlbW92ZSgpO1xuICB9KTtcbiAgYWxlcnRzRGl2LnJlbW92ZSgpO1xuICBhbGVydHNEaXYgPSB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIGluc3RydWN0aW9uVG9IaWRkZW5EaXYoaWQsIHR4dCkge1xuICB2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgZGl2LmlkID0gaWQ7XG4gIGRpdi5pbm5lckhUTUwgPSBcIjxwPlwiLmNvbmNhdCh0eHQsIFwiPC9wPlwiKTtcbiAgZGl2LnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgZGl2LnN0eWxlLnBvc2l0aW9uID0gXCJmaXhlZFwiO1xuICBkaXYuc3R5bGUuekluZGV4ID0gXCItNVwiO1xuICByZXR1cm4gZGl2O1xufVxuLyoqXG4gKiBXaWxsIG1ha2UgdGhlIHNjcmVlbiByZWFkZXIgYWxlcnQgdGhlIHByb3ZpZGVkIHRleHQgdG8gdGhlIHVzZXJcbiAqIEBwYXJhbSB7c3RyaW5nfSB0eHRcbiAqL1xuXG5cbmZ1bmN0aW9uIGFsZXJ0VG9TY3JlZW5SZWFkZXIodHh0KSB7XG4gIGlmIChpc09uU2VydmVyKSByZXR1cm47XG5cbiAgaWYgKCFhbGVydHNEaXYpIHtcbiAgICBpbml0QXJpYU9uQnJvd3NlcigpO1xuICB9XG5cbiAgYWxlcnRzRGl2LmlubmVySFRNTCA9IFwiXCI7XG4gIHZhciBhbGVydFRleHQgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh0eHQpO1xuICBhbGVydHNEaXYuYXBwZW5kQ2hpbGQoYWxlcnRUZXh0KTsgLy8gdGhpcyBpcyBuZWVkZWQgZm9yIFNhZmFyaVxuXG4gIGFsZXJ0c0Rpdi5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gIGFsZXJ0c0Rpdi5zdHlsZS5kaXNwbGF5ID0gXCJpbmxpbmVcIjtcbn1cblxudmFyIERFRkFVTFRfRFJPUF9aT05FX1RZUEUkMSA9IFwiLS1hbnktLVwiO1xudmFyIERFRkFVTFRfRFJPUF9UQVJHRVRfU1RZTEUkMSA9IHtcbiAgb3V0bGluZTogXCJyZ2JhKDI1NSwgMjU1LCAxMDIsIDAuNykgc29saWQgMnB4XCJcbn07XG52YXIgaXNEcmFnZ2luZyA9IGZhbHNlO1xudmFyIGRyYWdnZWRJdGVtVHlwZTtcbnZhciBmb2N1c2VkRHo7XG52YXIgZm9jdXNlZER6TGFiZWwgPSBcIlwiO1xudmFyIGZvY3VzZWRJdGVtO1xudmFyIGZvY3VzZWRJdGVtSWQ7XG52YXIgZm9jdXNlZEl0ZW1MYWJlbCA9IFwiXCI7XG52YXIgYWxsRHJhZ1RhcmdldHMgPSBuZXcgV2Vha1NldCgpO1xudmFyIGVsVG9LZXlEb3duTGlzdGVuZXJzID0gbmV3IFdlYWtNYXAoKTtcbnZhciBlbFRvRm9jdXNMaXN0ZW5lcnMgPSBuZXcgV2Vha01hcCgpO1xudmFyIGR6VG9IYW5kbGVzID0gbmV3IE1hcCgpO1xudmFyIGR6VG9Db25maWckMSA9IG5ldyBNYXAoKTtcbnZhciB0eXBlVG9Ecm9wWm9uZXMkMSA9IG5ldyBNYXAoKTtcbi8qIFRPRE8gKHBvdGVudGlhbGx5KVxuICogd2hhdCdzIHRoZSBkZWFsIHdpdGggdGhlIGJsYWNrIGJvcmRlciBvZiB2b2ljZS1yZWFkZXIgbm90IGZvbGxvd2luZyBmb2N1cz9cbiAqIG1heWJlIGtlZXAgZm9jdXMgb24gdGhlIGxhc3QgZHJhZ2dlZCBpdGVtIHVwb24gZHJvcD9cbiAqL1xuXG52YXIgSU5TVFJVQ1RJT05fSURzJDE7XG4vKiBkcm9wLXpvbmVzIHJlZ2lzdHJhdGlvbiBtYW5hZ2VtZW50ICovXG5cbmZ1bmN0aW9uIHJlZ2lzdGVyRHJvcFpvbmUkMShkcm9wWm9uZUVsLCB0eXBlKSB7XG4gIHByaW50RGVidWcoZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBcInJlZ2lzdGVyaW5nIGRyb3Atem9uZSBpZiBhYnNlbnRcIjtcbiAgfSk7XG5cbiAgaWYgKHR5cGVUb0Ryb3Bab25lcyQxLnNpemUgPT09IDApIHtcbiAgICBwcmludERlYnVnKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBcImFkZGluZyBnbG9iYWwga2V5ZG93biBhbmQgY2xpY2sgaGFuZGxlcnNcIjtcbiAgICB9KTtcbiAgICBJTlNUUlVDVElPTl9JRHMkMSA9IGluaXRBcmlhKCk7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIGdsb2JhbEtleURvd25IYW5kbGVyKTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGdsb2JhbENsaWNrSGFuZGxlcik7XG4gIH1cblxuICBpZiAoIXR5cGVUb0Ryb3Bab25lcyQxLmhhcyh0eXBlKSkge1xuICAgIHR5cGVUb0Ryb3Bab25lcyQxLnNldCh0eXBlLCBuZXcgU2V0KCkpO1xuICB9XG5cbiAgaWYgKCF0eXBlVG9Ecm9wWm9uZXMkMS5nZXQodHlwZSkuaGFzKGRyb3Bab25lRWwpKSB7XG4gICAgdHlwZVRvRHJvcFpvbmVzJDEuZ2V0KHR5cGUpLmFkZChkcm9wWm9uZUVsKTtcbiAgICBpbmNyZW1lbnRBY3RpdmVEcm9wWm9uZUNvdW50KCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdW5yZWdpc3RlckRyb3Bab25lJDEoZHJvcFpvbmVFbCwgdHlwZSkge1xuICBwcmludERlYnVnKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gXCJ1bnJlZ2lzdGVyaW5nIGRyb3Atem9uZVwiO1xuICB9KTtcblxuICBpZiAoZm9jdXNlZER6ID09PSBkcm9wWm9uZUVsKSB7XG4gICAgaGFuZGxlRHJvcCQxKCk7XG4gIH1cblxuICB0eXBlVG9Ecm9wWm9uZXMkMS5nZXQodHlwZSlbXCJkZWxldGVcIl0oZHJvcFpvbmVFbCk7XG4gIGRlY3JlbWVudEFjdGl2ZURyb3Bab25lQ291bnQoKTtcblxuICBpZiAodHlwZVRvRHJvcFpvbmVzJDEuZ2V0KHR5cGUpLnNpemUgPT09IDApIHtcbiAgICB0eXBlVG9Ecm9wWm9uZXMkMVtcImRlbGV0ZVwiXSh0eXBlKTtcbiAgfVxuXG4gIGlmICh0eXBlVG9Ecm9wWm9uZXMkMS5zaXplID09PSAwKSB7XG4gICAgcHJpbnREZWJ1ZyhmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gXCJyZW1vdmluZyBnbG9iYWwga2V5ZG93biBhbmQgY2xpY2sgaGFuZGxlcnNcIjtcbiAgICB9KTtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgZ2xvYmFsS2V5RG93bkhhbmRsZXIpO1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZ2xvYmFsQ2xpY2tIYW5kbGVyKTtcbiAgICBJTlNUUlVDVElPTl9JRHMkMSA9IHVuZGVmaW5lZDtcbiAgICBkZXN0cm95QXJpYSgpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdsb2JhbEtleURvd25IYW5kbGVyKGUpIHtcbiAgaWYgKCFpc0RyYWdnaW5nKSByZXR1cm47XG5cbiAgc3dpdGNoIChlLmtleSkge1xuICAgIGNhc2UgXCJFc2NhcGVcIjpcbiAgICAgIHtcbiAgICAgICAgaGFuZGxlRHJvcCQxKCk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGdsb2JhbENsaWNrSGFuZGxlcigpIHtcbiAgaWYgKCFpc0RyYWdnaW5nKSByZXR1cm47XG5cbiAgaWYgKCFhbGxEcmFnVGFyZ2V0cy5oYXMoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkpIHtcbiAgICBwcmludERlYnVnKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBcImNsaWNrZWQgb3V0c2lkZSBvZiBhbnkgZHJhZ2dhYmxlXCI7XG4gICAgfSk7XG4gICAgaGFuZGxlRHJvcCQxKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gaGFuZGxlWm9uZUZvY3VzKGUpIHtcbiAgcHJpbnREZWJ1ZyhmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIFwiem9uZSBmb2N1c1wiO1xuICB9KTtcbiAgaWYgKCFpc0RyYWdnaW5nKSByZXR1cm47XG4gIHZhciBuZXdseUZvY3VzZWREeiA9IGUuY3VycmVudFRhcmdldDtcbiAgaWYgKG5ld2x5Rm9jdXNlZER6ID09PSBmb2N1c2VkRHopIHJldHVybjtcbiAgZm9jdXNlZER6TGFiZWwgPSBuZXdseUZvY3VzZWREei5nZXRBdHRyaWJ1dGUoXCJhcmlhLWxhYmVsXCIpIHx8IFwiXCI7XG5cbiAgdmFyIF9kelRvQ29uZmlnJGdldCA9IGR6VG9Db25maWckMS5nZXQoZm9jdXNlZER6KSxcbiAgICAgIG9yaWdpbkl0ZW1zID0gX2R6VG9Db25maWckZ2V0Lml0ZW1zO1xuXG4gIHZhciBvcmlnaW5JdGVtID0gb3JpZ2luSXRlbXMuZmluZChmdW5jdGlvbiAoaXRlbSkge1xuICAgIHJldHVybiBpdGVtW0lURU1fSURfS0VZXSA9PT0gZm9jdXNlZEl0ZW1JZDtcbiAgfSk7XG4gIHZhciBvcmlnaW5JZHggPSBvcmlnaW5JdGVtcy5pbmRleE9mKG9yaWdpbkl0ZW0pO1xuICB2YXIgaXRlbVRvTW92ZSA9IG9yaWdpbkl0ZW1zLnNwbGljZShvcmlnaW5JZHgsIDEpWzBdO1xuXG4gIHZhciBfZHpUb0NvbmZpZyRnZXQyID0gZHpUb0NvbmZpZyQxLmdldChuZXdseUZvY3VzZWREeiksXG4gICAgICB0YXJnZXRJdGVtcyA9IF9kelRvQ29uZmlnJGdldDIuaXRlbXMsXG4gICAgICBhdXRvQXJpYURpc2FibGVkID0gX2R6VG9Db25maWckZ2V0Mi5hdXRvQXJpYURpc2FibGVkO1xuXG4gIGlmIChuZXdseUZvY3VzZWREei5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3AgPCBmb2N1c2VkRHouZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wIHx8IG5ld2x5Rm9jdXNlZER6LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmxlZnQgPCBmb2N1c2VkRHouZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCkge1xuICAgIHRhcmdldEl0ZW1zLnB1c2goaXRlbVRvTW92ZSk7XG5cbiAgICBpZiAoIWF1dG9BcmlhRGlzYWJsZWQpIHtcbiAgICAgIGFsZXJ0VG9TY3JlZW5SZWFkZXIoXCJNb3ZlZCBpdGVtIFwiLmNvbmNhdChmb2N1c2VkSXRlbUxhYmVsLCBcIiB0byB0aGUgZW5kIG9mIHRoZSBsaXN0IFwiKS5jb25jYXQoZm9jdXNlZER6TGFiZWwpKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGFyZ2V0SXRlbXMudW5zaGlmdChpdGVtVG9Nb3ZlKTtcblxuICAgIGlmICghYXV0b0FyaWFEaXNhYmxlZCkge1xuICAgICAgYWxlcnRUb1NjcmVlblJlYWRlcihcIk1vdmVkIGl0ZW0gXCIuY29uY2F0KGZvY3VzZWRJdGVtTGFiZWwsIFwiIHRvIHRoZSBiZWdpbm5pbmcgb2YgdGhlIGxpc3QgXCIpLmNvbmNhdChmb2N1c2VkRHpMYWJlbCkpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBkekZyb20gPSBmb2N1c2VkRHo7XG4gIGRpc3BhdGNoRmluYWxpemVFdmVudChkekZyb20sIG9yaWdpbkl0ZW1zLCB7XG4gICAgdHJpZ2dlcjogVFJJR0dFUlMuRFJPUFBFRF9JTlRPX0FOT1RIRVIsXG4gICAgaWQ6IGZvY3VzZWRJdGVtSWQsXG4gICAgc291cmNlOiBTT1VSQ0VTLktFWUJPQVJEXG4gIH0pO1xuICBkaXNwYXRjaEZpbmFsaXplRXZlbnQobmV3bHlGb2N1c2VkRHosIHRhcmdldEl0ZW1zLCB7XG4gICAgdHJpZ2dlcjogVFJJR0dFUlMuRFJPUFBFRF9JTlRPX1pPTkUsXG4gICAgaWQ6IGZvY3VzZWRJdGVtSWQsXG4gICAgc291cmNlOiBTT1VSQ0VTLktFWUJPQVJEXG4gIH0pO1xuICBmb2N1c2VkRHogPSBuZXdseUZvY3VzZWREejtcbn1cblxuZnVuY3Rpb24gdHJpZ2dlckFsbER6c1VwZGF0ZSgpIHtcbiAgZHpUb0hhbmRsZXMuZm9yRWFjaChmdW5jdGlvbiAoX3JlZiwgZHopIHtcbiAgICB2YXIgdXBkYXRlID0gX3JlZi51cGRhdGU7XG4gICAgcmV0dXJuIHVwZGF0ZShkelRvQ29uZmlnJDEuZ2V0KGR6KSk7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBoYW5kbGVEcm9wJDEoKSB7XG4gIHZhciBkaXNwYXRjaENvbnNpZGVyID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB0cnVlO1xuICBwcmludERlYnVnKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gXCJkcm9wXCI7XG4gIH0pO1xuXG4gIGlmICghZHpUb0NvbmZpZyQxLmdldChmb2N1c2VkRHopLmF1dG9BcmlhRGlzYWJsZWQpIHtcbiAgICBhbGVydFRvU2NyZWVuUmVhZGVyKFwiU3RvcHBlZCBkcmFnZ2luZyBpdGVtIFwiLmNvbmNhdChmb2N1c2VkSXRlbUxhYmVsKSk7XG4gIH1cblxuICBpZiAoYWxsRHJhZ1RhcmdldHMuaGFzKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpKSB7XG4gICAgZG9jdW1lbnQuYWN0aXZlRWxlbWVudC5ibHVyKCk7XG4gIH1cblxuICBpZiAoZGlzcGF0Y2hDb25zaWRlcikge1xuICAgIGRpc3BhdGNoQ29uc2lkZXJFdmVudChmb2N1c2VkRHosIGR6VG9Db25maWckMS5nZXQoZm9jdXNlZER6KS5pdGVtcywge1xuICAgICAgdHJpZ2dlcjogVFJJR0dFUlMuRFJBR19TVE9QUEVELFxuICAgICAgaWQ6IGZvY3VzZWRJdGVtSWQsXG4gICAgICBzb3VyY2U6IFNPVVJDRVMuS0VZQk9BUkRcbiAgICB9KTtcbiAgfVxuXG4gIHN0eWxlSW5hY3RpdmVEcm9wWm9uZXModHlwZVRvRHJvcFpvbmVzJDEuZ2V0KGRyYWdnZWRJdGVtVHlwZSksIGZ1bmN0aW9uIChkeikge1xuICAgIHJldHVybiBkelRvQ29uZmlnJDEuZ2V0KGR6KS5kcm9wVGFyZ2V0U3R5bGU7XG4gIH0sIGZ1bmN0aW9uIChkeikge1xuICAgIHJldHVybiBkelRvQ29uZmlnJDEuZ2V0KGR6KS5kcm9wVGFyZ2V0Q2xhc3NlcztcbiAgfSk7XG4gIGZvY3VzZWRJdGVtID0gbnVsbDtcbiAgZm9jdXNlZEl0ZW1JZCA9IG51bGw7XG4gIGZvY3VzZWRJdGVtTGFiZWwgPSBcIlwiO1xuICBkcmFnZ2VkSXRlbVR5cGUgPSBudWxsO1xuICBmb2N1c2VkRHogPSBudWxsO1xuICBmb2N1c2VkRHpMYWJlbCA9IFwiXCI7XG4gIGlzRHJhZ2dpbmcgPSBmYWxzZTtcbiAgdHJpZ2dlckFsbER6c1VwZGF0ZSgpO1xufSAvLy8vLy9cblxuXG5mdW5jdGlvbiBkbmR6b25lJDEobm9kZSwgb3B0aW9ucykge1xuICB2YXIgY29uZmlnID0ge1xuICAgIGl0ZW1zOiB1bmRlZmluZWQsXG4gICAgdHlwZTogdW5kZWZpbmVkLFxuICAgIGRyYWdEaXNhYmxlZDogZmFsc2UsXG4gICAgem9uZVRhYkluZGV4OiAwLFxuICAgIGRyb3BGcm9tT3RoZXJzRGlzYWJsZWQ6IGZhbHNlLFxuICAgIGRyb3BUYXJnZXRTdHlsZTogREVGQVVMVF9EUk9QX1RBUkdFVF9TVFlMRSQxLFxuICAgIGRyb3BUYXJnZXRDbGFzc2VzOiBbXSxcbiAgICBhdXRvQXJpYURpc2FibGVkOiBmYWxzZVxuICB9O1xuXG4gIGZ1bmN0aW9uIHN3YXAoYXJyLCBpLCBqKSB7XG4gICAgaWYgKGFyci5sZW5ndGggPD0gMSkgcmV0dXJuO1xuICAgIGFyci5zcGxpY2UoaiwgMSwgYXJyLnNwbGljZShpLCAxLCBhcnJbal0pWzBdKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZUtleURvd24oZSkge1xuICAgIHByaW50RGVidWcoZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIFtcImhhbmRsaW5nIGtleSBkb3duXCIsIGUua2V5XTtcbiAgICB9KTtcblxuICAgIHN3aXRjaCAoZS5rZXkpIHtcbiAgICAgIGNhc2UgXCJFbnRlclwiOlxuICAgICAgY2FzZSBcIiBcIjpcbiAgICAgICAge1xuICAgICAgICAgIC8vIHdlIGRvbid0IHdhbnQgdG8gYWZmZWN0IG5lc3RlZCBpbnB1dCBlbGVtZW50cyBvciBjbGlja2FibGUgZWxlbWVudHNcbiAgICAgICAgICBpZiAoKGUudGFyZ2V0LmRpc2FibGVkICE9PSB1bmRlZmluZWQgfHwgZS50YXJnZXQuaHJlZiB8fCBlLnRhcmdldC5pc0NvbnRlbnRFZGl0YWJsZSkgJiYgIWFsbERyYWdUYXJnZXRzLmhhcyhlLnRhcmdldCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7IC8vIHByZXZlbnRpbmcgc2Nyb2xsaW5nIG9uIHNwYWNlYmFyXG5cbiAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgICAgICAgaWYgKGlzRHJhZ2dpbmcpIHtcbiAgICAgICAgICAgIC8vIFRPRE8gLSBzaG91bGQgdGhpcyB0cmlnZ2VyIGEgZHJvcD8gb25seSBoZXJlIG9yIGluIGdlbmVyYWwgKGFzIGluIHdoZW4gaGl0dGluZyBzcGFjZSBvciBlbnRlciBvdXRzaWRlIG9mIGFueSB6b25lKT9cbiAgICAgICAgICAgIGhhbmRsZURyb3AkMSgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBkcmFnIHN0YXJ0XG4gICAgICAgICAgICBoYW5kbGVEcmFnU3RhcnQoZSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgY2FzZSBcIkFycm93RG93blwiOlxuICAgICAgY2FzZSBcIkFycm93UmlnaHRcIjpcbiAgICAgICAge1xuICAgICAgICAgIGlmICghaXNEcmFnZ2luZykgcmV0dXJuO1xuICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTsgLy8gcHJldmVudCBzY3JvbGxpbmdcblxuICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICAgICAgICB2YXIgX2R6VG9Db25maWckZ2V0MyA9IGR6VG9Db25maWckMS5nZXQobm9kZSksXG4gICAgICAgICAgICAgIGl0ZW1zID0gX2R6VG9Db25maWckZ2V0My5pdGVtcztcblxuICAgICAgICAgIHZhciBjaGlsZHJlbiA9IEFycmF5LmZyb20obm9kZS5jaGlsZHJlbik7XG4gICAgICAgICAgdmFyIGlkeCA9IGNoaWxkcmVuLmluZGV4T2YoZS5jdXJyZW50VGFyZ2V0KTtcbiAgICAgICAgICBwcmludERlYnVnKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBbXCJhcnJvdyBkb3duXCIsIGlkeF07XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBpZiAoaWR4IDwgY2hpbGRyZW4ubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgaWYgKCFjb25maWcuYXV0b0FyaWFEaXNhYmxlZCkge1xuICAgICAgICAgICAgICBhbGVydFRvU2NyZWVuUmVhZGVyKFwiTW92ZWQgaXRlbSBcIi5jb25jYXQoZm9jdXNlZEl0ZW1MYWJlbCwgXCIgdG8gcG9zaXRpb24gXCIpLmNvbmNhdChpZHggKyAyLCBcIiBpbiB0aGUgbGlzdCBcIikuY29uY2F0KGZvY3VzZWREekxhYmVsKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHN3YXAoaXRlbXMsIGlkeCwgaWR4ICsgMSk7XG4gICAgICAgICAgICBkaXNwYXRjaEZpbmFsaXplRXZlbnQobm9kZSwgaXRlbXMsIHtcbiAgICAgICAgICAgICAgdHJpZ2dlcjogVFJJR0dFUlMuRFJPUFBFRF9JTlRPX1pPTkUsXG4gICAgICAgICAgICAgIGlkOiBmb2N1c2VkSXRlbUlkLFxuICAgICAgICAgICAgICBzb3VyY2U6IFNPVVJDRVMuS0VZQk9BUkRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgIGNhc2UgXCJBcnJvd1VwXCI6XG4gICAgICBjYXNlIFwiQXJyb3dMZWZ0XCI6XG4gICAgICAgIHtcbiAgICAgICAgICBpZiAoIWlzRHJhZ2dpbmcpIHJldHVybjtcbiAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7IC8vIHByZXZlbnQgc2Nyb2xsaW5nXG5cbiAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgICAgICAgdmFyIF9kelRvQ29uZmlnJGdldDQgPSBkelRvQ29uZmlnJDEuZ2V0KG5vZGUpLFxuICAgICAgICAgICAgICBfaXRlbXMgPSBfZHpUb0NvbmZpZyRnZXQ0Lml0ZW1zO1xuXG4gICAgICAgICAgdmFyIF9jaGlsZHJlbiA9IEFycmF5LmZyb20obm9kZS5jaGlsZHJlbik7XG5cbiAgICAgICAgICB2YXIgX2lkeCA9IF9jaGlsZHJlbi5pbmRleE9mKGUuY3VycmVudFRhcmdldCk7XG5cbiAgICAgICAgICBwcmludERlYnVnKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBbXCJhcnJvdyB1cFwiLCBfaWR4XTtcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGlmIChfaWR4ID4gMCkge1xuICAgICAgICAgICAgaWYgKCFjb25maWcuYXV0b0FyaWFEaXNhYmxlZCkge1xuICAgICAgICAgICAgICBhbGVydFRvU2NyZWVuUmVhZGVyKFwiTW92ZWQgaXRlbSBcIi5jb25jYXQoZm9jdXNlZEl0ZW1MYWJlbCwgXCIgdG8gcG9zaXRpb24gXCIpLmNvbmNhdChfaWR4LCBcIiBpbiB0aGUgbGlzdCBcIikuY29uY2F0KGZvY3VzZWREekxhYmVsKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHN3YXAoX2l0ZW1zLCBfaWR4LCBfaWR4IC0gMSk7XG4gICAgICAgICAgICBkaXNwYXRjaEZpbmFsaXplRXZlbnQobm9kZSwgX2l0ZW1zLCB7XG4gICAgICAgICAgICAgIHRyaWdnZXI6IFRSSUdHRVJTLkRST1BQRURfSU5UT19aT05FLFxuICAgICAgICAgICAgICBpZDogZm9jdXNlZEl0ZW1JZCxcbiAgICAgICAgICAgICAgc291cmNlOiBTT1VSQ0VTLktFWUJPQVJEXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZURyYWdTdGFydChlKSB7XG4gICAgcHJpbnREZWJ1ZyhmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gXCJkcmFnIHN0YXJ0XCI7XG4gICAgfSk7XG4gICAgc2V0Q3VycmVudEZvY3VzZWRJdGVtKGUuY3VycmVudFRhcmdldCk7XG4gICAgZm9jdXNlZER6ID0gbm9kZTtcbiAgICBkcmFnZ2VkSXRlbVR5cGUgPSBjb25maWcudHlwZTtcbiAgICBpc0RyYWdnaW5nID0gdHJ1ZTtcbiAgICB2YXIgZHJvcFRhcmdldHMgPSBBcnJheS5mcm9tKHR5cGVUb0Ryb3Bab25lcyQxLmdldChjb25maWcudHlwZSkpLmZpbHRlcihmdW5jdGlvbiAoZHopIHtcbiAgICAgIHJldHVybiBkeiA9PT0gZm9jdXNlZER6IHx8ICFkelRvQ29uZmlnJDEuZ2V0KGR6KS5kcm9wRnJvbU90aGVyc0Rpc2FibGVkO1xuICAgIH0pO1xuICAgIHN0eWxlQWN0aXZlRHJvcFpvbmVzKGRyb3BUYXJnZXRzLCBmdW5jdGlvbiAoZHopIHtcbiAgICAgIHJldHVybiBkelRvQ29uZmlnJDEuZ2V0KGR6KS5kcm9wVGFyZ2V0U3R5bGU7XG4gICAgfSwgZnVuY3Rpb24gKGR6KSB7XG4gICAgICByZXR1cm4gZHpUb0NvbmZpZyQxLmdldChkeikuZHJvcFRhcmdldENsYXNzZXM7XG4gICAgfSk7XG5cbiAgICBpZiAoIWNvbmZpZy5hdXRvQXJpYURpc2FibGVkKSB7XG4gICAgICB2YXIgbXNnID0gXCJTdGFydGVkIGRyYWdnaW5nIGl0ZW0gXCIuY29uY2F0KGZvY3VzZWRJdGVtTGFiZWwsIFwiLiBVc2UgdGhlIGFycm93IGtleXMgdG8gbW92ZSBpdCB3aXRoaW4gaXRzIGxpc3QgXCIpLmNvbmNhdChmb2N1c2VkRHpMYWJlbCk7XG5cbiAgICAgIGlmIChkcm9wVGFyZ2V0cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIG1zZyArPSBcIiwgb3IgdGFiIHRvIGFub3RoZXIgbGlzdCBpbiBvcmRlciB0byBtb3ZlIHRoZSBpdGVtIGludG8gaXRcIjtcbiAgICAgIH1cblxuICAgICAgYWxlcnRUb1NjcmVlblJlYWRlcihtc2cpO1xuICAgIH1cblxuICAgIGRpc3BhdGNoQ29uc2lkZXJFdmVudChub2RlLCBkelRvQ29uZmlnJDEuZ2V0KG5vZGUpLml0ZW1zLCB7XG4gICAgICB0cmlnZ2VyOiBUUklHR0VSUy5EUkFHX1NUQVJURUQsXG4gICAgICBpZDogZm9jdXNlZEl0ZW1JZCxcbiAgICAgIHNvdXJjZTogU09VUkNFUy5LRVlCT0FSRFxuICAgIH0pO1xuICAgIHRyaWdnZXJBbGxEenNVcGRhdGUoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZUNsaWNrKGUpIHtcbiAgICBpZiAoIWlzRHJhZ2dpbmcpIHJldHVybjtcbiAgICBpZiAoZS5jdXJyZW50VGFyZ2V0ID09PSBmb2N1c2VkSXRlbSkgcmV0dXJuO1xuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgaGFuZGxlRHJvcCQxKGZhbHNlKTtcbiAgICBoYW5kbGVEcmFnU3RhcnQoZSk7XG4gIH1cblxuICBmdW5jdGlvbiBzZXRDdXJyZW50Rm9jdXNlZEl0ZW0oZHJhZ2dhYmxlRWwpIHtcbiAgICB2YXIgX2R6VG9Db25maWckZ2V0NSA9IGR6VG9Db25maWckMS5nZXQobm9kZSksXG4gICAgICAgIGl0ZW1zID0gX2R6VG9Db25maWckZ2V0NS5pdGVtcztcblxuICAgIHZhciBjaGlsZHJlbiA9IEFycmF5LmZyb20obm9kZS5jaGlsZHJlbik7XG4gICAgdmFyIGZvY3VzZWRJdGVtSWR4ID0gY2hpbGRyZW4uaW5kZXhPZihkcmFnZ2FibGVFbCk7XG4gICAgZm9jdXNlZEl0ZW0gPSBkcmFnZ2FibGVFbDtcbiAgICBmb2N1c2VkSXRlbS50YWJJbmRleCA9IDA7XG4gICAgZm9jdXNlZEl0ZW1JZCA9IGl0ZW1zW2ZvY3VzZWRJdGVtSWR4XVtJVEVNX0lEX0tFWV07XG4gICAgZm9jdXNlZEl0ZW1MYWJlbCA9IGNoaWxkcmVuW2ZvY3VzZWRJdGVtSWR4XS5nZXRBdHRyaWJ1dGUoXCJhcmlhLWxhYmVsXCIpIHx8IFwiXCI7XG4gIH1cblxuICBmdW5jdGlvbiBjb25maWd1cmUoX3JlZjIpIHtcbiAgICB2YXIgX3JlZjIkaXRlbXMgPSBfcmVmMi5pdGVtcyxcbiAgICAgICAgaXRlbXMgPSBfcmVmMiRpdGVtcyA9PT0gdm9pZCAwID8gW10gOiBfcmVmMiRpdGVtcyxcbiAgICAgICAgX3JlZjIkdHlwZSA9IF9yZWYyLnR5cGUsXG4gICAgICAgIG5ld1R5cGUgPSBfcmVmMiR0eXBlID09PSB2b2lkIDAgPyBERUZBVUxUX0RST1BfWk9ORV9UWVBFJDEgOiBfcmVmMiR0eXBlLFxuICAgICAgICBfcmVmMiRkcmFnRGlzYWJsZWQgPSBfcmVmMi5kcmFnRGlzYWJsZWQsXG4gICAgICAgIGRyYWdEaXNhYmxlZCA9IF9yZWYyJGRyYWdEaXNhYmxlZCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmMiRkcmFnRGlzYWJsZWQsXG4gICAgICAgIF9yZWYyJHpvbmVUYWJJbmRleCA9IF9yZWYyLnpvbmVUYWJJbmRleCxcbiAgICAgICAgem9uZVRhYkluZGV4ID0gX3JlZjIkem9uZVRhYkluZGV4ID09PSB2b2lkIDAgPyAwIDogX3JlZjIkem9uZVRhYkluZGV4LFxuICAgICAgICBfcmVmMiRkcm9wRnJvbU90aGVyc0QgPSBfcmVmMi5kcm9wRnJvbU90aGVyc0Rpc2FibGVkLFxuICAgICAgICBkcm9wRnJvbU90aGVyc0Rpc2FibGVkID0gX3JlZjIkZHJvcEZyb21PdGhlcnNEID09PSB2b2lkIDAgPyBmYWxzZSA6IF9yZWYyJGRyb3BGcm9tT3RoZXJzRCxcbiAgICAgICAgX3JlZjIkZHJvcFRhcmdldFN0eWxlID0gX3JlZjIuZHJvcFRhcmdldFN0eWxlLFxuICAgICAgICBkcm9wVGFyZ2V0U3R5bGUgPSBfcmVmMiRkcm9wVGFyZ2V0U3R5bGUgPT09IHZvaWQgMCA/IERFRkFVTFRfRFJPUF9UQVJHRVRfU1RZTEUkMSA6IF9yZWYyJGRyb3BUYXJnZXRTdHlsZSxcbiAgICAgICAgX3JlZjIkZHJvcFRhcmdldENsYXNzID0gX3JlZjIuZHJvcFRhcmdldENsYXNzZXMsXG4gICAgICAgIGRyb3BUYXJnZXRDbGFzc2VzID0gX3JlZjIkZHJvcFRhcmdldENsYXNzID09PSB2b2lkIDAgPyBbXSA6IF9yZWYyJGRyb3BUYXJnZXRDbGFzcyxcbiAgICAgICAgX3JlZjIkYXV0b0FyaWFEaXNhYmxlID0gX3JlZjIuYXV0b0FyaWFEaXNhYmxlZCxcbiAgICAgICAgYXV0b0FyaWFEaXNhYmxlZCA9IF9yZWYyJGF1dG9BcmlhRGlzYWJsZSA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmMiRhdXRvQXJpYURpc2FibGU7XG4gICAgY29uZmlnLml0ZW1zID0gX3RvQ29uc3VtYWJsZUFycmF5KGl0ZW1zKTtcbiAgICBjb25maWcuZHJhZ0Rpc2FibGVkID0gZHJhZ0Rpc2FibGVkO1xuICAgIGNvbmZpZy5kcm9wRnJvbU90aGVyc0Rpc2FibGVkID0gZHJvcEZyb21PdGhlcnNEaXNhYmxlZDtcbiAgICBjb25maWcuem9uZVRhYkluZGV4ID0gem9uZVRhYkluZGV4O1xuICAgIGNvbmZpZy5kcm9wVGFyZ2V0U3R5bGUgPSBkcm9wVGFyZ2V0U3R5bGU7XG4gICAgY29uZmlnLmRyb3BUYXJnZXRDbGFzc2VzID0gZHJvcFRhcmdldENsYXNzZXM7XG4gICAgY29uZmlnLmF1dG9BcmlhRGlzYWJsZWQgPSBhdXRvQXJpYURpc2FibGVkO1xuXG4gICAgaWYgKGNvbmZpZy50eXBlICYmIG5ld1R5cGUgIT09IGNvbmZpZy50eXBlKSB7XG4gICAgICB1bnJlZ2lzdGVyRHJvcFpvbmUkMShub2RlLCBjb25maWcudHlwZSk7XG4gICAgfVxuXG4gICAgY29uZmlnLnR5cGUgPSBuZXdUeXBlO1xuICAgIHJlZ2lzdGVyRHJvcFpvbmUkMShub2RlLCBuZXdUeXBlKTtcblxuICAgIGlmICghYXV0b0FyaWFEaXNhYmxlZCkge1xuICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoXCJhcmlhLWRpc2FibGVkXCIsIGRyYWdEaXNhYmxlZCk7XG4gICAgICBub2RlLnNldEF0dHJpYnV0ZShcInJvbGVcIiwgXCJsaXN0XCIpO1xuICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoXCJhcmlhLWRlc2NyaWJlZGJ5XCIsIGRyYWdEaXNhYmxlZCA/IElOU1RSVUNUSU9OX0lEcyQxLkRORF9aT05FX0RSQUdfRElTQUJMRUQgOiBJTlNUUlVDVElPTl9JRHMkMS5ETkRfWk9ORV9BQ1RJVkUpO1xuICAgIH1cblxuICAgIGR6VG9Db25maWckMS5zZXQobm9kZSwgY29uZmlnKTtcblxuICAgIGlmIChpc0RyYWdnaW5nKSB7XG4gICAgICBub2RlLnRhYkluZGV4ID0gbm9kZSA9PT0gZm9jdXNlZER6IHx8IGZvY3VzZWRJdGVtLmNvbnRhaW5zKG5vZGUpIHx8IGNvbmZpZy5kcm9wRnJvbU90aGVyc0Rpc2FibGVkIHx8IGZvY3VzZWREeiAmJiBjb25maWcudHlwZSAhPT0gZHpUb0NvbmZpZyQxLmdldChmb2N1c2VkRHopLnR5cGUgPyAtMSA6IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5vZGUudGFiSW5kZXggPSBjb25maWcuem9uZVRhYkluZGV4O1xuICAgIH1cblxuICAgIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcihcImZvY3VzXCIsIGhhbmRsZVpvbmVGb2N1cyk7XG5cbiAgICB2YXIgX2xvb3AgPSBmdW5jdGlvbiBfbG9vcChpKSB7XG4gICAgICB2YXIgZHJhZ2dhYmxlRWwgPSBub2RlLmNoaWxkcmVuW2ldO1xuICAgICAgYWxsRHJhZ1RhcmdldHMuYWRkKGRyYWdnYWJsZUVsKTtcbiAgICAgIGRyYWdnYWJsZUVsLnRhYkluZGV4ID0gaXNEcmFnZ2luZyA/IC0xIDogMDtcblxuICAgICAgaWYgKCFhdXRvQXJpYURpc2FibGVkKSB7XG4gICAgICAgIGRyYWdnYWJsZUVsLnNldEF0dHJpYnV0ZShcInJvbGVcIiwgXCJsaXN0aXRlbVwiKTtcbiAgICAgIH1cblxuICAgICAgZHJhZ2dhYmxlRWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgZWxUb0tleURvd25MaXN0ZW5lcnMuZ2V0KGRyYWdnYWJsZUVsKSk7XG4gICAgICBkcmFnZ2FibGVFbC5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZWxUb0ZvY3VzTGlzdGVuZXJzLmdldChkcmFnZ2FibGVFbCkpO1xuXG4gICAgICBpZiAoIWRyYWdEaXNhYmxlZCkge1xuICAgICAgICBkcmFnZ2FibGVFbC5hZGRFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBoYW5kbGVLZXlEb3duKTtcbiAgICAgICAgZWxUb0tleURvd25MaXN0ZW5lcnMuc2V0KGRyYWdnYWJsZUVsLCBoYW5kbGVLZXlEb3duKTtcbiAgICAgICAgZHJhZ2dhYmxlRWwuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGhhbmRsZUNsaWNrKTtcbiAgICAgICAgZWxUb0ZvY3VzTGlzdGVuZXJzLnNldChkcmFnZ2FibGVFbCwgaGFuZGxlQ2xpY2spO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXNEcmFnZ2luZyAmJiBjb25maWcuaXRlbXNbaV1bSVRFTV9JRF9LRVldID09PSBmb2N1c2VkSXRlbUlkKSB7XG4gICAgICAgIHByaW50RGVidWcoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBbXCJmb2N1c2luZyBvblwiLCB7XG4gICAgICAgICAgICBpOiBpLFxuICAgICAgICAgICAgZm9jdXNlZEl0ZW1JZDogZm9jdXNlZEl0ZW1JZFxuICAgICAgICAgIH1dO1xuICAgICAgICB9KTsgLy8gaWYgaXQgaXMgYSBuZXN0ZWQgZHJvcHpvbmUsIGl0IHdhcyByZS1yZW5kZXJlZCBhbmQgd2UgbmVlZCB0byByZWZyZXNoIG91ciBwb2ludGVyXG5cbiAgICAgICAgZm9jdXNlZEl0ZW0gPSBkcmFnZ2FibGVFbDtcbiAgICAgICAgZm9jdXNlZEl0ZW0udGFiSW5kZXggPSAwOyAvLyB3aXRob3V0IHRoaXMgdGhlIGVsZW1lbnQgbG9zZXMgZm9jdXMgaWYgaXQgbW92ZXMgYmFja3dhcmRzIGluIHRoZSBsaXN0XG5cbiAgICAgICAgZHJhZ2dhYmxlRWwuZm9jdXMoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBub2RlLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICBfbG9vcChpKTtcbiAgICB9XG4gIH1cblxuICBjb25maWd1cmUob3B0aW9ucyk7XG4gIHZhciBoYW5kbGVzID0ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKG5ld09wdGlvbnMpIHtcbiAgICAgIHByaW50RGVidWcoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gXCJrZXlib2FyZCBkbmR6b25lIHdpbGwgdXBkYXRlIG5ld09wdGlvbnM6IFwiLmNvbmNhdCh0b1N0cmluZyhuZXdPcHRpb25zKSk7XG4gICAgICB9KTtcbiAgICAgIGNvbmZpZ3VyZShuZXdPcHRpb25zKTtcbiAgICB9LFxuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICBwcmludERlYnVnKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIFwia2V5Ym9hcmQgZG5kem9uZSB3aWxsIGRlc3Ryb3lcIjtcbiAgICAgIH0pO1xuICAgICAgdW5yZWdpc3RlckRyb3Bab25lJDEobm9kZSwgY29uZmlnLnR5cGUpO1xuICAgICAgZHpUb0NvbmZpZyQxW1wiZGVsZXRlXCJdKG5vZGUpO1xuICAgICAgZHpUb0hhbmRsZXNbXCJkZWxldGVcIl0obm9kZSk7XG4gICAgfVxuICB9O1xuICBkelRvSGFuZGxlcy5zZXQobm9kZSwgaGFuZGxlcyk7XG4gIHJldHVybiBoYW5kbGVzO1xufVxuXG52YXIgX2V4Y2x1ZGVkID0gW1wiaXRlbXNcIiwgXCJmbGlwRHVyYXRpb25Nc1wiLCBcInR5cGVcIiwgXCJkcmFnRGlzYWJsZWRcIiwgXCJtb3JwaERpc2FibGVkXCIsIFwiZHJvcEZyb21PdGhlcnNEaXNhYmxlZFwiLCBcInpvbmVUYWJJbmRleFwiLCBcImRyb3BUYXJnZXRTdHlsZVwiLCBcImRyb3BUYXJnZXRDbGFzc2VzXCIsIFwidHJhbnNmb3JtRHJhZ2dlZEVsZW1lbnRcIiwgXCJhdXRvQXJpYURpc2FibGVkXCIsIFwiY2VudHJlRHJhZ2dlZE9uQ3Vyc29yXCJdO1xuLyoqXG4gKiBBIGN1c3RvbSBhY3Rpb24gdG8gdHVybiBhbnkgY29udGFpbmVyIHRvIGEgZG5kIHpvbmUgYW5kIGFsbCBvZiBpdHMgZGlyZWN0IGNoaWxkcmVuIHRvIGRyYWdnYWJsZXNcbiAqIFN1cHBvcnRzIG1vdXNlLCB0b3VjaCBhbmQga2V5Ym9hcmQgaW50ZXJhY3Rpb25zLlxuICogRGlzcGF0Y2hlcyB0d28gZXZlbnRzIHRoYXQgdGhlIGNvbnRhaW5lciBpcyBleHBlY3RlZCB0byByZWFjdCB0byBieSBtb2RpZnlpbmcgaXRzIGxpc3Qgb2YgaXRlbXMsXG4gKiB3aGljaCB3aWxsIHRoZW4gZmVlZCBiYWNrIGluIHRvIHRoaXMgYWN0aW9uIHZpYSB0aGUgdXBkYXRlIGZ1bmN0aW9uXG4gKlxuICogQHR5cGVkZWYge29iamVjdH0gT3B0aW9uc1xuICogQHByb3BlcnR5IHthcnJheX0gaXRlbXMgLSB0aGUgbGlzdCBvZiBpdGVtcyB0aGF0IHdhcyB1c2VkIHRvIGdlbmVyYXRlIHRoZSBjaGlsZHJlbiBvZiB0aGUgZ2l2ZW4gbm9kZSAodGhlIGxpc3QgdXNlZCBpbiB0aGUgI2VhY2ggYmxvY2tcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbdHlwZV0gLSB0aGUgdHlwZSBvZiB0aGUgZG5kIHpvbmUuIGNoaWxkcmVuIGRyYWdnZWQgZnJvbSBoZXJlIGNhbiBvbmx5IGJlIGRyb3BwZWQgaW4gb3RoZXIgem9uZXMgb2YgdGhlIHNhbWUgdHlwZSwgZGVmYXVsdCB0byBhIGJhc2UgdHlwZVxuICogQHByb3BlcnR5IHtudW1iZXJ9IFtmbGlwRHVyYXRpb25Nc10gLSBpZiB0aGUgbGlzdCBhbmltYXRlZCB1c2luZyBmbGlwIChyZWNvbW1lbmRlZCksIHNwZWNpZmllcyB0aGUgZmxpcCBkdXJhdGlvbiBzdWNoIHRoYXQgZXZlcnl0aGluZyBzeW5jcyB3aXRoIGl0IHdpdGhvdXQgY29uZmxpY3QsIGRlZmF1bHRzIHRvIHplcm9cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW2RyYWdEaXNhYmxlZF1cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW21vcnBoRGlzYWJsZWRdIC0gd2hldGhlciBkcmFnZ2VkIGVsZW1lbnQgc2hvdWxkIG1vcnBoIHRvIHpvbmUgZGltZW5zaW9uc1xuICogQHByb3BlcnR5IHtib29sZWFufSBbZHJvcEZyb21PdGhlcnNEaXNhYmxlZF1cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBbem9uZVRhYkluZGV4XSAtIHNldCB0aGUgdGFiaW5kZXggb2YgdGhlIGxpc3QgY29udGFpbmVyIHdoZW4gbm90IGRyYWdnaW5nXG4gKiBAcHJvcGVydHkge29iamVjdH0gW2Ryb3BUYXJnZXRTdHlsZV1cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nW119IFtkcm9wVGFyZ2V0Q2xhc3Nlc11cbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IFt0cmFuc2Zvcm1EcmFnZ2VkRWxlbWVudF1cbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IG5vZGUgLSB0aGUgZWxlbWVudCB0byBlbmhhbmNlXG4gKiBAcGFyYW0ge09wdGlvbnN9IG9wdGlvbnNcbiAqIEByZXR1cm4ge3t1cGRhdGU6IGZ1bmN0aW9uLCBkZXN0cm95OiBmdW5jdGlvbn19XG4gKi9cblxuZnVuY3Rpb24gZG5kem9uZSQyKG5vZGUsIG9wdGlvbnMpIHtcbiAgdmFsaWRhdGVPcHRpb25zKG9wdGlvbnMpO1xuICB2YXIgcG9pbnRlclpvbmUgPSBkbmR6b25lKG5vZGUsIG9wdGlvbnMpO1xuICB2YXIga2V5Ym9hcmRab25lID0gZG5kem9uZSQxKG5vZGUsIG9wdGlvbnMpO1xuICByZXR1cm4ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKG5ld09wdGlvbnMpIHtcbiAgICAgIHZhbGlkYXRlT3B0aW9ucyhuZXdPcHRpb25zKTtcbiAgICAgIHBvaW50ZXJab25lLnVwZGF0ZShuZXdPcHRpb25zKTtcbiAgICAgIGtleWJvYXJkWm9uZS51cGRhdGUobmV3T3B0aW9ucyk7XG4gICAgfSxcbiAgICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgcG9pbnRlclpvbmUuZGVzdHJveSgpO1xuICAgICAga2V5Ym9hcmRab25lLmRlc3Ryb3koKTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlT3B0aW9ucyhvcHRpb25zKSB7XG4gIC8qZXNsaW50LWRpc2FibGUqL1xuICB2YXIgaXRlbXMgPSBvcHRpb25zLml0ZW1zLFxuICAgICAgZmxpcER1cmF0aW9uTXMgPSBvcHRpb25zLmZsaXBEdXJhdGlvbk1zLFxuICAgICAgdHlwZSA9IG9wdGlvbnMudHlwZSxcbiAgICAgIGRyYWdEaXNhYmxlZCA9IG9wdGlvbnMuZHJhZ0Rpc2FibGVkLFxuICAgICAgbW9ycGhEaXNhYmxlZCA9IG9wdGlvbnMubW9ycGhEaXNhYmxlZCxcbiAgICAgIGRyb3BGcm9tT3RoZXJzRGlzYWJsZWQgPSBvcHRpb25zLmRyb3BGcm9tT3RoZXJzRGlzYWJsZWQsXG4gICAgICB6b25lVGFiSW5kZXggPSBvcHRpb25zLnpvbmVUYWJJbmRleCxcbiAgICAgIGRyb3BUYXJnZXRTdHlsZSA9IG9wdGlvbnMuZHJvcFRhcmdldFN0eWxlLFxuICAgICAgZHJvcFRhcmdldENsYXNzZXMgPSBvcHRpb25zLmRyb3BUYXJnZXRDbGFzc2VzLFxuICAgICAgdHJhbnNmb3JtRHJhZ2dlZEVsZW1lbnQgPSBvcHRpb25zLnRyYW5zZm9ybURyYWdnZWRFbGVtZW50LFxuICAgICAgYXV0b0FyaWFEaXNhYmxlZCA9IG9wdGlvbnMuYXV0b0FyaWFEaXNhYmxlZCxcbiAgICAgIGNlbnRyZURyYWdnZWRPbkN1cnNvciA9IG9wdGlvbnMuY2VudHJlRHJhZ2dlZE9uQ3Vyc29yLFxuICAgICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvcHRpb25zLCBfZXhjbHVkZWQpO1xuICAvKmVzbGludC1lbmFibGUqL1xuXG5cbiAgaWYgKE9iamVjdC5rZXlzKHJlc3QpLmxlbmd0aCA+IDApIHtcbiAgICBjb25zb2xlLndhcm4oXCJkbmR6b25lIHdpbGwgaWdub3JlIHVua25vd24gb3B0aW9uc1wiLCByZXN0KTtcbiAgfVxuXG4gIGlmICghaXRlbXMpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJubyAnaXRlbXMnIGtleSBwcm92aWRlZCB0byBkbmR6b25lXCIpO1xuICB9XG5cbiAgdmFyIGl0ZW1XaXRoTWlzc2luZ0lkID0gaXRlbXMuZmluZChmdW5jdGlvbiAoaXRlbSkge1xuICAgIHJldHVybiAhe30uaGFzT3duUHJvcGVydHkuY2FsbChpdGVtLCBJVEVNX0lEX0tFWSk7XG4gIH0pO1xuXG4gIGlmIChpdGVtV2l0aE1pc3NpbmdJZCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIm1pc3NpbmcgJ1wiLmNvbmNhdChJVEVNX0lEX0tFWSwgXCInIHByb3BlcnR5IGZvciBpdGVtIFwiKS5jb25jYXQodG9TdHJpbmcoaXRlbVdpdGhNaXNzaW5nSWQpKSk7XG4gIH1cblxuICBpZiAoZHJvcFRhcmdldENsYXNzZXMgJiYgIUFycmF5LmlzQXJyYXkoZHJvcFRhcmdldENsYXNzZXMpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiZHJvcFRhcmdldENsYXNzZXMgc2hvdWxkIGJlIGFuIGFycmF5IGJ1dCBpbnN0ZWFkIGl0IGlzIGEgXCIuY29uY2F0KF90eXBlb2YoZHJvcFRhcmdldENsYXNzZXMpLCBcIiwgXCIpLmNvbmNhdCh0b1N0cmluZyhkcm9wVGFyZ2V0Q2xhc3NlcykpKTtcbiAgfVxuXG4gIGlmICh6b25lVGFiSW5kZXggJiYgIWlzSW50KHpvbmVUYWJJbmRleCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJ6b25lVGFiSW5kZXggc2hvdWxkIGJlIGEgbnVtYmVyIGJ1dCBpbnN0ZWFkIGl0IGlzIGEgXCIuY29uY2F0KF90eXBlb2Yoem9uZVRhYkluZGV4KSwgXCIsIFwiKS5jb25jYXQodG9TdHJpbmcoem9uZVRhYkluZGV4KSkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGlzSW50KHZhbHVlKSB7XG4gIHJldHVybiAhaXNOYU4odmFsdWUpICYmIGZ1bmN0aW9uICh4KSB7XG4gICAgcmV0dXJuICh4IHwgMCkgPT09IHg7XG4gIH0ocGFyc2VGbG9hdCh2YWx1ZSkpO1xufVxuXG5leHBvcnQgeyBEUkFHR0VEX0VMRU1FTlRfSUQsIFNIQURPV19JVEVNX01BUktFUl9QUk9QRVJUWV9OQU1FLCBTSEFET1dfUExBQ0VIT0xERVJfSVRFTV9JRCwgU09VUkNFUywgVFJJR0dFUlMsIGFsZXJ0VG9TY3JlZW5SZWFkZXIsIGRuZHpvbmUkMiBhcyBkbmR6b25lLCBvdmVycmlkZUl0ZW1JZEtleU5hbWVCZWZvcmVJbml0aWFsaXNpbmdEbmRab25lcywgc2V0RGVidWdNb2RlIH07XG4iLCAiPHNjcmlwdCBsYW5nPVwidHNcIj5cbiAgICBpbXBvcnQgeyBzZXRJY29uIH0gZnJvbSBcIm9ic2lkaWFuXCI7XG5cbiAgICBpbXBvcnQgdHlwZSB7IFN0YXRibG9ja0l0ZW0gfSBmcm9tIFwic3JjL2xheW91dHMvdHlwZXNcIjtcblxuICAgIGV4cG9ydCBsZXQgYmxvY2s6IFN0YXRibG9ja0l0ZW07XG5cbiAgICBjb25zdCB0cmFuc2Zvcm0gPSAodGV4dDogc3RyaW5nKSA9PiB7XG4gICAgICAgIGlmIChcImRpc3BsYXlcIiBpbiBibG9jaykge1xuICAgICAgICAgICAgcmV0dXJuIGAke2Jsb2NrLmRpc3BsYXl9ICgke1xuICAgICAgICAgICAgICAgIHRleHRbMF0udG9VcHBlckNhc2UoKSArIHRleHQuc2xpY2UoMSkudG9Mb3dlckNhc2UoKVxuICAgICAgICAgICAgfSlgO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0ZXh0WzBdLnRvVXBwZXJDYXNlKCkgKyB0ZXh0LnNsaWNlKDEpLnRvTG93ZXJDYXNlKCk7XG4gICAgfTtcblxuICAgIGNvbnN0IGNvbmRpdGlvbmVkID0gKG5vZGU6IEhUTUxEaXZFbGVtZW50KSA9PiB7XG4gICAgICAgIHNldEljb24obm9kZSwgXCJzdGF0YmxvY2stY29uZGl0aW9uZWRcIik7XG4gICAgfTtcbiAgICBjb25zdCBkaWNlID0gKG5vZGU6IEhUTUxEaXZFbGVtZW50KSA9PiB7XG4gICAgICAgIHNldEljb24obm9kZSwgXCJkaWNlLXJvbGxlci1kaWNlXCIpO1xuICAgIH07XG4gICAgY29uc3QgaGVhZGluZyA9IChub2RlOiBIVE1MRGl2RWxlbWVudCkgPT4ge1xuICAgICAgICBzZXRJY29uKG5vZGUsIFwiaGVhZGluZy1nbHlwaFwiKTtcbiAgICB9O1xuICAgIGNvbnN0IGNvZGUgPSAobm9kZTogSFRNTERpdkVsZW1lbnQpID0+IHtcbiAgICAgICAgc2V0SWNvbihub2RlLCBcImNvZGUtZ2x5cGhcIik7XG4gICAgfTtcbjwvc2NyaXB0PlxuXG48ZGl2IGNsYXNzPVwicHJvcGVydHktYmxvY2stY29udGFpbmVyXCI+XG4gICAgPGRpdiBjbGFzcz1cImluZm9cIj5cbiAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIDxzcGFuPnt0cmFuc2Zvcm0oYmxvY2sudHlwZSl9PC9zcGFuPlxuICAgICAgICAgICAgeyNpZiBibG9jay50eXBlID09IFwidGFibGVcIiAmJiBibG9jay5oZWFkZXJzPy5sZW5ndGh9XG4gICAgICAgICAgICAgICAgPHN0cm9uZz5cbiAgICAgICAgICAgICAgICAgICAgKHtibG9jay5oZWFkZXJzLmpvaW4oXCIgfCBcIil9KVxuICAgICAgICAgICAgICAgIDwvc3Ryb25nPlxuICAgICAgICAgICAgey9pZn1cbiAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgPHNtYWxsPjxlbT57YmxvY2sucHJvcGVydGllcy5qb2luKFwiLCBcIil9PC9lbT48L3NtYWxsPlxuICAgIDwvZGl2PlxuICAgIDxzbWFsbCBjbGFzcz1cImNvbnRleHRcIj5cbiAgICAgICAgeyNpZiBcImhlYWRpbmdcIiBpbiBibG9ja31cbiAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICBjbGFzcz1cImNvbnRleHQtaXRlbSBoZWFkaW5nXCJcbiAgICAgICAgICAgICAgICB1c2U6aGVhZGluZ1xuICAgICAgICAgICAgICAgIGFyaWEtbGFiZWw9XCJIYXMgSGVhZGluZ1wiXG4gICAgICAgICAgICAvPlxuICAgICAgICB7L2lmfVxuICAgICAgICB7I2lmIGJsb2NrLmNvbmRpdGlvbmVkfVxuICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgIGNsYXNzPVwiY29udGV4dC1pdGVtIGNvbmRpdGlvbmVkXCJcbiAgICAgICAgICAgICAgICB1c2U6Y29uZGl0aW9uZWRcbiAgICAgICAgICAgICAgICBhcmlhLWxhYmVsPVwiQ29uZGl0aW9uZWRcIlxuICAgICAgICAgICAgLz5cbiAgICAgICAgey9pZn1cbiAgICAgICAgeyNpZiBcImNhbGxiYWNrXCIgaW4gYmxvY2t9XG4gICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgY2xhc3M9XCJjb250ZXh0LWl0ZW0gY2FsbGJhY2tcIlxuICAgICAgICAgICAgICAgIHVzZTpjb2RlXG4gICAgICAgICAgICAgICAgYXJpYS1sYWJlbD1cIkhhcyBDYWxsYmFja1wiXG4gICAgICAgICAgICAvPlxuICAgICAgICB7L2lmfVxuICAgICAgICB7I2lmIFwiZGljZVwiIGluIGJsb2NrfVxuICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgIGNsYXNzPVwiY29udGV4dC1pdGVtIGRpY2VcIlxuICAgICAgICAgICAgICAgIHVzZTpkaWNlXG4gICAgICAgICAgICAgICAgYXJpYS1sYWJlbD1cIldpbGwgUGFyc2UgZm9yIERpY2UgUm9sbHNcIlxuICAgICAgICAgICAgLz5cbiAgICAgICAgey9pZn1cbiAgICA8L3NtYWxsPlxuPC9kaXY+XG5cbjxzdHlsZT5cbiAgICAucHJvcGVydHktYmxvY2stY29udGFpbmVyIHtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIH1cbiAgICAuaW5mbyB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGZsZXgtZmxvdzogY29sdW1uO1xuICAgIH1cbiAgICAuY29udGV4dCB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgIGdhcDogMC4yNXJlbTtcbiAgICAgICAgY29sb3I6IHZhcigtLXRleHQtbXV0ZWQpO1xuICAgIH1cbiAgICAuY29udGV4dC1pdGVtIHtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICB9XG48L3N0eWxlPlxuIiwgIjxzY3JpcHQgbGFuZz1cInRzXCI+XG4gICAgaW1wb3J0IFByb3BlcnR5QmxvY2sgZnJvbSBcIi4vUHJvcGVydHlCbG9jay5zdmVsdGVcIjtcbiAgICBpbXBvcnQgdHlwZSBTdGF0QmxvY2tQbHVnaW4gZnJvbSBcInNyYy9tYWluXCI7XG4gICAgaW1wb3J0IHsgRXh0cmFCdXR0b25Db21wb25lbnQgfSBmcm9tIFwib2JzaWRpYW5cIjtcbiAgICBpbXBvcnQgeyBjcmVhdGVFdmVudERpc3BhdGNoZXIgfSBmcm9tIFwic3ZlbHRlXCI7XG4gICAgaW1wb3J0IHsgQmxvY2tNb2RhbCB9IGZyb20gXCIuL2Jsb2NrXCI7XG4gICAgaW1wb3J0IHR5cGUgeyBTdGF0YmxvY2tJdGVtIH0gZnJvbSBcInNyYy9sYXlvdXRzL3R5cGVzXCI7XG5cbiAgICBleHBvcnQgbGV0IGJsb2NrOiBTdGF0YmxvY2tJdGVtO1xuICAgIGV4cG9ydCBsZXQgcGx1Z2luOiBTdGF0QmxvY2tQbHVnaW47XG5cbiAgICBjb25zdCBkaXNwYXRjaCA9IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlcigpO1xuXG4gICAgY29uc3QgZWRpdEJsb2NrID0gKCkgPT4ge1xuICAgICAgICBjb25zdCBtb2RhbCA9IG5ldyBCbG9ja01vZGFsKHBsdWdpbiwgYmxvY2spO1xuXG4gICAgICAgIG1vZGFsLm9uQ2xvc2UgPSAoKSA9PiB7XG4gICAgICAgICAgICBpZiAoIW1vZGFsLnNhdmVkKSByZXR1cm47XG4gICAgICAgICAgICBkaXNwYXRjaChcImVkaXRlZFwiLCBtb2RhbC5ibG9jayk7XG4gICAgICAgIH07XG4gICAgICAgIG1vZGFsLm9wZW4oKTtcbiAgICB9O1xuXG4gICAgY29uc3QgZWRpdCA9IChub2RlOiBIVE1MRGl2RWxlbWVudCkgPT4ge1xuICAgICAgICBuZXcgRXh0cmFCdXR0b25Db21wb25lbnQobm9kZSlcbiAgICAgICAgICAgIC5zZXRJY29uKFwicGVuY2lsXCIpXG4gICAgICAgICAgICAuc2V0VG9vbHRpcChcIkVkaXQgQmxvY2tcIilcbiAgICAgICAgICAgIC5vbkNsaWNrKCgpID0+IHtcbiAgICAgICAgICAgICAgICBlZGl0QmxvY2soKTtcbiAgICAgICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBjb25zdCB0cmFzaCA9IChub2RlOiBIVE1MRGl2RWxlbWVudCkgPT4ge1xuICAgICAgICBuZXcgRXh0cmFCdXR0b25Db21wb25lbnQobm9kZSlcbiAgICAgICAgICAgIC5zZXRJY29uKFwidHJhc2hcIilcbiAgICAgICAgICAgIC5zZXRUb29sdGlwKFwiRGVsZXRlIEJsb2NrXCIpXG4gICAgICAgICAgICAub25DbGljaygoKSA9PiBkaXNwYXRjaChcInRyYXNoXCIsIGJsb2NrKSk7XG4gICAgfTtcbjwvc2NyaXB0PlxuXG48ZGl2IGNsYXNzPVwic3RhdGJsb2NrLWNyZWF0b3ItY29udGFpbmVyXCI+XG4gICAgeyNrZXkgYmxvY2t9XG4gICAgICAgIDxkaXYgY2xhc3M9XCJzdGF0YmxvY2stY3JlYXRvci1ibG9ja1wiPlxuICAgICAgICAgICAgPFByb3BlcnR5QmxvY2sge2Jsb2NrfSAvPlxuICAgICAgICA8L2Rpdj5cbiAgICB7L2tleX1cbiAgICA8ZGl2IGNsYXNzPVwiaWNvbnNcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImljb25cIiB1c2U6ZWRpdCAvPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiaWNvblwiIHVzZTp0cmFzaCAvPlxuICAgIDwvZGl2PlxuPC9kaXY+XG5cbjxzdHlsZT5cbiAgICAuc3RhdGJsb2NrLWNyZWF0b3ItY29udGFpbmVyIHtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgICAgICAvKiBhbGlnbi1pdGVtczogY2VudGVyOyAqL1xuICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgIH1cblxuICAgIDpnbG9iYWwoYm9keTpub3QoLmlzLW1vYmlsZSkpXG4gICAgICAgIC5zdGF0YmxvY2stY3JlYXRvci1jb250YWluZXI6bm90KDpob3ZlcilcbiAgICAgICAgPiAuaWNvbnMge1xuICAgICAgICB2aXNpYmlsaXR5OiBoaWRkZW47XG4gICAgfVxuICAgIC5zdGF0YmxvY2stY3JlYXRvci1ibG9jayB7XG4gICAgICAgIHdpZHRoOiAxMDAlO1xuICAgIH1cbiAgICAuaWNvbnMge1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kO1xuICAgIH1cbiAgICAuc3RhdGJsb2NrLWNyZWF0b3ItY29udGFpbmVyIC5pY29ucyB7XG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgfVxuICAgIC5pY29uOm5vdCg6Zmlyc3QtY2hpbGQpIDpnbG9iYWwoLmNsaWNrYWJsZS1pY29uKSB7XG4gICAgICAgIG1hcmdpbi1sZWZ0OiAwO1xuICAgIH1cbjwvc3R5bGU+XG4iLCAiaW1wb3J0IHR5cGUgeyBNb25zdGVyIH0gZnJvbSBcIkB0eXBlc1wiO1xuaW1wb3J0IGNvcHkgZnJvbSBcImZhc3QtY29weVwiO1xuaW1wb3J0IHsgTW9kYWwsIE5vdGljZSwgU2V0dGluZywgVGV4dEFyZWFDb21wb25lbnQgfSBmcm9tIFwib2JzaWRpYW5cIjtcbmltcG9ydCB7XG4gICAgdHlwZSBTdGF0YmxvY2tJdGVtLFxuICAgIHR5cGUgUHJvcGVydHlJdGVtLFxuICAgIHR5cGUgVHJhaXRzSXRlbSxcbiAgICB0eXBlIFRhYmxlSXRlbSxcbiAgICBNYXJrZG93blR5cGVzLFxuICAgIHR5cGUgVGV4dEl0ZW0sXG4gICAgdHlwZSBTdWJIZWFkaW5nSXRlbVxufSBmcm9tIFwic3JjL2xheW91dHMvdHlwZXNcIjtcbmltcG9ydCB0eXBlIFN0YXRCbG9ja1BsdWdpbiBmcm9tIFwic3JjL21haW5cIjtcbmltcG9ydCBUYWJsZUhlYWRlcnMgZnJvbSBcIi4vVGFibGVIZWFkZXJzLnN2ZWx0ZVwiO1xuXG5leHBvcnQgY2xhc3MgQmxvY2tNb2RhbCBleHRlbmRzIE1vZGFsIHtcbiAgICBibG9jazogU3RhdGJsb2NrSXRlbTtcbiAgICBzYXZlZDogYm9vbGVhbjtcbiAgICBhZHZhbmNlZDogYm9vbGVhbjtcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgcGx1Z2luOiBTdGF0QmxvY2tQbHVnaW4sIGJsb2NrPzogU3RhdGJsb2NrSXRlbSkge1xuICAgICAgICBzdXBlcihwbHVnaW4uYXBwKTtcbiAgICAgICAgdGhpcy5hZHZhbmNlZCA9IHRoaXMucGx1Z2luLnNldHRpbmdzLnNob3dBZHZhbmNlZDtcbiAgICAgICAgaWYgKGJsb2NrKSB0aGlzLmJsb2NrID0gY29weShibG9jayk7XG4gICAgICAgIHRoaXMuY29udGFpbmVyRWwuYWRkQ2xhc3MoXCJzdGF0YmxvY2stZWRpdC1ibG9ja1wiKTtcbiAgICB9XG4gICAgZ2V0IGdyb3VwKCkge1xuICAgICAgICByZXR1cm4gW1wiZ3JvdXBcIiwgXCJpbmxpbmVcIl0uY29udGFpbnModGhpcy5ibG9jay50eXBlKTtcbiAgICB9XG4gICAgb25PcGVuKCkge1xuICAgICAgICB0aGlzLnRpdGxlRWwuc2V0VGV4dChcIkVkaXQgQmxvY2tcIik7XG4gICAgICAgIHRoaXMuZGlzcGxheSgpO1xuICAgIH1cbiAgICBidWlsZFByb3BlcnRpZXMoZWw6IEhUTUxEaXZFbGVtZW50KSB7XG4gICAgICAgIGVsLmVtcHR5KCk7XG4gICAgICAgIGlmICghdGhpcy5ncm91cCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuYmxvY2sudHlwZSA9PSBcInN1YmhlYWRpbmdcIikge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IGVsLmNyZWF0ZURpdihcbiAgICAgICAgICAgICAgICAgICAgXCJzdGF0YmxvY2stYWRkaXRpb25hbC1jb250YWluZXJcIlxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgbGV0IHRlbXBQcm9wID0gXCJcIjtcbiAgICAgICAgICAgICAgICBuZXcgU2V0dGluZyhjb250YWluZXIpXG4gICAgICAgICAgICAgICAgICAgIC5zZXRIZWFkaW5nKClcbiAgICAgICAgICAgICAgICAgICAgLnNldE5hbWUoXCJMaW5rIE1vbnN0ZXIgUHJvcGVydGllc1wiKVxuICAgICAgICAgICAgICAgICAgICAuYWRkVGV4dCgodCkgPT5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc2V0UGxhY2Vob2xkZXIoXCJwcm9wZXJ0eVwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0ZW1wUHJvcClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAub25DaGFuZ2UoKHYpID0+ICh0ZW1wUHJvcCA9IHYpKVxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgIC5hZGRFeHRyYUJ1dHRvbigoYikgPT5cbiAgICAgICAgICAgICAgICAgICAgICAgIGIuc2V0SWNvbihcInBsdXMtd2l0aC1jaXJjbGVcIikub25DbGljaygoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0ZW1wUHJvcCB8fCAhdGVtcFByb3AubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIkEgdmFsaWQgcHJvcGVydHkgbXVzdCBiZSBzdXBwbGllZC5cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYmxvY2sucHJvcGVydGllcy5wdXNoKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wUHJvcCBhcyBrZXlvZiBNb25zdGVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJ1aWxkUHJvcGVydGllcyhlbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgYWRkaXRpb25hbCA9IGNvbnRhaW5lci5jcmVhdGVEaXYoXCJhZGRpdGlvbmFsXCIpO1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgcHJvcGVydHkgb2YgdGhpcy5ibG9jay5wcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICAgICAgICAgIG5ldyBTZXR0aW5nKGFkZGl0aW9uYWwpXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2V0TmFtZShwcm9wZXJ0eSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRFeHRyYUJ1dHRvbigoYikgPT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiLnNldEljb24oXCJ0cmFzaFwiKS5vbkNsaWNrKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ibG9jay5wcm9wZXJ0aWVzID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYmxvY2sucHJvcGVydGllcy5maWx0ZXIoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHApID0+IHAgIT0gcHJvcGVydHlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYnVpbGRQcm9wZXJ0aWVzKGVsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG5ldyBTZXR0aW5nKGVsKS5zZXROYW1lKFwiTGluayBNb25zdGVyIFByb3BlcnR5XCIpLmFkZFRleHQoKHQpID0+XG4gICAgICAgICAgICAgICAgICAgIHQuc2V0VmFsdWUodGhpcy5ibG9jay5wcm9wZXJ0aWVzWzBdKS5vbkNoYW5nZSgodikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ibG9jay5wcm9wZXJ0aWVzWzBdID0gdiBhcyBrZXlvZiBNb25zdGVyO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5ibG9jay50eXBlID09IFwicHJvcGVydHlcIiB8fCB0aGlzLmJsb2NrLnR5cGUgPT0gXCJzYXZlc1wiKSB7XG4gICAgICAgICAgICAgICAgbmV3IFNldHRpbmcodGhpcy5jb250ZW50RWwpXG4gICAgICAgICAgICAgICAgICAgIC5zZXROYW1lKFwiRGlzcGxheSBUZXh0XCIpXG4gICAgICAgICAgICAgICAgICAgIC5zZXREZXNjKFwiVGhpcyB0ZXh0IHdpbGwgYmUgdXNlZCBmb3IgdGhlIHByb3BlcnR5IG5hbWUuXCIpXG4gICAgICAgICAgICAgICAgICAgIC5hZGRUZXh0KCh0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0LnNldFZhbHVlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzLmJsb2NrIGFzIFByb3BlcnR5SXRlbSkuZGlzcGxheVxuICAgICAgICAgICAgICAgICAgICAgICAgKS5vbkNoYW5nZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAodikgPT4gKCh0aGlzLmJsb2NrIGFzIFByb3BlcnR5SXRlbSkuZGlzcGxheSA9IHYpXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLmJsb2NrLnR5cGUgPT0gXCJ0cmFpdHNcIiB8fCB0aGlzLmJsb2NrLnR5cGUgPT0gXCJ0ZXh0XCIpIHtcbiAgICAgICAgICAgICAgICBuZXcgU2V0dGluZyh0aGlzLmNvbnRlbnRFbClcbiAgICAgICAgICAgICAgICAgICAgLnNldE5hbWUoXCJVc2UgTW9uc3RlciBQcm9wZXJ0eSBmb3IgSGVhZGluZ1wiKVxuICAgICAgICAgICAgICAgICAgICAuc2V0RGVzYyhcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiVGhlIFNlY3Rpb24gaGVhZGluZyB3aWxsIGJlIHNldCB0byB0aGUgdmFsdWUgb2YgdGhlIHNwZWNpZmllZCBwcm9wZXJ0eS5cIlxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgIC5hZGRUb2dnbGUoKHQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHQuc2V0VmFsdWUoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMuYmxvY2sgYXMgVHJhaXRzSXRlbSkuaGVhZGluZ1Byb3BcbiAgICAgICAgICAgICAgICAgICAgICAgICkub25DaGFuZ2UoKHYpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAodGhpcy5ibG9jayBhcyBUcmFpdHNJdGVtKS5oZWFkaW5nUHJvcCA9IHY7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXNwbGF5KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgbmV3IFNldHRpbmcodGhpcy5jb250ZW50RWwpXG4gICAgICAgICAgICAgICAgICAgIC5zZXROYW1lKFwiU2VjdGlvbiBIZWFkaW5nXCIpXG4gICAgICAgICAgICAgICAgICAgIC5zZXREZXNjKFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ibG9jay5oZWFkaW5nUHJvcFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gXCJUaGUgc2VjdGlvbiB3aWxsIHVzZSB0aGlzIHByb3BlcnR5IGZvciB0aGUgc2VjdGlvbiBoZWFkaW5nLiBJZiB0aGUgcHJvcGVydHkgZG9lcyBub3QgZXhpc3Qgb3IgaXMgYmxhbmssIHRoZSBzZWN0aW9uIGhlYWRpbmcgd2lsbCBub3QgYXBwZWFyLlwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBcIlRoaXMgdGV4dCB3aWxsIGJlIHVzZWQgZm9yIHRoZSBzZWN0aW9uIGhlYWRpbmcuIENhbiBiZSBsZWZ0IGJsYW5rLlwiXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgLmFkZFRleHQoKHQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHQuc2V0VmFsdWUoKHRoaXMuYmxvY2sgYXMgVHJhaXRzSXRlbSkuaGVhZGluZykub25DaGFuZ2UoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKHYpID0+ICgodGhpcy5ibG9jayBhcyBUcmFpdHNJdGVtKS5oZWFkaW5nID0gdilcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuYmxvY2sudHlwZSA9PSBcInRhYmxlXCIpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjb250YWluZXIgPSBlbC5jcmVhdGVEaXYoXG4gICAgICAgICAgICAgICAgICAgIFwic3RhdGJsb2NrLWFkZGl0aW9uYWwtY29udGFpbmVyXCJcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGxldCB0ZW1wUHJvcCA9IFwiXCI7XG4gICAgICAgICAgICAgICAgbmV3IFNldHRpbmcoY29udGFpbmVyKVxuICAgICAgICAgICAgICAgICAgICAuc2V0SGVhZGluZygpXG4gICAgICAgICAgICAgICAgICAgIC5zZXROYW1lKFwiVGFibGUgSGVhZGVyc1wiKVxuICAgICAgICAgICAgICAgICAgICAuYWRkVGV4dCgodCkgPT5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc2V0UGxhY2Vob2xkZXIoXCJoZWFkZXJcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc2V0VmFsdWUodGVtcFByb3ApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLm9uQ2hhbmdlKCh2KSA9PiAodGVtcFByb3AgPSB2KSlcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAuYWRkRXh0cmFCdXR0b24oKGIpID0+XG4gICAgICAgICAgICAgICAgICAgICAgICBiLnNldEljb24oXCJwbHVzLXdpdGgtY2lyY2xlXCIpLm9uQ2xpY2soKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGVtcFByb3AgfHwgIXRlbXBQcm9wLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgTm90aWNlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJBIHZhbGlkIHByb3BlcnR5IG11c3QgYmUgc3VwcGxpZWQuXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAodGhpcy5ibG9jayBhcyBUYWJsZUl0ZW0pLmhlYWRlcnMucHVzaChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcFByb3AgYXMga2V5b2YgTW9uc3RlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5idWlsZFByb3BlcnRpZXMoZWwpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBjb25zdCBhZGRpdGlvbmFsID0gY29udGFpbmVyLmNyZWF0ZURpdihcImFkZGl0aW9uYWxcIik7XG4gICAgICAgICAgICAgICAgbmV3IFRhYmxlSGVhZGVycyh7XG4gICAgICAgICAgICAgICAgICAgIHRhcmdldDogYWRkaXRpb25hbCxcbiAgICAgICAgICAgICAgICAgICAgcHJvcHM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHRoaXMuYmxvY2suaGVhZGVyc1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSkuJG9uKFwic29ydGVkXCIsIChlOiBDdXN0b21FdmVudDx7IG5hbWU6IHN0cmluZyB9W10+KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICh0aGlzLmJsb2NrIGFzIFRhYmxlSXRlbSkuaGVhZGVycyA9IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLihlLmRldGFpbD8ubWFwKCh2KSA9PiB2Lm5hbWUpID8/IFtdKVxuICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIG5ldyBTZXR0aW5nKGVsKVxuICAgICAgICAgICAgICAgICAgICAuc2V0TmFtZShcIkNhbGN1bGF0ZSBNb2RpZmllcnNcIilcbiAgICAgICAgICAgICAgICAgICAgLnNldERlc2MoXG4gICAgICAgICAgICAgICAgICAgICAgICBcIlRoZSBibG9jayB3aWxsIG5vdCBhdHRlbXB0IHRvIGNhbGN1bGF0ZSBtb2RpZmllcnMgZm9yIHRhYmxlIHZhbHVlcy5cIlxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgIC5hZGRUb2dnbGUoKHQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHQuc2V0VmFsdWUoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMuYmxvY2sgYXMgVGFibGVJdGVtKS5jYWxjdWxhdGVcbiAgICAgICAgICAgICAgICAgICAgICAgICkub25DaGFuZ2UoKHYpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAodGhpcy5ibG9jayBhcyBUYWJsZUl0ZW0pLmNhbGN1bGF0ZSA9IHY7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXRoaXMuYWR2YW5jZWQpIHJldHVybjtcbiAgICAgICAgICAgIGlmIChNYXJrZG93blR5cGVzLmluY2x1ZGVzKHRoaXMuYmxvY2sudHlwZSBhcyBhbnkpKSB7XG4gICAgICAgICAgICAgICAgbmV3IFNldHRpbmcoZWwpXG4gICAgICAgICAgICAgICAgICAgIC5zZXROYW1lKFwiUmVuZGVyIGFzIE1hcmtkb3duXCIpXG4gICAgICAgICAgICAgICAgICAgIC5zZXREZXNjKFxuICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlRnJhZ21lbnQoKGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLmNyZWF0ZVNwYW4oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBcIlRoZSBibG9jayB3aWxsIGF0dGVtcHQgdG8gcmVuZGVyIGFzIG1hcmtkb3duLlwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5jcmVhdGVFbChcImJyXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUuY3JlYXRlRWwoXCJzdHJvbmdcIiwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBcIkNhbm5vdCBiZSB1c2VkIHdpdGggdGhlIERpY2Ugb3B0aW9uLlwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgIC5hZGRUb2dnbGUoKHQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHQuc2V0VmFsdWUoKHRoaXMuYmxvY2sgYXMgVGV4dEl0ZW0pLm1hcmtkb3duKS5vbkNoYW5nZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAodikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAodGhpcy5ibG9jayBhcyBUZXh0SXRlbSkubWFya2Rvd24gPSB2O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ibG9jay5kaWNlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRpc3BsYXkoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuYmxvY2sudHlwZSA9PSBcInRleHRcIikge1xuICAgICAgICAgICAgICAgIG5ldyBTZXR0aW5nKGVsKVxuICAgICAgICAgICAgICAgICAgICAuc2V0SGVhZGluZygpXG4gICAgICAgICAgICAgICAgICAgIC5zZXROYW1lKFwiVGV4dCB0byBTaG93XCIpXG4gICAgICAgICAgICAgICAgICAgIC5zZXREZXNjKFxuICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlRnJhZ21lbnQoKGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLmNyZWF0ZVNwYW4oeyB0ZXh0OiBcIlRoZSBibG9jayB3aWxsIFwiIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUuY3JlYXRlRWwoXCJzdHJvbmdcIiwgeyB0ZXh0OiBcImFsd2F5c1wiIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUuY3JlYXRlU3Bhbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IFwiIGRpc3BsYXkgdGhlIHRleHQgZW50ZXJlZCBoZXJlLlwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIG5ldyBUZXh0QXJlYUNvbXBvbmVudChlbClcbiAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMuYmxvY2sudGV4dClcbiAgICAgICAgICAgICAgICAgICAgLm9uQ2hhbmdlKCh2KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAodGhpcy5ibG9jayBhcyBUZXh0SXRlbSkudGV4dCA9IHY7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuYmxvY2sudHlwZSA9PSBcInByb3BlcnR5XCIpIHtcbiAgICAgICAgICAgICAgICBuZXcgU2V0dGluZyhlbClcbiAgICAgICAgICAgICAgICAgICAgLnNldEhlYWRpbmcoKVxuICAgICAgICAgICAgICAgICAgICAuc2V0TmFtZShcIkNhbGxiYWNrXCIpXG4gICAgICAgICAgICAgICAgICAgIC5zZXREZXNjKFxuICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlRnJhZ21lbnQoKGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLmNyZWF0ZVNwYW4oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBcIlRoZSBibG9jayB3aWxsIHJ1biB0aGUgY2FsbGJhY2sgYW5kIHVzZSB0aGUgcmV0dXJuZWQgc3RyaW5nIGFzIHRoZSBwcm9wZXJ0eS5cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUuY3JlYXRlRWwoXCJiclwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLmNyZWF0ZVNwYW4oe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBcIlRoZSBjYWxsYmFjayB3aWxsIHJlY2VpdmUgdGhlIFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5jcmVhdGVFbChcImNvZGVcIiwgeyB0ZXh0OiBcIm1vbnN0ZXJcIiB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLmNyZWF0ZVNwYW4oeyB0ZXh0OiBcIiBwYXJhbWV0ZXIuXCIgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIG5ldyBUZXh0QXJlYUNvbXBvbmVudChlbClcbiAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMuYmxvY2suY2FsbGJhY2spXG4gICAgICAgICAgICAgICAgICAgIC5vbkNoYW5nZSgodikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMuYmxvY2sgYXMgUHJvcGVydHlJdGVtKS5jYWxsYmFjayA9IHY7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuYmxvY2sudHlwZSA9PSBcInRhYmxlXCIpIHtcbiAgICAgICAgICAgICAgICBuZXcgU2V0dGluZyhlbClcbiAgICAgICAgICAgICAgICAgICAgLnNldEhlYWRpbmcoKVxuICAgICAgICAgICAgICAgICAgICAuc2V0TmFtZShcIkFiaWxpdHkgTW9kaWZpZXIgQ2FsY3VsYXRpb25cIilcbiAgICAgICAgICAgICAgICAgICAgLnNldERlc2MoXG4gICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVGcmFnbWVudCgoZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUuY3JlYXRlU3Bhbih7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IFwiQWxsb3dzIGEgY3VzdG9tIG1vZGlmaWVyIGZvciB0aGUgc3RhdC5cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUuY3JlYXRlRWwoXCJiclwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLmNyZWF0ZVNwYW4oeyB0ZXh0OiBcIlZhcmlhYmxlIFwiIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUuY3JlYXRlRWwoXCJjb2RlXCIsIHsgdGV4dDogXCJzdGF0XCIgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5jcmVhdGVTcGFuKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogXCJpcyBhY2Nlc3NpYmxlLCB1c2UgdGhpcyB0byBjYWxjdWxhdGUgdGhlIG1vZGlmaWVyLlwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIG5ldyBUZXh0QXJlYUNvbXBvbmVudChlbClcbiAgICAgICAgICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMuYmxvY2subW9kaWZpZXIpXG4gICAgICAgICAgICAgICAgICAgIC5vbkNoYW5nZSgodikgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMuYmxvY2sgYXMgVGFibGVJdGVtKS5tb2RpZmllciA9IHY7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGJ1aWxkU2VwYXJhdG9yKGVsOiBIVE1MRGl2RWxlbWVudCkge1xuICAgICAgICBlbC5lbXB0eSgpO1xuXG4gICAgICAgIGlmICh0aGlzLmJsb2NrLnR5cGUgPT0gXCJzdWJoZWFkaW5nXCIpIHtcbiAgICAgICAgICAgIG5ldyBTZXR0aW5nKGVsKVxuICAgICAgICAgICAgICAgIC5zZXROYW1lKFwiU2VwYXJhdG9yXCIpXG4gICAgICAgICAgICAgICAgLnNldERlc2MoXCJUZXh0IHNlcGFyYXRpbmcgcHJvcGVydGllc1wiKVxuICAgICAgICAgICAgICAgIC5hZGRUZXh0KCh0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmJsb2NrLnR5cGUgPT0gXCJzdWJoZWFkaW5nXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5ibG9jay5zZXBhcmF0b3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJsb2NrLnNlcGFyYXRvciA9IFwiIFwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdC5zZXRWYWx1ZSh0aGlzLmJsb2NrLnNlcGFyYXRvcikub25DaGFuZ2UoKHYpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5ibG9jay50eXBlID09IFwic3ViaGVhZGluZ1wiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYmxvY2suc2VwYXJhdG9yID0gdjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGJ1aWxkQ29uZGl0aW9ucyhlbDogSFRNTERpdkVsZW1lbnQpIHtcbiAgICAgICAgZWwuZW1wdHkoKTtcbiAgICAgICAgbmV3IFNldHRpbmcoZWwpXG4gICAgICAgICAgICAuc2V0TmFtZShcIkNvbmRpdGlvbmFsXCIpXG4gICAgICAgICAgICAuc2V0RGVzYyhcbiAgICAgICAgICAgICAgICBcIlRoZSBibG9jayB3aWxsIG5vdCBiZSBhZGRlZCBpZiB0aGUgYXNzb2NpYXRlZCBwcm9wZXJ0aWVzIGFyZSBub3QgcHJlc2VudC5cIlxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgLmFkZFRvZ2dsZSgodCkgPT4ge1xuICAgICAgICAgICAgICAgIHQuc2V0VmFsdWUodGhpcy5ibG9jay5jb25kaXRpb25lZCkub25DaGFuZ2UoKHYpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ibG9jay5jb25kaXRpb25lZCA9IHY7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5idWlsZENvbmRpdGlvbnMoZWwpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIGlmICghdGhpcy5ibG9jay5jb25kaXRpb25lZCAmJiAhdGhpcy5ncm91cCkge1xuICAgICAgICAgICAgbmV3IFNldHRpbmcoZWwpXG4gICAgICAgICAgICAgICAgLnNldE5hbWUoXCJGYWxsYmFja1wiKVxuICAgICAgICAgICAgICAgIC5zZXREZXNjKFwiSWYgbm90IHByZXNlbnQsIHRoaXMgdGV4dCB3aWxsIGJlIGRpc3BsYXllZC5cIilcbiAgICAgICAgICAgICAgICAuYWRkVGV4dCgodCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuYmxvY2suZmFsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYmxvY2suZmFsbGJhY2sgPSBcIi1cIjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0LnNldFZhbHVlKHRoaXMuYmxvY2suZmFsbGJhY2spLm9uQ2hhbmdlKCh2KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJsb2NrLmZhbGxiYWNrID0gdjtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgbmV3IFNldHRpbmcoZWwpXG4gICAgICAgICAgICAuc2V0TmFtZShcIkhhcyBSdWxlXCIpXG4gICAgICAgICAgICAuc2V0RGVzYyhcbiAgICAgICAgICAgICAgICBcIklmIHByZXNlbnQsIHRoZSBibG9jayB3aWxsIGhhdmUgYSBob3Jpem9udGFsIHJ1bGUgcGxhY2VkIGFmdGVyIGl0LlwiXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAuYWRkVG9nZ2xlKCh0KSA9PiB7XG4gICAgICAgICAgICAgICAgdC5zZXRWYWx1ZSh0aGlzLmJsb2NrLmhhc1J1bGUpLm9uQ2hhbmdlKFxuICAgICAgICAgICAgICAgICAgICAodikgPT4gKHRoaXMuYmxvY2suaGFzUnVsZSA9IHYpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cbiAgICBidWlsZERpY2UoZWw6IEhUTUxEaXZFbGVtZW50KSB7XG4gICAgICAgIGVsLmVtcHR5KCk7XG4gICAgICAgIGlmICghdGhpcy5ncm91cCAmJiB0aGlzLnBsdWdpbi5jYW5Vc2VEaWNlUm9sbGVyKSB7XG4gICAgICAgICAgICBuZXcgU2V0dGluZyhlbClcbiAgICAgICAgICAgICAgICAuc2V0TmFtZShcIlBhcnNlIGZvciBEaWNlXCIpXG4gICAgICAgICAgICAgICAgLnNldERlc2MoXG4gICAgICAgICAgICAgICAgICAgIFwiVGhlIHBsdWdpbiB3aWxsIGF0dGVtcHQgdG8gYWRkIGRpY2Ugcm9sbGVycyBhcyBzcGVjaWZpZWQuXCJcbiAgICAgICAgICAgICAgICApXG5cbiAgICAgICAgICAgICAgICAuYWRkVG9nZ2xlKCh0KSA9PlxuICAgICAgICAgICAgICAgICAgICB0LnNldFZhbHVlKHRoaXMuYmxvY2suZGljZSkub25DaGFuZ2UoKHYpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYmxvY2suZGljZSA9IHY7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJ1aWxkRGljZShlbCk7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmJsb2NrLmRpY2UpIHtcbiAgICAgICAgICAgICAgICBuZXcgU2V0dGluZyhlbC5jcmVhdGVEaXYoKSlcbiAgICAgICAgICAgICAgICAgICAgLnNldE5hbWUoXCJMaW5rIERpY2UgdG8gUHJvcGVydHlcIilcbiAgICAgICAgICAgICAgICAgICAgLnNldERlc2MoXG4gICAgICAgICAgICAgICAgICAgICAgICBcIlRoZSBkaWNlIHJvbGxlciB3aWxsIHBhcnNlIHRoaXMgcHJvcGVydHkgaW5zdGVhZCBvZiB0aGUgb3JpZ2luYWwuXCJcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAuYWRkVGV4dCgodCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdC5zZXRWYWx1ZSh0aGlzLmJsb2NrLmRpY2VQcm9wZXJ0eSkub25DaGFuZ2UoKHYpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJsb2NrLmRpY2VQcm9wZXJ0eSA9IHYgYXMga2V5b2YgTW9uc3RlcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGhpcy5hZHZhbmNlZCkgcmV0dXJuO1xuICAgICAgICBuZXcgU2V0dGluZyhlbClcbiAgICAgICAgICAgIC5zZXRIZWFkaW5nKClcbiAgICAgICAgICAgIC5zZXROYW1lKFwiRGljZSBDYWxsYmFja1wiKVxuICAgICAgICAgICAgLnNldERlc2MoXG4gICAgICAgICAgICAgICAgY3JlYXRlRnJhZ21lbnQoKGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZS5jcmVhdGVTcGFuKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IFwiVGhlIGJsb2NrIHdpbGwgcnVuIHRoZSBjYWxsYmFjayBhbmQgdXNlIHRoZSByZXR1cm5lZCB2YWx1ZXMgZm9yIHRoZSBkaWNlIHN0cmluZ3MuXCJcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGUuY3JlYXRlRWwoXCJiclwiKTtcbiAgICAgICAgICAgICAgICAgICAgZS5jcmVhdGVTcGFuKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IFwiVGhlIGNhbGxiYWNrIHdpbGwgcmVjZWl2ZSB0aGUgXCJcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGUuY3JlYXRlRWwoXCJjb2RlXCIsIHsgdGV4dDogXCJtb25zdGVyXCIgfSk7XG4gICAgICAgICAgICAgICAgICAgIGUuY3JlYXRlU3Bhbih7IHRleHQ6IFwiIGFuZCBcIiB9KTtcbiAgICAgICAgICAgICAgICAgICAgZS5jcmVhdGVFbChcImNvZGVcIiwgeyB0ZXh0OiBcInByb3BlcnR5XCIgfSk7XG4gICAgICAgICAgICAgICAgICAgIGUuY3JlYXRlU3Bhbih7IHRleHQ6IFwicGFyYW1ldGVycy5cIiB9KTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKTtcbiAgICAgICAgbmV3IFRleHRBcmVhQ29tcG9uZW50KGVsKVxuICAgICAgICAgICAgLnNldFZhbHVlKHRoaXMuYmxvY2suZGljZUNhbGxiYWNrKVxuICAgICAgICAgICAgLm9uQ2hhbmdlKCh2KSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5ibG9jay5kaWNlQ2FsbGJhY2sgPSB2O1xuICAgICAgICAgICAgfSk7XG4gICAgfVxuICAgIGFzeW5jIGRpc3BsYXkoKSB7XG4gICAgICAgIHRoaXMuY29udGVudEVsLmVtcHR5KCk7XG4gICAgICAgIG5ldyBTZXR0aW5nKHRoaXMuY29udGVudEVsKVxuICAgICAgICAgICAgLnNldE5hbWUoXCJTaG93IEFkdmFuY2VkIE9wdGlvbnNcIilcbiAgICAgICAgICAgIC5hZGRUb2dnbGUoKHQpID0+IHtcbiAgICAgICAgICAgICAgICB0LnNldFZhbHVlKFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmFkdmFuY2VkID8/IHRoaXMucGx1Z2luLnNldHRpbmdzLnNob3dBZHZhbmNlZFxuICAgICAgICAgICAgICAgICkub25DaGFuZ2UoKHYpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hZHZhbmNlZCA9IHY7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGlzcGxheSgpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5idWlsZFByb3BlcnRpZXModGhpcy5jb250ZW50RWwuY3JlYXRlRGl2KCkpO1xuICAgICAgICB0aGlzLmJ1aWxkU2VwYXJhdG9yKHRoaXMuY29udGVudEVsLmNyZWF0ZURpdigpKTtcbiAgICAgICAgdGhpcy5idWlsZENvbmRpdGlvbnModGhpcy5jb250ZW50RWwuY3JlYXRlRGl2KCkpO1xuICAgICAgICB0aGlzLmJ1aWxkRGljZSh0aGlzLmNvbnRlbnRFbC5jcmVhdGVEaXYoKSk7XG5cbiAgICAgICAgdGhpcy5idWlsZEJ1dHRvbnModGhpcy5jb250ZW50RWwuY3JlYXRlRGl2KCkpO1xuICAgIH1cblxuICAgIGJ1aWxkQnV0dG9ucyhlbDogSFRNTERpdkVsZW1lbnQpIHtcbiAgICAgICAgZWwuZW1wdHkoKTtcbiAgICAgICAgbmV3IFNldHRpbmcoZWwpXG4gICAgICAgICAgICAuYWRkQnV0dG9uKChiKSA9PlxuICAgICAgICAgICAgICAgIGJcbiAgICAgICAgICAgICAgICAgICAgLnNldEN0YSgpXG4gICAgICAgICAgICAgICAgICAgIC5zZXRJY29uKFwiY2hlY2ttYXJrXCIpXG4gICAgICAgICAgICAgICAgICAgIC5zZXRUb29sdGlwKFwiU2F2ZVwiKVxuICAgICAgICAgICAgICAgICAgICAub25DbGljaygoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNhdmVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIC5hZGRFeHRyYUJ1dHRvbigoYikgPT5cbiAgICAgICAgICAgICAgICBiXG4gICAgICAgICAgICAgICAgICAgIC5zZXRJY29uKFwiY3Jvc3NcIilcbiAgICAgICAgICAgICAgICAgICAgLnNldFRvb2x0aXAoXCJDYW5jZWxcIilcbiAgICAgICAgICAgICAgICAgICAgLm9uQ2xpY2soKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKTtcbiAgICB9XG5cbiAgICBidWlsZFByb3BlcnR5KGVsOiBIVE1MRWxlbWVudCkge31cbn1cbiIsICI8c2NyaXB0IGxhbmc9XCJ0c1wiPlxuICAgIGltcG9ydCB7IGZsaXAgfSBmcm9tIFwic3ZlbHRlL2FuaW1hdGVcIjtcbiAgICBpbXBvcnQgeyBkbmR6b25lLCBTSEFET1dfUExBQ0VIT0xERVJfSVRFTV9JRCB9IGZyb20gXCJzdmVsdGUtZG5kLWFjdGlvblwiO1xuICAgIGltcG9ydCB7IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlciB9IGZyb20gXCJzdmVsdGVcIjtcbiAgICBpbXBvcnQgeyBFeHRyYUJ1dHRvbkNvbXBvbmVudCwgc2V0SWNvbiB9IGZyb20gXCJvYnNpZGlhblwiO1xuICAgIGltcG9ydCB7IG5hbm9pZCB9IGZyb20gXCJzcmMvdXRpbC91dGlsXCI7XG5cbiAgICBjb25zdCBkaXNwYXRjaCA9IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlcigpO1xuXG4gICAgaW50ZXJmYWNlIEhlYWRlciB7XG4gICAgICAgIG5hbWU6IHN0cmluZztcbiAgICAgICAgaWQ6IHN0cmluZztcbiAgICB9XG5cbiAgICBleHBvcnQgbGV0IGhlYWRlcnM6IHN0cmluZ1tdO1xuICAgIGxldCBpdGVtcyA9IGhlYWRlcnMubWFwKChoKSA9PiB7XG4gICAgICAgIHJldHVybiB7IG5hbWU6IGgsIGlkOiBuYW5vaWQoKSB9O1xuICAgIH0pO1xuXG4gICAgLyoqIERyb3B6b25lIEZ1bmN0aW9ucyAqL1xuXG4gICAgbGV0IGZsaXBEdXJhdGlvbk1zID0gMzAwO1xuICAgIGxldCBkcmFnRGlzYWJsZWQgPSBmYWxzZTtcbiAgICBmdW5jdGlvbiBoYW5kbGVDb25zaWRlcihlOiBDdXN0b21FdmVudDxHZW5lcmljRG5kRXZlbnQ8SGVhZGVyPj4pIHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgaXRlbXM6IG5ld0l0ZW1zLFxuICAgICAgICAgICAgaW5mbzogeyBzb3VyY2UsIHRyaWdnZXIgfVxuICAgICAgICB9ID0gZS5kZXRhaWw7XG4gICAgICAgIGl0ZW1zID0gWy4uLm5ld0l0ZW1zXTtcbiAgICAgICAgLy8gRW5zdXJlIGRyYWdnaW5nIGlzIHN0b3BwZWQgb24gZHJhZyBmaW5pc2ggdmlhIGtleWJvYXJkXG4gICAgICAgIC8qIGlmIChzb3VyY2UgPT09IFNPVVJDRVMuS0VZQk9BUkQgJiYgdHJpZ2dlciA9PT0gVFJJR0dFUlMuRFJBR19TVE9QUEVEKSB7XG4gICAgICAgICAgICBkcmFnRGlzYWJsZWQgPSB0cnVlO1xuICAgICAgICB9ICovXG4gICAgfVxuICAgIGZ1bmN0aW9uIGhhbmRsZUZpbmFsaXplKGU6IEN1c3RvbUV2ZW50PEdlbmVyaWNEbmRFdmVudDxIZWFkZXI+Pikge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBpdGVtczogbmV3SXRlbXMsXG4gICAgICAgICAgICBpbmZvOiB7IHNvdXJjZSB9XG4gICAgICAgIH0gPSBlLmRldGFpbDtcbiAgICAgICAgaXRlbXMgPSBbLi4ubmV3SXRlbXNdO1xuICAgICAgICBkaXNwYXRjaChcInNvcnRlZFwiLCBpdGVtcyk7XG4gICAgICAgIC8vIEVuc3VyZSBkcmFnZ2luZyBpcyBzdG9wcGVkIG9uIGRyYWcgZmluaXNoIHZpYSBwb2ludGVyIChtb3VzZSwgdG91Y2gpXG4gICAgICAgIC8qIGlmIChzb3VyY2UgPT09IFNPVVJDRVMuUE9JTlRFUikge1xuICAgICAgICAgICAgZHJhZ0Rpc2FibGVkID0gdHJ1ZTtcbiAgICAgICAgfSAqL1xuICAgIH1cbiAgICBjb25zdCBncmlwID0gKG5vZGU6IEhUTUxFbGVtZW50KSA9PiB7XG4gICAgICAgIHNldEljb24obm9kZSwgXCJkcm9wem9uZS1ncmlwXCIpO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBzdGFydERyYWcoZTogRXZlbnQpIHtcbiAgICAgICAgLy8gcHJldmVudGluZyBkZWZhdWx0IHRvIHByZXZlbnQgbGFnIG9uIHRvdWNoIGRldmljZXMgKGJlY2F1c2Ugb2YgdGhlIGJyb3dzZXIgY2hlY2tpbmcgZm9yIHNjcmVlbiBzY3JvbGxpbmcpXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgZHJhZ0Rpc2FibGVkID0gZmFsc2U7XG4gICAgfVxuXG4gICAgY29uc3QgdHJhc2ggPSAoZXZ0OiBIZWFkZXIpID0+IHtcbiAgICAgICAgaXRlbXMgPSBpdGVtcy5maWx0ZXIoKGIpID0+IGIuaWQgIT0gZXZ0LmlkKTtcbiAgICAgICAgZGlzcGF0Y2goXCJzb3J0ZWRcIiwgaXRlbXMpO1xuICAgIH07XG5cbiAgICBjb25zdCBkZWwgPSAobm9kZTogSFRNTERpdkVsZW1lbnQpID0+IHtcbiAgICAgICAgbmV3IEV4dHJhQnV0dG9uQ29tcG9uZW50KG5vZGUpLnNldEljb24oXCJjcm9zcy1pbi1ib3hcIik7XG4gICAgfTtcbjwvc2NyaXB0PlxuXG48ZGl2IGNsYXNzPVwidGFibGUtaGVhZGVyLWNvbnRhaW5lclwiPlxuICAgIDxzZWN0aW9uXG4gICAgICAgIHVzZTpkbmR6b25lPXt7XG4gICAgICAgICAgICBpdGVtcyxcbiAgICAgICAgICAgIGZsaXBEdXJhdGlvbk1zLFxuICAgICAgICAgICAgZHJhZ0Rpc2FibGVkLFxuICAgICAgICAgICAgdHlwZTogXCJ0YWJsZV9oZWFkZXJzXCJcbiAgICAgICAgfX1cbiAgICAgICAgb246Y29uc2lkZXI9e2hhbmRsZUNvbnNpZGVyfVxuICAgICAgICBvbjpmaW5hbGl6ZT17aGFuZGxlRmluYWxpemV9XG4gICAgICAgIGNsYXNzPVwiY3JlYXRvci16b25lXCJcbiAgICA+XG4gICAgICAgIHsjZWFjaCBpdGVtcy5maWx0ZXIoKHgpID0+IHguaWQgIT09IFNIQURPV19QTEFDRUhPTERFUl9JVEVNX0lEKSBhcyBoZWFkZXIgKGhlYWRlci5pZCl9XG4gICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgY2xhc3M9XCJoZWFkZXItY29udGFpbmVyXCJcbiAgICAgICAgICAgICAgICBhbmltYXRlOmZsaXA9e3sgZHVyYXRpb246IGZsaXBEdXJhdGlvbk1zIH19XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPCEtLSA8ZGl2XG4gICAgICAgICAgICAgICAgICAgIGNsYXNzPVwiaWNvblwiXG4gICAgICAgICAgICAgICAgICAgIHVzZTpncmlwXG4gICAgICAgICAgICAgICAgICAgIG9uOm1vdXNlZG93bj17c3RhcnREcmFnfVxuICAgICAgICAgICAgICAgICAgICBvbjp0b3VjaHN0YXJ0PXtzdGFydERyYWd9XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlPXtkcmFnRGlzYWJsZWQgPyBcImN1cnNvcjogZ3JhYlwiIDogXCJjdXJzb3I6IGdyYWJiaW5nXCJ9XG4gICAgICAgICAgICAgICAgLz4gLS0+XG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJ0YWJsZS1oZWFkZXJcIj57aGVhZGVyLm5hbWV9PC9zcGFuPlxuICAgICAgICAgICAgICAgIDxkaXYgdXNlOmRlbCBvbjpjbGljaz17KCkgPT4gdHJhc2goaGVhZGVyKX0gLz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICB7L2VhY2h9XG4gICAgPC9zZWN0aW9uPlxuPC9kaXY+XG5cbjxzdHlsZT5cbiAgICAuY3JlYXRvci16b25lIHtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1ldmVubHk7XG4gICAgICAgIGdhcDogMXJlbTtcbiAgICAgICAgZmxleC1mbG93OiByb3cgd3JhcDtcbiAgICB9XG4gICAgLmhlYWRlci1jb250YWluZXIge1xuICAgICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIH1cbjwvc3R5bGU+XG4iLCAiPHNjcmlwdCBsYW5nPVwidHNcIj5cbiAgICBpbXBvcnQgeyBmbGlwIH0gZnJvbSBcInN2ZWx0ZS9hbmltYXRlXCI7XG4gICAgaW1wb3J0IHtcbiAgICAgICAgZG5kem9uZSxcbiAgICAgICAgU0hBRE9XX1BMQUNFSE9MREVSX0lURU1fSUQsXG4gICAgICAgIFNPVVJDRVMsXG4gICAgICAgIFRSSUdHRVJTXG4gICAgfSBmcm9tIFwic3ZlbHRlLWRuZC1hY3Rpb25cIjtcbiAgICBpbXBvcnQgQmxvY2sgZnJvbSBcIi4vQmxvY2suc3ZlbHRlXCI7XG4gICAgaW1wb3J0IHR5cGUgU3RhdEJsb2NrUGx1Z2luIGZyb20gXCJzcmMvbWFpblwiO1xuICAgIGltcG9ydCB7IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlciB9IGZyb20gXCJzdmVsdGVcIjtcbiAgICBpbXBvcnQgeyBFeHRyYUJ1dHRvbkNvbXBvbmVudCwgTWVudSwgc2V0SWNvbiB9IGZyb20gXCJvYnNpZGlhblwiO1xuICAgIGltcG9ydCB7IGdlbmVyYXRlIH0gZnJvbSBcIi4uL2FkZFwiO1xuICAgIGltcG9ydCB7IEJsb2NrTW9kYWwgfSBmcm9tIFwiLi9ibG9ja1wiO1xuICAgIGltcG9ydCBSdWxlIGZyb20gXCJzcmMvdmlldy91aS9SdWxlLnN2ZWx0ZVwiO1xuICAgIGltcG9ydCB0eXBlIHsgU3RhdGJsb2NrSXRlbSB9IGZyb20gXCJzcmMvbGF5b3V0cy90eXBlc1wiO1xuXG4gICAgY29uc3QgZGlzcGF0Y2ggPSBjcmVhdGVFdmVudERpc3BhdGNoZXIoKTtcblxuICAgIGV4cG9ydCBsZXQgYmxvY2tzOiBTdGF0YmxvY2tJdGVtW10gPSBbXTtcbiAgICBleHBvcnQgbGV0IGlubGluZSA9IGZhbHNlO1xuICAgIGV4cG9ydCBsZXQgcGx1Z2luOiBTdGF0QmxvY2tQbHVnaW47XG5cbiAgICAvKiogRHJvcHpvbmUgRnVuY3Rpb25zICovXG5cbiAgICBsZXQgZmxpcER1cmF0aW9uTXMgPSAzMDA7XG4gICAgbGV0IGRyYWdEaXNhYmxlZCA9IHRydWU7XG4gICAgZnVuY3Rpb24gaGFuZGxlQ29uc2lkZXIoZTogQ3VzdG9tRXZlbnQ8R2VuZXJpY0RuZEV2ZW50PFN0YXRibG9ja0l0ZW0+Pikge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICBpdGVtczogbmV3SXRlbXMsXG4gICAgICAgICAgICBpbmZvOiB7IHNvdXJjZSwgdHJpZ2dlciB9XG4gICAgICAgIH0gPSBlLmRldGFpbDtcbiAgICAgICAgYmxvY2tzID0gWy4uLm5ld0l0ZW1zXTtcbiAgICAgICAgLy8gRW5zdXJlIGRyYWdnaW5nIGlzIHN0b3BwZWQgb24gZHJhZyBmaW5pc2ggdmlhIGtleWJvYXJkXG4gICAgICAgIGlmIChzb3VyY2UgPT09IFNPVVJDRVMuS0VZQk9BUkQgJiYgdHJpZ2dlciA9PT0gVFJJR0dFUlMuRFJBR19TVE9QUEVEKSB7XG4gICAgICAgICAgICBkcmFnRGlzYWJsZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGhhbmRsZUZpbmFsaXplKGU6IEN1c3RvbUV2ZW50PEdlbmVyaWNEbmRFdmVudDxTdGF0YmxvY2tJdGVtPj4pIHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgaXRlbXM6IG5ld0l0ZW1zLFxuICAgICAgICAgICAgaW5mbzogeyBzb3VyY2UgfVxuICAgICAgICB9ID0gZS5kZXRhaWw7XG4gICAgICAgIGJsb2NrcyA9IFsuLi5uZXdJdGVtc107XG4gICAgICAgIGRpc3BhdGNoKFwic29ydGVkXCIsIGJsb2Nrcyk7XG4gICAgICAgIC8vIEVuc3VyZSBkcmFnZ2luZyBpcyBzdG9wcGVkIG9uIGRyYWcgZmluaXNoIHZpYSBwb2ludGVyIChtb3VzZSwgdG91Y2gpXG4gICAgICAgIGlmIChzb3VyY2UgPT09IFNPVVJDRVMuUE9JTlRFUikge1xuICAgICAgICAgICAgZHJhZ0Rpc2FibGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBncmlwID0gKG5vZGU6IEhUTUxFbGVtZW50KSA9PiB7XG4gICAgICAgIHNldEljb24obm9kZSwgXCJkcm9wem9uZS1ncmlwXCIpO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBzdGFydERyYWcoZTogRXZlbnQpIHtcbiAgICAgICAgLy8gcHJldmVudGluZyBkZWZhdWx0IHRvIHByZXZlbnQgbGFnIG9uIHRvdWNoIGRldmljZXMgKGJlY2F1c2Ugb2YgdGhlIGJyb3dzZXIgY2hlY2tpbmcgZm9yIHNjcmVlbiBzY3JvbGxpbmcpXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgZHJhZ0Rpc2FibGVkID0gZmFsc2U7XG4gICAgfVxuXG4gICAgY29uc3QgdHJhc2ggPSAoZXZ0OiBTdGF0YmxvY2tJdGVtKSA9PiB7XG4gICAgICAgIGJsb2NrcyA9IGJsb2Nrcy5maWx0ZXIoKGIpID0+IGIuaWQgIT0gZXZ0LmlkKTtcbiAgICAgICAgZGlzcGF0Y2goXCJzb3J0ZWRcIiwgYmxvY2tzKTtcbiAgICB9O1xuXG4gICAgY29uc3QgZWRpdGVkID0gKGU6IFN0YXRibG9ja0l0ZW0pID0+IHtcbiAgICAgICAgY29uc3Qgb3JpZ2luYWwgPSBibG9ja3MuZmluZEluZGV4KCh2KSA9PiB2LmlkID09IGUuaWQpO1xuICAgICAgICBibG9ja3Muc3BsaWNlKG9yaWdpbmFsLCAxLCBlKTtcbiAgICAgICAgYmxvY2tzID0gYmxvY2tzO1xuICAgIH07XG4gICAgY29uc3QgZWRpdEJsb2NrID0gKGJsb2NrOiBTdGF0YmxvY2tJdGVtKSA9PiB7XG4gICAgICAgIGNvbnN0IG1vZGFsID0gbmV3IEJsb2NrTW9kYWwocGx1Z2luLCBibG9jayk7XG5cbiAgICAgICAgbW9kYWwub25DbG9zZSA9ICgpID0+IHtcbiAgICAgICAgICAgIGlmICghbW9kYWwuc2F2ZWQpIHJldHVybjtcbiAgICAgICAgICAgIGVkaXRlZChtb2RhbC5ibG9jayk7XG4gICAgICAgICAgICAvKiBibG9jayA9IGNvcHkobW9kYWwuYmxvY2spOyAqL1xuICAgICAgICB9O1xuICAgICAgICBtb2RhbC5vcGVuKCk7XG4gICAgfTtcblxuICAgIGNvbnN0IGFkZCA9IGFzeW5jIChibG9jazogU3RhdGJsb2NrSXRlbSwgZXZ0OiBNb3VzZUV2ZW50KSA9PiB7XG4gICAgICAgIGlmICghKFwibmVzdGVkXCIgaW4gYmxvY2spKSByZXR1cm47XG4gICAgICAgIGNvbnN0IGdlbiA9IGF3YWl0IGdlbmVyYXRlKHBsdWdpbiwgZXZ0KTtcbiAgICAgICAgaWYgKGdlbikge1xuICAgICAgICAgICAgYmxvY2submVzdGVkID0gWy4uLmJsb2NrLm5lc3RlZCwgZ2VuXTtcbiAgICAgICAgICAgIGJsb2NrcyA9IGJsb2NrcztcbiAgICAgICAgICAgIGRpc3BhdGNoKFwic29ydGVkXCIsIGJsb2Nrcyk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgY29uc3QgZHJvcGRvd24gPSAobm9kZTogSFRNTERpdkVsZW1lbnQsIGJsb2NrOiBTdGF0YmxvY2tJdGVtKSA9PiB7XG4gICAgICAgIG5ldyBFeHRyYUJ1dHRvbkNvbXBvbmVudChub2RlKS5zZXRJY29uKFwidmVydGljYWwtdGhyZWUtZG90c1wiKTtcbiAgICAgICAgbm9kZS5vbmNsaWNrID0gKGV2dCkgPT4ge1xuICAgICAgICAgICAgbmV3IE1lbnUocGx1Z2luLmFwcClcbiAgICAgICAgICAgICAgICAuYWRkSXRlbSgoaXRlbSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpdGVtLnNldFRpdGxlKFwiQWRkXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2V0SWNvbihcInBsdXMtd2l0aC1jaXJjbGVcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5vbkNsaWNrKChlOiBNb3VzZUV2ZW50KSA9PiBhZGQoYmxvY2ssIGUpKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5hZGRJdGVtKChpdGVtKSA9PlxuICAgICAgICAgICAgICAgICAgICBpdGVtXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2V0VGl0bGUoXCJFZGl0XCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2V0SWNvbihcInBlbmNpbFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgLm9uQ2xpY2soKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVkaXRCbG9jayhibG9jayk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAuYWRkSXRlbSgoaXRlbSkgPT5cbiAgICAgICAgICAgICAgICAgICAgaXRlbVxuICAgICAgICAgICAgICAgICAgICAgICAgLnNldFRpdGxlKFwiRGVsZXRlXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2V0SWNvbihcInRyYXNoXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAub25DbGljaygoKSA9PiB0cmFzaChibG9jaykpXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIC5zaG93QXRNb3VzZUV2ZW50KGV2dCk7XG4gICAgICAgIH07XG4gICAgfTtcbjwvc2NyaXB0PlxuXG48ZGl2IGNsYXNzPVwiY3JlYXRvclwiPlxuICAgIDxzZWN0aW9uXG4gICAgICAgIHVzZTpkbmR6b25lPXt7XG4gICAgICAgICAgICBpdGVtczogYmxvY2tzLFxuICAgICAgICAgICAgZmxpcER1cmF0aW9uTXMsXG4gICAgICAgICAgICBkcmFnRGlzYWJsZWRcbiAgICAgICAgfX1cbiAgICAgICAgb246Y29uc2lkZXI9e2hhbmRsZUNvbnNpZGVyfVxuICAgICAgICBvbjpmaW5hbGl6ZT17aGFuZGxlRmluYWxpemV9XG4gICAgICAgIGNsYXNzOmlubGluZVxuICAgICAgICBjbGFzcz1cImNyZWF0b3Item9uZVwiXG4gICAgPlxuICAgICAgICB7I2VhY2ggYmxvY2tzLmZpbHRlcigoeCkgPT4geC5pZCAhPT0gU0hBRE9XX1BMQUNFSE9MREVSX0lURU1fSUQpIGFzIGJsb2NrIChibG9jay5pZCl9XG4gICAgICAgICAgICA8ZGl2IGFuaW1hdGU6ZmxpcD17eyBkdXJhdGlvbjogZmxpcER1cmF0aW9uTXMgfX0+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImJsb2NrLWNvbnRhaW5lclwiPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYmxvY2tcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz1cImljb25cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZTpncmlwXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb246bW91c2Vkb3duPXtzdGFydERyYWd9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb246dG91Y2hzdGFydD17c3RhcnREcmFnfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXtkcmFnRGlzYWJsZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBcImN1cnNvcjogZ3JhYlwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogXCJjdXJzb3I6IGdyYWJiaW5nXCJ9XG4gICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgeyNpZiBibG9jay50eXBlICE9IFwiZ3JvdXBcIiAmJiBibG9jay50eXBlICE9IFwiaW5saW5lXCJ9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIml0ZW1cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPEJsb2NrXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7cGx1Z2lufVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2Jsb2NrfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb246dHJhc2g9eyhlKSA9PiB0cmFzaChlLmRldGFpbCl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbjplZGl0ZWQ9eyhlKSA9PiBlZGl0ZWQoZS5kZXRhaWwpfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgezplbHNlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9XCJpdGVtXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M6Z3JvdXA9e2Jsb2NrLnR5cGUgPT0gXCJncm91cFwiIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBibG9jay50eXBlID09IFwiaW5saW5lXCJ9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3ZlbHRlOnNlbGZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJpbmQ6YmxvY2tzPXtibG9jay5uZXN0ZWR9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiaW5kOnBsdWdpblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5saW5lPXtibG9jay50eXBlID09IFwiaW5saW5lXCJ9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyNrZXkgYmxvY2t9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPVwiZHJvcGRvd24taWNvblwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1c2U6ZHJvcGRvd249e2Jsb2NrfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsva2V5fVxuICAgICAgICAgICAgICAgICAgICAgICAgey9pZn1cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIHsjaWYgYmxvY2suaGFzUnVsZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgYXJpYS1sYWJlbD1cIkJsb2NrIEhhcyBSdWxlXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFJ1bGUgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICB7L2lmfVxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIHsvZWFjaH1cbiAgICA8L3NlY3Rpb24+XG48L2Rpdj5cblxuPHN0eWxlPlxuICAgIDpnbG9iYWwoYm9keTpub3QoLmlzLW1vYmlsZSkpIC5jcmVhdG9yLXpvbmU6bm90KC5uZXN0ZWQpIHtcbiAgICAgICAgbWF4LXdpZHRoOiA3NXZ3O1xuICAgICAgICBtYXgtaGVpZ2h0OiA2NXZoO1xuICAgICAgICBvdmVyZmxvdzogYXV0bztcbiAgICB9XG4gICAgLmlubGluZSB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICB9XG4gICAgLmJsb2NrIHtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIH1cblxuICAgIC5pdGVtIHtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgZmxleC1mbG93OiBjb2x1bW47XG4gICAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgICBwYWRkaW5nOiAycHg7XG4gICAgICAgIG1hcmdpbjogMnB4O1xuICAgIH1cbiAgICAuZ3JvdXAge1xuICAgICAgICBkaXNwbGF5OiBncmlkO1xuICAgICAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmcjtcbiAgICAgICAgYm9yZGVyOiAycHggZGFzaGVkIGdyZXk7XG4gICAgICAgIG1pbi1oZWlnaHQ6IDJyZW07XG4gICAgfVxuICAgIC5kcm9wZG93bi1pY29uIHtcbiAgICAgICAgYWxpZ24tc2VsZjogZmxleC1zdGFydDtcbiAgICB9XG4gICAgLmlubGluZSB7XG4gICAgICAgIGRpc3BsYXk6IGlubGluZS1mbGV4O1xuICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgIH1cbiAgICAuaWNvbiB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgfVxuPC9zdHlsZT5cbiIsICJpbXBvcnQgdHlwZSB7IE1vbnN0ZXIgfSBmcm9tIFwiQHR5cGVzXCI7XG5pbXBvcnQge1xuICAgIEFwcCxcbiAgICBGdXp6eU1hdGNoLFxuICAgIEZ1enp5U3VnZ2VzdE1vZGFsLFxuICAgIE1vZGFsLFxuICAgIFBsYXRmb3JtLFxuICAgIFNjb3BlLFxuICAgIFNldHRpbmcsXG4gICAgU3VnZ2VzdE1vZGFsLFxuICAgIFRleHRDb21wb25lbnRcbn0gZnJvbSBcIm9ic2lkaWFuXCI7XG5pbXBvcnQgdHlwZSBTdGF0QmxvY2tQbHVnaW4gZnJvbSBcInNyYy9tYWluXCI7XG5pbXBvcnQgeyBzdHJpbmdpZnkgfSBmcm9tIFwic3JjL3V0aWwvdXRpbFwiO1xuaW1wb3J0IFN0YXRCbG9ja1JlbmRlcmVyIGZyb20gXCJzcmMvdmlldy9zdGF0YmxvY2tcIjtcbmltcG9ydCB7IEVkaXRNb25zdGVyTW9kYWwgfSBmcm9tIFwiLi9tb2RhbFwiO1xuXG5jbGFzcyBTdWdnZXN0ZXI8VD4ge1xuICAgIG93bmVyOiBTdWdnZXN0TW9kYWw8VD47XG4gICAgaXRlbXM6IFRbXTtcbiAgICBzdWdnZXN0aW9uczogSFRNTERpdkVsZW1lbnRbXTtcbiAgICBzZWxlY3RlZEl0ZW06IG51bWJlcjtcbiAgICBjb250YWluZXJFbDogSFRNTEVsZW1lbnQ7XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIG93bmVyOiBTdWdnZXN0TW9kYWw8VD4sXG4gICAgICAgIGNvbnRhaW5lckVsOiBIVE1MRWxlbWVudCxcbiAgICAgICAgc2NvcGU6IFNjb3BlXG4gICAgKSB7XG4gICAgICAgIHRoaXMuY29udGFpbmVyRWwgPSBjb250YWluZXJFbDtcbiAgICAgICAgdGhpcy5vd25lciA9IG93bmVyO1xuICAgICAgICAvKiBjb250YWluZXJFbC5vbihcbiAgICAgICAgICAgIFwiY2xpY2tcIixcbiAgICAgICAgICAgIFwiLnN1Z2dlc3Rpb24taXRlbVwiLFxuICAgICAgICAgICAgdGhpcy5vblN1Z2dlc3Rpb25DbGljay5iaW5kKHRoaXMpXG4gICAgICAgICk7ICovXG4gICAgICAgIC8qIGNvbnRhaW5lckVsLm9uKFxuICAgICAgICAgICAgXCJtb3VzZW1vdmVcIixcbiAgICAgICAgICAgIFwiLnN1Z2dlc3Rpb24taXRlbVwiLFxuICAgICAgICAgICAgdGhpcy5vblN1Z2dlc3Rpb25Nb3VzZW92ZXIuYmluZCh0aGlzKVxuICAgICAgICApOyAqL1xuXG4gICAgICAgIHNjb3BlLnJlZ2lzdGVyKFtdLCBcIkFycm93VXBcIiwgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5zZXRTZWxlY3RlZEl0ZW0odGhpcy5zZWxlY3RlZEl0ZW0gLSAxLCB0cnVlKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgc2NvcGUucmVnaXN0ZXIoW10sIFwiQXJyb3dEb3duXCIsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc2V0U2VsZWN0ZWRJdGVtKHRoaXMuc2VsZWN0ZWRJdGVtICsgMSwgdHJ1ZSk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHNjb3BlLnJlZ2lzdGVyKFtdLCBcIkVudGVyXCIsIChldnQpID0+IHtcbiAgICAgICAgICAgIHRoaXMudXNlU2VsZWN0ZWRJdGVtKGV2dCk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHNjb3BlLnJlZ2lzdGVyKFtdLCBcIlRhYlwiLCAoZXZ0KSA9PiB7XG4gICAgICAgICAgICB0aGlzLmNob29zZVN1Z2dlc3Rpb24oZXZ0KTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGNob29zZVN1Z2dlc3Rpb24oZXZ0OiBLZXlib2FyZEV2ZW50KSB7XG4gICAgICAgIGlmICghdGhpcy5pdGVtcyB8fCAhdGhpcy5pdGVtcy5sZW5ndGgpIHJldHVybjtcbiAgICAgICAgY29uc3QgY3VycmVudFZhbHVlID0gdGhpcy5pdGVtc1t0aGlzLnNlbGVjdGVkSXRlbV07XG4gICAgICAgIGlmIChjdXJyZW50VmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMub3duZXIub25DaG9vc2VTdWdnZXN0aW9uKGN1cnJlbnRWYWx1ZSwgZXZ0KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBvblN1Z2dlc3Rpb25DbGljayhldmVudDogTW91c2VFdmVudCwgZWw6IEhUTUxEaXZFbGVtZW50KTogdm9pZCB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGlmICghdGhpcy5zdWdnZXN0aW9ucyB8fCAhdGhpcy5zdWdnZXN0aW9ucy5sZW5ndGgpIHJldHVybjtcblxuICAgICAgICBjb25zdCBpdGVtID0gdGhpcy5zdWdnZXN0aW9ucy5pbmRleE9mKGVsKTtcbiAgICAgICAgdGhpcy5zZXRTZWxlY3RlZEl0ZW0oaXRlbSwgZmFsc2UpO1xuICAgICAgICB0aGlzLnVzZVNlbGVjdGVkSXRlbShldmVudCk7XG4gICAgfVxuXG4gICAgb25TdWdnZXN0aW9uTW91c2VvdmVyKGV2ZW50OiBNb3VzZUV2ZW50LCBlbDogSFRNTERpdkVsZW1lbnQpOiB2b2lkIHtcbiAgICAgICAgaWYgKCF0aGlzLnN1Z2dlc3Rpb25zIHx8ICF0aGlzLnN1Z2dlc3Rpb25zLmxlbmd0aCkgcmV0dXJuO1xuICAgICAgICBjb25zdCBpdGVtID0gdGhpcy5zdWdnZXN0aW9ucy5pbmRleE9mKGVsKTtcbiAgICAgICAgdGhpcy5zZXRTZWxlY3RlZEl0ZW0oaXRlbSwgZmFsc2UpO1xuICAgIH1cbiAgICBlbXB0eSgpIHtcbiAgICAgICAgdGhpcy5jb250YWluZXJFbC5lbXB0eSgpO1xuICAgIH1cbiAgICBzZXRTdWdnZXN0aW9ucyhpdGVtczogVFtdKSB7XG4gICAgICAgIHRoaXMuY29udGFpbmVyRWwuZW1wdHkoKTtcbiAgICAgICAgY29uc3QgZWxzOiBIVE1MRGl2RWxlbWVudFtdID0gW107XG5cbiAgICAgICAgaXRlbXMuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc3VnZ2VzdGlvbkVsID1cbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRhaW5lckVsLmNyZWF0ZURpdigvKiBcInN1Z2dlc3Rpb24taXRlbVwiICovKTtcbiAgICAgICAgICAgIHRoaXMub3duZXIucmVuZGVyU3VnZ2VzdGlvbihpdGVtLCBzdWdnZXN0aW9uRWwpO1xuICAgICAgICAgICAgZWxzLnB1c2goc3VnZ2VzdGlvbkVsKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuaXRlbXMgPSBpdGVtcztcbiAgICAgICAgdGhpcy5zdWdnZXN0aW9ucyA9IGVscztcbiAgICAgICAgdGhpcy5zZXRTZWxlY3RlZEl0ZW0oMCwgZmFsc2UpO1xuICAgIH1cbiAgICB1c2VTZWxlY3RlZEl0ZW0oZXZlbnQ6IE1vdXNlRXZlbnQgfCBLZXlib2FyZEV2ZW50KSB7XG4gICAgICAgIGlmICghdGhpcy5pdGVtcyB8fCAhdGhpcy5pdGVtcy5sZW5ndGgpIHJldHVybjtcbiAgICAgICAgY29uc3QgY3VycmVudFZhbHVlID0gdGhpcy5pdGVtc1t0aGlzLnNlbGVjdGVkSXRlbV07XG4gICAgICAgIGlmIChjdXJyZW50VmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMub3duZXIuc2VsZWN0U3VnZ2VzdGlvbihjdXJyZW50VmFsdWUsIGV2ZW50KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB3cmFwKHZhbHVlOiBudW1iZXIsIHNpemU6IG51bWJlcik6IG51bWJlciB7XG4gICAgICAgIHJldHVybiAoKHZhbHVlICUgc2l6ZSkgKyBzaXplKSAlIHNpemU7XG4gICAgfVxuICAgIHNldFNlbGVjdGVkSXRlbShpbmRleDogbnVtYmVyLCBzY3JvbGw6IGJvb2xlYW4pIHtcbiAgICAgICAgY29uc3QgbkluZGV4ID0gdGhpcy53cmFwKGluZGV4LCB0aGlzLnN1Z2dlc3Rpb25zLmxlbmd0aCk7XG4gICAgICAgIGNvbnN0IHByZXYgPSB0aGlzLnN1Z2dlc3Rpb25zW3RoaXMuc2VsZWN0ZWRJdGVtXTtcbiAgICAgICAgY29uc3QgbmV4dCA9IHRoaXMuc3VnZ2VzdGlvbnNbbkluZGV4XTtcblxuICAgICAgICAvKiAgICAgICAgIGlmIChwcmV2KSBwcmV2LnJlbW92ZUNsYXNzKFwiaXMtc2VsZWN0ZWRcIik7XG4gICAgICAgIGlmIChuZXh0KSBuZXh0LmFkZENsYXNzKFwiaXMtc2VsZWN0ZWRcIik7ICovXG5cbiAgICAgICAgdGhpcy5zZWxlY3RlZEl0ZW0gPSBuSW5kZXg7XG5cbiAgICAgICAgaWYgKHNjcm9sbCAmJiBuZXh0KSB7XG4gICAgICAgICAgICBuZXh0LnNjcm9sbEludG9WaWV3KGZhbHNlKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuYWJzdHJhY3QgY2xhc3MgU3VnZ2VzdGlvbk1vZGFsPFQ+IGV4dGVuZHMgRnV6enlTdWdnZXN0TW9kYWw8VD4ge1xuICAgIHN1Z2dlc3Rpb25zOiBIVE1MRGl2RWxlbWVudFtdO1xuICAgIHNjb3BlOiBTY29wZSA9IG5ldyBTY29wZSgpO1xuICAgIHN1Z2dlc3RlcjogU3VnZ2VzdGVyPEZ1enp5TWF0Y2g8VD4+O1xuICAgIHN1Z2dlc3RFbDogSFRNTERpdkVsZW1lbnQ7XG4gICAgcHJvbXB0RWw6IEhUTUxEaXZFbGVtZW50O1xuICAgIGVtcHR5U3RhdGVUZXh0OiBzdHJpbmcgPSBcIk5vIG1hdGNoIGZvdW5kXCI7XG4gICAgbGltaXQ6IG51bWJlciA9IDEwMDtcbiAgICBmaWx0ZXJlZEl0ZW1zOiBGdXp6eU1hdGNoPFQ+W10gPSBbXTtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgYXBwOiBBcHAsXG4gICAgICAgIGlucHV0RWw6IEhUTUxJbnB1dEVsZW1lbnQsXG4gICAgICAgIHN1Z2dlc3RFbDogSFRNTERpdkVsZW1lbnRcbiAgICApIHtcbiAgICAgICAgc3VwZXIoYXBwKTtcbiAgICAgICAgdGhpcy5pbnB1dEVsID0gaW5wdXRFbDtcblxuICAgICAgICB0aGlzLnN1Z2dlc3RFbCA9IHN1Z2dlc3RFbC5jcmVhdGVEaXYoLyogXCJzdWdnZXN0aW9uLWNvbnRhaW5lclwiICovKTtcblxuICAgICAgICB0aGlzLmNvbnRlbnRFbCA9IHRoaXMuc3VnZ2VzdEVsLmNyZWF0ZURpdigvKiBcInN1Z2dlc3Rpb25cIiAqLyk7XG5cbiAgICAgICAgdGhpcy5zdWdnZXN0ZXIgPSBuZXcgU3VnZ2VzdGVyKHRoaXMsIHRoaXMuY29udGVudEVsLCB0aGlzLnNjb3BlKTtcblxuICAgICAgICAvKiB0aGlzLnNjb3BlLnJlZ2lzdGVyKFtdLCBcIkVzY2FwZVwiLCB0aGlzLmNsb3NlLmJpbmQodGhpcykpOyAqL1xuXG4gICAgICAgIHRoaXMuaW5wdXRFbC5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgdGhpcy5fb25JbnB1dENoYW5nZWQuYmluZCh0aGlzKSk7XG4gICAgICAgIHRoaXMuaW5wdXRFbC5hZGRFdmVudExpc3RlbmVyKFwiZm9jdXNcIiwgdGhpcy5fb25JbnB1dENoYW5nZWQuYmluZCh0aGlzKSk7XG4gICAgICAgIC8qIHRoaXMuaW5wdXRFbC5hZGRFdmVudExpc3RlbmVyKFwiYmx1clwiLCB0aGlzLmNsb3NlLmJpbmQodGhpcykpOyAqL1xuICAgICAgICB0aGlzLnN1Z2dlc3RFbC5vbihcbiAgICAgICAgICAgIFwibW91c2Vkb3duXCIsXG4gICAgICAgICAgICBcIi5zdWdnZXN0aW9uLWNvbnRhaW5lclwiLFxuICAgICAgICAgICAgKGV2ZW50OiBNb3VzZUV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9XG4gICAgZW1wdHkoKSB7XG4gICAgICAgIHRoaXMuc3VnZ2VzdGVyLmVtcHR5KCk7XG4gICAgfVxuICAgIF9vbklucHV0Q2hhbmdlZCgpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgaW5wdXRTdHIgPSB0aGlzLmlucHV0RWwudmFsdWU7XG4gICAgICAgIHRoaXMuZmlsdGVyZWRJdGVtcyA9IHRoaXMuZ2V0U3VnZ2VzdGlvbnMoaW5wdXRTdHIpO1xuICAgICAgICBpZiAodGhpcy5maWx0ZXJlZEl0ZW1zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMuc3VnZ2VzdGVyLnNldFN1Z2dlc3Rpb25zKFxuICAgICAgICAgICAgICAgIHRoaXMuZmlsdGVyZWRJdGVtcy5zbGljZSgwLCB0aGlzLmxpbWl0KVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMub25Ob1N1Z2dlc3Rpb24oKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm9uSW5wdXRDaGFuZ2VkKCk7XG4gICAgICAgIHRoaXMub3BlbigpO1xuICAgIH1cbiAgICBvbklucHV0Q2hhbmdlZCgpOiB2b2lkIHt9XG4gICAgb25Ob1N1Z2dlc3Rpb24oKSB7XG4gICAgICAgIHRoaXMuZW1wdHkoKTtcbiAgICAgICAgdGhpcy5yZW5kZXJTdWdnZXN0aW9uKFxuICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgIHRoaXMuY29udGVudEVsLmNyZWF0ZURpdigvKiBcInN1Z2dlc3Rpb24taXRlbVwiICovKVxuICAgICAgICApO1xuICAgIH1cbiAgICBvcGVuKCk6IHZvaWQge31cblxuICAgIGNsb3NlKCk6IHZvaWQge1xuICAgICAgICB0aGlzLnN1Z2dlc3Rlci5zZXRTdWdnZXN0aW9ucyhbXSk7XG4gICAgfVxuICAgIGNyZWF0ZVByb21wdChwcm9tcHRzOiBIVE1MU3BhbkVsZW1lbnRbXSkge1xuICAgICAgICBpZiAoIXRoaXMucHJvbXB0RWwpXG4gICAgICAgICAgICB0aGlzLnByb21wdEVsID0gdGhpcy5zdWdnZXN0RWwuY3JlYXRlRGl2KFwicHJvbXB0LWluc3RydWN0aW9uc1wiKTtcbiAgICAgICAgbGV0IHByb21wdCA9IHRoaXMucHJvbXB0RWwuY3JlYXRlRGl2KFwicHJvbXB0LWluc3RydWN0aW9uXCIpO1xuICAgICAgICBmb3IgKGxldCBwIG9mIHByb21wdHMpIHtcbiAgICAgICAgICAgIHByb21wdC5hcHBlbmRDaGlsZChwKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhYnN0cmFjdCBvbkNob29zZUl0ZW0oaXRlbTogVCwgZXZ0OiBNb3VzZUV2ZW50IHwgS2V5Ym9hcmRFdmVudCk6IHZvaWQ7XG4gICAgYWJzdHJhY3QgZ2V0SXRlbVRleHQoYXJnOiBUKTogc3RyaW5nO1xuICAgIGFic3RyYWN0IGdldEl0ZW1zKCk6IFRbXTtcbn1cblxuZXhwb3J0IGNsYXNzIE1vbnN0ZXJTdWdnZXN0ZXIgZXh0ZW5kcyBTdWdnZXN0aW9uTW9kYWw8TW9uc3Rlcj4ge1xuICAgIG1vbnN0ZXI6IE1vbnN0ZXI7XG4gICAgdGV4dDogVGV4dENvbXBvbmVudDtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHVibGljIHBsdWdpbjogU3RhdEJsb2NrUGx1Z2luLFxuICAgICAgICBpbnB1dDogVGV4dENvbXBvbmVudCxcbiAgICAgICAgZWw6IEhUTUxEaXZFbGVtZW50LFxuICAgICAgICBwdWJsaWMgZGlzcGxheWVkOiBTZXQ8c3RyaW5nPixcbiAgICAgICAgcHVibGljIG1vbnN0ZXJzOiBNb25zdGVyW11cbiAgICApIHtcbiAgICAgICAgc3VwZXIocGx1Z2luLmFwcCwgaW5wdXQuaW5wdXRFbCwgZWwpO1xuICAgICAgICB0aGlzLnRleHQgPSBpbnB1dDtcbiAgICAgICAgLy90aGlzLmdldEl0ZW0oKTtcbiAgICAgICAgdGhpcy5fb25JbnB1dENoYW5nZWQoKTtcbiAgICAgICAgdGhpcy5jcmVhdGVQcm9tcHRzKCk7XG5cbiAgICAgICAgdGhpcy5pbnB1dEVsLmFkZEV2ZW50TGlzdGVuZXIoXCJpbnB1dFwiLCB0aGlzLmdldEl0ZW0uYmluZCh0aGlzKSk7XG4gICAgfVxuICAgIGNyZWF0ZVByb21wdHMoKSB7fVxuICAgIGdldEl0ZW0oKSB7XG4gICAgICAgIGNvbnN0IHYgPSB0aGlzLmlucHV0RWwudmFsdWUsXG4gICAgICAgICAgICBtb25zdGVyID0gdGhpcy5nZXRJdGVtcygpLmZpbmQoXG4gICAgICAgICAgICAgICAgKGMpID0+IGMubmFtZSA9PT0gdi50cmltKCkgfHwgYy5zb3VyY2UgPT09IHYudHJpbSgpXG4gICAgICAgICAgICApO1xuICAgICAgICBpZiAobW9uc3RlciA9PSB0aGlzLm1vbnN0ZXIpIHJldHVybjtcbiAgICAgICAgdGhpcy5tb25zdGVyID0gbW9uc3RlcjtcbiAgICAgICAgaWYgKHRoaXMubW9uc3RlcikgdGhpcy5fb25JbnB1dENoYW5nZWQoKTtcbiAgICB9XG4gICAgZ2V0SXRlbVRleHQoaXRlbTogTW9uc3Rlcikge1xuICAgICAgICByZXR1cm4gaXRlbS5uYW1lICsgaXRlbS5zb3VyY2U7XG4gICAgfVxuICAgIG9uQ2hvb3NlSXRlbSgpIHt9XG4gICAgc2VsZWN0U3VnZ2VzdGlvbigpIHt9XG4gICAgcmVuZGVyU3VnZ2VzdGlvbihyZXN1bHQ6IEZ1enp5TWF0Y2g8TW9uc3Rlcj4sIGVsOiBIVE1MRWxlbWVudCkge1xuICAgICAgICBsZXQgeyBpdGVtLCBtYXRjaDogbWF0Y2hlcyB9ID0gcmVzdWx0IHx8IHt9O1xuICAgICAgICBsZXQgY29udGVudCA9IG5ldyBTZXR0aW5nKGVsKTtcbiAgICAgICAgaWYgKCFpdGVtKSB7XG4gICAgICAgICAgICBjb250ZW50Lm5hbWVFbC5zZXRUZXh0KHRoaXMuZW1wdHlTdGF0ZVRleHQpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpdGVtLm5hbWUubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBtYXRjaCA9IG1hdGNoZXMubWF0Y2hlcy5maW5kKChtKSA9PiBtWzBdID09PSBpKTtcbiAgICAgICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgICAgICAgIGNvbnRlbnQubmFtZUVsLmNyZWF0ZVNwYW4oe1xuICAgICAgICAgICAgICAgICAgICBjbHM6IFwic3VnZ2VzdGlvbi1oaWdobGlnaHRcIixcbiAgICAgICAgICAgICAgICAgICAgdGV4dDogaXRlbS5uYW1lLnN1YnN0cmluZyhtYXRjaFswXSwgbWF0Y2hbMV0pXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBpICs9IG1hdGNoWzFdIC0gbWF0Y2hbMF0gLSAxO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb250ZW50Lm5hbWVFbC5hcHBlbmRUZXh0KGl0ZW0ubmFtZVtpXSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGl0ZW0uc291cmNlKSB7XG4gICAgICAgICAgICBmb3IgKFxuICAgICAgICAgICAgICAgIGxldCBpID0gaXRlbS5uYW1lLmxlbmd0aDtcbiAgICAgICAgICAgICAgICBpIDwgaXRlbS5uYW1lLmxlbmd0aCArIGl0ZW0uc291cmNlPy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgaSsrXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBsZXQgbWF0Y2ggPSBtYXRjaGVzLm1hdGNoZXMuZmluZCgobSkgPT4gbVswXSA9PT0gaSk7XG4gICAgICAgICAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBkZXNjOiBzdHJpbmc7XG4gICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGl0ZW0uc291cmNlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHNvdXJjZSA9IGl0ZW0uc291cmNlLnNsaWNlKDAsIDQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0uc291cmNlLmxlbmd0aCA+IDQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2UucHVzaChgYW5kICR7aXRlbS5zb3VyY2UubGVuZ3RoIC0gNH0gbW9yZWApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZGVzYyA9IHN0cmluZ2lmeShzb3VyY2UsIDAsIFwiLCBcIiwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVzYyA9IGl0ZW0uc291cmNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQuZGVzY0VsLmNyZWF0ZVNwYW4oe1xuICAgICAgICAgICAgICAgICAgICAgICAgY2xzOiBcInN1Z2dlc3Rpb24taGlnaGxpZ2h0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBkZXNjLnN1YnN0cmluZyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaFswXSAtIGl0ZW0ubmFtZS5sZW5ndGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hbMV0gLSBpdGVtLm5hbWUubGVuZ3RoXG4gICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIGkgKz0gbWF0Y2hbMV0gLSBtYXRjaFswXSAtIDE7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNvbnRlbnQuZGVzY0VsLmFwcGVuZFRleHQoaXRlbS5zb3VyY2VbaSAtIGl0ZW0ubmFtZS5sZW5ndGhdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8qIGNvbnRlbnQuc2V0RGVzYyhpdGVtLnNvdXJjZSk7ICovXG4gICAgICAgIGNvbnRlbnRcbiAgICAgICAgICAgIC5hZGRFeHRyYUJ1dHRvbigoYikgPT4ge1xuICAgICAgICAgICAgICAgIGIuc2V0SWNvbihcImluZm9cIilcbiAgICAgICAgICAgICAgICAgICAgLnNldFRvb2x0aXAoXCJWaWV3XCIpXG4gICAgICAgICAgICAgICAgICAgIC5vbkNsaWNrKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1vZGFsID0gbmV3IFZpZXdNb25zdGVyTW9kYWwodGhpcy5wbHVnaW4sIGl0ZW0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgbW9kYWwub3BlbigpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuYWRkRXh0cmFCdXR0b24oKGIpID0+IHtcbiAgICAgICAgICAgICAgICBiLnNldEljb24oXCJwZW5jaWxcIilcbiAgICAgICAgICAgICAgICAgICAgLnNldFRvb2x0aXAoXCJFZGl0XCIpXG4gICAgICAgICAgICAgICAgICAgIC5vbkNsaWNrKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1vZGFsID0gbmV3IEVkaXRNb25zdGVyTW9kYWwodGhpcy5wbHVnaW4sIGl0ZW0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgbW9kYWwub3BlbigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbW9kYWwub25DbG9zZSA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9vbklucHV0Q2hhbmdlZCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmFkZEV4dHJhQnV0dG9uKChiKSA9PiB7XG4gICAgICAgICAgICAgICAgYi5zZXRJY29uKFwidHJhc2hcIilcbiAgICAgICAgICAgICAgICAgICAgLnNldFRvb2x0aXAoXCJEZWxldGVcIilcbiAgICAgICAgICAgICAgICAgICAgLm9uQ2xpY2soKCkgPT4gdGhpcy5vblJlbW92ZUl0ZW0oaXRlbSkpO1xuICAgICAgICAgICAgfSk7XG4gICAgfVxuICAgIGdldEl0ZW1zKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tb25zdGVycztcbiAgICB9XG4gICAgb25DbG9zZShpdGVtPzogTW9uc3Rlcikge31cbiAgICBvblJlbW92ZUl0ZW0oaXRlbTogTW9uc3Rlcikge31cbn1cblxuZXhwb3J0IGNsYXNzIFZpZXdNb25zdGVyTW9kYWwgZXh0ZW5kcyBNb2RhbCB7XG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBwbHVnaW46IFN0YXRCbG9ja1BsdWdpbiwgcHJpdmF0ZSBtb25zdGVyOiBNb25zdGVyKSB7XG4gICAgICAgIHN1cGVyKHBsdWdpbi5hcHApO1xuICAgIH1cbiAgICBhc3luYyBkaXNwbGF5KCkge1xuICAgICAgICBpZiAoIVBsYXRmb3JtLmlzTW9iaWxlKSB7XG4gICAgICAgICAgICB0aGlzLmNvbnRlbnRFbC5zdHlsZS5tYXhXaWR0aCA9IFwiODV2d1wiO1xuICAgICAgICB9XG4gICAgICAgIG5ldyBTdGF0QmxvY2tSZW5kZXJlcihcbiAgICAgICAgICAgIHRoaXMuY29udGVudEVsLFxuICAgICAgICAgICAgdGhpcy5tb25zdGVyLFxuICAgICAgICAgICAgdGhpcy5wbHVnaW4sXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICB0aGlzLnBsdWdpbi5kZWZhdWx0TGF5b3V0XG4gICAgICAgICk7XG4gICAgfVxuICAgIG9uT3BlbigpIHtcbiAgICAgICAgdGhpcy5kaXNwbGF5KCk7XG4gICAgfVxufVxuIiwgImltcG9ydCB0eXBlIHsgTW9uc3RlciB9IGZyb20gXCJAdHlwZXNcIjtcbmltcG9ydCB7IE1vZGFsLCBOb3RpY2UgfSBmcm9tIFwib2JzaWRpYW5cIjtcbmltcG9ydCB0eXBlIFN0YXRCbG9ja1BsdWdpbiBmcm9tIFwic3JjL21haW5cIjtcblxuaW1wb3J0IEVkaXRNb25zdGVyQXBwIGZyb20gXCIuL0VkaXRNb25zdGVyLnN2ZWx0ZVwiO1xuXG5leHBvcnQgY2xhc3MgRWRpdE1vbnN0ZXJNb2RhbCBleHRlbmRzIE1vZGFsIHtcbiAgICBwcml2YXRlIF9pbnN0YW5jZTogRWRpdE1vbnN0ZXJBcHA7XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgcGx1Z2luOiBTdGF0QmxvY2tQbHVnaW4sXG4gICAgICAgIHByaXZhdGUgbW9uc3RlcjogUGFydGlhbDxNb25zdGVyPiA9IHt9XG4gICAgKSB7XG4gICAgICAgIHN1cGVyKHBsdWdpbi5hcHApO1xuICAgIH1cblxuICAgIG9uT3BlbigpIHtcbiAgICAgICAgdGhpcy5faW5zdGFuY2UgPSBuZXcgRWRpdE1vbnN0ZXJBcHAoe1xuICAgICAgICAgICAgdGFyZ2V0OiB0aGlzLmNvbnRlbnRFbCxcbiAgICAgICAgICAgIHByb3BzOiB7XG4gICAgICAgICAgICAgICAgbW9uc3RlcjogdGhpcy5tb25zdGVyXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLl9pbnN0YW5jZS4kb24oXCJjYW5jZWxcIiwgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5faW5zdGFuY2UuJG9uKFwic2F2ZVwiLCBhc3luYyAoeyBkZXRhaWwgfTogeyBkZXRhaWw6IE1vbnN0ZXIgfSkgPT4ge1xuICAgICAgICAgICAgaWYgKCFkZXRhaWwubmFtZSkge1xuICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoXCJDcmVhdHVyZXMgbXVzdCBiZSBnaXZlbiBhIG5hbWUuXCIpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGF3YWl0IHRoaXMucGx1Z2luLnVwZGF0ZU1vbnN0ZXIodGhpcy5tb25zdGVyIGFzIE1vbnN0ZXIsIGRldGFpbCk7XG4gICAgICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBvbkNsb3NlKCkge31cbiAgICBjbG9zZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2luc3RhbmNlKSB0aGlzLl9pbnN0YW5jZS4kZGVzdHJveSgpO1xuICAgICAgICBzdXBlci5jbG9zZSgpO1xuICAgIH1cbn1cbiIsICI8c2NyaXB0IGxhbmc9XCJ0c1wiPlxuICAgIGltcG9ydCB7IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlciB9IGZyb20gXCJzdmVsdGVcIjtcbiAgICBpbXBvcnQgdHlwZSB7IE1vbnN0ZXIgfSBmcm9tIFwiQHR5cGVzXCI7XG4gICAgaW1wb3J0IHtcbiAgICAgICAgQnV0dG9uQ29tcG9uZW50LFxuICAgICAgICBFeHRyYUJ1dHRvbkNvbXBvbmVudCxcbiAgICAgICAgTm90aWNlLFxuICAgICAgICBwYXJzZVlhbWwsXG4gICAgICAgIHN0cmluZ2lmeVlhbWxcbiAgICB9IGZyb20gXCJvYnNpZGlhblwiO1xuXG4gICAgY29uc3QgZGlzcGF0Y2ggPSBjcmVhdGVFdmVudERpc3BhdGNoZXIoKTtcblxuICAgIGV4cG9ydCBsZXQgbW9uc3RlcjogUGFydGlhbDxNb25zdGVyPiA9IHt9O1xuICAgIGxldCB1c2VKc29uID0gZmFsc2U7XG4gICAgbGV0IHRleHRBcmVhOiBIVE1MVGV4dEFyZWFFbGVtZW50O1xuXG4gICAgY29uc3QganNvbiA9IChub2RlOiBIVE1MRWxlbWVudCkgPT4ge1xuICAgICAgICBuZXcgRXh0cmFCdXR0b25Db21wb25lbnQobm9kZSkuc2V0SWNvbihcImNvZGUtZ2x5cGhcIikuc2V0VG9vbHRpcChcIkpTT05cIik7XG4gICAgfTtcbiAgICBjb25zdCB5YW1sID0gKG5vZGU6IEhUTUxFbGVtZW50KSA9PiB7XG4gICAgICAgIG5ldyBFeHRyYUJ1dHRvbkNvbXBvbmVudChub2RlKVxuICAgICAgICAgICAgLnNldEljb24oXCJsaW5lcy1vZi10ZXh0XCIpXG4gICAgICAgICAgICAuc2V0VG9vbHRpcChcIllBTUxcIik7XG4gICAgfTtcbiAgICBjb25zdCBzYXZlID0gKG5vZGU6IEhUTUxFbGVtZW50KSA9PiB7XG4gICAgICAgIG5ldyBCdXR0b25Db21wb25lbnQobm9kZSlcbiAgICAgICAgICAgIC5zZXRJY29uKFwiY2hlY2ttYXJrXCIpXG4gICAgICAgICAgICAuc2V0VG9vbHRpcChcIlNhdmUgQ2hhbmdlc1wiKVxuICAgICAgICAgICAgLm9uQ2xpY2soKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh1c2VKc29uKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodXNlSnNvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vbnN0ZXIgPSBKU09OLnBhcnNlKHRleHRBcmVhLnZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9uc3RlciA9IHBhcnNlWWFtbCh0ZXh0QXJlYS52YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgTm90aWNlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBUaGVyZSB3YXMgYW4gZXJyb3Igc2F2aW5nIHRoZSBjcmVhdHVyZW5cXG5cXG4ke2UubWVzc2FnZX1gXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGRpc3BhdGNoKFwic2F2ZVwiLCBtb25zdGVyKTtcbiAgICAgICAgICAgIH0pO1xuICAgIH07XG4gICAgY29uc3QgY2FuY2VsID0gKG5vZGU6IEhUTUxFbGVtZW50KSA9PiB7XG4gICAgICAgIG5ldyBFeHRyYUJ1dHRvbkNvbXBvbmVudChub2RlKVxuICAgICAgICAgICAgLnNldEljb24oXCJjcm9zc1wiKVxuICAgICAgICAgICAgLnNldFRvb2x0aXAoXCJDYW5jZWxcIilcbiAgICAgICAgICAgIC5vbkNsaWNrKCgpID0+IHtcbiAgICAgICAgICAgICAgICBkaXNwYXRjaChcImNhbmNlbFwiKTtcbiAgICAgICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBnZXRNb25zdGVyVGV4dCgpIHtcbiAgICAgICAgaWYgKHVzZUpzb24pIHJldHVybiBKU09OLnN0cmluZ2lmeShtb25zdGVyLCBudWxsLCAyKTtcbiAgICAgICAgaWYgKCFtb25zdGVyIHx8ICFPYmplY3Qua2V5cyhtb25zdGVyID8/IHt9KT8ubGVuZ3RoKSByZXR1cm4gXCJcIjtcbiAgICAgICAgcmV0dXJuIHN0cmluZ2lmeVlhbWwobW9uc3RlcikudHJpbSgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldE1vbnN0ZXIoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAodXNlSnNvbikge1xuICAgICAgICAgICAgICAgIG1vbnN0ZXIgPSBKU09OLnBhcnNlKHRleHRBcmVhLnZhbHVlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbW9uc3RlciA9IHBhcnNlWWFtbCh0ZXh0QXJlYS52YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICAgIH1cbiAgICB9XG48L3NjcmlwdD5cblxuPGRpdiBjbGFzcz1cImVkaXQtbW9uc3Rlci1tb2RhbFwiPlxuICAgIDxoMj5FZGl0IE1vbnN0ZXI8L2gyPlxuICAgIDxkaXYgY2xhc3M9XCJ0b3AtbGV2ZWxcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImpzb25cIj5cbiAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICBjbGFzczphY3RpdmU9eyF1c2VKc29ufVxuICAgICAgICAgICAgICAgIHVzZTp5YW1sXG4gICAgICAgICAgICAgICAgb246Y2xpY2s9eygpID0+ICh1c2VKc29uID0gZmFsc2UpfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICBjbGFzczphY3RpdmU9e3VzZUpzb259XG4gICAgICAgICAgICAgICAgdXNlOmpzb25cbiAgICAgICAgICAgICAgICBvbjpjbGljaz17KCkgPT4gKHVzZUpzb24gPSB0cnVlKX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICB7I2tleSB1c2VKc29ufVxuICAgICAgICAgICAgPHRleHRhcmVhIGJpbmQ6dGhpcz17dGV4dEFyZWF9IG9uOmJsdXI9eygpID0+IHNldE1vbnN0ZXIoKX1cbiAgICAgICAgICAgICAgICA+e2dldE1vbnN0ZXJUZXh0KCl9PC90ZXh0YXJlYVxuICAgICAgICAgICAgPlxuICAgICAgICB7L2tleX1cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwiYnV0dG9uc1wiPlxuICAgICAgICA8ZGl2IHVzZTpzYXZlIC8+XG4gICAgICAgIDxkaXYgdXNlOmNhbmNlbCAvPlxuICAgIDwvZGl2PlxuPC9kaXY+XG5cbjxzdHlsZSBzY29wZWQ+XG4gICAgLnRvcC1sZXZlbCB7XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGZsZXgtZmxvdzogY29sdW1uIG5vd3JhcDtcbiAgICB9XG4gICAgdGV4dGFyZWEge1xuICAgICAgICBmbGV4LWdyb3c6IDE7XG4gICAgICAgIGhlaWdodDogNTAwcHg7XG4gICAgICAgIG1heC1oZWlnaHQ6IDUwdmg7XG4gICAgfVxuICAgIC5qc29uIHtcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogMXJlbTtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIH1cbiAgICAuanNvbiA+IGRpdiB7XG4gICAgICAgIGJvcmRlci1yYWRpdXM6IDRweDtcbiAgICAgICAgbWFyZ2luOiA1cHggMHB4O1xuICAgIH1cbiAgICAuYWN0aXZlIHtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tYmFja2dyb3VuZC1zZWNvbmRhcnktYWx0KTtcbiAgICB9XG5cbiAgICAuYnV0dG9ucyB7XG4gICAgICAgIG1hcmdpbi10b3A6IDFyZW07XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGp1c3RpZnktY29udGVudDogZmxleC1lbmQ7XG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgfVxuPC9zdHlsZT5cbiIsICJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlubGluZVdvcmtlcihzY3JpcHRUZXh0KSB7XG4gIGxldCBibG9iID0gbmV3IEJsb2IoW3NjcmlwdFRleHRdLCB7dHlwZTogJ3RleHQvamF2YXNjcmlwdCd9KTtcbiAgbGV0IHVybCA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG4gIGxldCB3b3JrZXIgPSBuZXcgV29ya2VyKHVybCk7XG4gIFVSTC5yZXZva2VPYmplY3RVUkwodXJsKTtcbiAgcmV0dXJuIHdvcmtlcjtcbn1cbiIsICJpbXBvcnQgaW5saW5lV29ya2VyIGZyb20gJ19faW5saW5lLXdvcmtlcidcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFdvcmtlcigpIHtcbiAgcmV0dXJuIGlubGluZVdvcmtlcihcInZhciB5bj1PYmplY3QuY3JlYXRlO3ZhciBBdD1PYmplY3QuZGVmaW5lUHJvcGVydHk7dmFyIFJuPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7dmFyIENuPU9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO3ZhciBFbj1PYmplY3QuZ2V0UHJvdG90eXBlT2YsX249T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTt2YXIgTmU9KHQsZSk9PigpPT4oZXx8dCgoZT17ZXhwb3J0czp7fX0pLmV4cG9ydHMsZSksZS5leHBvcnRzKTt2YXIgQW49KHQsZSxuLHIpPT57aWYoZSYmdHlwZW9mIGU9PVxcXCJvYmplY3RcXFwifHx0eXBlb2YgZT09XFxcImZ1bmN0aW9uXFxcIilmb3IobGV0IGkgb2YgQ24oZSkpIV9uLmNhbGwodCxpKSYmaSE9PW4mJkF0KHQsaSx7Z2V0OigpPT5lW2ldLGVudW1lcmFibGU6IShyPVJuKGUsaSkpfHxyLmVudW1lcmFibGV9KTtyZXR1cm4gdH07dmFyIFRuPSh0LGUsbik9PihuPXQhPW51bGw/eW4oRW4odCkpOnt9LEFuKGV8fCF0fHwhdC5fX2VzTW9kdWxlP0F0KG4sXFxcImRlZmF1bHRcXFwiLHt2YWx1ZTp0LGVudW1lcmFibGU6ITB9KTpuLHQpKTt2YXIgYnQ9TmUoVHQ9PntUdC5lbnRpdHlNYXA9e2x0OlxcXCI8XFxcIixndDpcXFwiPlxcXCIsYW1wOlxcXCImXFxcIixxdW90OidcXFwiJyxhcG9zOlxcXCInXFxcIixBZ3JhdmU6XFxcIlxcXFx4QzBcXFwiLEFhY3V0ZTpcXFwiXFxcXHhDMVxcXCIsQWNpcmM6XFxcIlxcXFx4QzJcXFwiLEF0aWxkZTpcXFwiXFxcXHhDM1xcXCIsQXVtbDpcXFwiXFxcXHhDNFxcXCIsQXJpbmc6XFxcIlxcXFx4QzVcXFwiLEFFbGlnOlxcXCJcXFxceEM2XFxcIixDY2VkaWw6XFxcIlxcXFx4QzdcXFwiLEVncmF2ZTpcXFwiXFxcXHhDOFxcXCIsRWFjdXRlOlxcXCJcXFxceEM5XFxcIixFY2lyYzpcXFwiXFxcXHhDQVxcXCIsRXVtbDpcXFwiXFxcXHhDQlxcXCIsSWdyYXZlOlxcXCJcXFxceENDXFxcIixJYWN1dGU6XFxcIlxcXFx4Q0RcXFwiLEljaXJjOlxcXCJcXFxceENFXFxcIixJdW1sOlxcXCJcXFxceENGXFxcIixFVEg6XFxcIlxcXFx4RDBcXFwiLE50aWxkZTpcXFwiXFxcXHhEMVxcXCIsT2dyYXZlOlxcXCJcXFxceEQyXFxcIixPYWN1dGU6XFxcIlxcXFx4RDNcXFwiLE9jaXJjOlxcXCJcXFxceEQ0XFxcIixPdGlsZGU6XFxcIlxcXFx4RDVcXFwiLE91bWw6XFxcIlxcXFx4RDZcXFwiLE9zbGFzaDpcXFwiXFxcXHhEOFxcXCIsVWdyYXZlOlxcXCJcXFxceEQ5XFxcIixVYWN1dGU6XFxcIlxcXFx4REFcXFwiLFVjaXJjOlxcXCJcXFxceERCXFxcIixVdW1sOlxcXCJcXFxceERDXFxcIixZYWN1dGU6XFxcIlxcXFx4RERcXFwiLFRIT1JOOlxcXCJcXFxceERFXFxcIixzemxpZzpcXFwiXFxcXHhERlxcXCIsYWdyYXZlOlxcXCJcXFxceEUwXFxcIixhYWN1dGU6XFxcIlxcXFx4RTFcXFwiLGFjaXJjOlxcXCJcXFxceEUyXFxcIixhdGlsZGU6XFxcIlxcXFx4RTNcXFwiLGF1bWw6XFxcIlxcXFx4RTRcXFwiLGFyaW5nOlxcXCJcXFxceEU1XFxcIixhZWxpZzpcXFwiXFxcXHhFNlxcXCIsY2NlZGlsOlxcXCJcXFxceEU3XFxcIixlZ3JhdmU6XFxcIlxcXFx4RThcXFwiLGVhY3V0ZTpcXFwiXFxcXHhFOVxcXCIsZWNpcmM6XFxcIlxcXFx4RUFcXFwiLGV1bWw6XFxcIlxcXFx4RUJcXFwiLGlncmF2ZTpcXFwiXFxcXHhFQ1xcXCIsaWFjdXRlOlxcXCJcXFxceEVEXFxcIixpY2lyYzpcXFwiXFxcXHhFRVxcXCIsaXVtbDpcXFwiXFxcXHhFRlxcXCIsZXRoOlxcXCJcXFxceEYwXFxcIixudGlsZGU6XFxcIlxcXFx4RjFcXFwiLG9ncmF2ZTpcXFwiXFxcXHhGMlxcXCIsb2FjdXRlOlxcXCJcXFxceEYzXFxcIixvY2lyYzpcXFwiXFxcXHhGNFxcXCIsb3RpbGRlOlxcXCJcXFxceEY1XFxcIixvdW1sOlxcXCJcXFxceEY2XFxcIixvc2xhc2g6XFxcIlxcXFx4RjhcXFwiLHVncmF2ZTpcXFwiXFxcXHhGOVxcXCIsdWFjdXRlOlxcXCJcXFxceEZBXFxcIix1Y2lyYzpcXFwiXFxcXHhGQlxcXCIsdXVtbDpcXFwiXFxcXHhGQ1xcXCIseWFjdXRlOlxcXCJcXFxceEZEXFxcIix0aG9ybjpcXFwiXFxcXHhGRVxcXCIseXVtbDpcXFwiXFxcXHhGRlxcXCIsbmJzcDpcXFwiXFxcXHhBMFxcXCIsaWV4Y2w6XFxcIlxcXFx4QTFcXFwiLGNlbnQ6XFxcIlxcXFx4QTJcXFwiLHBvdW5kOlxcXCJcXFxceEEzXFxcIixjdXJyZW46XFxcIlxcXFx4QTRcXFwiLHllbjpcXFwiXFxcXHhBNVxcXCIsYnJ2YmFyOlxcXCJcXFxceEE2XFxcIixzZWN0OlxcXCJcXFxceEE3XFxcIix1bWw6XFxcIlxcXFx4QThcXFwiLGNvcHk6XFxcIlxcXFx4QTlcXFwiLG9yZGY6XFxcIlxcXFx4QUFcXFwiLGxhcXVvOlxcXCJcXFxceEFCXFxcIixub3Q6XFxcIlxcXFx4QUNcXFwiLHNoeTpcXFwiXFxcXHhBRFxcXFx4QURcXFwiLHJlZzpcXFwiXFxcXHhBRVxcXCIsbWFjcjpcXFwiXFxcXHhBRlxcXCIsZGVnOlxcXCJcXFxceEIwXFxcIixwbHVzbW46XFxcIlxcXFx4QjFcXFwiLHN1cDI6XFxcIlxcXFx4QjJcXFwiLHN1cDM6XFxcIlxcXFx4QjNcXFwiLGFjdXRlOlxcXCJcXFxceEI0XFxcIixtaWNybzpcXFwiXFxcXHhCNVxcXCIscGFyYTpcXFwiXFxcXHhCNlxcXCIsbWlkZG90OlxcXCJcXFxceEI3XFxcIixjZWRpbDpcXFwiXFxcXHhCOFxcXCIsc3VwMTpcXFwiXFxcXHhCOVxcXCIsb3JkbTpcXFwiXFxcXHhCQVxcXCIscmFxdW86XFxcIlxcXFx4QkJcXFwiLGZyYWMxNDpcXFwiXFxcXHhCQ1xcXCIsZnJhYzEyOlxcXCJcXFxceEJEXFxcIixmcmFjMzQ6XFxcIlxcXFx4QkVcXFwiLGlxdWVzdDpcXFwiXFxcXHhCRlxcXCIsdGltZXM6XFxcIlxcXFx4RDdcXFwiLGRpdmlkZTpcXFwiXFxcXHhGN1xcXCIsZm9yYWxsOlxcXCJcXFxcdTIyMDBcXFwiLHBhcnQ6XFxcIlxcXFx1MjIwMlxcXCIsZXhpc3Q6XFxcIlxcXFx1MjIwM1xcXCIsZW1wdHk6XFxcIlxcXFx1MjIwNVxcXCIsbmFibGE6XFxcIlxcXFx1MjIwN1xcXCIsaXNpbjpcXFwiXFxcXHUyMjA4XFxcIixub3RpbjpcXFwiXFxcXHUyMjA5XFxcIixuaTpcXFwiXFxcXHUyMjBCXFxcIixwcm9kOlxcXCJcXFxcdTIyMEZcXFwiLHN1bTpcXFwiXFxcXHUyMjExXFxcIixtaW51czpcXFwiXFxcXHUyMjEyXFxcIixsb3dhc3Q6XFxcIlxcXFx1MjIxN1xcXCIscmFkaWM6XFxcIlxcXFx1MjIxQVxcXCIscHJvcDpcXFwiXFxcXHUyMjFEXFxcIixpbmZpbjpcXFwiXFxcXHUyMjFFXFxcIixhbmc6XFxcIlxcXFx1MjIyMFxcXCIsYW5kOlxcXCJcXFxcdTIyMjdcXFwiLG9yOlxcXCJcXFxcdTIyMjhcXFwiLGNhcDpcXFwiXFxcXHUyMjI5XFxcIixjdXA6XFxcIlxcXFx1MjIyQVxcXCIsaW50OlxcXCJcXFxcdTIyMkJcXFwiLHRoZXJlNDpcXFwiXFxcXHUyMjM0XFxcIixzaW06XFxcIlxcXFx1MjIzQ1xcXCIsY29uZzpcXFwiXFxcXHUyMjQ1XFxcIixhc3ltcDpcXFwiXFxcXHUyMjQ4XFxcIixuZTpcXFwiXFxcXHUyMjYwXFxcIixlcXVpdjpcXFwiXFxcXHUyMjYxXFxcIixsZTpcXFwiXFxcXHUyMjY0XFxcIixnZTpcXFwiXFxcXHUyMjY1XFxcIixzdWI6XFxcIlxcXFx1MjI4MlxcXCIsc3VwOlxcXCJcXFxcdTIyODNcXFwiLG5zdWI6XFxcIlxcXFx1MjI4NFxcXCIsc3ViZTpcXFwiXFxcXHUyMjg2XFxcIixzdXBlOlxcXCJcXFxcdTIyODdcXFwiLG9wbHVzOlxcXCJcXFxcdTIyOTVcXFwiLG90aW1lczpcXFwiXFxcXHUyMjk3XFxcIixwZXJwOlxcXCJcXFxcdTIyQTVcXFwiLHNkb3Q6XFxcIlxcXFx1MjJDNVxcXCIsQWxwaGE6XFxcIlxcXFx1MDM5MVxcXCIsQmV0YTpcXFwiXFxcXHUwMzkyXFxcIixHYW1tYTpcXFwiXFxcXHUwMzkzXFxcIixEZWx0YTpcXFwiXFxcXHUwMzk0XFxcIixFcHNpbG9uOlxcXCJcXFxcdTAzOTVcXFwiLFpldGE6XFxcIlxcXFx1MDM5NlxcXCIsRXRhOlxcXCJcXFxcdTAzOTdcXFwiLFRoZXRhOlxcXCJcXFxcdTAzOThcXFwiLElvdGE6XFxcIlxcXFx1MDM5OVxcXCIsS2FwcGE6XFxcIlxcXFx1MDM5QVxcXCIsTGFtYmRhOlxcXCJcXFxcdTAzOUJcXFwiLE11OlxcXCJcXFxcdTAzOUNcXFwiLE51OlxcXCJcXFxcdTAzOURcXFwiLFhpOlxcXCJcXFxcdTAzOUVcXFwiLE9taWNyb246XFxcIlxcXFx1MDM5RlxcXCIsUGk6XFxcIlxcXFx1MDNBMFxcXCIsUmhvOlxcXCJcXFxcdTAzQTFcXFwiLFNpZ21hOlxcXCJcXFxcdTAzQTNcXFwiLFRhdTpcXFwiXFxcXHUwM0E0XFxcIixVcHNpbG9uOlxcXCJcXFxcdTAzQTVcXFwiLFBoaTpcXFwiXFxcXHUwM0E2XFxcIixDaGk6XFxcIlxcXFx1MDNBN1xcXCIsUHNpOlxcXCJcXFxcdTAzQThcXFwiLE9tZWdhOlxcXCJcXFxcdTAzQTlcXFwiLGFscGhhOlxcXCJcXFxcdTAzQjFcXFwiLGJldGE6XFxcIlxcXFx1MDNCMlxcXCIsZ2FtbWE6XFxcIlxcXFx1MDNCM1xcXCIsZGVsdGE6XFxcIlxcXFx1MDNCNFxcXCIsZXBzaWxvbjpcXFwiXFxcXHUwM0I1XFxcIix6ZXRhOlxcXCJcXFxcdTAzQjZcXFwiLGV0YTpcXFwiXFxcXHUwM0I3XFxcIix0aGV0YTpcXFwiXFxcXHUwM0I4XFxcIixpb3RhOlxcXCJcXFxcdTAzQjlcXFwiLGthcHBhOlxcXCJcXFxcdTAzQkFcXFwiLGxhbWJkYTpcXFwiXFxcXHUwM0JCXFxcIixtdTpcXFwiXFxcXHUwM0JDXFxcIixudTpcXFwiXFxcXHUwM0JEXFxcIix4aTpcXFwiXFxcXHUwM0JFXFxcIixvbWljcm9uOlxcXCJcXFxcdTAzQkZcXFwiLHBpOlxcXCJcXFxcdTAzQzBcXFwiLHJobzpcXFwiXFxcXHUwM0MxXFxcIixzaWdtYWY6XFxcIlxcXFx1MDNDMlxcXCIsc2lnbWE6XFxcIlxcXFx1MDNDM1xcXCIsdGF1OlxcXCJcXFxcdTAzQzRcXFwiLHVwc2lsb246XFxcIlxcXFx1MDNDNVxcXCIscGhpOlxcXCJcXFxcdTAzQzZcXFwiLGNoaTpcXFwiXFxcXHUwM0M3XFxcIixwc2k6XFxcIlxcXFx1MDNDOFxcXCIsb21lZ2E6XFxcIlxcXFx1MDNDOVxcXCIsdGhldGFzeW06XFxcIlxcXFx1MDNEMVxcXCIsdXBzaWg6XFxcIlxcXFx1MDNEMlxcXCIscGl2OlxcXCJcXFxcdTAzRDZcXFwiLE9FbGlnOlxcXCJcXFxcdTAxNTJcXFwiLG9lbGlnOlxcXCJcXFxcdTAxNTNcXFwiLFNjYXJvbjpcXFwiXFxcXHUwMTYwXFxcIixzY2Fyb246XFxcIlxcXFx1MDE2MVxcXCIsWXVtbDpcXFwiXFxcXHUwMTc4XFxcIixmbm9mOlxcXCJcXFxcdTAxOTJcXFwiLGNpcmM6XFxcIlxcXFx1MDJDNlxcXCIsdGlsZGU6XFxcIlxcXFx1MDJEQ1xcXCIsZW5zcDpcXFwiXFxcXHUyMDAyXFxcIixlbXNwOlxcXCJcXFxcdTIwMDNcXFwiLHRoaW5zcDpcXFwiXFxcXHUyMDA5XFxcIix6d25qOlxcXCJcXFxcdTIwMENcXFwiLHp3ajpcXFwiXFxcXHUyMDBEXFxcIixscm06XFxcIlxcXFx1MjAwRVxcXCIscmxtOlxcXCJcXFxcdTIwMEZcXFwiLG5kYXNoOlxcXCJcXFxcdTIwMTNcXFwiLG1kYXNoOlxcXCJcXFxcdTIwMTRcXFwiLGxzcXVvOlxcXCJcXFxcdTIwMThcXFwiLHJzcXVvOlxcXCJcXFxcdTIwMTlcXFwiLHNicXVvOlxcXCJcXFxcdTIwMUFcXFwiLGxkcXVvOlxcXCJcXFxcdTIwMUNcXFwiLHJkcXVvOlxcXCJcXFxcdTIwMURcXFwiLGJkcXVvOlxcXCJcXFxcdTIwMUVcXFwiLGRhZ2dlcjpcXFwiXFxcXHUyMDIwXFxcIixEYWdnZXI6XFxcIlxcXFx1MjAyMVxcXCIsYnVsbDpcXFwiXFxcXHUyMDIyXFxcIixoZWxsaXA6XFxcIlxcXFx1MjAyNlxcXCIscGVybWlsOlxcXCJcXFxcdTIwMzBcXFwiLHByaW1lOlxcXCJcXFxcdTIwMzJcXFwiLFByaW1lOlxcXCJcXFxcdTIwMzNcXFwiLGxzYXF1bzpcXFwiXFxcXHUyMDM5XFxcIixyc2FxdW86XFxcIlxcXFx1MjAzQVxcXCIsb2xpbmU6XFxcIlxcXFx1MjAzRVxcXCIsZXVybzpcXFwiXFxcXHUyMEFDXFxcIix0cmFkZTpcXFwiXFxcXHUyMTIyXFxcIixsYXJyOlxcXCJcXFxcdTIxOTBcXFwiLHVhcnI6XFxcIlxcXFx1MjE5MVxcXCIscmFycjpcXFwiXFxcXHUyMTkyXFxcIixkYXJyOlxcXCJcXFxcdTIxOTNcXFwiLGhhcnI6XFxcIlxcXFx1MjE5NFxcXCIsY3JhcnI6XFxcIlxcXFx1MjFCNVxcXCIsbGNlaWw6XFxcIlxcXFx1MjMwOFxcXCIscmNlaWw6XFxcIlxcXFx1MjMwOVxcXCIsbGZsb29yOlxcXCJcXFxcdTIzMEFcXFwiLHJmbG9vcjpcXFwiXFxcXHUyMzBCXFxcIixsb3o6XFxcIlxcXFx1MjVDQVxcXCIsc3BhZGVzOlxcXCJcXFxcdTI2NjBcXFwiLGNsdWJzOlxcXCJcXFxcdTI2NjNcXFwiLGhlYXJ0czpcXFwiXFxcXHUyNjY1XFxcIixkaWFtczpcXFwiXFxcXHUyNjY2XFxcIn19KTt2YXIgSXQ9TmUoTGU9Pnt2YXIgVWU9L1tBLVpfYS16XFxcXHhDMC1cXFxceEQ2XFxcXHhEOC1cXFxceEY2XFxcXHUwMEY4LVxcXFx1MDJGRlxcXFx1MDM3MC1cXFxcdTAzN0RcXFxcdTAzN0YtXFxcXHUxRkZGXFxcXHUyMDBDLVxcXFx1MjAwRFxcXFx1MjA3MC1cXFxcdTIxOEZcXFxcdTJDMDAtXFxcXHUyRkVGXFxcXHUzMDAxLVxcXFx1RDdGRlxcXFx1RjkwMC1cXFxcdUZEQ0ZcXFxcdUZERjAtXFxcXHVGRkZEXS8sTnQ9bmV3IFJlZ0V4cChcXFwiW1xcXFxcXFxcLVxcXFxcXFxcLjAtOVxcXCIrVWUuc291cmNlLnNsaWNlKDEsLTEpK1xcXCJcXFxcXFxcXHUwMEI3XFxcXFxcXFx1MDMwMC1cXFxcXFxcXHUwMzZGXFxcXFxcXFx1MjAzRi1cXFxcXFxcXHUyMDQwXVxcXCIpLHd0PW5ldyBSZWdFeHAoXFxcIl5cXFwiK1VlLnNvdXJjZStOdC5zb3VyY2UrXFxcIiooPzo6XFxcIitVZS5zb3VyY2UrTnQuc291cmNlK1xcXCIqKT8kXFxcIiksaGU9MCxxPTEsbmU9MixnZT0zLHJlPTQsaWU9NSxkZT02LHdlPTc7ZnVuY3Rpb24gc2UodCxlKXt0aGlzLm1lc3NhZ2U9dCx0aGlzLmxvY2F0b3I9ZSxFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSYmRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcyxzZSl9c2UucHJvdG90eXBlPW5ldyBFcnJvcjtzZS5wcm90b3R5cGUubmFtZT1zZS5uYW1lO2Z1bmN0aW9uIHh0KCl7fXh0LnByb3RvdHlwZT17cGFyc2U6ZnVuY3Rpb24odCxlLG4pe3ZhciByPXRoaXMuZG9tQnVpbGRlcjtyLnN0YXJ0RG9jdW1lbnQoKSxNdChlLGU9e30pLGJuKHQsZSxuLHIsdGhpcy5lcnJvckhhbmRsZXIpLHIuZW5kRG9jdW1lbnQoKX19O2Z1bmN0aW9uIGJuKHQsZSxuLHIsaSl7ZnVuY3Rpb24gcyhBKXtpZihBPjY1NTM1KXtBLT02NTUzNjt2YXIgZz01NTI5NisoQT4+MTApLGVlPTU2MzIwKyhBJjEwMjMpO3JldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGcsZWUpfWVsc2UgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoQSl9ZnVuY3Rpb24gbyhBKXt2YXIgZz1BLnNsaWNlKDEsLTEpO3JldHVybiBnIGluIG4/bltnXTpnLmNoYXJBdCgwKT09PVxcXCIjXFxcIj9zKHBhcnNlSW50KGcuc3Vic3RyKDEpLnJlcGxhY2UoXFxcInhcXFwiLFxcXCIweFxcXCIpKSk6KGkuZXJyb3IoXFxcImVudGl0eSBub3QgZm91bmQ6XFxcIitBKSxBKX1mdW5jdGlvbiBsKEEpe2lmKEE+Qyl7dmFyIGc9dC5zdWJzdHJpbmcoQyxBKS5yZXBsYWNlKC8mIz9cXFxcdys7L2csbyk7UyYmdShDKSxyLmNoYXJhY3RlcnMoZywwLEEtQyksQz1BfX1mdW5jdGlvbiB1KEEsZyl7Zm9yKDtBPj1mJiYoZz1oLmV4ZWModCkpOylhPWcuaW5kZXgsZj1hK2dbMF0ubGVuZ3RoLFMubGluZU51bWJlcisrO1MuY29sdW1uTnVtYmVyPUEtYSsxfWZvcih2YXIgYT0wLGY9MCxoPS8uKig/OlxcXFxyXFxcXG4/fFxcXFxuKXwuKiQvZyxTPXIubG9jYXRvcixfPVt7Y3VycmVudE5TTWFwOmV9XSx5PXt9LEM9MDs7KXt0cnl7dmFyIHY9dC5pbmRleE9mKFxcXCI8XFxcIixDKTtpZih2PDApe2lmKCF0LnN1YnN0cihDKS5tYXRjaCgvXlxcXFxzKiQvKSl7dmFyIE09ci5kb2MsUD1NLmNyZWF0ZVRleHROb2RlKHQuc3Vic3RyKEMpKTtNLmFwcGVuZENoaWxkKFApLHIuY3VycmVudEVsZW1lbnQ9UH1yZXR1cm59c3dpdGNoKHY+QyYmbCh2KSx0LmNoYXJBdCh2KzEpKXtjYXNlXFxcIi9cXFwiOnZhciBiPXQuaW5kZXhPZihcXFwiPlxcXCIsdiszKSxSPXQuc3Vic3RyaW5nKHYrMixiKSx3PV8ucG9wKCk7YjwwPyhSPXQuc3Vic3RyaW5nKHYrMikucmVwbGFjZSgvW1xcXFxzPF0uKi8sXFxcIlxcXCIpLGkuZXJyb3IoXFxcImVuZCB0YWcgbmFtZTogXFxcIitSK1xcXCIgaXMgbm90IGNvbXBsZXRlOlxcXCIrdy50YWdOYW1lKSxiPXYrMStSLmxlbmd0aCk6Ui5tYXRjaCgvXFxcXHM8LykmJihSPVIucmVwbGFjZSgvW1xcXFxzPF0uKi8sXFxcIlxcXCIpLGkuZXJyb3IoXFxcImVuZCB0YWcgbmFtZTogXFxcIitSK1xcXCIgbWF5YmUgbm90IGNvbXBsZXRlXFxcIiksYj12KzErUi5sZW5ndGgpO3ZhciBXPXcubG9jYWxOU01hcCxkPXcudGFnTmFtZT09UixHPWR8fHcudGFnTmFtZSYmdy50YWdOYW1lLnRvTG93ZXJDYXNlKCk9PVIudG9Mb3dlckNhc2UoKTtpZihHKXtpZihyLmVuZEVsZW1lbnQody51cmksdy5sb2NhbE5hbWUsUiksVylmb3IodmFyIGsgaW4gVylyLmVuZFByZWZpeE1hcHBpbmcoayk7ZHx8aS5mYXRhbEVycm9yKFxcXCJlbmQgdGFnIG5hbWU6IFxcXCIrUitcXFwiIGlzIG5vdCBtYXRjaCB0aGUgY3VycmVudCBzdGFydCB0YWdOYW1lOlxcXCIrdy50YWdOYW1lKX1lbHNlIF8ucHVzaCh3KTtiKys7YnJlYWs7Y2FzZVxcXCI/XFxcIjpTJiZ1KHYpLGI9eG4odCx2LHIpO2JyZWFrO2Nhc2VcXFwiIVxcXCI6UyYmdSh2KSxiPSRuKHQsdixyLGkpO2JyZWFrO2RlZmF1bHQ6UyYmdSh2KTt2YXIgTj1uZXcgT3QsTD1fW18ubGVuZ3RoLTFdLmN1cnJlbnROU01hcCxiPU5uKHQsdixOLEwsbyxpKSxZPU4ubGVuZ3RoO2lmKCFOLmNsb3NlZCYmRG4odCxiLE4udGFnTmFtZSx5KSYmKE4uY2xvc2VkPSEwLG4ubmJzcHx8aS53YXJuaW5nKFxcXCJ1bmNsb3NlZCB4bWwgYXR0cmlidXRlXFxcIikpLFMmJlkpe2Zvcih2YXIgSj1EdChTLHt9KSxWPTA7VjxZO1YrKyl7dmFyIEI9TltWXTt1KEIub2Zmc2V0KSxCLmxvY2F0b3I9RHQoUyx7fSl9ci5sb2NhdG9yPUosJHQoTixyLEwpJiZfLnB1c2goTiksci5sb2NhdG9yPVN9ZWxzZSAkdChOLHIsTCkmJl8ucHVzaChOKTtOLnVyaT09PVxcXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXFxcIiYmIU4uY2xvc2VkP2I9d24odCxiLE4udGFnTmFtZSxvLHIpOmIrK319Y2F0Y2goQSl7aWYoQSBpbnN0YW5jZW9mIHNlKXRocm93IEE7aS5lcnJvcihcXFwiZWxlbWVudCBwYXJzZSBlcnJvcjogXFxcIitBKSxiPS0xfWI+Qz9DPWI6bChNYXRoLm1heCh2LEMpKzEpfX1mdW5jdGlvbiBEdCh0LGUpe3JldHVybiBlLmxpbmVOdW1iZXI9dC5saW5lTnVtYmVyLGUuY29sdW1uTnVtYmVyPXQuY29sdW1uTnVtYmVyLGV9ZnVuY3Rpb24gTm4odCxlLG4scixpLHMpe2Z1bmN0aW9uIG8oXyx5LEMpe18gaW4gbi5hdHRyaWJ1dGVOYW1lcyYmcy5mYXRhbEVycm9yKFxcXCJBdHRyaWJ1dGUgXFxcIitfK1xcXCIgcmVkZWZpbmVkXFxcIiksbi5hZGRWYWx1ZShfLHksQyl9Zm9yKHZhciBsLHUsYT0rK2UsZj1oZTs7KXt2YXIgaD10LmNoYXJBdChhKTtzd2l0Y2goaCl7Y2FzZVxcXCI9XFxcIjppZihmPT09cSlsPXQuc2xpY2UoZSxhKSxmPWdlO2Vsc2UgaWYoZj09PW5lKWY9Z2U7ZWxzZSB0aHJvdyBuZXcgRXJyb3IoXFxcImF0dHJpYnV0ZSBlcXVhbCBtdXN0IGFmdGVyIGF0dHJOYW1lXFxcIik7YnJlYWs7Y2FzZVxcXCInXFxcIjpjYXNlJ1xcXCInOmlmKGY9PT1nZXx8Zj09PXEpaWYoZj09PXEmJihzLndhcm5pbmcoJ2F0dHJpYnV0ZSB2YWx1ZSBtdXN0IGFmdGVyIFxcXCI9XFxcIicpLGw9dC5zbGljZShlLGEpKSxlPWErMSxhPXQuaW5kZXhPZihoLGUpLGE+MCl1PXQuc2xpY2UoZSxhKS5yZXBsYWNlKC8mIz9cXFxcdys7L2csaSksbyhsLHUsZS0xKSxmPWllO2Vsc2UgdGhyb3cgbmV3IEVycm9yKFxcXCJhdHRyaWJ1dGUgdmFsdWUgbm8gZW5kICdcXFwiK2grXFxcIicgbWF0Y2hcXFwiKTtlbHNlIGlmKGY9PXJlKXU9dC5zbGljZShlLGEpLnJlcGxhY2UoLyYjP1xcXFx3KzsvZyxpKSxvKGwsdSxlKSxzLndhcm5pbmcoJ2F0dHJpYnV0ZSBcXFwiJytsKydcXFwiIG1pc3NlZCBzdGFydCBxdW90KCcraCtcXFwiKSEhXFxcIiksZT1hKzEsZj1pZTtlbHNlIHRocm93IG5ldyBFcnJvcignYXR0cmlidXRlIHZhbHVlIG11c3QgYWZ0ZXIgXFxcIj1cXFwiJyk7YnJlYWs7Y2FzZVxcXCIvXFxcIjpzd2l0Y2goZil7Y2FzZSBoZTpuLnNldFRhZ05hbWUodC5zbGljZShlLGEpKTtjYXNlIGllOmNhc2UgZGU6Y2FzZSB3ZTpmPXdlLG4uY2xvc2VkPSEwO2Nhc2UgcmU6Y2FzZSBxOmNhc2UgbmU6YnJlYWs7ZGVmYXVsdDp0aHJvdyBuZXcgRXJyb3IoXFxcImF0dHJpYnV0ZSBpbnZhbGlkIGNsb3NlIGNoYXIoJy8nKVxcXCIpfWJyZWFrO2Nhc2VcXFwiXFxcIjpyZXR1cm4gcy5lcnJvcihcXFwidW5leHBlY3RlZCBlbmQgb2YgaW5wdXRcXFwiKSxmPT1oZSYmbi5zZXRUYWdOYW1lKHQuc2xpY2UoZSxhKSksYTtjYXNlXFxcIj5cXFwiOnN3aXRjaChmKXtjYXNlIGhlOm4uc2V0VGFnTmFtZSh0LnNsaWNlKGUsYSkpO2Nhc2UgaWU6Y2FzZSBkZTpjYXNlIHdlOmJyZWFrO2Nhc2UgcmU6Y2FzZSBxOnU9dC5zbGljZShlLGEpLHUuc2xpY2UoLTEpPT09XFxcIi9cXFwiJiYobi5jbG9zZWQ9ITAsdT11LnNsaWNlKDAsLTEpKTtjYXNlIG5lOmY9PT1uZSYmKHU9bCksZj09cmU/KHMud2FybmluZygnYXR0cmlidXRlIFxcXCInK3UrJ1xcXCIgbWlzc2VkIHF1b3QoXFxcIikhJyksbyhsLHUucmVwbGFjZSgvJiM/XFxcXHcrOy9nLGkpLGUpKTooKHJbXFxcIlxcXCJdIT09XFxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcXFwifHwhdS5tYXRjaCgvXig/OmRpc2FibGVkfGNoZWNrZWR8c2VsZWN0ZWQpJC9pKSkmJnMud2FybmluZygnYXR0cmlidXRlIFxcXCInK3UrJ1xcXCIgbWlzc2VkIHZhbHVlISEgXFxcIicrdSsnXFxcIiBpbnN0ZWFkISEnKSxvKHUsdSxlKSk7YnJlYWs7Y2FzZSBnZTp0aHJvdyBuZXcgRXJyb3IoXFxcImF0dHJpYnV0ZSB2YWx1ZSBtaXNzZWQhIVxcXCIpfXJldHVybiBhO2Nhc2VcXFwiXFxcXHg4MFxcXCI6aD1cXFwiIFxcXCI7ZGVmYXVsdDppZihoPD1cXFwiIFxcXCIpc3dpdGNoKGYpe2Nhc2UgaGU6bi5zZXRUYWdOYW1lKHQuc2xpY2UoZSxhKSksZj1kZTticmVhaztjYXNlIHE6bD10LnNsaWNlKGUsYSksZj1uZTticmVhaztjYXNlIHJlOnZhciB1PXQuc2xpY2UoZSxhKS5yZXBsYWNlKC8mIz9cXFxcdys7L2csaSk7cy53YXJuaW5nKCdhdHRyaWJ1dGUgXFxcIicrdSsnXFxcIiBtaXNzZWQgcXVvdChcXFwiKSEhJyksbyhsLHUsZSk7Y2FzZSBpZTpmPWRlO2JyZWFrfWVsc2Ugc3dpdGNoKGYpe2Nhc2UgbmU6dmFyIFM9bi50YWdOYW1lOyhyW1xcXCJcXFwiXSE9PVxcXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXFxcInx8IWwubWF0Y2goL14oPzpkaXNhYmxlZHxjaGVja2VkfHNlbGVjdGVkKSQvaSkpJiZzLndhcm5pbmcoJ2F0dHJpYnV0ZSBcXFwiJytsKydcXFwiIG1pc3NlZCB2YWx1ZSEhIFxcXCInK2wrJ1xcXCIgaW5zdGVhZDIhIScpLG8obCxsLGUpLGU9YSxmPXE7YnJlYWs7Y2FzZSBpZTpzLndhcm5pbmcoJ2F0dHJpYnV0ZSBzcGFjZSBpcyByZXF1aXJlZFxcXCInK2wrJ1xcXCIhIScpO2Nhc2UgZGU6Zj1xLGU9YTticmVhaztjYXNlIGdlOmY9cmUsZT1hO2JyZWFrO2Nhc2Ugd2U6dGhyb3cgbmV3IEVycm9yKFxcXCJlbGVtZW50cyBjbG9zZWQgY2hhcmFjdGVyICcvJyBhbmQgJz4nIG11c3QgYmUgY29ubmVjdGVkIHRvXFxcIil9fWErK319ZnVuY3Rpb24gJHQodCxlLG4pe2Zvcih2YXIgcj10LnRhZ05hbWUsaT1udWxsLGg9dC5sZW5ndGg7aC0tOyl7dmFyIHM9dFtoXSxvPXMucU5hbWUsbD1zLnZhbHVlLFM9by5pbmRleE9mKFxcXCI6XFxcIik7aWYoUz4wKXZhciB1PXMucHJlZml4PW8uc2xpY2UoMCxTKSxhPW8uc2xpY2UoUysxKSxmPXU9PT1cXFwieG1sbnNcXFwiJiZhO2Vsc2UgYT1vLHU9bnVsbCxmPW89PT1cXFwieG1sbnNcXFwiJiZcXFwiXFxcIjtzLmxvY2FsTmFtZT1hLGYhPT0hMSYmKGk9PW51bGwmJihpPXt9LE10KG4sbj17fSkpLG5bZl09aVtmXT1sLHMudXJpPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3htbG5zL1xcXCIsZS5zdGFydFByZWZpeE1hcHBpbmcoZixsKSl9Zm9yKHZhciBoPXQubGVuZ3RoO2gtLTspe3M9dFtoXTt2YXIgdT1zLnByZWZpeDt1JiYodT09PVxcXCJ4bWxcXFwiJiYocy51cmk9XFxcImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZVxcXCIpLHUhPT1cXFwieG1sbnNcXFwiJiYocy51cmk9blt1fHxcXFwiXFxcIl0pKX12YXIgUz1yLmluZGV4T2YoXFxcIjpcXFwiKTtTPjA/KHU9dC5wcmVmaXg9ci5zbGljZSgwLFMpLGE9dC5sb2NhbE5hbWU9ci5zbGljZShTKzEpKToodT1udWxsLGE9dC5sb2NhbE5hbWU9cik7dmFyIF89dC51cmk9blt1fHxcXFwiXFxcIl07aWYoZS5zdGFydEVsZW1lbnQoXyxhLHIsdCksdC5jbG9zZWQpe2lmKGUuZW5kRWxlbWVudChfLGEsciksaSlmb3IodSBpbiBpKWUuZW5kUHJlZml4TWFwcGluZyh1KX1lbHNlIHJldHVybiB0LmN1cnJlbnROU01hcD1uLHQubG9jYWxOU01hcD1pLCEwfWZ1bmN0aW9uIHduKHQsZSxuLHIsaSl7aWYoL14oPzpzY3JpcHR8dGV4dGFyZWEpJC9pLnRlc3Qobikpe3ZhciBzPXQuaW5kZXhPZihcXFwiPC9cXFwiK24rXFxcIj5cXFwiLGUpLG89dC5zdWJzdHJpbmcoZSsxLHMpO2lmKC9bJjxdLy50ZXN0KG8pKXJldHVybi9ec2NyaXB0JC9pLnRlc3Qobik/KGkuY2hhcmFjdGVycyhvLDAsby5sZW5ndGgpLHMpOihvPW8ucmVwbGFjZSgvJiM/XFxcXHcrOy9nLHIpLGkuY2hhcmFjdGVycyhvLDAsby5sZW5ndGgpLHMpfXJldHVybiBlKzF9ZnVuY3Rpb24gRG4odCxlLG4scil7dmFyIGk9cltuXTtyZXR1cm4gaT09bnVsbCYmKGk9dC5sYXN0SW5kZXhPZihcXFwiPC9cXFwiK24rXFxcIj5cXFwiKSxpPGUmJihpPXQubGFzdEluZGV4T2YoXFxcIjwvXFxcIituKSkscltuXT1pKSxpPGV9ZnVuY3Rpb24gTXQodCxlKXtmb3IodmFyIG4gaW4gdCllW25dPXRbbl19ZnVuY3Rpb24gJG4odCxlLG4scil7dmFyIGk9dC5jaGFyQXQoZSsyKTtzd2l0Y2goaSl7Y2FzZVxcXCItXFxcIjppZih0LmNoYXJBdChlKzMpPT09XFxcIi1cXFwiKXt2YXIgcz10LmluZGV4T2YoXFxcIi0tPlxcXCIsZSs0KTtyZXR1cm4gcz5lPyhuLmNvbW1lbnQodCxlKzQscy1lLTQpLHMrMyk6KHIuZXJyb3IoXFxcIlVuY2xvc2VkIGNvbW1lbnRcXFwiKSwtMSl9ZWxzZSByZXR1cm4tMTtkZWZhdWx0OmlmKHQuc3Vic3RyKGUrMyw2KT09XFxcIkNEQVRBW1xcXCIpe3ZhciBzPXQuaW5kZXhPZihcXFwiXV0+XFxcIixlKzkpO3JldHVybiBuLnN0YXJ0Q0RBVEEoKSxuLmNoYXJhY3RlcnModCxlKzkscy1lLTkpLG4uZW5kQ0RBVEEoKSxzKzN9dmFyIG89TW4odCxlKSxsPW8ubGVuZ3RoO2lmKGw+MSYmLyFkb2N0eXBlL2kudGVzdChvWzBdWzBdKSl7dmFyIHU9b1sxXVswXSxhPSExLGY9ITE7bD4zJiYoL15wdWJsaWMkL2kudGVzdChvWzJdWzBdKT8oYT1vWzNdWzBdLGY9bD40JiZvWzRdWzBdKTovXnN5c3RlbSQvaS50ZXN0KG9bMl1bMF0pJiYoZj1vWzNdWzBdKSk7dmFyIGg9b1tsLTFdO3JldHVybiBuLnN0YXJ0RFREKHUsYSxmKSxuLmVuZERURCgpLGguaW5kZXgraFswXS5sZW5ndGh9fXJldHVybi0xfWZ1bmN0aW9uIHhuKHQsZSxuKXt2YXIgcj10LmluZGV4T2YoXFxcIj8+XFxcIixlKTtpZihyKXt2YXIgaT10LnN1YnN0cmluZyhlLHIpLm1hdGNoKC9ePFxcXFw/KFxcXFxTKilcXFxccyooW1xcXFxzXFxcXFNdKj8pXFxcXHMqJC8pO2lmKGkpe3ZhciBzPWlbMF0ubGVuZ3RoO3JldHVybiBuLnByb2Nlc3NpbmdJbnN0cnVjdGlvbihpWzFdLGlbMl0pLHIrMn1lbHNlIHJldHVybi0xfXJldHVybi0xfWZ1bmN0aW9uIE90KCl7dGhpcy5hdHRyaWJ1dGVOYW1lcz17fX1PdC5wcm90b3R5cGU9e3NldFRhZ05hbWU6ZnVuY3Rpb24odCl7aWYoIXd0LnRlc3QodCkpdGhyb3cgbmV3IEVycm9yKFxcXCJpbnZhbGlkIHRhZ05hbWU6XFxcIit0KTt0aGlzLnRhZ05hbWU9dH0sYWRkVmFsdWU6ZnVuY3Rpb24odCxlLG4pe2lmKCF3dC50ZXN0KHQpKXRocm93IG5ldyBFcnJvcihcXFwiaW52YWxpZCBhdHRyaWJ1dGU6XFxcIit0KTt0aGlzLmF0dHJpYnV0ZU5hbWVzW3RdPXRoaXMubGVuZ3RoLHRoaXNbdGhpcy5sZW5ndGgrK109e3FOYW1lOnQsdmFsdWU6ZSxvZmZzZXQ6bn19LGxlbmd0aDowLGdldExvY2FsTmFtZTpmdW5jdGlvbih0KXtyZXR1cm4gdGhpc1t0XS5sb2NhbE5hbWV9LGdldExvY2F0b3I6ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXNbdF0ubG9jYXRvcn0sZ2V0UU5hbWU6ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXNbdF0ucU5hbWV9LGdldFVSSTpmdW5jdGlvbih0KXtyZXR1cm4gdGhpc1t0XS51cml9LGdldFZhbHVlOmZ1bmN0aW9uKHQpe3JldHVybiB0aGlzW3RdLnZhbHVlfX07ZnVuY3Rpb24gTW4odCxlKXt2YXIgbixyPVtdLGk9LydbXiddKyd8XFxcIlteXFxcIl0rXFxcInxbXlxcXFxzPD5cXFxcLz1dKz0/fChcXFxcLz9cXFxccyo+fDwpL2c7Zm9yKGkubGFzdEluZGV4PWUsaS5leGVjKHQpO249aS5leGVjKHQpOylpZihyLnB1c2gobiksblsxXSlyZXR1cm4gcn1MZS5YTUxSZWFkZXI9eHQ7TGUuUGFyc2VFcnJvcj1zZX0pO3ZhciBYZT1OZShDZT0+e2Z1bmN0aW9uIHZlKHQsZSl7Zm9yKHZhciBuIGluIHQpZVtuXT10W25dfWZ1bmN0aW9uIEYodCxlKXt2YXIgbj10LnByb3RvdHlwZTtpZighKG4gaW5zdGFuY2VvZiBlKSl7bGV0IGk9ZnVuY3Rpb24oKXt9O3ZhciByPWk7aS5wcm90b3R5cGU9ZS5wcm90b3R5cGUsaT1uZXcgaSx2ZShuLGkpLHQucHJvdG90eXBlPW49aX1uLmNvbnN0cnVjdG9yIT10JiYodHlwZW9mIHQhPVxcXCJmdW5jdGlvblxcXCImJmNvbnNvbGUuZXJyb3IoXFxcInVua25vdyBDbGFzczpcXFwiK3QpLG4uY29uc3RydWN0b3I9dCl9dmFyIE9uPVxcXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXFxcIixVPXt9LGo9VS5FTEVNRU5UX05PREU9MSxvZT1VLkFUVFJJQlVURV9OT0RFPTIsRGU9VS5URVhUX05PREU9MyxXdD1VLkNEQVRBX1NFQ1RJT05fTk9ERT00LEd0PVUuRU5USVRZX1JFRkVSRU5DRV9OT0RFPTUsSW49VS5FTlRJVFlfTk9ERT02LGp0PVUuUFJPQ0VTU0lOR19JTlNUUlVDVElPTl9OT0RFPTcsQnQ9VS5DT01NRU5UX05PREU9OCxWdD1VLkRPQ1VNRU5UX05PREU9OSx6dD1VLkRPQ1VNRU5UX1RZUEVfTk9ERT0xMCx6PVUuRE9DVU1FTlRfRlJBR01FTlRfTk9ERT0xMSxQbj1VLk5PVEFUSU9OX05PREU9MTIsTz17fSwkPXt9LFNhPU8uSU5ERVhfU0laRV9FUlI9KCRbMV09XFxcIkluZGV4IHNpemUgZXJyb3JcXFwiLDEpLHZhPU8uRE9NU1RSSU5HX1NJWkVfRVJSPSgkWzJdPVxcXCJET01TdHJpbmcgc2l6ZSBlcnJvclxcXCIsMiksa249Ty5ISUVSQVJDSFlfUkVRVUVTVF9FUlI9KCRbM109XFxcIkhpZXJhcmNoeSByZXF1ZXN0IGVycm9yXFxcIiwzKSx5YT1PLldST05HX0RPQ1VNRU5UX0VSUj0oJFs0XT1cXFwiV3JvbmcgZG9jdW1lbnRcXFwiLDQpLFJhPU8uSU5WQUxJRF9DSEFSQUNURVJfRVJSPSgkWzVdPVxcXCJJbnZhbGlkIGNoYXJhY3RlclxcXCIsNSksQ2E9Ty5OT19EQVRBX0FMTE9XRURfRVJSPSgkWzZdPVxcXCJObyBkYXRhIGFsbG93ZWRcXFwiLDYpLEVhPU8uTk9fTU9ESUZJQ0FUSU9OX0FMTE9XRURfRVJSPSgkWzddPVxcXCJObyBtb2RpZmljYXRpb24gYWxsb3dlZFxcXCIsNyksRm49Ty5OT1RfRk9VTkRfRVJSPSgkWzhdPVxcXCJOb3QgZm91bmRcXFwiLDgpLF9hPU8uTk9UX1NVUFBPUlRFRF9FUlI9KCRbOV09XFxcIk5vdCBzdXBwb3J0ZWRcXFwiLDkpLFB0PU8uSU5VU0VfQVRUUklCVVRFX0VSUj0oJFsxMF09XFxcIkF0dHJpYnV0ZSBpbiB1c2VcXFwiLDEwKSxBYT1PLklOVkFMSURfU1RBVEVfRVJSPSgkWzExXT1cXFwiSW52YWxpZCBzdGF0ZVxcXCIsMTEpLFRhPU8uU1lOVEFYX0VSUj0oJFsxMl09XFxcIlN5bnRheCBlcnJvclxcXCIsMTIpLGJhPU8uSU5WQUxJRF9NT0RJRklDQVRJT05fRVJSPSgkWzEzXT1cXFwiSW52YWxpZCBtb2RpZmljYXRpb25cXFwiLDEzKSxOYT1PLk5BTUVTUEFDRV9FUlI9KCRbMTRdPVxcXCJJbnZhbGlkIG5hbWVzcGFjZVxcXCIsMTQpLHdhPU8uSU5WQUxJRF9BQ0NFU1NfRVJSPSgkWzE1XT1cXFwiSW52YWxpZCBhY2Nlc3NcXFwiLDE1KTtmdW5jdGlvbiB0ZSh0LGUpe2lmKGUgaW5zdGFuY2VvZiBFcnJvcil2YXIgbj1lO2Vsc2Ugbj10aGlzLEVycm9yLmNhbGwodGhpcywkW3RdKSx0aGlzLm1lc3NhZ2U9JFt0XSxFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSYmRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcyx0ZSk7cmV0dXJuIG4uY29kZT10LGUmJih0aGlzLm1lc3NhZ2U9dGhpcy5tZXNzYWdlK1xcXCI6IFxcXCIrZSksbn10ZS5wcm90b3R5cGU9RXJyb3IucHJvdG90eXBlO3ZlKE8sdGUpO2Z1bmN0aW9uIFooKXt9Wi5wcm90b3R5cGU9e2xlbmd0aDowLGl0ZW06ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXNbdF18fG51bGx9LHRvU3RyaW5nOmZ1bmN0aW9uKHQsZSl7Zm9yKHZhciBuPVtdLHI9MDtyPHRoaXMubGVuZ3RoO3IrKylhZSh0aGlzW3JdLG4sdCxlKTtyZXR1cm4gbi5qb2luKFxcXCJcXFwiKX19O2Z1bmN0aW9uIGNlKHQsZSl7dGhpcy5fbm9kZT10LHRoaXMuX3JlZnJlc2g9ZSxHZSh0aGlzKX1mdW5jdGlvbiBHZSh0KXt2YXIgZT10Ll9ub2RlLl9pbmN8fHQuX25vZGUub3duZXJEb2N1bWVudC5faW5jO2lmKHQuX2luYyE9ZSl7dmFyIG49dC5fcmVmcmVzaCh0Ll9ub2RlKTtubih0LFxcXCJsZW5ndGhcXFwiLG4ubGVuZ3RoKSx2ZShuLHQpLHQuX2luYz1lfX1jZS5wcm90b3R5cGUuaXRlbT1mdW5jdGlvbih0KXtyZXR1cm4gR2UodGhpcyksdGhpc1t0XX07RihjZSxaKTtmdW5jdGlvbiAkZSgpe31mdW5jdGlvbiBIdCh0LGUpe2Zvcih2YXIgbj10Lmxlbmd0aDtuLS07KWlmKHRbbl09PT1lKXJldHVybiBufWZ1bmN0aW9uIGt0KHQsZSxuLHIpe2lmKHI/ZVtIdChlLHIpXT1uOmVbZS5sZW5ndGgrK109bix0KXtuLm93bmVyRWxlbWVudD10O3ZhciBpPXQub3duZXJEb2N1bWVudDtpJiYociYmWXQoaSx0LHIpLFVuKGksdCxuKSl9fWZ1bmN0aW9uIEZ0KHQsZSxuKXt2YXIgcj1IdChlLG4pO2lmKHI+PTApe2Zvcih2YXIgaT1lLmxlbmd0aC0xO3I8aTspZVtyXT1lWysrcl07aWYoZS5sZW5ndGg9aSx0KXt2YXIgcz10Lm93bmVyRG9jdW1lbnQ7cyYmKFl0KHMsdCxuKSxuLm93bmVyRWxlbWVudD1udWxsKX19ZWxzZSB0aHJvdyB0ZShGbixuZXcgRXJyb3IodC50YWdOYW1lK1xcXCJAXFxcIituKSl9JGUucHJvdG90eXBlPXtsZW5ndGg6MCxpdGVtOloucHJvdG90eXBlLml0ZW0sZ2V0TmFtZWRJdGVtOmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT10aGlzLmxlbmd0aDtlLS07KXt2YXIgbj10aGlzW2VdO2lmKG4ubm9kZU5hbWU9PXQpcmV0dXJuIG59fSxzZXROYW1lZEl0ZW06ZnVuY3Rpb24odCl7dmFyIGU9dC5vd25lckVsZW1lbnQ7aWYoZSYmZSE9dGhpcy5fb3duZXJFbGVtZW50KXRocm93IG5ldyB0ZShQdCk7dmFyIG49dGhpcy5nZXROYW1lZEl0ZW0odC5ub2RlTmFtZSk7cmV0dXJuIGt0KHRoaXMuX293bmVyRWxlbWVudCx0aGlzLHQsbiksbn0sc2V0TmFtZWRJdGVtTlM6ZnVuY3Rpb24odCl7dmFyIGU9dC5vd25lckVsZW1lbnQsbjtpZihlJiZlIT10aGlzLl9vd25lckVsZW1lbnQpdGhyb3cgbmV3IHRlKFB0KTtyZXR1cm4gbj10aGlzLmdldE5hbWVkSXRlbU5TKHQubmFtZXNwYWNlVVJJLHQubG9jYWxOYW1lKSxrdCh0aGlzLl9vd25lckVsZW1lbnQsdGhpcyx0LG4pLG59LHJlbW92ZU5hbWVkSXRlbTpmdW5jdGlvbih0KXt2YXIgZT10aGlzLmdldE5hbWVkSXRlbSh0KTtyZXR1cm4gRnQodGhpcy5fb3duZXJFbGVtZW50LHRoaXMsZSksZX0scmVtb3ZlTmFtZWRJdGVtTlM6ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzLmdldE5hbWVkSXRlbU5TKHQsZSk7cmV0dXJuIEZ0KHRoaXMuX293bmVyRWxlbWVudCx0aGlzLG4pLG59LGdldE5hbWVkSXRlbU5TOmZ1bmN0aW9uKHQsZSl7Zm9yKHZhciBuPXRoaXMubGVuZ3RoO24tLTspe3ZhciByPXRoaXNbbl07aWYoci5sb2NhbE5hbWU9PWUmJnIubmFtZXNwYWNlVVJJPT10KXJldHVybiByfXJldHVybiBudWxsfX07ZnVuY3Rpb24gS3QodCl7aWYodGhpcy5fZmVhdHVyZXM9e30sdClmb3IodmFyIGUgaW4gdCl0aGlzLl9mZWF0dXJlcz10W2VdfUt0LnByb3RvdHlwZT17aGFzRmVhdHVyZTpmdW5jdGlvbih0LGUpe3ZhciBuPXRoaXMuX2ZlYXR1cmVzW3QudG9Mb3dlckNhc2UoKV07cmV0dXJuISEobiYmKCFlfHxlIGluIG4pKX0sY3JlYXRlRG9jdW1lbnQ6ZnVuY3Rpb24odCxlLG4pe3ZhciByPW5ldyB5ZTtpZihyLmltcGxlbWVudGF0aW9uPXRoaXMsci5jaGlsZE5vZGVzPW5ldyBaLHIuZG9jdHlwZT1uLG4mJnIuYXBwZW5kQ2hpbGQobiksZSl7dmFyIGk9ci5jcmVhdGVFbGVtZW50TlModCxlKTtyLmFwcGVuZENoaWxkKGkpfXJldHVybiByfSxjcmVhdGVEb2N1bWVudFR5cGU6ZnVuY3Rpb24odCxlLG4pe3ZhciByPW5ldyBIZTtyZXR1cm4gci5uYW1lPXQsci5ub2RlTmFtZT10LHIucHVibGljSWQ9ZSxyLnN5c3RlbUlkPW4scn19O2Z1bmN0aW9uIEkoKXt9SS5wcm90b3R5cGU9e2ZpcnN0Q2hpbGQ6bnVsbCxsYXN0Q2hpbGQ6bnVsbCxwcmV2aW91c1NpYmxpbmc6bnVsbCxuZXh0U2libGluZzpudWxsLGF0dHJpYnV0ZXM6bnVsbCxwYXJlbnROb2RlOm51bGwsY2hpbGROb2RlczpudWxsLG93bmVyRG9jdW1lbnQ6bnVsbCxub2RlVmFsdWU6bnVsbCxuYW1lc3BhY2VVUkk6bnVsbCxwcmVmaXg6bnVsbCxsb2NhbE5hbWU6bnVsbCxpbnNlcnRCZWZvcmU6ZnVuY3Rpb24odCxlKXtyZXR1cm4gcXQodGhpcyx0LGUpfSxyZXBsYWNlQ2hpbGQ6ZnVuY3Rpb24odCxlKXt0aGlzLmluc2VydEJlZm9yZSh0LGUpLGUmJnRoaXMucmVtb3ZlQ2hpbGQoZSl9LHJlbW92ZUNoaWxkOmZ1bmN0aW9uKHQpe3JldHVybiBYdCh0aGlzLHQpfSxhcHBlbmRDaGlsZDpmdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5pbnNlcnRCZWZvcmUodCxudWxsKX0saGFzQ2hpbGROb2RlczpmdW5jdGlvbigpe3JldHVybiB0aGlzLmZpcnN0Q2hpbGQhPW51bGx9LGNsb25lTm9kZTpmdW5jdGlvbih0KXtyZXR1cm4gV2UodGhpcy5vd25lckRvY3VtZW50fHx0aGlzLHRoaXMsdCl9LG5vcm1hbGl6ZTpmdW5jdGlvbigpe2Zvcih2YXIgdD10aGlzLmZpcnN0Q2hpbGQ7dDspe3ZhciBlPXQubmV4dFNpYmxpbmc7ZSYmZS5ub2RlVHlwZT09RGUmJnQubm9kZVR5cGU9PURlPyh0aGlzLnJlbW92ZUNoaWxkKGUpLHQuYXBwZW5kRGF0YShlLmRhdGEpKToodC5ub3JtYWxpemUoKSx0PWUpfX0saXNTdXBwb3J0ZWQ6ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy5vd25lckRvY3VtZW50LmltcGxlbWVudGF0aW9uLmhhc0ZlYXR1cmUodCxlKX0saGFzQXR0cmlidXRlczpmdW5jdGlvbigpe3JldHVybiB0aGlzLmF0dHJpYnV0ZXMubGVuZ3RoPjB9LGxvb2t1cFByZWZpeDpmdW5jdGlvbih0KXtmb3IodmFyIGU9dGhpcztlOyl7dmFyIG49ZS5fbnNNYXA7aWYobil7Zm9yKHZhciByIGluIG4paWYobltyXT09dClyZXR1cm4gcn1lPWUubm9kZVR5cGU9PW9lP2Uub3duZXJEb2N1bWVudDplLnBhcmVudE5vZGV9cmV0dXJuIG51bGx9LGxvb2t1cE5hbWVzcGFjZVVSSTpmdW5jdGlvbih0KXtmb3IodmFyIGU9dGhpcztlOyl7dmFyIG49ZS5fbnNNYXA7aWYobiYmdCBpbiBuKXJldHVybiBuW3RdO2U9ZS5ub2RlVHlwZT09b2U/ZS5vd25lckRvY3VtZW50OmUucGFyZW50Tm9kZX1yZXR1cm4gbnVsbH0saXNEZWZhdWx0TmFtZXNwYWNlOmZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMubG9va3VwUHJlZml4KHQpO3JldHVybiBlPT1udWxsfX07ZnVuY3Rpb24gVXQodCl7cmV0dXJuIHQ9PVxcXCI8XFxcIiYmXFxcIiZsdDtcXFwifHx0PT1cXFwiPlxcXCImJlxcXCImZ3Q7XFxcInx8dD09XFxcIiZcXFwiJiZcXFwiJmFtcDtcXFwifHx0PT0nXFxcIicmJlxcXCImcXVvdDtcXFwifHxcXFwiJiNcXFwiK3QuY2hhckNvZGVBdCgpK1xcXCI7XFxcIn12ZShVLEkpO3ZlKFUsSS5wcm90b3R5cGUpO2Z1bmN0aW9uIFNlKHQsZSl7aWYoZSh0KSlyZXR1cm4hMDtpZih0PXQuZmlyc3RDaGlsZClkbyBpZihTZSh0LGUpKXJldHVybiEwO3doaWxlKHQ9dC5uZXh0U2libGluZyl9ZnVuY3Rpb24geWUoKXt9ZnVuY3Rpb24gVW4odCxlLG4pe3QmJnQuX2luYysrO3ZhciByPW4ubmFtZXNwYWNlVVJJO3I9PVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3htbG5zL1xcXCImJihlLl9uc01hcFtuLnByZWZpeD9uLmxvY2FsTmFtZTpcXFwiXFxcIl09bi52YWx1ZSl9ZnVuY3Rpb24gWXQodCxlLG4scil7dCYmdC5faW5jKys7dmFyIGk9bi5uYW1lc3BhY2VVUkk7aT09XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAveG1sbnMvXFxcIiYmZGVsZXRlIGUuX25zTWFwW24ucHJlZml4P24ubG9jYWxOYW1lOlxcXCJcXFwiXX1mdW5jdGlvbiBqZSh0LGUsbil7aWYodCYmdC5faW5jKXt0Ll9pbmMrKzt2YXIgcj1lLmNoaWxkTm9kZXM7aWYobilyW3IubGVuZ3RoKytdPW47ZWxzZXtmb3IodmFyIGk9ZS5maXJzdENoaWxkLHM9MDtpOylyW3MrK109aSxpPWkubmV4dFNpYmxpbmc7ci5sZW5ndGg9c319fWZ1bmN0aW9uIFh0KHQsZSl7dmFyIG49ZS5wcmV2aW91c1NpYmxpbmcscj1lLm5leHRTaWJsaW5nO3JldHVybiBuP24ubmV4dFNpYmxpbmc9cjp0LmZpcnN0Q2hpbGQ9cixyP3IucHJldmlvdXNTaWJsaW5nPW46dC5sYXN0Q2hpbGQ9bixqZSh0Lm93bmVyRG9jdW1lbnQsdCksZX1mdW5jdGlvbiBxdCh0LGUsbil7dmFyIHI9ZS5wYXJlbnROb2RlO2lmKHImJnIucmVtb3ZlQ2hpbGQoZSksZS5ub2RlVHlwZT09PXope3ZhciBpPWUuZmlyc3RDaGlsZDtpZihpPT1udWxsKXJldHVybiBlO3ZhciBzPWUubGFzdENoaWxkfWVsc2UgaT1zPWU7dmFyIG89bj9uLnByZXZpb3VzU2libGluZzp0Lmxhc3RDaGlsZDtpLnByZXZpb3VzU2libGluZz1vLHMubmV4dFNpYmxpbmc9bixvP28ubmV4dFNpYmxpbmc9aTp0LmZpcnN0Q2hpbGQ9aSxuPT1udWxsP3QubGFzdENoaWxkPXM6bi5wcmV2aW91c1NpYmxpbmc9cztkbyBpLnBhcmVudE5vZGU9dDt3aGlsZShpIT09cyYmKGk9aS5uZXh0U2libGluZykpO3JldHVybiBqZSh0Lm93bmVyRG9jdW1lbnR8fHQsdCksZS5ub2RlVHlwZT09eiYmKGUuZmlyc3RDaGlsZD1lLmxhc3RDaGlsZD1udWxsKSxlfWZ1bmN0aW9uIExuKHQsZSl7dmFyIG49ZS5wYXJlbnROb2RlO2lmKG4pe3ZhciByPXQubGFzdENoaWxkO24ucmVtb3ZlQ2hpbGQoZSk7dmFyIHI9dC5sYXN0Q2hpbGR9dmFyIHI9dC5sYXN0Q2hpbGQ7cmV0dXJuIGUucGFyZW50Tm9kZT10LGUucHJldmlvdXNTaWJsaW5nPXIsZS5uZXh0U2libGluZz1udWxsLHI/ci5uZXh0U2libGluZz1lOnQuZmlyc3RDaGlsZD1lLHQubGFzdENoaWxkPWUsamUodC5vd25lckRvY3VtZW50LHQsZSksZX15ZS5wcm90b3R5cGU9e25vZGVOYW1lOlxcXCIjZG9jdW1lbnRcXFwiLG5vZGVUeXBlOlZ0LGRvY3R5cGU6bnVsbCxkb2N1bWVudEVsZW1lbnQ6bnVsbCxfaW5jOjEsaW5zZXJ0QmVmb3JlOmZ1bmN0aW9uKHQsZSl7aWYodC5ub2RlVHlwZT09eil7Zm9yKHZhciBuPXQuZmlyc3RDaGlsZDtuOyl7dmFyIHI9bi5uZXh0U2libGluZzt0aGlzLmluc2VydEJlZm9yZShuLGUpLG49cn1yZXR1cm4gdH1yZXR1cm4gdGhpcy5kb2N1bWVudEVsZW1lbnQ9PW51bGwmJnQubm9kZVR5cGU9PWomJih0aGlzLmRvY3VtZW50RWxlbWVudD10KSxxdCh0aGlzLHQsZSksdC5vd25lckRvY3VtZW50PXRoaXMsdH0scmVtb3ZlQ2hpbGQ6ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuZG9jdW1lbnRFbGVtZW50PT10JiYodGhpcy5kb2N1bWVudEVsZW1lbnQ9bnVsbCksWHQodGhpcyx0KX0saW1wb3J0Tm9kZTpmdW5jdGlvbih0LGUpe3JldHVybiB0bih0aGlzLHQsZSl9LGdldEVsZW1lbnRCeUlkOmZ1bmN0aW9uKHQpe3ZhciBlPW51bGw7cmV0dXJuIFNlKHRoaXMuZG9jdW1lbnRFbGVtZW50LGZ1bmN0aW9uKG4pe2lmKG4ubm9kZVR5cGU9PWomJm4uZ2V0QXR0cmlidXRlKFxcXCJpZFxcXCIpPT10KXJldHVybiBlPW4sITB9KSxlfSxnZXRFbGVtZW50c0J5Q2xhc3NOYW1lOmZ1bmN0aW9uKHQpe3ZhciBlPW5ldyBSZWdFeHAoXFxcIihefFxcXFxcXFxccylcXFwiK3QrXFxcIihcXFxcXFxcXHN8JClcXFwiKTtyZXR1cm4gbmV3IGNlKHRoaXMsZnVuY3Rpb24obil7dmFyIHI9W107cmV0dXJuIFNlKG4uZG9jdW1lbnRFbGVtZW50LGZ1bmN0aW9uKGkpe2khPT1uJiZpLm5vZGVUeXBlPT1qJiZlLnRlc3QoaS5nZXRBdHRyaWJ1dGUoXFxcImNsYXNzXFxcIikpJiZyLnB1c2goaSl9KSxyfSl9LGNyZWF0ZUVsZW1lbnQ6ZnVuY3Rpb24odCl7dmFyIGU9bmV3IGxlO2Uub3duZXJEb2N1bWVudD10aGlzLGUubm9kZU5hbWU9dCxlLnRhZ05hbWU9dCxlLmNoaWxkTm9kZXM9bmV3IFo7dmFyIG49ZS5hdHRyaWJ1dGVzPW5ldyAkZTtyZXR1cm4gbi5fb3duZXJFbGVtZW50PWUsZX0sY3JlYXRlRG9jdW1lbnRGcmFnbWVudDpmdW5jdGlvbigpe3ZhciB0PW5ldyBNZTtyZXR1cm4gdC5vd25lckRvY3VtZW50PXRoaXMsdC5jaGlsZE5vZGVzPW5ldyBaLHR9LGNyZWF0ZVRleHROb2RlOmZ1bmN0aW9uKHQpe3ZhciBlPW5ldyBCZTtyZXR1cm4gZS5vd25lckRvY3VtZW50PXRoaXMsZS5hcHBlbmREYXRhKHQpLGV9LGNyZWF0ZUNvbW1lbnQ6ZnVuY3Rpb24odCl7dmFyIGU9bmV3IFZlO3JldHVybiBlLm93bmVyRG9jdW1lbnQ9dGhpcyxlLmFwcGVuZERhdGEodCksZX0sY3JlYXRlQ0RBVEFTZWN0aW9uOmZ1bmN0aW9uKHQpe3ZhciBlPW5ldyB6ZTtyZXR1cm4gZS5vd25lckRvY3VtZW50PXRoaXMsZS5hcHBlbmREYXRhKHQpLGV9LGNyZWF0ZVByb2Nlc3NpbmdJbnN0cnVjdGlvbjpmdW5jdGlvbih0LGUpe3ZhciBuPW5ldyBZZTtyZXR1cm4gbi5vd25lckRvY3VtZW50PXRoaXMsbi50YWdOYW1lPW4udGFyZ2V0PXQsbi5ub2RlVmFsdWU9bi5kYXRhPWUsbn0sY3JlYXRlQXR0cmlidXRlOmZ1bmN0aW9uKHQpe3ZhciBlPW5ldyB4ZTtyZXR1cm4gZS5vd25lckRvY3VtZW50PXRoaXMsZS5uYW1lPXQsZS5ub2RlTmFtZT10LGUubG9jYWxOYW1lPXQsZS5zcGVjaWZpZWQ9ITAsZX0sY3JlYXRlRW50aXR5UmVmZXJlbmNlOmZ1bmN0aW9uKHQpe3ZhciBlPW5ldyBLZTtyZXR1cm4gZS5vd25lckRvY3VtZW50PXRoaXMsZS5ub2RlTmFtZT10LGV9LGNyZWF0ZUVsZW1lbnROUzpmdW5jdGlvbih0LGUpe3ZhciBuPW5ldyBsZSxyPWUuc3BsaXQoXFxcIjpcXFwiKSxpPW4uYXR0cmlidXRlcz1uZXcgJGU7cmV0dXJuIG4uY2hpbGROb2Rlcz1uZXcgWixuLm93bmVyRG9jdW1lbnQ9dGhpcyxuLm5vZGVOYW1lPWUsbi50YWdOYW1lPWUsbi5uYW1lc3BhY2VVUkk9dCxyLmxlbmd0aD09Mj8obi5wcmVmaXg9clswXSxuLmxvY2FsTmFtZT1yWzFdKTpuLmxvY2FsTmFtZT1lLGkuX293bmVyRWxlbWVudD1uLG59LGNyZWF0ZUF0dHJpYnV0ZU5TOmZ1bmN0aW9uKHQsZSl7dmFyIG49bmV3IHhlLHI9ZS5zcGxpdChcXFwiOlxcXCIpO3JldHVybiBuLm93bmVyRG9jdW1lbnQ9dGhpcyxuLm5vZGVOYW1lPWUsbi5uYW1lPWUsbi5uYW1lc3BhY2VVUkk9dCxuLnNwZWNpZmllZD0hMCxyLmxlbmd0aD09Mj8obi5wcmVmaXg9clswXSxuLmxvY2FsTmFtZT1yWzFdKTpuLmxvY2FsTmFtZT1lLG59fTtGKHllLEkpO2Z1bmN0aW9uIGxlKCl7dGhpcy5fbnNNYXA9e319bGUucHJvdG90eXBlPXtub2RlVHlwZTpqLGhhc0F0dHJpYnV0ZTpmdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5nZXRBdHRyaWJ1dGVOb2RlKHQpIT1udWxsfSxnZXRBdHRyaWJ1dGU6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5nZXRBdHRyaWJ1dGVOb2RlKHQpO3JldHVybiBlJiZlLnZhbHVlfHxcXFwiXFxcIn0sZ2V0QXR0cmlidXRlTm9kZTpmdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5hdHRyaWJ1dGVzLmdldE5hbWVkSXRlbSh0KX0sc2V0QXR0cmlidXRlOmZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpcy5vd25lckRvY3VtZW50LmNyZWF0ZUF0dHJpYnV0ZSh0KTtuLnZhbHVlPW4ubm9kZVZhbHVlPVxcXCJcXFwiK2UsdGhpcy5zZXRBdHRyaWJ1dGVOb2RlKG4pfSxyZW1vdmVBdHRyaWJ1dGU6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5nZXRBdHRyaWJ1dGVOb2RlKHQpO2UmJnRoaXMucmVtb3ZlQXR0cmlidXRlTm9kZShlKX0sYXBwZW5kQ2hpbGQ6ZnVuY3Rpb24odCl7cmV0dXJuIHQubm9kZVR5cGU9PT16P3RoaXMuaW5zZXJ0QmVmb3JlKHQsbnVsbCk6TG4odGhpcyx0KX0sc2V0QXR0cmlidXRlTm9kZTpmdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5hdHRyaWJ1dGVzLnNldE5hbWVkSXRlbSh0KX0sc2V0QXR0cmlidXRlTm9kZU5TOmZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLmF0dHJpYnV0ZXMuc2V0TmFtZWRJdGVtTlModCl9LHJlbW92ZUF0dHJpYnV0ZU5vZGU6ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuYXR0cmlidXRlcy5yZW1vdmVOYW1lZEl0ZW0odC5ub2RlTmFtZSl9LHJlbW92ZUF0dHJpYnV0ZU5TOmZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpcy5nZXRBdHRyaWJ1dGVOb2RlTlModCxlKTtuJiZ0aGlzLnJlbW92ZUF0dHJpYnV0ZU5vZGUobil9LGhhc0F0dHJpYnV0ZU5TOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMuZ2V0QXR0cmlidXRlTm9kZU5TKHQsZSkhPW51bGx9LGdldEF0dHJpYnV0ZU5TOmZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpcy5nZXRBdHRyaWJ1dGVOb2RlTlModCxlKTtyZXR1cm4gbiYmbi52YWx1ZXx8XFxcIlxcXCJ9LHNldEF0dHJpYnV0ZU5TOmZ1bmN0aW9uKHQsZSxuKXt2YXIgcj10aGlzLm93bmVyRG9jdW1lbnQuY3JlYXRlQXR0cmlidXRlTlModCxlKTtyLnZhbHVlPXIubm9kZVZhbHVlPVxcXCJcXFwiK24sdGhpcy5zZXRBdHRyaWJ1dGVOb2RlKHIpfSxnZXRBdHRyaWJ1dGVOb2RlTlM6ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy5hdHRyaWJ1dGVzLmdldE5hbWVkSXRlbU5TKHQsZSl9LGdldEVsZW1lbnRzQnlUYWdOYW1lOmZ1bmN0aW9uKHQpe3JldHVybiBuZXcgY2UodGhpcyxmdW5jdGlvbihlKXt2YXIgbj1bXTtyZXR1cm4gU2UoZSxmdW5jdGlvbihyKXtyIT09ZSYmci5ub2RlVHlwZT09aiYmKHQ9PT1cXFwiKlxcXCJ8fHIudGFnTmFtZT09dCkmJm4ucHVzaChyKX0pLG59KX0sZ2V0RWxlbWVudHNCeVRhZ05hbWVOUzpmdW5jdGlvbih0LGUpe3JldHVybiBuZXcgY2UodGhpcyxmdW5jdGlvbihuKXt2YXIgcj1bXTtyZXR1cm4gU2UobixmdW5jdGlvbihpKXtpIT09biYmaS5ub2RlVHlwZT09PWomJih0PT09XFxcIipcXFwifHxpLm5hbWVzcGFjZVVSST09PXQpJiYoZT09PVxcXCIqXFxcInx8aS5sb2NhbE5hbWU9PWUpJiZyLnB1c2goaSl9KSxyfSl9fTt5ZS5wcm90b3R5cGUuZ2V0RWxlbWVudHNCeVRhZ05hbWU9bGUucHJvdG90eXBlLmdldEVsZW1lbnRzQnlUYWdOYW1lO3llLnByb3RvdHlwZS5nZXRFbGVtZW50c0J5VGFnTmFtZU5TPWxlLnByb3RvdHlwZS5nZXRFbGVtZW50c0J5VGFnTmFtZU5TO0YobGUsSSk7ZnVuY3Rpb24geGUoKXt9eGUucHJvdG90eXBlLm5vZGVUeXBlPW9lO0YoeGUsSSk7ZnVuY3Rpb24gUmUoKXt9UmUucHJvdG90eXBlPXtkYXRhOlxcXCJcXFwiLHN1YnN0cmluZ0RhdGE6ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy5kYXRhLnN1YnN0cmluZyh0LHQrZSl9LGFwcGVuZERhdGE6ZnVuY3Rpb24odCl7dD10aGlzLmRhdGErdCx0aGlzLm5vZGVWYWx1ZT10aGlzLmRhdGE9dCx0aGlzLmxlbmd0aD10Lmxlbmd0aH0saW5zZXJ0RGF0YTpmdW5jdGlvbih0LGUpe3RoaXMucmVwbGFjZURhdGEodCwwLGUpfSxhcHBlbmRDaGlsZDpmdW5jdGlvbih0KXt0aHJvdyBuZXcgRXJyb3IoJFtrbl0pfSxkZWxldGVEYXRhOmZ1bmN0aW9uKHQsZSl7dGhpcy5yZXBsYWNlRGF0YSh0LGUsXFxcIlxcXCIpfSxyZXBsYWNlRGF0YTpmdW5jdGlvbih0LGUsbil7dmFyIHI9dGhpcy5kYXRhLnN1YnN0cmluZygwLHQpLGk9dGhpcy5kYXRhLnN1YnN0cmluZyh0K2UpO249cituK2ksdGhpcy5ub2RlVmFsdWU9dGhpcy5kYXRhPW4sdGhpcy5sZW5ndGg9bi5sZW5ndGh9fTtGKFJlLEkpO2Z1bmN0aW9uIEJlKCl7fUJlLnByb3RvdHlwZT17bm9kZU5hbWU6XFxcIiN0ZXh0XFxcIixub2RlVHlwZTpEZSxzcGxpdFRleHQ6ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5kYXRhLG49ZS5zdWJzdHJpbmcodCk7ZT1lLnN1YnN0cmluZygwLHQpLHRoaXMuZGF0YT10aGlzLm5vZGVWYWx1ZT1lLHRoaXMubGVuZ3RoPWUubGVuZ3RoO3ZhciByPXRoaXMub3duZXJEb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShuKTtyZXR1cm4gdGhpcy5wYXJlbnROb2RlJiZ0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHIsdGhpcy5uZXh0U2libGluZykscn19O0YoQmUsUmUpO2Z1bmN0aW9uIFZlKCl7fVZlLnByb3RvdHlwZT17bm9kZU5hbWU6XFxcIiNjb21tZW50XFxcIixub2RlVHlwZTpCdH07RihWZSxSZSk7ZnVuY3Rpb24gemUoKXt9emUucHJvdG90eXBlPXtub2RlTmFtZTpcXFwiI2NkYXRhLXNlY3Rpb25cXFwiLG5vZGVUeXBlOld0fTtGKHplLFJlKTtmdW5jdGlvbiBIZSgpe31IZS5wcm90b3R5cGUubm9kZVR5cGU9enQ7RihIZSxJKTtmdW5jdGlvbiBadCgpe31adC5wcm90b3R5cGUubm9kZVR5cGU9UG47RihadCxJKTtmdW5jdGlvbiBRdCgpe31RdC5wcm90b3R5cGUubm9kZVR5cGU9SW47RihRdCxJKTtmdW5jdGlvbiBLZSgpe31LZS5wcm90b3R5cGUubm9kZVR5cGU9R3Q7RihLZSxJKTtmdW5jdGlvbiBNZSgpe31NZS5wcm90b3R5cGUubm9kZU5hbWU9XFxcIiNkb2N1bWVudC1mcmFnbWVudFxcXCI7TWUucHJvdG90eXBlLm5vZGVUeXBlPXo7RihNZSxJKTtmdW5jdGlvbiBZZSgpe31ZZS5wcm90b3R5cGUubm9kZVR5cGU9anQ7RihZZSxJKTtmdW5jdGlvbiBKdCgpe31KdC5wcm90b3R5cGUuc2VyaWFsaXplVG9TdHJpbmc9ZnVuY3Rpb24odCxlLG4pe3JldHVybiBlbi5jYWxsKHQsZSxuKX07SS5wcm90b3R5cGUudG9TdHJpbmc9ZW47ZnVuY3Rpb24gZW4odCxlKXt2YXIgbj1bXSxyPXRoaXMubm9kZVR5cGU9PTkmJnRoaXMuZG9jdW1lbnRFbGVtZW50fHx0aGlzLGk9ci5wcmVmaXgscz1yLm5hbWVzcGFjZVVSSTtpZihzJiZpPT1udWxsKXt2YXIgaT1yLmxvb2t1cFByZWZpeChzKTtpZihpPT1udWxsKXZhciBvPVt7bmFtZXNwYWNlOnMscHJlZml4Om51bGx9XX1yZXR1cm4gYWUodGhpcyxuLHQsZSxvKSxuLmpvaW4oXFxcIlxcXCIpfWZ1bmN0aW9uIEx0KHQsZSxuKXt2YXIgcj10LnByZWZpeHx8XFxcIlxcXCIsaT10Lm5hbWVzcGFjZVVSSTtpZighciYmIWl8fHI9PT1cXFwieG1sXFxcIiYmaT09PVxcXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcXFwifHxpPT1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC94bWxucy9cXFwiKXJldHVybiExO2Zvcih2YXIgcz1uLmxlbmd0aDtzLS07KXt2YXIgbz1uW3NdO2lmKG8ucHJlZml4PT1yKXJldHVybiBvLm5hbWVzcGFjZSE9aX1yZXR1cm4hMH1mdW5jdGlvbiBhZSh0LGUsbixyLGkpe2lmKHIpaWYodD1yKHQpLHQpe2lmKHR5cGVvZiB0PT1cXFwic3RyaW5nXFxcIil7ZS5wdXNoKHQpO3JldHVybn19ZWxzZSByZXR1cm47c3dpdGNoKHQubm9kZVR5cGUpe2Nhc2UgajppfHwoaT1bXSk7dmFyIHM9aS5sZW5ndGgsbz10LmF0dHJpYnV0ZXMsbD1vLmxlbmd0aCx5PXQuZmlyc3RDaGlsZCx1PXQudGFnTmFtZTtuPU9uPT09dC5uYW1lc3BhY2VVUkl8fG4sZS5wdXNoKFxcXCI8XFxcIix1KTtmb3IodmFyIGE9MDthPGw7YSsrKXt2YXIgZj1vLml0ZW0oYSk7Zi5wcmVmaXg9PVxcXCJ4bWxuc1xcXCI/aS5wdXNoKHtwcmVmaXg6Zi5sb2NhbE5hbWUsbmFtZXNwYWNlOmYudmFsdWV9KTpmLm5vZGVOYW1lPT1cXFwieG1sbnNcXFwiJiZpLnB1c2goe3ByZWZpeDpcXFwiXFxcIixuYW1lc3BhY2U6Zi52YWx1ZX0pfWZvcih2YXIgYT0wO2E8bDthKyspe3ZhciBmPW8uaXRlbShhKTtpZihMdChmLG4saSkpe3ZhciBoPWYucHJlZml4fHxcXFwiXFxcIixTPWYubmFtZXNwYWNlVVJJLF89aD9cXFwiIHhtbG5zOlxcXCIraDpcXFwiIHhtbG5zXFxcIjtlLnB1c2goXywnPVxcXCInLFMsJ1xcXCInKSxpLnB1c2goe3ByZWZpeDpoLG5hbWVzcGFjZTpTfSl9YWUoZixlLG4scixpKX1pZihMdCh0LG4saSkpe3ZhciBoPXQucHJlZml4fHxcXFwiXFxcIixTPXQubmFtZXNwYWNlVVJJO2lmKFMpe3ZhciBfPWg/XFxcIiB4bWxuczpcXFwiK2g6XFxcIiB4bWxuc1xcXCI7ZS5wdXNoKF8sJz1cXFwiJyxTLCdcXFwiJyksaS5wdXNoKHtwcmVmaXg6aCxuYW1lc3BhY2U6U30pfX1pZih5fHxuJiYhL14oPzptZXRhfGxpbmt8aW1nfGJyfGhyfGlucHV0KSQvaS50ZXN0KHUpKXtpZihlLnB1c2goXFxcIj5cXFwiKSxuJiYvXnNjcmlwdCQvaS50ZXN0KHUpKWZvcig7eTspeS5kYXRhP2UucHVzaCh5LmRhdGEpOmFlKHksZSxuLHIsaSkseT15Lm5leHRTaWJsaW5nO2Vsc2UgZm9yKDt5OylhZSh5LGUsbixyLGkpLHk9eS5uZXh0U2libGluZztlLnB1c2goXFxcIjwvXFxcIix1LFxcXCI+XFxcIil9ZWxzZSBlLnB1c2goXFxcIi8+XFxcIik7cmV0dXJuO2Nhc2UgVnQ6Y2FzZSB6OmZvcih2YXIgeT10LmZpcnN0Q2hpbGQ7eTspYWUoeSxlLG4scixpKSx5PXkubmV4dFNpYmxpbmc7cmV0dXJuO2Nhc2Ugb2U6cmV0dXJuIGUucHVzaChcXFwiIFxcXCIsdC5uYW1lLCc9XFxcIicsdC52YWx1ZS5yZXBsYWNlKC9bPCZcXFwiXS9nLFV0KSwnXFxcIicpO2Nhc2UgRGU6cmV0dXJuIGUucHVzaCh0LmRhdGEucmVwbGFjZSgvWzwmXS9nLFV0KS5yZXBsYWNlKC9dXT4vZyxcXFwiXV0mZ3Q7XFxcIikpO2Nhc2UgV3Q6cmV0dXJuIGUucHVzaChcXFwiPCFbQ0RBVEFbXFxcIix0LmRhdGEsXFxcIl1dPlxcXCIpO2Nhc2UgQnQ6cmV0dXJuIGUucHVzaChcXFwiPCEtLVxcXCIsdC5kYXRhLFxcXCItLT5cXFwiKTtjYXNlIHp0OnZhciBDPXQucHVibGljSWQsdj10LnN5c3RlbUlkO2lmKGUucHVzaChcXFwiPCFET0NUWVBFIFxcXCIsdC5uYW1lKSxDKWUucHVzaChcXFwiIFBVQkxJQyBcXFwiLEMpLHYmJnYhPVxcXCIuXFxcIiYmZS5wdXNoKFxcXCIgXFxcIix2KSxlLnB1c2goXFxcIj5cXFwiKTtlbHNlIGlmKHYmJnYhPVxcXCIuXFxcIillLnB1c2goXFxcIiBTWVNURU0gXFxcIix2LFxcXCI+XFxcIik7ZWxzZXt2YXIgTT10LmludGVybmFsU3Vic2V0O00mJmUucHVzaChcXFwiIFtcXFwiLE0sXFxcIl1cXFwiKSxlLnB1c2goXFxcIj5cXFwiKX1yZXR1cm47Y2FzZSBqdDpyZXR1cm4gZS5wdXNoKFxcXCI8P1xcXCIsdC50YXJnZXQsXFxcIiBcXFwiLHQuZGF0YSxcXFwiPz5cXFwiKTtjYXNlIEd0OnJldHVybiBlLnB1c2goXFxcIiZcXFwiLHQubm9kZU5hbWUsXFxcIjtcXFwiKTtkZWZhdWx0OmUucHVzaChcXFwiPz9cXFwiLHQubm9kZU5hbWUpfX1mdW5jdGlvbiB0bih0LGUsbil7dmFyIHI7c3dpdGNoKGUubm9kZVR5cGUpe2Nhc2UgajpyPWUuY2xvbmVOb2RlKCExKSxyLm93bmVyRG9jdW1lbnQ9dDtjYXNlIHo6YnJlYWs7Y2FzZSBvZTpuPSEwO2JyZWFrfWlmKHJ8fChyPWUuY2xvbmVOb2RlKCExKSksci5vd25lckRvY3VtZW50PXQsci5wYXJlbnROb2RlPW51bGwsbilmb3IodmFyIGk9ZS5maXJzdENoaWxkO2k7KXIuYXBwZW5kQ2hpbGQodG4odCxpLG4pKSxpPWkubmV4dFNpYmxpbmc7cmV0dXJuIHJ9ZnVuY3Rpb24gV2UodCxlLG4pe3ZhciByPW5ldyBlLmNvbnN0cnVjdG9yO2Zvcih2YXIgaSBpbiBlKXt2YXIgcz1lW2ldO3R5cGVvZiBzIT1cXFwib2JqZWN0XFxcIiYmcyE9cltpXSYmKHJbaV09cyl9c3dpdGNoKGUuY2hpbGROb2RlcyYmKHIuY2hpbGROb2Rlcz1uZXcgWiksci5vd25lckRvY3VtZW50PXQsci5ub2RlVHlwZSl7Y2FzZSBqOnZhciBvPWUuYXR0cmlidXRlcyxsPXIuYXR0cmlidXRlcz1uZXcgJGUsdT1vLmxlbmd0aDtsLl9vd25lckVsZW1lbnQ9cjtmb3IodmFyIGE9MDthPHU7YSsrKXIuc2V0QXR0cmlidXRlTm9kZShXZSh0LG8uaXRlbShhKSwhMCkpO2JyZWFrO2Nhc2Ugb2U6bj0hMH1pZihuKWZvcih2YXIgZj1lLmZpcnN0Q2hpbGQ7Zjspci5hcHBlbmRDaGlsZChXZSh0LGYsbikpLGY9Zi5uZXh0U2libGluZztyZXR1cm4gcn1mdW5jdGlvbiBubih0LGUsbil7dFtlXT1ufXRyeXtpZihPYmplY3QuZGVmaW5lUHJvcGVydHkpe2xldCB0PWZ1bmN0aW9uKGUpe3N3aXRjaChlLm5vZGVUeXBlKXtjYXNlIGo6Y2FzZSB6OnZhciBuPVtdO2ZvcihlPWUuZmlyc3RDaGlsZDtlOyllLm5vZGVUeXBlIT09NyYmZS5ub2RlVHlwZSE9PTgmJm4ucHVzaCh0KGUpKSxlPWUubmV4dFNpYmxpbmc7cmV0dXJuIG4uam9pbihcXFwiXFxcIik7ZGVmYXVsdDpyZXR1cm4gZS5ub2RlVmFsdWV9fTtEYT10LE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjZS5wcm90b3R5cGUsXFxcImxlbmd0aFxcXCIse2dldDpmdW5jdGlvbigpe3JldHVybiBHZSh0aGlzKSx0aGlzLiQkbGVuZ3RofX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShJLnByb3RvdHlwZSxcXFwidGV4dENvbnRlbnRcXFwiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdCh0aGlzKX0sc2V0OmZ1bmN0aW9uKGUpe3N3aXRjaCh0aGlzLm5vZGVUeXBlKXtjYXNlIGo6Y2FzZSB6OmZvcig7dGhpcy5maXJzdENoaWxkOyl0aGlzLnJlbW92ZUNoaWxkKHRoaXMuZmlyc3RDaGlsZCk7KGV8fFN0cmluZyhlKSkmJnRoaXMuYXBwZW5kQ2hpbGQodGhpcy5vd25lckRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGUpKTticmVhaztkZWZhdWx0OnRoaXMuZGF0YT1lLHRoaXMudmFsdWU9ZSx0aGlzLm5vZGVWYWx1ZT1lfX19KSxubj1mdW5jdGlvbihlLG4scil7ZVtcXFwiJCRcXFwiK25dPXJ9fX1jYXRjaCh0KXt9dmFyIERhO0NlLk5vZGU9STtDZS5ET01FeGNlcHRpb249dGU7Q2UuRE9NSW1wbGVtZW50YXRpb249S3Q7Q2UuWE1MU2VyaWFsaXplcj1KdH0pO3ZhciBvbj1OZShfZT0+e2Z1bmN0aW9uIHNuKHQpe3RoaXMub3B0aW9ucz10fHx7bG9jYXRvcjp7fX19c24ucHJvdG90eXBlLnBhcnNlRnJvbVN0cmluZz1mdW5jdGlvbih0LGUpe3ZhciBuPXRoaXMub3B0aW9ucyxyPW5ldyBqbixpPW4uZG9tQnVpbGRlcnx8bmV3IEVlLHM9bi5lcnJvckhhbmRsZXIsbz1uLmxvY2F0b3IsbD1uLnhtbG5zfHx7fSx1PS9cXFxcL3g/aHRtbD8kLy50ZXN0KGUpLGE9dT9Hbi5lbnRpdHlNYXA6e2x0OlxcXCI8XFxcIixndDpcXFwiPlxcXCIsYW1wOlxcXCImXFxcIixxdW90OidcXFwiJyxhcG9zOlxcXCInXFxcIn07cmV0dXJuIG8mJmkuc2V0RG9jdW1lbnRMb2NhdG9yKG8pLHIuZXJyb3JIYW5kbGVyPVduKHMsaSxvKSxyLmRvbUJ1aWxkZXI9bi5kb21CdWlsZGVyfHxpLHUmJihsW1xcXCJcXFwiXT1cXFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFxcXCIpLGwueG1sPWwueG1sfHxcXFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXFxcIix0JiZ0eXBlb2YgdD09XFxcInN0cmluZ1xcXCI/ci5wYXJzZSh0LGwsYSk6ci5lcnJvckhhbmRsZXIuZXJyb3IoXFxcImludmFsaWQgZG9jIHNvdXJjZVxcXCIpLGkuZG9jfTtmdW5jdGlvbiBXbih0LGUsbil7aWYoIXQpe2lmKGUgaW5zdGFuY2VvZiBFZSlyZXR1cm4gZTt0PWV9dmFyIHI9e30saT10IGluc3RhbmNlb2YgRnVuY3Rpb247bj1ufHx7fTtmdW5jdGlvbiBzKG8pe3ZhciBsPXRbb107IWwmJmkmJihsPXQubGVuZ3RoPT0yP2Z1bmN0aW9uKHUpe3Qobyx1KX06dCkscltvXT1sJiZmdW5jdGlvbih1KXtsKFxcXCJbeG1sZG9tIFxcXCIrbytcXFwiXVxcdFxcXCIrdStxZShuKSl9fHxmdW5jdGlvbigpe319cmV0dXJuIHMoXFxcIndhcm5pbmdcXFwiKSxzKFxcXCJlcnJvclxcXCIpLHMoXFxcImZhdGFsRXJyb3JcXFwiKSxyfWZ1bmN0aW9uIEVlKCl7dGhpcy5jZGF0YT0hMX1mdW5jdGlvbiB1ZSh0LGUpe2UubGluZU51bWJlcj10LmxpbmVOdW1iZXIsZS5jb2x1bW5OdW1iZXI9dC5jb2x1bW5OdW1iZXJ9RWUucHJvdG90eXBlPXtzdGFydERvY3VtZW50OmZ1bmN0aW9uKCl7dGhpcy5kb2M9bmV3IFZuKCkuY3JlYXRlRG9jdW1lbnQobnVsbCxudWxsLG51bGwpLHRoaXMubG9jYXRvciYmKHRoaXMuZG9jLmRvY3VtZW50VVJJPXRoaXMubG9jYXRvci5zeXN0ZW1JZCl9LHN0YXJ0RWxlbWVudDpmdW5jdGlvbih0LGUsbixyKXt2YXIgaT10aGlzLmRvYyxzPWkuY3JlYXRlRWxlbWVudE5TKHQsbnx8ZSksbz1yLmxlbmd0aDtPZSh0aGlzLHMpLHRoaXMuY3VycmVudEVsZW1lbnQ9cyx0aGlzLmxvY2F0b3ImJnVlKHRoaXMubG9jYXRvcixzKTtmb3IodmFyIGw9MDtsPG87bCsrKXt2YXIgdD1yLmdldFVSSShsKSx1PXIuZ2V0VmFsdWUobCksbj1yLmdldFFOYW1lKGwpLGE9aS5jcmVhdGVBdHRyaWJ1dGVOUyh0LG4pO3RoaXMubG9jYXRvciYmdWUoci5nZXRMb2NhdG9yKGwpLGEpLGEudmFsdWU9YS5ub2RlVmFsdWU9dSxzLnNldEF0dHJpYnV0ZU5vZGUoYSl9fSxlbmRFbGVtZW50OmZ1bmN0aW9uKHQsZSxuKXt2YXIgcj10aGlzLmN1cnJlbnRFbGVtZW50LGk9ci50YWdOYW1lO3RoaXMuY3VycmVudEVsZW1lbnQ9ci5wYXJlbnROb2RlfSxzdGFydFByZWZpeE1hcHBpbmc6ZnVuY3Rpb24odCxlKXt9LGVuZFByZWZpeE1hcHBpbmc6ZnVuY3Rpb24odCl7fSxwcm9jZXNzaW5nSW5zdHJ1Y3Rpb246ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzLmRvYy5jcmVhdGVQcm9jZXNzaW5nSW5zdHJ1Y3Rpb24odCxlKTt0aGlzLmxvY2F0b3ImJnVlKHRoaXMubG9jYXRvcixuKSxPZSh0aGlzLG4pfSxpZ25vcmFibGVXaGl0ZXNwYWNlOmZ1bmN0aW9uKHQsZSxuKXt9LGNoYXJhY3RlcnM6ZnVuY3Rpb24odCxlLG4pe2lmKHQ9cm4uYXBwbHkodGhpcyxhcmd1bWVudHMpLHQpe2lmKHRoaXMuY2RhdGEpdmFyIHI9dGhpcy5kb2MuY3JlYXRlQ0RBVEFTZWN0aW9uKHQpO2Vsc2UgdmFyIHI9dGhpcy5kb2MuY3JlYXRlVGV4dE5vZGUodCk7dGhpcy5jdXJyZW50RWxlbWVudD90aGlzLmN1cnJlbnRFbGVtZW50LmFwcGVuZENoaWxkKHIpOi9eXFxcXHMqJC8udGVzdCh0KSYmdGhpcy5kb2MuYXBwZW5kQ2hpbGQociksdGhpcy5sb2NhdG9yJiZ1ZSh0aGlzLmxvY2F0b3Iscil9fSxza2lwcGVkRW50aXR5OmZ1bmN0aW9uKHQpe30sZW5kRG9jdW1lbnQ6ZnVuY3Rpb24oKXt0aGlzLmRvYy5ub3JtYWxpemUoKX0sc2V0RG9jdW1lbnRMb2NhdG9yOmZ1bmN0aW9uKHQpeyh0aGlzLmxvY2F0b3I9dCkmJih0LmxpbmVOdW1iZXI9MCl9LGNvbW1lbnQ6ZnVuY3Rpb24odCxlLG4pe3Q9cm4uYXBwbHkodGhpcyxhcmd1bWVudHMpO3ZhciByPXRoaXMuZG9jLmNyZWF0ZUNvbW1lbnQodCk7dGhpcy5sb2NhdG9yJiZ1ZSh0aGlzLmxvY2F0b3IsciksT2UodGhpcyxyKX0sc3RhcnRDREFUQTpmdW5jdGlvbigpe3RoaXMuY2RhdGE9ITB9LGVuZENEQVRBOmZ1bmN0aW9uKCl7dGhpcy5jZGF0YT0hMX0sc3RhcnREVEQ6ZnVuY3Rpb24odCxlLG4pe3ZhciByPXRoaXMuZG9jLmltcGxlbWVudGF0aW9uO2lmKHImJnIuY3JlYXRlRG9jdW1lbnRUeXBlKXt2YXIgaT1yLmNyZWF0ZURvY3VtZW50VHlwZSh0LGUsbik7dGhpcy5sb2NhdG9yJiZ1ZSh0aGlzLmxvY2F0b3IsaSksT2UodGhpcyxpKX19LHdhcm5pbmc6ZnVuY3Rpb24odCl7Y29uc29sZS53YXJuKFxcXCJbeG1sZG9tIHdhcm5pbmddXFx0XFxcIit0LHFlKHRoaXMubG9jYXRvcikpfSxlcnJvcjpmdW5jdGlvbih0KXtjb25zb2xlLmVycm9yKFxcXCJbeG1sZG9tIGVycm9yXVxcdFxcXCIrdCxxZSh0aGlzLmxvY2F0b3IpKX0sZmF0YWxFcnJvcjpmdW5jdGlvbih0KXt0aHJvdyBuZXcgQm4odCx0aGlzLmxvY2F0b3IpfX07ZnVuY3Rpb24gcWUodCl7aWYodClyZXR1cm5gXFxuQGArKHQuc3lzdGVtSWR8fFxcXCJcXFwiKStcXFwiI1tsaW5lOlxcXCIrdC5saW5lTnVtYmVyK1xcXCIsY29sOlxcXCIrdC5jb2x1bW5OdW1iZXIrXFxcIl1cXFwifWZ1bmN0aW9uIHJuKHQsZSxuKXtyZXR1cm4gdHlwZW9mIHQ9PVxcXCJzdHJpbmdcXFwiP3Quc3Vic3RyKGUsbik6dC5sZW5ndGg+PWUrbnx8ZT9uZXcgamF2YS5sYW5nLlN0cmluZyh0LGUsbikrXFxcIlxcXCI6dH1cXFwiZW5kRFRELHN0YXJ0RW50aXR5LGVuZEVudGl0eSxhdHRyaWJ1dGVEZWNsLGVsZW1lbnREZWNsLGV4dGVybmFsRW50aXR5RGVjbCxpbnRlcm5hbEVudGl0eURlY2wscmVzb2x2ZUVudGl0eSxnZXRFeHRlcm5hbFN1YnNldCxub3RhdGlvbkRlY2wsdW5wYXJzZWRFbnRpdHlEZWNsXFxcIi5yZXBsYWNlKC9cXFxcdysvZyxmdW5jdGlvbih0KXtFZS5wcm90b3R5cGVbdF09ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbH19KTtmdW5jdGlvbiBPZSh0LGUpe3QuY3VycmVudEVsZW1lbnQ/dC5jdXJyZW50RWxlbWVudC5hcHBlbmRDaGlsZChlKTp0LmRvYy5hcHBlbmRDaGlsZChlKX12YXIgR249YnQoKSxhbj1JdCgpLGpuPWFuLlhNTFJlYWRlcixCbj1hbi5QYXJzZUVycm9yLFZuPV9lLkRPTUltcGxlbWVudGF0aW9uPVhlKCkuRE9NSW1wbGVtZW50YXRpb247X2UuWE1MU2VyaWFsaXplcj1YZSgpLlhNTFNlcmlhbGl6ZXI7X2UuRE9NUGFyc2VyPXNuO19lLl9fRE9NSGFuZGxlcj1FZX0pO3ZhciBsbj1UbihvbigpKTthc3luYyBmdW5jdGlvbiB1bih0KXtyZXR1cm4gbmV3IFByb21pc2UoKGUsbik9PntsZXQgcj1uZXcgRmlsZVJlYWRlcjtyLm9ubG9hZD1hc3luYyBpPT57bGV0IHM9aS50YXJnZXQucmVzdWx0LGw9bmV3IGxuLkRPTVBhcnNlcigpLnBhcnNlRnJvbVN0cmluZyhzLFxcXCJhcHBsaWNhdGlvbi94bWxcXFwiKS5nZXRFbGVtZW50c0J5VGFnTmFtZShcXFwibW9uc3RlclxcXCIpLHU9W107aWYoISFsLmxlbmd0aCl7Zm9yKGxldCBhIG9mIEFycmF5LmZyb20obCkpdHJ5e2xldCBmPXtpbWFnZTpudWxsLG5hbWU6eChhLFxcXCJuYW1lXFxcIiksc2l6ZTpxbihhKSx0eXBlOngoYSxcXFwidHlwZVxcXCIpLHN1YnR5cGU6eChhLFxcXCJzdWJ0eXBlXFxcIiksYWxpZ25tZW50OngoYSxcXFwiYWxpZ25tZW50XFxcIiksYWM6Wm4oYSksaHA6TnVtYmVyKGNuKGEsXFxcImhwXFxcIikpLGhpdF9kaWNlOmNuKGEsXFxcImhpdF9kaWNlXFxcIiksc3BlZWQ6eChhLFxcXCJzcGVlZFxcXCIpLHN0YXRzOltOdW1iZXIoeChhLFxcXCJzdHJcXFwiKSksTnVtYmVyKHgoYSxcXFwiZGV4XFxcIikpLE51bWJlcih4KGEsXFxcImNvblxcXCIpKSxOdW1iZXIoeChhLFxcXCJpbnRcXFwiKSksTnVtYmVyKHgoYSxcXFwid2lzXFxcIikpLE51bWJlcih4KGEsXFxcImNoYVxcXCIpKV0sc2F2ZXM6WW4oYSksc2tpbGxzYXZlczpIbihhKSxkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOngoYSxcXFwidnVsbmVyYWJsZVxcXCIpLGRhbWFnZV9yZXNpc3RhbmNlczp4KGEsXFxcInJlc2lzdFxcXCIpLGRhbWFnZV9pbW11bml0aWVzOngoYSxcXFwiaW1tdW5lXFxcIiksY29uZGl0aW9uX2ltbXVuaXRpZXM6eChhLFxcXCJjb25kaXRpb25JbW11bmVcXFwiKSxzZW5zZXM6eChhLFxcXCJzZW5zZXNcXFwiKSxsYW5ndWFnZXM6eChhLFxcXCJsYW5ndWFnZXNcXFwiKSxjcjp4KGEsXFxcImNyXFxcIiksdHJhaXRzOkllKGEsXFxcInRyYWl0XFxcIiksc3BlbGxzOnpuKGEpLGFjdGlvbnM6SWUoYSxcXFwiYWN0aW9uXFxcIiksbGVnZW5kYXJ5X2FjdGlvbnM6SWUoYSxcXFwibGVnZW5kYXJ5XFxcIikscmVhY3Rpb25zOkllKGEsXFxcInJlYWN0aW9uXFxcIiksc291cmNlOlFuKGEpfTt1LnB1c2goZil9Y2F0Y2goZil7Y29uc29sZS5lcnJvcihmKTtjb250aW51ZX1lKHUpfX0sci5yZWFkQXNUZXh0KHQpfSl9ZnVuY3Rpb24geCh0LGUpe2xldCBuPXQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoZSk7aWYobiYmbi5sZW5ndGgpcmV0dXJuIG5bMF0udGV4dENvbnRlbnR9ZnVuY3Rpb24gSWUodCxlKXt2YXIgaTtpZighKChpPXQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoZSkpIT1udWxsJiZpLmxlbmd0aCkpcmV0dXJuW107bGV0IG49dC5nZXRFbGVtZW50c0J5VGFnTmFtZShlKSxyPVtdO2ZvcihsZXQgcyBvZiBBcnJheS5mcm9tKG4pKXtsZXQgbz1zLmdldEVsZW1lbnRzQnlUYWdOYW1lKFxcXCJuYW1lXFxcIik7aWYoIW98fCFvLmxlbmd0aHx8IW9bMF0udGV4dENvbnRlbnR8fG9bMF0udGV4dENvbnRlbnQuaW5jbHVkZXMoXFxcIlNwZWxsY2FzdGluZ1xcXCIpKWNvbnRpbnVlO2xldCBsPVtdLHU9cy5nZXRFbGVtZW50c0J5VGFnTmFtZShcXFwidGV4dFxcXCIpO2ZvcihsZXQgYSBvZiBBcnJheS5mcm9tKHUpKWwucHVzaChhLnRleHRDb250ZW50KTtyLnB1c2goe25hbWU6b1swXS50ZXh0Q29udGVudCxkZXNjOmwuam9pbihcXFwiIFxcXCIpfSl9cmV0dXJuIHJ9ZnVuY3Rpb24gem4odCl7dmFyIHI7aWYoISgocj10LmdldEVsZW1lbnRzQnlUYWdOYW1lKFxcXCJ0cmFpdFxcXCIpKSE9bnVsbCYmci5sZW5ndGgpKXJldHVybltdO2xldCBuPUFycmF5LmZyb20odC5nZXRFbGVtZW50c0J5VGFnTmFtZShcXFwidHJhaXRcXFwiKSkuZmluZChpPT57dmFyIHM7cmV0dXJuKHM9aS5nZXRFbGVtZW50c0J5VGFnTmFtZShcXFwibmFtZVxcXCIpWzBdKT09bnVsbD92b2lkIDA6cy50ZXh0Q29udGVudC5pbmNsdWRlcyhcXFwiU3BlbGxjYXN0aW5nXFxcIil9KTtyZXR1cm4gbj9BcnJheS5mcm9tKG4uZ2V0RWxlbWVudHNCeVRhZ05hbWUoXFxcInRleHRcXFwiKSkubWFwKGk9PmkudGV4dENvbnRlbnQucmVwbGFjZSgvKCYjODIyNjt8XHUyMDIyKS91LFxcXCJcXFwiKS50cmltKCkpLmZpbHRlcihpPT5pLmxlbmd0aCk6W119ZnVuY3Rpb24gSG4odCl7dmFyIHI7aWYoISgocj10LmdldEVsZW1lbnRzQnlUYWdOYW1lKFxcXCJza2lsbFxcXCIpKSE9bnVsbCYmci5sZW5ndGgpKXJldHVybltdO2xldCBlPXQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXFxcInNraWxsXFxcIilbMF0udGV4dENvbnRlbnQuc3BsaXQoXFxcIiwgXFxcIiksbj1bXTtyZXR1cm4gZS5mb3JFYWNoKGk9PntsZXQgcz1pLnNwbGl0KC9cXFxcc1tcXFxcK1xcXFwtXS8pO24ucHVzaCh7W3NbMF1dOk51bWJlcihzWzFdKX0pfSksbn12YXIgS249e1N0cjpcXFwic3RyZW5ndGhcXFwiLERleDpcXFwiZGV4dGVyaXR5XFxcIixDb246XFxcImNvbnN0aXR1dGlvblxcXCIsSW50OlxcXCJpbnRlbGxpZ2VuY2VcXFwiLFdpczpcXFwid2lzZG9tXFxcIixDaGE6XFxcImNoYXJpc21hXFxcIn07ZnVuY3Rpb24gWW4odCl7dmFyIHI7aWYoISgocj10LmdldEVsZW1lbnRzQnlUYWdOYW1lKFxcXCJzYXZlXFxcIikpIT1udWxsJiZyLmxlbmd0aCkpcmV0dXJuW107bGV0IGU9dC5nZXRFbGVtZW50c0J5VGFnTmFtZShcXFwic2F2ZVxcXCIpWzBdLnRleHRDb250ZW50LnNwbGl0KFxcXCIsIFxcXCIpLG49W107cmV0dXJuIGUuZm9yRWFjaChpPT57bGV0IHM9aS5zcGxpdCgvXFxcXHNbXFxcXCtcXFxcLV0vKTtuLnB1c2goe1tLbltzWzBdXV06TnVtYmVyKHNbMV0pfSl9KSxufWZ1bmN0aW9uIGNuKHQsZSl7dmFyIHMsbztpZighKChzPXQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXFxcImhwXFxcIikpIT1udWxsJiZzLmxlbmd0aCkpcmV0dXJuXFxcIlxcXCI7bGV0IG49dC5nZXRFbGVtZW50c0J5VGFnTmFtZShcXFwiaHBcXFwiKVswXS50ZXh0Q29udGVudCxbLHIsaV09KG89bi5tYXRjaCgvKFxcXFxkKykgXFxcXCgoW1xcXFxzXFxcXFNdKylcXFxcKS8pKSE9bnVsbD9vOlssXFxcIlxcXCIsXFxcIlxcXCJdO3JldHVybntocDpyLGhpdF9kaWNlOml9W2VdfXZhciBYbj17VDpcXFwidGlueVxcXCIsUzpcXFwic21hbGxcXFwiLE06XFxcIm1lZGl1bVxcXCIsTDpcXFwibGFyZ2VcXFwiLEg6XFxcImh1Z2VcXFwiLEc6XFxcImdhcmdhbnR1YW5cXFwifTtmdW5jdGlvbiBxbih0KXt2YXIgZTtyZXR1cm4gdC5nZXRFbGVtZW50c0J5VGFnTmFtZShcXFwic2l6ZVxcXCIpJiYoZT1Yblt0LmdldEVsZW1lbnRzQnlUYWdOYW1lKFxcXCJzaXplXFxcIilbMF0udGV4dENvbnRlbnRdKSE9bnVsbD9lOlxcXCJcXFwifWZ1bmN0aW9uIFpuKHQpe3ZhciBlO2lmKHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXFxcImFjXFxcIikpe2xldFssbl09KGU9dC5nZXRFbGVtZW50c0J5VGFnTmFtZShcXFwiYWNcXFwiKVswXSk9PW51bGw/dm9pZCAwOmUudGV4dENvbnRlbnQubWF0Y2goLyhcXFxcZCspLyk7cmV0dXJuIE51bWJlcihuKX1yZXR1cm4gMH1mdW5jdGlvbiBRbih0KXt2YXIgbixyLGkscyxvLGw7bGV0IGU9XFxcIlVua25vd25cXFwiO2lmKChuPXQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXFxcInNvdXJjZVxcXCIpKSE9bnVsbCYmbi5sZW5ndGgpZT10LmdldEVsZW1lbnRzQnlUYWdOYW1lKFxcXCJzb3VyY2VcXFwiKVswXS50ZXh0Q29udGVudDtlbHNlIGlmKCgocj10LmdldEVsZW1lbnRzQnlUYWdOYW1lKFxcXCJ0cmFpdFxcXCIpKT09bnVsbD92b2lkIDA6ci5sZW5ndGgpJiZBcnJheS5mcm9tKHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXFxcInRyYWl0XFxcIikpLmZpbmQodT0+e3ZhciBhO3JldHVybigoYT11LmdldEVsZW1lbnRzQnlUYWdOYW1lKFxcXCJuYW1lXFxcIikpPT1udWxsP3ZvaWQgMDphWzBdLnRleHRDb250ZW50KT09XFxcIlNvdXJjZVxcXCJ9KSl7bGV0IHU9QXJyYXkuZnJvbSh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKFxcXCJ0cmFpdFxcXCIpKS5maW5kKGE9Pnt2YXIgZixoO3JldHVybigoaD0oZj1hLmdldEVsZW1lbnRzQnlUYWdOYW1lKFxcXCJuYW1lXFxcIikpPT1udWxsP3ZvaWQgMDpmWzBdKT09bnVsbD92b2lkIDA6aC50ZXh0Q29udGVudCk9PVxcXCJTb3VyY2VcXFwifSk7ZT0obz0ocz0oaT11PT1udWxsP3ZvaWQgMDp1LmdldEVsZW1lbnRzQnlUYWdOYW1lKFxcXCJ0ZXh0XFxcIikpPT1udWxsP3ZvaWQgMDppWzBdKT09bnVsbD92b2lkIDA6cy50ZXh0Q29udGVudCk9PW51bGw/dm9pZCAwOm8ucmVwbGFjZSgvcC4gXFxcXGQrLyxcXFwiXFxcIikudHJpbSgpfWVsc2UgaWYoKGw9dC5nZXRFbGVtZW50c0J5VGFnTmFtZShcXFwiZGVzY3JpcHRpb25cXFwiKSkhPW51bGwmJmwubGVuZ3RoKXtsZXQgdT10LmdldEVsZW1lbnRzQnlUYWdOYW1lKFxcXCJkZXNjcmlwdGlvblxcXCIpLGE9XFxcIlNvdXJjZTogXFxcIjtpZih1WzBdLnRleHRDb250ZW50LmluY2x1ZGVzKGEpKXtsZXQgZj11WzBdLnRleHRDb250ZW50Lmxhc3RJbmRleE9mKGEpO2U9dVswXS50ZXh0Q29udGVudC5zbGljZShmK2EubGVuZ3RoKS5zcGxpdCgvLCA/LylbMF19fXJldHVybiBlfXZhciBKbj17U1RSOlxcXCJzdHJlbmd0aFxcXCIsREVYOlxcXCJkZXh0ZXJpdHlcXFwiLENPTjpcXFwiY29uc3RpdHV0aW9uXFxcIixJTlQ6XFxcImludGVsbGlnZW5jZVxcXCIsV0lTOlxcXCJ3aXNkb21cXFwiLENIQTpcXFwiY2hhcmlzbWFcXFwifTthc3luYyBmdW5jdGlvbiBmbih0KXtyZXR1cm4gbmV3IFByb21pc2UoKGUsbik9PntsZXQgcj1uZXcgRmlsZVJlYWRlcixpPVtdO3Iub25sb2FkPWFzeW5jIHM9Pnt2YXIgbyxsLHUsYSxmLGgsUyxfLHksQyx2LE0sUCxSLHcsVyxkLEcsayxOLEwsYixZLEosVixCLEEsZyxlZSxFLFgsbnQscnQsaXQsc3QsYXQsb3QsY3QsbHQsdXQsZnQsbXQscHQsaHQsZ3QsZHQsU3QsdnQseXQsUnQsQ3QsRXQsX3Q7dHJ5e2xldCBQZT1KU09OLnBhcnNlKHMudGFyZ2V0LnJlc3VsdCksU249T2JqZWN0LmtleXMoUGUpLmZpbHRlcihrZT0+L15DcmVhdHVyZXNcXFxcLi8udGVzdChrZSkpO2ZvcihsZXQga2Ugb2YgU24pdHJ5e2xldCBUPVBlW2tlXSx2bj17bmFtZTpULk5hbWUsc291cmNlOihvPVQuU291cmNlKSE9bnVsbCYmby50cmltKCkubGVuZ3RoPyhsPVQuU291cmNlKT09bnVsbD92b2lkIDA6bC50cmltKCk6XFxcIlVua25vd25cXFwiLHR5cGU6KGY9KGE9KHU9VC5UeXBlKT09bnVsbD92b2lkIDA6dS5zcGxpdCgvLFxcXFxzPy8pKT09bnVsbD92b2lkIDA6YVswXSk9PW51bGw/dm9pZCAwOmYudHJpbSgpLHN1YnR5cGU6XFxcIlxcXCIsc2l6ZTpcXFwiXFxcIixhbGlnbm1lbnQ6KF89KFM9KGg9VC5UeXBlKT09bnVsbD92b2lkIDA6aC5zcGxpdCgvLFxcXFxzPy8pKT09bnVsbD92b2lkIDA6U1sxXSk9PW51bGw/dm9pZCAwOl8udHJpbSgpLGhwOih5PVQuSFApPT1udWxsP3ZvaWQgMDp5LlZhbHVlLGhpdF9kaWNlOihNPSh2PShDPVQuSFApPT1udWxsP3ZvaWQgMDpDLk5vdGVzKT09bnVsbD92b2lkIDA6di5yZXBsYWNlKC8oWygpXSkvZyxcXFwiXFxcIikpPT1udWxsP3ZvaWQgMDpNLnRyaW0oKSxhYzpULkFDLlZhbHVlLHNwZWVkOihSPShQPVQuU3BlZWQpPT1udWxsP3ZvaWQgMDpQLmpvaW4oXFxcIiwgXFxcIikpPT1udWxsP3ZvaWQgMDpSLnRyaW0oKSxzdGF0czpPYmplY3QudmFsdWVzKCh3PVQuQWJpbGl0aWVzKSE9bnVsbD93Ont9KSxkYW1hZ2VfaW1tdW5pdGllczooaz0oRz0oZD0oVz1ULkRhbWFnZUltbXVuaXRpZXMpPT1udWxsP3ZvaWQgMDpXLmpvaW4oXFxcIjsgXFxcIikpPT1udWxsP3ZvaWQgMDpkLnRvTG93ZXJDYXNlKCkpPT1udWxsP3ZvaWQgMDpHLnRyaW0oKSkhPW51bGw/azpcXFwiXFxcIixkYW1hZ2VfcmVzaXN0YW5jZXM6KFk9KGI9KEw9KE49VC5EYW1hZ2VSZXNpc3RhbmNlcyk9PW51bGw/dm9pZCAwOk4uam9pbihcXFwiLCBcXFwiKSk9PW51bGw/dm9pZCAwOkwudG9Mb3dlckNhc2UoKSk9PW51bGw/dm9pZCAwOmIudHJpbSgpKSE9bnVsbD9ZOlxcXCJcXFwiLGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6KEE9KEI9KFY9KEo9VC5EYW1hZ2VWdWxuZXJhYmlsaXRpZXMpPT1udWxsP3ZvaWQgMDpKLmpvaW4oXFxcIiwgXFxcIikpPT1udWxsP3ZvaWQgMDpWLnRvTG93ZXJDYXNlKCkpPT1udWxsP3ZvaWQgMDpCLnRyaW0oKSkhPW51bGw/QTpcXFwiXFxcIixjb25kaXRpb25faW1tdW5pdGllczooWD0oRT0oZWU9KGc9VC5Db25kaXRpb25JbW11bml0aWVzKT09bnVsbD92b2lkIDA6Zy5qb2luKFxcXCIsIFxcXCIpKT09bnVsbD92b2lkIDA6ZWUudG9Mb3dlckNhc2UoKSk9PW51bGw/dm9pZCAwOkUudHJpbSgpKSE9bnVsbD9YOlxcXCJcXFwiLHNhdmVzOihydD0obnQ9VC5TYXZlcyk9PW51bGw/dm9pZCAwOm50Lm1hcCgoe05hbWU6RCxNb2RpZmllcjpGZX0pPT4oe1tKbltEXV06RmV9KSkpIT1udWxsP3J0OltdLHNraWxsc2F2ZXM6KHN0PShpdD1ULlNraWxscyk9PW51bGw/dm9pZCAwOml0Lm1hcCgoe05hbWU6RCxNb2RpZmllcjpGZX0pPT4oe1tEXTpGZX0pKSkhPW51bGw/c3Q6W10sc2Vuc2VzOihjdD0ob3Q9KGF0PVQuU2Vuc2VzKT09bnVsbD92b2lkIDA6YXQuam9pbihcXFwiLCBcXFwiKSk9PW51bGw/dm9pZCAwOm90LnRyaW0oKSkhPW51bGw/Y3Q6XFxcIlxcXCIsbGFuZ3VhZ2VzOihmdD0odXQ9KGx0PVQuTGFuZ3VhZ2VzKT09bnVsbD92b2lkIDA6bHQuam9pbihcXFwiLCBcXFwiKSk9PW51bGw/dm9pZCAwOnV0LnRyaW0oKSkhPW51bGw/ZnQ6XFxcIlxcXCIsY3I6KHB0PShtdD1ULkNoYWxsZW5nZSk9PW51bGw/dm9pZCAwOm10LnRyaW0oKSkhPW51bGw/cHQ6XFxcIlxcXCIsdHJhaXRzOihndD0oaHQ9VC5UcmFpdHMpPT1udWxsP3ZvaWQgMDpodC5tYXAoRD0+KHtuYW1lOkQuTmFtZSxkZXNjOkQuQ29udGVudH0pKSkhPW51bGw/Z3Q6W10sYWN0aW9uczooU3Q9KGR0PVQuQWN0aW9ucyk9PW51bGw/dm9pZCAwOmR0Lm1hcChEPT4oe25hbWU6RC5OYW1lLGRlc2M6RC5Db250ZW50fSkpKSE9bnVsbD9TdDpbXSxib251c19hY3Rpb25zOih5dD0odnQ9VC5Cb251c0FjdGlvbnMpPT1udWxsP3ZvaWQgMDp2dC5tYXAoRD0+KHtuYW1lOkQuTmFtZSxkZXNjOkQuQ29udGVudH0pKSkhPW51bGw/eXQ6W10scmVhY3Rpb25zOihDdD0oUnQ9VC5SZWFjdGlvbnMpPT1udWxsP3ZvaWQgMDpSdC5tYXAoRD0+KHtuYW1lOkQuTmFtZSxkZXNjOkQuQ29udGVudH0pKSkhPW51bGw/Q3Q6W10sbGVnZW5kYXJ5X2FjdGlvbnM6KF90PShFdD1ULkxlZ2VuZGFyeUFjdGlvbnMpPT1udWxsP3ZvaWQgMDpFdC5tYXAoRD0+KHtuYW1lOkQuTmFtZSxkZXNjOkQuQ29udGVudH0pKSkhPW51bGw/X3Q6W10saW1hZ2U6bnVsbH07aS5wdXNoKHZuKX1jYXRjaChUKXtjb250aW51ZX1lKGkpfWNhdGNoKFBlKXtuKCl9fSxyLnJlYWRBc1RleHQodCl9KX1hc3luYyBmdW5jdGlvbiBtbih0KXtyZXR1cm4gbmV3IFByb21pc2UoKGUsbik9PntsZXQgcj1uZXcgRmlsZVJlYWRlcjtyLm9ubG9hZD1hc3luYyBpPT57dmFyIG8sbCx1LGEsZixoLFMsXyx5LEMsdixNLFAsUix3LFcsZCxHLGssTixMLGIsWSxKLFY7bGV0IHM9W107dHJ5e2xldCBCPUpTT04ucGFyc2UoaS50YXJnZXQucmVzdWx0KSxBPVtdO0IuY3JlYXR1cmVzP0E9Qi5jcmVhdHVyZXM6QT1bQl07Zm9yKGxldCBnIG9mIEEpdHJ5e2xldCBlZT17aW1hZ2U6bnVsbCxuYW1lOmcubmFtZSxzb3VyY2U6XFxcIkNyaXR0ZXJEQlxcXCIsdHlwZTpnLnN0YXRzLnJhY2Usc3VidHlwZTpcXFwiXFxcIixzaXplOmcuc3RhdHMuc2l6ZSxhbGlnbm1lbnQ6Zy5zdGF0cy5hbGlnbm1lbnQsaHA6Zy5zdGF0cy5oaXRQb2ludHMsaGl0X2RpY2U6YCR7TWF0aC5mbG9vcihnLnN0YXRzLmV4dHJhSGVhbHRoRnJvbUNvbnN0aXR1dGlvbi9nLnN0YXRzLmFiaWxpdHlTY29yZU1vZGlmaWVycy5jb25zdGl0dXRpb24pfWQke2cuc3RhdHMuaGl0RGllU2l6ZX0gKyAke2cuc3RhdHMuZXh0cmFIZWFsdGhGcm9tQ29uc3RpdHV0aW9ufWAsYWM6Zy5zdGF0cy5hcm1vckNsYXNzLHNwZWVkOmcuc3RhdHMuc3BlZWQsc3RhdHM6W2cuc3RhdHMuYWJpbGl0eVNjb3Jlcy5zdHJlbmd0aCxnLnN0YXRzLmFiaWxpdHlTY29yZXMuZGV4dGVyaXR5LGcuc3RhdHMuYWJpbGl0eVNjb3Jlcy5jb25zdGl0dXRpb24sZy5zdGF0cy5hYmlsaXR5U2NvcmVzLmludGVsbGlnZW5jZSxnLnN0YXRzLmFiaWxpdHlTY29yZXMud2lzZG9tLGcuc3RhdHMuYWJpbGl0eVNjb3Jlcy5jaGFyaXNtYV0sZGFtYWdlX2ltbXVuaXRpZXM6KGw9KG89Zy5zdGF0cy5kYW1hZ2VJbW11bml0aWVzKT09bnVsbD92b2lkIDA6by5qb2luKFxcXCI7IFxcXCIpLnRvTG93ZXJDYXNlKCkudHJpbSgpKSE9bnVsbD9sOlxcXCJcXFwiLGRhbWFnZV9yZXNpc3RhbmNlczooYT0odT1nLnN0YXRzLmRhbWFnZVJlc2lzdGFuY2VzKT09bnVsbD92b2lkIDA6dS5qb2luKFxcXCIsIFxcXCIpLnRvTG93ZXJDYXNlKCkudHJpbSgpKSE9bnVsbD9hOlxcXCJcXFwiLGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6KGg9KGY9Zy5zdGF0cy5kYW1hZ2VWdWxuZXJhYmlsaXRpZXMpPT1udWxsP3ZvaWQgMDpmLmpvaW4oXFxcIiwgXFxcIikudG9Mb3dlckNhc2UoKS50cmltKCkpIT1udWxsP2g6XFxcIlxcXCIsY29uZGl0aW9uX2ltbXVuaXRpZXM6KF89KFM9Zy5zdGF0cy5jb25kaXRpb25JbW11bml0aWVzKT09bnVsbD92b2lkIDA6Uy5qb2luKFxcXCIsIFxcXCIpLnRvTG93ZXJDYXNlKCkudHJpbSgpKSE9bnVsbD9fOlxcXCJcXFwiLHNhdmVzOihDPSh5PWcuc3RhdHMuc2F2aW5nVGhyb3dzKT09bnVsbD92b2lkIDA6eS5tYXAoRT0+e3ZhciBYO2lmKCEoIShcXFwidmFsdWVcXFwiaW4gRSkmJiEoXFxcIm1vZGlmaWVyXFxcImluIEUpKSlyZXR1cm57W0UuYWJpbGl0eV06KFg9RS52YWx1ZSkhPW51bGw/WDpFLm1vZGlmaWVyfX0pLmZpbHRlcihFPT5FKSkhPW51bGw/QzpbXSxza2lsbHNhdmVzOihNPSh2PWcuc3RhdHMuc2tpbGxzKT09bnVsbD92b2lkIDA6di5tYXAoRT0+e3ZhciBYO2lmKCEoIShcXFwidmFsdWVcXFwiaW4gRSkmJiEoXFxcIm1vZGlmaWVyXFxcImluIEUpKSlyZXR1cm57W0UubmFtZV06KFg9RS52YWx1ZSkhPW51bGw/WDpFLm1vZGlmaWVyfX0pLmZpbHRlcihFPT5FKSkhPW51bGw/TTpbXSxzZW5zZXM6KFI9KFA9Zy5zdGF0cy5zZW5zZXMpPT1udWxsP3ZvaWQgMDpQLmpvaW4oXFxcIiwgXFxcIikudHJpbSgpKSE9bnVsbD9SOlxcXCJcXFwiLGxhbmd1YWdlczooVz0odz1nLnN0YXRzLmxhbmd1YWdlcyk9PW51bGw/dm9pZCAwOncuam9pbihcXFwiLCBcXFwiKS50cmltKCkpIT1udWxsP1c6XFxcIlxcXCIsY3I6KGQ9Zy5zdGF0cy5jaGFsbGVuZ2VSYXRpbmcpIT1udWxsP2Q6XFxcIlxcXCIsdHJhaXRzOihrPShHPWcuc3RhdHMuYWRkaXRpb25hbEFiaWxpdGllcyk9PW51bGw/dm9pZCAwOkcubWFwKEU9Pih7bmFtZTpFLm5hbWUsZGVzYzpFLmRlc2NyaXB0aW9uLnJlcGxhY2UoLzxbXj5dKj4vZyxcXFwiXFxcIil9KSkpIT1udWxsP2s6W10sYWN0aW9uczooTD0oTj1nLnN0YXRzLmFjdGlvbnMpPT1udWxsP3ZvaWQgMDpOLm1hcChFPT4oe25hbWU6RS5uYW1lLGRlc2M6RS5kZXNjcmlwdGlvbi5yZXBsYWNlKC88W14+XSo+L2csXFxcIlxcXCIpfSkpKSE9bnVsbD9MOltdLHJlYWN0aW9uczooWT0oYj1nLnN0YXRzLnJlYWN0aW9ucyk9PW51bGw/dm9pZCAwOmIubWFwKEU9Pih7bmFtZTpFLm5hbWUsZGVzYzpFLmRlc2NyaXB0aW9uLnJlcGxhY2UoLzxbXj5dKj4vZyxcXFwiXFxcIil9KSkpIT1udWxsP1k6W10sbGVnZW5kYXJ5X2FjdGlvbnM6KFY9KEo9Zy5zdGF0cy5sZWdlbmRhcnlBY3Rpb25zKT09bnVsbD92b2lkIDA6Si5tYXAoRT0+KHtuYW1lOkUubmFtZSxkZXNjOkUuZGVzY3JpcHRpb24ucmVwbGFjZSgvPFtePl0qPi9nLFxcXCJcXFwiKX0pKSkhPW51bGw/VjpbXX07cy5wdXNoKGVlKX1jYXRjaChlZSl7Y29udGludWV9ZShzKX1jYXRjaChCKXtuKCl9fSxyLnJlYWRBc1RleHQodCl9KX1mdW5jdGlvbiBBZSh0LGU9MCxuPVxcXCIgXFxcIixyPSEwKXtsZXQgaT1bXTtpZihlPT01fHx0PT1udWxsKXJldHVyblxcXCJcXFwiO2lmKHR5cGVvZiB0PT1cXFwic3RyaW5nXFxcIilyZXR1cm4gdDtpZih0eXBlb2YgdD09XFxcIm51bWJlclxcXCIpcmV0dXJuYCR7dH1gO2lmKEFycmF5LmlzQXJyYXkodCkpaS5wdXNoKGAke3I/XFxcIihcXFwiOlxcXCJcXFwifSR7dC5tYXAocz0+QWUocyxlKyspKS5qb2luKG4pfSR7cj9cXFwiKVxcXCI6XFxcIlxcXCJ9YCk7ZWxzZSBpZih0eXBlb2YgdD09XFxcIm9iamVjdFxcXCIpZm9yKGxldCBzIG9mIE9iamVjdC52YWx1ZXModCkpaS5wdXNoKEFlKHMsZSsrKSk7cmV0dXJuIGkuam9pbihcXFwiIFxcXCIpfXZhciBlcj17c3RyOlxcXCJzdHJlbmd0aFxcXCIsZGV4OlxcXCJkZXh0ZXJpdHlcXFwiLGNvbjpcXFwiY29uc3RpdHV0aW9uXFxcIix3aXM6XFxcIndpc2RvbVxcXCIsaW50OlxcXCJpbnRlbGxpZ2VuY2VcXFwiLGNoYTpcXFwiY2hhcmlzbWFcXFwifTtmdW5jdGlvbiBIKHQpe3JldHVybiB0P3QucmVwbGFjZSgve0Bjb25kaXRpb24gKC4rPyl9L2csXFxcIiQxXFxcIikucmVwbGFjZSgve0BpdGVtICguKz8pfS9nLFxcXCIkMVxcXCIpLnJlcGxhY2UoL3tAc3BlbGwgKFtcXFxcc1xcXFxTXSs/KX0vZyxcXFwiJDFcXFwiKS5yZXBsYWNlKC97QHJlY2hhcmdlICguKz8pfS9nLFxcXCIoUmVjaGFyZ2UgJDEtNilcXFwiKS5yZXBsYWNlKC97QHJlY2hhcmdlfS9nLFxcXCIoUmVjaGFyZ2UgNilcXFwiKS5yZXBsYWNlKC97QGh9L2csXFxcIlxcXCIpLnJlcGxhY2UoL3tAZGFtYWdlICguKz8pfS9nLFxcXCIkMVxcXCIpLnJlcGxhY2UoL3tAYXRrIG1zfS9nLFxcXCJNZWxlZSBTcGVsbCBBdHRhY2tcXFwiKS5yZXBsYWNlKC97QGF0ayByc30vZyxcXFwiUmFuZ2VkIFNwZWxsIEF0dGFja1xcXCIpLnJlcGxhY2UoL3tAYXRrIG13fS9nLFxcXCJNZWxlZSBXZWFwb24gQXR0YWNrXFxcIikucmVwbGFjZSgve0BhdGsgcnd9L2csXFxcIlJhbmdlZCBXZWFwb24gQXR0YWNrXFxcIikucmVwbGFjZSgve0BhdGsgbXcscnd9L2csXFxcIk1lbGVlIC8gUmFuZ2VkIFdlYXBvbiBBdHRhY2tcXFwiKS5yZXBsYWNlKC97QGNyZWF0dXJlICguKz8pfS9nLFxcXCIkMVxcXCIpLnJlcGxhY2UoL3tAc2tpbGwgKC4rPyl9L2csXFxcIiQxXFxcIikucmVwbGFjZSgve0BkaWNlICguKz8pfS9nLFxcXCIkMVxcXCIpLnJlcGxhY2UoL3tAaGl0IChcXFxcZCs/KX0vZyxcXFwiKyQxXFxcIikucmVwbGFjZSgve0BkYyAoXFxcXGQrPyl9L2csXFxcIiQxXFxcIikucmVwbGFjZSgve0BxdWlja3JlZiAoLis/KVxcXFx8XFxcXHwuKz99LyxcXFwiJDFcXFwiKTpcXFwiXFxcIn1hc3luYyBmdW5jdGlvbiBwbih0KXtyZXR1cm4gbmV3IFByb21pc2UoKGUsbik9PntsZXQgcj1uZXcgRmlsZVJlYWRlcjtyLm9ubG9hZD1hc3luYyBpPT57dmFyIHMsbyxsLHUsYSxmLGgsUyxfLHksQyx2LE0sUDt0cnl7bGV0IFI9SlNPTi5wYXJzZShpLnRhcmdldC5yZXN1bHQpLHc7XFxcIm1vbnN0ZXJcXFwiaW4gUj93PVIubW9uc3RlcjpBcnJheS5pc0FycmF5KFIpP3c9Ujp0eXBlb2YgUj09XFxcIm9iamVjdFxcXCI/dz1bUl06bihcXFwiSW52YWxpZCBtb25zdGVyIEpTT04gcHJvdmlkZWQuXFxcIik7bGV0IFc9W107Zm9yKGxldCBkIG9mIHcpdHJ5e2xldCBHPXtpbWFnZTpudWxsLG5hbWU6ZC5uYW1lLHNvdXJjZTptcihkKSx0eXBlOnRyKGQudHlwZSksc3VidHlwZTpcXFwiXFxcIixzaXplOl9yWyhzPWQuc2l6ZSk9PW51bGw/dm9pZCAwOnNbMF1dLGFsaWdubWVudDpscihkKSxocDpkLmhwJiZcXFwiYXZlcmFnZVxcXCJpbiBkLmhwPyhvPWQuaHApPT1udWxsP3ZvaWQgMDpvLmF2ZXJhZ2U6bnVsbCxoaXRfZGljZTpkLmhwJiZcXFwiZm9ybXVsYVxcXCJpbiBkLmhwPyhsPWQuaHApPT1udWxsP3ZvaWQgMDpsLmZvcm11bGE6XFxcIlxcXCIsYWM6aXIoZC5hYyksc3BlZWQ6dXIoZCksc3RhdHM6W2Quc3RyLGQuZGV4LGQuY29uLGQuaW50LGQud2lzLGQuY2hhXSxkYW1hZ2VfaW1tdW5pdGllczpIKGZlKGQuaW1tdW5lKSksZGFtYWdlX3Jlc2lzdGFuY2VzOkgoZmUoZC5yZXNpc3QpKSxkYW1hZ2VfdnVsbmVyYWJpbGl0aWVzOkgoZmUoZC52dWxuZXJhYmxlKSksY29uZGl0aW9uX2ltbXVuaXRpZXM6SChmZShkLmNvbmRpdGlvbkltbXVuZSkpLHNhdmVzOk9iamVjdC5lbnRyaWVzKCh1PWQuc2F2ZSkhPW51bGw/dTp7fSkubWFwKGs9Pnt2YXIgTCxiO2lmKCFrfHwha1sxXSlyZXR1cm47bGV0WyxOXT0oYj0oTD1rWzFdKT09bnVsbD92b2lkIDA6TC5tYXRjaCgvLio/KFxcXFxkKykvKSkhPW51bGw/YjpbXTtpZighIU4pcmV0dXJue1tlcltrWzBdXV06Tn19KS5maWx0ZXIoaz0+ayksc2tpbGxzYXZlczptYShkKSxzZW5zZXM6ZnIoZCksbGFuZ3VhZ2VzOkFlKGQubGFuZ3VhZ2VzLDAsXFxcIiwgXFxcIiwhMSksY3I6bnIoZC5jciksdHJhaXRzOihmPShhPWQudHJhaXQpPT1udWxsP3ZvaWQgMDphLmZsYXRNYXAoVGUpKSE9bnVsbD9mOltdLGFjdGlvbnM6KFM9KGg9ZC5hY3Rpb24pPT1udWxsP3ZvaWQgMDpoLmZsYXRNYXAoVGUpKSE9bnVsbD9TOltdLGJvbnVzX2FjdGlvbnM6KHk9KF89ZC5ib251cyk9PW51bGw/dm9pZCAwOl8uZmxhdE1hcChUZSkpIT1udWxsP3k6W10scmVhY3Rpb25zOih2PShDPWQucmVhY3Rpb24pPT1udWxsP3ZvaWQgMDpDLmZsYXRNYXAoVGUpKSE9bnVsbD92OltdLGxlZ2VuZGFyeV9hY3Rpb25zOihQPShNPWQubGVnZW5kYXJ5KT09bnVsbD92b2lkIDA6TS5mbGF0TWFwKFRlKSkhPW51bGw/UDpbXSxzcGVsbHM6Y3IoZCksc3BlbGxzTm90ZXM6cnIoZCkuam9pbihcXFwiIFxcXCIpfTtXLnB1c2goRyl9Y2F0Y2goRyl7Y29uc29sZS5lcnJvcihHKTtjb250aW51ZX1lKFcpfWNhdGNoKFIpe2NvbnNvbGUuZXJyb3IoXFxcInJlamVjdCEhIVxcXCIsUiksbihSKX19LHIucmVhZEFzVGV4dCh0KX0pfWZ1bmN0aW9uIHRyKHQpe2lmKCEhdClyZXR1cm4gdHlwZW9mIHQ9PVxcXCJzdHJpbmdcXFwiP3Q6dC50eXBlfWZ1bmN0aW9uIG5yKHQpe2lmKCEhdClyZXR1cm4gdHlwZW9mIHQ9PVxcXCJzdHJpbmdcXFwiP3Q6dC5jcn1mdW5jdGlvbiBycih0KXtsZXQgZT1bXTtmb3IobGV0IG4gaW4gdC5zcGVsbGNhc3RpbmcpZS5wdXNoKEFlKHQuc3BlbGxjYXN0aW5nW25dLmZvb3RlckVudHJpZXMsMCxcXFwiLCBcXFwiLCExKSk7cmV0dXJuIGV9ZnVuY3Rpb24gZmUodCl7aWYoIXQpcmV0dXJuXFxcIlxcXCI7bGV0IGU9W107Zm9yKGxldCBuIG9mIHQpe2lmKHR5cGVvZiBuPT1cXFwic3RyaW5nXFxcIil7ZS5wdXNoKG4pO2NvbnRpbnVlfWlmKFxcXCJzcGVjaWFsXFxcImluIG4pe2UucHVzaChuLnNwZWNpYWwpO2NvbnRpbnVlfWlmKFxcXCJpbW11bmVcXFwiaW4gbil7ZS5wdXNoKGAke2ZlKG4uaW1tdW5lKX0ke24ubm90ZT9cXFwiIFxcXCI6XFxcIlxcXCJ9JHtuLm5vdGU/bi5ub3RlOlxcXCJcXFwifWApO2NvbnRpbnVlfWlmKFxcXCJyZXNpc3RcXFwiaW4gbil7ZS5wdXNoKGAke2ZlKG4ucmVzaXN0KX0ke24ubm90ZT9cXFwiIFxcXCI6XFxcIlxcXCJ9JHtuLm5vdGU/bi5ub3RlOlxcXCJcXFwifWApO2NvbnRpbnVlfX1yZXR1cm4gZS5qb2luKFxcXCIsIFxcXCIpfWZ1bmN0aW9uIGlyKHQ9W10pe3ZhciBuO2xldFtlXT10O2lmKCEhZSl7aWYodHlwZW9mIGU9PVxcXCJudW1iZXJcXFwiKXJldHVybiBlO2lmKHR5cGVvZiBlPT1cXFwic3RyaW5nXFxcIil7bGV0W3IsaV09KG49ZS5tYXRjaCgvKFxcXFxkKykvKSkhPW51bGw/bjpbXTtyZXR1cm4gaT9OdW1iZXIoaSk6bnVsbH1pZih0eXBlb2YgZT09XFxcIm9iamVjdFxcXCIpcmV0dXJuXFxcInNwZWNpYWxcXFwiaW4gZT9udWxsOmUuYWN9fXZhciBzcj17MDpcXFwiQ2FudHJpcHMgKGF0IHdpbGwpXFxcIiwxOlxcXCIxc3QgbGV2ZWxcXFwiLDI6XFxcIjJuZCBsZXZlbFxcXCIsMzpcXFwiM3JkIGxldmVsXFxcIiw0OlxcXCI0dGggbGV2ZWxcXFwiLDU6XFxcIjV0aCBsZXZlbFxcXCIsNjpcXFwiNnRoIGxldmVsXFxcIiw3OlxcXCI3dGggbGV2ZWxcXFwiLDg6XFxcIjh0aCBsZXZlbFxcXCIsOTpcXFwiOXRoIGxldmVsXFxcIn07ZnVuY3Rpb24gWmUodCl7bGV0IGU9W107Zm9yKGxldCBuIG9mIHQpe2lmKHR5cGVvZiBuPT1cXFwic3RyaW5nXFxcIil7ZS5wdXNoKG4pO2NvbnRpbnVlfSFuLmhpZGRlbiYmbi5lbnRyeSYmbi5lbnRyeS5sZW5ndGgmJmUucHVzaChuLmVudHJ5KX1yZXR1cm4gSChlLmpvaW4oXFxcIiwgXFxcIikpfWZ1bmN0aW9uIGFyKHQpe2xldCBlPVtdO2ZvcihsZXQgbiBvZiBPYmplY3Qua2V5cyh0KSl7bGV0IHI9dFtuXSxpPU51bWJlcihuLnJlcGxhY2UoL1teMC05XS8sXFxcIlxcXCIpKTtlLnB1c2goW2ksWmUocildKX1yZXR1cm4gZX1mdW5jdGlvbiBvcih0KXt2YXIgaSxzO2xldCBlPVtIKCgoaT10LmhlYWRlckVudHJpZXMpIT1udWxsP2k6W10pLmpvaW4oYFxcbmApKV07aWYoXFxcInNwZWxsc1xcXCJpbiB0KXRyeXtmb3IobGV0IG8gaW4ocz10LnNwZWxscykhPW51bGw/czp7fSl7bGV0IGw9dC5zcGVsbHNbb10se3NwZWxsczp1fT1sLGE9YCR7c3Jbb119YDthKz1cXFwic2xvdHNcXFwiaW4gbD9gICgke2wuc2xvdHN9IHNsb3RzKWA6XFxcIlxcXCI7bGV0IGY9SCh1LmpvaW4oXFxcIiwgXFxcIikpO2UucHVzaCh7W2FdOmZ9KX19Y2F0Y2gobyl7dGhyb3cgbmV3IEVycm9yKFxcXCJUaGVyZSB3YXMgYW4gZXJyb3IgcGFyc2luZyB0aGUgc3BlbGxzLlxcXCIpfWlmKFxcXCJ3aWxsXFxcImluIHQmJnQud2lsbC5sZW5ndGg+MCl0cnl7ZS5wdXNoKHtcXFwiQXQgd2lsbFxcXCI6WmUodC53aWxsKX0pfWNhdGNoKG8pe3Rocm93IG5ldyBFcnJvcihcXFwiVGhlcmUgd2FzIGFuIGVycm9yIHBhcnNpbmcgdGhlIGF0LXdpbGwgc3BlbGxzLlxcXCIpfWlmKFxcXCJyaXR1YWxcXFwiaW4gdCYmdC5yaXR1YWwubGVuZ3RoPjApdHJ5e2UucHVzaCh7Uml0dWFsczpaZSh0LnJpdHVhbCl9KX1jYXRjaChvKXt0aHJvdyBuZXcgRXJyb3IoXFxcIlRoZXJlIHdhcyBhbiBlcnJvciBwYXJzaW5nIHRoZSByaXR1YWwgc3BlbGxzLlxcXCIpfWxldCBuPVtcXFwicmVzdFxcXCIsXFxcImRhaWx5XFxcIixcXFwid2Vla2x5XFxcIixcXFwieWVhcmx5XFxcIixcXFwiY2hhcmdlc1xcXCJdLHI9e3Jlc3Q6XFxcIi9yZXN0IGVhY2hcXFwiLGRhaWx5OlxcXCIvZGF5IGVhY2hcXFwiLHdlZWtseTpcXFwiL3dlZWsgZWFjaFxcXCIseWVhcmx5OlxcXCIveWVhciBlYWNoXFxcIixjaGFyZ2VzOlxcXCIgY2hhcmdlc1xcXCJ9O2ZvcihsZXQgbyBvZiBuKWlmKG8gaW4gdCl7bGV0IGw9YXIodFtvXSk7Zm9yKGxldCB1IG9mIGwuc29ydCgoYSxmKT0+ZlswXS1hWzBdKSllLnB1c2goe1tgJHt1WzBdfSR7cltvXX1gXTp1WzFdfSl9cmV0dXJuIGV9ZnVuY3Rpb24gY3IodCl7cmV0dXJuIXQuc3BlbGxjYXN0aW5nfHwhdC5zcGVsbGNhc3RpbmcubGVuZ3RoP1tdOnQuc3BlbGxjYXN0aW5nLmZsYXRNYXAob3IpfWZ1bmN0aW9uIGxyKHQpe3JldHVybiB0LmFsaWdubWVudD9RZSh0LmFsaWdubWVudCk6bnVsbH1mdW5jdGlvbiBRZSh0KXt2YXIgbjtpZighdClyZXR1cm4gbnVsbDtsZXQgZT1bXTtpZihBcnJheS5pc0FycmF5KHQpKWZvcihsZXQgciBvZiB0KWUucHVzaChRZShyKSk7ZWxzZSBpZih0eXBlb2YgdD09XFxcIm9iamVjdFxcXCIpe2lmKFxcXCJzcGVjaWFsXFxcImluIHQmJnQuc3BlY2lhbCE9bnVsbClyZXR1cm4gdC5zcGVjaWFsO2lmKFxcXCJhbGlnbm1lbnRcXFwiaW4gdClyZXR1cm5gJHsoKG49dC5hbGlnbm1lbnQpIT1udWxsP246W10pLm1hcChyPT5RZShyKSkuam9pbihcXFwiIFxcXCIpfSR7dC5jaGFuY2U/YCAoJHt0LmNoYW5jZX0lKWA6XFxcIlxcXCJ9JHt0Lm5vdGU/YCAoJHt0Lm5vdGV9KWA6XFxcIlxcXCJ9YH1lbHNle3N3aXRjaCh0LnRvVXBwZXJDYXNlKCkpe2Nhc2VcXFwiTFxcXCI6cmV0dXJuXFxcImxhd2Z1bFxcXCI7Y2FzZVxcXCJOXFxcIjpyZXR1cm5cXFwibmV1dHJhbFxcXCI7Y2FzZVxcXCJOWFxcXCI6cmV0dXJuXFxcIm5ldXRyYWwgKGxhdy9jaGFvcyBheGlzKVxcXCI7Y2FzZVxcXCJOWVxcXCI6cmV0dXJuXFxcIm5ldXRyYWwgKGdvb2QvZXZpbCBheGlzKVxcXCI7Y2FzZVxcXCJDXFxcIjpyZXR1cm5cXFwiY2hhb3RpY1xcXCI7Y2FzZVxcXCJHXFxcIjpyZXR1cm5cXFwiZ29vZFxcXCI7Y2FzZVxcXCJFXFxcIjpyZXR1cm5cXFwiZXZpbFxcXCI7Y2FzZVxcXCJVXFxcIjpyZXR1cm5cXFwidW5hbGlnbmVkXFxcIjtjYXNlXFxcIkFcXFwiOnJldHVyblxcXCJhbnkgYWxpZ25tZW50XFxcIn1yZXR1cm4gdH1yZXR1cm4gZS5qb2luKFxcXCIgb3IgXFxcIil9ZnVuY3Rpb24gdXIodCl7dmFyIGwsdTtsZXQgZT10LnNwZWVkO2lmKCFlKXJldHVyblxcXCJcXFxcdTIwMTRcXFwiO2lmKHR5cGVvZiBlPT1cXFwibnVtYmVyXFxcIilyZXR1cm5gJHtlfWA7ZnVuY3Rpb24gbihhKXtyZXR1cm4gdHlwZW9mIGE9PVxcXCJudW1iZXJcXFwiP2E6YS5udW1iZXIhPW51bGw/YS5udW1iZXI6YX1mdW5jdGlvbiByKGEpe3ZhciBmO3JldHVybiB0eXBlb2YgYT09XFxcIm51bWJlclxcXCI/XFxcIlxcXCI6KGY9YT09bnVsbD92b2lkIDA6YS5jb25kaXRpb24pIT1udWxsP2Y6XFxcIlxcXCJ9bGV0IGk9W10scz1bXFxcIndhbGtcXFwiLFxcXCJidXJyb3dcXFwiLFxcXCJjbGltYlxcXCIsXFxcImZseVxcXCIsXFxcInN3aW1cXFwiXTtmb3IobGV0IGEgb2Ygcyl7aWYoYSE9XFxcIndhbGtcXFwiJiYhKGEgaW4gZSkmJiEoYSBpbigobD1lLmFsdGVybmF0ZSkhPW51bGw/bDp7fSkpKWNvbnRpbnVlO2xldCBmPVtdO2kucHVzaChgJHthPT09XFxcIndhbGtcXFwiP1xcXCJcXFwiOmAke2F9IGB9JHtuKCh1PWVbYV0pIT1udWxsP3U6MCl9IGZ0LiAke3IoZVthXSl9YC50cmltKCkpLGUuYWx0ZXJuYXRlJiZlLmFsdGVybmF0ZVthXSYmZS5hbHRlcm5hdGVbYV0uZm9yRWFjaChoPT57aS5wdXNoKGAke2E9PT1cXFwid2Fsa1xcXCI/XFxcIlxcXCI6YCR7YX0gYH0ke24oaCE9bnVsbD9oOjApfSBmdC4gJHtyKGgpfWAudHJpbSgpKX0pfWxldCBvPVxcXCIsIFxcXCI7aWYoZS5jaG9vc2Upe289XFxcIjsgXFxcIjtsZXQgYT1lLmNob29zZS5mcm9tLnNvcnQoKTthLmxlbmd0aD4xPyhgJHthLnNsaWNlKDAsYS5sZW5ndGgtMSkuam9pbihcXFwiLCBcXFwiKX0ke2FbYS5sZW5ndGgtMV19JHtlLmNob29zZS5hbW91bnR9YCxlLmNob29zZS5ub3RlJiZgJHtlLmNob29zZS5ub3RlfWApOmkucHVzaChgJHthfSAke2UuY2hvb3NlLmFtb3VudH0gZnQuJHtlLmNob29zZS5ub3RlP2AgJHtlLmNob29zZS5ub3RlfWA6XFxcIlxcXCJ9YCl9cmV0dXJuIGkuam9pbihvKX1mdW5jdGlvbiBmcih0KXt2YXIgbixyO2lmKHR5cGVvZiB0LnNlbnNlcz09XFxcInN0cmluZ1xcXCIpcmV0dXJuIHQuc2Vuc2VzO2xldCBlPVsocj0obj10LnNlbnNlcyk9PW51bGw/dm9pZCAwOm4uam9pbihcXFwiLCBcXFwiKS50cmltKCkpIT1udWxsP3I6XFxcIlxcXCJdO3JldHVybiB0LnBhc3NpdmUmJmUucHVzaChgcGFzc2l2ZSBQZXJjZXB0aW9uICR7dC5wYXNzaXZlfWApLGUuam9pbihcXFwiLCBcXFwiKX1mdW5jdGlvbiBtcih0KXt2YXIgbixyLGk7bGV0IGU9W107cmV0dXJuKG49dC5zb3VyY2UpIT1udWxsJiZuLmxlbmd0aCYmZS5wdXNoKChyPWNbdC5zb3VyY2VdKSE9bnVsbD9yOnQuc291cmNlKSwoaT10Lm90aGVyU291cmNlcykhPW51bGwmJmkubGVuZ3RoJiZlLnB1c2goLi4udC5vdGhlclNvdXJjZXMubWFwKHM9Pnt2YXIgbztyZXR1cm4obz1jW3Muc291cmNlXSkhPW51bGw/bzpzLnNvdXJjZX0pKSxlfWZ1bmN0aW9uIFRlKHQpe3JldHVybiB0LmVudHJpZXMucmVkdWNlKChuLHIpPT57dmFyIHM7aWYodHlwZW9mIHIhPVxcXCJzdHJpbmdcXFwiKXtsZXQgbz0ocz1yLml0ZW1zKT09bnVsbD92b2lkIDA6cy5tYXAobD0+dHlwZW9mIGw9PVxcXCJzdHJpbmdcXFwiP3tuYW1lOmwsZW50cmllczpbXX06XFxcImVudHJ5XFxcImluIGw/e25hbWU6bC5uYW1lLGVudHJpZXM6W2wuZW50cnldfTp7bmFtZTpsLm5hbWUsZW50cmllczpsLmVudHJpZXN9KTtyZXR1cm4gbi5jb25jYXQobyE9bnVsbD9vOltdKX1yZXR1cm4gbi5sZW5ndGg+MXx8blswXS5lbnRyaWVzLnB1c2gociksbn0sW3tuYW1lOnQubmFtZSxlbnRyaWVzOltdfV0pLm1hcCgoe25hbWU6bixlbnRyaWVzOnJ9KT0+KHtuYW1lOkgobiksZGVzYzpIKHIuam9pbihgXFxuYCkpfSkpfXZhciBwcj1cXFwiRlxcXCIsaHI9XFxcIkRcXFwiLGdyPVxcXCJUXFxcIixkcj1cXFwiU1xcXCIsU3I9XFxcIk1cXFwiLHZyPVxcXCJMXFxcIix5cj1cXFwiSFxcXCIsUnI9XFxcIkdcXFwiLENyPVxcXCJDXFxcIixFcj1cXFwiVlxcXCIsX3I9e1twcl06XFxcIkZpbmVcXFwiLFtocl06XFxcIkRpbWludXRpdmVcXFwiLFtncl06XFxcIlRpbnlcXFwiLFtkcl06XFxcIlNtYWxsXFxcIixbU3JdOlxcXCJNZWRpdW1cXFwiLFt2cl06XFxcIkxhcmdlXFxcIixbeXJdOlxcXCJIdWdlXFxcIixbUnJdOlxcXCJHYXJnYW50dWFuXFxcIixbQ3JdOlxcXCJDb2xvc3NhbFxcXCIsW0VyXTpcXFwiVmFyaWVzXFxcIn0sQXI9XFxcIkNvU1xcXCIsVHI9XFxcIkRNR1xcXCIsYnI9XFxcIkVFUENcXFwiLE5yPVxcXCJFRVRcXFwiLHdyPVxcXCJIb3REUVxcXCIsRHI9XFxcIkxNb1BcXFwiLCRyPVxcXCJNYWdcXFwiLHhyPVxcXCJNTVxcXCIsTXI9XFxcIk9vdEFcXFwiLE9yPVxcXCJQSEJcXFwiLElyPVxcXCJQb3RBXFxcIixQcj1cXFwiUm9UXFxcIixrcj1cXFwiUm9UT1NcXFwiLEZyPVxcXCJTQ0FHXFxcIixVcj1cXFwiU0tUXFxcIixMcj1cXFwiVG9BXFxcIixXcj1cXFwiVG9EXFxcIixHcj1cXFwiVFRQXFxcIixqcj1cXFwiVGZ0WVBcXFwiLEJyPVxcXCJUZnRZUC1BdEdcXFwiLFZyPVxcXCJUZnRZUC1EaVRcXFwiLHpyPVxcXCJUZnRZUC1URm9GXFxcIixIcj1cXFwiVGZ0WVAtVEhTb1RcXFwiLEtyPVxcXCJUZnRZUC1UU0NcXFwiLFlyPVxcXCJUZnRZUC1Ub0hcXFwiLFhyPVxcXCJUZnRZUC1XUE1cXFwiLHFyPVxcXCJWR01cXFwiLFpyPVxcXCJYR0VcXFwiLFFyPVxcXCJPR0FcXFwiLEpyPVxcXCJNVEZcXFwiLGVpPVxcXCJXREhcXFwiLHRpPVxcXCJXRE1NXFxcIixuaT1cXFwiR0dSXFxcIixyaT1cXFwiS0tXXFxcIixpaT1cXFwiTExLXFxcIixzaT1cXFwiR29TXFxcIixhaT1cXFwiQUlcXFwiLG9pPVxcXCJPb1dcXFwiLGNpPVxcXCJFU0tcXFwiLGxpPVxcXCJESVBcXFwiLHVpPVxcXCJIZnRUXFxcIixmaT1cXFwiRENcXFwiLG1pPVxcXCJTTFdcXFwiLHBpPVxcXCJTRFdcXFwiLGhpPVxcXCJCR0RJQVxcXCIsZ2k9XFxcIkxSXFxcIixkaT1cXFwiQUxcXFwiLFNpPVxcXCJTQUNcXFwiLHZpPVxcXCJFUkxXXFxcIix5aT1cXFwiRUZSXFxcIixSaT1cXFwiUk1CUkVcXFwiLENpPVxcXCJSTVJcXFwiLEVpPVxcXCJNRkZcXFwiLF9pPVxcXCJBV01cXFwiLEFpPVxcXCJJTVJcXFwiLFRpPVxcXCJTQURTXFxcIixiaT1cXFwiRUdXXFxcIixOaT1cXFwiVG9SXFxcIix3aT1cXFwiRERcXFwiLERpPVxcXCJGU1xcXCIsJGk9XFxcIlVTXFxcIix4aT1cXFwiTU9UXFxcIixNaT1cXFwiSURSb3RGXFxcIixPaT1cXFwiVENFXFxcIixJaT1cXFwiVlJHUlxcXCIsUGk9XFxcIkhvTFxcXCIsa2k9XFxcIlNjcmVlblxcXCIsRmk9XFxcIlNjcmVlbldpbGRlcm5lc3NLaXRcXFwiLFVpPVxcXCJIRlxcXCIsTGk9XFxcIkNNXFxcIixXaT1cXFwiV0J0V1xcXCIsR2k9XFxcIkNSQ290TlxcXCIsSmU9XFxcIkFMXFxcIixqaT1gJHtKZX1DdXJzZU9mU3RyYWhkYCxCaT1gJHtKZX1FbGVtZW50YWxFdmlsYCxWaT1gJHtKZX1SYWdlT2ZEZW1vbnNgLG1lPVxcXCJQU1xcXCIsemk9YCR7bWV9QWAsSGk9YCR7bWV9SWAsS2k9YCR7bWV9S2AsWWk9YCR7bWV9WmAsWGk9YCR7bWV9WGAscWk9YCR7bWV9RGAsbT1cXFwiVUFcXFwiLFppPWAke219QXJ0aWZpY2VyYCxRaT1gJHttfUVsYWRyaW5BbmRHaXRoYCxKaT1gJHttfUViZXJyb25gLGVzPWAke219RmVhdHNGb3JSYWNlc2AsdHM9YCR7bX1GZWF0c0ZvclNraWxsc2AsbnM9YCR7bX1GaWVuZGlzaE9wdGlvbnNgLHJzPWAke219RmVhdHNgLGlzPWAke219R290aGljSGVyb2VzYCxzcz1gJHttfU1vZGVybk1hZ2ljYCxhcz1gJHttfVN0YXJ0ZXJTcGVsbHNgLG9zPWAke219VGhlTXlzdGljQ2xhc3NgLGNzPWAke219VGhhdE9sZEJsYWNrTWFnaWNgLGxzPWAke219VGhlUmFuZ2VyUmV2aXNlZGAsdXM9YCR7bX1XYXRlcmJvcm5lQWR2ZW50dXJlc2AsZnM9YCR7bX1WYXJpYW50UnVsZXNgLG1zPWAke219TGlnaHREYXJrVW5kZXJkYXJrYCxwcz1gJHttfVJhbmdlckFuZFJvZ3VlYCxocz1gJHttfUFUcmlvT2ZTdWJjbGFzc2VzYCxncz1gJHttfUJhcmJhcmlhblByaW1hbFBhdGhzYCxkcz1gJHttfVJldmlzZWRTdWJjbGFzc2VzYCxTcz1gJHttfUtpdHNPZk9sZGAsdnM9YCR7bX1CYXJkQmFyZENvbGxlZ2VzYCx5cz1gJHttfUNsZXJpY0RpdmluZURvbWFpbnNgLFJzPWAke219RHJ1aWRgLENzPWAke219UmV2aXNlZENsYXNzT3B0aW9uc2AsRXM9YCR7bX1GaWdodGVyYCxfcz1gJHttfU1vbmtgLEFzPWAke219UGFsYWRpbmAsVHM9YCR7bX1Nb2RpZnlpbmdDbGFzc2VzYCxicz1gJHttfVNvcmNlcmVyYCxOcz1gJHttfVdhcmxvY2tBbmRXaXphcmRgLHdzPWAke219VGhlRmFpdGhmdWxgLERzPWAke219V2l6YXJkUmV2aXNpdGVkYCwkcz1gJHttfUVsZlN1YnJhY2VzYCx4cz1gJHttfU1hc3NDb21iYXRgLE1zPWAke219VGhyZWVQaWxsYXJFeHBlcmllbmNlYCxPcz1gJHttfUdyZXloYXdrSW5pdGlhdGl2ZWAsSXM9YCR7bX1UaHJlZVN1YmNsYXNzZXNgLFBzPWAke219T3JkZXJEb21haW5gLGtzPWAke219Q2VudGF1cnNNaW5vdGF1cnNgLEZzPWAke219R2lhbnRTb3VsU29yY2VyZXJgLFVzPWAke219UmFjZXNPZkViZXJyb25gLExzPWAke219UmFjZXNPZlJhdm5pY2FgLFdzPWAke219V0dFYCxHcz1gJHttfU9mU2hpcHNBbmRTZWFgLGpzPWAke219U2lkZWtpY2tzYCxCcz1gJHttfUFydGlmaWNlclJldmlzaXRlZGAsVnM9YCR7bX1CYXJiYXJpYW5BbmRNb25rYCx6cz1gJHttfVNvcmNlcmVyQW5kV2FybG9ja2AsSHM9YCR7bX1CYXJkQW5kUGFsYWRpbmAsS3M9YCR7bX1DbGVyaWNEcnVpZFdpemFyZGAsWXM9YCR7bX1GaWdodGVyUmFuZ2VyUm9ndWVgLFhzPWAke219Q2xhc3NGZWF0dXJlVmFyaWFudHNgLHFzPWAke219RmlnaHRlclJvZ3VlV2l6YXJkYCxacz1gJHttfVByZXN0aWdlQ2xhc3Nlc1J1bk1hZ2ljYCxRcz1gJHttfVJhbmdlcmAsSnM9YCR7bX0yMDIwU3ViY2xhc3Nlc1B0MWAsZWE9YCR7bX0yMDIwU3ViY2xhc3Nlc1B0MmAsdGE9YCR7bX0yMDIwU3ViY2xhc3Nlc1B0M2AsbmE9YCR7bX0yMDIwU3ViY2xhc3Nlc1B0NGAscmE9YCR7bX0yMDIwU3ViY2xhc3Nlc1B0NWAsaWE9YCR7bX0yMDIwU3BlbGxzQW5kTWFnaWNUYXR0b29zYCxzYT1gJHttfTIwMjBQc2lvbmljT3B0aW9uc1JldmlzaXRlZGAsYWE9YCR7bX0yMDIwU3ViY2xhc3Nlc1JldmlzaXRlZGAsb2E9YCR7bX0yMDIwRmVhdHNgLGNhPWAke219MjAyMUdvdGhpY0xpbmVhZ2VzYCxsYT1gJHttfTIwMjFGb2xrT2ZUaGVGZXl3aWxkYCx1YT1gJHttfTIwMjFEcmFjb25pY09wdGlvbnNgLGZhPWAke219MjAyMU1hZ2VzT2ZTdHJpeGhhdmVuYCxldD1cXFwiQWR2ZW50dXJlcnMgTGVhZ3VlOiBcXFwiLHBlPVxcXCJQbGFuZSBTaGlmdDogXFxcIixwPVxcXCJVbmVhcnRoZWQgQXJjYW5hOiBcXFwiLFE9XFxcIlRhbGVzIGZyb20gdGhlIFlhd25pbmcgUG9ydGFsXFxcIixjPXt9O2NbQXJdPVxcXCJDdXJzZSBvZiBTdHJhaGRcXFwiO2NbVHJdPVxcXCJEdW5nZW9uIE1hc3RlcidzIEd1aWRlXFxcIjtjW2JyXT1cXFwiRWxlbWVudGFsIEV2aWwgUGxheWVyJ3MgQ29tcGFuaW9uXFxcIjtjW05yXT1cXFwiRWxlbWVudGFsIEV2aWw6IFRyaW5rZXRzXFxcIjtjW3dyXT1cXFwiSG9hcmQgb2YgdGhlIERyYWdvbiBRdWVlblxcXCI7Y1tEcl09XFxcIkxvc3QgTWluZSBvZiBQaGFuZGVsdmVyXFxcIjtjWyRyXT1cXFwiRHJhZ29uIE1hZ2F6aW5lXFxcIjtjW3hyXT1cXFwiTW9uc3RlciBNYW51YWxcXFwiO2NbTXJdPVxcXCJPdXQgb2YgdGhlIEFieXNzXFxcIjtjW09yXT1cXFwiUGxheWVyJ3MgSGFuZGJvb2tcXFwiO2NbSXJdPVxcXCJQcmluY2VzIG9mIHRoZSBBcG9jYWx5cHNlXFxcIjtjW1ByXT1cXFwiVGhlIFJpc2Ugb2YgVGlhbWF0XFxcIjtjW2tyXT1cXFwiVGhlIFJpc2Ugb2YgVGlhbWF0IE9ubGluZSBTdXBwbGVtZW50XFxcIjtjW0ZyXT1cXFwiU3dvcmQgQ29hc3QgQWR2ZW50dXJlcidzIEd1aWRlXFxcIjtjW1VyXT1cXFwiU3Rvcm0gS2luZydzIFRodW5kZXJcXFwiO2NbTHJdPVxcXCJUb21iIG9mIEFubmloaWxhdGlvblxcXCI7Y1tXcl09XFxcIlR5cmFubnkgb2YgRHJhZ29uc1xcXCI7Y1tHcl09XFxcIlRoZSBUb3J0bGUgUGFja2FnZVxcXCI7Y1tqcl09UTtjW0JyXT1gJHtRfTogQWdhaW5zdCB0aGUgR2lhbnRzYDtjW1ZyXT1gJHtRfTogRGVhZCBpbiBUaGF5YDtjW3pyXT1gJHtRfTogVGhlIEZvcmdlIG9mIEZ1cnlgO2NbSHJdPWAke1F9OiBUaGUgSGlkZGVuIFNocmluZSBvZiBUYW1vYWNoYW5gO2NbS3JdPWAke1F9OiBUaGUgU3VubGVzcyBDaXRhZGVsYDtjW1lyXT1gJHtRfTogVG9tYiBvZiBIb3Jyb3JzYDtjW1hyXT1gJHtRfTogV2hpdGUgUGx1bWUgTW91bnRhaW5gO2NbcXJdPVxcXCJWb2xvJ3MgR3VpZGUgdG8gTW9uc3RlcnNcXFwiO2NbWnJdPVxcXCJYYW5hdGhhcidzIEd1aWRlIHRvIEV2ZXJ5dGhpbmdcXFwiO2NbUXJdPVxcXCJPbmUgR3J1bmcgQWJvdmVcXFwiO2NbSnJdPVxcXCJNb3JkZW5rYWluZW4ncyBUb21lIG9mIEZvZXNcXFwiO2NbZWldPVxcXCJXYXRlcmRlZXA6IERyYWdvbiBIZWlzdFxcXCI7Y1t0aV09XFxcIldhdGVyZGVlcDogRHVuZ2VvbiBvZiB0aGUgTWFkIE1hZ2VcXFwiO2NbbmldPVxcXCJHdWlsZG1hc3RlcnMnIEd1aWRlIHRvIFJhdm5pY2FcXFwiO2NbcmldPVxcXCJLcmVua28ncyBXYXlcXFwiO2NbaWldPVxcXCJMb3N0IExhYm9yYXRvcnkgb2YgS3dhbGlzaFxcXCI7Y1tzaV09XFxcIkdob3N0cyBvZiBTYWx0bWFyc2hcXFwiO2NbYWldPVxcXCJBY3F1aXNpdGlvbnMgSW5jb3Jwb3JhdGVkXFxcIjtjW29pXT1cXFwiVGhlIE9ycmVyeSBvZiB0aGUgV2FuZGVyZXJcXFwiO2NbY2ldPVxcXCJFc3NlbnRpYWxzIEtpdFxcXCI7Y1tsaV09XFxcIkRyYWdvbiBvZiBJY2VzcGlyZSBQZWFrXFxcIjtjW3VpXT1cXFwiSHVudCBmb3IgdGhlIFRoZXNzYWxoeWRyYVxcXCI7Y1tmaV09XFxcIkRpdmluZSBDb250ZW50aW9uXFxcIjtjW21pXT1cXFwiU3Rvcm0gTG9yZCdzIFdyYXRoXFxcIjtjW3BpXT1cXFwiU2xlZXBpbmcgRHJhZ29uJ3MgV2FrZVxcXCI7Y1toaV09XFxcIkJhbGR1cidzIEdhdGU6IERlc2NlbnQgSW50byBBdmVybnVzXFxcIjtjW2dpXT1cXFwiTG9jYXRoYWggUmlzaW5nXFxcIjtjW2RpXT1cXFwiQWR2ZW50dXJlcnMnIExlYWd1ZVxcXCI7Y1tTaV09XFxcIlNhZ2UgQWR2aWNlIENvbXBlbmRpdW1cXFwiO2NbdmldPVxcXCJFYmVycm9uOiBSaXNpbmcgZnJvbSB0aGUgTGFzdCBXYXJcXFwiO2NbeWldPVxcXCJFYmVycm9uOiBGb3Jnb3R0ZW4gUmVsaWNzXFxcIjtjW1JpXT1cXFwiVGhlIExvc3QgRHVuZ2VvbiBvZiBSaWNrZWRuZXNzOiBCaWcgUmljayBFbmVyZ3lcXFwiO2NbQ2ldPVxcXCJEdW5nZW9ucyAmIERyYWdvbnMgdnMuIFJpY2sgYW5kIE1vcnR5OiBCYXNpYyBSdWxlc1xcXCI7Y1tFaV09XFxcIk1vcmRlbmthaW5lbidzIEZpZW5kaXNoIEZvbGlvXFxcIjtjW19pXT1cXFwiQWR2ZW50dXJlIHdpdGggTXVrXFxcIjtjW0FpXT1cXFwiSW5mZXJuYWwgTWFjaGluZSBSZWJ1aWxkXFxcIjtjW1RpXT1cXFwiU2FwcGhpcmUgQW5uaXZlcnNhcnkgRGljZSBTZXRcXFwiO2NbYmldPVxcXCJFeHBsb3JlcidzIEd1aWRlIHRvIFdpbGRlbW91bnRcXFwiO2NbTmldPVxcXCJUaWRlIG9mIFJldHJpYnV0aW9uXFxcIjtjW3dpXT1cXFwiRGFuZ2Vyb3VzIERlc2lnbnNcXFwiO2NbRGldPVxcXCJGcm96ZW4gU2lja1xcXCI7Y1skaV09XFxcIlVud2VsY29tZSBTcGlyaXRzXFxcIjtjW3hpXT1cXFwiTXl0aGljIE9keXNzZXlzIG9mIFRoZXJvc1xcXCI7Y1tNaV09XFxcIkljZXdpbmQgRGFsZTogUmltZSBvZiB0aGUgRnJvc3RtYWlkZW5cXFwiO2NbT2ldPVxcXCJUYXNoYSdzIENhdWxkcm9uIG9mIEV2ZXJ5dGhpbmdcXFwiO2NbSWldPVxcXCJWYW4gUmljaHRlbidzIEd1aWRlIHRvIFJhdmVubG9mdFxcXCI7Y1tQaV09XFxcIlRoZSBIb3VzZSBvZiBMYW1lbnRcXFwiO2Nba2ldPVxcXCJEdW5nZW9uIE1hc3RlcidzIFNjcmVlblxcXCI7Y1tGaV09XFxcIkR1bmdlb24gTWFzdGVyJ3MgU2NyZWVuOiBXaWxkZXJuZXNzIEtpdFxcXCI7Y1tVaV09XFxcIkhlcm9lcycgRmVhc3RcXFwiO2NbTGldPVxcXCJDYW5kbGVrZWVwIE15c3Rlcmllc1xcXCI7Y1tqaV09YCR7ZXR9Q3Vyc2Ugb2YgU3RyYWhkYDtjW0JpXT1gJHtldH1FbGVtZW50YWwgRXZpbGA7Y1tWaV09YCR7ZXR9UmFnZSBvZiBEZW1vbnNgO2NbemldPWAke3BlfUFtb25raGV0YDtjW0hpXT1gJHtwZX1Jbm5pc3RyYWRgO2NbS2ldPWAke3BlfUthbGFkZXNoYDtjW1lpXT1gJHtwZX1aZW5kaWthcmA7Y1tYaV09YCR7cGV9SXhhbGFuYDtjW3FpXT1gJHtwZX1Eb21pbmFyaWFgO2NbWmldPWAke3B9QXJ0aWZpY2VyYDtjW1FpXT1gJHtwfUVsYWRyaW4gYW5kIEdpdGhgO2NbSmldPWAke3B9RWJlcnJvbmA7Y1tlc109YCR7cH1GZWF0cyBmb3IgUmFjZXNgO2NbdHNdPWAke3B9RmVhdHMgZm9yIFNraWxsc2A7Y1tuc109YCR7cH1GaWVuZGlzaCBPcHRpb25zYDtjW3JzXT1gJHtwfUZlYXRzYDtjW2lzXT1gJHtwfUdvdGhpYyBIZXJvZXNgO2Nbc3NdPWAke3B9TW9kZXJuIE1hZ2ljYDtjW2FzXT1gJHtwfVN0YXJ0ZXIgU3BlbGxzYDtjW29zXT1gJHtwfVRoZSBNeXN0aWMgQ2xhc3NgO2NbY3NdPWAke3B9VGhhdCBPbGQgQmxhY2sgTWFnaWNgO2NbbHNdPWAke3B9VGhlIFJhbmdlciwgUmV2aXNlZGA7Y1t1c109YCR7cH1XYXRlcmJvcm5lIEFkdmVudHVyZXNgO2NbZnNdPWAke3B9VmFyaWFudCBSdWxlc2A7Y1ttc109YCR7cH1MaWdodCwgRGFyaywgVW5kZXJkYXJrIWA7Y1twc109YCR7cH1SYW5nZXIgYW5kIFJvZ3VlYDtjW2hzXT1gJHtwfUEgVHJpbyBvZiBTdWJjbGFzc2VzYDtjW2dzXT1gJHtwfUJhcmJhcmlhbiBQcmltYWwgUGF0aHNgO2NbZHNdPWAke3B9UmV2aXNlZCBTdWJjbGFzc2VzYDtjW1NzXT1gJHtwfUtpdHMgb2YgT2xkYDtjW3ZzXT1gJHtwfUJhcmQ6IEJhcmQgQ29sbGVnZXNgO2NbeXNdPWAke3B9Q2xlcmljOiBEaXZpbmUgRG9tYWluc2A7Y1tSc109YCR7cH1EcnVpZGA7Y1tDc109YCR7cH1SZXZpc2VkIENsYXNzIE9wdGlvbnNgO2NbRXNdPWAke3B9RmlnaHRlcmA7Y1tfc109YCR7cH1Nb25rYDtjW0FzXT1gJHtwfVBhbGFkaW5gO2NbVHNdPWAke3B9TW9kaWZ5aW5nIENsYXNzZXNgO2NbYnNdPWAke3B9U29yY2VyZXJgO2NbTnNdPWAke3B9V2FybG9jayBhbmQgV2l6YXJkYDtjW3dzXT1gJHtwfVRoZSBGYWl0aGZ1bGA7Y1tEc109YCR7cH1XaXphcmQgUmV2aXNpdGVkYDtjWyRzXT1gJHtwfUVsZiBTdWJyYWNlc2A7Y1t4c109YCR7cH1NYXNzIENvbWJhdGA7Y1tNc109YCR7cH1UaHJlZS1QaWxsYXIgRXhwZXJpZW5jZWA7Y1tPc109YCR7cH1HcmV5aGF3ayBJbml0aWF0aXZlYDtjW0lzXT1gJHtwfVRocmVlIFN1YmNsYXNzZXNgO2NbUHNdPWAke3B9T3JkZXIgRG9tYWluYDtjW2tzXT1gJHtwfUNlbnRhdXJzIGFuZCBNaW5vdGF1cnNgO2NbRnNdPWAke3B9R2lhbnQgU291bCBTb3JjZXJlcmA7Y1tVc109YCR7cH1SYWNlcyBvZiBFYmVycm9uYDtjW0xzXT1gJHtwfVJhY2VzIG9mIFJhdm5pY2FgO2NbV3NdPVxcXCJXYXlmaW5kZXIncyBHdWlkZSB0byBFYmVycm9uXFxcIjtjW0dzXT1gJHtwfU9mIFNoaXBzIGFuZCB0aGUgU2VhYDtjW2pzXT1gJHtwfVNpZGVraWNrc2A7Y1tCc109YCR7cH1BcnRpZmljZXIgUmV2aXNpdGVkYDtjW1ZzXT1gJHtwfUJhcmJhcmlhbiBhbmQgTW9ua2A7Y1t6c109YCR7cH1Tb3JjZXJlciBhbmQgV2FybG9ja2A7Y1tIc109YCR7cH1CYXJkIGFuZCBQYWxhZGluYDtjW0tzXT1gJHtwfUNsZXJpYywgRHJ1aWQsIGFuZCBXaXphcmRgO2NbWXNdPWAke3B9RmlnaHRlciwgUmFuZ2VyLCBhbmQgUm9ndWVgO2NbWHNdPWAke3B9Q2xhc3MgRmVhdHVyZSBWYXJpYW50c2A7Y1txc109YCR7cH1GaWdodGVyLCBSb2d1ZSwgYW5kIFdpemFyZGA7Y1tac109YCR7cH1QcmVzdGlnZSBDbGFzc2VzIGFuZCBSdW5lIE1hZ2ljYDtjW1FzXT1gJHtwfVJhbmdlcmA7Y1tKc109YCR7cH0yMDIwIFN1YmNsYXNzZXMsIFBhcnQgMWA7Y1tlYV09YCR7cH0yMDIwIFN1YmNsYXNzZXMsIFBhcnQgMmA7Y1t0YV09YCR7cH0yMDIwIFN1YmNsYXNzZXMsIFBhcnQgM2A7Y1tuYV09YCR7cH0yMDIwIFN1YmNsYXNzZXMsIFBhcnQgNGA7Y1tyYV09YCR7cH0yMDIwIFN1YmNsYXNzZXMsIFBhcnQgNWA7Y1tpYV09YCR7cH0yMDIwIFNwZWxscyBhbmQgTWFnaWMgVGF0dG9vc2A7Y1tzYV09YCR7cH0yMDIwIFBzaW9uaWMgT3B0aW9ucyBSZXZpc2l0ZWRgO2NbYWFdPWAke3B9MjAyMCBTdWJjbGFzc2VzIFJldmlzaXRlZGA7Y1tvYV09YCR7cH0yMDIwIEZlYXRzYDtjW2NhXT1gJHtwfTIwMjEgR290aGljIExpbmVhZ2VzYDtjW2xhXT1gJHtwfTIwMjEgRm9sayBvZiB0aGUgRmV5d2lsZGA7Y1t1YV09YCR7cH0yMDIxIERyYWNvbmljIE9wdGlvbnNgO2NbZmFdPWAke3B9MjAyMSBNYWdlcyBvZiBTdHJpeGhhdmVuYDtjW1dpXT1cXFwiVGhlIFdpbGQgQmV5b25kIHRoZSBXaXRjaGxpZ2h0XFxcIjtjW0dpXT1cXFwiQ3JpdGljYWwgUm9sZTogQ2FsbCBvZiB0aGUgTmV0aGVyZGVlcFxcXCI7ZnVuY3Rpb24gbWEodCl7dmFyIGkscyxvO2xldCBlPXQuc2tpbGw7aWYoIWUpcmV0dXJuW107bGV0IG49W10scj1bXTtmb3IobGV0IGwgb2YgT2JqZWN0LmtleXMoZSkpe2lmKGw9PVxcXCJvdGhlclxcXCIpe2xldCBmPWVbbF07Zm9yKGxldCBoIG9mIGYpe2xldCBTPWgub25lT2Y7aWYoIVMpY29udGludWU7bGV0IF89T2JqZWN0LmtleXMoUykuc29ydCgpLHk9Xy5zaGlmdCgpLEM9U1t5XSxbLHZdPShpPUM9PW51bGw/dm9pZCAwOkMubWF0Y2goLy4qPyhcXFxcZCspLykpIT1udWxsP2k6W107ci5wdXNoKHtbYHBsdXMgb25lIG9mIHRoZSBmb2xsb3dpbmc6ICR7eS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSt5LnNsaWNlKDEpfWBdOnZ9KTtmb3IobGV0IE0gb2YgXy5zbGljZSgxKSl7bGV0IFA9U1tNXSxbLFJdPShzPVA9PW51bGw/dm9pZCAwOlAubWF0Y2goLy4qPyhcXFxcZCspLykpIT1udWxsP3M6W107IVJ8fHIucHVzaCh7W01dOlJ9KX19Y29udGludWV9bGV0IHU9ZVtsXSxbLGFdPShvPXU9PW51bGw/dm9pZCAwOnUubWF0Y2goLy4qPyhcXFxcZCspLykpIT1udWxsP286W107IWF8fG4ucHVzaCh7W2xdOmF9KX1yZXR1cm5bLi4ubi5maWx0ZXIobD0+bCksLi4uci5maWx0ZXIobD0+bCldfXZhciBobj17MDp7Y3I6XFxcIjBcXFwiLHZhbHVlOjAseHA6MH0sXFxcIjEvOFxcXCI6e2NyOlxcXCIxLzhcXFwiLHZhbHVlOi4xMjUseHA6MjV9LFxcXCIxLzRcXFwiOntjcjpcXFwiMS80XFxcIix2YWx1ZTouMjUseHA6NTB9LFxcXCIxLzJcXFwiOntjcjpcXFwiMS8yXFxcIix2YWx1ZTouNSx4cDoxMDB9LFxcXCIwLjEyNVxcXCI6e2NyOlxcXCIxLzhcXFwiLHZhbHVlOi4xMjUseHA6MjV9LFxcXCIwLjI1XFxcIjp7Y3I6XFxcIjEvNFxcXCIsdmFsdWU6LjI1LHhwOjUwfSxcXFwiMC41XFxcIjp7Y3I6XFxcIjEvMlxcXCIsdmFsdWU6LjUseHA6MTAwfSwxOntjcjpcXFwiMVxcXCIsdmFsdWU6MSx4cDoyMDB9LDI6e2NyOlxcXCIyXFxcIix2YWx1ZToyLHhwOjQ1MH0sMzp7Y3I6XFxcIjNcXFwiLHZhbHVlOjMseHA6NzAwfSw0OntjcjpcXFwiNFxcXCIsdmFsdWU6NCx4cDoxMTAwfSw1OntjcjpcXFwiNVxcXCIsdmFsdWU6NSx4cDoxODAwfSw2OntjcjpcXFwiNlxcXCIsdmFsdWU6Nix4cDoyMzAwfSw3OntjcjpcXFwiN1xcXCIsdmFsdWU6Nyx4cDoyOTAwfSw4OntjcjpcXFwiOFxcXCIsdmFsdWU6OCx4cDozOTAwfSw5OntjcjpcXFwiOVxcXCIsdmFsdWU6OSx4cDo1ZTN9LDEwOntjcjpcXFwiMTBcXFwiLHZhbHVlOjEwLHhwOjU5MDB9LDExOntjcjpcXFwiMTFcXFwiLHZhbHVlOjExLHhwOjcyMDB9LDEyOntjcjpcXFwiMTJcXFwiLHZhbHVlOjEyLHhwOjg0MDB9LDEzOntjcjpcXFwiMTNcXFwiLHZhbHVlOjEzLHhwOjFlNH0sMTQ6e2NyOlxcXCIxNFxcXCIsdmFsdWU6MTQseHA6MTE1MDB9LDE1OntjcjpcXFwiMTVcXFwiLHZhbHVlOjE1LHhwOjEzZTN9LDE2OntjcjpcXFwiMTZcXFwiLHZhbHVlOjE2LHhwOjE1ZTN9LDE3OntjcjpcXFwiMTdcXFwiLHZhbHVlOjE3LHhwOjE4ZTN9LDE4OntjcjpcXFwiMThcXFwiLHZhbHVlOjE4LHhwOjJlNH0sMTk6e2NyOlxcXCIxOVxcXCIsdmFsdWU6MTkseHA6MjJlM30sMjA6e2NyOlxcXCIyMFxcXCIsdmFsdWU6MjAseHA6MjVlM30sMjE6e2NyOlxcXCIyMVxcXCIsdmFsdWU6MjEseHA6MzNlM30sMjI6e2NyOlxcXCIyMlxcXCIsdmFsdWU6MjIseHA6NDFlM30sMjM6e2NyOlxcXCIyM1xcXCIsdmFsdWU6MjMseHA6NWU0fSwyNDp7Y3I6XFxcIjI0XFxcIix2YWx1ZToyNCx4cDo2MmUzfSwyNTp7Y3I6XFxcIjI1XFxcIix2YWx1ZToyNSx4cDo3NWUzfSwyNjp7Y3I6XFxcIjI2XFxcIix2YWx1ZToyNix4cDo5ZTR9LDI3OntjcjpcXFwiMjdcXFwiLHZhbHVlOjI3LHhwOjEwNWUzfSwyODp7Y3I6XFxcIjI4XFxcIix2YWx1ZToyOCx4cDoxMmU0fSwyOTp7Y3I6XFxcIjI5XFxcIix2YWx1ZToyOSx4cDoxMzVlM30sMzA6e2NyOlxcXCIzMFxcXCIsdmFsdWU6MzAseHA6MTU1ZTN9fTtmdW5jdGlvbiBLKHQpe3JldHVybiBNYXRoLmZsb29yKCgodCE9bnVsbD90OjEwKS0xMCkvMil9dmFyIGduPXt0aW55OjQsc21hbGw6NixtZWRpdW06OCxsYXJnZToxMCxodWdlOjEyLGdhcmdhbnR1YW46MjB9LHBhPXtzdHI6XFxcInN0cmVuZ3RoXFxcIixkZXg6XFxcImRleHRlcml0eVxcXCIsY29uOlxcXCJjb25zdGl0dXRpb25cXFwiLGludDpcXFwiaW50ZWxsaWdlbmNlXFxcIix3aXM6XFxcIndpc2RvbVxcXCIsY2hhOlxcXCJjaGFyaXNtYVxcXCJ9LGJlPWNsYXNze2NvbnN0cnVjdG9yKGUpe3RoaXMubW9uc3Rlcj1lO3RoaXMucHJvZmljaWVuY3k9dGhpcy5nZXRQcm9mKHRoaXMubW9uc3Rlcik7dGhpcy5zdGF0cz17c3RyOnRoaXMubW9uc3Rlci5zdHJQb2ludHMsZGV4OnRoaXMubW9uc3Rlci5kZXhQb2ludHMsY29uOnRoaXMubW9uc3Rlci5jb25Qb2ludHMsaW50OnRoaXMubW9uc3Rlci5pbnRQb2ludHMsd2lzOnRoaXMubW9uc3Rlci53aXNQb2ludHMsY2hhOnRoaXMubW9uc3Rlci5jaGFQb2ludHN9O3RoaXMubW9kaWZpZXJzPXtzdHI6Syh0aGlzLnN0YXRzLnN0ciksZGV4OksodGhpcy5zdGF0cy5kZXgpLGNvbjpLKHRoaXMuc3RhdHMuY29uKSxpbnQ6Syh0aGlzLnN0YXRzLmludCksd2lzOksodGhpcy5zdGF0cy53aXMpLGNoYTpLKHRoaXMuc3RhdHMuY2hhKX19c3RhdGljIHBhcnNlKGUpe3ZhciBpLHMsbyxsLHUsYTtsZXQgbj1uZXcgYmUoZSk7cmV0dXJue2ltYWdlOm51bGwsbmFtZTplLm5hbWUsc291cmNlOlxcXCJUZXRyYUN1YmVcXFwiLHR5cGU6ZS50eXBlLHN1YnR5cGU6XFxcIlxcXCIsc2l6ZTplLnNpemUsYWxpZ25tZW50OmUuYWxpZ25tZW50LGhwOihpPW4uZ2V0SFAoZSkpPT1udWxsP3ZvaWQgMDppLmhwLGhpdF9kaWNlOihzPW4uZ2V0SFAoZSkpPT1udWxsP3ZvaWQgMDpzLmRpY2UsYWM6KHU9KGw9KChvPWUuYWMpIT1udWxsP286W10pWzBdKT09bnVsbD92b2lkIDA6bC5hYykhPW51bGw/dTpcXFwiXFxcIixzcGVlZDpuLmdldFNwZWVkU3RyaW5nKGUpLHN0YXRzOltlLnN0clBvaW50cyxlLmRleFBvaW50cyxlLmNvblBvaW50cyxlLmludFBvaW50cyxlLndpc1BvaW50cyxlLmNoYVBvaW50c10sZGFtYWdlX2ltbXVuaXRpZXM6bi5wYXJzZUltbXVuZShlLFxcXCJpXFxcIiksZGFtYWdlX3Jlc2lzdGFuY2VzOm4ucGFyc2VJbW11bmUoZSxcXFwiclxcXCIpLGRhbWFnZV92dWxuZXJhYmlsaXRpZXM6bi5wYXJzZUltbXVuZShlLFxcXCJ2XFxcIiksY29uZGl0aW9uX2ltbXVuaXRpZXM6bi5wYXJzZUNvbmRpdGlvbnMoZSksc2F2ZXM6bi5nZXRTYXZlcyhlKSxza2lsbHNhdmVzOm4uZ2V0U2tpbGxzKGUpLHNlbnNlczpuLmdldFNlbnNlcyhlKSxsYW5ndWFnZXM6bi5nZXRMYW5ndWFnZXMoZSksY3I6KGE9ZS5jcikhPW51bGw/YTpcXFwiXFxcIix0cmFpdHM6bi5nZXRUcmFpdHMoZS5hYmlsaXRpZXMpLGFjdGlvbnM6bi5nZXRUcmFpdHMoZS5hY3Rpb25zKSxyZWFjdGlvbnM6bi5nZXRUcmFpdHMoZS5yZWFjdGlvbnMpLGxlZ2VuZGFyeV9hY3Rpb25zOm4uZ2V0VHJhaXRzKGUubGVnZW5kYXJpZXMpLHNwZWxsczpuLmdldFNwZWxscyhlLmFiaWxpdGllcyl9fWdldEhQKGUpe3ZhciBuLHI7aWYoZS5jdXN0b21IUHx8ZS5oaXREaWNlJiYvKFxcXFxkKykgXFxcXCgoLispXFxcXCkvLnRlc3QoZS5ocFRleHQpKXtsZXRbaSxzLG9dPShuPWUuaHBUZXh0Lm1hdGNoKC8oXFxcXGQrKSBcXFxcKCguKylcXFxcKS8pKSE9bnVsbD9uOltdO3JldHVybntocDpzLGRpY2U6b319aWYoZS5oaXREaWNlKXtsZXQgaT1OdW1iZXIoZS5oaXREaWNlKSxzPShyPWduW2Uuc2l6ZV0pIT1udWxsP3I6Z24ubWVkaXVtLG89dGhpcy5tb2RpZmllcnMuY29uLGw9aSpzLygyKy41KStvKmksdT1vPjA/XFxcIitcXFwiOlxcXCItXFxcIixhPW89PTA/XFxcIlxcXCI6YCAke3V9ICR7byppfWA7cmV0dXJue2hwOmwsZGljZTpgJHtpfWQke3N9JHthfWB9fX1nZXRTcGVlZFN0cmluZyhlKXtpZihlLmN1c3RvbVNwZWVkKXJldHVybiBlLnNwZWVkRGVzYztsZXQgbj1bZS5zcGVlZCtcXFwiIGZ0LlxcXCJdO3JldHVybiBlLmJ1cnJvd1NwZWVkPjAmJm4ucHVzaChcXFwiYnVycm93IFxcXCIrZS5idXJyb3dTcGVlZCtcXFwiIGZ0LlxcXCIpLGUuY2xpbWJTcGVlZD4wJiZuLnB1c2goXFxcImNsaW1iIFxcXCIrZS5jbGltYlNwZWVkK1xcXCIgZnQuXFxcIiksZS5mbHlTcGVlZD4wJiZuLnB1c2goXFxcImZseSBcXFwiK2UuZmx5U3BlZWQrXFxcIiBmdC5cXFwiKyhlLmhvdmVyP1xcXCIgKGhvdmVyKVxcXCI6XFxcIlxcXCIpKSxlLnN3aW1TcGVlZD4wJiZuLnB1c2goXFxcInN3aW0gXFxcIitlLnN3aW1TcGVlZCtcXFwiIGZ0LlxcXCIpLG4uam9pbihcXFwiLCBcXFwiKX1wYXJzZUltbXVuZShlLG4pe2xldCByPVtdO1xcXCJkYW1hZ2V0eXBlc1xcXCJpbiBlJiZBcnJheS5pc0FycmF5KGUuZGFtYWdldHlwZXMpJiZyLnB1c2goLi4uZS5kYW1hZ2V0eXBlcy5maWx0ZXIocz0+cy50eXBlPT1uKS5tYXAocz0+cy5uYW1lKSk7bGV0IGk9W107cmV0dXJuXFxcInNwZWNpYWxkYW1hZ2VcXFwiaW4gZSYmQXJyYXkuaXNBcnJheShlLnNwZWNpYWxkYW1hZ2UpJiZpLnB1c2goLi4uZS5zcGVjaWFsZGFtYWdlLmZpbHRlcihzPT5zLnR5cGU9PW4pLm1hcChzPT5zLm5hbWUpKSxbci5qb2luKFxcXCIsIFxcXCIpLGkuam9pbihcXFwiLCBcXFwiKV0uZmlsdGVyKHM9PnMmJnMubGVuZ3RoKS5qb2luKFxcXCI7IFxcXCIpfWdldExhbmd1YWdlcyhlKXtsZXQgbj1bXSxyPVtdLGk9W107Zm9yKGxldCBzPTA7czxlLmxhbmd1YWdlcy5sZW5ndGg7cysrKXtsZXQgbz1lLmxhbmd1YWdlc1tzXTtvLnNwZWFrc3x8by5zcGVha3M9PW51bGw/ci5wdXNoKG8pOmkucHVzaChvKX1yZXR1cm4gci5sZW5ndGg+MCYmbi5wdXNoKFtyLnNsaWNlKDAsci5sZW5ndGgtMikubWFwKHM9PnMubmFtZSkuam9pbihcXFwiLCBcXFwiKSxyLnNsaWNlKC0xKS5tYXAocz0+cy5uYW1lKV0uZmlsdGVyKHM9PnMpLmpvaW4oXFxcIiBhbmQgXFxcIikpLGkubGVuZ3RoPjAmJm4ucHVzaChbaS5zbGljZSgwLGkubGVuZ3RoLTIpLm1hcChzPT5zLm5hbWUpLmpvaW4oXFxcIiwgXFxcIiksaS5zbGljZSgtMSkubWFwKHM9PnMubmFtZSldLmZpbHRlcihzPT5zKS5qb2luKFxcXCIgYW5kIFxcXCIpKSxlLnRlbGVwYXRoeT4wJiZuLnB1c2goXFxcInRlbGVwYXRoeSBcXFwiK2UudGVsZXBhdGh5K1xcXCIgZnQuXFxcIiksbi5sZW5ndGg9PTAmJm4ucHVzaChcXFwiJm1kYXNoO1xcXCIpLG4uam9pbihcXFwiOyBcXFwiKX1nZXRTZW5zZXMoZSl7bGV0IG49W107ZS5ibGluZHNpZ2h0PjAmJm4ucHVzaChcXFwiYmxpbmRzaWdodCBcXFwiK2UuYmxpbmRzaWdodCtcXFwiIGZ0LlxcXCIrKGUuYmxpbmQ/XFxcIiAoYmxpbmQgYmV5b25kIHRoaXMgcmFkaXVzKVxcXCI6XFxcIlxcXCIpKSxlLmRhcmt2aXNpb24+MCYmbi5wdXNoKFxcXCJkYXJrdmlzaW9uIFxcXCIrZS5kYXJrdmlzaW9uK1xcXCIgZnQuXFxcIiksZS50cmVtb3JzZW5zZT4wJiZuLnB1c2goXFxcInRyZW1vcnNlbnNlIFxcXCIrZS50cmVtb3JzZW5zZStcXFwiIGZ0LlxcXCIpLGUudHJ1ZXNpZ2h0PjAmJm4ucHVzaChcXFwidHJ1ZXNpZ2h0IFxcXCIrZS50cnVlc2lnaHQrXFxcIiBmdC5cXFwiKTtsZXQgcj1lLnNraWxscy5maW5kKHM9PnMubmFtZT09XFxcInBlcmNlcHRpb25cXFwiKSxpPTEwK0soZS53aXNQb2ludHMpO3JldHVybiByIT1udWxsJiYoaSs9dGhpcy5wcm9maWNpZW5jeSooXFxcIm5vdGVcXFwiaW4gcj8yOjEpKSxuLnB1c2goXFxcInBhc3NpdmUgUGVyY2VwdGlvbiBcXFwiK2kpLG4uam9pbihcXFwiLCBcXFwiKX10cmFuc2Zvcm1TdHJpbmcoZSl7cmV0dXJuIGUucmVwbGFjZSgvKF98XFxcXCp8XFxcXHMqPlxcXFxzKikvZyxcXFwiXFxcIikucmVwbGFjZSgvXFxcXFtNT04oUyk/XFxcXF0vZyxgJHt0aGlzLm1vbnN0ZXIuc2hvcnROYW1lJiZ0aGlzLm1vbnN0ZXIuc2hvcnROYW1lLmxlbmd0aD90aGlzLm1vbnN0ZXIuc2hvcnROYW1lOnRoaXMubW9uc3Rlci5uYW1lfSQxYCkucmVwbGFjZSgvXFxcXFsoXFxcXHcrKVxcXFxdL2csKG4scik9PntpZihyPXIudG9Mb3dlckNhc2UoKSwhKHIgaW4gdGhpcy5tb2RpZmllcnMpKXJldHVybiBuO2xldCBpPXRoaXMubW9kaWZpZXJzW3JdO3JldHVybmAke2k+PTA/XFxcIitcXFwiOlxcXCJcXFwifSR7aX1gfSkucmVwbGFjZSgvXFxcXFsoXFxcXHcrKSAoQVRLfFNBVkUpXFxcXHM/KD86KFsrLV0pXFxcXHM/KFxcXFxkKykpP1xcXFxdL2csKG4scixpPVxcXCJBVEtcXFwiLHM9XFxcIitcXFwiLG89MCk9PntpZihyPXIudG9Mb3dlckNhc2UoKSwhKHIgaW4gdGhpcy5tb2RpZmllcnMpKXJldHVybiBuO289cz09XFxcIitcXFwiP051bWJlcihvKTotTnVtYmVyKG8pO2xldCBsPShpPT1cXFwiQVRLXFxcIj8wOjgpK3RoaXMubW9kaWZpZXJzW3JdK3RoaXMucHJvZmljaWVuY3krbztyZXR1cm5gJHtsPj0wP1xcXCIrXFxcIjpcXFwiXFxcIn0ke2x9YH0pLnJlcGxhY2UoL1xcXFxbKFxcXFx3Kyk/XFxcXHM/KFxcXFxkKltkRF1cXFxcZCspXFxcXHM/KD86KFsrLV0pXFxcXHM/KFxcXFxkKykpP1xcXFxdL2csKG4scixpLHM9XFxcIitcXFwiLG89MCk9Pnt2YXIgaDtyPXIudG9Mb3dlckNhc2UoKTtsZXRbLGw9MSx1XT0oaD1pLm1hdGNoKC8oXFxcXGQqKVtkRF0oXFxcXGQrKS8pKSE9bnVsbD9oOltdO2lmKGx8fChsPTEpLCF1KXJldHVybiBuO289cz09XFxcIitcXFwiP051bWJlcihvKTotTnVtYmVyKG8pLHIgaW4gdGhpcy5tb2RpZmllcnMmJihvKz10aGlzLm1vZGlmaWVyc1tyXSk7bGV0IGE9TWF0aC5mbG9vcigodS8yKy41KSpsKStvLGY9W2Ake2x9ZCR7dX1gXTtyZXR1cm4gbyYmbyE9MCYmKGYucHVzaChvPj0wP1xcXCIrXFxcIjpcXFwiLVxcXCIpLGYucHVzaChvKSksYCR7YX0gKCR7Zi5qb2luKFxcXCIgXFxcIil9KWB9KX1nZXRUcmFpdHMoZSl7cmV0dXJuIWV8fCFlLmxlbmd0aD92b2lkIDA6ZS5maWx0ZXIocj0+ci5uYW1lIT1cXFwiU3BlbGxjYXN0aW5nXFxcIikubWFwKHI9Pih7bmFtZTpyLm5hbWUsZGVzYzp0aGlzLnRyYW5zZm9ybVN0cmluZyhyLmRlc2MpfSkpfWdldFNwZWxscyhlKXt2YXIgaTtpZighZS5hYmlsaXRpZXN8fCFlLmFiaWxpdGllcy5sZW5ndGgpcmV0dXJuO2xldHtkZXNjOm59PShpPWUuYWJpbGl0aWVzLmZpbmQocz0+cy5uYW1lPT1cXFwiU3BlbGxjYXN0aW5nXFxcIikpIT1udWxsP2k6e307cmV0dXJuIG4/dGhpcy50cmFuc2Zvcm1TdHJpbmcobikudHJpbSgpLnNwbGl0KGBcXG5gKS5maWx0ZXIocz0+cy5sZW5ndGgpOnZvaWQgMH1nZXRTYXZlcyhlKXtpZighKFxcXCJzdGhyb3dzXFxcImluIGUpfHwhQXJyYXkuaXNBcnJheShlLnN0aHJvd3MpfHwhZS5zdGhyb3dzLmxlbmd0aClyZXR1cm5bXTtsZXQgbj10aGlzLnByb2ZpY2llbmN5LHI9W107Zm9yKGxldCBpIG9mIGUuc3Rocm93cyl7bGV0IHM9aS5uYW1lLG89SyhOdW1iZXIoZVtgJHtzfVBvaW50c2BdKSk7aXNOYU4obyl8fHIucHVzaCh7W3BhW3NdXTpvK259KX1yZXR1cm4gcn1nZXRTa2lsbHMoZSl7aWYoIShcXFwic2tpbGxzXFxcImluIGUpfHwhQXJyYXkuaXNBcnJheShlLnNraWxscyl8fCFlLnNraWxscy5sZW5ndGgpcmV0dXJuW107bGV0IG49W10scj10aGlzLnByb2ZpY2llbmN5O2ZvcihsZXQgaSBvZiBlLnNraWxscyl7bGV0IHM9aS5zdGF0LG89SyhOdW1iZXIoZVtgJHtzfVBvaW50c2BdKSk7aWYoaXNOYU4obykpY29udGludWU7bGV0IGw9XFxcIm5vdGVcXFwiaW4gaTtuLnB1c2goe1tpLm5hbWVdOnIrbytvKk51bWJlcihsKX0pfXJldHVybiBufWdldFByb2YoZSl7dmFyIHIsaTtsZXQgbj0wO3JldHVybiBlLmNyPT1cXFwiKlxcXCImJihuPWUuY3VzdG9tUHJvZiksXFxcImNyXFxcImluIGUmJmUuY3IgaW4gaG4mJihuPU1hdGgubWF4KE1hdGguZmxvb3IoMisoKChpPShyPWhuW2UuY3JdKT09bnVsbD92b2lkIDA6ci52YWx1ZSkhPW51bGw/aTowKS0xKS80KSwyKSksaXNOYU4oTnVtYmVyKG4pKT8wOk51bWJlcihuKX1wYXJzZUNvbmRpdGlvbnMoZSl7aWYoXFxcImNvbmRpdGlvbnNcXFwiaW4gZSYmQXJyYXkuaXNBcnJheShlLmNvbmRpdGlvbnMpKXJldHVybiBlLmNvbmRpdGlvbnMubWFwKG49Pm4ubmFtZSkuam9pbihcXFwiLCBcXFwiKX19O2FzeW5jIGZ1bmN0aW9uIGRuKHQpe3JldHVybiBuZXcgUHJvbWlzZSgoZSxuKT0+e2xldCByPW5ldyBGaWxlUmVhZGVyLGk9W107ci5vbmxvYWQ9YXN5bmMgcz0+e3RyeXtsZXQgbz1KU09OLnBhcnNlKHMudGFyZ2V0LnJlc3VsdCksbDtcXFwibW9uc3RlclxcXCJpbiBvP2w9by5tb25zdGVyOkFycmF5LmlzQXJyYXkobyk/bD1vOnR5cGVvZiBvPT1cXFwib2JqZWN0XFxcIj9sPVtvXTpuKFxcXCJJbnZhbGlkIG1vbnN0ZXIgSlNPTiBwcm92aWRlZC5cXFwiKTtsZXQgdT1bXTtmb3IobGV0IGEgb2YgbCl0cnl7bGV0IGY9YmUucGFyc2UoYSk7dS5wdXNoKGYpfWNhdGNoKGYpe2NvbnNvbGUuZXJyb3IoZik7Y29udGludWV9ZSh1KX1jYXRjaChvKXtjb25zb2xlLmVycm9yKFxcXCJyZWplY3QhISFcXFwiLG8pLG4obyl9fSxyLnJlYWRBc1RleHQodCl9KX12YXIgdHQ9c2VsZjt0dC5vbm1lc3NhZ2U9YXN5bmMgdD0+e2lmKCF0LmRhdGEpcmV0dXJuO2xldHtmaWxlczplLHNvdXJjZTpufT10LmRhdGEscj1bXTtmb3IobGV0IGkgb2YgZSlzd2l0Y2gobil7Y2FzZVxcXCI1ZVxcXCI6e2xldCBzPWF3YWl0IHBuKGkpO3IucHVzaCguLi5zIT1udWxsP3M6W10pO2JyZWFrfWNhc2VcXFwiY3JpdHRlclxcXCI6e2xldCBzPWF3YWl0IG1uKGkpO3IucHVzaCguLi5zIT1udWxsP3M6W10pO2JyZWFrfWNhc2VcXFwiaW1wcm92ZWRcXFwiOntsZXQgcz1hd2FpdCBmbihpKTtyLnB1c2goLi4ucyE9bnVsbD9zOltdKTticmVha31jYXNlXFxcImFwcGZpbGVcXFwiOntsZXQgcz1hd2FpdCB1bihpKTtyLnB1c2goLi4ucyE9bnVsbD9zOltdKTticmVha31jYXNlXFxcInRldHJhXFxcIjp7bGV0IHM9YXdhaXQgZG4oaSk7ci5wdXNoKC4uLnMhPW51bGw/czpbXSk7YnJlYWt9fXR0LnBvc3RNZXNzYWdlKHttb25zdGVyczpyfSl9O3R0LmFkZEV2ZW50TGlzdGVuZXIoXFxcInVuaGFuZGxlZHJlamVjdGlvblxcXCIsZnVuY3Rpb24odCl7dGhyb3cgdC5yZWFzb259KTtcXG5cIik7XG59XG4iLCAiLy9AdHMtaWdub3JlXG5pbXBvcnQgSW1wb3J0V29ya2VyIGZyb20gXCIuL2ltcG9ydGVyLndvcmtlclwiO1xuaW1wb3J0IHR5cGUgeyBNb25zdGVyIH0gZnJvbSBcIkB0eXBlc1wiO1xuaW1wb3J0IHsgQXBwLCBNb2RhbCwgTm90aWNlLCBTZXR0aW5nLCBUZXh0Q29tcG9uZW50IH0gZnJvbSBcIm9ic2lkaWFuXCI7XG5pbXBvcnQgdHlwZSBTdGF0QmxvY2tQbHVnaW4gZnJvbSBcInNyYy9tYWluXCI7XG5pbXBvcnQgeyBuYW5vaWQgfSBmcm9tIFwic3JjL3V0aWwvdXRpbFwiO1xuXG5jbGFzcyBTb3VyY2VQcm9tcHRNb2RhbCBleHRlbmRzIE1vZGFsIHtcbiAgICBzb3VyY2U6IHN0cmluZztcbiAgICBzYXZlZDogYm9vbGVhbiA9IGZhbHNlO1xuICAgIGRpc3BsYXkoKSB7XG4gICAgICAgIHRoaXMudGl0bGVFbC5jcmVhdGVTcGFuKHsgdGV4dDogXCJTZXQgU291cmNlc1wiIH0pO1xuICAgICAgICBuZXcgU2V0dGluZyh0aGlzLmNvbnRlbnRFbClcbiAgICAgICAgICAgIC5zZXROYW1lKFxuICAgICAgICAgICAgICAgIFwiQSBzb3VyY2UgY291bGQgbm90IGJlIGZvdW5kIGZvciBzb21lIGltcG9ydGVkIG1vbnN0ZXJzLiBEbyB5b3Ugd2lzaCB0byBtYW51YWxseSBhZGQgb25lP1wiXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAuYWRkVGV4dCgodCkgPT4ge1xuICAgICAgICAgICAgICAgIHQuc2V0UGxhY2Vob2xkZXIoXCJVbmtub3duXCIpLm9uQ2hhbmdlKCh2KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc291cmNlID0gdjtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB0aGlzLmJ1aWxkQnV0dG9ucyh0aGlzLmNvbnRlbnRFbCk7XG4gICAgfVxuICAgIGJ1aWxkQnV0dG9ucyhlbDogSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgbmV3IFNldHRpbmcoZWwpXG4gICAgICAgICAgICAuYWRkQnV0dG9uKChiKSA9PlxuICAgICAgICAgICAgICAgIGJcbiAgICAgICAgICAgICAgICAgICAgLnNldEN0YSgpXG4gICAgICAgICAgICAgICAgICAgIC5zZXRJY29uKFwiY2hlY2ttYXJrXCIpXG4gICAgICAgICAgICAgICAgICAgIC5zZXRUb29sdGlwKFwiU2F2ZVwiKVxuICAgICAgICAgICAgICAgICAgICAub25DbGljaygoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNhdmVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIC5hZGRFeHRyYUJ1dHRvbigoYikgPT5cbiAgICAgICAgICAgICAgICBiXG4gICAgICAgICAgICAgICAgICAgIC5zZXRJY29uKFwiY3Jvc3NcIilcbiAgICAgICAgICAgICAgICAgICAgLnNldFRvb2x0aXAoXCJDYW5jZWxcIilcbiAgICAgICAgICAgICAgICAgICAgLm9uQ2xpY2soKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKTtcbiAgICB9XG4gICAgb25PcGVuKCkge1xuICAgICAgICB0aGlzLmRpc3BsYXkoKTtcbiAgICB9XG59XG5cbmNvbnN0IGdldFNvdXJjZUZyb21Qcm9tcHQgPSBhc3luYyAoYXBwOiBBcHApOiBQcm9taXNlPHN0cmluZz4gPT4ge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICBjb25zdCBtb2RhbCA9IG5ldyBTb3VyY2VQcm9tcHRNb2RhbChhcHApO1xuICAgICAgICBtb2RhbC5vbkNsb3NlID0gKCkgPT4ge1xuICAgICAgICAgICAgaWYgKCFtb2RhbC5zYXZlZCkgcmVzb2x2ZShudWxsKTtcbiAgICAgICAgICAgIHJlc29sdmUobW9kYWwuc291cmNlKTtcbiAgICAgICAgfTtcbiAgICAgICAgbW9kYWwub3BlbigpO1xuICAgIH0pO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSW1wb3J0ZXIge1xuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBwbHVnaW46IFN0YXRCbG9ja1BsdWdpbikge31cbiAgICB3b3JrZXJzOiBNYXA8c3RyaW5nLCBXb3JrZXI+ID0gbmV3IE1hcCgpO1xuICAgIGFzeW5jIGltcG9ydChmaWxlczogRmlsZUxpc3QsIHNvdXJjZTogc3RyaW5nKTogUHJvbWlzZTxNb25zdGVyW10+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB3b3JrZXIgPSBuZXcgSW1wb3J0V29ya2VyKCk7XG4gICAgICAgICAgICBjb25zdCBpZCA9IG5hbm9pZCgpO1xuICAgICAgICAgICAgdGhpcy53b3JrZXJzLnNldChpZCwgd29ya2VyKTtcbiAgICAgICAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgICAgICAgd29ya2VyLm9ubWVzc2FnZSA9IGFzeW5jIChldmVudCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHsgbW9uc3RlcnMgfTogeyBtb25zdGVyczogTW9uc3RlcltdIH0gPSBldmVudC5kYXRhID8/IHtcbiAgICAgICAgICAgICAgICAgICAgbW9uc3RlcnM6IFtdXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBpZiAobW9uc3RlcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3IE5vdGljZShcbiAgICAgICAgICAgICAgICAgICAgICAgIGBTdWNjZXNzZnVsbHkgaW1wb3J0ZWQgJHttb25zdGVycy5sZW5ndGh9IE1vbnN0ZXJzYFxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzb3VyY2VsZXNzID0gbW9uc3RlcnMuZmlsdGVyKFxuICAgICAgICAgICAgICAgICAgICAgICAgKG1vbnN0ZXIpID0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9uc3Rlci5zb3VyY2UgPT0gXCJVbmtub3duXCIgfHwgIW1vbnN0ZXIuc291cmNlXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBzb3VyY2U6IHN0cmluZztcbiAgICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlbGVzcy5sZW5ndGggJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIChzb3VyY2UgPSBhd2FpdCBnZXRTb3VyY2VGcm9tUHJvbXB0KHRoaXMucGx1Z2luLmFwcCkpXG4gICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlbGVzcy5mb3JFYWNoKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIChtb25zdGVyKSA9PiAobW9uc3Rlci5zb3VyY2UgPSBzb3VyY2UpXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHdvcmtlci50ZXJtaW5hdGUoKTtcbiAgICAgICAgICAgICAgICB0aGlzLndvcmtlcnMuZGVsZXRlKGlkKTtcbiAgICAgICAgICAgICAgICByZXNvbHZlKG1vbnN0ZXJzKTtcbiAgICAgICAgICAgIH07IC8vQHRzLWlnbm9yZVxuICAgICAgICAgICAgd29ya2VyLm9uZXJyb3IgPSAoZSkgPT4ge1xuICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoXG4gICAgICAgICAgICAgICAgICAgIGBUaGVyZSB3YXMgYW4gZXJyb3IgaW1wb3J0aW5nIHRoZSBmaWxlLlxcblxcbiR7ZS5tZXNzYWdlfWBcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHdvcmtlci50ZXJtaW5hdGUoKTtcbiAgICAgICAgICAgICAgICB0aGlzLndvcmtlcnMuZGVsZXRlKGlkKTtcbiAgICAgICAgICAgICAgICByZXNvbHZlKFtdKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB3b3JrZXIucG9zdE1lc3NhZ2UoeyBmaWxlcywgc291cmNlIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG59XG4iLCAiaW1wb3J0IHtcbiAgICBURm9sZGVyLFxuICAgIHR5cGUgVGV4dENvbXBvbmVudCxcbiAgICB0eXBlIENhY2hlZE1ldGFkYXRhLFxuICAgIHR5cGUgQXBwLFxuICAgIHR5cGUgRnV6enlNYXRjaFxufSBmcm9tIFwib2JzaWRpYW5cIjtcbmltcG9ydCB7IFN1Z2dlc3Rpb25Nb2RhbCB9IGZyb20gXCIuL2dlbmVyaWNfc3VnZ2VzdGVyXCI7XG5cbmV4cG9ydCBjbGFzcyBGb2xkZXJTdWdnZXN0aW9uTW9kYWwgZXh0ZW5kcyBTdWdnZXN0aW9uTW9kYWw8VEZvbGRlcj4ge1xuICAgIHRleHQ6IFRleHRDb21wb25lbnQ7XG4gICAgY2FjaGU6IENhY2hlZE1ldGFkYXRhO1xuICAgIGZvbGRlcnM6IFRGb2xkZXJbXTtcbiAgICBmb2xkZXI6IFRGb2xkZXI7XG4gICAgY29uc3RydWN0b3IoYXBwOiBBcHAsIGlucHV0OiBUZXh0Q29tcG9uZW50LCBpdGVtczogVEZvbGRlcltdKSB7XG4gICAgICAgIHN1cGVyKGFwcCwgaW5wdXQuaW5wdXRFbCwgaXRlbXMpO1xuICAgICAgICB0aGlzLmZvbGRlcnMgPSBbLi4uaXRlbXNdO1xuICAgICAgICB0aGlzLnRleHQgPSBpbnB1dDtcblxuICAgICAgICB0aGlzLmlucHV0RWwuYWRkRXZlbnRMaXN0ZW5lcihcImlucHV0XCIsICgpID0+IHRoaXMuZ2V0Rm9sZGVyKCkpO1xuICAgIH1cbiAgICBnZXRGb2xkZXIoKSB7XG4gICAgICAgIGNvbnN0IHYgPSB0aGlzLmlucHV0RWwudmFsdWUsXG4gICAgICAgICAgICBmb2xkZXIgPSB0aGlzLmFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgodik7XG4gICAgICAgIGlmIChmb2xkZXIgPT0gdGhpcy5mb2xkZXIpIHJldHVybjtcbiAgICAgICAgaWYgKCEoZm9sZGVyIGluc3RhbmNlb2YgVEZvbGRlcikpIHJldHVybjtcbiAgICAgICAgdGhpcy5mb2xkZXIgPSBmb2xkZXI7XG5cbiAgICAgICAgdGhpcy5vbklucHV0Q2hhbmdlZCgpO1xuICAgIH1cbiAgICBnZXRJdGVtVGV4dChpdGVtOiBURm9sZGVyKSB7XG4gICAgICAgIHJldHVybiBpdGVtLnBhdGg7XG4gICAgfVxuICAgIG9uQ2hvb3NlSXRlbShpdGVtOiBURm9sZGVyKSB7XG4gICAgICAgIHRoaXMudGV4dC5zZXRWYWx1ZShpdGVtLnBhdGgpO1xuICAgICAgICB0aGlzLmZvbGRlciA9IGl0ZW07XG4gICAgfVxuICAgIHNlbGVjdFN1Z2dlc3Rpb24oeyBpdGVtIH06IEZ1enp5TWF0Y2g8VEZvbGRlcj4pIHtcbiAgICAgICAgbGV0IGxpbmsgPSBpdGVtLnBhdGg7XG5cbiAgICAgICAgdGhpcy50ZXh0LnNldFZhbHVlKGxpbmspO1xuICAgICAgICB0aGlzLm9uQ2xvc2UoKTtcblxuICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgfVxuICAgIHJlbmRlclN1Z2dlc3Rpb24ocmVzdWx0OiBGdXp6eU1hdGNoPFRGb2xkZXI+LCBlbDogSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgbGV0IHsgaXRlbSwgbWF0Y2g6IG1hdGNoZXMgfSA9IHJlc3VsdCB8fCB7fTtcbiAgICAgICAgbGV0IGNvbnRlbnQgPSBlbC5jcmVhdGVEaXYoe1xuICAgICAgICAgICAgY2xzOiBcInN1Z2dlc3Rpb24tY29udGVudFwiXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIWl0ZW0pIHtcbiAgICAgICAgICAgIGNvbnRlbnQuc2V0VGV4dCh0aGlzLmVtcHR5U3RhdGVUZXh0KTtcbiAgICAgICAgICAgIGNvbnRlbnQucGFyZW50RWxlbWVudC5hZGRDbGFzcyhcImlzLXNlbGVjdGVkXCIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHBhdGhMZW5ndGggPSBpdGVtLnBhdGgubGVuZ3RoIC0gaXRlbS5uYW1lLmxlbmd0aDtcbiAgICAgICAgY29uc3QgbWF0Y2hFbGVtZW50cyA9IG1hdGNoZXMubWF0Y2hlcy5tYXAoKG0pID0+IHtcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVTcGFuKFwic3VnZ2VzdGlvbi1oaWdobGlnaHRcIik7XG4gICAgICAgIH0pO1xuICAgICAgICBmb3IgKGxldCBpID0gcGF0aExlbmd0aDsgaSA8IGl0ZW0ucGF0aC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IG1hdGNoID0gbWF0Y2hlcy5tYXRjaGVzLmZpbmQoKG0pID0+IG1bMF0gPT09IGkpO1xuICAgICAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgbGV0IGVsZW1lbnQgPSBtYXRjaEVsZW1lbnRzW21hdGNoZXMubWF0Y2hlcy5pbmRleE9mKG1hdGNoKV07XG4gICAgICAgICAgICAgICAgY29udGVudC5hcHBlbmRDaGlsZChlbGVtZW50KTtcbiAgICAgICAgICAgICAgICBlbGVtZW50LmFwcGVuZFRleHQoaXRlbS5wYXRoLnN1YnN0cmluZyhtYXRjaFswXSwgbWF0Y2hbMV0pKTtcblxuICAgICAgICAgICAgICAgIGkgKz0gbWF0Y2hbMV0gLSBtYXRjaFswXSAtIDE7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnRlbnQuYXBwZW5kVGV4dChpdGVtLnBhdGhbaV0pO1xuICAgICAgICB9XG4gICAgICAgIGVsLmNyZWF0ZURpdih7XG4gICAgICAgICAgICBjbHM6IFwic3VnZ2VzdGlvbi1ub3RlXCIsXG4gICAgICAgICAgICB0ZXh0OiBpdGVtLnBhdGhcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZ2V0SXRlbXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZvbGRlcnM7XG4gICAgfVxufVxuIiwgImltcG9ydCB7XG4gICAgQXBwLFxuICAgIEZ1enp5TWF0Y2gsXG4gICAgRnV6enlTdWdnZXN0TW9kYWwsXG4gICAgU2NvcGUsXG4gICAgU3VnZ2VzdE1vZGFsXG59IGZyb20gXCJvYnNpZGlhblwiO1xuaW1wb3J0IHsgY3JlYXRlUG9wcGVyLCBJbnN0YW5jZSBhcyBQb3BwZXJJbnN0YW5jZSB9IGZyb20gXCJAcG9wcGVyanMvY29yZVwiO1xuZGVjbGFyZSBtb2R1bGUgXCJvYnNpZGlhblwiIHtcbiAgICBpbnRlcmZhY2UgQXBwIHtcbiAgICAgICAga2V5bWFwOiB7XG4gICAgICAgICAgICBwdXNoU2NvcGUoc2NvcGU6IFNjb3BlKTogdm9pZDtcbiAgICAgICAgICAgIHBvcFNjb3BlKHNjb3BlOiBTY29wZSk6IHZvaWQ7XG4gICAgICAgIH07XG4gICAgfVxufVxuY2xhc3MgU3VnZ2VzdGVyPFQ+IHtcbiAgICBvd25lcjogU3VnZ2VzdE1vZGFsPFQ+O1xuICAgIGl0ZW1zOiBUW107XG4gICAgc3VnZ2VzdGlvbnM6IEhUTUxEaXZFbGVtZW50W107XG4gICAgc2VsZWN0ZWRJdGVtOiBudW1iZXI7XG4gICAgY29udGFpbmVyRWw6IEhUTUxFbGVtZW50O1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBvd25lcjogU3VnZ2VzdE1vZGFsPFQ+LFxuICAgICAgICBjb250YWluZXJFbDogSFRNTEVsZW1lbnQsXG4gICAgICAgIHNjb3BlOiBTY29wZVxuICAgICkge1xuICAgICAgICB0aGlzLmNvbnRhaW5lckVsID0gY29udGFpbmVyRWw7XG4gICAgICAgIHRoaXMub3duZXIgPSBvd25lcjtcbiAgICAgICAgY29udGFpbmVyRWwub24oXG4gICAgICAgICAgICBcImNsaWNrXCIsXG4gICAgICAgICAgICBcIi5zdWdnZXN0aW9uLWl0ZW1cIixcbiAgICAgICAgICAgIHRoaXMub25TdWdnZXN0aW9uQ2xpY2suYmluZCh0aGlzKVxuICAgICAgICApO1xuICAgICAgICBjb250YWluZXJFbC5vbihcbiAgICAgICAgICAgIFwibW91c2Vtb3ZlXCIsXG4gICAgICAgICAgICBcIi5zdWdnZXN0aW9uLWl0ZW1cIixcbiAgICAgICAgICAgIHRoaXMub25TdWdnZXN0aW9uTW91c2VvdmVyLmJpbmQodGhpcylcbiAgICAgICAgKTtcblxuICAgICAgICBzY29wZS5yZWdpc3RlcihbXSwgXCJBcnJvd1VwXCIsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuc2V0U2VsZWN0ZWRJdGVtKHRoaXMuc2VsZWN0ZWRJdGVtIC0gMSwgdHJ1ZSk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHNjb3BlLnJlZ2lzdGVyKFtdLCBcIkFycm93RG93blwiLCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnNldFNlbGVjdGVkSXRlbSh0aGlzLnNlbGVjdGVkSXRlbSArIDEsIHRydWUpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9KTtcblxuICAgICAgICBzY29wZS5yZWdpc3RlcihbXSwgXCJFbnRlclwiLCAoZXZ0KSA9PiB7XG4gICAgICAgICAgICB0aGlzLnVzZVNlbGVjdGVkSXRlbShldnQpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9KTtcblxuICAgICAgICBzY29wZS5yZWdpc3RlcihbXSwgXCJUYWJcIiwgKGV2dCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5jaG9vc2VTdWdnZXN0aW9uKGV2dCk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBjaG9vc2VTdWdnZXN0aW9uKGV2dDogS2V5Ym9hcmRFdmVudCkge1xuICAgICAgICBpZiAoIXRoaXMuaXRlbXMgfHwgIXRoaXMuaXRlbXMubGVuZ3RoKSByZXR1cm47XG4gICAgICAgIGNvbnN0IGN1cnJlbnRWYWx1ZSA9IHRoaXMuaXRlbXNbdGhpcy5zZWxlY3RlZEl0ZW1dO1xuICAgICAgICBpZiAoY3VycmVudFZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLm93bmVyLm9uQ2hvb3NlU3VnZ2VzdGlvbihjdXJyZW50VmFsdWUsIGV2dCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgb25TdWdnZXN0aW9uQ2xpY2soZXZlbnQ6IE1vdXNlRXZlbnQsIGVsOiBIVE1MRGl2RWxlbWVudCk6IHZvaWQge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBpZiAoIXRoaXMuc3VnZ2VzdGlvbnMgfHwgIXRoaXMuc3VnZ2VzdGlvbnMubGVuZ3RoKSByZXR1cm47XG5cbiAgICAgICAgY29uc3QgaXRlbSA9IHRoaXMuc3VnZ2VzdGlvbnMuaW5kZXhPZihlbCk7XG4gICAgICAgIHRoaXMuc2V0U2VsZWN0ZWRJdGVtKGl0ZW0sIGZhbHNlKTtcbiAgICAgICAgdGhpcy51c2VTZWxlY3RlZEl0ZW0oZXZlbnQpO1xuICAgIH1cblxuICAgIG9uU3VnZ2VzdGlvbk1vdXNlb3ZlcihldmVudDogTW91c2VFdmVudCwgZWw6IEhUTUxEaXZFbGVtZW50KTogdm9pZCB7XG4gICAgICAgIGlmICghdGhpcy5zdWdnZXN0aW9ucyB8fCAhdGhpcy5zdWdnZXN0aW9ucy5sZW5ndGgpIHJldHVybjtcbiAgICAgICAgY29uc3QgaXRlbSA9IHRoaXMuc3VnZ2VzdGlvbnMuaW5kZXhPZihlbCk7XG4gICAgICAgIHRoaXMuc2V0U2VsZWN0ZWRJdGVtKGl0ZW0sIGZhbHNlKTtcbiAgICB9XG4gICAgZW1wdHkoKSB7XG4gICAgICAgIHRoaXMuY29udGFpbmVyRWwuZW1wdHkoKTtcbiAgICB9XG4gICAgc2V0U3VnZ2VzdGlvbnMoaXRlbXM6IFRbXSkge1xuICAgICAgICB0aGlzLmNvbnRhaW5lckVsLmVtcHR5KCk7XG4gICAgICAgIGNvbnN0IGVsczogSFRNTERpdkVsZW1lbnRbXSA9IFtdO1xuXG4gICAgICAgIGl0ZW1zLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHN1Z2dlc3Rpb25FbCA9IHRoaXMuY29udGFpbmVyRWwuY3JlYXRlRGl2KFwic3VnZ2VzdGlvbi1pdGVtXCIpO1xuICAgICAgICAgICAgdGhpcy5vd25lci5yZW5kZXJTdWdnZXN0aW9uKGl0ZW0sIHN1Z2dlc3Rpb25FbCk7XG4gICAgICAgICAgICBlbHMucHVzaChzdWdnZXN0aW9uRWwpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5pdGVtcyA9IGl0ZW1zO1xuICAgICAgICB0aGlzLnN1Z2dlc3Rpb25zID0gZWxzO1xuICAgICAgICB0aGlzLnNldFNlbGVjdGVkSXRlbSgwLCBmYWxzZSk7XG4gICAgfVxuICAgIHVzZVNlbGVjdGVkSXRlbShldmVudDogTW91c2VFdmVudCB8IEtleWJvYXJkRXZlbnQpIHtcbiAgICAgICAgaWYgKCF0aGlzLml0ZW1zIHx8ICF0aGlzLml0ZW1zLmxlbmd0aCkgcmV0dXJuO1xuICAgICAgICBjb25zdCBjdXJyZW50VmFsdWUgPSB0aGlzLml0ZW1zW3RoaXMuc2VsZWN0ZWRJdGVtXTtcbiAgICAgICAgaWYgKGN1cnJlbnRWYWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5vd25lci5zZWxlY3RTdWdnZXN0aW9uKGN1cnJlbnRWYWx1ZSwgZXZlbnQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHdyYXAodmFsdWU6IG51bWJlciwgc2l6ZTogbnVtYmVyKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuICgodmFsdWUgJSBzaXplKSArIHNpemUpICUgc2l6ZTtcbiAgICB9XG4gICAgc2V0U2VsZWN0ZWRJdGVtKGluZGV4OiBudW1iZXIsIHNjcm9sbDogYm9vbGVhbikge1xuICAgICAgICBjb25zdCBuSW5kZXggPSB0aGlzLndyYXAoaW5kZXgsIHRoaXMuc3VnZ2VzdGlvbnMubGVuZ3RoKTtcbiAgICAgICAgY29uc3QgcHJldiA9IHRoaXMuc3VnZ2VzdGlvbnNbdGhpcy5zZWxlY3RlZEl0ZW1dO1xuICAgICAgICBjb25zdCBuZXh0ID0gdGhpcy5zdWdnZXN0aW9uc1tuSW5kZXhdO1xuXG4gICAgICAgIGlmIChwcmV2KSBwcmV2LnJlbW92ZUNsYXNzKFwiaXMtc2VsZWN0ZWRcIik7XG4gICAgICAgIGlmIChuZXh0KSBuZXh0LmFkZENsYXNzKFwiaXMtc2VsZWN0ZWRcIik7XG5cbiAgICAgICAgdGhpcy5zZWxlY3RlZEl0ZW0gPSBuSW5kZXg7XG5cbiAgICAgICAgaWYgKHNjcm9sbCAmJiBuZXh0KSB7XG4gICAgICAgICAgICBuZXh0LnNjcm9sbEludG9WaWV3KGZhbHNlKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFN1Z2dlc3Rpb25Nb2RhbDxUPiBleHRlbmRzIEZ1enp5U3VnZ2VzdE1vZGFsPFQ+IHtcbiAgICBpdGVtczogVFtdID0gW107XG4gICAgc3VnZ2VzdGlvbnM6IEhUTUxEaXZFbGVtZW50W107XG4gICAgcG9wcGVyOiBQb3BwZXJJbnN0YW5jZTtcbiAgICBzY29wZTogU2NvcGUgPSBuZXcgU2NvcGUoKTtcbiAgICBzdWdnZXN0ZXI6IFN1Z2dlc3RlcjxGdXp6eU1hdGNoPFQ+PjtcbiAgICBzdWdnZXN0RWw6IEhUTUxEaXZFbGVtZW50O1xuICAgIHByb21wdEVsOiBIVE1MRGl2RWxlbWVudDtcbiAgICBlbXB0eVN0YXRlVGV4dDogc3RyaW5nID0gXCJObyBtYXRjaCBmb3VuZFwiO1xuICAgIGxpbWl0OiBudW1iZXIgPSAxMDA7XG4gICAgc2hvdWxkTm90T3BlbjogYm9vbGVhbjtcbiAgICBjb25zdHJ1Y3RvcihhcHA6IEFwcCwgaW5wdXRFbDogSFRNTElucHV0RWxlbWVudCwgaXRlbXM6IFRbXSkge1xuICAgICAgICBzdXBlcihhcHApO1xuICAgICAgICB0aGlzLmlucHV0RWwgPSBpbnB1dEVsO1xuICAgICAgICB0aGlzLml0ZW1zID0gaXRlbXM7XG5cbiAgICAgICAgdGhpcy5zdWdnZXN0RWwgPSBjcmVhdGVEaXYoXCJzdWdnZXN0aW9uLWNvbnRhaW5lclwiKTtcblxuICAgICAgICB0aGlzLmNvbnRlbnRFbCA9IHRoaXMuc3VnZ2VzdEVsLmNyZWF0ZURpdihcInN1Z2dlc3Rpb25cIik7XG5cbiAgICAgICAgdGhpcy5zdWdnZXN0ZXIgPSBuZXcgU3VnZ2VzdGVyKHRoaXMsIHRoaXMuY29udGVudEVsLCB0aGlzLnNjb3BlKTtcblxuICAgICAgICB0aGlzLnNjb3BlLnJlZ2lzdGVyKFtdLCBcIkVzY2FwZVwiLCB0aGlzLm9uRXNjYXBlLmJpbmQodGhpcykpO1xuXG4gICAgICAgIHRoaXMuaW5wdXRFbC5hZGRFdmVudExpc3RlbmVyKFwiaW5wdXRcIiwgdGhpcy5vbklucHV0Q2hhbmdlZC5iaW5kKHRoaXMpKTtcbiAgICAgICAgdGhpcy5pbnB1dEVsLmFkZEV2ZW50TGlzdGVuZXIoXCJmb2N1c1wiLCB0aGlzLm9uRm9jdXMuYmluZCh0aGlzKSk7XG4gICAgICAgIHRoaXMuaW5wdXRFbC5hZGRFdmVudExpc3RlbmVyKFwiYmx1clwiLCB0aGlzLmNsb3NlLmJpbmQodGhpcykpO1xuICAgICAgICB0aGlzLnN1Z2dlc3RFbC5vbihcbiAgICAgICAgICAgIFwibW91c2Vkb3duXCIsXG4gICAgICAgICAgICBcIi5zdWdnZXN0aW9uLWNvbnRhaW5lclwiLFxuICAgICAgICAgICAgKGV2ZW50OiBNb3VzZUV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICB9XG4gICAgZW1wdHkoKSB7XG4gICAgICAgIHRoaXMuc3VnZ2VzdGVyLmVtcHR5KCk7XG4gICAgfVxuICAgIG9uSW5wdXRDaGFuZ2VkKCk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5zaG91bGROb3RPcGVuKSByZXR1cm47XG4gICAgICAgIGNvbnN0IGlucHV0U3RyID0gdGhpcy5tb2RpZnlJbnB1dCh0aGlzLmlucHV0RWwudmFsdWUpO1xuICAgICAgICBjb25zdCBzdWdnZXN0aW9ucyA9IHRoaXMuZ2V0U3VnZ2VzdGlvbnMoaW5wdXRTdHIpO1xuICAgICAgICBpZiAoc3VnZ2VzdGlvbnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdGhpcy5zdWdnZXN0ZXIuc2V0U3VnZ2VzdGlvbnMoc3VnZ2VzdGlvbnMuc2xpY2UoMCwgdGhpcy5saW1pdCkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5vbk5vU3VnZ2VzdGlvbigpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMub3BlbigpO1xuICAgIH1cbiAgICBvbkZvY3VzKCk6IHZvaWQge1xuICAgICAgICB0aGlzLnNob3VsZE5vdE9wZW4gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5vbklucHV0Q2hhbmdlZCgpO1xuICAgIH1cbiAgICBtb2RpZnlJbnB1dChpbnB1dDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIGlucHV0O1xuICAgIH1cbiAgICBvbk5vU3VnZ2VzdGlvbigpIHtcbiAgICAgICAgdGhpcy5lbXB0eSgpO1xuICAgICAgICB0aGlzLnJlbmRlclN1Z2dlc3Rpb24oXG4gICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgdGhpcy5jb250ZW50RWwuY3JlYXRlRGl2KFwic3VnZ2VzdGlvbi1pdGVtXCIpXG4gICAgICAgICk7XG4gICAgfVxuICAgIG9wZW4oKTogdm9pZCB7XG4gICAgICAgIC8vIFRPRE86IEZpZ3VyZSBvdXQgYSBiZXR0ZXIgd2F5IHRvIGRvIHRoaXMuIElkZWEgZnJvbSBQZXJpb2RpYyBOb3RlcyBwbHVnaW5cbiAgICAgICAgdGhpcy5hcHAua2V5bWFwLnB1c2hTY29wZSh0aGlzLnNjb3BlKTtcblxuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRoaXMuc3VnZ2VzdEVsKTtcbiAgICAgICAgdGhpcy5wb3BwZXIgPSBjcmVhdGVQb3BwZXIodGhpcy5pbnB1dEVsLCB0aGlzLnN1Z2dlc3RFbCwge1xuICAgICAgICAgICAgcGxhY2VtZW50OiBcImJvdHRvbS1zdGFydFwiLFxuICAgICAgICAgICAgbW9kaWZpZXJzOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIm9mZnNldFwiLFxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQ6IFswLCAxMF1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBcImZsaXBcIixcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgZmFsbGJhY2tQbGFjZW1lbnRzOiBbXCJ0b3BcIl1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgb25Fc2NhcGUoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgICAgdGhpcy5zaG91bGROb3RPcGVuID0gdHJ1ZTtcbiAgICB9XG4gICAgY2xvc2UoKTogdm9pZCB7XG4gICAgICAgIC8vIFRPRE86IEZpZ3VyZSBvdXQgYSBiZXR0ZXIgd2F5IHRvIGRvIHRoaXMuIElkZWEgZnJvbSBQZXJpb2RpYyBOb3RlcyBwbHVnaW5cbiAgICAgICAgdGhpcy5hcHAua2V5bWFwLnBvcFNjb3BlKHRoaXMuc2NvcGUpO1xuXG4gICAgICAgIHRoaXMuc3VnZ2VzdGVyLnNldFN1Z2dlc3Rpb25zKFtdKTtcbiAgICAgICAgaWYgKHRoaXMucG9wcGVyKSB7XG4gICAgICAgICAgICB0aGlzLnBvcHBlci5kZXN0cm95KCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnN1Z2dlc3RFbC5kZXRhY2goKTtcbiAgICB9XG4gICAgY3JlYXRlUHJvbXB0KHByb21wdHM6IEhUTUxTcGFuRWxlbWVudFtdKSB7XG4gICAgICAgIGlmICghdGhpcy5wcm9tcHRFbClcbiAgICAgICAgICAgIHRoaXMucHJvbXB0RWwgPSB0aGlzLnN1Z2dlc3RFbC5jcmVhdGVEaXYoXCJwcm9tcHQtaW5zdHJ1Y3Rpb25zXCIpO1xuICAgICAgICBsZXQgcHJvbXB0ID0gdGhpcy5wcm9tcHRFbC5jcmVhdGVEaXYoXCJwcm9tcHQtaW5zdHJ1Y3Rpb25cIik7XG4gICAgICAgIGZvciAobGV0IHAgb2YgcHJvbXB0cykge1xuICAgICAgICAgICAgcHJvbXB0LmFwcGVuZENoaWxkKHApO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFic3RyYWN0IG9uQ2hvb3NlSXRlbShpdGVtOiBULCBldnQ6IE1vdXNlRXZlbnQgfCBLZXlib2FyZEV2ZW50KTogdm9pZDtcbiAgICBhYnN0cmFjdCBnZXRJdGVtVGV4dChhcmc6IFQpOiBzdHJpbmc7XG4gICAgYWJzdHJhY3QgZ2V0SXRlbXMoKTogVFtdO1xufVxuIiwgImV4cG9ydCB2YXIgdG9wID0gJ3RvcCc7XG5leHBvcnQgdmFyIGJvdHRvbSA9ICdib3R0b20nO1xuZXhwb3J0IHZhciByaWdodCA9ICdyaWdodCc7XG5leHBvcnQgdmFyIGxlZnQgPSAnbGVmdCc7XG5leHBvcnQgdmFyIGF1dG8gPSAnYXV0byc7XG5leHBvcnQgdmFyIGJhc2VQbGFjZW1lbnRzID0gW3RvcCwgYm90dG9tLCByaWdodCwgbGVmdF07XG5leHBvcnQgdmFyIHN0YXJ0ID0gJ3N0YXJ0JztcbmV4cG9ydCB2YXIgZW5kID0gJ2VuZCc7XG5leHBvcnQgdmFyIGNsaXBwaW5nUGFyZW50cyA9ICdjbGlwcGluZ1BhcmVudHMnO1xuZXhwb3J0IHZhciB2aWV3cG9ydCA9ICd2aWV3cG9ydCc7XG5leHBvcnQgdmFyIHBvcHBlciA9ICdwb3BwZXInO1xuZXhwb3J0IHZhciByZWZlcmVuY2UgPSAncmVmZXJlbmNlJztcbmV4cG9ydCB2YXIgdmFyaWF0aW9uUGxhY2VtZW50cyA9IC8qI19fUFVSRV9fKi9iYXNlUGxhY2VtZW50cy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgcGxhY2VtZW50KSB7XG4gIHJldHVybiBhY2MuY29uY2F0KFtwbGFjZW1lbnQgKyBcIi1cIiArIHN0YXJ0LCBwbGFjZW1lbnQgKyBcIi1cIiArIGVuZF0pO1xufSwgW10pO1xuZXhwb3J0IHZhciBwbGFjZW1lbnRzID0gLyojX19QVVJFX18qL1tdLmNvbmNhdChiYXNlUGxhY2VtZW50cywgW2F1dG9dKS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgcGxhY2VtZW50KSB7XG4gIHJldHVybiBhY2MuY29uY2F0KFtwbGFjZW1lbnQsIHBsYWNlbWVudCArIFwiLVwiICsgc3RhcnQsIHBsYWNlbWVudCArIFwiLVwiICsgZW5kXSk7XG59LCBbXSk7IC8vIG1vZGlmaWVycyB0aGF0IG5lZWQgdG8gcmVhZCB0aGUgRE9NXG5cbmV4cG9ydCB2YXIgYmVmb3JlUmVhZCA9ICdiZWZvcmVSZWFkJztcbmV4cG9ydCB2YXIgcmVhZCA9ICdyZWFkJztcbmV4cG9ydCB2YXIgYWZ0ZXJSZWFkID0gJ2FmdGVyUmVhZCc7IC8vIHB1cmUtbG9naWMgbW9kaWZpZXJzXG5cbmV4cG9ydCB2YXIgYmVmb3JlTWFpbiA9ICdiZWZvcmVNYWluJztcbmV4cG9ydCB2YXIgbWFpbiA9ICdtYWluJztcbmV4cG9ydCB2YXIgYWZ0ZXJNYWluID0gJ2FmdGVyTWFpbic7IC8vIG1vZGlmaWVyIHdpdGggdGhlIHB1cnBvc2UgdG8gd3JpdGUgdG8gdGhlIERPTSAob3Igd3JpdGUgaW50byBhIGZyYW1ld29yayBzdGF0ZSlcblxuZXhwb3J0IHZhciBiZWZvcmVXcml0ZSA9ICdiZWZvcmVXcml0ZSc7XG5leHBvcnQgdmFyIHdyaXRlID0gJ3dyaXRlJztcbmV4cG9ydCB2YXIgYWZ0ZXJXcml0ZSA9ICdhZnRlcldyaXRlJztcbmV4cG9ydCB2YXIgbW9kaWZpZXJQaGFzZXMgPSBbYmVmb3JlUmVhZCwgcmVhZCwgYWZ0ZXJSZWFkLCBiZWZvcmVNYWluLCBtYWluLCBhZnRlck1haW4sIGJlZm9yZVdyaXRlLCB3cml0ZSwgYWZ0ZXJXcml0ZV07IiwgImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldE5vZGVOYW1lKGVsZW1lbnQpIHtcbiAgcmV0dXJuIGVsZW1lbnQgPyAoZWxlbWVudC5ub2RlTmFtZSB8fCAnJykudG9Mb3dlckNhc2UoKSA6IG51bGw7XG59IiwgImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFdpbmRvdyhub2RlKSB7XG4gIGlmIChub2RlID09IG51bGwpIHtcbiAgICByZXR1cm4gd2luZG93O1xuICB9XG5cbiAgaWYgKG5vZGUudG9TdHJpbmcoKSAhPT0gJ1tvYmplY3QgV2luZG93XScpIHtcbiAgICB2YXIgb3duZXJEb2N1bWVudCA9IG5vZGUub3duZXJEb2N1bWVudDtcbiAgICByZXR1cm4gb3duZXJEb2N1bWVudCA/IG93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcgfHwgd2luZG93IDogd2luZG93O1xuICB9XG5cbiAgcmV0dXJuIG5vZGU7XG59IiwgImltcG9ydCBnZXRXaW5kb3cgZnJvbSBcIi4vZ2V0V2luZG93LmpzXCI7XG5cbmZ1bmN0aW9uIGlzRWxlbWVudChub2RlKSB7XG4gIHZhciBPd25FbGVtZW50ID0gZ2V0V2luZG93KG5vZGUpLkVsZW1lbnQ7XG4gIHJldHVybiBub2RlIGluc3RhbmNlb2YgT3duRWxlbWVudCB8fCBub2RlIGluc3RhbmNlb2YgRWxlbWVudDtcbn1cblxuZnVuY3Rpb24gaXNIVE1MRWxlbWVudChub2RlKSB7XG4gIHZhciBPd25FbGVtZW50ID0gZ2V0V2luZG93KG5vZGUpLkhUTUxFbGVtZW50O1xuICByZXR1cm4gbm9kZSBpbnN0YW5jZW9mIE93bkVsZW1lbnQgfHwgbm9kZSBpbnN0YW5jZW9mIEhUTUxFbGVtZW50O1xufVxuXG5mdW5jdGlvbiBpc1NoYWRvd1Jvb3Qobm9kZSkge1xuICAvLyBJRSAxMSBoYXMgbm8gU2hhZG93Um9vdFxuICBpZiAodHlwZW9mIFNoYWRvd1Jvb3QgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIE93bkVsZW1lbnQgPSBnZXRXaW5kb3cobm9kZSkuU2hhZG93Um9vdDtcbiAgcmV0dXJuIG5vZGUgaW5zdGFuY2VvZiBPd25FbGVtZW50IHx8IG5vZGUgaW5zdGFuY2VvZiBTaGFkb3dSb290O1xufVxuXG5leHBvcnQgeyBpc0VsZW1lbnQsIGlzSFRNTEVsZW1lbnQsIGlzU2hhZG93Um9vdCB9OyIsICJpbXBvcnQgZ2V0Tm9kZU5hbWUgZnJvbSBcIi4uL2RvbS11dGlscy9nZXROb2RlTmFtZS5qc1wiO1xuaW1wb3J0IHsgaXNIVE1MRWxlbWVudCB9IGZyb20gXCIuLi9kb20tdXRpbHMvaW5zdGFuY2VPZi5qc1wiOyAvLyBUaGlzIG1vZGlmaWVyIHRha2VzIHRoZSBzdHlsZXMgcHJlcGFyZWQgYnkgdGhlIGBjb21wdXRlU3R5bGVzYCBtb2RpZmllclxuLy8gYW5kIGFwcGxpZXMgdGhlbSB0byB0aGUgSFRNTEVsZW1lbnRzIHN1Y2ggYXMgcG9wcGVyIGFuZCBhcnJvd1xuXG5mdW5jdGlvbiBhcHBseVN0eWxlcyhfcmVmKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYuc3RhdGU7XG4gIE9iamVjdC5rZXlzKHN0YXRlLmVsZW1lbnRzKS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdmFyIHN0eWxlID0gc3RhdGUuc3R5bGVzW25hbWVdIHx8IHt9O1xuICAgIHZhciBhdHRyaWJ1dGVzID0gc3RhdGUuYXR0cmlidXRlc1tuYW1lXSB8fCB7fTtcbiAgICB2YXIgZWxlbWVudCA9IHN0YXRlLmVsZW1lbnRzW25hbWVdOyAvLyBhcnJvdyBpcyBvcHRpb25hbCArIHZpcnR1YWwgZWxlbWVudHNcblxuICAgIGlmICghaXNIVE1MRWxlbWVudChlbGVtZW50KSB8fCAhZ2V0Tm9kZU5hbWUoZWxlbWVudCkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIEZsb3cgZG9lc24ndCBzdXBwb3J0IHRvIGV4dGVuZCB0aGlzIHByb3BlcnR5LCBidXQgaXQncyB0aGUgbW9zdFxuICAgIC8vIGVmZmVjdGl2ZSB3YXkgdG8gYXBwbHkgc3R5bGVzIHRvIGFuIEhUTUxFbGVtZW50XG4gICAgLy8gJEZsb3dGaXhNZVtjYW5ub3Qtd3JpdGVdXG5cblxuICAgIE9iamVjdC5hc3NpZ24oZWxlbWVudC5zdHlsZSwgc3R5bGUpO1xuICAgIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGF0dHJpYnV0ZXNbbmFtZV07XG5cbiAgICAgIGlmICh2YWx1ZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShuYW1lLCB2YWx1ZSA9PT0gdHJ1ZSA/ICcnIDogdmFsdWUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gZWZmZWN0KF9yZWYyKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYyLnN0YXRlO1xuICB2YXIgaW5pdGlhbFN0eWxlcyA9IHtcbiAgICBwb3BwZXI6IHtcbiAgICAgIHBvc2l0aW9uOiBzdGF0ZS5vcHRpb25zLnN0cmF0ZWd5LFxuICAgICAgbGVmdDogJzAnLFxuICAgICAgdG9wOiAnMCcsXG4gICAgICBtYXJnaW46ICcwJ1xuICAgIH0sXG4gICAgYXJyb3c6IHtcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnXG4gICAgfSxcbiAgICByZWZlcmVuY2U6IHt9XG4gIH07XG4gIE9iamVjdC5hc3NpZ24oc3RhdGUuZWxlbWVudHMucG9wcGVyLnN0eWxlLCBpbml0aWFsU3R5bGVzLnBvcHBlcik7XG4gIHN0YXRlLnN0eWxlcyA9IGluaXRpYWxTdHlsZXM7XG5cbiAgaWYgKHN0YXRlLmVsZW1lbnRzLmFycm93KSB7XG4gICAgT2JqZWN0LmFzc2lnbihzdGF0ZS5lbGVtZW50cy5hcnJvdy5zdHlsZSwgaW5pdGlhbFN0eWxlcy5hcnJvdyk7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIE9iamVjdC5rZXlzKHN0YXRlLmVsZW1lbnRzKS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICB2YXIgZWxlbWVudCA9IHN0YXRlLmVsZW1lbnRzW25hbWVdO1xuICAgICAgdmFyIGF0dHJpYnV0ZXMgPSBzdGF0ZS5hdHRyaWJ1dGVzW25hbWVdIHx8IHt9O1xuICAgICAgdmFyIHN0eWxlUHJvcGVydGllcyA9IE9iamVjdC5rZXlzKHN0YXRlLnN0eWxlcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSA/IHN0YXRlLnN0eWxlc1tuYW1lXSA6IGluaXRpYWxTdHlsZXNbbmFtZV0pOyAvLyBTZXQgYWxsIHZhbHVlcyB0byBhbiBlbXB0eSBzdHJpbmcgdG8gdW5zZXQgdGhlbVxuXG4gICAgICB2YXIgc3R5bGUgPSBzdHlsZVByb3BlcnRpZXMucmVkdWNlKGZ1bmN0aW9uIChzdHlsZSwgcHJvcGVydHkpIHtcbiAgICAgICAgc3R5bGVbcHJvcGVydHldID0gJyc7XG4gICAgICAgIHJldHVybiBzdHlsZTtcbiAgICAgIH0sIHt9KTsgLy8gYXJyb3cgaXMgb3B0aW9uYWwgKyB2aXJ0dWFsIGVsZW1lbnRzXG5cbiAgICAgIGlmICghaXNIVE1MRWxlbWVudChlbGVtZW50KSB8fCAhZ2V0Tm9kZU5hbWUoZWxlbWVudCkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBPYmplY3QuYXNzaWduKGVsZW1lbnQuc3R5bGUsIHN0eWxlKTtcbiAgICAgIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmZvckVhY2goZnVuY3Rpb24gKGF0dHJpYnV0ZSkge1xuICAgICAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShhdHRyaWJ1dGUpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG59IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdhcHBseVN0eWxlcycsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAnd3JpdGUnLFxuICBmbjogYXBwbHlTdHlsZXMsXG4gIGVmZmVjdDogZWZmZWN0LFxuICByZXF1aXJlczogWydjb21wdXRlU3R5bGVzJ11cbn07IiwgImltcG9ydCB7IGF1dG8gfSBmcm9tIFwiLi4vZW51bXMuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldEJhc2VQbGFjZW1lbnQocGxhY2VtZW50KSB7XG4gIHJldHVybiBwbGFjZW1lbnQuc3BsaXQoJy0nKVswXTtcbn0iLCAiZXhwb3J0IHZhciBtYXggPSBNYXRoLm1heDtcbmV4cG9ydCB2YXIgbWluID0gTWF0aC5taW47XG5leHBvcnQgdmFyIHJvdW5kID0gTWF0aC5yb3VuZDsiLCAiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VUFTdHJpbmcoKSB7XG4gIHZhciB1YURhdGEgPSBuYXZpZ2F0b3IudXNlckFnZW50RGF0YTtcblxuICBpZiAodWFEYXRhICE9IG51bGwgJiYgdWFEYXRhLmJyYW5kcykge1xuICAgIHJldHVybiB1YURhdGEuYnJhbmRzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgcmV0dXJuIGl0ZW0uYnJhbmQgKyBcIi9cIiArIGl0ZW0udmVyc2lvbjtcbiAgICB9KS5qb2luKCcgJyk7XG4gIH1cblxuICByZXR1cm4gbmF2aWdhdG9yLnVzZXJBZ2VudDtcbn0iLCAiaW1wb3J0IGdldFVBU3RyaW5nIGZyb20gXCIuLi91dGlscy91c2VyQWdlbnQuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzTGF5b3V0Vmlld3BvcnQoKSB7XG4gIHJldHVybiAhL14oKD8hY2hyb21lfGFuZHJvaWQpLikqc2FmYXJpL2kudGVzdChnZXRVQVN0cmluZygpKTtcbn0iLCAiaW1wb3J0IHsgaXNFbGVtZW50LCBpc0hUTUxFbGVtZW50IH0gZnJvbSBcIi4vaW5zdGFuY2VPZi5qc1wiO1xuaW1wb3J0IHsgcm91bmQgfSBmcm9tIFwiLi4vdXRpbHMvbWF0aC5qc1wiO1xuaW1wb3J0IGdldFdpbmRvdyBmcm9tIFwiLi9nZXRXaW5kb3cuanNcIjtcbmltcG9ydCBpc0xheW91dFZpZXdwb3J0IGZyb20gXCIuL2lzTGF5b3V0Vmlld3BvcnQuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldEJvdW5kaW5nQ2xpZW50UmVjdChlbGVtZW50LCBpbmNsdWRlU2NhbGUsIGlzRml4ZWRTdHJhdGVneSkge1xuICBpZiAoaW5jbHVkZVNjYWxlID09PSB2b2lkIDApIHtcbiAgICBpbmNsdWRlU2NhbGUgPSBmYWxzZTtcbiAgfVxuXG4gIGlmIChpc0ZpeGVkU3RyYXRlZ3kgPT09IHZvaWQgMCkge1xuICAgIGlzRml4ZWRTdHJhdGVneSA9IGZhbHNlO1xuICB9XG5cbiAgdmFyIGNsaWVudFJlY3QgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICB2YXIgc2NhbGVYID0gMTtcbiAgdmFyIHNjYWxlWSA9IDE7XG5cbiAgaWYgKGluY2x1ZGVTY2FsZSAmJiBpc0hUTUxFbGVtZW50KGVsZW1lbnQpKSB7XG4gICAgc2NhbGVYID0gZWxlbWVudC5vZmZzZXRXaWR0aCA+IDAgPyByb3VuZChjbGllbnRSZWN0LndpZHRoKSAvIGVsZW1lbnQub2Zmc2V0V2lkdGggfHwgMSA6IDE7XG4gICAgc2NhbGVZID0gZWxlbWVudC5vZmZzZXRIZWlnaHQgPiAwID8gcm91bmQoY2xpZW50UmVjdC5oZWlnaHQpIC8gZWxlbWVudC5vZmZzZXRIZWlnaHQgfHwgMSA6IDE7XG4gIH1cblxuICB2YXIgX3JlZiA9IGlzRWxlbWVudChlbGVtZW50KSA/IGdldFdpbmRvdyhlbGVtZW50KSA6IHdpbmRvdyxcbiAgICAgIHZpc3VhbFZpZXdwb3J0ID0gX3JlZi52aXN1YWxWaWV3cG9ydDtcblxuICB2YXIgYWRkVmlzdWFsT2Zmc2V0cyA9ICFpc0xheW91dFZpZXdwb3J0KCkgJiYgaXNGaXhlZFN0cmF0ZWd5O1xuICB2YXIgeCA9IChjbGllbnRSZWN0LmxlZnQgKyAoYWRkVmlzdWFsT2Zmc2V0cyAmJiB2aXN1YWxWaWV3cG9ydCA/IHZpc3VhbFZpZXdwb3J0Lm9mZnNldExlZnQgOiAwKSkgLyBzY2FsZVg7XG4gIHZhciB5ID0gKGNsaWVudFJlY3QudG9wICsgKGFkZFZpc3VhbE9mZnNldHMgJiYgdmlzdWFsVmlld3BvcnQgPyB2aXN1YWxWaWV3cG9ydC5vZmZzZXRUb3AgOiAwKSkgLyBzY2FsZVk7XG4gIHZhciB3aWR0aCA9IGNsaWVudFJlY3Qud2lkdGggLyBzY2FsZVg7XG4gIHZhciBoZWlnaHQgPSBjbGllbnRSZWN0LmhlaWdodCAvIHNjYWxlWTtcbiAgcmV0dXJuIHtcbiAgICB3aWR0aDogd2lkdGgsXG4gICAgaGVpZ2h0OiBoZWlnaHQsXG4gICAgdG9wOiB5LFxuICAgIHJpZ2h0OiB4ICsgd2lkdGgsXG4gICAgYm90dG9tOiB5ICsgaGVpZ2h0LFxuICAgIGxlZnQ6IHgsXG4gICAgeDogeCxcbiAgICB5OiB5XG4gIH07XG59IiwgImltcG9ydCBnZXRCb3VuZGluZ0NsaWVudFJlY3QgZnJvbSBcIi4vZ2V0Qm91bmRpbmdDbGllbnRSZWN0LmpzXCI7IC8vIFJldHVybnMgdGhlIGxheW91dCByZWN0IG9mIGFuIGVsZW1lbnQgcmVsYXRpdmUgdG8gaXRzIG9mZnNldFBhcmVudC4gTGF5b3V0XG4vLyBtZWFucyBpdCBkb2Vzbid0IHRha2UgaW50byBhY2NvdW50IHRyYW5zZm9ybXMuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldExheW91dFJlY3QoZWxlbWVudCkge1xuICB2YXIgY2xpZW50UmVjdCA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChlbGVtZW50KTsgLy8gVXNlIHRoZSBjbGllbnRSZWN0IHNpemVzIGlmIGl0J3Mgbm90IGJlZW4gdHJhbnNmb3JtZWQuXG4gIC8vIEZpeGVzIGh0dHBzOi8vZ2l0aHViLmNvbS9wb3BwZXJqcy9wb3BwZXItY29yZS9pc3N1ZXMvMTIyM1xuXG4gIHZhciB3aWR0aCA9IGVsZW1lbnQub2Zmc2V0V2lkdGg7XG4gIHZhciBoZWlnaHQgPSBlbGVtZW50Lm9mZnNldEhlaWdodDtcblxuICBpZiAoTWF0aC5hYnMoY2xpZW50UmVjdC53aWR0aCAtIHdpZHRoKSA8PSAxKSB7XG4gICAgd2lkdGggPSBjbGllbnRSZWN0LndpZHRoO1xuICB9XG5cbiAgaWYgKE1hdGguYWJzKGNsaWVudFJlY3QuaGVpZ2h0IC0gaGVpZ2h0KSA8PSAxKSB7XG4gICAgaGVpZ2h0ID0gY2xpZW50UmVjdC5oZWlnaHQ7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHg6IGVsZW1lbnQub2Zmc2V0TGVmdCxcbiAgICB5OiBlbGVtZW50Lm9mZnNldFRvcCxcbiAgICB3aWR0aDogd2lkdGgsXG4gICAgaGVpZ2h0OiBoZWlnaHRcbiAgfTtcbn0iLCAiaW1wb3J0IHsgaXNTaGFkb3dSb290IH0gZnJvbSBcIi4vaW5zdGFuY2VPZi5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29udGFpbnMocGFyZW50LCBjaGlsZCkge1xuICB2YXIgcm9vdE5vZGUgPSBjaGlsZC5nZXRSb290Tm9kZSAmJiBjaGlsZC5nZXRSb290Tm9kZSgpOyAvLyBGaXJzdCwgYXR0ZW1wdCB3aXRoIGZhc3RlciBuYXRpdmUgbWV0aG9kXG5cbiAgaWYgKHBhcmVudC5jb250YWlucyhjaGlsZCkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSAvLyB0aGVuIGZhbGxiYWNrIHRvIGN1c3RvbSBpbXBsZW1lbnRhdGlvbiB3aXRoIFNoYWRvdyBET00gc3VwcG9ydFxuICBlbHNlIGlmIChyb290Tm9kZSAmJiBpc1NoYWRvd1Jvb3Qocm9vdE5vZGUpKSB7XG4gICAgICB2YXIgbmV4dCA9IGNoaWxkO1xuXG4gICAgICBkbyB7XG4gICAgICAgIGlmIChuZXh0ICYmIHBhcmVudC5pc1NhbWVOb2RlKG5leHQpKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddOiBuZWVkIGEgYmV0dGVyIHdheSB0byBoYW5kbGUgdGhpcy4uLlxuXG5cbiAgICAgICAgbmV4dCA9IG5leHQucGFyZW50Tm9kZSB8fCBuZXh0Lmhvc3Q7XG4gICAgICB9IHdoaWxlIChuZXh0KTtcbiAgICB9IC8vIEdpdmUgdXAsIHRoZSByZXN1bHQgaXMgZmFsc2VcblxuXG4gIHJldHVybiBmYWxzZTtcbn0iLCAiaW1wb3J0IGdldFdpbmRvdyBmcm9tIFwiLi9nZXRXaW5kb3cuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCkge1xuICByZXR1cm4gZ2V0V2luZG93KGVsZW1lbnQpLmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCk7XG59IiwgImltcG9ydCBnZXROb2RlTmFtZSBmcm9tIFwiLi9nZXROb2RlTmFtZS5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNUYWJsZUVsZW1lbnQoZWxlbWVudCkge1xuICByZXR1cm4gWyd0YWJsZScsICd0ZCcsICd0aCddLmluZGV4T2YoZ2V0Tm9kZU5hbWUoZWxlbWVudCkpID49IDA7XG59IiwgImltcG9ydCB7IGlzRWxlbWVudCB9IGZyb20gXCIuL2luc3RhbmNlT2YuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldERvY3VtZW50RWxlbWVudChlbGVtZW50KSB7XG4gIC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXJldHVybl06IGFzc3VtZSBib2R5IGlzIGFsd2F5cyBhdmFpbGFibGVcbiAgcmV0dXJuICgoaXNFbGVtZW50KGVsZW1lbnQpID8gZWxlbWVudC5vd25lckRvY3VtZW50IDogLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddXG4gIGVsZW1lbnQuZG9jdW1lbnQpIHx8IHdpbmRvdy5kb2N1bWVudCkuZG9jdW1lbnRFbGVtZW50O1xufSIsICJpbXBvcnQgZ2V0Tm9kZU5hbWUgZnJvbSBcIi4vZ2V0Tm9kZU5hbWUuanNcIjtcbmltcG9ydCBnZXREb2N1bWVudEVsZW1lbnQgZnJvbSBcIi4vZ2V0RG9jdW1lbnRFbGVtZW50LmpzXCI7XG5pbXBvcnQgeyBpc1NoYWRvd1Jvb3QgfSBmcm9tIFwiLi9pbnN0YW5jZU9mLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRQYXJlbnROb2RlKGVsZW1lbnQpIHtcbiAgaWYgKGdldE5vZGVOYW1lKGVsZW1lbnQpID09PSAnaHRtbCcpIHtcbiAgICByZXR1cm4gZWxlbWVudDtcbiAgfVxuXG4gIHJldHVybiAoLy8gdGhpcyBpcyBhIHF1aWNrZXIgKGJ1dCBsZXNzIHR5cGUgc2FmZSkgd2F5IHRvIHNhdmUgcXVpdGUgc29tZSBieXRlcyBmcm9tIHRoZSBidW5kbGVcbiAgICAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS1yZXR1cm5dXG4gICAgLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddXG4gICAgZWxlbWVudC5hc3NpZ25lZFNsb3QgfHwgLy8gc3RlcCBpbnRvIHRoZSBzaGFkb3cgRE9NIG9mIHRoZSBwYXJlbnQgb2YgYSBzbG90dGVkIG5vZGVcbiAgICBlbGVtZW50LnBhcmVudE5vZGUgfHwgKCAvLyBET00gRWxlbWVudCBkZXRlY3RlZFxuICAgIGlzU2hhZG93Um9vdChlbGVtZW50KSA/IGVsZW1lbnQuaG9zdCA6IG51bGwpIHx8IC8vIFNoYWRvd1Jvb3QgZGV0ZWN0ZWRcbiAgICAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS1jYWxsXTogSFRNTEVsZW1lbnQgaXMgYSBOb2RlXG4gICAgZ2V0RG9jdW1lbnRFbGVtZW50KGVsZW1lbnQpIC8vIGZhbGxiYWNrXG5cbiAgKTtcbn0iLCAiaW1wb3J0IGdldFdpbmRvdyBmcm9tIFwiLi9nZXRXaW5kb3cuanNcIjtcbmltcG9ydCBnZXROb2RlTmFtZSBmcm9tIFwiLi9nZXROb2RlTmFtZS5qc1wiO1xuaW1wb3J0IGdldENvbXB1dGVkU3R5bGUgZnJvbSBcIi4vZ2V0Q29tcHV0ZWRTdHlsZS5qc1wiO1xuaW1wb3J0IHsgaXNIVE1MRWxlbWVudCwgaXNTaGFkb3dSb290IH0gZnJvbSBcIi4vaW5zdGFuY2VPZi5qc1wiO1xuaW1wb3J0IGlzVGFibGVFbGVtZW50IGZyb20gXCIuL2lzVGFibGVFbGVtZW50LmpzXCI7XG5pbXBvcnQgZ2V0UGFyZW50Tm9kZSBmcm9tIFwiLi9nZXRQYXJlbnROb2RlLmpzXCI7XG5pbXBvcnQgZ2V0VUFTdHJpbmcgZnJvbSBcIi4uL3V0aWxzL3VzZXJBZ2VudC5qc1wiO1xuXG5mdW5jdGlvbiBnZXRUcnVlT2Zmc2V0UGFyZW50KGVsZW1lbnQpIHtcbiAgaWYgKCFpc0hUTUxFbGVtZW50KGVsZW1lbnQpIHx8IC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9wb3BwZXJqcy9wb3BwZXItY29yZS9pc3N1ZXMvODM3XG4gIGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCkucG9zaXRpb24gPT09ICdmaXhlZCcpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiBlbGVtZW50Lm9mZnNldFBhcmVudDtcbn0gLy8gYC5vZmZzZXRQYXJlbnRgIHJlcG9ydHMgYG51bGxgIGZvciBmaXhlZCBlbGVtZW50cywgd2hpbGUgYWJzb2x1dGUgZWxlbWVudHNcbi8vIHJldHVybiB0aGUgY29udGFpbmluZyBibG9ja1xuXG5cbmZ1bmN0aW9uIGdldENvbnRhaW5pbmdCbG9jayhlbGVtZW50KSB7XG4gIHZhciBpc0ZpcmVmb3ggPSAvZmlyZWZveC9pLnRlc3QoZ2V0VUFTdHJpbmcoKSk7XG4gIHZhciBpc0lFID0gL1RyaWRlbnQvaS50ZXN0KGdldFVBU3RyaW5nKCkpO1xuXG4gIGlmIChpc0lFICYmIGlzSFRNTEVsZW1lbnQoZWxlbWVudCkpIHtcbiAgICAvLyBJbiBJRSA5LCAxMCBhbmQgMTEgZml4ZWQgZWxlbWVudHMgY29udGFpbmluZyBibG9jayBpcyBhbHdheXMgZXN0YWJsaXNoZWQgYnkgdGhlIHZpZXdwb3J0XG4gICAgdmFyIGVsZW1lbnRDc3MgPSBnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpO1xuXG4gICAgaWYgKGVsZW1lbnRDc3MucG9zaXRpb24gPT09ICdmaXhlZCcpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuXG4gIHZhciBjdXJyZW50Tm9kZSA9IGdldFBhcmVudE5vZGUoZWxlbWVudCk7XG5cbiAgaWYgKGlzU2hhZG93Um9vdChjdXJyZW50Tm9kZSkpIHtcbiAgICBjdXJyZW50Tm9kZSA9IGN1cnJlbnROb2RlLmhvc3Q7XG4gIH1cblxuICB3aGlsZSAoaXNIVE1MRWxlbWVudChjdXJyZW50Tm9kZSkgJiYgWydodG1sJywgJ2JvZHknXS5pbmRleE9mKGdldE5vZGVOYW1lKGN1cnJlbnROb2RlKSkgPCAwKSB7XG4gICAgdmFyIGNzcyA9IGdldENvbXB1dGVkU3R5bGUoY3VycmVudE5vZGUpOyAvLyBUaGlzIGlzIG5vbi1leGhhdXN0aXZlIGJ1dCBjb3ZlcnMgdGhlIG1vc3QgY29tbW9uIENTUyBwcm9wZXJ0aWVzIHRoYXRcbiAgICAvLyBjcmVhdGUgYSBjb250YWluaW5nIGJsb2NrLlxuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy9Db250YWluaW5nX2Jsb2NrI2lkZW50aWZ5aW5nX3RoZV9jb250YWluaW5nX2Jsb2NrXG5cbiAgICBpZiAoY3NzLnRyYW5zZm9ybSAhPT0gJ25vbmUnIHx8IGNzcy5wZXJzcGVjdGl2ZSAhPT0gJ25vbmUnIHx8IGNzcy5jb250YWluID09PSAncGFpbnQnIHx8IFsndHJhbnNmb3JtJywgJ3BlcnNwZWN0aXZlJ10uaW5kZXhPZihjc3Mud2lsbENoYW5nZSkgIT09IC0xIHx8IGlzRmlyZWZveCAmJiBjc3Mud2lsbENoYW5nZSA9PT0gJ2ZpbHRlcicgfHwgaXNGaXJlZm94ICYmIGNzcy5maWx0ZXIgJiYgY3NzLmZpbHRlciAhPT0gJ25vbmUnKSB7XG4gICAgICByZXR1cm4gY3VycmVudE5vZGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGN1cnJlbnROb2RlID0gY3VycmVudE5vZGUucGFyZW50Tm9kZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn0gLy8gR2V0cyB0aGUgY2xvc2VzdCBhbmNlc3RvciBwb3NpdGlvbmVkIGVsZW1lbnQuIEhhbmRsZXMgc29tZSBlZGdlIGNhc2VzLFxuLy8gc3VjaCBhcyB0YWJsZSBhbmNlc3RvcnMgYW5kIGNyb3NzIGJyb3dzZXIgYnVncy5cblxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRPZmZzZXRQYXJlbnQoZWxlbWVudCkge1xuICB2YXIgd2luZG93ID0gZ2V0V2luZG93KGVsZW1lbnQpO1xuICB2YXIgb2Zmc2V0UGFyZW50ID0gZ2V0VHJ1ZU9mZnNldFBhcmVudChlbGVtZW50KTtcblxuICB3aGlsZSAob2Zmc2V0UGFyZW50ICYmIGlzVGFibGVFbGVtZW50KG9mZnNldFBhcmVudCkgJiYgZ2V0Q29tcHV0ZWRTdHlsZShvZmZzZXRQYXJlbnQpLnBvc2l0aW9uID09PSAnc3RhdGljJykge1xuICAgIG9mZnNldFBhcmVudCA9IGdldFRydWVPZmZzZXRQYXJlbnQob2Zmc2V0UGFyZW50KTtcbiAgfVxuXG4gIGlmIChvZmZzZXRQYXJlbnQgJiYgKGdldE5vZGVOYW1lKG9mZnNldFBhcmVudCkgPT09ICdodG1sJyB8fCBnZXROb2RlTmFtZShvZmZzZXRQYXJlbnQpID09PSAnYm9keScgJiYgZ2V0Q29tcHV0ZWRTdHlsZShvZmZzZXRQYXJlbnQpLnBvc2l0aW9uID09PSAnc3RhdGljJykpIHtcbiAgICByZXR1cm4gd2luZG93O1xuICB9XG5cbiAgcmV0dXJuIG9mZnNldFBhcmVudCB8fCBnZXRDb250YWluaW5nQmxvY2soZWxlbWVudCkgfHwgd2luZG93O1xufSIsICJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQocGxhY2VtZW50KSB7XG4gIHJldHVybiBbJ3RvcCcsICdib3R0b20nXS5pbmRleE9mKHBsYWNlbWVudCkgPj0gMCA/ICd4JyA6ICd5Jztcbn0iLCAiaW1wb3J0IHsgbWF4IGFzIG1hdGhNYXgsIG1pbiBhcyBtYXRoTWluIH0gZnJvbSBcIi4vbWF0aC5qc1wiO1xuZXhwb3J0IGZ1bmN0aW9uIHdpdGhpbihtaW4sIHZhbHVlLCBtYXgpIHtcbiAgcmV0dXJuIG1hdGhNYXgobWluLCBtYXRoTWluKHZhbHVlLCBtYXgpKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiB3aXRoaW5NYXhDbGFtcChtaW4sIHZhbHVlLCBtYXgpIHtcbiAgdmFyIHYgPSB3aXRoaW4obWluLCB2YWx1ZSwgbWF4KTtcbiAgcmV0dXJuIHYgPiBtYXggPyBtYXggOiB2O1xufSIsICJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRGcmVzaFNpZGVPYmplY3QoKSB7XG4gIHJldHVybiB7XG4gICAgdG9wOiAwLFxuICAgIHJpZ2h0OiAwLFxuICAgIGJvdHRvbTogMCxcbiAgICBsZWZ0OiAwXG4gIH07XG59IiwgImltcG9ydCBnZXRGcmVzaFNpZGVPYmplY3QgZnJvbSBcIi4vZ2V0RnJlc2hTaWRlT2JqZWN0LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtZXJnZVBhZGRpbmdPYmplY3QocGFkZGluZ09iamVjdCkge1xuICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgZ2V0RnJlc2hTaWRlT2JqZWN0KCksIHBhZGRpbmdPYmplY3QpO1xufSIsICJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBleHBhbmRUb0hhc2hNYXAodmFsdWUsIGtleXMpIHtcbiAgcmV0dXJuIGtleXMucmVkdWNlKGZ1bmN0aW9uIChoYXNoTWFwLCBrZXkpIHtcbiAgICBoYXNoTWFwW2tleV0gPSB2YWx1ZTtcbiAgICByZXR1cm4gaGFzaE1hcDtcbiAgfSwge30pO1xufSIsICJpbXBvcnQgZ2V0QmFzZVBsYWNlbWVudCBmcm9tIFwiLi4vdXRpbHMvZ2V0QmFzZVBsYWNlbWVudC5qc1wiO1xuaW1wb3J0IGdldExheW91dFJlY3QgZnJvbSBcIi4uL2RvbS11dGlscy9nZXRMYXlvdXRSZWN0LmpzXCI7XG5pbXBvcnQgY29udGFpbnMgZnJvbSBcIi4uL2RvbS11dGlscy9jb250YWlucy5qc1wiO1xuaW1wb3J0IGdldE9mZnNldFBhcmVudCBmcm9tIFwiLi4vZG9tLXV0aWxzL2dldE9mZnNldFBhcmVudC5qc1wiO1xuaW1wb3J0IGdldE1haW5BeGlzRnJvbVBsYWNlbWVudCBmcm9tIFwiLi4vdXRpbHMvZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50LmpzXCI7XG5pbXBvcnQgeyB3aXRoaW4gfSBmcm9tIFwiLi4vdXRpbHMvd2l0aGluLmpzXCI7XG5pbXBvcnQgbWVyZ2VQYWRkaW5nT2JqZWN0IGZyb20gXCIuLi91dGlscy9tZXJnZVBhZGRpbmdPYmplY3QuanNcIjtcbmltcG9ydCBleHBhbmRUb0hhc2hNYXAgZnJvbSBcIi4uL3V0aWxzL2V4cGFuZFRvSGFzaE1hcC5qc1wiO1xuaW1wb3J0IHsgbGVmdCwgcmlnaHQsIGJhc2VQbGFjZW1lbnRzLCB0b3AsIGJvdHRvbSB9IGZyb20gXCIuLi9lbnVtcy5qc1wiO1xuaW1wb3J0IHsgaXNIVE1MRWxlbWVudCB9IGZyb20gXCIuLi9kb20tdXRpbHMvaW5zdGFuY2VPZi5qc1wiOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cbnZhciB0b1BhZGRpbmdPYmplY3QgPSBmdW5jdGlvbiB0b1BhZGRpbmdPYmplY3QocGFkZGluZywgc3RhdGUpIHtcbiAgcGFkZGluZyA9IHR5cGVvZiBwYWRkaW5nID09PSAnZnVuY3Rpb24nID8gcGFkZGluZyhPYmplY3QuYXNzaWduKHt9LCBzdGF0ZS5yZWN0cywge1xuICAgIHBsYWNlbWVudDogc3RhdGUucGxhY2VtZW50XG4gIH0pKSA6IHBhZGRpbmc7XG4gIHJldHVybiBtZXJnZVBhZGRpbmdPYmplY3QodHlwZW9mIHBhZGRpbmcgIT09ICdudW1iZXInID8gcGFkZGluZyA6IGV4cGFuZFRvSGFzaE1hcChwYWRkaW5nLCBiYXNlUGxhY2VtZW50cykpO1xufTtcblxuZnVuY3Rpb24gYXJyb3coX3JlZikge1xuICB2YXIgX3N0YXRlJG1vZGlmaWVyc0RhdGEkO1xuXG4gIHZhciBzdGF0ZSA9IF9yZWYuc3RhdGUsXG4gICAgICBuYW1lID0gX3JlZi5uYW1lLFxuICAgICAgb3B0aW9ucyA9IF9yZWYub3B0aW9ucztcbiAgdmFyIGFycm93RWxlbWVudCA9IHN0YXRlLmVsZW1lbnRzLmFycm93O1xuICB2YXIgcG9wcGVyT2Zmc2V0cyA9IHN0YXRlLm1vZGlmaWVyc0RhdGEucG9wcGVyT2Zmc2V0cztcbiAgdmFyIGJhc2VQbGFjZW1lbnQgPSBnZXRCYXNlUGxhY2VtZW50KHN0YXRlLnBsYWNlbWVudCk7XG4gIHZhciBheGlzID0gZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50KGJhc2VQbGFjZW1lbnQpO1xuICB2YXIgaXNWZXJ0aWNhbCA9IFtsZWZ0LCByaWdodF0uaW5kZXhPZihiYXNlUGxhY2VtZW50KSA+PSAwO1xuICB2YXIgbGVuID0gaXNWZXJ0aWNhbCA/ICdoZWlnaHQnIDogJ3dpZHRoJztcblxuICBpZiAoIWFycm93RWxlbWVudCB8fCAhcG9wcGVyT2Zmc2V0cykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHZhciBwYWRkaW5nT2JqZWN0ID0gdG9QYWRkaW5nT2JqZWN0KG9wdGlvbnMucGFkZGluZywgc3RhdGUpO1xuICB2YXIgYXJyb3dSZWN0ID0gZ2V0TGF5b3V0UmVjdChhcnJvd0VsZW1lbnQpO1xuICB2YXIgbWluUHJvcCA9IGF4aXMgPT09ICd5JyA/IHRvcCA6IGxlZnQ7XG4gIHZhciBtYXhQcm9wID0gYXhpcyA9PT0gJ3knID8gYm90dG9tIDogcmlnaHQ7XG4gIHZhciBlbmREaWZmID0gc3RhdGUucmVjdHMucmVmZXJlbmNlW2xlbl0gKyBzdGF0ZS5yZWN0cy5yZWZlcmVuY2VbYXhpc10gLSBwb3BwZXJPZmZzZXRzW2F4aXNdIC0gc3RhdGUucmVjdHMucG9wcGVyW2xlbl07XG4gIHZhciBzdGFydERpZmYgPSBwb3BwZXJPZmZzZXRzW2F4aXNdIC0gc3RhdGUucmVjdHMucmVmZXJlbmNlW2F4aXNdO1xuICB2YXIgYXJyb3dPZmZzZXRQYXJlbnQgPSBnZXRPZmZzZXRQYXJlbnQoYXJyb3dFbGVtZW50KTtcbiAgdmFyIGNsaWVudFNpemUgPSBhcnJvd09mZnNldFBhcmVudCA/IGF4aXMgPT09ICd5JyA/IGFycm93T2Zmc2V0UGFyZW50LmNsaWVudEhlaWdodCB8fCAwIDogYXJyb3dPZmZzZXRQYXJlbnQuY2xpZW50V2lkdGggfHwgMCA6IDA7XG4gIHZhciBjZW50ZXJUb1JlZmVyZW5jZSA9IGVuZERpZmYgLyAyIC0gc3RhcnREaWZmIC8gMjsgLy8gTWFrZSBzdXJlIHRoZSBhcnJvdyBkb2Vzbid0IG92ZXJmbG93IHRoZSBwb3BwZXIgaWYgdGhlIGNlbnRlciBwb2ludCBpc1xuICAvLyBvdXRzaWRlIG9mIHRoZSBwb3BwZXIgYm91bmRzXG5cbiAgdmFyIG1pbiA9IHBhZGRpbmdPYmplY3RbbWluUHJvcF07XG4gIHZhciBtYXggPSBjbGllbnRTaXplIC0gYXJyb3dSZWN0W2xlbl0gLSBwYWRkaW5nT2JqZWN0W21heFByb3BdO1xuICB2YXIgY2VudGVyID0gY2xpZW50U2l6ZSAvIDIgLSBhcnJvd1JlY3RbbGVuXSAvIDIgKyBjZW50ZXJUb1JlZmVyZW5jZTtcbiAgdmFyIG9mZnNldCA9IHdpdGhpbihtaW4sIGNlbnRlciwgbWF4KTsgLy8gUHJldmVudHMgYnJlYWtpbmcgc3ludGF4IGhpZ2hsaWdodGluZy4uLlxuXG4gIHZhciBheGlzUHJvcCA9IGF4aXM7XG4gIHN0YXRlLm1vZGlmaWVyc0RhdGFbbmFtZV0gPSAoX3N0YXRlJG1vZGlmaWVyc0RhdGEkID0ge30sIF9zdGF0ZSRtb2RpZmllcnNEYXRhJFtheGlzUHJvcF0gPSBvZmZzZXQsIF9zdGF0ZSRtb2RpZmllcnNEYXRhJC5jZW50ZXJPZmZzZXQgPSBvZmZzZXQgLSBjZW50ZXIsIF9zdGF0ZSRtb2RpZmllcnNEYXRhJCk7XG59XG5cbmZ1bmN0aW9uIGVmZmVjdChfcmVmMikge1xuICB2YXIgc3RhdGUgPSBfcmVmMi5zdGF0ZSxcbiAgICAgIG9wdGlvbnMgPSBfcmVmMi5vcHRpb25zO1xuICB2YXIgX29wdGlvbnMkZWxlbWVudCA9IG9wdGlvbnMuZWxlbWVudCxcbiAgICAgIGFycm93RWxlbWVudCA9IF9vcHRpb25zJGVsZW1lbnQgPT09IHZvaWQgMCA/ICdbZGF0YS1wb3BwZXItYXJyb3ddJyA6IF9vcHRpb25zJGVsZW1lbnQ7XG5cbiAgaWYgKGFycm93RWxlbWVudCA9PSBudWxsKSB7XG4gICAgcmV0dXJuO1xuICB9IC8vIENTUyBzZWxlY3RvclxuXG5cbiAgaWYgKHR5cGVvZiBhcnJvd0VsZW1lbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgYXJyb3dFbGVtZW50ID0gc3RhdGUuZWxlbWVudHMucG9wcGVyLnF1ZXJ5U2VsZWN0b3IoYXJyb3dFbGVtZW50KTtcblxuICAgIGlmICghYXJyb3dFbGVtZW50KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIGlmICghaXNIVE1MRWxlbWVudChhcnJvd0VsZW1lbnQpKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFsnUG9wcGVyOiBcImFycm93XCIgZWxlbWVudCBtdXN0IGJlIGFuIEhUTUxFbGVtZW50IChub3QgYW4gU1ZHRWxlbWVudCkuJywgJ1RvIHVzZSBhbiBTVkcgYXJyb3csIHdyYXAgaXQgaW4gYW4gSFRNTEVsZW1lbnQgdGhhdCB3aWxsIGJlIHVzZWQgYXMnLCAndGhlIGFycm93LiddLmpvaW4oJyAnKSk7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFjb250YWlucyhzdGF0ZS5lbGVtZW50cy5wb3BwZXIsIGFycm93RWxlbWVudCkpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFsnUG9wcGVyOiBcImFycm93XCIgbW9kaWZpZXJcXCdzIGBlbGVtZW50YCBtdXN0IGJlIGEgY2hpbGQgb2YgdGhlIHBvcHBlcicsICdlbGVtZW50LiddLmpvaW4oJyAnKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgc3RhdGUuZWxlbWVudHMuYXJyb3cgPSBhcnJvd0VsZW1lbnQ7XG59IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdhcnJvdycsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAnbWFpbicsXG4gIGZuOiBhcnJvdyxcbiAgZWZmZWN0OiBlZmZlY3QsXG4gIHJlcXVpcmVzOiBbJ3BvcHBlck9mZnNldHMnXSxcbiAgcmVxdWlyZXNJZkV4aXN0czogWydwcmV2ZW50T3ZlcmZsb3cnXVxufTsiLCAiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VmFyaWF0aW9uKHBsYWNlbWVudCkge1xuICByZXR1cm4gcGxhY2VtZW50LnNwbGl0KCctJylbMV07XG59IiwgImltcG9ydCB7IHRvcCwgbGVmdCwgcmlnaHQsIGJvdHRvbSwgZW5kIH0gZnJvbSBcIi4uL2VudW1zLmpzXCI7XG5pbXBvcnQgZ2V0T2Zmc2V0UGFyZW50IGZyb20gXCIuLi9kb20tdXRpbHMvZ2V0T2Zmc2V0UGFyZW50LmpzXCI7XG5pbXBvcnQgZ2V0V2luZG93IGZyb20gXCIuLi9kb20tdXRpbHMvZ2V0V2luZG93LmpzXCI7XG5pbXBvcnQgZ2V0RG9jdW1lbnRFbGVtZW50IGZyb20gXCIuLi9kb20tdXRpbHMvZ2V0RG9jdW1lbnRFbGVtZW50LmpzXCI7XG5pbXBvcnQgZ2V0Q29tcHV0ZWRTdHlsZSBmcm9tIFwiLi4vZG9tLXV0aWxzL2dldENvbXB1dGVkU3R5bGUuanNcIjtcbmltcG9ydCBnZXRCYXNlUGxhY2VtZW50IGZyb20gXCIuLi91dGlscy9nZXRCYXNlUGxhY2VtZW50LmpzXCI7XG5pbXBvcnQgZ2V0VmFyaWF0aW9uIGZyb20gXCIuLi91dGlscy9nZXRWYXJpYXRpb24uanNcIjtcbmltcG9ydCB7IHJvdW5kIH0gZnJvbSBcIi4uL3V0aWxzL21hdGguanNcIjsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG52YXIgdW5zZXRTaWRlcyA9IHtcbiAgdG9wOiAnYXV0bycsXG4gIHJpZ2h0OiAnYXV0bycsXG4gIGJvdHRvbTogJ2F1dG8nLFxuICBsZWZ0OiAnYXV0bydcbn07IC8vIFJvdW5kIHRoZSBvZmZzZXRzIHRvIHRoZSBuZWFyZXN0IHN1aXRhYmxlIHN1YnBpeGVsIGJhc2VkIG9uIHRoZSBEUFIuXG4vLyBab29taW5nIGNhbiBjaGFuZ2UgdGhlIERQUiwgYnV0IGl0IHNlZW1zIHRvIHJlcG9ydCBhIHZhbHVlIHRoYXQgd2lsbFxuLy8gY2xlYW5seSBkaXZpZGUgdGhlIHZhbHVlcyBpbnRvIHRoZSBhcHByb3ByaWF0ZSBzdWJwaXhlbHMuXG5cbmZ1bmN0aW9uIHJvdW5kT2Zmc2V0c0J5RFBSKF9yZWYpIHtcbiAgdmFyIHggPSBfcmVmLngsXG4gICAgICB5ID0gX3JlZi55O1xuICB2YXIgd2luID0gd2luZG93O1xuICB2YXIgZHByID0gd2luLmRldmljZVBpeGVsUmF0aW8gfHwgMTtcbiAgcmV0dXJuIHtcbiAgICB4OiByb3VuZCh4ICogZHByKSAvIGRwciB8fCAwLFxuICAgIHk6IHJvdW5kKHkgKiBkcHIpIC8gZHByIHx8IDBcbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1hcFRvU3R5bGVzKF9yZWYyKSB7XG4gIHZhciBfT2JqZWN0JGFzc2lnbjI7XG5cbiAgdmFyIHBvcHBlciA9IF9yZWYyLnBvcHBlcixcbiAgICAgIHBvcHBlclJlY3QgPSBfcmVmMi5wb3BwZXJSZWN0LFxuICAgICAgcGxhY2VtZW50ID0gX3JlZjIucGxhY2VtZW50LFxuICAgICAgdmFyaWF0aW9uID0gX3JlZjIudmFyaWF0aW9uLFxuICAgICAgb2Zmc2V0cyA9IF9yZWYyLm9mZnNldHMsXG4gICAgICBwb3NpdGlvbiA9IF9yZWYyLnBvc2l0aW9uLFxuICAgICAgZ3B1QWNjZWxlcmF0aW9uID0gX3JlZjIuZ3B1QWNjZWxlcmF0aW9uLFxuICAgICAgYWRhcHRpdmUgPSBfcmVmMi5hZGFwdGl2ZSxcbiAgICAgIHJvdW5kT2Zmc2V0cyA9IF9yZWYyLnJvdW5kT2Zmc2V0cyxcbiAgICAgIGlzRml4ZWQgPSBfcmVmMi5pc0ZpeGVkO1xuICB2YXIgX29mZnNldHMkeCA9IG9mZnNldHMueCxcbiAgICAgIHggPSBfb2Zmc2V0cyR4ID09PSB2b2lkIDAgPyAwIDogX29mZnNldHMkeCxcbiAgICAgIF9vZmZzZXRzJHkgPSBvZmZzZXRzLnksXG4gICAgICB5ID0gX29mZnNldHMkeSA9PT0gdm9pZCAwID8gMCA6IF9vZmZzZXRzJHk7XG5cbiAgdmFyIF9yZWYzID0gdHlwZW9mIHJvdW5kT2Zmc2V0cyA9PT0gJ2Z1bmN0aW9uJyA/IHJvdW5kT2Zmc2V0cyh7XG4gICAgeDogeCxcbiAgICB5OiB5XG4gIH0pIDoge1xuICAgIHg6IHgsXG4gICAgeTogeVxuICB9O1xuXG4gIHggPSBfcmVmMy54O1xuICB5ID0gX3JlZjMueTtcbiAgdmFyIGhhc1ggPSBvZmZzZXRzLmhhc093blByb3BlcnR5KCd4Jyk7XG4gIHZhciBoYXNZID0gb2Zmc2V0cy5oYXNPd25Qcm9wZXJ0eSgneScpO1xuICB2YXIgc2lkZVggPSBsZWZ0O1xuICB2YXIgc2lkZVkgPSB0b3A7XG4gIHZhciB3aW4gPSB3aW5kb3c7XG5cbiAgaWYgKGFkYXB0aXZlKSB7XG4gICAgdmFyIG9mZnNldFBhcmVudCA9IGdldE9mZnNldFBhcmVudChwb3BwZXIpO1xuICAgIHZhciBoZWlnaHRQcm9wID0gJ2NsaWVudEhlaWdodCc7XG4gICAgdmFyIHdpZHRoUHJvcCA9ICdjbGllbnRXaWR0aCc7XG5cbiAgICBpZiAob2Zmc2V0UGFyZW50ID09PSBnZXRXaW5kb3cocG9wcGVyKSkge1xuICAgICAgb2Zmc2V0UGFyZW50ID0gZ2V0RG9jdW1lbnRFbGVtZW50KHBvcHBlcik7XG5cbiAgICAgIGlmIChnZXRDb21wdXRlZFN0eWxlKG9mZnNldFBhcmVudCkucG9zaXRpb24gIT09ICdzdGF0aWMnICYmIHBvc2l0aW9uID09PSAnYWJzb2x1dGUnKSB7XG4gICAgICAgIGhlaWdodFByb3AgPSAnc2Nyb2xsSGVpZ2h0JztcbiAgICAgICAgd2lkdGhQcm9wID0gJ3Njcm9sbFdpZHRoJztcbiAgICAgIH1cbiAgICB9IC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLWNhc3RdOiBmb3JjZSB0eXBlIHJlZmluZW1lbnQsIHdlIGNvbXBhcmUgb2Zmc2V0UGFyZW50IHdpdGggd2luZG93IGFib3ZlLCBidXQgRmxvdyBkb2Vzbid0IGRldGVjdCBpdFxuXG5cbiAgICBvZmZzZXRQYXJlbnQgPSBvZmZzZXRQYXJlbnQ7XG5cbiAgICBpZiAocGxhY2VtZW50ID09PSB0b3AgfHwgKHBsYWNlbWVudCA9PT0gbGVmdCB8fCBwbGFjZW1lbnQgPT09IHJpZ2h0KSAmJiB2YXJpYXRpb24gPT09IGVuZCkge1xuICAgICAgc2lkZVkgPSBib3R0b207XG4gICAgICB2YXIgb2Zmc2V0WSA9IGlzRml4ZWQgJiYgb2Zmc2V0UGFyZW50ID09PSB3aW4gJiYgd2luLnZpc3VhbFZpZXdwb3J0ID8gd2luLnZpc3VhbFZpZXdwb3J0LmhlaWdodCA6IC8vICRGbG93Rml4TWVbcHJvcC1taXNzaW5nXVxuICAgICAgb2Zmc2V0UGFyZW50W2hlaWdodFByb3BdO1xuICAgICAgeSAtPSBvZmZzZXRZIC0gcG9wcGVyUmVjdC5oZWlnaHQ7XG4gICAgICB5ICo9IGdwdUFjY2VsZXJhdGlvbiA/IDEgOiAtMTtcbiAgICB9XG5cbiAgICBpZiAocGxhY2VtZW50ID09PSBsZWZ0IHx8IChwbGFjZW1lbnQgPT09IHRvcCB8fCBwbGFjZW1lbnQgPT09IGJvdHRvbSkgJiYgdmFyaWF0aW9uID09PSBlbmQpIHtcbiAgICAgIHNpZGVYID0gcmlnaHQ7XG4gICAgICB2YXIgb2Zmc2V0WCA9IGlzRml4ZWQgJiYgb2Zmc2V0UGFyZW50ID09PSB3aW4gJiYgd2luLnZpc3VhbFZpZXdwb3J0ID8gd2luLnZpc3VhbFZpZXdwb3J0LndpZHRoIDogLy8gJEZsb3dGaXhNZVtwcm9wLW1pc3NpbmddXG4gICAgICBvZmZzZXRQYXJlbnRbd2lkdGhQcm9wXTtcbiAgICAgIHggLT0gb2Zmc2V0WCAtIHBvcHBlclJlY3Qud2lkdGg7XG4gICAgICB4ICo9IGdwdUFjY2VsZXJhdGlvbiA/IDEgOiAtMTtcbiAgICB9XG4gIH1cblxuICB2YXIgY29tbW9uU3R5bGVzID0gT2JqZWN0LmFzc2lnbih7XG4gICAgcG9zaXRpb246IHBvc2l0aW9uXG4gIH0sIGFkYXB0aXZlICYmIHVuc2V0U2lkZXMpO1xuXG4gIHZhciBfcmVmNCA9IHJvdW5kT2Zmc2V0cyA9PT0gdHJ1ZSA/IHJvdW5kT2Zmc2V0c0J5RFBSKHtcbiAgICB4OiB4LFxuICAgIHk6IHlcbiAgfSkgOiB7XG4gICAgeDogeCxcbiAgICB5OiB5XG4gIH07XG5cbiAgeCA9IF9yZWY0Lng7XG4gIHkgPSBfcmVmNC55O1xuXG4gIGlmIChncHVBY2NlbGVyYXRpb24pIHtcbiAgICB2YXIgX09iamVjdCRhc3NpZ247XG5cbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgY29tbW9uU3R5bGVzLCAoX09iamVjdCRhc3NpZ24gPSB7fSwgX09iamVjdCRhc3NpZ25bc2lkZVldID0gaGFzWSA/ICcwJyA6ICcnLCBfT2JqZWN0JGFzc2lnbltzaWRlWF0gPSBoYXNYID8gJzAnIDogJycsIF9PYmplY3QkYXNzaWduLnRyYW5zZm9ybSA9ICh3aW4uZGV2aWNlUGl4ZWxSYXRpbyB8fCAxKSA8PSAxID8gXCJ0cmFuc2xhdGUoXCIgKyB4ICsgXCJweCwgXCIgKyB5ICsgXCJweClcIiA6IFwidHJhbnNsYXRlM2QoXCIgKyB4ICsgXCJweCwgXCIgKyB5ICsgXCJweCwgMClcIiwgX09iamVjdCRhc3NpZ24pKTtcbiAgfVxuXG4gIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBjb21tb25TdHlsZXMsIChfT2JqZWN0JGFzc2lnbjIgPSB7fSwgX09iamVjdCRhc3NpZ24yW3NpZGVZXSA9IGhhc1kgPyB5ICsgXCJweFwiIDogJycsIF9PYmplY3QkYXNzaWduMltzaWRlWF0gPSBoYXNYID8geCArIFwicHhcIiA6ICcnLCBfT2JqZWN0JGFzc2lnbjIudHJhbnNmb3JtID0gJycsIF9PYmplY3QkYXNzaWduMikpO1xufVxuXG5mdW5jdGlvbiBjb21wdXRlU3R5bGVzKF9yZWY1KSB7XG4gIHZhciBzdGF0ZSA9IF9yZWY1LnN0YXRlLFxuICAgICAgb3B0aW9ucyA9IF9yZWY1Lm9wdGlvbnM7XG4gIHZhciBfb3B0aW9ucyRncHVBY2NlbGVyYXQgPSBvcHRpb25zLmdwdUFjY2VsZXJhdGlvbixcbiAgICAgIGdwdUFjY2VsZXJhdGlvbiA9IF9vcHRpb25zJGdwdUFjY2VsZXJhdCA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJGdwdUFjY2VsZXJhdCxcbiAgICAgIF9vcHRpb25zJGFkYXB0aXZlID0gb3B0aW9ucy5hZGFwdGl2ZSxcbiAgICAgIGFkYXB0aXZlID0gX29wdGlvbnMkYWRhcHRpdmUgPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyRhZGFwdGl2ZSxcbiAgICAgIF9vcHRpb25zJHJvdW5kT2Zmc2V0cyA9IG9wdGlvbnMucm91bmRPZmZzZXRzLFxuICAgICAgcm91bmRPZmZzZXRzID0gX29wdGlvbnMkcm91bmRPZmZzZXRzID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkcm91bmRPZmZzZXRzO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICB2YXIgdHJhbnNpdGlvblByb3BlcnR5ID0gZ2V0Q29tcHV0ZWRTdHlsZShzdGF0ZS5lbGVtZW50cy5wb3BwZXIpLnRyYW5zaXRpb25Qcm9wZXJ0eSB8fCAnJztcblxuICAgIGlmIChhZGFwdGl2ZSAmJiBbJ3RyYW5zZm9ybScsICd0b3AnLCAncmlnaHQnLCAnYm90dG9tJywgJ2xlZnQnXS5zb21lKGZ1bmN0aW9uIChwcm9wZXJ0eSkge1xuICAgICAgcmV0dXJuIHRyYW5zaXRpb25Qcm9wZXJ0eS5pbmRleE9mKHByb3BlcnR5KSA+PSAwO1xuICAgIH0pKSB7XG4gICAgICBjb25zb2xlLndhcm4oWydQb3BwZXI6IERldGVjdGVkIENTUyB0cmFuc2l0aW9ucyBvbiBhdCBsZWFzdCBvbmUgb2YgdGhlIGZvbGxvd2luZycsICdDU1MgcHJvcGVydGllczogXCJ0cmFuc2Zvcm1cIiwgXCJ0b3BcIiwgXCJyaWdodFwiLCBcImJvdHRvbVwiLCBcImxlZnRcIi4nLCAnXFxuXFxuJywgJ0Rpc2FibGUgdGhlIFwiY29tcHV0ZVN0eWxlc1wiIG1vZGlmaWVyXFwncyBgYWRhcHRpdmVgIG9wdGlvbiB0byBhbGxvdycsICdmb3Igc21vb3RoIHRyYW5zaXRpb25zLCBvciByZW1vdmUgdGhlc2UgcHJvcGVydGllcyBmcm9tIHRoZSBDU1MnLCAndHJhbnNpdGlvbiBkZWNsYXJhdGlvbiBvbiB0aGUgcG9wcGVyIGVsZW1lbnQgaWYgb25seSB0cmFuc2l0aW9uaW5nJywgJ29wYWNpdHkgb3IgYmFja2dyb3VuZC1jb2xvciBmb3IgZXhhbXBsZS4nLCAnXFxuXFxuJywgJ1dlIHJlY29tbWVuZCB1c2luZyB0aGUgcG9wcGVyIGVsZW1lbnQgYXMgYSB3cmFwcGVyIGFyb3VuZCBhbiBpbm5lcicsICdlbGVtZW50IHRoYXQgY2FuIGhhdmUgYW55IENTUyBwcm9wZXJ0eSB0cmFuc2l0aW9uZWQgZm9yIGFuaW1hdGlvbnMuJ10uam9pbignICcpKTtcbiAgICB9XG4gIH1cblxuICB2YXIgY29tbW9uU3R5bGVzID0ge1xuICAgIHBsYWNlbWVudDogZ2V0QmFzZVBsYWNlbWVudChzdGF0ZS5wbGFjZW1lbnQpLFxuICAgIHZhcmlhdGlvbjogZ2V0VmFyaWF0aW9uKHN0YXRlLnBsYWNlbWVudCksXG4gICAgcG9wcGVyOiBzdGF0ZS5lbGVtZW50cy5wb3BwZXIsXG4gICAgcG9wcGVyUmVjdDogc3RhdGUucmVjdHMucG9wcGVyLFxuICAgIGdwdUFjY2VsZXJhdGlvbjogZ3B1QWNjZWxlcmF0aW9uLFxuICAgIGlzRml4ZWQ6IHN0YXRlLm9wdGlvbnMuc3RyYXRlZ3kgPT09ICdmaXhlZCdcbiAgfTtcblxuICBpZiAoc3RhdGUubW9kaWZpZXJzRGF0YS5wb3BwZXJPZmZzZXRzICE9IG51bGwpIHtcbiAgICBzdGF0ZS5zdHlsZXMucG9wcGVyID0gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUuc3R5bGVzLnBvcHBlciwgbWFwVG9TdHlsZXMoT2JqZWN0LmFzc2lnbih7fSwgY29tbW9uU3R5bGVzLCB7XG4gICAgICBvZmZzZXRzOiBzdGF0ZS5tb2RpZmllcnNEYXRhLnBvcHBlck9mZnNldHMsXG4gICAgICBwb3NpdGlvbjogc3RhdGUub3B0aW9ucy5zdHJhdGVneSxcbiAgICAgIGFkYXB0aXZlOiBhZGFwdGl2ZSxcbiAgICAgIHJvdW5kT2Zmc2V0czogcm91bmRPZmZzZXRzXG4gICAgfSkpKTtcbiAgfVxuXG4gIGlmIChzdGF0ZS5tb2RpZmllcnNEYXRhLmFycm93ICE9IG51bGwpIHtcbiAgICBzdGF0ZS5zdHlsZXMuYXJyb3cgPSBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZS5zdHlsZXMuYXJyb3csIG1hcFRvU3R5bGVzKE9iamVjdC5hc3NpZ24oe30sIGNvbW1vblN0eWxlcywge1xuICAgICAgb2Zmc2V0czogc3RhdGUubW9kaWZpZXJzRGF0YS5hcnJvdyxcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgYWRhcHRpdmU6IGZhbHNlLFxuICAgICAgcm91bmRPZmZzZXRzOiByb3VuZE9mZnNldHNcbiAgICB9KSkpO1xuICB9XG5cbiAgc3RhdGUuYXR0cmlidXRlcy5wb3BwZXIgPSBPYmplY3QuYXNzaWduKHt9LCBzdGF0ZS5hdHRyaWJ1dGVzLnBvcHBlciwge1xuICAgICdkYXRhLXBvcHBlci1wbGFjZW1lbnQnOiBzdGF0ZS5wbGFjZW1lbnRcbiAgfSk7XG59IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdjb21wdXRlU3R5bGVzJyxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgcGhhc2U6ICdiZWZvcmVXcml0ZScsXG4gIGZuOiBjb21wdXRlU3R5bGVzLFxuICBkYXRhOiB7fVxufTsiLCAiaW1wb3J0IGdldFdpbmRvdyBmcm9tIFwiLi4vZG9tLXV0aWxzL2dldFdpbmRvdy5qc1wiOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cbnZhciBwYXNzaXZlID0ge1xuICBwYXNzaXZlOiB0cnVlXG59O1xuXG5mdW5jdGlvbiBlZmZlY3QoX3JlZikge1xuICB2YXIgc3RhdGUgPSBfcmVmLnN0YXRlLFxuICAgICAgaW5zdGFuY2UgPSBfcmVmLmluc3RhbmNlLFxuICAgICAgb3B0aW9ucyA9IF9yZWYub3B0aW9ucztcbiAgdmFyIF9vcHRpb25zJHNjcm9sbCA9IG9wdGlvbnMuc2Nyb2xsLFxuICAgICAgc2Nyb2xsID0gX29wdGlvbnMkc2Nyb2xsID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkc2Nyb2xsLFxuICAgICAgX29wdGlvbnMkcmVzaXplID0gb3B0aW9ucy5yZXNpemUsXG4gICAgICByZXNpemUgPSBfb3B0aW9ucyRyZXNpemUgPT09IHZvaWQgMCA/IHRydWUgOiBfb3B0aW9ucyRyZXNpemU7XG4gIHZhciB3aW5kb3cgPSBnZXRXaW5kb3coc3RhdGUuZWxlbWVudHMucG9wcGVyKTtcbiAgdmFyIHNjcm9sbFBhcmVudHMgPSBbXS5jb25jYXQoc3RhdGUuc2Nyb2xsUGFyZW50cy5yZWZlcmVuY2UsIHN0YXRlLnNjcm9sbFBhcmVudHMucG9wcGVyKTtcblxuICBpZiAoc2Nyb2xsKSB7XG4gICAgc2Nyb2xsUGFyZW50cy5mb3JFYWNoKGZ1bmN0aW9uIChzY3JvbGxQYXJlbnQpIHtcbiAgICAgIHNjcm9sbFBhcmVudC5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBpbnN0YW5jZS51cGRhdGUsIHBhc3NpdmUpO1xuICAgIH0pO1xuICB9XG5cbiAgaWYgKHJlc2l6ZSkge1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBpbnN0YW5jZS51cGRhdGUsIHBhc3NpdmUpO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoc2Nyb2xsKSB7XG4gICAgICBzY3JvbGxQYXJlbnRzLmZvckVhY2goZnVuY3Rpb24gKHNjcm9sbFBhcmVudCkge1xuICAgICAgICBzY3JvbGxQYXJlbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgaW5zdGFuY2UudXBkYXRlLCBwYXNzaXZlKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChyZXNpemUpIHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCBpbnN0YW5jZS51cGRhdGUsIHBhc3NpdmUpO1xuICAgIH1cbiAgfTtcbn0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ2V2ZW50TGlzdGVuZXJzJyxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgcGhhc2U6ICd3cml0ZScsXG4gIGZuOiBmdW5jdGlvbiBmbigpIHt9LFxuICBlZmZlY3Q6IGVmZmVjdCxcbiAgZGF0YToge31cbn07IiwgInZhciBoYXNoID0ge1xuICBsZWZ0OiAncmlnaHQnLFxuICByaWdodDogJ2xlZnQnLFxuICBib3R0b206ICd0b3AnLFxuICB0b3A6ICdib3R0b20nXG59O1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0T3Bwb3NpdGVQbGFjZW1lbnQocGxhY2VtZW50KSB7XG4gIHJldHVybiBwbGFjZW1lbnQucmVwbGFjZSgvbGVmdHxyaWdodHxib3R0b218dG9wL2csIGZ1bmN0aW9uIChtYXRjaGVkKSB7XG4gICAgcmV0dXJuIGhhc2hbbWF0Y2hlZF07XG4gIH0pO1xufSIsICJ2YXIgaGFzaCA9IHtcbiAgc3RhcnQ6ICdlbmQnLFxuICBlbmQ6ICdzdGFydCdcbn07XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRPcHBvc2l0ZVZhcmlhdGlvblBsYWNlbWVudChwbGFjZW1lbnQpIHtcbiAgcmV0dXJuIHBsYWNlbWVudC5yZXBsYWNlKC9zdGFydHxlbmQvZywgZnVuY3Rpb24gKG1hdGNoZWQpIHtcbiAgICByZXR1cm4gaGFzaFttYXRjaGVkXTtcbiAgfSk7XG59IiwgImltcG9ydCBnZXRXaW5kb3cgZnJvbSBcIi4vZ2V0V2luZG93LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRXaW5kb3dTY3JvbGwobm9kZSkge1xuICB2YXIgd2luID0gZ2V0V2luZG93KG5vZGUpO1xuICB2YXIgc2Nyb2xsTGVmdCA9IHdpbi5wYWdlWE9mZnNldDtcbiAgdmFyIHNjcm9sbFRvcCA9IHdpbi5wYWdlWU9mZnNldDtcbiAgcmV0dXJuIHtcbiAgICBzY3JvbGxMZWZ0OiBzY3JvbGxMZWZ0LFxuICAgIHNjcm9sbFRvcDogc2Nyb2xsVG9wXG4gIH07XG59IiwgImltcG9ydCBnZXRCb3VuZGluZ0NsaWVudFJlY3QgZnJvbSBcIi4vZ2V0Qm91bmRpbmdDbGllbnRSZWN0LmpzXCI7XG5pbXBvcnQgZ2V0RG9jdW1lbnRFbGVtZW50IGZyb20gXCIuL2dldERvY3VtZW50RWxlbWVudC5qc1wiO1xuaW1wb3J0IGdldFdpbmRvd1Njcm9sbCBmcm9tIFwiLi9nZXRXaW5kb3dTY3JvbGwuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFdpbmRvd1Njcm9sbEJhclgoZWxlbWVudCkge1xuICAvLyBJZiA8aHRtbD4gaGFzIGEgQ1NTIHdpZHRoIGdyZWF0ZXIgdGhhbiB0aGUgdmlld3BvcnQsIHRoZW4gdGhpcyB3aWxsIGJlXG4gIC8vIGluY29ycmVjdCBmb3IgUlRMLlxuICAvLyBQb3BwZXIgMSBpcyBicm9rZW4gaW4gdGhpcyBjYXNlIGFuZCBuZXZlciBoYWQgYSBidWcgcmVwb3J0IHNvIGxldCdzIGFzc3VtZVxuICAvLyBpdCdzIG5vdCBhbiBpc3N1ZS4gSSBkb24ndCB0aGluayBhbnlvbmUgZXZlciBzcGVjaWZpZXMgd2lkdGggb24gPGh0bWw+XG4gIC8vIGFueXdheS5cbiAgLy8gQnJvd3NlcnMgd2hlcmUgdGhlIGxlZnQgc2Nyb2xsYmFyIGRvZXNuJ3QgY2F1c2UgYW4gaXNzdWUgcmVwb3J0IGAwYCBmb3JcbiAgLy8gdGhpcyAoZS5nLiBFZGdlIDIwMTksIElFMTEsIFNhZmFyaSlcbiAgcmV0dXJuIGdldEJvdW5kaW5nQ2xpZW50UmVjdChnZXREb2N1bWVudEVsZW1lbnQoZWxlbWVudCkpLmxlZnQgKyBnZXRXaW5kb3dTY3JvbGwoZWxlbWVudCkuc2Nyb2xsTGVmdDtcbn0iLCAiaW1wb3J0IGdldFdpbmRvdyBmcm9tIFwiLi9nZXRXaW5kb3cuanNcIjtcbmltcG9ydCBnZXREb2N1bWVudEVsZW1lbnQgZnJvbSBcIi4vZ2V0RG9jdW1lbnRFbGVtZW50LmpzXCI7XG5pbXBvcnQgZ2V0V2luZG93U2Nyb2xsQmFyWCBmcm9tIFwiLi9nZXRXaW5kb3dTY3JvbGxCYXJYLmpzXCI7XG5pbXBvcnQgaXNMYXlvdXRWaWV3cG9ydCBmcm9tIFwiLi9pc0xheW91dFZpZXdwb3J0LmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRWaWV3cG9ydFJlY3QoZWxlbWVudCwgc3RyYXRlZ3kpIHtcbiAgdmFyIHdpbiA9IGdldFdpbmRvdyhlbGVtZW50KTtcbiAgdmFyIGh0bWwgPSBnZXREb2N1bWVudEVsZW1lbnQoZWxlbWVudCk7XG4gIHZhciB2aXN1YWxWaWV3cG9ydCA9IHdpbi52aXN1YWxWaWV3cG9ydDtcbiAgdmFyIHdpZHRoID0gaHRtbC5jbGllbnRXaWR0aDtcbiAgdmFyIGhlaWdodCA9IGh0bWwuY2xpZW50SGVpZ2h0O1xuICB2YXIgeCA9IDA7XG4gIHZhciB5ID0gMDtcblxuICBpZiAodmlzdWFsVmlld3BvcnQpIHtcbiAgICB3aWR0aCA9IHZpc3VhbFZpZXdwb3J0LndpZHRoO1xuICAgIGhlaWdodCA9IHZpc3VhbFZpZXdwb3J0LmhlaWdodDtcbiAgICB2YXIgbGF5b3V0Vmlld3BvcnQgPSBpc0xheW91dFZpZXdwb3J0KCk7XG5cbiAgICBpZiAobGF5b3V0Vmlld3BvcnQgfHwgIWxheW91dFZpZXdwb3J0ICYmIHN0cmF0ZWd5ID09PSAnZml4ZWQnKSB7XG4gICAgICB4ID0gdmlzdWFsVmlld3BvcnQub2Zmc2V0TGVmdDtcbiAgICAgIHkgPSB2aXN1YWxWaWV3cG9ydC5vZmZzZXRUb3A7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB3aWR0aDogd2lkdGgsXG4gICAgaGVpZ2h0OiBoZWlnaHQsXG4gICAgeDogeCArIGdldFdpbmRvd1Njcm9sbEJhclgoZWxlbWVudCksXG4gICAgeTogeVxuICB9O1xufSIsICJpbXBvcnQgZ2V0RG9jdW1lbnRFbGVtZW50IGZyb20gXCIuL2dldERvY3VtZW50RWxlbWVudC5qc1wiO1xuaW1wb3J0IGdldENvbXB1dGVkU3R5bGUgZnJvbSBcIi4vZ2V0Q29tcHV0ZWRTdHlsZS5qc1wiO1xuaW1wb3J0IGdldFdpbmRvd1Njcm9sbEJhclggZnJvbSBcIi4vZ2V0V2luZG93U2Nyb2xsQmFyWC5qc1wiO1xuaW1wb3J0IGdldFdpbmRvd1Njcm9sbCBmcm9tIFwiLi9nZXRXaW5kb3dTY3JvbGwuanNcIjtcbmltcG9ydCB7IG1heCB9IGZyb20gXCIuLi91dGlscy9tYXRoLmpzXCI7IC8vIEdldHMgdGhlIGVudGlyZSBzaXplIG9mIHRoZSBzY3JvbGxhYmxlIGRvY3VtZW50IGFyZWEsIGV2ZW4gZXh0ZW5kaW5nIG91dHNpZGVcbi8vIG9mIHRoZSBgPGh0bWw+YCBhbmQgYDxib2R5PmAgcmVjdCBib3VuZHMgaWYgaG9yaXpvbnRhbGx5IHNjcm9sbGFibGVcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0RG9jdW1lbnRSZWN0KGVsZW1lbnQpIHtcbiAgdmFyIF9lbGVtZW50JG93bmVyRG9jdW1lbjtcblxuICB2YXIgaHRtbCA9IGdldERvY3VtZW50RWxlbWVudChlbGVtZW50KTtcbiAgdmFyIHdpblNjcm9sbCA9IGdldFdpbmRvd1Njcm9sbChlbGVtZW50KTtcbiAgdmFyIGJvZHkgPSAoX2VsZW1lbnQkb3duZXJEb2N1bWVuID0gZWxlbWVudC5vd25lckRvY3VtZW50KSA9PSBudWxsID8gdm9pZCAwIDogX2VsZW1lbnQkb3duZXJEb2N1bWVuLmJvZHk7XG4gIHZhciB3aWR0aCA9IG1heChodG1sLnNjcm9sbFdpZHRoLCBodG1sLmNsaWVudFdpZHRoLCBib2R5ID8gYm9keS5zY3JvbGxXaWR0aCA6IDAsIGJvZHkgPyBib2R5LmNsaWVudFdpZHRoIDogMCk7XG4gIHZhciBoZWlnaHQgPSBtYXgoaHRtbC5zY3JvbGxIZWlnaHQsIGh0bWwuY2xpZW50SGVpZ2h0LCBib2R5ID8gYm9keS5zY3JvbGxIZWlnaHQgOiAwLCBib2R5ID8gYm9keS5jbGllbnRIZWlnaHQgOiAwKTtcbiAgdmFyIHggPSAtd2luU2Nyb2xsLnNjcm9sbExlZnQgKyBnZXRXaW5kb3dTY3JvbGxCYXJYKGVsZW1lbnQpO1xuICB2YXIgeSA9IC13aW5TY3JvbGwuc2Nyb2xsVG9wO1xuXG4gIGlmIChnZXRDb21wdXRlZFN0eWxlKGJvZHkgfHwgaHRtbCkuZGlyZWN0aW9uID09PSAncnRsJykge1xuICAgIHggKz0gbWF4KGh0bWwuY2xpZW50V2lkdGgsIGJvZHkgPyBib2R5LmNsaWVudFdpZHRoIDogMCkgLSB3aWR0aDtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgd2lkdGg6IHdpZHRoLFxuICAgIGhlaWdodDogaGVpZ2h0LFxuICAgIHg6IHgsXG4gICAgeTogeVxuICB9O1xufSIsICJpbXBvcnQgZ2V0Q29tcHV0ZWRTdHlsZSBmcm9tIFwiLi9nZXRDb21wdXRlZFN0eWxlLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc1Njcm9sbFBhcmVudChlbGVtZW50KSB7XG4gIC8vIEZpcmVmb3ggd2FudHMgdXMgdG8gY2hlY2sgYC14YCBhbmQgYC15YCB2YXJpYXRpb25zIGFzIHdlbGxcbiAgdmFyIF9nZXRDb21wdXRlZFN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KSxcbiAgICAgIG92ZXJmbG93ID0gX2dldENvbXB1dGVkU3R5bGUub3ZlcmZsb3csXG4gICAgICBvdmVyZmxvd1ggPSBfZ2V0Q29tcHV0ZWRTdHlsZS5vdmVyZmxvd1gsXG4gICAgICBvdmVyZmxvd1kgPSBfZ2V0Q29tcHV0ZWRTdHlsZS5vdmVyZmxvd1k7XG5cbiAgcmV0dXJuIC9hdXRvfHNjcm9sbHxvdmVybGF5fGhpZGRlbi8udGVzdChvdmVyZmxvdyArIG92ZXJmbG93WSArIG92ZXJmbG93WCk7XG59IiwgImltcG9ydCBnZXRQYXJlbnROb2RlIGZyb20gXCIuL2dldFBhcmVudE5vZGUuanNcIjtcbmltcG9ydCBpc1Njcm9sbFBhcmVudCBmcm9tIFwiLi9pc1Njcm9sbFBhcmVudC5qc1wiO1xuaW1wb3J0IGdldE5vZGVOYW1lIGZyb20gXCIuL2dldE5vZGVOYW1lLmpzXCI7XG5pbXBvcnQgeyBpc0hUTUxFbGVtZW50IH0gZnJvbSBcIi4vaW5zdGFuY2VPZi5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0U2Nyb2xsUGFyZW50KG5vZGUpIHtcbiAgaWYgKFsnaHRtbCcsICdib2R5JywgJyNkb2N1bWVudCddLmluZGV4T2YoZ2V0Tm9kZU5hbWUobm9kZSkpID49IDApIHtcbiAgICAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS1yZXR1cm5dOiBhc3N1bWUgYm9keSBpcyBhbHdheXMgYXZhaWxhYmxlXG4gICAgcmV0dXJuIG5vZGUub3duZXJEb2N1bWVudC5ib2R5O1xuICB9XG5cbiAgaWYgKGlzSFRNTEVsZW1lbnQobm9kZSkgJiYgaXNTY3JvbGxQYXJlbnQobm9kZSkpIHtcbiAgICByZXR1cm4gbm9kZTtcbiAgfVxuXG4gIHJldHVybiBnZXRTY3JvbGxQYXJlbnQoZ2V0UGFyZW50Tm9kZShub2RlKSk7XG59IiwgImltcG9ydCBnZXRTY3JvbGxQYXJlbnQgZnJvbSBcIi4vZ2V0U2Nyb2xsUGFyZW50LmpzXCI7XG5pbXBvcnQgZ2V0UGFyZW50Tm9kZSBmcm9tIFwiLi9nZXRQYXJlbnROb2RlLmpzXCI7XG5pbXBvcnQgZ2V0V2luZG93IGZyb20gXCIuL2dldFdpbmRvdy5qc1wiO1xuaW1wb3J0IGlzU2Nyb2xsUGFyZW50IGZyb20gXCIuL2lzU2Nyb2xsUGFyZW50LmpzXCI7XG4vKlxuZ2l2ZW4gYSBET00gZWxlbWVudCwgcmV0dXJuIHRoZSBsaXN0IG9mIGFsbCBzY3JvbGwgcGFyZW50cywgdXAgdGhlIGxpc3Qgb2YgYW5jZXNvcnNcbnVudGlsIHdlIGdldCB0byB0aGUgdG9wIHdpbmRvdyBvYmplY3QuIFRoaXMgbGlzdCBpcyB3aGF0IHdlIGF0dGFjaCBzY3JvbGwgbGlzdGVuZXJzXG50bywgYmVjYXVzZSBpZiBhbnkgb2YgdGhlc2UgcGFyZW50IGVsZW1lbnRzIHNjcm9sbCwgd2UnbGwgbmVlZCB0byByZS1jYWxjdWxhdGUgdGhlXG5yZWZlcmVuY2UgZWxlbWVudCdzIHBvc2l0aW9uLlxuKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbGlzdFNjcm9sbFBhcmVudHMoZWxlbWVudCwgbGlzdCkge1xuICB2YXIgX2VsZW1lbnQkb3duZXJEb2N1bWVuO1xuXG4gIGlmIChsaXN0ID09PSB2b2lkIDApIHtcbiAgICBsaXN0ID0gW107XG4gIH1cblxuICB2YXIgc2Nyb2xsUGFyZW50ID0gZ2V0U2Nyb2xsUGFyZW50KGVsZW1lbnQpO1xuICB2YXIgaXNCb2R5ID0gc2Nyb2xsUGFyZW50ID09PSAoKF9lbGVtZW50JG93bmVyRG9jdW1lbiA9IGVsZW1lbnQub3duZXJEb2N1bWVudCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9lbGVtZW50JG93bmVyRG9jdW1lbi5ib2R5KTtcbiAgdmFyIHdpbiA9IGdldFdpbmRvdyhzY3JvbGxQYXJlbnQpO1xuICB2YXIgdGFyZ2V0ID0gaXNCb2R5ID8gW3dpbl0uY29uY2F0KHdpbi52aXN1YWxWaWV3cG9ydCB8fCBbXSwgaXNTY3JvbGxQYXJlbnQoc2Nyb2xsUGFyZW50KSA/IHNjcm9sbFBhcmVudCA6IFtdKSA6IHNjcm9sbFBhcmVudDtcbiAgdmFyIHVwZGF0ZWRMaXN0ID0gbGlzdC5jb25jYXQodGFyZ2V0KTtcbiAgcmV0dXJuIGlzQm9keSA/IHVwZGF0ZWRMaXN0IDogLy8gJEZsb3dGaXhNZVtpbmNvbXBhdGlibGUtY2FsbF06IGlzQm9keSB0ZWxscyB1cyB0YXJnZXQgd2lsbCBiZSBhbiBIVE1MRWxlbWVudCBoZXJlXG4gIHVwZGF0ZWRMaXN0LmNvbmNhdChsaXN0U2Nyb2xsUGFyZW50cyhnZXRQYXJlbnROb2RlKHRhcmdldCkpKTtcbn0iLCAiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVjdFRvQ2xpZW50UmVjdChyZWN0KSB7XG4gIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCByZWN0LCB7XG4gICAgbGVmdDogcmVjdC54LFxuICAgIHRvcDogcmVjdC55LFxuICAgIHJpZ2h0OiByZWN0LnggKyByZWN0LndpZHRoLFxuICAgIGJvdHRvbTogcmVjdC55ICsgcmVjdC5oZWlnaHRcbiAgfSk7XG59IiwgImltcG9ydCB7IHZpZXdwb3J0IH0gZnJvbSBcIi4uL2VudW1zLmpzXCI7XG5pbXBvcnQgZ2V0Vmlld3BvcnRSZWN0IGZyb20gXCIuL2dldFZpZXdwb3J0UmVjdC5qc1wiO1xuaW1wb3J0IGdldERvY3VtZW50UmVjdCBmcm9tIFwiLi9nZXREb2N1bWVudFJlY3QuanNcIjtcbmltcG9ydCBsaXN0U2Nyb2xsUGFyZW50cyBmcm9tIFwiLi9saXN0U2Nyb2xsUGFyZW50cy5qc1wiO1xuaW1wb3J0IGdldE9mZnNldFBhcmVudCBmcm9tIFwiLi9nZXRPZmZzZXRQYXJlbnQuanNcIjtcbmltcG9ydCBnZXREb2N1bWVudEVsZW1lbnQgZnJvbSBcIi4vZ2V0RG9jdW1lbnRFbGVtZW50LmpzXCI7XG5pbXBvcnQgZ2V0Q29tcHV0ZWRTdHlsZSBmcm9tIFwiLi9nZXRDb21wdXRlZFN0eWxlLmpzXCI7XG5pbXBvcnQgeyBpc0VsZW1lbnQsIGlzSFRNTEVsZW1lbnQgfSBmcm9tIFwiLi9pbnN0YW5jZU9mLmpzXCI7XG5pbXBvcnQgZ2V0Qm91bmRpbmdDbGllbnRSZWN0IGZyb20gXCIuL2dldEJvdW5kaW5nQ2xpZW50UmVjdC5qc1wiO1xuaW1wb3J0IGdldFBhcmVudE5vZGUgZnJvbSBcIi4vZ2V0UGFyZW50Tm9kZS5qc1wiO1xuaW1wb3J0IGNvbnRhaW5zIGZyb20gXCIuL2NvbnRhaW5zLmpzXCI7XG5pbXBvcnQgZ2V0Tm9kZU5hbWUgZnJvbSBcIi4vZ2V0Tm9kZU5hbWUuanNcIjtcbmltcG9ydCByZWN0VG9DbGllbnRSZWN0IGZyb20gXCIuLi91dGlscy9yZWN0VG9DbGllbnRSZWN0LmpzXCI7XG5pbXBvcnQgeyBtYXgsIG1pbiB9IGZyb20gXCIuLi91dGlscy9tYXRoLmpzXCI7XG5cbmZ1bmN0aW9uIGdldElubmVyQm91bmRpbmdDbGllbnRSZWN0KGVsZW1lbnQsIHN0cmF0ZWd5KSB7XG4gIHZhciByZWN0ID0gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KGVsZW1lbnQsIGZhbHNlLCBzdHJhdGVneSA9PT0gJ2ZpeGVkJyk7XG4gIHJlY3QudG9wID0gcmVjdC50b3AgKyBlbGVtZW50LmNsaWVudFRvcDtcbiAgcmVjdC5sZWZ0ID0gcmVjdC5sZWZ0ICsgZWxlbWVudC5jbGllbnRMZWZ0O1xuICByZWN0LmJvdHRvbSA9IHJlY3QudG9wICsgZWxlbWVudC5jbGllbnRIZWlnaHQ7XG4gIHJlY3QucmlnaHQgPSByZWN0LmxlZnQgKyBlbGVtZW50LmNsaWVudFdpZHRoO1xuICByZWN0LndpZHRoID0gZWxlbWVudC5jbGllbnRXaWR0aDtcbiAgcmVjdC5oZWlnaHQgPSBlbGVtZW50LmNsaWVudEhlaWdodDtcbiAgcmVjdC54ID0gcmVjdC5sZWZ0O1xuICByZWN0LnkgPSByZWN0LnRvcDtcbiAgcmV0dXJuIHJlY3Q7XG59XG5cbmZ1bmN0aW9uIGdldENsaWVudFJlY3RGcm9tTWl4ZWRUeXBlKGVsZW1lbnQsIGNsaXBwaW5nUGFyZW50LCBzdHJhdGVneSkge1xuICByZXR1cm4gY2xpcHBpbmdQYXJlbnQgPT09IHZpZXdwb3J0ID8gcmVjdFRvQ2xpZW50UmVjdChnZXRWaWV3cG9ydFJlY3QoZWxlbWVudCwgc3RyYXRlZ3kpKSA6IGlzRWxlbWVudChjbGlwcGluZ1BhcmVudCkgPyBnZXRJbm5lckJvdW5kaW5nQ2xpZW50UmVjdChjbGlwcGluZ1BhcmVudCwgc3RyYXRlZ3kpIDogcmVjdFRvQ2xpZW50UmVjdChnZXREb2N1bWVudFJlY3QoZ2V0RG9jdW1lbnRFbGVtZW50KGVsZW1lbnQpKSk7XG59IC8vIEEgXCJjbGlwcGluZyBwYXJlbnRcIiBpcyBhbiBvdmVyZmxvd2FibGUgY29udGFpbmVyIHdpdGggdGhlIGNoYXJhY3RlcmlzdGljIG9mXG4vLyBjbGlwcGluZyAob3IgaGlkaW5nKSBvdmVyZmxvd2luZyBlbGVtZW50cyB3aXRoIGEgcG9zaXRpb24gZGlmZmVyZW50IGZyb21cbi8vIGBpbml0aWFsYFxuXG5cbmZ1bmN0aW9uIGdldENsaXBwaW5nUGFyZW50cyhlbGVtZW50KSB7XG4gIHZhciBjbGlwcGluZ1BhcmVudHMgPSBsaXN0U2Nyb2xsUGFyZW50cyhnZXRQYXJlbnROb2RlKGVsZW1lbnQpKTtcbiAgdmFyIGNhbkVzY2FwZUNsaXBwaW5nID0gWydhYnNvbHV0ZScsICdmaXhlZCddLmluZGV4T2YoZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KS5wb3NpdGlvbikgPj0gMDtcbiAgdmFyIGNsaXBwZXJFbGVtZW50ID0gY2FuRXNjYXBlQ2xpcHBpbmcgJiYgaXNIVE1MRWxlbWVudChlbGVtZW50KSA/IGdldE9mZnNldFBhcmVudChlbGVtZW50KSA6IGVsZW1lbnQ7XG5cbiAgaWYgKCFpc0VsZW1lbnQoY2xpcHBlckVsZW1lbnQpKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9IC8vICRGbG93Rml4TWVbaW5jb21wYXRpYmxlLXJldHVybl06IGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9mbG93L2lzc3Vlcy8xNDE0XG5cblxuICByZXR1cm4gY2xpcHBpbmdQYXJlbnRzLmZpbHRlcihmdW5jdGlvbiAoY2xpcHBpbmdQYXJlbnQpIHtcbiAgICByZXR1cm4gaXNFbGVtZW50KGNsaXBwaW5nUGFyZW50KSAmJiBjb250YWlucyhjbGlwcGluZ1BhcmVudCwgY2xpcHBlckVsZW1lbnQpICYmIGdldE5vZGVOYW1lKGNsaXBwaW5nUGFyZW50KSAhPT0gJ2JvZHknO1xuICB9KTtcbn0gLy8gR2V0cyB0aGUgbWF4aW11bSBhcmVhIHRoYXQgdGhlIGVsZW1lbnQgaXMgdmlzaWJsZSBpbiBkdWUgdG8gYW55IG51bWJlciBvZlxuLy8gY2xpcHBpbmcgcGFyZW50c1xuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldENsaXBwaW5nUmVjdChlbGVtZW50LCBib3VuZGFyeSwgcm9vdEJvdW5kYXJ5LCBzdHJhdGVneSkge1xuICB2YXIgbWFpbkNsaXBwaW5nUGFyZW50cyA9IGJvdW5kYXJ5ID09PSAnY2xpcHBpbmdQYXJlbnRzJyA/IGdldENsaXBwaW5nUGFyZW50cyhlbGVtZW50KSA6IFtdLmNvbmNhdChib3VuZGFyeSk7XG4gIHZhciBjbGlwcGluZ1BhcmVudHMgPSBbXS5jb25jYXQobWFpbkNsaXBwaW5nUGFyZW50cywgW3Jvb3RCb3VuZGFyeV0pO1xuICB2YXIgZmlyc3RDbGlwcGluZ1BhcmVudCA9IGNsaXBwaW5nUGFyZW50c1swXTtcbiAgdmFyIGNsaXBwaW5nUmVjdCA9IGNsaXBwaW5nUGFyZW50cy5yZWR1Y2UoZnVuY3Rpb24gKGFjY1JlY3QsIGNsaXBwaW5nUGFyZW50KSB7XG4gICAgdmFyIHJlY3QgPSBnZXRDbGllbnRSZWN0RnJvbU1peGVkVHlwZShlbGVtZW50LCBjbGlwcGluZ1BhcmVudCwgc3RyYXRlZ3kpO1xuICAgIGFjY1JlY3QudG9wID0gbWF4KHJlY3QudG9wLCBhY2NSZWN0LnRvcCk7XG4gICAgYWNjUmVjdC5yaWdodCA9IG1pbihyZWN0LnJpZ2h0LCBhY2NSZWN0LnJpZ2h0KTtcbiAgICBhY2NSZWN0LmJvdHRvbSA9IG1pbihyZWN0LmJvdHRvbSwgYWNjUmVjdC5ib3R0b20pO1xuICAgIGFjY1JlY3QubGVmdCA9IG1heChyZWN0LmxlZnQsIGFjY1JlY3QubGVmdCk7XG4gICAgcmV0dXJuIGFjY1JlY3Q7XG4gIH0sIGdldENsaWVudFJlY3RGcm9tTWl4ZWRUeXBlKGVsZW1lbnQsIGZpcnN0Q2xpcHBpbmdQYXJlbnQsIHN0cmF0ZWd5KSk7XG4gIGNsaXBwaW5nUmVjdC53aWR0aCA9IGNsaXBwaW5nUmVjdC5yaWdodCAtIGNsaXBwaW5nUmVjdC5sZWZ0O1xuICBjbGlwcGluZ1JlY3QuaGVpZ2h0ID0gY2xpcHBpbmdSZWN0LmJvdHRvbSAtIGNsaXBwaW5nUmVjdC50b3A7XG4gIGNsaXBwaW5nUmVjdC54ID0gY2xpcHBpbmdSZWN0LmxlZnQ7XG4gIGNsaXBwaW5nUmVjdC55ID0gY2xpcHBpbmdSZWN0LnRvcDtcbiAgcmV0dXJuIGNsaXBwaW5nUmVjdDtcbn0iLCAiaW1wb3J0IGdldEJhc2VQbGFjZW1lbnQgZnJvbSBcIi4vZ2V0QmFzZVBsYWNlbWVudC5qc1wiO1xuaW1wb3J0IGdldFZhcmlhdGlvbiBmcm9tIFwiLi9nZXRWYXJpYXRpb24uanNcIjtcbmltcG9ydCBnZXRNYWluQXhpc0Zyb21QbGFjZW1lbnQgZnJvbSBcIi4vZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50LmpzXCI7XG5pbXBvcnQgeyB0b3AsIHJpZ2h0LCBib3R0b20sIGxlZnQsIHN0YXJ0LCBlbmQgfSBmcm9tIFwiLi4vZW51bXMuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbXB1dGVPZmZzZXRzKF9yZWYpIHtcbiAgdmFyIHJlZmVyZW5jZSA9IF9yZWYucmVmZXJlbmNlLFxuICAgICAgZWxlbWVudCA9IF9yZWYuZWxlbWVudCxcbiAgICAgIHBsYWNlbWVudCA9IF9yZWYucGxhY2VtZW50O1xuICB2YXIgYmFzZVBsYWNlbWVudCA9IHBsYWNlbWVudCA/IGdldEJhc2VQbGFjZW1lbnQocGxhY2VtZW50KSA6IG51bGw7XG4gIHZhciB2YXJpYXRpb24gPSBwbGFjZW1lbnQgPyBnZXRWYXJpYXRpb24ocGxhY2VtZW50KSA6IG51bGw7XG4gIHZhciBjb21tb25YID0gcmVmZXJlbmNlLnggKyByZWZlcmVuY2Uud2lkdGggLyAyIC0gZWxlbWVudC53aWR0aCAvIDI7XG4gIHZhciBjb21tb25ZID0gcmVmZXJlbmNlLnkgKyByZWZlcmVuY2UuaGVpZ2h0IC8gMiAtIGVsZW1lbnQuaGVpZ2h0IC8gMjtcbiAgdmFyIG9mZnNldHM7XG5cbiAgc3dpdGNoIChiYXNlUGxhY2VtZW50KSB7XG4gICAgY2FzZSB0b3A6XG4gICAgICBvZmZzZXRzID0ge1xuICAgICAgICB4OiBjb21tb25YLFxuICAgICAgICB5OiByZWZlcmVuY2UueSAtIGVsZW1lbnQuaGVpZ2h0XG4gICAgICB9O1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIGJvdHRvbTpcbiAgICAgIG9mZnNldHMgPSB7XG4gICAgICAgIHg6IGNvbW1vblgsXG4gICAgICAgIHk6IHJlZmVyZW5jZS55ICsgcmVmZXJlbmNlLmhlaWdodFxuICAgICAgfTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSByaWdodDpcbiAgICAgIG9mZnNldHMgPSB7XG4gICAgICAgIHg6IHJlZmVyZW5jZS54ICsgcmVmZXJlbmNlLndpZHRoLFxuICAgICAgICB5OiBjb21tb25ZXG4gICAgICB9O1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIGxlZnQ6XG4gICAgICBvZmZzZXRzID0ge1xuICAgICAgICB4OiByZWZlcmVuY2UueCAtIGVsZW1lbnQud2lkdGgsXG4gICAgICAgIHk6IGNvbW1vbllcbiAgICAgIH07XG4gICAgICBicmVhaztcblxuICAgIGRlZmF1bHQ6XG4gICAgICBvZmZzZXRzID0ge1xuICAgICAgICB4OiByZWZlcmVuY2UueCxcbiAgICAgICAgeTogcmVmZXJlbmNlLnlcbiAgICAgIH07XG4gIH1cblxuICB2YXIgbWFpbkF4aXMgPSBiYXNlUGxhY2VtZW50ID8gZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50KGJhc2VQbGFjZW1lbnQpIDogbnVsbDtcblxuICBpZiAobWFpbkF4aXMgIT0gbnVsbCkge1xuICAgIHZhciBsZW4gPSBtYWluQXhpcyA9PT0gJ3knID8gJ2hlaWdodCcgOiAnd2lkdGgnO1xuXG4gICAgc3dpdGNoICh2YXJpYXRpb24pIHtcbiAgICAgIGNhc2Ugc3RhcnQ6XG4gICAgICAgIG9mZnNldHNbbWFpbkF4aXNdID0gb2Zmc2V0c1ttYWluQXhpc10gLSAocmVmZXJlbmNlW2xlbl0gLyAyIC0gZWxlbWVudFtsZW5dIC8gMik7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIGVuZDpcbiAgICAgICAgb2Zmc2V0c1ttYWluQXhpc10gPSBvZmZzZXRzW21haW5BeGlzXSArIChyZWZlcmVuY2VbbGVuXSAvIDIgLSBlbGVtZW50W2xlbl0gLyAyKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG9mZnNldHM7XG59IiwgImltcG9ydCBnZXRDbGlwcGluZ1JlY3QgZnJvbSBcIi4uL2RvbS11dGlscy9nZXRDbGlwcGluZ1JlY3QuanNcIjtcbmltcG9ydCBnZXREb2N1bWVudEVsZW1lbnQgZnJvbSBcIi4uL2RvbS11dGlscy9nZXREb2N1bWVudEVsZW1lbnQuanNcIjtcbmltcG9ydCBnZXRCb3VuZGluZ0NsaWVudFJlY3QgZnJvbSBcIi4uL2RvbS11dGlscy9nZXRCb3VuZGluZ0NsaWVudFJlY3QuanNcIjtcbmltcG9ydCBjb21wdXRlT2Zmc2V0cyBmcm9tIFwiLi9jb21wdXRlT2Zmc2V0cy5qc1wiO1xuaW1wb3J0IHJlY3RUb0NsaWVudFJlY3QgZnJvbSBcIi4vcmVjdFRvQ2xpZW50UmVjdC5qc1wiO1xuaW1wb3J0IHsgY2xpcHBpbmdQYXJlbnRzLCByZWZlcmVuY2UsIHBvcHBlciwgYm90dG9tLCB0b3AsIHJpZ2h0LCBiYXNlUGxhY2VtZW50cywgdmlld3BvcnQgfSBmcm9tIFwiLi4vZW51bXMuanNcIjtcbmltcG9ydCB7IGlzRWxlbWVudCB9IGZyb20gXCIuLi9kb20tdXRpbHMvaW5zdGFuY2VPZi5qc1wiO1xuaW1wb3J0IG1lcmdlUGFkZGluZ09iamVjdCBmcm9tIFwiLi9tZXJnZVBhZGRpbmdPYmplY3QuanNcIjtcbmltcG9ydCBleHBhbmRUb0hhc2hNYXAgZnJvbSBcIi4vZXhwYW5kVG9IYXNoTWFwLmpzXCI7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGV0ZWN0T3ZlcmZsb3coc3RhdGUsIG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIHZhciBfb3B0aW9ucyA9IG9wdGlvbnMsXG4gICAgICBfb3B0aW9ucyRwbGFjZW1lbnQgPSBfb3B0aW9ucy5wbGFjZW1lbnQsXG4gICAgICBwbGFjZW1lbnQgPSBfb3B0aW9ucyRwbGFjZW1lbnQgPT09IHZvaWQgMCA/IHN0YXRlLnBsYWNlbWVudCA6IF9vcHRpb25zJHBsYWNlbWVudCxcbiAgICAgIF9vcHRpb25zJHN0cmF0ZWd5ID0gX29wdGlvbnMuc3RyYXRlZ3ksXG4gICAgICBzdHJhdGVneSA9IF9vcHRpb25zJHN0cmF0ZWd5ID09PSB2b2lkIDAgPyBzdGF0ZS5zdHJhdGVneSA6IF9vcHRpb25zJHN0cmF0ZWd5LFxuICAgICAgX29wdGlvbnMkYm91bmRhcnkgPSBfb3B0aW9ucy5ib3VuZGFyeSxcbiAgICAgIGJvdW5kYXJ5ID0gX29wdGlvbnMkYm91bmRhcnkgPT09IHZvaWQgMCA/IGNsaXBwaW5nUGFyZW50cyA6IF9vcHRpb25zJGJvdW5kYXJ5LFxuICAgICAgX29wdGlvbnMkcm9vdEJvdW5kYXJ5ID0gX29wdGlvbnMucm9vdEJvdW5kYXJ5LFxuICAgICAgcm9vdEJvdW5kYXJ5ID0gX29wdGlvbnMkcm9vdEJvdW5kYXJ5ID09PSB2b2lkIDAgPyB2aWV3cG9ydCA6IF9vcHRpb25zJHJvb3RCb3VuZGFyeSxcbiAgICAgIF9vcHRpb25zJGVsZW1lbnRDb250ZSA9IF9vcHRpb25zLmVsZW1lbnRDb250ZXh0LFxuICAgICAgZWxlbWVudENvbnRleHQgPSBfb3B0aW9ucyRlbGVtZW50Q29udGUgPT09IHZvaWQgMCA/IHBvcHBlciA6IF9vcHRpb25zJGVsZW1lbnRDb250ZSxcbiAgICAgIF9vcHRpb25zJGFsdEJvdW5kYXJ5ID0gX29wdGlvbnMuYWx0Qm91bmRhcnksXG4gICAgICBhbHRCb3VuZGFyeSA9IF9vcHRpb25zJGFsdEJvdW5kYXJ5ID09PSB2b2lkIDAgPyBmYWxzZSA6IF9vcHRpb25zJGFsdEJvdW5kYXJ5LFxuICAgICAgX29wdGlvbnMkcGFkZGluZyA9IF9vcHRpb25zLnBhZGRpbmcsXG4gICAgICBwYWRkaW5nID0gX29wdGlvbnMkcGFkZGluZyA9PT0gdm9pZCAwID8gMCA6IF9vcHRpb25zJHBhZGRpbmc7XG4gIHZhciBwYWRkaW5nT2JqZWN0ID0gbWVyZ2VQYWRkaW5nT2JqZWN0KHR5cGVvZiBwYWRkaW5nICE9PSAnbnVtYmVyJyA/IHBhZGRpbmcgOiBleHBhbmRUb0hhc2hNYXAocGFkZGluZywgYmFzZVBsYWNlbWVudHMpKTtcbiAgdmFyIGFsdENvbnRleHQgPSBlbGVtZW50Q29udGV4dCA9PT0gcG9wcGVyID8gcmVmZXJlbmNlIDogcG9wcGVyO1xuICB2YXIgcG9wcGVyUmVjdCA9IHN0YXRlLnJlY3RzLnBvcHBlcjtcbiAgdmFyIGVsZW1lbnQgPSBzdGF0ZS5lbGVtZW50c1thbHRCb3VuZGFyeSA/IGFsdENvbnRleHQgOiBlbGVtZW50Q29udGV4dF07XG4gIHZhciBjbGlwcGluZ0NsaWVudFJlY3QgPSBnZXRDbGlwcGluZ1JlY3QoaXNFbGVtZW50KGVsZW1lbnQpID8gZWxlbWVudCA6IGVsZW1lbnQuY29udGV4dEVsZW1lbnQgfHwgZ2V0RG9jdW1lbnRFbGVtZW50KHN0YXRlLmVsZW1lbnRzLnBvcHBlciksIGJvdW5kYXJ5LCByb290Qm91bmRhcnksIHN0cmF0ZWd5KTtcbiAgdmFyIHJlZmVyZW5jZUNsaWVudFJlY3QgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3Qoc3RhdGUuZWxlbWVudHMucmVmZXJlbmNlKTtcbiAgdmFyIHBvcHBlck9mZnNldHMgPSBjb21wdXRlT2Zmc2V0cyh7XG4gICAgcmVmZXJlbmNlOiByZWZlcmVuY2VDbGllbnRSZWN0LFxuICAgIGVsZW1lbnQ6IHBvcHBlclJlY3QsXG4gICAgc3RyYXRlZ3k6ICdhYnNvbHV0ZScsXG4gICAgcGxhY2VtZW50OiBwbGFjZW1lbnRcbiAgfSk7XG4gIHZhciBwb3BwZXJDbGllbnRSZWN0ID0gcmVjdFRvQ2xpZW50UmVjdChPYmplY3QuYXNzaWduKHt9LCBwb3BwZXJSZWN0LCBwb3BwZXJPZmZzZXRzKSk7XG4gIHZhciBlbGVtZW50Q2xpZW50UmVjdCA9IGVsZW1lbnRDb250ZXh0ID09PSBwb3BwZXIgPyBwb3BwZXJDbGllbnRSZWN0IDogcmVmZXJlbmNlQ2xpZW50UmVjdDsgLy8gcG9zaXRpdmUgPSBvdmVyZmxvd2luZyB0aGUgY2xpcHBpbmcgcmVjdFxuICAvLyAwIG9yIG5lZ2F0aXZlID0gd2l0aGluIHRoZSBjbGlwcGluZyByZWN0XG5cbiAgdmFyIG92ZXJmbG93T2Zmc2V0cyA9IHtcbiAgICB0b3A6IGNsaXBwaW5nQ2xpZW50UmVjdC50b3AgLSBlbGVtZW50Q2xpZW50UmVjdC50b3AgKyBwYWRkaW5nT2JqZWN0LnRvcCxcbiAgICBib3R0b206IGVsZW1lbnRDbGllbnRSZWN0LmJvdHRvbSAtIGNsaXBwaW5nQ2xpZW50UmVjdC5ib3R0b20gKyBwYWRkaW5nT2JqZWN0LmJvdHRvbSxcbiAgICBsZWZ0OiBjbGlwcGluZ0NsaWVudFJlY3QubGVmdCAtIGVsZW1lbnRDbGllbnRSZWN0LmxlZnQgKyBwYWRkaW5nT2JqZWN0LmxlZnQsXG4gICAgcmlnaHQ6IGVsZW1lbnRDbGllbnRSZWN0LnJpZ2h0IC0gY2xpcHBpbmdDbGllbnRSZWN0LnJpZ2h0ICsgcGFkZGluZ09iamVjdC5yaWdodFxuICB9O1xuICB2YXIgb2Zmc2V0RGF0YSA9IHN0YXRlLm1vZGlmaWVyc0RhdGEub2Zmc2V0OyAvLyBPZmZzZXRzIGNhbiBiZSBhcHBsaWVkIG9ubHkgdG8gdGhlIHBvcHBlciBlbGVtZW50XG5cbiAgaWYgKGVsZW1lbnRDb250ZXh0ID09PSBwb3BwZXIgJiYgb2Zmc2V0RGF0YSkge1xuICAgIHZhciBvZmZzZXQgPSBvZmZzZXREYXRhW3BsYWNlbWVudF07XG4gICAgT2JqZWN0LmtleXMob3ZlcmZsb3dPZmZzZXRzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIHZhciBtdWx0aXBseSA9IFtyaWdodCwgYm90dG9tXS5pbmRleE9mKGtleSkgPj0gMCA/IDEgOiAtMTtcbiAgICAgIHZhciBheGlzID0gW3RvcCwgYm90dG9tXS5pbmRleE9mKGtleSkgPj0gMCA/ICd5JyA6ICd4JztcbiAgICAgIG92ZXJmbG93T2Zmc2V0c1trZXldICs9IG9mZnNldFtheGlzXSAqIG11bHRpcGx5O1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIG92ZXJmbG93T2Zmc2V0cztcbn0iLCAiaW1wb3J0IGdldFZhcmlhdGlvbiBmcm9tIFwiLi9nZXRWYXJpYXRpb24uanNcIjtcbmltcG9ydCB7IHZhcmlhdGlvblBsYWNlbWVudHMsIGJhc2VQbGFjZW1lbnRzLCBwbGFjZW1lbnRzIGFzIGFsbFBsYWNlbWVudHMgfSBmcm9tIFwiLi4vZW51bXMuanNcIjtcbmltcG9ydCBkZXRlY3RPdmVyZmxvdyBmcm9tIFwiLi9kZXRlY3RPdmVyZmxvdy5qc1wiO1xuaW1wb3J0IGdldEJhc2VQbGFjZW1lbnQgZnJvbSBcIi4vZ2V0QmFzZVBsYWNlbWVudC5qc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29tcHV0ZUF1dG9QbGFjZW1lbnQoc3RhdGUsIG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIHZhciBfb3B0aW9ucyA9IG9wdGlvbnMsXG4gICAgICBwbGFjZW1lbnQgPSBfb3B0aW9ucy5wbGFjZW1lbnQsXG4gICAgICBib3VuZGFyeSA9IF9vcHRpb25zLmJvdW5kYXJ5LFxuICAgICAgcm9vdEJvdW5kYXJ5ID0gX29wdGlvbnMucm9vdEJvdW5kYXJ5LFxuICAgICAgcGFkZGluZyA9IF9vcHRpb25zLnBhZGRpbmcsXG4gICAgICBmbGlwVmFyaWF0aW9ucyA9IF9vcHRpb25zLmZsaXBWYXJpYXRpb25zLFxuICAgICAgX29wdGlvbnMkYWxsb3dlZEF1dG9QID0gX29wdGlvbnMuYWxsb3dlZEF1dG9QbGFjZW1lbnRzLFxuICAgICAgYWxsb3dlZEF1dG9QbGFjZW1lbnRzID0gX29wdGlvbnMkYWxsb3dlZEF1dG9QID09PSB2b2lkIDAgPyBhbGxQbGFjZW1lbnRzIDogX29wdGlvbnMkYWxsb3dlZEF1dG9QO1xuICB2YXIgdmFyaWF0aW9uID0gZ2V0VmFyaWF0aW9uKHBsYWNlbWVudCk7XG4gIHZhciBwbGFjZW1lbnRzID0gdmFyaWF0aW9uID8gZmxpcFZhcmlhdGlvbnMgPyB2YXJpYXRpb25QbGFjZW1lbnRzIDogdmFyaWF0aW9uUGxhY2VtZW50cy5maWx0ZXIoZnVuY3Rpb24gKHBsYWNlbWVudCkge1xuICAgIHJldHVybiBnZXRWYXJpYXRpb24ocGxhY2VtZW50KSA9PT0gdmFyaWF0aW9uO1xuICB9KSA6IGJhc2VQbGFjZW1lbnRzO1xuICB2YXIgYWxsb3dlZFBsYWNlbWVudHMgPSBwbGFjZW1lbnRzLmZpbHRlcihmdW5jdGlvbiAocGxhY2VtZW50KSB7XG4gICAgcmV0dXJuIGFsbG93ZWRBdXRvUGxhY2VtZW50cy5pbmRleE9mKHBsYWNlbWVudCkgPj0gMDtcbiAgfSk7XG5cbiAgaWYgKGFsbG93ZWRQbGFjZW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgIGFsbG93ZWRQbGFjZW1lbnRzID0gcGxhY2VtZW50cztcblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoWydQb3BwZXI6IFRoZSBgYWxsb3dlZEF1dG9QbGFjZW1lbnRzYCBvcHRpb24gZGlkIG5vdCBhbGxvdyBhbnknLCAncGxhY2VtZW50cy4gRW5zdXJlIHRoZSBgcGxhY2VtZW50YCBvcHRpb24gbWF0Y2hlcyB0aGUgdmFyaWF0aW9uJywgJ29mIHRoZSBhbGxvd2VkIHBsYWNlbWVudHMuJywgJ0ZvciBleGFtcGxlLCBcImF1dG9cIiBjYW5ub3QgYmUgdXNlZCB0byBhbGxvdyBcImJvdHRvbS1zdGFydFwiLicsICdVc2UgXCJhdXRvLXN0YXJ0XCIgaW5zdGVhZC4nXS5qb2luKCcgJykpO1xuICAgIH1cbiAgfSAvLyAkRmxvd0ZpeE1lW2luY29tcGF0aWJsZS10eXBlXTogRmxvdyBzZWVtcyB0byBoYXZlIHByb2JsZW1zIHdpdGggdHdvIGFycmF5IHVuaW9ucy4uLlxuXG5cbiAgdmFyIG92ZXJmbG93cyA9IGFsbG93ZWRQbGFjZW1lbnRzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBwbGFjZW1lbnQpIHtcbiAgICBhY2NbcGxhY2VtZW50XSA9IGRldGVjdE92ZXJmbG93KHN0YXRlLCB7XG4gICAgICBwbGFjZW1lbnQ6IHBsYWNlbWVudCxcbiAgICAgIGJvdW5kYXJ5OiBib3VuZGFyeSxcbiAgICAgIHJvb3RCb3VuZGFyeTogcm9vdEJvdW5kYXJ5LFxuICAgICAgcGFkZGluZzogcGFkZGluZ1xuICAgIH0pW2dldEJhc2VQbGFjZW1lbnQocGxhY2VtZW50KV07XG4gICAgcmV0dXJuIGFjYztcbiAgfSwge30pO1xuICByZXR1cm4gT2JqZWN0LmtleXMob3ZlcmZsb3dzKS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIG92ZXJmbG93c1thXSAtIG92ZXJmbG93c1tiXTtcbiAgfSk7XG59IiwgImltcG9ydCBnZXRPcHBvc2l0ZVBsYWNlbWVudCBmcm9tIFwiLi4vdXRpbHMvZ2V0T3Bwb3NpdGVQbGFjZW1lbnQuanNcIjtcbmltcG9ydCBnZXRCYXNlUGxhY2VtZW50IGZyb20gXCIuLi91dGlscy9nZXRCYXNlUGxhY2VtZW50LmpzXCI7XG5pbXBvcnQgZ2V0T3Bwb3NpdGVWYXJpYXRpb25QbGFjZW1lbnQgZnJvbSBcIi4uL3V0aWxzL2dldE9wcG9zaXRlVmFyaWF0aW9uUGxhY2VtZW50LmpzXCI7XG5pbXBvcnQgZGV0ZWN0T3ZlcmZsb3cgZnJvbSBcIi4uL3V0aWxzL2RldGVjdE92ZXJmbG93LmpzXCI7XG5pbXBvcnQgY29tcHV0ZUF1dG9QbGFjZW1lbnQgZnJvbSBcIi4uL3V0aWxzL2NvbXB1dGVBdXRvUGxhY2VtZW50LmpzXCI7XG5pbXBvcnQgeyBib3R0b20sIHRvcCwgc3RhcnQsIHJpZ2h0LCBsZWZ0LCBhdXRvIH0gZnJvbSBcIi4uL2VudW1zLmpzXCI7XG5pbXBvcnQgZ2V0VmFyaWF0aW9uIGZyb20gXCIuLi91dGlscy9nZXRWYXJpYXRpb24uanNcIjsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5mdW5jdGlvbiBnZXRFeHBhbmRlZEZhbGxiYWNrUGxhY2VtZW50cyhwbGFjZW1lbnQpIHtcbiAgaWYgKGdldEJhc2VQbGFjZW1lbnQocGxhY2VtZW50KSA9PT0gYXV0bykge1xuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIHZhciBvcHBvc2l0ZVBsYWNlbWVudCA9IGdldE9wcG9zaXRlUGxhY2VtZW50KHBsYWNlbWVudCk7XG4gIHJldHVybiBbZ2V0T3Bwb3NpdGVWYXJpYXRpb25QbGFjZW1lbnQocGxhY2VtZW50KSwgb3Bwb3NpdGVQbGFjZW1lbnQsIGdldE9wcG9zaXRlVmFyaWF0aW9uUGxhY2VtZW50KG9wcG9zaXRlUGxhY2VtZW50KV07XG59XG5cbmZ1bmN0aW9uIGZsaXAoX3JlZikge1xuICB2YXIgc3RhdGUgPSBfcmVmLnN0YXRlLFxuICAgICAgb3B0aW9ucyA9IF9yZWYub3B0aW9ucyxcbiAgICAgIG5hbWUgPSBfcmVmLm5hbWU7XG5cbiAgaWYgKHN0YXRlLm1vZGlmaWVyc0RhdGFbbmFtZV0uX3NraXApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICB2YXIgX29wdGlvbnMkbWFpbkF4aXMgPSBvcHRpb25zLm1haW5BeGlzLFxuICAgICAgY2hlY2tNYWluQXhpcyA9IF9vcHRpb25zJG1haW5BeGlzID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkbWFpbkF4aXMsXG4gICAgICBfb3B0aW9ucyRhbHRBeGlzID0gb3B0aW9ucy5hbHRBeGlzLFxuICAgICAgY2hlY2tBbHRBeGlzID0gX29wdGlvbnMkYWx0QXhpcyA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJGFsdEF4aXMsXG4gICAgICBzcGVjaWZpZWRGYWxsYmFja1BsYWNlbWVudHMgPSBvcHRpb25zLmZhbGxiYWNrUGxhY2VtZW50cyxcbiAgICAgIHBhZGRpbmcgPSBvcHRpb25zLnBhZGRpbmcsXG4gICAgICBib3VuZGFyeSA9IG9wdGlvbnMuYm91bmRhcnksXG4gICAgICByb290Qm91bmRhcnkgPSBvcHRpb25zLnJvb3RCb3VuZGFyeSxcbiAgICAgIGFsdEJvdW5kYXJ5ID0gb3B0aW9ucy5hbHRCb3VuZGFyeSxcbiAgICAgIF9vcHRpb25zJGZsaXBWYXJpYXRpbyA9IG9wdGlvbnMuZmxpcFZhcmlhdGlvbnMsXG4gICAgICBmbGlwVmFyaWF0aW9ucyA9IF9vcHRpb25zJGZsaXBWYXJpYXRpbyA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJGZsaXBWYXJpYXRpbyxcbiAgICAgIGFsbG93ZWRBdXRvUGxhY2VtZW50cyA9IG9wdGlvbnMuYWxsb3dlZEF1dG9QbGFjZW1lbnRzO1xuICB2YXIgcHJlZmVycmVkUGxhY2VtZW50ID0gc3RhdGUub3B0aW9ucy5wbGFjZW1lbnQ7XG4gIHZhciBiYXNlUGxhY2VtZW50ID0gZ2V0QmFzZVBsYWNlbWVudChwcmVmZXJyZWRQbGFjZW1lbnQpO1xuICB2YXIgaXNCYXNlUGxhY2VtZW50ID0gYmFzZVBsYWNlbWVudCA9PT0gcHJlZmVycmVkUGxhY2VtZW50O1xuICB2YXIgZmFsbGJhY2tQbGFjZW1lbnRzID0gc3BlY2lmaWVkRmFsbGJhY2tQbGFjZW1lbnRzIHx8IChpc0Jhc2VQbGFjZW1lbnQgfHwgIWZsaXBWYXJpYXRpb25zID8gW2dldE9wcG9zaXRlUGxhY2VtZW50KHByZWZlcnJlZFBsYWNlbWVudCldIDogZ2V0RXhwYW5kZWRGYWxsYmFja1BsYWNlbWVudHMocHJlZmVycmVkUGxhY2VtZW50KSk7XG4gIHZhciBwbGFjZW1lbnRzID0gW3ByZWZlcnJlZFBsYWNlbWVudF0uY29uY2F0KGZhbGxiYWNrUGxhY2VtZW50cykucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHBsYWNlbWVudCkge1xuICAgIHJldHVybiBhY2MuY29uY2F0KGdldEJhc2VQbGFjZW1lbnQocGxhY2VtZW50KSA9PT0gYXV0byA/IGNvbXB1dGVBdXRvUGxhY2VtZW50KHN0YXRlLCB7XG4gICAgICBwbGFjZW1lbnQ6IHBsYWNlbWVudCxcbiAgICAgIGJvdW5kYXJ5OiBib3VuZGFyeSxcbiAgICAgIHJvb3RCb3VuZGFyeTogcm9vdEJvdW5kYXJ5LFxuICAgICAgcGFkZGluZzogcGFkZGluZyxcbiAgICAgIGZsaXBWYXJpYXRpb25zOiBmbGlwVmFyaWF0aW9ucyxcbiAgICAgIGFsbG93ZWRBdXRvUGxhY2VtZW50czogYWxsb3dlZEF1dG9QbGFjZW1lbnRzXG4gICAgfSkgOiBwbGFjZW1lbnQpO1xuICB9LCBbXSk7XG4gIHZhciByZWZlcmVuY2VSZWN0ID0gc3RhdGUucmVjdHMucmVmZXJlbmNlO1xuICB2YXIgcG9wcGVyUmVjdCA9IHN0YXRlLnJlY3RzLnBvcHBlcjtcbiAgdmFyIGNoZWNrc01hcCA9IG5ldyBNYXAoKTtcbiAgdmFyIG1ha2VGYWxsYmFja0NoZWNrcyA9IHRydWU7XG4gIHZhciBmaXJzdEZpdHRpbmdQbGFjZW1lbnQgPSBwbGFjZW1lbnRzWzBdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcGxhY2VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBwbGFjZW1lbnQgPSBwbGFjZW1lbnRzW2ldO1xuXG4gICAgdmFyIF9iYXNlUGxhY2VtZW50ID0gZ2V0QmFzZVBsYWNlbWVudChwbGFjZW1lbnQpO1xuXG4gICAgdmFyIGlzU3RhcnRWYXJpYXRpb24gPSBnZXRWYXJpYXRpb24ocGxhY2VtZW50KSA9PT0gc3RhcnQ7XG4gICAgdmFyIGlzVmVydGljYWwgPSBbdG9wLCBib3R0b21dLmluZGV4T2YoX2Jhc2VQbGFjZW1lbnQpID49IDA7XG4gICAgdmFyIGxlbiA9IGlzVmVydGljYWwgPyAnd2lkdGgnIDogJ2hlaWdodCc7XG4gICAgdmFyIG92ZXJmbG93ID0gZGV0ZWN0T3ZlcmZsb3coc3RhdGUsIHtcbiAgICAgIHBsYWNlbWVudDogcGxhY2VtZW50LFxuICAgICAgYm91bmRhcnk6IGJvdW5kYXJ5LFxuICAgICAgcm9vdEJvdW5kYXJ5OiByb290Qm91bmRhcnksXG4gICAgICBhbHRCb3VuZGFyeTogYWx0Qm91bmRhcnksXG4gICAgICBwYWRkaW5nOiBwYWRkaW5nXG4gICAgfSk7XG4gICAgdmFyIG1haW5WYXJpYXRpb25TaWRlID0gaXNWZXJ0aWNhbCA/IGlzU3RhcnRWYXJpYXRpb24gPyByaWdodCA6IGxlZnQgOiBpc1N0YXJ0VmFyaWF0aW9uID8gYm90dG9tIDogdG9wO1xuXG4gICAgaWYgKHJlZmVyZW5jZVJlY3RbbGVuXSA+IHBvcHBlclJlY3RbbGVuXSkge1xuICAgICAgbWFpblZhcmlhdGlvblNpZGUgPSBnZXRPcHBvc2l0ZVBsYWNlbWVudChtYWluVmFyaWF0aW9uU2lkZSk7XG4gICAgfVxuXG4gICAgdmFyIGFsdFZhcmlhdGlvblNpZGUgPSBnZXRPcHBvc2l0ZVBsYWNlbWVudChtYWluVmFyaWF0aW9uU2lkZSk7XG4gICAgdmFyIGNoZWNrcyA9IFtdO1xuXG4gICAgaWYgKGNoZWNrTWFpbkF4aXMpIHtcbiAgICAgIGNoZWNrcy5wdXNoKG92ZXJmbG93W19iYXNlUGxhY2VtZW50XSA8PSAwKTtcbiAgICB9XG5cbiAgICBpZiAoY2hlY2tBbHRBeGlzKSB7XG4gICAgICBjaGVja3MucHVzaChvdmVyZmxvd1ttYWluVmFyaWF0aW9uU2lkZV0gPD0gMCwgb3ZlcmZsb3dbYWx0VmFyaWF0aW9uU2lkZV0gPD0gMCk7XG4gICAgfVxuXG4gICAgaWYgKGNoZWNrcy5ldmVyeShmdW5jdGlvbiAoY2hlY2spIHtcbiAgICAgIHJldHVybiBjaGVjaztcbiAgICB9KSkge1xuICAgICAgZmlyc3RGaXR0aW5nUGxhY2VtZW50ID0gcGxhY2VtZW50O1xuICAgICAgbWFrZUZhbGxiYWNrQ2hlY2tzID0gZmFsc2U7XG4gICAgICBicmVhaztcbiAgICB9XG5cbiAgICBjaGVja3NNYXAuc2V0KHBsYWNlbWVudCwgY2hlY2tzKTtcbiAgfVxuXG4gIGlmIChtYWtlRmFsbGJhY2tDaGVja3MpIHtcbiAgICAvLyBgMmAgbWF5IGJlIGRlc2lyZWQgaW4gc29tZSBjYXNlcyBcdTIwMTMgcmVzZWFyY2ggbGF0ZXJcbiAgICB2YXIgbnVtYmVyT2ZDaGVja3MgPSBmbGlwVmFyaWF0aW9ucyA/IDMgOiAxO1xuXG4gICAgdmFyIF9sb29wID0gZnVuY3Rpb24gX2xvb3AoX2kpIHtcbiAgICAgIHZhciBmaXR0aW5nUGxhY2VtZW50ID0gcGxhY2VtZW50cy5maW5kKGZ1bmN0aW9uIChwbGFjZW1lbnQpIHtcbiAgICAgICAgdmFyIGNoZWNrcyA9IGNoZWNrc01hcC5nZXQocGxhY2VtZW50KTtcblxuICAgICAgICBpZiAoY2hlY2tzKSB7XG4gICAgICAgICAgcmV0dXJuIGNoZWNrcy5zbGljZSgwLCBfaSkuZXZlcnkoZnVuY3Rpb24gKGNoZWNrKSB7XG4gICAgICAgICAgICByZXR1cm4gY2hlY2s7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBpZiAoZml0dGluZ1BsYWNlbWVudCkge1xuICAgICAgICBmaXJzdEZpdHRpbmdQbGFjZW1lbnQgPSBmaXR0aW5nUGxhY2VtZW50O1xuICAgICAgICByZXR1cm4gXCJicmVha1wiO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBmb3IgKHZhciBfaSA9IG51bWJlck9mQ2hlY2tzOyBfaSA+IDA7IF9pLS0pIHtcbiAgICAgIHZhciBfcmV0ID0gX2xvb3AoX2kpO1xuXG4gICAgICBpZiAoX3JldCA9PT0gXCJicmVha1wiKSBicmVhaztcbiAgICB9XG4gIH1cblxuICBpZiAoc3RhdGUucGxhY2VtZW50ICE9PSBmaXJzdEZpdHRpbmdQbGFjZW1lbnQpIHtcbiAgICBzdGF0ZS5tb2RpZmllcnNEYXRhW25hbWVdLl9za2lwID0gdHJ1ZTtcbiAgICBzdGF0ZS5wbGFjZW1lbnQgPSBmaXJzdEZpdHRpbmdQbGFjZW1lbnQ7XG4gICAgc3RhdGUucmVzZXQgPSB0cnVlO1xuICB9XG59IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdmbGlwJyxcbiAgZW5hYmxlZDogdHJ1ZSxcbiAgcGhhc2U6ICdtYWluJyxcbiAgZm46IGZsaXAsXG4gIHJlcXVpcmVzSWZFeGlzdHM6IFsnb2Zmc2V0J10sXG4gIGRhdGE6IHtcbiAgICBfc2tpcDogZmFsc2VcbiAgfVxufTsiLCAiaW1wb3J0IHsgdG9wLCBib3R0b20sIGxlZnQsIHJpZ2h0IH0gZnJvbSBcIi4uL2VudW1zLmpzXCI7XG5pbXBvcnQgZGV0ZWN0T3ZlcmZsb3cgZnJvbSBcIi4uL3V0aWxzL2RldGVjdE92ZXJmbG93LmpzXCI7XG5cbmZ1bmN0aW9uIGdldFNpZGVPZmZzZXRzKG92ZXJmbG93LCByZWN0LCBwcmV2ZW50ZWRPZmZzZXRzKSB7XG4gIGlmIChwcmV2ZW50ZWRPZmZzZXRzID09PSB2b2lkIDApIHtcbiAgICBwcmV2ZW50ZWRPZmZzZXRzID0ge1xuICAgICAgeDogMCxcbiAgICAgIHk6IDBcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB0b3A6IG92ZXJmbG93LnRvcCAtIHJlY3QuaGVpZ2h0IC0gcHJldmVudGVkT2Zmc2V0cy55LFxuICAgIHJpZ2h0OiBvdmVyZmxvdy5yaWdodCAtIHJlY3Qud2lkdGggKyBwcmV2ZW50ZWRPZmZzZXRzLngsXG4gICAgYm90dG9tOiBvdmVyZmxvdy5ib3R0b20gLSByZWN0LmhlaWdodCArIHByZXZlbnRlZE9mZnNldHMueSxcbiAgICBsZWZ0OiBvdmVyZmxvdy5sZWZ0IC0gcmVjdC53aWR0aCAtIHByZXZlbnRlZE9mZnNldHMueFxuICB9O1xufVxuXG5mdW5jdGlvbiBpc0FueVNpZGVGdWxseUNsaXBwZWQob3ZlcmZsb3cpIHtcbiAgcmV0dXJuIFt0b3AsIHJpZ2h0LCBib3R0b20sIGxlZnRdLnNvbWUoZnVuY3Rpb24gKHNpZGUpIHtcbiAgICByZXR1cm4gb3ZlcmZsb3dbc2lkZV0gPj0gMDtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGhpZGUoX3JlZikge1xuICB2YXIgc3RhdGUgPSBfcmVmLnN0YXRlLFxuICAgICAgbmFtZSA9IF9yZWYubmFtZTtcbiAgdmFyIHJlZmVyZW5jZVJlY3QgPSBzdGF0ZS5yZWN0cy5yZWZlcmVuY2U7XG4gIHZhciBwb3BwZXJSZWN0ID0gc3RhdGUucmVjdHMucG9wcGVyO1xuICB2YXIgcHJldmVudGVkT2Zmc2V0cyA9IHN0YXRlLm1vZGlmaWVyc0RhdGEucHJldmVudE92ZXJmbG93O1xuICB2YXIgcmVmZXJlbmNlT3ZlcmZsb3cgPSBkZXRlY3RPdmVyZmxvdyhzdGF0ZSwge1xuICAgIGVsZW1lbnRDb250ZXh0OiAncmVmZXJlbmNlJ1xuICB9KTtcbiAgdmFyIHBvcHBlckFsdE92ZXJmbG93ID0gZGV0ZWN0T3ZlcmZsb3coc3RhdGUsIHtcbiAgICBhbHRCb3VuZGFyeTogdHJ1ZVxuICB9KTtcbiAgdmFyIHJlZmVyZW5jZUNsaXBwaW5nT2Zmc2V0cyA9IGdldFNpZGVPZmZzZXRzKHJlZmVyZW5jZU92ZXJmbG93LCByZWZlcmVuY2VSZWN0KTtcbiAgdmFyIHBvcHBlckVzY2FwZU9mZnNldHMgPSBnZXRTaWRlT2Zmc2V0cyhwb3BwZXJBbHRPdmVyZmxvdywgcG9wcGVyUmVjdCwgcHJldmVudGVkT2Zmc2V0cyk7XG4gIHZhciBpc1JlZmVyZW5jZUhpZGRlbiA9IGlzQW55U2lkZUZ1bGx5Q2xpcHBlZChyZWZlcmVuY2VDbGlwcGluZ09mZnNldHMpO1xuICB2YXIgaGFzUG9wcGVyRXNjYXBlZCA9IGlzQW55U2lkZUZ1bGx5Q2xpcHBlZChwb3BwZXJFc2NhcGVPZmZzZXRzKTtcbiAgc3RhdGUubW9kaWZpZXJzRGF0YVtuYW1lXSA9IHtcbiAgICByZWZlcmVuY2VDbGlwcGluZ09mZnNldHM6IHJlZmVyZW5jZUNsaXBwaW5nT2Zmc2V0cyxcbiAgICBwb3BwZXJFc2NhcGVPZmZzZXRzOiBwb3BwZXJFc2NhcGVPZmZzZXRzLFxuICAgIGlzUmVmZXJlbmNlSGlkZGVuOiBpc1JlZmVyZW5jZUhpZGRlbixcbiAgICBoYXNQb3BwZXJFc2NhcGVkOiBoYXNQb3BwZXJFc2NhcGVkXG4gIH07XG4gIHN0YXRlLmF0dHJpYnV0ZXMucG9wcGVyID0gT2JqZWN0LmFzc2lnbih7fSwgc3RhdGUuYXR0cmlidXRlcy5wb3BwZXIsIHtcbiAgICAnZGF0YS1wb3BwZXItcmVmZXJlbmNlLWhpZGRlbic6IGlzUmVmZXJlbmNlSGlkZGVuLFxuICAgICdkYXRhLXBvcHBlci1lc2NhcGVkJzogaGFzUG9wcGVyRXNjYXBlZFxuICB9KTtcbn0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ2hpZGUnLFxuICBlbmFibGVkOiB0cnVlLFxuICBwaGFzZTogJ21haW4nLFxuICByZXF1aXJlc0lmRXhpc3RzOiBbJ3ByZXZlbnRPdmVyZmxvdyddLFxuICBmbjogaGlkZVxufTsiLCAiaW1wb3J0IGdldEJhc2VQbGFjZW1lbnQgZnJvbSBcIi4uL3V0aWxzL2dldEJhc2VQbGFjZW1lbnQuanNcIjtcbmltcG9ydCB7IHRvcCwgbGVmdCwgcmlnaHQsIHBsYWNlbWVudHMgfSBmcm9tIFwiLi4vZW51bXMuanNcIjsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5leHBvcnQgZnVuY3Rpb24gZGlzdGFuY2VBbmRTa2lkZGluZ1RvWFkocGxhY2VtZW50LCByZWN0cywgb2Zmc2V0KSB7XG4gIHZhciBiYXNlUGxhY2VtZW50ID0gZ2V0QmFzZVBsYWNlbWVudChwbGFjZW1lbnQpO1xuICB2YXIgaW52ZXJ0RGlzdGFuY2UgPSBbbGVmdCwgdG9wXS5pbmRleE9mKGJhc2VQbGFjZW1lbnQpID49IDAgPyAtMSA6IDE7XG5cbiAgdmFyIF9yZWYgPSB0eXBlb2Ygb2Zmc2V0ID09PSAnZnVuY3Rpb24nID8gb2Zmc2V0KE9iamVjdC5hc3NpZ24oe30sIHJlY3RzLCB7XG4gICAgcGxhY2VtZW50OiBwbGFjZW1lbnRcbiAgfSkpIDogb2Zmc2V0LFxuICAgICAgc2tpZGRpbmcgPSBfcmVmWzBdLFxuICAgICAgZGlzdGFuY2UgPSBfcmVmWzFdO1xuXG4gIHNraWRkaW5nID0gc2tpZGRpbmcgfHwgMDtcbiAgZGlzdGFuY2UgPSAoZGlzdGFuY2UgfHwgMCkgKiBpbnZlcnREaXN0YW5jZTtcbiAgcmV0dXJuIFtsZWZ0LCByaWdodF0uaW5kZXhPZihiYXNlUGxhY2VtZW50KSA+PSAwID8ge1xuICAgIHg6IGRpc3RhbmNlLFxuICAgIHk6IHNraWRkaW5nXG4gIH0gOiB7XG4gICAgeDogc2tpZGRpbmcsXG4gICAgeTogZGlzdGFuY2VcbiAgfTtcbn1cblxuZnVuY3Rpb24gb2Zmc2V0KF9yZWYyKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYyLnN0YXRlLFxuICAgICAgb3B0aW9ucyA9IF9yZWYyLm9wdGlvbnMsXG4gICAgICBuYW1lID0gX3JlZjIubmFtZTtcbiAgdmFyIF9vcHRpb25zJG9mZnNldCA9IG9wdGlvbnMub2Zmc2V0LFxuICAgICAgb2Zmc2V0ID0gX29wdGlvbnMkb2Zmc2V0ID09PSB2b2lkIDAgPyBbMCwgMF0gOiBfb3B0aW9ucyRvZmZzZXQ7XG4gIHZhciBkYXRhID0gcGxhY2VtZW50cy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgcGxhY2VtZW50KSB7XG4gICAgYWNjW3BsYWNlbWVudF0gPSBkaXN0YW5jZUFuZFNraWRkaW5nVG9YWShwbGFjZW1lbnQsIHN0YXRlLnJlY3RzLCBvZmZzZXQpO1xuICAgIHJldHVybiBhY2M7XG4gIH0sIHt9KTtcbiAgdmFyIF9kYXRhJHN0YXRlJHBsYWNlbWVudCA9IGRhdGFbc3RhdGUucGxhY2VtZW50XSxcbiAgICAgIHggPSBfZGF0YSRzdGF0ZSRwbGFjZW1lbnQueCxcbiAgICAgIHkgPSBfZGF0YSRzdGF0ZSRwbGFjZW1lbnQueTtcblxuICBpZiAoc3RhdGUubW9kaWZpZXJzRGF0YS5wb3BwZXJPZmZzZXRzICE9IG51bGwpIHtcbiAgICBzdGF0ZS5tb2RpZmllcnNEYXRhLnBvcHBlck9mZnNldHMueCArPSB4O1xuICAgIHN0YXRlLm1vZGlmaWVyc0RhdGEucG9wcGVyT2Zmc2V0cy55ICs9IHk7XG4gIH1cblxuICBzdGF0ZS5tb2RpZmllcnNEYXRhW25hbWVdID0gZGF0YTtcbn0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ29mZnNldCcsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAnbWFpbicsXG4gIHJlcXVpcmVzOiBbJ3BvcHBlck9mZnNldHMnXSxcbiAgZm46IG9mZnNldFxufTsiLCAiaW1wb3J0IGNvbXB1dGVPZmZzZXRzIGZyb20gXCIuLi91dGlscy9jb21wdXRlT2Zmc2V0cy5qc1wiO1xuXG5mdW5jdGlvbiBwb3BwZXJPZmZzZXRzKF9yZWYpIHtcbiAgdmFyIHN0YXRlID0gX3JlZi5zdGF0ZSxcbiAgICAgIG5hbWUgPSBfcmVmLm5hbWU7XG4gIC8vIE9mZnNldHMgYXJlIHRoZSBhY3R1YWwgcG9zaXRpb24gdGhlIHBvcHBlciBuZWVkcyB0byBoYXZlIHRvIGJlXG4gIC8vIHByb3Blcmx5IHBvc2l0aW9uZWQgbmVhciBpdHMgcmVmZXJlbmNlIGVsZW1lbnRcbiAgLy8gVGhpcyBpcyB0aGUgbW9zdCBiYXNpYyBwbGFjZW1lbnQsIGFuZCB3aWxsIGJlIGFkanVzdGVkIGJ5XG4gIC8vIHRoZSBtb2RpZmllcnMgaW4gdGhlIG5leHQgc3RlcFxuICBzdGF0ZS5tb2RpZmllcnNEYXRhW25hbWVdID0gY29tcHV0ZU9mZnNldHMoe1xuICAgIHJlZmVyZW5jZTogc3RhdGUucmVjdHMucmVmZXJlbmNlLFxuICAgIGVsZW1lbnQ6IHN0YXRlLnJlY3RzLnBvcHBlcixcbiAgICBzdHJhdGVneTogJ2Fic29sdXRlJyxcbiAgICBwbGFjZW1lbnQ6IHN0YXRlLnBsYWNlbWVudFxuICB9KTtcbn0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ3BvcHBlck9mZnNldHMnLFxuICBlbmFibGVkOiB0cnVlLFxuICBwaGFzZTogJ3JlYWQnLFxuICBmbjogcG9wcGVyT2Zmc2V0cyxcbiAgZGF0YToge31cbn07IiwgImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldEFsdEF4aXMoYXhpcykge1xuICByZXR1cm4gYXhpcyA9PT0gJ3gnID8gJ3knIDogJ3gnO1xufSIsICJpbXBvcnQgeyB0b3AsIGxlZnQsIHJpZ2h0LCBib3R0b20sIHN0YXJ0IH0gZnJvbSBcIi4uL2VudW1zLmpzXCI7XG5pbXBvcnQgZ2V0QmFzZVBsYWNlbWVudCBmcm9tIFwiLi4vdXRpbHMvZ2V0QmFzZVBsYWNlbWVudC5qc1wiO1xuaW1wb3J0IGdldE1haW5BeGlzRnJvbVBsYWNlbWVudCBmcm9tIFwiLi4vdXRpbHMvZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50LmpzXCI7XG5pbXBvcnQgZ2V0QWx0QXhpcyBmcm9tIFwiLi4vdXRpbHMvZ2V0QWx0QXhpcy5qc1wiO1xuaW1wb3J0IHsgd2l0aGluLCB3aXRoaW5NYXhDbGFtcCB9IGZyb20gXCIuLi91dGlscy93aXRoaW4uanNcIjtcbmltcG9ydCBnZXRMYXlvdXRSZWN0IGZyb20gXCIuLi9kb20tdXRpbHMvZ2V0TGF5b3V0UmVjdC5qc1wiO1xuaW1wb3J0IGdldE9mZnNldFBhcmVudCBmcm9tIFwiLi4vZG9tLXV0aWxzL2dldE9mZnNldFBhcmVudC5qc1wiO1xuaW1wb3J0IGRldGVjdE92ZXJmbG93IGZyb20gXCIuLi91dGlscy9kZXRlY3RPdmVyZmxvdy5qc1wiO1xuaW1wb3J0IGdldFZhcmlhdGlvbiBmcm9tIFwiLi4vdXRpbHMvZ2V0VmFyaWF0aW9uLmpzXCI7XG5pbXBvcnQgZ2V0RnJlc2hTaWRlT2JqZWN0IGZyb20gXCIuLi91dGlscy9nZXRGcmVzaFNpZGVPYmplY3QuanNcIjtcbmltcG9ydCB7IG1pbiBhcyBtYXRoTWluLCBtYXggYXMgbWF0aE1heCB9IGZyb20gXCIuLi91dGlscy9tYXRoLmpzXCI7XG5cbmZ1bmN0aW9uIHByZXZlbnRPdmVyZmxvdyhfcmVmKSB7XG4gIHZhciBzdGF0ZSA9IF9yZWYuc3RhdGUsXG4gICAgICBvcHRpb25zID0gX3JlZi5vcHRpb25zLFxuICAgICAgbmFtZSA9IF9yZWYubmFtZTtcbiAgdmFyIF9vcHRpb25zJG1haW5BeGlzID0gb3B0aW9ucy5tYWluQXhpcyxcbiAgICAgIGNoZWNrTWFpbkF4aXMgPSBfb3B0aW9ucyRtYWluQXhpcyA9PT0gdm9pZCAwID8gdHJ1ZSA6IF9vcHRpb25zJG1haW5BeGlzLFxuICAgICAgX29wdGlvbnMkYWx0QXhpcyA9IG9wdGlvbnMuYWx0QXhpcyxcbiAgICAgIGNoZWNrQWx0QXhpcyA9IF9vcHRpb25zJGFsdEF4aXMgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkYWx0QXhpcyxcbiAgICAgIGJvdW5kYXJ5ID0gb3B0aW9ucy5ib3VuZGFyeSxcbiAgICAgIHJvb3RCb3VuZGFyeSA9IG9wdGlvbnMucm9vdEJvdW5kYXJ5LFxuICAgICAgYWx0Qm91bmRhcnkgPSBvcHRpb25zLmFsdEJvdW5kYXJ5LFxuICAgICAgcGFkZGluZyA9IG9wdGlvbnMucGFkZGluZyxcbiAgICAgIF9vcHRpb25zJHRldGhlciA9IG9wdGlvbnMudGV0aGVyLFxuICAgICAgdGV0aGVyID0gX29wdGlvbnMkdGV0aGVyID09PSB2b2lkIDAgPyB0cnVlIDogX29wdGlvbnMkdGV0aGVyLFxuICAgICAgX29wdGlvbnMkdGV0aGVyT2Zmc2V0ID0gb3B0aW9ucy50ZXRoZXJPZmZzZXQsXG4gICAgICB0ZXRoZXJPZmZzZXQgPSBfb3B0aW9ucyR0ZXRoZXJPZmZzZXQgPT09IHZvaWQgMCA/IDAgOiBfb3B0aW9ucyR0ZXRoZXJPZmZzZXQ7XG4gIHZhciBvdmVyZmxvdyA9IGRldGVjdE92ZXJmbG93KHN0YXRlLCB7XG4gICAgYm91bmRhcnk6IGJvdW5kYXJ5LFxuICAgIHJvb3RCb3VuZGFyeTogcm9vdEJvdW5kYXJ5LFxuICAgIHBhZGRpbmc6IHBhZGRpbmcsXG4gICAgYWx0Qm91bmRhcnk6IGFsdEJvdW5kYXJ5XG4gIH0pO1xuICB2YXIgYmFzZVBsYWNlbWVudCA9IGdldEJhc2VQbGFjZW1lbnQoc3RhdGUucGxhY2VtZW50KTtcbiAgdmFyIHZhcmlhdGlvbiA9IGdldFZhcmlhdGlvbihzdGF0ZS5wbGFjZW1lbnQpO1xuICB2YXIgaXNCYXNlUGxhY2VtZW50ID0gIXZhcmlhdGlvbjtcbiAgdmFyIG1haW5BeGlzID0gZ2V0TWFpbkF4aXNGcm9tUGxhY2VtZW50KGJhc2VQbGFjZW1lbnQpO1xuICB2YXIgYWx0QXhpcyA9IGdldEFsdEF4aXMobWFpbkF4aXMpO1xuICB2YXIgcG9wcGVyT2Zmc2V0cyA9IHN0YXRlLm1vZGlmaWVyc0RhdGEucG9wcGVyT2Zmc2V0cztcbiAgdmFyIHJlZmVyZW5jZVJlY3QgPSBzdGF0ZS5yZWN0cy5yZWZlcmVuY2U7XG4gIHZhciBwb3BwZXJSZWN0ID0gc3RhdGUucmVjdHMucG9wcGVyO1xuICB2YXIgdGV0aGVyT2Zmc2V0VmFsdWUgPSB0eXBlb2YgdGV0aGVyT2Zmc2V0ID09PSAnZnVuY3Rpb24nID8gdGV0aGVyT2Zmc2V0KE9iamVjdC5hc3NpZ24oe30sIHN0YXRlLnJlY3RzLCB7XG4gICAgcGxhY2VtZW50OiBzdGF0ZS5wbGFjZW1lbnRcbiAgfSkpIDogdGV0aGVyT2Zmc2V0O1xuICB2YXIgbm9ybWFsaXplZFRldGhlck9mZnNldFZhbHVlID0gdHlwZW9mIHRldGhlck9mZnNldFZhbHVlID09PSAnbnVtYmVyJyA/IHtcbiAgICBtYWluQXhpczogdGV0aGVyT2Zmc2V0VmFsdWUsXG4gICAgYWx0QXhpczogdGV0aGVyT2Zmc2V0VmFsdWVcbiAgfSA6IE9iamVjdC5hc3NpZ24oe1xuICAgIG1haW5BeGlzOiAwLFxuICAgIGFsdEF4aXM6IDBcbiAgfSwgdGV0aGVyT2Zmc2V0VmFsdWUpO1xuICB2YXIgb2Zmc2V0TW9kaWZpZXJTdGF0ZSA9IHN0YXRlLm1vZGlmaWVyc0RhdGEub2Zmc2V0ID8gc3RhdGUubW9kaWZpZXJzRGF0YS5vZmZzZXRbc3RhdGUucGxhY2VtZW50XSA6IG51bGw7XG4gIHZhciBkYXRhID0ge1xuICAgIHg6IDAsXG4gICAgeTogMFxuICB9O1xuXG4gIGlmICghcG9wcGVyT2Zmc2V0cykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChjaGVja01haW5BeGlzKSB7XG4gICAgdmFyIF9vZmZzZXRNb2RpZmllclN0YXRlJDtcblxuICAgIHZhciBtYWluU2lkZSA9IG1haW5BeGlzID09PSAneScgPyB0b3AgOiBsZWZ0O1xuICAgIHZhciBhbHRTaWRlID0gbWFpbkF4aXMgPT09ICd5JyA/IGJvdHRvbSA6IHJpZ2h0O1xuICAgIHZhciBsZW4gPSBtYWluQXhpcyA9PT0gJ3knID8gJ2hlaWdodCcgOiAnd2lkdGgnO1xuICAgIHZhciBvZmZzZXQgPSBwb3BwZXJPZmZzZXRzW21haW5BeGlzXTtcbiAgICB2YXIgbWluID0gb2Zmc2V0ICsgb3ZlcmZsb3dbbWFpblNpZGVdO1xuICAgIHZhciBtYXggPSBvZmZzZXQgLSBvdmVyZmxvd1thbHRTaWRlXTtcbiAgICB2YXIgYWRkaXRpdmUgPSB0ZXRoZXIgPyAtcG9wcGVyUmVjdFtsZW5dIC8gMiA6IDA7XG4gICAgdmFyIG1pbkxlbiA9IHZhcmlhdGlvbiA9PT0gc3RhcnQgPyByZWZlcmVuY2VSZWN0W2xlbl0gOiBwb3BwZXJSZWN0W2xlbl07XG4gICAgdmFyIG1heExlbiA9IHZhcmlhdGlvbiA9PT0gc3RhcnQgPyAtcG9wcGVyUmVjdFtsZW5dIDogLXJlZmVyZW5jZVJlY3RbbGVuXTsgLy8gV2UgbmVlZCB0byBpbmNsdWRlIHRoZSBhcnJvdyBpbiB0aGUgY2FsY3VsYXRpb24gc28gdGhlIGFycm93IGRvZXNuJ3QgZ29cbiAgICAvLyBvdXRzaWRlIHRoZSByZWZlcmVuY2UgYm91bmRzXG5cbiAgICB2YXIgYXJyb3dFbGVtZW50ID0gc3RhdGUuZWxlbWVudHMuYXJyb3c7XG4gICAgdmFyIGFycm93UmVjdCA9IHRldGhlciAmJiBhcnJvd0VsZW1lbnQgPyBnZXRMYXlvdXRSZWN0KGFycm93RWxlbWVudCkgOiB7XG4gICAgICB3aWR0aDogMCxcbiAgICAgIGhlaWdodDogMFxuICAgIH07XG4gICAgdmFyIGFycm93UGFkZGluZ09iamVjdCA9IHN0YXRlLm1vZGlmaWVyc0RhdGFbJ2Fycm93I3BlcnNpc3RlbnQnXSA/IHN0YXRlLm1vZGlmaWVyc0RhdGFbJ2Fycm93I3BlcnNpc3RlbnQnXS5wYWRkaW5nIDogZ2V0RnJlc2hTaWRlT2JqZWN0KCk7XG4gICAgdmFyIGFycm93UGFkZGluZ01pbiA9IGFycm93UGFkZGluZ09iamVjdFttYWluU2lkZV07XG4gICAgdmFyIGFycm93UGFkZGluZ01heCA9IGFycm93UGFkZGluZ09iamVjdFthbHRTaWRlXTsgLy8gSWYgdGhlIHJlZmVyZW5jZSBsZW5ndGggaXMgc21hbGxlciB0aGFuIHRoZSBhcnJvdyBsZW5ndGgsIHdlIGRvbid0IHdhbnRcbiAgICAvLyB0byBpbmNsdWRlIGl0cyBmdWxsIHNpemUgaW4gdGhlIGNhbGN1bGF0aW9uLiBJZiB0aGUgcmVmZXJlbmNlIGlzIHNtYWxsXG4gICAgLy8gYW5kIG5lYXIgdGhlIGVkZ2Ugb2YgYSBib3VuZGFyeSwgdGhlIHBvcHBlciBjYW4gb3ZlcmZsb3cgZXZlbiBpZiB0aGVcbiAgICAvLyByZWZlcmVuY2UgaXMgbm90IG92ZXJmbG93aW5nIGFzIHdlbGwgKGUuZy4gdmlydHVhbCBlbGVtZW50cyB3aXRoIG5vXG4gICAgLy8gd2lkdGggb3IgaGVpZ2h0KVxuXG4gICAgdmFyIGFycm93TGVuID0gd2l0aGluKDAsIHJlZmVyZW5jZVJlY3RbbGVuXSwgYXJyb3dSZWN0W2xlbl0pO1xuICAgIHZhciBtaW5PZmZzZXQgPSBpc0Jhc2VQbGFjZW1lbnQgPyByZWZlcmVuY2VSZWN0W2xlbl0gLyAyIC0gYWRkaXRpdmUgLSBhcnJvd0xlbiAtIGFycm93UGFkZGluZ01pbiAtIG5vcm1hbGl6ZWRUZXRoZXJPZmZzZXRWYWx1ZS5tYWluQXhpcyA6IG1pbkxlbiAtIGFycm93TGVuIC0gYXJyb3dQYWRkaW5nTWluIC0gbm9ybWFsaXplZFRldGhlck9mZnNldFZhbHVlLm1haW5BeGlzO1xuICAgIHZhciBtYXhPZmZzZXQgPSBpc0Jhc2VQbGFjZW1lbnQgPyAtcmVmZXJlbmNlUmVjdFtsZW5dIC8gMiArIGFkZGl0aXZlICsgYXJyb3dMZW4gKyBhcnJvd1BhZGRpbmdNYXggKyBub3JtYWxpemVkVGV0aGVyT2Zmc2V0VmFsdWUubWFpbkF4aXMgOiBtYXhMZW4gKyBhcnJvd0xlbiArIGFycm93UGFkZGluZ01heCArIG5vcm1hbGl6ZWRUZXRoZXJPZmZzZXRWYWx1ZS5tYWluQXhpcztcbiAgICB2YXIgYXJyb3dPZmZzZXRQYXJlbnQgPSBzdGF0ZS5lbGVtZW50cy5hcnJvdyAmJiBnZXRPZmZzZXRQYXJlbnQoc3RhdGUuZWxlbWVudHMuYXJyb3cpO1xuICAgIHZhciBjbGllbnRPZmZzZXQgPSBhcnJvd09mZnNldFBhcmVudCA/IG1haW5BeGlzID09PSAneScgPyBhcnJvd09mZnNldFBhcmVudC5jbGllbnRUb3AgfHwgMCA6IGFycm93T2Zmc2V0UGFyZW50LmNsaWVudExlZnQgfHwgMCA6IDA7XG4gICAgdmFyIG9mZnNldE1vZGlmaWVyVmFsdWUgPSAoX29mZnNldE1vZGlmaWVyU3RhdGUkID0gb2Zmc2V0TW9kaWZpZXJTdGF0ZSA9PSBudWxsID8gdm9pZCAwIDogb2Zmc2V0TW9kaWZpZXJTdGF0ZVttYWluQXhpc10pICE9IG51bGwgPyBfb2Zmc2V0TW9kaWZpZXJTdGF0ZSQgOiAwO1xuICAgIHZhciB0ZXRoZXJNaW4gPSBvZmZzZXQgKyBtaW5PZmZzZXQgLSBvZmZzZXRNb2RpZmllclZhbHVlIC0gY2xpZW50T2Zmc2V0O1xuICAgIHZhciB0ZXRoZXJNYXggPSBvZmZzZXQgKyBtYXhPZmZzZXQgLSBvZmZzZXRNb2RpZmllclZhbHVlO1xuICAgIHZhciBwcmV2ZW50ZWRPZmZzZXQgPSB3aXRoaW4odGV0aGVyID8gbWF0aE1pbihtaW4sIHRldGhlck1pbikgOiBtaW4sIG9mZnNldCwgdGV0aGVyID8gbWF0aE1heChtYXgsIHRldGhlck1heCkgOiBtYXgpO1xuICAgIHBvcHBlck9mZnNldHNbbWFpbkF4aXNdID0gcHJldmVudGVkT2Zmc2V0O1xuICAgIGRhdGFbbWFpbkF4aXNdID0gcHJldmVudGVkT2Zmc2V0IC0gb2Zmc2V0O1xuICB9XG5cbiAgaWYgKGNoZWNrQWx0QXhpcykge1xuICAgIHZhciBfb2Zmc2V0TW9kaWZpZXJTdGF0ZSQyO1xuXG4gICAgdmFyIF9tYWluU2lkZSA9IG1haW5BeGlzID09PSAneCcgPyB0b3AgOiBsZWZ0O1xuXG4gICAgdmFyIF9hbHRTaWRlID0gbWFpbkF4aXMgPT09ICd4JyA/IGJvdHRvbSA6IHJpZ2h0O1xuXG4gICAgdmFyIF9vZmZzZXQgPSBwb3BwZXJPZmZzZXRzW2FsdEF4aXNdO1xuXG4gICAgdmFyIF9sZW4gPSBhbHRBeGlzID09PSAneScgPyAnaGVpZ2h0JyA6ICd3aWR0aCc7XG5cbiAgICB2YXIgX21pbiA9IF9vZmZzZXQgKyBvdmVyZmxvd1tfbWFpblNpZGVdO1xuXG4gICAgdmFyIF9tYXggPSBfb2Zmc2V0IC0gb3ZlcmZsb3dbX2FsdFNpZGVdO1xuXG4gICAgdmFyIGlzT3JpZ2luU2lkZSA9IFt0b3AsIGxlZnRdLmluZGV4T2YoYmFzZVBsYWNlbWVudCkgIT09IC0xO1xuXG4gICAgdmFyIF9vZmZzZXRNb2RpZmllclZhbHVlID0gKF9vZmZzZXRNb2RpZmllclN0YXRlJDIgPSBvZmZzZXRNb2RpZmllclN0YXRlID09IG51bGwgPyB2b2lkIDAgOiBvZmZzZXRNb2RpZmllclN0YXRlW2FsdEF4aXNdKSAhPSBudWxsID8gX29mZnNldE1vZGlmaWVyU3RhdGUkMiA6IDA7XG5cbiAgICB2YXIgX3RldGhlck1pbiA9IGlzT3JpZ2luU2lkZSA/IF9taW4gOiBfb2Zmc2V0IC0gcmVmZXJlbmNlUmVjdFtfbGVuXSAtIHBvcHBlclJlY3RbX2xlbl0gLSBfb2Zmc2V0TW9kaWZpZXJWYWx1ZSArIG5vcm1hbGl6ZWRUZXRoZXJPZmZzZXRWYWx1ZS5hbHRBeGlzO1xuXG4gICAgdmFyIF90ZXRoZXJNYXggPSBpc09yaWdpblNpZGUgPyBfb2Zmc2V0ICsgcmVmZXJlbmNlUmVjdFtfbGVuXSArIHBvcHBlclJlY3RbX2xlbl0gLSBfb2Zmc2V0TW9kaWZpZXJWYWx1ZSAtIG5vcm1hbGl6ZWRUZXRoZXJPZmZzZXRWYWx1ZS5hbHRBeGlzIDogX21heDtcblxuICAgIHZhciBfcHJldmVudGVkT2Zmc2V0ID0gdGV0aGVyICYmIGlzT3JpZ2luU2lkZSA/IHdpdGhpbk1heENsYW1wKF90ZXRoZXJNaW4sIF9vZmZzZXQsIF90ZXRoZXJNYXgpIDogd2l0aGluKHRldGhlciA/IF90ZXRoZXJNaW4gOiBfbWluLCBfb2Zmc2V0LCB0ZXRoZXIgPyBfdGV0aGVyTWF4IDogX21heCk7XG5cbiAgICBwb3BwZXJPZmZzZXRzW2FsdEF4aXNdID0gX3ByZXZlbnRlZE9mZnNldDtcbiAgICBkYXRhW2FsdEF4aXNdID0gX3ByZXZlbnRlZE9mZnNldCAtIF9vZmZzZXQ7XG4gIH1cblxuICBzdGF0ZS5tb2RpZmllcnNEYXRhW25hbWVdID0gZGF0YTtcbn0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmFtZTogJ3ByZXZlbnRPdmVyZmxvdycsXG4gIGVuYWJsZWQ6IHRydWUsXG4gIHBoYXNlOiAnbWFpbicsXG4gIGZuOiBwcmV2ZW50T3ZlcmZsb3csXG4gIHJlcXVpcmVzSWZFeGlzdHM6IFsnb2Zmc2V0J11cbn07IiwgImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldEhUTUxFbGVtZW50U2Nyb2xsKGVsZW1lbnQpIHtcbiAgcmV0dXJuIHtcbiAgICBzY3JvbGxMZWZ0OiBlbGVtZW50LnNjcm9sbExlZnQsXG4gICAgc2Nyb2xsVG9wOiBlbGVtZW50LnNjcm9sbFRvcFxuICB9O1xufSIsICJpbXBvcnQgZ2V0V2luZG93U2Nyb2xsIGZyb20gXCIuL2dldFdpbmRvd1Njcm9sbC5qc1wiO1xuaW1wb3J0IGdldFdpbmRvdyBmcm9tIFwiLi9nZXRXaW5kb3cuanNcIjtcbmltcG9ydCB7IGlzSFRNTEVsZW1lbnQgfSBmcm9tIFwiLi9pbnN0YW5jZU9mLmpzXCI7XG5pbXBvcnQgZ2V0SFRNTEVsZW1lbnRTY3JvbGwgZnJvbSBcIi4vZ2V0SFRNTEVsZW1lbnRTY3JvbGwuanNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldE5vZGVTY3JvbGwobm9kZSkge1xuICBpZiAobm9kZSA9PT0gZ2V0V2luZG93KG5vZGUpIHx8ICFpc0hUTUxFbGVtZW50KG5vZGUpKSB7XG4gICAgcmV0dXJuIGdldFdpbmRvd1Njcm9sbChub2RlKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZ2V0SFRNTEVsZW1lbnRTY3JvbGwobm9kZSk7XG4gIH1cbn0iLCAiaW1wb3J0IGdldEJvdW5kaW5nQ2xpZW50UmVjdCBmcm9tIFwiLi9nZXRCb3VuZGluZ0NsaWVudFJlY3QuanNcIjtcbmltcG9ydCBnZXROb2RlU2Nyb2xsIGZyb20gXCIuL2dldE5vZGVTY3JvbGwuanNcIjtcbmltcG9ydCBnZXROb2RlTmFtZSBmcm9tIFwiLi9nZXROb2RlTmFtZS5qc1wiO1xuaW1wb3J0IHsgaXNIVE1MRWxlbWVudCB9IGZyb20gXCIuL2luc3RhbmNlT2YuanNcIjtcbmltcG9ydCBnZXRXaW5kb3dTY3JvbGxCYXJYIGZyb20gXCIuL2dldFdpbmRvd1Njcm9sbEJhclguanNcIjtcbmltcG9ydCBnZXREb2N1bWVudEVsZW1lbnQgZnJvbSBcIi4vZ2V0RG9jdW1lbnRFbGVtZW50LmpzXCI7XG5pbXBvcnQgaXNTY3JvbGxQYXJlbnQgZnJvbSBcIi4vaXNTY3JvbGxQYXJlbnQuanNcIjtcbmltcG9ydCB7IHJvdW5kIH0gZnJvbSBcIi4uL3V0aWxzL21hdGguanNcIjtcblxuZnVuY3Rpb24gaXNFbGVtZW50U2NhbGVkKGVsZW1lbnQpIHtcbiAgdmFyIHJlY3QgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICB2YXIgc2NhbGVYID0gcm91bmQocmVjdC53aWR0aCkgLyBlbGVtZW50Lm9mZnNldFdpZHRoIHx8IDE7XG4gIHZhciBzY2FsZVkgPSByb3VuZChyZWN0LmhlaWdodCkgLyBlbGVtZW50Lm9mZnNldEhlaWdodCB8fCAxO1xuICByZXR1cm4gc2NhbGVYICE9PSAxIHx8IHNjYWxlWSAhPT0gMTtcbn0gLy8gUmV0dXJucyB0aGUgY29tcG9zaXRlIHJlY3Qgb2YgYW4gZWxlbWVudCByZWxhdGl2ZSB0byBpdHMgb2Zmc2V0UGFyZW50LlxuLy8gQ29tcG9zaXRlIG1lYW5zIGl0IHRha2VzIGludG8gYWNjb3VudCB0cmFuc2Zvcm1zIGFzIHdlbGwgYXMgbGF5b3V0LlxuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldENvbXBvc2l0ZVJlY3QoZWxlbWVudE9yVmlydHVhbEVsZW1lbnQsIG9mZnNldFBhcmVudCwgaXNGaXhlZCkge1xuICBpZiAoaXNGaXhlZCA9PT0gdm9pZCAwKSB7XG4gICAgaXNGaXhlZCA9IGZhbHNlO1xuICB9XG5cbiAgdmFyIGlzT2Zmc2V0UGFyZW50QW5FbGVtZW50ID0gaXNIVE1MRWxlbWVudChvZmZzZXRQYXJlbnQpO1xuICB2YXIgb2Zmc2V0UGFyZW50SXNTY2FsZWQgPSBpc0hUTUxFbGVtZW50KG9mZnNldFBhcmVudCkgJiYgaXNFbGVtZW50U2NhbGVkKG9mZnNldFBhcmVudCk7XG4gIHZhciBkb2N1bWVudEVsZW1lbnQgPSBnZXREb2N1bWVudEVsZW1lbnQob2Zmc2V0UGFyZW50KTtcbiAgdmFyIHJlY3QgPSBnZXRCb3VuZGluZ0NsaWVudFJlY3QoZWxlbWVudE9yVmlydHVhbEVsZW1lbnQsIG9mZnNldFBhcmVudElzU2NhbGVkLCBpc0ZpeGVkKTtcbiAgdmFyIHNjcm9sbCA9IHtcbiAgICBzY3JvbGxMZWZ0OiAwLFxuICAgIHNjcm9sbFRvcDogMFxuICB9O1xuICB2YXIgb2Zmc2V0cyA9IHtcbiAgICB4OiAwLFxuICAgIHk6IDBcbiAgfTtcblxuICBpZiAoaXNPZmZzZXRQYXJlbnRBbkVsZW1lbnQgfHwgIWlzT2Zmc2V0UGFyZW50QW5FbGVtZW50ICYmICFpc0ZpeGVkKSB7XG4gICAgaWYgKGdldE5vZGVOYW1lKG9mZnNldFBhcmVudCkgIT09ICdib2R5JyB8fCAvLyBodHRwczovL2dpdGh1Yi5jb20vcG9wcGVyanMvcG9wcGVyLWNvcmUvaXNzdWVzLzEwNzhcbiAgICBpc1Njcm9sbFBhcmVudChkb2N1bWVudEVsZW1lbnQpKSB7XG4gICAgICBzY3JvbGwgPSBnZXROb2RlU2Nyb2xsKG9mZnNldFBhcmVudCk7XG4gICAgfVxuXG4gICAgaWYgKGlzSFRNTEVsZW1lbnQob2Zmc2V0UGFyZW50KSkge1xuICAgICAgb2Zmc2V0cyA9IGdldEJvdW5kaW5nQ2xpZW50UmVjdChvZmZzZXRQYXJlbnQsIHRydWUpO1xuICAgICAgb2Zmc2V0cy54ICs9IG9mZnNldFBhcmVudC5jbGllbnRMZWZ0O1xuICAgICAgb2Zmc2V0cy55ICs9IG9mZnNldFBhcmVudC5jbGllbnRUb3A7XG4gICAgfSBlbHNlIGlmIChkb2N1bWVudEVsZW1lbnQpIHtcbiAgICAgIG9mZnNldHMueCA9IGdldFdpbmRvd1Njcm9sbEJhclgoZG9jdW1lbnRFbGVtZW50KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHg6IHJlY3QubGVmdCArIHNjcm9sbC5zY3JvbGxMZWZ0IC0gb2Zmc2V0cy54LFxuICAgIHk6IHJlY3QudG9wICsgc2Nyb2xsLnNjcm9sbFRvcCAtIG9mZnNldHMueSxcbiAgICB3aWR0aDogcmVjdC53aWR0aCxcbiAgICBoZWlnaHQ6IHJlY3QuaGVpZ2h0XG4gIH07XG59IiwgImltcG9ydCB7IG1vZGlmaWVyUGhhc2VzIH0gZnJvbSBcIi4uL2VudW1zLmpzXCI7IC8vIHNvdXJjZTogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNDk4NzUyNTVcblxuZnVuY3Rpb24gb3JkZXIobW9kaWZpZXJzKSB7XG4gIHZhciBtYXAgPSBuZXcgTWFwKCk7XG4gIHZhciB2aXNpdGVkID0gbmV3IFNldCgpO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIG1vZGlmaWVycy5mb3JFYWNoKGZ1bmN0aW9uIChtb2RpZmllcikge1xuICAgIG1hcC5zZXQobW9kaWZpZXIubmFtZSwgbW9kaWZpZXIpO1xuICB9KTsgLy8gT24gdmlzaXRpbmcgb2JqZWN0LCBjaGVjayBmb3IgaXRzIGRlcGVuZGVuY2llcyBhbmQgdmlzaXQgdGhlbSByZWN1cnNpdmVseVxuXG4gIGZ1bmN0aW9uIHNvcnQobW9kaWZpZXIpIHtcbiAgICB2aXNpdGVkLmFkZChtb2RpZmllci5uYW1lKTtcbiAgICB2YXIgcmVxdWlyZXMgPSBbXS5jb25jYXQobW9kaWZpZXIucmVxdWlyZXMgfHwgW10sIG1vZGlmaWVyLnJlcXVpcmVzSWZFeGlzdHMgfHwgW10pO1xuICAgIHJlcXVpcmVzLmZvckVhY2goZnVuY3Rpb24gKGRlcCkge1xuICAgICAgaWYgKCF2aXNpdGVkLmhhcyhkZXApKSB7XG4gICAgICAgIHZhciBkZXBNb2RpZmllciA9IG1hcC5nZXQoZGVwKTtcblxuICAgICAgICBpZiAoZGVwTW9kaWZpZXIpIHtcbiAgICAgICAgICBzb3J0KGRlcE1vZGlmaWVyKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIHJlc3VsdC5wdXNoKG1vZGlmaWVyKTtcbiAgfVxuXG4gIG1vZGlmaWVycy5mb3JFYWNoKGZ1bmN0aW9uIChtb2RpZmllcikge1xuICAgIGlmICghdmlzaXRlZC5oYXMobW9kaWZpZXIubmFtZSkpIHtcbiAgICAgIC8vIGNoZWNrIGZvciB2aXNpdGVkIG9iamVjdFxuICAgICAgc29ydChtb2RpZmllcik7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gb3JkZXJNb2RpZmllcnMobW9kaWZpZXJzKSB7XG4gIC8vIG9yZGVyIGJhc2VkIG9uIGRlcGVuZGVuY2llc1xuICB2YXIgb3JkZXJlZE1vZGlmaWVycyA9IG9yZGVyKG1vZGlmaWVycyk7IC8vIG9yZGVyIGJhc2VkIG9uIHBoYXNlXG5cbiAgcmV0dXJuIG1vZGlmaWVyUGhhc2VzLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBwaGFzZSkge1xuICAgIHJldHVybiBhY2MuY29uY2F0KG9yZGVyZWRNb2RpZmllcnMuZmlsdGVyKGZ1bmN0aW9uIChtb2RpZmllcikge1xuICAgICAgcmV0dXJuIG1vZGlmaWVyLnBoYXNlID09PSBwaGFzZTtcbiAgICB9KSk7XG4gIH0sIFtdKTtcbn0iLCAiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGVib3VuY2UoZm4pIHtcbiAgdmFyIHBlbmRpbmc7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFwZW5kaW5nKSB7XG4gICAgICBwZW5kaW5nID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgUHJvbWlzZS5yZXNvbHZlKCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcGVuZGluZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICByZXNvbHZlKGZuKCkpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBwZW5kaW5nO1xuICB9O1xufSIsICJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXQoc3RyKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBbXS5jb25jYXQoYXJncykucmVkdWNlKGZ1bmN0aW9uIChwLCBjKSB7XG4gICAgcmV0dXJuIHAucmVwbGFjZSgvJXMvLCBjKTtcbiAgfSwgc3RyKTtcbn0iLCAiaW1wb3J0IGZvcm1hdCBmcm9tIFwiLi9mb3JtYXQuanNcIjtcbmltcG9ydCB7IG1vZGlmaWVyUGhhc2VzIH0gZnJvbSBcIi4uL2VudW1zLmpzXCI7XG52YXIgSU5WQUxJRF9NT0RJRklFUl9FUlJPUiA9ICdQb3BwZXI6IG1vZGlmaWVyIFwiJXNcIiBwcm92aWRlZCBhbiBpbnZhbGlkICVzIHByb3BlcnR5LCBleHBlY3RlZCAlcyBidXQgZ290ICVzJztcbnZhciBNSVNTSU5HX0RFUEVOREVOQ1lfRVJST1IgPSAnUG9wcGVyOiBtb2RpZmllciBcIiVzXCIgcmVxdWlyZXMgXCIlc1wiLCBidXQgXCIlc1wiIG1vZGlmaWVyIGlzIG5vdCBhdmFpbGFibGUnO1xudmFyIFZBTElEX1BST1BFUlRJRVMgPSBbJ25hbWUnLCAnZW5hYmxlZCcsICdwaGFzZScsICdmbicsICdlZmZlY3QnLCAncmVxdWlyZXMnLCAnb3B0aW9ucyddO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdmFsaWRhdGVNb2RpZmllcnMobW9kaWZpZXJzKSB7XG4gIG1vZGlmaWVycy5mb3JFYWNoKGZ1bmN0aW9uIChtb2RpZmllcikge1xuICAgIFtdLmNvbmNhdChPYmplY3Qua2V5cyhtb2RpZmllciksIFZBTElEX1BST1BFUlRJRVMpIC8vIElFMTEtY29tcGF0aWJsZSByZXBsYWNlbWVudCBmb3IgYG5ldyBTZXQoaXRlcmFibGUpYFxuICAgIC5maWx0ZXIoZnVuY3Rpb24gKHZhbHVlLCBpbmRleCwgc2VsZikge1xuICAgICAgcmV0dXJuIHNlbGYuaW5kZXhPZih2YWx1ZSkgPT09IGluZGV4O1xuICAgIH0pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgc3dpdGNoIChrZXkpIHtcbiAgICAgICAgY2FzZSAnbmFtZSc6XG4gICAgICAgICAgaWYgKHR5cGVvZiBtb2RpZmllci5uYW1lICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihmb3JtYXQoSU5WQUxJRF9NT0RJRklFUl9FUlJPUiwgU3RyaW5nKG1vZGlmaWVyLm5hbWUpLCAnXCJuYW1lXCInLCAnXCJzdHJpbmdcIicsIFwiXFxcIlwiICsgU3RyaW5nKG1vZGlmaWVyLm5hbWUpICsgXCJcXFwiXCIpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdlbmFibGVkJzpcbiAgICAgICAgICBpZiAodHlwZW9mIG1vZGlmaWVyLmVuYWJsZWQgIT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihmb3JtYXQoSU5WQUxJRF9NT0RJRklFUl9FUlJPUiwgbW9kaWZpZXIubmFtZSwgJ1wiZW5hYmxlZFwiJywgJ1wiYm9vbGVhblwiJywgXCJcXFwiXCIgKyBTdHJpbmcobW9kaWZpZXIuZW5hYmxlZCkgKyBcIlxcXCJcIikpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ3BoYXNlJzpcbiAgICAgICAgICBpZiAobW9kaWZpZXJQaGFzZXMuaW5kZXhPZihtb2RpZmllci5waGFzZSkgPCAwKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGZvcm1hdChJTlZBTElEX01PRElGSUVSX0VSUk9SLCBtb2RpZmllci5uYW1lLCAnXCJwaGFzZVwiJywgXCJlaXRoZXIgXCIgKyBtb2RpZmllclBoYXNlcy5qb2luKCcsICcpLCBcIlxcXCJcIiArIFN0cmluZyhtb2RpZmllci5waGFzZSkgKyBcIlxcXCJcIikpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ2ZuJzpcbiAgICAgICAgICBpZiAodHlwZW9mIG1vZGlmaWVyLmZuICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGZvcm1hdChJTlZBTElEX01PRElGSUVSX0VSUk9SLCBtb2RpZmllci5uYW1lLCAnXCJmblwiJywgJ1wiZnVuY3Rpb25cIicsIFwiXFxcIlwiICsgU3RyaW5nKG1vZGlmaWVyLmZuKSArIFwiXFxcIlwiKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnZWZmZWN0JzpcbiAgICAgICAgICBpZiAobW9kaWZpZXIuZWZmZWN0ICE9IG51bGwgJiYgdHlwZW9mIG1vZGlmaWVyLmVmZmVjdCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcihmb3JtYXQoSU5WQUxJRF9NT0RJRklFUl9FUlJPUiwgbW9kaWZpZXIubmFtZSwgJ1wiZWZmZWN0XCInLCAnXCJmdW5jdGlvblwiJywgXCJcXFwiXCIgKyBTdHJpbmcobW9kaWZpZXIuZm4pICsgXCJcXFwiXCIpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdyZXF1aXJlcyc6XG4gICAgICAgICAgaWYgKG1vZGlmaWVyLnJlcXVpcmVzICE9IG51bGwgJiYgIUFycmF5LmlzQXJyYXkobW9kaWZpZXIucmVxdWlyZXMpKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGZvcm1hdChJTlZBTElEX01PRElGSUVSX0VSUk9SLCBtb2RpZmllci5uYW1lLCAnXCJyZXF1aXJlc1wiJywgJ1wiYXJyYXlcIicsIFwiXFxcIlwiICsgU3RyaW5nKG1vZGlmaWVyLnJlcXVpcmVzKSArIFwiXFxcIlwiKSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAncmVxdWlyZXNJZkV4aXN0cyc6XG4gICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KG1vZGlmaWVyLnJlcXVpcmVzSWZFeGlzdHMpKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGZvcm1hdChJTlZBTElEX01PRElGSUVSX0VSUk9SLCBtb2RpZmllci5uYW1lLCAnXCJyZXF1aXJlc0lmRXhpc3RzXCInLCAnXCJhcnJheVwiJywgXCJcXFwiXCIgKyBTdHJpbmcobW9kaWZpZXIucmVxdWlyZXNJZkV4aXN0cykgKyBcIlxcXCJcIikpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgJ29wdGlvbnMnOlxuICAgICAgICBjYXNlICdkYXRhJzpcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJQb3BwZXJKUzogYW4gaW52YWxpZCBwcm9wZXJ0eSBoYXMgYmVlbiBwcm92aWRlZCB0byB0aGUgXFxcIlwiICsgbW9kaWZpZXIubmFtZSArIFwiXFxcIiBtb2RpZmllciwgdmFsaWQgcHJvcGVydGllcyBhcmUgXCIgKyBWQUxJRF9QUk9QRVJUSUVTLm1hcChmdW5jdGlvbiAocykge1xuICAgICAgICAgICAgcmV0dXJuIFwiXFxcIlwiICsgcyArIFwiXFxcIlwiO1xuICAgICAgICAgIH0pLmpvaW4oJywgJykgKyBcIjsgYnV0IFxcXCJcIiArIGtleSArIFwiXFxcIiB3YXMgcHJvdmlkZWQuXCIpO1xuICAgICAgfVxuXG4gICAgICBtb2RpZmllci5yZXF1aXJlcyAmJiBtb2RpZmllci5yZXF1aXJlcy5mb3JFYWNoKGZ1bmN0aW9uIChyZXF1aXJlbWVudCkge1xuICAgICAgICBpZiAobW9kaWZpZXJzLmZpbmQoZnVuY3Rpb24gKG1vZCkge1xuICAgICAgICAgIHJldHVybiBtb2QubmFtZSA9PT0gcmVxdWlyZW1lbnQ7XG4gICAgICAgIH0pID09IG51bGwpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGZvcm1hdChNSVNTSU5HX0RFUEVOREVOQ1lfRVJST1IsIFN0cmluZyhtb2RpZmllci5uYW1lKSwgcmVxdWlyZW1lbnQsIHJlcXVpcmVtZW50KSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0pO1xuICB9KTtcbn0iLCAiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdW5pcXVlQnkoYXJyLCBmbikge1xuICB2YXIgaWRlbnRpZmllcnMgPSBuZXcgU2V0KCk7XG4gIHJldHVybiBhcnIuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgdmFyIGlkZW50aWZpZXIgPSBmbihpdGVtKTtcblxuICAgIGlmICghaWRlbnRpZmllcnMuaGFzKGlkZW50aWZpZXIpKSB7XG4gICAgICBpZGVudGlmaWVycy5hZGQoaWRlbnRpZmllcik7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0pO1xufSIsICJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtZXJnZUJ5TmFtZShtb2RpZmllcnMpIHtcbiAgdmFyIG1lcmdlZCA9IG1vZGlmaWVycy5yZWR1Y2UoZnVuY3Rpb24gKG1lcmdlZCwgY3VycmVudCkge1xuICAgIHZhciBleGlzdGluZyA9IG1lcmdlZFtjdXJyZW50Lm5hbWVdO1xuICAgIG1lcmdlZFtjdXJyZW50Lm5hbWVdID0gZXhpc3RpbmcgPyBPYmplY3QuYXNzaWduKHt9LCBleGlzdGluZywgY3VycmVudCwge1xuICAgICAgb3B0aW9uczogT2JqZWN0LmFzc2lnbih7fSwgZXhpc3Rpbmcub3B0aW9ucywgY3VycmVudC5vcHRpb25zKSxcbiAgICAgIGRhdGE6IE9iamVjdC5hc3NpZ24oe30sIGV4aXN0aW5nLmRhdGEsIGN1cnJlbnQuZGF0YSlcbiAgICB9KSA6IGN1cnJlbnQ7XG4gICAgcmV0dXJuIG1lcmdlZDtcbiAgfSwge30pOyAvLyBJRTExIGRvZXMgbm90IHN1cHBvcnQgT2JqZWN0LnZhbHVlc1xuXG4gIHJldHVybiBPYmplY3Qua2V5cyhtZXJnZWQpLm1hcChmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIG1lcmdlZFtrZXldO1xuICB9KTtcbn0iLCAiaW1wb3J0IGdldENvbXBvc2l0ZVJlY3QgZnJvbSBcIi4vZG9tLXV0aWxzL2dldENvbXBvc2l0ZVJlY3QuanNcIjtcbmltcG9ydCBnZXRMYXlvdXRSZWN0IGZyb20gXCIuL2RvbS11dGlscy9nZXRMYXlvdXRSZWN0LmpzXCI7XG5pbXBvcnQgbGlzdFNjcm9sbFBhcmVudHMgZnJvbSBcIi4vZG9tLXV0aWxzL2xpc3RTY3JvbGxQYXJlbnRzLmpzXCI7XG5pbXBvcnQgZ2V0T2Zmc2V0UGFyZW50IGZyb20gXCIuL2RvbS11dGlscy9nZXRPZmZzZXRQYXJlbnQuanNcIjtcbmltcG9ydCBnZXRDb21wdXRlZFN0eWxlIGZyb20gXCIuL2RvbS11dGlscy9nZXRDb21wdXRlZFN0eWxlLmpzXCI7XG5pbXBvcnQgb3JkZXJNb2RpZmllcnMgZnJvbSBcIi4vdXRpbHMvb3JkZXJNb2RpZmllcnMuanNcIjtcbmltcG9ydCBkZWJvdW5jZSBmcm9tIFwiLi91dGlscy9kZWJvdW5jZS5qc1wiO1xuaW1wb3J0IHZhbGlkYXRlTW9kaWZpZXJzIGZyb20gXCIuL3V0aWxzL3ZhbGlkYXRlTW9kaWZpZXJzLmpzXCI7XG5pbXBvcnQgdW5pcXVlQnkgZnJvbSBcIi4vdXRpbHMvdW5pcXVlQnkuanNcIjtcbmltcG9ydCBnZXRCYXNlUGxhY2VtZW50IGZyb20gXCIuL3V0aWxzL2dldEJhc2VQbGFjZW1lbnQuanNcIjtcbmltcG9ydCBtZXJnZUJ5TmFtZSBmcm9tIFwiLi91dGlscy9tZXJnZUJ5TmFtZS5qc1wiO1xuaW1wb3J0IGRldGVjdE92ZXJmbG93IGZyb20gXCIuL3V0aWxzL2RldGVjdE92ZXJmbG93LmpzXCI7XG5pbXBvcnQgeyBpc0VsZW1lbnQgfSBmcm9tIFwiLi9kb20tdXRpbHMvaW5zdGFuY2VPZi5qc1wiO1xuaW1wb3J0IHsgYXV0byB9IGZyb20gXCIuL2VudW1zLmpzXCI7XG52YXIgSU5WQUxJRF9FTEVNRU5UX0VSUk9SID0gJ1BvcHBlcjogSW52YWxpZCByZWZlcmVuY2Ugb3IgcG9wcGVyIGFyZ3VtZW50IHByb3ZpZGVkLiBUaGV5IG11c3QgYmUgZWl0aGVyIGEgRE9NIGVsZW1lbnQgb3IgdmlydHVhbCBlbGVtZW50Lic7XG52YXIgSU5GSU5JVEVfTE9PUF9FUlJPUiA9ICdQb3BwZXI6IEFuIGluZmluaXRlIGxvb3AgaW4gdGhlIG1vZGlmaWVycyBjeWNsZSBoYXMgYmVlbiBkZXRlY3RlZCEgVGhlIGN5Y2xlIGhhcyBiZWVuIGludGVycnVwdGVkIHRvIHByZXZlbnQgYSBicm93c2VyIGNyYXNoLic7XG52YXIgREVGQVVMVF9PUFRJT05TID0ge1xuICBwbGFjZW1lbnQ6ICdib3R0b20nLFxuICBtb2RpZmllcnM6IFtdLFxuICBzdHJhdGVneTogJ2Fic29sdXRlJ1xufTtcblxuZnVuY3Rpb24gYXJlVmFsaWRFbGVtZW50cygpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiAhYXJncy5zb21lKGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgcmV0dXJuICEoZWxlbWVudCAmJiB0eXBlb2YgZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QgPT09ICdmdW5jdGlvbicpO1xuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBvcHBlckdlbmVyYXRvcihnZW5lcmF0b3JPcHRpb25zKSB7XG4gIGlmIChnZW5lcmF0b3JPcHRpb25zID09PSB2b2lkIDApIHtcbiAgICBnZW5lcmF0b3JPcHRpb25zID0ge307XG4gIH1cblxuICB2YXIgX2dlbmVyYXRvck9wdGlvbnMgPSBnZW5lcmF0b3JPcHRpb25zLFxuICAgICAgX2dlbmVyYXRvck9wdGlvbnMkZGVmID0gX2dlbmVyYXRvck9wdGlvbnMuZGVmYXVsdE1vZGlmaWVycyxcbiAgICAgIGRlZmF1bHRNb2RpZmllcnMgPSBfZ2VuZXJhdG9yT3B0aW9ucyRkZWYgPT09IHZvaWQgMCA/IFtdIDogX2dlbmVyYXRvck9wdGlvbnMkZGVmLFxuICAgICAgX2dlbmVyYXRvck9wdGlvbnMkZGVmMiA9IF9nZW5lcmF0b3JPcHRpb25zLmRlZmF1bHRPcHRpb25zLFxuICAgICAgZGVmYXVsdE9wdGlvbnMgPSBfZ2VuZXJhdG9yT3B0aW9ucyRkZWYyID09PSB2b2lkIDAgPyBERUZBVUxUX09QVElPTlMgOiBfZ2VuZXJhdG9yT3B0aW9ucyRkZWYyO1xuICByZXR1cm4gZnVuY3Rpb24gY3JlYXRlUG9wcGVyKHJlZmVyZW5jZSwgcG9wcGVyLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IGRlZmF1bHRPcHRpb25zO1xuICAgIH1cblxuICAgIHZhciBzdGF0ZSA9IHtcbiAgICAgIHBsYWNlbWVudDogJ2JvdHRvbScsXG4gICAgICBvcmRlcmVkTW9kaWZpZXJzOiBbXSxcbiAgICAgIG9wdGlvbnM6IE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRfT1BUSU9OUywgZGVmYXVsdE9wdGlvbnMpLFxuICAgICAgbW9kaWZpZXJzRGF0YToge30sXG4gICAgICBlbGVtZW50czoge1xuICAgICAgICByZWZlcmVuY2U6IHJlZmVyZW5jZSxcbiAgICAgICAgcG9wcGVyOiBwb3BwZXJcbiAgICAgIH0sXG4gICAgICBhdHRyaWJ1dGVzOiB7fSxcbiAgICAgIHN0eWxlczoge31cbiAgICB9O1xuICAgIHZhciBlZmZlY3RDbGVhbnVwRm5zID0gW107XG4gICAgdmFyIGlzRGVzdHJveWVkID0gZmFsc2U7XG4gICAgdmFyIGluc3RhbmNlID0ge1xuICAgICAgc3RhdGU6IHN0YXRlLFxuICAgICAgc2V0T3B0aW9uczogZnVuY3Rpb24gc2V0T3B0aW9ucyhzZXRPcHRpb25zQWN0aW9uKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0gdHlwZW9mIHNldE9wdGlvbnNBY3Rpb24gPT09ICdmdW5jdGlvbicgPyBzZXRPcHRpb25zQWN0aW9uKHN0YXRlLm9wdGlvbnMpIDogc2V0T3B0aW9uc0FjdGlvbjtcbiAgICAgICAgY2xlYW51cE1vZGlmaWVyRWZmZWN0cygpO1xuICAgICAgICBzdGF0ZS5vcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdE9wdGlvbnMsIHN0YXRlLm9wdGlvbnMsIG9wdGlvbnMpO1xuICAgICAgICBzdGF0ZS5zY3JvbGxQYXJlbnRzID0ge1xuICAgICAgICAgIHJlZmVyZW5jZTogaXNFbGVtZW50KHJlZmVyZW5jZSkgPyBsaXN0U2Nyb2xsUGFyZW50cyhyZWZlcmVuY2UpIDogcmVmZXJlbmNlLmNvbnRleHRFbGVtZW50ID8gbGlzdFNjcm9sbFBhcmVudHMocmVmZXJlbmNlLmNvbnRleHRFbGVtZW50KSA6IFtdLFxuICAgICAgICAgIHBvcHBlcjogbGlzdFNjcm9sbFBhcmVudHMocG9wcGVyKVxuICAgICAgICB9OyAvLyBPcmRlcnMgdGhlIG1vZGlmaWVycyBiYXNlZCBvbiB0aGVpciBkZXBlbmRlbmNpZXMgYW5kIGBwaGFzZWBcbiAgICAgICAgLy8gcHJvcGVydGllc1xuXG4gICAgICAgIHZhciBvcmRlcmVkTW9kaWZpZXJzID0gb3JkZXJNb2RpZmllcnMobWVyZ2VCeU5hbWUoW10uY29uY2F0KGRlZmF1bHRNb2RpZmllcnMsIHN0YXRlLm9wdGlvbnMubW9kaWZpZXJzKSkpOyAvLyBTdHJpcCBvdXQgZGlzYWJsZWQgbW9kaWZpZXJzXG5cbiAgICAgICAgc3RhdGUub3JkZXJlZE1vZGlmaWVycyA9IG9yZGVyZWRNb2RpZmllcnMuZmlsdGVyKGZ1bmN0aW9uIChtKSB7XG4gICAgICAgICAgcmV0dXJuIG0uZW5hYmxlZDtcbiAgICAgICAgfSk7IC8vIFZhbGlkYXRlIHRoZSBwcm92aWRlZCBtb2RpZmllcnMgc28gdGhhdCB0aGUgY29uc3VtZXIgd2lsbCBnZXQgd2FybmVkXG4gICAgICAgIC8vIGlmIG9uZSBvZiB0aGUgbW9kaWZpZXJzIGlzIGludmFsaWQgZm9yIGFueSByZWFzb25cblxuICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgICAgdmFyIG1vZGlmaWVycyA9IHVuaXF1ZUJ5KFtdLmNvbmNhdChvcmRlcmVkTW9kaWZpZXJzLCBzdGF0ZS5vcHRpb25zLm1vZGlmaWVycyksIGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgICAgICAgICB2YXIgbmFtZSA9IF9yZWYubmFtZTtcbiAgICAgICAgICAgIHJldHVybiBuYW1lO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIHZhbGlkYXRlTW9kaWZpZXJzKG1vZGlmaWVycyk7XG5cbiAgICAgICAgICBpZiAoZ2V0QmFzZVBsYWNlbWVudChzdGF0ZS5vcHRpb25zLnBsYWNlbWVudCkgPT09IGF1dG8pIHtcbiAgICAgICAgICAgIHZhciBmbGlwTW9kaWZpZXIgPSBzdGF0ZS5vcmRlcmVkTW9kaWZpZXJzLmZpbmQoZnVuY3Rpb24gKF9yZWYyKSB7XG4gICAgICAgICAgICAgIHZhciBuYW1lID0gX3JlZjIubmFtZTtcbiAgICAgICAgICAgICAgcmV0dXJuIG5hbWUgPT09ICdmbGlwJztcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZiAoIWZsaXBNb2RpZmllcikge1xuICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFsnUG9wcGVyOiBcImF1dG9cIiBwbGFjZW1lbnRzIHJlcXVpcmUgdGhlIFwiZmxpcFwiIG1vZGlmaWVyIGJlJywgJ3ByZXNlbnQgYW5kIGVuYWJsZWQgdG8gd29yay4nXS5qb2luKCcgJykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBfZ2V0Q29tcHV0ZWRTdHlsZSA9IGdldENvbXB1dGVkU3R5bGUocG9wcGVyKSxcbiAgICAgICAgICAgICAgbWFyZ2luVG9wID0gX2dldENvbXB1dGVkU3R5bGUubWFyZ2luVG9wLFxuICAgICAgICAgICAgICBtYXJnaW5SaWdodCA9IF9nZXRDb21wdXRlZFN0eWxlLm1hcmdpblJpZ2h0LFxuICAgICAgICAgICAgICBtYXJnaW5Cb3R0b20gPSBfZ2V0Q29tcHV0ZWRTdHlsZS5tYXJnaW5Cb3R0b20sXG4gICAgICAgICAgICAgIG1hcmdpbkxlZnQgPSBfZ2V0Q29tcHV0ZWRTdHlsZS5tYXJnaW5MZWZ0OyAvLyBXZSBubyBsb25nZXIgdGFrZSBpbnRvIGFjY291bnQgYG1hcmdpbnNgIG9uIHRoZSBwb3BwZXIsIGFuZCBpdCBjYW5cbiAgICAgICAgICAvLyBjYXVzZSBidWdzIHdpdGggcG9zaXRpb25pbmcsIHNvIHdlJ2xsIHdhcm4gdGhlIGNvbnN1bWVyXG5cblxuICAgICAgICAgIGlmIChbbWFyZ2luVG9wLCBtYXJnaW5SaWdodCwgbWFyZ2luQm90dG9tLCBtYXJnaW5MZWZ0XS5zb21lKGZ1bmN0aW9uIChtYXJnaW4pIHtcbiAgICAgICAgICAgIHJldHVybiBwYXJzZUZsb2F0KG1hcmdpbik7XG4gICAgICAgICAgfSkpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihbJ1BvcHBlcjogQ1NTIFwibWFyZ2luXCIgc3R5bGVzIGNhbm5vdCBiZSB1c2VkIHRvIGFwcGx5IHBhZGRpbmcnLCAnYmV0d2VlbiB0aGUgcG9wcGVyIGFuZCBpdHMgcmVmZXJlbmNlIGVsZW1lbnQgb3IgYm91bmRhcnkuJywgJ1RvIHJlcGxpY2F0ZSBtYXJnaW4sIHVzZSB0aGUgYG9mZnNldGAgbW9kaWZpZXIsIGFzIHdlbGwgYXMnLCAndGhlIGBwYWRkaW5nYCBvcHRpb24gaW4gdGhlIGBwcmV2ZW50T3ZlcmZsb3dgIGFuZCBgZmxpcGAnLCAnbW9kaWZpZXJzLiddLmpvaW4oJyAnKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcnVuTW9kaWZpZXJFZmZlY3RzKCk7XG4gICAgICAgIHJldHVybiBpbnN0YW5jZS51cGRhdGUoKTtcbiAgICAgIH0sXG4gICAgICAvLyBTeW5jIHVwZGF0ZSBcdTIwMTMgaXQgd2lsbCBhbHdheXMgYmUgZXhlY3V0ZWQsIGV2ZW4gaWYgbm90IG5lY2Vzc2FyeS4gVGhpc1xuICAgICAgLy8gaXMgdXNlZnVsIGZvciBsb3cgZnJlcXVlbmN5IHVwZGF0ZXMgd2hlcmUgc3luYyBiZWhhdmlvciBzaW1wbGlmaWVzIHRoZVxuICAgICAgLy8gbG9naWMuXG4gICAgICAvLyBGb3IgaGlnaCBmcmVxdWVuY3kgdXBkYXRlcyAoZS5nLiBgcmVzaXplYCBhbmQgYHNjcm9sbGAgZXZlbnRzKSwgYWx3YXlzXG4gICAgICAvLyBwcmVmZXIgdGhlIGFzeW5jIFBvcHBlciN1cGRhdGUgbWV0aG9kXG4gICAgICBmb3JjZVVwZGF0ZTogZnVuY3Rpb24gZm9yY2VVcGRhdGUoKSB7XG4gICAgICAgIGlmIChpc0Rlc3Ryb3llZCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBfc3RhdGUkZWxlbWVudHMgPSBzdGF0ZS5lbGVtZW50cyxcbiAgICAgICAgICAgIHJlZmVyZW5jZSA9IF9zdGF0ZSRlbGVtZW50cy5yZWZlcmVuY2UsXG4gICAgICAgICAgICBwb3BwZXIgPSBfc3RhdGUkZWxlbWVudHMucG9wcGVyOyAvLyBEb24ndCBwcm9jZWVkIGlmIGByZWZlcmVuY2VgIG9yIGBwb3BwZXJgIGFyZSBub3QgdmFsaWQgZWxlbWVudHNcbiAgICAgICAgLy8gYW55bW9yZVxuXG4gICAgICAgIGlmICghYXJlVmFsaWRFbGVtZW50cyhyZWZlcmVuY2UsIHBvcHBlcikpIHtcbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKElOVkFMSURfRUxFTUVOVF9FUlJPUik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IC8vIFN0b3JlIHRoZSByZWZlcmVuY2UgYW5kIHBvcHBlciByZWN0cyB0byBiZSByZWFkIGJ5IG1vZGlmaWVyc1xuXG5cbiAgICAgICAgc3RhdGUucmVjdHMgPSB7XG4gICAgICAgICAgcmVmZXJlbmNlOiBnZXRDb21wb3NpdGVSZWN0KHJlZmVyZW5jZSwgZ2V0T2Zmc2V0UGFyZW50KHBvcHBlciksIHN0YXRlLm9wdGlvbnMuc3RyYXRlZ3kgPT09ICdmaXhlZCcpLFxuICAgICAgICAgIHBvcHBlcjogZ2V0TGF5b3V0UmVjdChwb3BwZXIpXG4gICAgICAgIH07IC8vIE1vZGlmaWVycyBoYXZlIHRoZSBhYmlsaXR5IHRvIHJlc2V0IHRoZSBjdXJyZW50IHVwZGF0ZSBjeWNsZS4gVGhlXG4gICAgICAgIC8vIG1vc3QgY29tbW9uIHVzZSBjYXNlIGZvciB0aGlzIGlzIHRoZSBgZmxpcGAgbW9kaWZpZXIgY2hhbmdpbmcgdGhlXG4gICAgICAgIC8vIHBsYWNlbWVudCwgd2hpY2ggdGhlbiBuZWVkcyB0byByZS1ydW4gYWxsIHRoZSBtb2RpZmllcnMsIGJlY2F1c2UgdGhlXG4gICAgICAgIC8vIGxvZ2ljIHdhcyBwcmV2aW91c2x5IHJhbiBmb3IgdGhlIHByZXZpb3VzIHBsYWNlbWVudCBhbmQgaXMgdGhlcmVmb3JlXG4gICAgICAgIC8vIHN0YWxlL2luY29ycmVjdFxuXG4gICAgICAgIHN0YXRlLnJlc2V0ID0gZmFsc2U7XG4gICAgICAgIHN0YXRlLnBsYWNlbWVudCA9IHN0YXRlLm9wdGlvbnMucGxhY2VtZW50OyAvLyBPbiBlYWNoIHVwZGF0ZSBjeWNsZSwgdGhlIGBtb2RpZmllcnNEYXRhYCBwcm9wZXJ0eSBmb3IgZWFjaCBtb2RpZmllclxuICAgICAgICAvLyBpcyBmaWxsZWQgd2l0aCB0aGUgaW5pdGlhbCBkYXRhIHNwZWNpZmllZCBieSB0aGUgbW9kaWZpZXIuIFRoaXMgbWVhbnNcbiAgICAgICAgLy8gaXQgZG9lc24ndCBwZXJzaXN0IGFuZCBpcyBmcmVzaCBvbiBlYWNoIHVwZGF0ZS5cbiAgICAgICAgLy8gVG8gZW5zdXJlIHBlcnNpc3RlbnQgZGF0YSwgdXNlIGAke25hbWV9I3BlcnNpc3RlbnRgXG5cbiAgICAgICAgc3RhdGUub3JkZXJlZE1vZGlmaWVycy5mb3JFYWNoKGZ1bmN0aW9uIChtb2RpZmllcikge1xuICAgICAgICAgIHJldHVybiBzdGF0ZS5tb2RpZmllcnNEYXRhW21vZGlmaWVyLm5hbWVdID0gT2JqZWN0LmFzc2lnbih7fSwgbW9kaWZpZXIuZGF0YSk7XG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgX19kZWJ1Z19sb29wc19fID0gMDtcblxuICAgICAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgc3RhdGUub3JkZXJlZE1vZGlmaWVycy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgICAgICAgICBfX2RlYnVnX2xvb3BzX18gKz0gMTtcblxuICAgICAgICAgICAgaWYgKF9fZGVidWdfbG9vcHNfXyA+IDEwMCkge1xuICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKElORklOSVRFX0xPT1BfRVJST1IpO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoc3RhdGUucmVzZXQgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHN0YXRlLnJlc2V0ID0gZmFsc2U7XG4gICAgICAgICAgICBpbmRleCA9IC0xO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdmFyIF9zdGF0ZSRvcmRlcmVkTW9kaWZpZSA9IHN0YXRlLm9yZGVyZWRNb2RpZmllcnNbaW5kZXhdLFxuICAgICAgICAgICAgICBmbiA9IF9zdGF0ZSRvcmRlcmVkTW9kaWZpZS5mbixcbiAgICAgICAgICAgICAgX3N0YXRlJG9yZGVyZWRNb2RpZmllMiA9IF9zdGF0ZSRvcmRlcmVkTW9kaWZpZS5vcHRpb25zLFxuICAgICAgICAgICAgICBfb3B0aW9ucyA9IF9zdGF0ZSRvcmRlcmVkTW9kaWZpZTIgPT09IHZvaWQgMCA/IHt9IDogX3N0YXRlJG9yZGVyZWRNb2RpZmllMixcbiAgICAgICAgICAgICAgbmFtZSA9IF9zdGF0ZSRvcmRlcmVkTW9kaWZpZS5uYW1lO1xuXG4gICAgICAgICAgaWYgKHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgc3RhdGUgPSBmbih7XG4gICAgICAgICAgICAgIHN0YXRlOiBzdGF0ZSxcbiAgICAgICAgICAgICAgb3B0aW9uczogX29wdGlvbnMsXG4gICAgICAgICAgICAgIG5hbWU6IG5hbWUsXG4gICAgICAgICAgICAgIGluc3RhbmNlOiBpbnN0YW5jZVxuICAgICAgICAgICAgfSkgfHwgc3RhdGU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgLy8gQXN5bmMgYW5kIG9wdGltaXN0aWNhbGx5IG9wdGltaXplZCB1cGRhdGUgXHUyMDEzIGl0IHdpbGwgbm90IGJlIGV4ZWN1dGVkIGlmXG4gICAgICAvLyBub3QgbmVjZXNzYXJ5IChkZWJvdW5jZWQgdG8gcnVuIGF0IG1vc3Qgb25jZS1wZXItdGljaylcbiAgICAgIHVwZGF0ZTogZGVib3VuY2UoZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgICBpbnN0YW5jZS5mb3JjZVVwZGF0ZSgpO1xuICAgICAgICAgIHJlc29sdmUoc3RhdGUpO1xuICAgICAgICB9KTtcbiAgICAgIH0pLFxuICAgICAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSgpIHtcbiAgICAgICAgY2xlYW51cE1vZGlmaWVyRWZmZWN0cygpO1xuICAgICAgICBpc0Rlc3Ryb3llZCA9IHRydWU7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGlmICghYXJlVmFsaWRFbGVtZW50cyhyZWZlcmVuY2UsIHBvcHBlcikpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihJTlZBTElEX0VMRU1FTlRfRVJST1IpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gaW5zdGFuY2U7XG4gICAgfVxuXG4gICAgaW5zdGFuY2Uuc2V0T3B0aW9ucyhvcHRpb25zKS50aGVuKGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgICAgaWYgKCFpc0Rlc3Ryb3llZCAmJiBvcHRpb25zLm9uRmlyc3RVcGRhdGUpIHtcbiAgICAgICAgb3B0aW9ucy5vbkZpcnN0VXBkYXRlKHN0YXRlKTtcbiAgICAgIH1cbiAgICB9KTsgLy8gTW9kaWZpZXJzIGhhdmUgdGhlIGFiaWxpdHkgdG8gZXhlY3V0ZSBhcmJpdHJhcnkgY29kZSBiZWZvcmUgdGhlIGZpcnN0XG4gICAgLy8gdXBkYXRlIGN5Y2xlIHJ1bnMuIFRoZXkgd2lsbCBiZSBleGVjdXRlZCBpbiB0aGUgc2FtZSBvcmRlciBhcyB0aGUgdXBkYXRlXG4gICAgLy8gY3ljbGUuIFRoaXMgaXMgdXNlZnVsIHdoZW4gYSBtb2RpZmllciBhZGRzIHNvbWUgcGVyc2lzdGVudCBkYXRhIHRoYXRcbiAgICAvLyBvdGhlciBtb2RpZmllcnMgbmVlZCB0byB1c2UsIGJ1dCB0aGUgbW9kaWZpZXIgaXMgcnVuIGFmdGVyIHRoZSBkZXBlbmRlbnRcbiAgICAvLyBvbmUuXG5cbiAgICBmdW5jdGlvbiBydW5Nb2RpZmllckVmZmVjdHMoKSB7XG4gICAgICBzdGF0ZS5vcmRlcmVkTW9kaWZpZXJzLmZvckVhY2goZnVuY3Rpb24gKF9yZWYzKSB7XG4gICAgICAgIHZhciBuYW1lID0gX3JlZjMubmFtZSxcbiAgICAgICAgICAgIF9yZWYzJG9wdGlvbnMgPSBfcmVmMy5vcHRpb25zLFxuICAgICAgICAgICAgb3B0aW9ucyA9IF9yZWYzJG9wdGlvbnMgPT09IHZvaWQgMCA/IHt9IDogX3JlZjMkb3B0aW9ucyxcbiAgICAgICAgICAgIGVmZmVjdCA9IF9yZWYzLmVmZmVjdDtcblxuICAgICAgICBpZiAodHlwZW9mIGVmZmVjdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIHZhciBjbGVhbnVwRm4gPSBlZmZlY3Qoe1xuICAgICAgICAgICAgc3RhdGU6IHN0YXRlLFxuICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgIGluc3RhbmNlOiBpbnN0YW5jZSxcbiAgICAgICAgICAgIG9wdGlvbnM6IG9wdGlvbnNcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIHZhciBub29wRm4gPSBmdW5jdGlvbiBub29wRm4oKSB7fTtcblxuICAgICAgICAgIGVmZmVjdENsZWFudXBGbnMucHVzaChjbGVhbnVwRm4gfHwgbm9vcEZuKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xlYW51cE1vZGlmaWVyRWZmZWN0cygpIHtcbiAgICAgIGVmZmVjdENsZWFudXBGbnMuZm9yRWFjaChmdW5jdGlvbiAoZm4pIHtcbiAgICAgICAgcmV0dXJuIGZuKCk7XG4gICAgICB9KTtcbiAgICAgIGVmZmVjdENsZWFudXBGbnMgPSBbXTtcbiAgICB9XG5cbiAgICByZXR1cm4gaW5zdGFuY2U7XG4gIH07XG59XG5leHBvcnQgdmFyIGNyZWF0ZVBvcHBlciA9IC8qI19fUFVSRV9fKi9wb3BwZXJHZW5lcmF0b3IoKTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bnVzZWQtbW9kdWxlc1xuXG5leHBvcnQgeyBkZXRlY3RPdmVyZmxvdyB9OyIsICJpbXBvcnQgeyBwb3BwZXJHZW5lcmF0b3IsIGRldGVjdE92ZXJmbG93IH0gZnJvbSBcIi4vY3JlYXRlUG9wcGVyLmpzXCI7XG5pbXBvcnQgZXZlbnRMaXN0ZW5lcnMgZnJvbSBcIi4vbW9kaWZpZXJzL2V2ZW50TGlzdGVuZXJzLmpzXCI7XG5pbXBvcnQgcG9wcGVyT2Zmc2V0cyBmcm9tIFwiLi9tb2RpZmllcnMvcG9wcGVyT2Zmc2V0cy5qc1wiO1xuaW1wb3J0IGNvbXB1dGVTdHlsZXMgZnJvbSBcIi4vbW9kaWZpZXJzL2NvbXB1dGVTdHlsZXMuanNcIjtcbmltcG9ydCBhcHBseVN0eWxlcyBmcm9tIFwiLi9tb2RpZmllcnMvYXBwbHlTdHlsZXMuanNcIjtcbmltcG9ydCBvZmZzZXQgZnJvbSBcIi4vbW9kaWZpZXJzL29mZnNldC5qc1wiO1xuaW1wb3J0IGZsaXAgZnJvbSBcIi4vbW9kaWZpZXJzL2ZsaXAuanNcIjtcbmltcG9ydCBwcmV2ZW50T3ZlcmZsb3cgZnJvbSBcIi4vbW9kaWZpZXJzL3ByZXZlbnRPdmVyZmxvdy5qc1wiO1xuaW1wb3J0IGFycm93IGZyb20gXCIuL21vZGlmaWVycy9hcnJvdy5qc1wiO1xuaW1wb3J0IGhpZGUgZnJvbSBcIi4vbW9kaWZpZXJzL2hpZGUuanNcIjtcbnZhciBkZWZhdWx0TW9kaWZpZXJzID0gW2V2ZW50TGlzdGVuZXJzLCBwb3BwZXJPZmZzZXRzLCBjb21wdXRlU3R5bGVzLCBhcHBseVN0eWxlcywgb2Zmc2V0LCBmbGlwLCBwcmV2ZW50T3ZlcmZsb3csIGFycm93LCBoaWRlXTtcbnZhciBjcmVhdGVQb3BwZXIgPSAvKiNfX1BVUkVfXyovcG9wcGVyR2VuZXJhdG9yKHtcbiAgZGVmYXVsdE1vZGlmaWVyczogZGVmYXVsdE1vZGlmaWVyc1xufSk7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuZXhwb3J0IHsgY3JlYXRlUG9wcGVyLCBwb3BwZXJHZW5lcmF0b3IsIGRlZmF1bHRNb2RpZmllcnMsIGRldGVjdE92ZXJmbG93IH07IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW51c2VkLW1vZHVsZXNcblxuZXhwb3J0IHsgY3JlYXRlUG9wcGVyIGFzIGNyZWF0ZVBvcHBlckxpdGUgfSBmcm9tIFwiLi9wb3BwZXItbGl0ZS5qc1wiOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLXVudXNlZC1tb2R1bGVzXG5cbmV4cG9ydCAqIGZyb20gXCIuL21vZGlmaWVycy9pbmRleC5qc1wiOyIsICJpbXBvcnQgeyBuYW5vaWQgfSBmcm9tIFwic3JjL3V0aWwvdXRpbFwiO1xuaW1wb3J0IHR5cGUgeyBMYXlvdXQsIFN0YXRibG9ja0l0ZW0gfSBmcm9tIFwiLi90eXBlc1wiO1xuXG5leHBvcnQgY29uc3QgU3RhdGJsb2NrRmF0ZUNvcmU6IFN0YXRibG9ja0l0ZW1bXSA9IFtcbiAge1xuICAgIHR5cGU6IFwiaW5saW5lXCIsXG4gICAgaWQ6IG5hbm9pZCgpLFxuICAgIHByb3BlcnRpZXM6IFtdLFxuICAgIGhhc1J1bGU6IHRydWUsXG4gICAgbmVzdGVkOiBbXG4gICAgICB7XG4gICAgICAgIHR5cGU6IFwiZ3JvdXBcIixcbiAgICAgICAgaWQ6IG5hbm9pZCgpLFxuICAgICAgICBwcm9wZXJ0aWVzOiBbXCJuYW1lXCIsIFwiZGVzY3JpcHRpb25cIiwgXCJhc3BlY3RzXCIsIFwidGVtcG9yYXJ5QXNwZWN0c1wiXSxcbiAgICAgICAgbmVzdGVkOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgdHlwZTogXCJoZWFkaW5nXCIsXG4gICAgICAgICAgICBpZDogbmFub2lkKCksXG4gICAgICAgICAgICBwcm9wZXJ0aWVzOiBbXCJuYW1lXCJdLFxuICAgICAgICAgICAgY29uZGl0aW9uZWQ6IHRydWUsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICB0eXBlOiBcInRleHRcIixcbiAgICAgICAgICAgIGlkOiBuYW5vaWQoKSxcbiAgICAgICAgICAgIHByb3BlcnRpZXM6IFtcImRlc2NyaXB0aW9uXCJdLFxuICAgICAgICAgICAgY29uZGl0aW9uZWQ6IHRydWUsXG4gICAgICAgICAgICBtYXJrZG93bjogdHJ1ZSxcbiAgICAgICAgICAgIHRleHQ6IG51bGwsXG4gICAgICAgICAgICBkaWNlOiBmYWxzZSxcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHR5cGU6IFwidGV4dFwiLFxuICAgICAgICAgICAgaWQ6IG5hbm9pZCgpLFxuICAgICAgICAgICAgcHJvcGVydGllczogW1wiYXNwZWN0c1wiXSxcbiAgICAgICAgICAgIG1hcmtkb3duOiB0cnVlLFxuICAgICAgICAgICAgdGV4dDogbnVsbCxcbiAgICAgICAgICAgIGRpY2U6IGZhbHNlLFxuICAgICAgICAgICAgY29uZGl0aW9uZWQ6IHRydWUsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICB0eXBlOiBcInRleHRcIixcbiAgICAgICAgICAgIGlkOiBuYW5vaWQoKSxcbiAgICAgICAgICAgIHByb3BlcnRpZXM6IFtcInRlbXBvcmFyeUFzcGVjdHNcIl0sXG4gICAgICAgICAgICBtYXJrZG93bjogdHJ1ZSxcbiAgICAgICAgICAgIHRleHQ6IG51bGwsXG4gICAgICAgICAgICBkaWNlOiBmYWxzZSxcbiAgICAgICAgICAgIGNvbmRpdGlvbmVkOiB0cnVlLFxuICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICAgIGNvbmRpdGlvbmVkOiB0cnVlLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgdHlwZTogXCJpbWFnZVwiLFxuICAgICAgICBpZDogbmFub2lkKCksXG4gICAgICAgIHByb3BlcnRpZXM6IFtcImltYWdlXCJdLFxuICAgICAgICBjb25kaXRpb25lZDogdHJ1ZSxcbiAgICAgIH0sXG4gICAgXSxcbiAgfSxcbiAge1xuICAgIHR5cGU6IFwidGFibGVcIixcbiAgICBpZDogbmFub2lkKCksXG4gICAgcHJvcGVydGllczogW1wic3RyZXNzXCJdLFxuICAgIGhlYWRlcnM6IFtcIlBoeXNpY2FsXCIsIFwiTWVudGFsXCJdLFxuICAgIGNhbGN1bGF0ZTogZmFsc2UsXG4gICAgaGFzUnVsZTogdHJ1ZSxcbiAgICBjb25kaXRpb25lZDogdHJ1ZSxcbiAgfSxcbiAge1xuICAgIHR5cGU6IFwidHJhaXRzXCIsXG4gICAgaWQ6IG5hbm9pZCgpLFxuICAgIHByb3BlcnRpZXM6IFtcImNvbnNlcXVlbmNlc1wiXSxcbiAgICBjb25kaXRpb25lZDogdHJ1ZSxcbiAgICBoZWFkaW5nOiBcIkNvbnNlcXVlbmNlc1wiLFxuICB9LFxuICB7XG4gICAgdHlwZTogXCJ0cmFpdHNcIixcbiAgICBpZDogbmFub2lkKCksXG4gICAgcHJvcGVydGllczogW1wic2tpbGxzXCJdLFxuICAgIGNvbmRpdGlvbmVkOiB0cnVlLFxuICAgIGhhc1J1bGU6IGZhbHNlLFxuICAgIGhlYWRpbmc6IFwiU2tpbGxzXCIsXG4gIH0sXG4gIHtcbiAgICB0eXBlOiBcInRyYWl0c1wiLFxuICAgIGlkOiBuYW5vaWQoKSxcbiAgICBwcm9wZXJ0aWVzOiBbXCJzdHVudHNcIl0sXG4gICAgbWFya2Rvd246IHRydWUsXG4gICAgZGljZTogZmFsc2UsXG4gICAgY29uZGl0aW9uZWQ6IHRydWUsXG4gICAgaGVhZGluZzogXCJTdHVudHNcIixcbiAgfSxcbiAge1xuICAgIHR5cGU6IFwidHJhaXRzXCIsXG4gICAgaWQ6IG5hbm9pZCgpLFxuICAgIHByb3BlcnRpZXM6IFtcIml0ZW1zXCJdLFxuICAgIGhlYWRpbmc6IFwiSXRlbXNcIixcbiAgICBjb25kaXRpb25lZDogdHJ1ZSxcbiAgICBtYXJrZG93bjogdHJ1ZSxcbiAgICBkaWNlOiBmYWxzZSxcbiAgfSxcbiAge1xuICAgIHR5cGU6IFwidHJhaXRzXCIsXG4gICAgaWQ6IG5hbm9pZCgpLFxuICAgIHByb3BlcnRpZXM6IFtcImV4dHJhc1wiXSxcbiAgICBoZWFkaW5nOiBcIkV4dHJhc1wiLFxuICAgIGNvbmRpdGlvbmVkOiB0cnVlLFxuICAgIG1hcmtkb3duOiB0cnVlLFxuICAgIGRpY2U6IGZhbHNlLFxuICB9LFxuXTtcblxuZXhwb3J0IGNvbnN0IExheW91dEZhdGVDb3JlOiBMYXlvdXQgPSB7XG4gIGJsb2NrczogU3RhdGJsb2NrRmF0ZUNvcmUsXG4gIG5hbWU6IFwiQmFzaWMgRmF0ZSBDb3JlIExheW91dFwiLFxufTtcbiIsICJpbXBvcnQgeyBMYXlvdXQ1ZSB9IGZyb20gXCIuL2Jhc2ljNWVcIjtcbmltcG9ydCB7IExheW91dEZhdGVDb3JlIH0gZnJvbSBcIi4vZmF0ZUNvcmVcIjtcblxuZXhwb3J0ICogZnJvbSBcIi4vYmFzaWM1ZVwiO1xuZXhwb3J0ICogZnJvbSBcIi4vZmF0ZUNvcmVcIjtcblxuZXhwb3J0IGNvbnN0IERlZmF1bHRMYXlvdXRzID0gW1xuICAgIExheW91dDVlLFxuICAgIExheW91dEZhdGVDb3JlLFxuICAgIC8qKiBBZGRpdGlvbmFsIERlZmF1bHQgTGF5b3V0cyBzaG91bGQgYmUgYWRkZWQgaGVyZS4gKi9cbl07XG4iLCAiLy8gPj4+IElOVEVSRkFDRVMgPDw8XHJcbi8vID4+PiBIRUxQRVJTIDw8PFxyXG52YXIgY2FzdENvbXBhcmVyID0gZnVuY3Rpb24gKGNvbXBhcmVyKSB7IHJldHVybiBmdW5jdGlvbiAoYSwgYiwgb3JkZXIpIHsgcmV0dXJuIGNvbXBhcmVyKGEsIGIsIG9yZGVyKSAqIG9yZGVyOyB9OyB9O1xyXG52YXIgdGhyb3dJbnZhbGlkQ29uZmlnRXJyb3JJZlRydWUgPSBmdW5jdGlvbiAoY29uZGl0aW9uLCBjb250ZXh0KSB7XHJcbiAgICBpZiAoY29uZGl0aW9uKVxyXG4gICAgICAgIHRocm93IEVycm9yKFwiSW52YWxpZCBzb3J0IGNvbmZpZzogXCIgKyBjb250ZXh0KTtcclxufTtcclxudmFyIHVucGFja09iamVjdFNvcnRlciA9IGZ1bmN0aW9uIChzb3J0QnlPYmopIHtcclxuICAgIHZhciBfYSA9IHNvcnRCeU9iaiB8fCB7fSwgYXNjID0gX2EuYXNjLCBkZXNjID0gX2EuZGVzYztcclxuICAgIHZhciBvcmRlciA9IGFzYyA/IDEgOiAtMTtcclxuICAgIHZhciBzb3J0QnkgPSAoYXNjIHx8IGRlc2MpO1xyXG4gICAgLy8gVmFsaWRhdGUgb2JqZWN0IGNvbmZpZ1xyXG4gICAgdGhyb3dJbnZhbGlkQ29uZmlnRXJyb3JJZlRydWUoIXNvcnRCeSwgJ0V4cGVjdGVkIGBhc2NgIG9yIGBkZXNjYCBwcm9wZXJ0eScpO1xyXG4gICAgdGhyb3dJbnZhbGlkQ29uZmlnRXJyb3JJZlRydWUoYXNjICYmIGRlc2MsICdBbWJpZ3VvdXMgb2JqZWN0IHdpdGggYGFzY2AgYW5kIGBkZXNjYCBjb25maWcgcHJvcGVydGllcycpO1xyXG4gICAgdmFyIGNvbXBhcmVyID0gc29ydEJ5T2JqLmNvbXBhcmVyICYmIGNhc3RDb21wYXJlcihzb3J0QnlPYmouY29tcGFyZXIpO1xyXG4gICAgcmV0dXJuIHsgb3JkZXI6IG9yZGVyLCBzb3J0Qnk6IHNvcnRCeSwgY29tcGFyZXI6IGNvbXBhcmVyIH07XHJcbn07XHJcbi8vID4+PiBTT1JURVJTIDw8PFxyXG52YXIgbXVsdGlQcm9wZXJ0eVNvcnRlclByb3ZpZGVyID0gZnVuY3Rpb24gKGRlZmF1bHRDb21wYXJlcikge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG11bHRpUHJvcGVydHlTb3J0ZXIoc29ydEJ5LCBzb3J0QnlBcnIsIGRlcHRoLCBvcmRlciwgY29tcGFyZXIsIGEsIGIpIHtcclxuICAgICAgICB2YXIgdmFsQTtcclxuICAgICAgICB2YXIgdmFsQjtcclxuICAgICAgICBpZiAodHlwZW9mIHNvcnRCeSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgdmFsQSA9IGFbc29ydEJ5XTtcclxuICAgICAgICAgICAgdmFsQiA9IGJbc29ydEJ5XTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIHNvcnRCeSA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICB2YWxBID0gc29ydEJ5KGEpO1xyXG4gICAgICAgICAgICB2YWxCID0gc29ydEJ5KGIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdmFyIG9iamVjdFNvcnRlckNvbmZpZyA9IHVucGFja09iamVjdFNvcnRlcihzb3J0QnkpO1xyXG4gICAgICAgICAgICByZXR1cm4gbXVsdGlQcm9wZXJ0eVNvcnRlcihvYmplY3RTb3J0ZXJDb25maWcuc29ydEJ5LCBzb3J0QnlBcnIsIGRlcHRoLCBvYmplY3RTb3J0ZXJDb25maWcub3JkZXIsIG9iamVjdFNvcnRlckNvbmZpZy5jb21wYXJlciB8fCBkZWZhdWx0Q29tcGFyZXIsIGEsIGIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgZXF1YWxpdHkgPSBjb21wYXJlcih2YWxBLCB2YWxCLCBvcmRlcik7XHJcbiAgICAgICAgaWYgKChlcXVhbGl0eSA9PT0gMCB8fCAodmFsQSA9PSBudWxsICYmIHZhbEIgPT0gbnVsbCkpICYmXHJcbiAgICAgICAgICAgIHNvcnRCeUFyci5sZW5ndGggPiBkZXB0aCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbXVsdGlQcm9wZXJ0eVNvcnRlcihzb3J0QnlBcnJbZGVwdGhdLCBzb3J0QnlBcnIsIGRlcHRoICsgMSwgb3JkZXIsIGNvbXBhcmVyLCBhLCBiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGVxdWFsaXR5O1xyXG4gICAgfTtcclxufTtcclxuZnVuY3Rpb24gZ2V0U29ydFN0cmF0ZWd5KHNvcnRCeSwgY29tcGFyZXIsIG9yZGVyKSB7XHJcbiAgICAvLyBGbGF0IGFycmF5IHNvcnRlclxyXG4gICAgaWYgKHNvcnRCeSA9PT0gdW5kZWZpbmVkIHx8IHNvcnRCeSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gY29tcGFyZXIoYSwgYiwgb3JkZXIpOyB9O1xyXG4gICAgfVxyXG4gICAgLy8gU29ydCBsaXN0IG9mIG9iamVjdHMgYnkgc2luZ2xlIG9iamVjdCBrZXlcclxuICAgIGlmICh0eXBlb2Ygc29ydEJ5ID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgIHRocm93SW52YWxpZENvbmZpZ0Vycm9ySWZUcnVlKHNvcnRCeS5pbmNsdWRlcygnLicpLCAnU3RyaW5nIHN5bnRheCBub3QgYWxsb3dlZCBmb3IgbmVzdGVkIHByb3BlcnRpZXMuJyk7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBjb21wYXJlcihhW3NvcnRCeV0sIGJbc29ydEJ5XSwgb3JkZXIpOyB9O1xyXG4gICAgfVxyXG4gICAgLy8gU29ydCBsaXN0IG9mIG9iamVjdHMgYnkgc2luZ2xlIGZ1bmN0aW9uIHNvcnRlclxyXG4gICAgaWYgKHR5cGVvZiBzb3J0QnkgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGEsIGIpIHsgcmV0dXJuIGNvbXBhcmVyKHNvcnRCeShhKSwgc29ydEJ5KGIpLCBvcmRlcik7IH07XHJcbiAgICB9XHJcbiAgICAvLyBTb3J0IGJ5IG11bHRpcGxlIHByb3BlcnRpZXNcclxuICAgIGlmIChBcnJheS5pc0FycmF5KHNvcnRCeSkpIHtcclxuICAgICAgICB2YXIgbXVsdGlQcm9wU29ydGVyXzEgPSBtdWx0aVByb3BlcnR5U29ydGVyUHJvdmlkZXIoY29tcGFyZXIpO1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gbXVsdGlQcm9wU29ydGVyXzEoc29ydEJ5WzBdLCBzb3J0QnksIDEsIG9yZGVyLCBjb21wYXJlciwgYSwgYik7IH07XHJcbiAgICB9XHJcbiAgICAvLyBVbnBhY2sgb2JqZWN0IGNvbmZpZyB0byBnZXQgYWN0dWFsIHNvcnRlciBzdHJhdGVneVxyXG4gICAgdmFyIG9iamVjdFNvcnRlckNvbmZpZyA9IHVucGFja09iamVjdFNvcnRlcihzb3J0QnkpO1xyXG4gICAgcmV0dXJuIGdldFNvcnRTdHJhdGVneShvYmplY3RTb3J0ZXJDb25maWcuc29ydEJ5LCBvYmplY3RTb3J0ZXJDb25maWcuY29tcGFyZXIgfHwgY29tcGFyZXIsIG9iamVjdFNvcnRlckNvbmZpZy5vcmRlcik7XHJcbn1cclxudmFyIHNvcnRBcnJheSA9IGZ1bmN0aW9uIChvcmRlciwgY3R4LCBzb3J0QnksIGNvbXBhcmVyKSB7XHJcbiAgICB2YXIgX2E7XHJcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoY3R4KSkge1xyXG4gICAgICAgIHJldHVybiBjdHg7XHJcbiAgICB9XHJcbiAgICAvLyBVbndyYXAgc29ydEJ5IGlmIGFycmF5IHdpdGggb25seSAxIHZhbHVlIHRvIGdldCBmYXN0ZXIgc29ydCBzdHJhdGVneVxyXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoc29ydEJ5KSAmJiBzb3J0QnkubGVuZ3RoIDwgMikge1xyXG4gICAgICAgIF9hID0gc29ydEJ5LCBzb3J0QnkgPSBfYVswXTtcclxuICAgIH1cclxuICAgIHJldHVybiBjdHguc29ydChnZXRTb3J0U3RyYXRlZ3koc29ydEJ5LCBjb21wYXJlciwgb3JkZXIpKTtcclxufTtcclxuZnVuY3Rpb24gY3JlYXRlTmV3U29ydEluc3RhbmNlKG9wdHMpIHtcclxuICAgIHZhciBjb21wYXJlciA9IGNhc3RDb21wYXJlcihvcHRzLmNvbXBhcmVyKTtcclxuICAgIHJldHVybiBmdW5jdGlvbiAoX2N0eCkge1xyXG4gICAgICAgIHZhciBjdHggPSBBcnJheS5pc0FycmF5KF9jdHgpICYmICFvcHRzLmluUGxhY2VTb3J0aW5nXHJcbiAgICAgICAgICAgID8gX2N0eC5zbGljZSgpXHJcbiAgICAgICAgICAgIDogX2N0eDtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBhc2M6IGZ1bmN0aW9uIChzb3J0QnkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBzb3J0QXJyYXkoMSwgY3R4LCBzb3J0QnksIGNvbXBhcmVyKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZGVzYzogZnVuY3Rpb24gKHNvcnRCeSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNvcnRBcnJheSgtMSwgY3R4LCBzb3J0QnksIGNvbXBhcmVyKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgYnk6IGZ1bmN0aW9uIChzb3J0QnkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBzb3J0QXJyYXkoMSwgY3R4LCBzb3J0QnksIGNvbXBhcmVyKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9O1xyXG4gICAgfTtcclxufVxyXG52YXIgZGVmYXVsdENvbXBhcmVyID0gZnVuY3Rpb24gKGEsIGIsIG9yZGVyKSB7XHJcbiAgICBpZiAoYSA9PSBudWxsKVxyXG4gICAgICAgIHJldHVybiBvcmRlcjtcclxuICAgIGlmIChiID09IG51bGwpXHJcbiAgICAgICAgcmV0dXJuIC1vcmRlcjtcclxuICAgIGlmIChhIDwgYilcclxuICAgICAgICByZXR1cm4gLTE7XHJcbiAgICBpZiAoYSA+IGIpXHJcbiAgICAgICAgcmV0dXJuIDE7XHJcbiAgICByZXR1cm4gMDtcclxufTtcclxudmFyIHNvcnQgPSBjcmVhdGVOZXdTb3J0SW5zdGFuY2Uoe1xyXG4gICAgY29tcGFyZXI6IGRlZmF1bHRDb21wYXJlcixcclxufSk7XHJcbnZhciBpblBsYWNlU29ydCA9IGNyZWF0ZU5ld1NvcnRJbnN0YW5jZSh7XHJcbiAgICBjb21wYXJlcjogZGVmYXVsdENvbXBhcmVyLFxyXG4gICAgaW5QbGFjZVNvcnRpbmc6IHRydWUsXHJcbn0pO1xuXG5leHBvcnQgeyBjcmVhdGVOZXdTb3J0SW5zdGFuY2UsIGluUGxhY2VTb3J0LCBzb3J0IH07XG4iLCAiaW1wb3J0IHsgQ29tcG9uZW50LCBOb3RpY2UsIFRBYnN0cmFjdEZpbGUsIFRGaWxlLCBURm9sZGVyIH0gZnJvbSBcIm9ic2lkaWFuXCI7XG5pbXBvcnQgdHlwZSBTdGF0QmxvY2tQbHVnaW4gZnJvbSBcInNyYy9tYWluXCI7XG4vL2hhdmUgdG8gaWdub3JlIHVudGlsIGkgZml4IHR5cGluZyBpc3N1ZVxuLy9AdHMtZXhwZWN0LWVycm9yXG5pbXBvcnQgV29ya2VyLCB7XG4gICAgR2V0RmlsZUNhY2hlTWVzc2FnZSxcbiAgICBGaWxlQ2FjaGVNZXNzYWdlLFxuICAgIFF1ZXVlTWVzc2FnZSxcbiAgICBVcGRhdGVFdmVudE1lc3NhZ2UsXG4gICAgU2F2ZU1lc3NhZ2UsXG4gICAgRmluaXNoRmlsZU1lc3NhZ2UsXG4gICAgRGVidWdNZXNzYWdlXG59IGZyb20gXCIuL3dhdGNoZXIud29ya2VyXCI7XG5cbmRlY2xhcmUgZ2xvYmFsIHtcbiAgICBpbnRlcmZhY2UgV29ya2VyIHtcbiAgICAgICAgcG9zdE1lc3NhZ2U8VD4obWVzc2FnZTogVCwgdHJhbnNmZXI/OiBUcmFuc2ZlcmFibGVbXSk6IHZvaWQ7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgV2F0Y2hlciBleHRlbmRzIENvbXBvbmVudCB7XG4gICAgYW5ub3VuY2U6IGJvb2xlYW47XG4gICAgZ2V0IG1ldGFkYXRhQ2FjaGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBsdWdpbi5hcHAubWV0YWRhdGFDYWNoZTtcbiAgICB9XG4gICAgZ2V0IHZhdWx0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wbHVnaW4uYXBwLnZhdWx0O1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgcGx1Z2luOiBTdGF0QmxvY2tQbHVnaW4pIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG5cbiAgICB3YXRjaFBhdGhzOiBNYXA8c3RyaW5nLCBzdHJpbmc+ID0gbmV3IE1hcCgpO1xuXG4gICAgd29ya2VyID0gbmV3IFdvcmtlcigpO1xuICAgIHNldERlYnVnKCkge1xuICAgICAgICB0aGlzLndvcmtlci5wb3N0TWVzc2FnZTxEZWJ1Z01lc3NhZ2U+KHtcbiAgICAgICAgICAgIHR5cGU6IFwiZGVidWdcIixcbiAgICAgICAgICAgIGRlYnVnOiB0aGlzLnBsdWdpbi5zZXR0aW5ncy5kZWJ1Z1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgb25sb2FkKCkge1xuICAgICAgICB0aGlzLnNldERlYnVnKCk7XG4gICAgICAgIC8qKiBNZXRhZGF0YSBmb3IgYSBmaWxlIGhhcyBjaGFuZ2VkIGFuZCB0aGUgZmlsZSBzaG91bGQgYmUgY2hlY2tlZC4gKi9cbiAgICAgICAgdGhpcy5yZWdpc3RlckV2ZW50KFxuICAgICAgICAgICAgdGhpcy5tZXRhZGF0YUNhY2hlLm9uKFwiY2hhbmdlZFwiLCBhc3luYyAoZmlsZSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5wbHVnaW4uc2V0dGluZ3MuYXV0b1BhcnNlKSByZXR1cm47XG4gICAgICAgICAgICAgICAgY29uc3QgeyBmcm9udG1hdHRlciB9ID1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZShmaWxlKSA/PyB7fTtcbiAgICAgICAgICAgICAgICBpZiAoIWZyb250bWF0dGVyIHx8ICFmcm9udG1hdHRlci5zdGF0YmxvY2spIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMud2F0Y2hQYXRocy5oYXMoZmlsZS5wYXRoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kZWxldGUoZmlsZS5wYXRoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnBsdWdpbi5zZXR0aW5ncy5kZWJ1ZylcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5kZWJ1ZyhgVFRSUEc6IFJlcGFyc2luZyAke2ZpbGUubmFtZX1gKTtcbiAgICAgICAgICAgICAgICB0aGlzLnBhcnNlUGF0aChmaWxlKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgICAgIC8qKiBBIGZpbGUgaGFzIGJlZW4gcmVuYW1lZCBhbmQgc2hvdWxkIGJlIGNoZWNrZWQgZm9yIGV2ZW50cy5cbiAgICAgICAgICogQ291bGQgdGhpcyBiZSBoYXNoZWQ/XG4gICAgICAgICAqL1xuICAgICAgICAvL1RPRE86IFJlZmFjdG9yXG4gICAgICAgIHRoaXMucmVnaXN0ZXJFdmVudChcbiAgICAgICAgICAgIHRoaXMudmF1bHQub24oXCJyZW5hbWVcIiwgYXN5bmMgKGFic3RyYWN0RmlsZSwgb2xkUGF0aCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5wbHVnaW4uc2V0dGluZ3MuYXV0b1BhcnNlKSByZXR1cm47XG4gICAgICAgICAgICAgICAgaWYgKCEoYWJzdHJhY3RGaWxlIGluc3RhbmNlb2YgVEZpbGUpKSByZXR1cm47XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLndhdGNoUGF0aHMuaGFzKG9sZFBhdGgpKSByZXR1cm47XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5wbHVnaW4uc2V0dGluZ3MuZGVidWcpXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZGVidWcoXG4gICAgICAgICAgICAgICAgICAgICAgICBgVFRSUEc6IEhhbmRsaW5nIHJlbmFtZSBvZiAke29sZFBhdGh9IHRvICR7YWJzdHJhY3RGaWxlLnBhdGh9YFxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuZGVsZXRlKG9sZFBhdGgpO1xuICAgICAgICAgICAgICAgIHRoaXMucGFyc2VQYXRoKGFic3RyYWN0RmlsZSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICApO1xuICAgICAgICAvKiogQSBmaWxlIGhhcyBiZWVuIGRlbGV0ZWQgYW5kIHNob3VsZCBiZSBjaGVja2VkIGZvciBldmVudHMgdG8gdW5saW5rLiAqL1xuICAgICAgICAvL1RPRE86IFJlZmFjdG9yXG4gICAgICAgIHRoaXMucmVnaXN0ZXJFdmVudChcbiAgICAgICAgICAgIHRoaXMudmF1bHQub24oXCJkZWxldGVcIiwgKGFic3RyYWN0RmlsZSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5wbHVnaW4uc2V0dGluZ3MuYXV0b1BhcnNlKSByZXR1cm47XG4gICAgICAgICAgICAgICAgaWYgKCEoYWJzdHJhY3RGaWxlIGluc3RhbmNlb2YgVEZpbGUpKSByZXR1cm47XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLndhdGNoUGF0aHMuaGFzKGFic3RyYWN0RmlsZS5wYXRoKSkgcmV0dXJuO1xuICAgICAgICAgICAgICAgIHRoaXMuZGVsZXRlKGFic3RyYWN0RmlsZS5wYXRoKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICk7XG5cbiAgICAgICAgLy93b3JrZXIgbWVzc2FnZXNcbiAgICAgICAgLyoqIFRoZSB3b3JrZXIgd2lsbCBhc2sgZm9yIGZpbGUgaW5mb3JtYXRpb24gZnJvbSBmaWxlcyBpbiBpdHMgcXVldWUgaGVyZSAqL1xuICAgICAgICB0aGlzLndvcmtlci5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgICAgICAgXCJtZXNzYWdlXCIsXG4gICAgICAgICAgICAoZXZlbnQ6IE1lc3NhZ2VFdmVudDxHZXRGaWxlQ2FjaGVNZXNzYWdlPikgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChldmVudC5kYXRhLnR5cGUgPT0gXCJnZXRcIikge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB7IHBhdGggfSA9IGV2ZW50LmRhdGE7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSB0aGlzLmdldEZpbGVJbmZvcm1hdGlvbihwYXRoKTtcbiAgICAgICAgICAgICAgICAgICAgLy9UT0RPOiBBZGQgaW4gZmlsZSBkYXRhIHBhcnNpbmcgZm9yIGV2ZW50c1xuICAgICAgICAgICAgICAgICAgICAvL1RPRE86IEUuZy4sIHRpbWVsaW5lc1xuICAgICAgICAgICAgICAgICAgICB0aGlzLndvcmtlci5wb3N0TWVzc2FnZTxGaWxlQ2FjaGVNZXNzYWdlPih7XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImZpbGVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5kYXRhXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcblxuICAgICAgICAvKiogVGhlIHdvcmtlciBoYXMgZm91bmQgYW4gZXZlbnQgdGhhdCBzaG91bGQgYmUgdXBkYXRlZC4gKi9cbiAgICAgICAgdGhpcy53b3JrZXIuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgICAgIFwibWVzc2FnZVwiLFxuICAgICAgICAgICAgYXN5bmMgKGV2dDogTWVzc2FnZUV2ZW50PFVwZGF0ZUV2ZW50TWVzc2FnZT4pID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZXZ0LmRhdGEudHlwZSA9PSBcInVwZGF0ZVwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgbW9uc3RlciwgcGF0aCB9ID0gZXZ0LmRhdGE7XG4gICAgICAgICAgICAgICAgICAgIGxldCB1cGRhdGUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMud2F0Y2hQYXRocy5oYXMocGF0aCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGV4aXN0aW5nID0gdGhpcy53YXRjaFBhdGhzLmdldChwYXRoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLmRlbGV0ZU1vbnN0ZXIoZXhpc3RpbmcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnBsdWdpbi5zZXR0aW5ncy5kZWJ1ZylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmRlYnVnKGBUVFJQRzogVXBkYXRpbmcgJHttb25zdGVyLm5hbWV9YCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy53YXRjaFBhdGhzLnNldChwYXRoLCBtb25zdGVyLm5hbWUpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsdWdpbi5zYXZlTW9uc3Rlcihtb25zdGVyLCBmYWxzZSwgZmFsc2UpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnBsdWdpbi5zZXR0aW5ncy5kZWJ1ZylcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZGVidWcoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYFRUUlBHOiAke3VwZGF0ZSA/IFwiVXBkYXRlZFwiIDogXCJBZGRlZFwifSAke1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb25zdGVyLm5hbWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9YFxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG5cbiAgICAgICAgLyoqIFRoZSB3b3JrZXIgaGFzIHBhcnNlZCBhbGwgZmlsZXMgaW4gaXRzIHF1ZXVlLiAqL1xuICAgICAgICB0aGlzLndvcmtlci5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgICAgICAgXCJtZXNzYWdlXCIsXG4gICAgICAgICAgICBhc3luYyAoZXZ0OiBNZXNzYWdlRXZlbnQ8U2F2ZU1lc3NhZ2U+KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGV2dC5kYXRhLnR5cGUgPT0gXCJzYXZlXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5zYXZlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICB0aGlzLnBsdWdpbi5hcHAud29ya3NwYWNlLm9uTGF5b3V0UmVhZHkoKCkgPT4ge1xuICAgICAgICAgICAgZm9yIChjb25zdCBbXywgbW9uc3Rlcl0gb2YgdGhpcy5wbHVnaW4uc2V0dGluZ3MubW9uc3RlcnMuZmlsdGVyKFxuICAgICAgICAgICAgICAgIChbXywgbW9uc3Rlcl0pID0+IG1vbnN0ZXIubm90ZVxuICAgICAgICAgICAgKSkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLndhdGNoUGF0aHMuaGFzKG1vbnN0ZXIubm90ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy9tdWx0aXBsZSBkZWZpbmVkIGZvciB0aGlzIG5vdGUuLi4gZGVsZXRlIHRoZW0gYWxsXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGx1Z2luLmRlbGV0ZU1vbnN0ZXIobW9uc3Rlci5uYW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy53YXRjaFBhdGhzLnNldChtb25zdGVyLm5vdGUsIG1vbnN0ZXIubmFtZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghdGhpcy5wbHVnaW4uc2V0dGluZ3MuYXV0b1BhcnNlKSByZXR1cm47XG4gICAgICAgICAgICB0aGlzLnN0YXJ0KCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBhc3luYyBzYXZlKCkge1xuICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcbiAgICAgICAgaWYgKHRoaXMuc3RhcnRUaW1lKSB7XG4gICAgICAgICAgICBjb25zb2xlLmluZm8oXG4gICAgICAgICAgICAgICAgYFRUUlBHIFN0YXRibG9ja3M6IEZyb250bWF0dGVyIFBhcnNpbmcgQ29tcGxldGUgaW4gJHsoXG4gICAgICAgICAgICAgICAgICAgIChEYXRlLm5vdygpIC0gdGhpcy5zdGFydFRpbWUpIC9cbiAgICAgICAgICAgICAgICAgICAgMTAwMFxuICAgICAgICAgICAgICAgICkudG9Mb2NhbGVTdHJpbmcoKX0gc2Vjb25kcy5gXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgdGhpcy5zdGFydFRpbWUgPSAwO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmFubm91bmNlKSB7XG4gICAgICAgICAgICBuZXcgTm90aWNlKFwiVFRSUEcgU3RhdGJsb2NrczogRnJvbnRtYXR0ZXIgUGFyc2luZyBjb21wbGV0ZS5cIik7XG4gICAgICAgICAgICB0aGlzLmFubm91bmNlID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgZGVsZXRlKHBhdGg6IHN0cmluZykge1xuICAgICAgICBhd2FpdCB0aGlzLnBsdWdpbi5kZWxldGVNb25zdGVyKHRoaXMud2F0Y2hQYXRocy5nZXQocGF0aCkpO1xuICAgICAgICB0aGlzLndhdGNoUGF0aHMuZGVsZXRlKHBhdGgpO1xuICAgICAgICBpZiAodGhpcy5wbHVnaW4uc2V0dGluZ3MuZGVidWcpXG4gICAgICAgICAgICBjb25zb2xlLmRlYnVnKGBUVFJQRzogUmVtb3ZpbmcgJyR7cGF0aH0nIGZyb20gYmVzdGlhcnlgKTtcbiAgICB9XG4gICAgc3RhcnRUaW1lOiBudW1iZXI7XG4gICAgc3RhcnQoYW5ub3VuY2UgPSBmYWxzZSkge1xuICAgICAgICB0aGlzLmFubm91bmNlID0gYW5ub3VuY2U7XG4gICAgICAgIHRoaXMuc3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcbiAgICAgICAgY29uc29sZS5pbmZvKFwiVFRSUEcgU3RhdGJsb2NrczogU3RhcnRpbmcgRnJvbnRtYXR0ZXIgUGFyc2luZy5cIik7XG4gICAgICAgIGlmICghdGhpcy5wbHVnaW4uc2V0dGluZ3MucGF0aHM/Lmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MucGF0aHMgPSBbXCIvXCJdO1xuICAgICAgICB9XG4gICAgICAgIGxldCBpc1BhcnNpbmcgPSBmYWxzZTtcbiAgICAgICAgZm9yIChjb25zdCBwYXRoIG9mIHRoaXMucGx1Z2luLnNldHRpbmdzLnBhdGhzKSB7XG4gICAgICAgICAgICBjb25zdCBmb2xkZXIgPSB0aGlzLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChwYXRoKTtcbiAgICAgICAgICAgIGlmICghZm9sZGVyKSBjb250aW51ZTtcbiAgICAgICAgICAgIGlzUGFyc2luZyA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLnBhcnNlUGF0aChmb2xkZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNQYXJzaW5nKSB7XG4gICAgICAgICAgICB0aGlzLnNhdmUoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBwYXRoQ29udGFpbnNGaWxlKGZpbGU6IFRBYnN0cmFjdEZpbGUpIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgIXRoaXMucGx1Z2luLnNldHRpbmdzLnBhdGhzLmxlbmd0aCB8fFxuICAgICAgICAgICAgdGhpcy5wbHVnaW4uc2V0dGluZ3MucGF0aHMuY29udGFpbnMoXCIvXCIpXG4gICAgICAgIClcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuXG4gICAgICAgIGZvciAoY29uc3QgcGF0aCBvZiB0aGlzLnBsdWdpbi5zZXR0aW5ncy5wYXRocykge1xuICAgICAgICAgICAgaWYgKGZpbGUucGF0aC5pbmNsdWRlcyhwYXRoKSkgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBwYXJzZVBhdGgoZm9sZGVyOiBUQWJzdHJhY3RGaWxlKSB7XG4gICAgICAgIGlmICghdGhpcy5wYXRoQ29udGFpbnNGaWxlKGZvbGRlcikpIHJldHVybjtcbiAgICAgICAgY29uc3QgcGFyc2luZzogU2V0PHN0cmluZz4gPSBuZXcgU2V0KCk7XG4gICAgICAgIGZvciAoY29uc3QgcGF0aCBvZiB0aGlzLmdldEZpbGVzKGZvbGRlcikpIHtcbiAgICAgICAgICAgIHBhcnNpbmcuYWRkKHBhdGgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc3RhcnRQYXJzaW5nKFsuLi5wYXJzaW5nXSk7XG4gICAgfVxuICAgIHN0YXJ0UGFyc2luZyhwYXRoczogc3RyaW5nW10pIHtcbiAgICAgICAgaWYgKHBhdGhzLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy53b3JrZXIucG9zdE1lc3NhZ2U8UXVldWVNZXNzYWdlPih7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJxdWV1ZVwiLFxuICAgICAgICAgICAgICAgIHBhdGhzXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXRGaWxlSW5mb3JtYXRpb24ocGF0aDogc3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IGZpbGUgPSB0aGlzLnBsdWdpbi5hcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKHBhdGgpO1xuICAgICAgICBpZiAoIShmaWxlIGluc3RhbmNlb2YgVEZpbGUpKSByZXR1cm4ge307XG4gICAgICAgIGlmICh0aGlzLndhdGNoUGF0aHMuaGFzKGZpbGUucGF0aCkpIHtcbiAgICAgICAgICAgIGNvbnN0IG1vbnN0ZXIgPSB0aGlzLnBsdWdpbi5iZXN0aWFyeS5nZXQoXG4gICAgICAgICAgICAgICAgdGhpcy53YXRjaFBhdGhzLmdldChmaWxlLnBhdGgpXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBpZiAobW9uc3RlciAmJiBtb25zdGVyLm10aW1lICYmIG1vbnN0ZXIubXRpbWUgPT0gZmlsZS5zdGF0Lm10aW1lKVxuICAgICAgICAgICAgICAgIHJldHVybiB7fTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGNhY2hlID0gdGhpcy5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZShmaWxlKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGNhY2hlLFxuICAgICAgICAgICAgZmlsZToge1xuICAgICAgICAgICAgICAgIHBhdGg6IGZpbGUucGF0aCxcbiAgICAgICAgICAgICAgICBiYXNlbmFtZTogZmlsZS5iYXNlbmFtZSxcbiAgICAgICAgICAgICAgICBtdGltZTogZmlsZS5zdGF0Lm10aW1lXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuICAgIGdldEZpbGVzKGZvbGRlcjogVEFic3RyYWN0RmlsZSk6IHN0cmluZ1tdIHtcbiAgICAgICAgbGV0IGZpbGVzID0gW107XG4gICAgICAgIGlmIChmb2xkZXIgaW5zdGFuY2VvZiBURm9sZGVyKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIGZvbGRlci5jaGlsZHJlbikge1xuICAgICAgICAgICAgICAgIGZpbGVzLnB1c2goLi4udGhpcy5nZXRGaWxlcyhjaGlsZCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChmb2xkZXIgaW5zdGFuY2VvZiBURmlsZSkge1xuICAgICAgICAgICAgZmlsZXMucHVzaChmb2xkZXIucGF0aCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZpbGVzO1xuICAgIH1cbiAgICBhc3luYyByZXBhcnNlVmF1bHQoKSB7XG4gICAgICAgIGZvciAoY29uc3QgbW9uc3RlciBvZiB0aGlzLndhdGNoUGF0aHMudmFsdWVzKCkpIHtcbiAgICAgICAgICAgIHRoaXMucGx1Z2luLmRlbGV0ZU1vbnN0ZXIobW9uc3RlciwgZmFsc2UsIGZhbHNlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc3RhcnQoZmFsc2UpO1xuICAgIH1cbiAgICBvbnVubG9hZCgpIHtcbiAgICAgICAgdGhpcy53b3JrZXIudGVybWluYXRlKCk7XG4gICAgICAgIHRoaXMud29ya2VyID0gbnVsbDtcbiAgICB9XG59XG4iLCAiaW1wb3J0IGlubGluZVdvcmtlciBmcm9tICdfX2lubGluZS13b3JrZXInXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBXb3JrZXIoKSB7XG4gIHJldHVybiBpbmxpbmVXb3JrZXIoXCJ2YXIgTj1PYmplY3QuY3JlYXRlO3ZhciBFPU9iamVjdC5kZWZpbmVQcm9wZXJ0eTt2YXIgUT1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO3ZhciB6PU9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO3ZhciBIPU9iamVjdC5nZXRQcm90b3R5cGVPZixWPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7dmFyIFk9KG4sdCk9PigpPT4odHx8bigodD17ZXhwb3J0czp7fX0pLmV4cG9ydHMsdCksdC5leHBvcnRzKTt2YXIgSj0obix0LHMscik9PntpZih0JiZ0eXBlb2YgdD09XFxcIm9iamVjdFxcXCJ8fHR5cGVvZiB0PT1cXFwiZnVuY3Rpb25cXFwiKWZvcihsZXQgeSBvZiB6KHQpKSFWLmNhbGwobix5KSYmeSE9PXMmJkUobix5LHtnZXQ6KCk9PnRbeV0sZW51bWVyYWJsZTohKHI9USh0LHkpKXx8ci5lbnVtZXJhYmxlfSk7cmV0dXJuIG59O3ZhciBYPShuLHQscyk9PihzPW4hPW51bGw/TihIKG4pKTp7fSxKKHR8fCFufHwhbi5fX2VzTW9kdWxlP0UocyxcXFwiZGVmYXVsdFxcXCIse3ZhbHVlOm4sZW51bWVyYWJsZTohMH0pOnMsbikpO3ZhciBrPVkoKEMsUCk9PnsoZnVuY3Rpb24obix0KXt0eXBlb2YgQz09XFxcIm9iamVjdFxcXCImJnR5cGVvZiBQIT1cXFwidW5kZWZpbmVkXFxcIj9QLmV4cG9ydHM9dCgpOnR5cGVvZiBkZWZpbmU9PVxcXCJmdW5jdGlvblxcXCImJmRlZmluZS5hbWQ/ZGVmaW5lKHQpOihuPXR5cGVvZiBnbG9iYWxUaGlzIT1cXFwidW5kZWZpbmVkXFxcIj9nbG9iYWxUaGlzOm58fHNlbGYsbltcXFwiZmFzdC1jb3B5XFxcIl09dCgpKX0pKEMsZnVuY3Rpb24oKXtcXFwidXNlIHN0cmljdFxcXCI7dmFyIG49RnVuY3Rpb24ucHJvdG90eXBlLnRvU3RyaW5nLHQ9T2JqZWN0LmNyZWF0ZSxzPU9iamVjdC5kZWZpbmVQcm9wZXJ0eSxyPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IseT1PYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyx3PU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMsQj1PYmplY3QuZ2V0UHJvdG90eXBlT2YsRj1PYmplY3QucHJvdG90eXBlLFI9Ri5oYXNPd25Qcm9wZXJ0eSx2PUYucHJvcGVydHlJc0VudW1lcmFibGUsUz10eXBlb2Ygdz09XFxcImZ1bmN0aW9uXFxcIixxPXR5cGVvZiBXZWFrTWFwPT1cXFwiZnVuY3Rpb25cXFwiLFc9ZnVuY3Rpb24oKXtpZihxKXJldHVybiBmdW5jdGlvbigpe3JldHVybiBuZXcgV2Vha01hcH07dmFyIG89ZnVuY3Rpb24oKXtmdW5jdGlvbiBmKCl7dGhpcy5fa2V5cz1bXSx0aGlzLl92YWx1ZXM9W119cmV0dXJuIGYucHJvdG90eXBlLmhhcz1mdW5jdGlvbih1KXtyZXR1cm4hIX50aGlzLl9rZXlzLmluZGV4T2YodSl9LGYucHJvdG90eXBlLmdldD1mdW5jdGlvbih1KXtyZXR1cm4gdGhpcy5fdmFsdWVzW3RoaXMuX2tleXMuaW5kZXhPZih1KV19LGYucHJvdG90eXBlLnNldD1mdW5jdGlvbih1LGkpe3RoaXMuX2tleXMucHVzaCh1KSx0aGlzLl92YWx1ZXMucHVzaChpKX0sZn0oKTtyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gbmV3IG99fSgpLEE9ZnVuY3Rpb24obyxmKXt2YXIgdT1vLl9fcHJvdG9fX3x8QihvKTtpZighdSlyZXR1cm4gdChudWxsKTt2YXIgaT11LmNvbnN0cnVjdG9yO2lmKGk9PT1mLk9iamVjdClyZXR1cm4gdT09PWYuT2JqZWN0LnByb3RvdHlwZT97fTp0KHUpO2lmKH5uLmNhbGwoaSkuaW5kZXhPZihcXFwiW25hdGl2ZSBjb2RlXVxcXCIpKXRyeXtyZXR1cm4gbmV3IGl9Y2F0Y2gocCl7fXJldHVybiB0KHUpfSxMPWZ1bmN0aW9uKG8sZix1LGkpe3ZhciBwPUEobyxmKTtpLnNldChvLHApO2Zvcih2YXIgZCBpbiBvKVIuY2FsbChvLGQpJiYocFtkXT11KG9bZF0saSkpO2lmKFMpZm9yKHZhciBlPXcobyksYz0wLGw9ZS5sZW5ndGgsZz12b2lkIDA7YzxsOysrYylnPWVbY10sdi5jYWxsKG8sZykmJihwW2ddPXUob1tnXSxpKSk7cmV0dXJuIHB9LCQ9ZnVuY3Rpb24obyxmLHUsaSl7dmFyIHA9QShvLGYpO2kuc2V0KG8scCk7Zm9yKHZhciBkPVM/eShvKS5jb25jYXQodyhvKSk6eShvKSxlPTAsYz1kLmxlbmd0aCxsPXZvaWQgMCxnPXZvaWQgMDtlPGM7KytlKWlmKGw9ZFtlXSxsIT09XFxcImNhbGxlZVxcXCImJmwhPT1cXFwiY2FsbGVyXFxcIilpZihnPXIobyxsKSxnKXshZy5nZXQmJiFnLnNldCYmKGcudmFsdWU9dShvW2xdLGkpKTt0cnl7cyhwLGwsZyl9Y2F0Y2goYSl7cFtsXT1nLnZhbHVlfX1lbHNlIHBbbF09dShvW2xdLGkpO3JldHVybiBwfSxUPWZ1bmN0aW9uKG8pe3ZhciBmPVxcXCJcXFwiO3JldHVybiBvLmdsb2JhbCYmKGYrPVxcXCJnXFxcIiksby5pZ25vcmVDYXNlJiYoZis9XFxcImlcXFwiKSxvLm11bHRpbGluZSYmKGYrPVxcXCJtXFxcIiksby51bmljb2RlJiYoZis9XFxcInVcXFwiKSxvLnN0aWNreSYmKGYrPVxcXCJ5XFxcIiksZn0sRD1BcnJheS5pc0FycmF5LEc9T2JqZWN0LmdldFByb3RvdHlwZU9mLEk9ZnVuY3Rpb24oKXtyZXR1cm4gdHlwZW9mIGdsb2JhbFRoaXMhPVxcXCJ1bmRlZmluZWRcXFwiP2dsb2JhbFRoaXM6dHlwZW9mIHNlbGYhPVxcXCJ1bmRlZmluZWRcXFwiP3NlbGY6dHlwZW9mIHdpbmRvdyE9XFxcInVuZGVmaW5lZFxcXCI/d2luZG93OnR5cGVvZiBnbG9iYWwhPVxcXCJ1bmRlZmluZWRcXFwiP2dsb2JhbDooY29uc29sZSYmY29uc29sZS5lcnJvciYmY29uc29sZS5lcnJvcignVW5hYmxlIHRvIGxvY2F0ZSBnbG9iYWwgb2JqZWN0LCByZXR1cm5pbmcgXFxcInRoaXNcXFwiLicpLHRoaXMpfSgpO2Z1bmN0aW9uIG0obyxmKXt2YXIgdT0hIShmJiZmLmlzU3RyaWN0KSxpPWYmJmYucmVhbG18fEkscD11PyQ6TCxkPWZ1bmN0aW9uKGUsYyl7aWYoIWV8fHR5cGVvZiBlIT1cXFwib2JqZWN0XFxcIilyZXR1cm4gZTtpZihjLmhhcyhlKSlyZXR1cm4gYy5nZXQoZSk7dmFyIGw9ZS5fX3Byb3RvX198fEcoZSksZz1sJiZsLmNvbnN0cnVjdG9yO2lmKCFnfHxnPT09aS5PYmplY3QpcmV0dXJuIHAoZSxpLGQsYyk7dmFyIGE7aWYoRChlKSl7aWYodSlyZXR1cm4gJChlLGksZCxjKTthPW5ldyBnLGMuc2V0KGUsYSk7Zm9yKHZhciBPPTAsVT1lLmxlbmd0aDtPPFU7KytPKWFbT109ZChlW09dLGMpO3JldHVybiBhfWlmKGUgaW5zdGFuY2VvZiBpLkRhdGUpcmV0dXJuIG5ldyBnKGUuZ2V0VGltZSgpKTtpZihlIGluc3RhbmNlb2YgaS5SZWdFeHApcmV0dXJuIGE9bmV3IGcoZS5zb3VyY2UsZS5mbGFnc3x8VChlKSksYS5sYXN0SW5kZXg9ZS5sYXN0SW5kZXgsYTtpZihpLk1hcCYmZSBpbnN0YW5jZW9mIGkuTWFwKXJldHVybiBhPW5ldyBnLGMuc2V0KGUsYSksZS5mb3JFYWNoKGZ1bmN0aW9uKF8sSyl7YS5zZXQoSyxkKF8sYykpfSksYTtpZihpLlNldCYmZSBpbnN0YW5jZW9mIGkuU2V0KXJldHVybiBhPW5ldyBnLGMuc2V0KGUsYSksZS5mb3JFYWNoKGZ1bmN0aW9uKF8pe2EuYWRkKGQoXyxjKSl9KSxhO2lmKGkuQmxvYiYmZSBpbnN0YW5jZW9mIGkuQmxvYilyZXR1cm4gZS5zbGljZSgwLGUuc2l6ZSxlLnR5cGUpO2lmKGkuQnVmZmVyJiZpLkJ1ZmZlci5pc0J1ZmZlcihlKSlyZXR1cm4gYT1pLkJ1ZmZlci5hbGxvY1Vuc2FmZT9pLkJ1ZmZlci5hbGxvY1Vuc2FmZShlLmxlbmd0aCk6bmV3IGcoZS5sZW5ndGgpLGMuc2V0KGUsYSksZS5jb3B5KGEpLGE7aWYoaS5BcnJheUJ1ZmZlcil7aWYoaS5BcnJheUJ1ZmZlci5pc1ZpZXcoZSkpcmV0dXJuIGE9bmV3IGcoZS5idWZmZXIuc2xpY2UoMCkpLGMuc2V0KGUsYSksYTtpZihlIGluc3RhbmNlb2YgaS5BcnJheUJ1ZmZlcilyZXR1cm4gYT1lLnNsaWNlKDApLGMuc2V0KGUsYSksYX1yZXR1cm4gdHlwZW9mIGUudGhlbj09XFxcImZ1bmN0aW9uXFxcInx8ZSBpbnN0YW5jZW9mIEVycm9yfHxpLldlYWtNYXAmJmUgaW5zdGFuY2VvZiBpLldlYWtNYXB8fGkuV2Vha1NldCYmZSBpbnN0YW5jZW9mIGkuV2Vha1NldD9lOnAoZSxpLGQsYyl9O3JldHVybiBkKG8sVygpKX1yZXR1cm4gbS5kZWZhdWx0PW0sbS5zdHJpY3Q9ZnVuY3Rpb24oZix1KXtyZXR1cm4gbShmLHtpc1N0cmljdDohMCxyZWFsbTp1P3UucmVhbG06dm9pZCAwfSl9LG19KX0pO3ZhciBqPVgoaygpKTt2YXIgTT0obix0PTApPT57bGV0IHM9W107aWYodD09NXx8IW58fG49PW51bGwpcmV0dXJuXFxcIlxcXCI7aWYodHlwZW9mIG49PVxcXCJzdHJpbmdcXFwiKXJldHVybiBuO2lmKHR5cGVvZiBuPT1cXFwibnVtYmVyXFxcIilyZXR1cm5gJHtufWA7aWYoQXJyYXkuaXNBcnJheShuKSlzLnB1c2goYCR7bi5tYXAocj0+TShyLHQrKykpLmpvaW4oXFxcIiBcXFwiKX1gKTtlbHNlIGlmKHR5cGVvZiBuPT1cXFwib2JqZWN0XFxcIilmb3IobGV0W3IseV1vZiBPYmplY3QuZW50cmllcyhuKSlzLnB1c2goTShyLHQrKyksTSh5LHQrKykpO3JldHVybiBzLmpvaW4oXFxcIiBcXFwiKX07ZnVuY3Rpb24gYihuPVtdLHQ9W10pe258fChuPVtdKSx0fHwodD1bXSk7Zm9yKGxldCBzIG9mIHQhPW51bGw/dDpbXSlpZighIXMpaWYoQXJyYXkuaXNBcnJheShzKSl7bGV0IHI9TShzLnNsaWNlKDEpKTtuPW4uZmlsdGVyKHk9PnkubmFtZSE9c1swXSYmeS5kZXNjIT1yKSxuLnB1c2goe25hbWU6c1swXSxkZXNjOnJ9KX1lbHNlIHR5cGVvZiBzPT1cXFwib2JqZWN0XFxcIiYmKFxcXCJuYW1lXFxcImluIHN8fFxcXCJkZXNjXFxcImluIHMpJiYobj1uLmZpbHRlcihyPT5yLm5hbWUhPXMubmFtZXx8ci5kZXNjIT1zLmRlc2MpLG4ucHVzaCh7bmFtZTpzLm5hbWUsZGVzYzpNKHMuZGVzYyl9KSk7cmV0dXJuIG59dmFyIGg9c2VsZix4PWNsYXNze2NvbnN0cnVjdG9yKCl7dGhpcy5xdWV1ZT1bXTt0aGlzLnBhcnNpbmc9ITE7aC5hZGRFdmVudExpc3RlbmVyKFxcXCJtZXNzYWdlXFxcIix0PT57dC5kYXRhLnR5cGU9PVxcXCJxdWV1ZVxcXCImJih0aGlzLmFkZCguLi50LmRhdGEucGF0aHMpLHRoaXMuZGVidWcmJmNvbnNvbGUuZGVidWcoYFRUUlBHOiBSZWNlaXZlZCBxdWV1ZSBtZXNzYWdlIGZvciAke3QuZGF0YS5wYXRocy5sZW5ndGh9IHBhdGhzYCkpfSksaC5hZGRFdmVudExpc3RlbmVyKFxcXCJtZXNzYWdlXFxcIix0PT57dC5kYXRhLnR5cGU9PVxcXCJkZWJ1Z1xcXCImJih0aGlzLmRlYnVnPXQuZGF0YS5kZWJ1Zyl9KX1hZGQoLi4udCl7dGhpcy5kZWJ1ZyYmY29uc29sZS5kZWJ1ZyhgVFRSUEc6IEFkZGluZyAke3QubGVuZ3RofSBwYXRocyB0byBxdWV1ZWApLHRoaXMucXVldWUucHVzaCguLi50KSx0aGlzLnBhcnNpbmd8fHRoaXMucGFyc2UoKX1hc3luYyBwYXJzZSgpe2Zvcih0aGlzLnBhcnNpbmc9ITA7dGhpcy5xdWV1ZS5sZW5ndGg7KXtsZXQgdD10aGlzLnF1ZXVlLnNoaWZ0KCk7dGhpcy5kZWJ1ZyYmY29uc29sZS5kZWJ1ZyhgVFRSUEc6IFBhcnNpbmcgJHt0fSBmb3Igc3RhdGJsb2NrcyAoJHt0aGlzLnF1ZXVlLmxlbmd0aH0gdG8gZ28pYCk7bGV0e2ZpbGU6cyxjYWNoZTpyfT1hd2FpdCB0aGlzLmdldEZpbGVEYXRhKHQpO3RoaXMucGFyc2VGaWxlRm9yQ3JlYXR1cmVzKHMsciksaC5wb3N0TWVzc2FnZSh7dHlwZTpcXFwiZG9uZVxcXCIscGF0aDp0fSl9dGhpcy5wYXJzaW5nPSExLGgucG9zdE1lc3NhZ2Uoe3R5cGU6XFxcInNhdmVcXFwifSl9YXN5bmMgZ2V0RmlsZURhdGEodCl7cmV0dXJuIG5ldyBQcm9taXNlKHM9PntoLmFkZEV2ZW50TGlzdGVuZXIoXFxcIm1lc3NhZ2VcXFwiLHI9PntyLmRhdGEudHlwZT09XFxcImZpbGVcXFwiJiZzKHIuZGF0YSl9KSxoLnBvc3RNZXNzYWdlKHtwYXRoOnQsdHlwZTpcXFwiZ2V0XFxcIn0pfSl9cGFyc2VGaWxlRm9yQ3JlYXR1cmVzKHQscyl7aWYoIXN8fCFzLmZyb250bWF0dGVyfHwhcy5mcm9udG1hdHRlci5zdGF0YmxvY2t8fCFzLmZyb250bWF0dGVyLm5hbWUpcmV0dXJuO2xldCByPU9iamVjdC5hc3NpZ24oe30sKDAsai5kZWZhdWx0KShzLmZyb250bWF0dGVyKSx7bm90ZTp0LnBhdGgsbXRpbWU6dC5tdGltZX0pO3IudHJhaXRzJiYoci50cmFpdHM9YihbXSxyLnRyYWl0cykpLHIuYWN0aW9ucyYmKHIuYWN0aW9ucz1iKFtdLHIuYWN0aW9ucykpLHIuYm9udXNfYWN0aW9ucyYmKHIuYm9udXNfYWN0aW9ucz1iKFtdLHIuYm9udXNfYWN0aW9ucykpLHIucmVhY3Rpb25zJiYoci5yZWFjdGlvbnM9YihbXSxyLnJlYWN0aW9ucykpLHIubGVnZW5kYXJ5X2FjdGlvbnMmJihyLmxlZ2VuZGFyeV9hY3Rpb25zPWIoW10sci5sZWdlbmRhcnlfYWN0aW9ucykpLHRoaXMuZGVidWcmJmNvbnNvbGUuZGVidWcoYFRUUlBHOiBBZGRpbmcgJHtyLm5hbWV9IHRvIGJlc3RpYXJ5IGZyb20gJHt0LmJhc2VuYW1lfWApLGgucG9zdE1lc3NhZ2Uoe3R5cGU6XFxcInVwZGF0ZVxcXCIsbW9uc3RlcjpyLHBhdGg6dC5wYXRofSl9fTtuZXcgeDtcXG5cIik7XG59XG4iLCAiaW1wb3J0IHtcbiAgICBFZGl0b3JTdWdnZXN0LFxuICAgIHR5cGUgRWRpdG9yU3VnZ2VzdENvbnRleHQsXG4gICAgdHlwZSBFZGl0b3JQb3NpdGlvbixcbiAgICB0eXBlIEVkaXRvcixcbiAgICB0eXBlIFRGaWxlLFxuICAgIHR5cGUgRWRpdG9yU3VnZ2VzdFRyaWdnZXJJbmZvXG59IGZyb20gXCJvYnNpZGlhblwiO1xuaW1wb3J0IHR5cGUgU3RhdEJsb2NrUGx1Z2luIGZyb20gXCJzcmMvbWFpblwiO1xuXG5leHBvcnQgY2xhc3MgU3RhdGJsb2NrU3VnZ2VzdGVyIGV4dGVuZHMgRWRpdG9yU3VnZ2VzdDxzdHJpbmc+IHtcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgcGx1Z2luOiBTdGF0QmxvY2tQbHVnaW4pIHtcbiAgICAgICAgc3VwZXIocGx1Z2luLmFwcCk7XG4gICAgfVxuICAgIGdldFN1Z2dlc3Rpb25zKGN0eDogRWRpdG9yU3VnZ2VzdENvbnRleHQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGx1Z2luXG4gICAgICAgICAgICAuZ2V0QmVzdGlhcnlOYW1lcygpXG4gICAgICAgICAgICAuZmlsdGVyKChwKSA9PiBwLnRvTG93ZXJDYXNlKCkuY29udGFpbnMoY3R4LnF1ZXJ5LnRvTG93ZXJDYXNlKCkpKTtcbiAgICB9XG4gICAgcmVuZGVyU3VnZ2VzdGlvbih0ZXh0OiBzdHJpbmcsIGVsOiBIVE1MRWxlbWVudCkge1xuICAgICAgICBlbC5jcmVhdGVTcGFuKHsgdGV4dCB9KTtcbiAgICB9XG4gICAgc2VsZWN0U3VnZ2VzdGlvbih2YWx1ZTogc3RyaW5nLCBldnQ6IE1vdXNlRXZlbnQgfCBLZXlib2FyZEV2ZW50KTogdm9pZCB7XG4gICAgICAgIGlmICghdGhpcy5jb250ZXh0KSByZXR1cm47XG5cbiAgICAgICAgY29uc3QgbGluZSA9IHRoaXMuY29udGV4dC5lZGl0b3JcbiAgICAgICAgICAgIC5nZXRMaW5lKHRoaXMuY29udGV4dC5lbmQubGluZSlcbiAgICAgICAgICAgIC5zbGljZSh0aGlzLmNvbnRleHQuZW5kLmNoKTtcbiAgICAgICAgY29uc3QgW18sIGV4aXN0c10gPSBsaW5lLm1hdGNoKC9eKFxcXSA/KS8pID8/IFtdO1xuXG4gICAgICAgIHRoaXMuY29udGV4dC5lZGl0b3IucmVwbGFjZVJhbmdlKFxuICAgICAgICAgICAgYCR7dmFsdWV9YCxcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5zdGFydCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAuLi50aGlzLmNvbnRleHQuZW5kLFxuICAgICAgICAgICAgICAgIGNoOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQuc3RhcnQuY2ggK1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQucXVlcnkubGVuZ3RoICtcbiAgICAgICAgICAgICAgICAgICAgKGV4aXN0cz8ubGVuZ3RoID8/IDApXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJzdGF0YmxvY2tzXCJcbiAgICAgICAgKTtcblxuICAgICAgICB0aGlzLmNvbnRleHQuZWRpdG9yLnNldEN1cnNvcihcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5zdGFydC5saW5lLFxuICAgICAgICAgICAgdGhpcy5jb250ZXh0LnN0YXJ0LmNoICsgdmFsdWUubGVuZ3RoXG4gICAgICAgICk7XG5cbiAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgIH1cbiAgICBvblRyaWdnZXIoXG4gICAgICAgIGN1cnNvcjogRWRpdG9yUG9zaXRpb24sXG4gICAgICAgIGVkaXRvcjogRWRpdG9yLFxuICAgICAgICBmaWxlOiBURmlsZVxuICAgICk6IEVkaXRvclN1Z2dlc3RUcmlnZ2VySW5mbyB7XG4gICAgICAgIGNvbnN0IHJhbmdlID0gZWRpdG9yLmdldFJhbmdlKHsgbGluZTogMCwgY2g6IDAgfSwgY3Vyc29yKTtcblxuICAgICAgICBpZiAocmFuZ2UuaW5kZXhPZihcImBgYHN0YXRibG9ja1xcblwiKSA9PT0gLTEpIHJldHVybjtcblxuICAgICAgICBjb25zdCBzcGxpdCA9IHJhbmdlLnNwbGl0KFwiXFxuXCIpLnJldmVyc2UoKTtcblxuICAgICAgICBsZXQgaW5TdGF0YmxvY2sgPSBmYWxzZTtcbiAgICAgICAgZm9yIChjb25zdCBsaW5lIG9mIHNwbGl0KSB7XG4gICAgICAgICAgICBpZiAoL15gYGAkLy50ZXN0KGxpbmUpKSByZXR1cm47XG4gICAgICAgICAgICBpZiAoL15gYGBzdGF0YmxvY2svLnRlc3QobGluZSkpIHtcbiAgICAgICAgICAgICAgICBpblN0YXRibG9jayA9IHRydWU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpblN0YXRibG9jaykgcmV0dXJuO1xuXG4gICAgICAgIGNvbnN0IGxpbmUgPSBlZGl0b3IuZ2V0TGluZShjdXJzb3IubGluZSk7XG4gICAgICAgIC8vbm90IGluc2lkZSB0aGUgYnJhY2tldFxuXG4gICAgICAgIGlmICghL14obW9uc3RlcnxjcmVhdHVyZSk6L20udGVzdChsaW5lLnNsaWNlKDAsIGN1cnNvci5jaCkpKVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG5cbiAgICAgICAgY29uc3QgbWF0Y2ggPSBsaW5lLm1hdGNoKC9eKG1vbnN0ZXJ8Y3JlYXR1cmUpOiAoLispXFxuPy8pO1xuICAgICAgICBpZiAoIW1hdGNoKSByZXR1cm4gbnVsbDtcblxuICAgICAgICBjb25zdCBbXywgcGFyYW0sIHF1ZXJ5XSA9IG1hdGNoO1xuXG4gICAgICAgIGlmIChcbiAgICAgICAgICAgICFxdWVyeSB8fFxuICAgICAgICAgICAgdGhpcy5wbHVnaW5cbiAgICAgICAgICAgICAgICAuZ2V0QmVzdGlhcnlOYW1lcygpXG4gICAgICAgICAgICAgICAgLmZpbmQoKHApID0+IHAudG9Mb3dlckNhc2UoKSA9PSBxdWVyeS50b0xvd2VyQ2FzZSgpKVxuICAgICAgICApIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG1hdGNoRGF0YSA9IHtcbiAgICAgICAgICAgIGVuZDogY3Vyc29yLFxuICAgICAgICAgICAgc3RhcnQ6IHtcbiAgICAgICAgICAgICAgICBjaDogcGFyYW0ubGVuZ3RoICsgMixcbiAgICAgICAgICAgICAgICBsaW5lOiBjdXJzb3IubGluZVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHF1ZXJ5XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBtYXRjaERhdGE7XG4gICAgfVxufVxuIl0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQSwyREFBQUEsU0FBQTtBQUFBLEtBQUMsU0FBVUMsU0FBUTtBQUNmO0FBRUEsVUFBSSxPQUFPLFFBQVE7QUFDbkIsVUFBSSxVQUFVLFdBQVc7QUFDekIsVUFBSSxZQUFZLGFBQWE7QUFDN0IsVUFBSSxTQUFTLFVBQVU7QUFHdkIsVUFBSSxpQkFBaUI7QUFBQSxRQUVqQixrQkFBa0I7QUFBQSxRQUVsQixXQUFXO0FBQUEsTUFDZjtBQUVBLFVBQUlDLGNBQWE7QUFBQSxRQUNiO0FBQUEsUUFDQTtBQUFBLFFBQ0E7QUFBQSxRQUNBO0FBQUEsUUFDQTtBQUFBLFFBQ0EsTUFBTTtBQUFBLFVBQ0Y7QUFBQSxVQUNBO0FBQUEsVUFDQTtBQUFBLFVBQ0E7QUFBQSxVQUNBLFNBQVMsQ0FBQztBQUFBLFFBQ2Q7QUFBQSxNQUNKO0FBRUEsVUFBSSxPQUFPRixZQUFXO0FBQ2xCLFFBQUFBLFFBQU8sVUFBVUU7QUFBQTtBQUVqQixRQUFBRCxRQUFPLGFBQWFDO0FBa0J4QixlQUFTLE1BQU0sTUFBTSxTQUFTO0FBQzFCLGtCQUFVLFdBQVcsQ0FBQztBQUN0QixvQkFBWSxPQUFPO0FBQ25CLGVBQU8sUUFBUSxRQUFRLElBQUksRUFDdEIsS0FBSyxTQUFVQyxPQUFNO0FBQ2xCLGlCQUFPLFVBQVVBLE9BQU0sUUFBUSxRQUFRLElBQUk7QUFBQSxR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QUEsUUFDSSxNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsUUFDTixjQUFjO0FBQUEsTUFDbEI7QUFBQSxNQUNBO0FBQUEsUUFDSSxNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsUUFDTixjQUFjO0FBQUEsTUFDbEI7QUFBQSxJQUNKO0FBQUEsSUFDQSxTQUFTO0FBQUEsTUFDTDtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFFBQ04sY0FBYztBQUFBLE1BQ2xCO0FBQUEsTUFDQTtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFFBQ04sY0FBYztBQUFBLFFBQ2QsYUFBYTtBQUFBLFFBQ2IsY0FBYztBQUFBLE1BQ2xCO0FBQUEsTUFDQTtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFFBQ04sY0FBYztBQUFBLFFBQ2QsYUFBYTtBQUFBLFFBQ2IsY0FBYztBQUFBLE1BQ2xCO0FBQUEsTUFDQTtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFFBQ04sY0FBYztBQUFBLFFBQ2QsYUFBYTtBQUFBLFFBQ2IsY0FBYztBQUFBLE1BQ2xCO0FBQUEsTUFDQTtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFFBQ04sY0FBYztBQUFBLE1BQ2xCO0FBQUEsTUFDQTtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFFBQ04sY0FBYztBQUFBLFFBQ2QsYUFBYTtBQUFBLE1BQ2pCO0FBQUEsSUFDSjtBQUFBLElBQ0EsbUJBQW1CO0FBQUEsTUFDZjtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFFBQ04sY0FBYztBQUFBLE1BQ2xCO0FBQUEsTUFDQTtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFFBQ04sY0FBYztBQUFBLE1BQ2xCO0FBQUEsTUFDQTtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFFBQ04sY0FBYztBQUFBLE1BQ2xCO0FBQUEsSUFDSjtBQUFBLEVBQ0o7QUFBQSxFQUNB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QSxJQUNSLFdBQVc7QUFBQSxJQUNYLElBQUk7QUFBQSxJQUNKLFFBQVE7QUFBQSxNQUNKO0FBQUEsUUFDSSxNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsUUFDTixjQUFjO0FBQUEsTUFDbEI7QUFBQSxNQUNBO0FBQUEsUUFDSSxNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsUUFDTixjQUFjO0FBQUEsTUFDbEI7QUFBQSxJQUNKO0FBQUEsSUFDQSxTQUFTO0FBQUEsTUFDTDtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFFBQ04sY0FBYztBQUFBLE1BQ2xCO0FBQUEsTUFDQTtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFFBQ04sY0FBYztBQUFBLFFBQ2QsYUFBYTtBQUFBLFFBQ2IsY0FBYztBQUFBLE1BQ2xCO0FBQUEsTUFDQTtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFFBQ04sY0FBYztBQUFBLFFBQ2QsYUFBYTtBQUFBLFFBQ2IsY0FBYztBQUFBLE1BQ2xCO0FBQUEsTUFDQTtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFFBQ04sY0FBYztBQUFBLFFBQ2QsYUFBYTtBQUFBLFFBQ2IsY0FBYztBQUFBLE1BQ2xCO0FBQUEsTUFDQTtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFFBQ04sY0FBYztBQUFBLE1BQ2xCO0FBQUEsTUFDQTtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFFBQ04sY0FBYztBQUFBLE1BQ2xCO0FBQUEsSUFDSjtBQUFBLElBQ0EsbUJBQW1CO0FBQUEsTUFDZjtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFFBQ04sY0FBYztBQUFBLE1BQ2xCO0FBQUEsTUFDQTtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFFBQ04sY0FBYztBQUFBLE1BQ2xCO0FBQUEsTUFDQTtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFFBQ04sY0FBYztB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UUFBUTtBQUFBLE1BQ0o7QUFBQSxRQUNJLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxRQUNOLGNBQWM7QUFBQSxNQUNsQjtBQUFBLE1BQ0E7QUFBQSxRQUNJLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxRQUNOLGNBQWM7QUFBQSxNQUNsQjtBQUFBLElBQ0o7QUFBQSxJQUNBLFNBQVM7QUFBQSxNQUNMO0FBQUEsUUFDSSxNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsUUFDTixjQUFjO0FBQUEsTUFDbEI7QUFBQSxNQUNBO0FBQUEsUUFDSSxNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsUUFDTixjQUFjO0FBQUEsUUFDZCxhQUFhO0FBQUEsUUFDYixjQUFjO0FBQUEsTUFDbEI7QUFBQSxNQUNBO0FBQUEsUUFDSSxNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsUUFDTixjQUFjO0FBQUEsUUFDZCxhQUFhO0FBQUEsUUFDYixjQUFjO0FBQUEsTUFDbEI7QUFBQSxNQUNBO0FBQUEsUUFDSSxNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsUUFDTixjQUFjO0FBQUEsUUFDZCxhQUFhO0FBQUEsUUFDYixjQUFjO0FBQUEsTUFDbEI7QUFBQSxNQUNBO0FBQUEsUUFDSSxNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsUUFDTixjQUFjO0FBQUEsTUFDbEI7QUFBQSxNQUNBO0FBQUEsUUFDSSxNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsUUFDTixjQUFjO0FBQUEsUUFDZCxhQUFhO0FBQUEsTUFDakI7QUFBQSxNQUNBO0FBQUEsUUFDSSxNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsUUFDTixjQUFjO0FBQUEsTUFDbEI7QUFBQSxJQUNKO0FBQUEsSUFDQSxtQkFBbUI7QUFBQSxNQUNmO0FBQUEsUUFDSSxNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsUUFDTixjQUFjO0FBQUEsTUFDbEI7QUFBQSxNQUNBO0FBQUEsUUFDSSxNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsUUFDTixjQUFjO0FBQUEsTUFDbEI7QUFBQSxNQUNBO0FB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QSxJQUNBLFNBQVM7QUFBQSxNQUNMO0FBQUEsUUFDSSxNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsUUFDTixjQUFjO0FBQUEsTUFDbEI7QUFBQSxNQUNBO0FBQUEsUUFDSSxNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsUUFDTixjQUFjO0FBQUEsUUFDZCxhQUFhO0FBQUEsUUFDYixjQUFjO0FBQUEsTUFDbEI7QUFBQSxNQUNBO0FBQUEsUUFDSSxNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsUUFDTixjQUFjO0FBQUEsUUFDZCxhQUFhO0FBQUEsUUFDYixjQUFjO0FBQUEsTUFDbEI7QUFBQSxNQUNBO0FBQUEsUUFDSSxNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsUUFDTixjQUFjO0FBQUEsUUFDZCxhQUFhO0FBQUEsUUFDYixjQUFjO0FBQUEsTUFDbEI7QUFBQSxNQUNBO0FBQUEsUUFDSSxNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsUUFDTixjQUFjO0FBQUEsTUFDbEI7QUFBQSxNQUNBO0FBQUEsUUFDSSxNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsUUFDTixjQUFjO0FBQUEsUUFDZCxhQUFhO0FBQUEsTUFDakI7QUFBQSxNQUNBO0FBQUEsUUFDSSxNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsUUFDTixjQUFjO0FBQUEsTUFDbEI7QUFBQSxJQUNKO0FBQUEsSUFDQSxtQkFBbUI7QUFBQSxNQUNmO0FBQUEsUUFDSSxNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsUUFDTixjQUFjO0FBQUEsTUFDbEI7QUFBQSxNQUNBO0FBQUEsUUFDSSxNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsUUFDTixjQUFjO0FBQUEsTUFDbEI7QUFBQSxNQUNBO0FBQUEsUUFDSSxNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsUUFDTixjQUFjO0FBQUEsTUFDbEI7QUFBQSxJQUNKO0FBQUEsRUFDSjtBQUFBLEVBQ0E7QUFBQSxJQUNJLE1BQU07QUFBQSxJQUNOLE1BQU07QUFBQSxJQUNOLE1BQU07QUFBQSxJQUNOLFNBQVM7QUFBQSxJ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QUF3QjtBQUFBLElBQ3hCLG9CQUFvQjtBQUFBLElBQ3BCLG1CQUNJO0FBQUEsSUFDSixzQkFBc0I7QUFBQSxJQUN0QixRQUFRO0FBQUEsSUFDUixXQUFXO0FBQUEsSUFDWCxJQUFJO0FBQUEsSUFDSixRQUFRO0FBQUEsTUFDSjtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFFBQ04sY0FBYztBQUFBLE1BQ2xCO0FBQUEsTUFDQTtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFFBQ04sY0FBYztBQUFBLE1BQ2xCO0FBQUEsTUFDQTtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFFBQ04sY0FBYztBQUFBLE1BQ2xCO0FBQUEsTUFDQTtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFFBQ04sY0FBYztBQUFBLE1BQ2xCO0FBQUEsSUFDSjtBQUFBLElBQ0EsU0FBUztBQUFBLE1BQ0w7QUFBQSxRQUNJLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxRQUNOLGNBQWM7QUFBQSxNQUNsQjtBQUFBLE1BQ0E7QUFBQSxRQUNJLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxRQUNOLGNBQWM7QUFBQSxRQUNkLGFBQWE7QUFBQSxRQUNiLGNBQWM7QUFBQSxNQUNsQjtBQUFBLE1BQ0E7QUFBQSxRQUNJLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxRQUNOLGNBQWM7QUFBQSxRQUNkLGFBQWE7QUFBQSxRQUNiLGNBQWM7QUFBQSxNQUNsQjtBQUFBLE1BQ0E7QUFBQSxRQUNJLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxRQUNOLGNBQWM7QUFBQSxRQUNkLGFBQWE7QUFBQSxRQUNiLGNBQWM7QUFBQSxNQUNsQjtBQUFBLE1BQ0E7QUFBQSxRQUNJLE1BQU07QUFBQSxRQUNOLE1BQU07QUFBQSxRQUNOLGNBQWM7QUFBQSxRQUNkLGFBQWE7QUFBQSxRQUNiLGNBQWM7QUFBQSxNQUNsQjtBQUFBLE1BQ0E7QUFBQSxRQUNJLE1BQU07QUFBQSxRQUNOLE1BQU07QUFB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QUFNO0FBQUEsUUFDTixjQUFjO0FBQUEsTUFDbEI7QUFBQSxNQUNBO0FBQUEsUUFDSSxNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsUUFDTixjQUFjO0FBQUEsTUFDbEI7QUFBQSxNQUNBO0FBQUEsUUFDSSxNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsUUFDTixjQUFjO0FBQUEsTUFDbEI7QUFBQSxNQUNBO0FBQUEsUUFDSSxNQUFNO0FBQUEsUUFDTixNQUFNO0FBQUEsUUFDTixjQUFjO0FBQUEsTUFDbEI7QUFBQSxJQUNKO0FBQUEsSUFDQSxTQUFTO0FBQUEsTUFDTDtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFFBQ04sY0FBYztBQUFBLE1BQ2xCO0FBQUEsTUFDQTtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFFBQ04sY0FBYztBQUFBLFFBQ2QsYUFBYTtBQUFBLFFBQ2IsY0FBYztBQUFBLE1BQ2xCO0FBQUEsTUFDQTtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFFBQ04sY0FBYztBQUFBLFFBQ2QsYUFBYTtBQUFBLFFBQ2IsY0FBYztBQUFBLE1BQ2xCO0FBQUEsTUFDQTtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFFBQ04sY0FBYztBQUFBLE1BQ2xCO0FBQUEsTUFDQTtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFFBQ04sY0FBYztBQUFBLE1BQ2xCO0FBQUEsSUFDSjtBQUFBLElBQ0EsbUJBQW1CO0FBQUEsTUFDZjtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFFBQ04sY0FBYztBQUFBLE1BQ2xCO0FBQUEsTUFDQTtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFFBQ04sY0FBYztBQUFBLE1BQ2xCO0FBQUEsTUFDQTtBQUFBLFFBQ0ksTUFBTTtBQUFBLFFBQ04sTUFBTTtBQUFBLFFBQ04sY0FBYztBQUFBLE1BQ2xCO0FBQUEsSUFDSjtBQUFBLEVBQ0o7QUFBQSxFQUNBO0FB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QUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsVUFxTWQ7QUFBQSxVQUNBO0FBQUEsWUFDSSxNQUFNO0FBQUEsWUFDTixJQUFJLE9BQU87QUFBQSxZQUNYLFNBQVM7QUFBQSxZQUNULFlBQVksQ0FBQyxJQUFJO0FBQUEsWUFDakIsVUFBVTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLFVBb01kO0FBQUEsUUFDSjtBQUFBLE1BQ0o7QUFBQSxJQUNKO0FBQUEsSUFDQSxhQUFhO0FBQUEsSUFDYixTQUFTO0FBQUEsRUFDYjtBQUFBLEVBRUE7QUFBQSxJQUNJLE1BQU07QUFBQSxJQUNOLElBQUksT0FBTztBQUFBLElBQ1gsWUFBWSxDQUFDLFFBQVE7QUFBQSxJQUNyQixhQUFhO0FBQUEsSUFDYixNQUFNO0FBQUEsRUFDVjtBQUFBLEVBQ0E7QUFBQSxJQUNJLE1BQU07QUFBQSxJQUNOLElBQUksT0FBTztBQUFBLElBQ1gsWUFBWSxDQUFDLFFBQVE7QUFBQSxJQUNyQixhQUFhO0FBQUEsSUFFYixNQUFNO0FBQUEsRUFDVjtBQUFBLEVBQ0E7QUFBQSxJQUNJLE1BQU07QUFBQSxJQUNOLElBQUksT0FBTztBQUFBLElBQ1gsWUFBWSxDQUFDLGFBQWE7QUFBQSxJQUMxQixhQUFhO0FBQUEsSUFFYixNQUFNO0FBQUEsRUFDVjtBQUFBLEVBQ0E7QUFBQSxJQUNJLE1BQU07QUFBQSxJQUNOLElBQUksT0FBTztBQUFBLElBQ1gsWUFBWSxDQUFDLFNBQVM7QUFBQSxJQUN0QixTQUFTO0FBQUEsSUFDVCxhQUFhO0FBQUEsSUFFYixNQUFNO0FBQUEsRUFDVjtBQUFBLEVBQ0E7QUFBQSxJQUNJLE1BQU07QUFBQSxJQUNOLElBQUksT0FBTztBQUFBLElBQ1gsWUFBWSxDQUFDLGVBQWU7QUFBQSxJQUM1QixTQUFTO0FBQUEsSUFDVCxhQUFh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QyxDQUFDLEVBQ2xELEtBQUssSUFBSTtBQUFBLE9BQ1A7QUFBQSxJQUNDO0FBQUEsRUFDSjtBQUFBLEVBRUEsT0FBTyxVQUE0QixJQUFpQixTQUFrQjtBQUNsRSxVQUFNLFVBQW1CLE9BQU8sT0FHOUIsS0FBSyxTQUFTLElBQUksU0FBUyxJQUFJLEtBQUssQ0FBQyxHQUFHLEVBQUUsR0FBRyxTQUFTLENBQUM7QUFDekQsUUFBSSxDQUFDO0FBQVMsYUFBTztBQUNyQixRQUFJLFNBQVM7QUFDVCxjQUFRLE9BQU87QUFBQSxJQUNuQjtBQUNBLFVBQU0sMkJBQTJCLEtBQUs7QUFBQSxNQUNsQyxLQUFLLFVBQVUsT0FBTyxFQUNqQjtBQUFBLFFBQ0c7QUFBQSxRQUNBO0FBQUEsTUFDSixFQUNDLFFBQVEscUJBQXFCLENBQUMsT0FBTyxPQUFPO0FBQ3pDLGVBQU8sbUJBQW1CO0FBQUEsTUFDOUIsQ0FBQyxFQUNBO0FBQUEsUUFDRztBQUFBLFFBQ0EsQ0FBQyxHQUFHLE9BQWUsU0FBaUI7QUFDaEMsY0FBSSxNQUFNLFFBQVE7QUFDZCxtQkFBTyxtQkFBbUIsUUFBUTtBQUFBLFVBQ3RDO0FBQ0EsaUJBQU8sbUJBQW1CO0FBQUEsUUFDOUI7QUFBQSxNQUNKO0FBQUEsSUFDUjtBQUNBLFlBQVE7QUFBQSxNQUNKO0FBQUEsTUFDQTtBQUFBLElBQ0o7QUFDQSxXQUFPLElBQUk7QUFBQSxNQUNQO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLE1BQ0EsS0FBSyxtQkFBbUIsT0FBTztBQUFBLElBQ25DO0FBQUEsRUFDSjtBQUFBLEVBQ0EsbUJBQW1CLFNBQTBCO0FBQ3pDLFdBQ0ksS0FBSyxTQUFTLFFBQVEsS0FBSyxDQUFDLE1BQU0sRUFBRSxRQUFRLFNBQVMsTUFBTSxLQUMzRCxLQUFLO0FBQUEsRUFFYjtBQUNKOyIsCiAgIm5hbWVzIjogWyJtb2R1bGUiLCAiZ2xvYmFsIiwgImRvbXRvaW1hZ2UiLCAibm9kZSIsICJkb21Ob2RlIiwgImZpbHRlciIsICJjaGlsZHJlbiIsICJzb3VyY2UiLCAidGFyZ2V0IiwgImVsZW1lbnQiLCAiY2xhc3NOYW1lIiwgInN0eWxlIiwgImNvbnRlbnQiLCAidG9CbG9iIiwgInVybCIsICJzdHJpbmciLCAiZ2V0UHJvdG90eXBlT2YiLCAiQ2FjaGUiLCAiX2EiLCAiY29weSIsICJ2YWx1ZSIsICJpbXBvcnRfb2JzaWRpYW4iLCAiaW1wb3J0X29ic2lkaWFuIiwgImltcG9ydF9vYnNpZGlhbiIsICJmbiIsICJub3ciLCAiZWxlbWVudCIsICJ0ZXh0IiwgImVsZW1lbnQiLCAiaGFzaCIsICJmbiIsICJuZXh0IiwgImVuZCIsICJ0aWNrIiwgInN0YXJ0IiwgIm5vdyIsICJmbiIsICJmbiIsICJmbiIsICJmbiIsICJkZXRhY2giLCAidXBkYXRlIiwgImJsb2NrIiwgImN1cnJlbnRfY29tcG9uZW50IiwgImNyZWF0ZV9lYWNoX2Jsb2NrIiwgIm5leHQiLCAiaW5zZXJ0IiwgImluc3RhbmNlIiwgImNyZWF0ZV9mcmFnbWVudCIsICJhcHBlbmRfc3R5bGVzIiwgImF0dHIiLCAic3RhcnQiLCAidXBkYXRlIiwgImZuIiwgInN1YnNjcmliZSIsICJydW4iLCAiY3R4IiwgInRleHQiLCAiY3JlYXRlX2lmX2Jsb2NrXzEiLCAiY3R4IiwgImNyZWF0ZV9pZl9ibG9jayIsICJ0ZXh0IiwgImRpY2UiLCAiY3R4IiwgImN0eCIsICJjdHgiLCAiY3JlYXRlX2lmX2Jsb2NrIiwgImN0eCIsICJjdHgiLCAiY3JlYXRlX2lmX2Jsb2NrIiwgImN0eCIsICJjcmVhdGVfaWZfYmxvY2siLCAiY3R4IiwgImN0eCIsICJjcmVhdGVfaWZfYmxvY2siLCAiY3R4IiwgImNyZWF0ZV9pZl9ibG9jayIsICJjdHgiLCAiY3JlYXRlX2lmX2Jsb2NrIiwgImdldE1vZCIsICJjcmVhdGVfaWZfYmxvY2tfMSIsICJjdHgiLCAiY3JlYXRlX2lmX2Jsb2NrIiwgImNyZWF0ZV9pZl9ibG9ja18xIiwgImN0eCIsICJjcmVhdGVfaWZfYmxvY2siLCAiY3R4IiwgInRhcmdldHMiLCAiZWxlbWVudCIsICJjdHgiLCAiY3JlYXRlX2lmX2Jsb2NrIiwgImZhc3RDb3B5IiwgInRleHQiLCAiaW1wb3J0X29ic2lkaWFuIiwgImltcG9ydF9vYnNpZGlhbiIsICJvYmoiLCAiZHJhZ2dlZEVsIiwgInByaW50RGVidWciLCAiY2hpbGRyZW4iLCAicmVzZXRTY3JvbGxpbmciLCAic2Nyb2xsSWZOZWVkZWQiLCAiZHJhZ2dlZEVsIiwgImxvb3AiLCAiZHoiLCAiX2xvb3AiLCAiaWR4IiwgInVwZGF0ZSIsICJpIiwgImZsaXBEdXJhdGlvbk1zIiwgImN0eCIsICJjcmVhdGVfaWZfYmxvY2tfMiIsICJjcmVhdGVfaWZfYmxvY2tfMSIsICJjcmVhdGVfaWZfYmxvY2siLCAidGV4dCIsICJpbXBvcnRfZmFzdF9jb3B5IiwgImltcG9ydF9vYnNpZGlhbiIsICJjdHgiLCAiY29weSIsICJjdHgiLCAiY3R4IiwgImNyZWF0ZV9pZl9ibG9jayIsICJmbGlwRHVyYXRpb25NcyIsICJjdHgiLCAiaXRlbXMiLCAiaW1wb3J0X29ic2lkaWFuIiwgImltcG9ydF9vYnNpZGlhbiIsICJjdHgiLCAiaW1wb3J0X2Zhc3RfY29weSIsICJXb3JrZXIiLCAiaW1wb3J0X29ic2lkaWFuIiwgIldvcmtlciIsICJzb3VyY2UiLCAiaW1wb3J0X29ic2lkaWFuIiwgImltcG9ydF9vYnNpZGlhbiIsICJlbGVtZW50IiwgImVsZW1lbnQiLCAibmFtZSIsICJzdHlsZSIsICJlbGVtZW50IiwgImVsZW1lbnQiLCAibmV4dCIsICJnZXRDb21wdXRlZFN0eWxlIiwgImVsZW1lbnQiLCAiZWxlbWVudCIsICJlbGVtZW50IiwgImVsZW1lbnQiLCAiZWxlbWVudCIsICJnZXRDb21wdXRlZFN0eWxlIiwgIndpbmRvdyIsICJtaW4iLCAibWF4IiwgInRvUGFkZGluZ09iamVjdCIsICJwb3BwZXJPZmZzZXRzIiwgIm1pbiIsICJtYXgiLCAib2Zmc2V0IiwgImVmZmVjdCIsICJwb3BwZXIiLCAiZ2V0Q29tcHV0ZWRTdHlsZSIsICJlZmZlY3QiLCAiaW5zdGFuY2UiLCAid2luZG93IiwgImhhc2giLCAiaGFzaCIsICJlbGVtZW50IiwgImVsZW1lbnQiLCAiZWxlbWVudCIsICJnZXRDb21wdXRlZFN0eWxlIiwgImVsZW1lbnQiLCAiZ2V0Q29tcHV0ZWRTdHlsZSIsICJlbGVtZW50IiwgImVsZW1lbnQiLCAiY2xpcHBpbmdQYXJlbnRzIiwgImdldENvbXB1dGVkU3R5bGUiLCAicmVmZXJlbmNlIiwgImVsZW1lbnQiLCAiZWxlbWVudCIsICJwb3BwZXJPZmZzZXRzIiwgIm9mZnNldCIsICJwbGFjZW1lbnRzIiwgInBsYWNlbWVudCIsICJmbGlwIiwgInBsYWNlbWVudHMiLCAicGxhY2VtZW50IiwgIl9sb29wIiwgIl9pIiwgImNoZWNrcyIsICJvZmZzZXQiLCAicG9wcGVyT2Zmc2V0cyIsICJvZmZzZXQiLCAibWluIiwgIm1heCIsICJlbGVtZW50IiwgImVsZW1lbnQiLCAic29ydCIsICJkZWJvdW5jZSIsICJmbiIsICJzZWxmIiwgImZuIiwgIm1lcmdlZCIsICJlbGVtZW50IiwgImRlZmF1bHRNb2RpZmllcnMiLCAiY3JlYXRlUG9wcGVyIiwgInJlZmVyZW5jZSIsICJwb3BwZXIiLCAiaW5zdGFuY2UiLCAib3B0aW9ucyIsICJnZXRDb21wdXRlZFN0eWxlIiwgImZuIiwgImRlYm91bmNlIiwgInN0YXRlIiwgImVmZmVjdCIsICJub29wRm4iLCAibmV4dCIsICJlbGVtZW50IiwgInRleHQiLCAicGF0aCIsICJmaWxlcyIsICJmYXN0Q29weSIsICJDb25maXJtTW9kYWwiLCAiaW1wb3J0X2Zhc3RfY29weSIsICJvcmRlciIsICJkZWZhdWx0Q29tcGFyZXIiLCAiaW1wb3J0X29ic2lkaWFuIiwgIldvcmtlciIsICJXb3JrZXIiLCAidXBkYXRlIiwgIl8iLCAibW9uc3RlciIsICJpbXBvcnRfb2JzaWRpYW4iLCAidGV4dCIsICJsaW5lIiwgImZhc3RDb3B5IiwgImRvbXRvaW1hZ2UiLCAidGV4dCIsICJsYXlvdXQiXQp9Cg==
